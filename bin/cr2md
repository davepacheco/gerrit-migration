#!/usr/bin/env python3
#
# A tool to generate a GitHub PR Markdown comment summarizing a CR change.json.
# The idea will be to include this in the migrated PRs.
#
# Usage:
#   ./bin/cr2md CHANGE-JSON
#
# Example:
#   ./bin/cr2md ./archive/1207/change.json
#

import codecs
from datetime import datetime
import json
import re
import sys
from pprint import pprint


#---- globals/config


#---- support stuff

def mdquote(s):
    lines = s.splitlines(True)
    return '> ' + '> '.join(lines)

def squeeze(s):
    '''
    Squeeze some empty lines on some comment patterns:

    - fewer newlines here:
        New commits:

            commit b76d86d278bde597f3d4ad485ee24de7ff4b5dd0

            add returnErrorOnly option to client.get and use that
    '''

    if 'New commits:' in s:
        s = re.compile(r'^New commits:\n *\n', re.M).sub('New commits:  \n', s)
        s = re.compile(r'^(    commit [a-f0-9]+)\n *\n', re.M).sub(r'\1  \n', s)
    return s

def indent(s, indentation):
    return indentation + indentation.join(s.splitlines(True))

#---- mainline

def main(argv):
    if len(argv) < 2:
        print('{}: error: missing CHANGE-JSON argument'.format(__file__),
            file=sys.stderr)
        return 1

    changeJsonPath = sys.argv[1]
    with codecs.open(changeJsonPath, 'r', 'utf8') as f:
        change = json.loads(f.read())
    #pprint(change)

    # Header
    #
    # The first line of this is used by `hub pull-request -F FILE` as the
    # the title of the GitHub PR.
    #
    # The "migrated-from-gerrit" is a search target for being able to list
    # all PRs migrated with this tool.
    md = '''\
{}

This PR was migrated-from-gerrit, <https://cr.joyent.us/#/c/{}/>.
The raw archive of this CR is [here]({}).
See [MANTA-4594](https://smartos.org/bugview/MANTA-4594) for info on Joyent Eng's migration from Gerrit.'''.format(
        change['subject'],
        change['number'],
        'https://github.com/joyent/gerrit-migration/tree/master/archive/' + change['number']
    )

    # Try to reconstruct any CR and patch set comments. The "change.json"
    # doesn't have timestamps on the patchSet[*].comments, so it is a bit
    # sketchy.
    comments = []
    for i, comment in enumerate(change['comments']):
        if re.compile(r'^Uploaded patch set \d+').search(comment['message']):
            # Skip this comment. It is generic and signal-free.
            pass
        elif comment['reviewer']['username'] == 'joyent-automation':
            # These are low signal.
            pass
        else:
            msg = comment['message']

            # The following indicates there are M comments on the patchSets[N]
            # to include:
            #       Patch Set N:( .*?)?
            #
            #       (M comments?)
            pscommentsPat = re.compile(
                r'^Patch Set (\d+):( .*?)?\n\n^\((\d+) comments?\)$', re.M)
            match = pscommentsPat.search(msg)
            if match:
                n = int(match.group(1))
                m = int(match.group(3))
                # Pop `m` comments off the front of the array of comments
                # for this patchSet.
                cs = []
                for i in range(m):
                    cs.append(change['patchSets'][n - 1]['comments'].pop(0))
                # Append to the "msg" for each of these patchSet comments.
                for c in cs:
                    #pprint(c, stream=sys.stderr)
                    msg += '\n\n###### {}#{}  \n\n{}'.format(
                        c['file'],
                        c['line'],
                        c['message']
                    )

            comments.append('##### @{} commented at {}\n\n{}'.format(
                comment['reviewer']['username'],
                datetime.utcfromtimestamp(comment['timestamp']).isoformat(),
                mdquote(squeeze(msg))
            ))

    if comments:
        md += '\n\n## CR discussion\n\n' + '\n\n'.join(comments)

    print(md)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
