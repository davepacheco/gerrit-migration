commit c1cc2db822db159bd341fef99b85daf1fb23448d (refs/changes/47/147/8)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-08-02T18:27:31+00:00 (3 years, 2 months ago)
    
    joyent/node-lockfd#5 Add support for flock(3C)
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>
    Reviewed by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/.gitignore b/.gitignore
index 5a891b0..255673d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,5 @@
 .*.swp
 /0-npm-stamp
-/Makefile
 /downloads/
 /lib/*.node
 /main.js
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..14e5f4b
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = https://github.com/davepacheco/jsstyle.git
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..a066d30
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,75 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2016, Joyent, Inc.
+#
+
+#
+# node-lockfd Makefile
+#
+
+#
+# Tools
+#
+
+TAPE	:= ./node_modules/.bin/tape
+NPM	:= npm
+
+#
+# Files
+#
+
+JS_FILES	:= $(shell find lib test -name '*.js')
+JSSTYLE_FILES	= $(JS_FILES)
+JSSTYLE_FLAGS	= -f tools/jsstyle.conf
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
+JSON_FILES	:= package.json
+LOCKFD_BINDING	:= ./lib/lockfd_binding.node
+
+include ./tools/mk/Makefile.defs
+
+TOP             := $(shell pwd)
+
+#
+# Repo-specific targets
+#
+
+.PHONY: all
+all: $(LOCKFD_BINDING) ./node_modules
+	$(NPM) install
+
+$(LOCKFD_BINDING):
+	cd src && make
+
+$(ESLINT):
+	$(NPM) install
+
+$(TAPE):
+	$(NPM) install
+
+CLEAN_FILES += $(TAPE) ./node_modules/tape $(LOCKFD_BINDING)
+
+.PHONY: test
+test: $(TAPE)
+	@(for F in test/unit/*.test.js; do \
+		echo "# $$F" ;\
+		$(NODE_EXEC) $(TAPE) $$F ;\
+		[[ $$? == "0" ]] || exit 1; \
+	done)
+
+.PHONY: check
+check:: $(ESLINT)
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
+
+#
+# Includes
+#
+
+include ./tools/mk/Makefile.deps
+include ./tools/mk/Makefile.targ
diff --git a/README.md b/README.md
index 231e2da..75f14da 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,8 @@
+
+<!--
+    Copyright 2016, Joyent, Inc.
+-->
+
 # node-lockfd
 
 A trivial wrapper around `fcntl(F_SETLKW)`.  Presently allows
@@ -22,6 +27,17 @@ called.
 
 Synchronous version of `lockfd(fd)`.
 
+### flock(fd, op, callback)
+
+This will call [flock(3C)](http://illumos.org/man/3C/flock) and perform the
+specified operation, which is a bitwise inclusive OR of LOCK\_SH, LOCK\_EX,
+LOCK\_UN, and LOCK\_NB. These constants are exported with this module for
+convenience. Once the operation completes, the callback will be invoked.
+
+### flockSync(fd, op, callback)
+
+Synchronous version of `flock(fd, op)`.
+
 ## Examples
 
 ```javascript
@@ -43,6 +59,40 @@ mod_fs.closeSync(fd);
 process.exit(0);
 ```
 
+Using OFD-style locking:
+
+
+```javascript
+var mod_fs = require('fs');
+var mod_lockfd = require('lockfd');
+
+var lockfileA = mod_fs.openSync('/tmp/.lockfile', 'r+');
+var lockfileB = mod_fs.openSync('/tmp/.lockfile', 'r+');
+console.error('opened fds %d and %d', lockfileA, lockfileB);
+
+mod_lockfd.flock(lockfileA, mod_lockfd.LOCK_EX, function (err) {
+    if (err) {
+        throw err;
+    }
+
+    doSomeWork(function () {
+        mod_lockfd.flockSync(lockfileA, mod_lockfd.LOCK_UN);
+        mod_fs.closeSync(lockfileA);
+    });
+});
+
+mod_lockfd.flock(lockfileB, mod_lockfd.LOCK_EX, function (err) {
+    if (err) {
+        throw err;
+    }
+
+    doConflictingWork(function () {
+        mod_lockfd.flockSync(lockfileB, mod_lockfd.LOCK_UN);
+        mod_fs.closeSync(lockfileB);
+    });
+});
+```
+
 ## License
 
 MIT.
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..b94eb62
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit b94eb629ee524d21b563c8b4461caa2bdf1becc6
diff --git a/lib/index.js b/lib/index.js
index 05366a1..de2d58b 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,5 +1,9 @@
 /* vim: set syntax=javascript ts=8 sts=8 sw=8 noet: */
 
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
 var BINDING = require('./lockfd_binding');
 
 function
@@ -57,7 +61,61 @@ lockfdSync(fd)
 	return (null);
 }
 
+function
+flock(fd, op, callback)
+{
+	check_arg(1, 'fd', fd, 'number');
+	check_arg(2, 'op', op, 'number');
+	check_arg(3, 'callback', callback, 'function');
+
+	BINDING.flock(fd, op, false, function (ret, errmsg, errno) {
+		if (ret === -1) {
+			var err = new Error('File Locking Error: ' + errmsg);
+			err.code = errno;
+
+			callback(err);
+			return;
+		}
+
+		callback(null);
+	});
+}
+
+function
+flockSync(fd, op)
+{
+	var cb_fired = false;
+	var err;
+
+	check_arg(1, 'fd', fd, 'number');
+	check_arg(2, 'op', op, 'number');
+
+	BINDING.flock(fd, op, true, function (ret, errmsg, errno) {
+		cb_fired = true;
+
+		if (ret === -1) {
+			err = new Error('File Locking Error: ' + errmsg);
+			err.code = errno;
+			return;
+		}
+	});
+
+	if (!cb_fired) {
+		throw (new Error('flockSync: CALLBACK NOT FIRED'));
+	} else if (err) {
+		throw (err);
+	}
+
+	return (null);
+}
+
 module.exports = {
+	LOCK_SH: 1,
+	LOCK_EX: 2,
+	LOCK_NB: 4,
+	LOCK_UN: 8,
+	flock: flock,
+	flockSync: flockSync,
 	lockfd: lockfd,
 	lockfdSync: lockfdSync
 };
diff --git a/package.json b/package.json
index 8f65cef..2d48522 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "lockfd",
-  "description": "thin wrapper around fcntl(F_SETLK)",
-  "version": "1.0.1",
+  "description": "thin wrapper around fcntl(F_SETLK) and flock()",
+  "version": "1.1.0",
   "author": "Joshua M. Clulow <jmc@joyent.com>",
   "repository": "git://github.com/joyent/node-lockfd.git",
   "main": "./lib/index.js",
@@ -12,5 +12,10 @@
     "postinstall": "cd src && gmake $(eval echo ${MAKE_OVERRIDES})",
     "check": "jshint lib/*.js"
   },
+  "devDependencies": {
+    "tape": "4.5.1",
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1"
+  },
   "license": "MIT"
 }
diff --git a/src/Makefile b/src/Makefile
index 4ca22ad..1fe068e 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -17,9 +17,9 @@ ERRNO_JSON =	errno.json
 CC =		/opt/local/bin/gcc
 CXX =		/opt/local/bin/g++
 
-CFLAGS +=	-pthread
+CFLAGS +=	-pthread -D__EXTENSIONS__
 
-#WARN_FLAGS +=	-Wno-error=unused-parameter
+WARN_FLAGS +=	-Wno-error=unused-parameter
 
 #LDFLAGS +=	-L/usr/lib/fm -R/usr/lib/fm
 LIBS +=		-lumem
diff --git a/src/lockfd.c b/src/lockfd.c
index 48372cd..efa526c 100644
--- a/src/lockfd.c
+++ b/src/lockfd.c
@@ -1,3 +1,8 @@
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -6,6 +11,7 @@
 #include <errno.h>
 #include <unistd.h>
 #include <pthread.h>
+#include <sys/file.h>
 
 #include <libnvpair.h>
 
@@ -18,14 +24,34 @@ typedef struct lockfd_args {
 	boolean_t lfa_run_sync;
 } lockfd_args_t;
 
+typedef struct flock_args {
+	v8plus_jsfunc_t fla_cb;
+	int fla_fd;
+	int fla_op;
+	boolean_t fla_run_sync;
+} flock_args_t;
+
 static const char *
 errno_to_code(int en)
 {
-	return (en == EAGAIN ? "EAGAIN" :
-	    en == ENOLCK ? "ENOLCK" :
-	    en == EINTR ? "EINTR" :
-	    en == EDEADLK ? "EDEADLK" :
-	    "");
+	switch (en) {
+	case EAGAIN:
+		return ("EAGAIN");
+	case ENOLCK:
+		return ("ENOLCK");
+	case EINTR:
+		return ("EINTR");
+	case EDEADLK:
+		return ("EDEADLK");
+	case EBADF:
+		return ("EBADF");
+	case EINVAL:
+		return ("EINVAL");
+	case EOPNOTSUPP:
+		return ("EOPNOTSUPP");
+	default:
+		return ("<unknown errno>");
+	}
 }
 
 /*
@@ -46,7 +72,7 @@ lockfd_thread(void *arg)
 	 * Call back into JS:
 	 */
 	ap = v8plus_obj(
-	    V8PLUS_TYPE_NUMBER, "0", (double) ret,
+	    V8PLUS_TYPE_NUMBER, "0", (double)ret,
 	    V8PLUS_TYPE_STRING, "1", strerror(en),
 	    V8PLUS_TYPE_STRING, "2", errno_to_code(en),
 	    V8PLUS_TYPE_NONE);
@@ -55,7 +81,7 @@ lockfd_thread(void *arg)
 
 	if (!lfa->lfa_run_sync) {
 		/*
-		 * Release our callback, held from the ititial call:
+		 * Release our callback, held from the initial call:
 		 */
 		v8plus_jsfunc_rele(lfa->lfa_cb);
 	}
@@ -66,7 +92,70 @@ lockfd_thread(void *arg)
 }
 
 /*
- * Primary entrypoint from Javascript:
+ * Worker thread for blocking flock() calls:
+ */
+static void *
+flock_worker(void *cop, void *arg)
+{
+	flock_args_t *fla = arg;
+	nvlist_t *ap;
+	int ret, en = 0;
+
+	errno = 0;
+	while ((ret = flock(fla->fla_fd, fla->fla_op)) == -1) {
+		if (errno != EINTR) {
+			en = errno;
+			break;
+		}
+	}
+
+	/*
+	 * Create object to pass back into JS:
+	 */
+	ap = v8plus_obj(
+	    V8PLUS_TYPE_NUMBER, "0", (double)ret,
+	    V8PLUS_TYPE_STRING, "1", strerror(en),
+	    V8PLUS_TYPE_STRING, "2", errno_to_code(en),
+	    V8PLUS_TYPE_NONE);
+
+	return (ap);
+}
+
+/*
+ * Function called upon completion of the flock_worker() thread
+ */
+static void
+flock_completion(void *cop, void *arg, void *resp)
+{
+	flock_args_t *fla = arg;
+	nvlist_t *ap = resp;
+
+	/*
+	 * Call callback with response object, if object allocation succeeded.
+	 * An exception will have been queued if it failed.
+	 */
+	if (ap != NULL) {
+		(void) v8plus_call(fla->fla_cb, ap);
+		nvlist_free(ap);
+	}
+
+	if (!fla->fla_run_sync) {
+		/* Release our callback, held from the initial call: */
+		v8plus_jsfunc_rele(fla->fla_cb);
+	}
+
+	free(fla);
+}
+
+static void *
+flock_thread(void *fla)
+{
+	flock_completion(NULL, fla, flock_worker(NULL, fla));
+	return (NULL);
+}
+
+/*
+ * Primary entrypoint from Javascript to lock_fd function:
  */
 static nvlist_t *
 lockfd_lockfd(const nvlist_t *ap)
@@ -118,7 +207,7 @@ lockfd_lockfd(const nvlist_t *ap)
 		v8plus_jsfunc_hold(lfa->lfa_cb);
 
 		/*
-		 * Create a thread for the blocking fcntl(F_SETLKW) call:
+		 * Create a worker thread for the blocking fcntl(F_SETLKW) call:
 		 */
 		if (pthread_create(&newthr, NULL, lockfd_thread, lfa) != 0) {
 			return (v8plus_error(V8PLUSERR_UNKNOWN,
@@ -129,6 +218,65 @@ lockfd_lockfd(const nvlist_t *ap)
 	return (v8plus_void());
 }
 
+/*
+ * Primary entrypoint from JavaScript to flock function:
+ */
+static nvlist_t *
+lockfd_flock(const nvlist_t *ap)
+{
+	flock_args_t *fla = calloc(1, sizeof (*fla));
+	pthread_t newthr;
+	double double_fd;
+	double double_op;
+
+	if (v8plus_args(ap, V8PLUS_ARG_F_NOEXTRA,
+	    V8PLUS_TYPE_NUMBER, &double_fd,
+	    V8PLUS_TYPE_NUMBER, &double_op,
+	    V8PLUS_TYPE_BOOLEAN, &fla->fla_run_sync,
+	    V8PLUS_TYPE_JSFUNC, &fla->fla_cb,
+	    V8PLUS_TYPE_NONE) != 0) {
+		free(fla);
+		return (v8plus_error(V8PLUSERR_BADARG, "bad args"));
+	}
+	fla->fla_fd = double_fd;
+	fla->fla_op = double_op;
+
+	if (fla->fla_run_sync) {
+		/*
+		 * Run the blocking flock() call in the current thread:
+		 */
+		flock_completion(NULL, fla, flock_worker(NULL, fla));
+	} else {
+		/*
+		 * Hold the function so that we can call it later from
+		 * the deferred worker thread:
+		 */
+		v8plus_jsfunc_hold(fla->fla_cb);
+
+		/*
+		 * If we were using the libuv workers, this would just be:
+		 *
+		 * v8plus_defer(NULL, fla, flock_worker, flock_completion);
+		 *
+		 * But since v0.10.x has 4 workers by default, it would be very
+		 * easy to queue up threads blocking on acquiring the lock, and
+		 * therefore prevent any I/O from happening, which may prevent
+		 * the holder of the lock from ever finishing their work. To
+		 * avoid this, we create a new thread:
+		 */
+		if (pthread_create(&newthr, NULL, flock_thread, fla) != 0) {
+			return (v8plus_error(V8PLUSERR_UNKNOWN,
+			    "could not create thread"));
+		}
+		if (pthread_detach(newthr) != 0) {
+			return (v8plus_error(V8PLUSERR_UNKNOWN,
+			    "could not detach thread"));
+		}
+	}
+
+	return (v8plus_void());
+}
+
 /*
  * v8plus Boilerplate
  */
@@ -142,6 +290,10 @@ const uint_t v8plus_method_count =
     sizeof (v8plus_methods) / sizeof (v8plus_methods[0]);
 
 const v8plus_static_descr_t v8plus_static_methods[] = {
+	{
+		sd_name: "flock",
+		sd_c_func: lockfd_flock
+	},
 	{
 		sd_name: "lock_fd",
 		sd_c_func: lockfd_lockfd
diff --git a/test/unit/flock.test.js b/test/unit/flock.test.js
new file mode 100644
index 0000000..5c8b7ee
--- /dev/null
+++ b/test/unit/flock.test.js
@@ -0,0 +1,205 @@
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+var mod_child = require('child_process');
+var mod_fs = require('fs');
+var mod_lockfd = require('../../lib');
+var test = require('tape');
+
+var PATH_DIR = '/var/tmp/';
+var PATH_FILE = '/var/tmp/.node-lockfd_lockfile';
+var TIMEOUT = 1000;
+
+mod_fs.appendFileSync(PATH_FILE, '');
+
+function asyncTestRun(t, path, ltype, callback) {
+	var fd1 = mod_fs.openSync(path, 'r');
+	var fd2 = mod_fs.openSync(path, 'r');
+	var results = [];
+	var done = 0;
+
+	function doWork(fd, message) {
+		results.push(message);
+
+		mod_lockfd.flock(fd, mod_lockfd.LOCK_UN, function (err) {
+			t.ifErr(err, 'unlocked successfully');
+			done += 1;
+			if (done > 2) {
+				throw new Error('callback() already called!');
+			} else if (done === 2) {
+				mod_fs.closeSync(fd1);
+				mod_fs.closeSync(fd2);
+				callback(results);
+			}
+		});
+	}
+
+	function getSecondLock() {
+		mod_lockfd.flock(fd2, ltype, function (err) {
+			t.ifErr(err, 'acquired lock successfully');
+			doWork(fd2, 'workload 2');
+		});
+	}
+
+	mod_lockfd.flock(fd1, ltype, function (err) {
+		t.ifErr(err, 'acquired lock successfully');
+		process.nextTick(getSecondLock);
+		setTimeout(doWork, TIMEOUT, fd1, 'workload 1');
+	});
+}
+
+
+function syncTestRun(_, path, ltype, callback) {
+	var fd1 = mod_fs.openSync(path, 'r');
+	var results = [];
+	var done = 0;
+
+	function finish() {
+		done += 1;
+		if (done > 2) {
+			throw new Error('callback() already called!');
+		} else if (done === 2) {
+			mod_fs.closeSync(fd1);
+			callback(results);
+		}
+	}
+
+	function doWork(fd, message) {
+		results.push(message);
+		mod_lockfd.flockSync(fd, mod_lockfd.LOCK_UN);
+		finish();
+	}
+
+	mod_lockfd.flockSync(fd1, ltype);
+	var child = mod_child.fork('lock-and-reply.js',
+			[ path, ltype, 'workload 2' ], { cwd: __dirname });
+	child.on('message', function (message) {
+		results.push(message);
+		finish();
+	});
+	setTimeout(doWork, TIMEOUT, fd1, 'workload 1');
+}
+
+
+test('Bad file descriptor (async)', function (t) {
+	mod_lockfd.flock(800, mod_lockfd.LOCK_EX, function (err) {
+		t.ok(err, 'Bad file descriptor should call back with an error');
+		t.deepEqual(err.message, 'File Locking Error: Bad file number',
+		    'Error message');
+		t.end();
+	});
+});
+
+
+test('Bad file descriptor (sync)', function (t) {
+	try {
+		mod_lockfd.flockSync(800, mod_lockfd.LOCK_EX);
+		t.ok(false, 'flockSync() with bad fd should throw');
+	} catch (err) {
+		t.ok(err, 'Bad file descriptor should throw an error');
+		t.deepEqual(err.message, 'File Locking Error: Bad file number',
+		    'Error message');
+	}
+	t.end();
+});
+
+
+test('Bad lock type (async)', function (t) {
+	var fd = mod_fs.openSync(PATH_FILE, 'r');
+	mod_lockfd.flock(fd, 800, function (err) {
+		t.ok(err, 'Bad file descriptor should call back with an error');
+		t.deepEqual(err.message, 'File Locking Error: Invalid argument',
+		    'Error message');
+		mod_fs.closeSync(fd);
+		t.end();
+	});
+});
+
+
+test('Bad lock type (sync)', function (t) {
+	var fd = mod_fs.openSync(PATH_FILE, 'r');
+	try {
+		mod_lockfd.flockSync(fd, 800);
+		t.ok(false, 'flockSync() with bad type should throw');
+	} catch (err) {
+		t.ok(err, 'Bad file descriptor should throw an error');
+		t.deepEqual(err.message, 'File Locking Error: Invalid argument',
+		    'Error message');
+	}
+	mod_fs.closeSync(fd);
+	t.end();
+});
+
+
+test('Exclusive directory locks (async)', function (t) {
+	asyncTestRun(t, PATH_DIR, mod_lockfd.LOCK_EX, function (results) {
+		t.deepEqual(results, [ 'workload 1', 'workload 2' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Exclusive file locks (async)', function (t) {
+	asyncTestRun(t, PATH_FILE, mod_lockfd.LOCK_EX, function (results) {
+		t.deepEqual(results, [ 'workload 1', 'workload 2' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Exclusive directory locks (sync)', function (t) {
+	syncTestRun(t, PATH_DIR, mod_lockfd.LOCK_EX, function (results) {
+		t.deepEqual(results, [ 'workload 1', 'workload 2' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Exclusive file locks (sync)', function (t) {
+	syncTestRun(t, PATH_FILE, mod_lockfd.LOCK_EX, function (results) {
+		t.deepEqual(results, [ 'workload 1', 'workload 2' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Shared directory locks (async)', function (t) {
+	asyncTestRun(t, PATH_DIR, mod_lockfd.LOCK_SH, function (results) {
+		t.deepEqual(results, [ 'workload 2', 'workload 1' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Shared file locks (async)', function (t) {
+	asyncTestRun(t, PATH_FILE, mod_lockfd.LOCK_SH, function (results) {
+		t.deepEqual(results, [ 'workload 2', 'workload 1' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Shared directory locks (sync)', function (t) {
+	syncTestRun(t, PATH_DIR, mod_lockfd.LOCK_SH, function (results) {
+		t.deepEqual(results, [ 'workload 2', 'workload 1' ],
+		    'Correct final order');
+		t.end();
+	});
+});
+
+
+test('Shared file locks (sync)', function (t) {
+	syncTestRun(t, PATH_FILE, mod_lockfd.LOCK_SH, function (results) {
+		t.deepEqual(results, [ 'workload 2', 'workload 1' ],
+		    'Correct final order');
+		t.end();
+	});
+});
diff --git a/test/unit/lock-and-reply.js b/test/unit/lock-and-reply.js
new file mode 100644
index 0000000..5aecc9b
--- /dev/null
+++ b/test/unit/lock-and-reply.js
@@ -0,0 +1,16 @@
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+var mod_fs = require('fs');
+var mod_lockfd = require('../../lib');
+
+var lpath = process.argv[2];
+var ltype = Number(process.argv[3]);
+var message = process.argv[4];
+
+var fd = mod_fs.openSync(lpath, 'r');
+
+mod_lockfd.flockSync(fd, ltype);
+process.send(message);
+mod_fs.closeSync(fd);
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..698df05
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,21 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "brace-style": "off",
+        "no-mixed-spaces-and-tabs": "off"
+    }
+}
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..01128c9
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,13 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2016, Joyent, Inc.
+#
+
+indent=tab
+doxygen
+unparenthesized-return=1
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..85139d7
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,51 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..1cffbe7
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,54 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..16b15aa
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,318 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE	?= tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs:							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
