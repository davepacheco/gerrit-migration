commit 30bb0dc44073a9716e01ae82e11e98798c35a44b (refs/changes/09/1509/2)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2017-02-15T02:02:31+00:00 (2 years, 8 months ago)
    
    NAPI-326 'free' and 'unassign' IP need their usages untangled

diff --git a/lib/endpoints/networks/ips.js b/lib/endpoints/networks/ips.js
index 2db4997..251b205 100644
--- a/lib/endpoints/networks/ips.js
+++ b/lib/endpoints/networks/ips.js
@@ -111,7 +111,9 @@ function putIP(req, res, next) {
     // the mod_ip.* functions require a network model object:
     req.params.network = req._network;
 
-    if (req.params.hasOwnProperty('free') && req.params.free) {
+    if (req.params.hasOwnProperty('free') && req.params.free &&
+        !req.params.hasOwnProperty('unassign')) {
+
         return mod_ip.del(req.app, req.log, req.params, function (err) {
             if (err && err.statusCode !== 404) {
                 return next(err);
diff --git a/lib/models/ip/index.js b/lib/models/ip/index.js
index fdc850a..52d7dde 100644
--- a/lib/models/ip/index.js
+++ b/lib/models/ip/index.js
@@ -26,7 +26,6 @@ var util_ip = require('../../util/ip');
 var validate = require('../../util/validate');
 
 
-
 // --- Globals
 
 
@@ -142,7 +141,19 @@ function validateNetworkOwner(_opts, _, validated, callback) {
             constants.OWNER_MATCH_MSG));
     }
 
-    return callback();
+    callback();
+}
+
+/*
+ * The `free` and `unassign` property can't be set to `true` at the same time.
+ */
+function validateFreeUnassign(_opts, _, validated, callback) {
+    if (validated.free && validated.unassign) {
+        return callback(errors.invalidParam('unassign',
+            constants.FREE_UNASSIGN_MSG));
+    }
+
+    callback();
 }
 
 
@@ -315,14 +326,16 @@ function updateIP(app, log, params, callback) {
             belongs_to_uuid: validate.UUID,
             check_owner: validate.bool,
             owner_uuid: validate.UUID,
-            reserved: validate.bool
+            reserved: validate.bool,
+            unassign: validate.bool,
+            free: validate.bool
         },
 
         required: {
             network: validateNetworkObj
         },
 
-        after: validateNetworkOwner
+        after: [validateNetworkOwner, validateFreeUnassign]
     };
 
     // both belongs_to_type and belongs_to_uuid must be set in UFDS at the
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 5b69e9b..4a840c3 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -145,6 +145,7 @@ module.exports = {
     MTU_NETWORK_GT_NICTAG: 'network mtu must be under nic_tag mtu',
     MTU_NICTAG_UPDATE_MSG: 'nic_tag mtu update must support existing networks',
     OWNER_MATCH_MSG: 'network owner_uuids do not match',
+    FREE_UNASSIGN_MSG: 'free and unassign are both true',
     POOL_FULL_MSG: 'all networks in pool are full',
     POOL_IP_MSG: 'IP cannot be specified with a network pool',
     POOL_MIN_NETS_MSG:
diff --git a/test/unit/ips.test.js b/test/unit/ips.test.js
index 4107705..3eeb8c0 100644
--- a/test/unit/ips.test.js
+++ b/test/unit/ips.test.js
@@ -23,6 +23,7 @@ var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
+var constants = require('../../lib/util/constants');
 
 
 
@@ -679,6 +680,26 @@ test('Update IP - free (IP not in moray)', function (t) {
     });
 });
 
+test('Update IPv4 - unassign and free (IP in moray)', function (t) {
+    var params = {
+        belongs_to_type: 'server',
+        belongs_to_uuid: mod_uuid.v4(),
+        owner_uuid: mod_uuid.v4()
+    };
+
+    NAPI.updateIP(NETV4.uuid, '10.0.2.34', params, function (err) {
+        t.ifError(err);
+        var uf_params = { unassign: 'true', free: 'true' };
+        NAPI.updateIP(NETV4.uuid, '10.0.2.34', uf_params,
+            function (err2, _, req, res) {
+                t.ok(err2, 'Expecting error');
+                t.deepEqual(err2.body.errors[0], {field: 'unassign',
+                    code: 'InvalidParameter',
+                    message: constants.FREE_UNASSIGN_MSG});
+                return t.end();
+            });
+    });
+});
 
 test('Update IPv4 - unassign (IP in moray)', function (t) {
     var params = {
@@ -694,7 +715,7 @@ test('Update IPv4 - unassign (IP in moray)', function (t) {
             function (err2, obj, req, res) {
             t.ifError(err2);
             if (err2) {
-                t.deepEqual(err.body, {}, 'error body');
+                t.deepEqual(err2.body, {}, 'error body');
                 return t.end();
             }
 
