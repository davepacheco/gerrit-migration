commit 6b94176151be3919bb3243795d63f2baa06b2ed9 (refs/changes/74/2874/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-10-25T20:27:39-07:00 (1 year, 11 months ago)
    
    CNS-215 CMON-74 not working when admin and external are on same NIC

diff --git a/lib/cn-filter.js b/lib/cn-filter.js
index efb48bb..56128d6 100644
--- a/lib/cn-filter.js
+++ b/lib/cn-filter.js
@@ -16,6 +16,7 @@ var bunyan = require('bunyan');
 var LRUCache = require('lru-cache');
 var restify = require('restify-clients');
 var qs = require('querystring');
+var crypto = require('crypto');
 
 var consts = require('./consts');
 
@@ -60,7 +61,7 @@ util.inherits(CNFilter, stream.Transform);
 
 CNFilter.prototype.updateServers = function (cb) {
 	var self = this;
-	self.client.get('/servers?extras=status,sysinfo',
+	self.client.get('/servers?extras=status',
 	    function (err, req, res, objs) {
 		if (err) {
 			self.log.warn(err,
@@ -107,11 +108,24 @@ CNFilter.prototype.pushFakeVM = function (server) {
 	 * to actually list any of its IP addresses in DNS or else some
 	 * operators who like their security by obscurity will have a fit.
 	 *
-	 * So we copy across only an admin NIC for the server. The code in
+	 * So we make only a fake admin NIC for the server. The code in
 	 * net-filter.js will cleave this NIC out for us, but set everything
 	 * else up properly, and we will generate only CMON records since we
 	 * have no listable IP addresses left. Winner.
+	 *
+	 * The biggest problem here is that we really don't want
+	 * NapiLegacyFilter to look up our faked MAC address and find a real
+	 * NIC, or else its double-check on the belongs_to_uuid will fail and
+	 * this fake VM will get dropped.
+	 *
+	 * However, we're going to be doing this again periodically, so if
+	 * we just generate a new random MAC each time, even if we collide
+	 * once and get dropped, it's super unlikely it'll happen every time.
+	 * So we'll eventually get our CMON record in DNS and it'll stick
+	 * around since pipeline drops don't remove things from DNS.
 	 */
+	var mac = crypto.randomBytes(6).toString('hex').
+	    replace(/(.{2})(?=.)/g, '$1:');
 	var vm = {
 		uuid: server.uuid,
 		state: 'running',
@@ -122,9 +136,12 @@ CNFilter.prototype.pushFakeVM = function (server) {
 		tags: {
 			'smartdc_role': server.hostname
 		},
-		nics: server.nics.filter(function (nic) {
-			return (nic.mac && nic.ip && nic.nic_tag === 'admin');
-		}),
+		nics: [{
+			nic_tag: 'admin',
+			ip: '192.0.2.1',
+			vlan_id: 0,
+			mac: mac
+		}],
 		origin: 'fake-cn',
 		alias: server.hostname
 	};
@@ -192,57 +209,6 @@ function cutServerObj(obj) {
 	cutObj.last_heartbeat = new Date(obj.last_heartbeat);
 	cutObj.heartbeat_age = (new Date()) - cutObj.last_heartbeat;
 
-	cutObj.nics = {};
-	if (typeof (obj.sysinfo) === 'object' && obj.sysinfo !== null) {
-		var nics = obj.sysinfo['Network Interfaces'];
-		assert.object(nics);
-		assert.ok(nics);
-
-		cutObj.nics = [];
-
-		Object.keys(nics).forEach(function (k) {
-			var n = nics[k];
-			var o = {
-				mac: n['MAC Address'],
-				ip: n['ip4addr']
-			};
-			if (n['NIC Names'].length === 1)
-				o.nic_tag = n['NIC Names'][0];
-			else if (n['NIC Names'].indexOf('admin') !== -1)
-				o.nic_tag = 'admin';
-			else if (n['NIC Names'].indexOf('external') !== -1)
-				o.nic_tag = 'external';
-			else
-				o.nic_tag = n['NIC Names'][0];
-			n.nic_tag = o.nic_tag;
-			if (!o.mac || !o.nic_tag || !o.ip)
-				return;
-			cutObj.nics.push(o);
-		});
-
-		var vnics = obj.sysinfo['Virtual Network Interfaces'];
-		if (typeof (vnics) === 'object' && vnics !== null) {
-			Object.keys(vnics).forEach(function (k) {
-				var n = vnics[k];
-				var vlan = n['VLAN'];
-				if (typeof (vlan) === 'string')
-					vlan = parseInt(vlan, 10);
-				if (!isFinite(vlan))
-					vlan = undefined;
-				var o = {
-					mac: n['MAC Address'],
-					ip: n['ip4addr'],
-					vlan_id: vlan
-				};
-				var h = nics[n['Host Interface']];
-				o.nic_tag = h.nic_tag;
-				if (!o.mac || !o.nic_tag || !o.ip)
-					return;
-				cutObj.nics.push(o);
-			});
-		}
-	}
-
 	/*
 	 * "CN that is not running" includes CNs with a non-"running" status
 	 * and a last_heartbeat >1min ago, those that have not heartbeated in
diff --git a/lib/napi-legacy-filter.js b/lib/napi-legacy-filter.js
index 37b5a70..6dd3c65 100644
--- a/lib/napi-legacy-filter.js
+++ b/lib/napi-legacy-filter.js
@@ -113,9 +113,14 @@ NAPILegacyFilter.prototype._transform = function (vm, enc, cb) {
 			}
 
 			assert.strictEqual(napiObj.mac, nic.mac);
-			assert.strictEqual(napiObj.belongs_to_uuid, vm.uuid);
+			if (napiObj.belongs_to_uuid !== vm.uuid) {
+				ccb(new Error('NAPI NIC belongs_to_uuid ' +
+				    'does not match VM'));
+				return;
+			}
 			nic.network_uuid = napiObj.network_uuid;
 			nic.ip = napiObj.ip;
+			nic.nic_tag = napiObj.nic_tag;
 			if (!nic.ips)
 				nic.ips = napiObj.ips;
 
@@ -164,6 +169,7 @@ NAPILegacyFilter.prototype.getNic = function (mac, cb) {
 		cutObj.belongs_to_uuid = obj.belongs_to_uuid;
 		cutObj.ips = obj.ips;
 		cutObj.ip = obj.ip;
+		cutObj.nic_tag = obj.nic_tag;
 		cutObj.network_uuid = obj.network_uuid;
 
 		self.cache.set(mac, cutObj);
