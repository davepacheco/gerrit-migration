commit c4574dc865ab5214a9efe1b91c166320ee68bbd8 (refs/changes/81/2781/2)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-10-16T12:34:10-04:00 (2 years ago)
    
    ZAPI-808 vms.changefeed.test.js race with changefeed listener

diff --git a/test/vms.changefeed.test.js b/test/vms.changefeed.test.js
index a9b0ac9..7bf36e6 100644
--- a/test/vms.changefeed.test.js
+++ b/test/vms.changefeed.test.js
@@ -218,6 +218,14 @@ exports.napi_networks_ok = function (t) {
 
 exports.create_vm = function (t) {
     t.expect(8);
+
+    /*
+     * Store changefeed listener events as they come in before the VMs UUID is
+     * available.  Once the UUID is available, process all events that have
+     * been pushed onto this array.
+     */
+    var changeItems = [];
+
     var md = {
         foo: 'bar',
         credentials: JSON.stringify({ 'user_pw': '12345678' })
@@ -261,24 +269,51 @@ exports.create_vm = function (t) {
                 common.checkHeaders(t, res2.headers);
                 t.ok(body2, 'provisioning vm ok');
                 VM = body2;
+
+                /*
+                 * Now that the VMs UUID is available, we can "replay" all old
+                 * events seen by the listener below through the
+                 * processChangeItem function.
+                 */
+                changeItems.forEach(processChangeItem);
             });
         });
     });
 
-    var noStateReceived = true;
+    /*
+     * If the VMs UUID is not yet available (meaning client.get(vmLocation)
+     * hasn't run sucessfully above yet) store the events in an array to be
+     * processed later, otherwise just process them now.
+     */
     listener.on('readable', function () {
-        var changeItem = listener.read();
+        var changeItem;
+        while ((changeItem = listener.read())) {
+            if (!VM) {
+                changeItems.push(changeItem);
+            } else {
+                processChangeItem(changeItem);
+            }
+        }
+    });
+
+    /*
+     * Process each changeItem seen (must only run after VM.uuid is available)
+     * and finish the test when a "state" change has been seen.
+     */
+    var stateReceived = false;
+    function processChangeItem(changeItem) {
         var changeKind = changeItem.changeKind;
-        if (noStateReceived &&
+        if (!stateReceived &&
             changeItem.changedResourceId === VM.uuid &&
             changeKind.subResources &&
             changeKind.subResources.indexOf('state') !== -1) {
+
             t.ok(true, 'state received');
-            noStateReceived = false;
+            stateReceived = true;
             listener._endSocket();
             t.done();
         }
-    });
+    }
 };
 
 exports.wait_provisioned_job = function (t) {
@@ -752,4 +787,4 @@ exports.create_vm_that_fails_provisioning_workflow = function (t) {
             }
         }
     }
-};
\ No newline at end of file
+};
