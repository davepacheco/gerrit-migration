From e4acdadc066739841098813fa186dff8070f973f Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Mon, 14 May 2018 10:53:37 +0200
Subject: [PATCH] TOOLS-1717 sdcadm should not load SDC Application from SAPI
 when not required

---
 lib/channel.js                        | 206 +++++++++-------
 lib/cli/do_avail.js                   |  15 +-
 lib/cli/do_nfs_volumes.js             |  14 +-
 lib/cli/do_self_update.js             |  34 ++-
 lib/cli/do_update_gz_tools.js         |  31 ++-
 lib/cli/do_update_other.js            |  19 +-
 lib/default-fabric.js                 |   5 +-
 lib/platform.js                       |  86 ++++---
 lib/post-setup/cmon.js                |  16 +-
 lib/post-setup/cns.js                 |  12 +-
 lib/post-setup/dev-sample-data.js     |  17 +-
 lib/post-setup/docker.js              |   8 +-
 lib/post-setup/fabrics.js             | 170 +++++++------
 lib/post-setup/ha-binder.js           |   6 +-
 lib/post-setup/ha-manatee.js          |   6 +-
 lib/post-setup/underlay-nics.js       |   6 +-
 lib/post-setup/volapi.js              |  35 ++-
 lib/procedures/update-agent-v1.js     |   5 +-
 lib/procedures/update-dockerlogger.js |   8 +-
 lib/sdcadm.js                         | 339 ++++++++++++++++----------
 lib/steps/binder.js                   |   3 +-
 lib/steps/no-rabbit.js                |   7 +-
 lib/steps/sapi.js                     |   3 +-
 test/platform.test.js                 |   7 +
 24 files changed, 657 insertions(+), 401 deletions(-)

diff --git a/lib/channel.js b/lib/channel.js
index 23031ab..19f4614 100644
--- a/lib/channel.js
+++ b/lib/channel.js
@@ -21,6 +21,7 @@ var tabula = require('tabula');
 
 var cmdln = require('cmdln');
 var Cmdln = cmdln.Cmdln;
+var vasync = require('vasync');
 
 var errors = require('./errors');
 
@@ -59,63 +60,75 @@ function do_list(subcmd, opts, args, cb) {
     }
 
     var progress = self.progress;
-    var app = self.sdcadm.sdc;
+    var app;
 
-    self.sdcadm.updates.listChannels({}, function (err, channels) {
-        if (err) {
-            progress('Error trying to retrieve update channels');
-            var e = new errors.SDCClientError(err, 'imgapi');
-            return cb(e);
-        }
+    vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function getChannels(ctx, next) {
+            app = self.sdcadm.sdcApp;
+            self.sdcadm.updates.listChannels({}, function (err, channels) {
+                if (err) {
+                    progress('Error trying to retrieve update channels');
+                    var e = new errors.SDCClientError(err, 'imgapi');
+                    next(e);
+                    return;
+                }
 
-        if (app.metadata.update_channel) {
-            channels = channels.map(function (c) {
-                if (c.name === app.metadata.update_channel) {
-                    c['default'] = true;
+                if (app.metadata.update_channel) {
+                    ctx.channels = channels.map(function (c) {
+                        if (c.name === app.metadata.update_channel) {
+                            c['default'] = true;
+                        } else {
+                            delete c['default'];
+                        }
+                        return c;
+                    });
                 } else {
-                    delete c['default'];
+                    ctx.channels = channels.map(function (c) {
+                        if (c['default']) {
+                            c.remote = true;
+                        }
+                        return c;
+                    });
                 }
-                return c;
+                next();
             });
-        } else {
-            channels = channels.map(function (c) {
-                if (c['default']) {
-                    c.remote = true;
+        },
+        function printChannels(ctx, next) {
+            if (opts.json) {
+                console.log(JSON.stringify(ctx.channels, null, 4));
+                next();
+                return;
+            }
+
+            ctx.channels = ctx.channels.map(function (c) {
+                if (c['default'] && c.remote) {
+                    delete c.remote;
+                    c['default'] = 'true (remote)';
                 }
                 return c;
             });
-        }
 
-        if (opts.json) {
-            console.log(JSON.stringify(channels, null, 4));
-            return cb();
-        }
 
-        channels = channels.map(function (c) {
-            if (c['default'] && c.remote) {
-                delete c.remote;
-                c['default'] = 'true (remote)';
-            }
-            return c;
-        });
-
-
-        var validFieldsMap = {};
-        channels.forEach(function (v) {
-            var k;
-            for (k in v) {
-                validFieldsMap[k] = true;
-            }
-        });
-
-        tabula(channels, {
-            skipHeader: opts.H,
-            columns: ['name', 'default', 'description'],
-            validFields: Object.keys(validFieldsMap)
-        });
-
-        return cb();
+            var validFieldsMap = {};
+            ctx.channels.forEach(function (v) {
+                var k;
+                for (k in v) {
+                    validFieldsMap[k] = true;
+                }
+            });
 
+            tabula(ctx.channels, {
+                skipHeader: opts.H,
+                columns: ['name', 'default', 'description'],
+                validFields: Object.keys(validFieldsMap)
+            });
+            next();
+        }
+    ]}, function pipeCb(pipeErr) {
+        cb(pipeErr);
     });
 };
 
@@ -162,36 +175,51 @@ function do_set(subcmd, opts, args, cb) {
 
     var channel = args.shift();
     var progress = self.progress;
-    var app = self.sdcadm.sdc;
-
-    self.sdcadm.updates.listChannels({}, function (err, channels) {
-        if (err) {
-            progress('Error trying to retrieve update channels');
-            var e = new errors.SDCClientError(err, 'imgapi');
-            return cb(e);
-        }
-
-        var names = channels.map(function (c) {
-            return (c.name);
-        });
-
-        if (names.indexOf(channel) === -1) {
-            progress('Must specify a valid channel: %j', channels);
-            return cb(new errors.UsageError('Invalid channel name'));
-        }
+    vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function getChannels(ctx, next) {
+            self.sdcadm.updates.listChannels({}, function (err, channels) {
+                if (err) {
+                    progress('Error trying to retrieve update channels');
+                    var e = new errors.SDCClientError(err, 'imgapi');
+                    next(e);
+                    return;
+                }
+                ctx.channels = channels;
+                next();
+            });
+        },
+        function validateChannel(ctx, next) {
+            var names = ctx.channels.map(function (c) {
+                return (c.name);
+            });
 
-        self.sdcadm.sapi.updateApplication(app.uuid, {
-            metadata: {
-                update_channel: channel
+            if (names.indexOf(channel) === -1) {
+                progress('Must specify a valid channel: %j', ctx.channels);
+                next(new errors.UsageError('Invalid channel name'));
+                return;
             }
-        }, function (updateErr, svc) {
-            if (updateErr) {
-                return cb(new errors.SDCClientError(updateErr, 'sapi'));
-            }
-            progress('Update channel has been successfully set to: \'%s\'',
-                    channel);
-            return cb();
-        });
+            next();
+        },
+        function setChannel(ctx, next) {
+            self.sdcadm.sapi.updateApplication(self.sdcadm.sdcApp.uuid, {
+                metadata: {
+                    update_channel: channel
+                }
+            }, function (updateErr, svc) {
+                if (updateErr) {
+                    next(new errors.SDCClientError(updateErr, 'sapi'));
+                    return;
+                }
+                progress('Update channel has been successfully set to: \'%s\'',
+                        channel);
+                next();
+            });
+        }
+    ]}, function pipeCb(pipeErr) {
+        cb(pipeErr);
     });
 };
 
@@ -222,19 +250,27 @@ function do_unset(subcmd, opts, args, cb) {
     }
 
     var progress = self.progress;
-    var app = self.sdcadm.sdc;
-
-    self.sdcadm.sapi.updateApplication(app.uuid, {
-        metadata: {
-            update_channel: app.metadata.update_channel
+    vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
         },
-        action: 'delete'
-    }, function (err, svc) {
-        if (err) {
-            return cb(new errors.SDCClientError(err, 'sapi'));
+        function unsetChannel(_, next) {
+            self.sdcadm.sapi.updateApplication(self.sdcadm.sdcApp.uuid, {
+                metadata: {
+                    update_channel: self.sdcadm.sdcApp.metadata.update_channel
+                },
+                action: 'delete'
+            }, function (err, svc) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+                progress('Update channel has been successfully unset');
+                next();
+            });
         }
-        progress('Update channel has been successfully unset');
-        return cb();
+    ]}, function pipeCb(pipeErr) {
+        cb(pipeErr);
     });
 };
 
diff --git a/lib/cli/do_avail.js b/lib/cli/do_avail.js
index 6c8b476..cb836f7 100644
--- a/lib/cli/do_avail.js
+++ b/lib/cli/do_avail.js
@@ -55,16 +55,21 @@ Available.prototype.execute = function cExecute(opts, args, cb) {
     var changes;
     var plan;
 
-    // Set or override the default channel if anything is given:
-    if (opts.channel) {
-        self.sdcadm.updates.channel = opts.channel;
-    }
-
     // override to true list portolan/rabbit
     opts.force_data_path = true;
     opts.force_rabbitmq = true;
 
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function setChannel(_, next) {
+            // Set or override the default channel if anything is given:
+            if (opts.channel) {
+                self.sdcadm.updates.channel = opts.channel;
+            }
+            next();
+        },
         function getChangesFromArgs(_, next) {
             self.cli._specFromArgs(opts, args, function (err, chgs) {
                 if (err) {
diff --git a/lib/cli/do_nfs_volumes.js b/lib/cli/do_nfs_volumes.js
index 75afd09..c7c5c49 100644
--- a/lib/cli/do_nfs_volumes.js
+++ b/lib/cli/do_nfs_volumes.js
@@ -312,10 +312,14 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
     }
 
     vasync.pipeline({arg: context, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         function checkFabricsEnabled(ctx, next) {
             var err;
 
-            assert.object(self.sdcadm.sdc.metadata, 'self.sdcadm.sdc.metadata');
+            assert.object(self.sdcadm.sdcApp.metadata,
+                'self.sdcadm.sdcApp.metadata');
 
             /*
              * Disabling any NFS volumes feature flag does have any requirement,
@@ -326,7 +330,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
                 return;
             }
 
-            if (!self.sdcadm.sdc.metadata.fabric_cfg) {
+            if (!self.sdcadm.sdcApp.metadata.fabric_cfg) {
                 err = new Error('cannot enable NFS volumes feature: this DC ' +
                     'is not setup for fabric networks');
             }
@@ -337,7 +341,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
         function checkFeatureDeps(ctx, next) {
             var err;
             var missingFeatureDeps;
-            var sdcApp = self.sdcadm.sdc;
+            var sdcApp = self.sdcadm.sdcApp;
 
             if (opts.disable === true) {
                 next();
@@ -557,7 +561,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
             self.progress('Checking if ' + sapiFlagName + '=' +
                 desiredSapiFlagValue + ' in SDC app...');
 
-            if (self.sdcadm.sdc.metadata[sapiFlagName] !==
+            if (self.sdcadm.sdcApp.metadata[sapiFlagName] !==
                 desiredSapiFlagValue) {
                 ctx.didSomething = true;
 
@@ -565,7 +569,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
                     desiredSapiFlagValue + ' in SDC app...');
 
                 updateSdcFlagInSapi(sapiFlagName, desiredSapiFlagValue, {
-                    sdcApp: self.sdcadm.sdc,
+                    sdcApp: self.sdcadm.sdcApp,
                     sapiClient: self.sdcadm.sapi
                 }, function _nfsSharedVolumesUpdated(err, result) {
                     var errMsg;
diff --git a/lib/cli/do_self_update.js b/lib/cli/do_self_update.js
index 29ba71e..79cea93 100644
--- a/lib/cli/do_self_update.js
+++ b/lib/cli/do_self_update.js
@@ -8,8 +8,9 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
-var errors = require('../errors');
+var vasync = require('vasync');
 
+var errors = require('../errors');
 
 /*
  * The 'sdcadm self-update' CLI subcommand.
@@ -37,18 +38,27 @@ function do_self_update(subcmd, opts, args, cb) {
         return;
     }
 
+    vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function setChannel(_, next) {
+            // Set or override the default channel if anything is given:
+            if (opts.channel) {
+                self.sdcadm.updates.channel = opts.channel;
+            }
+            next();
+        },
+        function doSelfUpdate(_, next) {
+            self.sdcadm.selfUpdate({
+                progress: self.progress,
+                allowMajorUpdate: opts.allow_major_update,
+                dryRun: opts.dry_run,
+                image: image
+            }, next);
+        }
+    ]}, cb);
 
-    // Set or override the default channel if anything is given:
-    if (opts.channel) {
-        self.sdcadm.updates.channel = opts.channel;
-    }
-
-    self.sdcadm.selfUpdate({
-        progress: this.progress,
-        allowMajorUpdate: opts.allow_major_update,
-        dryRun: opts.dry_run,
-        image: image
-    }, cb);
 }
 
 do_self_update.options = [
diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 1377d5a..bb5f52a 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -9,6 +9,7 @@
  */
 
 var assert = require('assert-plus');
+var vasync = require('vasync');
 
 var errors = require('../errors');
 
@@ -48,18 +49,24 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
             'must specify installer image UUID or --latest'));
     }
 
-    // Set or override the default channel if anything is given:
-    if (opts.channel) {
-        self.sdcadm.updates.channel = opts.channel;
-    }
-
-    self.sdcadm.updateGzTools({
-        image: opts.latest ? 'latest' : args[0],
-        progress: progress,
-        justDownload: opts.just_download,
-        forceReinstall: opts.force_reinstall,
-        concurrency: opts.concurrency
-    }, finish);
+    vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function updateGzTools(_, next) {
+            // Set or override the default channel if anything is given:
+            if (opts.channel) {
+                self.sdcadm.updates.channel = opts.channel;
+            }
+            self.sdcadm.updateGzTools({
+                image: opts.latest ? 'latest' : args[0],
+                progress: progress,
+                justDownload: opts.just_download,
+                forceReinstall: opts.force_reinstall,
+                concurrency: opts.concurrency
+            }, next);
+        }
+    ]}, finish);
 
 }
 do_update_gz_tools.options = [
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index b09f1df..075739d 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -67,7 +67,7 @@ function do_update_other(subcmd, opts, args, cb) {
     }
 
     function updateSdcApp(svcOpts, next) {
-        var uuid = self.sdcadm.sdc.uuid;
+        var uuid = self.sdcadm.sdcApp.uuid;
         self.sdcadm.sapi.updateApplication(uuid, svcOpts, function (err, svc) {
             if (err) {
                 return next(new errors.SDCClientError(err, 'sapi'));
@@ -122,6 +122,9 @@ function do_update_other(subcmd, opts, args, cb) {
         progress: self.progress
     };
     vasync.pipeline({arg: context, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         /*
          * Time to finally make the switch to the new agents by default.
          */
@@ -171,11 +174,11 @@ function do_update_other(subcmd, opts, args, cb) {
 
         // Remove deprecated params.resolvers:
         function removeSdcAppResolvers(ctx, next) {
-            if (!self.sdcadm.sdc.params.resolvers) {
+            if (!self.sdcadm.sdcApp.params.resolvers) {
                 return next();
             }
             progress('Remove deprecated "sdc" SAPI app params resolvers');
-            self.sdcadm.sapi.updateApplication(self.sdcadm.sdc.uuid, {
+            self.sdcadm.sapi.updateApplication(self.sdcadm.sdcApp.uuid, {
                 action: 'delete',
                 params: {
                     resolvers: []
@@ -191,7 +194,7 @@ function do_update_other(subcmd, opts, args, cb) {
         },
 
         function updateSdcAppSchemas(ctx, next) {
-            var currSchema = self.sdcadm.sdc.metadata_schema;
+            var currSchema = self.sdcadm.sdcApp.metadata_schema;
             var latestSchema = schemas.sdc.sdc_app;
             if (currSchema && jsprim.deepEqual(currSchema, latestSchema)) {
                 return next();
@@ -200,7 +203,7 @@ function do_update_other(subcmd, opts, args, cb) {
             self.log.debug({before: currSchema, after: latestSchema},
                 'update sdc app metadata_schema');
             progress('Update "sdc" SAPI app metadata_schema');
-            self.sdcadm.sapi.updateApplication(self.sdcadm.sdc.uuid, {
+            self.sdcadm.sapi.updateApplication(self.sdcadm.sdcApp.uuid, {
                 action: 'update',
                 metadata_schema: latestSchema
             }, function (err, app) {
@@ -245,7 +248,7 @@ function do_update_other(subcmd, opts, args, cb) {
             vasync.forEachParallel({
                 inputs: svcsToUpdate,
                 func: function updateSvc(svc, nextSvc) {
-                    var mdata = self.sdcadm.sdc.metadata;
+                    var mdata = self.sdcadm.sdcApp.metadata;
                     var svcDomain = format('%s.%s.%s', svc.name,
                         mdata.datacenter_name, mdata.dns_domain);
                     progress('Set "%s" service "metadata.SERVICE_DOMAIN"',
@@ -263,7 +266,7 @@ function do_update_other(subcmd, opts, args, cb) {
         },
 
         function updateAppDomains(ctx, next) {
-            var mdata = self.sdcadm.sdc.metadata;
+            var mdata = self.sdcadm.sdcApp.metadata;
             var mdataUpdates = {};
 
             NEW_SERVICES.forEach(function (svcName) {
@@ -585,7 +588,7 @@ function do_update_other(subcmd, opts, args, cb) {
                 }
 
                 progress('Appending "sapi_domain" to node.config');
-                var mdata = self.sdcadm.sdc.metadata;
+                var mdata = self.sdcadm.sdcApp.metadata;
                 var sapiDomain = format('sapi_domain=\'sapi.%s.%s\'\n',
                     mdata.datacenter_name, mdata.dns_domain);
                 fs.appendFile(nodeConfig, sapiDomain, next);
diff --git a/lib/default-fabric.js b/lib/default-fabric.js
index c834349..831bc98 100644
--- a/lib/default-fabric.js
+++ b/lib/default-fabric.js
@@ -63,7 +63,7 @@ function defFabricAddNetwork(opts, cb) {
        provision_start_ip: '192.168.128.5',
        provision_end_ip: '192.168.131.250',
        gateway: '192.168.128.1',
-       resolvers: opts.sdcadm.sdc.metadata.dns_resolvers.split(','),
+       resolvers: opts.sdcadm.sdcApp.metadata.dns_resolvers.split(','),
        vlan_id: 2
     };
 
@@ -109,6 +109,9 @@ function addDefaultFabric(opts, cb) {
     assert.func(cb, 'cb');
 
     vasync.pipeline({ arg: opts, funcs: [
+        function ensureSdcApp(_, next) {
+            opts.sdcadm.ensureSdcApp({}, next);
+        },
         defFabricAddVLAN,
         defFabricAddNetwork
     ]}, function (err, results) {
diff --git a/lib/platform.js b/lib/platform.js
index 284615c..357d6f3 100644
--- a/lib/platform.js
+++ b/lib/platform.js
@@ -347,37 +347,55 @@ Platform.prototype.available = function available(opts, cb) {
 
     var self = this;
 
-    // Set or override the default channel if anything is given:
-    if (opts.channel) {
-        self.sdcadm.updates.channel = opts.channel;
-    }
-
-    self.getLatestPlatformInstalled(function (err2, latest) {
-        if (err2) {
-            return cb(err2);
-        }
-        var filter = {
-            name: 'platform'
-        };
-        self.sdcadm.updates.listImages(filter, function (err, images) {
-            if (err) {
-                return cb(new errors.SDCClientError(err, 'updates'));
-            }
-            if (Array.isArray(images) && !images.length) {
-                return cb(new errors.UpdateError('no images found'));
+    var imgs;
+    vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function getLatestInstalled(ctx, next) {
+            // Set or override the default channel if anything is given:
+            if (opts.channel) {
+                self.sdcadm.updates.channel = opts.channel;
             }
-            common.sortArrayOfObjects(images, ['published_at']);
-            images = images.map(function (img) {
-                return ({
-                    version: img.version.split('-').pop(),
-                    uuid: img.uuid,
-                    published_at: img.published_at
+            self.getLatestPlatformInstalled(function (err2, latest) {
+                if (err2) {
+                    next(err2);
+                    return;
+                }
+                ctx.latest = latest;
+                next();
+            });
+        },
+        function getAvailableImages(ctx, next) {
+            var filter = {
+                name: 'platform'
+            };
+            self.sdcadm.updates.listImages(filter, function (err, images) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'updates'));
+                    return;
+                }
+                if (Array.isArray(images) && !images.length) {
+                    next(new errors.UpdateError('no images found'));
+                    return;
+                }
+                common.sortArrayOfObjects(images, ['published_at']);
+                images = images.map(function (img) {
+                    return ({
+                        version: img.version.split('-').pop(),
+                        uuid: img.uuid,
+                        published_at: img.published_at
+                    });
+                }).filter(function (i) {
+                    return (i.version > ctx.latest);
                 });
-            }).filter(function (i) {
-                return (i.version > latest);
+                imgs = images;
+                next(null);
             });
-            return cb(null, images);
-        });
+
+        }
+    ]}, function pipeCb(pipeErr) {
+        cb(pipeErr, imgs);
     });
 };
 
@@ -443,11 +461,6 @@ Platform.prototype.install = function install(opts, callback) {
     // image in order to avoid same thing than for TOOLS-876
     var imgNotFoundError = false;
 
-    // Set or override the default channel if anything is given:
-    if (opts.channel) {
-        self.sdcadm.updates.channel = opts.channel;
-    }
-
     function findPlatformImageLatest(cb) {
         var filter = {
             name: 'platform'
@@ -568,7 +581,14 @@ Platform.prototype.install = function install(opts, callback) {
     }
 
     vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         function getChannel(_, next) {
+            // Set or override the default channel if anything is given:
+            if (opts.channel) {
+                self.sdcadm.updates.channel = opts.channel;
+            }
             self.sdcadm.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
                 if (err) {
diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 15e20a4..19cba41 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -82,11 +82,13 @@ function do_cmon(subcmd, opts, args, cb) {
 
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
-
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         function ensureCnsSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
                 name: 'cns',
-                application_uuid: self.sdcadm.sdc.uuid
+                application_uuid: self.sdcadm.sdcApp.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
                     next(svcErr);
@@ -122,7 +124,7 @@ function do_cmon(subcmd, opts, args, cb) {
         function getSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
                 name: 'cmon',
-                application_uuid: self.sdcadm.sdc.uuid
+                application_uuid: self.sdcadm.sdcApp.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
                     return next(svcErr);
@@ -255,8 +257,8 @@ function do_cmon(subcmd, opts, args, cb) {
                 return;
             }
 
-            var domain = self.sdcadm.sdc.metadata.datacenter_name + '.' +
-                    self.sdcadm.sdc.metadata.dns_domain;
+            var domain = self.sdcadm.sdcApp.metadata.datacenter_name + '.' +
+                    self.sdcadm.sdcApp.metadata.dns_domain;
             var svcDomain = svcData.name + '.' + domain;
 
             self.progress('Creating "cmon" service');
@@ -267,7 +269,7 @@ function do_cmon(subcmd, opts, args, cb) {
             svcData.params.billing_id = ctx.cmonPkg.uuid;
             delete svcData.params.package_name;
 
-            self.sdcadm.sapi.createService('cmon', self.sdcadm.sdc.uuid,
+            self.sdcadm.sapi.createService('cmon', self.sdcadm.sdcApp.uuid,
                     svcData, function (err, svc) {
                 if (err) {
                     return next(new errors.SDCClientError(err, 'sapi'));
@@ -329,7 +331,7 @@ function do_cmon(subcmd, opts, args, cb) {
                 }
                 self.progress('Creating "cmon-agent" service');
                 self.sdcadm.sapi.createService('cmon-agent',
-                        self.sdcadm.sdc.uuid, {
+                        self.sdcadm.sdcApp.uuid, {
                     params: {
                         image_uuid: ctx.cmonAgentImg.uuid,
                         tags: {
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index 7191199..c45300a 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -71,7 +71,9 @@ function do_cns(subcmd, opts, args, cb) {
     };
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
-
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         /* @field ctx.cnsPkg */
         function getPkg(ctx, next) {
             var filter = {name: svcData.params.package_name,
@@ -93,7 +95,7 @@ function do_cns(subcmd, opts, args, cb) {
         function getSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
                 name: 'cns',
-                application_uuid: self.sdcadm.sdc.uuid
+                application_uuid: self.sdcadm.sdcApp.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
                     return next(svcErr);
@@ -182,8 +184,8 @@ function do_cns(subcmd, opts, args, cb) {
                 return next();
             }
 
-            var domain = self.sdcadm.sdc.metadata.datacenter_name + '.' +
-                    self.sdcadm.sdc.metadata.dns_domain;
+            var domain = self.sdcadm.sdcApp.metadata.datacenter_name + '.' +
+                    self.sdcadm.sdcApp.metadata.dns_domain;
             var svcDomain = svcData.name + '.' + domain;
 
             self.progress('Creating "cns" service');
@@ -194,7 +196,7 @@ function do_cns(subcmd, opts, args, cb) {
             svcData.params.billing_id = ctx.cnsPkg.uuid;
             delete svcData.params.package_name;
 
-            self.sdcadm.sapi.createService('cns', self.sdcadm.sdc.uuid,
+            self.sdcadm.sapi.createService('cns', self.sdcadm.sdcApp.uuid,
                     svcData, function (err, svc) {
                 if (err) {
                     return next(new errors.SDCClientError(err, 'sapi'));
diff --git a/lib/post-setup/dev-sample-data.js b/lib/post-setup/dev-sample-data.js
index 08149bf..7a88c38 100644
--- a/lib/post-setup/dev-sample-data.js
+++ b/lib/post-setup/dev-sample-data.js
@@ -32,12 +32,19 @@ function addDevSampleData(opts, cb) {
     assert.func(opts.progress, 'opts.progress');
     assert.func(cb, 'cb');
 
-    vasync.parallel({funcs: [
-        function pkgs(next) {
-            addDevSamplePkgs(opts, next);
+    vasync.pipeline({funcs: [
+        function ensureSdcApp(_, nextFun) {
+            opts.sdcadm.ensureSdcApp({}, nextFun);
         },
-        function imgs(next) {
-            addDevSampleImgs(opts, next);
+        function addSampleData(_, nextFun) {
+            vasync.parallel({funcs: [
+                function pkgs(next) {
+                    addDevSamplePkgs(opts, next);
+                },
+                function imgs(next) {
+                    addDevSampleImgs(opts, next);
+                }
+            ]}, nextFun);
         }
     ]}, cb);
 }
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index fe309b1..0909b91 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -77,7 +77,9 @@ function do_docker(subcmd, opts, args, cb) {
     };
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
-
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         /* @field ctx.dockerPkg */
         function getDockerPkg(ctx, next) {
             var filter = {name: dockerSvcData.params.package_name,
@@ -97,7 +99,7 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function getSdcApp(ctx, next) {
-            ctx.app = self.sdcadm.sdc;
+            ctx.app = self.sdcadm.sdcApp;
             ctx.sdcadm = self.sdcadm;
             ctx.log = self.log;
             ctx.progress = self.progress;
@@ -411,7 +413,7 @@ function do_docker(subcmd, opts, args, cb) {
                 }
                 self.progress('Creating "dockerlogger" servivce');
                 self.sdcadm.sapi.createService('dockerlogger',
-                        self.sdcadm.sdc.uuid, {
+                        self.sdcadm.sdcApp.uuid, {
                     params: {
                         image_uuid: ctx.dockerloggerImg.uuid
                     },
diff --git a/lib/post-setup/fabrics.js b/lib/post-setup/fabrics.js
index 24745c7..394a180 100644
--- a/lib/post-setup/fabrics.js
+++ b/lib/post-setup/fabrics.js
@@ -197,14 +197,18 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
         }
     };
 
-    var app = self.sdcadm.sdc;
+    var app;
     var headnodeUuid = self.headnodeUuid;
 
     var img, haveImg, svc, svcExists, instExists;
 
     vasync.pipeline({arg: {}, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         /* @field ctx.package */
         function getPackage(ctx, next) {
+            app = self.sdcadm.sdcApp;
             var filter = {name: 'sdc_768', active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
@@ -393,11 +397,13 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
 
 
     vasync.pipeline({arg: {
-        app: self.sdcadm.sdc
     }, funcs: [
-
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         /* @field ctx.natPkg */
         function getNatPkg(ctx, next) {
+            ctx.app = self.sdcadm.sdcApp;
             var filter = {name: natSvcData.params.package_name, active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
@@ -507,28 +513,35 @@ Fabrics.prototype.initDiffSchema = function initDiffSchema(cb) {
     var self = this;
     var schema = schemas.sdc.sdc_app;
     var fab, mdata;
-    var app = self.sdcadm.sdc;
-
-    if ('metadata_schemas' in app &&
-        'properties' in app.metadata_schemas &&
-        'fabric_cfg' in app.metadata_schemas.properties) {
-        mdata = app.metadata_schemas;
-        fab = mdata.properties.fabric_cfg;
-        if (jsprim.deepEqual(fab, schema.properties.fabric_cfg)) {
-            self.alreadySetup = true;
-            return cb(null);
+    self.sdcadm.ensureSdcApp({}, function (appErr) {
+        if (appErr) {
+            cb(appErr);
+            return;
         }
-    }
 
-    self.sdcadm.sapi.updateApplication(app.uuid, {
-        action: 'update',
-        metadata_schema: schema
-    }, function (err, sdcApp) {
-        if (err) {
-            return cb(new errors.SDCClientError(err, 'sapi'));
+        var app = self.sdcadm.sdcApp;
+
+        if ('metadata_schemas' in app &&
+            'properties' in app.metadata_schemas &&
+            'fabric_cfg' in app.metadata_schemas.properties) {
+            mdata = app.metadata_schemas;
+            fab = mdata.properties.fabric_cfg;
+            if (jsprim.deepEqual(fab, schema.properties.fabric_cfg)) {
+                self.alreadySetup = true;
+                return cb(null);
+            }
         }
-        self.sdcadm.sdc = sdcApp;
-        return cb(null);
+
+        self.sdcadm.sapi.updateApplication(app.uuid, {
+            action: 'update',
+            metadata_schema: schema
+        }, function (err, sdcApp) {
+            if (err) {
+                return cb(new errors.SDCClientError(err, 'sapi'));
+            }
+            self.sdcadm.sdcApp = sdcApp;
+            return cb(null);
+        });
     });
 };
 
@@ -668,32 +681,44 @@ Fabrics.prototype.checkNatPool = function checkNatPool(cb) {
 Fabrics.prototype.updateSapi = function updateSapi(cb) {
     var self = this;
 
-    if (self.sdcadm.sdc.metadata.fabric_cfg && !self.options.reconfigure) {
-        self.progress('Fabric configuration already in SAPI');
-        self.progress('Please, use \'--reconfigure\' if you want to override');
-        return cb(null);
-    }
+    self.sdcadm.ensureSdcApp({}, function (err) {
+        if (err) {
+            cb(err);
+            return;
+        }
 
-    if (self.sdcadm.sdc.metadata.fabric_cfg &&
-            jsprim.deepEqual(self.sdcadm.sdc.metadata.fabric_cfg, self.data)) {
-        self.progress('Exactly the same fabric configuration already in SAPI');
-        return cb(null);
-    }
-    self.configChanged = true;
+        if (self.sdcadm.sdcApp.metadata.fabric_cfg &&
+            !self.options.reconfigure) {
+            self.progress('Fabric configuration already in SAPI');
+            self.progress(
+                'Please, use \'--reconfigure\' if you want to override');
+            return cb(null);
+        }
 
-    var word = (self.sdcadm.sdc.metadata.fabric_cfg) ? 'Updating' : 'Adding';
-    self.progress('%s fabric configuration', word);
-    /*
-     * Note, we're updating the entire application here, but update today only
-     * ever goes one layer deep. eg. update will always replace our key,
-     * 'fabric_cfg', with one that's always what we give it. In this case, it
-     * shouldn't merge anything. If that behavior changes, we're in trouble and
-     * the docs don't exactly promise one behavior or another...
-     */
-    self.sdcadm.sapi.updateApplication(self.sdcadm.sdc.uuid, {
-        action: 'update',
-        metadata: { fabric_cfg: self.data }
-    }, errors.sdcClientErrWrap(cb, 'sapi'));
+        if (self.sdcadm.sdcApp.metadata.fabric_cfg &&
+            jsprim.deepEqual(self.sdcadm.sdcApp.metadata.fabric_cfg,
+                self.data)) {
+            self.progress(
+                'Exactly the same fabric configuration already in SAPI');
+            return cb(null);
+        }
+        self.configChanged = true;
+
+        var word = (self.sdcadm.sdcApp.metadata.fabric_cfg) ?
+            'Updating' : 'Adding';
+        self.progress('%s fabric configuration', word);
+        /*
+         * Note, we're updating the entire application here, but update today
+         * only ever goes one layer deep. eg. update will always replace our
+         * key, 'fabric_cfg', with one that's always what we give it. In this
+         * case, itshouldn't merge anything. If that behavior changes, we're in
+         * trouble and the docs don't exactly promise one behavior or another...
+         */
+        self.sdcadm.sapi.updateApplication(self.sdcadm.sdcApp.uuid, {
+            action: 'update',
+            metadata: { fabric_cfg: self.data }
+        }, errors.sdcClientErrWrap(cb, 'sapi'));
+    });
 };
 
 
@@ -752,32 +777,39 @@ Fabrics.prototype.updateFabricsSvcs = function updateFabricsSvcs(cb) {
  */
 Fabrics.prototype.checkDocker = function checkDocker(cb) {
     var self = this;
-    self.sdcadm.getSvc({
-        app: self.sdcadm.sdc.uuid,
-        svc: 'docker',
-        allowNone: true
-    }, function (err, docker) {
-        if (err) {
-            return cb(err);
-        }
-        if (!docker) {
-            return cb();
+    self.sdcadm.ensureSdcApp({}, function (appErr) {
+        if (appErr) {
+            cb(appErr);
+            return;
         }
 
-        self.dockerSetup = true;
-        if (!docker.metadata.USE_FABRICS) {
-            self.sdcadm.sapi.updateService(docker.uuid, {
-                action: 'update',
-                metadata: { USE_FABRICS: true }
-            }, function (er2, _docker) {
-                if (er2) {
-                    return cb(new errors.SDCClientError(er2, 'sapi'));
-                }
+        self.sdcadm.getSvc({
+            app: self.sdcadm.sdcApp.uuid,
+            svc: 'docker',
+            allowNone: true
+        }, function (err, docker) {
+            if (err) {
+                return cb(err);
+            }
+            if (!docker) {
                 return cb();
-            });
-        } else {
-            return cb();
-        }
+            }
+
+            self.dockerSetup = true;
+            if (!docker.metadata.USE_FABRICS) {
+                self.sdcadm.sapi.updateService(docker.uuid, {
+                    action: 'update',
+                    metadata: { USE_FABRICS: true }
+                }, function (er2, _docker) {
+                    if (er2) {
+                        return cb(new errors.SDCClientError(er2, 'sapi'));
+                    }
+                    return cb();
+                });
+            } else {
+                return cb();
+            }
+        });
     });
 };
 
diff --git a/lib/post-setup/ha-binder.js b/lib/post-setup/ha-binder.js
index 686a22c..4de3f2f 100644
--- a/lib/post-setup/ha-binder.js
+++ b/lib/post-setup/ha-binder.js
@@ -88,7 +88,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
 
     }
 
-    var app = self.sdcadm.sdc;
+    var app;
     var img, instances, history;
     var vms;
     var oldVms;
@@ -110,7 +110,11 @@ function do_ha_binder(subcmd, opts, args, cb) {
     var willCreateInsts = true;
 
     vasync.pipeline({arg: arg, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         function getBinderSvc(ctx, next) {
+            app = self.sdcadm.sdcApp;
             self.progress('Getting SDC\'s binder details from SAPI');
             self.sdcadm.sapi.listServices({
                 name: 'binder',
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index 9867519..fe380d4 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -130,7 +130,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
     }
 
 
-    var app = self.sdcadm.sdc;
+    var app;
     // This is the primary instance VM:
     var pri;
     // This is the secondary instance VM, if it exists when we run the process
@@ -171,7 +171,11 @@ function do_ha_manatee(subcmd, opts, args, cb) {
     var duplicatedServers = false;
 
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
         function checkTargetServer(_, next) {
+            app = self.sdcadm.sdcApp;
             self.progress('Verifying target severs "%j" exist', opts.servers);
             self.sdcadm.cnapi.listServers(function (sErr, servers_) {
                 if (sErr) {
diff --git a/lib/post-setup/underlay-nics.js b/lib/post-setup/underlay-nics.js
index 4b319be..3f0f1fb 100644
--- a/lib/post-setup/underlay-nics.js
+++ b/lib/post-setup/underlay-nics.js
@@ -54,6 +54,9 @@ UnderlayNics.prototype.execute = function (opts, cb) {
     var errs = [];
 
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            sdcadm.ensureSdcApp({}, next);
+        },
         function getNapiVmImgs(_, next) {
             sdcadm.getImgsForSvcVms({
                 svc: 'napi'
@@ -186,7 +189,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
         // CNs must have the configured underlay network tag assigned to an
         // actual NIC in order to be able to add underlay-nic for the CN:
         function filterServersWithoutUnderlayNicTag(_, next) {
-            var underlayTag = sdcadm.sdc.metadata.fabric_cfg.sdc_underlay_tag;
+            var underlayTag =
+                sdcadm.sdcApp.metadata.fabric_cfg.sdc_underlay_tag;
             var cnsToSkip = [];
             var theCns = cns2Update;
             cns2Update = [];
diff --git a/lib/post-setup/volapi.js b/lib/post-setup/volapi.js
index 39aab97..6a89c03 100644
--- a/lib/post-setup/volapi.js
+++ b/lib/post-setup/volapi.js
@@ -156,24 +156,35 @@ function do_volapi(subcmd, opts, args, cb) {
         didSomething: false
     };
 
-    assert.string(self.sdcadm.sdc.metadata.datacenter_name,
-        'SDC application\'s metadata must have a "datacenter_name" property');
-    assert.string(self.sdcadm.sdc.metadata.dns_domain,
-        'SDC application\'s metadata must have a "dns_domain" property');
 
-    var VOLAPI_DOMAIN = svcData.name + '.' +
-        self.sdcadm.sdc.metadata.datacenter_name + '.' +
-        self.sdcadm.sdc.metadata.dns_domain;
+
+    var VOLAPI_DOMAIN;
 
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
-
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, next);
+        },
+        function setVolapiDomain(_, next) {
+            assert.string(self.sdcadm.sdcApp.metadata.datacenter_name,
+                'SDC application\'s metadata must' +
+                'have a "datacenter_name" property');
+            assert.string(self.sdcadm.sdcApp.metadata.dns_domain,
+                'SDC application\'s metadata must' +
+                'have a "dns_domain" property');
+            VOLAPI_DOMAIN = svcData.name + '.' +
+                self.sdcadm.sdcApp.metadata.datacenter_name + '.' +
+                self.sdcadm.sdcApp.metadata.dns_domain;
+            next();
+        },
         function checkFabricsEnabled(ctx, next) {
+
             var err;
 
-            assert.object(self.sdcadm.sdc.metadata, 'self.sdcadm.sdc.metadata');
+            assert.object(self.sdcadm.sdcApp.metadata,
+                'self.sdcadm.sdcApp.metadata');
 
-            if (!self.sdcadm.sdc.metadata.fabric_cfg) {
+            if (!self.sdcadm.sdcApp.metadata.fabric_cfg) {
                 err = new Error('cannot setup volapi: this DC is not setup ' +
                     'for fabric networks');
             }
@@ -263,7 +274,7 @@ function do_volapi(subcmd, opts, args, cb) {
 
             self.sdcadm.sapi.listServices({
                 name: 'volapi',
-                application_uuid: self.sdcadm.sdc.uuid
+                application_uuid: self.sdcadm.sdcApp.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
                     next(svcErr);
@@ -313,7 +324,7 @@ function do_volapi(subcmd, opts, args, cb) {
             delete svcData.params.package_name;
 
 
-            self.sdcadm.sapi.createService('volapi', self.sdcadm.sdc.uuid,
+            self.sdcadm.sapi.createService('volapi', self.sdcadm.sdcApp.uuid,
                     svcData, function (err, svc) {
                 if (err) {
                     return next(new errors.SDCClientError(err, 'sapi'));
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index 385af80..e4abf16 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -120,6 +120,9 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
         };
 
         vasync.pipeline({arg: context, funcs: [
+            function ensureSdcApp(_, next) {
+                sdcadm.ensureSdcApp({}, next);
+            },
             /*
              * Check if cn-agent service is already on SAPI. Otherwise,
              * inform the user how to add it.
@@ -127,7 +130,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
             function checkCnAgentSvcOnSapi(_, next) {
                 sdcadm.getSvc({
                     svc: 'cn-agent',
-                    app: sdcadm.sdc.uuid,
+                    app: sdcadm.sdcApp.uuid,
                     allowNone: true
                 }, function (err, svc) {
                     if (err) {
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index dd603d0..ebd9a4b 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -119,6 +119,9 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
         };
 
         vasync.pipeline({arg: context, funcs: [
+            function ensureSdcApp(_, next) {
+                sdcadm.ensureSdcApp({}, next);
+            },
             /*
              * Check if docker service is already on SAPI. Otherwise,
              * inform the user how to add it.
@@ -126,7 +129,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             function checkDockerSvcOnSapi(_, next) {
                 sdcadm.getSvc({
                     svc: 'docker',
-                    app: sdcadm.sdc.uuid,
+                    app: sdcadm.sdcApp.uuid,
                     allowNone: true
                 }, function (err, service) {
                     if (err) {
@@ -155,7 +158,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                         return next();
                     }
                     progress('Creating "dockerlogger" servivce');
-                    sdcadm.sapi.createService('dockerlogger', sdcadm.sdc.uuid, {
+                    sdcadm.sapi.createService(
+                        'dockerlogger', sdcadm.sdcApp.uuid, {
                         params: {
                             image_uuid: change.image.uuid
                         },
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 72729ee..d440ab6 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -249,19 +249,19 @@ function SdcAdm(options) {
     Object.defineProperty(this, 'updates', {
         get: function () {
             if (self._updates === undefined) {
-                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) ' +
-                    'must be retrieved for client config');
+                assert.object(self.sdcApp, 'self.sdcApp (the SAPI "sdc" app)' +
+                    ' must be retrieved for client config');
                 var opts = {
                     url: self.config.updatesServerUrl,
-                    proxy: self.sdc.metadata.http_proxy || false,
+                    proxy: self.sdcApp.metadata.http_proxy || false,
                     userAgent: self.userAgent,
                     log: self.log,
                     headers: {
                         'x-request-id': self.uuid
                     }
                 };
-                if (self.sdc.metadata.update_channel) {
-                    opts.channel = self.sdc.metadata.update_channel;
+                if (self.sdcApp.metadata.update_channel) {
+                    opts.channel = self.sdcApp.metadata.update_channel;
                 }
                 self._updates = new sdcClients.IMGAPI(opts);
             }
@@ -271,11 +271,11 @@ function SdcAdm(options) {
     Object.defineProperty(this, 'imagesJo', {
         get: function () {
             if (self._imagesJo === undefined) {
-                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) ' +
-                    'must be retrieved for client config');
+                assert.object(self.sdcApp, 'self.sdcApp (the SAPI "sdc" app)' +
+                    ' must be retrieved for client config');
                 var opts = {
                     url: 'https://images.joyent.com',
-                    proxy: self.sdc.metadata.http_proxy || false,
+                    proxy: self.sdcApp.metadata.http_proxy || false,
                     userAgent: self.userAgent,
                     log: self.log,
                     headers: {
@@ -385,8 +385,51 @@ function SdcAdm(options) {
     this.sadm_urStart = null;
 }
 
+/*
+ * Avoid preloading sdcApp by default since we cannot load it during
+ * headnode recovery. Additionally, this allow us to handle the error
+ * messages output when the command in use is given JSON option:
+ *
+ * When `arg.quiet` option is given, this function will avoid printing
+ * any error messages to stdout and will leave the responsibility to
+ * inform the user about the exeception to the calling command.
+ */
+SdcAdm.prototype.ensureSdcApp = function (arg, cb) {
+    assert.object(arg, 'arg');
+    assert.optionalBool(arg.quiet, 'arg.quiet');
+    assert.func(cb, 'cb');
+    var self = this;
+    if (self.sdcApp) {
+        cb();
+        return;
+    }
+
+    self.getApp({app: 'sdc'}, function (appErr, app) {
+        if (appErr) {
+            var msg;
+            // Couple known issues we can help operators with a friendly
+            // message instead of the default errors:
+            if (VError.hasCauseWithName(appErr, 'NoBackendsError')) {
+                msg = ('Binder service seems to be down. ' +
+                            'Please review it before proceeding');
+            } else if (VError.hasCauseWithName(appErr, 'PoolFailedError')) {
+                msg = ('SAPI service seems to be down. ' +
+                            'Please review it before proceeding');
+            }
+            if (!arg.quiet) {
+                console.log(msg);
+            }
+            cb(appErr);
+            return;
+        }
+        self.sdcApp = app;
+        cb();
+    });
+};
+
+
 // This function defines the sdcadm properties which require async callbacks
-// to be used: 'config', 'history' and 'sdc' application.
+// to be used: 'config' and 'history'.
 SdcAdm.prototype.init = function init(cb) {
     var self = this;
     common.loadConfig({log: self.log}, function (err, config) {
@@ -400,23 +443,7 @@ SdcAdm.prototype.init = function init(cb) {
         }
 
         self.history = new History({sdcadm: self});
-        self.getApp({app: 'sdc'}, function (appErr, app) {
-            if (appErr) {
-                // Couple known issues we can help operators with a friendly
-                // message instead of the default errors:
-                if (VError.hasCauseWithName(appErr, 'NoBackendsError')) {
-                    console.log('Binder service seems to be down. ' +
-                                'Please review it before proceeding');
-                } else if (VError.hasCauseWithName(appErr, 'PoolFailedError')) {
-                    console.log('SAPI service seems to be down. ' +
-                                'Please review it before proceeding');
-                }
-                cb(appErr);
-                return;
-            }
-            self.sdc = app;
-            self.history.init(cb);
-        });
+        self.history.init(cb);
     });
 };
 
@@ -593,6 +620,9 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
         insts: []
     };
     vasync.pipeline({arg: context, funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getServers(ctx, next) {
             ctx.serverFromUuid = {};
             ctx.serverAdminIpFromUuid = {};
@@ -834,7 +864,7 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                 funcs: [
                     function getDockerLoggerService(arg, nextFun) {
                         self.getSvc({
-                            app: self.sdc.uuid,
+                            app: self.sdcApp.uuid,
                             svc: 'dockerlogger',
                             allowNone: true
                         }, function (svcErr, dlSvc) {
@@ -957,15 +987,17 @@ SdcAdm.prototype.getServices = function getServices(opts, cb) {
     assert.object(opts, 'opts');
     assert.func(cb, 'cb');
 
-    var app = self.sdc;
     var svcs = [];
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getSapiSvcs(_, next) {
             // 'cloudapi' zones typically don't have `tags.smartdc_core=true`
             // so we can't filter on that. And VMAPI doesn't support filtering
             // on presence of a tag (e.g. `smartdc_role`.)
             var filters = {
-                application_uuid: app.uuid
+                application_uuid: self.sdcApp.uuid
             };
 
             if (opts.type) {
@@ -1070,12 +1102,32 @@ SdcAdm.prototype.getImage = function getImage(opts, cb) {
     assert.func(cb, 'cb');
     var self = this;
 
-    self.imgapi.getImage(opts.uuid, function (iErr, iImg) {
-        if (iErr && iErr.body && iErr.body.code === 'ResourceNotFound') {
-            self.updates.getImage(opts.uuid, cb);
-        } else {
-            cb(iErr, iImg);
+    var img;
+
+    vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
+        function getImg(_, next) {
+            self.imgapi.getImage(opts.uuid, function (iErr, iImg) {
+                if (iErr && iErr.body &&
+                    iErr.body.code === 'ResourceNotFound') {
+                    self.updates.getImage(opts.uuid, function (err, image) {
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        img = image;
+                        next();
+                    });
+                } else {
+                    img = iImg;
+                    next(iErr);
+                }
+            });
         }
+    ]}, function (pipeErr) {
+        cb(pipeErr, img);
     });
 };
 
@@ -1278,27 +1330,38 @@ SdcAdm.prototype.getImgsForSvcVms = function getImgsForSvcVms(opts, cb) {
 SdcAdm.prototype.getDefaultChannel = function getDefaultChannel(cb) {
     var self = this;
 
-    var app = self.sdc;
+    var channel;
+    vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
+        function getChannel(_, next) {
+            if (self.updates.channel) {
+                channel = self.updates.channel;
+                next();
+            } else if (self.sdcApp.metadata.update_channel) {
+                channel = self.sdcApp.metadata.update_channel;
+                next();
+            } else {
+                self.updates.listChannels({}, function (err, channels) {
+                    if (err) {
+                        var e = new errors.SDCClientError(err, 'imgapi');
+                        next(e);
+                        return;
+                    }
 
-    if (self.updates.channel) {
-        cb(null, self.updates.channel);
-    } else if (app.metadata.update_channel) {
-        cb(null, app.metadata.update_channel);
-    } else {
-        self.updates.listChannels({}, function (err, channels) {
-            if (err) {
-                var e = new errors.SDCClientError(err, 'imgapi');
-                return cb(e);
+                    var remote = channels.filter(function (c) {
+                        return (c['default']);
+                    }).shift();
+                    channel = remote.name;
+                    next();
+                });
             }
 
-            var remote = channels.filter(function (c) {
-                return (c['default']);
-            }).shift();
-
-            return cb(null, remote.name);
-        });
-
-    }
+        }
+    ]}, function (pipeErr) {
+        cb(pipeErr, channel);
+    });
 };
 
 
@@ -2612,7 +2675,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                             if (ch.service === 'dockerlogger') {
                                 ch.service = {
                                     name: 'dockerlogger',
-                                    application_uuid: self.sdc.uuid,
+                                    application_uuid: self.sdcApp.uuid,
                                     type: 'other',
                                     params: {
                                         // First dockerlogger image ever:
@@ -3462,6 +3525,9 @@ SdcAdm.prototype._selfAvailable = function _selfAvailable(cb) {
     var images = [];
 
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getCurrBuildtime(_, next) {
             self.getBuildTime(function (err) {
                 return next(err);
@@ -3577,6 +3643,9 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
         }
     }];
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getLock(_, next) {
             if (options.dryRun) {
                 return next();
@@ -3875,7 +3944,6 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
     var self = this;
     var log = self.log;
 
-    var sdcApp = self.sdc;
     var services = {};
     var maint = false;
     var cloudapiMaint;
@@ -3883,9 +3951,12 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
     var startTime;
 
     vasync.pipeline({funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getCloudapiSvc(_, next) {
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'cloudapi'
             };
             self.sapi.listServices(filters, function (svcsErr, svcs) {
@@ -3901,7 +3972,7 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
 
         function getDockerSvc(_, next) {
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'docker'
             };
             self.sapi.listServices(filters, function (svcsErr, svcs) {
@@ -3966,11 +4037,11 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
             if (startTime) {
                 status.startTime = startTime;
             }
-            if (sdcApp.metadata.DC_MAINT_MESSAGE) {
-                status.message = sdcApp.metadata.DC_MAINT_MESSAGE;
+            if (self.sdcApp.metadata.DC_MAINT_MESSAGE) {
+                status.message = self.sdcApp.metadata.DC_MAINT_MESSAGE;
             }
-            if (sdcApp.metadata.DC_MAINT_ETA) {
-                status.eta = sdcApp.metadata.DC_MAINT_ETA;
+            if (self.sdcApp.metadata.DC_MAINT_ETA) {
+                status.eta = self.sdcApp.metadata.DC_MAINT_ETA;
             }
             cb(null, status);
         }
@@ -3996,7 +4067,6 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
     var self = this;
     var progress = opts.progress || function () {};
 
-    var sdcApp = self.sdc;
     var putCloudapiIntoMaint = false;
     var putDockerIntoMaint = false;
     var startTime;
@@ -4005,13 +4075,16 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
         services: {},
         instances: []
     }, funcs: [
+        function ensureSdcApp(_, next) {
+            self.ensureSdcApp({}, next);
+        },
         function getCloudapiSvc(ctx, next) {
             if (opts.dockerOnly) {
                 next();
                 return;
             }
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'cloudapi'
             };
             self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
@@ -4030,7 +4103,7 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
                 return;
             }
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'docker'
             };
             self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
@@ -4122,11 +4195,11 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
         function setDCMaintenance(_, next) {
             var dcMaintOpts = {};
             if (opts.message &&
-                    sdcApp.metadata.DC_MAINT_MESSAGE !== opts.message) {
+                    self.sdcApp.metadata.DC_MAINT_MESSAGE !== opts.message) {
                 dcMaintOpts.DC_MAINT_MESSAGE = opts.message;
             }
             if (opts.eta &&
-                    sdcApp.metadata.DC_MAINT_ETA !== opts.eta) {
+                    self.sdcApp.metadata.DC_MAINT_ETA !== opts.eta) {
                 dcMaintOpts.DC_MAINT_ETA = opts.eta;
             }
             if (!Object.keys(dcMaintOpts).length) {
@@ -4135,7 +4208,7 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             }
             progress('Saving data center maintenance eta/message');
             startTime = new Date();
-            self.sapi.updateApplication(sdcApp.uuid, {
+            self.sapi.updateApplication(self.sdcApp.uuid, {
                 metadata: dcMaintOpts
             }, function updateAppCb(err) {
                 if (err) {
@@ -4246,7 +4319,6 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
     var log = self.log;
     var progress = opts.progress || function () {};
 
-    var sdcApp = self.sdc;
     var disableCloudapiMaint = false;
     var disableDockerMaint = false;
     var disableAppMaint = false;
@@ -4255,13 +4327,16 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
         services: {},
         instances: []
     }, funcs: [
+       function ensureSdcApp(_, next) {
+           self.ensureSdcApp({}, next);
+       },
        function getCloudapiSvc(ctx, next) {
             if (opts.dockerOnly) {
                 next();
                 return;
             }
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'cloudapi'
             };
             self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
@@ -4280,7 +4355,7 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
                 return;
             }
             var filters = {
-                application_uuid: sdcApp.uuid,
+                application_uuid: self.sdcApp.uuid,
                 name: 'docker'
             };
             self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
@@ -4331,8 +4406,8 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
         },
 
         function checkIfAppInMaint(_, next) {
-            if (!sdcApp.metadata.DC_MAINT_MESSAGE &&
-                !sdcApp.metadata.DC_MAINT_ETA) {
+            if (!self.sdcApp.metadata.DC_MAINT_MESSAGE &&
+                !self.sdcApp.metadata.DC_MAINT_ETA) {
                 progress('Data center is not in maintenance mode');
             } else {
                 disableAppMaint = true;
@@ -4380,7 +4455,7 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
                 return next();
             }
             progress('Clearing data center maintenance information');
-            self.sapi.updateApplication(sdcApp.uuid, {
+            self.sapi.updateApplication(self.sdcApp.uuid, {
                 metadata: {
                     DC_MAINT_MESSAGE: null,
                     DC_MAINT_ETA: null
@@ -4445,8 +4520,6 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
 
 SdcAdm.prototype.checkConfig = function (opts, cb) {
     var self = this;
-    // SAPI values for sdc application:
-    var sdc = self.sdc.metadata;
     // Name of SAPI services for VMs:
     var services;
     // Headnode sysinfo:
@@ -4455,6 +4528,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
     var admin;
     var external;
 
+    var sdc;
+
     // Errors:
     var errs = [];
 
@@ -4656,70 +4731,71 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
 
     }
 
-    self.sapi.listServices({
-        application_uuid: sdc.uuid
-    }, function (err2, res2) {
-        if (err2) {
-            return cb(err2);
-        }
-        if (!res2.length) {
-            return cb('Cannot find SDC services in SAPI');
-        }
-
-        services = res2.filter(function (s) {
-            return (s.type === 'vm');
-        }).map(function (s) {
-            return (s.name);
+    function getVmServiceNames(_, next) {
+        self.getServices({type: 'vm'}, function (err, svcs) {
+            if (err) {
+                next(err);
+                return;
+            }
+            services = svcs.filter(function (s) {
+                return s.type === 'vm';
+            }).map(function (s) {
+                return (s.name);
+            });
+            sdc = self.sdcApp.metadata;
+            next();
         });
+    }
 
-        vasync.pipeline({
-            funcs: [
-                getSysinfo,
-                getNetworks,
-                getDcFromUfds,
-                getUfdsAdmin,
-                getVmsIps
-            ]
-        }, function (err4, _res) {
-            if (err4) {
-                return cb(err4);
-            }
+    vasync.pipeline({
+        funcs: [
+            getVmServiceNames,
+            getSysinfo,
+            getNetworks,
+            getDcFromUfds,
+            getUfdsAdmin,
+            getVmsIps
+        ]
+    }, function (err4, _res) {
+        if (err4) {
+            return cb(err4);
+        }
 
-            // PEDRO: Note the exceptions listed below. I bet we could
-            // remove most of these variables anyway, and left a single
-            // value for *_pw.
-            services.forEach(function (s) {
-                if (!sdc[s + '_root_pw'] && s !== 'manta' && s !== 'sapi') {
-                    errs.push(sprintf('Missing %s_root_pw in SAPI', s));
-                }
+        // PEDRO: Note the exceptions listed below. I bet we could
+        // remove most of these variables anyway, and left a single
+        // value for *_pw.
+        services.forEach(function (s) {
+            if (!sdc[s + '_root_pw'] && s !== 'manta' && s !== 'sapi') {
+                errs.push(sprintf('Missing %s_root_pw in SAPI', s));
+            }
 
-                if (!sdc[s + '_admin_ips'] && s !== 'cloudapi' &&
-                    s !== 'manta' && s !== 'sdcsso') {
-                    errs.push(sprintf('Missing %s_admin_ips in SAPI', s));
-                }
+            if (!sdc[s + '_admin_ips'] && s !== 'cloudapi' &&
+                s !== 'manta' && s !== 'sdcsso') {
+                errs.push(sprintf('Missing %s_admin_ips in SAPI', s));
+            }
 
-                if (s !== 'manatee' && s !== 'binder' &&
-                    s !== 'manta' && s !== 'cloudapi') {
-                    if (!sdc[s + '_domain']) {
-                        errs.push(sprintf('Missing %s_domain in SAPI', s));
-                    }
-                    if (!sdc[s.toUpperCase() + '_SERVICE']) {
-                        errs.push(sprintf('Missing %s_SERVICE in SAPI',
-                                s.toUpperCase()));
-                    }
+            if (s !== 'manatee' && s !== 'binder' &&
+                s !== 'manta' && s !== 'cloudapi') {
+                if (!sdc[s + '_domain']) {
+                    errs.push(sprintf('Missing %s_domain in SAPI', s));
                 }
-            });
-            // Check that ufds_remote_ip is present if this is not master:
-            if (!sdc.ufds_is_master || sdc.ufds_is_master === 'false') {
-                if (!sdc.ufds_remote_ip) {
-                    errs.push('Missing SAPI variable "ufds_remote_ip"');
+                if (!sdc[s.toUpperCase() + '_SERVICE']) {
+                    errs.push(sprintf('Missing %s_SERVICE in SAPI',
+                            s.toUpperCase()));
                 }
             }
-            return self.ufds.close(function (err3) {
-                return cb(null, errs);
-            });
+        });
+        // Check that ufds_remote_ip is present if this is not master:
+        if (!sdc.ufds_is_master || sdc.ufds_is_master === 'false') {
+            if (!sdc.ufds_remote_ip) {
+                errs.push('Missing SAPI variable "ufds_remote_ip"');
+            }
+        }
+        return self.ufds.close(function (err3) {
+            return cb(null, errs);
         });
     });
+
 };
 
 
@@ -5095,6 +5171,13 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
 
     vasync.pipeline({
         funcs: [
+            function ensureSdcApp(_, next) {
+                if (opts.json) {
+                    self.ensureSdcApp({ quiet: true}, next);
+                } else {
+                    self.ensureSdcApp({}, next);
+                }
+            },
             connectToUr,
             lookupServices,
             lookupInstances,
diff --git a/lib/steps/binder.js b/lib/steps/binder.js
index 691b880..6949539 100644
--- a/lib/steps/binder.js
+++ b/lib/steps/binder.js
@@ -43,12 +43,13 @@ function checkCoreVmInstancesResolvers(arg, cb) {
     assert.func(arg.progress, 'arg.progress');
     assert.object(arg.log, 'arg.log');
     assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.object(arg.sdcadm.sdcApp, 'arg.sdcaadm.sdcApp');
     assert.optionalObject(arg.ctx, 'arg.ctx');
     assert.func(cb, 'cb');
 
     var sdcadm = arg.sdcadm;
     var context = arg.ctx || {};
-    var app = sdcadm.sdc;
+    var app = sdcadm.sdcApp;
 
     vasync.pipeline({
         arg: context,
diff --git a/lib/steps/no-rabbit.js b/lib/steps/no-rabbit.js
index 3df7cfb..0195ce7 100644
--- a/lib/steps/no-rabbit.js
+++ b/lib/steps/no-rabbit.js
@@ -35,6 +35,7 @@ function noRabbitEnable(arg, callback) {
     assert.func(arg.progress, 'arg.progress');
     assert.object(arg.log, 'arg.log');
     assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.object(arg.sdcadm.sdcApp, 'arg.sdcadm.sdcApp');
     var log = arg.log;
     var sdcadm = arg.sdcadm;
     var progress = arg.progress;
@@ -42,8 +43,8 @@ function noRabbitEnable(arg, callback) {
     var imgsFromSvcName = {};
     var MIN_NO_RABBIT_VERSION = '20150917';
 
-    if (arg.sdcadm.sdc.metadata.no_rabbit) {
-        log.debug({no_rabbit: arg.sdcadm.sdc.metadata.no_rabbit},
+    if (arg.sdcadm.sdcApp.metadata.no_rabbit) {
+        log.debug({no_rabbit: arg.sdcadm.sdcApp.metadata.no_rabbit},
             'no_rabbit already enabled');
         return callback();
     }
@@ -128,7 +129,7 @@ function noRabbitEnable(arg, callback) {
                     no_rabbit: true
                 }
             };
-            sdcadm.sapi.updateApplication(sdcadm.sdc.uuid, update,
+            sdcadm.sapi.updateApplication(sdcadm.sdcApp.uuid, update,
                 errors.sdcClientErrWrap(next, 'sapi'));
         },
         function stopDatacenterMaint(ctx, next) {
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index 315d7f6..ff61326 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -40,6 +40,7 @@ function sapiEnsureAgentServices(arg, cb) {
     assert.func(arg.progress, 'arg.progress');
     assert.object(arg.log, 'arg.log');
     assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.object(arg.sdcadm.sdcApp, 'arg.sdcaadm.sdcApp');
     assert.func(cb, 'cb');
 
     var log = arg.log.child({component: 'sapiEnsureAgentServices'}, true);
@@ -49,7 +50,7 @@ function sapiEnsureAgentServices(arg, cb) {
     // We need at least a MIN_VALID_SAPI_VERSION image so
     // type=agent suport is there.
     var MIN_VALID_SAPI_VERSION = '20140703';
-    var app = sdcadm.sdc;
+    var app = sdcadm.sdcApp;
     var historyItem = null;
 
     var img;
diff --git a/test/platform.test.js b/test/platform.test.js
index 4bfd8a1..b236357 100644
--- a/test/platform.test.js
+++ b/test/platform.test.js
@@ -263,6 +263,13 @@ test('sdcadm platform usage VERSION -j', function (t) {
         t.equal(stderr, '');
 
         var usageDetails = common.parseJsonOut(stdout);
+        if (!usageDetails || !usageDetails.length) {
+            // If latest platform is not used at all, we will not have any
+            // output so cannot check titles:
+            t.comment('Skipping usage checks (latest platform not used)');
+            t.end();
+            return;
+        }
         usageDetails.forEach(function (d) {
             USAGE_TITLES.map(function (title) {
                 return title.toLowerCase();
-- 
2.21.0

