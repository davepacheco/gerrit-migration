commit 90d364646b03c32222bc6471757f399a4e21cc99 (refs/changes/81/481/1)
Author: dboldyrev <Arc3111@gmail.com>
Date:   2016-09-15T14:50:33+03:00 (3 years, 1 month ago)
    
    ADMINUI-2335 Get a blank page when there are multiple tabs or under certain circumstances

diff --git a/www/js/components/alarms-menu.jsx b/www/js/components/alarms-menu.jsx
index 79dc1d53..264fe538 100644
--- a/www/js/components/alarms-menu.jsx
+++ b/www/js/components/alarms-menu.jsx
@@ -36,7 +36,7 @@ var AlarmsMenu = React.createClass({
         this.setState({menu: !this.state.menu});
     },
 
-    componentWillMount: function() {
+    componentWillMount: function () {
         this._probeFetches = {};
         this._probeGroupFetches = {};
         this.fetchAlarms();
@@ -44,11 +44,11 @@ var AlarmsMenu = React.createClass({
         this._interval = setInterval(this.fetchAlarms, AMON_POLL_INTERVAL);
     },
 
-    componentWillUnmount: function() {
+    componentWillUnmount: function () {
         adminui.vent.off('alarms:changed', this.fetchAlarms);
         clearInterval(this._interval);
     },
-    
+
     componentDidMount: function () {
         this.alarmsMenuContainer = $('div.alarms-menu-container');
         this.alarmsMenuContainer.tooltip({
@@ -57,15 +57,16 @@ var AlarmsMenu = React.createClass({
             container: 'body',
             trigger: 'hover'
         }).tooltip('disable');
+        this.alarmsMenuContainer.tooltip(this.state.alarms.length >= 500 ? 'enable' : 'disable');
     },
 
-    fetchProbeGroup: function(id) {
+    fetchProbeGroup: function (id) {
         if (this._probeGroupFetches[id]) {
             return;
         }
         this.setState({loading: true});
-        var p = new Promise(function(resolve, reject) {
-            api.get('/api/amon/probegroups/'+this.props.user + '/' + id).end(function(err, res) {
+        var probeGroupsPromise = new Promise(function (resolve, reject) {
+            api.get('/api/amon/probegroups/' + this.props.user + '/' + id).end(function (err, res) {
                 if (res.ok) {
                     resolve(res.body);
                 } else {
@@ -74,26 +75,23 @@ var AlarmsMenu = React.createClass({
             }.bind(this));
         }.bind(this));
 
-        console.debug('[AlarmsMenu] fetching', id);
-        this._probeGroupFetches[id] = p;
-
-        p.then(function(res) {
+        this._probeGroupFetches[id] = probeGroupsPromise;
+        probeGroupsPromise.then(function (res) {
             var probes = this.state.probes;
             probes[id] = res;
             this.setState({probes: probes});
-            console.debug('[AlarmsMenu] fetch', id, 'done');
         }.bind(this));
     },
 
-    fetchProbe: function(id) {
+    fetchProbe: function (id) {
         if (this._probeFetches[id]) {
             return;
         }
 
         this.setState({loading: true});
 
-        var p = new Promise(function(resolve, reject) {
-            api.get('/api/amon/probes/'+this.props.user + '/' + id).end(function(err, res) {
+        var probesPromise = new Promise(function (resolve, reject) {
+            api.get('/api/amon/probes/' + this.props.user + '/' + id).end(function (err, res) {
                 if (res.ok) {
                     resolve(res.body);
                 } else {
@@ -102,14 +100,11 @@ var AlarmsMenu = React.createClass({
             }.bind(this));
         }.bind(this));
 
-        console.debug('fetching', id);
-        this._probeFetches[id] = p;
-
-        p.then(function(res) {
+        this._probeFetches[id] = probesPromise;
+        probesPromise.then(function (res) {
             var probes = this.state.probes;
             probes[id] = res;
             this.setState({probes: probes});
-            console.debug('fetch', id, 'done');
         }.bind(this));
     },
 
@@ -121,8 +116,7 @@ var AlarmsMenu = React.createClass({
                     message: 'AdminUI: Connected.'
                 });
             }
-            var state = alarms.length >= 500 ? 'enable' : 'disable';
-            this.alarmsMenuContainer.tooltip(state);
+            this.alarmsMenuContainer && this.alarmsMenuContainer.tooltip(alarms.length >= 500 ? 'enable' : 'disable');
             this.setState({alarms: alarms, error: null});
             alarms.map(function (alarm) {
                 if (alarm.probe) {
@@ -135,7 +129,7 @@ var AlarmsMenu = React.createClass({
         }.bind(this);
 
         var storedAlarms = window.localStorage.alarms;
-        
+
         if (typeof storedAlarms === 'string') {
             try {
                 storedAlarms = JSON.parse(storedAlarms);
@@ -158,7 +152,7 @@ var AlarmsMenu = React.createClass({
             if (timeStamp && timeStamp > new Date()) {
                 return done(storedAlarms.data);
             }
-            
+
             requestTimeStamp = getTime('requestTimeStamp');
         }
 
@@ -193,9 +187,9 @@ var AlarmsMenu = React.createClass({
 
     gotoAlarm: function (alarm) {
         console.log('go to alarm', alarm);
-        adminui.vent.trigger('showcomponent', 'alarm', { user: alarm.user, id: alarm.id.toString() });
+        adminui.vent.trigger('showcomponent', 'alarm', {user: alarm.user, id: alarm.id.toString()});
     },
-    renderMenuItem: function(alarm) {
+    renderMenuItem: function (alarm) {
         var probe = this.state.probes[alarm.probe || alarm.probeGroup];
         console.log('probe', probe);
 
@@ -213,19 +207,19 @@ var AlarmsMenu = React.createClass({
                     <a onClick={this.gotoAlarm.bind(null, alarm)} className="probe"><span className="probe-name">??</span></a>
                 }
                 <div className="alarm-lastevent">
-                <i className="fa fa-clock-o"></i> { moment(alarm.timeLastEvent).fromNow() }
+                    <i className="fa fa-clock-o"></i> {moment(alarm.timeLastEvent).fromNow()}
                 </div>
             </div>
             <div className="alarm-menu-item-content">
                 <div className="faults">
-                {alarm.faults.map(function(f) {
+                {alarm.faults.map(function (f) {
                     return <div key={f.event.uuid} className="fault">{f.event.data.message}</div>;
                 })}
                 </div>
             </div>
         </div>);
     },
-    menu: function() {
+    menu: function () {
         if (this.state.menu) {
             if (this.state.error) {
                 return <div className="alarms-menu-wrapper open">
@@ -266,15 +260,15 @@ var AlarmsMenu = React.createClass({
             return '';
         }
     },
-    render: function() {
+    render: function () {
         var toggleMenu = this.state.error ?
             <a onClick={this.toggleMenu} className={
-                ('toggle ' + (this.state.menu ? ' active ' : '' ) + (this.state.error ? ' has-error' : '' ))
+                ('toggle ' + (this.state.menu ? ' active ' : '') + (this.state.error ? ' has-error' : ''))
             }><i className="fa fa-warning"></i> E</a>
             :
             <a onClick={this.toggleMenu} className={
-                ('toggle ' + (this.state.menu ? ' active ' : '' ) + (this.state.alarms.length ? ' has-alarms ' : '' ))
-            }><i className="fa fa-bell"></i> { this.state.alarms.length }</a>;
+                ('toggle ' + (this.state.menu ? ' active ' : '') + (this.state.alarms.length ? ' has-alarms ' : ''))
+            }><i className="fa fa-bell"></i> {this.state.alarms.length}</a>;
 
         return <div className="alarms-menu-container">
             {toggleMenu}
@@ -283,5 +277,4 @@ var AlarmsMenu = React.createClass({
     }
 });
 
-
 module.exports = AlarmsMenu;
diff --git a/www/js/components/pages/signin/index.jsx b/www/js/components/pages/signin/index.jsx
index 521fb5e5..a743ba86 100644
--- a/www/js/components/pages/signin/index.jsx
+++ b/www/js/components/pages/signin/index.jsx
@@ -11,13 +11,13 @@ var SigninComponent = React.createClass({
     propTypes: {
         userModel: React.PropTypes.object.isRequired
     },
-    getInitialState: function() {
+    getInitialState: function () {
         return {
             errorMessage: false
         };
     },
-    _onAuthenticate: function(e) {
-        e.preventDefault();
+    _onAuthenticate: function (event) {
+        event.preventDefault();
         this.setState({
             signingIn: true,
             errorMessage: false
@@ -26,7 +26,7 @@ var SigninComponent = React.createClass({
         var password = this.refs.password.getDOMNode().value;
         this.props.userModel.authenticate(username, password);
     },
-    _onSigninError: function(err) {
+    _onSigninError: function (err) {
         this.setState({
             errorMessage: err,
             signingIn: false
@@ -48,7 +48,7 @@ var SigninComponent = React.createClass({
     onConnectionLost: function (err) {
         this.setState({disableSignin: true, signingIn: false});
     },
-    componentDidMount: function() {
+    componentDidMount: function () {
         this.pinger = new Pinger({interval: 5*1000});
         this.pinger.on('ping', this.onPing);
         this.pinger.on('connectionLost', this.onConnectionLost);
@@ -62,24 +62,25 @@ var SigninComponent = React.createClass({
         this.pinger.stop();
         this.pinger.removeListener('ping', this.onPing);
         this.props.userModel.off('error', this._onSigninError);
+        $(window).off('resize', this.centerSigninBox);
     },
-    centerSigninBox: function() {
-        var $v = $(this.refs.view.getDOMNode());
-        var w = $(window).width();
-        var h = $(window).height();
-        var x = (w/2)-$v.width()/2;
-        var y = (h/2)-$v.height()/2;
-        if (y < 0) { y = 0; }
-        $v.css({
-            left: x + 'px',
-            top: y + 'px'
+    centerSigninBox: function () {
+        var view = $(this.refs.view.getDOMNode());
+        var windowWidth = $(window).width();
+        var windowHeight = $(window).height();
+        var abscissa = (windowWidth / 2) - view.width() / 2;
+        var ordinate = (windowHeight / 2) - view.height() / 2;
+        ordinate = ordinate < 0 ? 0 : ordinate;
+        view.css({
+            left: abscissa + 'px',
+            top: ordinate + 'px'
         });
     },
-    focusFirstInput: function() {
+    focusFirstInput: function () {
         var $v = $(this.refs.view.getDOMNode());
         $v.find("input[value='']:not(:checkbox,:button):visible:first").focus();
     },
-    render: function() {
+    render: function () {
         var login = this.props.userModel.get('login') || '';
         var dc = this.props.userModel.getDatacenter();
         var buttonClasses = cx({
@@ -94,18 +95,17 @@ var SigninComponent = React.createClass({
                     <span className="sdc">SDC</span> <span className="product">ADMINUI</span> <span className="datacenter">{dc}</span>
                 </h1>
 
-                { this.state.disableSignin ?
+                {this.state.disableSignin ?
                 <div className="alert alert-danger">
                     <span className="msg">
                         Services required for authentication are currently unavailable. Signin will be re-enabled when service is restored
                     </span>
-                </div> : null }
-
+                </div> : null}
 
-                { this.state.errorMessage ?
+                {this.state.errorMessage ?
                 <div className="alert alert-danger">
                     <span className="msg">{this.state.errorMessage}</span>
-                </div> : null }
+                </div> : null}
 
                 <form className="form" onSubmit={this._onAuthenticate}>
                     <div className="form-group">
@@ -114,24 +114,20 @@ var SigninComponent = React.createClass({
                             type="text" ref="username" defaultValue={login}
                             placeholder="Enter operator login name" autoComplete="off" name="username" />
                     </div>
-
                     <div className="form-group">
                         <label className="control-label">Password</label>
                         <input className="form-control input-lg" ref="password" defaultValue="" type="password" placeholder="Enter operator password" name="password" />
                     </div>
-
                     <div className="controls">
                         <button type="submit" disabled={this.state.disableSignin || this.state.signingIn} className={buttonClasses}>
-                        { this.state.disableSignin ? 'Signin Disabled - Monitoring Service Availability' :
-                            this.state.signingIn ? 'Hold on, Signing in...' : 'Sign In to SmartDataCenter'
-                        }
+                        {this.state.disableSignin ? 'Signin Disabled - Monitoring Service Availability' :
+                            this.state.signingIn ? 'Hold on, Signing in...' : 'Sign In to SmartDataCenter'}
                         </button>
                     </div>
                 </form>
             </div>
         );
     }
-
 });
 
 module.exports = SigninComponent;
