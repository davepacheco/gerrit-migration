From f3bd9e044c0e52c48b3d62ef5f432138d4df58eb Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Fri, 5 Jan 2018 21:41:24 +0000
Subject: [PATCH] joyent/node-artedi#9 Create an accessor function for
 collector values

---
 CHANGES.md           |  3 ++
 README.md            | 16 ++++-----
 docs/API.md          | 18 ++++++++++
 docs/private_api.md  |  9 +++--
 lib/common.js        | 16 +++++++--
 lib/counter.js       | 23 +++++++++++-
 lib/gauge.js         | 22 +++++++++++-
 lib/metric.js        | 14 +++++---
 lib/metric_vector.js | 15 ++++++--
 package.json         |  2 +-
 test/basic.test.js   | 85 ++++++++++++++++++++++++++++++++++----------
 11 files changed, 181 insertions(+), 42 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 899f6a5..3cb6c96 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,9 @@
 ## Not yet released
 None
 
+## 1.2.1
+* #9 Create an accessor function for collector values
+
 ## 1.1.1
 * [MORAY-447](https://smartos.org/bugview/MORAY-447) strange latency data point
     in reported moray metrics
diff --git a/README.md b/README.md
index 57d04dd..daf0c3b 100644
--- a/README.md
+++ b/README.md
@@ -62,14 +62,14 @@ collector.collect(artedi.FMT_PROM, function (err, metrics) {
     // http_requests_completed{zone="e5d3",method="getobject",code="200"} 1
     // # HELP http_request_latency_ms latency of muskie http requests
     // # TYPE http_request_latency_ms histogram
-    // http_request_latency_ms{le="729"} 0 1499645380000
-    // http_request_latency_ms{le="2187"} 1 1499645380000
-    // http_request_latency_ms{le="3645"} 0 1499645380000
-    // http_request_latency_ms{le="5103"} 0 1499645380000
-    // http_request_latency_ms{le="6561"} 0 1499645380000
-    // http_request_latency_ms{le="+Inf"} 1 1499645380000
-    // http_request_latency_ms_count{} 1 1499645380000
-    // http_request_latency_ms_sum{} 998 1499645380000
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="729"} 0
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="2187"} 1
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="3645"} 0
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="5103"} 0
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="6561"} 0
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="+Inf"} 1
+    // http_request_latency_ms_count{zone="e5d3",method="getobject",code="200"} 1
+    // http_request_latency_ms_sum{zone="e5d3",method="getobject",code="200"} 998
 });
 ```
 
diff --git a/docs/API.md b/docs/API.md
index 74d70e7..f2d9b37 100644
--- a/docs/API.md
+++ b/docs/API.md
@@ -162,6 +162,15 @@ counter.add(100, {
 });
 ```
 
+### counter.getValue(labels)
+Retrieve the value of the underlying metric represented by `labels`. If none
+exists, an error is returned.
+
+Example:
+```javascript
+counter.getValue( { operation: 'click' } );
+```
+
 ## Gauge
 Gauges are similar to counters. Gauges can count up, or count down relative
 to their current value, or be set to an arbitrary value. Gauges start with an
@@ -187,6 +196,15 @@ gauge.set(123, {
 });
 ```
 
+### gauge.getValue(labels)
+Retrieve the value of the underlying metric represented by `labels`. If none
+exists, an error is returned.
+
+Example:
+```javascript
+gauge.getValue( { tableName: 'manta' } );
+```
+
 ## Histogram
 Histograms are internally made up of Counters and Gauges. Once you
 understand that, Histograms are much easier to understand. Histograms
diff --git a/docs/private_api.md b/docs/private_api.md
index d64689a..3650894 100644
--- a/docs/private_api.md
+++ b/docs/private_api.md
@@ -36,11 +36,12 @@ value, a timestamp, and associated labels.
 |----------|------|-----------------|
 |labels    |object|A map of label key/value pairs|
 |value     |number|A number that describes the current value of the metric|
-|timestamp |number|Unix time since the epoch, representing the time this metric was last modified|
+|timestamp |number|ISO 8601 timestamp, representing the time this metric was last modified|
 
 | Function | Arguments | Result | Return Value|
 |----------|-----------|--------|-------------|
 |add       |num     |Adds `num` to the `value` field of the metric. No positive/negative check is done on `num`|None|
+|getValue  |None   |Returns the local `value` field. Consumed by higher level functions |`number` type|
 
 The `labels` that belong to each Metric are key/value pairs. There can
 be two Metrics that have the exact same key/value pairs, but they cannot
@@ -137,7 +138,8 @@ metrics are collected. See collector.processTriggers() for more information.
 | Function | Arguments | Result | Return Value|
 |----------|-----------|--------|-------------|
 |Counter |parent, opts|creates a Counter object from traits available in the parent, and options passed in|a new Counter object|
-|labels|object|returns a metric that have *exactly* the label key/value pairs provided. If none exists, one is created|A Metric object|
+|labels|object|returns a metric that has *exactly* the label key/value pairs provided. If none exists, one is created|A Metric object|
+|getWithLabels|object|same as `labels()`, but returns `null` if a metric doesn't exist|A Metric object or null|
 |prometheus|callback   |returns all of the Counter's metrics in prometheus format as a string|None (string and error via callback)|
 
 `Counter()` is called by the Collector object's `counter()` function.
@@ -154,7 +156,8 @@ metrics are collected. See collector.processTriggers() for more information.
 | Function | Arguments | Result | Return Value|
 |----------|-----------|--------|-------------|
 |Gauge |parent, opts|creates a Gauge object from traits available in the parent, and options passed in|a new Gauge object|
-|labels|object|returns a metric that have *exactly* the label key/value pairs provided. If none exists, one is created|A Metric object|
+|labels|object|returns a metric that has *exactly* the label key/value pairs provided. If none exists, one is created|A Metric object|
+|getWithLabels|object|same as `labels()`, but returns `null` if a metric doesn't exist|A Metric object or null|
 |prometheus|callback   |returns all of the Gauge's metrics in prometheus format as a string|None (string and error via callback)|
 
 `Gauge()` is called by the Collector object's `gauge()` function.
diff --git a/lib/common.js b/lib/common.js
index b88416d..d1f95a0 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 var mod_assert = require('assert-plus');
 var mod_jsprim = require('jsprim');
@@ -45,6 +45,16 @@ function labels(pairs, obj) {
     return (obj.metricVec.createOrGetWithLabels(pairs));
 }
 
+function getWithLabels(pairs, obj) {
+    mod_assert.optionalObject(pairs, 'pairs');
+
+    if (!pairs || mod_jsprim.isEmpty(pairs)) {
+        return (obj.metricVec.getDefault());
+    }
+
+    return (obj.metricVec.getWithLabels(pairs));
+}
+
 /*
  * Call the 'prometheus()' function on the MetricVector object, which represents
  * all of the metrics. Additionally, append the HELP and TYPE lines that are
@@ -65,7 +75,9 @@ module.exports = {
     prometheus: prometheus,
     constructor: constructor,
     labels: labels,
+    getWithLabels: getWithLabels,
     COUNTER: 'counter',
     GAUGE: 'gauge',
-    HISTOGRAM: 'histogram'
+    HISTOGRAM: 'histogram',
+    NOEXISTERROR: 'NoExistError'
 };
diff --git a/lib/counter.js b/lib/counter.js
index 266d671..ca60715 100644
--- a/lib/counter.js
+++ b/lib/counter.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
@@ -47,6 +47,19 @@ Counter.prototype.add = function add(value, pairs) {
     metric.add(value);
 };
 
+/*
+ * Returns the value of a metric with the provided labels.
+ */
+Counter.prototype.getValue = function getValue(pairs) {
+    mod_assert.optionalObject(pairs, 'pairs');
+
+    var metric = this.getWithLabels(pairs);
+    if (metric) {
+        return (metric.getValue());
+    }
+    return (new VError({name: lib_common.NOEXISTERROR}));
+};
+
 /* Private Functions */
 /*
  * Returns a Metric object that represents the labels passed in. If a Metric
@@ -58,6 +71,14 @@ Counter.prototype.labels = function labels(pairs) {
     return (lib_common.labels(pairs, this));
 };
 
+/*
+ * Returns a Metric object that represents the labels passed in. Differs from
+ * this.labels() by returning 'null' if no Metric exists.
+ */
+Counter.prototype.getWithLabels = function getWithLabels(pairs) {
+    return (lib_common.getWithLabels(pairs, this));
+};
+
 /*
  * Call the 'prometheus()' function on the MetricVector object, which represents
  * all of the metrics. Additionally, append the HELP and TYPE lines that are
diff --git a/lib/gauge.js b/lib/gauge.js
index 8929c17..1eedef2 100644
--- a/lib/gauge.js
+++ b/lib/gauge.js
@@ -3,9 +3,10 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 var mod_assert = require('assert-plus');
+var VError = require('verror').VError;
 
 var lib_common = require('./common');
 
@@ -42,10 +43,29 @@ Gauge.prototype.set = function set(value, pairs) {
     metric.set(value);
 };
 
+/*
+ * Returns the value of a metric with the provided labels.
+ */
+Gauge.prototype.getValue = function getValue(pairs) {
+    mod_assert.optionalObject(pairs, 'pairs');
+
+    var metric = this.getWithLabels(pairs);
+    if (metric) {
+        return (metric.getValue());
+    }
+    return (new VError({name: lib_common.NOEXISTERROR}));
+};
+
+
 /* Private Functions */
 Gauge.prototype.labels = function labels(pairs) {
     return (lib_common.labels(pairs, this));
 };
+
+Gauge.prototype.getWithLabels = function getWithLabels(pairs) {
+    return (lib_common.getWithLabels(pairs, this));
+};
+
 Gauge.prototype.prometheus = function prometheus(cb) {
     lib_common.prometheus(cb, this);
 };
diff --git a/lib/metric.js b/lib/metric.js
index 522e88a..9560e06 100644
--- a/lib/metric.js
+++ b/lib/metric.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
@@ -22,8 +22,8 @@ function Metric(options) {
     mod_assert.optionalObject(options, 'options');
     this.labels = options ? options.labels : {};
     this.value = 0;
-    // Unix time in milliseconds of when this metric was last updated.
-    this.timestamp = 0;
+    // ISO 8601 time when this metric was last updated.
+    this.timestamp = null;
 }
 
 /*
@@ -35,14 +35,18 @@ Metric.prototype.add = function add(num) {
     mod_assert.number(num, 'num');
 
     this.value += num;
-    this.timestamp = Date.now();
+    this.timestamp = new Date().toISOString();
 };
 
 Metric.prototype.set = function set(num) {
     mod_assert.number(num, 'num');
 
     this.value = num;
-    this.timestamp = Date.now();
+    this.timestamp = new Date().toISOString();
+};
+
+Metric.prototype.getValue = function getValue() {
+    return (this.value);
 };
 
 module.exports = {
diff --git a/lib/metric_vector.js b/lib/metric_vector.js
index 70dcf68..4ba7010 100644
--- a/lib/metric_vector.js
+++ b/lib/metric_vector.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var mod_util = require('util');
@@ -77,8 +77,19 @@ MetricVector.prototype.getDefault = function getDefault() {
  */
 MetricVector.prototype.getWithLabels = function getWithLabels(labels) {
     mod_assert.object(labels, 'labels');
+
+    /*
+     * If the user tries to 'get' a metric that has already been assigned
+     * static labels, we shouldn't accidentally create a second metric with
+     * identical non-static labels.
+     */
+    if (this.metrics['default'] && mod_jsprim.deepEqual(labels,
+                this.metrics['default'].labels)) {
+        return (this.metrics['default']);
+    }
+
     var lhash = lib_utils.hashObj(labels);
-    return (this.metrics[lhash] || null);
+    return (this.metrics[lhash]);
 };
 
 /*
diff --git a/package.json b/package.json
index 1824afc..41bdd77 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "artedi",
-  "version": "1.1.1",
+  "version": "1.2.0",
   "description": "a metric client library",
   "main": "lib/collector.js",
   "dependencies": {
diff --git a/test/basic.test.js b/test/basic.test.js
index a1c4127..c08f297 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var mod_tape = require('tape');
@@ -13,6 +13,55 @@ var mod_artedi = require('..');
 
 var common = require('../lib/common.js');
 
+var VError = require('verror').VError;
+
+/*
+ * Make sure we can get raw values.
+ */
+mod_tape('getValue tests', function (t) {
+    var collector = mod_artedi.createCollector();
+    var counter = collector.counter({
+        name: 'test',
+        help: 'test'
+    });
+    t.equals(counter.getValue(), 0, 'default counter should start at zero');
+
+    counter = collector.counter({
+        name: 'better_test',
+        help: 'test',
+        labels: {
+            'something': 'important'
+        }
+    });
+    counter.increment();
+    t.equals(counter.getValue(), 1, 'default counter should be incremented');
+    t.ok(counter.getValue({'something': 'important'}, 'search works with' +
+            ' inherited labels'));
+
+    counter = collector.counter({
+        name: 'best_test',
+        help: 'test'
+    });
+    counter.increment({
+        'statusCode': 204
+    });
+    t.equals(counter.getValue({'statusCode': 204}), 1, 'child label get value');
+
+    var gauge = collector.gauge({
+        name: 'my_gauge',
+        help: 'just an ordinary gauge'
+    });
+    gauge.set(1000);
+    t.equals(gauge.getValue(), 1000, 'get value from a gauge');
+
+    var err = gauge.getValue({name: 'noexist'});
+    t.ok(err instanceof VError, 'error on nonexistent gauge');
+    t.equal(err.name, common.NOEXISTERROR, 'error name checks out');
+
+    t.end();
+});
+
+
 /*
  * Test that the parent/child relationship is working.
  * - Empty strings
@@ -123,16 +172,18 @@ mod_tape('label tests', function (t) {
 
     // Increment counter with static labels.
     counter.increment();
-    t.equals(counter.metricVec.getDefault().value, 1,
+    t.equals(counter.getValue({mytag: 'isAwesome', global: 'label'}), 1,
         'increment w/ static labels from Collector and Counter');
 
+    t.equals(counter.getValue(), 1, 'default counter with getValue');
+
+
     counter.increment({
         dynamicLabel: 'pepsi'
     });
-    t.equals(counter.labels({
-        dynamicLabel: 'pepsi'
-    }).value, 1, 'increment w/ dynamic label and static labels');
 
+    t.equals(counter.getValue({dynamicLabel: 'pepsi'}), 1,
+        'increment w/ dynamic label and static labels');
 
     counter = collector.counter({
         name: 'counter',
@@ -140,23 +191,21 @@ mod_tape('label tests', function (t) {
     });
 
     counter.increment();
-    t.equals(counter.metricVec.getDefault().value, 1,
-            'increment w/ label from Collector');
+    t.equals(counter.getValue(), 1, 'increment w/ label from Collector');
 
     // The user gave us a label structure, but no labels.
     counter.add(100, {});
-    t.equals(counter.metricVec.getDefault().value, 101,
-            'increment with empty label structure');
+    t.equals(counter.getValue(), 101, 'increment with empty label structure');
 
     // Test for numeric metric values.
     counter.increment({
         method: 'putobject',
         code: 200
     });
-    t.equals(counter.labels({
+    t.equals(counter.getValue({
         method: 'putobject',
         code: 200
-    }).value, 1, 'numeric label values, multiple labels');
+    }), 1, 'numeric label values, multiple labels');
 
     t.end();
 });
@@ -169,15 +218,13 @@ mod_tape('absolute gauge tests', function (t) {
     });
 
     abs_gauge.set(100, {});
-    t.equals(abs_gauge.metricVec.getDefault().value, 100,
-            'basic absolute gauge set value');
+    t.equals(abs_gauge.getValue(), 100, 'basic absolute gauge set value');
 
     abs_gauge.set(0, {});
-    t.equals(abs_gauge.metricVec.getDefault().value, 0,
-            'basic absolute gauge set value to zero');
+    t.equals(abs_gauge.getValue(), 0, 'basic absolute gauge set value to zero');
 
     abs_gauge.set(-1000.1234, {});
-    t.equals(abs_gauge.metricVec.getDefault().value, -1000.1234,
+    t.equals(abs_gauge.getValue(), -1000.1234,
             'basic absolute gauge set value to negative float');
 
     t.throws(function () {
@@ -500,10 +547,10 @@ mod_tape('odd value tests', function (t) {
     });
 
     counter.add(0);
-    t.equals(counter.metricVec.getDefault().value, 0, 'add zero to counter');
+    t.equals(counter.getValue(), 0, 'add zero to counter');
 
     hist.observe(0);
-    t.equals(hist.defaultCounter().metricVec.getDefault().value, 0,
+    t.equals(hist.defaultCounter().getValue(), 0,
         'histogram observes zero value');
 
     t.throws(function () {
@@ -602,7 +649,7 @@ mod_tape('log/linear bucket tests', function (t) {
     histo.observe(6562); // Record a value which will create larger buckets.
     histo.observe(5103); // Record a value below the smallest larger bucket.
 
-    value = histo.defaultCounter().labels({'le': 6561}).value;
+    value = histo.defaultCounter().getValue({'le': 6561});
     t.equals(value, 4, 'overlapping bucket values copied correctly');
 
 
-- 
2.21.0

