commit e65d00ec66519e97bc2d1bca792c660eb2e4eb0b (refs/changes/42/1442/3)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-02-14T17:35:53+01:00 (2 years, 8 months ago)
    
    TOOLS-1675 `sdcadm post-setup docker` should only setup, not update
    Reviewed by: Trent Mick <trent.mick@joyent.com>

diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 6e76172..720b270 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var util = require('util'),
@@ -72,6 +72,7 @@ function do_docker(subcmd, opts, args, cb) {
     var context = {
         imgsToDownload: [],
         downloadDir: '/var/tmp',
+        serverFromUuidOrHostname: [],
         serversToUpdate: null,
         urConnection: null
     };
@@ -213,24 +214,34 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function haveDockerImageAlready(ctx, next) {
-            self.sdcadm.imgapi.getImage(ctx.dockerImg.uuid,
-                    function (err, img_) {
-                if (err && err.body && err.body.code === 'ResourceNotFound') {
+            self.sdcadm.imgapi.listImages({
+                name: 'docker'
+            }, function (err, images) {
+                if (err) {
+                    next(err);
+                    return;
+                } else if (images && images.length) {
+                    // TODO presuming sorted
+                    ctx.dockerImg = images[images.length - 1];
+                } else {
                     ctx.imgsToDownload.push(ctx.dockerImg);
-                } else if (err) {
-                    return next(err);
                 }
                 next();
             });
         },
 
         function haveDockerloggerImageAlready(ctx, next) {
-            self.sdcadm.imgapi.getImage(ctx.dockerloggerImg.uuid,
-                    function (err, img_) {
-                if (err && err.body && err.body.code === 'ResourceNotFound') {
+            self.sdcadm.imgapi.listImages({
+                name: 'dockerlogger'
+            }, function (err, images) {
+                if (err) {
+                    next(err);
+                    return;
+                } else if (images && images.length) {
+                    // TODO presuming sorted
+                    ctx.dockerloggerImg = images[images.length - 1];
+                } else {
                     ctx.imgsToDownload.push(ctx.dockerloggerImg);
-                } else if (err) {
-                    return next(err);
                 }
                 next();
             });
@@ -380,22 +391,6 @@ function do_docker(subcmd, opts, args, cb) {
             });
         },
 
-        function updateDockerSvcImageUuid(ctx, next) {
-            if (!ctx.force &&
-                ctx.dockerImg.uuid === ctx.dockerSvc.params.image_uuid) {
-                return next();
-            }
-            self.progress('Update "image_uuid=%s" in "docker" SAPI service',
-                ctx.dockerImg.uuid);
-            var update = {
-                params: {
-                    image_uuid: ctx.dockerImg.uuid
-                }
-            };
-            self.sdcadm.sapi.updateService(ctx.dockerSvc.uuid, update,
-                errors.sdcClientErrWrap(next, 'sapi'));
-        },
-
         function ensureDockerDelegateDataset(ctx, next) {
             if (ctx.newDockerInst) {
                 return next();
@@ -410,29 +405,9 @@ function do_docker(subcmd, opts, args, cb) {
             }, next);
         },
 
-        function reprovisionDockerInst(ctx, next) {
-            if (ctx.newDockerInst) {
-                return next();
-            } else if (!opts.force &&
-                ctx.dockerVm.image_uuid === ctx.dockerImg.uuid) {
-                return next();
-            }
-            self.progress('Reprovisioning "docker" instance %s (%s)',
-                ctx.dockerVm.uuid, ctx.dockerVm.alias);
-            self.sdcadm.sapi.reprovisionInstance(ctx.dockerInst.uuid,
-                    ctx.dockerImg.uuid, function (err) {
-                if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
-                }
-                self.progress('Reprovisioned "docker" instance %s (%s)',
-                    ctx.dockerVm.uuid, ctx.dockerVm.alias);
-                next();
-            });
-        },
 
         // From here, pretty much the same thing than for updating dockerlogger
         function getOrCreateDockerloggerSvc(ctx, next) {
-            self.progress('Docker setup finished. Installing "dockerlogger"');
             self.sdcadm.sapi.listServices({
                 name: 'dockerlogger'
             }, function (err, svcs) {
@@ -461,22 +436,104 @@ function do_docker(subcmd, opts, args, cb) {
             });
         },
 
-        function listServers(ctx, next) {
-            self.progress('Finding servers for dockerlogger setup');
+        function findServersToUpdate(ctx, next) {
             // Get all servers to validate if unsetup servers are selected.
             self.sdcadm.cnapi.listServers({}, function (err, servers) {
                 if (err) {
-                    return next(err);
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
+                }
+
+                var i;
+                for (i = 0; i < servers.length; i++) {
+                    ctx.serverFromUuidOrHostname[servers[i].uuid] = servers[i];
+                    ctx.serverFromUuidOrHostname[servers[i].hostname] =
+                        servers[i];
+                }
+
+                if (opts.servers && opts.servers.length > 0) {
+                    ctx.serversToUpdate = opts.servers.map(function (s) {
+                        return ctx.serverFromUuidOrHostname[s];
+                    }).filter(function (x) {
+                        return x !== undefined && x !== null;
+                    });
+
+                    var unsetup = [];
+                    ctx.serversToUpdate.forEach(function (s) {
+                        if (!s.setup) {
+                            unsetup.push(s.uuid);
+                        }
+                    });
+
+                    if (unsetup.length) {
+                        next(new errors.UpdateError(format(
+                            'The following servers are not setup:\n%s\n' +
+                            'Please make sure to setup these servers ' +
+                            'or remove them from the list of servers to ' +
+                            'update.',
+                            unsetup.join(','))));
+                        return;
+                    }
+                } else {
+                    ctx.serversToUpdate = servers.filter(function (svr) {
+                        return svr.setup;
+                    });
                 }
-                ctx.allServers = servers;
-                ctx.serversToUpdate = ctx.allServers.filter(function (svr) {
-                    return svr.setup;
+
+                var notRunning = [];
+                ctx.serversToUpdate.forEach(function (srv) {
+                    if (srv.status !== 'running' ||
+                        (srv.status === 'running' &&
+                         srv.transitional_status !== '')) {
+                        notRunning.push(srv.uuid);
+                    }
                 });
+                if (notRunning.length) {
+                    next(new errors.UpdateError(format(
+                        'The following servers are not running:\n%s\n' +
+                        'Please make sure of these servers are running ' +
+                        'or remove them from the list of servers to ' +
+                        'update.', notRunning.join(','))));
+                    return;
+                }
+
+                next();
+            });
+        },
+
+
+        function skipServersWithDockerloggerSetup(ctx, next) {
+            self.sdcadm.sapi.listInstances({
+                service_uuid: ctx.dockerloggerSvc.uuid
+            }, function (err, insts) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+
+                if (insts.length) {
+                    var alreadySetupServers = insts.map(function (inst) {
+                        return (inst.params && inst.params.server_uuid ?
+                            inst.params.server_uuid : null);
+                    }).filter(function (x) {
+                        return (x !== null);
+                    });
+
+                    ctx.serversToUpdate =
+                        ctx.serversToUpdate.filter(function (s) {
+                        return (alreadySetupServers.indexOf(s.uuid) === -1);
+                    });
+                }
+
                 next();
             });
         },
 
         function urDiscoveryGetReady(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             self.sdcadm.getUrConnection(function (err, urconn) {
                 if (err) {
                     ctx.log.debug({
@@ -495,6 +552,10 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function urDiscovery(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             self.progress('Checking servers availability');
             common.urDiscovery({
                 sdcadm: ctx.sdcadm,
@@ -517,6 +578,10 @@ function do_docker(subcmd, opts, args, cb) {
         // TODO: Check file is not already at downloadDir from a previous
         // run (including checksum)
         function getImgFileFromLocalImgapi(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             ctx.progress('Getting image file from local imgapi');
             ctx.filepath = path.resolve(ctx.downloadDir,
             'dockerlogger-' + ctx.dockerloggerImg.uuid + '.sh');
@@ -533,6 +598,10 @@ function do_docker(subcmd, opts, args, cb) {
         // TODO: Check the file is not already in assetsdir from a
         // previous run, checksum included.
         function copyImgFileToAssets(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             var assetsdir = '/usbkey/extra/dockerlogger';
             self.progress('Copying dockerlogger to assets dir: %s', assetsdir);
             var argv = ['cp', ctx.filepath, assetsdir];
@@ -562,6 +631,10 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function updateLogger(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             self.progress('Starting dockerlogger update on %d servers',
                 ctx.urServersToUpdate.length);
             ctx.fname = path.basename(ctx.filepath);
@@ -695,6 +768,10 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function doCleanup(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             self.progress('Deleting temporary %s', ctx.filepath);
             fs.unlink(ctx.filepath, function (err) {
                 if (err) {
@@ -705,6 +782,10 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function updateSvcImage(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                next();
+                return;
+            }
             self.progress('Updating "dockerlogger" service in SAPI');
             self.sdcadm.sapi.updateService(ctx.dockerloggerSvc.uuid, {
                 params: {
@@ -729,20 +810,34 @@ do_docker.options = [
         help: 'Show this help.'
     },
     {
-        names: ['force', 'f'],
-        type: 'bool',
-        help: 'Allow update to proceed even if already at latest image.'
+        names: ['concurrency', 'j'],
+        type: 'integer',
+        'default': 5,
+        help: 'Number of concurrent servers to which to install dockerlogger' +
+            ' simultaneously. Default: 5',
+        helpArg: 'N'
+    },
+    {
+        names: ['servers', 's'],
+        type: 'arrayOfCommaSepString',
+        help: 'Comma-separate list of servers (hostname or UUID) on which ' +
+            'dockerlogger will be setup. If not specified, then ' +
+            'dockerlogger will be setup on all setup servers.'
     }
 ];
-do_docker.help = (
-    'Create the docker service and the docker instance on the headnode.\n' +
-    '\n' +
-    'Usage:\n' +
-    '     {{name}} docker\n' +
-    '\n' +
-    '{{options}}' +
-    '\n'
-);
+do_docker.help = [
+    'Setup the Docker service.',
+    '',
+    'This command will create the "docker" and "dockerlogger" services,',
+    'create the initial docker instance on the headnode, and install',
+    'dockerlogger on all setup servers (or a subset if "-s" is used).',
+    '',
+    'Usage:',
+    '     {{name}} docker',
+    '',
+    '{{options}}',
+    ''
+].join('\n');
 
 // --- exports
 
diff --git a/man/man1/sdcadm.1.ronn b/man/man1/sdcadm.1.ronn
index 58631c6..096cae2 100644
--- a/man/man1/sdcadm.1.ronn
+++ b/man/man1/sdcadm.1.ronn
@@ -477,13 +477,24 @@ fabrics and, if docker is setup, update docker config to use fabrics.
 
 ### sdcadm post-setup docker
 
-Create the docker service and the docker instance on the headnode.
+Setup the Docker service.
+
+This command will create the "docker" and "dockerlogger" services,
+create the initial docker instance on the headnode, and install
+dockerlogger on all setup servers (or a subset if "-s" is used).
+
 
 `-h, --help`
     Show this help.
 
-`-f, --force`
-    Allow update to proceed even if already at latest image.
+`-j N, --concurrency=N`
+    Number of concurrent servers to which to install dockelogger simultaneously.
+    Default: 5.
+
+`-s ARG, --servers=ARG`
+    Comma-separate list of servers (hostname or UUID) on which dockelogger will
+    be setup. If not specified, dockelogger will be setup on all setup
+    servers.
 
 
 ### sdcadm post-setup cmon
