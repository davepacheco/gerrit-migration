From 1aed1e2d5a641603c6a37bb96873418f339bf60e Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 7 Jun 2017 13:31:37 +0200
Subject: [PATCH] PAPI-141 Upgrade to Moray client v3 Reviewed by: Marsell
 Kukuljevic <marsell@joyent.com> Approved by: Marsell Kukuljevic
 <marsell@joyent.com>

---
 etc/config.test.json         |  6 -----
 lib/backend.js               | 28 +++++++--------------
 lib/papi.js                  | 31 +++++++++++++++---------
 package.json                 |  8 +++---
 sapi_manifests/papi/template |  9 +++----
 server.js                    |  4 ---
 test/api.test.js             | 47 ++++++------------------------------
 7 files changed, 44 insertions(+), 89 deletions(-)

diff --git a/etc/config.test.json b/etc/config.test.json
index 707ebc7..1e48931 100644
--- a/etc/config.test.json
+++ b/etc/config.test.json
@@ -3,12 +3,6 @@
     "logLevel": "info",
     "moray": {
         "url": "http://10.99.99.17:2020",
-        "connectTimeout": 1000,
-        "retry": {
-            "retries": 3,
-            "minTimeout": 1000
-        },
-        "noCache": true,
         "version": 6
     },
     "ufds_admin_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
diff --git a/lib/backend.js b/lib/backend.js
index f739ed3..2f68328 100644
--- a/lib/backend.js
+++ b/lib/backend.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -16,13 +16,13 @@
 var moray  = require('moray');
 var assert = require('assert');
 var util   = require('util');
-var clone  = require('clone');
+var jsprim = require('jsprim');
+var VError = require('verror');
 
 var RETRY_BUCKET_CREATION_INTERVAL = 10000; // in ms
 var DB_RESERVED_NAMES = ['default', 'group'];
 
 
-
 /*
  * Backend constructor. Returns a set of methods useful for fetching and
  * updating packages in Moray.
@@ -210,10 +210,10 @@ function (uuid, params, meta, cb) {
     var bucket  = self.bucket;
     var backend = self.backend;
     backend.getObject(bucket, uuid, function (err, obj) {
-        if (err && err.name === 'ObjectNotFoundError') {
-            return backend.putObject(bucket, uuid, pkg, meta, cb);
+        if (VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
+            backend.putObject(bucket, uuid, pkg, meta, cb);
         } else {
-            return cb(err || 'ObjectAlreadyExistsError');
+            cb(err || 'ObjectAlreadyExistsError');
         }
     });
 };
@@ -277,19 +277,9 @@ function (uuid, meta, cb) {
 
 function createMorayClient(options) {
     assert.ok(options);
-
-    return moray.createClient({
-        url: options.moray.url,
-        log: options.log.child({ component: 'moray' }),
-        dns: options.moray.dns || {},
-        noCache: true,
-        reconnect: true,
-        retry: { // try to reconnect forever
-            maxTimeout: 30000,
-            retries: Infinity
-        },
-        connectTimeout: options.moray.connectTimeout || 1000
-    });
+    var morayOptions = jsprim.deepCopy(options.moray);
+    morayOptions.log = options.log.child({ component: 'moray' });
+    return moray.createClient(morayOptions);
 }
 
 
diff --git a/lib/papi.js b/lib/papi.js
index ec86c87..a772a0b 100644
--- a/lib/papi.js
+++ b/lib/papi.js
@@ -21,6 +21,7 @@ var restify = require('restify');
 var backoff = require('backoff');
 var Logger = require('bunyan');
 var vasync = require('vasync');
+var VError = require('verror');
 var sapi = require('sdc-clients').SAPI;
 
 var Backend = require('./backend');
@@ -296,16 +297,23 @@ function listPkgs(req, res, next) {
 
     if (filter === undefined) {
         res.send(404);
-        return next();
+        next();
+        return;
     }
 
     req.backend.getPackages(filter, meta, function (err, r) {
         if (err) {
-            if (err.name !== 'InvalidQueryError')
-                return next(new restify.InternalError(err.message || err));
-
-            return next(new restify.InvalidArgumentError(
-                        'Provided search filter is not valid'));
+            if (VError.hasCauseWithName(err, 'InvalidQueryError')) {
+                next(new restify.InvalidArgumentError(
+                            'Provided search filter is not valid'));
+                return;
+            } else if (VError.hasCauseWithName(err, 'NotIndexedError')) {
+                var err2 = VError.findCauseByName(err, 'NotIndexedError');
+                next(new restify.InternalError(err2.message));
+                return;
+            }
+            next(new restify.InternalError(err.message || err));
+            return;
         }
 
         var packages = r.results;
@@ -317,10 +325,9 @@ function listPkgs(req, res, next) {
         res.header('x-resource-count',  r.total);
         res.send(200, packages);
 
-        return next();
+        next();
+        return;
     });
-
-    return null; // keep the linter happy
 }
 
 
@@ -370,7 +377,8 @@ function postPkg(req, res, next) {
             if (err === 'ObjectAlreadyExistsError') {
                 return next(new restify.ConflictError(
                             'A package with the given UUID already exists'));
-            } else if (err === 'UniqueAttributeError') {
+            } else if (err === 'UniqueAttributeError' ||
+                VError.hasCauseWithName(err, 'UniqueAttributeError')) {
                 return next(new restify.ConflictError(
                             'A package with the same URN already exists'));
             }
@@ -457,6 +465,7 @@ function getPkg(req, res, next) {
 function updatePkg(req, res, next) {
     var pkg = req.pkg;
     var params = req.params;
+    var errs;
 
     if (!pkg) {
         return next(new restify.ResourceNotFoundError('Package ' + params.uuid +
@@ -476,7 +485,7 @@ function updatePkg(req, res, next) {
 
     // prevent immutable attributes from being modified
     if (!params.force) {
-        var errs = [];
+        errs = [];
         var immutable = entries.filter(function (key) {
             return schema[key].immutable;
         }).sort();
diff --git a/package.json b/package.json
index df72bb1..b836806 100644
--- a/package.json
+++ b/package.json
@@ -11,14 +11,14 @@
   "dependencies": {
     "backoff": "2.3.0",
     "bunyan": "1.8.1",
-    "clone": "0.1.6",
     "libuuid": "0.2.1",
-    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
+    "moray": "3.1.1",
     "nopt": "2.0.0",
     "restify": "4.2.0",
     "sdc-clients": "10.0.2",
-    "sigyan": "0.2.0",
-    "vasync": "1.4.0"
+    "vasync": "1.6.4",
+    "verror": "1.10.0",
+    "jsprim": "^1.3.1"
   },
   "devDependencies": {
     "tape": "3.5.0"
diff --git a/sapi_manifests/papi/template b/sapi_manifests/papi/template
index df7159c..87d8315 100644
--- a/sapi_manifests/papi/template
+++ b/sapi_manifests/papi/template
@@ -2,13 +2,10 @@
     "port": 80,
     "logLevel": "info",
     "moray": {
-        "url": "http://{{{MORAY_SERVICE}}}:2020",
-        "connectTimeout": 1000,
-        "retry": {
-            "retries": 3,
-            "minTimeout": 1000
+        "srvDomain": "{{{MORAY_SERVICE}}}",
+        "cueballOptions": {
+            "resolvers": [ "{{{BINDER_SERVICE}}}" ]
         },
-        "noCache": true,
         "version": 6
     },
     "ufds_admin_uuid": "{{{ufds_admin_uuid}}}",
diff --git a/server.js b/server.js
index 0a2ad81..4b9639b 100644
--- a/server.js
+++ b/server.js
@@ -102,7 +102,3 @@ LOG = new Logger({
 
 // There we go!:
 run();
-
-// Increase/decrease loggers levels using SIGUSR2/SIGUSR1:
-var sigyan = require('sigyan');
-sigyan.add([LOG]);
diff --git a/test/api.test.js b/test/api.test.js
index 16cd582..07b6f13 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -22,11 +22,12 @@ var test    = require('tape').test;
 var util    = require('util');
 var Logger  = require('bunyan');
 var libuuid = require('libuuid');
+var jsprim = require('jsprim');
+var VError = require('verror');
 
 var papi = require('../lib/papi');
 
 
-
 // If we're in the papi zone, use the papi config. Otherwise assume we're on
 // someone's laptop and they're using the default COAL IP addresses.
 var cfgFile = path.resolve(__dirname, '../etc/config.json');
@@ -194,7 +195,7 @@ test('POST /packages (OK)', function (t) {
             checkDate(t, storedPkg);
             t.deepEqual(newPkg, storedPkg);
 
-            var location = res.headers['location'];
+            var location = res.headers.location;
             t.equal(location, '/packages/' + newPkg.uuid);
 
             client.get(location, function (err2, req2, res2, storedPkg2) {
@@ -275,9 +276,9 @@ test('POST /packages/:uuid (invalid package name)', function (t) {
         var expectedErrs = [
             { field: 'name',
               code: 'Invalid',
-              message: 'must match '
-                  + '/^[a-zA-Z0-9]([a-zA-Z0-9\\_\\-\\.]+)?[a-zA-Z0-9]$/ and not'
-                  + ' contain repeated \'-\', \'_\' or \'.\' characters'
+              message: 'must match ' +
+                '/^[a-zA-Z0-9]([a-zA-Z0-9\\_\\-\\.]+)?[a-zA-Z0-9]$/ and not' +
+                ' contain repeated \'-\', \'_\' or \'.\' characters'
             }
         ];
         t.deepEqual(err.body.errors, expectedErrs);
@@ -861,7 +862,7 @@ test('PUT /packages/:uuid (skip-validation)', function (t) {
 
         checkDate(t, pkg);
 
-        var newPkg = deepCopy(packages[0]);
+        var newPkg = jsprim.deepCopy(packages[0]);
         newPkg.owner_uuids = ownerUuids;
         t.deepEqual(pkg, newPkg);
 
@@ -892,7 +893,7 @@ test('PUT /packages/:uuid (OK)', function (t) {
 
         checkDate(t, pkg);
 
-        var newPkg = deepCopy(packages[0]);
+        var newPkg = jsprim.deepCopy(packages[0]);
         newPkg.owner_uuids = ownerUuids;
         delete newPkg.common_name;
         t.deepEqual(pkg, newPkg);
@@ -1124,35 +1125,3 @@ function orderPkgs(a, b) {
 function pkgName(suffix) {
     return pkgNamePrefix + suffix;
 }
-
-
-
-/*
- * Deep copies an object. This method assumes an acyclic graph.
- */
-
-function deepCopy(obj) {
-    if (typeof (obj) !== 'object')
-        return obj;
-
-    if (obj === null)
-        return null;
-
-    var clone;
-
-    if (Array.isArray(obj)) {
-      clone = [];
-
-      for (var i = obj.length - 1; i >= 0; i--) {
-        clone[i] = deepCopy(obj[i]);
-      }
-    } else {
-      clone = {};
-
-      for (i in obj) {
-        clone[i] = deepCopy(obj[i]);
-      }
-    }
-
-    return clone;
-}
-- 
2.21.0

