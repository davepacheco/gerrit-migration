From 3e8c93c3f6af853606f5a90f05ce5dd8cc45692b Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Fri, 15 Sep 2017 17:25:11 -0700
Subject: [PATCH] DOCKER-1104 support docker manifest lists

---
 CHANGES.md    |  4 ++++
 lib/docker.js | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 package.json  |  4 ++--
 3 files changed, 65 insertions(+), 3 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index a42adff..df1ad92 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # IMGAPI changelog
 
+## 4.0.10
+
+- DOCKER-1104 support docker manifest lists
+
 ## 4.0.9
 
 - IMGAPI-645 create a simple and fast imgapiadm check-files
diff --git a/lib/docker.js b/lib/docker.js
index 564d32c..7363017 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -1551,6 +1551,7 @@ function adminImportDockerImage(opts, callback) {
             name: repo,
             log: req.log,
             insecure: req._app.config.dockerRegistryInsecure,
+            acceptManifestLists: true,
             maxSchemaVersion: 2,
             username: username,
             password: password
@@ -1594,6 +1595,63 @@ function adminImportDockerImage(opts, callback) {
             });
         },
 
+        /*
+         * Handle manifest lists - select the appropriate manifest from the
+         * list of possible platforms.
+         */
+        function handleV2ManifestList(ctx, next) {
+            assert(ctx.manifestV2, 'ctx.manifestV2');
+            var manifestV2 = ctx.manifestV2;
+
+            if (manifestV2.mediaType !== drc.MEDIATYPE_MANIFEST_LIST_V2) {
+                next();
+                return;
+            }
+
+            // Note that drc.getManifest() verifies manifestV2.manifests, so
+            // this should never be triggered.
+            assert.arrayOfObject(manifestV2.manifests);
+
+            // Find the linux-amd64 manifest.
+            var match = manifestV2.manifests.find(function _maniFind(mani) {
+                var p = mani.platform;
+                return p && p.os === 'linux' && p.architecture === 'amd64';
+            });
+            if (!match) {
+                var plats = manifestV2.manifests.map(function _maniMap(mani) {
+                    return mani.platform && format('%s-%s', mani.platform.os,
+                        mani.platform.architecture) || '<unknown>';
+                });
+                next(new errors.ValidationFailedError(
+                    format('No linux-amd64 platform found in manifest list: %s',
+                        plats),
+                    [ {field: 'platform', code: 'Invalid'} ]));
+                return;
+            }
+
+            // Fetch the actual v2 manifest.
+            ctx.regClientV2.getManifest({ref: match.digest},
+                    function (err, manifest, res_, manifestStr) {
+                if (err) {
+                    next(errors.wrapErrorFromDrc(err));
+                    return;
+                }
+                log.debug({ref: match.digest, manifest: manifest},
+                    'v2.getManifest from manifest list');
+                ctx.manifestV2 = manifest;
+                ctx.manifestStr = manifestStr;
+                ctx.manifestDigest = res_.headers['docker-content-digest'];
+                if (!ctx.manifestDigest) {
+                    // Some registries (looking at you Amazon ECR) do not
+                    // provide the docker-content-digest header in the
+                    // response, so we have to calculate it.
+                    ctx.manifestDigest = drc.digestFromManifestStr(
+                        manifestStr);
+                }
+                next();
+            });
+        },
+
         /*
          * Determine if this is a private Docker image by trying the same
          * without auth. The only thing this does is determine `ctx.isPrivate`
@@ -1614,7 +1672,7 @@ function adminImportDockerImage(opts, callback) {
             delete regClientOpts.password;
             var noAuthClient;
 
-            var ref = rat.tag || rat.digest;
+            var ref = ctx.manifestDigest;
             noAuthClient = drc.createClientV2(regClientOpts);
             noAuthClient.getManifest({ref: ref}, function (err, man, res_) {
                 if (err) {
diff --git a/package.json b/package.json
index a67ae66..17d4369 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "4.0.9",
+  "version": "4.0.10",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -11,7 +11,7 @@
     "bunyan": "1.8.8",
     "cmdln": "3.2.1",
     "dashdash": "1.10.0",
-    "docker-registry-client": "3.2.9",
+    "docker-registry-client": "3.2.10",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "expiring-lru-cache": "2.1.0",
     "extsprintf": "1.2.0",
-- 
2.21.0

