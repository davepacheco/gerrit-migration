commit 71af43db34345e990e3bfe59780fbcb864a05fd8 (refs/changes/60/560/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-09-30T15:45:20-07:00 (3 years ago)
    
    TOOLS-1555 sdcnode v4 builds for the gz

diff --git a/nodeconfigs.json b/nodeconfigs.json
index 2ae477a..9e0deb9 100644
--- a/nodeconfigs.json
+++ b/nodeconfigs.json
@@ -1,4 +1,14 @@
 [
+    {
+        "// image": "sdc-minimal-multiarch-lts 15.4.1",
+        "image": "18b094b0-eb01-11e5-80c1-175dac7ddf02",
+        "version": "v4.6.0",
+        "configure_flags": "--dest-cpu=ia32 --with-dtrace",
+        "gcc_version_range": "4.9.x",
+        "rpath": "$ORIGIN/../lib",
+        "include_gcc_runtime_libs": true,
+        "build_tag": "gz"
+    },
     {
         "// image": "sdc-minimal-multiarch-lts 15.4.1",
         "image": "18b094b0-eb01-11e5-80c1-175dac7ddf02",
diff --git a/package.json b/package.json
index c5b8bfd..e5440b3 100644
--- a/package.json
+++ b/package.json
@@ -8,7 +8,8 @@
     "node >=0.6.0"
   ],
   "devDependencies": {
-    "async": "0.1"
+    "async": "0.1",
+    "semver": "5.3.0"
   },
   "license": "MPL-2.0"
 }
diff --git a/tools/build-a-node b/tools/build-a-node
index 0840812..af9788d 100755
--- a/tools/build-a-node
+++ b/tools/build-a-node
@@ -25,8 +25,15 @@
 # - version:
 # - sha: Optional. If given it overrides `version` for the 'git checkout'.
 # - configure_flags:
-# - build_env:
+# - build_env: Environment vars to pass to the `make` command to build node
 # - build_tag:
+# - gcc_version_range: A node-semver range to compare against the GCC used to
+#   build node
+# - rpath: A string to which to set the node RPATH/RUNPATH.
+# - include_gcc_runtime_libs: Include the needed libs from the GCC runtime
+#   (/opt/local/lib/gcc$major$minor/...) that are used by the built node.
+#   Commonly this is used together with `rpath=$ORIGIN/../lib` to make node
+#   able to load those libs.
 # - patch_files: Optional. A list of paths (relative to the project root)
 #   of patch files to apply.
 # - npm_version: Optional. A commitish for a special version of npm to pull in
@@ -42,6 +49,11 @@ set -o errexit
 set -o pipefail
 
 TOP=$(cd $(dirname $0)/../ >/dev/null; pwd)
+
+GCC=/opt/local/bin/gcc
+GXX=/opt/local/bin/g++
+ELFEDIT=/usr/bin/elfedit
+
 buildOpts=$1
 buildDir=$2
 buildStamp=$3
@@ -50,6 +62,18 @@ echo ""
 echo "# Build a node in $buildDir with this config:"
 echo "$buildOpts" | json
 
+# Ensure we have a particular gcc version.
+gccVersionRange=$(echo "$buildOpts" | json gcc_version_range)
+if [[ -n "$gccVersionRange" ]]; then
+    currGccVer=$($GCC --version | head -1 | awk '{print $NF}')
+    matching=$(./node_modules/.bin/semver -r "$gccVersionRange" $currGccVer || true)
+    if [[ -z "$matching" ]]; then
+        echo "build-a-node: fatal error: gcc version ($currGccVer) does not" \
+            "match the given range: $gccVersionRange" >&2
+        exit 1
+    fi
+fi
+
 if [[ -d $buildDir ]]; then
     rm -rf $buildDir
 fi
@@ -95,11 +119,32 @@ configureFlags=$(echo "$buildOpts" | json configure_flags)
 if [[ -z "$configureFlags" ]]; then
     configureFlags="--with-dtrace"
 fi
-buildEnv=$(echo "$buildOpts" | json build_env)
-eval "export $buildEnv"
 ./configure $configureFlags --prefix=$buildDir/node
-make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++
-make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++ install
+
+buildEnv=$(echo "$buildOpts" | json build_env)
+make V=1 CC=$GCC CXX=$GXX $buildEnv
+make V=1 CC=$GCC CXX=$GXX $buildEnv install
+
+# Optionally include GCC runtime libs. If a version of GCC was used to compile
+# node is greater than the version of the GCC runtime libs included in the
+# platform *and* this node build is targetted for use in the GZ, then the
+# node build needs to (a) include the needed GCC runtime libs and (b) set a
+# RUNPATH for the node binary to find them.
+#
+# See <https://github.com/joyent/rfd/tree/master/rfd/0059#problems-with-the-gz>
+# for details.
+includeGccRuntimeLibs=$(echo "$buildOpts" | json include_gcc_runtime_libs)
+if [[ -n "$includeGccRuntimeLibs" ]]; then
+    ldd ./node  | awk '{print $3}' | grep '^/opt/local/gcc' | while read lib; do
+        cp $lib $buildDir/node/lib/
+    done
+fi
+
+rpath=$(echo "$buildOpts" | json rpath)
+if [[ -n "$rpath" ]]; then
+    $ELFEDIT -e "dyn:runpath $rpath" $buildDir/node/bin/node
+fi
+
 
 # trim
 rm -rf $buildDir/node/lib/node_modules/npm/.git
diff --git a/tools/build-all-nodes b/tools/build-all-nodes
index 93a49b5..c2a9e04 100755
--- a/tools/build-all-nodes
+++ b/tools/build-all-nodes
@@ -19,7 +19,10 @@
 # to build.
 #
 
-#set -o xtrace
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
 set -o errexit
 set -o pipefail
 
