From 49fdffdd7f09de722ad4bac979eec99459329562 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 10 Dec 2018 22:28:45 -0800
Subject: [PATCH] TRITON-1027 cn-agent should have a command_execute task

---
 lib/backends/dummy/index.js                   |   1 +
 lib/backends/dummy/tasks/command_execute.js   |  53 ++++++++
 lib/backends/smartos/index.js                 |   1 +
 lib/backends/smartos/tasks/command_execute.js | 120 ++++++++++++++++++
 package.json                                  |   2 +-
 5 files changed, 176 insertions(+), 1 deletion(-)
 create mode 100644 lib/backends/dummy/tasks/command_execute.js
 create mode 100644 lib/backends/smartos/tasks/command_execute.js

diff --git a/lib/backends/dummy/index.js b/lib/backends/dummy/index.js
index 6d5a790..b678953 100644
--- a/lib/backends/dummy/index.js
+++ b/lib/backends/dummy/index.js
@@ -72,6 +72,7 @@ var queueDefns = [
     {
         name: 'server_tasks',
         tasks: [
+            'command_execute',
             'server_sysinfo_load',
             'server_update_nics'
         ]
diff --git a/lib/backends/dummy/tasks/command_execute.js b/lib/backends/dummy/tasks/command_execute.js
new file mode 100644
index 0000000..8269d48
--- /dev/null
+++ b/lib/backends/dummy/tasks/command_execute.js
@@ -0,0 +1,53 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+
+var Task = require('../../../task_agent/task');
+
+
+var CommandExecuteTask = module.exports = function (req) {
+    Task.call(this);
+    this.req = req;
+};
+
+Task.createTask(CommandExecuteTask);
+
+function start(callback) {
+    var self = this;
+    var opts = {};
+    var req = self.req;
+    var timeout;
+
+    assert.object(req, 'req');
+    assert.object(req.params, 'req.params');
+    assert.optionalArray(req.params.args, 'req.params.args');
+    assert.optionalObject(req.params.env, 'req.params.env');
+    assert.string(req.params.script, 'req.params.script');
+    assert.optionalNumber(req.params.timeout, 'req.params.timeout');
+
+    opts.log = self.log;
+    opts.req_id = self.req.req_id;
+
+    opts.log.warn({
+        params: req.params,
+        req_id: opts.req_id
+    }, 'command_execute not implemented for mockcloud servers');
+
+    // Pretend we executed the script and then got this error.
+    self.finish({
+        exitCode: 666,
+        stderr:
+            'cn-agent: command_execute not implemented for mockcloud servers\n',
+        stdout: ''
+    });
+}
+
+CommandExecuteTask.setStart(start);
diff --git a/lib/backends/smartos/index.js b/lib/backends/smartos/index.js
index cc622de..a6ff1f6 100644
--- a/lib/backends/smartos/index.js
+++ b/lib/backends/smartos/index.js
@@ -53,6 +53,7 @@ var queueDefns = [
     {
         name: 'server_tasks',
         tasks: [
+            'command_execute',
             'server_overprovision_ratio'
         ]
     },
diff --git a/lib/backends/smartos/tasks/command_execute.js b/lib/backends/smartos/tasks/command_execute.js
new file mode 100644
index 0000000..0df5e50
--- /dev/null
+++ b/lib/backends/smartos/tasks/command_execute.js
@@ -0,0 +1,120 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var child_process = require('child_process');
+var fs = require('fs');
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var Task = require('../../../task_agent/task');
+
+
+// Try to match Ur's default env for backward compat.
+var DEFAULT_ENV = {};
+var MAX_BUFFER = 5 * 1024 * 1024;
+
+
+var CommandExecuteTask = module.exports = function (req) {
+    Task.call(this);
+    this.req = req;
+};
+
+Task.createTask(CommandExecuteTask);
+
+// Generate a hex representation of a random four byte string.
+// (copied from Ur)
+function genId() {
+    return Math.floor(Math.random() * 0xffffffff).toString(16);
+}
+
+// Quick and dirty generation of tmp filenames.
+// (copied from Ur)
+function tmpFilename() {
+    return '/tmp/cnagent-' + genId();
+}
+
+// Execute a script string. Tries to work similarly to Ur's executeScript.
+function executeScript(opts, script, env, args, callback) {
+    var filename = tmpFilename();
+    var results = {};
+
+    opts.log.info('Executing script: ' + script);
+    opts.log.info('Writing file ' + filename);
+
+    vasync.pipeline({ funcs: [
+        function writeFile(_, cb) {
+            fs.writeFile(filename, script, cb);
+        },
+        function makeExecutable(_, cb) {
+            fs.chmod(filename, parseInt('0700', 8), cb);
+        },
+        function executeFile(_, cb) {
+            child_process.execFile(filename, args, {
+                env: env,
+                maxBuffer: MAX_BUFFER,
+                timeout: opts.timeout ? opts.timeout : 0
+            }, function onExec(err, stdout, stderr) {
+                results = {
+                    exitCode: err ? err.code : 0,
+                    stderr: stderr.toString(),
+                    stdout: stdout.toString()
+                };
+
+                cb(err);
+            });
+        },
+    ] }, function _executedScript(err) {
+        fs.unlink(filename, function onUnlink(unlinkErr) {
+            if (unlinkErr) {
+                opts.log.info({
+                    err: unlinkErr,
+                    filename: filename
+                }, 'Error unlinking file');
+            }
+            callback(err, results);
+        });
+    });
+}
+
+function start(callback) {
+    var self = this;
+    var opts = {};
+    var req = self.req;
+    var timeout;
+
+    assert.object(req, 'req');
+    assert.object(req.params, 'req.params');
+    assert.optionalArray(req.params.args, 'req.params.args');
+    assert.optionalObject(req.params.env, 'req.params.env');
+    assert.string(req.params.script, 'req.params.script');
+    assert.optionalNumber(req.params.timeout, 'req.params.timeout');
+
+    opts.log = self.log;
+    opts.req_id = self.req.req_id;
+
+    executeScript({
+        log: opts.log,
+        timeout: req.params.timeout
+    },
+    req.params.script,
+    req.params.env || DEFAULT_ENV,
+    req.params.args || [],
+    function _onExecute(err, results) {
+        opts.log.info({err: err, results: results}, 'executed command');
+        if (err) {
+            self.fatal('failed to execute command: ' + err.message);
+            return;
+        }
+        self.finish(results);
+    });
+}
+
+CommandExecuteTask.setStart(start);
diff --git a/package.json b/package.json
index e72951a..55b3579 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.5.1",
+  "version": "2.6.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

