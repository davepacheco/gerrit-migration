From 050519619e3d749450b3324dd808df4c30bc7afe Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 8 Feb 2019 15:07:43 -0800
Subject: [PATCH] TRITON-1035 remove undocumented and unused SAPI
 "teardown-hook" feature (drop just the tests for teardown hook for
 TRITON-1203) Reviewed by: Josh Wilsdon <josh@wilsdon.ca> Approved by: Josh
 Wilsdon <josh@wilsdon.ca>

---
 test/instances.test.js | 187 +----------------------------------------
 1 file changed, 1 insertion(+), 186 deletions(-)

diff --git a/test/instances.test.js b/test/instances.test.js
index 5298e5e..dd30284 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -1054,188 +1054,3 @@ test('create instance with NAPI networks', function (t) {
         t.end();
     });
 });
-
-
-// -- Test teardown hooks
-
-test('teardown hooks', function (t) {
-    var self = this;
-    var client = this.client;
-
-    var app_uuid = node_uuid.v4();
-    var svc_uuid = node_uuid.v4();
-
-    var inst = {};
-    inst.uuid = node_uuid.v4();
-    inst.service_uuid = svc_uuid;
-    inst.params = {};
-    inst.params.alias = common.getUniqueTestResourceName('teardown');
-    inst.params.billing_id = process.env.BILLING_ID;
-    t.ok(process.env.SAPI_TEST_IMAGE_UUID, 'process.env.SAPI_TEST_IMAGE_UUID');
-    inst.params.image_uuid = process.env.SAPI_TEST_IMAGE_UUID;
-    inst.params['teardown-hook'] = '/bin/false';
-
-    var uri_svc = '/services/' + svc_uuid;
-    var uri_inst = '/instances/' + inst.uuid;
-
-    /*
-     * In proto mode, the teardown-hook can't run (since CNAPI is
-     * unavailable), so don't run this test.
-     */
-    if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
-        t.end();
-        return;
-    }
-
-    vasync.pipeline({funcs: [
-        function (_, cb) {
-            common.createApplication({sapi: self.sapi, uuid: app_uuid}, cb);
-        },
-        function (_, cb) {
-            common.createService.call(self, app_uuid, svc_uuid, cb);
-        },
-        function (_, cb) {
-            client.post(URI, inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            /*
-             * Both destroying and reprovisioning an instance should
-             * fail when the teardown-hook fails.
-             */
-            self.client.del(uri_inst, function (err, req, res, obj) {
-                t.ok(err);
-                t.equal(res.statusCode, 500);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var uri = sprintf('/instances/%s/upgrade', inst.uuid);
-
-            var opts = {};
-            opts.image_uuid = NEW_IMAGE;
-
-            client.put(uri, opts, function (err, req, res, obj) {
-                t.ok(err);
-                t.equal(res.statusCode, 500);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            self.client.get(uri_inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var opts = {};
-            opts.params = {};
-            opts.params['teardown-hook'] = '/bin/true';
-
-            client.put(uri_inst, opts, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-
-                t.equal(obj.params['teardown-hook'],
-                    '/bin/true');
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            delete inst.params['teardown-hook'];
-
-            client.post(URI, inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var opts = {};
-            opts.params = {};
-            opts.params['teardown-hook'] = '/bin/false';
-
-            client.put(uri_svc, opts, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                t.equal(obj.params['teardown-hook'],
-                    '/bin/false');
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            /*
-             * Both destroying and reprovisioning an instance should
-             * fail when the teardown-hook fails.  Note that in this
-             * case, the instance is inheriting its teardown-hook
-             * from the service.
-             */
-            self.client.del(uri_inst, function (err, req, res, obj) {
-                t.ok(err);
-                t.equal(res.statusCode, 500);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var uri = sprintf('/instances/%s/upgrade', inst.uuid);
-
-            var opts = {};
-            opts.image_uuid = NEW_IMAGE;
-
-            client.put(uri, opts, function (err, req, res, obj) {
-                t.ok(err);
-                t.equal(res.statusCode, 500);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var opts = {};
-            opts.params = {};
-            opts.params['teardown-hook'] = '/bin/true';
-
-            client.put(uri_svc, opts, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                t.equal(obj.params['teardown-hook'],
-                    '/bin/true');
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            var uri = sprintf('/instances/%s/upgrade', inst.uuid);
-
-            var opts = {};
-            opts.image_uuid = NEW_IMAGE;
-
-            client.put(uri, opts, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            self.client.del(uri_inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 204);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            self.sapi.deleteService(svc_uuid, function (err) {
-                cb(err);
-            });
-        },
-        function (_, cb) {
-            self.sapi.deleteApplication(app_uuid, function (err) {
-                cb(err);
-            });
-        }
-    ]}, function (err, results) {
-        t.ifError(err);
-        t.end();
-    });
-});
-- 
2.21.0

