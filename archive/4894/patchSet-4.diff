commit 2ed3aa078c2ce7c55333d3443725d9af7e1e2a3a (refs/changes/94/4894/4)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-12-07T11:44:58-08:00 (10 months ago)
    
    joyent/node-zkstream#36 when dead ZKs come back to life, session attaches to wrong connection
    joyent/node-zkstream#35 auto-test ZK sometimes is slow to start up, leading to test failures

diff --git a/lib/client.js b/lib/client.js
index 4113b8e..60d428f 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -309,7 +309,10 @@ ZKClient.prototype._makeConnection = function (backend) {
 };
 
 ZKClient.prototype.currentConnection = function () {
-	return (this.getSession().getConnection());
+	var sess = this.getSession();
+	if (sess === undefined)
+		return (undefined);
+	return (sess.getConnection());
 };
 
 ZKClient.prototype.ping = function (cb) {
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index b247429..762ea93 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 module.exports = { ZKConnectionFSM: ZKConnectionFSM };
@@ -42,6 +42,7 @@ function ZKConnectionFSM(opts) {
 	this.zcf_socket = undefined;
 	this.zcf_server = opts.backend;
 	this.zcf_session = undefined;
+	this.zcf_wanted = true;
 
 	mod_fsm.FSM.call(this, 'init');
 }
@@ -52,6 +53,12 @@ ZKConnectionFSM.prototype.connect = function () {
 	this.emit('connectAsserted');
 };
 
+ZKConnectionFSM.prototype.setUnwanted = function () {
+	this.zcf_wanted = false;
+	this.zcf_log.debug('connection now unwanted');
+	this.emit('unwanted');
+};
+
 ZKConnectionFSM.prototype.close = function () {
 	if (this.isInState('closed'))
 		return;
@@ -115,6 +122,11 @@ ZKConnectionFSM.prototype.state_connecting = function (S) {
 ZKConnectionFSM.prototype.state_handshaking = function (S) {
 	var self = this;
 
+	if (!this.zcf_wanted) {
+		S.gotoState('closed');
+		return;
+	}
+
 	S.on(this.zcf_decoder, 'readable', function zkReadConnectResp() {
 		var pkt = self.zcf_decoder.read();
 		if (pkt === null)
@@ -153,6 +165,9 @@ ZKConnectionFSM.prototype.state_handshaking = function (S) {
 	S.on(this, 'destroyAsserted', function () {
 		S.gotoState('closed');
 	});
+	S.on(this, 'unwanted', function () {
+		S.gotoState('closed');
+	});
 	this.zcf_socket.pipe(this.zcf_decoder);
 	this.zcf_encoder.pipe(this.zcf_socket);
 
@@ -165,6 +180,8 @@ ZKConnectionFSM.prototype.state_handshaking = function (S) {
 	if (this.zcf_session.isAttaching()) {
 		this.zcf_log.debug('found ZKSession in state ' +
 		    this.zcf_session.getState() + ' while handshaking');
+		this.zcf_lastError = new Error('ZKSession attaching to ' +
+		    'another connection');
 		S.gotoState('error');
 		return;
 	}
diff --git a/lib/zk-session.js b/lib/zk-session.js
index 75c4472..cbc86f0 100644
--- a/lib/zk-session.js
+++ b/lib/zk-session.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 module.exports = {
@@ -41,6 +41,7 @@ function ZKSession(opts) {
 		component: 'ZKSession'
 	});
 	this.zs_collector = opts.collector;
+	this.zs_lastAttach = 0;
 
 	this.zs_lastZxid = new mod_jsbn.BigInteger('0');
 	this.zs_sessionId = new mod_jsbn.BigInteger('0');
@@ -57,7 +58,9 @@ function ZKSession(opts) {
 mod_util.inherits(ZKSession, mod_fsm.FSM);
 
 ZKSession.prototype.isAttaching = function () {
-	return (this.isInState('attaching') || this.isInState('reattaching'));
+	if (this.isInState('attaching') || this.isInState('reattaching'))
+		return (true);
+	return (false);
 };
 
 ZKSession.prototype.isAlive = function () {
@@ -191,6 +194,7 @@ ZKSession.prototype.state_attaching = function (S) {
 
 ZKSession.prototype.state_attached = function (S) {
 	var self = this;
+	self.zs_lastAttach = Date.now();
 
 	S.on(this.zs_conn, 'close', function () {
 		if (self.isAlive()) {
@@ -231,6 +235,10 @@ ZKSession.prototype.state_attached = function (S) {
 
 	S.on(this.zs_conn, 'stateChanged', function (st) {
 		if (st === 'connected') {
+			if (self.zs_oldConn !== undefined) {
+				self.zs_oldConn.destroy();
+				self.zs_oldConn = undefined;
+			}
 			self.resumeWatches();
 		}
 	});
@@ -244,6 +252,8 @@ ZKSession.prototype.state_attached = function (S) {
 
 ZKSession.prototype.state_reattaching = function (S) {
 	var self = this;
+	var curSid = new Buffer(this.zs_sessionId.toByteArray());
+	mod_assert.ok(this.zs_oldConn, 'reattaching requires oldConn');
 
 	S.on(this.zs_conn, 'packet', function (pkt) {
 		var sid = new mod_jsbn.BigInteger(pkt.sessionId);
@@ -275,10 +285,17 @@ ZKSession.prototype.state_reattaching = function (S) {
 	function revert() {
 		if (self.isAlive() &&
 		    self.zs_oldConn.isInState('connected')) {
+			self.zs_log.warn('reverted move of session %s (on ' +
+			    '(%s:%d) to new backend (%s:%d)',
+			    curSid.toString('hex'),
+			    self.zs_oldConn.zcf_server.address,
+			    self.zs_oldConn.zcf_server.port,
+			    self.zs_conn.zcf_server.address,
+			    self.zs_conn.zcf_server.port);
 			self.zs_conn = self.zs_oldConn;
 			S.gotoState('attached');
 		} else if (self.isAlive()) {
-			self.zs_oldConn.close();
+			self.zs_oldConn.destroy();
 			S.gotoState('detached');
 		} else {
 			self.zs_oldConn.close();
@@ -294,6 +311,11 @@ ZKSession.prototype.state_reattaching = function (S) {
 		S.gotoState('closing');
 	});
 
+	this.zs_log.debug('attempting to move zookeeper session %s from ' +
+	    '%s:%d to %s:%d', curSid.toString('hex'),
+	    self.zs_oldConn.zcf_server.address, self.zs_oldConn.zcf_server.port,
+	    self.zs_conn.zcf_server.address, self.zs_conn.zcf_server.port);
+
 	this.zs_conn.send({
 		protocolVersion: 0,
 		lastZxidSeen: this.zs_lastZxid,
diff --git a/package.json b/package.json
index cff100b..1e4ef23 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zkstream",
-  "version": "0.11.2",
+  "version": "0.11.3",
   "description": "",
   "repository": {
     "type": "git",
@@ -11,7 +11,7 @@
     "artedi": "1.3.0",
     "assert-plus": "^1.0.0",
     "bunyan": "^1.8.10",
-    "cueball": "^2.7.0",
+    "cueball": "^2.9.0",
     "jsbn": "^0.1.0",
     "mooremachine": "^2.0.0",
     "node-uuid": "^1.4.7",
diff --git a/test/zkserver.js b/test/zkserver.js
index f8b4bd3..d2b8b5b 100644
--- a/test/zkserver.js
+++ b/test/zkserver.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 module.exports = { ZKServer: ZKServer };
@@ -70,7 +70,9 @@ function ZKServer(opts) {
 mod_util.inherits(ZKServer, mod_fsm.FSM);
 
 ZKServer.prototype.cli = function () {
-	mod_assert.strictEqual(this.getState(), 'running');
+	if (!(this.isInState('running') || this.isInState('testing'))) {
+		throw (new Error('Invalid state for cli()'));
+	}
 
 	var opts = {};
 	opts.cwd = this.zk_tmpdir;
@@ -136,7 +138,9 @@ ZKServer.prototype.cli = function () {
 					shifted = true;
 				}
 			}
-			if (/^\[zk: localhost.*\] /.test(
+			while (output[output.length - 1] === '')
+				output.pop();
+			while (/^\[zk: localhost.*\] /.test(
 			    output[output.length - 1])) {
 				output.pop();
 			}
@@ -261,27 +265,23 @@ ZKServer.prototype.state_findkids = function (S) {
 
 ZKServer.prototype.state_testing = function (S) {
 	var self = this;
-	var cmd = this.zk_cmd.replace('zkServer', 'zkCli');
+
+	this.zk_lastError = undefined;
 
 	S.timeout(10000, function () {
-		self.zk_lastError = new Error('Timeout');
+		if (self.zk_lastError === undefined)
+			self.zk_lastError = new Error('Timeout');
 		S.gotoState('error');
 	});
 
-	S.timeout(1000, function () {
-		var kid = mod_cproc.spawn(cmd, [
-		    '-server', 'localhost:' + self.zk_server.clientPort,
-		    'ls', '/']);
-		S.on(kid, 'close', function (code) {
-			if (code === 0) {
-				S.gotoState('running');
-			} else {
-				self.zk_lastError = new Error(
-				    'Testing command exited with status ' +
-				    code);
-				S.gotoState('error');
+	S.interval(1000, function () {
+		self.cli('ls', '/', S.callback(function (err) {
+			if (err) {
+				self.zk_lastError = err;
+				return;
 			}
-		});
+			S.gotoState('running');
+		}));
 	});
 
 	S.on(self.zk_kid, 'close', function (code) {
