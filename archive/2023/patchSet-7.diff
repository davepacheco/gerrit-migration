From 2e5dbc60af7a09826a40e703bc494237f822002f Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 7 Feb 2019 00:30:33 +0000
Subject: [PATCH] TOOLS-1736 Upgrade sdc-fast-stream to node-fast v2 and other
 newer dependencies TOOLS-1735 Use ESLint in sdc-fast-stream

---
 .eslintrc                            |  25 ++
 .gitignore                           |   4 +
 .npmignore                           |   6 +
 CONTRIBUTING.md                      |  16 ++
 Makefile                             |  99 +++----
 README.md                            |  13 +-
 deps/javascriptlint                  |   2 +-
 lib/client.js                        | 379 ++++++++++++++++-----------
 lib/common.js                        |   4 +-
 lib/index.js                         |   4 +-
 lib/server.js                        | 285 +++++++++++++-------
 package.json                         |  22 +-
 test/reconnect.test.js               | 232 ++++++++++++++++
 test/run.js                          |  24 ++
 test/server.js                       |  65 +++++
 test/simple.test.js                  | 352 +++++++++++++++++++++----
 tools/jsl.node.conf                  | 138 ----------
 tools/jsstyle.conf                   |  14 +
 tools/mk/Makefile.defs               | 105 ++++++++
 tools/mk/Makefile.deps               |  87 ++++++
 tools/mk/Makefile.node.defs          | 110 ++++++++
 tools/mk/Makefile.node.targ          |  42 +++
 tools/mk/Makefile.node_deps.defs     |  43 +++
 tools/mk/Makefile.node_deps.targ     |  24 ++
 tools/mk/Makefile.node_prebuilt.defs | 159 +++++++++++
 tools/mk/Makefile.node_prebuilt.targ |  42 +++
 tools/mk/Makefile.targ               | 345 ++++++++++++++++++++++++
 27 files changed, 2136 insertions(+), 505 deletions(-)
 create mode 100644 .eslintrc
 create mode 100644 CONTRIBUTING.md
 create mode 100644 test/reconnect.test.js
 create mode 100644 test/run.js
 create mode 100644 test/server.js
 delete mode 100644 tools/jsl.node.conf
 create mode 100644 tools/jsstyle.conf
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.deps
 create mode 100644 tools/mk/Makefile.node.defs
 create mode 100644 tools/mk/Makefile.node.targ
 create mode 100644 tools/mk/Makefile.node_deps.defs
 create mode 100644 tools/mk/Makefile.node_deps.targ
 create mode 100644 tools/mk/Makefile.node_prebuilt.defs
 create mode 100644 tools/mk/Makefile.node_prebuilt.targ
 create mode 100644 tools/mk/Makefile.targ

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..59f5c04
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,25 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        // Lint:
+        "strict": [ "error", "global" ],
+
+        // Style:
+        "func-style": [ "error", "declaration" ],
+        "multiline-comment-style": [ "error", "starred-block" ]
+    }
+}
diff --git a/.gitignore b/.gitignore
index 3c3629e..85d9b17 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,5 @@
+*.log
+*.tgz
+/build
+/coverage
 node_modules
diff --git a/.npmignore b/.npmignore
index 6a9613c..a3190b5 100644
--- a/.npmignore
+++ b/.npmignore
@@ -1,6 +1,12 @@
+*.log
+*.tgz
 /.gitmodules
 /.npmignore
+/.eslintrc
+/.travis.yml
+/CONTRIBUTING.md
 /Makefile
+/build
 /coverage
 /deps
 /test
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..88ca0a5
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,16 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes. Anyone can submit changes. To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean. The "prepush" target runs the
+"check" target, which will check for linting and style errors.
+
+If you're changing something non-trivial or user-facing, you may want to submit
+an issue first.
diff --git a/Makefile b/Makefile
index 9e2d8e5..33aa118 100644
--- a/Makefile
+++ b/Makefile
@@ -5,88 +5,65 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
 # fast-messages Makefile
 #
 
-
 #
 # Tools
 #
-NODEUNIT := node_modules/nodeunit/bin/nodeunit
 NPM := npm
+ISTANBUL	:= node_modules/.bin/istanbul
+FAUCET		:= node_modules/.bin/faucet
 JS_FILES	:= $(shell find lib test -name '*.js')
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE   = $(JS_FILES)
-JSL_FLAGS  	?= --nologo --nosummary
-JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
-
+JSSTYLE_FILES	= $(JS_FILES)
+JSSTYLE_FLAGS	= -f tools/jsstyle.conf
+ESLINT_FILES	= $(JS_FILES)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_VERSION =	v4.6.1
+	NODE_PREBUILT_TAG =	zone
+	NODE_PREBUILT_IMAGE =	18b094b0-eb01-11e5-80c1-175dac7ddf02
+endif
+
+include ./tools/mk/Makefile.defs
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.defs
+else
+	NODE := node
+	NPM := $(shell which npm)
+	NPM_EXEC=$(NPM)
+endif
 
 #
 # Repo-specific targets
 #
 
-$(NODEUNIT):
+.PHONY: all
+all: $(NPM_EXEC)
 	$(NPM) install
 
+$(ISTANBUL): | $(NPM_EXEC)
+	$(NPM) install
 
-#
-# test / check targets
-#
-
-.PHONY: test
-test: $(NODEUNIT)
-	@$(NODEUNIT) --reporter tap test/*.js
-
-.PHONY: check
-check: check-jsl check-jsstyle
-	@echo check ok
-
-.PHONY: prepush
-prepush: check test
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# javascriptlint
-#
-
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
+$(FAUCET): | $(NPM_EXEC)
+	$(NPM) install
 
+CLEAN_FILES += ./node_modules/
 
 #
-# jsstyle
+# test / check targets
 #
 
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-.PHONY: check-jsl
-check-jsl: $(JSL_EXEC)
-	@$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	@$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+.PHONY: test
+test: $(ISTANBUL) $(FAUCET)
+	@$(NODE) $(ISTANBUL) cover --print none test/run.js | $(FAUCET)
+
+include ./tools/mk/Makefile.deps
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+endif
+include ./tools/mk/Makefile.targ
diff --git a/README.md b/README.md
index 3b1cd6b..7deea44 100644
--- a/README.md
+++ b/README.md
@@ -5,17 +5,18 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
 # node-fast-messages
 
-This repository is part of the Joyent SmartDataCenter project (SDC).  For
-contribution guidelines, issues, and general documentation, visit the main
-[SDC](http://github.com/joyent/sdc) project page.
+This repository is part of the Joyent Triton project. See the [contribution
+guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
+*Triton does not use GitHub PRs* -- and general documentation at the main
+[Triton project](https://github.com/joyent/triton) page.
 
 Stream event messages via node-fast. This is used for communication between
-the SDC [Firewall API](http://github.com/joyent/sdc-fwapi) and
+the Triton [Firewall API](http://github.com/joyent/sdc-fwapi) and
 [firewaller agent](http://github.com/joyent/sdc-firewaller-agent).
 
 # Repository
@@ -42,4 +43,4 @@ error, so you may need to run this multiple times while fixing.
 
 To run an individual test:
 
-    ./node_modules/.bin/nodeunit <path to test file>
+    node test/<test>.test.js
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/lib/client.js b/lib/client.js
index 5561e34..e508b71 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -5,21 +5,25 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * Stream client
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var backoff = require('backoff');
 var common = require('./common');
-var EventEmitter = require('events').EventEmitter;
-var fast = require('fast');
-var once = require('once');
-var util = require('util');
+var mod_fast = require('fast');
+var mod_mooremachine = require('mooremachine');
+var mod_net = require('net');
+var mod_util = require('util');
+
+// --- Globals
 
+var TCP_KEEPALIVE_DELAY = 10000;
 
 
 // --- StreamClient object
@@ -30,204 +34,288 @@ function StreamClient(opts) {
     this.log = opts.log;
     delete opts.log;
     this.opts = opts;
-    this.streaming = false;
 
-    EventEmitter.call(this);
+    this.attempt = 0;
+
+    this.client = null;
+    this.socket = null;
+    this.channel = null;
+
+    this.emittedConnect = false;
+    this.emittedStart = false;
+
+    mod_mooremachine.FSM.call(this, 'stopped');
 }
+mod_util.inherits(StreamClient, mod_mooremachine.FSM);
 
-util.inherits(StreamClient, EventEmitter);
 
+StreamClient.prototype.state_stopped = function stopped(S) {
+    S.validTransitions([ 'connecting' ]);
 
-StreamClient.prototype.ping = function pingServer(callback) {
-    var req = this.client.rpc('ping', {});
-    req.once('end', callback);
-    req.once('error', callback);
+    S.on(this, 'connectAsserted', function () {
+        S.gotoState('connecting');
+    });
 };
 
 
-StreamClient.prototype.start = function startStream(callback) {
+StreamClient.prototype.state_connecting = function connecting(S) {
+    S.validTransitions([ 'connected', 'connecting.error', 'closing' ]);
+
     var self = this;
-    var req = this.client.rpc('messages', {
-        client_id: this.opts.client_id,
-        version: common.VERSION
-    });
-    self.streaming = true;
-    self.serverSync = false;
-
-    function done(err) {
-        if (err) {
-            self.log.error(err, 'error from messages rpc');
-        } else {
-            self.log.info('messages rpc closed on other end');
-        }
-
-        self.client.removeAllListeners('message');
-        if (!self.serverSync) {
-            // XXX: need to remove end / error listeners here?
-            if (callback) {
-                return callback(err);
-            }
-        }
+
+    self.attempt += 1;
+    self.socket = mod_net.connect(self.opts.port, self.opts.host);
+
+    S.on(self.socket, 'connect', function onConnect() {
+        self.log.debug('fast: connected to %s after %d attempts',
+            self.opts.host, self.attempt);
+        S.gotoState('connected');
+    });
+
+    S.on(self.socket, 'error', function onConnectError(err) {
+        self.connectError = err;
+        S.gotoState('connecting.error');
+    });
+
+    S.on(this, 'closeAsserted', function onClose() {
+        S.gotoState('closing');
+    });
+};
+
+
+StreamClient.prototype.state_connecting.error = function connectingError(S) {
+    S.validTransitions([ 'connecting' ]);
+
+    var level, delay;
+    if (this.attempt === 1) {
+        level = 'info';
+        delay = 0;
+    } else if (this.attempt < 10) {
+        level = 'warn';
+        delay = 1000;
+    } else {
+        level = 'error';
+        delay = 5000;
     }
 
-    req.once('end', done);
-    req.once('error', done);
+    this.log[level]({
+        err: this.connectErr,
+        attempt: this.attempt,
+        delay: delay
+    }, 'connect attempted');
+
+    S.timeout(delay, function () {
+        S.gotoState('connecting');
+    });
+};
+
 
-    function waitForServerState(msg) {
-        req.removeListener('message', waitForServerState);
-        req.on('message', onMessage);
+StreamClient.prototype._close = function closeInternal() {
+    this.log.info('closing fast client and sockets');
 
-        self.log.info(msg, 'server state sync complete');
-        self.serverSync = true;
-        if (callback) {
-            return callback();
-        }
+    if (this.client !== null) {
+        this.client.detach();
+        this.client = null;
     }
 
-    function onMessage(msg) {
-        self.emit('message', msg);
+    if (this.socket !== null) {
+        this.socket.destroy();
+        this.socket = null;
     }
+};
+
+
+StreamClient.prototype.state_closing = function closing(S) {
+    S.validTransitions([ 'stopped' ]);
+
+    var self = this;
+
+    self._close();
+
+    setImmediate(function () {
+        self.emit('close');
+    });
 
-    req.on('message', waitForServerState);
+    S.gotoState('stopped');
 };
 
 
-StreamClient.prototype.restart = function restartStream() {
-    // XXX: if sequence numbers differ, do a sync.
-    this.start();
+StreamClient.prototype.state_restart = function restart(S) {
+    S.validTransitions([ 'connecting' ]);
+    this._close();
+    this.attempt = 0;
+    S.gotoState('connecting');
 };
 
 
-StreamClient.prototype.close = function close(callback) {
-    if (!this.client) {
+StreamClient.prototype.state_connected = function connected(S) {
+    S.validTransitions([ 'started', 'closing' ]);
+
+    var self = this;
+
+    self.socket.setKeepAlive(true, TCP_KEEPALIVE_DELAY);
+
+    self.client = new mod_fast.FastClient({
+        log: self.log,
+        nRecentRequests: 100,
+        transport: self.socket
+    });
+
+    /*
+     * If we've already emitted "connect" before, then
+     * this is a reconnect, and we can go straight to
+     * state "started".
+     */
+    if (self.emittedConnect) {
+        S.gotoState('started');
         return;
     }
 
-    this.client.close();
+    S.on(self, 'startAsserted', function () {
+        S.gotoState('started');
+    });
+
+    S.on(self, 'closeAsserted', function () {
+        S.gotoState('closing');
+    });
+
+    S.immediate(function () {
+        self.emittedConnect = true;
+        self.emit('connect');
+    });
 };
 
 
-StreamClient.prototype.connect = function connect(callback) {
-    var connOpts = { host: this.opts.host, port: this.opts.port };
-    var log = this.log;
+StreamClient.prototype.state_started = function starting(S) {
+    S.validTransitions([ 'closing', 'restart', 'started.waiting' ]);
+
     var self = this;
-    callback = once(callback);
-
-    retryConnect(this.opts, log, function connect_cb(connectErr, client) {
-        if (connectErr) {
-            log.error(connectErr, 'fast client: connection error');
-            return callback(connectErr);
-        }
-
-        client.log = log;
-
-        // node-fast has reconnect logic, so just capture that events
-        // happened, and let it handle
-        client.on('error', function (err) {
-            if (!client._deadbeef) {
-                log.error(err, 'client error');
-            }
-        });
 
-        client.on('close', function () {
-            if (!client._deadbeef) {
-                log.warn(connOpts, 'connection closed');
-            }
-        });
+    /*
+     * node-fast expects us to handle transport errors. When we get an error,
+     * restart the connection.
+     */
+    S.on(self.client, 'error', function (err) {
+        self.log.error(err, 'restarting due to connection error');
+        S.gotoState('restart');
+    });
 
-        client.on('connect', function () {
-            if (!client._deadbeef) {
-                log.info(connOpts, 'connected');
-                if (self.streaming) {
-                    self.restart();
-                }
-            }
-        });
+    self.channel = self.client.rpc({
+        rpcmethod: 'messages',
+        rpcargs: [ {
+            client_id: self.opts.client_id,
+            version: common.VERSION
+        } ],
+        log: self.log
+    });
 
-        self.client = client;
-        return callback();
+    S.on(self.channel, 'end', function () {
+        self.log.info('messages rpc closed on other end; restarting');
+        S.gotoState('restart');
     });
-};
 
+    /*
+     * Log all errors, but otherwise ignore them. This will emit when:
+     *
+     *     - Request is abandoned (user closed stream)
+     *     - Server connection dies (in which case we restart)
+     */
+    self.channel.on('error', function (err) {
+        self.log.error(err, 'error from messages rpc');
+    });
 
+    S.on(self, 'closeAsserted', function () {
+        self.channel.abandon();
+        self.channel = null;
+        S.gotoState('closing');
+    });
 
-// --- Internals
+    S.gotoState('started.waiting');
+};
 
 
+StreamClient.prototype.state_started.waiting = function waiting(S) {
+    var self = this;
 
-function retryConnect(opts, log, callback) {
-    assert.object(opts, 'options');
-    assert.func(callback, 'callback');
+    S.on(self.channel, 'data', function waitForServerState(msg) {
+        self.log.info({ state: msg }, 'server state sync complete');
+        self.serverState = msg;
 
-    callback = once(callback);
+        S.gotoState('started.ready');
+    });
+};
 
-    function _connect(_, cb) {
-        cb = once(cb);
-        var client = fast.createClient(opts);
 
-        client.on('connectAttempt', function (number, delay) {
-            var level;
-            if (number === 0) {
-                level = 'info';
-            } else if (number < 5) {
-                level = 'warn';
-            } else {
-                level = 'error';
-            }
+StreamClient.prototype.state_started.ready = function read(S) {
+    var self = this;
 
-            log[level]({ host: opts.host, attempt: number, delay: delay },
-                'connect attempted');
+    if (!self.emittedStart) {
+        self.emittedStart = true;
+        setImmediate(function () {
+            self.emit('start');
         });
+    }
 
-        client.once('connect', function onConnect() {
-            client.removeAllListeners('error');
-            cb(null, client);
-        });
+    S.on(self.channel, 'data', function onMessage(msg) {
+        self.emit('message', msg);
+    });
+};
 
-        client.once('error', function onConnectError(err) {
-            client.removeAllListeners('connect');
-            cb(err);
-        });
+
+StreamClient.prototype.ping = function pingServer(callback) {
+    var self = this;
+
+    assert.ok(!self.isInState('stopped'), 'can only ping after starting');
+    assert.func(callback, 'callback');
+
+    if (self.client === null) {
+        setImmediate(callback, new Error('stream not connected'));
+        return;
     }
 
-    var retry = backoff.call(_connect, {}, function (err, client) {
-        retry.removeAllListeners('backoff');
-        log.debug('fast: connected to %s after %d attempts',
-            opts.host, retry.getResults().length);
-        callback(err, client);
+    var req = self.client.rpc({
+        rpcmethod: 'ping',
+        rpcargs: [ {} ],
+        log: self.log
     });
 
-    retry.setStrategy(new backoff.ExponentialStrategy({
-        initialDelay: opts.minTimeout || 100,
-        maxDelay: opts.maxTimeout || 60000
-    }));
-    retry.failAfter(opts.retries || Infinity);
+    /*
+     * We don't expect to receive any data, but we need to register
+     * for the "data" event so that the stream doesn't remain paused
+     * (and therefore never calls "end").
+     */
+    req.on('data', function (r) {
+        self.log.debug({ data: r }, 'received ping data');
+    });
 
-    retry.on('backoff', function onBackoff(number, delay) {
-        var level;
-        if (number === 0) {
-            level = 'info';
-        } else if (number < 5) {
-            level = 'warn';
-        } else {
-            level = 'error';
-        }
+    req.once('end', callback);
+    req.once('error', callback);
+};
 
-        log[level]({
-            attempt: number,
-            delay: delay
-        }, 'connect attempted');
-    });
 
-    retry.start();
-}
+StreamClient.prototype.start = function startStream() {
+    assert.ok(this.isInState('connected'),
+        'client must be connected before starting');
+    this.log.info('starting stream');
+    this.emit('startAsserted');
+};
 
 
+StreamClient.prototype.close = function close() {
+    assert.ok(!this.isInState('stopped'), 'client already closed');
+    this.emit('closeAsserted');
+};
 
-// --- Exports
+
+StreamClient.prototype.connect = function connect() {
+    assert.ok(this.isInState('stopped'), 'client already started');
+    this.emit('connectAsserted');
+};
 
 
 
+// --- Exports
+
 function createClient(opts) {
     assert.object(opts, 'opts');
     assert.string(opts.host, 'opts.host');
@@ -235,12 +323,11 @@ function createClient(opts) {
     assert.number(opts.port, 'opts.port');
     assert.string(opts.client_id, 'opts.client_id');
 
-    opts.log = opts.log.child({ component: 'stream_client' });
+    opts.log = opts.log.child({ component: 'stream-client' });
     return new StreamClient(opts);
 }
 
 
-
 module.exports = {
     createClient: createClient
 };
diff --git a/lib/common.js b/lib/common.js
index f759b46..420de0a 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * Shared constants between the client and server
  */
 
+'use strict';
+
 module.exports = {
     VERSION: 1
 };
diff --git a/lib/index.js b/lib/index.js
index f4d8b7c..1365593 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * Stream client / server
  */
 
+'use strict';
+
 module.exports = {
     createClient: require('./client').createClient,
     createServer: require('./server').createServer
diff --git a/lib/server.js b/lib/server.js
index 2a91d02..664acb5 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -5,24 +5,95 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * Stream server: streams events to clients using node-fast
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var common = require('./common');
-var fast = require('fast');
-var util = require('util');
-var uuid = require('node-uuid');
+var mod_fast = require('fast');
+var mod_net = require('net');
+var mod_uuid = require('uuid');
 
 
+// --- Internal helpers
 
-// --- StreamServer object
+function isObject(obj) {
+    return (typeof (obj) === 'object') && obj !== null && !Array.isArray(obj);
+}
+
+
+// --- Endpoints
+
+function messagesHandler(server) {
+    function _messagesHandler(rpc) {
+        var argv = rpc.argv();
+        if (argv.length !== 1) {
+            rpc.fail(new Error('"messages" RPC expects one argument'));
+            return;
+        }
+
+        var opts = argv[0];
+
+        if (!isObject(opts)) {
+            server.log.info({ opts: opts }, 'unidentified client connected');
+            rpc.fail(new Error('"messages" RPC expects an options object'));
+            return;
+        }
+
+        if (typeof (opts.client_id) !== 'string') {
+            server.log.info({ opts: opts }, 'unidentified client connected');
+            rpc.fail(new Error('clients must provide their "client_id"'));
+            return;
+        }
+
+        server.addClient(opts, rpc);
+    }
+
+    return _messagesHandler;
+}
+
+
+function pingHandler(server) {
+    function _pingHandler(rpc) {
+        var argv = rpc.argv();
+        if (argv.length !== 1) {
+            rpc.fail(new Error('"ping" RPC expects one argument'));
+            return;
+        }
+
+        var opts = argv[0];
+
+        if (!isObject(opts)) {
+            server.log.info({ opts: opts }, 'client sent bad ping payload');
+            rpc.fail(new Error('"ping" RPC expects an options object'));
+            return;
+        }
+
+        if (opts.req_id && typeof (opts.req_id) !== 'string') {
+            rpc.fail(new Error('"req_id" must be a string if provided'));
+            return;
+        }
+
+        var log = server.log.child({
+            req_id: opts.req_id || mod_uuid.v1()
+        });
+
+        log.info(opts, 'server received ping');
+        rpc.end();
+    }
+
+    return _pingHandler;
+}
 
 
+// --- StreamServer object
+
 
 /**
  * StreamServer constructor
@@ -38,129 +109,144 @@ function StreamServer(opts) {
     assert.string(opts.server_id, 'opts.server_id');
     assert.object(opts.log, 'opts.log');
 
-    this.clients = {};
-    this.log = opts.log.child({ component: 'stream' });
-    this.server = fast.createServer({ log: this.log });
-    this.state = {
+    self.log = opts.log.child({ component: 'stream' });
+    self.clients = {};
+    self.state = {
         clients: [],
         server_id: opts.server_id
     };
+    self.port = null;
 
-    this.__defineGetter__('id', function () {
-        return this.state.server_id;
-    });
+    // Set up socket and listen for when it's ready
+    self.fast_socket = mod_net.createServer({ allowHalfOpen: false });
 
-    this.server.on('error', function onError(err) {
-        self.log.error(err, 'fast server error');
+    self.fast_socket.on('listening', function () {
+        self.log.info({ address: self.fast_socket.address() },
+            'fast server listening on port %d', self.port);
     });
 
-    this.server.on('clientError', function onClientError(err) {
-        self.log.error(err, 'fast client error');
+    // Set up Fast server and its endpoints
+    self.fast_server = new mod_fast.FastServer({
+        log: opts.log.child({ component: 'fast' }),
+        server: self.fast_socket
     });
 
-    this.server.on('uncaughtException', function (err) {
-        self.log.error(err, 'fast server uncaught exception');
+    self.fast_server.registerRpcMethod({
+        rpcmethod: 'messages',
+        rpchandler: messagesHandler(self)
     });
 
-    this.server.on('connection', function onConnect(sock) {
-        self.log.info('connected: ' + sock.remoteAddress);
+    self.fast_server.registerRpcMethod({
+        rpcmethod: 'ping',
+        rpchandler: pingHandler(self)
     });
 
-    this.registerHandlers();
-    this.log.info({ maxConnections: this.server.maxConnections },
+    self.log.info({ maxConnections: self.fast_socket.maxConnections },
         'fast server created');
 }
 
 
+Object.defineProperty(StreamServer.prototype, 'id', {
+    get: function () { return this.state.server_id; }
+});
+
+
 /**
- * Closes the fast server
+ * Save a new connected client, and reply to it to inform it that it can start
+ * receiving messages.
  */
-StreamServer.prototype.close = function close(port, callback) {
-    this.server.close();
+StreamServer.prototype.addClient = function addClient(opts, rpc) {
+    assert.object(rpc, 'rpc');
+    assert.object(opts, 'opts');
+    assert.string(opts.client_id, 'opts.client_id');
+
+    var clientID = opts.client_id;
+    var self = this;
+
+    // If we still have an RPC handle for this client, remove it first.
+    if (self.state.clients.indexOf(clientID) !== -1) {
+        self.log.warn('duplicate client "%s" connected', clientID);
+        self.removeClient(clientID);
+    }
+
+    self.state.clients.push(clientID);
+    self.clients[clientID] = rpc;
+
+    // Send the current server state to the client
+    if (opts.hasOwnProperty('version') && opts.version >= 1) {
+        var curState = {
+            name: 'sync',
+            last_req_id: self.state.last_req_id,
+            last_id: self.state.last_id,
+            server_id: self.state.server_id,
+            version: common.VERSION
+        };
+
+        self.log.info({ state: curState },
+            'client %s: sending current state', clientID);
+
+        rpc.write(curState);
+    }
+
+    self.log.info('client "%s" added', clientID);
 };
 
 
 /**
- * Listens on the given port
- *
- * @param port {Number} : Port number to listen on
- * @param callback {Function} `function (err)`
+ * Remove a client's RPC handle and end it so that it gets cleaned up.
  */
-StreamServer.prototype.listen = function listen(port, callback) {
-    assert.number(port, 'port');
-    this.port = port;
+StreamServer.prototype.removeClient = function removeClient(clientID) {
+    if (this.clients.hasOwnProperty(clientID)) {
+        this.clients[clientID].end();
+        delete this.clients[clientID];
+    }
 
-    return this.server.listen(port, callback);
+    var idx = this.state.clients.indexOf(clientID);
+    if (idx !== -1) {
+        this.state.clients.splice(idx, 1);
+    }
 };
 
 
 /**
- * Registers fast handlers for ping and updates
+ * Closes the fast server
  */
-StreamServer.prototype.registerHandlers = function register() {
-    var self = this;
-
-    function messagesHandler(opts, res) {
-        var clientID = opts.client_id;
-        if (!clientID) {
-            clientID = uuid.v4();
-            self.log.info('unidentified client "%s" added', clientID);
-        } else {
-            self.log.info('client "%s" added', clientID);
-        }
+StreamServer.prototype.close = function close(callback) {
+    assert.optionalFunc(callback, 'callback');
 
-        function _end(ev, err) {
-            var str = util.format('client %s: connection ended', clientID);
-            if (err) {
-                self.log.error(err, str);
+    var self = this;
 
-            } else {
-                self.log.info(str);
-            }
+    self.log.info('shutting down server');
 
-            delete self.clients[clientID];
-            self.state.clients.splice(self.state.clients.indexOf(clientID), 1);
-        }
+    for (var conn in self.clients) {
+        self.clients[conn].end();
+    }
 
-        res.connection.on('end', _end.bind(null, 'end'));
-        res.connection.on('error', _end.bind(null, 'error'));
-        res.connection.on('close', _end.bind(null, 'close'));
+    self.fast_socket.on('close', function () {
+        self.fast_server.close();
 
-        if (self.state.clients.indexOf(clientID) === -1) {
-            self.state.clients.push(clientID);
-        } else {
-            // XXX: log IP / port for the old client
-            self.log.warn('duplicate client "%s" connected', clientID);
+        if (typeof (callback) !== 'function') {
+            return;
         }
 
-        // Send the current server state to the client
-        if (opts.hasOwnProperty('version') && opts.version >= 1) {
-            var curState = {
-                name: 'sync',
-                last_req_id: self.state.last_req_id,
-                last_id: self.state.last_id,
-                server_id: self.state.server_id,
-                version: common.VERSION
-            };
-            self.log.info({ state: curState },
-                'client %s: sending current state', clientID);
-            res.write(curState);
-        }
-        self.clients[clientID] = res;
-    }
+        callback();
+    });
+    self.fast_socket.close();
+};
 
-    function pingHandler(opts, res) {
-        var log = self.log.child({
-            component: 'fast',
-            req_id: opts.req_id || uuid.v1()
-        });
 
-        log.info(opts, 'ping');
-        res.end();
-    }
+/**
+ * Listens on the given port
+ *
+ * @param port {Number} : Port number to listen on
+ * @param callback {Function} `function (err)`
+ */
+StreamServer.prototype.listen = function listen(port, callback) {
+    assert.number(port, 'port');
+    assert.func(callback, 'callback');
 
-    this.server.rpc('messages', messagesHandler);
-    this.server.rpc('ping', pingHandler);
+    this.port = port;
+    this.fast_socket.listen(port, callback);
 };
 
 
@@ -170,29 +256,38 @@ StreamServer.prototype.registerHandlers = function register() {
  * @param opts {Object} : with the following properties:
  *     - id {Number} : Sequence number of this update (Optional)
  *     - name {String} : Name of the update
- *     - value {Object} : Update data to send
+ *     - value {Any} : Update data to send
  *     - req_id {UUID} : Request UUID (Optional)
  */
 StreamServer.prototype.send = function send(opts) {
+    assert.object(opts, 'opts');
+    assert.ok(opts.value !== undefined, 'opts.value');
+    assert.string(opts.name, 'opts.name');
+    assert.optionalNumber(opts.id, 'opts.id');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+
+    var req_id = opts.req_id || mod_uuid.v1();
     var message = {
         id: opts.id,
         name: opts.name,
-        req_id: opts.req_id || uuid.v1(),
+        req_id: req_id,
         server_id: this.state.server_id,
         value: opts.value
     };
 
-    // XXX: want a way of changing this (other than log level?)
-    this.log.debug({ message : message }, 'sending message');
+    this.log.debug({
+        req_id: req_id,
+        message: message
+    }, 'sending message to clients');
 
     for (var conn in this.clients) {
         var client = this.clients[conn];
-        this.log.trace({ id: message.id, client: conn, req_id: message.req_id },
-                'sending client message');
+        this.log.trace({ req_id: req_id },
+            'sending message to client "%s"', conn);
         client.write(message);
     }
 
-    this.state.last_req_id = opts.req_id;
+    this.state.last_req_id = req_id;
     if (opts.id) {
         this.state.last_id = opts.id;
     }
diff --git a/package.json b/package.json
index 0385769..6592eac 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "fast-messages",
     "description": "stream updates to clients using node-fast",
-    "version": "1.0.1",
+    "version": "2.0.0",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
     "repository": {
@@ -9,17 +9,19 @@
         "url": "git://github.com/joyent/node-fast-messages.git"
     },
     "dependencies": {
-        "assert-plus": "0.1.4",
-        "backoff": "2.3.0",
-        "fast": "git+https://github.com/mcavage/node-fast.git#88d9786",
-        "node-uuid": "1.2.0",
-        "once": "1.1.1"
+        "assert-plus": "^1.0.0",
+        "mooremachine": "^2.2.1",
+        "fast": "^2.6.0",
+        "uuid": "3.0.0"
     },
     "devDependencies": {
-        "bunyan": "0.22.1",
-        "mockery": "1.4.0",
-        "nodeunit": "0.9.1",
-        "vasync": "1.4.0"
+        "bunyan": "1.8.9",
+        "faucet": "0.0.1",
+        "istanbul": "^0.4.0",
+        "tape": "^4.2.2",
+        "vasync": "1.4.0",
+        "eslint": "4.13.1",
+        "eslint-plugin-joyent": "~2.1.0"
     },
     "license": "MPL-2.0"
 }
diff --git a/test/reconnect.test.js b/test/reconnect.test.js
new file mode 100644
index 0000000..e9daa31
--- /dev/null
+++ b/test/reconnect.test.js
@@ -0,0 +1,232 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * Test client behaviour when server comes and goes.
+ */
+
+'use strict';
+
+var bunyan = require('bunyan');
+var mod_child = require('child_process');
+var mod_stream = require('../lib/index');
+var mod_uuid = require('uuid');
+var test = require('tape');
+
+
+// --- Globals
+
+var CLIENT1;
+var CLIENT2;
+
+var CLIENT1_UUID = mod_uuid.v4();
+var CLIENT2_UUID = mod_uuid.v4();
+
+var SERVER;
+var SERVER_NAME = mod_uuid.v4();
+var PORT = 2222;
+var MSGID = 1;
+
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
+
+
+// --- Internal helpers
+
+function startServer() {
+    SERVER = mod_child.fork('server.js', [ PORT, SERVER_NAME ], {
+        cwd: __dirname
+    });
+}
+
+
+// --- Setup
+
+test('Setup', function (t) {
+    CLIENT1 = mod_stream.createClient({
+        client_id: CLIENT1_UUID,
+        host: 'localhost',
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
+    });
+
+    CLIENT2 = mod_stream.createClient({
+        client_id: CLIENT2_UUID,
+        host: 'localhost',
+        log: LOG.child({ component: 'client2' }),
+        port: PORT
+    });
+
+    t.end();
+});
+
+
+// --- Tests
+
+
+test('Create clients, wait, and then create server', function (t) {
+    t.plan(8);
+
+    var done = 0;
+    var serverStarted = false;
+
+    var sendmsg = {
+        id: MSGID++,
+        req_id: mod_uuid.v4(),
+        name: 'hello',
+        value: {
+            a: 1,
+            b: 2,
+            c: 3
+        }
+    };
+
+    function onMsg(clNum, msg) {
+        sendmsg.server_id = SERVER_NAME;
+        t.deepEqual(msg, sendmsg, 'message is the same (' + clNum + ')');
+
+        if (++done === 2) {
+            t.end();
+            return;
+        }
+    }
+
+    CLIENT1.once('message', onMsg.bind(null, 1));
+    CLIENT1.on('connect', function (cErr) {
+        t.ifError(cErr, 'connect error');
+        t.ok(serverStarted, 'server should be started');
+        CLIENT1.on('start', function () {
+            t.pass('CLIENT1 started');
+        });
+        CLIENT1.start();
+    });
+    CLIENT1.connect();
+
+    CLIENT2.once('message', onMsg.bind(null, 2));
+    CLIENT2.on('connect', function (cErr) {
+        t.ifError(cErr, 'connect error');
+        t.ok(serverStarted, 'server should be started');
+        CLIENT2.on('start', function () {
+            t.pass('CLIENT2 started');
+        });
+        CLIENT2.start();
+    });
+    CLIENT2.connect();
+
+    setTimeout(function () {
+        serverStarted = true;
+        startServer();
+        setTimeout(function () {
+            SERVER.send(sendmsg);
+        }, 2000);
+    }, 3000);
+});
+
+
+function killAndRestart(signal) {
+    return function (t) {
+        var restarted1 = false;
+        var restarted2 = false;
+        var reconnected1 = false;
+        var reconnected2 = false;
+        var done = 0;
+
+        var sendmsg = {
+            id: MSGID++,
+            req_id: mod_uuid.v4(),
+            name: 'msg',
+            value: {
+                foo: 'bar'
+            }
+        };
+
+        function finish() {
+            if (++done === 2) {
+                t.end();
+            }
+        }
+
+        CLIENT1.once('message', function (msg) {
+            sendmsg.server_id = SERVER_NAME;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            finish();
+        });
+
+        CLIENT1.on('stateChanged', function changed1(st) {
+            if (st === 'restart') {
+                restarted1 = true;
+            } else if (st === 'connected') {
+                reconnected1 = true;
+            }
+        });
+
+        CLIENT2.once('message', function (msg) {
+            sendmsg.server_id = SERVER_NAME;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            finish();
+        });
+
+
+        CLIENT2.on('stateChanged', function changed2(st) {
+            if (st === 'restart') {
+                restarted2 = true;
+            } else if (st === 'connected') {
+                reconnected2 = true;
+            }
+        });
+
+        SERVER.on('exit', function () {
+            t.pass('server exited');
+
+            startServer();
+
+            setTimeout(function () {
+                t.ok(restarted1, 'CLIENT1 restarted');
+                t.ok(restarted2, 'CLIENT2 restarted');
+                t.ok(reconnected1, 'CLIENT1 reconnected');
+                t.ok(reconnected2, 'CLIENT2 reconnected');
+                SERVER.send(sendmsg);
+            }, 1500);
+        });
+        SERVER.kill(signal);
+    };
+}
+
+test('unexpected server restart causes clients to reconnect',
+    killAndRestart('SIGKILL'));
+
+test('graceful server restart causes clients to reconnect',
+    killAndRestart('SIGTERM'));
+
+
+// --- Teardown
+
+test('Teardown', function (t) {
+    if (CLIENT1) {
+        CLIENT1.close();
+    }
+
+    if (CLIENT2) {
+        CLIENT2.close();
+    }
+
+    if (SERVER) {
+        SERVER.kill('SIGTERM');
+    }
+
+    t.end();
+});
diff --git a/test/run.js b/test/run.js
new file mode 100644
index 0000000..276bc30
--- /dev/null
+++ b/test/run.js
@@ -0,0 +1,24 @@
+// Copyright 2014 Patrick Mooney.  All rights reserved.
+
+'use strict';
+
+var assert = require('assert');
+var fs = require('fs');
+var path = require('path');
+
+function runTests(directory) {
+    fs.readdir(directory, function (err, files) {
+        assert.ifError(err);
+        files.filter(function (f) {
+            return (/\.test\.js$/.test(f));
+        }).map(function (f) {
+            return (path.join(directory, f));
+        }).forEach(require);
+    });
+}
+
+// --- Run All Tests
+
+(function main() {
+    runTests(__dirname);
+})();
diff --git a/test/server.js b/test/server.js
new file mode 100644
index 0000000..1f52018
--- /dev/null
+++ b/test/server.js
@@ -0,0 +1,65 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * Run a fast-stream server in its own child process.
+ */
+
+'use strict';
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
+var mod_stream = require('../lib/index');
+
+var SERVER = null;
+
+function disconnect() {
+    if (SERVER !== null) {
+        SERVER.close(function () {
+            process.exit(0);
+        });
+        SERVER = null;
+    }
+}
+
+process.on('disconnect', disconnect);
+process.on('SIGTERM', disconnect);
+
+assert.string(process.argv[2], 'port provided');
+assert.string(process.argv[3], 'name provided');
+
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
+
+SERVER = mod_stream.createServer({
+    log: LOG.child({ component: 'server' }),
+    server_id: process.argv[3]
+});
+
+SERVER.listen(parseInt(process.argv[2], 10), function (lErr) {
+    if (lErr) {
+        throw lErr;
+    }
+
+    console.log('server started');
+});
+
+process.on('message', function (message) {
+    if (SERVER !== null) {
+        SERVER.send(message);
+    }
+});
diff --git a/test/simple.test.js b/test/simple.test.js
index 5e10f59..c153bdc 100644
--- a/test/simple.test.js
+++ b/test/simple.test.js
@@ -5,101 +5,176 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * Basic client / server test
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
+var mod_fast = require('fast');
+var mod_net = require('net');
 var mod_stream = require('../lib/index');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
+var test = require('tape');
 var vasync = require('vasync');
 
 
+// --- Globals
 
 var CLIENT1;
 var CLIENT2;
-var LOG_LEVEL = 'fatal';
+
+var CLIENT1_UUID = mod_uuid.v4();
+var CLIENT2_UUID = mod_uuid.v4();
+
 var SERVER;
+var HOST = 'localhost';
+var PORT = 3333;
 var TIMEOUT = 5000;
+var INVALID_PORT = 9999;
 
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
 
 
-/*
- * Create a server and a couple of clients.
+// --- Internal helpers
+
+/**
+ * Make a Fast RPC to the streaming server.
+ *
+ * Normally the StreamClient would be used to connect and receive messages,
+ * but this function allows for testing some server checks that are normally
+ * not exercised by well-behaved clients.
  */
-exports['Initial setup'] = function (t) {
-    var log = bunyan.createLogger({
-        name: 'fast-stream-test',
-        level: LOG_LEVEL
+function makeFastRequest(opts, cb) {
+    var socket = mod_net.connect(PORT, HOST);
+
+    socket.on('error', cb);
+
+    socket.on('connect', function () {
+        socket.removeListener('error', cb);
+
+        var client = new mod_fast.FastClient({
+            log: opts.log,
+            nRecentRequests: 100,
+            transport: socket
+        });
+
+        client.rpcBufferAndCallback(opts.call, function (err, data, ndata) {
+            client.detach();
+            socket.destroy();
+            cb(err, data, ndata);
+        });
     });
-    var port = 3333;
+}
+
 
+function checkFastRequestFails(t, endpoint, args, errmsg) {
+    makeFastRequest({
+        log: LOG,
+        call: {
+            rpcmethod: endpoint,
+            rpcargs: args,
+            maxObjectsToBuffer: 100
+        }
+    }, function (err, data, ndata) {
+        t.ok(err, 'should return error');
+        t.deepEqual(data, [], 'no data returned (data=[])');
+        t.deepEqual(ndata, 0, 'no data returned (ndata=0)');
+
+        if (err) {
+            t.deepEqual(err.message,
+                'request failed: server error: ' + errmsg,
+                'correct error message: ' + errmsg);
+        }
+
+        t.end();
+    });
+}
+
+
+
+// --- Tests
+
+/*
+ * Create a server and a couple of clients.
+ */
+test('Setup', function (t) {
     SERVER = mod_stream.createServer({
-        log: log.child({ component: 'server' }),
+        log: LOG.child({ component: 'server' }),
         server_id: mod_uuid.v4()
     });
+
     CLIENT1 = mod_stream.createClient({
-        client_id: mod_uuid.v4(),
-        host: 'localhost',
-        log: log.child({ component: 'client1' }),
-        port: port
+        client_id: CLIENT1_UUID,
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
     });
 
     CLIENT2 = mod_stream.createClient({
-        client_id: mod_uuid.v4(),
-        host: 'localhost',
-        log: log.child({ component: 'client2' }),
-        port: port
+        client_id: CLIENT2_UUID,
+        host: HOST,
+        log: LOG.child({ component: 'client2' }),
+        port: PORT
     });
 
     vasync.pipeline({ funcs: [
         function (_, cb) {
-            SERVER.listen(port, function (sErr) {
+            SERVER.listen(PORT, function (sErr) {
                 t.ifError(sErr, 'listen error');
-                return cb(sErr);
+                cb(sErr);
             });
-
-        // -- Client 1
-
         }, function (_, cb) {
-            CLIENT1.connect(function (cErr) {
+            CLIENT1.on('connect', function (cErr) {
                 t.ifError(cErr, 'connect error');
-                return cb(cErr);
+                cb(cErr);
             });
 
+            CLIENT1.connect();
         }, function (_, cb) {
-            CLIENT1.start(function (stErr) {
+            CLIENT1.on('start', function (stErr) {
                 t.ifError(stErr, 'start error');
-                return cb(stErr);
+                cb(stErr);
             });
 
-        // -- Client 2
-
+            CLIENT1.start();
         }, function (_, cb) {
-            CLIENT2.connect(function (cErr) {
+            CLIENT2.on('connect', function (cErr) {
                 t.ifError(cErr, 'connect error');
-                return cb(cErr);
+                cb(cErr);
             });
 
+            CLIENT2.connect();
         }, function (_, cb) {
-            CLIENT2.start(function (stErr) {
+            CLIENT2.on('start', function (stErr) {
                 t.ifError(stErr, 'start error');
-                return cb(stErr);
+                cb(stErr);
             });
+
+            CLIENT2.start();
         }
     ] }, function () {
-        return t.done();
+        t.end();
     });
-};
+});
 
 
 /*
  * Send a message from the server, and check that both clients receive it.
  */
-exports['send / receive'] = function (t) {
+test('send / receive', function (t) {
     var msg = {
         id: 4,
         req_id: mod_uuid.v4(),
@@ -109,10 +184,9 @@ exports['send / receive'] = function (t) {
     var num = 0;
 
     var tid = setTimeout(function _timedOut() {
-        t.ok(false, 'Did not receieve message in time');
+        t.fail('Did not receieve message in time');
         t.deepEqual(SERVER.state, {}, 'server state');
-
-        return t.done();
+        t.end();
     }, TIMEOUT);
 
     function eqMsg(clNum, recvMsg) {
@@ -125,18 +199,202 @@ exports['send / receive'] = function (t) {
         t.deepEqual(recvMsg, msg, 'message is the same (' + clNum + ')');
 
         if (num === 2) {
-            return t.done();
+            t.end();
+            return;
         }
     }
 
-    CLIENT1.on('message', eqMsg.bind(null, 1));
-    CLIENT2.on('message', eqMsg.bind(null, 2));
+    CLIENT1.once('message', eqMsg.bind(null, 1));
+    CLIENT2.once('message', eqMsg.bind(null, 2));
 
     SERVER.send(msg);
-};
+});
+
+
+test('ping', function (t) {
+    t.test('CLIENT1 ping', function (t2) {
+        CLIENT1.ping(function (err) {
+            t2.ifError(err, 'ping error');
+            t2.end();
+        });
+    });
+
+    t.test('CLIENT2 ping', function (t2) {
+        CLIENT2.ping(function (err) {
+            t2.ifError(err, 'ping error');
+            t2.end();
+        });
+    });
+});
+
+
+test('ping when not connected', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: INVALID_PORT
+    });
+
+    client.on('connect', function () {
+        t.fail('client should not connect');
+    });
+
+    client.on('close', function () {
+        t.end();
+    });
+
+    setImmediate(function () {
+        client.ping(function (err) {
+            t.ok(err);
+            if (err) {
+                t.deepEqual(err.message, 'stream not connected');
+            }
+            client.close();
+        });
+    });
+
+    client.connect();
+});
+
 
+test('connect and then close', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
+    });
+
+    client.on('connect', function () {
+        client.close();
+    });
+
+    client.on('close', function () {
+        t.end();
+    });
+
+    client.connect();
+});
+
+
+test('new client replaces old one', function (t) {
+    var sendmsg = {
+        id: 5,
+        req_id: mod_uuid.v4(),
+        name: 'informational',
+        value: {
+            a: 5,
+            b: '12'
+        }
+    };
+
+    CLIENT1.on('close', function () {
+        CLIENT1 = mod_stream.createClient({
+            client_id: CLIENT1_UUID,
+            host: HOST,
+            log: LOG.child({ component: 'client1' }),
+            port: PORT
+        });
+
+        CLIENT1.once('message', function (msg) {
+            sendmsg.server_id = SERVER.id;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            t.end();
+        });
+
+        CLIENT1.on('connect', function (cErr) {
+            t.ifError(cErr, 'connect error');
+            CLIENT1.on('start', function (sErr) {
+                t.ifError(sErr, 'start error');
+                setImmediate(function () {
+                    SERVER.send(sendmsg);
+                });
+            });
+            CLIENT1.start();
+        });
+
+        CLIENT1.connect();
+    });
+
+    CLIENT1.close();
+});
+
+
+test('attempt connecting to bad address and then close', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: INVALID_PORT
+    });
+
+    client.on('connect', function () {
+        t.fail('client should not connect');
+    });
 
-exports['Teardown'] = function (t) {
+    client.on('close', function () {
+        t.end();
+    });
+
+    setTimeout(function () {
+        t.ok(client.isInState('connecting'), 'in state "connecting"');
+        client.close();
+    }, 1000);
+
+    client.connect();
+});
+
+
+test('bad "messages" RPC arguments', function (t) {
+    t.test('too few arguments', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ ],
+            '"messages" RPC expects one argument');
+    });
+
+    t.test('too many arguments', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ {}, {} ],
+            '"messages" RPC expects one argument');
+    });
+
+    t.test('non-object argument', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ 'hello' ],
+            '"messages" RPC expects an options object');
+    });
+
+    t.test('non-string "client_id"', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ { client_id: 5 } ],
+            'clients must provide their "client_id"');
+    });
+});
+
+
+test('bad "ping" RPC arguments', function (t) {
+    t.test('too few arguments', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ ],
+            '"ping" RPC expects one argument');
+    });
+
+    t.test('too many arguments', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ {}, {} ],
+            '"ping" RPC expects one argument');
+    });
+
+    t.test('non-object argument', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ 'hello' ],
+            '"ping" RPC expects an options object');
+    });
+
+    t.test('non-string "req_id"', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ { req_id: 5 } ],
+            '"req_id" must be a string if provided');
+    });
+});
+
+
+// --- Teardown
+
+test('Teardown', function (t) {
     if (CLIENT1) {
         CLIENT1.close();
     }
@@ -148,4 +406,6 @@ exports['Teardown'] = function (t) {
     if (SERVER) {
         SERVER.close();
     }
-};
+
+    t.end();
+});
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
deleted file mode 100644
index 1ac15eb..0000000
--- a/tools/jsl.node.conf
+++ /dev/null
@@ -1,138 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
--inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
--no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
--useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
--always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define __dirname
-+define clearInterval
-+define clearTimeout
-+define console
-+define exports
-+define global
-+define module
-+define process
-+define require
-+define setInterval
-+define setTimeout
-+define Buffer
-+define JSON
-+define Math
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..6f09704
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,14 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+indent=2
+doxygen
+unparenthesized-return=0
+strict-indent=true
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..73dd612
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,105 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..91f8346
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,87 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..487824d
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
new file mode 100644
index 0000000..29a83f7
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.defs
@@ -0,0 +1,43 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.defs: Makefile for including npm modules whose sources
+# reside inside the repo.  This should NOT be used for modules in the npm
+# public repo or modules that could be specified with git SHAs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile takes as input the following make variable:
+#
+#    REPO_MODULES	List of relative paths to node modules (i.e., npm
+#    			packages) inside this repo.  For example:
+#    			src/node-canative, where there's a binary npm package
+#    			in src/node-canative.
+#
+# Based on the above, this Makefile defines the following new variables:
+#
+#    REPO_DEPS		List of relative paths to the installed modules.  For
+#    			example: "node_modules/canative".
+#
+# The accompanying Makefile.node_deps.targ defines a target that will install
+# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
+# The top-level Makefile is responsible for depending on REPO_DEPS where
+# appropriate (usually the "deps" or "all" target).
+#
+
+REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
+CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_deps.targ
new file mode 100644
index 0000000..bb2ab4f
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.targ
@@ -0,0 +1,24 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+
+node_modules/%: src/node-% | $(NPM_EXEC)
+	$(NPM) install $<
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..dac448a
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,345 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE   ?= $(NODE) tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+ESLINT		?= eslint
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

