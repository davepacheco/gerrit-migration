commit 0bbd6dceec1bbfa434732734a35c9f48fd2e0ac1
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-07-27T18:54:23+00:00 (2 years, 2 months ago)
    
    TOOLS-1736 Upgrade sdc-fast-stream to node-fast v2 and other newer dependencies
    TOOLS-1735 Use ESLint in sdc-fast-stream

diff --git a/.gitignore b/.gitignore
index 3c3629e..5bc92bc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
+/coverage
 node_modules
diff --git a/Makefile b/Makefile
index 9e2d8e5..1698d18 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -16,22 +16,34 @@
 #
 # Tools
 #
-NODEUNIT := node_modules/nodeunit/bin/nodeunit
 NPM := npm
+ISTANBUL	:= node_modules/.bin/istanbul
+FAUCET		:= node_modules/.bin/faucet
 JS_FILES	:= $(shell find lib test -name '*.js')
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE   = $(JS_FILES)
-JSL_FLAGS  	?= --nologo --nosummary
-JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
+JSL_CONF_NODE	= tools/jsl.node.conf
+JSL_FILES_NODE	= $(JS_FILES)
+JSL_FLAGS	?= --nologo --nosummary
+JSL_FLAGS_NODE	= --conf=$(JSL_CONF_NODE)
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
+JSSTYLE_FILES	= $(JS_FILES)
+JSSTYLE_FLAGS	= -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
 
 
 #
 # Repo-specific targets
 #
 
-$(NODEUNIT):
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install \
+	    eslint@`json -f package.json devDependencies.eslint` \
+	    eslint-plugin-joyent@`json -f package.json devDependencies.eslint-plugin-joyent`
+
+$(ISTANBUL): | $(NPM_EXEC)
+	$(NPM) install
+
+$(FAUCET): | $(NPM_EXEC)
 	$(NPM) install
 
 
@@ -40,11 +52,12 @@ $(NODEUNIT):
 #
 
 .PHONY: test
-test: $(NODEUNIT)
-	@$(NODEUNIT) --reporter tap test/*.js
+test: $(ISTANBUL) $(FAUCET)
+	@$(ISTANBUL) cover --print none test/run.js | $(FAUCET)
 
 .PHONY: check
-check: check-jsl check-jsstyle
+check: $(ESLINT) check-jsl check-jsstyle
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
 	@echo check ok
 
 .PHONY: prepush
diff --git a/README.md b/README.md
index 3b1cd6b..ff7c1c5 100644
--- a/README.md
+++ b/README.md
@@ -5,17 +5,18 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # node-fast-messages
 
-This repository is part of the Joyent SmartDataCenter project (SDC).  For
-contribution guidelines, issues, and general documentation, visit the main
-[SDC](http://github.com/joyent/sdc) project page.
+This repository is part of the Joyent Triton project. See the [contribution
+guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
+*Triton does not use GitHub PRs* -- and general documentation at the main
+[Triton project](https://github.com/joyent/triton) page.
 
 Stream event messages via node-fast. This is used for communication between
-the SDC [Firewall API](http://github.com/joyent/sdc-fwapi) and
+the Triton [Firewall API](http://github.com/joyent/sdc-fwapi) and
 [firewaller agent](http://github.com/joyent/sdc-firewaller-agent).
 
 # Repository
@@ -42,4 +43,4 @@ error, so you may need to run this multiple times while fixing.
 
 To run an individual test:
 
-    ./node_modules/.bin/nodeunit <path to test file>
+    node test/<test>.test.js
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
index 2e7616f..b9f5092 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit 2e7616f0730f0bfbd05994d60366ad5acff1e88f
+Subproject commit b9f50929ee2df140fd2d111f053b20593e068cdc
diff --git a/lib/client.js b/lib/client.js
index 5561e34..1e125b9 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -5,21 +5,25 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * Stream client
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var backoff = require('backoff');
 var common = require('./common');
-var EventEmitter = require('events').EventEmitter;
-var fast = require('fast');
-var once = require('once');
-var util = require('util');
+var mod_fast = require('fast');
+var mod_mooremachine = require('mooremachine');
+var mod_net = require('net');
+var mod_util = require('util');
+
+// --- Globals
 
+var TCP_KEEPALIVE_DELAY = 10000;
 
 
 // --- StreamClient object
@@ -30,203 +34,288 @@ function StreamClient(opts) {
     this.log = opts.log;
     delete opts.log;
     this.opts = opts;
-    this.streaming = false;
 
-    EventEmitter.call(this);
+    this.attempt = 0;
+
+    this.client = null;
+    this.socket = null;
+    this.channel = null;
+
+    this.emittedConnect = false;
+    this.emittedStart = false;
+
+    mod_mooremachine.FSM.call(this, 'stopped');
 }
 
-util.inherits(StreamClient, EventEmitter);
+mod_util.inherits(StreamClient, mod_mooremachine.FSM);
 
 
-StreamClient.prototype.ping = function pingServer(callback) {
-    var req = this.client.rpc('ping', {});
-    req.once('end', callback);
-    req.once('error', callback);
+StreamClient.prototype.state_stopped = function stopped(S) {
+    S.validTransitions([ 'connecting' ]);
+
+    S.on(this, 'connectAsserted', function () {
+        S.gotoState('connecting');
+    });
 };
 
 
-StreamClient.prototype.start = function startStream(callback) {
+StreamClient.prototype.state_connecting = function connecting(S) {
+    S.validTransitions([ 'connected', 'connecting.error', 'closing' ]);
+
     var self = this;
-    var req = this.client.rpc('messages', {
-        client_id: this.opts.client_id,
-        version: common.VERSION
-    });
-    self.streaming = true;
-    self.serverSync = false;
-
-    function done(err) {
-        if (err) {
-            self.log.error(err, 'error from messages rpc');
-        } else {
-            self.log.info('messages rpc closed on other end');
-        }
-
-        self.client.removeAllListeners('message');
-        if (!self.serverSync) {
-            // XXX: need to remove end / error listeners here?
-            if (callback) {
-                return callback(err);
-            }
-        }
+
+    self.attempt += 1;
+    self.socket = mod_net.connect(self.opts.port, self.opts.host);
+
+    S.on(self.socket, 'connect', function onConnect() {
+        self.log.debug('fast: connected to %s after %d attempts',
+            self.opts.host, self.attempt);
+        S.gotoState('connected');
+    });
+
+    S.on(self.socket, 'error', function onConnectError(err) {
+        self.connectError = err;
+        S.gotoState('connecting.error');
+    });
+
+    S.on(this, 'closeAsserted', function onClose() {
+        S.gotoState('closing');
+    });
+};
+
+
+StreamClient.prototype.state_connecting.error = function connecting(S) {
+    S.validTransitions([ 'connecting' ]);
+
+    var level, delay;
+    if (this.attempt === 1) {
+        level = 'info';
+        delay = 0;
+    } else if (this.attempt < 10) {
+        level = 'warn';
+        delay = 1000;
+    } else {
+        level = 'error';
+        delay = 5000;
     }
 
-    req.once('end', done);
-    req.once('error', done);
+    this.log[level]({
+        err: this.connectErr,
+        attempt: this.attempt,
+        delay: delay
+    }, 'connect attempted');
+
+    S.timeout(delay, function () {
+        S.gotoState('connecting');
+    });
+};
 
-    function waitForServerState(msg) {
-        req.removeListener('message', waitForServerState);
-        req.on('message', onMessage);
 
-        self.log.info(msg, 'server state sync complete');
-        self.serverSync = true;
-        if (callback) {
-            return callback();
-        }
+StreamClient.prototype._close = function closeInternal() {
+    this.log.info('closing fast client and sockets');
+
+    if (this.client !== null) {
+        this.client.detach();
+        this.client = null;
     }
 
-    function onMessage(msg) {
-        self.emit('message', msg);
+    if (this.socket !== null) {
+        this.socket.destroy();
+        this.socket = null;
     }
+};
+
+
+StreamClient.prototype.state_closing = function closing(S) {
+    S.validTransitions([ 'stopped' ]);
+
+    var self = this;
+
+    self._close();
 
-    req.on('message', waitForServerState);
+    setImmediate(function () {
+        self.emit('close');
+    });
+
+    S.gotoState('stopped');
 };
 
 
-StreamClient.prototype.restart = function restartStream() {
-    // XXX: if sequence numbers differ, do a sync.
-    this.start();
+StreamClient.prototype.state_restart = function restart(S) {
+    S.validTransitions([ 'connecting' ]);
+    this._close();
+    this.attempt = 0;
+    S.gotoState('connecting');
 };
 
 
-StreamClient.prototype.close = function close(callback) {
-    if (!this.client) {
+StreamClient.prototype.state_connected = function connected(S) {
+    S.validTransitions([ 'started', 'closing' ]);
+
+    var self = this;
+
+    self.socket.setKeepAlive(true, TCP_KEEPALIVE_DELAY);
+
+    self.client = new mod_fast.FastClient({
+        log: self.log,
+        nRecentRequests: 100,
+        transport: self.socket
+    });
+
+    /*
+     * If we've already emitted "connect" before, then
+     * this is a reconnect, and we can go straight to
+     * state "started".
+     */
+    if (self.emittedConnect) {
+        S.gotoState('started');
         return;
     }
 
-    this.client.close();
+    S.on(self, 'startAsserted', function () {
+        S.gotoState('started');
+    });
+
+    S.on(self, 'closeAsserted', function () {
+        S.gotoState('closing');
+    });
+
+    S.immediate(function () {
+        self.emittedConnect = true;
+        self.emit('connect');
+    });
 };
 
 
-StreamClient.prototype.connect = function connect(callback) {
-    var connOpts = { host: this.opts.host, port: this.opts.port };
-    var log = this.log;
+StreamClient.prototype.state_started = function starting(S) {
+    S.validTransitions([ 'closing', 'restart', 'started.waiting' ]);
+
     var self = this;
-    callback = once(callback);
-
-    retryConnect(this.opts, log, function connect_cb(connectErr, client) {
-        if (connectErr) {
-            log.error(connectErr, 'fast client: connection error');
-            return callback(connectErr);
-        }
-
-        client.log = log;
-
-        // node-fast has reconnect logic, so just capture that events
-        // happened, and let it handle
-        client.on('error', function (err) {
-            if (!client._deadbeef) {
-                log.error(err, 'client error');
-            }
-        });
 
-        client.on('close', function () {
-            if (!client._deadbeef) {
-                log.warn(connOpts, 'connection closed');
-            }
-        });
+    /*
+     * node-fast expects us to handle transport errors. When we get an error,
+     * restart the connection.
+     */
+    S.on(self.client, 'error', function (err) {
+        self.log.error(err, 'restarting due to connection error');
+        S.gotoState('restart');
+    });
 
-        client.on('connect', function () {
-            if (!client._deadbeef) {
-                log.info(connOpts, 'connected');
-                if (self.streaming) {
-                    self.restart();
-                }
-            }
-        });
+    self.channel = self.client.rpc({
+        rpcmethod: 'messages',
+        rpcargs: [ {
+            client_id: self.opts.client_id,
+            version: common.VERSION
+        } ],
+        log: self.log
+    });
 
-        self.client = client;
-        return callback();
+    S.on(self.channel, 'end', function () {
+        self.log.info('messages rpc closed on other end; restarting');
+        S.gotoState('restart');
     });
-};
 
+    /*
+     * Log all errors, but otherwise ignore them. This will emit when:
+     *
+     *     - Request is abandoned (user closed stream)
+     *     - Server connection dies (in which case we restart)
+     */
+    self.channel.on('error', function (err) {
+        self.log.error(err, 'error from messages rpc');
+    });
 
+    S.on(self, 'closeAsserted', function () {
+        self.channel.abandon();
+        self.channel = null;
+        S.gotoState('closing');
+    });
 
-// --- Internals
+    S.gotoState('started.waiting');
+};
 
 
+StreamClient.prototype.state_started.waiting = function waiting(S) {
+    var self = this;
 
-function retryConnect(opts, log, callback) {
-    assert.object(opts, 'options');
-    assert.func(callback, 'callback');
+    S.on(self.channel, 'data', function waitForServerState(msg) {
+        self.log.info({ state: msg }, 'server state sync complete');
+        self.serverState = msg;
 
-    callback = once(callback);
+        S.gotoState('started.ready');
+    });
+};
 
-    function _connect(_, cb) {
-        cb = once(cb);
-        var client = fast.createClient(opts);
 
-        client.on('connectAttempt', function (number, delay) {
-            var level;
-            if (number === 0) {
-                level = 'info';
-            } else if (number < 5) {
-                level = 'warn';
-            } else {
-                level = 'error';
-            }
+StreamClient.prototype.state_started.ready = function read(S) {
+    var self = this;
 
-            log[level]({ host: opts.host, attempt: number, delay: delay },
-                'connect attempted');
+    if (!self.emittedStart) {
+        self.emittedStart = true;
+        setImmediate(function () {
+            self.emit('start');
         });
+    }
 
-        client.once('connect', function onConnect() {
-            client.removeAllListeners('error');
-            cb(null, client);
-        });
+    S.on(self.channel, 'data', function onMessage(msg) {
+        self.emit('message', msg);
+    });
+};
 
-        client.once('error', function onConnectError(err) {
-            client.removeAllListeners('connect');
-            cb(err);
-        });
+
+StreamClient.prototype.ping = function pingServer(callback) {
+    var self = this;
+
+    assert.ok(!self.isInState('stopped'), 'can only ping after starting');
+    assert.func(callback, 'callback');
+
+    if (self.client === null) {
+        setImmediate(callback, new Error('stream not connected'));
+        return;
     }
 
-    var retry = backoff.call(_connect, {}, function (err, client) {
-        retry.removeAllListeners('backoff');
-        log.debug('fast: connected to %s after %d attempts',
-            opts.host, retry.getResults().length);
-        callback(err, client);
+    var req = self.client.rpc({
+        rpcmethod: 'ping',
+        rpcargs: [ {} ],
+        log: self.log
     });
 
-    retry.setStrategy(new backoff.ExponentialStrategy({
-        initialDelay: opts.minTimeout || 100,
-        maxDelay: opts.maxTimeout || 60000
-    }));
-    retry.failAfter(opts.retries || Infinity);
+    /*
+     * We don't expect to receive any data, but we need to register
+     * for the "data" event so that the stream doesn't remain paused
+     * (and therefore never calls "end").
+     */
+    req.on('data', function (r) {
+        self.log.debug({ data: r }, 'received ping data');
+    });
+
+    req.once('end', callback);
+    req.once('error', callback);
+};
+
 
-    retry.on('backoff', function onBackoff(number, delay) {
-        var level;
-        if (number === 0) {
-            level = 'info';
-        } else if (number < 5) {
-            level = 'warn';
-        } else {
-            level = 'error';
-        }
+StreamClient.prototype.start = function startStream() {
+    assert.ok(this.isInState('connected'),
+        'client must be connected before starting');
+    this.log.info('starting stream');
+    this.emit('startAsserted');
+};
 
-        log[level]({
-            attempt: number,
-            delay: delay
-        }, 'connect attempted');
-    });
 
-    retry.start();
-}
+StreamClient.prototype.close = function close() {
+    assert.ok(!this.isInState('stopped'), 'client already closed');
+    this.emit('closeAsserted');
+};
 
 
+StreamClient.prototype.connect = function connect() {
+    assert.ok(this.isInState('stopped'), 'client already started');
+    this.emit('connectAsserted');
+};
 
-// --- Exports
 
 
+// --- Exports
 
 function createClient(opts) {
     assert.object(opts, 'opts');
@@ -235,12 +324,11 @@ function createClient(opts) {
     assert.number(opts.port, 'opts.port');
     assert.string(opts.client_id, 'opts.client_id');
 
-    opts.log = opts.log.child({ component: 'stream_client' });
+    opts.log = opts.log.child({ component: 'stream-client' });
     return new StreamClient(opts);
 }
 
 
-
 module.exports = {
     createClient: createClient
 };
diff --git a/lib/common.js b/lib/common.js
index f759b46..18cbbd3 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * Shared constants between the client and server
  */
 
+'use strict';
+
 module.exports = {
     VERSION: 1
 };
diff --git a/lib/index.js b/lib/index.js
index f4d8b7c..822fefd 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * Stream client / server
  */
 
+'use strict';
+
 module.exports = {
     createClient: require('./client').createClient,
     createServer: require('./server').createServer
diff --git a/lib/server.js b/lib/server.js
index 2a91d02..e991b91 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -5,24 +5,95 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * Stream server: streams events to clients using node-fast
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var common = require('./common');
-var fast = require('fast');
-var util = require('util');
-var uuid = require('node-uuid');
+var mod_fast = require('fast');
+var mod_net = require('net');
+var mod_uuid = require('uuid');
 
 
+// --- Internal helpers
 
-// --- StreamServer object
+function isObject(obj) {
+    return (typeof (obj) === 'object') && obj !== null && !Array.isArray(obj);
+}
 
 
+// --- Endpoints
+
+function messagesHandler(server) {
+    function _messagesHandler(rpc) {
+        var argv = rpc.argv();
+        if (argv.length !== 1) {
+            rpc.fail(new Error('"messages" RPC expects one argument'));
+            return;
+        }
+
+        var opts = argv[0];
+
+        if (!isObject(opts)) {
+            server.log.info({ opts: opts }, 'unidentified client connected');
+            rpc.fail(new Error('"messages" RPC expects an options object'));
+            return;
+        }
+
+        if (typeof (opts.client_id) !== 'string') {
+            server.log.info({ opts: opts }, 'unidentified client connected');
+            rpc.fail(new Error('clients must provide their "client_id"'));
+            return;
+        }
+
+        server.addClient(opts, rpc);
+    }
+
+    return _messagesHandler;
+}
+
+
+function pingHandler(server) {
+    function _pingHandler(rpc) {
+        var argv = rpc.argv();
+        if (argv.length !== 1) {
+            rpc.fail(new Error('"ping" RPC expects one argument'));
+            return;
+        }
+
+        var opts = argv[0];
+
+        if (!isObject(opts)) {
+            server.log.info({ opts: opts }, 'client sent bad ping payload');
+            rpc.fail(new Error('"ping" RPC expects an options object'));
+            return;
+        }
+
+        if (opts.req_id && typeof (opts.req_id) !== 'string') {
+            rpc.fail(new Error('"req_id" must be a string if provided'));
+            return;
+        }
+
+        var log = server.log.child({
+            req_id: opts.req_id || mod_uuid.v1()
+        });
+
+        log.info(opts, 'server received ping');
+        rpc.end();
+    }
+
+    return _pingHandler;
+}
+
+
+// --- StreamServer object
+
 
 /**
  * StreamServer constructor
@@ -38,129 +109,142 @@ function StreamServer(opts) {
     assert.string(opts.server_id, 'opts.server_id');
     assert.object(opts.log, 'opts.log');
 
-    this.clients = {};
-    this.log = opts.log.child({ component: 'stream' });
-    this.server = fast.createServer({ log: this.log });
-    this.state = {
+    self.log = opts.log.child({ component: 'stream' });
+    self.clients = {};
+    self.state = {
         clients: [],
         server_id: opts.server_id
     };
+    self.port = null;
 
-    this.__defineGetter__('id', function () {
-        return this.state.server_id;
-    });
+    // Set up socket and listen for when it's ready
+    self.fast_socket = mod_net.createServer({ allowHalfOpen: false });
 
-    this.server.on('error', function onError(err) {
-        self.log.error(err, 'fast server error');
+    self.fast_socket.on('listening', function () {
+        self.log.info({ address: self.fast_socket.address() },
+            'fast server listening on port %d', self.port);
     });
 
-    this.server.on('clientError', function onClientError(err) {
-        self.log.error(err, 'fast client error');
+    // Set up Fast server and its endpoints
+    self.fast_server = new mod_fast.FastServer({
+        log: opts.log.child({ component: 'fast' }),
+        server: self.fast_socket
     });
 
-    this.server.on('uncaughtException', function (err) {
-        self.log.error(err, 'fast server uncaught exception');
+    self.fast_server.registerRpcMethod({
+        rpcmethod: 'messages',
+        rpchandler: messagesHandler(self)
     });
 
-    this.server.on('connection', function onConnect(sock) {
-        self.log.info('connected: ' + sock.remoteAddress);
+    self.fast_server.registerRpcMethod({
+        rpcmethod: 'ping',
+        rpchandler: pingHandler(self)
     });
 
-    this.registerHandlers();
-    this.log.info({ maxConnections: this.server.maxConnections },
+    self.log.info({ maxConnections: self.fast_socket.maxConnections },
         'fast server created');
 }
 
 
+Object.defineProperty(StreamServer.prototype, 'id', {
+    get: function () { return this.state.server_id; }
+});
+
+
 /**
- * Closes the fast server
+ * Save a new connected client, and reply to it to inform it that it can start
+ * receiving messages.
  */
-StreamServer.prototype.close = function close(port, callback) {
-    this.server.close();
+StreamServer.prototype.addClient = function addClient(opts, rpc) {
+    assert.object(rpc, 'rpc');
+    assert.object(opts, 'opts');
+    assert.string(opts.client_id, 'opts.client_id');
+
+    var clientID = opts.client_id;
+    var self = this;
+
+    // If we still have an RPC handle for this client, remove it first.
+    if (self.state.clients.indexOf(clientID) !== -1) {
+        self.log.warn('duplicate client "%s" connected', clientID);
+        self.removeClient(clientID);
+    }
+
+    self.state.clients.push(clientID);
+    self.clients[clientID] = rpc;
+
+    // Send the current server state to the client
+    if (opts.hasOwnProperty('version') && opts.version >= 1) {
+        var curState = {
+            name: 'sync',
+            last_req_id: self.state.last_req_id,
+            last_id: self.state.last_id,
+            server_id: self.state.server_id,
+            version: common.VERSION
+        };
+
+        self.log.info({ state: curState },
+            'client %s: sending current state', clientID);
+
+        rpc.write(curState);
+    }
+
+    self.log.info('client "%s" added', clientID);
 };
 
 
 /**
- * Listens on the given port
- *
- * @param port {Number} : Port number to listen on
- * @param callback {Function} `function (err)`
+ * Remove a client's RPC handle and end it so that it gets cleaned up.
  */
-StreamServer.prototype.listen = function listen(port, callback) {
-    assert.number(port, 'port');
-    this.port = port;
+StreamServer.prototype.removeClient = function removeClient(clientID) {
+    if (this.clients.hasOwnProperty(clientID)) {
+        this.clients[clientID].end();
+        delete this.clients[clientID];
+    }
 
-    return this.server.listen(port, callback);
+    var idx = this.state.clients.indexOf(clientID);
+    if (idx !== -1) {
+        this.state.clients.splice(idx, 1);
+    }
 };
 
 
 /**
- * Registers fast handlers for ping and updates
+ * Closes the fast server
  */
-StreamServer.prototype.registerHandlers = function register() {
-    var self = this;
-
-    function messagesHandler(opts, res) {
-        var clientID = opts.client_id;
-        if (!clientID) {
-            clientID = uuid.v4();
-            self.log.info('unidentified client "%s" added', clientID);
-        } else {
-            self.log.info('client "%s" added', clientID);
-        }
-
-        function _end(ev, err) {
-            var str = util.format('client %s: connection ended', clientID);
-            if (err) {
-                self.log.error(err, str);
+StreamServer.prototype.close = function close(callback) {
+    assert.optionalFunc(callback, 'callback');
 
-            } else {
-                self.log.info(str);
-            }
+    var self = this;
 
-            delete self.clients[clientID];
-            self.state.clients.splice(self.state.clients.indexOf(clientID), 1);
-        }
+    self.log.info('shutting down server');
 
-        res.connection.on('end', _end.bind(null, 'end'));
-        res.connection.on('error', _end.bind(null, 'error'));
-        res.connection.on('close', _end.bind(null, 'close'));
+    for (var conn in self.clients) {
+        self.clients[conn].end();
+    }
 
-        if (self.state.clients.indexOf(clientID) === -1) {
-            self.state.clients.push(clientID);
-        } else {
-            // XXX: log IP / port for the old client
-            self.log.warn('duplicate client "%s" connected', clientID);
-        }
+    self.fast_socket.on('close', function () {
+        self.fast_server.close();
 
-        // Send the current server state to the client
-        if (opts.hasOwnProperty('version') && opts.version >= 1) {
-            var curState = {
-                name: 'sync',
-                last_req_id: self.state.last_req_id,
-                last_id: self.state.last_id,
-                server_id: self.state.server_id,
-                version: common.VERSION
-            };
-            self.log.info({ state: curState },
-                'client %s: sending current state', clientID);
-            res.write(curState);
+        if (callback) {
+            callback();
         }
-        self.clients[clientID] = res;
-    }
+    });
+    self.fast_socket.close();
+};
 
-    function pingHandler(opts, res) {
-        var log = self.log.child({
-            component: 'fast',
-            req_id: opts.req_id || uuid.v1()
-        });
 
-        log.info(opts, 'ping');
-        res.end();
-    }
+/**
+ * Listens on the given port
+ *
+ * @param port {Number} : Port number to listen on
+ * @param callback {Function} `function (err)`
+ */
+StreamServer.prototype.listen = function listen(port, callback) {
+    assert.number(port, 'port');
+    assert.func(callback, 'callback');
 
-    this.server.rpc('messages', messagesHandler);
-    this.server.rpc('ping', pingHandler);
+    this.port = port;
+    this.fast_socket.listen(port, callback);
 };
 
 
@@ -170,29 +254,38 @@ StreamServer.prototype.registerHandlers = function register() {
  * @param opts {Object} : with the following properties:
  *     - id {Number} : Sequence number of this update (Optional)
  *     - name {String} : Name of the update
- *     - value {Object} : Update data to send
+ *     - value {Any} : Update data to send
  *     - req_id {UUID} : Request UUID (Optional)
  */
 StreamServer.prototype.send = function send(opts) {
+    assert.object(opts, 'opts');
+    assert.ok(opts.value !== undefined, 'opts.value');
+    assert.string(opts.name, 'opts.name');
+    assert.optionalNumber(opts.id, 'opts.id');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+
+    var req_id = opts.req_id || mod_uuid.v1();
     var message = {
         id: opts.id,
         name: opts.name,
-        req_id: opts.req_id || uuid.v1(),
+        req_id: req_id,
         server_id: this.state.server_id,
         value: opts.value
     };
 
-    // XXX: want a way of changing this (other than log level?)
-    this.log.debug({ message : message }, 'sending message');
+    this.log.debug({
+        req_id: req_id,
+        message: message
+    }, 'sending message to clients');
 
     for (var conn in this.clients) {
         var client = this.clients[conn];
-        this.log.trace({ id: message.id, client: conn, req_id: message.req_id },
-                'sending client message');
+        this.log.trace({ req_id: req_id },
+            'sending message to client "%s"', conn);
         client.write(message);
     }
 
-    this.state.last_req_id = opts.req_id;
+    this.state.last_req_id = req_id;
     if (opts.id) {
         this.state.last_id = opts.id;
     }
diff --git a/package.json b/package.json
index 0385769..c29a434 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "fast-messages",
     "description": "stream updates to clients using node-fast",
-    "version": "1.0.1",
+    "version": "2.0.0",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
     "repository": {
@@ -9,17 +9,19 @@
         "url": "git://github.com/joyent/node-fast-messages.git"
     },
     "dependencies": {
-        "assert-plus": "0.1.4",
-        "backoff": "2.3.0",
-        "fast": "git+https://github.com/mcavage/node-fast.git#88d9786",
-        "node-uuid": "1.2.0",
-        "once": "1.1.1"
+        "assert-plus": "1.0.0",
+        "mooremachine": "2.1.0",
+        "fast": "2.2.3",
+        "uuid": "3.0.0"
     },
     "devDependencies": {
-        "bunyan": "0.22.1",
-        "mockery": "1.4.0",
-        "nodeunit": "0.9.1",
-        "vasync": "1.4.0"
+        "bunyan": "1.8.9",
+        "faucet": "0.0.1",
+        "istanbul": "^0.4.0",
+        "tape": "^4.2.2",
+        "vasync": "1.4.0",
+        "eslint": "2.13.1",
+        "eslint-plugin-joyent": "1.1.0"
     },
     "license": "MPL-2.0"
 }
diff --git a/test/reconnect.test.js b/test/reconnect.test.js
new file mode 100644
index 0000000..2803d79
--- /dev/null
+++ b/test/reconnect.test.js
@@ -0,0 +1,232 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Test client behaviour when server comes and goes.
+ */
+
+'use strict';
+
+var bunyan = require('bunyan');
+var mod_child = require('child_process');
+var mod_stream = require('../lib/index');
+var mod_uuid = require('uuid');
+var test = require('tape');
+
+
+// --- Globals
+
+var CLIENT1;
+var CLIENT2;
+
+var CLIENT1_UUID = mod_uuid.v4();
+var CLIENT2_UUID = mod_uuid.v4();
+
+var SERVER;
+var SERVER_NAME = mod_uuid.v4();
+var PORT = 2222;
+var MSGID = 1;
+
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
+
+
+// --- Internal helpers
+
+function startServer() {
+    SERVER = mod_child.fork('server.js', [ PORT, SERVER_NAME ], {
+        cwd: __dirname
+    });
+}
+
+
+// --- Setup
+
+test('Setup', function (t) {
+    CLIENT1 = mod_stream.createClient({
+        client_id: CLIENT1_UUID,
+        host: 'localhost',
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
+    });
+
+    CLIENT2 = mod_stream.createClient({
+        client_id: CLIENT2_UUID,
+        host: 'localhost',
+        log: LOG.child({ component: 'client2' }),
+        port: PORT
+    });
+
+    t.end();
+});
+
+
+// --- Tests
+
+
+test('Create clients, wait, and then create server', function (t) {
+    t.plan(8);
+
+    var done = 0;
+    var serverStarted = false;
+
+    var sendmsg = {
+        id: MSGID++,
+        req_id: mod_uuid.v4(),
+        name: 'hello',
+        value: {
+            a: 1,
+            b: 2,
+            c: 3
+        }
+    };
+
+    function onMsg(clNum, msg) {
+        sendmsg.server_id = SERVER_NAME;
+        t.deepEqual(msg, sendmsg, 'message is the same (' + clNum + ')');
+
+        if (++done === 2) {
+            t.end();
+            return;
+        }
+    }
+
+    CLIENT1.once('message', onMsg.bind(null, 1));
+    CLIENT1.on('connect', function (cErr) {
+        t.ifError(cErr, 'connect error');
+        t.ok(serverStarted, 'server should be started');
+        CLIENT1.on('start', function () {
+            t.pass('CLIENT1 started');
+        });
+        CLIENT1.start();
+    });
+    CLIENT1.connect();
+
+    CLIENT2.once('message', onMsg.bind(null, 2));
+    CLIENT2.on('connect', function (cErr) {
+        t.ifError(cErr, 'connect error');
+        t.ok(serverStarted, 'server should be started');
+        CLIENT2.on('start', function () {
+            t.pass('CLIENT2 started');
+        });
+        CLIENT2.start();
+    });
+    CLIENT2.connect();
+
+    setTimeout(function () {
+        serverStarted = true;
+        startServer();
+        setTimeout(function () {
+            SERVER.send(sendmsg);
+        }, 2000);
+    }, 3000);
+});
+
+
+function killAndRestart(signal) {
+    return function (t) {
+        var restarted1 = false;
+        var restarted2 = false;
+        var reconnected1 = false;
+        var reconnected2 = false;
+        var done = 0;
+
+        var sendmsg = {
+            id: MSGID++,
+            req_id: mod_uuid.v4(),
+            name: 'msg',
+            value: {
+                foo: 'bar'
+            }
+        };
+
+        function finish() {
+            if (++done === 2) {
+                t.end();
+            }
+        }
+
+        CLIENT1.once('message', function (msg) {
+            sendmsg.server_id = SERVER_NAME;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            finish();
+        });
+
+        CLIENT1.on('stateChanged', function changed1(st) {
+            if (st === 'restart') {
+                restarted1 = true;
+            } else if (st === 'connected') {
+                reconnected1 = true;
+            }
+        });
+
+        CLIENT2.once('message', function (msg) {
+            sendmsg.server_id = SERVER_NAME;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            finish();
+        });
+
+
+        CLIENT2.on('stateChanged', function changed2(st) {
+            if (st === 'restart') {
+                restarted2 = true;
+            } else if (st === 'connected') {
+                reconnected2 = true;
+            }
+        });
+
+        SERVER.on('exit', function () {
+            t.pass('server exited');
+
+            startServer();
+
+            setTimeout(function () {
+                t.ok(restarted1, 'CLIENT1 restarted');
+                t.ok(restarted2, 'CLIENT2 restarted');
+                t.ok(reconnected1, 'CLIENT1 reconnected');
+                t.ok(reconnected2, 'CLIENT2 reconnected');
+                SERVER.send(sendmsg);
+            }, 1500);
+        });
+        SERVER.kill(signal);
+    };
+}
+
+test('unexpected server restart causes clients to reconnect',
+    killAndRestart('SIGKILL'));
+
+test('graceful server restart causes clients to reconnect',
+    killAndRestart('SIGTERM'));
+
+
+// --- Teardown
+
+test('Teardown', function (t) {
+    if (CLIENT1) {
+        CLIENT1.close();
+    }
+
+    if (CLIENT2) {
+        CLIENT2.close();
+    }
+
+    if (SERVER) {
+        SERVER.kill('SIGTERM');
+    }
+
+    t.end();
+});
diff --git a/test/run.js b/test/run.js
new file mode 100644
index 0000000..276bc30
--- /dev/null
+++ b/test/run.js
@@ -0,0 +1,24 @@
+// Copyright 2014 Patrick Mooney.  All rights reserved.
+
+'use strict';
+
+var assert = require('assert');
+var fs = require('fs');
+var path = require('path');
+
+function runTests(directory) {
+    fs.readdir(directory, function (err, files) {
+        assert.ifError(err);
+        files.filter(function (f) {
+            return (/\.test\.js$/.test(f));
+        }).map(function (f) {
+            return (path.join(directory, f));
+        }).forEach(require);
+    });
+}
+
+// --- Run All Tests
+
+(function main() {
+    runTests(__dirname);
+})();
diff --git a/test/server.js b/test/server.js
new file mode 100644
index 0000000..c95877f
--- /dev/null
+++ b/test/server.js
@@ -0,0 +1,65 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Run a fast-stream server in its own child process.
+ */
+
+'use strict';
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
+var mod_stream = require('../lib/index');
+
+var SERVER = null;
+
+function disconnect() {
+    if (SERVER !== null) {
+        SERVER.close(function () {
+            process.exit(0);
+        });
+        SERVER = null;
+    }
+}
+
+process.on('disconnect', disconnect);
+process.on('SIGTERM', disconnect);
+
+assert.string(process.argv[2], 'port provided');
+assert.string(process.argv[3], 'name provided');
+
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
+
+SERVER = mod_stream.createServer({
+    log: LOG.child({ component: 'server' }),
+    server_id: process.argv[3]
+});
+
+SERVER.listen(parseInt(process.argv[2], 10), function (lErr) {
+    if (lErr) {
+        throw lErr;
+    }
+
+    console.log('server started');
+});
+
+process.on('message', function (message) {
+    if (SERVER !== null) {
+        SERVER.send(message);
+    }
+});
diff --git a/test/simple.test.js b/test/simple.test.js
index 5e10f59..6cf4e24 100644
--- a/test/simple.test.js
+++ b/test/simple.test.js
@@ -5,59 +5,134 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * Basic client / server test
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
+var mod_fast = require('fast');
+var mod_net = require('net');
 var mod_stream = require('../lib/index');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
+var test = require('tape');
 var vasync = require('vasync');
 
 
+// --- Globals
 
 var CLIENT1;
 var CLIENT2;
-var LOG_LEVEL = 'fatal';
+
+var CLIENT1_UUID = mod_uuid.v4();
+var CLIENT2_UUID = mod_uuid.v4();
+
 var SERVER;
+var HOST = 'localhost';
+var PORT = 3333;
 var TIMEOUT = 5000;
+var INVALID_PORT = 9999;
 
+var LOG_LEVEL = process.env.LOG_LEVEL || 'fatal';
+var LOG = bunyan.createLogger({
+    name: 'fast-stream-test',
+    src: true,
+    streams: [ {
+        stream: process.stderr,
+        level: LOG_LEVEL
+    } ]
+});
 
 
-/*
- * Create a server and a couple of clients.
+// --- Internal helpers
+
+/**
+ * Make a Fast RPC to the streaming server.
+ *
+ * Normally the StreamClient would be used to connect and receive messages,
+ * but this function allows for testing some server checks that are normally
+ * not exercised by well-behaved clients.
  */
-exports['Initial setup'] = function (t) {
-    var log = bunyan.createLogger({
-        name: 'fast-stream-test',
-        level: LOG_LEVEL
+function makeFastRequest(opts, cb) {
+    var socket = mod_net.connect(PORT, HOST);
+
+    socket.on('error', cb);
+
+    socket.on('connect', function () {
+        socket.removeListener('error', cb);
+
+        var client = new mod_fast.FastClient({
+            log: opts.log,
+            nRecentRequests: 100,
+            transport: socket
+        });
+
+        client.rpcBufferAndCallback(opts.call, function (err, data, ndata) {
+            client.detach();
+            socket.destroy();
+            cb(err, data, ndata);
+        });
     });
-    var port = 3333;
+}
+
 
+function checkFastRequestFails(t, endpoint, args, errmsg) {
+    makeFastRequest({
+        log: LOG,
+        call: {
+            rpcmethod: endpoint,
+            rpcargs: args,
+            maxObjectsToBuffer: 100
+        }
+    }, function (err, data, ndata) {
+        t.ok(err, 'should return error');
+        t.deepEqual(data, [], 'no data returned (data=[])');
+        t.deepEqual(ndata, 0, 'no data returned (ndata=0)');
+
+        if (err) {
+            t.deepEqual(err.message,
+                'request failed: server error: ' + errmsg,
+                'correct error message: ' + errmsg);
+        }
+
+        t.end();
+    });
+}
+
+
+
+// --- Tests
+
+/*
+ * Create a server and a couple of clients.
+ */
+test('Setup', function (t) {
     SERVER = mod_stream.createServer({
-        log: log.child({ component: 'server' }),
+        log: LOG.child({ component: 'server' }),
         server_id: mod_uuid.v4()
     });
+
     CLIENT1 = mod_stream.createClient({
-        client_id: mod_uuid.v4(),
-        host: 'localhost',
-        log: log.child({ component: 'client1' }),
-        port: port
+        client_id: CLIENT1_UUID,
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
     });
 
     CLIENT2 = mod_stream.createClient({
-        client_id: mod_uuid.v4(),
-        host: 'localhost',
-        log: log.child({ component: 'client2' }),
-        port: port
+        client_id: CLIENT2_UUID,
+        host: HOST,
+        log: LOG.child({ component: 'client2' }),
+        port: PORT
     });
 
     vasync.pipeline({ funcs: [
         function (_, cb) {
-            SERVER.listen(port, function (sErr) {
+            SERVER.listen(PORT, function (sErr) {
                 t.ifError(sErr, 'listen error');
                 return cb(sErr);
             });
@@ -65,41 +140,44 @@ exports['Initial setup'] = function (t) {
         // -- Client 1
 
         }, function (_, cb) {
-            CLIENT1.connect(function (cErr) {
+            CLIENT1.on('connect', function (cErr) {
                 t.ifError(cErr, 'connect error');
-                return cb(cErr);
+                cb(cErr);
             });
-
+            CLIENT1.connect();
         }, function (_, cb) {
-            CLIENT1.start(function (stErr) {
+            CLIENT1.on('start', function (stErr) {
                 t.ifError(stErr, 'start error');
-                return cb(stErr);
+                cb(stErr);
             });
+            CLIENT1.start();
 
         // -- Client 2
 
         }, function (_, cb) {
-            CLIENT2.connect(function (cErr) {
+            CLIENT2.on('connect', function (cErr) {
                 t.ifError(cErr, 'connect error');
-                return cb(cErr);
+                cb(cErr);
             });
+            CLIENT2.connect();
 
         }, function (_, cb) {
-            CLIENT2.start(function (stErr) {
+            CLIENT2.on('start', function (stErr) {
                 t.ifError(stErr, 'start error');
-                return cb(stErr);
+                cb(stErr);
             });
+            CLIENT2.start();
         }
     ] }, function () {
-        return t.done();
+        t.end();
     });
-};
+});
 
 
 /*
  * Send a message from the server, and check that both clients receive it.
  */
-exports['send / receive'] = function (t) {
+test('send / receive', function (t) {
     var msg = {
         id: 4,
         req_id: mod_uuid.v4(),
@@ -109,10 +187,9 @@ exports['send / receive'] = function (t) {
     var num = 0;
 
     var tid = setTimeout(function _timedOut() {
-        t.ok(false, 'Did not receieve message in time');
+        t.fail('Did not receieve message in time');
         t.deepEqual(SERVER.state, {}, 'server state');
-
-        return t.done();
+        t.end();
     }, TIMEOUT);
 
     function eqMsg(clNum, recvMsg) {
@@ -125,18 +202,202 @@ exports['send / receive'] = function (t) {
         t.deepEqual(recvMsg, msg, 'message is the same (' + clNum + ')');
 
         if (num === 2) {
-            return t.done();
+            t.end();
+            return;
         }
     }
 
-    CLIENT1.on('message', eqMsg.bind(null, 1));
-    CLIENT2.on('message', eqMsg.bind(null, 2));
+    CLIENT1.once('message', eqMsg.bind(null, 1));
+    CLIENT2.once('message', eqMsg.bind(null, 2));
 
     SERVER.send(msg);
-};
+});
+
+
+test('ping', function (t) {
+    t.test('CLIENT1 ping', function (t2) {
+        CLIENT1.ping(function (err) {
+            t2.ifError(err, 'ping error');
+            t2.end();
+        });
+    });
+
+    t.test('CLIENT2 ping', function (t2) {
+        CLIENT2.ping(function (err) {
+            t2.ifError(err, 'ping error');
+            t2.end();
+        });
+    });
+});
+
+
+test('ping when not connected', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: INVALID_PORT
+    });
+
+    client.on('connect', function () {
+        t.fail('client should not connect');
+    });
+
+    client.on('close', function () {
+        t.end();
+    });
 
+    setImmediate(function () {
+        client.ping(function (err) {
+            t.ok(err);
+            if (err) {
+                t.deepEqual(err.message, 'stream not connected');
+            }
+            client.close();
+        });
+    });
+
+    client.connect();
+});
+
+
+test('connect and then close', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: PORT
+    });
 
-exports['Teardown'] = function (t) {
+    client.on('connect', function () {
+        client.close();
+    });
+
+    client.on('close', function () {
+        t.end();
+    });
+
+    client.connect();
+});
+
+
+test('new client replaces old one', function (t) {
+    var sendmsg = {
+        id: 5,
+        req_id: mod_uuid.v4(),
+        name: 'informational',
+        value: {
+            a: 5,
+            b: '12'
+        }
+    };
+
+    CLIENT1.on('close', function () {
+        CLIENT1 = mod_stream.createClient({
+            client_id: CLIENT1_UUID,
+            host: HOST,
+            log: LOG.child({ component: 'client1' }),
+            port: PORT
+        });
+
+        CLIENT1.once('message', function (msg) {
+            sendmsg.server_id = SERVER.id;
+            t.deepEqual(msg, sendmsg, 'message is the same');
+            t.end();
+        });
+
+        CLIENT1.on('connect', function (cErr) {
+            t.ifError(cErr, 'connect error');
+            CLIENT1.on('start', function (sErr) {
+                t.ifError(sErr, 'start error');
+                setImmediate(function () {
+                    SERVER.send(sendmsg);
+                });
+            });
+            CLIENT1.start();
+        });
+
+        CLIENT1.connect();
+    });
+
+    CLIENT1.close();
+});
+
+
+test('attempt connecting to bad address and then close', function (t) {
+    var client = mod_stream.createClient({
+        client_id: mod_uuid.v4(),
+        host: HOST,
+        log: LOG.child({ component: 'client1' }),
+        port: INVALID_PORT
+    });
+
+    client.on('connect', function () {
+        t.fail('client should not connect');
+    });
+
+    client.on('close', function () {
+        t.end();
+    });
+
+    setTimeout(function () {
+        t.ok(client.isInState('connecting'), 'in state "connecting"');
+        client.close();
+    }, 1000);
+
+    client.connect();
+});
+
+
+test('bad "messages" RPC arguments', function (t) {
+    t.test('too few arguments', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ ],
+            '"messages" RPC expects one argument');
+    });
+
+    t.test('too many arguments', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ {}, {} ],
+            '"messages" RPC expects one argument');
+    });
+
+    t.test('non-object argument', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ 'hello' ],
+            '"messages" RPC expects an options object');
+    });
+
+    t.test('non-string "client_id"', function (t2) {
+        checkFastRequestFails(t2, 'messages', [ { client_id: 5 } ],
+            'clients must provide their "client_id"');
+    });
+});
+
+
+test('bad "ping" RPC arguments', function (t) {
+    t.test('too few arguments', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ ],
+            '"ping" RPC expects one argument');
+    });
+
+    t.test('too many arguments', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ {}, {} ],
+            '"ping" RPC expects one argument');
+    });
+
+    t.test('non-object argument', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ 'hello' ],
+            '"ping" RPC expects an options object');
+    });
+
+    t.test('non-string "req_id"', function (t2) {
+        checkFastRequestFails(t2, 'ping', [ { req_id: 5 } ],
+            '"req_id" must be a string if provided');
+    });
+});
+
+
+// --- Teardown
+
+test('Teardown', function (t) {
     if (CLIENT1) {
         CLIENT1.close();
     }
@@ -148,4 +409,6 @@ exports['Teardown'] = function (t) {
     if (SERVER) {
         SERVER.close();
     }
-};
+
+    t.end();
+});
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..ae6d704
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index 1ac15eb..708ac88 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -14,7 +14,7 @@
 +ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
 +anon_no_return_value         # anonymous function does not always return value
 +assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
++block_without_braces         # block statement without curly braces
 +comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
 +comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
 +default_not_at_end           # the default case is not at the end of the switch statement
@@ -41,7 +41,7 @@
 +missing_semicolon_for_lambda # missing semicolon for lambda assignment
 +multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
 +nested_comment               # nested comment
--no_return_value              # function {name} does not always return a value
++no_return_value              # function {name} does not always return a value
 +octal_number                 # leading zeros make an octal number
 +parseint_missing_radix       # parseInt missing radix parameter
 +partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
@@ -118,6 +118,7 @@
 +define module
 +define process
 +define require
++define setImmediate
 +define setInterval
 +define setTimeout
 +define Buffer
