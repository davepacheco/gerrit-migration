commit ba426a8634862a1c5db42ceeebe6db3b2b8cb936 (refs/changes/93/493/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-09-16T16:48:53-07:00 (3 years, 1 month ago)
    
    IMGAPI-585 GetImage and ListImages?state=all should be able to retrieve others' disabled images

diff --git a/docs/index.md b/docs/index.md
index af55496..f63abae 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -680,8 +680,8 @@ fields.
 
 ## ListImages (GET /images)
 
-List images. Without query params this returns all active
-(`state === "active"`) images.
+List images. Without query params this returns all active (`state === "active"`)
+images.
 
 There are two typical calling styles to this endpoint: with 'account=$UUID' and
 without. The former is what cloudapi uses to ask on behalf of a particular
@@ -691,7 +691,7 @@ authenticated account. The latter is for operator-only querying.
 
 | Field                 | Type       | Required? | Notes |
 | --------------------- | ---------- | --------- | ----- |
-| account (query param) | UUID       | No        | Only allow access to images visible to this account. A user can only see: (a) active public images, (b) active private images for which they are on the ACL, and (c) their own images. This field is only relevant for ['mode=dc'](#configuration) IMGAPI servers. |
+| account (query param) | UUID       | No        | Only allow access to images visible to this account. A user can see: (a) their own images, (b) activated public images, and (c) activated private images for which they are on the ACL. Note that "activated" is different than "active" (see [state](#manifest-state)). This field is only relevant for ['mode=dc'](#configuration) IMGAPI servers. |
 | channel (query param) | String     | No        | The image channel to use. If not provided the server-side default channel is used. Use '*' to list in all channels. (Only relevant for servers using [channels](#channels).) |
 | inclAdminFields (query param) | Bool | No      | Pass `true` to include administrative fields (e.g. `files.*.stor`) in the returned image objects. For IMGAPI servers using ['mode'](#configuration) other than `dc`, auth is required to use `admin=true`. Otherwise, `UnauthorizedError` is returned. |
 | owner                 | UUID       | No        | Only list images owned by this account.                                                                                                                                                                                                                            |
@@ -862,9 +862,9 @@ authenticated account. The latter is for operator-only querying.
 
 ### Inputs
 
-| Field                 | Type   | Required? | Notes                                                                                                                                                                                                                                                              |
-| --------------------- | ------ | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
-| account (query param) | UUID   | No        | Only allow access to images visible to this account. A user can only see: (a) active public images, (b) active private images for which they are on the ACL, and (c) their own images. This field is only relevant for ['mode=dc'](#configuration) IMGAPI servers. |
+| Field                 | Type   | Required? | Notes |
+| --------------------- | ------ | --------- | ----- |
+| account (query param) | UUID   | No        | Only allow access to images visible to this account. A user can see: (a) their own images, (b) activated public images, and (c) activated private images for which they are on the ACL. Note that "activated" is different than "active" (see [state](#manifest-state)). This field is only relevant for ['mode=dc'](#configuration) IMGAPI servers. |
 | channel (query param) | String | No        | The image channel to use. (Only relevant for servers using [channels](#channels).)                                                                                                                                                                                 |
 | inclAdminFields (query param) | Bool | No  | Pass `true` to include administrative fields (e.g. `files.*.stor`) in the returned image objects. For IMGAPI servers using ['mode'](#configuration) other than `dc`, auth is required to use `admin=true`. Otherwise, `UnauthorizedError` is returned. |
 
diff --git a/lib/images.js b/lib/images.js
index 71f3052..bec2ce7 100644
--- a/lib/images.js
+++ b/lib/images.js
@@ -1324,7 +1324,9 @@ function apiListImages(req, res, next) {
         // 'account' specified:
         // 1. Matching images owned by the given account.
         filterOpts.push({
+            // scope:
             owner: query.account,
+            // match given filters:
             public: query.public,
             state: query.state,
             activated: query.activated,
@@ -1339,12 +1341,15 @@ function apiListImages(req, res, next) {
         });
         if (query.activated !== false && query.disabled !== true) {
             if (query.public !== false) {
-                // 2. Public & active images.
+                // 2. Public & activated images.
                 //    (This is expected to cache well for separate users.)
                 filterOpts.push({
+                    // scope:
                     public: true,
-                    activated: true,
-                    disabled: false,
+                    activated: true,  // restrict to activated images
+                    // match given filters:
+                    state: query.state,
+                    disabled: query.disabled,
                     name: query.name,
                     version: query.version,
                     os: query.os,
@@ -1355,12 +1360,15 @@ function apiListImages(req, res, next) {
                 });
             }
             if (!query.public) {
-                // 3. Private & active images for which ACCOUNT is listed
+                // 3. Private & activated images for which ACCOUNT is listed
                 //    in 'acl'.
                 filterOpts.push({
+                    // scope:
                     public: false,
-                    activated: true,
-                    disabled: false,
+                    activated: true,  // restrict to activated images
+                    // match given filters:
+                    state: query.state,
+                    disabled: query.disabled,
                     name: query.name,
                     version: query.version,
                     os: query.os,
@@ -1377,7 +1385,9 @@ function apiListImages(req, res, next) {
         if (query.account === query.owner) {
             // 1. If 'owner === account', then matching images owner by self.
             filterOpts.push({
+                // scope:
                 owner: query.owner,
+                // match given filters:
                 public: query.public,
                 state: query.state,
                 activated: query.activated,
@@ -1394,10 +1404,12 @@ function apiListImages(req, res, next) {
             if (query.public !== false) {
                 // 2. Public & activated images by the 'owner'.
                 filterOpts.push({
+                    // scope:
                     owner: query.owner,
                     public: true,
                     activated: true,
-                    disabled: false,
+                    // match given filters:
+                    disabled: query.disabled,
                     name: query.name,
                     version: query.version,
                     os: query.os,
@@ -1409,12 +1421,14 @@ function apiListImages(req, res, next) {
             }
             if (query.public !== true) {
                 // 3. Private & activated images by the 'owner', for which
-                //    'account' is listing in 'acl'.
+                //    'account' is listed in the 'acl'.
                 filterOpts.push({
+                    // scope:
                     owner: query.owner,
                     public: false,
                     activated: true,
-                    disabled: false,
+                    // match given filters:
+                    disabled: query.disabled,
                     name: query.name,
                     version: query.version,
                     os: query.os,
@@ -5000,16 +5014,16 @@ function reqGetImage(req, res, next) {
             if (image.owner === account) {
                 // User's own image.
                 access = true;
-            } else if (!image.activated || image.disabled) {
-                // Inactive image: can only see others' *active* images.
+            } else if (!image.activated) {
+                // Unactivated image: cannot see others' unactivated images.
                 log.info({image: image, account: account},
-                    'access denied: inactive image owned by someone else');
+                    'access denied: unactivated image owned by someone else');
                 access = false;
             } else if (image.public) {
-                // Public active image.
+                // Public activated image (might currently be disabled).
                 access = true;
             } else if (image.acl && image.acl.indexOf(account) !== -1) {
-                // Private active image of which `account` is on the ACL.
+                // Private image for which `account` is on the ACL.
                 access = true;
             } else {
                 log.info({image: image, account: account},
diff --git a/package.json b/package.json
index a03c4a6..7d5d5e5 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "2.2.0",
+  "version": "2.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/images-as-a-user.dc-test.js b/test/images-as-a-user.dc-test.js
index 245c263..64b4597 100644
--- a/test/images-as-a-user.dc-test.js
+++ b/test/images-as-a-user.dc-test.js
@@ -286,21 +286,21 @@ test('ListImages: luke, owner=sdc', function (t) {
 
 // Tests from test-data.ldif comment.
 var data = {
-    // 1. everyone can see 'base-1.8.1'
+    // 1. everyone can see 'base-1.8.1' (it is active, public, owned by sdc)
     'base-1.8.1': [
         {uuid: vader,   login: 'vader',   cansee: true},
         {uuid: luke,    login: 'luke',    cansee: true},
         {uuid: emperor, login: 'emperor', cansee: true},
         {uuid: sdc,     login: 'sdc',     cansee: true}
     ],
-    // 2. only sdc can see 'nodejs-1.0.0'
+    // 2. only sdc can see 'nodejs-1.0.0' (it is disabled, public, owned by sdc)
     'nodejs-1.0.0': [
-        {uuid: vader,   login: 'vader',   cansee: false},
-        {uuid: luke,    login: 'luke',    cansee: false},
-        {uuid: emperor, login: 'emperor', cansee: false},
+        {uuid: vader,   login: 'vader',   cansee: true},
+        {uuid: luke,    login: 'luke',    cansee: true},
+        {uuid: emperor, login: 'emperor', cansee: true},
         {uuid: sdc,     login: 'sdc',     cansee: true}
     ],
-    // 3. only sdc can see 'base-2.0.0'
+    // 3. only sdc can see 'base-2.0.0' (it is unactivated, owned by sdc)
     'base-2.0.0': [
         {uuid: vader,   login: 'vader',   cansee: false},
         {uuid: luke,    login: 'luke',    cansee: false},
@@ -314,10 +314,11 @@ var data = {
         {uuid: emperor, login: 'emperor', cansee: false},
         {uuid: sdc,     login: 'sdc',     cansee: false}
     ],
-    // 5. only vader can see 'come-to-the-dark-side'
+    // 5. only vader can see 'come-to-the-dark-side' (owned by vader, private
+    //    disabled, luke on the acl)
     'come-to-the-dark-side-42.1.2': [
         {uuid: vader,   login: 'vader',   cansee: true},
-        {uuid: luke,    login: 'luke',    cansee: false},
+        {uuid: luke,    login: 'luke',    cansee: true},
         {uuid: emperor, login: 'emperor', cansee: false},
         {uuid: sdc,     login: 'sdc',     cansee: false}
     ],
