commit a2f1ba8ddd6b9b74388bc96963a74cf3bd12dd3e (refs/changes/21/4921/1)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2018-10-03T22:41:31+13:00 (1 year ago)
    
    TRITON-566 need windows-prepare-image script

diff --git a/tools/prepare-image/windows-prepare-image b/tools/prepare-image/windows-prepare-image
new file mode 100644
index 0000000..bbf9645
--- /dev/null
+++ b/tools/prepare-image/windows-prepare-image
@@ -0,0 +1,152 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+# Set Window's cleanmgr to (nearly) max, and run it. This cleans up most
+# temporary (files, cache) and unneeded data (outdated installation data).
+#
+# Apparently, the only way to get cleanmgr to run without displaying a final
+# information dialog -- thus hanging image creation -- is through the /autoclean
+# flag. We abuse this by setting all available cleanup options in the registry
+# to be run by autoclean. Since the VM will be rolled back after image creation,
+# this change is not a problem.
+#
+# There are also a couple very expensive cleanmgr checks that increase
+# cleanmgr's run time up to 5x, which we cannot afford with the 5m time limit
+# imposed on image creation between prepare-script 'running' and
+# final 'error'/'success' calls. The only way to disable these checks outright
+# is to temporarily move their registry keys, which we do as well.
+#
+# After that, cleanmgr is run, then moving the expensive registry keys back.
+#
+# Unfortunately, cleanmgr /autoclean appears to contain its own logic about when
+# it will clean up something. As a result, we also empty recycle bins and clear
+# most temp and log directories manually.
+
+$parent_path = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches'
+$tmp_parent_path = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer'
+$expensive_cleanups = 'Update Cleanup', 'System error memory dump files'
+$clean_dirs = 'c:\Windows\Temp\*', 'c:\Windows\Logs\*', 'c:\Windows\Minidump\*',
+    'C:\PerfLogs\*', 'C:\Windows\Downloaded Program Files\*',
+    'C:\Windows\*.log', 'C:\Users\*\AppData\Local\Temp\*'
+
+
+function mput {
+    $key = $args[0]
+    $val = $args[1]
+    c:\smartdc\bin\mdata-put.exe prepare-image:$key $val
+}
+
+function setting_path {
+    $id = $args[0]
+    "$parent_path\$id"
+}
+
+function tmp_path {
+    $id = $args[0]
+    "$tmp_parent_path\$id"
+}
+
+function error {
+    $msg = $args[0]
+    echo "ERROR"
+    echo $msg
+    mput 'state' 'error'
+    mput 'error' $msg
+    exit
+}
+
+
+echo 'Starting run...'
+mput 'state' 'running'
+
+echo "Disabling particularly expensive cleanmgr operations"
+foreach ($cleanup in $expensive_cleanups) {
+    try {
+        Move-Item -LiteralPath (setting_path $cleanup) `
+            -Destination (tmp_path $cleanup) -ErrorAction Stop
+    } catch [System.Management.Automation.PSInvalidOperationException] {}
+}
+
+echo 'Marking all other checks for /autoclean'
+try {
+    $cleanups = (Get-Item -LiteralPath $parent_path).GetSubKeyNames()
+} catch {
+    error 'Unknown hive'
+}
+
+$add_auto_paths = @()
+try {
+    foreach ($cleanup in $cleanups) {
+        $path = setting_path $cleanup
+        $node = Get-Item -LiteralPath $path
+        if ($node.GetValue('Autorun') -ne 1) {
+            $add_auto_paths = $add_auto_paths + $path
+        }
+    }
+} catch {
+    error 'Bad Get-Item'
+}
+
+try {
+    foreach ($path in $add_auto_paths) {
+        Set-ItemProperty -LiteralPath $path -Name 'Autorun' `
+            -Type Dword -Value 1 -ErrorAction Stop
+    }
+} catch {
+    error 'Bad Set-Item'
+}
+
+echo 'Running cleanmgr...'
+try {
+    # Out-Null needed to block script until cleanmgr completes
+    c:\windows\system32\cleanmgr.exe /autoclean | Out-Null
+} catch [System.Management.Automation.CommandNotFoundException] {
+    # Ignore, in case we are dealing with a 2012r2 instance without
+    # Desktop Experience installed
+} catch {
+    error 'Bad cleanmgr'
+}
+
+echo 'Unmarking other checks /autoclean'
+try {
+    foreach ($path in $add_auto_paths) {
+        Set-ItemProperty -LiteralPath $path -Name 'Autorun' `
+            -Type Dword -Value 0 -ErrorAction Stop
+    }
+} catch {
+    error 'Bad auto undo'
+}
+
+echo 'Reenabling expensive cleanmgr operations'
+foreach ($cleanup in $expensive_cleanups) {
+    try {
+        Move-Item -LiteralPath (tmp_path $cleanup) `
+            -Destination (setting_path $cleanup) -ErrorAction Stop
+    } catch [System.Management.Automation.PSInvalidOperationException] {}
+}
+
+echo 'Empty Recycle Bins'
+try {
+     Clear-RecycleBin -Confirm:$false -ErrorAction Stop
+} catch [System.ComponentModel.Win32Exception],
+        [System.Management.Automation.CommandNotFoundException] {
+    # Ignore, in case we are dealing with a Powershell older than 5.1 on 2012r2.
+    # By default, 2012r2 has Powershell 4.0, but updates can increase it to 5.1
+} catch {
+    error 'Bad empty recycle'
+}
+
+echo 'Clear out temp and log directories'
+foreach ($path in $clean_dirs) {
+    try {
+        Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
+    } catch {}
+}
+
+
+mput 'state' 'success'
+echo 'Done!'
+
