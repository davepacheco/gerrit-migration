commit 02ff4a0acb1019aad677a5d0029567490725b715 (refs/changes/70/3970/8)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-06-05T00:36:50+00:00 (1 year, 4 months ago)
    
    MANTA-3672 want support for cross-account RBAC role membership

diff --git a/lib/auth.js b/lib/auth.js
index 997ca9d..2675f3b 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 //
@@ -780,6 +780,11 @@ function getActiveRoles(req, res, next) {
     var names;
 
     if (requestedRoles) {           // The user passed in roles to assume
+        /*
+         * We only support role='*' for sub-users and roles within the
+         * account. Cross-account roles have to be taken up by name or made
+         * default.
+         */
         if (requestedRoles  === '*' && req.caller.user) {
             activeRoles = req.caller.user.roles || [];
             req.activeRoles = activeRoles;
@@ -792,7 +797,7 @@ function getActiveRoles(req, res, next) {
         /* JSSTYLED */
         names = requestedRoles.split(/\s*,\s*/);
         req.mahi.getUuid({
-            account: req.caller.account.login,
+            account: req.owner.account.login,
             type: 'role',
             names: names
         }, function (err, lookup) {
@@ -813,8 +818,25 @@ function getActiveRoles(req, res, next) {
             next();
         });
     } else {                            // No explicit roles, use default set
+        /*
+         * Sub-users don't get any default cross-account roles, only the ones
+         * within their account.
+         */
         if (req.caller.user) {
             activeRoles = req.caller.user.defaultRoles || [];
+        } else {
+            activeRoles = req.caller.account.defaultRoles || [];
+            /*
+             * Account default roles might include roles that aren't actually
+             * for this account. We filter out ones that don't match here to
+             * avoid wasting time considering them, and to make the error
+             * message when we deny access the same as it was before
+             * cross-account role support.
+             */
+            activeRoles = activeRoles.filter(function (role) {
+                return (req.caller.roles[role].account ===
+                    req.owner.account.uuid);
+            });
         }
         req.activeRoles = activeRoles;
         setImmediate(next);
@@ -965,12 +987,23 @@ function authorize(req, res, next) {
             next(new AccountBlockedError(req.caller.account.login));
             return;
         case 'NoMatchingRoleTag':
-            next(new NoMatchingRoleTagError());
+            /*
+             * If we didn't activate any roles, we want to return an
+             * AuthorizationError here, like we would have previously if we
+             * got a CrossAccount Error before cross-account role support was
+             * added.
+             */
+            if (!req.activeRoles || !req.activeRoles.length) {
+                next(new AuthorizationError(login, req.path(), e));
+            } else {
+                next(new NoMatchingRoleTagError());
+            }
             return;
         case 'InvalidRole':
             next(new InvalidRoleError(e.message));
             return;
         case 'CrossAccount':
+            /* This should never happen. */
             next(new AuthorizationError(login, req.path(), e));
             return;
         case 'RulesEvaluationFailed':
diff --git a/package.json b/package.json
index 7115b69..0b04a23 100644
--- a/package.json
+++ b/package.json
@@ -31,7 +31,7 @@
         "libuuid": "0.1.2",
         "lru-cache": "2.3.1",
         "lstream": "0.0.4",
-        "mahi": "2.0.1",
+        "mahi": "2.1.0",
         "marlin": "git+https://github.com/joyent/manta-marlin.git#master",
         "mime": "1.2.11",
         "moray": "3.4.1",
diff --git a/test/ac.test.js b/test/ac.test.js
index c44a8a9..d42bd2f 100644
--- a/test/ac.test.js
+++ b/test/ac.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var _helper = __dirname + '/helper.js';
@@ -142,7 +142,9 @@ before(function (cb) {
     self.jsonClient = helper.createJsonClient();
     self.rawClient = helper.createRawClient();
     self.userClient = helper.createUserClient('muskie_test_user');
+    self.operClient = helper.createOperatorClient();
     self.paths = [];
+    self.operPaths = [];
     self.jobs = [];
     cb();
 });
@@ -158,11 +160,17 @@ after(function (cb) {
             func: self.client.cancelJob.bind(self.client),
             inputs: self.jobs
         }, function (err2) {
-            self.client.close();
-            self.rawClient.close();
-            self.userClient.close();
-            self.sdcClient.client.close();
-            cb(err || err2);
+            vasync.forEachParallel({
+                func: self.operClient.unlink.bind(self.operClient),
+                inputs: self.operPaths
+            }, function (err3) {
+                self.client.close();
+                self.rawClient.close();
+                self.userClient.close();
+                self.sdcClient.client.close();
+                self.operClient.close();
+                cb(err || err2 || err3);
+            });
         });
     });
 });
@@ -361,6 +369,24 @@ test('assume bad role', function (t) {
 });
 
 
+test('assume bad role - xacct', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor', self.operClient.user);
+    self.client.get(path, {
+        headers: {
+            'role': 'muskie_test_role_other'
+        }
+    }, function (err2) {
+        if (!err2) {
+            t.fail(err2, 'error expected');
+            t.end();
+            return;
+        }
+        t.equal(err2.name, 'InvalidRoleError');
+        t.end();
+    });
+});
+
 test('mchmod', function (t) {
     var self = this;
     var path = sprintf('/%s/stor/muskie_test_obj', self.client.user);
@@ -398,6 +424,71 @@ test('mchmod', function (t) {
     });
 });
 
+test('cross-account role access (denied)', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor', self.operClient.user);
+    self.client.info(path, {
+        headers: {
+            'role': 'muskie_test_role_xacct'
+        }
+    }, function (err3, info) {
+        if (!err3) {
+            t.fail('error expected');
+            t.end();
+            return;
+        }
+        t.equal(err3.name, 'ForbiddenError');
+
+        self.client.info(path, function (err4, info2) {
+            if (!err4) {
+                t.fail('error expected');
+                t.end();
+                return;
+            }
+            t.equal(err4.name, 'ForbiddenError');
+            t.end();
+        });
+    });
+});
+
+test('cross-account role access', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor/muskie_test_obj', self.operClient.user);
+    writeObject(self.operClient, path, function (err) {
+        if (err) {
+            t.fail(err);
+            t.end();
+            return;
+        }
+
+        self.operPaths.push(path);
+        self.operClient.chattr(path, {
+            headers: {
+                'role-tag': 'muskie_test_role_xacct'
+            }
+        }, function (err2) {
+            if (err2) {
+                t.fail(err2);
+                t.end();
+                return;
+            }
+
+            self.client.info(path, {
+                headers: {
+                    'role': 'muskie_test_role_xacct'
+                }
+            }, function (err3, info) {
+                if (err3) {
+                    t.fail(err3);
+                    t.end();
+                    return;
+                }
+                t.equal(info.headers['role-tag'], 'muskie_test_role_xacct');
+                t.end();
+            });
+        });
+    });
+});
 
 test('mchmod bad role', function (t) {
     var self = this;
diff --git a/test/acsetup.js b/test/acsetup.js
index 8e9e91b..64a06ac 100644
--- a/test/acsetup.js
+++ b/test/acsetup.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var _helper = __dirname + '/helper.js';
@@ -16,6 +16,7 @@ var fs = require('fs');
 var vasync = require('vasync');
 
 var sdcClient;
+var operSdcClient;
 
 var USERS = [
     {
@@ -119,6 +120,27 @@ var ROLES = [
     }
 ];
 
+var REGULAR_USER = process.env.MANTA_USER || 'admin';
+
+var OPER_ROLES = [
+    {
+        name: 'muskie_test_role_xacct',
+        members: [
+            { type: 'account', login: REGULAR_USER }
+        ],
+        policies: [
+            { name: 'muskie_test_read' }
+        ]
+    }
+];
+
+var OPER_POLICIES = [
+    {
+        name: 'muskie_test_read',
+        rules: [ 'can getobject', 'can listdirectory' ]
+    }
+];
+
 function setup(cb) {
     var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa.pub', 'utf8');
     vasync.pipeline({funcs: [
@@ -145,11 +167,33 @@ function setup(cb) {
                 inputs: POLICIES
             }, pipelinecb);
         },
+        function createOperPolicies(_, pipelinecb) {
+            vasync.forEachPipeline({
+                func: operSdcClient.createPolicy.bind(operSdcClient),
+                inputs: OPER_POLICIES
+            }, pipelinecb);
+        },
+        /*
+         * Mahi can take up to ~10 sec to pick up the change from UFDS.
+         * If we try to add users to roles before that we will receive
+         * spurious errors.
+         *
+         * Wait 15 sec just to make sure it's been long enough.
+         */
+        function sleepForMahi(_, pipelinecb) {
+            setTimeout(pipelinecb, 15000);
+        },
         function createRoles(_, pipelinecb) {
             vasync.forEachPipeline({
                 func: sdcClient.createRole.bind(sdcClient),
                 inputs: ROLES
             }, pipelinecb);
+        },
+        function createOperRoles(_, pipelinecb) {
+            vasync.forEachPipeline({
+                func: operSdcClient.createRole.bind(operSdcClient),
+                inputs: OPER_ROLES
+            }, pipelinecb);
         }
         /*
          * function createHugeTokenUser(_, pipelinecb) {
@@ -222,6 +266,48 @@ function teardown(cb) {
                 }, pipelinecb);
             });
         },
+        function deleteOperRoles(_, pipelinecb) {
+            operSdcClient.listRoles(function (err, roles) {
+                if (err) {
+                    pipelinecb(err);
+                    return;
+                }
+
+                var names = OPER_ROLES.map(function (r) {
+                    return (r.name);
+                });
+
+                var deletions = roles.filter(function (r) {
+                    return (names.indexOf(r.name) >= 0);
+                });
+
+                vasync.forEachPipeline({
+                    func: operSdcClient.deleteRole.bind(operSdcClient),
+                    inputs: deletions
+                }, pipelinecb);
+            });
+        },
+        function deleteOperPolicies(_, pipelinecb) {
+            operSdcClient.listPolicies(function (err, policies) {
+                if (err) {
+                    pipelinecb(err);
+                    return;
+                }
+
+                var names = OPER_POLICIES.map(function (p) {
+                    return (p.name);
+                });
+
+                var deletions = policies.filter(function (p) {
+                    return (names.indexOf(p.name) >= 0);
+                });
+
+                vasync.forEachPipeline({
+                    func: operSdcClient.deletePolicy.bind(operSdcClient),
+                    inputs: deletions
+                }, pipelinecb);
+            });
+        },
         function deleteUsers(_, pipelinecb) {
             sdcClient.listUsers(function (err, users) {
                 if (err) {
@@ -268,19 +354,23 @@ function teardown(cb) {
 function main() {
     if (process.argv[2] === 'setup') {
         sdcClient = helper.createSDCClient();
+        operSdcClient = helper.createOperatorSDCClient();
         setup(function (err) {
             if (err) {
                 console.log(err);
             }
             sdcClient.client.close();
+            operSdcClient.client.close();
         });
     } else if (process.argv[2] === 'teardown') {
         sdcClient = helper.createSDCClient();
+        operSdcClient = helper.createOperatorSDCClient();
         teardown(function (err) {
             if (err) {
                 console.log(err);
             }
             sdcClient.client.close();
+            operSdcClient.client.close();
         });
     } else {
         console.error('usage: ' + process.argv[1] + ' [setup|teardown]');
diff --git a/test/helper.js b/test/helper.js
index 7f67563..14150ab 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var domain = require('domain');
@@ -20,6 +20,7 @@ var manta = require('manta');
 var once = require('once');
 var restify = require('restify');
 var smartdc = require('smartdc');
+var sshpk = require('sshpk');
 var VError = require('verror').VError;
 
 
@@ -46,6 +47,13 @@ var TOKEN_CFG = {
 var POSEIDON_ID = process.env.MUSKIE_POSEIDON_ID ||
         '930896af-bf8c-48d4-885c-6573a94b1853';
 
+/*
+ * We need an operator account for some tests, so we use poseidon, unless an
+ * alternate one is provided.
+ */
+var TEST_OPERATOR = process.env.MUSKIETEST_OPERATOR_USER || 'poseidon';
+var TEST_OPERATOR_KEY = process.env.MUSKIETEST_OPERATOR_KEYFILE ||
+        (process.env.HOME + '/.ssh/id_rsa_poseidon');
 
 
 ///--- Helpers
@@ -152,6 +160,7 @@ function createSDCClient() {
             keyId: process.env.SDC_KEY_ID,
             user: process.env.SDC_ACCOUNT
         }),
+        rejectUnauthorized: false,
         user: process.env.SDC_ACCOUNT || 'admin',
         url: process.env.SDC_URL || 'http://localhost:8080'
     });
@@ -159,6 +168,51 @@ function createSDCClient() {
     return (client);
 }
 
+function createOperatorSDCClient() {
+    var key = fs.readFileSync(TEST_OPERATOR_KEY);
+    var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
+
+    var log = createLogger();
+    var client = smartdc.createClient({
+        log: log,
+        sign: manta.privateKeySigner({
+            key: key,
+            keyId: keyId,
+            log: log,
+            user: TEST_OPERATOR
+        }),
+        rejectUnauthorized: false,
+        version: '9.0.0',
+        url: process.env.SDC_URL || 'http://localhost:8080',
+        user: TEST_OPERATOR
+    });
+
+    return (client);
+}
+
+function createOperatorClient() {
+    var key = fs.readFileSync(TEST_OPERATOR_KEY);
+    var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
+
+    var log = createLogger();
+    var client = manta.createClient({
+        agent: false,
+        connectTimeout: 2000,
+        log: log,
+        retry: false,
+        sign: manta.privateKeySigner({
+            key: key,
+            keyId: keyId,
+            log: log,
+            user: TEST_OPERATOR
+        }),
+        rejectUnauthorized: false,
+        url: process.env.MANTA_URL || 'http://localhost:8080',
+        user: TEST_OPERATOR
+    });
+
+    return (client);
+}
 
 function checkResponse(t, res, code) {
     t.ok(res, 'null response');
@@ -372,5 +426,7 @@ module.exports = {
     createSDCClient: createSDCClient,
     createLogger: createLogger,
     createAuthToken: createAuthToken,
+    createOperatorSDCClient: createOperatorSDCClient,
+    createOperatorClient: createOperatorClient,
     signUrl: signUrl
 };
diff --git a/test/mpu/helper.js b/test/mpu/helper.js
index afe6dec..6925ccb 100644
--- a/test/mpu/helper.js
+++ b/test/mpu/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -44,15 +44,6 @@ var ZERO_BYTE_MD5 = obj.ZERO_BYTE_MD5;
 var TEXT = 'The lazy brown fox \nsomething \nsomething foo';
 var TEXT_MD5 = crypto.createHash('md5').update(TEXT).digest('base64');
 
-/*
- * We need an operator account for some tests, so we use poseidon, unless an
- * alternate one is provided.
- */
-var TEST_OPERATOR = process.env.MUSKIETEST_OPERATOR_USER || 'poseidon';
-var TEST_OPERATOR_KEY = process.env.MUSKIETEST_OPERATOR_KEYFILE ||
-        (process.env.HOME + '/.ssh/id_rsa_poseidon');
-
-
 ///--- Helpers
 
 /*
@@ -71,8 +62,7 @@ function initMPUTester(tcb) {
 
     self.client = testHelper.createClient();
     self.userClient = testHelper.createUserClient('muskie_test_user');
-    self.operatorClient = createOperatorClient(TEST_OPERATOR,
-        TEST_OPERATOR_KEY);
+    self.operatorClient = testHelper.createOperatorClient();
 
     self.uploadsRoot = '/' + self.client.user + '/uploads';
     self.root = '/' + self.client.user + '/stor';
@@ -204,38 +194,6 @@ function cleanupMPUTester(cb) {
 }
 
 
-/*
- * Helper to create a Manta client for the operator account.
- *
- * Parameters:
- *  - user: the operator account
- *  - keyFile: local path to the private key for this account
- */
-function createOperatorClient(user, keyFile) {
-    var key = fs.readFileSync(keyFile);
-    var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
-
-    var log = testHelper.createLogger();
-    var client = manta.createClient({
-        agent: false,
-        connectTimeout: 2000,
-        log: log,
-        retry: false,
-        sign: manta.privateKeySigner({
-            key: key,
-            keyId: keyId,
-            log: log,
-            user: user
-        }),
-        rejectUnauthorized: false,
-        url: process.env.MANTA_URL || 'http://localhost:8080',
-        user: user
-    });
-
-    return (client);
-}
-
-
 /*
  * Helper that creates an upload and passes the object returned from `create`
  * to the callback. On success, it will do a basic sanity check on the object
