commit 345d1ac20664f8631d6e4cd36c8ae9642a93afbd (refs/changes/47/1247/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-01-12T18:20:43+00:00 (2 years, 9 months ago)
    
    NAPI-382 sdc-portolan-moray should work with Moray client v2 errors

diff --git a/Makefile b/Makefile
index da35d68..96443ee 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright 2016, Joyent, Inc.
 #
 
 #
@@ -32,6 +32,9 @@ JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
+ESLINT		 = ./node_modules/.bin/eslint
+ESLINT_CONF	 = tools/eslint.node.conf
+ESLINT_FILES	 = $(JS_FILES)
 
 
 #
@@ -42,6 +45,9 @@ JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
 all: | $(TAPE)
 	$(NPM) rebuild
 
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install
+
 $(TAPE):
 	$(NPM) install
 
@@ -55,6 +61,10 @@ test: $(TAPE)
 		[[ $$? == "0" ]] || exit 1; \
 	done)
 
+.PHONY: check
+check:: $(ESLINT)
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
+
 
 #
 # Includes
diff --git a/lib/buckets.js b/lib/buckets.js
index 4a2e868..739267e 100644
--- a/lib/buckets.js
+++ b/lib/buckets.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Bucket definitions
  */
 
+'use strict';
+
 
 // --- Globals
 
diff --git a/lib/common.js b/lib/common.js
index 6e5622a..f7e6e41 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Common functions
  */
 
-var assert = require('assert-plus');
+'use strict';
 
 
 
diff --git a/lib/consumer.js b/lib/consumer.js
index bfcc040..f135a09 100644
--- a/lib/consumer.js
+++ b/lib/consumer.js
@@ -5,19 +5,22 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Functions for consuming the portolan-moray buckets
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var fmt = require('util').format;
 var mod_bucket = require('./buckets');
 var mod_common = require('./common');
 var mod_errors = require('./errors');
 var mod_lru = require('lru-cache');
+var VError = require('verror');
 
 
 
@@ -84,15 +87,14 @@ function underlayLookup(opts, callback) {
     if (!noCache) {
         var cached = SHARED.cache.cn_uuid.get(opts.cn_uuid);
         if (cached) {
-            return setImmediate(function () {
-                callback(null, cached);
-            });
+            setImmediate(callback, null, cached);
+            return;
         }
     }
 
     moray.getObject(NAMES.underlay, opts.cn_uuid, function (err, obj) {
         if (err) {
-            if (err.name === 'ObjectNotFoundError') {
+            if (VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
                 return callback(mod_errors.underlayNotFound(
                     'cn_uuid', opts.cn_uuid));
             }
@@ -177,9 +179,8 @@ function vl2Lookup(opts, callback) {
         if (cached) {
             opts.log.debug({ cached: cached },
                 'vl2Lookup: returning cached value');
-            return setImmediate(function () {
-                callback(null, cached);
-            });
+            setImmediate(callback, null, cached);
+            return;
         }
     }
 
@@ -264,15 +265,14 @@ function vl3Lookup(opts, callback) {
         if (cached) {
             opts.log.debug({ cached: cached },
                 'vl3Lookup: returning cached value');
-            return setImmediate(function () {
-                callback(null, cached);
-            });
+            setImmediate(callback, null, cached);
+            return;
         }
     }
 
     opts.moray.getObject(NAMES.mac_ip, key, function (err, obj) {
         if (err) {
-            if (err.name === 'ObjectNotFoundError') {
+            if (VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
                 // XXX: cache this?
                 // SHARED.cache.vl3.set(key, output);
                 return callback(mod_errors.vl3NotFound(ip, vnetID));
@@ -345,15 +345,19 @@ function logRm(opts, callback) {
         'logRm - attempting delete');
 
     opts.moray.delObject(NAMES.net_events, opts.uuid, function (err) {
-        // ObjectNotFound is strange but not a problem for delete.
-        if (err && err.name !== 'ObjectNotFoundError') {
-            return callback(err);
-        } else if (err && err.name === 'ObjectNotFoundError') {
-            opts.log.warn({ err: err, logUuid: opts.uuid },
-                'logRm call for already-deleted log');
+        if (err) {
+            // ObjectNotFound is strange but not a problem for delete.
+            if (VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
+                opts.log.warn({ err: err, logUuid: opts.uuid },
+                    'logRm call for already-deleted log');
+            } else {
+                callback(err);
+                return;
+            }
         }
+
         opts.log.debug({ logUuid: opts.uuid }, 'logRm - deleted log');
-        return callback();
+        callback();
     });
 }
 
diff --git a/lib/errors.js b/lib/errors.js
index 8632554..9f4b27e 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Errors
  */
 
+'use strict';
+
 var fmt = require('util').format;
 
 
@@ -56,6 +58,7 @@ function fatal(msg) {
 
 
 module.exports = {
+    fatal: fatal,
     underlayNotFound: underlayNotFound,
     vl2NotFound: vl2NotFound,
     vl3NotFound: vl3NotFound
diff --git a/lib/index.js b/lib/index.js
index 9a23584..87f65ef 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Entry-point for the portolan moray module
  */
 
+'use strict';
+
 var mod_buckets = require('./buckets');
 var mod_consumer = require('./consumer');
 var mod_producer = require('./producer');
diff --git a/lib/producer.js b/lib/producer.js
index bb801c1..4fd9818 100644
--- a/lib/producer.js
+++ b/lib/producer.js
@@ -12,10 +12,12 @@
  * Functions for storing records into the portolan-moray buckets
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_bucket = require('./buckets');
 var mod_common = require('./common');
-var UUID = require('node-uuid');
+var mod_uuid = require('uuid');
 
 
 
@@ -110,7 +112,8 @@ function updateOverlayMapping(opts, cb) {
 
     client.getObject(NAMES.mac_ip, key, function (err, obj) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         var record = {
@@ -146,13 +149,7 @@ function removeOverlayMapping(opts, cb) {
     var client = opts.moray;
     var key = mod_common.vnetMacIPkey(opts.ip, opts.vnet_id);
 
-    client.delObject(NAMES.mac_ip, key, function (err) {
-        if (err) {
-            return cb(err);
-        }
-
-        return cb();
-    });
+    client.delObject(NAMES.mac_ip, key, cb);
 }
 
 
@@ -172,12 +169,7 @@ function addUnderlayMapping(opts, cb) {
         port: opts.port
     };
 
-    client.putObject(NAMES.underlay, key, record, function (err) {
-        if (err) {
-            return (cb(err));
-        }
-        cb();
-    });
+    client.putObject(NAMES.underlay, key, record, cb);
 }
 
 
@@ -228,7 +220,8 @@ function updateUnderlayMapping(opts, cb) {
 
     client.getObject(bucket, key, function (err, obj) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         var record = {
@@ -241,13 +234,7 @@ function updateUnderlayMapping(opts, cb) {
             etag: obj._etag
         };
 
-        client.putObject(bucket, key, record, putOpts, function (err2) {
-            if (err2) {
-                return cb(err2);
-            }
-
-            return cb();
-        });
+        client.putObject(bucket, key, record, putOpts, cb);
     });
 }
 
@@ -260,13 +247,7 @@ function removeUnderlayMapping(opts, cb) {
     var client = opts.moray;
     var key = opts.cn_uuid;
 
-    client.delObject(NAMES.underlay, key, function (err) {
-        if (err) {
-            return cb(err);
-        }
-
-        cb();
-    });
+    client.delObject(NAMES.underlay, key, cb);
 }
 
 /*
@@ -284,7 +265,7 @@ function vl2CnEventBatch(opts) {
     var batch = [];
 
     batch = opts.vnetCns.map(function (cn) {
-        var uuid = UUID.v4();
+        var uuid = mod_uuid.v4();
         return {
             bucket: NAMES.net_events,
             key: uuid,
@@ -322,7 +303,7 @@ function vl3CnEventBatch(opts) {
     var batch = [];
 
     batch = opts.vnetCns.map(function (cn) {
-        var uuid = UUID.v4();
+        var uuid = mod_uuid.v4();
         return {
             bucket: NAMES.net_events,
             key: uuid,
diff --git a/package.json b/package.json
index dc3d1a4..48c48aa 100644
--- a/package.json
+++ b/package.json
@@ -8,9 +8,12 @@
   "dependencies": {
     "assert-plus": "1.0.0",
     "lru-cache": "2.5.0",
-    "node-uuid": "1.4.7"
+    "uuid": "3.0.0",
+    "verror": "1.9.0"
   },
   "devDependencies": {
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1",
     "tape": "3.5.0"
   },
   "license": "MPL-2.0"
diff --git a/test/api.test.js b/test/api.test.js
index b2b5c35..da4f8cd 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * Basic API tests
  */
 
+'use strict';
+
 var mod_pm = require('../lib');
 var test = require('tape');
 
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..ae6d704
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index e3501ad..b8354e4 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -32,7 +32,7 @@
 +legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
 +meaningless_block            # meaningless block; curly braces have no impact
 +mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
+-misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
 +missing_break                # missing break statement
 +missing_break_for_last_case  # missing break statement for last case in switch
 +missing_default_case         # missing default case in switch statement
@@ -52,7 +52,7 @@
 +unreachable_code             # unreachable code
 -unreferenced_argument        # argument declared but never referenced: {name}
 -unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
+-unreferenced_variable        # variable is declared but never referenced: {name}
 +unsupported_version          # JavaScript {version} is not supported
 +use_of_label                 # use of label
 +useless_assign               # useless assignment
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
