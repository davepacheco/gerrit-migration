commit df6a47edaf4dc8e115579357757eb9d700d4adac (refs/changes/14/4214/1)
Author: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date:   2018-06-14T15:36:45+02:00 (1 year, 4 months ago)
    
    OS-6832 reclaim memory when NOSLEEP bhyve allocation fails

diff --git a/usr/src/uts/i86pc/io/vmm/vmm_sol_vm.c b/usr/src/uts/i86pc/io/vmm/vmm_sol_vm.c
index d8a44ddf37..339937755e 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_sol_vm.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_sol_vm.c
@@ -19,6 +19,7 @@
 #include <sys/list.h>
 #include <sys/mman.h>
 #include <sys/types.h>
+#include <sys/ddi.h>
 #include <sys/sysmacros.h>
 #include <sys/machsystm.h>
 #include <sys/vmsystm.h>
@@ -932,6 +933,30 @@ vm_object_pager_sg(vm_object_t vmo, uintptr_t off, pfn_t *lpfn, uint_t *lvl)
 	return (pfn);
 }
 
+static void *
+vm_default_alloc(size_t size)
+{
+	int npages = btop(size);
+	int retries = 60;
+
+	if (availrmem < npages) {
+		/*
+		 * Set needfree and wait for the ZFS ARC reap thread to free up
+		 * some memory.
+		 */
+		page_needfree(btop(size));
+		while ((availrmem < npages) && retries-- > 0)
+			delay(drv_usectohz(1 * MICROSEC));
+		page_needfree(btop(-size));
+	}
+
+	if (availrmem < npages)
+		return (NULL);
+
+	/* XXXJOY: opt-in to larger pages? */
+	return (vmem_alloc(vmm_alloc_arena, size, KM_NOSLEEP));
+}
+
 vm_object_t
 vm_object_allocate(objtype_t type, vm_pindex_t psize)
 {
@@ -947,9 +972,9 @@ vm_object_allocate(objtype_t type, vm_pindex_t psize)
 	vmo->vmo_attr = VM_MEMATTR_DEFAULT;
 
 	switch (type) {
-	case OBJT_DEFAULT: {
-		/* XXXJOY: opt-in to larger pages? */
-		vmo->vmo_data = vmem_alloc(vmm_alloc_arena, size, KM_NOSLEEP);
+	case OBJT_DEFAULT:
+		vmo->vmo_data = vm_default_alloc(size);
+
 		if (vmo->vmo_data == NULL) {
 			mutex_destroy(&vmo->vmo_lock);
 			kmem_free(vmo, sizeof (*vmo));
@@ -958,7 +983,6 @@ vm_object_allocate(objtype_t type, vm_pindex_t psize)
 		/* XXXJOY: Better zeroing approach? */
 		bzero(vmo->vmo_data, size);
 		vmo->vmo_pager = vm_object_pager_heap;
-	}
 		break;
 	case OBJT_SG:
 		vmo->vmo_data = NULL;
