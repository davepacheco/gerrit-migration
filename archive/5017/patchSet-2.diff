commit 95bd0ec914890513626414a9f57b24bc7723b842 (refs/changes/17/5017/2)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-11-01T12:33:02-04:00 (11 months ago)
    
    OS-7303 Provisioning zones sometimes hanging during COAL build
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>
    Approved by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 30280a8a..3b366239 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -80,6 +80,8 @@ var execFile = cp.execFile;
 var fs = require('fs');
 var fw = require('/usr/fw/lib/fw');
 var fwlog = require('/usr/fw/lib/util/log');
+var getVmobjJSON = require('/usr/vm/node_modules/vmload/vmload-json').
+    getVmobjJSON;
 var http = require('http');
 var ipaddr = require('/usr/vm/node_modules/ip');
 var jsprim = require('/usr/vm/node_modules/jsprim');
@@ -7922,11 +7924,104 @@ function installZone(payload, log, callback)
         }, function (cb) {
             vs = new vminfod.VminfodEventStream({
                 name: sprintf('VM.js installZone (%s)', payload.uuid),
+                parseReady: true,
                 log: log
             });
-            vs.once('ready', function () {
+            vs.once('ready', function (ready_ev) {
+                // Reload the vmobj after the install
+                try {
+                    vmobj = vminfodEventGetVM(payload.uuid, ready_ev);
+                } catch (e) {
+                    cb(e);
+                    return;
+                }
                 cb();
             });
+        }, function (cb) {
+            /*
+             * OS-7303: As part of the `zoneadm install` process, JSON metadata
+             * may now exist on the VM since its dataset is now available.  We
+             * optionally block here on vminfod to make sure that whatever
+             * metadata *should* be set (as derived from vmload) matches what
+             * vminfod has set.
+             *
+             * The `vmobj` set above by the creation of the VminfodEventStream
+             * will have the latest version of the VM as seen from vminfod.  If
+             * its metadata matches what the filesystem has, we move forward.
+             * If there are any differences, we block here for an event to be
+             * seen showing the metadata has been updated in vminfod.
+             *
+             * Any events that happen after `vmobj` is set are queued up waiting
+             * to be consumed by the call to `watchForEvent` below, so no events
+             * will be missed.  Even though it defaults to false, `startFresh`
+             * is explicitly set to false below to ensure no events are
+             * discarded between when the event stream was created and when we
+             * call `watchForEvent`.
+             */
+            assert.string(vmobj.zonepath, 'vmobj.zonepath');
+
+            // Load metadata from the filesystem
+            getVmobjJSON(vmobj.zonepath, {log: log}, function (err, mdata) {
+                if (err) {
+                    log.error(err, 'getVmobjJSON(%s) failed', vmobj.zonepath);
+                    cb(err);
+                    return;
+                }
+
+                assert.object(mdata, 'mdata');
+
+                log.debug({mdata: mdata}, 'loaded initial image metadata');
+
+                var shouldBlock = false;
+                var obj = {
+                    uuid: payload.uuid,
+                    vm: {}
+                };
+
+                /*
+                 * Loop each piece of metadata found on the filesystem and see
+                 * if it aligns with what vminfod knows.
+                 */
+                Object.keys(mdata).forEach(function (key) {
+                    obj.vm[key] = mdata[key];
+
+                    if (!deepEqual(vmobj[key], obj.vm[key])) {
+                        log.debug({
+                            from: vmobj[key],
+                            to: obj.vm[key]
+                        }, 'waiting on key "%s" to be updated in vminfod', key);
+
+                        shouldBlock = true;
+                    }
+                });
+
+                /*
+                 * Skip blocking on vminfod if no metadata differences were seen
+                 * from vminfod and the filesystem.
+                 */
+                if (!shouldBlock) {
+                    log.debug('no metadata changes - skipping vminfod');
+                    cb();
+                    return;
+                }
+
+                var opts = {
+                    timeout: VMINFOD_TIMEOUT,
+                    startFresh: false,
+                    catchErrors: true
+                };
+
+                vs.watchForEvent(obj, opts, function (vsErr) {
+                    if (vsErr) {
+                        log.error(vsErr,
+                            'vminfod failed to load image metadata');
+
+                        cb(err);
+                        return;
+                    }
+                    cb();
+                });
+            });
         }, function (cb) {
             /*
              * Apply ZFS settings
@@ -8209,8 +8304,12 @@ function installZone(payload, log, callback)
                     ].forEach(function (key) {
                         obj.vm[key] = {};
 
-                        if (vmobj.hasOwnProperty(key)
-                            && Object.keys(vmobj[key]).length > 1) {
+                        if (!deepEqual(vmobj[key], obj.vm[key])) {
+                            log.debug({
+                                from: vmobj[key],
+                                to: obj.vm[key]
+                            }, 'waiting on key "%s" to be cleared in vminfod',
+                                key);
 
                             shouldBlock = true;
                         }
@@ -8221,6 +8320,7 @@ function installZone(payload, log, callback)
                      * modified
                      */
                     if (!shouldBlock) {
+                        log.debug('all metadata cleared - skipping vminfod');
                         cb2();
                         return;
                     }
@@ -8699,7 +8799,14 @@ function installZone(payload, log, callback)
                 vs.stop();
                 vs = null;
             }
-            callback(error);
+
+            if (error) {
+                log.error(error, 'installZone error');
+                callback(error);
+                return;
+            }
+
+            callback();
         }
     );
 }
