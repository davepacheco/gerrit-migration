commit 20a8d834542d8dd04482e19bf3a5630104f0aff8 (refs/changes/25/3625/3)
Author: Rui Loura <rui@joyent.com>
Date:   2018-03-15T15:51:04+00:00 (1 year, 7 months ago)
    
    ops and types added, unit tests passing

diff --git a/etc/svp-types.json b/etc/svp-types.json
index 7095730..714d257 100644
--- a/etc/svp-types.json
+++ b/etc/svp-types.json
@@ -4,7 +4,14 @@
 		"created_at": 1430352621,
 		"derived_from": "src/types",
 		"ctf_version": 2,
-		"requested_types": [ "svp_req_t" , "svp_vl2_req_t" , "svp_vl2_ack_t" , "svp_vl3_req_t" , "svp_vl3_ack_t" , "svp_bulk_req_t" , "svp_bulk_ack_t" , "svp_log_req_t" , "svp_log_vl2_t" , "svp_log_vl3_t" , "svp_log_ack_t" , "svp_lrm_req_t" , "svp_lrm_ack_t" , "svp_shootdown_t" ]
+		"requested_types": [
+            "svp_req_t", "svp_vl2_req_t", "svp_vl2_ack_t",
+            "svp_vl3_req_t", "svp_vl3_ack_t", "svp_bulk_req_t",
+            "svp_bulk_ack_t", "svp_log_req_t", "svp_log_vl2_t",
+            "svp_log_vl3_t", "svp_log_ack_t", "svp_lrm_req_t",
+            "svp_lrm_ack_t", "svp_shootdown_t", "svp_route_req_t",
+            "svp_route_ack_t"
+        ]
 	},
 "data":
 	[
@@ -95,6 +102,23 @@
 			{ "name": "svl3_vnetid", "type": "uint32_t" }
 		] },
 		{ "name": "svp_log_vl3_t", "typedef": "struct svp_log_vl3" },
-		{ "name": "svp_shootdown_t", "typedef": "struct svp_shootdown" }
+		{ "name": "svp_shootdown_t", "typedef": "struct svp_shootdown" },
+		{ "name": "struct svp_route_req", "struct": [
+			{ "name": "srr_vnetid", "type": "uint32_t" },
+			{ "name": "srr_vlan", "type": "uint16_t" },
+			{ "name": "srr_pad", "type": "uint16_t" },
+			{ "name": "srr_srcip", "type": "uint32_t [4]" }
+			{ "name": "srr_dstip", "type": "uint32_t [4]" }
+		] },
+		{ "name": "struct svp_route_ack", "struct": [
+			{ "name": "sra_vnetid", "type": "uint32_t" },
+			{ "name": "sra_vlan", "type": "uint16_t" },
+			{ "name": "sra_prefixlen", "type": "uint8_t" },
+			{ "name": "sra_pad", "type": "uint8_t" },
+			{ "name": "sra_dcid", "type": "uint32_t" },
+			{ "name": "sra_vl2_srcmac", "type": "uint8_t [6]" }
+		] },
+		{ "name": "svp_route_req_t", "typedef": "struct svp_route_req" },
+		{ "name": "svp_route_ack_t", "typedef": "struct svp_route_ack" }
 	]
 }
diff --git a/lib/backend/json.js b/lib/backend/json.js
index baaf92e..0cc8ef9 100644
--- a/lib/backend/json.js
+++ b/lib/backend/json.js
@@ -177,6 +177,8 @@ JsonStore.prototype._transform = function _dssTransform(msg, _enc, callback) {
         return this.logReq(msg, callback);
     case types.svp_op.SVP_R_LOG_RM:
         return this.logRm(msg, callback);
+    case types.svp_op.SVP_R_ROUTE_REQ:
+        return this.routeReq(msg, callback);
     default:
         this.log.warn({ message: msg }, 'unsupported svp_type');
         // XXX: push some sort of error on here?
@@ -334,6 +336,37 @@ JsonStore.prototype.logRm = function _jsonLogRm(_msg, callback) {
     callback();
 };
 
+JsonStore.prototype.routeReq = function _jsonRouteReq(msg, callback) {
+    var self = this;
+
+    // TODO
+    return;
+
+    loadFile(ROUTE_FILE, function _afterRouteLoad(err, table) {
+        if (err) {
+            // XXX: what to do here?
+            callback();
+            return;
+        }
+        // TODO: some stuff
+
+        self.push({
+            svp_type: types.svp_op.SVP_R_ROUTE_ACK,
+            svp_id: msg.svp_id,
+            svp_msg: {
+                vnetid: null, // remote vnet id
+                vlan: null, // remote vlan id
+                prefixlen: null, // prefix of the remote vl3 subnet
+                pad: 0, //hummm
+                dcid: null, // remote datacenter id
+                vl2_srcmac: null, //our vl2 source mac 
+            }
+        });
+        callback();
+        return;
+    });
+};
+
 // --- Exports
 
 
diff --git a/lib/backend/moray.js b/lib/backend/moray.js
index aed1a99..7d44dac 100644
--- a/lib/backend/moray.js
+++ b/lib/backend/moray.js
@@ -243,6 +243,7 @@ MorayStore.prototype._op_svp_r_vl3_req =
                 svp_msg: {
                     vl3_status: types.svp_status.SVP_S_OK,
                     vl3_mac: mapping.mac,
+                    // rui: should this be ul3_addr?
                     vl3_port: cn.port,
                     vl3_addr: common.stringToIp(cn.ip)
                 },
@@ -359,6 +360,48 @@ MorayStore.prototype._op_svp_r_log_rm =
 };
 
 
+MorayStore.prototype._op_svp_r_route_req =
+    function _op_svp_r_route_req(input, log, callback) {
+    var self = this;
+
+    mod_portolan_moray.vnetRouteLookup({
+        log: log,
+        moray: self.moray,
+        src_ip: input.svp_msg.ip,
+        src_vnet_id: input.svp_msg.vnet_id,
+        src_vlan_id: input.svp_msg.vlan_id
+    }, function (vrErr, routes) {
+        if (vrErr) {
+            // TODO: add logging
+            callback(vrErr);
+            return;
+        }
+
+        var r_ip = input.svp_msg.r_ip;
+
+        for (var r in routes) {
+            if (common.cidrContainsIp(r.r_subnet, r_ip)) {
+                var prefixlen = parseInt(r.r_subnet.split('/')[1], 10);
+                var output = {
+                    r_vnet: r.r_vnet_id,
+                    r_vlan: r.r_vlan_id,
+                    r_prefixlen: prefixlen,
+                    pad: 0, // ???
+                    r_dcid: r.r_dc_id,
+                    r_reply_mac: r.r_reply_mac
+                };
+
+                callback(null, output);
+                return;
+            }
+        }
+
+        callback();
+        return;
+    });
+};
+
+
 // --- Backend manipulation
 
 
diff --git a/lib/common.js b/lib/common.js
index 677f9e9..678f078 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -14,6 +14,7 @@
 
 'use strict';
 
+// XXX: Switch to node-ip6addr
 var ipaddr = require('ipaddr.js');
 var types = require('./types');
 var fmt = require('util').format;
@@ -95,6 +96,30 @@ function stringToIp(ip) {
     return (ipaddr.parse(ip));
 }
 
+function cidrContainsIp(cidr, ip) {
+    var addr = stringToIp(ip);
+    var split = cidr.split('/');
+    var prefixlen;
+
+    if (split.length !== 2) {
+        return false;
+    }
+
+    // XXX: what about a hex prefix len?
+    prefixlen = parseInt(split[1], 10);
+
+    /*
+     * Be flexible for IPv4 Mapped subnets with IPv4 prefix lengths
+     */
+    if (cidr.indexOf('::ffff') === 0 && prefixlen < 33) {
+        prefixlen += 96;
+        split[1] = prefixlen;
+        cidr = split.join('/');
+    }
+
+    return addr.match(ipaddr.parseCIDR(cidr));
+}
+
 /**
  * Convert an array of bytes to an integer
  */
@@ -320,6 +345,7 @@ module.exports = {
     ipToString: ipToString,
     ipv4StrTov6: ipv4StrTov6,
     stringToIp: stringToIp,
+    cidrContainsIp: cidrContainsIp,
     macArrToInt: macArrToInt,
     macToArr: macToArr,
     macToInt: macToInt,
diff --git a/lib/framer.js b/lib/framer.js
index db04a5c..0d69f7a 100644
--- a/lib/framer.js
+++ b/lib/framer.js
@@ -96,6 +96,8 @@ SVPFramer.prototype._transform =
         log.debug({ msg_svp_req_hdr: msg.svp_req.hdr, msgCount: msgCount++ },
             'message header');
 
+        // XXX: version check? msg.svp_req.hdr.svp_ver
+
         // There is a distinction between what the message indicates as its
         // size, and the expected size of the message derived from ctypes.
         // We check the former here & the latter in the parser.
diff --git a/lib/parser.js b/lib/parser.js
index 65f5f4d..6ff5f1a 100644
--- a/lib/parser.js
+++ b/lib/parser.js
@@ -253,6 +253,21 @@ SVPparser.prototype._transform =
         };
         break;
 
+    case mod_types.svp_op.SVP_R_ROUTE_REQ:
+        rec.svp_msg = {
+            vnet_id: payload.body.srr_vnetid,
+            vlan_id: payload.body.srr_vlanid,
+            ip: payload.body.srr_srcip,
+            r_ip: payload.body.srr_dstip
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_ROUTE_ACK:
+        rec.svp_msg = {
+            // TODO: rui
+        };
+        break;
+
     default:
         log.warn({ hdr: msg.svp_req.hdr, body: payload.body },
             'unknown message svp_op');
diff --git a/lib/types.js b/lib/types.js
index 4733df1..2fef50a 100644
--- a/lib/types.js
+++ b/lib/types.js
@@ -31,7 +31,10 @@ var op_types = {
     9: 'svp_log_req_t',
     10: 'svp_log_ack_t',
     11: 'svp_lrm_req_t',
-    12: 'svp_lrm_ack_t'
+    12: 'svp_lrm_ack_t',
+    13: 'svp_shootdown_t',
+    14: 'svp_route_req_t',
+    15: 'svp_route_ack_t'
 };
 
 var sizeof = {
@@ -48,7 +51,10 @@ var sizeof = {
     SVP_LOG_VL2: 32,
     SVP_LOG_VL3: 44,
     SVP_R_LOG_RM: 4,
-    SVP_R_LOG_RM_ACK: 4
+    SVP_R_LOG_RM_ACK: 4,
+    SVP_R_SHOOTDOWN: 12,
+    SVP_R_ROUTE_REQ: 40,
+    SVP_R_ROUTE_ACK: 18
 };
 
 var sizeof_ops = {
@@ -61,7 +67,10 @@ var sizeof_ops = {
     9: sizeof.SVP_R_LOG_REQ,
     10: sizeof.SVP_R_LOG_ACK,
     11: sizeof.SVP_R_LOG_RM,
-    12: sizeof.SVP_R_LOG_RM_ACK
+    12: sizeof.SVP_R_LOG_RM_ACK,
+    13: sizeof.SVP_R_SHOOTDOWN,
+    14: sizeof.SVP_R_ROUTE_REQ,
+    15: sizeof.SVP_R_ROUTE_ACK
 };
 
 var svp_op = {
@@ -88,7 +97,9 @@ var svp_op_hex = {
     SVP_R_LOG_ACK: '0x0A',
     SVP_R_LOG_RM: '0x0B',
     SVP_R_LOG_RM_ACK: '0x0C',
-    SVP_R_SHOOTDOWN: '0x0D'
+    SVP_R_SHOOTDOWN: '0x0D',
+    SVP_R_ROUTE_REQ: '0x0E',
+    SVP_R_ROUTE_ACK: '0x0F'
 };
 
 var svp_status = {
diff --git a/test/unit/types.test.js b/test/unit/types.test.js
index 315ae21..aa6e879 100644
--- a/test/unit/types.test.js
+++ b/test/unit/types.test.js
@@ -89,6 +89,24 @@ test('opinfo', function (t) {
             op: svp_op.SVP_R_LOG_RM_ACK,
             sizeof: 4,
             type: 'svp_lrm_ack_t'
+        },
+        {
+            name: 'SVP_R_SHOOTDOWN',
+            op: svp_op.SVP_R_SHOOTDOWN,
+            sizeof: 12,
+            type: 'svp_shootdown_t'
+        },
+        {
+            name: 'SVP_R_ROUTE_REQ',
+            op: svp_op.SVP_R_ROUTE_REQ,
+            sizeof: 40,
+            type: 'svp_route_req_t'
+        },
+        {
+            name: 'SVP_R_ROUTE_ACK',
+            op: svp_op.SVP_R_ROUTE_ACK,
+            sizeof: 18,
+            type: 'svp_route_ack_t'
         }
     ];
 
@@ -99,6 +117,7 @@ test('opinfo', function (t) {
         t.equal(Object.keys(type).length, 4, 'keys');
 
         var opinfo = mod_types.opInfo(type.op);
+
         t.equal(opinfo.name, type.name, type.name + ' name');
         t.equal(opinfo.sizeof, type.sizeof, 'sizeof');
         t.equal(opinfo.sizeofReq, type.sizeof + req_size, 'sizeofReq');
