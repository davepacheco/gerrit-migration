From 76f317140d33d564522b267bd50b7923c4bf7402 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <jwilsdon@joyent.com>
Date: Mon, 18 Mar 2019 16:03:59 -0700
Subject: [PATCH] TRITON-1322 last_heartbeat disappeared when using ServerList

---
 lib/models/server.js            | 226 ++++++++++++++++----------------
 package.json                    |   2 +-
 test/model/test-model-server.js |   2 +-
 3 files changed, 116 insertions(+), 114 deletions(-)

diff --git a/lib/models/server.js b/lib/models/server.js
index 71ae8aa..294469e 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -761,14 +761,12 @@ function (statusUpdate, callback) {
 
 /**
  * Returns a copy of the server model's internal representation retrieved from
- * the memory, or from memory if this object has been previously
- * fetched.
+ * moray. Sets self.value to server object.
  */
 
-ModelServer.prototype.getRaw = function (extras, callback) {
+ModelServer.prototype.getRaw = function getRaw(callback) {
     var self = this;
 
-    assert.object(extras, 'extras');
     assert.func(callback, 'callback');
 
     var uuid = self.uuid;
@@ -780,9 +778,6 @@ ModelServer.prototype.getRaw = function (extras, callback) {
         buckets.servers.name,
         uuid,
         function (error, obj) {
-            var heartbeatInfo =
-                ModelServer.getApp().observedHeartbeats[uuid];
-
             if (error && VError.hasCauseWithName(error, 'ObjectNotFoundError'))
             {
                 self.log.error('Server %s not found in moray', uuid);
@@ -797,34 +792,6 @@ ModelServer.prototype.getRaw = function (extras, callback) {
             server = jsprim.deepCopy(obj.value);
             self.value = obj.value;
 
-            /*
-             * If:
-             *
-             *  - we're the only CNAPI, or we happen to be the CNAPI
-             *    handling this CN
-             *  - the server is running
-             *  - the caller requested extras=last_heartbeat
-             *
-             * we'll include the last_heartbeat value we've got. Otherwise
-             * we'll set it to null.
-             *
-             * NOTE: this field is deprecated, and still exists only for
-             * backward compatibility. All code for extras=last_heartbeat
-             * can be removed in a future version.
-             *
-             */
-            if (extras.last_heartbeat) {
-                if (heartbeatInfo &&
-                    heartbeatInfo.last_heartbeat !== undefined) {
-
-                    self.value.last_heartbeat = server.last_heartbeat =
-                        heartbeatInfo.last_heartbeat;
-                } else {
-                    self.value.last_heartbeat =
-                        server.last_heartbeat = null;
-                }
-            }
-
             callback(null, server);
         });
 };
@@ -897,12 +864,43 @@ ModelServer.initialValues = function (opts, callback) {
 };
 
 
+ModelServer._addHeartbeatInfo = function _addHeartbeatInfo(serverObj) {
+    assert.object(serverObj, 'serverObj');
+    assert.uuid(serverObj.uuid, 'serverObj.uuid');
+
+    var uuid = serverObj.uuid;
+    var heartbeatInfo = ModelServer.getApp().observedHeartbeats[uuid];
+
+    /*
+     * If:
+     *
+     *  - we're the only CNAPI, or we happen to be the CNAPI handling this CN
+     *  - the server is running
+     *  - we have seen a heartbeat for this server since we started
+     *
+     * we'll be able to include the last_heartbeat value we've got. Otherwise
+     * we'll set it to null.
+     *
+     * NOTE: this field is deprecated, and still exists only for backward
+     * compatibility. All code for extras=last_heartbeat can be removed in a
+     * future version and all consumers should stop relying on it.
+     *
+     */
+    if (heartbeatInfo && heartbeatInfo.last_heartbeat !== undefined) {
+        serverObj.last_heartbeat = heartbeatInfo.last_heartbeat;
+    } else {
+        serverObj.last_heartbeat = null;
+    }
+};
+
+
 ModelServer.get = function (uuid, callback) {
     var server = new ModelServer(uuid);
 
-    server.getRaw({
-        last_heartbeat: true
-    }, function (err, serverobj) {
+    server.getRaw(function _gotRaw(err, serverobj) {
+        // We always add last_heartbeat when handling ServerGet
+        ModelServer._addHeartbeatInfo(serverobj);
+
         callback(err, server, serverobj);
     });
 };
@@ -986,7 +984,7 @@ ModelServer.prototype.getFinal = function (opts, callback) {
                 cb();
                 return;
             }
-            self.getRaw(extras, function (getError, s) {
+            self.getRaw(function (getError, s) {
                 if (getError) {
                     cb(getError);
                     return;
@@ -997,6 +995,12 @@ ModelServer.prototype.getFinal = function (opts, callback) {
                 cb();
             });
         },
+        function _addLastHeartbeatIfRequested(cb) {
+            if (extras.last_heartbeat) {
+                ModelServer._addHeartbeatInfo(self.value);
+            }
+            cb();
+        },
         function (cb) {
             self.filterFields(extras, function (filterError, s) {
                 server = s;
@@ -1096,86 +1100,84 @@ ModelServer.prototype.setup = function (params, callback) {
     var uuid = this.uuid;
     var wfParams;
 
-    self.getRaw({}, function (geterror, raw) {
-        wfParams = {
-            // Set nic action to update, so that we add the nic tags
-            // rather than replace or delete
-            nic_action: 'update',
-            amqp_host: ModelServer.getConfig().amqp.host,
-            cnapi_url: ModelServer.getConfig().cnapi.url,
-            assets_url: ModelServer.getConfig().assets.url,
-            server_uuid: uuid,
-            target: uuid
-        };
+    wfParams = {
+        // Set nic action to update, so that we add the nic tags
+        // rather than replace or delete
+        nic_action: 'update',
+        amqp_host: ModelServer.getConfig().amqp.host,
+        cnapi_url: ModelServer.getConfig().cnapi.url,
+        assets_url: ModelServer.getConfig().assets.url,
+        server_uuid: uuid,
+        target: uuid
+    };
 
-        if (params.hasOwnProperty('nics')) {
-            wfParams.nics = params.nics;
-        }
+    if (params.hasOwnProperty('nics')) {
+        wfParams.nics = params.nics;
+    }
 
-        if (params.hasOwnProperty('postsetup_script')) {
-            wfParams.postsetup_script = params.postsetup_script;
-        }
+    if (params.hasOwnProperty('postsetup_script')) {
+        wfParams.postsetup_script = params.postsetup_script;
+    }
 
-        if (params.hasOwnProperty('hostname') && params.hostname) {
-            wfParams.hostname = params.hostname;
-        }
+    if (params.hasOwnProperty('hostname') && params.hostname) {
+        wfParams.hostname = params.hostname;
+    }
 
-        if (params.hasOwnProperty('origin') && params.origin) {
-            wfParams.origin = params.origin;
-        }
+    if (params.hasOwnProperty('origin') && params.origin) {
+        wfParams.origin = params.origin;
+    }
 
-        if (params.hasOwnProperty('creator_uuid') && params.creator_uuid) {
-            wfParams.creator_uuid = params.creator_uuid;
-        }
+    if (params.hasOwnProperty('creator_uuid') && params.creator_uuid) {
+        wfParams.creator_uuid = params.creator_uuid;
+    }
 
-        if (params.hasOwnProperty('disk_spares')) {
-            wfParams.disk_spares = params.disk_spares;
-        }
+    if (params.hasOwnProperty('disk_spares')) {
+        wfParams.disk_spares = params.disk_spares;
+    }
 
-        if (params.hasOwnProperty('disk_width')) {
-            wfParams.disk_width = params.disk_width;
-        }
+    if (params.hasOwnProperty('disk_width')) {
+        wfParams.disk_width = params.disk_width;
+    }
 
-        // Caching is the default, we only need to pass in disk cache
-        // when it's false:
-        if (params.hasOwnProperty('disk_cache') &&
-            params.disk_cache === false) {
-            wfParams.disk_cache = params.disk_cache;
-        }
+    // Caching is the default, we only need to pass in disk cache
+    // when it's false:
+    if (params.hasOwnProperty('disk_cache') &&
+        params.disk_cache === false) {
+        wfParams.disk_cache = params.disk_cache;
+    }
 
-        if (params.hasOwnProperty('disk_layout') && params.disk_layout) {
-            wfParams.disk_layout = params.disk_layout;
-        }
+    if (params.hasOwnProperty('disk_layout') && params.disk_layout) {
+        wfParams.disk_layout = params.disk_layout;
+    }
 
-        vasync.pipeline({funcs: [
-            function _optionallySetHostname(_, cb) {
-                if (params.hasOwnProperty('hostname') && params.hostname) {
-                    ModelServer.upsert(self.uuid, {hostname: params.hostname}, {
-                        etagRetries: 0
-                    }, cb);
-                } else {
-                    cb();
-                }
-            }, function _instantiateSetupWorkflow(_, cb) {
-                self.log.info('Instantiating server-setup workflow');
-                ModelServer.getWorkflow().getClient().createJob(
-                    'server-setup',
-                    wfParams,
-                    function (error, job) {
-                        if (error) {
-                            self.log.error(
-                                'Error in workflow: %s', error.message);
-                            cb(error);
-                            return;
-                        }
-                        job_uuid = job.uuid;
-                        cb();
-                        return;
-                    });
+    vasync.pipeline({funcs: [
+        function _optionallySetHostname(_, cb) {
+            if (params.hasOwnProperty('hostname') && params.hostname) {
+                ModelServer.upsert(self.uuid, {hostname: params.hostname}, {
+                    etagRetries: 0
+                }, cb);
+            } else {
+                cb();
             }
-        ]}, function (err) {
-            callback(err, job_uuid);
-        });
+        }, function _instantiateSetupWorkflow(_, cb) {
+            self.log.info('Instantiating server-setup workflow');
+            ModelServer.getWorkflow().getClient().createJob(
+                'server-setup',
+                wfParams,
+                function (error, job) {
+                    if (error) {
+                        self.log.error(
+                            'Error in workflow: %s', error.message);
+                        cb(error);
+                        return;
+                    }
+                    job_uuid = job.uuid;
+                    cb();
+                    return;
+                });
+        }
+    ]}, function (err) {
+        callback(err, job_uuid);
     });
 };
 
@@ -1297,7 +1299,7 @@ ModelServer.getBootParamsDefault = function (callback) {
 ModelServer.prototype.getBootParams = function (callback) {
     var self = this;
 
-    self.getRaw({}, function (error, server) {
+    self.getRaw(function (error, server) {
         if (error) {
             callback(error);
             return;
@@ -1413,7 +1415,7 @@ ModelServer.prototype.updateBootParams = function (bootParams, callback) {
 
     var payload = {};
 
-    self.getRaw({}, function (error, server) {
+    self.getRaw(function (error, server) {
         if (error) {
             self.logerror('server to be modified did not exist');
             callback(error);
@@ -1539,7 +1541,7 @@ function (opts) {
         // XXX this code is the same as ModelServer.prototype.sendRequest
         // could use some deduplication
         function getSysinfo(wfcb) {
-            self.getRaw({}, function (err, server) {
+            self.getRaw(function (err, server) {
                 if (err) {
                     wfcb(new VError(err, err));
                     return;
@@ -1744,7 +1746,7 @@ ModelServer.prototype.sendRequest = function (opts, cb) {
         // XXX this code is the same as ModelServer.prototype.sendTaskRequest
         // could use some deduplication
         function getSysinfo(wfcb) {
-            self.getRaw({}, function (err, server) {
+            self.getRaw(function (err, server) {
                 if (err) {
                     wfcb(new VError(err, err));
                     return;
diff --git a/package.json b/package.json
index bfa346b..4f216d0 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.21.6",
+  "version": "1.21.7",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/model/test-model-server.js b/test/model/test-model-server.js
index d960573..c0b4d19 100644
--- a/test/model/test-model-server.js
+++ b/test/model/test-model-server.js
@@ -254,7 +254,7 @@ function testFetchServer(test) {
 
         var server = new ModelServer(uuids[0]);
 
-        server.getRaw({}, function (getError, s) {
+        server.getRaw(function (getError, s) {
             test.equal(getError, null, 'should not encounter an error');
 
             test.deepEqual(s, expSearchResults[0], 'results should match');
-- 
2.21.0

