commit 0eda544e072b9c0349e9789cf7a52a0b55bb9b96
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-05-15T12:12:44-04:00 (5 months ago)
    
    MANTA-4271 Add config file parameter to boray

diff --git a/.gitignore b/.gitignore
index 7602895..8368a31 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,3 +17,4 @@ cover_html
 smf/manifests/*.xml
 sapi_manifests/registrar/template
 sdc/sapi_manifests/registrar/template
+config.toml
diff --git a/Cargo.lock b/Cargo.lock
index a96ee19..d96af2d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -140,6 +140,7 @@ dependencies = [
  "slog-term 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "tokio 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)",
  "tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1624,6 +1625,14 @@ dependencies = [
  "tokio-reactor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "toml"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "try-lock"
 version = "0.2.2"
@@ -1932,6 +1941,7 @@ dependencies = [
 "checksum tokio-timer 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)" = "2910970404ba6fa78c5539126a9ae2045d62e3713041e447f695f41405a120c6"
 "checksum tokio-udp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "66268575b80f4a4a710ef83d087fdfeeabdce9b74c797535fbac18a2cb906e92"
 "checksum tokio-uds 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)" = "037ffc3ba0e12a0ab4aca92e5234e0dedeb48fddf6ccd260f1f150a36a9f2445"
+"checksum toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "87c5890a989fa47ecdc7bcb4c63a77a82c18f306714104b1decfd722db17b39e"
 "checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382"
 "checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169"
 "checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86"
diff --git a/Cargo.toml b/Cargo.toml
index 60292bb..b335b3c 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -25,6 +25,7 @@ slog = { version = "2.4.1", features = [ "max_level_trace" ] }
 slog-bunyan = { git = "https://github.com/kellymclaughlin/bunyan", branch = "build-on-smartos" }
 tokio = "0.1.14"
 tokio-postgres = "0.4.0-rc.2"
+toml = "0.5"
 uuid = { version = "0.7", features = ["serde", "v4"] }
 
 [patch.crates-io]
@@ -32,4 +33,4 @@ rand = { git = 'https://github.com/rust-random/rand' }
 
 [dev-dependencies]
 slog-term = "2.4.0"
-url = "1.7.2"
\ No newline at end of file
+url = "1.7.2"
diff --git a/README.md b/README.md
index 37a3836..9a01984 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,9 @@
 # boray
 
 A component of the manta buckets storage system for communicating with Manatee.
+
+## Quick start
+
+    cp config.toml.dist config.toml
+    vi config.toml
+    cargo run -- -c config.toml
diff --git a/config.toml.dist b/config.toml.dist
new file mode 100644
index 0000000..dbc29c6
--- /dev/null
+++ b/config.toml.dist
@@ -0,0 +1,15 @@
+[log]
+level = "debug"
+
+[server]
+host = "0.0.0.0"
+port = 2030
+
+[metrics]
+host = "0.0.0.0"
+port = 3020
+
+[database]
+host = "127.0.0.1"
+port = 5432
+db = "moray"
diff --git a/src/config.rs b/src/config.rs
new file mode 100644
index 0000000..4cc921e
--- /dev/null
+++ b/src/config.rs
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+use serde_derive::Deserialize;
+
+// Describes the layout of `config.toml`
+
+#[derive(Deserialize)]
+pub struct Config {
+    pub log: ConfigLog,
+    pub server: ConfigServer,
+    pub metrics: ConfigMetrics,
+    pub database: ConfigDatabase
+}
+
+#[derive(Deserialize)]
+pub struct ConfigLog {
+    pub level: String
+}
+
+#[derive(Deserialize)]
+pub struct ConfigServer {
+    pub host: String,
+    pub port: u16
+}
+
+#[derive(Deserialize)]
+pub struct ConfigMetrics {
+    pub host: String,
+    pub port: u16
+}
+
+#[derive(Deserialize)]
+pub struct ConfigDatabase {
+    pub host: String,
+    pub port: u16,
+    pub db: String
+}
diff --git a/src/main.rs b/src/main.rs
index 443772f..ee57cc0 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,8 +2,11 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-use std::net::{IpAddr, Ipv4Addr, SocketAddr};
+pub mod config;
+
+use std::net::{IpAddr, SocketAddr};
 use std::sync::Mutex;
+use std::fs;
 use std::thread;
 
 use clap::{crate_version, crate_name, value_t};
@@ -17,30 +20,62 @@ use tokio::prelude::*;
 use rust_fast::server;
 use slog::{error, info};
 
+use toml;
+use config::Config;
+
 fn main() {
     let matches = boray::opts::parse(crate_name!());
 
-    let pg_ip = value_t!(matches, "pg ip", IpAddr)
-        .unwrap_or_else(|_| IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));
-    let pg_port = value_t!(matches, "pg port", u16)
-        .unwrap_or(5432);
-    let pg_db = matches.value_of("pg database")
-        .unwrap_or("moray");
-    let listen_address = matches.value_of("address")
-        .unwrap_or("127.0.0.1");
-    let listen_port = value_t!(matches, "port", u32)
-        .unwrap_or(2030);
-    let metrics_address_str = matches.value_of("metrics-address")
-        .unwrap_or("0.0.0.0");
-    let metrics_port = value_t!(matches, "metrics-port", u32)
-        .unwrap_or(3020);
-
-    let level = matches.value_of("level").unwrap_or("info");
+    let level: String;
+    let host: String;
+    let port: u16;
+    let pg_host: String;
+    let pg_port: u16;
+    let pg_db: String;
+    let metrics_host: String;
+    let metrics_port: u16;
+
+    match matches.value_of("config") {
+        Some(f) => {
+            // Config file found, use that
+            let s = fs::read(f).expect("Failed to read config file");
+            let config: Config = toml::from_slice(&s).expect("failed to parse config file");
+
+            level = config.log.level;
+
+            host = config.server.host;
+            port = config.server.port;
+
+            pg_host = config.database.host;
+            pg_port = config.database.port;
+            pg_db = config.database.db;
+
+            metrics_host = config.metrics.host;
+            metrics_port = config.metrics.port;
+        },
+        None => {
+            // No configuration file found, use CLI arguments
+            level = matches.value_of("level").unwrap_or("info").to_string();
+
+            host = matches.value_of("address").unwrap_or("127.0.0.1").to_string();
+            port = value_t!(matches, "port", u16).unwrap_or(2030);
+
+            pg_host = matches.value_of("pg-ip").unwrap_or("127.0.0.1").to_string();
+            pg_port = value_t!(matches, "pg port", u16).unwrap_or(5432);
+            pg_db = matches.value_of("pg database").unwrap_or("moray").to_string();
+
+            metrics_host = matches.value_of("metrics-address").unwrap_or("0.0.0.0").to_string();
+            metrics_port = value_t!(matches, "metrics-port", u16).unwrap_or(3020);
+        }
+    }
+
+    // XXX postgres host must be an IP address currently
+    let pg_ip: IpAddr = pg_host.parse().expect("postgres host MUST be an IPv4 address");
 
     let filter_level = match level.parse::<Level>() {
         Ok(filter_level) => filter_level,
         Err(_) => {
-            println!("invalid log level: {}", level);
+            eprintln!("invalid log level: {}", level);
             std::process::exit(1);
         }
     };
@@ -57,8 +92,7 @@ fn main() {
 
     // Configure and start metrics server
     let metrics_log = root_log.clone();
-    let metrics_address = metrics_address_str.to_owned();
-    thread::spawn(move || boray::metrics::start_server(metrics_address,
+    thread::spawn(move || boray::metrics::start_server(metrics_host,
                                                        metrics_port,
                                                        metrics_log));
 
@@ -93,7 +127,7 @@ fn main() {
 
     info!(root_log, "established postgres connection pool");
 
-    let addr = [listen_address, &":", &listen_port.to_string()].concat();
+    let addr = [&host, ":", &port.to_string()].concat();
     let addr = addr.parse::<SocketAddr>().unwrap();
 
     let listener = TcpListener::bind(&addr).expect("failed to bind");
diff --git a/src/metrics.rs b/src/metrics.rs
index 752b20e..304b1d8 100644
--- a/src/metrics.rs
+++ b/src/metrics.rs
@@ -29,8 +29,8 @@ lazy_static! {
     )).unwrap();
 }
 
-pub fn start_server(address: String, port: u32, log: Logger) {
-    let addr = [address, String::from(":"), port.to_string()]
+pub fn start_server(address: String, port: u16, log: Logger) {
+    let addr = [&address, ":", &port.to_string()]
         .concat()
         .parse::<SocketAddr>()
         .unwrap();
diff --git a/src/opts.rs b/src/opts.rs
index 9c5ef0f..5020202 100644
--- a/src/opts.rs
+++ b/src/opts.rs
@@ -23,6 +23,12 @@ pub fn parse<'a>(app: &str) -> ArgMatches<'a> {
              .long("pg-db")
              .takes_value(true)
              .required(false))
+        .arg(Arg::with_name("config")
+             .help("Configuration file")
+             .short("c")
+             .long("config")
+             .takes_value(true)
+             .required(false))
         .arg(Arg::with_name("address")
              .help("Listen address")
              .short("a")
