From 501e8cc0f2004a74a58464c9f9a003560f5ad6c0 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 8 Mar 2017 13:06:29 -0800
Subject: [PATCH] IMGAPI-616 Cleanup old failed docker image layer downloads

---
 lib/storage.js | 66 ++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 64 insertions(+), 2 deletions(-)

diff --git a/lib/storage.js b/lib/storage.js
index e41e308..4d39a98 100644
--- a/lib/storage.js
+++ b/lib/storage.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -175,7 +175,69 @@ LocalStorage.prototype.setup = function (callback) {
             return callback(err);
         }
         self.log.info('mkdir -p %s', self.archiveDir);
-        mkdirp(self.archiveDir, callback);
+        mkdirp(self.archiveDir, function (archiveErr) {
+            if (archiveErr) {
+                return callback(archiveErr);
+            }
+            self._cleanupFailedFileDownloads(callback);
+        });
+    });
+};
+
+
+/**
+ * Find failed file downloads and remove them.
+ *
+ * Note: A failed file download will have the filename 'file0.${UUID}'.
+ */
+LocalStorage.prototype._cleanupFailedFileDownloads = function (callback) {
+    var self = this;
+    var log = self.log;
+
+    // Get summary, take the last line of `du` output and get the first field.
+    // Example stdout: '82G     total'
+    utils.spawnRun({
+        argv: ['/bin/sh', '-c',
+            format('/usr/bin/find "%s" -type f -name "file0.*" ' +
+                '-exec /opt/local/bin/du -ch {} + ' +
+                '| /bin/tail -1 | /bin/cut -f1', self.dir)],
+        log: log
+    }, function (err, stdout, stderr) {
+        if (err) {
+            log.error({stderr: stderr, err: err},
+                'cleanupFailedFileDownloads: Error running find-du command');
+            callback(new Error(format(
+                'cleanupFailedFileDownloads find-du error: %s', err)));
+            return;
+        }
+        if (!stdout) {
+            log.info({stderr: stderr},
+                'cleanupFailedFileDownloads: none found');
+            callback();
+            return;
+        }
+
+        log.info('cleanupFailedFileDownloads: reclaiming %s', stdout.trim());
+
+        // Run same find command again, but this time delete the files.
+        utils.spawnRun({
+            argv: ['/bin/sh', '-c',
+                format('/usr/bin/find "%s" -type f -name "file0.*" ' +
+                    '-exec /opt/local/bin/rm -v {} +',
+                    self.dir)],
+            log: log
+        }, function (rmErr, rmStdout, rmStderr) {
+            if (rmErr) {
+                log.error({stdout: rmStdout, stderr: rmStderr, err: rmErr},
+                    'cleanupFailedFileDownloads: Error running rm command');
+                callback(new Error(format(
+                    'cleanupFailedFileDownloads rm error: %s', rmErr)));
+                return;
+            }
+            log.info({stdout: rmStdout},
+                'cleanupFailedFileDownloads: files removed');
+            callback();
+        });
     });
 };
 
-- 
2.21.0

