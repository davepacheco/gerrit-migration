commit 8c77b0c22191016090b8be21e76c36d306b4be54 (refs/changes/19/1819/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-04-20T18:09:26-07:00 (2 years, 6 months ago)
    
    joyent/node-cueball#108 crash: unhandled smgr state transition

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 0ed4d8e..99c945e 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -955,7 +955,24 @@ ConnectionSlotFSM.prototype.state_retrying = function (S) {
 	    'stopping']);
 	var self = this;
 	var smgr = this.csf_smgr;
+	var first = smgr.getState();
 	S.on(smgr, 'stateChanged', function (st) {
+		/*
+		 * Since state_busy checks the smgr's state synchronously to
+		 * decide to come here, it's possible we haven't seen the async
+		 * stateChanged event for the current state yet. If we see it,
+		 * it can only be the very first one we receive. Give it
+		 * special treatment, if so.
+		 *
+		 * Since smgr doesn't re-enter states like 'error' and 'closed'
+		 * in a loop, we won't miss a real transition this way.
+		 */
+		if (st === first) {
+			first = undefined;
+			return;
+		}
+		first = undefined;
+
 		switch (st) {
 		case 'backoff':
 		case 'connecting':
diff --git a/package.json b/package.json
index 067bb6e..30d2e3e 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.2.5",
+  "version": "2.2.6",
   "description": "manage a pool of connections to a multi-node service where nodes are listed in DNS",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index ce47c0a..e960b1b 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -777,6 +777,66 @@ mod_tape.test('claim cancellation', function (t) {
 	});
 });
 
+mod_tape.test('cueball#108', function (t) {
+	connections = [];
+	resolver = undefined;
+
+	recovery.default.retries = 2;
+	var pool = new mod_pool.ConnectionPool({
+		log: log,
+		domain: 'foobar',
+		spares: 2,
+		maximum: 2,
+		constructor: function (backend) {
+			return (new DummyConnection(backend));
+		},
+		recovery: recovery
+	});
+	t.ok(resolver);
+
+	pool.on('stateChanged', function (st) {
+		if (st === 'stopped') {
+			t.end();
+		}
+	});
+
+	resolver.emit('added', 'b1', {});
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		t.deepEqual(counts, { 'b1': 2 });
+
+		index.b1[0].connect();
+		index.b1[1].connect();
+
+		setTimeout(function () {
+			t.ok(pool.isInState('running'));
+
+			t.equal(connections.length, 2);
+			summarize();
+			t.deepEqual(counts, { 'b1': 2 });
+
+			pool.claim(function (err, hdl, conn) {
+				t.ifError(err);
+
+				setTimeout(doFail, 100);
+
+				function doFail() {
+					hdl.close();
+					setImmediate(function () {
+						conn.emit('close');
+						setTimeout(end, 100);
+					});
+				}
+
+				function end() {
+					pool.stop();
+				}
+			});
+		}, 100);
+	});
+});
+
 mod_tape.test('cleanup sandbox', function (t) {
 	sandbox.restore();
 	t.end();
