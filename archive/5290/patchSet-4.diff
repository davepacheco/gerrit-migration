From 2d6e1b2ab9ab055e6287b00fb334cbb6d07e15a7 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Sun, 2 Dec 2018 19:31:02 +1300
Subject: [PATCH] =?UTF-8?q?TRITON-963=20Add=20`CreateDisk`,=20`ResizeDisk`?=
 =?UTF-8?q?=20and=20`DeleteDisk`=20support=20to=20VMAPI's=20client=20Revie?=
 =?UTF-8?q?wed=20by:=20Mike=20Gerdts=20<mike.gerdts@joyent.com>=20Reviewed?=
 =?UTF-8?q?=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>=20A?=
 =?UTF-8?q?pproved=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.c?=
 =?UTF-8?q?om>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 CHANGES.md   |   3 +
 lib/vmapi.js | 166 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 169 insertions(+)

diff --git a/CHANGES.md b/CHANGES.md
index e34bf8a..3eaaf48 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,6 +8,9 @@
 
 ## Not yet released
 
+- TRITON-963 Add `CreateDisk`, `ResizeDisk` and `DeleteDisk` support to VMAPI's
+  client
+
 ## 12.1.1
 
 - MANTA-4030 Drop unused lru-cache dep (and internal "lib/cache.js" lib) to
diff --git a/lib/vmapi.js b/lib/vmapi.js
index 5082f81..e454031 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -780,6 +780,172 @@ VMAPI.prototype.removeNics = function (params, options, callback) {
 
 
 
+/**
+ * Creates and adds a disk to a VM. Returns a Job Response Object
+ *
+ * @param {Object} params : Filter params.
+ * @param {String} params.uuid : the UUID of the VM.
+ * @param {String} params.owner_uuid : Optional, the owner of the VM.
+ * @param {Object} params.context : Optional, value to pass as x-context header
+ * @param {String} params.pci_slot : Optional, PCI slot to be used by new disk
+ * @param {Number | String} params.size : Size in MiB, or "remaining"
+ * @param {Object} options : Request options.
+ * @param {Function} callback : of the form f(err, job).
+ */
+
+VMAPI.prototype.createDisk = function createDisk(params, options, callback) {
+    var query = { action: 'create_disk' };
+
+    if (!params || typeof (params) !== 'object')
+        throw new TypeError('params is required (object)');
+    if (!params.uuid)
+        throw new TypeError('UUID is required');
+    if (params.pci_slot !== undefined && typeof (params.pci_slot) !== 'string')
+        throw new TypeError('pci_slot must be a string');
+    if (isNaN(+params.size) && params.size !== 'remaining')
+        throw new TypeError('size is required (number or \'remaining\')');
+    if (params.origin)
+        query.origin = params.origin;
+    if (params.owner_uuid)
+        query.owner_uuid = params.owner_uuid;
+    if (params.sync)
+        query.sync = 'true';
+
+    var opts = {
+        path: format('/vms/%s', params.uuid),
+        query: query,
+        headers: {}
+    };
+
+    if (options) {
+        if (options.headers)
+            opts.headers = options.headers;
+        opts.log = options.log || this.log;
+    }
+
+    if (params.context) {
+        opts.headers['x-context'] = JSON.stringify(params.context);
+    }
+
+    var args = {
+        pci_slot: params.pci_slot,
+        size: params.size
+    };
+
+    return this.post(opts, args, callback);
+};
+
+
+/**
+ * Resizes a VM's disk. Returns a Job Response Object
+ *
+ * @param {Object} params : Filter params.
+ * @param {String} params.uuid : the UUID of the VM.
+ * @param {String} params.owner_uuid : Optional, the owner of the VM.
+ * @param {Object} params.context : Optional, value to pass as x-context header
+ * @param {String} params.pci_slot : PCI slot of disk to resize.
+ * @param {Number} params.size : New size in MiB of disk.
+ * @param {Boolean} params.dangerous_allow_shrink : Optional, set if resizing
+ *                  down is allowed.
+ * @param {Object} options : Request options.
+ * @param {Function} callback : of the form f(err, job).
+ */
+VMAPI.prototype.resizeDisk = function resizeDisk(params, options, callback) {
+    var query = { action: 'resize_disk' };
+
+    if (!params || typeof (params) !== 'object')
+        throw new TypeError('params is required (object)');
+    if (!params.uuid)
+        throw new TypeError('UUID is required');
+    if (typeof (params.pci_slot) !== 'string')
+        throw new TypeError('pci_slot is required (string)');
+    if (isNaN(+params.size))
+        throw new TypeError('size is required (number)');
+    if (typeof (params.dangerous_allow_shrink) !== 'undefined' &&
+            typeof (params.dangerous_allow_shrink) !== 'boolean')
+        throw new TypeError('size is required (number)');
+    if (params.origin)
+        query.origin = params.origin;
+    if (params.owner_uuid)
+        query.owner_uuid = params.owner_uuid;
+    if (params.sync)
+        query.sync = 'true';
+
+    var opts = {
+        path: format('/vms/%s', params.uuid),
+        query: query,
+        headers: {}
+    };
+
+    if (options) {
+        if (options.headers)
+            opts.headers = options.headers;
+        opts.log = options.log || this.log;
+    }
+
+    if (params.context) {
+        opts.headers['x-context'] = JSON.stringify(params.context);
+    }
+
+    var args = {
+        pci_slot: params.pci_slot,
+        size: params.size,
+        dangerous_allow_shrink: params.dangerous_allow_shrink
+    };
+
+    return this.post(opts, args, callback);
+};
+
+
+/**
+ * Remove and delete a disk off a VM. Returns a Job Response Object
+ *
+ * @param {Object} params : Filter params.
+ * @param {String} params.uuid : the UUID of the VM.
+ * @param {String} params.owner_uuid : Optional, the owner of the VM.
+ * @param {Object} params.context : Optional, value to pass as x-context header
+ * @param {String} params.pci_slot : PCI slot of disk to delete.
+ * @param {Object} options : Request options.
+ * @param {Function} callback : of the form f(err, job).
+ */
+VMAPI.prototype.deleteDisk = function deleteDisk(params, options, callback) {
+    var query = { action: 'delete_disk' };
+
+    if (!params || typeof (params) !== 'object')
+        throw new TypeError('params is required (object)');
+    if (!params.uuid)
+        throw new TypeError('UUID is required');
+    if (typeof (params.pci_slot) !== 'string')
+        throw new TypeError('pci_slot is required (string)');
+    if (params.origin)
+        query.origin = params.origin;
+    if (params.owner_uuid)
+        query.owner_uuid = params.owner_uuid;
+    if (params.sync)
+        query.sync = 'true';
+
+    var opts = {
+        path: format('/vms/%s', params.uuid),
+        query: query,
+        headers: {}
+    };
+
+    if (options) {
+        if (options.headers)
+            opts.headers = options.headers;
+        opts.log = options.log || this.log;
+    }
+
+    if (params.context) {
+        opts.headers['x-context'] = JSON.stringify(params.context);
+    }
+
+    var args = { pci_slot: params.pci_slot };
+
+    return this.post(opts, args, callback);
+};
+
+
 
 /**
  * Starts a VM. Returns a Job Response Object
-- 
2.21.0

