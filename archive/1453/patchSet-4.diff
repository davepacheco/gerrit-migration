commit e0fd5e39e57bc158abf5c93af67102af12b39a3d (refs/changes/53/1453/4)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-02-13T23:53:30+00:00 (2 years, 8 months ago)
    
    MORAY-390 Upgrade Moray to node-fast v2
    MORAY-273 Moray should dump core on uncaught exceptions
    MORAY-335 Moray crashes on bad fast CRC
    MORAY-336 Moray hangs on bad RPC method name
    MORAY-360 Moray throwing TypeErrors, AssertionErrors for some bad input

diff --git a/Makefile b/Makefile
index cd868ad..0f85d15 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -51,7 +51,7 @@ CLEAN_FILES	+= node_modules $(SHRINKWRAP) cscope.files \
 #
 
 NODE_PREBUILT_TAG	= zone
-NODE_PREBUILT_VERSION	:= v0.10.24
+NODE_PREBUILT_VERSION	:= v0.10.48
 NODE_PREBUILT_IMAGE = fd2cc906-8938-11e3-beab-4359c665ac99
 
 # RELENG-341: no npm cache is making builds unreliable
diff --git a/README.md b/README.md
index c0e7c2c..3b149ba 100644
--- a/README.md
+++ b/README.md
@@ -179,6 +179,7 @@ Postgres database without using Manatee. A single function is exported,
 - `bindip`, the IP address to bind to
 - `audit`, a boolean indicating whether to log the result and duration of all
   requests
+- `kang_port`, the port the Kang server should listen on
 - `standalone`, an object specifying the standalone server's configuration:
     * `pg`, an object which specifies the Postgres client pool confguration:
         - `queryTimeout`, how long (in milliseconds) before a query is timed out
diff --git a/boot/setup.sh b/boot/setup.sh
index 6bc05b6..dc820b5 100755
--- a/boot/setup.sh
+++ b/boot/setup.sh
@@ -7,7 +7,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
@@ -117,6 +117,7 @@ function setup_moray {
     local ports
     for (( i=1; i<=$moray_instances; i++ )); do
         ports[$i]=`expr 2020 + $i`
+        kangs[$i]=`expr 3020 + $i`
     done
 
     #Regenerate the registrar config with the real ports included
@@ -154,10 +155,13 @@ function setup_moray {
 
     #moray instances
     local moray_xml_in=$SVC_ROOT/smf/manifests/moray.xml.in
-    for port in "${ports[@]}"; do
+    for (( i=1; i<=$moray_instances; i++ )); do
+        local port=${ports[$i]}
+        local kang=${kangs[$i]}
         local moray_instance="moray-$port"
         local moray_xml_out=$SVC_ROOT/smf/manifests/moray-$port.xml
         sed -e "s#@@MORAY_PORT@@#$port#g" \
+            -e "s#@@KANG_PORT@@#$kang#g" \
             -e "s#@@MORAY_INSTANCE_NAME@@#$moray_instance#g" \
             $moray_xml_in  > $moray_xml_out || \
             fatal "could not process $moray_xml_in to $moray_xml_out"
diff --git a/docs/index.md b/docs/index.md
index d846480..c9b5d81 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -239,7 +239,7 @@ Returns the configuration for all buckets.
      client.listBuckets(function (err, buckets) {
         assert.ifError(err);
         console.log(util.inspect(buckets));
-    });
+     });
 
 ### Inputs
 
diff --git a/lib/buckets/creat.js b/lib/buckets/creat.js
index 3537109..aa3daca 100644
--- a/lib/buckets/creat.js
+++ b/lib/buckets/creat.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -18,6 +18,25 @@ var BucketConflictError = require('../errors').BucketConflictError;
 var InternalError = require('../errors').InternalError;
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'config', type: 'object' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    common.validateBucket,
+    insertConfig,
+    createSequence,
+    createLockingSerial,
+    createTable,
+    createIndexes
+];
+
+
 ///--- Handlers
 
 function insertConfig(req, cb) {
@@ -196,10 +215,18 @@ function createIndexes(req, cb) {
 
 function creat(options) {
     control.assertOptions(options);
-    var route = 'createBucket';
 
-    function _creat(name, cfg, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _creat(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var name = argv[0];
+        var cfg = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         var bucket = {
             name: name,
             index: cfg.index || {},
@@ -214,20 +241,11 @@ function creat(options) {
             bucket: name,
             cfg: cfg,
             opts: opts
-        }, route + ': entered');
+        }, 'createBucket: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                common.validateBucket,
-                insertConfig,
-                createSequence,
-                createLockingSerial,
-                createTable,
-                createIndexes
-            ]
+            funcs: PIPELINE
         });
     }
 
diff --git a/lib/buckets/del.js b/lib/buckets/del.js
index 59375e2..923e331 100644
--- a/lib/buckets/del.js
+++ b/lib/buckets/del.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -20,6 +20,25 @@ var InvalidBucketNameError = mod_errors.InvalidBucketNameError;
 var BucketNotFoundError = mod_errors.BucketNotFoundError;
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    validate,
+    checkExists,
+    deleteConfig,
+    dropTable,
+    dropSequence,
+    dropLockingSerial,
+    common.shootdownBucket
+];
+
+
 ///--- Handlers
 
 function validate(req, cb) {
@@ -170,10 +189,17 @@ function dropLockingSerial(req, cb) {
 
 function del(options) {
     control.assertOptions(options);
-    var route = 'delBucket';
 
-    function _del(bucket, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _del(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var opts = argv[1];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
@@ -181,21 +207,11 @@ function del(options) {
         req.log.debug({
             bucket: bucket,
             opts: opts
-        }, '%s: entered', route);
+        }, 'delBucket: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                validate,
-                checkExists,
-                deleteConfig,
-                dropTable,
-                dropSequence,
-                dropLockingSerial,
-                common.shootdownBucket
-            ]
+            funcs: PIPELINE
         });
     }
 
diff --git a/lib/buckets/get.js b/lib/buckets/get.js
index b0ba3dc..076fed0 100644
--- a/lib/buckets/get.js
+++ b/lib/buckets/get.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -14,6 +14,18 @@ var BucketNotFoundError = require('../errors').BucketNotFoundError;
 var control = require('../control');
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'options', type: 'object' },
+    { name: 'bucket', type: 'string' }
+];
+
+var PIPELINE = [
+    control.getPGHandle,
+    loadBucket
+];
+
 
 ///--- Handlers
 
@@ -61,21 +73,29 @@ function loadBucket(req, cb) {
 
 function get(options) {
     control.assertOptions(options);
-    var route = 'getBucket';
 
-    function _get(opts, bucket, res) {
-        var req = control.buildReq(opts, res, options);
+    function _get(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var opts = argv[0];
+        var bucket = argv[1];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
 
+        req.log.debug({
+            bucket: bucket,
+            opts: opts
+        }, 'getBucket: entered');
+
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {read:true}),
-                loadBucket
-            ],
+            funcs: PIPELINE,
             cbOutput: function () { return req.bucket; }
         });
     }
diff --git a/lib/buckets/list.js b/lib/buckets/list.js
index 1e9d8d3..4dad7dc 100644
--- a/lib/buckets/list.js
+++ b/lib/buckets/list.js
@@ -5,13 +5,23 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
-require('../errors');
 var control = require('../control');
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandle,
+    loadBuckets
+];
+
 
 ///--- Handlers
 
@@ -34,7 +44,7 @@ function loadBuckets(req, cb) {
     q.on('row', function (r) {
         r.options = r.options || {};
         r.options.version = r.options.version || 0;
-        req.res.write(r);
+        req.rpc.write(r);
     });
 
     q.once('end', function () {
@@ -48,18 +58,24 @@ function loadBuckets(req, cb) {
 
 function list(options) {
     control.assertOptions(options);
-    var route = 'listBuckets';
 
-    function _list(opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _list(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var opts = argv[0];
+
+        var req = control.buildReq(opts, rpc, options);
+
+        req.log.debug({
+            opts: opts
+        }, 'listBuckets: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {read:true}),
-                loadBuckets
-            ]
+            funcs: PIPELINE
         });
     }
 
diff --git a/lib/buckets/update.js b/lib/buckets/update.js
index 25c5985..3255f74 100644
--- a/lib/buckets/update.js
+++ b/lib/buckets/update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -25,6 +25,29 @@ var BucketVersionError = mod_errors.BucketVersionError;
 var typeToPg = require('../pg').typeToPg;
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'name', type: 'string' },
+    { name: 'config', type: 'object' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    common.validateBucket,
+    loadBucket,
+    ensureReindexProperty,
+    calculateDiff,
+    ensureRowVer,
+    updateConfig,
+    dropColumns,
+    addColumns,
+    createIndexes,
+    createUniqueIndexes,
+    common.shootdownBucket
+];
+
 
 ///--- Helpers
 
@@ -449,10 +472,18 @@ function createUniqueIndexes(req, cb) {
 
 function update(options) {
     control.assertOptions(options);
-    var route = 'updateBucket';
 
-    function _update(name, cfg, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _update(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var name = argv[0];
+        var cfg = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         var bucket = {
             name: name,
             index: cfg.index || {},
@@ -467,25 +498,11 @@ function update(options) {
             bucket: name,
             cfg: cfg,
             opts: opts
-        }, '%s: entered', route);
+        }, 'updateBucket: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                common.validateBucket,
-                loadBucket,
-                ensureReindexProperty,
-                calculateDiff,
-                ensureRowVer,
-                updateConfig,
-                dropColumns,
-                addColumns,
-                createIndexes,
-                createUniqueIndexes,
-                common.shootdownBucket
-            ]
+            funcs: PIPELINE
         });
     }
 
diff --git a/lib/control.js b/lib/control.js
index 21f5737..7a362f0 100644
--- a/lib/control.js
+++ b/lib/control.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 
@@ -14,7 +14,7 @@ var assert = require('assert-plus');
 var vasync = require('vasync');
 var libuuid = require('libuuid');
 
-require('./errors');
+var InvocationError = require('./errors').InvocationError;
 var pgError = require('./pg').pgError;
 var dtrace = require('./dtrace');
 
@@ -28,27 +28,32 @@ function assertOptions(options) {
     assert.object(options.bucketCache, 'options.bucketCache');
 }
 
-function _getPGHandle(route, manatee, params, begin) {
-    params = params || {};
-    var method = manatee.pg.bind(manatee);
-    if (begin) {
-        // run pg.begin before returning control
-        method = manatee.start.bind(manatee);
+
+function _getPGHandleAfter(req, cb) {
+    function done(startErr, pg) {
+        if (startErr) {
+            req.log.debug(startErr, '%s: no DB handle', req.route);
+            cb(startErr);
+        } else {
+            if (req.opts.timeout)
+                pg.setTimeout(req.opts.timeout);
+            req.pg = pg;
+            cb(null);
+        }
     }
 
-    return function getPGHandle(req, cb) {
-        method(params, function (startErr, pg) {
-            if (startErr) {
-                req.log.debug(startErr, '%s: no DB handle', route);
-                cb(startErr);
-            } else {
-                if (req.opts.timeout)
-                    pg.setTimeout(req.opts.timeout);
-                req.pg = pg;
-                cb(null);
-            }
-        });
-    };
+    return done;
+}
+
+
+function getPGHandle(req, cb) {
+    req.manatee.pg(_getPGHandleAfter(req, cb));
+}
+
+
+function getPGHandleAndTransaction(req, cb) {
+    // run pg.begin before returning control
+    req.manatee.start(_getPGHandleAfter(req, cb));
 }
 
 function releasePGHandle(req) {
@@ -60,21 +65,21 @@ function releasePGHandle(req) {
 
 function handlerPipeline(options) {
     assert.object(options, 'options');
-    assert.string(options.route, 'options.route');
     assert.arrayOfFunc(options.funcs, 'options.funcs');
     assert.object(options.req, 'options.req');
-    assert.object(options.req.res, 'options.req.res');
-    // Modifiers for res.end() and dtrace.fire() output
+    assert.object(options.req.rpc, 'options.req.rpc');
+    assert.string(options.req.route, 'options.req.route');
+    // Modifiers for rpc.end() and dtrace.fire() output
     assert.optionalFunc(options.cbOutput, 'options.cbOutput');
     assert.optionalFunc(options.cbProbe, 'options.cbProbe');
 
-    var route = options.route;
     var req = options.req;
-    var res = req.res;
+    var route = req.route;
+    var rpc = req.rpc;
     var log = req.log;
 
     var cbOutput = options.cbOutput || function () { return null; };
-    var cbProbe = options.cbProbe || function () { return ([res.msgid]); };
+    var cbProbe = options.cbProbe || function () { return ([req.msgid]); };
 
     function pipelineCallback(err) {
         var probe = route.toLowerCase() + '-done';
@@ -94,7 +99,7 @@ function handlerPipeline(options) {
                 req.pg.rollback();
                 req.pg = null;
             }
-            res.end(pgError(err));
+            rpc.fail(pgError(err));
             done();
             return;
         }
@@ -102,15 +107,15 @@ function handlerPipeline(options) {
             req.pg = null;
             if (err2) {
                 log.debug(err2, '%s: failed', route);
-                res.end(pgError(err2));
+                rpc.fail(pgError(err2));
             } else {
                 var result = cbOutput();
                 if (result) {
                     log.debug({result: result}, '%s: done', route);
-                    res.end(result);
+                    rpc.end(result);
                 } else {
                     log.debug('%s: done', route);
-                    res.end();
+                    rpc.end();
                 }
             }
             done();
@@ -122,11 +127,11 @@ function handlerPipeline(options) {
         inputs: options.funcs,
         func: function (handler, cb) {
             dtrace.fire('handler-start', function () {
-                return [res.msgid, route, handler.name, req.req_id];
+                return [req.msgid, route, handler.name, req.req_id];
             });
             handler(options.req, function (err) {
                 dtrace.fire('handler-done', function () {
-                    return [res.msgid, route, handler.name];
+                    return [req.msgid, route, handler.name];
                 });
                 cb(err);
             });
@@ -134,30 +139,129 @@ function handlerPipeline(options) {
     }, pipelineCallback);
 }
 
-function buildReq(opts, res, serverOpts) {
+function buildReq(opts, rpc, serverOpts) {
     assert.object(opts);
-    assert.object(res);
+    assert.object(rpc);
     assert.object(serverOpts);
 
+    var connId = rpc.connectionId();
+    var msgid = rpc.requestId();
+    var route = rpc.methodName();
+    var req_id = opts.req_id || libuuid.create();
+
+    var log = serverOpts.log.child({
+        connId: connId,
+        msgid: msgid,
+        route: route,
+        req_id: req_id
+    });
+
     var req = {
-        req_id: opts.req_id || libuuid.create(),
-        msgid: res.msgid,
+        log: log,
+        req_id: req_id,
+        route: route,
+        connId: connId,
+        msgid: msgid,
         opts: opts,
-        res: res,
+        rpc: rpc,
+        manatee: serverOpts.manatee,
         bucketCache: serverOpts.bucketCache
     };
-    req.log = serverOpts.log.child({
-        req_id: req.req_id
-    });
+
     return req;
 }
 
+
+/*
+ * Validate that the correct number of arguments are provided to an RPC, and are
+ * of the expected type. If the arguments are incorrect, then this function will
+ * handle failing the RPC with an appropriate error, and return 'true'. If the
+ * arguments are okay, then the function will return 'false', and the RPC can
+ * continue normally.
+ *
+ * - rpc: The node-fast rpc object
+ * - argv: The array of arguments provided to the RPC (obtained from rpc.argv())
+ * - types: An array of { name, type } objects describing the arguments expected
+ *   by this RPC, and their types
+ *
+ * Valid types to check for are:
+ *
+ * - array: Check that the argument is an Array
+ * - string: Check that the argument is a nonempty String
+ * - integer: Check that the argument is a nonnegative integer.
+ * - object: Check that the argument is a non-null object.
+ */
+function invalidArgs(rpc, argv, types) {
+    var route = rpc.methodName();
+    var len = types.length;
+
+    if (argv.length !== len) {
+        rpc.fail(new InvocationError(
+            '%s expects %d argument%s', route, len, len === 1 ? '' : 's'));
+        return true;
+    }
+
+    for (var i = 0; i < len; i++) {
+        var name = types[i].name;
+        var type = types[i].type;
+        var val = argv[i];
+
+        switch (type) {
+        case 'array':
+            if (Array.isArray(val)) {
+                break;
+            }
+
+            rpc.fail(new InvocationError(
+                '%s expects "%s" (args[%d]) to be an array',
+                route, name, i));
+            return true;
+        case 'integer':
+            if (typeof (val) === 'number' && val >= 0 &&
+                val === Math.floor(val)) {
+                break;
+            }
+
+            rpc.fail(new InvocationError(
+                '%s expects "%s" (args[%d]) to be a nonnegative integer',
+                route, name, i));
+            return true;
+        case 'object':
+            if (typeof (val) === 'object' && !Array.isArray(val) &&
+                val !== null) {
+                break;
+            }
+
+            rpc.fail(new InvocationError(
+                '%s expects "%s" (args[%d]) to be an object',
+                route, name, i));
+            return true;
+        case 'string':
+            if (typeof (val) === 'string' && val.length > 0) {
+                break;
+            }
+
+            rpc.fail(new InvocationError(
+                '%s expects "%s" (args[%d]) to be a nonempty string',
+                route, name, i));
+            return true;
+        default:
+            throw new Error('Unknown type: ' + type);
+        }
+    }
+
+    return false;
+}
+
+
 ///--- Exports
 
 module.exports = {
     assertOptions: assertOptions,
-    getPGHandle: _getPGHandle,
+    getPGHandle: getPGHandle,
+    getPGHandleAndTransaction: getPGHandleAndTransaction,
     releasePGHandle: releasePGHandle,
     handlerPipeline: handlerPipeline,
+    invalidArgs: invalidArgs,
     buildReq: buildReq
 };
diff --git a/lib/errors.js b/lib/errors.js
index b75bbeb..5b7950c 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -21,8 +21,6 @@ var verror = require('verror');
 
 var WError = verror.WError;
 
-var slice = Function.prototype.call.bind(Array.prototype.slice);
-
 
 
 ///--- Helpers
@@ -217,6 +215,13 @@ function InvalidQueryError(cause, filter) {
 util.inherits(InvalidQueryError, WError);
 
 
+function InvocationError() {
+    WError.apply(this, arguments);
+    this.name = this.constructor.name;
+}
+util.inherits(InvocationError, WError);
+
+
 function NoDatabaseError(cause) {
     WError.call(this, (cause || {}),
                 'Not connected to manatee and/or postgres');
@@ -333,6 +338,7 @@ module.exports = {
     InvalidIndexDefinitionError: InvalidIndexDefinitionError,
     InvalidIndexTypeError: InvalidIndexTypeError,
     InvalidQueryError: InvalidQueryError,
+    InvocationError: InvocationError,
     NoDatabaseError: NoDatabaseError,
     NoDatabasePeersError: NoDatabasePeersError,
     NotFunctionError: NotFunctionError,
diff --git a/lib/manatee.js b/lib/manatee.js
index 81b729d..a7263b3 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var EventEmitter = require('events').EventEmitter;
@@ -27,7 +27,6 @@ var NoDatabasePeersError = require('./errors').NoDatabasePeersError;
 
 ///--- Globals
 
-var slice = Array.prototype.slice;
 var sprintf = util.format;
 
 var DBNAME = process.env.MORAY_DB_NAME || 'moray';
@@ -128,15 +127,10 @@ module.exports = {
 
 ///--- API
 
-Manatee.prototype.pg = function pg(options, callback) {
-    var self = this;
-    if (typeof (options) === 'function') {
-        callback = options;
-        options = {};
-    }
-    assert.object(options, 'options');
+Manatee.prototype.pg = function pg(callback) {
     assert.func(callback, 'callback');
 
+    var self = this;
     var db = self._database;
     var log = self._log;
 
@@ -146,8 +140,7 @@ Manatee.prototype.pg = function pg(options, callback) {
     }
 
     log.debug({
-        db: db,
-        options: options
+        db: db
     }, 'pg: entered');
     db.checkout(function pgCallback(err, client) {
         if (err) {
@@ -164,16 +157,12 @@ Manatee.prototype.pg = function pg(options, callback) {
 };
 
 
-Manatee.prototype.start = function start(opts, cb) {
-    var self = this;
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
+Manatee.prototype.start = function start(cb) {
+    assert.func(cb, 'cb');
 
-    var log = self._log;
+    var log = this._log;
 
-    self.pg(opts, function (pool_err, client) {
+    this.pg(function (pool_err, client) {
         if (pool_err) {
             cb(pool_err);
             return;
diff --git a/lib/objects/batch.js b/lib/objects/batch.js
index d3f31b9..4b1413a 100644
--- a/lib/objects/batch.js
+++ b/lib/objects/batch.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var vasync = require('vasync');
@@ -15,7 +15,9 @@ var clone = require('clone');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
+
+
+///--- Globals
 
 // Operation Pipelines
 var put = require('./put');
@@ -24,6 +26,17 @@ var del = require('./del');
 var deleteMany = require('./del_many');
 
 
+var ARGS_SCHEMA = [
+    { name: 'requests', type: 'array' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    processRequests
+];
+
+
 ///--- Helpers
 
 function mergeOptions(existing, add) {
@@ -49,7 +62,7 @@ function processRequests(req, cb) {
                 log: req.log,
                 pg: req.pg,
                 req_id: req.req_id,
-                res: req.res,
+                rpc: req.rpc,
                 bucketCache: req.bucketCache,
                 opts: mergeOptions(r.options, req.opts)
             };
@@ -80,8 +93,13 @@ function processRequests(req, cb) {
             }
 
             dtrace['batch-op-start'].fire(function () {
-                return ([req.msgid, req.req_id, r.bucket, op,
-                        subReq.key || subReq.filter]);
+                return ([
+                    req.msgid,
+                    req.req_id,
+                    r.bucket,
+                    op,
+                    subReq.key || subReq.filter
+                ]);
             });
 
             vasync.pipeline({
@@ -97,8 +115,8 @@ function processRequests(req, cb) {
                 } else {
                     var out = {
                         bucket: r.bucket,
-                        count: subReq.res._count,
-                        etag: subReq.res._etag
+                        count: subReq._count,
+                        etag: subReq._etag
                     };
                     if (r.key) {
                         out.key = r.key;
@@ -124,27 +142,30 @@ function processRequests(req, cb) {
 
 function batch(options) {
     control.assertOptions(options);
-    var route = 'batch';
 
-    function _batch(requests, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _batch(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var requests = argv[0];
+        var opts = argv[1];
+
+        var req = control.buildReq(opts, rpc, options);
         req.requests = requests;
 
         dtrace['batch-start'].fire(function () {
-            return ([res.msgid, req.req_id]);
+            return ([req.msgid, req.req_id]);
         });
         req.log.debug({
             requests: requests,
             opts: opts
-        }, '%s: entered', route);
+        }, 'batch: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                processRequests
-            ],
+            funcs: PIPELINE,
             cbOutput: function () { return {etags: req.etags}; }
         });
     }
diff --git a/lib/objects/common.js b/lib/objects/common.js
index fac5728..e3a0e60 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -686,7 +686,7 @@ function checkEtag(req, cb) {
 function stdOutput(req) {
     // Default output (used by all but batch and findObjects)
     return (function () {
-        return { count: req.res._count, etag: req.res._etag };
+        return { count: req._count, etag: req._etag };
     });
 }
 
diff --git a/lib/objects/del.js b/lib/objects/del.js
index 73373e8..e57c2dc 100644
--- a/lib/objects/del.js
+++ b/lib/objects/del.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -23,13 +23,22 @@ var EtagConflictError = mod_errors.EtagConflictError;
 
 ///--- Globals
 
-// This is exported so that batch put can leverage it
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'key', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
 var PIPELINE = [
+    control.getPGHandleAndTransaction,
     common.loadBucket,
     drop,
     common.runPostChain
 ];
 
+// This is exported for batch 'delete' operations
+var SUBPIPELINE = PIPELINE.slice(1);
+
 ///--- Handlers
 
 function drop(req, cb) {
@@ -80,10 +89,18 @@ function drop(req, cb) {
 
 function del(options) {
     control.assertOptions(options);
-    var route = 'delObject';
 
-    function _del(bucket, key, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _del(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var key = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
@@ -91,7 +108,7 @@ function del(options) {
         req.etag = (opts.etag || opts._etag);
 
         dtrace['delobject-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, key]);
+            return ([req.msgid, req.req_id, bucket, key]);
         });
         req.log.debug({
             bucket: bucket,
@@ -100,11 +117,8 @@ function del(options) {
         }, 'delObject: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true)
-            ].concat(PIPELINE),
+            funcs: PIPELINE,
             cbOutput: common.stdOutput(req)
         });
     }
@@ -118,5 +132,5 @@ function del(options) {
 
 module.exports = {
     del: del,
-    pipeline: PIPELINE
+    pipeline: SUBPIPELINE
 };
diff --git a/lib/objects/del_many.js b/lib/objects/del_many.js
index a5053a1..1547394 100644
--- a/lib/objects/del_many.js
+++ b/lib/objects/del_many.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -15,13 +15,18 @@ var once = require('once');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
 
 
 ///--- Globals
 
-// This is exported so that batch put can leverage it
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'filter', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
 var PIPELINE = [
+    control.getPGHandleAndTransaction,
     common.parseFilter,
     common.loadBucket,
     common.decorateFilter,
@@ -29,6 +34,9 @@ var PIPELINE = [
     drop
 ];
 
+// This is exported for batch 'deleteMany' operations
+var SUBPIPELINE = PIPELINE.slice(1);
+
 
 ///--- Handlers
 
@@ -60,7 +68,7 @@ function drop(req, cb) {
             id: req._id,
             res: res
         }, 'drop: done');
-        req.res._count = res.rowCount;
+        req._count = res.rowCount;
         cb();
     });
 }
@@ -68,30 +76,35 @@ function drop(req, cb) {
 
 function deleteMany(options) {
     control.assertOptions(options);
-    var route = 'deleteMany';
 
-    function _deleteMany(bucket, filter, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _deleteMany(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var filter = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
         req.rawFilter = filter;
 
         dtrace['delmany-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, filter]);
+            return ([req.msgid, req.req_id, bucket, filter]);
         });
         req.log.debug({
             bucket: bucket,
             filter: filter,
             opts: opts
-        }, '%s: entered', route);
+        }, 'deleteMany: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true)
-            ].concat(PIPELINE),
+            funcs: PIPELINE,
             cbOutput: common.stdOutput(req)
         });
     }
@@ -104,5 +117,5 @@ function deleteMany(options) {
 
 module.exports = {
     deleteMany: deleteMany,
-    pipeline: PIPELINE
+    pipeline: SUBPIPELINE
 };
diff --git a/lib/objects/find.js b/lib/objects/find.js
index 1c34c38..46dbf31 100644
--- a/lib/objects/find.js
+++ b/lib/objects/find.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -13,9 +13,28 @@ var util = require('util');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'filter', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    common.parseFilter,
+    control.getPGHandle,
+    beginRepeatableRead,
+    common.loadBucket,
+    common.decorateFilter,
+    common.buildWhereClause,
+    getCount,
+    getRecords,
+    sendSQL
+];
+
 
 ///--- Handlers
 
@@ -78,7 +97,6 @@ function getRecords(req, cb) {
     var bucket = req.bucket.name;
     var filter = req.filter;
     var log = req.log;
-    var res = req.res;
     var sql = util.format('SELECT *, \'%s\' AS req_id FROM %s %s',
                           req.req_id, bucket, req.where.clause);
 
@@ -151,15 +169,17 @@ function getRecords(req, cb) {
             delete v._key;
             delete v._mtime;
             delete v._count;
-            res.write(obj);
+            req.rpc.write(obj);
             dtrace['findobjects-record'].fire(function () {
-                return ([res.msgid,
-                         obj.key,
-                         obj._id,
-                         obj._etag,
-                         row._value]);
+                return ([
+                    req.msgid,
+                    obj.key,
+                    obj._id,
+                    obj._etag,
+                    row._value
+                ]);
             });
-            res._num_records++;
+            req._num_records++;
         }
     });
 
@@ -173,51 +193,45 @@ function getRecords(req, cb) {
 
 function sendSQL(req, cb) {
     if (req.opts.sql_only) {
-        req.res.write(req.opts._sql);
+        req.rpc.write(req.opts._sql);
     }
     cb(null);
 }
 
 function find(options) {
     control.assertOptions(options);
-    var route = 'findObjects';
 
-    function _find(bucket, filter, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _find(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var filter = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
         req.rawFilter = filter;
-        req.res._num_records = 0;
+        req._num_records = 0;
 
         dtrace['findobjects-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, filter]);
+            return ([req.msgid, req.req_id, bucket, filter]);
         });
         req.log.debug({
             bucket: bucket,
             filter: filter,
             opts: opts
-        }, '%s: entered', route);
+        }, 'findObjects: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                common.parseFilter,
-                control.getPGHandle(route, options.manatee, {
-                    async: false,
-                    read: true
-                }),
-                beginRepeatableRead,
-                common.loadBucket,
-                common.decorateFilter,
-                common.buildWhereClause,
-                getCount,
-                getRecords,
-                sendSQL
-            ],
+            funcs: PIPELINE,
             cbOutput: function () { return; },
-            cbProbe: function () { return [res.msgid, res._num_records]; }
+            cbProbe: function () { return [req.msgid, req._num_records]; }
         });
     }
 
diff --git a/lib/objects/get.js b/lib/objects/get.js
index 724d667..cfe9311 100644
--- a/lib/objects/get.js
+++ b/lib/objects/get.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -20,6 +20,34 @@ var dtrace = require('../dtrace');
 var ObjectNotFoundError = require('../errors').ObjectNotFoundError;
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'key', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    checkCache,
+    function dbConnect(r, cb) {
+        if (r.object) {
+            cb(null);
+        } else {
+            control.getPGHandle(r, cb);
+        }
+    },
+    function loadBucket(r, cb) {
+        if (r.object) {
+            cb();
+        } else {
+            common.loadBucket(r, cb);
+        }
+    },
+    loadObject
+];
+
+
 ///--- Handlers
 
 function checkCache(req, cb) {
@@ -87,10 +115,18 @@ function loadObject(req, cb) {
 function get(options) {
     control.assertOptions(options);
     assert.object(options.objectCache);
-    var route = 'getObject';
 
-    function _get(bucket, key, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _get(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var key = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
@@ -98,36 +134,17 @@ function get(options) {
         req.key = key;
 
         dtrace['getobject-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, key]);
+            return ([req.msgid, req.req_id, bucket, key]);
         });
         req.log.debug({
             bucket: bucket,
             key: key,
             opts: opts
-        }, '%s: entered', route);
+        }, 'getObject: entered');
+
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                checkCache,
-                function dbConnect(r, cb) {
-                    if (r.object) {
-                        cb(null);
-                    } else {
-                        var fetch = control.getPGHandle(route, options.manatee,
-                                {async: false, read: true});
-                        fetch(r, cb);
-                    }
-                },
-                function loadBucket(r, cb) {
-                    if (r.object) {
-                        cb();
-                    } else {
-                        common.loadBucket(r, cb);
-                    }
-                },
-                loadObject
-            ],
+            funcs: PIPELINE,
             cbOutput: function () { return req.object; },
             cbProbe: function () {
                 var val = JSON.stringify(req.object);
diff --git a/lib/objects/put.js b/lib/objects/put.js
index 65742f7..ee113f5 100644
--- a/lib/objects/put.js
+++ b/lib/objects/put.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -17,14 +17,19 @@ var vasync = require('vasync');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
-
 
 
 ///--- Globals
 
-// This is exported so that batch put can leverage it
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'key', type: 'string' },
+    { name: 'value', type: 'object' },
+    { name: 'options', type: 'object' }
+];
+
 var PIPELINE = [
+    control.getPGHandleAndTransaction,
     common.loadBucket,
     common.selectForUpdate,
     common.verifyBucket,
@@ -38,6 +43,8 @@ var PIPELINE = [
     common.runPostChain
 ];
 
+// This is exported fo batch 'put' operations
+var SUBPIPELINE = PIPELINE.slice(1);
 
 
 ///--- Internal Functions
@@ -178,9 +185,9 @@ function insert(req, cb) {
     var q;
     var sql;
 
-    req.res._etag = _createEtag(req);
+    req._etag = _createEtag(req);
     var fields = ['_key', '_value', '_etag', '_mtime', '_vnode'];
-    var values = [req.key, req._value, req.res._etag, _now(), req.value.vnode];
+    var values = [req.key, req._value, req._etag, _now(), req.value.vnode];
     if (req.bucket.options.guaranteeOrder === true) {
         fields.push('_txn_snap');
         values.push(req.value._txn_snap);
@@ -243,10 +250,10 @@ function update(req, cb) {
     var track = (req.bucket.options.trackModification === true);
     var _txn_snap = req.value._txn_snap;
 
-    req.res._etag = _createEtag(req);
+    req._etag = _createEtag(req);
 
     var fields = ['_value', '_etag', '_vnode', '_mtime'];
-    var values = [req._value, req.res._etag, req.value.vnode, _now()];
+    var values = [req._value, req._etag, req.value.vnode, _now()];
     if (req.bucket.reindex_active) {
         /* update _rver if table undergoing reindexing */
         fields.push('_rver');
@@ -332,10 +339,19 @@ function updateSerial(req, cb) {
 
 function put(options) {
     control.assertOptions(options);
-    var route = 'putObject';
 
-    function _put(bucket, key, value, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _put(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var key = argv[1];
+        var value = argv[2];
+        var opts = argv[3];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
@@ -345,7 +361,7 @@ function put(options) {
         req.etag = opts.etag;
 
         dtrace['putobject-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, key, opts._value]);
+            return ([req.msgid, req.req_id, bucket, key, opts._value]);
         });
         req.log.debug({
             bucket: bucket,
@@ -355,11 +371,8 @@ function put(options) {
         }, 'putObject: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true)
-            ].concat(PIPELINE),
+            funcs: PIPELINE,
             cbOutput: common.stdOutput(req)
         });
     }
@@ -372,5 +385,5 @@ function put(options) {
 
 module.exports = {
     put: put,
-    pipeline: PIPELINE
+    pipeline: SUBPIPELINE
 };
diff --git a/lib/objects/reindex.js b/lib/objects/reindex.js
index 7958f96..c889e1e 100644
--- a/lib/objects/reindex.js
+++ b/lib/objects/reindex.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -17,8 +17,23 @@ var vasync = require('vasync');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'count', type: 'integer' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    common.loadBucket,
+    requiresReindex,
+    processRows,
+    recordStatus,
+    countRemaining
+];
 
 ///--- Handlers
 
@@ -225,10 +240,18 @@ function countRemaining(req, cb) {
 
 function reindex(options) {
     control.assertOptions(options);
-    var route = 'reindexObjects';
 
-    function _reindex(bucket, count, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _reindex(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var count = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.count = parseInt(count, 10);
         req.bucket = {
             name: bucket
@@ -237,25 +260,17 @@ function reindex(options) {
         req.opts.noBucketCache = true;
 
         dtrace['reindexobjects-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, count]);
+            return ([req.msgid, req.req_id, bucket, count]);
         });
         req.log.debug({
             bucket: bucket,
             count: count,
             opts: opts
-        }, '%s: entered', route);
+        }, 'reindexObjects: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                common.loadBucket,
-                requiresReindex,
-                processRows,
-                recordStatus,
-                countRemaining
-            ],
+            funcs: PIPELINE,
             cbOutput: function () {
                 var result = { processed: req._processed };
                 if (req._countRemaining !== undefined) {
diff --git a/lib/objects/update.js b/lib/objects/update.js
index 13810b9..de080fd 100644
--- a/lib/objects/update.js
+++ b/lib/objects/update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -24,8 +24,15 @@ var FieldUpdateError = mod_errors.FieldUpdateError;
 
 ///--- Globals
 
-// This is exported so that batch put can leverage it
+var ARGS_SCHEMA = [
+    { name: 'bucket', type: 'string' },
+    { name: 'fields', type: 'object' },
+    { name: 'filter', type: 'string' },
+    { name: 'options', type: 'object' }
+];
+
 var PIPELINE = [
+    control.getPGHandleAndTransaction,
     common.parseFilter,
     common.loadBucket,
     common.decorateFilter,
@@ -33,6 +40,8 @@ var PIPELINE = [
     updateRows
 ];
 
+// This is exported for batch 'update' operations
+var SUBPIPELINE = PIPELINE.slice(1);
 
 ///--- Handlers
 
@@ -98,11 +107,11 @@ function updateRows(req, cb) {
         cb(err);
     });
     q.once('end', function (res) {
-        req.res._etag = etag;
-        req.res._count = res.rowCount;
+        req._etag = etag;
+        req._count = res.rowCount;
         log.debug({
-            count: req.res._count,
-            etag: req.res._etag
+            count: req._count,
+            etag: req._etag
         }, 'updateRows: done');
         cb();
     });
@@ -111,37 +120,43 @@ function updateRows(req, cb) {
 
 function update(options) {
     control.assertOptions(options);
-    var route = 'updateObjects';
 
-    function _update(bucket, fields, filter, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _update(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var bucket = argv[0];
+        var fields = argv[1];
+        var filter = argv[2];
+        var opts = argv[3];
+
+        var req = control.buildReq(opts, rpc, options);
         req.bucket = {
             name: bucket
         };
         req.fields = fields;
         req.fieldKeys = Object.keys(fields);
         if (req.fieldKeys.length === 0) {
-            res.end(new FieldUpdateError(fields));
+            rpc.fail(new FieldUpdateError(fields));
             return;
         }
         req.rawFilter = filter;
 
         dtrace['update-start'].fire(function () {
-            return ([res.msgid, req.req_id, bucket, fields, filter]);
+            return ([req.msgid, req.req_id, bucket, fields, filter]);
         });
         req.log.debug({
             bucket: bucket,
             fields: fields,
             filter: filter,
             opts: opts
-        }, '%s: entered', route);
+        }, 'updateObjects: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true)
-            ].concat(PIPELINE),
+            funcs: PIPELINE,
             cbOutput: common.stdOutput(req)
         });
     }
@@ -154,5 +169,5 @@ function update(options) {
 
 module.exports = {
     update: update,
-    pipeline: PIPELINE
+    pipeline: SUBPIPELINE
 };
diff --git a/lib/pg.js b/lib/pg.js
index 60865e0..23379f9 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 var crypto = require('crypto');
@@ -33,9 +33,6 @@ var UniqueAttributeError = mod_errors.UniqueAttributeError;
 
 ///--- Globals
 
-var slice = Array.prototype.slice;
-var sprintf = util.format;
-
 var CLIENT_ID = 0;
 
 var SERIALIZERS = {
@@ -458,8 +455,10 @@ function PGPool(options) {
 
     function reEmit(event) {
         if (self.log.debug()) {
-            var args = slice(arguments);
-            args.unshift();
+            var args = Array(arguments.length - 1);
+            for (var i = 1; i < arguments.length; i++) {
+               args[i - 1] = arguments[i];
+            }
             self.log.debug('pool event %s: %j', event, args);
         }
 
diff --git a/lib/ping.js b/lib/ping.js
index 7005d1d..f4393f0 100644
--- a/lib/ping.js
+++ b/lib/ping.js
@@ -5,15 +5,22 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
 
 var assert = require('assert-plus');
+var control = require('./control');
 var libuuid = require('libuuid');
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'options', type: 'object' }
+];
+
 
 ///--- Handlers
 
@@ -25,7 +32,13 @@ function ping(options) {
 
     var manatee = options.manatee;
 
-    function _ping(opts, res) {
+    function _ping(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var opts = argv[0];
         var log = options.log.child({
             req_id: opts.req_id || libuuid.create()
         });
@@ -36,14 +49,14 @@ function ping(options) {
 
         if (!opts.deep) {
             log.debug('ping: done');
-            res.end();
+            rpc.end();
             return;
         }
 
         manatee.pg(function (startErr, pg) {
             if (startErr) {
                 log.debug(startErr, 'ping: no DB handle');
-                res.end(startErr);
+                rpc.fail(startErr);
                 return;
             }
 
@@ -55,7 +68,7 @@ function ping(options) {
                 req.removeAllListeners('end');
                 req.removeAllListeners('row');
                 pg.release();
-                res.end(err);
+                rpc.fail(err);
             });
 
             req.once('row', function (r) {
@@ -67,7 +80,7 @@ function ping(options) {
                 req.removeAllListeners('error');
                 req.removeAllListeners('row');
                 pg.release();
-                res.end();
+                rpc.end();
             });
         });
 
@@ -81,16 +94,23 @@ function version(options, ver) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
 
-    function _version(opts, res) {
+    function _version(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var opts = argv[0];
         var log = options.log.child({
             req_id: opts.req_id || libuuid.create()
         });
         log.debug({
             opts: opts
         }, 'version: entered');
-        res.end({version: ver});
-        log.debug('request done');
+        rpc.end({ version: ver });
+        log.debug('version: done');
     }
+
     return (_version);
 }
 
diff --git a/lib/server.js b/lib/server.js
index 06d51bf..284075d 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -5,18 +5,23 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
 var EventEmitter = require('events').EventEmitter;
 
 var assert = require('assert-plus');
-var fast = require('fast');
 var libuuid = require('libuuid');
+var mod_fast = require('fast');
+var mod_kang = require('kang');
+var mod_net = require('net');
+var mod_os = require('os');
 var VError = require('verror').VError;
 var LRU = require('lru-cache');
+var vasync = require('vasync');
 
+var control = require('./control');
 var buckets = require('./buckets');
 var objects = require('./objects');
 var ping = require('./ping');
@@ -25,14 +30,16 @@ var sql = require('./sql');
 
 ///--- Globals
 
-var slice = Function.prototype.call.bind(Array.prototype.slice);
-
+// API version, increment for depended-upon changes
+var API_VERSION = 2;
 
 
 ///--- API
 
 
 function MorayServer(options) {
+    var self = this;
+
     EventEmitter.call(this);
 
     var log = options.log;
@@ -61,63 +68,71 @@ function MorayServer(options) {
         bucketCache: this.ms_bucketCache,
         objectCache: this.ms_objectCache
     };
-    var server = fast.createServer({log: log});
-
-    server.rpc('createBucket', buckets.creat(opts));
-    server.rpc('getBucket', buckets.get(opts));
-    server.rpc('listBuckets', buckets.list(opts));
-    server.rpc('updateBucket', buckets.update(opts));
-    server.rpc('delBucket', buckets.del(opts));
-    server.rpc('putObject', objects.put(opts));
-    server.rpc('batch', objects.batch(opts));
-    server.rpc('getObject', objects.get(opts));
-    server.rpc('delObject', objects.del(opts));
-    server.rpc('findObjects', objects.find(opts));
-    server.rpc('updateObjects', objects.update(opts));
-    server.rpc('reindexObjects', objects.reindex(opts));
-    server.rpc('deleteMany', objects.deleteMany(opts));
-    server.rpc('getTokens', getTokens(opts));
-    server.rpc('sql', sql.sql(opts));
-    server.rpc('ping', ping.ping(opts));
-    // API version, increment for depended-upon changes
-    var API_VERSION = 2;
-    server.rpc('version', ping.version(opts, API_VERSION));
+
+    var socket = mod_net.createServer({ 'allowHalfOpen': true });
+    var server = new mod_fast.FastServer({
+        log: log.child({ component: 'fast' }),
+        server: socket
+    });
+
+    var methods = [
+        { rpcmethod: 'createBucket', rpchandler: buckets.creat(opts) },
+        { rpcmethod: 'getBucket', rpchandler: buckets.get(opts) },
+        { rpcmethod: 'listBuckets', rpchandler: buckets.list(opts) },
+        { rpcmethod: 'updateBucket', rpchandler: buckets.update(opts) },
+        { rpcmethod: 'delBucket', rpchandler: buckets.del(opts) },
+        { rpcmethod: 'putObject', rpchandler: objects.put(opts) },
+        { rpcmethod: 'batch', rpchandler: objects.batch(opts) },
+        { rpcmethod: 'getObject', rpchandler: objects.get(opts) },
+        { rpcmethod: 'delObject', rpchandler: objects.del(opts) },
+        { rpcmethod: 'findObjects', rpchandler: objects.find(opts) },
+        { rpcmethod: 'updateObjects', rpchandler: objects.update(opts) },
+        { rpcmethod: 'reindexObjects', rpchandler: objects.reindex(opts) },
+        { rpcmethod: 'deleteMany', rpchandler: objects.deleteMany(opts) },
+        { rpcmethod: 'getTokens', rpchandler: getTokens(opts) },
+        { rpcmethod: 'sql', rpchandler: sql.sql(opts) },
+        { rpcmethod: 'ping', rpchandler: ping.ping(opts) },
+        { rpcmethod: 'version', rpchandler: ping.version(opts, API_VERSION) }
+    ];
 
     if (options.audit !== false) {
-        server.on('after', function (name, req, res) {
-            var t = Math.floor(res.elapsed / 1000);
-            var obj = {
-                method: name,
-                'arguments': req,
-                serverTime: t + 'ms'
-            };
-
-            log.info(obj, 'request handled');
-        });
+        // XXX: Implement this!
+        throw new Error('Implement me!');
     }
 
-    server.on('error', function (err) {
-        log.error(err, 'server error');
-        throw new VError(err, 'unsolicited server error');
-    });
-    server.on('uncaughtException', function (err) {
-        log.error(err, 'uncaught: server error');
-        var args = slice(arguments);
-        args.shift();
-        args[args.length - 1].end(err);
+    methods.forEach(function (rpc) {
+        server.registerRpcMethod(rpc);
     });
 
     this.port = options.port;
     this.ip = options.bindip;
 
+    this.fast_socket = socket;
     this.fast_server = server;
+    this.kang_server = null;
     this.db_conn = db;
     this.log = options.log;
 
-    var self = this;
+    if (options.kang_port) {
+        mod_kang.knStartServer({
+            port: options.kang_port,
+            host: options.bindip,
+            uri_base: '/kang',
+            service_name: 'moray',
+            version: API_VERSION.toString(),
+            ident: mod_os.hostname() + '/' + process.pid,
+            list_types: server.kangListTypes.bind(server),
+            list_objects: server.kangListObjects.bind(server),
+            get: server.kangGetObject.bind(server),
+            stats: server.kangStats.bind(server)
+        }, function (err, kang) {
+            self.kang_server = kang;
+        });
+    }
+
     ['listening', 'error'].forEach(function (event) {
         // re-emit certain events from fast server
-        self.fast_server.on(event, self.emit.bind(self, event));
+        self.fast_socket.on(event, self.emit.bind(self, event));
     });
     ['ready'].forEach(function (event) {
         // re-emit certain events from manatee
@@ -129,16 +144,46 @@ util.inherits(MorayServer, EventEmitter);
 
 MorayServer.prototype.listen = function listen() {
     var self = this;
-    this.fast_server.listen(this.port, this.ip, function () {
-        self.log.info('moray listening on %d', self.port);
+    this.fast_socket.listen(this.port, this.ip, function (err) {
+        if (err) {
+            self.log.error(err, 'failed to start Moray on %d', self.port);
+            // XXX: retry
+        } else {
+            self.log.info('Moray listening on %d', self.port);
+        }
     });
 };
 
 
 MorayServer.prototype.close = function close() {
-    this.fast_server.close();
-    this.db_conn.on('close', this.emit.bind(this, 'close'));
-    this.db_conn.close();
+    var self = this;
+
+    vasync.parallel({
+        funcs: [
+            function (cb) {
+                self.fast_socket.on('close', function () {
+                    self.fast_server.close();
+
+                    if (self.kang_server !== null) {
+                        self.kang_server.close();
+                    }
+
+                    cb();
+                });
+                self.fast_socket.close();
+            },
+            function (cb) {
+                self.db_conn.on('close', cb);
+                self.db_conn.close();
+            }
+        ]
+    }, function (err) {
+        if (err) {
+            throw err;
+        }
+
+        self.emit('close');
+    });
 };
 
 
@@ -161,11 +206,21 @@ module.exports = {
 
 ///--- Privates
 
+var GET_TOKENS_ARGS = [
+    { name: 'options', type: 'object' }
+];
+
 function getTokens(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
 
-    function _getTokens(opts, res) {
+    function _getTokens(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, GET_TOKENS_ARGS)) {
+            return;
+        }
+
+        var opts = argv[0];
         var id = opts.req_id || libuuid.create();
         var log = options.log.child({
             req_id: id
@@ -173,7 +228,7 @@ function getTokens(options) {
 
         log.debug('getTokens: entered');
 
-        res.end(new Error('Operation not supported'));
+        rpc.fail(new Error('Operation not supported'));
     }
 
     return _getTokens;
diff --git a/lib/sql.js b/lib/sql.js
index b51abf6..a9e7297 100644
--- a/lib/sql.js
+++ b/lib/sql.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var once = require('once');
@@ -14,6 +14,20 @@ var pgError = require('./pg').pgError;
 var control = require('./control');
 
 
+///--- Globals
+
+var ARGS_SCHEMA = [
+    { name: 'statement', type: 'string' },
+    { name: 'values', type: 'array' },
+    { name: 'options', type: 'object' }
+];
+
+var PIPELINE = [
+    control.getPGHandleAndTransaction,
+    execSql
+];
+
+
 ///--- Handlers
 
 function execSql(req, cb) {
@@ -28,7 +42,7 @@ function execSql(req, cb) {
     var q = pg.query(req.stmt, req.values);
 
     q.on('row', function (r) {
-        req.res.write(r);
+        req.rpc.write(r);
     });
 
     q.once('error', cb);
@@ -38,10 +52,18 @@ function execSql(req, cb) {
 
 function sql(options) {
     control.assertOptions(options);
-    var route = 'sql';
 
-    function _sql(stmt, values, opts, res) {
-        var req = control.buildReq(opts, res, options);
+    function _sql(rpc) {
+        var argv = rpc.argv();
+        if (control.invalidArgs(rpc, argv, ARGS_SCHEMA)) {
+            return;
+        }
+
+        var stmt = argv[0];
+        var values = argv[1];
+        var opts = argv[2];
+
+        var req = control.buildReq(opts, rpc, options);
         req.stmt = stmt;
         req.values = values;
 
@@ -49,15 +71,11 @@ function sql(options) {
             stmt: stmt,
             values: values,
             opts: opts
-        }, '%s: entered', route);
+        }, 'sql: entered');
 
         control.handlerPipeline({
-            route: route,
             req: req,
-            funcs: [
-                control.getPGHandle(route, options.manatee, {}, true),
-                execSql
-            ]
+            funcs: PIPELINE
         });
     }
 
diff --git a/lib/standalone.js b/lib/standalone.js
index aa0ef47..0e9e080 100644
--- a/lib/standalone.js
+++ b/lib/standalone.js
@@ -1,4 +1,12 @@
-// Copyright (c) 2013 Joyent, Inc.  All rights reserved.
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
 
 var EventEmitter = require('events').EventEmitter;
 var util = require('util');
@@ -101,12 +109,7 @@ function Standalone(options) {
 util.inherits(Standalone, EventEmitter);
 
 
-Standalone.prototype.pg = function pg(options, callback) {
-    if (typeof (options) === 'function') {
-        callback = options;
-        options = {};
-    }
-    assert.object(options, 'options');
+Standalone.prototype.pg = function pg(callback) {
     assert.func(callback, 'callback');
 
     // XXX MANTA-734 - take out db selection logic for now and solely
@@ -120,8 +123,7 @@ Standalone.prototype.pg = function pg(options, callback) {
     }
 
     log.debug({
-        db: db,
-        options: options
+        db: db
     }, 'pg: entered');
     db.checkout(function pgCallback(err, client) {
         if (err) {
@@ -138,15 +140,10 @@ Standalone.prototype.pg = function pg(options, callback) {
 };
 
 
-Standalone.prototype.start = function start(opts, cb) {
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-
+Standalone.prototype.start = function start(cb) {
     var log = this.log;
 
-    this.pg(opts, function (pool_err, client) {
+    this.pg(function (pool_err, client) {
         if (pool_err) {
             cb(pool_err);
             return;
diff --git a/main.js b/main.js
index 172ce38..9f091ee 100644
--- a/main.js
+++ b/main.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -17,7 +17,6 @@ var bunyan = require('bunyan');
 var clone = require('clone');
 var extend = require('xtend');
 var getopt = require('posix-getopt');
-var panic = require('panic');
 var VError = require('verror').VError;
 
 
@@ -29,6 +28,7 @@ var app = require('./lib');
 
 var DEFAULTS = {
     file: process.cwd() + '/etc/config.json',
+    kang_port: 3020,
     port: 2020,
     bindip: '0.0.0.0'
 };
@@ -93,7 +93,7 @@ function setupLogger(config) {
 function parseOptions() {
     var option;
     var opts = {};
-    var parser = new getopt.BasicParser('cvf:p:', process.argv);
+    var parser = new getopt.BasicParser('cvf:p:k:', process.argv);
 
     while ((option = parser.getopt()) !== undefined) {
         switch (option.option) {
@@ -115,6 +115,14 @@ function parseOptions() {
             }
             break;
 
+        case 'k':
+            opts.kang_port = parseInt(option.optarg, 10);
+            if (isNaN(opts.kang_port)) {
+                LOG.fatal({ port: option.optarg }, 'Invalid port');
+                throw new Error('Invalid port: ' + option.optarg);
+            }
+            break;
+
         case 'v':
             // Allows us to set -vvv -> this little hackery
             // just ensures that we're never < TRACE
@@ -191,9 +199,4 @@ function run(options) {
             process.exit(0);
         });
     }
-
-    panic.enablePanicOnCrash({
-        'skipDump': true,
-        'abortOnPanic': true
-    });
 })();
diff --git a/package.json b/package.json
index 5477297..59d9cf2 100644
--- a/package.json
+++ b/package.json
@@ -13,8 +13,9 @@
         "crc": "0.2.1",
         "dtrace-provider": "0.2.8",
         "deep-equal": "0.0.0",
-        "fast": "0.3.6",
+        "fast": "2.2.2",
         "ip6addr": "0.1.1",
+        "kang": "git+https://github.com/melloc/kang.git#url-parse",
         "moray-filter": "1.0.0",
         "libuuid": "0.1.3",
         "lru-cache": "2.5.0",
@@ -23,7 +24,6 @@
         "moray": "git+https://github.com/joyent/node-moray.git#fd5781b",
         "microtime": "0.5.1",
         "once": "1.3.0",
-        "panic": "0.2.1",
         "pg": "2.11.0",
         "pg-parse-float": "0.0.1",
         "pooling": "0.4.5",
diff --git a/smf/manifests/moray.xml.in b/smf/manifests/moray.xml.in
index 6e0d9cf..59b254c 100644
--- a/smf/manifests/moray.xml.in
+++ b/smf/manifests/moray.xml.in
@@ -7,7 +7,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 <service_bundle type="manifest" name="smartdc-moray">
@@ -44,7 +44,7 @@
         <exec_method
             type="method"
             name="start"
-            exec="node main.js -f etc/config.json -p %{moray/port} &amp;"
+            exec="node --abort-on-uncaught-exception main.js -f etc/config.json -p %{moray/port} -k %{moray/kang} &amp;"
             timeout_seconds="30">
             <method_context working_directory="/opt/smartdc/moray">
                 <method_credential user="nobody"
@@ -70,6 +70,7 @@
         <instance name="@@MORAY_INSTANCE_NAME@@" enabled="true">
           <property_group name="moray" type="application">
             <propval name="port" type="astring" value="@@MORAY_PORT@@" />
+            <propval name="kang" type="astring" value="@@KANG_PORT@@" />
           </property_group>
         </instance>
 
