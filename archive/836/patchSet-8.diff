From 67668734f7c5533c24bda1e9f8a5c8d098b21dc1 Mon Sep 17 00:00:00 2001
From: Trent Mick <trent.mick@joyent.com>
Date: Wed, 9 Nov 2016 14:36:28 -0800
Subject: [PATCH] joyent/node-manta#284 improvements to CLI -h/--help output
 joyent/node-manta#279 mjob should expressly list out allowed sizes for memory
 Reviewed by: Chris Burroughs <chris.burroughs@joyent.com> Approved by: Dave
 Pacheco <dap@joyent.com>

---
 CHANGES.md           |   8 +-
 bin/mchattr          |   7 +-
 bin/mchmod           |  17 ++-
 bin/mfind            |  11 +-
 bin/mget             |   6 +-
 bin/minfo            |   6 +-
 bin/mjob             | 253 ++++++++++++++++++++++++++++---------------
 bin/mln              |   6 +-
 bin/mlogin           |  11 +-
 bin/mls              |   6 +-
 bin/mmd5             |   3 +-
 bin/mmkdir           |   6 +-
 bin/mput             |   8 +-
 bin/mrm              |  10 +-
 bin/mrmdir           |   3 +-
 bin/msign            |   6 +-
 bin/muntar           |   8 +-
 docs/man/mfind.md    |   4 +-
 docs/man/mjob.md     |  11 +-
 docs/man/mrm.md      |   4 +-
 docs/man/muntar.md   |   4 +-
 lib/create_client.js |  50 +++++----
 man/man1/mfind.1     |   4 +-
 man/man1/mjob.1      |  11 +-
 man/man1/mrm.1       |   7 +-
 man/man1/muntar.1    |   7 +-
 package.json         |   4 +-
 27 files changed, 312 insertions(+), 169 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 76b798e..a57d3a5 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,7 +6,13 @@
 - joyent/node-manta#282 `mchmod` now parses all standard options.  The use of
   the `--` form is encouraged to avoid ambiguities in role versus option names
   (ex: `mchmod -- -read,write ~~/stor/foo.txt`).
-- joyent/node-manta#280 honor options with job expressions
+- joyent/node-manta#280 Ensure that `--disk`, `--memory`, and `--init`
+  options are used with `mjob create MAP_PHASE ^ MAP_PHASE ^^ REDUCE_PHASE`
+  style job creation.
+- joyent/node-manta#279 Improvements to help output for all CLIs.
+  Also add the `mjob create --dry-run ...` option to print the created
+  job object and exit. This is useful for exploring and testing `mjob create`s
+  many options.
 
 ## 3.1.3
 
diff --git a/bin/mchattr b/bin/mchattr
index f759774..016bee6 100755
--- a/bin/mchattr
+++ b/bin/mchattr
@@ -16,14 +16,19 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
+
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['header', 'H'],
             type: 'arrayOfString',
diff --git a/bin/mchmod b/bin/mchmod
index 57f1871..3269d7f 100755
--- a/bin/mchmod
+++ b/bin/mchmod
@@ -12,20 +12,19 @@ var dashdash = require('dashdash');
 
 var manta = require('../lib');
 
-var name = path.basename(process.argv[1]);
-
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
+
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS,
-    allowUnknown: true
+    options: manta.DEFAULT_CLI_OPTIONS
 });
 
 
@@ -34,14 +33,14 @@ var OPTIONS_PARSER = dashdash.createParser({
 
 function ifError(err) {
     if (err) {
-        console.error('%s: %s', name, err.toString());
+        console.error('%s: %s', NAME, err.toString());
         process.exit(1);
     }
 }
 
 
 function parseMchmodOptions(args) {
-    if (args.length < 2) {
+    if (args.length < 1) {
         manta.cli_usage(OPTIONS_PARSER, 'role required',
                                         '-- [+-=]role,... path...');
     }
@@ -133,8 +132,8 @@ function printEntry(obj) {
 
         client.info(p, options, function (err, info, res) {
             if (err && err.name === 'AuthorizationFailedError') {
-                console.error('%s: getobject access required for %s %s', name,
-                    name, options.mchmodOperation);
+                console.error('%s: getobject access required for %s %s', NAME,
+                    NAME, options.mchmodOperation);
                 process.exit(1);
             }
             ifError(err);
diff --git a/bin/mfind b/bin/mfind
index ecc71f8..b562743 100755
--- a/bin/mfind
+++ b/bin/mfind
@@ -20,15 +20,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
-var CLIENT;
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: require('path').basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['limit', 'l'],
             type: 'positiveInteger',
@@ -44,9 +47,9 @@ var OPTIONS_PARSER = dashdash.createParser({
         {
             names: ['parallel', 'p'],
             type: 'positiveInteger',
-            help: 'limit concurrent operations',
+            help: 'limit concurrent operations (default 50)',
             'default': 50,
-            helpArg: 'CONCURRENCY'
+            helpArg: 'NUM'
         },
         {
             names: ['size', 's'],
diff --git a/bin/mget b/bin/mget
index ed6ec1a..5075e56 100755
--- a/bin/mget
+++ b/bin/mget
@@ -18,14 +18,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['header', 'H'],
             type: 'arrayOfString',
diff --git a/bin/minfo b/bin/minfo
index 11dfa67..ba6383a 100755
--- a/bin/minfo
+++ b/bin/minfo
@@ -12,12 +12,12 @@ var dashdash = require('dashdash');
 
 var manta = require('../lib');
 
-var name = path.basename(process.argv[1]);
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: name,
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
@@ -32,7 +32,7 @@ var OPTIONS_PARSER = dashdash.createParser({
 
 function ifError(err) {
     if (err) {
-        console.error('%s: %s', name, err.toString());
+        console.error('%s: %s', NAME, err.toString());
         process.exit(1);
     }
 }
diff --git a/bin/mjob b/bin/mjob
index 4d25f11..da37d0c 100755
--- a/bin/mjob
+++ b/bin/mjob
@@ -28,8 +28,9 @@ var sprintf = util.format;
 
 var JOB_DATA_FMT = '/%s/jobs/%s/%s.txt';
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
@@ -46,7 +47,7 @@ function assertOpts(thisp, subcmd, opts, cb) {
         return (false);
     }
 
-    manta.handleOptsVersion(opts);
+    manta.cliVersionCheckPrintAndExit(opts);
 
     try {
         manta.checkBinEnv(opts);
@@ -443,7 +444,11 @@ function MJob() {
                 type: 'bool',
                 help: 'Print version and exit.'
             }
-        ]});
+        ],
+        helpOpts: {
+            includeEnv: true
+        }
+    });
 }
 util.inherits(MJob, cmdln.Cmdln);
 
@@ -479,6 +484,9 @@ MJob.prototype.do_addinputs = function do_addinputs(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_addinputs.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob addinputs options'
+    },
     {
         names: ['batch', 'b'],
         type: 'positiveInteger',
@@ -489,9 +497,9 @@ MJob.prototype.do_addinputs.options = manta.DEFAULT_CLI_OPTIONS.concat([
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 25)',
         'default': 25,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     },
     {
         names: ['open', 'o'],
@@ -546,12 +554,15 @@ MJob.prototype.do_cancel = function do_cancel(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_cancel.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob cancel options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -702,6 +713,12 @@ MJob.prototype.do_create = function create(subcmd, opts, args, cb) {
         return;
     }
 
+    if (opts.dry_run) {
+        console.log(JSON.stringify(job, null, 4));
+        cb();
+        return;
+    }
+
     var client = createClient(opts);
     client.createJob(job, function (err, id) {
         if (err) {
@@ -758,6 +775,9 @@ MJob.prototype.do_create = function create(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_create.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob create options'
+    },
     {
         names: ['batch', 'b'],
         type: 'positiveInteger',
@@ -776,47 +796,10 @@ MJob.prototype.do_create.options = manta.DEFAULT_CLI_OPTIONS.concat([
         help: 'do not leave job waiting for inputs'
     },
     {
-        names: ['count'],
-        type: 'positiveInteger',
-        help: 'number of reducers to create',
-        helpArg: 'REDUCERS',
-        'default': 1
-    },
-    {
-        names: ['disk'],
-        type: 'positiveInteger',
-        help: 'amount of disk space available for all phases (gigabytes)',
-        helpArg: 'DISK_GB'
-    },
-    {
-        names: ['memory'],
-        type: 'positiveInteger',
-        help: 'amount of memory available for all phases (megabytes)',
-        helpArg: 'MEMORY_MB'
-    },
-    {
-        names: ['file', 'f'],
-        type: 'string',
-        help: 'manifest file to create job from',
-        helpArg: 'FILE'
-    },
-    {
-        names: ['image'],
-        type: 'string',
-        help: 'Allowed compute image string (semver)',
-        helpArg: 'IMAGE_SEMVER'
-    },
-    {
-        names: ['init'],
-        type: 'string',
-        help: 'command to run before execution; must be valid bash script',
-        helpArg: 'INIT_COMMAND'
-    },
-    {
-        names: ['map', 'm'],
-        type: 'arrayOfString',
-        help: 'map phase(s)',
-        helpArh: 'MAP_COMMAND'
+        names: ['dry-run'],
+        type: 'bool',
+        help: 'Print the job configuration and exit, instead of '
+            + 'creating the job.'
     },
     {
         names: ['name', 'n'],
@@ -833,9 +816,10 @@ MJob.prototype.do_create.options = manta.DEFAULT_CLI_OPTIONS.concat([
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations (from mjob, not the job)',
+        help: 'limit concurrent operations (by mjob, not the job itself; '
+            + 'default 25)',
         'default': 25,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     },
     {
         names: ['quiet', 'q'],
@@ -843,11 +827,34 @@ MJob.prototype.do_create.options = manta.DEFAULT_CLI_OPTIONS.concat([
         help: 'do not output verbose information',
         'default': false
     },
+    {
+        names: ['watch', 'w'],
+        type: 'bool',
+        help: 'wait for job to complete, and dump outputs'
+    },
+    {
+        group: 'Specify phases'
+    },
+    {
+        names: ['file', 'f'],
+        type: 'string',
+        help: 'manifest file to create job from',
+        helpArg: 'FILE'
+    },
+    {
+        names: ['map', 'm'],
+        type: 'arrayOfString',
+        help: 'map phase(s)',
+        helpArg: 'CMD'
+    },
     {
         names: ['reduce', 'r'],
         type: 'arrayOfString',
         help: 'reduce phase(s)',
-        helpArh: 'REDUCE_COMMAND'
+        helpArg: 'CMD'
+    },
+    {
+        group: 'Phase properties'
     },
     {
         names: ['asset', 's'],
@@ -856,31 +863,72 @@ MJob.prototype.do_create.options = manta.DEFAULT_CLI_OPTIONS.concat([
         helpArg: 'ASSET_PATH'
     },
     {
-        names: ['watch', 'w'],
-        type: 'bool',
-        help: 'wait for job to complete, and dump outputs'
+        names: ['count'],
+        type: 'positiveInteger',
+        help: 'number of reducers to create',
+        helpArg: 'REDUCERS',
+        'default': 1
+    },
+    {
+        names: ['disk'],
+        type: 'positiveInteger',
+        help: 'amount of disk space available for a phase (gigabytes)',
+        helpArg: 'DISK_GB'
+    },
+    {
+        names: ['image'],
+        type: 'string',
+        help: 'Allowed compute image string (semver)',
+        helpArg: 'IMAGE_SEMVER'
+    },
+    {
+        names: ['init'],
+        type: 'string',
+        help: 'command to run before execution; must be valid bash script',
+        helpArg: 'INIT_COMMAND'
+    },
+    {
+        names: ['memory'],
+        type: 'positiveInteger',
+        help: 'amount of memory available for a phase (megabytes)',
+        helpArg: 'MEMORY_MB'
     }
 ]);
 
-MJob.prototype.do_create.help = (
+MJob.prototype.do_create.help = [
     /* BEGIN JSSTYLED */
-    'Creates a Manta Job.\n' +
-        'You can create a job, feed inputs and wait for completion like this:\n' +
-        'Example:\n' +
-        '    mfind -t o /user/stor | mjob create "grep foo || true" ^^ cat\n' +
-        '\n' +
-        'Usage:\n' +
-        '     mjob create [OPTIONS] [map [^ map] [^^ reduce]]\n' +
-        '\n' +
-        '{{options}}\n' +
-        'The --asset, --count, --disk, --image, --init, and —-memory ' +
-        'options all\n' +
-        'apply to the next phase specified with --map or --reduce.'
+    'Create a Manta Job.',
+    '',
+    'Usage:',
+    '    mjob create [OPTIONS] -m MAP [-m MAP] [-r REDUCE] ...  # option style',
+    '    mjob create [OPTIONS] [MAP [^ MAP] [^^ REDUCE]]        # expression style',
+    '    mjob create [OPTIONS] -f FILE                          # phases in JSON FILE',
+    '',
+    '{{options}}',
+    'Map and reduce phases can be specified (a) via "-f FILE" with a job config',
+    '(b) with "-m" and "-r" options:',
+    '    mjob create -m "grep foo || true" -m "cut -d: -f1" -r cat',
+    'or, (c) via an "expression" style using the "^" and "^^" syntax:',
+    '    mjob create "grep foo || true" ^ "cut -d: -f1" ^^ cat',
+    '',
+    'Phase property options (--asset, --disk, etc.) apply differently depending on',
+    'the usage type: if using options style (-m, -r), they apply to the *next* phase',
+    'specified with -m/-r; if using expression style, they apply to *all* phases.',
+    'For documentation on phase properties, including supported values for --disk',
+    'and --memory see:',
+    '    https://apidocs.joyent.com/manta/jobs-reference.html#job-configuration',
+    '',
+    'Input objects can be fed to a Manta job via stdin to `mjob create`:',
+    '    mfind -t o ~~/stor/data | mjob create -m "grep foo || true" -r sort',
+    'or via `mjob addinputs`:',
+    '    jobId=$(mjob create -m "grep foo || true" -r sort)',
+    '    mfind -t o ~~/stor/data | mjob addinputs $jobId'
     /* END JSSTYLED */
-);
+].join('\n');
 
 
 //-- GetJob
+
 MJob.prototype.do_get = function do_get(subcmd, opts, args, cb) {
     cb = once(cb);
 
@@ -921,12 +969,15 @@ MJob.prototype.do_get = function do_get(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_get.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob get options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -968,12 +1019,15 @@ MJob.prototype.do_inputs = function do_inputs(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_inputs.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob inputs options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1014,12 +1068,15 @@ MJob.prototype.do_outputs = function do_outputs(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_outputs.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob outputs options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1060,12 +1117,15 @@ MJob.prototype.do_errors = function do_errors(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_errors.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob errors options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1107,12 +1167,15 @@ MJob.prototype.do_failures = function do_failures(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_failures.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob failures options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1172,6 +1235,9 @@ MJob.prototype.do_list = function do_list(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_list.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob list options'
+    },
     {
         names: ['name', 'n'],
         type: 'string',
@@ -1249,12 +1315,15 @@ MJob.prototype.do_watch = function do_watch(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_watch.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob watch options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1302,12 +1371,15 @@ MJob.prototype.do_close = function do_close(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_close.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob close options'
+    },
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 100)',
         'default': 100,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     }
 ]);
 
@@ -1382,6 +1454,9 @@ MJob.prototype.do_share = function do_share(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_share.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob share options'
+    },
     {
         names: [ 'stdout', 's' ],
         type: 'bool',
@@ -1553,6 +1628,9 @@ MJob.prototype.do_cost = function do_cost(subcmd, opts, args, cb) {
 };
 
 MJob.prototype.do_cost.options = manta.DEFAULT_CLI_OPTIONS.concat([
+    {
+        group: 'mjob cost options'
+    },
     {
         names: ['name', 'n'],
         type: 'string',
@@ -1562,9 +1640,9 @@ MJob.prototype.do_cost.options = manta.DEFAULT_CLI_OPTIONS.concat([
     {
         names: ['parallel', 'p'],
         type: 'positiveInteger',
-        help: 'limit concurrent operations',
+        help: 'limit concurrent operations (default 25)',
         'default': 25,
-        helpArg: 'CONCURRENCY'
+        helpArg: 'NUM'
     },
     {
         names: ['quiet', 'q'],
@@ -1594,4 +1672,9 @@ MJob.prototype.do_cost.help = (
 
 ///--- Mainline
 
-cmdln.main(MJob);
+if (require.main === module) {
+    var cli = new MJob();
+    cmdln.main(cli, {
+        showNoCommandErr: true
+    });
+}
diff --git a/bin/mln b/bin/mln
index 0122d0f..14f0f77 100755
--- a/bin/mln
+++ b/bin/mln
@@ -17,14 +17,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['role-tag'],
             type: 'arrayOfString',
diff --git a/bin/mlogin b/bin/mlogin
index 499709e..6c30b0d 100755
--- a/bin/mlogin
+++ b/bin/mlogin
@@ -12,6 +12,7 @@ var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var dashdash = require('dashdash');
 var libuuid = require('uuid');
+var path = require('path');
 var vasync = require('vasync');
 
 var manta = require('../lib');
@@ -22,8 +23,9 @@ var manta = require('../lib');
 
 var QUIET = false;
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: 'mlogin',
+    name: NAME,
     level: 'info'
 });
 
@@ -41,6 +43,9 @@ var CC_NL = '\n'.charCodeAt(0);
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: [ 'command', 'c' ],
             type: 'string',
@@ -569,6 +574,8 @@ function wrap_run(func) {
 ///--- Mainline
 
 (function main() {
+    var options = parseOptions();
+
     // As this is an interactive process, if we are not attached to
     // a controlling terminal then we cannot usefully run.  Bail out
     // up front, rather than fail later.  If node could be coerced to
@@ -581,8 +588,6 @@ function wrap_run(func) {
         }
     });
 
-    var options = parseOptions();
-
     options.mclient = manta.createBinClient(options);
 
     var done = function (err) {
diff --git a/bin/mls b/bin/mls
index f8d0c5c..4e1a0ce 100755
--- a/bin/mls
+++ b/bin/mls
@@ -19,14 +19,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['json', 'j'],
             type: 'bool',
diff --git a/bin/mmd5 b/bin/mmd5
index 75b0333..b13f527 100755
--- a/bin/mmd5
+++ b/bin/mmd5
@@ -18,10 +18,11 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var DIR_CT = 'application/x-json-stream; type=directory';
 var HAD_ERR = false;
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
diff --git a/bin/mmkdir b/bin/mmkdir
index ece7f56..8110b0c 100755
--- a/bin/mmkdir
+++ b/bin/mmkdir
@@ -16,14 +16,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['header', 'H'],
             type: 'arrayOfString',
diff --git a/bin/mput b/bin/mput
index e76f45a..bd2a772 100755
--- a/bin/mput
+++ b/bin/mput
@@ -20,14 +20,18 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['copies', 'c'],
             type: 'positiveInteger',
@@ -116,7 +120,7 @@ function parseOptions() {
     manta.cliVersionCheckPrintAndExit(opts);
 
     if (opts.md5 && !opts.file)
-        manta.cli_usage(OPTIONS_PARSER, false, '--md5 requires --file');
+        manta.cli_usage(OPTIONS_PARSER, '--md5 requires --file', 'path...');
 
     if (opts._args.length < 1)
         manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
diff --git a/bin/mrm b/bin/mrm
index 1ba4b67..fc358fe 100755
--- a/bin/mrm
+++ b/bin/mrm
@@ -16,20 +16,24 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['parallel', 'p'],
             type: 'positiveInteger',
-            help: 'limit concurrent operations',
+            help: 'limit concurrent operations (default 50)',
             'default': 50,
-            helpArg: 'CONCURRENCY'
+            helpArg: 'NUM'
         },
         {
             names: ['recursive', 'r'],
diff --git a/bin/mrmdir b/bin/mrmdir
index f145d5f..eff79a7 100755
--- a/bin/mrmdir
+++ b/bin/mrmdir
@@ -16,8 +16,9 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
diff --git a/bin/msign b/bin/msign
index 789c2d1..0789b55 100755
--- a/bin/msign
+++ b/bin/msign
@@ -17,8 +17,9 @@ var manta = require('../lib');
 
 ///--- Globals
 
+var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
@@ -26,6 +27,9 @@ var METHODS = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['expires', 'e'],
             type: 'positiveInteger',
diff --git a/bin/muntar b/bin/muntar
index b830b2d..613ceee 100755
--- a/bin/muntar
+++ b/bin/muntar
@@ -21,9 +21,10 @@ var tar = require('tar');
 
 ///--- Globals
 
+var NAME = mod_path.basename(process.argv[1]);
 var IN_PROGRESS = {};
 var LOG = bunyan.createLogger({
-    name: mod_path.basename(process.argv[1]),
+    name: NAME,
     level: (process.env.LOG_LEVEL || 'info'),
     stream: process.stderr
 });
@@ -31,6 +32,9 @@ var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);
 
 var OPTIONS_PARSER = dashdash.createParser({
     options: manta.DEFAULT_CLI_OPTIONS.concat([
+        {
+            group: NAME + ' options'
+        },
         {
             names: ['copies', 'c'],
             type: 'positiveInteger',
@@ -55,7 +59,7 @@ var OPTIONS_PARSER = dashdash.createParser({
             type: 'positiveInteger',
             help: 'limit concurrent operations (default 20)',
             'default': 20,
-            helpArg: 'CONCURRENCY'
+            helpArg: 'NUM'
         },
         {
             names: ['retries', 'r'],
diff --git a/docs/man/mfind.md b/docs/man/mfind.md
index d496ac1..eca420f 100644
--- a/docs/man/mfind.md
+++ b/docs/man/mfind.md
@@ -68,8 +68,8 @@ OPTIONS
   Only return entries that have a name matching RegExp.  RegExp is a
   Javascript Regular Expression.
 
-`-p, --parallel concurrency`
-  Limit concurrent operations to CONCURRENCY.  Default is 50.
+`-p, --parallel NUM`
+  Limit concurrent operations to NUM.  Default is 50.
 
 `-s, --size SIZE`
   Only list objects that are greater than SIZE bytes.
diff --git a/docs/man/mjob.md b/docs/man/mjob.md
index b154ac2..fd3ca00 100644
--- a/docs/man/mjob.md
+++ b/docs/man/mjob.md
@@ -42,10 +42,10 @@ The following options are supported in all commands:
   Authenticate using the SSH key described by `fingerprint`.  The key must
   either be in `~/.ssh` or loaded in the SSH agent via `ssh-add`.
 
-`-p, --parallel concurrency`
-  Limit concurrent operations to CONCURRENCY.  Default is 50.  This applies to
-  operations issued by mjob itself (e.g., to add inputs or poll on the job).  It
-  has no effect on the concurrency of the job.
+`-p, --parallel NUM`
+  Limit concurrent operations to NUM. The default varies by command. This
+  applies to operations issued by mjob itself (e.g., to add inputs or poll on
+  the job). It has no effect on the concurrency of the job.
 
 `--role=ROLE,ROLE,...`
   Specify which roles to assume for the request.
@@ -129,6 +129,9 @@ The following options are supported on `create`:
   Override the OS quota, and use the specified amount of disk in the next phase.
   This option is specified in gigabytes.
 
+`--dry-run`
+  Print the job configuration and exit, instead of creating the job.
+
 `--memory memory`
   Override the OS size, and use the specified amount of DRAM in the next phase.
   This option is specified in megabytes.
diff --git a/docs/man/mrm.md b/docs/man/mrm.md
index b781a66..6326f6c 100644
--- a/docs/man/mrm.md
+++ b/docs/man/mrm.md
@@ -41,8 +41,8 @@ OPTIONS
   Authenticate using the SSH key described by FINGERPRINT.  The key must
   either be in `~/.ssh` or loaded in the SSH agent via `ssh-add`.
 
-`-p, --parallel concurrency`
-  Limit concurrent operations to CONCURRENCY.  Default is 50.
+`-p, --parallel NUM`
+  Limit concurrent operations to NUM.  Default is 50.
 
 `-r, --recursive`
   Remove directories and their contents recursively.
diff --git a/docs/man/muntar.md b/docs/man/muntar.md
index 1567fb2..c12e5af 100644
--- a/docs/man/muntar.md
+++ b/docs/man/muntar.md
@@ -69,8 +69,8 @@ OPTIONS
   Authenticate using the SSH key described by FINGERPRINT.  The key must
   either be in `~/.ssh` or loaded in the SSH agent via `ssh-add`.
 
-`-p concurrency, --parallel=oncurrency`
-  Limit concurrent operations to CONCURRENCY.  Default is 20.
+`-p NUM, --parallel=NUM`
+  Limit concurrent operations to NUM.  Default is 20.
 
 `-t, --type type`
   Specify `d` for directories, and `o` for objects.  If specified, only names of
diff --git a/lib/create_client.js b/lib/create_client.js
index 8ad4f39..e2db797 100644
--- a/lib/create_client.js
+++ b/lib/create_client.js
@@ -17,6 +17,24 @@ var packageJson = require('../package.json');
 ///--- Globals
 
 var DEFAULT_OPTIONS = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Print this help and exit'
+    },
+    {
+        name: 'version',
+        type: 'bool',
+        help: 'Print version and exit.'
+    },
+    {
+        names: ['verbose', 'v'],
+        type: 'arrayOfBool',
+        help: 'Verbose trace logging.'
+    },
+    {
+        group: 'Manta connection options'
+    },
     {
         names: ['account', 'a'],
         type: 'string',
@@ -38,16 +56,6 @@ var DEFAULT_OPTIONS = [
         help: 'Assume a role. Use multiple times or once with a list',
         helpArg: 'ROLE,ROLE,...'
     },
-    {
-        names: ['help', 'h'],
-        type: 'bool',
-        help: 'Print this help and exit'
-    },
-    {
-        name: 'version',
-        type: 'bool',
-        help: 'Print version and exit.'
-    },
     {
         names: ['insecure', 'i'],
         type: 'bool',
@@ -60,7 +68,7 @@ var DEFAULT_OPTIONS = [
         type: 'string',
         env: 'MANTA_KEY_ID',
         help: 'SSH key fingerprint',
-        helpArg: 'FINGERPRINT'
+        helpArg: 'FP'
     },
     {
         names: ['url', 'u'],
@@ -68,11 +76,6 @@ var DEFAULT_OPTIONS = [
         env: 'MANTA_URL',
         help: 'Manta URL',
         helpArg: 'URL'
-    },
-    {
-        names: ['verbose', 'v'],
-        type: 'arrayOfBool',
-        help: 'verbose mode'
     }
 ];
 
@@ -253,16 +256,17 @@ function createBinClient(opts) {
 }
 
 
-function usage(parser, msg, extra) {
-    if (msg)
-        console.error(msg);
+function usage(parser, errmsg, extra) {
+    if (errmsg)
+        console.error(errmsg);
 
     var help = parser.help({includeEnv: true}).trimRight();
     var name = path.basename(process.argv[1]);
-    console.error('usage: ' + name + ' [OPTIONS] ' + extra);
-    console.error('options:');
-    console.error(help);
-    process.exit(msg ? 1 : 0);
+    var out = (errmsg ? console.error : console.log);
+    out('usage: ' + name + ' [OPTIONS] ' + extra);
+    out('options:');
+    out(help);
+    process.exit(errmsg ? 1 : 0);
 }
 
 
diff --git a/man/man1/mfind.1 b/man/man1/mfind.1
index 0af9af6..8be9b73 100644
--- a/man/man1/mfind.1
+++ b/man/man1/mfind.1
@@ -63,8 +63,8 @@ Limit number of entries returned per request.
 Only return entries that have a name matching RegExp.  RegExp is a
 Javascript Regular Expression.
 .TP
-\fB\fC\-p, \-\-parallel concurrency\fR
-Limit concurrent operations to CONCURRENCY.  Default is 50.
+\fB\fC\-p, \-\-parallel NUM\fR
+Limit concurrent operations to NUM.  Default is 50.
 .TP
 \fB\fC\-s, \-\-size SIZE\fR
 Only list objects that are greater than SIZE bytes.
diff --git a/man/man1/mjob.1 b/man/man1/mjob.1
index 3274657..e44666d 100644
--- a/man/man1/mjob.1
+++ b/man/man1/mjob.1
@@ -33,10 +33,10 @@ bundle installed by default.
 Authenticate using the SSH key described by \fB\fCfingerprint\fR\&.  The key must
 either be in \fB\fC~/.ssh\fR or loaded in the SSH agent via \fB\fCssh\-add\fR\&.
 .TP
-\fB\fC\-p, \-\-parallel concurrency\fR
-Limit concurrent operations to CONCURRENCY.  Default is 50.  This applies to
-operations issued by mjob itself (e.g., to add inputs or poll on the job).  It
-has no effect on the concurrency of the job.
+\fB\fC\-p, \-\-parallel NUM\fR
+Limit concurrent operations to NUM. The default varies by command. This
+applies to operations issued by mjob itself (e.g., to add inputs or poll on
+the job). It has no effect on the concurrency of the job.
 .TP
 \fB\fC\-\-role=ROLE,ROLE,...\fR
 Specify which roles to assume for the request.
@@ -139,6 +139,9 @@ Use num_reducers in the reduce phase.
 Override the OS quota, and use the specified amount of disk in the next phase.
 This option is specified in gigabytes.
 .TP
+\fB\fC\-\-dry\-run\fR
+Print the job configuration and exit, instead of creating the job.
+.TP
 \fB\fC\-\-memory memory\fR
 Override the OS size, and use the specified amount of DRAM in the next phase.
 This option is specified in megabytes.
diff --git a/man/man1/mrm.1 b/man/man1/mrm.1
index 516598d..c2cdbb9 100644
--- a/man/man1/mrm.1
+++ b/man/man1/mrm.1
@@ -34,8 +34,8 @@ bundle installed by default.
 Authenticate using the SSH key described by FINGERPRINT.  The key must
 either be in \fB\fC~/.ssh\fR or loaded in the SSH agent via \fB\fCssh\-add\fR\&.
 .TP
-\fB\fC\-p, \-\-parallel concurrency\fR
-Limit concurrent operations to CONCURRENCY.  Default is 50.
+\fB\fC\-p, \-\-parallel NUM\fR
+Limit concurrent operations to NUM.  Default is 50.
 .TP
 \fB\fC\-r, \-\-recursive\fR
 Remove directories and their contents recursively.
@@ -88,5 +88,4 @@ $ mrm \-vv ~~/stor/foo 2>&1 | bunyan
 .PP
 DSA keys do not work when loaded via the SSH agent.
 .PP
-Report bugs at Github
-\[la]https://github.com/joyent/node-manta/issues\[ra]
+Report bugs at Github \[la]https://github.com/joyent/node-manta/issues\[ra]
diff --git a/man/man1/muntar.1 b/man/man1/muntar.1
index 173808f..fc49feb 100644
--- a/man/man1/muntar.1
+++ b/man/man1/muntar.1
@@ -62,8 +62,8 @@ bundle installed by default.
 Authenticate using the SSH key described by FINGERPRINT.  The key must
 either be in \fB\fC~/.ssh\fR or loaded in the SSH agent via \fB\fCssh\-add\fR\&.
 .TP
-\fB\fC\-p concurrency, \-\-parallel=oncurrency\fR
-Limit concurrent operations to CONCURRENCY.  Default is 20.
+\fB\fC\-p NUM, \-\-parallel=NUM\fR
+Limit concurrent operations to NUM.  Default is 20.
 .TP
 \fB\fC\-t, \-\-type type\fR
 Specify \fB\fCd\fR for directories, and \fB\fCo\fR for objects.  If specified, only names of
@@ -121,5 +121,4 @@ $ mfind \-vv ~~/stor 2>&1 | bunyan
 .PP
 DSA keys do not work when loaded via the SSH agent.
 .PP
-Report bugs at Github
-\[la]https://github.com/joyent/node-manta/issues\[ra]
+Report bugs at Github \[la]https://github.com/joyent/node-manta/issues\[ra]
diff --git a/package.json b/package.json
index 85df63c..165da79 100644
--- a/package.json
+++ b/package.json
@@ -14,8 +14,8 @@
         "backoff": "~2.3.0",
         "bunyan": "^1.8.1",
         "clone": "~0.1.11",
-        "cmdln": "1.3.1",
-        "dashdash": "1.3.2",
+        "cmdln": "4.1.1",
+        "dashdash": "1.14.0",
         "extsprintf": "^1.3.0",
         "hogan.js": "~2.0.0",
         "jsprim": "^1.3.0",
-- 
2.21.0

