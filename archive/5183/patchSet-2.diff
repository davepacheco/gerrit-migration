From 9e06b28ce86fb684491c632b1a3a98513c40d76f Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 3 Dec 2018 22:16:58 -0800
Subject: [PATCH] TRITON-904 Needs some useful enhancements for "sdcadm
 experimental update-agents".

---
 CHANGES.md                  |   4 +
 lib/cli/do_update_agents.js | 455 ++++++++++++++++++++++++++++++------
 lib/common.js               |   9 +-
 lib/ur.js                   |  34 ++-
 package.json                |   2 +-
 5 files changed, 426 insertions(+), 78 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 887e33a..eb7956b 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.24.0
+
+- TRITON-904 Needs some useful enhancements for "sdcadm experimental update-agents".
+
 ## 1.23.0
 
 - TRITON-889 Improvements to sdcadm's trace logging to file.
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index f1fcae0..76796b7 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -74,6 +74,8 @@ function UpdateAgents(opts) {
     assert.optionalArrayOfString(opts.servers, 'opts.servers');
     assert.func(opts.progress, 'opts.progress');
 
+    var self = this;
+
     if ((opts.all && opts.servers) ||
         (!opts.all && !opts.servers &&
          !opts.justDownload && !opts.justUpdateSymlink)) {
@@ -81,6 +83,20 @@ function UpdateAgents(opts) {
             'must specify exactly one of "opts.all" or "opts.servers"');
     }
 
+    self.excludeServers = [];
+    if (opts.exclude) {
+        if (!opts.all) {
+            throw new
+                errors.UsageError('--exclude can only be used with --all');
+        }
+
+        opts.exclude.map(function (i) {
+            return (i.split(','));
+        }).forEach(function (a) {
+            self.excludeServers = self.excludeServers.concat(a);
+        });
+    }
+
     this.downloadDir = '/var/tmp';
 
     this.agentsshar = opts.agentsshar;
@@ -309,6 +325,67 @@ function _stepDownloadAgentsshar(ctx, next) {
 };
 
 
+function failedUnsetup(server, ctx, progress) {
+    var msg = util.format('server %s (%s) is not setup',
+        server.uuid, server.hostname);
+
+    ctx.failedUpdates.push(new Error(msg));
+    progress('Warning: ' + msg + ', skipping');
+}
+
+function failedUrBroadcast(server, ctx, progress) {
+    var msg = util.format(
+        'server %s (%s) did not reply to Ur broadcast',
+        server.uuid, server.hostname);
+
+    ctx.failedUpdates.push(new Error(msg));
+    progress('Warning: ' + msg + ', skipping');
+}
+
+function failedMissing(id, ctx, progress) {
+    var msg = util.format('server %s does not exist', id);
+
+    ctx.failedUpdates.push(new Error(msg));
+    progress('Warning: ' + msg + ', skipping');
+}
+
+//
+// Generates a chunk of bash code that does some very basic locking to prevent
+// the most likely cases where we might have multiple updates trying to run at
+// the same time. Important: this is not fully race-free, but it's likely good
+// enough to catch the situation where an update is running and someone loses
+// their connection to sdcadm and tries to run again.
+//
+function generateLockSh(command, filename) {
+    var lines = [
+        'LOCKFILE="/var/tmp/lock.' + filename + '.' + command + '.pid"',
+        '',
+        'if ! (set -o noclobber; echo "$$" > $LOCKFILE); then',
+        '    RUNNING_PID=$(cat $LOCKFILE)',
+        '    if kill -0 $RUNNING_PID; then',
+        '        echo "' + command +
+            ' already running with PID $RUNNING_PID" >&2',
+        '        exit 40',
+        '    else',
+        '        echo "stale ' + command + ' detected, removing lock and ' +
+            'trying again" >&2',
+        '        rm -f $LOCKFILE',
+        '        if ! (set -o noclobber; echo "$$" > $LOCKFILE); then',
+        '            echo "unable to acquire lock" >&2',
+        '            exit 45',
+        '        fi',
+        '        echo "took over lock" >&2',
+        '    fi',
+        'fi',
+        '',
+        '# Delete lockfile when this process exits',
+        'trap "rm -f $LOCKFILE" EXIT'
+    ];
+
+    return lines.join('\n');
+}
+
+
 UpdateAgents.prototype.exec = function exec(callback) {
     assert.func(callback, 'callback');
 
@@ -320,6 +397,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
     this.image = null;
 
     const context = {
+        failedUpdates: [],
         log: self.log,
         progress: self.progress,
         sdcadm: self.sdcadm,
@@ -331,7 +409,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
          * Check for Ur availability first, as we cannot proceed without
          * it:
          */
-        function urDiscoveryGetReady(ctx, next) {
+        function urClientInit(ctx, next) {
             if (self.justDownload || self.justUpdateSymlink) {
                 next();
                 return;
@@ -399,39 +477,71 @@ UpdateAgents.prototype.exec = function exec(callback) {
                     next(err);
                     return;
                 }
-                ctx.allServers = servers;
+                ctx.allServers = servers.map(function _mapServer(s) {
+                    // Just keep those parameters we care about (the same ones
+                    // that urclient keeps from a sysinfo broadcast reply).
+                    return {
+                        headnode: s.headnode,
+                        hostname: s.hostname,
+                        setup: s.setup,
+                        status: s.status,
+                        transitional_status: s.transitional_status,
+                        uuid: s.uuid
+                    };
+                });
                 next();
             });
         },
 
         function findServersToUpdate(ctx, next) {
+            const unsetupServerIds = [];
+            const notFoundServerIds = [];
+            let i, s;
+            ctx.excludedServers = [];
+            ctx.serverFromUuid = {};
+            ctx.serverFromHostname = {};
+
             if (self.justDownload || self.justUpdateSymlink) {
                 next();
                 return;
             }
 
+            // Make 2 mappings so that user can specify a uuid or hostname
+            // and we can find that server.
+            for (i = 0; i < ctx.allServers.length; i++) {
+                s = ctx.allServers[i];
+                ctx.serverFromUuid[s.uuid] = s;
+                ctx.serverFromHostname[s.hostname] = s;
+            }
+
             if (self.all) {
-                ctx.serversToUpdate = ctx.allServers.filter(function (svr) {
-                    return svr.setup;
+                // Remove only servers that aren't setup or are excluded.
+                ctx.serversToUpdate = ctx.allServers.filter(function (srv) {
+                    if (!srv.setup) {
+                        failedUnsetup(srv, ctx, self.progress);
+                    }
+                    if (self.excludeServers.indexOf(srv.hostname) !== -1 ||
+                        self.excludeServers.indexOf(srv.uuid) !== -1) {
+
+                        self.progress(util.format('Info: server %s (%s) was ' +
+                            'excluded on cmdline, skipping',
+                            srv.uuid, srv.hostname));
+                        ctx.excludedServers.push(srv.uuid);
+                        return false;
+                    }
+                    return srv.setup;
                 });
                 next();
             } else {
-                let i, s;
-                const serverFromUuid = {};
-                const serverFromHostname = {};
-                for (i = 0; i < ctx.allServers.length; i++) {
-                    s = ctx.allServers[i];
-                    serverFromUuid[s.uuid] = s;
-                    serverFromHostname[s.hostname] = s;
-                }
 
                 ctx.serversToUpdate = [];
                 const serverToUpdateFromUuid = {};
-                const unsetupServerIds = [];
-                const notFoundServerIds = [];
+
+                // Go through the list of servers the user specified and record
+                // any that were not found or not setup.
                 for (i = 0; i < self.servers.length; i++) {
                     const id = self.servers[i];
-                    s = serverFromUuid[id] || serverFromHostname[id];
+                    s = ctx.serverFromUuid[id] || ctx.serverFromHostname[id];
                     if (s) {
                         // Avoid drop dupes in `opts.servers`.
                         if (!serverToUpdateFromUuid[s.uuid]) {
@@ -439,9 +549,11 @@ UpdateAgents.prototype.exec = function exec(callback) {
                             serverToUpdateFromUuid[s.uuid] = true;
                         }
                         if (!s.setup) {
+                            failedUnsetup(s, ctx, self.progress);
                             unsetupServerIds.push(id);
                         }
                     } else {
+                        failedMissing(id, ctx, self.progress);
                         notFoundServerIds.push(id);
                     }
                 }
@@ -468,16 +580,38 @@ UpdateAgents.prototype.exec = function exec(callback) {
             }
 
             common.urDiscovery({
+                logMissingNodes: false,
                 sdcadm: self.sdcadm,
                 progress: self.progress,
                 nodes: ctx.serversToUpdate.map(
                     function (s) { return s.uuid; }),
                 urconn: ctx.urconn
             }, function (err, urAvailServers) {
-                if (err) {
+                let i;
+
+                if (err && err.message === 'could not find all nodes') {
+                    // This is a hack but urclient doesn't seem to give us a
+                    // better way to deal with this.
+                    for (i = 0; i < err.nodes_missing.length; i++) {
+                        failedUrBroadcast(
+                            ctx.serverFromUuid[err.nodes_missing[i]], ctx,
+                            self.progress);
+                    }
+
+                    ctx.urServersToUpdate = ctx.serversToUpdate.filter(
+                        function _filterUrAvailableServers(s) {
+                            // Only keep servers that are *not* in the
+                            // missing list.
+                            return (err.nodes_missing.indexOf(s.uuid) === -1);
+                        });
+
+                    next();
+                    return;
+                } else if (err) {
                     next(err);
                     return;
                 }
+
                 ctx.urServersToUpdate = urAvailServers;
                 next();
             });
@@ -506,13 +640,13 @@ UpdateAgents.prototype.exec = function exec(callback) {
             if (!self.justDownload && !self.justUpdateSymlink) {
                 self.progress(common.indent(util.format(
                     'Update GZ agents on %d (of %d) servers using\n' +
-                    '    agentsshar %s', ctx.serversToUpdate.length,
+                    '    agentsshar %s', ctx.urServersToUpdate.length,
                     ctx.allServers.length,
                     (self.filepath ? self.filepath : self.image.version))));
             }
             if (self.justUpdateSymlink && self.filepath) {
                 self.progress(common.indent(util.format('Update ' +
-                    '\'/usbkey/extra/agents/latest\' symkink to %s',
+                    '\'/usbkey/extra/agents/latest\' symlink to %s',
                     self.filepath)));
             }
             self.progress('');
@@ -536,23 +670,27 @@ UpdateAgents.prototype.exec = function exec(callback) {
         steps.sapi.ensureAgentServices,
         self._stepDownloadAgentsshar.bind(self),
 
-        function copyFileToAssetsDir(_, next) {
+        function copyFileToAssetsDir(ctx, next) {
+            const assetsdir = '/usbkey/extra/agents';
+            ctx.fname = path.basename(self.filepath);
+            ctx.absfname = path.join(assetsdir, ctx.fname);
+
             if (self.justDownload) {
                 next();
                 return;
             }
-            const assetsdir = '/usbkey/extra/agents';
             if (path.dirname(self.filepath) === assetsdir) {
                 next();
                 return;
             }
             self.progress('Copy agentsshar to assets dir: %s', assetsdir);
             const argv = ['cp', self.filepath, assetsdir];
+
             mkdirp.sync(assetsdir);
             common.execFilePlus({
                 argv: argv,
                 log: self.sdcadm.log
-            }, function (err, stderr, stdout) {
+            }, function (err, stdout, stderr) {
                 self.sdcadm.log.trace({
                     cmd: argv.join(' '),
                     err: err,
@@ -574,9 +712,54 @@ UpdateAgents.prototype.exec = function exec(callback) {
             });
         },
 
-        function setFileName(ctx, next) {
-            ctx.fname = path.basename(self.filepath);
-            next();
+        function getSharSha1(ctx, next) {
+            var argv = [
+                '/usr/bin/openssl',
+                'dgst', '-r', '-sha1',
+                ctx.absfname
+            ];
+
+            common.execFilePlus({
+                argv: argv,
+                log: self.sdcadm.log
+            }, function (err, stdout, stderr) {
+                var sha1;
+
+                self.sdcadm.log.trace({
+                    cmd: argv.join(' '),
+                    err: err,
+                    stdout: stdout,
+                    stderr: stderr
+                }, 'ran openssl command');
+
+                if (err) {
+                    next(new errors.InternalError({
+                        message: util.format('unable to find SHA1 of %s',
+                            ctx.absfname),
+                        cmd: argv.join(' '),
+                        stdout: stdout,
+                        stderr: stderr,
+                        cause: err
+                    }));
+                    return;
+                }
+
+                sha1 = stdout.trim().split(' ')[0];
+
+                if (sha1.length !== 40) {
+                    next(new errors.InternalError({
+                        message: 'unexpected SHA1 output',
+                        cmd: argv.join(' '),
+                        stdout: stdout,
+                        stderr: stderr
+                    }));
+                    return;
+                }
+
+                ctx.sha1 = sha1;
+
+                next();
+            });
         },
 
         self._stepCreateLatestSymlink.bind(self),
@@ -613,7 +796,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
                  * Rename previous node.config file, if exists
                  */
                 'if [[ -f /var/tmp/node.config/node.config ]]; then',
-                '   mv /var/tmp/node.config/node.config ' +
+                '    mv /var/tmp/node.config/node.config ' +
                 /* eslint-disable */
                     '/var/tmp/node.config/node.\$\$.config',
                 /* eslint-enable */
@@ -631,9 +814,10 @@ UpdateAgents.prototype.exec = function exec(callback) {
                 '   fi',
                 '',
                 '   /usr/bin/curl -ksf http://' + ip +
-                        '/extra/joysetup/node.config' +
-                        ' -o /var/tmp/node.config/node.config',
+                    '/extra/joysetup/node.config' +
+                    ' -o /var/tmp/node.config/node.config',
                 '   if [[ "$?" -ne "0" ]]; then',
+                '       echo "failed to download new node.config" >&2',
                 '       exit 33',
                 '   fi',
                 '',
@@ -641,22 +825,42 @@ UpdateAgents.prototype.exec = function exec(callback) {
                  * Exit non zero if config dir does not exist
                  */
                 '   if [[ ! -d  /opt/smartdc/config && -z "$IS_CN" ]]; then',
+                '       echo "missing /opt/smartdc/config" >&2',
                 '       exit 44',
                 '   fi',
                 '',
                 '   /usr/bin/cp /var/tmp/node.config/node.config ' +
-                '/opt/smartdc/config/',
+                    '/opt/smartdc/config/',
                 'fi',
+                '',
+                'echo "replaced node.config" >&2',
                 ''
             ].join('\n');
 
             const downloadCmd = [
+                'OUTFILE="/var/tmp/' + f + '"',
+                '',
                 'cd /var/tmp;',
+                '',
+                generateLockSh('download', f),
+                '',
+                'EXPECTED_SHA1="' + ctx.sha1 + '"',
+                '',
                 /*
                  * Exit non zero if agents dir does not exist
                  */
                 'if [[ ! -d  /opt/smartdc/agents/lib ]]; then',
-                '   exit 50',
+                '    echo "missing /opt/smartdc/agents/lib" >&2',
+                '    exit 50',
+                'fi',
+                '',
+                'if [[ -f $OUTFILE ]]; then',
+                '    ACTUAL_SHA1=$(/usr/bin/openssl dgst -r -sha1 $OUTFILE' +
+                    ' | cut -d\' \' -f1)',
+                '    if [[ $EXPECTED_SHA1 == $ACTUAL_SHA1 ]]; then',
+                '        echo "already downloaded" >&2',
+                '        exit 0',
+                '    fi',
                 'fi',
                 '',
                 /*
@@ -664,21 +868,78 @@ UpdateAgents.prototype.exec = function exec(callback) {
                  */
                 '/usr/bin/curl -kOsf http://' + ip + '/extra/agents/' + f,
                 'if [[ "$?" -ne "0" ]]; then',
+                '   echo "failed to download shar" >&2',
                 '   exit $?',
                 'fi',
+                '',
+                'ACTUAL_SHA1=$(/usr/bin/openssl dgst -r -sha1 $OUTFILE' +
+                    ' | cut -d\' \' -f1)',
+                'if [[ $EXPECTED_SHA1 != $ACTUAL_SHA1 ]]; then',
+                '    echo "invalid sha1 after download" >&2',
+                '    exit 55',
+                'fi',
+                '',
+                'echo "successfully downloaded" >&2',
                 ''
             ].join('\n');
 
             const installCmd = [
+                'SHARFILE="/var/tmp/' + f + '"',
+                '',
                 'cd /var/tmp;',
                 '',
+                generateLockSh('install', f),
+                '',
+                'NEW_SHA1="' + ctx.sha1 + '"',
+                '',
+                '#',
+                '# This errs on the side of assuming we need to update, since',
+                '# updating when we do not need to is better than refusing to',
+                '# update when we do. If the file is missing or does not match',
+                '# exactly what we expect, we will update. If something goes',
+                '# really wrong, an operator can just delete the',
+                '# agentsshar.sha1 file and the update will proceed.',
+                '#',
+                'if [[ -f /opt/smartdc/agents/etc/agentsshar.sha1 ]]; then',
+                '    PREV_SHA1=$(cat /opt/smartdc/agents/etc/agentsshar.sha1)',
+                '    if [[ $NEW_SHA1 == $PREV_SHA1 && -f ' +
+                    '/opt/smartdc/agents/etc/agentsshar.sha1 ]]; then',
+                '        find /opt/smartdc/agents/lib/node_modules/*/ ' +
+                    '-name "image_uuid" -maxdepth 1 -print -exec cat {} \\; ' +
+                    '> /var/tmp/' + f + '.prevagents',
+                '        if cmp /var/tmp/' + f + '.prevagents ' +
+                    '/opt/smartdc/agents/etc/agentsshar.post; then',
+                '            rm -f /var/tmp/' + f + '.prevagents',
+                '            echo "already updated" >&2',
+                '            exit 0',
+                '        fi',
+                '        rm -f /var/tmp/' + f + '.prevagents',
+                '        echo "agents updated since last shar, proceeding" >&2',
+                '    fi',
+                'fi',
+                '',
                 /*
                  * Exit 60 if installer fails
                  */
                 '/usr/bin/bash ' + ff + ' </dev/null >' + lf + ' 2>&1',
                 'if [[ "$?" -ne "0" ]]; then',
+                '   echo "failed to install agentsshar" >&2',
                 '   exit 60',
                 'fi',
+                '',
+                '#',
+                '# Keep track of what versions are installed now and what the',
+                '# SHA1 of this shar was, so we know that we can skip the next',
+                '# update for the same shar if nothing else has changed in the',
+                '# meantime.',
+                '#',
+                'mkdir -p /opt/smartdc/agents/etc',
+                'find /opt/smartdc/agents/lib/node_modules/*/ ' +
+                    '-name "image_uuid" -maxdepth 1 -print -exec cat {} \\; ' +
+                    '> /opt/smartdc/agents/etc/agentsshar.post',
+                'echo "' + ctx.sha1 +
+                    '" > /opt/smartdc/agents/etc/agentsshar.sha1',
+                'echo "updated" >&2',
                 ''
             ].join('\n');
 
@@ -709,10 +970,61 @@ UpdateAgents.prototype.exec = function exec(callback) {
                         progress: self.progress,
                         command: cmd.str,
                         concurrency: self.concurrency,
+                        onCompletionFunc: _onCompletion,
                         timeout: cmd.timeout
                     };
 
                     var bar;
+
+                    // This will get called for either success or failure. On
+                    // failure (what urclient considers failure) we'll have
+                    // result.error as an error object.
+                    function _onCompletion(server, result) {
+                        var failed = false;
+                        var logger;
+                        var msg;
+                        var stderrLines;
+
+                        if (result.error) {
+                            msg = util.format('error (%s)',
+                                result.error.message);
+                            failed = true;
+                        } else if (result.exit_status !== 0) {
+                            // We "succeeded" as far as urclient is concerned,
+                            // because the script ran. But the script returned
+                            // a non-zero exit code.
+                            failed = true;
+                            stderrLines = result.stderr.trim().split('\n');
+                            msg = util.format('error (%s)',
+                                stderrLines[stderrLines.length - 1] ||
+                                'failed with exit status ' +
+                                result.exit_status);
+                        } else {
+                            stderrLines = result.stderr.trim().split('\n');
+                            msg = stderrLines[stderrLines.length - 1] ||
+                                'success';
+                        }
+
+                        if (failed) {
+                            // We failed what we were trying to do, so we will
+                            // remove it from the list so that we do not try
+                            // anything else on this server.
+                            ctx.urServersToUpdate =
+                                ctx.urServersToUpdate.filter(
+                                    function _removeFailed(s) {
+                                        return (s.uuid !== server.uuid);
+                                    });
+                        }
+
+                        if (bar) {
+                            logger = bar;
+                        } else {
+                            logger = console;
+                        }
+                        logger.log(util.format('Server %s (%s): %s',
+                            server.uuid, server.hostname, msg));
+                    }
+
                     if (process.stderr.isTTY) {
                         bar = new ProgressBar({
                             size: ctx.urServersToUpdate.length,
@@ -732,41 +1044,17 @@ UpdateAgents.prototype.exec = function exec(callback) {
                             return;
                         }
 
-                        var errs = [];
                         results.forEach(function (r) {
                             if (r.error || r.result.exit_status !== 0) {
-                                errs.push(new errors.UpdateError(util.format(
-                                    '%s failed on server %s (%s): %j',
-                                    cmd.progbarName, r.uuid, r.hostname,
-                                    r.error || r.result)));
+                                ctx.failedUpdates.push(
+                                    new errors.UpdateError(util.format(
+                                        '%s failed on server %s (%s): %j',
+                                        cmd.progbarName, r.uuid, r.hostname,
+                                        r.error || r.result)));
                             }
                         });
-                        if (errs.length === 1) {
-                            nextCmd(errs[0]);
-                        } else if (errs.length > 1) {
-                            nextCmd(new errors.MultiError(errs));
-                        } else {
-                            nextCmd();
-                        }
-                    });
 
-                    rq.on('success', function onSuccess(server, result) {
-                        // A non-zero exit from the command is a "success".
-                        if (result.exit_status !== 0) {
-                            var errmsg = util.format(
-                                '%s failed on server %s (%s): %j',
-                                cmd.progbarName, server.uuid,
-                                server.hostname, result);
-                            if (cmd.logFile) {
-                                errmsg += ' (log file on server: ' +
-                                    cmd.logFile + ')';
-                            }
-                            if (bar) {
-                                bar.log(errmsg);
-                            } else {
-                                console.log(errmsg);
-                            }
-                        }
+                        nextCmd();
                     });
 
                     rq.start();
@@ -775,9 +1063,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
                     });
                     rq.close();
                 }
-            }, function doneCmds(err, _) {
-                next(err);
-            });
+            }, next);
         },
 
         function doCleanup(ctx, next) {
@@ -809,6 +1095,12 @@ UpdateAgents.prototype.exec = function exec(callback) {
                 return;
             }
 
+            // If no updates succeeded, no point reloading sysinfo.
+            if (ctx.urServersToUpdate.length === 0) {
+                next();
+                return;
+            }
+
             self.progress('Reloading sysinfo on updated servers');
 
             const errs = [];
@@ -839,7 +1131,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
                 },
                 10);
 
-            queue.push(ctx.serversToUpdate); // No need for per task done cb
+            queue.push(ctx.urServersToUpdate); // No need for per task done cb
             queue.close();
             queue.on('end', function done() {
                 if (errs.length) {
@@ -868,6 +1160,13 @@ UpdateAgents.prototype.exec = function exec(callback) {
                 next();
                 return;
             }
+
+            // If no updates succeeded, no point refreshing config-agent.
+            if (ctx.urServersToUpdate.length === 0) {
+                next();
+                return;
+            }
+
             self.progress('Refreshing config-agent on all the updated servers');
 
             const queue = vasync.queue(
@@ -881,7 +1180,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
                     }, cb);
                 },
                 10);
-            queue.push(ctx.serversToUpdate); // No need for per task done cb
+            queue.push(ctx.urServersToUpdate); // No need for per task done cb
             queue.close();
             queue.on('end', function done() {
                 self.progress('Config-agent refreshed on updated servers');
@@ -895,15 +1194,24 @@ UpdateAgents.prototype.exec = function exec(callback) {
         if (err === true) { // early abort signal
             err = null;
         }
-        if (self.justDownload || self.justUpdateSymlink) {
+
+        if (err || self.justDownload || self.justUpdateSymlink) {
             callback(err);
             return;
         }
-        if (!err) {
-            self.progress('Successfully updated agents (%s)',
-                    common.humanDurationFromMs(Date.now() - startTime));
+
+        self.progress(
+            'Updated agents on %d/%d servers (%d failures, %d excluded) (%s)',
+            context.urServersToUpdate.length, context.allServers.length,
+            context.failedUpdates.length, context.excludedServers.length,
+            common.humanDurationFromMs(Date.now() - startTime));
+
+        if (context.failedUpdates.length > 0) {
+            callback(new errors.MultiError(context.failedUpdates));
+            return;
         }
-        callback(err);
+
+        callback();
     });
 };
 
@@ -959,6 +1267,7 @@ function do_update_agents(subcmd, opts, args, cb) {
             const cmd = new UpdateAgents({
                 sdcadm: self.sdcadm,
                 agentsshar: agentsshar,
+                exclude: opts.exclude,
                 progress: self.progress,
                 justDownload: opts.just_download,
                 skipLatestSymlink: opts.skip_latest_symlink,
@@ -1045,6 +1354,14 @@ do_update_agents.options = [
         type: 'bool',
         help: 'Update on all setup servers.'
     },
+    {
+        names: ['exclude', 'x'],
+        type: 'arrayOfString',
+        help: 'Exclude the given servers (only when -a|--all is provided). ' +
+              'Both multiple values (-x server1 -x server2) or a single comma' +
+              ' separated list (-x server1,server2) of service names to be ' +
+              'excluded are supported.'
+    },
     {
         names: ['yes', 'y'],
         type: 'bool',
diff --git a/lib/common.js b/lib/common.js
index cb2d66c..20d20ca 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -1330,6 +1330,7 @@ function execWithRetries(opts) {
 
 function urDiscovery(opts, cb) {
     assert.object(opts, 'opts');
+    assert.optionalBool(opts.logMissingNodes, 'opts.logMissingNodes');
     assert.object(opts.sdcadm, 'opts.sdcadm');
     assert.func(opts.progress, 'opts.progress');
     assert.object(opts.urconn, 'opts.urconn');
@@ -1358,9 +1359,11 @@ function urDiscovery(opts, cb) {
         if (err.nodes_missing && err.nodes_missing.length) {
             log.debug({nodes_missing: err.nodes_missing},
                 'ur disco nodes missing');
-            progress('Could not find %d servers (ur did not ' +
-                'respond to discovery): %s', err.nodes_missing.length,
-                err.nodes_missing.join(', '));
+            if (opts.logMissingNodes !== false) {
+                progress('Could not find %d servers (ur did not ' +
+                    'respond to discovery): %s', err.nodes_missing.length,
+                    err.nodes_missing.join(', '));
+            }
         } else {
             progress('Unexpected ur discovery failure: %r', err);
         }
diff --git a/lib/ur.js b/lib/ur.js
index b9969d3..dddd199 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -11,8 +11,9 @@
 /*
  * A library to call the UR client (a la sdc-oneachnode).
  *
- * Dev Note: Eventually it would be good to support the full functionality
- * of ur-client/sdc-oneachnode.
+ * Dev Note: This should be considered deprecated and not used for any new
+ *           sdcadm functionality.
+ *
  */
 
 var assert = require('assert-plus');
@@ -124,6 +125,7 @@ function runQueue(options, callback) {
         sdcadm: 'object',
         urConnection: 'object',
         log: 'object',
+        onCompletionFunc: 'optionalFunc',
         progress: 'func',
         progbar: 'optionalObject',
         get: 'optionalString',
@@ -174,6 +176,8 @@ function runQueue(options, callback) {
 
     if (bar) {
         bar.advance(0); // Draw initial progbar at 0.
+        // NOTE: we don't need to .draw() here because advance(0) will draw the
+        // bar since the pb_lastdrawtime starts at 0.
     }
 
     var rq = urclient.create_run_queue(opts);
@@ -200,13 +204,23 @@ function runQueue(options, callback) {
     });
 
     rq.on('success', function onSuccess(server, result) {
-        if (bar) {
-            bar.advance(1);
-        }
         var rr = {
             uuid: server.uuid,
             hostname: server.hostname
         };
+
+        // We have this here so that the caller can hook in before we advance
+        // the progress bar. In case for example they want to bar.log first. If
+        // they add their own rq.on('success', ...) handler, that will get run
+        // after the progress bar has already been advanced.
+        if (options.onCompletionFunc) {
+            options.onCompletionFunc(server, result);
+        }
+
+        if (bar) {
+            bar.advance(1);
+            bar.draw();
+        }
         if (options.get || options.put) {
             rr.result = {
                 stdout: 'ok',
@@ -229,8 +243,18 @@ function runQueue(options, callback) {
         if (error.stderr) {
             info('  :: stderr:\n' + error.stderr);
         }
+
+        // We have this here so that the caller can hook in before we advance
+        // the progress bar. In case for example they want to bar.log first. If
+        // they add their own rq.on('failure', ...) handler, that will get run
+        // after the progress bar has already been advanced.
+        if (options.onCompletionFunc) {
+            options.onCompletionFunc(server, {error: error});
+        }
+
         if (bar) {
             bar.advance(1);
+            bar.draw();
         }
         log.error({err: error, server: server}, msg);
 
diff --git a/package.json b/package.json
index 73e08a1..0d3fda3 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.23.0",
+  "version": "1.24.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

