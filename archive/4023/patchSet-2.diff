commit aeac56c4aee0a13e5f9879aca32e1c0583a04c88 (refs/changes/23/4023/2)
Author: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date:   2018-06-04T15:22:31+00:00 (1 year, 4 months ago)
    
    OS-6988 bhyve wastes 1GB of RAM for each VM using more than 3GB

diff --git a/usr/src/lib/libvmmapi/common/vmmapi.c b/usr/src/lib/libvmmapi/common/vmmapi.c
index de86e2b9bd..8c4476c417 100644
--- a/usr/src/lib/libvmmapi/common/vmmapi.c
+++ b/usr/src/lib/libvmmapi/common/vmmapi.c
@@ -384,13 +384,22 @@ vm_get_memseg(struct vmctx *ctx, int segid, size_t *lenp, char *namebuf,
 }
 
 static int
+#ifdef __FreeBSD__
 setup_memory_segment(struct vmctx *ctx, vm_paddr_t gpa, size_t len, char *base)
+#else
+setup_memory_segment(struct vmctx *ctx, int segid, vm_paddr_t gpa, size_t len,
+    char *base)
+#endif
 {
 	char *ptr;
 	int error, flags;
 
 	/* Map 'len' bytes starting at 'gpa' in the guest address space */
+#ifdef __FreeBSD__
 	error = vm_mmap_memseg(ctx, gpa, VM_SYSMEM, gpa, len, PROT_ALL);
+#else
+	error = vm_mmap_memseg(ctx, gpa, segid, 0, len, PROT_ALL);
+#endif
 	if (error)
 		return (error);
 
@@ -430,9 +439,11 @@ vm_setup_memory(struct vmctx *ctx, size_t memsize, enum vm_mmap_style vms)
 		objsize = ctx->lowmem;
 	}
 
+#ifdef __FreeBSD__
 	error = vm_alloc_memseg(ctx, VM_SYSMEM, objsize, NULL);
 	if (error)
 		return (error);
+#endif
 
 	/*
 	 * Stake out a contiguous region covering the guest physical memory
@@ -446,17 +457,35 @@ vm_setup_memory(struct vmctx *ctx, size_t memsize, enum vm_mmap_style vms)
 
 	baseaddr = ptr + VM_MMAP_GUARD_SIZE;
 	if (ctx->highmem > 0) {
+#ifndef __FreeBSD__
+		error = vm_alloc_memseg(ctx, VM_HIGHMEM, ctx->highmem, NULL);
+		if (error)
+			return (error);
+#endif
 		gpa = 4*GB;
 		len = ctx->highmem;
+#ifdef __FreeBSD__
 		error = setup_memory_segment(ctx, gpa, len, baseaddr);
+#else
+		error = setup_memory_segment(ctx, VM_HIGHMEM, gpa, len, baseaddr);
+#endif
 		if (error)
 			return (error);
 	}
 
 	if (ctx->lowmem > 0) {
+#ifndef __FreeBSD__
+		error = vm_alloc_memseg(ctx, VM_LOWMEM, ctx->lowmem, NULL);
+		if (error)
+			return (error);
+#endif
 		gpa = 0;
 		len = ctx->lowmem;
+#ifdef __FreeBSD__
 		error = setup_memory_segment(ctx, gpa, len, baseaddr);
+#else
+		error = setup_memory_segment(ctx, VM_LOWMEM, gpa, len, baseaddr);
+#endif
 		if (error)
 			return (error);
 	}
diff --git a/usr/src/lib/libvmmapi/common/vmmapi.h b/usr/src/lib/libvmmapi/common/vmmapi.h
index cfceafc6f4..31320e9a79 100644
--- a/usr/src/lib/libvmmapi/common/vmmapi.h
+++ b/usr/src/lib/libvmmapi/common/vmmapi.h
@@ -78,9 +78,16 @@ enum vm_mmap_style {
  * - the remaining identifiers can be used to create devmem segments.
  */
 enum {
+#ifdef __FreeBSD__
 	VM_SYSMEM,
+#else
+	VM_LOWMEM,
+#endif
 	VM_BOOTROM,
 	VM_FRAMEBUFFER,
+#ifndef __FreeBSD__
+	VM_HIGHMEM,
+#endif
 };
 
 /*
diff --git a/usr/src/uts/i86pc/io/vmm/vmm.c b/usr/src/uts/i86pc/io/vmm/vmm.c
index c4988c6d72..2bb50de66f 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm.c
@@ -146,7 +146,11 @@ struct mem_seg {
 	bool	sysmem;
 	struct vm_object *object;
 };
+#ifdef __FreeBSD__
 #define	VM_MAX_MEMSEGS	3
+#else
+#define	VM_MAX_MEMSEGS	4
+#endif
 
 struct mem_map {
 	vm_paddr_t	gpa;
