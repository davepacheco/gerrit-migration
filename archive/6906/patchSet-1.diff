commit 973026ec39873456086851a34056d61508fb7b4d
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-09-13T10:31:22-06:00 (3 weeks ago)
    
    MANTA-4543 Document and update boray configuration options

diff --git a/Cargo.lock b/Cargo.lock
index fbaaaa5..92af73d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -134,6 +134,7 @@ dependencies = [
  "hyper 0.12.25 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "md5 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "prometheus 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "quickcheck 0.8.5 (registry+https://github.com/rust-lang/crates.io-index)",
diff --git a/Cargo.toml b/Cargo.toml
index 3cc34de..035fe61 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -17,6 +17,7 @@ prometheus = "0.5.0"
 cueball = { git = "https://github.com/joyent/rust-cueball" }
 cueball-postgres-connection = { git = "https://github.com/joyent/rust-cueball-postgres-connection" }
 cueball-static-resolver = { git = "https://github.com/joyent/rust-cueball-static-resolver" }
+num_cpus = { version = "1.8.0" }
 rust_fast = { git = "https://github.com/joyent/rust-fast", tag = "v0.1.0" }
 serde = "1.0.84"
 serde_derive = "1.0.84"
diff --git a/README.md b/README.md
index 9a01984..ff74f0e 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,109 @@
 # boray
 
-A component of the manta buckets storage system for communicating with Manatee.
+A component of the manta buckets storage system for communicating with [Manatee](https://github.com/joyent/manatee).
 
 ## Quick start
 
     cp config.toml.dist config.toml
     vi config.toml
     cargo run -- -c config.toml
+
+## Configuration
+
+Boray features a variety of configuration option to tailor the behavior to
+particular environments. The configuration options are organized into categories
+and each are described below.
+
+### Logging
+
+The logging configuration entries pertaining the boray's logging behavior.
+
+* `level` - The logging level for boray to use. Possible values are `Critical`,
+  `Error`, `Warning`, `Info`, `Debug`, and `Trace`. The default value is `Info`.
+
+### Server
+
+The configuration entries controlling the boray server behavior.
+
+* `host` - The IP address boray should use to listen for incoming connections.
+* `port` - The port number boray should listen on for incoming connections.
+
+### Metrics
+
+The configuraiton entries controlling the boray metrics server.
+
+* `host` - The IP address boray should use to listen for metrics requests.
+* `port` - The port number boray should listen on for incoming metrics request
+  connections.
+
+### Database
+
+The database connection configuration entries.
+
+* `user` - The database username.
+* `host` - The database IP address.
+* `port` - The database port number.
+* `database - The name of the database to issue requests against.
+* `application_name` - The name of the application to use when connecting to the
+  database.
+* `tls_mode` - The TLS connection mode. Valid values are `disable`, `allow`,
+  `prefer`, `require`, `verify-ca`, and `verify-full`. See the [postgres
+  client documentation](https://www.postgresql.org/docs/current/libpq-ssl.html) on SSL support for more details about the meaning of
+  these options. The default value is `disable`
+* `certificate` - The optional path to a TLS certificate file when enabling TLS
+  connections via the `tls_mode` configuration option.
+
+### Cueball
+
+The database connection pool configuration entries.
+
+* `max_connections` - The maximum number of connections in the postgres
+  connection pool. The default value is 64 connections
+* `claim_timeout` - The time in milliseconds that a request to claim a
+  connection from the cueball connection pool should wait before returning an
+  error. The default is 500 ms.
+* `rebalancer_action_delay` - The time in milliseconds to wait prior to
+  rebalancing the connection pool when a notification is received from the
+  resolver regarding a change in the service topology. For the case of boray
+  using the postgres primary resolver this delay should not be very high. The
+  default value is 20 ms.
+
+### Tokio
+
+Tokio provides the runtime for boray and these are configuration options to
+control the behavior of the Tokio runtime.
+
+* `core_threads` - The maximum number of worker threads for the Tokio Runtime's
+  thread pool. This must be a number between 1 and 32,768 though it is advised
+  to keep this value on the smaller side. The default value is the number of
+  logical cores available to the system.
+* `blocking_threads` - The maximum number of concurrent blocking sections in the
+  Runtime's thread pool. When the maximum concurrent blocking calls is reached,
+  any further calls to blocking will return `NotReady` and the task is notified
+  once previously in-flight calls to blocking return. This must be a number
+  between 1 and 32,768 though it is advised to keep this value on the smaller
+  side. The default value is 200.
+* `thread_keep_alive` - The worker thread keep alive duration for threads in the
+  Tokio Runtime's thread pool. If set, a worker thread will wait for up to the
+  specified duration (in seconds) for work, at which point the thread will
+  shutdown. When work becomes available, a new thread will eventually be spawned
+  to replace the one that shut down. When the value is `None` (*i.e.* It is
+  omitted from the configuration file), the thread will wait for work forever. The default value is `None`.
+* `thread_stack_size` - The stack size (in bytes) for worker threads. The
+  default is 2 MiB.
+* `thread_name_prefix` - The name prefix of threads spawned by the Tokio
+  Runtime's thread pool. The default is `boray-woker-`.
+
+## Testing
+
+The tests can be run with:
+
+```
+cargo test
+```
+
+There are quickcheck tests and also some functional tests for the RPC handlers
+that require a functioning postgresql installation as well as
+[`pg_tmp`](http://eradman.com/ephemeralpg/). The test uses `pg_tmp` to create
+and configure a temporary postgres database and once the test has completed the
+temporary database is removed within a few seconds.
diff --git a/config.toml.dist b/config.toml.dist
index 78dc9b0..e58431b 100644
--- a/config.toml.dist
+++ b/config.toml.dist
@@ -1,5 +1,5 @@
 [log]
-level = "debug"
+level = "info"
 
 [server]
 host = "0.0.0.0"
@@ -18,7 +18,7 @@ application_name = "boray"
 tls_mode = "disable"
 
 [cueball]
-max_connections = 5
+max_connections = 64
 claim_timeout = 500 # milliseconds
 # Time to delay when an action that would trigger a rebalancing of the pool
 # connections is received. The purpose of the delay is to avoid minimize to work
@@ -27,8 +27,13 @@ claim_timeout = 500 # milliseconds
 rebalancer_action_delay = 100 # milliseconds
 
 [tokio]
+# It's best to omit this from your config file and use the default which is the
+# number of logical cores. This is here primarily to demonstrate it can be
+# set. Only set core_threads if you are certain about what you are doing.
 core_threads = 4
 blocking_threads = 200
+# This is here primarily to demonstrate it can be set. If it is omitted the
+# default behavior is to disable keep alive for threads.
 thread_keep_alive = 60
 thread_stack_size = 2097152
 thread_name_prefix = "boray-worker-"
diff --git a/sapi_manifests/boray/template b/sapi_manifests/boray/template
index 61a3a46..f7d0f34 100644
--- a/sapi_manifests/boray/template
+++ b/sapi_manifests/boray/template
@@ -76,7 +76,7 @@ tls_mode = "disable"
 max_connections = {{BORAY_CUEBALL_MAX_CONNECTIONS}}
 {{/BORAY_CUEBALL_MAX_CONNECTIONS}}
 {{^BORAY_CUEBALL_MAX_CONNECTIONS}}
-max_connections = 10
+max_connections = 64
 {{/BORAY_CUEBALL_MAX_CONNECTIONS}}
 {{#BORAY_CUEBALL_CLAIM_TIMEOUT}}
 claim_timeout = {{BORAY_CUEBALL_CLAIM_TIMEOUT}}
@@ -88,29 +88,17 @@ claim_timeout = 500 # milliseconds
 rebalancer_action_delay = {{BORAY_CUEBALL_REBALANCER_ACTION_DELAY}}
 {{/BORAY_CUEBALL_REBALANCER_ACTION_DELAY}}
 {{^BORAY_CUEBALL_REBALANCER_ACTION_DELAY}}
-rebalancer_action_delay = 100 # milliseconds
+rebalancer_action_delay = 20 # milliseconds
 {{/BORAY_CUEBALL_REBALANCER_ACTION_DELAY}}
 
 
 [tokio]
-{{#BORAY_TOKIO_CORE_THREADS}}
-core_threads = {{BORAY_TOKIO_CORE_THREADS}}
-{{/BORAY_TOKIO_CORE_THREADS}}
-{{^BORAY_TOKIO_CORE_THREADS}}
-core_threads = 4
-{{/BORAY_TOKIO_CORE_THREADS}}
 {{#BORAY_TOKIO_BLOCKING_THREADS}}
 blocking_threads = {{BORAY_TOKIO_BLOCKING_THREADS}}
 {{/BORAY_TOKIO_BLOCKING_THREADS}}
 {{^BORAY_TOKIO_BLOCKING_THREADS}}
 blocking_threads = 200
 {{/BORAY_TOKIO_BLOCKING_THREADS}}
-{{#BORAY_TOKIO_THREAD_KEEP_ALIVE}}
-thread_keep_alive = {{BORAY_TOKIO_THREAD_KEEP_ALIVE}}
-{{/BORAY_TOKIO_THREAD_KEEP_ALIVE}}
-{{^BORAY_TOKIO_THREAD_KEEP_ALIVE}}
-thread_keep_alive = 60
-{{/BORAY_TOKIO_THREAD_KEEP_ALIVE}}
 {{#BORAY_TOKIO_THREAD_STACK_SIZE}}
 thread_stack_size = {{BORAY_TOKIO_THREAD_STACK_SIZE}}
 {{/BORAY_TOKIO_THREAD_STACK_SIZE}}
diff --git a/src/config.rs b/src/config.rs
index 7bad29b..d3048de 100644
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,6 +1,4 @@
-/*
- * Copyright 2019 Joyent, Inc.
- */
+// Copyright 2019 Joyent, Inc.
 
 /// Data structures and helper functions for boray configuration.
 ///
@@ -15,6 +13,7 @@ use std::path::{Path, PathBuf};
 use std::str::FromStr;
 
 use clap::{value_t, ArgMatches};
+use num_cpus;
 use serde_derive::Deserialize;
 use slog::Level;
 
@@ -96,30 +95,40 @@ impl From<LogLevel> for slog::Level {
 
 #[derive(Clone, Default, Deserialize)]
 pub struct Config {
+    /// The logging configuration entries
     pub log: ConfigLog,
+    /// The configuration entries controlling the boray server behavior
     pub server: ConfigServer,
+    /// The configuraiton entries controlling the boray metrics server
     pub metrics: ConfigMetrics,
+    /// The database connection configuration entries
     pub database: ConfigDatabase,
+    /// The database connection pool configuration entries
     pub cueball: ConfigCueball,
+    /// The configuration entries controlling the behavior of the tokio runtime
+    /// used by boray.
     pub tokio: ConfigTokio,
 }
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigLog {
+    /// The logging level for boray to use.
     pub level: LogLevel,
 }
 
 impl Default for ConfigLog {
     fn default() -> Self {
         ConfigLog {
-            level: LogLevel::Debug,
+            level: LogLevel::Info,
         }
     }
 }
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigServer {
+    /// The IP address boray should use to listen for incoming connections.
     pub host: String,
+    /// The port number boray should listen on for incoming connections.
     pub port: u16,
 }
 
@@ -134,7 +143,9 @@ impl Default for ConfigServer {
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigMetrics {
+    /// The IP address boray should use to listen for metrics requests
     pub host: String,
+    /// The port number boray should listen on for incoming metrics request connections.
     pub port: u16,
 }
 
@@ -149,12 +160,19 @@ impl Default for ConfigMetrics {
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigDatabase {
+    /// The database username
     pub user: String,
+    /// The database IP address
     pub host: String,
+    /// The database port number
     pub port: u16,
+    /// The name of the database to issue requests against
     pub database: String,
+    /// The name of the application to use when connecting to the database
     pub application_name: String,
+    /// The TLS connection mode
     pub tls_mode: TlsConnectMode,
+    /// The optional path to a TLS certificate file
     pub certificate: Option<PathBuf>,
 }
 
@@ -174,36 +192,63 @@ impl Default for ConfigDatabase {
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigCueball {
+    /// The maximum number of connections in the postgres connection pool. The default value is 64 connections.
     pub max_connections: u32,
+    /// The time in milliseconds that a request to claim a connection from the cueball connection pool should wait before returning an error. The default is 500 ms.
     pub claim_timeout: Option<u64>,
+    /// The time in milliseconds to wait prior to rebalancing the connection
+    /// pool when a notification is received from the resolver regarding a
+    /// change in the service topology. For the case of boray using the postgres
+    /// primary resolver this delay should not be very high. The default value
+    /// is 20 ms.
     pub rebalancer_action_delay: Option<u64>,
 }
 
 impl Default for ConfigCueball {
     fn default() -> Self {
         ConfigCueball {
-            max_connections: 10,
+            max_connections: 64,
             claim_timeout: Some(500),
-            rebalancer_action_delay: Some(100),
+            rebalancer_action_delay: Some(20),
         }
     }
 }
 
 #[derive(Clone, Deserialize)]
 pub struct ConfigTokio {
-    pub core_threads: usize,
+    /// The maximum number of worker threads for the Tokio Runtime's thread
+    /// pool. This must be a number between 1 and 32,768 though it is advised to
+    /// keep this value on the smaller side. The default value is the number of
+    /// logical cores available to the system.
+    pub core_threads: Option<usize>,
+    /// The maximum number of concurrent blocking sections in the Runtime's
+    /// thread pool. When the maximum concurrent blocking calls is reached, any
+    /// further calls to blocking will return `NotReady` and the task is
+    /// notified once previously in-flight calls to blocking return. This must
+    /// be a number between 1 and 32,768 though it is advised to keep this value
+    /// on the smaller side. The default value is 200.
     pub blocking_threads: usize,
-    pub thread_keep_alive: u64,
+    /// The worker thread keep alive duration for threads in the Tokio Runtime's
+    /// thread pool. If set, a worker thread will wait for up to the specified
+    /// duration (in seconds) for work, at which point the thread will
+    /// shutdown. When work becomes available, a new thread will eventually be
+    /// spawned to replace the one that shut down. When the value is `None`
+    /// (*i.e.* It is omitted from the configuration file), the thread will wait
+    /// for work forever. The default value is `None`.
+    pub thread_keep_alive: Option<u64>,
+    /// The stack size (in bytes) for worker threads. The default is 2 MiB.
     pub thread_stack_size: usize,
+    /// The name prefix of threads spawned by the Tokio Runtime's thread
+    /// pool. The default is `boray-woker-`.
     pub thread_name_prefix: String,
 }
 
 impl Default for ConfigTokio {
     fn default() -> Self {
         ConfigTokio {
-            core_threads: 4,
+            core_threads: Some(num_cpus::get().max(1)),
             blocking_threads: 200,
-            thread_keep_alive: 60,
+            thread_keep_alive: None,
             thread_stack_size: 2 * 1024 * 1024,
             thread_name_prefix: "boray-worker-".into(),
         }
@@ -219,10 +264,16 @@ pub fn read_file<F: AsRef<OsStr> + ?Sized>(f: &F) -> Config {
         }
     };
 
-    toml::from_slice(&s).unwrap_or_else(|e| {
+    let mut config: Config = toml::from_slice(&s).unwrap_or_else(|e| {
         eprintln!("Failed to parse config file: {}", e);
         std::process::exit(1);
-    })
+    });
+
+    if config.tokio.core_threads.is_none() {
+        config.tokio.core_threads = Some(num_cpus::get().max(1))
+    }
+
+    config
 }
 
 pub fn read_cli_args(matches: &ArgMatches, config: &mut Config) {
diff --git a/src/lib.rs b/src/lib.rs
index 4738b8d..c019132 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -250,7 +250,7 @@ pub mod util {
         method: &str,
         data: Result<Vec<X>, SerdeError>,
         conn: &mut PostgresConnection,
-        action: &Fn(
+        action: &dyn Fn(
             u32,
             &str,
             &Logger,
diff --git a/src/main.rs b/src/main.rs
index f5b3c17..dd5145c 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -116,8 +116,8 @@ fn main() {
 
     let mut rt = runtime::Builder::new()
         .blocking_threads(config.tokio.blocking_threads)
-        .core_threads(config.tokio.core_threads)
-        .keep_alive(Some(Duration::from_secs(config.tokio.thread_keep_alive)))
+        .core_threads(config.tokio.core_threads.unwrap())
+        .keep_alive(config.tokio.thread_keep_alive.map(Duration::from_secs))
         .name_prefix(config.tokio.thread_name_prefix)
         .stack_size(config.tokio.thread_stack_size)
         .build()
