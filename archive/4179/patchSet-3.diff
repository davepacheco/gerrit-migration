From 09a6a8757e372323de717dd63d13e12049950839 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 13 Jun 2018 10:32:41 +0200
Subject: [PATCH] TOOLS-1776 'sdcadm health' can exit 0 when there are service
 errors Reviewed by: Trent Mick <trentm@gmail.com> Approved by: Trent Mick
 <trentm@gmail.com>

---
 lib/cli/do_check_health.js | 19 +++++++++++++------
 lib/cli/index.js           |  9 ++++++++-
 lib/errors.js              |  5 +++++
 test/check-health.test.js  | 25 +++++++++++++++++++++----
 4 files changed, 47 insertions(+), 11 deletions(-)

diff --git a/lib/cli/do_check_health.js b/lib/cli/do_check_health.js
index c0f5294..835732c 100644
--- a/lib/cli/do_check_health.js
+++ b/lib/cli/do_check_health.js
@@ -10,6 +10,7 @@
 
 var tabula = require('tabula');
 var vasync = require('vasync');
+var VError = require('verror').VError;
 
 var common = require('../common');
 var errors = require('../errors');
@@ -175,11 +176,14 @@ function do_check_health(subcmd, opts, args, callback) {
             });
         }
 
-        if (!opts.json && !opts.quiet && errRows.length > 0) {
-            callback(new Error('Some instances appear unhealthy'));
+        if (errRows.length > 0) {
+            callback(new VError({
+                info: {
+                    showErr: (!opts.json && !opts.quiet)
+                }
+            }, 'Some instances appear unhealthy'));
             return;
         }
-
         callback();
         return;
     }
@@ -200,16 +204,19 @@ function do_check_health(subcmd, opts, args, callback) {
         }
     ]}, function (err) {
         if (err) {
-            return callback(new errors.InternalError(err));
+            callback(new errors.InternalError(err));
+            return;
         }
 
         if (Object.keys(names).length > 0) {
             var msg = 'unrecognized service or instance: ' +
                 Object.keys(names).join(', ');
-            return callback(new errors.UsageError(msg));
+            callback(new errors.UsageError(msg));
+            return;
         }
 
-        return self.sdcadm.checkHealth({ uuids: uuids }, displayResults);
+        self.sdcadm.checkHealth({ uuids: uuids }, displayResults);
+        return;
     });
 }
 
diff --git a/lib/cli/index.js b/lib/cli/index.js
index 4ce888e..821a432 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -21,6 +21,7 @@ var cmdln = require('cmdln');
 var Cmdln = cmdln.Cmdln;
 var strsplit = require('strsplit');
 var vasync = require('vasync');
+var VError = require('verror').VError;
 var uuid = require('node-uuid');
 var extsprintf = require('extsprintf');
 
@@ -207,6 +208,13 @@ CLI.prototype.fini = function fini(subcmd, err, cb) {
         this.sdcadm.fini();
     }
 
+    // When an error is present, we may want to avoid showing it:
+    if (err && VError.info(err).showErr === false) {
+        this.showErr = false;
+    } else {
+        this.showErr = true;
+    }
+
     if (this.log) {  // On an early error we might not have `log`.
         var exitStatus = (err ? err.exitStatus || 1 : 0);
         var logLevel = 'debug';
@@ -479,7 +487,6 @@ if (require.main === module) {
     cmdln.main(cli, {
         argv: process.argv,
         showCode: true,
-        showErr: true,
         finale: 'softexit'
     });
 }
diff --git a/lib/errors.js b/lib/errors.js
index d01da48..dc306c9 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -24,6 +24,11 @@ var WError = verror.WError;
 /**
  * Base sdcadm error. Instances will always have a string `message` and
  * a string `code` (a CamelCase string).
+ *
+ * Additionally, if the error info field contains a property named `showErr`
+ * it will be used to display or not the error message (using `console.log`)
+ * right before program exit. (Note error messages will be displayed by
+ * default if nothing else is specified).
  */
 function SdcAdmError(options) {
     assert.object(options, 'options');
diff --git a/test/check-health.test.js b/test/check-health.test.js
index 8db6c3f..ac0ce16 100644
--- a/test/check-health.test.js
+++ b/test/check-health.test.js
@@ -172,7 +172,6 @@ test('sdcadm check-health --json', function (t) {
 test('sdcadm check-health -q', function (t) {
     exec('sdcadm check-health -q', function (err, stdout, stderr) {
         t.ifError(err);
-
         t.equal(stdout, '');
         t.equal(stderr, '');
 
@@ -216,8 +215,7 @@ test('sdcadm check-health -q with disabled papi', function (t) {
     exec('sdcadm check-health -q', function (err, stdout, stderr) {
         t.equal(err && err.code, 1, 'errcode is 1');
         t.equal('', stdout, 'empty stdout');
-        t.notEqual(stderr.indexOf('Some instances appear unhealthy'), -1,
-            'check-health stderr');
+        t.notEqual('', stderr, 'not empty stderr');
         t.end();
     });
 });
@@ -251,13 +249,32 @@ test('check-health when binder is down', function (t) {
                 exec('sdcadm check-health -H', function (err, stdout, stderr) {
                     t.equal(err && err.code, 1, 'errcode is 1');
                     t.equal(err.killed, false, 'process not killed');
-                    t.equal(stdout, '');
+                    t.notEqual(stdout, '', 'empty stdout');
                     t.notEqual(
                         stderr.indexOf('Binder service seems to be down'), -1,
                         'binder off stderr');
                     next();
                 });
             },
+            function checkHealthJson(_, next) {
+                exec('sdcadm check-health -j', function (err, stdout, stderr) {
+                    t.equal(err && err.code, 1, 'errcode is 1');
+                    t.equal(err.killed, false, 'process not killed');
+                    t.equal(stderr, '');
+                    var details = common.parseJsonOut(stdout);
+                    if (!details) {
+                        t.ok(false, 'failed to parse JSON');
+                        t.end();
+                        return;
+                    }
+                    var msg = details[0].health_errors[0].message;
+                    t.ok(msg, 'err msg');
+                    t.notEqual(
+                        msg.indexOf('Binder service seems to be down'), -1,
+                        'binder off err');
+                    next();
+                });
+            },
             function enableBinder(_, next) {
                 exec('/usr/sbin/svcadm -z ' +
                     '`/opt/smartdc/bin/sdc-vmname binder` enable binder',
-- 
2.21.0

