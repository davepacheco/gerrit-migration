From 6699fcbb4442e7f21c3b11da078032343aa9d930 Mon Sep 17 00:00:00 2001
From: Dillon Amburgey <dillona@dillona.com>
Date: Thu, 22 Dec 2016 16:27:13 -0500
Subject: [PATCH] joyent/node-triton#3 triton ssh command not aware of "ubuntu"
 login for ubuntu-certified images

---
 CHANGES.md                |  2 +
 lib/do_instance/do_ssh.js | 82 +++++++++++++++++++++++----------------
 lib/tritonapi.js          | 15 ++++---
 3 files changed, 60 insertions(+), 39 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index a0410af..86b1221 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -7,6 +7,8 @@ Known issues:
 
 ## not yet released
 
+- [joyent/node-triton#3] triton ssh command not aware of "ubuntu" login for ubuntu-certified images
+
 - [joyent/node-triton#137] Improve the handling for the getting started case
   when a user may not have envvars or a profile setup.
 
diff --git a/lib/do_instance/do_ssh.js b/lib/do_instance/do_ssh.js
index be2da84..381c331 100644
--- a/lib/do_instance/do_ssh.js
+++ b/lib/do_instance/do_ssh.js
@@ -53,43 +53,57 @@ function do_ssh(subcmd, opts, args, callback) {
                 callback(new Error('primaryIp not found for instance'));
                 return;
             }
+            var _opts = {
+                name: inst.image,
+                useCache: true
+            };
+            cli.tritonapi.getImage(_opts, function (getImageErr, image) {
+                if (getImageErr) {
+                    callback(getImageErr);
+                    return;
+                }
+
+                if (image.tags.default_user) {
+                    user = image.tags.default_user;
+                }
+
+                args = ['-l', user, ip].concat(args);
 
-            args = ['-l', user, ip].concat(args);
-
-            /*
-             * By default we disable ControlMaster (aka mux, aka SSH connection
-             * multiplexing) because of
-             * https://github.com/joyent/node-triton/issues/52
-             *
-             */
-            if (!opts.no_disable_mux) {
-                /*
-                 * A simple `-o ControlMaster=no` doesn't work. With
-                 * just that option, a `ControlPath` option (from
-                 * ~/.ssh/config) will still be used if it exists. Our
-                 * hack is to set a ControlPath we know should not
-                 * exist. Using '/dev/null' wasn't a good alternative
-                 * because `ssh` tries "$ControlPath.$somerandomnum"
-                 * and also because Windows.
-                 */
-                var nullSshControlPath = path.resolve(
-                    cli.tritonapi.config._configDir, 'tmp',
-                    'nullSshControlPath');
-                args = [
-                    '-o', 'ControlMaster=no',
-                    '-o', 'ControlPath='+nullSshControlPath
-                ].concat(args);
-            }
-
-            self.top.log.info({args: args}, 'forking ssh');
-            var child = spawn('ssh', args, {stdio: 'inherit'});
-            child.on('close', function (code) {
                 /*
-                 * Once node 0.10 support is dropped we could instead:
-                 *      process.exitCode = code;
-                 *      callback();
+                 * By default we disable ControlMaster (aka mux, aka SSH
+                 * connection multiplexing) because of
+                 * https://github.com/joyent/node-triton/issues/52
+                 *
                  */
-                process.exit(code);
+                if (!opts.no_disable_mux) {
+                    /*
+                     * A simple `-o ControlMaster=no` doesn't work. With
+                     * just that option, a `ControlPath` option (from
+                     * ~/.ssh/config) will still be used if it exists. Our
+                     * hack is to set a ControlPath we know should not
+                     * exist. Using '/dev/null' wasn't a good alternative
+                     * because `ssh` tries "$ControlPath.$somerandomnum"
+                     * and also because Windows.
+                     */
+                    var nullSshControlPath = path.resolve(
+                        cli.tritonapi.config._configDir, 'tmp',
+                        'nullSshControlPath');
+                    args = [
+                        '-o', 'ControlMaster=no',
+                        '-o', 'ControlPath='+nullSshControlPath
+                    ].concat(args);
+                }
+
+                self.top.log.info({args: args}, 'forking ssh');
+                var child = spawn('ssh', args, {stdio: 'inherit'});
+                child.on('close', function (code) {
+                    /*
+                     * Once node 0.10 support is dropped we could instead:
+                     *      process.exitCode = code;
+                     *      callback();
+                     */
+                    process.exit(code);
+                });
             });
         });
     });
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 648a900..318a21b 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -364,23 +364,28 @@ TritonApi.prototype._cachePutJson = function _cachePutJson(key, obj, cb) {
  * Lookup the given key in the cache and return a hit or `undefined`.
  *
  * @param {String} key: The cache key, e.g. 'images.json'.
+ * @param {Number} ttl: The number of seconds the cache is valid for
  * @param {Function} cb: `function (err, hit)`.
  *      `err` is an Error if there was an unexpected error loading from the
  *      cache. `hit` is undefined if there was no cache hit. On a hit, the
  *      type of `hit` depends on the key.
  */
-TritonApi.prototype._cacheGetJson = function _cacheGetJson(key, cb) {
+TritonApi.prototype._cacheGetJson = function _cacheGetJson(key, ttl, cb) {
     var self = this;
     assert.string(this.cacheDir, 'this.cacheDir');
     assert.string(key, 'key');
+    assert.optionalNumber(ttl, 'ttl');
     assert.func(cb, 'cb');
 
-    var ttl = 5 * 60 * 1000; // timeout of cache file info (ms)
+    if (!ttl) {
+        ttl = 5 * 60; // timeout of cache file info (in seconds)
+    }
 
     var keyPath = path.resolve(this.cacheDir, key);
     fs.stat(keyPath, function (statErr, stats) {
         if (!statErr &&
-            stats.mtime.getTime() + ttl >= (new Date()).getTime()) {
+            // TTL is in seconds so we need to multiply by 1000
+            stats.mtime.getTime() + (ttl * 1000) >= (new Date()).getTime()) {
             fs.readFile(keyPath, 'utf8', function (err, data) {
                 if (err && err.code === 'ENOENT') {
                     self.log.trace({keyPath: keyPath},
@@ -459,7 +464,7 @@ TritonApi.prototype.listImages = function listImages(opts, cb) {
             if (!useCache) {
                 return next();
             }
-            self._cacheGetJson(cacheKey, function (err, cached_) {
+            self._cacheGetJson(cacheKey, 5*60, function (err, cached_) {
                 if (err) {
                     return next(err);
                 }
@@ -525,7 +530,7 @@ TritonApi.prototype.getImage = function getImage(opts, cb) {
                     return;
                 }
                 var cacheKey = 'images.json';
-                self._cacheGetJson(cacheKey, function (err, images) {
+                self._cacheGetJson(cacheKey, 60*60, function (err, images) {
                     if (err) {
                         next(err);
                         return;
-- 
2.21.0

