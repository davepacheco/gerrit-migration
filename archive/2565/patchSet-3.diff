commit 38cbd4dcc8f9d737491d9f8d3365c1b14525c3ea (refs/changes/65/2565/3)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-09-14T19:56:26+00:00 (2 years, 1 month ago)
    
    MORAY-351 moray missing DTrace probes for many RPC operations

diff --git a/lib/buckets/creat.js b/lib/buckets/creat.js
index 9a4c6b6..d1b0d21 100644
--- a/lib/buckets/creat.js
+++ b/lib/buckets/creat.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 var BucketConflictError = require('../errors').BucketConflictError;
 var InternalError = require('../errors').InternalError;
 
@@ -72,6 +73,9 @@ function insertConfig(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'insertConfig: failed');
+        dtrace['createbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         if (err.code === '23505') {
             cb(new BucketConflictError(err, bucket.name));
         } else {
@@ -105,6 +109,9 @@ function createSequence(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createSequence: failed');
+        dtrace['createbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -139,6 +146,9 @@ function createLockingSerial(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createLockingSerial: failed');
+        dtrace['createbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -148,6 +158,9 @@ function createLockingSerial(req, cb) {
         q = pg.query(sql);
         q.once('error', function (err) {
             log.debug(err, 'createLockingSerial(insert): failed');
+            dtrace['createbucket-error'].fire(function () {
+                return ([req.msgid, req.req_id, err.toString()]);
+            });
             cb(err);
         });
         q.once('end', function () {
@@ -187,6 +200,9 @@ function createTable(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createTable: failed');
+        dtrace['createbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -208,7 +224,16 @@ function createIndexes(req, cb) {
             return (!req.bucket.index[k].unique);
         }).concat('_id', '_etag', '_mtime', '_vnode')
             .map(common.mapIndexType.bind(null, req.bucket.index))
-    }, cb);
+    }, function (err) {
+        if (err) {
+            dtrace['createbucket-error'].fire(function () {
+                return ([req.msgid, req.req_id, err.toString()]);
+            });
+            cb(err);
+            return;
+        }
+        cb();
+    });
 }
 
 ///--- API
@@ -242,10 +267,16 @@ function creat(options) {
             cfg: cfg,
             opts: opts
         }, 'createBucket: entered');
+        dtrace['createbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/del.js b/lib/buckets/del.js
index 44e5c14..26b57bb 100644
--- a/lib/buckets/del.js
+++ b/lib/buckets/del.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 var mod_errors = require('../errors');
 var InvalidBucketNameError = mod_errors.InvalidBucketNameError;
@@ -72,6 +73,9 @@ function checkExists(req, cb) {
             bucket: req.bucket.name,
             err: err
         }, 'checkExists: failed');
+        dtrace['delbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -105,7 +109,14 @@ function deleteConfig(req, cb) {
     log.debug({ bucket: bucket.name }, 'deleteConfig: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({ bucket: bucket.name }, 'deleteConfig: error');
+        dtrace['delbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
+
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({ bucket: bucket.name }, 'deleteConfig: done');
         cb();
@@ -128,7 +139,15 @@ function dropTable(req, cb) {
     }, 'dropTable: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: bucket.name
+        }, 'dropTable: error');
+        dtrace['delbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({
             bucket: bucket.name
@@ -154,7 +173,15 @@ function dropSequence(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: req.bucket.name
+        }, 'dropSequence: error');
+        dtrace['delbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropSequence: done');
         cb();
@@ -179,7 +206,13 @@ function dropLockingSerial(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug('dropLockingSequence: error');
+        dtrace['delbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropLockingSequence: done');
         cb();
@@ -208,10 +241,16 @@ function del(options) {
             bucket: bucket,
             opts: opts
         }, 'delBucket: entered');
+        dtrace['delbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/get.js b/lib/buckets/get.js
index 76e79e4..8888806 100644
--- a/lib/buckets/get.js
+++ b/lib/buckets/get.js
@@ -12,6 +12,7 @@ var util = require('util');
 
 var BucketNotFoundError = require('../errors').BucketNotFoundError;
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 
 ///--- Globals
@@ -48,6 +49,9 @@ function loadBucket(req, cb) {
             bucket: req.bucket.name,
             err: err
         }, 'loadBucket: failed');
+        dtrace['getbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -92,11 +96,17 @@ function get(options) {
             bucket: bucket,
             opts: opts
         }, 'getBucket: entered');
+        dtrace['getbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
 
         control.handlerPipeline({
             req: req,
             funcs: PIPELINE,
-            cbOutput: function () { return req.bucket; }
+            cbOutput: function () { return req.bucket; },
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/list.js b/lib/buckets/list.js
index 84cdf70..42f1f86 100644
--- a/lib/buckets/list.js
+++ b/lib/buckets/list.js
@@ -9,6 +9,7 @@
  */
 
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 
 ///--- Globals
@@ -33,11 +34,13 @@ function loadBuckets(req, cb) {
     var sql = 'SELECT * FROM buckets_config';
 
     log.debug('loadBuckets: entered');
-
     q = pg.query(sql);
 
     q.once('error', function (err) {
         log.debug(err, 'loadBuckets: failed');
+        dtrace['listbuckets-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -72,10 +75,16 @@ function list(options) {
         req.log.debug({
             opts: opts
         }, 'listBuckets: entered');
+        dtrace['listbuckets-start'].fire(function () {
+            return ([req.msgid, req.req_id]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id]);
+            }
         });
     }
 
diff --git a/lib/buckets/update.js b/lib/buckets/update.js
index 65ba175..cb36919 100644
--- a/lib/buckets/update.js
+++ b/lib/buckets/update.js
@@ -14,6 +14,7 @@ var deepEqual = require('deep-equal');
 var once = require('once');
 var vasync = require('vasync');
 var clone = require('clone');
+var dtrace = require('../dtrace');
 
 var common = require('./common');
 var control = require('../control');
@@ -84,6 +85,9 @@ function loadBucket(req, cb) {
     log.debug({
         bucket: b.name
     }, 'loadBucket: entered');
+    dtrace['updatebucket-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
 
     q = pg.query(sql);
     q.once('error', function (err) {
@@ -91,6 +95,9 @@ function loadBucket(req, cb) {
             bucket: b.name,
             err: err
         }, 'loadIndexes: failed');
+        dtrace['updatebucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -147,6 +154,9 @@ function ensureReindexProperty(req, cb) {
                 bucket: req.bucket.name,
                 err: err
             }, 'loadIndexes: failed');
+            dtrace['updatebucket-error'].fire(function () {
+                return ([req.msgid, req.req_id, err.toString()]);
+            });
             cb(err);
         });
         q.once('end', function () {
@@ -222,8 +232,14 @@ function ensureRowVer(req, cb) {
             function checkCol(arg, callback) {
                 sql = 'SELECT column_name FROM information_schema.columns ' +
                     'WHERE table_name = $1 AND column_name = $2';
+
                 q = pg.query(sql, [b.name, arg.colName]);
-                q.on('error', callback);
+                q.on('error', function (err) {
+                    dtrace['updatebucket-error'].fire(function () {
+                        return ([req.msgid, req.req_id, err.toString()]);
+                    });
+                    callback(err);
+                });
                 q.once('row', function () {
                     arg.colExists = true;
                 });
@@ -239,14 +255,24 @@ function ensureRowVer(req, cb) {
                 sql = util.format('ALTER TABLE %s ADD COLUMN ', b.name) +
                     arg.colName + ' INTEGER';
                 q = pg.query(sql);
-                q.on('error', callback);
+                q.on('error', function (err) {
+                    dtrace['updatebucket-error'].fire(function () {
+                        return ([req.msgid, req.req_id, err.toString()]);
+                    });
+                    callback(err);
+                });
                 q.once('end', callback.bind(null, null));
             },
             function checkIdx(arg, callback) {
                 sql = 'SELECT indexname FROM pg_catalog.pg_indexes ' +
                     'WHERE tablename = $1 AND indexname = $2';
                 q = pg.query(sql, [b.name, arg.idxName]);
-                q.on('error', callback);
+                q.on('error', function (err) {
+                    dtrace['updatebucket-error'].fire(function () {
+                        return ([req.msgid, req.req_id, err.toString()]);
+                    });
+                    callback(err);
+                });
                 q.once('row', function () {
                     arg.idxExists = true;
                 });
@@ -327,6 +353,9 @@ function updateConfig(req, cb) {
             bucket: bucket.name,
             err: err
         }, 'updateConfig: failed');
+        dtrace['updatebucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 
@@ -359,7 +388,12 @@ function dropColumns(req, cb) {
         func: function _drop(c, _cb) {
             _cb = once(_cb);
             var q = pg.query(sql + c);
-            q.once('error', _cb);
+            q.once('error', function (err) {
+                dtrace['updatebucket-error'].fire(function () {
+                    return ([req.msgid, req.req_id, err.toString()]);
+                });
+                _cb(err);
+            });
             q.once('end', function () {
                 _cb();
             });
@@ -401,7 +435,12 @@ function addColumns(req, cb) {
                 sql: str
             }, 'addColumns: adding column');
             var q = pg.query(str);
-            q.once('error', _cb);
+            q.once('error', function (err) {
+                dtrace['updatebucket-error'].fire(function () {
+                    return ([req.msgid, req.req_id, err.toString()]);
+                });
+                _cb(err);
+            });
             q.once('end', function () {
                 _cb();
             });
@@ -502,7 +541,10 @@ function update(options) {
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id]);
+            }
         });
     }
 
diff --git a/lib/dtrace.js b/lib/dtrace.js
index c5cec2e..d30c73b 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -86,7 +86,52 @@ var PROBES = {
     'handler-start': ['int', 'char *', 'char *', 'char *'],
 
     // msgid, request_type, handler_name
-    'handler-done': ['int', 'char *', 'char *']
+    'handler-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'getbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'getbucket-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'getbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'createbucket-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid
+    'listbuckets-start': ['int', 'char *'],
+
+    // msgid, reqid, error message
+    'listbuckets-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid
+    'listbuckets-done': ['int', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'delbucket-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, req_id, bucket
+    'updatebucket-start' : ['int', 'char *', 'char *'],
+
+    // msgid, req_id, error message
+    'updatebucket-error' : ['int', 'char *', 'char *'],
+
+    // msgid, req_id
+    'updatebucket-done': ['int', 'char *']
 };
 var PROVIDER;
 
