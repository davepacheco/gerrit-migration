commit 46b388d7faf8cebf33cfddeaba53517d7af2ddfa (refs/changes/65/2565/1)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-09-13T22:52:34+00:00 (2 years, 1 month ago)
    
    MORAY-351 moray missing DTrace probes for many RPC operations

diff --git a/lib/buckets/creat.js b/lib/buckets/creat.js
index 9a4c6b6..f718eb4 100644
--- a/lib/buckets/creat.js
+++ b/lib/buckets/creat.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 var BucketConflictError = require('../errors').BucketConflictError;
 var InternalError = require('../errors').InternalError;
 
@@ -64,6 +65,9 @@ function insertConfig(req, cb) {
     })));
     values.push(JSON.stringify(bucket.options || {}));
 
+    dtrace['createbucket-insertconfig-start'].fire(function () {
+        return ([req.msgid, req.req_id, sql]);
+    });
     log.debug({
         bucket: util.inspect(bucket)
     }, 'insertConfig: entered');
@@ -72,6 +76,9 @@ function insertConfig(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'insertConfig: failed');
+        dtrace['createbucket-insertconfig-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         if (err.code === '23505') {
             cb(new BucketConflictError(err, bucket.name));
         } else {
@@ -81,6 +88,9 @@ function insertConfig(req, cb) {
 
     q.once('end', function () {
         log.debug('insertConfig: done');
+        dtrace['createbucket-insertconfig-done'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
         cb();
     });
 
@@ -97,6 +107,9 @@ function createSequence(req, cb) {
 
     cb = once(cb);
 
+    dtrace['createbucket-createsequence-start'].fire(function () {
+        return ([req.msgid, req.req_id, sql]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
@@ -105,11 +118,17 @@ function createSequence(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createSequence: failed');
+        dtrace['createbucket-createsequence-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
     q.once('end', function () {
         log.debug('createSequence: done');
+        dtrace['createbucket-createsequence-done'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
         cb();
     });
 }
@@ -131,6 +150,9 @@ function createLockingSerial(req, cb) {
                            '(id INTEGER PRIMARY KEY)'),
                           bucket.name);
 
+    dtrace['createbucket-createlockingserial-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
@@ -139,6 +161,9 @@ function createLockingSerial(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createLockingSerial: failed');
+        dtrace['createbucket-createlockingserial-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
@@ -148,10 +173,16 @@ function createLockingSerial(req, cb) {
         q = pg.query(sql);
         q.once('error', function (err) {
             log.debug(err, 'createLockingSerial(insert): failed');
+            dtrace['createbucket-createlockingserial-error'].fire(function () {
+                return ([req.msgid, req.req_id, sql, err.toString()]);
+            });
             cb(err);
         });
         q.once('end', function () {
             log.debug('createLockingSerial: done');
+            dtrace['createbucket-createlockingserial-done'].fire(function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            });
             cb();
         });
     });
@@ -179,6 +210,9 @@ function createTable(req, cb) {
 
     cb = once(cb);
 
+    dtrace['createbucket-createtable-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
@@ -187,11 +221,17 @@ function createTable(req, cb) {
 
     q.once('error', function (err) {
         log.debug(err, 'createTable: failed');
+        dtrace['createbucket-createtable-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
     q.once('end', function () {
         log.debug('createTable: done');
+        dtrace['createbucket-createtable-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         cb();
     });
 }
@@ -237,6 +277,9 @@ function creat(options) {
         bucket.options.version = bucket.options.version || 0;
         req.bucket = bucket;
 
+        dtrace['createbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
         req.log.debug({
             bucket: name,
             cfg: cfg,
diff --git a/lib/buckets/del.js b/lib/buckets/del.js
index 44e5c14..683ed4d 100644
--- a/lib/buckets/del.js
+++ b/lib/buckets/del.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 var mod_errors = require('../errors');
 var InvalidBucketNameError = mod_errors.InvalidBucketNameError;
@@ -60,6 +61,9 @@ function checkExists(req, cb) {
     var log = req.log;
 
     var sql = 'SELECT * FROM buckets_config WHERE name = $1 FOR UPDATE';
+    dtrace['delbucket-checkexists-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: req.bucket.name
     }, 'checkExists: entered');
@@ -72,10 +76,16 @@ function checkExists(req, cb) {
             bucket: req.bucket.name,
             err: err
         }, 'checkExists: failed');
+        dtrace['delbucket-checkexists-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
     q.once('row', function (r) {
+        dtrace['delbucket-checkexists-row'].fire(function () {
+            return ([req.msgid, r.name]);
+        });
         found = true;
     });
 
@@ -83,6 +93,10 @@ function checkExists(req, cb) {
         log.debug({
             found: found
         }, 'checkExists: done');
+        dtrace['delbucket-checkexists-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name,
+                ((found) ? 1 : 0)]);
+        });
         if (found) {
             cb(null);
         } else {
@@ -102,12 +116,24 @@ function deleteConfig(req, cb) {
 
     cb = once(cb);
 
+    dtrace['delbucket-deleteconfig-start'].fire(function () {
+        return ([req.msgid, req.req_id, bucket.name]);
+    });
     log.debug({ bucket: bucket.name }, 'deleteConfig: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({ bucket: bucket.name }, 'deleteConfig: error');
+        dtrace['delbucket-deleteconfig-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({ bucket: bucket.name }, 'deleteConfig: done');
+        dtrace['delbucket-deleteconfig-done'].fire(function () {
+            return ([req.msgid, req.req_id, bucket.name]);
+        });
         cb();
     });
 }
@@ -122,17 +148,31 @@ function dropTable(req, cb) {
 
     cb = once(cb);
 
+    dtrace['delbucket-droptable-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
     }, 'dropTable: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: bucket.name
+        }, 'dropTable: error');
+        dtrace['delbucket-droptable-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({
             bucket: bucket.name
         }, 'dropTable: done');
+        dtrace['delbucket-droptable-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         cb();
     });
 }
@@ -147,6 +187,9 @@ function dropSequence(req, cb) {
 
     cb = once(cb);
 
+    dtrace['delbucket-dropsequence-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
@@ -154,9 +197,20 @@ function dropSequence(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: req.bucket.name
+        }, 'dropSequence: error');
+        dtrace['delbucket-dropsequence-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropSequence: done');
+        dtrace['delbucket-dropsequence-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         cb();
     });
 }
@@ -172,6 +226,9 @@ function dropLockingSerial(req, cb) {
 
     cb = once(cb);
 
+    dtrace['delbucket-droplockingserial-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         sql: sql
@@ -179,9 +236,18 @@ function dropLockingSerial(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug('dropLockingSequence: error');
+        dtrace['delbucket-droplockingserial-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropLockingSequence: done');
+        dtrace['delbucket-droplockingserial-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         cb();
     });
 }
@@ -204,6 +270,9 @@ function del(options) {
             name: bucket
         };
 
+        dtrace['delbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         req.log.debug({
             bucket: bucket,
             opts: opts
diff --git a/lib/buckets/get.js b/lib/buckets/get.js
index 76e79e4..08831a3 100644
--- a/lib/buckets/get.js
+++ b/lib/buckets/get.js
@@ -12,6 +12,7 @@ var util = require('util');
 
 var BucketNotFoundError = require('../errors').BucketNotFoundError;
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 
 ///--- Globals
@@ -53,12 +54,19 @@ function loadBucket(req, cb) {
 
     q.once('row', function (r) {
         row = r;
+        dtrace['getbucket-row'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name, sql,
+                row['index']]);
+        });
     });
 
     q.once('end', function () {
         log.debug({
             bucket: row
         }, 'loadBucket: done');
+        dtrace['getbucket-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name, ((row) ? 1 : 0)]);
+        });
         if (row) {
             row.options = row.options || {};
             row.options.version = row.options.version || 0;
@@ -88,6 +96,9 @@ function get(options) {
             name: bucket
         };
 
+        dtrace['getbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
         req.log.debug({
             bucket: bucket,
             opts: opts
diff --git a/lib/buckets/list.js b/lib/buckets/list.js
index 84cdf70..531ae67 100644
--- a/lib/buckets/list.js
+++ b/lib/buckets/list.js
@@ -9,6 +9,8 @@
  */
 
 var control = require('../control');
+var dtrace = require('../dtrace');
+var util = require('util');
 
 
 ///--- Globals
@@ -33,15 +35,23 @@ function loadBuckets(req, cb) {
     var sql = 'SELECT * FROM buckets_config';
 
     log.debug('loadBuckets: entered');
-
+    dtrace['loadbuckets-start'].fire(function () {
+        return ([req.msgid, req.req_id]);
+    });
     q = pg.query(sql);
 
     q.once('error', function (err) {
         log.debug(err, 'loadBuckets: failed');
+        dtrace['loadbuckets-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql]);
+        });
         cb(err);
     });
 
     q.on('row', function (r) {
+        dtrace['loadbuckets-row'].fire(function () {
+            return ([req.msgid, req.req_id, r.name]);
+        });
         r.options = r.options || {};
         r.options.version = r.options.version || 0;
         req.rpc.write(r);
@@ -51,6 +61,9 @@ function loadBuckets(req, cb) {
         log.debug({
             buckets: rows
         }, 'loadBuckets: done');
+        dtrace['loadbuckets-done'].fire(function () {
+            return ([req.msgid, req.req_id]);
+        });
         cb(null);
     });
 }
diff --git a/lib/buckets/update.js b/lib/buckets/update.js
index 65ba175..bcb272f 100644
--- a/lib/buckets/update.js
+++ b/lib/buckets/update.js
@@ -14,6 +14,7 @@ var deepEqual = require('deep-equal');
 var once = require('once');
 var vasync = require('vasync');
 var clone = require('clone');
+var dtrace = require('../dtrace');
 
 var common = require('./common');
 var control = require('../control');
@@ -81,6 +82,9 @@ function loadBucket(req, cb) {
 
     cb = once(cb);
 
+    dtrace['updatebucket-loadbucket-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: b.name
     }, 'loadBucket: entered');
@@ -91,14 +95,24 @@ function loadBucket(req, cb) {
             bucket: b.name,
             err: err
         }, 'loadIndexes: failed');
+        dtrace['updatebucket-loadbucket-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
     q.once('row', function (r) {
         row = r;
+        dtrace['updatebucket-loadbucket-row'].fire(function () {
+            return ([req.msgid, req.req_id, r.name]);
+        });
     });
 
     q.once('end', function (r) {
+        dtrace['updatebucket-loadbucket-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name,
+                ((row) ? 1 : 0)]);
+        });
         if (!row) {
             cb(new BucketNotFoundError(req.bucket.name));
             return;
@@ -147,9 +161,15 @@ function ensureReindexProperty(req, cb) {
                 bucket: req.bucket.name,
                 err: err
             }, 'loadIndexes: failed');
+            dtrace['updatebucket-ensureindexproperty-error'].fire(function () {
+                return ([req.msgid, req.req_id, sql, err.toString()]);
+            });
             cb(err);
         });
         q.once('end', function () {
+            dtrace['updatebucket-ensureindexproperty-done'].fire(function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            });
             req.reindex_active = {};
             cb(null);
         });
@@ -191,6 +211,9 @@ function calculateDiff(req, cb) {
         bucket: req.bucket.name,
         diff: req.diff
     }, 'calculateDiff: done');
+    dtrace['updatebucket-calculatediff-done'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name, req.diff]);
+    });
     cb();
 }
 
@@ -213,6 +236,9 @@ function ensureRowVer(req, cb) {
     var pg = req.pg;
     var sql, q;
 
+    dtrace['updatebucket-ensurerowver-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: b.name
     }, 'ensureRowVer: entered');
@@ -222,6 +248,7 @@ function ensureRowVer(req, cb) {
             function checkCol(arg, callback) {
                 sql = 'SELECT column_name FROM information_schema.columns ' +
                     'WHERE table_name = $1 AND column_name = $2';
+
                 q = pg.query(sql, [b.name, arg.colName]);
                 q.on('error', callback);
                 q.once('row', function () {
@@ -280,6 +307,9 @@ function ensureRowVer(req, cb) {
             bucket: b.name,
             err: err
         }, 'ensureRowVer: failed');
+        dtrace['updatebucket-ensurerowver-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 }
@@ -316,6 +346,9 @@ function updateConfig(req, cb) {
 
     cb = once(cb);
 
+    dtrace['updatebucket-updateconfig-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: bucket.name,
         values: values
@@ -327,6 +360,9 @@ function updateConfig(req, cb) {
             bucket: bucket.name,
             err: err
         }, 'updateConfig: failed');
+        dtrace['updatebucket-updateconfig-error'].fire(function () {
+            return ([req.msgid, req.req_id, sql, err.toString()]);
+        });
         cb(err);
     });
 
@@ -334,6 +370,9 @@ function updateConfig(req, cb) {
         log.debug({
             bucket: bucket.name
         }, 'updateConfig: done');
+        dtrace['updatebucket-updateconfig-done'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
         cb();
     });
 }
@@ -351,6 +390,9 @@ function dropColumns(req, cb) {
     var pg = req.pg;
     var sql = util.format('ALTER TABLE %s DROP COLUMN ', req.bucket.name);
 
+    dtrace['updatebucket-dropcolumns-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     log.debug({
         bucket: req.bucket.name,
         del: req.diff.del.join(', ')
@@ -370,6 +412,9 @@ function dropColumns(req, cb) {
             bucket: req.bucket.name,
             err: err
         }, 'dropColumns: %s', err ? 'failed' : 'done');
+        dtrace['updatebucket-dropcolumns-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 }
@@ -391,6 +436,9 @@ function addColumns(req, cb) {
         bucket: req.bucket.name,
         add: req.diff.add.join(', ')
     }, 'addColumns: entered');
+    dtrace['updatebucket-addcolumns-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
     vasync.forEachParallel({
         func: function _drop(c, _cb) {
             _cb = once(_cb);
@@ -412,6 +460,9 @@ function addColumns(req, cb) {
             bucket: req.bucket.name,
             err: err
         }, 'dropColumns: %s', err ? 'failed' : 'done');
+        dtrace['updatebucket-addcolumns-error'].fire(function () {
+            return ([req.msgid, req.req_id, err.toString()]);
+        });
         cb(err);
     });
 }
@@ -434,6 +485,10 @@ function createIndexes(req, cb) {
         return;
     }
 
+    dtrace['updatebucket-createindexes-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name, add]);
+    });
+
     common.createIndexes({
         bucket: req.bucket.name,
         log: req.log,
@@ -460,6 +515,10 @@ function createUniqueIndexes(req, cb) {
         return;
     }
 
+    dtrace['updatebucket-createuniqueindexes-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name, add]);
+    });
+
     common.createIndexes({
         bucket: req.bucket.name,
         log: req.log,
diff --git a/lib/dtrace.js b/lib/dtrace.js
index c5cec2e..bac0ebe 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -86,7 +86,176 @@ var PROBES = {
     'handler-start': ['int', 'char *', 'char *', 'char *'],
 
     // msgid, request_type, handler_name
-    'handler-done': ['int', 'char *', 'char *']
+    'handler-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'getbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, name, sql, index
+    'getbucket-row': ['int', 'char *', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, name, found
+    'getbucket-done': ['int', 'char *', 'char *', 'int'],
+
+    // msgid, reqid, bucket
+    'createbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql
+    'createbucket-insertconfig-start': ['int', 'char *', 'char *'],
+
+    // req_id, sql, error message
+    'createbucket-insertconfig-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, req_id, bucket
+    'createbucket-insertconfig-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql
+    'createbucket-createsequence-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'createbucket-createsequence-error': ['char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-createsequence-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-createlockingserial-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'createbucket-createlockingserial-error': ['int', 'char *', 'char *',
+        'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-createlockingserial-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-createtable-start': ['int', 'char *', 'char *'],
+
+    // msgid, sql, error message
+    'createbucket-createtable-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-createtable-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid
+    'loadbuckets-start': ['int', 'char *'],
+
+    // msgid, reqid, row
+    'loadbuckets-row': ['int', 'char *', 'json'],
+
+    // msgid, reqid, sql
+    'loadbuckets-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid
+    'loadbuckets-done': ['int', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-checkexists-start': ['int', 'char *', 'char *'],
+
+    // msgid, sql, error message
+    'delbucket-checkexists-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, row
+    'delbucket-checkexists-row': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket, found
+    'delbucket-checkexists-done': ['int', 'char *', 'char *', 'int'],
+
+    // msgid, reqid, bucket
+    'delbucket-deleteconfig-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'delbucket-deleteconfig-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-deleteconfig-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-droptable-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'delbucket-droptable-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-droptable-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-dropsequence-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'delbucket-dropsequence-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-dropsequence-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-droplockingserial-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'delbucket-droplockingserial-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-droplockingserial-done': ['int', 'char *', 'char *'],
+
+    // msgid, req_id, bucket
+    'updatebucket-loadbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'updatebucket-loadbucket-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-loadbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, row name
+    'updatebucket-loadbucket-row': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'updatebucket-ensurereindexproperty-error': ['int', 'char *', 'char *',
+        'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-ensureindexproperty-done': ['int', 'char *', 'char *'],
+
+    // msgid, req_id, bucket, diff
+    'updatebucket-calculatediff-done': ['int', 'char *', 'char *', 'json'],
+
+    // msgid, reqid, bucket
+    'updatebucket-ensurerowver-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'updatebucket-ensurerowver-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-updateconfig-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, sql, error message
+    'updatebucket-updateconfig-error': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-updateconfig-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-dropcolumns-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'updatebucket-dropcolumns-error': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'updatebucket-addcolumns-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, error message
+    'updatebucket-addcolumns-error': ['int', 'char *'],
+
+    // msgid, reqid, bucket, indexes to add
+    'updatebucket-createindexes-start': ['int', 'char *', 'char *', 'json'],
+
+    // msgid, reqid, bucket, indexes to add
+    'updatebucket-createuniqueindexes-start': ['int', 'char *', 'char *',
+        'json']
+
 };
 var PROVIDER;
 
