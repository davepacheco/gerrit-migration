From 1bc2546cf64f4c941ef30b7c690440458155abce Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Wed, 13 Sep 2017 22:52:34 +0000
Subject: [PATCH] MORAY-351 moray missing DTrace probes for many RPC operations

---
 lib/buckets/creat.js  | 17 +++++++++++++++--
 lib/buckets/del.js    | 33 ++++++++++++++++++++++++++++-----
 lib/buckets/get.js    |  9 ++++++++-
 lib/buckets/list.js   | 10 ++++++++--
 lib/buckets/update.js | 22 ++++++++++++++--------
 lib/control.js        |  6 ++++++
 lib/dtrace.js         | 35 ++++++++++++++++++++++++++++++++++-
 7 files changed, 113 insertions(+), 19 deletions(-)

diff --git a/lib/buckets/creat.js b/lib/buckets/creat.js
index 9a4c6b6..1c4d97e 100644
--- a/lib/buckets/creat.js
+++ b/lib/buckets/creat.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 var BucketConflictError = require('../errors').BucketConflictError;
 var InternalError = require('../errors').InternalError;
 
@@ -208,7 +209,13 @@ function createIndexes(req, cb) {
             return (!req.bucket.index[k].unique);
         }).concat('_id', '_etag', '_mtime', '_vnode')
             .map(common.mapIndexType.bind(null, req.bucket.index))
-    }, cb);
+    }, function (err) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        cb();
+    });
 }
 
 ///--- API
@@ -242,10 +249,16 @@ function creat(options) {
             cfg: cfg,
             opts: opts
         }, 'createBucket: entered');
+        dtrace['createbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/del.js b/lib/buckets/del.js
index 44e5c14..4c59696 100644
--- a/lib/buckets/del.js
+++ b/lib/buckets/del.js
@@ -14,6 +14,7 @@ var once = require('once');
 
 var common = require('./common');
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 var mod_errors = require('../errors');
 var InvalidBucketNameError = mod_errors.InvalidBucketNameError;
@@ -105,7 +106,10 @@ function deleteConfig(req, cb) {
     log.debug({ bucket: bucket.name }, 'deleteConfig: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({ bucket: bucket.name }, 'deleteConfig: error');
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({ bucket: bucket.name }, 'deleteConfig: done');
         cb();
@@ -128,7 +132,12 @@ function dropTable(req, cb) {
     }, 'dropTable: entered');
 
     q = pg.query(sql);
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: bucket.name
+        }, 'dropTable: error');
+        cb(err);
+    });
     q.once('end', function () {
         log.debug({
             bucket: bucket.name
@@ -154,7 +163,12 @@ function dropSequence(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug({
+            bucket: req.bucket.name
+        }, 'dropSequence: error');
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropSequence: done');
         cb();
@@ -179,7 +193,10 @@ function dropLockingSerial(req, cb) {
 
     q = pg.query(sql);
 
-    q.once('error', cb);
+    q.once('error', function (err) {
+        log.debug('dropLockingSequence: error');
+        cb(err);
+    });
     q.once('end', function () {
         log.debug('dropLockingSequence: done');
         cb();
@@ -208,10 +225,16 @@ function del(options) {
             bucket: bucket,
             opts: opts
         }, 'delBucket: entered');
+        dtrace['delbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, req.bucket.name]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/get.js b/lib/buckets/get.js
index 76e79e4..dff4f6d 100644
--- a/lib/buckets/get.js
+++ b/lib/buckets/get.js
@@ -12,6 +12,7 @@ var util = require('util');
 
 var BucketNotFoundError = require('../errors').BucketNotFoundError;
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 
 ///--- Globals
@@ -92,11 +93,17 @@ function get(options) {
             bucket: bucket,
             opts: opts
         }, 'getBucket: entered');
+        dtrace['getbucket-start'].fire(function () {
+            return ([req.msgid, req.req_id, bucket]);
+        });
 
         control.handlerPipeline({
             req: req,
             funcs: PIPELINE,
-            cbOutput: function () { return req.bucket; }
+            cbOutput: function () { return req.bucket; },
+            cbProbe: function () {
+                return ([req.msgid, req.req_id, req.bucket.name]);
+            }
         });
     }
 
diff --git a/lib/buckets/list.js b/lib/buckets/list.js
index 84cdf70..0c51adf 100644
--- a/lib/buckets/list.js
+++ b/lib/buckets/list.js
@@ -9,6 +9,7 @@
  */
 
 var control = require('../control');
+var dtrace = require('../dtrace');
 
 
 ///--- Globals
@@ -33,7 +34,6 @@ function loadBuckets(req, cb) {
     var sql = 'SELECT * FROM buckets_config';
 
     log.debug('loadBuckets: entered');
-
     q = pg.query(sql);
 
     q.once('error', function (err) {
@@ -72,10 +72,16 @@ function list(options) {
         req.log.debug({
             opts: opts
         }, 'listBuckets: entered');
+        dtrace['listbuckets-start'].fire(function () {
+            return ([req.msgid, req.req_id]);
+        });
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id]);
+            }
         });
     }
 
diff --git a/lib/buckets/update.js b/lib/buckets/update.js
index 65ba175..ac09b49 100644
--- a/lib/buckets/update.js
+++ b/lib/buckets/update.js
@@ -14,6 +14,7 @@ var deepEqual = require('deep-equal');
 var once = require('once');
 var vasync = require('vasync');
 var clone = require('clone');
+var dtrace = require('../dtrace');
 
 var common = require('./common');
 var control = require('../control');
@@ -84,6 +85,9 @@ function loadBucket(req, cb) {
     log.debug({
         bucket: b.name
     }, 'loadBucket: entered');
+    dtrace['updatebucket-start'].fire(function () {
+        return ([req.msgid, req.req_id, req.bucket.name]);
+    });
 
     q = pg.query(sql);
     q.once('error', function (err) {
@@ -222,8 +226,11 @@ function ensureRowVer(req, cb) {
             function checkCol(arg, callback) {
                 sql = 'SELECT column_name FROM information_schema.columns ' +
                     'WHERE table_name = $1 AND column_name = $2';
+
                 q = pg.query(sql, [b.name, arg.colName]);
-                q.on('error', callback);
+                q.on('error', function (err) {
+                    callback(err);
+                });
                 q.once('row', function () {
                     arg.colExists = true;
                 });
@@ -360,9 +367,7 @@ function dropColumns(req, cb) {
             _cb = once(_cb);
             var q = pg.query(sql + c);
             q.once('error', _cb);
-            q.once('end', function () {
-                _cb();
-            });
+            q.once('end', _cb);
         },
         inputs: req.diff.del
     }, function (err) {
@@ -402,9 +407,7 @@ function addColumns(req, cb) {
             }, 'addColumns: adding column');
             var q = pg.query(str);
             q.once('error', _cb);
-            q.once('end', function () {
-                _cb();
-            });
+            q.once('end', _cb);
         },
         inputs: req.diff.add
     }, function (err) {
@@ -502,7 +505,10 @@ function update(options) {
 
         control.handlerPipeline({
             req: req,
-            funcs: PIPELINE
+            funcs: PIPELINE,
+            cbProbe: function () {
+                return ([req.msgid, req.req_id]);
+            }
         });
     }
 
diff --git a/lib/control.js b/lib/control.js
index fe22eb3..7d95d73 100644
--- a/lib/control.js
+++ b/lib/control.js
@@ -139,6 +139,12 @@ function handlerPipeline(options) {
                 return [req.msgid, route, handler.name, req.req_id];
             });
             handler(options.req, function (err) {
+                if (err) {
+                    dtrace.fire('handler-error', function () {
+                        return ([req.msgid, req.req_id, route, handler.name,
+                            err.toString()]);
+                    });
+                }
                 dtrace.fire('handler-done', function () {
                     return [req.msgid, route, handler.name];
                 });
diff --git a/lib/dtrace.js b/lib/dtrace.js
index c5cec2e..ee3be9e 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -85,8 +85,41 @@ var PROBES = {
     // msgid, request_type, handler_name, req_id
     'handler-start': ['int', 'char *', 'char *', 'char *'],
 
+    // msgid, req_id, route, handler_name, error message
+    'handler-error': ['int', 'char *', 'char *', 'char *', 'char *'],
+
     // msgid, request_type, handler_name
-    'handler-done': ['int', 'char *', 'char *']
+    'handler-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'getbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'getbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'createbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, reqid
+    'listbuckets-start': ['int', 'char *'],
+
+    // msgid, reqid
+    'listbuckets-done': ['int', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-start': ['int', 'char *', 'char *'],
+
+    // msgid, reqid, bucket
+    'delbucket-done': ['int', 'char *', 'char *'],
+
+    // msgid, req_id, bucket
+    'updatebucket-start' : ['int', 'char *', 'char *'],
+
+    // msgid, req_id
+    'updatebucket-done': ['int', 'char *']
 };
 var PROVIDER;
 
-- 
2.21.0

