commit b2210b0e9efca94e8ed753e0c190b0e7dbd48f32 (refs/changes/05/3705/3)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2018-03-30T21:33:21+00:00 (1 year, 6 months ago)
    
    TOOLS-2004 Warden should adopt assert-plus naming convention

diff --git a/lib/validate.js b/lib/validate.js
index 3336771..de59628 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -236,18 +236,18 @@ function crossValidate(errs, arg, raw, validated, afterFuncs, callback) {
 
 module.exports = {
     params: validateParams,
-    fieldsArray: validators.fieldsArray,
-    IParray: validators.IParray,
-    IP: validators.IP,
+    arrayOfFields: validators.arrayOfFields,
+    arrayOfIp: validators.arrayOfIp,
+    ip: validators.ip,
     string: validators.string,
-    stringArray: validators.stringArray,
+    arrayOfString: validators.arrayOfString,
     stringOrArray: validators.stringOrArray,
     subnet: validators.subnet,
-    subnetArray: validators.subnetArray,
-    UUID: validators.UUID,
+    arrayOfSubnet: validators.arrayOfSubnet,
+    uuid: validators.uuid,
     uuidPrefix: validators.uuidPrefix,
-    isUUID: validators.isUUID,
-    UUIDarray: validators.UUIDarray,
+    isUuid: validators.isUuid,
+    arrayOfUuid: validators.arrayOfUuid,
     isNotInteger: validators.isNotInteger,
     offset: validators.offset,
     limit: validators.limit,
diff --git a/lib/validators.js b/lib/validators.js
index b72738a..0d5fbf4 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -531,18 +531,18 @@ function validateEnum(values) {
 
 
 module.exports = {
-    fieldsArray: validateFieldsArray,
-    IParray: validateIParray,
-    IP: validateIP,
+    arrayOfFields: validateFieldsArray,
+    arrayOfIp: validateIParray,
+    ip: validateIP,
     subnet: validateSubnet,
-    subnetArray: validateSubnetArray,
-    stringArray: validateStringArray,
+    arrayOfSubnet: validateSubnetArray,
+    arrayOfString: validateStringArray,
     string: validateString,
     stringOrArray: validateStringOrArray,
     uuidPrefix: validateUUIDPrefix,
-    UUID: validateUUID,
-    isUUID: isValidUUID,
-    UUIDarray: validateUUIDarray,
+    uuid: validateUUID,
+    isUuid: isValidUUID,
+    arrayOfUuid: validateUUIDarray,
     isNotInteger: isNotInteger,
     offset: validateOffset,
     limit: validateLimit,
diff --git a/package.json b/package.json
index 9e38804..5b230a7 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "restify-warden",
-  "version": "0.3.0",
+  "version": "1.0.0",
   "description": "Yet another parameter validator",
   "author": "Joyent, Inc",
   "main": "./lib/validate.js",
diff --git a/tests/run.js b/tests/run.js
index 45d6187..ad71394 100644
--- a/tests/run.js
+++ b/tests/run.js
@@ -71,7 +71,7 @@ test('IP-S-KV', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IP
+            ip: validate.ip
         }
     };
     var params = { ip: '8.8.8.8' };
@@ -131,9 +131,9 @@ test('Enum-S-KI', function (t) {
 test('Fields-S-KV', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name' ])
+            fields: validate.arrayOfFields([ 'name' ])
         }
     };
 
@@ -149,9 +149,9 @@ test('Fields-S-KV', function (t) {
 test('Params-S-Undef', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name' ])
+            fields: validate.arrayOfFields([ 'name' ])
         }
     };
 
@@ -170,9 +170,9 @@ test('Params-S-Undef', function (t) {
 test('Params-S-Arr', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name' ])
+            fields: validate.arrayOfFields([ 'name' ])
         }
     };
 
@@ -191,9 +191,9 @@ test('Params-S-Arr', function (t) {
 test('Params-S-Num', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name' ])
+            fields: validate.arrayOfFields([ 'name' ])
         }
     };
 
@@ -212,9 +212,9 @@ test('Params-S-Num', function (t) {
 test('Fields-S-KI-arr-excess', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name', 'addr' ])
+            fields: validate.arrayOfFields([ 'name', 'addr' ])
         }
     };
 
@@ -235,9 +235,9 @@ test('Fields-S-KI-arr-excess', function (t) {
 test('Fields-S-KI-notarr', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name', 'addr' ])
+            fields: validate.arrayOfFields([ 'name', 'addr' ])
         }
     };
 
@@ -257,9 +257,9 @@ test('Fields-S-KI-notarr', function (t) {
 test('Fields-S-KI-arr-has-no-str', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name', 'addr' ])
+            fields: validate.arrayOfFields([ 'name', 'addr' ])
         }
     };
 
@@ -279,9 +279,9 @@ test('Fields-S-KI-arr-has-no-str', function (t) {
 test('Fields-S-KI-arr-bad-name', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name', 'addr' ])
+            fields: validate.arrayOfFields([ 'name', 'addr' ])
         }
     };
 
@@ -301,9 +301,9 @@ test('Fields-S-KI-arr-bad-name', function (t) {
 test('Fields-S-KI-arr-zero', function (t) {
     var opts = {
         strict: true,
-        required: { name: validate.UUID },
+        required: { name: validate.uuid },
         optional: {
-            fields: validate.fieldsArray([ 'name', 'addr' ])
+            fields: validate.arrayOfFields([ 'name', 'addr' ])
         }
     };
 
@@ -324,7 +324,7 @@ test('IP-S-KI', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IP
+            ip: validate.ip
         }
     };
     var params = { ip: 'Veni, vidi, vici' };
@@ -343,7 +343,7 @@ test('IP-S-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IP
+            ip: validate.ip
         }
     };
     var params = { hal: '1000' };
@@ -361,7 +361,7 @@ test('IP-S-KI-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IP
+            ip: validate.ip
         }
     };
     var params = { ip: 'Et tu, Brute?', hal: '1000' };
@@ -376,11 +376,11 @@ test('IP-S-KI-U', function (t) {
     });
 });
 
-test('IParray-S-KV-array', function (t) {
+test('arrayOfIp-S-KV-array', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { ip: ['8.8.8.8', '4.4.4.4'] };
@@ -391,11 +391,11 @@ test('IParray-S-KV-array', function (t) {
     });
 });
 
-test('IParray-S-KV-array-after', function (t) {
+test('arrayOfIp-S-KV-array-after', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         },
         after: function some_no_op(_, _raw, _validated, cb) {
                    return cb();
@@ -409,11 +409,11 @@ test('IParray-S-KV-array-after', function (t) {
     });
 });
 
-test('IParray-S-KV-string', function (t) {
+test('arrayOfIp-S-KV-string', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { ip: '8.8.8.8,4.4.4.4' };
@@ -424,11 +424,11 @@ test('IParray-S-KV-string', function (t) {
     });
 });
 
-test('IParray-S-KV-array-after', function (t) {
+test('arrayOfIp-S-KV-array-after', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         },
         after: function some_no_op(_, _raw, _validated, cb) {
                    return cb({my_err_obj: 42});
@@ -443,12 +443,12 @@ test('IParray-S-KV-array-after', function (t) {
     });
 });
 
-test('IParray-S-KV-array-after2', function (t) {
+test('arrayOfIp-S-KV-array-after2', function (t) {
     var afterErrs = [ {my_err_obj: 42}, {meo: 43} ];
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         },
         after: function some_no_op(_, _raw, _validated, cb) {
             return cb(afterErrs);
@@ -463,11 +463,11 @@ test('IParray-S-KV-array-after2', function (t) {
     });
 });
 
-test('IParray-S-KI-string-empty', function (t) {
+test('arrayOfIp-S-KI-string-empty', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { ip: '' };
@@ -483,11 +483,11 @@ test('IParray-S-KI-string-empty', function (t) {
     });
 });
 
-test('IParray-S-KI-string-notArr', function (t) {
+test('arrayOfIp-S-KI-string-notArr', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { ip: {obj: 'notanarray', foo: 43 } };
@@ -502,11 +502,11 @@ test('IParray-S-KI-string-notArr', function (t) {
     });
 });
 
-test('subnetArray-S-KI-string-notArr', function (t) {
+test('arrayOfSubnet-S-KI-string-notArr', function (t) {
     var opts = {
         strict: true,
         required: {
-            subnet: validate.subnetArray
+            subnet: validate.arrayOfSubnet
         }
     };
     var params = { subnet: {obj: 'notanarray', foo: 43 } };
@@ -521,11 +521,11 @@ test('subnetArray-S-KI-string-notArr', function (t) {
     });
 });
 
-test('IParray-S-U', function (t) {
+test('arrayOfIp-S-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { hotdog: ['frank', 'bun', 'dijon'] };
@@ -566,11 +566,11 @@ function set_err_inv(error, invalid, noproc, sort) {
     }
 }
 
-test('IParray-S-KI-U', function (t) {
+test('arrayOfIp-S-KI-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            ip: validate.IParray
+            ip: validate.arrayOfIp
         }
     };
     var params = { nirvana: ['in bloom', 'smells like teen spirit'],
@@ -794,11 +794,11 @@ test('subnet-S-KI-U', function (t) {
     });
 });
 
-test('subnetArray-S-KV', function (t) {
+test('arrayOfSubnet-S-KV', function (t) {
     var opts = {
         strict: true,
         required: {
-            subnet: validate.subnetArray
+            subnet: validate.arrayOfSubnet
         }
     };
     var params = { subnet: '8.8.8.0/24,4.4.4.0/24' };
@@ -809,11 +809,11 @@ test('subnetArray-S-KV', function (t) {
     });
 });
 
-test('subnetArray-S-KI-gibberish', function (t) {
+test('arrayOfSubnet-S-KI-gibberish', function (t) {
     var opts = {
         strict: true,
         required: {
-            subnet: validate.subnetArray
+            subnet: validate.arrayOfSubnet
         }
     };
     var params = { subnet: 'not,a,subnet,tro,lo,lo' };
@@ -829,11 +829,11 @@ test('subnetArray-S-KI-gibberish', function (t) {
     });
 });
 
-test('subnetArray-S-KI-emptystring', function (t) {
+test('arrayOfSubnet-S-KI-emptystring', function (t) {
     var opts = {
         strict: true,
         required: {
-            subnet: validate.subnetArray
+            subnet: validate.arrayOfSubnet
         }
     };
     var params = { subnet: '' };
@@ -850,7 +850,7 @@ test('subnetArray-S-KI-emptystring', function (t) {
     });
 });
 
-test('subnetArray-S-KI-notobject', function (t) {
+test('arrayOfSubnet-S-KI-notobject', function (t) {
     var opts = {
         strict: true,
         required: {
@@ -873,7 +873,7 @@ test('UUID-S-KV', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUID
+            uuid: validate.uuid
         }
     };
     var params = { uuid: '895ef360-aadb-11e6-b917-178ac4f402e3' };
@@ -887,7 +887,7 @@ test('UUID-S-KI', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUID
+            uuid: validate.uuid
         }
     };
     var params = { uuid: 'Yo mama\'s pudgey. Face it.' };
@@ -905,7 +905,7 @@ test('UUID-S-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUID
+            uuid: validate.uuid
         }
     };
     var params = { kilroy: 'was here' };
@@ -923,7 +923,7 @@ test('UUID-S-KI-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUID
+            uuid: validate.uuid
         }
     };
     var params = { uuid: 'they took my spider-jars into prison',
@@ -1007,11 +1007,11 @@ test('uuidPrefix-S-KI-suffix', function (t) {
     });
 });
 
-test('UUIDarray-S-KV: accepts and returns array of UUIDs', function (t) {
+test('arrayOfUuid-S-KV: accepts and returns array of UUIDs', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
 
@@ -1029,11 +1029,11 @@ test('UUIDarray-S-KV: accepts and returns array of UUIDs', function (t) {
     });
 });
 
-test('UUIDarray-S-KV: accepts and converts UUID string', function (t) {
+test('arrayOfUuid-S-KV: accepts and converts UUID string', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
 
@@ -1047,11 +1047,11 @@ test('UUIDarray-S-KV: accepts and converts UUID string', function (t) {
     });
 });
 
-test('UUIDarray-S-KI: array containing an invalid UUID', function (t) {
+test('arrayOfUuid-S-KI: array containing an invalid UUID', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
     var params = { uuid: ['Gotta keep my mind free...',
@@ -1068,11 +1068,11 @@ test('UUIDarray-S-KI: array containing an invalid UUID', function (t) {
     });
 });
 
-test('UUIDarray-S-KI: not an array (object)', function (t) {
+test('arrayOfUuid-S-KI: not an array (object)', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
 
@@ -1088,11 +1088,11 @@ test('UUIDarray-S-KI: not an array (object)', function (t) {
     });
 });
 
-test('UUIDarray-S-KI: not an array (boolean)', function (t) {
+test('arrayOfUuid-S-KI: not an array (boolean)', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
 
@@ -1108,11 +1108,11 @@ test('UUIDarray-S-KI: not an array (boolean)', function (t) {
     });
 });
 
-test('UUIDarray-S-U', function (t) {
+test('arrayOfUuid-S-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
     var params = { badcafe: [ '1719a244-ab78-11e6-bd7e-c71f1a793a36'] };
@@ -1127,11 +1127,11 @@ test('UUIDarray-S-U', function (t) {
     });
 });
 
-test('UUIDarray-S-KI-U', function (t) {
+test('arrayOfUuid-S-KI-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            uuid: validate.UUIDarray
+            uuid: validate.arrayOfUuid
         }
     };
     var params = { quickcheck: [ 'The way tests were meant', 'to be written'],
@@ -1398,13 +1398,13 @@ test('boolean-S-U', function (t) {
     });
 });
 
-test('isUUID', function (t) {
+test('isUuid', function (t) {
     var uuid = '4aafe9a6-ab7d-11e6-93bb-c315b954888f';
-    var T = validate.isUUID(uuid);
+    var T = validate.isUuid(uuid);
     t.ok(T === true, 'Expected true');
-    var F = validate.isUUID('4aafe9a6ab7d11e693bbc315b954888f');
+    var F = validate.isUuid('4aafe9a6ab7d11e693bbc315b954888f');
     t.ok(F === false, 'Expected false');
-    F = validate.isUUID(0x4aafe9a6ab7d);
+    F = validate.isUuid(0x4aafe9a6ab7d);
     t.ok(F === false, 'Expected false');
     t.end();
 });
@@ -1497,11 +1497,11 @@ test('String-S-KI-U', function (t) {
     });
 });
 
-test('StringArray-S-KV', function (t) {
+test('arrayOfString-S-KV', function (t) {
     var opts = {
         strict: true,
         required: {
-            strs: validate.stringArray
+            strs: validate.arrayOfString
         }
     };
     var params = { strs: ['String', 'String', 'String'] };
@@ -1512,11 +1512,11 @@ test('StringArray-S-KV', function (t) {
     });
 });
 
-test('StringArray-S-KI-one-empty', function (t) {
+test('arrayOfString-S-KI-one-empty', function (t) {
     var opts = {
         strict: true,
         required: {
-            strs: validate.stringArray
+            strs: validate.arrayOfString
         }
     };
     var params = { strs: ['String', 'String', ''] };
@@ -1530,11 +1530,11 @@ test('StringArray-S-KI-one-empty', function (t) {
     });
 });
 
-test('StringArray-S-KI-not-array', function (t) {
+test('arrayOfString-S-KI-not-array', function (t) {
     var opts = {
         strict: true,
         required: {
-            strs: validate.stringArray
+            strs: validate.arrayOfString
         }
     };
     var params = { strs: 'String,With,Commas' };
@@ -1548,11 +1548,11 @@ test('StringArray-S-KI-not-array', function (t) {
     });
 });
 
-test('StringArray-S-U', function (t) {
+test('arrayOfString-S-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            strs: validate.stringArray
+            strs: validate.arrayOfString
         }
     };
     var params = { trash: ['MyString'] };
@@ -1566,11 +1566,11 @@ test('StringArray-S-U', function (t) {
     });
 });
 
-test('StringArray-S-KI-U', function (t) {
+test('arrayOfString-S-KI-U', function (t) {
     var opts = {
         strict: true,
         required: {
-            strs: validate.stringArray
+            strs: validate.arrayOfString
         }
     };
     var params = { trash: ['MyString'], strs: [''] };
