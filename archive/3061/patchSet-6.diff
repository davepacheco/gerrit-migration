commit 50491b72e9c47315bcb9f10c39cde2c481f31a6b (refs/changes/61/3061/6)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-12-12T00:49:06+00:00 (1 year, 10 months ago)
    
    joyent/node-fast#14 want node-fast FastServer 'onConnsDrained' method

diff --git a/CHANGES.md b/CHANGES.md
index 024fd84..2a3badc 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,9 @@
 
 ## Not yet released.
 
+## v2.4.0
+
+* #14 want node-fast FastServer onConnsDestroyed method
 * #12 want support for node v6.12.0
 
 ## v2.3.1
diff --git a/README.md b/README.md
index b722575..6215cbc 100644
--- a/README.md
+++ b/README.md
@@ -371,6 +371,16 @@ handlers for outstanding requests continue as normal, and any data emitted is
 ignored.  As a result, though, these handlers may continue running even after
 this function has been called and client sockets are destroyed.
 
+#### onConnsDestroyed(callback): do work when all connections are destroyed
+
+This method pushes its `callback` argument on a queue of work to be done the
+next time the FastServer connection count goes to zero. If the connection count
+is already zero when `onConnsDestroyed` is called, the callback is invoked
+immediately.
+
+All callbacks pushed on the queue before the next time the connection count goes
+to zero are called in FIFO order the next time all connections are destroyed. Any
+callback pushed this way is called exactly once.
 
 ## Protocol overview
 
diff --git a/bin/fastcall b/bin/fastcall
index 122542e..5349858 100755
--- a/bin/fastcall
+++ b/bin/fastcall
@@ -20,16 +20,20 @@ var mod_assertplus = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
 var mod_fast = require('../lib/fast_client');
+var mod_getopt = require('posix-getopt');
 var mod_net = require('net');
 
 function main()
 {
-	var argv, doabandon, host, port, rpcmethod, rpcargs;
+	var argv, host, port, rpcmethod, rpcargs;
+	var doabandon = false;
+	var leaveconnopen = false;
 	var timeout = null;
 
 	mod_cmdutil.configure({
-	    'synopses': [ '[--abandon-immediately] HOST PORT METHOD ARGS' ],
+	    'synopses': [ '[OPTIONS] HOST PORT METHOD ARGS' ],
 	    'usageMessage': [
+		'    OPTIONS  --abandon-immediately, --leave-conn-open',
 	        '    HOST     DNS name or IP address for remote server',
 		'    PORT     TCP port for remote server',
 		'    METHOD   Name of remote RPC method call',
@@ -38,14 +42,25 @@ function main()
 	});
 	mod_cmdutil.exitOnEpipe();
 
-	argv = process.argv.slice(2);
-	if (argv.length > 4 && argv[0] == '--abandon-immediately') {
-		doabandon = true;
-		argv.shift();
-	} else {
-		doabandon = false;
+	var option;
+	var parser = new mod_getopt.BasicParser('a(abandon-immediately)' +
+	    'c(leave-conn-open)', process.argv);
+	while ((option = parser.getopt()) !== undefined) {
+		switch (option.option) {
+			case 'c':
+				leaveconnopen = true;
+				break;
+			case 'a':
+				doabandon = true;
+				break;
+			default:
+				mod_assertplus.equal('?', option.option);
+				mod_cmdutil.usage();
+				break;
+		}
 	}
 
+	argv = process.argv.slice(parser.optind());
 	if (argv.length != 4) {
 		mod_cmdutil.usage('expected four non-option arguments');
 	}
@@ -64,7 +79,8 @@ function main()
 	}
 
 	if (!Array.isArray(rpcargs)) {
-		mod_cmdutil.usage(new Error('RPC arguments: expected array'));
+		mod_cmdutil.usage(new Error('RPC arguments: expected ' +
+		    'array'));
 	}
 
 	fastcall({
@@ -73,7 +89,8 @@ function main()
 	    'rpcmethod': rpcmethod,
 	    'rpcargs': rpcargs,
 	    'timeout': timeout,
-	    'abandonImmediately': doabandon
+	    'abandonImmediately': doabandon,
+	    'leaveConnOpen': leaveconnopen
 	}, function (err, result) {
 		if (err) {
 			mod_cmdutil.warn(err);
@@ -84,7 +101,7 @@ function main()
 function fastcall(args, callback)
 {
 	var log, conn;
-	var rpcmethod, rpcargs, timeout, doabandon;
+	var rpcmethod, rpcargs, timeout, doabandon, leaveconnopen;
 
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.string(args.host, 'args.host');
@@ -93,11 +110,13 @@ function fastcall(args, callback)
 	mod_assertplus.string(args.rpcmethod, 'args.rpcmethod');
 	mod_assertplus.array(args.rpcargs, 'args.rpcargs');
 	mod_assertplus.bool(args.abandonImmediately, 'args.abandonImmediately');
+	mod_assertplus.bool(args.leaveConnOpen, 'args.leaveConnOpen');
 
 	rpcmethod = args.rpcmethod;
 	rpcargs = args.rpcargs;
 	timeout = args.timeout;
 	doabandon = args.abandonImmediately;
+	leaveconnopen = args.leaveConnOpen;
 
 	log = new mod_bunyan({
 	    'name': 'fastcall',
@@ -108,6 +127,17 @@ function fastcall(args, callback)
 	conn = mod_net.createConnection(args.port, args.host);
 
 	conn.on('connect', function onConnect() {
+		/*
+		 * If the '--leave-conn-open' option was specified, then we
+		 * leave the connection open until the user sends a sigint to
+		 * the process.
+		 */
+		if (leaveconnopen) {
+			process.on('SIGINT', function () {
+				conn.destroy();
+			});
+		}
+
 		var fastconn, req;
 
 		fastconn = new mod_fast.FastClient({
@@ -117,7 +147,9 @@ function fastcall(args, callback)
 		});
 
 		fastconn.on('error', function (err) {
-			conn.destroy();
+			if (!leaveconnopen) {
+				conn.destroy();
+			}
 			callback(new VError(err, 'fast connection'));
 		});
 
@@ -132,7 +164,9 @@ function fastcall(args, callback)
 		}
 
 		req.on('error', function (err) {
-			conn.destroy();
+			if (!leaveconnopen) {
+				conn.destroy();
+			}
 			callback(new VError(err, 'fast request'));
 		});
 
@@ -141,7 +175,9 @@ function fastcall(args, callback)
 		});
 
 		req.on('end', function () {
-			conn.destroy();
+			if (!leaveconnopen) {
+				conn.destroy();
+			}
 			callback();
 		});
 	});
diff --git a/bin/fastserve b/bin/fastserve
index b61e91b..faf0590 100755
--- a/bin/fastserve
+++ b/bin/fastserve
@@ -18,6 +18,7 @@ var mod_assertplus = require('assert-plus');
 var mod_artedi = require('artedi');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
+var mod_getopt = require('posix-getopt');
 var mod_fastdemo = require('../lib/demo_server');
 var mod_fastserver = require('../lib/fast_server');
 var mod_kang = require('kang');
@@ -34,17 +35,36 @@ var usageMessage = [
 
 function main()
 {
-	var argv, port;
+	var argv, port, option;
+
+	var config = {
+		'quiesce': false
+	};
 
 	mod_cmdutil.configure({
-	    'synopses': [ 'PORT' ],
+	    'synopses': [ '[OPTIONS] PORT' ],
 	    'usageMessage': usageMessage
 	});
 	mod_cmdutil.exitOnEpipe();
 
-	argv = process.argv.slice(2);
-	if (argv.length != 1) {
+	var parser = new mod_getopt.BasicParser('q(quiesce)', process.argv);
+	while ((option = parser.getopt()) !== undefined) {
+		switch (option.option) {
+			case 'q':
+				config.quiesce = true;
+				break;
+			default:
+				mod_assertplus.equal('?', option.option);
+				mod_cmdutil.usage();
+				break;
+		}
+	}
+
+	argv = process.argv.slice(parser.optind());
+	if (argv.length < 1) {
 		mod_cmdutil.usage('expected PORT');
+	} else if (argv.length > 1) {
+		mod_cmdutil.warn('ignoring options/arguments after PORT');
 	}
 
 	port = parseInt(argv[0], 10);
@@ -53,8 +73,9 @@ function main()
 	}
 
 	fastDemoServer({
-	    'fastPort': port,
-	    'monitorPort': MONITOR_PORT
+		'fastPort': port,
+		'monitorPort': MONITOR_PORT,
+		'config': config
 	});
 }
 
@@ -66,6 +87,9 @@ function fastDemoServer(args)
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.number(args.fastPort, 'args.fastPort');
 	mod_assertplus.number(args.monitorPort, 'args.monitorPort');
+	mod_assertplus.object(args.config, 'args.config');
+
+	var config = args.config;
 
 	collector = mod_artedi.createCollector({
 	    'labels': {
@@ -138,9 +162,19 @@ function fastDemoServer(args)
 
 		process.on('SIGINT', function () {
 			if (++nsigs == 1) {
-				monitor_server.close();
 				sock.close();
-				fastserver.close();
+
+				function shutdown() {
+					monitor_server.close();
+					fastserver.close();
+				}
+
+				if (config.quiesce) {
+					log.info('quiescing server');
+					fastserver.onConnsDestroyed(shutdown);
+				} else {
+					shutdown();
+				}
 			}
 		});
 	});
diff --git a/lib/fast_server.js b/lib/fast_server.js
index 66e0485..965abf5 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -181,6 +181,7 @@ function FastServer(args)
 	this.fs_msghandler = new FastMessageHandler({
 	    'server': this
 	});
+	this.fs_conns_destroyed_callbacks = [];
 	/*
 	 * See the comments below on use of setMaxListeners().
 	 */
@@ -224,6 +225,7 @@ function FastServer(args)
 	this.fs_dtid = fastNservers++;
 	this.fs_dtp = fastServerProvider;
 }
+mod_util.inherits(FastServer, mod_events.EventEmitter);
 
 /* public methods */
 
@@ -576,6 +578,29 @@ FastServer.prototype.connDrain = function (conn)
 		    conn.fc_server_error === null) {
 			conn.fc_socket.destroy();
 		}
+
+		if (mod_jsprim.isEmpty(this.fs_conns)) {
+			while (this.fs_conns_destroyed_callbacks.length > 0) {
+				setImmediate(this.fs_conns_destroyed_callbacks
+				    .shift());
+			}
+		}
+	}
+};
+
+
+/*
+ * Calls 'callback' when all the connections in 'fs_conns' have been destroyed.
+ * The callback is called immediately if the server already has no connections.
+ * Callbacks are queued and called in FIFO order the next time all client
+ * connections have been torn down.
+ */
+FastServer.prototype.onConnsDestroyed = function (callback) {
+	mod_assertplus.func(callback, 'callback');
+	if (mod_jsprim.isEmpty(this.fs_conns)) {
+		setImmediate(callback);
+	} else {
+		this.fs_conns_destroyed_callbacks.push(callback);
 	}
 };
 
diff --git a/package.json b/package.json
index 6065578..0b84742 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.3.1",
+	"version": "2.4.0",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
@@ -17,6 +17,7 @@
 		"kang": "^1.1.0",
 		"lstream": "0.0.4",
 		"microtime": "2.1.6",
+		"once": "1.4.0",
 		"posix-getopt": "1.2.0",
 		"strsplit": "^1.0.0",
 		"vasync": "^1.6.3",
diff --git a/test/tst.server.js b/test/tst.server.js
index d80e6a6..295a159 100644
--- a/test/tst.server.js
+++ b/test/tst.server.js
@@ -15,6 +15,7 @@
 var mod_assertplus = require('assert-plus');
 var mod_artedi = require('artedi');
 var mod_bunyan = require('bunyan');
+var mod_jsprim = require('jsprim');
 var mod_net = require('net');
 var mod_path = require('path');
 var mod_vasync = require('vasync');
@@ -24,6 +25,8 @@ var mod_fastdemo = require('../lib/demo_server');
 var mod_protocol = require('../lib/fast_protocol');
 var mod_testcommon = require('./common');
 
+var EventEmitter = require('events');
+var once = require('once');
 var VError = require('verror');
 
 var testLog;
@@ -356,6 +359,13 @@ function runConnFailureTest(tctx, injectFail, checkError, callback)
 	] }, callback);
 }
 
+function hrtimeToNanoseconds(hrtime)
+{
+	mod_assertplus.ok(hrtime, 'hrtime');
+	var NS_PER_SEC = 1e9;
+	return ((hrtime[0] * NS_PER_SEC) + hrtime[1]);
+}
+
 serverTestCases = [ {
     'name': 'basic RPC: no data',
     'run': function (tctx, callback) {
@@ -860,6 +870,433 @@ serverTestCases = [ {
 	csock.pause();
     }
 
+}, {
+	'name': '\'onConnsDestroyed\' subscribe before client close',
+	'run': function (tctx, callback) {
+		/*
+		 * Check that 'noConnections' event is received once if we
+		 * subscribe to a notification before the client connections
+		 * have been torn down.
+		 */
+		var received = false;
+		var server = tctx.ts_server;
+
+		/*
+		 * It's possible that this test will call the test-case callback
+		 * twice if the onConnsDestroyed callback is called with messed
+		 * up state and then the timeout at the end of the function is
+		 * triggered.
+		 */
+		callback = once(callback);
+
+		server.onConnsDestroyed(function () {
+			if (received) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callback more than ' +
+				    'once'));
+				return;
+			}
+
+			if (!mod_jsprim.isEmpty(server.fs_conns)) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callback when ' +
+				    'server still had active connections'));
+				return;
+			}
+			received = true;
+		});
+
+		tctx.ts_clients.forEach(function (c) {
+			c.tsc_client.detach();
+			c.tsc_socket.destroy();
+		});
+
+		var WAIT_MS = 1000;
+		setTimeout(function () {
+			var err;
+			if (!received) {
+				err = new VError('did not receive ' +
+				    '\'onConnsDestroyed\' event');
+			}
+			callback(err);
+		}, WAIT_MS);
+	}
+}, {
+	'name': '\'noConnections\' subscribe after client close',
+	'run': function (tctx, callback) {
+		/*
+		 * Check that 'noConnections event is sent once if we've
+		 * subscribed to a notification after all client connections
+		 * have been torn down.
+		 */
+		var server = tctx.ts_server;
+		var received = false;
+
+		callback = once(callback);
+
+		tctx.ts_clients.forEach(function (c) {
+			c.tsc_client.detach();
+			c.tsc_socket.destroy();
+		});
+
+		server.onConnsDestroyed(function () {
+			if (received) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callback more than' +
+				    ' once'));
+			    return;
+			}
+			if (!mod_jsprim.isEmpty(server.fs_conns)) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callback when ' +
+				    'server still had active connections'));
+				return;
+			}
+			received = true;
+		});
+
+		var WAIT_MS = 1000;
+		setTimeout(function () {
+			var err;
+			if (!received) {
+				err = new VError('did not receive ' +
+				    '\'onConnsDestroyed\' callback');
+			}
+			callback(err);
+		}, WAIT_MS);
+	    }
+}, {
+	'name': '\'onConnsDestroyed\' callback after successful rpc',
+	'run': function (tctx, callback) {
+		/*
+		 * Check that 'noConnections' event is sent once if we've
+		 * subscribed to the notification while server is working on
+		 * an rpc that will succeed. This verifies that the normal
+		 * request termination path followed by connection shutdown
+		 * triggers the behavior we expect.
+		 */
+		var server = tctx.ts_server;
+		var server_socket = tctx.ts_socket;
+		var client;
+		var received = false;
+
+		/*
+		 * Fires when we connect the second client that is used to issue
+		 * the rpc.
+		 */
+		server_socket.on('connection', once(function () {
+			server.onConnsDestroyed(function () {
+				received = true;
+			});
+		}));
+
+		tctx.connectClient(function () {
+			client = tctx.ts_clients[1].tsc_client;
+
+			var req = client.rpc({
+				'rpcmethod': 'yes',
+				'rpcargs': [ {
+					value: 'yes',
+					count: 1
+				} ]
+			});
+			req.on('error', function (err) {
+				callback(new VError(err, 'received ' +
+				    'unexpected error from dummy rpc'));
+			});
+
+			req.on('data', function () {});
+
+			req.on('end', function () {
+				var WAIT_MS = 1000;
+				tctx.ts_clients.forEach(function (c) {
+					c.tsc_client.detach();
+					c.tsc_socket.destroy();
+				});
+
+				setTimeout(function () {
+					if (!received) {
+						callback(new VError('did not' +
+						    ' receive ' +
+						    '\'onConnsDestroyed\' ' +
+						    'callback'));
+						return;
+					}
+					callback();
+				}, WAIT_MS);
+			});
+		});
+	}
+}, {
+	'name': '\'onConnsDestroyed\' callback after protocol error',
+	'run': function (tctx, callback) {
+		/*
+		 * Check that if we subscribe for the 'noConnections' event
+		 * during an RPC that fails due to a protocol error, then we
+		 * still receive the event once when the client connections
+		 * are torn down.
+		 */
+		var server = tctx.ts_server;
+		var server_socket = tctx.ts_socket;
+		var received = false;
+
+		server_socket.on('connection', once(function () {
+			server.onConnsDestroyed(function () {
+				if (received) {
+					callback(new VError('received ' +
+					    '\'onConnsDestroyed\' callback ' +
+					    'more than once'));
+					return;
+				}
+				if (!mod_jsprim.isEmpty(server.fs_conns)) {
+					callback(new VError('receved ' +
+					    '\'onConnsDestroyed\' callback ' +
+					    'from a server with active ' +
+					    'connections'));
+					return;
+				}
+				received = true;
+			});
+		}));
+
+		tctx.connectClient(function () {
+			var client = tctx.ts_clients[1].tsc_client;
+			var req = client.rpc({
+				'rpcmethod': '',
+				'rpcargs': []
+			});
+			req.on('data', function () {
+				callback(new VError('received unexpected ' +
+				    'data from nonexistent rpc'));
+			});
+
+			req.on('error', function (err) {
+				tctx.ts_clients.forEach(function (c) {
+					c.tsc_client.detach();
+					c.tsc_socket.destroy();
+				});
+
+				var WAIT_MS = 1000;
+				setTimeout(function () {
+					if (!received) {
+						callback(new VError('did ' +
+						    'not receive ' +
+						    '\'onConnsDestroyed\' ' +
+						    'event'));
+						return;
+					}
+					callback();
+				}, WAIT_MS);
+			});
+		});
+	}
+}, {
+	'name': '\'onConnsDestroyed\' multiple callbacks queued',
+	'run': function (tctx, callback) {
+		callback = once(callback);
+
+		var server = tctx.ts_server;
+
+		var callback_one_ts = null;
+		var callback_two_ts = null;
+
+		function checkCallbackIntegrity(time) {
+			if (time) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callback more than ' +
+				    'once'));
+				return (false);
+			}
+			if (!mod_jsprim.isEmpty(server.fs_conns)) {
+				callback(new VError('receved ' +
+				    '\'onConnsDestroyed\' callback from a ' +
+				    'server with active connections'));
+				return (false);
+			}
+			return (true);
+		}
+
+		server.onConnsDestroyed(function () {
+			if (checkCallbackIntegrity(callback_one_ts)) {
+				callback_one_ts = process.hrtime();
+			}
+		});
+
+		server.onConnsDestroyed(function () {
+			if (checkCallbackIntegrity(callback_two_ts)) {
+				callback_two_ts = process.hrtime();
+			}
+
+			if (!callback_one_ts) {
+				callback(new VError('received ' +
+				    '\'onConnsDestroyed\' callbacks out of ' +
+				    'FIFO order'));
+			}
+		});
+
+		tctx.ts_clients.forEach(function (c) {
+			c.tsc_client.detach();
+			c.tsc_socket.destroy();
+		});
+
+		var WAIT_MS = 1000;
+		setTimeout(function () {
+			if (callback_one_ts === null ||
+			    callback_two_ts === null) {
+				callback(new VError('did not receive both ' +
+				    '\'onConnsDestroyed\' callbacks'));
+				return;
+			}
+			var callback_one = hrtimeToNanoseconds(callback_one_ts);
+			var callback_two = hrtimeToNanoseconds(callback_two_ts);
+
+			if (callback_one > callback_two) {
+				callback(new VError('received callbacks out ' +
+				    'of FIFO order'));
+				return;
+			}
+
+			callback();
+		}, WAIT_MS);
+	}
+}, {
+	'name': '\'onConnsDestroyed\' callback after many requests',
+	'run': function (tctx, callback) {
+		/*
+		 *  Register a dummy rpc that alternates between returning
+		 *  errors and succeeding with no data. Connect an addition
+		 *  client and send 200 requests, 100 per client. After all
+		 *  request-sending work is queued up, register with the server
+		 *  to received a notification once all connections are closed.
+		 *  Check the that 'noConnections' event is sent once and only
+		 *  after the clients have been cleaned up. Also verifies that
+		 *  the 'noConnections' event is only received when there are in
+		 *  fact no connections.
+		 */
+		var which = 0;
+		var server = tctx.ts_server;
+		var server_socket = tctx.ts_socket;
+
+		var callback_ts = null;
+		var finish_ts = null;
+
+		server.registerRpcMethod({
+			'rpcmethod': 'alternate',
+			'rpchandler': function (rpc) {
+				var whichrpc = which++;
+				if (whichrpc % 2 === 0) {
+					rpc.end({'value': whichrpc});
+				} else {
+					rpc.fail(new VError('%d', whichrpc));
+				}
+			}
+		});
+
+		/*
+		 * Subscribe to the empty connection set notification upon
+		 * connecting the second client.
+		 */
+		server_socket.on('connection', once(function () {
+			/*
+			 * We expect that the callback is called after both
+			 * clients have closed their connections to the server.
+			 */
+			server.onConnsDestroyed(function () {
+				if (callback_ts !== null) {
+					callback(new VError('received ' +
+					    '\'onConnsDestroyed\' callback ' +
+					    'twice'));
+					return;
+				}
+				if (!mod_jsprim.isEmpty(
+				    tctx.ts_server.fs_conns)) {
+					callback(new VError('received ' +
+					    '\'onConnsDestroyed\' callback ' +
+					    'with active server connections'));
+					return;
+				}
+				callback_ts = process.hrtime();
+			});
+		}));
+
+		tctx.connectClient(function () {
+			var choice = 0;
+			var nrequests = 200;
+			var ncomplete = 0;
+			var e = new EventEmitter();
+
+			var queue = mod_vasync.queuev({
+				'concurrency': 100,
+				'worker': function makeRequest(_, qcallback) {
+					choice = 1 - choice;
+					var c = tctx.ts_clients[choice]
+								.tsc_client;
+					c.rpcBufferAndCallback({
+						'rpcmethod': 'alternate',
+						'rpcargs': [],
+						'maxObjectsToBuffer': 1
+					}, function () {
+						if (++ncomplete == nrequests) {
+							e.emit('complete');
+						}
+					});
+					qcallback();
+				}
+			});
+			for (var i = 0; i < nrequests; i++) {
+				queue.push(i);
+			}
+
+			/*
+			 * Detach and close the clients that sent the requests
+			 * that just finished sending requests. This should
+			 * trigger the noConnections event when the last client
+			 * is closed.
+			 */
+			e.on('complete', function () {
+				var WAIT = 1000;
+				finish_ts = process.hrtime();
+				tctx.ts_clients.forEach(function (c) {
+					c.tsc_client.detach();
+					c.tsc_socket.destroy();
+				});
+				setTimeout(checkForNoConnectionsEvent, WAIT);
+			});
+
+			/*
+			 * Called after all the requests have been sent top
+			 * verify that the noConnections event was received
+			 * after the stream of requests completed.
+			 */
+			function checkForNoConnectionsEvent() {
+				if (callback_ts === null) {
+					callback(new VError('did not receive ' +
+					    '\'onConnsDestroyed\' event'));
+					return;
+				}
+
+				var destroyed = hrtimeToNanoseconds(
+				    callback_ts);
+				var finish = hrtimeToNanoseconds(finish_ts);
+
+				/*
+				 * Sanity check that the 'noConnections' event
+				 * was emitted after the client sockets were
+				 * closed.
+				 */
+				if (finish > destroyed) {
+					callback(new VError('received' +
+					    'noConnections callback before ' +
+					    'all requests were sent'));
+					return;
+				}
+
+				callback();
+			}
+
+			queue.close();
+		});
+	}
 } ];
 
 main();
