commit f74c61b9c56464dbc9071782d98a1246bcc9a019
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-04-05T15:38:43+00:00 (6 months ago)
    
    MANTA-2133 Manta object reads should not require shard 1

diff --git a/lib/common.js b/lib/common.js
index 4d99268..53bc127 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -1065,37 +1065,20 @@ module.exports = {
 
     setupHandler: function (options, clients) {
         assert.object(options, 'options');
-        assert.object(options.jobCache, 'options.jobCache');
-        assert.object(options.log, 'options.log');
-        assert.object(options.collector, 'options.collector');
-        assert.object(clients.keyapi, 'clients.keyapi');
-        assert.object(clients.mahi, 'clients.mahi');
-        assert.object(clients.marlin, 'clients.marlin');
-        assert.object(clients.picker, 'clients.picker');
-        assert.object(options.moray, 'options.moray');
-        assert.object(clients.medusa, 'clients.medusa');
-        assert.object(options.sharkConfig, 'options.sharkConfig');
-        assert.object(options.storage, 'options.storage');
-        assert.number(options.storage.defaultMaxStreamingSizeMB,
-            'options.storage.defaultMaxStreamingSizeMB');
-        assert.object(options.multipartUpload, 'options.multipartUpload');
-        assert.number(options.multipartUpload.prefixDirLen,
-            'options.multipartUpload.prefixDirLen');
-        assert.arrayOfObject(options.accountsSnaplinksDisabled,
-            'options.accountsSnaplinksDisabled');
+        assert.object(clients, 'clients');
 
         function setup(req, res, next) {
+            // General request setup
             req.config = options;
             req.moray = clients.moray;
 
-            // MANTA-331: while a trailing '/' is ok in HTTP,
-            // this messes with the consistent hashing, so
-            // ensure there isn't one
+            /*
+             * MANTA-331: while a trailing '/' is ok in HTTP, this messes with
+             * the consistent hashing, so ensure there isn't one
+             */
             /* JSSTYLED */
             req._path = req._path.replace(/\/*$/, '');
 
-            req.jobCache = options.jobCache;
-
             req.log = (req.log || options.log).child({
                 method: req.method,
                 path: req.path(),
@@ -1105,12 +1088,9 @@ module.exports = {
             // Attach an artedi metric collector to each request object.
             req.collector = options.collector;
 
-            req.marlin = clients.marlin;
-            req.picker = clients.picker;
             req.sharks = [];
             req.sharkConfig = options.sharkConfig;
             req.sharkAgent = clients.sharkAgent;
-            req.medusa = clients.medusa;
             req.msk_defaults = {
                 maxStreamingSize: options.storage.defaultMaxStreamingSizeMB *
                     1024 * 1024,
@@ -1118,6 +1098,22 @@ module.exports = {
             };
             req.accountsSnaplinksDisabled = options.accountsSnaplinksDisabled;
 
+            // Write request setup
+            if (!req.isReadOnly()) {
+                req.picker = clients.picker;
+            }
+
+            // Job request setup
+            if (req.isMarlinRequest()) {
+                req.marlin = clients.marlin;
+                req.jobCache = options.jobCache;
+            }
+
+            // Medusa request setup
+            if (req.isMedusaRequest()) {
+                req.medusa = clients.medusa;
+            }
+
             var _opts = {
                 account: req.owner.account,
                 path: req.path()
@@ -1147,5 +1143,4 @@ module.exports = {
 
         return (setup);
     }
-
 };
diff --git a/lib/server.js b/lib/server.js
index c23229d..15b435a 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -219,27 +219,41 @@ function createServer(options, clients, name) {
     server.use(function ensureDependencies(req, res, next) {
         var ok = true;
         var errors = [];
+        var error;
 
-        if (!clients.picker) {
-            errors.push(new Error('picker unavailable'));
-            req.log.error('picker unavailable');
+        if (!clients.moray) {
+            error = 'index moray unavailable';
+            errors.push(new Error(error));
+            req.log.error(error);
             ok = false;
-        } else if (!clients.moray) {
-            errors.push(new Error('index moray unavailable'));
-            req.log.error('index moray unavailable');
+        }
+
+        if (!clients.mahi) {
+            error = 'mahi unavailable';
+            errors.push(new Error(error));
+            req.log.error(error);
+            ok = false;
+        }
+
+        if (!clients.picker && !req.isReadOnly()) {
+            error = 'picker unavailable';
+            errors.push(new Error(error));
+            req.log.error(error);
             ok = false;
-        } else if (!clients.mahi) {
-            errors.push(new Error('mahi unavailable'));
-            req.log.error('mahi unavailable');
+        }
+
+        if (!clients.marlin && req.isMarlinRequest()) {
+            error = 'marlin unavailable';
+            errors.push(new Error(error));
+            req.log.error(error);
+            ok = false;
+        }
+
+        if (!clients.medusa && req.isMedusaRequest()) {
+            error = 'medusa unavailable';
+            errors.push(new Error(error));
+            req.log.error(error);
             ok = false;
-        } else if (!clients.marlin) {
-            errors.push(new Error('marlin available'));
-            req.log.error('marlin unavailable');
-            ok = !req.isMarlinRequest();
-        } else if (!clients.medusa) {
-            errors.push(new Error('medusa unavailable'));
-            req.log.error('medusa unavailable');
-            ok = !req.isMedusaRequest();
         }
 
         if (!ok) {
diff --git a/main.js b/main.js
index 17fc0f7..76d64b6 100644
--- a/main.js
+++ b/main.js
@@ -89,9 +89,6 @@ function parseOptions() {
     return (opts);
 }
 
-
-
-
 function usage(parser, message)
 {
     console.error('muskie: %s', message);
@@ -168,9 +165,8 @@ function createCueballSharkAgent(sharkCfg) {
 }
 
 
-function onPickerConnect(clients, barrier, pickerClient) {
+function onPickerConnect(clients, pickerClient) {
     clients.picker = pickerClient;
-    barrier.done('createPickerClient');
 }
 
 
@@ -405,12 +401,9 @@ function clientsConnected(appName, cfg, clients) {
     barrier.start('createMorayClient');
     createMorayClient(cfg.moray, onMorayConnect.bind(null, clients, barrier));
 
-    barrier.start('createPickerClient');
-    createPickerClient(cfg.storage, cfg.log,
-        onPickerConnect.bind(null, clients, barrier));
-
     // Establish other client connections needed for writes and jobs requests.
-
+    createPickerClient(cfg.storage, cfg.log,
+        onPickerConnect.bind(null, clients));
     createMarlinClient(cfg.marlin, onMarlinConnect.bind(null, clients));
     createMedusaConnector(cfg.medusa, onMedusaConnect.bind(null, clients));
     clients.sharkAgent = createCueballSharkAgent(cfg.sharkConfig);
