commit ab9603bc1db5726c5155e43a86ab164636468b00 (refs/changes/59/3559/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-03-08T01:42:21+00:00 (1 year, 7 months ago)
    
    TRITON-216 Mixed IP and CIDR rules broken by TRITON-133

diff --git a/src/fw/lib/fw.js b/src/fw/lib/fw.js
index 7bd12fa7..77c30a4d 100644
--- a/src/fw/lib/fw.js
+++ b/src/fw/lib/fw.js
@@ -921,6 +921,17 @@ function comparePorts(p1, p2) {
 
 
 function compareTypes(t1, t2) {
+    // "all" comes before any types
+    if (t1 === 'all') {
+        if (t2 === 'all') {
+            return 0;
+        } else {
+            return -1;
+        }
+    } else if (t2 === 'all') {
+        return 1;
+    }
+
     var p1 = t1.split(':');
     var p2 = t2.split(':');
     var c = Number(p1[0]) - Number(p2[0]);
@@ -942,6 +953,17 @@ function compareTypes(t1, t2) {
 }
 
 
+/**
+ * Compare IP and subnet targets from an ipf rule object.
+ */
+function compareAddrs(a1, a2) {
+    var s1 = a1.split('/');
+    var s2 = a2.split('/');
+
+    return mod_addr.compare(s1[0], s2[0]);
+}
+
+
 function compareRules(r1, r2) {
     var res;
 
@@ -964,8 +986,8 @@ function compareRules(r1, r2) {
         return res;
     }
 
-    // Target IPs:
-    return mod_addr.compare(r1.targets[0], r2.targets[0]);
+    // Target IPs and subnets:
+    return compareAddrs(r1.targets[0], r2.targets[0]);
 }
 
 
diff --git a/src/fw/test/unit/fw.test.js b/src/fw/test/unit/fw.test.js
index 06e0d376..d0c377e0 100644
--- a/src/fw/test/unit/fw.test.js
+++ b/src/fw/test/unit/fw.test.js
@@ -749,6 +749,252 @@ exports['add: vm to subnet'] = function (t) {
 };
 
 
+exports['sorting: multiple ip and subnet rules'] = function (t) {
+    var vm = helpers.generateVM();
+    var payload = {
+        rules: [
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM subnet 10.99.99.0/24 TO vm %s ALLOW tcp PORT 25',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM subnet 10.88.88.0/24 TO vm %s ALLOW tcp PORT 25',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM subnet 10.66.66.0/24 TO vm %s ALLOW tcp PORT 25',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 10.77.77.77 TO vm %s ALLOW tcp PORT 25',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 10.77.77.99 TO vm %s ALLOW tcp PORT 25',
+                    vm.uuid),
+                enabled: true
+            }
+        ],
+        vms: [vm]
+    };
+
+    var rule1 = clone(payload.rules[0]);
+    var rule2 = clone(payload.rules[1]);
+    var rule3 = clone(payload.rules[2]);
+    var rule4 = clone(payload.rules[3]);
+    var rule5 = clone(payload.rules[4]);
+
+    var rules = [ rule1, rule2, rule3, rule4, rule5 ];
+
+    async.series([
+    function (cb) {
+        fw.validatePayload(payload, function (err, res) {
+            t.ifError(err);
+            cb();
+        });
+
+    }, function (cb) {
+        fw.add(payload, function (err, res) {
+            t.ifError(err);
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            helpers.fillInRuleBlanks(res.rules, rules);
+            rules.sort(helpers.uuidSort);
+
+            t.deepEqual(helpers.sortRes(res), {
+                vms: [ vm.uuid ],
+                rules: rules
+            }, 'rules returned');
+
+            var v4rules = helpers.defaultZoneRules(vm.uuid);
+            var v6rules = helpers.defaultZoneRules(vm.uuid);
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.66.66.0/24', 25),
+                helpers.allowPortInTCP('10.77.77.77', 25),
+                helpers.allowPortInTCP('10.77.77.99', 25),
+                helpers.allowPortInTCP('10.88.88.0/24', 25),
+                helpers.allowPortInTCP('10.99.99.0/24', 25)
+            ];
+
+            t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
+                'zone ipf.conf files correct');
+            t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
+                'zone ipf6.conf files correct');
+
+            var vmsEnabled = {};
+            vmsEnabled[vm.uuid] = true;
+            t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
+                'ipf enabled in VMs');
+
+            var expRulesOnDisk = {};
+            expRulesOnDisk[rule1.uuid] = clone(rule1);
+            expRulesOnDisk[rule2.uuid] = clone(rule2);
+            expRulesOnDisk[rule3.uuid] = clone(rule3);
+            expRulesOnDisk[rule4.uuid] = clone(rule4);
+            expRulesOnDisk[rule5.uuid] = clone(rule5);
+            t.deepEqual(helpers.rulesOnDisk(), expRulesOnDisk, 'rules on disk');
+
+            cb();
+        });
+
+    }, function (cb) {
+        helpers.fwListEquals(t, rules.sort(helpers.uuidSort), cb);
+
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: rules,
+            vm: vm,
+            vms: [vm]
+        }, cb);
+
+    }
+    ], function () {
+        t.done();
+    });
+};
+
+
+exports['sorting: multiple icmp types'] = function (t) {
+    var vm = helpers.generateVM();
+    var payload = {
+        rules: [
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM any TO vm %s ALLOW icmp TYPE 1',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 1.2.3.4 TO vm %s ALLOW icmp TYPE all',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 1.2.3.5 TO vm %s ALLOW icmp TYPE all',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM any TO vm %s ALLOW icmp TYPE 5 CODE 1',
+                    vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM any TO vm %s ALLOW icmp TYPE 5 CODE 3',
+                    vm.uuid),
+                enabled: true
+            }
+        ],
+        vms: [vm]
+    };
+
+    var rule1 = clone(payload.rules[0]);
+    var rule2 = clone(payload.rules[1]);
+    var rule3 = clone(payload.rules[2]);
+    var rule4 = clone(payload.rules[3]);
+    var rule5 = clone(payload.rules[4]);
+
+    var rules = [ rule1, rule2, rule3, rule4, rule5 ];
+
+    async.series([
+    function (cb) {
+        fw.validatePayload(payload, function (err, res) {
+            t.ifError(err);
+            cb();
+        });
+
+    }, function (cb) {
+        fw.add(payload, function (err, res) {
+            t.ifError(err);
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            helpers.fillInRuleBlanks(res.rules, rules);
+            rules.sort(helpers.uuidSort);
+
+            t.deepEqual(helpers.sortRes(res), {
+                vms: [ vm.uuid ],
+                rules: rules
+            }, 'rules returned');
+
+            var v4rules = helpers.defaultZoneRules(vm.uuid);
+            var v6rules = helpers.defaultZoneRules(vm.uuid);
+            v4rules[vm.uuid].in.icmp = [
+                helpers.allowInICMP('1.2.3.4'),
+                helpers.allowInICMP('1.2.3.5'),
+                helpers.allowInICMP('any', 1),
+                helpers.allowInICMP('any', 5, 1),
+                helpers.allowInICMP('any', 5, 3)
+            ];
+
+            t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
+                'zone ipf.conf files correct');
+            t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
+                'zone ipf6.conf files correct');
+
+            var vmsEnabled = {};
+            vmsEnabled[vm.uuid] = true;
+            t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
+                'ipf enabled in VMs');
+
+            var expRulesOnDisk = {};
+            expRulesOnDisk[rule1.uuid] = clone(rule1);
+            expRulesOnDisk[rule2.uuid] = clone(rule2);
+            expRulesOnDisk[rule3.uuid] = clone(rule3);
+            expRulesOnDisk[rule4.uuid] = clone(rule4);
+            expRulesOnDisk[rule5.uuid] = clone(rule5);
+            t.deepEqual(helpers.rulesOnDisk(), expRulesOnDisk, 'rules on disk');
+
+            cb();
+        });
+
+    }, function (cb) {
+        helpers.fwListEquals(t, rules.sort(helpers.uuidSort), cb);
+
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: rules,
+            vm: vm,
+            vms: [vm]
+        }, cb);
+
+    }
+    ], function () {
+        t.done();
+    });
+};
+
+
 exports['enable / disable rule'] = function (t) {
     var vm = helpers.generateVM();
     var payload = {
