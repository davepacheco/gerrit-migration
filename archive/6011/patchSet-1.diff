From 0159796847f9d4a04c5dba9fea9a6658c5060314 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Mon, 25 Mar 2019 21:01:47 +0100
Subject: [PATCH] TRITON-1104 Failures in automated 'test-cloudapi' suite

---
 test/machines.70.test.js       | 57 ++++++++++++++++++++++++----------
 test/volumes-automount.test.js | 17 +++++-----
 2 files changed, 50 insertions(+), 24 deletions(-)

diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index 258ca1b..621aebb 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -5,12 +5,13 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 
 var util = require('util');
 var test = require('@smaller/tap').test;
+var vasync = require('vasync');
 var common = require('./common');
 var uuid = common.uuid;
 var addPackage = common.addPackage;
@@ -227,16 +228,24 @@ test('KVM image', function (t) {
         // Do nothing if we haven't got a Linux image already imported
         if (body.length === 0) {
             console.log('No KVM images imported, skipping KVM provisioning');
-        } else {
-            var nonLxImages = body.filter(function avoidLx(img) {
-                return (img.type !== 'smartmachine');
-            });
-            const kvmImage = nonLxImages.pop();
-            KVM_IMAGE_UUID = kvmImage.id;
-            if (kvmImage.published_at >= '2018-08-19T00:00:00Z') {
-                BHYVE_IMAGE_UUID = KVM_IMAGE_UUID;
-            }
+            t.end();
+            return;
         }
+
+        var hvmImages = body.filter(function getHvm(img) {
+            return img.type === 'zvol';
+        });
+
+        KVM_IMAGE_UUID = hvmImages.filter(function getKvm(img) {
+            var reqr = img.requirements;
+            return !reqr || !reqr.brand || reqr.brand === 'kvm';
+        }).pop();
+
+        BHYVE_IMAGE_UUID = hvmImages.filter(function getBhyve(img) {
+            var reqr = img.requirements;
+            return !reqr || !reqr.brand || reqr.brand === 'bhyve';
+        }).pop();
+
         t.end();
     });
 });
@@ -412,14 +421,28 @@ test('Delete bhyve test vm', function (t) {
 
 
 test('teardown', function (t) {
-    common.deletePackage(CLIENT, common.kvm_128_package,
-        function delKvmPkg(err1) {
-        common.deletePackage(CLIENT, common.bhyve_128_package,
-            function delBhyvePkg(err2) {
-            common.teardown(CLIENTS, SERVER, function teardownClients(err3) {
-                t.ifError(err1 || err2 || err3, 'teardown success');
-                t.end();
+    var delPkgs = [];
+
+    if (KVM_IMAGE_UUID) {
+        delPkgs.push(common.kvm_128_package);
+    }
+
+    if (BHYVE_IMAGE_UUID) {
+        delPkgs.push(common.bhyve_128_package);
+    }
+
+    vasync.forEachPipeline({
+        inputs: delPkgs,
+        func: function deletePkg(pkg, next) {
+            common.deletePackage(CLIENT, pkg, function delCb(err) {
+                t.ifError(err, 'err deleting package');
+                next();
             });
+        }
+    }, function vasyncCb() {
+        common.teardown(CLIENTS, SERVER, function teardownClients(err) {
+            t.ifError(err, 'teardown success');
+            t.end();
         });
     });
 });
diff --git a/test/volumes-automount.test.js b/test/volumes-automount.test.js
index e7312d4..e47abea 100644
--- a/test/volumes-automount.test.js
+++ b/test/volumes-automount.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -30,7 +30,7 @@ var KEY_FILENAME = '/tmp/cloudapi-test-key';
 /*
  * The test images below are imported via sdcadm post-setup dev-sample-data.
  */
-var TEST_IMAGE_KVM = 'ubuntu-certified-16.04';
+var TEST_IMAGE_HVM = 'ubuntu-certified-16.04';
 var TEST_IMAGE_LX = 'ubuntu-16.04';
 var TEST_IMAGE_NAMES_TO_UUID = {};
 var TEST_IMAGE_SMARTOS = 'minimal-64-lts';
@@ -174,7 +174,7 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
 
     // Ensure we have required images
     test('ensure images', function (t) {
-        var IMG_NAMES = [TEST_IMAGE_LX, TEST_IMAGE_KVM, TEST_IMAGE_SMARTOS];
+        var IMG_NAMES = [TEST_IMAGE_LX, TEST_IMAGE_HVM, TEST_IMAGE_SMARTOS];
 
         vasync.forEachParallel({
             func: common.makeImageProvisionable.bind(null, CLIENT),
@@ -590,12 +590,12 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
         }
     });
 
-    test('creating a KVM container using volume should fail', function (t) {
+    test('creating an HVM container using volume should fail', function (t) {
         var payload;
 
         payload = {
             metadata: {},
-            image: TEST_IMAGE_NAMES_TO_UUID[TEST_IMAGE_KVM],
+            image: TEST_IMAGE_NAMES_TO_UUID[TEST_IMAGE_HVM],
             package: testPackage.id,
             name: 'cloudapi-volume-kvm-' + libuuid.create().split('-')[0],
             firewall_enabled: false,
@@ -616,8 +616,11 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
         CLIENT.post('/my/machines', payload, function (err, req, res, body) {
             t.ok(err, 'expect VM create failure');
             t.equal(err.statusCode, 409, 'expected 409');
-            t.equal(err.message, 'volumes not yet supported with brand "kvm"',
-                'expected error due to unsupported kvm');
+
+            var msg = err.message;
+            t.ok(msg === 'volumes not yet supported with brand "kvm"' ||
+                msg === 'volumes not yet supported with brand "bhyve"',
+                'expected error due to unsupported HVM');
 
             t.end();
         });
-- 
2.21.0

