commit eee8a48a5f7ecd14c0edb77e39bd40a6f571109a (refs/changes/93/2293/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-07-27T01:09:48+00:00 (2 years, 2 months ago)
    
    NAPI-420 Fix indentation issues and enable more lint options

diff --git a/Makefile b/Makefile
index b878482..925d79d 100644
--- a/Makefile
+++ b/Makefile
@@ -31,7 +31,7 @@ JS_FILES	:= $(shell ls *.js) $(shell find lib test -name '*.js') \
 JSL_CONF_NODE	= tools/jsl.node.conf
 JSL_FILES_NODE	= $(JS_FILES)
 JSSTYLE_FILES	= $(JS_FILES)
-JSSTYLE_FLAGS	= -o indent=4,doxygen,unparenthesized-return=0
+JSSTYLE_FLAGS	= -o indent=2,doxygen,unparenthesized-return=0,strict-indent=true
 ESLINT		= ./node_modules/.bin/eslint
 ESLINT_CONF	= tools/eslint.node.conf
 ESLINT_FILES	= $(JS_FILES)
diff --git a/lib/endpoints/fabrics/common.js b/lib/endpoints/fabrics/common.js
index 3cd9772..43b6e66 100644
--- a/lib/endpoints/fabrics/common.js
+++ b/lib/endpoints/fabrics/common.js
@@ -29,7 +29,7 @@ var mod_restify = require('restify');
 function ensureOverlaysEnabled(req, res, next) {
     if (!constants.FABRICS_ENABLED) {
         return next(new mod_restify.PreconditionRequiredError(
-            constants.msg.OVERLAY_REQIRED));
+            constants.msg.OVERLAY_REQUIRED));
     }
 
     return next();
diff --git a/lib/models/aggregation.js b/lib/models/aggregation.js
index c478a91..3f4a145 100644
--- a/lib/models/aggregation.js
+++ b/lib/models/aggregation.js
@@ -103,16 +103,18 @@ var DELETE_SCHEMA = {
 function validateLACPmode(_, name, mode, callback) {
     validate.string(null, name, mode, function (err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (LACP_MODES.indexOf(mode) === -1) {
-            return callback(new errors.invalidParam(name,
+            callback(errors.invalidParam(name,
                 util.format('Invalid LACP mode. Supported modes: %s',
                     LACP_MODES.join(', '))));
+            return;
         }
 
-        return callback(null, mode);
+        callback(null, mode);
     });
 }
 
@@ -128,8 +130,9 @@ function validateMACs(opts, name, list, callback) {
     var macAddrs = [];
 
     if ((typeof (list) !== 'string') && !util.isArray(list)) {
-        return callback(new errors.invalidParam(name,
+        callback(errors.invalidParam(name,
             'must be an array of MAC addresses'));
+        return;
     }
 
     util_common.arrayify(list).forEach(function (m) {
@@ -155,19 +158,22 @@ function validateMACs(opts, name, list, callback) {
     });
 
     if (!jsprim.isEmpty(invalid)) {
-        var mErr = new errors.invalidParam(name, 'invalid MAC addresses',
+        var mErr = errors.invalidParam(name, 'invalid MAC addresses',
             { invalid: Object.keys(invalid).sort() });
-        return callback(mErr);
+        callback(mErr);
+        return;
     }
 
     if (macs.length > MAX_MACS) {
-        return callback(new errors.invalidParam(name,
+        callback(errors.invalidParam(name,
             util.format('maximum of %d MAC addresses supported', MAX_MACS)));
+        return;
     }
 
     if (macs.length === 0) {
-        return callback(new errors.invalidParam(name,
+        callback(errors.invalidParam(name,
             'must specify at least one MAC address'));
+        return;
     }
 
     var nicObjs = [];
@@ -200,27 +206,29 @@ function validateMACs(opts, name, list, callback) {
         for (n in nicObjs) {
             if (nicObjs[n].params.belongs_to_uuid
                 !== nicObjs[0].params.belongs_to_uuid) {
-                return callback(new errors.invalidParam(name,
+                callback(errors.invalidParam(name,
                     constants.msg.AGGR_MATCH));
-           }
+                return;
+            }
         }
 
         // Make sure all nics belong to a server
         for (n in nicObjs) {
             if (nicObjs[n].params.belongs_to_type !== 'server') {
                 invalidMACs.push(util_mac.ntoa(nicObjs[n].mac));
-           }
+            }
         }
 
         if (invalidMACs.length !== 0) {
-            var serverErr = new errors.invalidParam(name,
+            var serverErr = errors.invalidParam(name,
                 constants.msg.AGGR_BELONGS);
             serverErr.invalid = invalidMACs.sort();
-            return callback(serverErr);
+            callback(serverErr);
+            return;
         }
 
         toReturn.belongs_to_uuid = nicObjs[0].params.belongs_to_uuid;
-        return callback(null, null, toReturn);
+        callback(null, null, toReturn);
     });
 }
 
diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 021d4d4..733d30e 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -99,7 +99,7 @@ var LIST_SCHEMA = {
          */
         var networks = parsed.networks;
         if (networks && Array.isArray(networks) && networks.length > 1) {
-            cb(new errors.invalidParam('networks',
+            cb(errors.invalidParam('networks',
                 'Only one network UUID allowed'));
             return;
         }
@@ -132,7 +132,7 @@ var UPDATE_SCHEMA = {
             parsed.owner_uuids = opts.oldPool.params.owner_uuids;
         }
 
-       return validateNetworkOwners(opts, original, parsed, cb);
+        return validateNetworkOwners(opts, original, parsed, cb);
     }
 };
 
diff --git a/lib/models/network.js b/lib/models/network.js
index 4f6e65b..be8c320 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -529,14 +529,16 @@ function validateGateway(_, name, val, cb) {
  */
 function validateGetUUID(_, name, val, cb) {
     if (typeof (val) !== 'string') {
-        return cb(new errors.invalidParam(name, constants.msg.INVALID_UUID));
+        cb(errors.invalidParam(name, constants.msg.INVALID_UUID));
+        return;
     }
 
     if (val === 'admin') {
-        return cb(null, val);
+        cb(null, val);
+        return;
     }
 
-    return validate.UUID(null, name, val, cb);
+    validate.UUID(null, name, val, cb);
 }
 
 
diff --git a/lib/models/nic-tag.js b/lib/models/nic-tag.js
index 7115321..89b2ffc 100644
--- a/lib/models/nic-tag.js
+++ b/lib/models/nic-tag.js
@@ -577,9 +577,10 @@ function nicTagsExist(single, opts, name, tags, callback) {
     }
 
     if (invalid.length !== 0) {
-        var sErr = new errors.invalidParam(name, 'must be a string');
+        var sErr = errors.invalidParam(name, 'must be a string');
         sErr.invalid = invalid;
-        return callback(sErr);
+        callback(sErr);
+        return;
     }
 
     vasync.forEachPipeline({
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 2b891fe..2458500 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -46,7 +46,7 @@ var MESSAGES = {
     OBJ: 'must be an object',
     OFFSET: 'invalid value, offset must be an integer greater than or ' +
         'equal to 0',
-    OVERLAY_REQIRED: 'overlay networking is not enabled',
+    OVERLAY_REQUIRED: 'overlay networking is not enabled',
     PARAMETERS_ARE_OBJECTS: 'Parameters must be objects',
     POOL_OWNER: 'owner cannot provision on network pool',
 
diff --git a/lib/util/validate.js b/lib/util/validate.js
index e65d94a..9650f70 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -43,14 +43,16 @@ var INTERFACE_NUM_RE = /[0-9]+$/;
  */
 function validateBoolean(_, name, val, callback) {
     if (typeof (val) === 'boolean') {
-        return callback(null, val);
+        callback(null, val);
+        return;
     }
 
     if (val === 'true' || val === 'false') {
-        return callback(null, val === 'true');
+        callback(null, val === 'true');
+        return;
     }
 
-    return callback(new errors.invalidParam(name, 'must be a boolean value'));
+    callback(errors.invalidParam(name, 'must be a boolean value'));
 }
 
 
@@ -62,7 +64,7 @@ function validateEnum(values) {
     assert.array(values, 'values');
     return function _validateEnum(_, name, value, callback) {
         if (values.indexOf(value) === -1) {
-            callback(new errors.invalidParam(name,
+            callback(errors.invalidParam(name,
                 'must be one of: ' + values.map(JSON.stringify).join(', ')));
             return;
         }
@@ -114,7 +116,6 @@ function validateNicTagName(_, name, val, callback) {
 }
 
 
-
 /**
  * Validates an array of IP addresses
  */
@@ -123,8 +124,8 @@ function validateIParray(_, name, arr, callback) {
     var ips = [];
 
     if (!util.isArray(arr) && typeof (arr) !== 'string') {
-        return callback(new errors.invalidParam(name,
-            constants.msg.ARRAY_OF_STR));
+        callback(errors.invalidParam(name, constants.msg.ARRAY_OF_STR));
+        return;
     }
 
     // UFDS will return a scalar if there's only one IP. Also allow
@@ -152,10 +153,11 @@ function validateIParray(_, name, arr, callback) {
         var ipErr = errors.invalidParam(name,
             fmt('invalid IP%s', errs.length === 1 ? '' : 's'));
         ipErr.invalid = errs;
-        return callback(ipErr);
+        callback(ipErr);
+        return;
     }
 
-    return callback(null, ips);
+    callback(null, ips);
 }
 
 
@@ -295,14 +297,16 @@ function validateMTU(min, errmsg) {
     var _errmsg = errmsg;
     return function _validateMTU(_, name, val, callback) {
         if (typeof (val) !== 'number') {
-            return callback(new errors.invalidParam(name, _errmsg));
+            callback(errors.invalidParam(name, _errmsg));
+            return;
         }
 
         if (val < _min || val > constants.MTU_MAX) {
-            return callback(new errors.invalidParam(name, _errmsg));
+            callback(errors.invalidParam(name, _errmsg));
+            return;
         }
 
-        return callback(null, val);
+        callback(null, val);
     };
 }
 
diff --git a/package.json b/package.json
index 48867e1..8f70809 100644
--- a/package.json
+++ b/package.json
@@ -30,7 +30,7 @@
     "faucet": "0.0.1",
     "istanbul": "^0.4.0",
     "eslint": "2.13.1",
-    "eslint-plugin-joyent": "1.0.1"
+    "eslint-plugin-joyent": "1.1.0"
   },
   "scripts": {
     "start": "./sbin/napid",
diff --git a/test/integration/ips.test.js b/test/integration/ips.test.js
index 22ad0fa..a18a484 100644
--- a/test/integration/ips.test.js
+++ b/test/integration/ips.test.js
@@ -196,7 +196,7 @@ test('GET /networks/:uuid/ips', function (t) {
 
 
 test('PUT /networks/:uuid/ips/:ip (free an IP)', function (t) {
-    var doUpdate = function (_, cb) {
+    function doUpdate(_, cb) {
         var params = {
             free: true
         };
@@ -204,7 +204,8 @@ test('PUT /networks/:uuid/ips/:ip (free an IP)', function (t) {
         napi.updateIP(state.networks[0].uuid, IPS.zone, params,
             function (err, res) {
             if (err) {
-                return h.doneWithError(t, err, 'freeing IP: ' + IPS.zone);
+                h.doneWithError(t, err, 'freeing IP: ' + IPS.zone);
+                return;
             }
 
             params.ip = IPS.zone;
@@ -213,18 +214,19 @@ test('PUT /networks/:uuid/ips/:ip (free an IP)', function (t) {
             params.network_uuid = state.networks[0].uuid;
             t.deepEqual(res, params, 'freeing an IP');
 
-            return napi.getIP(state.networks[0].uuid, params.ip,
-                    common.reqOpts(t), function (err2, res2) {
-                t.ifError(err2, 'getting free IP: ' + IPS.zone);
-                if (err2) {
-                    return cb(err2);
+            napi.getIP(state.networks[0].uuid, params.ip, common.reqOpts(t),
+                function (err2, res2) {
+                if (h.ifErr(t, err2, 'getting free IP: ' + IPS.zone)) {
+                    cb(err2);
+                    return;
                 }
 
                 t.deepEqual(res2, params, 'GET on a free IP');
-                return cb();
+
+                cb();
             });
         });
-    };
+    }
 
     // Try this twice, to prove that it works for both a free and a non-free IP
     vasync.pipeline({
diff --git a/test/integration/nics.test.js b/test/integration/nics.test.js
index 4427d57..b23b899 100644
--- a/test/integration/nics.test.js
+++ b/test/integration/nics.test.js
@@ -796,14 +796,15 @@ test('PUT /nics/:mac', function (t) {
 test('Check IPs are updated along with nics', function (t) {
     var ips = ['b', 'd'];
 
-    var checkIP = function (ipNum, cb) {
+    function checkIP(ipNum, cb) {
         var ip = state.ip[ipNum];
         var desc = util.format(' %s/%s%s',
             state.networks[0].uuid, ip, state.desc[ipNum]);
         napi.getIP(state.networks[0].uuid, ip, function (err, res) {
             t.ifError(err, 'get updated IP' + desc);
             if (err) {
-                return cb();
+                cb();
+                return;
             }
 
             var exp = {
@@ -816,9 +817,10 @@ test('Check IPs are updated along with nics', function (t) {
                 free: false
             };
             t.deepEqual(res, exp, 'Updated IP params correct' + desc);
-            return cb();
+
+            cb();
         });
-    };
+    }
 
     vasync.forEachParallel({
         func: checkIP,
@@ -1315,34 +1317,37 @@ test('GET /nics (filter: nic_tags_provided)', function (t) {
 test('DELETE /nics/:mac', function (t) {
     var nics = Object.keys(state.nic);
 
-    var delNic = function (nicNum, cb) {
+    function delNic(nicNum, cb) {
         var nic = state.nic[nicNum];
         var desc = state.desc[nicNum] || '';
 
-        return napi.deleteNic(nic.mac, function (err, res) {
+        napi.deleteNic(nic.mac, function (err, res) {
             t.ifError(err, 'delete nic ' + nic.mac + desc);
             if (err) {
-                return cb();
+                cb();
+                return;
             }
 
-            return napi.getNic(nic.mac, function (err2, res2) {
+            napi.getNic(nic.mac, function (err2, res2) {
                 t.ok(err2, 'error getting deleted nic' + desc);
                 if (!err) {
-                    return cb();
+                    cb();
+                    return;
                 }
+
                 t.equal(err2.code, 'ResourceNotFound',
                     '404 on deleted nic' + desc);
 
-                return cb();
+                cb();
             });
         });
-    };
+    }
 
     vasync.forEachParallel({
         func: delNic,
         inputs: nics
     }, function (_err) {
-        return t.end();
+        t.end();
     });
 });
 
@@ -1350,7 +1355,7 @@ test('DELETE /nics/:mac', function (t) {
 test('Check IPs are freed along with nics', function (t) {
     var ips = Object.keys(state.ip);
 
-    var checkIP = function (ipDesc, cb) {
+    function checkIP(ipDesc, cb) {
         var ip = state.ip[ipDesc];
         var net = state.networks[0];
 
@@ -1362,7 +1367,8 @@ test('Check IPs are freed along with nics', function (t) {
 
         if (!ip) {
             t.ok(false, 'IP "' + ipDesc + '" does not exist:' + desc);
-            return cb();
+            cb();
+            return;
         }
 
         napi.getIP(net.uuid, ip, function (err, res) {
@@ -1370,7 +1376,8 @@ test('Check IPs are freed along with nics', function (t) {
             if (err) {
                 t.deepEqual(net, {},
                     util.format('network for Failing IP: %s', desc));
-                return cb();
+                cb();
+                return;
             }
 
             var exp = {
@@ -1380,15 +1387,16 @@ test('Check IPs are freed along with nics', function (t) {
                 reserved: false
             };
             t.deepEqual(res, exp, 'Updated IP params correct' + desc);
-            return cb();
+
+            cb();
         });
-    };
+    }
 
     vasync.forEachParallel({
         func: checkIP,
         inputs: ips
     }, function (_err) {
-        return t.end();
+        t.end();
     });
 });
 
diff --git a/test/lib/common.js b/test/lib/common.js
index eff72a2..2467a7b 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -18,6 +18,7 @@ var assert = require('assert-plus');
 var fmt = require('util').format;
 var clone = require('clone');
 var constants = require('../../lib/util/constants');
+var jsprim = require('jsprim');
 var mod_err = require('../../lib/util/errors');
 var mod_uuid = require('node-uuid');
 var NAPI = require('sdc-clients').NAPI;
@@ -475,8 +476,7 @@ function afterAPIlist(t, opts, callback, err, obj, _, res) {
         var present = clone(ids);
         var notInPresent = [];
 
-        for (var n in obj) {
-            var resObj = obj[n];
+        jsprim.forEachKey(obj, function (_key, resObj) {
             var idx = ids.indexOf(resObj[id]);
             if (idx !== -1) {
                 var expObj = left[idx];
@@ -528,7 +528,7 @@ function afterAPIlist(t, opts, callback, err, obj, _, res) {
             } else {
                 notInPresent.push(resObj);
             }
-        }
+        });
 
         t.deepEqual(ids, [],
             'found ' + type + 's not specified in opts.present ' + desc);
@@ -723,11 +723,11 @@ function missingParamErr(extra) {
 function randomMAC() {
     var data = [(Math.floor(Math.random() * 15) + 1).toString(16) + 2];
     for (var i = 0; i < 5; i++) {
-         var oct = (Math.floor(Math.random() * 255)).toString(16);
-         if (oct.length === 1) {
-                oct = '0' + oct;
-         }
-         data.push(oct);
+        var oct = (Math.floor(Math.random() * 255)).toString(16);
+        if (oct.length === 1) {
+            oct = '0' + oct;
+        }
+        data.push(oct);
     }
 
     return data.join(':');
diff --git a/test/unit/aggregations.test.js b/test/unit/aggregations.test.js
index bf925df..5059bf6 100644
--- a/test/unit/aggregations.test.js
+++ b/test/unit/aggregations.test.js
@@ -561,8 +561,7 @@ test('list', function (t) {
         });
     });
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             mod_aggr.list(t2, {
                 params: blot.bc_params,
@@ -570,7 +569,7 @@ test('list', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
+    });
 
     // XXX: filter by nic_tags_provided
 });
diff --git a/test/unit/ips.test.js b/test/unit/ips.test.js
index aa76bde..5cbd4f2 100644
--- a/test/unit/ips.test.js
+++ b/test/unit/ips.test.js
@@ -818,8 +818,7 @@ function testIPv4List(t, opts, callback) {
 test('Listing IPv4 failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             testIPv4List(t2, {
                 params: blot.bc_params,
@@ -827,8 +826,7 @@ test('Listing IPv4 failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
-
+    });
 });
 
 function testIPv6List(t, opts, callback) {
@@ -842,8 +840,7 @@ function testIPv6List(t, opts, callback) {
 test('Listing IPv6 failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             testIPv6List(t2, {
                 params: blot.bc_params,
@@ -851,8 +848,7 @@ test('Listing IPv6 failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
-
+    });
 });
 
 
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index 9e653f0..822d917 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -990,8 +990,7 @@ test('List pools - filter with three networks', function (t) {
 test('List Network Pool failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-     for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             mod_pool.list(t2, {
                 params: blot.bc_params,
@@ -999,8 +998,7 @@ test('List Network Pool failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
-
+    });
 });
 
 
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index 36cc567..d0850ba 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -543,7 +543,7 @@ test('Create network - provision start IP after end IP', function (t) {
         t.deepEqual(err.body, h.invalidParamErr({
             errors: [
                 mod_err.invalidParam('provision_end_ip',
-                   constants.PROV_RANGE_ORDER_MSG),
+                    constants.PROV_RANGE_ORDER_MSG),
                 mod_err.invalidParam('provision_start_ip',
                     constants.PROV_RANGE_ORDER_MSG)
             ],
@@ -1621,8 +1621,7 @@ test('Update network - unset owner_uuids', function (t) {
 test('Listing Network failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             mod_net.list(t2, {
                 params: blot.bc_params,
@@ -1630,7 +1629,7 @@ test('Listing Network failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
+    });
 });
 
 
diff --git a/test/unit/nic-tags.test.js b/test/unit/nic-tags.test.js
index 8b49620..3e74b9a 100644
--- a/test/unit/nic-tags.test.js
+++ b/test/unit/nic-tags.test.js
@@ -801,8 +801,7 @@ function testTagList(t, opts, callback) {
 test('Listing Nic Tag failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             testTagList(t2, {
                 params: blot.bc_params,
@@ -810,7 +809,7 @@ test('Listing Nic Tag failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
+    });
 });
 
 
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index 3057cd7..2e6bd63 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -105,8 +105,8 @@ test('Initial setup', function (t) {
         num = h.NET_NUM;
         var params = h.validNetworkParams({
             routes: {
-              '10.0.3.4': '10.0.2.2',
-              '10.0.4.0/24': '10.0.2.2'
+                '10.0.3.4': '10.0.2.2',
+                '10.0.4.0/24': '10.0.2.2'
             },
             vlan_id: 46
         });
@@ -2636,76 +2636,80 @@ test('Delete nic - IP ownership changed underneath', function (t) {
     });
 
     t.test('confirm IP ownership', function (t2) {
-       NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
-           if (h.ifErr(t2, err, 'get IP')) {
-               return t2.end();
-           }
-
-           ip = res;
-           t2.equal(res.ip, nic.ip, 'IP');
-           t2.equal(res.belongs_to_uuid, params.belongs_to_uuid, 'IP');
+        NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
+            if (h.ifErr(t2, err, 'get IP')) {
+                t2.end();
+                return;
+            }
 
-           return t2.end();
-       });
+            ip = res;
+            t2.equal(res.ip, nic.ip, 'IP');
+            t2.equal(res.belongs_to_uuid, params.belongs_to_uuid, 'IP');
+            t2.end();
+        });
     });
 
     t.test('update IP', function (t2) {
-       NAPI.updateIP(NET2.uuid, nic.ip, { belongs_to_uuid: other },
-           function (err, res) {
-           if (h.ifErr(t2, err, 'update IP')) {
-               return t2.end();
-           }
-
-           ip.belongs_to_uuid = other;
-           t2.deepEqual(res, ip, 'only belongs_to_uuid updated');
+        NAPI.updateIP(NET2.uuid, nic.ip, { belongs_to_uuid: other },
+            function (err, res) {
+            if (h.ifErr(t2, err, 'update IP')) {
+                t2.end();
+                return;
+            }
 
-           return t2.end();
-       });
+            ip.belongs_to_uuid = other;
+            t2.deepEqual(res, ip, 'only belongs_to_uuid updated');
+            t2.end();
+        });
     });
 
     t.test('confirm IP has new belongs_to_uuid', function (t2) {
-       NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
-           if (h.ifErr(t2, err, 'update IP')) {
-               return t2.end();
-           }
-
-           t2.deepEqual(res, ip, 'IP unchanged');
+        NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
+            if (h.ifErr(t2, err, 'update IP')) {
+                t2.end();
+                return;
+            }
 
-           return t2.end();
-       });
+            t2.deepEqual(res, ip, 'IP unchanged');
+            t2.end();
+        });
     });
 
     t.test('delete nic', function (t2) {
-       NAPI.deleteNic(nic.mac, function (err, res) {
-           if (h.ifErr(t2, err, 'delete nic')) {
-               return t2.end();
-           }
+        NAPI.deleteNic(nic.mac, function (err, _, req, res) {
+            if (h.ifErr(t2, err, 'delete nic')) {
+                t2.end();
+                return;
+            }
 
-           return t2.end();
-       });
+            t2.equal(res.statusCode, 204, '204 returned');
+            t2.end();
+        });
     });
 
     t.test('confirm nic deleted', function (t2) {
-       NAPI.getNic(nic.mac, function (err, res) {
-           t2.ok(err, 'error expected');
-           if (!err) {
-               return t2.end();
-           }
-           t2.equal(err.statusCode, 404, '404 returned');
+        NAPI.getNic(nic.mac, function (err, res) {
+            t2.ok(err, 'error expected');
+            if (!err) {
+                t2.end();
+                return;
+            }
 
-           return t2.end();
-       });
+            t2.equal(err.statusCode, 404, '404 returned');
+            t2.end();
+        });
     });
 
     t.test('confirm IP has new owner', function (t2) {
-       NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
-           if (h.ifErr(t2, err, 'get IP')) {
-               return t2.end();
-           }
+        NAPI.getIP(NET2.uuid, nic.ip, function (err, res) {
+            if (h.ifErr(t2, err, 'get IP')) {
+                t2.end();
+                return;
+            }
 
-           t2.deepEqual(res, ip, 'IP unchanged');
-           return t2.end();
-       });
+            t2.deepEqual(res, ip, 'IP unchanged');
+            t2.end();
+        });
     });
 });
 
@@ -3028,8 +3032,7 @@ test('primary uniqueness', function (t) {
 test('Listing Nics failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-     for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             mod_nic.list(t2, {
                 params: blot.bc_params,
@@ -3037,7 +3040,7 @@ test('Listing Nics failures', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
+    });
 });
 
 test('List all NICs', function (t) {
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
index 7996475..8095c7f 100644
--- a/tools/eslint.node.conf
+++ b/tools/eslint.node.conf
@@ -15,8 +15,13 @@
         "node": true
     },
     "rules": {
+        // Lint:
         "strict": [ "error", "global" ],
-        "consistent-return": "off",
-        "no-loop-func": "off"
+
+        // Style:
+        "func-style": [ "error", "declaration" ],
+
+        // Checks disabled as things get slowly cleaned up:
+        "consistent-return": "off"
     }
 }
