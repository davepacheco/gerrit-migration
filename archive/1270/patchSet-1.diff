commit a60e59f7055c69465bf937996243ffedb20f2c3b (refs/changes/70/1270/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-01-17T16:59:33-08:00 (2 years, 9 months ago)
    
    HEAD-2343 allow headnode setup to work on a CN being converted to a headnode

diff --git a/scripts/headnode.sh b/scripts/headnode.sh
index d5fa6345..916a9732 100755
--- a/scripts/headnode.sh
+++ b/scripts/headnode.sh
@@ -159,6 +159,26 @@ function printf_log
     printf "$@" >&${CONSOLE_FD}
 }
 
+
+function usbkey_dataset_exists
+{
+    if zfs list -H -o name | grep '^zones/usbkey$' > /dev/null; then
+        return 0
+    else
+        return 1
+    fi
+}
+
+function usbkey_dataset_create
+{
+
+    printf_log "%-56s" "adding volume: usbkey"
+    zfs create -o mountpoint=legacy zones/usbkey || \
+        fatal "failed to create the usbkey dataset"
+    printf_log "%4s\n" "done"
+}
+
+
 set_default_fw_rules() {
     local fw_default_v
     if [[ -f /var/fw/.default_rules_setup ]]; then
@@ -276,8 +296,22 @@ if [[ ${POOLS} == "no pools available" ]]; then
     # copy the log out to /var so we don't lose on reboot
     cp /tmp/joysetup.* /zones/
 
+    usbkey_dataset_create
+
     printf "%4s\n" "done" >&${CONSOLE_FD}
 
+    reboot
+    exit 2
+
+elif ! usbkey_dataset_exists; then
+    # If we are converting from a CN to an HN, the zones/usbkey dataset
+    # will not have been created when the zpool was created. We'll have needed
+    # it earlier (e.g. for the filesystem/smartdc and identity:node svcs):
+    # so create it, then reboot.
+    usbkey_dataset_create
+
+    printf_log "%4s\n" "done"
+
     reboot
     exit 2
 fi
@@ -354,10 +388,12 @@ if setup_state_not_seen "setup_complete"; then
     printf_timer "%-58sdone (%ss)\n" "preparing for setup..."
 fi
 
-# Install GZ tools from tarball
-if [[ ! -d /opt/smartdc/bin ]]; then
+# Install GZ tools from tarball.
+# We use "/opt/smartdc/bin/sdc" to catch the case of a CN being converted to
+# an HN: it will have a /opt/smartdc/bin subset already from "cn_tools".
+if [[ ! -f /opt/smartdc/bin/sdc ]]; then
     mkdir -p /opt/smartdc &&
-    /usr/bin/tar xzof /usbkey/tools.tar.gz -C /opt/smartdc
+        /usr/bin/tar xzof /usbkey/tools.tar.gz -C /opt/smartdc
     printf_timer "%-58sdone (%ss)\n" "installing tools to /opt/smartdc/bin..."
 fi
 
@@ -725,6 +761,10 @@ function adopt_agents()
     fi
 }
 
+# We guard on 'sdczones_created' to allow restarting a partially complete
+# headnode setup. We also guard on 'setup_complete' to allow conversion of CNs
+# to secondary headnodes without re-bootstrapping core services.
+if setup_state_not_seen "setup_complete"; then
 if setup_state_not_seen "sdczones_created"; then
     # If the zone image is incremental, you'll need to manually setup the import
     # here for the origin dataset for now. The way to do this is add the name
@@ -805,6 +845,7 @@ EOF
 
     setup_state_add "sdczones_created"
 fi
+fi
 
 
 # Import the images used for SDC services into IMGAPI.
@@ -943,9 +984,6 @@ fi
 # informs SAPI that its dependent SDC services are ready and that it should
 # store the SDC deployment configuration persistently.
 #
-# Note: 'sapi_full_mode' setup state was added after some still-supported
-# headnodes were setup, therefore guard on 'setup_complete' as well.
-#
 if setup_state_not_seen "sapi_full_mode"; then
 if setup_state_not_seen "setup_complete"; then
     (( i = 0 )) || true
diff --git a/scripts/joysetup.sh b/scripts/joysetup.sh
index e8dc8eda..ef3d282f 100755
--- a/scripts/joysetup.sh
+++ b/scripts/joysetup.sh
@@ -349,7 +349,6 @@ function create_zpool
     export COREDS=${SYS_ZPOOL}/cores
     export OPTDS=${SYS_ZPOOL}/opt
     export VARDS=${SYS_ZPOOL}/var
-    export USBKEYDS=${SYS_ZPOOL}/usbkey
     export SWAPVOL=${SYS_ZPOOL}/swap
 
     #
@@ -402,15 +401,6 @@ setup_datasets()
         printf "%4s\n" "done" >&4
     fi
 
-    if ! echo $datasets | grep ${USBKEYDS} > /dev/null; then
-        if is_headnode; then
-            printf "%-56s" "adding volume: usbkey" >&4
-            zfs create -o mountpoint=legacy ${USBKEYDS} || \
-                fatal "failed to create the usbkey dataset"
-            printf "%4s\n" "done" >&4
-        fi
-    fi
-
     if ! echo $datasets | grep ${COREDS} > /dev/null; then
         printf "%-56s" "adding volume: cores" >&4
         if [[ -z ${ENABLE_6x_WORKAROUNDS} ]]; then
