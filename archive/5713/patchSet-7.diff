commit a9328f8770f655a7a4228b02e5f0480b0f19bcd9
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-04-09T18:36:02+02:00 (6 months ago)
    
    TRITON-898 Add CloudAPI endpoints for triton instance migration

diff --git a/docs/index.md b/docs/index.md
index 1bb3bdfbbf..46ebff4c84 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1,7 +1,7 @@
 ---
 title: Joyent CloudAPI
 mediaroot: ./media
-apisections: Account, Keys, Config, Datacenters, Images, Packages, Instances, FirewallRules, Networks, Nics, Users, Roles, Policies, Services, User SSH Keys, Role Tags, Fabrics
+apisections: Account, Keys, Config, Datacenters, Images, Packages, Instances, FirewallRules, Networks, Nics, Users, Roles, Policies, Services, User SSH Keys, Role Tags, Fabrics, Migrations
 markdown2extras: tables, code-friendly
 ---
 
@@ -841,6 +841,10 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.6.0
+- Added support for user-driven machine [Migrations](#migrations),
+  allowing the movement of machines between servers.
+
 ## 9.5.0
 - Remove Cloud Analytics endpoints. Cloud Analytics has been removed from
   Triton. See [TRITON-884](https://smartos.org/bugview/TRITON-884) for details.
@@ -7035,6 +7039,428 @@ instance.
     $ triton instance enable-deletion-protection 9985bc81
 
 
+# Migrations
+
+At times it is necessary to migrate instances between different compute nodes within the Triton Cloud.
+
+Triton supports *incremental offline migrations* starting with CloudAPI version 9.6.0.
+
+## Migrate  (POST /:login/machines/:id/migrate)
+
+### Inputs
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+action    | String   | One of "begin", "sync", "switch", "automatic", "pause", "abort" or "watch".
+affinity  | Array    | Optional array of [affinity rules](#affinity-rules). Only apply when actions are "begin" or "automatic".
+
+### Returns
+
+**Field**            | **Type** | **Description**
+-------------------- | -------- | ---------------
+machine              | UUID     | UUID of the instance being migrated.
+automatic            | Boolean  | All the migration phases will run consecutively without user intervention.
+created\_timestamp   | String   | ISO timestamp for the creation of the migration request.
+scheduled\_timestamp | String   | ISO timestamp for when the migration should commence.
+phase                | String   | Current migration phase. One of "begin", "sync", "switch" or "finished". See [Migration phases](#migration-phases) below.
+state                | String   | Current migration state. See migration state below.
+progress\_history    | Array    | array of completed JSON progress events. See [Progress Events](#progress-Events) section for details.
+error                | String   | If a migration fails - this is the error message of why it failed.
+
+If the action is `watch` the response will return instead a collection of [Progress Events](#progress-Events).
+
+### Progress Events
+
+Progress events are sent when something important occurs during the migration. There are actually two styles of progress events - one for major events (and/or warnings) and one to show the sync progress (`bandwidth` and `eta`).
+
+**Field**                | **Type**           | **Description**
+------------------------ | ------------------ | -----------------
+type                     | String             | Type is "progress".
+phase                    | String             | Current phase. See [Migration phases](#migration-phases).
+state                    | String             | State is "running".
+current\_progress        | Number             | This is how much progress has been made. For the sync phase, this is the number of bytes that have been sent to the target.
+total\_progress          | Number             | This is total possible progress. For the sync phase, this is the number of bytes that will need to be sent to the target.
+message                  | String (optional)  | Additional description message for this task.
+error                    | String (optional)  | Error occurred in this task - this is the description for that error.
+started\_timestamp       | String (optional)  | The ISO timestamp when the phase was started.
+duration\_ms             | Number (optional)  | The number of milliseconds the phase has taken.
+eta\_ms                  | Number (optional)  | Estimate of the number of milliseconds until the task is completed.
+transfer\_bytes\_second  | Number (optional)  | The number of bytes being sent per second between the source and target instances during the "sync" phase.
+
+### Migration state
+
+The state the migration operation is currently in. It can be one of
+the following states:
+
+ **State**    | **Description**
+------------- | ----------------
+scheduled     | The migration is scheduled, see `scheduled_timestamp`.
+running       | Migration running, see also `progress_history`.
+paused        | The "begin" phase (and possibly "sync" phase) has been run - now waiting for a call to "sync" or the final call to "switch".
+aborted       | User or operator aborted the migration attempt.
+failed        | Migration operation could not complete, see "error".
+successful    | Migration was successfully completed.
+
+### Migration phases
+
+The workflow stage that the migration is currently running, one of:
+
+**Phase**  | **Description**
+---------- | ------------
+begin      | This phase starts the migration process, creates a new migration database entry and provisions the target instance.
+sync       | This phase synchronizes the zfs datasets of the source instance with the zfs datasets in the target instance (without stopping the instance).
+switch     | This phase stops the instance from running, synchronizes the zfs datasets of the source instance with the zfs datasets in the target instance, moves the NICs from the source to the target instance, moves control to the target instance and then restarts the target instance.
+abort      | This phase is used when aborting a migration.
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id` does not exist
+InvalidState     | The migration is in the wrong `state` to perform the requested `action`
+InvalidArgument  | If `action` was invalid, or `affinity` wasn't valid
+MissingParameter | If `action` wasn't provided
+
+### CLI Commands
+
+    $ triton instance migration begin eaabc951 -w
+    running: 1% reserving instance
+    Done - begin finished in 28.35352 seconds
+
+    $ triton instance migration list
+    SHORTID   PHASE   STATE       AGE
+    eaabc951  begin   paused      48s
+
+    $ triton instance migration sync eaabc951 -w
+    running: 1% syncing data
+    running: 100% 10.5MB/s
+    Done - sync finished in 12.25971 seconds
+
+    $ triton instance migration switch eaabc951 -w
+    running: 3% stopping the instance
+    running: 1% syncing data
+    running: 1% switching instances
+    running: 65% setting up the target filesystem
+    running: 75% hiding the original instance
+    running: 85% promoting the migrated instance
+    running: 90% removing sync snapshots
+    running: 95% starting the migrated instance
+    Done - switch finished in 40.28621 seconds
+
+    $ triton instance migration list
+    SHORTID   PHASE   STATE       AGE
+    eaabc951  switch  successful  26m
+
+### Example Request
+
+    POST /my/machines/eaabc951-7b16-421f-ff2b-ba67b12bb4bd/migrate HTTP/1.1
+    Host: api.example.com
+    date: Wed, 27 Mar 2019 20:10:25 GMT
+    authorization: ...
+    accept: application/json
+    content-type: application/json
+    user-agent: triton/7.0.1 (x64-darwin; node/6.10.3)
+    accept-version: ~9||~8
+    content-length: 18
+
+    {"action": "begin"}
+
+### Example Response
+
+    HTTP/1.1 201 Created
+    content-type: application/json
+    content-length: 171
+    access-control-allow-origin: *
+    access-control-allow-headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    access-control-allow-methods: GET, POST
+    access-control-expose-headers: Api-Version, Request-Id, Response-Time
+    connection: Keep-Alive
+    date: Wed, 27 Mar 2019 20:10:26 GMT
+    server: cloudapi/9.6.0
+    api-version: 9.0.0
+    request-id: e5fd786d-094a-4e99-a3bb-3b09f7193232
+    response-time: 440
+    x-request-processing-time: 443
+
+    {
+      "automatic":false,
+      "created_timestamp":"2019-03-27T20:10:26.101Z",
+      "phase":"begin",
+      "state":"running",
+      "vm_uuid":"eaabc951-7b16-421f-ff2b-ba67b12bb4bd",
+      "progress_history":[]
+    }
+
+### Example watch Request
+
+    POST /my/machines/eaabc951-7b16-421f-ff2b-ba67b12bb4bd/migrate?action=watch HTTP/1.1
+    Host: api.example.com
+    date: Wed, 27 Mar 2019 20:10:26 GMT
+    authorization: ...
+    accept: application/json
+    content-type: application/json
+    user-agent: triton/7.0.1 (x64-darwin; node/6.10.3)
+    accept-version: ~9||~8
+
+### Example watch Response
+
+    HTTP/1.1 200 OK
+    access-control-allow-origin: *
+    access-control-allow-headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    access-control-allow-methods: GET, POST
+    access-control-expose-headers: Api-Version, Request-Id, Response-Time
+    connection: Keep-Alive
+    date: Wed, 27 Mar 2019 20:10:26 GMT
+    server: cloudapi/9.6.0
+    api-version: 9.0.0
+    request-id: 2deba1bf-df9b-4a70-9bd9-d5d93cf8b4dc
+    response-time: 249
+    content-type: application/x-json-stream
+    transfer-encoding: chunked
+    x-request-received: 1553717426381
+    x-request-processing-time: 4330
+
+    {"type":"progress","current_progress":1,"message":"reserving instance","phase":"begin","state":"running","started_timestamp":"2019-03-27T20:10:30.265Z","total_progress":100,"duration_ms":441}
+
+    {"type":"end","phase":"begin","state":"paused"}
+
+## ListMigrations  (GET /:login/migrations)
+
+Retrieve a list of migrations
+
+### Inputs
+
+* None
+
+### Returns
+
+A list of migration objects. See [Migrate](#Migrate).
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+### CLI example
+
+    $ triton inst migration list
+
+### Example Request
+
+    GET /my/migrations HTTP/1.1
+    Host: api.example.com
+    date: Thu, 28 Mar 2019 11:18:44 GMT
+    authorization: ...
+    accept: application/json
+    user-agent: triton/7.0.1 (x64-darwin; node/6.10.3)
+    accept-version: ~9||~8
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    content-type: application/json
+    content-length: 5315
+    access-control-allow-origin: *
+    access-control-allow-headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    access-control-allow-methods: GET
+    access-control-expose-headers: Api-Version, Request-Id, Response-Time
+    connection: Keep-Alive
+    content-md5: e9l3E/czYSTWo7RkCU47yw==
+    date: Thu, 28 Mar 2019 11:18:44 GMT
+    server: cloudapi/9.6.0
+    api-version: 9.0.0
+    request-id: 6154097a-3155-4de4-8dfc-63dfefaaa6ff
+    response-time: 207
+    x-request-received: 1553771924532
+    x-request-processing-time: 230
+
+    [
+      {
+        "automatic": true,
+        "created_timestamp": "2019-03-25T19:21:29.336Z",
+        "duration_ms": 25134,
+        "finished_timestamp": "2019-03-25T19:22:40.948Z",
+        "phase": "switch",
+        "state": "successful",
+        "progress_history": [
+          {
+            "type": "progress",
+            "current_progress": 100,
+            "duration_ms": 16077,
+            "finished_timestamp": "2019-03-25T19:21:51.959Z",
+            "message": "reserving instance",
+            "phase": "begin",
+            "state": "successful",
+            "started_timestamp": "2019-03-25T19:21:35.882Z",
+            "total_progress": 100
+          },
+          {
+            "type": "progress",
+            "current_progress": 100,
+            "duration_ms": 3676,
+            "finished_timestamp": "2019-03-25T19:21:58.485Z",
+            "message": "syncing data",
+            "phase": "sync",
+            "state": "successful",
+            "started_timestamp": "2019-03-25T19:21:54.809Z",
+            "total_progress": 100
+          },
+          {
+            "type": "progress",
+            "current_progress": 100,
+            "duration_ms": 2694,
+            "finished_timestamp": "2019-03-25T19:22:02.722Z",
+            "message": "syncing data",
+            "phase": "sync",
+            "state": "successful",
+            "started_timestamp": "2019-03-25T19:22:00.028Z",
+            "total_progress": 100
+          },
+          {
+            "type": "progress",
+            "current_progress": 100,
+            "duration_ms": 2687,
+            "finished_timestamp": "2019-03-25T19:22:33.427Z",
+            "message": "syncing data",
+            "phase": "sync",
+            "state": "successful",
+            "started_timestamp": "2019-03-25T19:22:30.740Z",
+            "total_progress": 100
+          },
+          {
+            "type": "progress",
+            "current_progress": 100,
+            "duration_ms": 5571,
+            "finished_timestamp": "2019-03-25T19:22:40.948Z",
+            "message": "switching instances",
+            "phase": "switch",
+            "state": "successful",
+            "started_timestamp": "2019-03-25T19:22:35.377Z",
+            "total_progress": 100
+          }
+        ],
+        "machine": "40c3c6ec-8be5-476a-ca35-c0ea2b0858e3"
+      },
+      ... more migration objects ...
+    ]
+
+## GetMigration  (GET /:login/migrations/:id)
+
+### Inputs
+
+None
+
+### Returns
+
+Migration object with the following fields:
+
+**Field**            | **Type** | **Description**
+-------------------- | -------- | ---------------
+machine              | UUID     | UUID of the instance being migrated.
+automatic            | Boolean  | All the migration phases will run consecutively without user intervention.
+created\_timestamp   | String   | ISO timestamp for the creation of the migration request.
+scheduled\_timestamp | String   | ISO timestamp for when the migration should commence.
+phase                | String   | Current migration phase. One of "begin", "sync", "switch" or "finished". See [Migration phases](#migration-phases) below.
+state                | String   | Current migration state. See migration state below.
+progress\_history    | Array    | array of completed JSON progress events. See [Progress Events](#progress-Events) section for details.
+error                | String   | If a migration fails - this is the error message of why it failed.
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+### CLI example
+
+    $ triton inst migration get
+
+### Example Request
+
+    GET /my/migrations/40c3c6ec-8be5-476a-ca35-c0ea2b0858e3 HTTP/1.1
+    Host: api.example.com
+    date: Thu, 28 Mar 2019 11:18:44 GMT
+    authorization: ...
+    accept: application/json
+    user-agent: triton/7.0.1 (x64-darwin; node/6.10.3)
+    accept-version: ~9||~8
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    content-type: application/json
+    date: Thu, 28 Mar 2019 11:18:44 GMT
+    server: cloudapi/9.6.0
+    api-version: 9.0.0
+    request-id: 6154097a-3155-4de4-8dfc-63dfefaaa6ff
+    ...
+
+    {
+      "automatic": true,
+      "created_timestamp": "2019-03-25T19:21:29.336Z",
+      "duration_ms": 25134,
+      "finished_timestamp": "2019-03-25T19:22:40.948Z",
+      "phase": "switch",
+      "state": "successful",
+      "progress_history": [
+        {
+          "type": "progress",
+          "current_progress": 100,
+          "duration_ms": 16077,
+          "finished_timestamp": "2019-03-25T19:21:51.959Z",
+          "message": "reserving instance",
+          "phase": "begin",
+          "state": "successful",
+          "started_timestamp": "2019-03-25T19:21:35.882Z",
+          "total_progress": 100
+        },
+        {
+          "type": "progress",
+          "current_progress": 100,
+          "duration_ms": 3676,
+          "finished_timestamp": "2019-03-25T19:21:58.485Z",
+          "message": "syncing data",
+          "phase": "sync",
+          "state": "successful",
+          "started_timestamp": "2019-03-25T19:21:54.809Z",
+          "total_progress": 100
+        },
+        {
+          "type": "progress",
+          "current_progress": 100,
+          "duration_ms": 2694,
+          "finished_timestamp": "2019-03-25T19:22:02.722Z",
+          "message": "syncing data",
+          "phase": "sync",
+          "state": "successful",
+          "started_timestamp": "2019-03-25T19:22:00.028Z",
+          "total_progress": 100
+        },
+        {
+          "type": "progress",
+          "current_progress": 100,
+          "duration_ms": 2687,
+          "finished_timestamp": "2019-03-25T19:22:33.427Z",
+          "message": "syncing data",
+          "phase": "sync",
+          "state": "successful",
+          "started_timestamp": "2019-03-25T19:22:30.740Z",
+          "total_progress": 100
+        },
+        {
+          "type": "progress",
+          "current_progress": 100,
+          "duration_ms": 5571,
+          "finished_timestamp": "2019-03-25T19:22:40.948Z",
+          "message": "switching instances",
+          "phase": "switch",
+          "state": "successful",
+          "started_timestamp": "2019-03-25T19:22:35.377Z",
+          "total_progress": 100
+        }
+      ],
+      "machine": "40c3c6ec-8be5-476a-ca35-c0ea2b0858e3"
+    }
+
 
 # FirewallRules
 
diff --git a/lib/app.js b/lib/app.js
index 5072b1be91..cafa6e0399 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -43,6 +43,7 @@ var docs = require('./docs');
 var disks = require('./endpoints/disks');
 var keys = require('./keys');
 var machines = require('./machines');
+var migrations = require('./migrations');
 var metadata = require('./metadata');
 var nics = require('./nics');
 var packages = require('./packages');
@@ -542,6 +543,7 @@ module.exports = {
             machineThrottle = userThrottle(config, 'machines');
             machines.mount(server, machineThrottle);
             metadata.mount(server, machineThrottle);
+            migrations.mount(server, machineThrottle);
             snapshots.mount(server, machineThrottle);
             disks.mount(server, machineThrottle);
             tags.mount(server, machineThrottle);
diff --git a/lib/migrations.js b/lib/migrations.js
new file mode 100644
index 0000000000..84215a5404
--- /dev/null
+++ b/lib/migrations.js
@@ -0,0 +1,309 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+var util = require('util');
+
+var assert = require('assert-plus');
+var restify = require('restify');
+
+var MIGRATION_ACTIONS = [
+    'begin',
+    'sync',
+    'switch',
+    'automatic',
+    'abort',
+    'pause'
+];
+
+/*
+ * This is a sample migration object from VMAPI:
+ * {
+ *      automatic: false,
+ *      created_timestamp: '2018-12-03T17:48:28.078Z',
+ *      finished_timestamp: '2018-12-03T17:48:57.837Z',
+ *      phase: 'start',
+ *      state: 'paused',
+ *      vm_uuid: '73f3db90-3fc3-46c7-92e9-b0cd337b9f7a',
+ *      progress_history:
+ *      [ {
+ *          current_progress: 100,
+ *          finished_timestamp: '2018-12-03T17:48:57.837Z',
+ *          message: 'reserving instance',
+ *          phase: 'start',
+ *          state: 'success',
+ *          started_timestamp: '2018-12-03T17:48:35.612Z',
+ *          total_progress: 100
+ *      } ]
+ * }
+ *
+ * The only thing we are 'translating' so far is 'vm_uuid' with
+ * 'machine'. We're not doing the mapping of "*whatever*_timestamp"
+ * to just "*whatever*" in the traditional CloudAPI style, but keeping
+ * the "_timestamp" string, since seems to be more clear.
+ */
+
+function translate(vmapiMigration) {
+    assert.ok(vmapiMigration);
+    assert.ok(vmapiMigration.vm_uuid);
+
+    vmapiMigration.machine = vmapiMigration.vm_uuid;
+    delete vmapiMigration.vm_uuid;
+
+    return vmapiMigration;
+}
+
+
+function get(req, res, next) {
+    assert.ok(req.sdc);
+
+    req.sdc.vmapi.get({
+        path: '/migrations/' + req.params.machine,
+        query: {
+            owner_uuid: req.account.uuid
+        },
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, function loadVmMigrationCb(err, migration) {
+        if (err) {
+            // This is an attempt to load a migration for a different owner VM,
+            // let's just 404 this:
+            if (err.restCode === 'PreconditionFailed') {
+                err = new restify.ResourceNotFoundError('VM not found');
+            }
+            next(err);
+            return;
+        }
+
+        req.log.debug('GET /%s/migrations/%s -> %j',
+            req.account.login, req.params.machine, migration);
+
+        res.send(translate(migration));
+
+        next();
+    });
+}
+
+function list(req, res, next) {
+    assert.ok(req.sdc);
+
+    req.sdc.vmapi.get({
+        path: '/migrations',
+        query: {
+            owner_uuid: req.account.uuid
+        },
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, function loadMigrationsCb(err, vmapiMigrations) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        var migrations = (vmapiMigrations || []).map(translate);
+
+        req.log.debug('GET /%s/migrations -> %j',
+                    req.account.login, migrations);
+
+        res.send(migrations);
+        next();
+    });
+}
+
+function estimate(req, res, next) {
+    assert.ok(req.sdc);
+
+    var ownerUuid = req.account.uuid;
+    var vmapi = req.sdc.vmapi;
+    var vmUuid = req.params.machine;
+
+    var opts = {
+        action: 'migrate',
+        migration_action: 'estimate',
+        owner_uuid: ownerUuid,
+        headers: {
+            'x-request-id': req.getId()
+        }
+    };
+
+    var vmapiPath = '/vms/' + vmUuid;
+
+    vmapi.post(vmapiPath, opts, function estCb(err, estimation) {
+        if (err) {
+            next(err);
+            return;
+        }
+        res.send(200, estimation);
+        next();
+    });
+}
+
+function watch(req, res, next) {
+    assert.ok(req.sdc);
+
+    var vmapi = req.sdc.vmapi;
+    var params = req.params;
+    var vmUuid = params.machine;
+
+    if (params.action !== 'watch') {
+        next();
+        return;
+    }
+
+    var httpVmapi = restify.createHttpClient({url: vmapi.url});
+    var requestPath = util.format('/migrations/%s/watch', vmUuid);
+
+    httpVmapi.get(requestPath, function onMigrateWatchGet(getErr, vmapiReq) {
+        if (getErr) {
+            next(getErr);
+            return;
+        }
+
+        res.writeHead(200, { 'Content-Type': 'application/x-json-stream' });
+        vmapiReq.on('result', function onMigrateWatchResult(err, aRes) {
+            if (err) {
+                next(err);
+                return;
+            }
+            aRes.on('data', function onDataCb(chunk) {
+                res.write(chunk);
+            });
+            aRes.on('end', function resEndCb() {
+                res.end();
+                next();
+            });
+
+            res.pipe(aRes);
+
+        });
+
+        vmapiReq.end();
+    });
+}
+
+function doAction(req, res, next) {
+    assert.ok(req.sdc);
+
+    var ownerUuid = req.account.uuid;
+    var vmapi = req.sdc.vmapi;
+    var params = req.params;
+    var vmUuid = params.machine;
+
+    if (!params.action) {
+        next(new restify.MissingParameterError(
+            '"action" must be specified'));
+        return;
+    }
+
+    assert.string(params.action, 'params.action');
+
+    if (params.action === 'watch') {
+        next();
+        return;
+    }
+
+    if (MIGRATION_ACTIONS.indexOf(params.action) === -1) {
+        next(new restify.InvalidArgumentError(
+            '%s is not a valid migration action',
+            params.action));
+        return;
+    }
+
+    var opts = {
+        action: 'migrate',
+        owner_uuid: ownerUuid,
+        headers: {
+            'x-request-id': req.getId()
+        }
+    };
+
+    if (params.action === 'automatic') {
+        opts.migration_automatic = 'true';
+        opts.migration_action = 'begin';
+    } else {
+        opts.migration_action = params.action;
+    }
+
+    if (opts.action === 'begin' && params.affinity) {
+        if (Array.isArray(params.affinity)) {
+            opts.affinity = params.affinity;
+        } else {
+            opts.affinity = [params.affinity];
+        }
+    }
+
+    var vmapiPath = util.format('/vms/%s', vmUuid);
+
+    vmapi.post(vmapiPath, opts, function doActionCb(err, out) {
+        if (err) {
+            next(err);
+            return;
+        }
+        if (!out.job_uuid) {
+            next(new restify.InternalError(
+                'Unable to execute "%s" migration action ' +
+                '(req_id: %s)', params.action, req.getId()));
+            return;
+        }
+
+        if (!out.migration) {
+            next(new restify.InternalError(
+                'Unexpected response trying to execute "%s" migration ' +
+                'action (req_id: %s)', params.action, req.getId()));
+            return;
+        }
+
+        req.log.debug({
+            job_uuid: out.job_uuid,
+            migration: out.migration,
+            opts: opts
+        }, 'VMAPI Migration job_uuid');
+
+        res.send(201, translate(out.migration));
+        next();
+    });
+
+}
+
+function mount(server, before) {
+    assert.object(server);
+    assert.ok(before);
+
+    server.get({
+        path: '/:account/migrations',
+        name: 'ListMigrations'
+    }, before, list);
+
+    server.get({
+        path: '/:account/migrations/:machine',
+        name: 'GetMigration'
+    }, before, get);
+
+    server.get({
+        path: '/:account/machines/:machine/migrate',
+        name: 'MigrateMachineEstimate'
+    }, before, estimate);
+
+    server.post({
+        path: '/:account/machines/:machine/migrate',
+        name: 'Migrate'
+    }, before, watch, doAction);
+
+    return server;
+}
+
+
+
+// --- Exports
+
+module.exports = {
+    mount: mount
+};
diff --git a/package.json b/package.json
index 411d7fc1a7..f1ffdc5508 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "Triton CloudAPI",
-    "version": "9.5.0",
+    "version": "9.6.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/test/machines.80.test.js b/test/machines.80.test.js
index ad8f3bdeb1..f626de2fea 100644
--- a/test/machines.80.test.js
+++ b/test/machines.80.test.js
@@ -5,10 +5,9 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
-var util = require('util');
 var test = require('@smaller/tap').test;
 var common = require('./common');
 var uuid = common.uuid;
@@ -23,7 +22,6 @@ var SDC_128 = common.sdc_128_package;
 
 var IMAGE_UUID;
 var SERVER_UUID;
-var PROVISIONABLE_NET_UUID;
 var MACHINE_UUID;
 
 var CLIENTS;
@@ -142,6 +140,14 @@ test('Deletion Protection tests', function (t) {
 });
 
 
+test('Migrations tests', function (t) {
+    var testMigrations = require('./machines/migrations');
+    testMigrations(t, CLIENT, OTHER, MACHINE_UUID, function () {
+        t.end();
+    });
+});
+
+
 test('Delete tests', function (t) {
     var deleteTest = require('./machines/delete');
     deleteTest(t, CLIENT, OTHER, MACHINE_UUID, function () {
diff --git a/test/machines/migrations.js b/test/machines/migrations.js
new file mode 100644
index 0000000000..84fb0004cf
--- /dev/null
+++ b/test/machines/migrations.js
@@ -0,0 +1,256 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+var restify = require('restify');
+
+var common = require('../common');
+var checkHeaders = common.checkHeaders;
+var checkNotFound = common.checkNotFound;
+
+var waitForJob = require('./common').waitForJob;
+
+// --- Helpers
+
+
+function checkMigration(t, migration) {
+    t.ok(migration, 'migration ok');
+    t.ok(migration.machine, 'migration machine ok');
+    t.ok(migration.state, 'migration state ok');
+    t.ok(migration.phase, 'migration phase ok');
+    t.ok(migration.created_timestamp, 'migration created_timestamp ok');
+}
+
+
+// --- Tests
+
+
+module.exports = function migrate(suite, client, other, machine, callback) {
+    if (!machine) {
+        callback();
+        return;
+    }
+
+    var migrationFailed = false;
+
+    var httpClient = restify.createHttpClient({
+        url: client.url.href,
+        version: client.headers['accept-version'],
+        retryOptions: {
+            retry: 0
+        },
+        log: client.log,
+        rejectUnauthorized: false,
+        signRequest: client.signRequest
+    });
+    httpClient.keyId = client.keyId;
+    httpClient.privateKey = client.privateKey;
+    httpClient.publicKey = client.publicKey;
+
+    var watcher = {
+        done: false,
+        started: false,
+        error: null,
+        events: []
+    };
+
+
+    function watch() {
+        watcher.done = false;
+
+        var p = '/my/machines/' + machine + '/migrate?action=watch';
+
+        httpClient.post(p, function reqCb(reqErr, req) {
+            if (reqErr) {
+                watcher.error = reqErr;
+                watcher.done = true;
+                return;
+            }
+
+            req.on('result', function resultCb(resErr, res) {
+                if (resErr) {
+                    watcher.error = resErr;
+                    watcher.done = true;
+                    return;
+                }
+
+                res.body = '';
+                res.setEncoding('utf8');
+                res.on('data', function onDataCb(chunk) {
+                    res.body += chunk;
+                });
+
+                res.on('end', function onEndCb() {
+                    res.body = res.body.trim().split('\n')
+                        .map(function toJson(chunk) {
+                            return JSON.parse(chunk);
+                        });
+
+                    watcher.events.push(res.body);
+                    watcher.done = true;
+                });
+            });
+
+            req.end();
+        });
+    }
+
+    suite.test('estimate migration', function (t) {
+        var url = '/my/machines/' + machine + '/migrate';
+        client.get(url, function getEstimateCb(err, req, res, body) {
+            t.ifError(err, 'migration estimate error');
+            t.ok(body, 'migration estimate');
+            t.ok(body.size, 'migration size');
+            // TODO: Add other estimation fields when added
+            t.end();
+        });
+    });
+
+
+    var actions = ['begin', 'abort', 'begin', 'sync', 'sync', 'switch'];
+
+    actions.forEach(function testMigrationAction(action) {
+        suite.test(action + ' migration', function actionMigrCb(t) {
+            if (migrationFailed) {
+                t.end();
+                return;
+            }
+            var url = '/my/machines/' + machine + '/migrate';
+            client.post(url, {
+                action: action
+            }, function doPostCb(err, req, res, body) {
+                t.ifError(err);
+                if (err) {
+                    migrationFailed = true;
+                    t.end();
+                    return;
+                }
+                t.equal(res.statusCode, 201);
+                checkHeaders(t, res.headers);
+                t.ok(body);
+                checkMigration(t, body);
+                if (!watcher.started) {
+                    watcher.started = true;
+                }
+                watch();
+                t.end();
+            });
+        });
+
+        suite.test('Wait for migrate ' + action, function waitTest(t) {
+            if (migrationFailed) {
+                t.end();
+                return;
+            }
+            client.vmapi.listJobs({
+                vm_uuid: machine,
+                task: 'migrate-' + action
+            }, function listJobsCb(err, jobs) {
+                t.ifError(err, 'list jobs error');
+                t.ok(jobs, 'list jobs OK');
+                t.ok(jobs.length, 'migrate jobs is array');
+                var migrate_job = jobs[0];
+                waitForJob(client, migrate_job.uuid, function waitCb(err2) {
+                    if (err2) {
+                        migrationFailed = true;
+                    }
+                    t.ifError(err2, 'Check state error');
+                    t.end();
+                });
+            });
+        });
+
+        suite.test('Check watcher entries after ' + action, function wCb(t) {
+            var count = 0;
+            var maxSecs = 5 * 60; // 5 minutes
+
+            function waitForWatcherEnd() {
+                count += 5;
+                if (!watcher.done) {
+                    if (count > maxSecs) {
+                        t.ok(false, 'Timed out waiting for the watcher to end');
+                        t.done();
+                        return;
+                    }
+                    setTimeout(waitForWatcherEnd, 5000);
+                    return;
+                }
+
+                var events = watcher.events.pop();
+                t.ok(events.length > 0, 'Should have seen events');
+                var endEvent = events.filter(function filterEnd(evt) {
+                    return evt.type === 'end';
+                })[0];
+                t.ok(endEvent, 'Should have seen end event');
+                t.equal(endEvent.phase, action, 'Phase should be ' + action);
+                var progressEvents = events.filter(function filterProgr(evt) {
+                    return evt.type === 'progress';
+                });
+                progressEvents.forEach(function testPrgrEvt(evt) {
+                    t.ok(evt.current_progress, 'Should have current_progress');
+                    t.ok(evt.message, 'Should have a message');
+                    t.ok(evt.state, 'Should have event state');
+                    t.ok(evt.total_progress, 'Should have total_progress');
+                    if (evt.started_timestamp) {
+                        t.ok(evt.duration_ms,
+                            'Should have duration_ms and started_timestamp');
+                    }
+                });
+                t.done();
+            }
+
+            waitForWatcherEnd();
+        });
+
+        suite.test('List migrations after ' + action, function lsCb(t) {
+            var url = '/my/migrations';
+            // Should get at least a migration.
+            client.get(url, function listCb(err, req, res, body) {
+                t.ifError(err, 'list migrations error');
+                t.ok(body, 'migrations list');
+                t.ok(body.length, 'migrations length');
+                checkMigration(t, body[0]);
+                t.end();
+            });
+        });
+
+        suite.test('Get migration after ' + action, function gCb(t) {
+            var url = '/my/migrations/' + machine;
+            client.get(url, function getCb(err, req, res, body) {
+                t.ifError(err, 'get migration error');
+                t.ok(body, 'migration');
+                checkMigration(t, body);
+                t.end();
+            });
+        });
+    });
+
+    suite.test('List migrations other', function (t) {
+        other.get('/my/migrations', function otherLsCb(err, req, res, body) {
+            t.ifError(err);
+            t.deepEqual(body, []);
+            t.end();
+        });
+    });
+
+    suite.test('Get migration other', function (t) {
+        var p = '/my/migrations/' + machine;
+        other.get(p, function otherGetCb(err, req, res, body) {
+            checkNotFound(t, err, req, res, body);
+            t.end();
+        });
+    });
+
+    suite.test('Close migrations watch client', function closeTest(t) {
+        httpClient.close();
+        t.end();
+    });
+
+    callback();
+};
