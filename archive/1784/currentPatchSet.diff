From e738ed4c60cc150fbfb5658fabae1ab3d68a17f5 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Thu, 20 Apr 2017 14:13:13 -0400
Subject: [PATCH] OS-6054 sysevent-stream should have fail-safe timer for
 "ready" event

---
 src/vm/node_modules/sysevent-stream.js | 72 ++++++++++++++++++++++----
 1 file changed, 62 insertions(+), 10 deletions(-)

diff --git a/src/vm/node_modules/sysevent-stream.js b/src/vm/node_modules/sysevent-stream.js
index d65891de..3fd4dc92 100644
--- a/src/vm/node_modules/sysevent-stream.js
+++ b/src/vm/node_modules/sysevent-stream.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2015, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  *
  * SyseventStream subscriptions Stream
  */
@@ -34,6 +34,8 @@ var LineStream = require('/usr/node/node_modules/linestream');
 
 function noop() {}
 
+var READY_TIMEOUT = 30 * 1000;
+
 module.exports = SyseventStream;
 
 /*
@@ -180,8 +182,9 @@ function SyseventStream(opts) {
                 'sysevent stopped');
             return;
         }
+
         var e = new Error('child exited');
-        self.ses_logger.error({err: e, code:code, signal: signal},
+        self.ses_logger.error({err: e, code: code, signal: signal},
             'child process closed');
         self.emit('error', e);
     });
@@ -194,6 +197,8 @@ function SyseventStream(opts) {
     self.ses_child.stdout.pipe(stdoutls).pipe(self);
 
     // parse stderr line by line - any stderr produced is a fatal error
+    // unexpected by the child process, so we log the error and abort the child
+    // process to generate a core dump
     var stderrls = new LineStream();
     self.ses_child.stderr.pipe(stderrls).on('readable', function () {
         var lines = [];
@@ -204,6 +209,18 @@ function SyseventStream(opts) {
         self.ses_logger.error({stderr: lines.join('\n')}, 'stderr produced');
         self._abort();
     });
+
+    // create a timer to ensure that the "ready" event seen.  This also allows
+    // us to ensure the "ready" event is only seen once.  We abort the child
+    // process if the ready event is not seen, as this represents a serious and
+    // unrecoverable error in the child.
+    self.ses_ready_timeout = setTimeout(function readyTimeout() {
+        var e = new Error('ready timeout exceeded');
+
+        self.ses_logger.error({err: e}, e.message);
+        self.ses_ready_timeout = null;
+        self._abort();
+    }, READY_TIMEOUT);
 }
 util.inherits(SyseventStream, stream.Transform);
 
@@ -224,7 +241,8 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
         ev.date = new Date(ev.date);
         assert.ok(isFinite(ev.date), 'invalid ev.date');
     } catch (e) {
-        // any JSON parse failure is a fatal error
+        // any JSON parse failure is a fatal error where we abort the child
+        // process to generate a core dump
         self.ses_logger.error({err: e, line: line},
             'failed to parse output line');
         self._abort();
@@ -233,7 +251,9 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
 
     switch (ev.type) {
     case 'ready':
+        assert(self.ses_ready_timeout, '"ready" event already seen');
         self.emit('ready');
+        self._clear_ready_timeout();
         break;
     default:
         self.push(ev);
@@ -247,21 +267,53 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
  * with a SIGTERM
  */
 SyseventStream.prototype.stop = function stop() {
-    this.ses_stopped = true;
-    this.ses_child.kill();
+    var self = this;
+
+    self._clear_ready_timeout();
+    self.ses_stopped = true;
+    self.ses_child.kill();
 };
 
 /*
  * stop the SyseventStream and force sysevent(1M) to dump core -
- * this should only be called from within this module
+ * this should only be called from within this module.
+ *
+ * This is only to be called when the child process does something unexpected
+ * in a way where it can't recover.  Currently, this includes not emitting the
+ * "ready" event, generating a line on stdout that can't be parsed as JSON, or
+ * generating any data on stderr.
+ *
+ * When the child process enters an unexpected state we send a SIGABRT to
+ * generate a core dump, and emit an error from this module. It is possible to
+ * catch this error and recreate the sysevent stream to deal with this
+ * situation, but it may be best to just let the error event crash the running
+ * node process.
  */
 SyseventStream.prototype._abort = function _abort() {
-    this.ses_stopped = true;
-    this.ses_logger.error({child: this.ses_child.pid},
+    var self = this;
+
+    self._clear_ready_timeout();
+    self.ses_stopped = true;
+    self.ses_logger.error({child: self.ses_child.pid},
         '_abort() called - sending SIGABRT');
-    this.ses_child.kill('SIGABRT');
+    self.ses_child.kill('SIGABRT');
     var e = new Error('sysevent(1M) aborted');
-    this.emit('error', e);
+    self.emit('error', e);
+};
+
+/*
+ * Convenience function to clear the ready timeout if it is set
+ */
+SyseventStream.prototype._clear_ready_timeout =
+    function _clear_ready_timeout() {
+
+    var self = this;
+
+    if (self.ses_ready_timeout) {
+        self.ses_logger.trace('clearing ready timeout');
+        clearTimeout(self.ses_ready_timeout);
+        self.ses_ready_timeout = null;
+    }
 };
 
 /*
-- 
2.21.0

