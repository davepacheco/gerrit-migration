commit a9b93cce0c035c8a17fa601b12a2ad51fec3d0bd (refs/changes/84/1784/3)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-04-17T15:45:41-04:00 (2 years, 6 months ago)
    
    OS-6054 sysevent-stream should have fail-safe timer for "ready" event
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/src/vm/node_modules/sysevent-stream.js b/src/vm/node_modules/sysevent-stream.js
index d65891de..03b0226c 100644
--- a/src/vm/node_modules/sysevent-stream.js
+++ b/src/vm/node_modules/sysevent-stream.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2015, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  *
  * SyseventStream subscriptions Stream
  */
@@ -34,6 +34,8 @@ var LineStream = require('/usr/node/node_modules/linestream');
 
 function noop() {}
 
+var READY_TIMEOUT = 30 * 1000;
+
 module.exports = SyseventStream;
 
 /*
@@ -181,7 +183,7 @@ function SyseventStream(opts) {
             return;
         }
         var e = new Error('child exited');
-        self.ses_logger.error({err: e, code:code, signal: signal},
+        self.ses_logger.error({err: e, code: code, signal: signal},
             'child process closed');
         self.emit('error', e);
     });
@@ -204,6 +206,16 @@ function SyseventStream(opts) {
         self.ses_logger.error({stderr: lines.join('\n')}, 'stderr produced');
         self._abort();
     });
+
+    // create a timer to ensure that the "ready" event seen.  This also allows
+    // us to ensure the "ready" event is only seen once
+    self.ses_ready_timeout = setTimeout(function readyTimeout() {
+        var e = new Error('ready timeout exceeded');
+
+        self.ses_logger.error({err: e}, e.message);
+        self.ses_ready_timeout = null;
+        self._abort();
+    }, READY_TIMEOUT);
 }
 util.inherits(SyseventStream, stream.Transform);
 
@@ -233,7 +245,9 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
 
     switch (ev.type) {
     case 'ready':
+        assert(self.ses_ready_timeout, '"ready" event already seen');
         self.emit('ready');
+        self._clear_ready_timeout();
         break;
     default:
         self.push(ev);
@@ -247,8 +261,11 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
  * with a SIGTERM
  */
 SyseventStream.prototype.stop = function stop() {
-    this.ses_stopped = true;
-    this.ses_child.kill();
+    var self = this;
+
+    self._clear_ready_timeout();
+    self.ses_stopped = true;
+    self.ses_child.kill();
 };
 
 /*
@@ -256,12 +273,30 @@ SyseventStream.prototype.stop = function stop() {
  * this should only be called from within this module
  */
 SyseventStream.prototype._abort = function _abort() {
-    this.ses_stopped = true;
-    this.ses_logger.error({child: this.ses_child.pid},
+    var self = this;
+
+    self._clear_ready_timeout();
+    self.ses_stopped = true;
+    self.ses_logger.error({child: self.ses_child.pid},
         '_abort() called - sending SIGABRT');
-    this.ses_child.kill('SIGABRT');
+    self.ses_child.kill('SIGABRT');
     var e = new Error('sysevent(1M) aborted');
-    this.emit('error', e);
+    self.emit('error', e);
+};
+
+/*
+ * Convenience function to clear the ready timeout if it is set
+ */
+SyseventStream.prototype._clear_ready_timeout =
+    function _clear_ready_timeout() {
+
+    var self = this;
+
+    if (self.ses_ready_timeout) {
+        self.ses_logger.trace('clearing ready timeout');
+        clearTimeout(self.ses_ready_timeout);
+        self.ses_ready_timeout = null;
+    }
 };
 
 /*
