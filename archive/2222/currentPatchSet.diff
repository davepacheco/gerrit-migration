From 08b6580e5221a26ad2c507bf93368a174bf44820 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Fri, 14 Jul 2017 16:52:10 +0000
Subject: [PATCH] AGENT-1080 hagfish-watcher should use sdcnode TOOLS-1810
 common Makefile infrastructure for NPM public registry use TOOLS-1814 retire
 "node_deps" Makefile from eng.git

---
 .gitignore                                    |   2 +-
 Makefile                                      | 106 +++++++-----------
 npm/postinstall.sh                            |   7 +-
 npm/postuninstall.sh                          |   8 +-
 package.json                                  |   1 -
 tools/mk/Makefile.defs                        |  50 ++++++++-
 tools/mk/Makefile.node.defs                   |  16 ++-
 tools/mk/Makefile.node.targ                   |   2 +-
 tools/mk/Makefile.node_deps.defs              |  43 -------
 tools/mk/Makefile.node_modules.defs           |  68 +++++++++++
 ...e_deps.targ => Makefile.node_modules.targ} |  19 +++-
 tools/mk/Makefile.node_prebuilt.defs          |  16 ++-
 tools/mk/Makefile.targ                        |  22 +++-
 13 files changed, 226 insertions(+), 134 deletions(-)
 delete mode 100644 tools/mk/Makefile.node_deps.defs
 create mode 100644 tools/mk/Makefile.node_modules.defs
 rename tools/mk/{Makefile.node_deps.targ => Makefile.node_modules.targ} (52%)

diff --git a/.gitignore b/.gitignore
index 0f12fd7..2bac8d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,8 +8,8 @@ cscope.po.out
 cscope.out
 smf/manifests/*.xml
 .*.swp
-downloads/
 node/
 config/config.json
 hagfish-watcher-*.tgz
 hagfish-watcher-*.manifest
+make_stamps/
diff --git a/Makefile b/Makefile
index 14fbba6..93a4778 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -30,91 +30,65 @@ JSSTYLE_FILES =		$(JS_FILES)
 JSSTYLE_FLAGS =		-o indent=4,doxygen,unparenthesized-return=0
 SMF_MANIFESTS_IN =	smf/manifests/hagfish-watcher.xml.in
 
+NODE_PREBUILT_VERSION =	v0.10.48
+NODE_PREBUILT_TAG =	gz
+NODE_PREBUILT_IMAGE =	fd2cc906-8938-11e3-beab-4359c665ac99
+
 #
-# Use a build of node compiled on the oldest supported SDC 6.5 platform:
+# Due to the unfortunate nature of NPM, the Node Package Manager, there appears
+# to be no way to assemble our dependencies without running the lifecycle
+# scripts.  These lifecycle scripts should not be run except in the context of
+# an agent installation or uninstallation, so we provide a magic environment
+# varible to disable them here.
 #
-MANTA_BASE =		http://us-east.manta.joyent.com
-NODE_VERSION =		v0.10.26
-NODE_BASE_URL =		$(MANTA_BASE)/Joyent_Dev/public/old_node_builds
-NODE_TARBALL =		node-$(NODE_VERSION)-sdc65.tar.gz
-
-NODE_EXEC =		$(TOP)/build/node/bin/node
-NPM_EXEC =		$(NODE_EXEC) $(TOP)/build/node/bin/npm \
-			--unsafe-perm false
-
-CLEAN_FILES += \
-			node \
-			node_modules \
-			downloads
+NPM_ENV =		SDC_AGENT_SKIP_LIFECYCLE=yes
 
 include ./tools/mk/Makefile.defs
 include ./tools/mk/Makefile.smf.defs
+include ./tools/mk/Makefile.node_prebuilt.defs
+include ./tools/mk/Makefile.node_modules.defs
 
 NAME :=			hagfish-watcher
 RELEASE_TARBALL :=	$(NAME)-$(STAMP).tgz
 RELEASE_MANIFEST :=	$(NAME)-$(STAMP).manifest
 RELSTAGEDIR :=		/tmp/$(STAMP)
-NODEUNIT =		$(TOP)/node_modules/.bin/nodeunit
 
 #
 # Repo-specific targets
 #
 .PHONY: all
-all: $(SMF_MANIFESTS) | $(NODE_EXEC) $(REPO_DEPS)
-	$(NPM_EXEC) install
-
-$(NODEUNIT): | $(NODE_EXEC)
-	$(NPM_EXEC) install
-
-CLEAN_FILES += $(NODEUNIT) ./node_modules/tap
-
-.PHONY: test
-test: $(NODEUNIT)
-	$(NODEUNIT) --reporter=tap test/test-*.js
-
-$(TOP)/downloads/$(NODE_TARBALL):
-	@echo "downloading node $(NODE_VERSION) ..."
-	mkdir -p $(TOP)/downloads
-	curl -f -kL -o $@ '$(NODE_BASE_URL)/$(NODE_TARBALL)'
-	touch $@
-
-$(NODE_EXEC): $(TOP)/downloads/$(NODE_TARBALL)
-	@echo "extracting node $(NODE_VERSION) ..."
-	mkdir -p $(TOP)/build/node
-	gtar -xz -C $(TOP)/build/node -f downloads/$(NODE_TARBALL)
-	touch $@
+all: $(STAMP_NODE_MODULES) $(SMF_MANIFESTS)
 
 .PHONY: release
-release: all deps docs $(SMF_MANIFESTS)
+release: all deps docs
 	@echo "Building $(RELEASE_TARBALL)"
 	@mkdir -p $(RELSTAGEDIR)/$(NAME)
-	cd $(TOP) && $(NPM_EXEC) install
 	cp -r \
-	$(TOP)/Makefile \
-	$(TOP)/bin \
-	$(TOP)/build \
-	$(TOP)/cmd \
-	$(TOP)/config \
-	$(TOP)/lib \
-	$(TOP)/node_modules \
-	$(TOP)/npm \
-	$(TOP)/package.json \
-	$(TOP)/smf \
-	$(RELSTAGEDIR)/hagfish-watcher
-	uuid -v4 > $(RELSTAGEDIR)/hagfish-watcher/image_uuid
+	    $(TOP)/bin \
+	    $(TOP)/cmd \
+	    $(TOP)/config \
+	    $(TOP)/lib \
+	    $(TOP)/node_modules \
+	    $(TOP)/npm \
+	    $(TOP)/package.json \
+	    $(TOP)/smf \
+	    $(RELSTAGEDIR)/$(NAME)
+	mkdir -p $(RELSTAGEDIR)/$(NAME)/build/node/bin
+	cp build/node/bin/node $(RELSTAGEDIR)/$(NAME)/build/node/bin/node
+	uuid -v4 > $(RELSTAGEDIR)/$(NAME)/image_uuid
 	json -f $(TOP)/package.json -e 'this.version += "-$(STAMP)"' \
-	    > $(RELSTAGEDIR)/hagfish-watcher/package.json
-	(cd $(RELSTAGEDIR) && $(TAR) -zcf $(TOP)/$(RELEASE_TARBALL) *)
-	cat $(TOP)/manifest.tmpl | sed \
-		-e "s/UUID/$$(cat $(RELSTAGEDIR)/hagfish-watcher/image_uuid)/" \
-		-e "s/NAME/$$(json name < $(TOP)/package.json)/" \
-		-e "s/VERSION/$$(json version < $(TOP)/package.json)/" \
-		-e "s/DESCRIPTION/$$(json description < $(TOP)/package.json)/" \
-		-e "s/BUILDSTAMP/$(STAMP)/" \
-		-e "s/SIZE/$$(stat --printf="%s" $(TOP)/$(RELEASE_TARBALL))/" \
-		-e "s/SHA/$$(openssl sha1 $(TOP)/$(RELEASE_TARBALL) \
-		    | cut -d ' ' -f2)/" \
-		> $(TOP)/$(RELEASE_MANIFEST)
+	    > $(RELSTAGEDIR)/$(NAME)/package.json
+	cd $(RELSTAGEDIR) && $(TAR) -zcf $(TOP)/$(RELEASE_TARBALL) *
+	sed \
+	    -e "s/UUID/$$(cat $(RELSTAGEDIR)/$(NAME)/image_uuid)/" \
+	    -e "s/NAME/$$(json -f $(TOP)/package.json name)/" \
+	    -e "s/VERSION/$$(json -f $(TOP)/package.json version)/" \
+	    -e "s/DESCRIPTION/$$(json -f $(TOP)/package.json description)/" \
+	    -e "s/BUILDSTAMP/$(STAMP)/" \
+	    -e "s/SIZE/$$(stat --printf="%s" $(TOP)/$(RELEASE_TARBALL))/" \
+	    -e "s/SHA/$$(openssl sha1 $(TOP)/$(RELEASE_TARBALL) \
+	        | cut -d ' ' -f2)/" \
+	    < $(TOP)/manifest.tmpl > $(TOP)/$(RELEASE_MANIFEST)
 	@rm -rf $(RELSTAGEDIR)
 
 .PHONY: publish
@@ -138,3 +112,5 @@ dumpvar:
 include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.smf.targ
 include ./tools/mk/Makefile.targ
+include ./tools/mk/Makefile.node_prebuilt.targ
+include ./tools/mk/Makefile.node_modules.targ
diff --git a/npm/postinstall.sh b/npm/postinstall.sh
index ddf3954..b4432ee 100755
--- a/npm/postinstall.sh
+++ b/npm/postinstall.sh
@@ -6,9 +6,14 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
+if [[ "${SDC_AGENT_SKIP_LIFECYCLE:-no}" = "yes" ]]; then
+    printf 'Running during package build; skipping lifecycle script.\n' >&2
+    exit 0
+fi
+
 set -o errexit
 set -o pipefail
 set -o xtrace
diff --git a/npm/postuninstall.sh b/npm/postuninstall.sh
index c33340f..8dd8010 100755
--- a/npm/postuninstall.sh
+++ b/npm/postuninstall.sh
@@ -1,3 +1,4 @@
+#!/bin/bash
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -5,9 +6,14 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
+if [[ "${SDC_AGENT_SKIP_LIFECYCLE:-no}" = "yes" ]]; then
+    printf 'Running during package build; skipping lifecycle script.\n' >&2
+    exit 0
+fi
+
 export SMFDIR=$npm_config_smfdir
 
 svcadm disable -s hagfish-watcher
diff --git a/package.json b/package.json
index b38ff1c..b8ecc89 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,6 @@
         "mkdirp": "0.3.5",
         "kstat": "git://github.com/orlandov/node-kstat.git#8c2643153c38f045cfd9dbbde24b644b492974ae",
         "zutil": "git://github.com/orlandov/node-zutil.git#9257881d575dd4496f5283930e6b07ed59685809",
-        "nodeunit": "0.7.4",
         "extsprintf": "1.0.3",
         "vasync": "1.5.0",
         "jsprim": "0.5.1",
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..8c6be90 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,9 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +51,47 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
index 9376841..487824d 100644
--- a/tools/mk/Makefile.node.defs
+++ b/tools/mk/Makefile.node.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -97,8 +96,15 @@ NODE_EXEC	= $(NODE_INSTALL)/bin/node
 NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
 NPM_EXEC	= $(NODE_INSTALL)/bin/npm
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_EXEC)
 NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
index abdc616..bf53f78 100644
--- a/tools/mk/Makefile.node.targ
+++ b/tools/mk/Makefile.node.targ
@@ -29,7 +29,7 @@ else
 $(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
 	(mkdir -p $(BUILD) \
 		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
 		&& cd src-node \
 		&& git checkout $(NODE_PREBUILT_VERSION) \
 		&& ./configure $(NODE_CONFIG_FLAGS) \
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f7..0000000
--- a/tools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_modules.targ
similarity index 52%
rename from tools/mk/Makefile.node_deps.targ
rename to tools/mk/Makefile.node_modules.targ
index bb2ab4f..0156bce 100644
--- a/tools/mk/Makefile.node_deps.targ
+++ b/tools/mk/Makefile.node_modules.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,11 +5,11 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
 #
 # NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
 # into other repos as-is without requiring any modifications. If you find
@@ -18,7 +17,15 @@
 # eng.git and then update your repo to use the new version.
 #
 
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
 
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
index 5744489..2129742 100644
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -146,8 +145,15 @@ NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
 NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
 NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
 NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 16b15aa..54edf0e 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -264,7 +263,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,6 +293,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
@@ -316,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

