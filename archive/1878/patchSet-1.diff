From d063f173f76ddaaa2add258219555afd187ba5f6 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Sat, 29 Apr 2017 06:21:23 +0000
Subject: [PATCH] AGENT-997 hermes-actor should use sdcnode

---
 Makefile               | 34 ++++++++++++-------
 actor/actor.js         | 37 +++++++++++++++++---
 lib/httpserver.js      | 15 ++------
 lib/servers.js         | 18 +++++-----
 package.json           | 21 ++++++------
 tools/download_sdcnode | 77 ++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 154 insertions(+), 48 deletions(-)
 create mode 100755 tools/download_sdcnode

diff --git a/Makefile b/Makefile
index b85d02c..c563a2d 100644
--- a/Makefile
+++ b/Makefile
@@ -5,18 +5,17 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 TOP =			$(PWD)
 
 #
-# Use a build of node compiled on the oldest supported SDC 6.5 platform:
+# Use a build of node compiled to work in the global zone.
 #
-MANTA_BASE =		http://us-east.manta.joyent.com
-NODE_VERSION =		v0.10.26
-NODE_TARBALL =		node-$(NODE_VERSION)-sdc65.tar.gz
-NODE_BASE_URL =		$(MANTA_BASE)/Joyent_Dev/public/old_node_builds
+NODE_IMAGE =		18b094b0-eb01-11e5-80c1-175dac7ddf02
+NODE_VARIANT =		v4.8.1-gz
+NODE_TARBALL =		downloads/sdcnode-$(NODE_VARIANT)-$(NODE_IMAGE).tar.gz
 
 NODE_EXEC =		$(PWD)/node/bin/node
 NPM_EXEC =		$(NODE_EXEC) $(PWD)/node/bin/npm
@@ -83,6 +82,8 @@ INSTALL_FILES = \
 	$(addprefix $(DESTDIR)$(PREFIX)/,$(COMMON_JS_FILES)) \
 	$(addprefix $(DESTDIR)$(PREFIX)/scripts/,$(SCRIPTS)) \
 	$(DESTDIR)$(PREFIX)/bin/node \
+	$(DESTDIR)$(PREFIX)/lib/libgcc_s.so.1 \
+	$(DESTDIR)$(PREFIX)/lib/libstdc++.so.6 \
 	$(DESTDIR)$(PREFIX)/smf/hermes.xml \
 	$(DESTDIR)$(PREFIX)/smf/hermes-proxy.xml \
 	$(addprefix $(DESTDIR)$(PREFIX)/sapi_manifests/,$(SAPI_FILES)) \
@@ -109,10 +110,14 @@ install: $(INSTALL_DIRS) $(DESTDIR)$(PREFIX)/node_modules $(INSTALL_FILES)
 
 $(DESTDIR)$(PREFIX)/actor.tar.gz: $(ACTOR_JS_FILES:%=actor/%) \
     $(COMMON_JS_FILES) $(DESTDIR)$(PREFIX)/bin/node \
+    $(DESTDIR)$(PREFIX)/lib/libgcc_s.so.1 \
+    $(DESTDIR)$(PREFIX)/lib/libstdc++.so.6 \
     $(DESTDIR)$(PREFIX)/node_modules
 	/usr/bin/tar cfz $@ \
 	    -C $(DESTDIR)$(PREFIX) node_modules \
 	    -C $(DESTDIR)$(PREFIX) bin/node \
+	    -C $(DESTDIR)$(PREFIX) lib/libgcc_s.so.1 \
+	    -C $(DESTDIR)$(PREFIX) lib/libstdc++.so.6 \
 	    $(ACTOR_JS_FILES:%=-C $(TOP)/actor %) \
 	    $(COMMON_JS_FILES:%=-C $(TOP) %)
 
@@ -131,6 +136,9 @@ $(DESTDIR)$(PREFIX)/%.js: $(PWD)/%.js
 $(DESTDIR)$(PREFIX)/bin/node: $(PWD)/node/bin/node
 	cp $^ $@
 
+$(DESTDIR)$(PREFIX)/lib/lib%: $(PWD)/node/lib/lib%
+	cp $^ $@
+
 $(DESTDIR)$(PREFIX)/smf/%.xml: $(PWD)/smf/manifests/%.xml.in
 	sed -e 's,@@NODE@@,@@PREFIX@@/bin/node,g' \
 	    -e 's,@@PREFIX@@,$(PREFIX),g' \
@@ -149,15 +157,15 @@ $(DESTDIR)$(PREFIX)/node_modules: 0-npm-stamp
 	rm -rf $@
 	cp -r $(PWD)/node_modules $@
 
-downloads/$(NODE_TARBALL):
-	@echo "downloading node $(NODE_VERSION) ..."
-	mkdir -p `dirname $@`
-	curl -fsS -kL -o $@ '$(NODE_BASE_URL)/$(NODE_TARBALL)'
+$(NODE_TARBALL):
+	@echo "downloading sdcnode $(NODE_VARIANT) ..."
+	mkdir -p $(@D)
+	./tools/download_sdcnode $(NODE_IMAGE) $(NODE_VARIANT) $(@D)
 
-$(NODE_EXEC): downloads/$(NODE_TARBALL)
+$(NODE_EXEC): $(NODE_TARBALL)
 	@echo "extracting node $(NODE_VERSION) ..."
-	mkdir -p node
-	gtar -xz -C node -f downloads/$(NODE_TARBALL)
+	-rm -rf node
+	gtar -xz -f $(NODE_TARBALL)
 	[[ -f $(NODE_EXEC) ]] && touch $(NODE_EXEC)
 
 clean:
diff --git a/actor/actor.js b/actor/actor.js
index 9c36f19..38abd3c 100644
--- a/actor/actor.js
+++ b/actor/actor.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var mod_os = require('os');
@@ -17,6 +17,7 @@ var mod_assert = require('assert-plus');
 var mod_vasync = require('vasync');
 var mod_manta = require('manta');
 var mod_backoff = require('backoff');
+var mod_yakaa = require('yakaa');
 
 var lib_utils = require('./lib/utils');
 var lib_conn = require('./lib/conn');
@@ -67,8 +68,9 @@ var GS = {
 
 	gs_manta: {
 		client: null,
-		user: null
-	}
+		user: null,
+		agent: null
+	},
 };
 
 function
@@ -320,9 +322,34 @@ handle_message(msg)
 			http_proxy: msg.http_proxy,
 			https_proxy: msg.https_proxy
 		}, 'received manta configuration from server');
-		if (GS.gs_manta.client)
+
+		if (GS.gs_manta.client) {
 			GS.gs_manta.client.close();
+		}
+		if (GS.gs_manta.agent) {
+			GS.gs_manta.agent.destroy();
+		}
+
 		GS.gs_manta.user = msg.config.user;
+
+		/*
+		 * In order to funnel Manta requests through the hermes proxy,
+		 * we create a proxy-capable Agent and give it to the Manta
+		 * client for outbound requests.  If the URL is not obviously
+		 * an insecure HTTP URL, we assume HTTPS.
+		 */
+		if (mod_jsprim.startsWith(msg.config.url, 'http:')) {
+			GS.gs_manta.agent = new mod_yakaa({
+				proxy: msg.http_proxy,
+				keepAlive: true
+			});
+		} else {
+			GS.gs_manta.agent = new mod_yakaa.SSL({
+				proxy: msg.https_proxy,
+				keepAlive: true
+			});
+		}
+
 		GS.gs_manta.client = mod_manta.createClient({
 			sign: mod_manta.privateKeySigner({
 				key: msg.private_key,
@@ -333,7 +360,7 @@ handle_message(msg)
 			url: msg.config.url,
 			connectTimeout: msg.config.connect_timeout,
 			retry: false,
-			proxy: msg.https_proxy || msg.http_proxy
+			agent: GS.gs_manta.agent
 		});
 		break;
 
diff --git a/lib/httpserver.js b/lib/httpserver.js
index 5766eca..3307cb6 100644
--- a/lib/httpserver.js
+++ b/lib/httpserver.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var mod_net = require('net');
@@ -53,7 +53,8 @@ _init()
 	self.hs_server = mod_restify.createServer({
 		name: 'hermes',
 		log: self.hs_log,
-		handleUpgrades: true
+		handleUpgrades: true,
+		handleUncaughtExceptions: false
 	});
 
 	var attach = function (req, res, next) {
@@ -117,16 +118,6 @@ _init()
 	self.hs_server.get('/actor.tar.gz', get_actor_tarball);
 	self.hs_server.get('/attach', attach);
 
-	self.hs_server.on('uncaughtException', function (req, res, route, err) {
-		var __panic = {
-			__restify_panic_error: err
-		};
-		self.hs_log.error({
-			err: __panic.__restify_panic_error
-		}, 'httpserver restify panic');
-		process.abort();
-	});
-
 	self.hs_server.listen(self.hs_port, self.hs_ip, function () {
 		self.hs_log.info({
 			address: self.hs_server.address()
diff --git a/lib/servers.js b/lib/servers.js
index 7e1cc17..675cf35 100644
--- a/lib/servers.js
+++ b/lib/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
@@ -17,7 +17,7 @@ var lib_utils = require('./utils');
 
 
 function
-Server(mgr, server_uuid, hostname, dcname, version)
+Server(mgr, server_uuid, hostname, dcname)
 {
 	var self = this;
 
@@ -25,7 +25,6 @@ Server(mgr, server_uuid, hostname, dcname, version)
 	mod_assert.string(server_uuid, 'server_uuid');
 	mod_assert.string(hostname, 'hostname');
 	mod_assert.string(dcname, 'dcname');
-	mod_assert.string(version, 'version');
 
 	self.s_mgr = mgr;
 	self.s_log = mgr.sm_log.child({
@@ -36,7 +35,6 @@ Server(mgr, server_uuid, hostname, dcname, version)
 	self.s_uuid = server_uuid;
 	self.s_hostname = hostname;
 	self.s_datacenter = dcname;
-	self.s_version = version;
 
 	self.s_lastseen = Date.now();
 	self.s_generation = mgr.sm_generation;
@@ -344,14 +342,14 @@ lookup(server)
 };
 
 ServerManager.prototype._update = function
-_update(server_uuid, dcname, hostname, version)
+_update(server_uuid, dcname, hostname)
 {
 	var self = this;
 
 	var s = self.lookup(server_uuid);
 
 	if (!s) {
-		s = new Server(self, server_uuid, hostname, dcname, version);
+		s = new Server(self, server_uuid, hostname, dcname);
 		self.sm_servers.push(s);
 	} else {
 		s.s_lastseen = Date.now();
@@ -449,6 +447,11 @@ _cnapi_poll(callback)
 				continue;
 			}
 
+			if (server.sysinfo['SDC Version'] !== '7.0') {
+				log.warn('server running ancient platform');
+				continue;
+			}
+
 			if (!server.datacenter || !server.datacenter.trim()) {
 				log.warn('server has no "datacenter" in CNAPI');
 				continue;
@@ -462,8 +465,7 @@ _cnapi_poll(callback)
 			}
 
 			self._update(server.uuid, server.datacenter,
-			    server.hostname,
-			    server.sysinfo['SDC Version'] || '6.5');
+			    server.hostname);
 		}
 
 		self._expire();
diff --git a/package.json b/package.json
index 3e6f1fd..d79462e 100644
--- a/package.json
+++ b/package.json
@@ -6,19 +6,20 @@
   "author": "Joshua M. Clulow <jmc@joyent.com>",
   "private": true,
   "dependencies": {
-    "sdc-clients": "~9.1",
-    "manta": "git://github.com/joyent/node-manta.git#8a05470b64d57aafab840320863214c8b82ba161",
-    "bunyan": "^0.22.1",
-    "restify": "^2.6.3",
-    "assert-plus": "~0.1.5",
+    "sdc-clients": "^10.2.0",
+    "manta": "^4.3.0",
+    "bunyan": "^1.8.10",
+    "restify": "^4.3.0",
+    "assert-plus": "^1.0.0",
     "once": "~1.2.0",
-    "watershed": "^0.3.0",
-    "vasync": "^1.4.3",
-    "verror": "^1.4.0",
+    "watershed": "^0.3.3",
+    "vasync": "^1.6.4",
+    "verror": "^1.9.0",
     "lstream": "^0.0.4",
     "backoff": "^2.3.0",
-    "jsprim": "^0.5.1",
-    "cueball": "^2.0.1"
+    "jsprim": "^1.4.0",
+    "cueball": "^2.0.1",
+    "yakaa": "https://github.com/jclulow/yakaa.git#a144f715f413a13549d320d0c6156675994a03fb"
   },
   "devDependencies": {
     "jshint": "^2.5.6"
diff --git a/tools/download_sdcnode b/tools/download_sdcnode
new file mode 100755
index 0000000..214c2e1
--- /dev/null
+++ b/tools/download_sdcnode
@@ -0,0 +1,77 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+BASEURL='https://download.joyent.com/pub/build/sdcnode'
+BRANCH='master'
+IMAGE=$1
+VARIANT=$2
+OUTDIR=$3
+
+if [[ -z $IMAGE || -z $VARIANT || -z $OUTDIR ]]; then
+	printf 'ERROR: usage: download_sdcnode IMAGE VARIANT OUTDIR\n' 2>&1
+	exit 1
+fi
+
+FULLURL="$BASEURL/$IMAGE/$BRANCH-latest/sdcnode/"
+TARGET="sdcnode-$VARIANT-$IMAGE.tar.gz"
+
+#
+# Download the index page which lists the current set of available sdcnode
+# builds:
+#
+if ! list=$(curl -sSfL "$FULLURL") || [[ -z "$list" ]]; then
+	printf 'ERROR: could not download index page\n' >&2
+	exit 1
+fi
+
+#
+# Using only commonly found household items, extract the full name of the
+# sdcnode tar archive we need.
+#
+# One word to describe this process might be "brittle".
+#
+if ! name=$(awk -v "v=$VARIANT" -v "b=$BRANCH" -v "i=$IMAGE" -F\" '
+    BEGIN { pattern = "^sdcnode-"v"-"i"-"b"-.*.tgz$"; }
+    $1 == "<a href=" && $2 ~ pattern { print $2 }' <<< "$list") ||
+    [[ -z "$name" ]]; then
+	printf 'ERROR: could not locate file name in index page\n' >&2
+	exit 1
+fi
+
+if [[ ! -f $OUTDIR/$name ]]; then
+	#
+	# If the full file name of the latest sdcnode build does not exist,
+	# download it now to a temporary file.  If it succeeds, move it into
+	# place.
+	#
+	if ! curl -sSf -o "$OUTDIR/.tmp.$name" "$FULLURL$name"; then
+		printf 'ERROR: could not download sdcnode' >&2
+		rm -f "$OUTPUT.tmp"
+		exit 1
+	fi
+
+	if ! mv "$OUTDIR/.tmp.$name" "$OUTDIR/$name"; then
+		exit 1
+	fi
+fi
+
+#
+# Make sure the target link points at the correct file:
+#
+rm -f "$OUTDIR/$TARGET"
+if ! ln -s "$name" "$OUTDIR/$TARGET"; then
+	printf 'ERROR: could not create target link\n' >&2
+	exit 1
+fi
+
+exit 0
+
+# vim: set ts=8 sts=8 sw=8 noet:
-- 
2.21.0

