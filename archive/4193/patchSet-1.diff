From b68187b2f82f8900b19cb2264025bb72e1bd7bcf Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Tue, 12 Jun 2018 16:38:59 -0600
Subject: [PATCH] joyent/node-artedi#14 Allow for metrics in a MetricVector to
 be optionally expired or reset to a default value

---
 lib/common.js        |  19 ++++++-
 lib/metric.js        |  55 ++++++++++++++++++-
 lib/metric_vector.js |  35 ++++++++++--
 test/basic.test.js   | 125 +++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 227 insertions(+), 7 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index d1f95a0..52c7e80 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -17,16 +17,31 @@ function constructor(options, obj) {
     mod_assert.string(options.help, 'options.help');
     mod_assert.optionalObject(options.labels, 'options.labels');
     mod_assert.optionalObject(options.parentLabels, 'options.parentLabels');
+    mod_assert.optionalBool(options.expires, 'options.expires');
+    mod_assert.optionalNumber(options.defaultValue, 'options.defaultValue');
+    mod_assert.optionalNumber(options.expiryPeriod, 'options.expiryPeriod');
 
     obj.staticLabels =
         mod_jsprim.mergeObjects(options.parentLabels, options.labels, null);
 
     obj.help = options.help;
     obj.name = options.name;
-    obj.metricVec = new lib_metric_vector.MetricVector({
+
+    var metricVectorOpts = {
         name: obj.name,
         labels: obj.staticLabels
-    });
+    };
+
+    if (options.expires) {
+        metricVectorOpts.expires = options.expires;
+    }
+    if (options.defaultValue) {
+        metricVectorOpts.defaultValue = options.defaultValue;
+    }
+    if (options.expiryPeriod) {
+        metricVectorOpts.expiryPeriod = options.expiryPeriod;
+    }
+    obj.metricVec = new lib_metric_vector.MetricVector(metricVectorOpts);
 }
 
 /*
diff --git a/lib/metric.js b/lib/metric.js
index bd11950..cd33e27 100644
--- a/lib/metric.js
+++ b/lib/metric.js
@@ -22,10 +22,36 @@ var lib_provider = require('./provider');
  */
 function Metric(options) {
     mod_assert.optionalObject(options, 'options');
+    mod_assert.optionalBool(options.expires, 'options.expires');
+    mod_assert.optionalNumber(options.defaultValue, 'options.defaultValue');
+    mod_assert.optionalNumber(options.expiryPeriod, 'options.expiryPeriod');
+
     this.labels = options ? options.labels : {};
-    this.value = 0;
+
+    this.expires = false;
+    if (options && options.expires) {
+        this.expires = options.expires;
+    }
+    this.defaultValue = 0;
+    if (options && options.defaultValue) {
+        this.defaultValue = options.defaultValue;
+    }
+    /*
+     * The expiryPeriod is time period after which the metric is reset to its
+     * default value if the metric timestamp is not updated due to a call to the
+     * add or set methods.
+     */
+    this.expiryPeriod = 300000;
+    if (options && options.expiryPeriod) {
+        this.expiryPeriod = options.expiryPeriod;
+    }
+
+    this.value = this.defaultValue;
+
     // ISO 8601 time when this metric was last updated.
     this.timestamp = null;
+
+    this.expiryTimer = null;
 }
 
 /*
@@ -37,30 +63,57 @@ Metric.prototype.add = function add(num) {
     mod_assert.number(num, 'num');
 
     var self = this;
+
+    if (this.expiryTimer) {
+        clearTimeout(this.expiryTimer);
+        this.expiryTimer = null;
+    }
+
     lib_provider['metric-add'].fire(function () {
         return ([num, self.labels]);
     });
 
     this.value += num;
     this.timestamp = new Date().toISOString();
+
+    if (this.expires) {
+        this.expiryTimer =
+            setTimeout(this.resetValue.bind(this), this.expiryPeriod);
+    }
 };
 
 Metric.prototype.set = function set(num) {
     mod_assert.number(num, 'num');
 
     var self = this;
+
+    if (this.expiryTimer) {
+        clearTimeout(this.expiryTimer);
+        this.expiryTimer = null;
+    }
+
     lib_provider['metric-set'].fire(function () {
         return ([num, self.labels]);
     });
 
     this.value = num;
     this.timestamp = new Date().toISOString();
+
+    if (this.expires) {
+        this.expiryTimer =
+            setTimeout(this.resetValue.bind(this), this.expiryPeriod);
+    }
 };
 
 Metric.prototype.getValue = function getValue() {
     return (this.value);
 };
 
+Metric.prototype.resetValue = function resetValue() {
+    this.value = this.defaultValue;
+    this.timestamp = new Date().toISOString();
+};
+
 module.exports = {
     Metric: Metric
 };
diff --git a/lib/metric_vector.js b/lib/metric_vector.js
index a60f974..b218ee7 100644
--- a/lib/metric_vector.js
+++ b/lib/metric_vector.js
@@ -28,12 +28,27 @@ var lib_utils = require('./utils');
  *
  */
 function MetricVector(opts) {
+    mod_assert.object(opts, 'options');
     mod_assert.string(opts.name, 'opts.name');
     mod_assert.optionalObject(opts.labels, 'opts.labels');
+    mod_assert.optionalBool(opts.expires, 'opts.expires');
+    mod_assert.optionalNumber(opts.defaultValue, 'opts.defaultValue');
+    mod_assert.optionalNumber(opts.expiryPeriod, 'opts.expiryPeriod');
 
     this.name = opts.name;
     this.metrics = {};
 
+    this.expires = false;
+    if (opts.expires) {
+        this.expires = opts.expires;
+    }
+    if (opts.defaultValue) {
+        this.defaultValue = opts.defaultValue;
+    }
+    if (opts.expiryPeriod) {
+        this.expiryPeriod = opts.expiryPeriod;
+    }
+
     this.staticLabels = opts.labels;
     if (this.staticLabels) {
         this.staticLabels = lib_utils.trim(this.staticLabels);
@@ -65,9 +80,14 @@ MetricVector.prototype.addBuckets = function addBuckets(newBuckets) {
 MetricVector.prototype.getDefault = function getDefault() {
     // defaultMetric is a metric with only static labels (if provided).
     if (!this.metrics['default']) {
-        this.metrics['default'] = new lib_metric.Metric({
-            labels: this.staticLabels
-        });
+        var metricOptions = {labels: this.staticLabels, expires: this.expires};
+        if (this.defaultValue) {
+            metricOptions.defaultValue = this.defaultValue;
+        }
+        if (this.expiryPeriod) {
+            metricOptions.expiryPeriod = this.expiryPeriod;
+        }
+        this.metrics['default'] = new lib_metric.Metric(metricOptions);
     }
     return (this.metrics['default']);
 };
@@ -114,7 +134,14 @@ MetricVector.prototype.createWithLabels = function createWithLabels(labels) {
         }
     }
 
-    this.metrics[lhash] = new lib_metric.Metric({labels: copy});
+    var metricOptions = {labels: copy, expires: this.expires};
+    if (this.defaultValue) {
+        metricOptions.defaultValue = this.defaultValue;
+    }
+    if (this.expiryPeriod) {
+        metricOptions.expiryPeriod = this.expiryPeriod;
+    }
+    this.metrics[lhash] = new lib_metric.Metric(metricOptions);
     return (this.metrics[lhash]);
 };
 
diff --git a/test/basic.test.js b/test/basic.test.js
index 5455121..37cd0c9 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -665,3 +665,128 @@ mod_tape('log/linear bucket tests', function (t) {
 
     t.end();
 });
+
+mod_tape('gauge expiry tests', function (t) {
+    var collector = mod_artedi.createCollector();
+    var expiryGauge1 = collector.gauge({
+        name: 'expiryGauge1',
+        help: 'expiry gauge help',
+        expires: true,
+        expiryPeriod: 2000
+    });
+
+    var expiryGauge2 = collector.gauge({
+        name: 'expiryGauge2',
+        help: 'expiry gauge help',
+        expires: true,
+        expiryPeriod: 1000,
+        defaultValue: 25
+    });
+
+    var nonExpiryGauge = collector.gauge({
+        name: 'nonExpiryGauge',
+        help: 'expiry gauge help',
+        expires: false,
+        expiryPeriod: 1000,
+        defaultValue: 1
+    });
+
+    expiryGauge1.set(100, {});
+    t.equals(expiryGauge1.getValue(), 100, 'initial gauge set value');
+
+    expiryGauge2.set(100, {});
+    t.equals(expiryGauge2.getValue(), 100, 'initial gauge set value');
+
+    nonExpiryGauge.set(100, {});
+    t.equals(nonExpiryGauge.getValue(), 100, 'initial gauge set value');
+
+    var barrier = mod_vasync.barrier();
+    barrier.on('drain', function () { t.end(); });
+
+    barrier.start('expiryGauge1');
+    barrier.start('expiryGauge2');
+    barrier.start('nonExpiryGauge');
+
+    // Wait 3x the expiry period and check the value has been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(expiryGauge1.getValue(), 0, 'initial expiryGauge1 set value');
+        barrier.done('expiryGauge1');
+    }, 6000);
+    setTimeout(function () {
+        t.equals(expiryGauge2.getValue(), 25, 'initial expiryGauge2 set value');
+        barrier.done('expiryGauge2');
+    }, 3000);
+
+    // Wait 3x the expiry period and ensure the value has not been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(nonExpiryGauge.getValue(), 100,
+            'nonExpiryGauge value not reset');
+        barrier.done('nonExpiryGauge');
+    }, 3000);
+});
+
+mod_tape('counter expiry tests', function (t) {
+    var collector = mod_artedi.createCollector();
+    var expiryCounter1 = collector.counter({
+        name: 'expiryCounter1',
+        help: 'expiry counter help',
+        expires: true,
+        expiryPeriod: 2000
+    });
+
+    var expiryCounter2 = collector.counter({
+        name: 'expiryCounter2',
+        help: 'expiry counter help',
+        expires: true,
+        expiryPeriod: 1000,
+        defaultValue: 25
+    });
+
+    var nonExpiryCounter = collector.counter({
+        name: 'nonExpiryCounter',
+        help: 'expiry counter help',
+        expires: false,
+        expiryPeriod: 1000,
+        defaultValue: 1
+    });
+
+    expiryCounter1.add(100, {});
+    t.equals(expiryCounter1.getValue(), 100,
+        'initial expiryCounter1 set value');
+
+    expiryCounter2.add(100, {});
+    t.equals(expiryCounter2.getValue(), 125,
+        'initial expiryCounter2 set value');
+
+    nonExpiryCounter.increment({});
+    t.equals(nonExpiryCounter.getValue(), 2,
+        'initial nonExpiryCounter set value');
+
+    var barrier = mod_vasync.barrier();
+    barrier.on('drain', function () { t.end(); });
+
+    barrier.start('expiryCounter1');
+    barrier.start('expiryCounter2');
+    barrier.start('nonExpiryCounter');
+
+    // Wait 3x the expiry period and check the value has been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(expiryCounter1.getValue(), 0, 'expiryCounter1 value reset');
+        barrier.done('expiryCounter1');
+    }, 6000);
+    setTimeout(function () {
+        t.equals(expiryCounter2.getValue(), 25, 'expiryCounter2 value reset');
+        barrier.done('expiryCounter2');
+    }, 3000);
+
+    // Wait 3x the expiry period and ensure the value has not been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(nonExpiryCounter.getValue(), 2,
+            'nonExpiryCounter value not reset');
+        barrier.done('nonExpiryCounter');
+    }, 3000);
+});
-- 
2.21.0

