From eed33ff1da07738aa0460d6e069b9d2bb1c49e8b Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Thu, 14 Jun 2018 10:46:28 -0600
Subject: [PATCH] joyent/node-artedi#14 Allow for metrics in a MetricVector to
 be optionally expired or reset to a default value

---
 CHANGES.md           |  4 +++
 docs/API.md          | 26 ++++++++++++++++---
 docs/DESIGN.md       | 18 +++++++++++++
 docs/private_api.md  |  9 ++++++-
 lib/common.js        | 21 +++++++++++++--
 lib/metric.js        | 59 +++++++++++++++++++++++++++++++++++++++++-
 lib/metric_vector.js | 35 ++++++++++++++++++++++---
 lib/provider.js      |  3 ++-
 package.json         |  2 +-
 test/basic.test.js   | 61 ++++++++++++++++++++++++++++++++++++++++++++
 10 files changed, 225 insertions(+), 13 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 308219b..49d1c8f 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,10 @@
 ## Not yet released
 None
 
+## 1.4.0
+* #14 Allow for metrics in a MetricVector to be optionally expired or reset to a
+    default value
+
 ## 1.3.0
 * #13 add DTrace probes
 
diff --git a/docs/API.md b/docs/API.md
index f2d9b37..a714ebb 100644
--- a/docs/API.md
+++ b/docs/API.md
@@ -50,9 +50,16 @@ var counter = collector.counter({
 ### collector.gauge(opts) : Gauge
 Creates a new Gauge object with the given options (incl. labels). This call is
 idempotent. `opts` must include 'help' and 'name' fields, and may optionally
-include a 'labels' object.
-
-Example:
+include a 'labels' object. Additionally, gauges have an expiry feature such that
+the gauge is reset to a default value if the vaue is not otherwise updated for a
+certain time period. The expiry behavior is controlled with three fields: an
+'expires' boolean, an 'expiryPeriod' numeric value representing milliseconds,
+and a 'defaultValue' numeric value representing the default value of the
+gauge. IF not explicitly set to `true`, the value of `expires` defaults to
+`false`. The `expiryPeriod` default is 300000 milliseconds and the default value
+for `defaultValue` is `0`.
+
+Examples:
 ```javascript
 var gauge = collector.gauge({
     name: 'tcp_connections_available',
@@ -62,6 +69,19 @@ var gauge = collector.gauge({
     }
 });
 ```
+
+```javascript
+var gauge = collector.gauge({
+    name: 'postgres_vacuum_phase',
+    help: 'current phase of postgres table vacuum',
+    labels: {
+        database: 'mydatabase'
+    },
+    expires: true,
+    expiryPeriod: 120000,
+    defaultValue: 0
+});
+```
 ### collector.histogram(opts) : Histogram
 Creates a new Histogram object with the given options (incl. labels). This call
 is idempotent. `opts` must include 'help' and 'name' fields, and may optionally
diff --git a/docs/DESIGN.md b/docs/DESIGN.md
index d5d3525..b7281f3 100644
--- a/docs/DESIGN.md
+++ b/docs/DESIGN.md
@@ -5,6 +5,7 @@
     * [Log/Linear Buckets](#loglinear-buckets)
     * [Dynamic Labelling](#dynamic-labelling)
     * [Triggered Metrics](#triggered-metrics)
+    * [Metric Expiry](#metric-expiry)
     * [Children are leaf collectors](#children-are-leaf-collectors)
 * [Problems](#problems)
     * [Metric Cardinality](#metric-cardinality)
@@ -277,6 +278,23 @@ could be invoked. This is similar to existing solutions, like
 Basic triggered metrics (type 1 from above) are implemented in node-artedi
 version 1.1.0. Type 2 triggered metrics are not yet implemented.
 
+### Metric Expiry
+Metrics have an optional expiry feature that allows them to be reset to a
+default value after a given time period has passed in which the value of the
+metric is not otherwise updated. The expiry feature is currently only exposed
+for gauge types, but it is a feature of the more general metric and could be
+exposed for other types in the future. This feature was introduced in version
+1.4.0.
+
+An example use case for metric expiry is when a gauge is used to track the
+progress of a finite event or sequence of steps, but the event has no discrete
+final state that can be observed to indicate completion. Without intervention a
+gauge will continue providing a reading of the last known value indefinitely
+once the metric data is no longer extant. The expiry option provides a way to
+infer the completion of the event or sequence from the fact that the metric
+value and its associated timestamp are not updated within the observation period
+and then take action to reset the value to a default.
+
 ### Children are leaf collectors
 Children cannot be created from children. That is, a user can't call
 .gauge() on a Counter to create a child Gauge.
diff --git a/docs/private_api.md b/docs/private_api.md
index 3650894..4391ae9 100644
--- a/docs/private_api.md
+++ b/docs/private_api.md
@@ -30,18 +30,25 @@ The Metric class represents the value behind an individual metric. For example,
 a Metric could represent the count of HTTP POST requests made that resulted in a
 204 status code. This class has no knowledge of higher-level concepts like
 counters, gauges, or histograms. It is simply a class that maintains a numeric
-value, a timestamp, and associated labels.
+value, a timestamp, associated labels, and some information related to the
+optional expiry.
 
 | Variable | Type | Value |
 |----------|------|-----------------|
 |labels    |object|A map of label key/value pairs|
 |value     |number|A number that describes the current value of the metric|
 |timestamp |number|ISO 8601 timestamp, representing the time this metric was last modified|
+|expires   |boolean|Indicates if expiry is enabled for the metric|
+|expiryPeriod |number|Expiry time for the metric in milliseconds|
+|expiryTimer |object|Object representing the expiry timer|
+|defaultValue |number|A number that describes the default value of the metric|
 
 | Function | Arguments | Result | Return Value|
 |----------|-----------|--------|-------------|
 |add       |num     |Adds `num` to the `value` field of the metric. No positive/negative check is done on `num`|None|
+|set       |num     |Sets the `value` field of the metric to `num`. No positive/negative check is done on `num`|None|
 |getValue  |None   |Returns the local `value` field. Consumed by higher level functions |`number` type|
+|resetValue  |None   |Resets the `value` field of the metric to `defaultValue` |None|
 
 The `labels` that belong to each Metric are key/value pairs. There can
 be two Metrics that have the exact same key/value pairs, but they cannot
diff --git a/lib/common.js b/lib/common.js
index d1f95a0..bcb15f7 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -17,16 +17,33 @@ function constructor(options, obj) {
     mod_assert.string(options.help, 'options.help');
     mod_assert.optionalObject(options.labels, 'options.labels');
     mod_assert.optionalObject(options.parentLabels, 'options.parentLabels');
+    mod_assert.optionalBool(options.expires, 'options.expires');
+    mod_assert.optionalNumber(options.defaultValue, 'options.defaultValue');
+    mod_assert.optionalNumber(options.expiryPeriod, 'options.expiryPeriod');
 
     obj.staticLabels =
         mod_jsprim.mergeObjects(options.parentLabels, options.labels, null);
 
     obj.help = options.help;
     obj.name = options.name;
-    obj.metricVec = new lib_metric_vector.MetricVector({
+
+    var metricVectorOpts = {
         name: obj.name,
         labels: obj.staticLabels
-    });
+    };
+
+    if (obj.type === 'gauge') {
+        if (options.expires) {
+            metricVectorOpts.expires = options.expires;
+        }
+        if (options.defaultValue) {
+            metricVectorOpts.defaultValue = options.defaultValue;
+        }
+        if (options.expiryPeriod) {
+            metricVectorOpts.expiryPeriod = options.expiryPeriod;
+        }
+    }
+    obj.metricVec = new lib_metric_vector.MetricVector(metricVectorOpts);
 }
 
 /*
diff --git a/lib/metric.js b/lib/metric.js
index bd11950..eea4b4e 100644
--- a/lib/metric.js
+++ b/lib/metric.js
@@ -22,10 +22,36 @@ var lib_provider = require('./provider');
  */
 function Metric(options) {
     mod_assert.optionalObject(options, 'options');
+    mod_assert.optionalBool(options.expires, 'options.expires');
+    mod_assert.optionalNumber(options.defaultValue, 'options.defaultValue');
+    mod_assert.optionalNumber(options.expiryPeriod, 'options.expiryPeriod');
+
     this.labels = options ? options.labels : {};
-    this.value = 0;
+
+    this.expires = false;
+    if (options && options.expires) {
+        this.expires = options.expires;
+    }
+    this.defaultValue = 0;
+    if (options && options.defaultValue) {
+        this.defaultValue = options.defaultValue;
+    }
+    /*
+     * The expiryPeriod is time period after which the metric is reset to its
+     * default value if the metric timestamp is not updated due to a call to the
+     * add or set methods.
+     */
+    this.expiryPeriod = 300000;
+    if (options && options.expiryPeriod) {
+        this.expiryPeriod = options.expiryPeriod;
+    }
+
+    this.value = this.defaultValue;
+
     // ISO 8601 time when this metric was last updated.
     this.timestamp = null;
+
+    this.expiryTimer = null;
 }
 
 /*
@@ -37,30 +63,61 @@ Metric.prototype.add = function add(num) {
     mod_assert.number(num, 'num');
 
     var self = this;
+
+    if (this.expiryTimer) {
+        clearTimeout(this.expiryTimer);
+        this.expiryTimer = null;
+    }
+
     lib_provider['metric-add'].fire(function () {
         return ([num, self.labels]);
     });
 
     this.value += num;
     this.timestamp = new Date().toISOString();
+
+    if (this.expires) {
+        this.expiryTimer =
+            setTimeout(this.resetValue.bind(this), this.expiryPeriod);
+    }
 };
 
 Metric.prototype.set = function set(num) {
     mod_assert.number(num, 'num');
 
     var self = this;
+
+    if (this.expiryTimer) {
+        clearTimeout(this.expiryTimer);
+        this.expiryTimer = null;
+    }
+
     lib_provider['metric-set'].fire(function () {
         return ([num, self.labels]);
     });
 
     this.value = num;
     this.timestamp = new Date().toISOString();
+
+    if (this.expires) {
+        this.expiryTimer =
+            setTimeout(this.resetValue.bind(this), this.expiryPeriod);
+    }
 };
 
 Metric.prototype.getValue = function getValue() {
     return (this.value);
 };
 
+Metric.prototype.resetValue = function resetValue() {
+    lib_provider['metric-reset'].fire(function () {
+        return ([this.defaultValue, this.labels]);
+    });
+
+    this.value = this.defaultValue;
+    this.timestamp = new Date().toISOString();
+};
+
 module.exports = {
     Metric: Metric
 };
diff --git a/lib/metric_vector.js b/lib/metric_vector.js
index a60f974..b218ee7 100644
--- a/lib/metric_vector.js
+++ b/lib/metric_vector.js
@@ -28,12 +28,27 @@ var lib_utils = require('./utils');
  *
  */
 function MetricVector(opts) {
+    mod_assert.object(opts, 'options');
     mod_assert.string(opts.name, 'opts.name');
     mod_assert.optionalObject(opts.labels, 'opts.labels');
+    mod_assert.optionalBool(opts.expires, 'opts.expires');
+    mod_assert.optionalNumber(opts.defaultValue, 'opts.defaultValue');
+    mod_assert.optionalNumber(opts.expiryPeriod, 'opts.expiryPeriod');
 
     this.name = opts.name;
     this.metrics = {};
 
+    this.expires = false;
+    if (opts.expires) {
+        this.expires = opts.expires;
+    }
+    if (opts.defaultValue) {
+        this.defaultValue = opts.defaultValue;
+    }
+    if (opts.expiryPeriod) {
+        this.expiryPeriod = opts.expiryPeriod;
+    }
+
     this.staticLabels = opts.labels;
     if (this.staticLabels) {
         this.staticLabels = lib_utils.trim(this.staticLabels);
@@ -65,9 +80,14 @@ MetricVector.prototype.addBuckets = function addBuckets(newBuckets) {
 MetricVector.prototype.getDefault = function getDefault() {
     // defaultMetric is a metric with only static labels (if provided).
     if (!this.metrics['default']) {
-        this.metrics['default'] = new lib_metric.Metric({
-            labels: this.staticLabels
-        });
+        var metricOptions = {labels: this.staticLabels, expires: this.expires};
+        if (this.defaultValue) {
+            metricOptions.defaultValue = this.defaultValue;
+        }
+        if (this.expiryPeriod) {
+            metricOptions.expiryPeriod = this.expiryPeriod;
+        }
+        this.metrics['default'] = new lib_metric.Metric(metricOptions);
     }
     return (this.metrics['default']);
 };
@@ -114,7 +134,14 @@ MetricVector.prototype.createWithLabels = function createWithLabels(labels) {
         }
     }
 
-    this.metrics[lhash] = new lib_metric.Metric({labels: copy});
+    var metricOptions = {labels: copy, expires: this.expires};
+    if (this.defaultValue) {
+        metricOptions.defaultValue = this.defaultValue;
+    }
+    if (this.expiryPeriod) {
+        metricOptions.expiryPeriod = this.expiryPeriod;
+    }
+    this.metrics[lhash] = new lib_metric.Metric(metricOptions);
     return (this.metrics[lhash]);
 };
 
diff --git a/lib/provider.js b/lib/provider.js
index 64d1756..7b56869 100644
--- a/lib/provider.js
+++ b/lib/provider.js
@@ -27,7 +27,8 @@ var PROBES = {
     /* metric operations */
     /* [value, labels] */
     'metric-add': ['int', 'json'],
-    'metric-set': ['int', 'json']
+    'metric-set': ['int', 'json'],
+    'metric-reset': ['int', 'json']
 };
 var PROVIDER;
 
diff --git a/package.json b/package.json
index af633b8..44047aa 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "artedi",
-  "version": "1.3.0",
+  "version": "1.4.0",
   "description": "a metric client library",
   "main": "lib/collector.js",
   "dependencies": {
diff --git a/test/basic.test.js b/test/basic.test.js
index 5455121..959d99f 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -665,3 +665,64 @@ mod_tape('log/linear bucket tests', function (t) {
 
     t.end();
 });
+
+mod_tape('gauge expiry tests', function (t) {
+    var collector = mod_artedi.createCollector();
+    var expiryGauge1 = collector.gauge({
+        name: 'expiryGauge1',
+        help: 'expiry gauge help',
+        expires: true,
+        expiryPeriod: 1000
+    });
+
+    var expiryGauge2 = collector.gauge({
+        name: 'expiryGauge2',
+        help: 'expiry gauge help',
+        expires: true,
+        expiryPeriod: 500,
+        defaultValue: 25
+    });
+
+    var nonExpiryGauge = collector.gauge({
+        name: 'nonExpiryGauge',
+        help: 'expiry gauge help',
+        expires: false,
+        expiryPeriod: 500,
+        defaultValue: 1
+    });
+
+    expiryGauge1.set(100, {});
+    t.equals(expiryGauge1.getValue(), 100, 'initial gauge set value');
+
+    expiryGauge2.set(100, {});
+    t.equals(expiryGauge2.getValue(), 100, 'initial gauge set value');
+
+    nonExpiryGauge.set(100, {});
+    t.equals(nonExpiryGauge.getValue(), 100, 'initial gauge set value');
+
+    var barrier = mod_vasync.barrier();
+    barrier.on('drain', function () { t.end(); });
+
+    barrier.start('expiryGauge1');
+    barrier.start('expiryGauge2');
+    barrier.start('nonExpiryGauge');
+
+    // Wait 3x the expiry period and check the value has been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(expiryGauge1.getValue(), 0, 'initial expiryGauge1 set value');
+        barrier.done('expiryGauge1');
+    }, 1500);
+    setTimeout(function () {
+        t.equals(expiryGauge2.getValue(), 25, 'initial expiryGauge2 set value');
+        barrier.done('expiryGauge2');
+    }, 1000);
+
+    // Wait 3x the expiry period and ensure the value has not been reset to the
+    // default
+    setTimeout(function () {
+        t.equals(nonExpiryGauge.getValue(), 100,
+            'nonExpiryGauge value not reset');
+        barrier.done('nonExpiryGauge');
+    }, 1000);
+});
-- 
2.21.0

