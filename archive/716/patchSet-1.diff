commit 0edf5b074acccdab6007f0f7aa0f7564f5a5b3d6 (refs/changes/16/716/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-10-17T14:05:32-07:00 (3 years ago)
    
    CNS-169 generate "<uuid>.cmon.<suffix>" hostnames for CMON

diff --git a/lib/vm-to-zones.js b/lib/vm-to-zones.js
index efbe1b9..7db7cdf 100644
--- a/lib/vm-to-zones.js
+++ b/lib/vm-to-zones.js
@@ -152,11 +152,26 @@ function addInstance(zones, vm, ent, config) {
 		}
 	}
 
+	function addCName(name, target) {
+		if (!zones[ent.zone])
+			zones[ent.zone] = {};
+		if (!zones[ent.zone][name])
+			zones[ent.zone][name] = [];
+		var recs = zones[ent.zone][name];
+		recs.push({
+			constructor: 'CNAME',
+			args: [target]
+		});
+	}
+
 	var revName = primaryName(vm, config);
 
 	var n = vm.uuid + '.inst.' + vm.owner.uuid;
 	addName(n);
 
+	n = vm.uuid + '.cmon';
+	addCName(n, 'cmon.' + ent.zone);
+
 	if (config.use_login && vm.owner.login.length < 63) {
 		addName(vm.uuid + '.inst.' + dnsify(vm.owner.login));
 	}
diff --git a/test/unit/update-stream.test.js b/test/unit/update-stream.test.js
index d31e389..f40ab75 100644
--- a/test/unit/update-stream.test.js
+++ b/test/unit/update-stream.test.js
@@ -120,7 +120,7 @@ test('records in zones are correct', function (t) {
 	t.deepEquals(Object.keys(vmRecs).sort(),
 	    ['3.2.1.in-addr.arpa', 'foo']);
 	t.deepEquals(Object.keys(vmRecs['foo']).sort(),
-	    ['abc123.inst.def432']);
+	    ['abc123.cmon', 'abc123.inst.def432']);
 	t.deepEquals(Object.keys(vmRecs['3.2.1.in-addr.arpa']).sort(),
 	    ['4']);
 
@@ -229,9 +229,10 @@ test('incrementals are correct', function (t) {
 	rems = rems.map(function (r) {
 		return (JSON.parse(r));
 	});
-	t.strictEqual(rems.length, 2);
+	t.strictEqual(rems.length, 3);
 	t.strictEqual(rems[0].name, 'abc123.inst.def432');
 	t.strictEqual(rems[1].name, 'abc123.inst.def432');
+	t.strictEqual(rems[2].name, 'abc123.cmon');
 
 	t.end();
 });
@@ -768,7 +769,7 @@ test('records in zones are correct', function (t) {
 	t.deepEquals(Object.keys(vmRecs).sort(),
 	    ['3.2.1.in-addr.arpa', 'foo']);
 	t.deepEquals(Object.keys(vmRecs['foo']).sort(),
-	    ['abc123.inst.def432']);
+	    ['abc123.cmon', 'abc123.inst.def432']);
 	t.deepEquals(Object.keys(vmRecs['3.2.1.in-addr.arpa']).sort(),
 	    ['4']);
 
diff --git a/test/unit/vm-to-zones.test.js b/test/unit/vm-to-zones.test.js
index 6208fe5..7248570 100644
--- a/test/unit/vm-to-zones.test.js
+++ b/test/unit/vm-to-zones.test.js
@@ -41,7 +41,8 @@ test('basic single container', function (t) {
 	var zones = buildZonesFromVm(vm, config, log);
 	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
 
-	t.deepEqual(Object.keys(zones['foo']), ['abc123.inst.def432']);
+	t.deepEqual(Object.keys(zones['foo']), ['abc123.inst.def432',
+	    'abc123.cmon']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['abc123.inst.def432'];
@@ -49,6 +50,10 @@ test('basic single container', function (t) {
 	    {constructor: 'A', args: ['1.2.3.4']},
 	    {constructor: 'TXT', args: ['abc123']}
 	]);
+	var cmon = zones['foo']['abc123.cmon'];
+	t.deepEqual(cmon, [
+	    {constructor: 'CNAME', args: ['cmon.foo']}
+	]);
 	var rev = zones['3.2.1.in-addr.arpa']['4'];
 	t.deepEqual(rev, [
 	    {constructor: 'PTR', args: ['abc123.inst.def432.foo']}
@@ -81,10 +86,11 @@ test('cloudapi instance', function (t) {
 	    ]
 	};
 	var zones = buildZonesFromVm(vm, config, log);
-	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
 
-	t.deepEqual(Object.keys(zones['foo']), [
-	    'abc123.inst.def432', 'cloudapi.svc.def432', 'cloudapi']);
+	t.deepEqual(Object.keys(zones['foo']).sort(), [
+	    'abc123.cmon', 'abc123.inst.def432', 'cloudapi',
+	    'cloudapi.svc.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['cloudapi'];
@@ -125,10 +131,10 @@ test('with use_alias', function (t) {
 	    ]
 	};
 	var zones = buildZonesFromVm(vm, config, log);
-	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
 
-	t.deepEqual(Object.keys(zones['foo']),
-	    ['abc123.inst.def432', 'test.inst.def432']);
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['abc123.cmon', 'abc123.inst.def432', 'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['test.inst.def432'];
@@ -170,10 +176,10 @@ test('with use_login', function (t) {
 	    ]
 	};
 	var zones = buildZonesFromVm(vm, config, log);
-	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
 
-	t.deepEqual(Object.keys(zones['foo']),
-	    ['abc123.inst.def432', 'abc123.inst.bar']);
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['abc123.inst.bar'];
@@ -216,11 +222,11 @@ test('with use_alias and use_login', function (t) {
 	    ]
 	};
 	var zones = buildZonesFromVm(vm, config, log);
-	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
 
-	t.deepEqual(Object.keys(zones['foo']),
-	    ['abc123.inst.def432', 'abc123.inst.bar', 'test.inst.def432',
-	     'test.inst.bar']);
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
+	    'test.inst.bar', 'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['test.inst.bar'];
@@ -310,8 +316,8 @@ test('multi-zone', function (t) {
 	    ['1.2.3.in-addr.arpa', '3.2.1.in-addr.arpa', 'bar', 'foo']);
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
-	    ['abc123.inst.bar', 'abc123.inst.def432', 'test.inst.bar',
-	    'test.inst.def432']);
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
+	    'test.inst.bar', 'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['bar']).sort(),
 	    Object.keys(zones['foo']).sort());
 
@@ -372,8 +378,8 @@ test('multi-zone, single PTRs', function (t) {
 	    ['1.2.3.in-addr.arpa', '3.2.1.in-addr.arpa', 'bar', 'baz', 'foo']);
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
-	    ['abc123.inst.bar', 'abc123.inst.def432', 'test.inst.bar',
-	    'test.inst.def432']);
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
+	    'test.inst.bar', 'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['bar']).sort(),
 	    Object.keys(zones['foo']).sort());
 
@@ -464,8 +470,9 @@ test('service with srvs', function (t) {
 	var zones = buildZonesFromVm(vm, config, log);
 	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
 
-	t.deepEqual(Object.keys(zones['foo']),
-	    ['abc123.inst.def432', 'test.inst.def432', 'svc1.svc.def432']);
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['abc123.cmon', 'abc123.inst.def432', 'svc1.svc.def432',
+	    'test.inst.def432']);
 
 	var fwd = zones['foo']['test.inst.def432'];
 	t.deepEqual(fwd, [
