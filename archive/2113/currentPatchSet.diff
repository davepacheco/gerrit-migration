commit bb7facd68315ba23c9014855ed77c6e80b04999f (refs/changes/13/2113/2)
Author: David Pacheco <dap@joyent.com>
Date:   2017-06-19T10:49:23-07:00 (2 years, 4 months ago)
    
    MANTA-3099 alarm on long-running PostgreSQL queries
    MANTA-3298 `manta-adm alarm details` should report MANTA_STORAGE_ID for ...
    MANTA-3299 manta log lingering alarms are too aggressive
    MANTA-3277 Manatee postgres disk usage exceeding zone dataset quota
    MANTA-3308 want amon probe for storage disk usage
    MANTA-2696 amon probes for pg_dump watch the wrong log file
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Brian Bennett <brian.bennett@joyent.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/alarm_metadata/probe_templates/common.yaml b/alarm_metadata/probe_templates/common.yaml
index a1ef0b8..7f35ef5 100644
--- a/alarm_metadata/probe_templates/common.yaml
+++ b/alarm_metadata/probe_templates/common.yaml
@@ -116,7 +116,7 @@
         -
             type: cmd
             config:
-                cmd: "test ! $(find /var/log/manta/upload -type f | wc -l) -gt 0"
+                cmd: "test ! $(find /var/log/manta/upload -type f -mmin +120 | wc -l) -gt 0"
                 interval: 300
                 threshold: 5
                 period: 1800
diff --git a/alarm_metadata/probe_templates/postgres.yaml b/alarm_metadata/probe_templates/postgres.yaml
index 458a8c1..04659cd 100644
--- a/alarm_metadata/probe_templates/postgres.yaml
+++ b/alarm_metadata/probe_templates/postgres.yaml
@@ -129,7 +129,7 @@
         -
             type: log-scan
             config:
-                path: "/var/log/manatee/pg_dump.log"
+                path: "/var/log/manatee/pgdump.log"
                 match:
                     pattern: fatal
                 threshold: 1
@@ -226,3 +226,41 @@
             There is likely no immediate action required, but it is recommended
             to verify the health of this shard using "manatee-adm".  You may
             need to rebuild a deposed peer.
+
+-
+    event: upset.manta.postgres.long_query
+    scope:
+        service: postgres
+    checks:
+        -
+            type: cmd
+            config:
+                cmd: "/opt/local/bin/psql -U postgres -c \"SELECT *, NOW() - query_start AS elapsed FROM pg_stat_activity WHERE state != 'idle' AND NOW() - query_start > interval '120 seconds'\""
+                interval: 60
+                timeout: 30
+                stdoutMatch:
+                    type: regex
+                    invert: true
+                    pattern: "\\(0 rows\\)"
+    ka:
+        title: Long-running query on metadata shard
+        description: >-
+            A database query has been running for several minutes.  Queries
+            executed by Manta itself are designed to run quickly, so
+            long-running queries are often indicative of an unhealthy shard.
+            It is also possible that an administrator is running an expensive
+            query.
+        severity: major
+        response: No automated response will be taken.
+        impact: >-
+            Besides being indicative of an unhealthy shard, long-running queries
+            can impact the performance of other database queries.  They can also
+            result in bloat in both the in-memory and on-disk database
+            representations, resulting in significantly degraded performance of
+            future queries.
+        action: >-
+            The alarm details include information about the long-running query.
+            If the query is being run by an administrator, it should probably be
+            cancelled.  Otherwise, assess the health of the shard and determine
+            why the query is taking so long to run.
+
diff --git a/alarm_metadata/probe_templates/storage.yaml b/alarm_metadata/probe_templates/storage.yaml
index 4260013..3a872e9 100644
--- a/alarm_metadata/probe_templates/storage.yaml
+++ b/alarm_metadata/probe_templates/storage.yaml
@@ -135,3 +135,29 @@
         action: >-
             Resolve the underlying issue.
 
+-
+    event: upset.manta.storage.filesystem_almost_full
+    legacyName: storage dataset space running low
+    scope:
+        service: storage
+    checks:
+        -
+            type: disk-usage
+            config:
+                path: "/manta"
+                threshold: "15%"
+                interval: 3600
+    ka:
+        title: Storage filesystem almost full
+        description: "A storage instance's filesystem is running low on free space"
+        severity: critical
+        response: No automated response will be taken.
+        impact: >-
+            If the filesystem exceeds 90% utilization, Manta will stop using the
+            affected storage instance.  This can result in imbalanced storage
+            allocation across the fleet.  If enough servers are affected by this
+            issue, Manta may become unavailable for new writes.
+        action: >-
+            Identify the cause of excessive disk usage and resolve the
+            underlying issue.
+
diff --git a/alarm_metadata/probe_templates/storage_gzs.yaml b/alarm_metadata/probe_templates/storage_gzs.yaml
index 5787a93..31d69b3 100644
--- a/alarm_metadata/probe_templates/storage_gzs.yaml
+++ b/alarm_metadata/probe_templates/storage_gzs.yaml
@@ -69,7 +69,7 @@
         -
             type: cmd
             config:
-                cmd: "test ! $(find /var/log/manta/upload -type f | wc -l) -gt 0"
+                cmd: "test ! $(find /var/log/manta/upload -type f -mmin +120 | wc -l) -gt 0"
                 interval: 300
                 threshold: 5
                 period: 1800
diff --git a/config/services/postgres/service.json.production b/config/services/postgres/service.json.production
index f6e24de..d7e80c9 100644
--- a/config/services/postgres/service.json.production
+++ b/config/services/postgres/service.json.production
@@ -1,6 +1,6 @@
 {
 	"params": {
 		"ram": 32768,
-                "quota": 3000
+                "quota": 4000
 	}
 }
diff --git a/lib/adm.js b/lib/adm.js
index cd434d7..5876623 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -1647,6 +1647,14 @@ maAdm.prototype.alarmPrint = function alarmPrint(args)
 			    fltdetail.signal ? fltdetail.signal : 'none');
 			fprintf(out, '    probe cmd:       %s\n',
 			    JSON.stringify(fltdetail.cmd));
+			if (fltdetail.env) {
+				fprintf(out, '    probe cmd env:\n');
+				jsprim.forEachKey(fltdetail.env,
+				    function (k, v) {
+					fprintf(out, '        %s = %s\n',
+					    k, JSON.stringify(v));
+				    });
+			}
 
 			fprintf(out, '%s', formatCmdOutput(
 			    '    ', 'stdout', fltdetail.stdout));
