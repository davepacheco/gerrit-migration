From c0607ebe0dd0ce22855260044a304c50cf12e0f9 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 22 Jan 2018 13:42:43 -0800
Subject: [PATCH] AGENT-1036 cn-agent should use 'zlogin -S' instead of
 chroot-gtar if available

---
 bin/docker-copy.js            |   5 +-
 lib/app.js                    |   3 +-
 lib/common.js                 |   6 +-
 lib/docker-stdio.js           | 317 ++++++++++++++++++++++++++--------
 lib/task_agent/task_agent.js  |  16 +-
 lib/task_agent/task_runner.js |   3 +-
 lib/task_agent/task_worker.js |   3 +-
 lib/tasks/docker_copy.js      |   5 +-
 lib/tasks/machine_boot.js     |  21 ++-
 lib/tasks/machine_destroy.js  |  15 ++
 package.json                  |   2 +-
 11 files changed, 308 insertions(+), 88 deletions(-)

diff --git a/bin/docker-copy.js b/bin/docker-copy.js
index 4d9f0af..f32141b 100644
--- a/bin/docker-copy.js
+++ b/bin/docker-copy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var net = require('net');
@@ -21,7 +21,8 @@ process.on('message', function (message) {
         mode: message.mode,
         admin_ip: message.admin_ip,
         no_overwrite_dir: message.no_overwrite_dir,
-        timeoutSeconds: message.timeoutSeconds || SERVER_CLOSE_TIMEOUT
+        timeoutSeconds: message.timeoutSeconds || SERVER_CLOSE_TIMEOUT,
+        sysinfo: message.sysinfo
     };
 
     dockerstdio.setupDockerFileStream(opts, function (err, response) {
diff --git a/lib/app.js b/lib/app.js
index a5a1069..1f4d890 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var async = require('async');
@@ -448,6 +448,7 @@ App.prototype.start = function () {
                     return;
                 }
                 self.sysinfo = sysinfo;
+                agent.setSysinfo(sysinfo);
                 cb();
             });
         },
diff --git a/lib/common.js b/lib/common.js
index c70306c..1fab6ff 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
  *
  */
 
+var assert = require('assert-plus');
 var fs = require('fs');
 var execFile = require('child_process').execFile;
 var EffluentLogger = require('effluent-logger');
@@ -107,6 +108,9 @@ function modifyConfig(configPath, key, value, callback) {
 }
 
 function zoneadm(zone, addtlArgs, callback) {
+    assert.string(zone, 'zone');
+    assert.arrayOfString(addtlArgs, 'addtlArgs');
+    assert.func(callback, 'callback');
     var args = ['-z', zone];
     args.push.apply(args, addtlArgs);
     execFile('/usr/sbin/zoneadm', args, { encoding: 'utf8' },
diff --git a/lib/docker-stdio.js b/lib/docker-stdio.js
index bf7f4df..8aaf0f0 100644
--- a/lib/docker-stdio.js
+++ b/lib/docker-stdio.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -18,18 +18,20 @@
 var assert = require('assert-plus');
 var async = require('async');
 var bunyan = require('bunyan');
-var once = require('once');
 var child_process = require('child_process');
+var execFile = child_process.execFile;
 var fs = require('fs');
 var http = require('http');
 var net = require('net');
+var once = require('once');
 var path = require('path');
 var pty = require('pty.js');
 var spawn = child_process.spawn;
-var execFile = child_process.execFile;
+var vasync = require('vasync');
 var vmadm = require('vmadm');
 
 var LineStream = require('lstream');
+var common = require('./common');
 var wait_flag = require('./update-wait-flag');
 
 var DATA_TIMEOUT_MS = 30 * 1000;
@@ -38,6 +40,14 @@ var commands = {};
 var CTRL_P = '\u0010';
 var CTRL_Q = '\u0011';
 
+/*
+ * We use `zlogin -S` to safely enter a zone in order to copy files in
+ * or out. This feature was introduced in the platform given
+ * by SAFE_ZLOGIN_PI. We should block attempts to copy to or from
+ * stopped containers residing on servers older than that.
+ */
+var SAFE_ZLOGIN_PI = '20160922T144810Z';
+
 /**
  * Sets up a mechanism for starting a server to relay the contents of a file.
  */
@@ -50,6 +60,7 @@ function setupDockerFileStream(opts, callback) {
     assert.optionalBool(opts.no_overwrite_dir, 'opts.no_overwrite_dir');
     assert.string(opts.mode, 'opts.mode');
     assert.string(opts.req_id, 'opts.req_id');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
 
     opts.log = bunyan.createLogger({name: 'docker-stdio', req_id: opts.req_id});
 
@@ -188,6 +199,8 @@ function createDockerFileReadStreamServer(opts, callback) {
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.admin_ip, 'opts.admin_ip');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
+    assert.string(opts.sysinfo['Live Image'], 'opts.sysinfo[\'Live Image\']');
 
     var log = opts.log;
     var uuid = opts.uuid;
@@ -235,6 +248,23 @@ function createDockerFileReadStreamServer(opts, callback) {
         uuid: opts.uuid
     };
 
+    var tryUnmount = once(
+        function _tryUnmount() {
+            common.zoneadm(uuid, ['unmount'],
+            function _readStreamTryZoneadmUnmount(err) {
+                if (err) {
+                    log.error('error (%s) running zoneadm unmount on %s',
+                        err.code, uuid);
+                }
+            });
+        });
+
+    var closeTcpServer = once(function _closeTcpServer() {
+        if (tcpServer) {
+            tcpServer.close();
+        }
+    });
+
     async.waterfall([
         /**
          * Capture zone state, as this will dictate which method we use to do
@@ -250,7 +280,16 @@ function createDockerFileReadStreamServer(opts, callback) {
                 next();
             });
         },
-
+        function _checkVersion(next) {
+            if (zoneState !== 'running' &&
+                opts.sysinfo['Live Image'] < SAFE_ZLOGIN_PI)
+            {
+                next(getDockerCopyStoppedContainerNoPlatformSupportError(
+                    opts.sysinfo['Live Image']));
+            } else {
+                next();
+            }
+        },
         /**
          * Create TCP Server which will output the archive stream
          */
@@ -263,7 +302,7 @@ function createDockerFileReadStreamServer(opts, callback) {
             serverTimeout = setTimeout(function () {
                 log.warn('Closing stream tcpServer after ' +
                      timeoutSeconds + ' seconds without connection');
-                tcpServer.close();
+                closeTcpServer();
             }, timeoutSeconds * 1000);
 
             if (zoneState === 'running') {
@@ -284,7 +323,7 @@ function createDockerFileReadStreamServer(opts, callback) {
     ], function (err) {
         if (err) {
             clearTimeout(serverTimeout);
-            tcpServer.close();
+            closeTcpServer();
             callback(err);
             return;
         }
@@ -292,17 +331,12 @@ function createDockerFileReadStreamServer(opts, callback) {
         callback(null, tcpServer, { containerPathStat: containerPathStat });
     });
 
-    function onDataTimeout() {
-        log.error('onConnectionZoneRunning(read): ' +
-                'data timeout; terminating archive process');
-        streamProc.kill();
-    }
 
     function onReadConnectionZoneRunning(socket) {
         clearTimeout(serverTimeout);
 
         socket.on('close', function () {
-            tcpServer.close();
+            closeTcpServer();
         });
 
         var tar = ['/native/usr/bin/gtar', 'cf', '-'];
@@ -327,14 +361,26 @@ function createDockerFileReadStreamServer(opts, callback) {
         });
 
         streamProc.on('exit', function (err) {
-            tcpServer.close();
+            closeTcpServer();
             if (err) {
                 log.error(err);
             }
         });
 
+        streamProc.on('error', function _onReadRunningProcError(err) {
+            if (err) {
+                log.error(err);
+            }
+            closeTcpServer();
+        });
+
         streamProc.stdout.setTimeout(DATA_TIMEOUT_MS);
-        streamProc.stdout.on('timeout', onDataTimeout);
+        streamProc.stdout.on('timeout', function _onDataTimeoutUnmount() {
+            log.error('onConnectionZoneRunning(read): ' +
+                    'data timeout; terminating archive process');
+            streamProc.kill();
+            tryUnmount();
+        });
         streamProc.stdout.pipe(socket);
     }
 
@@ -342,43 +388,87 @@ function createDockerFileReadStreamServer(opts, callback) {
         clearTimeout(serverTimeout);
 
         socket.on('close', function () {
-            tcpServer.close();
+            tryUnmount();
+            closeTcpServer();
         });
 
-        var chrootTarCmd = __dirname + '/../bin/chroot-gtar';
-        var chrootTarArgs = [
-            '-r', zonepath,
-            '-t', '-',
-            '-m', 'create'
-        ];
-
-        if (norm.match(new RegExp('^/'))) {
-            norm = norm.slice(1);
-        }
+        var tar = ['/usr/bin/gtar', 'cf', '-'];
 
-        chrootTarArgs.push('-C', path.join('root', path.dirname(norm)),
-                           path.basename(norm));
+        tar.push('-C', '/a' + path.dirname(norm), path.basename(norm));
 
-        log.info({ norm: norm, chrootTarArgs: chrootTarArgs }, 'tar args');
+        var zloginTarCmd = '/usr/sbin/zlogin';
+        var zloginTarArgs = ['-S', '-Q', uuid];
 
-        streamProc =
-            spawn(chrootTarCmd, chrootTarArgs, { encoding: 'binary' });
+        Array.prototype.push.apply(zloginTarArgs, tar);
 
-        streamProc.stderr.on('data', function (data) {
-            log.error({ errorOutput: data.toString() },
-                      'chroot-gtar error output');
-        });
+        log.info({ zloginTarArgs: zloginTarArgs },
+                 'createDockerFileReadStreamServer ' +
+                 'onConnectionZoneNotRunning zloginTarArgs');
+
+        vasync.waterfall([
+            function _doReadZoneadmMount(next) {
+                common.zoneadm(uuid, ['mount'],
+                function _onReadStreamOnMount(err) {
+                    if (err) {
+                        log.error({ err: err }, 'error zoneadm mounting');
+                        next(err);
+                        return;
+                    }
+                    next();
+                });
+            },
+            function _doReadStream(next) {
+                next = once(next);
+
+                streamProc =
+                    spawn(zloginTarCmd, zloginTarArgs, { encoding: 'binary' });
+
+                streamProc.on('error', function _onReadProcError(err) {
+                    if (err) {
+                        log.error(err);
+                        next(err);
+                    }
+                    closeTcpServer();
+                });
+
+                streamProc.stderr.on('data',
+                function _readProcStderrData(data) {
+                    log.error({ errorOutput: data.toString() },
+                              'zlogin error output');
+                });
+
+                streamProc.on('exit',
+                function _onReadNotRunningProcExit(code, signal) {
+                    if (code) {
+                        log.error(
+                            'docker copy tar write' +
+                            ' stream process exited with %d',
+                            code);
+                    }
+                    next();
+                });
+
+                streamProc.stdout.setTimeout(DATA_TIMEOUT_MS);
+                streamProc.stdout.on('timeout', function _onDataTimeout() {
+                    log.error('onConnectionZoneRunning(read): ' +
+                            'data timeout; terminating archive process');
+                    streamProc.kill();
+                    tryUnmount();
+                }
+);
+                streamProc.stdout.pipe(socket);
 
-        streamProc.on('exit', function (err) {
-            tcpServer.close();
+                streamProc.stdout.on('end', function _onReadEnd() {
+                    next();
+                });
+            }
+        ], function (err) {
             if (err) {
                 log.error(err);
             }
+            closeTcpServer();
+            tryUnmount();
         });
-
-        streamProc.stdout.setTimeout(DATA_TIMEOUT_MS);
-        streamProc.stdout.on('timeout', onDataTimeout);
-        streamProc.stdout.pipe(socket);
     }
 }
 
@@ -397,6 +487,8 @@ function createDockerFileWriteStreamServer(opts, callback) {
     assert.string(opts.admin_ip, 'opts.admin_ip');
     assert.optionalBool(opts.no_overwrite_dir, 'opts.no_overwrite_dir');
     assert.object(opts.log, 'log');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
+    assert.string(opts.sysinfo['Live Image'], 'opts.sysinfo[\'Live Image\']');
 
     var log = opts.log;
     var uuid = opts.uuid;
@@ -446,6 +538,23 @@ function createDockerFileWriteStreamServer(opts, callback) {
         uuid: opts.uuid
     };
 
+    var tryUnmount = once(
+        function _tryUnmount() {
+            common.zoneadm(uuid, ['unmount'],
+            function _writeStreamTryZoneadmUnmount(err) {
+                if (err) {
+                    log.info('error (%s) running zoneadm unmount on %s',
+                        err.code, uuid);
+                }
+            });
+        });
+
+    var closeTcpServer = once(function _closeTcpServer() {
+        if (tcpServer) {
+            tcpServer.close();
+        }
+    });
+
     async.waterfall([
         /**
          * Capture zone state, as this will dictate which method we use to do
@@ -461,6 +570,16 @@ function createDockerFileWriteStreamServer(opts, callback) {
                 next();
             });
         },
+        function _checkVersion(next) {
+            if (zoneState !== 'running' &&
+                opts.sysinfo['Live Image'] < SAFE_ZLOGIN_PI)
+            {
+                next(getDockerCopyStoppedContainerNoPlatformSupportError(
+                    opts.sysinfo['Live Image']));
+            } else {
+                next();
+            }
+        },
         /**
          * Create TCP Server which will receive the archive stream
          */
@@ -473,13 +592,13 @@ function createDockerFileWriteStreamServer(opts, callback) {
             serverTimeout = setTimeout(function () {
                 log.warn('Closing stream tcpServer after ' +
                      timeoutSeconds + ' seconds without connection');
-                tcpServer.close();
+                closeTcpServer();
             }, timeoutSeconds * 1000);
 
             if (zoneState === 'running') {
-                tcpServer.on('connection', onConnectionZoneRunning);
+                tcpServer.on('connection', onWriteConnectionZoneRunning);
             } else {
-                tcpServer.on('connection', onConnectionZoneNotRunning);
+                tcpServer.on('connection', onWriteConnectionZoneNotRunning);
             }
             tcpServer.listen(0, opts.admin_ip);
             tcpServer.on('error', function (err) {
@@ -494,16 +613,15 @@ function createDockerFileWriteStreamServer(opts, callback) {
     ], function (err) {
         if (err) {
             clearTimeout(serverTimeout);
-            tcpServer.close();
+            closeTcpServer();
             callback(err);
             return;
         }
         callback(null, tcpServer);
     });
 
-    return;
 
-    function onConnectionZoneRunning(socket) {
+    function onWriteConnectionZoneRunning(socket) {
         clearTimeout(serverTimeout);
 
         var overwrite = opts.no_overwrite_dir ?
@@ -527,58 +645,96 @@ function createDockerFileWriteStreamServer(opts, callback) {
             if (err) {
                 log.error(err);
             }
-            tcpServer.close();
+            closeTcpServer();
+        });
+
+        streamProc.on('error', function _onWriteProcError(err) {
+            if (err) {
+                log.error(err);
+            }
+            closeTcpServer();
         });
 
         socket.pipe(streamProc.stdin);
 
         socket.on('close', function () {
-            tcpServer.close();
+            closeTcpServer();
         });
     }
 
-    function onConnectionZoneNotRunning(socket) {
+    function onWriteConnectionZoneNotRunning(socket) {
         clearTimeout(serverTimeout);
 
         var overwrite = opts.no_overwrite_dir ?
-        '--no-overwrite-dir' : '--overwrite';
+            '--no-overwrite-dir' : '--overwrite';
 
-        var chrootTarCmd = __dirname + '/../bin/chroot-gtar';
-        var chrootTarArgs = [
-            '-r', zonepath,
-            '-t', '-',
-            '-m', 'extract',
-            '-C', path.join('root', norm)
-            ];
+        var tar = ['/usr/bin/gtar', 'xf', '-', overwrite, '-C', '/a' + norm];
 
-        chrootTarArgs.push(overwrite);
+        var zloginTarCmd = '/usr/sbin/zlogin';
+        var zloginTarArgs = ['-S', '-Q', uuid];
 
+        Array.prototype.push.apply(zloginTarArgs, tar);
 
-        log.info({ chroot: chrootTarArgs }, 'chroot-gtar args');
+        vasync.waterfall([
+            function _doWriteZoneadmMount(next) {
+                common.zoneadm(uuid, ['mount'],
+                function _onWriteStreamZoneadmMount(err) {
+                    if (err) {
+                        log.error({ err: err }, 'error zoneadm mounting');
+                        next(err);
+                    }
+                    next();
+                });
+            },
+            function _doWriteStream(next) {
+                next = once(next);
+
+                var streamProc =
+                    spawn(zloginTarCmd, zloginTarArgs,
+                        { encoding: 'binary' });
+
+                streamProc.stderr.on('data',
+                function _writeProcStderrData(data) {
+                    log.error({ errorOutput: data.toString() },
+                        'zlogin error output');
+                });
+
+                streamProc.on('error', function _onWriteProcError(err) {
+                    if (err) {
+                        log.error(err);
+                        next(err);
+                    }
+                });
 
-        var streamProc =
-            spawn(chrootTarCmd, chrootTarArgs, { encoding: 'binary' });
+                streamProc.on('exit', function _onWriteProcExit(code, signal) {
+                    if (code) {
+                        log.error(
+                            'docker copy tar write' +
+                            ' stream process exited with %d', code);
+                    }
+                    next();
+                });
 
-        streamProc.stderr.on('data', function (data) {
-            log.error({ errorOutput: data.toString() },
-                      'chroot-gtar error output');
-        });
+                socket.pipe(streamProc.stdin);
 
-        streamProc.stdout.on('data', function (data) {
-            console.log(data.toString());
-        });
+                socket.on('close', function _onCloseEnd(err) {
+                    if (err) {
+                        log.error(err);
+                        next(err);
+                    }
+                });
 
-        streamProc.on('exit', function (err) {
+                socket.on('end', function _onWriteEnd() {
+                    next();
+                });
+
+            }
+        ], function (err) {
             if (err) {
                 log.error(err);
             }
-            tcpServer.close();
-        });
-
-        socket.pipe(streamProc.stdin);
-
-        socket.on('close', function () {
-            tcpServer.close();
+            closeTcpServer();
+            tryUnmount();
         });
     }
 }
@@ -1315,6 +1471,15 @@ function dockerPathStatFromPath(opts) {
 }
 
 
+function getDockerCopyStoppedContainerNoPlatformSupportError(version) {
+    var err = new Error(
+        'docker cp on stopped container not supported ' +
+        'on platform image ' + version);
+    err.restCode = 'DockerCopyStoppedContainerNoPlatformSupport';
+    return err;
+}
+
+
 module.exports = {
     setupDockerExecution: setupDockerExecution,
     setupDockerFileStream: setupDockerFileStream
diff --git a/lib/task_agent/task_agent.js b/lib/task_agent/task_agent.js
index 1438d84..41c53fa 100644
--- a/lib/task_agent/task_agent.js
+++ b/lib/task_agent/task_agent.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var util = require('util');
@@ -16,6 +16,7 @@ var TaskRunner = require('./task_runner');
 var imgadm = require('../imgadm');
 var bunyan = require('bunyan');
 var restify = require('restify');
+var jsprim = require('jsprim');
 var os = require('os');
 var async = require('async');
 var EventEmitter = require('events').EventEmitter;
@@ -140,6 +141,7 @@ TaskAgent.prototype.setupTaskRoutes = function (defns) {
             req_host: req.headers.host,
             task: req.params.task,
             params: req.params.params,
+            sysinfo: self.sysinfo,
             finish: function () {
                 fcb();
             },
@@ -181,4 +183,16 @@ TaskAgent.prototype.setupTaskHistory = function () {
 };
 
 
+TaskAgent.prototype.setSysinfo = function (sysinfo) {
+    var self = this;
+    self.sysinfo = jsprim.deepCopy(sysinfo);
+};
+
+
+TaskAgent.prototype.getSysinfo = function (sysinfo) {
+    var self = this;
+    return jsprim.deepCopy(self.sysinfo);
+};
+
+
 module.exports = TaskAgent;
diff --git a/lib/task_agent/task_runner.js b/lib/task_agent/task_runner.js
index f8d6e11..7a049ce 100644
--- a/lib/task_agent/task_runner.js
+++ b/lib/task_agent/task_runner.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -35,6 +35,7 @@ function TaskRunner(options) {
     this.log = options.log;
     this.env = options.env;
     this.timeoutSeconds = options.timeoutSeconds;
+    this.sysinfo = options.sysinfo;
 
     if (!fs.existsSync(this.logdir)) {
         mkdirp.sync(this.logdir, parseInt('0755', 8));
diff --git a/lib/task_agent/task_worker.js b/lib/task_agent/task_worker.js
index cfa5a3a..2ee6eab 100644
--- a/lib/task_agent/task_worker.js
+++ b/lib/task_agent/task_worker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var taskModule = process.argv[2];
@@ -92,6 +92,7 @@ function start(req, taskspath) {
     task = new TaskClass(req);
     task.req = req;
     task.taskspath = taskspath;
+    task.sysinfo = req.sysinfo;
 
     task.on('event', function (name, event) {
         log.info({
diff --git a/lib/tasks/docker_copy.js b/lib/tasks/docker_copy.js
index 84f267a..490c765 100644
--- a/lib/tasks/docker_copy.js
+++ b/lib/tasks/docker_copy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var Task = require('../task_agent/task');
@@ -61,7 +61,8 @@ function start(callback) {
             admin_ip: adminIp,
             path: path,
             mode: mode,
-            no_overwrite_dir: self.req.params.no_overwrite_dir
+            no_overwrite_dir: self.req.params.no_overwrite_dir,
+            sysinfo: self.sysinfo
         });
 
         dockerCopy.on('message', once(function (message) {
diff --git a/lib/tasks/machine_boot.js b/lib/tasks/machine_boot.js
index 16b5126..6fa5ada 100644
--- a/lib/tasks/machine_boot.js
+++ b/lib/tasks/machine_boot.js
@@ -99,6 +99,12 @@ function start(callback) {
         });
     }
 
+    /*
+     * Try to unmount the zone first. `vmadm` does not like booting or
+     * destroying mounted zones. If the unmount fails, it probably means it was
+     * already unmounted. In any case, we should proceed with destruction.
+     */
+
     // If 'update' param exists, update before starting the vm.
     if (self.req.params.hasOwnProperty('update')) {
         self.log.info('updating vm before starting');
@@ -114,11 +120,22 @@ function start(callback) {
                 }
                 return;
             }
-            startVM();
+            common.zoneadm(uuid, ['unmount'],
+            function _onZoneadmUnmountUpdate(err) {
+                if (err) {
+                    self.log.error({ err: err }, 'zoneadm unmount error');
+                }
+                startVM();
+            });
         });
 
     } else {
-        startVM();
+        common.zoneadm(uuid, ['unmount'], function _onZoneAdmUnmount(err) {
+            if (err) {
+                self.log.error({ err: err }, 'zoneadm unmount error');
+            }
+            startVM();
+        });
     }
 }
 
diff --git a/lib/tasks/machine_destroy.js b/lib/tasks/machine_destroy.js
index a38f103..ba42c2e 100644
--- a/lib/tasks/machine_destroy.js
+++ b/lib/tasks/machine_destroy.js
@@ -91,6 +91,21 @@ function start() {
                     });
                 });
             },
+            function unmountVm(_, cb) {
+                /*
+                 * Try to unmount the zone first. `vmadm` does not like
+                 * destroying mounted zones. If the unmount fails, it probably
+                 * means it was already unmounted. In any case, we should
+                 * proceed with destruction.
+                 */
+                common.zoneadm(uuid, ['unmount'],
+                function _onZoneadmUnmount(err) {
+                    if (err) {
+                        self.log.error({ err: err }, 'zoneadm unmount error');
+                    }
+                    cb();
+                });
+            },
             function deleteVm(_, cb) {
                 /* this will pass the error (if any) to _pipelineCompleted */
                 vmadm.delete(vmadmOpts, cb);
diff --git a/package.json b/package.json
index 8c123f6..a0c0e0b 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.0.1",
+  "version": "2.1.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

