commit efce379ebd7634bd81c70bbafc15977bc76b9179 (refs/changes/77/3177/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2018-01-09T00:10:07-08:00 (1 year, 9 months ago)
    
    AGENT-1036 cn-agent should use 'zlogin -S' instead of chroot-gtar if available

diff --git a/bin/docker-copy.js b/bin/docker-copy.js
index 4d9f0af..f32141b 100644
--- a/bin/docker-copy.js
+++ b/bin/docker-copy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var net = require('net');
@@ -21,7 +21,8 @@ process.on('message', function (message) {
         mode: message.mode,
         admin_ip: message.admin_ip,
         no_overwrite_dir: message.no_overwrite_dir,
-        timeoutSeconds: message.timeoutSeconds || SERVER_CLOSE_TIMEOUT
+        timeoutSeconds: message.timeoutSeconds || SERVER_CLOSE_TIMEOUT,
+        sysinfo: message.sysinfo
     };
 
     dockerstdio.setupDockerFileStream(opts, function (err, response) {
diff --git a/lib/app.js b/lib/app.js
index a5a1069..1f4d890 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var async = require('async');
@@ -448,6 +448,7 @@ App.prototype.start = function () {
                     return;
                 }
                 self.sysinfo = sysinfo;
+                agent.setSysinfo(sysinfo);
                 cb();
             });
         },
diff --git a/lib/docker-stdio.js b/lib/docker-stdio.js
index bf7f4df..e163303 100644
--- a/lib/docker-stdio.js
+++ b/lib/docker-stdio.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -27,6 +27,7 @@ var path = require('path');
 var pty = require('pty.js');
 var spawn = child_process.spawn;
 var execFile = child_process.execFile;
+var vasync = require('vasync');
 var vmadm = require('vmadm');
 
 var LineStream = require('lstream');
@@ -37,6 +38,7 @@ var DATA_TIMEOUT_MS = 30 * 1000;
 var commands = {};
 var CTRL_P = '\u0010';
 var CTRL_Q = '\u0011';
+var ZLOGINS_PI = '20160922T144810Z';
 
 /**
  * Sets up a mechanism for starting a server to relay the contents of a file.
@@ -50,6 +52,7 @@ function setupDockerFileStream(opts, callback) {
     assert.optionalBool(opts.no_overwrite_dir, 'opts.no_overwrite_dir');
     assert.string(opts.mode, 'opts.mode');
     assert.string(opts.req_id, 'opts.req_id');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
 
     opts.log = bunyan.createLogger({name: 'docker-stdio', req_id: opts.req_id});
 
@@ -188,6 +191,7 @@ function createDockerFileReadStreamServer(opts, callback) {
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.admin_ip, 'opts.admin_ip');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
 
     var log = opts.log;
     var uuid = opts.uuid;
@@ -250,7 +254,19 @@ function createDockerFileReadStreamServer(opts, callback) {
                 next();
             });
         },
-
+        function (next) {
+            if (zoneState !== 'running' &&
+                opts.sysinfo['Live Image'] < ZLOGINS_PI)
+            {
+                next(new Error(
+                        'docker cp on stopped container not supported ' +
+                        'on this platform'));
+                return;
+            } else {
+                next();
+                return;
+            }
+        },
         /**
          * Create TCP Server which will output the archive stream
          */
@@ -269,7 +285,8 @@ function createDockerFileReadStreamServer(opts, callback) {
             if (zoneState === 'running') {
                 tcpServer.on('connection', onReadConnectionZoneRunning);
             } else {
-                tcpServer.on('connection', onReadConnectionZoneNotRunning);
+                tcpServer.on('connection',
+                    onReadConnectionZoneNotRunningUseZlogin);
             }
 
             tcpServer.on('error', function (err) {
@@ -292,10 +309,21 @@ function createDockerFileReadStreamServer(opts, callback) {
         callback(null, tcpServer, { containerPathStat: containerPathStat });
     });
 
+    function tryUnmount() {
+        var args = { uuid: uuid, operation: 'unmount', log: log };
+        zoneadm(args, function (err, stdout, stderr) {
+            if (err) {
+                log.warn('error (%s) running `zoneadm unmount` on %s',
+                    error.code, uuid);
+            }
+        });
+    }
+
     function onDataTimeout() {
         log.error('onConnectionZoneRunning(read): ' +
                 'data timeout; terminating archive process');
         streamProc.kill();
+        tryUnmount();
     }
 
     function onReadConnectionZoneRunning(socket) {
@@ -338,47 +366,61 @@ function createDockerFileReadStreamServer(opts, callback) {
         streamProc.stdout.pipe(socket);
     }
 
-    function onReadConnectionZoneNotRunning(socket) {
+    function onReadConnectionZoneNotRunningUseZlogin(socket) {
         clearTimeout(serverTimeout);
 
         socket.on('close', function () {
+            tryUnmount();
             tcpServer.close();
         });
 
-        var chrootTarCmd = __dirname + '/../bin/chroot-gtar';
-        var chrootTarArgs = [
-            '-r', zonepath,
-            '-t', '-',
-            '-m', 'create'
-        ];
-
-        if (norm.match(new RegExp('^/'))) {
-            norm = norm.slice(1);
-        }
+        var tar = ['/usr/bin/gtar', 'cf', '-'];
 
-        chrootTarArgs.push('-C', path.join('root', path.dirname(norm)),
-                           path.basename(norm));
+        tar.push('-C', '/a' + path.dirname(norm), path.basename(norm));
 
-        log.info({ norm: norm, chrootTarArgs: chrootTarArgs }, 'tar args');
+        var zloginTarCmd = '/usr/sbin/zlogin';
+        var zloginTarArgs = ['-S', '-Q', uuid];
 
-        streamProc =
-            spawn(chrootTarCmd, chrootTarArgs, { encoding: 'binary' });
+        Array.prototype.push.apply(zloginTarArgs, tar);
 
-        streamProc.stderr.on('data', function (data) {
-            log.error({ errorOutput: data.toString() },
-                      'chroot-gtar error output');
-        });
+        log.info({ zloginTarArgs: zloginTarArgs },
+                 'createDockerFileReadStreamServer ' +
+                 'onConnectionZoneNotRunningUseZlogin zloginTarArgs');
+
+        vasync.waterfall([
+            function _doReadZoneadmMount(next) {
+                zoneadm({ uuid: uuid, operation: 'mount', log: log },
+                    function (err) {
+                        if (err) {
+                            log.warn({ err: err }, 'error zoneadm mounting');
+                        }
+                        next();
+                    });
+            },
+            function _doReadStream(next) {
+                streamProc =
+                    spawn(zloginTarCmd, zloginTarArgs, { encoding: 'binary' });
+
+                streamProc.stderr.on('data', function (data) {
+                    log.error({ errorOutput: data.toString() },
+                              'zlogin error output');
+                });
+
+                streamProc.on('exit', function (err) {
+                    tcpServer.close();
+                    if (err) {
+                        log.error(err);
+                    }
+                    next(err);
+                });
 
-        streamProc.on('exit', function (err) {
-            tcpServer.close();
-            if (err) {
-                log.error(err);
+                streamProc.stdout.setTimeout(DATA_TIMEOUT_MS);
+                streamProc.stdout.on('timeout', onDataTimeout);
+                streamProc.stdout.pipe(socket);
             }
+        ], function (err) {
+            tryUnmount();
         });
-
-        streamProc.stdout.setTimeout(DATA_TIMEOUT_MS);
-        streamProc.stdout.on('timeout', onDataTimeout);
-        streamProc.stdout.pipe(socket);
     }
 }
 
@@ -397,6 +439,7 @@ function createDockerFileWriteStreamServer(opts, callback) {
     assert.string(opts.admin_ip, 'opts.admin_ip');
     assert.optionalBool(opts.no_overwrite_dir, 'opts.no_overwrite_dir');
     assert.object(opts.log, 'log');
+    assert.object(opts.sysinfo, 'opts.sysinfo');
 
     var log = opts.log;
     var uuid = opts.uuid;
@@ -461,6 +504,19 @@ function createDockerFileWriteStreamServer(opts, callback) {
                 next();
             });
         },
+        function (next) {
+            if (zoneState !== 'running' &&
+                opts.sysinfo['Live Image'] < ZLOGINS_PI)
+            {
+                next(new Error(
+                        'docker cp on stopped container not supported ' +
+                        'on internal platform'));
+                return;
+            } else {
+                next();
+                return;
+            }
+        },
         /**
          * Create TCP Server which will receive the archive stream
          */
@@ -477,9 +533,10 @@ function createDockerFileWriteStreamServer(opts, callback) {
             }, timeoutSeconds * 1000);
 
             if (zoneState === 'running') {
-                tcpServer.on('connection', onConnectionZoneRunning);
+                tcpServer.on('connection', onWriteConnectionZoneRunning);
             } else {
-                tcpServer.on('connection', onConnectionZoneNotRunning);
+                tcpServer.on('connection',
+                    onWriteConnectionZoneNotRunningUseZlogin);
             }
             tcpServer.listen(0, opts.admin_ip);
             tcpServer.on('error', function (err) {
@@ -503,7 +560,17 @@ function createDockerFileWriteStreamServer(opts, callback) {
 
     return;
 
-    function onConnectionZoneRunning(socket) {
+    function tryUnmount() {
+        var args = { uuid: uuid, operation: 'unmount', log: log };
+        zoneadm(args, function (err, stdout, stderr) {
+            if (err) {
+                log.warn('error (%s) running zoneadm unmount on %s',
+                    error.code, uuid);
+            }
+        });
+    }
+
+    function onWriteConnectionZoneRunning(socket) {
         clearTimeout(serverTimeout);
 
         var overwrite = opts.no_overwrite_dir ?
@@ -537,7 +604,63 @@ function createDockerFileWriteStreamServer(opts, callback) {
         });
     }
 
-    function onConnectionZoneNotRunning(socket) {
+    function onWriteConnectionZoneNotRunningUseZlogin(socket) {
+        clearTimeout(serverTimeout);
+
+        socket.on('close', function () {
+            tryUnmount();
+            tcpServer.close();
+        });
+
+        var overwrite = opts.no_overwrite_dir ?
+            '--no-overwrite-dir' : '--overwrite';
+
+        var tar = ['/usr/bin/gtar', 'xf', '-', overwrite, '-C', '/a' + norm];
+
+        var zloginTarCmd = '/usr/sbin/zlogin';
+        var zloginTarArgs = ['-S', '-Q', uuid];
+
+        Array.prototype.push.apply(zloginTarArgs, tar);
+
+        vasync.waterfall([
+            function _doReadZoneadmMount(next) {
+                zoneadm({ uuid: uuid, operation: 'mount', log: log },
+                    function (err) {
+                        if (err) {
+                            log.warn({ err: err }, 'error zoneadm mounting');
+                        }
+                        next();
+                    });
+            },
+            function _doWriteStream(next) {
+                var streamProc =
+                    spawn(zloginTarCmd, zloginTarArgs,
+                        { encoding: 'binary' });
+
+                streamProc.stderr.on('data', function (data) {
+                    log.error({ errorOutput: data.toString() },
+                        'zlogin error output');
+                });
+
+                streamProc.on('exit', function (err) {
+                    if (err) {
+                        log.error(err);
+                    }
+                    tcpServer.close();
+                });
+
+                socket.pipe(streamProc.stdin);
+
+                socket.on('close', function () {
+                    tcpServer.close();
+                });
+            }
+        ], function (err) {
+            tryUnmount();
+        });
+    }
+
+    function onConnectionZoneNotRunningUseChroot(socket) {
         clearTimeout(serverTimeout);
 
         var overwrite = opts.no_overwrite_dir ?
@@ -1315,6 +1438,24 @@ function dockerPathStatFromPath(opts) {
 }
 
 
+function zoneadm(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.string(opts.operation, 'opts.operation');
+    assert.optionalFunc(callback, 'callback');
+
+    var ZONEADM = '/usr/sbin/zoneadm';
+    var args = ['-z', opts.uuid, opts.operation];
+
+    execFile(ZONEADM, args, function (err, stdout, stderr) {
+        if (callback) {
+            callback(err, stdout, stderr);
+        }
+    });
+}
+
+
 module.exports = {
     setupDockerExecution: setupDockerExecution,
     setupDockerFileStream: setupDockerFileStream
diff --git a/lib/task_agent/task_agent.js b/lib/task_agent/task_agent.js
index 1438d84..41c53fa 100644
--- a/lib/task_agent/task_agent.js
+++ b/lib/task_agent/task_agent.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var util = require('util');
@@ -16,6 +16,7 @@ var TaskRunner = require('./task_runner');
 var imgadm = require('../imgadm');
 var bunyan = require('bunyan');
 var restify = require('restify');
+var jsprim = require('jsprim');
 var os = require('os');
 var async = require('async');
 var EventEmitter = require('events').EventEmitter;
@@ -140,6 +141,7 @@ TaskAgent.prototype.setupTaskRoutes = function (defns) {
             req_host: req.headers.host,
             task: req.params.task,
             params: req.params.params,
+            sysinfo: self.sysinfo,
             finish: function () {
                 fcb();
             },
@@ -181,4 +183,16 @@ TaskAgent.prototype.setupTaskHistory = function () {
 };
 
 
+TaskAgent.prototype.setSysinfo = function (sysinfo) {
+    var self = this;
+    self.sysinfo = jsprim.deepCopy(sysinfo);
+};
+
+
+TaskAgent.prototype.getSysinfo = function (sysinfo) {
+    var self = this;
+    return jsprim.deepCopy(self.sysinfo);
+};
+
+
 module.exports = TaskAgent;
diff --git a/lib/task_agent/task_runner.js b/lib/task_agent/task_runner.js
index f8d6e11..7a049ce 100644
--- a/lib/task_agent/task_runner.js
+++ b/lib/task_agent/task_runner.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -35,6 +35,7 @@ function TaskRunner(options) {
     this.log = options.log;
     this.env = options.env;
     this.timeoutSeconds = options.timeoutSeconds;
+    this.sysinfo = options.sysinfo;
 
     if (!fs.existsSync(this.logdir)) {
         mkdirp.sync(this.logdir, parseInt('0755', 8));
diff --git a/lib/task_agent/task_worker.js b/lib/task_agent/task_worker.js
index cfa5a3a..2ee6eab 100644
--- a/lib/task_agent/task_worker.js
+++ b/lib/task_agent/task_worker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var taskModule = process.argv[2];
@@ -92,6 +92,7 @@ function start(req, taskspath) {
     task = new TaskClass(req);
     task.req = req;
     task.taskspath = taskspath;
+    task.sysinfo = req.sysinfo;
 
     task.on('event', function (name, event) {
         log.info({
diff --git a/lib/tasks/docker_copy.js b/lib/tasks/docker_copy.js
index 84f267a..490c765 100644
--- a/lib/tasks/docker_copy.js
+++ b/lib/tasks/docker_copy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var Task = require('../task_agent/task');
@@ -61,7 +61,8 @@ function start(callback) {
             admin_ip: adminIp,
             path: path,
             mode: mode,
-            no_overwrite_dir: self.req.params.no_overwrite_dir
+            no_overwrite_dir: self.req.params.no_overwrite_dir,
+            sysinfo: self.sysinfo
         });
 
         dockerCopy.on('message', once(function (message) {
