From 7e2a7ddf9021671bb25f1bd2933f65f5824a3f1f Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 12 Apr 2019 16:59:02 -0700
Subject: [PATCH] TRITON-1403 drop cloudapi "test mode" (aka config.test,
 CLOUDAPI_TEST_MODE) Reviewed by: Marsell Kukuljevic <marsell@joyent.com>

---
 lib/app.js                       |  7 +---
 lib/machines.js                  | 16 +-------
 lib/tests.js                     | 46 ----------------------
 package.json                     |  2 +-
 sapi_manifests/cloudapi/template | 31 ++++++---------
 test/common.js                   |  4 +-
 test/keys.test.js                | 14 ++++---
 test/machines.70.test.js         | 20 +---------
 test/machines.71.test.js         | 20 ++--------
 test/machines.72.test.js         | 17 +--------
 test/machines.73.test.js         | 18 ++-------
 test/machines.80.test.js         | 13 +------
 test/machines.94.test.js         | 50 ++++++------------------
 test/machines.test.js            | 40 +++++---------------
 test/nics.test.js                |  4 +-
 test/runtests                    |  6 +--
 test/tests.test.js               | 65 --------------------------------
 17 files changed, 59 insertions(+), 314 deletions(-)
 delete mode 100644 lib/tests.js
 delete mode 100644 test/tests.test.js

diff --git a/lib/app.js b/lib/app.js
index 5072b1b..fd4bd98 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -55,7 +55,6 @@ var networkMiddleware = require('./middleware/networks');
 var audit = require('./audit');
 var auditLogger = require('./audit_logger');
 var rules = require('./rules');
-var tests = require('./tests');
 var volumeEndpoints = require('./endpoints/volumes');
 
 // Account users, roles and policies:
@@ -559,10 +558,6 @@ module.exports = {
                 volumeEndpoints.mount(server, userThrottle(config, 'volumes'));
             }
 
-            if (config.test) {
-                tests.mount(server, emptyThrottle(), config);
-            }
-
             server.on('after', auditLogger({
                 log: log.child({component: 'audit'})
             }));
diff --git a/lib/machines.js b/lib/machines.js
index 24fa1e8..eda4ffa 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -843,20 +843,6 @@ function getCreateOptions(req) {
         opts.nic_driver = img.nic_driver;
     }
 
-    // Intentionally not documented, at least until we are checking on
-    // vmapi that owner is allowed to specify a given server:
-    // PUBAPI-724: Only allow in test mode
-    if (params.server_uuid && req.config.test) {
-        opts.server_uuid = params.server_uuid;
-    }
-
-    // Another alternative to provide server_uuid, (which I mostly use
-    // locally to run node-smartdc tests w/o having to hardcode server_uuid
-    // into sdc-createmachine):
-    if (process.env.SERVER_UUID) {
-        opts.server_uuid = process.env.SERVER_UUID;
-    }
-
     if (params.locality) {
         opts.locality = params.locality;
     }
diff --git a/lib/tests.js b/lib/tests.js
deleted file mode 100644
index 4bd177e..0000000
--- a/lib/tests.js
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2016, Joyent, Inc.
- */
-
-/*
- * This file contains functions useful during the testing of Cloudapi. They
- * are only active when the configuration has Cloudapi in testing mode.
- */
-
-var assert = require('assert-plus');
-
-
-function throwException(req, res, next) {
-    // non-existent function invocation should throw exception
-    req.asdasdadasdasd();
-    next();
-}
-
-
-function mount(server, before, config) {
-    assert.object(server);
-    assert.ok(before);
-    assert.ok(config);
-
-    if (!config.test) {
-        return server;
-    }
-
-    server.get({
-        path: '/:account/tests/throw_exception',
-        name: 'ThrowException'
-    }, before, throwException);
-
-    return server;
-}
-
-
-module.exports = {
-    mount: mount
-};
diff --git a/package.json b/package.json
index 411d7fc..fad2cdb 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "Triton CloudAPI",
-    "version": "9.5.0",
+    "version": "9.5.1",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/sapi_manifests/cloudapi/template b/sapi_manifests/cloudapi/template
index 703da3f..71794e4 100644
--- a/sapi_manifests/cloudapi/template
+++ b/sapi_manifests/cloudapi/template
@@ -158,19 +158,6 @@
     {{/account_allowed_dcs}}
     "account_allowed_dcs_msg": "{{{account_allowed_dcs_msg}}}",
 
-    "bleeding_edge_features": {
-        {{#CLOUDAPI_BLEEDING_EDGE_FEATURES}}
-        "{{{.}}}": true,
-        {{/CLOUDAPI_BLEEDING_EDGE_FEATURES}}
-        "": false
-    },
-    "bleeding_edge_login_whitelist": {
-        {{#CLOUDAPI_BLEEDING_EDGE_LOGIN_WHITELIST}}
-        "{{{.}}}": true,
-        {{/CLOUDAPI_BLEEDING_EDGE_LOGIN_WHITELIST}}
-        "": false
-    },
-
     {{^fabric_cfg}}
     "fabrics_enabled": false,
     {{/fabric_cfg}}
@@ -198,10 +185,16 @@
     "experimental_cloudapi_automount_nfs_shared_volumes": {{{experimental_cloudapi_automount_nfs_shared_volumes}}},
     {{/experimental_cloudapi_automount_nfs_shared_volumes}}
 
-    {{^CLOUDAPI_TEST_MODE}}
-    "test": false
-    {{/CLOUDAPI_TEST_MODE}}
-    {{#CLOUDAPI_TEST_MODE}}
-    "test": {{{CLOUDAPI_TEST_MODE}}}
-    {{/CLOUDAPI_TEST_MODE}}
+    "bleeding_edge_features": {
+        {{#CLOUDAPI_BLEEDING_EDGE_FEATURES}}
+        "{{{.}}}": true,
+        {{/CLOUDAPI_BLEEDING_EDGE_FEATURES}}
+        "": false
+    },
+    "bleeding_edge_login_whitelist": {
+        {{#CLOUDAPI_BLEEDING_EDGE_LOGIN_WHITELIST}}
+        "{{{.}}}": true,
+        {{/CLOUDAPI_BLEEDING_EDGE_LOGIN_WHITELIST}}
+        "": false
+    }
 }
diff --git a/test/common.js b/test/common.js
index 1617ab0..c3b46dd 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -511,8 +511,6 @@ function loadServer(cb) {
         return cb(null, serverObj);
     }
 
-    CONFIG.test = true;
-
     return app.createServer(CONFIG, function (err, server) {
         if (err) {
             return cb(err);
diff --git a/test/keys.test.js b/test/keys.test.js
index 341bf21..f3698d0 100644
--- a/test/keys.test.js
+++ b/test/keys.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var test = require('@smaller/tap').test;
@@ -186,10 +186,14 @@ test('CreateKey (attested) wrong cert', function (t) {
     };
 
     CLIENT.post('/my/keys', key, function (err, req, res, body) {
-        t.ok(err);
-        t.equal(err.statusCode, 409);
-        t.equal(err.restCode, 'InvalidArgument');
-        t.ok(err.message);
+        t.ok(err, 'expect error, got: ' + err);
+        if (err) {
+            t.equal(err.statusCode, 409,
+                'expect 409 status, got ' + err.statusCode);
+            t.equal(err.restCode, 'InvalidArgument', 'expect ');
+            t.ok(err.message, 'expect some error message, got ' +
+                JSON.stringify(err.message));
+        }
 
         t.end();
     });
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index 621aebb..ac02576 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -24,7 +24,6 @@ var mod_config = require('../lib/config.js');
 
 var SDC_128 = common.sdc_128_package;
 
-var SERVER_UUID;
 var IMAGE_UUID;
 var MACHINE_UUID;
 
@@ -55,15 +54,6 @@ test('setup', function (t) {
 });
 
 
-test('Get test server', function (t) {
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
-
 test('Get test image', function (t) {
     common.getTestImage(CLIENT, function (err, img) {
         t.ifError(err, 'getTestImage');
@@ -79,8 +69,7 @@ test('Create machine with invalid package', function (t) {
     var obj = {
         dataset: IMAGE_UUID,
         package: uuid().substr(0, 7),
-        name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID
+        name: 'a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
@@ -95,8 +84,7 @@ test('Create machine with invalid package', function (t) {
 test('CreateMachine w/o dataset fails', function (t) {
     var obj = {
         package: SDC_128.name,
-        name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID
+        name: 'a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
@@ -113,7 +101,6 @@ test('Create machine with invalid network', function (t) {
         dataset: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         networks: [uuid()]
     };
 
@@ -132,7 +119,6 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -271,7 +257,6 @@ test('Create KVM machine', function (t) {
             image: KVM_IMAGE_UUID,
             package: common.kvm_128_package.name,
             name: 'a' + uuid().substr(0, 7),
-            server_uuid: SERVER_UUID,
             brand: 'kvm'
         };
 
@@ -337,7 +322,6 @@ test('Create bhyve machine', function (t) {
         image: BHYVE_IMAGE_UUID,
         package: common.bhyve_128_package.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         brand: 'bhyve'
     };
 
diff --git a/test/machines.71.test.js b/test/machines.71.test.js
index 8f7e632..e7c239d 100644
--- a/test/machines.71.test.js
+++ b/test/machines.71.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var util = require('util');
@@ -22,7 +22,6 @@ var checkNotFound = common.checkNotFound;
 
 var SDC_128 = common.sdc_128_package;
 
-var SERVER_UUID;
 var MACHINE_UUID;
 var IMAGE_UUID;
 var IMAGE_JOB_UUID;
@@ -48,15 +47,6 @@ test('setup', function (t) {
 });
 
 
-test('Get test server', function (t) {
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
-
 test('Get test image', function (t) {
     common.getTestImage(CLIENT, function (err, img) {
         t.ifError(err, 'getTestImage');
@@ -72,8 +62,7 @@ test('Create machine with invalid package', function (t) {
     var obj = {
         dataset: IMAGE_UUID,
         'package': uuid().substr(0, 7),
-        name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID
+        name: 'a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -88,8 +77,7 @@ test('Create machine with invalid package', function (t) {
 test('CreateMachine w/o dataset fails', function (t) {
     var obj = {
         package: SDC_128.name,
-        name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID
+        name: 'a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -106,7 +94,6 @@ test('Create machine with invalid network', function (t) {
         dataset: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         networks: [uuid()]
     };
 
@@ -125,7 +112,6 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
diff --git a/test/machines.72.test.js b/test/machines.72.test.js
index d48302c..6350449 100644
--- a/test/machines.72.test.js
+++ b/test/machines.72.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var util = require('util');
@@ -25,7 +25,6 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var PROVISIONABLE_NET_UUID;
-var SERVER_UUID;
 var IMAGE_UUID;
 
 var ROLE_NAME;
@@ -64,15 +63,6 @@ test('setup', function (t) {
 });
 
 
-test('Get test server', function (t) {
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
-
 test('Get test image', function (t) {
     common.getTestImage(CLIENT, function (err, img) {
         t.ifError(err, 'getTestImage');
@@ -103,7 +93,6 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -188,8 +177,7 @@ test('7.3 networks format should fail', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        networks: [ { ipv4_uuid: PROVISIONABLE_NET_UUID, ipv4_count: 1 } ],
-        server_uuid: SERVER_UUID
+        networks: [ { ipv4_uuid: PROVISIONABLE_NET_UUID, ipv4_count: 1 } ]
     };
 
     CLIENT.post({
@@ -304,7 +292,6 @@ test('sub-user tests', function (t) {
                 image: IMAGE_UUID,
                 package: SDC_128.name,
                 name: 'a' + uuid().substr(0, 7),
-                server_uuid: SERVER_UUID,
                 firewall_enabled: true
             };
 
diff --git a/test/machines.73.test.js b/test/machines.73.test.js
index c649231..973164c 100644
--- a/test/machines.73.test.js
+++ b/test/machines.73.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var util = require('util');
@@ -22,7 +22,6 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var IMAGE_UUID;
-var SERVER_UUID;
 var PROVISIONABLE_NET_UUID;
 var MACHINE_UUID;
 
@@ -43,8 +42,7 @@ function provisionWithInvalidNetwork(t, networks, errMessage) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        networks: networks,
-        server_uuid: SERVER_UUID
+        networks: networks
     };
 
     CLIENT.post({
@@ -75,15 +73,6 @@ test('setup', function (t) {
 });
 
 
-test('Get test server', function (t) {
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
-
 test('Get test image', function (t) {
     common.getTestImage(CLIENT, function (err, img) {
         t.ifError(err, 'getTestImage');
@@ -115,8 +104,7 @@ test('CreateMachine: new networks format', function (t) {
         name: 'a' + uuid().substr(0, 7),
         networks: [ {
             ipv4_uuid: PROVISIONABLE_NET_UUID
-        } ],
-        server_uuid: SERVER_UUID
+        } ]
     };
 
     machinesCommon.createMachine(t, CLIENT, obj, function (_, machineUuid) {
diff --git a/test/machines.80.test.js b/test/machines.80.test.js
index ad8f3bd..8e845eb 100644
--- a/test/machines.80.test.js
+++ b/test/machines.80.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var util = require('util');
@@ -22,7 +22,6 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var IMAGE_UUID;
-var SERVER_UUID;
 var PROVISIONABLE_NET_UUID;
 var MACHINE_UUID;
 
@@ -47,15 +46,6 @@ test('setup', function (t) {
 });
 
 
-test('Get test server', function (t) {
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
-
 test('Get test image', function (t) {
     common.getTestImage(CLIENT, function (err, img) {
         t.ifError(err, 'getTestImage');
@@ -71,7 +61,6 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
diff --git a/test/machines.94.test.js b/test/machines.94.test.js
index aeff841..944f34d 100644
--- a/test/machines.94.test.js
+++ b/test/machines.94.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var test = require('@smaller/tap').test;
@@ -65,7 +65,6 @@ var CLIENT;
 var CLIENTS;
 var OTHER;
 var SERVER;
-var SERVER_UUID;
 
 function checkDisk(t, expectedDisk, actualDisk) {
     Object.keys(expectedDisk).forEach(function check(prop) {
@@ -147,20 +146,6 @@ test('add bhyve packages', function (t) {
     });
 });
 
-test('Get test server', function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
-
-    common.getTestServer(CLIENT, function (err, testServer) {
-        t.ifError(err);
-        SERVER_UUID = testServer.uuid;
-        t.end();
-    });
-});
-
 test('CreateMachine - disks and no flexible_disk package', function (t) {
     if (!BHYVE_IMAGE_UUID) {
         t.ok(true, 'No bhyve images. Test skipped');
@@ -172,8 +157,7 @@ test('CreateMachine - disks and no flexible_disk package', function (t) {
         disks: [ {}, {size: 512} ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-inflexible-test-' + process.pid,
-        package: BHYVE_128_INFLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_INFLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -206,8 +190,7 @@ test('CreateMachine - 9 disks and flexible disk package', function (t) {
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-too-many-disks-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -236,8 +219,7 @@ test('CreateMachine - Multiple `remaining` disks',
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-invalid-remaining-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -264,8 +246,7 @@ test('CreateMachine - Disks size is greater than quota',
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-oversized-disks-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -287,8 +268,7 @@ test('CreateMachine - No disks/inflexible disk package', function (t) {
     var obj = {
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-no-disks-inflex-package-test-' + process.pid,
-        package: BHYVE_128_INFLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_INFLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -562,8 +542,7 @@ test('CreateMachine - No disks/package has disks', function (t) {
     var obj = {
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE_DISKS.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE_DISKS.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -669,8 +648,7 @@ test('CreateMachine - Disks/flexible disk package', function (t) {
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -1015,8 +993,7 @@ test('CreateMachine - Disks sum to quota/flex disk package', function (t) {
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-disks-max-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -1126,8 +1103,7 @@ test('CreateMachine - Disks with remaining/flex disk package',
         ],
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -1231,8 +1207,7 @@ test('CreateMachine - No disks/flexible disk package', function (t) {
     var obj = {
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-no-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE.uuid
     };
 
     CLIENT.post('/my/machines', obj,
@@ -1327,8 +1302,7 @@ test('CreateMachine - Package has remaining boot disk', function (t) {
     var obj = {
         image: BHYVE_IMAGE_UUID,
         name: 'bhyve-remaining-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE_REMAINING.uuid,
-        server_uuid: SERVER_UUID
+        package: BHYVE_128_FLEXIBLE_REMAINING.uuid
     };
 
     CLIENT.post('/my/machines', obj,
diff --git a/test/machines.test.js b/test/machines.test.js
index 3e64964..483f07f 100644
--- a/test/machines.test.js
+++ b/test/machines.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var util = require('util');
@@ -88,7 +88,6 @@ var SDC_512 = {
     active: true
 };
 
-var SERVER_UUID;
 var IMAGE_UUID;
 var MACHINE_UUID;
 var NETWORK1_UUID;
@@ -156,7 +155,6 @@ test('Get test server', function (t) {
     common.getTestServer(CLIENT, function onGetTestServer(err, testServer) {
         t.ifError(err);
         TEST_SERVER = testServer;
-        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -213,8 +211,7 @@ test('Create machine with inactive package', function (t) {
     var obj = {
         image: IMAGE_UUID,
         package: SDC_256_INACTIVE.name,
-        name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID
+        name: 'a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
@@ -230,7 +227,6 @@ test('Create machine with os mismatch', function (t) {
         image: IMAGE_UUID,
         package: SDC_128_LINUX.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -264,7 +260,6 @@ test('Create machine with too many public networks', function (t) {
             image: IMAGE_UUID,
             package: SDC_256.name,
             name: 'a' + uuid().substr(0, 7),
-            server_uuid: SERVER_UUID,
             firewall_enabled: true,
             networks: networkUuids
         };
@@ -321,7 +316,6 @@ test('CreateMachine using invalid networks', function (t) {
     var obj = {
         image: IMAGE_UUID,
         package: SDC_256.name,
-        server_uuid: SERVER_UUID,
         networks: ['8180ef72-40fa-4b86-915b-803bcf96b442'] // invalid
     };
 
@@ -351,8 +345,7 @@ test('CreateMachine using network without permissions', function (t) {
 
     var vmDetails = {
         image: IMAGE_UUID,
-        package: SDC_256.name,
-        server_uuid: SERVER_UUID
+        package: SDC_256.name
     };
 
     CLIENT.napi.createNetwork(netDetails, function (err, net) {
@@ -393,8 +386,7 @@ test('CreateMachine using public network and ip', function (t) {
 
     var vmDetails = {
         image: IMAGE_UUID,
-        package: SDC_256.name,
-        server_uuid: SERVER_UUID
+        package: SDC_256.name
     };
 
     CLIENT.napi.createNetwork(netDetails, function (err, net) {
@@ -434,7 +426,6 @@ test('CreateMachine using unknown network and an ip', function (t) {
     var vmDetails = {
         image: IMAGE_UUID,
         package: SDC_256.name,
-        server_uuid: SERVER_UUID,
         networks: [
             {
                 ipv4_uuid: networkUuid,
@@ -526,7 +517,6 @@ test('CreateMachine using network pool and an ip', function (t) {
         var vmDetails = {
             image: IMAGE_UUID,
             package: SDC_256.name,
-            server_uuid: SERVER_UUID,
             networks: [
                 {
                     ipv4_uuid: networkPoolUuid,
@@ -601,7 +591,6 @@ test('Create machine with invalid locality', function (t) {
         image: IMAGE_UUID,
         package: SDC_256.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: SERVER_UUID,
         locality: { near: 'asdasd' }
     };
 
@@ -637,8 +626,7 @@ test('CreateMachine using image without permission', function (t) {
 
         var obj = {
             image: inaccessibleImage.uuid,
-            package: SDC_256.name,
-            server_uuid: SERVER_UUID
+            package: SDC_256.name
         };
 
         return CLIENT.post('/my/machines', obj, function (er2, req, res, body) {
@@ -673,8 +661,7 @@ test('CreateMachine without approved_for_provisioning', function (t) {
 
         var obj = {
             image: IMAGE_UUID,
-            package: SDC_256.name,
-            server_uuid: SERVER_UUID
+            package: SDC_256.name
         };
 
         httpClient.post('/my/machines', obj, function (err2, req, res, body) {
@@ -713,7 +700,6 @@ test('CreateMachine', function (t) {
             far: 'af4167f0-beda-4af9-9ae4-99d544499c14', // fake UUID
             strict: true
         },
-        server_uuid: SERVER_UUID,
         deletion_protection: true,
         firewall_enabled: true
     };
@@ -1220,8 +1206,7 @@ test('ListMachines destroyed', function (t) {
 
 test('CreateMachine using query args', function (t) {
     var query = '/my/machines?image=' + IMAGE_UUID +
-                '&package=' + SDC_128.name +
-                '&server_uuid=' + SERVER_UUID;
+                '&package=' + SDC_128.name
 
     CLIENT.post(query, {}, function (err, req, res, body) {
         t.ifError(err, 'POST /my/machines error');
@@ -1257,7 +1242,6 @@ test('CreateMachine using multiple same networks', function (t) {
         var obj = {
             image: IMAGE_UUID,
             package: SDC_128.name,
-            server_uuid: SERVER_UUID,
             networks: [networkUuid, networkUuid, networkUuid]
         };
 
@@ -1485,7 +1469,6 @@ test('CreateMachine with {{shortId}} in alias', function (t) {
         image: IMAGE_UUID,
         package: SDC_256.name,
         name: 'db-{{shortId}}-1.0',
-        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -1624,8 +1607,7 @@ test('Create Machine using network and IP', function (t) {
 
     var obj = {
         image: IMAGE_UUID,
-        package: SDC_128.name,
-        server_uuid: SERVER_UUID
+        package: SDC_128.name
     };
 
     CLIENT.napi.createNetwork(netDetails, function (err, net) {
@@ -1675,7 +1657,6 @@ test('Create Machine using network and in use IP', function (t) {
     var obj = {
         image: IMAGE_UUID,
         package: SDC_128.name,
-        server_uuid: SERVER_UUID,
         networks: [
             {
                 ipv4_uuid: NETWORK1_UUID,
@@ -1723,7 +1704,6 @@ test('CreateMachine using network and invalid number of ips', function (t) {
     var vmDetails = {
         image: IMAGE_UUID,
         package: SDC_256.name,
-        server_uuid: SERVER_UUID,
         networks: [
             {
                 ipv4_uuid: NETWORK1_UUID,
@@ -1762,8 +1742,7 @@ test('Create Machine using multiple networks and IPs', function (t) {
 
     var obj = {
         image: IMAGE_UUID,
-        package: SDC_128.name,
-        server_uuid: SERVER_UUID
+        package: SDC_128.name
     };
 
     CLIENT.napi.createNetwork(netDetails, function (err, net) {
@@ -1882,7 +1861,6 @@ test('Create Machine using "params.bootrom" without "bhyve"', function (t) {
             far: 'af4167f0-beda-4af9-9ae4-99d544499c14', // fake UUID
             strict: true
         },
-        server_uuid: SERVER_UUID,
         deletion_protection: true,
         firewall_enabled: true,
         bootrom: true
diff --git a/test/nics.test.js b/test/nics.test.js
index 56c6c55..5cb3fdc 100644
--- a/test/nics.test.js
+++ b/test/nics.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -382,7 +382,6 @@ function createFixtures(t, cb) {
                     image: image.id,
                     package: SDC_128.name,
                     name: FIXTURE_DATA.inst.name,
-                    server_uuid: fixtures.server.uuid,
                     firewall_enabled: true
                 };
                 machinesCommon.createMachine(t, CLIENT, obj,
@@ -414,7 +413,6 @@ function createFixtures(t, cb) {
                     image: image.id,
                     package: SDC_128.name,
                     name: FIXTURE_DATA.inst.name + 2,
-                    server_uuid: fixtures.server.uuid,
                     firewall_enabled: true
                 };
                 machinesCommon.createMachine(t, CLIENT, obj,
diff --git a/test/runtests b/test/runtests
index 650725b..70f8529 100755
--- a/test/runtests
+++ b/test/runtests
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -99,10 +99,6 @@ echo "# Setup a clean output dir ($OUTPUT_DIR)."
 rm -rf /var/tmp/cloudapitest
 mkdir -p /var/tmp/cloudapitest
 
-# Gather DC setup info for the test files.
-echo "# Datacenter config:"
-echo "#     SDC_SSO_ADMIN_IP is $SDC_SSO_ADMIN_IP"
-
 cd $TOP
 
 # Generate list of tests
diff --git a/test/tests.test.js b/test/tests.test.js
deleted file mode 100644
index 059512b..0000000
--- a/test/tests.test.js
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var test = require('@smaller/tap').test;
-var common = require('./common');
-
-
-// --- Globals
-
-
-var CLIENTS;
-var CLIENT;
-var SERVER;
-var TEST;
-
-
-// --- Tests
-
-
-test('setup', function (t) {
-    common.setup(function (_, clients, server) {
-        CLIENTS = clients;
-        CLIENT  = clients.user;
-        SERVER  = server;
-
-        TEST = common.getCfg().test;
-
-        t.end();
-    });
-});
-
-
-test('uncaughtException handler OK', function (t) {
-    if (!TEST) {
-        return t.end();
-    }
-
-    return CLIENT.get('/my/tests/throw_exception',
-            function (err, req, res, body) {
-        t.ok(err);
-        t.equal(res.statusCode, 500);
-
-        t.deepEqual(body, {
-            code: 'InternalError',
-            message: 'Internal Error'
-        });
-
-        t.end();
-    });
-});
-
-
-test('teardown', function (t) {
-    common.teardown(CLIENTS, SERVER, function (err) {
-        t.ifError(err, 'teardown success');
-        t.end();
-    });
-});
-- 
2.21.0

