commit 82650e41dc76ee4d3591079165afe5dd1d75886f (refs/changes/06/1206/5)
Author: David Pacheco <dap@joyent.com>
Date:   2017-01-05T14:46:41-08:00 (2 years, 9 months ago)
    
    MANTA-3072 muskie leaks pickers on request failure
    MANTA-2971 muskie should lose its no-op moray error handlers
    MANTA-2990 muskie picker problems

diff --git a/lib/medusa/connector.js b/lib/medusa/connector.js
index 35ab6ad..7a49629 100644
--- a/lib/medusa/connector.js
+++ b/lib/medusa/connector.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -68,19 +68,10 @@ function MedusaConnector(options) {
     };
     self.log.debug({ medusa: self.defaultMedusa }, 'default medusa');
 
-    self.moray.on('close', function medMorayClose() {
-        self.log.debug('medusa: moray closed');
-    });
-
     self.moray.on('connect', function medMorayConnect() {
         self.log.debug('medusa: moray connected');
         self.emit('connect');
     });
-
-    self.moray.on('error', function medMorayError(err) {
-        self.log.error(err, 'medusa: moray error');
-        self.emit('error', err);
-    });
 }
 util.inherits(MedusaConnector, EventEmitter);
 
diff --git a/lib/picker.js b/lib/picker.js
index f70f6c3..5f72e72 100644
--- a/lib/picker.js
+++ b/lib/picker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 //
@@ -181,10 +181,30 @@ function poll() {
         self._timer = setTimeout(poll.bind(self), self.interval);
     }
 
+    self.log.trace('Picker.poll: entered');
     clearTimeout(self._timer);
     fetch(opts, function (err, values) {
+        reschedule();
+
         if (err) {
-            self.emit('error', err);
+            /*
+             * Most errors here would be operational errors, including cases
+             * where we cannot reach Moray or Moray cannot reach PostgreSQL or
+             * the like.  In these cases, we want to log an error (which will
+             * likely fire an alarm), but do nothing else.  We'll retry again on
+             * our normal interval.  We'll only run into trouble if this doesn't
+             * succeed for long enough that minnow records expire, and in that
+             * case there's nothing we can really do about it anyway.
+             *
+             * It's conceivable that we hit a persistent error here like Moray
+             * being unable to parse our query.  That's essentially a programmer
+             * error in that we'd never expect this to happen in a functioning
+             * system.  It's not easy to identify these errors, and there
+             * wouldn't be much we could do to handle them anyway, so we treat
+             * all errors the same way: log (which fires the alarm) and wait for
+             * a retry.
+             */
+            self.log.error(err, 'Picker.poll: unexpected error (will retry)');
             return;
         }
 
@@ -218,11 +238,11 @@ function poll() {
                 self.db = obj;
                 self.emit('topology', self.db);
             } else {
-                self.log.warn('Picker::poll: could not find any minnow ' +
+                self.log.warn('Picker.poll: could not find any minnow ' +
                     'instances');
             }
 
-            reschedule();
+            self.log.trace('Picker.poll: done');
         });
     });
 }
@@ -311,7 +331,6 @@ function Picker(opts) {
     assert.optionalBool(opts.ignoreSize, 'options.ignoreSize');
 
     EventEmitter.call(this);
-    var self = this;
 
     this.client = moray.createClient({
         log: opts.log,
@@ -328,19 +347,7 @@ function Picker(opts) {
     this.url = opts.url;
     this.ignoreSize = opts.ignoreSize === undefined ? false : opts.ignoreSize;
 
-    this.client.on('close', function () {
-        clearTimeout(self._timer);
-        self.emit('close');
-    });
-
     this.client.once('connect', poll.bind(this));
-
-    this.client.on('error', function (err) {
-        self.log.error(err, 'picker: unexpected error: %s',
-                       err.toString());
-        self.emit('error', err);
-    });
-
     this.once('topology', this.emit.bind(this, 'connect'));
 }
 util.inherits(Picker, EventEmitter);
@@ -384,7 +391,7 @@ Picker.prototype.choose = function choose(opts, cb) {
         replicas: replicas,
         size: size,
         ignoreSize: self.ignoreSize
-    }, 'Picker::choose: entered');
+    }, 'Picker.choose: entered');
 
     this.datacenters.forEach(function filterDatacenters(dc) {
         var l = lower_bound(self.db[dc], size);
@@ -400,7 +407,7 @@ Picker.prototype.choose = function choose(opts, cb) {
         (replicas > 1 && dcs.some(function (dc) {
             return (!dc.length);
         }))) {
-        log.warn('Picker::choose: not enough DCs available');
+        log.warn('Picker.choose: not enough DCs available');
         cb(new NotEnoughSpaceError(size));
         return;
     }
@@ -424,7 +431,7 @@ Picker.prototype.choose = function choose(opts, cb) {
                 if (s === start) {
                     log.debug({
                         datacenter: dcs[ndx]
-                    }, 'Picker::choose: exhausted DC');
+                    }, 'Picker.choose: exhausted DC');
                     return (null);
                 }
 
@@ -483,7 +490,7 @@ Picker.prototype.choose = function choose(opts, cb) {
         replicas: replicas,
         sharks: sharks,
         size: size
-    }, 'picker::choose: done');
+    }, 'Picker.choose: done');
     cb(null, sharks);
 };
 
diff --git a/main.js b/main.js
index dabd43d..6957b95 100644
--- a/main.js
+++ b/main.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -269,32 +269,10 @@ function createPickerClient(cfg) {
 
     var client = app.picker.createClient(opts);
 
-    function onConnect() {
-        client.removeListener('error', onError);
+    client.once('connect', function onConnect() {
         LOG.info('picker connected %s', client.toString());
         PICKER = client;
-
-        client.on('close', function () {
-            LOG.error('picker: connection closed (reconnecting)');
-        });
-        client.on('connect', function () {
-            LOG.info('picker: reconnected %s', client.toString());
-        });
-        client.on('error', function (err) {
-            onError(err);
-            LOG.warn(err, 'picker: error (reconnecting)');
-        });
-    }
-
-    function onError(err) {
-        client.removeListener('connect', onConnect);
-        LOG.error(err, 'picker: connection failed');
-        PICKER = null;
-        setTimeout(createPickerClient.bind(null, cfg), 1000);
-    }
-
-    client.once('connect', onConnect);
-    client.once('error', onError);
+    });
 }
 
 
@@ -408,15 +386,8 @@ function createMedusaConnector(opts) {
 
     var client = medusa.createConnector(opts);
 
-    client.once('error', function (err) {
-        log.error(err, 'medusa initialisation error');
-    });
-
     client.once('connect', function onConnect() {
-        client.removeAllListeners('error');
-
         log.info('medusa: connected');
-
         MEDUSA = client;
     });
 }
