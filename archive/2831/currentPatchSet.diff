From beaa5becb47870da558fe24f6a5ca8c12c1fb4f2 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Mon, 30 Oct 2017 11:57:53 -0700
Subject: [PATCH] DOCKER-1119 tests: CNS resolv.conf test needs to check the
 file on the CN Reviewed by: Josh Wilsdon <josh@wilsdon.ca> Approved by: Josh
 Wilsdon <josh@wilsdon.ca>

---
 test/integration/api-create.test.js | 36 +++++++++++----
 test/integration/helpers.js         | 72 +++++++++++++++++++++++++++++
 2 files changed, 100 insertions(+), 8 deletions(-)

diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index 6c788d2..5da952d 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -32,6 +32,7 @@ var BYTES_IN_MB = 1024 * 1024;
 var ALICE;
 var BOB;
 var DOCKER_ALICE;
+var DOCKER_ALICE_HTTP; // For sending non-JSON payload
 var DOCKER_BOB;
 var STATE = {
     log: require('../lib/log')
@@ -76,11 +77,20 @@ test('setup', function (tt) {
                         return done(err, client);
                     }
                 );
+            },
+            function createAliceHttp(done) {
+                h.createDockerRemoteClient({user: ALICE, clientType: 'http'},
+                    function (err, client) {
+                        t.ifErr(err, 'docker client init for alice/http');
+                        done(err, client);
+                    }
+                );
             }
         ]}, function allDone(err, results) {
             t.ifError(err, 'docker client init should be successful');
             DOCKER_ALICE = results.operations[0].result;
             DOCKER_BOB = results.operations[1].result;
+            DOCKER_ALICE_HTTP = results.operations[2].result;
             t.end();
         });
     });
@@ -357,20 +367,30 @@ test('api: test DOCKER-741 and DOCKER-898', function (tt) {
         }
 
         function checkForCnsDnsEntries(result) {
-            var cmd = format('cat %s/root/etc/resolv.conf', result.vm.zonepath);
-            ALICE.execGz(cmd, STATE, function (cmdErr, stdout) {
-                t.ifErr(cmdErr, 'Check cat /etc/resolv.conf result');
+            // Get the resolv.conf from the container.
+            var opts = {
+                dockerHttpClient: DOCKER_ALICE_HTTP,
+                path: '/etc/resolv.conf',
+                vmId: result.id
+            };
+            h.getFileContentFromContainer(opts, function (err, contents) {
+                t.ifErr(err, 'Unable to fetch /etc/resolv.conf file');
+
+                if (err) {
+                    t.end();
+                    return;
+                }
 
-                // Stdout should contain a CNS 'search' entry.
-                var hasCnsSearch = stdout.match(/^search\s.*?\.cns\./m);
+                var hasCnsSearch = contents.match(/^search\s.*?\.cns\./m);
                 t.ok(hasCnsSearch, 'find cns entry in /etc/resolv.conf');
                 if (!hasCnsSearch) {
-                    t.fail('cns not found in /etc/resolv.conf file: ' + stdout);
+                    t.fail('cns not found in /etc/resolv.conf file contents: '
+                        + contents);
                 }
 
+                DOCKER_ALICE.del('/containers/' + result.id + '?force=1',
+                    ondelete);
             });
-
-            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
         }
 
         function ondelete(err) {
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 6b20cea..ed1b09b 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -20,6 +20,7 @@ var fs = require('fs');
 var moray = require('moray');
 var os = require('os');
 var path = require('path');
+var querystring = require('querystring');
 var sdcClients = require('sdc-clients');
 var restify = require('restify');
 var vasync = require('vasync');
@@ -29,6 +30,7 @@ var configLoader = require('../../lib/config-loader.js');
 var constants = require('../../lib/constants');
 var mod_log = require('../lib/log');
 var sdcCommon = require('../../lib/common');
+var tar = require('tar-stream');
 
 
 // --- globals
@@ -1418,6 +1420,75 @@ function buildDockerContainer(opts, callback) {
     }
 }
 
+
+/**
+ * Fetch a file's contents from within a docker container (using 'docker cp').
+ *
+ * @param {Object} opts
+ *      opts.dockerHttpClient - A restify HTTP client.
+ *      opts.path - The absolute file path inside the container.
+ *      opts.vmId - The container's id.
+ * @param {Function} callback (err, fileContents)
+ */
+function getFileContentFromContainer(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.dockerHttpClient, 'opts.dockerHttpClient');
+    assert.string(opts.path, 'opts.path');
+    assert.string(opts.vmId, 'opts.vmId');
+    assert.func(callback, 'callback');
+
+    var dockerHttpClient = opts.dockerHttpClient;
+    var log = dockerHttpClient.log;
+    var urlPath = fmt('/containers/%s/archive?path=%s', opts.vmId,
+        querystring.escape(opts.path));
+
+    dockerHttpClient.get(urlPath, function onget(connectErr, req) {
+        if (connectErr) {
+            log.error({err: connectErr}, 'getFileFromContainer: connect err');
+            callback(connectErr);
+            return;
+        }
+
+        req.on('result', function onResponse(err, res) {
+            if (err) {
+                log.error({err: err}, 'getFileFromContainer: response err');
+                callback(err);
+                return;
+            }
+
+            var contents = '';
+            var tarExtracter = tar.extract();
+
+            tarExtracter.on('entry', function _tarEntry(header, stream, next) {
+                stream.on('data', function (data) {
+                    contents += data.toString();
+                });
+                stream.on('error', function _tarStreamError(streamErr) {
+                    log.error({err: streamErr},
+                        'getFileFromContainer: stream err');
+                    next(streamErr);
+                });
+                stream.on('end', function _tarStreamEnd() {
+                    next(); // ready for next tar file entry
+                });
+                stream.resume(); // start reading
+            });
+
+            tarExtracter.on('error', function _tarError(tarErr) {
+                log.error({err: tarErr}, 'getFileFromContainer: tar err');
+                callback(tarErr);
+            });
+
+            tarExtracter.on('finish', function _tarFinish() {
+                callback(null, contents);
+            });
+
+            res.pipe(tarExtracter);
+        });
+    });
+}
+
+
 /**
  * Ensure the given image has been pulled, and if not then pull it down.
  */
@@ -2130,6 +2201,7 @@ module.exports = {
     listContainers: listContainers,
     createDockerContainer: createDockerContainer,
     buildDockerContainer: buildDockerContainer,
+    getFileContentFromContainer: getFileContentFromContainer,
     getOrCreateExternalNetwork: getOrCreateExternalNetwork,
     getOrCreateFabricVLAN: getOrCreateFabricVLAN,
     getOrCreateFabricNetwork: getOrCreateFabricNetwork,
-- 
2.21.0

