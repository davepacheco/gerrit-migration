From 6e416655cdef239ac65a7bd6f5008c994cac69ab Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 31 Jul 2019 15:44:20 -0700
Subject: [PATCH] TRITON-1840 expose provisioning limits through CloudAPI

---
 docs/admin.md                         |   4 +-
 docs/index.md                         |  86 ++++++
 lib/account.js                        |  52 +++-
 package.json                          |   2 +-
 plugins/provision_limits.js           | 378 ++++++++++++++++++-------
 test/account.test.js                  |  48 +++-
 test/plugins/provision-limits.test.js | 388 +++++++++++++++++---------
 7 files changed, 712 insertions(+), 246 deletions(-)

diff --git a/docs/admin.md b/docs/admin.md
index a36e4fa..128dce8 100644
--- a/docs/admin.md
+++ b/docs/admin.md
@@ -623,8 +623,8 @@ Possible values for every config member are:
 
 **Name**   | **Type** | **Description**         | **Possible values**
 ---------- | -------- | ----------------------- | ------------------------------
-os         | String   | Value for Image `os`.   | Usually, this will be one of `windows`, `linux`, `smartos`, `bsd` or `any`. See [IMGAPI os values](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-os)
-image      | String   | Value for Image `name`. | This will be one of `windows`, the different `linux` flavors, different `smartos` based datasets or `any`. See [IMGAPI possible values for image names](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-name)
+os         | String   | Value for Image `os`.   | Usually, this will be one of `windows`, `linux`, `smartos`, `bsd` or `other`. See [IMGAPI os values](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-os)
+image      | String   | Value for Image `name`. | The name of the image. See [IMGAPI possible values for image names](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-name)
 check      | String   | Either "image" or "os"  | See explanation below
 by         | String   | The name of the value this limit will be based on. Note that "machines" means "number of machines" | "ram", "quota", or "machines"
 value      | Number   | A value for the previous "by" member | Negative Integer, Zero, or Positive Integer
diff --git a/docs/index.md b/docs/index.md
index 2fa389d..3517e0e 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -841,6 +841,12 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.8.0
+- Added support for retrieving account [provisioning limits](#GetAccountLimits).
+
+## 9.7.0
+- Fixed instance resize from ignoring package traits.
+
 ## 9.6.0
 - Added support for user-driven machine [Migrations](#migrations),
   allowing the movement of machines between servers.
@@ -1249,6 +1255,86 @@ or
     }
 
 
+# GetAccountLimits (GET /:login/limits)
+
+When the operator has enabled the CloudAPI Provisioning Limits plugin, you can
+retreive your account limits and usage through this API.
+
+See the [Provisioning Limits](admin.html#appendix-a-provision-limits-plugin)
+plugin for how limits are configured and used in Triton.
+
+### Inputs
+
+* None
+
+### Returns
+
+An array of provisioning limit objects. Possible values for each provisioning
+limit object are:
+
+**Field**   | **Type** | **Description**         | **Possible values**
+----------- | -------- | ---------------
+by          | String   | The type of limit. Note that "machines" means the "number of machines". | "ram", "quota", or "machines".
+value       | Number   | The limit value. I.e. the total number of machines, total ram or total quota. | Ram is defined in terms of MiB. Quota is defined in terms of GiB.
+used        | Number   | How much of the limit is used by existing machines. | Ram is defined in terms of MiB. Quota is defined in terms of GiB.
+check       | String   | Optional. Restricts the limit to an image name or to an image os. | "image" or "os".
+os          | String   | Optional. When `check` is set to "os", this is the Image `os` name this limit will be restricted to. | Usually, this will be one of `windows`, `linux`, `smartos`, `bsd` or `other`. See [IMGAPI os values](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-os).
+image       | String   | Optional. When `check` is set to "image", this is the Image `name` this limit will be restricted to. | See [IMGAPI image name](https://github.com/joyent/sdc-imgapi/blob/master/docs/index.md#manifest-name).
+
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` does not exist
+
+### Example Request
+
+    GET /my/limits HTTP/1.1
+    authorization: Signature keyId="..."
+    accept: application/json
+    accept-version: ~9
+    host: api.example.com
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Content-Type: application/json
+    Content-Length: 285
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    Access-Control-Allow-Methods: GET, HEAD, POST, PUT
+    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
+    Connection: Keep-Alive
+    Content-MD5: Sz+3BJ3EKDxL3MLQQumPgg==
+    Date: Tue, 01 Aug 2019 05:06:33 GMT
+    Server: Joyent Triton 9.8.0
+    Api-Version: 9.0.0
+    Request-Id: c3d496f0-a869-11e5-8662-47ccf5717dbf
+    Response-Time: 1455
+
+    [
+      {
+        "by": "machines",
+        "value": 100,
+        "used": 2
+      },
+      {
+        "by": "ram",
+        "value": 1024,
+        "used": 512
+      },
+      {
+        "check": "os",
+        "os": "linux",
+        "by": "quota",
+        "value": 1024,
+        "used": 1
+      }
+    ]
+
 
 
 # Keys
diff --git a/lib/account.js b/lib/account.js
index 4428318..faa7cff 100644
--- a/lib/account.js
+++ b/lib/account.js
@@ -5,17 +5,21 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * This is Top Level CloudAPI route for a given account
  */
 
+var path = require('path');
+
 var assert = require('assert-plus');
-var resources = require('./resources');
 var restify = require('restify');
 
+var errors = require('./errors');
+var resources = require('./resources');
+
 var InvalidArgumentError = restify.InvalidArgumentError;
 
 function get(req, res, next) {
@@ -206,6 +210,45 @@ function update(req, res, next) {
 }
 
 
+function getProvisioningLimits(req, res, next) {
+    assert.object(req.account, 'req.account');
+    assert.object(req.config, 'req.config');
+    assert.arrayOfObject(req.config.plugins, 'req.config.plugins');
+    assert.object(req.log, 'req.log');
+    assert.object(req.plugins, 'req.plugins');
+
+    var log = req.log;
+
+    // Find the 'provision_limits' plugin configuration.
+    var config = req.config.plugins.find(function _pFilter(pConfig) {
+        return pConfig.name === 'provision_limits';
+    });
+
+    // Ensure the plugin exists and is enabled.
+    if (!config || !config.enabled) {
+        log.debug('getAccountLimits(%s) => [] - limits not enabled',
+            req.params.account);
+        res.send([]);
+        next();
+        return;
+    }
+
+    var pPath = path.resolve(__dirname, '../plugins/provision_limits');
+    var provisionPlugin = require(pPath);
+
+    provisionPlugin._getProvisionLimits({
+        account: req.account,
+        api: req.plugins.api,
+        config: config,
+        req_id: req.getId()
+    }, function _onGetLimitUsage(err, limits) {
+        log.debug('getAccountLimits(%s) => %j', req.params.account, limits);
+        res.send(limits);
+        next();
+    });
+}
+
+
 function mount(server, before) {
     assert.object(server);
     assert.ok(before);
@@ -225,6 +268,11 @@ function mount(server, before) {
         name: 'UpdateAccount'
     }, before, update, resources.updateResource);
 
+    server.get({
+        path: '/:account/limits',
+        name: 'GetProvisioningLimits'
+    }, before, getProvisioningLimits);
+
     return server;
 }
 
diff --git a/package.json b/package.json
index f7abc45..a3a578e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "Triton CloudAPI",
-    "version": "9.7.1",
+    "version": "9.8.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/plugins/provision_limits.js b/plugins/provision_limits.js
index 5265022..9999dde 100644
--- a/plugins/provision_limits.js
+++ b/plugins/provision_limits.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -185,6 +185,7 @@
  */
 
 var assert = require('assert-plus');
+var jsprim = require('jsprim');
 var vasync = require('vasync');
 
 
@@ -277,7 +278,7 @@ function filterLimits(log, service, cfgUserLimits, rawDcUserLimits) {
 
     // Convert any value attributes to numbers
     dcUserLimits  = atoiValues(dcUserLimits);
-    cfgUserLimits = atoiValues(cfgUserLimits);
+    cfgUserLimits = atoiValues(jsprim.deepCopy(cfgUserLimits));
 
     // If the user has any DC-wide wildcard limits specified, we skip any limits
     // specified in the sapi config.
@@ -401,84 +402,102 @@ function sum(a, b) {
  * Unknown checks (i.e. not "ram" or "quota") are treated as the default case:
  * counting VMs. Not great, but this is to keep consistent with the cloudapi
  * plugin's behaviour.
- *
- * Returns a boolean: true means provision is a go, false means provision should
- * be rejected.
  */
-function canProvision(log, resizing, pkg, vms, image, limits) {
+function setLimitsUsed(log, vms, limits) {
     assert.object(log, 'log');
-    assert.object(pkg, 'pkg');
     assert.arrayOfObject(vms, 'vms');
-    assert.object(image, 'image');
     assert.arrayOfObject(limits, 'limits');
 
-    // For the next three filter()s, it's possible that image.name, image.os or
-    // getBrand()'s results are undefined. This will only be the case if none of
-    // the limits require filtering by the associated image name, OS or VM
-    // brand. If they don't require it, then the results of imgVms, osVms,
-    // brandVms don't matter since they won't be used.
-
-    // All VMs matching new provision's image name
-    var imgVms = vms.filter(function imgFilter(vm) {
-        return vm.image_name === image.name;
-    });
-
-    // All VMs matching new provision's OS
-    var osVms = vms.filter(function osFilter(vm) {
-        return vm.os === image.os;
-    });
-
-    // All VMs with a particular brand
-    var brand = getBrand(image);
-    var brandVms = vms.filter(function brandFilter(vm) {
-        return vm.brand === brand;
-    });
-
-    // Loop through each limit and ensure that it passes. If any limit fails,
-    // this provision fails.
+    // Loop through each limit and set how much is used.
     for (var i = 0; i < limits.length; i++) {
         var limit = limits[i];
 
-        log.debug({ limit: limit }, 'Applying provision/resize limit');
-
         var machines = vms;
         if (limit.check === BRAND) {
-            machines = brandVms;
+            // All VMs with a particular brand.
+            machines = vms.filter(function brandFilter(vm) {
+                return vm.brand === limit.brand;
+            });
         } else if (limit.check === IMAGE) {
-            machines = imgVms;
+            // All VMs matching image name.
+            machines = vms.filter(function imgFilter(vm) {
+                return vm.image_name === limit.image;
+            });
         } else if (limit.check === OS) {
-            machines = osVms;
+            // All VMs matching the OS name.
+            machines = vms.filter(function osFilter(vm) {
+                return vm.os === limit.os;
+            });
         }
 
-        // Default is this
-        var count = machines.length + 1;
+        // Default to the number of machines.
+        var count = machines.length;
 
         if (limit.by === RAM) {
             // RAM; in MiB
             count = machines.map(function (vm) {
                 return vm.ram;
-            }).reduce(sum, pkg.max_physical_memory);
+            }).reduce(sum, 0);
 
         } else if (limit.by === QUOTA) {
             // Disk; VMs and limits are in GiB, but packages in MiB
             count = machines.map(function (vm) {
                 return vm.quota;
-            }).reduce(sum, pkg.quota / 1024);
-        } else if (resizing) {
+            }).reduce(sum, 0);
+        }
+
+        limit.used = count;
+    }
+}
+
+
+/*
+ * Returns a boolean: true means provision is a go, false means provision should
+ * be rejected.
+ */
+function canProvision(log, resizeVm, pkg, vms, limits) {
+    assert.object(log, 'log');
+    assert.object(pkg, 'pkg');
+    assert.optionalObject(resizeVm, 'resizeVm');
+    assert.arrayOfObject(vms, 'vms');
+    assert.arrayOfObject(limits, 'limits');
+
+    setLimitsUsed(log, vms, limits);
+
+    log.debug('Used limits', limits);
+
+    // Loop through each limit and ensure that it passes. If any limit fails,
+    // this provision fails.
+    return limits.every(function _checkLimitExceeded(limit) {
+        // Add the new pkg values (subtracting the old vm value when resizing).
+        if (limit.by === RAM) {
+            limit.used += pkg.max_physical_memory;
+            if (resizeVm) {
+                limit.used -= resizeVm.ram;
+            }
+        } else if (limit.by === QUOTA) {
+            limit.used += (pkg.quota / 1024);
+            if (resizeVm) {
+                limit.used -= resizeVm.quota;
+            }
+        } else if (resizeVm) {
             // If we are resizing, we don't care about the number of machines.
             // We bail here since we don't want to prevent resizing if we
             // somehow are over a limit on number of machines.
-            log.info({ limit: limit }, 'Resizing; skipping count');
-            continue;
+            log.info({ limit: limit }, 'Resizing; skipping vm count');
+            return true;
+        } else {
+            // Not resizing, which means we are provisioning a new instance,
+            // so add one extra vm to the count.
+            limit.used += 1;
         }
 
-        if (count > limit.value) {
-            log.info({ limit: limit }, 'Provision/resize limit applied');
+        if (limit.used > limit.value) {
+            log.info({ limit: limit }, 'Provision/resize limit exceeded');
             return false;
         }
-    }
-
-    return true;
+        return true;
+    });
 }
 
 
@@ -494,9 +513,8 @@ function canProvision(log, resizing, pkg, vms, image, limits) {
  * Returns a query string to use with vmapi's ListVms ?field=. Returns undefined
  * if we'll use the default object layout instead.
  */
-function findMinimalFields(limits, needUuid) {
+function findMinimalFields(limits) {
     assert.arrayOfObject(limits, 'limits');
-    assert.bool(needUuid, 'needUuid');
 
     var needImageUuid = limits.some(function (limit) {
         return limit.check === IMAGE || limit.check === OS;
@@ -516,18 +534,16 @@ function findMinimalFields(limits, needUuid) {
         return limit.by === QUOTA;
     });
 
-    var prefix = needUuid ? 'uuid,' : '';
-
     if (needRam && needQuota) {
-        return prefix + 'ram,quota';
+        return 'ram,quota';
     } else if (needQuota) {
-        return prefix + 'quota';
+        return 'quota';
     } else if (needRam) {
-        return prefix + 'ram';
+        return 'ram';
     } else {
         // vmapi won't return empty objects, so we need at least one attribute
         // regardless of whether it's needed or not
-        return needUuid ? 'uuid' : 'ram';
+        return 'ram';
     }
 }
 
@@ -538,6 +554,10 @@ function findMinimalFields(limits, needUuid) {
  * image's OS or name, we need to ensure we have an imgapi version of the image
  * manifest.
  *
+ * Note that when "image" is undefined, we are looking up all limit usage, else
+ * when image exists then we are checking the limits for a provisioning/resizing
+ * instance.
+ *
  * If we'll be filtering by image name or OS, we can throw away all image or OS
  * limits that don't apply to this provision once we know the provision's image
  * OS or name. After all, at that point the only limits that apply either match
@@ -548,12 +568,11 @@ function findMinimalFields(limits, needUuid) {
  * (also populated with "name" and "os" if required by the limits), and limits
  * (a new set of limits once we've throw away now-irrelevant limits).
  */
-function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
+function getVms(log, api, account, image, limits, reqId, cb) {
     assert.object(log, 'log');
     assert.object(api, 'api');
     assert.object(account, 'account');
-    assert.optionalObject(resizeVm, 'resizeVm');
-    assert.object(image, 'image');
+    assert.optionalObject(image, 'image');
     assert.arrayOfObject(limits, 'limits');
     assert.uuid(reqId, 'reqId');
     assert.func(cb, 'cb');
@@ -570,6 +589,11 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
     function getVmImage(_, next) {
         log.trace('Running getVmImage');
 
+        if (!image) {
+            // No need to get/convert the image.
+            return next();
+        }
+
         var needVmImage = limits.some(function (limit) {
             var check = limit.check;
             return check === BRAND || check === IMAGE || check === OS;
@@ -602,7 +626,15 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
         });
     }
 
+    // Drop any limits that reference an image/os/brand that we dont' care
+    // about (i.e. when provisioning/resizing we only care about limits that
+    // reference the same image/os/brand as the provisioned/resized instance).
     function refineLimits(_, next) {
+        if (!image) {
+            // When not filtering on an image, we cannot refine the filters.
+            return next();
+        }
+
         var needBrand = limits.some(function (limit) {
             return limit.check === BRAND;
         });
@@ -655,7 +687,7 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
                 return next(err);
             }
 
-            log.debug({ opts: opts }, 'Loaded images');
+            log.debug({opts: opts, numImages: images.length}, 'Loaded images');
 
             images.forEach(function (img) {
                 imageLookup[img.uuid] = img;
@@ -669,34 +701,78 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
     function getOsImages(_, next) {
         log.trace('Running getOsImages');
 
-        var needOsDetails = limits.some(function (limit) {
+        var osNames = limits.filter(function (limit) {
             return limit.check === OS;
+        }).map(function (limit) {
+            return limit.os;
         });
 
-        if (needOsDetails) {
+        if (osNames.length === 0) {
+            log.debug('The OS is not needed for limit filtering; skipping');
+            return next();
+        }
+
+        if (image) {
+            // For provisioning/resizing, we can optimize this so that
+            // we only return images that share the same image os as the
+            // provisioning (or resizing) instance.
+            log.debug('load images with os name: ', image.os);
             return getImages({ os: image.os }, next);
         }
 
-        log.debug('VMs\' OS not needed for limit filtering; skipping');
+        // Else when loading limits used, we need all images that the filters
+        // specify.
+        var uniqueNames = new Set(osNames);
+        log.debug('load images with os names: ', osNames);
 
-        return next();
+        function loadOsImages(osName, nextOs) {
+            getImages({ os: osName }, nextOs);
+        }
+        vasync.forEachPipeline(
+            {
+                inputs: Array.from(uniqueNames),
+                func: loadOsImages
+            },
+            next);
+        return undefined;
     }
 
     // Search for images that match the VM image's name, but only if needed
     function getNameImages(_, next) {
         log.trace('Running getNameImages');
 
-        var needNameDetails = limits.some(function (limit) {
+        var imageNames = limits.filter(function (limit) {
             return limit.check === IMAGE;
+        }).map(function _mapImageNames(limit) {
+            return limit.image;
         });
 
-        if (needNameDetails) {
-            return getImages({ name: image.name }, next);
+        if (imageNames.length === 0) {
+            log.debug('Image names not needed for limit filtering; skipping');
+            return next();
         }
 
-        log.debug('Img names not needed needed for limit filtering; skipping');
+        if (image) {
+            // For provisioning/resizing, we can optimize this so that
+            // we only return images that share the same image name as the
+            // provisioning (or resizing) instance.
+            log.debug('load images with image name: ', image.name);
+            return getImages({ name: image.name }, next);
+        }
 
-        return next();
+        // Else when loading limits used, we need all images that the filters
+        // specify.
+        var uniqueNames = new Set(imageNames);
+        function loadNamedImages(imageName, nextName) {
+            getImages({ name: imageName }, nextName);
+        }
+        vasync.forEachPipeline(
+            {
+                inputs: Array.from(uniqueNames),
+                func: loadNamedImages
+            },
+            next);
+        return undefined;
     }
 
     // Unfortunately, vmapi VMs don't have an 'os' attribute, nor do they store
@@ -726,7 +802,7 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
 
         var opts = {
             account: account,
-            fields: findMinimalFields(limits, !!resizeVm),
+            fields: findMinimalFields(limits),
             req_id: reqId
         };
 
@@ -755,16 +831,9 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
                 }
             });
 
-            // On a resize, the existing VM already exists. We remove the
-            // VM and proceed as if it were a provision to make checks
-            // the same in both provision and resize cases.
-            if (resizeVm) {
-                vms = vms.filter(function removeResizeVm(vm) {
-                    return vm.uuid !== resizeVm.uuid;
-                });
-            }
-
-            log.debug('VMs loaded');
+            log.debug({
+                vm_count: vms.length
+            }, 'VMs loaded');
 
             return next();
         });
@@ -784,6 +853,64 @@ function getVms(log, api, account, resizeVm, image, limits, reqId, cb) {
 }
 
 
+/*
+ * Return the merged set of limits, reading from the UFDS account and
+ * the configuration.
+ */
+function getMergedAccountLimits(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.api, 'opts.api');
+    assert.object(opts.config, 'opts.config');
+    assert.func(cb, 'cb');
+
+    var account = opts.account;
+    var api = opts.api;
+    var config = opts.config;
+    var log = api.log;
+
+    if (account.isAdmin()) {
+        log.debug({account_uuid: account.uuid},
+            'Account is admin; no limits');
+        cb(null, []);
+        return;
+    }
+
+    // Fetch all of this account's DC limits from ufds.
+    account.listLimits(function listLimitsCb(err, globalUserLimits) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        // Since ufds replicates between DCs, we're only interested in any
+        // limits that apply to this DC specifically.
+        var dcUserLimits = (globalUserLimits || []).find(function (limit) {
+            return limit.datacenter === api.datacenterName;
+        });
+
+        // We use a specific class of sapi-specified limits if the account
+        // has that class, otherwise fall back to defaults.
+        var cfgUserLimits = config[account.tenant] || config.defaults || [];
+
+        // Merge and optimize a bit the two sets of limits.
+        var limits = filterLimits(log, api.service, cfgUserLimits,
+            dcUserLimits);
+
+        if (!limits.length) {
+            log.debug({account_uuid: account.uuid}, 'No limits found');
+            cb(null, []);
+            return;
+        }
+
+        log.debug({account_uuid: account.uuid, limits: JSON.stringify(limits)},
+            'Loaded account limits');
+
+        cb(null, limits);
+    });
+}
+
+
 /*
  * Given a new provision or resize, load all limits that apply to the current
  * account both in sdc-docker's config and in ufds, determine which limits are
@@ -800,7 +927,6 @@ function allowProvisionOrResize(api, cfg) {
     assert.object(cfg, 'cfg');
     assert.arrayOfObject(cfg.defaults, 'cfg.defaults');
 
-    var svcs = api.service;
     var log = api.log;
 
     return function checkProvisionAndResizeLimits(opts, cb) {
@@ -820,31 +946,15 @@ function allowProvisionOrResize(api, cfg) {
 
         log.debug('Running', checkProvisionAndResizeLimits.name);
 
-        if (account.isAdmin()) {
-            log.debug('Account %s is admin; skipping provision/resize limits',
-                account.uuid);
-                return cb();
-        }
-
-        // fetch all of this account's DC limits from ufds
-        return account.listLimits(function listLimitsCb(err, globalUserLimits) {
+        getMergedAccountLimits({
+            account: account,
+            api: api,
+            config: cfg
+        }, function _onGetAccountLimitsCb(err, limits) {
             if (err) {
                 return cb(err);
             }
 
-            // Since ufds replicates between DCs, we're only interested in any
-            // limits that apply to this DC specifically.
-            var dcUserLimits = (globalUserLimits || []).find(function (limit) {
-                return limit.datacenter === api.datacenterName;
-            });
-
-            // We use a specific class of sapi-specified limits if the account
-            // has that class, otherwise fall back to defaults.
-            var cfgUserLimits = cfg[account.tenant] || cfg.defaults || [];
-
-            // Merge and optimize a bit the two sets of limits.
-            var limits = filterLimits(log, svcs, cfgUserLimits, dcUserLimits);
-
             if (!limits.length) {
                 log.debug('No limits to be applied; skipping ' +
                     'provision/resize limits');
@@ -866,7 +976,7 @@ function allowProvisionOrResize(api, cfg) {
             // Load and populate any required VMs from imgapi to check against
             // the given limits. Narrow the limits based on new information
             // available from those queries.
-            return getVms(log, api, account, resizeVm, image, limits, reqId,
+            return getVms(log, api, account, image, limits, reqId,
                 function onGetVms(err2, vms, image2, fittedLimits) {
 
                 if (err2) {
@@ -880,7 +990,7 @@ function allowProvisionOrResize(api, cfg) {
                     img_name: image2.name
                 }, 'VMs loaded and provision/resize limits adjusted');
 
-                var allow = canProvision(log, !!resizeVm, pkg, vms, image2,
+                var allow = canProvision(log, resizeVm, pkg, vms,
                     fittedLimits);
 
                 if (!allow) {
@@ -894,10 +1004,68 @@ function allowProvisionOrResize(api, cfg) {
 }
 
 
+/*
+ * Load all limits that apply to the current account both in the service config
+ * and in ufds, load how much is used for each of those limits that apply to
+ * the current dc.
+ *
+ * Callback is `cb(err, limits)`.
+ */
+function getProvisionLimits(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.api, 'opts.api');
+    assert.object(opts.config, 'opts.config');
+    assert.uuid(opts.req_id, 'opts.req_id');
+    assert.func(cb, 'cb');
+
+    var account = opts.account;
+    var api = opts.api;
+    var config = opts.config;
+    var log = api.log;
+    var reqId = opts.req_id;
+
+    getMergedAccountLimits({
+        account: account,
+        api: api,
+        config: config
+    }, function _getAccountLimitsCb(err, limits) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        if (!limits.length) {
+            cb(null, []);
+            return;
+        }
+
+        getVms(log, api, account, null, limits, reqId,
+            function onGetVms(err2, vms) {
+
+            if (err2) {
+                cb(err2);
+                return;
+            }
+
+            log.info({
+                vm_count: vms.length
+            }, 'VMs loaded');
+
+            setLimitsUsed(log, vms, limits);
+
+            cb(null, limits);
+        });
+    });
+}
+
+
 module.exports = {
     // hooks loaded by PluginManager
     allowProvision: allowProvisionOrResize,
     allowResize: allowProvisionOrResize,
+    // hook for account limits
+    _getProvisionLimits: getProvisionLimits,
 
     // and these are additionally exported for tests
     _convertFromCapi: convertFromCapi,
diff --git a/test/account.test.js b/test/account.test.js
index f52fa54..03bbf14 100644
--- a/test/account.test.js
+++ b/test/account.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var test = require('@smaller/tap').test;
@@ -157,6 +157,52 @@ test('PutAccount OK', function (t) {
 });
 
 
+test('GetAccountLimits(my) OK', function (t) {
+    CLIENT.get('/my/limits', function (err, req, res, limits) {
+        t.ifError(err);
+        t.ok(req);
+        t.ok(res);
+        common.checkHeaders(t, res.headers);
+        t.equal(res.statusCode, 200);
+        t.ok(Array.isArray(limits), 'Returned limits should be an array');
+        t.end();
+    });
+});
+
+
+test('GetAccountLimits(:login) OK', function (t) {
+    var path = '/' + encodeURIComponent(CLIENT.login) + '/limits';
+    CLIENT.get(path, function (err, req, res, limits) {
+        t.ifError(err);
+        t.ok(req);
+        t.ok(res);
+        common.checkHeaders(t, res.headers);
+        t.equal(res.statusCode, 200);
+        t.ok(Array.isArray(limits), 'Returned limits should be an array');
+        t.end();
+    });
+});
+
+
+test('GetAccountLimits(:login) other', function (t) {
+    var path = '/' + encodeURIComponent(CLIENT.login) + '/limits';
+    OTHER.get(path, function (err, req, res, limits) {
+        checkNotAuthorized(t, err, req, res, limits);
+        t.end();
+    });
+});
+
+
+test('GetAccountLimits 404', function (t) {
+    CLIENT.get('/' + common.uuid() + '/limits', function (err) {
+        t.ok(err);
+        t.equal(err.statusCode, 404);
+        t.equal(err.restCode, 'ResourceNotFound');
+        t.end();
+    });
+});
+
+
 test('teardown', function (t) {
     common.teardown(CLIENTS, SERVER, function (err) {
         t.ifError(err, 'teardown success');
diff --git a/test/plugins/provision-limits.test.js b/test/plugins/provision-limits.test.js
index 28afd8d..877824c 100644
--- a/test/plugins/provision-limits.test.js
+++ b/test/plugins/provision-limits.test.js
@@ -5,17 +5,18 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var test = require('@smaller/tap').test;
-var clone = require('jsprim').deepCopy;
+var jsprim = require('jsprim');
 var plugin = require('../../plugins/provision_limits');
 var restify = require('restify');
 
 
 // --- Globals
 
+var clone = jsprim.deepCopy;
 
 var ACCOUNT = {
     uuid: 'd987aa8e-bfa3-11e7-b71c-28cfe91f7d53',
@@ -111,10 +112,81 @@ function check1_resize(t, cfgLimits, ufdsLimits, tenant, existingVm, vms, pkg,
             t.ok(err, 'Provision/resize should fail');
         }
 
-        t.end();
+        opts.api = api;
+        opts.config = cfgLimits;
+
+        checkProvisionLimits(t, cfgLimits, ufdsLimits, opts);
     });
 }
 
+function checkProvisionLimits(t, cfgLimits, ufdsLimits, opts) {
+    // Remember all original limits, but remove the used setting from the limits
+    // prior to passing to the plugin._getProvisionLimits call.
+    var originalLimits = [];
+    Object.keys(cfgLimits).forEach(function (name) {
+        originalLimits = originalLimits.concat(clone(cfgLimits[name]));
+        // Clear used value from limits.
+        cfgLimits[name].forEach(function (limit) {
+            delete limit.used;
+        });
+    });
+    // For ufdsLimits, each limit entry is a serialized JSON object.
+    ufdsLimits.forEach(function (config) {
+        var limit;
+        var limits;
+
+        if (config.limit && config.datacenter === opts.api.datacenterName) {
+            if (Array.isArray(config.limit)) {
+                limits = config.limit.map(JSON.parse);
+                originalLimits = originalLimits.concat(clone(limits));
+                // Clear used value from limits.
+                limits.forEach(function (l) {
+                    delete l.used;
+                });
+                // Set limit back (without the used value).
+                config.limit = limits.map(JSON.stringify);
+            } else {
+                limit = JSON.parse(config.limit);
+                originalLimits.push(clone(limit));
+                // Clear used value from limits.
+                delete limit.used;
+                // Set limit back (without the used value).
+                config.limit = JSON.stringify(limit);
+            }
+        }
+    });
+
+    plugin._getProvisionLimits(opts, function _onGetLimits(err2, limits) {
+        // For all limits returned, ensure the used amount is what we
+        // expected it would be.
+        limits.forEach(function _checkLimitUsed(limit) {
+            var expectedLimit = originalLimits.find(function (l) {
+                // Only find limits that define a 'used' value.
+                if (!l.hasOwnProperty('used')) {
+                    return false;
+                }
+                // Find by an exact copy (by property inspection).
+                return Object.keys(limit).every(function (name) {
+                    if (name === 'used') {
+                        return true; // Ignore 'used' values.
+                    }
+                    if (limit[name] === undefined) {
+                        return true; // Ignore undefined (cleared) values.
+                    }
+                    return limit[name] === l[name];
+                });
+            });
+            if (!expectedLimit) {
+                t.fail('No limit match for: ' + JSON.stringify(limit));
+            } else {
+                t.equal(limit.used, expectedLimit.used,
+                    'Limit used should match the expected value');
+            }
+        });
+
+        t.end();
+    });
+}
 
 function check2_provision(t, limits, vms, listImages, shouldSucceed) {
     check2_resize(t, limits, null, vms, listImages, shouldSucceed);
@@ -165,7 +237,10 @@ function check2_resize(t, limits, existingVm, vms, listImages, shouldSucceed) {
             t.ok(err, 'Provision/resize should fail');
         }
 
-        t.end();
+        opts.api = api;
+        opts.config = {defaults: limits};
+
+        checkProvisionLimits(t, opts.config, [], opts);
     });
 }
 
@@ -266,8 +341,8 @@ function (t) {
         { ram: 256, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        defaults: [ { value: 2, used: 1 } ],
+        small: [ { value: 3, used: 1 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -284,7 +359,7 @@ function (t) {
         { ram: 256, uuid: UUID2 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 2 } ],
         small: [ { value: 3 } ]
     };
 
@@ -296,7 +371,7 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - no tenant/no ufdsLimits/three VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
@@ -305,7 +380,7 @@ function (t) {
         { ram: 256, uuid: UUID3 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 3 } ],
         small: [ { value: 3 } ]
     };
 
@@ -322,7 +397,7 @@ function (t) {
         { ram: 256, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 1 } ],
         small: [ { value: 3 } ]
     };
 
@@ -340,7 +415,7 @@ function (t) {
         { ram: 256, uuid: UUID2 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 2 } ],
         small: [ { value: 3 } ]
     };
 
@@ -352,7 +427,7 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - unknown tenant/no ufdsLimits/three VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = 'supercalifragilisticexpialidocious';
     var ufdsLimits = [];
     var vms = [
@@ -361,7 +436,7 @@ function (t) {
         { ram: 256, uuid: UUID3 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 3 } ],
         small: [ { value: 3 } ]
     };
 
@@ -380,7 +455,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 2 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields,  true);
@@ -399,7 +474,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 3 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -410,7 +485,7 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - tenant/no ufdsLimits/four VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = 'small';
     var ufdsLimits = [];
     var vms = [
@@ -421,7 +496,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 4 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -435,7 +510,10 @@ function (t) {
     var ufdsLimits = [];
     var vms = [];
     var cfg = {
-        defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
+        defaults: [
+            { value: 2, used: 0 },
+            { value: 1024, by: 'ram', used: 0 }
+        ],
         small: [ { value: 3 } ]
     };
 
@@ -452,7 +530,10 @@ function (t) {
         { ram: 976, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
+        defaults: [
+            { value: 2, used: 1 },
+            { value: 1024, by: 'ram', used: 976 }
+        ],
         small: [ { value: 3 } ]
     };
 
@@ -462,14 +543,17 @@ function (t) {
 
 test('allowResize - no tenant/no ufdsLimits/one smaller VM',
 function (t) {
-    var fields = 'uuid,ram';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 976, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
+        defaults: [
+            { value: 2, used: 1 },
+            { value: 1024, by: 'ram', used: 976 }
+        ],
         small: [ { value: 3 } ]
     };
 
@@ -479,14 +563,17 @@ function (t) {
 
 test('allowResize - no tenant/no ufdsLimits/one larger VM',
 function (t) {
-    var fields = 'uuid,ram';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 1026, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
+        defaults: [
+            { value: 2, used: 1 },
+            { value: 1024, by: 'ram', used: 1026 }
+        ],
         small: [ { value: 3 } ]
     };
     var pkg = {
@@ -506,7 +593,7 @@ function (t) {
     var vms = [];
     var cfg = {
         defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 0 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -524,7 +611,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 }, { value: 1024, by: 'ram' } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 2 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields,  true);
@@ -536,7 +623,10 @@ function (t) {
     var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [
-        { datacenter: API.datacenterName, limit: '{"value": 4}' }
+        {
+            datacenter: API.datacenterName,
+            limit: '{"value": 4, "used": 3}'
+        }
     ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -544,7 +634,7 @@ function (t) {
         { ram: 256, uuid: UUID3 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 3 } ],
         small: [ { value: 3 } ]
     };
 
@@ -557,7 +647,10 @@ function (t) {
     var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [
-        { datacenter: API.datacenterName, limit: '{"value": 4}' }
+        {
+            datacenter: API.datacenterName,
+            limit: '{"value": 4, "used": 4}'
+        }
     ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -566,7 +659,7 @@ function (t) {
         { ram: 256, uuid: UUID4 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 4 } ],
         small: [ { value: 3 } ]
     };
 
@@ -578,10 +671,13 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - no tenant/ufdsLimits/four VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [
-        { datacenter: API.datacenterName, limit: '{"value": 3}' }
+        {
+            datacenter: API.datacenterName,
+            limit: '{"value": 3, "used": 4}'
+        }
     ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -590,7 +686,7 @@ function (t) {
         { ram: 256, uuid: UUID4 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 4 } ],
         small: [ { value: 3 } ]
     };
 
@@ -611,7 +707,7 @@ function (t) {
         { ram: 256, uuid: UUID3 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 3 } ],
         small: [ { value: 3 } ]
     };
 
@@ -623,7 +719,7 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - no tenant/different DC ufdsLimits/three VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [
         { datacenter: 'lostinspaaace', limit: '{"value": 4}' }
@@ -634,7 +730,7 @@ function (t) {
         { ram: 256, uuid: UUID3 }
     ];
     var cfg = {
-        defaults: [ { value: 2 } ],
+        defaults: [ { value: 2, used: 3 } ],
         small: [ { value: 3 } ]
     };
 
@@ -648,7 +744,10 @@ function (t) {
     var tenant = 'small';
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 3}',
+            '{"value": 2000, "by": "ram", "used": 768}'
+        ]
     } ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -665,11 +764,14 @@ function (t) {
 
 test('allowResize - tenant/multiple ufdsLimits/three VMs',
 function (t) {
-    var fields = 'uuid,ram';
+    var fields = 'ram';
     var tenant = 'small';
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 3}',
+            '{"value": 2000, "by": "ram", "used": 768}'
+        ]
     } ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -689,7 +791,10 @@ function (t) {
     var fields = 'ram';
     var tenant = 'small';
     var ufdsLimits = [
-        { datacenter: API.datacenterName, limit: '{"value": 4}' }
+        {
+            datacenter: API.datacenterName,
+            limit: '{"value": 4, "used": 4}'
+        }
     ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -699,7 +804,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 4 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -710,10 +815,13 @@ function (t) {
 // VMs has nothing to do with VM size itself
 test('allowResize - tenant/ufdsLimits/four VMs',
 function (t) {
-    var fields = 'uuid';
+    var fields = 'ram';
     var tenant = 'small';
     var ufdsLimits = [
-        { datacenter: API.datacenterName, limit: '{"value": 4}' }
+        {
+            datacenter: API.datacenterName,
+            limit: '{"value": 4, "used": 4}'
+        }
     ];
     var vms = [
         { ram: 256, uuid: UUID1 },
@@ -723,7 +831,7 @@ function (t) {
     ];
     var cfg = {
         defaults: [ { value: 2 } ],
-        small: [ { value: 3 } ]
+        small: [ { value: 3, used: 4 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -736,7 +844,10 @@ function (t) {
     var tenant = undefined;
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 1}',
+            '{"value": 2000, "by": "ram", "used": 976}'
+        ]
     } ];
     var vms = [
         { ram: 976, uuid: UUID1 }
@@ -751,11 +862,14 @@ function (t) {
 
 test('allowResize - no tenant/multiple ufdsLimits/one large VM',
 function (t) {
-    var fields = 'uuid,ram';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 1}',
+            '{"value": 2000, "by": "ram", "used": 976}'
+        ]
     } ];
     var vms = [
         { ram: 976, uuid: UUID1 }
@@ -774,7 +888,10 @@ function (t) {
     var tenant = undefined;
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 2}',
+            '{"value": 2000, "by": "ram", "used": 1952}'
+        ]
     } ];
     var vms = [
         { ram: 976, uuid: UUID1 },
@@ -790,11 +907,14 @@ function (t) {
 
 test('allowResize - no tenant/multiple ufdsLimits/two large VMs',
 function (t) {
-    var fields = 'uuid,ram';
+    var fields = 'ram';
     var tenant = undefined;
     var ufdsLimits = [ {
         datacenter: API.datacenterName,
-        limit: ['{"value": 4}', '{"value": 2000, "by": "ram"}']
+        limit: [
+            '{"value": 4, "used": 2}',
+            '{"value": 2000, "by": "ram", "used": 1952}'
+        ]
     } ];
     var vms = [
         { ram: 976, uuid: UUID1 },
@@ -817,7 +937,7 @@ function (t) {
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota' } ]
+        defaults: [ { value: 60, by: 'quota', used: 50 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -826,14 +946,14 @@ function (t) {
 
 test('allowResize - check by quota/smaller VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota' } ]
+        defaults: [ { value: 60, by: 'quota', used: 50 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -842,14 +962,14 @@ function (t) {
 
 test('allowResize - check by quota/larger VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota' } ]
+        defaults: [ { value: 60, by: 'quota', used: 50 } ]
     };
     var pkg = {
         max_physical_memory: 256,
@@ -869,7 +989,7 @@ function (t) {
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota' } ]
+        defaults: [ { value: 60, by: 'quota', used: 60 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -885,7 +1005,8 @@ function (t) {
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 50 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -901,7 +1022,8 @@ function (t) {
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 60 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -910,14 +1032,15 @@ function (t) {
 
 test('allowResize - check by quota/os wildcard/smaller VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 60 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -926,14 +1049,15 @@ function (t) {
 
 test('allowResize - check by quota/os wildcard/larger VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 60 } ]
     };
     var pkg = {
         max_physical_memory: 256,
@@ -953,7 +1077,8 @@ function (t) {
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 50 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -962,14 +1087,15 @@ function (t) {
 
 test('allowResize - check by quota/image wildcard/smaller VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 50 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -978,14 +1104,15 @@ function (t) {
 
 test('allowResize - check by quota/image wildcard/larger VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 50 } ]
     };
     var pkg = {
         max_physical_memory: 256,
@@ -1005,7 +1132,8 @@ function (t) {
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'os', os: 'any',
+            used: 60 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -1021,7 +1149,8 @@ function (t) {
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any',
+            used: 50 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, true);
@@ -1030,14 +1159,15 @@ function (t) {
 
 test('allowResize - check by quota/brand wildcard/smaller VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any',
+            used: 50 } ]
     };
 
     check1_resize(t, cfg, ufdsLimits, tenant, vms[0], vms, PKG, fields, true);
@@ -1046,14 +1176,15 @@ function (t) {
 
 test('allowResize - check by quota/brand wildcard/larger VM',
 function (t) {
-    var fields = 'uuid,quota';
+    var fields = 'quota';
     var tenant = undefined;
     var ufdsLimits = [];
     var vms = [
         { ram: 256, quota: 50, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any',
+            used: 50 } ]
     };
     var pkg = {
         max_physical_memory: 256,
@@ -1073,7 +1204,8 @@ function (t) {
         { ram: 256, quota: 60, uuid: UUID1 }
     ];
     var cfg = {
-        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any' } ]
+        defaults: [ { value: 60, by: 'quota', check: 'brand', brand: 'any',
+            used: 60 } ]
     };
 
     check1_provision(t, cfg, ufdsLimits, tenant, vms, PKG, fields, false);
@@ -1084,7 +1216,7 @@ test('allowProvision - count/os/one VM',
 function (t) {
     var vms = [ { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 } ];
     var limits = [
-        { value: 2, check: 'os', os: 'other' }
+        { value: 2, check: 'os', os: 'other', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1107,7 +1239,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'os', os: 'other' }
+        { value: 2, check: 'os', os: 'other', used: 2 }
     ];
 
     function listImages(opts, cb) {
@@ -1133,7 +1265,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID3 }
     ];
     var limits = [
-        { value: 2, check: 'os', os: 'other' }
+        { value: 2, check: 'os', os: 'other', used: 3 }
     ];
 
     function listImages(opts, cb) {
@@ -1155,11 +1287,21 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 }
     ];
     var limits = [
-        { value: 2, check: 'os', os: 'smartos' }
+        { value: 2, check: 'os', os: 'smartos', used: 0 }
     ];
 
+    // The listImages function should only get called once via
+    // checkProvisionLimits, as allowProvision will already filter the limit out
+    // (i.e. allowProvision doesn't look up images at all).
+    var callCount = 0;
     function listImages(opts, cb) {
-        t.deepEqual(opts, { state: 'all', os: 'other' }, 'opts');
+        t.equal(callCount, 0, 'should be only be called once');
+        callCount += 1;
+        t.deepEqual(opts, {
+            state: 'all',
+            os: 'smartos',
+            req_id: '8882779e-f9ab-11e7-a697-93c18b2a37ef'
+        }, 'opts');
         cb(null, [IMAGE]);
     }
 
@@ -1175,7 +1317,7 @@ function (t) {
             uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'os', os: 'other' }
+        { value: 2, check: 'os', os: 'other', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1199,7 +1341,7 @@ function (t) {
             uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'os', os: 'other' }
+        { value: 2, check: 'os', os: 'other', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1221,7 +1363,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'os', os: 'other' }
+        { value: 512, by: 'ram', check: 'os', os: 'other', used: 256 }
     ];
 
     function listImages(opts, cb) {
@@ -1244,7 +1386,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID2 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'os', os: 'other' }
+        { value: 512, by: 'ram', check: 'os', os: 'other', used: 512 }
     ];
 
     function listImages(opts, cb) {
@@ -1267,7 +1409,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID2 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'os', os: 'other' }
+        { value: 512, by: 'ram', check: 'os', os: 'other', used: 512 }
     ];
 
     function listImages(opts, cb) {
@@ -1290,7 +1432,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 }
     ];
     var limits = [
-        { value: 2, check: 'image', image: 'testimage' }
+        { value: 2, check: 'image', image: 'testimage', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1313,7 +1455,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'image', image: 'testimage' }
+        { value: 2, check: 'image', image: 'testimage', used: 2 }
     ];
 
     function listImages(opts, cb) {
@@ -1335,11 +1477,21 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 }
     ];
     var limits = [
-        { value: 2, check: 'image', image: 'definitelynotwhatyouwant' }
+        { value: 2, check: 'image', image: 'definitelynotwhatyouwant', used: 0 }
     ];
 
+    // The listImages function should only get called once via
+    // checkProvisionLimits, as allowProvision will already filter the limit out
+    // (i.e. allowProvision doesn't look up images at all).
+    var callCount = 0;
     function listImages(opts, cb) {
-        t.deepEqual(opts, { state: 'all', name: 'testimage' }, 'opts');
+        t.equal(callCount, 0, 'should be only be called once');
+        callCount += 1;
+        t.deepEqual(opts, {
+            state: 'all',
+            name: 'definitelynotwhatyouwant',
+            req_id: '8882779e-f9ab-11e7-a697-93c18b2a37ef'
+        }, 'opts');
         cb(null, [IMAGE]);
     }
 
@@ -1354,7 +1506,7 @@ function (t) {
         { ram: 256, image_uuid: 'd26e2a4c-bfb8-11e7-a0eb-28cfe91f7d53' }
     ];
     var limits = [
-        { value: 2, check: 'image', image: 'testimage' }
+        { value: 2, check: 'image', image: 'testimage', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1376,7 +1528,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID1 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'image', image: 'testimage' }
+        { value: 512, by: 'ram', check: 'image', image: 'testimage', used: 256 }
     ];
 
     function listImages(opts, cb) {
@@ -1399,7 +1551,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, uuid: UUID2 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'image', image: 'testimage' }
+        { value: 512, by: 'ram', check: 'image', image: 'testimage', used: 512 }
     ];
 
     function listImages(opts, cb) {
@@ -1421,7 +1573,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, brand: 'lx', uuid: UUID1 }
     ];
     var limits = [
-        { value: 2, check: 'brand', brand: 'lx' }
+        { value: 2, check: 'brand', brand: 'lx', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1440,7 +1592,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, brand: 'lx', uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'brand', brand: 'lx' }
+        { value: 2, check: 'brand', brand: 'lx', used: 2 }
     ];
 
     function listImages(opts, cb) {
@@ -1458,7 +1610,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, brand: 'lx', uuid: UUID1 }
     ];
     var limits = [
-        { value: 2, check: 'brand', brand: 'joyent' }
+        { value: 2, check: 'brand', brand: 'joyent', used: 0 }
     ];
 
     function listImages(opts, cb) {
@@ -1478,7 +1630,7 @@ function (t) {
             brand: 'joyent', uuid: UUID2 }
     ];
     var limits = [
-        { value: 2, check: 'brand', brand: 'lx' }
+        { value: 2, check: 'brand', brand: 'lx', used: 1 }
     ];
 
     function listImages(opts, cb) {
@@ -1496,7 +1648,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, brand: 'lx', uuid: UUID1 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'brand', brand: 'lx' }
+        { value: 512, by: 'ram', check: 'brand', brand: 'lx', used: 256 }
     ];
 
     function listImages(opts, cb) {
@@ -1515,7 +1667,7 @@ function (t) {
         { ram: 256, image_uuid: IMAGE.uuid, brand: 'lx', uuid: UUID2 }
     ];
     var limits = [
-        { value: 512, by: 'ram', check: 'brand', brand: 'lx' }
+        { value: 512, by: 'ram', check: 'brand', brand: 'lx', used: 512 }
     ];
 
     function listImages(opts, cb) {
@@ -1611,70 +1763,36 @@ function (t) {
 test('_findMinimalFields',
 function (t) {
     var findMinimalFields = plugin._findMinimalFields;
-    var needUuid = false;
 
     var result = findMinimalFields([
         { value: 256, by: 'ram' },
         { value: 256, by: 'ram' }
-    ], needUuid);
+    ]);
     t.deepEqual(result, 'ram', 'findMinimalFields results');
 
     result = findMinimalFields([
         { value: 256, by: 'ram' },
         { value: 256, by: 'ram' },
         { value: 60,  by: 'quota' }
-    ], needUuid);
+    ]);
     t.deepEqual(result, 'ram,quota', 'findMinimalFields results');
 
     result = findMinimalFields([
         { value: 60, by: 'quota' },
         { value: 60, by: 'quota' }
-    ], needUuid);
+    ]);
     t.deepEqual(result, 'quota', 'findMinimalFields results');
 
     result = findMinimalFields([
         { value: 60, by: 'quota' },
         { value: 5,  check: 'os' }
-    ], needUuid);
-    t.deepEqual(result, undefined, 'findMinimalFields results');
-
-    result = findMinimalFields([
-        { value: 60, by: 'quota' },
-        { value: 5,  check: 'image' }
-    ], needUuid);
-    t.deepEqual(result, undefined, 'findMinimalFields results');
-
-    needUuid = true;
-
-    result = findMinimalFields([
-        { value: 256, by: 'ram' },
-        { value: 256, by: 'ram' }
-    ], needUuid);
-    t.deepEqual(result, 'uuid,ram', 'findMinimalFields results');
-
-    result = findMinimalFields([
-        { value: 256, by: 'ram' },
-        { value: 256, by: 'ram' },
-        { value: 60,  by: 'quota' }
-    ], needUuid);
-    t.deepEqual(result, 'uuid,ram,quota', 'findMinimalFields results');
-
-    result = findMinimalFields([
-        { value: 60, by: 'quota' },
-        { value: 60, by: 'quota' }
-    ], needUuid);
-    t.deepEqual(result, 'uuid,quota', 'findMinimalFields results');
-
-    result = findMinimalFields([
-        { value: 60, by: 'quota' },
-        { value: 5,  check: 'os' }
-    ], needUuid);
+    ]);
     t.deepEqual(result, undefined, 'findMinimalFields results');
 
     result = findMinimalFields([
         { value: 60, by: 'quota' },
         { value: 5,  check: 'image' }
-    ], needUuid);
+    ]);
     t.deepEqual(result, undefined, 'findMinimalFields results');
 
     t.end();
-- 
2.21.0

