commit 39980a56620962f29df4a9ee92b4dd3544a43c2c (refs/changes/49/5449/3)
Author: Trent Mick <trentm@gmail.com>
Date:   2019-01-30T15:56:18-08:00 (8 months ago)
    
    TRITON-1173 add CNAPI/cn-agent support for uninstalling agents

diff --git a/docs/index.md b/docs/index.md
index f3f5534..dc6877a 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1,7 +1,7 @@
 ---
-title: Provisioner Agent
+title: cn-agent
 markdown2extras: tables, code-friendly
-apisections:
+apisections: Task Agent HTTP API
 ---
 <!--
     This Source Code Form is subject to the terms of the Mozilla Public
@@ -10,148 +10,21 @@ apisections:
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
-# Provisioner Agent
+# cn-agent
 
-The provisioner agent runs on all SDC nodes (headnode and compute nodes)
+The cn-agent runs on all TritonDC servers S(headnode and compute nodes)
 and is primarly the agent by which CNAPI operates on those nodes via
-a number of tasks (documented below). Provisioner chiefly operates over AMQP,
-but some effort has been put into making tasks as transport agnostic as
-possible.
+a number of tasks (documented below).
 
-When the main process starts up, it connects to AMQP. It will then create
-queues on which it will receive messages. Each queue can handle one or more
-tasks, where type may be something like `machine_create`, `machine_reboot`,
-etc. Each queue is given a upper limit of tasks to be concurrently
-executed.
+WARNING: This doc is very incomplete. Most tasks are not documented.
 
 
-# Provisioner Messages
-
-*Note*: ${var} denotes you should substitue that value with something
-meaningful.
-
-
-## Incoming messages
-
-To start a new task send a message to this routing key:
-
-    ${agent}.${node_uuid}.task.${task}
-
-Payload:
-
-    {
-        task_id: 'my_unique_task_id',
-        client_id:  'my_unique_client_id'
-    }
-
-Keys:
-
-`task_id`:
-
-> A unique id to relate this request to any tasks, events and steps.
-
-`client_id`:
-
-> A unique id that will identify the initiator of the task. This is
-> used in outgoing messages we wish the sender to get, so they can bind a
-> routing key to a queue ahead of time.
-
-
-## Outgoing
-
-### Steps
-
-Step messages indicate the entry/exit of a task step. If an event's name is
-prefixed with start: or end: it means it was a step and the event name after
-the colon (:) was the name of the step.
-
-    provisioner.${node_uuid}.event.start:prec_check.${client_id}.${task_id}
-    provisioner.${node_uuid}.event.end:prec_check.${client_id}.${task_id}
-    provisioner.${node_uuid}.event.start:ensure_dataset_present.${client_id}.${task_id}
-    provisioner.${node_uuid}.event.end:ensure_dataset_present.${client_id}.${task_id}
-
-
-### Events
-
-Events messages indicate may milestone in a task, or that something has
-happened. This might be that a certain % progress has been reached, that we
-have started or finished a step, or something that doesn't necessarily correlate to the entry or exit of a step.
-
-    provisioner.${node_uuid}.event.screenshot.${client_id}.${task_id}
-
-
-### Progress
-
-Indicates from 0-100 how far along this task is, with 0 being just started and
-100 being finished.
-
-    provisioner.${node_uuid}.event.progress.${client_id}.${task_id}
-
-## Sample Interaction
-
-This is what a request to provision a VM on a compute node might look like.
-
-Tasks begin with a request originating from a "client". Tasks end when the
-agent sends a "finish" event.
-
-E.g. for the `machine_create` task, it might look like this:
-
-    --> provisiner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.task.machine_create
-
-    {
-        client_id:  '5699633f',
-        task_id: '11999575',
-
-        <vm parameters>
-    }
-
-Provisioner indicates it has started the task:
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start.5699633f.11999575
-    {}
-
-Provisioner begins to execute steps and emit progress events:
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
-    { value: 0 }
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:pre_check.5699633f.11999575
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:pre_check.5699633f.11999575
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
-    { value: 20 }
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:ensure_dataset_present.5699633f.11999575
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:ensure_dataset_present.5699633f.11999575
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
-    { value: 30 }
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:fetch_dataset.5699633f.11999575
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:fetch_dataset.5699633f.11999575
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
-    { value: 50 }
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.start:create_machine.5699633f.11999575
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.end:create_machine.5699633f.11999575
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.progress.5699633f.11999575
-    { value: 100 }
-
-Finally the `finish` event message is sent.
-
-    <-- provisioner.564dba97-54f6-4d3d-50d4-fe51cb228cc8.event.finish.5699633f.11999575
-    {
-        <result parameters>
-    }
-
 # Task Agent HTTP API
 
-## Error Response Object
+### Error Response Object
 
     {
         "code": "InvalidArgument",
@@ -159,10 +32,11 @@ Finally the `finish` event message is sent.
     }
 
 ## CreateTask (POST /tasks)
+
 Returns an object of type task. The task object returned is specified in the
 query parameter `task`.
 
-POST /tasks?task=[task kind]
+    POST /tasks?task=[task kind]
 
 ### CreateTask Responses
 
@@ -181,6 +55,7 @@ POST /tasks?task=[task kind]
 | params | Object | required  | Object containing parameters to update |
 
 ### CreateTask examples
+
 Add metadata to a machine
 
     POST /tasks?task=machine_update
@@ -284,58 +159,34 @@ Add a NIC to a machine
         }
     }
 
-List ZFS datasets on a machine
-
-    POST /tasks?task=zfs_list_datasets
-    {
-      "params": {
-      }
-    }
-
-## GetImage (GET /images/:uuid)
-
-Returns an image manifest object.
-GET /images/[image uuid]
-
-### GetImage Responses
-
-| Code | Description                     | Response                      |
-| ---- | ------------------------------- | ----------------------------- |
-| 200  | OK                              | Image manifest object         |
-| 404  | RESOURCE NOT FOUND              | Error object                  |
-| 500  | SERVER ERROR                    | Error object                  |
 
-## GetImage example
+# Tasks
 
-    GET /images/fd2cc906-8938-11e3-beab-4359c665ac99
+# Agent Tasks
 
-## GetImageFile (GET /images/:uuid/file)
+## agents_uninstall
 
-Returns an image file.
-GET /images/[image uuid]/file
+(Added in cn-agent v2.8.0.)
 
-### GetImageFile Responses
+Uninstall the named agents. This finishes by updating installed agent info
+in sysinfo (in the "SDC Agents" field) and in CNAPI (the server object's
+"agents" field).
 
-| Code | Description                     | Response                      |
-| ---- | ------------------------------- | ----------------------------- |
-| 200  | OK                              | Image manifest object         |
-| 404  | RESOURCE NOT FOUND              | Error object                  |
-| 500  | SERVER ERROR                    | Error object                  |
+This task is idempotent, i.e. if you call it to remove an agent that is
+already uninstalled, that will succeed. This allows callers to retry if
+the task fails.
 
-## GetImageFile example
+There is no guard against passing "cn-agent" as the agent name to remove. The
+behaviour when passing this is undefined.
 
-    GET /images/fd2cc906-8938-11e3-beab-4359c665ac99/file
+### Inputs
 
-# Tasks
+| Field  | Type    | Required? | Description                                                                                                                                                                                                                                                                                                                              |
+| ------ | ------- | --------- | ----------- |
+| agents | Array   | required  | The names of the agents to remove. |
 
 # Machine Tasks
 
-## machine_create
-## machine_destroy
-## machine_boot
-## machine_shutdown
-## machine_reboot
-
 ## machine_create_image
 
 Called by CNAPI's
@@ -356,30 +207,3 @@ IMGAPI.
 | manifest.name    | String  | required  | The name for the image to be created.                                                                                                                                                                                                                                                                                                    |
 | manifest.version | String  | required  | The version for the image to be created.                                                                                                                                                                                                                                                                                                 |
 | imgapi_url       | URL     | required  | The URL of the IMGAPI to which the image will be published. Typically this the DC's local IMGAPI at "http://imgapi.$domain"                                                                                                                                                                                                              |
-
-
-
-# ZFS Tasks
-
-Tasks for interacting directly with `zfs`.
-
-## zfs_clone_dataset
-## zfs_create_dataset
-## zfs_destroy_dataset
-## zfs_get_properties
-## zfs_set_properties
-## zfs_list_datasets
-## zfs_rename_dataset
-## zfs_rollback_dataset
-## zfs_snapshot_dataset
-## zfs_list_pools
-
-
-# Metering Tasks
-
-TODO
-
-
-# Operator Guide
-
-TODO: examples using taskadm, logs location (separated out task logs), etc
diff --git a/lib/apm.js b/lib/apm.js
index f86c3de..b051063 100755
--- a/lib/apm.js
+++ b/lib/apm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -19,17 +19,18 @@
  *
  */
 
+var assert = require('assert-plus');
 var async = require('async');
 var bunyan = require('bunyan');
 var mkdirp = require('mkdirp');
 var fs = require('fs');
 var createHash = require('crypto').createHash;
-var assert = require('assert');
 var execFile = require('child_process').execFile;
 var exec = require('child_process').exec;
 var spawn = require('child_process').spawn;
 var path = require('path');
-var tty = require('tty');
+var vasync = require('vasync');
+var VError = require('verror');
 
 var prefix = '/opt/smartdc/agents';
 var tmp = '/var/tmp';
@@ -161,109 +162,161 @@ function runLifecycleScript(which, packageJson, pkgPath, callback) {
     });
 }
 
-function uninstallPackage(pkg, cb) {
-    log.info('Uninstalling package, %s.', pkg);
+/*
+ * Uninstall the given APM package.
+ *
+ * It is not an error if the package doesn't look like it exists.
+ * In this case this will `log.warn`.
+ */
+function uninstallPackage(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.string(opts.packageName, 'opts.packageName');
+    assert.optionalBool(opts.removeInstanceUuidFile,
+        'opts.removeInstanceUuidFile');
+    assert.func(cb, 'cb');
 
-    var packageJson;
-    var pkgPath = path.join(prefix, modules, pkg);
+    log.info('Uninstalling package %s', opts.packageName);
 
-    async.waterfall([
-        function (callback) {
-            fs.stat(pkgPath, function (error, stat) {
-                if (error) {
-                    return callback(error);
+    var packageJson;
+    var pkgPath = path.join(prefix, modules, opts.packageName);
+    var pkgInstUuidFile = path.join(etcdir, opts.packageName);
+
+    vasync.pipeline({arg: {}, funcs: [
+        function checkIfPkgPathExists(ctx, next) {
+            fs.stat(pkgPath, function (err, stats) {
+                if (err) {
+                    if (err.code === 'ENOENT') {
+                        log.warn(
+                            'package "%s" does not appear to be installed: %s',
+                            opts.packageName, err.message);
+                        ctx.pkgPathExists = false;
+                        next();
+                    } else {
+                        next(err);
+                    }
+                } else {
+                    ctx.pkgPathExists = true;
+                    next();
                 }
-                process.chdir(pkgPath);
-                return callback();
             });
         },
-        function (callback) {
-            // Parse the package's package.json file.
-            readPackageJson(pkgPath + '/package.json', function (error, json) {
-                packageJson = json;
-                log.debug(packageJson);
-                return callback();
+
+        function readThePackageJson(ctx, next) {
+            if (!ctx.pkgPathExists) {
+                next();
+                return;
+            }
+            readPackageJson(pkgPath + '/package.json', function (err, json) {
+                if (err) {
+                    next(err);
+                } else {
+                    ctx.packageJson = json;
+                    log.trace({packageJson: ctx.packageJson},
+                        'loaded package.json');
+                    next();
+                }
             });
         },
-        function (callback) {
-            runLifecycleScript('preuninstall', packageJson, pkgPath,
-                function (error) {
-                    if (error) {
-                        return callback(error);
-                    }
-                    return callback();
-                });
+
+        function runPreuninstall(ctx, next) {
+            if (!ctx.packageJson) {
+                next();
+                return;
+            }
+            runLifecycleScript('preuninstall', ctx.packageJson, pkgPath, next);
         },
-        function (callback) {
-            runLifecycleScript(
-                'postuninstall',
-                packageJson,
-                pkgPath,
-                function (error) {
-                    if (error) {
-                        return callback(error);
-                    }
-                    return callback();
-                });
+        function runPostuninstall(ctx, next) {
+            if (!ctx.packageJson) {
+                next();
+                return;
+            }
+            runLifecycleScript('postuninstall', ctx.packageJson, pkgPath, next);
         },
-        function (callback) {
+
+        function rmBinLinks(ctx, next) {
             // Iterate over packageJson bin entries and remove them from our
             // bin directory.
-            if (!packageJson.bin || !Object.keys(packageJson.bin).length) {
-                return callback();
+            if (!ctx.packageJson || !ctx.packageJson.bin
+                || !Object.keys(ctx.packageJson.bin).length) {
+                next();
+                return;
             }
 
-            var bins = packageJson.bin;
+            var bins = ctx.packageJson.bin;
             var binNames = Object.keys(bins);
 
-            return async.eachSeries(
+            async.eachSeries(
                 binNames,
-                function (binName, _cb) {
+                function (binName, nextBinName) {
                     var binLink = bindir + '/' + binName;
 
-                    fs.stat(binLink, function (error) {
-                        if (error) {
+                    fs.stat(binLink, function (statErr) {
+                        if (statErr) {
                             log.warn('Could not stat %s to unlink', binLink);
-                            return _cb();
+                            nextBinName();
+                            return;
                         }
 
-                        return fs.unlink(binLink, function (unlinkError) {
+                        fs.unlink(binLink, function (unlinkError) {
                             if (unlinkError) {
-                                return _cb(unlinkError);
+                                nextBinName(unlinkError);
+                            } else {
+                                log.info('Unlinked %s', binLink);
+                                nextBinName();
                             }
-                            log.info('Unlinked %s', binLink);
-                            return _cb();
                         });
                     });
                 },
-                function (error) {
-                    log.info('Done removing bin entries');
-                    return callback(error);
-                });
+                next);
         },
-        function (callback) {
+
+        function rmPkgPath(ctx, next) {
+            if (!ctx.pkgPathExists) {
+                next();
+                return;
+            }
+
+            // Dev Note: Can this chdir be removed? Does it help if cwd is
+            // inside the pkgPath?
             process.chdir(path.join(prefix, modules));
+
             execFile('/usr/bin/rm', [ '-fr', pkgPath ],
-                function (error, stdout, stderr) {
-                    if (error) {
-                        log.info(
-                            'Error removing %s: %s',
-                            pkgPath,
-                            stderr.toString());
-                        return callback(error);
+                function (execErr, stdout, stderr) {
+                    if (execErr) {
+                        next(new VError(execErr, 'could not remove %s: %s',
+                            pkgPath, stderr))
+                    } else {
+                        log.info('Removed pkgPath: %s', pkgPath);
+                        next();
                     }
-
-                    return callback();
                 });
+        },
+
+        function removeTheInstUuidFile(ctx, next) {
+            if (!opts.removeInstanceUuidFile) {
+                next();
+                return;
+            }
+            fs.unlink(pkgInstUuidFile, function onUnlink(err) {
+                if (err) {
+                    if (err.code === 'ENOENT') {
+                        next();
+                    } else {
+                        next(err);
+                    }
+                } else {
+                    log.info('Removed instance_uuid file:', pkgInstUuidFile);
+                    next();
+                }
+            });
         }
-    ],
-    function (error) {
-        if (error) {
-            log.error('Error uninstalling package');
-            log.error(error);
-            return cb();
+    ]}, function onFinish(err) {
+        if (err) {
+            log.error(err, 'Error uninstalling package %s', opts.packageName);
+            cb(err);
+        } else {
+            cb();
         }
-        return cb();
     });
 }
 
@@ -352,11 +405,16 @@ function installPackage(toInstall, cb) {
             var name = packageJson.name;
             isPackageInstalled(name, function (error, isInstalled) {
                 if (isInstalled) {
-                    log.warn(
-                        'Detected %s as being already installed. '
-                    + 'Uninstalling before continuing.', name);
-                    uninstallPackage(name, callback);
-                    return;
+                    log.warn('Detected %s as being already installed. '
+                        + 'Uninstalling before continuing.', name);
+                    uninstallPackage({
+                        packageName: name,
+                        removeInstanceUuidFile: false
+                    }, function onUninstall(_uninstallErr) {
+                        // Ignore possible uninstall error. It is logged in
+                        // `uninstallPackage`.
+                        callback();
+                    });
                 } else {
                     callback();
                     return;
@@ -481,27 +539,13 @@ function command_install(apm) {
 }
 
 
-function displayErrors(errors) {
-    errors.forEach(function (error) {
-        log.error('%s: %s', error.source, error.message);
-        if (error.stack) {
-            error.stack.split('\n').forEach(function (line) {
-                log.error(line);
-            });
-        }
-    });
-}
-
-
 function command_uninstall(apm) {
-    var things = process.argv.slice(3);
-
-    apm.uninstallPackages(things, function (err) {
-        if (err) {
-            process.exit(1);
-        }
+    var packages = process.argv.slice(3);
 
-        return;
+    apm.uninstallPackages(packages, function onUninstalled(_err) {
+        // For compatibility, we ignore possible uninstall error. It is logged
+        // in `uninstallPackages`. At some point it would be good to exit
+        // non-zero on uninstall error.
     });
 }
 
@@ -567,36 +611,50 @@ APM.prototype.installPackages = function (packages, callback) {
     });
 };
 
+/*
+ * Uninstall the given packages.
+ *
+ * For each given package name this will:
+ * - run any 'preuninstall' and 'postuninstall' lifecycle scripts
+ * - remove any scripts from /opt/smartdc/agents/bin listed in the package's
+ *   package.json "bin" object
+ * - remove the install dir (/opt/smartdc/agents/lib/node_modules/$packageName)
+ * - remove the "instance uuid file" (/opt/smartdc/agents/etc/$packageName)
+ *   that is commonly created by Triton agents.
+ *
+ * It is *not* an error if none of these exist, i.e. if the package is not
+ * installed or if a bogus name is given. This is so package/agent removal
+ * can be idempotent.
+ *
+ * @param {Array} packages - A list of package names to uninstall.
+ * @param {Function} callback - `function (err)`.
+ */
 APM.prototype.uninstallPackages = function (packages, callback) {
-    var errors = [];
-
-    async.eachSeries(packages, function (_package, cb) {
-        uninstallPackage(_package, function (error) {
-            if (error) {
-                log.error('Error uninstalling %s: %s', _package, error.message);
-                errors.push({
-                    source: _package,
-                    message: error.message,
-                    stack: error.stack
-                });
-                return cb();
+    var errs = [];
+
+    async.eachSeries(packages, function (packageName, cb) {
+        uninstallPackage({
+            packageName: packageName,
+            removeInstanceUuidFile: true
+        }, function onUninstalledPackage(unErr) {
+            if (unErr) {
+                var err = new VError(unErr, 'error uninstalling %s',
+                    packageName);
+                log.error(err);
+                errs.push(err);
             }
-            return cb();
+            cb();
         });
     },
-    function (error) {
-        updateSysinfo(function (sysinfoError) {
-            if (sysinfoError) {
-                log.error(
-                    'Error updating sysinfo: ',
-                    sysinfoError.message);
-            }
-            log.info('Done uninstalling all packages.');
-            if (errors.length) {
-                log.error('There were errors:');
-                displayErrors(errors);
-                process.exit(1);
+    function onFinish(finishErr) {
+        assert(!finishErr, 'the code above should never call cb with an error');
+        updateSysinfo(function (sysinfoErr) {
+            if (sysinfoErr) {
+                errs.push(sysinfoErr);
+                log.error(sysinfoErr, 'error updating sysinfo');
             }
+            log.info('Done uninstalling all packages');
+            callback(VError.errorFromList(errs));
         });
     });
 };
diff --git a/lib/backends/smartos/index.js b/lib/backends/smartos/index.js
index a6ff1f6..d88d416 100644
--- a/lib/backends/smartos/index.js
+++ b/lib/backends/smartos/index.js
@@ -89,6 +89,7 @@ var queueDefns = [
         maxConcurrent: 1,
         tasks: [
             'agent_install',
+            'agents_uninstall',
             'shutdown_cn_agent_update',
             'refresh_agents'
         ]
diff --git a/lib/backends/smartos/tasks/agents_uninstall.js b/lib/backends/smartos/tasks/agents_uninstall.js
new file mode 100644
index 0000000..48a5a2a
--- /dev/null
+++ b/lib/backends/smartos/tasks/agents_uninstall.js
@@ -0,0 +1,76 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * This task uninstalls the named Triton agents on this server.
+ */
+
+var assert = require('assert-plus');
+var VError = require('verror');
+var vasync = require('vasync');
+
+var APM = require('../../../apm').APM;
+var refreshAgents = require('./shared').refreshAgents;
+var Task = require('../../../task_agent/task');
+
+
+function AgentsUninstallTask(req) {
+    Task.call(this);
+    this.req = req;
+}
+
+Task.createTask(AgentsUninstallTask);
+
+function start() {
+    var self = this;
+    var apm = new APM({log: self.log});
+    var log = self.log;
+    var agents = self.req.params.agents;
+
+    assert.arrayOfString(agents, 'params.agents');
+
+    // `apm.uninstallPackages` logs errors as they happen.
+    apm.uninstallPackages(agents, function onUninstalled(uninstallErr) {
+        self.progress(90);
+
+        // An error might indicate that *some* `agents` could not be installed.
+        // Therefore we still want to refresh agent info in CNAPI.
+        refreshAgents({log: log}, function onRefreshed(refreshErr) {
+            if (refreshErr) {
+                log.error(refreshErr, 'Error refreshing agent info in CNAPI');
+            } else {
+                log.info('Refreshed agent info in CNAPI');
+            }
+
+            // Current cn-agent task error reporting will only look at
+            // `err.message`. For a more complete error message, we will
+            // build up the messages from all relevant errors here.
+            var errMsgs = [];
+            if (uninstallErr) {
+                VError.errorForEach(uninstallErr,
+                    function pushMsg(e) { errMsgs.push(e.message); });
+            }
+            if (refreshErr) {
+                errMsgs.push('Error refreshing agent info in CNAPI: '
+                    + refreshErr.message);
+            }
+
+            if (errMsgs.length > 0) {
+                self.fatal('AgentsUninstallTask error: ' + errMsgs.join('; '));
+            } else {
+                self.finish();
+            }
+        });
+    });
+}
+
+AgentsUninstallTask.setStart(start);
+
+module.exports = AgentsUninstallTask;
diff --git a/package.json b/package.json
index e3224f9..9496601 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.7.1",
+  "version": "2.8.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -32,7 +32,7 @@
     "triton-netconfig": "1.1.0",
     "uuid": "3.0.1",
     "vasync": "1.6.4",
-    "verror": "1.9.0",
+    "verror": "1.10.0",
     "vmadm": "1.3.0",
     "zfs": "git+https://github.com/joyent/node-zfs.git#657a90d9424c45066e3e0919dfe9b34f5636e0e9"
   },
