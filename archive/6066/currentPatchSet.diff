From 43a235b8348672c3d495193484ad386ccd9ab7c7 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Mon, 8 Apr 2019 15:42:25 -0600
Subject: [PATCH] MANTA-4211 More cleanup and reorganization of node-boray
 after forking

---
 CHANGES.md                                    | 148 +----
 README.md                                     |  21 +-
 bin/{morayping => borayping}                  |   0
 bin/{morayversion => borayversion}            |   0
 bin/delmany                                   |  81 ---
 bin/findobjects                               | 122 ----
 bin/gettokens                                 |  47 --
 bin/reindexobjects                            |  91 ---
 bin/sql                                       |  55 --
 bin/updatemany                                |  82 ---
 docs/man/man1/{moray.md => boray.md}          |   9 +-
 docs/man/man1/{morayping.md => borayping.md}  |   0
 .../man1/{morayversion.md => borayversion.md} |   0
 docs/man/man1/delmany.md                      |  49 --
 docs/man/man1/findobjects.md                  | 146 -----
 docs/man/man1/gettokens.md                    |  61 --
 docs/man/man1/reindexobjects.md               |  74 ---
 docs/man/man1/sql.md                          |  50 --
 docs/man/man1/updatemany.md                   |  54 --
 docs/man/man3/{moray.md => boray.md}          |   4 +-
 lib/{bucket_buckets.js => buckets.js}         |  61 +-
 lib/client.js                                 | 462 +++-----------
 lib/client_params.js                          |  24 +-
 lib/cmd.js                                    |  44 +-
 lib/fast_connection.js                        |   6 +-
 lib/index.js                                  |   6 +-
 lib/meta.js                                   |  18 +-
 lib/{bucket_objects.js => object.js}          | 115 +---
 lib/objects.js                                | 591 ------------------
 lib/pool.js                                   |  62 +-
 lib/rpc.js                                    |  12 +-
 lib/tokens.js                                 |  61 --
 man/man1/boray.1                              | 339 ++++++++++
 man/man1/borayping.1                          |  62 ++
 man/man1/borayversion.1                       |   0
 man/man3/boray.3                              | 313 ++++++++++
 package.json                                  |   9 +-
 37 files changed, 929 insertions(+), 2350 deletions(-)
 rename bin/{morayping => borayping} (100%)
 rename bin/{morayversion => borayversion} (100%)
 delete mode 100755 bin/delmany
 delete mode 100755 bin/findobjects
 delete mode 100755 bin/gettokens
 delete mode 100755 bin/reindexobjects
 delete mode 100755 bin/sql
 delete mode 100755 bin/updatemany
 rename docs/man/man1/{moray.md => boray.md} (95%)
 rename docs/man/man1/{morayping.md => borayping.md} (100%)
 rename docs/man/man1/{morayversion.md => borayversion.md} (100%)
 delete mode 100644 docs/man/man1/delmany.md
 delete mode 100644 docs/man/man1/findobjects.md
 delete mode 100644 docs/man/man1/gettokens.md
 delete mode 100644 docs/man/man1/reindexobjects.md
 delete mode 100644 docs/man/man1/sql.md
 delete mode 100644 docs/man/man1/updatemany.md
 rename docs/man/man3/{moray.md => boray.md} (99%)
 rename lib/{bucket_buckets.js => buckets.js} (83%)
 rename lib/{bucket_objects.js => object.js} (69%)
 delete mode 100644 lib/objects.js
 delete mode 100644 lib/tokens.js
 create mode 100644 man/man1/boray.1
 create mode 100644 man/man1/borayping.1
 create mode 100644 man/man1/borayversion.1
 create mode 100644 man/man3/boray.3

diff --git a/CHANGES.md b/CHANGES.md
index b12026f..137cfeb 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,146 +1,6 @@
 # Changelog
 
-## v3.6.0
-
-* [MORAY-494](http://smartos.org/bugview/MORAY-494) node-moray should update fast and artedi dependencies for node-artedi#17
-
-## v3.5.0
-
-* [TRITON-375](http://smartos.org/bugview/TRITON-375) node-moray should expose similar metrics to moray server
-
-## v3.4.2
-
-* [MORAY-455](http://smartos.org/bugview/MORAY-455) moray asks fast to hold onto too many recent RPC requests
-
-## v3.4.1
-
-* [MORAY-422](http://smartos.org/bugview/MORAY-422) node-moray could smooth over connection shuffling
-
-## v.3.4.0
-
-* [MORAY-428](https://smartos.org/bugview/MORAY-428) Make it safer to use reindexing buckets
-
-## v.3.3.0
-
-* [MANTA-3371](https://smartos.org/bugview/MANTA-3371) triggers cannot be installed with any vnodes in read-only mode
-
-## v3.2.1
-
-* [MORAY-409](http://smartos.org/bugview/MORAY-409) Moray client needs to pass timeout to server for sql()
-
-## v3.2.0
-
-* [MORAY-104](https://smartos.org/bugview/MORAY-104) disallow filtering on non-indexed fields except interactively
-
-## v3.1.1
-
-* [MORAY-396](https://smartos.org/bugview/MORAY-396) update to cueball v2
-
-## v3.1.0
-
-* [MORAY-254](https://smartos.org/bugview/MORAY-254) moray tools need manual
-  pages
-
-## v3.0.0
-
-* [MORAY-280](https://smartos.org/bugview/MORAY-280) Support SRV records in node-moray
-* [MORAY-381](https://smartos.org/bugview/MORAY-381) want default values with cueballOptions
-* [MORAY-380](https://smartos.org/bugview/MORAY-380) translateLegacyOptions not setting "service"
-* [MORAY-383](https://smartos.org/bugview/MORAY-383) moray client log entries could include specific backend details
-* [MORAY-384](https://smartos.org/bugview/MORAY-384) moray's default connection backoff need to be much less aggressive
-* [MORAY-385](https://smartos.org/bugview/MORAY-385) moray tools need some cleanup
-* [MORAY-349](https://smartos.org/bugview/MORAY-349) remove "backfill" command
-
-**Breaking changes:**
-
-* Constructor arguments have changed.  The only change that will explicitly
-  break existing v2 consumers is that the `cueballOptions.domain` option is no
-  longer supported.  However, it's strongly recommended that all consumers
-  update their constructor arguments to support SRV-based service discovery with
-  bootstrap resolvers.  Best practices (with examples) are included in the
-  `moray(3)` manual page.  See [RFD
-  73](https://github.com/joyent/rfd/tree/master/rfd/0073) for details on the
-  reasons for the change.
-* The `backfill` command has been removed.  Use `reindexobjects` instead.
-
-
-## v2.0.1
-
-* [MORAY-377](http://smartos.org/bugview/MORAY-377) moray client masks callers'
-  failing to add "error" listeners
-
-## v2.0.0
-
-This is a major rewrite of the guts of this module, primarily to improve
-scalability with large numbers of servers and robustness in the face of
-networking failures.
-
-**Breaking changes**:
-
-* The `version()` method has been removed.  See [RFD
-  33](https://github.com/joyent/rfd/blob/master/rfd/0033/README.md#compatibility-and-upgrade-impact)
-  for details.  This was generally not used correctly.
-* Errors emitted by RPC calls have different names, because
-  server-side errors are now wrapped with errors that reflect the RPC context.
-  For example, instead of SomeServerSideError, you'll have a FastRequestError
-  that wraps a FastServerError that wraps a SomeServerSideError.  You can
-  restore the old behavior by supplying the `unwrapErrors` constructor
-  argument, which will cause the client to emit the same errors it emitted
-  before (without the Fast-level wrappers).  **Callers should generally be
-  updated to use
-  [VError.findCauseByName](https://github.com/joyent/node-verror#verrorfindcausebynameerr-name)
-  instead of checking the `name` property directly.**
-* `retry.retries` must now be a finite number. Once the number of retries has
-  been exceeded for a backend, the "cueball" module will consider that backend
-  dead, and will take care of periodically checking it to see if it's returned.
-  The recommended and default value is `5`.
-
-**Other changes:**
-
-* The constructor now accepts a more precise set of arguments related to
-  timeouts, delays, and retry policies.  See the constructor's comments for
-  usage information.  The constructor is backwards-compatible, so you can still
-  supply the same arguments that were used by the old client version (though you
-  cannot mix old and new styles).
-* This version replaced much of the implementation to use
-  [node-cueball](https://github.com/joyent/node-cueball) for service discovery
-  and connection health management.  Previously, this module did its own
-  service discovery that did not support eDNS or TCP-based DNS, so it did not
-  scale well with large numbers of servers.  Previously, the node-fast module
-  was responsible for connection health management.  However, node-fast didn't
-  actually handle explicit network errors; it simply attempted to avoid reading
-  and writing on sockets that were no longer readable or writable.  This worked
-  surprisingly well in the face of servers simply restarting, but it failed
-  badly when the socket experienced a true network failure (like ETIMEDOUT or
-  ECONNRESET).  Since both of these problems are both hard and need to be solved
-  for other components (e.g., HTTP-based components), they were separated into
-  the new "cueball" module.
-* Related to that, this version replaced the Fast protocol implementation with
-  [node-fast version 2](https://github.com/joyent/node-fast).  node-fast v2 is
-  substantially simpler than the previous implementation of fast (because it
-  does not deal with service discovery or connection health management) and much
-  more robust to protocol errors than the previous implementation was.
-
-Specific issues fixed:
-
-* [MORAY-362](http://smartos.org/bugview/MORAY-362) reindexobjects always fails on missing vasync dependency
-* [MORAY-361](http://smartos.org/bugview/MORAY-361) moray client tools hang forever while moray is down
-* [MORAY-346](http://smartos.org/bugview/MORAY-346) moray client needs work
-* [MORAY-309](http://smartos.org/bugview/MORAY-309) error events should be emitted with prudence
-* [MORAY-257](http://smartos.org/bugview/MORAY-257) MorayClient should emit errors properly
-* [MORAY-300](http://smartos.org/bugview/MORAY-300) node-moray requires log parameter unnecessarily for version and ping
-* [MORAY-334](http://smartos.org/bugview/MORAY-334) minnow clients reporting no active connections when moray seems to be up
-* [MORAY-356](http://smartos.org/bugview/MORAY-356) moray client continuing to periodically check DNS after close
-* [MORAY-325](http://smartos.org/bugview/MORAY-325) node-moray client emits 'close' event even if some connections are still open
-* [MORAY-365](http://smartos.org/bugview/MORAY-365) command-line tools are not checked for style or lint
-* [MORAY-366](http://smartos.org/bugview/MORAY-366) want command-line tool for "gettokens" RPC call
-* [MORAY-238](http://smartos.org/bugview/MORAY-238) node-moray retry policy does not match what's configured
-* [MORAY-357](http://smartos.org/bugview/MORAY-357) moray errors indict client for server-side problem
-
-
-## v1 and earlier
-
-Major version 1 and earlier (including v1.0.1 and everything before that) were
-distributed using git URLs, not npm.  As a result, they didn't really support
-semver.  These may be retroactively published to npm to aid the transition to
-v2.
+## v0.1.0 Forked from [node-moray](https://github.com/joyent/node-moray). Please
+  see the `node-moray` [CHANGES
+  file](https://github.com/joyent/node-moray/CHANGES.md) for the history of
+  `node-moray` changes prior to this fork.
diff --git a/README.md b/README.md
index f146b3d..b07e93e 100644
--- a/README.md
+++ b/README.md
@@ -5,10 +5,10 @@
 -->
 
 <!--
-    Copyright (c) 2016, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
-# node-moray
+# node-boray
 
 This repository is part of the Joyent Triton and Joyent Manta projects. See the
 [Triton](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) and
@@ -20,24 +20,19 @@ contributing guidelines and general documentation at the main
 
 # Overview
 
-This is the Node.js client SDK for [Moray](https://github.com/joyent/moray).
+This is the Node.js client SDK for [Boray](https://github.com/joyent/boray).
 You can install it with:
 
-    npm install moray
+    npm install boray
 
 or, to put the manual pages and CLI tools on your path:
 
-    npm install -g moray
+    npm install -g boray
 
 For usage information, see:
 
-* [moray(1)](./docs/man/man1/moray.md) (overview manual page for CLI tools)
-* [moray(3)](./docs/man/man3/moray.md) (overview manual page for library
+* [boray(1)](./docs/man/man1/boray.md) (overview manual page for CLI tools)
+* [boray(3)](./docs/man/man3/boray.md) (overview manual page for library
   interface)
-* [Moray server](https://github.com/joyent/moray) overview and reference
+* [Boray server](https://github.com/joyent/boray) overview and reference
   documentation
-
-# Testing
-
-To test the Moray client, see the separate
-[moray-test-suite](https://github.com/joyent/moray-test-suite) repository.
diff --git a/bin/morayping b/bin/borayping
similarity index 100%
rename from bin/morayping
rename to bin/borayping
diff --git a/bin/morayversion b/bin/borayversion
similarity index 100%
rename from bin/morayversion
rename to bin/borayversion
diff --git a/bin/delmany b/bin/delmany
deleted file mode 100755
index d60e03c..0000000
--- a/bin/delmany
+++ /dev/null
@@ -1,81 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-
-var clientOptions, parser, client;
-var delOptions, bucket, filter, p;
-
-cmdutil.configure({
-    'usageMessage': 'delete objects from Moray matching a filter',
-    'synopses': [
-        moraycli.commonUsage + ' [-l limit] [-o offset] BUCKET FILTER'
-    ]
-});
-
-clientOptions = {};
-delOptions = {};
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': 'l:o:',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function (option) {
-        switch (option.option) {
-        case 'l':
-            p = parseInt(option.optarg, 10);
-            if (isNaN(p) || p < 0) {
-                cmdutil.usage('unsupported value for -l: "%s"', option.optarg);
-            }
-            delOptions.limit = p;
-            break;
-
-        case 'o':
-            p = parseInt(option.optarg, 10);
-            if (isNaN(p) || p < 0) {
-                cmdutil.usage('unsupported value for -o: "%s"', option.optarg);
-            }
-            delOptions.offset = p;
-            break;
-
-        default:
-            cmdutil.usage();
-            break;
-        }
-    }
-});
-
-if (parser.optind() >= process.argv.length)
-    cmdutil.usage('missing required arguments: "bucket"');
-bucket = process.argv[parser.optind()];
-
-if ((parser.optind() + 1) >= process.argv.length)
-    cmdutil.usage('missing required arguments: "filter"');
-filter = process.argv[parser.optind() + 1];
-
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    client.deleteMany(bucket, filter, delOptions, function (err, meta) {
-        if (err) {
-            cmdutil.fail(err);
-        }
-
-        console.log(meta.count + ' records deleted');
-        moraycli.cliFinish(cmdutil, client);
-        client.close();
-    });
-});
diff --git a/bin/findobjects b/bin/findobjects
deleted file mode 100755
index c0140d0..0000000
--- a/bin/findobjects
+++ /dev/null
@@ -1,122 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-
-var clientOptions, parser, client;
-var findOptions, bucket, filter, p;
-var prettyPrint = true;
-
-cmdutil.configure({
-    'usageMessage': 'fetch objects from Moray matching a filter',
-    'synopses': [
-        moraycli.commonUsage + '[-Hins] [-a attr] [-d attr] [-l limit] ' +
-            '[-o offset] BUCKET FILTER'
-    ]
-});
-
-clientOptions = {};
-findOptions = {};
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': 'a:d:Hil:no:s',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function (option) {
-        switch (option.option) {
-        case 'a':
-            findOptions.sort = {
-                'order': 'ASC',
-                'attribute': option.optarg
-            };
-            break;
-
-        case 'd':
-            findOptions.sort = {
-                'order': 'DESC',
-                'attribute': option.optarg
-            };
-            break;
-
-        case 'H':
-            prettyPrint = false;
-            break;
-
-        case 'i':
-            findOptions.requireIndexes = true;
-            break;
-
-        case 'l':
-            p = parseInt(option.optarg, 10);
-            if (isNaN(p) || p < 0) {
-                cmdutil.usage('unsupported value for -l: "%s"', option.optarg);
-            }
-            findOptions.limit = p;
-            break;
-
-        case 'n':
-            findOptions.no_count = true;
-            break;
-
-        case 'o':
-            p = parseInt(option.optarg, 10);
-            if (isNaN(p) || p < 0) {
-                cmdutil.usage('unsupported value for -o / --offset: "%s"',
-                    option.optarg);
-            }
-            findOptions.offset = p;
-            break;
-
-        case 's':
-            findOptions.sql_only = true;
-            break;
-
-        default:
-            cmdutil.usage();
-            break;
-        }
-    }
-});
-
-if (parser.optind() >= process.argv.length)
-    cmdutil.usage('missing required arguments: "bucket"');
-bucket = process.argv[parser.optind()];
-
-if ((parser.optind() + 1) >= process.argv.length)
-    cmdutil.usage('missing required arguments: "filter"');
-filter = process.argv[parser.optind() + 1];
-
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    var req;
-
-    req = client.findObjects(bucket, filter, findOptions);
-
-    req.on('error', cmdutil.fail);
-
-    req.on('record', function (obj) {
-        if (prettyPrint)
-            console.log(JSON.stringify(obj, null, 2));
-        else
-            console.log(JSON.stringify(obj));
-    });
-
-    req.on('end', function () {
-        moraycli.cliFinish(cmdutil, client);
-        client.close();
-    });
-});
diff --git a/bin/gettokens b/bin/gettokens
deleted file mode 100755
index 3f135df..0000000
--- a/bin/gettokens
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-
-var clientOptions, parser, client;
-var bucket, key;
-
-cmdutil.configure({
-    'usageMessage': 'fetch list of shards from electric-moray',
-    'synopses': [ moraycli.commonUsage ]
-});
-
-clientOptions = {};
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': '',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage
-});
-
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    client.getTokens(function callback(err, b) {
-        if (err) {
-            cmdutil.fail(err);
-        }
-
-        console.log(JSON.stringify(b, null, 2));
-        moraycli.cliFinish(cmdutil, client);
-        client.close();
-    });
-});
diff --git a/bin/reindexobjects b/bin/reindexobjects
deleted file mode 100755
index 0ba6ed2..0000000
--- a/bin/reindexobjects
+++ /dev/null
@@ -1,91 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-
-var clientOptions, parser, client;
-var bucket, count;
-
-cmdutil.configure({
-    'usageMessage': 'reindex objects in a Moray bucket',
-    'synopses': [ moraycli.commonUsage + ' BUCKET [COUNT]' ]
-});
-
-clientOptions = {};
-count = 100;
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': '',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage
-});
-
-if (parser.optind() >= process.argv.length)
-    cmdutil.usage('missing required arguments: "bucket"');
-bucket = process.argv[parser.optind()];
-
-if (parser.optind() + 1 < process.argv.length) {
-    count = parseInt(process.argv[parser.optind() + 1], 10);
-    if (isNaN(count) || count <= 0) {
-        cmdutil.usage('unsupported value for COUNT: "%s"',
-            process.argv[parser.optind() + 1]);
-    }
-}
-
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    client.getBucket(bucket, function (err, bucketinfo) {
-        if (err) {
-            cmdutil.fail(err);
-            return;
-        }
-
-        if (!bucketinfo.reindex_active ||
-            Object.keys(bucketinfo.reindex_active).length === 0) {
-            console.error('bucket "%s": no reindexing required', bucket);
-            moraycli.cliFinish(cmdutil, client);
-            client.close();
-        } else {
-            reindexLoop(function (err2) {
-                if (err2) {
-                    cmdutil.fail(err2);
-                }
-
-                moraycli.cliFinish(cmdutil, client);
-                client.close();
-            });
-        }
-    });
-});
-
-function reindexLoop(cb) {
-    client.reindexObjects(bucket, count, function (err, res) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (res.processed === 0) {
-            console.error('bucket "%s": all objects processed', bucket);
-            cb();
-        } else {
-            console.error('bucket "%s": %d object%s processed (continuing)',
-                bucket, res.processed, res.processed == 1 ? '' : 's');
-            reindexLoop(cb);
-        }
-    });
-}
diff --git a/bin/sql b/bin/sql
deleted file mode 100755
index 3d30f23..0000000
--- a/bin/sql
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-
-var clientOptions, parser, sql, client;
-
-cmdutil.configure({
-    'usageMessage': 'execute raw SQL on Moray-backed database',
-    'synopses': [ moraycli.commonUsage + ' SQL' ]
-});
-
-clientOptions = {};
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': '',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage
-});
-
-if (parser.optind() >= process.argv.length) {
-    cmdutil.usage('missing required argument: "sql"');
-}
-
-sql = process.argv[parser.optind()];
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    var req = client.sql(sql);
-
-    req.once('error', cmdutil.fail);
-
-    req.on('record', function (obj) {
-        if (typeof (obj) === 'object' && obj !== null)
-            console.log(JSON.stringify(obj, null, 2));
-    });
-
-    req.once('end', function () {
-        moraycli.cliFinish(cmdutil, client);
-        client.close();
-    });
-});
diff --git a/bin/updatemany b/bin/updatemany
deleted file mode 100755
index a8ab267..0000000
--- a/bin/updatemany
+++ /dev/null
@@ -1,82 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var cmdutil = require('cmdutil');
-var moray = require('../lib');
-var moraycli = require('../lib/cmd');
-var VError = require('verror');
-
-var clientOptions, parser, client;
-var updateOptions, bucket, filter, changes, p;
-
-cmdutil.configure({
-    'usageMessage': 'update objects in Moray matching a filter',
-    'synopses': [ moraycli.commonUsage + '[-d data] [-l limit] BUCKET FILTER' ]
-});
-
-clientOptions = {};
-changes = {};
-updateOptions = {};
-parser = moraycli.parseCliOptions({
-    'argv': process.argv,
-    'env': process.env,
-    'errstream': process.stderr,
-    'extraOptStr': 'd:l:',
-    'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function (option) {
-        switch (option.option) {
-        case 'd':
-            try {
-                changes = JSON.parse(option.optarg);
-            } catch (ex) {
-                cmdutil.fail(new VError(ex, 'parsing value for -d'));
-            }
-            break;
-
-        case 'l':
-            p = parseInt(option.optarg, 10);
-            if (isNaN(p) || p < 0) {
-                cmdutil.usage('unsupported value for -l: "%s"', option.optarg);
-            }
-            updateOptions.limit = p;
-            break;
-
-        default:
-            cmdutil.usage();
-            break;
-        }
-    }
-});
-
-if (parser.optind() >= process.argv.length)
-    cmdutil.usage('missing required arguments: "bucket"');
-bucket = process.argv[parser.optind()];
-
-if ((parser.optind() + 1) >= process.argv.length)
-    cmdutil.usage('missing required arguments: "filter"');
-filter = process.argv[parser.optind() + 1];
-
-client = moray.createClient(clientOptions);
-client.on('error', cmdutil.fail);
-client.on('connect', function onConnect() {
-    client.updateObjects(bucket, changes, filter, updateOptions,
-        function callback(err, meta) {
-            if (err) {
-                cmdutil.fail(err);
-            }
-
-            console.log(meta);
-            moraycli.cliFinish(cmdutil, client);
-            client.close();
-        });
-});
diff --git a/docs/man/man1/moray.md b/docs/man/man1/boray.md
similarity index 95%
rename from docs/man/man1/moray.md
rename to docs/man/man1/boray.md
index 822558d..c01bedc 100644
--- a/docs/man/man1/moray.md
+++ b/docs/man/man1/boray.md
@@ -2,7 +2,7 @@
 
 ## NAME
 
-moray - command-line tools for Moray
+boray - command-line tools for Boray
 
 ## DESCRIPTION
 
@@ -30,16 +30,11 @@ Working with objects:
 * `getobject`: fetch the contents of an object by primary key
 * `delobject`: delete an object by primary key
 * `findobjects`: fetch the contents of multiple objects using a filter
-* `delmany`: delete multiple objects using a filter
-* `updatemany`: update multiple objects using a filter
-* `reindexobjects`: populate a newly-added index
 
 Working with remote servers:
 
 * `morayping`: check whether Moray is online
 * `morayversion`: check the version of a Moray server
-* `sql`: execute a SQL string on a Moray server
-* `gettokens`: fetch the list of shards from electric-moray
 
 The tools in this package support two modes for locating the remote Moray server
 on which to operate:
@@ -264,7 +259,7 @@ Finally, remove the bucket:
 
 ## SEE ALSO
 
-`moray(3)`, `delbucket(1)`, `delmany(1)`, `delobject(1)`, `findobjects(1)`,
+`boray(3)`, `delbucket(1)`, `delmany(1)`, `delobject(1)`, `findobjects(1)`,
 `getbucket(1)`, `getobject(1)`, `gettokens(1)`, `listbuckets(1)`,
 `morayping(1)`, `morayversion(1)`, `putbucket(1)`, `putobject(1)`,
 `reindexobjects(1)`, `sql(1)`, `updatemany(1)`,
diff --git a/docs/man/man1/morayping.md b/docs/man/man1/borayping.md
similarity index 100%
rename from docs/man/man1/morayping.md
rename to docs/man/man1/borayping.md
diff --git a/docs/man/man1/morayversion.md b/docs/man/man1/borayversion.md
similarity index 100%
rename from docs/man/man1/morayversion.md
rename to docs/man/man1/borayversion.md
diff --git a/docs/man/man1/delmany.md b/docs/man/man1/delmany.md
deleted file mode 100644
index ec966bd..0000000
--- a/docs/man/man1/delmany.md
+++ /dev/null
@@ -1,49 +0,0 @@
-# delmany 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-delmany - delete multiple objects using a filter
-
-## SYNOPSIS
-
-`delmany [COMMON_OPTIONS] [-l LIMIT] [-o OFFSET] BUCKET FILTER`
-
-## DESCRIPTION
-
-Deletes objects from bucket `BUCKET` whose properties match the filter `FILTER`.
-Like `findobjects`, `delmany` operations are always bounded in size.  See the
-`-l LIMIT` option.  You must use multiple invocations to remove arbitrarily
-large lists of objects.
-
-`FILTER` is an LDAP-like filter string described in `findobjects(1)`.  The
-caveats described there around the use of unindexed fields apply to filters used
-with `delmany` as well.
-
-## OPTIONS
-
-`-l LIMIT`
-  Remove at most `LIMIT` objects.  This interacts badly with filters on
-  unindexed fields, as described in `findobjects(1)`.  If this option is
-  unspecified, a default limit is provided (which is currently 1000).
-
-`-o OFFSET`
-  Skip the first `OFFSET` objects matching the filter.
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Delete all objects in bucket "accounts" having a "uid" value at most 800:
-
-    $ delmany accounts '(uid<=800)'
-    2 records deleted
-
-## SEE ALSO
-
-`moray(1)`, `putbucket(1)`, `putobject(1)`, `findobjects(1)`
diff --git a/docs/man/man1/findobjects.md b/docs/man/man1/findobjects.md
deleted file mode 100644
index 2b23f9f..0000000
--- a/docs/man/man1/findobjects.md
+++ /dev/null
@@ -1,146 +0,0 @@
-# findobjects 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-findobjects - fetch the contents of multiple objects using a filter
-
-## SYNOPSIS
-
-`findobjects [COMMON_OPTIONS] [-Hins] [-a FIELD] [-d FIELD] [-l LIMIT] [-o OFFSET] BUCKET FILTER`
-
-## DESCRIPTION
-
-Fetches objects from bucket `BUCKET` whose properties match the filter `FILTER`.
-Matching objects are printed as JSON objects similar to the `getobject` command,
-with properties `bucket`, `key`, `value`, `_id`, and `_etag`.  This command also
-provides an additional JSON property on each object:
-
-`_count`
-  A count of total objects matching this filter on the server.  See the
-  important caveats below.
-
-`findobjects` operations are always bounded in size.  See the `-l LIMIT` option.
-You must use multiple invocations using the `-l LIMIT` and `-o OFFSET` options
-(called _pagination_) to process arbitrarily large sets of objects.
-
-`FILTER` is an LDAP-like filter string.  For example, this filter matches
-objects having property "hostname" with value "wormhole":
-
-    (hostname=wormhole)
-
-This filter matches objects having a "unix\_timestamp" property at most
-1482438844:
-
-    (unix_timestamp<=1482438844)
-
-This filter matches objects meeting both constraints:
-
-    (&(hostname=wormhole)(unix_timestamp<=1482438844))
-
-And this filter matches objects meeting either one:
-
-    (|(hostname=wormhole)(unix_timestamp<=1482438844))
-
-In order to avoid expensive table scans, Moray requires that filter strings use
-at least one of the bucket's indexed fields in a way that could prune results
-(e.g., not just on one side of an "OR" clause).  Note that you can still
-construct filters that require table scans (e.g., `(hostname=*)`), and
-reasonable-looking filters can still behave pathologically.  Performance depends
-significantly on the behavior of the underlying data store.  The requirement
-around indexed fields is a heuristic to prevent obviously-pathological behavior,
-not a guarantee of good behavior.
-
-Filters can include both indexed and unindexed fields, but **using unindexed
-fields in filters is strongly discouraged.**  They cannot be used correctly with
-pagination (the `-o OFFSET` and `-l LIMIT` options) and they do not produce
-correct values for `_count`.  Attempting to use these options with filters that
-use unindexed fields often results in truncated result sets.
-
-
-## OPTIONS
-
-`-a FIELD`
-  Sort results in ascending order by indexed field `FIELD`.
-
-`-d DESC`
-  Sort results in descending order by indexed field `FIELD`.
-
-`-H`
-  Print objects using minimal JSON with one object per line (instead of
-  inserting newlines within objects and indenting for readability)
-
-`-i`
-  Require all fields used in `FILTER` to have associated usable indexes.  That
-  is, every field mentioned in `FILTER` must have a corresponding index, and no
-  field must be being re-indexed.  If the requirement is not met, the command
-  will return an error.
-
-`-l LIMIT`
-  Return at most `LIMIT` objects.  With `-o OFFSET`, this can be used to page
-  through a large result set.  However, this interacts badly with filters on
-  undexed fields as described above.  If this option is unspecified, a default
-  limit is provided (which is currently 1000).
-
-`-n`
-  Do not report the `_count` field with each object.  (This also skips
-  executing the underlying query on the server to perform the count.)
-
-`-o OFFSET`
-  Skip the first `OFFSET` objects matching the filter.  With `-l LIMIT`, this
-  can be used to page through a large result set.
-
-`-s`
-  Do not execute the query, but instead report the SQL strings that would be
-  used to execute the query on the underlying data store.
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Fetch objects in "accounts" having a non-NULL value of `loginName`:
-
-    $ findobjects accounts '(loginName=*)'
-
-Fetch objects in "accounts" having a numeric uid at most 800:
-
-    $ findobjects accounts '(uid<=800)'
-
-Run the same query, sorting the results in increasing order of uid:
-
-    $ findobjects -a uid accounts '(uid<=800)'
-
-Run the above query, fetching only the first 5 results:
-
-    $ findobjects -l 5 accounts '(uid<=800)'
-
-Run the above query, fetching the second 10 results:
-
-    $ findobjects -o 5 -l 10 accounts '(uid<=800)'
-
-Fetch the SQL that would be used to execute the previous query:
-
-    $ findobjects -s -o 5 -l 10 accounts '(uid<=800)'
-    {
-      "count": "SELECT count(1) over () as _count, '7e99cfd6-9758-64a1-e20a-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
-      "query": "SELECT *, '7e99cfd6-9758-64a1-e20a-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
-      "args": [
-        800
-      ]
-    }
-
-## SEE ALSO
-
-`moray(1)`, `putbucket(1)`, `putobject(1)`, `getobject(1)`, `delmany(1)`,
-`updatemany(1)`.
-
-## BUGS
-
-For the reasons mentioned above, it is generally considered a bug that Moray
-allows filter strings to use unindexed fields.  This is likely to change in
-future versions.
diff --git a/docs/man/man1/gettokens.md b/docs/man/man1/gettokens.md
deleted file mode 100644
index 0af1bf4..0000000
--- a/docs/man/man1/gettokens.md
+++ /dev/null
@@ -1,61 +0,0 @@
-# gettokens 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-gettokens - fetch the list of shards from electric-moray
-
-## SYNOPSIS
-
-`gettokens [COMMON_OPTIONS]`
-
-## DESCRIPTION
-
-Reports the list of physical shards behind an electric-moray instance.
-
-Electric-moray is a component typically deployed in front of several separate
-Moray shards.  Electric-moray instances speak the Moray protocol to their
-clients, but they use consistent hashing on some field of each object to select
-the appropriate backend to handle each request.  (This functions similar to a
-layer-7 load balancer.)  A full discussion of electric-moray is beyond the scope
-of this documentation.
-
-For this command, the service specified with the `COMMON_OPTIONS` should be an
-electric-moray instance, not a moray instance.
-
-## OPTIONS
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Using an electric-moray service, this operation reports a list of URLs:
-
-    $ gettokens -h electric-moray.emy-10.joyent.us
-    {
-      "tokens": [
-        "tcp://1.moray.emy-10.joyent.us:2020",
-        "tcp://2.moray.emy-10.joyent.us:2020"
-      ]
-    }
-
-Using most Moray servers, this operation is not supported:
-
-    $ gettokens
-    gettokens: moray client ("172.27.10.72:52387" to "172.27.10.76:2020"): request failed: server error: Operation not supported
-
-## SEE ALSO
-
-`moray(1)`
-
-## BUGS
-
-It's not clear why backend shards are called "tokens".
-
-This command likely belongs with an electric-moray tool suite, rather than the
-Moray tool suite.
diff --git a/docs/man/man1/reindexobjects.md b/docs/man/man1/reindexobjects.md
deleted file mode 100644
index 5c028ea..0000000
--- a/docs/man/man1/reindexobjects.md
+++ /dev/null
@@ -1,74 +0,0 @@
-# reindexobjects 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-reindexobjects - populate a newly-added index
-
-## SYNOPSIS
-
-`reindexobjects [COMMON_OPTIONS] BUCKET [COUNT]`
-
-## DESCRIPTION
-
-Reindexing is the process by which the internal representation of objects is
-updated to account for indexes that were added after the object was last
-written.  For example, if you add a new index to a bucket that already contains
-a million objects, it's necessary to examine the raw JSON value of each object,
-extract the value of the newly-indexed field, and add that value to the index.
-Until this has been completed for all objects in the bucket, the index is
-incomplete, and it will not be used in queries with `findobjects` and related
-tools.  Because reindexing every object in the bucket can take quite a while,
-the server does not do it automatically when the index is created with
-`putbucket(1)`.  Instead, users that add indexes must use the `reindexobjects`
-command to reindex all the objects in a bucket.
-
-`reindexobjects` reindexes any objects in bucket `BUCKET` that have not been
-reindexed since the last time an indexed field was added to the bucket (e.g.,
-using `putbucket(1)`).  This operation performs as many queries as necessary,
-each reindexing up to `COUNT` objects (which defaults to 100).  The command
-stops either when all objects have been reindexed or when an error occurs.  This
-operation can take an arbitrarily long time on arbitrarily large buckets.
-
-Reindexing is idempotent.  For each object, this operation updates all indexes
-that were created after the object was written.  If you add multiple indexed
-fields, even in multiple operations, you only need to reindex each object once.
-
-## OPTIONS
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Assuming that version 1 of a bucket has been created previously:
-
-    $ putbucket -x 1 -u loginName -u uid:number accounts
-
-and some records have been stored with other fields:
-
-    $ putobject -d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \
-        accounts lisa
-    $ putobject -d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \
-        accounts hugh
-
-and someone has added an index on the field "country" in the next version of
-the bucket:
-
-    $ putbucket -x 2 -u loginName -u uid:number -i country accounts
-
-The bucket's contents can be reindexed with:
-
-    $ reindexobjects accounts
-    bucket "accounts": 2 objects processed (continuing)
-    bucket "accounts": all objects processed
-
-See the example in `moray(1)`.
-
-## SEE ALSO
-
-`moray(1)`, `putbucket(1)`
diff --git a/docs/man/man1/sql.md b/docs/man/man1/sql.md
deleted file mode 100644
index b9ca66f..0000000
--- a/docs/man/man1/sql.md
+++ /dev/null
@@ -1,50 +0,0 @@
-# sql 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-sql - check of a Moray server is functioning
-
-## SYNOPSIS
-
-`sql [COMMON_OPTIONS] SQL`
-
-## DESCRIPTION
-
-Executes a raw SQL command `SQL` against Moray's backing data store.  This is
-intended for experienced operators and developers to run ad hoc queries (usually
-read-only).  A mistake in the `SQL` string can cause all manner of bad behavior,
-including database deadlock, data corruption, and data loss.  This tool and
-Moray perform almost no validation on the input string.
-
-This should not be used as part of normal operation.  Normal operations should
-be first-classed as specific Moray requests with associated tools.
-
-## OPTIONS
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Run a simple SQL `SELECT` query for the current time:
-
-    $ sql 'SELECT NOW()'
-    {
-      "now": "2017-01-27T17:12:42.651Z"
-    }
-
-## SEE ALSO
-
-`moray(1)`
-
-## BUGS
-
-Moray removes newlines from all SQL commands that it executes, including those
-specified with this command.  The results can be surprising.  This most commonly
-affects SQL "--" comments, which run to the end of the line.  Since newlines are
-stripped, everything after the first opening "--" gets commented out.
diff --git a/docs/man/man1/updatemany.md b/docs/man/man1/updatemany.md
deleted file mode 100644
index 6e369df..0000000
--- a/docs/man/man1/updatemany.md
+++ /dev/null
@@ -1,54 +0,0 @@
-# updatemany 1 "January 2017" Moray "Moray Client Tools"
-
-## NAME
-
-updatemany - update multiple objects using a filter
-
-## SYNOPSIS
-
-`updatemany [COMMON_OPTIONS] [-d DATA] [-l LIMIT] BUCKET FILTER`
-
-## DESCRIPTION
-
-Updates objects from bucket `BUCKET` whose properties match the filter `FILTER`.
-`DATA` is a JSON object describing what to update.  Properties of `DATA` must be
-indexed fields.  For each matching row, the fields specified in `DATA` will be
-updated to their corresponding values in `DATA`.  Other fields are unchanged.
-
-Like `findobjects`, `updatemany` operations are always bounded in size.  See the
-`-l LIMIT` option.  You must use multiple invocations to update arbitrarily
-large lists of objects.
-
-`FILTER` is an LDAP-like filter string described in `findobjects(1)`.  The
-caveats described there around the use of unindexed fields apply to filters used
-with `updatemany` as well.
-
-## OPTIONS
-
-`-d DATA`
-  Specifies the fields to update in each matching object.
-
-`-l LIMIT`
-  Remove at most `LIMIT` objects.  This interacts badly with filters on
-  unindexed fields, as described in `findobjects(1)`.  If this option is
-  unspecified, a default limit is provided (which is currently 1000).
-
-See `moray(1)` for information about the `COMMON_OPTIONS`, which control
-the log verbosity and how to locate the remote server.
-
-## ENVIRONMENT
-
-See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
-`MORAY_URL` environment variables.
-
-## EXAMPLES
-
-Update objects in bucket "accounts" having a value of "country" equal to "UK"
-so that the "country" is now "United Kingdom":
-
-    $ updatemany -d '{ "country": "United Kingdom" }' accounts '(country=UK)'
-    { count: 1, etag: 'ue6d321d' }
-
-## SEE ALSO
-
-`moray(1)`, `putbucket(1)`, `putobject(1)`, `findobjects(1)`
diff --git a/docs/man/man3/moray.md b/docs/man/man3/boray.md
similarity index 99%
rename from docs/man/man3/moray.md
rename to docs/man/man3/boray.md
index 1e4b95e..fae6b17 100644
--- a/docs/man/man3/moray.md
+++ b/docs/man/man3/boray.md
@@ -1,8 +1,8 @@
-# moray 3 "May 2018" Moray "Moray Client Library"
+# boray 3 "April 2019" Boray "Boray Client Library"
 
 ## NAME
 
-moray - Node.js client library for Moray
+boray - Node.js client library for Boray
 
 ## DESCRIPTION
 
diff --git a/lib/bucket_buckets.js b/lib/buckets.js
similarity index 83%
rename from lib/bucket_buckets.js
rename to lib/buckets.js
index b4f5f0c..6571596 100644
--- a/lib/bucket_buckets.js
+++ b/lib/buckets.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * lib/buckets.js: bucket-related client API functions.  These functions are
  * invoked by same-named methods in lib/client.js to do the bulk of the work
  * associated with making RPC requests.  The arguments and semantics of these
- * functions are documented in the Moray API.
+ * functions are documented in the Boray API.
  */
 
 var EventEmitter = require('events').EventEmitter;
@@ -45,7 +45,7 @@ function createBucket(rpcctx, owner, bucket, vnode, callback) {
     var log = rpc.childLogger(rpcctx, opts);
 
     /*
-     * electric-moray sends trailing null values with this response.  These are
+     * electric-boray sends trailing null values with this response.  These are
      * not normally allowed unless we specify ignoreNullValues.
      */
     rpc.rpcCommonBufferData({
@@ -63,13 +63,12 @@ function createBucketNoVnode(rpcctx, owner, bucket, callback) {
     assert.string(bucket, 'bucket');
     assert.func(callback, 'callback');
 
-    // cfg = serializeBucketConfig(config);
     var opts = makeBucketOptions({});
 
     var log = rpc.childLogger(rpcctx, opts);
 
     /*
-     * electric-moray sends trailing null values with this response.  These are
+     * electric-boray sends trailing null values with this response.  These are
      * not normally allowed unless we specify ignoreNullValues.
      */
     rpc.rpcCommonBufferData({
@@ -267,7 +266,7 @@ function listBuckets(rpcctx, owner, vnode) {
             res.emit('end');
         }
 
-        res.emit('_moray_internal_rpc_done');
+        res.emit('_boray_internal_rpc_done');
     });
 
     req.on('data', function (msg) {
@@ -299,7 +298,7 @@ function listBucketsNoVnode(rpcctx, owner) {
             res.emit('end');
         }
 
-        res.emit('_moray_internal_rpc_done');
+        res.emit('_boray_internal_rpc_done');
     });
 
     req.on('data', function (msg) {
@@ -312,30 +311,6 @@ function listBucketsNoVnode(rpcctx, owner) {
 
 ///--- Helpers
 
-/*
- * Create a shallow copy of the given configuration, but serialize functions
- * in the "pre" and "post" arrays.
- */
-function serializeBucketConfig(config) {
-    var cfg, k;
-
-    cfg = {};
-    if (typeof (config) === 'object' && config !== null) {
-        for (k in config) {
-            cfg[k] = config[k];
-        }
-    }
-
-    cfg.pre = (config.pre || []).map(function (f) {
-        return (f.toString());
-    });
-    cfg.post = (config.post || []).map(function (f) {
-        return (f.toString());
-    });
-
-    return (cfg);
-}
-
 /*
  * Create options suitable for a bucket-related RPC call by creating a deep copy
  * of the options passed in by the caller.  If the caller did not specify a
@@ -347,30 +322,6 @@ function makeBucketOptions(options) {
     return (opts);
 }
 
-/* XXX will a bad bucket here will crash the client? */
-function parseBucketConfig(obj) {
-    function parseFunctor(f) {
-        var fn;
-        /* jsl:ignore */
-        eval('fn = ' + f);
-        /* jsl:end */
-        return (fn);
-    }
-    var res = {
-        name: obj.name,
-        index: JSON.parse(obj.index),
-        pre: JSON.parse(obj.pre).map(parseFunctor),
-        post: JSON.parse(obj.post).map(parseFunctor),
-        options: JSON.parse(obj.options),
-        mtime: new Date(obj.mtime)
-    };
-    if (obj.reindex_active) {
-        res.reindex_active = JSON.parse(obj.reindex_active);
-    }
-    return (res);
-}
-
-
 ///--- Exports
 
 module.exports = {
diff --git a/lib/client.js b/lib/client.js
index 35be617..d208580 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -9,8 +9,8 @@
  */
 
 /*
- * lib/client.js: Moray client implementation.  The MorayClient object is the
- * handle through which consumers make RPC requests to a remote Moray server.
+ * lib/client.js: Boray client implementation.  The BorayClient object is the
+ * handle through which consumers make RPC requests to a remote Boray server.
  */
 
 var EventEmitter = require('events').EventEmitter;
@@ -23,13 +23,12 @@ var jsprim = require('jsprim');
 var libuuid = require('libuuid');
 var VError = require('verror');
 
-var MorayConnectionPool = require('./pool');
+var BorayConnectionPool = require('./pool');
 var FastConnection = require('./fast_connection');
-var buckets = require('./bucket_buckets');
+var buckets = require('./buckets');
 var meta = require('./meta');
-var objects = require('./bucket_objects');
-var tokens = require('./tokens');
-var parseMorayParameters = require('./client_params').parseMorayParameters;
+var objects = require('./objects');
+var parseBorayParameters = require('./client_params').parseBorayParameters;
 
 
 ///--- Default values for function arguments
@@ -38,10 +37,10 @@ var fastNRecentRequests         = 5;
 var dflClientTcpKeepAliveIdle   = 10000;  /* milliseconds */
 
 /*
- * See MorayClient() constructor.
+ * See BorayClient() constructor.
  */
-var MORAY_CS_OPEN    = 'open';
-var MORAY_CS_CLOSING = 'closing';
+var BORAY_CS_OPEN    = 'open';
+var BORAY_CS_CLOSING = 'closing';
 
 
 ///--- Helpers
@@ -58,7 +57,7 @@ function emitUnavailable() {
 ///--- API
 
 /*
- * Constructor for the moray client.
+ * Constructor for the boray client.
  *
  * This client uses the cueball module to maintain a pool of TCP connections to
  * the IP addresses associated with a DNS name.  cueball is responsible for
@@ -67,11 +66,11 @@ function emitUnavailable() {
  * balancing requests across connections.
  *
  * The options accepted, the constraints on them, and several examples are
- * described in the moray(3) manual page inside this repository.  Callers can
+ * described in the boray(3) manual page inside this repository.  Callers can
  * also specify any number of legacy options documented with
  * populateLegacyOptions().
  */
-function MorayClient(options) {
+function BorayClient(options) {
     var self = this;
     var coptions, cueballOptions, resolverInput;
     var resolver;
@@ -87,7 +86,7 @@ function MorayClient(options) {
     assert.optionalBool(options.requireOnlineReindexing,
         'options.requireOnlineReindexing');
 
-    coptions = parseMorayParameters(options);
+    coptions = parseBorayParameters(options);
     cueballOptions = coptions.cueballOptions;
 
     /* Read-only metadata used for toString() and the like. */
@@ -101,7 +100,7 @@ function MorayClient(options) {
 
     /* Helper objects. */
     this.log = options.log.child({
-        component: 'MorayClient',
+        component: 'BorayClient',
         domain: cueballOptions.domain
     }, true);
 
@@ -131,7 +130,7 @@ function MorayClient(options) {
         }
     });
     if (resolver instanceof Error) {
-        throw new VError(resolver, 'invalid moray client configuration');
+        throw new VError(resolver, 'invalid boray client configuration');
     }
     resolver.start();
     this.cueballResolver = resolver;
@@ -158,16 +157,16 @@ function MorayClient(options) {
     /*
      * State recorded when close() is invoked.  The closeState is one of:
      *
-     *     MORAY_CS_OPEN        close() has never been invoked
+     *     BORAY_CS_OPEN        close() has never been invoked
      *
-     *     MORAY_CS_CLOSING     close() has been invoked, but we have not
+     *     BORAY_CS_CLOSING     close() has been invoked, but we have not
      *                          finished closing (presumably because outstanding
      *                          requests have not yet aborted)
      *
-     *     MORAY_CS_CLOSED      close process has completed and there are no
+     *     BORAY_CS_CLOSED      close process has completed and there are no
      *                          connections in use any more.
      */
-    this.closeState = MORAY_CS_OPEN;    /* see above */
+    this.closeState = BORAY_CS_OPEN;    /* see above */
     this.nactiveAtClose = null;         /* value of "nactive" at close() */
 
     /*
@@ -177,7 +176,7 @@ function MorayClient(options) {
     if (options.mustCloseBeforeNormalProcessExit) {
         this.onprocexit = function processExitCheck(code) {
             if (code === 0) {
-                throw (new Error('process exiting before moray client closed'));
+                throw (new Error('process exiting before boray client closed'));
             }
         };
         process.on('exit', this.onprocexit);
@@ -185,7 +184,7 @@ function MorayClient(options) {
         this.onprocexit = null;
     }
 
-    this.pool = new MorayConnectionPool({
+    this.pool = new BorayConnectionPool({
         'log': this.log,
         'cueballResolver': this.cueballResolver,
         'cueballSet': this.cueball
@@ -198,7 +197,7 @@ function MorayClient(options) {
     this.cueball.on('stateChanged', this.cueballOnStateChange);
 }
 
-util.inherits(MorayClient, EventEmitter);
+util.inherits(BorayClient, EventEmitter);
 
 /*
  * This getter is provided for historical reasons.  It's not a great interface.
@@ -211,10 +210,10 @@ util.inherits(MorayClient, EventEmitter);
  * _ever_ had a connection.  This accurately reflects what many clients seem
  * interested in, which is whether we've set up yet.
  */
-Object.defineProperty(MorayClient.prototype, 'connected', {
+Object.defineProperty(BorayClient.prototype, 'connected', {
     'get': function () {
         return (this.timeConnected !== null &&
-            this.closeState === MORAY_CS_OPEN);
+            this.closeState === BORAY_CS_OPEN);
     }
 });
 
@@ -227,7 +226,7 @@ Object.defineProperty(MorayClient.prototype, 'connected', {
  * reaches "failed" before "connected", then we emit an error and close the
  * client.  See the "failFast" documentation above for details.
  */
-MorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
+BorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
     var err;
 
     assert.strictEqual(this.timeConnected, null);
@@ -243,7 +242,7 @@ MorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
     } else if (this.failFast && st === 'failed') {
         this.timeCueballInitFailed = new Date();
         this.cueball.removeListener('stateChanged', this.cueballOnStateChange);
-        err = new VError('moray client "%s": failed to establish connection',
+        err = new VError('boray client "%s": failed to establish connection',
             this.hostLabel);
         this.log.warn(err);
         this.emit('error', err);
@@ -255,10 +254,10 @@ MorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
  * Aborts outstanding requests, shuts down all connections, and closes this
  * client down.
  */
-MorayClient.prototype.close = function close() {
+BorayClient.prototype.close = function close() {
     var self = this;
 
-    if (this.closeState !== MORAY_CS_OPEN) {
+    if (this.closeState !== BORAY_CS_OPEN) {
         this.log.warn({
             'closeState': this.closeState,
             'nactiveAtClose': this.nactiveAtClose
@@ -271,7 +270,7 @@ MorayClient.prototype.close = function close() {
         this.onprocexit = null;
     }
 
-    this.closeState = MORAY_CS_CLOSING;
+    this.closeState = BORAY_CS_CLOSING;
     this.nactiveAtClose = this.nactive;
     this.log.info({ 'nactiveAtClose': this.nactive }, 'closing');
     this.pool.fallbackDisable();
@@ -294,8 +293,8 @@ MorayClient.prototype.close = function close() {
     });
 };
 
-MorayClient.prototype.closeFini = function closeFini() {
-    assert.equal(this.closeState, MORAY_CS_CLOSING);
+BorayClient.prototype.closeFini = function closeFini() {
+    assert.equal(this.closeState, BORAY_CS_CLOSING);
     assert.equal(this.nactive, 0);
     assert.ok(jsprim.isEmpty(this.activeContexts));
 
@@ -313,8 +312,8 @@ MorayClient.prototype.closeFini = function closeFini() {
 };
 
 
-MorayClient.prototype.toString = function toString() {
-    var str = util.format('[object MorayClient<host=%s>]', this.hostLabel);
+BorayClient.prototype.toString = function toString() {
+    var str = util.format('[object BorayClient<host=%s>]', this.hostLabel);
     return (str);
 };
 
@@ -322,7 +321,7 @@ MorayClient.prototype.toString = function toString() {
  * Given a cueball "backend", return a Cueball-compatible Connection object.
  * This is implemented by the separate FastConnection class.
  */
-MorayClient.prototype.createFastConnection =
+BorayClient.prototype.createFastConnection =
     function createFastConnection(backend) {
     assert.string(backend.key, 'backend.key');
     assert.string(backend.name, 'backend.name');
@@ -345,15 +344,15 @@ MorayClient.prototype.createFastConnection =
 /*
  * Internal functions for RPC contexts and context management
  *
- * Each RPC function receives as its first argument a MorayRpcContext, which is
+ * Each RPC function receives as its first argument a BorayRpcContext, which is
  * a per-request handle for accessing configuration (like "unwrapErrors") and
  * the underlying Fast client.  When the RPC completes, the implementing
- * function must release the MorayRpcContext.  This mechanism enables us to
+ * function must release the BorayRpcContext.  This mechanism enables us to
  * ensure that connections are never released twice from the same RPC, and it
  * also affords some debuggability if connections become leaked.  Additionally,
  * if future RPC function implementors need additional information from the
- * Moray client (e.g., a way to tell whether the caller has tried to cancel the
- * request), we can add additional functions to the MorayRpcContext.
+ * Boray client (e.g., a way to tell whether the caller has tried to cancel the
+ * request), we can add additional functions to the BorayRpcContext.
  *
  * RPC functions use one of two patterns for obtaining and releasing RPC
  * contexts, depending on whether they're callback-based or event-emitter-based.
@@ -368,7 +367,7 @@ MorayClient.prototype.createFastConnection =
  *              // Make the RPC call and invoke callback() upon completion.
  *          }
  *
- *        If a backend connection is available, a MorayRpcContext will be
+ *        If a backend connection is available, a BorayRpcContext will be
  *        returned from ctxCreateForCallback().  These functions typically use
  *        makeReleaseCb() to wrap the user callback they were given with one
  *        that releases the RPC context before invoking the user callback.
@@ -377,7 +376,7 @@ MorayClient.prototype.createFastConnection =
  *        asynchronously with an appropriate error, and the caller should not do
  *        anything else.
  *
- *    (2) Event-emitter-based RPCs (e.g., findObjects) use this pattern:
+ *    (2) Event-emitter-based RPCs (e.g., listBuckets) use this pattern:
  *
  *          rpcctx = this.ctxCreateForEmitter();
  *          if (rpcctx !== null) {
@@ -390,10 +389,10 @@ MorayClient.prototype.createFastConnection =
  *
  *          return (ee);
  *
- *        If a backend connection is available, a MorayRpcContext will be
+ *        If a backend connection is available, a BorayRpcContext will be
  *        returned from ctxCreateForEmitter().  These functions typically use
  *        releaseWhenDone() to release the RPC context when the event emitter
- *        emits '_moray_internal_rpc_done'.
+ *        emits '_boray_internal_rpc_done'.
  *
  *        If no backend connection is available, then the caller is responsible
  *        for allocating and returning a new EventEmitter that will emit the
@@ -408,13 +407,13 @@ MorayClient.prototype.createFastConnection =
  *
  * See "Internal functions for RPC contexts and context management" above.
  */
-MorayClient.prototype.ctxCreateForCallback =
+BorayClient.prototype.ctxCreateForCallback =
     function ctxCreateForCallback(callback) {
     var conn;
 
     assert.func(callback, 'callback');
-    if (this.closeState !== MORAY_CS_OPEN) {
-        setImmediate(callback, new Error('moray client has been closed'));
+    if (this.closeState !== BORAY_CS_OPEN) {
+        setImmediate(callback, new Error('boray client has been closed'));
         return (null);
     }
 
@@ -435,10 +434,10 @@ MorayClient.prototype.ctxCreateForCallback =
  *
  * See "Internal functions for RPC contexts and context management" above.
  */
-MorayClient.prototype.ctxCreateForEmitter = function ctxCreateForEmitter() {
+BorayClient.prototype.ctxCreateForEmitter = function ctxCreateForEmitter() {
     var conn;
 
-    if (this.closeState !== MORAY_CS_OPEN) {
+    if (this.closeState !== BORAY_CS_OPEN) {
         return (null);
     }
 
@@ -456,18 +455,18 @@ MorayClient.prototype.ctxCreateForEmitter = function ctxCreateForEmitter() {
  * We keep track of outstanding RPC contexts to provide a clean close()
  * implementation and to aid debuggability in the event of leaks.
  */
-MorayClient.prototype.ctxCreateCommon = function (conn) {
+BorayClient.prototype.ctxCreateCommon = function (conn) {
     var rpcctx;
 
     assert.object(conn);
     assert.ok(!(conn instanceof Error));
-    assert.equal(this.closeState, MORAY_CS_OPEN);
+    assert.equal(this.closeState, BORAY_CS_OPEN);
 
     this.nactive++;
 
-    rpcctx = new MorayRpcContext({
+    rpcctx = new BorayRpcContext({
         'id': this.ncontexts++,
-        'morayClient': this,
+        'borayClient': this,
         'connection': conn
     });
 
@@ -480,7 +479,7 @@ MorayClient.prototype.ctxCreateCommon = function (conn) {
  * Internal function for releasing an RPC context (that is, releasing the
  * underlying connection).
  */
-MorayClient.prototype.ctxRelease = function ctxRelease(rpcctx) {
+BorayClient.prototype.ctxRelease = function ctxRelease(rpcctx) {
     assert.ok(this.nactive > 0);
     this.nactive--;
 
@@ -488,7 +487,7 @@ MorayClient.prototype.ctxRelease = function ctxRelease(rpcctx) {
     delete (this.activeContexts[rpcctx.mc_id]);
     this.pool.connRelease(rpcctx.mc_conn);
 
-    if (this.nactive === 0 && this.closeState === MORAY_CS_CLOSING) {
+    if (this.nactive === 0 && this.closeState === BORAY_CS_CLOSING) {
         this.closeFini();
     }
 };
@@ -500,7 +499,7 @@ MorayClient.prototype.ctxRelease = function ctxRelease(rpcctx) {
  *
  * See "Internal functions for RPC contexts and context management" above.
  */
-MorayClient.prototype.makeReleaseCb = function makeReleaseCb(rpcctx, cb) {
+BorayClient.prototype.makeReleaseCb = function makeReleaseCb(rpcctx, cb) {
     var self = this;
     return (function onCallbackRpcComplete() {
         self.ctxRelease(rpcctx);
@@ -515,7 +514,7 @@ MorayClient.prototype.makeReleaseCb = function makeReleaseCb(rpcctx, cb) {
  *
  * See "Internal functions for RPC contexts and context management" above.
  */
-MorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
+BorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
     var self = this;
     var done = false;
 
@@ -523,7 +522,7 @@ MorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
     assert.object(emitter);
     assert.ok(emitter instanceof EventEmitter);
 
-    emitter.on('_moray_internal_rpc_done', function onEmitterRpcComplete() {
+    emitter.on('_boray_internal_rpc_done', function onEmitterRpcComplete() {
         assert.ok(!done);
         done = true;
         self.ctxRelease(rpcctx);
@@ -533,7 +532,7 @@ MorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
 /*
  * RPC implementation functions
  *
- * These are the primary public methods on the Moray client.  Typically, these
+ * These are the primary public methods on the Boray client.  Typically, these
  * functions normalize and validate their arguments and then delegate to an
  * implementation in one of the nearby files.  They use one of the patterns
  * described above under "Internal functions for RPC contexts and context
@@ -544,14 +543,14 @@ MorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
  * Creates a Bucket
  *
  * `cfg` allows you to pass in index information, as well as pre/post triggers.
- * See https://mo.joyent.com/docs/moray/master/#CreateBucket for more info.
+ * See https://mo.joyent.com/docs/boray/master/#CreateBucket for more info.
  *
  * @param {String} b    - Bucket name
  * @param {Object} cfg  - configuration
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.createBucket =
+BorayClient.prototype.createBucket =
     function createBucket(owner, bucket, vnode, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
@@ -561,7 +560,7 @@ MorayClient.prototype.createBucket =
     }
 };
 
-MorayClient.prototype.createBucketNoVnode =
+BorayClient.prototype.createBucketNoVnode =
     function createBucketNoVnode(owner, bucket, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
@@ -575,20 +574,20 @@ MorayClient.prototype.createBucketNoVnode =
 /**
  * Fetches a Bucket
  *
- * See https://mo.joyent.com/docs/moray/master/#GetBucket for more info.
+ * See https://mo.joyent.com/docs/boray/master/#GetBucket for more info.
  *
  * @param {String} b    - Bucket name
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.getBucket = function getBucket(o, b, vnode, cb) {
+BorayClient.prototype.getBucket = function getBucket(o, b, vnode, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         buckets.getBucket(rpcctx, o, b, vnode, this.makeReleaseCb(rpcctx, cb));
 };
 
 
-MorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
+BorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         buckets.getBucketNoVnode(rpcctx, o, b, this.makeReleaseCb(rpcctx, cb));
@@ -597,7 +596,7 @@ MorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
 /**
  * Lists buckets
  */
-MorayClient.prototype.listBuckets = function listBuckets(owner, vnode) {
+BorayClient.prototype.listBuckets = function listBuckets(owner, vnode) {
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -611,7 +610,7 @@ MorayClient.prototype.listBuckets = function listBuckets(owner, vnode) {
     return (rv);
 };
 
-MorayClient.prototype.listBucketsNoVnode = function listBucketsNoVnode(owner) {
+BorayClient.prototype.listBucketsNoVnode = function listBucketsNoVnode(owner) {
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -630,14 +629,14 @@ MorayClient.prototype.listBucketsNoVnode = function listBucketsNoVnode(owner) {
  * Updates an existing Bucket
  *
  * `cfg` allows you to pass in index information, as well as pre/post triggers.
- * See https://mo.joyent.com/docs/moray/master/#UpdateBucket for more info.
+ * See https://mo.joyent.com/docs/boray/master/#UpdateBucket for more info.
  *
  * @param {String} b    - Bucket name
  * @param {Object} cfg  - configuration
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.updateBucket = function updateBucket(b, cfg, opts, cb) {
+BorayClient.prototype.updateBucket = function updateBucket(b, cfg, opts, cb) {
     if (typeof (opts) === 'function') {
         cb = opts;
         opts = {};
@@ -652,13 +651,13 @@ MorayClient.prototype.updateBucket = function updateBucket(b, cfg, opts, cb) {
 /**
  * Deletes a Bucket
  *
- * See https://mo.joyent.com/docs/moray/master/#DeleteBucket for more info.
+ * See https://mo.joyent.com/docs/boray/master/#DeleteBucket for more info.
  *
  * @param {String} b    - Bucket name
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.deleteBucket = function deleteBucket(o, b, vnode, cb) {
+BorayClient.prototype.deleteBucket = function deleteBucket(o, b, vnode, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
         buckets.deleteBucket(rpcctx, o, b, vnode,
@@ -667,7 +666,7 @@ MorayClient.prototype.deleteBucket = function deleteBucket(o, b, vnode, cb) {
 };
 
 
-MorayClient.prototype.deleteBucketNoVnode =
+BorayClient.prototype.deleteBucketNoVnode =
     function deleteBucketNoVnode(o, b, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
@@ -690,7 +689,7 @@ MorayClient.prototype.deleteBucketNoVnode =
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.putBucket = function putBucket(b, cfg, opts, cb) {
+BorayClient.prototype.putBucket = function putBucket(b, cfg, opts, cb) {
     assert.string(b, 'bucket');
     assert.object(cfg, 'config');
     if (typeof (opts) === 'function') {
@@ -708,7 +707,7 @@ MorayClient.prototype.putBucket = function putBucket(b, cfg, opts, cb) {
 /**
  * Idempotently Creates or Replaces an Object.
  *
- * See https://mo.joyent.com/docs/moray/master/#PutObject for more info.
+ * See https://mo.joyent.com/docs/boray/master/#PutObject for more info.
  *
  * @param {String} b    - Bucket name
  * @param {String} k    - Key name
@@ -716,7 +715,7 @@ MorayClient.prototype.putBucket = function putBucket(b, cfg, opts, cb) {
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
+BorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
     content_length, content_md5, content_type, headers, sharks, props, vnode,
     cb) {
     assert.string(owner, 'owner');
@@ -738,7 +737,7 @@ MorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
     }
 };
 
-MorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
+BorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
     bucket_id, name, content_length, content_md5, content_type, headers,
     sharks, props, cb) {
 
@@ -764,14 +763,14 @@ MorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
 /**
  * Fetches an Object
  *
- * See https://mo.joyent.com/docs/moray/master/#GetObject for more info.
+ * See https://mo.joyent.com/docs/boray/master/#GetObject for more info.
  *
  * @param {String} b    - Bucket name
  * @param {String} k    - Key name
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.getObject =
+BorayClient.prototype.getObject =
     function getObject(owner, bucket_id, name, vnode, cb) {
 
     assert.string(owner, 'owner');
@@ -787,7 +786,7 @@ MorayClient.prototype.getObject =
     }
 };
 
-MorayClient.prototype.getObjectNoVnode =
+BorayClient.prototype.getObjectNoVnode =
     function getObjectNoVnode(owner, bucket_id, name, cb) {
 
     assert.string(owner, 'owner');
@@ -805,7 +804,7 @@ MorayClient.prototype.getObjectNoVnode =
 /**
  * Lists objects
  */
-MorayClient.prototype.listObjects =
+BorayClient.prototype.listObjects =
     function listObjects(owner, bucket_id, vnode) {
 
     var rpcctx = this.ctxCreateForEmitter();
@@ -821,7 +820,7 @@ MorayClient.prototype.listObjects =
     return (rv);
 };
 
-MorayClient.prototype.listObjectsNoVnode =
+BorayClient.prototype.listObjectsNoVnode =
     function listObjectsNoVnode(owner, bucket_id) {
 
     var rpcctx = this.ctxCreateForEmitter();
@@ -840,14 +839,14 @@ MorayClient.prototype.listObjectsNoVnode =
 /**
  * Deletes an Object
  *
- * See https://mo.joyent.com/docs/moray/master/#DeleteObject for more info.
+ * See https://mo.joyent.com/docs/boray/master/#DeleteObject for more info.
  *
  * @param {String} b    - Bucket name
  * @param {String} k    - Key name
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.deleteObject =
+BorayClient.prototype.deleteObject =
     function deleteObject(owner, bucket_id, name, vnode, cb) {
 
     assert.string(owner, 'owner');
@@ -863,7 +862,7 @@ MorayClient.prototype.deleteObject =
     }
 };
 
-MorayClient.prototype.deleteObjectNoVnode =
+BorayClient.prototype.deleteObjectNoVnode =
     function deleteObjectNoVnode(owner, bucket_id, name, cb) {
 
     assert.string(owner, 'owner');
@@ -879,216 +878,10 @@ MorayClient.prototype.deleteObjectNoVnode =
 };
 
 
-/**
- * Finds object matching a given filter
- *
- * See https://mo.joyent.com/docs/moray/master/#FindObjects for more info.
- *
- * @param {String} b      - Bucket name
- * @param {String} f      - Object filter
- * @param {Object} opts   - request parameters
- * @return {EventEmitter} - listen for 'record', 'end' and 'error'
- */
-MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
-    assert.string(b, 'bucket');
-    assert.string(f, 'filter');
-    assert.object(opts, 'options');
-    assert.string(opts.hashkey, 'opts.hashkey');
-    assert.optionalObject(opts.bucket_data, 'opts.bucket_data');
-
-    var bucket_data = opts.bucket_data || {};
-
-    opts = jsprim.mergeObjects(opts, null, {
-        requireIndexes: this.requireIndexes,
-        requireOnlineReindexing: this.requireOnlineReindexing
-    });
-
-    var rpcctx = this.ctxCreateForEmitter();
-    if (!rpcctx) {
-        return (emitUnavailable());
-    }
-
-    /*
-     * For manta buckets, we do some special work to break down the hash key
-     * and figure out if the request is to list the buckets, or the contents of
-     * a bucket.
-     *
-     * XXX I don't know if this is the best way to do this or the best place
-     * for the logic but yolo.
-     */
-    var key = path.normalize(opts.hashkey);
-
-    this.log.debug({key: key}, 'findObjects key: %s', key);
-
-    assert.equal(key[0], '/', 'path begin with /');
-    var parts = key.substr(1).split('/');
-    var owner = parts[0];
-    var bucket;
-
-    assert.equal(parts[1], 'buckets', 'part 2 buckets');
-
-    // check if user wants to list bucket contents
-    if (parts[2]) {
-        bucket = parts[2];
-        assert.string(bucket, 'bucket');
-        assert(bucket.length > 0, 'bucket.length > 0');
-
-        assert.equal(parts[3], 'objects', 'part 3 objects');
-        assert(!parts[4], 'extra garbage in path');
-    }
-
-    this.log.debug({parts: parts, bucket: bucket},
-        'findObjects key parsed');
-
-    var rv;
-
-    if (bucket) {
-        assert.equal(bucket, bucket_data.name, 'bucket_data.name the same');
-        assert.equal(owner, bucket_data.owner, 'bucket_data.owner the same');
-        rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_data.id);
-    } else {
-        rv = buckets.listBucketsNoVnode(rpcctx, owner);
-    }
-
-    this.releaseWhenDone(rpcctx, rv);
-    return (rv);
-};
-MorayClient.prototype.find = MorayClient.prototype.findObjects;
-
-
-/**
- * Idempotently Creates or Replaces a set of Object.
- *
- * See https://mo.joyent.com/docs/moray/master/#Batch for more info.
- *
- * @param {Array} requests - {bucket, key, value} tuples
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
- */
-MorayClient.prototype.batch = function batch(requests, opts, cb) {
-    assert.arrayOfObject(requests, 'requests');
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        objects.batch(rpcctx, requests, opts, this.makeReleaseCb(rpcctx, cb));
-};
-
-
-/**
- * Updates a set of object attributes.
- *
- * See https://mo.joyent.com/docs/moray/master/#UpdateObjects for more info.
- *
- * @param {String} bucket - bucket
- * @param {Object} fields - attributes to update (must be indexes)
- * @param {String} filter - update objects matching this filter
- * @param {Object} opts   - request parameters
- * @param {Function} cb   - callback
- */
-MorayClient.prototype.updateObjects = function update(b, f, f2, opts, cb) {
-    assert.string(b, 'bucket');
-    assert.object(f, 'fields');
-    assert.string(f2, 'filter');
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        objects.updateObjects(rpcctx, b, f, f2, opts,
-            this.makeReleaseCb(rpcctx, cb));
-};
-
-
-/**
- * Deletes a group of objects.
- *
- * See https://mo.joyent.com/docs/moray/master/#DeleteMany for more info.
- *
- * @param {String} bucket - bucket
- * @param {String} filter - update objects matching this filter
- * @param {Object} opts   - request parameters
- * @param {Function} cb   - callback
- */
-MorayClient.prototype.deleteMany = function deleteMany(b, f, opts, cb) {
-    assert.string(b, 'bucket');
-    assert.string(f, 'filter');
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        objects.deleteMany(rpcctx, b, f, opts, this.makeReleaseCb(rpcctx, cb));
-};
-
-
-/**
- * Request reindexing of stale rows.
- *
- * Returns a count of successfully processed rows.  Once the processed count
- * reaches zero, all rows will be properly reindexed.
- *
- * @param {String} bucket - bucket
- * @param {String} count  - max objects to reindex
- * @param {Object} opts   - request parameters
- * @param {Function} cb   - callback
- */
-MorayClient.prototype.reindexObjects = function reindexObjects(b, c, opts, cb) {
-    assert.string(b, 'bucket');
-    assert.number(c, 'count');
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        objects.reindexObjects(rpcctx, b, c, opts,
-            this.makeReleaseCb(rpcctx, cb));
-};
-
-
-/*
- * Gets the set of tokens from moray.
- *
- * See https://mo.joyent.com/docs/moray/master/#UpdateObjects for more info.
- *
- * @param {Object} opts   - request parameters
- * @param {Function} cb   - callback
- */
-MorayClient.prototype.getTokens = function getTokens(opts, cb) {
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        tokens.getTokens(rpcctx, opts, this.makeReleaseCb(rpcctx, cb));
-};
-
-
 /**
  * Performs a ping check against the server.
  *
- * Note that because the MorayClient is pooled and connects to all IPs in
+ * Note that because the BorayClient is pooled and connects to all IPs in
  * a RR-DNS set, this actually just tells you that _one_ of the servers is
  * responding, not that all are.
  *
@@ -1098,7 +891,7 @@ MorayClient.prototype.getTokens = function getTokens(opts, cb) {
  * @param {Object} opts   - request parameters
  * @return {EventEmitter} - listen for 'record', 'end' and 'error'
  */
-MorayClient.prototype.ping = function _ping(opts, cb) {
+BorayClient.prototype.ping = function _ping(opts, cb) {
     if (typeof (opts) === 'function') {
         cb = opts;
         opts = {};
@@ -1120,7 +913,7 @@ MorayClient.prototype.ping = function _ping(opts, cb) {
  * @param {Object} opts   - request parameters
  * @param {Function} cb   - callback
  */
-MorayClient.prototype.versionInternal = function _version(opts, cb) {
+BorayClient.prototype.versionInternal = function _version(opts, cb) {
     if (typeof (opts) === 'function') {
         cb = opts;
         opts = {};
@@ -1133,77 +926,22 @@ MorayClient.prototype.versionInternal = function _version(opts, cb) {
         meta.versionInternal(rpcctx, opts, this.makeReleaseCb(rpcctx, cb));
 };
 
-/**
- * Performs a raw SQL operation against the server.
- *
- * For the love of all that is good in this earth, please only use this method
- * at the utmost of need.  In almost every case this is used, it's used for
- * nefarious reasons.
- *
- * The only intended uses of this are for edge cases that require custom
- * "serial" tables, et al, in the database (like UFDS changelog).  You
- * absolutely do not ever need to use this if put/get/del/find works for you.
- *
- * @param {String} stmt   - SQL Statement
- * @param {Array} vals    - Values (if SQL statement has $1 etc. in it)
- * @param {Object} opts   - Request Options
- * @return {EventEmitter} - listen for 'record', 'end' and 'error'
- */
-MorayClient.prototype.sql = function _sql(stmt, vals, opts) {
-    var rv;
-
-    switch (arguments.length) {
-    case 0:
-        throw new TypeError('statement (String) required');
-    case 1:
-        assert.string(stmt, 'statement');
-        vals = [];
-        opts = {};
-        break;
-    case 2:
-        assert.string(stmt, 'statement');
-        if (!Array.isArray(vals)) {
-            assert.object(vals, 'options');
-            opts = vals;
-            vals = [];
-        } else {
-            opts = {};
-        }
-        break;
-    case 3:
-        assert.string(stmt, 'statement');
-        assert.ok(Array.isArray(vals));
-        assert.object(opts, 'options');
-        break;
-    default:
-        throw new Error('too many arguments');
-    }
-
-    var rpcctx = this.ctxCreateForEmitter();
-    if (rpcctx) {
-        rv = meta.sql(rpcctx, stmt, vals, opts);
-        this.releaseWhenDone(rpcctx, rv);
-        return (rv);
-    }
-    return (emitUnavailable());
-};
-
 
 /*
- * A MorayRpcContext is a per-request handle that refers back to the Moray
+ * A BorayRpcContext is a per-request handle that refers back to the Boray
  * client and the underlying connection.  This object is provided to RPC
  * implementors, and allows them to access the underlying Fast client (in order
  * to make RPC requests), configuration (like "unwrapErrors"), and to release
  * the RPC context when the RPC completes.
  *
- * This class should be thought of as part of the implementation of the Moray
+ * This class should be thought of as part of the implementation of the Boray
  * client itself, having internal implementation knowledge of the client.
  */
-function MorayRpcContext(args) {
+function BorayRpcContext(args) {
     assert.object(args, 'args');
     assert.number(args.id, 'args.id');
     assert.object(args.connection, 'args.connection');
-    assert.object(args.morayClient, 'args.morayClient');
+    assert.object(args.borayClient, 'args.borayClient');
 
     /*
      * There's no mechanism in place to stop us from reaching this limit, but
@@ -1214,23 +952,23 @@ function MorayRpcContext(args) {
 
     this.mc_id = args.id;
     this.mc_conn = args.connection;
-    this.mc_moray = args.morayClient;
+    this.mc_boray = args.borayClient;
 }
 
-MorayRpcContext.prototype.fastClient = function fastClient() {
+BorayRpcContext.prototype.fastClient = function fastClient() {
     return (this.mc_conn.connection().fastClient());
 };
 
-MorayRpcContext.prototype.socketAddrs = function socketAddrs() {
+BorayRpcContext.prototype.socketAddrs = function socketAddrs() {
     return (this.mc_conn.connection().socketAddrs());
 };
 
-MorayRpcContext.prototype.unwrapErrors = function unwrapErrors() {
-    assert.bool(this.mc_moray.unwrapErrors);
-    return (this.mc_moray.unwrapErrors);
+BorayRpcContext.prototype.unwrapErrors = function unwrapErrors() {
+    assert.bool(this.mc_boray.unwrapErrors);
+    return (this.mc_boray.unwrapErrors);
 };
 
-MorayRpcContext.prototype.createLog = function createLog(options) {
+BorayRpcContext.prototype.createLog = function createLog(options) {
     var reqid;
     assert.optionalObject(options, 'options');
 
@@ -1240,18 +978,18 @@ MorayRpcContext.prototype.createLog = function createLog(options) {
         reqid = libuuid.create();
     }
 
-    return (this.mc_moray.log.child({ 'req_id': reqid }, true));
+    return (this.mc_boray.log.child({ 'req_id': reqid }, true));
 };
 
 
 ///--- Exports
 
 /*
- * Expose privateParseMorayParameters privately for testing, not for the outside
+ * Expose privateParseBorayParameters privately for testing, not for the outside
  * world.
  */
-MorayClient.privateParseMorayParameters = parseMorayParameters;
+BorayClient.privateParseBorayParameters = parseBorayParameters;
 
 module.exports = {
-    Client: MorayClient
+    Client: BorayClient
 };
diff --git a/lib/client_params.js b/lib/client_params.js
index 00a1f49..9fc9195 100644
--- a/lib/client_params.js
+++ b/lib/client_params.js
@@ -5,12 +5,12 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * lib/client_params.js: normalize the various constructor parameters that the
- * Moray client supports.
+ * Boray client supports.
  */
 
 var assert = require('assert-plus');
@@ -35,9 +35,9 @@ var dflClientDnsDelayMax = 10000;       /* milliseconds */
 var dflClientDelayMin = 1000;           /* milliseconds */
 var dflClientDelayMax = 60000;          /* milliseconds */
 
-/* "service" associated with Moray DNS SRV records */
-var dflClientCueballService = '_moray._tcp';
-/* default TCP port for Moray servers */
+/* "service" associated with Boray DNS SRV records */
+var dflClientCueballService = '_boray._tcp';
+/* default TCP port for Boray servers */
 var dflClientCueballDefaultPort = 2020;
 
 /*
@@ -84,7 +84,7 @@ var dflCueballOptions = {
 };
 
 /*
- * This function takes the user-specified MorayClient parameters, figures out
+ * This function takes the user-specified BorayClient parameters, figures out
  * what kind of connection the user wants, and returns a description back to the
  * caller that includes the cueballOptions that will be used for creating a
  * node-cueball Resolver and ConnectionSet.  This process is surprisingly
@@ -110,8 +110,8 @@ var dflCueballOptions = {
  * along with one of the following sets of options:
  *
  *    "cueballOptions"  used to specify options related to the cueball Resolver
- *    			or ConnectionSet.  Supported cueball-related properties
- *    			include:
+ *              or ConnectionSet.  Supported cueball-related properties
+ *              include:
  *
  *                        o Resolver properties: "service", "defaultPort",
  *                          "resolvers", and "maxDNSConcurrency"
@@ -121,7 +121,7 @@ var dflCueballOptions = {
  *                        o common properties: "recovery"
  *
  *                      Other cueball parameters like "log", "resolver",
- *                      "constructor", and "domain" are supplied by the Moray
+ *                      "constructor", and "domain" are supplied by the Boray
  *                      client and may not be specified here.
  *
  *       OR
@@ -143,7 +143,7 @@ var dflCueballOptions = {
  *     cueballOptions   object specifying options needed to create the Cueball
  *                      Resolver and ConnectionSet.
  */
-function parseMorayParameters(args) {
+function parseBorayParameters(args) {
     var cueballopts, uoptions, port;
     var havetarget, havemax, u;
 
@@ -295,7 +295,7 @@ function parseMorayParameters(args) {
      * cueball to use SRV records in this mode.  There's not currently a way to
      * disable this, so we set a bogus service name and a very short timeout.
      */
-    cueballopts.service = '_moraybogus._tcp';
+    cueballopts.service = '_boraybogus._tcp';
     assert.strictEqual(cueballopts.recovery.dns_srv.retries, 0);
     cueballopts.recovery.dns_srv.timeout = 1;
     cueballopts.recovery.dns_srv.maxTimeout = 1;
@@ -499,4 +499,4 @@ function populateLegacyOptions(out, args) {
     }
 }
 
-exports.parseMorayParameters = parseMorayParameters;
+exports.parseBorayParameters = parseBorayParameters;
diff --git a/lib/cmd.js b/lib/cmd.js
index 2f3373a..166f7a8 100644
--- a/lib/cmd.js
+++ b/lib/cmd.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -41,7 +41,7 @@ exports.commonUsage = '[-A] [-b domain] [-h host] [-p port] [-S service] [-v]';
 
 /*
  * Output artedi metrics if the -A flag was passed.  This function is run after
- * handling requests for each of the cmdline tools.  It will be passed the moray
+ * handling requests for each of the cmdline tools.  It will be passed the boray
  * client object, and if that client has a collector attached (which would be
  * added when -A was passed on the cmdline) it will write the artedi metrics to
  * stderr.
@@ -54,7 +54,7 @@ exports.commonUsage = '[-A] [-b domain] [-h host] [-p port] [-S service] [-v]';
  *                  cmdutil.fail(err) will be called if there are errors
  *                  collecting metrics.
  *
- *  client          Moray client object.
+ *  client          Boray client object.
  *
  */
 function cliFinish(cmdutil, client) {
@@ -100,7 +100,7 @@ function cliFinish(cmdutil, client) {
  *                  string above and used to parse options with node-getopt.
  *
  *  clientOptions   an object that will be populated with arguments used to
- *                  create a Moray client.  That will include some combination
+ *                  create a Boray client.  That will include some combination
  *                  of "host", "port", and "srvDomain" as well as an appropriate
  *                  bunyan logger, configured based on the environment and
  *                  presence of "-v" options.  This may also contain
@@ -114,7 +114,7 @@ function cliFinish(cmdutil, client) {
  *                  a non-empty string.  The function should handle unrecognized
  *                  options (usually by invoking the caller's usage function).
  *
- * This function uses the MORAY_SERVICE and MORAY_URL environment variables from
+ * This function uses the BORAY_SERVICE and BORAY_URL environment variables from
  * `env` to fill in common options where possible.  `LOG_LEVEL` is used to
  * configure the level of the bunyan logger.  Log verbosity is increased with
  * each instance of the "-v" option.
@@ -194,7 +194,7 @@ function parseCliOptions(args) {
 
     /*
      * For all of our commands, we use failFast by default so that the command
-     * doesn't block indefinitely if Moray is down, and we use
+     * doesn't block indefinitely if Boray is down, and we use
      * mustCloseBeforeNormalProcessExit to make sure the commands clean up after
      * themselves.
      */
@@ -215,7 +215,7 @@ function parseCliOptions(args) {
  * Parses one of the command-line options that's common to several commands.
  * See the option string at the top of this file.
  *
- * "clientOpts" is an object in which we're building the Moray client
+ * "clientOpts" is an object in which we're building the Boray client
  * configuration.
  *
  * "options" is an object with options for this function.  Currently only
@@ -301,12 +301,12 @@ function finalizeCliOptions(errstream, options, env) {
      */
     if ((!options.hasOwnProperty('cueballOptions') ||
         !options.cueballOptions.hasOwnProperty('resolvers')) &&
-        env['MORAY_BOOTSTRAP_DOMAIN']) {
+        env['BORAY_BOOTSTRAP_DOMAIN']) {
         if (!options.hasOwnProperty('cueballOptions')) {
             options.cueballOptions = {};
         }
 
-        options.cueballOptions.resolvers = [ env['MORAY_BOOTSTRAP_DOMAIN'] ];
+        options.cueballOptions.resolvers = [ env['BORAY_BOOTSTRAP_DOMAIN'] ];
     }
 
     if (options.srvDomain !== undefined) {
@@ -328,26 +328,26 @@ function finalizeCliOptions(errstream, options, env) {
     if (options.host !== undefined || options.port !== undefined) {
         /*
          * The user specified one -h/--host and -p/--port.  Assume they want the
-         * direct mode and fill in the other option from MORAY_URL or our
+         * direct mode and fill in the other option from BORAY_URL or our
          * built-in default values.
          */
         return (populateDirectArguments(errstream, options, env));
     }
 
     /*
-     * The user specified nothing on the command line.  Check for MORAY_SERVICE.
+     * The user specified nothing on the command line.  Check for BORAY_SERVICE.
      */
-    if (env['MORAY_SERVICE']) {
-        if (!validateSrvDomain(errstream, env['MORAY_SERVICE'])) {
+    if (env['BORAY_SERVICE']) {
+        if (!validateSrvDomain(errstream, env['BORAY_SERVICE'])) {
             return (false);
         }
 
-        options.srvDomain = env['MORAY_SERVICE'];
+        options.srvDomain = env['BORAY_SERVICE'];
         return (true);
     }
 
     /*
-     * If we get this far, all that's left to try is MORAY_URL, then fall back
+     * If we get this far, all that's left to try is BORAY_URL, then fall back
      * to built-in defaults.
      */
     return (populateDirectArguments(errstream, options, env));
@@ -356,7 +356,7 @@ function finalizeCliOptions(errstream, options, env) {
 function validateSrvDomain(errstream, domain) {
     if (net.isIP(domain)) {
         fprintf(errstream,
-            'cannot use an IP address with -S/--service/MORAY_SERVICE\n');
+            'cannot use an IP address with -S/--service/BORAY_SERVICE\n');
         return (false);
     }
 
@@ -364,12 +364,12 @@ function validateSrvDomain(errstream, domain) {
 }
 
 /*
- * Given a set of Moray client arguments, ensure that "host" and "port" are
- * populated based on MORAY_URL or our default values.  Like the other functions
+ * Given a set of Boray client arguments, ensure that "host" and "port" are
+ * populated based on BORAY_URL or our default values.  Like the other functions
  * in this file, on error, prints an error message and then returns "false" on
  * failure.
  *
- * Importantly, don't parse MORAY_URL if we're not going to use it.
+ * Importantly, don't parse BORAY_URL if we're not going to use it.
  */
 function populateDirectArguments(errstream, options, env) {
     var u, p;
@@ -378,8 +378,8 @@ function populateDirectArguments(errstream, options, env) {
         /*
          * The user specified one of -h/--host and -p/--port, but not the other.
          */
-        if (env['MORAY_URL']) {
-            u = url.parse(env['MORAY_URL']);
+        if (env['BORAY_URL']) {
+            u = url.parse(env['BORAY_URL']);
             if (options.host === undefined) {
                 options.host = u['hostname'];
             }
@@ -388,7 +388,7 @@ function populateDirectArguments(errstream, options, env) {
                 p = parseTcpPort(u['port']);
                 if (p === null) {
                     fprintf(errstream,
-                        'port in MORAY_URL is not a valid TCP port\n');
+                        'port in BORAY_URL is not a valid TCP port\n');
                     return (false);
                 }
 
diff --git a/lib/fast_connection.js b/lib/fast_connection.js
index 8b57811..411812c 100644
--- a/lib/fast_connection.js
+++ b/lib/fast_connection.js
@@ -98,7 +98,7 @@ util.inherits(FastConnection, events.EventEmitter);
 /* [private] */
 FastConnection.prototype.onSocketConnect = function onSocketConnect() {
     /*
-     * It's important to enable TCP KeepAlive on connections to the Moray server
+     * It's important to enable TCP KeepAlive on connections to the Boray server
      * so that we can identify connections that have failed as a result of a
      * remote system panic, power cycle, power off, or a network partition.
      * This will not address requests that have hung as a result of a server
@@ -117,7 +117,7 @@ FastConnection.prototype.onSocketConnect = function onSocketConnect() {
      * idle time before TCP starts sending KeepAlive probes (equivalent to
      * TCP_KEEPIDLE), not how long to keep sending probes before terminating the
      * connection (TCP_KEEPCNT and TCP_KEEPINTVL or
-     * TCP_KEEPALIVE_ABORT_THRESHOLD).  Since Moray is only used inside
+     * TCP_KEEPALIVE_ABORT_THRESHOLD).  Since Boray is only used inside
      * environments expected to have good network connectivity, an aggressive
      * configuration would be appropriate here, but for now we're left with the
      * system defaults (which are pretty conservative).  We'll eventually learn
@@ -189,7 +189,7 @@ FastConnection.prototype.onError = function onError(err) {
 };
 
 /*
- * Used by the rest of the Moray client
+ * Used by the rest of the Boray client
  */
 FastConnection.prototype.fastClient = function () {
     return (this.fc_fast);
diff --git a/lib/index.js b/lib/index.js
index 7acd8c2..6dbeb4b 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -9,7 +9,7 @@
  */
 
 /*
- * lib/index.js: public exports from the node-moray module.
+ * lib/index.js: public exports from the node-boray module.
  */
 
 var Client = require('./client').Client;
@@ -19,11 +19,7 @@ var Client = require('./client').Client;
 
 module.exports = {
     Client: Client,
-    BucketClient: Client,
     createClient: function createClient(options) {
         return (new Client(options));
-    },
-    createBucketClient: function createBucketClient(options) {
-        return (new Client(options));
     }
 };
diff --git a/lib/meta.js b/lib/meta.js
index 48b35d9..530e60e 100644
--- a/lib/meta.js
+++ b/lib/meta.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
  * lib/meta.js: non-data-related client API functions.  These functions are
  * invoked by same-named methods in lib/client.js to do the bulk of the work
  * associated with making RPC requests.  The arguments and semantics of these
- * functions are documented in the Moray API.
+ * functions are documented in the Boray API.
  */
 
 var assert = require('assert-plus');
@@ -59,8 +59,8 @@ function ping(rpcctx, options, callback) {
  * back "version 2" from this RPC, make another request that assumes version 2,
  * and have that fail because it contacted a version 1 server.  Note that this
  * is true even if this client is only connected to version 2 servers.
- * Operators may rollback Moray instances to earlier versions, so even in a
- * single-Moray deployment, you cannot assume that just because you got back
+ * Operators may rollback Boray instances to earlier versions, so even in a
+ * single-Boray deployment, you cannot assume that just because you got back
  * version N from this RPC that a subsequent request will not be serviced by a
  * version M server where M < N.
  *
@@ -71,8 +71,8 @@ function ping(rpcctx, options, callback) {
  * people won't stumble upon it accidentally, but we can still build
  * command-line tools that report it.
  *
- * You might reasonably wonder: what do I do if I *do* depend on a newer Moray
- * version?  In that case, we'll need to rework the MorayClient abstraction so
+ * You might reasonably wonder: what do I do if I *do* depend on a newer Boray
+ * version?  In that case, we'll need to rework the BorayClient abstraction so
  * that you can specify that all requests for this client should be made to
  * version-N servers.  The client will have to determine server version and keep
  * track of it.  None of this work has been done yet.  The minimum server
@@ -112,7 +112,7 @@ function versionInternal(rpcctx, options, callback) {
              * that that's what happened, since we don't really know.
              */
             if (VError.findCauseByName(err, 'TimeoutError')) {
-                err.message += ' (note: very old Moray versions do not ' +
+                err.message += ' (note: very old Boray versions do not ' +
                     'respond to this RPC)';
             }
         } else {
@@ -154,7 +154,7 @@ function sql(rpcctx, statement, values, options) {
     res = new events.EventEmitter();
 
     /*
-     * We specify ignoreNullValues because electric-moray sends spurious
+     * We specify ignoreNullValues because electric-boray sends spurious
      * trailing null values from successful sql() commands.  These are not
      * generally allowed, but we have to maintain compatibility with broken
      * servers.
@@ -172,7 +172,7 @@ function sql(rpcctx, statement, values, options) {
             res.emit('end');
         }
 
-        res.emit('_moray_internal_rpc_done');
+        res.emit('_boray_internal_rpc_done');
     });
 
     req.on('data', function (msg) {
diff --git a/lib/bucket_objects.js b/lib/object.js
similarity index 69%
rename from lib/bucket_objects.js
rename to lib/object.js
index 47a47ed..9da2e28 100644
--- a/lib/bucket_objects.js
+++ b/lib/object.js
@@ -12,7 +12,7 @@
  * lib/objects.js: object-related client API functions.  These functions are
  * invoked by same-named methods in lib/client.js to do the bulk of the work
  * associated with making RPC requests.  The arguments and semantics of these
- * functions are documented in the Moray API.
+ * functions are documented in the Boray API.
  */
 
 var EventEmitter = require('events').EventEmitter;
@@ -272,102 +272,6 @@ function deleteObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
     });
 }
 
-/*
- * Returns an array of strings representing the name of options that should have
- * been explicitly marked as handled by a moray server, but were not. Returns an
- * empty array in case this set is empty.
- *
- * @param {Object} handledOptions - represents the options that were actually
- * acknowledged as handled by the Moray server that served this findObjects
- * request. If an option was acknowledged as handled by the server, then a
- * property with the name of the option will have the value true in the
- * "handledOptions" object.
- *
- * @param {string[]} optionsToHandle - represents the options that are expected
- * to be handled by the Moray server that served this findObjects request.
- */
-function getUnhandledOptions(handledOptions, optionsToHandle) {
-    assert.object(handledOptions, 'handledOptions');
-    assert.arrayOfString(optionsToHandle, 'optionsToHandle');
-
-    var optionName;
-    var optionNameIndex;
-    var unhandledOptions = [];
-
-    for (optionNameIndex in optionsToHandle) {
-        optionName = optionsToHandle[optionNameIndex];
-        if (!handledOptions[optionName]) {
-            unhandledOptions.push(optionName);
-        }
-    }
-
-    return (unhandledOptions);
-}
-
-/*
- * Based on the option specifications in "optionsSpec", returns the option names
- * present in "options" that require an acknowledgement from Moray that they've
- * been handled.
- *
- * @param {Object} options
- * @param {Object} optionsSpec - stores metadata about some findObjects options,
- * such as a function named "testNeedHandling"
- */
-function getOptionsToHandle(options, optionsSpec) {
-    assert.object(options, 'options');
-    assert.object(optionsSpec, 'optionsSpec');
-
-    var optionName;
-    var optionValue;
-    var optionsToHandle = [];
-    var testNeedHandlingFn;
-
-    for (optionName in options) {
-        if (!Object.hasOwnProperty.call(options, optionName)) {
-            continue;
-        }
-
-        if (optionsSpec[optionName] !== undefined) {
-            assert.object(optionsSpec[optionName], 'optionsSpec[optionName]');
-            testNeedHandlingFn = optionsSpec[optionName].testNeedHandling;
-            assert.func(testNeedHandlingFn, 'testNeedHandlingFn');
-
-            optionValue = options[optionName];
-            if (testNeedHandlingFn(optionValue)) {
-                optionsToHandle.push(optionName);
-            }
-        }
-    }
-
-    return (optionsToHandle);
-}
-
-/*
- * Creates and returns a VError instance that represents an error due to the
- * Moray server not handling options that were expected to be handled by the
- * client.
- *
- * @param {Array} unhandledOptions - an array of strings that represents the
- * name of options that should have been marked as explicitly handled by the
- * moray server serving a findObjects request.
- *
- * @param {Object} cause - an instance of Error that will be used as the "cause"
- * for the newly created VError object.
- */
-function createUnhandledOptionsError(unhandledOptions, cause) {
-    assert.arrayOfString(unhandledOptions, 'unhandledOptions');
-    assert.optionalObject(cause, 'cause');
-
-    var err = new VError({
-        name: 'UnhandledOptionsError',
-        info: {
-            unhandledOptions: unhandledOptions
-        },
-        cause: cause
-    }, 'Unhandled options: %j', unhandledOptions);
-
-    return (err);
-}
 
 function listObjects(rpcctx, owner, bucket_id, vnode) {
     var opts, log;
@@ -401,7 +305,7 @@ function listObjects(rpcctx, owner, bucket_id, vnode) {
             res.emit('end');
         }
 
-        res.emit('_moray_internal_rpc_done');
+        res.emit('_boray_internal_rpc_done');
     });
 
     req.on('data', function (msg) {
@@ -436,7 +340,7 @@ function listObjectsNoVnode(rpcctx, owner, bucket_id) {
             res.emit('end');
         }
 
-        res.emit('_moray_internal_rpc_done');
+        res.emit('_boray_internal_rpc_done');
     });
 
     req.on('data', function (msg) {
@@ -454,19 +358,6 @@ function makeOptions(options, value) {
 
     // Defaults handlers
     opts.req_id = options.req_id || libuuid.create();
-    // opts.etag = (options.etag !== undefined) ? options.etag : options._etag;
-    // opts.headers = options.headers || {};
-    // opts.no_count = options.no_count || false;
-    // opts.sql_only = options.sql_only || false;
-    // opts.noCache = true;
-
-    // Including the stringified value is redundant, but older versions of
-    // moray depend upon the _value field being populated in this way.
-    // if (value)
-    //     opts._value = JSON.stringify(value);
-
-    // if (typeof (options.noCache) !== 'undefined')
-    //     opts.noCache = options.noCache;
 
     return (opts);
 }
diff --git a/lib/objects.js b/lib/objects.js
deleted file mode 100644
index 81aa9cb..0000000
--- a/lib/objects.js
+++ /dev/null
@@ -1,591 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * lib/objects.js: object-related client API functions.  These functions are
- * invoked by same-named methods in lib/client.js to do the bulk of the work
- * associated with making RPC requests.  The arguments and semantics of these
- * functions are documented in the Moray API.
- */
-
-var EventEmitter = require('events').EventEmitter;
-
-var assert = require('assert-plus');
-var jsprim = require('jsprim');
-var libuuid = require('libuuid');
-var VError = require('verror');
-
-var rpc = require('./rpc');
-
-
-///--- API
-
-function putObject(rpcctx, bucket, key, value, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.string(key, 'key');
-    assert.object(value, 'value');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = makeOptions(options, value);
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'putObject',
-        'rpcargs': [ bucket, key, value, opts ]
-    }, function (err, data) {
-        if (!err && data.length > 1) {
-            err = new VError('expected at most 1 data message, found %d',
-                data.length);
-        }
-
-        if (err) {
-            callback(err);
-        } else {
-            callback(null, data.length === 0 ? {} : data[0]);
-        }
-    });
-}
-
-function getObject(rpcctx, bucket, key, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.string(key, 'key');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    var handledOptions = {
-        'requireOnlineReindexing': false
-    };
-    var optionsSpec = {
-        requireOnlineReindexing: {
-            testNeedHandling: function testNeedHandling(value) {
-                return (value === true);
-            }
-        }
-    };
-
-    var optionsToHandle = getOptionsToHandle(options, optionsSpec);
-    var needMetadataRecord = optionsToHandle.length > 0;
-
-    opts = makeOptions(options);
-    if (needMetadataRecord) {
-        opts.internalOpts = { sendHandledOptions: true };
-    }
-
-    function checkHandledOptions(metadata, obj) {
-        var unhandledOptions;
-
-        if (!jsprim.hasKey(metadata, '_handledOptions')) {
-            callback(new VError({
-                info: {
-                    records: {
-                        metadata: metadata,
-                        obj: obj
-                    }
-                },
-                message: 'received 2 data messages, but ' +
-                    'first message does not look like a metadata record'
-            }));
-            return;
-        }
-
-        if (metadata._handledOptions) {
-            if (metadata._handledOptions.indexOf('requireOnlineReindexing')
-                !== -1) {
-                handledOptions.requireOnlineReindexing = true;
-            }
-        }
-
-        unhandledOptions = getUnhandledOptions(handledOptions, optionsToHandle);
-        if (unhandledOptions.length > 0) {
-            callback(createUnhandledOptionsError(unhandledOptions));
-            return;
-        }
-
-        callback(null, obj);
-    }
-
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'getObject',
-        'rpcargs': [ bucket, key, opts ]
-    }, function (err, data) {
-        if (err) {
-            callback(err);
-            return;
-        }
-
-        if (data.length === 1) {
-            if (needMetadataRecord) {
-                err = createUnhandledOptionsError(Object.keys(handledOptions));
-                callback(err);
-                return;
-            }
-
-            callback(null, data[0]);
-        } else if (data.length === 2) {
-            checkHandledOptions(data[0], data[1]);
-        } else {
-            callback(new VError('expected 1 or 2 data messages, found %d',
-                data.length));
-        }
-    });
-}
-
-function deleteObject(rpcctx, bucket, key, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.string(key, 'key');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = makeOptions(options);
-    log = rpc.childLogger(rpcctx, opts);
-
-    /*
-     * electric-moray sends trailing null values with this response.  These are
-     * not normally allowed unless we specify ignoreNullValues.
-     */
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'ignoreNullValues': true,
-        'rpcmethod': 'delObject',
-        'rpcargs': [ bucket, key, opts ]
-    }, function (err, data) {
-        /*
-         * The server provides data in a response, but historically this client
-         * ignores it.
-         */
-        callback(err);
-    });
-}
-
-/*
- * Returns an array of strings representing the name of options that should have
- * been explicitly marked as handled by a moray server, but were not. Returns an
- * empty array in case this set is empty.
- *
- * @param {Object} handledOptions - represents the options that were actually
- * acknowledged as handled by the Moray server that served this findObjects
- * request. If an option was acknowledged as handled by the server, then a
- * property with the name of the option will have the value true in the
- * "handledOptions" object.
- *
- * @param {string[]} optionsToHandle - represents the options that are expected
- * to be handled by the Moray server that served this findObjects request.
- */
-function getUnhandledOptions(handledOptions, optionsToHandle) {
-    assert.object(handledOptions, 'handledOptions');
-    assert.arrayOfString(optionsToHandle, 'optionsToHandle');
-
-    var optionName;
-    var optionNameIndex;
-    var unhandledOptions = [];
-
-    for (optionNameIndex in optionsToHandle) {
-        optionName = optionsToHandle[optionNameIndex];
-        if (!handledOptions[optionName]) {
-            unhandledOptions.push(optionName);
-        }
-    }
-
-    return (unhandledOptions);
-}
-
-/*
- * Based on the option specifications in "optionsSpec", returns the option names
- * present in "options" that require an acknowledgement from Moray that they've
- * been handled.
- *
- * @param {Object} options
- * @param {Object} optionsSpec - stores metadata about some findObjects options,
- * such as a function named "testNeedHandling"
- */
-function getOptionsToHandle(options, optionsSpec) {
-    assert.object(options, 'options');
-    assert.object(optionsSpec, 'optionsSpec');
-
-    var optionName;
-    var optionValue;
-    var optionsToHandle = [];
-    var testNeedHandlingFn;
-
-    for (optionName in options) {
-        if (!Object.hasOwnProperty.call(options, optionName)) {
-            continue;
-        }
-
-        if (optionsSpec[optionName] !== undefined) {
-            assert.object(optionsSpec[optionName], 'optionsSpec[optionName]');
-            testNeedHandlingFn = optionsSpec[optionName].testNeedHandling;
-            assert.func(testNeedHandlingFn, 'testNeedHandlingFn');
-
-            optionValue = options[optionName];
-            if (testNeedHandlingFn(optionValue)) {
-                optionsToHandle.push(optionName);
-            }
-        }
-    }
-
-    return (optionsToHandle);
-}
-
-/*
- * Creates and returns a VError instance that represents an error due to the
- * Moray server not handling options that were expected to be handled by the
- * client.
- *
- * @param {Array} unhandledOptions - an array of strings that represents the
- * name of options that should have been marked as explicitly handled by the
- * moray server serving a findObjects request.
- *
- * @param {Object} cause - an instance of Error that will be used as the "cause"
- * for the newly created VError object.
- */
-function createUnhandledOptionsError(unhandledOptions, cause) {
-    assert.arrayOfString(unhandledOptions, 'unhandledOptions');
-    assert.optionalObject(cause, 'cause');
-
-    var err = new VError({
-        name: 'UnhandledOptionsError',
-        info: {
-            unhandledOptions: unhandledOptions
-        },
-        cause: cause
-    }, 'Unhandled options: %j', unhandledOptions);
-
-    return (err);
-}
-
-function findObjects(rpcctx, bucket, filter, options) {
-    var opts, log, req, res;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.string(filter, 'filter');
-    assert.object(options, 'options');
-    assert.optionalBool(options.requireIndexes, 'options.requireIndexes');
-
-    var scheduleEmitUnhandledOptionsError = false;
-    var gotMetadataRecord = false;
-    var isFirstDataRecord = true;
-    var needMetadataRecord = false;
-    var handledOptions = {
-        'requireIndexes': false,
-        'requireOnlineReindexing': false
-    };
-    var optionsSpec = {
-        requireIndexes: {
-            testNeedHandling: function testRiNeedHandling(value) {
-                return (value === true);
-            }
-        },
-        requireOnlineReindexing: {
-            testNeedHandling: function testRorNeedHandling(value) {
-                return (value === true);
-            }
-        }
-    };
-    var optionsToHandle = [];
-    var unhandledOptions = [];
-    var unhandledOptionsErrorEmitted = false;
-
-    optionsToHandle = getOptionsToHandle(options, optionsSpec);
-    needMetadataRecord = optionsToHandle.length > 0;
-
-    opts = makeOptions(options);
-    if (needMetadataRecord) {
-        opts.internalOpts = {sendHandledOptions: true};
-    }
-
-    log = rpc.childLogger(rpcctx, opts);
-    res = new EventEmitter();
-    req = rpc.rpcCommon({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'findObjects',
-        'rpcargs': [ bucket, filter, opts ]
-    }, function (err) {
-        if (err) {
-            if (VError.hasCauseWithName(err, 'FastRequestAbandonedError') &&
-                scheduleEmitUnhandledOptionsError === true) {
-                err = createUnhandledOptionsError(unhandledOptions, err);
-            }
-
-            res.emit('error', err);
-        } else {
-            if (!unhandledOptionsErrorEmitted) {
-                if (needMetadataRecord && !gotMetadataRecord) {
-                    /*
-                     * Emit an 'UnhandledOptionsError' even if the request was
-                     * successful but no data record was sent as part of the
-                     * response, because in this case the client expected at
-                     * least one data record to acknowledge which options were
-                     * handled.
-                     */
-                    err = createUnhandledOptionsError(unhandledOptions);
-                    res.emit('error', err);
-                } else {
-                    res.emit('end');
-                }
-            }
-        }
-
-        res.emit('_moray_internal_rpc_done');
-    });
-
-    req.on('data', function onObject(msg) {
-        if (isFirstDataRecord && needMetadataRecord) {
-            if (Object.hasOwnProperty.call(msg, '_handledOptions')) {
-                gotMetadataRecord = true;
-
-                if (msg._handledOptions) {
-                    if (msg._handledOptions.indexOf('requireIndexes') !== -1) {
-                        handledOptions.requireIndexes = true;
-                    }
-                    if (msg._handledOptions.indexOf('requireOnlineReindexing')
-                        !== -1) {
-                        handledOptions.requireOnlineReindexing = true;
-                    }
-                }
-            }
-
-            unhandledOptions = getUnhandledOptions(handledOptions,
-                optionsToHandle);
-            if (unhandledOptions.length > 0) {
-                scheduleEmitUnhandledOptionsError = true;
-                req.abandon();
-                /*
-                 * Make sure we don't emit a 'record' event after emitting an
-                 * "UnhandledOptionsError" error.
-                 */
-                req.removeListener('data', onObject);
-            }
-
-            isFirstDataRecord = false;
-        } else {
-            log.debug({ object: msg }, 'findObjects: record found');
-            res.emit('record', msg);
-        }
-    });
-
-    return (res);
-}
-
-function batch(rpcctx, requests, options, callback) {
-    assert.object(rpcctx, 'rpcctx');
-    assert.arrayOfObject(requests, 'requests');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    for (var i = 0; i < requests.length; i++) {
-        var r = requests[i];
-        var _s = 'requests[' + i + ']';
-        assert.string(r.bucket, _s + '.bucket');
-        assert.optionalObject(r.options, _s + '.options');
-        assert.optionalString(r.operation, _s + '.operation');
-        if (r.operation === 'update') {
-            assert.object(r.fields, _s + '.fields');
-            assert.string(r.filter, _s + '.filter');
-        } else if (r.operation === 'delete') {
-            assert.string(r.key, _s + '.key');
-        } else if (r.operation === 'deleteMany') {
-            assert.string(r.filter, _s + '.filter');
-        } else {
-            r.operation = r.operation || 'put';
-            assert.equal(r.operation, 'put');
-            assert.string(r.key, _s + '.key');
-            assert.object(r.value, _s + '.value');
-
-            // Allowing differences between the 'value' and '_value' fields is
-            // a recipe for disaster.  Any bucket with pre-update actions will
-            // wipe out '_value' with a freshly stringified version.  If
-            // '_value' contains an invalid JSON string, older version of moray
-            // will still accept it, leading to errors when JSON parsing is
-            // attempted later during get/find actions.
-            // Once it can be ensured that all accessed morays are of an
-            // appropriately recent version, this should be removed.
-            assert.optionalString(r._value, _s + '._value');
-            if (!r._value)
-                r._value = JSON.stringify(r.value);
-
-            r = (r.options || {}).headers;
-            assert.optionalObject(r, _s + '.options.headers');
-        }
-    }
-
-    var opts, log;
-
-    opts = makeOptions(options);
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'batch',
-        'rpcargs': [ requests, opts ]
-    }, function (err, data) {
-        if (!err && data.length > 1) {
-            err = new VError('expected at most 1 data message, found %d',
-                data.length);
-        }
-
-        if (err) {
-            callback(err);
-        } else {
-            callback(null, data.length === 0 ? {} : data[0]);
-        }
-    });
-}
-
-function updateObjects(rpcctx, bucket, fields, filter, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.object(fields, 'fields');
-    assert.string(filter, 'filter');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = makeOptions(options);
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'updateObjects',
-        'rpcargs': [ bucket, fields, filter, opts ]
-    }, function (err, data) {
-        if (!err && data.length > 1) {
-            err = new VError('expected at most 1 data message, found %d',
-                data.length);
-        }
-
-        if (err) {
-            callback(err);
-        } else {
-            callback(null, data.length === 0 ? {} : data[0]);
-        }
-    });
-}
-
-function deleteMany(rpcctx, bucket, filter, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.string(filter, 'filter');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = makeOptions(options);
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'deleteMany',
-        'rpcargs': [ bucket, filter, opts ]
-    }, function (err, data) {
-        if (!err && data.length > 1) {
-            err = new VError('expected at most 1 data message, found %d',
-                data.length);
-        }
-
-        if (err) {
-            callback(err);
-        } else {
-            callback(null, data.length === 0 ? {} : data[0]);
-        }
-    });
-}
-
-function reindexObjects(rpcctx, bucket, count, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.string(bucket, 'bucket');
-    assert.number(count, 'count');
-    assert.ok(count > 0, 'count > 0');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = makeOptions(options);
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'log': log,
-        'rpcmethod': 'reindexObjects',
-        'rpcargs': [ bucket, count, opts ]
-    }, function (err, data) {
-        if (!err && data.length != 1) {
-            err = new VError('expected exactly 1 data message, found %d',
-                data.length);
-        }
-
-        if (err) {
-            callback(err);
-        } else {
-            var result = data[0];
-            log.debug({ 'processed': result.processed },
-                'reindexObjects: processed');
-            callback(null, result);
-        }
-    });
-}
-
-
-///--- Helpers
-
-function makeOptions(options, value) {
-    var opts = jsprim.deepCopy(options);
-
-    // Defaults handlers
-    opts.req_id = options.req_id || libuuid.create();
-    opts.etag = (options.etag !== undefined) ? options.etag : options._etag;
-    opts.headers = options.headers || {};
-    opts.no_count = options.no_count || false;
-    opts.sql_only = options.sql_only || false;
-    opts.noCache = true;
-
-    // Including the stringified value is redundant, but older versions of
-    // moray depend upon the _value field being populated in this way.
-    if (value)
-        opts._value = JSON.stringify(value);
-
-    if (typeof (options.noCache) !== 'undefined')
-        opts.noCache = options.noCache;
-
-    return (opts);
-}
-
-
-///--- Exports
-
-module.exports = {
-    putObject: putObject,
-    getObject: getObject,
-    deleteObject: deleteObject,
-    findObjects: findObjects,
-    batch: batch,
-    updateObjects: updateObjects,
-    deleteMany: deleteMany,
-    reindexObjects: reindexObjects
-};
diff --git a/lib/pool.js b/lib/pool.js
index 8f22847..244d18d 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -5,13 +5,13 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
- * lib/pool.js: Moray connection pool implementation
+ * lib/pool.js: Boray connection pool implementation
  *
- * The Moray client leverages the Cueball module for service discovery (via DNS)
+ * The Boray client leverages the Cueball module for service discovery (via DNS)
  * and for managing TCP connections to a set of backends found via service
  * discovery.  Cueball is responsible for establishing connections (using
  * connection timeouts and backoff as appropriate) and gracefully cleaning up
@@ -73,23 +73,23 @@ var VError = require('verror');
  * Maximum time (in milliseconds) that we will continue to use a connection when
  * it was the last connection that we knew about.
  */
-var MorayFallbackMaxTime = 15 * 1000;
+var BorayFallbackMaxTime = 15 * 1000;
 
 /*
  * Connection states (see above)
  */
-var MC_S_AVAIL = '_moray_conn_state_avail';
-var MC_S_DRAIN = '_moray_conn_state_drain';
-var MC_S_FALLBACK = '_moray_conn_state_fallback';
-var MC_S_DELETED = '_moray_conn_state_deleted';
+var MC_S_AVAIL = '_boray_conn_state_avail';
+var MC_S_DRAIN = '_boray_conn_state_drain';
+var MC_S_FALLBACK = '_boray_conn_state_fallback';
+var MC_S_DELETED = '_boray_conn_state_deleted';
 
-module.exports = MorayConnectionPool;
+module.exports = BorayConnectionPool;
 
 /*
  * This is a struct-like class that represents a single logical connection.  The
- * lifecycle and logic are managed by the MorayConnectionPool class.
+ * lifecycle and logic are managed by the BorayConnectionPool class.
  */
-function MorayConnection(key, conn, hdl, log) {
+function BorayConnection(key, conn, hdl, log) {
     assert.string(key, 'key');
     assert.object(conn, 'conn');
     assert.object(hdl, 'hdl');
@@ -104,16 +104,16 @@ function MorayConnection(key, conn, hdl, log) {
 
 /*
  * This is a struct-like class representing a single allocation of a
- * MorayConnection.  This primarily exists to allow us to ensure that consumers
+ * BorayConnection.  This primarily exists to allow us to ensure that consumers
  * release each connection exactly once.  Double-releases will result in a
  * thrown exception, and leaks will be at least somewhat debuggable.
  */
-function MorayConnectionAllocation(mconn) {
+function BorayConnectionAllocation(mconn) {
     this.mca_mconn = mconn;
     this.mca_released = false;
 }
 
-MorayConnectionAllocation.prototype.connection = function () {
+BorayConnectionAllocation.prototype.connection = function () {
     return (this.mca_mconn.mc_conn);
 };
 
@@ -121,7 +121,7 @@ MorayConnectionAllocation.prototype.connection = function () {
  * Given a Cueball ConnectionSet, implements a simple allocate/release interface
  * using the connections in that set.
  */
-function MorayConnectionPool(args) {
+function BorayConnectionPool(args) {
     var self = this;
 
     assert.object(args, 'args');
@@ -185,13 +185,13 @@ function MorayConnectionPool(args) {
  *
  * The caller must invoke connRelease() when the request is finished.
  */
-MorayConnectionPool.prototype.connAlloc = function () {
+BorayConnectionPool.prototype.connAlloc = function () {
     var availkeys, key, mconn, aconn, staletime, staletimems;
 
     /*
      * There are more sophisticated ways to pick a connection (e.g., store
      * connections in a priority queue by number of outstanding requests).  But
-     * our expectation is that Moray servers are pretty uniform, Moray requests
+     * our expectation is that Boray servers are pretty uniform, Boray requests
      * are pretty uniform in their cost on the server, and so a random
      * distribution is likely to be reasonable.
      */
@@ -208,11 +208,11 @@ MorayConnectionPool.prototype.connAlloc = function () {
             key = mconn.mc_key;
             staletime = process.hrtime(this.mcp_conn_fallback_time);
             staletimems = jsprim.hrtimeMillisec(staletime);
-            if (staletimems > MorayFallbackMaxTime) {
+            if (staletimems > BorayFallbackMaxTime) {
                 mconn = null;
                 this.connFallbackRemove({
                     'staleTimeMs': staletimems,
-                    'maxTimeMs': MorayFallbackMaxTime,
+                    'maxTimeMs': BorayFallbackMaxTime,
                     'reason': 'fallback is too old'
                 });
             } else {
@@ -229,10 +229,10 @@ MorayConnectionPool.prototype.connAlloc = function () {
         }, 'no connections available'));
     }
 
-    assert.ok(mconn instanceof MorayConnection);
+    assert.ok(mconn instanceof BorayConnection);
     assert.ok(mconn.mc_nreqs >= 0);
     mconn.mc_nreqs++;
-    aconn = new MorayConnectionAllocation(mconn);
+    aconn = new BorayConnectionAllocation(mconn);
     mconn.mc_log.trace('allocated connection');
     this.mcp_nalloc_ok++;
     return (aconn);
@@ -242,11 +242,11 @@ MorayConnectionPool.prototype.connAlloc = function () {
  * [public] Release a connection allocated from connAlloc().  The caller should
  * not do anything else with the connection.
  */
-MorayConnectionPool.prototype.connRelease = function (aconn) {
+BorayConnectionPool.prototype.connRelease = function (aconn) {
     var mconn, key;
 
-    assert.ok(aconn instanceof MorayConnectionAllocation);
-    assert.ok(!aconn.mca_released, 'double-release of Moray connection');
+    assert.ok(aconn instanceof BorayConnectionAllocation);
+    assert.ok(!aconn.mca_released, 'double-release of Boray connection');
 
     mconn = aconn.mca_mconn;
     assert.ok(mconn.mc_nreqs > 0);
@@ -273,7 +273,7 @@ MorayConnectionPool.prototype.connRelease = function (aconn) {
  * [private] Invoked by cueball when a new connection has been established and
  * is ready for use.  Just add it to our set of available connections.
  */
-MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
+BorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
     var mconn, extras;
 
     assert.ok(!this.mcp_conns.hasOwnProperty(key));
@@ -281,7 +281,7 @@ MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
 
     extras = conn.socketAddrs();
     extras.key = key;
-    mconn = new MorayConnection(key, conn, hdl,
+    mconn = new BorayConnection(key, conn, hdl,
         this.mcp_log.child(extras, true));
     assert.strictEqual(mconn.mc_state, MC_S_AVAIL);
     this.mcp_conns[key] = mconn;
@@ -301,7 +301,7 @@ MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
  * use by new requests.  However, if this is the last connection we have, then
  * we hold onto it as a fallback and don't drain it right away.
  */
-MorayConnectionPool.prototype.connRetire = function (key) {
+BorayConnectionPool.prototype.connRetire = function (key) {
     var mconn;
 
     assert.ok(this.mcp_conns.hasOwnProperty(key));
@@ -340,7 +340,7 @@ MorayConnectionPool.prototype.connRetire = function (key) {
  * to remove it and we have other connections available, or this was a fallback
  * connection that we're no longer intending to use.
  */
-MorayConnectionPool.prototype.connDrain = function connDrain(key) {
+BorayConnectionPool.prototype.connDrain = function connDrain(key) {
     var mconn;
 
     assert.ok(!this.mcp_avail.hasOwnProperty(key));
@@ -364,7 +364,7 @@ MorayConnectionPool.prototype.connDrain = function connDrain(key) {
  * [private] Invoked when we know that a connection is fully quiesced (there are
  * no requests associated with it) to destroy it.
  */
-MorayConnectionPool.prototype.connDelete = function (key) {
+BorayConnectionPool.prototype.connDelete = function (key) {
     var mconn;
 
     assert.ok(!this.mcp_avail.hasOwnProperty(key));
@@ -391,7 +391,7 @@ MorayConnectionPool.prototype.connDelete = function (key) {
 /*
  * [private] Removes and cleans up the fallback connection, if any.
  */
-MorayConnectionPool.prototype.connFallbackRemove = function (props) {
+BorayConnectionPool.prototype.connFallbackRemove = function (props) {
     var mconn;
 
     assert.object(props, 'props');
@@ -416,7 +416,7 @@ MorayConnectionPool.prototype.connFallbackRemove = function (props) {
  * [private] Indicates that we should stop maintaining a fallback connection
  * (generally because the parent client is shutting down).
  */
-MorayConnectionPool.prototype.fallbackDisable = function ()
+BorayConnectionPool.prototype.fallbackDisable = function ()
 {
     this.mcp_fallback_enable = false;
     this.connFallbackRemove({ 'reason': 'shutting down' });
diff --git a/lib/rpc.js b/lib/rpc.js
index ccb6f98..28fbb7c 100644
--- a/lib/rpc.js
+++ b/lib/rpc.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -65,15 +65,15 @@ function childLogger(rpcctx, options) {
  *           useful if you want to handle data emitted by the RPC in a streaming
  *           way.
  *
- * All of these functions take care of unwrapping errors if the Moray client was
+ * All of these functions take care of unwrapping errors if the Boray client was
  * configured that way.  Named arguments are:
  *
  *     rpcmethod, rpcargs, log,     See FastClient.rpc() method.
  *     ignoreNullValues
  *
- *     rpcctx                       Moray's "rpcctx" handle, a wrapper around
+ *     rpcctx                       Boray's "rpcctx" handle, a wrapper around
  *                                  a FastClient that includes context related
- *                                  to this Moray client.
+ *                                  to this Boray client.
  */
 function rpcCommon(args, callback) {
     var rpcctx, req, addrs;
@@ -105,7 +105,7 @@ function rpcCommon(args, callback) {
             err = new VError({
                 'cause': err,
                 'info': addrs
-            }, 'moray client ("%s" to "%s")', addrs.local, addrs.remote);
+            }, 'boray client ("%s" to "%s")', addrs.local, addrs.remote);
         }
         callback(err);
     });
@@ -155,7 +155,7 @@ function rpcCommonBufferData(args, callback) {
 }
 
 /*
- * See the "unwrapErrors" constructor argument for the MorayClient.
+ * See the "unwrapErrors" constructor argument for the BorayClient.
  */
 function unwrapError(err) {
     if (err.name == 'FastRequestError') {
diff --git a/lib/tokens.js b/lib/tokens.js
deleted file mode 100644
index 49b538c..0000000
--- a/lib/tokens.js
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2016, Joyent, Inc.
- */
-
-/*
- * lib/tokens.js: token-related client API functions.  These functions are
- * invoked by same-named methods in lib/client.js to do the bulk of the work
- * associated with making RPC requests.  The arguments and semantics of these
- * functions are documented in the Moray API.
- */
-
-var assert = require('assert-plus');
-var libuuid = require('libuuid');
-var VError = require('verror');
-
-var rpc = require('./rpc');
-
-
-///--- API
-
-function getTokens(rpcctx, options, callback) {
-    var opts, log;
-
-    assert.object(rpcctx, 'rpcctx');
-    assert.object(options, 'options');
-    assert.func(callback, 'callback');
-
-    opts = { req_id: options.req_id || libuuid.create() };
-    log = rpc.childLogger(rpcctx, opts);
-    rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'getTokens',
-        'rpcargs': [ opts ],
-        'log': log
-    }, function (err, tokens) {
-        if (!err && tokens.length != 1) {
-            err = new VError('bad server response: expected 1 token, found %d',
-                tokens.length);
-        }
-
-        if (err) {
-            callback(err);
-            return;
-        }
-
-        callback(null, { 'tokens': tokens[0] });
-    });
-}
-
-
-///--- Exports
-
-module.exports = {
-    getTokens: getTokens
-};
diff --git a/man/man1/boray.1 b/man/man1/boray.1
new file mode 100644
index 0000000..cc835fa
--- /dev/null
+++ b/man/man1/boray.1
@@ -0,0 +1,339 @@
+.TH moray 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+moray \- command\-line tools for Moray
+.SH DESCRIPTION
+.PP
+Moray is a JSON\-based key\-value store.  Users can create \fBbuckets\fP, each
+containing any number of \fBobjects\fP indexed by a primary \fBkey\fP\&.  Additional
+indexes can be specified with each bucket.  Moray servers are typically
+stateless components deployed atop PostgreSQL databases, where buckets
+correspond to database tables, objects correspond to rows, and database indexes
+are created for each bucket index.
+.PP
+The \fB\fCmoray\fR npm package contains a set of command\-line tools to allow users to
+create, update, and delete both buckets and objects.  These tools connect to one
+or more remote Moray servers over TCP and execute operations.
+.PP
+Working with buckets:
+.RS
+.IP \(bu 2
+\fB\fCputbucket\fR: create or update a bucket
+.IP \(bu 2
+\fB\fCgetbucket\fR: print detailed information about one bucket
+.IP \(bu 2
+\fB\fClistbuckets\fR: print detailed information about all buckets
+.IP \(bu 2
+\fB\fCdelbucket\fR: delete a bucket and all of its contents
+.RE
+.PP
+Working with objects:
+.RS
+.IP \(bu 2
+\fB\fCputobject\fR: create or update an object
+.IP \(bu 2
+\fB\fCgetobject\fR: fetch the contents of an object by primary key
+.IP \(bu 2
+\fB\fCdelobject\fR: delete an object by primary key
+.IP \(bu 2
+\fB\fCfindobjects\fR: fetch the contents of multiple objects using a filter
+.IP \(bu 2
+\fB\fCdelmany\fR: delete multiple objects using a filter
+.IP \(bu 2
+\fB\fCupdatemany\fR: update multiple objects using a filter
+.IP \(bu 2
+\fB\fCreindexobjects\fR: populate a newly\-added index
+.RE
+.PP
+Working with remote servers:
+.RS
+.IP \(bu 2
+\fB\fCmorayping\fR: check whether Moray is online
+.IP \(bu 2
+\fB\fCmorayversion\fR: check the version of a Moray server
+.IP \(bu 2
+\fB\fCsql\fR: execute a SQL string on a Moray server
+.IP \(bu 2
+\fB\fCgettokens\fR: fetch the list of shards from electric\-moray
+.RE
+.PP
+The tools in this package support two modes for locating the remote Moray server
+on which to operate:
+.RS
+.IP \(bu 2
+Using the \fB\fC\-S\fR/\fB\fC\-\-service SERVICE_NAME\fR option or the \fB\fCMORAY_SERVICE\fR
+environment variable, users specify a DNS domain to which SRV records are
+attached that describe the list of instances available.  SRV records provide
+both a name for the host (which may be an IP address or another DNS domain)
+and a port on which to connect over TCP.  This mode is preferred for
+general use because it provides information about all instances and allows the
+client to balance multiple requests across different, equivalent servers.
+.IP \(bu 2
+Using the \fB\fC\-h\fR/\fB\fC\-\-host HOST_OR_IP\fR and \fB\fC\-p\fR/\fB\fC\-\-port PORT\fR options or the
+\fB\fCMORAY_URL\fR environment variable, users specify a specific IP address or DNS
+domain to which traditional name records are attached and a TCP port to which
+to connect.  This is useful primarily for testing against specific server
+instances.
+.RE
+.PP
+If the \fB\fC\-S\fR/\fB\fC\-\-service SERVICE_NAME\fR command\-line option is specified, it is
+always used directly as described above.
+.PP
+If the \fB\fC\-h\fR/\fB\fC\-\-host HOST_OR_IP\fR or \fB\fC\-p\fR/\fB\fC\-\-port PORT\fR options are specified,
+they are used directly as described above.  If one is specified and not the
+other, then the other value is filled in from the \fB\fCMORAY_URL\fR environment
+variable.  Otherwise, defaults of IP \fB\fC127.0.0.1\fR and port \fB\fC2020\fR are used.
+.PP
+If none of these command\-line options are specified:
+.RS
+.IP \(bu 2
+if \fB\fCMORAY_SERVICE\fR is specified, it is used to invoke the first mode
+.IP \(bu 2
+if \fB\fCMORAY_URL\fR is specified, is used to invoke the second mode
+.IP \(bu 2
+if neither is specified, the second mode is invoked with default values
+\fB\fC127.0.0.1\fR port \fB\fC2020\fR\&.
+.RE
+.SH OPTIONS
+.PP
+The following \fB\fCCOMMON_OPTIONS\fR options are accepted by all of these commands:
+.TP
+\fB\fC\-b, \-\-bootstrap\-domain BOOTSTRAP_DOMAIN\fR
+Specifies the domain name for the nameservers themselves.  Triton and Manta
+both provide domain names for the nameservers themselves.  This is useful in
+split DNS environments to ensure that the Moray only uses the nameservers
+that know about the target service.  This applies to both SRV\-record\-based
+discovery and traditional A\-record\-based discovery, but has no impact when
+connecting to a specific IP address and port.
+.TP
+\fB\fC\-h, \-\-host HOST_OR_IP\fR
+Specifies an IP address or DNS domain for the remote Moray server.  See
+above for details.
+.TP
+\fB\fC\-p, \-\-port PORT\fR
+Specifies the TCP port for the remote Moray server.  See above for details.
+.TP
+\fB\fC\-S, \-\-service SERVICE\fR
+Specifies a DNS domain to be used for SRV\-based service discovery of the
+remote Moray server.  See above for details.  \fB\fCSERVICE\fR must not be an IP
+address.
+.TP
+\fB\fC\-v, \-\-verbose\fR
+Increases the verbosity of the built\-in bunyan logger.  By default, the
+logger is created with bunyan level \fB\fCfatal\fR\&.  Each additional use of \fB\fC\-v\fR
+increases the verbosity by one level (to \fB\fCerror\fR, \fB\fCwarn\fR, and so on).  Log
+messages are emitted to stderr.  See also the \fB\fCLOG_LEVEL\fR environment
+variable.
+.SH ENVIRONMENT
+.TP
+\fB\fCLOG_LEVEL\fR
+Sets the node\-bunyan logging level. Defaults to "fatal".
+.TP
+\fB\fCMORAY_BOOTSTRAP_DOMAIN\fR
+Used as a fallback value for the \fB\fC\-b\fR/\fB\fC\-\-bootstrap\-domain\fR option.
+.TP
+\fB\fCMORAY_SERVICE\fR
+Used as a fallback value for \fB\fC\-S\fR/\fB\fC\-\-service\fR if neither of \fB\fC\-h\fR/\fB\fC\-\-host\fR or
+\fB\fC\-p\fR/\fB\fC\-\-port\fR is specified.
+.TP
+\fB\fCMORAY_URL\fR
+A URL of the form \fB\fCtcp://HOSTNAME_OR_IP[:PORT]\fR where the specified
+\fB\fCHOSTNAME_OR_IP\fR and \fB\fCPORT\fR will be used as fallback values for the
+\fB\fC\-h\fR/\fB\fC\-\-host\fR or \fB\fC\-p/\-\-port\fR options, respectively.  This value is only used
+if \fB\fCMORAY_SERVICE\fR is not present in the environment and at least one of the
+\fB\fC\-h\fR/\fB\fC\-\-host\fR or \fB\fC\-p\fR/\fB\fC\-\-port\fR options is not specified.
+.SH EXIT STATUS
+.TP
+0
+Indicates successful completion
+.TP
+1
+Indicates failure
+.TP
+2
+Indicates an invalid invocation (usage error)
+.SH EXAMPLES
+.PP
+Create a bucket for "accounts" version 1 with unique "loginName" and unique
+numeric values for "uid":
+.PP
+.RS
+.nf
+$ putbucket \-x 1 \-u loginName \-u uid:number accounts
+.fi
+.RE
+.PP
+Insert a few accounts.  The keys will match the login names:
+.PP
+.RS
+.nf
+$ putobject \-d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \\
+    accounts lisa
+$ putobject \-d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \\
+    accounts hugh
+.fi
+.RE
+.PP
+Fetch one of these back:
+.PP
+.RS
+.nf
+$ getobject accounts lisa
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800,
+    "country": "USA"
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": null
+}
+.fi
+.RE
+.PP
+Fetch objects having uids at most 800:
+.PP
+.RS
+.nf
+$ findobjects accounts '(uid<=800)'
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Update the bucket to version 2, which contains a new non\-unique indexed column
+for "country":
+.PP
+.RS
+.nf
+$ putbucket \-x 2 \-u loginName \-u uid:number \-i country accounts
+.fi
+.RE
+.PP
+Re\-index the objects in the bucket:
+.PP
+.RS
+.nf
+$ reindexobjects accounts
+bucket "accounts": 2 objects processed (continuing)
+bucket "accounts": all objects processed
+.fi
+.RE
+.PP
+Now we can search for accounts by country:
+.PP
+.RS
+.nf
+$ findobjects accounts '(country=UK)'
+{
+  "bucket": "accounts",
+  "key": "hugh",
+  "value": {
+    "loginName": "hugh",
+    "uid": 801,
+    "country": "UK"
+  },
+  "_id": 2,
+  "_etag": "82E66E74",
+  "_mtime": 1485539319781,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Update "country" for accounts with country = "UK":
+.PP
+.RS
+.nf
+$ updatemany \-d '{ "country": "United Kingdom" }' accounts '(country=UK)'
+{ count: 1, etag: 'ue6d321d' }
+.fi
+.RE
+.PP
+Now fetch back "hugh":
+.PP
+.RS
+.nf
+$ getobject accounts hugh
+{
+  "bucket": "accounts",
+  "key": "hugh",
+  "value": {
+    "loginName": "hugh",
+    "uid": 801,
+    "country": "United Kingdom"
+  },
+  "_id": 2,
+  "_etag": "ue6d321d",
+  "_mtime": 1485539410157,
+  "_txn_snap": null,
+  "_count": null
+}
+.fi
+.RE
+.PP
+Now delete that object:
+.PP
+.RS
+.nf
+$ delobject accounts hugh
+.fi
+.RE
+.PP
+List everything in the bucket (more precisely, everything having a non\-null
+"loginName"):
+.PP
+.RS
+.nf
+$ findobjects accounts '(loginName=*)'
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800,
+    "country": "USA"
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Finally, remove the bucket:
+.PP
+.RS
+.nf
+$ delbucket accounts
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(3)\fR, \fB\fCdelbucket(1)\fR, \fB\fCdelmany(1)\fR, \fB\fCdelobject(1)\fR, \fB\fCfindobjects(1)\fR,
+\fB\fCgetbucket(1)\fR, \fB\fCgetobject(1)\fR, \fB\fCgettokens(1)\fR, \fB\fClistbuckets(1)\fR,
+\fB\fCmorayping(1)\fR, \fB\fCmorayversion(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR,
+\fB\fCreindexobjects(1)\fR, \fB\fCsql(1)\fR, \fB\fCupdatemany(1)\fR,
+jsontool \[la]https://github.com/trentm/json\[ra]
+.SH DIAGNOSTICS
+.PP
+See the \fB\fC\-v\fR/\fB\fC\-\-verbose\fR option and the \fB\fCLOG_LEVEL\fR environment variable.
diff --git a/man/man1/borayping.1 b/man/man1/borayping.1
new file mode 100644
index 0000000..a2f0fb4
--- /dev/null
+++ b/man/man1/borayping.1
@@ -0,0 +1,62 @@
+.TH morayping 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+morayping \- check if a Moray server is functioning
+.SH SYNOPSIS
+.PP
+\fB\fCmorayping [COMMON_OPTIONS] [\-dF]\fR
+.SH DESCRIPTION
+.PP
+Attempts to determine whether Moray is functioning.  For this command, success
+indicates that Moray is functioning and able to respond to a request.  Failure
+indicates the command could not successfully connect and complete a request.
+.SH OPTIONS
+.TP
+\fB\fC\-d\fR
+Attempt to determine whether Moray has a working connection to its
+underlying data store by making a "deep" ping request instead of a trivial
+request.
+.TP
+\fB\fC\-F\fR
+Block until at least one Moray server is found and a connection is
+established, then execute the ping request.  This is intended to
+programmatically wait for Moray to become available, although if the request
+fails (e.g., because of a network issue), the request is not retried, and in
+this case Moray may still be down.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Check whether a Moray server is online:
+.PP
+.RS
+.nf
+$ morayping
+.fi
+.RE
+.PP
+Check whether the target server has working connections to its underlying data
+store:
+.PP
+.RS
+.nf
+$ morayping \-d
+.fi
+.RE
+.PP
+When the remote server is not online, you might get an error like this:
+.PP
+.RS
+.nf
+$ morayping \-h 127.0.0.1
+morayping: moray client "127.0.0.1:2020": failed to establish connection
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR
diff --git a/man/man1/borayversion.1 b/man/man1/borayversion.1
new file mode 100644
index 0000000..e69de29
diff --git a/man/man3/boray.3 b/man/man3/boray.3
new file mode 100644
index 0000000..2670b51
--- /dev/null
+++ b/man/man3/boray.3
@@ -0,0 +1,313 @@
+.TH moray 3 "May 2018" Moray "Moray Client Library"
+.SH NAME
+.PP
+moray \- Node.js client library for Moray
+.SH DESCRIPTION
+.PP
+Moray is a JSON\-based key\-value store.  For an overview of Moray, see
+\fB\fCmoray(1)\fR\&.  This manual page assumes basic familiarity with the services Moray
+provides, how to use them from the command line, and how both SRV\-based service
+discovery and traditional service discovery work from the command line.
+.PP
+The \fB\fCmoray\fR npm package contains a Node.js client library that allows consumers
+to create, update, and delete both buckets and objects.  The package also
+contains a suite of command\-line tools for exercising these interfaces.  When in
+doubt, see the implementation of those tools for examples of using each RPC
+call.
+.SS Creating a client
+.PP
+To interact with Moray, users of the Node library instantiate a Moray client
+object, which requires a bunyan\-style logger.  The simplest invocation, which is
+suitable only for one\-off tools and test programs, would be to connect to Moray
+on localhost:
+.PP
+.RS
+.nf
+var mod_bunyan = require('bunyan');
+var mod_moray = require('moray');
+
+var log = mod_bunyan.createLogger({ name: 'my\-tool', level: 'INFO' });
+
+var client = mod_moray.createClient({
+    log: log,
+    host: '127.0.0.1',
+    port: 2020
+});
+
+client.on('connect', function () {
+    /* Start making RPC calls.  This example lists buckets. */
+    client.listBuckets(function (err, buckets) {
+        if (err) {
+            /* This should be handled more gracefully! */
+            throw (err);
+        }
+
+        console.log(JSON.stringify(buckets));
+
+        /* When finished, be sure to close the client. */
+        client.close();
+    });
+});
+.fi
+.RE
+.PP
+This works for a simple test program, but is not suitable for Triton and Manta
+servers or command\-line tools for a few reasons:
+.RS
+.IP \(bu 2
+This mode does not support SRV\-based service discovery, which is critical for
+increased scalability and improved fault tolerance.  SRV\-based discovery is
+configured by using the \fB\fCsrvDomain\fR property instead of \fB\fChost\fR or \fB\fCport.\fR
+.IP \(bu 2
+This mode does not enable the client to use bootstrap resolvers, which are
+critical for use in mixed DNS environments (e.g., where a combination of
+Triton, Manta, or external namservers may be in use).  Bootstrap resolvers are
+configured using the \fB\fCcueballOptions.resolvers\fR property.
+.IP \(bu 2
+Command\-line tools should generally specify additional parameters to ensure
+that they fail quickly when servers are down rather than retrying
+indefinitely until they are online.  This means specifying \fB\fCfailFast\fR\&.  It's
+also a good idea to specify \fB\fCmustCloseBeforeNormalProcessExit\fR to make sure
+that your tool shuts down cleanly.
+.RE
+.PP
+Here's a general pattern for \fIserver\fP components in Triton and Manta to
+configure the Moray client:
+.PP
+.RS
+.nf
+var mod_jsprim = require('jsprim');
+
+var client, config;
+
+/*
+ * Extract the Moray client configuration block from the server's
+ * configuration file.  Here, we assume that "serverConfig" came from
+ * parsing the server's configuration file.  We also assume that the
+ * Moray configuration property is just called "moray", but some components
+ * (notably Muskie) have multiple clients, and they would use different
+ * property names (e.g., "picker" or "marlin").
+ */
+config = jsprim.deepCopy(serverConfig.moray);
+config.log = log;
+client = mod_moray.createClient(config);
+client.on('connect', function onMorayConnect() {
+    /* start using the client */
+});
+.fi
+.RE
+.PP
+\fIClient\fP components would usually add an \fB\fCerror\fR listener, too:
+.PP
+.RS
+.nf
+/*
+ * Client tools add an error listener.  Servers generally should NOT do this
+ * because they configure the client to retry indefinitely.  Any errors
+ * emitted by the client would be programmer errors.
+ */
+client.on('error', function onError(err) {
+    console.error('moray client error: %s', err.message);
+    process.exit(1);
+});
+.fi
+.RE
+.PP
+In practice, \fB\fCserverConfig.moray\fR comes from a SAPI configuration template.  For
+\fBTriton services\fP, it will typically look like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "{{{MORAY_SERVICE}}}"
+    "cueballOptions": {
+        "resolvers": [ "{{{BINDER_SERVICE}}}" ]
+    }
+}
+.fi
+.RE
+.PP
+That will expand to something like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "moray.mydatacenter.joyent.us",
+    "cueballOptions": {
+        "resolvers": [ "binder.mydatacenter.joyent.us" ]
+    }
+}
+.fi
+.RE
+.PP
+For \fBManta services\fP, the template file will typically include a block that
+looks like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "{{MARLIN_MORAY_SHARD}}",
+    "cueballOptions": {
+        "resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
+    }
+}
+.fi
+.RE
+.PP
+That will expand to something like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "1.moray.myregion.joyent.us",
+    "cueballOptions": {
+        "resolvers": [ "nameservice.myregion.joyent.us" ]
+    }
+}
+.fi
+.RE
+.PP
+This approach (using a block from the configuration file) allows operators to
+reconfigure a service to point at a specific instance by replacing the
+\fB\fCsrvDomain\fR property with \fB\fChost\fR and \fB\fCport\fR properties.
+.PP
+Command\-line tools that use Moray should typically define their own options for
+specifying \fB\fCsrvDomain\fR, \fB\fChost\fR, and \fB\fCport\fR properties.  See \fB\fCmoray(1)\fR for the
+command\-line options and fallback environment variables used by the built\-in
+Moray tools.
+.PP
+Command\-line tools should generally also specify \fB\fCfailFast\fR and
+\fB\fCmustCloseBeforeNormalProcessExit\fR\&.
+.SS Making RPC calls
+.PP
+Callers make RPC calls by invoking RPC methods on the client.  The specific
+methods are documented in the Moray server \[la]https://github.com/joyent/moray\[ra]
+reference documentation.
+.PP
+All RPC methods are asynchronous, and they all follow one of two styles
+described in the "Node.js Error Handling" documentat.  The style used depends on
+the kind of data returned by the RPC.
+.RS
+.IP \(bu 2
+RPC calls that return a fixed number of results (usually just one object or a
+small chunk of metadata) are callback\-based: the last argument to the RPC
+method is a callback.  The first argument to the callback is an optional
+error, and subsequent arguments are RPC\-specific.
+.IP \(bu 2
+RPC calls that return a large or variable number of results (like
+\fB\fCfindObjects\fR) are event\-emitter\-based: they return an event emitter that
+emits \fB\fCerror\fR on failure, \fB\fCend\fR on completion, and other events depending on
+the RPC call.
+.RE
+.PP
+All of the RPC methods take an optional \fB\fCoptions\fR argument that is always the
+last non\-callback argument.  (For callback\-based RPCs, it's the second\-to\-last
+argument.  For event\-emitter\-based RPCs, it's the last argument.)  You can use
+this to pass in a \fB\fCreq_id\fR for correlating log entries from one service with
+the Moray client log entries.  Some APIs (namely put/get/del object) have
+additional options to allow cache bypassing, for example.
+.SH OPTIONS
+.PP
+The client constructor uses named arguments on a single \fB\fCargs\fR object.
+.PP
+All constructor invocations must provide:
+.TP
+\fB\fClog\fR (object)
+a bunyan\-style logger
+.PP
+All constructor invocations must also provide one of the following:
+.TP
+\fB\fCsrvDomain\fR (string)
+DNS domain name for SRV\-based service discovery
+.TP
+\fB\fCurl\fR (string)
+Describes the hostname or IP address and TCP port to specify a specific
+Moray server to connect to (instead of using SRV\-based service discovery).
+This is deprecated for servers, and should only be used for tools, for
+testing, and for unusual, temporary operational changes.  The format for
+this option is the same as for the \fB\fCMORAY_URL\fR environment variable
+described in \fB\fCmoray(1)\fR\&.
+.TP
+\fB\fChost\fR (string) and \fB\fCport\fR (integer or string)
+Like \fB\fCURL\fR, but specified using different properties.
+.PP
+Callers may also provide:
+.TP
+\fB\fCcollector\fR (object)
+An artedi \[la]https://github.com/joyent/node-artedi\[ra] metrics collector. This
+will be passed to the underlying node\-fast component which will add metrics
+for count and duration of RPC calls.
+.TP
+\fB\fCcueballOptions\fR (object)
+Overrides cueball\-related options, including various timeouts and delays.
+For specific options that can be overridden here, see the source.  \fBNOTE:
+it's not expected that most consumers would need to specify any of these.
+Default values ought to work for the port, DNS service, and all the various
+timeouts, delays, and retry limits.\fP
+.TP
+\fB\fCfailFast\fR (boolean)
+If true, this sets a more aggressive retry policy, and the client emits
+"error" when the underlying Cueball set reaches state "failed".  This is
+intended for use by command\-line tools to abort when it looks like dependent
+servers are down.  Servers should generally not specify this option because
+they should wait indefinitely for dependent services to come up.
+.TP
+\fB\fCunwrapErrors\fR (boolean)
+If false (the default), Errors emitted by this client and RPC requests will
+contain a cause chain that explains precisely what happened.  For example,
+if an RPC fails with SomeError, you'll get back a FastRequestError
+(indicating a request failure) caused by a FastServerError (indicating that
+the failure was on the remote server, as opposed to a local or
+transport\-level failure) caused by a SomeError.  In this mode, you should
+use VError.findCauseByName(err, 'SomeError') to determine whether the root
+cause was a SomeError.
+If the "unwrapErrors" option is true, then Fast\-level errors are unwrapped
+and the first non\-Fast error in the cause chain is returned.  This is
+provided primarily for compatibility with legacy code that uses err.name to
+determine what kind of Error was returned.  New code should prefer
+VError.findCauseByName() instead.
+.TP
+\fB\fCmustCloseBeforeNormalProcessExit\fR (boolean)
+If true, then cause the program to crash if it would otherwise exit 0 and
+this client has not been closed.  This is useful for making sure that client
+consumers clean up after themselves.
+.TP
+\fB\fCrequireIndexes\fR (boolean)
+If true, all \fB\fCfindObjects\fR requests sent from this client will respond with a
+\fB\fCNotIndexedError\fR error if at least one of the fields included in the search
+filter has an index that can't be used.
+.IP
+If the server that handles a given \fB\fCfindObjects\fR request does not support
+checking that search fields have usable indexes, an \fB\fCUnhandledOptionsError\fR
+event will be emitted. In this case, the error object will have a property
+named \fB\fCunhandledOptions\fR whose value is an array of strings that will contain
+the string \fB\fC\&'requireIndexes'\fR, to represent that this option wasn't handled by
+the moray server that served the \fB\fCfindObjects\fR request.
+.IP
+Passing \fB\fCrequireIndexes: false\fR to any \fB\fCfindObjects\fR request will disable this
+behavior for that specific request, regardless of the value of the
+\fB\fCrequireIndexes\fR option passed when instantiating the client.
+.PP
+Some legacy options are accepted as documented in the source.
+.SH ENVIRONMENT
+.PP
+The \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and \fB\fCMORAY_URL\fR environment variables are
+interpreted by each command\-line tool, not the client library itself.
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, Moray server reference
+documentation \[la]https://github.com/joyent/moray/blob/master/docs/index.md\[ra],
+Node.js Error
+Handling \[la]https://www.joyent.com/node-js/production/design/errors\[ra]\&.
+.SH DIAGNOSTICS
+.PP
+The client library logs messages using the bunyan logger.  Increase the log
+level for more verbose output.
+.PP
+The underlying node\-fast \[la]https://github.com/joyent/node-fast\[ra] RPC library
+provides DTrace probes on supported systems for inspecting low\-level RPC events.
+.PP
+Use Node's \fB\fC\-\-abort\-on\-uncaught\-exception\fR command\-line argument to enable core
+file generation upon fatal program failure.  These core files can be used with
+mdb_v8 \[la]https://github.com/joyent/mdb_v8\[ra] to inspect the program's state at the
+time of the crash.
diff --git a/package.json b/package.json
index 32bd218..720c75d 100644
--- a/package.json
+++ b/package.json
@@ -1,9 +1,12 @@
 {
     "name": "boray",
-    "description": "Buckets moray client library",
-    "version": "3.6.0",
+    "description": "Boray (Buckets moray) client library",
+    "version": "0.1.0",
     "author": "Joyent (joyent.com)",
-    "keywords": [ "moray" ],
+    "keywords": [
+        "moray",
+        "boray"
+    ],
     "main": "./lib/index.js",
     "repository": {
         "type": "git",
-- 
2.21.0

