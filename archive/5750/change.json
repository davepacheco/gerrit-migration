{"project":"joyent/illumos-kvm","branch":"master","topic":"live migration","id":"Id870b8c49db7e6f61ea583112ab6fd69bb55ee44","number":"5750","subject":"fix live migration","owner":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"url":"https://cr.joyent.us/5750","commitMessage":"fix live migration\n","createdOn":1552150042,"lastUpdated":1555499244,"open":true,"status":"NEW","comments":[{"timestamp":1552150042,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 1."},{"timestamp":1552937720,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 2: Patch Set 1 was rebased."},{"timestamp":1553864065,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 3: Patch Set 2 was rebased"},{"timestamp":1554130992,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Topic set to How to test: https://binaryparadise.com/~janci/livemig/smartos-livemig-howto.txt"},{"timestamp":1554131016,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Topic changed from How to test: https://binaryparadise.com/~janci/livemig/smartos-livemig-howto.txt to live migration"},{"timestamp":1554472452,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1554476333,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(6 comments)"},{"timestamp":1554484973,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 3:\n\n(2 comments)"},{"timestamp":1554487573,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1554490035,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(1 comment)"},{"timestamp":1554566855,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 4."},{"timestamp":1554567208,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 5."},{"timestamp":1554758259,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5:\n\n(3 comments)"},{"timestamp":1554762180,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 5:\n\n(1 comment)"},{"timestamp":1554765570,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 6."},{"timestamp":1554895095,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 6:\n\n(1 comment)"},{"timestamp":1555428578,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 6:\n\n(2 comments)"},{"timestamp":1555495053,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Patch Set 6:\n\n(1 comment)"},{"timestamp":1555499244,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Uploaded patch set 7."}],"currentPatchSet":{"number":"7","revision":"d870b8c49db7e6f61ea583112ab6fd69bb55ee44","parents":["942791d8b56a99123f7a4786526a797ae7b9b41b"],"ref":"refs/changes/50/5750/7","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1555499244,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"kvm.c","type":"MODIFIED","insertions":49,"deletions":0},{"file":"kvm_emulate.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":3,"deletions":0},{"file":"kvm_x86host.h","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":55,"sizeDeletions":-3},"patchSets":[{"number":"1","revision":"7e282a7963d3d5b01f335104d5c317e55525772a","parents":["413c0b4fcc6ed30585ee21ef29ef3a20e7ae4f5f"],"ref":"refs/changes/50/5750/1","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1552150042,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"kvm.c","type":"MODIFIED","insertions":46,"deletions":-2},{"file":"kvm_host.h","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":8,"deletions":-6},{"file":"kvm_x86.h","type":"MODIFIED","insertions":5,"deletions":0}],"sizeInsertions":63,"sizeDeletions":-11},{"number":"2","revision":"1c9656a0c7e16fba0cdbb9ab70d68e1986da3ab6","parents":["ea8a63a5668f523f5c65bbe466eaf80c4101f085"],"ref":"refs/changes/50/5750/2","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1552937720,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"TRIVIAL_REBASE","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"kvm.c","type":"MODIFIED","insertions":46,"deletions":-2},{"file":"kvm_host.h","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":8,"deletions":-6},{"file":"kvm_x86.h","type":"MODIFIED","insertions":5,"deletions":0}],"sizeInsertions":63,"sizeDeletions":-11},{"number":"3","revision":"a2ccede86e21e07018b0ac4678843465ecbfd674","parents":["1d74626eb39ac238bbf5c5c19429e5ac204ff23e"],"ref":"refs/changes/50/5750/3","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1553864065,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"TRIVIAL_REBASE","comments":[{"file":"Makefile","line":62,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"See comment in kvm.c about time.h vs sys/time.h"},{"file":"kvm.c","line":317,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Since this is being built as a module, it would probably be better to use sys/time.h (from uts/common/sys)"},{"file":"kvm.c","line":317,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Yes, this needs to be sys/time.h and the correspond bit should be removed from the Makefile."},{"file":"kvm.c","line":317,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"Ok, I\u0027ll change and test that."},{"file":"kvm.c","line":2540,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please run make check/cstyle. This and many other lines aren\u0027t cstyle clean."},{"file":"kvm.c","line":2612,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"There are a couple of things that need to be checked here. First, we\u0027re getting a uint64_t value, but casting it to an int64_t (hrtime_t). This needs to be checked to make sure we don\u0027t create a negative number and therefore we need to reject anything larger than INT64_MAX. As this should represent nanoseconds since boot roughly.\n\nHow are we supposed to handle the fact that the host\u0027s hrtime_t may be substantially less than the one that the target came from? In this case, does a negative value make sense and do you believe we\u0027ll do the right thing through all the other uses of this?"},{"file":"kvm.c","line":2612,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"The raw value comes always from KVM_GET_CLOCK where it is cast from hrtime_t to uint64_t. It is unfortunate that this needs to be done but we need to fit the value into already-defined qemu structure (kvm_clock_data).\n\nTherefore the casting goes like this:\nhrtime_t (boot_hrtime) -\u003e uint64_t (user_ns.clock) -\u003e qemu save/restore -\u003e uint64_t (user_ns.clock) -\u003e hrtime_t (boot_hrtime)\n\nI\u0027m open to other suggestions how to deal with this."},{"file":"kvm.c","line":2612,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"That\u0027s the wrong way to think about this. This is a kernel API, you need to assume you\u0027ll get any arbitrary value from a hostile user. What you\u0027ve described is the theoretical happy path. Unfortunately, all we know is that we get an arbitrary uint64_t and we need to validate that it fits inside an int64_t.\n\nThe suggestion is what I laid out above. We need to make sure that we check the validity of the value. Since this should in theory represent how much time the system has been up, it should fit within the positive range of an int64_t and it seems reasonable to generate an error about that fact."},{"file":"kvm.c","line":2626,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Right now I don\u0027t see the boot_hrtime value ever set. I feel like that means we\u0027ll be transmitting an arbitrarily high value here. Are you seeing it set somewhere that I\u0027m not?"},{"file":"kvm.c","line":2626,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"19:47 \u003c janci\u003e pmooney: I\u0027m still wondering about one thing (also rmustacc mentioned it): why the boot_hrtime is not set anywhere?\n19:48 \u003c pmooney\u003e no good reason\n19:48 \u003c pmooney\u003e it\u0027s probably a bug\n19:48 \u003c janci\u003e as far as I understand, it works because the kvm-clock implementation in the guest cares only about time diff\n19:49 \u003c janci\u003e so we are counting from an arbitrary value but it doesn\u0027t matter that much"},{"file":"kvm_x86.c","line":760,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this being cast to its own type?"},{"file":"kvm_x86.c","line":760,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"I wanted to be sure. I\u0027ll remove that."},{"file":"kvm_x86.h","line":158,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Could you explain the motivation behind this change?  Why double the effective number of entries in the struct (100 from kvm_msrs`entries, 100 from msr_data`entries)?"},{"file":"kvm_x86.h","line":158,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Note, the struct kvm_msrs should be the identical thing to the QEMU version of the struct msr_data. The fact that the msrs and padding are split apart in the kernel version instead of in the nested kvm_msrs struct shouldn\u0027t change anything for userland from an ABI perspective."},{"file":"kvm_x86.h","line":158,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"I took the struct 1:1 directly from kvm-cmd:\nhttps://github.com/joyent/illumos-kvm-cmd/blob/master/qemu-kvm-x86.c#L725\n\nI did not alter the struct hierarchy. As seen e.g. here\nhttps://github.com/YanChii/illumos-kvm/commit/31a2e4cdc2d6bc482f836f1a5503ddcbb5e1a94a#diff-b509329e45fc968aef7a785ae00ab4bfL1504"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"kvm.c","type":"MODIFIED","insertions":46,"deletions":-2},{"file":"kvm_host.h","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":8,"deletions":-6},{"file":"kvm_x86.h","type":"MODIFIED","insertions":5,"deletions":0}],"sizeInsertions":63,"sizeDeletions":-11},{"number":"4","revision":"62e992f00411231e1f06005a8d495d76a66c1eb4","parents":["1d74626eb39ac238bbf5c5c19429e5ac204ff23e"],"ref":"refs/changes/50/5750/4","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1554566855,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":4,"deletions":-4},{"file":"kvm.c","type":"MODIFIED","insertions":56,"deletions":0},{"file":"kvm_emulate.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":4,"deletions":0},{"file":"kvm_x86host.h","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":67,"sizeDeletions":-7},{"number":"5","revision":"029a152eddd1d9b03b2ebd39a7f35ea32b641592","parents":["1d74626eb39ac238bbf5c5c19429e5ac204ff23e"],"ref":"refs/changes/50/5750/5","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1554567208,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","comments":[{"file":"kvm.c","line":2611,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We don\u0027t use C++ style comments, only C style comments."},{"file":"kvm.c","line":2622,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this a problem? Why can\u0027t it be in the future? Wouldn\u0027t that stop valid migrations? The hrtime_t is a signed value, so it could be negative, which means when we subtract from it in the future, we\u0027ll add to it."},{"file":"kvm.c","line":2622,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"user_ns.clock value effectively contains VM uptime in hrtime_t resolution, not the boot_hrtime itself. Therefore I\u0027ve made a mistake and correct condition should be:\nif (user_ns.clock \u003c 0) {\n...\n\nNow the answer to your question:\nHow we can get a negative number here?\nWe cannot, user_ns.clock is uint64. The check is useless.\n\nBut thinking forward: we can get an overflow for user_ns.clock that will get caught by INT64_MAX if:\n1. the boot_hrtime value was uninitialized (this is the present state of the code, fixed in this commit) \n2. (probably) the hypervisor\u0027s clock was set backwards - before the VM boot time (so the gethrtime() returns smaller number than boot_hrtime).\n3. intentional forgery that does not achieve anything besides inconsistent migration.\n\nI don\u0027t see 1. and 3. as a problem. \nIt will work correctly also without this check.\n\nThe 2. is more tricky because (in theory) it might affect the valid migration. And this check will not help to solve this problem anyway.\n\nSo after re-thinking I think we can remove this check because it doesn\u0027t help.\n\nI\u0027ll check for overflow in KVM_GET_CLOCK instead."},{"file":"kvm_x86.c","line":761,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This has inconsistent indentation with normal continuations (4 spaces after the tab)."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"kvm.c","type":"MODIFIED","insertions":56,"deletions":0},{"file":"kvm_emulate.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":4,"deletions":0},{"file":"kvm_x86host.h","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":63,"sizeDeletions":-3},{"number":"6","revision":"c055c05ead3d659b4046c95ccd346cd961420ce6","parents":["942791d8b56a99123f7a4786526a797ae7b9b41b"],"ref":"refs/changes/50/5750/6","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1554765570,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","comments":[{"file":"kvm.c","line":2614,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"rmustacc: I still don\u0027t like this one. It prevents us from transferring a negative value (e.g. when host clock goes backwards a lot after VM boot).\n\nHow about this proposal:\n\nKVM_GET_CLOCK:\n\nVariant A:\n- cast hrtime_t to uint64_t directly (there\u0027s no overflow when only casting)\nuser_ns.clock \u003d (uint64_t)timediff;\n\nVariant B:\n- shift the signed value to the middle of unsigned range\nuser_ns.clock \u003d (uint64_t)timediff;\nuser_ns.clock +\u003d INT64_MAX + 1;\n\nKVM_GET_CLOCK:\n\nVariant A:\n- cast int64_t hrtime_t directly (I know you\u0027ve refused this one but there\u0027s no overflow when only casting and we are getting the right value. Even if malicious user forges the number, it will always fit in as we only change the representation of the same binary number).\ntimediff \u003d (hrtime_t)user_ns.clock;\n\nVariant B:\ntimediff \u003d (hrtime_t)(user_ns.clock - (INT64_MAX + 1));"},{"file":"kvm.c","line":2614,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, let\u0027s take a step back for a moment. There are a few different things to consider.\n\nFirst off, let\u0027s make sure we\u0027re on the same page about what the boot_hrtime is supposed to represent. When we\u0027re writing into the clock page via kvm_write_guest_time(), we\u0027re using this to calculate pvclock-\u003esystem_time(). With the addition of the proper initialization of boot_hrtime(), we\u0027re using this to represent nanoseconds since boot of the VM.\n\nThis means, that the value we\u0027re transmitting when we get the clock base is how long the VM has been up. This isn\u0027t a time that should jump backwards, it should always be increasing as long as the VM is running, right? Can you further describe how this moves backwards in this scheme?\n\nBased on this, the value we get is correct today. I\u0027m not sure we even should ever be on the negative path that you have below based on this logic. Though that depends on how we deal with setting.\n\nTherefore, when we come back around and set this value here, we need to set it such that a gethrtime() - boot_hrtime \u003d ioctl value.\n\nThis, to me, suggests that the boot_hrtime can be negative; however, the value passed in by the user should only ever be a positive int64_t. The value we\u0027re transferring out via GET_CLOCK and in via SET_CLOCK should only ever represent nanoseconds since boot of the VM, which is a positive value.\n\nFinally, I think the casting concerns are valid, but not for the reasons you expect. Let\u0027s say I you pass in a large positive value, like INT64_MAX + 1 as a uint64_t as the ioctl takes it. When you cast that to an int64_t, that will become -9223372036854775808. If we subtract that from any positive hrtime_t value, as gethrtime() - -9223372036854775808. This will result in overflow of the type, leading to undefined behavior.\n\nIt doesn\u0027t matter what casting games we play on get. We should just make sure get represents what we want. We have to safeguard set, probably more strictly than we do today to make sure that we don\u0027t result in having calculations that\u0027ll overflow. That said, if we treat this as the actual nanoseconds since boot of the VM, which I think is right, then valid uses will never hit this problem, because it\u0027d take a lot of nanoseconds since boot for both the VM and system in question for it to be a problem.\n\nDoes this make sense? It\u0027s not about whether the resulting boot_hrtime will be positive or negative, but rather what user_ns.clock is supposed to represent and how we make sure that doesn\u0027t induce undefined behavior."},{"file":"kvm.c","line":2614,"reviewer":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"message":"I understand. Thank you for your effort in explaining your thinking to me.\nI\u0027ll treat the value of VM uptime as always positive and act accordingly.\n\nImplications:\nSET_CLOCK: check for INT64_MAX as you\u0027ve suggested and simply use the supplied value\nGET_CLOCK: simply output the value of gethrtime() - boot_hrtime\n\nWe can do it simple here because I\u0027ve realized that the actual problem is in the other part of the kernel:\nhttps://github.com/joyent/illumos-kvm/blob/master/kvm_x86.c#L753\nWhen calculating the pvclock-\u003esystem_time for guest, we currently do:\npvclock-\u003esystem_time \u003d hrt - v-\u003ekvm-\u003earch.boot_hrtime;\n\nBut the actual pvclock-\u003esystem_time is uint64_t. Therefore after fixing the boot_hrtime initialization and moving the host OS clock backwards, we get an overflow (and currently we are getting overflows randomly which is possibly even worse).\n\nI\u0027m not sure however if correcting this other thing should be part of this patch."},{"file":"kvm_x86.c","line":760,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is unneeded."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"kvm.c","type":"MODIFIED","insertions":55,"deletions":0},{"file":"kvm_emulate.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":4,"deletions":0},{"file":"kvm_x86host.h","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":62,"sizeDeletions":-3},{"number":"7","revision":"d870b8c49db7e6f61ea583112ab6fd69bb55ee44","parents":["942791d8b56a99123f7a4786526a797ae7b9b41b"],"ref":"refs/changes/50/5750/7","uploader":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"createdOn":1555499244,"author":{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"kvm.c","type":"MODIFIED","insertions":49,"deletions":0},{"file":"kvm_emulate.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"kvm_x86.c","type":"MODIFIED","insertions":3,"deletions":0},{"file":"kvm_x86host.h","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":55,"sizeDeletions":-3}],"allReviewers":[{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},{"name":"Jan Poctavek","email":"janci@binaryparadise.com","username":"YanChii"}]}