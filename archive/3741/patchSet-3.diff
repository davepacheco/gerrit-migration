From 33bcab42a282d0baf14fdb9b4b8b084a8f56bd55 Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Mon, 26 Mar 2018 15:43:51 +0000
Subject: [PATCH] OS-6831 bhyve brand should use zfd for zhyve logging Reviewed
 by: Jerry Jelinek <jerry.jelinek@joyent.com> Approved by: Jerry Jelinek
 <jerry.jelinek@joyent.com>

---
 usr/src/cmd/bhyve/zhyve.c                 | 18 ++++++----
 usr/src/cmd/zoneadmd/zfd.c                | 24 +++++++++----
 usr/src/cmd/zoneadmd/zoneadmd.c           | 11 +++---
 usr/src/lib/brand/bhyve/zone/platform.xml |  2 ++
 usr/src/lib/brand/bhyve/zone/statechange  | 43 +++++++++++++++++++++++
 5 files changed, 81 insertions(+), 17 deletions(-)

diff --git a/usr/src/cmd/bhyve/zhyve.c b/usr/src/cmd/bhyve/zhyve.c
index 5cb32c21a0..de94ea97bd 100644
--- a/usr/src/cmd/bhyve/zhyve.c
+++ b/usr/src/cmd/bhyve/zhyve.c
@@ -28,7 +28,6 @@
 #include <sys/corectl.h>
 
 #define	ZHYVE_CMD_FILE	"/var/run/bhyve/zhyve.cmd"
-#define	ZHYVE_LOG_FILE	"/tmp/zhyve.log"
 
 #define	FILE_PROVISIONING	"/var/svc/provisioning"
 #define	FILE_PROVISION_SUCCESS	"/var/svc/provision_success"
@@ -158,15 +157,22 @@ main(int argc, char **argv)
 		(void) dup2(fd, STDIN_FILENO);
 		(void) close(fd);
 	}
-	fd = open(ZHYVE_LOG_FILE, O_WRONLY|O_CREAT|O_APPEND, 0644);
+
+	fd = open("/dev/zfd/1", O_WRONLY);
 	assert(fd >= 0);
-	(void) dup2(fd, STDOUT_FILENO);
+	if (fd != STDOUT_FILENO) {
+		(void) dup2(fd, STDOUT_FILENO);
+		(void) close(fd);
+	}
 	setvbuf(stdout, NULL, _IONBF, 0);
-	(void) dup2(fd, STDERR_FILENO);
-	setvbuf(stderr, NULL, _IONBF, 0);
-	if (fd != STDOUT_FILENO && fd != STDERR_FILENO) {
+
+	fd = open("/dev/zfd/2", O_WRONLY);
+	assert(fd >= 0);
+	if (fd != STDERR_FILENO) {
+		(void) dup2(fd, STDERR_FILENO);
 		(void) close(fd);
 	}
+	setvbuf(stderr, NULL, _IONBF, 0);
 
 	if (parse_options_file(ZHYVE_CMD_FILE, &zargc, &zargv) != 0) {
 		(void) fprintf(stderr, "%s: failed to parse %s: %s\n",
diff --git a/usr/src/cmd/zoneadmd/zfd.c b/usr/src/cmd/zoneadmd/zfd.c
index 88501942e9..48334b182a 100644
--- a/usr/src/cmd/zoneadmd/zfd.c
+++ b/usr/src/cmd/zoneadmd/zfd.c
@@ -22,7 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -89,6 +89,7 @@ static thread_t logger_tid;
 static int	logfd = -1;
 static size_t	log_sz = 0;
 static size_t	log_rot_sz = 0;
+static char	log_name[MAXNAMELEN] = "stdio.log";
 
 static void rotate_log();
 
@@ -98,9 +99,9 @@ static void rotate_log();
  */
 static int eventstream[2] = {-1, -1};
 
-#define	LOGNAME			"stdio.log"
 #define	ZLOG_MODE		"zlog-mode"
-#define	LOG_MAXSZ		"zlog-max-size"
+#define	ZLOG_MAXSZ		"zlog-max-size"
+#define	ZLOG_NAME		"zlog-name"
 #define	ZFDNEX_DEVTREEPATH	"/pseudo/zfdnex@2"
 #define	ZFDNEX_FILEPATH		"/devices/pseudo/zfdnex@2"
 #define	SERVER_SOCKPATH		ZONES_TMPDIR "/%s.server_%s"
@@ -1132,7 +1133,7 @@ open_logfile()
 	(void) mkdir(logpath, 0700);
 
 	(void) snprintf(logpath, sizeof (logpath), "%s/logs/%s", zonepath,
-	    LOGNAME);
+	    log_name);
 
 	if ((logfd = open(logpath, O_WRONLY | O_APPEND | O_CREAT,
 	    0600)) == -1) {
@@ -1159,9 +1160,9 @@ rotate_log()
 
 	(void) snprintf(rnm, sizeof (rnm),
 	    "%s/logs/%s.%d%02d%02dT%02d%02d%02dZ",
-	    zonepath, LOGNAME, gtm.tm_year + 1900, gtm.tm_mon + 1, gtm.tm_mday,
+	    zonepath, log_name, gtm.tm_year + 1900, gtm.tm_mon + 1, gtm.tm_mday,
 	    gtm.tm_hour, gtm.tm_min, gtm.tm_sec);
-	(void) snprintf(onm, sizeof (onm), "%s/logs/%s", zonepath, LOGNAME);
+	(void) snprintf(onm, sizeof (onm), "%s/logs/%s", zonepath, log_name);
 
 	(void) close(logfd);
 	if (rename(onm, rnm) != 0)
@@ -1369,8 +1370,10 @@ get_mode_logmax(zfd_mode_t *mode)
 				mode->zmode_n_stddevs = 3;
 				mode->zmode_n_addl_devs = 0;
 			}
+			continue;
+		}
 
-		} else if (strcmp(LOG_MAXSZ, attr.zone_attr_name) == 0) {
+		if (strcmp(ZLOG_MAXSZ, attr.zone_attr_name) == 0) {
 			char *p;
 			long lval;
 
@@ -1378,6 +1381,13 @@ get_mode_logmax(zfd_mode_t *mode)
 			lval = strtol(p, &p, 10);
 			if (*p == '\0')
 				log_rot_sz = (size_t)lval;
+			continue;
+		}
+
+		if (strcmp(ZLOG_NAME, attr.zone_attr_name) == 0) {
+			(void) strlcpy(log_name, attr.zone_attr_value,
+			    sizeof (log_name));
+			continue;
 		}
 	}
 	(void) zonecfg_endattrent(handle);
diff --git a/usr/src/cmd/zoneadmd/zoneadmd.c b/usr/src/cmd/zoneadmd/zoneadmd.c
index 608af8170e..60af30d40b 100644
--- a/usr/src/cmd/zoneadmd/zoneadmd.c
+++ b/usr/src/cmd/zoneadmd/zoneadmd.c
@@ -1285,16 +1285,19 @@ zone_bootup(zlog_t *zlogp, const char *bootargs, int zstate, boolean_t debug)
 	 */
 	notify_zonestatd(zone_id);
 
+	/* Startup a thread to perform zfd logging/tty svc for the zone. */
+	create_log_thread(zlogp, zone_id);
+
 	if (zone_boot(zoneid) == -1) {
 		zerror(zlogp, B_TRUE, "unable to boot zone");
+		destroy_log_thread();
 		goto bad;
 	}
 
-	if (brand_poststatechg(zlogp, zstate, Z_BOOT, debug) != 0)
+	if (brand_poststatechg(zlogp, zstate, Z_BOOT, debug) != 0) {
+		destroy_log_thread();
 		goto bad;
-
-	/* Startup a thread to perform zfd logging/tty svc for the zone. */
-	create_log_thread(zlogp, zone_id);
+	}
 
 	return (0);
 
diff --git a/usr/src/lib/brand/bhyve/zone/platform.xml b/usr/src/lib/brand/bhyve/zone/platform.xml
index da7740c4f6..0aa8d875c3 100644
--- a/usr/src/lib/brand/bhyve/zone/platform.xml
+++ b/usr/src/lib/brand/bhyve/zone/platform.xml
@@ -55,6 +55,8 @@
 
 	<!-- Renamed devices to create under /dev -->
 	<device match="zcons/%z/zoneconsole" name="zconsole" />
+	<device match="zfd/%z/slave/1" name="zfd/1" />
+	<device match="zfd/%z/slave/2" name="zfd/2" />
 
 	<!-- Symlinks to create under /dev -->
 	<symlink source="console" target="zconsole" />
diff --git a/usr/src/lib/brand/bhyve/zone/statechange b/usr/src/lib/brand/bhyve/zone/statechange
index 22f494b6a8..130b53b5e7 100644
--- a/usr/src/lib/brand/bhyve/zone/statechange
+++ b/usr/src/lib/brand/bhyve/zone/statechange
@@ -15,4 +15,47 @@
 
 ps_brand=bhyve
 
+subcommand=$1
+ZONENAME=$2
+ZONEPATH=$3
+state=$4
+cmd=$5
+
+#
+# In the initial release of the bhyve brand, the platform log did not exist.
+# If zlog-mode and/or zlog-name attributes are not set in the zone's
+# configuration, this sets it and moves aside any stale zhyve.log file.
+#
+function setup_platform_log {
+	if [[ -n $_ZONECFG_attr_zlog_mode && -n $_ZONECFG_attr_zlog_name ]]
+	then
+		return
+	fi
+
+	zonecfg -z "$ZONENAME" \
+	    "remove attr name=zlog-mode; add attr; set name=zlog-mode;" \
+	    "set type=string; set value=g--; end;" \
+	    "remove attr name=zlog-name; add attr; set name=zlog-name;" \
+	    "set type=string; set value=platform.log; end;"
+
+	typeset logdir=$ZONEPATH/root/tmp
+	(
+		# exit this subshell if things aren't as expected
+		set -e
+		cd "$logdir"
+		[[ $(pwd -P) == "$logdir" ]] || exit
+		[[ -f zhyve.log ]] || exit
+
+		rm -f zhyve.log.obsolete
+		mv zhyve.log zhyve.log.obsolete
+	)
+}
+
+if [[ $subcommand == pre && $cmd == 1 ]]; then
+	setup_platform_log
+fi
+
+#
+# Now, carry on with all of the common statechange work.
+#
 . /usr/lib/brand/jcommon/statechange
-- 
2.21.0

