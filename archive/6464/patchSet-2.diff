commit 08615037ae0c9b57f71fa1e9bab026c21165dedb
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2019-06-24T10:21:52-07:00 (4 months ago)
    
    TRITON-1758 docker ps becomes slow when there are many instances
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Orlando Vazquez <orlando@joyent.com>

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index 0ba6d20..202a161 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -21,6 +21,7 @@ var libuuid = require('libuuid');
 var LineStream = require('lstream');
 var FWAPI = require('sdc-clients').FWAPI;
 var IMGAPI = require('sdc-clients').IMGAPI;
+var mod_fwrule = require('fwrule');
 var NAPI = require('sdc-clients').NAPI;
 var once = require('once');
 var PAPI = require('sdc-clients').PAPI;
@@ -2334,67 +2335,159 @@ function getContainerCount(opts, callback) {
  */
 function getContainersForVms(opts, callback) {
     assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.uuid(opts.account.uuid, 'opts.account.uuid');
     assert.object(opts.app, 'opts.app');
     assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.pkgmapUtoN, 'opts.pkgmapUtoN');
+    assert.string(opts.req_id, 'opts.req_id');
     assert.array(opts.vmobjs, 'opts.vmobjs');
     assert.func(callback, 'callback');
 
-    var fwapi = getFwapiClient(opts.app.config.fwapi);
+    var fwrules;
+    var links = [];
+    var log = opts.log;
     var pkgmapUtoN = opts.pkgmapUtoN;
-    var vmobjs = opts.vmobjs;
 
-    function _containerForVmObj(vmobj, cb) {
-        fwapi.getVMrules(vmobj.uuid, {
-            owner_uuid: vmobj.owner_uuid
-        }, function (err, fwrules) {
+    function _loadRelatedVmData(cb) {
+        var fwapi = getFwapiClient(opts.app.config.fwapi);
+        var owner_uuid = opts.account.uuid;
+        var restifyOpts = {
+            headers: {'x-request-id': opts.req_id}
+        };
+        var userRules = [];
+
+        vasync.parallel({ funcs: [
+            // Find links that apply to for this user.
+            function _loadLinks(next) {
+                var params = {
+                    owner_uuid: owner_uuid
+                };
+                Link.find(opts.app, log, params, function (err, _links) {
+                    if (err) {
+                        next(err);
+                        return;
+                    }
+                    links = _links;
+                    next();
+                });
+            },
+            // Find user firewall rules that will apply to containers.
+            function loadUserFirewallRules(next) {
+                var params = {
+                    owner_uuid: owner_uuid
+                };
+                fwapi.listRules(params, restifyOpts,
+                        function _listUserRulesCb(err, rules) {
+                    if (err) {
+                        next(err);
+                        return;
+                    }
+                    assert.arrayOfObject(rules, 'user fw rules');
+                    userRules = rules;
+                    next();
+                });
+            }
+        ]}, function (err) {
             if (err) {
-                callback(err);
+                cb(err);
                 return;
             }
 
-            utils.vmobjToContainer({
-                clientApiVersion: opts.clientApiVersion,
-                app: opts.app,
-                log: opts.log
-            }, vmobj, fwrules, function _addPkgLabel(e, container) {
-                if (!e) {
-                    if (pkgmapUtoN.hasOwnProperty(vmobj.billing_id)) {
-                        // We've got the package available, so attach to the
-                        // object.
-                        container.Labels['com.joyent.package']
-                            = pkgmapUtoN[vmobj.billing_id];
-                    } else {
-                        // Somehow we don't know the name of this package
-                        // even though we preloaded the packages earlier.
-                        // Possible scenarios include:
-                        //
-                        //  * package has changed owner since provisioning
-                        //  * package has been deactivated
-                        //
-                        // in any case, we'll not fail the whole 'docker ps'
-                        // for this and instead we'll just use '<unknown>'.
-                        container.Labels['com.joyent.package']
-                            = '<unknown>';
-                    }
+            // Convert rules into FwRule objects.
+            var filteredFwRules = userRules.map(
+                    function _convert(rule) {
+                var fwrule;
+                try {
+                    fwrule = new mod_fwrule.FwRule(rule);
+                    fwrule.originalRuleObj = rule;
+                } catch (e) {
+                    log.error(e, {
+                        rule: rule
+                    }, 'Failed to parse rule for getContainersForVms');
+                }
+                return fwrule;
+            // Filter fwrules to the rules that docker is interested in.
+            }).filter(function _filterFwRule(fwrule) {
+                if (!fwrule) {
+                    return false;
+                }
+                if (fwrule.protocol !== 'tcp' && fwrule.protocol !== 'udp') {
+                    return false;
+                }
+                if (fwrule.action !== 'allow'
+                    || fwrule.ports.indexOf('all') !== -1
+                    || fwrule.from.wildcards.indexOf('any') === -1) {
+                    return false;
                 }
-                cb(e, container);
+                return true;
             });
+            // Convert fw rules to the format needed by utils.vmobjToContainer.
+            fwrules = filteredFwRules.map(function (fwrule) {
+                var rule = fwrule.originalRuleObj;
+                delete fwrule.originalRuleObj;
+                // Set fwruleInst, so vmobjToContainer doesn't need to reparse
+                // the firewall rule string.
+                rule.fwruleInst = fwrule;
+                return rule;
+            });
+            log.debug({
+                    numLinks: links.length,
+                    numUnfilteredFwRules: userRules.length,
+                    numFwRules: fwrules.length,
+                    owner_uuid: owner_uuid
+                }, 'Preloaded firewall rules and links for user');
+
+            cb();
+        });
+    }
+
+    function _containerForVmObj(vmobj) {
+        // Get links that just apply to this vm.
+        var vmLinks = links.filter(function (link) {
+            return link.target_uuid === vmobj.uuid;
         });
+
+        var container = utils.vmobjToContainer(vmobj, {
+            clientApiVersion: opts.clientApiVersion,
+            app: opts.app,
+            fwrules: fwrules,
+            links: vmLinks,
+            log: log
+        });
+        if (pkgmapUtoN.hasOwnProperty(vmobj.billing_id)) {
+            // We've got the package available, so attach to the
+            // object.
+            container.Labels['com.joyent.package']
+                = pkgmapUtoN[vmobj.billing_id];
+        } else {
+            // Somehow we don't know the name of this package
+            // even though we preloaded the packages earlier.
+            // Possible scenarios include:
+            //
+            //  * package has changed owner since provisioning
+            //  * package has been deactivated
+            //
+            // in any case, we'll not fail the whole 'docker ps'
+            // for this and instead we'll just use '<unknown>'.
+            container.Labels['com.joyent.package'] = '<unknown>';
+        }
+
+        return container;
     }
 
     // Take all the VM objects we found that matched the filters and turn
     // them into docker container objects.
-    vasync.forEachPipeline({
-        'func': _containerForVmObj,
-        'inputs': vmobjs
-    }, function (err, results) {
+    _loadRelatedVmData(function _loadDataCb(err) {
         if (err) {
             callback(err);
             return;
         }
-        callback(null, results.successes);
+
+        var containers = opts.vmobjs.map(_containerForVmObj);
+
+        callback(null, containers);
     });
 }
 
@@ -2454,6 +2547,11 @@ function getContainers(opts, callback) {
                     return;
                 }
 
+                if (objects.length === 0) {
+                    cb(true); /* early abort - no containers */
+                    return;
+                }
+
                 // Containers are sorted newest (0) to oldest (n).
                 objects.sort(function _cmpVmByCreation(entry1, entry2) {
                     if (entry1.create_timestamp > entry2.create_timestamp) {
@@ -2757,6 +2855,10 @@ function getContainers(opts, callback) {
         var objects;
 
         if (err) {
+            if (err === true) { /* early abort - no containers */
+                callback(null, []);
+                return;
+            }
             callback(err);
             return;
         }
@@ -2766,15 +2868,22 @@ function getContainers(opts, callback) {
         objects = results.successes.pop();
         assert.array(objects);
 
+        if (objects.length === 0) {
+            callback(null, []);
+            return;
+        }
+
         // Turn the objects into containers, then call callback with:
         //
         //  callback(err, containers);
         //
         getContainersForVms({
+            account: opts.account,
             app: opts.app,
             clientApiVersion: opts.clientApiVersion,
             log: log,
             pkgmapUtoN: pkgmapUtoN,
+            req_id: opts.req_id,
             vmobjs: objects
         }, callback);
     });
diff --git a/lib/backends/sdc/utils.js b/lib/backends/sdc/utils.js
index 32b8318..fd34784 100644
--- a/lib/backends/sdc/utils.js
+++ b/lib/backends/sdc/utils.js
@@ -125,14 +125,16 @@ function getPublishingRules(opts, fwrules) {
     var log = opts.log;
     var uuid = opts.vm.uuid;
     return fwrules.reduce(function (published, rule) {
-        var fwrule;
-        try {
-            fwrule = new mod_fwrule.FwRule(rule);
-        } catch (e) {
-            log.error(e, {
-                rule: rule
-            }, 'Failed to parse rule while producing inspect info');
-            return published;
+        var fwrule = rule.fwruleInst; // Allow a pre-created FwRule instance.
+        if (!fwrule) {
+            try {
+                fwrule = new mod_fwrule.FwRule(rule);
+            } catch (e) {
+                log.error(e, {
+                    rule: rule
+                }, 'Failed to parse rule while producing inspect info');
+                return published;
+            }
         }
 
         // We only process open TCP and UDP ports that go to our VM
@@ -274,13 +276,15 @@ function _containerStatusFromVmobj(opts) {
 }
 
 
-function vmobjToContainer(opts, obj, fwrules, callback)
+function vmobjToContainer(obj, opts)
 {
+    assert.object(obj, 'obj');
+    assert.string(obj.alias, 'obj.alias');
     assert.object(opts, 'opts');
     assert.object(opts.app, 'opts.app');
     assert.object(opts.log, 'opts.log');
-    assert.object(obj, 'obj');
-    assert.string(obj.alias, 'obj.alias');
+    assert.object(opts.log, 'opts.log');
+    assert.arrayOfObject(opts.fwrules, 'opts.fwrules');
 
     var cmd = [];
     var container = {};
@@ -342,7 +346,8 @@ function vmobjToContainer(opts, obj, fwrules, callback)
     container.Ports = [];
 
     // Add the exposed ports:
-    getPublishedPorts({ log: log, vm: obj }, fwrules, function (proto, port) {
+    getPublishedPorts({ log: log, vm: obj }, opts.fwrules,
+            function (proto, port) {
         container.Ports.push({
             'IP': '0.0.0.0',
             // sdc-docker doesn't allow a different port mapping.
@@ -371,26 +376,11 @@ function vmobjToContainer(opts, obj, fwrules, callback)
         }
     });
 
-    function _addLinkNames() {
-        // Find links that target this container.
-        var params = {
-            owner_uuid: obj.owner_uuid,
-            target_uuid: obj.uuid
-        };
-        Link.find(opts.app, opts.log, params, function (err, links) {
-            if (err) {
-                return callback(err);
-            }
-            links.forEach(function (l) {
-                container.Names.push(l.ps_config);
-            });
-
-            callback(null, container);
-        });
-    }
+    opts.links.forEach(function (link) {
+        container.Names.push(link.ps_config);
+    });
 
-    // Asynchronously add link names and fire the callback.
-    _addLinkNames();
+    return container;
 }
 
 
diff --git a/package.json b/package.json
index f6ffdda..25eb151 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker",
-  "version": "0.5.7",
+  "version": "0.5.8",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
