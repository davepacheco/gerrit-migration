From a368b96b16ffcfc766c735ac3c730e60ad52082d Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Tue, 13 Jun 2017 03:01:15 +1200
Subject: [PATCH] PUBAPI-1404: cloudapi test failures: "origNics and newNics
 should be the same"

---
 test/nics.test.js | 182 ++++++++++++++++++++++++++++++++++------------
 1 file changed, 135 insertions(+), 47 deletions(-)

diff --git a/test/nics.test.js b/test/nics.test.js
index d62ee38..8071570 100644
--- a/test/nics.test.js
+++ b/test/nics.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -638,7 +638,19 @@ function verifyUnchangedNics(t, mutator) {
                 belongs_to_type: 'zone'
             }, function (err2, newNics) {
                 t.ifError(err2, 'NAPI ListNics for newNics');
-                t.deepEqual(sortNics(origNics), sortNics(newNics),
+
+                origNics.forEach(function (nic) {
+                    delete nic.created_timestamp;
+                    delete nic.modified_timestamp;
+                });
+
+                newNics.forEach(function (nic) {
+                    delete nic.created_timestamp;
+                    delete nic.modified_timestamp;
+                });
+
+                var changes = findObjectArrayChanges(origNics, newNics, 'mac');
+                t.deepEqual(changes, [],
                     'origNics and newNics should be the same');
                 t.end();
             });
@@ -647,79 +659,157 @@ function verifyUnchangedNics(t, mutator) {
 }
 
 
-function sortNics(nics) {
-    return nics.sort(function (a, b) {
-        return (a.mac > b.mac) ? 1 : -1;
+function findObjectArrayChanges(oldArr, newArr, key) {
+    var oldArrLookup = {};
+    oldArr.forEach(function (oldObj) {
+        var val = oldObj[key];
+        oldArrLookup[val] = oldObj;
     });
-}
 
+    var changes = [];
 
-function waitTilNicAdded(t, path) {
-    var count = 30;
+    newArr.forEach(function (newObj) {
+        var val = newObj[key];
+        var oldObj = oldArrLookup[val];
 
-    function check() {
-        count--;
-        if (count === 0) {
-            t.ifError(true, 'NIC did not provision in time');
-            return t.end();
+        // using JSON.stringify() here is an abusive hack to keep things simple,
+        // relying on on identical objects being serialized the same way each
+        // time; there is no inherent reason for this to happen, but in
+        // practice that's how it works out
+        if (!oldObj || JSON.stringify(newObj) !== JSON.stringify(oldObj)) {
+            changes.push({ original: oldObj, modified: newObj });
         }
 
-        return CLIENT.get(path, function (err, req, res, nic) {
-            t.ifError(err);
+        delete oldArrLookup[val];
+    });
 
-            if (nic.state === 'running') {
-                return t.end();
-            } else {
-                return setTimeout(check, 5000);
-            }
-        });
-    }
+    Object.keys(oldArrLookup).forEach(function (name) {
+        changes.push({ original: oldArrLookup[name], modified: null});
+    });
 
-    check();
+    return changes;
 }
 
 
 /*
  * Remove the given instance NIC and wait for its deletion.
  */
-function removeNic(t, instId, nic) {
+function removeNic(t, vmUuid, nic) {
     var mac  = nic.mac.replace(/\:/g, '');
-    var path = '/my/machines/' + instId + '/nics/' + mac;
+    var path = '/my/machines/' + vmUuid + '/nics/' + mac;
 
     CLIENT.del(path, function (err, req, res, body) {
-        t.ifError(err, 'RemoveNic with mac ' + mac + ' from vm ' + instId);
+        t.ifError(err, 'RemoveNic with mac ' + mac + ' from vm ' + vmUuid);
         t.equal(res.statusCode, 204, 'RemoveNic 204 statusCode');
         t.deepEqual(body, {}, 'RemoveNic "{}" body');
 
-        waitTilNicDeleted(t, path);
+        waitTilNicDeleted(t, vmUuid, nic.mac);
+    });
+}
+
+
+/*
+ * When a NIC is added to a VM, the VM is rebooted. This happens asynchronous to
+ * the job adding the nic, and some time later, so we need ot create a
+ * synchronization barrier where all NICs have cycles from running to stopped,
+ * and back to running. If we don't, it causes sporadic problems with later
+ * tests.
+ *
+ * We can't depend on the NIC state alone, because NIC states bounce more than
+ * once.
+ */
+function waitTilNicAdded(t, vmUuid, mac) {
+    waitTilVmRestarts(vmUuid, function (err) {
+        t.ifError(err, 'Restarted VM');
+
+        waitTilNicsRestart(vmUuid, mac, function (err2, macPresent) {
+            t.ifError(err2, 'Restarted NICs');
+            t.ok(macPresent, 'Expect NIC ' + mac + ' to be found');
+            t.end();
+        });
     });
 }
 
 
-function waitTilNicDeleted(t, apiPath) {
-    // Sometimes NICs take a very long time to delete due to long-reboot
-    // times that some zones experience
-    var count = 120;
+function waitTilNicDeleted(t, vmUuid, mac) {
+    waitTilNicsRestart(vmUuid, mac, function (err, macPresent) {
+        t.ifError(err, 'Restarted NICs');
+        t.ifError(macPresent, 'Expect NIC ' + mac + ' to be gone');
 
-    function check() {
-        count--;
-        if (count === 0) {
-            t.ifError(true, 'NIC did not delete in time');
+        var path = '/my/machines/' + vmUuid + '/nics/' + mac.replace(/\:/g, '');
+        CLIENT.get(path, function (err2, req, res, nic) {
+            t.equal(err2.statusCode, 404);
             t.end();
-            return;
+        });
+    });
+}
+
+
+function waitTilVmRestarts(vmUuid, cb) {
+    var vmCount = 200;
+    var vmLatch = false;
+    var path = '/my/machines/' + vmUuid;
+
+    function poll() {
+        vmCount--;
+        if (vmCount === 0) {
+            return cb('VM did not restart in time');
         }
 
-        CLIENT.get(apiPath, function (err, req, res, nic) {
+        return CLIENT.get(path, function (err, req, res, vm) {
             if (err) {
-                t.equal(err.statusCode, 404);
-                t.end();
-            } else {
-                setTimeout(check, 5000);
+                return cb(err);
+            }
+
+            if (!vmLatch || vm.state !== 'running') {
+                vmLatch = (vm.state !== 'running');
+            }
+
+            if (vmLatch && vm.state === 'running') {
+                return cb();
+            }
+
+            return setTimeout(poll, 100);
+        });
+    }
+
+    poll();
+}
+
+
+function waitTilNicsRestart(vmUuid, mac, cb) {
+    var nicCount = 200;
+    var nicLatches = {};
+    var path = '/my/machines/' + vmUuid + '/nics';
+
+    function poll() {
+        nicCount--;
+        if (nicCount === 0) {
+            return cb(nicLatches);
+        }
+
+        return CLIENT.get(path, function (err, req, res, nics) {
+            if (err) {
+                return cb(err);
+            }
+
+            var barrier = true;
+            nics.forEach(function (nic) {
+                if (!nicLatches[nic.mac] || nic.state !== 'running') {
+                    nicLatches[nic.mac] = (nic.state !== 'running');
+                    barrier = false;
+                }
+            });
+
+            if (barrier) {
+                return cb(null, nicLatches[mac]);
             }
+
+            return setTimeout(poll, 100);
         });
     }
 
-    check();
+    poll();
 }
 
 
@@ -1136,7 +1226,7 @@ test('nics', function (tt) {
                 t.deepEqual(nic, nic2);
                 instNic = nic;
 
-                waitTilNicAdded(t, location);
+                waitTilNicAdded(t, fixtures.instId, nic.mac);
             });
         });
     });
@@ -1471,8 +1561,7 @@ test('nics', function (tt) {
 
                 t.deepEqual(nic, nic2);
                 instNic = nic;
-
-                waitTilNicAdded(t, location);
+                waitTilNicAdded(t, fixtures.instId, nic.mac);
             });
         });
     });
@@ -1503,8 +1592,7 @@ test('nics', function (tt) {
                 t.ok(location, 'AddNic Location header: ' + location);
                 instNic = nic;
                 t.ok(instNic, 'AddNic nic: ' + JSON.stringify(nic));
-
-                waitTilNicAdded(t, location);
+                waitTilNicAdded(t, fixtures.instId, nic.mac);
             });
         });
     });
-- 
2.21.0

