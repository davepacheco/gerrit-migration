commit 94beeecf091217a1bbf98c6dee9ac14124b9350e (refs/changes/92/1092/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-12-08T15:01:43-08:00 (2 years, 10 months ago)
    
    DOCKER-984 'docker pull some-unreachable-ip/name:tag' takes a LONG time to fail
    Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>
    Approved by: Todd Whiteman <todd.whiteman@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 6a56540..3640002 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,12 @@
 
 (nothing yet)
 
+## 3.2.6
+
+- DOCKER-984 Add a 10s connect timeout for endpoints involved in initial
+  contact with a given Docker registry. This allows faster failing for
+  unreachable hosts.
+
 ## 3.2.5
 
 - DOCKER-983 Change v1 registry session setup to *not* do retries. This allows
diff --git a/lib/registry-client-v1.js b/lib/registry-client-v1.js
index 68aec96..92e8b40 100644
--- a/lib/registry-client-v1.js
+++ b/lib/registry-client-v1.js
@@ -81,7 +81,10 @@ function pingIndex(opts, cb) {
         url: common.urlFromIndex(index),
         log: opts.log,
         userAgent: opts.userAgent || common.DEFAULT_USERAGENT,
-        rejectUnauthorized: !opts.insecure
+        rejectUnauthorized: !opts.insecure,
+        // Want to fail fast:
+        retry: false,
+        connectTimeout: 10000
     });
 
     client.get({
@@ -140,12 +143,14 @@ function login(opts, cb) {
     var client = restifyClients.createJsonClient({
         url: indexUrl,
         log: opts.log,
-        retry: false, // Fail fast. We don't want 15s of retrying.
         userAgent: opts.userAgent || common.DEFAULT_USERAGENT,
         agent: opts.agent,
         proxy: opts.proxy,
         headers: opts.headers,
-        rejectUnauthorized: !opts.insecure
+        rejectUnauthorized: !opts.insecure,
+        // Want to fail fast:
+        retry: false,
+        connectTimeout: 10000
     });
     var status;
 
@@ -471,7 +476,11 @@ RegistryClientV1.prototype._ensureSession = function _ensureSession(cb) {
     }
 
     this.log.trace('get session token/cookie');
-    this.listRepoImgs({retry: false}, function (err, repoImgs, res) {
+    this.listRepoImgs({
+        // Fail fast
+        retry: false,
+        connectTimeout: 10000
+    }, function (err, repoImgs, res) {
         if (err) {
             return cb(err);
         }
@@ -759,6 +768,8 @@ RegistryClientV1.prototype.search = function search(opts, cb) {
  *      - retry - Optional. Pass through the restify-client 'retry' option.
  *        For example, pass `retry: false` to disable retries on request
  *        failure. By default there are 4 retries.
+ *      - connectTimeout - Optional. Pass through the restify-client
+ *        'connectTimeout' option.
  * @param {Function} cb - Required. `function (err, repoImgs, res)`
  */
 RegistryClientV1.prototype.listRepoImgs = function listRepoImgs(opts, cb) {
@@ -779,9 +790,12 @@ RegistryClientV1.prototype.listRepoImgs = function listRepoImgs(opts, cb) {
         },
         followRedirect: true
     };
-    if (opts.hasOwnProperty('retry')) {
-        reqOpts.retry = opts.retry;
-    }
+    ['retry', 'connectTimeout'].forEach(function (k) {
+        if (opts.hasOwnProperty(k)) {
+            reqOpts[k] = opts[k];
+        }
+    });
+
     self._request(reqOpts, function _after(err, req, res, repoImgs) {
         if (err) {
             cb(_sanitizeErr(err, res, res,
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index fc22c1a..5c1946f 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -691,7 +691,8 @@ function ping(opts, cb) {
         path: '/v2/',
         headers: headers,
         // Ping should be fast. We don't want 15s of retrying.
-        retry: false
+        retry: false,
+        connectTimeout: 10000
     }, function _afterPing(err, req, res, body) {
         client.close();
         cb(err, body, res, req);
@@ -1182,10 +1183,16 @@ RegistryClientV2.prototype.login = function regLogin(opts, cb) {
  * Note that, at least, currently we are presuming things are fine with a 401.
  * I.e. defering auth to later calls.
  *
+ * TODO: It would be nice to pass error/response info back here. For example,
+ * a connection failure to the host could be used to not bother with v1
+ * fallback.
+ *
  * @param cb {Function} `function (err, supportsV2)`
  *      where `supportsV2` is a boolean indicating if V2 API is supported.
  */
 RegistryClientV2.prototype.supportsV2 = function supportsV2(cb) {
+    var self = this;
+
     this.ping(function (err, body, res) {
         if (res && (res.statusCode === 200 || res.statusCode === 401)) {
             var header = res.headers['docker-distribution-api-version'];
@@ -1207,6 +1214,7 @@ RegistryClientV2.prototype.supportsV2 = function supportsV2(cb) {
                 }
             }
         }
+        self.log.trace({err: err, res: res}, 'supportsV2 response');
         cb(null, false);
     });
 };
diff --git a/package.json b/package.json
index a98bb0e..761230c 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "docker-registry-client",
-    "version": "3.2.5",
+    "version": "3.2.6",
     "description": "node.js client for the Docker Registry API",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
