From 0c0b3ae4323ab4e38c65139956a318f8138d7e91 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 28 Dec 2016 17:15:26 -0800
Subject: [PATCH] joyent/node-cueball#68 want Agent to be able to connect to
 bare IP addresses

---
 README.md                    | 15 ++++++++--
 lib/agent.js                 | 36 +++++++++++++++++++----
 lib/resolver.js              |  3 ++
 test/resolver_static.test.js | 55 ++++++++++++++++++++++++++++++++++++
 4 files changed, 101 insertions(+), 8 deletions(-)

diff --git a/README.md b/README.md
index 7f4491b..dee1800 100644
--- a/README.md
+++ b/README.md
@@ -77,6 +77,9 @@ Parameters
   - `maximum` -- optional Number, maximum number of connections per host
   - `initialDomains` -- optional Array of String, initial domains to create
     connections to at startup (to pre-seed the Agent for quick user later)
+  - `defaultPort` -- optional Number, fallback TCP port to connect to (default
+    80 for HttpAgent, 443 for HttpsAgent). If SRV records for a name are found
+    the port from SRV will always be used instead of this.
   - `tcpKeepAliveInitialDelay` -- optional Number, if supplied, enable TCP
     level keep-alives with the given initial delay (in milliseconds)
   - `ping` -- optional String, URL path to use for health checking. Connection
@@ -356,9 +359,12 @@ contact.  See also: `resolverForIpOrDomain()`.
 Parameters
 
 - `options` -- Object, with keys:
+  - `defaultPort` -- optional Number, fallback port to use for backends
+    that only have an `address` property
   - `backends` -- Array of objects, each having properties:
     - `address` -- String, an IP address to emit as a backend
-    - `port` -- Number, a port number for this backend
+    - `port` -- Number (optional if `defaultPort` used), a port number
+      for this backend
 
 This object provides the same `start()` and `stop()` methods as the Resolver
 class, as well as the same `added` and `removed` events.
@@ -388,7 +394,12 @@ Parameters
   - `input` -- String, either an IP address or DNS name, with optional port
     suffix
   - `resolverConfig` -- Object, a set of additional properties to pass to
-    the resolver constructor.
+    the resolver constructor, with keys:
+    - `defaultPort` -- optional Number, used for both DNS and static names
+    - `recovery` -- Object, see `DNSResolver`, required for DNS lookups
+    - `service` -- optional String, see `DNSResolver`
+    - `resolvers` -- optional Array of String, see `DNSResolver`
+    - `log` -- optional Object, a `bunyan`-style logger to use
 
 The `input` string has the form `HOSTNAME[:PORT]`, where the `[:PORT]` suffix is
 optional, and `HOSTNAME` may be either an IP address or DNS name.
diff --git a/lib/agent.js b/lib/agent.js
index a8fafd8..407b142 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -23,6 +23,7 @@ const mod_https = require('https');
 const mod_utils = require('./utils');
 const mod_vasync = require('vasync');
 const mod_bunyan = require('bunyan');
+const mod_resolver = require('./resolver');
 
 const Pool = mod_pool.ConnectionPool;
 
@@ -102,10 +103,24 @@ CueBallAgent.prototype.addPool = function (host, options) {
 		throw (new Error('Cannot add a pool to a stopped agent'));
 	}
 	mod_assert.string(host, 'hostname');
+	var defPort = this.defaultPort;
+	if (typeof (options.port) === 'number')
+		defPort = options.port;
+	if (typeof (options.port) === 'string')
+		defPort = parseInt(options.port, 10);
+	mod_assert.optionalNumber(defPort, 'default port');
+	var res = mod_resolver.resolverForIpOrDomain({
+		input: host,
+		resolverConfig: {
+			resolvers: this.resolvers,
+			service: this.service,
+			defaultPort: defPort,
+			recovery: this.cba_recovery,
+			log: this.log
+		}
+	});
 	var poolOpts = {
-		defaultPort: this.defaultPort,
-		resolvers: this.resolvers,
-		service: this.service,
+		resolver: res,
 		domain: host,
 		constructor: constructSocket,
 		maximum: this.maximum,
@@ -116,7 +131,7 @@ CueBallAgent.prototype.addPool = function (host, options) {
 	function constructSocket(backend) {
 		var opts = {
 			host: backend.address || backend.name,
-			port: backend.port || self.defaultPort,
+			port: backend.port || defPort,
 			servername: backend.name || host
 		};
 		PASS_FIELDS.forEach(function (k) {
@@ -169,6 +184,7 @@ CueBallAgent.prototype.addPool = function (host, options) {
 	}
 	this.log.debug({ host: host }, 'CueBallAgent creating new pool');
 	this.pools[host] = new Pool(poolOpts);
+	res.start();
 };
 
 CueBallAgent.prototype.stop = function (cb) {
@@ -195,9 +211,15 @@ CueBallAgent.prototype.stop = function (cb) {
 		delete (self.pools[host]);
 		if (pool.isInState('stopped')) {
 			pcb();
+			if (!pool.p_resolver.isInState('stopped'))
+				pool.p_resolver.stop();
 		} else {
 			pool.on('stateChanged', function (st) {
 				if (st === 'stopped') {
+					if (!pool.p_resolver.isInState(
+					    'stopped')) {
+						pool.p_resolver.stop();
+					}
 					pcb();
 				}
 			});
@@ -340,14 +362,16 @@ CueBallAgent.prototype.createConnection = function (options, connectListener) {
 
 function CueBallHttpAgent(options) {
 	options.protocol = 'http';
-	options.defaultPort = 80;
+	if (options.defaultPort === undefined)
+		options.defaultPort = 80;
 	CueBallAgent.call(this, options);
 }
 mod_util.inherits(CueBallHttpAgent, CueBallAgent);
 
 function CueBallHttpsAgent(options) {
 	options.protocol = 'https';
-	options.defaultPort = 443;
+	if (options.defaultPort === undefined)
+		options.defaultPort = 443;
 	CueBallAgent.call(this, options);
 }
 mod_util.inherits(CueBallHttpsAgent, CueBallAgent);
diff --git a/lib/resolver.js b/lib/resolver.js
index 666921e..fe43450 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -1121,6 +1121,7 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
  */
 function CueBallStaticResolver(options) {
 	mod_assert.object(options, 'options');
+	mod_assert.optionalNumber(options.defaultPort, 'options.defaultPort');
 	mod_assert.arrayOfObject(options.backends, 'options.backends');
 
 	this.sr_backends = options.backends.map(function (backend, i) {
@@ -1129,6 +1130,8 @@ function CueBallStaticResolver(options) {
 		mod_assert.ok(mod_net.isIP(backend.address),
 		    'options.backends[' + i +
 		    '].address must be an IP address');
+		if (backend.port === undefined)
+			backend.port = options.defaultPort;
 		mod_assert.number(backend.port,
 		    'options.backends[' + i + '].port');
 
diff --git a/test/resolver_static.test.js b/test/resolver_static.test.js
index e55f6bb..7240b2e 100644
--- a/test/resolver_static.test.js
+++ b/test/resolver_static.test.js
@@ -109,6 +109,61 @@ mod_tape.test('static resolver: no backends', function (t) {
 	});
 });
 
+mod_tape.test('static resolver: defaultPort', function (t) {
+	var resolver, found;
+
+	resolver = new mod_resolver.StaticIpResolver({
+	    'defaultPort': 2021,
+	    'backends': [ {
+		'address': '10.0.0.3',
+		'port': 2022
+	    }, {
+		'address': '10.0.0.4'
+	    }, {
+		'address': '10.0.0.5'
+	    } ]
+	});
+
+	resolver.start();
+
+	found = [];
+	resolver.on('added', function (key, backend) { found.push(backend); });
+	resolver.on('stateChanged', function (st) {
+		if (st === 'running') {
+			var expected;
+
+			t.equal(resolver.count(), 3);
+			t.deepEqual(found, [ {
+			    'name': '10.0.0.3:2022',
+			    'address': '10.0.0.3',
+			    'port': 2022
+			}, {
+			    'name': '10.0.0.4:2021',
+			    'address': '10.0.0.4',
+			    'port': 2021
+			}, {
+			    'name': '10.0.0.5:2021',
+			    'address': '10.0.0.5',
+			    'port': 2021
+			} ]);
+
+			expected = {};
+			found.forEach(function (be) {
+				expected[be['name']] = true;
+			});
+			mod_jsprim.forEachKey(resolver.list(),
+			    function (k, reported) {
+				t.ok(expected.hasOwnProperty(reported['name']));
+				delete (expected[reported['name']]);
+			});
+
+			t.equal(Object.keys(expected).length, 0);
+			resolver.stop();
+			t.end();
+		}
+	});
+});
+
 mod_tape.test('static resolver: several backends', function (t) {
 	var resolver, found;
 
-- 
2.21.0

