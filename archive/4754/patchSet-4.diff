From 71caa629b8865de8f37c7f9dcf9e73b4d9b1d37c Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 28 Aug 2018 13:24:03 -0700
Subject: [PATCH] =?UTF-8?q?TRITON-723=20sdcadm=20health=20can=20exit=20non?=
 =?UTF-8?q?-zero=20on=20failure=20due=20to=20TOOLS-1699=20Reviewed=20by:?=
 =?UTF-8?q?=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>=20Approve?=
 =?UTF-8?q?d=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 CHANGES.md                 |  4 +++
 lib/cli/do_check_health.js | 71 ++++++++++++++++++++++++++++++--------
 lib/logging.js             |  2 +-
 lib/sdcadm.js              | 39 ++++++++++++++++++++-
 package.json               |  2 +-
 5 files changed, 100 insertions(+), 18 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 8eef733..eb6fb7e 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.21.3
+
+- TRITON-723 Improve the output of unhealthy instances from `sdcadm health`.
+
 ## 1.21.2
 
 - TRITON-619 Manatee upgrades broken due to SAPI not loading data from local
diff --git a/lib/cli/do_check_health.js b/lib/cli/do_check_health.js
index 835732c..41c3dfe 100644
--- a/lib/cli/do_check_health.js
+++ b/lib/cli/do_check_health.js
@@ -8,6 +8,7 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
+var sprintf = require('extsprintf').sprintf;
 var tabula = require('tabula');
 var vasync = require('vasync');
 var VError = require('verror').VError;
@@ -120,6 +121,41 @@ function do_check_health(subcmd, opts, args, callback) {
         });
     }
 
+
+    /*
+     * FMA report-style string representation of a SdcAdm.checkHealth
+     * unhealthy result.
+     */
+    function healthErrRepr(errRow) {
+        var TEMPLATE = '%8s: %s';
+
+        var lines = [];
+        [
+            {name: 'type', label: 'Type'},
+            {name: 'instance', label: 'Instance'},
+            {name: 'service', label: 'Service'},
+            {name: 'hostname', label: 'Hostname'},
+            {name: 'alias', label: 'Alias'}
+        ].forEach(function oneField(field) {
+            if (errRow.hasOwnProperty(field.name)) {
+                lines.push(sprintf(TEMPLATE, field.label, errRow[field.name]));
+            }
+        });
+
+        if (errRow.hasOwnProperty('health_errors')) {
+            errRow.health_errors
+                .map(function (he) { return he.message.trim(); })
+                .join('\n--\n')
+                .trim()
+                .split(/\n/g)
+                .forEach(function (errLine) {
+                    lines.push(sprintf(TEMPLATE, 'Error', errLine));
+                });
+        }
+
+        return lines.join('\n');
+    }
+
     function displayResults(err, statuses) {
         if (err) {
             callback(new errors.InternalError(err));
@@ -129,21 +165,23 @@ function do_check_health(subcmd, opts, args, callback) {
         var rows = statuses.map(function (status) {
             var obj = {
                 type: status.type,
-                instance: status.instance,
-                alias: status.alias,
-                service: status.service,
-                hostname: status.hostname,
                 healthy: status.healthy
             };
-
-            if (status.health_errors) {
-                obj.health_errors = status.health_errors;
-            }
+            [
+                'hostname',
+                'instance',
+                'alias',
+                'service',
+                'health_errors'
+            ].forEach(function (field) {
+                if (status.hasOwnProperty(field)) {
+                    obj[field] = status[field];
+                }
+            });
 
             return obj;
         });
 
-
         var errRows = rows.filter(function (row) {
             return row.health_errors;
         });
@@ -168,12 +206,14 @@ function do_check_health(subcmd, opts, args, callback) {
                 });
             }
 
-            errRows.forEach(function (row) {
-                row.health_errors.forEach(function (errObj) {
-                    console.error((row.instance || row.service),
-                            errObj.message);
-                });
-            });
+            for (var i = 0; i < errRows.length; i++) {
+                // Blank line between possible table and each inst error row.
+                if (!(i === 0 && opts.quiet)) {
+                    console.log('');
+                }
+
+                console.log(healthErrRepr(errRows[i]));
+            }
         }
 
         if (errRows.length > 0) {
@@ -256,6 +296,7 @@ do_check_health.help = (
     '     {{name}} check-health [<options>] [<svc or inst>...]\n' +
     '\n' +
     '{{options}}' +
+    '\n' +
     'Instances to be checked can be filtered via <filter> by type:\n' +
     '    type=vm\n' +
     '    type=agent\n' +
diff --git a/lib/logging.js b/lib/logging.js
index 8a14a09..651067e 100644
--- a/lib/logging.js
+++ b/lib/logging.js
@@ -196,7 +196,7 @@ function createLogger(opts) {
             level: 'trace',
             path: logFile
         });
-	mkdirp.sync(LOG_DIR);
+        mkdirp.sync(LOG_DIR);
     } else {
         logStreams.push({
             type: 'raw',
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 0b09436..156d743 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -3680,7 +3680,11 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
 };
 
 /**
- * Check health of given SAPI instances.
+ * Check health of Triton core service instances.
+ *
+ * This is currently far from perfect, typically resorting to a simple
+ * `GET /ping` on the HTTP endpoint of most services and not covering all
+ * services.
  *
  * @param opts {Object}  Required.
  *      - insts {Array} Optional. Instance objects as returned by listInsts.
@@ -3689,6 +3693,39 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
  *        If not given and insts isn't present, then all SDC instances are
  *        checked.
  * @param cb {Function} Callback of the form `function (err, results)`.
+ *      `err` is non-null when there was an error gathering health info.
+ *      Otherwise `results` is an array of objects, one for each instance,
+ *      with the following fields:
+ *
+ *      - type: Roughly the type of instance this result represents. One of:
+ *          - 'vm' for a core VM instance (e.g. imgapi0)
+ *          - 'agent' for a core agent instance running in a server global
+ *            zone (e.g. cn-agent on the headnode)
+ *          - 'global' for an artificial instance result for a `svcs -xv`
+ *            check run in each server's global zone
+ *          - 'triton' for an artificial instance result for a severe service
+ *            health issue that breaks health checking.
+ *      - healthy: A boolean if the instance is healthy.
+ *      - health_errors: An array of error detail objects, each with a "message"
+ *        field.
+ *      - hostname: The hostname of the instance, e.g. "headnode".
+ *      - instance: As from `sdcadm insts -j` for type=vm and type=agent
+ *        results. For type=global, it is the server UUID. Not defined for
+ *        type=triton.
+ *      - service: For type=vm and type=agent instances. Artificially set to
+ *        'global' for type=global results. Not defined for type=triton.
+ *      - alias: For type=vm instances, this is the VM alias. For type=global
+ *        results this is artificially set to 'global'. Not defined for
+ *        type=triton or type=agent.
+ *
+ * Usage to check if Triton is healthy:
+ *
+ *      sdcadm.checkHealth({}, function (err, results) {
+ *          if (err) {
+ *              cb(err);
+ *          }
+ *          var healthy = !results.some(function (r) { return r.healthy; });
+ *      });
  */
 SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
     var self = this;
diff --git a/package.json b/package.json
index d4587ab..24c9bb9 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.21.2",
+  "version": "1.21.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

