From 244b379a92e4620002d9c785d6bd5688b79367d7 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Thu, 5 Sep 2019 15:12:29 -0700
Subject: [PATCH] TRITON-1881 node-triton 'triton account limits' tests should
 skip if cloudapi doesn't support it Reviewed by: Trent Mick
 <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 test/integration/cli-account.test.js | 68 ++++++++++++++++++----------
 test/integration/helpers.js          | 53 ++++++++++++++++++++++
 2 files changed, 97 insertions(+), 24 deletions(-)

diff --git a/test/integration/cli-account.test.js b/test/integration/cli-account.test.js
index e0ee2c5..38a7d3f 100644
--- a/test/integration/cli-account.test.js
+++ b/test/integration/cli-account.test.js
@@ -111,31 +111,51 @@ test('triton account', function (suite) {
             });
     });
 
-    suite.test(' triton account limits', function (t) {
-        h.triton('-v account limits', function (err, stdout, stderr) {
-            if (h.ifErr(t, err))
-                return t.end();
-            t.ok(stdout.indexOf('LIMIT') > 0, 'LIMIT header should be found');
-            t.end();
-        });
-    });
-
-    suite.test(' triton account limits -j', function (t) {
-        h.triton('account limits -j', function (err, stdout, stderr) {
-            if (h.ifErr(t, err))
-                return t.end();
-            var i;
-            var limits = JSON.parse(stdout);
-            t.ok(Array.isArray(limits), 'json limits should be an array');
-            if (Array.isArray(limits) && limits.length > 0) {
-                for (i = 0; i < limits.length; i++) {
-                    t.ok(['ram', 'quota', 'machines'].indexOf(
-                        limits[i].type) >= 0, 'limit has a valid type field');
-                    t.ok(limits[i].used >= 0, 'limit has a valid used field');
-                    t.ok(limits[i].limit >= 0, 'limit has a valid limit field');
-                }
+    suite.test(' triton account limit version check', function (tt) {
+        h.cloudapiVersionGtrOrEq('9.8.0', function (verErr, versionGoodEnough) {
+            if (h.ifErr(tt, verErr)) {
+                tt.end();
+                return;
             }
-            t.end();
+
+            var limitTestOpts = {
+                skip: !versionGoodEnough
+            };
+
+            tt.test(' triton account limits', limitTestOpts, function (t) {
+                h.triton('-v account limits', function (err, stdout, stderr) {
+                    if (h.ifErr(t, err))
+                        return t.end();
+                    t.ok(stdout.indexOf('LIMIT') > 0,
+                        'LIMIT header should be found');
+                    t.end();
+                });
+            });
+
+            tt.test(' triton account limits -j', limitTestOpts, function (t) {
+                h.triton('account limits -j', function (err, stdout, stderr) {
+                    if (h.ifErr(t, err))
+                        return t.end();
+                    var i;
+                    var limits = JSON.parse(stdout);
+                    t.ok(Array.isArray(limits),
+                        'json limits should be an array');
+                    if (Array.isArray(limits) && limits.length > 0) {
+                        for (i = 0; i < limits.length; i++) {
+                            t.ok(['ram', 'quota', 'machines'].indexOf(
+                                limits[i].type) >= 0,
+                                'limit has a valid type field');
+                            t.ok(limits[i].used >= 0,
+                                'limit has a valid used field');
+                            t.ok(limits[i].limit >= 0,
+                                'limit has a valid limit field');
+                        }
+                    }
+                    t.end();
+                });
+            });
+
+            tt.end();
         });
     });
 
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 1211620..5c4af00 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -17,6 +17,7 @@ var error = console.error;
 var f = require('util').format;
 var os = require('os');
 var path = require('path');
+var semver = require('semver');
 var tabula = require('tabula');
 
 var mod_triton = require('../../');
@@ -617,6 +618,55 @@ function deleteTestImg(t, imgNameOrId, cb) {
 }
 
 
+/*
+ * Compare the given `ver` with the cloudapi version.
+ *
+ * Callback fires as (err, cmpResult), where cmpResult is as below:
+ *    1  if `ver` >  cloudapiVer
+ *    0  if `ver` == cloudapiVer
+ *   -1  if `ver` <  cloudapiVer
+ */
+function cloudapiVersionCmp(ver, cb) {
+    // Get the API version from CloudAPI.
+    var cmd = 'cloudapi /--ping -i';
+
+    triton(cmd, function (err, stdout, stderr) {
+        var cloudapiVer;
+        if (!stderr.split('\n').some(function (line) {
+            var match = line.match(/^server:\s+cloudapi\/(.*)$/i);
+            if (match) {
+                cloudapiVer = match[1];
+                return true;
+            }
+            return false;
+        })) {
+            cb(new Error('server header was not found in ping response'));
+            return;
+        }
+
+        try {
+            cb(null, semver.compare(ver, cloudapiVer));
+        } catch (ex) {
+            cb(ex);
+        }
+    });
+}
+
+/*
+ * Returns true if the CloudAPI version is greater than or equal to the given
+ * version, else returns false.
+ */
+function cloudapiVersionGtrOrEq(ver, cb) {
+    cloudapiVersionCmp(ver, function (err, result) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        cb(null, result >= 0);
+    });
+}
+
 /*
  * Print out a listing of the test config.json values.
  */
@@ -651,6 +701,9 @@ module.exports = {
     deleteTestInst: deleteTestInst,
     deleteTestImg: deleteTestImg,
 
+    cloudapiVersionCmp: cloudapiVersionCmp,
+    cloudapiVersionGtrOrEq: cloudapiVersionGtrOrEq,
+
     getTestImg: getTestImg,
     getTestKvmImg: getTestKvmImg,
     getTestPkg: getTestPkg,
-- 
2.21.0

