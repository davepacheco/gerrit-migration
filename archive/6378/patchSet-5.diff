From eadfdcf3be863febd84180a52f528f7938882b01 Mon Sep 17 00:00:00 2001
From: Isaac Davis <isaac.davis@joyent.com>
Date: Thu, 13 Jun 2019 17:04:51 +0000
Subject: [PATCH] MANTA-4307 Make boray, electric-boray, and buckets-postgres
 proper Manta services

---
 cmd/manta-init.js                             | 211 +++---
 config/services/boray/service.json            |   9 +
 config/services/boray/service.json.lab        |   5 +
 config/services/boray/service.json.production |   6 +
 config/services/buckets-postgres/service.json |  11 +
 .../buckets-postgres/service.json.lab         |   6 +
 .../buckets-postgres/service.json.production  |   6 +
 config/services/electric-boray/service.json   |   7 +
 .../services/electric-boray/service.json.lab  |   5 +
 .../electric-boray/service.json.production    |   6 +
 docs/man/man1/manta-adm.md                    |  11 +-
 lib/deploy.js                                 |  15 +-
 lib/layout.js                                 |   7 +-
 lib/services.js                               | 171 ++++-
 man/man1/manta-adm.1                          |  13 +-
 test/tst.layout.js                            |   5 +-
 test/tst.layout.js.out                        | 612 ++++++++++++++++++
 test/tst.services.js                          |   8 +-
 18 files changed, 990 insertions(+), 124 deletions(-)
 create mode 100644 config/services/boray/service.json
 create mode 100644 config/services/boray/service.json.lab
 create mode 100644 config/services/boray/service.json.production
 create mode 100644 config/services/buckets-postgres/service.json
 create mode 100644 config/services/buckets-postgres/service.json.lab
 create mode 100644 config/services/buckets-postgres/service.json.production
 create mode 100644 config/services/electric-boray/service.json
 create mode 100644 config/services/electric-boray/service.json.lab
 create mode 100644 config/services/electric-boray/service.json.production

diff --git a/cmd/manta-init.js b/cmd/manta-init.js
index 15c1930..4be0890 100755
--- a/cmd/manta-init.js
+++ b/cmd/manta-init.js
@@ -23,6 +23,7 @@ var fs = require('fs');
 var optimist = require('optimist');
 var path = require('path');
 var sdc = require('sdc-clients');
+var services = require('../lib/services');
 var ssh = require('../lib/ssh');
 var url = require('url');
 var node_uuid = require('node-uuid');
@@ -215,7 +216,7 @@ function findLatestImage(service, cb) {
 	var remote_imgapi = self.REMOTE_IMGAPI;
 	var log = self.log;
 
-	var image_name = 'manta-' + service;
+	var image_name = services.serviceNameToImageName(service);
 	var version_substr = 'master';
 
 	log.info('finding image %s (version substr "%s") for service %s',
@@ -343,7 +344,6 @@ function addConfig(dirname, updatefunc, cb) {
 	});
 }
 
-
 // -- Mainline
 
 var self = this;
@@ -397,8 +397,8 @@ if (typeof (ARGV.c) == 'number' && ARGV.c > 0 && ARGV.c < 128 &&
 	    '(must be a positive integer less than 128)');
 }
 
-async.waterfall([
-	function verifyArgs(cb) {
+var pipelineFuncs = [
+	function verifyArgs(_, cb) {
 		if (ARGV.s &&
 		    ['coal', 'lab', 'production'].indexOf(ARGV.s) === -1) {
 			return (cb(new Error('size option must be one of,' +
@@ -408,11 +408,11 @@ async.waterfall([
 		return (cb(null));
 	},
 
-	function initClients(cb) {
+	function initClients(_, cb) {
 		common.initSdcClients.call(self, cb);
 	},
 
-	function ensureFullMode(cb) {
+	function ensureFullMode(_, cb) {
 		var sapi = self.SAPI;
 		var log = self.log;
 
@@ -443,17 +443,24 @@ async.waterfall([
 		});
 	},
 
-	function getOrCreatePoseidon(cb) {
+	function getOrCreatePoseidon(ctx, cb) {
 		var user = {};
 		user.login = POSEIDON_LOGIN;
 		user.userpassword = POSEIDON_PASSWORD;
 		if (ARGV.e)
 			user.email = ARGV.e;
 
-		getOrCreateUser(user, cb);
+		getOrCreateUser(user, function gotUser(err, userRes) {
+			if (err) {
+				return (cb(err));
+			}
+			ctx.user = userRes;
+			return (cb(null));
+		});
 	},
 
-	function updatePoseidonEmail(user, cb) {
+	function updatePoseidonEmail(ctx, cb) {
+		var user = ctx.user;
 		assert.object(user, 'user');
 		assert.string(user.login, 'user.login');
 
@@ -470,7 +477,7 @@ async.waterfall([
 		return (null);
 	},
 
-	function addPoseidonToOperators(cb) {
+	function addPoseidonToOperators(_, cb) {
 		var ufds = self.UFDS;
 		var log = self.log;
 
@@ -499,7 +506,7 @@ async.waterfall([
 		});
 	},
 
-	function enableAdminProvisioning(cb) {
+	function enableAdminProvisioning(_, cb) {
 		var networks = [ 'manta', 'mantanat', 'admin' ];
 
 		vasync.forEachParallel({
@@ -519,7 +526,7 @@ async.waterfall([
 		});
 	},
 
-	function getMantaApplication(cb) {
+	function getMantaApplication(_, cb) {
 		var log = self.log;
 		log.info('fetching manta application from sapi');
 
@@ -531,7 +538,7 @@ async.waterfall([
 		});
 	},
 
-	function createMantaApplication(cb) {
+	function createMantaApplication(_, cb) {
 		var log = self.log;
 		var sapi = self.SAPI;
 
@@ -611,7 +618,7 @@ async.waterfall([
 					    extra, onResponse);
 	},
 
-	function addAdminKey(cb) {
+	function addAdminKey(_, cb) {
 		var log = self.log;
 		var sapi = self.SAPI;
 		var app = self.sapi_application;
@@ -662,13 +669,13 @@ async.waterfall([
 			 * Even if there's an error, remove the SSH public key
 			 * file.
 			 */
-			fs.unlink(pubfile, function (_) {
+			fs.unlink(pubfile, function () {
 				cb(err);
 			});
 		});
 	},
 
-	function addApplicationConfigs(cb) {
+	function addApplicationConfigs(_, cb) {
 		var log = self.log;
 		var sapi = self.SAPI;
 
@@ -689,56 +696,47 @@ async.waterfall([
 		});
 	},
 
-	function findLatestImages(cb) {
+	function findLatestImages(ctx, cb) {
 		var log = self.log;
 
-		var dirname = path.join(path.dirname(__filename),
-		    '../config/services');
-
-		fs.readdir(dirname, function (err, services)  {
-			if (err) {
-				log.error(err, 'failed to read dirname %s',
-				    dirname);
-				return (cb(err));
-			}
+		log.info({ services: services.mSvcNames },
+		    'finding images for services');
 
-			log.info({ services: services },
-			    'finding images for services');
-
-			var filtered = [];
-			for (var i in services) {
-				var s = services[i];
-				// If the marlin image was given, we filter out
-				// and add it manually later.
-				if (ARGV.m && s === 'marlin') {
-					continue;
-				}
-				filtered.push(s);
+		/*
+		 * If the marlin image was given, we filter it out and add it
+		 * manually later.
+		 */
+		var filtered = services.mSvcNames.filter(function f(svcname) {
+			if (ARGV.m && svcname === 'marlin') {
+				return (false);
 			}
+			return (true);
+		});
 
-			vasync.forEachParallel({
-				func: findLatestImage,
-				inputs: filtered
-			}, function (suberr, results) {
-				var rs = results.successes;
-				var images = rs.map(function (im) {
-					return ({
-						'uuid': im.uuid,
-						'name': im.name,
-						'origin': im.origin
-					});
+		vasync.forEachParallel({
+			func: findLatestImage,
+			inputs: filtered
+		}, function (suberr, results) {
+			var rs = results.successes;
+			var images = rs.map(function (im) {
+				return ({
+					'uuid': im.uuid,
+					'name': im.name,
+					'origin': im.origin
 				});
+			});
 
-				// Adding the marlin image manually.
-				if (ARGV.m) {
-					images.push({
-						'uuid': ARGV.m,
-						'name': 'manta-marlin'
-					});
-				}
+			// Adding the marlin image manually.
+			if (ARGV.m) {
+				images.push({
+					'uuid': ARGV.m,
+					'name': services.serviceNameToImageName(
+					    'marlin')
+				});
+			}
 
-				return (cb(suberr, images));
-			});
+			ctx.images = images;
+			return (cb(suberr));
 		});
 	},
 
@@ -766,11 +764,12 @@ async.waterfall([
 	 *
 	 * This step does #2.
 	 */
-	function importImageOrigins(images, cb) {
+	function importImageOrigins(ctx, cb) {
 		var imgapi = self.IMGAPI;
 		var log = self.log;
 		var origin_images;
 		var remote_url = self.config.remote_imgapi.url;
+		var images = ctx.images;
 
 		assert.arrayOfObject(images, 'images');
 		assert.func(cb, 'cb');
@@ -812,14 +811,15 @@ async.waterfall([
 					uuid, remote_url, {}, onDoneOneImage);
 			}
 		}, function (err) {
-			cb(err, images);
+			cb(err);
 		});
 	},
 
-	function importImages(images, cb) {
+	function importImages(ctx, cb) {
 		var imgapi = self.IMGAPI;
 		var log = self.log;
 		var remote_url = self.config.remote_imgapi.url;
+		var images = ctx.images;
 
 		assert.arrayOfObject(images, 'images');
 		assert.func(cb, 'cb');
@@ -858,34 +858,35 @@ async.waterfall([
 				image.uuid, remote_url, import_opts, onDone);
 
 		}, function (err) {
-			return (cb(err, images));
+			return (cb(err));
 		});
 	},
 
-	function createMantaServices(images, cb) {
+	function createMantaServices(ctx, cb) {
 		var sapi = self.SAPI;
 		var log = self.log;
+		var app_uuid = self.sapi_application.uuid;
+		var images = ctx.images;
 
-		var array = [];
+		assert.arrayOfObject(images, 'images');
+		assert.func(cb, 'cb');
 
 		log.debug({ images: images }, 'creating services');
 
-		for (var ii = 0; ii < images.length; ii++) {
-			assert.object(images[ii]);
-			array.push(images[ii]);
-		}
+		/*
+		 * We're going to look up images by name below, so we put them
+		 * in an object now to avoid doing repeated linear lookups.
+		 */
+		var imgMap = {};
+		images.forEach(function addToMap(img) {
+			imgMap[img.name] = img;
+		});
 
 		vasync.forEachParallel({
-			func: function (image, subcb) {
-				var name = image.name;
-				if (name.substr(0, 6) === 'manta-')
-					name = name.substr(6);
-
-				var app_uuid = self.sapi_application.uuid;
-
+			func: function (svcname, subcb) {
 				var file = sprintf(
 				    '%s/../config/services/%s/service.json',
-				    path.dirname(__filename), name);
+				    path.dirname(__filename), svcname);
 				file = path.resolve(file);
 				var override = file + '.' + ARGV.s;
 
@@ -893,47 +894,58 @@ async.waterfall([
 
 				var extra = {};
 				extra.params = {};
-				extra.params.image_uuid = image.uuid;
+
+				var imgName =
+				    services.serviceNameToImageName(svcname);
+				assert.object(imgMap[imgName],
+				    'imgMap[imgName]');
+				extra.params.image_uuid = imgMap[imgName].uuid;
 
 				extra.master = true;
 				extra.include_master = true;
 
 				log.info('getting or creating service %s ' +
-					'with uuid %s', name, app_uuid);
+					'with uuid %s', svcname, app_uuid);
 
-				sapi.getOrCreateService(name, app_uuid,
+				sapi.getOrCreateService(svcname, app_uuid,
 				    files, extra, function (err, svc) {
+					/*
+					 * We hang the image off of the service
+					 * object so we can get a service's
+					 * image in the next function.
+					 */
 					if (!err)
-						image.service = svc;
+						svc.image = imgMap[imgName];
 					return (subcb(err, svc));
 				});
 			},
-			inputs: array
+			inputs: services.mSvcNames
 		}, function (err, results) {
 			if (err)
 				return (cb(err));
 
-			self.sapi_services = results.successes;
+			ctx.sapi_services = results.successes;
 
 			log.debug('created %d SAPI services',
-			    self.sapi_services.length);
+			    ctx.sapi_services.length);
 
-			return (cb(null, images));
+			return (cb(null));
 		});
 	},
 
-	function updateServiceImages(images, cb) {
+	function updateServiceImages(ctx, cb) {
 		var log = self.log;
+		var sapi_services = ctx.sapi_services;
 
-		assert.arrayOfObject(images, 'images');
+		assert.arrayOfObject(sapi_services);
 		assert.func(cb, 'cb');
 
 		vasync.forEachParallel({
-			func: function (image, subcb) {
+			func: function (svc, subcb) {
 				updateServiceImage.call(self,
-				    image.service, image.uuid, subcb);
+				    svc, svc.image.uuid, subcb);
 			},
-			inputs: images
+			inputs: sapi_services
 		}, function (err) {
 			if (err)
 				return (cb(err));
@@ -942,17 +954,21 @@ async.waterfall([
 		});
 	},
 
-	function addMuskieAes(cb) {
+	function addMuskieAes(ctx, cb) {
 		var log = self.log;
 		var sapi = self.SAPI;
 		var cmd = 'openssl enc -aes-128-cbc -k ' + node_uuid.v4() +
 			' -P';
 		var pfx = 'MUSKIE_JOB_TOKEN_AES_';
 		var svc, i, m;
+		var sapi_services = ctx.sapi_services;
 
-		for (i = 0; i < self.sapi_services.length; i++) {
-			if (self.sapi_services[i].name == 'webapi') {
-				svc = self.sapi_services[i];
+		assert.arrayOfObject(sapi_services);
+		assert.func(cb, 'cb');
+
+		for (i = 0; i < sapi_services.length; i++) {
+			if (sapi_services[i].name == 'webapi') {
+				svc = sapi_services[i];
 				break;
 			}
 		}
@@ -1026,10 +1042,15 @@ async.waterfall([
 		], cb);
 	},
 
-	function finiClients(cb) {
+	function finiClients(_, cb) {
 		common.finiSdcClients.call(self, cb);
 	}
-], function (err) {
+];
+
+vasync.pipeline({
+	arg: {}, // ctx
+	funcs: pipelineFuncs
+}, function (err) {
 	if (err) {
 		console.error('Error: ' + err.message);
 		process.exit(1);
diff --git a/config/services/boray/service.json b/config/services/boray/service.json
new file mode 100644
index 0000000..2160cbc
--- /dev/null
+++ b/config/services/boray/service.json
@@ -0,0 +1,9 @@
+{
+	"params": {
+		"networks": [ "manta", "admin" ],
+		"ram": 256
+	},
+	"metadata": {
+		"MORAY_MAX_PG_CONNS": 16
+	}
+}
diff --git a/config/services/boray/service.json.lab b/config/services/boray/service.json.lab
new file mode 100644
index 0000000..86322f7
--- /dev/null
+++ b/config/services/boray/service.json.lab
@@ -0,0 +1,5 @@
+{
+	"params": {
+		"ram": 1024
+	}
+}
diff --git a/config/services/boray/service.json.production b/config/services/boray/service.json.production
new file mode 100644
index 0000000..4504983
--- /dev/null
+++ b/config/services/boray/service.json.production
@@ -0,0 +1,6 @@
+{
+	"params": {
+		"ram": 32768,
+                "quota": 100
+	}
+}
diff --git a/config/services/buckets-postgres/service.json b/config/services/buckets-postgres/service.json
new file mode 100644
index 0000000..129172e
--- /dev/null
+++ b/config/services/buckets-postgres/service.json
@@ -0,0 +1,11 @@
+{
+	"params": {
+		"networks": [ "manta", "admin" ],
+		"ram": 2048,
+		"max_lwps": 256000
+	},
+	"metadata": {
+		"PG_DEFAULT_VERSION": "11",
+		"PG_DIR": "/manatee/pg/data"
+	}
+}
diff --git a/config/services/buckets-postgres/service.json.lab b/config/services/buckets-postgres/service.json.lab
new file mode 100644
index 0000000..519cc8a
--- /dev/null
+++ b/config/services/buckets-postgres/service.json.lab
@@ -0,0 +1,6 @@
+{
+	"params": {
+                "quota": 30
+	}
+}
+
diff --git a/config/services/buckets-postgres/service.json.production b/config/services/buckets-postgres/service.json.production
new file mode 100644
index 0000000..d7e80c9
--- /dev/null
+++ b/config/services/buckets-postgres/service.json.production
@@ -0,0 +1,6 @@
+{
+	"params": {
+		"ram": 32768,
+                "quota": 4000
+	}
+}
diff --git a/config/services/electric-boray/service.json b/config/services/electric-boray/service.json
new file mode 100644
index 0000000..ce40041
--- /dev/null
+++ b/config/services/electric-boray/service.json
@@ -0,0 +1,7 @@
+{
+	"params": {
+		"networks": [ "manta", "admin" ],
+		"ram": 2048,
+		"mdata_exec_timeout": 3600
+	}
+}
diff --git a/config/services/electric-boray/service.json.lab b/config/services/electric-boray/service.json.lab
new file mode 100644
index 0000000..49a2fab
--- /dev/null
+++ b/config/services/electric-boray/service.json.lab
@@ -0,0 +1,5 @@
+{
+	"params": {
+		"ram": 3072
+	}
+}
diff --git a/config/services/electric-boray/service.json.production b/config/services/electric-boray/service.json.production
new file mode 100644
index 0000000..4d57911
--- /dev/null
+++ b/config/services/electric-boray/service.json.production
@@ -0,0 +1,6 @@
+{
+	"params": {
+		"ram": 16384,
+                "quota": 100
+	}
+}
diff --git a/docs/man/man1/manta-adm.md b/docs/man/man1/manta-adm.md
index 65bced0..5cf829d 100644
--- a/docs/man/man1/manta-adm.md
+++ b/docs/man/man1/manta-adm.md
@@ -64,6 +64,15 @@ Services that are part of the Manta application include:
 **authcache**
   Stores user identity information
 
+**boray**
+  PostgreSQL interface for manta buckets system
+
+**buckets-postgres**
+  PostgreSQL databases used for storing object metadata for the buckets system
+
+**electric-boray**
+  Boray proxy for buckets that handles sharding using consistent hashing
+
 **electric-moray**
   Moray proxy that handles sharding using consistent hashing
 
@@ -695,7 +704,7 @@ See above for information on the `-l`, `-H`, and `-o` options.
 
 `-j, --json`
   Instead of the default text-based output, emit a JSON representation of the
-  summary information reported with the `-s/--summary` command.  This format is 
+  summary information reported with the `-s/--summary` command.  This format is
   suitable for use with `manta-adm update`.  This option cannot be combined with
   `-c/--bycn`, `-a/--all`, `-H/--omit-header`, or `-o/--columns`, and it _must_
   be combined with `-s/--summary`.  (Future versions of this command may support
diff --git a/lib/deploy.js b/lib/deploy.js
index 59bbc83..d375926 100644
--- a/lib/deploy.js
+++ b/lib/deploy.js
@@ -22,6 +22,7 @@ var util = require('util');
 var vasync = require('vasync');
 var sprintf = util.format;
 var common = require('./common');
+var services = require('./services');
 var mod_ssl = require('./ssl');
 var EventEmitter = require('events').EventEmitter;
 var VError = require('verror').VError;
@@ -973,7 +974,7 @@ function createInstance(self, app, svc, cb) {
 	/*
 	 * Prefix with the shard for things that are shardable...
 	 */
-	if (['postgres', 'moray'].indexOf(self.svcname) !== -1) {
+	if (services.serviceIsSharded(self.svcname)) {
 		params.alias = shard + '.' + params.alias;
 	}
 
@@ -1016,6 +1017,18 @@ function createInstance(self, app, svc, cb) {
 		    shard, service_root);
 	}
 
+	if (self.svcname === 'buckets-postgres') {
+		metadata.SERVICE_NAME = sprintf('%s.boray.%s',
+		    shard, service_root);
+		metadata.MANATEE_SHARD_PATH = sprintf('/manatee/%s',
+		    metadata.SERVICE_NAME);
+	}
+
+	if (self.svcname === 'boray') {
+		metadata.SERVICE_NAME = sprintf('%s.boray.%s',
+		    shard, service_root);
+	}
+
 	if (self.svcname === 'storage') {
 		metadata.SERVICE_NAME = sprintf('stor.%s', service_root);
 	}
diff --git a/lib/layout.js b/lib/layout.js
index 5d62e8e..b6c4484 100644
--- a/lib/layout.js
+++ b/lib/layout.js
@@ -115,7 +115,9 @@ var ML_SERVICES_EXACT = {
 var ML_NPERSHARD_INSTANCES = 3;
 var ML_SERVICES_PER_SHARD = {
     'postgres': ML_NPERSHARD_INSTANCES,
-    'moray': ML_NPERSHARD_INSTANCES
+    'moray': ML_NPERSHARD_INSTANCES,
+    'buckets-postgres': ML_NPERSHARD_INSTANCES,
+    'boray': ML_NPERSHARD_INSTANCES
 };
 
 /*
@@ -130,7 +132,8 @@ var ML_FRONTDOOR_RATIOS = {
     'authcache': 1,
     'electric-moray': ML_FRONTDOOR_NMAXINSTANCES,
     'webapi': ML_FRONTDOOR_NMAXINSTANCES,
-    'loadbalancer': ML_FRONTDOOR_NMAXINSTANCES
+    'loadbalancer': ML_FRONTDOOR_NMAXINSTANCES,
+    'electric-boray': ML_FRONTDOOR_NMAXINSTANCES
 };
 
 /*
diff --git a/lib/services.js b/lib/services.js
index e965e92..f97ec04 100644
--- a/lib/services.js
+++ b/lib/services.js
@@ -29,6 +29,7 @@ exports.serviceIsSharded = serviceIsSharded;
 exports.serviceSupportsOneach = serviceSupportsOneach;
 exports.serviceSupportsProbes = serviceSupportsProbes;
 exports.serviceConfigProperties = serviceConfigProperties;
+exports.serviceNameToImageName = serviceNameToImageName;
 
 /*
  * Service names deployed by default, in the order they get deployed.  This must
@@ -54,7 +55,10 @@ var mSvcNames = [
     'reshard',
     'pgstatsmon',
     'garbage-collector',
-    'prometheus'
+    'prometheus',
+    'buckets-postgres',
+    'boray',
+    'electric-boray'
 ];
 
 /*
@@ -62,25 +66,143 @@ var mSvcNames = [
  * manta-oneach to be used with "marlin" zones.
  */
 var mSvcConfigs = {
-    'nameservice':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'postgres':		{ 'oneach': true,  'probes': true,  'sharded': true  },
-    'moray':		{ 'oneach': true,  'probes': true,  'sharded': true  },
-    'electric-moray':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'storage':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'authcache':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'webapi':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'loadbalancer':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'jobsupervisor':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'jobpuller':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'medusa':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'ops':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'madtom':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'marlin-dashboard':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'reshard':		{ 'oneach': true,  'probes': true,  'sharded': false },
-    'pgstatsmon':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'garbage-collector': { 'oneach': true, 'probes': true,  'sharded': false },
-    'prometheus':	{ 'oneach': true,  'probes': true,  'sharded': false },
-    'marlin':		{ 'oneach': false, 'probes': false, 'sharded': false }
+	'nameservice': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-nameservice'
+	},
+	'postgres': {
+		'oneach': true,
+		'probes': true,
+		'sharded': true,
+		'imageName': 'manta-postgres'
+	},
+	'moray': {
+		'oneach': true,
+		'probes': true,
+		'sharded': true,
+		'imageName': 'manta-moray'
+	},
+	'electric-moray': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-electric-moray'
+	},
+	'storage': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-storage'
+	},
+	'authcache': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-authcache'
+	},
+	'webapi': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-webapi'
+	},
+	'loadbalancer': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-loadbalancer'
+	},
+	'jobsupervisor': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-jobsupervisor'
+	},
+	'jobpuller': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-jobpuller'
+	},
+	'medusa': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-medusa'
+	},
+	'ops': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-ops'
+	},
+	'madtom': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-madtom'
+	},
+	'marlin-dashboard': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-marlin-dashboard'
+	},
+	'reshard': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-reshard'
+	},
+	'pgstatsmon': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-pgstatsmon'
+	},
+	'garbage-collector': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-garbage-collector'
+	},
+	'prometheus': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-prometheus'
+	},
+	'buckets-postgres': {
+		'oneach': true,
+		'probes': true,
+		'sharded': true,
+		/*
+		 * Note that the image name does not follow the naming scheme of
+		 * for the other services, because the buckets-postgres service
+		 * uses the same image as the postgres service.
+		 */
+		'imageName': 'manta-postgres'
+	},
+	'boray': {
+		'oneach': true,
+		'probes': true,
+		'sharded': true,
+		'imageName': 'manta-boray'
+	},
+	'electric-boray': {
+		'oneach': true,
+		'probes': true,
+		'sharded': false,
+		'imageName': 'manta-electric-boray'
+	},
+	'marlin': {
+		'oneach': false,
+		'probes': false,
+		'sharded': false,
+		'imageName': 'manta-marlin'
+	}
 };
 
 exports.mSvcNames = mSvcNames;
@@ -299,3 +421,12 @@ function serviceSupportsProbes(svcname)
 	assertplus.ok(serviceNameIsValid(svcname));
 	return (mSvcConfigs[svcname].probes);
 }
+
+/*
+ * Returns the expected name for images deployed under the given service.
+ */
+function serviceNameToImageName(svcname)
+{
+	assertplus.ok(serviceNameIsValid(svcname));
+	return (mSvcConfigs[svcname].imageName);
+}
diff --git a/man/man1/manta-adm.1 b/man/man1/manta-adm.1
index 43968fb..732dd6b 100644
--- a/man/man1/manta-adm.1
+++ b/man/man1/manta-adm.1
@@ -60,6 +60,15 @@ Services that are part of the Manta application include:
 \fBauthcache\fP
 Stores user identity information
 .TP
+\fBboray\fP
+PostgreSQL interface for manta buckets system
+.TP
+\fBbuckets\-postgres\fP
+PostgreSQL databases used for storing object metadata for the buckets system
+.TP
+\fBelectric\-boray\fP
+Boray proxy for buckets that handles sharding using consistent hashing
+.TP
 \fBelectric\-moray\fP
 Moray proxy that handles sharding using consistent hashing
 .TP
@@ -103,7 +112,7 @@ PostgreSQL databases used for storing object and job metadata
 Monitoring system for Postgres
 .TP
 \fBprometheus\fP
-Time-series database that aggregates Manta and Triton metrics
+Time\-series database that aggregates Manta and Triton metrics
 .TP
 \fBreshard\fP
 Automated resharding system for Manta
@@ -739,7 +748,7 @@ logically apply).  The count for each group is also reported.  With
 .TP
 \fB\fC\-j, \-\-json\fR
 Instead of the default text\-based output, emit a JSON representation of the
-summary information reported with the \fB\fC\-s/\-\-summary\fR command.  This format is 
+summary information reported with the \fB\fC\-s/\-\-summary\fR command.  This format is
 suitable for use with \fB\fCmanta\-adm update\fR\&.  This option cannot be combined with
 \fB\fC\-c/\-\-bycn\fR, \fB\fC\-a/\-\-all\fR, \fB\fC\-H/\-\-omit\-header\fR, or \fB\fC\-o/\-\-columns\fR, and it \fImust\fP
 be combined with \fB\fC\-s/\-\-summary\fR\&.  (Future versions of this command may support
diff --git a/test/tst.layout.js b/test/tst.layout.js
index 70b0161..39fcbb7 100644
--- a/test/tst.layout.js
+++ b/test/tst.layout.js
@@ -347,7 +347,10 @@ var images = {
     'ops': 'OPS_IMAGE0',
     'madtom': 'MADTOM_IMAGE0',
     'marlin-dashboard': 'DASHBOARD_IMAGE0',
-    'marlin': 'MARLIN_IMAGE0'
+    'marlin': 'MARLIN_IMAGE0',
+    'buckets-postgres': 'BUCKETS_POSTGRES_IMAGE0',
+    'boray': 'BORAY_IMAGE0',
+    'electric-boray': 'ELECTRIC_BORAY_IMAGE0'
 };
 
 var nrun = 0;
diff --git a/test/tst.layout.js.out b/test/tst.layout.js.out
index 5bdf498..4a3c2ae 100644
--- a/test/tst.layout.js.out
+++ b/test/tst.layout.js.out
@@ -57,6 +57,31 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            },
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -105,6 +130,31 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            },
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -150,6 +200,31 @@ generated config:
         }
     },
     "server_r02_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            },
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -232,12 +307,19 @@ summary:
      pgstatsmon           -                 
      garbage-collector     -                 
      prometheus           -                 
+     electric-boray       -                3
      postgres             1                3
      postgres             2                3
      postgres             3                3
      moray                1                3
      moray                2                3
      moray                3                3
+     buckets-postgres     1                3
+     buckets-postgres     2                3
+     buckets-postgres     3                3
+     boray                1                3
+     boray                2                3
+     boray                3                3
 --------------------------------------------------
 --------------------------------------------------
 test case: invalid config: missing value (nshards)
@@ -544,6 +626,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 2
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 3
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 3
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 2
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 2
         },
@@ -616,8 +711,11 @@ summary:
      pgstatsmon           -                 
      garbage-collector     -                 
      prometheus           -                 
+     electric-boray       -                2
      postgres             1                3
      moray                1                3
+     buckets-postgres     1                3
+     boray                1                3
 --------------------------------------------------
 --------------------------------------------------
 test case: trivial two-system case, 3 shards
@@ -645,6 +743,31 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 2
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 3
+            },
+            "2": {
+                "BORAY_IMAGE0": 3
+            },
+            "3": {
+                "BORAY_IMAGE0": 3
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 3
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 3
+            },
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 3
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 2
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 2
         },
@@ -729,12 +852,19 @@ summary:
      pgstatsmon           -                 
      garbage-collector     -                 
      prometheus           -                 
+     electric-boray       -                2
      postgres             1                3
      postgres             2                3
      postgres             3                3
      moray                1                3
      moray                2                3
      moray                3                3
+     buckets-postgres     1                3
+     buckets-postgres     2                3
+     buckets-postgres     3                3
+     boray                1                3
+     boray                2                3
+     boray                3                3
 --------------------------------------------------
 --------------------------------------------------
 test case: one rack with fewer servers
@@ -816,6 +946,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -843,6 +986,19 @@ generated config:
         }
     },
     "server_r00_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -870,6 +1026,9 @@ generated config:
         }
     },
     "server_r00_metadata02": {
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -887,6 +1046,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -914,6 +1086,19 @@ generated config:
         }
     },
     "server_r01_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -938,6 +1123,9 @@ generated config:
         }
     },
     "server_r01_metadata02": {
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -952,6 +1140,19 @@ generated config:
         }
     },
     "server_r02_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -979,6 +1180,19 @@ generated config:
         }
     },
     "server_r02_metadata02": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1047,10 +1261,15 @@ summary:
      pgstatsmon           -                 
      garbage-collector     -                 
      prometheus           -                 
+     electric-boray       -                8
      postgres             1                3
      postgres             2                3
      moray                1                3
      moray                2                3
+     buckets-postgres     1                3
+     buckets-postgres     2                3
+     boray                1                3
+     boray                2                3
 --------------------------------------------------
 --------------------------------------------------
 test case: 3-rack, 4-shard deployment
@@ -1174,6 +1393,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1198,6 +1430,19 @@ generated config:
         }
     },
     "server_r00_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1222,6 +1467,19 @@ generated config:
         }
     },
     "server_r00_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1246,6 +1504,19 @@ generated config:
         }
     },
     "server_r00_metadata03": {
+        "boray": {
+            "4": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "4": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1273,6 +1544,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1297,6 +1581,19 @@ generated config:
         }
     },
     "server_r01_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1321,6 +1618,19 @@ generated config:
         }
     },
     "server_r01_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1345,6 +1655,19 @@ generated config:
         }
     },
     "server_r01_metadata03": {
+        "boray": {
+            "4": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "4": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1369,6 +1692,19 @@ generated config:
         }
     },
     "server_r02_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1393,6 +1729,19 @@ generated config:
         }
     },
     "server_r02_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1417,6 +1766,19 @@ generated config:
         }
     },
     "server_r02_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1441,6 +1803,19 @@ generated config:
         }
     },
     "server_r02_metadata03": {
+        "boray": {
+            "4": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "4": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1533,6 +1908,7 @@ summary:
      pgstatsmon           -                 
      garbage-collector     -                 
      prometheus           -                 
+     electric-boray       -               12
      postgres             1                3
      postgres             2                3
      postgres             3                3
@@ -1541,6 +1917,14 @@ summary:
      moray                2                3
      moray                3                3
      moray                4                3
+     buckets-postgres     1                3
+     buckets-postgres     2                3
+     buckets-postgres     3                3
+     buckets-postgres     4                3
+     boray                1                3
+     boray                2                3
+     boray                3                3
+     boray                4                3
 --------------------------------------------------
 --------------------------------------------------
 test case: 3-AZ, 1-rack-per-AZ, 1-shard deployment
@@ -1598,6 +1982,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1644,6 +2041,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1687,6 +2097,19 @@ generated config:
 }
 {
     "az2_server_r00_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1748,8 +2171,11 @@ summary:
      pgstatsmon           -                                                   
      garbage-collector     -                                                   
      prometheus           -                                                   
+     electric-boray       -                1                1                1
      postgres             1                1                1                1
      moray                1                1                1                1
+     buckets-postgres     1                1                1                1
+     boray                1                1                1                1
 --------------------------------------------------
 --------------------------------------------------
 test case: 3-AZ, 1-rack-per-AZ, 2-shard deployment
@@ -1807,6 +2233,25 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1859,6 +2304,25 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1908,6 +2372,25 @@ generated config:
 }
 {
     "az2_server_r00_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            },
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            },
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -1976,10 +2459,15 @@ summary:
      pgstatsmon           -                                                   
      garbage-collector     -                                                   
      prometheus           -                                                   
+     electric-boray       -                1                1                1
      postgres             1                1                1                1
      postgres             2                1                1                1
      moray                1                1                1                1
      moray                2                1                1                1
+     buckets-postgres     1                1                1                1
+     buckets-postgres     2                1                1                1
+     boray                1                1                1                1
+     boray                2                1                1                1
 --------------------------------------------------
 --------------------------------------------------
 test case: 3-AZ, 2-racks-per-AZ, 3-shard deployment
@@ -2121,6 +2609,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2148,6 +2649,19 @@ generated config:
         }
     },
     "az0_server_r00_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2172,6 +2686,19 @@ generated config:
         }
     },
     "az0_server_r00_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2225,6 +2752,19 @@ generated config:
         "authcache": {
             "AUTHCACHE_IMAGE0": 1
         },
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2252,6 +2792,19 @@ generated config:
         }
     },
     "az1_server_r00_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2276,6 +2829,19 @@ generated config:
         }
     },
     "az1_server_r00_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2326,6 +2892,19 @@ generated config:
 }
 {
     "az2_server_r00_metadata00": {
+        "boray": {
+            "1": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "1": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2353,6 +2932,19 @@ generated config:
         }
     },
     "az2_server_r00_metadata01": {
+        "boray": {
+            "2": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "2": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2377,6 +2969,19 @@ generated config:
         }
     },
     "az2_server_r00_metadata02": {
+        "boray": {
+            "3": {
+                "BORAY_IMAGE0": 1
+            }
+        },
+        "buckets-postgres": {
+            "3": {
+                "BUCKETS_POSTGRES_IMAGE0": 1
+            }
+        },
+        "electric-boray": {
+            "ELECTRIC_BORAY_IMAGE0": 1
+        },
         "electric-moray": {
             "ELECTRIC_MORAY_IMAGE0": 1
         },
@@ -2445,10 +3050,17 @@ summary:
      pgstatsmon           -                                                   
      garbage-collector     -                                                   
      prometheus           -                                                   
+     electric-boray       -                3                3                3
      postgres             1                1                1                1
      postgres             2                1                1                1
      postgres             3                1                1                1
      moray                1                1                1                1
      moray                2                1                1                1
      moray                3                1                1                1
+     buckets-postgres     1                1                1                1
+     buckets-postgres     2                1                1                1
+     buckets-postgres     3                1                1                1
+     boray                1                1                1                1
+     boray                2                1                1                1
+     boray                3                1                1                1
 --------------------------------------------------
diff --git a/test/tst.services.js b/test/tst.services.js
index 12da351..ac0bfe2 100644
--- a/test/tst.services.js
+++ b/test/tst.services.js
@@ -41,7 +41,10 @@ var knownServices = [
     'reshard',
     'pgstatsmon',
     'garbage-collector',
-    'prometheus'
+    'prometheus',
+    'buckets-postgres',
+    'boray',
+    'electric-boray'
 ];
 
 function main()
@@ -67,7 +70,8 @@ function main()
 	 * Test serviceIsSharded().
 	 */
 	sharded = knownServices.filter(services.serviceIsSharded).sort();
-	assertplus.deepEqual([ 'moray', 'postgres' ], sharded);
+	assertplus.deepEqual(
+	    [ 'boray', 'buckets-postgres', 'moray', 'postgres' ], sharded);
 
 	/*
 	 * Test serviceSupportsOneach().
-- 
2.21.0

