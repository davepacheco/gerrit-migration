From 9bae5e0e4c74ad176f24813fa07255f12fb92dae Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Fri, 16 Nov 2018 12:34:40 +0000
Subject: [PATCH] TRITON-774 imgapi should allow admin-only imports from URLs
 Reviewed by: Trent Mick <trentm@gmail.com>

---
 CHANGES.md    |   5 +++
 lib/imgapi.js | 102 ++++++++++++++++++++++++++++++++++++++++++++++++++
 package.json  |   2 +-
 3 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/CHANGES.md b/CHANGES.md
index ba834df..f78c9de 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,6 +8,11 @@
 
 ## Not yet released
 
+## 12.1.0
+
+- TRITON-774 Add imgapi.addImageFileFromUrl method, used to add a image file
+  from a url.
+
 ## 12.0.0
 
 - TRITON-742 Remove dsapi client
diff --git a/lib/imgapi.js b/lib/imgapi.js
index db15d13..a4d1e45 100644
--- a/lib/imgapi.js
+++ b/lib/imgapi.js
@@ -1581,6 +1581,108 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
 };
 
 
+/**
+ * Add an image file from a URL.
+ *
+ * @param {Object} options
+ *      - {String} uuid : the UUID of the image.
+ *      - {String} file_url : A url to the file to be downloaded. Only https
+ *        urls are supported, and the server must not use a self-signed cert.
+ *      - {String} compression : Optional. One of 'bzip2', 'gzip', 'xz' or
+ *                 'none'.
+ *      - {String} sha1 : SHA-1 hash of the file being uploaded.
+ *      - {String} storage : The type of storage preferred for this image file.
+ *        Can be "local" or "manta". Will try to default to "manta" when
+ *        available, otherwise "local".
+ *      - headers {Object} Optional Additional request headers.
+ * @param {UUID} account : Optional. The UUID of the account on behalf of whom
+ *      this request is being made. If given this will only return images
+ *      accessible to that account.
+ * @param {Function} callback : `function (err, image, res)`
+ */
+IMGAPI.prototype.addImageFileFromUrl = function addImageFileFromUrl(
+    options, account, callback) {
+
+    var self = this;
+    assert.object(options, 'options');
+    assert.uuid(options.uuid, 'options.uuid');
+    assert.string(options.file_url, 'options.file_url');
+    assert.optionalString(options.compression, 'options.compression');
+
+    assert.optionalObject(options.headers, 'options.headers');
+    if (callback === undefined) {
+        callback = account;
+        account = undefined;
+    }
+    assert.func(callback, 'callback');
+    var uuid = options.uuid;
+    var file_url = options.file_url;
+
+    // Sigh. sdc-imgapi-cli runs with an old version of node which has no
+    // String.endsWith(..) method, so implement our own instead.
+    function endsWith(testStr, endsStr) {
+        var index = testStr.lastIndexOf(endsStr);
+        if (index < 0) {
+            return false;
+        }
+        if (endsStr.length + index == testStr.length) {
+            return true;
+        }
+        return false;
+    }
+
+    // supported compression values from sdc-imgapi.git/lib/constants.js
+    if (options.compression === undefined) {
+        var url_path = mod_url.parse(file_url).pathname;
+        if (endsWith(url_path, '.gz') || endsWith(url_path, '.tgz')) {
+            options.compression = 'gzip';
+        } else if (endsWith(url_path, '.bz2')) {
+            options.compression = 'bzip2';
+        } else if (endsWith(url_path, '.xz')) {
+            options.compression = 'xz';
+        } else {
+            self.client.log.warn(
+                'Expected the URL path to end with one of .gz, .tgz, .bz2 ' +
+                'or .xz. Using "none" compression instead.');
+            options.compression = 'none';
+        }
+    }
+
+    var path = self._path(format('/images/%s/file/from-url', uuid), {
+        channel: self.channel,
+        storage: options.storage,
+        compression: options.compression,
+        account: account,
+        sha1: options.sha1,
+        dataset_guid: options.dataset_guid
+    });
+
+    var data = {file_url: file_url};
+
+    self._getAuthHeaders(function (hErr, headers) {
+        if (hErr) {
+            callback(hErr);
+            return;
+        }
+        if (options.headers) {
+            simpleMerge(headers, options.headers);
+        }
+        var reqOpts = {
+            path: path,
+            headers: headers
+        };
+        self.client.post(reqOpts, data, function (err, req, res, image) {
+            if (err) {
+                callback(err, null, res);
+            } else {
+                callback(null, image, res);
+            }
+        });
+        return;
+    });
+};
+
+
 /**
  * Get an image file.
  *
diff --git a/package.json b/package.json
index 8c137ba..33e01d4 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "12.0.0",
+  "version": "12.1.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
-- 
2.21.0

