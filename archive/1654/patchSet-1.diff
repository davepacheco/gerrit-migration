From c0aa9997885e5b50ef9954d26c2d18eedfe5b54c Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 13 Mar 2017 13:59:47 -0700
Subject: [PATCH] AGENT-1065 cn-agent crashing with "Uncaught AssertionError:
 Cannot write to a destroyed stream"

---
 lib/docker-stdio.js | 86 +++++++++++++++++++++++++++++++++++----------
 1 file changed, 68 insertions(+), 18 deletions(-)

diff --git a/lib/docker-stdio.js b/lib/docker-stdio.js
index 9a2029b..e5a737e 100644
--- a/lib/docker-stdio.js
+++ b/lib/docker-stdio.js
@@ -721,19 +721,26 @@ function tryEnd(socket) {
     }
 }
 
-function writeData(streamType, stream, chunk) {
-    assert.ok(stream);
-    assert.notEqual(stream.destroyed,
-        true,
-        'Cannot write to a destroyed stream');
-    assert.string(chunk);
+function writeData(opts) {
+    var data;
 
-    var data = JSON.stringify({
-        type: streamType,
-        data: chunk
+    assert.object(opts.log, 'opts.log');
+    assert.string(opts.streamType, 'opts.streamType');
+    assert.object(opts.stream, 'opts.stream');
+    assert.string(opts.chunk, 'opts.chunk');
+    assert.ok(opts.stream);
+
+    if (opts.stream.destroyed) {
+        opts.log.warn('cannot write to a destroyed stream');
+        return;
+    }
+
+    data = JSON.stringify({
+        type: opts.streamType,
+        data: opts.chunk
     }) + '\r\n';
 
-    stream.write(data);
+    opts.stream.write(data);
 }
 
 function writeEnd(stream, obj, callback) {
@@ -921,7 +928,12 @@ function runAttachedContainerCommand(params, log, cmdSpawn, socket) {
 
     cmdSpawn.stdout.on('data', function (data) {
         params.stdout_written += data.length;
-        writeData(params.Tty ? 'tty' : 'stdout', socket, data.toString());
+        writeData({
+            log: log,
+            streamType: params.Tty ? 'tty' : 'stdout',
+            stream: socket,
+            chunk: data.toString()
+        });
     });
 
     cmdSpawn.stderr.on('data', function (data) {
@@ -941,9 +953,12 @@ function runAttachedContainerCommand(params, log, cmdSpawn, socket) {
                     }, execline.message);
                     // TODO: send an error code back to the client instead
                     // of just the fatal message.
-                    writeData(params.Tty ? 'tty' : 'stderr',
-                        socket,
-                        execline.line + '\r\n');
+                    writeData({
+                        log: log,
+                        streamType: params.Tty ? 'tty' : 'stderr',
+                        stream: socket,
+                        chunk: execline.line + '\r\n'
+                    });
                 } else {
                     if (execline.message.indexOf('EXEC') === 0) {
                         params.in_dockerexec = false;
@@ -955,7 +970,12 @@ function runAttachedContainerCommand(params, log, cmdSpawn, socket) {
                 }
             });
         } else {
-            writeData(params.Tty ? 'tty' : 'stderr', socket, data.toString());
+            writeData({
+                log: log,
+                streamType: params.Tty ? 'tty' : 'stderr',
+                stream: socket,
+                chunk: data.toString()
+            });
         }
     });
 
@@ -1032,7 +1052,12 @@ function runContainerPtyCommand(params, cmd, args, socket) {
                     }, execline.message);
                     // TODO: send an error code back to the client instead
                     // of just the fatal message.
-                    writeData('tty', socket, execline.line + '\r\n');
+                    writeData({
+                        log: log,
+                        streamType: 'tty',
+                        stream: socket,
+                        chunk: execline.line + '\r\n'
+                    });
                 } else {
                     if (execline.message.indexOf('EXEC') === 0) {
                         in_dockerexec = false;
@@ -1045,7 +1070,12 @@ function runContainerPtyCommand(params, cmd, args, socket) {
             });
         } else {
             output_written += data.length;
-            writeData('tty', socket, data.toString());
+            writeData({
+                log: log,
+                streamType: 'tty',
+                stream: socket,
+                chunk: data.toString()
+            });
         }
     });
 
@@ -1116,6 +1146,12 @@ function runContainerLogsCommand(container, params, socket) {
                 continue;
             }
 
+            // If the socket has already been closed, do not continue to try to
+            // write data to it.
+            if (socket.destroyed) {
+                break;
+            }
+
             var rec = JSON.parse(line);
             var data;
             if (params.Timestamps) {
@@ -1124,7 +1160,12 @@ function runContainerLogsCommand(container, params, socket) {
                 data = rec.log;
             }
 
-            writeData(rec.stream, socket, data.toString());
+            writeData({
+                log: log,
+                streamType: rec.stream,
+                stream: socket,
+                chunk: data.toString()
+            });
         }
     });
 
@@ -1143,6 +1184,15 @@ function runContainerLogsCommand(container, params, socket) {
         log.error('cmdSpawn threw an error %s', error.toString());
     });
 
+    // Kill the cat/tail process after the socket is closed so we don't
+    // continue to get `readable` events from lstream.
+    socket.on('close', function () {
+        log.info(
+            'logs socket for container %shas closed, ending container stdio',
+            container);
+        cmdSpawn.kill();
+    });
+
     socket.on('end', function () {
         log.info('socket for "%s %s" has ended', cmd, cmdArgs.join(' '));
         tryEnd(socket);
-- 
2.21.0

