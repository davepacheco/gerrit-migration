From 676a83b73350fb90b0975ee78e4b4ce4e9d18da4 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 29 Jan 2018 12:15:44 -0800
Subject: [PATCH] TRITON-69 cn-agent should not try to update boot time just
 once, should retry instead

---
 lib/app.js   | 95 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 package.json |  5 +--
 2 files changed, 98 insertions(+), 2 deletions(-)

diff --git a/lib/app.js b/lib/app.js
index fe60454..c3bb48c 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -12,9 +12,11 @@ var dns = require('dns');
 var exec = require('child_process').exec;
 var fs = require('fs');
 var os = require('os');
+var path = require('path');
 
 var assert = require('assert-plus');
 var async = require('async');
+var backo2 = require('backo2');
 var restify = require('restify');
 var vasync = require('vasync');
 var verror = require('verror');
@@ -27,6 +29,17 @@ var TaskAgent = require('./task_agent/task_agent');
 
 var DEFAULT_TASK_TIMEOUT_SECONDS = 60 * 60;
 
+//
+// 1.6 chosen here mostly randomly, just so we try a bit more often initially
+// than with the default value of 2. If a more scientific value is arrived at,
+// feel free to change. Same goes for the other values here. These seemed like
+// reasonable places to start, but production experience will likely lead to
+// improvement opportunities. Nothing is magical about these values.
+//
+var REGISTER_RETRY_FACTOR = 1.6;
+var REGISTER_RETRY_JITTER = 0.2;
+var REGISTER_RETRY_MAX_DELAY_MS = 120 * 1000;
+var REGISTER_RETRY_MIN_DELAY_MS = 500;
 
 function App(options) {
     assert.object(options, 'options');
@@ -40,6 +53,10 @@ function App(options) {
     assert.string(options.tasklogdir, 'options.tasklogdir');
     assert.uuid(options.uuid, 'options.uuid');
 
+    var packageJson =
+        JSON.parse(fs.readFileSync(path.join(__dirname, '/../package.json'),
+        'utf8'));
+
     this.options = options;
     if (!options.env) {
         options.env = {};
@@ -49,8 +66,15 @@ function App(options) {
     this.backend = options.backend;
     this.config = options.config;
     this.log = options.log.child();
+    this.registerBackoff = new backo2({
+        factor: REGISTER_RETRY_FACTOR,
+        jitter: REGISTER_RETRY_JITTER,
+        max: REGISTER_RETRY_MAX_DELAY_MS,
+        min: REGISTER_RETRY_MIN_DELAY_MS
+    });
     this.sdc_config = options.sdc_config;
     this.sysinfo = options.sysinfo;
+    this.userAgent = 'cn-agent/' + packageJson.version;
     this.uuid = options.uuid;
 
     this.log.info('started cn-agent for %s', this.uuid);
@@ -314,6 +338,75 @@ App.prototype.startHeartbeater = function () {
 };
 
 
+// Whenever we start up, we want to ensure we've updated the sysinfo in CNAPI
+// before we continue further. This ensures we've got the correct 'Boot Time'
+// for example. (See also: TRITON-69)
+App.prototype.registerServer = function registerServer(callback) {
+    var self = this;
+
+    var cnapiAddr = self.cnapiAddr;
+    var restifyOptions;
+    var url = 'http://' + cnapiAddr;
+    var urlPath = path.join('/servers', self.uuid, 'sysinfo');
+
+    restifyOptions = {
+        connectTimeout: 5000,
+        requestTimeout: 5000,
+        url: url,
+        userAgent: self.userAgent
+    };
+
+    self.client = restify.createJsonClient(restifyOptions);
+
+    // Make an attempt, if that fails, schedule a new attempt with a delay
+    self.client.post({
+        path: urlPath
+    }, {
+        sysinfo: self.sysinfo
+    }, function afterPost(err, req, res, obj) {
+        var delay;
+
+        if (err) {
+            if (err.statusCode === 404 && err.restCode === 'ResourceNotFound') {
+                // If we get a 404, that means we've got an old CNAPI that
+                // doesn't support registering sysinfo. So we'll not keep
+                // retrying in this case.
+                self.log.warn({
+                    err: err
+                }, 'CNAPI does not seem to support sysinfo registration. ' +
+                    'Skipping.');
+
+                callback();
+                return;
+            }
+
+            delay = self.registerBackoff.duration();
+
+            self.log.warn({
+                err: err,
+                retryInMs: delay
+            }, 'Error posting sysinfo to cnapi, will retry.');
+
+            setTimeout(function _registerAgain() {
+                registerServer.call(self, callback);
+            }, delay);
+
+            // Note: we don't call callback() because we wait until we're
+            // successful.
+
+            return;
+        }
+
+        self.log.debug({
+            headers: res.headers,
+            statusCode: res.statusCode
+        }, 'posted sysinfo to cnapi');
+
+        callback();
+    });
+};
+
+
 App.prototype.start = function () {
     var self = this;
 
@@ -348,6 +441,8 @@ App.prototype.start = function () {
         funcs: [
             function _ensureCnapiLookedUp(_, cb) {
                 self.ensureCnapiLookedUp(cb);
+            }, function _registerServer(_, cb) {
+                self.registerServer(cb);
             }, function _startHeartbeater(_, cb) {
                 self.startHeartbeater();
                 cb();
diff --git a/package.json b/package.json
index 45e7d28..d849c7c 100644
--- a/package.json
+++ b/package.json
@@ -1,18 +1,19 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.0.2",
+  "version": "2.1.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
     "assert-plus": "1.0.0",
     "async": "2.4.1",
+    "backo2": "1.0.2",
     "bunyan": "1.8.5",
     "ctype": "0.5.4",
     "digest-stream": "0.2.2",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "imgmanifest": "3.0.0",
-    "jsprim": "1.3.1",
+    "jsprim": "2.0.0",
     "kstat": "1.0.1",
     "lazy-property": "1.0.0",
     "lockfd": "1.2.0",
-- 
2.21.0

