From bdd174467c6389ab648fc7394e88c12375e46b72 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Fri, 9 Dec 2016 23:38:29 +0000
Subject: [PATCH] OS-5412 'screen' doesn't run on centos7

---
 usr/src/uts/common/brand/lx/devfs/lxd_vnops.c | 41 +++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/usr/src/uts/common/brand/lx/devfs/lxd_vnops.c b/usr/src/uts/common/brand/lx/devfs/lxd_vnops.c
index 8088ba6174..9b26a8780e 100644
--- a/usr/src/uts/common/brand/lx/devfs/lxd_vnops.c
+++ b/usr/src/uts/common/brand/lx/devfs/lxd_vnops.c
@@ -30,6 +30,7 @@
 #include <vm/seg.h>
 #include <sys/lx_brand.h>
 #include <sys/brand.h>
+#include <sys/fs/sdev_impl.h>
 
 #include "lxd.h"
 
@@ -317,6 +318,46 @@ lxd_setattr(vnode_t *vp, struct vattr *vap, int flags, struct cred *cr,
 
 	ASSERT(ldn->lxdn_type == LXDNT_BACK);
 	vp = REALVP(vp);
+
+	/*
+	 * The behavior for changing the group on a pty is different for Linux
+	 * vs. illumos. See secpolicy_vnode_setattr(). It expects us to be a
+	 * member of the group we're changing to, but Linux allows changing to
+	 * a different group if we're the owner of the pty. Some apps, in
+	 * particular some versions of 'screen', depend on this.
+	 *
+	 * Unfortunately the secpolicy_vnode_setattr() call is deep in the
+	 * setattr calling chain.  We go through:
+	 * spec_setattr -> devpts_setattr -> devname_setattr_func
+	 *
+	 * What we're doing here is checking to see if we're changing the
+	 * group and if we own the pty. In this case we elevate our privileges
+	 * to use zone_kcred() to change the group. Any other setattr changes
+	 * will go through the normal flow. Note that pty attr changes are
+	 * not persisted.
+	 */
+	if ((vap->va_mask & (AT_UID | AT_GID)) != 0 &&
+	    vp->v_path != NULL && strstr(vp->v_path, "/dev/pts/") != NULL &&
+	    VTOS(vp)->s_realvp != NULL) {
+		struct sdev_node *dv;
+
+		dv = VTOSDEV(VTOS(vp)->s_realvp);
+		if (dv->sdev_attr != NULL &&
+		    crgetuid(cr) == dv->sdev_attr->va_uid &&
+		    vap->va_uid == dv->sdev_attr->va_uid) {
+			uint_t omask = vap->va_mask;
+
+			vap->va_mask &= (AT_UID | AT_GID);
+			res = VOP_SETATTR(vp, vap, flags, zone_kcred(), ct);
+			if (res != 0)
+				return (res);
+
+			vap->va_mask = omask & ~(AT_UID | AT_GID);
+			if (vap->va_mask == 0)
+				return (0);
+		}
+	}
+
 	res = VOP_SETATTR(vp, vap, flags, cr, ct);
 	if (res == 0 && (vap->va_mask & (AT_MODE | AT_UID | AT_GID))) {
 		lxd_save_attrs(lxdm, vp);
-- 
2.21.0

