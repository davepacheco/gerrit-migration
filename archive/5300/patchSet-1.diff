commit f013186d11c95647725ad4acfeef8d6eb409b8f8 (refs/changes/00/5300/1)
Author: Rui Loura <rui@joyent.com>
Date:   2019-01-02T21:03:17+00:00 (9 months ago)
    
    TRITON-754 lib/sdcadm.js is not admin rack aware
    TRITON-956 sdcadm procedures needs to be rack aware
    TRITON-948 sdcadm check-config shouldnt depend on admin NIC being tagged as "admin"
    TRITON-931 sdcadm admin IP functions need to be factored out
    TRITON-953 sdcadm checkCoreVmInstancesResolvers() needs to be rack aware
    TRITON-1004 sdcadm post-setup docker needs to be rack aware
    TRITON-1063 sdcadm experimental tests need update post TRITON-904

diff --git a/CHANGES.md b/CHANGES.md
index 3e88163..63fa441 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,16 @@
 
 # sdcadm Changelog
 
+## 1.24.3
+
+- TRITON-754 lib/sdcadm.js is not admin rack aware
+- TRITON-956 sdcadm procedures needs to be rack aware
+- TRITON-948 sdcadm check-config shouldnt depend on admin NIC being tagged as "admin"
+- TRITON-931 sdcadm admin IP functions need to be factored out
+- TRITON-953 sdcadm checkCoreVmInstancesResolvers() needs to be rack aware
+- TRITON-1004 sdcadm post-setup docker needs to be rack aware
+- TRITON-1063 sdcadm experimental tests need update post TRITON-904
+
 ## 1.24.2
 
 - TRITON-1055 sdcadm experimental update-agents with --just-download flag fails on SHA1
diff --git a/lib/cli/do_check_config.js b/lib/cli/do_check_config.js
index 51aa311..34b6d18 100644
--- a/lib/cli/do_check_config.js
+++ b/lib/cli/do_check_config.js
@@ -12,6 +12,7 @@ var child_process = require('child_process'),
     execFile = child_process.execFile;
 
 var assert = require('assert-plus');
+var netconfig = require('triton-netconfig');
 var sprintf = require('extsprintf').sprintf;
 var vasync = require('vasync');
 
@@ -126,21 +127,17 @@ CheckConfig.prototype.execute = function cExecute(opts, args, cb) {
                 return;
             }
             sysinfo = (res && res.length > 0 ? res[0].sysinfo : null);
-            var sysinfoNics = sysinfo['Network Interfaces'];
-            Object.keys(sysinfoNics).filter(function findAdminNic(k) {
-                return (sysinfoNics[k]['NIC Names'][0] ===
-                    'admin');
-            }).map(function checkAdminNics(k) {
-                if (sysinfoNics[k]['MAC Address'] !==
-                    sdc.admin_nic) {
-                    errs.push('SAPI sdc admin_nic did not match with GZ ' +
-                        'Admin MAC Address');
-                }
-                if (sysinfoNics[k].ip4addr !== sdc.admin_ip) {
-                    errs.push('SAPI sdc admin_ip did not match with GZ ' +
-                        'Admin IPv4 Address');
-                }
-            });
+
+            if (netconfig.adminIpFromSysinfo(sysinfo) !== sdc.admin_ip) {
+                errs.push('SAPI sdc admin_ip did not match with GZ ' +
+                    'Admin IPv4 Address');
+            }
+
+            var adminNic = netconfig.adminNicFromSysinfo(sysinfo);
+            if (adminNic && adminNic['MAC Address'] !== sdc.admin_nic) {
+                errs.push('SAPI sdc admin_nic did not match with GZ ' +
+                    'Admin MAC Address');
+            }
 
             var sysinfoVnics = sysinfo['Virtual Network Interfaces'];
             Object.keys(sysinfoVnics).filter(
diff --git a/lib/common.js b/lib/common.js
index 20d20ca..cbf7f2e 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -15,6 +15,7 @@ var child_process = require('child_process'),
     spawn = child_process.spawn;
 var format = require('util').format;
 var fs = require('fs');
+var netconfig = require('triton-netconfig');
 var path = require('path');
 var tty = require('tty');
 var util = require('util');
@@ -703,9 +704,7 @@ function getZoneIP(opts, cb) {
             return;
         }
 
-        var ip = vm.nics.filter(function (n) {
-            return (n.nic_tag === 'admin');
-        })[0].ip;
+        var ip = netconfig.adminIpFromVmMetadata(vm);
 
         cb(null, ip);
     });
@@ -1761,25 +1760,6 @@ function safeCycles() {
     };
 }
 
-function serverAdminIpFromSysinfo(sysinfo) {
-    var nics = sysinfo['Network Interfaces'] || {};
-    var tag = 'admin';
-    var adminIp;
-
-    if (sysinfo['Admin NIC Tag']) {
-        tag = sysinfo['Admin NIC Tag'];
-    }
-
-    adminIp = Object.keys(nics).map(function (nicName) {
-        return nics[nicName];
-    }).filter(function (nic) {
-        return nic['NIC Names'].indexOf(tag) !== -1;
-    }).map(function (nic) {
-        return nic.ip4addr;
-    })[0];
-    return adminIp;
-}
-
 function utcTimestamp(start) {
     assert.optionalDate(start, 'start');
     if (!start) {
@@ -1833,7 +1813,6 @@ module.exports = {
     unmountUsbKey: unmountUsbKey,
     copyFile: copyFile,
     safeCycles: safeCycles,
-    serverAdminIpFromSysinfo: serverAdminIpFromSysinfo,
     utcTimestamp: utcTimestamp
 };
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index ae694c7..ea378cb 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -18,6 +18,7 @@ var mkdirp = require('mkdirp');
 var assert = require('assert-plus');
 var ProgressBar = require('progbar').ProgressBar;
 var uuid = require('node-uuid');
+var netconfig = require('triton-netconfig');
 
 var common = require('../common');
 var errors = require('../errors');
@@ -363,9 +364,7 @@ function do_docker(subcmd, opts, args, cb) {
                     next(vmErr);
                     return;
                 }
-                var dockerIp = dockerVm.nics.filter(function (nic) {
-                    return nic.nic_tag === 'external';
-                })[0].ip;
+                var dockerIp = netconfig.externalIpFromVmMetadata(dockerVm);
                 var dockerUrl = format('tcp://%s:2376', dockerIp);
 
                 try {
diff --git a/lib/procedures/create-service-instance-v1.js b/lib/procedures/create-service-instance-v1.js
index 38319f6..b268095 100644
--- a/lib/procedures/create-service-instance-v1.js
+++ b/lib/procedures/create-service-instance-v1.js
@@ -9,6 +9,7 @@
  */
 
 var assert = require('assert-plus');
+var netconfig = require('triton-netconfig');
 var sprintf = require('extsprintf').sprintf;
 var util = require('util');
 
@@ -204,11 +205,8 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
                         return;
                     }
 
-                    var adminNic = nics.filter(function findAdm(n) {
-                        return (n.nic_tag === 'admin');
-                    })[0];
-
-                    if (!adminNic || !adminNic.mac) {
+                    var adminMac = netconfig.adminMacFromVmMetadata(ctx.currVm);
+                    if (!adminMac) {
                         next(new errors.InternalError({
                             message: 'Cannot find ' + alias + ' VM admin NIC'
                         }));
@@ -222,7 +220,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
                         params: {
                             update_nics: [
                                 {
-                                    mac: adminNic.mac,
+                                    mac: adminMac,
                                     dhcp_server: true
                                 }
                             ]
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 2298c0b..8e63ecf 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -14,6 +14,7 @@
  */
 
 var assert = require('assert-plus');
+var netconfig = require('triton-netconfig');
 var os = require('os');
 var util = require('util'),
     format = util.format;
@@ -935,7 +936,7 @@ function coordinatePlan(opts, cb) {
                                     image: change.image.uuid,
                                     server: s.uuid,
                                     hostname: s.hostname,
-                                    server_ip: common.serverAdminIpFromSysinfo(
+                                    server_ip: netconfig.adminIpFromSysinfo(
                                         s.sysinfo),
                                     instance: null,
                                     version: change.image.version
@@ -969,7 +970,7 @@ function coordinatePlan(opts, cb) {
                                     image: change.image.uuid,
                                     server: s.uuid,
                                     hostname: s.hostname,
-                                    server_ip: common.serverAdminIpFromSysinfo(
+                                    server_ip: netconfig.adminIpFromSysinfo(
                                         s.sysinfo),
                                     instance: null,
                                     version: change.image.version
diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index 736aaa5..86aec8c 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -15,6 +15,8 @@ var util = require('util'),
 var child_process = require('child_process'),
     execFile = child_process.execFile,
     spawn = child_process.spawn;
+var netconfig = require('triton-netconfig'),
+    vmAdminIp = netconfig.adminIpFromVmMetadata;
 var vasync = require('vasync');
 var assert = require('assert-plus');
 var vmadm = require('../vmadm');
@@ -374,12 +376,7 @@ function waitForInstToBeUp(arg, cb) {
                                 running = true;
 
                                 if (!inst.ip) {
-                                    var vmIp = vm.nics.filter(function (nic) {
-                                        return nic.nic_tag === 'admin';
-                                    }).map(function (nic) {
-                                        return nic.ip;
-                                    })[0];
-
+                                    var vmIp = vmAdminIp(vm);
                                     if (vmIp) {
                                         inst.ip = vmIp;
                                     }
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index ffc2bc3..60b7886 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -24,6 +24,7 @@ var format = util.format;
 var assert = require('assert-plus');
 var cueball = require('cueball');
 var mkdirp = require('mkdirp');
+var netconfig = require('triton-netconfig');
 var sdcClients = require('sdc-clients');
 var semver = require('semver');
 var UFDS = require('ufds');
@@ -645,7 +646,7 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                         continue;
                     }
                     ctx.serverAdminIpFromUuid[server.uuid] =
-                        common.serverAdminIpFromSysinfo(server.sysinfo);
+                        netconfig.adminIpFromSysinfo(server.sysinfo);
                 }
                 next();
             });
@@ -812,12 +813,7 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                     }
                 }
 
-                var adminIp = vm.nics.filter(function (nic) {
-                    return nic.nic_tag === 'admin';
-                }).map(function (nic) {
-                    return nic.ip;
-                })[0];
-
+                var adminIp = netconfig.adminIpFromVmMetadata(vm);
                 if (adminIp) {
                     inst.ip = adminIp;
                 }
diff --git a/lib/steps/binder.js b/lib/steps/binder.js
index 36f172d..45df034 100644
--- a/lib/steps/binder.js
+++ b/lib/steps/binder.js
@@ -13,6 +13,7 @@
  */
 
 var assert = require('assert-plus');
+var netconfig = require('triton-netconfig');
 var vasync = require('vasync');
 
 var errors = require('../errors');
@@ -239,11 +240,11 @@ function checkCoreVmInstancesResolvers(arg, cb) {
                         var unknownNicTag = false;
                         var resolvers = [];
                         vm.nics.forEach(function (nic) {
-                            if (nic.nic_tag === 'admin') {
+                            if (netconfig.isNicAdmin(nic)) {
                                 resolvers = resolvers.concat(
                                     ctx.binderIps);
                                 hasAdminNic = true;
-                            } else if (nic.nic_tag === 'external') {
+                            } else if (netconfig.isNicExternal(nic)) {
                                 resolvers = resolvers.concat(
                                     ctx.externalNetworkResolvers);
                             } else {
@@ -252,7 +253,7 @@ function checkCoreVmInstancesResolvers(arg, cb) {
                         });
 
                         if (unknownNicTag) {
-                            arg.progress('Skip VM %s (%s): unknown NIC tag %s',
+                            arg.progress('Skip VM %s (%s): unknown NIC %s',
                                 vm.uuid, vm.alias, unknownNicTag);
                             nextVm();
                             return;
diff --git a/package.json b/package.json
index b5b4ea0..2608504 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.24.2",
+  "version": "1.24.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -27,6 +27,7 @@
     "strsplit": "1.0.0",
     "tabula": "1.9.0",
     "tape": "3.5.0",
+    "triton-netconfig": "1.0.0",
     "ufds": "1.3.0",
     "urclient": "1.2.0",
     "vasync": "^1.6.4",
diff --git a/test/experimental.test.js b/test/experimental.test.js
index 3a1d10b..8aab9aa 100644
--- a/test/experimental.test.js
+++ b/test/experimental.test.js
@@ -129,7 +129,7 @@ test('sdcadm experimental update-agents --force --latest --yes', function (t) {
         t.ok(stdout.match('Finding servers to update'));
         t.ok(stdout.match('This update will make the following changes'));
         t.ok(stdout.match('Starting agentsshar update'));
-        t.ok(stdout.match('Successfully updated agents'));
+        t.ok(stdout.match('(0 failures, 0 excluded)'));
         t.end();
     });
 });
@@ -150,7 +150,7 @@ test('sdcadm experimental update-agents <img uuid>', function (t) {
         t.ok(stdout.match('Finding servers to update'));
         t.ok(stdout.match('This update will make the following changes'));
         t.ok(stdout.match('Starting agentsshar update'));
-        t.ok(stdout.match('Successfully updated agents'));
+        t.ok(stdout.match('(0 failures, 0 excluded)'));
         t.end();
     });
 });
