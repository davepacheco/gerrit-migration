From d09721f7446ca0fcc46a38cae275f18d560585c7 Mon Sep 17 00:00:00 2001
From: Ryan Zezeski <rpz@joyent.com>
Date: Thu, 25 Aug 2016 17:15:31 -0400
Subject: [PATCH] OS-3831 lxbrand /proc/cmdline should reflect zone boot
 arguments Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com> Reviewed by:
 Patrick Mooney <patrick.mooney@joyent.com> Approved by: Jerry Jelinek
 <jerry.jelinek@joyent.com>

---
 usr/src/cmd/zoneadmd/zoneadmd.c               | 31 +++++++++++++------
 .../uts/common/brand/lx/procfs/lx_prvnops.c   | 13 +++++++-
 2 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/usr/src/cmd/zoneadmd/zoneadmd.c b/usr/src/cmd/zoneadmd/zoneadmd.c
index 0a714fda38..576b6e8c8f 100644
--- a/usr/src/cmd/zoneadmd/zoneadmd.c
+++ b/usr/src/cmd/zoneadmd/zoneadmd.c
@@ -22,7 +22,7 @@
 /*
  * Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
  * Copyright 2014 Nexenta Systems, Inc. All rights reserved.
- * Copyright 2015, Joyent, Inc. All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
@@ -265,9 +265,20 @@ zerror(zlog_t *zlogp, boolean_t use_strerror, const char *fmt, ...)
 }
 
 /*
- * Since Solaris boot arguments are getopt(3c) compatible (see kernel(1m)), we
+ * Append src to dest, modifying dest in the process. Prefix src with
+ * a space character if dest is a non-empty string.
+ */
+static void
+strnappend(char *dest, size_t n, const char *src)
+{
+	(void) snprintf(dest, n, "%s%s%s", dest,
+	    dest[0] == '\0' ? "" : " ", src);
+}
+
+/*
+ * Since illumos boot arguments are getopt(3c) compatible (see kernel(1m)), we
  * put the arguments into an argv style array, use getopt to process them,
- * and put the resultant argument string back into outargs. Non-Solaris brands
+ * and put the resultant argument string back into outargs. Non-native brands
  * may support alternate forms of boot arguments so we must handle that as well.
  *
  * During the filtering, we pull out any arguments which are truly "boot"
@@ -287,6 +298,7 @@ filter_bootargs(zlog_t *zlogp, const char *inargs, char *outargs,
 	char *arg, *lasts, **argv = NULL, **argv_save;
 	char zonecfg_args[BOOTARGS_MAX];
 	char scratchargs[BOOTARGS_MAX], *sargs;
+	char scratchopt[3];
 	char c;
 
 	bzero(outargs, BOOTARGS_MAX);
@@ -383,8 +395,11 @@ filter_bootargs(zlog_t *zlogp, const char *inargs, char *outargs,
 		case 'm':
 		case 's':
 			/* These pass through unmolested */
-			(void) snprintf(outargs, BOOTARGS_MAX,
-			    "%s -%c %s ", outargs, c, optarg ? optarg : "");
+			(void) snprintf(scratchopt, sizeof (scratchopt),
+			    "-%c", c);
+			strnappend(outargs, BOOTARGS_MAX, scratchopt);
+			if (optarg != NULL)
+				strnappend(outargs, BOOTARGS_MAX, optarg);
 			break;
 		case '?':
 			/*
@@ -393,8 +408,7 @@ filter_bootargs(zlog_t *zlogp, const char *inargs, char *outargs,
 			 * unknown string here so that we correctly handle
 			 * unknown long options (e.g. --debug).
 			 */
-			(void) snprintf(outargs, BOOTARGS_MAX,
-			    "%s %s", outargs, argv[optind - 1]);
+			strnappend(outargs, BOOTARGS_MAX, argv[optind - 1]);
 			break;
 		}
 	}
@@ -408,8 +422,7 @@ filter_bootargs(zlog_t *zlogp, const char *inargs, char *outargs,
 	 * any of our known options (-ifms) to preceed the brand-specific ones.
 	 */
 	while (optind < argc) {
-		(void) snprintf(outargs, BOOTARGS_MAX, "%s %s", outargs,
-		    argv[optind]);
+		strnappend(outargs, BOOTARGS_MAX, argv[optind]);
 		optind++;
 	}
 
diff --git a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
index e991082539..7e56d3322b 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
+++ b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
@@ -158,6 +158,7 @@ static int lxpr_readdir_task_tid_dir(lxpr_node_t *, uio_t *, int *);
 static void lxpr_read_invalid(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_empty(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_cgroups(lxpr_node_t *, lxpr_uiobuf_t *);
+static void lxpr_read_cmdline(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_cpuinfo(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_devices(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_diskstats(lxpr_node_t *, lxpr_uiobuf_t *);
@@ -763,7 +764,7 @@ static void (*lxpr_read_function[LXPR_NFILES])() = {
 	lxpr_read_isdir,		/* /proc/<pid>/task/<tid>/fd	*/
 	lxpr_read_fd,			/* /proc/<pid>/task/<tid>/fd/nn	*/
 	lxpr_read_cgroups,		/* /proc/cgroups	*/
-	lxpr_read_empty,		/* /proc/cmdline	*/
+	lxpr_read_cmdline,		/* /proc/cmdline	*/
 	lxpr_read_cpuinfo,		/* /proc/cpuinfo	*/
 	lxpr_read_devices,		/* /proc/devices	*/
 	lxpr_read_diskstats,		/* /proc/diskstats	*/
@@ -4988,6 +4989,16 @@ lxpr_read_cgroups(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	 */
 }
 
+/*
+ * Report the zone boot arguments.
+ */
+static void
+lxpr_read_cmdline(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
+{
+	zone_t *zone = LXPTOZ(lxpnp);
+	lxpr_uiobuf_printf(uiobuf, "%s\n", zone->zone_bootargs);
+}
+
 
 typedef enum {
 	LXCS_ALWAYS = 0,
-- 
2.21.0

