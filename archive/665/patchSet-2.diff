From 9ea03b4041f67afa88e722b93f21f9a693792091 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Fri, 14 Oct 2016 01:02:34 +1300
Subject: [PATCH] DAPI-328: DAPI should score platform images based on
 normalized date weight Reviewed by: Pedro P. Candel <pedro@joyent.com>

---
 lib/algorithms/score-current-platform.js      |  31 +---
 lib/scorers.js                                |  71 +++++++-
 .../algorithms/score-current-platform.test.js |  51 +++---
 test/scorers.test.js                          | 155 +++++++++++++++++-
 4 files changed, 257 insertions(+), 51 deletions(-)

diff --git a/lib/algorithms/score-current-platform.js b/lib/algorithms/score-current-platform.js
index c7ce7a5..2c9221f 100644
--- a/lib/algorithms/score-current-platform.js
+++ b/lib/algorithms/score-current-platform.js
@@ -11,22 +11,18 @@
 /*
  * Increase the scores of servers based on how old their platform version is.
  *
- * Servers are placed into week-wide buckets, and all servers in the
- * same bucket get the same score increase.
- *
  * The range of scores that can be added to servers is determined by
  * weight_current_platform (between 0 and abs(weight)). A positive weight will
- * cause servers with more recent platform versionx to receive higher scores.
+ * cause servers with more recent platform versions to receive higher scores.
  * A negative weight_current_platform does the opposite: servers with older
  * platform versions receive higher score increases.
  */
 
-var score = require('../scorers').linearBuckets;
+var score = require('../scorers').normalize;
 var f = require('util').format;
 
 
 var PLATFORM_RE = /^(\d{4})(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)Z$/;
-var WEEK = 7 * 24 * 60 * 60 * 1000; // in ms
 
 
 function
@@ -39,32 +35,15 @@ scoreCurrentPlatform(log, servers, constraints)
 		return ([servers, reasons]);
 	}
 
-	// slice() to create a shallow copy
-	var sorted = servers.slice(0).sort(function (a, b) {
-		return (a.current_platform > b.current_platform);
-	}).reverse();
-
-	var buckets = [];
-	var bucket = [];
-	var limit = intDate(sorted[0].current_platform) - WEEK;
-	sorted.forEach(function (server) {
+	var tuples = servers.map(function (server) {
 		var currentPlatform = intDate(server.current_platform);
-		if (currentPlatform > limit) {
-			bucket.push(server);
-		} else {
-			buckets.push(bucket);
-			bucket = [server];
-			limit = currentPlatform - WEEK;
-		}
+		return ([server, currentPlatform]);
 	});
-	buckets.push(bucket);
 
 	var weight = +constraints.defaults.weight_current_platform;
-	if (weight < 0)
-		buckets.reverse();
 
 	// add scores to servers
-	score(log, buckets, Math.abs(weight), reasons);
+	score(log, tuples, weight, reasons);
 
 	return ([servers, reasons]);
 }
diff --git a/lib/scorers.js b/lib/scorers.js
index cbf3566..7ca03bf 100644
--- a/lib/scorers.js
+++ b/lib/scorers.js
@@ -8,7 +8,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-var assert = require('assert');
+var assert = require('assert-plus');
 
 
 /*
@@ -43,7 +43,7 @@ linear(log, servers, weight, reasons)
 
 	for (var i = 0; i !== servers.length; i++) {
 		var server = servers[i];
-		assert.equal(typeof (server.score), 'number');
+		assert.number(server.score);
 
 		var score = (servers.length - 1 - i) * normDelta * weight;
 		server.score += score;
@@ -82,7 +82,7 @@ linearBuckets(log, buckets, weight, reasons)
 			score = weight;
 
 		buckets[i].forEach(function (server) {
-			assert.equal(typeof (server.score), 'number');
+			assert.number(server.score);
 			server.score += score;
 
 			var msg = 'increased score by ' + score.toFixed(2) +
@@ -99,7 +99,70 @@ linearBuckets(log, buckets, weight, reasons)
 }
 
 
+/*
+ * A scoring function that normalizes raw numbers associated with each
+ * server into the range [0, 1], then multiplies by the weight to produce
+ * the final score delta.
+ *
+ * The unnormalizedServers arg is an array of tuples, where the first value
+ * of each tuple is a server, and the second value is the raw score to normalize
+ * for that server and alter the server's score.
+ */
+
+function
+normalize(log, unnormalizedServers, weight, reasons)
+{
+	if (unnormalizedServers.length === 0)
+		return ([]);
+
+	reasons = reasons || {};
+
+	var unnormalized = unnormalizedServers.map(function (tuple) {
+		return (tuple[1]);
+	});
+
+	var min = Math.min.apply(null, unnormalized);
+	var max = Math.max.apply(null, unnormalized);
+	var scale = 1/(max - min) * Math.abs(weight);
+
+	function nop() {
+		return (weight);
+	}
+
+	function norm(raw) {
+		var interVal = (weight > 0) ? (raw - min) : (max - raw);
+		return (interVal * scale);
+	}
+
+	var calcWeight = (min === max) ? nop : norm;
+
+	var servers = unnormalizedServers.map(function (tuple) {
+		assert.array(tuple);
+
+		var server   = tuple[0];
+		var rawScore = tuple[1];
+		assert.object(server);
+		assert.number(server.score);
+		assert.number(rawScore);
+
+		var delta = calcWeight(rawScore);
+		server.score += delta;
+
+		var msg = 'increased score by ' + delta.toFixed(2) +
+			' to ' + server.score.toFixed(2);
+		reasons[server.uuid] = msg;
+		log.trace('Server ', server.uuid, msg);
+
+		return (server);
+	});
+
+	return (servers);
+}
+
+
+
 module.exports = {
 	linear: linear,
-	linearBuckets: linearBuckets
+	linearBuckets: linearBuckets,
+	normalize: normalize
 };
diff --git a/test/algorithms/score-current-platform.test.js b/test/algorithms/score-current-platform.test.js
index 9c4ef2b..4f9693a 100644
--- a/test/algorithms/score-current-platform.test.js
+++ b/test/algorithms/score-current-platform.test.js
@@ -47,24 +47,24 @@ var SERVERS = [ {
 
 test('scoreCurrentPlatform()', function (t) {
 	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 4;
-	expectedServers[1].score = 4;
-	expectedServers[2].score = 4;
-	expectedServers[3].score = 3;
-	expectedServers[4].score = 2;
+	expectedServers[0].score = 3.9999999999999996;
+	expectedServers[1].score = 3.9918032786885242;
+	expectedServers[2].score = 3.9672131147540983;
+	expectedServers[3].score = 3.8196721311475406;
+	expectedServers[4].score = 3.762295081967213;
 	expectedServers[5].score = 1;
 
 	var expectedReasons = {
 		'8973fb43-29da-474c-97b8-7c513c602a24':
 			'increased score by 3.00 to 4.00',
 		'cc8c8619-21a8-403f-a4db-3061b38d5881':
-			'increased score by 3.00 to 4.00',
+			'increased score by 2.99 to 3.99',
 		'd68d4508-b153-4f3c-8121-b84c23848dcb':
-			'increased score by 3.00 to 4.00',
+			'increased score by 2.97 to 3.97',
 		'64664347-aae4-49a9-b064-a144e142a8ed':
-			'increased score by 2.00 to 3.00',
+			'increased score by 2.82 to 3.82',
 		'b8ed3526-13a9-4da2-a6a8-06b142c51b77':
-			'increased score by 1.00 to 2.00',
+			'increased score by 2.76 to 3.76',
 		'682de1bd-b409-4c51-affc-c21ad3ba8d81':
 			'increased score by 0.00 to 1.00'
 	};
@@ -77,7 +77,7 @@ test('scoreCurrentPlatform()', function (t) {
 	var scoredServers = results[0];
 	var reasons = results[1];
 
-	t.deepEqual(scoredServers, expectedServers);
+	t.deepEqual(fixedScore(scoredServers), fixedScore(expectedServers));
 	t.deepEqual(reasons, expectedReasons);
 
 	t.end();
@@ -87,23 +87,23 @@ test('scoreCurrentPlatform()', function (t) {
 test('scoreCurrentPlatform() with negative weight', function (t) {
 	var expectedServers = clone(SERVERS);
 	expectedServers[0].score = 1;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 1;
-	expectedServers[3].score = 2;
-	expectedServers[4].score = 3;
-	expectedServers[5].score = 4;
+	expectedServers[1].score = 1.0081967213114753;
+	expectedServers[2].score = 1.0327868852459017;
+	expectedServers[3].score = 1.180327868852459;
+	expectedServers[4].score = 1.2377049180327868;
+	expectedServers[5].score = 3.9999999999999996;
 
 	var expectedReasons = {
 		'8973fb43-29da-474c-97b8-7c513c602a24':
 			'increased score by 0.00 to 1.00',
 		'cc8c8619-21a8-403f-a4db-3061b38d5881':
-			'increased score by 0.00 to 1.00',
+			'increased score by 0.01 to 1.01',
 		'd68d4508-b153-4f3c-8121-b84c23848dcb':
-			'increased score by 0.00 to 1.00',
+			'increased score by 0.03 to 1.03',
 		'64664347-aae4-49a9-b064-a144e142a8ed':
-			'increased score by 1.00 to 2.00',
+			'increased score by 0.18 to 1.18',
 		'b8ed3526-13a9-4da2-a6a8-06b142c51b77':
-			'increased score by 2.00 to 3.00',
+			'increased score by 0.24 to 1.24',
 		'682de1bd-b409-4c51-affc-c21ad3ba8d81':
 			'increased score by 3.00 to 4.00'
 	};
@@ -116,7 +116,7 @@ test('scoreCurrentPlatform() with negative weight', function (t) {
 	var scoredServers = results[0];
 	var reasons = results[1];
 
-	t.deepEqual(scoredServers, expectedServers);
+	t.deepEqual(fixedScore(scoredServers), fixedScore(expectedServers));
 	t.deepEqual(reasons, expectedReasons);
 
 	t.end();
@@ -151,3 +151,14 @@ test('name', function (t) {
 	t.equal(typeof (scorer.name), 'string');
 	t.end();
 });
+
+
+// Comparing floats is troublesome, so we convert the float scores
+// to fixed strings. Not ideal, but works.
+function fixedScore(servers) {
+	servers.forEach(function (server) {
+		server.score = server.score.toFixed(5);
+	});
+
+	return (servers);
+}
diff --git a/test/scorers.test.js b/test/scorers.test.js
index 95933f5..35eac44 100644
--- a/test/scorers.test.js
+++ b/test/scorers.test.js
@@ -100,7 +100,6 @@ test('linear 3', function (t) {
 });
 
 
-
 test('linear 4', function (t) {
 	var score = scorers.linear;
 	var reasons = {};
@@ -122,6 +121,18 @@ test('linear 4', function (t) {
 });
 
 
+test('linear 5', function (t) {
+	var score = scorers.linear;
+	var reasons = {};
+
+	var scores = score(LOG, [], 2, reasons);
+	t.deepEqual(scores, []);
+	t.deepEqual(reasons, {});
+
+	t.end();
+});
+
+
 test('linearBuckets 1', function (t) {
 	var score = scorers.linearBuckets;
 	var reasons = {};
@@ -206,3 +217,145 @@ test('linearBuckets 4', function (t) {
 
 	t.end();
 });
+
+
+test('linearBuckets 5', function (t) {
+	var score = scorers.linearBuckets;
+	var reasons = {};
+
+	var scores = score(LOG, [], 2, reasons);
+	t.deepEqual(scores, []);
+	t.deepEqual(reasons, {});
+
+	t.end();
+});
+
+
+test('normalize 1', function (t) {
+	var score = scorers.normalize;
+	var reasons = {};
+
+	var scores = score(LOG, [
+		/* BEGIN JSSTYLED */
+		[ { score: 1, uuid: '2bc943d3-1192-43d9-842a-38c20f556aea' }, 10],
+		[ { score: 1, uuid: '12caaf31-205f-4d2e-8269-945dee4ee7e5' }, 10],
+		[ { score: 1, uuid: 'e256bad8-8055-4754-b7ec-d308baca5fa9' }, -5]
+		/* END JSSTYLED */
+	], 2, reasons);
+
+	t.deepEqual(scores, [
+		{ score: 3, uuid: '2bc943d3-1192-43d9-842a-38c20f556aea' },
+		{ score: 3, uuid: '12caaf31-205f-4d2e-8269-945dee4ee7e5' },
+		{ score: 1, uuid: 'e256bad8-8055-4754-b7ec-d308baca5fa9' }
+	]);
+
+	t.deepEqual(reasons, {
+		'2bc943d3-1192-43d9-842a-38c20f556aea':
+			'increased score by 2.00 to 3.00',
+		'12caaf31-205f-4d2e-8269-945dee4ee7e5':
+			'increased score by 2.00 to 3.00',
+		'e256bad8-8055-4754-b7ec-d308baca5fa9':
+			'increased score by 0.00 to 1.00'
+	});
+
+	t.end();
+});
+
+
+test('normalize 2', function (t) {
+	var score = scorers.normalize;
+	var reasons = {};
+
+	var scores = score(LOG, [
+		/* BEGIN JSSTYLED */
+		[ { score: 1, uuid: '2bc943d3-1192-43d9-842a-38c20f556aea' }, 10],
+		[ { score: 1, uuid: '12caaf31-205f-4d2e-8269-945dee4ee7e5' }, 10],
+		[ { score: 1, uuid: 'e256bad8-8055-4754-b7ec-d308baca5fa9' }, -5]
+		/* END JSSTYLED */
+	], -2, reasons);
+
+	t.deepEqual(scores, [
+		{ score: 1, uuid: '2bc943d3-1192-43d9-842a-38c20f556aea' },
+		{ score: 1, uuid: '12caaf31-205f-4d2e-8269-945dee4ee7e5' },
+		{ score: 3, uuid: 'e256bad8-8055-4754-b7ec-d308baca5fa9' }
+	]);
+
+	t.deepEqual(reasons, {
+		'2bc943d3-1192-43d9-842a-38c20f556aea':
+			'increased score by 0.00 to 1.00',
+		'12caaf31-205f-4d2e-8269-945dee4ee7e5':
+			'increased score by 0.00 to 1.00',
+		'e256bad8-8055-4754-b7ec-d308baca5fa9':
+			'increased score by 2.00 to 3.00'
+	});
+
+	t.end();
+});
+
+test('normalize 3', function (t) {
+	var score = scorers.normalize;
+	var reasons = {};
+
+	var scores = score(LOG, [
+		/* BEGIN JSSTYLED */
+		[ { score: 1, uuid: 'a04eb2a2-be1c-45ff-ae2b-4b60210b82c8' }, 2 ],
+		[ { score: 1, uuid: 'ee7436a3-5b7c-4279-9138-283e7d03e497' }, 1.5 ],
+		[ { score: 1, uuid: '48f3b143-0ba1-4894-8c09-26ff88ed8d31' }, 0 ]
+		/* END JSSTYLED */
+	], 3, reasons);
+
+	t.deepEqual(scores, [
+		{ score: 4,    uuid: 'a04eb2a2-be1c-45ff-ae2b-4b60210b82c8' },
+		{ score: 3.25, uuid: 'ee7436a3-5b7c-4279-9138-283e7d03e497' },
+		{ score: 1,    uuid: '48f3b143-0ba1-4894-8c09-26ff88ed8d31' }
+	]);
+
+	t.deepEqual(reasons, {
+		'a04eb2a2-be1c-45ff-ae2b-4b60210b82c8':
+			'increased score by 3.00 to 4.00',
+		'ee7436a3-5b7c-4279-9138-283e7d03e497':
+			'increased score by 2.25 to 3.25',
+		'48f3b143-0ba1-4894-8c09-26ff88ed8d31':
+			'increased score by 0.00 to 1.00'
+	});
+
+	t.end();
+});
+
+
+test('normalize 4', function (t) {
+	var score = scorers.normalize;
+	var reasons = {};
+
+	var scores = score(LOG, [
+		/* JSSTYLED */
+		[ { score: 1, uuid: 'f56663e5-0187-47e9-9f35-463a2411e60b' }, 1],
+		[ { score: 1, uuid: '3caf33e7-e3e2-422d-bfbb-f0a6198e7856' }, 1]
+	], 2, reasons);
+
+	t.deepEqual(scores, [
+		{ score: 3, uuid: 'f56663e5-0187-47e9-9f35-463a2411e60b' },
+		{ score: 3, uuid: '3caf33e7-e3e2-422d-bfbb-f0a6198e7856' }
+	]);
+
+	t.deepEqual(reasons, {
+		'f56663e5-0187-47e9-9f35-463a2411e60b':
+			'increased score by 2.00 to 3.00',
+		'3caf33e7-e3e2-422d-bfbb-f0a6198e7856':
+			'increased score by 2.00 to 3.00'
+	});
+
+	t.end();
+});
+
+
+test('normalize 5', function (t) {
+	var score = scorers.normalize;
+	var reasons = {};
+
+	var scores = score(LOG, [], 2, reasons);
+	t.deepEqual(scores, []);
+	t.deepEqual(reasons, {});
+
+	t.end();
+});
-- 
2.21.0

