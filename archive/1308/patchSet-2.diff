commit 9e4014b09a7c4c5bf05442dece3a4d8c7ea51c13 (refs/changes/08/1308/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-01-27T23:46:50+00:00 (2 years, 8 months ago)
    
    FWAPI-271 Invalid subnets in firewall rules should be rejected

diff --git a/lib/rule.js b/lib/rule.js
index 8fdace4..974d925 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -362,6 +362,7 @@ function Rule(data, app) {
         // Only require the global flag when coming in via the API:
         mod_rule.FwRule.call(this, data, {
             maxVersion: app.config.fwrule_version,
+            enforceSubnetMask: true,
             enforceGlobal: true
         });
     }
diff --git a/package.json b/package.json
index b37ce16..bd5dd63 100644
--- a/package.json
+++ b/package.json
@@ -21,7 +21,7 @@
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "extsprintf": "1.0.2",
     "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
-    "fwrule": "1.3.1",
+    "fwrule": "1.4.0",
     "jsprim": "1.3.1",
     "moray": "2.0.1",
     "moray-filter": "1.0.0",
diff --git a/test/integration/invalid.test.js b/test/integration/invalid.test.js
new file mode 100644
index 0000000..27872fa
--- /dev/null
+++ b/test/integration/invalid.test.js
@@ -0,0 +1,123 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+/*
+ * Tests for creating invalid rules.
+ */
+
+'use strict';
+
+var test = require('tape');
+var mod_err = require('../../lib/errors');
+var mod_rule = require('../lib/rule');
+var mod_uuid = require('node-uuid');
+
+
+// --- Globals
+
+var OWNER = mod_uuid.v4();
+
+
+// --- Helpers
+
+
+function createPayload(ruleTxt) {
+    return {
+        owner_uuid: OWNER,
+        enabled: true,
+        rule: ruleTxt
+    };
+}
+
+
+// --- Tests
+
+[
+    [ 'missing owner_uuid',
+      { rule: 'FROM tag a TO tag b ALLOW udp port 53', enabled: true },
+      [ mod_err.invalidParam('owner_uuid', 'owner_uuid required') ] ],
+
+    [ 'bad enabled value',
+      {
+          rule: 'FROM tag a TO tag b ALLOW udp port 53',
+          owner_uuid: OWNER,
+          enabled: 'hello'
+      },
+      [ mod_err.invalidParam('enabled', 'enabled must be true or false') ] ],
+
+    [ 'bad global value',
+      {
+          rule: 'FROM tag a TO tag b ALLOW udp port 53',
+          enabled: true,
+          global: 'foobar'
+      },
+      [ mod_err.invalidParam('global', 'global must be true or false') ] ],
+
+    [ 'bad IPv4 subnet: bits to right of mask',
+      createPayload('FROM tag foo TO subnet 10.8.0.0/5 ALLOW udp port 53'),
+      [ mod_err.invalidParam('rule',
+          'Subnet "10.8.0.0/5" is invalid (bits set to right of mask)') ] ],
+
+    [ 'bad IPv6 subnet: bits to right of mask',
+      createPayload('FROM tag foo TO subnet fd00::/2 ALLOW udp port 53'),
+      [ mod_err.invalidParam('rule',
+          'Subnet "fd00::/2" is invalid (bits set to right of mask)') ] ],
+
+    [ 'invalid port: too small',
+      createPayload('FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 0'),
+      [ mod_err.invalidParam('rule', 'Port number "0" is invalid') ] ],
+
+    [ 'invalid port: too big',
+      createPayload('FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 65537'),
+      [ mod_err.invalidParam('rule', 'Port number "65537" is invalid') ] ],
+
+    [ 'rule: bad ip target for ICMPv4',
+      createPayload('FROM all vms TO ip fd00::45 BLOCK ICMP TYPE 8'),
+      [ mod_err.invalidParam('rule',
+          'rule affects ICMPv4 but contains a non-IPv4 address') ] ],
+
+    [ 'rule: bad subnet target for ICMPv4',
+      createPayload('FROM all vms TO subnet fe80::/64 BLOCK ICMP TYPE 8'),
+      [ mod_err.invalidParam('rule',
+          'rule affects ICMPv4 but contains a non-IPv4 subnet') ] ],
+
+    [ 'rule: bad ip target for ICMPv6',
+      createPayload('FROM all vms TO ip 1.2.3.4 BLOCK ICMP6 TYPE 128'),
+      [ mod_err.invalidParam('rule',
+          'rule affects ICMPv6 but contains a non-IPv6 address') ] ],
+
+    [ 'rule: bad subnet target for ICMPv6',
+      createPayload('FROM all vms TO subnet 10.0.0.0/8 BLOCK ICMP6 TYPE 128'),
+      [ mod_err.invalidParam('rule',
+          'rule affects ICMPv6 but contains a non-IPv6 subnet') ] ],
+
+    [ 'rule: bad ICMP type',
+      createPayload('FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 260'),
+      [ mod_err.invalidParam('rule', 'ICMP type \"260\" is invalid') ] ]
+].forEach(function (cfg) {
+    test('Invalid rule: ' + cfg[0], function (t) {
+        mod_rule.create(t, {
+            rule: cfg[1],
+            expCode: 422,
+            expErr: {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: cfg[2]
+            }
+        });
+    });
+});
+
+
+
+// --- Teardown
+
+
+test('Cleanup any created rules', mod_rule.delAllCreated);
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 4d98ebc..9492690 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -257,19 +257,20 @@ function stopPG() {
  * Stops the test FWAPI server
  */
 function stopServer(t) {
-    if (!MULTI_SUITE_RUN) {
-        stopPG();
+    function done(err) {
+        if (!MULTI_SUITE_RUN) {
+            stopPG();
+        }
+        t.ifError(err, 'Server stop');
+        t.end();
     }
 
-    if (!SERVER) {
-        t.end();
+    if (SERVER === null) {
+        done();
         return;
     }
 
-    SERVER.close(function (err) {
-        t.ifError(err, 'Server stop');
-        t.end();
-    });
+    SERVER.close(done);
     SERVER = null;
 }
 
diff --git a/test/unit/wrap-integration.test.js b/test/unit/wrap-integration.test.js
index bbe1b63..c3268ce 100644
--- a/test/unit/wrap-integration.test.js
+++ b/test/unit/wrap-integration.test.js
@@ -40,6 +40,7 @@ test('setup', function (t) {
 
 require('../integration/get.test.js');
 require('../integration/global.test.js');
+require('../integration/invalid.test.js');
 require('../integration/list.test.js');
 require('../integration/resolve.test.js');
 require('../integration/update.test.js');
