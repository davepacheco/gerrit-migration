commit 0ba0221d3e9bf77e7f319c37ef36aea40405f5f8 (refs/changes/65/1665/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-03-22T20:02:47+01:00 (2 years, 7 months ago)
    
    TOOLS-1715 sdcadm: reprovisionRemote can timeout too easily

diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index e4c34d0..5fa9a30 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var path = require('path');
@@ -23,6 +23,7 @@ var common = require('../common');
 var errors = require('../errors'),
     InternalError = errors.InternalError,
     SDCClientError = errors.SDCClientError;
+var ur = require('../ur');
 
 
 
@@ -783,7 +784,9 @@ function disableVMRegistrarRemote(arg, callback) {
     });
 }
 
-// Reprovision through sdc-oneachnode
+/*
+ * Reprovision into any server via Ur command
+ */
 function reprovisionRemote(opts, callback) {
     common.assertStrictOptions('reprovisionRemote', opts, {
         server: 'uuid',
@@ -802,7 +805,10 @@ function reprovisionRemote(opts, callback) {
         server: opts.server
     });
 
-    opts.progress('Reprovisioning %s VM %s', opts.zonename, opts.server);
+    var sdcadm = opts.sdcadm;
+    var progress = opts.progress;
+
+    progress('Reprovisioning %s VM %s', opts.zonename, opts.server);
     log.trace('reprovision VM inst');
 
     /*
@@ -813,58 +819,41 @@ function reprovisionRemote(opts, callback) {
         image_uuid: opts.img.uuid
     }).replace(/'/g, '\'"\'"\'');
 
-    var child = spawn('/opt/smartdc/bin/sdc-oneachnode', [
-        '-n',
-        opts.server,
-        format('/usr/sbin/vmadm reprovision %s <<< \'%s\'', opts.zonename,
-            reproJSON)
-    ]);
-
-    /*
-     * Collect stdout and stderr from the child process.
-     */
-    var stdout = '';
-    var stderr = '';
-    child.stdout.setEncoding('utf8');
-    child.stdout.on('data', function (so) {
-        stdout += so;
-    });
-    child.stderr.setEncoding('utf8');
-    child.stderr.on('data', function (se) {
-        stderr += se;
-    });
+    ur.exec({
+        sdcadm: sdcadm,
+        server: opts.server,
+        connectTimeout: 120,
+        cmd: format('/usr/sbin/vmadm reprovision %s <<< \'%s\'',
+                opts.zonename, reproJSON)
+    }, function (execErr, result) {
+        if (execErr) {
+            callback(execErr);
+            return;
+        }
 
-    child.on('close', function vmadmDone(code, signal) {
         log.debug({
             execResult: {
-                code: code,
-                signal: signal,
-                stdout: stdout,
-                stderr: stderr
+                code: result.exit_status,
+                stdout: result.stdout,
+                stderr: result.stderr
             }
         }, 'reprovisioned VM inst');
 
-        if (code === 0 && signal === null) {
-            /*
-             * Execution was successful.
-             */
+        if (result.exit_status === 0) {
             callback();
             return;
         }
 
-        /*
-         * Report the execution failure to our caller and take the
-         * reprovision failure lock.
-         */
         var msg = [
-            format('error reprovisioning VM %s: exit code %s, signal %s',
-                opts.zonename, code, signal),
+            format('error reprovisioning VM %s: exit code %s',
+                opts.zonename, result.exit_status),
             common.indent('stdout:', 4),
-            common.indent(stdout, 8),
+            common.indent(result.stdout.trim(), 8),
             common.indent('stderr:', 4),
-            common.indent(stderr, 8)
+            common.indent(result.stderr.trim(), 8)
         ].join('\n');
-        opts.sdcadm.reprovFailLock_Lock(msg, function (err) {
+
+        sdcadm.reprovFailLock_Lock(msg, function (err) {
             if (err) {
                 log.error(err, 'reprovFailLock_Lock failure');
             }
diff --git a/lib/ur.js b/lib/ur.js
index fbffb94..a81348d 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -66,8 +66,8 @@ function execOnAllNodes(opts, cb) {
  *      - cmd {String} The command/script to run.
  *      - server {UUID} The UUID of the server on which to run.
  *      - log {Bunyan Logger} Optional.
- *      - connectTimeout {Number} Optional. Default 5s.
  *      - execTimeout {Number} Optional. Default 30s.
+ *      - env {Object} Optional. Default '{}'.
  * @param cb {Function} `function (err, result)`
  */
 function exec(opts, cb) {
@@ -76,21 +76,26 @@ function exec(opts, cb) {
     assert.string(opts.cmd, 'opts.cmd');
     assert.string(opts.server, 'opts.server');
     assert.optionalObject(opts.log, 'opts.log');
-    assert.optionalNumber(opts.connectTimeout, 'opts.connectTimeout');
+    assert.optionalNumber(opts.execTimeout, 'opts.execTimeout');
+    assert.optionalObject(opts.env, 'opts.env');
     assert.func(cb, 'cb');
     var cb_ = once(cb);
 
     opts.sdcadm.getUrConnection(function (urErr, urClient) {
         if (urErr) {
-            cb_(urErr);
+            cb_(new errors.InternalError({
+                cause: urErr,
+                message: 'ur failure'
+            }));
             return;
         }
+        assert.object(urClient);
         urClient.exec({
             script: opts.cmd,
             server_uuid: opts.server,
             timeout: (opts.execTimeout === undefined ?
                 30 * 1000 : opts.execTimeout),
-            env: {}
+            env: (opts.execTimeout === undefined ? {} : opts.env)
         }, function (err, result) {
             if (err) {
                 cb_(err);
@@ -99,7 +104,9 @@ function exec(opts, cb) {
                     'error running "%s" on server "%s": %s',
                     opts.cmd, opts.server, result.stderr) }));
             } else {
-                cb_(null, result.stdout);
+                // Some commands need more than just STDOUT, and those already
+                // using this function before were careless about second arg:
+                cb_(null, result);
             }
         });
     });
