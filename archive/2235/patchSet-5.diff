commit 663ff8b9cb66797fc47182ceb5cff02f2b3581ca (refs/changes/35/2235/5)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-07-19T16:06:05-07:00 (2 years, 3 months ago)
    
    AGENT-1075 CNAPI wait on a cn-agent task always fails with "socket hang up" if >1h

diff --git a/lib/app.js b/lib/app.js
index 9443dda..f9f58a6 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -29,6 +29,128 @@ var createHttpTaskDispatchFn
 var sdcconfig = require('./smartdc-config');
 var TaskAgent = require('./task_agent/task_agent');
 
+var DEFAULT_TASK_TIMEOUT_SECONDS = 60 * 60;
+
+var queueDefns = [
+    {
+        name: 'machine_creation',
+        tasks: [ 'machine_create', 'machine_reprovision' ]
+    },
+    {
+        name: 'image_import_tasks',
+        tasks: [ 'image_ensure_present' ]
+    },
+    {
+        name: 'server_tasks',
+        tasks: [
+            'server_overprovision_ratio'
+        ]
+    },
+    {
+        name: 'docker_tasks',
+        tasks: [
+            'docker_exec',
+            'docker_copy',
+            'docker_stats'
+        ]
+    },
+    {
+        name: 'docker_build_task',
+
+        /**
+         * `docker build` payloads, particularly those with a large range
+         * of exposed ports, tend to be HUGE and negatively impact the
+         * service when logged.
+         */
+        log_params: false,
+        tasks: [
+            'docker_build'
+        ]
+    },
+    {
+        name: 'server_nic_tasks',
+        tasks: [
+            'server_update_nics'
+        ]
+    },
+    {
+        name: 'agents_tasks',
+        maxConcurrent: 1,
+        tasks: [
+            'agent_install',
+            'shutdown_cn_agent_update'
+        ]
+    },
+    {
+        name: 'machine_tasks',
+        tasks: [
+            'machine_boot',
+            'machine_destroy',
+            'machine_kill',
+            'machine_proc',
+            'machine_reboot',
+            'machine_shutdown',
+            'machine_update',
+            'machine_update_nics',
+            'machine_screenshot',
+            'machine_create_snapshot',
+            'machine_rollback_snapshot',
+            'machine_delete_snapshot'
+        ]
+    },
+    {
+        name: 'machine_images',
+        tasks: [
+            'machine_create_image'
+        ]
+    }, { name: 'image_query',
+        logging: false,
+        tasks: [
+            'image_get'
+        ]
+    },
+    {
+        name: 'machine_query',
+        logging: false,
+        tasks: [
+            'machine_load',
+            'machine_info'
+        ]
+    },
+    {
+        name: 'zfs_tasks',
+        tasks: [
+            'zfs_create_dataset',
+            'zfs_destroy_dataset',
+            'zfs_rename_dataset',
+            'zfs_snapshot_dataset',
+            'zfs_rollback_dataset',
+            'zfs_clone_dataset',
+            'zfs_set_properties'
+        ]
+    },
+    {
+        name: 'zfs_query',
+        tasks: [
+            'zfs_get_properties',
+            'zfs_list_datasets',
+            'zfs_list_snapshots',
+            'zfs_list_pools'
+        ]
+    },
+    {
+        name: 'test_sleep',
+        tasks: [ 'sleep' ]
+    },
+    {
+        name: 'nop',
+        tasks: [ 'nop' ]
+    },
+    {
+        name: 'test_subtask',
+        tasks: [ 'test_subtask' ]
+    }
+];
 
 function App(options) {
     assert.object(options, 'options');
@@ -301,150 +423,13 @@ App.prototype.start = function () {
         log: self.log,
         logname: logname,
         agentserver: agentserver,
-        env: self.options.env
+        env: self.options.env,
+        timeoutSeconds: DEFAULT_TASK_TIMEOUT_SECONDS
     });
 
-    var queueDefns = [
-        {
-            name: 'machine_creation',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [ 'machine_create', 'machine_reprovision' ]
-        },
-        {
-            name: 'image_import_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [ 'image_ensure_present' ]
-        },
-        {
-            name: 'server_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'server_overprovision_ratio'
-            ]
-        },
-        {
-            name: 'docker_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'docker_exec',
-                'docker_copy',
-                'docker_stats'
-            ]
-        },
-        {
-            name: 'docker_build_task',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-
-            /**
-             * `docker build` payloads, particularly those with a large range
-             * of exposed ports, tend to be HUGE and negatively impact the
-             * service when logged.
-             */
-            log_params: false,
-            tasks: [
-                'docker_build'
-            ]
-        },
-        {
-            name: 'server_nic_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'server_update_nics'
-            ]
-        },
-        {
-            name: 'agents_tasks',
-            maxConcurrent: 1,
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'agent_install',
-                'shutdown_cn_agent_update'
-            ]
-        },
-        {
-            name: 'machine_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'machine_boot',
-                'machine_destroy',
-                'machine_kill',
-                'machine_proc',
-                'machine_reboot',
-                'machine_shutdown',
-                'machine_update',
-                'machine_update_nics',
-                'machine_screenshot',
-                'machine_create_snapshot',
-                'machine_rollback_snapshot',
-                'machine_delete_snapshot'
-            ]
-        },
-        {
-            name: 'machine_images',
-            expires: 60, // expire messages in this queue after a minute
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'machine_create_image'
-            ]
-        },
-        {
-            name: 'image_query',
-            expires: 60, // expire messages in this queue after a minute
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            logging: false,
-            tasks: [
-                'image_get'
-            ]
-        },
-        {
-            name: 'machine_query',
-            expires: 60, // expire messages in this queue after a minute
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            logging: false,
-            tasks: [
-                'machine_load',
-                'machine_info'
-            ]
-        },
-        {
-            name: 'zfs_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'zfs_create_dataset',
-                'zfs_destroy_dataset',
-                'zfs_rename_dataset',
-                'zfs_snapshot_dataset',
-                'zfs_rollback_dataset',
-                'zfs_clone_dataset',
-                'zfs_set_properties'
-            ]
-        },
-        {
-            name: 'zfs_query',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'zfs_get_properties',
-                'zfs_list_datasets',
-                'zfs_list_snapshots',
-                'zfs_list_pools'
-            ]
-        },
-        {
-            name: 'test_sleep',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [ 'sleep' ]
-        },
-        {
-            name: 'nop',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [ 'nop' ]
-        },
-        {
-            name: 'test_subtask',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [ 'test_subtask' ]
-        }
-    ];
+    for (var i = 0; i < queueDefns.length; i++) {
+        queueDefns[i].onhttpmsg = createHttpTaskDispatchFn(agent, taskspath);
+    }
 
     async.waterfall([
         function (cb) {
diff --git a/lib/server.js b/lib/server.js
index d88f5b9..6bc180d 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -64,13 +64,6 @@ AgentHttpServer.prototype.init = function () {
 
     self.log.info('cn-agent binding to IP address %s', self.bindip);
 
-    self.server.use(function (req, res, next) {
-        // Time requests out after an hour
-        req.connection.setTimeout(3600 * 1000);
-        res.connection.setTimeout(3600 * 1000);
-        next();
-    });
-
     self.server.use(restify.requestLogger());
     self.server.use(restify.acceptParser(self.server.acceptable));
     self.server.use(restify.authorizationParser());
diff --git a/lib/task_agent/task_agent.js b/lib/task_agent/task_agent.js
index 2377d1a..84a4625 100644
--- a/lib/task_agent/task_agent.js
+++ b/lib/task_agent/task_agent.js
@@ -33,6 +33,7 @@ function TaskAgent(opts) {
     assert.string(opts.taskspath, 'opts.taskspath');
     assert.object(opts.agentserver, 'opts.agentserver');
     assert.optionalObject(opts.env, 'opts.env');
+    assert.number(opts.timeoutSeconds, 'opts.timeoutSeconds');
 
     this.tasklogdir = opts.tasklogdir;
     this.taskspath = opts.taskspath;
@@ -51,11 +52,14 @@ function TaskAgent(opts) {
         this.taskspath = path.join(__dirname, '..', 'tasks');
     }
     this.uuid = opts.uuid;
+    this.timeoutSeconds = opts.timeoutSeconds;
+
     this.runner = new TaskRunner({
         log: this.log,
         logdir: this.tasklogdir,
         taskspath: this.taskspath,
-        env: this.env
+        env: this.env,
+        timeoutSeconds: this.timeoutSeconds
     });
 }
 
diff --git a/lib/task_agent/task_runner.js b/lib/task_agent/task_runner.js
index 57c688a..325106b 100644
--- a/lib/task_agent/task_runner.js
+++ b/lib/task_agent/task_runner.js
@@ -34,6 +34,7 @@ function TaskRunner(options) {
     this.logdir = options.logdir;
     this.log = options.log;
     this.env = options.env;
+    this.timeoutSeconds = options.timeoutSeconds;
 
     if (!fs.existsSync(this.logdir)) {
         mkdirp.sync(this.logdir, parseInt('0755', 8));
@@ -89,6 +90,7 @@ TaskRunner.prototype.dispatch = function (req) {
     env.req_id = req.req_id;
     env.task = req.task;
     env.EXPERIMENTAL_VMJS_TRACING = 'true';
+    var startTime = new Date();
 
     var child = fork(
         __dirname + '/task_worker.js',
@@ -96,6 +98,20 @@ TaskRunner.prototype.dispatch = function (req) {
         { env: env });
 
     var pid = child.pid;
+
+    setTimeout(onTimeout, self.timeoutSeconds * 1000);
+
+    function onTimeout() {
+        child.kill();
+
+        var timeoutMsg = sprintf(
+                'child task process timed out after %s seconds',
+                ((new Date()) - startTime) / 1000);
+        child.emit('event', 'error', { error: timeoutMsg });
+        child.emit('event', 'finish', {});
+        child.emit('finish');
+    }
+
     // Reformat logname here so we can log.info 'Child logging to %s...'
     var logname = sprintf(
         '%s-%s-%s.log',
