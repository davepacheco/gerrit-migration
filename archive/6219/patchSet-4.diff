From acb7cbf3192a7b1beb4dbfcfb1923fa8277a46af Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 9 May 2019 19:47:59 +0000
Subject: [PATCH] TRITON-1303 net-agent is hitting the refreshments a bit too
 hard TRITON-1316 net-agent should remove the NIC locally when updating a NIC
 returns 404 TRITON-1395 net-agent crashing with "Invalid FSM transition:
 refresh => release" TRITON-1206 net-agent crashing with "Invalid FSM
 transition: refresh => stopped"

---
 lib/aggr-fsm.js   |  95 +++++++++++------------
 lib/inst-fsm.js   |  34 ++++++++
 lib/net-agent.js  |  27 ++++---
 lib/net-fsm.js    |  13 +++-
 lib/nic-fsm.js    | 194 +++++++++++++++++++++++++++++++++-------------
 lib/server-fsm.js |   2 +
 6 files changed, 245 insertions(+), 120 deletions(-)

diff --git a/lib/aggr-fsm.js b/lib/aggr-fsm.js
index 9e3eac4..835196f 100644
--- a/lib/aggr-fsm.js
+++ b/lib/aggr-fsm.js
@@ -47,34 +47,37 @@ function getDifferences(fields, cur, old) {
  * The state machine looks like the following (note that retries aren't
  * depicted here, but are loops back into the same state usually).
  *
- *                       +---------+
- *                       | create  | -------------------------+
- *                       +---------+                          |
- *                 404 on 1st ^                               |
- *                    refresh |    setLocal()                 |
- *       +------+        +---------+ -----> +--------+        |
- *       | init | -----> | refresh |        | update |        |
- *       +------+        +---------+   +--- +--------+        |
- *                        |   ^        |         |            |
- *           NAPI 404 for |   |        |         |            |
- *           existing NIC |   |        |         |            |
- *       +---------+      |   |        |         |            |
- *       | remove  | <----+   |        |         |            |
- *       +---------+          |        |         |            |
- *            |               |        |         |            |
- *            v               |        |         v            |
- *       +---------+     +---------+   |    +--------------+  |
- *       | stopped |     | waiting | <-+--- | update.local | -+
- *       +---------+     +---------+   |    +--------------+  |
- *            ^                        |                      |
- *            |          +---------+   +--- +--------------+  |
- *            +----<---- | release |        | update.napi  | -+
- *            |          +---------+        +--------------+  |
- *            |               ^                  |            |
- *            |               |     NAPI 404     |            |
- *            +----<--------- | -----------------+            |
- *                            |        releaseFrom()          |
- *                            +-------------------------------+
+ *                                           releaseFrom()
+ *                       +---------+ ----------------------------------+
+ *                       | create  |                                   |
+ *                       +---------+ --------------------+             |
+ *                 404 on 1st ^                          |             |
+ *                    refresh |                          v             |
+ *       +------+        +---------+ -->---+------> +--------+         |
+ *       | init | -----> | refresh |       |        | update |         |
+ *       +------+        +---------+       | +--<-- +--------+         |
+ *                        |   ^            | |           |             |
+ *           NAPI 404 for |   |            | |           |             |
+ *           existing agg |   |            | |           |             |
+ *       +---------+      |   |            | |           |             |
+ *  +--> | remove  | <----+   |            | |           |             |
+ *  |    +---------+          |            | |           |             |
+ *  |         |               |            | v           |             |
+ *  |         v               | called     | |           v             |
+ *  |    +---------+          | refresh()  | |   +--------------+      |
+ *  |    | stopped |          |            | +-- | update.local | -----+
+ *  |    +---------+          |            | |   +--------------+      |
+ *  |         ^               |     called | v           |             |
+ *  |         |               | setLocal() | |           v             |
+ *  |    +---------+     +---------+ -->---+ |   +--------------+      |
+ *  |    | release | <-- | waiting |         |   | update.napi  |      |
+ *  |    +---------+     +---------+ <-------+-- +--------------+ -->--+
+ *  |         ^                                          |             |
+ *  |         |                             NAPI 404 for |             |
+ *  |         |                             existing agg |             |
+ *  +---------|------------------------------------------+             |
+ *            |                                          releaseFrom() |
+ *            +--------------------------------------------------------+
  */
 function AggrFSM(opts) {
     assert.object(opts, 'opts');
@@ -129,6 +132,7 @@ AggrFSM.prototype.state_refresh = function (S) {
     S.validTransitions([
         'create',
         'refresh',
+        'release',
         'remove',
         'update'
     ]);
@@ -161,8 +165,6 @@ AggrFSM.prototype.state_refresh = function (S) {
         S.gotoState('update');
     }
 
-    self.log.info('Refreshing aggregation information');
-
     self.app.napi.getAggr(self.getId(), S.callback(afterGet));
 };
 
@@ -205,7 +207,7 @@ AggrFSM.prototype.state_create = function (S) {
 
         self.setRemote(aggr, res.headers['etag']);
 
-        S.gotoState('waiting');
+        S.gotoState('update');
     }
 
     self.log.info({ aggr: self.local }, 'Syncing local aggregation to NAPI');
@@ -273,13 +275,12 @@ AggrFSM.prototype.state_update.local = function (S) {
 
 AggrFSM.prototype.state_update.napi = function (S) {
     var self = this;
-    var updated = false;
 
     S.validTransitions([
         'release',
+        'remove',
         'update',
         'update.napi',
-        'stopped',
         'waiting'
     ]);
 
@@ -290,14 +291,6 @@ AggrFSM.prototype.state_update.napi = function (S) {
         return;
     }
 
-    S.on(this, 'setAsserted', function () {
-        /*
-         * We wait to move to the "update" state again to ensure that our
-         * PUTs are always correctly ordered.
-         */
-        updated = true;
-    });
-
     S.on(this, 'releaseAsserted', function () {
         /*
          * It's okay for our DELETE to race with the PUT:
@@ -312,23 +305,21 @@ AggrFSM.prototype.state_update.napi = function (S) {
     function afterPut(err, aggr, _, res) {
         if (err) {
             if (err.statusCode === 404) {
-                self.log.warn('Aggregation no longer in NAPI, stopping');
-                S.gotoState('stopped');
+                self.log.warn('Aggregation no longer in NAPI, removing');
+                S.gotoState('remove');
                 return;
             }
 
-            self.log.error(err, 'Failed to update aggregation in NAPI');
-            S.gotoState('update.napi');
+            self.log.error(err,
+                'Failed to update aggregation in NAPI; ' +
+                'retrying in 5 seconds');
+            S.gotoStateTimeout(5000, 'update.napi');
             return;
         }
 
         self.setRemote(aggr, res.headers['etag']);
 
-        if (updated) {
-            S.gotoState('update');
-        } else {
-            S.gotoState('waiting');
-        }
+        S.gotoState('update');
     }
 
     self.log.info({ payload: remupdate }, 'Updating aggregation in NAPI');
@@ -438,6 +429,8 @@ AggrFSM.prototype.state_stopped = function (S) {
     this.local = null;
     this.remote = null;
     this.etag = undefined;
+
+    delete this.app.aggrs[this.name];
 };
 
 AggrFSM.prototype.getId = function () {
@@ -453,7 +446,7 @@ AggrFSM.prototype.setLocal = function (aggr) {
 };
 
 /**
- * Update our copy of the aggregation in NAPI (as well as it's etag if the
+ * Update our copy of the aggregation in NAPI (as well as its etag if the
  * NAPI instance is new enough to report it).
  */
 AggrFSM.prototype.setRemote = function (aggr, etag) {
diff --git a/lib/inst-fsm.js b/lib/inst-fsm.js
index b0d3c01..c706cdb 100644
--- a/lib/inst-fsm.js
+++ b/lib/inst-fsm.js
@@ -50,6 +50,26 @@ var UPDATE_STATES = [
  * and its NICs. When a VM's state changes we push any relevant info up to NAPI.
  * Alternatively, when NAPI state changes (new routes, for example), then we
  * need to take care of updating the VM to match.
+ *
+ * The state machine looks like the following (note that retries aren't
+ * depicted here, but are loops back into the same state usually).
+ *
+ *                           +-------------------------------------+
+ *                           |               update()              |
+ *                           v                                     |
+ *   +------+           +--------+          +-------------+ -------+
+ *   | init | --------> | update | -------> | update.wait |        |
+ *   +------+           +--------+          +-------------+ --+    |
+ *                           ^                     |          |    |
+ *                           |                     |          |    |
+ *                           | update()            |          |    |
+ *                           |                     v          |    |
+ * +--------+  remove() +---------+         +-------------+ --|----+
+ * | remove | <-------- | waiting | <------ |  update.vm  |   |
+ * +--------+           +---------+         +-------------+ --+
+ *     ^                                                      |
+ *     |                     remove()                         |
+ *     +------------------------------------------------------+
  */
 function InstanceFSM(opts) {
     assert.object(opts, 'opts');
@@ -369,4 +389,18 @@ InstanceFSM.prototype.removeNIC = function (mac, callback) {
     });
 };
 
+InstanceFSM.prototype.reboot = function (callback) {
+    var self = this;
+
+    self.log.info('Rebooting VM %s', self.uuid);
+
+    self.vmadm.reboot({
+        uuid: self.uuid,
+        log: self.log
+    }, function (err) {
+        self.refresh();
+        callback(err);
+    });
+};
+
 module.exports = InstanceFSM;
diff --git a/lib/net-agent.js b/lib/net-agent.js
index 4f328ae..511ed03 100644
--- a/lib/net-agent.js
+++ b/lib/net-agent.js
@@ -239,10 +239,11 @@ NetAgent.prototype.watchNet = function (uuid) {
 };
 
 NetAgent.prototype.releaseNet = function (network_uuid) {
-    if (mod_jsprim.hasKey(this.nets, network_uuid)) {
-        this.nets[network_uuid].stop();
-        delete this.nets[network_uuid];
+    if (!mod_jsprim.hasKey(this.nets, network_uuid)) {
+        return;
     }
+
+    this.nets[network_uuid].stop();
 };
 
 NetAgent.prototype.watchNic = function (mac) {
@@ -257,11 +258,15 @@ NetAgent.prototype.watchNic = function (mac) {
     return this.nics[mac];
 };
 
+/**
+ * Release a NIC in NAPI after it has been removed locally.
+ */
 NetAgent.prototype.releaseNic = function (mac, belongs_to_uuid) {
-    if (mod_jsprim.hasKey(this.nics, mac)) {
-        this.nics[mac].releaseFrom(belongs_to_uuid);
-        delete this.nics[mac];
+    if (!mod_jsprim.hasKey(this.nics, mac)) {
+        return;
     }
+
+    this.nics[mac].releaseFrom(belongs_to_uuid);
 };
 
 NetAgent.prototype.watchAggr = function (name) {
@@ -276,11 +281,15 @@ NetAgent.prototype.watchAggr = function (name) {
     return this.aggrs[name];
 };
 
+/**
+ * Release an aggregation in NAPI after it has been removed locally.
+ */
 NetAgent.prototype.releaseAggr = function (name, belongs_to_uuid) {
-    if (mod_jsprim.hasKey(this.aggrs, name)) {
-        this.aggrs[name].releaseFrom(belongs_to_uuid);
-        delete this.aggrs[name];
+    if (!mod_jsprim.hasKey(this.aggrs, name)) {
+        return;
     }
+
+    this.aggrs[name].releaseFrom(belongs_to_uuid);
 };
 
 NetAgent.prototype.state_init = function (S) {
diff --git a/lib/net-fsm.js b/lib/net-fsm.js
index ceb436c..f08e893 100644
--- a/lib/net-fsm.js
+++ b/lib/net-fsm.js
@@ -88,9 +88,12 @@ NetworkFSM.prototype.state_refresh = function (S) {
 
     S.validTransitions([
         'refresh',
+        'stopped',
         'waiting'
     ]);
 
+    S.gotoStateOn(self, 'stopAsserted', 'stopped');
+
     self.old = self.cur;
 
     function afterGet(err, net) {
@@ -101,18 +104,20 @@ NetworkFSM.prototype.state_refresh = function (S) {
                 return;
             }
 
-            S.gotoState('refresh');
+            self.log.error(err,
+                'Failed to refresh network information; ' +
+                'retrying in 5 seconds');
+            S.gotoStateTimeout(5000, 'refresh');
             return;
         }
 
         self.cur = net;
 
+        self.log.info('Refreshed network information');
+
         S.gotoState('waiting');
     }
 
-    S.gotoStateOn(self, 'stopAsserted', 'stopped');
-
-    self.log.info('Refreshing network information');
     self.app.napi.getNetwork(self.uuid, S.callback(afterGet));
 };
 
diff --git a/lib/nic-fsm.js b/lib/nic-fsm.js
index 18b1d1d..28116d7 100644
--- a/lib/nic-fsm.js
+++ b/lib/nic-fsm.js
@@ -104,39 +104,45 @@ function getDifferences(fields, cur, old) {
 
 /**
  * The NicFSM is responsible for tracking changes related to a single NIC,
- * located either on a VM or the CN's global zone.
+ * located either on a VM or the CN's global zone. When locally-determined
+ * fields (LOCAL_FIELDS) change locally, their new values are sent to NAPI.
+ * When remotely-determined values (REMOTE_FIELDS and VM_FIELDS) change, the
+ * local NIC is updated to match.
  *
  * The state machine looks like the following (note that retries aren't
  * depicted here, but are loops back into the same state usually).
  *
- *                       +---------+
- *                       | create  | --------------------------+
- *                       +---------+                           |
- *                 404 on 1st ^                                |
- *                    refresh |    setLocal()                  |
- *       +------+        +---------+ -----> +--------+         |
- *       | init | -----> | refresh |        | update |         |
- *       +------+        +---------+   +--- +--------+---->----|--+
- *                        |   ^        |         |             |  |
- *           NAPI 404 for |   |        |         |             |  |
- *           existing NIC |   |        |         |             |  |
- *       +---------+      |   |        |         |             |  |
- *       | remove  | <----+   |        |         |             |  |
- *       +---------+          |        |         |             |  |
- *            |               |        |         |             |  |
- *            v               |        |         v             |  |
- *       +---------+     +---------+   |    +--------------+   |  |
- *       | stopped |     | waiting | <-+--- | update.local | --+  |
- *       +---------+     +---------+   |    +--------------+   |  |
- *            ^                        |                       |  |
- *            |          +---------+   +--- +--------------+ <-|--+
- *            +----<---- | release |        | update.napi  | --+
- *            |          +---------+        +--------------+   |
- *            |               ^                  |             |
- *            |               |     NAPI 404     |             |
- *            +----<--------- | -----------------+             |
- *                            |        releaseFrom()           |
- *                            +--------------------------------+
+ *                                           releaseFrom()
+ *                       +---------+ ----------------------------------+
+ *                       | create  |                                   |
+ *                       +---------+ --------------------+             |
+ *                 404 on 1st ^                          |             |
+ *                    refresh |                          v             |
+ *       +------+        +---------+ -->---+------> +--------+         |
+ *       | init | -----> | refresh |       |        | update |         |
+ *       +------+        +---------+       | +--<-- +--------+ -----+  |
+ *                        |   ^            | |           |   booter |  |
+ *           NAPI 404 for |   |            | |           |  created |  |
+ *           existing NIC |   |            | |           |   CN NIC |  |
+ *       +---------+      |   |            | |           |          |  |
+ *  +--> | remove  | <----+   |            | |           |          |  |
+ *  |    +---------+          |            | |           |          |  |
+ *  |         |               |            | v           |          |  |
+ *  |         v               | called     | |           v          |  |
+ *  |    +---------+          | refresh()  | |   +--------------+   |  |
+ *  |    | stopped |          |            | +-- | update.local | --|--+
+ *  |    +---------+          |            | |   +--------------+   |  |
+ *  |         ^               |     called | v           |          |  |
+ *  |         |               | setLocal() | |           v          |  |
+ *  |    +---------+     +---------+ -->---+ |   +--------------+ <-+  |
+ *  |    | release | <-- | waiting |         |   | update.napi  |      |
+ *  |    +---------+     +---------+ <-------+-- +--------------+ -->--+
+ *  |         ^                                          |             |
+ *  |         |                             NAPI 404 for |             |
+ *  |         |                             existing NIC |             |
+ *  +---------|------------------------------------------+             |
+ *            |                                          releaseFrom() |
+ *            +--------------------------------------------------------+
  */
 function NicFSM(opts) {
     assert.object(opts, 'opts');
@@ -204,6 +210,7 @@ NicFSM.prototype.state_refresh = function (S) {
     S.validTransitions([
         'create',
         'refresh',
+        'release',
         'remove',
         'update'
     ]);
@@ -236,11 +243,19 @@ NicFSM.prototype.state_refresh = function (S) {
         S.gotoState('update');
     }
 
-    self.log.info('Refreshing NIC information');
-
     self.app.napi.getNic(self.mac, S.callback(afterGet));
 };
 
+/**
+ * In "create", we take care of pushing the local NIC to NAPI. This is usually
+ * not needed in normal Triton operation except just after installation when
+ * the NICs for the Triton service zones and headnode need to be created in the
+ * brand new NAPI service.
+ *
+ * When we POST the NIC, NAPI will send back our first copy of the remote NIC,
+ * which will include information like the "network_uuid". We then go to the
+ * "update" state so that we can backfill the VMs with these properties.
+ */
 NicFSM.prototype.state_create = function (S) {
     var self = this;
     var deleted = false;
@@ -248,6 +263,7 @@ NicFSM.prototype.state_create = function (S) {
     S.validTransitions([
         'refresh',
         'release',
+        'update',
         'waiting'
     ]);
 
@@ -280,7 +296,7 @@ NicFSM.prototype.state_create = function (S) {
 
         self.setRemote(nic, res.headers['etag']);
 
-        S.gotoState('waiting');
+        S.gotoState('update');
     }
 
     var remcreate = Object.assign({ check_owner: false }, self.local);
@@ -428,15 +444,30 @@ NicFSM.prototype.state_update.local = function (S) {
     owner.updateNIC(self.mac, locupdate, S.callback(afterUpdate));
 };
 
+/**
+ * In "update.napi", we push any deviating local fields up to NAPI. If both the
+ * local and remote NIC objects match, then we don't need to do anything and
+ * can go back to the "waiting" state.
+ *
+ * When we update NAPI, it returns its latest, updated view of the NIC. Since
+ * this is effectively a "refresh", we take another pass through "update"
+ * afterwards, so that we apply any remote changes. If nothing has changed,
+ * then we'll pass through "update.local" and "update.napi" without doing
+ * anything, finally returning to "waiting".
+ *
+ * We ignore any "setAsserted" events while in this state, since our trip back
+ * through the "update" state afterwards will handle the local change, and so
+ * that we wait for our PUT request to finish, thus ordering all of our
+ * "update.napi" PUTs.
+ */
 NicFSM.prototype.state_update.napi = function (S) {
     var self = this;
-    var updated = false;
 
     S.validTransitions([
         'release',
+        'remove',
         'update',
         'update.napi',
-        'stopped',
         'waiting'
     ]);
 
@@ -447,14 +478,6 @@ NicFSM.prototype.state_update.napi = function (S) {
         return;
     }
 
-    S.on(this, 'setAsserted', function () {
-        /*
-         * We wait to move to the "update" state again to ensure that our
-         * PUTs are always correctly ordered.
-         */
-        updated = true;
-    });
-
     S.on(this, 'releaseAsserted', function () {
         /*
          * It's okay for our DELETE to race with the PUT:
@@ -469,23 +492,21 @@ NicFSM.prototype.state_update.napi = function (S) {
     function afterPut(err, nic, _, res) {
         if (err) {
             if (err.statusCode === 404) {
-                self.log.warn('NIC no longer in NAPI, stopping');
-                S.gotoState('stopped');
+                self.log.warn('NIC no longer in NAPI, removing');
+                S.gotoState('remove');
                 return;
             }
 
-            self.log.error(err, 'Failed to update NIC in NAPI');
-            S.gotoState('update.napi');
+            self.log.error(err,
+                'Failed to update NIC in NAPI; ' +
+                'retrying in 5 seconds');
+            S.gotoStateTimeout(5000, 'update.napi');
             return;
         }
 
         self.setRemote(nic, res.headers['etag']);
 
-        if (updated) {
-            S.gotoState('update');
-        } else {
-            S.gotoState('waiting');
-        }
+        S.gotoState('update');
     }
 
     remupdate.check_owner = false;
@@ -495,34 +516,93 @@ NicFSM.prototype.state_update.napi = function (S) {
     self.app.napi.updateNic(self.mac, remupdate, S.callback(afterPut));
 };
 
+/**
+ * The "remove" state takes care of removing a local NIC, either because it has
+ * disappeared from NAPI or because the owner listed in NAPI differs from who
+ * owns it locally (suggesting that two different VMs on Triton CNs have the
+ * same MAC address).
+ */
 NicFSM.prototype.state_remove = function (S) {
+    S.gotoState('remove.nic');
+};
+
+NicFSM.prototype.state_remove.nic = function (S) {
     var self = this;
 
     S.validTransitions([
-        'remove',
+        'remove.nic',
+        'remove.reboot',
         'stopped'
     ]);
 
     if (!mod_jsprim.hasKey(self.app.insts, self.local.belongs_to_uuid)) {
+        self.log.info('VM %s has gone away; skipping removing NIC',
+            self.local.belongs_to_uuid);
         S.gotoState('stopped');
         return;
     }
 
     function afterRemove(err) {
         if (err) {
-            self.log.error(err, 'Failed to update NIC on VM %s',
+            self.log.error(err,
+                'Failed to remove NIC from VM %s; ' +
+                'retrying in 5 seconds',
                 self.local.belongs_to_uuid);
-            S.gotoStateTimeout(5000, 'remove');
+            S.gotoStateTimeout(5000, 'remove.nic');
             return;
         }
 
-        S.gotoState('stopped');
+        S.gotoState('remove.reboot');
     }
 
     self.app.insts[self.local.belongs_to_uuid].removeNIC(
         self.mac, S.callback(afterRemove));
 };
 
+NicFSM.prototype.state_remove.reboot = function (S) {
+    var self = this;
+
+    S.validTransitions([
+        'remove.reboot',
+        'stopped'
+    ]);
+
+    if (self.local.belongs_to_type === 'server') {
+        self.log.trace('Skipping rebooting server %s',
+            self.local.belongs_to_uuid);
+        S.gotoState('stopped');
+        return;
+    }
+
+    if (!mod_jsprim.hasKey(self.app.insts, self.local.belongs_to_uuid)) {
+        self.log.info('VM %s has gone away; skipping rebooting VM',
+            self.local.belongs_to_uuid);
+        S.gotoState('stopped');
+        return;
+    }
+
+    function afterRemove(err) {
+        if (err) {
+            self.log.error(err,
+                'Failed to reboot VM %s; ' +
+                'retrying in 5 seconds',
+                self.local.belongs_to_uuid);
+            S.gotoStateTimeout(5000, 'remove.reboot');
+            return;
+        }
+
+        S.gotoState('stopped');
+    }
+
+    self.app.insts[self.local.belongs_to_uuid].reboot(
+        S.callback(afterRemove));
+};
+
+/**
+ * The "release" state takes care of removing a NIC from NAPI when it has
+ * been removed locally, either because the NIC has been removed from a VM,
+ * or because the VM has been deleted.
+ */
 NicFSM.prototype.state_release = function (S) {
     S.validTransitions([
         'release.delete',
@@ -624,6 +704,8 @@ NicFSM.prototype.state_stopped = function (S) {
     this.local = null;
     this.remote = null;
     this.etag = undefined;
+
+    delete this.app.nics[this.mac];
 };
 
 NicFSM.prototype.setLocal = function (nic) {
@@ -635,7 +717,7 @@ NicFSM.prototype.setLocal = function (nic) {
 };
 
 /**
- * Update our copy of the NIC in NAPI (as well as it's etag if the
+ * Update our copy of the NIC in NAPI (as well as its etag if the
  * NAPI instance is new enough to report it).
  */
 NicFSM.prototype.setRemote = function (nic, etag) {
diff --git a/lib/server-fsm.js b/lib/server-fsm.js
index fdaaf72..8fcb662 100644
--- a/lib/server-fsm.js
+++ b/lib/server-fsm.js
@@ -106,6 +106,8 @@ ServerFSM.prototype.state_refresh = function (S) {
 
         self._update(sysinfo);
 
+        self.log.info('Refreshed server information');
+
         S.gotoState('waiting');
     });
 };
-- 
2.21.0

