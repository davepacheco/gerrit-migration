From ec495e5dcaa3ae0282de015be9e425b7f318cc5d Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 23 Aug 2017 16:43:51 -0700
Subject: [PATCH] MON-366 mattermost notifications Reviewed by: Josh Wilsdon
 <josh@wilsdon.ca> Approved by: Josh Wilsdon <josh@wilsdon.ca>

---
 .gitignore                             |   2 +-
 docs/design.md                         | 250 ++++++++++++++++-
 docs/index.md                          | 226 ++++++++++++++--
 docs/media/mattermost-example-1.png    | Bin 0 -> 103831 bytes
 docs/media/mattermost-example-2.png    | Bin 0 -> 75863 bytes
 docs/media/mattermost-example-3.png    | Bin 0 -> 62704 bytes
 master/lib/notifications/mattermost.js | 355 +++++++++++++++++++++++++
 master/lib/notifications/xmpp.js       |  11 +-
 master/lib/probes.js                   |   4 +-
 master/package.json                    |   5 +-
 master/sapi_manifests/amon/template    |   5 +
 11 files changed, 826 insertions(+), 32 deletions(-)
 create mode 100644 docs/media/mattermost-example-1.png
 create mode 100644 docs/media/mattermost-example-2.png
 create mode 100644 docs/media/mattermost-example-3.png
 create mode 100644 master/lib/notifications/mattermost.js

diff --git a/.gitignore b/.gitignore
index be43b76..8971c14 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,6 +3,7 @@ tmp
 node_modules
 *.log
 /amon.sublime*
+.DS_Store
 
 /build
 /config*.json
@@ -11,6 +12,5 @@ node_modules
 /screencasts
 
 # built docs (ignore for now)
-/docs/media
 /docs/*.html
 /docs/*.json
diff --git a/docs/design.md b/docs/design.md
index c669b26..7e55f9a 100644
--- a/docs/design.md
+++ b/docs/design.md
@@ -1,6 +1,6 @@
 ---
 title: Amon Design Discussions
-markdown2extras: tables, cuddled-lists
+markdown2extras: tables, code-friendly, cuddled-lists, fenced-code-blocks
 apisections:
 ---
 <!--
@@ -10,7 +10,7 @@ apisections:
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # Amon Design Discussions
@@ -20,8 +20,252 @@ helpful to understand why Amon is the way it is. Each section is dated to give
 context if reading this in the future when Amon design might have moved on. *Add
 new sections to the top.*
 
+# Amon notifications re-hash (Aug 2017)
+
+I'm adding Mattermost notification support and as part of this I'm revisiting
+improving and perhaps sharing the handling of how to format the data for
+a notification.
+
+Here is an example (slightly clipped) of the data available when creating a
+notification:
+
+```
+user: {
+  "login": "trentm",
+}
+alarm: {
+  "id": 1,
+  "probe": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+  "closed": false,
+  "timeOpened": 1502773793346,
+  "timeClosed": null,
+  "timeLastEvent": 1502773793254,
+  "faults": [
+    {
+      "type": "probe",
+      "probe": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+      "event": {
+        "v": 1,
+        "type": "probe",
+        "user": "826d2dd2-6456-4edb-9981-a1c41fe8f48e",
+        "probeUuid": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+        "clear": false,
+        "data": {
+          "message": "Log \"/var/tmp/canary.log\" matched /chirp/.",
+          "value": 1,
+          "details": {
+            "matches": [
+              {
+                "match": "chirp",
+                "context": "chirp"
+              }
+            ]
+          }
+        },
+        "machine": "564d1481-d558-23f4-2db0-8586f70dde2b",
+        "uuid": "eaa0ede9-f052-ccd0-f4ff-ec377a023ae8",
+        "time": 1502773793254,
+        "agent": "564d1481-d558-23f4-2db0-8586f70dde2b",
+        "agentAlias": "headnode"
+      }
+    }
+  ],
+  "maintFaults": [],
+  "numEvents": 1,
+}
+--
+event: {
+  "v": 1,
+  "type": "probe",
+  "user": "826d2dd2-6456-4edb-9981-a1c41fe8f48e",
+  "probeUuid": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+  "clear": false,
+  "data": "[Circular]",
+  "machine": "564d1481-d558-23f4-2db0-8586f70dde2b",
+  "uuid": "eaa0ede9-f052-ccd0-f4ff-ec377a023ae8",
+  "time": 1502773793254,
+  "agent": "564d1481-d558-23f4-2db0-8586f70dde2b",
+  "agentAlias": "headnode",
+  "relay": "564d1481-d558-23f4-2db0-8586f70dde2b"
+}
+--
+probe: {
+  "user": "826d2dd2-6456-4edb-9981-a1c41fe8f48e",
+  "uuid": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+  "dn": "amonprobe=cfbe1b98-e407-61a6-ab1c-b81863546d97, uuid=826d2dd2-6456-4edb-9981-a1c41fe8f48e, ou=users, o=smartdc",
+  "raw": {
+    "agent": "564d1481-d558-23f4-2db0-8586f70dde2b",
+    "config": "{\"path\":\"/var/tmp/canary.log\",\"match\":{\"pattern\":\"chirp\"}}",
+    "contact": [
+      "localmattermost"
+    ],
+    "disabled": "false",
+    "machine": "564d1481-d558-23f4-2db0-8586f70dde2b",
+    "name": "mm-test",
+    "objectclass": "amonprobe",
+    "type": "log-scan",
+    "user": "826d2dd2-6456-4edb-9981-a1c41fe8f48e",
+    "uuid": "cfbe1b98-e407-61a6-ab1c-b81863546d97",
+    "groupEvents": false
+  },
+  "name": "mm-test",
+  "type": "log-scan",
+  "agent": "564d1481-d558-23f4-2db0-8586f70dde2b",
+  "machine": "564d1481-d558-23f4-2db0-8586f70dde2b",
+  "contacts": "[Circular]",
+  "config": {
+    "path": "/var/tmp/canary.log",
+    "match": {
+      "pattern": "chirp"
+    }
+  },
+  "groupEvents": false,
+  "disabled": false
+}
+```
+
+
+Working pseudo-template for the distilled data for sections of a notification:
+
+```
+# $from
+# e.g.: Amon poseidon us-east-1
+Amon $dc $user.login
+
+# $color
+- green if alarm is closed
+- yellow if event.clear
+- otherwise, red
+
+# $title
+# Notification title is about the alarm: id, current status, reason for
+# notification.
+#
+# $action:
+# - "closed" if alarm.closed;
+# - "opened, probe $probe.name fault" if this is the first event
+# - "probe $probe.name cleared" if event.clear
+# - "new probe $probe.name fault" (does this also work with probe groups?)
+# - error note if unexpected state
+#
+# $numEvents: Include this is there is >1 event.
+# $numFaults: Include this is there is >1 fault. Else it is typically always 1.
+#
+Alarm 1 in coal ($action, numEvents=$numEvents, numFaults=$numFaults)
+
+# $closed: Include this boolean in summary so notifier can use that for UX.
+closed: false
+
+# $body (markdown)
+# The event is the thing that (at least in current Amon notifications)
+# triggered this notification. Summarize the event.
+**Log \"/var/tmp/canary.log\" matched /chirp/.**
+Probe $probe.name (in probegroup $probeGroup.name) faulted on server/vm $uuid ($alias) at $time.
+    or
+Probe $probe.name (in probegroup $probeGroup.name) *cleared* on server/vm $uuid ($alias) at $time.
+
+# code block of event.data.details (eventually could have probe-type-specific
+# rendering)
+    "matches": [
+      {
+        "match": "chirp",
+        "context": "chirp"
+      }
+    ]
+
+# Summarize current alarm faults, including maint faults, only if more than
+# this one.
+Alarm faults (numEvents=$numEvents):
+- **Log \"/var/tmp/canary.log\" matched /chirp/.** at $timestamp-for-1502773793254 (*maint*)
+```
+
+## Examples
+
+Some examples of notifications from this template, email and Mattermost
+renderings:
+
+Note: For email it would be nice to tweak the `Subject` to have threaded for
+same Alarm. Even if that means just putting Alarm id in subject and context (the
+stuff in parens) at the start of the body.
+
+```
+From: "Amon poseidon eu-central-1a" <$emailAddr>
+Subject: Alarm 171 in eu-central-1a (opened, probe upset.manta.webapi.log_error0 fault)
+
+**Log "/var/log/muskie.log" matched (level=ERROR).**
+Probe upset.manta.webapi.log_error0 faulted on vm 51a75485-a663-4605-9ced-1b857ba2bf85 (webapi.eu-central.scloud.host-51a75485) at 2017-08-14T22:11:03.717Z.
+
+    "matches": [
+      {
+        "match": {
+          "name": "muskie",
+          "hostname": "51a75485-a663-4605-9ced-1b857ba2bf85",
+          "pid": 91889,
+          "method": "POST",
+          "path": "/douglas.anderson/uploads/2/2b12488f-6cb2-6399-dbfd-d3ecbfced7ac/commit",
+          "req_id": "7606e1ae-813d-11e7-9a98-33a8cbb2b470",
+          "level": 50,
+          "msg": "error with shark 92.stor.eu-central.scloud.host: SharkResponseError: mako failure:\nHTTP 400\n{\n  \"server\": \"nginx/1.10.2\",\n  \"date\": \"Mon, 14 Aug 2017 22:11:03 GMT\",\n  \"content-type\": \"application/json\",\n  \"content-length\": \"177\",\n  \"connection\": \"close\"\n}\n{\"code\":\"BadRequestError\",\"message\":\"failed to open file /manta/71655770-4a05-6898-b21f-e4cb3ad1e1e7/211e5290-b1f7-cb39-fc2c-a735b4c1a538 for part 3: No such file or directory\"}",
+          "time": "2017-08-14T22:11:03.717Z",
+          "v": 0
+        }
+      }
+    ]
+
+Alarm Faults (numEvents=1):
+- *Log "/var/log/muskie.log" matched (level=ERROR).* at 2017-08-14T22:11:03.717Z
+```
+
+In Mattermost macOS desktop client:
+![Amon notification in Mattermost](./media/mattermost-example-1.png)
+
+Another Mattermost example showing a "machine-up" probe faulting, and then
+clearing itself as a VM rebooted:
+![Mattermost notification for a VM reboot](./media/mattermost-example-2.png)
+
+Another Mattermost example showing a "machine-up" probe clearing, but colored
+yellow because the alarm is part of a probe group and there are other current
+faults on the alarm:
+![Mattermost notification for a clear, alarm still open](./media/mattermost-example-3.png)
+
+A current XMPP notification example:
+
+```
+eu-central-1a amon
+
+ALARM: probe=upset.manta.marlin_agent.log_error2,server=MSB05755, type=log-scan, id=173 in eu-central-1a
+Log "/var/svc/log/smartdc-agent-marlin-agent:default.log" matched /Stopping because process dumped core./.
+{
+  "matches": [
+    {
+      "match": "Stopping because process dumped core.",
+      "context": "[ Aug 15 22:19:03 Stopping because process dumped core. ]"
+    }
+  ]
+}
+```
+
+With the template proposed we'd (eventually) change that to:
+
+```
+Amon poseidon eu-central-1a
+
+Alarm 173 eu-central-1a (opened, probe upset.manta.marlin_agent.log_error2 fault)
+
+**Log "/var/svc/log/smartdc-agent-marlin-agent:default.log" matched /Stopping because process dumped core./.**
+Probe upset.manta.marlin_agent.log_error2 faulted on server MSB05755 ($uuid) at 2017-08-14T22:11:03.717Z.
+
+    {
+      "matches": [
+        {
+          "match": "Stopping because process dumped core.",
+          "context": "[ Aug 15 22:19:03 Stopping because process dumped core. ]"
+        }
+      ]
+    }
+```
 
-# amon-agent runtime
+# amon-agent runtime (circa 2012)
 
 Discussion: <https://xmpp.joyent.com/logs/manta%40groupchat.joyent.com/2012-07-26.html#22:46:27.329541>
 
diff --git a/docs/index.md b/docs/index.md
index 2e9b876..77fc4d7 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ apisections: Master API: Probe Groups, Master API: Probes, Master API: Alarms, M
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # Amon (SDC Monitoring and Alarming)
@@ -1823,22 +1823,22 @@ Note that given custom values override full top-level keys in the factory
 settings. For example: if providing 'userCache', one must provide the
 whole userCache object.
 
-| Var                          | Type             | Default   | Description                                                                                                                                    |
-| ---------------------------- | ---------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |
-| port                         | Number           | 8080      | Port number on which to listen.                                                                                                                |
-| logLevel                     | String or Number | info      | A bunyan log level. Note that the '-v' CLI option can also set the log level. If '-v' is used, then this config var is ignored.                |
-| adminUuid                    | UUID             | -         | The UUID of the admin user in this cloud. This is the 'ufds_admin_uuid' SDC config.                                                            |
-| ufds.url                     | String           | -         | LDAP URL to connect to UFDS.                                                                                                                   |
-| ufds.bindDN                  | String           | -         | UFDS user DN with which to bind.                                                                                                               |
-| ufds.bindPassword            | String           | -         | UFDS password for 'bindDN'.                                                                                                                    |
-| ufds.caching                 | Boolean          | true      | Should UFDS caching should be enabled?                                                                                                         |
-| cnapi.url                    | String           | -         | CNAPI client url.                                                                                                                              |
-| vmapi.url                    | String           | -         | VMAPI client url.                                                                                                                              |
-| redis.host                   | String           | 127.0.0.1 | Redis server host or IP.                                                                                                                       |
-| redis.port                   | Number           | 6379      | Redis server port.                                                                                                                             |
-| userCache.size               | Number           | 1000      | The number of entries to cache.                                                                                                                |
-| userCache.expiry             | Number           | 300       | The number of seconds for which cache entries are valid.                                                                                       |
-| notificationPlugins          | Array            | -         | An array of objects defining all notification mechanisms.                                                                                      |
+| Var                          | Type             | Default   | Description |
+| ---------------------------- | ---------------- | --------- | ----------- |
+| port                         | Number           | 8080      | Port number on which to listen. |
+| logLevel                     | String or Number | info      | A bunyan log level. Note that the '-v' CLI option can also set the log level. If '-v' is used, then this config var is ignored. |
+| adminUuid                    | UUID             | -         | The UUID of the admin user in this cloud. This is the 'ufds_admin_uuid' SDC config. |
+| ufds.url                     | String           | -         | LDAP URL to connect to UFDS. |
+| ufds.bindDN                  | String           | -         | UFDS user DN with which to bind. |
+| ufds.bindPassword            | String           | -         | UFDS password for 'bindDN'. |
+| ufds.caching                 | Boolean          | true      | Should UFDS caching should be enabled? |
+| cnapi.url                    | String           | -         | CNAPI client url. |
+| vmapi.url                    | String           | -         | VMAPI client url. |
+| redis.host                   | String           | 127.0.0.1 | Redis server host or IP. |
+| redis.port                   | Number           | 6379      | Redis server port. |
+| userCache.size               | Number           | 1000      | The number of entries to cache. |
+| userCache.expiry             | Number           | 300       | The number of seconds for which cache entries are valid. |
+| notificationPlugins          | Array            | -         | An array of objects defining all notification mechanisms. |
 | notificationPlugins.*.type   | String           | -         | The notification type. This should be a short string, preferably all lowercase and satifying JS identifier rules, e.g. 'email', 'sms', 'xmpp'. |
 | notificationPlugins.*.path   | String           | -         | A node `require()` path from which the Amon master can load the plugin module, e.g. "./lib/twillio".                                           |
 | notificationPlugins.*.config | Object           | -         | An object with instance data for the plugin.                                                                                                   |
@@ -2421,6 +2421,198 @@ TODO: sdc-healthcheck, sdc-webinfo
 | amon-agent | in each GZ and in some zones | [Bunyan](https://github.com/trentm/node-bunyan) | `` tail -f `svcs -L amon-agent` | bunyan `` |
 
 
+## How to setup Mattermost notifications
+
+The Amon Master now ships with a 'mattermost' notification type. It uses
+[Mattermost incoming
+notifications](https://docs.mattermost.com/developer/webhooks-incoming.html).
+Here is how to get notifications for Amon alarms going to a given Mattermost
+channel:
+
+1.  [Create a Mattermost incoming webhook.](https://docs.mattermost.com/developer/webhooks-incoming.html#simple-incoming-webhook)
+    The result will be a webhook URL something like
+    <http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe>.
+    You can test that that works via:
+
+    ```
+    curl -i -X POST \
+        -d 'payload={
+            "username": "teapot",
+            "attachments": [
+                {
+                    "title": "this is my handle",
+                    "text": "**this** is my spout"
+                }
+            ]
+        }' http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe
+    ```
+
+    You should see a message attachment in your Mattermost channel.
+    If that message does not say it is from "teapot", then you might want to
+    ask your Mattermost administrator to enable
+    [overriding the username](https://docs.mattermost.com/developer/webhooks-incoming.html#override-the-username).
+    Amon notifications set the username, but allowing the override isn't
+    required.
+
+2.  Configure the account that owns the Amon probes to have this webhook URL
+    as an available Mattermost contact. Here "available", means using a user
+    field that Amon will accept as a Mattermost contact, which is any user
+    attribute ending with "mattermost", e.g.:
+
+    ```
+    sdc-useradm replace-attr poseidon mymattermost \
+        http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe
+    ```
+
+    (Here I am using the Manta operator "poseidon" account as an example,
+    because Manta is the heaviest current user of Amon. If you use an account
+    other than "poseidon", it will need to be an operator to allow creating
+    a probe on a server, as in the examples below.)
+
+3.  Update/create the `contacts` on your Amon [probes](#CreateProbe) or
+    [probe groups](#CreateProbeGroup) to include this contact name
+    ("mymattermost" in this example). E.g.:
+
+    ```
+    sdc-amon /pub/trentm/probes -X POST -d@- <<EOP
+    {
+      "name": "mmtest1-log-boom",
+      "type": "log-scan",
+      "agent": "$(sdc-cnapi /servers?hostname=headnode | json -H 0.uuid)",
+      "contacts": ["mymattermost"],
+      "groupEvents": false,
+      "config": {
+        "path": "/var/tmp/mmtest1.log",
+        "match": {
+          "pattern": "boom"
+        }
+      }
+    }
+    EOP
+    ```
+
+    or with a probe group:
+
+    ```
+    groupRes=$(sdc-amon /pub/trentm/probegroups -X POST -d@- <<EOP
+    {
+      "name": "mmtest2-group",
+      "contacts": ["mymattermost"]
+    }
+    EOP
+    )
+    groupUuid=$(echo "$groupRes" | json -H uuid)
+
+    sdc-amon /pub/trentm/probes -X POST -d@- <<EOP
+    {
+      "name": "mmtest2-log-boom",
+      "group": "$groupUuid",
+      "type": "log-scan",
+      "agent": "$(sdc-cnapi /servers?hostname=headnode | json -H 0.uuid)",
+      "config": {
+        "path": "/var/tmp/mmtest2.log",
+        "match": {
+          "pattern": "boom"
+        }
+      }
+    }
+    EOP
+    ```
+
+    Aside: To speed up flushing probe changes to the agents for this example
+    you can run the following. Or you can just wait (up to 30 *minutes*) for
+    the amon-relay(s) to sync.
+
+    ```
+    curl -i localhost:4307/state?action=syncprobes -X POST
+    svcadm restart amon-agent && sleep 3
+    ```
+
+4.  Test tripping one of your Amon probes to create an alarm. You should see
+    a notification in Mattermost. E.g.:
+
+    ```
+    echo 'boom' >>/var/tmp/mmtest1.log
+    echo 'boom' >>/var/tmp/mmtest2.log
+    ```
+
+
+### Setting up Manta alarms to use Mattermost notifications
+
+Manta uses Amon for at least some of its monitoring. Manta's alarm handling is
+controlled by the `manta-adm alarm ...` command. Here is how you can setup a
+deployed Manta to send notifications to a Mattermost channel:
+
+1.  [Create a Mattermost incoming webhook.](https://docs.mattermost.com/developer/webhooks-incoming.html#simple-incoming-webhook)
+    The result will be a webhook URL something like
+    <http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe>.
+    You can test that that works via:
+
+    ```
+    curl -i -X POST \
+        -d 'payload={
+            "username": "teapot",
+            "attachments": [
+                {
+                    "title": "this is my handle",
+                    "text": "**this** is my spout"
+                }
+            ]
+        }' http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe
+    ```
+
+    You should see a message attachment in your Mattermost channel.
+    If that message does not say it is from "teapot", then you might want to
+    ask your Mattermost administrator to enable
+    [overriding the username](https://docs.mattermost.com/developer/webhooks-incoming.html#override-the-username).
+    Amon notifications set the username, but allowing the override isn't
+    required.
+
+2.  Configure `poseidon` to have the webhook URL as a Mattermost contact, e.g.:
+
+    ```
+    sdc-useradm replace-attr poseidon mantamattermost \
+        http://mattermost.example.com/hooks/818yxgxbe7gnmcmpawzz8gfiqe
+    ```
+
+    The attribute name must end with "mattermost" for the Amon Mattermost
+    notification type to accept it.
+
+3.  Configure `manta-adm alarm config ...` to use this "mantamattermost"
+    contact. For example (this assumes you also want XMPP notifications):
+
+    ```
+    echo '{
+        "metadata": {
+          "MANTAMON_ALERT": [
+            { "contact": "email" },
+            { "contact": "mantaxmpp", "last": true }
+            { "contact": "mantamattermost", "last": true }
+          ],
+          "MANTAMON_INFO": [
+            { "contact": "mantaxmpp", "last": true }
+            { "contact": "mantamattermost", "last": true }
+          ]
+        }
+    }' | sapiadm update $(sdc-sapi /services?name=manta | json -Ha uuid)
+
+    sdc-login -l manta svcadm restart config-agent
+    ```
+
+4.  Update Manta amon probes:
+
+    ```
+    manta-adm alarm config update
+    ```
+
+    You can cheat to get the amon-relay on all CNs to sync these updates
+    right away (the polling interval is 30 *minutes*):
+
+    ```
+    sdc-oneachnode -a 'curl http://127.0.0.1:4307/state?action=syncprobes -X POST'
+    # Wait a bit for each amon-agent's polling interval.
+    ```
+
 
 ## How to use the XMPP notification plugin
 
diff --git a/docs/media/mattermost-example-1.png b/docs/media/mattermost-example-1.png
new file mode 100644
index 0000000..9379ca9
Binary files /dev/null and b/docs/media/mattermost-example-1.png differ
diff --git a/docs/media/mattermost-example-2.png b/docs/media/mattermost-example-2.png
new file mode 100644
index 0000000..c54c756
Binary files /dev/null and b/docs/media/mattermost-example-2.png differ
diff --git a/docs/media/mattermost-example-3.png b/docs/media/mattermost-example-3.png
new file mode 100644
index 0000000..3fa78cf
Binary files /dev/null and b/docs/media/mattermost-example-3.png differ
diff --git a/master/lib/notifications/mattermost.js b/master/lib/notifications/mattermost.js
new file mode 100644
index 0000000..7b50833
--- /dev/null
+++ b/master/lib/notifications/mattermost.js
@@ -0,0 +1,355 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Support for sending Amon notifications to a Mattermost channel.
+ */
+
+var assert = require('assert-plus');
+var EventEmitter = require('events').EventEmitter;
+var http = require('http');
+var https = require('https');
+var sprintf = require('extsprintf').sprintf;
+var mod_url = require('url');
+var util = require('util');
+
+
+// ---- globals/constants
+
+var VERSION = require('../../package.json').version;
+var USER_AGENT = 'amon-master/' + VERSION;
+
+
+// ---- internal support stuff
+
+function indent(s, indentation) {
+    if (!indentation) {
+        indentation = '    ';
+    }
+    var lines = s.split(/\n/g);
+    return indentation + lines.join('\n' + indentation);
+}
+
+/*
+ * Sift through the data available for an Amon alarm notification and return
+ * an object of info useful for a notification.
+ *
+ * Note: This is written to be sharable logic between different notification
+ * mediums.
+ *
+ * The returned "notificationInfo" contains the following fields:
+ * - `from`: The name of the "sender"
+ * - `closed`: Boolean indicating if the alarm is closed.
+ * - `color`: An RGB hex color appropriate for the notification. Green if
+ *   the alarm is closed, yellow if a fault was cleared, red otherwise.
+ * - `title`: A one-line summary of the alarm: id, current status, reason for
+ *   notification.
+ * - `body`: A multi-line string (using Markdown syntax) describing the event
+ *   and some details about the probe and probe group, if relevant.
+ */
+function notificationInfoFromEventInfo(opts) {
+    assert.object(opts, 'opts');
+    assert.string(opts.dcName, 'opts.dcName');
+    assert.object(opts.alarm, 'opts.alarm');
+    assert.object(opts.user, 'opts.user');
+    assert.object(opts.event, 'opts.event');
+    assert.optionalObject(opts.probe, 'opts.probe');
+    assert.optionalObject(opts.probeGroup, 'opts.probeGroup');
+
+    var codeBlockStyle = 'fenced-code-blocks';
+    var alarm = opts.alarm;
+    var event = opts.event;
+
+    var info = {
+        //from: sprintf('Amon %s %s', opts.user.login, opts.dcName),
+        from: sprintf('%s@%s (Amon)', opts.user.login, opts.dcName),
+
+        closed: alarm.closed
+    };
+    var probeName = (opts.probe
+        ? opts.probe.name || opts.probe.uuid : event.probeUuid);
+
+    // color
+    // Note: There is no particular color theory behind these particular chosen
+    // shades of.
+    if (alarm.closed) {
+        info.color = '008837'; // green
+    } else if (event.clear) {
+        info.color = 'e6f51d'; // yellow
+    } else {
+        info.color = 'd7191c'; // red
+    }
+
+    // title
+    var titleDetails = [];
+    var isNewAlarm = false;
+    if (alarm.closed) {
+        titleDetails.push('closed');
+    } else if (event.clear) {
+        titleDetails.push(sprintf('open, fault %s cleared', probeName));
+    } else if (alarm.faults.length === 1) {
+        titleDetails.push(sprintf('opened, probe %s fault', probeName));
+        isNewAlarm = true;
+    } else {
+        titleDetails.push(sprintf('open, new probe %s fault', probeName));
+    }
+    if (!isNewAlarm && !alarm.closed) {
+        titleDetails.push('numEvents=' + alarm.numEvents);
+        // Not counting alarm.maintFaults here.
+        titleDetails.push('numFaults=' + alarm.faults.length);
+    }
+    info.title = sprintf('Alarm %d in %s (%s)', alarm.id, opts.dcName,
+        titleDetails.join(', '));
+
+    // body
+    var lines = [];
+    lines.push('**' + event.data.message + '**');
+
+    var inProbeGroup = '';
+    if (opts.probeGroup) {
+        inProbeGroup = sprintf(' (in probegroup %s)', opts.probeGroup.name);
+    }
+    var whereName = (event.machine === event.agent
+        ? sprintf('%s (%s)', event.machine, event.agentAlias)
+        : event.machine);
+    // Amon relays run in the GZ, so if the event machine matches the relay,
+    // this is GZ (i.e. a server).
+    var whereType = (event.machine === event.relay ? 'server' : 'vm');
+    lines.push(sprintf('Probe %s%s %s on %s %s at %s.',
+        probeName,
+        inProbeGroup,
+        opts.event.clear ? '**cleared**' : 'faulted',
+        whereType,
+        whereName,
+        new Date(event.time).toISOString()));
+
+    // - event details
+    var EVENT_TYPES_WITH_BORING_DETAILS = {
+        'machine-up': true
+    };
+    var skipEventDetails = (opts.probe
+        ? EVENT_TYPES_WITH_BORING_DETAILS[opts.probe.type] : false);
+    if (!skipEventDetails) {
+        lines.push('');
+        var eventDetails = JSON.stringify(event.data.details, null, 4);
+        if (codeBlockStyle === 'fenced-code-blocks') {
+            lines.push('```');
+            lines.push(eventDetails);
+            lines.push('```');
+        } else {
+            lines.push(indent(eventDetails, '    '));
+        }
+    }
+
+    if (!isNewAlarm && !alarm.closed) {
+        lines.push('');
+        lines.push('');
+        lines.push('Current alarm faults:');
+        alarm.faults.forEach(function (fault) {
+            var fEvent = fault.event;
+            var machName = (fEvent.machine === fEvent.agent
+                ? sprintf('%s (%s)', fEvent.machine, fEvent.agentAlias)
+                : fEvent.machine);
+            lines.push(sprintf('- **%s** on machine %s at %s',
+                fEvent.data.message,
+                machName,
+                new Date(fEvent.time).toISOString()));
+        });
+        alarm.maintFaults.forEach(function (fault) {
+            var fEvent = fault.event;
+            var machName = (fEvent.machine === fEvent.agent
+                ? sprintf('%s (%s)', fEvent.machine, fEvent.agentAlias)
+                : fEvent.machine);
+            lines.push(sprintf('- **%s** on machine %s at %s (*maint*)',
+                fEvent.data.message,
+                machName,
+                new Date(fEvent.time).toISOString()));
+        });
+    }
+
+    info.body = lines.join('\n');
+
+    return info;
+}
+
+
+
+// ---- notifier
+
+/**
+ * Create an Mattermost notification plugin
+ *
+ * @params log {Bunyan Logger}
+ * @params config {Object}
+ * @params datacenterName {String}
+ */
+function MattermostNotifier(log, config, dcName) {
+    assert.object(log, 'log');
+    assert.object(config, 'config');
+    assert.string(dcName, 'dcName');
+
+    EventEmitter.call(this);
+
+    this.log = log;
+    this.dcName = dcName;
+}
+util.inherits(MattermostNotifier, EventEmitter);
+
+
+MattermostNotifier.prototype.close = function close() {};
+
+
+/**
+ * This notification plugin will handle any contact fields named 'mattermost'
+ * or '*mattermost' (e.g. 'foomattermost', "workmattermost").
+ */
+MattermostNotifier.prototype.acceptsMedium = function acceptsMedium(medium) {
+    assert.string(medium, 'medium');
+    var MARKER = 'mattermost';
+    this.log.trace({medium: medium}, 'acceptsMedium');
+    return (medium.toLowerCase().slice(-MARKER.length) === MARKER);
+};
+
+
+MattermostNotifier.prototype.sanitizeAddress =
+function sanitizeAddress(address) {
+    return address;
+};
+
+
+/**
+ * Notify.
+ *
+ * An annotated Amon mattermost notification. See
+ * <https://docs.mattermost.com/developer/message-attachments.html> for docs.
+ *
+ * @param options {Object} with:
+ *    - @param alarm {alarms.Alarm}
+ *    - @param user {Object} User, as from `App.userFromId()`, owning
+ *        this probe.
+ *    - @param event {Object} The probe event object.
+ *    - @param contact {Contact} The contact to notify. A contact is relative
+ *        to a user. See 'contact.js' for details.
+ *    - @param probeGroup {ProbeGroup} Probe group for which this
+ *        notification is being sent, if any.
+ *    - @param probe {Probe} Probe for which this notification is being
+ *        sent, if any.
+ * @param callback {Function} `function (err)` called on completion.
+ *      Note that if the notification request to the given Mattermost
+ *      webhook URL fails, that is silently ignored (other than being logged).
+ */
+MattermostNotifier.prototype.notify = function notify(opts, cb) {
+    assert.object(opts, 'options');
+    assert.object(opts.alarm, 'options.alarm');
+    assert.object(opts.user, 'options.user');
+    assert.object(opts.event, 'options.event');
+    assert.object(opts.contact, 'options.contact');
+    assert.optionalObject(opts.probe, 'options.probe');
+    assert.optionalObject(opts.probeGroup, 'options.probeGroup');
+    assert.func(cb, 'callback');
+
+    var log = this.log;
+    var hookUrl = opts.contact.address;
+    var self = this;
+
+    var nInfo;
+    try {
+        nInfo = notificationInfoFromEventInfo({
+            dcName: self.dcName,
+            alarm: opts.alarm,
+            user: opts.user,
+            event: opts.event,
+            probe: opts.probe,
+            probeGroup: opts.probeGroup
+        });
+    } catch (infoErr) {
+        cb(infoErr);
+        return;
+    }
+
+    var data = {
+        username: nInfo.from,
+        attachments: [
+            {
+                color: '#' + nInfo.color,
+                title: nInfo.title,
+                text: nInfo.body
+            }
+        ]
+    };
+    var body = JSON.stringify(data);
+
+    var hook = mod_url.parse(hookUrl);
+    var reqOpts = {
+        path: hook.path,
+        host: hook.hostname,
+        headers: {
+            'Content-Type': 'application/json',
+            'Content-Length': Buffer.byteLength(body),
+            'User-Agent': USER_AGENT
+        },
+        port: hook.port,
+        method: 'POST'
+        /*
+         * This timeout should somewhat help limit a pile up of hung/failing
+         * connections to a faulty endpoint. A better answer would be to (also)
+         * have Keep-Alive connections to each unique host with a specific
+         * *connection* timeout on those, and to re-use those connections.
+         *
+         * Note: Node v0.8 doesn't have a 'timeout' option to https.request
+         *
+         * timeout: 10 * 1000
+         */
+    };
+
+    var proto;
+    if (hook.protocol === 'http:') {
+        proto = http;
+        reqOpts.port = reqOpts.port || 80;
+    } else if (hook.protocol === 'https:') {
+        proto = https;
+        reqOpts.port = reqOpts.port || 443;
+    } else {
+        cb(new Error(sprintf('Unsupported protocol: %s', hook.protocol)));
+        return;
+    }
+
+    log.trace({data: data, reqOpts: reqOpts}, 'notify');
+    var req = proto.request(reqOpts, function (res) {
+        res.setEncoding('utf8');
+        var chunks = [];
+        res.on('data', function (chunk) {
+            chunks.push(chunk);
+        });
+        res.on('end', function () {
+            log.info({
+                data: data,
+                statusCode: res.statusCode,
+                headers: res.headers,
+                // We only expect 'ok' back from Mattermost.
+                body: chunks.join('').slice(0, 1024)
+            }, 'notified');
+            cb();
+        });
+    });
+
+    req.on('error', function (notifyErr) {
+        // Notification errors aren't fatal.
+        log.info({err: notifyErr, reqOpts: reqOpts, title: nInfo.title},
+            'notify error');
+    });
+
+    req.write(body);
+    req.end();
+};
+
+
+
+module.exports = MattermostNotifier;
diff --git a/master/lib/notifications/xmpp.js b/master/lib/notifications/xmpp.js
index e41e8b9..60f362e 100644
--- a/master/lib/notifications/xmpp.js
+++ b/master/lib/notifications/xmpp.js
@@ -5,10 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var dns = require('dns');
@@ -169,8 +166,8 @@ XMPP.prototype.toString = function toString() {
 
 
 /**
- * This notification plugin will handle any contact fields named 'phone'
- * or '*Phone' (e.g. 'fooPhone', "workPhone", "bffPhone").
+ * This notification plugin will handle any contact fields named 'xmpp'
+ * or '*xmpp' (e.g. 'fooxmpp', "workxmpp", "bffxmpp").
  */
 XMPP.prototype.acceptsMedium = function acceptsMedium(medium) {
     assert.string(medium, 'medium');
@@ -244,7 +241,7 @@ XMPP.prototype.notify = function notify(opts, cb) {
             if (event.machine === event.relay) {
                 // Relay's run in the GZ, so the machine is a
                 // GZ (i.e. a server).
-                msg += ',server=' + (alias || probe.machine);
+                msg += ', server=' + (alias || probe.machine);
             } else {
                 msg += ', vm=' + (alias || probe.machine);
             }
diff --git a/master/lib/probes.js b/master/lib/probes.js
index d57c3aa..cbd79fc 100644
--- a/master/lib/probes.js
+++ b/master/lib/probes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -421,7 +421,7 @@ Probe.prototype.authorizeWrite = function (app, callback) {
                 if (!isOperator) {
                     callback(new restify.InvalidArgumentError(_(
                         'Must be an operator to put a probe on a physical '
-                        + 'machine (%s): user "%s"is not an operator.',
+                        + 'machine (%s): user "%s" is not an operator.',
                         machineUuid, self.user)));
                 } else {
                     log.info('probe PUT authorized: probe for physical '
diff --git a/master/package.json b/master/package.json
index 128bab4..b53b9b5 100644
--- a/master/package.json
+++ b/master/package.json
@@ -1,7 +1,7 @@
 {
   "name": "amon-master",
-  "description": "Smart DataCenter Monitoring Master component",
-  "version": "1.0.0",
+  "description": "Triton DataCenter Monitoring API",
+  "version": "1.1.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "// dependencies": "mailcomposer is a hack for MON-347",
@@ -24,6 +24,7 @@
     "restify": "git+ssh://git@github.com:trentm/node-restify.git#7535bb3",
     "redis": "0.12.1",
     "retry": "0.6.0",
+    "extsprintf": "1.3.0",
     "sdc-clients": "git+ssh://git@github.com:joyent/node-sdc-clients.git#beace1d",
     "ufds": "git+ssh://git@github.com:joyent/node-ufds#1ace075d7c89579c1ee547e50812c4d73890efab"
   },
diff --git a/master/sapi_manifests/amon/template b/master/sapi_manifests/amon/template
index 5227eeb..b14d1cd 100644
--- a/master/sapi_manifests/amon/template
+++ b/master/sapi_manifests/amon/template
@@ -36,6 +36,11 @@
         "from": "\"{{{datacenter_name}}} Monitoring\" <no-reply@joyent.com>"
       }
     },
+    {
+      "type": "mattermost",
+      "path": "./notifications/mattermost",
+      "config": {}
+    },
     {
       "type": "webhook",
       "path": "./notifications/webhook",
-- 
2.21.0

