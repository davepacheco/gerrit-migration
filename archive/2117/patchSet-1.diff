commit cbf4a627c0186351abdce9d2d9e2fed28b522165 (refs/changes/17/2117/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-06-16T11:46:31-07:00 (2 years, 4 months ago)
    
    joyent/zkstream#12 fix up 'childrenChanged' notifiers on non-existent nodes

diff --git a/lib/client-fsm.js b/lib/client-fsm.js
index 97d6457..9032434 100644
--- a/lib/client-fsm.js
+++ b/lib/client-fsm.js
@@ -810,6 +810,11 @@ ZKWatcher.prototype.emit = function (evt) {
 			return;
 		}
 		if (err.code === 'NO_NODE') {
+			function onCreated() {
+				self.removeListener('created', onCreated);
+				self.emit(evt);
+			}
+			self.on('created', onCreated);
 			return;
 		}
 		mod_events.EventEmitter.prototype.emit.call(self, 'error', err);
diff --git a/package.json b/package.json
index ba20108..64d29e5 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zkstream",
-  "version": "0.6.0",
+  "version": "0.6.1",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/basic.test.js b/test/basic.test.js
index 8a549e7..957ec8a 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -70,7 +70,7 @@ mod_tape.test('find the test object', function (t) {
 
 		var req = zkc.list('/');
 		req.once('reply', function (pkt) {
-			t.strictEqual(pkt.opcode, 'GET_CHILDREN');
+			t.strictEqual(pkt.opcode, 'GET_CHILDREN2');
 			t.deepEqual(pkt.children.sort(), ['foo', 'zookeeper']);
 
 			var req2 = zkc.get('/foo');
@@ -316,6 +316,58 @@ mod_tape.test('children watcher', function (t) {
 	});
 });
 
+mod_tape.test('children watcher no node', function (t) {
+	var zkc = new mod_zkc.Client({
+		log: log,
+		host: 'localhost',
+		port: 2181
+	});
+	zkc.connect();
+
+	zkc.on('stateChanged', function (st) {
+		if (st === 'closed')
+			t.end();
+		if (st !== 'connected')
+			return;
+
+		var noKids, allKids;
+		var w = zkc.watcher('/parent');
+		w.on('childrenChanged', function (kids, stat) {
+			if (kids.length === 0) {
+				noKids = stat.cversion;
+			}
+			if (kids.indexOf('foobar') !== -1 &&
+			    kids.indexOf('foo') !== -1) {
+				allKids = stat.cversion;
+			}
+
+			if (noKids !== undefined &&
+			    allKids !== undefined) {
+				t.ok(allKids > noKids);
+				zkc.close();
+			}
+		});
+		setTimeout(function () {
+			zkc.create('/parent', new Buffer(0), {},
+			    function (err) {
+				t.error(err);
+				setTimeout(createKids, 2000);
+			});
+		}, 2000);
+
+		function createKids() {
+			zkc.create('/parent/foo', new Buffer('hi'), {},
+			    function (err2) {
+				t.error(err2);
+			});
+			zkc.create('/parent/foobar', new Buffer('hi'), {},
+			    function (err2) {
+				t.error(err2);
+			});
+		}
+	});
+});
+
 mod_tape.test('session resumption with watcher', function (t) {
 	var connected = 0;
 	var closed = 0;
