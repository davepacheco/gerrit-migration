commit b1faff98b694d109271a2038c9ae2fe658707ea3 (refs/changes/38/3338/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-02-09T02:33:45+00:00 (1 year, 8 months ago)
    
    TRITON-77 Add support for ESP and AH protocols in firewall rules

diff --git a/docs/media/img/protocol.svg b/docs/media/img/protocol.svg
index eac0c74..fdc74a2 100644
--- a/docs/media/img/protocol.svg
+++ b/docs/media/img/protocol.svg
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8" standalone="no"?>
 <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
-<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="railroad-diagram" width="313" height="152" viewBox="0 0 313 152">
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="railroad-diagram" width="313" height="212" viewBox="0 0 313 212">
 <defs><style type="text/css"><![CDATA[
 svg.railroad-diagram path {
   stroke-width: 3;
@@ -116,6 +116,22 @@ svg.railroad-diagram rect {
 <path d="M242 121h10"></path>
 </g>
 <path d="M252 121a10 10 0 0 0 10 -10v-70a10 10 0 0 1 10 -10"></path>
+<path d="M40 31a10 10 0 0 1 10 10v100a10 10 0 0 0 10 10"></path>
+<g>
+<path d="M60 151h78"></path>
+<path d="M174 151h78"></path>
+<rect x="138" y="140" width="36" height="22" rx="10" ry="10"></rect>
+<text x="156" y="155">AH</text>
+</g>
+<path d="M252 151a10 10 0 0 0 10 -10v-100a10 10 0 0 1 10 -10"></path>
+<path d="M40 31a10 10 0 0 1 10 10v130a10 10 0 0 0 10 10"></path>
+<g>
+<path d="M60 181h74"></path>
+<path d="M178 181h74"></path>
+<rect x="134" y="170" width="44" height="22" rx="10" ry="10"></rect>
+<text x="156" y="185">ESP</text>
+</g>
+<path d="M252 181a10 10 0 0 0 10 -10v-130a10 10 0 0 1 10 -10"></path>
 </g>
 <path d="M 272 31 h 20 m -10 -10 v 20 m 10 -20 v 20"></path>
 </g>
diff --git a/docs/rules.md b/docs/rules.md
index 131ecfc..370acef 100644
--- a/docs/rules.md
+++ b/docs/rules.md
@@ -218,9 +218,11 @@ have an effect.
     udp
     icmp
     icmp6
+    ah
+    esp
 
-The protocol can be one of tcp, udp or icmp(6). The protocol dictates whether
-ports or types can be used (see the Ports section below).
+The protocol can be one of tcp, udp, icmp(6), ah or esp. The protocol dictates
+whether ports or types can be used (see the Ports section below).
 
 
 # Ports
@@ -310,6 +312,13 @@ Allows ssh traffic between all VMs.
 
 Allow HTTP traffic from any host to all VMs.
 
+    FROM any TO all vms ALLOW ah
+    FROM any TO all vms ALLOW esp
+    FROM any TO all vms ALLOW udp (PORT 500 and PORT 4500)
+
+Allows [IPsec](https://en.wikipedia.org/wiki/IPsec) traffic from any host to
+all VMs.
+
 
 # Error Messages
 
diff --git a/docs/rules.md.in b/docs/rules.md.in
index fda3f66..dc9847c 100644
--- a/docs/rules.md.in
+++ b/docs/rules.md.in
@@ -75,7 +75,7 @@ following syntax:
 Protocols can be targeted using:
 
 <p style="text-align: center">
-<img alt="Protocol Keywords: TCP, UDP, ICMP, ICMP6" src="./media/img/protocol.svg" />
+<img alt="Protocol Keywords: TCP, UDP, ICMP, ICMP6, AH, ESP" src="./media/img/protocol.svg" />
 </p>
 
 {{/images}}
@@ -109,6 +109,8 @@ The parameters are the following:
 * udp
 * icmp
 * icmp6
+* ah
+* esp
 
 **ports** or **types** can be one of (see the Ports section below):
 
@@ -264,9 +266,11 @@ have an effect.
     udp
     icmp
     icmp6
+    ah
+    esp
 
-The protocol can be one of tcp, udp or icmp(6). The protocol dictates whether
-ports or types can be used (see the Ports section below).
+The protocol can be one of tcp, udp, icmp(6), ah or esp. The protocol dictates
+whether ports or types can be used (see the Ports section below).
 
 
 # Ports
@@ -373,6 +377,13 @@ Allows ssh traffic between all VMs.
 
 Allow HTTP traffic from any host to all VMs.
 
+    FROM any TO all vms ALLOW ah
+    FROM any TO all vms ALLOW esp
+    FROM any TO all vms ALLOW udp (PORT 500 and PORT 4500)
+
+Allows [IPsec](https://en.wikipedia.org/wiki/IPsec) traffic from any host to
+all VMs.
+
 
 # Error Messages
 
diff --git a/lib/index.js b/lib/index.js
index abfc47c..9e38f7c 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -46,7 +46,7 @@ var validators = require('./validators');
  * 1 - Initial version of language
  * 2 - PORTS keyword & support for ranges of ports
  * 3 - Support for IPv6 targets, the ICMPv6 protocol, and the TYPE ALL keyword
- * 4 - Support for priority levels
+ * 4 - Support for priority levels, and the AH and ESP protocols (for IPsec)
  */
 var CURR_VERSION = 4;
 
@@ -244,7 +244,7 @@ module.exports = {
     FwRule: rule.FwRule,
     generateVersion: rule.generateVersion,
     parse: parse,
-    PROTOCOLS: ['tcp', 'udp', 'icmp', 'icmp6'],
+    PROTOCOLS: ['tcp', 'udp', 'icmp', 'icmp6', 'ah', 'esp'],
     TARGET_TYPES: rule.TARGET_TYPES,
     validators: validators
 };
diff --git a/lib/rule.js b/lib/rule.js
index 65d5040..8854caa 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -423,16 +423,28 @@ function FwRule(data, opts) {
     this.priority = parsed.priority || 0;
     this.protocol = parsed.protocol.name;
 
-    if (icmpr.test(this.protocol)) {
+    switch (this.protocol) {
+    case 'icmp':
+    case 'icmp6':
         this.types = icmpTypeSort(parsed.protocol.targets);
         this.protoTargets = this.types;
-    } else {
+        break;
+    case 'ah':
+    case 'esp':
+        this.protoTargets = parsed.protocol.targets;
+        break;
+    case 'tcp':
+    case 'udp':
         this.ports = parsed.protocol.targets.sort(function (a, b) {
             var first = hasOwnProperty(a, 'start') ? a.start : a;
             var second = hasOwnProperty(b, 'start') ? b.start : b;
             return Number(first) - Number(second);
         });
         this.protoTargets = this.ports;
+        break;
+    default:
+        throw new validators.InvalidParamError('rule',
+            'unknown protocol "%s"', this.protocol);
     }
 
     if (this.protoTargets.length > MAX_PORTS) {
@@ -582,10 +594,20 @@ FwRule.prototype.raw = function () {
         raw.owner_uuid = this.owner_uuid;
     }
 
-    if (icmpr.test(this.protocol)) {
+    switch (this.protocol) {
+    case 'icmp':
+    case 'icmp6':
         raw.types = this.types;
-    } else {
+        break;
+    case 'ah':
+    case 'esp':
+        break;
+    case 'tcp':
+    case 'udp':
         raw.ports = this.ports;
+        break;
+    default:
+        throw new Error('unknown protocol: ' + this.protocol);
     }
 
     for (var s in STRING_PROPS) {
@@ -662,8 +684,10 @@ FwRule.prototype.text = function () {
     });
 
     // Protocol-specific text: different for ICMP rather than TCP/UDP
-    if (icmpr.test(this.protocol)) {
-        protoTxt = util.format('%sTYPE %s%s',
+    switch (this.protocol) {
+    case 'icmp':
+    case 'icmp6':
+        protoTxt = util.format(' %sTYPE %s%s',
             this.types.length > 1 ? '(' : '',
             this.types.map(function (type) {
                 return type.toString().split(':');
@@ -672,7 +696,13 @@ FwRule.prototype.text = function () {
             }).join(' AND TYPE '),
             this.types.length > 1 ? ')' : ''
         );
-    } else {
+        break;
+    case 'ah':
+    case 'esp':
+        protoTxt = '';
+        break;
+    case 'tcp':
+    case 'udp':
         ports = this.ports.map(function (port) {
             if (hasOwnProperty(port, 'start') &&
                 hasOwnProperty(port, 'end')) {
@@ -688,21 +718,24 @@ FwRule.prototype.text = function () {
             }
         });
         if (containsRange) {
-            protoTxt = util.format('PORTS %s', ports.join(', '));
+            protoTxt = util.format(' PORTS %s', ports.join(', '));
         } else {
-            protoTxt = util.format('%sPORT %s%s',
+            protoTxt = util.format(' %sPORT %s%s',
                 ports.length > 1 ? '(' : '',
                 ports.join(' AND PORT '),
                 ports.length > 1 ? ')' : ''
             );
         }
+        break;
+    default:
+        throw new Error('unknown protocol: ' + this.protocol);
     }
 
     if (this.priority > 0) {
         prioTxt += ' PRIORITY ' + this.priority.toString();
     }
 
-    return util.format('FROM %s%s%s TO %s%s%s %s %s %s%s',
+    return util.format('FROM %s%s%s TO %s%s%s %s %s%s%s',
             targets.from.length > 1 ? '(' : '',
             targets.from.join(' OR '),
             targets.from.length > 1 ? ')' : '',
diff --git a/lib/validators.js b/lib/validators.js
index 4238cc9..c1aceb5 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -41,7 +41,6 @@ var VError = require('verror').VError;
 
 
 
-var icmpr = /^icmp6?$/;
 var portRE = /^[0-9]{1,5}$/;
 var UUID_REGEX =
     /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
@@ -138,8 +137,17 @@ function validateProtocol(protocol) {
         return false;
     }
 
-    var protoLC = protocol.toLowerCase();
-    return ((protoLC === 'tcp') || (protoLC === 'udp') || icmpr.test(protoLC));
+    switch (protocol.toLowerCase()) {
+    case 'ah':
+    case 'esp':
+    case 'icmp':
+    case 'icmp6':
+    case 'tcp':
+    case 'udp':
+        return true;
+    default:
+        return false;
+    }
 }
 
 
diff --git a/src/fwrule.jison b/src/fwrule.jison
index d703adb..a466f50 100644
--- a/src/fwrule.jison
+++ b/src/fwrule.jison
@@ -83,6 +83,10 @@ t                       {digit}{1,3}
 "icmp"                  return 'ICMP';
 "ICMP6"                 return 'ICMP6';
 "icmp6"                 return 'ICMP6';
+"AH"                    return 'AH';
+"ah"                    return 'AH';
+"ESP"                   return 'ESP';
+"esp"                   return 'ESP';
 "TYPE"                  return 'TYPE';
 "type"                  return 'TYPE';
 "CODE"                  return 'CODE';
@@ -228,6 +232,12 @@ protocol
     | ICMP6 type_list
         { yy.validateOKVersion(3, 'IPv6');
           $$ = { 'name': $1.toLowerCase(), 'targets': $2 }; }
+    | AH
+        { yy.validateOKVersion(4, 'AH');
+          $$ = { 'name': $1.toLowerCase(), 'targets': [ 'all' ] }; }
+    | ESP
+        { yy.validateOKVersion(4, 'ESP');
+          $$ = { 'name': $1.toLowerCase(), 'targets': [ 'all' ] }; }
     ;
 
 
diff --git a/test/parser.test.js b/test/parser.test.js
index dac1309..9272991 100644
--- a/test/parser.test.js
+++ b/test/parser.test.js
@@ -48,6 +48,9 @@ function checkInvalidRules(t, toCheck) {
     t.end();
 }
 
+function hasProtoTargets(proto) {
+    return (proto !== 'ah' && proto !== 'esp');
+}
 
 // --- Tests
 
@@ -132,6 +135,26 @@ test('case insensitivity', function (t) {
         }
     };
 
+    var allowAH = {
+        from: [ [ 'wildcard', 'any' ] ],
+        to: [ [ 'wildcard', 'vmall' ] ],
+        action: 'allow',
+        protocol: {
+            name: 'ah',
+            targets: [ 'all' ]
+        }
+    };
+
+    var allowESP = {
+        from: [ [ 'wildcard', 'any' ] ],
+        to: [ [ 'wildcard', 'vmall' ] ],
+        action: 'allow',
+        protocol: {
+            name: 'esp',
+            targets: [ 'all' ]
+        }
+    };
+
     var subnetToAll = {
         from: [ [ 'subnet', '10.8.0.0/16' ] ],
         to: [ [ 'wildcard', 'vmall' ] ],
@@ -162,6 +185,10 @@ test('case insensitivity', function (t) {
         [ util.format('from any to vm %s allow udp ports 50', vm), anyToVM ],
         [ util.format('from ANY to VM %s allow UDP port 50', vm), anyToVM ],
         [ util.format('from any to vm %s allow udp port 50', vm), anyToVM ],
+        [ 'from ANY to ALL VMS allow AH', allowAH ],
+        [ 'from any to all vms allow ah', allowAH ],
+        [ 'from ANY to ALL VMS allow ESP', allowESP ],
+        [ 'from any to all vms allow esp', allowESP ],
         [ 'FROM SUBNET 10.8.0.0/16 TO ALL VMS ALLOW ICMP TYPE 30',
             subnetToAll ],
         [ 'FROM subnet 10.8.0.0/16 TO all vms ALLOW icmp type 30',
@@ -226,6 +253,7 @@ test('incomplete rule text', function (t) {
         'subnet fd00::/64', 'tag foo', 'tag foo = bar',
         'vm ca3eb1d6-1555-44fb-ea1a-ab66f4685214'
     ];
+    var protocols = parser.PROTOCOLS.filter(hasProtoTargets);
     var endings = [ 'port', 'ports', 'ports 1 -', 'ports 1-', 'type',
         'type 128 code' ];
 
@@ -240,7 +268,7 @@ test('incomplete rule text', function (t) {
     }
 
     buildStr('FROM',
-        [ targets, to, targets, parser.ACTIONS, parser.PROTOCOLS, endings ]);
+        [ targets, to, targets, parser.ACTIONS, protocols, endings ]);
 
     checkInvalidRules(t, check);
 });
@@ -447,7 +475,9 @@ test('Parser option: maxVersion', function (t) {
 
         // Version 4 features:
         [ 'FROM tag a to tag b ALLOW tcp PORT 80 PRIORITY 1', 3,
-          'priority levels' ]
+          'priority levels' ],
+        [ 'FROM tag a to tag b ALLOW ah', 3, 'AH' ],
+        [ 'FROM tag a to tag b ALLOW esp', 3, 'ESP' ]
     ].forEach(function (cfg) {
         var rule = cfg[0];
         var v = cfg[1];
diff --git a/test/rule.test.js b/test/rule.test.js
index e43a436..9d46806 100644
--- a/test/rule.test.js
+++ b/test/rule.test.js
@@ -1575,7 +1575,7 @@ test('Tag names and values: Keywords', function (t) {
     var kws = [
         'tag', 'from', 'to', 'ip', 'subnet', 'vm', 'any', 'all', 'all vms',
         'vms', 'or', 'and', 'block', 'allow', 'port', 'ports', 'tcp', 'udp',
-        'icmp', 'icmp6', 'type', 'code', 'priority'
+        'icmp', 'icmp6', 'type', 'code', 'priority', 'ah', 'esp'
     ];
 
     var check = [];
@@ -1727,6 +1727,14 @@ test('Tag names and values: Unicode whitespace characters', function (t) {
 
 test('Priority levels', function (t) {
     [
+        [ 'FROM tag "a" TO tag "b" ALLOW ah PRIORITY 12',
+          { priority: 12, protocol: 'ah' } ],
+        [ 'FROM tag "a" TO tag "b" BLOCK ah PRIORITY 29',
+          { priority: 29, protocol: 'ah', action: 'block' } ],
+        [ 'FROM tag "a" TO tag "b" ALLOW esp PRIORITY 31',
+          { priority: 31, protocol: 'esp' } ],
+        [ 'FROM tag "a" TO tag "b" BLOCK esp PRIORITY 99',
+          { priority: 99, protocol: 'esp', action: 'block' } ],
         [ 'FROM tag "a" TO tag "b" ALLOW tcp PORT 80 PRIORITY 25',
           { priority: 25, protocol: 'tcp', ports: [ 80 ] } ],
         [ 'FROM tag "a" TO tag "b" ALLOW tcp PORT 443 PRIORITY 49',
@@ -1862,3 +1870,117 @@ test('Priority level 0 is implicit', function (t) {
 
     t.end();
 });
+
+
+test('AH protocol', function (t) {
+    var desc = 'AH protocol';
+    var ruleTxt = 'FROM tag "a" TO tag "b" ALLOW ah';
+    var rule = fwrule.create({
+        rule: ruleTxt,
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        version: fwrule.generateVersion()
+    });
+
+    var raw = {
+        from: {
+            ips: [],
+            subnets: [],
+            vms: [],
+            tags: ['a'],
+            wildcards: []
+        },
+        to: {
+            ips: [],
+            subnets: [],
+            vms: [],
+            tags: ['b'],
+            wildcards: []
+        },
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        action: 'allow',
+        priority: 0,
+        protocol: 'ah',
+        uuid: rule.uuid,
+        version: rule.version
+    };
+
+    t.deepEqual(rule.raw(), raw, 'rule.raw()');
+    t.deepEqual(rule.from, raw.from, 'rule.from');
+    t.deepEqual(rule.to, raw.to, 'rule.to');
+    t.ok(!rule.allVMs, 'rule.allVMs');
+
+    var ser = {
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        global: true,
+        rule: ruleTxt,
+        uuid: rule.uuid,
+        version: rule.version
+    };
+
+    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
+
+    t.end();
+});
+
+
+test('ESP protocol', function (t) {
+    var desc = 'ESP protocol';
+    var ruleTxt = 'FROM tag "a" TO tag "b" ALLOW esp';
+    var rule = fwrule.create({
+        rule: ruleTxt,
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        version: fwrule.generateVersion()
+    });
+
+    var raw = {
+        from: {
+            ips: [],
+            subnets: [],
+            vms: [],
+            tags: ['a'],
+            wildcards: []
+        },
+        to: {
+            ips: [],
+            subnets: [],
+            vms: [],
+            tags: ['b'],
+            wildcards: []
+        },
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        action: 'allow',
+        priority: 0,
+        protocol: 'esp',
+        uuid: rule.uuid,
+        version: rule.version
+    };
+
+    t.deepEqual(rule.raw(), raw, 'rule.raw()');
+    t.deepEqual(rule.from, raw.from, 'rule.from');
+    t.deepEqual(rule.to, raw.to, 'rule.to');
+    t.ok(!rule.allVMs, 'rule.allVMs');
+
+    var ser = {
+        created_by: 'fwadm',
+        description: desc,
+        enabled: true,
+        global: true,
+        rule: ruleTxt,
+        uuid: rule.uuid,
+        version: rule.version
+    };
+
+    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
+
+    t.end();
+});
diff --git a/test/validators.test.js b/test/validators.test.js
index 65c62b8..e51789c 100644
--- a/test/validators.test.js
+++ b/test/validators.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2016, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -139,6 +139,10 @@ test('ports', function (t) {
 test('protocols', function (t) {
     var i;
     var valid = [
+        'ah',
+        'AH',
+        'esp',
+        'ESP',
         'tcp',
         'TCP',
         'udp',
@@ -190,6 +194,7 @@ test('actions', function (t) {
         '65536',
         '',
         'something',
+        'pass',
         'permit',
         'obstruct'
     ];
diff --git a/tools/gen-rr-svgs.js b/tools/gen-rr-svgs.js
index eea937a..becf69d 100755
--- a/tools/gen-rr-svgs.js
+++ b/tools/gen-rr-svgs.js
@@ -83,7 +83,9 @@ var protoDiagram = Diagram(
         Sequence(Terminal('TCP'), NonTerminal('port_list')),
         Sequence(Terminal('UDP'), NonTerminal('port_list')),
         Sequence(Terminal('ICMP'), NonTerminal('type_list')),
-        Sequence(Terminal('ICMP6'), NonTerminal('type_list'))));
+        Sequence(Terminal('ICMP6'), NonTerminal('type_list')),
+        Terminal('AH'),
+        Terminal('ESP')));
 
 var portListDiagram = Diagram(
     Choice(0,
