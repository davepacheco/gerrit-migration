commit 5c6d61d35c26032f8f406d1ca52164a984aa6d19 (refs/changes/07/1007/1)
Author: Chris Burroughs <chris.burroughs@joyent.com>
Date:   2016-11-30T13:56:05-05:00 (2 years, 10 months ago)
    
    ./bin/triton instance list

diff --git a/lib/do_instance/do_list.js b/lib/do_instance/do_list.js
index 79c1b7b..47af52b 100644
--- a/lib/do_instance/do_list.js
+++ b/lib/do_instance/do_list.js
@@ -74,84 +74,93 @@ function do_list(subcmd, opts, args, callback) {
     var imgs = [];
     var insts;
 
-    vasync.parallel({funcs: [
-        function getTheImages(next) {
-            self.top.tritonapi.listImages({
-                state: 'all',
-                useCache: true
-            }, function (err, _imgs) {
-                if (err) {
-                    if (err.statusCode === 403) {
-                        /*
-                         * This could be a authorization error due to RBAC
-                         * on a subuser. We don't want to fail `triton inst ls`
-                         * if the subuser can ListMachines, but not ListImages.
-                         */
-                        log.debug(err,
-                            'authz error listing images for insts info');
-                        next();
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            callback(setupErr);
+        }
+        vasync.parallel({funcs: [
+            function getTheImages(next) {
+                self.top.tritonapi.listImages({
+                    state: 'all',
+                    useCache: true
+                }, function (err, _imgs) {
+                    if (err) {
+                        if (err.statusCode === 403) {
+                            /*
+                             * This could be a authorization error due
+                             * to RBAC on a subuser. We don't want to
+                             * fail `triton inst ls` if the subuser
+                             * can ListMachines, but not ListImages.
+                             */
+                            log.debug(
+                                err,
+                                'authz error listing images for insts info');
+                            next();
+                        } else {
+                            next(err);
+                        }
                     } else {
-                        next(err);
+                        imgs = _imgs;
+                        next();
                     }
-                } else {
-                    imgs = _imgs;
-                    next();
-                }
-            });
-        },
-        function getTheMachines(next) {
-            self.top.tritonapi.cloudapi.listMachines(listOpts,
+                });
+            },
+            function getTheMachines(next) {
+                self.top.tritonapi.cloudapi.listMachines(
+                    listOpts,
                     function (err, _insts) {
-                if (err) {
-                    next(err);
-                } else {
-                    insts = _insts;
-                    next();
-                }
+                        if (err) {
+                            next(err);
+                        } else {
+                            insts = _insts;
+                            next();
+                        }
+                    });
+            }
+        ]}, function (err, results) {
+            /*
+             * Error handling: vasync.parallel's `err` is always a
+             * MultiError. We want to prefer the `getTheMachines` err,
+             * e.g. if both get a self-signed cert error.
+             */
+            if (err) {
+                err = results.operations[1].err || err;
+                return callback(err);
+            }
+
+            // map "uuid" => "image_name"
+            var imgmap = {};
+            imgs.forEach(function (img) {
+                imgmap[img.id] = format('%s@%s', img.name, img.version);
             });
-        }
-    ]}, function (err, results) {
-        /*
-         * Error handling: vasync.parallel's `err` is always a MultiError. We
-         * want to prefer the `getTheMachines` err, e.g. if both get a
-         * self-signed cert error.
-         */
-        if (err) {
-            err = results.operations[1].err || err;
-            return callback(err);
-        }
 
-        // map "uuid" => "image_name"
-        var imgmap = {};
-        imgs.forEach(function (img) {
-            imgmap[img.id] = format('%s@%s', img.name, img.version);
-        });
+            // Add extra fields for nice output.
+            var now = new Date();
+            insts.forEach(function (inst) {
+                var created = new Date(inst.created);
+                inst.age = common.longAgo(created, now);
+                inst.img = imgmap[inst.image] ||
+                    common.uuidToShortId(inst.image);
+                inst.shortid = inst.id.split('-', 1)[0];
+                var flags = [];
+                if (inst.docker) flags.push('D');
+                if (inst.firewall_enabled) flags.push('F');
+                if (inst.brand === 'kvm') flags.push('K');
+                inst.flags = flags.length ? flags.join('') : undefined;
+            });
 
-        // Add extra fields for nice output.
-        var now = new Date();
-        insts.forEach(function (inst) {
-            var created = new Date(inst.created);
-            inst.age = common.longAgo(created, now);
-            inst.img = imgmap[inst.image] || common.uuidToShortId(inst.image);
-            inst.shortid = inst.id.split('-', 1)[0];
-            var flags = [];
-            if (inst.docker) flags.push('D');
-            if (inst.firewall_enabled) flags.push('F');
-            if (inst.brand === 'kvm') flags.push('K');
-            inst.flags = flags.length ? flags.join('') : undefined;
+            if (opts.json) {
+                common.jsonStream(insts);
+            } else {
+                tabula(insts, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort,
+                    dottedLookup: true
+                });
+            }
+            callback();
         });
-
-        if (opts.json) {
-            common.jsonStream(insts);
-        } else {
-            tabula(insts, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort,
-                dottedLookup: true
-            });
-        }
-        callback();
     });
 }
 
