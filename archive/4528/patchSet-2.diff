From bc9b1a93976d7687a10541571e4b7b34df706f50 Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Wed, 2 May 2018 18:40:47 +0000
Subject: [PATCH] TRITON-603 cnapi should be aware of alternate admin nictags

---
 lib/app.js                      | 12 ++++++++-
 lib/common.js                   |  7 ++++-
 lib/models/server.js            | 45 ++++++---------------------------
 lib/workflows/server-sysinfo.js | 15 +++++++++--
 4 files changed, 38 insertions(+), 41 deletions(-)

diff --git a/lib/app.js b/lib/app.js
index 3edde1c..17b6733 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -589,6 +589,12 @@ App.prototype.haveSysinfoNicsChanged = function (sysinfo, fullNapiList) {
     var toAddNics = [];
     var toUpdateNics = [];
     var uuid = sysinfo['UUID'];
+    var admin_tag = 'admin';
+    var sys_admin_tag = sysinfo['Admin NIC Tag'];
+
+    if (sys_admin_tag && sys_admin_tag.length !== 0) {
+        admin_tag = sys_admin_tag;
+    }
 
     for (n in sysinfo['Network Interfaces']) {
         sysinfoNics[n] = sysinfo['Network Interfaces'][n];
@@ -660,8 +666,12 @@ App.prototype.haveSysinfoNicsChanged = function (sysinfo, fullNapiList) {
                 newNic.nic_tags_provided = sysinfoNic['NIC Names'];
             }
 
+            /*
+             * Only the admin nic should be on the PHYS datalink and have
+             * an IP (and thus no VLAN id).
+             */
             if (!sysinfoNic.hasOwnProperty('VLAN') && sysinfoNic.ip4addr) {
-                newNic.nic_tag = 'admin';
+                newNic.nic_tag = admin_tag;
                 newNic.vlan_id = 0;
             }
 
diff --git a/lib/common.js b/lib/common.js
index 7fd600c..f721517 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -108,6 +108,11 @@ function orderedKVString(obj) {
 function getAdminIp(sysinfo) {
     var interfaces;
     var ip;
+    var admin_tag = 'admin';
+
+    if (sysinfo['Admin NIC Tag']) {
+        admin_tag = sysinfo['Admin NIC Tag'];
+    }
 
     interfaces = sysinfo['Network Interfaces'];
 
@@ -117,7 +122,7 @@ function getAdminIp(sysinfo) {
         }
 
         var nic = interfaces[iface]['NIC Names'];
-        var isAdmin = nic.indexOf('admin') !== -1;
+        var isAdmin = nic.indexOf(admin_tag) !== -1;
         if (isAdmin) {
             ip = interfaces[iface]['ip4addr'];
             return ip;
diff --git a/lib/models/server.js b/lib/models/server.js
index 016fb62..cb77f18 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -2174,10 +2174,10 @@ function (opts) {
                 // instead of trying to fish the IP out of the networks.
                 serverAdminIp = sysinfo['CN Agent IP'];
             } else {
-                try {
-                    serverAdminIp = firstAdminIp(sysinfo);
-                } catch (e) {
-                    wfcb(new VError(e, 'parsing server ip address'));
+                serverAdminIp = common.getAdminIp(sysinfo);
+                if (!serverAdminIp) {
+                    wfcb(new VError('parsing server ip address in sendTaskReq '
+                        + '(No admin NICs detected.)'));
                     return;
                 }
             }
@@ -2382,10 +2382,10 @@ ModelServer.prototype.sendRequest = function (opts, cb) {
                 // instead of trying to fish the IP out of the networks.
                 serverAdminIp = sysinfo['CN Agent IP'];
             } else {
-                try {
-                    serverAdminIp = firstAdminIp(sysinfo);
-                } catch (e) {
-                    wfcb(new VError(e, 'parsing server ip address'));
+                serverAdminIp = common.getAdminIp(sysinfo);
+                if (!serverAdminIp) {
+                    wfcb(new VError('parsing server ip address in sendReq '
+                        + '(No admin NICs detected.)'));
                     return;
                 }
             }
@@ -2477,33 +2477,4 @@ ModelServer.prototype.getWaitlist = function () {
 };
 
 
-function firstAdminIp(sysinfo) {
-    var interfaces;
-    var addr;
-
-    // first see if we have an override in the sysinfo
-    addr = sysinfo['Admin IP'];
-    if (addr) {
-        return addr;
-    }
-
-    interfaces = sysinfo['Network Interfaces'];
-
-    for (var iface in interfaces) {
-        if (!interfaces.hasOwnProperty(iface)) {
-            continue;
-        }
-
-        var nic = interfaces[iface]['NIC Names'];
-        var isAdmin = nic.indexOf('admin') !== -1;
-        if (isAdmin) {
-            addr = interfaces[iface]['ip4addr'];
-            return addr;
-        }
-    }
-
-    throw new Error('No NICs with name "admin" detected.');
-}
-
-
 module.exports = ModelServer;
diff --git a/lib/workflows/server-sysinfo.js b/lib/workflows/server-sysinfo.js
index b07b223..cfdea26 100644
--- a/lib/workflows/server-sysinfo.js
+++ b/lib/workflows/server-sysinfo.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -179,6 +179,13 @@ function getExistingAggrs(job, cb) {
 
 function getServerNics(job, cb) {
     var napi = new sdcClients.NAPI({ url: napiUrl });
+    var admin_tag = 'admin';
+    var sys_admin_tag = job.params.sysinfo['Admin NIC Tag'];
+
+    if (sys_admin_tag && sys_admin_tag.length !== 0) {
+        admin_tag = sys_admin_tag;
+    }
+
     napi.getNics(job.params.sysinfo['UUID'], function (err, nics) {
         if (err) {
             cb(err);
@@ -261,8 +268,12 @@ function getServerNics(job, cb) {
                     newNic.nic_tags_provided = sysinfoNic['NIC Names'];
                 }
 
+                /*
+                 * Only the admin nic should be on the PHYS datalink and have
+                 * an IP (and thus no VLAN id).
+                 */
                 if (!sysinfoNic.hasOwnProperty('VLAN') && sysinfoNic.ip4addr) {
-                    newNic.nic_tag = 'admin';
+                    newNic.nic_tag = admin_tag;
                     newNic.vlan_id = 0;
                 }
 
-- 
2.21.0

