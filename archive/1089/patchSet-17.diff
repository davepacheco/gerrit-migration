commit 379c8af4c872c6e06ce73adb82d38f7846e38d05 (refs/changes/89/1089/17)
Author: Nick Zivkovic <zivkovic.nick@gmail.com>
Date:   2018-02-13T06:57:10+00:00 (1 year, 8 months ago)
    
    FWAPI-234 Firewall rule queries should be validated

diff --git a/lib/endpoints/firewalls/vms.js b/lib/endpoints/firewalls/vms.js
index 44a2c63..137931a 100644
--- a/lib/endpoints/firewalls/vms.js
+++ b/lib/endpoints/firewalls/vms.js
@@ -14,37 +14,23 @@
 
 'use strict';
 
-var hasKey = require('jsprim').hasKey;
-var mod_err = require('../../errors');
 var mod_persist = require('../../persist');
-var validators = require('fwrule/lib/validators');
+var validate = require('restify-warden');
 
 
 
 // --- Internal helpers
 
 
-
-/**
- * restify 'before' handler for validating request parameters
- * for getVMrules below
- */
-function validateParams(req, res, next) {
-    if (!validators.validateUUID(req.params.uuid)) {
-        next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
-            [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
-        return;
-    }
-
-    if (hasKey(req.params, 'owner_uuid') &&
-        !validators.validateUUID(req.params.owner_uuid)) {
-        next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
-            [ mod_err.invalidParam('owner_uuid', 'Invalid UUID') ]));
-        return;
+var VMS_SCHEMA = {
+    strict: true,
+    required: {
+        uuid: validate.UUID
+    },
+    optional: {
+        owner_uuid: validate.UUID
     }
-
-    next();
-}
+};
 
 
 
@@ -56,32 +42,39 @@ function validateParams(req, res, next) {
  * GET /firewalls/vms/:uuid
  */
 function getVMrules(req, res, next) {
-    req._vmapi.getVm(req.params, {
-        headers: {'request-id': req.getId()}
-    }, function (err, vm) {
+    validate.params(VMS_SCHEMA, null, req.params, function (err, validated) {
         if (err) {
             next(err);
             return;
         }
 
-        var filter = {
-            owner_uuid: vm.owner_uuid,
-            tags: vm.tags,
-            vms: [ vm.uuid ]
-        };
-
-        req.log.debug(filter, 'filtering UFDS rules');
-        mod_persist.vmRules(req._app, req.log, filter,
-            function (err2, rules) {
+        req._vmapi.getVm(validated, {
+            headers: {'request-id': req.getId()}
+        }, function (err2, vm) {
             if (err2) {
-                return next(err2);
+                next(err2);
+                return;
             }
 
-            res.send(200, rules.map(function (r) {
-                return r.serialize();
-            }));
-
-            return next();
+            var filter = {
+                owner_uuid: vm.owner_uuid,
+                tags: vm.tags,
+                vms: [ vm.uuid ]
+            };
+
+            req.log.debug(filter, 'filtering UFDS rules');
+            mod_persist.vmRules(req._app, req.log, filter,
+                function (err3, rules) {
+                    if (err3) {
+                        return next(err3);
+                    }
+
+                    res.send(200, rules.map(function (r) {
+                        return r.serialize();
+                    }));
+
+                    return next();
+                });
         });
     });
 }
@@ -97,7 +90,7 @@ function getVMrules(req, res, next) {
  */
 function register(server, before) {
     server.get({ path: '/firewalls/vms/:uuid', name: 'getVMrules' },
-        before.concat(validateParams), getVMrules);
+        before, getVMrules);
 }
 
 
diff --git a/lib/endpoints/resolve.js b/lib/endpoints/resolve.js
index 062116c..59d9ee8 100644
--- a/lib/endpoints/resolve.js
+++ b/lib/endpoints/resolve.js
@@ -16,28 +16,38 @@
 
 var fw = require('../rule');
 var mod_persist = require('../persist');
-var restify = require('restify');
+var mod_err = require('../errors');
 var util = require('util');
-
+var validate = require('restify-warden');
+var constants = require('../util/constants');
 
 var hasKey = require('jsprim').hasKey;
 
 
 // --- Internal helpers
 
+function validateTags(_, name, tags, callback) {
+    if (typeof (tags) !== 'object') {
+        callback(new mod_err.invalidParam(name, constants.msg.OBJ));
+        return;
+    }
+    callback(null, tags);
+}
 
-
-/**
- * Validate shared request params
- */
-function validateReqParams(req, res, next) {
-    if (!req.params.owner_uuid) {
-        return next(new restify.MissingParameterError(
-            '"owner_uuid" parameter required'));
+var RESOLVE_SCHEMA = {
+    strict: true,
+    required: {
+        owner_uuid: validate.UUID
+    },
+    optional: {
+        tags: validateTags,
+        tag: validate.string,
+        vms: validate.UUIDarray,
+        ips: validate.IParray,
+        allVMs: validate.boolean
     }
+};
 
-    return next();
-}
 
 
 /**
@@ -209,37 +219,47 @@ function tagMatches(key, val, tagsWanted) {
  * - Parameters that can be used to lookup other VMs on the other side of
  *   the rules in VMAPI:
  *   - tags, eg: "tags": { "one": "val" }
+ *   - tag, eg: "tag": "myTag"
  *   - vms, eg: "vms": [ "<UUID 1>", "<UUID 2>" ]
  *   - allVMs (whether or not one of the rules contains "all vms"),
  *     eg: "allVMs": true
  */
 function resolve(req, res, next) {
     // ips, owner_uuid, tags, vms
+    validate.params(RESOLVE_SCHEMA, null, req.params,
 
-    mod_persist.vmRules(req._app, req.log, req.params,
-        function (err, rules) {
+    function (err, validated) {
         if (err) {
             next(err);
             return;
         }
+        mod_persist.vmRules(req._app, req.log, validated,
 
-        resolveTargets(rules, req.params, req.log, function (err2, sideData) {
-            if (err2) {
-                return next(err2);
+        function (err1, rules) {
+            if (err1) {
+                next(err1);
+                return;
             }
 
-            var payload = {
-                rules: rules.map(function (r) {
-                    return r.serialize();
-                })
-            };
+            resolveTargets(rules, validated, req.log,
 
-            for (var type in sideData) {
-                payload[type] = sideData[type];
-            }
+            function (err2, sideData) {
+                if (err2) {
+                    return next(err2);
+                }
+
+                var payload = {
+                    rules: rules.map(function (r) {
+                        return r.serialize();
+                    })
+                };
+                for (var type in sideData) {
+                    payload[type] = sideData[type];
+                }
 
-            res.send(200, payload);
-            return next();
+                res.send(200, payload);
+                return next();
+            });
         });
     });
 }
@@ -254,9 +274,8 @@ function resolve(req, res, next) {
  * Registers endpoints with a restify server
  */
 function register(server, before) {
-    var allBefore = before.concat(validateReqParams);
     server.post({ path: '/resolve', name: 'resolve' },
-            allBefore, resolve);
+            before, resolve);
 }
 
 
diff --git a/lib/endpoints/rules/index.js b/lib/endpoints/rules/index.js
index d2be85d..6cba1bb 100644
--- a/lib/endpoints/rules/index.js
+++ b/lib/endpoints/rules/index.js
@@ -20,7 +20,7 @@ var mod_err = require('../../errors');
 var mod_persist = require('../../persist');
 var restify = require('restify');
 var Rule = require('../../rule').Rule;
-var util_validate = require('../../util/validate');
+var validate = require('restify-warden');
 
 
 var hasKey = require('jsprim').hasKey;
@@ -77,34 +77,40 @@ function disallowOwnerForGlobal(req, res, next) {
  * GET /rules
  */
 function listRules(req, res, next) {
-    var validated;
-    var serializeOpts;
-
-    try {
-        validated = util_validate.params({
-            optional: {
-                fields: util_validate.fields
-                // XXX: add all of the filter fields here!
-            }
-        }, req.params);
-    } catch (validateErr) {
-        return next(validateErr);
-    }
-
-    if (validated.fields) {
-        serializeOpts = { fields: validated.fields };
-    }
-
-    return mod_persist.findRules(req._app, req.log, req.params,
-        function (err, rules) {
-        if (err) {
-            return next(err);
+    validate.params({
+        strict: true,
+        optional: {
+            fields: validate.fieldsArray,
+            ip: validate.IParray,
+            owner_uuid: validate.UUIDarray,
+            global: validate.boolean,
+            tag: validate.string,
+            subnet: validate.subnetArray,
+            vm: validate.UUIDarray
+        }
+    }, null, req.params, function cb(valErr, validated) {
+        var serializeOpts;
+        if (valErr) {
+            next(valErr);
+            return;
+        }
+        if (validated.fields) {
+            serializeOpts = { fields: validated.fields };
         }
+        mod_persist.findRules(req._app, req.log, req.params,
+            function (err, rules) {
+            if (err) {
+                next(err);
+                return;
+            }
 
-        res.send(200, rules.map(function (rule) {
-            return rule.serialize(serializeOpts);
-        }));
-        return next();
+            res.send(200, rules.map(function (rule) {
+                rule.serialize(serializeOpts);
+                return;
+            }));
+            next();
+            return;
+        });
     });
 }
 
@@ -199,21 +205,37 @@ function updateRule(req, res, next) {
  * DELETE /rules/:uuid
  */
 function deleteRule(req, res, next) {
-    mod_persist.deleteRule(req._app, req.log, req.params.uuid, function (err) {
-        if (err) {
-            next(err);
+    validate.params({
+        strict: true,
+        required: {
+            uuid: validate.UUIDarray
+        }
+    }, null, req.params, function (valErr, validated) {
+        if (valErr) {
+            next(valErr);
             return;
         }
-
-        req._update.queue('fw.del_rule', req._rule.serialize(),
-            function (err2, update) {
-            if (err2) {
-                return next(err2);
+        var uuid = validated.uuid;
+        mod_persist.deleteRule(req._app, req.log, uuid, function (err) {
+            if (err) {
+                next(err);
+                return;
             }
 
-            res.header('x-update-id', update.uuid);
-            res.send(204);
-            return next();
+            req._update.queue('fw.del_rule', req._rule.serialize(),
+
+                function (err2, update) {
+
+                if (err2) {
+                    next(err2);
+                    return;
+                }
+
+                res.header('x-update-id', update.uuid);
+                res.send(204);
+                next();
+                return;
+            });
         });
     });
 }
diff --git a/lib/endpoints/updates.js b/lib/endpoints/updates.js
index e24ecfd..e285f65 100644
--- a/lib/endpoints/updates.js
+++ b/lib/endpoints/updates.js
@@ -14,8 +14,9 @@
 
 'use strict';
 
-var hasKey = require('jsprim').hasKey;
 var restify = require('restify');
+var mod_err = require('../errors');
+var validate = require('restify-warden');
 
 
 
@@ -23,11 +24,24 @@ var restify = require('restify');
 
 
 
-var UPDATES = {
-    'sync': validateSync,
-    'vm.add': validateAdd,
-    'vm.update': validateUpdate,
-    'vm.delete': validateDel
+var UPDATE_TYPES = [
+    'sync',
+    'vm.add',
+    'vm.update',
+    'vm.delete'
+];
+
+var UPDATE_SCHEMA = {
+    strict: true,
+    required: {
+        type: validateUpdateTypes
+    },
+    optional: {
+        uuid: validate.UUID,
+        req_id: validate.UUID,
+        owner_uuid: validate.UUID,
+        server_uuid: validate.UUID
+    }
 };
 
 
@@ -35,30 +49,14 @@ var UPDATES = {
 // --- Internal
 
 
-
-function validateSync(params) {
-    return {
-        type: params.type,
-        req_id: params.req_id
-    };
-}
-
-function validateAdd(params) {
-    return params;
-}
-
-
-function validateDel(params) {
-    return params;
-}
-
-
-function validateUpdate(params) {
-    return params;
+function validateUpdateTypes(_, name, type, callback) {
+    if (UPDATE_TYPES.indexOf(type) === -1) {
+        callback(mod_err.invalidParamErr(name, 'Invalid update type'));
+        return;
+    }
+    callback();
 }
 
-
-
 // --- Restify handlers
 
 
@@ -67,7 +65,6 @@ function validateUpdate(params) {
  * POST /updates
  */
 function createUpdate(req, res, next) {
-    var updateParams;
 
     if (!req.params.type) {
         next(new restify.MissingParameterError(
@@ -75,26 +72,21 @@ function createUpdate(req, res, next) {
         return;
     }
 
-    if (!hasKey(UPDATES, req.params.type)) {
-        next(new restify.MissingParameterError(
-            'Unknown update type'));
-        return;
-    }
-
-    try {
-        updateParams = UPDATES[req.params.type](req.params);
-    } catch (validationErr) {
-        next(validationErr);
-        return;
-    }
-
-    req._update.queue(req.params.type, updateParams, function (err, res2) {
+    validate.params(UPDATE_SCHEMA, null, req.params, function (err, validated) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
-        res.send(202, { update_uuid: res2.uuid });
-        return next();
+        req._update.queue(req.params.type, validated, function (err2, res2) {
+            if (err2) {
+                next(err2);
+                return;
+            }
+
+            res.send(202, { update_uuid: res2.uuid });
+            next();
+        });
     });
 }
 
diff --git a/lib/persist.js b/lib/persist.js
index 5534cdd..2a6d952 100644
--- a/lib/persist.js
+++ b/lib/persist.js
@@ -17,9 +17,9 @@ var mod_jsprim = require('jsprim');
 var mod_moray = require('./moray');
 var restify = require('restify');
 var ufdsmodel = require('./ufds/model');
-var util_validate = require('./util/validate');
 var VError = require('verror');
 
+var validate = require('restify-warden');
 
 var hasKey = mod_jsprim.hasKey;
 var Rule = fw.Rule;
@@ -160,7 +160,7 @@ function updateRule(app, log, newRule, oldRule, callback) {
 }
 
 function deleteRule(app, log, uuid, callback) {
-    if (!util_validate.uuid(uuid)) {
+    if (!validate.isUUID(uuid)) {
         callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
         return;
@@ -176,7 +176,7 @@ function deleteRule(app, log, uuid, callback) {
 }
 
 function getRule(app, log, uuid, callback) {
-    if (!util_validate.uuid(uuid)) {
+    if (!validate.isUUID(uuid)) {
         callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
         return;
diff --git a/lib/rule.js b/lib/rule.js
index 974d925..2960bf0 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -19,7 +19,7 @@ var mod_err = require('./errors');
 var mod_rule = require('fwrule');
 var util = require('util');
 var util_ip = require('./util/ip');
-var util_validate = require('./util/validate');
+var validate = require('restify-warden');
 
 var fmt = util.format;
 var hasKey = require('jsprim').hasKey;
@@ -683,7 +683,7 @@ Rule.parentDn = function () {
  * Returns the DN based on the request
  */
 Rule.dnFromRequest = function (req) {
-    if (!util_validate.uuid(req.params.uuid)) {
+    if (!validate.isUUID(req.params.uuid)) {
         throw new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]);
     }
diff --git a/lib/util/array.js b/lib/util/array.js
deleted file mode 100644
index ed39068..0000000
--- a/lib/util/array.js
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * Array utilities
- */
-
-'use strict';
-
-var util = require('util');
-
-
-
-// --- Exports
-
-
-
-
-/**
- * Turn a value into an array, unless it is one already.
- */
-function splitToArray(obj) {
-    if (util.isArray(obj)) {
-        return obj;
-    }
-
-    if (obj === '') {
-        return [];
-    }
-
-    return obj.split(',');
-}
-
-
-
-module.exports = {
-    splitToArray: splitToArray
-};
diff --git a/lib/util/common.js b/lib/util/common.js
new file mode 100644
index 0000000..b8b3bbc
--- /dev/null
+++ b/lib/util/common.js
@@ -0,0 +1,124 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Utilities: sharing is caring
+ */
+
+'use strict';
+
+var errors = require('../errors');
+
+
+
+/**
+ * Turn a value into an array, unless it is one already.
+ */
+function arrayify(obj) {
+    if (typeof (obj) === 'object') {
+        return obj;
+    }
+
+    if (obj === '') {
+        return [];
+    }
+
+    return obj.split(',');
+}
+
+
+/**
+ * Returns true if the hash is empty
+ */
+function hashEmpty(hash) {
+    /* jsl:ignore (for unused variable warning) */
+    // eslint-disable-next-line
+    for (var k in hash) {
+        return false;
+    }
+    /* jsl:end */
+
+    return true;
+}
+
+
+/**
+ * Keeps repeating repeatCb, calling afterCb once done.
+ * the arguments to repeatCb are: fn(err, res, keepGoing)
+ * Every time repeatCb calls cb with keepGoing === true,
+ * repeatCb will be called again.
+ */
+function repeat(repeatCb, afterCb) {
+    var next;
+
+    next = function (err, res, keepGoing) {
+        if (!keepGoing) {
+            return afterCb(err, res);
+        }
+
+        /* jsl:ignore (for undeclared identifier warning) */
+        return setImmediate(function _repeat() { repeatCb(next); });
+        /* jsl:end (for undeclared identifier warning) */
+    };
+
+    /* jsl:ignore (for undeclared identifier warning) */
+    return setImmediate(function _repeatFirst() { repeatCb(next); });
+    /* jsl:end (for undeclared identifier warning) */
+}
+
+
+/**
+ * Extracts necessary params from a restify request object for passing to
+ * model functions
+ */
+function reqToOpts(req) {
+    return { app: req.app, log: req.log, params: req.params };
+}
+
+
+/**
+ * Returns an array of error elements for each parameter name in requiredParams
+ * that is not present in params
+ *
+ * @param requiredParams {Array}: list of required params
+ * @param params {Object}: hash of actual params
+ */
+function requireParams(requiredParams, params) {
+    var missing = [];
+    requiredParams.forEach(function (param) {
+        if (!params.hasOwnProperty(param)) {
+            missing.push(errors.missingParam(param));
+        }
+    });
+
+    return missing;
+}
+
+/**
+ * Translates parameters in from -> to (modifying to), using map as a guide
+ */
+function translateParams(from, map, to) {
+    for (var p in map) {
+        if (from.hasOwnProperty(p)) {
+            to[map[p]] = from[p];
+        }
+    }
+}
+
+
+
+module.exports = {
+    arrayify: arrayify,
+    hashEmpty: hashEmpty,
+    repeat: repeat,
+    requireParams: requireParams,
+    reqToOpts: reqToOpts,
+    translateParams: translateParams
+};
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 201cc94..d15a192 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
- * Constants
+ * Shared constants
  */
 
 
@@ -25,14 +25,27 @@ var PARSED_FIELDS = [
     'parsed.tags'
 ];
 
-var UUID_REGEX =
-    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
+var MESSAGES = {
+    INVALID_PARAMS: 'Invalid parameters',
+    ARRAY_OF_STR: 'must be an array of strings',
+    ARRAY_EMPTY: 'must not be an empty array',
+    STR: 'must be a string',
+    OBJ: 'must be an object',
+    INVALID_UUID: 'invalid UUID',
+    OFFSET: 'invalid value, offset must be an integer greater than or ' +
+        'equal to 0',
+    LIMIT: 'invalid limit, must be an integer greater than 0 or less than or ' +
+        'equal to 1000'
+};
 
 module.exports = {
     DEFAULT_LIMIT: 1000,
     MAX_RETRIES: 5,
     RETRY_DELAY: 5000,
-
-    UUID_REGEX: UUID_REGEX,
-    PARSED_FIELDS: PARSED_FIELDS
+    PARSED_FIELDS: PARSED_FIELDS,
+    msg: MESSAGES,
+    MAX_LIMIT: 1000,
+    MAX_STR_LEN: 64,
+    MIN_LIMIT: 1,
+    MIN_OFFSET: 0
 };
diff --git a/lib/util/ip.js b/lib/util/ip.js
index 00c7593..8b595eb 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
diff --git a/lib/util/validate.js b/lib/util/validate.js
deleted file mode 100644
index 65b1dba..0000000
--- a/lib/util/validate.js
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * Validation functions
- */
-
-'use strict';
-
-var assert = require('assert-plus');
-var constants = require('./constants');
-var mod_arr = require('./array');
-var mod_err = require('../errors');
-var util = require('util');
-
-
-
-// --- Exports
-
-function validUUID(uuid) {
-    return constants.UUID_REGEX.test(uuid);
-}
-
-function validateFields(name, val) {
-    var field;
-    var fields;
-    var unknown = [];
-
-    if (typeof (val) !== 'string' && !util.isArray(val)) {
-        throw mod_err.invalidParamSubErr(name, 'must be an array');
-    }
-
-    fields = mod_arr.splitToArray(val);
-
-    for (var f in fields) {
-        field = fields[f];
-
-        if (typeof (field) !== 'string') {
-            throw mod_err.invalidParamSubErr(name,
-                'must be an array of strings');
-        }
-
-        if (constants.PARSED_FIELDS.indexOf(field) === -1) {
-            unknown.push(field);
-        }
-    }
-
-    if (unknown.length !== 0) {
-        throw mod_err.invalidParamSubErr(name,
-            util.format('unknown field%s: %s',
-                unknown.length === 1 ? '' : 's',
-                unknown.join(', ')));
-    }
-
-    return fields;
-}
-
-
-function validateParams(validators, params) {
-    assert.object(validators, 'validators');
-    assert.object(params, 'params');
-
-    var errs = [];
-    var results = {};
-
-    // XXX: add required
-
-    for (var v in validators.optional) {
-        if (!params.hasOwnProperty(v)) {
-            continue;
-        }
-
-        try {
-            results[v] = validators.optional[v](v, params[v]);
-        } catch (valErr) {
-            errs.push(valErr);
-        }
-    }
-
-    if (errs.length !== 0) {
-        throw new mod_err.InvalidParamsError(
-            mod_err.INVALID_MSG, errs.map(function (e) {
-                return {
-                    code: e.code,
-                    field: e.field,
-                    message: e.message
-                };
-            }));
-    }
-
-    return results;
-}
-
-
-module.exports = {
-    uuid: validUUID,
-    fields: validateFields,
-    params: validateParams
-};
diff --git a/package.json b/package.json
index 99b6239..420d696 100644
--- a/package.json
+++ b/package.json
@@ -29,6 +29,7 @@
     "sdc-clients": "9.5.0",
     "ufds": "1.2.0",
     "restify": "4.3.0",
+    "restify-warden": "0.2.0",
     "trace-event": "1.3.0",
     "vasync": "1.6.4",
     "verror": "1.9.0",
diff --git a/test/config.json b/test/config.json
new file mode 100644
index 0000000..3120e3e
--- /dev/null
+++ b/test/config.json
@@ -0,0 +1,13 @@
+{
+    "api_poll_interval": 150000,
+    "firewaller_check_timeout": 5000,
+    "fwapi_url": "http://fwapi.coal-1.example.com",
+    "napi_url": "http://napi.coal-1.example.com",
+    "owner_uuid": "4917d426-2097-42f7-9303-b1968cd7bb3e",
+    "provision_image": "b4bdc598-8939-11e3-bea4-8341f6861379",
+    "provision_timeout": 600000,
+    "server1_uuid": "44454c4c-3200-1033-8034-b1c04f353637",
+    "server2_uuid": "",
+    "vmapi_url": "http://vmapi.coal-1.example.com",
+    "wfapi_url": "http://wfapi.coal-1.example.com"
+}
diff --git a/test/config.json.coal b/test/config.json.coal
new file mode 100644
index 0000000..3120e3e
--- /dev/null
+++ b/test/config.json.coal
@@ -0,0 +1,13 @@
+{
+    "api_poll_interval": 150000,
+    "firewaller_check_timeout": 5000,
+    "fwapi_url": "http://fwapi.coal-1.example.com",
+    "napi_url": "http://napi.coal-1.example.com",
+    "owner_uuid": "4917d426-2097-42f7-9303-b1968cd7bb3e",
+    "provision_image": "b4bdc598-8939-11e3-bea4-8341f6861379",
+    "provision_timeout": 600000,
+    "server1_uuid": "44454c4c-3200-1033-8034-b1c04f353637",
+    "server2_uuid": "",
+    "vmapi_url": "http://vmapi.coal-1.example.com",
+    "wfapi_url": "http://wfapi.coal-1.example.com"
+}
diff --git a/test/config.json.emy b/test/config.json.emy
new file mode 100644
index 0000000..d3e44e2
--- /dev/null
+++ b/test/config.json.emy
@@ -0,0 +1,13 @@
+{
+    "api_poll_interval": 150000,
+    "firewaller_check_timeout": 5000,
+    "fwapi_url": "http://fwapi.emy-9.joyent.us",
+    "napi_url": "http://napi.emy-9.joyent.us",
+    "owner_uuid": "4917d426-2097-42f7-9303-b1968cd7bb3e",
+    "provision_image": "b4bdc598-8939-11e3-bea4-8341f6861379",
+    "provision_timeout": 600000,
+    "server1_uuid": "44454c4c-3200-1033-8034-b1c04f353637",
+    "server2_uuid": "",
+    "vmapi_url": "http://vmapi.emy-9.joyent.us",
+    "wfapi_url": "http://wfapi.emy-9.joyent.us"
+}
diff --git a/test/integration/get.test.js b/test/integration/get.test.js
index eec4886..f566f63 100644
--- a/test/integration/get.test.js
+++ b/test/integration/get.test.js
@@ -16,7 +16,9 @@
 
 var test = require('tape');
 var mod_rule = require('../lib/rule');
+var mod_vm = require('../lib/vm');
 var mod_uuid = require('node-uuid');
+var mod_vasync = require('vasync');
 
 
 
@@ -28,25 +30,101 @@ var OWNERS = [
     mod_uuid.v4(),
     mod_uuid.v4()
 ];
-var RULES = [
-    {
-        enabled: true,
-        owner_uuid: OWNERS[0],
-        rule: 'FROM any TO all vms ALLOW tcp PORT 5000'
-    },
-    {
-        enabled: true,
-        owner_uuid: OWNERS[1],
-        rule: 'FROM (tag "foo" = "bar" OR tag "foo" = "baz") '
-            + 'TO tag "side" = "two" ALLOW tcp (PORT 5003 AND PORT 5004)'
-    },
-    {
-        enabled: true,
-        global: true,
-        rule: 'FROM any TO tag "foo" = "baz" ALLOW tcp PORT 5010'
-    }
+
+var VM_ALIASES = [
+    'vmapi0',
+    'fwapi0',
+    'cnapi0',
+    'napi0'
 ];
 
+var VM_UUIDS = [];
+var RULES = [];
+
+function alias2uuid(vm_alias, cb) {
+    mod_vm.list({ alias: vm_alias }, function (err, res) {
+        if (err) {
+            /* XXX handle this */
+            cb(err);
+            return;
+        }
+        res.forEach(function (vm) {
+            VM_UUIDS.push(vm.uuid);
+        });
+        cb(err, res);
+    });
+}
+
+test('get service zone uuids', function (t) {
+    mod_vasync.forEachPipeline({
+        'func': alias2uuid,
+        'inputs': VM_ALIASES
+    }, function (err, res) {
+        if (err) {
+            console.log(err);
+        }
+        console.log(res);
+        t.end();
+    });
+});
+
+test('Create Rules', function (t) {
+    RULES = [
+        {
+            enabled: true,
+            owner_uuid: OWNERS[0],
+            rule: 'FROM any TO all vms ALLOW tcp PORT 5000'
+        },
+        {
+            enabled: true,
+            owner_uuid: OWNERS[1],
+            rule: 'FROM (tag "foo" = "bar" OR tag "foo" = "baz") '
+                + 'TO tag "side" = "two" ALLOW tcp (PORT 5003 AND PORT 5004)'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM any TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+        },
+        /* IP rule, VM rule, subnet rule */
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM ip 8.8.8.8 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM ip 4.4.4.4 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM subnet 10.8.0.0/16 TO tag "foo" = "baz" ALLOW tcp' +
+                ' PORT 5010'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM subnet 10.7.0.0/16 TO tag "foo" = "baz" ALLOW tcp' +
+                ' PORT 5010'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM vm ' + VM_UUIDS[0] +
+                ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+        },
+        {
+            enabled: true,
+            global: true,
+            rule: 'FROM vm ' + VM_UUIDS[1] +
+                ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+        }
+    ];
+    t.end();
+});
+
 
 // --- Tests
 
@@ -89,6 +167,229 @@ test('get: owner rule with wrong owner_uuid', function (t) {
     });
 });
 
+test('get: owner rule with misformatted uuid', function (t) {
+    mod_rule.list(t, {
+        params: {
+            owner_uuid: 'not-a-uuid'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'owner_uuid',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-uuid' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with misformatted ip', function (t) {
+    mod_rule.list(t, {
+        params: {
+            ip: 'not-an-ip'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ 'not-an-ip' ],
+                message: 'invalid IP'
+            } ]
+        }
+    });
+});
+
+function test_done(t, _err, _res) {
+    t.end();
+}
+
+test('get: ip rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { ip: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'invalid IP'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { ip: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'invalid IPs'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with valid ip', function (t) {
+    mod_rule.list(t, {
+        params: { ip: '8.8.8.8' },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
+
+test('get: ip rule with valid ips', function (t) {
+    mod_rule.list(t, {
+        params: { ip: ['8.8.8.8', '4.4.4.4'] },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
+
+test('get: vm rule with misformatted vm', function (t) {
+    mod_rule.list(t, {
+        params: {
+            vm: 'not-a-vm'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-vm' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { vm: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { vm: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with valid vm', function (t) {
+    mod_rule.list(t, {
+        params: { vm: VM_UUIDS[0] },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
+
+test('get: vm rule with valid vms', function (t) {
+    mod_rule.list(t, {
+        params: { vm: [VM_UUIDS[0], VM_UUIDS[1]] },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
+
+test('get: subnet rule with misformatted subnet', function (t) {
+    mod_rule.list(t, {
+        params: {
+            subnet: 'not-a-subnet'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-subnet' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with valid subnet', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: '10.8.0.0/16' },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
+
+test('get: subnet rule with valid subnets', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: [ '10.8.0.0/16', '10.7.0.0/16'] },
+        expCode: 200
+    }, test_done.bind(null, t));
+});
 
 test('get: global rule with no params', function (t) {
     mod_rule.get(t, {
diff --git a/test/integration/resolve.test.js b/test/integration/resolve.test.js
index 4da22f4..f0ab098 100644
--- a/test/integration/resolve.test.js
+++ b/test/integration/resolve.test.js
@@ -81,6 +81,7 @@ test('setup', function (t) {
     RULES = {
         o0: {
             unicodeRole: {
+                /* JSSTYLED */
                 rule: 'FROM (tag "☂" = "ທ" OR tag "삼겹살" = "불고기") '
                     + 'TO ip 8.8.8.8 BLOCK udp PORT 53'
             },
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 421e072..903c597 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -471,6 +471,15 @@ function update(t, opts, callback) {
     });
 }
 
+function get(params, cb) {
+    var client = mod_client.get('vmapi');
+    client.getVm(params, cb);
+}
+
+function list(params, cb) {
+    var client = mod_client.get('vmapi');
+    client.listVms(params, cb);
+}
 
 module.exports = {
     addTags: addTags,
@@ -478,6 +487,8 @@ module.exports = {
     updateTags: updateTags,
     alias: alias,
     del: del,
+    get: get,
+    list: list,
     delAllCreated: delAllCreated,
     provision: provision,
     update: update
diff --git a/test/unit/data/migration.js b/test/unit/data/migration.js
index a3b6a68..f865600 100644
--- a/test/unit/data/migration.js
+++ b/test/unit/data/migration.js
@@ -370,6 +370,7 @@ rules[RULE_6_UUID] = {
         'version': RULE_6_VERSION
     },
     'fwapi': {
+        /* JSSTYLED */
         'rule': 'FROM tag "☃" = "رجل الثلج" TO tag "⛄" ALLOW tcp PORT 22',
         'description': 'this rule has escaped characters in tags',
         'uuid': RULE_6_UUID,
diff --git a/tools/rsync-to b/tools/rsync-to
index 58f9f67..4fc1105 100755
--- a/tools/rsync-to
+++ b/tools/rsync-to
@@ -19,11 +19,12 @@ set -o errexit
 TOP=$(cd $(dirname $0)/../; pwd)
 NODE="root@$1"
 
-if [[ -z "$FWAPI_ZONE" ]]; then
-    FWAPI_ZONE=$(ssh $NODE "/opt/smartdc/bin/sdc-vmapi /vms" 2>/dev/null \
+while [[ -z "$FWAPI_ZONE" ]]; do
+    echo "Trying to get FWAPI zone"
+    FWAPI_ZONE=$(ssh $NODE "/opt/smartdc/bin/sdc-vmapi /vms?alias=fwapi0" 2>/dev/null \
         | json -H -c 'this.tags && this.tags.smartdc_role === "fwapi"' \
             -c 'this.state === "running"' 0.uuid)
-fi
+done
 echo "FWAPI_ZONE: $FWAPI_ZONE"
 
 extraOpts=
@@ -34,7 +35,7 @@ else
     ssh $NODE rm -rf /zones/$FWAPI_ZONE/root/opt/smartdc/fwapi/node_modules
 fi
 
-rsync -av ${TOP}/ \
+rsync -avz ${TOP}/ \
     $NODE:/zones/$FWAPI_ZONE/root/opt/smartdc/fwapi/ \
     $extraOpts \
     --exclude .git/ \
