From 23c009109f25105d771ea69c415724973a4f5b38 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Tue, 7 Feb 2017 00:08:36 +0000
Subject: [PATCH] FWAPI-234 Firewall rule queries should be validated

---
 lib/endpoints/rules/index.js | 141 ++++++++----
 lib/persist.js               |   7 +-
 lib/rule.js                  |   4 +-
 lib/util/array.js            |  45 ----
 lib/util/constants.js        |  26 ++-
 lib/util/validate.js         | 106 ---------
 package.json                 |   1 +
 test/integration/get.test.js | 407 ++++++++++++++++++++++++++++++++++-
 test/lib/vm.js               |   1 -
 tools/rsync-to               |   9 +-
 10 files changed, 539 insertions(+), 208 deletions(-)
 delete mode 100644 lib/util/array.js
 delete mode 100644 lib/util/validate.js

diff --git a/lib/endpoints/rules/index.js b/lib/endpoints/rules/index.js
index d2be85d..841a19c 100644
--- a/lib/endpoints/rules/index.js
+++ b/lib/endpoints/rules/index.js
@@ -20,14 +20,75 @@ var mod_err = require('../../errors');
 var mod_persist = require('../../persist');
 var restify = require('restify');
 var Rule = require('../../rule').Rule;
-var util_validate = require('../../util/validate');
+var validate = require('restify-warden');
 
 
 var hasKey = require('jsprim').hasKey;
 
 
+// --- Globals
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        fields: validate.fieldsArray,
+        ip: validate.IParray,
+        owner_uuid: validate.UUIDarray,
+        subnet: validate.subnetArray,
+        vm: validate.UUIDarray,
+        enabled: validate.boolean,
+        action: validateAction,
+        global: validate.boolean,
+        tag: validateTag,
+        wildcard: validateArrayOfStrings
+    }
+};
+
+var DELETE_SCHEMA = {
+    strict: true,
+    required: {
+        uuid: validate.UUIDarray
+    }
+};
+
+
 // --- Internal
 
+function validateAction(_, name, act, callback) {
+    if (typeof (act) !== 'string' || (act !== 'block' && act !== 'allow')) {
+        callback(mod_err.invalidParam(name,
+          'action must be "block" or "allow"'));
+        return;
+    }
+    callback(null, act);
+}
+
+function validateArrayOfStrings(_, name, arr, callback) {
+    if (typeof (arr) !== 'string') {
+        var i;
+        for (i = 0; i < arr.length; i++) {
+            var s = arr[i];
+            if (typeof (s) !== 'string') {
+                callback(mod_err.invalidParam(name,
+                  'must be array of strings'));
+                return;
+            }
+        }
+    }
+    callback(null, s);
+}
+
+function validateTag(_, name, tag, callback) {
+    if (Array.isArray(tag) || typeof (tag) === 'string' ||
+        typeof (tag) === 'object') {
+
+        callback(null, tag);
+    } else {
+        callback(mod_err.invalidParam(name,
+          'must be string, object, or array'));
+    }
+}
+
 
 
 /**
@@ -72,39 +133,34 @@ function disallowOwnerForGlobal(req, res, next) {
 // --- Restify handlers
 
 
-
 /**
  * GET /rules
  */
 function listRules(req, res, next) {
-    var validated;
-    var serializeOpts;
+    validate.params(LIST_SCHEMA, null, req.params, function cb(valErr,
+        validated) {
 
-    try {
-        validated = util_validate.params({
-            optional: {
-                fields: util_validate.fields
-                // XXX: add all of the filter fields here!
-            }
-        }, req.params);
-    } catch (validateErr) {
-        return next(validateErr);
-    }
-
-    if (validated.fields) {
-        serializeOpts = { fields: validated.fields };
-    }
-
-    return mod_persist.findRules(req._app, req.log, req.params,
-        function (err, rules) {
-        if (err) {
-            return next(err);
+        var serializeOpts;
+        if (valErr) {
+            next(valErr);
+            return;
+        }
+        if (validated.fields) {
+            serializeOpts = { fields: validated.fields };
         }
+        mod_persist.findRules(req._app, req.log, req.params,
+            function (err, rules) {
+            if (err) {
+                next(err);
+                return;
+            }
 
-        res.send(200, rules.map(function (rule) {
-            return rule.serialize(serializeOpts);
-        }));
-        return next();
+            res.send(200, rules.map(function (rule) {
+                return rule.serialize(serializeOpts);
+            }));
+            next();
+            return;
+        });
     });
 }
 
@@ -195,25 +251,34 @@ function updateRule(req, res, next) {
 }
 
 
+
 /**
  * DELETE /rules/:uuid
  */
 function deleteRule(req, res, next) {
-    mod_persist.deleteRule(req._app, req.log, req.params.uuid, function (err) {
-        if (err) {
-            next(err);
+    validate.params(DELETE_SCHEMA, null, req.params, function (valErr, _val) {
+        if (valErr) {
+            next(valErr);
             return;
         }
-
-        req._update.queue('fw.del_rule', req._rule.serialize(),
-            function (err2, update) {
-            if (err2) {
-                return next(err2);
+        var uuid = req.params.uuid;
+        mod_persist.deleteRule(req._app, req.log, uuid, function (err) {
+            if (err) {
+                next(err);
+                return;
             }
 
-            res.header('x-update-id', update.uuid);
-            res.send(204);
-            return next();
+            req._update.queue('fw.del_rule', req._rule.serialize(),
+                function (err2, update) {
+                if (err2) {
+                    next(err2);
+                    return;
+                }
+
+                res.header('x-update-id', update.uuid);
+                res.send(204);
+                next();
+            });
         });
     });
 }
diff --git a/lib/persist.js b/lib/persist.js
index a7bab33..d1436ab 100644
--- a/lib/persist.js
+++ b/lib/persist.js
@@ -17,9 +17,8 @@ var mod_jsprim = require('jsprim');
 var mod_moray = require('./moray');
 var restify = require('restify');
 var ufdsmodel = require('./ufds/model');
-var util_validate = require('./util/validate');
 var VError = require('verror');
-
+var validate = require('restify-warden');
 
 var hasKey = mod_jsprim.hasKey;
 var Rule = fw.Rule;
@@ -153,7 +152,7 @@ function updateRule(app, log, newRule, oldRule, callback) {
 }
 
 function deleteRule(app, log, uuid, callback) {
-    if (!util_validate.uuid(uuid)) {
+    if (!validate.isUUID(uuid)) {
         callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
         return;
@@ -169,7 +168,7 @@ function deleteRule(app, log, uuid, callback) {
 }
 
 function getRule(app, log, uuid, callback) {
-    if (!util_validate.uuid(uuid)) {
+    if (!validate.isUUID(uuid)) {
         callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
         return;
diff --git a/lib/rule.js b/lib/rule.js
index 974d925..2960bf0 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -19,7 +19,7 @@ var mod_err = require('./errors');
 var mod_rule = require('fwrule');
 var util = require('util');
 var util_ip = require('./util/ip');
-var util_validate = require('./util/validate');
+var validate = require('restify-warden');
 
 var fmt = util.format;
 var hasKey = require('jsprim').hasKey;
@@ -683,7 +683,7 @@ Rule.parentDn = function () {
  * Returns the DN based on the request
  */
 Rule.dnFromRequest = function (req) {
-    if (!util_validate.uuid(req.params.uuid)) {
+    if (!validate.isUUID(req.params.uuid)) {
         throw new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]);
     }
diff --git a/lib/util/array.js b/lib/util/array.js
deleted file mode 100644
index ed39068..0000000
--- a/lib/util/array.js
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * Array utilities
- */
-
-'use strict';
-
-var util = require('util');
-
-
-
-// --- Exports
-
-
-
-
-/**
- * Turn a value into an array, unless it is one already.
- */
-function splitToArray(obj) {
-    if (util.isArray(obj)) {
-        return obj;
-    }
-
-    if (obj === '') {
-        return [];
-    }
-
-    return obj.split(',');
-}
-
-
-
-module.exports = {
-    splitToArray: splitToArray
-};
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 201cc94..033a2a7 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
- * Constants
+ * Shared constants
  */
 
 
@@ -25,14 +25,26 @@ var PARSED_FIELDS = [
     'parsed.tags'
 ];
 
-var UUID_REGEX =
-    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
+var MESSAGES = {
+    INVALID_PARAMS: 'Invalid parameters',
+    ARRAY_OF_STR: 'must be an array of strings',
+    ARRAY_EMPTY: 'must not be an empty array',
+    STR: 'must be a string',
+    INVALID_UUID: 'invalid UUID',
+    OFFSET: 'invalid value, offset must be an integer greater than or ' +
+        'equal to 0',
+    LIMIT: 'invalid limit, must be an integer greater than 0 or less than or ' +
+        'equal to 1000'
+};
 
 module.exports = {
     DEFAULT_LIMIT: 1000,
     MAX_RETRIES: 5,
     RETRY_DELAY: 5000,
-
-    UUID_REGEX: UUID_REGEX,
-    PARSED_FIELDS: PARSED_FIELDS
+    PARSED_FIELDS: PARSED_FIELDS,
+    msg: MESSAGES,
+    MAX_LIMIT: 1000,
+    MAX_STR_LEN: 64,
+    MIN_LIMIT: 1,
+    MIN_OFFSET: 0
 };
diff --git a/lib/util/validate.js b/lib/util/validate.js
deleted file mode 100644
index 65b1dba..0000000
--- a/lib/util/validate.js
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * Validation functions
- */
-
-'use strict';
-
-var assert = require('assert-plus');
-var constants = require('./constants');
-var mod_arr = require('./array');
-var mod_err = require('../errors');
-var util = require('util');
-
-
-
-// --- Exports
-
-function validUUID(uuid) {
-    return constants.UUID_REGEX.test(uuid);
-}
-
-function validateFields(name, val) {
-    var field;
-    var fields;
-    var unknown = [];
-
-    if (typeof (val) !== 'string' && !util.isArray(val)) {
-        throw mod_err.invalidParamSubErr(name, 'must be an array');
-    }
-
-    fields = mod_arr.splitToArray(val);
-
-    for (var f in fields) {
-        field = fields[f];
-
-        if (typeof (field) !== 'string') {
-            throw mod_err.invalidParamSubErr(name,
-                'must be an array of strings');
-        }
-
-        if (constants.PARSED_FIELDS.indexOf(field) === -1) {
-            unknown.push(field);
-        }
-    }
-
-    if (unknown.length !== 0) {
-        throw mod_err.invalidParamSubErr(name,
-            util.format('unknown field%s: %s',
-                unknown.length === 1 ? '' : 's',
-                unknown.join(', ')));
-    }
-
-    return fields;
-}
-
-
-function validateParams(validators, params) {
-    assert.object(validators, 'validators');
-    assert.object(params, 'params');
-
-    var errs = [];
-    var results = {};
-
-    // XXX: add required
-
-    for (var v in validators.optional) {
-        if (!params.hasOwnProperty(v)) {
-            continue;
-        }
-
-        try {
-            results[v] = validators.optional[v](v, params[v]);
-        } catch (valErr) {
-            errs.push(valErr);
-        }
-    }
-
-    if (errs.length !== 0) {
-        throw new mod_err.InvalidParamsError(
-            mod_err.INVALID_MSG, errs.map(function (e) {
-                return {
-                    code: e.code,
-                    field: e.field,
-                    message: e.message
-                };
-            }));
-    }
-
-    return results;
-}
-
-
-module.exports = {
-    uuid: validUUID,
-    fields: validateFields,
-    params: validateParams
-};
diff --git a/package.json b/package.json
index bd5dd63..2b15e70 100644
--- a/package.json
+++ b/package.json
@@ -30,6 +30,7 @@
     "sdc-clients": "9.5.0",
     "ufds": "1.2.0",
     "restify": "git+https://github.com/mcavage/node-restify.git#0d7b4ba",
+    "restify-warden": "git+https://github.com/joyent/node-restify-warden.git#768e2f12b",
     "trace-event": "1.3.0",
     "vasync": "1.6.4",
     "verror": "1.9.0",
diff --git a/test/integration/get.test.js b/test/integration/get.test.js
index eec4886..85ed446 100644
--- a/test/integration/get.test.js
+++ b/test/integration/get.test.js
@@ -28,6 +28,11 @@ var OWNERS = [
     mod_uuid.v4(),
     mod_uuid.v4()
 ];
+var VM_UUIDS = [
+    mod_uuid.v4(),
+    mod_uuid.v4()
+];
+
 var RULES = [
     {
         enabled: true,
@@ -42,15 +47,61 @@ var RULES = [
     },
     {
         enabled: true,
-        global: true,
+        owner_uuid: OWNERS[0],
         rule: 'FROM any TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    /* IP rule, VM rule, subnet rule */
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM ip 8.8.8.8 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM ip 4.4.4.4 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM subnet 10.8.0.0/16 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM subnet 10.7.0.0/16 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM vm ' + VM_UUIDS[0] +
+            ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[0],
+        rule: 'FROM vm ' + VM_UUIDS[1] +
+            ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     }
 ];
 
+var PRE_EXISTING_GLOBALS = [];
+
 
 // --- Tests
 
 
+// Get the pre-existing globals
+test('get: global rules', function (t) {
+    mod_rule.list(t, {
+        params: {
+            global: true
+        }
+    }, function (_, res) {
+        PRE_EXISTING_GLOBALS = res;
+        t.end();
+    });
+});
 
 test('add all rules', function (t) {
     mod_rule.createAndGetN(t, {
@@ -89,6 +140,231 @@ test('get: owner rule with wrong owner_uuid', function (t) {
     });
 });
 
+test('get: owner rule with misformatted uuid', function (t) {
+    mod_rule.list(t, {
+        params: {
+            owner_uuid: 'not-a-uuid'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'owner_uuid',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-uuid' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with misformatted ip', function (t) {
+    mod_rule.list(t, {
+        params: {
+            ip: 'not-an-ip'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ 'not-an-ip' ],
+                message: 'invalid IP'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { ip: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'invalid IP'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { ip: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'ip',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'invalid IPs'
+            } ]
+        }
+    });
+});
+
+test('get: ip rule with valid ip', function (t) {
+    mod_rule.list(t, {
+        params: { ip: '8.8.8.8' },
+        expCode: 200,
+        exp: [ RULES[3] ]
+    });
+});
+
+test('get: ip rule with valid ips', function (t) {
+    mod_rule.list(t, {
+        params: { ip: ['8.8.8.8', '4.4.4.4'] },
+        expCode: 200,
+        exp: [ RULES[3], RULES[4] ]
+    });
+});
+
+test('get: vm rule with misformatted vm', function (t) {
+    mod_rule.list(t, {
+        params: {
+            vm: 'not-a-vm'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-vm' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { vm: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { vm: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'vm',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'invalid UUID'
+            } ]
+        }
+    });
+});
+
+test('get: vm rule with valid vm', function (t) {
+    mod_rule.list(t, {
+        params: { vm: VM_UUIDS[0] },
+        expCode: 200,
+        exp: [ RULES[7] ]
+    });
+});
+
+test('get: vm rule with valid vms', function (t) {
+    mod_rule.list(t, {
+        params: { vm: [VM_UUIDS[0], VM_UUIDS[1]] },
+        expCode: 200,
+        exp: [RULES[7], RULES[8] ]
+    });
+});
+
+test('get: subnet rule with misformatted subnet', function (t) {
+    mod_rule.list(t, {
+        params: {
+            subnet: 'not-a-subnet'
+        },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ 'not-a-subnet' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with non-string value', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ '42' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with non-string values', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: [42, {}] },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'subnet',
+                code: 'InvalidParameter',
+                invalid: [ '', '42' ],
+                message: 'Subnet must be in CIDR form'
+            } ]
+        }
+    });
+});
+
+test('get: subnet rule with valid subnet', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: '10.8.0.0/16' },
+        expCode: 200,
+        exp: [ RULES[5] ]
+    });
+});
+
+test('get: subnet rule with valid subnets', function (t) {
+    mod_rule.list(t, {
+        params: { subnet: [ '10.8.0.0/16', '10.7.0.0/16'] },
+        expCode: 200,
+        exp: [ RULES[5], RULES[6] ]
+    });
+});
 
 test('get: global rule with no params', function (t) {
     mod_rule.get(t, {
@@ -97,6 +373,135 @@ test('get: global rule with no params', function (t) {
     });
 });
 
+test('get: enabled rule owner0', function (t) {
+    mod_rule.list(t, {
+        params: { enabled: true, owner_uuid: OWNERS[0] },
+        expCode: 200,
+        exp: [ RULES[0] ].concat(RULES.slice(2, RULES.length))
+    });
+});
+
+test('get: enabled rule owner1', function (t) {
+    mod_rule.list(t, {
+        params: { enabled: true, owner_uuid: OWNERS[1] },
+        expCode: 200,
+        exp: [ RULES[1] ]
+    });
+});
+
+test('get: enabled rule without bool', function (t) {
+    mod_rule.list(t, {
+        params: { enabled: 'foobar' },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'enabled',
+                code: 'InvalidParameter',
+                message: 'must be a boolean value'
+            } ]
+        }
+    });
+});
+
+test('get: action rule allow owner0', function (t) {
+    mod_rule.list(t, {
+        params: { action: 'allow', owner_uuid: OWNERS[0] },
+        expCode: 200,
+        exp: [ RULES[0] ].concat(RULES.slice(2, RULES.length))
+    });
+});
+
+test('get: action rule allow owner1', function (t) {
+    mod_rule.list(t, {
+        params: { action: 'allow', owner_uuid: OWNERS[1] },
+        expCode: 200,
+        exp: [ RULES[1] ]
+    });
+});
+
+test('get: action rule block', function (t) {
+    mod_rule.list(t, {
+        params: { action: 'block' },
+        expCode: 200,
+        exp: []
+    });
+});
+
+test('get: action rule invalid string', function (t) {
+    mod_rule.list(t, {
+        params: { action: 'kcolb' },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'action',
+                code: 'InvalidParameter',
+                message: 'action must be "block" or "allow"'
+            } ]
+        }
+    });
+});
+
+test('get: action rule invalid type', function (t) {
+    mod_rule.list(t, {
+        params: { action: 42 },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'action',
+                code: 'InvalidParameter',
+                message: 'action must be "block" or "allow"'
+            } ]
+        }
+    });
+});
+
+
+test('get: global-bool rule', function (t) {
+    mod_rule.list(t, {
+        params: { global: true },
+        expCode: 200,
+        exp: PRE_EXISTING_GLOBALS
+    });
+});
+
+test('get: global-bool rule invalid type', function (t) {
+    mod_rule.list(t, {
+        params: { global: 'qwerty' },
+        expCode: 422,
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [ {
+                field: 'global',
+                code: 'InvalidParameter',
+                message: 'must be a boolean value'
+            } ]
+        }
+    });
+});
+
+test('get: tag rule', function (t) {
+    mod_rule.list(t, {
+        params: { tag: 'foo' },
+        expCode: 200,
+        exp: RULES.slice(1, RULES.length)
+    });
+});
+
+test('get: wildcard rule', function (t) {
+    mod_rule.list(t, {
+        params: { wildcard: ['some', 'wildcards'] },
+        expCode: 200,
+        exp: []
+    });
+});
+
 
 
 // --- Teardown
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 0554ac8..7ccb972 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -467,7 +467,6 @@ function update(t, opts, callback) {
     });
 }
 
-
 module.exports = {
     addTags: addTags,
     removeTag: removeTag,
diff --git a/tools/rsync-to b/tools/rsync-to
index 58f9f67..4fc1105 100755
--- a/tools/rsync-to
+++ b/tools/rsync-to
@@ -19,11 +19,12 @@ set -o errexit
 TOP=$(cd $(dirname $0)/../; pwd)
 NODE="root@$1"
 
-if [[ -z "$FWAPI_ZONE" ]]; then
-    FWAPI_ZONE=$(ssh $NODE "/opt/smartdc/bin/sdc-vmapi /vms" 2>/dev/null \
+while [[ -z "$FWAPI_ZONE" ]]; do
+    echo "Trying to get FWAPI zone"
+    FWAPI_ZONE=$(ssh $NODE "/opt/smartdc/bin/sdc-vmapi /vms?alias=fwapi0" 2>/dev/null \
         | json -H -c 'this.tags && this.tags.smartdc_role === "fwapi"' \
             -c 'this.state === "running"' 0.uuid)
-fi
+done
 echo "FWAPI_ZONE: $FWAPI_ZONE"
 
 extraOpts=
@@ -34,7 +35,7 @@ else
     ssh $NODE rm -rf /zones/$FWAPI_ZONE/root/opt/smartdc/fwapi/node_modules
 fi
 
-rsync -av ${TOP}/ \
+rsync -avz ${TOP}/ \
     $NODE:/zones/$FWAPI_ZONE/root/opt/smartdc/fwapi/ \
     $extraOpts \
     --exclude .git/ \
-- 
2.21.0

