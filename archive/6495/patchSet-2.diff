From cd78d93e588352a3038d369fd564281dc35439fc Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Mon, 24 Jun 2019 17:44:43 -0700
Subject: [PATCH] joyent/node-cueball#152 delay randomization

---
 docs/api.adoc         |  3 +++
 docs/internals.adoc   | 38 +++++++++++++++++++++++++++++++-------
 lib/connection-fsm.js |  4 +++-
 lib/resolver.js       | 25 ++++++++++++++++++++-----
 lib/utils.js          | 26 +++++++++++++++++++++++++-
 5 files changed, 82 insertions(+), 14 deletions(-)

diff --git a/docs/api.adoc b/docs/api.adoc
index 1be9f46..bafb9d3 100644
--- a/docs/api.adoc
+++ b/docs/api.adoc
@@ -732,6 +732,9 @@ The possible fields in one operation are:
  - `delay` -- finite Number >= 0, milliseconds to delay between retry attempts
  - `maxDelay` -- Number > `delay` (can be `Infinity`), maximum value of `delay`
    to be reached with exponential delay increase
+ - `delaySpread` -- finite Number between `0.0` and `1.0`, the fraction of
+   the current `delay` value that should be randomly varied. If not given,
+   defaults to `0.2`
 
 And the available operations:
 
diff --git a/docs/internals.adoc b/docs/internals.adoc
index 8bc64c0..ab93a60 100644
--- a/docs/internals.adoc
+++ b/docs/internals.adoc
@@ -385,6 +385,24 @@ does occur at random, the decoherence timer will eventually cause the clients to
 go their separate ways and it will not persist indefinitely. It also lowers the
 probability of severe coherence events occuring.
 
+### Time correlation of retries
+
+With a large number of clients being managed together (as is often the case in
+large deployments), the clients may all be started and stopped at fairly
+similar times. This means that if they all encounter an error due to the same
+underlying cause and begin the process of exponential backoff and retries, they
+will all be performing these steps fairly close to each other in time.
+
+This can cause problems especially in the face of a transient overload, where
+a backend service comes up after failure and would be able to serve the workload
+if the set of clients connected one by one, but instead a large number of
+clients connect all at once and overload it, leading to it going down again.
+
+Cueball attempts to mitigate this kind of tiem correlation between clients
+by adding a random "spread" factor to retry delays. This is given as a fraction
+of the average delay amount (e.g. a spread of `0.2` means 20%, or a real
+delay ranging from 90% to 110% of the average value).
+
 ### ConnectionSet logical connections
 
 In the `ConnectionSet` implementation, there is one more additional FSM in use:
@@ -487,7 +505,8 @@ The simplest possible recovery object is shown below (<<recovery-simple>>).
 	"default": {
 		"retries": 3,
 		"timeout": 1000,
-		"delay": 100
+		"delay": 100,
+		"delaySpread": 0.2
 	}
 }
 ------------------------------------------------------------------------------
@@ -502,7 +521,7 @@ policy will be used instead.
 
 In the case of the simple example above, all actions taken by `cueball` would
 have a limit of 3 retries, an initial timeout of 1 second (1000 ms), and an
-initial delay between retries of 100 ms.
+initial delay between retries of 100 ms (plus/minus spread).
 
 Specifying 3 retries means that there will be a total of 3 attempts made before
 declaring failure, with increasing timeout and delay: see <<attempts-simple>>.
@@ -512,14 +531,19 @@ declaring failure, with increasing timeout and delay: see <<attempts-simple>>.
 [width="85%",options="header"]
 |=============================================================================
 | Attempt # | Timeout (ms)   | Delay before next attempt (ms)
-| 1         | 1000           | 100
-| 2         | 2000           | 200
-| 3         | 4000           | 400
+| 1         | 1000           | 100 +/- 10
+| 2         | 2000           | 200 +/- 20
+| 3         | 4000           | 400 +/- 40
 |=============================================================================
 
 Assuming that all these attempts failed due to timeout, this would mean that
-attempt #1 took place at `t = 0`, attempt #2 at `t = 1100`, #3 at `t = 3300`
-and finally, the operation would be declared a failure at `t = 7700`.
+attempt #1 took place at `t = 0`, attempt #2 at `t = 1100` (ignoring spread),
+#3 at `t = 3300` and finally, the operation would be declared a failure at
+`t = 7700`.
+
+Including random spread, attempt #2 would take place between `t = 1090` and
+`t = 1110`, attempt #3 between `t = 3270` and `t = 3330`, and the final
+declaration of failure between `t = 7630` and `t = 7770`.
 
 The recovery mode slot that will be created following such a failure would
 be initialized with infinite retries and the timeout and delay from the very
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index b768750..80b0d66 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -191,6 +191,8 @@ SocketMgrFSM.prototype.resetBackoff = function () {
 	this.sm_timeout = initialRecov.timeout;
 	this.sm_maxTimeout = initialRecov.maxTimeout || Infinity;
 
+	this.sm_delaySpread = initialRecov.delaySpread || 0.2;
+
 	if (this.sm_monitor === true) {
 		var mult = 1 << this.sm_retries;
 		this.sm_delay = this.sm_maxDelay;
@@ -369,7 +371,7 @@ SocketMgrFSM.prototype.state_backoff = function (S) {
 		return;
 	}
 
-	var delay = this.sm_delay;
+	var delay = mod_utils.delay(this.sm_delay, this.sm_delaySpread);
 
 	if (this.sm_retries !== Infinity) {
 		--this.sm_retriesLeft;
diff --git a/lib/resolver.js b/lib/resolver.js
index c864afb..ab391e0 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -310,6 +310,7 @@ function CueBallDNSResolver(options) {
 		timeout: dnsSrvRecov.timeout,
 		minDelay: dnsSrvRecov.delay,
 		delay: dnsSrvRecov.delay,
+		delaySpread: dnsSrvRecov.delaySpread || 0.2,
 		maxDelay: dnsSrvRecov.maxDelay || Infinity
 	};
 
@@ -319,6 +320,7 @@ function CueBallDNSResolver(options) {
 		timeout: dnsRecov.timeout,
 		minDelay: dnsRecov.delay,
 		delay: dnsRecov.delay,
+		delaySpread: dnsRecov.delaySpread || 0.2,
 		maxDelay: dnsRecov.maxDelay || Infinity
 	};
 
@@ -647,7 +649,8 @@ CueBallDNSResolver.prototype.state_srv_error = function (S) {
 	var self = this;
 	var r = self.r_srvRetry;
 	if (--r.count > 0) {
-		S.timeout(r.delay, function () {
+		var delay = mod_utils.delay(r);
+		S.timeout(delay, function () {
 			S.gotoState('srv_try');
 		});
 
@@ -852,7 +855,8 @@ CueBallDNSResolver.prototype.state_aaaa_error = function (S) {
 	var self = this;
 	var r = self.r_retry;
 	if (--r.count > 0) {
-		S.timeout(r.delay, function () {
+		var delay = mod_utils.delay(r);
+		S.timeout(delay, function () {
 			S.gotoState('aaaa_try');
 		});
 
@@ -977,7 +981,8 @@ CueBallDNSResolver.prototype.state_a_error = function (S) {
 	var self = this;
 	var r = self.r_retry;
 	if (--r.count > 0) {
-		S.timeout(r.delay, function () {
+		var delay = mod_utils.delay(r);
+		S.timeout(delay, function () {
 			S.gotoState('a_try');
 		});
 
@@ -1116,9 +1121,19 @@ CueBallDNSResolver.prototype.state_sleep = function (S) {
 	if (minDelay < 0) {
 		S.gotoState(state);
 	} else {
-		self.r_log.trace({state: state, delay: minDelay},
+		/*
+		 * Unlike the regular logic used by mod_utils.delay(), for
+		 * DNS TTL timeouts there's no point spreading them backwards,
+		 * as we will just get the same answer again from a cache.
+		 *
+		 * So we spread it forwards in time only (1.0 to 1.0 + spread).
+		 */
+		var delay = Math.round(minDelay *
+		    (1 + Math.random() * this.r_retry.delaySpread));
+
+		self.r_log.trace({state: state, delay: delay},
 		    'sleeping until next TTL expiry');
-		S.timeout(minDelay, function () {
+		S.timeout(delay, function () {
 			S.gotoState(state);
 		});
 		S.on(this, 'stopAsserted', function () {
diff --git a/lib/utils.js b/lib/utils.js
index 35247e4..6410485 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -16,7 +16,8 @@ module.exports = {
 	stackTracesEnabled: stackTracesEnabled,
 	maybeCaptureStackTrace: maybeCaptureStackTrace,
 	createErrorMetrics: createErrorMetrics,
-	updateErrorMetrics: updateErrorMetrics
+	updateErrorMetrics: updateErrorMetrics,
+	delay: delay
 };
 
 const mod_assert = require('assert-plus');
@@ -151,6 +152,12 @@ function assertRecovery(obj, name) {
 	    obj.delay <= obj.maxDelay,
 	    name + '.maxDelay must be >= delay');
 	delete (ks.maxDelay);
+	mod_assert.optionalNumber(obj.delaySpread, name + '.delaySpread');
+	if (obj.delaySpread !== undefined && obj.delaySpread !== null) {
+		mod_assert.ok(obj.delaySpread >= 0.0 && obj.delaySpread <= 1.0,
+		    name + '.delaySpread must be a fraction');
+	}
+	delete (ks.delaySpread);
 	mod_assert.deepEqual(Object.keys(ks), []);
 
 	var mult;
@@ -435,3 +442,20 @@ function updateErrorMetrics(collector, uuid, errStr)
 		evt: errStr
 	});
 }
+
+function delay(recovOrDelay, spread) {
+	var base = recovOrDelay;
+	if (typeof (recovOrDelay) === 'object' && spread === undefined) {
+		base = recovOrDelay.delay;
+		spread = recovOrDelay.delaySpread;
+	}
+	mod_assert.number(base, 'base delay');
+	mod_assert.optionalNumber(spread, 'spread factor');
+	if (spread === undefined || spread === null)
+		spread = 0.2;
+	/*
+	 * delaySpread = 0.2 means 20% spread (so choose a random delay
+	 * between 0.9*delay and 1.1*delay).
+	 */
+	return (Math.round(base * (1 - spread / 2 + Math.random() * spread)));
+}
-- 
2.21.0

