From 0b8f555999588503db0ec65c72075061b4f684c8 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 15 Jan 2018 09:19:29 -0800
Subject: [PATCH] AGENT-1089 Hermes should have option to delete files matching
 a pattern and not upload them to Manta

---
 actor/lib/findstream.js |  50 ++--------------
 actor/lib/globstream.js | 130 ++++++++++++++++++++++++++++++++++++++++
 actor/lib/statstream.js |  58 ++++++++++++++++++
 actor/lib/worker.js     |  64 +++++++++++++-------
 lib/logsets.js          |   5 +-
 5 files changed, 241 insertions(+), 66 deletions(-)
 create mode 100644 actor/lib/globstream.js
 create mode 100644 actor/lib/statstream.js

diff --git a/actor/lib/findstream.js b/actor/lib/findstream.js
index 74e8804..e9cbbf1 100644
--- a/actor/lib/findstream.js
+++ b/actor/lib/findstream.js
@@ -8,55 +8,15 @@
  * Copyright (c) 2014, Joyent, Inc.
  */
 
-var mod_util = require('util');
-var mod_stream = require('stream');
-var mod_fs = require('fs');
 var mod_child = require('child_process');
 var mod_lstream = require('lstream');
-
+var mod_stream = require('stream');
+var mod_util = require('util');
 var mod_verror = require('verror');
 
-var FIND = '/usr/bin/find';
-
-function
-StatStream()
-{
-	mod_stream.Transform.call(this, {
-		objectMode: true
-	});
-}
-mod_util.inherits(StatStream, mod_stream.Transform);
+var mod_statstream = require('./statstream');
 
-StatStream.prototype._transform = function
-_transform(chunk, _, done)
-{
-	var self = this;
-
-	mod_fs.lstat(chunk, function (err, stat) {
-		if (err) {
-			if (err.code === 'ENOENT') {
-				/*
-				 * We probably raced with a file
-				 * removal.
-				 */
-				done();
-			} else {
-				done(err);
-			}
-			return;
-		}
-
-		if (stat.isFile()) {
-			self.push({
-				path: chunk,
-				mtime: stat.mtime,
-				size: stat.size
-			});
-		}
-
-		done();
-	});
-};
+var FIND = '/usr/bin/find';
 
 function
 FindStream(dirs)
@@ -67,7 +27,7 @@ FindStream(dirs)
 	});
 
 	self.ds_lstream = new mod_lstream();
-	self.ds_statstream = new StatStream();
+	self.ds_statstream = new mod_statstream.StatStream();
 
 	self.ds_stderr = '';
 	self.ds_destroyed = true;
diff --git a/actor/lib/globstream.js b/actor/lib/globstream.js
new file mode 100644
index 0000000..f99bcfd
--- /dev/null
+++ b/actor/lib/globstream.js
@@ -0,0 +1,130 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var mod_child = require('child_process');
+var mod_fs = require('fs');
+var mod_lstream = require('lstream');
+var mod_stream = require('stream');
+var mod_util = require('util');
+var mod_verror = require('verror');
+
+var mod_statstream = require('./statstream');
+
+var LS = '/usr/bin/ls';
+
+function
+DirectoryGlobStream(patterns)
+{
+	var self = this;
+	mod_stream.PassThrough.call(self, {
+		objectMode: true
+	});
+
+	self.dgs_lstream = new mod_lstream();
+	self.dgs_statstream = new mod_statstream.StatStream();
+
+	self.dgs_stderr = '';
+	self.dgs_destroyed = true;
+
+	var args = [
+		'-d'
+	];
+
+	args = args.concat(patterns);
+
+	var opts = {
+		env: {},
+		cwd: '/'
+	};
+
+	self.dgs_proc = mod_child.spawn(LS, args, opts);
+
+	/*
+	 * Listen for process conditions:
+	 */
+	self.dgs_proc.once('error', function (err) {
+		if (self.dgs_destroyed)
+			return;
+		self.dgs_proc = null;
+		self.emit('error', err);
+	});
+	self.dgs_proc.once('close', function (code, signal) {
+		if (self.dgs_destroyed) {
+			return;
+		}
+		self.dgs_proc = null;
+		if (code !== 0 || signal) {
+			var err = new mod_verror.VError('directory glob error; ' +
+					'code %d signal %s; stderr: %s', code, signal,
+					self.dgs_stderr);
+			self.emit('error', err);
+			return;
+		}
+	});
+
+	/*
+	 * Save stderr, close stdin:
+	 */
+	self.dgs_proc.stderr.on('data', function (chunk) {
+		self.dgs_stderr += chunk.toString();
+	});
+	self.dgs_proc.stdin.end();
+
+	/*
+	 * stdout is a stream of \n-separated paths; pipe it
+	 * into the StatStream, and pipe that into ourselves
+	 * for consumers.
+	 */
+	self.dgs_proc.stdout.pipe(self.dgs_lstream).pipe(self.dgs_statstream)
+		.pipe(self);
+}
+mod_util.inherits(DirectoryGlobStream, mod_stream.PassThrough);
+
+DirectoryGlobStream.prototype.destroy = function
+destroy()
+{
+	var self = this;
+
+	if (self.dgs_destroyed)
+		return;
+	self.dgs_destroyed = true;
+
+	/*
+	 * Break the pipeline:
+	 */
+	if (self.dgs_statstream) {
+		self.dgs_statstream.unpipe(self);
+		self.dgs_statstream = null;
+	}
+
+	if (self.dgs_proc) {
+		try {
+			self.dgs_proc.kill('SIGKILL');
+		} catch (ex) {
+			/*
+			 * XXX Ignore errors, here, for now.
+			 */
+			console.error('ERROR: failed to kill ' + LS + ': ' +
+					ex.stack);
+		}
+		self.dgs_proc = null;
+	}
+
+	/*
+	 * Signal the end of our outbound stream:
+	 */
+	self.push(null);
+};
+
+module.exports = {
+	DirectoryGlobStream: DirectoryGlobStream
+};
+
+/* vim: set ts=8 sts=8 sw=8 noet: */
diff --git a/actor/lib/statstream.js b/actor/lib/statstream.js
new file mode 100644
index 0000000..942c305
--- /dev/null
+++ b/actor/lib/statstream.js
@@ -0,0 +1,58 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var mod_util = require('util');
+var mod_fs = require('fs');
+var mod_stream = require('stream');
+
+function StatStream()
+{
+	mod_stream.Transform.call(this, {
+		objectMode: true
+	});
+}
+mod_util.inherits(StatStream, mod_stream.Transform);
+
+StatStream.prototype._transform = function
+_transform(chunk, _, done)
+{
+	var self = this;
+
+	mod_fs.lstat(chunk, function (err, stat) {
+		if (err) {
+			if (err.code === 'ENOENT') {
+				/*
+				 * We probably raced with a file
+				 * removal.
+				 */
+				done();
+			} else {
+				done(err);
+			}
+			return;
+		}
+
+		if (stat.isFile()) {
+			self.push({
+				path: chunk,
+				mtime: stat.mtime,
+				size: stat.size
+			});
+		}
+
+		done();
+	});
+};
+
+module.exports = {
+	StatStream: StatStream
+};
+
+/* vim: set ts=8 sts=8 sw=8 noet: */
diff --git a/actor/lib/worker.js b/actor/lib/worker.js
index ac3cf82..8b808d1 100644
--- a/actor/lib/worker.js
+++ b/actor/lib/worker.js
@@ -110,19 +110,31 @@ run(callback)
 	mod_assert.func(callback, 'callback');
 	self.lsw_end_callback = callback;
 
-	/*
-	 * Add zoneroot prefix to search directories if we're looking
-	 * at the non-global zone.
-	 */
-	var adjdirs = [];
-	for (var i = 0; i < self.lsw_logset.search_dirs.length; i++) {
-		adjdirs.push(mod_path.join(self.lsw_path_prefix,
-		    self.lsw_logset.search_dirs[i]));
-	}
+	self.lsw_run_pipeline = mod_vasync.pipeline({
+		arg: self.lsw_manta_task,
+		funcs: [
 
-	self.lsw_barrier.start('find');
-	var find = new lib_findstream.FindStream(adjdirs);
+        _search_patterns(function () {
+            /*
+             * Add zoneroot prefix to search directories if we're looking
+             * at the non-global zone.
+             */
+            var adjdirs = [];
+            for (var i = 0; i < self.lsw_logset.search_dirs.length; i++) {
+                    adjdirs.push(mod_path.join(self.lsw_path_prefix,
+                        self.lsw_logset.search_dirs[i]));
+            }
+
+            self.lsw_barrier.start('find');
+
+            _find(adjdirs);
+        });
+};
 
+LogsetWorker.prototype._find = function
+_find(adjdirs)
+{
+	var find = new lib_findstream.FindStream(adjdirs);
 	find.on('error', function (err) {
 		/*
 		 * XXX It's possible that there's a class of error we can
@@ -151,7 +163,7 @@ run(callback)
 	self.lsw_findstream = find;
 
 	self.lsw_barrier.done('init phase');
-};
+}
 
 LogsetWorker.prototype._disp = function
 _disp()
@@ -250,6 +262,15 @@ _disp()
 	var delete_after = archive_after + (self.lsw_logset.retain_time * 1000);
 	var _delete = (now >= delete_after);
 
+	/*
+	 * We want to upload files by default, unless the logset specifies
+	 * no_upload to true.
+	 */
+	var _upload = true;
+	if (self.lsw_logset.no_upload === true) {
+		_upload = false;
+	}
+
 	/*
 	 * Derive the path that we would upload this file to, in Manta:
 	 */
@@ -273,10 +294,11 @@ _disp()
 	self.lsw_log.debug({
 		file: inf,
 		manta_path: manta_path,
-		do_delete: _delete
+		do_delete: _delete,
+		do_upload: _upload
 	}, 'archiving log file');
 
-	self._manta_upload(inf, manta_path, _delete, function (err) {
+	self._manta_upload(inf, manta_path, _delete, _upload, function (err) {
 		if (err) {
 			self.lsw_log.error({
 				err: err
@@ -305,7 +327,7 @@ _disp()
 function
 pl_local_md5(t, next)
 {
-	if (t.t_cancel) {
+	if (t.t_cancel || !t.t_do_upload) {
 		next();
 		return;
 	}
@@ -333,7 +355,7 @@ pl_local_md5(t, next)
 function
 pl_manta_info(t, next)
 {
-	if (t.t_cancel) {
+	if (t.t_cancel || !t.t_do_upload) {
 		next();
 		return;
 	}
@@ -356,7 +378,7 @@ pl_manta_info(t, next)
 function
 pl_manta_mkdirp(t, next)
 {
-	if (t.t_cancel) {
+	if (t.t_cancel || !t.t_do_upload) {
 		next();
 		return;
 	}
@@ -380,7 +402,7 @@ pl_manta_mkdirp(t, next)
 function
 pl_manta_put(t, next)
 {
-	if (t.t_cancel) {
+	if (t.t_cancel || !t.t_do_upload) {
 		next();
 		return;
 	}
@@ -389,6 +411,7 @@ pl_manta_put(t, next)
 
 	mod_assert.string(t.t_md5_local, 'md5_local');
 	mod_assert.number(t.t_file.size, 'file.size');
+	mod_assert.strictEqual(t.t_do_upload, true);
 
 	var opts = {
 		md5: t.t_md5_local,
@@ -449,7 +472,7 @@ pl_manta_put(t, next)
 function
 pl_compare_hash(t, next)
 {
-	if (t.t_cancel) {
+	if (t.t_cancel || !t.t_do_upload) {
 		next();
 		return;
 	}
@@ -504,7 +527,7 @@ pl_local_rm(t, next)
 }
 
 LogsetWorker.prototype._manta_upload = function
-_manta_upload(file, manta_path, _delete, next)
+_manta_upload(file, manta_path, _delete, _upload, next)
 {
 	var self = this;
 
@@ -519,6 +542,7 @@ _manta_upload(file, manta_path, _delete, next)
 		t_manta_path: manta_path,
 		t_file: file,
 		t_do_delete: _delete,
+		t_do_upload: _upload,
 		t_md5_remote: null,
 		t_md5_local: null,
 		t_cancel: self.lsw_cancel
diff --git a/lib/logsets.js b/lib/logsets.js
index adf20ad..e67cc4c 100644
--- a/lib/logsets.js
+++ b/lib/logsets.js
@@ -28,6 +28,7 @@ load_logsets()
 
 		ls.regex = new RegExp(ls.regex);
 
+		mod_assert.arrayOfString(ls.search_patterns, 'search_patterns');
 		mod_assert.arrayOfString(ls.search_dirs, 'search_dirs');
 		mod_assert.string(ls.manta_path, 'manta_path');
 
@@ -47,11 +48,13 @@ load_logsets()
 
 var COPY_FIELDS = [
 	'search_dirs',
+	'search_patterns',
 	'manta_path',
 	'date_string',
 	'date_adjustment',
 	'debounce_time',
-	'retain_time'
+	'retain_time',
+	'no_upload'
 ];
 
 /*
-- 
2.21.0

