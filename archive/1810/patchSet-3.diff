From 829dd87c9b948ea946d63ac1d69102d707a02d08 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Wed, 12 Apr 2017 16:55:38 -0700
Subject: [PATCH] MORAY-104 moray: disallow filtering on non-indexed fields
 except interactively

---
 docs/index.md         | 14 ++++++++-
 lib/objects/common.js | 72 ++++++++++++++++++++++++++++++++++++++++++-
 lib/objects/find.js   | 61 ++++++++++++++++++++++++++++++++++--
 package.json          |  2 +-
 4 files changed, 144 insertions(+), 5 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index d846480..2be9acf 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -572,7 +572,19 @@ expect to receive back up to N records from this call.
 | ------- | ------ | ------------------------------------------------------ |
 | bucket  | string | bucket to search in                                    |
 | filter  | string | search filter string                                   |
-| options | object | any optional parameters (req\_id, limit, offset, sort) |
+| options | object | any optional parameters (req\_id, limit, offset, sort, requireIndexes) |
+
+#### requireIndexes option
+
+When passing `requireIndexes: true`, `findObjects` requests will respond with a
+`NotIndexedError` error if at least one of the fields included in the search
+filter has an index that can't be used.
+
+When not passing any value for `requireIndexes`, the behavior depends on what
+`requireIndexes` value was passed to the moray client's constructor.
+
+Regardless of the moray client's configuration, passing `requireIndexes: false`
+to `findObjects` will disable this behavior.
 
 ### Errors
 
diff --git a/lib/objects/common.js b/lib/objects/common.js
index fac5728..620fd57 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -968,7 +968,76 @@ function indexObject(schema, object) {
     return (ndx);
 }
 
+/*
+ * Returns true if the filter "filter" uses a field whose index is not usable in
+ * bucket "bucket", otherwise returns false.
+ */
+function filterUsesOnlyUsableIndexes(filter, bucket, log) {
+    assert.object(filter, 'filter');
+    assert.object(bucket, 'bucket');
+
+    var bucketIndex = [];
+    var bucketReindexActive = [];
+    var bucketVersion;
+
+    log.debug({bucket: bucket}, 'bucket object');
+
+    if (bucket.index !== undefined) {
+        bucketIndex = Object.keys(bucket.index);
+    }
+
+    if (bucket.reindex_active !== undefined) {
+        for (bucketVersion in bucket.reindex_active) {
+            bucketReindexActive =
+                bucketReindexActive.concat(
+                    bucket.reindex_active[bucketVersion]);
+        }
+    }
+
+    var fieldsUsedInFilter = {};
+    var unusableIndexFound = false;
+
+    filter.forEach(function addUsedFields(filterItem) {
+        assert.object(filterItem, 'filterItem');
+        if (filterItem.filter !== undefined ||
+            filterItem.filters !== undefined) {
+            /*
+             * We're not interested in non-leaf filters (not, and, or, etc.).
+             */
+            return;
+        }
 
+        assert.string(filterItem.attribute, 'filterItem.attribute');
+        fieldsUsedInFilter[filterItem.attribute] = true;
+    });
+
+    log.debug({
+        fieldsUsedInFilter: fieldsUsedInFilter,
+        bucketIndex: bucketIndex,
+        bucketReindexActive: bucketReindexActive
+    }, 'fields used in filter');
+
+    unusableIndexFound =
+        Object.keys(fieldsUsedInFilter).some(function indexUnusable(fieldName) {
+            /*
+             * If the filter field is part of the set of indexes that are usable
+             * by any moray bucket from the time it's created (e.g _mtime, _key,
+             * etc.), early out and consider that field has a usable index.
+             */
+            if (INTERNAL_FIELDS.indexOf(fieldName) !== -1) {
+                return false;
+            }
+
+            if (bucketIndex.indexOf(fieldName) === -1 ||
+                bucketReindexActive.indexOf(fieldName) !== -1) {
+                return true;
+            } else {
+                return false;
+            }
+        });
+
+    return !unusableIndexFound;
+}
 
 
 ///--- Exports
@@ -986,5 +1055,6 @@ module.exports = {
     rowToObject: rowToObject,
     runPostChain: runPostChain,
     selectForUpdate: selectForUpdate,
-    indexObject: indexObject
+    indexObject: indexObject,
+    filterUsesOnlyUsableIndexes: filterUsesOnlyUsableIndexes
 };
diff --git a/lib/objects/find.js b/lib/objects/find.js
index 1c34c38..53417cc 100644
--- a/lib/objects/find.js
+++ b/lib/objects/find.js
@@ -13,11 +13,60 @@ var util = require('util');
 var control = require('../control');
 var common = require('./common');
 var dtrace = require('../dtrace');
-require('../errors');
+var errors = require('../errors');
+
+var HANDLED_FINDOBJECTS_OPTIONS = [
+    'req_id',
+    'limit',
+    'offset',
+    'sort',
+    'noLimit',
+    'no_count',
+    'sql_only',
+    'noBucketCache',
+    'timeout',
+    'requireIndexes'
+];
 
+///--- Handlers
 
+/*
+ * Makes sure that all fields used in the findObjects request "req" have indexes
+ * that are usable and calls the function "cb". If at least one field has an
+ * underlying index that is not usable, "cb" is called with a NotIndexedError
+ * object as its first parameter.
+ */
+function checkRequiredIndexes(req, cb) {
+    var log = req.log;
 
-///--- Handlers
+    if (req.opts && req.opts.requireIndexes === true) {
+        if (!common.filterUsesOnlyUsableIndexes(req.filter, req.bucket, log)) {
+            log.error('filter uses unusable indexes');
+            cb(new errors.NotIndexedError(req.bucket.name, req.rawFilter));
+            return;
+        } else {
+            log.trace('filter does not use unusable indexes');
+        }
+    }
+
+    cb();
+}
+
+/*
+ * Sends a record that contains the list of findObjects request options that the
+ * server handles. This allows moray clients to compare this set of handled
+ * options with what they expect the server to handle.
+ */
+function sendHandledOptions(req, cb) {
+    var res = req.res;
+
+    if (req.opts && req.opts.internalOpts &&
+        req.opts.internalOpts.sendHandledOptions === true) {
+        res.write({_handledOptions: HANDLED_FINDOBJECTS_OPTIONS});
+    }
+
+    cb();
+}
 
 function beginRepeatableRead(req, cb) {
     req.pg.begin('REPEATABLE READ', cb);
@@ -137,6 +186,12 @@ function getRecords(req, cb) {
         }
 
         var v = obj.value;
+        /*
+         * Adding these properties on "v" is required so that search filters
+         * such as (_mtime>=x) and more generally any filter using records'
+         * metadata that is not part of the objects' value can match the filter
+         * "filter".
+         */
         v._id = obj._id;
         v._txn_snap = obj._txn_snap;
         v._etag = obj._etag;
@@ -210,6 +265,8 @@ function find(options) {
                 }),
                 beginRepeatableRead,
                 common.loadBucket,
+                checkRequiredIndexes,
+                sendHandledOptions,
                 common.decorateFilter,
                 common.buildWhereClause,
                 getCount,
diff --git a/package.json b/package.json
index 80a3b15..1318d6a 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray-server",
     "description": "SmartDataCenter H/A Key/Value store",
-    "version": "2.1.0",
+    "version": "2.2.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "main": "lib/index.js",
-- 
2.21.0

