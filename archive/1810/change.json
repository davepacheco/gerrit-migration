{"project":"joyent/moray","branch":"master","topic":"MORAY-104","id":"Icf807237bacda37744a736689bb57ffe5b85b7a3","number":"1810","subject":"MORAY-104 moray: disallow filtering on non-indexed fields except interactively Reviewed by: Cody Peter Mello \u003ccody.mello@joyent.com\u003e Approved by: Cody Peter Mello \u003ccody.mello@joyent.com\u003e","owner":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"url":"https://cr.joyent.us/1810","commitMessage":"MORAY-104 moray: disallow filtering on non-indexed fields except interactively\nReviewed by: Cody Peter Mello \u003ccody.mello@joyent.com\u003e\nApproved by: Cody Peter Mello \u003ccody.mello@joyent.com\u003e\n","createdOn":1492641060,"lastUpdated":1496356398,"open":false,"status":"MERGED","comments":[{"timestamp":1492641060,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 1."},{"timestamp":1492641086,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 1: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1492727422,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 2."},{"timestamp":1492727450,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 2: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1492801907,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 1:\n\n(7 comments)"},{"timestamp":1493077405,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 1:\n\n(7 comments)"},{"timestamp":1493077499,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 3."},{"timestamp":1493077524,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 3: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1493078730,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1493320962,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1493406388,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 3:\n\n(5 comments)"},{"timestamp":1493751512,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(7 comments)"},{"timestamp":1493918268,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Topic set to MORAY-104"},{"timestamp":1493921804,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1494350035,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(1 comment)"},{"timestamp":1494351381,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 4."},{"timestamp":1494351408,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1494351412,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 4: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1494351472,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1494352037,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 4: Code-Review+1\n\n(3 comments)"},{"timestamp":1494355066,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 3:\n\n(1 comment)"},{"timestamp":1494467323,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(4 comments)"},{"timestamp":1495148729,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 4:\n\n(2 comments)"},{"timestamp":1495150349,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 4:\n\n(2 comments)"},{"timestamp":1495150463,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 5."},{"timestamp":1495150493,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 5: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1495150968,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 5: Code-Review+1"},{"timestamp":1496086355,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Uploaded patch set 6."},{"timestamp":1496086392,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 6: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1496086407,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 6:\n\nThe latest patch set just rebased the previous patch set on latest master, and it resolved minor conflicts in docs/index.md."},{"timestamp":1496103870,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 6:\n\nI\u0027ve added some information about how these changes were tested in the associated JIRA ticket."},{"timestamp":1496354019,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 6: Code-Review+1 Integration-Approval+1"},{"timestamp":1496355229,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 7: Commit message was updated."},{"timestamp":1496356398,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Julien Gilli"}],"currentPatchSet":{"number":"7","revision":"18fe21a66d6cc937179d62ac2995e8a8c9e33226","parents":["52d7669f7134d2a57c35f97891d3e166d7f1cb76"],"ref":"refs/changes/10/1810/7","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1496355229,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1496086392,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"SUBM","value":"1","grantedOn":1496356398,"by":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":6,"deletions":0},{"file":"lib/errors.js","type":"MODIFIED","insertions":17,"deletions":-3},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":84,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":74,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":182,"sizeDeletions":-7},"patchSets":[{"number":"1","revision":"0a4258970b75f5a6c403ab0e40e0b481ed6aa01b","parents":["d23510d05c04a7f4da5e061965c4c351d3246e77"],"ref":"refs/changes/10/1810/1","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1492641060,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1492641086,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"lib/objects/common.js","line":982,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"The filter library provides this functionality with the .forEach() method on filters."},{"file":"lib/objects/common.js","line":982,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"I didn\u0027t know about that one, thanks for the pointer, I\u0027ll use that."},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"It would be nice if this function indicated why the filter is unusable, so that Moray clients can receive a more useful error message. Something like \"the field X is not indexed\", or \"the field Y is currently being reindexed\"."},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"That makes sense, I\u0027ll change that."},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"While working on this change, I realized that one of the reasons why I hadn\u0027t implemented a more explicit and detailed error message is that I didn\u0027t want to introduce a new error type for older clients that would pass the \"requireIndexes: true\" option.\n\nThat\u0027s not a concern for my specific use case, but I thought I\u0027d mention it before submitting a new patchet. I\u0027ll wait for your thoughts on this before moving forward."},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"So, I was thinking that this would just be information that goes into the NotIndexedError that gets returned. So this function could return null or an object with \"reindexing\" and \"unindexed\" arrays or something, and then those get added to the error message of the NotIndexedError created in checkRequiredIndexes()."},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"The NotIndexedError object currently takes three parameters:\n\nfunction NotIndexedError(cause, bucket, filter) {\n...\n}\n\nThe error message is constructed from \"bucket\" and \"filter\", by formatting it using the following format string:\n\n\u0027%s does not have indexes that support %s\u0027, bucket, filter\n\nDo you suggest changing the NotIndexedError constructor to support more parameters and change the error message when we pass reindexing/unindexed field names?"},{"file":"lib/objects/common.js","line":1016,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Done, and updated the tests in moray-test-suite to check the error message accordingly."},{"file":"lib/objects/find.js","line":18,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"This should also include \"noLimit\", \"no_count\", \"sql_only\", \"noBucketCache\", and \"timeout\"."},{"file":"lib/objects/find.js","line":18,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Good catch, I had based that list on the list available at https://github.com/joyent/moray/blob/master/docs/index.md#inputs-7. I filed MORAY-414 to take care of that."},{"file":"lib/objects/find.js","line":38,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"We should add this check to updateObjects() and deleteMany(), too, since those should never receive filters with unusable indexes."},{"file":"lib/objects/find.js","line":38,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"I agree, however I\u0027d rather change the behavior of these requests in separate tickets/CRs, so that the scope of this CR/ticket does not grow too much."},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I think this can be done at the \"trace\" level."},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Good point, will change."},{"file":"lib/objects/find.js","line":166,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"We should pass the \"ignore\" array argument here and in lib/objects/get.js, so that findObjects() and getObject() don\u0027t return bad values during reindexing. We can then assert in rowToObject() that it always receives the array."},{"file":"lib/objects/find.js","line":166,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Could you provide me with an example of what you are thinking about when you mention \"return[ing] bad values\"?"},{"file":"lib/objects/find.js","line":166,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I put together an example here:\n\nhttps://gist.github.com/melloc/da0116850db75e3692494dfcb1160c32\n\nWhen the bucket\u0027s schema gets updated, the inserted object has null in its \"bar\" column until it\u0027s reindexed, which means that when it\u0027s fetched by getObject() or findObjects() before it\u0027s reindexed, the field \"bar\" gets deleted from the original object. If getObject() and findObjects() pass the ignore array, then the \"bar\" column will be ignored."},{"file":"lib/objects/find.js","line":199,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"We can\u0027t skip calling filter.matches() because the filtering it does is important for certain queries. For example, see MORAY-413. (I thought that I\u0027d filed a ticket about this before, but apparently I hadn\u0027t.) Once that\u0027s fixed though and we\u0027ve guaranteed that there aren\u0027t any other issues, we should be able to skip this here."},{"file":"lib/objects/find.js","line":199,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good, I\u0027ll remove that, thanks for the ticket! Should we create a separate ticket to add that optimization once MORAY-413 lands then?"},{"file":"lib/objects/find.js","line":199,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Yeah, we probably should. I\u0027ve filed MORAY-415 for that."},{"file":"lib/objects/find.js","line":199,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Thanks!"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":13,"deletions":-1},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":102,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":57,"deletions":-3},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":173,"sizeDeletions":-6},{"number":"2","revision":"58f4a76e0de31c110717a2398dfb780339afcddc","parents":["d23510d05c04a7f4da5e061965c4c351d3246e77"],"ref":"refs/changes/10/1810/2","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1492727422,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1492727450,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":13,"deletions":-1},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":102,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":58,"deletions":-3},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":174,"sizeDeletions":-6},{"number":"3","revision":"829dd87c9b948ea946d63ac1d69102d707a02d08","parents":["d23510d05c04a7f4da5e061965c4c351d3246e77"],"ref":"refs/changes/10/1810/3","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1493077499,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493077524,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"docs/index.md","line":586,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Being HTTP API documentation, I think this sentence is out of place.  I think this is covered by the change to the client library documentation."},{"file":"docs/index.md","line":586,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Agreed, will fix."},{"file":"docs/index.md","line":586,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Done"},{"file":"lib/objects/common.js","line":1007,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Is it worth asserting that there\u0027s no \"attribute\" property on these?"},{"file":"lib/objects/common.js","line":1007,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Good point, will fix."},{"file":"lib/objects/common.js","line":1007,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Done"},{"file":"lib/objects/common.js","line":1025,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Is this a typo?"},{"file":"lib/objects/common.js","line":1025,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Will change to \"return early\" instead of \"early out\". Is that OK?"},{"file":"lib/objects/common.js","line":1025,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Yup.  Thanks."},{"file":"lib/objects/common.js","line":1025,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Done"},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"At one point, it was mentioned that if we hit this case, and the specific case that the unusable field is currently being reindexed, then we could refresh the bucket cache.  The idea was that once the reindexing completes, it may still be several minutes before all of the Morays get the new bucket configuration, but we could cut that down if Morays proactively re-checked in this case, since we know it\u0027s one where the bucket\u0027s state is likely to change soon."},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"I don\u0027t remember it was mentioned as a viable solution. Do you remember where that was mentioned?\n\nIf I understand correctly, this would currently mean that the most significant positive impact that such a change would have is that it might cut by 5 minutes the time for some findObjects requests to not fail with a NotIndexedError. At the same time, the most significant negative impact such a change would have would be that we\u0027d refresh the bucket cache for a potentially large number of findObjects requests before the fields being reindexed are usable, which could be true for much more than 5 minutes.\n\nIs that correct?\n\nIf so, it seems to me that the potential issues would outweigh the potential gains."},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"\u003e I don\u0027t remember it was mentioned as a viable solution. Do you remember where that was mentioned?\n\nNo, sorry.\n\n\u003e Is that correct?\n\nYes, but in a lot of cases (including all of the marlin schema updates that we\u0027ve done in the past), it takes only a few seconds to reindex everything, so the 5 minute window is quite long compared to that.\n\nOne middle ground would be to reduce the caching interval significantly (e.g., to 10 seconds) when we know there\u0027s reindexing going on.  10 seconds is much better than 5 minutes for these cases, and one extra PostgreSQL request per 10 seconds shouldn\u0027t be nearly enough to be a problem.  What do you think of that?"},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"\u003e Yes, but in a lot of cases (including all of the marlin schema updates that we\u0027ve done in the past), it takes only a few seconds to reindex everything, so the 5 minute window is quite long compared to that.\n\nAh, I wasn\u0027t aware of that use case, thank you for sharing that.\n\nMy concern with changing the cache eviction delay or the cache policy *server side* is that it seems that in general the server doesn\u0027t really know what the client\u0027s use case is, whereas the client does.\n\nSo a 10 seconds cache eviction delay, or not using the cache at all might make sense for the marlin use case, but maybe not for another.\n\nAnother concern is that I\u0027m wondering what would happen in general if we\u0027d allow tweaking the cache mechanism depending on findObjects options. It seems that two different options with different cache requirements could conflict, in the sense that one would overwrite the other, and that driving that client side would allow to \"resolve\" these conflicts.\n\nI\u0027m not saying that will necessarily be needed, I\u0027m just trying to challenge the idea to convince myself. With the same goal in mind, I\u0027m wondering if it would be possible in the marlin use case to set `noBucketCache` to true after the reindexing process completed, and turn it off when findObjects requests with `requireIndexes` is set to true do not error?"},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"\u003e My concern with changing the cache eviction delay or the cache policy *server side* is that it seems that in general the server doesn\u0027t really know what the client\u0027s use case is, whereas the client does.\nSo a 10 seconds cache eviction delay, or not using the cache at all might make sense for the marlin use case, but maybe not for another.\n\nOn the other hand, I think that requiring clients to understand the server\u0027s caching model for bucket configuration is an unfortunate design feature, and to the extent we can avoid pushing that complexity to clients, that would be a big improvement.  To be concrete:\n\n\u003e With the same goal in mind, I\u0027m wondering if it would be possible in the marlin use case to set `noBucketCache` to true after the reindexing process completed, and turn it off when findObjects requests with `requireIndexes` is set to true do not error?\n\nSince you can always hit different Moray servers that haven\u0027t updated their cache, it\u0027s not enough to wait until these requests do not fail.  There\u0027s no way to know that you\u0027ve hit all the servers you\u0027re going to (and since cueball reshuffles serves with some frequency, it\u0027s quite likely this could work for a while and then fail again).\n\nEven if that worked, it seems like this logic would need to be implemented in every client that ever made use of adding an index and reindexing, and I\u0027d rather implement the appropriate behavior in one place.\n\nI don\u0027t really see a case where the proposed policy would be a problem:\n\n- If the client asks for noBucketCache, we can still honor it, and this change has no effect.\n- If the query does not require the updated bucket config, then this will have no effect.\n- If the query requires the updated bucket config in order to work, and the bucket config has been updated, then the query would previously have failed, but with the new policy it will succeed (after one additional database query), which is a good change.\n- If the query requires the updated bucket config in order to work, and the bucket config has not been updated, then the query would previously have failed, and it will still fail (after one additional database query).  This is an error case anyway and seems unlikely to be latency-sensitive.\n\nBecause indexes are generally only added, not removed or changed (especially after MORAY-379), I think we can essentially always tell when our bucket configuration is out of date and a query needs the new one.  There cam be false positives (if an operator manually tried to search on an index that wasn\u0027t there, or if a program started using the new index before it was ready), but the impact would be mitigated by caching for a briefer period, which I think can still ensure a minimal impact on the database."},{"file":"lib/objects/find.js","line":43,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"\u003e Since you can always hit different Moray servers that haven\u0027t updated their cache, it\u0027s not enough to wait until these requests do not fail.\n\nRight, that was an oversight from me before I wrote that comment, my apologies.\n\n\u003e Even if that worked, it seems like this logic would need to be implemented in every client that ever made use of adding an index and reindexing, and I\u0027d rather implement the appropriate behavior in one place.\n\nMy perspective was limited to VMAPI\u0027s use case, so I considered that the default behavior of a 5 minutes cache eviction delay + findObjects({requireIndexes: true}) responding with errors at worst until 5 minutes after reindexing was completed was acceptable, and that other requirements (such as the marlin\u0027s schema updates use case) would be fairly rare. So I assumed that this logic would not need to be implemented in every client, but only for specific use cases. I may be missing something though.\n\n\u003e I don\u0027t really see a case where the proposed policy would be a problem:\n\nWhat I meant is that, if we added later another findObjects option that needed to change the cache eviction delay to a different value, and if that new option was set for findObjects requests at the same time as the requireIndexes option, and because the bucket cache seems to be global to the server, then it seems that one change to the cache eviction delay would overwrite the other. \n\nAgain, this was more a thought experiment to challenge the design than referring to a valid use case.\n\n\u003e Because indexes are generally only added, not removed or changed (especially after MORAY-379), I think we can essentially always tell when our bucket configuration is out of date and a query needs the new one.  There cam be false positives (if an operator manually tried to search on an index that wasn\u0027t there, or if a program started using the new index before it was ready), but the impact would be mitigated by caching for a briefer period, which I think can still ensure a minimal impact on the database.\n\nThat sounds good to me. I\u0027m struggling to come up with a straightforward clean implementation though, mainly because the bucketCache is global to the server, so it seems we\u0027d need to enable/track that specific cache policy separately. Again, I may be missing something, I\u0027ll ping you in chat to discuss the specifics and what you had in mind."},{"file":"lib/objects/find.js","line":65,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Do you think this should only send the options that were actually specified by the client?"},{"file":"lib/objects/find.js","line":65,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"My understanding of the semantics of the \"sendHandledOptions\" internal options  is that it makes the server send what options it can handle. From this perspective I don\u0027t this it should only send the options that were actually specified by the client.\n\nBut I\u0027m open to changing that if that benefits some use cases."},{"file":"lib/objects/find.js","line":65,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I thought the expectation was that it would send the list of options that were asked for and honored (similar to DNS), but I haven\u0027t thought through the implications of the other design.  I suppose it\u0027s fine either way."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":13,"deletions":-1},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":71,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":59,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":144,"sizeDeletions":-5},{"number":"4","revision":"99f715d0cad606f61816296ab04bf10295ac4dba","parents":["d362db4d7a72f08c0b14fa8639b3e2b1a70981b6"],"ref":"refs/changes/10/1810/4","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1494351381,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1494352037,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1494351412,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"lib/objects/common.js","line":1014,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":".forEach() won\u0027t call the callback with not/and/or filters."},{"file":"lib/objects/common.js","line":1014,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"This is not what I understand from the following:\n\n➜  tmp nvm use v0.10.40   \nNow using node v0.10.40 (npm v1.4.28)\n➜  tmp npm install moray-filter\nmoray-filter@1.0.0 node_modules/moray-filter\n└── assert-plus@1.0.0\n➜  tmp node\n\u003e var mod_morayFilter \u003d require(\u0027moray-filter\u0027);\nundefined\n\u003e var parsedFilter \u003d mod_morayFilter.parse(\u0027(\u0026(foo\u003dbar)(baz\u003d42))\u0027);\nundefined\n\u003e parsedFilter.forEach(function (filterComponent) { console.log(filterComponent) })\n{ attribute: \u0027foo\u0027, raw: \u003cBuffer 62 61 72\u003e }\n{ attribute: \u0027baz\u0027, raw: \u003cBuffer 34 32\u003e }\n{ filters: \n   [ { attribute: \u0027foo\u0027, raw: \u003cBuffer 62 61 72\u003e },\n     { attribute: \u0027baz\u0027, raw: \u003cBuffer 34 32\u003e } ] }\nundefined\n\u003e\n\nOr am I missing something?"},{"file":"lib/objects/common.js","line":1014,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Ah, you\u0027re right. I misread the code and thought that it returned earlier on. Ignore this comment."},{"file":"lib/objects/common.js","line":1014,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good, thanks!"},{"file":"lib/objects/common.js","line":1037,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"\"as\""},{"file":"lib/objects/common.js","line":1037,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Here I meant \"and consider that field as having a corresponding usable index\", so I wrote \"has\" to mean \"a field that has an index associated to it\". I wanted to be explicit about the distinction between a field (as in the concept of any property set on objects stored in Moray) and an index (as in an index at the database level.\n\nHowever I trust your English skills much more than mine, and regardless of what\u0027s more correct, it seems the current formulation is confusing.\n\nIf you think rewriting that with \"\"and consider that field as having a corresponding usable index\" is not more correct or clearer, then I\u0027ll rewrite it with \"as\" instead of \"has\"."},{"file":"lib/objects/common.js","line":1037,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Ah, I understand now. How about \"has a usable Postgres index\" ? I think that that would help me understand the meaning on the first read."},{"file":"lib/objects/common.js","line":1037,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Your suggestion sounds better, I\u0027ll use that to update the current wording. Thanks!"},{"file":"lib/objects/find.js","line":60,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Is there a reason to not just pass unusableIndexes here?"},{"file":"lib/objects/find.js","line":60,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Passing unusableIndexes would be nearly identical, I just like in general to be explicit about the parameters that I pass as objects unless it\u0027s prohibitively tedious. That makes the code clearer to read, and in this case that prevents coupling between getUnusableIndexes\u0027 output and the NotIndexedError\u0027s constructor input."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":7,"deletions":-1},{"file":"lib/errors.js","type":"MODIFIED","insertions":17,"deletions":-3},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":84,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":74,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":183,"sizeDeletions":-8},{"number":"5","revision":"f738f505fe143874fbfaf3e1dfb0ee69e68b20c9","parents":["d362db4d7a72f08c0b14fa8639b3e2b1a70981b6"],"ref":"refs/changes/10/1810/5","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1495150463,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1495150968,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1495150493,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":7,"deletions":-1},{"file":"lib/errors.js","type":"MODIFIED","insertions":17,"deletions":-3},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":84,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":74,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":183,"sizeDeletions":-8},{"number":"6","revision":"cf807237bacda37744a736689bb57ffe5b85b7a3","parents":["52d7669f7134d2a57c35f97891d3e166d7f1cb76"],"ref":"refs/changes/10/1810/6","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1496086355,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1496086392,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":6,"deletions":0},{"file":"lib/errors.js","type":"MODIFIED","insertions":17,"deletions":-3},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":84,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":74,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":182,"sizeDeletions":-7},{"number":"7","revision":"18fe21a66d6cc937179d62ac2995e8a8c9e33226","parents":["52d7669f7134d2a57c35f97891d3e166d7f1cb76"],"ref":"refs/changes/10/1810/7","uploader":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"createdOn":1496355229,"author":{"name":"Julien Gilli","email":"julien.gilli@joyent.com","username":""},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1496354019,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1496086392,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"SUBM","value":"1","grantedOn":1496356398,"by":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"docs/index.md","type":"MODIFIED","insertions":6,"deletions":0},{"file":"lib/errors.js","type":"MODIFIED","insertions":17,"deletions":-3},{"file":"lib/objects/common.js","type":"MODIFIED","insertions":84,"deletions":-1},{"file":"lib/objects/find.js","type":"MODIFIED","insertions":74,"deletions":-2},{"file":"package.json","type":"MODIFIED","insertions":1,"deletions":-1}],"sizeInsertions":182,"sizeDeletions":-7}],"allReviewers":[{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},{"name":"Joyent Automation","username":"joyent-automation"},{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}]}