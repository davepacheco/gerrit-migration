commit 8a2f26e0777280f1cef551ba31625827aa0132b1
Author: YangYong3 <yy1111.yang@samsung.com>
Date:   2017-04-03T09:55:25+09:00 (2 years, 6 months ago)
    
    joyent/node-triton#169 rbac CLI not working ..

diff --git a/lib/do_rbac/do_apply.js b/lib/do_rbac/do_apply.js
index 2bd083d..7de1f12 100644
--- a/lib/do_rbac/do_apply.js
+++ b/lib/do_rbac/do_apply.js
@@ -39,7 +39,18 @@ function do_apply(subcmd, opts, args, cb) {
         rbacConfigPath: opts.file || './rbac.json',
         rbacDryRun: opts.dry_run
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
+
         rbac.loadRbacConfig,
         rbac.loadRbacState,
         rbac.createRbacUpdatePlan,
diff --git a/lib/do_rbac/do_info.js b/lib/do_rbac/do_info.js
index bcb7853..e9b2793 100644
--- a/lib/do_rbac/do_info.js
+++ b/lib/do_rbac/do_info.js
@@ -60,8 +60,6 @@ var common = require('../common');
 var errors = require('../errors');
 var rbac = require('../rbac');
 
-
-
 function do_info(subcmd, opts, args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -83,7 +81,17 @@ function do_info(subcmd, opts, args, cb) {
         cloudapi: this.top.tritonapi.cloudapi,
         rbacStateAll: opts.all
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
 
         rbac.loadRbacState,
 
diff --git a/lib/do_rbac/do_key.js b/lib/do_rbac/do_key.js
index dbff62c..e4b149e 100644
--- a/lib/do_rbac/do_key.js
+++ b/lib/do_rbac/do_key.js
@@ -26,25 +26,29 @@ function _showUserKey(opts, cb) {
     assert.string(opts.userId, 'opts.userId');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getUserKey({
-        userId: opts.userId,
-        // Currently `cloudapi.getUserKey` isn't picky about the `name` being
-        // passed in as the `opts.fingerprint` arg.
-        fingerprint: opts.id
-    }, function onUserKey(err, userKey) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
 
-        if (opts.json) {
-            console.log(JSON.stringify(userKey));
-        } else {
-            console.log(common.chomp(userKey.key));
-        }
-        cb();
+        tritonapi.cloudapi.getUserKey({
+            userId: opts.userId,
+            // Currently `cloudapi.getUserKey` isn't picky about
+            // the `name` being
+            // passed in as the `opts.fingerprint` arg.
+            fingerprint: opts.id
+        }, function onUserKey(err, userKey) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (opts.json) {
+                console.log(JSON.stringify(userKey));
+            } else {
+                console.log(common.chomp(userKey.key));
+            }
+            cb();
+        });
     });
 }
 
@@ -61,7 +65,8 @@ function _deleteUserKeys(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -120,7 +125,8 @@ function _addUserKey(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(ctx, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_keys.js b/lib/do_rbac/do_keys.js
index 925c0cb..5957845 100644
--- a/lib/do_rbac/do_keys.js
+++ b/lib/do_rbac/do_keys.js
@@ -42,27 +42,30 @@ function do_keys(subcmd, opts, args, cb) {
     columns = columns.split(',');
     var sort = opts.s.split(',');
 
-    this.top.tritonapi.cloudapi.listUserKeys({userId: args[0]},
-            function (err, userKeys) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        tritonapi.cloudapi.listUserKeys({userId: args[0]},
+                function (err, userKeys) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-        if (opts.json) {
-            common.jsonStream(userKeys);
-        } else if (opts.authorized_keys) {
-            userKeys.forEach(function (key) {
-                console.log(common.chomp(key.key));
-            });
-        } else {
-            tabula(userKeys, {
-                skipHeader: false,
-                columns: columns,
-                sort: sort
-            });
-        }
-        cb();
+            if (opts.json) {
+                common.jsonStream(userKeys);
+            } else if (opts.authorized_keys) {
+                userKeys.forEach(function (key) {
+                    console.log(common.chomp(key.key));
+                });
+            } else {
+                tabula(userKeys, {
+                    skipHeader: false,
+                    columns: columns,
+                    sort: sort
+                });
+            }
+            cb();
+        });
     });
 }
 
diff --git a/lib/do_rbac/do_policies.js b/lib/do_rbac/do_policies.js
index a873324..6c890b2 100644
--- a/lib/do_rbac/do_policies.js
+++ b/lib/do_rbac/do_policies.js
@@ -45,29 +45,32 @@ function do_policies(subcmd, opts, args, cb) {
     columns = columns.split(',');
     var sort = opts.s.split(',');
 
-    this.top.tritonapi.cloudapi.listPolicies(function (err, policies) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (opts.json) {
-            common.jsonStream(policies);
-        } else {
-            // Add some convenience fields
-            for (var i = 0; i < policies.length; i++) {
-                var role = policies[i];
-                role.nrules = role.rules.length;
-                role.rules = role.rules.sort().join('; ');
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        tritonapi.cloudapi.listPolicies(function (err, policies) {
+            if (err) {
+                cb(err);
+                return;
             }
 
-            tabula(policies, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
-            });
-        }
-        cb();
+            if (opts.json) {
+                common.jsonStream(policies);
+            } else {
+                // Add some convenience fields
+                for (var i = 0; i < policies.length; i++) {
+                    var role = policies[i];
+                    role.nrules = role.rules.length;
+                    role.rules = role.rules.sort().join('; ');
+                }
+
+                tabula(policies, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort
+                });
+            }
+            cb();
+        });
     });
 }
 
diff --git a/lib/do_rbac/do_policy.js b/lib/do_rbac/do_policy.js
index 3e6b278..80b27ab 100644
--- a/lib/do_rbac/do_policy.js
+++ b/lib/do_rbac/do_policy.js
@@ -37,34 +37,38 @@ function _showPolicy(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getPolicy({
-        id: opts.id
-    }, function onPolicy(err, policy) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
 
-        if (opts.json) {
-            console.log(JSON.stringify(policy));
-        } else {
-            console.log('name: %s', policy.name);
-            delete policy.name;
-            var rules = policy.rules;
-            delete policy.rules;
-            Object.keys(policy).forEach(function (key) {
-                console.log('%s: %s', key, policy[key]);
-            });
-            // Do rules last because it is the sole multiline field. The
-            // rules can tend to be long, so we want to use multiline output.
-            console.log('rules:');
-            if (rules && rules.length) {
-                console.log('    ' + rules.join('\n    '));
+        tritonapi.cloudapi.getPolicy({
+            id: opts.id
+        }, function onPolicy(err, policy) {
+            if (err) {
+                cb(err);
+                return;
             }
-        }
-        cb();
+
+            if (opts.json) {
+                console.log(JSON.stringify(policy));
+            } else {
+                console.log('name: %s', policy.name);
+                delete policy.name;
+                var rules = policy.rules;
+                delete policy.rules;
+                Object.keys(policy).forEach(function (key) {
+                    console.log('%s: %s', key, policy[key]);
+                });
+                // Do rules last because it is the sole multiline field. The
+                // rules can tend to be long, so we want to use multiline
+                // output.
+                console.log('rules:');
+                if (rules && rules.length) {
+                    console.log('    ' + rules.join('\n    '));
+                }
+            }
+            cb();
+        });
     });
 }
 
@@ -203,19 +207,20 @@ function _editPolicy(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.cloudapi.getPolicy({
+            id: opts.id
+        }, function onPolicy(err, policy_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.cloudapi.getPolicy({
-        id: opts.id
-    }, function onPolicy(err, policy_) {
-        if (err) {
-            return cb(err);
-        }
-
-        policy = policy_;
-        filename = format('%s-policy-%s.txt', cli.tritonapi.profile.account,
-            policy.name);
-        origText = _yamlishFromPolicy(policy);
-        editAttempt(origText);
+            policy = policy_;
+            filename = format('%s-policy-%s.txt', cli.tritonapi.profile.account,
+                policy.name);
+            origText = _yamlishFromPolicy(policy);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -232,7 +237,8 @@ function _deletePolicies(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -286,7 +292,8 @@ function _addPolicy(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_reset.js b/lib/do_rbac/do_reset.js
index 998bdfa..132041b 100644
--- a/lib/do_rbac/do_reset.js
+++ b/lib/do_rbac/do_reset.js
@@ -36,7 +36,18 @@ function do_reset(subcmd, opts, args, cb) {
         cloudapi: this.top.tritonapi.cloudapi,
         rbacDryRun: opts.dry_run
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
+
         function emptyConfig(ctx, next) {
             ctx.rbacConfig = {};
             next();
diff --git a/lib/do_rbac/do_role.js b/lib/do_rbac/do_role.js
index 4fb56a7..30b68de 100644
--- a/lib/do_rbac/do_role.js
+++ b/lib/do_rbac/do_role.js
@@ -54,43 +54,45 @@ function _showRole(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-        if (opts.json) {
-            console.log(JSON.stringify(role));
-        } else {
-            var keys = Object.keys(role);
-            keys.sort(function cmpKeys(a, b) {
-                var idxA = SHOW_ORDER_FIELDS.indexOf(a);
-                var idxB = SHOW_ORDER_FIELDS.indexOf(b);
-                if (idxA === -1 && idxB === -1) {
-                    return 0;
-                } else if (idxA === -1) {
-                    return -1;
-                } else if (idxB === -1) {
-                    return 1;
-                } else if (idxA < idxB) {
-                    return -1;
-                } else if (idxA > idxB) {
-                    return 1;
-                }
-            });
+            if (opts.json) {
+                console.log(JSON.stringify(role));
+            } else {
+                var keys = Object.keys(role);
+                keys.sort(function cmpKeys(a, b) {
+                    var idxA = SHOW_ORDER_FIELDS.indexOf(a);
+                    var idxB = SHOW_ORDER_FIELDS.indexOf(b);
+                    if (idxA === -1 && idxB === -1) {
+                        return 0;
+                    } else if (idxA === -1) {
+                        return -1;
+                    } else if (idxB === -1) {
+                        return 1;
+                    } else if (idxA < idxB) {
+                        return -1;
+                    } else if (idxA > idxB) {
+                        return 1;
+                    }
+                });
 
-            keys.forEach(function (key) {
-                var val = role[key];
-                if (Array.isArray(val)) {
-                    val = val.join(', ');
-                }
-                console.log('%s: %s', key, val);
-            });
-        }
-        cb();
+                keys.forEach(function (key) {
+                    var val = role[key];
+                    if (Array.isArray(val)) {
+                        val = val.join(', ');
+                    }
+                    console.log('%s: %s', key, val);
+                });
+            }
+            cb();
+        });
     });
 }
 
@@ -201,17 +203,19 @@ function _editRole(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.cloudapi.getRole({id: opts.id},
+            function onRole(err, role_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role_) {
-        if (err) {
-            return cb(err);
-        }
-
-        role = role_;
-        filename = format('%s-role-%s.txt', cli.tritonapi.profile.account,
-            role.name);
-        origText = _yamlishFromRole(role);
-        editAttempt(origText);
+            role = role_;
+            filename = format('%s-role-%s.txt', cli.tritonapi.profile.account,
+                role.name);
+            origText = _yamlishFromRole(role);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -228,7 +232,8 @@ function _deleteRoles(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -282,7 +287,8 @@ function _addRole(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_role_tags.js b/lib/do_rbac/do_role_tags.js
index c669f1c..d45f305 100644
--- a/lib/do_rbac/do_role_tags.js
+++ b/lib/do_rbac/do_role_tags.js
@@ -69,25 +69,27 @@ function _listRoleTags(opts, cb) {
     assert.string(opts.resourceId, 'opts.resourceId');
     assert.optionalBool(opts.json, 'opts.json');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.getRoleTags({
-        resourceType: opts.resourceType,
-        id: opts.resourceId
-    }, function (err, roleTags) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.getRoleTags({
+            resourceType: opts.resourceType,
+            id: opts.resourceId
+        }, function (err, roleTags) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-        if (opts.json) {
-            console.log(JSON.stringify(roleTags));
-        } else {
-            roleTags.forEach(function (r) {
-                console.log(r);
-            });
-        }
-        cb();
+            if (opts.json) {
+                console.log(JSON.stringify(roleTags));
+            } else {
+                roleTags.forEach(function (r) {
+                    console.log(r);
+                });
+            }
+            cb();
+        });
     });
 }
 
@@ -100,7 +102,9 @@ function _addRoleTags(opts, cb) {
     var cli = opts.cli;
     var log = cli.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
+
         function getCurrRoleTags(ctx, next) {
             cli.tritonapi.getRoleTags({
                 resourceType: opts.resourceType,
@@ -217,23 +221,24 @@ function _editRoleTags(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.getRoleTags({
+            resourceType: opts.resourceType,
+            id: opts.resourceId
+        }, function (err, roleTags_) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-    cli.tritonapi.getRoleTags({
-        resourceType: opts.resourceType,
-        id: opts.resourceId
-    }, function (err, roleTags_) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        roleTags = roleTags_;
-        filename = format('%s-%s-%s-roleTags.txt',
-            cli.tritonapi.profile.account,
-            opts.resourceType,
-            common.filenameSlug(opts.resourceId));
-        origText = _reprFromRoleTags(roleTags);
-        editAttempt(origText);
+            roleTags = roleTags_;
+            filename = format('%s-%s-%s-roleTags.txt',
+                cli.tritonapi.profile.account,
+                opts.resourceType,
+                common.filenameSlug(opts.resourceId));
+            origText = _reprFromRoleTags(roleTags);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -247,7 +252,8 @@ function _setRoleTags(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(ctx, next) {
             if (opts.yes) {
                 return next();
@@ -289,7 +295,8 @@ function _deleteRoleTags(opts, cb) {
     var cli = opts.cli;
     var log = cli.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function getCurrRoleTags(ctx, next) {
             cli.tritonapi.getRoleTags({
                 resourceType: opts.resourceType,
@@ -369,7 +376,8 @@ function _deleteAllRoleTags(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(ctx, next) {
             if (opts.yes) {
                 return next();
@@ -421,7 +429,6 @@ function makeRoleTagsFunc(cfg) {
     assert.string(cfg.cmdName, 'cfg.cmdName');
     assert.string(cfg.argName, 'cfg.argName');
     assert.string(cfg.helpArgIs, 'cfg.helpArgIs');
-
     var func = function (subcmd, opts, args, cb) {
         if (opts.help) {
             this.do_help('help', {}, [subcmd], cb);
diff --git a/lib/do_rbac/do_roles.js b/lib/do_rbac/do_roles.js
index 772134f..1355b1c 100644
--- a/lib/do_rbac/do_roles.js
+++ b/lib/do_rbac/do_roles.js
@@ -40,49 +40,53 @@ function do_roles(subcmd, opts, args, cb) {
     columns = columns.split(',');
     var sort = opts.s.split(',');
 
-    this.top.tritonapi.cloudapi.listRoles(function (err, roles) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (opts.json) {
-            common.jsonStream(roles);
-        } else {
-            var i, j;
-            // Add some convenience fields
-            for (i = 0; i < roles.length; i++) {
-                var role = roles[i];
-                role.policies = role.policies.sort().join(',');
-                var defaultMap = {};
-                for (j = 0; j < role.default_members.length; j++) {
-                    defaultMap[role.default_members[j]] = true;
-                }
-                role.default_members = role.default_members.sort().join(',');
-                var sortedRawMembers = role.members.sort();
-                var defaultMembers = [];
-                var members = [];
-                for (j = 0; j < sortedRawMembers.length; j++) {
-                    var m = sortedRawMembers[j];
-                    if (defaultMap[m]) {
-                        defaultMembers.push(m);
-                    // TODO: formal envvar with a --no-color top-level opt
-                    } else if (process.env.TRITON_NO_COLOR) {
-                        members.push(m);
-                    } else {
-                        members.push(common.ansiStylize(m, 'magenta'));
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        tritonapi.cloudapi.listRoles(function (err, roles) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (opts.json) {
+                common.jsonStream(roles);
+            } else {
+                var i, j;
+                // Add some convenience fields
+                for (i = 0; i < roles.length; i++) {
+                    var role = roles[i];
+                    role.policies = role.policies.sort().join(',');
+                    var defaultMap = {};
+                    for (j = 0; j < role.default_members.length; j++) {
+                        defaultMap[role.default_members[j]] = true;
                     }
+                    role.default_members =
+                        role.default_members.sort().join(',');
+                    var sortedRawMembers = role.members.sort();
+                    var defaultMembers = [];
+                    var members = [];
+                    for (j = 0; j < sortedRawMembers.length; j++) {
+                        var m = sortedRawMembers[j];
+                        if (defaultMap[m]) {
+                            defaultMembers.push(m);
+                        // TODO: formal envvar with a --no-color top-level opt
+                        } else if (process.env.TRITON_NO_COLOR) {
+                            members.push(m);
+                        } else {
+                            members.push(common.ansiStylize(m, 'magenta'));
+                        }
+                    }
+                    role.members = defaultMembers.concat(members).join(',');
                 }
-                role.members = defaultMembers.concat(members).join(',');
-            }
 
-            tabula(roles, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
-            });
-        }
-        cb();
+                tabula(roles, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort
+                });
+            }
+            cb();
+        });
     });
 }
 
diff --git a/lib/do_rbac/do_user.js b/lib/do_rbac/do_user.js
index b3a755a..3866f87 100644
--- a/lib/do_rbac/do_user.js
+++ b/lib/do_rbac/do_user.js
@@ -55,44 +55,46 @@ function _showUser(opts, cb) {
     assert.optionalBool(opts.roles, 'opts.roles');
     assert.optionalBool(opts.keys, 'opts.keys');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
-
-    cli.tritonapi.getUser({
-        id: opts.id,
-        roles: opts.roles,
-        keys: opts.keys
-    }, function onUser(err, user) {
-        if (err) {
-            return cb(err);
-        }
 
-        if (opts.json) {
-            console.log(JSON.stringify(user));
-        } else {
-            var skip = {keys: true, roles: true, default_roles: true};
-            Object.keys(user).forEach(function (field) {
-                if (skip[field]) {
-                    return;
-                }
-                console.log('%s: %s', field, user[field]);
-            });
-            if (opts.roles) {
-                console.log('roles:');
-                user.roles.forEach(
-                    function (r) { console.log('    ' + r); });
-                console.log('default_roles:');
-                user.default_roles.forEach(
-                    function (r) { console.log('    ' + r); });
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.getUser({
+            id: opts.id,
+            roles: opts.roles,
+            keys: opts.keys
+        }, function onUser(err, user) {
+            if (err) {
+                return cb(err);
             }
-            if (opts.keys) {
-                console.log('keys:');
-                user.keys.forEach(function (key) {
-                    console.log('    %s%s', key.fingerprint,
-                        key.name ? format(' (%s)', key.name) : '');
+
+            if (opts.json) {
+                console.log(JSON.stringify(user));
+            } else {
+                var skip = {keys: true, roles: true, default_roles: true};
+                Object.keys(user).forEach(function (field) {
+                    if (skip[field]) {
+                        return;
+                    }
+                    console.log('%s: %s', field, user[field]);
                 });
+                if (opts.roles) {
+                    console.log('roles:');
+                    user.roles.forEach(
+                        function (r) { console.log('    ' + r); });
+                    console.log('default_roles:');
+                    user.default_roles.forEach(
+                        function (r) { console.log('    ' + r); });
+                }
+                if (opts.keys) {
+                    console.log('keys:');
+                    user.keys.forEach(function (key) {
+                        console.log('    %s%s', key.fingerprint,
+                            key.name ? format(' (%s)', key.name) : '');
+                    });
+                }
             }
-        }
-        cb();
+            cb();
+        });
     });
 }
 
@@ -193,20 +195,21 @@ function _editUser(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.getUser({
+            id: opts.id,
+            roles: opts.roles
+        }, function onUser(err, user_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.getUser({
-        id: opts.id,
-        roles: opts.roles
-    }, function onUser(err, user_) {
-        if (err) {
-            return cb(err);
-        }
-
-        user = user_;
-        filename = format('%s-user-%s.txt', cli.tritonapi.profile.account,
-            user.login);
-        origText = _yamlishFromUser(user);
-        editAttempt(origText);
+            user = user_;
+            filename = format('%s-user-%s.txt', cli.tritonapi.profile.account,
+                user.login);
+            origText = _yamlishFromUser(user);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -223,7 +226,8 @@ function _deleteUsers(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -277,7 +281,8 @@ function _addUser(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_users.js b/lib/do_rbac/do_users.js
index f12aa8f..2178650 100644
--- a/lib/do_rbac/do_users.js
+++ b/lib/do_rbac/do_users.js
@@ -41,35 +41,38 @@ function do_users(subcmd, opts, args, cb) {
 
     var sort = opts.s.split(',');
 
-    this.top.tritonapi.cloudapi.listUsers(function (err, users) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (opts.json) {
-            common.jsonStream(users);
-        } else {
-            // Add some convenience fields
-            for (var i = 0; i < users.length; i++) {
-                var user = users[i];
-                user.name = ((user.firstName || '') + ' ' +
-                    (user.lastName || '')).trim() || undefined;
-                if (user.created) {
-                    user.cdate = user.created.slice(0, 10); // Just the date.
-                }
-                if (user.updated) {
-                    user.udate = user.updated.slice(0, 10); // Just the date.
-                }
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        tritonapi.cloudapi.listUsers(function (err, users) {
+            if (err) {
+                cb(err);
+                return;
             }
 
-            tabula(users, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
-            });
-        }
-        cb();
+            if (opts.json) {
+                common.jsonStream(users);
+            } else {
+                // Add some convenience fields
+                for (var i = 0; i < users.length; i++) {
+                    var user = users[i];
+                    user.name = ((user.firstName || '') + ' ' +
+                        (user.lastName || '')).trim() || undefined;
+                    if (user.created) {
+                        user.cdate = user.created.slice(0, 10); //Just the date
+                    }
+                    if (user.updated) {
+                        user.udate = user.updated.slice(0, 10); //Just the date
+                    }
+                }
+
+                tabula(users, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort
+                });
+            }
+            cb();
+        });
     });
 }
 
