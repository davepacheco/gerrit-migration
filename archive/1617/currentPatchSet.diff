commit c3d0bba5d94aa1d1a9e9ff6a83ea08988d13054c (refs/changes/17/1617/4)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-03-07T20:09:49+00:00 (2 years, 7 months ago)
    
    DOCKER-1010 docker ps and docker inspect should not load all images

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index e026125..7bf54d0 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var child_process = require('child_process');
@@ -2500,7 +2500,6 @@ function getContainersForVms(opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.app, 'opts.app');
     assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
-    assert.arrayOfObject(opts.images, 'opts.images');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.pkgmapUtoN, 'opts.pkgmapUtoN');
     assert.array(opts.vmobjs, 'opts.vmobjs');
@@ -2522,7 +2521,6 @@ function getContainersForVms(opts, callback) {
             utils.vmobjToContainer({
                 clientApiVersion: opts.clientApiVersion,
                 app: opts.app,
-                imgs: opts.images,
                 log: opts.log
             }, vmobj, fwrules, function _addPkgLabel(e, container) {
                 if (!e) {
@@ -2575,7 +2573,6 @@ function getContainers(opts, callback) {
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
     assert.object(opts.app.vmapi, 'opts.app.vmapi');
     assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
-    assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalString(opts.filters, 'opts.filters');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
@@ -2914,7 +2911,6 @@ function getContainers(opts, callback) {
         getContainersForVms({
             app: opts.app,
             clientApiVersion: opts.clientApiVersion,
-            images: opts.images,
             log: log,
             pkgmapUtoN: pkgmapUtoN,
             vmobjs: objects
@@ -3458,7 +3454,6 @@ function inspectContainer(opts, callback) {
     assert.object(opts.app.config.fwapi, 'opts.app.config.fwapi');
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
     assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
-    assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
     assert.object(opts.vm, 'opts.vm');
@@ -3529,7 +3524,6 @@ function inspectContainer(opts, callback) {
         utils.vmobjToInspect({
             clientApiVersion: opts.clientApiVersion,
             app: opts.app,
-            imgs: opts.images,
             log: opts.log
         }, opts.vm, vmData, callback);
     });
diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index b2b70fe..81eb54e 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -121,12 +121,11 @@ function dockerImageJsonToModel(imageJson, opts) {
 /**
  * Get all the images available to the given account.
  *
- * Dev note on `Uuid` field:
- * I've added a `Uuid` as required for "utils.js#imageFromUuid" (used for
- * `docker ps`) to function, and Todd added `IndexName` (for docker build
- * functionality). These two fields don't exist in Docker-land representation
- * of an image object. However, AFAICT the way `listImages` is currently used
- * that `Uuid` and `IndexName` field doesn't get exposed. IOW, no harm, no foul.
+ * Dev note on `IndexName` field:
+ * Todd added `IndexName` (for docker build functionality). This field doesn't
+ * exist in Docker-land representation of an image object. However, AFAICT the
+ * way `listImages` is currently used the `IndexName` field doesn't get exposed.
+ * IOW, no harm, no foul.
  *
  * @param {Object} opts
  * @param {String} opts.account The account to which to limit access.
@@ -199,7 +198,6 @@ function listImages(opts, callback) {
                 var origin = img.origin || '';
 
                 dockerImage.RepoTags = [img.uuid];
-                dockerImage.Uuid = img.uuid;
                 dockerImage.Id = (img.uuid + img.uuid).replace(/-/g, '');
                 dockerImage.ParentId = (origin + origin).replace(/-/g, '');
                 dockerImage.Created = Math.floor((new Date(img.published_at))
@@ -309,7 +307,6 @@ function listImages(opts, callback) {
             var dockerImage = {
                 RepoTags: (repoTags && repoTags.length
                     ? repoTags : ['<none>:<none>']),
-                Uuid: img.image_uuid,
                 Id: img.docker_id,
                 IndexName: img.index_name,
                 Created: Math.floor((new Date(img.created))
diff --git a/lib/backends/sdc/utils.js b/lib/backends/sdc/utils.js
index 7f34502..b69511e 100644
--- a/lib/backends/sdc/utils.js
+++ b/lib/backends/sdc/utils.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -263,14 +263,12 @@ function vmobjToContainer(opts, obj, fwrules, callback)
 {
     assert.object(opts, 'opts');
     assert.object(opts.app, 'opts.app');
-    assert.arrayOfObject(opts.imgs, 'opts.imgs');
     assert.object(opts.log, 'opts.log');
     assert.object(obj, 'obj');
     assert.string(obj.alias, 'obj.alias');
 
     var cmd = [];
     var container = {};
-    var imgs = opts.imgs; // XXX imgs is a hack until we have better lookup
     var log = opts.log;
     var quoted_args = [];
     var im = obj.internal_metadata;
@@ -321,8 +319,8 @@ function vmobjToContainer(opts, obj, fwrules, callback)
     container.Status = _containerStatusFromVmobj({vmobj: obj, log: log});
 
     // `docker ps` shows the image REPO[:TAG], or the short imageId.
-    var image = imageFromUuid(opts.log, imgs, obj.image_uuid);
-    container.Image = nameFromImage(image);
+    container.Image = im['docker:imagename'] || im['docker:imageid']
+        || '<none>';
 
     // Add container labels from vm.tags:
     container.Labels = dockerLabelsFromVmTags(obj.tags || {});
@@ -345,23 +343,23 @@ function vmobjToContainer(opts, obj, fwrules, callback)
         seenPorts[proto].push(port);
     });
 
-    // Add the non-exposed ports:
-    if (image && image.ExposedPorts) {
-        Object.keys(image.ExposedPorts).forEach(function (portAndProto) {
-            // portAndProto looks like: "80/tcp"
-            var portStr = portAndProto.split('/', 1)[0];
-            var proto = portAndProto.slice(portStr.length+1);
-            var port = parseInt(portStr, 10);
-            if (seenPorts.hasOwnProperty(proto)
-                && seenPorts[proto].indexOf(port) == -1) {
-                container.Ports.push({
-                    'PrivatePort': port,
-                    'Type': proto
-                });
-                seenPorts[proto].push(port);
-            }
-        });
-    }
+    // Add the unpublished ports:
+    ['tcp', 'udp'].forEach(function (proto) {
+        var imName = 'docker:' + proto + '_unpublished_ports';
+        if (im[imName]) {
+            var unpublishedPorts = JSON.parse(im[imName]);
+            unpublishedPorts.forEach(function (port) {
+                if (seenPorts.hasOwnProperty(proto)
+                    && seenPorts[proto].indexOf(port) === -1) {
+                    container.Ports.push({
+                        'PrivatePort': port,
+                        'Type': proto
+                    });
+                    seenPorts[proto].push(port);
+                }
+            });
+        }
+    });
 
     function _addLinkNames() {
         // Find links that target this container.
@@ -386,66 +384,6 @@ function vmobjToContainer(opts, obj, fwrules, callback)
 }
 
 
-/*
- * Find the 'image' (object of the structure from backend.listImages())
- * matching the given IMGAPI image UUID.
- *
- * There are two things that could result in this not finding a matching image:
- * - The `docker_images` entry for this image was removed for this account.
- *   This is possible if sdc-docker doesn't *strictly* follow `docker rmi`
- *   semantics where an image used by a current container can't be removed.
- * - The great image UUID renaming for private registry support.
- *
- * @param {Bunyan Logger} log
- * @param {Array} img  Array of docker image objects from `backend.listImages`
- *      giving all current images for the relevant account. This code relies
- *      on the `Uuid` field in each element of this array.
- * @param {UUID} imgUuid  The IMGAPI image UUID to find.
- * @returns {Object} Details on the image, e.g.
- *          {
- *              Id: <docker image id>,
- *              RepoTags: [<REPO:TAG1>, ...],
- *              ...
- *          }
- *      If the image is not found, then `undefined` is returned.
- */
-function imageFromUuid(log, imgs, imgUuid)
-{
-    var image;
-    for (var i = 0; i < imgs.length; i++) {
-        if (imgs[i].Uuid === imgUuid) {
-            image = imgs[i];
-            break;
-        }
-    }
-    log.debug({imgUuid: imgUuid, found: Boolean(image), image: image},
-        'imageFromUuid');
-    return image;
-}
-
-
-/**
- * Return a name (suitable for some of the 'Image' fields in inspect
- * responses) for the given image (of the format returned from `imageFromUuid`).
- */
-function nameFromImage(image, excludeLatest) {
-    assert.optionalBool(excludeLatest, 'excludeLatest');
-    var name;
-    if (!image) {
-        name = '<unknown>';
-    } else if (image.RepoTags && image.RepoTags.length) {
-        name = image.RepoTags[0];
-        var idx = name.lastIndexOf(':');
-        if (idx !== -1 && name.slice(idx) === ':latest') {
-            name = name.slice(0, idx);
-        }
-    } else {
-        name = image.Id.slice(0, 12);
-    }
-    return name;
-}
-
-
 /*
  * Converts a dotted IPv4 address (eg: 1.2.3.4) to its integer value
  *
@@ -484,7 +422,6 @@ function netmaskToBits(netmask) {
 function vmobjToInspect(opts, obj, vmData, callback) {
     assert.object(opts, 'opts');
     assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
-    assert.arrayOfObject(opts.imgs, 'opts.imgs');
     assert.object(opts.log, 'opts.log');
     assert.string(obj.alias, 'obj.alias');
     assert.object(vmData, 'vmData');
@@ -499,13 +436,11 @@ function vmobjToInspect(opts, obj, vmData, callback) {
     var host_volume_regex = /\/hostvolumes(\/.*)$/;
     var fwrules = vmData.fwrules;
     var im = obj.internal_metadata;
-    var imgs = opts.imgs; // XXX imgs is a hack until we have better lookup
     var labels = {};
     var log = opts.log;
     var logConfig;
     var parts;
     var pkg = vmData.pkg;
-    var port;
     var restartpolicy;
     var vf;
 
@@ -532,6 +467,7 @@ function vmobjToInspect(opts, obj, vmData, callback) {
         'Domainname': obj.dns_domain || '',
         'ExposedPorts': null,
         'Hostname': obj.hostname || '',
+        'Image': im['docker:imagename'] || im['docker:imageid'] || '<none>',
         'MacAddress': '',
         'Memory': obj.max_physical_memory * (1024 * 1024),
         'MemorySwap': obj.max_swap * (1024 * 1024),
@@ -547,9 +483,6 @@ function vmobjToInspect(opts, obj, vmData, callback) {
         'WorkingDir': im['docker:workdir'] || ''
     };
 
-    var image = imageFromUuid(log, imgs, obj.image_uuid);
-    container.Config.Image = nameFromImage(image, true);
-
     if (im && im['docker:cmd']) {
         container.Config.Cmd = JSON.parse(im['docker:cmd']);
     } else {
@@ -749,11 +682,7 @@ function vmobjToInspect(opts, obj, vmData, callback) {
 
     container.HostnamePath = '/etc/hostname';
     container.HostsPath = '/etc/hosts';
-    if (!image) {
-        container.Image = '<none>';
-    } else {
-        container.Image = image.Id;
-    }
+    container.Image = im['docker:imageid'] || '<none>';
     container.MountLabel = '';
     container.Name = '/' + obj.alias;
 
@@ -781,13 +710,18 @@ function vmobjToInspect(opts, obj, vmData, callback) {
         container.HostConfig.PublishAllPorts = true;
     }
 
-    if (image && image.ExposedPorts) {
-        container.Config.ExposedPorts = {};
-        for (port in image.ExposedPorts) {
-            container.Config.ExposedPorts[port] = {};
-            container.NetworkSettings.Ports[port] = null;
+    ['tcp', 'udp'].forEach(function (proto) {
+        var imName = 'docker:' + proto + '_unpublished_ports';
+        if (im[imName]) {
+            var unpublishedPorts = JSON.parse(im[imName]);
+            container.Config.ExposedPorts = {};
+            unpublishedPorts.forEach(function (port) {
+                var portStr = format('%d/%s', port, proto);
+                container.Config.ExposedPorts[portStr] = {};
+                container.NetworkSettings.Ports[portStr] = null;
+            });
         }
-    }
+    });
 
     function addPublishedPort(nsProto, cp) {
         var portStr = cp + '/' + nsProto;
diff --git a/lib/common.js b/lib/common.js
index 5ab60e1..75a864a 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -616,30 +616,6 @@ function getVm(req, res, next) {
 }
 
 
-/**
- * Handler for loading all account images in the request object
- */
-function getImages(req, res, next) {
-    var opts = {
-        account: req.account,
-        app: req.app,
-        clientApiVersion: req.clientApiVersion,
-        log: req.log,
-        req_id: req.getId()
-    };
-
-    req.backend.listImages(opts, function (err, imgs) {
-        if (err) {
-            next(new errors.DockerError(err, 'problem retrieving images'));
-            return;
-        }
-
-        req.images = imgs;
-        next();
-    });
-}
-
-
 /*
  * Restify handler to set `req.image` to the docker image named by
  * `req.body.Image`. `req.image` is a instance of the `Image` model.
@@ -835,7 +811,6 @@ module.exports = {
     reqImage: reqImage,
     reqImageIncludeSmartos: reqImageIncludeSmartos,
     reqRegAuth: reqRegAuth,
-    getImages: getImages,
     getVm: getVm,
     getVmByUuid: getVmByUuid,
     humanDuration: humanDuration,
diff --git a/lib/endpoints/containers.js b/lib/endpoints/containers.js
index dfc2bfa..e135b78 100644
--- a/lib/endpoints/containers.js
+++ b/lib/endpoints/containers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -14,7 +14,6 @@ var util = require('util');
 
 var common = require('../common');
 var errors = require('../errors');
-var getImages = common.getImages;
 var getVm = common.getVm;
 var validate = require('../validate');
 
@@ -95,7 +94,6 @@ function containerList(req, res, next) {
     options.req_id = req.getId();
     options.app = req.app;
     options.account = req.account;
-    options.images = req.images;
     options.clientApiVersion = req.clientApiVersion;
 
     // Note: options.all is implied when using these query params.
@@ -179,7 +177,6 @@ function containerInspect(req, res, next) {
         app: req.app,
         clientApiVersion: req.clientApiVersion,
         id: id,
-        images: req.images,
         log: log,
         req_id: req.getId(),
         vm: req.vm
@@ -960,7 +957,7 @@ function register(http, before) {
 
     // Match: '/:apiversion/containers/json'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/json$/,
-        name: 'ContainerList' }, before, getImages,
+        name: 'ContainerList' }, before,
         queryParser, containerList);
 
     // Match: '/:apiversion/containers/create'
@@ -975,9 +972,8 @@ function register(http, before) {
         containerCreate);
 
     // Match: '/:apiversion/containers/:id/json'
-    // TODO(trent) The *full* getImages is overkill for a single container.
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/json$/,
-        name: 'ContainerInspect' }, before, reqParamsId, getVm, getImages,
+        name: 'ContainerInspect' }, before, reqParamsId, getVm,
         containerInspect);
 
     // Match: '/:apiversion/containers/:id/top'
diff --git a/test/lib/cli.js b/test/lib/cli.js
index 4b263ba..fe5a5f3 100644
--- a/test/lib/cli.js
+++ b/test/lib/cli.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -139,15 +139,6 @@ function cliInspect(t, opts, callback) {
  * Example:
  *  {
  *      "RepoTags": ["busybox:latest"],
- *      "Uuid": "d8473b5a-713b-6b89-e35b-40620a1da3b3",
- * `docker images <opts.args>`
- *
- * An array of entries will returned via the callback(err, entries), with each
- * entry being an object holding the docker images contents for one image.
- * Example:
- *  {
- *      "RepoTags": ["busybox:latest"],
- *      "Uuid": "d8473b5a-713b-6b89-e35b-40620a1da3b3",
  *      "Id": "bc744c4ab376115cc45c610d53f529dd2d4249ae6b35e5d6e7ae58863545aa",
  *      "IndexName": "docker.io",
  *      "Created": 1458325368,
