From 8b1632f28cf5b32219bd1302ce01acef878bde1a Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Thu, 3 Aug 2017 22:51:18 +0000
Subject: [PATCH] joyent/node-artedi#8 skAggregator.result() should honor
 resultsAsPoints joyent/node-artedi#9 skinner repo needs some TLC

---
 .gitignore                              |   6 +-
 CHANGES.md                              |   8 ++
 CONTRIBUTING.md                         |  19 +++
 Makefile                                |  47 ++++---
 README.md                               |  12 ++
 lib/skinner.js                          | 169 +++++++++++-------------
 package.json                            |   5 +-
 tests/tst.basic.js                      |  49 +++++--
 tests/tst.bucketize_linear.js           |  34 ++---
 tests/tst.bucketize_loglinear.js        |  14 +-
 tests/tst.bucketize_p2.js               |  32 +++--
 tests/tst.nonnumeric.js                 |  19 ++-
 jsl.node.conf => tools/jsl.node.conf    | 142 ++++++++++----------
 tools/jsstyle.conf                      |  14 ++
 tools/mk/Makefile.defs                  |  97 ++++++++++++++
 tools/mk/Makefile.node_modules.defs     |  68 ++++++++++
 tools/mk/Makefile.node_modules.targ     |  31 +++++
 Makefile.targ => tools/mk/Makefile.targ |  43 ++++--
 18 files changed, 569 insertions(+), 240 deletions(-)
 create mode 100644 CHANGES.md
 create mode 100644 CONTRIBUTING.md
 rename jsl.node.conf => tools/jsl.node.conf (69%)
 create mode 100644 tools/jsstyle.conf
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.node_modules.defs
 create mode 100644 tools/mk/Makefile.node_modules.targ
 rename Makefile.targ => tools/mk/Makefile.targ (88%)

diff --git a/.gitignore b/.gitignore
index 3c3629e..564b37d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,5 @@
-node_modules
+/node_modules
+build
+/make_stamps
+docs/*.json
+docs/*.html
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..eac9ceb
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,8 @@
+# Changelog
+
+## Not yet released
+None yet
+
+## 1.0.0
+* #8 skAggregator.result() should honor resultsAsPoints
+* #9 skinner repo needs some TLC
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..0208bcb
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,19 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes.  Anyone can submit changes.  To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean.  The "prepush" target runs the
+"check" target, which requires these separate tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
+
+As stated in the engineering guidelines, all commits to this repository must be
+associated with a GitHub issue.
diff --git a/Makefile b/Makefile
index dae7987..9b77fc0 100644
--- a/Makefile
+++ b/Makefile
@@ -1,31 +1,38 @@
 #
-# Copyright (c) 2013, Joyent, Inc. All rights reserved.
+# Copyright (c) 2017, Joyent, Inc.
 #
-# Makefile: top-level Makefile
+
 #
-# This Makefile contains only repo-specific logic and uses included makefiles
-# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are
-# used by other repos as well.
+# Makefile.defs defines variables used as part of the build process.
 #
+include ./tools/mk/Makefile.defs
+
+NPM =			npm
+JSSTYLE =		jsstyle
+JSLINT =		jsl
 
 #
-# Tools
+# Configuration used by Makefile.defs and Makefile.targ to generate
+# "check" and "docs" targets.
 #
-NPM		 = npm
+JSON_FILES =		package.json
+JS_FILES :=		$(shell find lib tests -name '*.js')
+JSL_FILES_NODE =	$(JS_FILES)
+JSSTYLE_FILES =		$(JS_FILES)
+
+JSL_CONF_NODE =		tools/jsl.node.conf
+JSSTYLE_FLAGS =		-f tools/jsstyle.conf
 
 #
-# Files
+# Makefile.node_modules.defs provides a common target for installing modules
+# with NPM from a dependency specification in a "package.json" file.  By
+# including this Makefile, we can depend on $(STAMP_NODE_MODULES) to drive "npm
+# install" correctly.
 #
-JS_FILES	:= $(shell find examples lib tests -name '*.js')
-JSON_FILES	 = package.json
-JSL_FILES_NODE   = $(JS_FILES)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSL_CONF_NODE	 = jsl.node.conf
+include ./tools/mk/Makefile.node_modules.defs
 
 .PHONY: all
-all:
-	$(NPM) install
-CLEAN_FILES += node_modules
+all: $(STAMP_NODE_MODULES)
 
 .PHONY: test
 test: all
@@ -36,4 +43,10 @@ test: all
 	@node tests/tst.nonnumeric.js
 	@echo all tests passed
 
-include ./Makefile.targ
+#
+# Target definitions.  This is where we include the target Makefiles for
+# the "defs" Makefiles we included above.
+#
+
+include ./tools/mk/Makefile.targ
+include ./tools/mk/Makefile.node_modules.targ
diff --git a/README.md b/README.md
index ff127e5..2e965a9 100644
--- a/README.md
+++ b/README.md
@@ -180,3 +180,15 @@ assertion failures.)  Patches welcome.
 You might also want to check out [krill](http://github.com/joyent/node-krill),
 which filters similar-looking data points.  Between krill and skinner, you can
 slice and dice data points in lots of different ways.
+
+## Test
+
+To test this library, run the 'test' target:
+
+```
+make test
+```
+
+## Contributing
+
+See the separate [contribution guidelines](CONTRIBUTING.md).
diff --git a/lib/skinner.js b/lib/skinner.js
index 0b0bf3e..12aa981 100644
--- a/lib/skinner.js
+++ b/lib/skinner.js
@@ -1,3 +1,7 @@
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
 /*
  * skinner.js: Sum the values of the given data points, breaking out the results
  * by one or more fields.
@@ -216,7 +220,7 @@
  * to the bucket range (e.g., mapping 3 to [4, 7]).
  */
 
-var mod_assert = require('assert');
+var mod_assert = require('assert-plus');
 var mod_jsprim = require('jsprim');
 var mod_stream = require('stream');
 var mod_util = require('util');
@@ -236,8 +240,7 @@ exports.ordinalToBounds = skOrdinalToBounds;
  * by the fields named in "decomps" using bucketizers "bucketizers".  See
  * Aggregator for details.
  */
-function skAggregate(datapts, decomps, bucketizers)
-{
+function skAggregate(datapts, decomps, bucketizers) {
 	var aggregator;
 
 	aggregator = new skAggregator({
@@ -283,27 +286,25 @@ function skCreateAggregator(args)
 
 function skAggregator(args)
 {
-	var streamoptions, i;
-
-	mod_assert.equal(typeof (args), 'object');
-	mod_assert.ok(args !== null);
+	mod_assert.optionalObject(args, 'args');
+	if (args) {
+		mod_assert.optionalObject(args.bucketizers, 'args.bucketizers');
+		mod_assert.optionalObject(args.streamOptions,
+		    'args.streamOptions');
+		mod_assert.optionalArrayOfString(args.decomps, 'args.decomps');
+	} else {
+		args = {};
+	}
 
-	if (args.decomps)
-		mod_assert.ok(Array.isArray(args.decomps));
+	var streamoptions;
 
-	if (args.bucketizers) {
-		mod_assert.ok(typeof (args.bucketizers) == 'object');
-		mod_assert.ok(args.bucketizers !== null);
-	}
+	streamoptions = {
+	    'highWaterMark': 0,
+	    'objectMode': true
+	};
+	streamoptions = mod_jsprim.mergeObjects(args.streamOptions, undefined,
+	    streamoptions);
 
-	streamoptions = { 'highWaterMark': 0 };
-	if (args.streamOptions) {
-		mod_assert.equal(typeof (args.streamOptions), 'object');
-		mod_assert.ok(args.streamOptions !== null);
-		for (i in args.streamOptions)
-			streamoptions[i] = args.streamOptions[i];
-	}
-	streamoptions['objectMode'] = true;
 	mod_stream.Transform.call(this, streamoptions);
 
 	this.sa_decomps = args.decomps ? args.decomps.slice(0) : [];
@@ -321,7 +322,7 @@ function skAggregator(args)
 
 mod_util.inherits(skAggregator, mod_stream.Transform);
 
-skAggregator.prototype.stats = function ()
+skAggregator.prototype.stats = function stats()
 {
 	return ({
 	    'ninputs': this.sa_nrecords,
@@ -330,20 +331,20 @@ skAggregator.prototype.stats = function ()
 	});
 };
 
-skAggregator.prototype._transform = function (datapt, _, callback)
+skAggregator.prototype._transform = function _transform(datapt, _, callback)
 {
 	this.aggregate(datapt);
 	setImmediate(callback);
 };
 
-skAggregator.prototype.aggregate = function (datapt)
+skAggregator.prototype.aggregate = function aggregate(datapt)
 {
+	mod_assert.object(datapt, 'datapt');
+	mod_assert.number(datapt.value, 'datapt.value');
+	mod_assert.object(datapt.fields, 'datapt.fields');
 	var i, prev, o, field, fieldvalue, bucketizer;
 
 	this.sa_nrecords++;
-	mod_assert.equal(typeof (datapt), 'object');
-	mod_assert.ok(datapt !== null);
-	mod_assert.equal(typeof (datapt['value']), 'number');
 
 	/*
 	 * Recall that we store the current accumulated value as a tree, where
@@ -365,8 +366,6 @@ skAggregator.prototype.aggregate = function (datapt)
 	prev = null;
 	o = this.sa_value;
 	for (i = 0; i < this.sa_decomps.length; i++) {
-		mod_assert.equal(typeof (o), 'object');
-		mod_assert.ok(o !== null);
 		field = this.sa_decomps[i];
 		fieldvalue = mod_jsprim.pluck(datapt['fields'], field);
 		prev = o;
@@ -415,27 +414,18 @@ skAggregator.prototype.aggregate = function (datapt)
 		 * If there was at least one decomposition, then update the
 		 * value by updating the corresponding key of its parent.
 		 */
-		mod_assert.equal(typeof (o), 'number');
-		mod_assert.ok(prev[fieldvalue] === o);
 		prev[fieldvalue] += datapt['value'];
 	} else {
 		/* Otherwise, sa_value is a number, so just increment it. */
-		mod_assert.ok(this.sa_value === o);
-		mod_assert.equal(typeof (this.sa_value), 'number');
 		this.sa_value += datapt['value'];
 	}
 };
 
-skAggregator.prototype._flush = function (callback)
+skAggregator.prototype.resultsAsPoints = function resultsAsPoints()
 {
-	if (!this.sa_aspoints) {
-		this.push(this.result());
-		callback();
-		return;
-	}
-
-	var self, bucketizer;
+	var self, bucketizer, rv;
 
+	rv = [];
 	self = this;
 	mod_jsprim.flattenIter(this.sa_value, this.sa_decomps.length,
 	    function (row) {
@@ -469,14 +459,12 @@ skAggregator.prototype._flush = function (callback)
 		mod_assert.equal(i, row.length - 1);
 		mod_assert.equal(typeof (row[i]), 'number');
 		point.value = row[i];
-		self.push(point);
+		rv.push(point);
 	    });
-
-	callback();
+	return (rv);
 };
 
-skAggregator.prototype.result = function ()
-{
+skAggregator.prototype.resultsAsSum = function resultsAsSum() {
 	var self, rv;
 
 	self = this;
@@ -498,6 +486,22 @@ skAggregator.prototype.result = function ()
 		}
 	});
 	return (rv);
+
+};
+
+skAggregator.prototype._flush = function _flush(callback) {
+	this.push(this.result());
+	callback();
+};
+
+skAggregator.prototype.result = function result() {
+	var ret;
+	if (!this.sa_aspoints) {
+		ret = this.resultsAsSum();
+	} else {
+		ret = this.resultsAsPoints();
+	}
+	return (ret);
 };
 
 
@@ -518,19 +522,17 @@ skAggregator.prototype.result = function ()
  * be clamped at either end the way DTrace distributions always are.  If useful,
  * we could add support for that.)
  */
-function skBucketizer()
-{
-	mod_assert.equal(typeof (this._bucketIndexToMin), 'function',
+function skBucketizer() {
+	mod_assert.func(this._bucketIndexToMin,
 	    'children of "skBucketizer" must implement _bucketIndexToMin');
-	mod_assert.equal(typeof (this._valueToBucketIndex), 'function',
+	mod_assert.func(this._valueToBucketIndex,
 	    'children of "skBucketizer" must implement _valueToBucketIndex');
 }
 
 /*
  * Returns the minimum value contained in bucket "i".
  */
-skBucketizer.prototype.bucketMin = function (i)
-{
+skBucketizer.prototype.bucketMin = function bucketMin(i) {
 	mod_assert.ok(i >= 0);
 	return (this._bucketIndexToMin(i));
 };
@@ -545,8 +547,7 @@ skBucketizer.prototype.bucketMin = function (i)
  * minus 1.  Otherwise, the bucketMax is some small amount less than the next
  * bucket's minimum.
  */
-skBucketizer.prototype.bucketMax = function (i)
-{
+skBucketizer.prototype.bucketMax = function bucketMax(i) {
 	var min, nextmin;
 
 	mod_assert.ok(i >= 0);
@@ -567,14 +568,12 @@ skBucketizer.prototype.bucketMax = function (i)
  * points "card" to add to the corresponding bucket, update the distribution in
  * place.
  */
-skBucketizer.prototype.bucketize = function (rv, value, card)
-{
-	var i, ent, bmin, bmax, bidx;
+skBucketizer.prototype.bucketize = function bucketize(rv, value, card) {
+	mod_assert.array(rv, 'rv');
+	mod_assert.number(value, 'value');
+	mod_assert.number(card, 'card');
 
-	mod_assert.ok(Array.isArray(rv));
-	mod_assert.equal(typeof (value), 'number');
-	mod_assert.equal(typeof (card), 'number');
-	mod_assert.ok(!isNaN(value) && !isNaN(card));
+	var i, ent, bmin, bmax, bidx;
 
 	for (i = 0; i < rv.length; i++) {
 		bmin = this.bucketMin(rv[i][0]);
@@ -602,21 +601,20 @@ skBucketizer.prototype.bucketize = function (rv, value, card)
 /*
  * Linear bucketizers group numbers into buckets of size "step".
  */
-function skLinearBucketizer(step)
-{
+function skLinearBucketizer(step) {
 	this.lb_step = step;
 	skBucketizer.call(this);
 }
 
 mod_util.inherits(skLinearBucketizer, skBucketizer);
 
-skLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skLinearBucketizer.prototype._bucketIndexToMin =
+    function _lBucketIndexToMin(bidx) {
 	return (this.lb_step * bidx);
 };
 
-skLinearBucketizer.prototype._valueToBucketIndex = function (value)
-{
+skLinearBucketizer.prototype._valueToBucketIndex =
+    function _lValueToBucketIndex(value) {
 	return (Math.floor(value / this.lb_step));
 };
 
@@ -629,8 +627,7 @@ skLinearBucketizer.prototype._valueToBucketIndex = function (value)
  * distribution's size scales like an exponential one, with the precision of
  * the linear one within each order of magnitude.
  */
-function skLogLinearBucketizer(base, nbuckets)
-{
+function skLogLinearBucketizer(base, nbuckets) {
 	var maxorder;
 
 	mod_assert.ok(nbuckets % base === 0,
@@ -648,8 +645,8 @@ function skLogLinearBucketizer(base, nbuckets)
 
 mod_util.inherits(skLogLinearBucketizer, skBucketizer);
 
-skLogLinearBucketizer.prototype._valueToBucketIndex = function (value)
-{
+skLogLinearBucketizer.prototype._valueToBucketIndex =
+    function _llValueToBucketIndex(value) {
 	var totbuckets;		/* bucket index reached so far */
 	var maxorder;		/* maximum value in the current magnitude */
 	var prevorder;		/* maximum value in previous magnitude */
@@ -681,8 +678,8 @@ skLogLinearBucketizer.prototype._valueToBucketIndex = function (value)
 	return (totbuckets);
 };
 
-skLogLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skLogLinearBucketizer.prototype._bucketIndexToMin =
+    function _llBucketIndexToMin(bidx) {
 	var i;			/* bucket index reached so far, always the */
 				/* start of an order of magnitude */
 	var minorder;		/* minimum value in magnitude "i" */
@@ -723,20 +720,18 @@ skLogLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
  * Power-of-two bucketizers group numers into the nearest power-of-two order of
  * magnitude.
  */
-function skP2Bucketizer()
-{
+function skP2Bucketizer() {
 	skBucketizer.call(this);
 }
 
 mod_util.inherits(skP2Bucketizer, skBucketizer);
 
-skP2Bucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skP2Bucketizer.prototype._bucketIndexToMin = function _bucketIndexToMin(bidx) {
 	return (bidx === 0 ? 0 : Math.pow(2, bidx - 1));
 };
 
-skP2Bucketizer.prototype._valueToBucketIndex = function (value)
-{
+skP2Bucketizer.prototype._valueToBucketIndex =
+    function _p2ValueToBucketIndex(value) {
 	var thresh, count;
 
 	if (value === 0)
@@ -756,18 +751,15 @@ skP2Bucketizer.prototype._valueToBucketIndex = function (value)
  * Constructors for bucketizers.
  */
 
-function skMakeLinearBucketizer(step)
-{
+function skMakeLinearBucketizer(step) {
 	return (new skLinearBucketizer(step));
 }
 
-function skMakeLogLinearBucketizer(base, nbuckets)
-{
+function skMakeLogLinearBucketizer(base, nbuckets) {
 	return (new skLogLinearBucketizer(base, nbuckets));
 }
 
-function skMakeP2Bucketizer()
-{
+function skMakeP2Bucketizer() {
 	return (new skP2Bucketizer());
 }
 
@@ -777,12 +769,11 @@ function skMakeP2Bucketizer()
  * that includes the minimum and maximum for each range instead of the ordinal
  * number of each range.
  */
-function skOrdinalToBounds(bucketizer, dist)
-{
+function skOrdinalToBounds(bucketizer, dist) {
 	return (dist.map(function (row, i) {
-		mod_assert.ok(Array.isArray(row));
+		mod_assert.array(row, 'row');
 		mod_assert.equal(row.length, 2);
-		mod_assert.equal(typeof (row[0]), 'number');
+		mod_assert.number(row[0], 'row[0]');
 		var bmin = bucketizer.bucketMin(row[0]);
 		var bmax = bucketizer.bucketMax(row[0]);
 		return ([ [ bmin, bmax ], row[1] ]);
diff --git a/package.json b/package.json
index 3dd224c..1c475fd 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "skinner",
 	"description": "aggregate multi-dimensional data points",
-	"version": "0.4.0",
+	"version": "1.0.0",
 	"license": "MIT",
 	"author": "Dave Pacheco <dap@joyent.com>",
 	"main": "lib/skinner.js",
@@ -10,7 +10,8 @@
 		"url": "https://github.com/joyent/node-skinner.git"
 	},
 	"dependencies": {
-		"jsprim": "0.6.0",
+		"assert-plus": "^1.0.0",
+		"jsprim": "1.4.1",
 		"verror": "1.4.0"
 	}
 }
diff --git a/tests/tst.basic.js b/tests/tst.basic.js
index 175f6eb..32cb285 100644
--- a/tests/tst.basic.js
+++ b/tests/tst.basic.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assertplus = require('assert-plus');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 var datapoints, bucketizers;
@@ -23,16 +27,16 @@ datapoints = [
 ];
 
 /* Check the sum of all populations. */
-mod_assert.deepEqual(mod_skinner.aggregate(datapoints), [ 2137000 ]);
+mod_assertplus.deepEqual(mod_skinner.aggregate(datapoints), [ 2137000 ]);
 
 /* Check the sums of populations by state. */
-mod_assert.deepEqual(mod_skinner.aggregate(datapoints, [ 'state' ]),
+mod_assertplus.deepEqual(mod_skinner.aggregate(datapoints, [ 'state' ]),
     [ [ 'MA', 972000 ],
       [ 'CA', 505000 ],
       [ 'OR', 660000 ] ]);
 
 /* Check the sums of populations, broken out by city name (NOT state) */
-mod_assert.deepEqual(mod_skinner.aggregate(datapoints, [ 'city' ]),
+mod_assertplus.deepEqual(mod_skinner.aggregate(datapoints, [ 'city' ]),
     [ [ 'Springfield', 213000 ],
       [ 'Boston',      636000 ],
       [ 'Worcestor',   183000 ],
@@ -43,7 +47,7 @@ mod_assert.deepEqual(mod_skinner.aggregate(datapoints, [ 'city' ]),
  * Check the sums of populations, broken out by state *and* city
  * (same as the original dataset, in this case).
  */
-mod_assert.deepEqual(mod_skinner.aggregate(datapoints, [ 'state', 'city' ]),
+mod_assertplus.deepEqual(mod_skinner.aggregate(datapoints, [ 'state', 'city' ]),
     [ [ 'MA', 'Springfield', 153000 ],
       [ 'MA', 'Boston',      636000 ],
       [ 'MA', 'Worcestor',   183000 ],
@@ -63,7 +67,7 @@ datapoints = [
     { 'fields': { 'data': { 'city': 'Springfield', 'state': 'OR' } }, 'value':  60000 },
     { 'fields': { 'data': { 'city': 'Portland',    'state': 'OR' } }, 'value': 600000 }
 ];
-mod_assert.deepEqual(mod_skinner.aggregate(datapoints, [ 'data.state' ]),
+mod_assertplus.deepEqual(mod_skinner.aggregate(datapoints, [ 'data.state' ]),
     [ [ 'MA', 972000 ],
       [ 'CA', 505000 ],
       [ 'OR', 660000 ] ]);
@@ -90,7 +94,7 @@ bucketizers = {
  * Summarize overall CPU utilization in a single histogram.
  */
 var expand = mod_skinner.ordinalToBounds.bind(null, bucketizers.util);
-mod_assert.deepEqual(
+mod_assertplus.deepEqual(
     expand(mod_skinner.aggregate(datapoints, [ 'util' ], bucketizers)),
     [ [ [  0,  9 ], 2 ],
       [ [ 10, 19 ], 1 ],
@@ -102,7 +106,7 @@ mod_assert.deepEqual(
 /*
  * Check CPU utilization histograms for each host.
  */
-mod_assert.deepEqual(
+mod_assertplus.deepEqual(
     mod_skinner.aggregate(datapoints, [ 'host', 'util' ], bucketizers),
     [ [ 'host1', 1, 1 ],
       [ 'host1', 8, 1 ],
@@ -116,7 +120,7 @@ mod_assert.deepEqual(
 /*
  * Check CPU utilization histograms for each CPU name.
  */
-mod_assert.deepEqual(
+mod_assertplus.deepEqual(
     mod_skinner.aggregate(datapoints, [ 'cpu', 'util' ], bucketizers),
     [ [ 'cpu0', 3, 1 ],
       [ 'cpu0', 8, 2 ],
@@ -125,5 +129,32 @@ mod_assert.deepEqual(
       [ 'cpu1', 1, 1 ],
       [ 'cpu1', 5, 1 ] ]);
 
+/*
+ * Test streaming aggregators.
+ */
+/*
+ * Streaming aggregator with results as a sum.
+ */
+var point = {
+	fields: {
+		'test': 1
+	},
+	value: 1
+};
+var stream = mod_skinner.createAggregator();
+stream.write(point);
+stream.end();
+mod_assertplus.deepEqual(stream.result(), [1]);
+
+/*
+ * Streaming aggregator with results as datapoints.
+ */
+stream = mod_skinner.createAggregator({
+	resultsAsPoints: true
+});
+stream.write(point);
+stream.end();
+mod_assertplus.deepEqual(stream.result(), [{ fields: {}, value: 1 }]);
+
 console.log('test %s okay', mod_path.basename(process.argv[1]));
 /* END JSSTYLED */
diff --git a/tests/tst.bucketize_linear.js b/tests/tst.bucketize_linear.js
index b44c0f2..4abbb3b 100644
--- a/tests/tst.bucketize_linear.js
+++ b/tests/tst.bucketize_linear.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assertplus = require('assert-plus');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 
@@ -12,19 +16,19 @@ dist = [];
 
 /* Test some basic values in the first few buckets. */
 func(dist, 3, 1);
-mod_assert.deepEqual(dist, [ [ 0, 1 ] ]);
+mod_assertplus.deepEqual(dist, [ [ 0, 1 ] ]);
 
 func(dist, 0, 2);
-mod_assert.deepEqual(dist, [ [ 0, 3 ] ]);
+mod_assertplus.deepEqual(dist, [ [ 0, 3 ] ]);
 
 func(dist, 9, 2);
-mod_assert.deepEqual(dist, [ [ 0, 5 ] ]);
+mod_assertplus.deepEqual(dist, [ [ 0, 5 ] ]);
 
 func(dist, 10, 2);
-mod_assert.deepEqual(dist, [ [ 0, 5 ], [ 1, 2 ] ]);
+mod_assertplus.deepEqual(dist, [ [ 0, 5 ], [ 1, 2 ] ]);
 
 func(dist, 14, 7);
-mod_assert.deepEqual(dist, [ [ 0, 5 ], [ 1, 9 ] ]);
+mod_assertplus.deepEqual(dist, [ [ 0, 5 ], [ 1, 9 ] ]);
 
 /*
  * Test values from 9 to 99.  There should be 10 buckets, in order, with 10
@@ -33,10 +37,10 @@ mod_assert.deepEqual(dist, [ [ 0, 5 ], [ 1, 9 ] ]);
 dist = [];
 for (i = 0; i < 100; i++)
 	func(dist, i, 1);
-mod_assert.equal(dist.length, 10);
+mod_assertplus.equal(dist.length, 10);
 dist.forEach(function (d, j) {
-	mod_assert.equal(j, d[0]);
-	mod_assert.equal(10, d[1]);
+	mod_assertplus.equal(j, d[0]);
+	mod_assertplus.equal(10, d[1]);
 });
 
 /*
@@ -45,7 +49,7 @@ dist.forEach(function (d, j) {
 dist2 = [];
 for (i = 0; i < 100; i++)
 	func(dist2, i, 1);
-mod_assert.deepEqual(dist, dist2);
+mod_assertplus.deepEqual(dist, dist2);
 
 /* Now test filling in some sparse values. */
 dist = [];
@@ -53,20 +57,20 @@ func(dist, 853, 12);
 func(dist, 396, 7);
 func(dist, 858, 2);
 func(dist, 10345, 17);
-mod_assert.deepEqual(dist, [
+mod_assertplus.deepEqual(dist, [
     [ 39,  7 ],
     [ 85, 14 ],
     [ 1034, 17 ]
 ]);
 
 /* Test bucket expansion. */
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 390, 399 ],  7 ],
     [ [ 850, 859 ], 14 ],
     [ [ 10340, 10349 ], 17 ]
 ]);
 
-mod_assert.deepEqual(expand(dist2), [
+mod_assertplus.deepEqual(expand(dist2), [
     [ [  0,  9 ], 10 ],
     [ [ 10, 19 ], 10 ],
     [ [ 20, 29 ], 10 ],
@@ -88,8 +92,8 @@ dist = [];
 func(dist, 37, 3);
 func(dist, 88, 2);
 func(dist, 35, 1);
-mod_assert.deepEqual(dist, [ [ 5, 4 ], [ 12, 2 ] ]);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(dist, [ [ 5, 4 ], [ 12, 2 ] ]);
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 35, 41 ], 4 ],
     [ [ 84, 90 ], 2 ]
 ]);
diff --git a/tests/tst.bucketize_loglinear.js b/tests/tst.bucketize_loglinear.js
index 68c9f03..c08e63c 100644
--- a/tests/tst.bucketize_loglinear.js
+++ b/tests/tst.bucketize_loglinear.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assertplus = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 
@@ -40,7 +44,7 @@ var expectedMins = [
 /* END JSSTYLED */
 
 for (i = 0; i < expectedMins.length; i++) {
-	mod_assert.equal(expectedMins[i], bucketizer.bucketMin(i),
+	mod_assertplus.equal(expectedMins[i], bucketizer.bucketMin(i),
 	    'bucket ' + i + ' minimum value');
 }
 
@@ -68,7 +72,7 @@ var expectedDist = [
 dist = [];
 for (i = 0; i < 1500; i++)
 	func(dist, i, 1);
-mod_assert.deepEqual(dist, expectedDist);
+mod_assertplus.deepEqual(dist, expectedDist);
 
 /*
  * Now do the same thing in reverse, to test creating buckets before others.
@@ -76,7 +80,7 @@ mod_assert.deepEqual(dist, expectedDist);
 dist = [];
 for (i = 1499; i >= 0; i--)
 	func(dist, i, 1);
-mod_assert.deepEqual(dist, expectedDist);
+mod_assertplus.deepEqual(dist, expectedDist);
 
 /*
  * Now try a few random ones.
@@ -86,7 +90,7 @@ func(dist, 927, 1);
 func(dist, 253, 1);
 func(dist, 1437, 1);
 func(dist, 1, 1);
-mod_assert.deepEqual(dist, [
+mod_assertplus.deepEqual(dist, [
     [  1, 1 ],
     [ 31, 1 ],
     [ 44, 1 ],
diff --git a/tests/tst.bucketize_p2.js b/tests/tst.bucketize_p2.js
index 725ceb3..79398c3 100644
--- a/tests/tst.bucketize_p2.js
+++ b/tests/tst.bucketize_p2.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assertplus = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 
@@ -12,44 +16,44 @@ var i;
  * Test obvious special cases near the bottom of the range.
  */
 func(dist, 1, 3);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 1, 1 ], 3 ]
 ]);
 
 func(dist, 0, 5);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 5 ],
     [ [ 1, 1 ], 3 ]
 ]);
 
 func(dist, 1, 7);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 5 ],
     [ [ 1, 1 ], 10 ]
 ]);
 
 func(dist, 0, 2);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 7 ],
     [ [ 1, 1 ], 10 ]
 ]);
 
 func(dist, 2, 9);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 7 ],
     [ [ 1, 1 ], 10 ],
     [ [ 2, 3 ], 9 ]
 ]);
 
 func(dist, 3, 3);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 7 ],
     [ [ 1, 1 ], 10 ],
     [ [ 2, 3 ], 12 ]
 ]);
 
 func(dist, 4, 1);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0, 0 ], 7 ],
     [ [ 1, 1 ], 10 ],
     [ [ 2, 3 ], 12 ],
@@ -61,18 +65,18 @@ mod_assert.deepEqual(expand(dist), [
  */
 dist = [];
 func(dist, 9, 1);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 8, 15 ], 1 ]
 ]);
 
 func(dist, 3, 7);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 2, 3 ], 7 ],
     [ [ 8, 15 ], 1 ]
 ]);
 
 func(dist, 4, 2);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 2, 3 ], 7 ],
     [ [ 4, 7 ], 2 ],
     [ [ 8, 15 ], 1 ]
@@ -82,7 +86,7 @@ mod_assert.deepEqual(expand(dist), [
 dist = [];
 for (i = 0; i < 32; i++)
 	func(dist, i, 1);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0,  0],  1 ],
     [ [ 1,  1],  1 ],
     [ [ 2,  3],  2 ],
@@ -94,7 +98,7 @@ mod_assert.deepEqual(expand(dist), [
 /* Test *adding* someting to each of those. */
 for (i = 0; i < 32; i++)
 	func(dist, i, 2);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0,  0],  3 ],
     [ [ 1,  1],  3 ],
     [ [ 2,  3],  6 ],
@@ -107,7 +111,7 @@ mod_assert.deepEqual(expand(dist), [
 dist = [];
 for (i = 31; i >= 0; i--)
 	func(dist, i, 3);
-mod_assert.deepEqual(expand(dist), [
+mod_assertplus.deepEqual(expand(dist), [
     [ [ 0,  0],  3 ],
     [ [ 1,  1],  3 ],
     [ [ 2,  3],  6 ],
diff --git a/tests/tst.nonnumeric.js b/tests/tst.nonnumeric.js
index 1ad7dc5..b0d022b 100644
--- a/tests/tst.nonnumeric.js
+++ b/tests/tst.nonnumeric.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assertplus = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 
@@ -18,26 +22,27 @@ stream = mod_skinner.createAggregator({
     'bucketizers': bucketizers
 });
 stream.on('invalid_object', function (obj, err, num) {
-	mod_assert.deepEqual(obj, {
+	mod_assertplus.deepEqual(obj, {
 	    'fields': {
 		'city': 'Worcestor',
 		'pop': 'bogus!'
 	    },
 	    'value': 1
 	});
-	mod_assert.equal(num, 2);
-	mod_assert.equal(err.message, 'value for field "pop" is not a number');
+	mod_assertplus.equal(num, 2);
+	mod_assertplus.equal(err.message,
+	    'value for field "pop" is not a number');
 	gotwarning = true;
 });
 datapoints.forEach(function (d) { stream.write(d); });
 stream.end();
 stream.on('data', function (results) {
-	mod_assert.deepEqual(results, [ [ 1, 1 ], [ 6, 1 ] ]);
+	mod_assertplus.deepEqual(results, [ [ 1, 1 ], [ 6, 1 ] ]);
 	gotdata = true;
 });
 
 stream.on('end', function () {
 	console.log('test %s okay', mod_path.basename(process.argv[1]));
-	mod_assert.ok(gotdata);
-	mod_assert.ok(gotwarning);
+	mod_assertplus.ok(gotdata);
+	mod_assertplus.ok(gotwarning);
 });
diff --git a/jsl.node.conf b/tools/jsl.node.conf
similarity index 69%
rename from jsl.node.conf
rename to tools/jsl.node.conf
index ea681b5..c44e8ee 100644
--- a/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -1,6 +1,5 @@
 #
-# Configuration File for JavaScript Lint 0.3.0
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
+# Configuration File for JavaScript Lint 
 #
 # This configuration file can be used to lint a collection of scripts, or to enable
 # or disable warnings for scripts that are linted via the command line.
@@ -10,57 +9,74 @@
 # Enable or disable warnings based on requirements.
 # Use "+WarningName" to display or "-WarningName" to suppress.
 #
-+no_return_value              # function {0} does not always return a value
-+duplicate_formal             # duplicate formal argument {0}
-+equal_as_assign              # test for equality (==) mistyped as assignment (=)?{0}
-+var_hides_arg                # variable {0} hides argument
-+redeclared_var               # redeclaration of {0} {1}
-+anon_no_return_value         # anonymous function does not always return a value
-+missing_semicolon            # missing semicolon
-+meaningless_block            # meaningless block; curly braces have no impact
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
 +comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+unreachable_code             # unreachable code
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
 +comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
 -inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
--useless_quotes			# quotation marks are unnecessary
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+use_of_label                 # use of label
--block_without_braces         # block statement without curly braces
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
 +leading_decimal_point        # leading decimal point may indicate a number or an object member
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
--octal_number                 # leading zeros make an octal number
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
 +nested_comment               # nested comment
--misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+empty_statement              # empty statement or extra semicolon
--missing_option_explicit      # the "option explicit" control comment is missing
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
 +partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+dup_option_explicit          # duplicate "option explicit" control comment
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
+-unreferenced_argument        # argument declared but never referenced: {name}
+-unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
 +useless_assign               # useless assignment
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent)
--missing_default_case         # missing default case in switch statement
-+duplicate_case_in_switch     # duplicate case in switch statements
-+default_not_at_end           # the default case is not at the end of the switch statement
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
 +useless_comparison           # useless comparison; comparing identical expressions
+-useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+assign_to_function_call      # assignment to a function call
-+parseint_missing_radix       # parseInt missing radix parameter
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function declared but not referenced
+
 
 ### Output format
 # Customize the format of the error message.
 #    __FILE__ indicates current file path
 #    __FILENAME__ indicates current file name
 #    __LINE__ indicates current line
-#    __ERROR__ indicates error message
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
 #
 # Visual Studio syntax (default):
 +output-format __FILE__(__LINE__): __ERROR__
@@ -75,33 +91,13 @@
 +context
 
 
-### Semicolons
-# By default, assignments of an anonymous function to a variable or
-# property (such as a function prototype) must be followed by a semicolon.
-#
-#+lambda_assign_requires_semicolon # deprecated setting
-
-
 ### Control Comments
 # Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
 # the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
 # enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
 # although legacy control comments are enabled by default for backward compatibility.
 #
-+legacy_control_comments
-
-
-### JScript Function Extensions
-# JScript allows member functions to be defined like this:
-#     function MyObj() { /*constructor*/ }
-#     function MyObj.prototype.go() { /*member function*/ }
-#
-# It also allows events to be attached like this:
-#     function window::onload() { /*init page*/ }
-#
-# This is a Microsoft-only JavaScript extension. Enable this setting to allow them.
-#
-#-jscript_function_extensions # deprecated setting
+-legacy_control_comments
 
 
 ### Defining identifiers
@@ -113,24 +109,26 @@
 # (Use this in conjunction with the "undeclared identifier" warning.)
 #
 # Common uses for webpages might be:
-#+define window
-#+define document
++define __dirname
++define clearInterval
++define clearTimeout
++define console
++define exports
 +define global
++define module
 +define process
 +define require
-+define exports
++define setInterval
 +define setImmediate
-+define clearImmediate
 +define setTimeout
-+define clearTimeout
-+define setInterval
-+define clearInterval
-+define JSON
-+define console
-+define module
-+define __dirname
-+define __filename
 +define Buffer
++define JSON
++define Math
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
 
 ### Files
 # Specify which files to lint
@@ -138,4 +136,4 @@
 # To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
 # or "+process Folder\Path\*.htm".
 #
-#+process jsl-test.js
+
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..2d13d5d
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,14 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+unparenthesized-return=1
+indent=tab
+line-length=80
+literal-string-quote=single
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..8c6be90
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,97 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/Makefile.targ b/tools/mk/Makefile.targ
similarity index 88%
rename from Makefile.targ
rename to tools/mk/Makefile.targ
index b6e642b..54edf0e 100644
--- a/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,6 +1,13 @@
-# -*- mode: makefile -*-
 #
-# Copyright (c) 2012, Joyent, Inc. All rights reserved.
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
 #
 # Makefile.targ: common targets.
 #
@@ -81,9 +88,9 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
@@ -100,7 +107,7 @@ JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -201,7 +208,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -256,7 +263,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -286,9 +293,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -307,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

