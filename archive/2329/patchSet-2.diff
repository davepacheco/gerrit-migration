commit 55677a167ccf1d93a2d020340f7c62a91f81afc0 (refs/changes/29/2329/2)
Author: Kody A Kantor <kody.kantor@gmail.com>
Date:   2017-08-03T19:54:38+00:00 (2 years, 2 months ago)
    
    joyent/node-artedi#8 skAggregator.result() should honor resultsAsPoints
    joyent/node-artedi#9 skinner repo needs some TLC

diff --git a/.gitignore b/.gitignore
index 3c3629e..564b37d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,5 @@
-node_modules
+/node_modules
+build
+/make_stamps
+docs/*.json
+docs/*.html
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..8ec36e0
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,9 @@
+[submodule "deps/javascriptlint"]
+	path = deps/javascriptlint
+	url = https://github.com/davepacheco/javascriptlint
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = https://github.com/davepacheco/jsstyle
+[submodule "deps/restdown"]
+	path = deps/restdown
+	url = https://github.com/trentm/restdown
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..5f0112a
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,8 @@
+# Changelog
+
+## Not yet released
+None yet
+
+## 0.5.0
+* #8 skAggregator.result() should honor resultsAsPoints
+* #9 skinner repo needs some TLC
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..3914386
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,16 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes.  Anyone can submit changes.  To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/rfd/blob/master/rfd/0104/README.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean.  The "prepush" target runs the
+"check" target, followed by the "test" target.
+
+As stated in the engineering guidelines, all commits to this repository must be
+associated with a GitHub issue.
diff --git a/Makefile b/Makefile
index dae7987..6678ca8 100644
--- a/Makefile
+++ b/Makefile
@@ -1,39 +1,71 @@
 #
-# Copyright (c) 2013, Joyent, Inc. All rights reserved.
+# Copyright (c) 2017, Joyent, Inc.
 #
-# Makefile: top-level Makefile
+
 #
-# This Makefile contains only repo-specific logic and uses included makefiles
-# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are
-# used by other repos as well.
+# Makefile.defs defines variables used as part of the build process.
 #
+include ./tools/mk/Makefile.defs
 
 #
-# Tools
+# Configuration used by Makefile.defs and Makefile.targ to generate
+# "check" and "docs" targets.
+#
+JSON_FILES =		package.json
+JS_FILES :=		$(shell find lib test -name '*.js') tools/bashstyle
+JSL_FILES_NODE =	$(JS_FILES)
+JSSTYLE_FILES =		$(JS_FILES)
+
+JSL_CONF_NODE =		tools/jsl.node.conf
+JSSTYLE_FLAGS =		-f tools/jsstyle.conf
+
+
+# Historically, Node packages that make use of binary add-ons must ship their
+# own Node built with the same compiler, compiler options, and Node version that
+# the add-on was built with.  On SmartOS systems, we use prebuilt Node images
+# via Makefile.node_prebuilt.defs.  On other systems, we build our own Node
+# binary as part of the build process.
 #
-NPM		 = npm
+NODE_PREBUILT_VERSION =	v4.8.4
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_TAG = zone
+	include ./tools/mk/Makefile.node_prebuilt.defs
+else
+	include ./tools/mk/Makefile.node.defs
+endif
 
 #
-# Files
+# Makefile.node_modules.defs provides a common target for installing modules
+# with NPM from a dependency specification in a "package.json" file.  By
+# including this Makefile, we can depend on $(STAMP_NODE_MODULES) to drive "npm
+# install" correctly.
 #
-JS_FILES	:= $(shell find examples lib tests -name '*.js')
-JSON_FILES	 = package.json
-JSL_FILES_NODE   = $(JS_FILES)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSL_CONF_NODE	 = jsl.node.conf
+include ./tools/mk/Makefile.node_modules.defs
 
 .PHONY: all
-all:
-	$(NPM) install
-CLEAN_FILES += node_modules
+all: $(STAMP_NODE_MODULES)
 
 .PHONY: test
 test: all
-	@node tests/tst.basic.js
-	@node tests/tst.bucketize_linear.js
-	@node tests/tst.bucketize_loglinear.js
-	@node tests/tst.bucketize_p2.js
-	@node tests/tst.nonnumeric.js
+	@node test/tst.basic.js
+	@node test/tst.bucketize_linear.js
+	@node test/tst.bucketize_loglinear.js
+	@node test/tst.bucketize_p2.js
+	@node test/tst.nonnumeric.js
 	@echo all tests passed
 
-include ./Makefile.targ
+#
+# Target definitions.  This is where we include the target Makefiles for
+# the "defs" Makefiles we included above.
+#
+
+include ./tools/mk/Makefile.deps
+
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+else
+	include ./tools/mk/Makefile.node.targ
+endif
+
+include ./tools/mk/Makefile.node_modules.targ
+include ./tools/mk/Makefile.targ
diff --git a/README.md b/README.md
index ff127e5..2e965a9 100644
--- a/README.md
+++ b/README.md
@@ -180,3 +180,15 @@ assertion failures.)  Patches welcome.
 You might also want to check out [krill](http://github.com/joyent/node-krill),
 which filters similar-looking data points.  Between krill and skinner, you can
 slice and dice data points in lots of different ways.
+
+## Test
+
+To test this library, run the 'test' target:
+
+```
+make test
+```
+
+## Contributing
+
+See the separate [contribution guidelines](CONTRIBUTING.md).
diff --git a/deps/javascriptlint b/deps/javascriptlint
new file mode 160000
index 0000000..ad52812
--- /dev/null
+++ b/deps/javascriptlint
@@ -0,0 +1 @@
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..b9f5092
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit b9f50929ee2df140fd2d111f053b20593e068cdc
diff --git a/deps/restdown b/deps/restdown
new file mode 160000
index 0000000..1b833da
--- /dev/null
+++ b/deps/restdown
@@ -0,0 +1 @@
+Subproject commit 1b833da2199b08c3bc92ef16cf52b0b0d6e4c189
diff --git a/lib/skinner.js b/lib/skinner.js
index 0b0bf3e..c86417d 100644
--- a/lib/skinner.js
+++ b/lib/skinner.js
@@ -1,3 +1,7 @@
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
 /*
  * skinner.js: Sum the values of the given data points, breaking out the results
  * by one or more fields.
@@ -216,7 +220,7 @@
  * to the bucket range (e.g., mapping 3 to [4, 7]).
  */
 
-var mod_assert = require('assert');
+var mod_assert = require('assert-plus');
 var mod_jsprim = require('jsprim');
 var mod_stream = require('stream');
 var mod_util = require('util');
@@ -236,8 +240,7 @@ exports.ordinalToBounds = skOrdinalToBounds;
  * by the fields named in "decomps" using bucketizers "bucketizers".  See
  * Aggregator for details.
  */
-function skAggregate(datapts, decomps, bucketizers)
-{
+function skAggregate(datapts, decomps, bucketizers) {
 	var aggregator;
 
 	aggregator = new skAggregator({
@@ -276,34 +279,30 @@ function skAggregate(datapts, decomps, bucketizers)
  *
  *    streamOptions	Options to pass through to Node's Stream constructor.
  */
-function skCreateAggregator(args)
-{
+function skCreateAggregator(args) {
 	return (new skAggregator(args));
 }
 
-function skAggregator(args)
-{
-	var streamoptions, i;
-
-	mod_assert.equal(typeof (args), 'object');
-	mod_assert.ok(args !== null);
+function skAggregator(args) {
+	mod_assert.optionalObject(args, 'args');
+	if (args) {
+		mod_assert.optionalObject(args.bucketizers, 'args.bucketizers');
+		mod_assert.optionalObject(args.streamOptions,
+			'args.streamOptions');
+		mod_assert.optionalArrayOfString(args.decomps, 'args.decomps');
+	} else {
+		args = {};
+	}
 
-	if (args.decomps)
-		mod_assert.ok(Array.isArray(args.decomps));
+	var streamoptions;
 
-	if (args.bucketizers) {
-		mod_assert.ok(typeof (args.bucketizers) == 'object');
-		mod_assert.ok(args.bucketizers !== null);
-	}
+	streamoptions = {
+		'highWaterMark': 0,
+		'objectMode': true
+	};
+	streamoptions = mod_jsprim.mergeObjects(args.streamOptions, undefined,
+			streamoptions);
 
-	streamoptions = { 'highWaterMark': 0 };
-	if (args.streamOptions) {
-		mod_assert.equal(typeof (args.streamOptions), 'object');
-		mod_assert.ok(args.streamOptions !== null);
-		for (i in args.streamOptions)
-			streamoptions[i] = args.streamOptions[i];
-	}
-	streamoptions['objectMode'] = true;
 	mod_stream.Transform.call(this, streamoptions);
 
 	this.sa_decomps = args.decomps ? args.decomps.slice(0) : [];
@@ -321,8 +320,7 @@ function skAggregator(args)
 
 mod_util.inherits(skAggregator, mod_stream.Transform);
 
-skAggregator.prototype.stats = function ()
-{
+skAggregator.prototype.stats = function stats() {
 	return ({
 	    'ninputs': this.sa_nrecords,
 	    'nparsed': this.sa_nparsed,
@@ -330,20 +328,18 @@ skAggregator.prototype.stats = function ()
 	});
 };
 
-skAggregator.prototype._transform = function (datapt, _, callback)
-{
+skAggregator.prototype._transform = function _transform(datapt, _, callback) {
 	this.aggregate(datapt);
 	setImmediate(callback);
 };
 
-skAggregator.prototype.aggregate = function (datapt)
-{
+skAggregator.prototype.aggregate = function aggregate(datapt) {
+	mod_assert.object(datapt, 'datapt');
+	mod_assert.number(datapt.value, 'datapt.value');
+	mod_assert.object(datapt.fields, 'datapt.fields');
 	var i, prev, o, field, fieldvalue, bucketizer;
 
 	this.sa_nrecords++;
-	mod_assert.equal(typeof (datapt), 'object');
-	mod_assert.ok(datapt !== null);
-	mod_assert.equal(typeof (datapt['value']), 'number');
 
 	/*
 	 * Recall that we store the current accumulated value as a tree, where
@@ -365,8 +361,6 @@ skAggregator.prototype.aggregate = function (datapt)
 	prev = null;
 	o = this.sa_value;
 	for (i = 0; i < this.sa_decomps.length; i++) {
-		mod_assert.equal(typeof (o), 'object');
-		mod_assert.ok(o !== null);
 		field = this.sa_decomps[i];
 		fieldvalue = mod_jsprim.pluck(datapt['fields'], field);
 		prev = o;
@@ -415,27 +409,17 @@ skAggregator.prototype.aggregate = function (datapt)
 		 * If there was at least one decomposition, then update the
 		 * value by updating the corresponding key of its parent.
 		 */
-		mod_assert.equal(typeof (o), 'number');
-		mod_assert.ok(prev[fieldvalue] === o);
 		prev[fieldvalue] += datapt['value'];
 	} else {
 		/* Otherwise, sa_value is a number, so just increment it. */
-		mod_assert.ok(this.sa_value === o);
-		mod_assert.equal(typeof (this.sa_value), 'number');
 		this.sa_value += datapt['value'];
 	}
 };
 
-skAggregator.prototype._flush = function (callback)
-{
-	if (!this.sa_aspoints) {
-		this.push(this.result());
-		callback();
-		return;
-	}
-
-	var self, bucketizer;
+skAggregator.prototype.resultsAsPoints = function resultsAsPoints() {
+	var self, bucketizer, rv;
 
+	rv = [];
 	self = this;
 	mod_jsprim.flattenIter(this.sa_value, this.sa_decomps.length,
 	    function (row) {
@@ -469,14 +453,12 @@ skAggregator.prototype._flush = function (callback)
 		mod_assert.equal(i, row.length - 1);
 		mod_assert.equal(typeof (row[i]), 'number');
 		point.value = row[i];
-		self.push(point);
+		rv.push(point);
 	    });
-
-	callback();
+	return (rv);
 };
 
-skAggregator.prototype.result = function ()
-{
+skAggregator.prototype.resultsAsSum = function resultsAsSum() {
 	var self, rv;
 
 	self = this;
@@ -498,6 +480,22 @@ skAggregator.prototype.result = function ()
 		}
 	});
 	return (rv);
+
+};
+
+skAggregator.prototype._flush = function _flush(callback) {
+	this.push(this.result());
+	callback();
+};
+
+skAggregator.prototype.result = function result() {
+	var ret;
+	if (!this.sa_aspoints) {
+		ret = this.resultsAsSum();
+	} else {
+		ret = this.resultsAsPoints();
+	}
+	return (ret);
 };
 
 
@@ -518,19 +516,17 @@ skAggregator.prototype.result = function ()
  * be clamped at either end the way DTrace distributions always are.  If useful,
  * we could add support for that.)
  */
-function skBucketizer()
-{
-	mod_assert.equal(typeof (this._bucketIndexToMin), 'function',
+function skBucketizer() {
+	mod_assert.func(this._bucketIndexToMin,
 	    'children of "skBucketizer" must implement _bucketIndexToMin');
-	mod_assert.equal(typeof (this._valueToBucketIndex), 'function',
+	mod_assert.func(this._valueToBucketIndex,
 	    'children of "skBucketizer" must implement _valueToBucketIndex');
 }
 
 /*
  * Returns the minimum value contained in bucket "i".
  */
-skBucketizer.prototype.bucketMin = function (i)
-{
+skBucketizer.prototype.bucketMin = function bucketMin(i) {
 	mod_assert.ok(i >= 0);
 	return (this._bucketIndexToMin(i));
 };
@@ -545,8 +541,7 @@ skBucketizer.prototype.bucketMin = function (i)
  * minus 1.  Otherwise, the bucketMax is some small amount less than the next
  * bucket's minimum.
  */
-skBucketizer.prototype.bucketMax = function (i)
-{
+skBucketizer.prototype.bucketMax = function bucketMax(i) {
 	var min, nextmin;
 
 	mod_assert.ok(i >= 0);
@@ -567,14 +562,12 @@ skBucketizer.prototype.bucketMax = function (i)
  * points "card" to add to the corresponding bucket, update the distribution in
  * place.
  */
-skBucketizer.prototype.bucketize = function (rv, value, card)
-{
-	var i, ent, bmin, bmax, bidx;
+skBucketizer.prototype.bucketize = function bucketize(rv, value, card) {
+	mod_assert.array(rv, 'rv');
+	mod_assert.number(value, 'value');
+	mod_assert.number(card, 'card');
 
-	mod_assert.ok(Array.isArray(rv));
-	mod_assert.equal(typeof (value), 'number');
-	mod_assert.equal(typeof (card), 'number');
-	mod_assert.ok(!isNaN(value) && !isNaN(card));
+	var i, ent, bmin, bmax, bidx;
 
 	for (i = 0; i < rv.length; i++) {
 		bmin = this.bucketMin(rv[i][0]);
@@ -602,21 +595,20 @@ skBucketizer.prototype.bucketize = function (rv, value, card)
 /*
  * Linear bucketizers group numbers into buckets of size "step".
  */
-function skLinearBucketizer(step)
-{
+function skLinearBucketizer(step) {
 	this.lb_step = step;
 	skBucketizer.call(this);
 }
 
 mod_util.inherits(skLinearBucketizer, skBucketizer);
 
-skLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skLinearBucketizer.prototype._bucketIndexToMin =
+	function _lBucketIndexToMin(bidx) {
 	return (this.lb_step * bidx);
 };
 
-skLinearBucketizer.prototype._valueToBucketIndex = function (value)
-{
+skLinearBucketizer.prototype._valueToBucketIndex =
+	function _lValueToBucketIndex(value) {
 	return (Math.floor(value / this.lb_step));
 };
 
@@ -629,8 +621,7 @@ skLinearBucketizer.prototype._valueToBucketIndex = function (value)
  * distribution's size scales like an exponential one, with the precision of
  * the linear one within each order of magnitude.
  */
-function skLogLinearBucketizer(base, nbuckets)
-{
+function skLogLinearBucketizer(base, nbuckets) {
 	var maxorder;
 
 	mod_assert.ok(nbuckets % base === 0,
@@ -648,8 +639,8 @@ function skLogLinearBucketizer(base, nbuckets)
 
 mod_util.inherits(skLogLinearBucketizer, skBucketizer);
 
-skLogLinearBucketizer.prototype._valueToBucketIndex = function (value)
-{
+skLogLinearBucketizer.prototype._valueToBucketIndex =
+	function _llValueToBucketIndex(value) {
 	var totbuckets;		/* bucket index reached so far */
 	var maxorder;		/* maximum value in the current magnitude */
 	var prevorder;		/* maximum value in previous magnitude */
@@ -681,8 +672,8 @@ skLogLinearBucketizer.prototype._valueToBucketIndex = function (value)
 	return (totbuckets);
 };
 
-skLogLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skLogLinearBucketizer.prototype._bucketIndexToMin =
+	function _llBucketIndexToMin(bidx) {
 	var i;			/* bucket index reached so far, always the */
 				/* start of an order of magnitude */
 	var minorder;		/* minimum value in magnitude "i" */
@@ -723,20 +714,18 @@ skLogLinearBucketizer.prototype._bucketIndexToMin = function (bidx)
  * Power-of-two bucketizers group numers into the nearest power-of-two order of
  * magnitude.
  */
-function skP2Bucketizer()
-{
+function skP2Bucketizer() {
 	skBucketizer.call(this);
 }
 
 mod_util.inherits(skP2Bucketizer, skBucketizer);
 
-skP2Bucketizer.prototype._bucketIndexToMin = function (bidx)
-{
+skP2Bucketizer.prototype._bucketIndexToMin = function _bucketIndexToMin(bidx) {
 	return (bidx === 0 ? 0 : Math.pow(2, bidx - 1));
 };
 
-skP2Bucketizer.prototype._valueToBucketIndex = function (value)
-{
+skP2Bucketizer.prototype._valueToBucketIndex =
+	function _p2ValueToBucketIndex(value) {
 	var thresh, count;
 
 	if (value === 0)
@@ -756,18 +745,15 @@ skP2Bucketizer.prototype._valueToBucketIndex = function (value)
  * Constructors for bucketizers.
  */
 
-function skMakeLinearBucketizer(step)
-{
+function skMakeLinearBucketizer(step) {
 	return (new skLinearBucketizer(step));
 }
 
-function skMakeLogLinearBucketizer(base, nbuckets)
-{
+function skMakeLogLinearBucketizer(base, nbuckets) {
 	return (new skLogLinearBucketizer(base, nbuckets));
 }
 
-function skMakeP2Bucketizer()
-{
+function skMakeP2Bucketizer() {
 	return (new skP2Bucketizer());
 }
 
@@ -777,12 +763,11 @@ function skMakeP2Bucketizer()
  * that includes the minimum and maximum for each range instead of the ordinal
  * number of each range.
  */
-function skOrdinalToBounds(bucketizer, dist)
-{
+function skOrdinalToBounds(bucketizer, dist) {
 	return (dist.map(function (row, i) {
-		mod_assert.ok(Array.isArray(row));
+		mod_assert.array(row, 'row');
 		mod_assert.equal(row.length, 2);
-		mod_assert.equal(typeof (row[0]), 'number');
+		mod_assert.number(row[0], 'row[0]');
 		var bmin = bucketizer.bucketMin(row[0]);
 		var bmax = bucketizer.bucketMax(row[0]);
 		return ([ [ bmin, bmax ], row[1] ]);
diff --git a/package.json b/package.json
index 3dd224c..9a26bec 100644
--- a/package.json
+++ b/package.json
@@ -1,16 +1,17 @@
 {
-	"name": "skinner",
-	"description": "aggregate multi-dimensional data points",
-	"version": "0.4.0",
-	"license": "MIT",
-	"author": "Dave Pacheco <dap@joyent.com>",
-	"main": "lib/skinner.js",
-	"repository": {
-		"type": "git",
-		"url": "https://github.com/joyent/node-skinner.git"
-	},
-	"dependencies": {
-		"jsprim": "0.6.0",
-		"verror": "1.4.0"
-	}
+  "name": "skinner",
+  "description": "aggregate multi-dimensional data points",
+  "version": "0.5.0",
+  "license": "MIT",
+  "author": "Dave Pacheco <dap@joyent.com>",
+  "main": "lib/skinner.js",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/joyent/node-skinner.git"
+  },
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "jsprim": "1.4.1",
+    "verror": "1.4.0"
+  }
 }
diff --git a/tests/tst.basic.js b/test/tst.basic.js
similarity index 88%
rename from tests/tst.basic.js
rename to test/tst.basic.js
index 175f6eb..5769d82 100644
--- a/tests/tst.basic.js
+++ b/test/tst.basic.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assert = require('assert-plus');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 var datapoints, bucketizers;
@@ -125,5 +129,32 @@ mod_assert.deepEqual(
       [ 'cpu1', 1, 1 ],
       [ 'cpu1', 5, 1 ] ]);
 
+/*
+ * Test streaming aggregators.
+ */
+/*
+ * Streaming aggregator with results as a sum.
+ */
+var point = {
+	fields: {
+		'test': 1
+	},
+	value: 1
+};
+var stream = mod_skinner.createAggregator();
+stream.write(point);
+stream.end();
+mod_assert.deepEqual(stream.result(), [1]);
+
+/*
+ * Streaming aggregator with results as datapoints.
+ */
+stream = mod_skinner.createAggregator({
+	resultsAsPoints: true
+});
+stream.write(point);
+stream.end();
+mod_assert.deepEqual(stream.result(), [{ fields: {}, value: 1 }]);
+
 console.log('test %s okay', mod_path.basename(process.argv[1]));
 /* END JSSTYLED */
diff --git a/tests/tst.bucketize_linear.js b/test/tst.bucketize_linear.js
similarity index 96%
rename from tests/tst.bucketize_linear.js
rename to test/tst.bucketize_linear.js
index b44c0f2..e0ea705 100644
--- a/tests/tst.bucketize_linear.js
+++ b/test/tst.bucketize_linear.js
@@ -1,4 +1,8 @@
-var mod_assert = require('assert');
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var mod_assert = require('assert-plus');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
 
diff --git a/tests/tst.bucketize_loglinear.js b/test/tst.bucketize_loglinear.js
similarity index 98%
rename from tests/tst.bucketize_loglinear.js
rename to test/tst.bucketize_loglinear.js
index 68c9f03..0dbfff2 100644
--- a/tests/tst.bucketize_loglinear.js
+++ b/test/tst.bucketize_loglinear.js
@@ -1,3 +1,7 @@
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
 var mod_assert = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
diff --git a/tests/tst.bucketize_p2.js b/test/tst.bucketize_p2.js
similarity index 98%
rename from tests/tst.bucketize_p2.js
rename to test/tst.bucketize_p2.js
index 725ceb3..c8ccef6 100644
--- a/tests/tst.bucketize_p2.js
+++ b/test/tst.bucketize_p2.js
@@ -1,3 +1,7 @@
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
 var mod_assert = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
diff --git a/tests/tst.nonnumeric.js b/test/tst.nonnumeric.js
similarity index 96%
rename from tests/tst.nonnumeric.js
rename to test/tst.nonnumeric.js
index 1ad7dc5..74efcb5 100644
--- a/tests/tst.nonnumeric.js
+++ b/test/tst.nonnumeric.js
@@ -1,3 +1,7 @@
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
 var mod_assert = require('assert');
 var mod_path = require('path');
 var mod_skinner = require('../lib/skinner');
diff --git a/tools/bashstyle b/tools/bashstyle
new file mode 100755
index 0000000..3ea6622
--- /dev/null
+++ b/tools/bashstyle
@@ -0,0 +1,175 @@
+#!/usr/bin/env node
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2014, Joyent, Inc.
+ */
+
+/*
+ * bashstyle: check bash scripts for adherence to style guidelines, including:
+ *
+ *    o no lines longer than 80 characters
+ *    o file does not end with a blank line
+ *    o Do not use 'local' and var initialization *using a subshell* in the
+ *      same statement. See
+ *      <http://www.tldp.org/LDP/abs/html/localvar.html#EXITVALANOMALY01>
+ *      for why not. Arguably this belongs in a separate 'bashlint'.
+ *
+ * Future enhancements could include:
+ *    o indents consistent with respect to tabs, spaces
+ *    o indents consistently sized (all are some multiple of the smallest
+ *      indent, which must be a tab or 4 or 8 spaces)
+ */
+
+var VERSION = '2.0.0';
+
+var mod_assert = require('assert');
+var mod_fs = require('fs');
+
+var nerrors = 0;
+
+main();
+process.exit(0);
+
+function main()
+{
+	var files = process.argv.slice(2);
+
+	if (files.length === 0) {
+		console.error('usage: %s file1 [...]',
+		    process.argv.slice(0, 2).join(' '));
+		process.exit(2);
+	}
+
+	files.forEach(checkFile);
+
+	if (nerrors != 0)
+		process.exit(1);
+}
+
+function checkFile(filename)
+{
+	var text = mod_fs.readFileSync(filename, 'utf-8');
+	var lines = text.split('\n');
+	var i;
+	var styled = false;
+	var styleStart;
+
+	mod_assert.ok(lines.length > 0);
+
+	/*
+	 * Expand tabs in each line and check for long lines.
+	 */
+	for (i = 1; i <= lines.length; i++) {
+		var line = expandTabs(lines[i - 1]);
+
+		if (i > 1 && lines[i-2].match(/# BASHSTYLED/)) {
+			continue;
+		}
+
+		if (line.match(/# BEGIN BASHSTYLED/)) {
+			styleStart = i;
+			styled = true;
+		}
+
+		if (line.match(/# END BASHSTYLED/)) {
+			if (styled != true) {
+				nerrors++;
+				console.log('%s: %d: END BASHSTYLED ' +
+				    'w/o corresponding BEGIN', filename, i);
+			}
+			styled = false;
+		}
+
+		/*JSSTYLED*/
+		if (!styled && line.match(/^\s*local\s+(\w+)\s*=.*\$\(/)) {
+			nerrors++;
+			/*JSSTYLED*/
+			var m = line.match(/^\s*local\s+(\w+)\s*=/);
+			console.log('%s: %d: declaring and setting a "local" ' +
+				'var in the same statement ' +
+				'ignores a subshell return code ' +
+				'<http://www.tldp.org/LDP/abs/html/' +
+				'localvar.html#EXITVALANOMALY01>: ' +
+				'local %s=...',
+				filename, i, m[1]);
+		}
+
+		// Regexplanation: non-[, [, space (contents) space, ], non-]
+		// groups before and after brackets to ease search/replace.
+		if (!styled && line.match(/(^|[^\[])\[(\s.+\s)\]([^\]])/)) {
+			nerrors++;
+			console.log('%s: %d: prefer [[ to [ for tests.',
+			    filename, i);
+		}
+
+		if (!styled && line.length > 80) {
+			nerrors++;
+			console.log('%s: %d: line exceeds 80 columns',
+			    filename, i);
+		}
+
+		if (!styled && line.match(/\s+$/)) {
+			nerrors++;
+			console.log('%s: %d: line ends in whitespace',
+			    filename, i);
+		}
+	}
+
+	if (styled) {
+		nerrors++;
+		console.log('%s: %d: BEGIN BASHSTYLED that does not END',
+		            filename, styleStart);
+	}
+
+
+	/*
+	 * No sane editor lets you save a file without a newline at the
+	 * very end.
+	 */
+	if (lines[lines.length - 1].length !== 0) {
+		nerrors++;
+		console.log('%s: %d: file does not end with newline',
+			filename, lines.length);
+	}
+
+	/*
+	 * Since the file will always end with a newline, the last entry of
+	 * "lines" will actually be blank.
+	 */
+	if (lines.length > 1 && lines[lines.length - 2].length === 0) {
+		nerrors++;
+		console.log('%s: %d: file ends with a blank line',
+		    filename, lines.length - 1);
+	}
+}
+
+function expandTabs(text)
+{
+	var out = '';
+	var col = 0;
+	var j, k;
+
+	for (j = 0; j < text.length; j++) {
+		if (text[j] != '\t') {
+			out += text[j];
+			col++;
+			continue;
+		}
+
+		k = 8 - (col % 8);
+		col += k;
+
+		do {
+			out += ' ';
+		} while (--k > 0);
+
+		col += k;
+	}
+
+	return (out);
+}
diff --git a/jsl.node.conf b/tools/jsl.node.conf
similarity index 69%
rename from jsl.node.conf
rename to tools/jsl.node.conf
index ea681b5..c44e8ee 100644
--- a/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -1,6 +1,5 @@
 #
-# Configuration File for JavaScript Lint 0.3.0
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
+# Configuration File for JavaScript Lint 
 #
 # This configuration file can be used to lint a collection of scripts, or to enable
 # or disable warnings for scripts that are linted via the command line.
@@ -10,57 +9,74 @@
 # Enable or disable warnings based on requirements.
 # Use "+WarningName" to display or "-WarningName" to suppress.
 #
-+no_return_value              # function {0} does not always return a value
-+duplicate_formal             # duplicate formal argument {0}
-+equal_as_assign              # test for equality (==) mistyped as assignment (=)?{0}
-+var_hides_arg                # variable {0} hides argument
-+redeclared_var               # redeclaration of {0} {1}
-+anon_no_return_value         # anonymous function does not always return a value
-+missing_semicolon            # missing semicolon
-+meaningless_block            # meaningless block; curly braces have no impact
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
 +comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+unreachable_code             # unreachable code
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
 +comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
 -inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
--useless_quotes			# quotation marks are unnecessary
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+use_of_label                 # use of label
--block_without_braces         # block statement without curly braces
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
 +leading_decimal_point        # leading decimal point may indicate a number or an object member
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
--octal_number                 # leading zeros make an octal number
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
 +nested_comment               # nested comment
--misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+empty_statement              # empty statement or extra semicolon
--missing_option_explicit      # the "option explicit" control comment is missing
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
 +partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+dup_option_explicit          # duplicate "option explicit" control comment
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
+-unreferenced_argument        # argument declared but never referenced: {name}
+-unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
 +useless_assign               # useless assignment
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent)
--missing_default_case         # missing default case in switch statement
-+duplicate_case_in_switch     # duplicate case in switch statements
-+default_not_at_end           # the default case is not at the end of the switch statement
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
 +useless_comparison           # useless comparison; comparing identical expressions
+-useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+assign_to_function_call      # assignment to a function call
-+parseint_missing_radix       # parseInt missing radix parameter
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function declared but not referenced
+
 
 ### Output format
 # Customize the format of the error message.
 #    __FILE__ indicates current file path
 #    __FILENAME__ indicates current file name
 #    __LINE__ indicates current line
-#    __ERROR__ indicates error message
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
 #
 # Visual Studio syntax (default):
 +output-format __FILE__(__LINE__): __ERROR__
@@ -75,33 +91,13 @@
 +context
 
 
-### Semicolons
-# By default, assignments of an anonymous function to a variable or
-# property (such as a function prototype) must be followed by a semicolon.
-#
-#+lambda_assign_requires_semicolon # deprecated setting
-
-
 ### Control Comments
 # Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
 # the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
 # enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
 # although legacy control comments are enabled by default for backward compatibility.
 #
-+legacy_control_comments
-
-
-### JScript Function Extensions
-# JScript allows member functions to be defined like this:
-#     function MyObj() { /*constructor*/ }
-#     function MyObj.prototype.go() { /*member function*/ }
-#
-# It also allows events to be attached like this:
-#     function window::onload() { /*init page*/ }
-#
-# This is a Microsoft-only JavaScript extension. Enable this setting to allow them.
-#
-#-jscript_function_extensions # deprecated setting
+-legacy_control_comments
 
 
 ### Defining identifiers
@@ -113,24 +109,26 @@
 # (Use this in conjunction with the "undeclared identifier" warning.)
 #
 # Common uses for webpages might be:
-#+define window
-#+define document
++define __dirname
++define clearInterval
++define clearTimeout
++define console
++define exports
 +define global
++define module
 +define process
 +define require
-+define exports
++define setInterval
 +define setImmediate
-+define clearImmediate
 +define setTimeout
-+define clearTimeout
-+define setInterval
-+define clearInterval
-+define JSON
-+define console
-+define module
-+define __dirname
-+define __filename
 +define Buffer
++define JSON
++define Math
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
 
 ### Files
 # Specify which files to lint
@@ -138,4 +136,4 @@
 # To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
 # or "+process Folder\Path\*.htm".
 #
-#+process jsl-test.js
+
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
new file mode 100644
index 0000000..b135000
--- /dev/null
+++ b/tools/jsl.web.conf
@@ -0,0 +1,137 @@
+#
+# Configuration File for JavaScript Lint 
+# Developed by Matthias Miller (http://www.JavaScriptLint.com)
+#
+# This configuration file can be used to lint a collection of scripts, or to enable
+# or disable warnings for scripts that are linted via the command line.
+#
+
+### Warnings
+# Enable or disable warnings based on requirements.
+# Use "+WarningName" to display or "-WarningName" to suppress.
+#
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
++comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
++comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
++inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
++leading_decimal_point        # leading decimal point may indicate a number or an object member
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
++nested_comment               # nested comment
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
++partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
++unreferenced_argument        # argument declared but never referenced: {name}
++unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
++useless_assign               # useless assignment
++useless_comparison           # useless comparison; comparing identical expressions
++useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
++with_statement               # with statement hides undeclared variables; use temporary variable instead
+
+
+### Output format
+# Customize the format of the error message.
+#    __FILE__ indicates current file path
+#    __FILENAME__ indicates current file name
+#    __LINE__ indicates current line
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
+#
+# Visual Studio syntax (default):
++output-format __FILE__(__LINE__): __ERROR__
+# Alternative syntax:
+#+output-format __FILE__:__LINE__: __ERROR__
+
+
+### Context
+# Show the in-line position of the error.
+# Use "+context" to display or "-context" to suppress.
+#
++context
+
+
+### Control Comments
+# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
+# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
+# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
+# although legacy control comments are enabled by default for backward compatibility.
+#
+-legacy_control_comments
+
+
+### Defining identifiers
+# By default, "option explicit" is enabled on a per-file basis.
+# To enable this for all files, use "+always_use_option_explicit"
++always_use_option_explicit
+
+# Define certain identifiers of which the lint is not aware.
+# (Use this in conjunction with the "undeclared identifier" warning.)
+#
+# Common uses for webpages might be:
++define	JSON
++define Math
++define $
++define XMLHttpRequest
++define alert
++define clearInterval
++define clearTimeout
++define confirm
++define document
++define setInterval
++define setTimeout
++define window
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
+
+### Files
+# Specify which files to lint
+# Use "+recurse" to enable recursion (disabled by default).
+# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
+# or "+process Folder\Path\*.htm".
+#
+
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..2d13d5d
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,14 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+unparenthesized-return=1
+indent=tab
+line-length=80
+literal-string-quote=single
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..8c6be90
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,97 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..1cffbe7
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,54 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..487824d
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/Makefile.targ b/tools/mk/Makefile.targ
similarity index 88%
rename from Makefile.targ
rename to tools/mk/Makefile.targ
index b6e642b..54edf0e 100644
--- a/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,6 +1,13 @@
-# -*- mode: makefile -*-
 #
-# Copyright (c) 2012, Joyent, Inc. All rights reserved.
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
 #
 # Makefile.targ: common targets.
 #
@@ -81,9 +88,9 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
@@ -100,7 +107,7 @@ JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -201,7 +208,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -256,7 +263,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -286,9 +293,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -307,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
