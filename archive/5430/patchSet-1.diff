From 8b063b34990c4a3307295ed362df961faf8ac8c6 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 25 Jan 2019 19:37:13 +0100
Subject: [PATCH] CNAPI-727 Add /servers/:uuid/refresh_agents end-point

---
 lib/endpoints/servers.js | 92 +++++++++++++++++++++++++++++-----------
 1 file changed, 67 insertions(+), 25 deletions(-)

diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index 44ec8d0..7322ac8 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -15,17 +15,13 @@
  */
 
 var async = require('async');
-var fs = require('fs');
 var qs = require('qs');
 var restify = require('restify');
 var semver = require('semver');
 var sprintf = require('sprintf').sprintf;
-var util = require('util');
 var vasync = require('vasync');
 var VError = require('verror');
 
-var common = require('../common');
-var datasetEndpoints = require('./zfs');
 var Designation = require('../designation');
 var ModelPlatform = require('../models/platform');
 var ModelServer = require('../models/server');
@@ -58,8 +54,10 @@ function Server() {}
  * @param {Boolean} reserved Return only reserved servers
  * @param {Boolean} reservoir Return only reservoir servers
  * @param {String} hostname Return machine with given hostname
- * @param {String} extras Comma seperated values: agents, vms, memory, disk, sysinfo, capacity, all
- * @param {Integer} limit Maximum number of results to return. It must be between 1-1000, inclusive. Defaults to 1000 (the maxmimum allowed value).
+ * @param {String} extras Comma seperated values: agents, vms, memory, disk,
+ *    sysinfo, capacity, all
+ * @param {Integer} limit Maximum number of results to return. It must be
+ *    between 1-1000, inclusive. Defaults to 1000 (the maxmimum allowed value).
  * @param {Integer} offset Offset the subset of results returned
  *
  * @example GET /servers
@@ -82,7 +80,7 @@ Server.list = function handlerSeverList(req, res, next) {
         ],
         'extras': [
             ['optional', undefined],
-            /*JSSTYLED*/
+            /* JSSTYLED */
             ['regex', RegExp(/^[a-zA-Z_]+(,[a-zA-Z_]+)*$/i)]
         ],
         'reserved': [
@@ -105,7 +103,7 @@ Server.list = function handlerSeverList(req, res, next) {
         'offset': ['optional', 'isInt'],
         'uuids': [
             ['optional', undefined],
-            /*JSSTYLED*/
+            /* JSSTYLED */
             ['regex', RegExp(/^[-a-z0-9A-Z]+(,[-a-z0-9A-Z]+)*$/i)]
         ]
     };
@@ -319,11 +317,15 @@ Server.get = function handlerServerGet(req, res, next) {
  * @param {Boolean} reserved Server is available for provisioning
  * @param {Boolean} reservoir Server should be considered last for provisioning
  * @param {Nmber} reservation_ratio The reservation ratio
- * @param {Object} overprovision_ratios The overprovisioning ratios. Must be an object with Number value keys and keys must be one of 'cpu', 'ram', 'disk', 'io', 'net'.
+ * @param {Object} overprovision_ratios The overprovisioning ratios. Must be
+ *      an object with Number value keys and keys must be one of
+ *      'cpu', 'ram', 'disk', 'io', 'net'.
  * @param {String} serial Serial device
  * @param {Boolean} setup True if server has been set up
  * @param {Boolean} setting_up True if server is in the process of setting up
- * @param {String} transitional_status The fallback status if not 'running'. For example, if the server has to reboot, this value may be set to 'rebooting'.
+ * @param {String} transitional_status The fallback status if not 'running'.
+ *      For example, if the server has to reboot, this value may be set to
+ *      'rebooting'.
  * @param {Object} traits Server traits
  *
  * @example POST /servers/12494d5e-3960-4d65-a61a
@@ -379,8 +381,8 @@ Server.update = function handlerServerUpdate(req, res, next) {
             }
         });
 
-        req.params.overprovision_ratios
-            = qs.stringify(req.params.overprovision_ratios);
+        req.params.overprovision_ratios =
+            qs.stringify(req.params.overprovision_ratios);
     }
 
     // Check that if next_reboot is set, it is an ISO date string.
@@ -423,15 +425,15 @@ Server.update = function handlerServerUpdate(req, res, next) {
             return;
         }
 
-        if (type == String) {
+        if (type === String) {
             change[param] = val;
-        } else if (type == Boolean) {
+        } else if (type === Boolean) {
             if (val === true) {
                 change[param] = true;
             } else if (val === false) {
                 change[param] = false;
             }
-        } else if (type == Number) {
+        } else if (type === Number) {
             change[param] = Number(val);
         } else {
             change[param] = val;
@@ -470,7 +472,7 @@ Server.update = function handlerServerUpdate(req, res, next) {
                 return;
             }
 
-            req.stash.server.getRaw(function (error, server) {
+            req.stash.server.getRaw(function (error, _server) {
                 if (error) {
                     cb(new VError('failed to fetch vms'));
                     return;
@@ -488,7 +490,7 @@ Server.update = function handlerServerUpdate(req, res, next) {
                 return;
             }
 
-            req.stash.server.getRaw(function (error, raw) {
+            req.stash.server.getRaw(function (_error, raw) {
                 if (!raw.setup) {
                     cb();
                     return;
@@ -496,7 +498,7 @@ Server.update = function handlerServerUpdate(req, res, next) {
 
                 var request = {
                     task: 'server_overprovision_ratio',
-                    cb: function (err, task) {
+                    cb: function (_err, _task) {
                     },
                     evcb: function () {},
                     synccb: function (err, result) {
@@ -565,7 +567,7 @@ Server.reboot = function handlerServerReboot(req, res, next) {
         return;
     }
 
-    req.stash.server.getRaw(function (error, rawserver) {
+    req.stash.server.getRaw(function (_error, _rawserver) {
         var params = {
             origin: req.params.origin,
             creator_uuid: req.params.creator_uuid,
@@ -713,7 +715,7 @@ Server.setup = function handlerServerSetup(req, res, next) {
         params.disk_layout = layout;
     }
 
-    req.stash.server.getRaw(function (error, rawserver) {
+    req.stash.server.getRaw(function (_error, rawserver) {
         if (rawserver.setup) {
             res.send(204);
             next();
@@ -953,6 +955,35 @@ Server.taskHistory = function handlerServerTaskHistory(req, res, next) {
     });
 };
 
+/* BEGIN JSSTYLED */
+/**
+ * Makes cn-agent refresh the values for the agents setup on the server and
+ * post them back to CNAPI
+ *
+ * @name ServerRefreshAgents
+ * @endpoint GET /servers/:server_uuid/refresh-agents
+ * @section Server API
+ *
+ * @response 200 Ok task initiated successfully
+ * @response 500 Error Could not process request
+ */
+/* END JSSTYLED */
+Server.refreshAgents = function handlerServerRefreshAgents(req, res, next) {
+    var self = this;
+
+    req.stash.server.sendTaskRequest({
+        task: 'refresh_agents',
+        params: req.params,
+        req: req,
+        evcb: ModelServer.createComputeNodeAgentHandler(self, req.params.jobid),
+        cb: function (_error, task) {
+            res.send({ id: task.id });
+            next();
+            return;
+        }
+    });
+};
+
 /* BEGIN JSSTYLED */
 /**
  * Makes cn-agent stop accepting new tasks
@@ -1086,8 +1117,8 @@ Server.ensureImage = function handlerServerEnsureImage(req, res, next) {
     var rules = {
         'server_uuid': ['isStringType'],
         'image_uuid': ['isStringType'],
-        'zfs_storage_pool_name':  ['optional', 'isStringType'],
-        'imgapiPeers':  ['optional', 'isArrayType']
+        'zfs_storage_pool_name': ['optional', 'isStringType'],
+        'imgapiPeers': ['optional', 'isArrayType']
     };
 
     if (validation.ensureParamsValid(req, res, rules, { strict: true })) {
@@ -1100,7 +1131,7 @@ Server.ensureImage = function handlerServerEnsureImage(req, res, next) {
         params: req.params,
         req: req,
         evcb: ModelServer.createComputeNodeAgentHandler(self, req.params.jobid),
-        cb: function (error, task) {
+        cb: function (_error, task) {
             res.send({ id: task.id });
             next();
             return;
@@ -1287,7 +1318,7 @@ Server.installAgent = function handlerServerInstallAgent(req, res, next) {
         params: req.params,
         req: req,
         evcb: ModelServer.createComputeNodeAgentHandler(self, req.params.jobid),
-        cb: function (error, task) {
+        cb: function (_error, task) {
             res.send({ id: task.id });
             next();
             return;
@@ -1301,7 +1332,7 @@ Server.nop = function handlerServerNop(req, res, next) {
         task: 'nop',
         params: req.params,
         req: req,
-        cb: function (error, taskstatus) {
+        cb: function (_error, taskstatus) {
             res.send({ id: taskstatus.id });
             next();
         }
@@ -1467,6 +1498,17 @@ function attachTo(http, app) {
         }),
         Server.taskHistory);
 
+    http.post({
+        path: '/servers/:server_uuid/refresh-agents',
+        name: 'ServerRefreshAgents'
+    }, ensure({
+        connectionTimeoutSeconds: 60 * 60,
+        app: app,
+        serverRunning: true,
+        prepopulate: ['server'],
+        connected: ['moray']
+    }), Server.refreshAgents);
+
     // cn-agent pause-resume
     http.post({
         path: '/servers/:server_uuid/cn-agent/pause',
-- 
2.21.0

