commit 56eb2f7dfd87ee6a322843f2fe6b99747c58adc9 (refs/changes/35/1335/4)
Author: Richard Bradley <richard.bradley@joyent.com>
Date:   2017-02-06T17:34:11+00:00 (2 years, 8 months ago)
    
    NET-367 sysinfo-refresh should be more hesitant about deleting NICs from NAPI

diff --git a/lib/workflows/server-sysinfo.js b/lib/workflows/server-sysinfo.js
index 01f3306..b07b223 100644
--- a/lib/workflows/server-sysinfo.js
+++ b/lib/workflows/server-sysinfo.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -14,12 +14,15 @@
  * - CNAPI receives sysinfo
  * - CNAPI starts workflow
  * - Get server's pre-existing nics from NAPI
- * - Update NAPI with any changed nics
- * - Add any new nics to NAPI
- * - Delete any removed nics from NAPI
+ * - Update NAPI with any changed nics and aggrs
+ * - Add any new nics and aggrs to NAPI
+ *
+ * NICs are not deleted from NAPI by this workflow, which if required (e.g. a
+ * swap of the physical NIC on the server) should be done directly by the
+ * operator via the DeleteNic endpoint in NAPI.
  */
 
-var VERSION = '1.1.2';
+var VERSION = '1.1.3';
 
 var sdcClients = require('sdc-clients');
 var vasync = require('vasync');
@@ -183,7 +186,7 @@ function getServerNics(job, cb) {
         }
 
         // Now that we have the current nics, go through and figure out
-        // if they're adds, deletes, updates, or no change.
+        // if they're adds, updates, or no change.
         var sysinfo = job.params.sysinfo;
         var uuid = sysinfo['UUID'];
         var aggrNics = [];
@@ -324,18 +327,10 @@ function getServerNics(job, cb) {
 
         job.params.updateNics = toUpdateNics;
         job.params.addNics = toAddNics;
-        job.params.deleteNics =
-            Object.keys(napiNics).map(function (i) {
-                return napiNics[i];
-            }).filter(function (nic) {
-                // Don't include vnics setup for underlay networks:
-                return !nic.underlay;
-            });
 
         job.log.info({
             updateNics: toUpdateNics,
             addNics: toAddNics,
-            deleteNics: job.params.deleteNics,
             napiNics: nics
         }, 'Got old nics from NAPI');
 
@@ -470,54 +465,16 @@ function addNics(job, callback) {
 }
 
 
-function deleteNics(job, callback) {
-    var length = job.params.deleteNics.length;
-    if (length === 0) {
-        callback(null, 'no nics to delete; returning');
-        return;
-    }
-
-    var napi = new sdcClients.NAPI({ url: napiUrl });
-    var deleted = [];
-
-    vasync.forEachParallel({
-        inputs: job.params.deleteNics,
-        func: function (params, next) {
-            napi.deleteNic(params.mac, function (err) {
-                job.log.info({
-                    params: params,
-                    status: err ? 'error: ' + err.message : 'success'
-                }, 'deleted nic: ' + params.mac);
-                if (err) {
-                    next(err);
-                    return;
-                }
-                deleted.push(params.mac);
-                next();
-            });
-        }
-    },
-    function (err) {
-        if (err) {
-            return callback(err);
-        }
-        callback(null, 'nics deleted: ' + deleted.join(', '));
-    });
-}
-
-
 function updateAggrs(job, cb) {
     if (job.params.existingAggrs.length === 0 &&
         Object.keys(job.params.sysinfoAggrs).length === 0) {
-        cb(null, 'No aggregations to update');
+        cb(null, 'No aggregations found');
         return;
     }
-
     var a;
     var add = [];
     var aggr;
     var beforeAggrs = {};
-    var del = [];
     var update = [];
     var serverUUID = job.params.sysinfo.UUID;
     var sysinfoNics = job.params.sysinfo['Network Interfaces'];
@@ -547,18 +504,17 @@ function updateAggrs(job, cb) {
         }
     }
 
-    for (a in beforeAggrs) {
-        if (!job.params.sysinfoAggrs.hasOwnProperty(a)) {
-            del.push(beforeAggrs[a].id);
-        }
+    if (update.length === 0 && add.length === 0) {
+        cb(null, 'No aggregations to update');
+        return;
     }
 
     var errs = [];
     var napi = new sdcClients.NAPI({ url: napiUrl });
-    var totalActions = add.length + del.length + update.length;
+    var totalActions = add.length + update.length;
     var doneActions = 0;
 
-    job.log.info({ add: add, update: update, del: del },
+    job.log.info({ add: add, update: update },
         'Updating aggregations in NAPI');
 
     for (a in add) {
@@ -570,10 +526,6 @@ function updateAggrs(job, cb) {
             afterAction.bind(napi, 'update', update[a]));
     }
 
-    for (a in del) {
-        napi.deleteAggr(del[a], afterAction.bind(napi, 'delete', del[a]));
-    }
-
     function afterAction(action, actParams, err, res) {
         if (err) {
             job.log.error(err, 'NAPI %s error', action);
@@ -666,13 +618,6 @@ module.exports = {
             body: addNics,
             modules: { sdcClients: 'sdc-clients', vasync: 'vasync' }
         },
-        {
-            name: 'napi.delete_nics',
-            timeout: 10,
-            retry: 1,
-            body: deleteNics,
-            modules: { sdcClients: 'sdc-clients', vasync: 'vasync' }
-        },
         {
             name: 'napi.update_aggrs',
             timeout: 10,
