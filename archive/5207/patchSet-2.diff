From 93239399dfb441cc7bf46546d3f1d6e8cdb254c3 Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Fri, 7 Dec 2018 15:45:56 +0000
Subject: [PATCH] OS-7434 src/img/test/*.js should be linted

---
 src/Makefile                |  1 +
 src/img/test/IMG.test.js    |  5 +-
 src/img/test/basics.test.js | 12 +++--
 src/img/test/create.test.js | 97 ++++++++++++++++++++++---------------
 src/img/test/docker.test.js | 14 +++---
 src/img/test/import.test.js | 36 ++++++++------
 6 files changed, 97 insertions(+), 68 deletions(-)

diff --git a/src/Makefile b/src/Makefile
index 47d8846e..f82ff2f4 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -101,6 +101,7 @@ JS_CHECK_TARGETS=\
 	vm/node_modules/zoneevent.js \
 	img/lib/*.js \
 	img/sbin/imgadm \
+	img/test/*.test.js \
 	vm/common/nictag.js \
 	vm/tests/common.js \
 	vm/tests/test-alias.js \
diff --git a/src/img/test/IMG.test.js b/src/img/test/IMG.test.js
index 24ccbb3f..2e818f0b 100644
--- a/src/img/test/IMG.test.js
+++ b/src/img/test/IMG.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  */
 
 /*
@@ -61,7 +61,7 @@ test('require("/usr/img/lib/IMG")', function (t) {
 });
 
 test('IMG.*', function (t) {
-    IMG.quickGetImage;
+    t.ok(IMG.quickGetImage);
     t.end();
 });
 
@@ -84,4 +84,3 @@ test('IMG.quickGetImage err', function (t) {
         t.end();
     });
 });
-
diff --git a/src/img/test/basics.test.js b/src/img/test/basics.test.js
index cb071a9c..eec190b9 100644
--- a/src/img/test/basics.test.js
+++ b/src/img/test/basics.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * * *
  * Some basic imgadm tests.
@@ -64,7 +64,7 @@ test('imgadm -E', function (t) {
     exec('imgadm -E', function (err, stdout, stderr) {
         t.ok(err);
         var lines = stderr.trimRight().split(/\n/g);
-        structuredErr = JSON.parse(lines[lines.length - 1]);
+        var structuredErr = JSON.parse(lines[lines.length - 1]);
         t.equal(structuredErr.err.code, 'NoCommand');
         t.end();
     });
@@ -77,7 +77,7 @@ test('imgadm --version', function (t) {
         t.equal(stderr, '', 'stderr');
         t.ok(/^imgadm \d+\.\d+\.\d+/.test(stdout),
             format('stdout is a version: "%s"', stdout.trim()));
-        version = stdout.split(/\s+/g)[1];
+        var version = stdout.split(/\s+/g)[1];
         var expectedVersion = require('/usr/img/package.json').version;
         t.equal(version, expectedVersion);
         t.end();
@@ -107,7 +107,9 @@ test('imgadm -v list  # bunyan trace log on stderr', function (t) {
     });
 });
 
-test('IMGADM_LOG_LEVEL=trace imgadm   # bunyan "src" log on stderr', function (t) {
+test('IMGADM_LOG_LEVEL=trace imgadm   # bunyan "src" log on stderr',
+    function (t) {
+
     var env = objCopy(process.env);
     env.IMGADM_LOG_LEVEL = 'trace';
     var execOpts = {env: env};
@@ -156,7 +158,7 @@ test('imgadm help sources', function (t) {
         t.equal(stderr, '', 'stderr');
         t.ok(/imgadm sources/.test(stdout),
             format('stdout is imgadm sources help: "%s..."',
-                   stdout.trim().split(/\n/, 1)[0]));
+            stdout.trim().split(/\n/, 1)[0]));
         t.end();
     });
 });
diff --git a/src/img/test/create.test.js b/src/img/test/create.test.js
index c0a0e554..725b423f 100644
--- a/src/img/test/create.test.js
+++ b/src/img/test/create.test.js
@@ -55,7 +55,7 @@ var before = tap4nodeunit.before;
 var test = tap4nodeunit.test;
 
 
-var WRKDIR = '/var/tmp/img-test-create'
+var WRKDIR = '/var/tmp/img-test-create';
 var TESTDIR = __dirname;
 
 // Base images from which we'll be creating a custom images.
@@ -96,18 +96,20 @@ test('setup: clean WRKDIR (' + WRKDIR + ')', function (t) {
 // ---- tests
 
 test('custom image (compression=none)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/1 none >%s/mk-custom-image.1.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/1 none >%s/mk-custom-image.1.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.1.log';
-        var cmd = format('%s/try-custom-image %s/1.imgmanifest %s/1.zfs >%s 2>&1',
+        cmd = format('%s/try-custom-image %s/1.imgmanifest %s/1.zfs >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -115,18 +117,20 @@ test('custom image (compression=none)', function (t) {
 });
 
 test('custom image (incremental, compression=none)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/1i none -i >%s/mk-custom-image.1i.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/1i none -i >%s/mk-custom-image.1i.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.1i.log';
-        var cmd = format('%s/try-custom-image %s/1i.imgmanifest %s/1i.zfs >%s 2>&1',
+        cmd = format('%s/try-custom-image %s/1i.imgmanifest %s/1i.zfs >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -134,18 +138,21 @@ test('custom image (incremental, compression=none)', function (t) {
 });
 
 test('custom image (compression=gzip)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/2 gzip >%s/mk-custom-image.2.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/2 gzip >%s/mk-custom-image.2.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.2.log';
-        var cmd = format('%s/try-custom-image %s/2.imgmanifest %s/2.zfs.gz >%s 2>&1',
+        cmd = format(
+            '%s/try-custom-image %s/2.imgmanifest %s/2.zfs.gz >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -153,18 +160,21 @@ test('custom image (compression=gzip)', function (t) {
 });
 
 test('custom image (incremental, compression=gzip)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/2i gzip -i >%s/mk-custom-image.2i.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/2i gzip -i >%s/mk-custom-image.2i.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.2i.log';
-        var cmd = format('%s/try-custom-image %s/2i.imgmanifest %s/2i.zfs.gz >%s 2>&1',
+        cmd = format(
+            '%s/try-custom-image %s/2i.imgmanifest %s/2i.zfs.gz >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -172,18 +182,21 @@ test('custom image (incremental, compression=gzip)', function (t) {
 });
 
 test('custom image (incremental, compression=bzip2)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/3i bzip2 -i >%s/mk-custom-image.3i.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/3i bzip2 -i >%s/mk-custom-image.3i.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.3i.log';
-        var cmd = format('%s/try-custom-image %s/3i.imgmanifest %s/3i.zfs.bz2 >%s 2>&1',
+        cmd = format(
+            '%s/try-custom-image %s/3i.imgmanifest %s/3i.zfs.bz2 >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -191,18 +204,21 @@ test('custom image (incremental, compression=bzip2)', function (t) {
 });
 
 test('custom image (compression=xz)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/4 xz >%s/mk-custom-image.4.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/4 xz >%s/mk-custom-image.4.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.4.log';
-        var cmd = format('%s/try-custom-image %s/4.imgmanifest %s/4.zfs.xz >%s 2>&1',
+        cmd = format(
+            '%s/try-custom-image %s/4.imgmanifest %s/4.zfs.xz >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -210,18 +226,21 @@ test('custom image (compression=xz)', function (t) {
 });
 
 test('custom image (incremental, compression=xz)', function (t) {
-    var cmd = format('%s/mk-custom-image %s %s/4i xz -i >%s/mk-custom-image.4i.log 2>&1',
+    var cmd = format(
+        '%s/mk-custom-image %s %s/4i xz -i >%s/mk-custom-image.4i.log 2>&1',
         TESTDIR, BASE_UUID, WRKDIR, WRKDIR);
     exec(cmd, {env: envWithTrace}, function (err, stdout, stderr) {
         t.ifError(err, format('error running "%s": %s', cmd, err));
         var logfile = WRKDIR + '/try-custom-image.4i.log';
-        var cmd = format('%s/try-custom-image %s/4i.imgmanifest %s/4i.zfs.xz >%s 2>&1',
+        cmd = format(
+            '%s/try-custom-image %s/4i.imgmanifest %s/4i.zfs.xz >%s 2>&1',
             TESTDIR, WRKDIR, WRKDIR, logfile);
-        exec(cmd, function (err) {
-            t.ifError(err, format('error running "%s": %s', cmd, err));
+        exec(cmd, function (_err) {
+            t.ifError(_err, format('error running "%s": %s', cmd, _err));
             var output = fs.readFileSync(logfile, 'utf8');
             t.ok(output.indexOf('hi from mk-custom-image') !== -1,
-                format('could not find expected marker in output:\n--\n%s\n--\n',
+                format(
+                    'could not find expected marker in output:\n--\n%s\n--\n',
                     output));
             t.end();
         });
@@ -444,7 +463,7 @@ test('create image from bhyve vm', function (t) {
                     ].join('\n')
                 };
 
-                VM.create(payload, function createVm(err, obj) {
+                VM.create(payload, function createVmFromImageCb(err, obj) {
                     common.ifError(t, err, 'error creating VM');
 
                     if (err) {
@@ -462,7 +481,7 @@ test('create image from bhyve vm', function (t) {
                     next(err);
                 });
             },
-            function verifyCustomization(_, next) {
+            function verifyCustomizationAfterNewBoot(_, next) {
                 VM.load(vmobj.uuid, function onLoaded(err, obj) {
                     common.ifError(t, err, 'loading VM after create');
 
@@ -476,7 +495,7 @@ test('create image from bhyve vm', function (t) {
                     next();
                 });
             },
-            function destroyVm(_, next) {
+            function destroyVmAfterNewBoot(_, next) {
                 if (!vmobj.uuid) {
                     next();
                     return;
diff --git a/src/img/test/docker.test.js b/src/img/test/docker.test.js
index 3c979d19..a63e9356 100644
--- a/src/img/test/docker.test.js
+++ b/src/img/test/docker.test.js
@@ -101,9 +101,9 @@ test('setup: get test image id', function (t) {
 
 test('precondition1: remove image UUID-OF:' + testImgArg, function (t) {
     var cmd = format(
-        'imgadm get %s 2>/dev/null >/dev/null && ' +
-            'imgadm ancestry %s -H -o uuid | ' +
-            'xargs -n1 imgadm delete || true',
+        'imgadm get %s 2>/dev/null >/dev/null && '
+            + 'imgadm ancestry %s -H -o uuid | '
+            + 'xargs -n1 imgadm delete || true',
         testImg.uuid, testImg.uuid);
     t.exec(cmd, function () {
         t.end();
@@ -155,7 +155,7 @@ test('imgadm list type=docker', function (t) {
             lines.length, stdout));
         var matchingLines = lines.filter(function (line) {
             return line.split(/ +/g)[0] === testImg.uuid;
-        })
+        });
         t.equal(matchingLines.length, 1, 'one of the lines\' first column '
             + 'value is the UUID from "imgadm show"');
         t.end();
@@ -187,9 +187,9 @@ test('imgadm list --docker', function (t) {
 // TODO: should remove as much as possible of its layer chain.
 test('cleanup: remove image UUID-OF:' + testImgArg, function (t) {
     var cmd = format(
-        'imgadm get %s 2>/dev/null >/dev/null && ' +
-            'imgadm ancestry %s -H -o uuid | ' +
-            'xargs -n1 imgadm delete || true',
+        'imgadm get %s 2>/dev/null >/dev/null && '
+            + 'imgadm ancestry %s -H -o uuid | '
+            + 'xargs -n1 imgadm delete || true',
         testImg.uuid, testImg.uuid);
     t.exec(cmd, function () {
         t.end();
diff --git a/src/img/test/import.test.js b/src/img/test/import.test.js
index 46a10b6e..304b316c 100644
--- a/src/img/test/import.test.js
+++ b/src/img/test/import.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * * *
  *
@@ -87,8 +87,8 @@ test('setup: ensure images.joyent.com source', function (t) {
 });
 
 test('setup: get test image in local SDC IMGAPI (if available)', function (t) {
-    var cmd = 'sdc-imgadm import ' + TEST_IMAGE_UUID +
-        ' -S https://images.joyent.com || true';
+    var cmd = 'sdc-imgadm import ' + TEST_IMAGE_UUID
+        + ' -S https://images.joyent.com || true';
     exec(cmd, function (err, o, e) {
         t.ifError(err);
         t.end();
@@ -99,7 +99,7 @@ test('setup: CACHEDIR (' + CACHEDIR + ')', function (t) {
     mkdirp(CACHEDIR, function (err) {
         t.ifError(err);
         t.end();
-    })
+    });
 });
 
 test('setup: cache test image manifest', function (t) {
@@ -119,7 +119,6 @@ test('setup: cache test image manifest', function (t) {
 });
 
 test('setup: cache test image file', function (t) {
-    var pth = format('%s/%s.file', CACHEDIR, TEST_IMAGE_UUID);
     fs.exists(CACHEFILE, function (exists) {
         if (!exists) {
             var cmd = format(
@@ -212,7 +211,8 @@ test('concurrent: imgadm install ... ' + TEST_IMAGE_UUID, function (t) {
         function installTheImage(who, next) {
             // TODO: capture this log and assert that there was some waiting
             //       on locks?
-            var cmd = format('imgadm install -m %s/%s.imgmanifest -f %s/%s.file',
+            var cmd = format(
+                'imgadm install -m %s/%s.imgmanifest -f %s/%s.file',
                 CACHEDIR, TEST_IMAGE_UUID, CACHEDIR, TEST_IMAGE_UUID);
             t.exec(cmd, function () {
                 t.exec('imgadm get ' + TEST_IMAGE_UUID, function () {
@@ -226,7 +226,7 @@ test('concurrent: imgadm install ... ' + TEST_IMAGE_UUID, function (t) {
                 t.end();
             });
         }
-    )
+    );
 });
 
 
@@ -257,7 +257,7 @@ test('concurrent: imgadm import ' + TEST_IMAGE_UUID, function (t) {
                 t.end();
             });
         }
-    )
+    );
 });
 
 
@@ -284,7 +284,8 @@ test('pre-downloaded file; imgadm import ' + TEST_IMAGE_UUID, function (t) {
         t.exec('imgadm -v import ' + TEST_IMAGE_UUID, function (err, o, e) {
             // Stderr has the imgadm log output. Look for the tell-tale sign
             // that the pre-downloaded image file was used.
-            var marker = /"msg":"using pre-downloaded image file/;
+            // The '.' instead of '"' is to make jsstyle happy.
+            var marker = /.msg.:.using pre-downloaded image file/;
             t.ok(marker.test(e), 'pre-downloaded image file was used');
             t.notOk(fs.existsSync(downFile));
             t.exec('imgadm get ' + TEST_IMAGE_UUID, function () {
@@ -304,14 +305,17 @@ test('setup6: remove image ' + TEST_IMAGE_UUID, function (t) {
 });
 
 // This is #2 pre-downloaded-image-file test. See above.
-test('pre-downloaded file (bad size); imgadm import ' + TEST_IMAGE_UUID, function (t) {
+test('pre-downloaded file (bad size); imgadm import ' + TEST_IMAGE_UUID,
+    function (t) {
+
     var wrongSizeFile = '/usr/img/package.json';
     var downFile = common.downloadFileFromUuid(TEST_IMAGE_UUID);
     t.exec(format('cp %s %s', wrongSizeFile, downFile), function () {
         t.exec('imgadm -v import ' + TEST_IMAGE_UUID, function (err, o, e) {
             // Stderr has the imgadm log output. Look for the tell-tale sign
             // that the pre-downloaded image file was discarded.
-            var marker = /"msg":"unexpected size for pre-downloaded image/;
+            // The '.' instead of '"' is to make jsstyle happy.
+            var marker = /.msg.:.unexpected size for pre-downloaded image/;
             t.ok(marker.test(e), 'pre-downloaded image file was discarded');
             t.notOk(fs.existsSync(downFile));
             t.exec('imgadm get ' + TEST_IMAGE_UUID, function () {
@@ -331,17 +335,21 @@ test('setup7: remove image ' + TEST_IMAGE_UUID, function (t) {
 });
 
 // This is #3 pre-downloaded-image-file test. See above.
-test('pre-downloaded file (bad checksum); imgadm import ' + TEST_IMAGE_UUID, function (t) {
+test('pre-downloaded file (bad checksum); imgadm import ' + TEST_IMAGE_UUID,
+    function (t) {
+
     // Copy in our cached file and change it (keeping same size):
     var downFile = common.downloadFileFromUuid(TEST_IMAGE_UUID);
     t.exec(format('cp %s %s', CACHEFILE, downFile), function () {
-    t.exec('echo -ne BLARG | dd conv=notrunc bs=1 count=5 of=' + downFile, function () {
+    t.exec('echo -ne BLARG | dd conv=notrunc bs=1 count=5 of=' + downFile,
+        function () {
 
         // Then test import with that bogus file there.
         t.exec('imgadm -v import ' + TEST_IMAGE_UUID, function (err, o, e) {
             // Stderr has the imgadm log output. Look for the tell-tale sign
             // that the pre-downloaded image file was discarded.
-            var marker = /"msg":"unexpected checksum for pre-downloaded image/;
+            // The '.' instead of '"' is to make jsstyle happy.
+            var marker = /.msg.:.unexpected checksum for pre-downloaded image/;
             t.ok(marker.test(e), 'pre-downloaded image file was discarded');
             t.notOk(fs.existsSync(downFile));
             t.exec('imgadm get ' + TEST_IMAGE_UUID, function () {
-- 
2.21.0

