From a4f5ab3e4594ca182c3af0ec11b40be9c6e08403 Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Tue, 29 Nov 2016 17:41:19 -0500
Subject: [PATCH] ./bin/triton -v -p test2 profile docker-setup

---
 lib/common.js                   | 16 ++++++---
 lib/do_profile/profilecommon.js | 64 ++++++---------------------------
 2 files changed, 21 insertions(+), 59 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index a0865c8..93f3b68 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -741,24 +741,30 @@ function promptPassphraseUnlockKey(opts, cb) {
 
 
 /*
- * A utility for the `triton` CLI subcommands to `init()`ialize the CLI's
+ * A utility for the `triton` CLI subcommands to `init()`ialize a
  * `tritonapi` instance and ensure that the profile's key is unlocked
- * (prompting on a TTY if necessary).
+ * (prompting on a TTY if necessary).  This is typically the CLI's
+ * `tritonapi` instance, but a `tritonapi` can also be passed in
+ * directly.
  *
  * @param opts.cli {Object}
+ * @param opts.tritonapi {Object}
  * @param cb {Function} `function (err)`
  */
 function cliSetupTritonApi(opts, cb) {
-    assert.object(opts.cli, 'opts.cli');
+    assert.optionalObject(opts.cli, 'opts.cli');
+    assert.optionalObject(opts.tritonapi, 'opts.tritonapi');
+    var tritonapi = opts.tritonapi || opts.cli.tritonapi;
+    assert.object(tritonapi, 'tritonapi');
 
-    opts.cli.tritonapi.init(function (initErr) {
+    tritonapi.init(function (initErr) {
         if (initErr) {
             cb(initErr);
             return;
         }
 
         promptPassphraseUnlockKey({
-            tritonapi: opts.cli.tritonapi
+            tritonapi: tritonapi
         }, function (keyErr) {
             cb(keyErr);
         });
diff --git a/lib/do_profile/profilecommon.js b/lib/do_profile/profilecommon.js
index d800685..168e021 100644
--- a/lib/do_profile/profilecommon.js
+++ b/lib/do_profile/profilecommon.js
@@ -153,17 +153,8 @@ function profileDockerSetup(opts, cb) {
     var profile = tritonapi.profile;
     var dockerHost;
 
-    vasync.pipeline({arg: {}, funcs: [
-        function initTritonApi(arg, next) {
-            tritonapi.init(function (err) {
-                if (err) {
-                    next(new errors.SetupError(err, format(
-                        'error initializing Triton API client')));
-                } else {
-                    next();
-                }
-            });
-        },
+    vasync.pipeline({arg: {tritonapi: tritonapi}, funcs: [
+        common.cliSetupTritonApi,
 
         function checkCloudapiStatus(arg, next) {
             tritonapi.cloudapi.ping({}, function (err, pong, res) {
@@ -233,52 +224,17 @@ function profileDockerSetup(opts, cb) {
 
         function mentionSettingUp(arg, next) {
             console.log('Setting up profile "%s" to use Docker.', profile.name);
+            //     console.log(wordwrap('\nWARNING: Docker does not
+            //         support ' + 'encrypted (password protected)
+            //         keys. If you continue, a ' + 'decrypted copy of
+            //         your SSH private key will be stored on ' +
+            //         'disk for with Docker.'));
             next();
         },
 
-        function findSshPrivKey(arg, next) {
-            var kr = new auth.KeyRing();
-            var fp = sshpk.parseFingerprint(profile.keyId);
-            kr.findSigningKeyPair(fp, function (err, kp) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                arg.keyPair = kp;
-                next();
-            });
-        },
-        function unlockSshPrivKey(arg, next) {
-            if (!arg.keyPair.isLocked()) {
-                next();
-                return;
-            }
-
-            console.log(wordwrap('\nWARNING: Docker does not support ' +
-                'encrypted (password protected) keys. If you continue, a ' +
-                'decrypted copy of your SSH private key will be stored on ' +
-                'disk for with Docker.'));
-            getpass.getPass({
-                prompt: 'Passphrase to decrypt SSH key'
-            }, function (err, pass) {
-                if (err) {
-                    next(new errors.SetupError(err, format(
-                        'error obtaining passphrase')));
-                    return;
-                }
-
-                try {
-                    arg.keyPair.unlock(pass);
-                } catch (err2) {
-                    next(new errors.SetupError(err2, format(
-                        'error decrypting key')));
-                }
-                next();
-            });
-        },
         function checkSshPrivKey(arg, next) {
             try {
-                arg.keyPair.getPrivateKey();
+                tritonapi.keyPair.getPrivateKey();
             } catch (e) {
                 next(new errors.SetupError(format('could not obtain SSH ' +
                     'private key for keypair with fingerprint "%s" ' +
@@ -349,7 +305,7 @@ function profileDockerSetup(opts, cb) {
         },
         function genClientCert_key(arg, next) {
             arg.keyPath = path.resolve(arg.dockerCertPath, 'key.pem');
-            var data = arg.keyPair.getPrivateKey().toBuffer('pkcs1');
+            var data = tritonapi.keyPair.getPrivateKey().toBuffer('pkcs1');
             fs.writeFile(arg.keyPath, data, function (err) {
                 if (err) {
                     next(new errors.SetupError(err, format(
@@ -362,7 +318,7 @@ function profileDockerSetup(opts, cb) {
         function genClientCert_cert(arg, next) {
             arg.certPath = path.resolve(arg.dockerCertPath, 'cert.pem');
 
-            var privKey = arg.keyPair.getPrivateKey();
+            var privKey = tritonapi.keyPair.getPrivateKey();
             var id = sshpk.identityFromDN('CN=' + profile.account);
             var cert = sshpk.createSelfSignedCertificate(id, privKey);
             var data = cert.toBuffer('pem');
-- 
2.21.0

