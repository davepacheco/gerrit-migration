From e80a310265533b282c3b3f5e87f077a66cc0c2fd Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly@kelly-mclaughlin.com>
Date: Thu, 10 Aug 2017 15:52:21 -0600
Subject: [PATCH] MANTA-3338 muskie leaked a connection

---
 lib/common.js | 15 ++++++++++++++-
 lib/server.js | 27 +++++++++++++++++----------
 2 files changed, 31 insertions(+), 11 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index b2d72ec..df3cbe9 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -452,8 +452,21 @@ function getMetadata(req, res, next) {
             }
         ]
     }, function (err, results) {
-        if (err)
+        if (err) {
+            /* An error occurred, but there may still be incoming data on the
+            *  request stream. Similar to the need for the call to resume() in
+            *  the sharkStreams function dump any remaining request data so the
+            *  stream emits an 'end' and the socket resources are not leaked.
+            *
+            *  Using _dump per the comments in http.js:
+            *      Call this instead of resume() if we want to just
+            *      dump all the data to /dev/null
+            *
+            *  Reference issue: MANTA-3338
+            */
+            req._dump();
             return (next(err));
+        }
 
         results.successes.forEach(function (r) {
             switch (r.op) {
diff --git a/lib/server.js b/lib/server.js
index e2056e4..85a06eb 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -122,17 +122,24 @@ function createServer(options, clearProxy) {
         var req = socket.parser && socket.parser.incoming;
         var res = socket._httpMessage;
 
-        if (req && req.complete && res) {
+        var dobj = req ? {
+            method: req.method,
+            url: req.url,
+            headers: req.headers,
+            id: req._id
+        } : {};
+
+        options.dtrace_probes.socket_timeout.fire(function onFire() {
+            return ([dobj]);
+        });
+
+        /* Destroy the socket in the following cases:
+         *     - No request object exists
+         *     - A request object exists, the request is complete, and a
+         *       _httpMessage object exists for the socket
+         */
+        if (!req || (req && req.complete && res)) {
             l.warn('socket timeout: destroying connection');
-            options.dtrace_probes.socket_timeout.fire(function onFire() {
-                var dobj = req ? {
-                    method: req.method,
-                    url: req.url,
-                    headers: req.headers,
-                    id: req._id
-                } : {};
-                return ([dobj]);
-            });
             socket.destroy();
         }
     });
-- 
2.21.0

