commit 0bea167b7604fc3c5ac39bb42c4b71ed63650c39 (refs/changes/43/2743/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-10-06T16:08:42-07:00 (2 years ago)
    
    ZAPI-801 fix test-vmapi to not attempt to use a non-running headnode for provision tests
    Reviewed by: Julien Gilli <julien.gilli@joyent.com>
    Approved by: Julien Gilli <julien.gilli@joyent.com>

diff --git a/test/vms.changefeed.test.js b/test/vms.changefeed.test.js
index 418f88e..a9b0ac9 100644
--- a/test/vms.changefeed.test.js
+++ b/test/vms.changefeed.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -181,19 +181,24 @@ exports.setUp = function (callback) {
     });
 };
 
-exports.find_headnode = function (t) {
-    client.cnapi.get('/servers', function (err, req, res, servers) {
+exports.find_server = function (t) {
+    client.cnapi.get({
+        path: '/servers',
+        query: {
+            headnode: true
+        }
+    }, function (err, req, res, servers) {
         common.ifError(t, err);
         t.equal(res.statusCode, 200, '200 OK');
         t.ok(servers, 'servers is set');
         t.ok(Array.isArray(servers), 'servers is Array');
         for (var i = 0; i < servers.length; i++) {
-            if (servers[i].headnode === true) {
+            if (servers[i].status === 'running') {
                 SERVER = servers[i];
                 break;
             }
         }
-        t.ok(SERVER, 'server found');
+        t.ok(SERVER, 'found a running headnode to use for test provisions');
         t.done();
     });
 };
@@ -219,6 +224,7 @@ exports.create_vm = function (t) {
     };
 
     var vm = {
+        alias: 'sdcvmapitest_create_vm',
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
@@ -312,7 +318,7 @@ exports.get_vm_ok = function (t) {
 
 exports.listen_for_alias = function (t) {
     t.expect(2);
-    VM.alias = 'listen_for_alias';
+    VM.alias = 'sdcvmapitest_listen_for_alias';
     var opts = { path: '/vms/' + VM.uuid + '?server_uuid=' + VM.server_uuid };
     var listener = changefeed.createListener(listenerOpts);
     listener.register();
@@ -601,7 +607,7 @@ exports.listen_for_destroy = function (t) {
 exports.put_new_vm = function (t) {
     t.expect(2);
     var vm = VM;
-    vm.alias = 'garbage' + uuid.create();
+    vm.alias = 'sdcvmapitest_garbage' + uuid.create();
     vm.uuid = uuid.create();
     var opts = { path: '/vms/' + vm.uuid };
 
@@ -619,7 +625,7 @@ exports.put_new_vm = function (t) {
 exports.put_new_vms = function (t) {
     t.expect(2);
     var vm = VM;
-    vm.alias = 'garbage' + uuid.create();
+    vm.alias = 'sdcvmapitest_garbage' + uuid.create();
     vm.uuid = uuid.create();
     var query = { server_uuid: SERVER.uuid };
     var opts = { path: '/vms', query: query };
@@ -655,6 +661,7 @@ exports.create_vm_that_fails_provisioning_workflow = function (t) {
     var nonExistentNetworkUuid = uuid.create();
     var testDone = false;
     var vmParams = {
+        alias: 'sdcvmapitest_vm_that_fails_provisioning_workflow',
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index 3f8e7f8..3ac7971 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 // var test = require('tap').test;
@@ -203,19 +203,24 @@ exports.setUp = function (callback) {
 };
 
 
-exports.find_headnode = function (t) {
-    client.cnapi.get('/servers', function (err, req, res, servers) {
+exports.find_server = function (t) {
+    client.cnapi.get({
+        path: '/servers',
+        query: {
+            headnode: true
+        }
+    }, function (err, req, res, servers) {
         common.ifError(t, err);
         t.equal(res.statusCode, 200, '200 OK');
         t.ok(servers, 'servers is set');
         t.ok(Array.isArray(servers), 'servers is Array');
         for (var i = 0; i < servers.length; i++) {
-            if (servers[i].headnode === true) {
+            if (servers[i].status === 'running') {
                 SERVER = servers[i];
                 break;
             }
         }
-        t.ok(SERVER, 'server found');
+        t.ok(SERVER, 'found a running headnode to use for test provisions');
         t.done();
     });
 };
diff --git a/tools/rsync-to b/tools/rsync-to
index ce906a1..a510662 100755
--- a/tools/rsync-to
+++ b/tools/rsync-to
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -36,12 +36,17 @@ rsync -av ${TOP}/ \
     $NODE:/zones/$VMAPI_ZONE/root/opt/smartdc/vmapi/ \
     $extraOpts \
     --exclude .git/ \
+    --exclude /boot/ \
     --exclude /config.json \
     --exclude /deps/ \
     --exclude /doc/ \
     --exclude /tools/ \
     --exclude /tmp/
 
+rsync -av ${TOP}/boot/ \
+    $NODE:/zones/$VMAPI_ZONE/root/opt/smartdc/boot/ \
+    $extraOpts
+
 state=$(ssh ${NODE} svcs -z ${VMAPI_ZONE} -H -o state vmapi)
 if [[ "$state" == "maintenance" ]]; then
     ssh ${NODE} svcadm -z ${VMAPI_ZONE} clear vmapi
