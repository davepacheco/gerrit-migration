From 0bcee8b4ba0d7ef8a801196ead7975f5d8b150a4 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Fri, 11 Aug 2017 23:31:58 +0000
Subject: [PATCH] joyent/node-vasync#35 pipeline does not pass rv-object to
 final callback joyent/node-vasync#36 should bump version and update
 changes.md

---
 CHANGES.md        |  11 ++++
 lib/vasync.js     |  20 ++++---
 package.json      |   2 +-
 tests/pipeline.js | 130 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 156 insertions(+), 7 deletions(-)
 create mode 100644 tests/pipeline.js

diff --git a/CHANGES.md b/CHANGES.md
index e25cb15..9cbf321 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,8 +4,19 @@
 
 None yet.
 
+## v2.1.0
+
+* #33 want filter, filterLimit, and filterSeries
+* #35 pipeline does not pass rv-object to final callback
+
+
 ## v2.0.0
 
+** WARNING
+
+Do not use this version (v2.0.0), as it has broken pipeline and forEachPipeline
+functions.
+
 **Breaking Changes:**
 
 * The `waterfall` function's terminating callback no longer receives a
diff --git a/lib/vasync.js b/lib/vasync.js
index b3b7f7e..5676310 100644
--- a/lib/vasync.js
+++ b/lib/vasync.js
@@ -162,7 +162,7 @@ function pipeline(args, callback)
 	    'callback': callback,
 	    'args': { impl: 'pipeline', uarg: args['arg'] },
 	    'stop_when': 'error',
-	    'res_type': 'values'
+	    'res_type': 'rv'
 	};
 	return (waterfall_impl(opts));
 }
@@ -641,7 +641,7 @@ function waterfall_impl(opts)
 	mod_assert.ok(arguments.length == 1,
 	    'Function "waterfall_impl" must take only 1 arg');
 	mod_assert.ok(opts.res_type === 'values' ||
-	    opts.res_type === 'array',
+	    opts.res_type === 'array' || opts.res_type == 'rv',
 	    '"opts.res_type" must either be "value" or "array"');
 	mod_assert.ok(opts.stop_when === 'error' ||
 	    opts.stop_when === 'success',
@@ -697,21 +697,27 @@ function waterfall_impl(opts)
 		    opts.args.impl === 'waterfall') {
 			args = Array.prototype.slice.call(arguments, 2);
 			res_key = 'results';
+			entry['results'] = args;
 		} else if (opts.args.impl === 'pipeline') {
 			args = [ opts.args.uarg ];
 			res_key = 'result';
+			entry['result'] = arguments[2];
 		}
 
 		mod_assert.equal(entry['status'], 'pending',
 		    'status should be pending');
 		entry['status'] = err ? 'fail' : 'ok';
 		entry['err'] = err;
-		entry[res_key] = args;
 
-		if (err)
+		if (err) {
 			rv['nerrors']++;
-		else
-			rv['successes'].push(args);
+		} else {
+			if (opts.args.impl === 'pipeline') {
+				rv['successes'].push(entry[res_key]);
+			} else {
+				rv['successes'].push(args);
+			}
+		}
 
 		if ((opts.stop_when === 'error' && err) ||
 		    (opts.stop_when === 'success' &&
@@ -725,6 +731,8 @@ function waterfall_impl(opts)
 					callback.apply(null, args);
 				} else if (opts.res_type === 'array') {
 					callback(err, args);
+				} else if (opts.res_type === 'rv') {
+					callback(err, rv);
 				}
 			}
 		} else {
diff --git a/package.json b/package.json
index 7f7adb9..cf4acb2 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
 	"name": "vasync",
-	"version": "2.0.0",
+	"version": "2.1.0",
 	"description": "utilities for observable asynchronous control flow",
 	"main": "./lib/vasync.js",
 	"repository": {
diff --git a/tests/pipeline.js b/tests/pipeline.js
new file mode 100644
index 0000000..244e6b7
--- /dev/null
+++ b/tests/pipeline.js
@@ -0,0 +1,130 @@
+/*
+ * Tests the "pipeline" primitive.
+ */
+
+var mod_tap = require('tap');
+var mod_vasync = require('..');
+
+var count = 0;
+var st;
+
+mod_tap.test('empty pipeline', function (test) {
+	st = mod_vasync.pipeline({'funcs': [], 'arg': null}, function (err) {
+		test.ok(err === null);
+		test.ok(st.ndone === 0);
+		test.ok(st.nerrors === 0);
+		test.ok(st.operations.length === 0);
+		test.ok(st.successes.length === 0);
+		test.equal(count, 1);
+		test.end();
+	});
+	count++;
+	test.ok(st.ndone === 0);
+	test.ok(st.nerrors === 0);
+	test.ok(st.operations.length === 0);
+	test.ok(st.successes.length === 0);
+});
+
+mod_tap.test('normal 4-stage pipeline', function (test) {
+	count = 0;
+	st = mod_vasync.pipeline({'funcs': [
+		function func1(_, cb) {
+			test.equal(st.successes[0], undefined,
+				'func1: successes');
+			test.ok(count === 0, 'func1: count === 0');
+			test.ok(st.ndone === 0);
+			count++;
+			setTimeout(cb, 200, null, count);
+		},
+		function func2(_, cb) {
+			test.equal(st.successes[0], 1, 'func2: successes');
+			test.ok(count == 1, 'func2: count == 1');
+			test.ok(st.ndone === 1);
+			test.ok(st.operations[0].status == 'ok');
+			test.ok(st.operations[1].status == 'pending');
+			test.ok(st.operations[2].status == 'waiting');
+			count++;
+			setTimeout(cb, 200, null, count);
+		},
+		function (_, cb) {
+			test.equal(st.successes[0], 1, 'func3: successes');
+			test.equal(st.successes[1], 2, 'func3: successes');
+			test.ok(count == 2, 'func3: count == 2');
+			test.ok(st.ndone === 2);
+			count++;
+			setTimeout(cb, 200, null, count);
+		},
+		function func4(_, cb) {
+			test.equal(st.successes[0], 1, 'func4: successes');
+			test.equal(st.successes[1], 2, 'func4: successes');
+			test.equal(st.successes[2], 3, 'func4: successes');
+			test.ok(count == 3, 'func4: count == 3');
+			test.ok(st.ndone === 3);
+			count++;
+			setTimeout(cb, 200, null, count);
+		}
+	]}, function (err, result) {
+		test.ok(count == 4, 'final: count == 4');
+		test.ok(err === null, 'no error');
+		test.ok(result === st);
+		test.equal(result, st, 'final-cb: st == result');
+		test.equal(st.successes[0], 1, 'final-cb: successes');
+		test.equal(st.successes[1], 2, 'final-cb: successes');
+		test.equal(st.successes[2], 3, 'final-cb: successes');
+		test.equal(st.successes[3], 4, 'final-cb: successes');
+		test.ok(st.ndone === 4);
+		test.ok(st.nerrors === 0);
+		test.ok(st.operations.length === 4);
+		test.ok(st.successes.length === 4);
+		test.ok(st.operations[0].status == 'ok');
+		test.ok(st.operations[1].status == 'ok');
+		test.ok(st.operations[2].status == 'ok');
+		test.ok(st.operations[3].status == 'ok');
+		test.end();
+	});
+	test.ok(st.ndone === 0);
+	test.ok(st.nerrors === 0);
+	test.ok(st.operations.length === 4);
+	test.ok(st.operations[0].funcname == 'func1', 'func1 name');
+	test.ok(st.operations[0].status == 'pending');
+	test.ok(st.operations[1].funcname == 'func2', 'func2 name');
+	test.ok(st.operations[1].status == 'waiting');
+	test.ok(st.operations[2].funcname == '(anon)', 'anon name');
+	test.ok(st.operations[2].status == 'waiting');
+	test.ok(st.operations[3].funcname == 'func4', 'func4 name');
+	test.ok(st.operations[3].status == 'waiting');
+	test.ok(st.successes.length === 0);
+});
+
+mod_tap.test('bailing out early', function (test) {
+	count = 0;
+	st = mod_vasync.pipeline({'funcs': [
+		function func1(_, cb) {
+			test.ok(count === 0, 'func1: count === 0');
+			count++;
+			setTimeout(cb, 200, null, count);
+		},
+		function func2(_, cb) {
+			test.ok(count == 1, 'func2: count == 1');
+			count++;
+			setTimeout(cb, 200, new Error('boom!'));
+		},
+		function func3(_, cb) {
+			test.ok(count == 2, 'func3: count == 2');
+			count++;
+			setTimeout(cb, 200, null, count);
+		}
+	]}, function (err, result) {
+		test.ok(count == 2, 'final: count == 3');
+		test.equal(err.message, 'boom!');
+		test.ok(result === st);
+		test.equal(result, st, 'final-cb: st == result');
+		test.ok(st.ndone == 2);
+		test.ok(st.nerrors == 1);
+		test.ok(st.operations[0].status == 'ok');
+		test.ok(st.operations[1].status == 'fail');
+		test.ok(st.operations[2].status == 'waiting');
+		test.ok(st.successes.length == 1);
+		test.end();
+	});
+});
-- 
2.21.0

