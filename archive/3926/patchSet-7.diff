From 62a0f300292c12d2fec412530c9834d4c2826862 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 28 May 2018 09:53:06 -0700
Subject: [PATCH] TRITON-375 node-moray should expose similar metrics to moray
 server Reviewed by: David Pacheco <dap@joyent.com>

---
 CHANGES.md             |  4 ++
 bin/delbucket          |  3 +-
 bin/delmany            |  3 +-
 bin/delobject          |  3 +-
 bin/findobjects        |  3 +-
 bin/getbucket          |  3 +-
 bin/getobject          |  3 +-
 bin/gettokens          |  3 +-
 bin/listbuckets        |  3 +-
 bin/morayping          |  3 +-
 bin/morayversion       |  3 +-
 bin/putbucket          |  3 +-
 bin/putobject          |  3 +-
 bin/reindexobjects     |  4 +-
 bin/sql                |  3 +-
 bin/updatemany         |  3 +-
 docs/man/man3/moray.md |  7 +++-
 lib/client.js          |  9 ++++-
 lib/cmd.js             | 89 +++++++++++++++++++++++++++++++++---------
 lib/fast_connection.js | 11 ++++--
 man/man3/moray.3       | 23 ++++++++++-
 package.json           |  5 ++-
 22 files changed, 153 insertions(+), 41 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 1801bb9..9365f96 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # Changelog
 
+## v3.5.0
+
+* [TRITON-375](http://smartos.org/bugview/TRITON-375) node-moray should expose similar metrics to moray server
+
 ## v3.4.2
 
 * [MORAY-455](http://smartos.org/bugview/MORAY-455) moray asks fast to hold onto too many recent RPC requests
diff --git a/bin/delbucket b/bin/delbucket
index 1df4abd..0533926 100755
--- a/bin/delbucket
+++ b/bin/delbucket
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -44,6 +44,7 @@ client.on('connect', function onConnect() {
             cmdutil.fail(err);
         }
 
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/delmany b/bin/delmany
index 951af26..d60e03c 100755
--- a/bin/delmany
+++ b/bin/delmany
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -75,6 +75,7 @@ client.on('connect', function onConnect() {
         }
 
         console.log(meta.count + ' records deleted');
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/delobject b/bin/delobject
index 6334197..b357304 100755
--- a/bin/delobject
+++ b/bin/delobject
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -48,6 +48,7 @@ client.on('connect', function onConnect() {
             cmdutil.fail(err);
         }
 
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/findobjects b/bin/findobjects
index 7f18989..c0140d0 100755
--- a/bin/findobjects
+++ b/bin/findobjects
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -116,6 +116,7 @@ client.on('connect', function onConnect() {
     });
 
     req.on('end', function () {
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/getbucket b/bin/getbucket
index 8597bee..0649faa 100755
--- a/bin/getbucket
+++ b/bin/getbucket
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -53,6 +53,7 @@ client.on('connect', function onConnect() {
         });
 
         console.log(JSON.stringify(b, null, 2));
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/getobject b/bin/getobject
index b5b6e89..76946f9 100755
--- a/bin/getobject
+++ b/bin/getobject
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -75,6 +75,7 @@ client.on('connect', function onConnect() {
             console.log(JSON.stringify(obj));
         }
 
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/gettokens b/bin/gettokens
index 5c5ee5c..3f135df 100755
--- a/bin/gettokens
+++ b/bin/gettokens
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -41,6 +41,7 @@ client.on('connect', function onConnect() {
         }
 
         console.log(JSON.stringify(b, null, 2));
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/listbuckets b/bin/listbuckets
index f3e9a1b..2565c22 100755
--- a/bin/listbuckets
+++ b/bin/listbuckets
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -48,6 +48,7 @@ client.on('connect', function onConnect() {
         });
 
         console.log(JSON.stringify(b, null, 2));
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/morayping b/bin/morayping
index 39ca052..0d1d9b8 100755
--- a/bin/morayping
+++ b/bin/morayping
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -57,6 +57,7 @@ client.on('connect', function onConnect() {
             cmdutil.fail(err);
         }
 
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/morayversion b/bin/morayversion
index aa065a0..9b4cd91 100755
--- a/bin/morayversion
+++ b/bin/morayversion
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -40,6 +40,7 @@ client.on('connect', function onConnect() {
         }
 
         console.log(data);
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/putbucket b/bin/putbucket
index d82f7c3..175970f 100755
--- a/bin/putbucket
+++ b/bin/putbucket
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -58,6 +58,7 @@ function putBucket() {
             if (err) {
                 cmdutil.fail(err);
             }
+            moraycli.cliFinish(cmdutil, client);
             client.close();
         });
     });
diff --git a/bin/putobject b/bin/putobject
index d40af27..5893b09 100755
--- a/bin/putobject
+++ b/bin/putobject
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -71,6 +71,7 @@ client.on('connect', function onConnect() {
             cmdutil.fail(err);
         }
 
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/reindexobjects b/bin/reindexobjects
index 4f8eb9b..0ba6ed2 100755
--- a/bin/reindexobjects
+++ b/bin/reindexobjects
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -57,6 +57,7 @@ client.on('connect', function onConnect() {
         if (!bucketinfo.reindex_active ||
             Object.keys(bucketinfo.reindex_active).length === 0) {
             console.error('bucket "%s": no reindexing required', bucket);
+            moraycli.cliFinish(cmdutil, client);
             client.close();
         } else {
             reindexLoop(function (err2) {
@@ -64,6 +65,7 @@ client.on('connect', function onConnect() {
                     cmdutil.fail(err2);
                 }
 
+                moraycli.cliFinish(cmdutil, client);
                 client.close();
             });
         }
diff --git a/bin/sql b/bin/sql
index 4656c0c..3d30f23 100755
--- a/bin/sql
+++ b/bin/sql
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -49,6 +49,7 @@ client.on('connect', function onConnect() {
     });
 
     req.once('end', function () {
+        moraycli.cliFinish(cmdutil, client);
         client.close();
     });
 });
diff --git a/bin/updatemany b/bin/updatemany
index 91e024d..a8ab267 100755
--- a/bin/updatemany
+++ b/bin/updatemany
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var cmdutil = require('cmdutil');
@@ -76,6 +76,7 @@ client.on('connect', function onConnect() {
             }
 
             console.log(meta);
+            moraycli.cliFinish(cmdutil, client);
             client.close();
         });
 });
diff --git a/docs/man/man3/moray.md b/docs/man/man3/moray.md
index 4ddab86..1e4b95e 100644
--- a/docs/man/man3/moray.md
+++ b/docs/man/man3/moray.md
@@ -1,4 +1,4 @@
-# moray 3 "January 2017" Moray "Moray Client Library"
+# moray 3 "May 2018" Moray "Moray Client Library"
 
 ## NAME
 
@@ -205,6 +205,11 @@ All constructor invocations must also provide one of the following:
 
 Callers may also provide:
 
+`collector` (object)
+  An [artedi](https://github.com/joyent/node-artedi) metrics collector. This
+  will be passed to the underlying node-fast component which will add metrics
+  for count and duration of RPC calls.
+
 `cueballOptions` (object)
   Overrides cueball-related options, including various timeouts and delays.
   For specific options that can be overridden here, see the source.  **NOTE:
diff --git a/lib/client.js b/lib/client.js
index 1a2a6da..c2c08f0 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -81,6 +81,7 @@ function MorayClient(options) {
     EventEmitter.call(this);
 
     assert.object(options, 'options');
+    assert.optionalObject(options.collector, 'options.collector');
     assert.object(options.log, 'options.log');
     assert.optionalBool(options.unwrapErrors, 'options.unwrapErrors');
     assert.optionalBool(options.failFast, 'options.failFast');
@@ -108,6 +109,11 @@ function MorayClient(options) {
 
     this.log.debug(coptions, 'init');
 
+    /* Optional artedi metrics collector that we'll pass to fast, if set. */
+    if (options.collector) {
+        this.collector = options.collector;
+    }
+
     if (coptions.mode == 'srv') {
         resolverInput = cueballOptions.domain;
     } else {
@@ -327,6 +333,7 @@ MorayClient.prototype.createFastConnection =
 
     return (new FastConnection({
         'address': backend.address,
+        'collector': this.collector,
         'port': backend.port,
         'nRecentRequests': fastNRecentRequests,
         'tcpKeepAliveInitialDelay': dflClientTcpKeepAliveIdle,
diff --git a/lib/cmd.js b/lib/cmd.js
index 5cdbe0b..2f3373a 100644
--- a/lib/cmd.js
+++ b/lib/cmd.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -17,6 +17,7 @@
  * exit.
  */
 
+var artedi = require('artedi');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var getopt = require('posix-getopt');
@@ -27,15 +28,51 @@ var VError = require('verror');
 var fprintf = require('extsprintf').fprintf;
 
 /* Option string for options common to all commands */
-var commonOptStr = 'b:(bootstrap-domain)h:(host)p:(port)S:(service)v';
+var commonOptStr = 'Ab:(bootstrap-domain)h:(host)p:(port)S:(service)v';
 
 /*
- * Currently, we only export parseCliOptions().  If we find we need more (or
- * less) fine-grained control over option parsing or general CLI execution, we
- * can provide higher or lower-level interfaces here.
+ * Currently, we only export parseCliOptions() and cliFinish().  If we find we
+ * need more (or less) fine-grained control over option parsing or general CLI
+ * execution, we can provide higher or lower-level interfaces here.
  */
+exports.cliFinish = cliFinish;
 exports.parseCliOptions = parseCliOptions;
-exports.commonUsage = '[-b domain] [-h host] [-p port] [-S service] [-v]';
+exports.commonUsage = '[-A] [-b domain] [-h host] [-p port] [-S service] [-v]';
+
+/*
+ * Output artedi metrics if the -A flag was passed.  This function is run after
+ * handling requests for each of the cmdline tools.  It will be passed the moray
+ * client object, and if that client has a collector attached (which would be
+ * added when -A was passed on the cmdline) it will write the artedi metrics to
+ * stderr.
+ *
+ * It does not provide a return value.
+ *
+ * Named arguments:
+ *
+ *  cmdutil         A node-cmdutil object with a .fail() method.
+ *                  cmdutil.fail(err) will be called if there are errors
+ *                  collecting metrics.
+ *
+ *  client          Moray client object.
+ *
+ */
+function cliFinish(cmdutil, client) {
+    assert.object(client, 'client');
+    assert.optionalObject(client.collector, 'client.collector');
+
+    if (client.collector) {
+        client.collector.collect(artedi.FMT_PROM,
+            function _outputMetrics(err, metrics) {
+                if (err) {
+                    cmdutil.fail(err);
+                    return;
+                }
+                console.error('[artedi metrics]');
+                console.error(metrics);
+            });
+    }
+}
 
 /*
  * Parse command-line options and common environment variables.  This function
@@ -83,6 +120,7 @@ exports.commonUsage = '[-b domain] [-h host] [-p port] [-S service] [-v]';
  * each instance of the "-v" option.
  */
 function parseCliOptions(args) {
+    var cmdName = path.basename(args.argv[1]);
     var parser, option, commonOpts, shortOpts;
 
     assert.object(args, 'args');
@@ -102,7 +140,7 @@ function parseCliOptions(args) {
 
     if (!args.clientOptions.log) {
         args.clientOptions.log = bunyan.createLogger({
-            'name': path.basename(args.argv[1]),
+            'name': cmdName,
             'level': (args.env.LOG_LEVEL || 'fatal'),
             'stream': process.stderr,
             'serializers': bunyan.stdSerializers
@@ -132,13 +170,14 @@ function parseCliOptions(args) {
     parser = new getopt.BasicParser(commonOptStr + args.extraOptStr, args.argv);
     while ((option = parser.getopt()) !== undefined) {
         switch (option.option) {
+        case 'A':
         case 'b':
         case 'h':
         case 'p':
         case 'S':
         case 'v':
             if (!parseCommonCliOption(args.errstream,
-                args.clientOptions, option)) {
+                args.clientOptions, { cmdName: cmdName }, option)) {
                 args.onUsage();
             }
             break;
@@ -176,29 +215,43 @@ function parseCliOptions(args) {
  * Parses one of the command-line options that's common to several commands.
  * See the option string at the top of this file.
  *
- * "options" is an object in which we're building the Moray client
- * configuration.  "option" is a node-getopt option object.
+ * "clientOpts" is an object in which we're building the Moray client
+ * configuration.
+ *
+ * "options" is an object with options for this function.  Currently only
+ * supports the string options.cmdName, which represents the name of the tool
+ * that is currently running for the cmdName label on artedi metrics.
+ *
+ * "option" is a node-getopt option object.
  *
  * If there is an error, prints an error message and returns false.
  */
-function parseCommonCliOption(errstream, options, option) {
+function parseCommonCliOption(errstream, clientOpts, options, option) {
     var p, log;
 
     assert.object(errstream, 'errstream');
+    assert.object(clientOpts, 'clientOpts');
     assert.object(options, 'options');
+    assert.string(options.cmdName, 'options.cmdName');
     assert.object(option, 'option');
 
     switch (option.option) {
+    case 'A':
+        clientOpts.collector = artedi.createCollector({labels: {
+            cmdName: options.cmdName
+        }});
+        break;
+
     case 'b':
-        if (!options.hasOwnProperty('cueballOptions')) {
-            options.cueballOptions = {};
+        if (!clientOpts.hasOwnProperty('cueballOptions')) {
+            clientOpts.cueballOptions = {};
         }
 
-        options.cueballOptions.resolvers = [ option.optarg ];
+        clientOpts.cueballOptions.resolvers = [ option.optarg ];
         break;
 
     case 'h':
-        options.host = option.optarg;
+        clientOpts.host = option.optarg;
         break;
 
     case 'p':
@@ -207,7 +260,7 @@ function parseCommonCliOption(errstream, options, option) {
             fprintf(errstream, '-p/--port: expected valid TCP port\n');
             return (false);
         }
-        options.port = p;
+        clientOpts.port = p;
         break;
 
     case 'S':
@@ -215,7 +268,7 @@ function parseCommonCliOption(errstream, options, option) {
             return (false);
         }
 
-        options.srvDomain = option.optarg;
+        clientOpts.srvDomain = option.optarg;
         break;
 
     case 'v':
@@ -223,7 +276,7 @@ function parseCommonCliOption(errstream, options, option) {
          * This allows "-v" to be used multiple times and ensures that we
          * never wind up at a level less than TRACE.
          */
-        log = options.log;
+        log = clientOpts.log;
         log.level(Math.max(bunyan.TRACE, (log.level() - 10)));
         if (log.level() <= bunyan.DEBUG)
             log = log.child({src: true});
diff --git a/lib/fast_connection.js b/lib/fast_connection.js
index d9d8781..8b57811 100644
--- a/lib/fast_connection.js
+++ b/lib/fast_connection.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -28,6 +28,9 @@ module.exports = FastConnection;
  *     address                  IPv4 or IPv6 address, interpreted by
  *     (string)                 net.createConnection().
  *
+ *     collector                Artedi metric collector, used by node-fast to
+ *     (object)                 provide fast client metrics. [optional]
+ *
  *     port                     TCP port, used for net.createConnection().
  *     (number)
  *
@@ -43,6 +46,7 @@ module.exports = FastConnection;
 function FastConnection(args) {
     assert.object(args, 'args');
     assert.string(args.address, 'args.address');
+    assert.optionalObject(args.collector, 'args.collector');
     assert.number(args.port, 'args.port');
     assert.object(args.log, 'args.log');
     assert.number(args.nRecentRequests, 'args.nRecentRequests');
@@ -60,9 +64,10 @@ function FastConnection(args) {
     this.fc_sock = net.createConnection(args.port, args.address);
     this.fc_destroyed = false;
     this.fc_fast = new fast.FastClient({
+        'collector': args.collector, /* Optional: artedi metrics collector */
+        'log': args.log,
         'nRecentRequests': args.nRecentRequests,
-        'transport': this.fc_sock,
-        'log': args.log
+        'transport': this.fc_sock
     });
 
     /*
diff --git a/man/man3/moray.3 b/man/man3/moray.3
index f32f7f7..2670b51 100644
--- a/man/man3/moray.3
+++ b/man/man3/moray.3
@@ -1,4 +1,4 @@
-.TH moray 3 "January 2017" Moray "Moray Client Library"
+.TH moray 3 "May 2018" Moray "Moray Client Library"
 .SH NAME
 .PP
 moray \- Node.js client library for Moray
@@ -233,6 +233,11 @@ Like \fB\fCURL\fR, but specified using different properties.
 .PP
 Callers may also provide:
 .TP
+\fB\fCcollector\fR (object)
+An artedi \[la]https://github.com/joyent/node-artedi\[ra] metrics collector. This
+will be passed to the underlying node\-fast component which will add metrics
+for count and duration of RPC calls.
+.TP
 \fB\fCcueballOptions\fR (object)
 Overrides cueball\-related options, including various timeouts and delays.
 For specific options that can be overridden here, see the source.  \fBNOTE:
@@ -266,6 +271,22 @@ VError.findCauseByName() instead.
 If true, then cause the program to crash if it would otherwise exit 0 and
 this client has not been closed.  This is useful for making sure that client
 consumers clean up after themselves.
+.TP
+\fB\fCrequireIndexes\fR (boolean)
+If true, all \fB\fCfindObjects\fR requests sent from this client will respond with a
+\fB\fCNotIndexedError\fR error if at least one of the fields included in the search
+filter has an index that can't be used.
+.IP
+If the server that handles a given \fB\fCfindObjects\fR request does not support
+checking that search fields have usable indexes, an \fB\fCUnhandledOptionsError\fR
+event will be emitted. In this case, the error object will have a property
+named \fB\fCunhandledOptions\fR whose value is an array of strings that will contain
+the string \fB\fC\&'requireIndexes'\fR, to represent that this option wasn't handled by
+the moray server that served the \fB\fCfindObjects\fR request.
+.IP
+Passing \fB\fCrequireIndexes: false\fR to any \fB\fCfindObjects\fR request will disable this
+behavior for that specific request, regardless of the value of the
+\fB\fCrequireIndexes\fR option passed when instantiating the client.
 .PP
 Some legacy options are accepted as documented in the source.
 .SH ENVIRONMENT
diff --git a/package.json b/package.json
index 4f4282c..276aba8 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray",
     "description": "Moray client library",
-    "version": "3.4.2",
+    "version": "3.5.0",
     "author": "Joyent (joyent.com)",
     "keywords": [ "moray" ],
     "main": "./lib/index.js",
@@ -10,13 +10,14 @@
         "url": "git+ssh://git@github.com:joyent/node-moray.git"
     },
     "dependencies": {
+        "artedi": "1.3.0",
         "assert-plus": "^1.0.0",
         "backoff": "^2.4.1",
         "bunyan": "^1.3.2",
         "cmdutil": "^1.1.0",
         "cueball": "^2.3.0",
         "extsprintf": "^1.3.0",
-        "fast": "^2.1.0",
+        "fast": "^2.5.0",
         "libuuid": "0.2.1",
         "jsprim": "^1.3.0",
         "posix-getopt": "^1.0.0",
-- 
2.21.0

