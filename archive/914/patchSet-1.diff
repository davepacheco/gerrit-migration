commit 45b47dfad8f637a0e5c434ee9f1d76be766cc9b6 (refs/changes/14/914/1)
Author: Yang Yong <yy1111.yang@samsung.com>
Date:   2016-11-17T16:52:01+09:00 (2 years, 11 months ago)
    
    joyent/node-triton#80 would be nice if `triton network list public=false` worked

diff --git a/lib/do_network/do_list.js b/lib/do_network/do_list.js
index b3bd3c9..db9da60 100644
--- a/lib/do_network/do_list.js
+++ b/lib/do_network/do_list.js
@@ -13,6 +13,8 @@
 var tabula = require('tabula');
 
 var common = require('../common');
+var vasync = require('vasync');
+var errors = require('../errors');
 
 // to be passed as query string args to /my/networks
 var validFilters = [
@@ -35,9 +37,6 @@ function do_list(subcmd, opts, args, callback) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], callback);
         return;
-    } else if (args.length !== 0) {
-        callback(new Error('invalid args: ' + args));
-        return;
     }
 
     var columns = columnsDefault;
@@ -56,22 +55,49 @@ function do_list(subcmd, opts, args, callback) {
             return;
         }
 
-        if (opts.json) {
-            common.jsonStream(networks);
-        } else {
-            for (var i = 0; i < networks.length; i++) {
-                var net = networks[i];
-                net.shortid = net.id.split('-', 1)[0];
-                net.vlan = net.vlan_id;
+        vasync.pipeline({arg: {networks: networks, filters: args}, funcs: [
+            _filterNetworks,
+
+            function doneNetworks(arg, next) {
+                networks = arg.networks;
+                if (opts.json) {
+                    common.jsonStream(networks);
+                } else {
+                    for (var i = 0; i < networks.length; i++) {
+                        var net = networks[i];
+                        net.shortid = net.id.split('-', 1)[0];
+                        net.vlan = net.vlan_id;
+                    }
+                    tabula(networks, {
+                        skipHeader: opts.H,
+                        columns: columns,
+                        sort: sort
+                    });
+                }
+                next();
+            }
+        ]}, function (err1) {
+            if (err1) {
+                callback(err1);
+            } else {
+                callback();
             }
-            tabula(networks, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
+        });
+    });
+}
+
+function _filterNetworks(arg, next) {
+    var filters = arg.filters;
+
+    if (filters !== undefined && filters !== null && filters.length > 0) {
+        var query = String(filters).split('=');
+        if (query[0] === 'public') {
+            arg.networks = arg.networks.filter(function (row) {
+                return String(row.public) === query[1];
             });
         }
-        callback();
-    });
+    }
+    next();
 }
 
 do_list.options = [
