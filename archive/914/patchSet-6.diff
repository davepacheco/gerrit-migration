commit 1e0bbd046f1f3198c85eda4357ff26fec9b3fa53 (refs/changes/14/914/6)
Author: Yang Yong <yy1111.yang@samsung.com>
Date:   2016-12-21T10:46:13+09:00 (2 years, 10 months ago)
    
    joyent/node-triton#80 would be nice if `triton network list public=false` worked

diff --git a/lib/do_network/do_list.js b/lib/do_network/do_list.js
index 7cc963c..1a872c0 100644
--- a/lib/do_network/do_list.js
+++ b/lib/do_network/do_list.js
@@ -13,13 +13,12 @@
 var tabula = require('tabula');
 
 var common = require('../common');
+var vasync = require('vasync');
+var errors = require('../errors');
 
 // to be passed as query string args to /my/networks
 var validFilters = [
-    'id',
-    'name',
-    'public',
-    'description'
+    'public'
 ];
 
 // columns default without -o
@@ -32,12 +31,10 @@ var columnsDefaultLong = 'id,name,subnet,gateway,fabric,vlan,public';
 var sortDefault = 'name';
 
 function do_list(subcmd, opts, args, callback) {
+    var self = this.top;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], callback);
         return;
-    } else if (args.length !== 0) {
-        callback(new Error('invalid args: ' + args));
-        return;
     }
 
     var columns = columnsDefault;
@@ -49,33 +46,82 @@ function do_list(subcmd, opts, args, callback) {
     columns = columns.split(',');
 
     var sort = opts.s.split(',');
-    var tritonapi = this.top.tritonapi;
+    var filters;
+    try {
+        filters = common.kvToObj(args, validFilters);
+    } catch (e) {
+        callback(e);
+        return;
+    }
 
     common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
         if (setupErr) {
             callback(setupErr);
         }
-        tritonapi.cloudapi.listNetworks(function (err, networks) {
-            if (err) {
-                callback(err);
-                return;
-            }
 
-            if (opts.json) {
-                common.jsonStream(networks);
-            } else {
-                for (var i = 0; i < networks.length; i++) {
-                    var net = networks[i];
-                    net.shortid = net.id.split('-', 1)[0];
-                    net.vlan = net.vlan_id;
-                }
-                tabula(networks, {
-                    skipHeader: opts.H,
-                    columns: columns,
-                    sort: sort
+        vasync.pipeline({arg: {}, funcs: [
+            function searchNetworks(arg, next) {
+                self.tritonapi.cloudapi.listNetworks(function (err, networks) {
+                     if (err) {
+                         next(err);
+                         return;
+                     }
+                     arg.networks = networks;
+                     next();
                 });
+            },
+
+            function filterNetworks(arg, next) {
+                if (filters.hasOwnProperty('public')) {
+                    filters.public =
+                        common.boolFromString(filters.public, null, 'public');
+                }
+                // Then the filtering in 'filterNetworks'
+                // can more easily be generic. Something like:
+                var filteredNetworks = [];
+                var filterKeys = Object.keys(filters);
+                for (var i = 0; i < arg.networks.length; i++) {
+                    var network = arg.networks[i];
+                    var keepIt = true;
+                    for (var j = 0; j < filterKeys.length; j++) {
+                        var k = filterKeys[j];
+                        if (network[k] !== filters[k]) {
+                            keepIt = false;
+                            break;
+                        }
+                    }
+                    if (keepIt) {
+                        filteredNetworks.push(network);
+                    }
+                }
+                arg.filteredNetworks = filteredNetworks;
+                next();
+            },
+
+           function doneNetworks(arg, next) {
+                var networks = arg.filteredNetworks;
+                if (opts.json) {
+                    common.jsonStream(networks);
+                } else {
+                    for (var i = 0; i < networks.length; i++) {
+                        var net = networks[i];
+                        net.shortid = net.id.split('-', 1)[0];
+                        net.vlan = net.vlan_id;
+                    }
+                    tabula(networks, {
+                        skipHeader: opts.H,
+                        columns: columns,
+                        sort: sort
+                    });
+                }
+                next();
+            }
+        ]}, function (err1) {
+            if (err1) {
+                callback(err1);
+            } else {
+                 callback();
             }
-            callback();
         });
     });
 }
@@ -91,13 +137,16 @@ do_list.options = [
     sortDefault: sortDefault
 }));
 
-do_list.synopses = ['{{name}} {{cmd}}'];
+do_list.synopses = ['{{name}} {{cmd}} [FILTERS...]'];
 
 do_list.help = [
     'List available networks.',
     '',
     '{{usage}}',
     '',
+    'Filters:',
+    '    FIELD=true|false   Boolean filter. Supported fields: public',
+    '',
     '{{options}}',
     'Fields (most are self explanatory, the client adds some for convenience):',
     '    vlan       A shorter alias for "vlan_id".',
