From 433649abae69f1b59b9f5bf51ee88e1836d4e296 Mon Sep 17 00:00:00 2001
From: Yang Yong <yy1111.yang@samsung.com>
Date: Thu, 17 Nov 2016 13:56:17 +0900
Subject: [PATCH] joyent/node-triton#80 would be nice if `triton network list
 public=false` worked

---
 lib/do_network/do_list.js | 86 +++++++++++++++++++++++++++------------
 1 file changed, 60 insertions(+), 26 deletions(-)

diff --git a/lib/do_network/do_list.js b/lib/do_network/do_list.js
index b3bd3c9..ed43bf9 100644
--- a/lib/do_network/do_list.js
+++ b/lib/do_network/do_list.js
@@ -13,13 +13,12 @@
 var tabula = require('tabula');
 
 var common = require('../common');
+var vasync = require('vasync');
+var errors = require('../errors');
 
 // to be passed as query string args to /my/networks
 var validFilters = [
-    'id',
-    'name',
-    'public',
-    'description'
+    'public'
 ];
 
 // columns default without -o
@@ -32,12 +31,10 @@ var columnsDefaultLong = 'id,name,subnet,gateway,fabric,vlan,public';
 var sortDefault = 'name';
 
 function do_list(subcmd, opts, args, callback) {
+    var self = this.top;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], callback);
         return;
-    } else if (args.length !== 0) {
-        callback(new Error('invalid args: ' + args));
-        return;
     }
 
     var columns = columnsDefault;
@@ -50,27 +47,61 @@ function do_list(subcmd, opts, args, callback) {
 
     var sort = opts.s.split(',');
 
-    this.top.tritonapi.cloudapi.listNetworks(function (err, networks) {
-        if (err) {
-            callback(err);
-            return;
-        }
+    var listOpts;
+    try {
+        listOpts = common.kvToObj(args, validFilters);
+    } catch (e) {
+        callback(e);
+        return;
+    }
 
-        if (opts.json) {
-            common.jsonStream(networks);
-        } else {
-            for (var i = 0; i < networks.length; i++) {
-                var net = networks[i];
-                net.shortid = net.id.split('-', 1)[0];
-                net.vlan = net.vlan_id;
-            }
-            tabula(networks, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
+    vasync.pipeline({arg: {networks: ''}, funcs: [
+        function searchNetworks(arg, next) {
+            self.tritonapi.cloudapi.listNetworks(function (err, networks) {
+                 if (err) {
+                     next(err);
+                     return;
+                 }
+                 arg.networks = networks;
+                 next();
             });
+        },
+
+        function filterNetworks(arg, next) {
+           if (listOpts !== undefined && listOpts !== null) {
+               if (listOpts.public !== undefined && listOpts.public !== null) {
+                   arg.networks = arg.networks.filter(function (row) {
+                       return String(row.public) === listOpts.public;
+                   });
+               }
+           }
+            next();
+        },
+
+        function doneNetworks(arg, next) {
+            var networks = arg.networks;
+            if (opts.json) {
+                common.jsonStream(networks);
+            } else {
+                for (var i = 0; i < networks.length; i++) {
+                    var net = networks[i];
+                    net.shortid = net.id.split('-', 1)[0];
+                    net.vlan = net.vlan_id;
+                }
+                tabula(networks, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort
+                });
+            }
+            next();
+        }
+    ]}, function (err1) {
+        if (err1) {
+            callback(err1);
+        } else {
+             callback();
         }
-        callback();
     });
 }
 
@@ -85,7 +116,7 @@ do_list.options = [
     sortDefault: sortDefault
 }));
 
-do_list.synopses = ['{{name}} {{cmd}}'];
+do_list.synopses = ['{{name}} {{cmd}} [FILTERS...]'];
 
 do_list.help = [
     'List available networks.',
@@ -93,6 +124,9 @@ do_list.help = [
     '{{usage}}',
     '',
     '{{options}}',
+    'Filters:',
+    '    FIELD=true|false   Boolean filter. Supported fields: public',
+    '',
     'Fields (most are self explanatory, the client adds some for convenience):',
     '    vlan       A shorter alias for "vlan_id".',
     '    shortid    A short ID prefix.'
-- 
2.21.0

