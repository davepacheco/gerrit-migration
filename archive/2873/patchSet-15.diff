From e477860a48a5bccfda1e31793674fddd261189c5 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Thu, 26 Oct 2017 00:17:22 +0000
Subject: [PATCH] MANTA-3475 muskie should report 503 errors when moray hits
 its max queue length

---
 lib/errors.js       | 18 ++++++++++++++++--
 lib/server.js       | 10 +++++++++-
 test/errors.test.js | 34 ++++++++++++++++++++++++++++++++++
 3 files changed, 59 insertions(+), 3 deletions(-)
 create mode 100644 test/errors.test.js

diff --git a/lib/errors.js b/lib/errors.js
index 8e1e22d..8209c6d 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -574,11 +574,12 @@ function ResourceNotFoundError(p) {
 util.inherits(ResourceNotFoundError, MuskieError);
 
 
-function ServiceUnavailableError(req) {
+function ServiceUnavailableError(req, cause) {
     MuskieError.call(this, {
         restCode: 'ServiceUnavailable',
         statusCode: 503,
-        message: 'manta is unable to serve this request'
+        message: 'manta is unable to serve this request',
+        cause: cause
     });
 }
 util.inherits(ServiceUnavailableError, MuskieError);
@@ -638,6 +639,19 @@ function translateError(err, req) {
         return (err);
 
     var cause;
+
+    // A NoDatabasePeersError with a context object that has a 'name' and a
+    // 'msg' field sent from moray indicates a transient availability error
+    // due to request overload. We report these types of errors as 503s to
+    // indicate to the client that it can ameliorate the situation with
+    // sufficient back-off. A NoDatabasePeersError without a context object
+    // of this form still indicates an internal error (500) that should be
+    // investigated as a bug or other more serious problem in manta.
+    cause = VError.findCauseByName(err, 'NoDatabasePeersError');
+    if (cause !== null && cause.context && cause.context.name &&
+            cause.context.msg) {
+        return (new ServiceUnavailableError(req, new VError(cause.context)));
+    }
     cause = VError.findCauseByName(err, 'ObjectNotFoundError');
     if (cause !== null) {
         return (new restify.ResourceNotFoundError(cause,
diff --git a/lib/server.js b/lib/server.js
index b04eb4b..f99d646 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -12,6 +12,7 @@ var crypto = require('crypto');
 var fs = require('fs');
 var path = require('path');
 var url = require('url');
+var verror = require('verror');
 
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
@@ -185,26 +186,33 @@ function createServer(options, clearProxy) {
 
     server.use(function ensureDependencies(req, res, next) {
         var ok = true;
+        var errors = [];
 
         if (!options.picker()) {
+            errors.push(new Error('picker unavailable'));
             req.log.error('picker unavailable');
             ok = false;
         } else if (!options.moray()) {
+            errors.push(new Error('index moray unavailable'));
             req.log.error('index moray unavailable');
             ok = false;
         } else if (!options.mahi()) {
+            errors.push(new Error('mahi unavailable'));
             req.log.error('mahi unavailable');
             ok = false;
         } else if (!options.marlin()) {
+            errors.push(new Error('marlin available'));
             req.log.error('marlin unavailable');
             ok = !req.isMarlinRequest();
         } else if (!options.medusa()) {
+            errors.push(new Error('medusa unavailable'));
             req.log.error('medusa unavailable');
             ok = !req.isMedusaRequest();
         }
 
         if (!ok) {
-            next(new ServiceUnavailableError());
+            next(new ServiceUnavailableError(req,
+                        new verror.MultiError(errors)));
         } else {
             next();
         }
diff --git a/test/errors.test.js b/test/errors.test.js
new file mode 100644
index 0000000..76c7fbd
--- /dev/null
+++ b/test/errors.test.js
@@ -0,0 +1,34 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var _helper = __dirname + '/helper.js';
+if (require.cache[_helper])
+    delete require.cache[_helper];
+var helper = require(_helper);
+
+var util = require('util');
+var verror = require('verror');
+
+var errors = require('../lib/errors');
+
+var test = helper.test;
+
+test('ServiceUnavailableError', function (t) {
+    var cause = new Error('cause');
+    var err = new errors.ServiceUnavailableError(null, cause);
+
+    t.ok(err instanceof errors.MuskieError, 'error is a MuskieError');
+    t.equal(err.restCode, 'ServiceUnavailable');
+    t.equal(err.statusCode, 503);
+    t.equal(err.message, 'manta is unable to serve this request');
+    t.deepEqual(err.cause(), cause);
+
+    t.end();
+});
-- 
2.21.0

