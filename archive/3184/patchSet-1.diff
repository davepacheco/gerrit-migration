From 9451a447ff40db1a74c1c97c931629d2d96c5bbb Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Wed, 10 Jan 2018 10:53:54 -0500
Subject: [PATCH] Fix messed-up upstream of OS-6333/illumos#8927.

Restore conflicted files:
     usr/src/lib/libipsecutil/common/ipsec_util.c
     usr/src/test/os-tests/tests/pf_key/kmc-update.sh
     usr/src/test/os-tests/tests/pf_key/kmc-updater.c
     usr/src/uts/common/inet/ip/sadb.c

To re-include:
OS-6333 (commit 02ba530437bfbfdddf56de010d62a5ff453813ae)
OS-6480 (commit 9ba45b30b3b7aaeb1b63f85670403e6ea3a550eb)

NOTE: Source histories of those particular files lost illumos-joyent changes.
---
 usr/src/lib/libipsecutil/common/ipsec_util.c  |  18 ++-
 .../test/os-tests/tests/pf_key/kmc-update.sh  |  75 ++++++++-
 .../test/os-tests/tests/pf_key/kmc-updater.c  | 153 +++++++++++++-----
 usr/src/uts/common/inet/ip/sadb.c             |  18 ++-
 4 files changed, 215 insertions(+), 49 deletions(-)

diff --git a/usr/src/lib/libipsecutil/common/ipsec_util.c b/usr/src/lib/libipsecutil/common/ipsec_util.c
index 968d45fb24..b983e75e37 100644
--- a/usr/src/lib/libipsecutil/common/ipsec_util.c
+++ b/usr/src/lib/libipsecutil/common/ipsec_util.c
@@ -2602,23 +2602,31 @@ print_kmc(FILE *file, char *prefix, struct sadb_x_kmc *kmc)
 			cookie_label =
 			    dgettext(TEXT_DOMAIN, "<Label not found.>");
 		(void) fprintf(file, dgettext(TEXT_DOMAIN,
-		    "%sProtocol %u, cookie=\"%s\" (%u)\n"), prefix,
+		    "%s Protocol %u, cookie=\"%s\" (%u)\n"), prefix,
 		    kmc->sadb_x_kmc_proto, cookie_label,
 		    kmc->sadb_x_kmc_cookie);
 		return;
+	case SADB_X_KMP_KINK:
+		cookie_label = dgettext(TEXT_DOMAIN, "KINK:");
+		break;
 	case SADB_X_KMP_MANUAL:
-		cookie_label = dgettext(TEXT_DOMAIN, "Manual SA with cookie");
+		cookie_label = dgettext(TEXT_DOMAIN, "Manual SA with cookie:");
+		break;
+	case SADB_X_KMP_IKEV2:
+		cookie_label = dgettext(TEXT_DOMAIN, "IKEV2:");
 		break;
-	/* case SADB_X_KMP_IKEV2: */
 	default:
 		cookie_label =
 		    dgettext(TEXT_DOMAIN, "<unknown KM protocol>");
 		break;
 	}
 
-	/* XXX KEBE ASKS... htonll() on generic kmc_cookie? */
+	/*
+	 * Assume native-byte-order printing for now.  Exceptions (like
+	 * byte-swapping) should be handled in per-KM-protocol cases above.
+	 */
 	(void) fprintf(file, dgettext(TEXT_DOMAIN,
-	    "%sProtocol %u, cookie=\"%s\" (0x%"PRIx64"/%"PRIu64")\n"),
+	    "%s Protocol %u, cookie=\"%s\" (0x%"PRIx64"/%"PRIu64")\n"),
 	    prefix, kmc->sadb_x_kmc_proto, cookie_label,
 	    kmc->sadb_x_kmc_cookie64, kmc->sadb_x_kmc_cookie64);
 }
diff --git a/usr/src/test/os-tests/tests/pf_key/kmc-update.sh b/usr/src/test/os-tests/tests/pf_key/kmc-update.sh
index e716a3b6c6..a78df0f7dc 100644
--- a/usr/src/test/os-tests/tests/pf_key/kmc-update.sh
+++ b/usr/src/test/os-tests/tests/pf_key/kmc-update.sh
@@ -15,7 +15,7 @@
 # Copyright (c) 2017 Joyent, Inc.
 #
 
-if [ `id -u` -ne 0 ]; then
+if [[ `id -u` -ne 0 ]]; then
 	echo "Need to be root or have effective UID of root."
 	exit 255
 fi
@@ -30,15 +30,23 @@ fi
 # test (or not) cookie/cookie64 and the IKEv1 exception.
 #
 
-# Add two simple SAs.  Will delete them first, out of paranoia.
+SADB_X_KMP_KINK=2
+SADB_X_KMP_IKEV2=3
+COOKIE_IKEV2="0x111770171170"
+EINVAL=22
+
+# Add three simple SAs.  Will delete them first, out of paranoia.
 
 ipseckey 2>&1 >/dev/null <<EOF
 delete ah spi 0x2112 dst 127.0.0.1
 delete ah spi 0x5150 dst 127.0.0.1
+delete ah spi 0x6768 dst 127.0.0.1
 add ah spi 0x2112 dst 127.0.0.1 authalg md5 authkey \
 	1234567890abcdeffedcba0987654321
 add ah spi 0x5150 dst 127.0.0.1 authalg md5 authkey \
 	abcdef01234567890123456789abcdef
+add ah spi 0x6768 dst 127.0.0.1 authalg md5 authkey \
+	fedcbafedcba01234567890123456789
 EOF
 
 # Run programs to see if UPDATE on their KM cookies works.  Both test
@@ -54,6 +62,22 @@ if [[ $? != 0 ]]; then
 fi
 echo "Passed IKEv1 32-bit KMC test."
 
+# Test that once set, an IKEv1 KMC cannot be changed once set
+$TESTPATH/kmc-updater -e $EINVAL -k 0x12345 0x2112
+if [[ $? != 0 ]]; then
+    echo "IKEv1 32-bit KMC update test failed."
+    exit 1
+fi
+echo "Passed IKEv1 32-bit KMC update test."
+
+# Test that IKEv1 KMCs once set, cannot be changed to a different type
+$TESTPATH/kmc-updater -e $EINVAL -p $SADB_X_KMP_IKEV2 0x2112
+if [[ $? != 0 ]]; then
+    echo "IKEv1 32-bit KMC protocol update test failed."
+    exit 1
+fi
+echo "Passed IKEv1 32-bit KMC protocol update test."
+
 # Test a different one, using all 64-bits.
 $TESTPATH/kmc-updater 0x5150 64
 if [[ $? != 0 ]]; then
@@ -62,7 +86,54 @@ if [[ $? != 0 ]]; then
 fi
 echo "Passed 64-bit KMC test."
 
+# Test that non IKEv2 64-bit KMCs also cannot be changed once set
+$TESTPATH/kmc-updater -e $EINVAL -k "0x12345678abcdef" 0x5150 64
+if [[ $? != 0 ]]; then
+    echo "64-bit KMC update test failed."
+    exit 1
+fi
+echo "Passed 64-bit KMC update test."
+
+# Test that non-IKEv2 KMCs cannot be changed to a different type
+$TESTPATH/kmc-updater -e $EINVAL -p $SADB_X_KMP_IKEV2 0x5150 64
+if [[ $? != 0 ]]; then
+    echo "64-bit non-IKEv2 KMC protocol update test failed."
+    exit 1
+fi
+echo "Passed 64-bit non-IKEv2 KMC protocol update test."
+
+# Test allowing the update of IKEv2 KMCs
+$TESTPATH/kmc-updater -p $SADB_X_KMP_IKEV2 0x6768 64
+if [[ $? != 0 ]]; then
+    echo "Failed to set KMC for IKEV2 test."
+    exit 1
+fi
+$TESTPATH/kmc-updater -p $SADB_X_KMP_IKEV2 -k "$COOKIE_IKEV2" 0x6768 64
+if [[ $? != 0 ]]; then
+    echo "Failed to update IKEv2 KMC."
+    exit 1
+fi
+echo "Passed IKEv2 KMC test."
+
+# Test that IKEv2 KMCs cannot be changed to a different type
+$TESTPATH/kmc-updater -e $EINVAL -p $SADB_X_KMP_KINK -k "$COOKIE_IKEV2" \
+    0x6768 64
+if [[ $? != 0 ]]; then
+    echo "64-bit IKEv2 KMC protocol update test failed."
+    exit 1
+fi
+echo "Passed 64-bit IKEv2 KMC protocol update test."
+
+# Test that IKEv2 KMCs cannot be changed to a different type even w/ new KMC
+$TESTPATH/kmc-updater -e $EINVAL -p $SADB_X_KMP_KINK 0x6768 64
+if [[ $? != 0 ]]; then
+    echo "64-bit IKEv2 KMC protocol + KMC update test failed."
+    exit 1
+fi
+echo "Passed 64-bit IKEv2 KMC protocol + KMC update test."
+
 ipseckey delete ah spi 0x2112 dst 127.0.0.1
 ipseckey delete ah spi 0x5150 dst 127.0.0.1
+ipseckey delete ah spi 0x6768 dst 127.0.0.1
 
 exit 0
diff --git a/usr/src/test/os-tests/tests/pf_key/kmc-updater.c b/usr/src/test/os-tests/tests/pf_key/kmc-updater.c
index a36525b5f2..28fa3b36c4 100644
--- a/usr/src/test/os-tests/tests/pf_key/kmc-updater.c
+++ b/usr/src/test/os-tests/tests/pf_key/kmc-updater.c
@@ -21,45 +21,59 @@
 #include <unistd.h>
 #include <stdlib.h>
 #include <string.h>
+#include <ipsec_util.h>
 
 #define	COOKIE64 0xc0ffee4afee01deaULL
 #define	COOKIE32 0x90125
 #define	RESERVED 0xc0ffee
 
+#define	EXIT_SETUP_FAIL -1
+#define	EXIT_TEST_FAIL 1
+#define	EXIT_SUCCESS 0
+
 /*
  * Exits app on failure.
  */
 static void
 write_and_read(int s, sadb_msg_t *samsg, uint64_t *readbuf, int readlen,
-    char *msgtypestr)
+    int expected, char *msgtypestr)
 {
-	int rc;
+	ssize_t rc;
 	uint8_t msgtype = samsg->sadb_msg_type;
 	pid_t pid = samsg->sadb_msg_pid;
 	uint8_t seq = samsg->sadb_msg_seq;
 
 	rc = write(s, samsg, SADB_64TO8(samsg->sadb_msg_len));
 	if (rc == -1)
-		err(-1, "%s write error", msgtypestr);
+		err(EXIT_SETUP_FAIL, "%s write error", msgtypestr);
 
 	/* Yes, parameter re-use, but we're done writing. */
 	samsg = (sadb_msg_t *)readbuf;
 	do {
 		rc = read(s, readbuf, readlen);
 		if (rc == -1)
-			err(-1, "%s read reply error", msgtypestr);
+			err(EXIT_SETUP_FAIL, "%s read reply error", msgtypestr);
 	} while (samsg->sadb_msg_seq != seq || samsg->sadb_msg_pid != pid ||
 	    samsg->sadb_msg_type != msgtype);
 
-	if (samsg->sadb_msg_errno != 0) {
+	if (samsg->sadb_msg_errno != expected) {
 		errno = samsg->sadb_msg_errno;
-		err(-1, "%s reply has error (diag = %d)", msgtypestr,
-		    samsg->sadb_x_msg_diagnostic);
+		err(EXIT_SETUP_FAIL, "%s reply has error (diag = %d, %s)",
+		    msgtypestr, samsg->sadb_x_msg_diagnostic,
+		    keysock_diag(samsg->sadb_x_msg_diagnostic));
 	}
 }
 
+static void
+usage(const char *progname)
+{
+	(void) fprintf(stderr, "Usage: %s [-e expected_error] [-k kmc_value] "
+	    "[-p kmc_proto] <spi-value> [64]\n", progname);
+	exit(EXIT_SETUP_FAIL);
+}
+
 int
-main(int argc, char *argv[])
+main(int argc, char * const argv[])
 {
 	uint32_t spi;
 	sadb_ext_t *ext;
@@ -71,31 +85,85 @@ main(int argc, char *argv[])
 	uint64_t writebuf[20];		/* PF_KEY likes 64-bit alignment. */
 	uint64_t readbuf[128];
 	uint64_t *extptr, *endptr;
+	const char *cookiestr = NULL;
+	uint64_t cookie64 = COOKIE64;
+	uint32_t cookie32 = COOKIE32;
+	uint32_t reserved = RESERVED;
+	uint32_t proto = 0;
+	int experr = 0;
 	pid_t pid = getpid();
 	boolean_t do_64_test;
 	int s;
+	int c;
+
+	while ((c = getopt(argc, argv, "e:k:p:")) != -1) {
+		switch (c) {
+		case 'e':
+			errno = 0;
+			experr = strtol(optarg, NULL, 0);
+			if (errno != 0) {
+				err(EXIT_SETUP_FAIL,
+				    "Expected error value '%s' is not a "
+				    "parsable number", optarg);
+			}
+			break;
+		case 'k':
+			cookiestr = optarg;
+			break;
+		case 'p':
+			errno = 0;
+			proto = strtoul(optarg, NULL, 0);
+			if (errno != 0) {
+				err(EXIT_SETUP_FAIL,
+				    "KMC Protocol value '%s' is not a parsable"
+				    " number", optarg);
+			}
+			break;
+		case '?':
+			(void) fprintf(stderr, "Invalid option -%c\n", optopt);
+			usage(argv[0]);
+			break;
+		}
+	}
 
-	if (argc != 2 && argc != 3) {
-		(void) fprintf(stderr, "Usage: %s <spi-value> {64}\n",
-		    argv[0]);
-		exit(-1);
+	if (argc - optind != 1 && argc - optind != 2)
+		usage(argv[0]);
+
+	do_64_test = (argc - optind == 2);
+
+	if (cookiestr != NULL) {
+		errno = 0;
+
+		if (do_64_test)
+			cookie64 = strtoull(cookiestr, NULL, 0);
+		else
+			cookie32 = strtoul(cookiestr, NULL, 0);
+
+		if (errno != 0) {
+			err(EXIT_SETUP_FAIL,
+			    "KMC '%s' is not a parsable number",
+			    cookiestr);
+		}
 	}
-	do_64_test = (argc == 3);
 
-	spi = strtoul(argv[1], NULL, 0);
+	if (proto == 0)
+		proto = do_64_test ? SADB_X_KMP_KINK : SADB_X_KMP_IKE;
+
+	errno = 0;	/* Clear for strtoul() call. */
+	spi = strtoul(argv[optind], NULL, 0);
 	if (spi == 0) {
 		if (errno != 0) {
-			err(-1, "Argument %s is not a parsable number:",
-			    argv[1]);
+			err(EXIT_SETUP_FAIL,
+			    "Argument %s is not a parsable number:", argv[1]);
 		} else {
 			errno = EINVAL;
-			err(-1, "Zero SPI not allowed:");
+			err(EXIT_SETUP_FAIL, "Zero SPI not allowed:");
 		}
 	}
 
 	s = socket(PF_KEY, SOCK_RAW, PF_KEY_V2);
 	if (s == -1)
-		err(-1, "socket(PF_KEY)");
+		err(EXIT_SETUP_FAIL, "socket(PF_KEY)");
 
 	/* Base message. */
 	samsg = (sadb_msg_t *)writebuf;
@@ -150,16 +218,21 @@ main(int argc, char *argv[])
 	kmcext->sadb_x_kmc_exttype = SADB_X_EXT_KM_COOKIE;
 	if (do_64_test) {
 		/* 64-bit cookie test.  KINK is non-zero, and non-IKEv1. */
-		kmcext->sadb_x_kmc_proto = SADB_X_KMP_KINK;
-		kmcext->sadb_x_kmc_cookie64 = COOKIE64;
+		kmcext->sadb_x_kmc_proto = proto;
+		kmcext->sadb_x_kmc_cookie64 = cookie64;
 	} else {
 		/* IKEv1 32-bit cookie test. */
-		kmcext->sadb_x_kmc_proto = SADB_X_KMP_IKE;
-		kmcext->sadb_x_kmc_cookie = COOKIE32;
-		kmcext->sadb_x_kmc_reserved = RESERVED;
+		kmcext->sadb_x_kmc_proto = proto;
+		kmcext->sadb_x_kmc_cookie = cookie32;
+		kmcext->sadb_x_kmc_reserved = reserved;
 	}
 
-	write_and_read(s, samsg, readbuf, sizeof (readbuf), "SADB_UPDATE");
+	write_and_read(s, samsg, readbuf, sizeof (readbuf), experr,
+	    "SADB_UPDATE");
+
+	/* If we expected to fail, we shouldn't try to verify anything */
+	if (experr != 0)
+		exit(EXIT_SUCCESS);
 
 	/*
 	 * Okay, it worked!  Now let's find the KMC reported back from the
@@ -169,7 +242,7 @@ main(int argc, char *argv[])
 	samsg->sadb_msg_len -= SADB_8TO64(sizeof (*kmcext));
 
 	/* Everything else in writebuf is good to go. */
-	write_and_read(s, samsg, readbuf, sizeof (readbuf), "SADB_GET");
+	write_and_read(s, samsg, readbuf, sizeof (readbuf), 0, "SADB_GET");
 
 	/* Actually find the KMC extension. (expand for loop for readability) */
 	samsg = (sadb_msg_t *)readbuf;
@@ -185,37 +258,39 @@ main(int argc, char *argv[])
 
 	if (extptr == endptr) {
 		(void) fprintf(stderr, "Can't find KMC extension in reply.\n");
-		exit(-1);
+		exit(EXIT_SETUP_FAIL);
 	}
 	kmcext = (sadb_x_kmc_t *)extptr;
 
 	if (do_64_test) {
-		if (kmcext->sadb_x_kmc_proto != SADB_X_KMP_KINK ||
-		    kmcext->sadb_x_kmc_cookie64 != COOKIE64) {
+		if (kmcext->sadb_x_kmc_proto != proto ||
+		    kmcext->sadb_x_kmc_cookie64 != cookie64) {
 			(void) fprintf(stderr, "Unexpected 64-bit results: "
-			    "KMC received was %d, expecting %d,\n",
-			    kmcext->sadb_x_kmc_proto, SADB_X_KMP_KINK);
+			    "KMC received was %" PRIu32
+			    ", expecting %" PRIu32 ",\n",
+			    kmcext->sadb_x_kmc_proto, proto);
 			(void) fprintf(stderr, "64-bit cookie recevied was "
 			    "0x%"PRIx64", expecting 0x%"PRIx64"\n",
-			    kmcext->sadb_x_kmc_cookie64, COOKIE64);
-			exit(1);
+			    kmcext->sadb_x_kmc_cookie64, cookie64);
+			exit(EXIT_TEST_FAIL);
 		}
 	} else {
-		if (kmcext->sadb_x_kmc_proto != SADB_X_KMP_IKE ||
-		    kmcext->sadb_x_kmc_cookie != COOKIE32 ||
+		if (kmcext->sadb_x_kmc_proto != proto ||
+		    kmcext->sadb_x_kmc_cookie != cookie32 ||
 		    kmcext->sadb_x_kmc_reserved != 0) {
 			(void) fprintf(stderr, "Unexpected IKE/32-bit results:"
-			    " KMC received was %d, expecting %d,\n",
-			    kmcext->sadb_x_kmc_proto, SADB_X_KMP_IKE);
+			    " KMC received was %" PRIu32
+			    ", expecting %" PRIu32 ",\n",
+			    kmcext->sadb_x_kmc_proto, proto);
 			(void) fprintf(stderr, "32-bit cookie recevied was "
 			    "0x%"PRIx32", expecting 0x%"PRIx32"\n",
-			    kmcext->sadb_x_kmc_cookie64, COOKIE32);
+			    kmcext->sadb_x_kmc_cookie64, cookie32);
 			(void) fprintf(stderr, "32-bit reserved recevied was "
 			    "0x%"PRIx32", expecting 0\n",
 			    kmcext->sadb_x_kmc_cookie64);
-			exit(1);
+			exit(EXIT_TEST_FAIL);
 		}
 	}
 
-	exit(0);
+	exit(EXIT_SUCCESS);
 }
diff --git a/usr/src/uts/common/inet/ip/sadb.c b/usr/src/uts/common/inet/ip/sadb.c
index fd6d178cee..a45f69c19e 100644
--- a/usr/src/uts/common/inet/ip/sadb.c
+++ b/usr/src/uts/common/inet/ip/sadb.c
@@ -2330,7 +2330,12 @@ sadb_form_query(keysock_in_t *ksi, uint32_t req, uint32_t match,
 
 	if ((match & IPSA_Q_KMC) && (sq->kmcext)) {
 		sq->kmp = sq->kmcext->sadb_x_kmc_proto;
-		/* Be liberal in what we receive.  Special-case IKEv1. */
+		/*
+		 * Be liberal in what we receive.  Special-case the IKEv1
+		 * cookie, which closed-source in.iked assumes is 32 bits.
+		 * Now that we store all 64 bits, we should pre-zero the
+		 * reserved field on behalf of closed-source in.iked.
+		 */
 		if (sq->kmp == SADB_X_KMP_IKE) {
 			/* Just in case in.iked is misbehaving... */
 			sq->kmcext->sadb_x_kmc_reserved = 0;
@@ -3137,7 +3142,12 @@ sadb_common_add(queue_t *pfkey_q, mblk_t *mp, sadb_msg_t *samsg,
 
 	if (kmcext != NULL) {
 		newbie->ipsa_kmp = kmcext->sadb_x_kmc_proto;
-		/* Be liberal in what we receive.  Special-case IKEv1. */
+		/*
+		 * Be liberal in what we receive.  Special-case the IKEv1
+		 * cookie, which closed-source in.iked assumes is 32 bits.
+		 * Now that we store all 64 bits, we should pre-zero the
+		 * reserved field on behalf of closed-source in.iked.
+		 */
 		if (newbie->ipsa_kmp == SADB_X_KMP_IKE) {
 			/* Just in case in.iked is misbehaving... */
 			kmcext->sadb_x_kmc_reserved = 0;
@@ -4458,7 +4468,9 @@ sadb_check_kmc(ipsa_query_t *sq, ipsa_t *sa, int *diagnostic)
 		return (EINVAL);
 	}
 
-	if ((kmc != 0) && (sa->ipsa_kmc != 0) && (sa->ipsa_kmc != kmc)) {
+	/* Allow IKEv2 KMCs to update the kmc value for rekeying */
+	if ((kmp != SADB_X_KMP_IKEV2) && (kmc != 0) && (sa->ipsa_kmc != 0) &&
+	    (sa->ipsa_kmc != kmc)) {
 		*diagnostic = SADB_X_DIAGNOSTIC_DUPLICATE_KMC;
 		return (EINVAL);
 	}
-- 
2.21.0

