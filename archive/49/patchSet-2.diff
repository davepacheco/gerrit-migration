From ddb297112d639526b517cbed5e31cef2007d5bb7 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <jwilsdon@joyent.com>
Date: Sat, 9 Jul 2016 01:13:57 -0700
Subject: [PATCH] DOCKER-867 docker build: unable to run created image due to
 '/etc/resolv.conf' being a directory

For docker VMs, VM.js creates an /etc/resolv.conf file on provision which acts
as the mount point for the /zones/<uuid>/config/resolv.conf file. Before this
change this does not happen however on reprovision.

If the mount target is not there, zoneadmd will create an empty directory in its
spot. We can then mount over that with a file, but it will still be a directory
underneath when we stop the zone.

This change ensures that we create the mountpoint files both in provision and
reprovision cases. It also adds a test to ensure we avoid regressions.
---
 src/vm/node_modules/VM.js   | 25 +++++++++++++--
 src/vm/tests/test-docker.js | 62 +++++++++++++++++++++++++++++++++++++
 2 files changed, 85 insertions(+), 2 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 6043cd9b..c85ed286 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -2038,6 +2038,16 @@ function createVolume(volume, log, callback)
  *  * /etc/hosts
  *  * /etc/hostname
  *
+ * The opts parameter must be an object and valid options include:
+ *
+ *   opts.onlyUpdateFileContents: BOOLEAN
+ *
+ *     If true, this function will only update the contents of the host config
+ *     files, it will not modify the zonecfg for the zone. If unset or false,
+ *     after creating the files they will be added as lofs mounts to the zone's
+ *     zonecfg.
+ *
+ *
  */
 function createHostConfFileMounts(vmobj, opts, log, callback) {
     var dnssearch = [];
@@ -2065,6 +2075,11 @@ function createHostConfFileMounts(vmobj, opts, log, callback) {
     var resolvConfFile = '/etc/resolv.conf';
     var tracers_obj;
 
+    assert.object(vmobj, 'vmobj');
+    assert.object(opts, 'opts');
+    assert.object(log, 'log');
+    assert.func(callback, 'callback');
+
     if (process.env.EXPERIMENTAL_VMJS_TRACING) {
         tracers_obj = traceUntilCallback('create-hostconf-mounts', log,
             callback);
@@ -7259,16 +7274,22 @@ function installZone(payload, log, callback)
                 cb();
             }
         }, function (cb) {
-            if (receiving || reprovisioning || !vmobj.docker) {
+            var createFileOpts = {};
+
+            if (receiving || !vmobj.docker) {
                 cb();
                 return;
             }
 
+            if (reprovisioning) {
+                createFileOpts.onlyUpdateFileContents = true;
+            }
+
             if (payload.hasOwnProperty('internal_metadata')) {
                 vmobj.internal_metadata = payload.internal_metadata;
             }
 
-            createHostConfFileMounts(vmobj, {}, log, cb);
+            createHostConfFileMounts(vmobj, createFileOpts, log, cb);
         }, function (cb) {
             var host_vols = {};
             var to_create = [];
diff --git a/src/vm/tests/test-docker.js b/src/vm/tests/test-docker.js
index 145bb2de..fbf26b47 100644
--- a/src/vm/tests/test-docker.js
+++ b/src/vm/tests/test-docker.js
@@ -1438,3 +1438,65 @@ test('test restart delay reset', function (t) {
         }
     ]);
 });
+
+/* BEGIN JSSTYLED */
+/*
+ * This test creates a docker VM, reprovisions it, and then stops it so we can
+ * check that the resolv.conf created is *not* a directory but instead a file.
+ *
+ * If it's a directory it was created by zoneadmd:
+ *
+ * https://github.com/joyent/illumos-joyent/blob/release-20160707/usr/src/cmd/zoneadmd/vplat.c#L1239-L1245
+ *
+ * which will only happen if VM.js failed to create it.
+ */
+/* END JSSTYLED */
+test('test reprovision resolv.conf', function (t) {
+    var payload = JSON.parse(JSON.stringify(common_payload));
+    var state = {brand: payload.brand};
+
+    payload.archive_on_delete = false;
+    payload.autoboot = false;
+    payload.brand = 'lx';
+    payload.docker = true;
+    payload.image_uuid = vmtest.CURRENT_DOCKER_ALPINE_UUID;
+    payload.internal_metadata = {'docker:cmd': '[\"sleep\",\"3600\"]'};
+    payload.kernel_version = '3.13.0';
+    payload.resolvers = ['8.8.8.8', '8.8.4.4'];
+
+    vmtest.on_new_vm(t, payload.image_uuid, payload, state, [
+        function (cb) {
+            VM.start(state.uuid, {}, function (err) {
+                t.ok(!err, 'started VM: ' + (err ? err.message : 'success'));
+                cb(err);
+            });
+        }, function (cb) {
+            // reprovision with the same image we're already using
+            VM.reprovision(state.uuid, {'image_uuid': payload.image_uuid},
+                function (err) {
+                    t.ok(!err, 'reprovision: '
+                        + (err ? err.message : 'success'));
+                    cb(err);
+                }
+            );
+        }, function (cb) {
+            // Now stop the zone so we unmount everything. Otherwise we might
+            // have a file mounted on top of a directory which would be hidden
+            // if the zone's running.
+            VM.stop(state.uuid, {}, function (err) {
+                t.ok(!err, 'stopped VM: ' + (err ? err.message : 'success'));
+                cb(err);
+            });
+        }, function (cb) {
+            var resolv_conf = path.join('/zones', state.uuid,
+                '/root/etc/resolv.conf');
+
+            fs.stat(resolv_conf, function (err, st) {
+                t.ok(!err, 'stat resolv.conf: '
+                    + (err ? err.message : 'success'));
+                t.ok(st.isFile(), 'resolv.conf is a file: ' + st.isFile());
+                cb(err);
+            });
+        }
+    ]);
+});
-- 
2.21.0

