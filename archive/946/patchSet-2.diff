From 1bccef37c8f2ab9d960f3ff893764afa943ce41b Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 23 Nov 2016 17:25:57 -0800
Subject: [PATCH] CNS-176 ufds cn=changelogcount cannot be relied upon to match
 changenumber CNS-177 clean up UfdsWatcher cruft

---
 lib/ufds-watcher.js | 110 +++++++++++++++++---------------------------
 1 file changed, 43 insertions(+), 67 deletions(-)

diff --git a/lib/ufds-watcher.js b/lib/ufds-watcher.js
index 4a316b1..dcbc978 100644
--- a/lib/ufds-watcher.js
+++ b/lib/ufds-watcher.js
@@ -55,7 +55,7 @@ UfdsWatcher.prototype.check = function () {
 		return;
 	this.inCheck = true;
 
-	var base = 'cn=changelogcount';
+	var base = 'cn=latestchangenumber';
 	var opts = {
 		scope: 'one',
 		filter: new ldapjs.filters.PresenceFilter({
@@ -87,8 +87,8 @@ UfdsWatcher.prototype.check = function () {
 				if (count > self.lastSerial) {
 					var last = self.lastSerial;
 					self.lastSerial = count;
-					self.log.trace('ufds serial now at ' +
-					    '%d', count);
+					self.log.info('ufds serial now at ' +
+					    '%d, updating', count);
 					if (last >= 0)
 						self.fetch(last);
 				}
@@ -109,33 +109,13 @@ UfdsWatcher.prototype.check = function () {
 UfdsWatcher.prototype.fetch = function (serial) {
 	var self = this;
 	var base = 'cn=changelog';
-	var flts = [];
-	flts.push(new ldapjs.filters.GreaterThanEqualsFilter({
-		attribute: 'changenumber',
-		value: serial
-	}));
-	flts.push(new ldapjs.filters.SubstringFilter({
-		attribute: 'targetdn',
-		'initial': 'uuid=',
-		'final': 'ou=users, o=smartdc'
-	}));
-	flts.push(new ldapjs.filters.OrFilter({
-		filters: [
-			new ldapjs.filters.EqualityFilter({
-				attribute: 'changetype',
-				value: 'add'
-			}),
-			new ldapjs.filters.EqualityFilter({
-				attribute: 'changetype',
-				value: 'modify'
-			})
-		]
-	}));
 	var opts = {
 		scope: 'one',
-		filter: new ldapjs.filters.AndFilter({
-			filters: flts
-		})
+		filter: new ldapjs.filters.GreaterThanEqualsFilter({
+			attribute: 'changenumber',
+			value: serial.toString()
+		}),
+		sizeLimit: 1000
 	};
 	this.pool.claim(function (err, handle, ufds) {
 		if (err) {
@@ -177,29 +157,46 @@ UfdsWatcher.prototype.fetch = function (serial) {
 		});
 	});
 	function processEntry(ent) {
-		var es;
-
-		es = ent.attributes.filter(function (attr) {
-			return (attr.type === 'changenumber');
+		var logentry = {};
+		ent.attributes.forEach(function (attr) {
+			assert.strictEqual(logentry[attr.type], undefined);
+			assert.equal(attr.vals.length, 1);
+			logentry[attr.type] = attr.vals[0];
 		});
-		if (es.length !== 1)
-			return (false);
-		var n = es[0].vals[0];
-		if (typeof (n) === 'string')
-			n = parseInt(n, 10);
-		if (n == serial)
+
+		assert.string(logentry.targetdn, 'logentry.targetdn');
+		assert.string(logentry.changetype, 'logentry.changetype');
+		assert.strictEqual(logentry.objectclass, 'changeLogEntry');
+		assert.string(logentry.changetime, 'changetime');
+		assert.optionalString(logentry.entry, 'entry');
+		assert.string(logentry.changenumber, 'changenumber');
+		assert.string(logentry.changes, 'changes');
+
+		logentry.changenumber = parseInt(logentry.changenumber, 10);
+		if (logentry.changenumber <= serial)
 			return (false);
 
-		es = ent.attributes.filter(function (attr) {
-			return (attr.type === 'changes');
-		});
-		if (es.length !== 1)
+		var dn = ldapjs.parseDN(logentry.targetdn);
+		var r;
+
+		/* We only care about DNs that look like a user record. */
+		r = dn.pop();
+		if (!r || !r.attrs.o || r.attrs.o.value !== 'smartdc')
 			return (false);
-		try {
-			var changes = JSON.parse(es[0].vals[0]);
-		} catch (e) {
+		r = dn.pop();
+		if (!r || !r.attrs.ou || r.attrs.ou.value !== 'users')
 			return (false);
-		}
+		r = dn.pop();
+		if (!r || !r.attrs.uuid)
+			return (false);
+		var uuid = r.attrs.uuid.value;
+		r = dn.pop();
+		if (r)
+			return (false);
+
+		logentry.changes = JSON.parse(logentry.changes);
+		var changes = logentry.changes;
+
 		if (Array.isArray(changes)) {
 			var cs = changes.filter(function (ch) {
 				return (ch.operation === 'replace' &&
@@ -216,27 +213,6 @@ UfdsWatcher.prototype.fetch = function (serial) {
 				return (false);
 		}
 
-		es = ent.attributes.filter(function (attr) {
-			return (attr.type === 'targetdn');
-		});
-		if (es.length !== 1)
-			return (false);
-
-		var dn = ldapjs.parseDN(es[0].vals[0]);
-		var r;
-
-		r = dn.pop();
-		assert.strictEqual(r.attrs.o.value, 'smartdc');
-		r = dn.pop();
-		assert.strictEqual(r.attrs.ou.value, 'users');
-		r = dn.pop();
-
-		if (!r.attrs.uuid)
-			return (false);
-		var uuid = r.attrs.uuid.value;
-		if (dn.pop() !== undefined)
-			return (false);
-
 		return (uuid);
 	}
 };
-- 
2.21.0

