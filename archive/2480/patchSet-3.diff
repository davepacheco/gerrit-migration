From f2af5db0f3ab7a4a891d409c58acc1af36f2640b Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Mon, 21 Aug 2017 21:31:31 +0000
Subject: [PATCH] MANTA-3363 Some MPU operations don't log shard information in
 muskie audit entry

---
 lib/audit.js          |  1 +
 lib/uploads/commit.js | 29 +++++++++++++++++++++++++++++
 lib/uploads/common.js | 21 ++++++++++++++++++++-
 lib/uploads/create.js | 30 +++++++++++++++++++++++++++++-
 package.json          |  3 ++-
 5 files changed, 81 insertions(+), 3 deletions(-)

diff --git a/lib/audit.js b/lib/audit.js
index d352464..6287bd4 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -233,6 +233,7 @@ function auditLogger(options) {
         obj.sharksContacted = req.sharksContacted;
         obj.entryShard = req.entryShard;
         obj.parentShard = req.parentShard;
+        obj.uploadRecordShard = req.uploadRecordShard;
 
         if (req.route) {
             obj.route = req.route.name;
diff --git a/lib/uploads/commit.js b/lib/uploads/commit.js
index ded74d8..730338e 100644
--- a/lib/uploads/commit.js
+++ b/lib/uploads/commit.js
@@ -17,6 +17,9 @@ var util = require('util');
 var vasync = require('vasync');
 var verror = require('verror');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
+
 var auth = require('../auth');
 var common = require('../common');
 var obj = require('../obj');
@@ -31,6 +34,15 @@ require('../errors');
 var hasKey = jsprim.hasKey;
 var shallowCopy = utils.shallowCopy;
 var sprintf = util.format;
+var schemaValidator = ajv.compile({
+    'properties': {
+        'parts': {
+            'type': 'array',
+            'uniqueItems': true
+        }
+    },
+    'required': ['parts']
+});
 
 /*
  * We enforce a minimum part size because each part requires additional space
@@ -533,6 +545,22 @@ function ensureNotRoot(req, res, next) {
     }
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+            function (err, valid, msg) {
+        if (err) {
+            next(err);
+            return;
+        }
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadInvalidArgumentError(req.upload.id,
+                    msg));
+        }
+    });
+}
+
 
 ///--- Exports
 
@@ -555,6 +583,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 500000
             }),
+            validateSchema,
             validateUploadState,
             validateParts,
             finalizingState,
diff --git a/lib/uploads/common.js b/lib/uploads/common.js
index e22ca84..74d8cc4 100644
--- a/lib/uploads/common.js
+++ b/lib/uploads/common.js
@@ -10,6 +10,8 @@
 
 var util = require('util');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
 var libmanta = require('libmanta');
@@ -490,6 +492,10 @@ function loadUploadRecord(upload, cb) {
             assert.ok(wrap._etag);
             record.toSave._etag = wrap._etag;
 
+            if (wrap && wrap._node) {
+                upload.req.uploadRecordShard = wrap._node.pnode;
+            }
+
             cb(null, record.loaded.upload);
         }
     });
@@ -641,6 +647,18 @@ function uploadContext(req, res, next) {
     });
 }
 
+function validateJsonSchema(validator, json, cb) {
+    if (!validator) {
+        cb(new Error('missing json validator'));
+        return;
+    }
+    if (validator(json)) {
+        cb(null, true);
+    } else {
+        cb(null, false, ajv.errorsText(validator.errors));
+    }
+}
+
 
 ///--- API
 
@@ -1147,5 +1165,6 @@ module.exports = {
 
     // Common handlers for API endpoints
     loadUpload: loadUpload,
-    uploadContext: uploadContext
+    uploadContext: uploadContext,
+    validateJsonSchema: validateJsonSchema
 };
diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index e2be04f..21cf9b7 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -16,6 +16,8 @@ var path = require('path');
 var restify = require('restify');
 var util = require('util');
 var verror = require('verror');
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
 
 var auth = require('../auth');
 var common = require('../common');
@@ -28,7 +30,17 @@ require('../errors');
 
 var hasKey = jsprim.hasKey;
 var sprintf = util.format;
-
+var schemaValidator = ajv.compile({
+    'properties': {
+        'objectPath': {
+            'type': 'string'
+        },
+        'headers': {
+            'type': 'object'
+        }
+    },
+    'required': ['objectPath']
+});
 
 ///--- Helpers
 
@@ -112,6 +124,21 @@ function uploadContextRoot(req, res, next) {
     });
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+            function (err, valid, msg) {
+        if (err) {
+            next(err);
+            return;
+        }
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadInvalidArgumentError(req.upload.id,
+                    msg));
+        }
+    });
+}
 
 /*
  * Validates that all parameters needed for creating an upload exist, including:
@@ -329,6 +356,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 100000
             }),
+            validateSchema,
             validateParams,
             ensurePrefixDir,
             createUpload
diff --git a/package.json b/package.json
index 22ed74d..93667ef 100644
--- a/package.json
+++ b/package.json
@@ -36,7 +36,8 @@
         "vasync": "1.4.3",
         "verror": "^1.9.0",
         "watershed": "0.3.0",
-        "xtend": "2.1.1"
+        "xtend": "2.1.1",
+        "ajv": "5.2.2"
     },
     "devDependencies": {
         "smartdc": "7.3.1",
-- 
2.21.0

