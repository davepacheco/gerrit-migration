commit 5f1d6a86c108e8a1456dd4ec49f4c7690df446fd (refs/changes/80/2480/4)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-09-06T17:16:53+00:00 (2 years, 1 month ago)
    
    MANTA-3367 MPU commit invokes mako-finalize if "parts" array is missing

diff --git a/lib/uploads/commit.js b/lib/uploads/commit.js
index ded74d8..f1fbf7c 100644
--- a/lib/uploads/commit.js
+++ b/lib/uploads/commit.js
@@ -17,6 +17,9 @@ var util = require('util');
 var vasync = require('vasync');
 var verror = require('verror');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
+
 var auth = require('../auth');
 var common = require('../common');
 var obj = require('../obj');
@@ -31,6 +34,15 @@ require('../errors');
 var hasKey = jsprim.hasKey;
 var shallowCopy = utils.shallowCopy;
 var sprintf = util.format;
+var schemaValidator = ajv.compile({
+    'properties': {
+        'parts': {
+            'type': 'array',
+            'uniqueItems': true
+        }
+    },
+    'required': ['parts']
+});
 
 /*
  * We enforce a minimum part size because each part requires additional space
@@ -222,9 +234,9 @@ function validateParts(req, res, next) {
     log.debug('validating parts for upload');
 
     if (!parts) {
-        req.body.parts = [];
-        log.debug('empty parts array');
-        next();
+        log.debug('undefined parts array');
+        next(new MultipartUploadCreateError('missing parts array in ' +
+                    'request body'));
         return;
     } else if (parts.length > uploadsCommon.MAX_NUM_PARTS) {
         next(new MultipartUploadInvalidArgumentError(id,
@@ -533,6 +545,22 @@ function ensureNotRoot(req, res, next) {
     }
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+            function (err, valid, msg) {
+        if (err) {
+            next(err);
+            return;
+        }
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadInvalidArgumentError(req.upload.id,
+                    msg));
+        }
+    });
+}
+
 
 ///--- Exports
 
@@ -555,6 +583,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 500000
             }),
+            validateSchema,
             validateUploadState,
             validateParts,
             finalizingState,
diff --git a/lib/uploads/common.js b/lib/uploads/common.js
index 2bba4de..7a1b50b 100644
--- a/lib/uploads/common.js
+++ b/lib/uploads/common.js
@@ -10,6 +10,8 @@
 
 var util = require('util');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
 var libmanta = require('libmanta');
@@ -644,6 +646,18 @@ function uploadContext(req, res, next) {
     });
 }
 
+function validateJsonSchema(validator, json, cb) {
+    if (!validator) {
+        cb(new Error('missing json validator'));
+        return;
+    }
+    if (validator(json)) {
+        cb(null, true);
+    } else {
+        cb(null, false, ajv.errorsText(validator.errors));
+    }
+}
+
 
 ///--- API
 
@@ -1150,5 +1164,6 @@ module.exports = {
 
     // Common handlers for API endpoints
     loadUpload: loadUpload,
-    uploadContext: uploadContext
+    uploadContext: uploadContext,
+    validateJsonSchema: validateJsonSchema
 };
diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index e2be04f..21cf9b7 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -16,6 +16,8 @@ var path = require('path');
 var restify = require('restify');
 var util = require('util');
 var verror = require('verror');
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
 
 var auth = require('../auth');
 var common = require('../common');
@@ -28,7 +30,17 @@ require('../errors');
 
 var hasKey = jsprim.hasKey;
 var sprintf = util.format;
-
+var schemaValidator = ajv.compile({
+    'properties': {
+        'objectPath': {
+            'type': 'string'
+        },
+        'headers': {
+            'type': 'object'
+        }
+    },
+    'required': ['objectPath']
+});
 
 ///--- Helpers
 
@@ -112,6 +124,21 @@ function uploadContextRoot(req, res, next) {
     });
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+            function (err, valid, msg) {
+        if (err) {
+            next(err);
+            return;
+        }
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadInvalidArgumentError(req.upload.id,
+                    msg));
+        }
+    });
+}
 
 /*
  * Validates that all parameters needed for creating an upload exist, including:
@@ -329,6 +356,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 100000
             }),
+            validateSchema,
             validateParams,
             ensurePrefixDir,
             createUpload
diff --git a/package.json b/package.json
index b255931..af4392d 100644
--- a/package.json
+++ b/package.json
@@ -37,7 +37,8 @@
         "vasync": "1.4.3",
         "verror": "^1.9.0",
         "watershed": "0.3.0",
-        "xtend": "2.1.1"
+        "xtend": "2.1.1",
+        "ajv": "5.2.2"
     },
     "devDependencies": {
         "smartdc": "7.3.1",
diff --git a/test/mpu/commit.test.js b/test/mpu/commit.test.js
index d968219..0fab9d8 100644
--- a/test/mpu/commit.test.js
+++ b/test/mpu/commit.test.js
@@ -70,6 +70,30 @@ test('commit upload: zero parts', function (t) {
     });
 });
 
+test('commit upload: zero parts 0 content length', function (t) {
+    var self = this;
+    self.createUpload(self.path, null, function (err) {
+        self.commitUpload(self.uploadId, [], function (err2) {
+            if (ifErr(t, err2, 'commit upload error')) {
+                t.end();
+                return;
+            }
+
+            self.client.info(self.path, function (err3, info) {
+                if (ifErr(t, err3, 'minfo target object error')) {
+                    t.end();
+                    return;
+                }
+                t.ok(info);
+                if (info) {
+                    var headers = info.headers || {};
+                    t.equal(headers['content-length'], 0);
+                }
+                t.end();
+            });
+        });
+    });
+});
 
 test('commit upload: one part', function (t) {
     var self = this;
@@ -757,3 +781,18 @@ test('commit upload: non-existent id', function (t) {
         t.end();
     });
 });
+
+test('commit upload: error on undefined parts array', function (t) {
+    var self = this;
+    self.createUpload(self.path, null, function (err) {
+        self.commitUpload(self.uploadId, undefined, function (err2) {
+            t.ok(err2);
+            if (!err2) {
+                return (t.end());
+            }
+            t.ok(verror.hasCauseWithName(err2,
+                    'MultipartUploadInvalidArgumentError'));
+            t.end();
+        });
+    });
+});
