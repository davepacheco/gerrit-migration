From d40fb45839e94703ab6a893297ef198d9fc6677a Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Wed, 30 Aug 2017 23:59:28 +0000
Subject: [PATCH] MANTA-3367 MPU commit invokes mako-finalize if "parts" array
 is missing

---
 lib/uploads/commit.js   |  33 +++++++-
 lib/uploads/common.js   |  14 +++-
 lib/uploads/create.js   | 182 +++++++++++++++++++++-------------------
 package.json            |   4 +-
 test/mpu/commit.test.js |  15 ++++
 5 files changed, 159 insertions(+), 89 deletions(-)

diff --git a/lib/uploads/commit.js b/lib/uploads/commit.js
index ded74d8..e305c2c 100644
--- a/lib/uploads/commit.js
+++ b/lib/uploads/commit.js
@@ -17,6 +17,9 @@ var util = require('util');
 var vasync = require('vasync');
 var verror = require('verror');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
+
 var auth = require('../auth');
 var common = require('../common');
 var obj = require('../obj');
@@ -31,6 +34,17 @@ require('../errors');
 var hasKey = jsprim.hasKey;
 var shallowCopy = utils.shallowCopy;
 var sprintf = util.format;
+var schemaValidator = ajv.compile({
+    'properties': {
+        'parts': {
+            'type': 'array',
+            'items': {
+                'type': 'string'
+            }
+        }
+    },
+    'required': ['parts']
+});
 
 /*
  * We enforce a minimum part size because each part requires additional space
@@ -222,9 +236,9 @@ function validateParts(req, res, next) {
     log.debug('validating parts for upload');
 
     if (!parts) {
-        req.body.parts = [];
-        log.debug('empty parts array');
-        next();
+        log.debug('undefined parts array');
+        next(new MultipartUploadCreateError('missing parts array in ' +
+                    'request body'));
         return;
     } else if (parts.length > uploadsCommon.MAX_NUM_PARTS) {
         next(new MultipartUploadInvalidArgumentError(id,
@@ -533,6 +547,18 @@ function ensureNotRoot(req, res, next) {
     }
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+    function (valid, msg) {
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadInvalidArgumentError(req.upload.id,
+                msg));
+        }
+    });
+}
+
 
 ///--- Exports
 
@@ -555,6 +581,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 500000
             }),
+            validateSchema,
             validateUploadState,
             validateParts,
             finalizingState,
diff --git a/lib/uploads/common.js b/lib/uploads/common.js
index 2bba4de..c45b10d 100644
--- a/lib/uploads/common.js
+++ b/lib/uploads/common.js
@@ -10,6 +10,8 @@
 
 var util = require('util');
 
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
 var libmanta = require('libmanta');
@@ -644,6 +646,15 @@ function uploadContext(req, res, next) {
     });
 }
 
+function validateJsonSchema(validator, json, cb) {
+    assert.ok(validator, 'missing json validator');
+    if (validator(json)) {
+        cb(true);
+    } else {
+        cb(false, ajv.errorsText(validator.errors));
+    }
+}
+
 
 ///--- API
 
@@ -1150,5 +1161,6 @@ module.exports = {
 
     // Common handlers for API endpoints
     loadUpload: loadUpload,
-    uploadContext: uploadContext
+    uploadContext: uploadContext,
+    validateJsonSchema: validateJsonSchema
 };
diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index e2be04f..4e3afbc 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -16,6 +16,9 @@ var path = require('path');
 var restify = require('restify');
 var util = require('util');
 var verror = require('verror');
+var Ajv = require('ajv');
+var ajv = new Ajv({allErrors: true});
+require('ajv-keywords')(ajv);
 
 var auth = require('../auth');
 var common = require('../common');
@@ -28,7 +31,29 @@ require('../errors');
 
 var hasKey = jsprim.hasKey;
 var sprintf = util.format;
-
+var schemaValidator = ajv.compile({
+    'properties': {
+        'objectPath': {
+            'type': 'string'
+        },
+        'headers': {
+            'type': 'object',
+            'patternProperties' : {
+                'content-length' : {
+                    'type': 'number',
+                    'minimum': 0
+                }
+            },
+            'prohibited': [
+                'if-match',
+                'if-none-match',
+                'if-modified-since',
+                'if-unmodified-since'
+            ]
+        }
+    },
+    'required': ['objectPath']
+});
 
 ///--- Helpers
 
@@ -112,6 +137,16 @@ function uploadContextRoot(req, res, next) {
     });
 }
 
+function validateSchema(req, res, next) {
+    uploadsCommon.validateJsonSchema(schemaValidator, req.body,
+    function (valid, msg) {
+        if (valid) {
+            next();
+        } else {
+            next(new MultipartUploadCreateError(msg));
+        }
+    });
+}
 
 /*
  * Validates that all parameters needed for creating an upload exist, including:
@@ -135,99 +170,77 @@ function validateParams(req, res, next) {
 
     var log = req.log;
 
-    if (!req.body.objectPath || (typeof (req.body.objectPath) !== 'string')) {
-        next(new MultipartUploadInvalidArgumentError('a valid "objectPath" ' +
-            'is required'));
-    } else {
-        var opts = {
-            account: req.owner.account,
-            path: req.body.objectPath
-        };
-        libmanta.normalizeMantaPath(opts, function (err, p) {
-            if (err) {
-                log.debug({
-                    url: path,
-                    err: err
-                }, 'failed to normalize URL');
-
-                next(err);
-            } else {
-                var inputHeaders, headers, size, copies;
+    var opts = {
+        account: req.owner.account,
+        path: req.body.objectPath
+    };
+    libmanta.normalizeMantaPath(opts, function (err, p) {
+        if (err) {
+            log.debug({
+                url: path,
+                err: err
+            }, 'failed to normalize URL');
 
-                inputHeaders = req.body.headers || {};
-                var maxObjectCopies = req.config.maxObjectCopies ||
-                    obj.DEF_MAX_COPIES;
+            next(err);
+        } else {
+            var inputHeaders, headers, size, copies;
 
-                headers = {};
-                Object.keys(inputHeaders).forEach(function (k) {
-                    headers[k.toLowerCase()] = inputHeaders[k];
-                });
+            inputHeaders = req.body.headers || {};
+            var maxObjectCopies = req.config.maxObjectCopies ||
+                obj.DEF_MAX_COPIES;
 
-                // Reject conditional headers.
-                if (hasKey(headers, 'if-match') ||
-                    hasKey(headers, 'if-none-match') ||
-                    hasKey(headers, 'if-modified-since') ||
-                    hasKey(headers, 'if-unmodified-since')) {
-                    next(new MultipartUploadCreateError('conditional headers ' +
-                        'are not supported for multipart upload objects'));
-                    return;
-                }
+            headers = {};
+            Object.keys(inputHeaders).forEach(function (k) {
+                headers[k.toLowerCase()] = inputHeaders[k];
+            });
 
-                // Supported headers are: content-length, {x-}durability-level,
-                // and content-md5. We set these values to defaults otherwise.
-                if (hasKey(headers, 'content-length')) {
-                    size = headers['content-length'];
-                    if (typeof (size) === 'number') {
-                        if (size < 0) {
-                            var msg = '"content-length" must be >= 0';
-                            next(new MultipartUploadCreateError(msg));
-                            return;
-                        }
-                    } else {
-                        next(new MultipartUploadCreateError('"content-length"' +
-                        ' must be a number'));
-                        return;
-                    }
-                } else {
-                    size = req.msk_defaults.maxStreamingSize;
-                }
+            // Supported headers are: content-length, {x-}durability-level,
+            // and content-md5. We set these values to defaults otherwise.
+            if (hasKey(headers, 'content-length')) {
+                size = headers['content-length'];
+            } else {
+                size = req.msk_defaults.maxStreamingSize;
+            }
 
-                if (hasKey(headers, 'durability-level')) {
-                    copies = headers['durability-level'];
-                } else if (hasKey(headers, 'x-durability-level')) {
-                    copies = headers['x-durability-level'];
-                } else {
-                    copies = obj.DEF_NUM_COPIES;
-                }
+            // Validation for the durability-level header is done here because
+            // the case of an invalid durability level is given it's own special
+            // muskie error. To avoid redundancy in the json-validation logic,
+            // we leave validation of the parameter as is (below).
+            if (hasKey(headers, 'durability-level')) {
+                copies = headers['durability-level'];
+            } else if (hasKey(headers, 'x-durability-level')) {
+                copies = headers['x-durability-level'];
+            } else {
+                copies = obj.DEF_NUM_COPIES;
+            }
 
-                if (typeof (copies) !== 'number' ||
-                    copies < obj.DEF_MIN_COPIES || copies > maxObjectCopies) {
-                    next(new InvalidDurabilityLevelError(obj.DEF_MIN_COPIES,
-                        maxObjectCopies));
-                    return;
-                }
+            if (typeof (copies) !== 'number' ||
+                copies < obj.DEF_MIN_COPIES || copies > maxObjectCopies) {
+                next(new InvalidDurabilityLevelError(obj.DEF_MIN_COPIES,
+                    maxObjectCopies));
+                return;
+            }
 
-                assert.string(p);
-                assert.object(headers);
-                assert.number(size);
-                assert.number(copies);
+            assert.string(p);
+            assert.object(headers);
+            assert.number(size);
+            assert.number(copies);
 
-                req.upload.mpuObjectPathKey = p;
-                req.upload.mpuHeaders = headers;
-                req.upload.mpuSize = size;
-                req.upload.mpuCopies = copies;
+            req.upload.mpuObjectPathKey = p;
+            req.upload.mpuHeaders = headers;
+            req.upload.mpuSize = size;
+            req.upload.mpuCopies = copies;
 
-                log.debug({
-                    objectPath: req.body.objectPath,
-                    headers: headers,
-                    size: size,
-                    copies: copies
-                }, 'create-mpu: requested');
+            log.debug({
+                objectPath: req.body.objectPath,
+                headers: headers,
+                size: size,
+                copies: copies
+            }, 'create-mpu: requested');
 
-                next();
-            }
-        });
-    }
+            next();
+        }
+    });
 }
 
 
@@ -329,6 +342,7 @@ module.exports = {
                 mapParams: false,
                 maxBodySize: 100000
             }),
+            validateSchema,
             validateParams,
             ensurePrefixDir,
             createUpload
diff --git a/package.json b/package.json
index b255931..562205b 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,8 @@
         "url": "git+ssh://git@github.com:joyent/muskie.git"
     },
     "dependencies": {
+        "ajv": "5.2.2",
+        "ajv-keywords": "2.1.0"
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
         "artedi": "1.0.0",
         "assert-plus": "0.1.5",
@@ -37,7 +39,7 @@
         "vasync": "1.4.3",
         "verror": "^1.9.0",
         "watershed": "0.3.0",
-        "xtend": "2.1.1"
+        "xtend": "2.1.1",
     },
     "devDependencies": {
         "smartdc": "7.3.1",
diff --git a/test/mpu/commit.test.js b/test/mpu/commit.test.js
index d968219..a2faae1 100644
--- a/test/mpu/commit.test.js
+++ b/test/mpu/commit.test.js
@@ -757,3 +757,18 @@ test('commit upload: non-existent id', function (t) {
         t.end();
     });
 });
+
+test('commit upload: error on undefined parts array', function (t) {
+    var self = this;
+    self.createUpload(self.path, null, function (err) {
+        self.commitUpload(self.uploadId, undefined, function (err2) {
+            t.ok(err2);
+            if (!err2) {
+                return (t.end());
+            }
+            t.ok(verror.hasCauseWithName(err2,
+                    'MultipartUploadInvalidArgumentError'));
+            t.end();
+        });
+    });
+});
-- 
2.21.0

