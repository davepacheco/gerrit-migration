From 1f6f8a86484208f2a1b6396a002e6626d17c5da0 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 22 Feb 2017 00:09:00 +0000
Subject: [PATCH] joyent/node-jsprim#7 Want function for parsing an integer

---
 Makefile              |   1 +
 README.md             |  55 +++++
 lib/jsprim.js         | 249 ++++++++++++++++++++-
 package.json          |   5 +-
 test/parse-integer.js | 505 ++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 812 insertions(+), 3 deletions(-)
 create mode 100644 test/parse-integer.js

diff --git a/Makefile b/Makefile
index bf370bd..5a11f1c 100644
--- a/Makefile
+++ b/Makefile
@@ -34,6 +34,7 @@ test:
 	node test/hrtimeadd.js
 	node test/extraprops.js
 	node test/merge.js
+	node test/parse-integer.js
 	@echo tests okay
 
 include ./Makefile.targ
diff --git a/README.md b/README.md
index 7303642..d835691 100644
--- a/README.md
+++ b/README.md
@@ -139,6 +139,61 @@ Returns true if the given string ends with the given suffix and false
 otherwise.
 
 
+### parseInteger(str, options)
+
+Parses the contents of `str` (a string) as an integer. On success, the integer
+value is returned (as a number). On failure, an error is **returned** describing
+why parsing failed.
+
+By default, leading and trailing whitespace characters are not allowed, nor are
+trailing characters that are not part of the numeric representation. This
+behaviour can be toggled by using the options below. The empty string (`''`) is
+not considered valid input. If the return value cannot be precisely represented
+as a number (i.e., is smaller than `Number.MIN_SAFE_INTEGER` or larger than
+`Number.MAX_SAFE_INTEGER`), an error is returned. Additionally, the string
+`'-0'` will be parsed as the integer `0`, instead of as the IEEE floating point
+value `-0`.
+
+This function accepts both upper and lowercase characters for digits, similar to
+`parseInt()`, `Number()`, and [strtol(3C)](https://illumos.org/man/3C/strtol).
+
+The following may be specified in `options`:
+
+Option             | Type    | Default | Meaning
+------------------ | ------- | ------- | ---------------------------
+base               | number  | 10      | numeric base (radix) to use, in the range 2 to 36
+allowSign          | boolean | true    | whether to interpret any leading `+` (positive) and `-` (negative) characters
+allowImprecise     | boolean | false   | whether to accept values that may have lost precision (past `MAX_SAFE_INTEGER` or below `MIN_SAFE_INTEGER`)
+allowPrefix        | boolean | false   | whether to interpret the prefixes `0b` (base 2), `0o` (base 8), `0t` (base 10), or `0x` (base 16)
+allowTrailing      | boolean | false   | whether to ignore trailing characters
+trimWhitespace     | boolean | false   | whether to trim any leading or trailing whitespace/line terminators
+leadingZeroIsOctal | boolean | false   | whether a leading zero indicates octal
+
+Note that if `base` is unspecified, and `allowPrefix` or `leadingZeroIsOctal`
+are, then the leading characters can change the default base from 10. If `base`
+is explicitly specified and `allowPrefix` is true, then the prefix will only be
+accepted if it matches the specified base. `base` and `leadingZeroIsOctal`
+cannot be used together.
+
+**Context:** It's tricky to parse integers with JavaScript's built-in facilities
+for several reasons:
+
+- `parseInt()` and `Number()` by default allow the base to be specified in the
+  input string by a prefix (e.g., `0x` for hex).
+- `parseInt()` allows trailing nonnumeric characters.
+- `Number(str)` returns 0 when `str` is the empty string (`''`).
+- Both functions return incorrect values when the input string represents a
+  valid integer outside the range of integers that can be represented precisely.
+  Specifically, `parseInt('9007199254740993')` returns 9007199254740992.
+- Both functions always accept `-` and `+` signs before the digit.
+- Some older JavaScript engines always interpret a leading 0 as indicating
+  octal, which can be surprising when parsing input from users who expect a
+  leading zero to be insignificant.
+
+While each of these may be desirable in some contexts, there are also times when
+none of them are wanted. `parseInteger()` grants greater control over what
+input's permissible.
+
 ### iso8601(date)
 
 Converts a Date object to an ISO8601 date string of the form
diff --git a/lib/jsprim.js b/lib/jsprim.js
index 26c3ba1..f7d0d81 100644
--- a/lib/jsprim.js
+++ b/lib/jsprim.js
@@ -2,7 +2,7 @@
  * lib/jsprim.js: utilities for primitive JavaScript types
  */
 
-var mod_assert = require('assert');
+var mod_assert = require('assert-plus');
 var mod_util = require('util');
 
 var mod_extsprintf = require('extsprintf');
@@ -29,6 +29,8 @@ exports.mergeObjects = mergeObjects;
 exports.startsWith = startsWith;
 exports.endsWith = endsWith;
 
+exports.parseInteger = parseInteger;
+
 exports.iso8601 = iso8601;
 exports.rfc1123 = rfc1123;
 exports.parseDateTime = parseDateTime;
@@ -279,6 +281,251 @@ function parseDateTime(str)
 	}
 }
 
+
+/*
+ * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
+ * the ES6 definitions here, while allowing for them to someday be higher.
+ */
+var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
+var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
+
+
+/*
+ * Default options for parseInteger().
+ */
+var PI_DEFAULTS = {
+	base: 10,
+	allowSign: true,
+	allowPrefix: false,
+	allowTrailing: false,
+	allowImprecise: false,
+	trimWhitespace: false,
+	leadingZeroIsOctal: false
+};
+
+var CP_0 = 0x30;
+var CP_9 = 0x39;
+
+var CP_A = 0x41;
+var CP_B = 0x42;
+var CP_O = 0x4f;
+var CP_T = 0x54;
+var CP_X = 0x58;
+var CP_Z = 0x5a;
+
+var CP_a = 0x61;
+var CP_b = 0x62;
+var CP_o = 0x6f;
+var CP_t = 0x74;
+var CP_x = 0x78;
+var CP_z = 0x7a;
+
+var PI_CONV_DEC = 0x30;
+var PI_CONV_UC = 0x37;
+var PI_CONV_LC = 0x57;
+
+
+/*
+ * A stricter version of parseInt() that provides options for changing what
+ * is an acceptable string (for example, disallowing trailing characters).
+ */
+function parseInteger(str, uopts)
+{
+	mod_assert.string(str, 'str');
+	mod_assert.optionalObject(uopts, 'options');
+
+	var baseOverride = false;
+	var options = PI_DEFAULTS;
+
+	if (uopts) {
+		baseOverride = hasKey(uopts, 'base');
+		options = mergeObjects(options, uopts);
+		mod_assert.number(options.base, 'options.base');
+		mod_assert.ok(options.base >= 2, 'options.base >= 2');
+		mod_assert.ok(options.base <= 36, 'options.base <= 36');
+		mod_assert.bool(options.allowSign, 'options.allowSign');
+		mod_assert.bool(options.allowPrefix, 'options.allowPrefix');
+		mod_assert.bool(options.allowTrailing,
+		    'options.allowTrailing');
+		mod_assert.bool(options.allowImprecise,
+		    'options.allowImprecise');
+		mod_assert.bool(options.trimWhitespace,
+		    'options.trimWhitespace');
+		mod_assert.bool(options.leadingZeroIsOctal,
+		    'options.leadingZeroIsOctal');
+
+		if (options.leadingZeroIsOctal) {
+			mod_assert.ok(!baseOverride,
+			    '"base" and "leadingZeroIsOctal" are ' +
+			    'mutually exclusive');
+		}
+	}
+
+	var c;
+	var pbase = -1;
+	var base = options.base;
+	var start;
+	var mult = 1;
+	var value = 0;
+	var idx = 0;
+	var len = str.length;
+
+	/* Trim any whitespace on the left side. */
+	if (options.trimWhitespace) {
+		while (idx < len && isSpace(str.charCodeAt(idx))) {
+			++idx;
+		}
+	}
+
+	/* Check the number for a leading sign. */
+	if (options.allowSign) {
+		if (str[idx] === '-') {
+			idx += 1;
+			mult = -1;
+		} else if (str[idx] === '+') {
+			idx += 1;
+		}
+	}
+
+	/* Parse the base-indicating prefix if there is one. */
+	if (str[idx] === '0') {
+		if (options.allowPrefix) {
+			pbase = prefixToBase(str.charCodeAt(idx + 1));
+			if (pbase !== -1 && (!baseOverride || pbase === base)) {
+				base = pbase;
+				idx += 2;
+			}
+		}
+
+		if (pbase === -1 && options.leadingZeroIsOctal) {
+			base = 8;
+		}
+	}
+
+	/* Parse the actual digits. */
+	for (start = idx; idx < len; ++idx) {
+		c = translateDigit(str.charCodeAt(idx));
+		if (c !== -1 && c < base) {
+			value *= base;
+			value += c;
+		} else {
+			break;
+		}
+	}
+
+	/* If we didn't parse any digits, we have an invalid number. */
+	if (start === idx) {
+		return (new Error('invalid number: ' + JSON.stringify(str)));
+	}
+
+	/* Trim any whitespace on the right side. */
+	if (options.trimWhitespace) {
+		while (idx < len && isSpace(str.charCodeAt(idx))) {
+			++idx;
+		}
+	}
+
+	/* Check for trailing characters. */
+	if (idx < len && !options.allowTrailing) {
+		return (new Error('trailing characters after number: ' +
+		    JSON.stringify(str.slice(idx))));
+	}
+
+	/* If our value is 0, we return now, to avoid returning -0. */
+	if (value === 0) {
+		return (0);
+	}
+
+	/* Calculate our final value. */
+	var result = value * mult;
+
+	/*
+	 * If the string represents a value that cannot be precisely represented
+	 * by JavaScript, then we want to check that:
+	 *
+	 * - We never increased the value past MAX_SAFE_INTEGER
+	 * - We don't make the result negative and below MIN_SAFE_INTEGER
+	 *
+	 * Because we only ever increment the value during parsing, there's no
+	 * chance of moving past MAX_SAFE_INTEGER and then dropping below it
+	 * again, losing precision in the process. This means that we only need
+	 * to do our checks here, at the end.
+	 */
+	if (!options.allowImprecise &&
+	    (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {
+		return (new Error('number is outside of the supported range: ' +
+		    JSON.stringify(str.slice(start, idx))));
+	}
+
+	return (result);
+}
+
+
+/*
+ * Interpret a character code as a base-36 digit.
+ */
+function translateDigit(d)
+{
+	if (d >= CP_0 && d <= CP_9) {
+		/* '0' to '9' -> 0 to 9 */
+		return (d - PI_CONV_DEC);
+	} else if (d >= CP_A && d <= CP_Z) {
+		/* 'A' - 'Z' -> 10 to 35 */
+		return (d - PI_CONV_UC);
+	} else if (d >= CP_a && d <= CP_z) {
+		/* 'a' - 'z' -> 10 to 35 */
+		return (d - PI_CONV_LC);
+	} else {
+		/* Invalid character code */
+		return (-1);
+	}
+}
+
+
+/*
+ * Test if a value matches the ECMAScript definition of trimmable whitespace.
+ */
+function isSpace(c)
+{
+	return (c === 0x20) ||
+	    (c >= 0x0009 && c <= 0x000d) ||
+	    (c === 0x00a0) ||
+	    (c === 0x1680) ||
+	    (c === 0x180e) ||
+	    (c >= 0x2000 && c <= 0x200a) ||
+	    (c === 0x2028) ||
+	    (c === 0x2029) ||
+	    (c === 0x202f) ||
+	    (c === 0x205f) ||
+	    (c === 0x3000) ||
+	    (c === 0xfeff);
+}
+
+
+/*
+ * Determine which base a character indicates (e.g., 'x' indicates hex).
+ */
+function prefixToBase(c)
+{
+	if (c === CP_b || c === CP_B) {
+		/* 0b/0B (binary) */
+		return (2);
+	} else if (c === CP_o || c === CP_O) {
+		/* 0o/0O (octal) */
+		return (8);
+	} else if (c === CP_t || c === CP_T) {
+		/* 0t/0T (decimal) */
+		return (10);
+	} else if (c === CP_x || c === CP_X) {
+		/* 0x/0X (hexadecimal) */
+		return (16);
+	} else {
+		/* Not a meaningful character */
+		return (-1);
+	}
+}
+
+
 function validateJsonObjectJS(schema, input)
 {
 	var report = mod_jsonschema.validate(input, schema);
diff --git a/package.json b/package.json
index 8874a87..7c4e184 100644
--- a/package.json
+++ b/package.json
@@ -1,13 +1,14 @@
 {
 	"name": "jsprim",
-	"version": "1.3.1",
+	"version": "1.4.0",
 	"description": "utilities for primitive JavaScript types",
 	"main": "./lib/jsprim.js",
 	"repository": {
 		"type": "git",
-		"url": "git://github.com/davepacheco/node-jsprim.git"
+		"url": "git://github.com/joyent/node-jsprim.git"
 	},
 	"dependencies": {
+		"assert-plus": "1.0.0",
 		"extsprintf": "1.0.2",
 		"json-schema": "0.2.3",
 		"verror": "1.3.6"
diff --git a/test/parse-integer.js b/test/parse-integer.js
new file mode 100644
index 0000000..43a149a
--- /dev/null
+++ b/test/parse-integer.js
@@ -0,0 +1,505 @@
+/*
+ * test/parse-integer.js: tests parseInteger()
+ */
+
+var mod_assert = require('assert');
+var mod_util = require('util');
+var jsprim = require('../lib/jsprim');
+
+// --- Globals
+
+var parseInteger = jsprim.parseInteger;
+
+/* parseIntJS is used in these tests to avoid confusion */
+var parseIntJS = parseInt;
+
+/* Options for parseIntJS() compatible behaviour */
+var COMPAT_OPTS = {
+	allowSign: true,
+	allowPrefix: true,
+	allowTrailing: true,
+	allowImprecise: true,
+	trimWhitespace: true
+};
+
+/* Characters trimmed by parseIntJS() */
+var VALID_SPACE_CHARS = [
+	' ',
+	'\f',
+	'\n',
+	'\r',
+	'\t',
+	'\v',
+	'\u00a0',
+	'\u1680',
+	'\u180e',
+	'\u2000',
+	'\u2001',
+	'\u2002',
+	'\u2003',
+	'\u2004',
+	'\u2005',
+	'\u2006',
+	'\u2007',
+	'\u2008',
+	'\u2009',
+	'\u200a',
+	'\u2028',
+	'\u2029',
+	'\u202f',
+	'\u205f',
+	'\u3000',
+	'\ufeff'
+];
+
+
+/* Characters not trimmed by parseIntJS() */
+var INVALID_SPACE_CHARS = [
+	/* Some non-printable characters */
+	'\u0000', /* null (NUL) */
+	'\u0001', /* start of heading (SOH) */
+	'\u0002', /* start of text (STX) */
+	'\u0003', /* end of text (ETX) */
+	'\u0004', /* end of transmission (EOT) */
+	'\u0005', /* enquiry (ENQ) */
+	'\u0006', /* acknowledgement (ACK) */
+	'\u0007', /* bell (BEL) */
+	'\u0008', /* backspace (BS) */
+	'\u000E', /* shift out (SO) */
+	'\u000F', /* shift in (SI) */
+
+	/* Character before a whitespace range */
+	'\u1999', /* new tai lue letter low ma */
+
+	/* Some other white space characters */
+	'\u0085', /* next line (NEL) */
+	'\u200b', /* zero width space */
+	'\u200c', /* zero width non-joiner */
+	'\u200d', /* zero width joiner */
+	'\u2060'  /* word joiner */
+];
+
+
+/* Strings not valid before, after or inside the digit in any base. */
+var INVALID_BASE_CHARS = [
+	'!', '=', '++', '--', '_', '\\', '}', ';', ':', '.', '.'
+];
+
+/* These are valid characters that are only okay before the number. */
+var INVALID_TRAILING_CHARS = [ '+', '-' ];
+
+
+/* Series of strings to try parsing in each base. */
+var PI_BASES = [
+	/* Binary-only values */
+	'0', '1', '10', '100', '101', '1010',
+
+	/* Ternary-only values */
+	'2', '12', '20', '21', '102', '1020', '2010',
+
+	/* Octal-only values */
+	'4', '5', '6', '7', '225', '701', '605', '504', '65536', '7654321',
+
+	/* Decimal-only values */
+	'8', '9', '812', '9001', '9437', '955512', '987654321',
+
+	/* Hexadecimal-only values */
+	'a', 'b', 'c', 'd', 'e', 'f', 'fd00', 'abcd', '1f2', '1f00', 'b00',
+
+	/* Base 36-only values */
+	'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
+	'u', 'v', 'w', 'x', 'y', 'z', '1gkz', 'mno0', 'rq025', '6klmns5'
+];
+
+
+/* Generate a series of example input numbers */
+var EXAMPLE_NUMS = PI_BASES.map(function (str) {
+	return (parseIntJS(str, 36));
+});
+
+
+// --- Helpers
+
+function assertInvalidError(err) {
+	mod_assert.ok(err instanceof Error);
+	mod_assert.ok(jsprim.startsWith(err.message, 'invalid number'));
+}
+
+function assertTrailingError(err) {
+	mod_assert.ok(err instanceof Error);
+	mod_assert.ok(jsprim.startsWith(err.message, 'trailing characters'));
+}
+
+function assertPrecisionError(err) {
+	mod_assert.ok(err instanceof Error);
+	mod_assert.ok(jsprim.startsWith(err.message,
+	    'number is outside of the supported range'));
+}
+
+function assertParseHelper(simpopts, num, str) {
+	var whspopts = jsprim.mergeObjects(simpopts, { trimWhitespace: true });
+	var trailopts = jsprim.mergeObjects(simpopts, { allowTrailing: true });
+
+	/* Test normal parsing. */
+	mod_assert.equal(num, parseInteger(str, simpopts));
+
+	/* Test that whitespace trimmed by parseIntJS() is valid. */
+	VALID_SPACE_CHARS.forEach(function (sp) {
+		var spBefore = sp + str;
+		var spAfter = str + sp;
+		var spBoth = sp + str + sp;
+
+		/* Whitespace invalid by default */
+		assertInvalidError(parseInteger(spBefore, simpopts));
+		assertTrailingError(parseInteger(spAfter, simpopts));
+		assertInvalidError(parseInteger(spBoth, simpopts));
+
+		/* Adding in "trimWhitespace" makes it valid. */
+		mod_assert.equal(num, parseInteger(spBefore, whspopts));
+		mod_assert.equal(num, parseInteger(spAfter, whspopts));
+		mod_assert.equal(num, parseInteger(spBoth, whspopts));
+
+		/* Multiple whitespace chars is fine. */
+		mod_assert.equal(num, parseInteger(sp + spBefore, whspopts));
+		mod_assert.equal(num, parseInteger(spAfter + sp, whspopts));
+		mod_assert.equal(num, parseInteger(sp + spBoth + sp, whspopts));
+	});
+
+	/* Test that whitespace not trimmed by parseIntJS() is invalid. */
+	INVALID_SPACE_CHARS.forEach(function (sp) {
+		assertInvalidError(parseInteger(sp + str, whspopts));
+		assertTrailingError(parseInteger(str + sp, whspopts));
+		assertInvalidError(parseInteger(sp + str + sp, whspopts));
+		mod_assert.equal(num, parseInteger(str + sp, trailopts));
+	});
+
+	/* Test trailing characters. */
+	INVALID_BASE_CHARS.forEach(function (c) {
+		/* Trailing character is invalid without "allowTrailing". */
+		assertTrailingError(parseInteger(str + c, simpopts));
+		mod_assert.equal(num, parseInteger(str + c, trailopts));
+
+		/* Digits after an invalid character are still invalid. */
+		assertTrailingError(parseInteger(str + c + '0', simpopts));
+		assertTrailingError(parseInteger(str + c + '1', simpopts));
+		mod_assert.equal(num, parseInteger(str + c + '0', trailopts));
+		mod_assert.equal(num, parseInteger(str + c + '1', trailopts));
+
+		/* Leading character is invalid regardless of options. */
+		assertInvalidError(parseInteger(c + str, simpopts));
+		assertInvalidError(parseInteger(c + str, trailopts));
+	});
+
+	/* Some characters are only valid at the start of the number. */
+	INVALID_TRAILING_CHARS.forEach(function (c) {
+		assertTrailingError(parseInteger(str + c, simpopts));
+		assertTrailingError(parseInteger(str + c + '0', simpopts));
+		mod_assert.equal(num, parseInteger(str + c, trailopts));
+	});
+}
+
+
+function assertPosiNeg(opts, num, str) {
+	/* Basic number parsing with the given options. */
+	assertParseHelper(opts, num, str);
+
+	/* Leading '+' makes the number positive (a no-op). */
+	assertParseHelper(opts, num, '+' + str);
+
+	/* Leading '-' makes the number negative. */
+	assertParseHelper(opts, -num, '-' + str);
+}
+
+
+// --- Tests
+
+/* parseInteger() compatibility with parseIntJS() */
+
+var PI_COMPAT_VALUES = [
+	'123',
+	'123x4',
+	'-123',
+	'0x123',
+	'0x123x4',
+	'-0x123x4',
+	'+0x123x4',
+	'-',
+	'0x',
+	'-0x'
+];
+
+PI_COMPAT_VALUES.forEach(function (str) {
+	[ undefined, 10, 16 ].forEach(function (base) {
+		var bopts = { base: base };
+		var copts = COMPAT_OPTS;
+
+		if (base) {
+			copts = jsprim.mergeObjects(COMPAT_OPTS, bopts);
+		}
+
+		var num = parseIntJS(str, base);
+		if (isNaN(num)) {
+			mod_assert.ok(isNaN(parseInteger(str, copts)));
+		} else {
+			mod_assert.equal(num, parseInteger(str, copts));
+		}
+	});
+});
+
+
+/* parseInteger() with different combinations of bases and options */
+
+[ 2, 3, 8, 10, 16, 36 ].forEach(function (base) {
+	console.log('testing parsing in base %d', base);
+
+	var sopts = { base: base };
+	var wopts = jsprim.mergeObjects(sopts, { trimWhitespace: true });
+	var topts = jsprim.mergeObjects(sopts, { allowTrailing: true });
+	var copts = jsprim.mergeObjects(sopts, COMPAT_OPTS);
+
+	PI_BASES.forEach(function (str) {
+		var num = parseIntJS(str, base);
+		if (isNaN(num)) {
+			/* Number cannot be parsed in our base. */
+			assertInvalidError(parseInteger(str, topts));
+			assertInvalidError(parseInteger('-' + str, topts));
+			return;
+		}
+
+		if (str === num.toString(base)) {
+			/* Parse the number as-is. */
+			assertPosiNeg(sopts, num, str);
+
+			/* Changing case shouldn't afect digits in base. */
+			assertPosiNeg(sopts, num, str.toUpperCase());
+
+			/* A leading zero doesn't change the value */
+			assertPosiNeg(sopts, num, '0' + str);
+		} else {
+			/* The input string had trailing characters. */
+			mod_assert.equal(num, parseInteger(str, copts));
+			mod_assert.equal(-num, parseInteger('-' + str, copts));
+		}
+	});
+
+	INVALID_BASE_CHARS.forEach(function (str) {
+		assertInvalidError(parseInteger(str, sopts));
+		assertInvalidError(parseInteger(str, topts));
+		assertInvalidError(parseInteger(str, wopts));
+	});
+});
+
+
+/* parseInteger() base prefixes */
+
+var popts = { allowPrefix: true };
+
+var PI_PREFIX_CHARS = [
+	{ base: 2, chars: [ 'b', 'B' ], b17: 203, b36: 412 },
+	{ base: 8, chars: [ 'o', 'O' ], b17: 0, b36: 880 },
+	{ base: 10, chars: [ 't', 'T' ], b17: 0, b36: 1060 },
+	{ base: 16, chars: [ 'x', 'X' ], b17: 0, b36: 1204 }
+];
+
+PI_PREFIX_CHARS.forEach(function (prefix) {
+	console.log('test base %d prefixes: %j', prefix.base, prefix.chars);
+
+	prefix.chars.forEach(function (pc) {
+		var base = prefix.base;
+		var ps = '0' + pc;
+
+		function test(opts, num, str) {
+			assertPosiNeg(opts, num, ps + str);
+			assertPosiNeg(opts, num, ps + '0' + str);
+		}
+
+		/*
+		 * When the base and prefix match, the prefix is skipped.
+		 */
+		var bpopts = {
+			base: base,
+			allowPrefix: true
+		};
+
+		[ popts, bpopts ].forEach(function (opts) {
+			/* The prefix is invalid on its own. */
+			assertInvalidError(parseInteger(ps, opts));
+
+			/* Some basic numbers. */
+			test(opts, 0, '0');
+			test(opts, 1, '1');
+			test(opts, base, '10');
+			test(opts, base + 1, '11');
+			test(opts, base * base, '100');
+			test(opts, base * base + 1, '101');
+
+			/* Try a bunch of different values in this base. */
+			EXAMPLE_NUMS.forEach(function (num) {
+				test(opts, num, num.toString(base));
+			});
+		});
+
+		/* It's okay to drop the prefix if the base is given. */
+		EXAMPLE_NUMS.forEach(function (num) {
+			mod_assert.equal(num,
+			    parseInteger(num.toString(base), bpopts));
+		});
+
+		/*
+		 * When the base and prefix differ, the specified base takes
+		 * precedence.
+		 */
+		var b17opts = {
+			base: 17,
+			allowPrefix: true,
+			allowTrailing: true
+		};
+
+		var b36opts = {
+			base: 36,
+			allowPrefix: true,
+			allowTrailing: true
+		};
+
+		mod_assert.equal(prefix.b17, parseInteger(ps + 'g', b17opts));
+		mod_assert.equal(prefix.b36, parseInteger(ps + 'g', b36opts));
+	});
+});
+
+/* Try several invalid prefixes. */
+[ 'i', 'q', 'v', 'z' ].forEach(function (pc) {
+	var ps = '0' + pc + '0';
+	assertTrailingError(parseInteger(ps, { allowPrefix: true }));
+	assertTrailingError(parseInteger(ps, { allowPrefix: false }));
+});
+
+
+console.log('testing edge cases');
+
+assertInvalidError(parseInteger(''));
+assertInvalidError(parseInteger('+'));
+assertInvalidError(parseInteger('-'));
+
+mod_assert.equal(0, parseInteger('0'));
+
+/* parseInteger() doesn't return negative zero */
+mod_assert.equal('0', mod_util.inspect(parseInteger('-0')));
+
+
+/* parseInteger() imprecise result tests */
+
+var PI_BOUNDARIES = [
+	/* Positive imprecise numbers */
+	'9007199254740992',
+	'9007199254740993',
+	'9007199254740995',
+	'9007199254740999',
+	'9007199254741000',
+	'27021597764223000',
+	'27021597764223001',
+	'27021597764223002',
+	'27021597764223003',
+	'27021597764223004',
+	'27021597764223005',
+	'27021597764223006',
+
+	/* Negative imprecise numbers */
+	'-9007199254740992',
+	'-9007199254740993',
+	'-9007199254740995',
+	'-9007199254740997',
+	'-9007199254740999',
+	'-27021597764223000',
+	'-27021597764223001',
+	'-27021597764223002',
+	'-27021597764223003',
+	'-27021597764223004',
+	'-27021597764223005',
+	'-27021597764223006'
+];
+
+console.log('testing imprecise parsing');
+
+
+mod_assert.equal(9007199254740991, parseInteger('9007199254740991'));
+mod_assert.equal(-9007199254740991, parseInteger('-9007199254740991'));
+
+PI_BOUNDARIES.forEach(function (str) {
+	var iopts = { allowImprecise: true };
+	var inum = parseIntJS(str, 10);
+	assertPrecisionError(parseInteger(str));
+	assertParseHelper(iopts, inum, str);
+});
+
+/* parseInteger() octal notation tests */
+
+var oopts = {
+	leadingZeroIsOctal: true
+};
+
+var opopts = {
+	leadingZeroIsOctal: true,
+	allowPrefix: true
+};
+
+console.log('testing octal notation');
+
+[ oopts, opopts ].forEach(function (opts) {
+	/* Leading zero parses in octal */
+	assertPosiNeg(opts, 0, '0');
+	assertPosiNeg(opts, 0, '00');
+	assertPosiNeg(opts, 1, '01');
+	assertPosiNeg(opts, 8, '010');
+	assertPosiNeg(opts, 9, '011');
+	assertPosiNeg(opts, 511, '0777');
+
+	/* No leading zero when option is enabled remains decimal */
+	assertPosiNeg(opts, 1, '1');
+	assertPosiNeg(opts, 10, '10');
+	assertPosiNeg(opts, 11, '11');
+	assertPosiNeg(opts, 777, '777');
+});
+
+
+/* parseInteger() invalid input tests */
+
+console.log('testing invalid values');
+
+mod_assert.throws(function () {
+	parseInteger({});
+});
+
+mod_assert.throws(function () {
+	parseInteger(true);
+});
+
+var INVALID_OPTS = [
+	false,
+	16,
+	'16',
+	{ base: 1 },
+	{ base: 37 },
+	{ allowSign: 0 },
+	{ allowImprecise: {} },
+	{ allowPrefix: 'please' },
+	{ allowTrailing: 5 },
+	{ trimWhitespace: [ true ] },
+	{ leadingZeroIsOctal: 'yes' }
+];
+
+INVALID_OPTS.forEach(function (opts) {
+	mod_assert.throws(function () {
+		parseInteger('123', opts);
+	});
+});
+
+
+/* parseInteger() with allowSign=false */
+
+var sfopts = {
+	allowSign: false
+};
+
+mod_assert.equal(5, parseInteger('5', sfopts));
+assertInvalidError(parseInteger('+5', sfopts));
+assertInvalidError(parseInteger('-5', sfopts));
-- 
2.21.0

