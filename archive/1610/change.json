{"project":"joyent/node-jsprim","branch":"master","id":"I6ea6cb4f3d2d889d87c336487f4940eb4aa11980","number":"1610","subject":"joyent/node-jsprim#7 Want function for parsing an integer Reviewed by: Dave Pacheco \u003cdap@joyent.com\u003e Approved by: Dave Pacheco \u003cdap@joyent.com\u003e","owner":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"url":"https://cr.joyent.us/1610","commitMessage":"joyent/node-jsprim#7 Want function for parsing an integer\nReviewed by: Dave Pacheco \u003cdap@joyent.com\u003e\nApproved by: Dave Pacheco \u003cdap@joyent.com\u003e\n","createdOn":1488582242,"lastUpdated":1489439764,"open":false,"status":"MERGED","comments":[{"timestamp":1488582242,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 1."},{"timestamp":1488582246,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 1: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1488583952,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 2."},{"timestamp":1488583962,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 2: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1488586195,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 3."},{"timestamp":1488586205,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 3: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489172939,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 3:\n\n(22 comments)\n\nThanks a lot for doing this.  This is a far more complete implementation than I would have figured!"},{"timestamp":1489191441,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 4."},{"timestamp":1489191446,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 4: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489191965,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 5."},{"timestamp":1489191970,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 5: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489192077,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 3:\n\n(19 comments)"},{"timestamp":1489424616,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 5:\n\n(3 comments)\n\nThanks for making those changes.\n\nThe only thing here I\u0027d still like to square away is the -0 case."},{"timestamp":1489432184,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 6."},{"timestamp":1489432189,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 6: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489433155,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 6: Code-Review+1 Integration-Approval+1\n\nNice!"},{"timestamp":1489433393,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 3:\n\n(2 comments)"},{"timestamp":1489433472,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 7: Commit message was updated."},{"timestamp":1489433689,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Uploaded patch set 8."},{"timestamp":1489433704,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 8: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489438940,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 8: Code-Review+1 Integration-Approval+1"},{"timestamp":1489439764,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Cody Peter Mello"}],"currentPatchSet":{"number":"8","revision":"6ea6cb4f3d2d889d87c336487f4940eb4aa11980","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/8","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489433689,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489433704,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1489438940,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1489438940,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"SUBM","value":"1","grantedOn":1489439763,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"CHANGES.md","type":"MODIFIED","insertions":4,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":55,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":248,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":505,"deletions":0}],"sizeInsertions":816,"sizeDeletions":-3},"patchSets":[{"number":"1","revision":"bde5effd4be467cc03910b94b32b170f0076a5cc","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/1","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1488582242,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1488582246,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":40,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":221,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":466,"deletions":0}],"sizeInsertions":731,"sizeDeletions":-3},{"number":"2","revision":"5dd745125341d8372ddc25e8ae1ce3640101f6ae","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/2","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1488583952,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1488583962,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":40,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":221,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":466,"deletions":0}],"sizeInsertions":731,"sizeDeletions":-3},{"number":"3","revision":"466d59aab40335aa30321f16da9bda6ebf587499","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/3","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1488586195,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1488586205,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"README.md","line":149,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"\"characters that are not part of the numeric representation\"?"},{"file":"README.md","line":149,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"README.md","line":151,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Looks like this needs to wrap here."},{"file":"README.md","line":151,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"README.md","line":158,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Call out that this is overridden by the input if allowPrefix is true and the input contains a supported prefix?"},{"file":"README.md","line":158,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I\u0027ve added a description of how base, allowPrefix and leadingZeroIsOctal interact below."},{"file":"README.md","line":170,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I think it\u0027s worth calling out the octal case specifically because it\u0027s pretty common for people to be burned by that when a non-technical person happens to include a leading 0.  Maybe this could go after line 180."},{"file":"README.md","line":170,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"parseInt() and Number() don\u0027t interpret the leading 0 as octal:\n\n    \u003e process.version\n    \u0027v0.10.40\u0027\n    \u003e parseInt(\u0027010\u0027)\n    10\n    \u003e Number(\u0027010\u0027)\n    10"},{"file":"README.md","line":170,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Maybe the issue is too old at this point to be very relevant.\n\nBased on the discussion and table on the MDN documentation for parseInt (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt), it does seem like most implementations have converged to the behavior you describe, but it\u0027s still discouraged to use parseInt() without a radix parameter because of this issue, and that was one part of my motivation for wanting a saner parseInteger().\n\nIn fact, we still ship a node in the mako zone that uses the older behavior:\n\n    \u003e process.version\n    \u0027v0.8.26\u0027\n    \u003e parseInt(\u0027010\u0027)\n    8\n\nbut that is indeed quite old."},{"file":"README.md","line":170,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I think it\u0027s worth listing it then. I\u0027ve added it to the list."},{"file":"lib/jsprim.js","line":48,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"FWIW, there are other global constants in this file (e.g., RFC1123_MONTHS), and they seem to appear in front of the functions that use them."},{"file":"lib/jsprim.js","line":48,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Moved."},{"file":"lib/jsprim.js","line":75,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Similarly, there are a bunch of other internal helpers in this file.  They appear to be generally after the functions that use them."},{"file":"lib/jsprim.js","line":75,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Moved."},{"file":"lib/jsprim.js","line":79,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I think the argument is a numeric character code.  Is that right?  If we want to support more than ASCII, I\u0027d probably go with UTF-8, in which case this should probably be a code point.  (Namely, I think we want to use codePointAt() instead of charCodeAt().)  (On the other hand, supporting only ASCII seems fine as well since the numeric part of the string has to be ASCII anyway.)\n\nI wasn\u0027t sure if this representation was conventional for bases above 16, but it looks like this convention matches strtol(3c), so that seems good.  strtol(3c) explicitly calls out the representation:\n\n\u003e If the value of base is between 2 and 36, the expected form of the subject sequence is a sequence of letters and digits representing an integer with the radix specified by base, optionally preceded by a + or - sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values 10 to 35; only letters whose ascribed values are less than that of base are permitted. If the value of base is 16, the characters 0x or 0X may optionally precede the sequence of letters and digits, following the sign if present.\n\nIt would be nice to make our documentation a little more explicit, even if we just say it\u0027s the same as strtol(3c)."},{"file":"lib/jsprim.js","line":79,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"lib/jsprim.js","line":84,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"It\u0027s kind of confusing that the comparison here uses hex but the subtraction uses decimal for what seems like it should be intrinsically the same value.  Is there a clean way to use actual characters here?  In C, this would usually be written:\n\n    if (d \u003e\u003d \u00270\u0027 \u0026\u0026 d \u003c\u003d \u00279\u0027)\n        return (d - \u00270\u0027);\n\nIn JS, I suppose this would be:\n\n    if (d \u003e\u003d \u00270\u0027.charCodeAt(0) \u0026\u0026 d \u003c\u003d \u00279\u0027.charCodeAt(0))\n        return (d - \u00270\u0027.charCodeAt(0));\n\nAnother option would be to define constants like CP_A (code point for \u0027A\u0027).  I\u0027m not sure if either of these is better or not.  But if we keep hex values, I think it\u0027s worth annotating them with the character (maybe as a comment for each \"if\" block)."},{"file":"lib/jsprim.js","line":84,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I\u0027ve defined a bunch of constants for these values."},{"file":"lib/jsprim.js","line":86,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"It took me a little while to understand this because we seem to be just subtracting the value of the character \u00277\u0027.  I think of this as subtracting \u0027A\u0027 because that\u0027s the base value for this group of characters and then adding 10 because that\u0027s the numeric value of \u0027A\u0027.  Can we clarify this, either with a comment or by writing out the subtraction and addition?"},{"file":"lib/jsprim.js","line":111,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"This is a really specific set of values to hardcode here.  I take it there\u0027s no standard version of this function or something that provides these values?  What about using trimLeft() and trimRight()?  They\u0027re non-standard, but appear to be supported by V8."},{"file":"lib/jsprim.js","line":111,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"So, I initially tried using the trim* functions, but when I started writing tests found that they trim characters that they\u0027re not supposed to in node v0.10 (but are fixed in node v0.12 and later). Maybe that\u0027s fine, and I can just remove those tests (or let them fail in node v0.10)."},{"file":"lib/jsprim.js","line":120,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Same here -- could these be symbolic character values?  (The comments are helpful, though.)"},{"file":"lib/jsprim.js","line":427,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"This module follows the old cstyle convention that comments should be complete sentences (with punctuation).  This module also only uses C-style comments."},{"file":"lib/jsprim.js","line":427,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"lib/jsprim.js","line":429,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I think the uses of charCodeAt should probably be codePointAt, though I don\u0027t think it actually matters because the values where these would differ aren\u0027t numbers that we support."},{"file":"lib/jsprim.js","line":429,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"codePointAt() would probably be better here, but it isn\u0027t supported in node v0.10. Since we don\u0027t need to handle any of the character represented in UTF-16 by surrogate pairs, I think this is fine."},{"file":"lib/jsprim.js","line":429,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Makes sense."},{"file":"lib/jsprim.js","line":484,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Do you mind changing the error messages to start with lowercase?  I think that\u0027s what we use in most places, and what the existing errors here do, and that allows tools using these messages to look like traditional Unixy tools."},{"file":"lib/jsprim.js","line":484,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"lib/jsprim.js","line":493,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"At first I thought this wasn\u0027t quite safe because the actual boundary values of what can be represented precisely (e.g., 2^53) aren\u0027t safe to use, since you wouldn\u0027t be able to tell if they were exceeded.  Fortunately, MIN/MAX_SAFE_INTEGER are defined to avoid that problem.\n\nProving this to myself: I think it\u0027s safe to use values between MIN and MAX_SAFE_INTEGER because our calculations start at 0 and only increase in absolute value.  So if the final result is within that range, then every value along the way was also in that range, and there was no opportunity for imprecision.  I think the clamped range necessary because at the boundary conditions (MAX_SAFE_INTEGER+1), multiple possible inputs are known to produce the same outputs.\n\nCan we make explain this constraint more explicitly in the comment?"},{"file":"lib/jsprim.js","line":493,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I\u0027ve added a comment, and change the logic here slightly, in case MIN_SAFE_INTEGER ever has a greater absolute value than MAX_SAFE_INTEGER."},{"file":"lib/jsprim.js","line":494,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I think it might be clearer to an end user to say that this number is out of the supported range."},{"file":"lib/jsprim.js","line":494,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Done"},{"file":"test/parse-integer.js","line":0,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Sorry if I\u0027ve missed them, but are there test cases for cases like these:\n\n    123.45 (invalid character in the middle)\n    12-34 (valid character in an invalid spot, in the middle)\n    12- (invalid character in an invalid spot, at the end)\n    0d in base 16 when allowPrefix is true (presumably should be 13)\n    0d in base 10 when allowPrefix is true (presumably should be invalid)\n    0d in base 16 when allowPrefix is false (13 again)\n    + (non-empty string, but no digits)\n    - (ditto)\n\nWhat\u0027s the expected result for `0b` when allowPrefix is true?  Is there a test for that?  How about a test for something like `0bc`?"},{"file":"test/parse-integer.js","line":0,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I didn\u0027t have many tests for things in the middle, or for invalid allowPrefix cases. I\u0027ve gone and added those."},{"file":"test/parse-integer.js","line":87,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Why are these \"BASES\"?\n\nIf I\u0027m understanding correctly, this is an array of inputs, and EXAMPLE_NUMS is an array of the corresponding expected outputs."},{"file":"test/parse-integer.js","line":87,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"I called it \"BASES\" because these are input strings that make use of characters to try in several different bases.\n\nEXAMPLE_NUMS is derived from this array, but they aren\u0027t used in the same tests together. EXAMPLE_NUMS is used for generating sample strings with .toString(base)."},{"file":"test/parse-integer.js","line":171,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Spell out \"without\"?  (Ditto \"w/\" below.)"},{"file":"test/parse-integer.js","line":196,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I\u0027m not sure I follow what these values have to do with parseInt.  Is it: these are a bunch of values where both functions work the same way and we\u0027re going to check both?"},{"file":"test/parse-integer.js","line":196,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Yeah. These are just several values where, when the right set of options is turned on, the behaviour should be the same. I added these values from v8 tests as a sanity check."},{"file":"test/parse-integer.js","line":259,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"When is this the case for these examples?"},{"file":"test/parse-integer.js","line":259,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"This is when there\u0027s trailing characters that can\u0027t be parsed in the current base. I\u0027ll add a comment."},{"file":"test/parse-integer.js","line":345,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"What\u0027s the story with this?"},{"file":"test/parse-integer.js","line":345,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"node v0.10 doesn\u0027t support -0, but newer versions do. I wanted to make sure that parseInteger() handled it, but the test would always fail on node v0.10, so I added a check and warning."},{"file":"test/parse-integer.js","line":345,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"When you say it \"doesn\u0027t support\" -0 -- does that mean at all?  I\u0027m surprised that\u0027s possible, since I thought it was part of IEEE floating point, but that does seem to be the case.  I haven\u0027t been able to generate it through the usual calculations.  Is the output of inspect() the best way to determine that?\n\nDo we want it to be the case that parseInteger of the string \"-0\" returns -0?  I would have expected it to return 0."},{"file":"test/parse-integer.js","line":345,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"For posterity: Dave and I discussed this, and decided to not return -0, since it isn\u0027t usually represented in integer types."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":40,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":221,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":468,"deletions":0}],"sizeInsertions":733,"sizeDeletions":-3},{"number":"4","revision":"3cd4c9190eec235cbcd0256d4563035ea5b8168a","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/4","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489191441,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489191446,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":47,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":243,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":507,"deletions":0}],"sizeInsertions":801,"sizeDeletions":-3},{"number":"5","revision":"95b36d72bb47eb91ce30a33ed02682c99573925d","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/5","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489191965,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489191970,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":50,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":243,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":507,"deletions":0}],"sizeInsertions":804,"sizeDeletions":-3},{"number":"6","revision":"1f6f8a86484208f2a1b6396a002e6626d17c5da0","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/6","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489432184,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1489433155,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1489433155,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489432189,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":55,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":248,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":505,"deletions":0}],"sizeInsertions":812,"sizeDeletions":-3},{"number":"7","revision":"4951dcf5dbf206450865aaf16511766f68d84a4b","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/7","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489433472,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1489433155,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1489433155,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489432189,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":55,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":248,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":505,"deletions":0}],"sizeInsertions":812,"sizeDeletions":-3},{"number":"8","revision":"6ea6cb4f3d2d889d87c336487f4940eb4aa11980","parents":["825aba45c6cff4340c18cdae363ccb5bdf840bd7"],"ref":"refs/changes/10/1610/8","uploader":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"createdOn":1489433689,"author":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1489438940,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1489438940,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"SUBM","value":"1","grantedOn":1489439763,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489433704,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"CHANGES.md","type":"MODIFIED","insertions":4,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":1,"deletions":0},{"file":"README.md","type":"MODIFIED","insertions":55,"deletions":0},{"file":"lib/jsprim.js","type":"MODIFIED","insertions":248,"deletions":-1},{"file":"package.json","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"test/parse-integer.js","type":"ADDED","insertions":505,"deletions":0}],"sizeInsertions":816,"sizeDeletions":-3}],"allReviewers":[{"name":"Joyent Automation","username":"joyent-automation"},{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}]}