commit 3c4471768af4ac365e6a1332538121b82febaaf6 (refs/changes/41/3641/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-03-20T17:39:03+01:00 (1 year, 7 months ago)
    
    TOOLS-1387 sdcadm platform install should fail early if there's not enough free space on the USB

diff --git a/lib/platform.js b/lib/platform.js
index dbbb9a4..e2db5a1 100644
--- a/lib/platform.js
+++ b/lib/platform.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -460,7 +460,8 @@ Platform.prototype.install = function install(opts, callback) {
             }
             if (Array.isArray(images) && !images.length) {
                 imgNotFoundError = true;
-                return cb(new errors.UpdateError('no images found'));
+                cb(new errors.UpdateError('no images found'));
+                return;
             }
             common.sortArrayOfObjects(images, ['published_at']);
             image = images[images.length - 1];
@@ -495,7 +496,8 @@ Platform.prototype.install = function install(opts, callback) {
             }
             if (Array.isArray(images) && !images.length) {
                 imgNotFoundError = true;
-                return cb(new errors.UpdateError('no images found'));
+                cb(new errors.UpdateError('no images found'));
+                return;
             }
             common.sortArrayOfObjects(images, ['published_at']);
             image = images[images.length - 1];
@@ -531,45 +533,29 @@ Platform.prototype.install = function install(opts, callback) {
         child.on('exit', function (code) {
             // This is the expected exit code for errors handled by
             // install-platform.sh script:
-            if (code === 1) {
-                return cb(new Error(format(
-                    'install-platform.sh script failed for platform %s',
-                    filepath)));
-            }
             if (code) {
-            // TOOLS-1012: Most of the times, the reason for installer failure
-            // is ENOSPC. Let's check USB key disk space when installer fails
-                common.execFilePlus({
-                    argv: ['/usr/bin/df', '-k', '/mnt/usbkey/os'],
-                    log: self.log
-                }, function (err, stdout, stderr) {
-                    stdout = stdout.trim().split('\n');
-                    stdout = stdout[1].split(/\s+/);
-                    var avail = stdout[3];
-                    if (avail) {
-                        avail = avail / 1024;
-                        self.progress('Please check that USB key has free ' +
-                                'space enough to unpack platform file');
-                        self.progress('Available disk space in USB key is %d ' +
-                                'MiB', avail.toFixed(0));
-                    }
-                    return cb(new Error(INSTALL_PLATFORM + ' returned ' +
-                                code));
-                });
-            } else {
-                progress('Platform installer finished successfully');
-                progress('Proceeding to complete the update');
-                cb();
+                var msg = format(
+                    'install-platform.sh script failed for platform %s.',
+                    filepath);
+                msg += '\n' + 'Please, check /tmp/install_platform.log for ' +
+                    'additional information.';
+                progress(msg);
+                cb(new Error('Platform setup failed'));
+                return;
             }
+            progress('Platform installer finished successfully');
+            progress('Proceeding to complete the update');
+            cb();
         });
     }
 
     function updateHistory(history, cb) {
         if (!history) {
             self.sdcadm.log.debug('History not set for platform install');
-            return cb();
+            cb();
+            return;
         }
-        return self.sdcadm.history.updateHistory(history, cb);
+        self.sdcadm.history.updateHistory(history, cb);
     }
 
     function cleanup(cb) {
@@ -578,49 +564,54 @@ Platform.prototype.install = function install(opts, callback) {
                 self.log.warn(err, 'unlinking %s', filepath);
             }
             progress('Installation complete');
-            return updateHistory(hist, cb);
+            updateHistory(hist, cb);
         });
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {}, funcs: [
         function getChannel(_, next) {
             self.sdcadm.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
                 if (err) {
-                    return next();
+                    next();
+                    return;
                 }
                 defaultChannel = channel;
                 if (!fs.existsSync(opts.image)) {
                     progress('Using channel %s', channel);
                 }
-                return next();
+                next();
             });
         },
         function findLatest(_, next) {
             self.getLatestPlatformInstalled(function (err, platf) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 latest = platf;
-                return next();
+                next();
             });
         },
         // Make sure that if we install a new platform and Headnode is using
         // "latest", we really know what we're doing:
         function checkHeadnodePlatform(_, next) {
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             self.sdcadm.cnapi.listServers({
                 headnode: true
             }, function (err, res) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
                 var hn_uuid = res[0].uuid;
                 self.sdcadm.cnapi.getBootParams(hn_uuid, function (er2, boot) {
                     if (er2) {
-                        return next(new errors.SDCClientError(er2, 'cnapi'));
+                        next(new errors.SDCClientError(er2, 'cnapi'));
+                        return;
                     }
                     if (boot.platform === 'latest') {
                         progress('');
@@ -632,11 +623,11 @@ Platform.prototype.install = function install(opts, callback) {
                         progress('');
 
                         progress('Aborting platform install');
-                        return callback();
+                        callback();
+                        return;
 
-                    } else {
-                        return next();
                     }
+                    next();
                 });
             });
         },
@@ -645,31 +636,31 @@ Platform.prototype.install = function install(opts, callback) {
             if (fs.existsSync(opts.image)) {
                 filepath = opts.image;
                 deleteOnFinish = false;
-                return next();
+                next();
             } else if (opts.image === 'latest') {
-                return findPlatformImageLatest(next);
+                findPlatformImageLatest(next);
             } else if (opts.image.match(
-                /([a-f\d]{8}(-[a-f\d]{4}){3}-[a-f\d]{12}?)/ig))
-            {
-                return findPlatformImageByUuid(next);
+                /([a-f\d]{8}(-[a-f\d]{4}){3}-[a-f\d]{12}?)/ig)) {
+                findPlatformImageByUuid(next);
             } else {
-                return findPlatformBySearching(next);
+                findPlatformBySearching(next);
             }
         },
 
         function verifyLatesltIsNotAlreadyInstalled(_, next) {
             if (opts.image !== 'latest') {
-                return next();
+                next();
+                return;
             }
             progress('Checking latest Platform Image is already installed');
 
             var realVersion = image.version.split('-').pop();
             if (realVersion === latest) {
                 progress('Latest Platform Image already installed');
-                return callback(null);
-            } else {
-                return next();
+                callback(null);
+                return;
             }
+            next();
         },
 
         function saveChangesToHistory(_, next) {
@@ -690,10 +681,11 @@ Platform.prototype.install = function install(opts, callback) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
 
@@ -707,6 +699,58 @@ Platform.prototype.install = function install(opts, callback) {
                 downloadPlatformImage(next);
             }
         },
+        // TOOLS-1387: Check PI size vs available disk space before we try
+        // to run the installer in order to fail early when possible.
+        function checkPIUncompressedSize(ctx, next) {
+            common.execFilePlus({
+                argv: ['/usr/bin/gzip', '-lq', filepath],
+                log: self.log
+            }, function gzipCb(err, stdout) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                stdout = stdout.trim().split('\n');
+                stdout = stdout[0].split(/\s+/);
+                var uncompressed = stdout[1];
+                if (!uncompressed) {
+                    next(new Error('Unexpected gzip output'));
+                    return;
+                }
+                ctx.platformImageSize = (uncompressed / 1024);
+                next();
+            });
+        },
+        function mountUsbKey(_, next) {
+            common.mountUsbKey(self.log, next);
+        },
+        function checkAvailableDiskSpace(ctx, next) {
+            common.execFilePlus({
+                argv: ['/usr/bin/df', '-k', '/mnt/usbkey/os'],
+                log: self.log
+            }, function dfCb(err, stdout) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                stdout = stdout.trim().split('\n');
+                stdout = stdout[1].split(/\s+/);
+                var avail = stdout[3];
+                if (!avail) {
+                    next(new Error('Unexpected df output'));
+                    return;
+                }
+                if (avail < ctx.platformImageSize) {
+                    self.progress('Available disk space in USB key is %d ' +
+                            'MiB', (avail / 1024).toFixed(0));
+                    self.progress('Required disk space for PI setup is %d ' +
+                            'MiB', (ctx.platformImageSize / 1024).toFixed(0));
+                    next(new Error('Not enough disk space available'));
+                    return;
+                }
+                next();
+            });
+        },
         function execInstaller(_, next) {
             executeInstallerFile(next);
         },
