From 88dd64a7b51c2e1b0f1ee7115f07310cb7ac8edf Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 2 May 2017 20:42:42 +0200
Subject: [PATCH] TOOLS-1728 sdcadm update for service with multiple instances
 should skip up-to-date ones Reviewed by: Trent Mick <trentm@gmail.com>

---
 CHANGES.md                         |  5 ++
 lib/cli/do_update_other.js         | 73 ++++++++++++++++++++++++++++++
 lib/procedures/index.js            | 15 +++++-
 lib/procedures/update-binder-v2.js | 19 ++++++--
 lib/sdcadm.js                      |  5 +-
 package.json                       |  2 +-
 6 files changed, 111 insertions(+), 8 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 620323a..ff73f8c 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -11,6 +11,11 @@
 # sdcadm Changelog
 
 
+## 1.15.7
+
+- TOOLS-1731 'sdcadm post-setup common-external-nics' should set external
+  network as primary
+
 ## 1.15.6
 
 - TOOLS-1642: Use cueball HttpAgent to connect to Triton HTTP services.
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index 9ad5b2f..cdeeae4 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -755,6 +755,79 @@ function do_update_other(subcmd, opts, args, cb) {
             }, next);
         },
 
+        /*
+         * Clean up after older vers of 'sdcadm post-setup common-external-nics'
+         * that did not set the "external" NIC to be the primary.
+         */
+        function updateCommonExternalNics(ctx, next) {
+            var initialNetworks = ['admin'];
+            var oldNetworks = ['admin', 'external'];
+            var newNetworks = [
+                { name: 'admin' },
+                { name: 'external', primary: true}
+            ];
+            var toUpdateItems = [];
+
+            var svcs = ctx.svcs.filter(function (svc) {
+                return (svc.name === 'adminui' || svc.name === 'imgapi');
+            });
+
+            self.sdcadm.checkMissingExternalNics({
+                progress: progress
+            }, function (sdcadmErr, vmsNics) {
+                if (sdcadmErr) {
+                    next(sdcadmErr);
+                    return;
+                }
+
+                /*
+                 * vmsNics has two members: doimgapi and doadminui which
+                 * will be true if adding the nics to imgapi0 or adminui0 is
+                 * still pending and, on that case, we can safely skip the
+                 * service here, otherwise, we need to update params.
+                 */
+                svcs.forEach(function (svc) {
+                    if (!vmsNics['do' + svc.name] &&
+                        svc.params &&
+                        (jsprim.deepEqual(svc.params.networks, oldNetworks) ||
+                        jsprim.deepEqual(svc.params.networks, initialNetworks))
+                    ) {
+                        toUpdateItems.push({
+                            svcName: svc.name,
+                            svcUuid: svc.uuid,
+                            paramsNetworks: newNetworks
+                        });
+                    }
+                });
+
+                if (toUpdateItems.length === 0) {
+                    next();
+                    return;
+                }
+
+                vasync.forEachPipeline({
+                    inputs: toUpdateItems,
+                    func: function handleOneUpdateItem(item, nextItem) {
+                        progress('Update "%s" service params.networks to ' +
+                            'ensure the external NIC is primary',
+                            item.svcName);
+                        updateService(item.svcUuid, {
+                            params: {
+                                networks: item.paramsNetworks
+                            }
+                        }, function (updateErr) {
+                            if (updateErr) {
+                                nextItem(new errors.SDCClientError(
+                                    updateErr, 'sapi'));
+                            } else {
+                                nextItem();
+                            }
+                        });
+                    }
+                }, next);
+            });
+        },
+
         steps.agentServicesEnsureCreated,
 
         /*
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index d254287..b40e7d8 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -103,6 +103,7 @@ function coordinatePlan(opts, cb) {
     var log = opts.log;
     var progress = opts.progress || function () {};
     var sdcadm = opts.sdcadm;
+    var forceSameImage = opts.plan.forceSameImage;
     var instsFromSvcName = {};
     var insts = opts.plan.curr;
     for (var i = 0; i < insts.length; i++) {
@@ -217,7 +218,12 @@ function coordinatePlan(opts, cb) {
                             handle.push(change);
                         } else {
                             if (~HA_READY_SVCS.indexOf(change.service.name)) {
-                                change.insts = svcInsts;
+                                var chInsts = forceSameImage ? svcInsts :
+                                        svcInsts.filter(function (ins) {
+                                            return (ins.image !==
+                                                change.image.uuid);
+                                        });
+                                change.insts = chInsts;
                                 handle.push(change);
                             } else {
                                 log.debug({
@@ -382,7 +388,12 @@ function coordinatePlan(opts, cb) {
                 {
                     var svcInsts = instsFromSvcName[change.service.name] || [];
                     if (svcInsts.length && svcInsts.length > 1) {
-                        change.insts = svcInsts;
+                        var chInsts = forceSameImage ? svcInsts :
+                                svcInsts.filter(function (ins) {
+                                    return (ins.image !==
+                                        change.image.uuid);
+                                });
+                        change.insts = chInsts;
                     } else {
                         change.inst = svcInsts[0];
                     }
diff --git a/lib/procedures/update-binder-v2.js b/lib/procedures/update-binder-v2.js
index 4e130b8..4958d88 100644
--- a/lib/procedures/update-binder-v2.js
+++ b/lib/procedures/update-binder-v2.js
@@ -45,8 +45,14 @@ UpdateBinderV2.prototype.summarize = function ushiSummarize() {
     if (c0.insts) {
         out[0] += ':';
         out = out.concat(c0.insts.map(function (inst) {
-            return common.indent(sprintf('instance "%s" (%s) in server %s',
-                inst.zonename, inst.alias, inst.server));
+            if (inst.image === img.uuid) {
+                return common.indent(sprintf(
+                    'instance "%s" (%s) is already at version %s',
+                    inst.zonename, inst.alias, img.version));
+            } else {
+                return common.indent(sprintf('instance "%s" (%s) in server %s',
+                    inst.zonename, inst.alias, inst.server));
+            }
         }));
     }
     return out.join('\n');
@@ -247,6 +253,10 @@ UpdateBinderV2.prototype.execute = function ushiExecute(opts, cb) {
                 vasync.forEachPipeline({
                     inputs: followers,
                     func: function reprovFollower(inst, next_) {
+                        if (inst.image === change.image.uuid) {
+                            next_();
+                            return;
+                        }
                         s.reprovisionRemote({
                             server: inst.server,
                             img: change.image,
@@ -304,8 +314,9 @@ UpdateBinderV2.prototype.execute = function ushiExecute(opts, cb) {
             },
 
             function reprovisionLeader(_, next) {
-                if (!leader) {
-                    return next();
+                if (!leader || leader.image === change.image.uuid) {
+                    next();
+                    return;
                 }
                 progress('Updating ZK leader');
                 s.reprovisionRemote({
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 0715204..8ac6c2e 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -6254,7 +6254,10 @@ setupCommonExternalNics(opts, cb) {
 
             self.sapi.updateService(svcArr[0].uuid, {
                 params: {
-                    networks: ['admin', 'external']
+                    networks: [
+                        { name: 'admin' },
+                        { name: 'external', primary: true}
+                    ]
                 }
             }, function (err) {
                 if (err) {
diff --git a/package.json b/package.json
index 64a6586..2a56bd3 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.15.6",
+  "version": "1.15.7",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

