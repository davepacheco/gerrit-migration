commit 0b9555709b3a1c067380865db7cfd7f8839131c3 (refs/changes/35/4635/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-08-08T19:30:42+02:00 (1 year, 2 months ago)
    
    TOOLS-1963 'sdcadm create assets -s NEW-HEADNODE' should work
    Reviewed by: Marsell Kukuljevic <marsell@joyent.com>
    Approved by: Marsell Kukuljevic <marsell@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 89e175a..5a382b3 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,8 +10,9 @@
 
 # sdcadm Changelog
 
-### 1.20.2 (not yet released)
+## 1.20.2
 
+- TOOLS-1963 `sdcadm create assets -s NEW-HEADNODE` should work
 - TOOLS-1962 `sdcadm create sdc -s NEW-HEADNODE` should work
 - TOOLS-1966 `sdcadm create -s dhcpd` should set `dhcpd_server` flag to admin Nic
 - TRITON-636 trouble with timeouts in `sdcadm health`
diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index 5fa7065..dc4929a 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -130,7 +130,7 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
 
             if (opts.image) {
                 change.image = opts.image;
-            } else {
+            } else if (svcFromName[service].params) {
                 change.image = svcFromName[service].params.image_uuid;
             }
 
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index 826d42a..2e63209 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -860,7 +860,9 @@ function do_update_other(subcmd, opts, args, cb) {
                 }
                 next();
             });
-        }
+        },
+
+        steps.sapiensureAssetsService
 
     ]}, cb);
 }
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index 2cc3d50..1f686bc 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -16,6 +16,7 @@ var util = require('util');
 var vasync = require('vasync');
 
 var errors = require('../errors');
+var shared = require('../procedures/shared');
 
 var DRY_RUN = false; // An off-switch for dev/testing.
 
@@ -347,12 +348,277 @@ function sapiFixInstanceAlias(arg, cb) {
     });
 }
 
+
+function ensureAssetsService(arg, cb) {
+
+    assert.object(arg, 'arg');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.log, 'arg.log');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.object(arg.sdcadm.sdcApp, 'arg.sdcadm.sdcApp');
+    assert.func(cb, 'cb');
+
+    const app = arg.sdcadm.sdcApp;
+
+    var registrarCfg = {
+      registration: {
+        domain: 'SERVICE_DOMAIN',
+        type: 'rr_host',
+        service: {
+          type: 'service',
+          service: {
+            srvce: '_SERVICE_NAME',
+            proto: '_tcp',
+            ttl: 60,
+            port: 80
+          }
+        },
+        ttl: 60
+      },
+      zookeeper: {
+        servers: [
+          '{{ZK_SERVERS}}'
+        ],
+        timeout: 60000
+      }
+    };
+
+    var serviceData = {
+        name: 'assets',
+        params: {
+            package_name: 'sdc_128',
+            billing_id: 'TO_FILL_IN', // filled in from 'package_name'
+            image_uuid: 'TO_FILL_IN',
+            archive_on_delete: true,
+            delegate_dataset: true,
+            maintain_resolvers: true,
+            networks: [
+                {name: 'admin', primary: true}
+            ],
+            firewall_enabled: false,
+            tags: {
+                smartdc_role: 'assets',
+                smartdc_type: 'core'
+            },
+            filesystems: [ {
+                source: '/usbkey/extra',
+                target: '/assets/extra',
+                type: 'lofs',
+                options: [
+                    'ro',
+                    'nodevices'
+                ]
+            }, {
+                source: '/usbkey/os',
+                target: '/assets/os',
+                type: 'lofs',
+                options: [
+                    'ro',
+                    'nodevices'
+                ]
+            } ]
+        },
+        metadata: {
+            SERVICE_NAME: 'assets',
+            SERVICE_DOMAIN: 'TO_FILL_IN',
+            resolvers: 'TO_FILL_IN',
+            'registrar-config': registrarCfg,
+            ufds_ldap_root_dn: 'TO_FILL_IN',
+            ufds_ldap_root_pw: 'TO_FILL_IN',
+            ufds_admin_ips: 'TO_FILL_IN',
+            'user-script': 'TO_FILL_IN'
+        }
+    };
+
+    var context = {
+        svcData: serviceData
+    };
+
+    vasync.pipeline({arg: context, funcs: [
+        function getSvc(ctx, next) {
+            arg.sdcadm.sapi.listServices({
+                name: 'assets',
+                application_uuid: app.uuid
+            }, function getSvcCb(svcErr, svcs) {
+                if (svcErr) {
+                    next(svcErr);
+                    return;
+                } else if (svcs.length) {
+                    ctx.service = svcs[0];
+                }
+                next();
+            });
+        },
+
+        /* @field ctx.pkg */
+        function getPkg(ctx, next) {
+            if (ctx.service) {
+                next();
+                return;
+            }
+
+            arg.sdcadm.papi.list({
+                name: ctx.svcData.params.package_name,
+                active: true
+            }, {}, function listPkgCb(err, pkgs) {
+                if (err) {
+                    next(err);
+                    return;
+                } else if (pkgs.length !== 1) {
+                    next(new errors.InternalError({
+                        message: util.format(
+                            '%d "%s" packages found', pkgs.length,
+                            ctx.svcData.params.package_name)
+                    }));
+                    return;
+                }
+                ctx.pkg = pkgs[0];
+                next();
+            });
+        },
+
+        function getLatestImage(ctx, next) {
+            if (ctx.service) {
+                next();
+                return;
+            }
+
+            arg.sdcadm.updates.listImages({
+                name: 'assets'
+            }, function listImgsCb(err, images) {
+                if (err) {
+                    next(err);
+                } else if (images && images.length) {
+                    ctx.img = images[images.length - 1];
+                    next();
+                } else {
+                    next(new errors.UpdateError('no "assets" image found'));
+                }
+            });
+        },
+
+        function haveImageAlready(ctx, next) {
+            if (ctx.service) {
+                next();
+                return;
+            }
+
+            arg.sdcadm.imgapi.listImages({
+                name: 'assets'
+            }, function listLocalImgsCb(err, images) {
+                if (err) {
+                    next(err);
+                    return;
+                } else if (images && images.length) {
+                    ctx.img = images[images.length - 1];
+                } else {
+                    ctx.imgsToDownload.push(ctx.img);
+                }
+                next();
+            });
+        },
+
+        /* @field ctx.userScript */
+        shared.getUserScript,
+
+        function createSvc(ctx, next) {
+            if (ctx.service) {
+                next();
+                return;
+            }
+            // We want to skip couple next functions if we're not adding
+            // service here:
+            ctx.checkInstances = true;
+
+            const meta = app.metadata;
+            var domain = meta.datacenter_name + '.' +
+                    meta.dns_domain;
+            var svcDomain = ctx.svcData.name + '.' + domain;
+
+            arg.progress('Creating "assets" service');
+            ctx.svcData.params.image_uuid = ctx.img.uuid;
+            ctx.svcData.metadata['user-script'] = ctx.userScript;
+            ctx.svcData.metadata.SERVICE_DOMAIN = svcDomain;
+            ctx.svcData.params.billing_id = ctx.pkg.uuid;
+            ctx.svcData.metadata.resolvers = meta.binder_admin_ips;
+            ctx.svcData.metadata.ufds_ldap_root_dn = meta.ufds_ldap_root_dn;
+            ctx.svcData.metadata.ufds_ldap_root_pw = meta.ufds_ldap_root_pw;
+            ctx.svcData.metadata.ufds_admin_ips = meta.ufds_admin_ips;
+            ctx.svcData.metadata['registrar-config'].registration.domain =
+                svcDomain;
+            ctx.svcData.metadata['registrar-config'].registration.service
+                .service.srvce = '_' + ctx.svcData.name;
+            ctx.svcData.metadata['registrar-config'].zookeeper.servers =
+                meta.ZK_SERVERS.map(function mapZkSrv(srv) {
+                    return ({ host: srv.host, port: srv.port });
+                });
+            delete ctx.svcData.params.package_name;
+
+            arg.sdcadm.sapi.createService('assets', app.uuid,
+                    ctx.svcData, function createSvcCb(err, svc) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+                ctx.service = svc;
+                arg.log.info({svc: svc}, 'created assets svc');
+                next();
+            });
+        },
+        function getSvcVmsFromVmapi(ctx, next) {
+            if (!ctx.checkInstances) {
+                next();
+                return;
+            }
+
+            arg.sdcadm.vmapi.listVms({
+                'tag.smartdc_role': 'assets',
+                state: 'running',
+                owner_uuid: arg.sdcadm.config.ufds_admin_uuid
+            }, function listVmsCb(vmsErr, vms) {
+                if (vmsErr) {
+                    next(new errors.SDCClientError(vmsErr, 'vmapi'));
+                    return;
+                }
+                ctx.vms = vms;
+                next();
+            });
+        },
+        function addSvcInstsToSapi(ctx, next) {
+            if (!ctx.checkInstances) {
+                next();
+                return;
+            }
+
+            vasync.forEachParallel({
+                inputs: ctx.vms,
+                func: function createInst(vm, nextVm) {
+                    arg.sdcadm.sapi.createInstance(ctx.service.uuid, {
+                        uuid: vm.uuid,
+                        params: {
+                            alias: vm.alias
+                        },
+                        exists: true
+                    }, function createInstCb(createErr) {
+                        if (createErr) {
+                            nextVm(new errors.SDCClientError(createErr,
+                                'sapi'));
+                            return;
+                        }
+                        nextVm();
+                    });
+                }
+            }, next);
+        }
+    ]}, cb);
+}
 // --- exports
 
 module.exports = {
     sapiEnsureAgentServices: sapiEnsureAgentServices,
     sapiAssertFullMode: sapiAssertFullMode,
-    sapiFixInstanceAlias: sapiFixInstanceAlias
+    sapiFixInstanceAlias: sapiFixInstanceAlias,
+    sapiensureAssetsService: ensureAssetsService
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/package.json b/package.json
index 6618f80..55a4df8 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.20.1",
+  "version": "1.20.2",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
