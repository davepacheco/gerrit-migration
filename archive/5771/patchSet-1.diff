commit e32f607f233b508d8f4f465c2eba4b98e46e5f0c
Author: Trent Mick <trentm@gmail.com>
Date:   2019-03-11T17:45:38-07:00 (7 months ago)
    
    TRITON-1300 add sdcadm CLI.ui interface for improving CLI output

diff --git a/CHANGES.md b/CHANGES.md
index d8b79e5..623b2c8 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 # sdcadm Changelog
 
+## 1.24.9
+
+- TRITON-1300 Start improving CLI output with a `<cli>.ui` interface. So far
+  only `sdcadm experimental update-gz-tools` has been updated to use it.
+
 ## 1.24.8
 
 - TRITON-1293 Correct the interpretation of whether a server is running from
diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 0cbdbee..95df3c4 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -16,7 +16,6 @@ var util = require('util');
 var format = util.format;
 
 var assert = require('assert-plus');
-var ProgressBar = require('progbar').ProgressBar;
 var vasync = require('vasync');
 
 var common = require('../common');
@@ -26,18 +25,12 @@ var ur = require('../ur');
 
 function UpdateGzTools(opts) {
     assert.object(opts, 'opts');
-    assert.object(opts.log, 'opts.log');
-    assert.object(opts.sdcadm, 'opts.sdcadm');
-    assert.func(opts.progress, 'opts.progress');
     assert.string(opts.uuid, 'opts.uuid');
     assert.optionalArrayOfString(opts.includeServerNames,
         'opts.includeServerNames');
     assert.optionalArrayOfString(opts.excludeServerNames,
         'opts.excludeServerNames');
 
-    this.log = opts.log;
-    this.sdcadm = opts.sdcadm;
-    this.progress = opts.progress;
     this.uuid = opts.uuid;
     this.includeServerNames = opts.includeServerNames;
     this.excludeServerNames = opts.excludeServerNames;
@@ -60,27 +53,29 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     assert.object(args, 'args');
     assert.func(callback, 'callback');
 
+    assert.object(opts.log, 'opts.log');
+    assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.object(opts.ui, 'opts.ui');
     assert.string(opts.image, 'opts.image');
     assert.number(opts.concurrency, 'opts.concurrency');
     assert.optionalBool(opts.justDownload, 'opts.justDownload');
     assert.optionalBool(opts.forceReinstall, 'opts.forceReinstall');
-    assert.func(opts.progress, 'opts.progress');
 
     var self = this;
     var localdir = '/var/tmp';
-    var log = self.log;
+    var log = opts.log;
     var deleteOnFinish = true;
     var filepath;
     var image;
     var sdcZone;
-    var progress = opts.progress;
     var timestamp = Math.floor(new Date().getTime() / 1000);
     var tmpToolsDir = format('%s/gz-tools', localdir);
     var justDownload = opts.justDownload;
     var forceReinstall = opts.forceReinstall;
     var localVersion;
     var useFile = false;
-    var sdcadm = self.sdcadm;
+    var sdcadm = opts.sdcadm;
+    var ui = opts.ui;
 
     function findTarballImageLatest(cb) {
         var filter = {
@@ -114,10 +109,9 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     }
 
     function downloadTarballImage(cb) {
-        progress('Downloading gz-tools');
-        progress(common.indent(util.format('image: %s (%s)',
-                        image.uuid, image.version)));
-        progress(common.indent(util.format('to: %s', filepath)));
+        ui.info('Downloading gz-tools');
+        ui.info(common.indent('image: %s (%s)'), image.uuid, image.version);
+        ui.info(common.indent('to: %s'), filepath);
 
         function onImage(err) {
             if (err) {
@@ -131,7 +125,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     }
 
     function validateTarballFiles(cb) {
-        progress('Validating gz-tools tarball files');
+        ui.info('Validating gz-tools tarball files');
         vasync.pipeline({ funcs: [
             function checkScriptsDir(_, next) {
                 fs.stat(tmpToolsDir + '/scripts', function statCb(er, st) {
@@ -202,7 +196,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     }
 
     function updateSdcFiles(cb) {
-        progress('Updating "sdc" zone tools');
+        ui.info('Updating "sdc" zone tools');
         vasync.pipeline({funcs: [
             function removeSymlink(_, next) {
                 var argv = ['rm', '-rf', '/opt/smartdc/sdc'];
@@ -247,10 +241,10 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     }
 
     function updateScripts(cb) {
-        progress('Updating global zone scripts');
-        vasync.pipeline({arg: {progress: progress}, funcs: [
+        ui.info('Updating global zone scripts');
+        vasync.pipeline({arg: {progress: ui.progressFunc()}, funcs: [
             function mountUsbKey(_, next) {
-                progress('Mounting USB key');
+                ui.info('Mounting USB key');
                 common.mountUsbKey(sdcadm.log, next);
             },
 
@@ -276,6 +270,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 common.execFilePlus({argv: argv, log: sdcadm.log}, next);
             },
 
+            // This requires the `ctx.progress` in this vasync.pipeline `arg`.
             steps.usbkey.removeOldCNToolsTarballs,
 
             function backupCNToolsFile(_, next) {
@@ -380,14 +375,14 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 
 
             function unmountUsbKey(_, next) {
-                progress('Unmounting USB key');
+                ui.info('Unmounting USB key');
                 common.unmountUsbKey(sdcadm.log, next);
             }
         ]}, cb);
     }
 
     function cleanup(cb) {
-        progress('Cleaning up gz-tools tarball');
+        ui.info('Cleaning up gz-tools tarball');
         fs.unlink(filepath, function (err) {
             if (err) {
                 sdcadm.log.warn(err, 'unlinking %s', filepath);
@@ -411,7 +406,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 }
                 if (opts.image === 'latest' ||
                         !fs.existsSync(opts.image)) {
-                    progress('Using channel %s', channel);
+                    ui.info('Using channel %s', channel);
                 }
                 next();
             });
@@ -445,13 +440,13 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                         return;
                     }
                     localVersion = data.trim();
-                    progress('UUID of latest installed gz-tools image ' +
-                                    'is:\n  %s\n', localVersion);
+                    ui.info('UUID of latest installed gz-tools image ' +
+                        'is:\n  %s\n', localVersion);
                     if (!useFile && localVersion === image.uuid &&
                             !forceReinstall) {
-                        progress('Image %s is already installed.',
+                        ui.info('Image %s is already installed.',
                                 localVersion);
-                        progress('Please re-run with `--force-reinstall` ' +
+                        ui.info('Please re-run with `--force-reinstall` ' +
                                 'if you want to override installed image');
                         callback();
                         return;
@@ -495,7 +490,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 next();
                 return;
             }
-            progress('Finding servers to update');
+            ui.info('Finding servers to update');
 
             steps.servers.selectServers({
                 log: log,
@@ -520,7 +515,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 
         function downloadTarball(_, next) {
             if (filepath) {
-                progress('Using gz-tools tarball file %s', filepath);
+                ui.info('Using gz-tools tarball file %s', filepath);
                 next();
             } else {
                 if (image.name !== 'gz-tools') {
@@ -531,7 +526,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 filepath = format('%s/gz-tools-%s.tgz', localdir, image.uuid);
 
                 if (fs.existsSync(filepath)) {
-                    progress('Using gz-tools tarball file %s ' +
+                    ui.info('Using gz-tools tarball file %s ' +
                             'from previous download', filepath);
                     next();
                 } else {
@@ -553,7 +548,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 '-C', localdir
             ];
 
-            progress('Decompressing gz-tools tarball');
+            ui.info('Decompressing gz-tools tarball');
             common.execFilePlus({argv: argv, log: sdcadm.log}, next);
         },
 
@@ -619,7 +614,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 
             common.urDiscovery({
                 sdcadm: sdcadm,
-                progress: progress,
+                progress: ui.progressFunc(),
                 nodes: ctx.servers.map(
                     function (s) {
                         return s.uuid;
@@ -641,7 +636,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                 return;
             }
 
-            progress('Starting cn_tools update on %d servers',
+            ui.info('Starting cn_tools update on %d servers',
                 ctx.urServersToUpdate.length);
 
             assert.ok(net.isIPv4(sdcadm.config.assets_admin_ip),
@@ -710,27 +705,24 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                         sdcadm: sdcadm,
                         urConnection: ctx.urconn,
                         log: sdcadm.log,
-                        progress: progress,
+                        ui: ui,
                         command: cmd.str,
                         concurrency: opts.concurrency,
                         timeout: cmd.timeout
                     };
 
-                    var bar;
-                    if (process.stderr.isTTY) {
-                        bar = new ProgressBar({
-                            size: ctx.urServersToUpdate.length,
-                            bytes: false,
-                            filename: cmd.progbarName
-                        });
-                        queueOpts.progbar = bar;
-                    }
+                    ui.barStart({
+                        name: cmd.progbarName,
+                        size: ctx.urServersToUpdate.length
+                    });
                     sdcadm.log.trace({
                         command: cmd.str,
                         concurrency: opts.concurrency
                     }, 'runUrQueue');
 
                     var rq = ur.runQueue(queueOpts, function qCb(err, results) {
+                        ui.barEnd();
+
                         if (err) {
                             nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
@@ -770,11 +762,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
                                 errmsg += ' (log file on server: ' +
                                     cmd.logFile + ')';
                             }
-                            if (bar) {
-                                bar.log(errmsg);
-                            } else {
-                                console.log(errmsg);
-                            }
+                            ui.error(errmsg);
                         }
                     });
 
@@ -805,7 +793,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
  */
 function do_update_gz_tools(subcmd, opts, args, cb) {
     var self = this;
-    var progress = self.progress;
+    var ui = self.ui;
     var execStart = Date.now();
 
     assert.object(opts, 'opts');
@@ -820,7 +808,7 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
         if (err) {
             return cb(err);
         }
-        progress('Updated gz-tools successfully (elapsed %ds).',
+        ui.info('Updated gz-tools successfully (elapsed %ds).',
             Math.floor((Date.now() - execStart) / 1000));
         return cb();
     }
@@ -842,17 +830,16 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
             }
 
             var proc = new UpdateGzTools({
-                sdcadm: self.sdcadm,
-                log: self.log,
                 uuid: self.top.uuid,
-                progress: self.progress,
                 includeServerNames: opts.servers,
                 excludeServerNames: opts.exclude_servers
             });
 
             proc.execute({
+                ui: ui,
+                log: self.log,
+                sdcadm: self.sdcadm,
                 image: opts.latest ? 'latest' : args[0],
-                progress: progress,
                 justDownload: opts.just_download,
                 forceReinstall: opts.force_reinstall,
                 concurrency: opts.concurrency
diff --git a/lib/cli/experimental.js b/lib/cli/experimental.js
index 111dbf7..164532a 100644
--- a/lib/cli/experimental.js
+++ b/lib/cli/experimental.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -44,7 +44,8 @@ util.inherits(ExperimentalCLI, Cmdln);
 
 ExperimentalCLI.prototype.init = function init(_opts, _args, _callback) {
     this.sdcadm = this.top.sdcadm;
-    this.progress = this.top.progress;
+    this.progress = this.top.progress; // Deprecated. Use `ui`.
+    this.ui = this.top.ui;
     this.log = this.top.log;
 
     Cmdln.prototype.init.apply(this, arguments);
diff --git a/lib/cli/index.js b/lib/cli/index.js
index c46e0fc..cbe44e1 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -23,7 +23,6 @@ var strsplit = require('strsplit');
 var vasync = require('vasync');
 var VError = require('verror').VError;
 var uuid = require('node-uuid');
-var extsprintf = require('extsprintf');
 
 var common = require('../common');
 var errors = require('../errors');
@@ -35,6 +34,7 @@ var PlatformCLI = require('../platform').PlatformCLI;
 var ChannelCLI = require('../channel').ChannelCLI;
 var DCMaintCLI = require('../dc-maint').DCMaintCLI;
 var defFabric = require('../default-fabric');
+var UI = require('./ui');
 
 
 // --- globals
@@ -179,16 +179,9 @@ CLI.prototype.init = function init(opts, args, callback) {
     }
     this.opts = opts;
 
-    /**
-     * Call this to emit a progress message to the "user" on stdout.
-     * Takes args like `console.log(...)`.
-     */
-    this.progress = function progress() {
-        var args_ = Array.prototype.slice.call(arguments);
-        var msg = extsprintf.sprintf.apply(null, args_);
-        self.log.debug({progress: true}, msg);
-        console.log(msg);
-    };
+    this.ui = new UI({log: self.log});
+    // Deprecated. All code should move to using `this.ui.info`.
+    this.progress = this.ui.progressFunc();
 
     // Cmdln class handles `opts.help`.
     Cmdln.prototype.init.call(this, opts, args, function (err) {
diff --git a/lib/cli/ui.js b/lib/cli/ui.js
new file mode 100644
index 0000000..504a36f
--- /dev/null
+++ b/lib/cli/ui.js
@@ -0,0 +1,174 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+/*
+ * A class to capture all/most output on the CLI. Typically the sdcadm CLI
+ * will have an instanced of this at `this.ui`. Sdcadm code should use that
+ * to write output for the user.
+ *
+ * Backwards compat: Not all sdcadm code has been migrated to use this. There
+ * is still a lot of usage of a `progress` function and `ProgressBar`s.
+ *
+ * Usage in sdcadm code:
+ *
+ * - get the `<cli>.ui` object
+ * - `ui.info(...)` for printf-style message output to stdout
+ * - `ui.error(...)` for printf-style error message output to stdout. If on
+ *   a TTY, this is colored red. Otherwise it is the same as `ui.info`.
+ * - To use a progress bar:kkkkk
+ *      - call `ui.barStart({name: 'NAME', size: SIZE})`
+ *      - call `ui.barAdvance(N)` to advance progress
+ *      - call `ui.barEnd()` when complete.
+ *   These methods know to avoid using a progress bar if output is not to a
+ *   TTY. `ui.info` and `ui.error` know to use `<bar>.log` when a progress bar
+ *   is active.
+ */
+
+'use strict';
+
+var format = require('util').format;
+
+var assert = require('assert-plus');
+var ProgressBar = require('progbar').ProgressBar;
+var VError = require('verror');
+
+
+// ---- internal support stuff
+
+// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
+// Suggested colors (some are unreadable in common cases):
+// - Good: cyan, yellow (limited use), bold, green, magenta, red
+// - Bad: grey (same color as background on Solarized Dark theme from
+//   <https://github.com/altercation/solarized>, see issue #160)
+var colors = {
+    'bold': [1, 22],
+    'italic': [3, 23],
+    'underline': [4, 24],
+    'inverse': [7, 27],
+    'white': [37, 39],
+    'grey': [90, 39],
+    'black': [30, 39],
+    'blue': [34, 39],
+    'cyan': [36, 39],
+    'green': [32, 39],
+    'magenta': [35, 39],
+    'red': [31, 39],
+    'yellow': [33, 39]
+};
+
+function stylizeWithColor(str, color) {
+    if (!str)
+        return '';
+    var codes = colors[color];
+    if (codes) {
+        return '\x1b[' + codes[0] + 'm' + str + '\x1b[' + codes[1] + 'm';
+    } else {
+        return str;
+    }
+}
+
+function stylizeWithoutColor(str, _color) {
+    return str;
+}
+
+
+
+// ---- UI
+
+function UI(opts) {
+    assert.object(opts.log, 'opts.log');
+    assert.optionalBool(opts.color, 'opts.color');
+
+    this.log = opts.log.child({ui: true}, true);
+
+    // We support ANSI escape code coloring (currently just used for `ui.error`)
+    // if writing to a TTY. Use `SDCADM_NO_COLOR=1` envvar to disable.
+    var color = opts.color;
+    if (color === null || color === undefined) {
+        if (process.env.SDCADM_NO_COLOR &&
+                process.env.SDCADM_NO_COLOR.length > 0) {
+            color = false;
+        } else {
+            color = process.stdout.isTTY;
+        }
+    }
+    this._stylize = (color ? stylizeWithColor : stylizeWithoutColor);
+}
+
+// Temporary convenience function for parts of sdcadm that still use the
+// old `progress` function for emitting text to the user.
+UI.prototype.progressFunc = function progressFunc() {
+    return this.info.bind(this);
+};
+
+UI.prototype.info = function info() {
+    var msgArgs = Array.prototype.slice.call(arguments);
+    var msg = format.apply(null, msgArgs);
+    this.log.debug(msg);
+    if (this._bar) {
+        this._bar.log(msg);
+    } else  {
+        console.log(msg);
+    }
+};
+
+UI.prototype.error = function error() {
+    var msgArgs = Array.prototype.slice.call(arguments);
+    var msg = format.apply(null, msgArgs);
+    this.log.debug(msg);
+    var styled = this._stylize(msg, 'red');
+    if (this._bar) {
+        this._bar.log(styled);
+    } else  {
+        console.log(styled);
+    }
+};
+
+// Start a progress bar.
+//
+// This will be a no-op for cases where a progress bar is inappropriate
+// (e.g. if stderr is not a TTY).
+UI.prototype.barStart = function barStart(opts) {
+    assert.string(opts.name, 'opts.name');
+    assert.finite(opts.size, 'opts.size');
+
+    if (this._bar) {
+        throw new VError('another progress bar (%s) is currently active',
+            this._bar.filename);
+    } else if (process.stderr.isTTY) {
+        this._bar = new ProgressBar({
+            filename: opts.name,
+            size: opts.size,
+            // ProgressBar began life assuming it was progress for a file
+            // download. Hence `*file*name`. To avoid it appending size suffixes
+            // like "KB" and "MB" we need to explicitly `bytes: false`.
+            bytes: false
+        });
+        this._bar.draw();
+    }
+};
+
+UI.prototype.barEnd = function barEnd() {
+    if (this._bar) {
+        this._bar.end();
+        delete this._bar;
+    }
+};
+
+UI.prototype.barAdvance = function barAdvance(n) {
+    if (this._bar) {
+        this._bar.advance(n);
+    }
+};
+
+
+// --- exports
+
+module.exports = UI;
diff --git a/lib/ur.js b/lib/ur.js
index dddd199..6cb3acf 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -125,9 +125,8 @@ function runQueue(options, callback) {
         sdcadm: 'object',
         urConnection: 'object',
         log: 'object',
+        ui: 'object',
         onCompletionFunc: 'optionalFunc',
-        progress: 'func',
-        progbar: 'optionalObject',
         get: 'optionalString',
         put: 'optionalString',
         dir: 'optionalString',
@@ -138,12 +137,7 @@ function runQueue(options, callback) {
     assert.func(callback, 'callback');
 
     var log = options.log;
-    var progress = options.progress;
-    var bar = options.progbar;
-
-    function info(msg) {
-        return (bar) ? bar.log(msg) : progress(msg);
-    }
+    var ui = options.ui;
 
     // Results for each node:
     var results = [];
@@ -174,12 +168,6 @@ function runQueue(options, callback) {
         };
     }
 
-    if (bar) {
-        bar.advance(0); // Draw initial progbar at 0.
-        // NOTE: we don't need to .draw() here because advance(0) will draw the
-        // bar since the pb_lastdrawtime starts at 0.
-    }
-
     var rq = urclient.create_run_queue(opts);
 
     /*
@@ -199,8 +187,8 @@ function runQueue(options, callback) {
     options.urConnection.on('error', aborter);
 
     rq.on('dispatch', function onDispatch(server) {
-        log.debug(format('Ur running command on %s (%s)',
-                server.uuid, server.hostname));
+        log.debug('Ur running command on %s (%s)',
+            server.uuid, server.hostname);
     });
 
     rq.on('success', function onSuccess(server, result) {
@@ -217,10 +205,8 @@ function runQueue(options, callback) {
             options.onCompletionFunc(server, result);
         }
 
-        if (bar) {
-            bar.advance(1);
-            bar.draw();
-        }
+        ui.barAdvance(1);
+
         if (options.get || options.put) {
             rr.result = {
                 stdout: 'ok',
@@ -233,15 +219,15 @@ function runQueue(options, callback) {
         results.push(rr);
         log.trace({
             results: rr
-        }, format('Ur run ok on %s (%s)', server.uuid, server.hostname));
+        }, 'Ur run ok on %s (%s)', server.uuid, server.hostname);
     });
 
     rq.on('failure', function onFailure(server, error) {
         var msg = format('Ur error on %s (%s): %s', server.uuid,
-                server.hostname, error.message);
-        info(msg);
+            server.hostname, error.message);
+        ui.error(msg);
         if (error.stderr) {
-            info('  :: stderr:\n' + error.stderr);
+            ui.error('  :: stderr:\n' + error.stderr);
         }
 
         // We have this here so that the caller can hook in before we advance
@@ -252,10 +238,7 @@ function runQueue(options, callback) {
             options.onCompletionFunc(server, {error: error});
         }
 
-        if (bar) {
-            bar.advance(1);
-            bar.draw();
-        }
+        ui.barAdvance(1);
         log.error({err: error, server: server}, msg);
 
         var rr = {
diff --git a/package.json b/package.json
index 816b7eb..2937825 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.24.8",
+  "version": "1.24.9",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
