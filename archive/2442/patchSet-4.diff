commit 9affa3fe999f75987470f727e03cbddf91c892e3 (refs/changes/42/2442/4)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-09-25T20:42:15+00:00 (2 years ago)
    
    OS-6300 vmadm and vmadmd create zonecfg race

diff --git a/src/Makefile b/src/Makefile
index be456c64..7858a286 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -92,6 +92,7 @@ JS_CHECK_TARGETS=\
 	vm/node_modules/openonerrlogger.js \
 	vm/node_modules/vmload/*.js \
 	vm/node_modules/sysevent-stream.js \
+	vm/node_modules/zonecfg.js \
 	img/lib/*.js \
 	img/sbin/imgadm \
 	vm/common/nictag.js \
diff --git a/src/manifest b/src/manifest
index 47fe91a8..2833b911 100644
--- a/src/manifest
+++ b/src/manifest
@@ -543,6 +543,7 @@ f usr/vm/node_modules/vmload/vmload-xml.js 0644 root root
 f usr/vm/node_modules/vmload/dump-json.js 0755 root root
 f usr/vm/node_modules/vmload/index.js 0644 root root
 f usr/vm/node_modules/VM.js 0444 root bin
+f usr/vm/node_modules/zonecfg.js 0444 root bin
 f usr/vm/smf/system-vmadmd 0555 root bin
 f usr/vm/smf/system-vmadmd.xml 0444 root bin
 # fwadm
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 92b4e1f5..8fb8ed12 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -98,6 +98,7 @@ var util = require('util');
 var utils = require('./utils');
 var vasync = require('/usr/vm/node_modules/vasync');
 var vmload = require('vmload');
+var zonecfg = require('/usr/vm/node_modules/zonecfg');
 
 // pull in stuff from generated props (originating in proptable.js)
 var BRAND_OPTIONS = properties.BRAND_OPTIONS;
@@ -2351,7 +2352,7 @@ function createHostConfFileMounts(vmobj, opts, log, callback) {
 
         zcfg = buildFilesystemZonecfg({}, fake_payload);
 
-        zonecfgFile(zcfg, ['-z', vmobj.zonename], log,
+        zonecfg(vmobj.zonename, ['-z', vmobj.zonename], {log: log, stdin: zcfg},
             function (zcfg_err, fds) {
                 if (zcfg_err) {
                     log.error({
@@ -2565,26 +2566,27 @@ function createFilesystems(payload, filesystems, log, callback)
                 cb(new Error('createFilesystems() do not recognize source'));
             }
         }, function (err) {
-            // send the zonecfg data we just generated as a file to zonecfg,
+            // send the zonecfg data we just generated as stdin to zonecfg,
             // this will create the zone.
-            zonecfgFile(zcfg, ['-z', payload.zonename], log,
+            zonecfg(payload.zonename, ['-z', payload.zonename],
+                {log: log, stdin: zcfg},
                 function (zcfg_err, fds) {
-                    if (zcfg_err) {
-                        log.error({
-                            err: zcfg_err,
-                            zcfg: zcfg,
-                            stdout: fds.stdout,
-                            stderr: fds.stderr
-                        }, 'failed to modify zonecfg');
-                        callback(zcfg_err);
-                        return;
-                    }
 
-                    log.debug({stdout: fds.stdout, stderr: fds.stderr},
-                        'modified zonecfg');
-                    callback();
+                if (zcfg_err) {
+                    log.error({
+                        err: zcfg_err,
+                        zcfg: zcfg,
+                        stdout: fds.stdout,
+                        stderr: fds.stderr
+                    }, 'failed to modify zonecfg');
+                    callback(zcfg_err);
+                    return;
                 }
-            );
+
+                log.debug({stdout: fds.stdout, stderr: fds.stderr},
+                    'modified zonecfg');
+                callback();
+            });
         });
     });
 }
@@ -3392,58 +3394,6 @@ function writeZoneconfig(payload, log, callback)
     }
 }
 
-function zonecfg(args, log, callback)
-{
-    var cmd = '/usr/sbin/zonecfg';
-
-    assert(log, 'no logger passed to zonecfg()');
-
-    traceExecFile(cmd, args, log, 'zonecfg', function (error, stdout, stderr) {
-        if (error) {
-            callback(error, {'stdout': stdout, 'stderr': stderr});
-        } else {
-            callback(null, {'stdout': stdout, 'stderr': stderr});
-        }
-    });
-}
-
-function zonecfgFile(data, args, log, callback)
-{
-    var tmpfile = '/tmp/zonecfg.' + process.pid + '.tmp';
-    var tracers_obj;
-
-    assert(log, 'no logger passed to zonecfgFile()');
-
-    if (process.env.EXPERIMENTAL_VMJS_TRACING) {
-        tracers_obj = traceUntilCallback('zonecfg-file', log, callback);
-        callback = tracers_obj.callback;
-        log = tracers_obj.log;
-    }
-
-    log.debug({data: data}, tmpfile + ' contents');
-
-    fs.writeFile(tmpfile, data, function (err, result) {
-        if (err) {
-            // On failure we don't delete the tmpfile so we can debug it.
-            callback(err);
-        } else {
-            args.push('-f');
-            args.push(tmpfile);
-
-            zonecfg(args, log, function (e, fds) {
-                if (e) {
-                    // keep temp file around for investigation
-                    callback(e, fds);
-                } else {
-                    fs.unlink(tmpfile, function () {
-                        callback(null, fds);
-                    });
-                }
-            });
-        }
-    });
-}
-
 function zoneadm(args, log, callback)
 {
     var cmd = '/usr/sbin/zoneadm';
@@ -5131,7 +5081,9 @@ function createDelegatedDataset(payload, log, callback)
             }
 
             zcfg = zcfg + 'add dataset; set name=' + ds + '; end\n';
-            zonecfg(['-u', payload.uuid, zcfg], log, function (e, fds) {
+            zonecfg(payload.uuid, ['-u', payload.uuid, zcfg], {log: log},
+                function (e, fds) {
+
                 if (e) {
                     log.error({'err': e, stdout: fds.stdout,
                         stderr: fds.stderr}, 'unable to add delegated dataset '
@@ -6715,7 +6667,8 @@ exports.markVMFailure = function (vmobj, options, callback)
         zcfg = 'remove -F attr name=failed; add attr; set name=failed; '
             + 'set value="provisioning"; set type=string; end';
 
-        zonecfg(['-u', vmobj.uuid, zcfg], log, function (zonecfg_err, fds) {
+        zonecfg(vmobj.uuid, ['-u', vmobj.uuid, zcfg], {log: log},
+            function (zonecfg_err, fds) {
 
             if (zonecfg_err) {
                 log.error({err: zonecfg_err, stdout: fds.stdout,
@@ -8155,9 +8108,11 @@ function createZone(payload, log, callback)
     // we're talking about a new machine.
     zcfg = zcfg + buildZonecfgUpdate({}, payload, log);
 
-    // send the zonecfg data we just generated as a file to zonecfg,
+    // send the zonecfg data we just generated as stdin to zonecfg,
     // this will create the zone.
-    zonecfgFile(zcfg, ['-z', payload.zonename], log, function (err, fds) {
+    zonecfg(payload.zonename, ['-z', payload.zonename],
+        {log: log, stdin: zcfg}, function (err, fds) {
+
         if (err) {
             log.error({err: err, zcfg: zcfg, stdout: fds.stdout,
                 stderr: fds.stderr}, 'failed to modify zonecfg');
@@ -8648,8 +8603,8 @@ exports.unsetTransition = function (vmobj, options, callback)
         log = tracers_obj.log;
     }
 
-    zonecfg(['-u', vmobj.uuid, 'remove -F attr name=transition'], log,
-        function (err, fds) {
+    zonecfg(vmobj.uuid, ['-u', vmobj.uuid, 'remove -F attr name=transition'],
+        {log: log}, function (err, fds) {
 
         if (err) {
             // log at info because this might be because already removed
@@ -8660,8 +8615,8 @@ exports.unsetTransition = function (vmobj, options, callback)
                 'removed transition for zone ' + vmobj.uuid);
         }
 
-        zonecfg(['-u', vmobj.uuid, 'info attr name=transition'], log,
-            function (info_err, info_fds) {
+        zonecfg(vmobj.uuid, ['-u', vmobj.uuid, 'info attr name=transition'],
+            {log: log}, function (info_err, info_fds) {
 
             if (info_err) {
                 log.error({err: info_err, stdout: info_fds.stdout,
@@ -8732,7 +8687,9 @@ function setTransition(vmobj, transition, target, timeout, log, callback)
             var zcfg;
 
             zcfg = buildTransitionZonecfg(transition, target, timeout);
-            zonecfg(['-u', vmobj.uuid, zcfg], log, function (err, fds) {
+            zonecfg(vmobj.uuid, ['-u', vmobj.uuid, zcfg], {log: log},
+                function (err, fds) {
+
                 if (err) {
                     log.error({err: err, stdout: fds.stdout,
                         stderr: fds.stderr}, 'failed to set transition='
@@ -9469,7 +9426,7 @@ exports.reprovision = function (uuid, payload, options, callback)
             // update zone's image_uuid field
             var zcfg = 'select attr name=dataset-uuid; set value="'
                 + payload.image_uuid + '"; end';
-            zonecfg(['-u', uuid, zcfg], log, function (err, fds) {
+            zonecfg(uuid, ['-u', uuid, zcfg], {log: log}, function (err, fds) {
                 if (err) {
                     log.error({err: err, stdout: fds.stdout,
                         stderr: fds.stderr}, 'unable to set image_uuid on VM '
@@ -10203,7 +10160,9 @@ function deleteZone(uuid, log, callback)
         // TODO: replace these next two with VM.stop(..{force: true} ?
         }, function (cb) {
             log.debug('setting autoboot=false');
-            zonecfg(['-u', uuid, 'set autoboot=false'], log, function (e, fds) {
+            zonecfg(uuid, ['-u', uuid, 'set autoboot=false'], {log: log},
+                function (e, fds) {
+
                 if (e) {
                     log.warn({err: e, stdout: fds.stdout, stderr: fds.stderr},
                         'Error setting autoboot=false');
@@ -10274,8 +10233,8 @@ function deleteZone(uuid, log, callback)
             if (vmobj.zonename) {
                 log.debug('deleting zone');
                 // XXX for some reason -u <uuid> doesn't work with delete
-                zonecfg(['-z', vmobj.zonename, 'delete', '-F'], log,
-                    function (e, fds) {
+                zonecfg(vmobj.zonename, ['-z', vmobj.zonename, 'delete', '-F'],
+                    {log: log}, function (e, fds) {
 
                     if (e) {
                         log.warn({err: e, stdout: fds.stdout,
@@ -10568,7 +10527,7 @@ function startZone(vmobj, opts, callback)
                 }, 'docker VM has restart policy, setting autoboot');
             }
 
-            zonecfg(['-u', uuid, set_autoboot], log,
+            zonecfg(uuid, ['-u', uuid, set_autoboot], {log: log},
                 function (err, autoboot_fds) {
 
                 if (err) {
@@ -10588,21 +10547,21 @@ function startZone(vmobj, opts, callback)
                 cb();
                 return;
             }
-            zonecfg(['-u', uuid, 'remove attr name=never-booted' ], log,
-                function (err, neverbooted_fds) {
-                    // Ignore errors here, because we're started.
-                    if (err) {
-                        log.warn({err: err, stdout: neverbooted_fds.stdout,
-                            stderr: neverbooted_fds.stderr}, 'failed to remove '
-                            + 'never-booted flag');
-                    } else {
-                        log.debug({stdout: neverbooted_fds.stdout,
-                            stderr: neverbooted_fds.stderr}, 'removed '
-                            + 'never-booted flag');
-                    }
-                    cb();
+            zonecfg(uuid, ['-u', uuid, 'remove attr name=never-booted' ],
+                {log: log}, function (err, neverbooted_fds) {
+
+                // Ignore errors here, because we're started.
+                if (err) {
+                    log.warn({err: err, stdout: neverbooted_fds.stdout,
+                        stderr: neverbooted_fds.stderr}, 'failed to remove '
+                        + 'never-booted flag');
+                } else {
+                    log.debug({stdout: neverbooted_fds.stdout,
+                        stderr: neverbooted_fds.stderr}, 'removed '
+                        + 'never-booted flag');
                 }
-            );
+                cb();
+            });
         }
     ], function (err) {
         if (!err) {
@@ -13452,10 +13411,12 @@ exports.update = function (uuid, payload, options, callback)
             });
         }, function (cb) {
             var zcfg;
-            // generate a payload and send as a file to zonecfg to update
-            // the zone.
+            // generate a payload and send as stdin to zonecfg to update the
+            // zone.
             zcfg = buildZonecfgUpdate(vmobj, payload, log);
-            zonecfgFile(zcfg, ['-u', uuid], log, function (e, fds) {
+            zonecfg(uuid, ['-u', uuid], {log: log, stdin: zcfg},
+                function (e, fds) {
+
                 if (e) {
                     log.error({err: e, stdout: fds.stdout, stderr: fds.stderr},
                         'unable to update zonecfg');
@@ -13568,7 +13529,7 @@ function halt(uuid, log, callback)
             } else {
                 log.debug({stdout: fds.stdout, stderr: fds.stderr},
                     'zoneadm halted VM ' + uuid);
-                zonecfg(['-u', uuid, unset_autoboot], log,
+                zonecfg(uuid, ['-u', uuid, unset_autoboot], {log: log},
                     function (error, unset_fds) {
 
                     if (error) {
@@ -13840,7 +13801,7 @@ function doDockerStop(vmobj, options, callback)
         });
     }
 
-    zonecfg(['-u', vmobj.uuid, unset_autoboot], log,
+    zonecfg(vmobj.uuid, ['-u', vmobj.uuid, unset_autoboot], {log: log},
         function (zonecfg_err, fds) {
 
         if (zonecfg_err) {
@@ -13963,7 +13924,7 @@ function doVmadmdStop(vmobj, options, callback)
             var unset_autoboot = 'select attr name=vm-autoboot; '
                 + 'set value=false; end';
 
-            zonecfg(['-u', vmobj.uuid, unset_autoboot], log,
+            zonecfg(vmobj.uuid, ['-u', vmobj.uuid, unset_autoboot], {log: log},
                 function (err, fds) {
                     if (err) {
                         // The vm is dead at this point, failing
@@ -14026,7 +13987,7 @@ function doShutdownStop(vmobj, options, callback)
                 cb();
             });
         }, function (cb) {
-            zonecfg(['-u', vmobj.uuid, unset_autoboot], log,
+            zonecfg(vmobj.uuid, ['-u', vmobj.uuid, unset_autoboot], {log: log},
                 function (err, fds) {
 
                 if (err) {
@@ -14140,7 +14101,9 @@ exports.stop = function (uuid, options, callback)
             }
 
             log.debug('setting autoboot=false');
-            zonecfg(['-u', uuid, unset_autoboot], log, function (e, fds) {
+            zonecfg(uuid, ['-u', uuid, unset_autoboot], {log: log},
+                function (e, fds) {
+
                 if (e) {
                     log.warn({err: e, stdout: fds.stdout, stderr: fds.stderr},
                         'Error setting autoboot=false');
diff --git a/src/vm/node_modules/zonecfg.js b/src/vm/node_modules/zonecfg.js
new file mode 100644
index 00000000..ef2d284b
--- /dev/null
+++ b/src/vm/node_modules/zonecfg.js
@@ -0,0 +1,135 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright 2017, Joyent, Inc.
+ *
+ * Zonecfg wrapper with a per-zone lock file
+ */
+
+var cp = require('child_process');
+var util = require('util');
+
+var assert = require('/usr/node/node_modules/assert-plus');
+var lock = require('/usr/vm/node_modules/locker').lock;
+var vasync = require('/usr/vm/node_modules/vasync');
+
+var LOCK_PATH = '/var/run/.vm.%s.zonecfg.lockfile';
+
+module.exports = zonecfg;
+
+/*
+ * Call zonecfg(1M) with a given set of arguments and optional stdin data.
+ * A lock file will be acquired (based on the id given as the first argument,
+ * typically a zonename) to ensure that only one instance of zonecfg will be
+ * run at a time per zone.
+ *
+ * Example:
+ *
+ * var zonename = 'ac1946a2-fa79-47c7-9bc3-729fcc5a19d2';
+ * var cmd = 'set autoboot=false';
+ *
+ * zonecfg(zonename, ['-u', zonename, cmd], {log: log}, function (e, fds) {
+ *     if (e) {
+ *         // command exited non-zero or failed to spawn for some reason
+ *         throw e;
+ *     }
+ *
+ *     // fds.stdout and fds.stderr set
+ * });
+ */
+function zonecfg(id, args, opts, cb) {
+    assert.uuid(id, 'id');
+    assert.arrayOfString(args, 'args');
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.optionalString(opts.stdin, 'opts.stdin');
+    assert.optionalBool(opts.useZonename, 'opts.useZonename');
+    assert.func(cb, 'cb');
+
+    var cmd = 'zonecfg';
+    var file = util.format(LOCK_PATH, id);
+    var child;
+    var unlock;
+    var execOpts = {
+        encoding: 'utf8'
+    };
+    var ret = {};
+    var log = opts.log.child({cmd: cmd, args: args, file: file});
+
+    vasync.pipeline({funcs: [
+        function (_, cb2) {
+            // acquire lock
+            log.debug('acquiring lock %s', file);
+
+            lock(file, function (err, _unlock) {
+                if (err) {
+                    log.error({err: err}, 'failed to acquire lock %s', file);
+                    cb2(err);
+                    return;
+                }
+
+                log.debug('acquired lock %s', file);
+
+                unlock = _unlock;
+                cb2();
+            });
+        }, function (_, cb2) {
+            log.debug('calling %s', cmd);
+
+            child = cp.execFile(cmd, args, execOpts,
+                function (err, stdout, stderr) {
+
+                ret.stderr = stderr;
+                ret.stdout = stdout;
+
+                if (err) {
+                    log.error({err: err}, '%s call failed', cmd);
+                    cb2(err);
+                    return;
+                }
+
+                log.debug({ret: ret}, '%s ran successfully', cmd);
+                cb2();
+            });
+
+            if (opts.stdin !== undefined) {
+                log.debug({stdin: opts.stdin}, 'writing to stdin');
+                child.stdin.write(opts.stdin);
+                child.stdin.end();
+            }
+        }
+    ]}, function (err) {
+        if (!unlock) {
+            cb(err, ret);
+            return;
+        }
+
+        unlock(function (unlock_err) {
+            /*
+             * Ensure that any error encountered from the above pipeline is
+             * preserved when firing the final callback.
+             */
+            var e = err || unlock_err;
+            cb(e, ret);
+        });
+    });
+}
diff --git a/src/vm/sbin/vmadmd.js b/src/vm/sbin/vmadmd.js
index 734445f2..b37d3504 100755
--- a/src/vm/sbin/vmadmd.js
+++ b/src/vm/sbin/vmadmd.js
@@ -29,11 +29,9 @@ var assert = require('/usr/node/node_modules/assert-plus');
 var async = require('/usr/node/node_modules/async');
 var bunyan = require('/usr/node/node_modules/bunyan');
 var cp = require('child_process');
-var consts = require('constants');
 var EventEmitter = require('events').EventEmitter;
 var execFile = cp.execFile;
 var fs = require('fs');
-var lock = require('/usr/vm/node_modules/locker').lock;
 var mod_nic = require('/usr/vm/node_modules/nic');
 var net = require('net');
 var VM = require('/usr/vm/node_modules/VM');
@@ -46,6 +44,7 @@ var SyseventStream = require('/usr/vm/node_modules/sysevent-stream');
 var url = require('url');
 var util = require('util');
 var vasync = require('vasync');
+var zonecfg = require('/usr/vm/node_modules/zonecfg');
 
 /*
  * The DOCKER_RUNTIME_DELAY_RESET parameter is used when restarting a Docker VM
@@ -119,20 +118,6 @@ function zfs(args, callback)
     });
 }
 
-function zonecfg(args, callback)
-{
-    var cmd = '/usr/sbin/zonecfg';
-
-    log.debug(cmd + ' ' + args.join(' '));
-    execFile(cmd, args, function (error, stdout, stderr) {
-        if (error) {
-            callback(error, {'stdout': stdout, 'stderr': stderr});
-        } else {
-            callback(null, {'stdout': stdout, 'stderr': stderr});
-        }
-    });
-}
-
 /*
  * This function gets the runtime of the last run of a stopped zone by comparing
  * the mtime of the /lastbooted and /lastexited files.
@@ -2091,9 +2076,10 @@ function upgradeVM(vmobj, fields, callback)
 
                 image_uuid = origin.split('@')[0].split('/').pop();
                 log.info('setting new image_uuid: ' + image_uuid);
-                zonecfg(['-z', vmobj.zonename, 'add attr; '
+                zonecfg(vmobj.zonename, ['-z', vmobj.zonename, 'add attr; '
                     + 'set name=dataset-uuid; set type=string; set value="'
-                    + image_uuid + '"; end'],
+                    + image_uuid + '"; end'], {log: log},
+
                     function (add_err, add_fds) {
                         if (add_err) {
                             log.error(add_err);
@@ -2200,18 +2186,18 @@ function upgradeVM(vmobj, fields, callback)
             });
         }, function (cb) {
             if (vmobj.hasOwnProperty('default_gateway')) {
-                zonecfg(['-z', vmobj.zonename,
-                    'remove attr name=default-gateway'],
+                zonecfg(vmobj.zonename, ['-z', vmobj.zonename,
+                    'remove attr name=default-gateway'], {log: log},
                     function (err, fds) {
-                        if (err) {
-                            log.error(err);
-                            cb(err);
-                            return;
-                        }
-                        log.info('removed default-gateway');
-                        cb();
+
+                    if (err) {
+                        log.error(err);
+                        cb(err);
+                        return;
                     }
-                );
+                    log.info('removed default-gateway');
+                    cb();
+                });
             } else {
                 cb();
             }
@@ -2250,19 +2236,20 @@ function upgradeVM(vmobj, fields, callback)
 
                 log.info('creation time: ' + creation_timestamp + ' from ZFS');
 
-                zonecfg(['-z', vmobj.zonename, 'add attr; '
+                zonecfg(vmobj.zonename, ['-z', vmobj.zonename, 'add attr; '
                     + 'set name=create-timestamp; set type=string; '
                     + 'set value="' + creation_timestamp + '"; end'],
+                    {log: log},
                     function (zcfg_err, zcfg_fds) {
-                        if (zcfg_err) {
-                            log.error(zcfg_err);
-                            cb(zcfg_err);
-                            return;
-                        }
-                        log.info('set create-timestamp: ' + creation_timestamp);
-                        cb();
+
+                    if (zcfg_err) {
+                        log.error(zcfg_err);
+                        cb(zcfg_err);
+                        return;
                     }
-                );
+                    log.info('set create-timestamp: ' + creation_timestamp);
+                    cb();
+                });
             });
         }, function (cb) {
             // in SDC7 *_pw keys do not work in customer_metadata and must be in
@@ -2336,18 +2323,19 @@ function upgradeVM(vmobj, fields, callback)
         }, function (cb) {
             // zonecfg update vm-version = 1
             log.debug('setting vm-version = 1');
-            zonecfg(['-z', vmobj.zonename, 'add attr; set name=vm-version; '
-                + 'set type=string; set value=1; end'],
+            zonecfg(vmobj.zonename, ['-z', vmobj.zonename,
+                'add attr; set name=vm-version; set type=string; set value=1; '
+                + 'end'], {log: log},
                 function (err, fds) {
-                    if (err) {
-                        log.error(err);
-                        cb(err);
-                        return;
-                    }
-                    log.info('set vm-version = 1');
-                    cb();
+
+                if (err) {
+                    log.error(err);
+                    cb(err);
+                    return;
                 }
-            );
+                log.info('set vm-version = 1');
+                cb();
+            });
         }, function (cb) {
             // reload VM so we get all the updated properties
             VM.load(vmobj.uuid, {fields: fields, log: log},
