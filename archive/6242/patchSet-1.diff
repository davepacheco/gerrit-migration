From bb8f1e0b0387f6f0c5849e166dba073363a6fb85 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 14 May 2019 18:52:32 +0200
Subject: [PATCH] TRITON-1321 fwapi needs to support log boolean on rules

---
 lib/rule.js          | 16 +++++++++++-
 package.json         |  2 +-
 test/invalid.test.js |  8 +++---
 test/rule.test.js    | 61 +++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 81 insertions(+), 6 deletions(-)

diff --git a/lib/rule.js b/lib/rule.js
index 8032a3f..6904fe0 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2019, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: firewall rule model
@@ -48,6 +48,7 @@ var FIELDS = [
     'description',
     'enabled',
     'global',
+    'log',
     'owner_uuid',
     'rule',
     'uuid',
@@ -379,6 +380,18 @@ function FwRule(data, opts) {
         this.enabled = false;
     }
 
+    if (hasOwnProperty(data, 'log')) {
+        if (!validators.bool(data.log)) {
+            errs.push(new validators.InvalidParamError('log',
+                'log must be true or false'));
+        }
+
+        this.log = data.log;
+    } else {
+        this.log = false;
+    }
+
+
     for (var s in STRING_PROPS) {
         var str = STRING_PROPS[s];
         if (hasOwnProperty(data, str)) {
@@ -591,6 +604,7 @@ FwRule.prototype.raw = function () {
     var raw = {
         action: this.action,
         enabled: this.enabled,
+        log: this.log,
         from: this.from,
         priority: this.priority,
         protocol: this.protocol,
diff --git a/package.json b/package.json
index 960f1f5..667744f 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "fwrule",
   "description": "Parser for Joyent firewall rules",
-  "version": "2.0.0",
+  "version": "2.1.0",
   "author": "Joyent (joyent.com)",
   "keywords": [ "smartos", "triton" ],
   "repository": {
diff --git a/test/invalid.test.js b/test/invalid.test.js
index 00d3f4c..48e73b5 100644
--- a/test/invalid.test.js
+++ b/test/invalid.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2019, Joyent, Inc. All rights reserved.
  *
  *
  * Negative unit tests for the firewall rule object
@@ -404,6 +404,7 @@ test('Invalid parameters', function (t) {
     var thrown = false;
     var invalid = {
         enabled: 'invalid',
+        log: 'invalid',
         rule: 'invalid',
         owner_uuid: 'invalid',
         uuid: 'invalid'
@@ -416,7 +417,7 @@ test('Invalid parameters', function (t) {
 
         t.ok(err.hasOwnProperty('ase_errors'), 'multiple errors');
         if (err.hasOwnProperty('ase_errors')) {
-            t.equal(err.ase_errors.length, 4, '4 sub-errors');
+            t.equal(err.ase_errors.length, 5, '5 sub-errors');
             t.deepEqual(err.ase_errors.map(function (e) {
                 return [ e.field, e.message ];
             }), [
@@ -424,7 +425,8 @@ test('Invalid parameters', function (t) {
                     + 'expected: \'FROM\', found: word'],
                 ['uuid', 'Invalid rule UUID'],
                 ['owner_uuid', 'Invalid owner UUID'],
-                ['enabled', 'enabled must be true or false']
+                ['enabled', 'enabled must be true or false'],
+                ['log', 'log must be true or false']
             ], 'sub-errors');
         }
     }
diff --git a/test/rule.test.js b/test/rule.test.js
index 9d46806..b54a8aa 100644
--- a/test/rule.test.js
+++ b/test/rule.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2019, Joyent, Inc. All rights reserved.
  *
  *
  * Unit tests for the firewall rule object
@@ -85,6 +85,7 @@ function testTagInRules(t, unquotedOK, txtIn, txtOut, val) {
             created_by: 'fwadm',
             description: desc,
             enabled: true,
+            log: false,
             ports: [ 80 ],
             action: 'allow',
             priority: 0,
@@ -102,6 +103,7 @@ function testTagInRules(t, unquotedOK, txtIn, txtOut, val) {
             created_by: 'fwadm',
             description: desc,
             enabled: true,
+            log: false,
             global: true,
             rule: ruleOut,
             uuid: rule.uuid,
@@ -178,6 +180,7 @@ test('all target types', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -195,6 +198,7 @@ test('all target types', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: util.format('FROM (ip %s OR subnet %s OR tag "%s" OR vm %s) '
             + 'TO (ip %s OR subnet %s OR tag "%s" OR vm %s) ALLOW tcp PORT 80',
@@ -245,6 +249,7 @@ test('any', function (t) {
             wildcards: ['any']
         },
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -262,6 +267,7 @@ test('any', function (t) {
         enabled: true,
         global: true,
         rule: ruleTxt,
+        log: false,
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
@@ -299,6 +305,7 @@ test('all vms', function (t) {
             wildcards: ['vmall']
         },
         enabled: true,
+        log: false,
         owner_uuid: owner,
         ports: [ 80 ],
         action: 'allow',
@@ -316,6 +323,7 @@ test('all vms', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         // no global flag set because the rule has an owner_uuid
         owner_uuid: owner,
         rule: ruleTxt,
@@ -337,6 +345,7 @@ test('tags', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [ '1.2.3.4' ],
             vms: [],
@@ -362,6 +371,7 @@ test('tags', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        log: false,
         rule: 'FROM ip 1.2.3.4 TO tag "some-tag" ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
@@ -383,6 +393,7 @@ test('tag "hasOwnProperty"', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [ '1.2.3.4' ],
             vms: [],
@@ -408,6 +419,7 @@ test('tag "hasOwnProperty"', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        log: false,
         rule: 'FROM ip 1.2.3.4 TO (tag "hasOwnProperty" OR tag "some-tag") '
             + 'ALLOW tcp PORT 80',
         uuid: rule.uuid,
@@ -441,6 +453,7 @@ test('multiple ports and owner_uuid', function (t) {
     var raw = {
         action: 'allow',
         enabled: inRule1.enabled,
+        log: false,
         from: {
             ips: [ '10.88.88.1' ],
             vms: [],
@@ -469,6 +482,7 @@ test('multiple ports and owner_uuid', function (t) {
 
     t.deepEqual(rule1.serialize(), {
         enabled: true,
+        log: false,
         owner_uuid: inRule1.owner_uuid,
         rule: inRule1.rule,
         uuid: rule1.uuid,
@@ -484,6 +498,7 @@ test('multiple ports and owner_uuid', function (t) {
 
     t.deepEqual(rule2.serialize(), {
         enabled: true,
+        log: false,
         owner_uuid: inRule2.owner_uuid,
         rule: inRule1.rule,
         uuid: rule2.uuid,
@@ -522,6 +537,7 @@ test('icmp', function (t) {
             wildcards: []
         },
         enabled: true,
+        log: false,
         types: [ '8' ],
         action: 'allow',
         priority: 0,
@@ -537,6 +553,7 @@ test('icmp', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -575,6 +592,7 @@ test('icmp with code', function (t) {
             wildcards: []
         },
         enabled: true,
+        log: false,
         types: [ '8:0' ],
         action: 'allow',
         priority: 0,
@@ -591,6 +609,7 @@ test('icmp with code', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
+        log: false,
         rule: ruleTxt,
         uuid: rule.uuid,
         version: rule.version
@@ -629,6 +648,7 @@ test('icmp: multiple types', function (t) {
             wildcards: []
         },
         enabled: true,
+        log: false,
         types: [ '8:0', '11:0', '30' ],
         action: 'allow',
         priority: 0,
@@ -648,6 +668,7 @@ test('icmp: multiple types', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
+        log: false,
         rule: ruleTxt,
         uuid: rule.uuid,
         version: rule.version
@@ -685,6 +706,7 @@ test('sorting: icmp codes', function (t) {
             wildcards: []
         },
         enabled: true,
+        log: false,
         types: [ '3:1', '3:5', '3:11', '8:0', '30', '40' ],
         action: 'allow',
         priority: 0,
@@ -700,6 +722,7 @@ test('sorting: icmp codes', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         global: true,
         rule: util.format(
         'FROM any TO vm %s ALLOW icmp '
@@ -741,6 +764,7 @@ test('sorting: icmp6 codes', function (t) {
             wildcards: []
         },
         enabled: true,
+        log: false,
         types: [ '3:1', '3:5', '3:11', '8:0', '30', '40' ],
         action: 'allow',
         priority: 0,
@@ -756,6 +780,7 @@ test('sorting: icmp6 codes', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         global: true,
         rule: util.format(
         'FROM any TO vm %s ALLOW icmp6 '
@@ -782,6 +807,7 @@ test('sorting: ports', function (t) {
     var raw = {
         action: 'allow',
         enabled: inRule.enabled,
+        log: false,
         from: {
             ips: [ '10.88.88.1' ],
             vms: [],
@@ -807,6 +833,7 @@ test('sorting: ports', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         global: true,
         rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + '(PORT 6 AND PORT 10 AND PORT 80 AND PORT 1002 AND PORT 1052 '
@@ -831,6 +858,7 @@ test('sorting: port ranges', function (t) {
     var raw = {
         action: 'allow',
         enabled: inRule.enabled,
+        log: false,
         from: {
             ips: [ '10.88.88.1' ],
             vms: [],
@@ -861,6 +889,7 @@ test('sorting: port ranges', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: true,
+        log: false,
         global: true,
         rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + 'PORTS 6 - 11, 10, 20 - 40, 80, 1002, 1052, 30245',
@@ -884,6 +913,7 @@ test('single port range', function (t) {
     var raw = {
         action: 'allow',
         enabled: inRule.enabled,
+        log: false,
         from: {
             ips: [ '10.88.88.1' ],
             vms: [],
@@ -910,6 +940,7 @@ test('single port range', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
+        log: false,
         rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + 'PORTS 50 - 50',
         uuid: rule.uuid,
@@ -936,6 +967,7 @@ test('port ALL', function (t) {
         var raw = {
             action: 'allow',
             enabled: inRule.enabled,
+            log: false,
             from: {
                 ips: [ '10.88.88.1' ],
                 vms: [],
@@ -963,6 +995,7 @@ test('port ALL', function (t) {
 
         t.deepEqual(rule.serialize(), {
             enabled: true,
+            log: false,
             global: true,
             rule: normalText,
             uuid: rule.uuid,
@@ -985,6 +1018,7 @@ test('tags: equal', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [ '1.2.3.4' ],
             vms: [],
@@ -1010,6 +1044,7 @@ test('tags: equal', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        log: false,
         rule: 'FROM ip 1.2.3.4 TO tag "some-tag" = "value" ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
@@ -1033,6 +1068,7 @@ test('multiple tags: equal', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [ '1.2.3.4' ],
             vms: [],
@@ -1061,6 +1097,7 @@ test('multiple tags: equal', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        log: false,
         rule: 'FROM ip 1.2.3.4 TO '
             + '(tag "some-tag" = "value" OR tag "some-tag" = "value2")'
             + ' ALLOW tcp PORT 80',
@@ -1086,6 +1123,7 @@ test('multiple tags: multiple values', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [],
             vms: [],
@@ -1114,6 +1152,7 @@ test('multiple tags: multiple values', function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        log: false,
         // 'some-tag = value0' is a subset of 'tag some-tag', so it is not
         // included in the rule text
         rule: 'FROM tag "some-tag" TO '
@@ -1146,6 +1185,7 @@ test('multiple tags: multiple quoted values', function (t) {
     var raw = {
         action: 'allow',
         enabled: false,
+        log: false,
         from: {
             ips: [],
             vms: [],
@@ -1177,6 +1217,7 @@ test('multiple tags: multiple quoted values', function (t) {
 
     t.deepEqual(rule.serialize(), {
         enabled: false,
+        log: false,
         owner_uuid: owner,
         rule: 'FROM (tag "김치" = "白김치" '
             + 'OR tag "김치" = "백김치") TO '
@@ -1231,6 +1272,7 @@ test('IPv6 sources', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -1248,6 +1290,7 @@ test('IPv6 sources', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -1296,6 +1339,7 @@ test('IPv6 subnet sources', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -1313,6 +1357,7 @@ test('IPv6 subnet sources', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -1361,6 +1406,7 @@ test('IPv6 destinations', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -1378,6 +1424,7 @@ test('IPv6 destinations', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -1426,6 +1473,7 @@ test('IPv6 subnet destinations', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'block',
         priority: 0,
@@ -1443,6 +1491,7 @@ test('IPv6 subnet destinations', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -1493,6 +1542,7 @@ test('Mixed IPv4 and IPv6', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -1510,6 +1560,7 @@ test('Mixed IPv4 and IPv6', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         global: true,
         rule: ruleTxt,
         uuid: rule.uuid,
@@ -1783,6 +1834,7 @@ test('Priority levels', function (t) {
             created_by: 'fwadm',
             description: desc,
             enabled: true,
+            log: false,
             action: 'allow',
             uuid: rule.uuid,
             version: rule.version
@@ -1802,6 +1854,7 @@ test('Priority levels', function (t) {
             description: desc,
             enabled: true,
             global: true,
+            log: false,
             rule: ruleTxt,
             uuid: rule.uuid,
             version: rule.version
@@ -1843,6 +1896,7 @@ test('Priority level 0 is implicit', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         ports: [ 80 ],
         action: 'allow',
         priority: 0,
@@ -1861,6 +1915,7 @@ test('Priority level 0 is implicit', function (t) {
         description: desc,
         enabled: true,
         global: true,
+        log: false,
         rule: 'FROM tag "a" TO tag "b" ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
@@ -1901,6 +1956,7 @@ test('AH protocol', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         action: 'allow',
         priority: 0,
         protocol: 'ah',
@@ -1918,6 +1974,7 @@ test('AH protocol', function (t) {
         description: desc,
         enabled: true,
         global: true,
+        log: false,
         rule: ruleTxt,
         uuid: rule.uuid,
         version: rule.version
@@ -1958,6 +2015,7 @@ test('ESP protocol', function (t) {
         created_by: 'fwadm',
         description: desc,
         enabled: true,
+        log: false,
         action: 'allow',
         priority: 0,
         protocol: 'esp',
@@ -1975,6 +2033,7 @@ test('ESP protocol', function (t) {
         description: desc,
         enabled: true,
         global: true,
+        log: false,
         rule: ruleTxt,
         uuid: rule.uuid,
         version: rule.version
-- 
2.21.0

