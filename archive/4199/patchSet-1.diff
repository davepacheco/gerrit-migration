From 528ce00bf2989ae1e6e54b690aed7f3af4dd7129 Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Tue, 22 May 2018 20:52:25 +0000
Subject: [PATCH] OS-6717 bhyve brand boot should not succeed until bhyve
 allocates resources

---
 manifest                                   |   1 +
 usr/src/cmd/bhyve/Makefile                 |   3 +-
 usr/src/cmd/bhyve/bhyverun.c               |  69 ++++++++++++-
 usr/src/cmd/zoneadmd/zoneadmd.c            |  32 ++++++
 usr/src/lib/brand/bhyve/zone/Makefile      |   6 +-
 usr/src/lib/brand/bhyve/zone/bhyve_brand.h |  24 +++++
 usr/src/lib/brand/bhyve/zone/boot.c        |  18 +++-
 usr/src/lib/brand/bhyve/zone/bootwait.c    | 107 +++++++++++++++++++++
 usr/src/lib/brand/bhyve/zone/statechange   |   5 +
 9 files changed, 254 insertions(+), 11 deletions(-)
 create mode 100644 usr/src/lib/brand/bhyve/zone/bhyve_brand.h
 create mode 100644 usr/src/lib/brand/bhyve/zone/bootwait.c

diff --git a/manifest b/manifest
index 9fd4c31472..a04c328c52 100644
--- a/manifest
+++ b/manifest
@@ -5100,6 +5100,7 @@ d usr/lib/brand/bhyve 0555 root sys
 f usr/lib/brand/bhyve/attach 0555 root sys
 f usr/lib/brand/bhyve/bhhwcompat 0555 root sys
 f usr/lib/brand/bhyve/boot 0555 root sys
+f usr/lib/brand/bhyve/bootwait 0555 root sys
 f usr/lib/brand/bhyve/detach 0555 root sys
 f usr/lib/brand/bhyve/uninstall 0555 root sys
 f usr/lib/brand/bhyve/config.xml 0444 root sys
diff --git a/usr/src/cmd/bhyve/Makefile b/usr/src/cmd/bhyve/Makefile
index 554603d4f8..22150df26a 100644
--- a/usr/src/cmd/bhyve/Makefile
+++ b/usr/src/cmd/bhyve/Makefile
@@ -83,7 +83,7 @@ OBJS = $(SRCS:.c=.o)
 CLOBBERFILES =	$(ROOTUSRSBINPROG) $(ZHYVE)
 
 ZHYVE_DIR =	$(ROOT)/usr/lib/brand/bhyve
-ZHYVE_PROG = 	zhyve
+ZHYVE_PROG =	zhyve
 ZHYVE =		$(ZHYVE_DIR)/$(ZHYVE_PROG)
 
 MEVENT_TEST_PROG = mevent_test
@@ -104,6 +104,7 @@ CPPFLAGS =	-I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
 		-I$(SRC)/uts/common \
 		-I$(SRC)/uts/i86pc \
 		-I$(SRC)/lib/libdladm/common \
+		-I$(SRC)/lib/brand/bhyve/zone \
 		-DWITHOUT_CAPSICUM
 
 # Disable the crypto code until it is wired up
diff --git a/usr/src/cmd/bhyve/bhyverun.c b/usr/src/cmd/bhyve/bhyverun.c
index b12fba0800..f83d48d399 100644
--- a/usr/src/cmd/bhyve/bhyverun.c
+++ b/usr/src/cmd/bhyve/bhyverun.c
@@ -80,6 +80,8 @@ __FBSDID("$FreeBSD$");
 
 #ifndef __FreeBSD__
 #include <sys/stat.h>
+#include <fcntl.h>
+#include "bhyve_brand.h"
 #endif
 
 #include "bhyverun.h"
@@ -969,22 +971,75 @@ do_open(const char *vmname)
 
 #define	FILE_PROVISIONING	"/var/svc/provisioning"
 #define	FILE_PROVISION_SUCCESS	"/var/svc/provision_success"
+#define	FILE_PROVISION_FAILURE	"/var/svc/provision_failure"
 
+static boolean_t guest_booted = B_FALSE;
+
+/*
+ * This is only relevant to the first boot after provisioning.  It is monitored
+ * by VM.js.
+ *
+ * XXX Code reviewers please comment:
+ *
+ *	If provisioning is renamed to provision_failure, vmadm still considers
+ *	it provisioned, as explained in this comment.
+ *
+ *              // So long as /var/svc/provisioning is gone, we don't care what
+ *              // replaced it.  Success or failure of user script doesn't
+ *              // matter for the state, it's provisioned now. Caller should
+ *              // now clear the transition.
+ *
+ *	If we don't rename provisioning and allow bhyve to exit, vmadm has to
+ *	wait for the timeout and then sets the status to failed.  Having to wait
+ *	many minutes for a failure that may have been evident within a fraction
+ *	of a second is a bad experience as well.
+ *
+ *	It would seem better if the exit value of 'zoneadm boot' could be used.
+ *	That causes problems explained in /usr/lib/brand/jcommon/statechange and
+ *	more verbosely in OS-6717.
+ */
 static void
-mark_provisioned(void)
+mark_provisioned(boolean_t success)
 {
 	struct stat stbuf;
+	const char *fname;
 
 	if (lstat(FILE_PROVISIONING, &stbuf) != 0)
 		return;
 
-	if (rename(FILE_PROVISIONING, FILE_PROVISION_SUCCESS) != 0) {
+	fname = success ? FILE_PROVISION_SUCCESS : FILE_PROVISION_FAILURE;
+	if (rename(FILE_PROVISIONING, fname) != 0) {
 		(void) fprintf(stderr, "Cannot rename %s to %s: %s\n",
-		    FILE_PROVISIONING, FILE_PROVISION_SUCCESS,
-		    strerror(errno));
+		    FILE_PROVISIONING, fname, strerror(errno));
+	}
+}
+
+static void
+mark_guest_ready(void)
+{
+	/*
+	 * This is is monitored by /usr/lib/brand/bhyve/bootwait as part of a
+	 * postboot hook.
+	 */
+	if (unlink(BHYVE_BOOT_WAIT_FILE) == -1) {
+		(void) fprintf(stderr, "Failed to remove %s\n",
+		    BHYVE_BOOT_WAIT_FILE);
 	}
+
+	mark_provisioned(B_TRUE);
+
+	guest_booted = B_TRUE;
 }
 
+static void
+mark_guest_dead(void)
+{
+	if (guest_booted) {
+		return;
+	}
+
+	mark_provisioned(B_FALSE);
+}
 #endif
 
 int
@@ -1012,6 +1067,10 @@ main(int argc, char *argv[])
 	rtc_localtime = 1;
 	memflags = 0;
 
+#ifndef __FreeBSD__
+	(void) atexit(mark_guest_dead);
+#endif
+
 #ifdef	__FreeBSD__
 	optstr = "abehuwxACHIPSWYp:g:G:c:s:m:l:B:U:";
 #else
@@ -1261,7 +1320,7 @@ main(int argc, char *argv[])
 	fbsdrun_addcpu(ctx, BSP, BSP, rip);
 
 #ifndef __FreeBSD__
-	mark_provisioned();
+	mark_guest_ready();
 #endif
 
 	/*
diff --git a/usr/src/cmd/zoneadmd/zoneadmd.c b/usr/src/cmd/zoneadmd/zoneadmd.c
index 71ded8ba0c..7d1aab350f 100644
--- a/usr/src/cmd/zoneadmd/zoneadmd.c
+++ b/usr/src/cmd/zoneadmd/zoneadmd.c
@@ -1782,6 +1782,38 @@ server(void *cookie, char *args, size_t alen, door_desc_t *dp,
 	 */
 	zlog.locale = kernelcall ? DEFAULT_LOCALE : zargp->locale;
 
+	/*
+	 * The system must be able to deal with a zone dying while "lock" is
+	 * held (e.g. via "poweroff" within bhyve) so we just as well let
+	 * "zoneadm halt" and guest initiated "halt" have the same power.
+	 * Otherwise, a zone that is stuck between boot and postboot can block
+	 * halt forever.
+	 */
+	if (!in_death_throes && cmd == Z_HALT &&
+	    zone_get_state(zone_name, &zstate) == Z_OK &&
+	    zstate == ZONE_STATE_RUNNING) {
+		if (kernelcall) {
+			log_init_exit(init_status);
+		} else {
+			log_init_exit(-1);
+		}
+		if ((rval = zone_halt(zlogp, B_FALSE, B_FALSE, zstate,
+		    debug)) == 0) {
+			eventstream_write(Z_EVT_ZONE_HALTED);
+			zcons_statechanged();
+
+			/*
+			 * The zone should now come down quickly, unwedging
+			 * other server() threads.  Take the lock and proceed
+			 * with the normal return path.
+			 */
+			(void) mutex_lock(&lock);
+
+			eventstream_write(Z_EVT_NULL);
+			goto out;
+		}
+	}
+
 	(void) mutex_lock(&lock);
 
 	/*
diff --git a/usr/src/lib/brand/bhyve/zone/Makefile b/usr/src/lib/brand/bhyve/zone/Makefile
index d7e957072c..88bd903b40 100644
--- a/usr/src/lib/brand/bhyve/zone/Makefile
+++ b/usr/src/lib/brand/bhyve/zone/Makefile
@@ -19,13 +19,15 @@ PROGS =		attach detach statechange uninstall
 
 PROG1 =		boot
 PROG2 =		bhhwcompat
-PROGS +=	$(PROG1) $(PROG2)
-CLEANFILES +=	$(PROG1) $(PROG2)
+PROG3 =		bootwait
+PROGS +=	$(PROG1) $(PROG2) $(PROG3)
+CLEANFILES +=	$(PROG1) $(PROG2) $(PROG3)
 
 $(PROG1) :=	LDLIBS += -lnvpair
 $(PROG2) :=	CPPFLAGS = -I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
 	$(CPPFLAGS.master) -I$(SRC)/uts/i86pc \
 	-I$(COMPAT)/freebsd/amd64 -I$(CONTRIB)/freebsd/amd64
+$(PROG3) :=	LDLIBS += -lcontract
 
 TEMPLATES =	SYSbhyve.xml
 XMLDOCS =	config.xml platform.xml
diff --git a/usr/src/lib/brand/bhyve/zone/bhyve_brand.h b/usr/src/lib/brand/bhyve/zone/bhyve_brand.h
new file mode 100644
index 0000000000..42393109c5
--- /dev/null
+++ b/usr/src/lib/brand/bhyve/zone/bhyve_brand.h
@@ -0,0 +1,24 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+#ifndef INC_BRAND_BHYVE_H
+#define	INC_BRAND_BHYVE_H
+
+/* These paths must be relative to the zone root. */
+#define	BHYVE_DIR		"var/run/bhyve"
+#define	BHYVE_ARGS_FILE		BHYVE_DIR "/zhyve.cmd"
+#define	BHYVE_BOOT_WAIT_FILE	BHYVE_DIR "/bootwait"
+
+#endif
diff --git a/usr/src/lib/brand/bhyve/zone/boot.c b/usr/src/lib/brand/bhyve/zone/boot.c
index e29616a748..74ec910d66 100644
--- a/usr/src/lib/brand/bhyve/zone/boot.c
+++ b/usr/src/lib/brand/bhyve/zone/boot.c
@@ -32,9 +32,7 @@
 #include <unistd.h>
 #include <zone.h>
 
-/* These two paths must be relative to the zone root. */
-#define	BHYVE_DIR		"var/run/bhyve"
-#define	BHYVE_ARGS_FILE		BHYVE_DIR "/" "zhyve.cmd"
+#include "bhyve_brand.h"
 
 #define	ZH_MAXARGS		100
 
@@ -690,5 +688,19 @@ main(int argc, char **argv)
 		return (1);
 	}
 
+	/*
+	 * Create a file that bhyve will remove when boot completes.  bootwait
+	 * then waits for its removal as part of the post-boot hook.
+	 */
+	fd = openat(zrfd, BHYVE_BOOT_WAIT_FILE, O_CREAT|O_EXCL|O_WRONLY, 0600);
+	if (fd == -1 && errno != EEXIST) {
+		(void) fprintf(stderr, "Error: cannot create %s: %s\n",
+		    BHYVE_BOOT_WAIT_FILE, strerror(errno));
+		return (-1);
+	}
+	(void) close(fd);
+
+	(void) close(zrfd);
+
 	return (0);
 }
diff --git a/usr/src/lib/brand/bhyve/zone/bootwait.c b/usr/src/lib/brand/bhyve/zone/bootwait.c
new file mode 100644
index 0000000000..fad225093e
--- /dev/null
+++ b/usr/src/lib/brand/bhyve/zone/bootwait.c
@@ -0,0 +1,107 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * Usage:
+ *
+ * bootwait zonename
+ *
+ * This program enters the specified zone and waits for the removal of a file.
+ * The file is created by boot.c as part of the boot hook.  This program is used
+ * in a postboot hook to detect when the zone is ready to perform its duties.
+ * Something in the zone (i.e. bhyve) is expected to remove the wait file when
+ * it considers the boot to be complete.
+ *
+ * This program returns 0 on success or non-zero on failure.
+ *
+ * In the event that the zone is halted (e.g. due to death of its init process),
+ * this process will be killed, resulting in a non-zero exit value.
+ */
+
+#include <errno.h>
+#include <libzonecfg.h>
+#include <port.h>
+#include <stdio.h>
+#include <string.h>
+#include <zone.h>
+
+#include "bhyve_brand.h"
+
+int
+main(int argc, char **argv)
+{
+	const char *prog = argv[0];
+	const char *zonename = argv[1];
+	int portfd;
+	struct file_obj fobj = { 0 };
+	port_event_t pev;
+	timespec_t timeout = { 0 };
+	zoneid_t zid;
+
+	if (argc != 2) {
+		(void) fprintf(stderr, "Usage: %s zonename\n", prog);
+		return (1);
+	}
+
+	if ((zid = getzoneidbyname(zonename)) == ZONE_ID_UNDEFINED) {
+		(void) fprintf(stderr, "%s: No zone id for zone '%s'\n", prog,
+		    zonename);
+		return (1);
+	}
+
+	if (zone_enter(zid) == -1) {
+		(void) fprintf(stderr, "%s: Unable to enter zone %s: %s\n",
+		    prog, zonename, strerror(errno));
+		return (1);
+	}
+
+	if ((portfd = port_create()) == -1) {
+		(void) fprintf(stderr, "%s: port_create: %s\n", prog,
+		    strerror(errno));
+		return (1);
+	}
+
+	/*
+	 * Start watching for removals. We say that we are watching for
+	 * FILE_MODIFIED, but we really only care about the FILE_DELETE
+	 * exception.
+	 */
+	fobj.fo_name = BHYVE_BOOT_WAIT_FILE;
+
+	for (;;) {
+		if (port_associate(portfd, PORT_SOURCE_FILE, (uintptr_t)&fobj,
+		    FILE_MODIFIED, NULL) == -1) {
+			if (errno == ENOENT) {
+				/* Already removed */
+				return (0);
+			}
+			(void) fprintf(stderr, "%s: port_associate: %s\n", prog,
+			    strerror(errno));
+			return (1);
+		}
+
+		if (port_get(portfd, &pev, &timeout) == -1) {
+			(void) fprintf(stderr, "%s: port_get: %s\n", prog,
+			    strerror(errno));
+			return (1);
+		}
+
+		if ((pev.portev_events & FILE_DELETE) != 0) {
+			break;
+		}
+	}
+
+	return (0);
+}
diff --git a/usr/src/lib/brand/bhyve/zone/statechange b/usr/src/lib/brand/bhyve/zone/statechange
index 76cfbffc17..110456eda2 100644
--- a/usr/src/lib/brand/bhyve/zone/statechange
+++ b/usr/src/lib/brand/bhyve/zone/statechange
@@ -19,4 +19,9 @@ typeset -A FORCED_ATTRS
 FORCED_ATTRS["zlog-mode"]=g--
 FORCED_ATTRS["zlog-name"]=platform.log
 
+function bhyve_post_boot {
+	 ctrun -l child -o pgrponly /usr/lib/brand/bhyve/bootwait "$ZONENAME"
+	 return $?
+}
+
 . /usr/lib/brand/jcommon/statechange
-- 
2.21.0

