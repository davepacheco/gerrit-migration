commit 17ac361424f9a1253ae83e1cd0388a948bafa8cf (refs/changes/75/2275/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-07-25T01:53:48+00:00 (2 years, 2 months ago)
    
    joyent/gerritbot#2 `make check' bot needs its own `make check'

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..cd19503
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,21 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 6,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "es6": true,
+        "node": true
+    },
+    "rules": {
+        "no-mixed-spaces-and-tabs": "off"
+    }
+}
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..f9a9f9f
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,16 @@
+NPM		:= npm
+ESLINT		= ./node_modules/.bin/eslint
+JS_FILES	:= $(wildcard *.js)
+
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install \
+	    eslint@`json -f package.json devDependencies.eslint` \
+	    eslint-plugin-joyent@`json -f package.json devDependencies.eslint-plugin-joyent`
+
+.PHONY: check-eslint
+check-eslint: $(ESLINT)
+	$(ESLINT) $(JS_FILES)
+
+.PHONY: check
+check: | check-eslint
+	@echo check ok
diff --git a/agent.js b/agent.js
index 35e3555..eb1c5cb 100644
--- a/agent.js
+++ b/agent.js
@@ -7,6 +7,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
+const mod_fs = require('fs');
 const mod_ws = require('ws');
 const mod_cp = require('child_process');
 
diff --git a/package.json b/package.json
index 23cfb26..593173e 100644
--- a/package.json
+++ b/package.json
@@ -20,5 +20,9 @@
     "verror": "^1.6.1",
     "vstream-json-parser": "^1.0.0",
     "ws": "^1.1.1"
+  },
+  "devDependencies": {
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.1.0"
   }
 }
diff --git a/server.js b/server.js
index d149348..c3a8003 100644
--- a/server.js
+++ b/server.js
@@ -16,8 +16,6 @@ const mod_crypto = require('crypto');
 const mod_stream = require('stream');
 const mod_restify = require('restify-clients');
 const mod_sshpk = require('sshpk');
-const mod_tls = require('tls');
-const mod_cproc = require('child_process');
 const mod_events = require('events');
 const mod_http = require('http');
 const mod_vasync = require('vasync');
@@ -111,7 +109,7 @@ function spawnWorker() {
 			Binds: [],
 			Links: [],
 			LxcConf: {'lxc.utsname': 'docker'},
-			Memory: 2048*1024*1024,
+			Memory: 2048 * 1024 * 1024,
 			Dns: ['8.8.8.8', '8.8.4.4']
 		}
 	};
@@ -138,7 +136,7 @@ function spawnWorker() {
 				}
 			});
 		}
-	})
+	});
 }
 
 var slaves = [];
@@ -173,7 +171,7 @@ function SlaveConnection(opts) {
 	this.sc_log = opts.log;
 	this.sc_ws = undefined;
 	if (this.sc_log === undefined)
-		this.sc_log = bunyan.createLogger({ name: 'connection '});
+		this.sc_log = mod_bunyan.createLogger({ name: 'connection '});
 	this.sc_config = opts.config;
 	this.sc_uuid = undefined;
 	this.sc_kids = {};
@@ -647,13 +645,15 @@ SlaveConnection.prototype.state_running.report = function (S) {
 		var ls = this.sc_out;
 		var mode = 'none';
 		var esfile;
+		var c, m;
+
 		for (var i = 0; i < ls.length; ++i) {
 			if (ls[i].match(/^\s*$/))
 				continue;
 			if (mode === 'jsl') {
-				var m = ls[i].match(JSL_RE);
+				m = ls[i].match(JSL_RE);
 				if (m) {
-					var c = {};
+					c = {};
 					c.path = m[1];
 					c.line = parseInt(m[2], 10);
 					c.message = m[3];
@@ -666,9 +666,9 @@ SlaveConnection.prototype.state_running.report = function (S) {
 				}
 			}
 			if (mode === 'jsstyle') {
-				var m = ls[i].match(JSSTYLE_RE);
+				m = ls[i].match(JSSTYLE_RE);
 				if (m) {
-					var c = {};
+					c = {};
 					c.path = m[1];
 					c.line = parseInt(m[2], 10);
 					c.message = m[3];
@@ -681,14 +681,14 @@ SlaveConnection.prototype.state_running.report = function (S) {
 				}
 			}
 			if (mode === 'eslint') {
-				var m = ls[i].match(ESLINT_FILE_RE);
+				m = ls[i].match(ESLINT_FILE_RE);
 				if (m) {
 					esfile = m[1];
 					continue;
 				}
 				m = ls[i].match(ESLINT_RE);
 				if (m && esfile !== undefined) {
-					var c = {};
+					c = {};
 					c.path = esfile;
 					c.line = parseInt(m[1], 10);
 					c.message = m[3].trim();
@@ -699,9 +699,9 @@ SlaveConnection.prototype.state_running.report = function (S) {
 				}
 			}
 			if (mode === 'bashsty') {
-				var m = ls[i].match(BASHSTY_RE);
+				m = ls[i].match(BASHSTY_RE);
 				if (m) {
-					var c = {};
+					c = {};
 					c.path = m[1];
 					c.line = parseInt(m[2], 10);
 					c.message = m[3];
@@ -723,10 +723,10 @@ SlaveConnection.prototype.state_running.report = function (S) {
 		}
 
 		review.comments = {};
-		comments.forEach(function (c) {
-			if (review.comments[c.path] === undefined)
-				review.comments[c.path] = [];
-			review.comments[c.path].push(c);
+		comments.forEach(function (comment) {
+			if (review.comments[comment.path] === undefined)
+				review.comments[comment.path] = [];
+			review.comments[comment.path].push(comment);
 		});
 
 		if (comments.length < 1) {
@@ -796,6 +796,7 @@ SlaveConnection.prototype.state_closing = function (S) {
 	try {
 		this.sc_ws.send(JSON.stringify({ op: 'exit' }));
 	} catch (e) {
+		this.sc_log.warn({ err: e }, 'failed to send exit message');
 	}
 	this.sc_ws.close();
 	var idx = slaves.indexOf(this);
@@ -819,20 +820,22 @@ function RemoteReadable() {
 	mod_stream.Readable.call(this, {});
 }
 mod_util.inherits(RemoteReadable, mod_stream.Readable);
-RemoteReadable.prototype._read = function (size) {
+RemoteReadable.prototype._read = function (_size) {
 };
 
 SlaveConnection.prototype.handleMessage = function (msg) {
 	mod_assert.string(msg.cookie, 'msg.cookie');
 	var emitter = this.sc_kids[msg.cookie];
 	mod_assert.object(emitter, 'emitter for ' + msg.cookie);
+	var stream;
+
 	if (msg.event === 'data') {
-		var stream = emitter[msg.stream];
+		stream = emitter[msg.stream];
 		msg.data.forEach(function (d) {
 			stream.push(new Buffer(d, 'base64'));
 		});
 	} else if (msg.event === 'end') {
-		var stream = emitter[msg.stream];
+		stream = emitter[msg.stream];
 		stream.push(null);
 	} else if (msg.event === 'spawn') {
 		emitter.emit('spawn', msg.pid);
@@ -1035,7 +1038,7 @@ function runQueue() {
 		    slaves.length + countSpawning);
 	}
 
-	for (var i = 0; i < toMake; ++i)
+	for (var j = 0; j < toMake; ++j)
 		spawnWorker();
 
 	while (spares.length > 0 && queue.length > 0) {
