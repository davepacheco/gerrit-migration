From 09150baf2dba99bb6a3bc64bc0b8d135fe0d315c Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Thu, 20 Jul 2017 00:07:31 +1200
Subject: [PATCH] ADMINUI-2380: Clean up bundling process ADMINUI-2381:
 Increase linting/styling coverage

---
 Makefile              |   6 +-
 tools/build-js        | 251 -----------------------------
 tools/bundle.js       | 360 ++++++++++++++++++++++++++++++++++++++++++
 tools/devrun.sh       |   2 +-
 tools/npmfreeze.js    |  96 -----------
 tools/qunit-runner.js | 149 -----------------
 6 files changed, 364 insertions(+), 500 deletions(-)
 delete mode 100755 tools/build-js
 create mode 100755 tools/bundle.js
 delete mode 100755 tools/npmfreeze.js
 delete mode 100644 tools/qunit-runner.js

diff --git a/Makefile b/Makefile
index 01f3a4c5..31857463 100644
--- a/Makefile
+++ b/Makefile
@@ -26,7 +26,7 @@ NAME		:= adminui
 #
 # Files
 #
-JS_FILES	:= $(shell ls *.js) $(shell find lib test -name '*.js')
+JS_FILES	:= $(shell ls *.js) $(shell find lib tools test -name '*.js')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE   = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
@@ -68,7 +68,7 @@ RELSTAGEDIR          := /tmp/$(STAMP)
 
 JS_BUNDLE = ./www/app.js
 JS_BUNDLE_FILES	:= $(shell find www/js -name '*.js' -o -name '*.hbs')
-JS_BUNDLE_FILES	+= ./tools/build-js
+JS_BUNDLE_FILES	+= ./tools/bundle.js
 
 
 .PHONY: all
@@ -92,7 +92,7 @@ js: $(JS_BUNDLE)
 
 $(JS_BUNDLE): $(JS_BUNDLE_FILES) | $(NODE_EXEC)
 	@echo "Building js bundle"
-	MINIFY=true $(NODE) tools/build-js | bunyan
+	MINIFY=true $(NODE) tools/bundle.js | bunyan
 
 
 .PHONY: devrun
diff --git a/tools/build-js b/tools/build-js
deleted file mode 100755
index 13fb80e6..00000000
--- a/tools/build-js
+++ /dev/null
@@ -1,251 +0,0 @@
-#!/usr/bin/env node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-"use strict";
-
-var LOG = require('bunyan').createLogger({name:'bundler'});
-
-var async = require('async');
-var fs = require('fs');
-var path = require('path');
-var browserify = require('browserify');
-
-var shim = require('browserify-shim');
-var format = require('util').format;
-var join = path.join;
-
-var uglify = require('uglify-js');
-
-var buildLESS = require('../lib/assets').buildLESS;
-
-
-var root = path.resolve(__dirname, '..', 'www', 'js');
-
-
-var shimConfig = {
-    'jquery': { path: './lib/jquery', exports: '$' },
-    'jquery.serializeObject': {
-        path: './lib/jquery.serializeObject',
-        depends: {'jquery': '$'},
-        exports: null
-    },
-    'jquery.autosize': {
-        path: './lib/jquery.autosize',
-        depends: {'jquery': '$'},
-        exports: null
-    },
-    'jquery.chosen': {
-        path: './lib/chosen.jquery',
-        depends: { 'jquery': '$' },
-        exports: null
-    },
-    'bootstrap': { path: './lib/bootstrap', exports: null },
-    'd3': {
-        path: './lib/d3.v3',
-        exports: 'd3'
-    },
-    'showdown': {
-        path: './lib/showdown',
-        exports: 'Showdown'
-    },
-    'react-chosen': {
-        path: './lib/react-chosen',
-        depends: {
-            'react': 'React'
-        },
-        exports: 'Chosen'
-    },
-    'bootstrap.tags': {
-        path: './lib/bootstrap-tags',
-        depends: {'jquery': '$'},
-        exports: null
-    },
-    'typeahead': { path: './lib/typeahead.jquery', exports: null },
-    'bloodhound': { path: './lib/bloodhound', exports: 'Bloodhound'},
-    'backbone.marionette': {
-        path: './lib/backbone.marionette',
-        exports: null,
-        depends: {
-            'jquery': '$',
-            'underscore': '_',
-            'backbone': 'Backbone'
-        }
-    },
-    'backbone.modelbinder': { path: './lib/Backbone.ModelBinder', exports: null },
-
-    'backbone.syphon': {
-        path: './lib/backbone.syphon',
-        exports: null,
-        depends: {
-            'backbone': 'Backbone',
-            'underscore': '_'
-        }
-    },
-    'backbone.stickit': {
-        path: './lib/backbone.stickit',
-        exports: null,
-        depends: {
-            'backbone': 'Backbone',
-            'underscore': '_'
-        }
-    },
-    'raphael': {
-        path: './lib/raphael-min',
-        exports: 'Raphael'
-    },
-};
-
-Object.keys(shimConfig).forEach(function(k) {
-    if (shimConfig[k].path) {
-        shimConfig[k].path = join(root, shimConfig[k].path);
-    }
-});
-
-var prepAppBundle = function() {
-    var opts = {
-        extensions: ['.js', '.jsx'],
-        debug: true
-    };
-
-    var bundle = shim(browserify(opts), shimConfig);
-
-    bundle
-        .transform(require.resolve(join(root, './transforms/tpl')))
-        .transform(require('reactify'))
-        .require(require.resolve(join(root, './adminui')), {expose: 'adminui', entry: true});
-
-    bundle.external('jquery');
-    bundle.external('moment');
-    bundle.external('underscore');
-    bundle.external('underscore.string');
-    bundle.external('epoch');
-    bundle.external('react');
-    bundle.external('backbone');
-    bundle.external('superagent');
-    bundle.external('bootstrap.datetimepicker');
-
-    return bundle;
-};
-
-function prepLibsBundle() {
-    var opts = {
-        noParse: [ require.resolve(join(root, './lib/epoch.0.5.2.min')) ]
-    };
-
-    var blibs = browserify(opts);
-    blibs.require('react');
-    blibs.require('underscore');
-    blibs.require('underscore.string');
-    blibs.require('backbone');
-    blibs.require('superagent');
-    blibs.require(require.resolve(join(root, './lib/bootstrap-datetimepicker')), { expose: 'bootstrap.datetimepicker'});
-    blibs.require(require.resolve(join(root, './lib/jquery')), { expose: 'jquery'});
-    blibs.require(require.resolve(join(root, './lib/moment.min')), {expose: 'moment'});
-    blibs.require(require.resolve(join(root, './lib/epoch.0.5.2.min')), { expose: 'epoch'});
-
-    return blibs;
-}
-
-
-(function rebundle() {
-    var ba = prepAppBundle();
-    ba.on('update', function() {
-        bundle(ba, 'app.js', done);
-    });
-    var bl = prepLibsBundle();
-    bl.on('update', function() {
-        bundle(bl, 'libs.js', done);
-    });
-
-    async.parallel([
-        function(cb) {
-            LOG.info('[app.css] BUILDING');
-            buildLESS(function(buildErr, css) {
-                if (buildErr) {
-                    LOG.fatal('[app.less] BUILD ERRR', buildErr);
-                    return;
-                }
-
-                LOG.info('[app.css] WRITING');
-                fs.writeFile(join(root, '..', 'app.css'), css, function(err) {
-                    if (err) {
-                        LOG.fatal('[app.css] WRITE ERRR', err);
-                    } else {
-                        LOG.info('[app.css] OK (%s bytes)', css.length);
-                    }
-
-                });
-            });
-        },
-        function(cb) {
-            bundle(ba, 'app.js', cb);
-        },
-        function(cb) {
-           bundle(bl, 'libs.js', cb);
-        }
-    ], done);
-
-    function done(err, res) {
-        if (err) {
-            LOG.fatal('ERROR BUILDING');
-        } else {
-            LOG.info('ALL DONE.');
-        }
-    }
-})();
-
-function bundle(bundler, out, cb) {
-    var t = new Date().getTime();
-
-    var outPath = path.join(root, '..', out);
-    var tmpPath = format('%s.%s', outPath, t);
-
-    LOG.info('[%s] building', out);
-
-    var bs = bundler.bundle();
-
-    var bytes, time;
-    bundler.on('bytes', function(b) { bytes = b; });
-    bundler.on('time', function(t) { time = t; });
-
-    bs.on('error', function(err) {
-        LOG.fatal(err, '[%s] BUILD ERROR', out);
-    });
-
-    bs.on('end', function() {
-        if (bytes && time) {
-            LOG.info('[%s] %s bytes (%s seconds)', out, bytes, (time / 1000).toFixed(2) );
-        } else {
-            LOG.info('[%s] OK', out);
-        }
-        fs.rename(tmpPath, outPath, function() {
-            if (process.env.MINIFY) {
-                var min;
-                try {
-                    min = uglify.minify(outPath);
-                    fs.writeFileSync(outPath + '.min.js', min.code, 'utf8');
-                    LOG.info('[%s.min.js]', out);
-                    fs.rename(outPath+'.min.js', outPath, function() {
-                        LOG.info('[%s.min.js] -> [%s]', out, out);
-                        cb(null, out);
-                    });
-                } catch (e) {
-                    LOG.fatal(e, 'Error minifying output');
-                    cb(e);
-                }
-            } else {
-                cb(null, out);
-            }
-        });
-    });
-
-    bs.pipe(fs.createWriteStream(tmpPath));
-}
diff --git a/tools/bundle.js b/tools/bundle.js
new file mode 100755
index 00000000..058f8e8d
--- /dev/null
+++ b/tools/bundle.js
@@ -0,0 +1,360 @@
+#!/usr/bin/env node
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * This program takes the files in www/js and less/ and converts and bundles
+ * them into three browser-side files (app.css, app.js and libs.js).
+ *
+ * These files are only rebuilt if the modified timestamps of any file in
+ * either www/js or less/ are newer than the three browser-side files. This is
+ * mainly to speed up restarts in the development cycle.
+ *
+ * If the MINIFY environment is set, an additional minification step is added
+ * to shrink the Javascript files.
+ */
+
+var assert = require('assert-plus');
+var async = require('async');
+var bunyan = require('bunyan');
+var browserify = require('browserify');
+var fs = require('fs');
+var path = require('path');
+var reactify = require('reactify');
+var shim = require('browserify-shim');
+var format = require('util').format;
+var uglify = require('uglify-js');
+var assets = require('../lib/assets');
+var join = path.join;
+
+
+var CSS_FILE = 'app.css';
+var APP_FILE = 'app.js';
+var LIB_FILE = 'libs.js';
+var CONCUR_LIMIT = 20;
+var JS_ROOT = path.resolve(__dirname, '..', 'www', 'js');
+var CSS_ROOT = path.resolve(__dirname, '..', 'less');
+var LOG = bunyan.createLogger({name:'bundler'});
+
+var SHIM_CFG = {
+    'jquery': {
+        path: './lib/jquery',
+        exports: '$'
+    },
+    'jquery.serializeObject': {
+        path: './lib/jquery.serializeObject',
+        depends: {'jquery': '$'},
+        exports: null
+    },
+    'jquery.autosize': {
+        path: './lib/jquery.autosize',
+        depends: {'jquery': '$'},
+        exports: null
+    },
+    'jquery.chosen': {
+        path: './lib/chosen.jquery',
+        depends: { 'jquery': '$' },
+        exports: null
+    },
+    'bootstrap': {
+        path: './lib/bootstrap',
+        exports: null
+    },
+    'd3': {
+        path: './lib/d3.v3',
+        exports: 'd3'
+    },
+    'showdown': {
+        path: './lib/showdown',
+        exports: 'Showdown'
+    },
+    'react-chosen': {
+        path: './lib/react-chosen',
+        depends: {
+            'react': 'React'
+        },
+        exports: 'Chosen'
+    },
+    'bootstrap.tags': {
+        path: './lib/bootstrap-tags',
+        depends: {'jquery': '$'},
+        exports: null
+    },
+    'typeahead': {
+        path: './lib/typeahead.jquery',
+        exports: null
+    },
+    'bloodhound': {
+        path: './lib/bloodhound',
+        exports: 'Bloodhound'
+    },
+    'backbone.marionette': {
+        path: './lib/backbone.marionette',
+        exports: null,
+        depends: {
+            'jquery': '$',
+            'underscore': '_',
+            'backbone': 'Backbone'
+        }
+    },
+    'backbone.modelbinder': {
+        path: './lib/Backbone.ModelBinder',
+        exports: null
+    },
+    'backbone.syphon': {
+        path: './lib/backbone.syphon',
+        exports: null,
+        depends: {
+            'backbone': 'Backbone',
+            'underscore': '_'
+        }
+    },
+    'backbone.stickit': {
+        path: './lib/backbone.stickit',
+        exports: null,
+        depends: {
+            'backbone': 'Backbone',
+            'underscore': '_'
+        }
+    },
+    'raphael': {
+        path: './lib/raphael-min',
+        exports: 'Raphael'
+    }
+};
+
+Object.keys(SHIM_CFG).forEach(function (k) {
+    if (SHIM_CFG[k].path) {
+        SHIM_CFG[k].path = join(JS_ROOT, SHIM_CFG[k].path);
+    }
+});
+
+
+function prepAppBundle() {
+    var opts = {
+        extensions: [ '.js', '.jsx' ],
+        debug: true
+    };
+
+    var app = shim(browserify(opts), SHIM_CFG);
+
+    app.transform(join(JS_ROOT, './transforms/tpl'))
+        .transform(reactify)
+        .require(join(JS_ROOT, './adminui'),
+        { expose: 'adminui', entry: true });
+
+    app.external('jquery');
+    app.external('moment');
+    app.external('underscore');
+    app.external('underscore.string');
+    app.external('epoch');
+    app.external('react');
+    app.external('backbone');
+    app.external('superagent');
+    app.external('bootstrap.datetimepicker');
+
+    return app;
+}
+
+
+function prepLibsBundle() {
+    var opts = { noParse: [ join(JS_ROOT, './lib/epoch.0.5.2.min') ] };
+
+    var blibs = browserify(opts);
+    blibs.require('react');
+    blibs.require('underscore');
+    blibs.require('underscore.string');
+    blibs.require('backbone');
+    blibs.require('superagent');
+    blibs.require(join(JS_ROOT, './lib/jquery'), { expose: 'jquery' });
+    blibs.require(join(JS_ROOT, './lib/moment.min'), { expose: 'moment' });
+    blibs.require(join(JS_ROOT, './lib/epoch.0.5.2.min'), { expose: 'epoch' });
+    blibs.require(join(JS_ROOT, './lib/bootstrap-datetimepicker'), {
+        expose: 'bootstrap.datetimepicker'
+    });
+
+    return blibs;
+}
+
+
+function bundle(bundler, outFilename, cb) {
+    assert.object(bundler, 'object');
+    assert.string(outFilename, 'outFilename');
+    assert.func(cb, 'cb');
+
+    var startTime = new Date().getTime();
+    var outPath = path.join(JS_ROOT, '..', outFilename);
+    var tmpPath = format('%s.%s', outPath, startTime);
+
+    LOG.info('[%s] building', outFilename);
+
+    var bs = bundler.bundle();
+
+    var bytes, time;
+    bundler.on('bytes', function (b) { bytes = b; });
+    bundler.on('time', function (t) { time = t; });
+
+    bs.on('error', function (err) {
+        LOG.fatal(err, '[%s] build error', outFilename);
+        cb(err);
+        return;
+    });
+
+    bs.on('end', function onEnd() {
+        if (bytes && time) {
+            LOG.info('[%s] %s bytes (%s seconds)',
+                     outFilename, bytes, (time / 1000).toFixed(2));
+        } else {
+            LOG.info('[%s] OK', outFilename);
+        }
+
+        fs.rename(tmpPath, outPath, function onRename(err) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (!process.env.MINIFY) {
+                cb(null, outFilename);
+                return;
+            }
+
+            var min = uglify.minify(outPath);
+            fs.writeFileSync(outPath + '.min.js', min.code, 'utf8');
+            LOG.info('[%s.min.js]', outFilename);
+
+            fs.rename(outPath + '.min.js', outPath, function onRename2() {
+                LOG.info('[%s.min.js] -> [%s]', outFilename, outFilename);
+                cb(null, outFilename);
+            });
+        });
+    });
+
+    bs.pipe(fs.createWriteStream(tmpPath));
+}
+
+
+function rebundle(cb) {
+    assert.func(cb, 'cb');
+
+    function buildCss(next) {
+        LOG.info('[%s] building', CSS_FILE);
+
+        assets.buildLESS(function onBuild(err, css) {
+            if (err) {
+                LOG.fatal(err, '[%s] build error', CSS_FILE);
+                next(err);
+                return;
+            }
+
+            var cssPath = join(JS_ROOT, '..', CSS_FILE);
+            fs.writeFile(cssPath, css, function onWrite(err2) {
+                if (err2) {
+                    next(err2);
+                    return;
+                }
+
+                LOG.info('[%s] OK (%d bytes)', CSS_FILE, css.length);
+
+                next();
+            });
+        });
+    }
+
+    function buildApp(next) {
+        var ba = prepAppBundle();
+        bundle(ba, APP_FILE, next);
+    }
+
+    function buildLibs(next) {
+       var bl = prepLibsBundle();
+       bundle(bl, LIB_FILE, next);
+    }
+
+    async.parallel([buildCss, buildApp, buildLibs], cb);
+}
+
+
+function findNewestFileStat(dirPath, cb) {
+    assert.string(dirPath, 'dirPath');
+    assert.func(cb, 'cb');
+
+    fs.readdir(dirPath, function onReaddir(err, filenames) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        async.mapLimit(filenames, CONCUR_LIMIT, function onMap(filename, next) {
+            var filePath = join(dirPath, filename);
+
+            fs.stat(filePath, function onStat(err2, stat) {
+                if (stat.isDirectory()) {
+                    findNewestFileStat(filePath, next);
+                } else {
+                    next(null, stat);
+                }
+            });
+        }, function onMapDone(err2, stats) {
+            if (err2) {
+                cb(err2);
+                return;
+            }
+
+            var newest = stats.reduce(function onReduce(curr, stat) {
+                return curr.mtime > stat.mtime ? curr : stat;
+            }, new Date(0));
+
+            cb(null, newest);
+        });
+    });
+}
+
+
+findNewestFileStat(JS_ROOT, function onNewestJs(err, newestJsStat) {
+    if (err) {
+        LOG.fatal(err, 'Error recursing JS');
+        return;
+    }
+
+    findNewestFileStat(CSS_ROOT, function onNewestCss(err2, newestCssStat) {
+        if (err2) {
+            LOG.fatal(err, 'Error recursing CSS');
+            return;
+        }
+
+        try {
+            var cssMtime = fs.statSync(join(JS_ROOT, '..', CSS_FILE)).mtime;
+            var appMtime = fs.statSync(join(JS_ROOT, '..', APP_FILE)).mtime;
+            var libMtime = fs.statSync(join(JS_ROOT, '..', LIB_FILE)).mtime;
+        } catch (e) {
+            if (e.code !== 'ENOENT') {
+                LOG.FATAL(e, 'Error stat()ing');
+                return;
+            }
+        }
+
+        var mtime = Math.max(newestJsStat.mtime, newestCssStat.mtime);
+
+        if (cssMtime > mtime && appMtime > mtime && libMtime > mtime) {
+            LOG.info('No rebundle needed');
+            LOG.info('Done');
+            return;
+        }
+
+        rebundle(function (err3) {
+            if (err3) {
+                LOG.fatal(err, 'Error building');
+            } else {
+                LOG.info('Done');
+            }
+        });
+    });
+});
diff --git a/tools/devrun.sh b/tools/devrun.sh
index cc6e1080..c4432f65 100755
--- a/tools/devrun.sh
+++ b/tools/devrun.sh
@@ -12,6 +12,6 @@
 port=$(cat `pwd`/etc/config.json | json sslport)
 
 echo "***** Bundling client-side assets"
-tools/build-js | ./node_modules/bunyan/bin/bunyan
+tools/bundle.js | ./node_modules/bunyan/bin/bunyan
 echo "***** Starting server on port $port"
 node server.js | ./node_modules/.bin/bunyan
diff --git a/tools/npmfreeze.js b/tools/npmfreeze.js
deleted file mode 100755
index 671a8cbe..00000000
--- a/tools/npmfreeze.js
+++ /dev/null
@@ -1,96 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-//
-//
-// Generate a "dependencies" block for a top-level package.json that includes
-// the explicit versions for all recursive npm modules. See "Method 3" in
-// <https://head.no.de/docs/eng> for why this is interesting.
-//
-// Usage:
-//      find . -name "package.json" | xargs ./tools/npmfreeze.js
-//
-// If two parts of the node_modules tree includes separate versions of a
-// particular module, then the greater version is used.
-
-var fs = require('fs');
-var semver = require('semver');
-var spawn = require('child_process').spawn;
-
-
-///--- Globals
-var deps = {};
-
-
-///--- Helpers
-
-function done() {
-    console.log(JSON.stringify(deps, null, 2));
-}
-
-
-function waitForDone() {
-    process.nextTick(function() {
-        if (wait === 0)
-            return done();
-
-        return waitForDone();
-    });
-}
-
-
-///--- Main
-
-process.argv.slice(2).forEach(function(fname) {
-    var pkg = JSON.parse(fs.readFileSync(fname, 'utf8'));
-    if (!pkg.dependencies)
-        return;
-
-    var tmp = pkg.dependencies;
-    Object.keys(tmp).forEach(function(dep) {
-        if (!deps[dep] || semver.gt(tmp[dep], deps[dep]))
-            deps[dep] = semver.clean(tmp[dep]) || '*';
-    });
-});
-
-// Make a pass and clean up all the '*'
-var wait = 0;
-Object.keys(deps).forEach(function(k) {
-    if (deps[k] !== '*')
-        return;
-
-    wait++;
-    var npm = spawn('npm', ['info', k]);
-    var json = '';
-    npm.stdout.on('data', function(data) {
-        if (data)
-            json += data;
-    });
-
-    npm.stdout.on('end', function(code) {
-        if (code) {
-            console.error('npm info %s exited: %d', k, code);
-            process.exit(code);
-        }
-
-        var val = JSON.parse(json);
-
-        deps[k] = val['dist-tags'].latest;
-        wait--;
-    });
-});
-
-if (wait === 0) {
-    done();
-} else {
-    waitForDone();
-}
diff --git a/tools/qunit-runner.js b/tools/qunit-runner.js
deleted file mode 100644
index 14ec3d65..00000000
--- a/tools/qunit-runner.js
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * QtWebKit-powered headless test runner using PhantomJS
- *
- * PhantomJS binaries: http://phantomjs.org/download.html
- * Requires PhantomJS 1.6+ (1.7+ recommended)
- *
- * Run with:
- *   phantomjs runner.js [url-of-your-qunit-testsuite]
- *
- * e.g.
- *   phantomjs runner.js http://localhost/qunit/test/index.html
- */
-
-/*global phantom:false, require:false, console:false, window:false, QUnit:false */
-
-(function() {
-	'use strict';
-
-	var url, page, timeout,
-		args = require('system').args;
-
-	// arg[0]: scriptName, args[1...]: arguments
-	if (args.length < 2 || args.length > 3) {
-		console.error('Usage:\n  phantomjs runner.js [url-of-your-qunit-testsuite] [timeout-in-seconds]');
-		phantom.exit(1);
-	}
-
-	url = args[1];
-	page = require('webpage').create();
-	if (args[2] !== undefined) {
-		timeout = parseInt(args[2], 10);
-	}
-
-	// Route `console.log()` calls from within the Page context to the main Phantom context (i.e. current `this`)
-	page.onConsoleMessage = function(msg) {
-		console.log(msg);
-	};
-
-	page.onInitialized = function() {
-		page.evaluate(addLogging);
-	};
-
-	page.onCallback = function(message) {
-		var result,
-			failed;
-
-		if (message) {
-			if (message.name === 'QUnit.done') {
-				result = message.data;
-				failed = !result || result.failed;
-
-				phantom.exit(failed ? 1 : 0);
-			}
-		}
-	};
-
-	page.open(url, function(status) {
-		if (status !== 'success') {
-			console.error('Unable to access network: ' + status);
-			phantom.exit(1);
-		} else {
-			// Cannot do this verification with the 'DOMContentLoaded' handler because it
-			// will be too late to attach it if a page does not have any script tags.
-			var qunitMissing = page.evaluate(function() { return (typeof QUnit === 'undefined' || !QUnit); });
-			if (qunitMissing) {
-				console.error('The `QUnit` object is not present on this page.');
-				phantom.exit(1);
-			}
-
-			// Set a timeout on the test running, otherwise tests with async problems will hang forever
-			if (typeof timeout === 'number') {
-				setTimeout(function() {
-					console.error('The specified timeout of ' + timeout + ' seconds has expired. Aborting...');
-					phantom.exit(1);
-				}, timeout * 1000);
-			}
-
-			// Do nothing... the callback mechanism will handle everything!
-		}
-	});
-
-	function addLogging() {
-		window.document.addEventListener('DOMContentLoaded', function() {
-			var currentTestAssertions = [];
-
-			QUnit.log(function(details) {
-				var response;
-
-				// Ignore passing assertions
-				if (details.result) {
-					return;
-				}
-
-				response = details.message || '';
-
-				if (typeof details.expected !== 'undefined') {
-					if (response) {
-						response += ', ';
-					}
-
-					response += 'expected: ' + details.expected + ', but was: ' + details.actual;
-				}
-
-				if (details.source) {
-					response += "\n" + details.source;
-				}
-
-				currentTestAssertions.push('Failed assertion: ' + response);
-			});
-
-			QUnit.testDone(function(result) {
-				var i,
-					len,
-					name = result.module + ': ' + result.name;
-
-				if (result.failed) {
-					console.log('Test failed: ' + name);
-
-					for (i = 0, len = currentTestAssertions.length; i < len; i++) {
-						console.log('    ' + currentTestAssertions[i]);
-					}
-				}
-
-				currentTestAssertions.length = 0;
-			});
-
-			QUnit.done(function(result) {
-				console.log('Took ' + result.runtime +  'ms to run ' + result.total + ' tests. ' + result.passed + ' passed, ' + result.failed + ' failed.');
-
-				if (typeof window.callPhantom === 'function') {
-					window.callPhantom({
-						'name': 'QUnit.done',
-						'data': result
-					});
-				}
-			});
-		}, false);
-	}
-})();
-- 
2.21.0

