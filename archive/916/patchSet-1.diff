From c411f7ac0d34cca0eb03c298f35ca491347974f9 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Thu, 17 Nov 2016 17:00:55 +0000
Subject: [PATCH] OS-5765 Chromium aborts on LX Brand Zones (with namespaces
 disabled)

---
 .../uts/common/brand/lx/syscall/lx_prctl.c    | 26 ++++++++++++++++---
 .../uts/common/brand/lx/syscall/lx_rlimit.c   |  2 +-
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_prctl.c b/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
index ac125b9b2d..f68163f9e2 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
@@ -66,6 +66,8 @@
 
 #define	LX_PR_SET_NAME_NAMELEN	16
 
+extern int lx_set_rctl(char *, struct rlimit64 *);
+
 long
 lx_prctl(int opt, uintptr_t data)
 {
@@ -74,15 +76,33 @@ lx_prctl(int opt, uintptr_t data)
 
 	switch (opt) {
 	case LX_PR_GET_DUMPABLE: {
-		/* Indicate that process is always dumpable */
-		return (1);
+		rctl_hndl_t rh;
+		struct rlimit64 rl64;
+
+		mutex_enter(&curproc->p_lock);
+		rh = rctl_hndl_lookup("process.max-core-size");
+		(void) rctl_rlimit_get(rh, curproc, &rl64);
+		mutex_exit(&curproc->p_lock);
+
+		/* Use a core limit of 0 to indicate no dump */
+		return (rl64.rlim_cur != 0);
 	}
 
 	case LX_PR_SET_DUMPABLE: {
+		rctl_hndl_t rh;
+		struct rlimit64 rl64;
+
 		if (data != 0 && data != 1) {
 			return (set_errno(EINVAL));
 		}
-		/* Lie about altering process dumpability */
+		mutex_enter(&curproc->p_lock);
+		rh = rctl_hndl_lookup("process.max-core-size");
+		(void) rctl_rlimit_get(rh, curproc, &rl64);
+		mutex_exit(&curproc->p_lock);
+
+		rl64.rlim_cur = (data == 0 ? 0 : rl64.rlim_max);
+		if ((err = lx_set_rctl("process.max-core-size", &rl64)) != 0)
+			return (set_errno(err));
 		return (0);
 	}
 
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_rlimit.c b/usr/src/uts/common/brand/lx/syscall/lx_rlimit.c
index 6581ead25b..c85605a6bd 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_rlimit.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_rlimit.c
@@ -336,7 +336,7 @@ lx_oldgetrlimit(int resource, lx_rlimit_t *rlp)
 	return (0);
 }
 
-static int
+int
 lx_set_rctl(char *nm, struct rlimit64 *rlp64)
 {
 	int err;
-- 
2.21.0

