From 9035d37f2dc0a9fee9342a2b7cc8a86621788ae7 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Thu, 17 Nov 2016 23:01:26 +0000
Subject: [PATCH] OS-5803 chromium depends on PR_[GS]ET_DUMPABLE Reviewed by:
 Patrick Mooney <patrick.mooney@joyent.com> Approved by: Patrick Mooney
 <patrick.mooney@joyent.com>

---
 usr/src/uts/common/brand/lx/sys/lx_brand.h    |  3 ++-
 .../uts/common/brand/lx/syscall/lx_prctl.c    | 25 ++++++++++++++++---
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/sys/lx_brand.h b/usr/src/uts/common/brand/lx/sys/lx_brand.h
index 7a9357c367..959e84b0a0 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_brand.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_brand.h
@@ -260,7 +260,8 @@ typedef enum lx_proc_flags {
 	LX_PROC_STRICT_MODE	= 0x02,
 	/* internal flags */
 	LX_PROC_CHILD_DEATHSIG	= 0x04,
-	LX_PROC_AIO_USED	= 0x08
+	LX_PROC_AIO_USED	= 0x08,
+	LX_PROC_NO_DUMP		= 0x10	/* for lx_prctl LX_PR_[GS]ET_DUMPABLE */
 } lx_proc_flags_t;
 
 #define	LX_PROC_ALL	(LX_PROC_INSTALL_MODE | LX_PROC_STRICT_MODE)
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_prctl.c b/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
index ac125b9b2d..23257245f0 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_prctl.c
@@ -74,15 +74,34 @@ lx_prctl(int opt, uintptr_t data)
 
 	switch (opt) {
 	case LX_PR_GET_DUMPABLE: {
-		/* Indicate that process is always dumpable */
-		return (1);
+		/* Only track in brand data - could hook into SNOCD later */
+		lx_proc_data_t *lxpd;
+		int val;
+
+		mutex_enter(&curproc->p_lock);
+		VERIFY((lxpd = ptolxproc(curproc)) != NULL);
+		val = lxpd->l_flags & LX_PROC_NO_DUMP;
+		mutex_exit(&curproc->p_lock);
+
+		return (val == 0);
 	}
 
 	case LX_PR_SET_DUMPABLE: {
+		lx_proc_data_t *lxpd;
+
 		if (data != 0 && data != 1) {
 			return (set_errno(EINVAL));
 		}
-		/* Lie about altering process dumpability */
+
+		mutex_enter(&curproc->p_lock);
+		VERIFY((lxpd = ptolxproc(curproc)) != NULL);
+		if (data == 0) {
+			lxpd->l_flags |= LX_PROC_NO_DUMP;
+		} else {
+			lxpd->l_flags &= ~LX_PROC_NO_DUMP;
+		}
+		mutex_exit(&curproc->p_lock);
+
 		return (0);
 	}
 
-- 
2.21.0

