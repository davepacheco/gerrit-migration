From 1f825d6cd3cb004f3ae9e7656f045bb426559152 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Thu, 20 Jun 2019 08:56:13 -0600
Subject: [PATCH] MANTA-4362 Add object update function to node-boray

---
 lib/client.js  | 81 +++++++++++++++++++++++++++++++++++++++++
 lib/objects.js | 97 ++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 176 insertions(+), 2 deletions(-)

diff --git a/lib/client.js b/lib/client.js
index 61d86f5..126a42e 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -814,6 +814,87 @@ BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
 };
 
 
+/**
+ * Updates an object's metadata. If no object with the given name exists for the
+ * account then an error is returned indicating the object was not found.
+ *
+ * This function is used when the destination virtual node for the object has
+ * already been determined.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {String} object_id       - Object id
+ * @param {String} content_type    - Content-Type of the object
+ * @param {Object} headers         - An object representing the HTTP headers for
+ *                                   the object.
+ * @param {Object} props           - An object used to store unstructured data
+ *                                   that may be shown to be important, but for
+ *                                   which we are not immediately able to
+ *                                   migrate the database to accommodate.
+ * @param {Number} vnode           - Virtual node identifier
+ * @param {Function} cb            - callback
+ */
+BorayClient.prototype.updateObject = function updateObject(owner, bucket_id,
+    name, object_id, content_type, headers, props, vnode, cb) {
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.number(vnode, 'vnode');
+    assert.func(cb, 'callback');
+    assert.optionalObject(props, 'props');
+
+    var rpcctx = this.ctxCreateForCallback(cb);
+    if (rpcctx) {
+        objects.updateObject(rpcctx, owner, bucket_id, name, object_id,
+        content_type, headers, props, vnode,
+        this.makeReleaseCb(rpcctx, cb));
+    }
+};
+
+
+/**
+ * Updates an object's metadata. If no object with the given name exists for the
+ * account then an error is returned indicating the object was not found.
+ *
+ * This function is intended to be used when the destination virtual node for an
+ * object has not been determined.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {String} object_id       - Object id
+ * @param {String} content_type    - Content-Type of the object
+ * @param {Object} headers         - An object representing the HTTP headers for
+ *                                   the object.
+ * @param {Object} props           - An object used to store unstructured data
+ *                                   that may be shown to be important, but for
+ *                                   which we are not immediately able to
+ *                                   migrate the database to accommodate.
+ * @param {Function} cb            - callback
+ */
+BorayClient.prototype.updateObjectNoVnode = function updateObjectNoVnode(owner,
+    bucket_id, name, object_id, content_type, headers, props, cb) {
+
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(object_id, 'object_id');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.func(cb, 'callback');
+    assert.optionalObject(props, 'props');
+
+    var rpcctx = this.ctxCreateForCallback(cb);
+    if (rpcctx) {
+        objects.updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
+            content_type, headers, props, this.makeReleaseCb(rpcctx, cb));
+    }
+};
+
+
 /**
  * Fetches an object.
  *
diff --git a/lib/objects.js b/lib/objects.js
index 5b5e54e..1444f82 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -170,6 +170,7 @@ function getObject(rpcctx, owner, bucket_id, name, vnode, callback) {
     });
 }
 
+
 function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
     var opts, log;
 
@@ -208,6 +209,96 @@ function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
 }
 
 
+function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
+    headers, props, vnode, callback) {
+    var opts, log;
+
+    assert.object(rpcctx, 'rpcctx');
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(object_id, 'object_id');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.number(vnode, 'vnode');
+    assert.func(callback, 'callback');
+    assert.optionalObject(props, 'props');
+
+    opts = makeOptions({});
+
+    var arg = { owner: owner,
+                bucket_id: bucket_id,
+                name: name,
+                id: object_id,
+                vnode: vnode,
+                content_type: content_type,
+                headers: headers,
+                properties: props
+              };
+    log = rpc.childLogger(rpcctx, opts);
+    rpc.rpcCommonBufferData({
+        'rpcctx': rpcctx,
+        'log': log,
+        'rpcmethod': 'updateobject',
+        'rpcargs': [arg]
+    }, function (err, data) {
+        if (!err && data.length > 1) {
+            err = new VError('expected at most 1 data message, found %d',
+                data.length);
+        }
+
+        if (err) {
+            callback(err);
+        } else {
+            callback(null, data.length === 0 ? {} : data[0]);
+        }
+    });
+}
+
+function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
+    content_type, headers, props, callback) {
+    var opts, log;
+
+    assert.object(rpcctx, 'rpcctx');
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(object_id, 'object_id');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.func(callback, 'callback');
+
+    opts = makeOptions({});
+
+    var args = [ owner,
+                 bucket_id,
+                 name,
+                 object_id,
+                 content_type,
+                 headers,
+                 props
+              ];
+    log = rpc.childLogger(rpcctx, opts);
+    rpc.rpcCommonBufferData({
+        'rpcctx': rpcctx,
+        'log': log,
+        'rpcmethod': 'updateobject',
+        'rpcargs': args
+    }, function (err, data) {
+        if (!err && data.length > 1) {
+            err = new VError('expected at most 1 data message, found %d',
+                data.length);
+        }
+
+        if (err) {
+            callback(err);
+        } else {
+            callback(null, data.length === 0 ? {} : data[0]);
+        }
+    });
+}
+
+
 function deleteObject(rpcctx, owner, bucket_id, name, vnode, callback) {
     var opts, log;
 
@@ -386,10 +477,12 @@ function makeOptions(options, value) {
 
 module.exports = {
     createObject: createObject,
-    getObject: getObject,
-    deleteObject: deleteObject,
     createObjectNoVnode: createObjectNoVnode,
+    updateObject: updateObject,
+    updateObjectNoVnode: updateObjectNoVnode,
+    getObject: getObject,
     getObjectNoVnode: getObjectNoVnode,
+    deleteObject: deleteObject,
     deleteObjectNoVnode: deleteObjectNoVnode,
     listObjects: listObjects,
     listObjectsNoVnode: listObjectsNoVnode
-- 
2.21.0

