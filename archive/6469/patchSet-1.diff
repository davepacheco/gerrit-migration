From 05dc681a3e6ce295848f608b62fac924e7482822 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Wed, 19 Jun 2019 13:28:28 -0600
Subject: [PATCH] MANTA-4362 Add object update function to node-boray

---
 lib/objects.js | 91 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 91 insertions(+)

diff --git a/lib/objects.js b/lib/objects.js
index 5b5e54e..27befb8 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -170,6 +170,7 @@ function getObject(rpcctx, owner, bucket_id, name, vnode, callback) {
     });
 }
 
+
 function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
     var opts, log;
 
@@ -208,6 +209,96 @@ function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
 }
 
 
+function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
+    headers, props, vnode, callback) {
+    var opts, log;
+
+    assert.object(rpcctx, 'rpcctx');
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(object_id, 'object_id');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.number(vnode, 'vnode');
+    assert.func(callback, 'callback');
+    assert.optionalObject(props, 'props');
+
+    opts = makeOptions({});
+
+    var arg = { owner: owner,
+                bucket_id: bucket_id,
+                name: name,
+                id: object_id,
+                vnode: vnode,
+                content_type: content_type,
+                headers: headers,
+                properties: props
+              };
+    log = rpc.childLogger(rpcctx, opts);
+    rpc.rpcCommonBufferData({
+        'rpcctx': rpcctx,
+        'log': log,
+        'rpcmethod': 'updateobject',
+        'rpcargs': [arg]
+    }, function (err, data) {
+        if (!err && data.length > 1) {
+            err = new VError('expected at most 1 data message, found %d',
+                data.length);
+        }
+
+        if (err) {
+            callback(err);
+        } else {
+            callback(null, data.length === 0 ? {} : data[0]);
+        }
+    });
+}
+
+function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
+    content_type, headers, props, callback) {
+    var opts, log;
+
+    assert.object(rpcctx, 'rpcctx');
+    assert.string(owner, 'owner');
+    assert.string(bucket_id, 'bucket_id');
+    assert.string(name, 'name');
+    assert.string(object_id, 'object_id');
+    assert.string(content_type, 'content_type');
+    assert.object(headers, 'headers');
+    assert.func(callback, 'callback');
+
+    opts = makeOptions({});
+
+    var args = [ owner,
+                 bucket_id,
+                 name,
+                 object_id,
+                 content_type,
+                 headers,
+                 props
+              ];
+    log = rpc.childLogger(rpcctx, opts);
+    rpc.rpcCommonBufferData({
+        'rpcctx': rpcctx,
+        'log': log,
+        'rpcmethod': 'updateobject',
+        'rpcargs': args
+    }, function (err, data) {
+        if (!err && data.length > 1) {
+            err = new VError('expected at most 1 data message, found %d',
+                data.length);
+        }
+
+        if (err) {
+            callback(err);
+        } else {
+            callback(null, data.length === 0 ? {} : data[0]);
+        }
+    });
+}
+
+
 function deleteObject(rpcctx, owner, bucket_id, name, vnode, callback) {
     var opts, log;
 
-- 
2.21.0

