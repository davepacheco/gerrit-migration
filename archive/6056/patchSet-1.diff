From abafac5ecd9304759ebed7134bca0364b31abfb7 Mon Sep 17 00:00:00 2001
From: Kody Kantor <kody@kkantor.com>
Date: Fri, 5 Apr 2019 21:33:42 +0000
Subject: [PATCH] joyent/pgstatsmon#25 distinguish between vacuum and vacuum to
 prevent wraparound joyent/pgstatsmon#26 vacuum progress function should use
 SETOF

---
 CHANGES.md        | 2 ++
 lib/dbinit.js     | 5 ++++-
 lib/pgstatsmon.js | 9 +++++++--
 lib/queries.js    | 9 ++++++++-
 4 files changed, 21 insertions(+), 4 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index e9821ae..4570399 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,8 @@
 # pgstatsmon Changelog
 
 ## Not yet released
+* #26 vacuum progress function should use SETOF
+* #25 distinguish between vacuum and vacuum to prevent wraparound
 * #24 track vacuum start time
 
 ## 1.1.0
diff --git a/lib/dbinit.js b/lib/dbinit.js
index e86ac70..73d2516 100644
--- a/lib/dbinit.js
+++ b/lib/dbinit.js
@@ -236,6 +236,7 @@ function create_progress_vacuum_function(args, callback) {
 	query = 'DROP FUNCTION IF EXISTS get_stat_progress_vacuum(); '
 	+ 'CREATE FUNCTION public.get_stat_progress_vacuum('
 	+ 'out relname name, '
+	+ 'out is_wraparound boolean, '
 	+ 'out query_start double precision, '
 	+ 'out phase bigint, '
 	+ 'out heap_blks_total bigint, '
@@ -243,9 +244,11 @@ function create_progress_vacuum_function(args, callback) {
 	+ 'out heap_blks_vacuumed bigint, '
 	+ 'out index_vacuum_count bigint, '
 	+ 'out max_dead_tuples bigint, '
-	+ 'out num_dead_tuples bigint)'
+	+ 'out num_dead_tuples bigint) '
+	+ ' RETURNS SETOF record'
 	+ ' AS $$'
 	+ ' SELECT T.relname AS relname,'
+	+ '	  A.query LIKE \'% (to prevent wraparound)\' as is_wraparound,'
 	+ '	  EXTRACT (EPOCH FROM A.query_start) AS query_start,'
 	+ '	  S.param1+1 AS phase,'
 	+ '	  S.param2 AS heap_blks_total,'
diff --git a/lib/pgstatsmon.js b/lib/pgstatsmon.js
index 95d506f..72bf13a 100644
--- a/lib/pgstatsmon.js
+++ b/lib/pgstatsmon.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -1154,7 +1154,12 @@ PgMon.prototype.emitCounter = function (metric, value)
 PgMon.prototype.emitGauge = function (metric, value)
 {
 	mod_assertplus.object(metric, 'metric');
-	mod_assertplus.number(value, 'value');
+
+	if (typeof (value) === 'boolean') {
+		value = value ? 1 : 0;
+	} else {
+		mod_assertplus.number(value, 'value');
+	}
 
 	this.pm_targets.forEach(function (t) { t.emitGauge(metric, value); });
 };
diff --git a/lib/queries.js b/lib/queries.js
index 52e5187..30f46fb 100644
--- a/lib/queries.js
+++ b/lib/queries.js
@@ -323,11 +323,18 @@ function getQueries(config) {
 	         'SELECT * FROM get_stat_progress_vacuum()'
 	     ].join('\n'),
 	     'gauges': [
+		/*
+		 * The order of these metrics should match the order listed
+		 * in the function defined in lib/dbinit.js.
+		 */
 	         { 'attr': 'phase', 'help': 'current processing phase of ' +
 	           'vacuum', 'expires': true, 'expiryPeriod': expiryPeriod },
+	         { 'attr': 'is_wraparound', 'help': 'true if vacuum is to ' +
+	           'prevent wraparound', 'expires': true,
+	           'expiryPeriod': expiryPeriod },
 	         { 'attr': 'query_start', 'help': 'unix epoch timestamp of ' +
 	           'the vacuum began', 'expires': true,
-		    'expiryPeriod': expiryPeriod },
+	           'expiryPeriod': expiryPeriod },
 	         { 'attr': 'heap_blks_total', 'help': 'total number of heap ' +
 	           'blocks in the table as of the beginning of the scan',
 	           'expires': true, 'expiryPeriod': expiryPeriod },
-- 
2.21.0

