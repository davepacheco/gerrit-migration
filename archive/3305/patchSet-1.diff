commit c756d46ab5acfdf54fdd76939cd28bba4bb0bd59 (refs/changes/05/3305/1)
Author: Dan McDonald <danmcd@joyent.com>
Date:   2018-01-30T17:33:35-05:00 (1 year, 8 months ago)
    
    Remove network-pools contents from new router object source, and dig into
    other scaffolding source.

diff --git a/lib/endpoints/networks/index.js b/lib/endpoints/networks/index.js
index c22cf1a..ccd1063 100644
--- a/lib/endpoints/networks/index.js
+++ b/lib/endpoints/networks/index.js
@@ -18,6 +18,7 @@ var errors = require('../../util/errors');
 var mod_common = require('./common');
 var mod_net = require('../../models/network');
 var mod_pool = require('../../models/network-pool');
+var mod_router = require('../../models/router');  // XXX KEBE ASKS, USE ME?!
 var restify = require('restify');
 
 
diff --git a/lib/endpoints/router.js b/lib/endpoints/router.js
index 17079c7..3cb538f 100644
--- a/lib/endpoints/router.js
+++ b/lib/endpoints/router.js
@@ -14,7 +14,7 @@
 
 'use strict';
 
-var mod_pool = require('../models/network-pool');
+var mod_router = require('../models/router');
 var restify = require('restify');
 
 
@@ -24,17 +24,17 @@ var restify = require('restify');
 
 
 /**
- * GET /network_pools: get the list of network pools
+ * GET /routers: get the list of router objects
  */
-function listNetworkPools(req, res, next) {
-    mod_pool.list(req.app, req.log, req.params, function (err, pools) {
+function listRouters(req, res, next) {
+    mod_router.list(req.app, req.log, req.params, function (err, routers) {
         if (err) {
             return next(err);
         }
 
         var serialized = [];
-        for (var p in pools) {
-            serialized.push(pools[p].serialize());
+        for (var p in routers) {
+            serialized.push(routers[p].serialize());
         }
 
         res.send(200, serialized);
@@ -44,59 +44,59 @@ function listNetworkPools(req, res, next) {
 
 
 /**
- * POST /network_pools: create a network pool
+ * POST /routers: create a router object
  */
-function postNetworkPool(req, res, next) {
-    mod_pool.create(req.app, req.log, req.params, function (err, pool) {
+function postRouter(req, res, next) {
+    mod_router.create(req.app, req.log, req.params, function (err, router) {
         if (err) {
             return next(err);
         }
 
-        res.send(200, pool.serialize());
+        res.send(200, router.serialize());
         return next();
     });
 }
 
 
 /**
- * GET /network_pools/:uuid: get a network pool
+ * GET /routers/:uuid: get a router object
  */
-function getNetworkPool(req, res, next) {
-    mod_pool.get(req.app, req.log, req.params, function (err, pool) {
+function getRouter(req, res, next) {
+    mod_router.get(req.app, req.log, req.params, function (err, router) {
         if (err) {
             return next(err);
         }
 
-        if (!pool) {
+        if (!router) {
             return next(new restify.ResourceNotFoundError('not found'));
         }
 
-        res.send(200, pool.serialize());
+        res.send(200, router.serialize());
         return next();
     });
 }
 
 
 /**
- * PUT /network_pools/:uuid: update a network pool
+ * PUT /routers/:uuid: update a router object
  */
-function putNetworkPool(req, res, next) {
-    mod_pool.update(req.app, req.log, req.params, function (err, pool) {
+function putRouter(req, res, next) {
+    mod_router.update(req.app, req.log, req.params, function (err, router) {
         if (err) {
             return next(err);
         }
 
-        res.send(200, pool.serialize());
+        res.send(200, router.serialize());
         return next();
     });
 }
 
 
 /**
- * DELETE /network_pools/:uuid: delete a network pool
+ * DELETE /routers/:uuid: delete a router object
  */
-function deleteNetworkPool(req, res, next) {
-    mod_pool.del(req.app, req.log, req.params, function (err) {
+function deleteRouter(req, res, next) {
+    mod_router.del(req.app, req.log, req.params, function (err) {
         if (err) {
             return next(err);
         }
@@ -111,21 +111,21 @@ function deleteNetworkPool(req, res, next) {
  * Register all endpoints with the restify server
  */
 function register(http, before) {
-    http.get({ path: '/network_pools', name: 'ListNetworkPools' },
-        before, listNetworkPools);
-    http.head({ path: '/network_pools', name: 'HeadNetworkPools' },
-        before, listNetworkPools);
-    http.post({ path: '/network_pools', name: 'CreateNetworkPool' },
-            before, postNetworkPool);
-
-    http.get({ path: '/network_pools/:uuid', name: 'GetNetworkPool' },
-        before, getNetworkPool);
-    http.head({ path: '/network_pools/:uuid', name: 'HeadNetworkPool' },
-        before, getNetworkPool);
-    http.put({ path: '/network_pools/:uuid', name: 'UpdateNetworkPool' },
-            before, putNetworkPool);
-    http.del({ path: '/network_pools/:uuid', name: 'DeleteNetworkPool' },
-        before, deleteNetworkPool);
+    http.get({ path: '/routers', name: 'ListRouters' },
+        before, listRouters);
+    http.head({ path: '/routers', name: 'HeadRouters' },
+        before, listRouters);
+    http.post({ path: '/routers', name: 'CreateRouter' },
+            before, postRouter);
+
+    http.get({ path: '/routers/:uuid', name: 'GetRouter' },
+        before, getRouter);
+    http.head({ path: '/routers/:uuid', name: 'HeadRouter' },
+        before, getRouter);
+    http.put({ path: '/routers/:uuid', name: 'UpdateRouter' },
+            before, putRouter);
+    http.del({ path: '/routers/:uuid', name: 'DeleteRouter' },
+        before, deleteRouter);
 }
 
 
diff --git a/lib/models/index.js b/lib/models/index.js
index d3c684e..e0ae281 100644
--- a/lib/models/index.js
+++ b/lib/models/index.js
@@ -20,6 +20,7 @@ var mod_network_pool = require('./network-pool');
 var mod_network = require('./network');
 var mod_nic = require('./nic');
 var mod_nic_tag = require('./nic-tag');
+var mod_router = require('./router');
 var mod_vlan = require('./vlan');
 var vasync = require('vasync');
 
@@ -41,6 +42,7 @@ function initializeModels(app, callback) {
             mod_nic_tag,
             mod_network,
             mod_network_pool,
+            mod_router,
             mod_vlan
         ],
         func: function _initModel(mod, cb) {
@@ -53,6 +55,10 @@ function initializeModels(app, callback) {
 module.exports = {
     init: initializeModels,
     models: [
+        {
+            constructor: mod_router.Router,
+            bucket: mod_router.bucket()
+        },
         {
             constructor: mod_network_pool.NetworkPool,
             bucket: mod_network_pool.bucket()
diff --git a/lib/models/router.js b/lib/models/router.js
index 2bcaf18..540db32 100644
--- a/lib/models/router.js
+++ b/lib/models/router.js
@@ -56,6 +56,7 @@ var BUCKET = {
     morayVersion: 2,        // moray version must be > than this
     version: 1
 };
+var MAX_NETS = 32; // No more than 32 networks per router object (for now).
 
 
 // --- Schema validation objects
@@ -141,6 +142,7 @@ var DELETE_SCHEMA = {
  * Returns true if the network pool with these params is provisionable by
  * the owner specified by uuid
  */
+/*
 function provisionableBy(params, uuid) {
     if (!params.hasOwnProperty('owner_uuids')) {
         return true;
@@ -150,7 +152,7 @@ function provisionableBy(params, uuid) {
     return (params.owner_uuids.concat(
         constants.UFDS_ADMIN_UUID).indexOf(uuid) !== -1);
 }
-
+*/
 
 /**
  * Fetch the Network objects for each of the given UUIDs.
@@ -183,7 +185,7 @@ function getAllNetworks(app, log, uuids, callback) {
 
 
 /**
- * Validate that the networks in a pool are not over the maximum limit, and
+ * Validate that the attached networks are not over the maximum limit, and
  * that they all exist.
  */
 function validateNetworks(opts, name, value, callback) {
@@ -201,30 +203,30 @@ function validateNetworks(opts, name, value, callback) {
 function _validateNetworks(opts, name, uuids, callback) {
     var nets = [];
     var notFound = [];
-    var pool_family;
-    var poolTypeNotMatching = [];
+    var router_family;
+    var routerTypeNotMatching = [];
     var validated = [];
 
     assert.ok(opts.app, 'opts.app');
     assert.ok(opts.log, 'opts.log');
 
     /*
-     * Initialize the pool type to the current family to
-     * prevent changing the family of a pool.
+     * Initialize the router type to the current family to
+     * prevent changing the family of a router.
      */
-    if (opts.hasOwnProperty('oldPool')) {
-        pool_family = opts.oldPool.family;
+    if (opts.hasOwnProperty('oldRouter')) {
+        router_family = opts.oldRouter.family;
     }
 
-    if (uuids.length === 0) {
+    if (uuids.length <== 1) {
         callback(errors.invalidParam(name,
-            constants.POOL_MIN_NETS_MSG));
+            constants.ROUTER_MIN_NETS_MSG));
         return;
     }
 
     if (uuids.length > MAX_NETS) {
         callback(errors.invalidParam(name,
-            util.format('maximum %d networks per network pool', MAX_NETS)));
+            util.format('maximum %d networks per router object', MAX_NETS)));
         return;
     }
 
@@ -246,19 +248,9 @@ function _validateNetworks(opts, name, uuids, callback) {
                     return;
                 }
 
-                if (pool_family === undefined) {
-                    pool_family = net.family;
-                }
+		// XXX KEBE SAYS CHECK STUFF HERE,
+		// filling in routerTypeNotMatching...
 
-                if (net.family !== pool_family) {
-                    poolTypeNotMatching.push(uuid);
-                    cb();
-                    return;
-                }
-
-                validated.push(uuid);
-                nets.push(net);
-                cb();
             });
         }
     }, function (err) {
@@ -276,9 +268,9 @@ function _validateNetworks(opts, name, uuids, callback) {
             return;
         }
 
-        if (poolTypeNotMatching.length !== 0) {
+        if (routerTypeNotMatching.length !== 0) {
             callback(errors.invalidParam(name,
-                constants.POOL_AF_MATCH_MSG));
+                constants.ROUTER_AF_MATCH_MSG));
             return;
         }
 
@@ -291,21 +283,17 @@ function _validateNetworks(opts, name, uuids, callback) {
 
 
 /**
- * Validate that if a pool has an owner_uuid, all networks in the pool either
- * match that owner_uuid or have no owner_uuid.
+ * Validate that a router object's owner_uuid, such that all attached networks
+ * either match that owner_uuid or have no owner_uuid.
  */
 function validateNetworkOwners(_opts, _, parsed, callback) {
-    if (!parsed.owner_uuids || !parsed._netobjs ||
-        parsed.owner_uuids.length === 0 ||
+    if (!parsed.owner_uuid || !parsed._netobjs ||
         parsed._netobjs.length === 0) {
         callback();
         return;
     }
 
-    var owners = {};
-    parsed.owner_uuids.concat(constants.UFDS_ADMIN_UUID).forEach(function (u) {
-        owners[u] = 1;
-    });
+    var owner = parse.owner_uuid;
 
     var notMatching = [];
     parsed._netobjs.forEach(function (net) {
@@ -322,7 +310,7 @@ function validateNetworkOwners(_opts, _, parsed, callback) {
 
     if (notMatching.length !== 0) {
         var err = errors.invalidParam('networks',
-            constants.POOL_OWNER_MATCH_MSG);
+            constants.ROUTER_OWNER_MATCH_MSG);
         err.invalid = notMatching;
         callback(err);
         return;
@@ -333,37 +321,16 @@ function validateNetworkOwners(_opts, _, parsed, callback) {
 
 
 
-// --- NetworkPool object
+// --- Router object  XXX KEBE SAYS START HERE.
 
 
 
 /**
- * Network pool model constructor
+ * Router object model constructor
  */
-function NetworkPool(params) {
+function Router(params) {
     assert.object(params, 'params');
 
-    delete params.nic_tag;
-
-    /*
-     * If we're migrating the network pool objects in Moray after a bucket
-     * upgrade, then the "_netobjs" array won't be present. If we're
-     * responding to a request, then we'll have the networks, and can set
-     * fields based on that information.
-     */
-    if (params._netobjs && Array.isArray(params._netobjs) &&
-        params._netobjs.length !== 0) {
-        params.family = params._netobjs[0].family;
-        params.nic_tags_present = [];
-        params._netobjs.forEach(function (network) {
-            var nic_tag = network.nic_tag;
-            if (params.nic_tags_present.indexOf(nic_tag) === -1) {
-                params.nic_tags_present.push(nic_tag);
-            }
-        });
-    }
-
-    mod_moray.valToArray(params, 'owner_uuids');
     this.params = params;
 
     if (!this.params.uuid) {
@@ -373,94 +340,84 @@ function NetworkPool(params) {
     if (this.params.hasOwnProperty('networks')) {
         this.params.networks = util_common.arrayify(this.params.networks);
     }
-
-    this.etag = params.etag || null;
+    // XXX KEBE SAYS FILL ME IN.
 
     Object.seal(this);
 }
 
-Object.defineProperty(NetworkPool.prototype, 'networks', {
-    get: function () { return this.params._netobjs; }
+Object.defineProperty(Router.prototype, 'networks', {
+    // Use _netobjs like network pools?
+    // get: function () { return this.params._netobjs; }
+    // Or not?
+    get: function () { return this.params.networks; }
 });
 
-Object.defineProperty(NetworkPool.prototype, 'family', {
+Object.defineProperty(Router.prototype, 'family', {
     get: function () {
         if (this.params.family !== undefined) {
             return this.params.family;
         }
 
+	// XXX KEBE ASKS, ipv4 by default for now... but what if we want v6?
         return 'ipv4';
     }
 });
 
-Object.defineProperty(NetworkPool.prototype, 'uuid', {
+Object.defineProperty(Router.prototype, 'uuid', {
     get: function () { return this.params.uuid; }
 });
 
 
 /**
- * Returns the raw moray form of the network pool
+ * Returns the raw moray form of the router object
  */
-NetworkPool.prototype.raw = function poolRaw() {
+Router.prototype.raw = function routerRaw() {
     var raw = {
         v: BUCKET.version,
         family: this.family,
         uuid: this.params.uuid,
         name: this.params.name,
         description: this.params.description,
-        networks: this.params.networks.sort()
+        networks: this.params.networks.sort(),
+	owner_uuid: this.params.owner_uuid
     };
 
-    if (this.params.owner_uuids) {
-        raw.owner_uuids_arr = this.params.owner_uuids;
-        raw.owner_uuids = mod_moray.arrayToVal(this.params.owner_uuids);
-    }
+    // XXX KEBE SAYS maybe more that's processing to be done here?
 
     return raw;
 };
 
 
 /**
- * Returns the raw Moray form of this pool for adding to a batch.
+ * Returns the raw Moray form of this router object for adding to a batch.
  */
-NetworkPool.prototype.batch = function poolBatch() {
+Router.prototype.batch = function routerBatch() {
     return {
         bucket: BUCKET.name,
         key: this.uuid,
         operation: 'put',
-        value: this.raw(),
-        options: {
-            etag: this.etag
-        }
+        value: this.raw()
+        // options: {
+        //    etag: this.etag
+        // }
     };
 };
 
 
 /**
- * Returns the serialized (API-facing) form of the network pool
+ * Returns the serialized (API-facing) form of the router object
  */
-NetworkPool.prototype.serialize = function poolSerialize() {
+Router.prototype.serialize = function routerSerialize() {
     var ser = {
         family: this.family,
         uuid: this.params.uuid,
         name: this.params.name,
         description: this.params.description,
-        networks: this.params.networks.sort()
+        networks: this.params.networks.sort(),
+	owner_uuid: this.params.owner_uuid
     };
 
-    if (this.params.hasOwnProperty('nic_tags_present')) {
-        ser.nic_tags_present = this.params.nic_tags_present;
-
-        /*
-         * Set a representative "nic_tag" to provide backwards
-         * compatibility with older NAPI consumers:
-         */
-        ser.nic_tag = this.params.nic_tags_present[0];
-    }
-
-    if (this.params.owner_uuids) {
-        ser.owner_uuids = this.params.owner_uuids;
-    }
+    // XXX KEBE SAYS maybe more that's processing to be done here?
 
     return ser;
 };
@@ -472,10 +429,10 @@ NetworkPool.prototype.serialize = function poolSerialize() {
 
 
 /**
- * Creates a new network pool
+ * Creates a new router object
  */
-function createNetworkPool(app, log, params, callback) {
-    log.debug(params, 'createNetworkPool: entry');
+function createRouter(app, log, params, callback) {
+    log.debug(params, 'createRouter: entry');
 
     validate.params(CREATE_SCHEMA, { app: app, log: log }, params,
         function (err, validatedParams) {
@@ -484,25 +441,25 @@ function createNetworkPool(app, log, params, callback) {
             return;
         }
 
-        var pool = new NetworkPool(validatedParams);
-        app.moray.putObject(BUCKET.name, pool.uuid, pool.raw(), { etag: null },
-            function (err2) {
+        var router = new Router(validatedParams);
+        app.moray.putObject(BUCKET.name, router.uuid, router.raw(),
+	    { etag: null }, function (err2) {
             if (err2) {
                 callback(err2);
                 return;
             }
 
-            callback(null, pool);
+            callback(null, router);
         });
     });
 }
 
 
 /**
- * Gets a network pool
+ * Gets a router object
  */
-function getNetworkPool(app, log, params, callback) {
-    log.debug(params, 'getNetworkPool: entry');
+function getRouter(app, log, params, callback) {
+    log.debug(params, 'getRouter: entry');
 
     validate.params(GET_SCHEMA, null, params, function (err, validated) {
         if (err) {
@@ -518,42 +475,19 @@ function getNetworkPool(app, log, params, callback) {
 
             rec.value.etag = rec._etag;
 
-            if (validated.provisionable_by &&
-                !provisionableBy(rec.value, validated.provisionable_by)) {
-                callback(new restify.NotAuthorizedError(
-                    constants.msg.POOL_OWNER));
-                return;
-            }
+	    // XXX KEBE SAYS FILL ME IN
 
-            var netUUIDs = rec.value.networks;
-
-            assert.array(netUUIDs, 'network pool UUIDs');
-
-            // No networks - don't bother trying to fetch anything.
-            if (netUUIDs.length === 0) {
-                callback(null, new NetworkPool(rec.value));
-                return;
-            }
-
-            getAllNetworks(app, log, netUUIDs, function (err3, res) {
-                if (err3) {
-                    callback(err3);
-                    return;
-                }
-
-                rec.value._netobjs = res;
-                callback(null, new NetworkPool(rec.value));
-            });
+	    // callback(null, router);
         });
     });
 }
 
 
 /**
- * Lists network pools
+ * Lists router objects.
  */
-function listNetworkPools(app, log, oparams, callback) {
-    log.debug({ params: oparams }, 'listNetworkPools: entry');
+function listRouters(app, log, oparams, callback) {
+    log.debug({ params: oparams }, 'listRouters: entry');
 
     validate.params(LIST_SCHEMA, null, oparams, function (valErr, params) {
         if (valErr) {
@@ -563,11 +497,6 @@ function listNetworkPools(app, log, oparams, callback) {
 
         var filterObj = {};
 
-        if (params.provisionable_by) {
-            // Match both pools with that owner_uuid as well as no owner_uuid
-            filterObj.owner_uuids_arr = [ params.provisionable_by, '!*' ];
-        }
-
         if (params.uuid) {
             filterObj.uuid = params.uuid;
         }
@@ -610,22 +539,8 @@ function listNetworkPools(app, log, oparams, callback) {
         req.on('end', function _endList() {
             vasync.forEachParallel({
                 inputs: values,
-                func: function _getNet(val, cb) {
-                    if (!val.networks) {
-                        cb();
-                        return;
-                    }
-
-                    var nets = util_common.arrayify(val.networks);
-                    if (nets.length === 0) {
-                        cb();
-                        return;
-                    }
-
-                    getAllNetworks(app, log, nets, function (err, res) {
-                        if (res) {
-                            val._netobjs = res;
-                        }
+		// XXX KEBE SAYS FILL ME IN...
+                func: function _getRouter(val, cb) {
 
                         cb(err);
                     });
@@ -636,41 +551,32 @@ function listNetworkPools(app, log, oparams, callback) {
                     return;
                 }
 
-                var pools = values.map(function (n) {
-                    return new NetworkPool(n);
+                var routers = values.map(function (n) {
+                    return new Router(n);
                 });
 
-                callback(null, pools);
-            });
+                callback(null, routers);
         });
     });
 }
 
 
 /**
- * Updates a network pool
+ * Updates a Router Object
  */
-function updateNetworkPool(app, log, params, callback) {
-    log.debug(params, 'updateNetworkPool: entry');
+function updateRouter(app, log, params, callback) {
+    log.debug(params, 'updateRouter: entry');
 
-    getNetworkPool(app, log, params, function (getErr, oldPool) {
+    getRouter(app, log, params, function (getErr, oldRouter) {
         if (getErr) {
             callback(getErr);
             return;
         }
 
-        if (!params.hasOwnProperty('networks') &&
-            params.hasOwnProperty('owner_uuids') &&
-            oldPool.params.hasOwnProperty('networks')) {
-            // We need to fetch the networks to validate owner_uuid, so just
-            // let validateNetworks() take care of it
-            params.networks = oldPool.params.networks;
-        }
-
         var uopts = {
             app: app,
             log: log,
-            oldPool: oldPool
+            oldRouter: oldRouter
         };
 
         validate.params(UPDATE_SCHEMA, uopts, params,
@@ -680,29 +586,22 @@ function updateNetworkPool(app, log, params, callback) {
                 return;
             }
 
-            if (validatedParams.hasOwnProperty('owner_uuids') &&
-                validatedParams.owner_uuids.length === 0) {
-                validatedParams.owner_uuids = null;
-            }
-
-            var updatedParams = oldPool.raw();
-            updatedParams._netobjs = oldPool.params._netobjs;
+            var updatedParams = oldRouter.raw();
+	    // XXX KEBE SAYS do update logic now.  Including checking vs.
+            // existing object entries.
 
-            for (var p in validatedParams) {
-                updatedParams[p] = validatedParams[p];
-            }
-
-            var newPool = new NetworkPool(updatedParams);
+            // XXX KEBE SAYS make sure Router() gets built.
+            var newRouter = new Router(updatedParams);
 
-            app.moray.putObject(BUCKET.name, params.uuid, newPool.raw(), {
-                etag: oldPool.etag
+            app.moray.putObject(BUCKET.name, params.uuid, newRouter.raw(), {
+                etag: oldRouter.etag
             }, function (err2) {
                 if (err2) {
                     callback(err2);
                     return;
                 }
 
-                callback(null, newPool);
+                callback(null, newRouter);
             });
         });
     });
@@ -710,36 +609,41 @@ function updateNetworkPool(app, log, params, callback) {
 
 
 /**
- * Deletes a network pool
+ * Deletes a Router object
  */
-function deleteNetworkPool(app, log, params, callback) {
-    log.debug(params, 'deleteNetworkPool: entry');
+function deleteRouter(app, log, params, callback) {
+    log.debug(params, 'deleteRouter: entry');
 
     validate.params(DELETE_SCHEMA, null, params, function (err) {
         if (err) {
             return callback(err);
         }
 
+	// XXX KEBE SAYS Obtain list of networks from this object and
+	// for each network, update network-object by removing routes
+	// for other networks in object. Eeesh, that's O(n^2).
+	// FILL ME IN...
+
         app.moray.delObject(BUCKET.name, params.uuid, callback);
     });
 }
 
 
 /**
- * Initializes the network pools bucket
+ * Initializes the router objects bucket
  */
-function initRouterObjects(app, callback) {
+function initRouters(app, callback) {
     mod_moray.initBucket(app.moray, BUCKET, callback);
 }
 
 
 module.exports = {
     bucket: function () { return BUCKET; },
-    create: createNetworkPool,
-    del: deleteNetworkPool,
-    get: getNetworkPool,
-    init: initNetworkPools,
-    list: listNetworkPools,
-    NetworkPool: NetworkPool,
-    update: updateNetworkPool
+    create: createRouter,
+    del: deleteRouter,
+    get: getRouter,
+    init: initRouters,
+    list: listRouters,
+    Router: Router,
+    update: updateRouter
 };
diff --git a/lib/napictl.js b/lib/napictl.js
index 00edcbe..884c603 100755
--- a/lib/napictl.js
+++ b/lib/napictl.js
@@ -827,6 +827,96 @@ NapiCli.prototype['do_delete-networkpool'].help = 'Delete a network pool';
 
 
 
+// --- Router Object endpoints
+
+
+/**
+ * Lists router objects
+ */
+NapiCli.prototype['do_list-routers'] =
+    function (subcmd, opts, args, callback) {
+    this.napiAction({ fn: 'listRouters', args: args, kv: 0 }, callback);
+};
+
+NapiCli.prototype['do_list-routers'].help = 'List router objectss';
+
+
+/**
+ * Create a router object
+ */
+NapiCli.prototype['do_create-router'] =
+    function (subcmd, opts, args, callback) {
+    var name = args[0];
+    if (!name) {
+        return callback(new MissingArgumentError('name'));
+    }
+
+    this.napiAction({
+        fn: 'createRouter',
+        fnArgs: [ name ],
+        args: args,
+        kv: 1
+    }, callback);
+};
+
+NapiCli.prototype['do_create-router'].help = 'Create a router object';
+
+
+/**
+ * Get a router object
+ */
+NapiCli.prototype['do_get-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID'));
+    }
+
+    this.napiAction({ fn: 'getRouter', fnArgs: [ uuid ] }, callback);
+};
+
+NapiCli.prototype['do_get-router'].help = 'Get a router object';
+
+
+/**
+ * Update a router object
+ */
+NapiCli.prototype['do_update-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID'));
+    }
+
+    this.napiAction({
+        fn: 'updateRouter',
+        fnArgs: [ uuid ],
+        args: args,
+        kv: 1,
+        kvRequired: true
+    }, callback);
+};
+
+NapiCli.prototype['do_update-router'].help = 'Update a router object';
+
+
+/**
+ * Delete a router object
+ */
+NapiCli.prototype['do_delete-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID or name'));
+    }
+
+    this.napiAction({ fn: 'deleteRouter', fnArgs: [ uuid ] }, callback);
+};
+
+NapiCli.prototype['do_delete-router'].help = 'Delete a router object';
+
+
+
 // --- Aggregation endpoints
 
 
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 537439e..6dc887f 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -176,6 +176,12 @@ module.exports = {
     PRIV_RANGE_ONLY: 'subnet must be within private ranges',
     PROV_RANGE_ORDER_MSG:
         'provision_start_ip must be before provision_end_ip',
+    ROUTER_AF_MATCH_MSG:
+        'address family of all networks in on a router must match',
+    ROUTER_MIN_NETS_MSG:
+        'router object must contain at least two networks',
+    ROUTER_OWNER_MATCH_MSG:
+        'a network object owner_uuid does not match the router object',
     SERVER_UNDERLAY_MSG: 'Only server NICs can be underlay NICs',
     SUBNET_FULL_MSG: 'no more free IPs',
     SUBNET_GATEWAY_MISMATCH: 'gateway should match subnet type (%s)',
