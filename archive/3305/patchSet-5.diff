From b1a174e4710030625a19cbd18a6c94d102593b85 Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Mon, 22 Jan 2018 10:00:37 -0500
Subject: [PATCH] NAPI-440 IP address object needs belongs_to_type of router

Steal initial router-object code from network pools.  You gotta start
somewhere.

Remove network-pools contents from new router object source, and dig into
other scaffolding source.
---
 docs/index.md                   |   9 +-
 lib/endpoints/index.js          |   3 +-
 lib/endpoints/networks/index.js |   1 +
 lib/endpoints/router.js         | 135 +++++++
 lib/models/index.js             |   6 +
 lib/models/nic/common.js        |   2 +-
 lib/models/router.js            | 658 ++++++++++++++++++++++++++++++++
 lib/napictl.js                  |  90 +++++
 lib/util/constants.js           |   6 +
 package.json                    |   6 +-
 10 files changed, 907 insertions(+), 9 deletions(-)
 create mode 100644 lib/endpoints/router.js
 create mode 100644 lib/models/router.js

diff --git a/docs/index.md b/docs/index.md
index c2d9318..65305c2 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -30,6 +30,7 @@ The Networking API allows for administering the following:
 - IPs
 - Nics
 - Link Aggregations
+- Router Objects
 
 NAPI itself is just a directory of the above - it does not handle communicating
 these changes to servers, which is the domain of
@@ -464,7 +465,7 @@ Creates a new NIC, provisioning an IP and MAC address in the process. The
 | owner_uuid        | UUID                   | Nic Owner                                                                        |
 | cn_uuid           | UUID                   | The UUID of the CN this NIC is on (optional, unless on fabric)                  |
 | belongs_to_uuid   | UUID                   | The UUID of what this Nic belongs to                                             |
-| belongs_to_type   | String                 | The type that this belongs to (eg: 'zone', 'server')                             |
+| belongs_to_type   | String                 | The type that this belongs to (eg: 'zone', 'server', 'router')                             |
 | ip                | String                 | IP address to assign to the nic                                                  |
 | reserved          | Boolean                | Whether the IP address should be reserved                                        |
 | nic_tags_provided | Array of nic tag names | Nic tags this nic provides                                                       |
@@ -975,7 +976,7 @@ if it matches *all* of the input parameters.
 | ------------------------ | ---------------------- | -------------------------------------------------------------------------------- |
 | owner_uuid               | UUID                   | NIC Owner                                                                        |
 | belongs_to_uuid          | UUID                   | The UUID of what this NIC belongs to                                             |
-| belongs_to_type          | String                 | The type that the NIC belongs to (e.g., 'zone', 'server')                        |
+| belongs_to_type          | String                 | The type that the NIC belongs to (e.g., 'zone', 'server', 'router')              |
 | allow_dhcp_spoofing      | Boolean                | Whether the NIC is allowed to function as a DHCP server                          |
 | allow_ip_spoofing        | Boolean                | Whether the NIC is allowed to spoof IP addresses                                 |
 | allow_mac_spoofing       | Boolean                | Whether the NIC is allowed to spoof MAC addresses                                |
@@ -1101,7 +1102,7 @@ Creates a new nic.
 | mac                      | String                 | MAC address                                                                       |
 | owner_uuid               | UUID                   | Nic Owner                                                                         |
 | belongs_to_uuid          | UUID                   | The UUID of what this Nic belongs to                                              |
-| belongs_to_type          | String                 | The type that this belongs to (eg: 'zone', 'server')                              |
+| belongs_to_type          | String                 | The type that this belongs to (eg: 'zone', 'server', 'router')                    |
 | cn_uuid                  | UUID                   | The UUID of the CN this NIC is on (optional, unless on fabric)                    |
 | ip                       | String                 | IP address to assign to the nic                                                   |
 | network_uuid             | UUID                   | UUID of the network or network pool to provision an IP on                         |
@@ -1185,7 +1186,7 @@ Changes properties of the nic with the given MAC address.
 | ------------------------ | ---------------------- | --------------------------------------------------------------------------------- |
 | owner_uuid               | UUID                   | Nic Owner                                                                         |
 | belongs_to_uuid          | UUID                   | The UUID of what this Nic belongs to                                              |
-| belongs_to_type          | String                 | The type that this belongs to (eg: 'zone', 'server')                              |
+| belongs_to_type          | String                 | The type that this belongs to (eg: 'zone', 'server', 'router')                    |
 | cn_uuid                  | UUID                   | The UUID of the Compute Node a VM's nic is provisioned on (optional)              |
 | ip                       | String                 | IP address to assign to the nic                                                   |
 | network_uuid             | UUID                   | The network UUID the nic's IP should be on                                        |
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index d385a87..9f62355 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -32,6 +32,7 @@ var toRegister = {
     '/nics': require('./nics'),
     '/nic_tags': require('./nic-tags'),
     '/ping': require('./ping'),
+    '/routers': require('./router'),
     '/search': require('./search')
 };
 
diff --git a/lib/endpoints/networks/index.js b/lib/endpoints/networks/index.js
index c22cf1a..1afc85c 100644
--- a/lib/endpoints/networks/index.js
+++ b/lib/endpoints/networks/index.js
@@ -18,6 +18,7 @@ var errors = require('../../util/errors');
 var mod_common = require('./common');
 var mod_net = require('../../models/network');
 var mod_pool = require('../../models/network-pool');
+// var mod_router = require('../../models/router');  // XXX KEBE ASKS, USE ME?!
 var restify = require('restify');
 
 
diff --git a/lib/endpoints/router.js b/lib/endpoints/router.js
new file mode 100644
index 0000000..3cb538f
--- /dev/null
+++ b/lib/endpoints/router.js
@@ -0,0 +1,135 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018, Joyent, Inc.
+ */
+
+/*
+ * NAPI /routers endpoints
+ */
+
+'use strict';
+
+var mod_router = require('../models/router');
+var restify = require('restify');
+
+
+
+// --- Restify handlers
+
+
+
+/**
+ * GET /routers: get the list of router objects
+ */
+function listRouters(req, res, next) {
+    mod_router.list(req.app, req.log, req.params, function (err, routers) {
+        if (err) {
+            return next(err);
+        }
+
+        var serialized = [];
+        for (var p in routers) {
+            serialized.push(routers[p].serialize());
+        }
+
+        res.send(200, serialized);
+        return next();
+    });
+}
+
+
+/**
+ * POST /routers: create a router object
+ */
+function postRouter(req, res, next) {
+    mod_router.create(req.app, req.log, req.params, function (err, router) {
+        if (err) {
+            return next(err);
+        }
+
+        res.send(200, router.serialize());
+        return next();
+    });
+}
+
+
+/**
+ * GET /routers/:uuid: get a router object
+ */
+function getRouter(req, res, next) {
+    mod_router.get(req.app, req.log, req.params, function (err, router) {
+        if (err) {
+            return next(err);
+        }
+
+        if (!router) {
+            return next(new restify.ResourceNotFoundError('not found'));
+        }
+
+        res.send(200, router.serialize());
+        return next();
+    });
+}
+
+
+/**
+ * PUT /routers/:uuid: update a router object
+ */
+function putRouter(req, res, next) {
+    mod_router.update(req.app, req.log, req.params, function (err, router) {
+        if (err) {
+            return next(err);
+        }
+
+        res.send(200, router.serialize());
+        return next();
+    });
+}
+
+
+/**
+ * DELETE /routers/:uuid: delete a router object
+ */
+function deleteRouter(req, res, next) {
+    mod_router.del(req.app, req.log, req.params, function (err) {
+        if (err) {
+            return next(err);
+        }
+
+        res.send(204);
+        return next();
+    });
+}
+
+
+/**
+ * Register all endpoints with the restify server
+ */
+function register(http, before) {
+    http.get({ path: '/routers', name: 'ListRouters' },
+        before, listRouters);
+    http.head({ path: '/routers', name: 'HeadRouters' },
+        before, listRouters);
+    http.post({ path: '/routers', name: 'CreateRouter' },
+            before, postRouter);
+
+    http.get({ path: '/routers/:uuid', name: 'GetRouter' },
+        before, getRouter);
+    http.head({ path: '/routers/:uuid', name: 'HeadRouter' },
+        before, getRouter);
+    http.put({ path: '/routers/:uuid', name: 'UpdateRouter' },
+            before, putRouter);
+    http.del({ path: '/routers/:uuid', name: 'DeleteRouter' },
+        before, deleteRouter);
+}
+
+
+
+module.exports = {
+    register: register
+};
diff --git a/lib/models/index.js b/lib/models/index.js
index d3c684e..e0ae281 100644
--- a/lib/models/index.js
+++ b/lib/models/index.js
@@ -20,6 +20,7 @@ var mod_network_pool = require('./network-pool');
 var mod_network = require('./network');
 var mod_nic = require('./nic');
 var mod_nic_tag = require('./nic-tag');
+var mod_router = require('./router');
 var mod_vlan = require('./vlan');
 var vasync = require('vasync');
 
@@ -41,6 +42,7 @@ function initializeModels(app, callback) {
             mod_nic_tag,
             mod_network,
             mod_network_pool,
+            mod_router,
             mod_vlan
         ],
         func: function _initModel(mod, cb) {
@@ -53,6 +55,10 @@ function initializeModels(app, callback) {
 module.exports = {
     init: initializeModels,
     models: [
+        {
+            constructor: mod_router.Router,
+            bucket: mod_router.bucket()
+        },
         {
             constructor: mod_network_pool.NetworkPool,
             bucket: mod_network_pool.bucket()
diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index 71f4c7e..3b17731 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -30,7 +30,7 @@ var validate = require('../../util/validate');
 // --- Globals
 
 var BUCKET = require('./bucket').BUCKET;
-var BELONGS_TO_TYPES = [ 'other', 'server', 'zone' ];
+var BELONGS_TO_TYPES = [ 'other', 'server', 'zone', 'router' ];
 var VALID_NIC_STATES = [ 'provisioning', 'stopped', 'running' ];
 
 var getPoolIntersections = util_intersect.getPoolIntersections;
diff --git a/lib/models/router.js b/lib/models/router.js
new file mode 100644
index 0000000..8ca1d1f
--- /dev/null
+++ b/lib/models/router.js
@@ -0,0 +1,658 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018, Joyent, Inc.
+ */
+
+/*
+ * router object model
+ */
+
+'use strict';
+
+var assert = require('assert-plus');
+var constants = require('../util/constants');
+var errors = require('../util/errors');
+var jsprim = require('jsprim');
+var mod_moray = require('../apis/moray');
+var mod_net = require('./network');
+// var restify = require('restify');
+var util = require('util');
+var util_common = require('../util/common');
+var UUID = require('node-uuid');
+var validate = require('../util/validate');
+var vasync = require('vasync');
+
+
+
+// --- Globals
+
+
+var BUCKET = {
+    desc: 'router object',
+    name: 'napi_router_objects',
+    schema: {
+        index: {
+            // Router Object's name
+            name: { type: 'string' },
+            // Array of network UUIDs.
+            networks: { type: '[string]' },
+            // IPv4 or IPv6
+            family: { type: 'string' },
+            // Router Object's UUID
+            uuid: { type: 'string', unique: true },
+            // Router Object's *owner* UUID.
+            // XXX KEBE ASKS, unique for owner_uuid?
+            owner_uuid: { type: 'string', unique: true},
+
+            // Additional descriptive text (XXX KEBE SAYS update RFD 120...)
+            description: { type: 'string' }
+        }
+    },
+    morayVersion: 2,        // moray version must be > than this
+    version: 1
+};
+var MAX_NETS = 32; // No more than 32 networks per router object (for now).
+
+
+// --- Schema validation objects
+
+var CREATE_SCHEMA = {
+    required: {
+        name: validate.string,
+        networks: validateNetworks,
+        owner_uuid: validate.UUID
+    },
+    optional: {
+        description: validate.string
+        // XXX KEBE ASKS, you sure?
+        // uuid: validate.UUID,
+    }
+    // XXX KEBE ASKS:  after?
+};
+
+var GET_SCHEMA = {
+    required: {
+        uuid: validate.UUID
+    },
+    optional: {
+        // XXX KEBE ASKS, get by owner_uuid? If so, update RFD 120...
+    }
+};
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        uuid: validate.uuidPrefix,
+        limit: validate.limit,
+        offset: validate.offset,
+        name: validate.string,
+        family: validate.enum([ 'ipv4', 'ipv6' ]),
+        networks: validate.stringOrArray
+    },
+    after: function (_opts, _, parsed, cb) {
+        /*
+         * For now we only allow a single network UUID; in the future, once we
+         * decide how we want searching on multiple UUIDs to work by default
+         * (AND or OR), this restriction can be lifted.
+         */
+        var networks = parsed.networks;
+        if (networks && Array.isArray(networks) && networks.length > 1) {
+            cb(new errors.invalidParam('networks',
+                'Only one network UUID allowed'));
+            return;
+        }
+
+        cb();
+    }
+};
+
+// XXX KEBE ASKS, Change ModifyRouterNetworks to UpdateRouterNetworks in
+// RFD 120?
+var UPDATE_SCHEMA = {
+    required: {
+        // XXX KEBE ASKS FILL ME MORE IN?
+        uuid: validate.UUID
+    },
+    optional: {
+        name: validate.string,
+        description: validate.string,
+        // XXX KEBE ASKS, how?
+        networks: validateNetworks
+    }
+    // XXX KEBE ASKS:  after?
+};
+
+var DELETE_SCHEMA = {
+    required: {
+        uuid: validate.UUID
+    }
+    // XXX KEBE ASKS, after?
+};
+
+// --- Helpers
+
+
+
+/**
+ * Returns true if the network pool with these params is provisionable by
+ * the owner specified by uuid
+ */
+/* BEGIN JSSTYLED */
+/*
+function provisionableBy(params, uuid) {
+    if (!params.hasOwnProperty('owner_uuids')) {
+        return true;
+    }
+
+    mod_moray.valToArray(params, 'owner_uuids');
+    return (params.owner_uuids.concat(
+        constants.UFDS_ADMIN_UUID).indexOf(uuid) !== -1);
+}
+*/
+/* END JSSTYLED */
+
+/**
+ * Fetch the Network objects for each of the given UUIDs.
+ * XXX KEBE SAYS UNCOMMENT ME...
+ */
+/* BEGIN JSSTYLED */
+/*
+function getAllNetworks(app, log, uuids, callback) {
+    vasync.forEachParallel({
+        inputs: uuids,
+        func: function (uuid, cb) {
+            mod_net.get({
+                app: app,
+                log: log,
+                params: { uuid: uuid }
+            }, cb);
+        }
+    }, function getResults(err, results) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        function getResult(entry) {
+            return entry.result;
+        }
+
+        var networks = results.operations.map(getResult);
+
+        callback(null, networks);
+    });
+}
+*/
+/* END JSSTYLED */
+
+/**
+ * Validate that the attached networks are not over the maximum limit, and
+ * that they all exist.
+ */
+function validateNetworks(opts, name, value, callback) {
+    validate.UUIDarray(opts, name, value, function (err, uuids) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        _validateNetworks(opts, name, uuids, callback);
+    });
+}
+
+
+function _validateNetworks(opts, name, uuids, callback) {
+    var nets = [];
+    var notFound = [];
+    // var router_family;
+    var routerTypeNotMatching = [];
+    var validated = [];
+
+    assert.ok(opts.app, 'opts.app');
+    assert.ok(opts.log, 'opts.log');
+
+    /*
+     * Initialize the router type to the current family to
+     * prevent changing the family of a router.
+     */
+    // if (opts.hasOwnProperty('oldRouter')) {
+    //     router_family = opts.oldRouter.family;
+    // }
+
+    if (uuids.length <= 1) {
+        callback(errors.invalidParam(name,
+            constants.ROUTER_MIN_NETS_MSG));
+        return;
+    }
+
+    if (uuids.length > MAX_NETS) {
+        callback(errors.invalidParam(name,
+            util.format('maximum %d networks per router object', MAX_NETS)));
+        return;
+    }
+
+    vasync.forEachParallel({
+        inputs: uuids,
+        func: function _validateNetworkUUID(uuid, cb) {
+            mod_net.get({
+                app: opts.app,
+                log: opts.log,
+                params: { uuid: uuid }
+            }, function (err) {  // XXX KEBE SAYS, 2nd param "net"?
+                if (err) {
+                    if (err.name === 'ResourceNotFoundError') {
+                        notFound.push(uuid);
+                        cb();
+                    } else {
+                        cb(err);
+                    }
+                    return;
+                }
+
+                // XXX KEBE SAYS CHECK STUFF HERE,
+                // filling in routerTypeNotMatching...
+
+            });
+        }
+    }, function (err) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        if (notFound.length !== 0) {
+            err = errors.invalidParam(name,
+                util.format('unknown network%s',
+                    notFound.length === 1 ? '' : 's'));
+            err.invalid = notFound;
+            callback(err);
+            return;
+        }
+
+        if (routerTypeNotMatching.length !== 0) {
+            callback(errors.invalidParam(name,
+                constants.ROUTER_AF_MATCH_MSG));
+            return;
+        }
+
+        var toReturn = { _netobjs: nets };
+        toReturn[name] = validated;
+
+        callback(null, null, toReturn);
+    });
+}
+
+
+/**
+ * Validate that a router object's owner_uuid, such that all attached networks
+ * either match that owner_uuid or have no owner_uuid.
+ * XXX KEBE SAYS UNCOMMENT ME...
+ */
+/* BEGIN JSSTYLED */
+/*
+function validateNetworkOwners(_opts, _, parsed, callback) {
+    if (!parsed.owner_uuid || !parsed._netobjs ||
+        parsed._netobjs.length === 0) {
+        callback();
+        return;
+    }
+
+    var owner = parse.owner_uuid;
+
+    var notMatching = [];
+    parsed._netobjs.forEach(function (net) {
+        if (net.params.hasOwnProperty('owner_uuids')) {
+            for (var o in net.params.owner_uuids) {
+                if (owners.hasOwnProperty(net.params.owner_uuids[o])) {
+                    return;
+                }
+            }
+
+            notMatching.push(net.uuid);
+        }
+    });
+
+    if (notMatching.length !== 0) {
+        var err = errors.invalidParam('networks',
+            constants.ROUTER_OWNER_MATCH_MSG);
+        err.invalid = notMatching;
+        callback(err);
+        return;
+    }
+
+    callback();
+}
+*/
+/* END JSSTYLED */
+
+
+// --- Router object  XXX KEBE SAYS START HERE.
+
+
+
+/**
+ * Router object model constructor
+ */
+function Router(params) {
+    assert.object(params, 'params');
+
+    this.params = params;
+
+    if (!this.params.uuid) {
+        this.params.uuid = UUID.v4();
+    }
+
+    if (this.params.hasOwnProperty('networks')) {
+        this.params.networks = util_common.arrayify(this.params.networks);
+    }
+    // XXX KEBE SAYS FILL ME IN.
+
+    Object.seal(this);
+}
+
+Object.defineProperty(Router.prototype, 'networks', {
+    // Use _netobjs like network pools?
+    // get: function () { return this.params._netobjs; }
+    // Or not?
+    get: function () { return this.params.networks; }
+});
+
+Object.defineProperty(Router.prototype, 'family', {
+    get: function () {
+        if (this.params.family !== undefined) {
+            return this.params.family;
+        }
+
+        // XXX KEBE ASKS, ipv4 by default for now... but what if we want v6?
+        return 'ipv4';
+    }
+});
+
+Object.defineProperty(Router.prototype, 'uuid', {
+    get: function () { return this.params.uuid; }
+});
+
+
+/**
+ * Returns the raw moray form of the router object
+ */
+Router.prototype.raw = function routerRaw() {
+    var raw = {
+        v: BUCKET.version,
+        family: this.family,
+        uuid: this.params.uuid,
+        name: this.params.name,
+        description: this.params.description,
+        networks: this.params.networks.sort(),
+        owner_uuid: this.params.owner_uuid
+    };
+
+    // XXX KEBE SAYS maybe more that's processing to be done here?
+
+    return raw;
+};
+
+
+/**
+ * Returns the raw Moray form of this router object for adding to a batch.
+ */
+Router.prototype.batch = function routerBatch() {
+    return {
+        bucket: BUCKET.name,
+        key: this.uuid,
+        operation: 'put',
+        value: this.raw()
+        // options: {
+        //    etag: this.etag
+        // }
+    };
+};
+
+
+/**
+ * Returns the serialized (API-facing) form of the router object
+ */
+Router.prototype.serialize = function routerSerialize() {
+    var ser = {
+        family: this.family,
+        uuid: this.params.uuid,
+        name: this.params.name,
+        description: this.params.description,
+        networks: this.params.networks.sort(),
+        owner_uuid: this.params.owner_uuid
+    };
+
+    // XXX KEBE SAYS maybe more that's processing to be done here?
+
+    return ser;
+};
+
+
+
+// --- Exported functions
+
+
+
+/**
+ * Creates a new router object
+ */
+function createRouter(app, log, params, callback) {
+    log.debug(params, 'createRouter: entry');
+
+    validate.params(CREATE_SCHEMA, { app: app, log: log }, params,
+        function (err, validatedParams) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        var router = new Router(validatedParams);
+        app.moray.putObject(BUCKET.name, router.uuid, router.raw(),
+            { etag: null }, function (err2) {
+            if (err2) {
+                callback(err2);
+                return;
+            }
+
+            callback(null, router);
+        });
+    });
+}
+
+
+/**
+ * Gets a router object
+ */
+function getRouter(app, log, params, callback) {
+    log.debug(params, 'getRouter: entry');
+
+    validate.params(GET_SCHEMA, null, params, function (err, validated) {
+        if (err) {
+            return callback(err);
+        }
+
+        mod_moray.getObj(app.moray, BUCKET, validated.uuid,
+            function (err2, rec) {
+            if (err2) {
+                callback(err2);
+                return;
+            }
+
+            rec.value.etag = rec._etag;
+
+            // XXX KEBE SAYS FILL ME IN
+
+            // callback(null, router);
+        });
+    });
+}
+
+
+/**
+ * Lists router objects.
+ */
+function listRouters(app, log, oparams, callback) {
+    log.debug({ params: oparams }, 'listRouters: entry');
+
+    validate.params(LIST_SCHEMA, null, oparams, function (valErr, params) {
+        if (valErr) {
+            callback(valErr);
+            return;
+        }
+
+        var filterObj = {};
+
+        if (params.uuid) {
+            filterObj.uuid = params.uuid;
+        }
+
+        if (params.family) {
+            filterObj.family = params.family;
+        }
+
+        if (params.name) {
+            filterObj.name = params.name;
+        }
+
+        if (params.networks) {
+            filterObj.networks = params.networks;
+        }
+
+        var filter = jsprim.isEmpty(filterObj) ?
+            '(uuid=*)' : mod_moray.filter(filterObj);
+
+        var req = app.moray.findObjects(BUCKET.name, filter, {
+            limit: params.limit,
+            offset: params.offset,
+            sort: {
+                attribute: 'uuid',
+                order: 'ASC'
+            }
+        });
+
+        var values = [];
+
+        req.on('error', function _onListErr(err) {
+            return callback(err);
+        });
+
+        req.on('record', function _onListRec(rec) {
+            log.debug(rec, 'record from moray');
+            values.push(rec.value);
+        });
+
+        req.on('end', function _endList() {
+            vasync.forEachParallel({
+                inputs: values,
+                // XXX KEBE SAYS FILL ME IN...
+                func: function _getRouter(val, cb) {
+                    cb(val);
+                }
+            }, function (err) {
+                if (err) {
+                    callback(err);
+                    return;
+                }
+
+                var routers = values.map(function (n) {
+                    return new Router(n);
+                });
+
+                callback(null, routers);
+            });
+        });
+    });
+}
+
+
+/**
+ * Updates a Router Object
+ */
+function updateRouter(app, log, params, callback) {
+    log.debug(params, 'updateRouter: entry');
+
+    getRouter(app, log, params, function (getErr, oldRouter) {
+        if (getErr) {
+            callback(getErr);
+            return;
+        }
+
+        var uopts = {
+            app: app,
+            log: log,
+            oldRouter: oldRouter
+        };
+
+        validate.params(UPDATE_SCHEMA, uopts, params,
+            function (err) { // , validatedParams) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            var updatedParams = oldRouter.raw();
+            // XXX KEBE SAYS do update logic now.  Including checking vs.
+            // existing object entries.
+
+            // XXX KEBE SAYS make sure Router() gets built.
+            var newRouter = new Router(updatedParams);
+
+            app.moray.putObject(BUCKET.name, params.uuid, newRouter.raw(), {
+                etag: oldRouter.etag
+            }, function (err2) {
+                if (err2) {
+                    callback(err2);
+                    return;
+                }
+
+                callback(null, newRouter);
+            });
+        });
+    });
+}
+
+
+/**
+ * Deletes a Router object
+ */
+function deleteRouter(app, log, params, callback) {
+    log.debug(params, 'deleteRouter: entry');
+
+    validate.params(DELETE_SCHEMA, null, params, function (err) {
+        if (err) {
+            return callback(err);
+        }
+
+        // XXX KEBE SAYS Obtain list of networks from this object and
+        // for each network, update network-object by removing routes
+        // for other networks in object. Eeesh, that's O(n^2).
+        // FILL ME IN...
+
+        app.moray.delObject(BUCKET.name, params.uuid, callback);
+    });
+}
+
+
+/**
+ * Initializes the router objects bucket
+ */
+function initRouters(app, callback) {
+    mod_moray.initBucket(app.moray, BUCKET, callback);
+}
+
+
+module.exports = {
+    bucket: function () { return BUCKET; },
+    create: createRouter,
+    del: deleteRouter,
+    get: getRouter,
+    init: initRouters,
+    list: listRouters,
+    Router: Router,
+    update: updateRouter
+};
diff --git a/lib/napictl.js b/lib/napictl.js
index 00edcbe..884c603 100755
--- a/lib/napictl.js
+++ b/lib/napictl.js
@@ -827,6 +827,96 @@ NapiCli.prototype['do_delete-networkpool'].help = 'Delete a network pool';
 
 
 
+// --- Router Object endpoints
+
+
+/**
+ * Lists router objects
+ */
+NapiCli.prototype['do_list-routers'] =
+    function (subcmd, opts, args, callback) {
+    this.napiAction({ fn: 'listRouters', args: args, kv: 0 }, callback);
+};
+
+NapiCli.prototype['do_list-routers'].help = 'List router objectss';
+
+
+/**
+ * Create a router object
+ */
+NapiCli.prototype['do_create-router'] =
+    function (subcmd, opts, args, callback) {
+    var name = args[0];
+    if (!name) {
+        return callback(new MissingArgumentError('name'));
+    }
+
+    this.napiAction({
+        fn: 'createRouter',
+        fnArgs: [ name ],
+        args: args,
+        kv: 1
+    }, callback);
+};
+
+NapiCli.prototype['do_create-router'].help = 'Create a router object';
+
+
+/**
+ * Get a router object
+ */
+NapiCli.prototype['do_get-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID'));
+    }
+
+    this.napiAction({ fn: 'getRouter', fnArgs: [ uuid ] }, callback);
+};
+
+NapiCli.prototype['do_get-router'].help = 'Get a router object';
+
+
+/**
+ * Update a router object
+ */
+NapiCli.prototype['do_update-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID'));
+    }
+
+    this.napiAction({
+        fn: 'updateRouter',
+        fnArgs: [ uuid ],
+        args: args,
+        kv: 1,
+        kvRequired: true
+    }, callback);
+};
+
+NapiCli.prototype['do_update-router'].help = 'Update a router object';
+
+
+/**
+ * Delete a router object
+ */
+NapiCli.prototype['do_delete-router'] =
+    function (subcmd, opts, args, callback) {
+    var uuid = args[0];
+    if (!uuid) {
+        return callback(new MissingArgumentError('UUID or name'));
+    }
+
+    this.napiAction({ fn: 'deleteRouter', fnArgs: [ uuid ] }, callback);
+};
+
+NapiCli.prototype['do_delete-router'].help = 'Delete a router object';
+
+
+
 // --- Aggregation endpoints
 
 
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 537439e..6dc887f 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -176,6 +176,12 @@ module.exports = {
     PRIV_RANGE_ONLY: 'subnet must be within private ranges',
     PROV_RANGE_ORDER_MSG:
         'provision_start_ip must be before provision_end_ip',
+    ROUTER_AF_MATCH_MSG:
+        'address family of all networks in on a router must match',
+    ROUTER_MIN_NETS_MSG:
+        'router object must contain at least two networks',
+    ROUTER_OWNER_MATCH_MSG:
+        'a network object owner_uuid does not match the router object',
     SERVER_UNDERLAY_MSG: 'Only server NICs can be underlay NICs',
     SUBNET_FULL_MSG: 'no more free IPs',
     SUBNET_GATEWAY_MISMATCH: 'gateway should match subnet type (%s)',
diff --git a/package.json b/package.json
index 96fbdeb..2b70a16 100644
--- a/package.json
+++ b/package.json
@@ -27,11 +27,11 @@
     "verror": "1.9.0"
   },
   "devDependencies": {
-    "moray-sandbox": "0.1.1",
+    "eslint": "^2.13.1",
+    "eslint-plugin-joyent": "^1.0.1",
     "faucet": "0.0.1",
     "istanbul": "^0.4.0",
-    "eslint": "2.13.1",
-    "eslint-plugin-joyent": "1.0.1"
+    "moray-sandbox": "0.1.1"
   },
   "scripts": {
     "start": "./sbin/napid",
-- 
2.21.0

