From 670d2e63907e3fbc7f548bc6b178dffd838f0bb7 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Mon, 20 Feb 2017 18:28:24 +0100
Subject: [PATCH] TOOLS-1687 `sdcadm up UUID-OF-INSTANCE-ON-CN1 -s CN2` should
 fail

---
 lib/cli/do_update.js    |  9 +----
 lib/procedures/index.js | 83 +++++++++++++++++++++++++++++------------
 2 files changed, 62 insertions(+), 30 deletions(-)

diff --git a/lib/cli/do_update.js b/lib/cli/do_update.js
index e2e4c91..39a99b2 100644
--- a/lib/cli/do_update.js
+++ b/lib/cli/do_update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -57,11 +57,6 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
         self.sdcadm.updates.channel = opts.channel;
     }
 
-    if (opts.servers && opts.experimental) {
-        opts.servers = opts.servers.split(',');
-    }
-
-
     vasync.pipeline({funcs: [
         /**
          * Also see 'sdcadm update' section in docs/index.md.
@@ -422,7 +417,7 @@ do_experimental_update.options = do_update.options.concat(
     },
     {
         names: ['servers', 's'],
-        type: 'string',
+        type: 'arrayOfCommaSepString',
         help: 'Comma separated list of servers (either hostnames or uuids) ' +
             'where agents will be updated. If nothing is said, all setup ' +
             'servers are assumed.'
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 7c7ca55..0e795cb 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -20,7 +20,10 @@ var util = require('util'),
 var vasync = require('vasync');
 
 var common = require('../common');
-var errors = require('../errors');
+var errors = require('../errors'),
+    MultiError = errors.MultiError,
+    UpdateError = errors.UpdateError,
+    UsageError = errors.UsageError;
 
 // --- HA ready services
 var HA_READY_SVCS = [
@@ -170,13 +173,22 @@ function coordinatePlan(opts, cb) {
             ].concat(HA_READY_SVCS);
             var handle = [];
             var remaining = [];
+            var errs = [];
             changes.forEach(function (change) {
                 var svcInsts = instsFromSvcName[change.service.name] || [];
                 if (change.type === 'update-instance' &&
                     ~simpleServices.indexOf(change.service.name))
                 {
-                    change.inst = change.instance;
-                    handle.push(change);
+                    if (opts.servers && opts.servers.length &&
+                        opts.servers.indexOf(change.instance.server) === -1) {
+                        errs.push(new UpdateError(format(
+                            'Instance "%s" is not on server(s) "%s"',
+                            change.instance.instance,
+                            opts.servers.join(', '))));
+                    } else {
+                        change.inst = change.instance;
+                        handle.push(change);
+                    }
                 } else if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
                     ~simpleServices.indexOf(change.service.name))
@@ -228,7 +240,11 @@ function coordinatePlan(opts, cb) {
                     changes: handle
                 }));
             }
-            next();
+            var err;
+            if (errs.length) {
+                err = (errs.length === 1 ? errs[0] : new MultiError(errs));
+            }
+            next(err);
         },
 
         function updateSingleHeadnodeImgapi(_, next) {
@@ -487,7 +503,7 @@ function coordinatePlan(opts, cb) {
             changes.forEach(function (change) {
                 if (change.type === 'update-instance' &&
                     change.service.name === 'manatee') {
-                    return cb(new errors.UsageError(
+                    return cb(new UsageError(
                         'Individual update of manatee instances ' +
                         'is not allowed'));
                 }
@@ -529,7 +545,7 @@ function coordinatePlan(opts, cb) {
             changes.forEach(function (change) {
                 if (change.type === 'update-instance' &&
                     change.service.name === 'binder') {
-                    return cb(new errors.UsageError(
+                    return cb(new UsageError(
                         'Individual update of binder instances ' +
                         'is not allowed'));
                 }
@@ -588,7 +604,7 @@ function coordinatePlan(opts, cb) {
                 sdcadm.cnapi.getServer(change.server, function (sErr, serv) {
                     if (sErr) {
                         remaining.push(change);
-                        err = new errors.UsageError('Cannot find server \'' +
+                        err = new UsageError('Cannot find server \'' +
                                 change.server + '\'');
                         log.error({err: sErr}, 'createServiceInstance');
                         return nextChange();
@@ -609,7 +625,7 @@ function coordinatePlan(opts, cb) {
                     } else {
                         if (avoid.indexOf(sName) === -1) {
                             // Let the user know about --skip-ha-check
-                            err = new errors.UsageError(
+                            err = new UsageError(
                                 'Must provide \'--skip-ha-check\' option in ' +
                                 'order to create another instance of ' +
                                 sName);
@@ -661,7 +677,7 @@ function coordinatePlan(opts, cb) {
 
             // Make sure we get a list of uuids even if hostnames may be
             // initially present as servers option:
-            if (opts.servers) {
+            if (opts.servers && opts.servers.length) {
                 opts.servers = opts.servers.map(function (s) {
                     return opts.serverFromUuidOrHostname[s].uuid;
                 });
@@ -676,12 +692,16 @@ function coordinatePlan(opts, cb) {
                     return;
                 }
                 if (disallowed.indexOf(change.service.name) !== -1) {
-                    errs.push(change.service.name);
-                    remaining.push(change);
+                    errs.push(new UsageError(format(
+                        'Update of the agent "%s" is not supported.\n' +
+                        'Please consider using `sdcadm experimental ' +
+                        'update-agents` (deprecated) instead.',
+                        change.service.name
+                    )));
                     return;
                 }
 
-                var svcInsts;
+                var svcInsts = [];
                 if (change.type === 'update-service') {
                     svcInsts = instsFromSvcName[change.service.name] || [];
                     // If we have a given set of servers, just filter instances
@@ -692,7 +712,15 @@ function coordinatePlan(opts, cb) {
                         });
                     }
                 } else if (change.instance) {
-                    svcInsts = [change.instance];
+                    if (opts.servers && opts.servers.length &&
+                        opts.servers.indexOf(change.instance.server) === -1) {
+                        errs.push(new UpdateError(format(
+                            'Instance "%s" is not on server(s) "%s"',
+                            change.instance.instance,
+                            opts.servers.join(', '))));
+                    } else {
+                        svcInsts = [change.instance];
+                    }
                 }
 
                 if (allowed.indexOf(change.service.name) !== -1) {
@@ -731,11 +759,7 @@ function coordinatePlan(opts, cb) {
             }
             var err = null;
             if (errs.length) {
-                err = new errors.UsageError(format(
-                    'Update of the agents \'%s\' is not supported.\n' +
-                    'Please consider using `sdcadm experimental ' +
-                    'update-agents` (deprecated) instead.',
-                    errs.join(', ')));
+                err = (errs.length === 1 ? errs[0] : new MultiError(errs));
             }
             next(err);
         },
@@ -743,10 +767,11 @@ function coordinatePlan(opts, cb) {
         function dockerLogger(_, next) {
             var handle = [];
             var remaining = [];
+            var errs = [];
 
             // Make sure we get a list of uuids even if hostnames may be
             // initially present as servers option:
-            if (opts.servers) {
+            if (opts.servers && opts.servers.length) {
                 opts.servers = opts.servers.map(function (s) {
                     return opts.serverFromUuidOrHostname[s].uuid;
                 });
@@ -758,7 +783,7 @@ function coordinatePlan(opts, cb) {
                     return;
                 }
 
-                var svcInsts;
+                var svcInsts = [];
                 if (change.type === 'update-service') {
                     svcInsts = instsFromSvcName[change.service.name] || [];
                     // If we have a given set of servers, just filter instances
@@ -769,7 +794,15 @@ function coordinatePlan(opts, cb) {
                         });
                     }
                 } else if (change.instance) {
-                    svcInsts = [change.instance];
+                    if (opts.servers && opts.servers.length &&
+                        opts.servers.indexOf(change.instance.server) === -1) {
+                        errs.push(new UpdateError(format(
+                            'Instance "%s" is not on server(s) "%s"',
+                            change.instance.instance,
+                            opts.servers.join(', '))));
+                    } else {
+                        svcInsts = [change.instance];
+                    }
                 }
 
                 change.insts = svcInsts;
@@ -792,7 +825,11 @@ function coordinatePlan(opts, cb) {
                     changes: handle
                 }));
             }
-            next();
+            var err;
+            if (errs.length) {
+                err = (errs.length === 1 ? errs[0] : new MultiError(errs));
+            }
+            next(err);
         },
 
         function sdcadmAvailable(_, next) {
@@ -830,7 +867,7 @@ function coordinatePlan(opts, cb) {
                 })
                 .map(function (c) { return JSON.stringify(c); })
                 .join('\n    ');
-            cb(new errors.UpdateError(
+            cb(new UpdateError(
                 'do not support the following changes:\n    ' + summary));
         } else {
             if (opts.plan.justImages) {
-- 
2.21.0

