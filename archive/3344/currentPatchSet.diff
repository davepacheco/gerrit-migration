From b5ddded7169f6cc9d2e8305086b833dc876ba45e Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Wed, 14 Feb 2018 21:44:26 +0000
Subject: [PATCH] joyent/node-artedi#13 add DTrace probes Reviewed by: Dylan
 Yep <dyep49@gmail.com> Approved by: Dylan Yep <dyep49@gmail.com>

---
 CHANGES.md           |  3 +++
 README.md            | 52 ++++++++++++++++++++++++++++++++++++++++++++
 lib/counter.js       |  7 ++++++
 lib/gauge.js         | 11 ++++++++++
 lib/histogram.js     |  7 ++++++
 lib/metric.js        | 12 ++++++++++
 lib/metric_vector.js |  7 ++++++
 lib/provider.js      | 47 +++++++++++++++++++++++++++++++++++++++
 package.json         |  3 ++-
 9 files changed, 148 insertions(+), 1 deletion(-)
 create mode 100644 lib/provider.js

diff --git a/CHANGES.md b/CHANGES.md
index 48d9fba..308219b 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,9 @@
 ## Not yet released
 None
 
+## 1.3.0
+* #13 add DTrace probes
+
 ## 1.2.1
 * #12 histograms can't observe values less than one
 
diff --git a/README.md b/README.md
index 0ca283b..beafbbd 100644
--- a/README.md
+++ b/README.md
@@ -81,6 +81,58 @@ For more advanced usage and full API documentation, see
 npm install artedi
 ```
 
+## DTrace probes
+artedi includes some useful DTrace probes. The full listing of probes and their
+arguments can be found in the [lib/provider.js](./lib/provider.js) file.
+
+In this first example artedi is observing the latency of queries to three
+Postgres instances (using joyent/pgstatsmon). The latency observations include
+the name of the backend Postgres instance.
+
+We can create a graph of each Postgres backend's latency using built-in DTrace
+aggregation:
+```
+$ dtrace -qn 'artedi*:::histogram-observe {@lat[json(copyinstr(arg2), "name")] = quantize(arg1);} tick-10s {printa(@lat);}'
+
+  3.postgres.walleye.kkantor.com-87eb177c
+           value  ------------- Distribution ------------- count
+               8 |                                         0
+              16 |@@@@@@@@@@                               5
+              32 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@            15
+              64 |@@                                       1
+             128 |                                         0
+
+  2.postgres.walleye.kkantor.com-335c1a83
+           value  ------------- Distribution ------------- count
+               8 |                                         0
+              16 |@@@@@@@@                                 4
+              32 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           16
+              64 |@@                                       1
+             128 |                                         0
+
+  1.postgres.walleye.kkantor.com-f5c49b33
+           value  ------------- Distribution ------------- count
+               8 |                                         0
+              16 |@@@@@@@@                                 4
+              32 |@@@@@@@@@@@@@@@@@@@@@@@@@@@              14
+              64 |@@@@@@                                   3
+             128 |                                         0
+^C
+```
+
+We could also retrieve the number of HTTP operations performed by HTTP handler
+name and return code (from manta-muskie):
+```
+$ dtrace -qn 'artedi*:::counter-add /copyinstr(arg0) == "http_requests_completed" /{ jsonstr = copyinstr(arg2); @counts[json(jsonstr, "operation"), json(jsonstr, "statusCode")] = count(); }'
+^C
+
+  getstorage    200     135
+  putobject     204     137
+```
+
+These probes could conceivably be used to create more complicated reporting
+tools as well.
+
 ## License
 MPL-v2
 
diff --git a/lib/counter.js b/lib/counter.js
index ca60715..f66485c 100644
--- a/lib/counter.js
+++ b/lib/counter.js
@@ -10,6 +10,7 @@ var mod_assert = require('assert-plus');
 var VError = require('verror').VError;
 
 var lib_common = require('./common');
+var lib_provider = require('./provider');
 
 /*
  * A Counter is a type of collector that can only increase in value by calling
@@ -36,6 +37,12 @@ Counter.prototype.increment = function increment(pairs) {
 Counter.prototype.add = function add(value, pairs) {
     mod_assert.optionalObject(pairs, 'pairs');
     mod_assert.number(value, 'value');
+
+    var name = this.name;
+    lib_provider['counter-add'].fire(function () {
+        return ([name, value, pairs]);
+    });
+
     if (value < 0) {
         throw new VError('adding negative values to counters ' +
                 'is not allowed:', value);
diff --git a/lib/gauge.js b/lib/gauge.js
index 1eedef2..321ac7e 100644
--- a/lib/gauge.js
+++ b/lib/gauge.js
@@ -9,6 +9,7 @@ var mod_assert = require('assert-plus');
 var VError = require('verror').VError;
 
 var lib_common = require('./common');
+var lib_provider = require('./provider');
 
 /*
  * A Gauge is a type of collector that can increase and decrease in value.
@@ -28,6 +29,11 @@ Gauge.prototype.add = function add(value, pairs) {
     mod_assert.optionalObject(pairs, 'pairs');
     mod_assert.number(value, 'value');
 
+    var name = this.name;
+    lib_provider['gauge-add'].fire(function () {
+        return ([name, value, pairs]);
+    });
+
     var metric = this.labels(pairs);
     metric.add(value);
 };
@@ -39,6 +45,11 @@ Gauge.prototype.set = function set(value, pairs) {
     mod_assert.optionalObject(pairs, 'pairs');
     mod_assert.number(value, 'value');
 
+    var name = this.name;
+    lib_provider['gauge-set'].fire(function () {
+        return ([name, value, pairs]);
+    });
+
     var metric = this.labels(pairs);
     metric.set(value);
 };
diff --git a/lib/histogram.js b/lib/histogram.js
index 7fa98b9..988b709 100644
--- a/lib/histogram.js
+++ b/lib/histogram.js
@@ -15,6 +15,7 @@ var lib_utils = require('./utils');
 var lib_counter = require('./counter');
 var lib_gauge = require('./gauge');
 var lib_common = require('./common');
+var lib_provider = require('./provider');
 
 /*
  * A Histogram is a type of collector that represents a series of Counters. Each
@@ -47,6 +48,12 @@ function Histogram(options) {
 Histogram.prototype.observe = function observe(value, pairs) {
     mod_assert.number(value, 'value');
     mod_assert.optionalObject(pairs, 'pairs');
+
+    var name = this.name;
+    lib_provider['histogram-observe'].fire(function () {
+        return ([name, value, pairs]);
+    });
+
     if (value < 0) {
         throw new VError('observe must be called with a value >= 0: %d', value);
     }
diff --git a/lib/metric.js b/lib/metric.js
index 9560e06..bd11950 100644
--- a/lib/metric.js
+++ b/lib/metric.js
@@ -8,6 +8,8 @@
 
 var mod_assert = require('assert-plus');
 
+var lib_provider = require('./provider');
+
 /*
  * Basic building block for counters and gauges. This object is not intended to
  * be used directly by users.
@@ -34,6 +36,11 @@ function Metric(options) {
 Metric.prototype.add = function add(num) {
     mod_assert.number(num, 'num');
 
+    var self = this;
+    lib_provider['metric-add'].fire(function () {
+        return ([num, self.labels]);
+    });
+
     this.value += num;
     this.timestamp = new Date().toISOString();
 };
@@ -41,6 +48,11 @@ Metric.prototype.add = function add(num) {
 Metric.prototype.set = function set(num) {
     mod_assert.number(num, 'num');
 
+    var self = this;
+    lib_provider['metric-set'].fire(function () {
+        return ([num, self.labels]);
+    });
+
     this.value = num;
     this.timestamp = new Date().toISOString();
 };
diff --git a/lib/metric_vector.js b/lib/metric_vector.js
index 4ba7010..a60f974 100644
--- a/lib/metric_vector.js
+++ b/lib/metric_vector.js
@@ -13,6 +13,7 @@ var mod_jsprim = require('jsprim');
 var VError = require('verror').VError;
 
 var lib_metric = require('./metric');
+var lib_provider = require('./provider');
 var lib_utils = require('./utils');
 
 /*
@@ -97,6 +98,12 @@ MetricVector.prototype.getWithLabels = function getWithLabels(labels) {
  */
 MetricVector.prototype.createWithLabels = function createWithLabels(labels) {
     mod_assert.object(labels, 'labels');
+
+    var name = this.name;
+    lib_provider['create-metric'].fire(function () {
+        return ([name, labels]);
+    });
+
     var copy = lib_utils.shallowClone(labels);
     var lhash = lib_utils.hashObj(copy);
 
diff --git a/lib/provider.js b/lib/provider.js
new file mode 100644
index 0000000..64d1756
--- /dev/null
+++ b/lib/provider.js
@@ -0,0 +1,47 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * provider.js: DTrace probe definitions.
+ */
+
+var mod_dtrace_provider = require('dtrace-provider');
+
+var PROBES = {
+    /* counter, gauge, and histogram operations */
+    /* [metric_name, value, labels] */
+    'counter-add': ['char *', 'int', 'json'],
+    'gauge-add': ['char *', 'int', 'json'],
+    'gauge-set': ['char *', 'int', 'json'],
+    'histogram-observe': ['char *', 'int', 'json'],
+
+    /* metric-vector operations */
+    /* [metric_name, labels] */
+    'create-metric': ['char *', 'json'],
+
+    /* metric operations */
+    /* [value, labels] */
+    'metric-add': ['int', 'json'],
+    'metric-set': ['int', 'json']
+};
+var PROVIDER;
+
+module.exports = function exportStaticProvider() {
+    if (!PROVIDER) {
+        PROVIDER = mod_dtrace_provider.createDTraceProvider('artedi');
+
+        Object.keys(PROBES).forEach(function (p) {
+            var args = PROBES[p].splice(0);
+            args.unshift(p);
+
+            PROVIDER.addProbe.apply(PROVIDER, args);
+        });
+        PROVIDER.enable();
+    }
+    return (PROVIDER);
+}();
diff --git a/package.json b/package.json
index 1411eda..af633b8 100644
--- a/package.json
+++ b/package.json
@@ -1,10 +1,11 @@
 {
   "name": "artedi",
-  "version": "1.2.1",
+  "version": "1.3.0",
   "description": "a metric client library",
   "main": "lib/collector.js",
   "dependencies": {
     "assert-plus": "1.0.0",
+    "dtrace-provider": "0.8.6",
     "jsprim": "1.4.0",
     "vasync": "1.6.4",
     "verror": "1.10.0"
-- 
2.21.0

