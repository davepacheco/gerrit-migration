From 7ef54743494913d43ab20c584f23bd5385aa06dd Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Fri, 11 Oct 2019 11:43:18 -0700
Subject: [PATCH] =?UTF-8?q?TRITON-1903=20allow=20bhyve=20resize=20Reviewed?=
 =?UTF-8?q?=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>=20A?=
 =?UTF-8?q?pproved=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.c?=
 =?UTF-8?q?om>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 docs/index.md            |   9 +-
 lib/machines.js          |  20 ++---
 package.json             |   2 +-
 test/common.js           |  47 ++++++++++-
 test/machines.70.test.js | 178 ++++++++++++++++++++++++++++++++-------
 5 files changed, 211 insertions(+), 45 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 08c9e41..ff4e2c6 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -841,6 +841,9 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.8.3
+- Allow instance resize on bhyve instances.
+
 ## 9.8.2
 - Fixed instance resize from failing during package trait check.
 
@@ -5284,9 +5287,9 @@ or
 
 Resize an instance to a new [package](#packages) (a.k.a. instance type).
 
-Resizing is only supported for containers (instances which are not hardware
-virtual machines -- they have `brand=kvm` or `brand=bhyve`). Hardware virtual
-machines cannot be resized.
+Note that KVM instances (with `brand=kvm`) cannot be resized, and bhyve
+instances (`brand=bhyve`) only allow resizing to a package that uses
+flexible_disk.
 
 Resizing is not guaranteed to work, especially when resizing upwards in
 resources. It is best-effort, and may fail. Resizing downwards will usually
diff --git a/lib/machines.js b/lib/machines.js
index 3acba6b..5b74838 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -2115,7 +2115,7 @@ function resize(req, res, next) {
 
     // KVM resize is not supported at the moment. VMAPI will move to return this
     // error synchronously instead
-    if (req.machine.type === 'virtualmachine') {
+    if (req.machine.brand === 'kvm') {
         return next(new InvalidArgumentError('resize is not supported for ' +
             'KVM virtualmachines'));
     }
@@ -2155,6 +2155,15 @@ function resize(req, res, next) {
             'Resizing to a package with differing traits not supported'));
     }
 
+    if (req.machine.brand === 'bhyve') {
+        // Don't allow resize to a package that does not use flexible disk.
+        if (!req.pkg.flexible_disk) {
+            return next(new InvalidArgumentError(
+                'Resizing to a package without flexible disk space is not ' +
+                'supported'));
+        }
+    }
+
     var callback = updateCallback(req, res, next),
         params = {
             uuid: req.params.machine,
@@ -2162,15 +2171,6 @@ function resize(req, res, next) {
             origin: req.params.origin || 'cloudapi',
             creator_uuid: req.account.uuid,
             payload: {
-                'package': req.pkg.uuid,
-                max_physical_memory: pkgRam,
-                ram: pkgRam,
-                max_swap: req.pkg.max_swap,
-                quota: Math.ceil(Number(req.pkg.quota) / 1024),
-                cpu_cap: req.pkg.cpu_cap,
-                max_lwps: req.pkg.max_lwps,
-                zfs_io_priority: req.pkg.zfs_io_priority,
-                vcpus: req.pkg.vcpus,
                 billing_id: req.pkg.uuid
             }
         };
diff --git a/package.json b/package.json
index 872ec45..32cead9 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "Triton CloudAPI",
-    "version": "9.8.2",
+    "version": "9.8.3",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/test/common.js b/test/common.js
index ddb50d3..f316b4f 100644
--- a/test/common.js
+++ b/test/common.js
@@ -21,6 +21,7 @@ var restify = require('restify');
 var libuuid = require('libuuid');
 var util = require('util');
 var fs = require('fs');
+var semver = require('semver');
 var vasync = require('vasync');
 
 var UFDS = require('ufds');
@@ -62,7 +63,17 @@ var KVM_128_PACKAGE = Object.assign({}, SDC_128_PACKAGE, {
 var BHYVE_128_PACKAGE = Object.assign({}, SDC_128_PACKAGE, {
     uuid: 'e83d57d2-b7e5-11e8-84bb-7be61e455e35',
     brand: 'bhyve',
-    name: 'sdc_128_bhyve'
+    name: 'sdc_128_bhyve',
+    max_physical_memory: 256,
+    max_swap: 512
+});
+
+var BHYVE_128_FLEX_PACKAGE = Object.assign({}, BHYVE_128_PACKAGE, {
+    uuid: '8b3b6796-e5b1-47ce-bb49-ac9dcba7c6eb',
+    brand: 'bhyve',
+    name: 'sdc_128_flex_bhyve',
+    quota: 50 * 1024, // 50 GiB
+    flexible_disk: true
 });
 
 var PASSWD = 'secret123';
@@ -1254,6 +1265,38 @@ function makeImageProvisionable(client, imageName, callback) {
     });
 }
 
+/*
+ * Compare the given `ver` with the cloudapi version in the server header.
+ *
+ * Callback fires as (err, cmpResult), where cmpResult is as below:
+ *    1  if `ver` >  cloudapiVer
+ *    0  if `ver` == cloudapiVer
+ *   -1  if `ver` <  cloudapiVer
+ */
+function cloudapiServerHeaderVersionCmp(ver, serverHeader) {
+    var match = serverHeader.match(/^cloudapi\/(.*)$/i);
+    if (!match) {
+        throw new Error('cloudapiVersionCmp: unexpected server header ' +
+            'format: ' + serverHeader);
+    }
+
+    return semver.compare(match[1], ver);
+}
+
+/*
+ * Returns true if the CloudAPI server version is greater than or equal to the
+ * given version, else returns false.
+ */
+function cloudapiServerHeaderGtrOrEq(serverHeader, ver) {
+    try {
+        return cloudapiServerHeaderVersionCmp(ver, serverHeader) >= 0;
+    } catch (ex) {
+        console.log('Error determining cloudapi server version: ' + ex);
+        return false;
+    }
+}
+
+
 // --- Library
 
 
@@ -1267,6 +1310,7 @@ module.exports = {
     checkNotAuthorized: checkNotAuthorized,
     checkNotFound: checkNotFound,
     checkInvalidArgument: checkInvalidArgument,
+    cloudapiServerHeaderGtrOrEq: cloudapiServerHeaderGtrOrEq,
 
     waitForMahiCache: waitForMahiCache,
     withTemporaryUser: withTemporaryUser,
@@ -1293,6 +1337,7 @@ module.exports = {
     sdc_128_package: SDC_128_PACKAGE,
     kvm_128_package: KVM_128_PACKAGE,
     bhyve_128_package: BHYVE_128_PACKAGE,
+    bhyve_128_flex_package: BHYVE_128_FLEX_PACKAGE,
 
     getCfg: function () {
         return CONFIG;
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index ac02576..ebf7dd5 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -9,9 +9,9 @@
  */
 
 
+var jsprim = require('jsprim');
 var util = require('util');
 var test = require('@smaller/tap').test;
-var vasync = require('vasync');
 var common = require('./common');
 var uuid = common.uuid;
 var addPackage = common.addPackage;
@@ -199,7 +199,7 @@ test('Delete tests', function (t) {
 });
 
 
-test('KVM image', function (t) {
+test('Find HVM images', function (t) {
     // Make sure we're not getting an lx-branded image instead
     // of a KVM/bhyve one. Note that starting with images built
     // after 20180819 the same images can be used for both of them;
@@ -219,32 +219,35 @@ test('KVM image', function (t) {
         }
 
         var hvmImages = body.filter(function getHvm(img) {
-            return img.type === 'zvol';
+            // Note that before CloudAPI 8, img.type was 'virtualmachine'.
+            return img.type === 'zvol' || img.type === 'virtualmachine';
         });
 
         KVM_IMAGE_UUID = hvmImages.filter(function getKvm(img) {
             var reqr = img.requirements;
             return !reqr || !reqr.brand || reqr.brand === 'kvm';
+        }).map(function getKvmImgId(img) {
+            return img.id;
         }).pop();
+        t.ok(KVM_IMAGE_UUID, 'Found KVM image uuid: ' + KVM_IMAGE_UUID);
 
         BHYVE_IMAGE_UUID = hvmImages.filter(function getBhyve(img) {
             var reqr = img.requirements;
             return !reqr || !reqr.brand || reqr.brand === 'bhyve';
+        }).map(function getBhyveImgId(img) {
+            return img.id;
         }).pop();
+        t.ok(BHYVE_IMAGE_UUID, 'Found bhyve image uuid: ' + BHYVE_IMAGE_UUID);
 
         t.end();
     });
 });
 
-test('Create KVM & bhyve packages', function (t) {
+test('Create KVM package', function (t) {
     if (KVM_IMAGE_UUID) {
         addPackage(CLIENT, common.kvm_128_package, function addPkgCb(err) {
             t.ifError(err, 'Add package error');
-            addPackage(CLIENT, common.bhyve_128_package,
-                function addBhyvePkgCb(bhyveErr) {
-                t.ifError(bhyveErr, 'Add package error');
-                t.end();
-            });
+            t.end();
         });
     } else {
         t.end();
@@ -301,6 +304,27 @@ test('Wait For KVM machine Running', function (t) {
 });
 
 
+test('Ensure we cannot resize a KVM machine', function (t) {
+    if (!KVM_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    var obj = {
+        package: common.kvm_128_package.uuid
+    };
+
+    CLIENT.post('/my/machines/' + KVM_MACHINE_UUID + '?action=resize',
+            obj, function (err, req, res, body) {
+        t.ok(err, 'expect POST /my/machines?resize error');
+        t.equal(res.statusCode, 409, 'should get a 409 statusCode');
+        t.equal(err.message, 'resize is not supported for KVM virtualmachines',
+            'res.message should be correct');
+        t.end();
+    });
+});
+
+
 test('Delete KVM tests', function (t) {
     if (KVM_MACHINE_UUID) {
         var deleteTest = require('./machines/delete');
@@ -312,6 +336,35 @@ test('Delete KVM tests', function (t) {
     }
 });
 
+test('Delete KVM package', function (t) {
+    if (!KVM_IMAGE_UUID) {
+        t.end();
+        return;
+    }
+
+    common.deletePackage(CLIENT, common.kvm_128_package, function delCb(err) {
+        t.ifError(err, 'err deleting package');
+        t.end();
+    });
+});
+
+
+// Bhyve tests
+
+test('Create bhyve packages', function (t) {
+    if (BHYVE_IMAGE_UUID) {
+        addPackage(CLIENT, common.bhyve_128_package, function addPkg1(err) {
+            t.ifError(err, 'Add bhyve package error');
+            addPackage(CLIENT, common.bhyve_128_flex_package,
+                    function addPkg2(err2) {
+                t.ifError(err2, 'Add bhyve flexible disk package error');
+                t.end();
+            });
+        });
+    } else {
+        t.end();
+    }
+});
 
 test('Create bhyve machine', function (t) {
     if (!BHYVE_IMAGE_UUID) {
@@ -392,6 +445,75 @@ test('Bhyve machine snapshots', function (t) {
 });
 
 
+test('Resize bhyve vm fails when not using flexible_disk', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    var obj = {
+        package: common.bhyve_128_package.uuid
+    };
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '?action=resize',
+            obj, function (err, req, res, body) {
+        t.ok(err, 'expect POST /my/machines?resize error');
+        t.equal(res.statusCode, 409, 'should get a 409 statusCode');
+        t.equal(err.restCode, 'InvalidArgument');
+
+        var serverHeader = res && res.headers && res.headers['server'];
+        var supportsBhyveResize = common.cloudapiServerHeaderGtrOrEq(
+            serverHeader, '9.8.3');
+
+        if (supportsBhyveResize) {
+            t.equal(err.message, 'Resizing to a package without flexible ' +
+                'disk space is not supported');
+        } else {
+            t.equal(err.message,
+                'resize is not supported for KVM virtualmachines');
+        }
+
+        t.end();
+    });
+});
+
+
+test('Resize bhyve vm', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    var obj = {
+        package: common.bhyve_128_flex_package.uuid
+    };
+
+    // This should succeed on modern versions of CloudAPI, but will fail on
+    // older versions when bhyve resize was not supported.
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '?action=resize',
+            obj,
+            function onBhyveResizeCb(err, req, res, body) {
+
+        var serverHeader = res && res.headers && res.headers['server'];
+        var supportsBhyveResize = common.cloudapiServerHeaderGtrOrEq(
+            serverHeader, '9.8.3');
+
+        if (supportsBhyveResize) {
+            t.ifError(err, 'Resize bhyve instance');
+            t.equal(res.statusCode, 201);
+        } else {
+            t.ok(err);
+            t.equal(res.statusCode, 409);
+            t.equal(err.restCode, 'InvalidArgument');
+            t.equal(err.message,
+                'resize is not supported for KVM virtualmachines');
+        }
+
+        t.end();
+    });
+});
+
+
 test('Delete bhyve test vm', function (t) {
     if (BHYVE_MACHINE_UUID) {
         var deleteTest = require('./machines/delete');
@@ -403,30 +525,26 @@ test('Delete bhyve test vm', function (t) {
     }
 });
 
-
-test('teardown', function (t) {
-    var delPkgs = [];
-
-    if (KVM_IMAGE_UUID) {
-        delPkgs.push(common.kvm_128_package);
-    }
-
-    if (BHYVE_IMAGE_UUID) {
-        delPkgs.push(common.bhyve_128_package);
+test('Delete bhyve test packages', function (t) {
+    if (!KVM_IMAGE_UUID) {
+        t.end();
+        return;
     }
 
-    vasync.forEachPipeline({
-        inputs: delPkgs,
-        func: function deletePkg(pkg, next) {
-            common.deletePackage(CLIENT, pkg, function delCb(err) {
-                t.ifError(err, 'err deleting package');
-                next();
-            });
-        }
-    }, function vasyncCb() {
-        common.teardown(CLIENTS, SERVER, function teardownClients(err) {
-            t.ifError(err, 'teardown success');
+    common.deletePackage(CLIENT, common.bhyve_128_package, function delCb(err) {
+        t.ifError(err, 'err deleting bhyve test package');
+        common.deletePackage(CLIENT, common.bhyve_128_flex_package,
+                function delCb2(err2) {
+            t.ifError(err2, 'err deleting bhyve flex test package');
             t.end();
         });
     });
 });
+
+
+test('teardown', function (t) {
+    common.teardown(CLIENTS, SERVER, function teardownClients(err) {
+        t.ifError(err, 'teardown success');
+        t.end();
+    });
+});
-- 
2.17.2 (Apple Git-113)

