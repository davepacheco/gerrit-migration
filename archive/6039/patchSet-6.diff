From b8dc22639040ec2b9ce46afc18722d5eed301090 Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Tue, 2 Apr 2019 09:46:52 -0400
Subject: [PATCH] TRITON-1277 triton-origin-images could probably just use
 engbuild TRITON-1159 add new triton-origin-minimal-64-18.4.0 image

---
 .gitignore                                    |   2 +
 .gitmodules                                   |   3 +
 CHANGES.md                                    |   6 +
 Makefile                                      |  95 ++++----
 Makefile.origin.defs                          |  34 +++
 README.md                                     | 204 ++++------------
 deps/eng                                      |   1 +
 empty.tar.gz                                  | Bin 0 -> 55 bytes
 images.json                                   |  36 ---
 .../triton-origin-multiarch-15.4.1/Makefile   |  22 ++
 .../triton-origin-multiarch-18.1.0/Makefile   |  22 ++
 images/triton-origin-x86_64-18.4.0/Makefile   |  24 ++
 package.json                                  |   7 +-
 tools/build-image.sh                          | 227 ------------------
 tools/build-images.sh                         | 100 --------
 tools/publish-images.sh                       | 144 -----------
 16 files changed, 212 insertions(+), 715 deletions(-)
 create mode 100644 .gitmodules
 create mode 100644 Makefile.origin.defs
 create mode 160000 deps/eng
 create mode 100644 empty.tar.gz
 delete mode 100644 images.json
 create mode 100644 images/triton-origin-multiarch-15.4.1/Makefile
 create mode 100644 images/triton-origin-multiarch-18.1.0/Makefile
 create mode 100644 images/triton-origin-x86_64-18.4.0/Makefile
 delete mode 100755 tools/build-image.sh
 delete mode 100755 tools/build-images.sh
 delete mode 100755 tools/publish-images.sh

diff --git a/.gitignore b/.gitignore
index 56d39c9..7b18ff8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,5 @@
 /tmp
 /build
 /npm-debug.log
+/make_stamps
+/bits
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..6cbac63
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/CHANGES.md b/CHANGES.md
index 3cac770..9404530 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,12 @@
 
 (nothing yet)
 
+## 1.1.0
+
+- Switched build process over to engbld
+- Images now use the default branch-timestamp-commit "version" string
+- New image: triton-origin-x86_64-18.4.0
+
 ## 1.0.1
 
 - Bump the included pkgsrc curl from "curl-7.47.1" to "curl-7.51.0".
diff --git a/Makefile b/Makefile
index 0e1f74c..1e90153 100644
--- a/Makefile
+++ b/Makefile
@@ -1,71 +1,36 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
-# Copyright (c) 2017, Joyent, Inc.
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
 #
 # Makefile for triton-origin-image
 #
 
-NPM = npm
-JSON = ./node_modules/.bin/json
 
-# Gather build info (based on
-# https://github.com/joyent/eng/blob/master/tools/mk/Makefile.defs#L34-L48)
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-GITHASH := $(shell git log -1 --pretty='%H')
+NAME=triton-origin-image
+ENGBLD_REQUIRE	:= $(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 
+CLEAN_FILES += ./build
+DIST_CLEAN_FILES += ./node_modules/ ./build ./bits
+NPM = npm
+JSON = ./node_modules/.bin/json
 
 #
 # Targets
 #
 
-.PHONY: all
-all: build/buildinfo.json build/image-0-stamp
-
 $(JSON):
 	$(NPM) install
 
-build/buildinfo.json: | $(JSON)
-	mkdir -p build/
-	echo '{}' \
-		| $(JSON) -e "this.branch='$(BRANCH)'" \
-			-e "this.timestamp='$(TIMESTAMP)'" \
-			-e "this.git='$(GITHASH)'" \
-		> $@
-
-.PHONY: buildinfo
-buildinfo: build/buildinfo.json
-
-.PHONY: images
-images: build/image-0-stamp
-
-# Build all images spec'd in images.json and upload to Manta builds area,
-# e.g. /Joyent_Dev/public/builds/triton-origin-image/...
-build/image-0-stamp: build/buildinfo.json images.json
-	./tools/build-images.sh -b build/buildinfo.json -i images.json
-	touch $@
-
-# Publish the built images (identified via "buildinfo.json") to
-# updates.joyent.com.
-publish: build/buildinfo.json
-	./tools/publish-images.sh -b build/buildinfo.json
-
-
-.PHONY: clean
-clean:
-	rm -rf build
-
-.PHONY: distclean
-distclean: clean
-	rm -rf node_modules
-
 .PHONY: check
 check:: check-version
-	@echo "check ok"
 
 # Ensure CHANGES.md and package.json have the same version.
 .PHONY: check-version
@@ -86,3 +51,31 @@ cutarelease: check-version
 	    date=$(shell date -u "+%Y-%m-%d") && \
 	    git tag -a "v$$ver" -m "version $$ver ($$date)" && \
 	    git push --tags origin
+
+#
+# Convenience wrappers to run targets for each image without invoking cd yourself
+#
+triton-origin-multiarch-15.4.1-%:
+	@echo '$*'
+	cd images/triton-origin-multiarch-15.4.1 && $(MAKE) $*
+
+triton-origin-multiarch-18.1.0-%:
+	@echo '$*'
+	cd images/triton-origin-multiarch-18.1.0 && $(MAKE) $*
+
+triton-origin-x86_64-18.4.0-%:
+	@echo '$*'
+	cd images/triton-origin-x86_64-18.4.0 && $(MAKE) $*
+
+
+#
+# Convenience wrapper to run the same target for each image
+#
+all-%:
+	@echo '$*'
+	cd images/triton-origin-multiarch-15.4.1 && $(MAKE) $*
+	cd images/triton-origin-multiarch-18.1.0 && $(MAKE) $*
+	cd images/triton-origin-x86_64-18.4.0 && $(MAKE) $*
+
+
+include ./deps/eng/tools/mk/Makefile.targ
diff --git a/Makefile.origin.defs b/Makefile.origin.defs
new file mode 100644
index 0000000..2c7a2c7
--- /dev/null
+++ b/Makefile.origin.defs
@@ -0,0 +1,34 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+
+# Definitions (or overrides) for variables defined in the "eng" Makefiles
+ENGBLD_REQUIRE := $(shell git submodule update --init $(TOP)/deps/eng)
+MAKE_STAMPS_DIR:=$(TOP)/make_stamps
+GITHASH := $(shell git log -1 --pretty='%H')
+ENGBLD_USE_BUILDIMAGE:=true
+
+# not actually "building" anything
+export ENGBLD_SKIP_VALIDATE_BUILDENV:=true
+
+# BUILDIMAGE_PKG is required by engbld, but there is nothing to "build" so we
+# pass along this empty tarball
+BUILDIMAGE_PKG=$(TOP)/empty.tar.gz
+
+BUILDIMAGE_MF           = \
+    {"name": "$(BUILDIMAGE_NAME)",\
+    "description": "$(BUILDIMAGE_DESC)",\
+    "version": "$(BUILDIMAGE_VERSION)",\
+    "homepage": "https://github.com/joyent/triton-origin-image",\
+    "tags": {\
+      "branch": "$(BRANCH)",\
+      "timestamp": "$(TIMESTAMP)",\
+      "git": "$(GITHASH)"\
+    }\
+    }
diff --git a/README.md b/README.md
index a486f9d..a8a410c 100644
--- a/README.md
+++ b/README.md
@@ -20,8 +20,7 @@ origin images for all Triton and Manta VM components:
 
 - This repo builds one or more "triton-origin-$pkgsrcArch-$originVer@$version"
   images, e.g. "triton-origin-multiarch-18.1.0@1.0.1", and publishes them to
-  updates.joyent.com and images.joyent.com. (See the "Building triton-origin
-  images" section below.)
+  updates.joyent.com. (See the "Building triton-origin images" section below.)
 - After sanity testing, those images are "released" for use by Triton/Manta
   components. (See the "Releasing triton-origin images" section below.)
 - A Triton/Manta core component, say VMAPI, uses one of these images as the
@@ -48,23 +47,15 @@ to using a triton-origin image.
         04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f  triton-origin-multiarch-15.4.1  1.0.1    I      smartos  2017-05-09T22:06:48Z
         b6ea7cb4-6b90-48c0-99e7-1d34c2895248  triton-origin-multiarch-18.1.0  1.0.1    I      smartos  2018-05-21T18:28:19Z
 
-    and choose the flavour you want. Currently there is only the "multiarch"
-    flavour, so that is easy. The "18.1.0" refers to the
+    and choose the flavour you want.  The "18.1.0" refers to the
     "minimal-$arch-$version" origin image of the "triton-origin-\*" image.
     Generally you should favour later versions -- "18.1.0" in this example.
 
-2. Update `"image_uuid": "<uuid from step 1>"` for your component in
-   ["targets.json.in" in
-   MG](https://github.com/joyent/mountain-gorilla/blob/master/targets.json.in).
-   This tells the MG-based build to use that origin for image creation.
-
-   For example for VMAPI, we'd update
-   [here](https://github.com/joyent/mountain-gorilla/blob/53f3f76e4dda86e48dbfd07c61faee9814626b2a/targets.json.in#L603-L604).
+2. Update `BASE_IMAGE_UUID` in your component's `Makefile`.
 
 3. If you are moving from a *non*-triton-origin image, then you can remove
    the set of pkgsrc packages that are included in triton-origin images
-   from the "pkgsrc" field in "targets.json.in". The included triton-origin
-   packages are:
+   Likely packages include:
 
         coreutils
         curl
@@ -91,7 +82,7 @@ to using a triton-origin image.
     compatibility with triton-origin images" table and example below.
 
     For example, say you are using "triton-origin-multiarch-18.1.0@1.0.1".
-    That is [based on](./images.json#L5-L9) "minimal-multiarch@18.1.0".
+    That is based on "minimal-multiarch@18.1.0".
     From <https://download.joyent.com/pub/build/sdcnode/README.html> we see
     that there are sdcnode builds for "minimal-multiarch@18.1.0":
     1ad363ec-3b83-11e8-8521-2f68a4a34d5d". Therefore we want:
@@ -107,12 +98,13 @@ to using a triton-origin image.
 ### sdcnode compatibility with triton-origin images
 
 Ultimately the authority for which sdcnode builds and triton-origin images are
-available is in the [triton-origin images.json](./images.json) and [sdcnode
+available is defined in this repo and [sdcnode
 nodeconfigs.json](https://github.com/joyent/sdcnode/blob/master/nodeconfigs.json)
 files. We will try to keep this table up to date:
 
 | triton-origin image            | based on                     | sdcnode compatible build         | `NODE_PREBUILT_VERSION`              |
 | ------------------------------ | ---------------------------- | -------------------------------- | ------------------------------------ |
+| triton-origin-x86\_64-18.4.0   | minimal-64-lts@18.4.0        | minimal-64-lts@18.4.0            | c2c31b00-1d60-11e9-9a77-ff9f06554b0f |
 | triton-origin-multiarch-18.1.0 | minimal-multiarch@18.1.0     | minimal-multiarch@18.1.0         | 1ad363ec-3b83-11e8-8521-2f68a4a34d5d |
 | triton-origin-multiarch-15.4.1 | minimal-multiarch-lts@15.4.1 | sdc-minimal-multiarch-lts@15.4.1 | 18b094b0-eb01-11e5-80c1-175dac7ddf02 |
 | -                              | -                            | sdc-base@14.2.0                  | de411e86-548d-11e4-a4b7-3bb60478632a |
@@ -134,6 +126,7 @@ files. We will try to keep this table up to date:
 
 | triton-origin image            | Jenkins agent labels                        |
 | ------------------------------ | ------------------------------------------- |
+| triton-origin-x86\_64-18.4.0   | `image_ver:18.4.0 && pkgsrc_arch:x86_64`    |
 | triton-origin-multiarch-18.1.0 | `image_ver:18.1.0 && pkgsrc_arch:multiarch` |
 | triton-origin-multiarch-15.4.1 | `image_ver:15.4.1 && pkgsrc_arch:multiarch` |
 
@@ -143,17 +136,17 @@ for details.
 
 ## Development of triton-origin images
 
-The triton-origin images to be built are defined in
-[images.json](./images.json). This set should remain small to avoid having a
+The triton-origin images to be built are defined in Makefiles that reside in the
+`images` directory.  They use [engbld](https://github.com/joyent/eng/) just like
+the components themselves do. This set should remain small to avoid having a
 large number of origin images in play that can increase the size of the Triton
 headnode build on the USB key; and to avoid a large testing/maintenance surface
 area.
 
-The active set of triton-origin images is defined by which of them is being
-used by any current Triton/Manta component images. Currently that is the
-set of `image_uuid` UUID values in [MG's
-targets.json.in](https://github.com/joyent/mountain-gorilla/blob/master/targets.json.in),
-e.g.: <https://github.com/joyent/mountain-gorilla/blob/37a58ef3c5/targets.json.in#L162-L163>.
+The active set of triton-origin images is defined by which of them is being used
+by any current Triton/Manta component images. That is the `BASE_IMAGE_UUID` of
+all active components.
+
 Those UUIDs refer to origin images published to <https://updates.joyent.com>.
 
 
@@ -162,7 +155,7 @@ Those UUIDs refer to origin images published to <https://updates.joyent.com>.
 An intended invariant of an image repository (such as updates.joyent.com) is
 that the full origin chain of images for any image in that repository are also
 contained within the same repository (and in the same channel).  That means the
-image that an triton-origin image is "based on" (the origin of the origin) must
+image that a triton-origin image is "based on" (the origin of the origin) must
 be imported into updates.joyent.com from images.joyent.com.  The would typically
 by a base minimal image.
 
@@ -180,116 +173,47 @@ support the `-S` flag to `import`.
 5. Before the image can be used in any released images, it must also be added to
    the remaining channels (`updates-imgadm channels`).
 
+
 ### Naming and versioning
 
 Triton-origin images are named and versioned as follows:
 
     name = "triton-origin-$pkgsrcArch-$originVer"
-    version = "<version string from ./package.json>"
+    version = "branch-timestamp-commit"
 
 where `$pkgsrcArch` is one of "multiarch" (the typical arch, per discussion in
 RFD 46), "i386", or "x86\_64"; and "$originVer" is the version of the origin
-image on which the triton-origin image is based.
-
-For example, a triton-origin image based on "minimal-multiarch-lts@15.4.1" will
-be "triton-origin-multiarch-15.4.1@1.2.3" (assuming "1.2.3" is the package.json
-version). See the "Naming and versioning" section in RFD 46 for some
-justification.
-
-
-### Building triton-origin images
+image on which the triton-origin image is based.  The version stamp is the same
+style currently used by Triton/Manta components.
 
-For Joyent Engineering, the "triton-origin-image" Jenkins job handles building
-triton-origin images for pushes to "master". However, you can build them
-directly as follows.
+NOTE: Older origin-images used an `x.y.z` style version string.
 
-*First*, to build all the images and export them to Manta
-(at "/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/"):
+See the "Naming and versioning" section in RFD 46 for some justification, and
+RFD 165 for later revisions.
 
-    make clean all
-
-This will use **your current `triton` CLI profile and `MANTA_*` settings**.
-There is an assumption that this Triton DataCenter has an associated Manta
-(which is a requirement for
-[ExportImage](https://apidocs.joyent.com/cloudapi/#ExportImage)) *and*,
-currently, that **this is the production Manta in us-east
-<https://us-east.manta.joyent.com>**. The latter is because of a limitation in
-CloudAPI that doesn't provide a programmatic way to get the Manta URL with which
-the DC's IMGAPI is associated, if any.
-
-(Note: The upload path in Manta roughly follows the pattern used for building
-Triton and Manta components. See <https://github.com/joyent/mountain-gorilla>
-and, for Joyent Engineering builds see
-`/Joyent_Dev/public/builds/triton-origin-image` in Joyent's us-east Manta.)
 
+### Building triton-origin images
 
-*Second*, publish the built images to <https://updates.joyent.com>:
+Official builds are done by the "triton-origin-image" Jenkins jobs.
 
-    make publish
+You can build them on your workstation using the standard engbld targets (such
+as `buildimage` or `bits-upload`).  Because there are multiple origin images
+defined, there are a few different ways to invoke the targets.  Examples:
 
-This will use **your current `UPDATES_IMGADM_*` settings**, which requires you
-to have publish credentials to updates.jo. If this is the "master" branch, then
-the images will be published to the "dev" channel of updates.jo. Otherwise, they
-will be published to the "experimental" channel of updates.jo.
+ * `make triton-origin-x86_64-18.4.0-buildimage` (Convenience wrapper.)
+ * `cd images/triton-origin-x86_64-18.4.0 && make buildimage`
+ * `make all-buildimage` (To build all iamges)
 
 
 ### Testing a new triton-origin image
 
-[Currently](https://github.com/joyent/mountain-gorilla/blob/53f3f76e4dda86e48dbfd07c61faee9814626b2a/tools/prep_dataset_in_jpc.sh#L45),
-core component image creation is done in us-east-3. This means that to build
-a core component with a new unreleased triton-origin image requires manually
-importing that image to us-east-3 and making it available to, at least,
-the `Joyent_Dev` account that is currently used for CI builds.
-
-For example:
-
-    ssh us-east-3
-
-    theImage=$(updates-imgadm -C dev list \
-        name=triton-origin-multiarch-18.1.0 --latest -H -o uuid)
-    joyentDev=$(sdc-useradm get Joyent_Dev | json uuid)
-
-    sdc-imgadm import $theImage -S https://updates.joyent.com
-    sdc-imgadm add-acl $theImage $joyentDev
+You can use whatever process you would normally use to test regular components,
+this will most likely look something like:
 
-Once you have done this, you should be able to get a build -- of, say,
-"amonredis" -- as follows (instructions are for Joyent developers with access
-to our CI system):
-
-1. Create a feature branch (e.g. "FOO-123") of [MG](https://github.com/joyent/mountain-gorilla)
-   changing amonredis's `image_uuid` to your new image:
-
-        --- a/targets.json.in
-        +++ b/targets.json.in
-        @@ -298,8 +298,8 @@ cat <<EOF
-             "image_name": "amonredis",
-             "image_description": "SDC Amon Redis",
-             "image_version": "1.0.0",
-        -    "// image_uuid": "triton-origin-multiarch-15.4.1@1.0.1",
-        -    "image_uuid": "04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f",
-        +    "// image_uuid": "triton-origin-multiarch-18.1.0@1.0.1",
-        +    "image_uuid": "$theImage",
-             "pkgsrc": [],
-             "repos": [
-               {"url": "git@github.com:joyent/sdc-amonredis.git"}
-
-2. Push that feature branch to GitHub.
-
-3. Do a [build of "amonredis"](https://jenkins.joyent.us/job/amonredis/)
-   setting `TRY_BRANCH` to your feature branch name, e.g. `TRY_BRANCH=FOO-123`.
-
-When that build completes, there will be a new image build in the "experimental"
-channel of updates.joyent.com, e.g.:
-
-    updates-imgadm -C experimental list name=amonredis
-
-If you forget to step to make the triton-origin image accessible to `Joyent_Dev`
-in us-east-3, then you will see a build error something like this:
-
-    ./tools/prep_dataset_in_jpc.sh:226: sdc-createmachine --dataset 04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f --package 14b0351e-d0f8-11e5-8a78-9fb74f9e7bc3 --tag MG_IMAGE_BUILD=true --name TEMP-vmapi-1494370819
-    sdc-createmachine: error (ResourceNotFound): image 04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f not found
-    ...
-    prep_dataset_in_jpc.sh: error: cannot get uuid for new VM.
+ * Push your changes to a branch
+ * Have the appropriate Jenkins origin-image job build it
+ * Note the resulting UUID, update one or more components to use that as their base.
+ * Test those components as with any other change.
 
 
 ### Releasing triton-origin images
@@ -302,60 +226,43 @@ Benefits of this being manual:
 - We hopefully **reduce the number of active triton-origin images in use**. In
   the extreme, if every Triton component used a different triton-origin image,
   we could lose the space benefits on the USB key and on zpools for deployment.
-- We use this opportunity to **also publish the new triton-origin images to
-  images.joyent.com and to the Triton Public Cloud**. These triton-origin images
-  are necessary for non-Joyent users (who don't have direct access to our
-  CI system) to [build Triton components
-  themselves](https://github.com/joyent/triton/blob/master/docs/developer-guide/building.md).
 
-A downside is that we have to bother with a manual release process. However,
-I don't expect there to be much churn on triton-origin images, so I doubt it
-will be much of a burden.
+A downside is that we have to bother with a manual release process. However, I
+don't expect there to be much churn on triton-origin images, so I doubt it will
+be much of a burden.  The most common reason to release a new origin-image of an
+already existing flavor is the pick up pkgsrc security updates.
 
-How to release a new set of triton-origin images:
+How to release a new triton-origin image:
 
 1. List the set images in the "dev" channel to release via:
 
         updates-imgadm -C dev list --latest \
-            name=~triton-origin- version=$(json -f package.json version)
+            name=~triton-origin-
 
     For example:
 
-        $ updates-imgadm -C dev list --latest name=~triton-origin- version=1.0.0
+        $ updates-imgadm -C dev list --latest name=~triton-origin
         UUID                                  NAME                            VERSION  FLAGS  OS       PUBLISHED
         e24bd5b7-f06b-4d6a-84f1-45c0b342e4d2  triton-origin-multiarch-15.4.1  1.0.0    I      smartos  2017-05-02T06:42:18Z
         b6ea7cb4-6b90-48c0-99e7-1d34c2895248  triton-origin-multiarch-18.1.0  1.0.1    I      smartos  2018-05-21T18:28:19Z
 
-2. Create a [TRITON](https://devhub.joyent.com/jira/browse/TRITON) ticket to
+2. Create a [TRITON](https://jira.joyent.us/browse/TRITON) ticket to
    note the release of new triton-origin images. Include the listing from
    step 1.
 
-3. Add those images to all of the "release" (required for Triton releases),
+3. Add the image to all of the "release" (required for Triton releases),
    "staging" (required for the Triton release process), "experimental" (needed
    for feature-branch builds of components), and "support" (required eventually
    when Support takes release images) channels of updates.joyent.com:
 
-        imageUuids=$(updates-imgadm -C dev list -H -o uuid --latest \
-            name=~triton-origin- version=$(json -f package.json version) | xargs)
-        updates-imgadm -C dev channel-add staging $imageUuids
-        updates-imgadm -C dev channel-add release $imageUuids
-        updates-imgadm -C dev channel-add experimental $imageUuids
-        updates-imgadm -C dev channel-add support $imageUuids
+        updates-imgadm -C dev channel-add staging $UUID
+        updates-imgadm -C dev channel-add release $UUID
+        updates-imgadm -C dev channel-add experimental $UUID
+        updates-imgadm -C dev channel-add support $UUID
 
     (Dev Note: One might hit TOOLS-1733 while doing this.)
 
-4. Publish the images to <https://images.joyent.com>: This is a first step in
-   getting them available for non-Joyent users to build Triton components
-   themselves.
-
-   TODO: provide a tool to do this. For now you need to download each from
-   updates.jo, tweak `public: true` in the manifest, and then use
-   `joyent-imgadm` to publish them to images.jo.
-
-5. Open a CM ticket to have the new triton-origin images get imported into
-   the JPC datacenters.
-
-6. If this is a new triton origin name (e.g. adding a triton-origin image
+4. If this is a new triton origin name (e.g. adding a triton-origin image
    based on a new minimal image -- new pkgsrc arch or new pkgsrc version), then
    a few extra things are required:
 
@@ -369,7 +276,7 @@ How to release a new set of triton-origin images:
    - Add sdcnode builds for this new image. See
      <https://github.com/joyent/sdcnode>.
 
-7. [eng.git](https://github.com/joyent/eng/) includes a script
+5. [eng.git](https://github.com/joyent/eng/) includes a script
    `./tools/validate-buildenv.sh` which must be updated to include mappings for
     the new origin image. After pushing changes to eng.git, any components which
     are expected to use the new origin image will need their `deps/eng`
@@ -390,13 +297,6 @@ The 16.4.x generation of base/minimal images has issue DATASET-1297
 20161108T160947Z"), which is a blocker for triton-origin usage. JoshW mentions
 that to use these we could run them through the deholer.
 
-### Limitation: hardcoded "mantaUrl"
-
-Currently there is no good way to infer the linked `MANTA_URL` for a given
-Triton CLI profile (aka CloudAPI). It would be nice to have that on the
-cloudapi's ListServices. Therefore we currently hardcode the Manta URL in the
-scripts.
-
 
 ## License
 
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..8dccea3
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit 8dccea34f933876e22a53ca8d8e0434f1ac178e9
diff --git a/empty.tar.gz b/empty.tar.gz
new file mode 100644
index 0000000..5ace74c
Binary files /dev/null and b/empty.tar.gz differ
diff --git a/images.json b/images.json
deleted file mode 100644
index 5c71a02..0000000
--- a/images.json
+++ /dev/null
@@ -1,36 +0,0 @@
-[
-    {
-        "namePrefix": "triton-origin-multiarch",
-        "desc": "Triton/Manta component origin image based on multiarch 15.4.x",
-        "origin": {
-            "uuid": "ede31770-e19c-11e5-bb6e-3b7de3cca9ce",
-            "name": "minimal-multiarch-lts",
-            "version": "15.4.1"
-        },
-        "pkgsrc": [
-            "coreutils-8.23nb2",
-            "curl-7.51.0",
-            "gsed-4.2.2nb4",
-            "patch-2.7.5",
-            "sudo-1.8.15"
-        ],
-        "protoMinMemoryMb": "1024"
-    },
-    {
-        "namePrefix": "triton-origin-multiarch",
-        "desc": "Triton/Manta component origin image based on multiarch 18.1.0",
-        "origin": {
-            "uuid": "1ad363ec-3b83-11e8-8521-2f68a4a34d5d",
-            "name": "minimal-multiarch",
-            "version": "18.1.0"
-        },
-        "pkgsrc": [
-            "coreutils-8.26",
-            "curl-7.59.0",
-            "gsed-4.4",
-            "patch-2.7.6",
-            "sudo-1.8.22"
-        ],
-        "protoMinMemoryMb": "1024"
-    }
-]
diff --git a/images/triton-origin-multiarch-15.4.1/Makefile b/images/triton-origin-multiarch-15.4.1/Makefile
new file mode 100644
index 0000000..732705c
--- /dev/null
+++ b/images/triton-origin-multiarch-15.4.1/Makefile
@@ -0,0 +1,22 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+NAME=triton-origin-multiarch-15.4.1
+TOP=$(shell git rev-parse --show-toplevel)
+
+include $(TOP)/Makefile.origin.defs
+include $(TOP)/deps/eng/tools/mk/Makefile.defs
+
+# minimal-multiarch-lts@15.4.1
+BASE_IMAGE_UUID = ede31770-e19c-11e5-bb6e-3b7de3cca9ce
+BUILDIMAGE_NAME = ${NAME}
+BUILDIMAGE_DESC = Triton/Manta component origin image based on multiarch 15.4.x
+BUILDIMAGE_PKGSRC = coreutils-8.23nb2 curl-7.51.0 gsed-4.2.2nb4 patch-2.7.5 sudo-1.8.15
+
+include $(TOP)/deps/eng/tools/mk/Makefile.targ
diff --git a/images/triton-origin-multiarch-18.1.0/Makefile b/images/triton-origin-multiarch-18.1.0/Makefile
new file mode 100644
index 0000000..ad2f370
--- /dev/null
+++ b/images/triton-origin-multiarch-18.1.0/Makefile
@@ -0,0 +1,22 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+NAME=triton-origin-multiarch-18.1.0
+TOP=$(shell git rev-parse --show-toplevel)
+
+include $(TOP)/Makefile.origin.defs
+include $(TOP)/deps/eng/tools/mk/Makefile.defs
+
+# minimal-multiarch@18.1.0
+BASE_IMAGE_UUID = 1ad363ec-3b83-11e8-8521-2f68a4a34d5d
+BUILDIMAGE_NAME = ${NAME}
+BUILDIMAGE_DESC = Triton/Manta component origin image based on multiarch 18.1.0
+BUILDIMAGE_PKGSRC = coreutils-8.26 curl-7.59.0 gsed-4.4 patch-2.7.6 sudo-1.8.22
+
+include $(TOP)/deps/eng/tools/mk/Makefile.targ
diff --git a/images/triton-origin-x86_64-18.4.0/Makefile b/images/triton-origin-x86_64-18.4.0/Makefile
new file mode 100644
index 0000000..d6ede06
--- /dev/null
+++ b/images/triton-origin-x86_64-18.4.0/Makefile
@@ -0,0 +1,24 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+NAME=triton-origin-x86_64-18.4.0
+TOP=$(shell git rev-parse --show-toplevel)
+
+include $(TOP)/Makefile.origin.defs
+include $(TOP)/deps/eng/tools/mk/Makefile.defs
+
+BUILDIMAGE_DO_PKGSRC_UPGRADE:=true
+
+# minimal-64-lts@18.4.0
+BASE_IMAGE_UUID = c2c31b00-1d60-11e9-9a77-ff9f06554b0f
+BUILDIMAGE_NAME = ${NAME}
+BUILDIMAGE_DESC = Triton/Manta component origin image based on x86_64 18.4.0
+BUILDIMAGE_PKGSRC = coreutils curl gsed patch sudo
+
+include $(TOP)/deps/eng/tools/mk/Makefile.targ
diff --git a/package.json b/package.json
index 028b320..04b3941 100644
--- a/package.json
+++ b/package.json
@@ -1,15 +1,12 @@
 {
   "name": "triton-origin-image",
   "description": "origin images for Triton DataCenter core components",
-  "version": "1.0.1",
+  "version": "1.1.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "homepage": "https://github.com/joyent/triton-origin-image",
   "dependencies": {
-    "imgapi-cli": "git+https://github.com/joyent/sdc-imgapi-cli.git#v2.2.5",
-    "json": "9.0.6",
-    "manta": "4.3.0",
-    "triton": "5.2.0"
+    "json": "9.0.6"
   },
   "repository": {
     "type": "git",
diff --git a/tools/build-image.sh b/tools/build-image.sh
deleted file mode 100755
index 6643a48..0000000
--- a/tools/build-image.sh
+++ /dev/null
@@ -1,227 +0,0 @@
-#!/bin/bash
-# vi: expandtab sw=4 ts=4
-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Build a single triton-origin image with the given image config.
-#
-
-if [[ -n "$TRACE" ]]; then
-    if [[ -t 1 ]]; then
-        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
-    else
-        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    fi
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
-SCRIPT="$(basename $0)"
-
-export PATH="${TOP}/node_modules/.bin:${PATH}"
-
-
-# ---- support functions
-
-function fatal {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-    fi
-    cleanup 1
-}
-
-function cleanup() {
-    local exit_status=${1:-$?}
-
-    if [[ -n "$KEEP_INFRA_ON_FAILURE" ]]; then
-        echo "$0: NOT cleaning up (\$KEEP_INFRA_ON_FAILURE is set)" >&2
-    else
-        [[ -n "$protoName" ]] && triton instance rm $protoName || true
-        [[ -n "$imageUuid" ]] && triton image rm -f ${imageUuid} || true
-    fi
-
-
-    exit $exit_status
-}
-
-function usage() {
-    echo "Usage:"
-    echo "  $SCRIPT IMAGE-CONFIG-JSON BUILDINFO-FILE"
-    echo ""
-    echo "Options:"
-    echo "  -h       Print this help and exit."
-    echo ""
-    echo "Environment:"
-    echo "  KEEP_INFRA_ON_FAILURE=1     Set this to *not* remove the proto"
-    echo "                              instance and created image on script "
-    echo "                              failure. Useful for debugging."
-}
-
-function usageErr() {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-        echo ""
-    fi
-    usage
-    fatal
-}
-
-
-# ---- mainline
-
-while getopts h opt; do
-    case $opt in
-    h)
-        usage
-        exit 0
-        ;;
-    *)
-        usage
-        exit 1
-        ;;
-    esac
-done
-shift $(($OPTIND - 1))
-
-imageConfig="$1"
-[[ -n "$imageConfig" ]] || usageErr "missing IMAGE-CONFIG-JSON arg"
-buildinfoFile="$2"
-[[ -n "$buildinfoFile" ]] || usageErr "missing BUILDINFO-FILE arg"
-[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
-json -qnf "$buildinfoFile" || fatal "'$buildinfoFile' is not valid JSON"
-
-buildinfo=$(cat "$buildinfoFile")
-originUuid=$(echo "$imageConfig" | json origin.uuid)
-originName=$(echo "$imageConfig" | json origin.name)
-originVersion=$(echo "$imageConfig" | json origin.version)
-imageName=$(echo "$imageConfig" | json namePrefix)-$originVersion
-imageVersion=$(cat $TOP/package.json | json version)
-imageHomepage=$(cat $TOP/package.json | json homepage)
-imageDesc=$(echo "$imageConfig" | json desc)
-protoMinMemoryMb=$(echo "$imageConfig" | json protoMinMemoryMb)
-tritonAccount=$(triton profile get -j | json account)
-tritonKeyId=$(triton profile get -j | json keyId)
-branch=$(echo "$buildinfo" | json branch)
-[[ -n "$branch" ]] || fatal "buildinfo is missing 'branch'"
-timestamp=$(echo "$buildinfo" | json timestamp)
-[[ -n "$timestamp" ]] || fatal "buildinfo is missing 'timestamp'"
-mantaUploadDir=/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/
-mantaLatestLink=/$tritonAccount/public/builds/triton-origin-image/$branch-latest
-
-
-# Validate that origin.uuid matches origin.{name,version} as a sanity check.
-originManifest=$(joyent-imgadm get $originUuid)
-[[ $(echo "$originManifest" | json name) == "$originName" ]] \
-    && [[ $(echo "$originManifest" | json version) == "$originVersion" ]] \
-    || fatal "origin.uuid, $originUuid, does not match name@version in image config: $originName@$originVersion"
-originMinPlatform=$(echo "$originManifest" | json 'requirements.min_platform["7.0"]')
-
-
-trap cleanup ERR
-
-# Hardcoded MANTA_URL b/c can't get from CloudAPI.
-export MANTA_URL=https://us-east.manta.joyent.com
-export MANTA_USER=$tritonAccount
-export MANTA_KEY_ID=$tritonKeyId
-unset MANTA_TLS_INSECURE  # not yet supported
-unset MANTA_SUBUSER  # not supported
-
-
-echo "Building $imageName@$imageVersion image"
-echo "Manta upload dir:"
-echo "    $mantaUploadDir"
-echo "Image config:"
-echo "$imageConfig" | json | sed -e 's/^/    /'
-echo "Triton CLI profile:"
-triton profile get | sed -e 's/^/    /'
-
-# Create the proto instance.
-echo ""
-
-# Find a package with sufficient RAM, but avoid crazy large packages.
-protoPkg=$(triton pkgs -j \
-    | json -gac "this.memory >= $protoMinMemoryMb
-        && this.memory <= 2 * $protoMinMemoryMb" name \
-    | head -1)
-protoName="TEMP-$imageName-proto-$(date +%s)"
-
-pkgsrcPkgs="$(echo "$imageConfig" \
-    | json -e 'this.flat = this.pkgsrc.join(" ")' flat)"
-userScript="/opt/local/bin/pkgin -f -y update"
-userScript="${userScript}; /opt/local/bin/pkgin -y in $pkgsrcPkgs"
-userScript="${userScript}; touch /.done"
-
-triton instance create -w -n $protoName \
-    -m "user-script=$userScript" \
-    "$originUuid" "$protoPkg"
-
-
-# Wait for the user-script to complete.
-ip=$(triton instance ip $protoName)
-ssh="ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$ip"
-count=0
-set +o errexit
-while (( count < 60 )); do
-    $ssh "[[ -f /.done ]] || exit 42" >/dev/null && break
-    rc=$?
-    [[ $rc -ne 42 ]] && fatal "Error during ssh"
-
-    (( count = count + 1 ))
-    sleep 15
-done
-set -o errexit
-$ssh "rm /.done"
-
-
-# Stop the proto and create our image
-echo ""
-echo "Creating image from proto inst $protoName"
-triton instance stop -w $protoName
-
-output=$(triton image create -jw \
-    -d "$imageDesc" \
-    -t "$(json -f $buildinfoFile -o json-0 branch timestamp git)" \
-    --homepage "$imageHomepage" \
-    "$protoName" "${imageName}" "${imageVersion}")
-echo "$output"
-imageUuid=$(echo "$output" | head -1 | json id)
-echo "Image UUID: $imageUuid"
-
-
-# Export the image to our Manta build area
-echo ""
-mmkdir -p $mantaUploadDir
-triton image export $imageUuid $mantaUploadDir
-echo $mantaUploadDir | mput $mantaLatestLink   # create the `BRANCH-latest` file
-mput -f $buildinfoFile -H 'content-type: application/json' \
-    $mantaUploadDir/buildinfo.json
-# TODO: want sha256sums or md5sums files in there?
-
-# Tweaks to imgmanifest for publishing.
-# - Set requirements.min_platform to that of the origin, because we know we
-#   haven't added binary components that depend on the platform on which the
-#   proto instance was deployed.
-# - Set owner to the "not set" UUID (see IMGAPI-408), as is done by
-#   updates.joyent.com itself on import.
-imgmanifestName=$(mls $mantaUploadDir | grep '\.imgmanifest$')
-mget -o build/$imgmanifestName $mantaUploadDir/$imgmanifestName
-json -f build/$imgmanifestName -I \
-    -e "this.requirements.min_platform['7.0'] = '$originMinPlatform'" \
-    -e "this.owner = '00000000-0000-0000-0000-000000000000'"
-mput -f build/$imgmanifestName $mantaUploadDir/$imgmanifestName
-
-
-echo ""
-echo "Cleaning up"
-triton instance rm -w $protoName
-triton image rm -f $imageUuid
diff --git a/tools/build-images.sh b/tools/build-images.sh
deleted file mode 100755
index bdfdbdd..0000000
--- a/tools/build-images.sh
+++ /dev/null
@@ -1,100 +0,0 @@
-#!/bin/bash
-# vi: expandtab sw=4 ts=4
-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Build the triton-origin images per the given build info and images config.
-#
-
-if [[ -n "$TRACE" ]]; then
-    if [[ -t 1 ]]; then
-        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
-    else
-        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    fi
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
-SCRIPT="$(basename $0)"
-
-export PATH="${TOP}/node_modules/.bin:${PATH}"
-
-
-# ---- support functions
-
-function fatal {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-    fi
-    exit 1
-}
-
-function usage() {
-    echo "Usage:"
-    echo "  $SCRIPT -i IMAGES-CONFIG-FILE -b BUILDINFO-FILE"
-    echo ""
-    echo "Options:"
-    echo "  -h       Print this help and exit."
-    echo "  -i FILE  images config file, typically ./images.json"
-    echo "  -b FILE  buildinfo file, typically ./build/buildinfo.json"
-}
-
-function usageErr() {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-        echo ""
-    fi
-    usage
-    fatal
-}
-
-
-# ---- mainline
-
-imagesFile=
-buildinfoFile=
-while getopts hi:b: opt; do
-    case $opt in
-    h)
-        usage
-        exit 0
-        ;;
-    i)
-        [[ -n "$OPTARG" ]] && imagesFile="$OPTARG"
-        ;;
-    b)
-        [[ -n "$OPTARG" ]] && buildinfoFile="$OPTARG"
-        ;;
-    *)
-        usage
-        exit 1
-        ;;
-    esac
-done
-shift $(($OPTIND - 1))
-
-[[ -n "$imagesFile" ]] || usageErr "missing '-i FILE' option"
-[[ -f "$imagesFile" ]] || usageErr "images file does not exist: $imagesFile"
-json -qnf "$imagesFile" || fatal "'$imagesFile' is not valid JSON"
-[[ -n "$buildinfoFile" ]] || usageErr "missing '-b FILE' option"
-[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
-
-imagesConfig=$(cat $imagesFile)
-numImages=$(echo "$imagesConfig" | json length)
-for (( i=0; i<$numImages; i++ ))
-do
-    echo ""
-    imageConfig=$(echo "$imagesConfig" | json $i)
-    $TOP/tools/build-image.sh "$imageConfig" "$buildinfoFile"
-done
diff --git a/tools/publish-images.sh b/tools/publish-images.sh
deleted file mode 100755
index 7949828..0000000
--- a/tools/publish-images.sh
+++ /dev/null
@@ -1,144 +0,0 @@
-#!/bin/bash
-# vi: expandtab sw=4 ts=4
-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Publish the built images per the given build info.
-#
-
-if [[ -n "$TRACE" ]]; then
-    if [[ -t 1 ]]; then
-        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
-    else
-        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    fi
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
-SCRIPT="$(basename $0)"
-
-export PATH="${TOP}/node_modules/.bin:${PATH}"
-
-
-# ---- support functions
-
-function fatal {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-    fi
-    exit 1
-}
-
-function usage() {
-    echo "Usage:"
-    echo "  $SCRIPT -b BUILDINFO-FILE"
-    echo ""
-    echo "Options:"
-    echo "  -h       Print this help and exit."
-    echo "  -b FILE  buildinfo file, typically ./build/buildinfo.json"
-}
-
-function usageErr() {
-    if [[ -n "$1" ]]; then
-        echo "$SCRIPT: error: $1" >&2
-        echo ""
-    fi
-    usage
-    fatal
-}
-
-
-# ---- mainline
-
-buildinfoFile=
-while getopts hb: opt; do
-    case $opt in
-    h)
-        usage
-        exit 0
-        ;;
-    b)
-        [[ -n "$OPTARG" ]] && buildinfoFile="$OPTARG"
-        ;;
-    *)
-        usage
-        exit 1
-        ;;
-    esac
-done
-shift $(($OPTIND - 1))
-
-[[ -n "$buildinfoFile" ]] || usageErr "missing '-b FILE' option"
-[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
-json -qnf "$buildinfoFile" || fatal "'$buildinfoFile' is not valid JSON"
-
-
-buildinfo=$(cat "$buildinfoFile")
-tritonAccount=$(triton profile get -j | json account)
-tritonKeyId=$(triton profile get -j | json keyId)
-branch=$(echo "$buildinfo" | json branch)
-[[ -n "$branch" ]] || fatal "buildinfo is missing 'branch'"
-timestamp=$(echo "$buildinfo" | json timestamp)
-[[ -n "$timestamp" ]] || fatal "buildinfo is missing 'timestamp'"
-mantaUploadDir=/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/
-
-
-# Hardcoded MANTA_URL b/c can't get from CloudAPI.
-export MANTA_URL=https://us-east.manta.joyent.com
-export MANTA_USER=$tritonAccount
-export MANTA_KEY_ID=$tritonKeyId
-unset MANTA_TLS_INSECURE  # not yet supported
-unset MANTA_SUBUSER  # not supported
-
-
-if [[ $branch == "master" ]]; then
-    channel=dev
-else
-    channel=experimental
-fi
-imgmanifests=$(mfind -t o -n '^triton-origin-.*\.imgmanifest$' $mantaUploadDir)
-
-for imgmanifestMpath in $imgmanifests; do
-    # Longer term: I'd like to support updates.joyent.com having a special
-    # "import an image from files in the same Manta I use". In which case we
-    # would not need to download the (largish) image file and then immediately
-    # upload it again.
-    #
-    # For now: Download the manifest and file and `updates-imgadm import` it.
-    base=$(basename $imgmanifestMpath .imgmanifest)
-    imgUuid=$(json -f build/$base.imgmanifest uuid)
-    imgName=$(json -f build/$base.imgmanifest name)
-    imgVer=$(json -f build/$base.imgmanifest version)
-    imgFileSha1=$(json -f build/$base.imgmanifest files.0.sha1)
-    echo ""
-    echo "Publishing image $imgUuid ($imgName@$imgVer)"
-    echo "    to https://updates.joyent.com (channel '$channel')"
-
-    # Download the bits to publish. If we already have the (large) file,
-    # try to avoid re-downloading it (e.g. from a failed earlier publish
-    # attempt).
-    mget -o build/$base.imgmanifest $imgmanifestMpath
-    if [[ -f build/$base.zfs.gz ]]; then
-        currSha1=$(openssl dgst -sha1 build/$base.zfs.gz | awk '{print $NF}')
-        if [[ $currSha1 != $imgFileSha1 ]]; then
-            rm build/$base.zfs.gz
-        fi
-    fi
-    if [[ ! -f build/$base.zfs.gz ]]; then
-        mget -o build/$base.zfs.gz $mantaUploadDir/$base.zfs.gz
-    fi
-
-    # Publish it.
-    updates-imgadm -C $channel import -m build/$base.imgmanifest -f build/$base.zfs.gz
-done
-- 
2.21.0

