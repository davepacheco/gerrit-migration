From 6f1297e47a7e46dd8cd9cc8a0e307323af5820f9 Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Mon, 8 Jan 2018 19:45:02 +0000
Subject: [PATCH] NET-384 sdc-booter should dump core on uncaught exception
 NET-385 sdc-booter panics while handling discover on log level trace NET-386
 booter should be able to handle option 82 as nictags

---
 README.md                     |   2 +-
 bin/dhcpd                     |   2 +-
 config.json.sample            |   3 +-
 lib/admin-pool-cache.js       | 150 ++++++++++++++++++++++++++++++++++
 lib/boot-files.js             |   4 +-
 lib/booter.js                 |   2 +-
 lib/bootparams.js             |  39 ++++++++-
 lib/dhcp.js                   |   7 +-
 lib/dhcpd.js                  |  80 ++++++++++++++++--
 sapi_manifests/dhcpd/template |   3 +-
 10 files changed, 275 insertions(+), 17 deletions(-)
 create mode 100644 lib/admin-pool-cache.js

diff --git a/README.md b/README.md
index 92c0a7a..68a1108 100644
--- a/README.md
+++ b/README.md
@@ -72,7 +72,7 @@ Booter supports a few SAPI configuration values:
 
 - `http_pxe_boot`: if set to `true`, allow iPXE clients to pull down their
   files via HTTP rather than TFTP
-- `compute_node_default_gateway`: set this to give Compute Nodess a
+- `compute_node_default_gateway`: set this to give Compute Nodes a
   default gateway
 - `dhcp_lease_time`: DHCP lease time for Compute Nodes
 - `allow_missing_class_id`: booter only allows clients with class identifiers
diff --git a/bin/dhcpd b/bin/dhcpd
index 3e21437..8822d6e 100755
--- a/bin/dhcpd
+++ b/bin/dhcpd
@@ -16,4 +16,4 @@ if [[ ! -d "${NODE_INSTALL}" && -d "${TOP}/build/node" ]]; then
     NODE_INSTALL=${TOP}/build/node
 fi
 
-${NODE_INSTALL}/bin/node ${TOP}/server.js "$@"
+${NODE_INSTALL}/bin/node --abort-on-uncaught-exception ${TOP}/server.js "$@"
diff --git a/config.json.sample b/config.json.sample
index 8feea4c..00b87aa 100644
--- a/config.json.sample
+++ b/config.json.sample
@@ -16,5 +16,6 @@
   "defaultGateway": "10.99.99.7",
   "serverIp": "10.99.99.11",
   "leaseTime": 3600,
-  "netmask": "255.255.255.0"
+  "netmask": "255.255.255.0",
+  "updateCacheInterval": 60000
 }
diff --git a/lib/admin-pool-cache.js b/lib/admin-pool-cache.js
new file mode 100644
index 0000000..dee801c
--- /dev/null
+++ b/lib/admin-pool-cache.js
@@ -0,0 +1,150 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var fArg = {arg: null, admin_nets: {}};
+
+
+
+/*
+ * Initialize AdminPoolCache and start periodic updater.
+ */
+function AdminPoolCache(config) {
+    this._cache = {};
+    this.log = config.log;
+    this.napi = config.napi;
+    this.updateInterval = config.cacheUpdateInterval;
+
+    Object.seal(this);
+
+    var self = this;
+    function updatePoolCache() {
+        self.update(function (err) {
+            if (err) {
+                self.log.error('Periodic Admin Pool Cache update failed', err,
+                    self._cache);
+            } else {
+                self.log.info({cache: self._cache}, 'AdminPoolCache updated');
+            }
+            setTimeout(updatePoolCache, self.updateInterval);
+        });
+    }
+    updatePoolCache();
+
+}
+
+/*
+ * Update AdminPoolCache.
+ *
+ * XXX: this assumes there is only one network per nictag, which should be safe
+ * since this should only be used for rackaware networking (subnet per rack).
+ */
+AdminPoolCache.prototype.update = function _AdminPoolCacheUpdate(callback) {
+    var napi = this.napi;
+    var log = this.log;
+    var cache = this._cache;
+
+    assert.func(callback, 'callback');
+
+    vasync.waterfall([
+        function _listNetworkPools(next) {
+            napi.listNetworkPools({name: 'admin'}, null, function (err, res) {
+                if (err) {
+                    next(err);
+                }
+                // XXX assert too much?
+                assert.arrayOfObject(res, 'pools');
+                if (res.length !== 1) {
+                    err = 'Too many admin network pools';
+                    log.error(err, res);
+                    next(err);
+                }
+                assert.arrayOfString(res[0].networks, 'networks');
+
+                next(null, res[0].networks);
+            });
+        },
+        function _updateAdminNetworks(pool_nets, next) {
+            napi.listNetworks(function (err, res) {
+                if (err) {
+                    next(err);
+                }
+
+                // XXX assert too much?
+                assert.arrayOfObject(res, 'networks');
+
+                for (var n = 1; n < res.length; n++) {
+                    var net = res[n];
+                    var nic_tag;
+
+                    if (pool_nets.indexOf(net.uuid) === -1 ||
+                        !net.hasOwnProperty('nic_tag')) {
+                        continue;
+                    }
+
+                    nic_tag = net.nic_tag.toUpperCase();
+                    cache[nic_tag] = net.uuid;
+                }
+                next(null);
+            });
+        }
+    ],
+    function (err) {
+        if (err) {
+            log.error(err);
+        }
+        callback(err);
+    });
+};
+
+/*
+ * Return the uuid of the network from the admin pool with the specified nictag.
+ */
+AdminPoolCache.prototype.get = function (nictag, callback) {
+    var self = this;
+    var tag = nictag.toUpperCase();
+
+    if (this._cache.hasOwnProperty(tag)) {
+        callback(null, this._cache[tag]);
+        return;
+    }
+
+    /*
+     * Maybe this is a recently added network / nictag.  Update the cache and
+     * see if it is picked up.
+     *
+     * XXX: this could cause a failure cascade if one lookup delays booting
+     * other CNs with valid nictags.  But in that case it is no worse than not
+     * having a cache at all.
+     */
+    this.update(function asyncCacheUpdate(err) {
+        if (err) {
+            callback(err);
+        }
+
+        if (!this._cache.hasOwnProperty(tag)) {
+            err = 'Could not find nictag in admin network pool';
+            self.log.error({nictag: tag, cache: self._cache}, err);
+            callback(err);
+            return;
+        }
+
+        callback(null, this._cache[tag]);
+        return;
+    });
+};
+
+module.exports = {
+    create: function (config) {
+        return new AdminPoolCache(config);
+    }
+};
diff --git a/lib/boot-files.js b/lib/boot-files.js
index 5b37db5..edb9a3e 100644
--- a/lib/boot-files.js
+++ b/lib/boot-files.js
@@ -39,7 +39,9 @@ function extractBootOpts(opts) {
         log: opts.log,
         napi: opts.napi,
         mac: opts.mac,
-        tftpRoot: opts.config.tftpRoot
+        tftpRoot: opts.config.tftpRoot,
+        nictag: opts.nictag,
+        adminPoolCache: opts.adminPoolCache
     };
 
     if (opts.mac) {
diff --git a/lib/booter.js b/lib/booter.js
index 16722ea..b34f1bd 100644
--- a/lib/booter.js
+++ b/lib/booter.js
@@ -63,7 +63,7 @@ function main() {
             mac: getArg('MAC address'),
             napi: napi,
             cnapi: cnapi,
-            log: log
+            log: log //XXX add adminPoolCache
         }, standardHandler);
         break;
     case 'bootparams-cnapi':
diff --git a/lib/bootparams.js b/lib/bootparams.js
index 47e01ba..62583e2 100644
--- a/lib/bootparams.js
+++ b/lib/bootparams.js
@@ -112,6 +112,7 @@ function getBootParams(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.string(opts.mac, 'opts.mac');
     assert.object(opts.napi, 'opts.napi');
+    assert.object(opts.adminPoolCache, 'opts.adminPoolCache');
 
     var cacheDir = opts.cacheDir;
     var adminUuid = opts.adminUuid;
@@ -119,6 +120,7 @@ function getBootParams(opts, callback) {
     var log = opts.log;
     var mac = opts.mac;
     var napi = opts.napi;
+    var adminPoolCache = opts.adminPoolCache;
 
     var uuid;
     var params = null;
@@ -126,7 +128,9 @@ function getBootParams(opts, callback) {
         adminUuid: opts.adminUuid,
         bootNic: null,
         log: opts.log,
-        napi: opts.napi
+        napi: opts.napi,
+        network_uuid: 'admin',
+        nic_tag: opts.nictag,
     };
 
     vasync.pipeline({
@@ -158,8 +162,9 @@ function getBootParams(opts, callback) {
                     return cb();
                 }
 
+                // XXX: this may need to change with new admin network pool
                 var putParams = {
-                    network_uuid: 'admin'
+                    network_uuid: fArg.network_uuid
                 };
 
                 log.debug(putParams, 'Updating nic "%s" to add IP', mac);
@@ -179,9 +184,31 @@ function getBootParams(opts, callback) {
                 });
             },
 
+            function _checkAdminPoolCache(fArg, cb) {
+                if (fArg.bootNic !== null) {
+                    return cb();
+                }
+
+                if (!fArg.nic_tag) {
+                    fArg.nic_tag = 'admin'
+                    return cb();
+                }
+
+                adminPoolCache.get(fArg.nic_tag, function (err, uuid) {
+                    if (err) {
+                        log.error({nictag: fArg.nic_tag}, 'Tag not found');
+                        return cb(err);
+                    }
+
+                    fArg.network_uuid = uuid;
+                    return cb();
+                });
+            },
+
             // If the nic doesn't exist in NAPI, provision it on the admin
             // network, which will give it an IP
             function _createNic(fArg, cb) {
+
                 if (fArg.bootNic !== null) {
                     return cb();
                 }
@@ -191,9 +218,13 @@ function getBootParams(opts, callback) {
                     belongs_to_uuid: adminUuid,
                     belongs_to_type: 'other',
                     mac: mac,
-                    nic_tags_provided: [ 'admin' ]
+                    nic_tags_provided: [ fArg.nic_tag ] //XXX correct param?
                 };
-                napi.provisionNic('admin', postParams, function (err, res) {
+
+                log.info(postParams, 'posting params to napi');
+
+                napi.provisionNic(fArg.network_uuid, postParams,
+                    function (err, res) {
                     if (err) {
                         log.error(err,
                             'Error provisioning admin nic "%s" on NAPI', mac);
diff --git a/lib/dhcp.js b/lib/dhcp.js
index 42c55aa..4135805 100644
--- a/lib/dhcp.js
+++ b/lib/dhcp.js
@@ -362,6 +362,10 @@ function createDHCPreply(packet, data) {
                         pkt.options[opt] = pack.unpack('CCCC',
                                 pack.pack('N', parseInt(value, 10)));
                         break;
+                    // pass through
+                    case 82: // DHCP Relay
+                        pkt.options[opt] = value;
+                        break;
                     default:
                         throw new Error('Ignoring unhandled option ' + opt);
                 }
@@ -424,13 +428,14 @@ function parseDHCPpacket(data) {
     while (i < res.length) {
             var option = parseInt(res[i++], 10);
             if (option === 0) {
-                    continue;
+                continue;
             }
 
             if (option == 255) {
                     // end of options option
                     break;
             } else {
+                    // XXX: I'll take sub-options for a 100 Alex
                     // an option that will have data
                     var olen = res[i++]; // length of option data
                     var value = [];
diff --git a/lib/dhcpd.js b/lib/dhcpd.js
index fd974ae..884c56d 100755
--- a/lib/dhcpd.js
+++ b/lib/dhcpd.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -23,6 +23,7 @@ var mod_boot_files = require('./boot-files');
 var mod_clients = require('./clients');
 var sprintf = require('sprintf').sprintf;
 var uuid = require('node-uuid');
+var adminPoolCache = require('./admin-pool-cache.js');
 
 
 
@@ -35,10 +36,29 @@ var uuid = require('node-uuid');
  */
 function DHCPD(opts) {
     this.config = opts.config;
-
     this.cnapi = mod_clients.createCNAPIclient(this.config);
     this.log = opts.log;
     this.napi = mod_clients.createNAPIclient(this.config);
+
+    var self = this;
+
+    /*
+     * Create and update the Admin Poll cache before we start the server.
+     */
+    this.adminPoolCache = adminPoolCache.create({
+        napi: this.napi,
+        log: this.log,
+        cacheUpdateInterval: this.config.cacheUpdateInterval
+    });
+
+    this.adminPoolCache.update(function (err) {
+        if (err) {
+            self.log.error('Failed initial admin pool cache update', err);
+            // XXX: Should we fail fatally here?
+        } else {
+            self.log.info('Initial cache update complete');
+        }
+    });
 }
 
 
@@ -74,10 +94,15 @@ DHCPD.prototype.handleMessage = function (msg, peer) {
 
     // Print the whole packet in hex
     if (log.trace()) {
+        var str_buf;
         for (var i = 0; i < msg.length; i += 4) {
-            // XXX
-            this.log.trace(sprintf('[%03d]: 0x%02x 0x%02x 0x%02x 0x%02x',
-                i, msg[i], msg[i+1], msg[i+2], msg[i+3]));
+            str_buf = '';
+            str_buf += sprintf('[%03d]:', i);
+
+            for (var j = 0; j < Math.min(4, msg.length - i); j++) {
+                str_buf += sprintf(' 0x%02x', msg[i + j]);
+            }
+            this.log.trace(str_buf);
         }
     }
 
@@ -121,12 +146,50 @@ DHCPD.prototype.handleMessage = function (msg, peer) {
             + 'identifier');
     }
 
+    /*
+     * This block decodes option 82 which has multiple sub-options.  If we
+     * decide to extend booter to be a full fledged, DHCP server then we should
+     * create decoders for each option in dhcp.js.  But at this time, option 82
+     * is the only option we support that leverages suboptions (excepting the
+     * widely misused option 77).
+     */
+    if (packet.options[82]) {
+        log.info('Found DHCP Option 82');
+        var relayopt = packet.options[82];
+        var suboptid = relayopt[0];
+
+        /* We only support sub-option 1. */
+        if (suboptid !== 1) {
+            log.info('Option 82, missing dhcp circuit-id suboption, '
+                + 'found suboption number: %d.  Not responding.', suboptid);
+            return;
+        }
+
+        /* Slice off the suboption id. */
+        var subopt = relayopt.slice(1);
+        var suboptlen = subopt[0];
+
+        /* Slice off the suboption length. */
+        subopt = subopt.slice(1);
+
+        if (suboptlen !== subopt.length) {
+            log.info('Option 82, missing dhcp circuit-id suboption, '
+                + 'found suboption number: %d.  Not responding.', suboptid);
+            return;
+        }
+
+        var nictag = new Buffer(subopt).toString();
+        log.info('Found nic tag from Option 82:', nictag);
+    }
+
     mod_boot_files.writeAll({
         cnapi: self.cnapi,
         config: self.config,
         log: log,
         mac: mac,
-        napi: self.napi
+        napi: self.napi,
+        nictag: nictag,
+        adminPoolCache: self.adminPoolCache
     }, function _afterParams(pErr, params) {
         if (pErr) {
             log.error(pErr, 'error writing param files');
@@ -213,6 +276,10 @@ DHCPD.prototype.buildPacketOpts = function (packet, params, log) {
         }
     }
 
+    if (packet.options[82]) {
+        packetOpts['options']['82'] = packet.options[82];
+    }
+
     if (params.resolvers && params.resolvers.length) {
         resolvers = params.resolvers;
     }
@@ -262,6 +329,7 @@ function createServer(opts) {
     var requiredStrings = [ 'adminUuid', 'listenIp', 'tftpRoot',
         'defaultGateway', 'serverIp', 'netmask'];
 
+    // XXX: add cacheUpdateInterval
     for (var r in requiredStrings) {
         var req = requiredStrings[r];
         assert.string(config[req], 'config.' + req);
diff --git a/sapi_manifests/dhcpd/template b/sapi_manifests/dhcpd/template
index 8ada40f..13879ca 100644
--- a/sapi_manifests/dhcpd/template
+++ b/sapi_manifests/dhcpd/template
@@ -33,5 +33,6 @@
   "leaseTime": {{{dhcp_lease_time}}},
   "resolvers": {{{resolvers}}}{{^resolvers}}[]{{/resolvers}},
   "netmask": "{{{admin_netmask}}}"{{#allow_missing_class_id}},
-  "allowMissingClassID": true{{/allow_missing_class_id}}
+  "allowMissingClassID": true{{/allow_missing_class_id}},
+  "cacheUpdateInterval": 60000
 }
-- 
2.21.0

