commit 71c5116b867ab4eed3e9354b71a558adc96a9c78 (refs/changes/53/4953/2)
Author: Mike Zeller <mike@mikezeller.net>
Date:   2018-10-12T16:07:37-04:00 (12 months ago)
    
    TRITON-857 portolan fails to parse some MACs properly
    Reviewed by: Cody Peter Mello <melloc@writev.io>
    Reviewed by: Dave Eddy <dave.eddy@joyent.com>
    Reviewed by: Dan McDonald <danmcd@joyent.com>
    Approved by: Dan McDonald <danmcd@joyent.com>

diff --git a/bin/portolan b/bin/portolan
index 4de1039..7f5e2dd 100755
--- a/bin/portolan
+++ b/bin/portolan
@@ -190,7 +190,13 @@ PortolanCLI.prototype['do_add-overlay'] =
     }
 
     backendOpts.ip = mod_common.IPv6obj(backendOpts.ip);
-    backendOpts.mac = mod_common.macToInt(backendOpts.mac);
+
+    try {
+        backendOpts.mac = mod_common.macToInt(backendOpts.mac);
+    } catch (macErr) {
+        callback(macErr);
+        return;
+    }
 
     mod_backend.addOverlayMapping(backendOpts, callback);
 };
diff --git a/lib/common.js b/lib/common.js
index 677f9e9..6ae3c7c 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -17,6 +17,8 @@
 var ipaddr = require('ipaddr.js');
 var types = require('./types');
 var fmt = require('util').format;
+var macaddr = require('macaddr');
+var VError = require('verror').VError;
 
 
 
@@ -118,8 +120,19 @@ function macToArr(mac) {
     });
 }
 
+/**
+ * Attempt to parse a mac string into an int
+ *
+ * Note: this function possibly throws an error that the caller needs to handle
+ */
 function macToInt(mac) {
-    var i = parseInt(mac.split(':').join(''), 16);
+    var i;
+
+    try {
+        i = macaddr.parse(mac).toLong();
+    } catch (err) {
+        throw new VError(err, 'failed to parse mac addr: %s', mac);
+    }
     return (i);
 }
 
@@ -339,6 +352,7 @@ module.exports = {
 
 function test() {
     console.log(intToMac(81952921372024));
+    /* ignore the thrown error since the following is a hard coded mac addr */
     console.log(macToInt('78:45:c4:26:89:4a'));
 }
 
diff --git a/package.json b/package.json
index 219721f..ce30813 100644
--- a/package.json
+++ b/package.json
@@ -14,6 +14,7 @@
         "ipaddr.js": "0.1.6",
         "lomstream": "^1.1.0",
         "lru-cache": "2.5.0",
+        "macaddr": "0.0.1",
         "mkdirp": "0.5.0",
         "moray": "3.4.2",
         "node-uuid": "1.4.2",
diff --git a/test/lib/mapping.js b/test/lib/mapping.js
index 62b37ed..a59bc3c 100644
--- a/test/lib/mapping.js
+++ b/test/lib/mapping.js
@@ -30,17 +30,28 @@ function addOverlayMapping(t, opts) {
     assert.string(opts.params.mac, 'opts.params.mac');
     assert.number(opts.params.vnet_id, 'opts.params.vnet_id');
 
+    var mac;
+
+    try {
+        mac = mod_common.macToInt(opts.params.mac);
+    } catch (macErr) {
+        t.ifErr(macErr, 'invalid mac addr');
+        t.end();
+        return;
+    }
+
     var val = {
         cn_uuid: opts.params.cn_uuid,
         ip: mod_common.IPv6obj(opts.params.ip),
-        mac: mod_common.macToInt(opts.params.mac),
+        mac: mac,
         vnet_id: opts.params.vnet_id,
         deleted: opts.params.deleted || false
     };
 
     mod_moray.addOverlayMapping(val, function _afterUnderlay(err) {
         t.ifErr(err, 'add overlay mapping');
-        return t.end();
+        t.end();
+        return;
     });
 }
 
