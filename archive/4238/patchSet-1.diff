commit 737382f03554b6593b125175dd3878a58c906a06 (refs/changes/38/4238/1)
Author: Rui Loura <rui@joyent.com>
Date:   2018-06-15T19:41:37+00:00 (1 year, 4 months ago)
    
    TRITON-508 config-agent autometadata should contain an array of IPs for
    each nic
    TRITON-509 config-agent should make use of admin_tag

diff --git a/agent.js b/agent.js
index 0efe864..39129db 100644
--- a/agent.js
+++ b/agent.js
@@ -126,19 +126,44 @@ function startPeriodicRefresh() {
 	setTimeout(checkOnce, delay);
 }
 
-function setNicTag(nic_tag, ip) {
+/*
+ * There is one mechanism of override for all _IP's and two mechanisms of
+ * override for the ADMIN_IP.
+ *
+ * If the nic tag is of the form <name>_RACK<number>, it will override any
+ * similarly named nic tag (e.g. "MANTA_RACK##" will override "MANTA" nic
+ * tags).
+ *
+ * Regardless of the _RACK override above, if the 'admin_tag' value is
+ * specified, and it matches the provided nic_tag, then the ADMIN_IP will be
+ * set to that nic's IP, and override all other values.
+ */
+function setNicTag(nic_tag, ip, admin_tag) {
 	var NIC_TAG = nic_tag.toUpperCase();
+	var tag = NIC_TAG;
+	var ips_key;
 
-	autoMetadata[NIC_TAG + '_IP'] = ip;
+	/* _RACK override */
+	if (NIC_TAG.search(/^[A-Z]+_RACK\d+$/) === 0 || NIC_TAG) {
+		tag = NIC_TAG.split('_')[0];
+	}
 
-	/*
-	 * If there is a nic tag of the form <name>_RACK<number>,
-	 * it will override any similarly named nic tag (e.g.
-	 * "MANTA_RACK##" will override "MANTA" nic tags).
-	 */
-	if (NIC_TAG.search(/^[A-Z]+_RACK\d+$/) === 0) {
-		NIC_TAG = NIC_TAG.split('_')[0];
-		autoMetadata[NIC_TAG + '_IP'] = ip;
+	/* Highest priority override for ADMIN_IP only. */
+	if (admin_tag && nic_tag === admin_tag) {
+		tag = 'ADMIN';
+	}
+
+	ip = ip.split('/')[0];
+
+	autoMetadata[tag + '_IP'] = ip;
+
+	ips_key = tag + '_IPS';
+	if (!autoMetadata[ips_key]) {
+		autoMetadata[ips_key] = [];
+	}
+
+	if (autoMetadata[ips_key].indexOf(ip) === -1) {
+		autoMetadata[ips_key].push(ip);
 	}
 }
 
@@ -162,6 +187,11 @@ function processGZNicTags(sysinfo) {
 	var pnics = sysinfo['Network Interfaces'];
 	var vnics = sysinfo['Virtual Network Interfaces'];
 	var ptags = {};
+	var admin_tag = 'admin';
+
+	if (sysinfo['Admin NIC Tag']) {
+		admin_tag = sysinfo['Admin NIC Tag'];
+	}
 
 	jsprim.forEachKey(pnics, function (name, pnic) {
 		pnic['NIC Names'].forEach(function (nic_tag) {
@@ -171,8 +201,11 @@ function processGZNicTags(sysinfo) {
 				return;
 			}
 
-			if (nic_tag === 'admin' || nic_tag.indexOf('admin_') === 0) {
-				setNicTag(nic_tag, pnic.ip4addr);
+			/*
+			 * XXX: Why only call setNicTag() conditionally?
+			 */
+			if (nic_tag === admin_tag || nic_tag.indexOf('admin_') === 0) {
+				setNicTag(nic_tag, pnic.ip4addr, admin_tag);
 			}
 		});
 	});
@@ -196,27 +229,16 @@ function processGZNicTags(sysinfo) {
 			return;
 		}
 
-		setNicTag(m[1], vnic.ip4addr);
+		setNicTag(m[1], vnic.ip4addr, admin_tag);
 	});
 }
 
-function setGlobalZoneAutoMetadata(callback) {
-	util.getSysinfo({ log: log }, function (sErr, sysinfo) {
-		if (sErr) {
-			callback(sErr);
-			return;
-		}
-
-		autoMetadata.SERVER_UUID = sysinfo['UUID'];
-		autoMetadata.DATACENTER_NAME = sysinfo['Datacenter Name'];
-
-		processGZNicTags(sysinfo);
+function setInZoneAutoMetadata(sysinfo, callback) {
+	var admin_tag = 'admin';
 
-		callback();
-	});
-}
-
-function setInZoneAutoMetadata(callback) {
+	if (sysinfo['Admin NIC Tag']) {
+		admin_tag = sysinfo['Admin NIC Tag'];
+	}
 	vasync.pipeline({
 		input: null,
 		funcs: [
@@ -266,8 +288,16 @@ function setInZoneAutoMetadata(callback) {
 						if (i === 0) {
 							autoMetadata.PRIMARY_IP = nic.ip;
 						}
+
+						/*
+						 * Loop through the 'ips' first so that the address in
+						 * 'ip' overrides any previously entered values.
+						 */
 						if (nic.nic_tag) {
-							setNicTag(nic.nic_tag, nic.ip);
+							nic.ips.forEach(function (ip) {
+								setNicTag(nic.nic_tag, ip, admin_tag);
+							});
+							setNicTag(nic.nic_tag, nic.ip, admin_tag);
 						}
 					}
 
@@ -304,11 +334,22 @@ async.waterfall([
 		});
 	},
 
-	function gatherAutoMetadata(cb) {
+	function getSysinfo(cb) {
+		util.getSysinfo({ log: log }, function (sErr, sysinfo) {
+			if (sErr) {
+				cb(sErr);
+				return;
+			}
+			cb(null, sysinfo);
+		});
+	},
+
+	function gatherAutoMetadata(sysinfo, cb) {
 		if (zonename === 'global') {
-			setGlobalZoneAutoMetadata(cb);
+			processGZNicTags(sysinfo);
+			cb();
 		} else {
-			setInZoneAutoMetadata(cb);
+			setInZoneAutoMetadata(sysinfo, cb);
 		}
 	},
 
