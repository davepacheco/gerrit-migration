commit 6e1bda827b61cf8fc7c27732e1d09a637f9de28e
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2019-04-11T15:56:31+00:00 (6 months ago)
    
    TRITON-1392 Invalid params test fails when in test mode due to server_uuid

diff --git a/test/machines.test.js b/test/machines.test.js
index 38c52e85a..00e6806b1 100644
--- a/test/machines.test.js
+++ b/test/machines.test.js
@@ -585,16 +585,34 @@ test('Create machine with invalid parameters', function (t) {
         image: IMAGE_UUID,
         package: SDC_256.name,
         // Underscore will make name invalid:
-        name: '_a' + uuid().substr(0, 7),
-        // Obviously, not a valid UUID, but we don't want to notify customers
-        // about this:
-        server_uuid: '123456'
+        name: '_a' + uuid().substr(0, 7)
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
         t.ok(err, 'POST Create machine with invalid parameters');
-        t.ok(/name/.test(err.message));
-        t.notOk(/server/.test(err.message));
+        t.ok(err.message, 'Invalid name');
+        t.end();
+    });
+});
+
+
+test('Create machine with invalid server_uuid parameter', function (t) {
+    if (!common.getCfg().test) {
+        t.ok(true, 'server_uuid ignored when not in test mode. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: IMAGE_UUID,
+        package: SDC_256.name,
+        name: uuid().substr(0, 7),
+        server_uuid: '123456'
+    };
+
+    CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
+        t.ok(err, 'POST Create machine with invalid server_uuid parameter');
+        t.equal(err.message, 'Invalid server_uuid');
         t.end();
     });
 });
@@ -1903,6 +1921,7 @@ test('Create Machine using "params.bootrom" without "bhyve"', function (t) {
     });
 });
 
+
 test('teardown', function (t) {
     common.deletePackage(CLIENT, SDC_256, function (err) {
         common.deletePackage(CLIENT, SDC_256_INACTIVE, function (err2) {
