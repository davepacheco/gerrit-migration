commit e371d2acaac2c255d803a278c4118e01b567d2ed (refs/changes/92/3892/4)
Author: Robert Mustacchi <rm@joyent.com>
Date:   2018-05-29T17:12:40+00:00 (1 year, 4 months ago)
    
    OS-6914 Implement CPU autoreplace based on Intel PPIN

diff --git a/usr/src/lib/fm/topo/modules/i86pc/chip/chip.c b/usr/src/lib/fm/topo/modules/i86pc/chip/chip.c
index b293cadf78..dd18ca5e33 100644
--- a/usr/src/lib/fm/topo/modules/i86pc/chip/chip.c
+++ b/usr/src/lib/fm/topo/modules/i86pc/chip/chip.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #include <unistd.h>
@@ -86,6 +87,9 @@ static const topo_method_t chip_methods[] = {
 	    TOPO_STABILITY_INTERNAL, a4fplus_chip_label},
 	{ FSB2_CHIP_LBL, "Property method", 0,
 	    TOPO_STABILITY_INTERNAL, fsb2_chip_label},
+	{ TOPO_METH_REPLACED, TOPO_METH_REPLACED_DESC,
+	    TOPO_METH_REPLACED_VERSION, TOPO_STABILITY_INTERNAL,
+	    chip_fmri_replaced },
 	{ NULL }
 };
 
@@ -143,7 +147,7 @@ is_xpv(void)
 
 static tnode_t *
 create_node(topo_mod_t *mod, tnode_t *pnode, nvlist_t *auth, char *name,
-    topo_instance_t inst, uint16_t smbios_id)
+    topo_instance_t inst, nvlist_t *cpu, uint16_t smbios_id)
 {
 	nvlist_t *fmri;
 	tnode_t *cnode;
@@ -179,6 +183,17 @@ create_node(topo_mod_t *mod, tnode_t *pnode, nvlist_t *auth, char *name,
 		topo_mod_strfree(mod, (char *)serial);
 		topo_mod_strfree(mod, (char *)part);
 		topo_mod_strfree(mod, (char *)rev);
+	} else {
+		char *serial = NULL;
+
+		if (nvlist_lookup_string(cpu, FM_PHYSCPU_INFO_CHIP_IDENTSTR,
+		    &serial) == 0) {
+			if (nvlist_add_string(fmri, FM_FMRI_HC_SERIAL_ID,
+			    serial) != 0) {
+				whinge(mod, NULL,
+				    "create_node: nvlist_add_string failed\n");
+			}
+		}
 	}
 
 	cnode = topo_node_bind(mod, pnode, name, inst, fmri);
@@ -218,7 +233,7 @@ create_strand(topo_mod_t *mod, tnode_t *pnode, nvlist_t *cpu,
 	}
 
 	if ((strand = create_node(mod, pnode, auth, STRAND_NODE_NAME,
-	    strandid, chip_smbiosid)) == NULL)
+	    strandid, cpu, chip_smbiosid)) == NULL)
 		return (-1);
 
 	/*
@@ -339,7 +354,7 @@ create_core(topo_mod_t *mod, tnode_t *pnode, nvlist_t *cpu,
 	}
 	if ((core = topo_node_lookup(pnode, CORE_NODE_NAME, coreid)) == NULL) {
 		if ((core = create_node(mod, pnode, auth, CORE_NODE_NAME,
-		    coreid, chip_smbiosid)) == NULL)
+		    coreid, cpu, chip_smbiosid)) == NULL)
 			return (-1);
 
 		/*
@@ -508,7 +523,7 @@ create_chip(topo_mod_t *mod, tnode_t *pnode, topo_instance_t min,
 
 	if ((chip = topo_node_lookup(pnode, CHIP_NODE_NAME, chipid)) == NULL) {
 		if ((chip = create_node(mod, pnode, auth, CHIP_NODE_NAME,
-		    chipid, smbios_id)) == NULL)
+		    chipid, cpu, smbios_id)) == NULL)
 			return (-1);
 		/*
 		 * Do not register XML map methods if SMBIOS can provide
diff --git a/usr/src/lib/fm/topo/modules/i86pc/chip/chip.h b/usr/src/lib/fm/topo/modules/i86pc/chip/chip.h
index 503e3c4ede..a07b92380d 100644
--- a/usr/src/lib/fm/topo/modules/i86pc/chip/chip.h
+++ b/usr/src/lib/fm/topo/modules/i86pc/chip/chip.h
@@ -20,6 +20,7 @@
  */
 /*
  * Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #ifndef _CHIP_H
@@ -182,6 +183,8 @@ extern int ntv_page_unretire(topo_mod_t *, tnode_t *, topo_version_t,
     nvlist_t *, nvlist_t **);
 extern int ntv_page_unusable(topo_mod_t *, tnode_t *, topo_version_t,
     nvlist_t *, nvlist_t **);
+extern int chip_fmri_replaced(topo_mod_t *, tnode_t *, topo_version_t,
+    nvlist_t *, nvlist_t **);
 
 extern int mem_asru_create(topo_mod_t *, nvlist_t *, nvlist_t **);
 
diff --git a/usr/src/lib/fm/topo/modules/i86pc/chip/chip_subr.c b/usr/src/lib/fm/topo/modules/i86pc/chip/chip_subr.c
index 3725a63a12..93c308a281 100644
--- a/usr/src/lib/fm/topo/modules/i86pc/chip/chip_subr.c
+++ b/usr/src/lib/fm/topo/modules/i86pc/chip/chip_subr.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -812,3 +813,54 @@ ntv_page_unusable(topo_mod_t *mod, tnode_t *node, topo_version_t version,
 	return (set_retnvl(mod, out, TOPO_METH_UNUSABLE_RET,
 	    rc == FMD_AGENT_RETIRE_DONE ? 1 : 0));
 }
+
+/*
+ * Determine whether or not we believe a chip has been replaced. While it's
+ * tempting to just do a straight up comparison of the FMRI and its serial
+ * number, things are not that straightforward.
+ *
+ * The presence of a serial number on the CPU is not always guaranteed. It is
+ * possible that systems firmware can hide the information required to generate
+ * a synthesized serial number or that it is strictly not present. As such, we
+ * will only declare something replaced when both the old and current resource
+ * have a serial number present. If it is missing for whatever reason, then we
+ * cannot assume anything about a replacement having occurred.
+ *
+ * This logic applies regardless of whether or not we have an FM-aware SMBIOS.
+ */
+int
+chip_fmri_replaced(topo_mod_t *mod, tnode_t *node, topo_version_t version,
+    nvlist_t *in, nvlist_t **out)
+{
+	nvlist_t *rsrc = NULL;
+	int err, ret;
+	char *old_serial, *new_serial;
+
+	if (version > TOPO_METH_REPLACED_VERSION)
+		return (topo_mod_seterrno(mod, EMOD_VER_NEW));
+
+	if (topo_node_resource(node, &rsrc, &err) == -1) {
+		return (topo_mod_seterrno(mod, err));
+	}
+
+	if (nvlist_lookup_string(rsrc, FM_FMRI_HC_SERIAL_ID,
+	    &new_serial) != 0) {
+		ret = FMD_OBJ_STATE_UNKNOWN;
+		goto out;
+	}
+
+	if (nvlist_lookup_string(in, FM_FMRI_HC_SERIAL_ID, &old_serial) != 0) {
+		ret = FMD_OBJ_STATE_UNKNOWN;
+		goto out;
+	}
+
+	if (strcmp(old_serial, new_serial) == 0) {
+		ret = FMD_OBJ_STATE_STILL_PRESENT;
+	} else {
+		ret = FMD_OBJ_STATE_REPLACED;
+	}
+
+out:
+	nvlist_free(rsrc);
+	return (set_retnvl(mod, out, TOPO_METH_REPLACED_RET, ret));
+}
diff --git a/usr/src/uts/common/sys/devfm.h b/usr/src/uts/common/sys/devfm.h
index c1bd2ac3a7..1fcfeebcb0 100644
--- a/usr/src/uts/common/sys/devfm.h
+++ b/usr/src/uts/common/sys/devfm.h
@@ -21,6 +21,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #ifndef	_SYS_DEVFM_H
@@ -120,6 +121,7 @@ typedef struct fm_ioc_data32 {
 #define	FM_PHYSCPU_INFO_CHIP_REV	"chip_rev"
 #define	FM_PHYSCPU_INFO_SOCKET_TYPE	"socket_type"
 #define	FM_PHYSCPU_INFO_CPU_ID		"cpuid"
+#define	FM_PHYSCPU_INFO_CHIP_IDENTSTR	"chip_identstr"
 
 #ifdef	__cplusplus
 }
diff --git a/usr/src/uts/i86pc/cpu/generic_cpu/gcpu.h b/usr/src/uts/i86pc/cpu/generic_cpu/gcpu.h
index 316fb89334..50e62c2303 100644
--- a/usr/src/uts/i86pc/cpu/generic_cpu/gcpu.h
+++ b/usr/src/uts/i86pc/cpu/generic_cpu/gcpu.h
@@ -193,6 +193,7 @@ struct gcpu_chipshared {
 	kmutex_t gcpus_poll_lock;	/* serialize pollers on the same chip */
 	uint32_t gcpus_actv_banks;	/* MCA bank numbers active on chip */
 	volatile uint32_t gcpus_actv_cnt; /* active cpu count in this chip */
+	char *gcpus_ident;		/* ident string, if available */
 };
 
 struct gcpu_data {
diff --git a/usr/src/uts/i86pc/cpu/generic_cpu/gcpu_main.c b/usr/src/uts/i86pc/cpu/generic_cpu/gcpu_main.c
index c321d27501..18462971fb 100644
--- a/usr/src/uts/i86pc/cpu/generic_cpu/gcpu_main.c
+++ b/usr/src/uts/i86pc/cpu/generic_cpu/gcpu_main.c
@@ -43,6 +43,7 @@
 #include <sys/kmem.h>
 #include <sys/modctl.h>
 #include <sys/pghw.h>
+#include <sys/x86_archext.h>
 
 #include "gcpu.h"
 
@@ -53,6 +54,115 @@ int gcpu_disable = 0;
 
 #define	GCPU_MAX_CHIPID		32
 static struct gcpu_chipshared *gcpu_shared[GCPU_MAX_CHIPID];
+#ifdef	DEBUG
+int gcpu_id_disable = 0;
+static const char *gcpu_id_override[GCPU_MAX_CHIPID] = { NULL };
+#endif
+
+#ifndef	__xpv
+/*
+ * This should probably be delegated to a CPU specific module. However, as those
+ * haven't been developed as actively for recent CPUs, we should revisit this
+ * when we do have it and move this out of gcpu.
+ *
+ * This method is only supported on Intel Xeon platforms. It relies on a
+ * combination of the PPIN and the cpuid signature. Both are required to form
+ * the synthetic ID. This ID is preceded with iv0-INTC to represent that this is
+ * an Intel synthetic ID. The iv0 is the illumos version zero of the ID for
+ * Intel. If we have a new scheme for a new generation of processors, then that
+ * should rev the version field, otherwise for a given processor, this synthetic
+ * ID should not change. For more information on PPIN and these MSRS, see the
+ * relevant processor external design specification.
+ */
+static char *
+gcpu_init_ident_intc(cmi_hdl_t hdl)
+{
+	uint64_t msr;
+
+	/*
+	 * This list should be extended as new Intel Xeon family processors come
+	 * out.
+	 */
+	switch (cmi_hdl_model(hdl)) {
+	case INTC_MODEL_IVYBRIDGE_XEON:
+	case INTC_MODEL_HASWELL_XEON:
+	case INTC_MODEL_BROADWELL_XEON:
+	case INTC_MODEL_BROADWELL_XEON_D:
+	case INTC_MODEL_SKYLAKE_XEON:
+		break;
+	default:
+		return (NULL);
+	}
+
+	if (cmi_hdl_rdmsr(hdl, MSR_PLATFORM_INFO, &msr) != CMI_SUCCESS) {
+		return (NULL);
+	}
+
+	if ((msr & MSR_PLATFORM_INFO_PPIN) == 0) {
+		return (NULL);
+	}
+
+	if (cmi_hdl_rdmsr(hdl, MSR_PPIN_CTL, &msr) != CMI_SUCCESS) {
+		return (NULL);
+	}
+
+	if ((msr & MSR_PPIN_CTL_ENABLED) == 0) {
+		if ((msr & MSR_PPIN_CTL_LOCKED) != 0) {
+			return (NULL);
+		}
+
+		if (cmi_hdl_wrmsr(hdl, MSR_PPIN_CTL, MSR_PPIN_CTL_ENABLED) !=
+		    CMI_SUCCESS) {
+			return (NULL);
+		}
+	}
+
+	if (cmi_hdl_rdmsr(hdl, MSR_PPIN, &msr) != CMI_SUCCESS) {
+		return (NULL);
+	}
+
+	/*
+	 * Now that we've read data, lock the PPIN. Don't worry about success or
+	 * failure of this part, as we will have gotten everything that we need.
+	 * It is possible that it locked open, for example.
+	 */
+	(void) cmi_hdl_wrmsr(hdl, MSR_PPIN_CTL, MSR_PPIN_CTL_LOCKED);
+
+	return (kmem_asprintf("iv0-INTC-%x-%llx", cmi_hdl_chipsig(hdl), msr));
+}
+#endif	/* __xpv */
+
+static void
+gcpu_init_ident(cmi_hdl_t hdl, struct gcpu_chipshared *sp)
+{
+#ifdef	DEBUG
+	uint_t chipid;
+
+	/*
+	 * On debug, allow a developer to override the string to more
+	 * easily test CPU autoreplace without needing to physically
+	 * replace a CPU.
+	 */
+	if (gcpu_id_disable != 0) {
+		return;
+	}
+
+	chipid = cmi_hdl_chipid(hdl);
+	if (gcpu_id_override[chipid] != NULL) {
+		sp->gcpus_ident = strdup(gcpu_id_override[chipid]);
+		return;
+	}
+#endif
+
+#ifndef __xpv
+	switch (cmi_hdl_vendor(hdl)) {
+	case X86_VENDOR_Intel:
+		sp->gcpus_ident = gcpu_init_ident_intc(hdl);
+	default:
+		break;
+	}
+#endif	/* __xpv */
+}
 
 /*
  * Our cmi_init entry point, called during startup of each cpu instance.
@@ -91,6 +201,8 @@ gcpu_init(cmi_hdl_t hdl, void **datap)
 			mutex_destroy(&sp->gcpus_poll_lock);
 			kmem_free(sp, sizeof (struct gcpu_chipshared));
 			sp = osp;
+		} else {
+			gcpu_init_ident(hdl, sp);
 		}
 	}
 
@@ -175,6 +287,26 @@ gcpu_post_mpstartup(cmi_hdl_t hdl)
 #endif
 }
 
+const char *
+gcpu_ident(cmi_hdl_t hdl)
+{
+	uint_t chipid;
+	struct gcpu_chipshared *sp;
+
+	if (gcpu_disable)
+		return (NULL);
+
+	chipid = cmi_hdl_chipid(hdl);
+	if (chipid >= GCPU_MAX_CHIPID)
+		return (NULL);
+
+	if (cmi_hdl_getcmidata(hdl) == NULL)
+		return (NULL);
+
+	sp = gcpu_shared[cmi_hdl_chipid(hdl)];
+	return (sp->gcpus_ident);
+}
+
 #ifdef __xpv
 #define	GCPU_OP(ntvop, xpvop)	xpvop
 #else
@@ -196,6 +328,7 @@ const cmi_ops_t _cmi_ops = {
 	GCPU_OP(gcpu_hdl_poke, NULL),		/* cmi_hdl_poke */
 	gcpu_fini,				/* cmi_fini */
 	GCPU_OP(NULL, gcpu_xpv_panic_callback),	/* cmi_panic_callback */
+	gcpu_ident				/* cmi_ident */
 };
 
 static struct modlcpu modlcpu = {
diff --git a/usr/src/uts/i86pc/os/cmi.c b/usr/src/uts/i86pc/os/cmi.c
index 304cf65d9f..b3d52c1726 100644
--- a/usr/src/uts/i86pc/os/cmi.c
+++ b/usr/src/uts/i86pc/os/cmi.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -960,3 +961,15 @@ cmi_panic_callback(void)
 
 	cmi_hdl_rele(hdl);
 }
+
+
+const char *
+cmi_hdl_chipident(cmi_hdl_t hdl)
+{
+	cmi_t *cmi = cmi_hdl_getcmi(hdl);
+
+	if (!CMI_OP_PRESENT(cmi, cmi_ident))
+		return (NULL);
+
+	return (CMI_OPS(cmi)->cmi_ident(hdl));
+}
diff --git a/usr/src/uts/i86pc/os/cmi_hw.c b/usr/src/uts/i86pc/os/cmi_hw.c
index be119e7046..531be4ce47 100644
--- a/usr/src/uts/i86pc/os/cmi_hw.c
+++ b/usr/src/uts/i86pc/os/cmi_hw.c
@@ -21,6 +21,7 @@
 
 /*
  * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 /*
  * Copyright (c) 2010, Intel Corporation.
@@ -121,6 +122,7 @@ struct cmi_hdl_ops {
 	const char *(*cmio_chiprevstr)(cmi_hdl_impl_t *);
 	uint32_t (*cmio_getsockettype)(cmi_hdl_impl_t *);
 	const char *(*cmio_getsocketstr)(cmi_hdl_impl_t *);
+	uint_t (*cmio_chipsig)(cmi_hdl_impl_t *);
 
 	id_t (*cmio_logical_id)(cmi_hdl_impl_t *);
 	/*
@@ -684,6 +686,12 @@ ntv_getsocketstr(cmi_hdl_impl_t *hdl)
 	return (cpuid_getsocketstr(HDLPRIV(hdl)));
 }
 
+static uint_t
+ntv_chipsig(cmi_hdl_impl_t *hdl)
+{
+	return (cpuid_getsig(HDLPRIV(hdl)));
+}
+
 static id_t
 ntv_logical_id(cmi_hdl_impl_t *hdl)
 {
@@ -997,6 +1005,12 @@ xpv_getsocketstr(cmi_hdl_impl_t *hdl)
 	    xpv_model(hdl), xpv_stepping(hdl)));
 }
 
+static uint_t
+xpv_chipsig(cmi_hdl_impl_t *hdl)
+{
+	return (0);
+}
+
 static id_t
 xpv_logical_id(cmi_hdl_impl_t *hdl)
 {
@@ -1595,6 +1609,7 @@ cmi_hdl_class(cmi_hdl_t ophdl)
 		    cmio_##what(IMPLHDL(ophdl)));		\
 	}
 
+/* BEGIN CSTYLED */
 CMI_HDL_OPFUNC(vendor, uint_t)
 CMI_HDL_OPFUNC(vendorstr, const char *)
 CMI_HDL_OPFUNC(family, uint_t)
@@ -1614,6 +1629,8 @@ CMI_HDL_OPFUNC(logical_id, id_t)
 CMI_HDL_OPFUNC(smbiosid, uint16_t)
 CMI_HDL_OPFUNC(smb_chipid, uint_t)
 CMI_HDL_OPFUNC(smb_bboard, nvlist_t *)
+CMI_HDL_OPFUNC(chipsig, uint_t)
+/* END CSTYLED */
 
 boolean_t
 cmi_hdl_is_cmt(cmi_hdl_t ophdl)
@@ -1990,6 +2007,7 @@ static const struct cmi_hdl_ops cmi_hdl_ops = {
 	xpv_chiprevstr,		/* cmio_chiprevstr */
 	xpv_getsockettype,	/* cmio_getsockettype */
 	xpv_getsocketstr,	/* cmio_getsocketstr */
+	xpv_chipsig,		/* cmio_chipsig */
 	xpv_logical_id,		/* cmio_logical_id */
 	NULL,			/* cmio_getcr4 */
 	NULL,			/* cmio_setcr4 */
@@ -2022,6 +2040,7 @@ static const struct cmi_hdl_ops cmi_hdl_ops = {
 	ntv_chiprevstr,		/* cmio_chiprevstr */
 	ntv_getsockettype,	/* cmio_getsockettype */
 	ntv_getsocketstr,	/* cmio_getsocketstr */
+	ntv_chipsig,		/* cmio_chipsig */
 	ntv_logical_id,		/* cmio_logical_id */
 	ntv_getcr4,		/* cmio_getcr4 */
 	ntv_setcr4,		/* cmio_setcr4 */
diff --git a/usr/src/uts/i86pc/sys/cpu_module_impl.h b/usr/src/uts/i86pc/sys/cpu_module_impl.h
index 425d819963..6e2de12828 100644
--- a/usr/src/uts/i86pc/sys/cpu_module_impl.h
+++ b/usr/src/uts/i86pc/sys/cpu_module_impl.h
@@ -22,6 +22,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #ifndef _SYS_CPU_MODULE_IMPL_H
@@ -64,6 +65,7 @@ typedef struct cmi_ops {
 	void (*cmi_hdl_poke)(cmi_hdl_t);
 	void (*cmi_fini)(cmi_hdl_t);
 	void (*cmi_panic_callback)(void);
+	const char *(*cmi_ident)(cmi_hdl_t);
 } cmi_ops_t;
 
 /*
diff --git a/usr/src/uts/intel/io/devfm_machdep.c b/usr/src/uts/intel/io/devfm_machdep.c
index 9209e7a012..1f12e323a2 100644
--- a/usr/src/uts/intel/io/devfm_machdep.c
+++ b/usr/src/uts/intel/io/devfm_machdep.c
@@ -21,6 +21,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #include <sys/stat.h>
@@ -150,6 +151,7 @@ populate_cpu(nvlist_t **nvlp, cmi_hdl_t hdl)
 {
 	uint_t	fm_chipid;
 	uint16_t smbios_id;
+	const char *idstr;
 
 	(void) nvlist_alloc(nvlp, NV_UNIQUE_NAME, KM_SLEEP);
 
@@ -203,6 +205,16 @@ populate_cpu(nvlist_t **nvlp, cmi_hdl_t hdl)
 	    FM_PHYSCPU_INFO_CPU_ID, DATA_TYPE_INT32,
 	    (int32_t)cmi_hdl_logical_id(hdl),
 	    NULL);
+
+	/*
+	 * Do this separately so that way if there is no ident string we do not
+	 * trigger an error.
+	 */
+	if ((idstr = cmi_hdl_chipident(hdl)) != NULL) {
+		fm_payload_set(*nvlp,
+		    FM_PHYSCPU_INFO_CHIP_IDENTSTR, DATA_TYPE_STRING, idstr,
+		    NULL);
+	}
 }
 
 /*ARGSUSED*/
diff --git a/usr/src/uts/intel/sys/cpu_module.h b/usr/src/uts/intel/sys/cpu_module.h
index 8d801b07f5..c227acacd2 100644
--- a/usr/src/uts/intel/sys/cpu_module.h
+++ b/usr/src/uts/intel/sys/cpu_module.h
@@ -22,6 +22,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #ifndef _SYS_CPU_MODULE_H
@@ -163,6 +164,8 @@ extern id_t cmi_hdl_logical_id(cmi_hdl_t);
 extern uint16_t cmi_hdl_smbiosid(cmi_hdl_t);
 extern uint_t cmi_hdl_smb_chipid(cmi_hdl_t);
 extern nvlist_t *cmi_hdl_smb_bboard(cmi_hdl_t);
+extern uint_t cmi_hdl_chipsig(cmi_hdl_t);
+extern const char *cmi_hdl_chipident(cmi_hdl_t);
 
 extern int cmi_hdl_online(cmi_hdl_t, int, int *);
 
diff --git a/usr/src/uts/intel/sys/x86_archext.h b/usr/src/uts/intel/sys/x86_archext.h
index bfd6f14289..0c942b3ac1 100644
--- a/usr/src/uts/intel/sys/x86_archext.h
+++ b/usr/src/uts/intel/sys/x86_archext.h
@@ -334,6 +334,18 @@ extern "C" {
 #define	MSR_PRP4_LBSTK_TO_14	0x6ce
 #define	MSR_PRP4_LBSTK_TO_15	0x6cf
 
+/*
+ * General Xeon based MSRs
+ */
+#define	MSR_PPIN_CTL		0x04e
+#define	MSR_PPIN		0x04f
+#define	MSR_PLATFORM_INFO	0x0ce
+
+#define	MSR_PLATFORM_INFO_PPIN	(1 << 23)
+#define	MSR_PPIN_CTL_MASK	0x03
+#define	MSR_PPIN_CTL_LOCKED	0x01
+#define	MSR_PPIN_CTL_ENABLED	0x02
+
 #define	MCI_CTL_VALUE		0xffffffff
 
 #define	MTRR_TYPE_UC		0
@@ -669,6 +681,19 @@ extern "C" {
 #define	X86_SOCKET_FS1R2	_X86_SOCKET_MKVAL(X86_VENDOR_AMD, 0x100000)
 #define	X86_SOCKET_FM2		_X86_SOCKET_MKVAL(X86_VENDOR_AMD, 0x200000)
 
+
+/*
+ * Definitions for Intel processor models. Note, these model values can overlap
+ * in a given family. Processor models are added here on an as needed basis. The
+ * Xeon extension here is to refer to what has been called the EP/EX lines or
+ * E5/E7, generally multi-socket capable processors.
+ */
+#define	INTC_MODEL_IVYBRIDGE_XEON	0x3E
+#define	INTC_MODEL_HASWELL_XEON		0x3F
+#define	INTC_MODEL_BROADWELL_XEON	0x4F
+#define	INTC_MODEL_BROADWELL_XEON_D	0x56
+#define	INTC_MODEL_SKYLAKE_XEON		0x55
+
 /*
  * xgetbv/xsetbv support
  * See section 13.3 in vol. 1 of the Intel devlopers manual.
