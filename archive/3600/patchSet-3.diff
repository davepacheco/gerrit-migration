commit 7d2c1e173580b920d83260a419e1111bec35a9c1 (refs/changes/00/3600/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-03-13T20:46:01+00:00 (1 year, 7 months ago)
    
    TRITON-77 Add support for ESP and AH protocols in firewall rules

diff --git a/src/fw/test/integration/examples.test.js b/src/fw/test/integration/examples.test.js
index da4543e5..449f2fbd 100644
--- a/src/fw/test/integration/examples.test.js
+++ b/src/fw/test/integration/examples.test.js
@@ -8,6 +8,7 @@
 var async = require('async');
 var exec = require('child_process').exec;
 var fs = require('fs');
+var mod_fw = require('../lib/fw');
 var mod_vm = require('../lib/vm');
 var path = require('path');
 var util = require('util');
@@ -82,48 +83,6 @@ function addRulesAndRVMs(stdout) {
 }
 
 
-/**
- * Test whether the ipf rules show up in 'fwadm status' for a VM
- */
-function fwStatsContain(t, uuid, inLines, inDesc, cb) {
-    var cmd = 'fwadm stats ' + uuid;
-    var desc = inDesc + ': ';
-    // clone the input:
-    var lines = inLines.slice();
-
-    exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err, desc + 'error running: ' + cmd);
-        t.equal(stderr, '', desc + 'stderr: ' + cmd);
-
-        var rules = [];
-
-        stdout.split('\n').forEach(function (line) {
-            if (line === '') {
-                return;
-            }
-
-            var parts = line.split(/\s+/g);
-            parts.shift();
-            var rule = parts.join(' ');
-            var idx = lines.indexOf(rule);
-            if (idx !== -1) {
-                t.ok(true, desc + 'found rule: ' + rule);
-                lines.splice(idx, 1);
-            }
-
-            rules.push(rule);
-        });
-
-        t.deepEqual(lines, [], desc + 'found all rules');
-        if (lines.length !== 0) {
-            t.deepEqual(rules, [], desc + 'rules found');
-        }
-
-        return cb();
-    });
-}
-
-
 
 // --- Setup
 
@@ -307,7 +266,7 @@ exports['vmadm'] = {
     },
 
     'stats after vmadm_vm1': function (t) {
-        fwStatsContain(t, VMS[0], [
+        mod_fw.statsContain(t, VMS[0], [
             'block out quick proto tcp from any to any port = smtp' + KF
         ], 'smtp block rule applied', function () {
             return t.done();
@@ -340,7 +299,7 @@ exports['vmadm'] = {
     },
 
     'stats after vmadm_cmd1': function (t) {
-        fwStatsContain(t, VMS[0], [
+        mod_fw.statsContain(t, VMS[0], [
             'block out quick proto tcp from any to any port = smtp' + KF,
             'pass in quick proto tcp from any to any port = www' + KS + KF,
             'pass in quick proto tcp from any to any port = https' + KS + KF
@@ -389,7 +348,7 @@ exports['vmadm'] = {
     },
 
     'stats after start': function (t) {
-        fwStatsContain(t, VMS[0], [
+        mod_fw.statsContain(t, VMS[0], [
             'block out quick proto tcp from any to any port = smtp' + KF,
             'pass in quick proto tcp from any to any port = www' + KS + KF,
             'pass in quick proto tcp from any to any port = https' + KS + KF
diff --git a/src/fw/test/integration/ipsec.test.js b/src/fw/test/integration/ipsec.test.js
new file mode 100644
index 00000000..38875ba9
--- /dev/null
+++ b/src/fw/test/integration/ipsec.test.js
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ *
+ * Integration tests for rules that allow IPsec traffic into an instance.
+ */
+
+var mod_cp = require('child_process');
+var mod_fw = require('../lib/fw');
+var mod_vm = require('../lib/vm');
+var util = require('util');
+var uuid = require('uuid');
+
+
+// --- Globals
+
+var KS = ' keep state';
+var KF = ' keep frags';
+
+var d = {
+    owner_uuid: uuid.v4()
+};
+
+
+// --- Tests
+
+exports['create vm and rules'] = {
+    'create': function (t) {
+        mod_vm.create(t, {
+            params: {
+                owner_uuid: d.owner_uuid,
+                firewall_enabled: true,
+                image_uuid: mod_vm.images.smartos,
+                nics: [
+                    {
+                        nic_tag: 'admin',
+                        ip: '10.4.0.30',
+                        netmask: '255.255.255.0'
+                    }
+                ]
+            },
+            partialExp: {
+                firewall_enabled: true
+            }
+        });
+    },
+
+    'fw status after create': function (t) {
+        d.vm = mod_vm.lastCreated();
+        t.ok(d.vm, 'have last created VM');
+
+        mod_fw.status(t, {
+            uuid: d.vm.uuid,
+            partialExp: {
+                running: true
+            }
+        });
+    },
+
+    'add rules': function (t) {
+        var child = mod_cp.execFile('fwadm', [ 'add' ], {
+            stdio: 'pipe'
+        }, function (err, stdout, stderr) {
+            t.ifError(err, '"fwadm add" error');
+            if (err !== null) {
+                t.equal(err.code, 0, '"fwadm add" exited non-zero');
+                t.equal(stderr, '', '"fwadm add" stderr');
+                t.equal(stdout, '', '"fwadm add" stdout');
+            }
+            t.done();
+        });
+
+        child.stdin.write(JSON.stringify({
+            rules: [
+                {
+                    owner_uuid: d.owner_uuid,
+                    rule: util.format('FROM any TO vm %s ALLOW ah', d.vm.uuid),
+                    enabled: true
+                },
+                {
+                    owner_uuid: d.owner_uuid,
+                    rule: util.format('FROM any TO vm %s ALLOW esp', d.vm.uuid),
+                    enabled: true
+                },
+                {
+                    owner_uuid: d.owner_uuid,
+                    rule: util.format('FROM any TO vm %s ALLOW '
+                        + 'udp (PORT 500 AND PORT 4500)', d.vm.uuid),
+                    enabled: true
+                }
+            ]
+        }));
+
+        child.stdin.end();
+    },
+
+    'check ipf rules': function (t) {
+        mod_fw.statsContain(t, d.vm.uuid, [
+            'pass in quick proto ah from any to any' + KF,
+            'pass in quick proto esp from any to any' + KF,
+            'pass in quick proto udp from any to any port = isakmp' + KF,
+            'pass in quick proto udp from any to any port = ipsec-nat-t' + KF
+        ], 'ipsec rules applied', function () {
+            t.done();
+        });
+    }
+};
+
+
+
+// --- Teardown
+
+exports['teardown'] = function (t) {
+    mod_vm.delAllCreated(t, {});
+};
diff --git a/src/fw/test/lib/fw.js b/src/fw/test/lib/fw.js
index a33c266f..185b51bd 100644
--- a/src/fw/test/lib/fw.js
+++ b/src/fw/test/lib/fw.js
@@ -6,6 +6,7 @@
 
 var assert = require('assert-plus');
 var common = require('./common');
+var mod_cp = require('child_process');
 var mod_log = require('./log');
 var util = require('util');
 
@@ -14,6 +15,47 @@ var util = require('util');
 // --- Exports
 
 
+/**
+ * Test whether the ipf rules show up in 'fwadm status' for a VM
+ */
+function statsContain(t, uuid, inLines, inDesc, cb) {
+    var cmd = 'fwadm stats ' + uuid;
+    var desc = inDesc + ': ';
+    // clone the input:
+    var lines = inLines.slice();
+
+    mod_cp.exec(cmd, function compareStats(err, stdout, stderr) {
+        t.ifError(err, desc + 'error running: ' + cmd);
+        t.equal(stderr, '', desc + 'stderr: ' + cmd);
+
+        var rules = [];
+
+        stdout.split('\n').forEach(function (line) {
+            if (line === '') {
+                return;
+            }
+
+            var parts = line.split(/\s+/g);
+            parts.shift();
+            var rule = parts.join(' ');
+            var idx = lines.indexOf(rule);
+            if (idx !== -1) {
+                t.ok(true, desc + 'found rule: ' + rule);
+                lines.splice(idx, 1);
+            }
+
+            rules.push(rule);
+        });
+
+        t.deepEqual(lines, [], desc + 'found all rules');
+        if (lines.length !== 0) {
+            t.deepEqual(rules, [], desc + 'rules found');
+        }
+
+        return cb();
+    });
+}
+
 
 /**
  * `fwadm status <uuid>`
@@ -114,6 +156,7 @@ function zoneRunning(t, opts, callback) {
 
 
 module.exports = {
+    statsContain: statsContain,
     status: status,
     zoneEnable: zoneEnable,
     zoneRunning: zoneRunning
diff --git a/src/fw/test/lib/helpers.js b/src/fw/test/lib/helpers.js
index 0852e9f6..22c7474d 100644
--- a/src/fw/test/lib/helpers.js
+++ b/src/fw/test/lib/helpers.js
@@ -633,6 +633,22 @@ function createRangeRule(action, dir, proto, who, p1, p2, rest) {
         '%s %s quick proto %s from %s %s', action, dir, proto, who, suffix);
 }
 
+function allowInAH(src, rest) {
+    return createPortRule('pass', 'in', 'ah', src + ' to any', null, rest);
+}
+
+function allowInESP(src, rest) {
+    return createPortRule('pass', 'in', 'esp', src + ' to any', null, rest);
+}
+
+function blockOutAH(dst) {
+    return createPortRule('block', 'out', 'ah', 'any to ' + dst);
+}
+
+function blockOutESP(dst) {
+    return createPortRule('block', 'out', 'esp', 'any to ' + dst);
+}
+
 function allowPortInTCP(src, port, rest) {
     return createPortRule('pass', 'in', 'tcp', src + ' to any', port, rest);
 }
@@ -725,6 +741,12 @@ module.exports = {
     allowInICMP: allowInICMP,
     allowInICMP6: allowInICMP6,
 
+    allowInAH: allowInAH,
+    allowInESP: allowInESP,
+
+    blockOutAH: blockOutAH,
+    blockOutESP: blockOutESP,
+
     addZoneRules: addZoneRules,
     defaultZoneRules: defaultZoneRules,
     fillInRuleBlanks: fillInRuleBlanks,
diff --git a/src/fw/test/unit/ipsec.test.js b/src/fw/test/unit/ipsec.test.js
new file mode 100644
index 00000000..8b60bc5c
--- /dev/null
+++ b/src/fw/test/unit/ipsec.test.js
@@ -0,0 +1,189 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ *
+ * fwadm tests: AH and ESP protocols for IPsec
+ */
+
+var async = require('async');
+var clone = require('clone');
+var fw;
+var helpers = require('../lib/helpers');
+var mocks = require('../lib/mocks');
+var mod_obj = require('../../lib/util/obj');
+var mod_uuid = require('uuid');
+var util = require('util');
+var util_vm = require('../../lib/util/vm');
+
+
+// --- Globals
+
+// Set this to any of the exports in this file to only run that test,
+// plus setup and teardown
+var runOne;
+
+
+// --- Setup
+
+exports['setup'] = function (t) {
+    fw = mocks.setup();
+    t.ok(fw, 'fw loaded');
+    t.done();
+};
+
+
+// run before every test
+exports.setUp = function (cb) {
+    if (fw) {
+        mocks.reset();
+    }
+    cb();
+};
+
+
+// --- Tests
+
+exports['IPsec rules and keepstate'] = function (t) {
+    var vm = helpers.generateVM();
+    var payload = {
+        rules: [
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 1.2.3.4 TO vm %s ALLOW ah', vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format(
+                    'FROM ip 1.2.3.4 TO vm %s ALLOW esp', vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format('FROM vm %s TO any BLOCK ah', vm.uuid),
+                enabled: true
+            },
+            {
+                owner_uuid: vm.owner_uuid,
+                rule: util.format('FROM vm %s TO any BLOCK esp', vm.uuid),
+                enabled: true
+            }
+        ],
+        vms: [vm]
+    };
+
+    var expRules = clone(payload.rules);
+    var vmsEnabled = {};
+    var v4rules = helpers.defaultZoneRules(vm.uuid);
+    var v6rules = helpers.defaultZoneRules(vm.uuid);
+
+    async.series([
+    function addAndCheckRules(cb) {
+        fw.add(payload, function checkRules(err, res) {
+            t.ifError(err);
+            if (err) {
+                cb();
+                return;
+            }
+
+            helpers.fillInRuleBlanks(res.rules, expRules);
+
+            t.deepEqual(res, {
+                rules: expRules,
+                vms: [ vm.uuid ]
+            }, 'rules returned');
+
+            v4rules[vm.uuid].in.ah = [
+                helpers.allowInAH('1.2.3.4', 'keep state')
+            ];
+
+            v4rules[vm.uuid].in.esp = [
+                helpers.allowInESP('1.2.3.4', 'keep state')
+            ];
+
+            v4rules[vm.uuid].out.ah = [
+                helpers.blockOutAH('any')
+            ];
+
+            v4rules[vm.uuid].out.esp = [
+                helpers.blockOutESP('any')
+            ];
+
+            v6rules[vm.uuid].out = clone(v4rules[vm.uuid].out);
+
+            t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
+                'zone ipf.conf files correct');
+            t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
+                'zone ipf6.conf files correct');
+
+            vmsEnabled[vm.uuid] = true;
+            t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
+                'ipf enabled in VMs');
+
+            cb();
+        });
+
+    }, function (cb) {
+        helpers.fwGetEquals(t, expRules[0], cb);
+
+    }, function (cb) {
+        helpers.fwGetEquals(t, expRules[1], cb);
+
+    }, function (cb) {
+        helpers.fwGetEquals(t, expRules[2], cb);
+
+    }, function (cb) {
+        helpers.fwGetEquals(t, expRules[3], cb);
+
+    }, function (cb) {
+        helpers.fwListEquals(t, expRules, cb);
+
+    }
+
+    ], function () {
+        t.done();
+    });
+};
+
+
+
+// --- Teardown
+
+
+
+exports['teardown'] = function (t) {
+    mocks.teardown();
+    t.done();
+};
+
+
+// Use to run only one test in this file:
+if (runOne) {
+    module.exports = {
+        setup: exports.setup,
+        setUp: exports.setUp,
+        oneTest: runOne,
+        teardown: exports.teardown
+    };
+}
