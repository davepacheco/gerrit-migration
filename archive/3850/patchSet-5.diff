From 523b9b6f0cf29dd93526fdcecf1505cb1276a15e Mon Sep 17 00:00:00 2001
From: John Levon <john.levon@joyent.com>
Date: Wed, 25 Apr 2018 14:53:34 +0000
Subject: [PATCH] OS-6901 vmadm support for bhyve passthrough Reviewed by: Dave
 Eddy <dave.eddy@joyent.com>

---
 overlay/generic/etc/ppt_matches          |   1 +
 overlay/generic/manifest                 |   1 +
 src/vm/common/vmtest.js                  |   2 +
 src/vm/node_modules/VM.js                | 121 ++++++++++++++-
 src/vm/node_modules/expander.js          |   9 ++
 src/vm/node_modules/proptable.js         |  49 ++++++
 src/vm/node_modules/vmload/vmload-xml.js |  88 ++++++-----
 src/vm/tests/test-bhyve-pci.js           | 182 +++++++++++++++++++++++
 8 files changed, 412 insertions(+), 41 deletions(-)
 create mode 100644 overlay/generic/etc/ppt_matches
 create mode 100644 src/vm/tests/test-bhyve-pci.js

diff --git a/overlay/generic/etc/ppt_matches b/overlay/generic/etc/ppt_matches
new file mode 100644
index 00000000..03ff7e03
--- /dev/null
+++ b/overlay/generic/etc/ppt_matches
@@ -0,0 +1 @@
+pci10de,15f0
diff --git a/overlay/generic/manifest b/overlay/generic/manifest
index 64d0f21b..d8b88125 100644
--- a/overlay/generic/manifest
+++ b/overlay/generic/manifest
@@ -36,6 +36,7 @@ f etc/opasswd 0644 root sys
 f etc/ouser_attr 0644 root sys
 f etc/passwd 0644 root sys
 f etc/path_to_inst 0444 root root
+f etc/ppt_matches 0444 root root
 f etc/profile 0644 root sys
 f etc/resolv.conf 0644 netadm netadm
 f etc/rtc_config 0644 root root
diff --git a/src/vm/common/vmtest.js b/src/vm/common/vmtest.js
index 17cc4f32..93819999 100644
--- a/src/vm/common/vmtest.js
+++ b/src/vm/common/vmtest.js
@@ -59,6 +59,8 @@ exports.CURRENT_UBUNTU_NAME = 'ubuntu-10.04';
 exports.CURRENT_UBUNTU_SIZE = 5120;
 exports.CURRENT_UBUNTU_UUID = '71101322-43a5-11e1-8f01-cf2a3031a7f4';
 
+// centos-bhyve-7
+exports.CURRENT_BHYVE_CENTOS_UUID = '462d1d03-8457-e134-a408-cf9ea2b9be96';
 
 exports.on_new_vm = function(t, uuid, payload, state, fnlist, callback)
 {
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index d82ab6d8..88b82339 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -112,6 +112,7 @@ var KEEP_ZERO_PROPERTIES = properties.KEEP_ZERO_PROPERTIES;
 var KVM_MEM_OVERHEAD = properties.KVM_MEM_OVERHEAD;
 var UPDATABLE_DISK_PROPS = properties.UPDATABLE_DISK_PROPS;
 var UPDATABLE_NIC_PROPS = properties.UPDATABLE_NIC_PROPS;
+var UPDATABLE_PCI_DEVICE_PROPS = properties.UPDATABLE_PCI_DEVICE_PROPS;
 
 // re-export these
 exports.BHYVE_MEM_OVERHEAD = BHYVE_MEM_OVERHEAD;
@@ -1217,6 +1218,50 @@ exports.validate = function (brand, action, payload, options, callback)
             }
         }
 
+        if (BRAND_OPTIONS[brand].hasOwnProperty('allowed_properties')
+            && BRAND_OPTIONS[brand].allowed_properties
+            .hasOwnProperty('pci_devices')) {
+
+            function validatePCIDevice(prop_prefix, dev) {
+                if (!dev.hasOwnProperty('path')) {
+                    errors.missing_properties.push(prop_prefix + '.path');
+                } else if (dev.path.indexOf('/devices') != 0) {
+                    errors.bad_values.push(prop_prefix + '.path');
+                }
+
+                if (!dev.hasOwnProperty('pci_slot')) {
+                    errors.missing_properties.push(prop_prefix + '.pci_slot');
+                } else {
+                    var a = dev.pci_slot.split(':');
+                    if (a.length < 1 || a.length > 3
+                        || isNaN(a[0]) || a[0] < 0 || a[0] > 255
+                        || (a.length > 1
+                        && (isNaN(a[1]) || a[1] < 0 || a[1] > 31))
+                        || (a.length > 2
+                        && (isNaN(a[2]) || a[2] < 0 || a[2] > 7))) {
+                        errors.bad_values.push(prop_prefix + '.pci_slot');
+                    }
+                }
+
+                if (dev.hasOwnProperty('model') && dev.model !== 'passthru') {
+                    errors.bad_values.push(prop_prefix + '.model');
+                }
+            }
+
+            if (payload.hasOwnProperty('pci_devices')) {
+                for (idx in payload.pci_devices) {
+                    validatePCIDevice('pci_devices.' + idx,
+                        payload.pci_devices[idx]);
+                }
+            }
+            if (payload.hasOwnProperty('add_pci_devices')) {
+                for (idx in payload.add_pci_devices) {
+                    validatePCIDevice('add_pci_devices.' + idx,
+                        payload.add_pci_devices[idx]);
+                }
+            }
+        }
+
         if (BRAND_OPTIONS[brand].hasOwnProperty('required_properties')) {
             required = BRAND_OPTIONS[brand].required_properties;
             for (prop in required) {
@@ -4338,7 +4383,8 @@ function checkPayloadProperties(payload, vmobj, log, callback)
     var array_fields = [
         'add_nics', 'update_nics', 'remove_nics',
         'add_disks', 'update_disks', 'remove_disks',
-        'add_filesystems', 'update_filesystems', 'remove_filesystems'
+        'add_filesystems', 'update_filesystems', 'remove_filesystems',
+        'add_pci_devices', 'update_pci_devices', 'remove_pci_devices'
     ];
     var brand;
     var changed_nics = [];
@@ -4482,6 +4528,21 @@ function checkPayloadProperties(payload, vmobj, log, callback)
             }
         }
 
+        if (payload.hasOwnProperty('add_pci_devices')
+            || payload.hasOwnProperty('update_pci_devices')
+            || payload.hasOwnProperty('remove_pci_devices')) {
+
+            if ((vmobj.state !== 'stopped')
+                || (vmobj.state === 'provisioning'
+                && vmobj.zone_state !== 'installed')) {
+
+                callback(new Error('updates to pci_devices are only allowed '
+                    + 'when state is "stopped", currently: ' + vmobj.state
+                    +' (' + vmobj.zone_state + ')'));
+                return;
+            }
+        }
+
         // if there's a min_overhead we ensure values are higher than ram.
         if (BRAND_OPTIONS[brand].features.min_memory_overhead) {
             if (payload.hasOwnProperty('ram')) {
@@ -5870,6 +5931,38 @@ function buildDockerLogZonecfg(vmobj, payload, log) {
     return zcfg;
 }
 
+function buildPCIDeviceZonecfg(vmobj, payload)
+{
+    var add = [];
+    var device;
+    var lists;
+    var remove = [];
+    var zcfg = '';
+
+    lists = buildAddRemoveList(vmobj, payload, 'pci_device', 'path',
+        UPDATABLE_PCI_DEVICE_PROPS);
+
+    remove = lists.remove;
+    add = lists.add;
+
+    for (device in remove) {
+        device = remove[device];
+        zcfg = zcfg + 'remove -F device match=' + device + '\n';
+    }
+
+    for (device in add) {
+        device = add[device];
+
+        zcfg = zcfg + 'add device\n'
+            + 'set match=' + device.path + '\n'
+            + 'add property (name=model, value="passthru")\n'
+            + 'add property (name=pci-slot, value="' + device.pci_slot + '")\n'
+            + 'end\n';
+    }
+
+    return zcfg;
+}
+
 function buildZonecfgUpdate(vmobj, payload, log)
 {
     var brand;
@@ -6256,6 +6349,13 @@ function buildZonecfgUpdate(vmobj, payload, log)
 
     zcfg = zcfg + buildNicZonecfg(vmobj, payload, log);
 
+    if (payload.hasOwnProperty('pci_devices')
+        || payload.hasOwnProperty('add_pci_devices')
+        || payload.hasOwnProperty('update_pci_devices')
+        || payload.hasOwnProperty('remove_pci_devices')) {
+        zcfg = zcfg + buildPCIDeviceZonecfg(vmobj, payload);
+    }
+
     return zcfg;
 }
 
@@ -8526,7 +8626,7 @@ function normalizePayload(payload, vmobj, log, callback)
     // there are bad values we'll just fail.
     VM.validate(brand, action, payload, {log: log}, function (errors) {
         var bad_prop;
-        var compound_props = ['disks', 'nics', 'filesystems'];
+        var compound_props = ['disks', 'nics', 'filesystems', 'pci_devices'];
         var matches;
         var obj;
         var prop;
@@ -8592,9 +8692,10 @@ function normalizePayload(payload, vmobj, log, callback)
             payload.zonename = payload.uuid;
         }
 
-        // You use 'disks' and 'nics' when creating, but the underlying
-        // functions expect add_disks and add_nics, so we rename them now that
-        // we've confirmed we've got the correct thing for this action.
+        // You use e.g. 'disks' when creating, but the underlying functions
+        // expect add_disks, so we rename them now that we've confirmed we've
+        // got the correct thing for this action.
+
         if (payload.hasOwnProperty('disks')) {
             if (payload.hasOwnProperty('add_disks')) {
                 callback(new Error('Cannot specify both "disks" and '
@@ -8623,6 +8724,16 @@ function normalizePayload(payload, vmobj, log, callback)
             delete payload.filesystems;
         }
 
+        if (payload.hasOwnProperty('pci_devices')) {
+            if (payload.hasOwnProperty('add_pci_devices')) {
+                callback(new Error('Cannot specify both "pci_devices" and '
+                    + '"add_pci_devices"'));
+                return;
+            }
+            payload.add_pci_devices = payload.pci_devices;
+            delete payload.pci_devices;
+        }
+
         // if there's a zfs_root_* and no zfs_data_*, normally the properties
         // would fall through, we don't want that.
         if (payload.hasOwnProperty('zfs_root_compression')
diff --git a/src/vm/node_modules/expander.js b/src/vm/node_modules/expander.js
index 4598029e..fc07d45f 100644
--- a/src/vm/node_modules/expander.js
+++ b/src/vm/node_modules/expander.js
@@ -72,6 +72,7 @@ var payload_props = {};
 var sysinfo = {};
 var updatable_disk_props = [];
 var updatable_nic_props = [];
+var updatable_pci_device_props = [];
 var vmobj_json_fields = [];
 var vmobj_sysinfo_fields = [];
 var vmobj_zfs_fields = [];
@@ -111,10 +112,16 @@ Object.keys(proptable.properties).forEach(function (prop) {
         updatable_disk_props.push(match[1]);
     }
 
+    match = prop.match(/^pci_devices\.\*\.(.*)$/);
+    if (match && property.updatable) {
+        updatable_pci_device_props.push(match[1]);
+    }
+
     if (property.zonexml) {
         zonexml[property.zonexml] = {
             objname: prop
                 .replace(/^disks\.\*\./, '')
+                .replace(/^pci_devices\.\*\./, '')
                 .replace(/^filesystems\.\*\./, '')
                 .replace(/^nics\.\*\./, ''),
             loadValueTranslator: property.loadValueTranslator,
@@ -255,6 +262,8 @@ output = 'exports.VMOBJ_JSON_FIELDS = '
     + JSON.stringify(updatable_disk_props, null, 2) + ';\n\n'
     + 'exports.UPDATABLE_NIC_PROPS = '
     + JSON.stringify(updatable_nic_props, null, 2) + ';\n\n'
+    + 'exports.UPDATABLE_PCI_DEVICE_PROPS = '
+    + JSON.stringify(updatable_pci_device_props, null, 2) + ';\n\n'
     + 'exports.VMOBJ_XML_FIELDS = '
     + JSON.stringify(vmobj_zonexml_fields, null, 2) + ';\n\n'
     + 'exports.XML_PROPERTIES = '
diff --git a/src/vm/node_modules/proptable.js b/src/vm/node_modules/proptable.js
index 03107e97..3a17e9ff 100644
--- a/src/vm/node_modules/proptable.js
+++ b/src/vm/node_modules/proptable.js
@@ -284,6 +284,14 @@ exports.properties = {
             check_as: 'nics',
             type: 'object-array'
         }
+    }, add_pci_devices: {
+        payload: {
+            allowed: {
+                'bhyve': ['create', 'update', 'receive']
+            },
+            check_as: 'pci_devices',
+            type: 'object-array'
+        }
     }, alias: {
         loadValueTranslator: 'utils.unbase64',
         payload: {
@@ -1464,6 +1472,32 @@ exports.properties = {
             type: 'string'
         },
         zonexml: 'zone.attr.package-version'
+    }, pci_devices: {
+        flattenable: 'array_hash_key',
+        payload: {
+            allowed: {
+                'bhyve': ['create', 'receive', 'update']
+            },
+            type: 'object-array'
+        },
+        zonexml: 'zone.device'
+    }, 'pci_devices.*.path': {
+        payload: {
+            allowed: {
+                'bhyve': ['add', 'update']
+            },
+            type: 'string'
+        },
+        zonexml: 'zone.device.match'
+    }, 'pci_devices.*.pci_slot': {
+        payload: {
+            allowed: {
+                'bhyve': ['add', 'update']
+            },
+            type: 'string'
+        },
+        updatable: true,
+        zonexml: 'zone.device.net-attr.pci-slot'
     }, pid: {
         loadValueTranslator: 'utils.numberify',
         zoneinfo: 'init_pid'
@@ -1571,6 +1605,13 @@ exports.properties = {
             },
             type: 'list'
         }
+    }, remove_pci_devices: {
+        payload: {
+            allowed: {
+                'bhyve': ['update']
+            },
+            type: 'list'
+        }
     }, remove_routes: {
         payload: {
             allowed: {
@@ -1791,6 +1832,14 @@ exports.properties = {
             check_as: 'nics',
             type: 'object-array'
         }
+    }, update_pci_devices: {
+        payload: {
+            allowed: {
+                'bhyve': ['update']
+            },
+            check_as: 'pci_devices',
+            type: 'object-array'
+        }
     }, uuid: {
         payload: {
             allowed: {
diff --git a/src/vm/node_modules/vmload/vmload-xml.js b/src/vm/node_modules/vmload/vmload-xml.js
index e2cf2c4f..c460c358 100644
--- a/src/vm/node_modules/vmload/vmload-xml.js
+++ b/src/vm/node_modules/vmload/vmload-xml.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * vmload-xml: loads VM properties from /etc/zones/<zonename>.xml
@@ -48,20 +48,6 @@ var rtrim = require('utils').rtrim;
 var BRAND_OPTIONS = props.BRAND_OPTIONS;
 var XML_PROPERTIES = props.XML_PROPERTIES;
 
-/*
- * endElement() is called when we get to the </element>
- */
-function endElement(name, state)
-{
-    // trim stack back above this element
-    var stack = state.stack;
-
-    while (stack.pop() !== name) {
-        // do nothing, we just want to consume.
-        continue;
-    }
-}
-
 /*
  * This function parses the zone XML (string) from 'data' and adds the VM
  * properties to a new object. Upon completion it calls:
@@ -101,7 +87,7 @@ function getVmobjXML(data, options, callback)
     });
 
     parser.on('endElement', function (name) {
-        endElement(name, state);
+        endElement(name, state, log);
         return;
     });
 
@@ -234,7 +220,7 @@ function indexSort(obj, field, pattern)
 /*
  * This is called by the parser when we get to the start of an element. We do
  * all the work here and just allow endElement to pop us back up the stack
- * we're maintaining every time an element starts.
+ * we're maintaining every time an element starts (excepting zone.device).
  *
  * In proptable.js we define those elements we'll parse here using entries like:
  *
@@ -255,7 +241,6 @@ function indexSort(obj, field, pattern)
  */
 function startElement(name, attrs, state, log)
 {
-    var disk;
     var filesystem;
     var k;
     var nic;
@@ -303,27 +288,16 @@ function startElement(name, attrs, state, log)
         }
         obj.datasets.push(attrs.name);
     } else if (where === 'zone.device') {
-        disk = {};
+        /*
+         * We cannot know at this point whether the device is referencing a disk
+         * or a (passthrough) device; we'll sort it out during endElement().
+         */
+        obj.device = {};
         Object.keys(attrs).forEach(function (key) {
-            k = stack.join('.') + '.' + key;
-            transformed = transformProperty(k, attrs[key], log);
-            if (!transformed) {
-                return;
-            }
-            disk[transformed.key] = transformed.value;
+            obj.device[where + '.' + key] = attrs[key];
         });
-        if (!obj.disks) {
-            obj.disks = [];
-        }
-        obj.disks.push(disk);
     } else if (where === 'zone.device.net-attr') {
-        disk = obj.disks[obj.disks.length - 1];
-        k = where + '.' + attrs.name;
-        transformed = transformProperty(k, attrs.value, log);
-        if (!transformed) {
-            return;
-        }
-        disk[transformed.key] = transformed.value;
+        obj.device[where + '.' + attrs.name] = attrs.value;
     } else if (where === 'zone.filesystem') {
         filesystem = {};
         Object.keys(attrs).forEach(function (key) {
@@ -385,6 +359,48 @@ function startElement(name, attrs, state, log)
     }
 }
 
+/*
+ * endElement() is called when we get to the </element>.  At this point, if
+ * we're closing a device element, we have enough to know if it's a disk or a
+ * pci_device.
+ */
+function endElement(name, state, log)
+{
+    var stack = state.stack;
+    var obj = state.obj;
+    var transformed;
+    var dev = {};
+
+    if (name === 'device') {
+        Object.keys(obj.device).forEach(function (key) {
+            transformed = transformProperty(key, obj.device[key], log);
+            if (!transformed) {
+                return;
+            }
+            dev[transformed.key] = transformed.value;
+        });
+
+        if (obj.device['zone.device.net-attr.model'] === 'passthru') {
+            if (!obj.pci_devices) {
+                obj.pci_devices = [];
+            }
+            obj.pci_devices.push(dev);
+        } else {
+            if (!obj.disks) {
+                obj.disks = [];
+            }
+            obj.disks.push(dev);
+        }
+
+        obj.device = null;
+    }
+
+    while (stack.pop() !== name) {
+        // do nothing, we just want to consume.
+        continue;
+    }
+}
+
 function transformProperty(key, value, log)
 {
     var result = {};
diff --git a/src/vm/tests/test-bhyve-pci.js b/src/vm/tests/test-bhyve-pci.js
new file mode 100644
index 00000000..6f9aa445
--- /dev/null
+++ b/src/vm/tests/test-bhyve-pci.js
@@ -0,0 +1,182 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * There's a lot more bhyve testing that could be done; this just covers some
+ * basic sanity testing of PCI passthrough validation.
+ */
+
+var fs = require('fs');
+var VM = require('/usr/vm/node_modules/VM');
+var vmtest = require('../common/vmtest.js');
+
+// this puts test stuff in global, so we need to tell jsl about that:
+/* jsl:import ../node_modules/nodeunit-plus/index.js */
+require('nodeunit-plus');
+
+VM.loglevel = 'DEBUG';
+
+var payload = {
+    alias: 'test-create-bhyve-' + process.pid,
+    autoboot: false,
+    brand: 'bhyve',
+    ram: "1024",
+    vcpus: "2",
+    do_not_inventory: true,
+    nics: [
+        {
+            nic_tag: 'admin',
+            ip: 'dhcp',
+            model: 'virtio'
+        }
+    ],
+    disks: [
+        {
+            image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID,
+            boot: true,
+            model: "virtio"
+        }
+    ]
+};
+
+function validate_bad_value(t, prop, devs) {
+    var propname = 'pci_devices.0.' + prop;
+
+    payload.pci_devices = devs;
+
+    VM.validate(payload.brand, 'create',  payload, function (errors) {
+        t.ok(errors, 'invalid payload');
+        if (errors) {
+            t.ok(errors.bad_values.indexOf(propname) !== -1,
+                'bad value should be listed: ' + JSON.stringify(errors));
+        }
+        t.end();
+    });
+}
+
+function validate_missing_property(t, prop, devs) {
+    var propname = 'pci_devices.0.' + prop;
+
+    payload.pci_devices = devs;
+
+    VM.validate(payload.brand, 'create',  payload, function (errors) {
+        t.ok(errors, 'invalid payload');
+        if (errors) {
+            t.ok(errors.missing_properties.indexOf(propname) !== -1,
+                'missing property should be listed: ' + JSON.stringify(errors));
+        }
+        t.end();
+    });
+}
+
+test('test validate with bad pci_device path', function(t) {
+    validate_bad_value(t, 'path', [
+        {
+            path: "/notdevices/pci@0,0/",
+            pci_slot: "5:0:0"
+        }
+    ]);
+});
+
+test('test validate with bad pci_slot', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "foo"
+        }
+    ]);
+});
+
+test('test validate with bad pci_slot (2)', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "4:0:0:0"
+        }
+    ]);
+});
+
+test('test validate with bad pci_slot (3)', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "256:0:0"
+        }
+    ]);
+});
+
+test('test validate with bad pci_slot (4)', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "-1:0:0"
+        }
+    ]);
+});
+
+
+test('test validate with bad pci_slot (4)', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "4:32:0"
+        }
+    ]);
+});
+
+test('test validate with bad pci_slot (5)', function(t) {
+    validate_bad_value(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "4:0:8"
+        }
+    ]);
+});
+
+test('test validate with bad model)', function(t) {
+    validate_bad_value(t, 'model', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+            pci_slot: "4:0:0",
+            model: "passover"
+        }
+    ]);
+});
+
+test('test validate with missing path', function(t) {
+    validate_missing_property(t, 'path', [
+        {
+            pci_slot: "4:0:0"
+        }
+    ]);
+});
+
+test('test validate with missing pci_slot', function(t) {
+    validate_missing_property(t, 'pci_slot', [
+        {
+            path: "/devices/pci@0,0/pci8086,6f0a@3,2/pci15d9,1528@9,1",
+        }
+    ]);
+});
-- 
2.21.0

