commit 41ebb803dcca18ba22320eb01a6d849460ee3f79 (refs/changes/30/3130/3)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-12-21T15:09:13-05:00 (1 year, 10 months ago)
    
    TRITON-30 Add UpdateNetworkIP to node-triton

diff --git a/CHANGES.md b/CHANGES.md
index ff1850f..79bd160 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,6 +8,11 @@ Known issues:
 
 (nothing yet)
 
+## 5.6.0
+
+- [TRITON-30] Add UpdateNetworkIP to node-triton, e.g.
+  `triton network ip update`
+
 ## 5.5.0
 
 - [PUBAPI-1452] Add ip subcommand to network, e.g.
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index a409e18..5ebb389 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -422,6 +422,39 @@ CloudApi.prototype.getNetworkIp = function getNetworkIp(opts, cb) {
     });
 };
 
+/**
+ * <http://apidocs.joyent.com/cloudapi/#UpdateNetworkIP>
+ *
+ * @param {Object} opts
+ *      - {String} opts.id The network UUID, name, or shortID. Required.
+ *      - {String} opts.ip The IP. Required.
+ *      - {Object} opts.data The PUT Body. Required.
+ * @param {Function} callback of the form `function (err, body, res)`
+ */
+CloudApi.prototype.updateNetworkIp = function updateNetworkIp(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.ip, 'opts.ip');
+    assert.object(opts.data, 'opts.data');
+    assert.func(cb, 'cb');
+
+    var endpoint = this._path(format('/%s/networks/%s/ips/%s',
+        this.account, opts.id, opts.ip));
+
+    this._request({
+        method: 'PUT',
+        path: endpoint,
+        data: opts.data
+    }, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
+
+// <updatable network ip field> -> <expected typeof>
+CloudApi.prototype.UPDATE_NETWORK_IP_FIELDS = {
+    reserved: 'boolean'
+};
+
 // ---- datacenters
 
 /**
diff --git a/lib/do_network/do_ip/do_update.js b/lib/do_network/do_ip/do_update.js
new file mode 100644
index 0000000..9827b3e
--- /dev/null
+++ b/lib/do_network/do_ip/do_update.js
@@ -0,0 +1,146 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ *
+ * `triton network ip update ...`
+ */
+
+var format = require('util').format;
+
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var UPDATE_NETWORK_IP_FIELDS
+    = require('../../cloudapi2').CloudApi.prototype.UPDATE_NETWORK_IP_FIELDS;
+
+function do_update(subcmd, opts, args, callback) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length < 3) {
+        callback(new errors.UsageError(format(
+            'incorrect number of args (%d)', args.length)));
+        return;
+    }
+
+    var log = this.log;
+    var tritonapi = this.top.tritonapi;
+    var updateIpOpts = {
+        id: args.shift(),
+        ip: args.shift(),
+        data: null
+    };
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+
+        /*
+         * Attempt to gather the UpdateNetworkIP PUT body from command line
+         * arguments.
+         */
+        function gatherDataArgs(ctx, next) {
+            /*
+             * If a single '-' argument is seen skip reading the PUT body from
+             * arguments.
+             */
+            if (args.length === 1 && args[0] === '-') {
+                next();
+                return;
+            }
+
+            try {
+                updateIpOpts.data = common.objFromKeyValueArgs(args, {
+                    disableDotted: true,
+                    typeHintFromKey: UPDATE_NETWORK_IP_FIELDS
+                });
+            } catch (err) {
+                next(err);
+                return;
+            }
+
+            next();
+        },
+
+        /*
+         * Attempt to gather UpdateNetworkIP PUT body from stdin if it was not
+         * found in the CLI args above.
+         */
+        function gatherDataStdin(ctx, next) {
+            // Skip this step if data was already found above
+            if (updateIpOpts.data) {
+                next();
+                return;
+            }
+
+            var stdin = '';
+            process.stdin.resume();
+            process.stdin.on('data', function (chunk) {
+                stdin += chunk;
+            });
+            process.stdin.on('end', function () {
+                try {
+                    updateIpOpts.data = JSON.parse(stdin);
+                } catch (err) {
+                    log.trace({stdin: stdin},
+                        'invalid network ip update JSON on stdin');
+                    next(new errors.TritonError(format(
+                        'invalid JSON for network ip update on stdin: %s',
+                        err)));
+                    return;
+                }
+
+                next();
+            });
+        },
+
+        function updateNetworkIP(ctx, next) {
+            tritonapi.updateNetworkIp(updateIpOpts, function (err, body, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                if (opts.json) {
+                    console.log(JSON.stringify(body));
+                } else {
+                    console.log(JSON.stringify(body, null, 4));
+                }
+                next();
+            });
+        }
+    ]}, callback);
+}
+
+do_update.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON output.'
+    }
+];
+
+do_update.synopses = ['{{name}} {{cmd}} NETWORK IP'];
+
+do_update.help = [
+    'Update a network ip.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where NETWORK is a network id, and IP is the ip address you want to get.'
+].join('\n');
+
+do_update.completionArgtypes = ['tritonnetwork', 'tritonnetworkip', 'none'];
+
+module.exports = do_update;
diff --git a/lib/do_network/do_ip/index.js b/lib/do_network/do_ip/index.js
index 8a24488..41de719 100644
--- a/lib/do_network/do_ip/index.js
+++ b/lib/do_network/do_ip/index.js
@@ -32,7 +32,8 @@ function IpCLI(top) {
         helpSubcmds: [
             'help',
             'list',
-            'get'
+            'get',
+            'update'
         ]
     });
 }
@@ -45,5 +46,6 @@ IpCLI.prototype.init = function init(opts, args, cb) {
 
 IpCLI.prototype.do_list = require('./do_list');
 IpCLI.prototype.do_get = require('./do_get');
+IpCLI.prototype.do_update = require('./do_update');
 
 module.exports = IpCLI;
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index a0e8ea7..22431ab 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -970,6 +970,52 @@ TritonApi.prototype.getNetworkIp = function getNetworkIp(opts, cb) {
     });
 };
 
+/**
+ * Modify a network IP.
+ *
+ * @param {Object} opts
+ *      - {String} opts.id The network UUID, name, or shortID. Required.
+ *      - {String} opts.ip The IP. Required.
+ *      - {Object} opts.data The PUT data. Required
+ * @param {Function} cb `function (err, ip, res)`
+ *      On failure `err` is an error instance, else it is null.
+ *      On success: `obj` is an ip object
+ */
+TritonApi.prototype.updateNetworkIp = function updateNetworkIp(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.string(opts.id, 'opts.id');
+    assert.string(opts.ip, 'opts.ip');
+    assert.object(opts.data, 'opts.data');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+    var body;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepNetId,
+
+        function getIp(arg, next) {
+            opts.id = arg.netId;
+            self.cloudapi.updateNetworkIp(opts, function (err, _body, _res) {
+                res = _res;
+                body = _body;
+
+                if (err && err.restCode === 'ResourceNotFound' &&
+                    err.exitStatus !== 3) {
+                    // Wrap with *our* ResourceNotFound for exitStatus=3.
+                    err = new errors.ResourceNotFoundError(err,
+                        format('IP %s was not found in network %s',
+                        opts.ip, opts.id));
+                }
+
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, body, res);
+    });
+};
 
 /**
  * Get an instance.
diff --git a/package.json b/package.json
index 4a681c0..43a7a58 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "5.5.0",
+  "version": "5.6.0",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
