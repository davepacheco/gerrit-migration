commit 4d082e57dc3311f4965cd15fd05a79ff9f28bd29 (refs/changes/14/5414/4)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-01-23T22:56:52+00:00 (9 months ago)
    
    MANTA-4071 muppet cannot find zk path "The specified ZooKeeper path does not exist"

diff --git a/lib/watch.js b/lib/watch.js
index b1ead1d..0085aaf 100644
--- a/lib/watch.js
+++ b/lib/watch.js
@@ -17,6 +17,7 @@ const util = require('util');
 const assert = require('assert-plus');
 const once = require('once');
 const vasync = require('vasync');
+const verror = require('verror');
 const jsprim = require('jsprim');
 
 
@@ -139,25 +140,30 @@ Watch.prototype.start = function start(callback) {
                 const p = self.path + '/' + child;
                 // Get info about host out of ZK
                 zk.get(p, function (err, _obj) {
-                    // Object returned as binary data from get()
-                    const obj = JSON.parse(_obj.toString());
                     if (err) {
+                        err.path = p;
                         _cb(err);
-                    } else if (obj.type !== 'host') {
+                        return;
+                    }
+
+                    // Object returned as binary data from get()
+                    var obj = JSON.parse(_obj.toString());
+
+                    if (obj && obj.type === 'host') {
+                        log.debug({
+                            path: self.path,
+                            host: obj
+                        }, 'onChildrenChanged::getChild: host fetched');
+                        _cb(null, obj.host.address);
+                    } else {
                         /*
                          * webapi and loadbalancer instances both register
                          * themselves into the same domain, but as different
                          * types ("host" and "load_balancer", respectively).
-                         * Here we effectively filter out anything but webapi
-                         * instances.
+                         * Here we effectively filter out anything but
+                         * webapi instances.
                          */
                         _cb(null);
-                    } else {
-                        log.debug({
-                            path: self.path,
-                            host: obj
-                        }, 'onChildrenChanged::getChild: host fetched');
-                        _cb(null, obj.host.address);
                     }
                 });
             }
@@ -172,45 +178,81 @@ Watch.prototype.start = function start(callback) {
             };
             vasync.forEachParallel(opts, function (err, res) {
                 if (err) {
-                    log.error({
-                        path: self.path,
-                        err: err
-                    }, 'onChildrenChanged: get host information failed');
-                    self.emit('error', err);
-                } else {
-                    var hosts = [];
-                    /*
-                     * This little snippet just drops
-                     * nulls and duplicates
-                     */
-                    res.successes.forEach(function uniqHost(h) {
-                        if (h && (hosts.indexOf(h) < 0)) {
-                            hosts.push(h);
+                    var emitError = false;
+                    verror.errorForEach(err, function (getChildErr) {
+                        if (getChildErr.name === 'ZKPingTimeoutError' &&
+                            getChildErr.code === 'PING_TIMEOUT') {
+                            /*
+                             * There is no meaningful action to be taken for a
+                             * zookeeper ping timeout. Muppet will be notified
+                             * if the zookeeper session becomes invalid and can
+                             * take action at that point. Log a debug message
+                             * and otherwise ignore it.
+                             */
+                            log.debug({
+                                path: getChildErr.path
+                            }, 'onChildrenChanged: zookeeper ping timeout');
+                        } else if (getChildErr.name === 'ZKError' &&
+                            getChildErr.code === 'NO_NODE') {
+                            /*
+                             * Failed to fetch the information about a host from
+                             * zookeeper. This need not be a fatal error. Log a
+                             * warning and carry on with the set of hosts that
+                             * we have info about.
+                             */
+                            log.warn({
+                                path: getChildErr.path
+                            }, 'onChildrenChanged: get host information ' +
+                                'failed');
+                        } else {
+                            log.error({
+                                path: getChildErr.path,
+                                err: err
+                            }, 'onChildrenChanged: get host information ' +
+                                'failed');
+                            emitError = true;
                         }
                     });
-                    hosts.sort();
-
-                    /*
-                     * Only emit if the set of webapi instances has
-                     * changed.
-                     */
-                    if (!jsprim.deepEqual(hosts, self.hosts)) {
-                        // Log the changes first
-                        log.info({
-                            path: self.path,
-                            current: self.hosts,
-                            new: hosts
-                        }, 'onChildrenChanged: hosts differ, changing');
-                        self.hosts = hosts;
 
-                        // Emit updated hosts list
-                        self.emit('hosts', self.hosts);
-                    } else {
-                        log.info({
-                            path: self.path,
-                            current: self.hosts
-                        }, 'onChildrenChanged: got hosts, but no changes');
+                    if (emitError) {
+                        self.emit('error', err);
+                        return;
                     }
+
+                }
+
+                var hosts = [];
+                /*
+                 * This little snippet just drops
+                 * nulls and duplicates
+                 */
+                res.successes.forEach(function uniqHost(h) {
+                    if (h && (hosts.indexOf(h) < 0)) {
+                        hosts.push(h);
+                    }
+                });
+                hosts.sort();
+
+                /*
+                 * Only emit if the set of webapi instances has
+                 * changed.
+                 */
+                if (!jsprim.deepEqual(hosts, self.hosts)) {
+                    // Log the changes first
+                    log.info({
+                        path: self.path,
+                        current: self.hosts,
+                        new: hosts
+                    }, 'onChildrenChanged: hosts differ, changing');
+                    self.hosts = hosts;
+
+                    // Emit updated hosts list
+                    self.emit('hosts', self.hosts);
+                } else {
+                    log.info({
+                        path: self.path,
+                        current: self.hosts
+                    }, 'onChildrenChanged: got hosts, but no changes');
                 }
             });
         });
diff --git a/muppet.js b/muppet.js
index 6b00ba8..63ac128 100644
--- a/muppet.js
+++ b/muppet.js
@@ -239,6 +239,16 @@ function startWatch(opts, cb) {
                 });
             });
 
+            /*
+             * Watcher directly handles certain classes of zookeeper errors, but
+             * emits an error event for those not directly handled.
+             */
+            watch.on('error', function onError(err) {
+                cfg.log.error({
+                    err: err
+                }, 'zookeeper error');
+            });
+
             _cb(null, watch);
         });
     }
diff --git a/package.json b/package.json
index 3c0f21b..45bcdc5 100644
--- a/package.json
+++ b/package.json
@@ -14,7 +14,7 @@
         "haproxy-stat" : "0.1.0",
         "node-uuid": "1.4.1",
         "once": "1.4.0",
-        "vasync": "2.0.0",
+        "vasync": "2.2.0",
         "verror": "1.10.0",
         "zkstream":"0.10.1"
     },
