commit 8c68e24a0d322fea386dcf3199a0cfedae562e6d
Author: John Levon <john.levon@joyent.com>
Date:   2019-08-06T17:46:51+00:00 (9 weeks ago)
    
    OS-7922 buildstamp module should live in illumos-joyent

diff --git a/Makefile b/Makefile
index d00e97ed..ce6473fb 100644
--- a/Makefile
+++ b/Makefile
@@ -137,9 +137,8 @@ world: 0-strap-stamp 0-illumos-stamp 0-extra-stamp 0-livesrc-stamp \
 live: world manifest mancheck_conf boot $(TOOLS_TARGETS) $(MANCF_FILE)
 	@echo $(SUBDIR_MANIFESTS)
 	mkdir -p ${ROOT}/log
-	CTFCONVERT=$(CTFCONVERT) ./tools/build_live \
-	    -m $(ROOT)/$(MANIFEST) -o $(ROOT)/output $(PLATFORM_PASSWORD_OPT) \
-	    $(ROOT)/proto $(ROOT)/man/man
+	./tools/build_live -m $(ROOT)/$(MANIFEST) -o $(ROOT)/output \
+	    $(PLATFORM_PASSWORD_OPT) $(ROOT)/proto $(ROOT)/man/man
 
 boot: $(BOOT_TARBALL)
 
diff --git a/configure b/configure
index f57039a6..5d9b7cc9 100755
--- a/configure
+++ b/configure
@@ -440,6 +440,10 @@ GM4=/opt/local/bin/gm4;				export GM4
 RPCGEN=/opt/local/bin/rpcgen;			export RPCGEN
 ASTBINDIR=/opt/local/ast/bin;			export ASTBINDIR
 LD_TOXIC_PATH="\$ROOT/lib:\$ROOT/usr/lib";	export LD_TOXIC_PATH
+# generate buildversion for illumos buildversion module
+BUILDVERSION_EXEC="${conf_root}/tools/build_etcrelease";
+						export BUILDVERSION_EXEC
+
 EOF
 	[[ $? -eq 0 ]] || fatal "failed to write illumos nightly env file"
 }
diff --git a/src/buildstamp.c b/src/buildstamp.c
deleted file mode 100644
index 3512fe7f..00000000
--- a/src/buildstamp.c
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * This file and its contents are supplied under the terms of the
- * Common Development and Distribution License ("CDDL"), version 1.0.
- * You may only use this file in accordance with the terms of version
- * 1.0 of the CDDL.
- *
- * A full copy of the text of the CDDL should have accompanied this
- * source.  A copy of the CDDL is also available via the Internet at
- * http://www.illumos.org/license/CDDL.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-/*
- * BUILDSTAMP KERNEL MODULE
- *
- * This kernel module carries the contents of the "boot_archive.gitstatus" file
- * in such a way that it will be included in kernel crash dumps.  It will be
- * forceloaded at boot, will refuse to detach, and has no other moving parts.
- *
- * The git information can be read back with "mdb", either on the live system
- * or from a crash dump; e.g.,
- *
- *	# mdb -ke 'gitstatus_start/s'
- *	gitstatus_start:
- *	gitstatus_start:[
- *		{
- *			"repo": "smartos-live",
- *			"branch": "master",
- *			"commit_date": "489715200",
- *			"rev": "fdf15f1d3549138b3d208a52186471fe24eab4b5",
- *			"url": "https://github.com/joyent/smartos-live.git"
- *		},
- *		...
- */
-
-#include <sys/ddi.h>
-#include <sys/sunddi.h>
-#include <sys/modctl.h>
-
-int buildstamp_no_detach = 1;
-
-static int
-buildstamp_attach(dev_info_t *dip, ddi_attach_cmd_t cmd)
-{
-	switch (cmd) {
-	case DDI_ATTACH:
-	case DDI_RESUME:
-		return (DDI_SUCCESS);
-
-	default:
-		return (DDI_FAILURE);
-	}
-}
-
-static int
-buildstamp_detach(dev_info_t *dip, ddi_detach_cmd_t cmd)
-{
-
-	switch (cmd) {
-	case DDI_DETACH:
-		if (buildstamp_no_detach) {
-			return (DDI_FAILURE);
-		}
-		/* FALLTHRU */
-	case DDI_SUSPEND:
-		return (DDI_SUCCESS);
-
-	default:
-		return (DDI_FAILURE);
-	}
-}
-
-static struct dev_ops buildstamp_dev_ops = {
-	.devo_rev =		DEVO_REV,
-	.devo_refcnt =		0,
-	.devo_getinfo =		nodev,
-	.devo_identify =	nulldev,
-	.devo_probe =		nulldev,
-
-	.devo_attach =		buildstamp_attach,
-	.devo_detach =		buildstamp_detach,
-
-	.devo_reset =		nodev,
-	.devo_cb_ops =		NULL,
-	.devo_bus_ops =		NULL,
-	.devo_power =		nodev,
-	.devo_quiesce =		ddi_quiesce_not_needed,
-};
-
-static struct modldrv buildstamp_md = {
-	.drv_modops =		&mod_driverops,
-	.drv_linkinfo =		"SmartOS buildstamp",
-	.drv_dev_ops =		&buildstamp_dev_ops,
-};
-
-static struct modlinkage buildstamp_ml = {
-	.ml_rev =		MODREV_1,
-	.ml_linkage =		{ &buildstamp_md, NULL }
-};
-
-int
-_init(void)
-{
-	return (mod_install(&buildstamp_ml));
-}
-
-int
-_info(struct modinfo *mi)
-{
-	return (mod_info(&buildstamp_ml, mi));
-}
-
-int
-_fini(void)
-{
-	return (mod_remove(&buildstamp_ml));
-}
diff --git a/tools/build_etcrelease b/tools/build_etcrelease
index dc20a453..acc20374 100755
--- a/tools/build_etcrelease
+++ b/tools/build_etcrelease
@@ -11,12 +11,19 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
+#
+
+#
+# MDB is pernickety about the exact format of this output, so be
+# careful.
 #
 
 set -o errexit
 set -o pipefail
 
+export PATH=/opt/local/bin/:$PATH
+
 ber_arg0=$(basename $0)
 ber_wsroot=$(cd "$(dirname "$0")/.." && pwd)
 ber_first=true
@@ -132,7 +139,7 @@ if [[ -n $ber_template ]]; then
 	printf '%s\n\n' "$ber_template_data"
 fi
 
-printf '[\n'
+( printf '[\n'
 get_status "$ber_wsroot" smartos-live
 get_status "$ber_wsroot/projects/illumos" illumos-joyent
 get_status "$ber_wsroot/projects/illumos-extra" illumos-extra
@@ -140,6 +147,6 @@ for d in $ber_wsroot/projects/local/*; do
 	get_status $d $(basename $d)
 done
 
-printf '\n]\n'
+printf '\n]\n' ) | json -o json-4
 
 exit 0
diff --git a/tools/build_live b/tools/build_live
index 6b6ade3d..3c6f35f5 100755
--- a/tools/build_live
+++ b/tools/build_live
@@ -261,6 +261,40 @@ function bi_create_ufs
 	bi_emit_done
 }
 
+#
+# We want to explicitly rebuild the kernel module so it reflects the status of
+# all our repositories, even if we didn't choose to rebuild projects/illumos.
+#
+function bi_remake_buildversion
+{
+	local artefact="$bi_out_dir/gitstatus.json"
+	local bvfile="$bi_wsroot/projects/illumos/usr/src/buildversion"
+
+	set -x
+
+	#
+	# We include the JSON-only version of the release information as a
+	# separate build artefact.
+	#
+	if ! "$bi_wsroot/tools/build_etcrelease" >"$artefact"; then
+		fail "could not generate gitstatus file"
+	fi
+
+	if cmp "$artefact" "$bvfile" >/dev/null 2>&1; then
+		return
+	fi
+
+	bi_emit_start 'Updating buildversion kernel module'
+
+	cp "$artefact" "$bvfile"
+
+	(cd $bi_wsroot/projects/illumos && ksh93 \
+	    usr/src/tools/scripts/bldenv.sh illumos.sh \
+	    'cd $CODEMGR_WS/usr/src/uts/intel/buildversion && dmake install')
+
+	bi_emit_done
+}
+
 function bi_copy_files
 {
 	local builder="$bi_wsroot/tools/builder/builder"
@@ -420,107 +454,7 @@ function bi_gen_etcrelease
 		fail 'failed to build "/etc/release" file'
 	fi
 
-	#
-	# We include the JSON-only version of the release information as a
-	# separate build artefact.  We ensure that this is correctly JSON
-	# formatted by passing it through json(1).
-	#
-	if ! "$build_etcrelease" | json -o 'json-4' \
-	    >"$bi_archive.gitstatus"; then
-		fail "could not generate gitstatus file"
-	fi
-	cp "$bi_archive.gitstatus" "$bi_out_dir/gitstatus.json"
-
-	bi_emit_done
-}
-
-function bi_gen_buildstamp_module
-{
-	local module_gcc="$bi_wsroot/proto.strap/usr/bin/gcc"
-	local kernel_source="$bi_wsroot/projects/illumos"
-	local cflags=(
-		'-std=c99'
-		'-m64'
-		'-mcmodel=kernel'
-		'-gdwarf-2'
-		"-I$kernel_source/usr/src/uts/common"
-		"-I$kernel_source/usr/src/uts/intel"
-		"-I$kernel_source/usr/src/uts/i86pc"
-
-		'-nodefaultlibs'
-
-		'-fident'
-		'-fno-builtin'
-		'-fno-asm'
-		'-fno-inline'
-		'-fno-inline-functions'
-		'-ffreestanding'
-		'-mno-red-zone'
-
-		'-Wall'
-		'-Wextra'
-		'-Werror'
-		'-Wno-unknown-pragmas'
-		'-Wno-unused-parameter'
-
-		'-D__sun'
-		'-D_KERNEL'
-	)
-	local tmp_gitstatus="$bi_tmpdir/gitstatus"
-	local tmp_gitstatus_o="$bi_tmpdir/gitstatus.o"
-	local tmp_module_o="$bi_tmpdir/buildstamp.o"
-	local tmp_module="$bi_tmpdir/buildstamp"
-	local tmp_module_img="$bi_mnt_root/kernel/drv/amd64/buildstamp"
-
-	bi_emit_start 'Building "buildstamp" module'
-
-	#
-	# The elfwrap(1) program uses the basename of the file to generate the
-	# symbol names in the target object.  So that the git status
-	# information appears at "gitstatus_start" in the kernel, we make a
-	# copy of the gitstatus file with the desired name.
-	#
-	# In addition, elfwrap does not ensure a NUL byte at the end of the
-	# wrapped contents so we add one with printf(1).  This makes it easier
-	# to access the status information with a command that will print a
-	# NUL-terminated string; e.g.: mdb -ke 'gitstatus_start/s'
-	#
-	/usr/bin/rm -f "$tmp_gitstatus"
-	if ! /usr/bin/cp "$bi_archive.gitstatus" "$tmp_gitstatus"; then
-		fail "could not copy gitstatus file"
-	fi
-	if ! /usr/bin/printf '\0' >>"$tmp_gitstatus"; then
-		fail "could not add NUL byte to gitstatus file"
-	fi
-
-	if ! /usr/bin/elfwrap -64 -z target=x86 -o "$tmp_gitstatus_o" \
-	    "$tmp_gitstatus"; then
-		fail "could not elfwrap the gitstatus file"
-	fi
-
-	if ! "$module_gcc" -c "${cflags[@]}" -o "$tmp_module_o" \
-	    "$bi_wsroot/src/buildstamp.c"; then
-		fail "could not compile buildstamp.c"
-	fi
-
-	if ! /usr/bin/ld -r -o "$tmp_module" "$tmp_module_o" \
-	    "$tmp_gitstatus_o"; then
-		fail "could not link buildstamp module"
-	fi
-
-	if ! $CTFCONVERT "$tmp_module"; then
-		fail "could not add CTF to buildstamp module"
-	fi
-
-	if ! /usr/bin/strip -x "$tmp_module"; then
-		fail "could not strip buildstamp module"
-	fi
-
-	if ! pfexec /usr/bin/cp "$tmp_module" "$tmp_module_img" ||
-	    ! pfexec /usr/bin/chown 0:3 "$tmp_module_img" ||
-	    ! pfexec /usr/bin/chmod 0755 "$tmp_module_img"; then
-		fail "could not copy buildstamp module into image"
-	fi
+	pfexec cp "$bi_out_dir/gitstatus.json" "$bi_archive.gitstatus"
 
 	bi_emit_done
 }
@@ -935,13 +869,13 @@ fi
 #
 # Assemble the boot_archive:
 #
+bi_remake_buildversion
 bi_copy_files
 bi_gen_whatis
 bi_smf_import
 bi_smf_seeds
 bi_create_password
 bi_gen_etcrelease
-bi_gen_buildstamp_module
 bi_ship_manifest
 bi_file_fixups
 bi_compress_usr
