From 347b7a258fe849ea747729532d3d17bc5ed9adab Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Fri, 23 Aug 2019 04:05:31 +0000
Subject: [PATCH] sysinfo.js boot time, zpool

---
 lib/backends/linux/sysinfo.js | 180 +++++++++++++++++++++++++++++++++-
 1 file changed, 177 insertions(+), 3 deletions(-)

diff --git a/lib/backends/linux/sysinfo.js b/lib/backends/linux/sysinfo.js
index cb4b4e8..9427f22 100644
--- a/lib/backends/linux/sysinfo.js
+++ b/lib/backends/linux/sysinfo.js
@@ -29,7 +29,7 @@ var zpool = require('zfs').zpool;
 
 var smartdc_config = require('./smartdc-config');
 
-var log = null;
+var LOG = null;
 
 function getBasicInfo(callback)
 {
@@ -42,8 +42,8 @@ function getBasicInfo(callback)
         'HVM API': false,
         'Live Image': '20190401T000000Z',   // XXX-mg fix
         'Admin NIC Tag': 'admin',           // XXX-mg fix
+        'Boot Time': fs.statSync('/proc').birthtime.getTime()
 
-        // Boot Time
         // Datacenter Name
         // Setup
         // Admin IP
@@ -199,6 +199,179 @@ function getDiskInfo(callback)
     });
 }
 
+/*
+ * Gather the following info about the system zfs pool:
+ *
+ * 'Zpool'              The system zpool
+ * 'Zpool Disks'        The disks in that pool
+ * 'Zpool Profile'      The layout (striped, raidz, etc.)
+ * 'Zpool Creation'     When it was created
+ * 'Zpool Size in GiB'  zfs used + available
+ */
+function getZpoolInfo(callback)
+{
+    var sysinfo = {};
+
+    /*
+     * There can be many pools on the system.  sysinfo is only concerned with
+     * the system pool, which has a file .system_pool in the root directory of
+     * the top-level dataset.
+     *
+     * In order to find the .system_pool file, we need to know where each
+     * pool's top-level dataset is mounted.  Getting all other zfs properties
+     * that we may need at the same time as we find the mount point is just
+     * about free. Thus, we use one invocation of zfs(8) to get all the
+     * zfs properties we may need and one invocation of zpool to get the pool
+     * properties layout.
+     */
+    vasync.waterfall([
+        function getRootDatasetProps(next) {
+            var props = ['name', 'mountpoint', 'mounted', 'creation', 'used',
+                'available'];
+            execFile('/sbin/zfs', ['list', '-Hpo', props.join(','), '-d', '1'],
+                function zfsList(err, stdout, stderr) {
+
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                var dsprops = {};
+                var lines = stdout.split('\n');
+
+                for (var line in lines) {
+                    line = lines[line];
+                    var vals = line.split('\t');
+                    var pool = vals[0];
+                    dsprops[pool] = {};
+
+                    for (var i in props) {
+                        dsprops[pool][props[i]] = vals[i];
+                    }
+                }
+
+                next(null, dsprops);
+            });
+        }, function selectSystemPool(dsprops, next) {
+            vasync.forEachParallel({
+                inputs: Object.keys(dsprops),
+                func: function isSystemPool(pool, done) {
+                    var props = dsprops[pool];
+
+                    if (props.mounted !== 'yes') {
+                        if (LOG) {
+                            LOG.info({props: props},
+                                'getZpoolInfo: top level dataset of pool ' +
+                                pool + ' not mounted: not a system pool');
+                            done();
+                            return;
+                        }
+                    }
+                    fs.access(props.mountpoint + '/.system_pool',
+                        function dotSystemPoolExists(err) {
+
+                        if (err) {
+                            if (LOG) {
+                                LOG.debug({props: props},
+                                    'getZpoolInfo: not a system pool: ' + err);
+                            }
+                            done();
+                        } else {
+                            if (LOG) {
+                                LOG.debug({props: props},
+                                    'getZpoolInfo: found a system pool');
+                            }
+                            done(null, props);
+                        }
+                    });
+                }
+            },
+            function systemPoolSelection(err, results) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                var syspools = [];
+                for (var result in results.successes) {
+                    result = results.successes[result];
+
+                    if (!result || !result.hasOwnProperty('name')) {
+                        continue;
+                    }
+
+                    syspools.push(result.name);
+                }
+
+                if (syspools.length == 0) {
+                    next(new Error('no system zfs pools'));
+                    return;
+                }
+                if (syspools.length != 1) {
+                    next(new Error('multiple system zfs pools: ' +
+                        syspools.join(', ')));
+                    return;
+                }
+
+                var selected = dsprops[syspools[0]];
+                sysinfo['Zpool'] = selected.name;
+                sysinfo['Zpool Size in GiB'] = Math.floor(
+                    (Number(selected.used) + Number(selected.available)) /
+                    (1024 * 1024 * 1024));
+                sysinfo['Zpool Creation'] = Number(selected.creation);
+
+
+                next(null, selected.name);
+            });
+        }, function getSystemPoolProfile(pool, next) {
+            cp.execFile('/sbin/zpool', ['status', pool],
+                function zpoolStatus(err, stdout, stderr) {
+
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                var disks = [];
+                var profile = 'stripe';
+
+                // Pool config comes after first two newlines and has two
+                // newlines after it.
+                var lines = stdout.split('\n\n')[1].split('\n');
+
+                for (var line in lines) {
+                    line = lines[line];
+
+                    // Skip header line and the line with pool name
+                    if (!line.startsWith('\t ')) {
+                        continue;
+                    }
+
+                    // We ignore the possibility of a mixture of vdev types, as
+                    // that's bad idea and only allowed by zpool(8) with a force
+                    // option.
+                    var m = line.match(/\t +(mirror|raidz3|raidz2|raidz)-/);
+                    if (m) {
+                        profile = m[1];
+                        continue;
+                    }
+
+                    m = line.match(/\t +([^\s]+)\s+/);
+                    if (m) {
+                        disks.push(m[1]);
+                    }
+                }
+
+                sysinfo['Zpool Disks'] = disks;
+                sysinfo['Profile'] = profile;
+
+                next();
+            });
+        }],
+        function getZpoolInfoDone(err) {
+            callback(err, sysinfo);
+        });
+}
+
 /*
  * Generates network elements in sysinfo. If sysinfo already has any of these
  * elements, they are replaced or removed to reflect the current state.
@@ -406,6 +579,7 @@ function sysinfo(callback)
             getCpuInfo,
             getMemInfo,
             getDiskInfo,
+            getZpoolInfo,
             getNetInfo,
             getSmbiosInfo
         ]
@@ -426,6 +600,6 @@ function sysinfo(callback)
 }
 
 module.exports = {
-    log: log,
+    log: LOG,
     sysinfo: sysinfo
 };
-- 
2.17.2 (Apple Git-113)

