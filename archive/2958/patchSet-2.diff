commit bba5230e9a4c9715082db37ea5b5380c802428b4 (refs/changes/58/2958/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-11-20T14:23:33-08:00 (1 year, 11 months ago)
    
    joyent/node-watershed#2 Use crypto.randomBytes() for key generation

diff --git a/CHANGES.md b/CHANGES.md
index 9651e6f..a449449 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,6 +6,7 @@
 
 * Support for Websocket sub-protocol negotiation
 * Documented `detached`/raw socket argument to `accept()`
+* Change to using `crypto.randomBytes()` for entropy
 
 ## 0.3.4
 
diff --git a/lib/watershed.js b/lib/watershed.js
index fcb32d2..3fdec76 100644
--- a/lib/watershed.js
+++ b/lib/watershed.js
@@ -117,11 +117,7 @@ Watershed()
 Watershed.prototype.generateKey = function
 generateKey()
 {
-	var nonce = new Buffer(NONCE_LENGTH);
-	for (var i = 0; i < nonce.length; i++) {
-		nonce[i] = Math.floor(Math.random() * 256);
-	}
-	return (nonce.toString('base64'));
+	return (crypto.randomBytes(NONCE_LENGTH).toString('base64'));
 };
 
 /*
@@ -595,10 +591,7 @@ _ws_writeFrameCommon(opcode, data)
 	 * According to the RFC, the client MUST mask their outgoing frames.
 	 */
 	if (this._options.localShouldMask) {
-		maskbuf = new Buffer(4);
-		for (var i = 0; i < maskbuf.length; i++) {
-			maskbuf[i] = Math.floor(Math.random * 256);
-		}
+		maskbuf = crypto.randomBytes(4);
 		for (var j = 0; j < data.length; j++) {
 			data[j] = data[j] ^ maskbuf[j % maskbuf.length];
 		}
