From 86e1b36f6a9986e8b52331c8572233dfa1354e8a Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Fri, 15 Feb 2019 13:11:26 -0500
Subject: [PATCH] OS-7350 vmadm delete cannot clean up a zone in "configured"
 state Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>

---
 src/vm/node_modules/VM.js   |  7 ++-
 src/vm/tests/test-delete.js | 90 ++++++++++++++++++++++++++++++++++++-
 2 files changed, 92 insertions(+), 5 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 7758ace9..683fa2fe 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -12081,12 +12081,11 @@ function deleteZone(uuid, log, callback)
                                 stderr: fds.stderr},
                                 'Error uninstalling zone: %s', e.message);
                             cancelFn();
-                            cb2(e);
-                            return;
+                        } else {
+                            log.debug({stdout: fds.stdout, stderr: fds.stderr},
+                                'uninstalled zone');
                         }
 
-                        log.debug({stdout: fds.stdout, stderr: fds.stderr},
-                            'uninstalled zone');
                         cb2();
                     });
                 }]
diff --git a/src/vm/tests/test-delete.js b/src/vm/tests/test-delete.js
index b10d3e0c..c192dd9a 100644
--- a/src/vm/tests/test-delete.js
+++ b/src/vm/tests/test-delete.js
@@ -20,14 +20,18 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  * These tests ensure that delete behaves correctly.
  */
 
+var assert = require('/usr/node/node_modules/assert-plus');
+var common = require('./common');
+var f = require('util').format;
 var libuuid = require('/usr/node/node_modules/uuid');
 var vasync = require('/usr/vm/node_modules/vasync');
 var VM = require('/usr/vm/node_modules/VM');
+var vmtest = require('../common/vmtest');
 
 // this puts test stuff in global, so we need to tell jsl about that:
 /* jsl:import ../node_modules/nodeunit-plus/index.js */
@@ -61,3 +65,87 @@ test('test deleting nonexistent VM', function(t) {
     );
 });
 
+// Test deleting a VM that is in state "configured"
+test('test deleting "configured" VM', function (t) {
+    /*
+     * A zone will go into "configured" if it is created with a LOFS mount that
+     * does not exist in the GZ.
+     */
+
+    var source_fs = '/this/path/does/not/exist/nor/should/it';
+    var target_fs = '/foo';
+
+    var image_uuid = vmtest.CURRENT_SMARTOS_UUID;
+    var payload = {
+        alias: 'test-delete-configure-' + process.pid,
+        brand: 'joyent-minimal',
+        image_uuid: image_uuid,
+        autoboot: false,
+        do_not_inventory: true,
+        filesystems: [
+            {
+                source: source_fs,
+                target: target_fs,
+                type: 'lofs',
+                option: [
+                    'ro'
+                ]
+            }
+
+        ]
+    };
+    var uuid;
+
+    vasync.pipeline({funcs: [
+        function (_, cb) {
+            /*
+             * We expect an error here that looks like:
+             *
+             * /could not verify fs $target_fs: could not access $source_fs/
+             */
+            var expectedError = f('could not verify fs %s: ' +
+                'could not access %s', target_fs, source_fs);
+
+            VM.create(payload, function (err, vmobj) {
+                t.ok(err, 'error creating VM');
+
+                if (err) {
+                    assert.string(err.message, 'err.message');
+                    t.ok(err.message.indexOf(expectedError) >= 0,
+                        'found expected error message: ' + expectedError);
+                }
+
+                uuid = vmobj && vmobj.uuid;
+                t.ok(uuid, 'VM uuid found: ' + uuid);
+                assert.uuid(uuid, 'uuid');
+
+                cb();
+            });
+        },
+        function (_, cb) {
+            /*
+             * The load should succeed and the state should be "configured".
+             */
+            VM.load(uuid, function (err, vmobj) {
+                common.ifError(t, err, 'VM.load ' + uuid);
+
+                var state = vmobj && vmobj.state;
+                t.equal(state, 'configured', 'VM in state configured');
+
+                cb();
+            });
+        },
+        function (_, cb) {
+            /*
+             * Delete the "configured" VM - this should succeed without issue.
+             */
+            VM.delete(uuid, function (err) {
+                common.ifError(t, err, 'VM.delete ' + uuid);
+
+                cb();
+            });
+        }
+    ]}, function (err) {
+        t.end();
+    });
+});
-- 
2.21.0

