commit 4b2a37771e3195796c5e3675394fa7f8a20d3934 (refs/changes/97/3697/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-03-20T17:37:39+01:00 (1 year, 7 months ago)
    
    TRITON-247 SAPI POST /history shouldn't crash when the provided changes are not valid

diff --git a/lib/server/endpoints/history.js b/lib/server/endpoints/history.js
index 2ee9d98..bd9e4ea 100644
--- a/lib/server/endpoints/history.js
+++ b/lib/server/endpoints/history.js
@@ -19,11 +19,27 @@ var verror = require('verror');
 var validateParams =
     require('./validation').validateParams;
 
+function validateHistory(history) {
+    if (!history.changes || typeof (history.changes) !== 'object') {
+        return (new restify.InvalidArgumentError('Invalid history changes'));
+    }
+
+    if (!history.uuid || typeof (history.uuid) !== 'string') {
+        return (new restify.InvalidArgumentError('Invalid history UUID'));
+    }
+
+    if (!history.started || typeof (history.started) !== 'number') {
+        return (new restify.InvalidArgumentError('Invalid history start time'));
+    }
+
+    return (null);
+}
+
 function History() {}
 
 var HISTORY_KEYS = ['started', 'changes', 'uuid'];
 
-History.create = function (req, res, next) {
+History.create = function create(req, res, next) {
     var model = this.model;
 
     var params = {};
@@ -38,47 +54,56 @@ History.create = function (req, res, next) {
     var valError = validateParams(
         { keys: HISTORY_KEYS,
           params: params });
+
+    if (valError) {
+        next(valError);
+        return;
+    }
+
+    valError = validateHistory(params);
     if (valError) {
         next(valError);
         return;
     }
 
+
     model.createHistory(params, function (err, app) {
         if (err) {
             model.log.error(err, 'failed to create history item');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(app);
-        return (next());
+        next();
     });
-
-    return (null);
 };
 
-History.list = function (req, res, next) {
+History.list = function list(req, res, next) {
     var model = this.model;
 
     var filters = {};
     if (req.params.since) {
         try {
             filters.since = new Date(req.params.since).getTime();
-        } catch (e) {
+        } catch (_) {
             var msg = util.format('Invalid param \'since\': %s',
                     req.params.since);
             model.log.debug(msg);
-            return (next(new restify.InvalidArgumentError(msg)));
+            next(new restify.InvalidArgumentError(msg));
+            return;
         }
     }
 
     if (req.params.until) {
         try {
             filters.until = new Date(req.params.until).getTime();
-        } catch (e2) {
+        } catch (__) {
             var m2 = util.format('Invalid param \'until\': %s',
                     req.params.until);
             model.log.debug(m2);
-            return (next(new restify.InvalidArgumentError(m2)));
+            next(new restify.InvalidArgumentError(m2));
+            return;
         }
     }
 
@@ -88,27 +113,29 @@ History.list = function (req, res, next) {
     model.listHistory(filters, opts, function (err, apps) {
         if (err) {
             model.log.error(err, 'failed to list history');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(apps);
-        return (next());
+        next();
     });
 };
 
-History.get = function (req, res, next) {
+History.get = function get(req, res, next) {
     var model = this.model;
 
     model.getHistory(req.params.uuid, function (err, app) {
         if (err) {
-            return (next(err));
+            next(err);
+            return;
         }
         res.send(app);
-        return (next());
+        next();
     });
 };
 
-History.update = function (req, res, next) {
+History.update = function update(req, res, next) {
     var model = this.model;
 
     var uuid = req.params.uuid;
@@ -118,17 +145,16 @@ History.update = function (req, res, next) {
     model.updateHistory(uuid, changes, 'set', function (err, app) {
         if (err) {
             model.log.error(err, 'failed to update history item');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(app);
-        return (next());
+        next();
     });
-
-    return (null);
 };
 
-History.del = function (req, res, next) {
+History.del = function del(req, res, next) {
     var model = this.model;
 
     model.delHistory(req.params.uuid, function (err) {
diff --git a/test/history.test.js b/test/history.test.js
index 5a8ba76..f359e67 100644
--- a/test/history.test.js
+++ b/test/history.test.js
@@ -5,15 +5,13 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * test/applications.test.js: test /applications endpoints
  */
 
-var async = require('async');
-var common = require('./common');
 var node_uuid = require('node-uuid');
 var util = require('util');
 
@@ -41,7 +39,8 @@ helper.before(function (cb) {
     });
 
     if (server) {
-        return (cb(null));
+        cb(null);
+        return;
     }
 
     helper.startSapiServer(function (err, res) {
@@ -113,7 +112,7 @@ test('create w/ invalid changes', function (t) {
 
     this.client.post(URI, app, function (err, req, res, obj) {
         t.ok(err);
-        t.equal(res.statusCode, 500);
+        t.equal(res.statusCode, 409);
         t.end();
     });
 });
@@ -128,7 +127,7 @@ test('create w/ invalid started', function (t) {
 
     this.client.post(URI, app, function (err, req, res, obj) {
         t.ok(err);
-        t.equal(res.statusCode, 500);
+        t.equal(res.statusCode, 409);
         t.end();
     });
 });
