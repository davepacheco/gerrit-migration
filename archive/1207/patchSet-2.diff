From db8c18065677aa0a3235fdc41efb18f2a5f0d367 Mon Sep 17 00:00:00 2001
From: Trent Mick <trent.mick@joyent.com>
Date: Thu, 5 Jan 2017 09:51:17 -0800
Subject: [PATCH] MANTA-3071 mls reports no results, no error

---
 CHANGES.md    |  3 +++
 bin/mls       | 21 ++++++++++++++++-----
 bin/mrm       | 19 +++++++++++++------
 bin/mrmdir    | 19 +++++++++++++------
 lib/client.js | 13 +++++++++++++
 5 files changed, 58 insertions(+), 17 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 58b56f4..9b435c2 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,9 @@
 
 ## not yet released
 
+- MANTA-3071 Fix case where a transient error in one request to the Manta
+  server can make `mls` exit 0 without reporting results.
+
 ## 4.1.1
 
 - joyent/node-manta#293 '~~/' works, '~~' does now too.
diff --git a/bin/mls b/bin/mls
index b84568d..ec9fb70 100755
--- a/bin/mls
+++ b/bin/mls
@@ -204,13 +204,24 @@ function printEntry(opts, obj) {
     }
 
     options.paths.forEach(function (p) {
-        client.ls(p, options, function (err, res) {
-            if (err) {
-                if (err.name === 'InvalidDirectoryError') {
-                    printEntry(options, err.info);
+        client.ls(p, options, function (lsErr, res) {
+            if (lsErr) {
+                if (lsErr.name === 'InvalidDirectoryError') {
+                    printEntry(options, lsErr.info);
                     cb();
                 } else {
-                    client.get(p, cb);
+                    /*
+                     * The first request done by `client.ls` is a HEAD, for
+                     * which there is no response body with good error details.
+                     * Fallback to `client.get` to hopefully get helpful error
+                     * details.
+                     *
+                     * If `client.get` succeeds (e.g. if lsErr was transient),
+                     * then use the lsErr that we have.
+                     */
+                    client.get(p, {returnErrorOnly: true}, function (getErr) {
+                        cb(getErr || lsErr);
+                    });
                 }
                 return;
             }
diff --git a/bin/mrm b/bin/mrm
index 6753d60..55f30da 100755
--- a/bin/mrm
+++ b/bin/mrm
@@ -107,12 +107,19 @@ function printEntry(obj) {
             return;
         }
 
-        client.info(p, function (err, info) {
-            if (err) {
-                client.get(p, function (err2) {
-                    ifError(err2);
-                    // We *shouldn't* ever hit this...
-                    ifError(err);
+        client.info(p, function (infoErr, info) {
+            if (infoErr) {
+                /*
+                 * The first request done by `client.info` is a HEAD, for
+                 * which there is no response body with good error details.
+                 * Fallback to `client.get` to hopefully get helpful error
+                 * details.
+                 *
+                 * If `client.get` succeeds (e.g. if infoErr was transient),
+                 * then use the `infoErr` we have.
+                 */
+                client.get(p, {returnErrorOnly: true}, function (getErr) {
+                    ifError(getErr || infoErr);
                 });
                 return;
             }
diff --git a/bin/mrmdir b/bin/mrmdir
index 997e29b..eb8d13b 100755
--- a/bin/mrmdir
+++ b/bin/mrmdir
@@ -89,12 +89,19 @@ function printEntry(obj) {
             return;
         }
 
-        client.info(p, function (err, info) {
-            if (err) {
-                client.get(p, function (err2) {
-                    ifError(err2);
-                    // We *shouldn't* ever hit this...
-                    ifError(err);
+        client.info(p, function (infoErr, info) {
+            if (infoErr) {
+                /*
+                 * The first request done by `client.info` is a HEAD, for
+                 * which there is no response body with good error details.
+                 * Fallback to `client.get` to hopefully get helpful error
+                 * details.
+                 *
+                 * If `client.get` succeeds (e.g. if infoErr was transient),
+                 * then use the `infoErr` we have.
+                 */
+                client.get(p, {returnErrorOnly: true}, function (getErr) {
+                    ifError(getErr || infoErr);
                 });
                 return;
             }
diff --git a/lib/client.js b/lib/client.js
index 8de4b24..8f353a3 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -767,6 +767,12 @@ MantaClient.prototype.chattr = function chattr(p, opts, cb) {
  * Parameters:
  *  - p: string path
  *  - opts: (optional) object block where you can set headers, et al.
+ *      - opts.returnErrorOnly {Boolean} If true, this means the caller is
+ *        only interested in the response if it is an error. (It is used by
+ *        `mls` and others to attempt to get better error details after a
+ *        failed HEAD request.) If the request succeeds, then close the stream
+ *        and callback.
+ *      - See `creatOptions` for other options.
  *  - cb: callback of the form f(err, stream)
  */
 MantaClient.prototype.get = function get(p, opts, cb) {
@@ -775,6 +781,7 @@ MantaClient.prototype.get = function get(p, opts, cb) {
         cb = opts;
         opts = {};
     }
+    assert.optionalBool(opts.returnErrorOnly, 'opts.returnErrorOnly');
     assert.func(cb, 'callback');
 
     var _path = this.path(p);
@@ -825,6 +832,12 @@ MantaClient.prototype.get = function get(p, opts, cb) {
                 return;
             }
 
+            if (opts.returnErrorOnly) {
+                res.destroy();
+                cb(null, null, res);
+                return;
+            }
+
             res.pause();
 
             cb(null, stream, res);
-- 
2.17.2 (Apple Git-113)

