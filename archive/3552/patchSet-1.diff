From e5944bd89de618e91374e8c9b3faff60967d1a21 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 6 Mar 2018 16:49:04 -0800
Subject: [PATCH] TRITON-210 cloudapi should use package.brand

---
 docs/index.md                 |   6 +
 lib/machines.js               | 202 ++++++++++++++--------
 lib/packages.js               |  24 +--
 package.json                  |  38 ++---
 test/getCreateOptions.test.js | 312 ++++++++++++++++++++++++++++++++++
 test/packages.test.js         | 239 ++++++++++++++++++++------
 6 files changed, 669 insertions(+), 152 deletions(-)
 create mode 100644 test/getCreateOptions.test.js

diff --git a/docs/index.md b/docs/index.md
index 582fdb4..3247168 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -908,6 +908,12 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+## 8.8.0
+
+- CreateMachine now takes brand from the package's `brand` parameter if brand is
+  not specified by the image, and ensures that package and image brand
+  requirements do not conflict.
+- Fixed some bugs in the `brand` handling for packages.
 
 ## 8.7.0
 
diff --git a/lib/machines.js b/lib/machines.js
index f2e3451..7d42548 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -54,7 +54,7 @@ var PKG_USED_PARAMS = ['uuid', 'max_physical_memory', 'name', 'version',
 
 var DEFAULT_CONTAINER_BRAND = 'joyent';
 var DEFAULT_HVM_BRAND = 'kvm';
-var VALID_BRANDS = ['bhyve', 'joyent', 'kvm'];
+var VALID_BRANDS = ['bhyve', 'joyent', 'joyent-minimal', 'kvm', 'lx'];
 
 var sprintf = util.format;
 
@@ -293,6 +293,10 @@ function getListOptions(req) {
                                         req.params.type);
     }
 
+    if (req.params.brand) {
+        opts.brand = req.params.brand;
+    }
+
     if (req.params.image) {
         opts.image_uuid = req.params.image;
     }
@@ -342,76 +346,30 @@ function getListOptions(req) {
 
 
 /*
- * Convert the various arguments passed in over HTTP on POST to options which
- * vmapi.createVm() understands.
+ * Build the opts.network option for a provision from the data stored in the
+ * req.
+ *
+ * Inputs:
+ *
+ *  req object that has:
+ *
+ *   req.external_nets -- an array of external network uuids (optional)
+ *   req.getVersion()  -- a function that returns a semver version
+ *   req.networks      -- an array of networks to be attached to the new machine
+ *   req.params        -- an object with additional provision parameters
+ *   req.pkg           -- a package object
+ *
+ * Return Value:
+ *
+ *   This function returns an array of network objects suitable for passing to
+ *   vmapi as part of the provision.
+ *
  */
-function getCreateOptions(req) {
-    assert.ok(req);
-
-    assert.ok(req.params);
-    assert.ok(req.pkg);
-    assert.ok(req.dataset);
-
+function getNetworks(req) {
     var params = req.params;
-    var pkg    = req.pkg;
-    var img    = req.dataset;
-
-    var brand = img.requirements && img.requirements.brand;
-    if (!brand) {
-        if (req.params.brand && VALID_BRANDS.indexOf(req.params.brand) !== -1) {
-            brand = req.params.brand;
-        } else {
-            brand = img.brand || (img.type === 'zvol'
-                ? DEFAULT_HVM_BRAND : DEFAULT_CONTAINER_BRAND);
-        }
-    }
-
-    var opts = {
-        'package': pkg.uuid,
-        ram: pkg.max_physical_memory,
-        brand: brand,
-        billing_id: pkg.uuid
-    };
-
-    if (pkg.os) {
-        opts.os = pkg.os;
-    }
-
-    if (pkg.fss) {
-        opts.cpu_shares = Math.ceil(pkg.fss);
-    }
-
-    if (['bhyve', 'kvm'].indexOf(brand) !== -1) {
-        opts.disks = [
-            { image_uuid: img.uuid },
-            { size: parseInt(pkg.quota, 10) }
-        ];
-
-        if (brand === 'bhyve') {
-            // With bhyve we also need to always set boot=true for the image
-            // disk. This avoids the problem described in OS-6604.
-            opts.disks[0].boot = true;
-        }
-
-        // PUBAPI-652: Fixed 10GiB quota for root dataset of all the KVM
-        // machines. User data isn't stored in a zone's root dataset, but a
-        // separate one.
-        opts.quota = 10;
-    } else {
-        opts.image_uuid = img.uuid;
-        opts.image_os   = img.os;
-        opts.image_name = img.name;
-
-        if (Number(pkg.quota)) {
-            opts.quota = Number(pkg.quota) / 1024;
-        }
-    }
-
-    if (params.deletion_protection === true) {
-        opts.indestructible_zoneroot = true;
-    }
-
+    var pkg = req.pkg;
     var networkUuids = [];
+    var newNetworks = [];
 
     // Starting in version 7.3, CloudAPI supports what we call interface-
     // centric provisioning. Traditionally, CloudAPI accepted provisioning
@@ -555,11 +513,11 @@ function getCreateOptions(req) {
 
     checkNetworks(req, networkUuids);
 
-    opts.networks = networkUuids;
+    newNetworks = networkUuids;
     if (typeof (networkUuids[0]) === 'object') {
         // We only support ipv4_uuid, and ipv4_ips for now, so only allow them,
         // just to be safe:
-        opts.networks = opts.networks.map(function (n) {
+        newNetworks = newNetworks.map(function (n) {
             var netObj = {};
 
             // If a user doesn't specify ipv4_ips we tell vmapi to only give us
@@ -576,15 +534,15 @@ function getCreateOptions(req) {
 
     } else {
         // Always use the new format for networks ("ipv4_uuid" vs. "uuid"):
-        opts.networks = networkUuids.map(function (netUuid) {
+        newNetworks = networkUuids.map(function (netUuid) {
             return { ipv4_uuid: netUuid };
         });
     }
 
     // if we have any external networks, make the first one the primary
     if (req.external_nets.length) {
-        for (var i = 0; i !== opts.networks.length; i++) {
-            var net = opts.networks[i];
+        for (var i = 0; i !== newNetworks.length; i++) {
+            var net = newNetworks[i];
 
             if (req.external_nets.indexOf(net.ipv4_uuid) !== -1) {
                 net.primary = true;
@@ -593,6 +551,99 @@ function getCreateOptions(req) {
         }
     }
 
+    return (newNetworks);
+}
+
+/*
+ * Convert the various arguments passed in over HTTP on POST to options which
+ * vmapi.createVm() understands.
+ */
+function getCreateOptions(req) {
+    assert.object(req, 'req');
+    assert.object(req.dataset, 'req.dataset');
+    assert.optionalArray(req.external_nets, 'req.external_nets');
+    assert.optionalObject(req.networks, 'req.networks');
+    assert.object(req.params, 'req.params');
+    assert.object(req.pkg, 'req.pkg');
+
+    var brand;
+    var img = req.dataset;
+    var opts = {};
+    var params = req.params;
+    var pkg = req.pkg;
+
+    if (img.requirements && img.requirements.brand !== undefined) {
+        if (VALID_BRANDS.indexOf(img.requirements.brand) === -1) {
+            throw new InvalidArgumentError(
+                'Image requires unknown brand');
+        }
+        brand = img.requirements.brand;
+    } else if (pkg.brand !== undefined) {
+        if (VALID_BRANDS.indexOf(pkg.brand) === -1) {
+            throw new InvalidArgumentError(
+                'Package requires unknown brand');
+        }
+        brand = pkg.brand;
+    } else {
+        brand = img.brand || (img.type === 'zvol'
+            ? DEFAULT_HVM_BRAND : DEFAULT_CONTAINER_BRAND);
+    }
+
+    // No matter how we set the brand, we want to make sure it's compatible with
+    // the package if package requires a brand.
+    if (pkg.brand !== undefined && pkg.brand !== brand) {
+         throw new InvalidArgumentError(
+             'Package brand requirement not met by image');
+    }
+
+    opts = {
+        'package': pkg.uuid,
+        ram: pkg.max_physical_memory,
+        brand: brand,
+        billing_id: pkg.uuid
+    };
+
+    if (pkg.os) {
+        opts.os = pkg.os;
+    }
+
+    if (pkg.fss) {
+        opts.cpu_shares = Math.ceil(pkg.fss);
+    }
+
+    if (['bhyve', 'kvm'].indexOf(brand) !== -1) {
+        opts.disks = [
+            { image_uuid: img.uuid },
+            { size: parseInt(pkg.quota, 10) }
+        ];
+
+        if (brand === 'bhyve') {
+            // With bhyve we also need to always set boot=true for the image
+            // disk. This avoids the problem described in OS-6604.
+            opts.disks[0].boot = true;
+        }
+
+        // PUBAPI-652: Fixed 10GiB quota for root dataset of all the KVM
+        // machines. User data isn't stored in a zone's root dataset, but a
+        // separate one.
+        opts.quota = 10;
+    } else {
+        opts.image_uuid = img.uuid;
+        opts.image_os   = img.os;
+        opts.image_name = img.name;
+
+        if (Number(pkg.quota)) {
+            opts.quota = Number(pkg.quota) / 1024;
+        }
+    }
+
+    if (params.deletion_protection === true) {
+        opts.indestructible_zoneroot = true;
+    }
+
+    // Build the network payload
+    opts.networks = getNetworks(req);
+
     if (typeof (params.firewall_enabled) !== 'undefined') {
         opts.firewall_enabled = params.firewall_enabled;
     }
@@ -2396,6 +2447,7 @@ function mount(server, before, pre, post) {
 ///--- Exports
 
 module.exports = {
-    mount: mount,
-    loadMachine: loadMachine
+    _getCreateOptions: getCreateOptions, // exported for testing only
+    loadMachine: loadMachine,
+    mount: mount
 };
diff --git a/lib/packages.js b/lib/packages.js
index 98d1fc4..232087e 100644
--- a/lib/packages.js
+++ b/lib/packages.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -37,18 +37,18 @@ function translate(req, pkg) {
     assert.ok(pkg);
 
     var p = {
-        name:   pkg.name,
+        brand: pkg.brand,
+        'default': pkg['default'] || false,
+        disk: pkg.quota,
+        id: pkg.uuid,
+        lwps: pkg.max_lwps,
         memory: pkg.max_physical_memory,
-        disk:   pkg.quota,
-        swap:   pkg.max_swap,
-        vcpus:  pkg.vcpus || 0,
-        lwps:   pkg.max_lwps,
-        'default': pkg['default'] || false
+        name: pkg.name,
+        swap: pkg.max_swap,
+        vcpus: pkg.vcpus || 0,
+        version: pkg.version
     };
 
-    p.id = pkg.uuid;
-    p.version = pkg.version;
-
     if (pkg.description) {
         p.description = pkg.description;
     }
@@ -203,6 +203,10 @@ function list(req, res, next) {
     var params = req.params;
     var opts = {};
 
+    if (params.brand) {
+        opts.brand = params.brand;
+    }
+
     if (params.name) {
         opts.name = params.name;
     }
diff --git a/package.json b/package.json
index 2f349c3..7299888 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "8.7.0",
+    "version": "8.8.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -13,32 +13,32 @@
         "url": "git+ssh://git@github.com:joyent/sdc-cloudapi.git"
     },
     "dependencies": {
-        "vasync": "1.6.4",
+        "aperture": "git+https://github.com/joyent/node-aperture.git#016977",
+        "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
+        "asn1": "0.1.11",
+        "assert-plus": "1.0.0",
+        "bunyan": "1.8.1",
+        "clone": "0.1.5",
+        "ctype": "0.5.2",
+        "cueball": "2.1.1",
         "filed": "0.0.7",
         "http-signature": "1.1.0",
-        "mime": "1.2.7",
+        "joyent-schemas": "git+https://github.com/joyent/schemas.git#caf3a226ed0707f5da897e1da151cc6d97fccda2",
+        "jsprim": "0.6.1",
+        "kang": "1.1.0",
+        "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d582e1d9d338b7082d61f34ba8d1bbc540a",
+        "krill": "1.0.1",
         "libuuid": "0.2.1",
+        "mahi": "2.0.1",
+        "mime": "1.2.7",
+        "nodemailer": "0.3.29",
         "nopt": "2.0.0",
         "restify": "4.3.0",
-        "bunyan": "1.8.1",
-        "cueball": "2.1.1",
-        "kang": "1.1.0",
-        "krill": "1.0.1",
         "sdc-clients": "10.4.0",
-        "ufds": "1.3.0",
         "semver": "5.4.1",
-        "nodemailer": "0.3.29",
-        "clone": "0.1.5",
-        "assert-plus": "1.0.0",
-        "asn1": "0.1.11",
-        "ctype": "0.5.2",
-        "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d582e1d9d338b7082d61f34ba8d1bbc540a",
-        "aperture": "git+https://github.com/joyent/node-aperture.git#016977",
-        "mahi": "2.0.1",
-        "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
-        "joyent-schemas": "git+https://github.com/joyent/schemas.git#caf3a226ed0707f5da897e1da151cc6d97fccda2",
-        "jsprim": "0.6.1",
         "strsplit": "1.0.0",
+        "ufds": "1.3.0",
+        "vasync": "1.6.4",
         "verror": "1.10.0",
         "xregexp": "3.1.0"
     },
diff --git a/test/getCreateOptions.test.js b/test/getCreateOptions.test.js
new file mode 100644
index 0000000..5314d6e
--- /dev/null
+++ b/test/getCreateOptions.test.js
@@ -0,0 +1,312 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var fs = require('fs');
+
+var test = require('tape').test;
+
+var getCreateOptions = require('../lib/machines')._getCreateOptions;
+
+// --- Globals
+
+var VERSION =
+    JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
+
+var IMAGES = {
+    'smartos-1.6.3': {
+        name: 'sdc-smartos',
+        os: 'smartos',
+        type: 'zone-dataset',
+        uuid: 'fd2cc906-8938-11e3-beab-4359c665ac99',
+        version: '1.6.3'
+    },
+    'ubuntu-bhyve-17.10': {
+        uuid: '38396fc7-2472-416b-e61b-d833b32bd088',
+        name: 'ubuntu-bhyve-17.10',
+        version: '20180207',
+        type: 'zvol',
+        os: 'linux',
+        requirements: {
+          brand: 'bhyve'
+        }
+    },
+    'ubuntu-bhyve-17.10-noBrandReq': {
+        uuid: '38396fc7-2472-416b-e61b-d833b32bd088',
+        name: 'ubuntu-bhyve-17.10',
+        version: '20180207',
+        type: 'zvol',
+        os: 'linux'
+    },
+    'ubuntu-certified-16.04': {
+        name: 'ubuntu-certified-16.04',
+        os: 'linux',
+        type: 'zvol',
+        uuid: 'd42c37f4-2956-413f-b12a-32a79dfe84af',
+        version: '20180109'
+    }
+};
+
+// --- Helpers
+
+//
+// The following optional parameters are also used in getCreateOptions but not
+// required, so not added if unset:
+//
+// img.brand
+// img.disk_driver
+// img.nic_driver
+// img.requirements.brand
+// img.type=='zvol'
+//
+// pkg.brand
+// pkg.fss
+// pkg.os
+// pkg.* (any arbitrary parameter)
+//
+// params.administrator_pw
+// params.affinity
+// params.deletion_protection
+// params.firewall_enabled
+// params.locality
+// params.metadata.credentials
+// params.metadata.*
+// params.password
+// params.server_uuid
+// params.tag.*
+//
+// root_authorized_keys
+//
+// config.test [boolean]
+//
+
+function buildReq(options) {
+    var req = {};
+    var version = VERSION;
+
+    if (options.pkg === undefined) {
+        req.pkg = {};
+    } else {
+        req.pkg = options.pkg;
+    }
+
+    if (options.img === undefined) {
+        req.img = {};
+    } else {
+        req.img = options.img;
+    }
+
+    if (options.root_authorized_keys !== undefined) {
+        req.root_authorized_keys = options.root_authorized_keys;
+    }
+
+    // pkg.uuid is required
+    if (req.pkg.uuid === undefined) {
+        req.pkg.uuid = 'b38c6e18-1fe4-11e8-82ac-6bf052d2fa79';
+    }
+
+    // pkg.max_physical_memory is required
+    if (req.pkg.max_physical_memory === undefined) {
+        req.pkg.max_physical_memory = 256;
+    }
+
+    // pkg.quota is required
+    if (req.pkg.quota === undefined) {
+        req.pkg.quota = 10 * 1024; // MiB
+    }
+
+    // img.uuid is required
+    if (req.img.uuid === undefined) {
+        req.img.uuid = 'e306f7a1-069b-4830-8d49-96eb21db975d';
+    }
+
+    // img.os is required
+    if (req.img.os === undefined) {
+        req.img.os = 'linux';
+    }
+
+    // img.name is required
+    if (req.img.name === undefined) {
+        req.img.name = 'ubuntu-16.04';
+    }
+
+    // config is required
+    if (options.config === undefined) {
+        req.config = {};
+    } else {
+        req.config = options.config;
+    }
+
+    // need req.params
+    if (options.params === undefined) {
+        req.params = {};
+    } else {
+        req.params = options.params;
+    }
+
+    // params.networks is required
+    if (req.params.networks === undefined) {
+        req.params.networks = [
+            '2b6683a9-50bb-4d79-a0e6-f2576a93f2fb'
+        ];
+    }
+
+    // req.networks is "all networks"
+    if (options.allNetworks === undefined) {
+        req.networks = [
+            '2b6683a9-50bb-4d79-a0e6-f2576a93f2fb'
+        ];
+    } else {
+        req.networks = options.allNetworks;
+    }
+
+    // req.external_nets is "external networks"
+    if (options.externalNetworks === undefined) {
+        req.external_nets = [];
+    } else {
+        req.external_nets = options.externalNetworks;
+    }
+
+    if (options.version !== undefined) {
+        version = options.version;
+    }
+
+    req.getVersion = function _getVersion() {
+        return (version);
+    };
+
+    // rename img -> dataset
+    req.dataset = req.img;
+    delete req.img;
+
+    return (req);
+}
+
+
+
+
+
+// --- Tests
+
+test('getCreateOptions sets brand to "joyent" by default', function (t) {
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['smartos-1.6.3']
+    });
+
+    createOpts = getCreateOptions(req);
+
+    t.equal(createOpts.brand, 'joyent', 'default brand should be joyent');
+    t.end();
+});
+
+
+test('getCreateOptions sets brand to "kvm" by when img.type === zvol',
+    function (t) {
+
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['ubuntu-certified-16.04']
+    });
+
+    createOpts = getCreateOptions(req);
+
+    t.equal(createOpts.brand, 'kvm', 'default brand should be kvm for zvol');
+    t.end();
+});
+
+
+test('getCreateOptions sets brand to "bhyve" by when img.requirements.brand ' +
+    '=== bhyve', function (t) {
+
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['ubuntu-bhyve-17.10']
+    });
+
+    createOpts = getCreateOptions(req);
+
+    t.equal(createOpts.brand, 'bhyve',
+        'brand should be bhyve when image requires');
+    t.end();
+});
+
+
+test('getCreateOptions sets brand to "bhyve" by when pkg.brand === bhyve',
+    function (t) {
+
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['ubuntu-bhyve-17.10-noBrandReq'],
+        pkg: {
+            brand: 'bhyve'
+        }
+    });
+
+    createOpts = getCreateOptions(req);
+
+    t.equal(createOpts.brand, 'bhyve',
+        'brand should be bhyve when package specifies');
+    t.end();
+});
+
+
+test('getCreateOptions blows up when pkg.brand is unknown',
+    function (t) {
+
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['ubuntu-bhyve-17.10-noBrandReq'],
+        pkg: {
+            brand: 'sphygmomanometer'
+        }
+    });
+
+    t.throws(function _getPayload() {
+        createOpts = getCreateOptions(req);
+        t.equal(createOpts, undefined, 'should not have createOpts');
+    }, /Package requires unknown brand/,
+        'invalid pkg.brand should result in exception');
+
+    t.end();
+});
+
+
+test('getCreateOptions blows up when pkg.brand and img.requirements.brand ' +
+    'conflict', function (t) {
+
+    var createOpts;
+    var req;
+
+    req = buildReq({
+        img: IMAGES['ubuntu-bhyve-17.10'], // requires bhyve brand
+        pkg: {
+            brand: 'kvm'
+        }
+    });
+
+    t.throws(function _getPayload() {
+        createOpts = getCreateOptions(req);
+        t.equal(createOpts, undefined, 'should not have createOpts');
+    }, /Package brand requirement not met by image/,
+        'conflicting pkg.brand and img.requirements.brand should result in ' +
+        'exception');
+
+    t.end();
+});
diff --git a/test/packages.test.js b/test/packages.test.js
index f51b9e2..94073ba 100644
--- a/test/packages.test.js
+++ b/test/packages.test.js
@@ -5,11 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var test = require('tape').test;
 var util = require('util');
+
+var semver = require('semver');
+var test = require('tape').test;
+var vasync = require('vasync');
+
 var common = require('./common');
 
 var checkNotFound = common.checkNotFound;
@@ -20,43 +24,62 @@ var checkNotFound = common.checkNotFound;
 
 // May or not be created by previous test run or whatever else:
 var SDC_512 = {
-    uuid: '4667d1b8-0bc7-466c-bf62-aae98ba5efa9',
-    name: 'sdc_512_no_ownership',
-    version: '1.0.0',
-    max_physical_memory: 512,
-    quota: 20480,
-    max_swap: 1024,
+    active: true,
     cpu_cap: 150,
-    max_lwps: 2000,
-    zfs_io_priority: 10,
     'default': false,
+    max_lwps: 2000,
+    max_physical_memory: 512,
+    max_swap: 1024,
+    name: 'sdc_512_no_ownership',
+    owner_uuids: ['b99598ca-d56c-4374-8fdd-32e60f4d1592'],
+    quota: 20480,
+    uuid: '4667d1b8-0bc7-466c-bf62-aae98ba5efa9',
     vcpus: 2,
-    active: true,
-    owner_uuids: ['b99598ca-d56c-4374-8fdd-32e60f4d1592']
+    version: '1.0.0',
+    zfs_io_priority: 10
 };
 
 // this differs from SDC_512 because the CLIENT's uuid is never added to
 // owner_uuids in setup
 var SDC_512_NO_PERMISSION = {
-    uuid: '495971fd-3488-46da-b10f-61a088f03e39',
-    name: 'sdc_512_no_permission',
-    version: '1.0.0',
+    active: true,
+    cpu_cap: 150,
+    'default': false,
+    max_lwps: 2000,
     max_physical_memory: 512,
-    quota: 20480,
     max_swap: 1024,
+    name: 'sdc_512_no_permission',
+    owner_uuids: ['b99598ca-d56c-4374-8fdd-32e60f4d1592'],
+    quota: 20480,
+    uuid: '495971fd-3488-46da-b10f-61a088f03e39',
+    vcpus: 2,
+    version: '1.0.0',
+    zfs_io_priority: 10
+};
+
+var SDC_512_BHYVE_BRAND = {
+    active: true,
+    brand: 'bhyve',
     cpu_cap: 150,
-    max_lwps: 2000,
-    zfs_io_priority: 10,
     'default': false,
+    max_lwps: 2000,
+    max_physical_memory: 512,
+    max_swap: 1024,
+    name: 'sdc_512_bhyve',
+    owner_uuids: ['b99598ca-d56c-4374-8fdd-32e60f4d1592'],
+    quota: 20480,
+    uuid: '93b2d408-1fb5-11e8-89ae-7fcbf72c69f8',
     vcpus: 2,
-    active: true,
-    owner_uuids: ['b99598ca-d56c-4374-8fdd-32e60f4d1592']
+    version: '1.0.0',
+    zfs_io_priority: 10
 };
 
 var CLIENTS;
 var CLIENT;
 var SERVER;
 
+var CREATED_SDC_512_BHYVE_BRAND = false;
+var PAPI_VERSION;
 var VIEWABLE_PACKAGE_NAMES;
 var VIEWABLE_PACKAGE_UUIDS;
 
@@ -104,37 +127,99 @@ function searchAndCheck(query, t, checkAttr) {
 
 
 test('setup', function (t) {
-    common.setup(function (_, clients, server) {
+    common.setup(function (ignoredErr, clients, server) {
+        var viewablePkgs = [];
+
         CLIENTS = clients;
         CLIENT  = clients.user;
         SERVER  = server;
 
         SDC_512.owner_uuids.push(CLIENT.account.uuid);
+        SDC_512_BHYVE_BRAND.owner_uuids.push(CLIENT.account.uuid);
 
-        common.addPackage(CLIENT, SDC_512, function (err) {
-            common.addPackage(CLIENT, SDC_512_NO_PERMISSION, function (err2) {
-                CLIENT.papi.list({}, {}, function (err3, pkgs) {
-                    if (err || err2 || err3) {
-                        throw err || err2 || err3;
+        function createPackage(pkg, cb) {
+            common.addPackage(CLIENT, pkg, function _onAdd(err) {
+                t.ifError(err, 'create package ' + pkg.uuid +
+                    ' (' + pkg.name + ')');
+                cb(err);
+            });
+        }
+
+        vasync.pipeline({
+            funcs: [
+                function _checkPapiVersion(_, cb) {
+                    CLIENT.papi.client.get('/ping',
+                        function _onPing(err, req, res) {
+
+                        if (err) {
+                            cb(err);
+                            return;
+                        }
+
+                        PAPI_VERSION = res.headers['api-version'];
+                        t.equal(typeof (PAPI_VERSION), 'string',
+                            'should have api-version header');
+                        if (typeof (PAPI_VERSION) !== 'string') {
+                            // default to first ever version if we can't detect
+                            PAPI_VERSION = '7.0.0';
+                        }
+
+                        t.ok(PAPI_VERSION, 'PAPI version is ' + PAPI_VERSION);
+
+                        cb();
+                    });
+                },
+                function _add512(_, cb) {
+                    createPackage(SDC_512, cb);
+                },
+                function _add512NoPermission(_, cb) {
+                    createPackage(SDC_512_NO_PERMISSION, cb);
+                },
+                function _add512Bhyve(_, cb) {
+                    // 7.1.0 added support for pkg.brand
+                    if (semver.lt(PAPI_VERSION, '7.1.0')) {
+                        t.ok(true, 'skipping "brand" test on ancient PAPI');
+                        cb();
+                        return;
                     }
 
-                    var accUuid = CLIENT.account.uuid;
-                    var viewablePkgs = pkgs.filter(function (pkg) {
-                        var owners = pkg.owner_uuids;
-                        return !owners || owners.indexOf(accUuid) !== -1;
-                    });
+                    CREATED_SDC_512_BHYVE_BRAND = true;
+                    createPackage(SDC_512_BHYVE_BRAND, cb);
+                },
+                function _listPackages(_, cb) {
+                    var accUuid;
 
-                    VIEWABLE_PACKAGE_UUIDS = viewablePkgs.map(function (pkg) {
-                        return pkg.uuid;
-                    });
+                    CLIENT.papi.list({}, {}, function _onList(err, pkgs) {
+                        if (err) {
+                            cb(err);
+                        }
 
-                    VIEWABLE_PACKAGE_NAMES = viewablePkgs.map(function (pkg) {
-                        return pkg.name;
+                        accUuid = CLIENT.account.uuid;
+                        viewablePkgs = pkgs.filter(function (pkg) {
+                            var owners = pkg.owner_uuids;
+                            return !owners || owners.indexOf(accUuid) !== -1;
+                        });
+
+                        cb();
                     });
 
-                    t.end();
-                });
+                }
+            ]
+        },
+        function _addedPackages(err) {
+            if (err) {
+                throw err;
+            }
+
+            VIEWABLE_PACKAGE_UUIDS = viewablePkgs.map(function (pkg) {
+                return pkg.uuid;
+            });
+
+            VIEWABLE_PACKAGE_NAMES = viewablePkgs.map(function (pkg) {
+                return pkg.name;
             });
+
+            t.end();
         });
     });
 });
@@ -156,6 +241,46 @@ test('ListPackages OK', function (t) {
 });
 
 
+test('search packages by brand', function _searchBrand(t) {
+    if (!CREATED_SDC_512_BHYVE_BRAND) {
+        t.ok(true, 'skipping brand tests against ancient PAPI');
+        t.end();
+        return;
+    }
+    CLIENT.get('/my/packages?brand=' + SDC_512_BHYVE_BRAND.brand,
+        function _onGet(err, req, res, body) {
+            var foundCreated = false;
+            t.ifError(err);
+
+            t.equal(res.statusCode, 200);
+            common.checkHeaders(t, res.headers);
+
+            t.ok(Array.isArray(body));
+            t.ok(body.length > 0);
+
+            // All results to our search should have brand=bhyve. We might have
+            // found some other packages that we didn't create, but as long as
+            // they have brand=bhyve, that's fine. We also want to make sure we
+            // also found the one we created.
+
+            body.forEach(function (p) {
+                if (p.id === SDC_512_BHYVE_BRAND.uuid) {
+                    foundCreated = true;
+                }
+                t.equal(p.brand, SDC_512_BHYVE_BRAND.brand, 'package ' +
+                    p.name + ' has brand=' + SDC_512_BHYVE_BRAND.brand);
+            });
+
+            t.equal(foundCreated, true, 'should have found the package we ' +
+                'created (' + SDC_512_BHYVE_BRAND.name + ') with brand=' +
+                SDC_512_BHYVE_BRAND.brand);
+
+            t.end();
+        }
+    );
+});
+
+
 test('search packages by name', function (t) {
     searchAndCheck('name=' + SDC_512.name, t, function (pkg) {
         t.equal(pkg.name, SDC_512.name);
@@ -288,17 +413,35 @@ test('GetPackage 404', function (t) {
 });
 
 
-test('teardown', function (t) {
-    common.deletePackage(CLIENT, SDC_512, function (err) {
-        t.ifError(err);
-
-        common.deletePackage(CLIENT, SDC_512_NO_PERMISSION, function (err2) {
-            t.ifError(err2);
+test('teardown', function _teardown(t) {
 
-            common.teardown(CLIENTS, SERVER, function (err3) {
-                t.ifError(err3, 'teardown success');
-                t.end();
-            });
+    function deletePackage(pkg, cb) {
+        common.deletePackage(CLIENT, pkg, function _onDel(err) {
+            t.ifError(err, 'delete package ' + pkg.uuid +
+                ' (' + pkg.name + ')');
+            cb(err);
+        });
+    }
+
+    vasync.pipeline({
+        funcs: [
+            function _delete512(_, cb) {
+                deletePackage(SDC_512, cb);
+            }, function _delete512NoPermission(_, cb) {
+                deletePackage(SDC_512_NO_PERMISSION, cb);
+            }, function _delete512Bhyve(_, cb) {
+                if (!CREATED_SDC_512_BHYVE_BRAND) {
+                    cb();
+                    return;
+                }
+                deletePackage(SDC_512_BHYVE_BRAND, cb);
+            }
+        ]
+    }, function _onDeleted(err) {
+        t.ifError(err, 'teardown');
+        common.teardown(CLIENTS, SERVER, function _onTeardown(teardownErr) {
+            t.ifError(teardownErr, 'common.teardown');
+            t.end();
         });
     });
 });
-- 
2.21.0

