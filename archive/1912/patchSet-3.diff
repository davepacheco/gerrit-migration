From 4e9d919d5924238d286e0152f7dcab1abec8860a Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 4 May 2017 22:28:14 +0000
Subject: [PATCH] NAPI-414 Allow filtering networks based on address family
 Reviewed by: Robert Mustacchi <rm@joyent.com> Approved by: Jason King
 <jason.king@joyent.com>

---
 docs/index.md                     |   9 ++
 lib/models/network.js             |  19 ++-
 package.json                      |   2 +-
 test/integration/fabrics.test.js  |   1 +
 test/integration/helpers.js       |  14 +-
 test/integration/networks.test.js |  26 ++--
 test/lib/fabric-net.js            |   2 +-
 test/lib/net.js                   |   2 +-
 test/unit/networks-list.test.js   | 223 ++++++++++++++++++++++++++++++
 test/unit/networks.test.js        |  16 ++-
 10 files changed, 291 insertions(+), 23 deletions(-)
 create mode 100644 test/unit/networks-list.test.js

diff --git a/docs/index.md b/docs/index.md
index e19bdef..75cb481 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -220,6 +220,7 @@ it matches *all* of the input parameters.
 | Field            | Type            | Description                                                |
 | ---------------- | --------------- | ---------------------------------------------------------- |
 | fabric           | Boolean         | Whether the network is on a fabric or not                  |
+| family           | String          | Return networks of the given family (one of 'ipv4' or 'ipv6') |
 | name             | String or Array | Network name                                               |
 | vlan_id          | Integer         | VLAN ID                                                    |
 | nic_tag          | String or Array | Nic Tag name                                               |
@@ -251,6 +252,7 @@ it matches *all* of the input parameters.
         "uuid": "1275886f-3fdf-456e-bba6-28e0e2eab58f",
         "name": "admin",
         "vlan_id": 0,
+        "family": "ipv4",
         "subnet": "10.99.99.0/24",
         "netmask": "255.255.255.0",
         "provision_start_ip": "10.99.99.189",
@@ -265,6 +267,7 @@ it matches *all* of the input parameters.
         "uuid": "c9306c59-f0d6-4aa0-aa0c-17d22a6a3f0f",
         "name": "external",
         "vlan_id": 128,
+        "family": "ipv4",
         "subnet": "10.88.88.0/24",
         "netmask": "255.255.255.0",
         "provision_start_ip": "10.88.88.189",
@@ -336,6 +339,7 @@ This sets two static routes:
       "uuid": "dcb499bd-1caf-4ff6-8d70-4e6d5c02dff3",
       "name": "internal",
       "vlan_id": 401,
+      "family": "ipv4",
       "subnet": "10.0.2.0/24",
       "netmask": "255.255.255.0",
       "provision_start_ip": "10.0.2.5",
@@ -385,6 +389,7 @@ specified in the update are changed, leaving all others unchanged.
       "uuid": "2c670e67-bcd1-44c8-b59c-aaf7d8cfa17b",
       "name": "admin",
       "vlan_id": 0,
+      "family": "ipv4",
       "subnet": "10.99.99.0/24",
       "netmask": "255.255.255.0",
       "provision_start_ip": "10.99.99.37",
@@ -423,6 +428,7 @@ All fields are optional.
       "uuid": "dcb499bd-1caf-4ff6-8d70-4e6d5c02dff3",
       "name": "internal",
       "vlan_id": 401,
+      "family": "ipv4",
       "subnet": "10.0.2.0/24",
       "netmask": "255.255.255.0",
       "provision_start_ip": "10.0.2.5",
@@ -820,6 +826,7 @@ All parameters are optional.
         "provision_end_ip": "10.0.1.254",
         "provision_start_ip": "10.0.1.2",
         "vlan_id": 44,
+        "family": "ipv4",
         "subnet": "10.0.1.0/24",
         "uuid": "4944e6d9-d3ee-462c-b5a6-1c953551ffcf",
         "fabric": true,
@@ -876,6 +883,7 @@ but with some fields removed:
       "provision_end_ip": "10.0.1.254",
       "provision_start_ip": "10.0.1.2",
       "vlan_id": 44,
+      "family": "ipv4",
       "subnet": "10.0.1.0/24",
       "uuid": "4944e6d9-d3ee-462c-b5a6-1c953551ffcf",
       "fabric": true,
@@ -926,6 +934,7 @@ All parameters are optional.
       "provision_end_ip": "10.0.1.254",
       "provision_start_ip": "10.0.1.2",
       "vlan_id": 44,
+      "family": "ipv4",
       "subnet": "10.0.1.0/24",
       "uuid": "4944e6d9-d3ee-462c-b5a6-1c953551ffcf",
       "fabric": true,
diff --git a/lib/models/network.js b/lib/models/network.js
index 951d259..10b2ef7 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -67,12 +67,18 @@ var BUCKET = {
     schema: {
         index: {
             fabric: { type: 'boolean' },
+            gateway_addr: { type: 'ip' },
             mtu: { type: 'number' },
             name_str: { type: 'string', unique: true },
             nic_tag: { type: 'string' },
             owner_uuids_arr: { type: '[string]' },
+            provision_end_ip_addr: { type: 'ip' },
+            provision_start_ip_addr: { type: 'ip' },
+            resolver_addrs: { type: '[ip]' },
             subnet: { type: 'subnet' },
+            subnet_bits: { type: 'number' },
             subnet_start: { type: 'ip' },
+            subnet_type: { type: 'string' },
             uuid: { type: 'string', unique: true },
             v: { type: 'number' },
             vlan_id: { type: 'number' },
@@ -86,7 +92,7 @@ var BUCKET = {
         }
     },
     morayVersion: 2,        // moray version must be > than this
-    version: 3
+    version: 4
 };
 // Names that are allowed to be used in the "fields" filter
 var VALID_FIELDS = [
@@ -209,6 +215,7 @@ var LIST_SCHEMA = {
     optional: {
         uuid: validate.string,
         fabric: validate.bool,
+        family: validate.enum([ 'ipv4', 'ipv6' ]),
         limit: validate.limit,
         name: validate.stringOrArray,
         nic_tag: validate.stringOrArray,
@@ -1028,12 +1035,12 @@ function Network(params) {
                 params.provision_end_ip_addr || params.provision_end_ip),
         subnet: subnet,
         subnet_start: subnet_start,
+        subnet_type: subnet_start.kind(),
         subnet_bits: subnet.prefixLength(),
         uuid: params.uuid,
         vlan_id: Number(params.vlan_id),
         mtu: Number(params.mtu) || constants.MTU_DEFAULT
     };
-    this.params.subnet_type = this.params.subnet_start.kind();
 
     this.etag = params.etag || null;
 
@@ -1278,6 +1285,7 @@ Network.prototype.serialize = function networkSerialize(opts) {
     var fieldsSer = {};
 
     var ser = {
+        family: this.family,
         mtu: this.params.mtu,
         nic_tag: this.params.nic_tag,
         name: this.params.name,
@@ -1332,7 +1340,7 @@ Network.prototype.serialize = function networkSerialize(opts) {
     }
 
     // IPv4 Only
-    if (this.params.subnet_start.kind() === 'ipv4') {
+    if (this.family === 'ipv4') {
         ser.netmask = util_ip.bitsToNetmask(this.params.subnet_bits);
     }
 
@@ -1693,6 +1701,11 @@ function listNetworks(opts, callback) {
             delete params.limit;
         }
 
+        if (params.family) {
+            params.subnet_type = params.family;
+            delete params.family;
+        }
+
         if (provisionableBy) {
             // Match both networks with that owner_uuid as well as no owner_uuid
             params.owner_uuids_arr = [ provisionableBy, '!*' ];
diff --git a/package.json b/package.json
index 05657fc..d8b87dd 100644
--- a/package.json
+++ b/package.json
@@ -26,7 +26,7 @@
     "verror": "1.9.0"
   },
   "devDependencies": {
-    "moray-sandbox": "0.1.0",
+    "moray-sandbox": "0.1.1",
     "faucet": "0.0.1",
     "istanbul": "^0.4.0",
     "eslint": "2.13.1",
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index e08bf18..5f63e4b 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -536,6 +536,7 @@ test('create network', function (t) {
     t.test('get network: 4', function (t2) {
         var newNet4 = extend(mod_fabric_net.lastCreated(), {
             fabric: true,
+            family: 'ipv4',
             internet_nat: false,
             mtu: OVERLAY_MTU,
             netmask: '255.255.252.0',
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index dd08639..ea8361d 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -248,9 +248,12 @@ function createNetwork(t, napi, state, extraParams, targetName, callback) {
         t.ifError(err, 'create network');
         if (err) {
             if (callback) {
-                return callback(err);
+                callback(err);
+                return;
             }
-            return t.end();
+
+            t.end();
+            return;
         }
 
         t.ok(res.uuid, 'test network uuid: ' + res.uuid);
@@ -263,6 +266,7 @@ function createNetwork(t, napi, state, extraParams, targetName, callback) {
             params.resolvers = [];
         }
 
+        params.family = 'ipv4';
         params.netmask = util_ip.bitsToNetmask(params.subnet.split('/')[1]);
         params.uuid = res.uuid;
 
@@ -274,9 +278,11 @@ function createNetwork(t, napi, state, extraParams, targetName, callback) {
         }
 
         if (callback) {
-            return callback();
+            callback();
+            return;
         }
-        return t.end();
+
+        t.end();
     });
 }
 
diff --git a/test/integration/networks.test.js b/test/integration/networks.test.js
index 7f1c2bd..260aa05 100644
--- a/test/integration/networks.test.js
+++ b/test/integration/networks.test.js
@@ -130,9 +130,11 @@ test('POST /networks', function (t) {
 
     napi.createNetwork(params, function (err, res) {
         if (h.ifErr(t, err, 'create network')) {
-            return t.end();
+            t.end();
+            return;
         }
 
+        params.family = 'ipv4';
         params.mtu = constants.MTU_DEFAULT;
         params.netmask = '255.255.255.0';
         params.uuid = res.uuid;
@@ -306,9 +308,11 @@ test('POST /networks (empty gateway)', function (t) {
     napi.createNetwork(params, function (err, res) {
         t.ifError(err, 'create network');
         if (err) {
-            return t.end();
+            t.end();
+            return;
         }
 
+        params.family = 'ipv4';
         params.mtu = constants.MTU_DEFAULT;
         params.netmask = '255.255.255.0';
         params.uuid = res.uuid;
@@ -329,9 +333,11 @@ test('POST /networks (single resolver)', function (t) {
     napi.createNetwork(params, function (err, res) {
         t.ifError(err, 'create network');
         if (err) {
-            return t.end();
+            t.end();
+            return;
         }
 
+        params.family = 'ipv4';
         params.mtu = constants.MTU_DEFAULT;
         params.netmask = '255.255.255.0';
         params.uuid = res.uuid;
@@ -342,11 +348,12 @@ test('POST /networks (single resolver)', function (t) {
         napi.getNetwork(res.uuid, function (err2, res2) {
             t.ifError(err2, 'create network');
             if (err2) {
-                return t.end();
+                t.end();
+                return;
             }
 
             t.deepEqual(res2, params, 'get parameters for network ' + res.uuid);
-            return t.end();
+            t.end();
         });
     });
 });
@@ -359,9 +366,11 @@ test('POST /networks (comma-separated resolvers)', function (t) {
     napi.createNetwork(params, function (err, res) {
         t.ifError(err, 'create network');
         if (err) {
-            return t.end();
+            t.end();
+            return;
         }
 
+        params.family = 'ipv4';
         params.mtu = constants.MTU_DEFAULT;
         params.netmask = '255.255.255.0';
         params.resolvers = params.resolvers.split(',');
@@ -373,11 +382,12 @@ test('POST /networks (comma-separated resolvers)', function (t) {
         napi.getNetwork(res.uuid, function (err2, res2) {
             t.ifError(err2, 'create network');
             if (err2) {
-                return t.end();
+                t.end();
+                return;
             }
 
             t.deepEqual(res2, params, 'get parameters for network ' + res.uuid);
-            return t.end();
+            t.end();
         });
     });
 });
diff --git a/test/lib/fabric-net.js b/test/lib/fabric-net.js
index 3ebd298..3c609d3 100644
--- a/test/lib/fabric-net.js
+++ b/test/lib/fabric-net.js
@@ -71,7 +71,7 @@ function createFabricNet(t, opts, callback) {
         params.name = generateNetworkName();
     }
 
-    opts.fillIn = [ 'mtu', 'vnet_id' ];
+    opts.fillIn = [ 'family', 'mtu', 'vnet_id' ];
     opts.idKey = 'uuid';
     opts.reqType = 'create';
     opts.type = TYPE;
diff --git a/test/lib/net.js b/test/lib/net.js
index 9215c51..5307155 100644
--- a/test/lib/net.js
+++ b/test/lib/net.js
@@ -79,7 +79,7 @@ function createNet(t, opts, callback) {
     }
 
     opts.idKey = 'uuid';
-    opts.fillIn = [ 'mtu' ];
+    opts.fillIn = [ 'family', 'mtu' ];
     opts.reqType = 'create';
     opts.type = TYPE;
 
diff --git a/test/unit/networks-list.test.js b/test/unit/networks-list.test.js
new file mode 100644
index 0000000..9ced5ed
--- /dev/null
+++ b/test/unit/networks-list.test.js
@@ -0,0 +1,223 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+/*
+ * Unit tests for listing networks.
+ */
+
+'use strict';
+
+var h = require('./helpers');
+var mod_err = require('../../lib/util/errors');
+var mod_net = require('../lib/net');
+var mod_nic_tag = require('../lib/nic-tag');
+var mod_server = require('../lib/server');
+var test = require('tape');
+
+
+// --- Globals
+
+var TAG_A;
+var TAG_B;
+var NETS = [];
+
+
+// --- Setup
+
+test('Initial setup', function (t) {
+    h.reset();
+
+    t.test('Start server', function (t2) {
+        h.createClientAndServer(function (err, res, moray) {
+            t2.ifError(err, 'server creation');
+            t2.ok(res, 'client');
+            t2.ok(moray, 'moray');
+            t2.end();
+        });
+    });
+
+    t.test('Create TAG_A', function (t2) {
+        // Match the name of the nic tag in h.validNetworkParams()
+        mod_nic_tag.create(t2, {
+            name: 'nic_tag',
+            partialExp: {
+                name: 'nic_tag'
+            }
+        }, function (_, res) {
+            TAG_A = res;
+            t2.end();
+        });
+    });
+
+    t.test('Create TAG_B', function (t2) {
+        mod_nic_tag.create(t2, {
+            name: 'nic_tag_b',
+            partialExp: {
+                name: 'nic_tag_b'
+            }
+        }, function (_, res) {
+            TAG_B = res;
+            t2.end();
+        });
+    });
+});
+
+
+test('Create networks', function (t) {
+    t.test('Create NETS[0]', function (t2) {
+        mod_net.create(t2, {
+            params: h.validNetworkParams({
+                vlan_id: 20
+            }),
+            partialExp: {
+                vlan_id: 20,
+                family: 'ipv4'
+            }
+        }, function (_, res) {
+            NETS.push(res);
+            t2.end();
+        });
+    });
+
+    t.test('Create NETS[1]', function (t2) {
+        mod_net.create(t2, {
+            params: h.validNetworkParams({
+                nic_tag: TAG_B.name
+            }),
+            partialExp: {
+                nic_tag: TAG_B.name,
+                family: 'ipv4'
+            }
+        }, function (_, res) {
+            NETS.push(res);
+            t2.end();
+        });
+    });
+
+    t.test('Create NETS[2]', function (t2) {
+        mod_net.create(t2, {
+            params: h.validNetworkParams(),
+            partialExp: {
+                family: 'ipv4'
+            }
+        }, function (_, res) {
+            NETS.push(res);
+            t2.end();
+        });
+    });
+
+    t.test('Create NETS[3]', function (t2) {
+        mod_net.create(t2, {
+            params: h.validIPv6NetworkParams({
+                nic_tag: TAG_B.name
+            }),
+            partialExp: {
+                nic_tag: TAG_B.name,
+                family: 'ipv6'
+            }
+        }, function (_, res) {
+            NETS.push(res);
+            t2.end();
+        });
+    });
+});
+
+
+// --- Tests
+
+
+test('List IPv4 networks', function (t) {
+    mod_net.list(t, {
+        params: {
+            family: 'ipv4'
+        },
+        deepEqual: true,
+        present: [
+            NETS[0],
+            NETS[1],
+            NETS[2]
+        ]
+    });
+});
+
+
+test('List IPv6 networks', function (t) {
+    mod_net.list(t, {
+        params: {
+            family: 'ipv6'
+        },
+        deepEqual: true,
+        present: [
+            NETS[3]
+        ]
+    });
+});
+
+
+test('List with bad family', function (t) {
+    mod_net.list(t, {
+        params: {
+            family: 'ipv2'
+        },
+        expErr: h.invalidParamErr({
+            errors: [
+                mod_err.invalidParam('family', 'must be one of: "ipv4", "ipv6"')
+            ]
+        })
+    });
+});
+
+
+test('List networks on TAG_A', function (t) {
+    mod_net.list(t, {
+        params: {
+            nic_tag: TAG_A.name
+        },
+        deepEqual: true,
+        present: [
+            NETS[0],
+            NETS[2]
+        ]
+    });
+});
+
+
+test('List networks on TAG_B', function (t) {
+    mod_net.list(t, {
+        params: {
+            nic_tag: TAG_B.name
+        },
+        deepEqual: true,
+        present: [
+            NETS[1],
+            NETS[3]
+        ]
+    });
+});
+
+
+test('List networks on VLAN 20', function (t) {
+    mod_net.list(t, {
+        params: {
+            vlan_id: 20
+        },
+        deepEqual: true,
+        present: [
+            NETS[0]
+        ]
+    });
+});
+
+
+
+
+// --- Teardown
+
+test('Stop server', mod_server.close);
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index c01476c..417254e 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -70,6 +70,7 @@ test('Initial setup', function (t) {
         MORAY = moray;
         if (!NAPI) {
             t.end();
+            return;
         }
 
         // Match the name of the nic tag in h.validNetworkParams()
@@ -100,11 +101,13 @@ test('Create network', function (t) {
 
     NAPI.createNetwork(params, function (err, obj, req, res) {
         if (h.ifErr(t, err, 'network create')) {
-            return t.end();
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 200, 'status code');
 
+        params.family = 'ipv4';
         params.uuid = obj.uuid;
         params.netmask = '255.255.255.0';
         params.vlan_id = 0;
@@ -557,7 +560,8 @@ test('Create network where mtu nic_tag > network > default', function (t) {
     };
     NAPI.createNicTag(nicTagName, nicTagParams, function (err, nictag) {
         if (h.ifErr(t, err, 'nic tag creation')) {
-            return t.end();
+            t.end();
+            return;
         }
 
         nicTagParams.uuid = nictag.uuid;
@@ -570,11 +574,13 @@ test('Create network where mtu nic_tag > network > default', function (t) {
 
         NAPI.createNetwork(networkParams, function (err2, obj, req, res) {
             if (h.ifErr(t, err2, 'network creation')) {
-                return t.end();
+                t.end();
+                return;
             }
 
             t.equal(res.statusCode, 200, 'status code');
 
+            networkParams.family = 'ipv4';
             networkParams.uuid = obj.uuid;
             networkParams.netmask = '255.255.255.0';
             networkParams.vlan_id = 0;
@@ -584,9 +590,8 @@ test('Create network where mtu nic_tag > network > default', function (t) {
 
             NAPI.getNetwork(obj.uuid, function (err3, res3) {
                 t.ifError(err3);
-
                 t.equal(res3.mtu, networkParams.mtu, 'MTU correct after get');
-                return t.end();
+                t.end();
             });
         });
     });
@@ -619,6 +624,7 @@ test('Create network where mtu == nic_tag == max', function (t) {
 
             t.equal(res.statusCode, 200, 'status code');
 
+            networkParams.family = 'ipv4';
             networkParams.uuid = obj.uuid;
             networkParams.netmask = '255.255.255.0';
             networkParams.vlan_id = 0;
-- 
2.21.0

