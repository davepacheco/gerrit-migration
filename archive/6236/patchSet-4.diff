From 6d10766d1bcc32aebd335f2b19388ae0916c15bb Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Thu, 16 May 2019 15:52:49 -0700
Subject: [PATCH] TRITON-1663 vmapi can accidentally return 200 and close the
 connection on some validation errors (part 2, improve name of errors.*Err
 helper funcs) Reviewed by: Chris Burroughs <chris.burroughs@joyent.com>
 Reviewed by: Josh Wilsdon <josh@wilsdon.ca> Approved by: Chris Burroughs
 <chris.burroughs@joyent.com>

---
 Makefile                   |   4 +-
 lib/apis/moray.js          |  19 ++--
 lib/common/validation.js   | 226 ++++++++++++++++++++-----------------
 lib/endpoints/metadata.js  |  10 +-
 lib/endpoints/role-tags.js |  10 +-
 lib/endpoints/vms.js       | 115 ++++++++++---------
 lib/errors.js              |  40 ++++---
 test/vms.validate.test.js  |  23 ++--
 8 files changed, 237 insertions(+), 210 deletions(-)

diff --git a/Makefile b/Makefile
index 3f85ad5..8ea2d11 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -48,7 +48,7 @@ JS_FILES	:= $(shell find tools lib test -name '*.js')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE   = server.js $(JS_FILES)
 JSSTYLE_FILES	 = server.js $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,doxygen,unparenthesized-return=0
+JSSTYLE_FLAGS    = -o indent=4,doxygen,unparenthesized-return=0,leading-right-paren-ok=1
 SMF_MANIFESTS	 = smf/manifests/vmapi.xml
 
 ENGBLD_USE_BUILDIMAGE	= true
diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index a823f98..2c5c39e 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -340,7 +340,7 @@ Moray.prototype.getVm = function getVm(params, cb) {
     }
 
     if (!common.validUUID(uuid)) {
-        error = [ errors.invalidUuidErr('uuid') ];
+        error = [ errors.invalidUuidErrorsElem('uuid') ];
         return cb(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
@@ -349,7 +349,7 @@ Moray.prototype.getVm = function getVm(params, cb) {
 
     if (owner) {
         if (!common.validUUID(owner)) {
-            error = [ errors.invalidUuidErr('owner_uuid') ];
+            error = [ errors.invalidUuidErrorsElem('owner_uuid') ];
             return cb(new errors.ValidationFailedError('Invalid Parameters',
                 error));
         }
@@ -421,7 +421,7 @@ Moray.prototype._vmsListParams = function (params, cb) {
 
     if (params.uuid) {
         if (!common.validUUID(params.uuid)) {
-            error = [ errors.invalidUuidErr('uuid') ];
+            error = [ errors.invalidUuidErrorsElem('uuid') ];
             return cb(new errors.ValidationFailedError('Invalid Parameters',
                 error));
         }
@@ -439,7 +439,7 @@ Moray.prototype._vmsListParams = function (params, cb) {
 
     if (params.owner_uuid) {
         if (!common.validUUID(params.owner_uuid)) {
-            error = [ errors.invalidUuidErr('owner_uuid') ];
+            error = [ errors.invalidUuidErrorsElem('owner_uuid') ];
             return cb(new errors.ValidationFailedError('Invalid Parameters',
                 error));
         }
@@ -580,14 +580,15 @@ Moray.prototype._parseLdapFilter = function (query, cb) {
     }
 
     if (typeof (query) !== 'string') {
-        error = [ errors.invalidParamErr('query', 'Query must be a string') ];
-        return cb(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        return cb(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('query', 'Query must be a string') ]
+        ));
     }
 
     // TODO additional parsing and validation?
     if (query === '') {
-        error = [ errors.invalidParamErr('query', 'Empty query') ];
+        error = [ errors.invalidParamErrorsElem('query', 'Empty query') ];
         return cb(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
diff --git a/lib/common/validation.js b/lib/common/validation.js
index 43388b6..8a7b980 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -340,7 +340,8 @@ var validators = {
         }
 
         if (!Array.isArray(params.firewall_rules)) {
-            errs.push(errors.invalidParamErr('firewall_rules', 'Not an array'));
+            errs.push(errors.invalidParamErrorsElem('firewall_rules',
+                'Not an array'));
             return errs;
         }
 
@@ -351,7 +352,8 @@ var validators = {
                 validateFirewallRule(params.firewall_rules[r]);
             }
         } catch (e) {
-            errs.push(errors.invalidParamErr('firewall_rules', e.message));
+            errs.push(errors.invalidParamErrorsElem('firewall_rules',
+                e.message));
         }
 
         return errs;
@@ -382,7 +384,7 @@ var validators = {
             try {
                 validLocality(params.locality);
             } catch (e) {
-                errs.push(errors.invalidParamErr('locality', e.message));
+                errs.push(errors.invalidParamErrorsElem('locality', e.message));
             }
         }
 
@@ -408,10 +410,10 @@ var validators = {
             try {
                 params.networks = validNetworks(params.networks, true);
             } catch (e) {
-                errs.push(errors.invalidParamErr('networks', e.message));
+                errs.push(errors.invalidParamErrorsElem('networks', e.message));
             }
         } else {
-            errs.push(errors.missingParamErr('networks'));
+            errs.push(errors.missingParamErrorsElem('networks'));
         }
 
         return errs;
@@ -492,7 +494,7 @@ function createValidateMetadataFn(field) {
                 if (e.body && e.body.errors) {
                     errs.push(e.body.errors[0]);
                 } else {
-                    errs.push(errors.invalidParamErr(field));
+                    errs.push(errors.invalidParamErrorsElem(field));
                 }
             }
         }
@@ -512,7 +514,7 @@ function createValidateArrayFn(field, options) {
         var errs = [];
 
         if (params[field] !== undefined && !Array.isArray(params[field])) {
-            errs.push(errors.invalidParamErr(field, 'Not an array'));
+            errs.push(errors.invalidParamErrorsElem(field, 'Not an array'));
         }
 
         return errs;
@@ -539,23 +541,25 @@ function createValidateStringFn(field, options) {
         var errs = [];
 
         if (options.required && params[field] === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (params[field] !== undefined) {
-            if (typeof (params[field]) !== 'string')
-                errs.push(errors.invalidParamErr(field, 'Not a valid string'));
+            if (typeof (params[field]) !== 'string') {
+                errs.push(errors.invalidParamErrorsElem(field,
+                    'Not a valid string'));
+            }
 
             if (options.min !== undefined && params[field].length < options.min)
-                errs.push(errors.invalidParamErr(field,
+                errs.push(errors.invalidParamErrorsElem(field,
                     'String is shorter than minimum of ' + options.min +
                     ' characters'));
             if (options.max !== undefined && params[field].length > options.max)
-                errs.push(errors.invalidParamErr(field,
+                errs.push(errors.invalidParamErrorsElem(field,
                     'String is longer than maximum of ' + options.max +
                     ' characters'));
             regexp = options.re;
             if (regexp && !regexp.test(params[field]))
-                errs.push(errors.invalidParamErr(field,
+                errs.push(errors.invalidParamErrorsElem(field,
                     'String does not match regexp: ' + regexp));
         }
 
@@ -576,13 +580,13 @@ function createValidateNumberFn(field, options) {
         var error;
 
         if (options.required && params[field] === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (params[field] !== undefined) {
             error = validNumber(params[field], options);
             if (error) {
-                errs.push(errors.invalidParamErr(field, 'Not a valid number: '
-                    + error.message));
+                errs.push(errors.invalidParamErrorsElem(field,
+                    'Not a valid number: ' + error.message));
             } else {
                 params[field] = Number(params[field]);
             }
@@ -604,12 +608,12 @@ function createValidateBooleanFn(field, options) {
         var errs = [];
 
         if (options.required && params[field] === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (params[field] !== undefined &&
             typeof (params[field]) !== 'boolean') {
             if (['true', 'false'].indexOf(params[field]) === -1)
-                errs.push(errors.invalidParamErr(field));
+                errs.push(errors.invalidParamErrorsElem(field));
             else
                 params[field] = params[field] === 'true';
         }
@@ -630,11 +634,11 @@ function createValidateStringsListFn(field, list, options) {
         var errs = [];
 
         if (options.required && params[field] === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (params[field] !== undefined && list.indexOf(params[field]) === -1) {
             var message = 'Must be one of: ' + sortedList.join(', ');
-            errs.push(errors.invalidParamErr(field, message));
+            errs.push(errors.invalidParamErrorsElem(field, message));
         }
 
         return errs;
@@ -651,26 +655,26 @@ function createValidateJSONPredicateFn(field, options) {
         var errs = [];
 
         if (options.required && jsonPredicate === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (jsonPredicate) {
             try {
                 predicate = JSON.parse(jsonPredicate);
             } catch (parseErr) {
-                errs.push(errors.invalidParamErr('predicate',
+                errs.push(errors.invalidParamErrorsElem('predicate',
                     'Unable to parse predicate as JSON'));
                 return errs;
             }
 
             if (Object.keys(predicate).length === 0) {
-                errs.push(errors.invalidParamErr('predicate',
+                errs.push(errors.invalidParamErrorsElem('predicate',
                     'Empty predicate'));
             }
 
             try {
                 predicateUtils.predValidateSyntax(predicate);
             } catch (syntaxError) {
-                errs.push(errors.invalidParamErr('predicate',
+                errs.push(errors.invalidParamErrorsElem('predicate',
                     'Predicate syntax error: ' + syntaxError));
             }
         }
@@ -696,12 +700,12 @@ function createValidateTimestampFn(field, options) {
         var errs = [];
         var timestamp = params[field];
         if (options.required && timestamp === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (timestamp !== undefined) {
             if (!validTimestamp(timestamp)) {
-                errs.push(errors.invalidParamErr(field, 'Invalid timestamp: '
-                    + timestamp));
+                errs.push(errors.invalidParamErrorsElem(field,
+                    'Invalid timestamp: ' + timestamp));
             } else {
                 params[field] = jsprim.parseDateTime(params[field]).getTime();
             }
@@ -721,11 +725,11 @@ function validatePolymorphicParamStringKeyValue(paramName, key, value) {
     assert.optionalString(value, 'value');
 
     if (typeof (key) !== 'string' || key.length === 0) {
-        return errors.invalidParamErr(paramName,
+        return errors.invalidParamErrorsElem(paramName,
             'Invalid ' + paramName + ' key: ' + JSON.stringify(key));
     }
     if (typeof (value) !== 'string' || value.length === 0) {
-        return errors.invalidParamErr(paramName,
+        return errors.invalidParamErrorsElem(paramName,
             'Invalid ' + paramName + ' value: ' + JSON.stringify(value));
     }
 }
@@ -780,13 +784,13 @@ function createValidateCSVFn(field, validator, options) {
         var allValuesValid = true;
 
         if (options.required && csValues === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (csValues !== undefined) {
             allValuesValid = csValues.split(',').every(validator);
             if (!allValuesValid) {
-                errs.push(errors.invalidParamErr(field, 'Invalid values: '
-                    + csValues));
+                errs.push(errors.invalidParamErrorsElem(field,
+                    'Invalid values: ' + csValues));
             }
         }
 
@@ -805,13 +809,13 @@ function createValidateVmFieldsFn(field, options) {
         var allValuesValid = true;
 
         if (options.required && csValues === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (csValues !== undefined) {
             allValuesValid = csValues.split(',').every(validVmField);
             if (!allValuesValid) {
-                errs.push(errors.invalidParamErr(field, 'Invalid values: '
-                    + csValues));
+                errs.push(errors.invalidParamErrorsElem(field,
+                    'Invalid values: ' + csValues));
             }
         }
 
@@ -829,10 +833,10 @@ function createValidateUUIDFn(field, required) {
         var errs = [];
 
         if (params[field] === undefined && required) {
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
         } else if (params[field] !== undefined &&
             !validUUID(params[field])) {
-            errs.push(errors.invalidUuidErr(field));
+            errs.push(errors.invalidUuidErrorsElem(field));
         }
 
         return errs;
@@ -849,11 +853,11 @@ function createValidateSortFn(field, options) {
         var sortString = params[field];
 
         if (options.required && sortString === undefined)
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
 
         if (sortString !== undefined &&
             !sortValidation.isValidSortCriteria(sortString)) {
-            errs.push(errors.invalidParamErr(field,
+            errs.push(errors.invalidParamErrorsElem(field,
                 'Invalid sort param: ' + sortString));
         }
 
@@ -877,7 +881,7 @@ function createValidateMarkerFn(field, options) {
         var sortString;
 
         if (options.required && markerString === undefined) {
-            errs.push(errors.missingParamErr(field));
+            errs.push(errors.missingParamErrorsElem(field));
         } else if (markerString !== undefined) {
             markerParseRes = markerUtils.parseMarkerJSONString(markerString);
             assert.object(markerParseRes, 'markerParseRes must be an object');
@@ -887,7 +891,7 @@ function createValidateMarkerFn(field, options) {
                 assert.arrayOfString(markerParseErrors,
                     'markerParseErrors must be an array of strings');
                 markerParseErrors.forEach(function (errorMsg) {
-                    errs.push(errors.invalidParamErr(field,
+                    errs.push(errors.invalidParamErrorsElem(field,
                         'Invalid marker: ' + markerString + '. ' + errorMsg));
                 });
             } else {
@@ -897,7 +901,7 @@ function createValidateMarkerFn(field, options) {
                 markerValidationErrs =
                     markerUtils.validateMarker(marker, sortString);
                 markerValidationErrs.forEach(function (errorMsg) {
-                    errs.push(errors.invalidParamErr(field,
+                    errs.push(errors.invalidParamErrorsElem(field,
                         'Invalid marker: ' + markerString + '. ' + errorMsg));
                 });
             }
@@ -964,42 +968,42 @@ function createValidateVolumes(fieldName, required) {
         }
 
         if (!Array.isArray(volumes)) {
-            errs.push(errors.invalidParamErr(fieldName,
+            errs.push(errors.invalidParamErrorsElem(fieldName,
                 fieldName + ' must be an array of objects'));
             return errs;
         }
 
         if (volumes.length === 0) {
-            errs.push(errors.invalidParamErr(fieldName,
+            errs.push(errors.invalidParamErrorsElem(fieldName,
                 fieldName + ' must be a non-empty array of objects'));
         }
 
         for (idx = 0; idx < volumes.length; ++idx) {
             volume = volumes[idx];
             if (typeof (volume) !== 'object') {
-                errs.push(errors.invalidParamErr(fieldName,
+                errs.push(errors.invalidParamErrorsElem(fieldName,
                     fieldName + ' must be a non-empty array of objects'));
             }
 
             if (volume === null) {
-                errs.push(errors.invalidParamErr(fieldName,
+                errs.push(errors.invalidParamErrorsElem(fieldName,
                     fieldName + ' must be a non-empty array of objects'));
             }
 
             if (volume.mode !== undefined &&
                 VALID_VOLUME_MODES.indexOf(volume.mode) === -1) {
-                errs.push(errors.invalidParamErr(fieldName,
+                errs.push(errors.invalidParamErrorsElem(fieldName,
                     'volume mode for volume ' + util.inspect(volume) +
                         ' must be one of ' + VALID_VOLUME_MODES.join(', ')));
             }
 
             if (!validVolumeName(volume.name)) {
-                errs.push(errors.invalidParamErr(fieldName,
+                errs.push(errors.invalidParamErrorsElem(fieldName,
                     'Invalid volume name for volume ' + util.inspect(volume)));
             }
 
             if (!validVolumeMountpoint(volume.mountpoint)) {
-                errs.push(errors.invalidParamErr(fieldName,
+                errs.push(errors.invalidParamErrorsElem(fieldName,
                     'Invalid volume mount point for volume ' +
                         util.inspect(volume)));
             }
@@ -1084,7 +1088,7 @@ function validatePackageValues(papi, params, errs, callback) {
 
         // Check that the package is compatible with this brand.
         if (pkg.brand !== undefined && pkg.brand !== params.brand) {
-            errs.push(errors.invalidParamErr('brand',
+            errs.push(errors.invalidParamErrorsElem('brand',
                 'Package requires brand "' + safeBrandName(pkg.brand) + '", ' +
                 'but brand "' + safeBrandName(params.brand) +
                 '" was specified'));
@@ -1124,7 +1128,7 @@ function validatePackageValues(papi, params, errs, callback) {
             if (pkg.fss !== undefined) {
                 params.cpu_shares = Math.floor(Number(pkg.fss));
                 if (isNaN(params.cpu_shares) || pkg.fss === '') {
-                    errs.push(errors.invalidParamErr('cpu_shares',
+                    errs.push(errors.invalidParamErrorsElem('cpu_shares',
                         'Package has invalid "fss" (cpu_shares) value'));
                 }
             } else {
@@ -1162,16 +1166,16 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
     // max_physical_memory and disks (when kvm or bhyve) at least
     if (!params.billing_id) {
         if (['bhyve', 'kvm'].indexOf(params.brand) !== -1 && !params.ram) {
-            errs.push(errors.missingParamErr('ram', 'Is required for ' +
+            errs.push(errors.missingParamErrorsElem('ram', 'Is required for ' +
                 params.brand));
         } else if (!params.max_physical_memory && !params.ram) {
-            errs.push(errors.missingParamErr('ram'));
+            errs.push(errors.missingParamErrorsElem('ram'));
         }
     }
 
     // max_swap
     if (params.max_swap !== undefined && params.max_swap < MIN_SWAP) {
-        errs.push(errors.invalidParamErr('max_swap',
+        errs.push(errors.invalidParamErrorsElem('max_swap',
             'Cannot be less than ' + MIN_SWAP));
     }
 
@@ -1213,7 +1217,7 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
             }
 
             if (vm) {
-                errs.push(errors.duplicateParamErr('uuid'));
+                errs.push(errors.duplicateParamErrorsElem('uuid'));
             }
             return next();
         });
@@ -1289,7 +1293,7 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
         var DOCKER_TYPES = ['lx-dataset', 'docker'];
 
         if (DOCKER_TYPES.indexOf(params.image.type) === -1) {
-            errs.push(errors.invalidParamErr(
+            errs.push(errors.invalidParamErrorsElem(
                 'image_uuid', 'Image type is "' + params.image.type + '\" ' +
                 'must be one of: ' + JSON.stringify(DOCKER_TYPES)));
         }
@@ -1298,7 +1302,7 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
             if (params.image.tags && params.image.tags.kernel_version) {
                 params.kernel_version = params.image.tags.kernel_version;
             } else {
-                errs.push(errors.missingParamErr(
+                errs.push(errors.missingParamErrorsElem(
                     'kernel_version', 'Required for LX zones'));
             }
         }
@@ -1351,7 +1355,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
             validUUID(obj.new_owner_uuid)) {
             params.new_owner_uuid = obj.new_owner_uuid;
         } else {
-            errs.push(errors.invalidUuidErr('new_owner_uuid'));
+            errs.push(errors.invalidUuidErrorsElem('new_owner_uuid'));
         }
     }
 
@@ -1393,7 +1397,8 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
         if (Array.isArray(obj.update_disks)) {
             params.update_disks = obj.update_disks;
         } else {
-            errs.push(errors.invalidParamErr('update_disks', 'Not an array'));
+            errs.push(errors.invalidParamErrorsElem('update_disks',
+                'Not an array'));
         }
     }
 
@@ -1435,8 +1440,8 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
             asyncFns.push(validateCapacity);
         } else {
             // Not allowed for bhyve or kvm at the moment
-            errs.push(errors.invalidParamErr('brand', 'Cannot resize a ' +
-                vm.brand + ' VM'));
+            errs.push(errors.invalidParamErrorsElem('brand',
+                'Cannot resize a ' + vm.brand + ' VM'));
         }
     }
 
@@ -1477,7 +1482,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
         function onImage(err, image) {
             if (err) {
                 if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
-                    errs.push(errors.invalidParamErr(
+                    errs.push(errors.invalidParamErrorsElem(
                         'image_uuid',
                         err.message));
                     return next();
@@ -1493,12 +1498,12 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
             var minRam = reqs && reqs.min_ram;
 
             if (maxRam && newRam > maxRam) {
-                errs.push(errors.invalidParamErr(
+                errs.push(errors.invalidParamErrorsElem(
                     'ram',
                     'Specified RAM (' + newRam + ') does not meet the maximum' +
                     ' RAM requirement (' + maxRam + ')'));
             } else if (minRam && newRam < minRam) {
-                errs.push(errors.invalidParamErr(
+                errs.push(errors.invalidParamErrorsElem(
                     'ram',
                     'Specified RAM (' + newRam + ') does not meet the minimum' +
                     ' RAM requirement (' + minRam + ')'));
@@ -1533,7 +1538,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
                 !cap.capacities[vm.server_uuid].hasOwnProperty('ram') ||
                 !cap.capacities[vm.server_uuid].hasOwnProperty('disk')) {
 
-                errs.push(errors.insufficientCapacityErr(
+                errs.push(errors.insufficientCapacityErrorsElem(
                     'server',
                     'Unable to determine server capacity'));
                 return next();
@@ -1543,7 +1548,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
             var sdisk = cap.capacities[vm.server_uuid].disk / 1024;
 
             if (currentRam < requiredRam && sram < neededRam) {
-                errs.push(errors.insufficientCapacityErr(
+                errs.push(errors.insufficientCapacityErrorsElem(
                     'ram',
                     'Required additional RAM (' + neededRam + ') exceeds the ' +
                     'server\'s available RAM (' + sram + ')'));
@@ -1559,7 +1564,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
                 var neededDisk = requiredDisk - currentDisk;
 
                 if (currentDisk < requiredDisk && sdisk < neededDisk) {
-                    errs.push(errors.insufficientCapacityErr(
+                    errs.push(errors.insufficientCapacityErrorsElem(
                         'quota',
                         'Required additional disk (' + neededDisk + ') ' +
                         'exceeds the server\'s available disk (' + sdisk +
@@ -1567,7 +1572,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
                 }
             } else {
                 if (sdisk < requiredDisk) {
-                    errs.push(errors.insufficientCapacityErr(
+                    errs.push(errors.insufficientCapacityErrorsElem(
                         'quota',
                         'Required disk (' + requiredDisk + ') exceeds the ' +
                         'server\'s available disk (' + sdisk + ')'));
@@ -1635,7 +1640,8 @@ function validateListVmsParams(params, callback) {
         function validateConflictingParams(next) {
             var errs = [];
             if (params.offset && params.marker) {
-                errs.push(errors.conflictingParamsErr(['offset', 'marker'],
+                errs.push(errors.conflictingParamsErrorsElem(
+                    ['offset', 'marker'],
                     'offset and marker cannot be used at the same time'));
             }
 
@@ -2039,7 +2045,7 @@ function validOwner(vm, params) {
 
     if (owner_uuid) {
         if (!validUUID(owner_uuid)) {
-            var error = [ errors.invalidUuidErr('owner_uuid') ];
+            var error = [ errors.invalidUuidErrorsElem('owner_uuid') ];
             throw new errors.ValidationFailedError('Invalid Parameters', error);
         }
 
@@ -2066,12 +2072,12 @@ function validMetadata(name, obj, preventDocker) {
 
     for (var key in obj) {
         if (types.indexOf(typeof (obj[key])) == -1) {
-            error = [ errors.invalidParamErr(name + '.' + key,
+            error = [ errors.invalidParamErrorsElem(name + '.' + key,
                 'Forbidden Data Type') ];
             throw new errors.ValidationFailedError(
                 'Invalid Parameter', error);
         } else if (name === 'customer_metadata' && PW_SUFFIX.test(key)) {
-            error = [ errors.invalidParamErr(name + '.' + key,
+            error = [ errors.invalidParamErrorsElem(name + '.' + key,
                 'Forbidden Metadata Key') ];
             throw new errors.ValidationFailedError(
                 'Invalid Parameter', error);
@@ -2081,7 +2087,7 @@ function validMetadata(name, obj, preventDocker) {
     if (name === 'tags') {
         var errMsg = validTags(obj, preventDocker);
         if (errMsg) {
-            error = [ errors.invalidParamErr(name, errMsg) ];
+            error = [ errors.invalidParamErrorsElem(name, errMsg) ];
             throw new errors.ValidationFailedError('Invalid Parameter', error);
         }
     }
@@ -2123,7 +2129,7 @@ function validTags(tags, preventDocker) {
 function validDeleteMetadata(metaName, metaKey) {
     if (metaName === 'tags' && metaKey.match(DOCKER_TAG_RE)) {
         var msg = 'Special tag "' + metaKey + '" may not be deleted';
-        var error = [ errors.invalidParamErr(metaName, msg) ];
+        var error = [ errors.invalidParamErrorsElem(metaName, msg) ];
         throw new errors.ValidationFailedError('Invalid Parameter', error);
     }
 }
@@ -2178,7 +2184,7 @@ function validateMetadataNamespaces(vm, params) {
         var formattedNs = namespaces.map(function (ns) {
             return '\'' + ns + ':*' + '\'';
         });
-        var error = [ errors.invalidParamErr('customer_metadata',
+        var error = [ errors.invalidParamErrorsElem('customer_metadata',
             format('Invalid metadata keys: %s (protected namespaces: %s)',
                 invalid.join(', '), formattedNs)) ];
         throw new errors.ValidationFailedError(
@@ -2202,13 +2208,13 @@ function validDisks(disks, brand, errs) {
     var remaining = false;
 
     if (disk0.image_uuid === undefined) {
-        errs.push(errors.missingParamErr('disks.0.image_uuid'));
+        errs.push(errors.missingParamErrorsElem('disks.0.image_uuid'));
     } else if (!validUUID(disk0.image_uuid)) {
-        errs.push(errors.invalidUuidErr('disks.0.image_uuid'));
+        errs.push(errors.invalidUuidErrorsElem('disks.0.image_uuid'));
     }
 
     if (disk0.size !== undefined && brand !== 'bhyve') {
-        errs.push(errors.invalidParamErr('disks.0.size', 'Not Allowed'));
+        errs.push(errors.invalidParamErrorsElem('disks.0.size', 'Not Allowed'));
     }
 
 
@@ -2216,27 +2222,29 @@ function validDisks(disks, brand, errs) {
         var disk = disks[i];
 
         if (disk.image_uuid !== undefined) {
-            errs.push(errors.invalidParamErr('disks.' + i + '.image_uuid',
-                'Not Allowed'));
+            errs.push(errors.invalidParamErrorsElem(
+                'disks.' + i + '.image_uuid', 'Not Allowed'));
         }
 
         if (disk.size === undefined) {
-            errs.push(errors.missingParamErr('disks.' + i + '.size'));
+            errs.push(errors.missingParamErrorsElem('disks.' + i + '.size'));
         }
 
         if (isNaN(disk.size)) {
             if (disk.size !== 'remaining') {
-                errs.push(errors.invalidParamErr('disks.' + i + '.size',
+                errs.push(errors.invalidParamErrorsElem('disks.' + i + '.size',
                     'Not Allowed'));
             } else {
                 if (remaining) {
-                    errs.push(errors.invalidParamErr('disks.' + i + '.size',
-                    'Cannot have more than one disk with size "remaining"'));
+                    errs.push(errors.invalidParamErrorsElem(
+                        'disks.' + i + '.size',
+                        'Cannot have more than one disk with size "remaining"'
+                    ));
                 }
                 remaining = true;
             }
         } else if (disk.size <= 0) {
-                errs.push(errors.invalidParamErr('disks.' + i + '.size',
+                errs.push(errors.invalidParamErrorsElem('disks.' + i + '.size',
                     'Disk size must be positive'));
         }
     }
@@ -2254,19 +2262,20 @@ function validDisks(disks, brand, errs) {
 function validateBrandParams(params, errs) {
     if (['bhyve', 'kvm'].indexOf(params.brand) !== -1) {
         if (!params.disks) {
-            errs.push(errors.missingParamErr('disks'));
+            errs.push(errors.missingParamErrorsElem('disks'));
             return;
         } else if (typeof (params.disks) === 'string') {
             try {
                 params.disks = JSON.parse(params.disks);
             } catch (e) {
-                errs.push(errors.invalidParamErr('disks', 'Malformed JSON'));
+                errs.push(errors.invalidParamErrorsElem('disks',
+                    'Malformed JSON'));
                 return;
             }
         }
 
         if (!Array.isArray(params.disks) || (params.disks.length < 1)) {
-            errs.push(errors.invalidParamErr('disks'));
+            errs.push(errors.invalidParamErrorsElem('disks'));
         } else {
             validDisks(params.disks, params.brand, errs);
         }
@@ -2274,9 +2283,9 @@ function validateBrandParams(params, errs) {
     } else {
         // Only non-kvm vms require image_uuid
         if (params.image_uuid === undefined) {
-            errs.push(errors.missingParamErr('image_uuid'));
+            errs.push(errors.missingParamErrorsElem('image_uuid'));
         } else if (!validUUID(params.image_uuid)) {
-            errs.push(errors.invalidUuidErr('image_uuid'));
+            errs.push(errors.invalidUuidErrorsElem('image_uuid'));
         }
     }
 }
@@ -2302,11 +2311,11 @@ function createMetadataObject(vm, mdataKey, params, obj) {
         try {
             metadata = JSON.parse(obj);
         } catch (e) {
-            error = [ errors.invalidParamErr(mdataKey, 'Malformed JSON') ];
+            error = [errors.invalidParamErrorsElem(mdataKey, 'Malformed JSON')];
             throw new errors.ValidationFailedError('Invalid Parameters', error);
         }
     } else {
-        error = [ errors.invalidParamErr(mdataKey, 'Invalid data type') ];
+        error = [errors.invalidParamErrorsElem(mdataKey, 'Invalid data type')];
         throw new errors.ValidationFailedError('Invalid Parameters', error);
     }
 
@@ -2356,7 +2365,7 @@ function validateUniqueAlias(moray, params, callback) {
 
         if (vms.length > 0) {
             var message = 'Already exists for this owner_uuid';
-            var error = errors.duplicateParamErr('alias', message);
+            var error = errors.duplicateParamErrorsElem('alias', message);
             /* JSSTYLED */
             return callback(null, error);
         } else {
@@ -2378,10 +2387,10 @@ exports.validateNetworks = function (params) {
         try {
             params.networks = validNetworks(params.networks, false);
         } catch (e) {
-            errs.push(errors.invalidParamErr('networks', e.message));
+            errs.push(errors.invalidParamErrorsElem('networks', e.message));
         }
     } else {
-        errs.push(errors.missingParamErr('networks'));
+        errs.push(errors.missingParamErrorsElem('networks'));
     }
 
     if (errs.length) {
@@ -2409,10 +2418,10 @@ exports.validateNics = function (vm, params) {
         try {
             params.nics = validNics(vm, params.nics);
         } catch (e) {
-            errs.push(errors.invalidParamErr('nics', e.message));
+            errs.push(errors.invalidParamErrorsElem('nics', e.message));
         }
     } else {
-        errs.push(errors.missingParamErr('nics'));
+        errs.push(errors.missingParamErrorsElem('nics'));
     }
 
     if (errs.length) {
@@ -2434,11 +2443,11 @@ exports.validateMacs = function (params) {
 
     if (params.macs) {
         if (!validStrings(params.macs)) {
-            errs.push(errors.invalidParamErr('macs',
+            errs.push(errors.invalidParamErrorsElem('macs',
                 'Invalid MAC addresses object'));
         }
     } else {
-        errs.push(errors.missingParamErr('macs'));
+        errs.push(errors.missingParamErrorsElem('macs'));
     }
 
     if (errs.length) {
@@ -2468,9 +2477,10 @@ exports.validatePciSlot = function validatePciSlot(params) {
     }
 
     if (!slot) {
-        throwErr(errors.missingParamErr('pci_slot'));
+        throwErr(errors.missingParamErrorsElem('pci_slot'));
     } else if (!PCI_SLOT_RE.test(slot)) {
-        throwErr(errors.invalidParamErr('pci_slot', 'Not a valid value'));
+        throwErr(errors.invalidParamErrorsElem('pci_slot',
+            'Not a valid value'));
     }
 
     var parts = slot.split(':');
@@ -2479,9 +2489,11 @@ exports.validatePciSlot = function validatePciSlot(params) {
     var func = +parts[2];
 
     if (bus < 0 || bus > 255 || dev < 0 || dev > 31 || func < 0 || func > 7) {
-        throwErr(errors.invalidParamErr('pci_slot', 'Not a valid value'));
+        throwErr(errors.invalidParamErrorsElem('pci_slot',
+            'Not a valid value'));
     } else if (PCI_SLOT_DEV_RESERVED.indexOf(dev) !== -1) {
-        throwErr(errors.invalidParamErr('pci_slot', 'Reserved device ID'));
+        throwErr(errors.invalidParamErrorsElem('pci_slot',
+            'Reserved device ID'));
     }
 
     return true;
@@ -2590,8 +2602,10 @@ function validateParams(customValidators, params, options, callback) {
 
             customValidatorName = polymorphicParamName(paramName);
             customValidator = customValidators[customValidatorName];
-            if (!customValidator)
-                validationErrors.push(new errors.invalidParamErr(paramName));
+            if (!customValidator) {
+                validationErrors.push(
+                    new errors.invalidParamErrorsElem(paramName));
+            }
         }
     }
 
diff --git a/lib/endpoints/metadata.js b/lib/endpoints/metadata.js
index 2a5c50b..b6b3250 100644
--- a/lib/endpoints/metadata.js
+++ b/lib/endpoints/metadata.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -120,7 +120,7 @@ function addMetadata(req, res, next) {
         common.validMetadata(metaType, params['set_' + metaType], true);
     } catch (e) {
         var error = (e.body && e.body.errors) ? [ e.body.errors[0] ] :
-            [ errors.invalidParamErr(metaType) ];
+            [ errors.invalidParamErrorsElem(metaType) ];
         return next(new errors.ValidationFailedError(
             'Invalid ' + metaHumanName + ' parameters', error));
     }
@@ -160,7 +160,7 @@ function setMetadata(req, res, next) {
         });
     } catch (e) {
         var error = (e.body && e.body.errors) ? [ e.body.errors[0] ] :
-            [ errors.invalidParamErr(metaType) ];
+            [ errors.invalidParamErrorsElem(metaType) ];
         return next(new errors.ValidationFailedError(
             'Invalid ' + metaHumanName + ' parameters', error));
     }
@@ -200,7 +200,7 @@ function deleteMetadata(req, res, next) {
         common.validDeleteMetadata(metaType, metaKey);
     } catch (e) {
         var error = (e.body && e.body.errors) ? [ e.body.errors[0] ] :
-            [ errors.invalidParamErr(metaType) ];
+            [ errors.invalidParamErrorsElem(metaType) ];
         return next(new errors.ValidationFailedError(
             'Invalid ' + metaHumanName + ' parameters', error));
     }
@@ -236,7 +236,7 @@ function deleteAllMetadata(req, res, next) {
         common.validDeleteAllMetadata(metaType, metadata);
     } catch (e) {
         var error = (e.body && e.body.errors) ? [ e.body.errors[0] ] :
-            [ errors.invalidParamErr(metaType) ];
+            [ errors.invalidParamErrorsElem(metaType) ];
         return next(new errors.ValidationFailedError(
             'Invalid ' + metaHumanName + ' parameters', error));
     }
diff --git a/lib/endpoints/role-tags.js b/lib/endpoints/role-tags.js
index c34950b..da13be3 100644
--- a/lib/endpoints/role-tags.js
+++ b/lib/endpoints/role-tags.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -47,7 +47,7 @@ function addRoleTags(req, res, next) {
 
     if (!Array.isArray(roleTags) || Object.keys(roleTags).length === 0) {
         message = 'Must be an array of UUIDs';
-        error = [ errors.invalidParamErr('role_tags', message) ];
+        error = [ errors.invalidParamErrorsElem('role_tags', message) ];
         return next(new errors.ValidationFailedError(
                     'Invalid Role Tags', error));
     }
@@ -55,7 +55,7 @@ function addRoleTags(req, res, next) {
     roleTags.forEach(function (roleTag) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
-            error = [ errors.invalidUuidErr('role_tags', message) ];
+            error = [ errors.invalidUuidErrorsElem('role_tags', message) ];
             return next(new errors.ValidationFailedError(
                         'Invalid Role Tags', error));
         }
@@ -85,7 +85,7 @@ function setRoleTags(req, res, next) {
 
     if (!Array.isArray(roleTags) || Object.keys(roleTags).length === 0) {
         message = 'Must be an array of UUIDs';
-        error = [ errors.invalidParamErr('role_tags', message) ];
+        error = [ errors.invalidParamErrorsElem('role_tags', message) ];
         return next(new errors.ValidationFailedError(
                     'Invalid Role Tags', error));
     }
@@ -93,7 +93,7 @@ function setRoleTags(req, res, next) {
     roleTags.forEach(function (roleTag) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
-            error = [ errors.invalidUuidErr('role_tags', message) ];
+            error = [ errors.invalidUuidErrorsElem('role_tags', message) ];
             return next(new errors.ValidationFailedError(
                         'Invalid Role Tags', error));
         }
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 2612506..832b259 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -181,7 +181,7 @@ function preFilterVms(req, res, next) {
     roleTags.forEach(function (roleTag) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
-            error = [ errors.invalidUuidErr('role_tags', message) ];
+            error = [ errors.invalidUuidErrorsElem('role_tags', message) ];
             next(new errors.ValidationFailedError('Invalid Role Tags', error));
             return;
         }
@@ -332,7 +332,7 @@ function getVmProc(req, res, next) {
 
     // Skip calling CNAPI when a VM hasn't been allocated to a server
     if (m.server_uuid === undefined) {
-        error = [ errors.invalidUuidErr('vm.server_uuid') ];
+        error = [ errors.invalidUuidErrorsElem('vm.server_uuid') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
@@ -415,25 +415,25 @@ function updateVm(req, res, next) {
     var error;
 
     if (!req.vm) {
-        error = [ errors.missingParamErr('vm') ];
+        error = [ errors.missingParamErrorsElem('vm') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
 
     if (!action) {
-        error = [ errors.missingParamErr('action') ];
+        error = [ errors.missingParamErrorsElem('action') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
 
     if (!validAction(action)) {
-        error = [ errors.invalidParamErr('action') ];
+        error = [ errors.invalidParamErrorsElem('action') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
 
     if (sync && ['true', 'false'].indexOf(sync) === -1) {
-        error = [ errors.invalidParamErr('sync') ];
+        error = [ errors.invalidParamErrorsElem('sync') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     } else {
@@ -490,7 +490,7 @@ function updateVm(req, res, next) {
             method = mod_migrate.migrateVm;
             break;
         default:
-            error = [ errors.invalidParamErr('action') ];
+            error = [ errors.invalidParamErrorsElem('action') ];
             return next(new errors.ValidationFailedError('Invalid Parameters',
                 error));
     }
@@ -518,7 +518,7 @@ function startVm(req, res, next) {
 
             req.params.idempotent = true;
         } else {
-            var error = [ errors.invalidParamErr('idempotent') ];
+            var error = [ errors.invalidParamErrorsElem('idempotent') ];
             next(new errors.ValidationFailedError('Invalid Parameters', error));
             return;
         }
@@ -547,7 +547,7 @@ function stopVm(req, res, next) {
 
             req.params.idempotent = true;
         } else {
-            var error = [ errors.invalidParamErr('idempotent') ];
+            var error = [ errors.invalidParamErrorsElem('idempotent') ];
             next(new errors.ValidationFailedError('Invalid Parameters', error));
             return;
         }
@@ -592,7 +592,7 @@ function killVm(req, res, next) {
 
     if (req.params.signal) {
         if (valid_signals.indexOf(req.params.signal) === -1) {
-            error = [ errors.invalidParamErr('signal') ];
+            error = [ errors.invalidParamErrorsElem('signal') ];
             next(new errors.ValidationFailedError('Invalid Parameters', error));
             return;
         }
@@ -604,7 +604,7 @@ function killVm(req, res, next) {
 
             req.params.idempotent = true;
         } else {
-            error = [ errors.invalidParamErr('idempotent') ];
+            error = [ errors.invalidParamErrorsElem('idempotent') ];
             next(new errors.ValidationFailedError('Invalid Parameters', error));
             return;
         }
@@ -633,7 +633,7 @@ function rebootVm(req, res, next) {
 
             req.params.idempotent = true;
         } else {
-            var error = [ errors.invalidParamErr('idempotent') ];
+            var error = [ errors.invalidParamErrorsElem('idempotent') ];
             next(new errors.ValidationFailedError('Invalid Parameters', error));
             return;
         }
@@ -665,13 +665,13 @@ function reprovisionVm(req, res, next) {
     }
 
     if (!req.params.image_uuid) {
-        error = [ errors.missingParamErr('image_uuid') ];
+        error = [ errors.missingParamErrorsElem('image_uuid') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
 
     if (!common.validUUID(req.params.image_uuid)) {
-        error = [ errors.invalidUuidErr('image_uuid') ];
+        error = [ errors.invalidUuidErrorsElem('image_uuid') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
@@ -880,7 +880,7 @@ function createDisk(req, res, next) {
     if (diskUuid !== undefined) {
         if (!common.validUUID(diskUuid)) {
             var msg = diskUuid + ' is not a UUID';
-            paramErr = [ errors.invalidUuidErr('disk_uuid', msg) ];
+            paramErr = [ errors.invalidUuidErrorsElem('disk_uuid', msg) ];
             next(new errors.ValidationFailedError('Invalid disk_uuid',
                 paramErr));
             return;
@@ -891,7 +891,7 @@ function createDisk(req, res, next) {
         })[0];
 
         if (found) {
-            paramErr = [ errors.invalidParamErr('disk_uuid',
+            paramErr = [ errors.invalidParamErrorsElem('disk_uuid',
                 'Already in use') ];
             next(new errors.ValidationFailedError('Invalid Parameters',
                 paramErr));
@@ -912,16 +912,19 @@ function createDisk(req, res, next) {
         })[0];
 
         if (found) {
-            paramErr = [ errors.invalidParamErr('pci_slot', 'Already in use') ];
-            next(new errors.ValidationFailedError('Invalid Parameters',
-                 paramErr));
+            next(new errors.ValidationFailedError(
+                'Invalid Parameters',
+                [ errors.invalidParamErrorsElem('pci_slot', 'Already in use') ]
+));
             return;
         }
     }
 
     if (isNaN(size) && size !== 'remaining') {
-        paramErr = [ errors.invalidParamErr('size', 'Not a valid value') ];
-        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        next(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('size', 'Not a valid value') ]
+        ));
         return;
     } else if (vm.brand !== 'bhyve') {
         next(new errors.BrandNotSupportedError('Can only create disks on ' +
@@ -949,7 +952,7 @@ function createDisk(req, res, next) {
     }
 
     if (size <= 0) {
-        paramErr = [ errors.invalidParamErr('size',
+        paramErr = [ errors.invalidParamErrorsElem('size',
             'Must be greater than zero') ];
         next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
         return;
@@ -986,7 +989,6 @@ function resizeDisk(req, res, next) {
     var slot = params.pci_slot;
     var shrink = params.dangerous_allow_shrink;
     var vm = req.vm;
-    var paramErr;
 
     req.log.trace({ vm_uuid: vm.uuid }, 'ResizeDisk start');
 
@@ -1005,13 +1007,17 @@ function resizeDisk(req, res, next) {
         next(new restify.ResourceNotFoundError('Disk not found'));
         return;
     } else if (isNaN(size)) {
-        paramErr = [ errors.invalidParamErr('size', 'Not a valid number') ];
-        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        next(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('size', 'Not a valid number') ]
+        ));
         return;
     } else if (shrink !== undefined && typeof (shrink) !== 'boolean') {
-        paramErr = [ errors.invalidParamErr('dangerous_allow_shrink', 'Not a ' +
-                     'boolean') ];
-        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        next(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('dangerous_allow_shrink',
+                'Not a boolean') ]
+        ));
         return;
     } else if (vm.brand !== 'bhyve') {
         next(new errors.BrandNotSupportedError('Can only resize disks on ' +
@@ -1024,9 +1030,11 @@ function resizeDisk(req, res, next) {
         next(new errors.VmNotStoppedError());
         return;
     } else if (found.size > size && !shrink) {
-        paramErr = [ errors.invalidParamErr('size', 'Reducing disk size is a ' +
-                     'dangerous operation') ];
-        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        next(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('size',
+                'Reducing disk size is a dangerous operation') ]
+        ));
         return;
     }
 
@@ -1085,9 +1093,10 @@ function deleteDisk(req, res, next) {
         next(new restify.ResourceNotFoundError('Disk not found'));
         return;
     } else if (found.boot) {
-        var  paramErr = [ errors.invalidParamErr('slot', 'Cannot remove boot ' +
-                          'disk') ];
-        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        next(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.invalidParamErrorsElem('slot', 'Cannot remove boot disk') ]
+        ));
         return;
     } else if (vm.brand !== 'bhyve') {
         next(new errors.BrandNotSupportedError('Can only delete disks on ' +
@@ -1129,7 +1138,7 @@ function deleteVm(req, res, next) {
     req.log.trace({ vm_uuid: req.params.uuid }, 'DeleteVm start');
 
     if (sync && ['true', 'false'].indexOf(sync) === -1) {
-        var error = [ errors.invalidParamErr('sync') ];
+        var error = [ errors.invalidParamErrorsElem('sync') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     } else {
@@ -1174,7 +1183,7 @@ function createRoleTags(req, cb) {
 
     if (!Array.isArray(roleTags) || Object.keys(roleTags).length === 0) {
         message = 'Must be an array of UUIDs';
-        error = [ errors.invalidParamErr('role_tags', message) ];
+        error = [ errors.invalidParamErrorsElem('role_tags', message) ];
         cb(new errors.ValidationFailedError('Invalid VM parameters', error));
         return;
     }
@@ -1182,10 +1191,10 @@ function createRoleTags(req, cb) {
     roleTags.forEach(function (roleTag) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
-            error = [ errors.invalidUuidErr('role_tags', message) ];
+            error = [ errors.invalidUuidErrorsElem('role_tags', message) ];
+            // XXX This is broken. It can `cb` multiple times.
             cb(new errors.ValidationFailedError('Invalid VM parameters',
                 error));
-            return;
         }
     });
 
@@ -1555,8 +1564,10 @@ function provisionNics(req, cb) {
         assert.ok(!macs || macs.length === 0);
         provisionNetNics(req, cb);
     } else {
-        var paramerr = [ errors.missingParamErr('missing networks or macs') ];
-        cb(new errors.ValidationFailedError('Invalid Parameters', paramerr));
+        cb(new errors.ValidationFailedError(
+            'Invalid Parameters',
+            [ errors.missingParamErrorsElem('missing networks or macs') ]
+        ));
     }
 }
 
@@ -1709,14 +1720,14 @@ function allocateServer(req, callback) {
         });
 
         if (!nicTagReqs) {
-            var nicerr = [ errors.missingParamErr('nictag') ];
+            var nicerr = [ errors.missingParamErrorsElem('nictag') ];
             next(new errors.ValidationFailedError('Invalid Parameters',
                 nicerr));
             return;
         }
 
         if (!img) {
-            var imgerr = [ errors.missingParamErr('image') ];
+            var imgerr = [ errors.missingParamErrorsElem('image') ];
             next(new errors.ValidationFailedError('Invalid Parameters',
                 imgerr));
             return;
@@ -1995,7 +2006,7 @@ function checkServerNicTags(req, callback) {
                     var nicTag = nic.nic_tag;
 
                     if (!nicTag) {
-                        error = [ errors.invalidParamErr('nic') ];
+                        error = [ errors.invalidParamErrorsElem('nic') ];
                         next(new errors.ValidationFailedError('NIC ' + mac +
                             'does not have a nitag', error));
                         return;
@@ -2010,7 +2021,7 @@ function checkServerNicTags(req, callback) {
                     nicTag = overlay ? overlay[1] : nicTag;
 
                     if (req.serverNicTags.indexOf(nicTag) === -1) {
-                        error = [ errors.invalidParamErr('server') ];
+                        error = [ errors.invalidParamErrorsElem('server') ];
                         next(new errors.ValidationFailedError(
                             'Server does not have NIC tag: ' + nicTag, error));
                         return;
@@ -2047,7 +2058,7 @@ function checkServerNicTags(req, callback) {
         }
 
         if (!satisfied) {
-            error = [ errors.invalidParamErr('server') ];
+            error = [ errors.invalidParamErrorsElem('server') ];
             done(new errors.ValidationFailedError(
                 'Server must have one of the following NIC tags: ' +
                 reqs.join(', ')));
@@ -2142,7 +2153,7 @@ function createVm(req, res, next) {
             req.vm.server_uuid = req.params.server_uuid;
 
             if (sync && ['true', 'false'].indexOf(sync) === -1) {
-                var error = [ errors.invalidParamErr('sync') ];
+                var error = [ errors.invalidParamErrorsElem('sync') ];
                 done(new errors.ValidationFailedError('Invalid Parameters',
                     error));
                 return;
@@ -2394,7 +2405,7 @@ function rollbackSnapshot(req, res, next) {
     }
 
     if (!req.params.snapshot_name) {
-        var error = [ errors.missingParamErr('snapshot_name') ];
+        var error = [ errors.missingParamErrorsElem('snapshot_name') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
@@ -2425,7 +2436,7 @@ function deleteSnapshot(req, res, next) {
     }
 
     if (!req.params.snapshot_name) {
-        var error = [ errors.missingParamErr('snapshot_name') ];
+        var error = [ errors.missingParamErrorsElem('snapshot_name') ];
         return next(new errors.ValidationFailedError('Invalid Parameters',
             error));
     }
@@ -2449,19 +2460,19 @@ function putVms(req, res, next) {
     var error;
 
     if (!req.query.server_uuid) {
-        error = [ errors.missingParamErr('server_uuid') ];
+        error = [ errors.missingParamErrorsElem('server_uuid') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
 
     if (!common.validUUID(req.query.server_uuid)) {
-        error = [ errors.invalidUuidErr('server_uuid') ];
+        error = [ errors.invalidUuidErrorsElem('server_uuid') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
 
     if (!req.params.vms) {
-        error = [ errors.missingParamErr('vms') ];
+        error = [ errors.missingParamErrorsElem('vms') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
@@ -2494,7 +2505,7 @@ function putVm(req, res, next) {
     log.trace('PutVm start');
 
     if (!common.validUUID(req.params.uuid)) {
-        var error = [ errors.invalidUuidErr('uuid') ];
+        var error = [ errors.invalidUuidErrorsElem('uuid') ];
         next(new errors.ValidationFailedError('Invalid Parameters', error));
         return;
     }
diff --git a/lib/errors.js b/lib/errors.js
index 2d9f107..c3a7575 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -187,9 +187,10 @@ ValidationFailedError.statusCode = 409;
 
 
 /*
- * General error response for invalid UUIDs
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
  */
-exports.invalidUuidErr = function (field, message) {
+exports.invalidUuidErrorsElem = function (field, message) {
     return {
         field: field || 'uuid',
         code: 'Invalid',
@@ -197,12 +198,11 @@ exports.invalidUuidErr = function (field, message) {
     };
 };
 
-
-
 /*
- * General error response for invalid parameters
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
  */
-exports.invalidParamErr = function (field, message) {
+exports.invalidParamErrorsElem = function (field, message) {
     assert.string(field, 'field');
 
     return {
@@ -212,8 +212,11 @@ exports.invalidParamErr = function (field, message) {
     };
 };
 
-
-exports.insufficientCapacityErr = function (field, message) {
+/*
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
+ */
+exports.insufficientCapacityErrorsElem = function (field, message) {
     assert.string(field, 'field');
     return {
         field: field,
@@ -222,11 +225,11 @@ exports.insufficientCapacityErr = function (field, message) {
     };
 };
 
-
 /*
- * General error response for duplicate parameters
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
  */
-exports.duplicateParamErr = function (field, message) {
+exports.duplicateParamErrorsElem = function (field, message) {
     assert.string(field, 'field');
 
     return {
@@ -236,12 +239,11 @@ exports.duplicateParamErr = function (field, message) {
     };
 };
 
-
-
 /*
- * General error response for missing request parameters
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
  */
-exports.missingParamErr = function (field, message) {
+exports.missingParamErrorsElem = function (field, message) {
     assert.string(field, 'field');
 
     var obj = {
@@ -256,7 +258,11 @@ exports.missingParamErr = function (field, message) {
     return obj;
 };
 
-exports.conflictingParamsErr = function conflictingParamsErr(fields, message) {
+/*
+ * Returns an "errors" array element for an API error response object per:
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling
+ */
+exports.conflictingParamsErrorsElem = function (fields, message) {
     assert.arrayOfString(fields, 'fields');
 
     var obj = {
diff --git a/test/vms.validate.test.js b/test/vms.validate.test.js
index c0804d5..40d2a31 100644
--- a/test/vms.validate.test.js
+++ b/test/vms.validate.test.js
@@ -106,7 +106,7 @@ exports.check_no_package_brand = function check_no_package_brand(t) {
         billing_id: PACKAGES['JOYENT_PACKAGE'].uuid,
         brand: 'joyent'
     }, errs, function _onValidated(err) {
-        t.ok(!err, 'package should be valid when it has no brand');
+        t.ok(!err, 'should be no err validating: err=' + err);
         t.deepEqual(errs, [],
             'should be no errors when package has no brand');
         t.done();
@@ -121,7 +121,7 @@ exports.check_valid_package_brand = function check_valid_package_brand(t) {
         billing_id: PACKAGES['BHYVE_PACKAGE'].uuid,
         brand: 'bhyve'
     }, errs, function _onValidated(err) {
-        t.ok(!err, 'package should be valid when brand matches provision');
+        t.ok(!err, 'should be no err validating: err=' + err);
         t.deepEqual(errs, [],
             'should be no errors when brand matches provision');
         t.done();
@@ -136,18 +136,13 @@ exports.check_invalid_package_brand = function check_invalid_package_brand(t) {
         billing_id: PACKAGES['BHYVE_PACKAGE'].uuid,
         brand: 'kvm'
     }, errs, function _onValidated(err) {
-        t.ok(err,
-            'package should be invalid when brand does not match provision');
-        t.equal(err.field, 'brand', 'field with problem should be "brand"');
-        t.equal(err.code, 'Invalid', 'error code should be "Invalid"');
-        t.equal(err.message,
-            'Package requires brand "bhyve", but brand "kvm" was specified',
-            'error message should indicate package and brand conflict');
-
-        // errs is only populated in rare cases. Not including this one.
-        t.deepEqual(errs, [],
-            'errs should be empty after brand does not match provision');
-
+        t.ok(!err, 'should be no err validating: err=' + err);
+        t.deepEqual(errs, [ {
+            code: 'Invalid',
+            field: 'brand',
+            message: 'Package requires brand "bhyve", but brand "kvm" was '
+                + 'specified'
+        } ], 'should be error in errs when package brand does not match');
         t.done();
     });
 };
-- 
2.21.0

