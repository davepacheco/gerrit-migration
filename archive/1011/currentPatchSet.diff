From 367b774d74e397cc754e5247365d375b0d917af2 Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Mon, 28 Nov 2016 16:34:27 -0500
Subject: [PATCH] .bin triton tag {delete,get,list,replace-all,set}

---
 lib/do_instance/do_tag/do_delete.js      | 74 +++++++++++++-----------
 lib/do_instance/do_tag/do_get.js         | 32 +++++-----
 lib/do_instance/do_tag/do_list.js        | 27 +++++----
 lib/do_instance/do_tag/do_replace_all.js |  4 +-
 lib/do_instance/do_tag/do_set.js         |  4 +-
 5 files changed, 82 insertions(+), 59 deletions(-)

diff --git a/lib/do_instance/do_tag/do_delete.js b/lib/do_instance/do_tag/do_delete.js
index deeb518..261a9bc 100644
--- a/lib/do_instance/do_tag/do_delete.js
+++ b/lib/do_instance/do_tag/do_delete.js
@@ -12,6 +12,7 @@
 
 var vasync = require('vasync');
 
+var common = require('../../common');
 var errors = require('../../errors');
 
 
@@ -29,41 +30,46 @@ function do_delete(subcmd, opts, args, cb) {
     }
     var waitTimeoutMs = opts.wait_timeout * 1000; /* seconds to ms */
 
-    if (opts.all) {
-        self.top.tritonapi.deleteAllInstanceTags({
-            id: args[0],
-            wait: opts.wait,
-            waitTimeout: waitTimeoutMs
-        }, function (err) {
-            console.log('Deleted all tags on instance %s', args[0]);
-            cb(err);
-        });
-    } else {
-        // Uniq'ify the given names.
-        var names = {};
-        args.slice(1).forEach(function (arg) { names[arg] = true; });
-        names = Object.keys(names);
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
+        }
+        if (opts.all) {
+            self.top.tritonapi.deleteAllInstanceTags({
+                id: args[0],
+                wait: opts.wait,
+                waitTimeout: waitTimeoutMs
+            }, function (err) {
+                console.log('Deleted all tags on instance %s', args[0]);
+                cb(err);
+            });
+        } else {
+            // Uniq'ify the given names.
+            var names = {};
+            args.slice(1).forEach(function (arg) { names[arg] = true; });
+            names = Object.keys(names);
 
-        // TODO: Instead of waiting for each delete, let's delete them all then
-        // wait for the set.
-        vasync.forEachPipeline({
-            inputs: names,
-            func: function deleteOne(name, next) {
-                self.top.tritonapi.deleteInstanceTag({
-                    id: args[0],
-                    tag: name,
-                    wait: opts.wait,
-                    waitTimeout: waitTimeoutMs
-                }, function (err) {
-                    if (!err) {
-                        console.log('Deleted tag %s on instance %s',
-                            name, args[0]);
-                    }
-                    next(err);
-                });
-            }
-        }, cb);
-    }
+            // TODO: Instead of waiting for each delete, let's delete
+            // them all then wait for the set.
+            vasync.forEachPipeline({
+                inputs: names,
+                func: function deleteOne(name, next) {
+                    self.top.tritonapi.deleteInstanceTag({
+                        id: args[0],
+                        tag: name,
+                        wait: opts.wait,
+                        waitTimeout: waitTimeoutMs
+                    }, function (err) {
+                        if (!err) {
+                            console.log('Deleted tag %s on instance %s',
+                                        name, args[0]);
+                        }
+                        next(err);
+                    });
+                }
+            }, cb);
+        }
+    });
 }
 
 do_delete.options = [
diff --git a/lib/do_instance/do_tag/do_get.js b/lib/do_instance/do_tag/do_get.js
index 9060300..d78c300 100644
--- a/lib/do_instance/do_tag/do_get.js
+++ b/lib/do_instance/do_tag/do_get.js
@@ -10,6 +10,7 @@
  * `triton instance tag get ...`
  */
 
+var common = require('../../common');
 var errors = require('../../errors');
 
 
@@ -23,20 +24,25 @@ function do_get(subcmd, opts, args, cb) {
         return;
     }
 
-    self.top.tritonapi.getInstanceTag({
-        id: args[0],
-        tag: args[1]
-    }, function (err, value) {
-        if (err) {
-            cb(err);
-            return;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
         }
-        if (opts.json) {
-            console.log(JSON.stringify(value));
-        } else {
-            console.log(value);
-        }
-        cb();
+        self.top.tritonapi.getInstanceTag({
+            id: args[0],
+            tag: args[1]
+        }, function (err, value) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            if (opts.json) {
+                console.log(JSON.stringify(value));
+            } else {
+                console.log(value);
+            }
+            cb();
+        });
     });
 }
 
diff --git a/lib/do_instance/do_tag/do_list.js b/lib/do_instance/do_tag/do_list.js
index 60023ef..09d7dba 100644
--- a/lib/do_instance/do_tag/do_list.js
+++ b/lib/do_instance/do_tag/do_list.js
@@ -10,6 +10,7 @@
  * `triton instance tag list ...`
  */
 
+var common = require('../../common');
 var errors = require('../../errors');
 
 function do_list(subcmd, opts, args, cb) {
@@ -22,17 +23,23 @@ function do_list(subcmd, opts, args, cb) {
         return;
     }
 
-    self.top.tritonapi.listInstanceTags({id: args[0]}, function (err, tags) {
-        if (err) {
-            cb(err);
-            return;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
         }
-        if (opts.json) {
-            console.log(JSON.stringify(tags));
-        } else {
-            console.log(JSON.stringify(tags, null, 4));
-        }
-        cb();
+        self.top.tritonapi.listInstanceTags(
+            {id: args[0]}, function (err, tags) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            if (opts.json) {
+                console.log(JSON.stringify(tags));
+            } else {
+                console.log(JSON.stringify(tags, null, 4));
+            }
+            cb();
+        });
     });
 }
 
diff --git a/lib/do_instance/do_tag/do_replace_all.js b/lib/do_instance/do_tag/do_replace_all.js
index fa6f643..97a5dc4 100644
--- a/lib/do_instance/do_tag/do_replace_all.js
+++ b/lib/do_instance/do_tag/do_replace_all.js
@@ -12,6 +12,7 @@
 
 var vasync = require('vasync');
 
+var common = require('../../common');
 var errors = require('../../errors');
 var mat = require('../../metadataandtags');
 
@@ -27,7 +28,8 @@ function do_replace_all(subcmd, opts, args, cb) {
     }
     var log = self.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
         function gatherTags(ctx, next) {
             mat.tagsFromSetArgs(opts, args.slice(1), log, function (err, tags) {
                 if (err) {
diff --git a/lib/do_instance/do_tag/do_set.js b/lib/do_instance/do_tag/do_set.js
index 8040e63..e3e2fbb 100644
--- a/lib/do_instance/do_tag/do_set.js
+++ b/lib/do_instance/do_tag/do_set.js
@@ -12,6 +12,7 @@
 
 var vasync = require('vasync');
 
+var common = require('../../common');
 var errors = require('../../errors');
 var mat = require('../../metadataandtags');
 
@@ -27,7 +28,8 @@ function do_set(subcmd, opts, args, cb) {
     }
     var log = self.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
         function gatherTags(ctx, next) {
             mat.tagsFromSetArgs(opts, args.slice(1), log, function (err, tags) {
                 if (err) {
-- 
2.21.0

