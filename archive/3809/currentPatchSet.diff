commit e1657f5b13e8fd2681f4b4c1c753535960889e8b (refs/changes/09/3809/1)
Author: John Levon <john.levon@joyent.com>
Date:   2018-04-11T21:27:03+00:00 (1 year, 6 months ago)
    
    OS-6882 zhyve should re-exec() for args

diff --git a/exception_lists/check_rtime b/exception_lists/check_rtime
index fc19dd369b..39f86feed4 100644
--- a/exception_lists/check_rtime
+++ b/exception_lists/check_rtime
@@ -64,11 +64,9 @@ SKIP		^usr/lib/sysevent/modules/picl_slm.so$
 # Objects that are allowed to have executable data segments
 EXEC_DATA	^MACH(lib)/ld\.so\.1$
 EXEC_DATA	^lib/libc\.so\.1$	# 6524709, 32-bit, needed for x86 only
-EXEC_DATA	^lib/amd64/libumem\.so\.1$ # ptcumem
-EXEC_DATA	^lib/libumem\.so\.1$	# ptcumem
+EXEC_DATA	^MACH(lib)/libumem\.so\.1$ # ptcumem
 EXEC_DATA	^opt/SUNWdtrt/tst/.*/ustack/tst\.helper\.exe$
 EXEC_DATA	^platform/.*/MACH(kernel)/unix$
-EXEC_DATA	^platform/.*/multiboot$
 
 # Objects that are allowed to have an executable stack
 EXEC_STACK	^platform/.*/MACH(kernel)/unix$
@@ -98,9 +96,6 @@ UNDEF_REF	^usr/lib/libnisdb\.so\.2$
 # Objects allowed to have unused dependencies
 UNUSED_DEPS	^usr/lib/picl/plugins/		# require devtree dependencies
 
-# libm.so.2 dependency
-UNUSED_OBJ	unused object=.*MACH(libm)/libm_hwcap1\.so\.2
-
 # libnetsnmphelpers.so is empty in some net-snmp versions
 UNUSED_OBJ	unused object=.*/libnetsnmphelpers\.so\..*
 UNREF_OBJ	unreferenced object=.*/libnetsnmphelpers\.so\..*
@@ -109,7 +104,6 @@ UNREF_OBJ	unreferenced object=.*/libnetsnmphelpers\.so\..*
 UNUSED_RPATH	/usr/lib/fs/autofs.*\ from\ .automountd
 UNUSED_RPATH	/etc/ppp/plugins.*\ from\ .*pppd
 UNUSED_RPATH	/usr/lib/inet/ppp.*\ from\ .*pppd
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libipsecutil\.so\.1
 UNUSED_RPATH	/usr/platform/.*rsmlib.*\ from\ .*librsm\.so\.2
 UNUSED_RPATH	\$ORIGIN.*\ from\ .*fcode.so
 UNUSED_RPATH	/opt/VRTSvxvm/lib.*\ from\ .*libdiskmgt\.so\.1
@@ -124,33 +118,14 @@ UNUSED_RPATH	/usr/lib/mps.*\ from\ .*libnss3\.so
 UNUSED_RPATH	/usr/lib/mps.*\ from\ .*libnssutil3\.so
 UNUSED_RPATH	/usr/lib/mps.*\ from\ .*libsmime3\.so
 UNUSED_RPATH	/usr/lib/mps.*\ from\ .*libssl3\.so
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libdbus-1\.so\.3
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libdbus-glib-1\.so\.2
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libglib-2\.0\.so\.0
-UNUSED_RPATH	/usr/X11/lib.*\ from\ .*libglib-2\.0\.so\.0
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libgobject-2\.0\.so\.0
-UNUSED_RPATH	/usr/X11/lib.*\ from\ .*libgobject-2\.0\.so\.0
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libgthread-2\.0\.so\.0
-UNUSED_RPATH	/usr/X11/lib.*\ from\ .*libgthread-2\.0\.so\.0
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libcrypto\.so\.0\.9\.8
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libnetsnmp\.so\..*
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libgcc_s\.so\.1
-UNUSED_RPATH	/usr/ccs/lib.*\ from\ .*libgcc_s\.so\.1
-UNUSED_RPATH	/usr/lib.*\ from\ .*libgcc_s\.so\.1
-UNUSED_RPATH	/usr/postgres/8.3/lib.*\ from\ .*libpq\.so\.5
-UNUSED_RPATH	/usr/sfw/lib.*\ from\ .*libpq\.so\.5
 UNUSED_RPATH	/usr/lib.*\ from\ .*/usr/lib/mps
-UNUSED_RPATH	/usr/ccs/lib.*\ from\ .*/usr/lib/mps
 UNUSED_RPATH	/usr/gnu/lib.*\ from\ .*/usr/lib/libpython2\..
 UNUSED_RPATH	/usr/gnu/lib.*\ from\ .*/usr/lib/64/libpython2\..
 UNUSED_RPATH	/usr/snadm/lib.*\ from\ .*/usr/snadm/lib/libspmicommon\.so\.1
 UNUSED_RPATH	/usr/gcc/.*/lib.*\ from\ .*
 
-
 # Unused runpaths for reasons not captured above
 UNUSED_RPATH	/usr/lib/smbsrv.*\ from\ .*libsmb\.so\.1 	# future needs
-UNUSED_RPATH	/usr.*\ from\ .*tst\.gcc\.exe			# gcc built
-
 
 # Unreferenced objects of non-OSnet objects we can't change
 UNREF_OBJ	/lib.*\ of\ .*libcimapi\.so
@@ -214,21 +189,52 @@ OLDDEP		libw\.so\.1			# on297 build 7
 # for implementation reasons, and the mangled names used to encode argument
 # and return value types are difficult to handle well in mapfiles.
 # Furthermore, the Sun compiler and gcc use different and incompatible
-# name mangling conventions. Since ON must be buildable by either, we
+# name mangling conventions. Since illumos must be buildable by either, we
 # would have to maintain two sets of mapfiles for each such object.
-# C++ use is rare in ON, so this is not worth pursuing.
+# C++ use is rare in illumos, so this is not worth pursuing.
 #
 NOSYMSORT	opt/SUNWdtrt/tst/common/pid/tst.weak2.exe	# DTrace test
-NOSYMSORT	lib/amd64/libnsl\.so\.1				# C++
-NOSYMSORT	lib/sparcv9/libnsl\.so\.1			# C++
-NOSYMSORT	lib/sparcv9/libfru\.so\.1			# C++
-NOSYMSORT	usr/lib/lms					# C++
 NOSYMSORT	ld\.so\.1					# libc_pic.a user
-NOSYMSORT	lib/libsun_fc\.so\.1				# C++
-NOSYMSORT	lib/amd64/libsun_fc\.so\.1			# C++
-NOSYMSORT	lib/sparcv9/libsun_fc\.so\.1 			# C++
-NOSYMSORT	usr/lib/amd64/libfru\.so\.1			# C++
-
+NOSYMSORT	usr/MACH(lib)/libsun_fc\.so\.1			# C++
+NOSYMSORT	usr/MACH(lib)/libfru\.so\.1			# C++
+
+# The majority of illumos deliverables should not depend on the GCC runtime
+# (any necessary runtime symbol should be provided by libc.so, instead).
+# However, the GNU C++ runtime requires the GCC runtime, so certain objects
+# must be excepted.
+FORBIDDEN	libgcc_s\.so
+FORBIDDEN_DEP	usr/bin/audioconvert            # C++
+FORBIDDEN_DEP   usr/bin/make                    # C++
+FORBIDDEN_DEP   usr/MACH(lib)/libfru.so.1       # C++
+FORBIDDEN_DEP   usr/MACH(lib)/libsun_fc.so.1    # C++
+FORBIDDEN_DEP   usr/lib/netsvc/yp/rpc.yppasswdd # C++
+FORBIDDEN_DEP   usr/lib/netsvc/yp/ypserv        # C++
+FORBIDDEN_DEP   usr/lib/netsvc/yp/ypxfr         # C++
+FORBIDDEN_DEP   usr/lib/netsvc/yp/ypxfrd        # C++
+
+# libfakekernel is a test environment, not intended for general use
+FORBIDDEN libfakekernel\.so
+FORBIDDEN_DEP usr/MACH(lib)/libzpool.so.1
+FORBIDDEN_DEP usr/bin/amd64/ztest
+FORBIDDEN_DEP usr/bin/i86/ztest
+FORBIDDEN_DEP usr/bin/sparcv7/ztest
+FORBIDDEN_DEP usr/bin/sparcv9/ztest
+FORBIDDEN_DEP usr/lib/MACH(smbsrv)/libfksmbsrv.so.1
+FORBIDDEN_DEP usr/lib/smbsrv/fksmbd
+FORBIDDEN_DEP usr/sbin/amd64/zdb
+FORBIDDEN_DEP usr/sbin/i86/zdb
+FORBIDDEN_DEP usr/sbin/sparcv7/zdb
+FORBIDDEN_DEP usr/sbin/sparcv9/zdb
+
+# libucb is intended for legacy compatibility, not general use
+FORBIDDEN libucb\.so
+FORBIDDEN_DEP usr/ucb/
+FORBIDDEN_DEP usr/ucblib/
+
+# Older versions of libraries only provided for binary compatibility
+FORBIDDEN libm\.so\.1
+FORBIDDEN libresolv\.so\.1
+FORBIDDEN libxcurses\.so\.1
 
 # The libprtdiag_psr.so.1 objects built under usr/src/lib/libprtdiag_psr
 # are a family, all built using the same makefile, targeted at different
@@ -236,5 +242,3 @@ NOSYMSORT	usr/lib/amd64/libfru\.so\.1			# C++
 # one size fits all approach causes an object to be linked against an
 # unneeded library.
 UNREF_OBJ	lib/(libdevinfo|libcfgadm)\.so\.1; .*\ of\ .*SUNW,Netra-CP2300/lib/libprtdiag_psr\.so\.1
-
-
diff --git a/manifest b/manifest
index 24dec079c9..56b24ae1a9 100644
--- a/manifest
+++ b/manifest
@@ -5102,7 +5102,7 @@ f usr/lib/brand/bhyve/uninstall 0555 root sys
 f usr/lib/brand/bhyve/config.xml 0444 root sys
 f usr/lib/brand/bhyve/platform.xml 0444 root sys
 f usr/lib/brand/bhyve/statechange 0555 root sys
-h usr/lib/brand/bhyve/zhyve=usr/sbin/bhyve
+f usr/lib/brand/bhyve/zhyve 0555 root sys
 d usr/lib/brand/lx 0755 root bin
 s usr/lib/brand/lx/64=amd64
 d usr/lib/brand/lx/amd64 0755 root bin
@@ -9995,13 +9995,6 @@ d usr/lib/smbfs 0755 root bin
 f usr/lib/smbfs/smbiod 0555 root bin
 f usr/lib/smbfs/smbiod-svc 0555 root bin
 d usr/lib/smbsrv 0755 root bin
-d usr/lib/smbsrv/amd64 0755 root bin
-f usr/lib/smbsrv/amd64/libmlsvc.so.1 0755 root bin
-s usr/lib/smbsrv/amd64/libmlsvc.so=libmlsvc.so.1
-f usr/lib/smbsrv/amd64/libsmb.so.1 0755 root bin
-s usr/lib/smbsrv/amd64/libsmb.so=libsmb.so.1
-f usr/lib/smbsrv/amd64/libsmbns.so.1 0755 root bin
-s usr/lib/smbsrv/amd64/libsmbns.so=libsmbns.so.1
 d usr/lib/smbsrv/dtrace 0755 root bin
 f usr/lib/smbsrv/dtrace/smbd-all.d 0555 root bin
 f usr/lib/smbsrv/dtrace/smbd-authsvc.d 0555 root bin
@@ -10011,6 +10004,7 @@ f usr/lib/smbsrv/dtrace/smbnode.d 0555 root bin
 f usr/lib/smbsrv/dtrace/smbsrv.d 0555 root bin
 f usr/lib/smbsrv/dtrace/smbvfs.d 0555 root bin
 f usr/lib/smbsrv/libmlsvc.so.1 0755 root bin
+f usr/lib/smbsrv/libsmb.so.1 0755 root bin
 f usr/lib/smbsrv/libsmbns.so.1 0755 root bin
 f usr/lib/smbsrv/smbd 0755 root bin
 d usr/lib/smedia 0755 root bin
diff --git a/usr/src/Makefile.master b/usr/src/Makefile.master
index 70faac9962..bc17d2c338 100644
--- a/usr/src/Makefile.master
+++ b/usr/src/Makefile.master
@@ -126,7 +126,9 @@ ONBLD_TOOLS=		$(BUILD_TOOLS)/onbld
 JAVA_HOME=	/usr/java
 # define buildtime JAVA_ROOT
 JAVA_ROOT=	/usr/java
-# define to build with JAVA 8
+# Build uses java7 by default.  Pass one the variables below set to empty
+# string in the environment to override.
+BLD_JAVA_6=	$(POUND_SIGN)
 BLD_JAVA_8=	$(POUND_SIGN)
 
 GCC_ROOT=	/opt/gcc/4.4.4
diff --git a/usr/src/cmd/bhyve/Makefile b/usr/src/cmd/bhyve/Makefile
index ee5a139e0c..324afca2f8 100644
--- a/usr/src/cmd/bhyve/Makefile
+++ b/usr/src/cmd/bhyve/Makefile
@@ -15,7 +15,6 @@
 #
 
 PROG =		bhyve
-ZHYVE =		$(ROOT)/usr/lib/brand/bhyve/zhyve
 
 include ../Makefile.cmd
 include ../Makefile.cmd.64
@@ -75,18 +74,21 @@ SRCS =	acpi.c			\
 	vmm_instruction_emul.c	\
 	xmsr.c			\
 	spinup_ap.c		\
-	bhyve_sol_glue.c	\
-	zhyve.c
+	bhyve_sol_glue.c
 
 OBJS = $(SRCS:.c=.o)
 
-CLEANFILES =	$(PROG)
 CLOBBERFILES =	$(ROOTUSRSBINPROG) $(ZHYVE)
 
+ZHYVE_DIR =	$(ROOT)/usr/lib/brand/bhyve
+ZHYVE_PROG = 	zhyve
+ZHYVE =		$(ZHYVE_DIR)/$(ZHYVE_PROG)
+
 MEVENT_TEST_PROG = mevent_test
 MEVENT_TEST_SRCS = mevent.c mevent_test.c
 MEVENT_TEST_OBJS = $(MEVENT_TEST_SRCS:.c=.o)
-CLEANFILES +=	$(MEVENT_TEST_PROG) $(MEVENT_TEST_OBJS)
+
+CLEANFILES =	$(PROG) $(ZHYVE_PROG) $(MEVENT_TEST_PROG) $(MEVENT_TEST_OBJS)
 
 CFLAGS +=	$(CCVERBOSE) -_gcc=-Wimplicit-function-declaration -_gcc=-Wno-parentheses
 CPPFLAGS =	-I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
@@ -103,14 +105,13 @@ CPPFLAGS =	-I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
 		-DWITHOUT_CAPSICUM
 LDLIBS +=	-lsocket -lnsl -ldlpi -ldladm -lmd -luuid -lvmmapi -lz -lnvpair
 
+zhyve := LDLIBS = -lnvpair
+
 POST_PROCESS += ; $(GENSETDEFS) $@
 
 .KEEP_STATE:
 
-# Real main is in zhyve.c
-bhyverun.o :=	CPPFLAGS += -Dmain=bhyve_main
-
-all: $(PROG) $(MEVENT_TEST_PROG) $(SUBDIRS)
+all: $(PROG) $(MEVENT_TEST_PROG) $(ZHYVE_PROG) $(SUBDIRS)
 
 $(PROG): $(OBJS)
 	$(LINK.c) -o $@ $(OBJS) $(LDFLAGS) $(LDLIBS)
@@ -119,9 +120,7 @@ $(PROG): $(OBJS)
 $(MEVENT_TEST_PROG): $(MEVENT_TEST_OBJS)
 	$(LINK.c) -o $@ $(MEVENT_TEST_OBJS) -lsocket
 
-install: all $(ROOTUSRSBINPROG) $(SUBDIRS)
-	$(RM) $(ZHYVE)
-	$(LN) $(ROOTUSRSBIN)/$(PROG) $(ZHYVE)
+install: all $(ZHYVE) $(ROOTUSRSBINPROG) $(SUBDIRS)
 
 clean: $(SUBDIRS)
 	$(RM) $(OBJS) $(CLEANFILES)
@@ -138,6 +137,9 @@ FRC:
 
 include ../Makefile.targ
 
+$(ZHYVE_DIR)/%: %
+	$(INS.file)
+
 %.o: $(SRC)/uts/i86pc/io/vmm/%.c
 	$(COMPILE.c) $<
 	$(POST_PROCESS_O)
diff --git a/usr/src/cmd/bhyve/bhyverun.c b/usr/src/cmd/bhyve/bhyverun.c
index ca7983edd2..04a92aab1b 100644
--- a/usr/src/cmd/bhyve/bhyverun.c
+++ b/usr/src/cmd/bhyve/bhyverun.c
@@ -76,6 +76,10 @@ __FBSDID("$FreeBSD$");
 #endif
 #include <vmmapi.h>
 
+#ifndef __FreeBSD__
+#include <sys/stat.h>
+#endif
+
 #include "bhyverun.h"
 #include "acpi.h"
 #include "atkbdc.h"
@@ -127,7 +131,6 @@ int bcons_wait = 0;
 int bcons_connected = 0;
 pthread_mutex_t bcons_wait_lock = PTHREAD_MUTEX_INITIALIZER;
 pthread_cond_t bcons_wait_done = PTHREAD_COND_INITIALIZER;
-void (*vm_started_cb)(void) = NULL;
 #endif
 
 static cpuset_t cpumask;
@@ -859,6 +862,28 @@ do_open(const char *vmname)
 	return (ctx);
 }
 
+#ifndef __FreeBSD__
+
+#define	FILE_PROVISIONING	"/var/svc/provisioning"
+#define	FILE_PROVISION_SUCCESS	"/var/svc/provision_success"
+
+static void
+mark_provisioned(void)
+{
+	struct stat stbuf;
+
+	if (lstat(FILE_PROVISIONING, &stbuf) != 0)
+		return;
+
+	if (rename(FILE_PROVISIONING, FILE_PROVISION_SUCCESS) != 0) {
+		(void) fprintf(stderr, "Cannot rename %s to %s: %s\n",
+		    FILE_PROVISIONING, FILE_PROVISION_SUCCESS,
+		    strerror(errno));
+	}
+}
+
+#endif
+
 int
 main(int argc, char *argv[])
 {
@@ -1120,9 +1145,7 @@ main(int argc, char *argv[])
 	fbsdrun_addcpu(ctx, BSP, BSP, rip);
 
 #ifndef __FreeBSD__
-	if (vm_started_cb != NULL) {
-		vm_started_cb();
-	}
+	mark_provisioned();
 #endif
 
 	/*
diff --git a/usr/src/cmd/bhyve/zhyve.c b/usr/src/cmd/bhyve/zhyve.c
index de94ea97bd..d3e764b14d 100644
--- a/usr/src/cmd/bhyve/zhyve.c
+++ b/usr/src/cmd/bhyve/zhyve.c
@@ -9,11 +9,16 @@
  * http://www.illumos.org/license/CDDL.
  */
 
-
 /*
  * Copyright (c) 2018, Joyent, Inc.
  */
 
+/*
+ * This small 'zhyve' stub is init for the zone: we therefore need to pick up
+ * our command-line arguments placed in ZHYVE_CMD_FILE by the boot stub, do a
+ * little administration, and exec the real bhyve binary.
+ */
+
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -29,28 +34,6 @@
 
 #define	ZHYVE_CMD_FILE	"/var/run/bhyve/zhyve.cmd"
 
-#define	FILE_PROVISIONING	"/var/svc/provisioning"
-#define	FILE_PROVISION_SUCCESS	"/var/svc/provision_success"
-
-extern int bhyve_main(int, char **);
-void (*vm_started_cb)(void);
-const char *cmdname;
-
-/*
- * Much like basename() but does not alter the path passed to it.
- */
-static void
-get_cmdname(const char *path)
-{
-	cmdname = strrchr(path, '/');
-	if (cmdname == NULL) {
-		cmdname = path;
-		return;
-	}
-	assert(*cmdname == '/');
-	cmdname++;
-}
-
 /*
  * Do a read of the specified size or return an error.  Returns 0 on success
  * and -1 on error.  Sets errno to EINVAL if EOF is encountered.  For other
@@ -101,7 +84,7 @@ parse_options_file(const char *path, uint_t *argcp, char ***argvp)
 	    (buf = malloc(stbuf.st_size)) == NULL ||
 	    full_read(fd, buf, stbuf.st_size) != 0 ||
 	    nvlist_unpack(buf, stbuf.st_size, &nvl, 0) != 0 ||
-	    nvlist_lookup_string_array(nvl, "zhyve_args", argvp, argcp) != 0) {
+	    nvlist_lookup_string_array(nvl, "bhyve_args", argvp, argcp) != 0) {
 		nvlist_free(nvl);
 		ret = -1;
 	} else {
@@ -117,16 +100,6 @@ parse_options_file(const char *path, uint_t *argcp, char ***argvp)
 	return (ret);
 }
 
-static void
-mark_provisioned(void)
-{
-	if (rename(FILE_PROVISIONING, FILE_PROVISION_SUCCESS) != 0) {
-		(void) fprintf(stderr, "Cannot rename %s to %s: %s\n",
-		    FILE_PROVISIONING, FILE_PROVISION_SUCCESS,
-		    strerror(errno));
-	}
-}
-
 /*
  * Setup to suppress core dumps within the zone.
  */
@@ -139,15 +112,10 @@ config_core_dumps()
 int
 main(int argc, char **argv)
 {
+	char **tmpargs;
 	uint_t zargc;
 	char **zargv;
 	int fd;
-	struct stat stbuf;
-
-	get_cmdname(argv[0]);
-	if (strcmp(cmdname, "zhyve") != 0) {
-		return (bhyve_main(argc, argv));
-	}
 
 	config_core_dumps();
 
@@ -176,13 +144,24 @@ main(int argc, char **argv)
 
 	if (parse_options_file(ZHYVE_CMD_FILE, &zargc, &zargv) != 0) {
 		(void) fprintf(stderr, "%s: failed to parse %s: %s\n",
-		    cmdname, ZHYVE_CMD_FILE, strerror(errno));
-		return (1);
+		    argv[0], ZHYVE_CMD_FILE, strerror(errno));
+		return (EXIT_FAILURE);
 	}
 
-	if (lstat(FILE_PROVISIONING, &stbuf) == 0) {
-		vm_started_cb = mark_provisioned;
+	/*
+	 * Annoyingly, we need a NULL at the end.
+	 */
+
+	if ((tmpargs = malloc(sizeof (*zargv) * (zargc + 1))) == NULL) {
+		perror("malloc failed");
+		return (EXIT_FAILURE);
 	}
 
-	return (bhyve_main(zargc, zargv));
+	memcpy(tmpargs, zargv, sizeof (*zargv) * zargc);
+	tmpargs[zargc] = NULL;
+
+	(void) execv("/usr/sbin/bhyve", tmpargs);
+
+	perror("execv failed");
+	return (EXIT_FAILURE);
 }
diff --git a/usr/src/lib/brand/bhyve/zone/boot.c b/usr/src/lib/brand/bhyve/zone/boot.c
index b8c4fa062b..5b071a3974 100644
--- a/usr/src/lib/brand/bhyve/zone/boot.c
+++ b/usr/src/lib/brand/bhyve/zone/boot.c
@@ -110,6 +110,12 @@ add_smbios(int *argc, char **argv)
 	const char *version;
 	const char *uuid;
 
+	if ((uuid = getenv("_ZONECFG_uuid")) != NULL) {
+		if (add_arg(argc, argv, "-U") != 0 ||
+		    add_arg(argc, argv, uuid) != 0)
+			return (1);
+	}
+
 	/*
 	 * Look for something like joyent_20180329T120303Z.  A little mucky, but
 	 * it's exactly what sysinfo does.
@@ -132,12 +138,6 @@ add_smbios(int *argc, char **argv)
 	    add_arg(argc, argv, smbios) != 0)
 		return (1);
 
-	if ((uuid = getenv("_ZONECFG_uuid")) != NULL) {
-		if (add_arg(argc, argv, "-U") != 0 ||
-		    add_arg(argc, argv, uuid) != 0)
-			return (1);
-	}
-
 	return (0);
 }
 
@@ -537,7 +537,7 @@ main(int argc, char **argv)
 {
 	int fd, err;
 	char *zhargv[ZH_MAXARGS] = {
-		"zhyve",	/* Squats on argv[0] */
+		"bhyve",	/* Squats on argv[0] */
 		"-H",		/* vmexit on halt isns */
 		NULL };
 	int zhargc = 2;
@@ -577,7 +577,7 @@ main(int argc, char **argv)
 	 * exit.
 	 */
 	if (nvlist_alloc(&nvl, NV_UNIQUE_NAME, 0) != 0 ||
-	    nvlist_add_string_array(nvl, "zhyve_args", zhargv, zhargc) != 0) {
+	    nvlist_add_string_array(nvl, "bhyve_args", zhargv, zhargc) != 0) {
 		(void) printf("Error: failed to create nvlist: %s\n",
 		    strerror(errno));
 		return (1);
diff --git a/usr/src/pkg/Makefile b/usr/src/pkg/Makefile
index 02f1d34145..28b315f22c 100644
--- a/usr/src/pkg/Makefile
+++ b/usr/src/pkg/Makefile
@@ -167,9 +167,12 @@ PM_TRANSFORMS= common_actions publish restart_fmri facets defaults \
 	extract_metadata
 PM_INC= transforms manifests
 
-JAVA_8_ONLY=$(BLD_JAVA_8)
 JAVA_7_ONLY=
+JAVA_8_ONLY=
+$(BLD_JAVA_6)JAVA_7_ONLY=$(POUND_SIGN)
+$(BLD_JAVA_6)JAVA_8_ONLY=$(POUND_SIGN)
 $(BLD_JAVA_8)JAVA_7_ONLY=$(POUND_SIGN)
+$(JAVA_7_ONLY)JAVA_8_ONLY=$(POUND_SIGN)
 
 PKGMOG_DEFINES= \
 	i386_ONLY=$(POUND_SIGN) \
diff --git a/usr/src/pkg/manifests/developer-build-onbld.mf b/usr/src/pkg/manifests/developer-build-onbld.mf
index f7e60d3db3..51c3a1aa98 100644
--- a/usr/src/pkg/manifests/developer-build-onbld.mf
+++ b/usr/src/pkg/manifests/developer-build-onbld.mf
@@ -201,7 +201,7 @@ file path=opt/onbld/lib/python$(PYTHON_VERSION)/onbld/__init__.pyc mode=0444
 file path=opt/onbld/man/man1onbld/Install.1onbld
 file path=opt/onbld/man/man1onbld/bldenv.1onbld
 file path=opt/onbld/man/man1onbld/bringovercheck.1onbld
-file path=opt/onbld/man/man1onbld/btxld.1onbld
+$(i386_ONLY)file path=opt/onbld/man/man1onbld/btxld.1onbld
 file path=opt/onbld/man/man1onbld/cddlchk.1onbld
 file path=opt/onbld/man/man1onbld/check_rtime.1onbld
 file path=opt/onbld/man/man1onbld/checkpaths.1onbld
diff --git a/usr/src/pkg/manifests/system-header.mf b/usr/src/pkg/manifests/system-header.mf
index 71d3683ffb..f3721b3ce8 100644
--- a/usr/src/pkg/manifests/system-header.mf
+++ b/usr/src/pkg/manifests/system-header.mf
@@ -24,7 +24,7 @@
 # Copyright (c) 2012 by Delphix. All rights reserved.
 # Copyright 2013 Saso Kiselkov. All rights reserved.
 # Copyright 2014 Garrett D'Amore <garrett@damore.org>
-# Copyright 2017 Nexenta Systems, Inc.
+# Copyright 2018 Nexenta Systems, Inc.
 # Copyright 2016 Hans Rosenfeld <rosenfeld@grumpf.hope-2000.org>
 #
 
@@ -983,7 +983,7 @@ file path=usr/include/sys/feature_tests.h
 file path=usr/include/sys/fem.h
 file path=usr/include/sys/file.h
 file path=usr/include/sys/filio.h
-file path=usr/include/sys/firmload.h
+$(i386_ONLY)file path=usr/include/sys/firmload.h
 file path=usr/include/sys/flock.h
 file path=usr/include/sys/flock_impl.h
 $(sparc_ONLY)file path=usr/include/sys/fm/cpu/SPARC64-VI.h
@@ -1059,7 +1059,7 @@ file path=usr/include/sys/ftrace.h
 file path=usr/include/sys/fx.h
 file path=usr/include/sys/fxpriocntl.h
 file path=usr/include/sys/gfs.h
-file path=usr/include/sys/gfx_private.h
+$(i386_ONLY)file path=usr/include/sys/gfx_private.h
 file path=usr/include/sys/gld.h
 file path=usr/include/sys/gldpriv.h
 file path=usr/include/sys/group.h
diff --git a/usr/src/tools/scripts/check_rtime.1onbld b/usr/src/tools/scripts/check_rtime.1onbld
index 385acda931..f53ce0dcb0 100644
--- a/usr/src/tools/scripts/check_rtime.1onbld
+++ b/usr/src/tools/scripts/check_rtime.1onbld
@@ -19,685 +19,706 @@
 .\"
 .\" CDDL HEADER END
 .\"
-.TH CHECK_RTIME 1ONBLD "Mar 09, 2010"
-.SH NAME
-.I check_rtime
-\- check ELF runtime attributes
-.SH SYNOPSIS
-\fBcheck_rtime [-imosv] [-D depfile | -d depdir] [-E errfile] [-e exfile] [-f listfile] [-I infofile] [-w outdir] file | dir, ...\fP
-.SH DESCRIPTION
-.LP
-.I check_rtime
+.Dd February 19, 2018
+.Dt CHECK_RTIME 1ONBLD
+.Os
+.Sh NAME
+.Nm check_rtime
+.Nd check ELF runtime attributes
+.Sh SYNOPSIS
+.Nm check_rtime
+.Op Fl imosv
+.Op Fl D Ar depfile | Fl d depdir
+.Op Fl E Ar errfile
+.Op Fl e Ar exfile
+.Op Fl f Ar listfile
+.Op Fl I Ar infofile
+.Op Fl w Ar outdir
+.Ar file | dir ...
+.Sh DESCRIPTION
+.Nm check_rtime
 attempts to check a number of ELF runtime attributes
 for consistency with common build rules.
-These checks involve running \fBldd(1)\fP and
-\fBelfdump(1)\fP against a family of dynamic objects.
-A dynamic object can be defined explicitly as a \fIfile\fP
-or multiple dynamic objects can be located under the directory \fIdir\fP.
-.LP
-.I check_rtime
-is typically called from \fBnightly(1ONBLD)\fP when the \fB-r\fP
-option is in effect. In this case the dynamic objects under
-the associated \fIproto\fP area (\fB$ROOT\fP) are checked.
-.I check_rtime
+These checks involve running
+.Xr ldd 1
+and
+.Xr elfdump 1
+against a family of dynamic objects.
+A dynamic object can be defined explicitly as a
+.Ar file
+or multiple dynamic objects can be located under the directory
+.Ar dir .
+.Pp
+.Nm check_rtime
+is typically called from
+.Xr nightly 1ONBLD
+when the
+.Fl r
+option is in effect.
+In this case the dynamic objects under
+the associated
+.Em proto area
+.Pq Ev $ROOT
+are checked.
+.Nm check_rtime
 can also be run standalone against any set of dynamic objects.
-.LP
-.I check_rtime
-uses \fBldd(1)\fP to verify dependencies. This implies that
-by default any object inspected will bind to its dependencies
-as they are found in the \fBunderlying\fP system.  Use of the \fB-D\fP, \fB-d\fP
+.Pp
+.Nm check_rtime
+uses
+.Xr  ldd 1
+to verify dependencies.
+This implies that by default any object inspected will bind to its dependencies
+as they are found in the
+.Em underlying system .
+Use of the
+.Fl D ,
+.Fl d
 option, or the existence of the environment variables
-\fB$CODEMGR_WS/$ROOT\fP instruct
-.I check_rtime
+.Ev $CODEMGR_WS
+or
+.Ev $ROOT
+instruct
+.Nm check_rtime
 to establish an alternative dependency mapping using
-runtime configuration files generated with \fBcrle(1)\fP.
-.LP
-.I check_rtime
-uses \fBldd(1)\fP to completely relocate any dynamic
-object and thus detect missing dependencies, unsatisfied
-symbol relocations, unused and unreferenced dependencies. These checks
-are carried out for the following reasons:
-.TP 4
-\(bu
+runtime configuration files generated with
+.Xr crle 1 .
+.Pp
+.Nm check_rtime
+uses
+.Xr ldd 1
+to completely relocate any dynamic object and thus detect missing
+dependencies, unsatisfied symbol relocations, unused and unreferenced
+dependencies.
+These checks are carried out for the following reasons:
+.Bl -bullet
+.It
 An object that cannot find its dependencies may fail to load
-at runtime.  This error condition often goes unnoticed
-because the existing use of the object is as a dependency itself,
-and the objects' dependencies are already satisfied by the
-caller.  However, if the object itself is unable to satisfy its
-dependencies, its use in new environments may be compromised.
-.sp
-A missing or erroneous \fBrunpath\fP is the typical reason why
-an object can not locate its dependencies.  Use of the link-editors
-\fB-zdefs\fP option when building a shared object ensures required
-dependencies are established.  This flag is inherited from
-\fB$(DYNFLAGS)\fP in \fIlib/Makefile.lib\fP. Missing dependencies
-are displayed as:
-.sp
-.RS 6
-foo: bar.so.1 => (file not found)  <no -zdefs?>
-.RE
-.TP
-\(bu
+at runtime.
+This error condition often goes unnoticed because the existing use of the
+object is as a dependency itself, and the objects' dependencies are already
+satisfied by the caller.
+However, if the object itself is unable to satisfy its dependencies, its use
+in new environments may be compromised.
+.Pp
+A missing or erroneous
+.Em runpath
+is the typical reason why an object can not locate its dependencies.
+Use of the link-editors
+.Fl zdefs
+option when building a shared object ensures required dependencies are
+established.
+This flag is inherited from
+.Dv $(DYNFLAGS)
+in
+.Pa lib/Makefile.lib .
+Missing dependencies are displayed as:
+.Pp
+.Dl foo: bar.so.1 => (file not found)  <no -zdefs?>
+.It
 Unsatisfied symbol relocations indicate that some thread of
 execution through the object will fail when it is unable to
 locate a referenced symbol.
-.sp
+.Pp
 A missing, or mismatched version of a dependency is the typical
 reason for unsatisfied symbol relocations (see missing dependency
 discussion above). Unsatisfied symbol relocations are displayed as:
-.sp
-.RS 6
-foo: symbol not found: bar  <no -zdefs?>
-.RE
-.RS 4
-.sp
+.Pp
+.Dl foo: symbol not found: bar  <no -zdefs?>
+.Pp
 Note: Shared objects can make reference to symbol definitions
-that are expected to be defined by the caller. To indicate that
-such symbols are not undefined in the usual sense, you must
-specify these symbols in a \fImapfile\fP, using the \fBEXTERN\fP
-or \fBPARENT\fP symbol attribute. Without these symbol attributes,
-\fBldd(1)\fP is unable to determine the symbols special nature, and
-.I check_rtime
+that are expected to be defined by the caller.
+To indicate that such symbols are not undefined in the usual sense, you must
+specify these symbols in a
+.Em mapfile ,
+using the
+.Va EXTERN
+or
+.Va PARENT
+symbol attributes.
+Without these symbol attributes,
+.Xr ldd 1
+is unable to determine the symbols special nature, and
+.Nm check_rtime
 will report these symbols as undefined.
-.RE
-.TP
-\(bu
+.It
 Unused dependencies are wasteful at runtime, as they take time to
-load and relocate, but will not be used by the calling object.  They
-also result in unnecessary processing at link-edit time.
-.sp
-Dependency lists (typically defined via \fB$(LDLIBS)\fP)
-that have been yanked-and-put
-between \fIMakefiles\fP without verifying their need, are a typical
-reason why unused dependencies exist.  Unused dependencies are
-displayed as:
-.sp
-.RS 6
-foo: unused object=bar.so.1  <remove lib or -zignore?>
-.RE
-.TP
-\(bu
+load and relocate, but will not be used by the calling object.
+They also result in unnecessary processing at link-edit time.
+.Pp
+Dependency lists (typically defined via
+.Dv $(LDLIBS) )
+that have been copy and pasted
+between
+.Pa Makefiles
+without verifying their need, are a typicalreason why unused dependencies
+exist.
+Unused dependencies are displayed as:
+.Pp
+.Dl foo: unused object=bar.so.1  <remove lib or -zignore?>
+.It
 Unreferenced dependencies are also wasteful at runtime, although not
-to the extent of unused dependencies.  They also result in unnecessary
-processing at link-edit time.
-.sp
+to the extent of unused dependencies.
+They also result in unnecessary processing at link-edit time.
+.Pp
 Unreferenced dependency removal guards against a dependency becoming
 unused when combined with
 different objects, or as the other object dependencies evolve.
 Unreferenced dependencies are displayed as:
-.sp
-.RS 6
+.Bd -literal
 foo: unreferenced object=bar.so.1;  \\
-.br
     unused dependency of libfoo.so.1  \\
-.br
     <remove lib or -zignore?>
-.RE
-.RS 4
-.sp
-See also the section ENVIRONMENT VARIABLES.
-.RE
-.TP
-\(bu
+.Ed
+.Pp
+See also the section
+.Sx ENVIRONMENT VARIABLES .
+.It
 Unused search paths are wasteful at runtime.
 Unused search paths are displayed as:
-.sp
-.RS 6
+.Bd -literal
 foo: unused search path=/usr/foo/lib  \\
-.br
     (RUNPATH/RPATH from file libfoo.so.1)  \\
-.br
     <remove search path?>
-.RE
-.LP
-.I check_rtime
-uses \fBelfdump(1)\fP to look for a concatenated relocation
-section in shared objects, the existence of text relocations,
-whether debugging or symbol table information exists, whether
-applications have a non-executable stack defined, duplicate
-entries in the symbol sorting sections, and for direct bindings.
+.Ed
+.El
+.Pp
+.Nm check_rtime
+uses
+.Xr elfdump 1
+to look for a concatenated relocation section in shared objects, the existence
+of text relocations, whether debugging or symbol table information exists,
+whether applications have a non-executable stack defined, duplicate entries in
+the symbol sorting sections, and for direct bindings.
 These checks are carried out for the following reasons:
-.TP 4
-\(bu
-A concatenated relocation section (\fI.SUNW_reloc\fP)
-provides optimal symbol table
-access at runtime, and thus reduces the overhead of relocating
-the shared object.  In past releases, the link-edit of a dynamic object with
-the \fB-z combreloc\fP option was required to generate a combined
-relocation section.  However, with the integration of 6642769, this section
-combination is a default behavior of the link-editor.
-.sp
-In past releases, not inheriting \fB$(DYNFLAGS)\fP from
-\fIlib/Makefile.lib\fP was the typical reason for not having a
-concatenated relocation section. The misguided use of the
-\fB-z nocombreloc\fP option will also prevent the creation of a
-concatenated relocation section. A missing concatenated relocation section
-is displayed as:
-.sp
-.RS 6
-foo: .SUNW_reloc section missing  <no -zcombreloc?>
-.RE
-.TP
-\(bu
-Text relocations result in impure text segments.  As text segments
-are typically read-only, they can be shared between numerous processes.
-If they must be updated as part of the relocation then the updated
-pages become unsharable and swap space must be allocated to back
-these pages.  These events consume unnecessary system resources and
-reduce overall system performance.
-.sp
-Not inheriting the \fB$(PICS)\fP
-rules from \fIlib/Makefile.lib\fP is the typical reason for having
-non-pic code in shared objects.  Text relocations are displayed as:
-.sp
-.RS 6
-foo: TEXTREL .dynamic tag  <no -Kpic?>
-.RE
-.TP
-\(bu
-Debugging information is unnecessary in released objects.  Although
-extensive when compiled \fB-g\fP, small quantities of debugging
-information are stored in \fI.stabs\fP sections under normal
-compilations.  This debugging information is geared towards aiding
-debuggers locate relocatable objects associated with the dynamic
-objects being debugged.  As relocatable objects aren't made available
-as part of a software release this information has no use.
-.sp
-Not inheriting the correct \fB$(LDFLAGS)\fP from \fIcmd/Makefile.cmd\fP
-(which asserts \fP-s\fP), or \fB$(POST_PROCESS_SO)\fP (which asserts
-\fIstrip -x\fP) are typical reasons for not removing debugging
-information.  Note, removal of debugging information is only enabled
-for release builds. The existence of debugging information is displayed as:
-.sp
-.RS 6
+.Bl -bullet
+.It
+A concatenated relocation section 
+.Pq Em .SUNW_reloc
+provides optimal symbol table access at runtime, and thus reduces the overhead
+of relocating the shared object.
+In past releases, the link-edit of a dynamic object with the
+.Fl z Ar combreloc
+option was required to generate a combined relocation section.
+However, with the integration of 6642769, this section combination is a default behavior of
+the link-editor.
+.Pp
+In past releases, not inheriting
+.Dv $(DYNFLAGS)
+from
+.Pa lib/Makefile.lib
+was the typical reason for not having a concatenated relocation section.
+The misguided use of the
+.Fl z Ar nocombreloc
+option will also prevent the creation of a concatenated relocation section.
+A missing concatenated relocation section is displayed as:
+.Pp
+.Dl foo: .SUNW_reloc section missing  <no -zcombreloc?>
+.It
+Text relocations result in impure text segments.
+As text segments are typically read-only, they can be shared between numerous
+processes.
+If they must be updated as part of the relocation then the updated pages
+become unsharable and swap space must be allocated to back these pages.
+These events consume unnecessary system resources and reduce overall system
+performance.
+.Pp
+Not inheriting the
+.Dv $(PICS)
+rules from
+.Pa lib/Makefile.lib
+is the typical reason for having non-pic code in shared objects.
+Text relocations are displayed as:
+.Pp
+.Dl foo: TEXTREL .dynamic tag  <no -Kpic?>
+.It
+Debugging information is unnecessary in released objects.
+Although extensive when compiled
+.Fl g ,
+small quantities of debugging information are stored in
+.Em .stabs
+sections under normal compilations.
+This debugging information is geared towards aiding debuggers locate
+relocatable objects associated with the dynamic objects being debugged.
+As relocatable objects aren't made available as part of a software release
+this information has no use.
+.Pp
+Not inheriting the correct
+.Dv $(LDFLAGS)
+from
+.Pa cmd/Makefile.cmd
+.Pq which asserts Fl s
+or
+.Dv $(POST_PROCESS_SO)
+.Pq which asserts Ic strip -x
+are typical reasons for not removing debugging information.
+Note, removal of debugging information is only enabled
+for release builds.
+The existence of debugging information is displayed as:
+.Bd -literal
 foo: debugging sections should be deleted  \\
-.br
     <no strip -x?>
-.RE
-.TP
-\(bu
-All objects should retain their full \fI.symtab\fP symbol table.
+.Ed
+.It
+All objects should retain their full
+.Em .symtab
+symbol table.
 Although this consumes disk space, it provides for more extensive stack
 tracing when debugging user applications.
-.sp
-Hard coding a \fI-s\fP flag with \fB$(LDFLAGS)\fP or
-\fB$(DYNFLAGS)\fP is the typical
-reason for symbol tables being removed.
+.Pp
+Hard coding a
+.Fl s
+flag with
+.Dv $(LDFLAGS) or
+.Dv $(DYNFLAGS)
+is the typical reason for symbol tables being removed.
 Objects that do not contain a symbol table are displayed as:
-.sp
-.RS 6
+.Bd -literal
 foo.so.1: symbol table should not be stripped  \\
-.br
     <remove -s?>
-.RE
-.TP
-\(bu
+.Ed
+.It
 Applications should have a non-executable stack defined to make
 them less vulnerable to buffer overflow attacks.
-.sp
-Not inheriting the \fB$(LDFLAGS)\fP macro in \fIcmd/Makefile.cmd\fP
+.Pp
+Not inheriting the
+.Dv $(LDFLAGS)
+macro in
+.Pa cmd/Makefile.cmd
 is the typical reason for not having a non-executable stack definition.
 Applications without this definition are displayed as:
-.sp
-.RS 6
+.Bd -literal
 foo: application requires non-executable stack \\
-.br
-.nf
 	<no -Mmapfile_noexstk?>
-.fi
-.RE
-.sp
-.TP
-\(bu
+.Ed
+.It
 x86 applications should have a non-executable data segment defined to make
 them less vulnerable to buffer overflow attacks.
-.sp
-Not inheriting the \fB$(LDFLAGS)\fP macro in \fIcmd/Makefile.cmd\fP
+.Pp
+Not inheriting the
+.Dv $(LDFLAGS)
+macro in
+.Pa cmd/Makefile.cmd
 is the typical reason for not having a non-executable data definition.
 Applications without this definition are displayed as:
-.sp
-.RS 6
+.Bd -literal
 foo: application requires non-executable data \\
-.br
-.nf
 	<no -Mmapfile_noexdata?>
-.fi
-.RE
-.sp
-.TP
-\(bu
+.Ed
+.It
 Solaris ELF files contain symbol sort sections used by DTrace to
-map addresses in memory to the related function or variable symbols. There
-are two such sections, \fI.SUNW_dynsymsort\fP for
-regular symbols, and \fI.SUNW_dyntlssort\fP for thread-local
-symbols. To ensure that the best names are shown for each
-such address, and that the same name is given across Solaris releases,
-.I check_rtime
+map addresses in memory to the related function or variable symbols.
+There are two such sections,
+.Em .SUNW_dynsymsort
+for regular symbols, and
+.Em .SUNW_dyntlssort
+for thread-local symbols.
+To ensure that the best names are shown for each such address, and that the
+same name is given across Solaris releases,
+.Nm check_rtime
 enforces the rule that only one symbol can appear in the sort sections for
 any given address.
 There are two common ways in which multiple symbols
-or a given address occur in the ON distribution. The first is from
-code written in assembly language. The second is as a
-result of using \fB#pragma weak\fP in C to create weak symbols. The
-best solution to this
-situation is to modify the code to avoid symbol aliasing. Alternatively,
-the \fBNODYNSORT\fP mapfile attribute can be used to eliminate the unwanted
-symbol.
-.sp
+or a given address occur in the ON distribution.
+The first is from code written in assembly language.
+The second is as a result of using
+.Ic #pragma weak
+in C to create weak symbols.
+The best solution to this situation is to modify the code to avoid symbol
+aliasing.
+Alternatively, the
+.Va NODYNSORT
+mapfile attribute can be used to eliminate the unwanted symbol.
+.Pp
 Duplicate entries in a symbol sort section are
 displayed in one of the following ways, depending on
 whether the section is for regular or thread-local symbols:
-.sp
-.RS 6
+.Bd -literal
 foo: .SUNW_dynsymsort: duplicate ADDRESS: sym1, sym2
-.br
 foo: .SUNW_dyntlssort: duplicate OFFSET: sym1, sym2
-.RE
-.sp
-.TP
-\(bu
-\fBOSNet\fP dynamic ELF objects are expected to employ direct bindings whenever
-feasible.  This runtime binding technique helps to avoid accidental
-interposition problems, and provides a more optimal
-runtime symbol search model.
-.sp
-Not inheriting the correct \fB$(LDFLAGS)\fP from \fIcmd/Makefile.cmd\fP,
-or the correct \fB$(DYNFLAGS)\fP from \fIlib/Makefile.lib\fP, are the
-typical reasons for not enabling direct bindings. Dynamic objects that
-do not contain direct binding information are displayed as:
-.sp
-.RS 6
+.Ed
+.It
+illumos dynamic ELF objects are expected to employ direct bindings whenever
+feasible.
+This runtime binding technique helps to avoid accidental interposition
+problems, and provides a more optimal runtime symbol search model.
+.Pp
+Not inheriting the correct
+.Dv $(LDFLAGS) from
+.Pa cmd/Makefile.cmd ,
+or the correct
+.Dv $(DYNFLAGS)
+from
+.Pa lib/Makefile.lib ,
+are the typical reasons for not enabling direct bindings.
+Dynamic objects that do not contain direct binding information are displayed
+as:
+.Bd -literal
 foo: object has no direct bindings \\
-.br
-.nf
 	<no -B direct or -z direct?>
-.fi
-.RE
-
-.sp
-.LP
-.I check_rtime also
-uses \fBelfdump(1)\fP
-to display useful dynamic entry information under the \fB-i\fP option.
+.Ed
+.El
+.Pp
+.Nm check_rtime
+also
+uses
+.Xr elfdump 1
+to display useful dynamic entry information under the
+.Fl -i
+option.
 This doesn't necessarily indicate an error condition, but
 provides information that is often useful for gatekeepers to track
-changes in a release.  Presently the information listed is:
-.TP
-\(bu
-Runpaths are printed for any dynamic object.  This is a historic
-sanity check to insure compiler supplied runpaths (typically from \fBCC\fP)
-are not recorded in any objects.  Runpaths are displayed as:
-.sp
-.RS 6
-foo: RPATH=/usr/bar/lib
-.RE
-.TP
-\(bu
+changes in a release.
+Presently the information listed is:
+.Bl -bullet
+.It
+Runpaths are printed for any dynamic object.
+This is a historic sanity check to insure compiler supplied runpaths
+(typically from
+.Nm CC )
+are not recorded in any objects.
+Runpaths are displayed as:
+.Pp
+.Dl foo: RPATH=/usr/bar/lib
+.It
 Needed dependencies are printed for any dynamic object.
 In the freeware world this often helps the introducer of a new
 shared object discover that an existing binary has become its
 consumer, and thus that binaries package dependencies may require updating.
 Dependencies are printed as:
-.sp
-.RS 6
-foo: NEEDED=bar.so.1
-.RE
-.sp
-.LP
-.I check_rtime
-uses \fBmcs(1)\fP to inspect an object's \fI.comment\fP section.
+.Pp
+.Dl foo: NEEDED=bar.so.1
+.It
+Dependencies may be marked as forbidden
+.Pq see Sx EXCEPTION FILE FORMAT 
+this allows the build to warn should people use them accidentally.
+Forbidden dependencies are printed as:
+.Pp
+.Dl foo: NEEDED=bar.so.1	<forbidden dependency, missing -nodefaultlibs?>
+.El
+.Pp
+.Nm check_rtime
+uses
+.Xr mcs 1
+to inspect an object's
+.Em .comment
+section.
 During development, this section contains numerous file identifiers
-marked with the tag "\fB@(#)\fP".  For release builds these sections
-are deleted and rewritten under control of the \fB$(POST_PROCESS)\fP
-macro to produce a common release identifier.  This identifier
-typically consists of three lines including a single comment starting
-with the string "\fB@(#) SunOS\fP".  If this common identifier isn't
-found the following diagnostic is generated:
-.sp
-.RS 6
-foo: non-conforming mcs(1) comment  <no $(POST_PROCESS)?>
-.RE
-.sp
-.LP
-.I check_rtime
-uses \fBpvs(1)\fP to display version definitions under the \fB-v\fP option.
+marked with the tag
+.Qq @(#) .
+For release builds these sections are deleted and rewritten under control of
+the
+.Dv $(POST_PROCESS)
+macro to produce a common release identifier.
+This identifier typically consists of three lines including a single comment
+starting with the string
+.Qq @(#) SunOS .
+If this common identifier isn't found the following diagnostic is generated:
+.Pp
+.Dl foo: non-conforming mcs(1) comment  <no $(POST_PROCESS)?>
+.Pp
+.Nm check_rtime
+uses
+.Xr pvs 1
+to display version definitions under the
+.Fl v
+option.
 Each symbol defined by the object is shown along with the version it belongs to.
 Changes to the symbols defined by an object, or the versions they belong to,
 do not necessarily indicate an error condition, but
 provides information that is often useful for gatekeepers to track
 changes in a release.
-.sp
-.SH OPTIONS
-.LP
+.Sh OPTIONS
 The following options are supported:
-.TP 4
-.B \-D depfile
-Use \fIdepfile\fP to generate an alternative dependency mapping.
-\fIdepfile\fP must be created by '\fBfind_elf -r\fP'.
-The \fB-D\fP and \fB-d\fP options are mutually exclusive.
-.TP
-.B \-d depdir
-Use \fIdepdir\fP to generate an alternative dependency mapping.
-\fBfind_elf(1ONBLD)\fP is used to locate the ELF sharable objects for
-which alternative mappings are required. The \fB-D\fP and \fB-d\fP options
-are mutually exclusive.
-.TP 4
-.B \-E errfile
-Direct error messages for the analyzed objects to \fIerrfile\fP instead
-of stdout.
-.TP 4
-.B \-e exfile
+.Bl -tag -width indent
+.It Fl D Ar depfile
+Use
+.Ar depfile
+to generate an alternative dependency mapping.
+.Ar depfile
+must be created by
+.Ic find_elf -r .
+The
+.Fl D
+and
+.Fl d
+options are mutually exclusive.
+.It Fl d Ar depfile
+Use
+.Ar depdir
+to generate an alternative dependency mapping.
+.Xr find_elf 1ONBLD
+is used to locate the ELF sharable objects for which alternative mappings are
+required.
+The
+.Fl D
+and
+.Fl d
+options are mutually exclusive.
+.It Fl E Ar errfile
+Direct error messages for the analyzed objects to
+.Ar errfile
+instead of stdout.
+.It Fl e Ar exfile
 An exception file is used to exclude objects from
-the usual rules. See EXCEPTION FILE FORMAT.
-.TP
-.B \-f listfile
+the usual rules.
+See
+.Sx EXCEPTION FILE FORMAT .
+.It Fl f Ar listfile
 Normally,
-.I interface_check
+.Ic interface_check
 runs
-.I find_elf
-to locate the ELF objects to analyze. The \fB-f\fP option can be
-used to instead provide a file containing the list of objects to
-analyze, in the format produced by '\fBfind_elf -r\fP'.
-.TP
-.B -I infofile
-Direct informational messages (\fB-i\fP, and \fB-v\fP options) for the
-analyzed objects to \fIinfofile\fP instead of stdout.
-.TP
-.B \-i
-Provide dynamic entry information.  Presently only dependencies and
-runpaths are printed.
-.TP
-.B \-m
-Enable \fBmcs(1)\fP checking.
-.TP
-.B \-o
+.Ic find_elf
+to locate the ELF objects to analyze.
+The
+.Fl f
+option can be used to instead provide a file containing the list of objects to
+analyze, in the format produced by
+.Ic find_elf -r .
+.It Fl I Ar infofile
+Direct informational messages (
+.Fl i ,
+and
+.Fl v
+options) for the analyzed objects to
+.Ar infofile
+instead of stdout.
+.It Fl i
+Provide dynamic entry information.
+Presently only dependencies and runpaths are printed.
+.It Fl m
+Enable
+.Xr mcs 1
+checking.
+.It Fl o
 Produce a one-line output for each condition discovered, prefixed
-by the objects name.  This output style is more terse, but is
-more appropriate for sorting and diffing with previous build results.
-.TP
-.B \-s
-Determine whether \fI.stabs\fP sections exist.
-.TP
-.B \-v
-Provide version definition information. Each symbol defined by the object
-is printed along with the version it is assigned to.
-.TP
-.B -w outdir
-Interpret the paths of all input and output files relative to \fIoutdir\fP.
-.SH EXCEPTION FILE FORMAT
+by the objects name.
+This output style is more terse, but is more appropriate for sorting and
+diffing with previous build results.
+.It Fl s
+Determine whether
+.Em .stabs
+sections exist.
+.It Fl v
+Provide version definition information.
+Each symbol defined by the object is printed along with the version it is
+assigned to.
+.It Fl w Ar outdir
+Interpret the paths of all input and output files relative to
+.Ar outdir .
+.El
+.Sh EXCEPTION FILE FORMAT
 Exceptions to the rules enforced by
-.I check_rtime
-are specified using an exception file. The \fB-e\fP option is used to
-specify an explicit exception file. Otherwise, if used in an activated
-workspace, the default exception file is
-$CODEMGR_WS/exception_list/check_rtime
-if that file exists. If not used in an activated workspace, or if
-$CODEMGR_WS/exception_list/check_rtime does not exist,
-.I check_rtime
+.Nm check_rtime
+are specified using an exception file.
+The
+.Fl -e
+option is used to specify an explicit exception file.
+Otherwise, if used in an activated workspace, the default exception file is
+.Pa $CODEMGR_WS/exception_list/check_rtime
+if that file exists.
+If not used in an activated workspace, or if
+.Pa $CODEMGR_WS/exception_list/check_rtime
+does not exist,
+.Nm check_rtime
 will use
-.I /opt/onbld/etc/exception_list/check_rtime
+.Pa /opt/onbld/etc/exception_list/check_rtime
 as a fallback default exception file.
-.P
+.Pp
 To run
-.I check_rtime
-without applying exceptions, specify \fB-e\fP with a value of /dev/null.
-.P
-A '#' character at the beginning of a line, or at any point in
-a line when preceded by whitespace, introduces a comment. Empty lines,
-and lines containing only comments, are ignored by
-.I check_rtime.
-Exceptions are specified as space separated keyword, and \fBperl(1)\fP
+.Nm check_rtime
+without applying exceptions, specify
+.Fl e
+with a value of
+.Pa /dev/null .
+.Pp
+A
+.Ql #
+character at the beginning of a line, or at any point in
+a line when preceded by whitespace, introduces a comment.
+Empty lines, and lines containing only comments, are ignored by
+.Nm check_rtime .
+Exceptions are specified as space separated keyword, and
+.Xr perl 1
 regular expression:
-.sp
-.in +4
-.nf
-keyword  perl-regex
-.fi
-.in -4
-.sp
+.Pp
+.Dl keyword  perl-regex
+.Pp
 Since whitespace is used as a separator, the regular
-expression cannot itself contain whitespace. Use of the \\s character
-class to represent whitespace within the regular expression is recommended.
+expression cannot itself contain whitespace.
+Use of the
+.Ql \\s
+character class to represent whitespace within the regular expression is
+recommended.
+.Pp
 Before the perl regular expression is used, constructs of the form
-MACH(dir) are expanded into a regular expression that matches the directory
-given, as well as any 64-bit architecture subdirectory that
-might be present (i.e. amd64, sparcv9). For instance, MACH(lib) will
-match any of the following:
-.sp
-.in +4
-.nf
-lib
-lib/amd64
-lib/sparcv9
-.fi
-.in -4
-.sp
+.Em MACH(dir)
+are expanded into a regular expression that matches the directory given, as
+well as any 64-bit architecture subdirectory that might be present
+(i.e. amd64, sparcv9). For instance,
+.Em MACH(lib)
+will match any of the following:
+.Bl -tag -width indent
+.It Pa lib
+.It Pa lib/amd64
+.It Pa lib/sparcv9
+.El
+.Pp
 The exceptions understood by
-.I check_rtime
+.Nm check_rtime
 are:
-.sp
-.ne 2
-.na
-\fBEXEC_DATA\fR
-.ad
-.RS 17n
-.sp
+.Bl -tag -width indent
+.It EXEC_DATA
 Executables that are not required to have non-executable writable
 data segments
-.RE
-
-.sp
-.ne 2
-.na
-\fBEXEC_STACK\fR
-.ad
-.RS 17n
-.sp
+.It EXEC_STACK
 Executables that are not required to have a non-executable stack
-.RE
-
-.sp
-.ne 2
-.na
-\fBNOCRLEALT\fR
-.ad
-.RS 17n
-.sp
+.It NOCRLEALT
 Objects that should be skipped when building the alternative dependency
-mapping via the \fB-d\fP option.
-.RE
-
-.sp
-.ne 2
-.na
-\fBNODIRECT\fR
-.ad
-.RS 17n
-.sp
+mapping via the
+.Fl d
+option.
+.It NODIRECT
 Directories and files that are allowed to have no direct bound symbols.
-.RE
-
-.sp
-.ne 2
-.na
-\fBNOSYMSORT\fR
-.ad
-.RS 17n
-.sp
+.It NOSYMSORT
 Files for which we skip checking of duplicate addresses in the
 symbol sort sections.
-.RE
-
-.sp
-.ne 2
-.na
-\fBOLDDEP\fR
-.ad
-.RS 17n
-.sp
+.It OLDDEP
 Objects that used to contain system functionality that has since
-migrated to libc. We preserve these libraries as pure filters for
-backward compatibility but nothing needs to link to them.
-.RE
-
-.sp
-.ne 2
-.na
-\fBSKIP\fR
-.ad
-.RS 17n
-.sp
-Directories and/or individual objects to skip. Note that SKIP should be
-a last resort, used only when one of the other exceptions will not suffice.
-.RE
-
-.sp
-.ne 2
-.na
-\fBSTAB\fR
-.ad
-.RS 17n
-.sp
+migrated to libc.
+We preserve these libraries as pure filters for backward compatibility but
+nothing needs to link to them.
+.It SKIP
+Directories and/or individual objects to skip.
+Note that SKIP should be a last resort, used only when one of the other
+exceptions will not suffice.
+.It STAB
 Objects that are allowed to contain debugging information (stabs).
-.RE
-
-.sp
-.ne 2
-.na
-\fBTEXTREL\fR
-.ad
-.RS 17n
-.sp
+.It TEXTREL
 Objects for which we allow relocations to the text segment.
-.RE
-
-.sp
-.ne 2
-.na
-\fBUNDEF_OBJ\fR
-.ad
-.RS 17n
-.sp
+.It BUNDEF_OBJ
 Objects that are allowed to be unreferenced.
-.RE
-
-.sp
-.ne 2
-.na
-\fBUNDEF_REF\fR
-.ad
-.RS 17n
-.sp
+.It UNDEF_REF
 Objects that are allowed undefined references.
-.RE
-
-.sp
-.ne 2
-.na
-\fBUNUSED_DEPS\fR
-.ad
-.RS 17n
-.sp
+.It UNUSED_DEPS
 Objects that are allowed to have unused dependencies.
-.RE
-
-.sp
-.ne 2
-.na
-\fBUNUSED_OBJ\fR
-.ad
-.RS 17n
-.sp
+.It BUNUSED_OBJ
 Objects that are always allowed to be unused dependencies.
-.RE
-
-.sp
-.ne 2
-.na
-\fBUNUSED_RPATH\fR
-.ad
-.RS 17n
-.sp
+.It UNUSED_RPATH
 Objects that are allowed to have unused runpath directories.
-.RE
-
-.SH ALTERNATIVE DEPENDENCY MAPPING
-.I check_rtime
-was primarily designed to process a nightly builds \fB$ROOT\fP
-hierarchy. It is often the case that objects within this hierarchy
-must bind to dependencies within the same hierarchy to satisfy
-their requirements.
-.LP
+.It FORBIDDEN
+Specifies that dependencies on a given object are forbidden.
+.It FORBIDDEN_DEP
+Specifies that a given object is permitted a forbidden dependency.
+.El
+.Sh ALTERNATIVE DEPENDENCY MAPPING
+.Nm check_rtime
+was primarily designed to process a nightly builds
+.Ev $ROOT
+hierarchy.
+It is often the case that objects within this hierarchy must bind to
+dependencies within the same hierarchy to satisfy their requirements.
+.Pp
 To achieve this,
-.I check_rtime
-uses the shared objects specified with the \fB-D\fP or \fB-d\fP options.
-If neither option is specified, and the \fB$CODEMGR_WS\fP and \fB$ROOT\fP
-environment variables are defined, the proto area for the workspace
-is used. The objects found are used
-to create runtime configuration files via \fBcrle(1)\fP, that establish
-the new shared objects as alternatives to their underlying system location.
-.I check_rtime
-passes these configuration files as \fBLD_CONFIG\fP environment
-variable settings to \fBldd(1)\fP using its \fB-e\fP option.
-.LP
+.Nm check_rtime
+uses the shared objects specified with the
+.Fl D
+or
+.Fl d
+options.
+If neither option is specified, and the
+.Ev $CODEMGR_WS
+and
+.Ev $ROOT
+environment variables are defined, the proto area for the workspace is
+used.
+The objects found are used to create runtime configuration files via
+.Xr crle 1 ,
+that establish the new shared objects as alternatives to their underlying
+system location.
+.Nm check_rtime
+passes these configuration files as
+.Ev LD_CONFIG
+environment variable settings to
+.Xr ldd 1
+using its
+.Fl -e
+option.
+.Pp
 The effect of these configuration files is that the execution of an
-object under \fBldd(1)\fP will bind to the dependencies defined as
-alternatives.  Simply put, an object inspected in the \fIproto\fP
-area will bind to its dependencies found in the \fIproto\fP area.
-Dependencies that have no alternative mapping will continue to
-bind to the underlying system.
-.SH ENVIRONMENT VARIABLES
-.LP
-When the \fB-D\fP or \fB-d\fP option isn't in use,
-.I check_rtime
+object under
+.Xr ldd 1
+will bind to the dependencies defined as alternatives.
+Simply put, an object inspected in the
+.Pa proto
+area will bind to its dependencies found in the
+.Pa proto
+area.
+Dependencies that have no alternative mapping will continue to bind to the
+underlying system.
+.Sh ENVIRONMENT VARIABLES
+When the
+.Fl D
+or
+.Fl d
+option isn't in use,
+.Nm check_rtime
 uses the following environment variables to
 establish an alternative dependency mapping:
-.LP
-.B CODEMGR_WS
-.RS 4
+.Bl -tag -width indent
+.It Ev CODEMGR_WS
 The root of your workspace, which is the directory
-containing \fICodemgr_wsdata\fP. Existence of this environment variable
-indicates that \fB$ROOT\fP should be investigated.
-.RE
-.LP
-.B ROOT
-.RS 4
-Root of the \fIproto\fP area of your workspace. Any shared objects
-under this directory will be used to establish an alternative dependency
-mapping.
-.RE
-.sp
-If \fBldd(1)\fP supports the \fB-U\fP option, it will be used to determine
-any unreferenced dependencies.  Otherwise \fBldd(1)\fP uses the older
-\fB-u\fP option which only detects unused references.  If the following
-environment variable exists, and indicates an earlier release than \fB5.10\fP
-then \fBldd(1)\fP also falls back to using the \fB-u\fP option.
-.LP
-.B RELEASE
-.RS 4
+containing
+.Pa .git .
+Existence of this environment variable indicates that
+.Ev $ROOT
+should be investigated.
+.It Ev ROOT
+Root of the
+.Pa proto
+area of your workspace.
+Any shared objects under this directory will be used to establish an
+alternative dependency mapping.
+.El
+If
+.Xr ldd 1
+supports the
+.Fl U
+option, it will be used to determine any unreferenced dependencies.
+Otherwise
+.Xr ldd 1
+uses the older
+.Fl u
+option which only detects unused references.
+If the following environment variable exists, and indicates an earlier release
+than \fB5.10\fP then
+.Xr ldd 1
+also falls back to using the
+.Fl u
+option.
+.Bl -tag -width indent
+.It Ev RELEASE
 The release version number of the environment being built.
-.RE
-.SH ERROR CONDITIONS
-.LP
-Inspection of an object with \fBldd(1)\fP assumes it is compatible
-with the machine on which
-.I check_rtime
-is being run.  Incompatible objects such as a 64-bit object encountered on
-a 32-bit system, or an i386 object encountered on a sparc system,
-can not be fully inspected.  These objects are displayed as:
-.sp
-.RS 4
-foo: has wrong class or data encoding
-.RE
-.SH FILES
-.LP
-.RS 5
-$CODEMGR_WS/exception_list/check_rtime
-/opt/onbld/etc/exception_list/check_rtime
-.SH SEE ALSO
-.B crle(1),
-.B elfdump(1),
-.B find_elf(1ONBLD),
-.B ldd(1),
-.B ld.so.1(1),
-.B mcs(1).
+.El
+.Sh ERROR CONDITIONS
+Inspection of an object with
+.Xr ldd 1
+assumes it is compatible with the machine on which
+.Nm check_rtime
+is being run.
+Incompatible objects such as a 64-bit object encountered on a 32-bit system,
+or an i386 object encountered on a sparc system, can not be fully inspected.
+These objects are displayed as:
+.Pp
+.Dl foo: has wrong class or data encoding
+.Sh FILES
+.Bl -tag -width indent
+.It Pa $CODEMGR_WS/exception_list/check_rtime
+.It Pa /opt/onbld/etc/exception_list/check_rtime
+.El
+.Sh SEE ALSO
+.Xr crle 1 ,
+.Xr elfdump 1 ,
+.Xr ld.so.1 1 ,
+.Xr ldd 1 ,
+.Xr mcs 1 ,
+.Xr find_elf 1ONBLD
diff --git a/usr/src/tools/scripts/check_rtime.pl b/usr/src/tools/scripts/check_rtime.pl
index 10691e75af..f456ea4cbc 100644
--- a/usr/src/tools/scripts/check_rtime.pl
+++ b/usr/src/tools/scripts/check_rtime.pl
@@ -96,6 +96,12 @@ use vars  qw($ErrFH $ErrTtl $InfoFH $InfoTtl $OutCnt1 $OutCnt2);
 #   EXEC_STACK
 #	Objects that are not required to have a non-executable stack
 #
+#   FORBIDDEN_DEP
+#	Objects allowed to link to 'forbidden' objects
+#
+#   FORBIDDEN
+#	Objects to which nobody not excepted with FORBIDDEN_DEP may link
+#
 #   NOCRLEALT
 #	Objects that should be skipped by AltObjectConfig() when building
 #	the crle script that maps objects to the proto area.
@@ -138,7 +144,7 @@ use vars  qw($ErrFH $ErrTtl $InfoFH $InfoTtl $OutCnt1 $OutCnt2);
 #
 
 use vars  qw($EXRE_exec_data $EXRE_exec_stack $EXRE_nocrlealt);
-use vars  qw($EXRE_nodirect $EXRE_nosymsort);
+use vars  qw($EXRE_nodirect $EXRE_nosymsort $EXRE_forbidden_dep $EXRE_forbidden);
 use vars  qw($EXRE_olddep $EXRE_skip $EXRE_stab $EXRE_textrel $EXRE_undef_ref);
 use vars  qw($EXRE_unref_obj $EXRE_unused_deps $EXRE_unused_obj);
 use vars  qw($EXRE_unused_rpath);
@@ -443,6 +449,7 @@ sub ProcFile {
 			onbld_elfmod::OutMsg($ErrFH, $ErrTtl, $RelPath, $Line);
 			next;
 		}
+                
 		# Look for unreferenced dependencies.  Note, if any unreferenced
 		# objects are ignored, then set $UnDep so as to suppress any
 		# associated unused-object messages.
@@ -577,13 +584,21 @@ ELF:	foreach my $Line (@Elf) {
 			if (defined($EXRE_olddep) && ($Need =~ $EXRE_olddep)) {
 				# Catch any old (unnecessary) dependencies.
 				onbld_elfmod::OutMsg($ErrFH, $ErrTtl, $RelPath,
-			"NEEDED=$Need\t<dependency no longer necessary>");
+				    "NEEDED=$Need\t<dependency no " .
+				    "longer necessary>");
+			} elsif ((defined($EXRE_forbidden) && 
+                                  ($Need =~ $EXRE_forbidden)) &&
+                                 (!defined($EXRE_forbidden_dep) || 
+                                  ($FullPath !~ $EXRE_forbidden_dep))) {
+				onbld_elfmod::OutMsg($ErrFH, $ErrTtl, $RelPath, 
+				    "NEEDED=$Need\t<forbidden dependency, " .
+				    "missing -nodefaultlibs?>");
 			} elsif ($opt{i}) {
 				# Under the -i (information) option print out
 				# any useful dynamic entries.
 				onbld_elfmod::OutMsg($InfoFH, $InfoTtl, $RelPath,
 				    "NEEDED=$Need");
-			}
+                	}
 			next;
 		}
 
diff --git a/usr/src/uts/i86pc/os/intr.c b/usr/src/uts/i86pc/os/intr.c
index 36ec2e4945..f66f0e69e8 100644
--- a/usr/src/uts/i86pc/os/intr.c
+++ b/usr/src/uts/i86pc/os/intr.c
@@ -473,17 +473,17 @@
 
 #if defined(__amd64) && !defined(__xpv)
 /* If this fails, then the padding numbers in machcpuvar.h are wrong. */
-CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_pad))
-    < MMU_PAGESIZE);
-CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_kpti))
-    >= MMU_PAGESIZE);
-CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_kpti_dbg))
-    < 2 * MMU_PAGESIZE);
-CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_pad2))
-    < 2 * MMU_PAGESIZE);
+CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_pad)) <
+    MMU_PAGESIZE);
+CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_kpti)) >=
+    MMU_PAGESIZE);
+CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_kpti_dbg)) <
+    2 * MMU_PAGESIZE);
+CTASSERT((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_pad2)) <
+    2 * MMU_PAGESIZE);
 CTASSERT(((sizeof (struct kpti_frame)) & 0xF) == 0);
-CTASSERT(((offsetof(cpu_t, cpu_m) + offsetof(struct machcpu, mcpu_kpti_dbg))
-    & 0xF) == 0);
+CTASSERT(((offsetof(cpu_t, cpu_m) +
+    offsetof(struct machcpu, mcpu_kpti_dbg)) & 0xF) == 0);
 CTASSERT((offsetof(struct kpti_frame, kf_tr_rsp) & 0xF) == 0);
 #endif
 
diff --git a/usr/src/uts/intel/Makefile.rules b/usr/src/uts/intel/Makefile.rules
index bb63d03166..7824f6c03d 100644
--- a/usr/src/uts/intel/Makefile.rules
+++ b/usr/src/uts/intel/Makefile.rules
@@ -21,7 +21,7 @@
 #
 # Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
-# Copyright (c) 2018, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.  All rights reserved.
 # Copyright 2017 Nexenta Systems, Inc.
 #
 
diff --git a/usr/src/uts/sun4u/makaha/Makefile b/usr/src/uts/sun4u/makaha/Makefile
index c27f8e89fe..39130fb82b 100644
--- a/usr/src/uts/sun4u/makaha/Makefile
+++ b/usr/src/uts/sun4u/makaha/Makefile
@@ -65,7 +65,8 @@ install:        $(ROOT_MAKAHA_DIR) $(USR_MAKAHA_DIR) \
 				$(USR_MAKAHA_INC_DIR) \
 				$(USR_MAKAHA_SBIN_DIR) \
 				$(USR_MAKAHA_LIB_DIR) \
-				$(ROOT_SPUTNIK_DIR) $(USR_SPUTNIK_DIR) \
+				$(ROOT_SPUTNIK_DIR) \
+				$(USR_SPUTNIK_DIR) \
 				$(USR_SPUTNIK_INC_DIR) \
 				$(USR_SPUTNIK_SBIN_DIR) \
 				$(USR_SPUTNIK_LIB_DIR) \
@@ -74,36 +75,36 @@ install:        $(ROOT_MAKAHA_DIR) $(USR_MAKAHA_DIR) \
 				acebus.conf se.conf scsb.conf \
 				ttymux_dacf ttymux.conf
 
-acebus.conf:	$(ROOT_MAKAHA_DRV_DIR)
-		-@$(RM) $(ROOT_MAKAHA_DRV_DIR)/$@
+acebus.conf:	$(ROOT_MAKAHA_DRV_DIR_32)
+		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_32)/$@
 		$(CP) $(UTSBASE)/sun4u/makaha/io/$@ \
-		$(ROOT_MAKAHA_DRV_DIR)/$@
-		$(CHMOD) $(CFILEMODE) $(ROOT_MAKAHA_DRV_DIR)/$@
+		$(ROOT_MAKAHA_DRV_DIR_32)/$@
+		$(CHMOD) $(CFILEMODE) $(ROOT_MAKAHA_DRV_DIR_32)/$@
 
 pcf8574:	$(ROOT_MAKAHA_DRV_DIR_64)
 		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_64)/$@
 		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_64)/$@ \
 		$(ROOT_MAKAHA_DRV_DIR_64)/$@
 
-acebus:	$(ROOT_MAKAHA_DRV_DIR_64)
+acebus:		$(ROOT_MAKAHA_DRV_DIR_64)
 		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_64)/$@
 		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_64)/$@ \
 		$(ROOT_MAKAHA_DRV_DIR_64)/$@
 
-scsb:	$(ROOT_MAKAHA_DRV_DIR_64)
+scsb:		$(ROOT_MAKAHA_DRV_DIR_64)
 		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_64)/$@
 		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_64)/$@ \
 		$(ROOT_MAKAHA_DRV_DIR_64)/$@
 
-scsb.conf:	$(ROOT_MAKAHA_DRV_DIR)
-		-@$(RM) $(ROOT_MAKAHA_DRV_DIR)/$@
-		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK)/$@ \
-		$(ROOT_MAKAHA_DRV_DIR)/$@
+scsb.conf:	$(ROOT_MAKAHA_DRV_DIR_32)
+		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_32)/$@
+		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_32)/$@ \
+		$(ROOT_MAKAHA_DRV_DIR_32)/$@
 
-se.conf:	$(ROOT_MAKAHA_DRV_DIR)
-		-@$(RM) $(ROOT_MAKAHA_DRV_DIR)/$@
-		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK)/$@ \
-		$(ROOT_MAKAHA_DRV_DIR)/$@
+se.conf:	$(ROOT_MAKAHA_DRV_DIR_32)
+		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_32)/$@
+		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_32)/$@ \
+		$(ROOT_MAKAHA_DRV_DIR_32)/$@
 
 ttymux_dacf:	$(ROOT_MAKAHA_DACF_DIR_64) \
 		$(ROOT_SPUTNIK_DACF_DIR_64)
@@ -115,14 +116,13 @@ ttymux_dacf:	$(ROOT_MAKAHA_DACF_DIR_64) \
 		$(ROOT_SPUTNIK_DACF_DIR_64)/$@
 
 
-ttymux.conf:	$(ROOT_MAKAHA_DRV_DIR) \
-		$(ROOT_SPUTNIK_DRV_DIR)
-		-@$(RM) $(ROOT_MAKAHA_DRV_DIR)/$@
-		-@$(RM) $(ROOT_SPUTNIK_DRV_DIR)/$@
-		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK)/$@ \
-		$(ROOT_MAKAHA_DRV_DIR)/$@
-		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK)/$@ \
-		$(ROOT_SPUTNIK_DRV_DIR)/$@
+ttymux.conf:	$(ROOT_MAKAHA_DRV_DIR_32) $(ROOT_SPUTNIK_DRV_DIR_32)
+		-@$(RM) $(ROOT_MAKAHA_DRV_DIR_32)/$@
+		-@$(RM) $(ROOT_SPUTNIK_DRV_DIR_32)/$@
+		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_32)/$@ \
+		$(ROOT_MAKAHA_DRV_DIR_32)/$@
+		$(SYMLINK) $(ROOT_MAKAHA_DRV_LINK_32)/$@ \
+		$(ROOT_SPUTNIK_DRV_DIR_32)/$@
 
 install_h check:
 
diff --git a/usr/src/uts/sun4u/montecarlo/Makefile b/usr/src/uts/sun4u/montecarlo/Makefile
index ee28e01cbc..6c0dd673c7 100644
--- a/usr/src/uts/sun4u/montecarlo/Makefile
+++ b/usr/src/uts/sun4u/montecarlo/Makefile
@@ -59,24 +59,25 @@ def all clean.lint clean clobber modlist: $(MONTECARLO_KMODS)
 
 modlintlib:	$(MONTECARLO_KMODS)
 
-install:        $(ROOT_MONTECARLO_DIR) $(USR_MONTECARLO_DIR) \
+install:        $(ROOT_MONTECARLO_DIR) \
+		$(USR_MONTECARLO_DIR) \
                 $(USR_MONTECARLO_INC_DIR) \
                 $(USR_MONTECARLO_SBIN_DIR) \
                 $(USR_MONTECARLO_LIB_DIR) \
                 .WAIT $(MONTECARLO_KMODS) \
 		se.conf ttymux.conf
 
-se.conf:	$(ROOT_MONTECARLO_DRV_DIR)
-		-@$(RM) $(ROOT_MONTECARLO_DRV_DIR)/$@
+se.conf:	$(ROOT_MONTECARLO_DRV_DIR_32)
+		-@$(RM) $(ROOT_MONTECARLO_DRV_DIR_32)/$@
 		$(CP) $(UTSBASE)/sun4u/montecarlo/io/$@ \
-		$(ROOT_MONTECARLO_DRV_DIR)/$@
-		$(CHMOD) $(CFILEMODE) $(ROOT_MONTECARLO_DRV_DIR)/$@
+		$(ROOT_MONTECARLO_DRV_DIR_32)/$@
+		$(CHMOD) $(CFILEMODE) $(ROOT_MONTECARLO_DRV_DIR_32)/$@
 
-ttymux.conf:	$(ROOT_MONTECARLO_DRV_DIR)
-		-@$(RM) $(ROOT_MONTECARLO_DRV_DIR)/$@
+ttymux.conf:	$(ROOT_MONTECARLO_DRV_DIR_32)
+		-@$(RM) $(ROOT_MONTECARLO_DRV_DIR_32)/$@
 		$(CP) $(UTSBASE)/sun4u/montecarlo/io/$@ \
-		$(ROOT_MONTECARLO_DRV_DIR)/$@
-		$(CHMOD) $(CFILEMODE) $(ROOT_MONTECARLO_DRV_DIR)/$@
+		$(ROOT_MONTECARLO_DRV_DIR_32)/$@
+		$(CHMOD) $(CFILEMODE) $(ROOT_MONTECARLO_DRV_DIR_32)/$@
 
 install_h check:	FRC
 	@cd sys; pwd; $(MAKE) $(TARGET)
