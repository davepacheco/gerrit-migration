commit 629cc00abf8834bf920c5ce1b4b6b80ab3166653 (refs/changes/51/1651/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-03-14T17:04:15-07:00 (2 years, 7 months ago)
    
    joyent/node-mname#19 infinite loop possible in readName()

diff --git a/lib/dns-buffer.js b/lib/dns-buffer.js
index fbe1b94..62bfda2 100644
--- a/lib/dns-buffer.js
+++ b/lib/dns-buffer.js
@@ -92,7 +92,7 @@ DNSBuffer.prototype.readName = function () {
         var finalOff;
 
         rlen = this._buffer.readUInt8(off++);
-        while (rlen !== 0x00) {
+        while (rlen !== 0x00 && name.length < 256) {
                 var meta = rlen & NAME_META_MASK;
 
                 if (meta == NAME_STRING) {
@@ -108,7 +108,9 @@ DNSBuffer.prototype.readName = function () {
                         ptr = ptr | ((rlen & ~(0xC0)) << 8);
 
                         assert.ok(ptr < this._size,
-                            'invalid label pointer (off end of buf)');
+                            'Invalid label pointer (off end of buffer)');
+                        assert.ok(!(ptr >= this._offset && ptr <= off),
+                            'Invalid label pointer (causes a loop)');
 
                         if (finalOff === undefined)
                                 finalOff = off;
@@ -121,6 +123,10 @@ DNSBuffer.prototype.readName = function () {
                 rlen = this._buffer.readUInt8(off++);
         }
 
+        if (name.length > 255) {
+                throw (new Error('Invalid name (maximum length exceeded)'));
+        }
+
         if (finalOff === undefined)
                 finalOff = off;
         this._offset = finalOff;
diff --git a/test/protocol.test.js b/test/protocol.test.js
index 935b356..c8b8b59 100644
--- a/test/protocol.test.js
+++ b/test/protocol.test.js
@@ -61,6 +61,16 @@ test('mname#12 regression test', function (t) {
         var b = new Buffer('GET / HTTP/1.1\r\n\r\n');
         t.throws(function () {
                 var decoded = protocol.decode(b, 'message');
-        });
+        }, /label length/i);
         t.end();
 });
+
+test('mname#19 regression test (loop)', function (t) {
+        var b = new Buffer('3bb981000001000000000000' +
+                '047566647304636f616c066a6f79656e74027573c00c' +
+                '00010001', 'hex');
+        t.throws(function () {
+                var decoded = protocol.decode(b, 'message');
+        }, /label pointer/i);
+        t.end();
+})
