commit fd2f34fe617db4d564f76e07a54f9e3dc31adb07 (refs/changes/81/781/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-10-25T16:34:32-07:00 (2 years, 11 months ago)
    
    joyent/node-cueball#14 leaked event handler warning on node >=4.x

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 8cdacb9..5c22406 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -363,15 +363,17 @@ ConnectionFSM.prototype.state_idle = function (S) {
 	}
 
 	['close', 'error', 'readable', 'data'].forEach(function (evt) {
-		var newCount = self.cf_conn.listeners(evt).filter(
-		    function (h) { return (typeof (h) === 'function'); }).
-		    length;
+		var newCount = countListeners(self.cf_conn, evt);
 		var oldCount = self.cf_oldListeners[evt];
 		if (oldCount !== undefined && newCount > oldCount) {
 			var info = {};
 			info.stack = self.cf_releaseStack;
 			info.handlers = self.cf_conn.listeners(evt).map(
-			    function (f) { return (f.toString()); });
+			    function (f) {
+				if (f.name === 'g' && f.listener)
+					return (f.listener.toString());
+				return (f.toString());
+			});
 			info.event = evt;
 			self.cf_log.warn(info, 'connection claimer looks ' +
 			    'like it leaked event handlers');
@@ -462,9 +464,7 @@ ConnectionFSM.prototype.state_ping = function (S) {
 	 */
 	this.cf_oldListeners = {};
 	['close', 'error', 'readable', 'data'].forEach(function (evt) {
-		var count = self.cf_conn.listeners(evt).filter(
-		    function (h) { return (typeof (h) === 'function'); }).
-		    length;
+		var count = countListeners(self.cf_conn, evt);
 		self.cf_oldListeners[evt] = count;
 	});
 
@@ -517,6 +517,25 @@ ConnectionFSM.prototype.state_ping = function (S) {
 	});
 };
 
+function countListeners(eve, event) {
+	var ls = eve.listeners(event);
+	ls = ls.filter(function (h) {
+		if (typeof (h) !== 'function')
+			return (false);
+		/*
+		 * Ignore a 'once' called freeSocketErrorListener -- in node
+		 * v4 and later this is always present as a debugging aide, set
+		 * up by the http client framework.
+		 */
+		if (h.name === 'g' && h.listener &&
+		    h.listener.name === 'freeSocketErrorListener') {
+			return (false);
+		}
+		return (true);
+	});
+	return (ls.length);
+}
+
 ConnectionFSM.prototype.state_busy = function (S) {
 	S.validTransitions(['error', 'closed', 'idle']);
 	var self = this;
@@ -533,9 +552,7 @@ ConnectionFSM.prototype.state_busy = function (S) {
 	 */
 	this.cf_oldListeners = {};
 	['close', 'error', 'readable', 'data'].forEach(function (evt) {
-		var count = self.cf_conn.listeners(evt).filter(
-		    function (h) { return (typeof (h) === 'function'); }).
-		    length;
+		var count = countListeners(self.cf_conn, evt);
 		self.cf_oldListeners[evt] = count;
 	});
 
