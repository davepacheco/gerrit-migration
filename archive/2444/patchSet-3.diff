From 353fb2b5983ef77682c46a7616ef362d3318b16a Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Tue, 5 Sep 2017 12:19:58 -0400
Subject: [PATCH] OS-6301 want zlog-mode logic in VM.js to be reusable

---
 src/vm/node_modules/VM.js | 185 +++++++++++++++++++++-----------------
 1 file changed, 102 insertions(+), 83 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 92b4e1f5..cc08b309 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -5690,9 +5690,9 @@ function buildFilesystemZonecfg(vmobj, payload, options)
  *
  */
 function buildDockerLogZonecfg(vmobj, payload, log) {
+    var calculated;
     var log_driver;
     var new_logmode;
-    var new_tty_value;
     var old_logmode;
     var zcfg = '';
 
@@ -5710,89 +5710,11 @@ function buildDockerLogZonecfg(vmobj, payload, log) {
         old_logmode = vmobj.zlog_mode;
     }
 
-    /*
-     * tty mode is always either on it will be off
-     */
-    if (payload.hasOwnProperty('set_internal_metadata')
-        && payload.set_internal_metadata.hasOwnProperty('docker:tty')) {
-
-        // we're setting tty to a new value
-        if (payload.set_internal_metadata['docker:tty']) {
-            new_tty_value = true;
-        } else {
-            new_tty_value = false;
-        }
-    } else if (payload.hasOwnProperty('internal_metadata')
-        && payload.internal_metadata.hasOwnProperty('docker:tty')) {
-
-        // we're setting tty to a new value
-        if (payload.internal_metadata['docker:tty']) {
-            new_tty_value = true;
-        } else {
-            new_tty_value = false;
-        }
-    } else if (payload.hasOwnProperty('remove_internal_metadata')
-        && payload.remove_internal_metadata.indexOf('docker:tty') !== -1) {
-
-        // we're unsetting tty
-        new_tty_value = false;
-    } else if (vmobj && vmobj.hasOwnProperty('internal_metadata')
-        && vmobj.internal_metadata.hasOwnProperty('docker:tty')) {
-
-        // we're not changing the value but we already have one, so new === old
-        new_tty_value = vmobj.internal_metadata['docker:tty'];
-    } else {
-        // if there's no old value and no new value, there's no tty
-        new_tty_value = false;
-    }
-
-    /* Determine what logdriver we want */
-    if (payload.hasOwnProperty('set_internal_metadata')
-        && payload.set_internal_metadata
-        .hasOwnProperty('docker:logdriver')) {
-
-        // we're setting a new logdriver
-        log_driver = payload.set_internal_metadata['docker:logdriver'];
-    } else if (payload.hasOwnProperty('internal_metadata')
-        && payload.internal_metadata.hasOwnProperty('docker:logdriver')) {
-
-        // we're setting a new logdriver
-        log_driver = payload.internal_metadata['docker:logdriver'];
-    } else if (payload.hasOwnProperty('remove_internal_metadata')
-        && payload.remove_internal_metadata
-        .indexOf('docker:logdriver') !== -1) {
-
-        // we're unsetting logdriver, use the default one then
-        log_driver = 'json-file';
-    } else if (vmobj && vmobj.internal_metadata
-        && vmobj.internal_metadata.hasOwnProperty('docker:logdriver')) {
+    calculated = calculateZlogModeAndDriver(payload, vmobj);
+    new_logmode = calculated.mode;
+    log_driver = calculated.driver;
 
-        // we're not setting a new logdriver, so new will === old
-        log_driver = vmobj.internal_metadata['docker:logdriver'];
-    } else {
-        // don't have a new or old one, so use the default
-        log_driver = 'json-file';
-    }
-
-    if (new_tty_value === true) {
-        if (log_driver === 'json-file') {
-            new_logmode = 'gt-';
-        } else if (log_driver === 'none') {
-            new_logmode = '-t-';
-        } else { // syslog,gelf,etc
-            new_logmode = 'gtn';
-        }
-    } else { // new_tty_value === false
-        if (log_driver === 'json-file') {
-            new_logmode = 'g--';
-        } else if (log_driver === 'none') {
-            new_logmode = '---';
-        } else { // syslog,gelf,etc
-            new_logmode = 'g-n';
-        }
-    }
-
-    if (new_logmode && (!old_logmode || new_logmode !== old_logmode)) {
+    if (!old_logmode || new_logmode !== old_logmode) {
         zcfg = zcfg
             + 'remove -F attr name=zlog-mode;\n'
             + 'add attr; set name="zlog-mode"; set type=string;'
@@ -14812,3 +14734,100 @@ exports.console = function (uuid, options, callback)
         }
     });
 };
+
+function zlogObjToString(obj) {
+    assert.object(obj, 'zlogObjToString obj');
+    assert.optionalBool(obj.gz, 'zlogObjToString obj.gz');
+    assert.optionalBool(obj.tty, 'zlogObjToString obj.tty');
+    assert.optionalBool(obj.ngz, 'zlogObjToString obj.ngz');
+
+    return [
+        obj.gz ? 'g' : '-',
+        obj.tty ? 't' : '-',
+        obj.ngz ? 'n' : '-'
+    ].join('');
+}
+
+function zlogStringToObj(s) {
+    assert.string(s, 'zlogStringToObj s');
+    assert.equal(s.length, 3, 'zlogStringToObj s.length');
+    assert(s.match(/^[g-][t-][n-]$/, 'zlogStringToObj regex match'));
+
+    return {
+        gz: s[0] === 'g',
+        tty: s[1] === 't',
+        ngz: s[2] === 'n'
+    };
+}
+
+function calculateZlogModeAndDriver(payload, vmobj) {
+    var zlog_mode = {
+        gz: false,
+        tty: false,
+        ngz: false
+    };
+    var log_driver;
+
+    // set zlog_mode.tty
+    if (payload.hasOwnProperty('set_internal_metadata')
+        && payload.set_internal_metadata.hasOwnProperty('docker:tty')) {
+
+        // we're setting tty to a new value
+        zlog_mode.tty = !!payload.set_internal_metadata['docker:tty'];
+    } else if (payload.hasOwnProperty('internal_metadata')
+        && payload.internal_metadata.hasOwnProperty('docker:tty')) {
+
+        // we're setting tty to a new value
+        zlog_mode.tty = !!payload.internal_metadata['docker:tty'];
+    } else if (vmobj && vmobj.hasOwnProperty('internal_metadata')
+        && vmobj.internal_metadata.hasOwnProperty('docker:tty')) {
+
+        // we're not changing the value but we already have one, so new === old
+        zlog_mode.tty = vmobj.internal_metadata['docker:tty'];
+    }
+
+    // Determine what logdriver we want
+    if (payload.hasOwnProperty('set_internal_metadata')
+        && payload.set_internal_metadata.hasOwnProperty('docker:logdriver')) {
+
+        // we're setting a new logdriver
+        log_driver = payload.set_internal_metadata['docker:logdriver'];
+    } else if (payload.hasOwnProperty('internal_metadata')
+        && payload.internal_metadata.hasOwnProperty('docker:logdriver')) {
+
+        // we're setting a new logdriver
+        log_driver = payload.internal_metadata['docker:logdriver'];
+    } else if (payload.hasOwnProperty('remove_internal_metadata')
+        && payload.remove_internal_metadata
+        .indexOf('docker:logdriver') !== -1) {
+
+        // we're unsetting logdriver, use the default one then
+        log_driver = 'json-file';
+    } else if (vmobj && vmobj.hasOwnProperty('internal_metadata')
+        && vmobj.internal_metadata.hasOwnProperty('docker:logdriver')) {
+
+        // we're not setting a new logdriver, so new will === old
+        log_driver = vmobj.internal_metadata['docker:logdriver'];
+    } else {
+        // don't have a new or old one, so use the default
+        log_driver = 'json-file';
+    }
+
+    // set appropriate flags based on log_driver
+    switch (log_driver) {
+    case 'json-file':
+        zlog_mode.gz = true;
+        break;
+    case 'none':
+        break;
+    default:
+        zlog_mode.gz = true;
+        zlog_mode.ngz = true;
+        break;
+    }
+
+    return {
+        mode: zlogObjToString(zlog_mode),
+        driver: log_driver
+    };
+}
-- 
2.21.0

