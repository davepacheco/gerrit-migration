From 8bb1d8c590aefa9c2eed48fc3ced22aba64f91ef Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex@uq.edu.au>
Date: Tue, 1 Oct 2019 15:14:48 +1000
Subject: [PATCH] joyent/sdc-ufds#3 want smartlogin to support administrator
 role

---
 lib/machines.js | 94 ++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 82 insertions(+), 12 deletions(-)

diff --git a/lib/machines.js b/lib/machines.js
index 3acba6b..50a9d1b 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -6,6 +6,7 @@
 
 /*
  * Copyright 2019 Joyent, Inc.
+ * Copyright 2019 The University of Queensland
  */
 
 /*
@@ -1334,6 +1335,13 @@ function checkPassword(req, res, next) {
 }
 
 
+/*
+ * Finds SSH keys that should go in the root_authorized_keys metadata (and
+ * therefore are valid for login as "root" on a new instance).
+ *
+ * Also used to validate that the user should be allowed to provision (no
+ * keys = no provision).
+ */
 function loadSSHKeys(req, res, next) {
     assert.ok(req.sdc);
 
@@ -1348,22 +1356,84 @@ function loadSSHKeys(req, res, next) {
             return next(err);
         }
 
-        if (!keys || !keys.length) {
-            return next(new KeyRequiredError());
-        }
+        /*
+         * As well as the keys on the account that would own the new instance,
+         * look at its "administrator" RBAC role (if one exists) and add keys
+         * belonging to members.
+         */
+        var roleFilter = '(&(objectclass=sdcaccountrole)(name=administrator))';
+        return req.sdc.ufds.listRoles(req.account.uuid, roleFilter,
+            function (err2, roles) {
+
+            if (err2) {
+                return next(err2);
+            }
+
+            /*
+             * Since the "uniquemember" members (those who aren't also in
+             * "uniquememberdefault") are meant to have to take affirmative
+             * action for the role to apply (e.g. setting a Role header), we
+             * will only add those in uniquememberdefault. We don't have a way
+             * for users to take affirmative action to activate the role in the
+             * context of an SSH login.
+             */
+            var adminRole = roles[0];
+            if (!adminRole || !adminRole.uniquememberdefault) {
+                return gotKeys();
+            }
+
+            var members = adminRole.uniquememberdefault;
+            if (!Array.isArray(members)) {
+                members = [members];
+            }
+
+            return vasync.forEachParallel({
+                func: addUserKeys,
+                inputs: members
+            }, gotKeys);
 
-        req.root_authorized_keys = '';
-        req.keys = keys;
-        keys.forEach(function (k) {
-            req.root_authorized_keys += k.openssh + '\n';
+            function addUserKeys(dn, ccb) {
+                /*
+                 * Note scope: one not sub, the DN might be an account rather
+                 * than a sub-user, and we don't want its sub-user's keys.
+                 */
+                req.sdc.ufds.search(dn, {
+                    scope: 'one',
+                    filter: '(objectclass=sdckey)'
+                }, function (err4, userKeys) {
+                    if (err4) {
+                        return ccb(err4);
+                    }
+                    userKeys.forEach(function (key) {
+                        keys.push(key);
+                    });
+                    return ccb();
+                });
+            }
         });
 
-        log.debug({
-            customer: req.account.uuid,
-            root_authorized_keys: req.root_authorized_keys
-        }, 'Loaded keys for %s', req.account.login);
+        function gotKeys(err3) {
+            if (err3) {
+                return next(err3);
+            }
 
-        return next();
+            if (!keys || !keys.length) {
+                return next(new KeyRequiredError());
+            }
+
+            req.root_authorized_keys = '';
+            req.keys = keys;
+            keys.forEach(function (k) {
+                req.root_authorized_keys += k.openssh + '\n';
+            });
+
+            log.debug({
+                customer: req.account.uuid,
+                root_authorized_keys: req.root_authorized_keys
+            }, 'Loaded keys for %s', req.account.login);
+
+            return next();
+        }
     });
 }
 
-- 
2.17.2 (Apple Git-113)

