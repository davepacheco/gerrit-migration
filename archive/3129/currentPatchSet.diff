From 46458cb1db3746bfbf0d9e1872d8fd68be5ee6d2 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Wed, 20 Dec 2017 17:21:02 -0800
Subject: [PATCH] DOCKER-1135 Docker Dumps Core: Potentially Related to Volapi
 Reviewed by: Todd Whiteman <todd.whiteman@joyent.com> Approved by: Todd
 Whiteman <todd.whiteman@joyent.com>

---
 lib/backends/sdc/containers.js                | 27 +++---
 test/images/test-image-with-volume/Dockerfile |  4 +
 test/images/test-image-with-volume/Makefile   | 20 ++++
 test/images/test-image-with-volume/bar        |  1 +
 .../api-create-with-volume-from-image.test.js | 91 +++++++++++++++++++
 5 files changed, 132 insertions(+), 11 deletions(-)
 create mode 100644 test/images/test-image-with-volume/Dockerfile
 create mode 100644 test/images/test-image-with-volume/Makefile
 create mode 100644 test/images/test-image-with-volume/bar
 create mode 100644 test/integration/api-create-with-volume-from-image.test.js

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index f2eac2d..bcb273b 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -1462,6 +1462,10 @@ function buildVmPayload(opts, container, callback) {
 
     var binds;
     var dockerid;
+    var dockerNfsVolumes =
+        opts.config.experimental_docker_nfs_shared_volumes;
+    var dockerNfsVolumesAutomount =
+        opts.config.experimental_docker_automount_nfs_shared_volumes;
     var imgConfig = opts.image.config || {};
     var log = opts.log;
     var logConfig = {};
@@ -1684,7 +1688,7 @@ function buildVmPayload(opts, container, callback) {
      * represent host volumes, otherwise send an error that communicates that
      * host volumes are not supported.
      */
-    if (opts.config.experimental_docker_nfs_shared_volumes !== true) {
+    if (dockerNfsVolumes !== true) {
        /*
         * "Host" volumes created using -v http[s]://example/file:/container/file
         * We'll download http[s]://example/file and write it to a new directory
@@ -1862,11 +1866,6 @@ function buildVmPayload(opts, container, callback) {
         },
 
         function handleSharedVolumes(_, cb) {
-            var dockerNfsVolumes =
-                opts.config.experimental_docker_nfs_shared_volumes;
-            var dockerNfsVolumesAutomount =
-                opts.config.experimental_docker_automount_nfs_shared_volumes;
-
             log.debug('handling shared volumes');
 
             binds = container.Binds
@@ -2109,7 +2108,7 @@ function buildVmPayload(opts, container, callback) {
             if (imgConfig.Volumes) {
                 Object.keys(imgConfig.Volumes).forEach(function (v) {
                     var exists = false;
-                    var sharedVols = payload.volumes;
+                    var sharedVols = [];
 
                     payload.filesystems.forEach(function (f) {
                         if (f.target === v) {
@@ -2117,11 +2116,17 @@ function buildVmPayload(opts, container, callback) {
                         }
                     });
 
-                    sharedVols.forEach(function checkSameMountpoint(vol) {
-                        if (vol.mountpoint === v) {
-                            exists = true;
+                    if (dockerNfsVolumes && dockerNfsVolumesAutomount) {
+                        if (payload.volumes !== undefined) {
+                            sharedVols = payload.volumes;
                         }
-                    });
+
+                        sharedVols.forEach(function checkSameMountpoint(vol) {
+                            if (vol.mountpoint === v) {
+                                exists = true;
+                            }
+                        });
+                    }
 
                     if (exists) {
                         log.warn({volume: v}, 'volume specified both in payload'
diff --git a/test/images/test-image-with-volume/Dockerfile b/test/images/test-image-with-volume/Dockerfile
new file mode 100644
index 0000000..6276662
--- /dev/null
+++ b/test/images/test-image-with-volume/Dockerfile
@@ -0,0 +1,4 @@
+FROM busybox
+ADD bar /foo/bar
+VOLUME /foo
+CMD /bin/sh
diff --git a/test/images/test-image-with-volume/Makefile b/test/images/test-image-with-volume/Makefile
new file mode 100644
index 0000000..51ef777
--- /dev/null
+++ b/test/images/test-image-with-volume/Makefile
@@ -0,0 +1,20 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+NAME=joyentunsupported/test-image-with-volume
+VERSION=1.0.0
+
+all:
+	docker build -t $(NAME):$(VERSION) .
+	docker build -t $(NAME):latest .
+
+publish: all
+	docker push $(NAME):$(VERSION)
+	docker push $(NAME):latest
diff --git a/test/images/test-image-with-volume/bar b/test/images/test-image-with-volume/bar
new file mode 100644
index 0000000..5716ca5
--- /dev/null
+++ b/test/images/test-image-with-volume/bar
@@ -0,0 +1 @@
+bar
diff --git a/test/integration/api-create-with-volume-from-image.test.js b/test/integration/api-create-with-volume-from-image.test.js
new file mode 100644
index 0000000..bcb362e
--- /dev/null
+++ b/test/integration/api-create-with-volume-from-image.test.js
@@ -0,0 +1,91 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+var test = require('tape');
+
+var h = require('./helpers');
+
+var ALICE;
+var DOCKER_ALICE;
+var STATE = {
+    log: require('../lib/log')
+};
+var TEST_IMAGE = 'joyentunsupported/test-image-with-volume:latest';
+var VMAPI;
+
+test('setup', function (tt) {
+
+    tt.test('docker env', function (t) {
+        h.initDockerEnv(t, STATE, {}, function (err, accounts) {
+            t.ifErr(err);
+
+            ALICE = accounts.alice;
+
+            t.end();
+        });
+    });
+
+    tt.test('docker client init', function (t) {
+        h.createDockerRemoteClient({user: ALICE}, function (err, client) {
+            t.ifErr(err, 'docker client init for alice');
+
+            DOCKER_ALICE = client;
+
+            t.end();
+        });
+    });
+
+    tt.test('vmapi client init', function (t) {
+        h.createVmapiClient(function (err, client) {
+            t.ifErr(err, 'vmapi client');
+            VMAPI = client;
+            t.end();
+        });
+    });
+
+    tt.test('pull test-image-with-volume image', function (t) {
+        h.ensureImage({
+            name: TEST_IMAGE,
+            user: ALICE
+        }, function (err) {
+            t.error(err, 'should be no error pulling image');
+            t.end();
+        });
+    });
+});
+
+test('api: create', function (tt) {
+
+    var created;
+
+    tt.test('docker create', function (t) {
+        h.createDockerContainer({
+            imageName: TEST_IMAGE,
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t
+        }, oncreate);
+
+        function oncreate(err, result) {
+            t.ifErr(err, 'create container');
+            created = result;
+            t.end();
+        }
+    });
+
+    tt.test('docker rm', function (t) {
+        DOCKER_ALICE.del('/containers/' + created.id, ondel);
+
+        function ondel(err, res, req, body) {
+            t.ifErr(err, 'rm container');
+            t.end();
+        }
+    });
+});
\ No newline at end of file
-- 
2.21.0

