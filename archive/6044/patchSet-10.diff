commit 75724a49ce5d20640e3a7fef98ce95e6ab4e18ec
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-06-25T18:54:08+02:00 (3 months ago)
    
    TRITON-899 Add node-triton support for instance migration

diff --git a/.gitignore b/.gitignore
index 685542c..68fde33 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,3 +6,4 @@
 /npm-debug.log
 /triton-*.tgz
 *.swp
+*.vim
diff --git a/CHANGES.md b/CHANGES.md
index 0c57a45..3eb02a4 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,6 +6,10 @@ Known issues:
 
 ## not yet released
 
+## 7.3.0
+
+- [TRITON-899] Add node-triton support for triton instance migration.
+
 ## 7.2.0
 
 - [TRITON-1325] node-triton fwrule support for cloud firewall logging.
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 932d94c..89fd0a1 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -1929,6 +1929,99 @@ function deleteMachineSnapshot(opts, cb) {
 };
 
 
+// --- migrations
+
+/**
+ * Performs a migration action for a given machine.
+ *
+ * Returns a migration object.
+ *
+ *      - {String} id (required) the machine's id.
+ *      - {String} action (required) the action to be performed. Supported
+ *        actions are 'begin', 'sync', 'pause', 'abort', 'automatic' and
+ *        'switch'.
+ *      - {String} affinity (optional) affinity rules for the migration
+ *        (only when the action is 'begin')
+ * @param {Function} callback of the form f(err, migration, res).
+ */
+CloudApi.prototype.machineMigration =
+function machineMigration(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.action, 'opts.action');
+    assert.optionalArrayOfString(opts.affinity, 'opts.affinity');
+    assert.func(cb, 'cb');
+
+    var actions = ['begin', 'sync', 'pause', 'switch', 'automatic', 'abort'];
+
+    if (actions.indexOf(opts.action) === -1) {
+        cb(new errors.TritonError('Unsupported migration action ' +
+                    opts.action));
+        return;
+    }
+
+    var data = {
+        action: opts.action
+    };
+
+    if (opts.affinity) {
+        if (opts.action !== 'begin' && opts.action !== 'automatic') {
+            cb(new errors.TritonError('Cannot set affinity for action ' +
+                        opts.action));
+            return;
+        }
+        data.affinity = opts.affinity;
+    }
+
+
+    this._request({
+        method: 'POST',
+        path: format('/%s/machines/%s/migrate', this.account, opts.id),
+        data: data
+    }, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
+
+
+
+/**
+ * Lists all migrations for a given account.
+ *
+ * Returns a list of migration objects.
+ *
+ * @param {Function} callback of the form f(err, migrations, res).
+ */
+CloudApi.prototype.listMigrations =
+function listMigrations(cb) {
+    assert.func(cb, 'cb');
+
+    var endpoint = format('/%s/migrations', this.account);
+    this._passThrough(endpoint, cb);
+};
+
+
+
+/**
+ * Returns a single migration object.
+ * <http://apidocs.joyent.com/cloudapi/#GetMigration>
+ *
+ * @param {Object} opts
+ *      - id {UUID|String} Machine ID (a UUID).
+ * @param {Function} cb of the form `function (err, migration, res)`
+ */
+CloudApi.prototype.getMigration = function getMigration(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.func(cb, 'cb');
+
+    var endpoint = this._path(
+        format('/%s/migrations/%s', this.account, opts.id));
+    this._request(endpoint, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
+
 // --- NICs
 
 /**
diff --git a/lib/do_instance/do_migration/do_abort.js b/lib/do_instance/do_migration/do_abort.js
new file mode 100644
index 0000000..c50a97f
--- /dev/null
+++ b/lib/do_instance/do_migration/do_abort.js
@@ -0,0 +1,112 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration abort ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+
+function do_abort(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var abortOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'abort'
+    };
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function abortMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(abortOpts,
+            function abortMigrationCb(err, _migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.instId = res.instId;
+
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_abort.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for abort to complete.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_abort.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_abort.help = [
+    'Aborts in-progress instance synchronization for an existing migration.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_abort.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_abort;
diff --git a/lib/do_instance/do_migration/do_automatic.js b/lib/do_instance/do_migration/do_automatic.js
new file mode 100644
index 0000000..f9fb463
--- /dev/null
+++ b/lib/do_instance/do_migration/do_automatic.js
@@ -0,0 +1,140 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration automatic ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+function do_automatic(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var automaticOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'automatic'
+    };
+
+    if (opts.affinity) {
+        automaticOpts.affinity = opts.affinity;
+    }
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function automaticMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(automaticOpts,
+            function createMigrationCb(err, migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                cli.log.trace({
+                    instance: automaticOpts.id,
+                    migration: migration
+                }, 'Initiated migration');
+                ctx.instId = res.instId;
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_automatic.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    },
+    {
+        names: ['affinity', 'a'],
+        type: 'arrayOfString',
+        helpArg: 'RULE',
+        help: 'Affinity rules for selecting a server for this instance ' +
+            'migration. Rules have one of the following forms: ' +
+            '`instance==INST` (the new instance must be on the same server ' +
+            'as INST), `instance!=INST` (new inst must *not* be on the same ' +
+            'server as INST), `instance==~INST` (*attempt* to place on the ' +
+            'same server as INST), or `instance!=~INST` (*attempt* to place ' +
+            'on a server other than INST\'s). `INST` is an existing ' +
+            'instance name or id. Use this option more than once for ' +
+            'multiple rules.',
+        completionType: 'tritonaffinityrule'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for the creation to complete.'
+    },
+    {
+        names: ['quiet', 'q'],
+        type: 'bool',
+        help: 'Quieter output. Specifically do not dump migration watch '
+            + 'events as they complete.'
+    }
+];
+
+do_automatic.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_automatic.help = [
+    'Migrates the given instance.',
+    'Equivalent to begin + sync + switch.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_automatic.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_automatic;
diff --git a/lib/do_instance/do_migration/do_begin.js b/lib/do_instance/do_migration/do_begin.js
new file mode 100644
index 0000000..cc13986
--- /dev/null
+++ b/lib/do_instance/do_migration/do_begin.js
@@ -0,0 +1,139 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration begin ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+function do_begin(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var beginOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'begin'
+    };
+
+    if (opts.affinity) {
+        beginOpts.affinity = opts.affinity;
+    }
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function beginMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(beginOpts,
+            function createMigrationCb(err, migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                cli.log.trace({
+                    instance: beginOpts.id,
+                    migration: migration
+                }, 'Initiated migration');
+                ctx.instId = res.instId;
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_begin.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    },
+    {
+        names: ['affinity', 'a'],
+        type: 'arrayOfString',
+        helpArg: 'RULE',
+        help: 'Affinity rules for selecting a server for this instance ' +
+            'migration. Rules have one of the following forms: ' +
+            '`instance==INST` (the new instance must be on the same server ' +
+            'as INST), `instance!=INST` (new inst must *not* be on the same ' +
+            'server as INST), `instance==~INST` (*attempt* to place on the ' +
+            'same server as INST), or `instance!=~INST` (*attempt* to place ' +
+            'on a server other than INST\'s). `INST` is an existing ' +
+            'instance name or id. Use this option more than once for ' +
+            'multiple rules.',
+        completionType: 'tritonaffinityrule'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for the creation to complete.'
+    },
+    {
+        names: ['quiet', 'q'],
+        type: 'bool',
+        help: 'Quieter output. Specifically do not dump migration watch '
+            + 'events as they complete.'
+    }
+];
+
+do_begin.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_begin.help = [
+    'Begins the migration for an instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_begin.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_begin;
diff --git a/lib/do_instance/do_migration/do_get.js b/lib/do_instance/do_migration/do_get.js
new file mode 100644
index 0000000..b2f2f93
--- /dev/null
+++ b/lib/do_instance/do_migration/do_get.js
@@ -0,0 +1,157 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration get ...`
+ */
+
+var assert = require('assert-plus');
+var tabula = require('tabula');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+
+var stylize = common.ansiStylizeTty;
+
+function do_get(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var getOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'get'
+    };
+
+    vasync.pipeline({
+        arg: {
+            cli: cli
+        }, funcs: [
+        common.cliSetupTritonApi,
+        function getMigration(ctx, next) {
+            ctx.start = Date.now();
+            cli.tritonapi.getMigration(getOpts,
+                function getMigrationCb(err, migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                cli.log.trace({
+                    instance: getOpts.id,
+                    migration: migration
+                }, 'Geting migration');
+
+                ctx.instId = res.instId;
+
+                if (opts.json) {
+                    console.log(JSON.stringify(migration));
+                    next();
+                    return;
+                } else {
+                    var state = migration.state;
+                    if (state === 'successful') {
+                        console.log(
+                            'State:         ' + stylize(state, 'green'));
+                    } else if (state === 'running') {
+                        console.log(
+                            'State:         ' + stylize(state, 'bold'));
+                    } else if (state === 'failed') {
+                        console.log(
+                            'State:         ' + stylize(state, 'red'));
+                    } else {
+                        console.log('State:         ' + state);
+                    }
+
+                    console.log('Created:       ' +
+                        migration.created_timestamp);
+                    console.log('Automatic:     ' + migration.automatic);
+                    if (migration.duration_ms) {
+                        console.log('Total runtime: ' +
+                            common.humanDurationFromMs(migration.duration_ms));
+                    }
+                    console.log('Phases: ');
+
+                    var phases = migration.progress_history;
+                    var columns = 'phase,state,age,runtime,message';
+                    var rows = [];
+                    var i;
+                    for (i = 0; i < phases.length; i += 1) {
+                        var phase = phases[i];
+                        rows.push({
+                            phase: phase.phase,
+                            state: phase.state,
+                            age: common.longAgo(new Date(
+                                phase.started_timestamp)),
+                            runtime: common.humanDurationFromMs(
+                                phase.duration_ms),
+                            message: phase.message
+                        });
+                    }
+
+                    tabula(rows, {
+                        columns: columns.split(',')
+                    });
+
+                    if (state === 'successful') {
+                        console.log(stylize(
+                            'Migration finished successfully', 'green'));
+                    } else if (state === 'failed' || migration.error) {
+                        console.log(stylize(
+                            'Migration error: ' + migration.error, 'red'));
+                    } else {
+                        console.log('Migration ' + state);
+                    }
+                    next();
+                }
+            });
+        }
+    ]}, cb);
+}
+
+do_get.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_get.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_get.help = [
+    'Get instance migration details.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_get.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_get;
diff --git a/lib/do_instance/do_migration/do_list.js b/lib/do_instance/do_migration/do_list.js
new file mode 100644
index 0000000..467ab6d
--- /dev/null
+++ b/lib/do_instance/do_migration/do_list.js
@@ -0,0 +1,115 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton migration list ...`
+ */
+
+var assert = require('assert-plus');
+var tabula = require('tabula');
+
+var common = require('../../common');
+var errors = require('../../errors');
+
+
+var COLUMNS_DEFAULT = 'shortid,phase,state,age';
+var COLUMNS_DEFAULT_LONG = 'machine,phase,state,created_timestamp';
+var SORT_DEFAULT = 'created_timestamp';
+
+
+function do_list(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var cli = this.top;
+
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
+            return;
+        }
+
+        cli.tritonapi.listMigrations({
+        }, function onMigrations(err, migrations) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (opts.json) {
+                common.jsonStream(migrations);
+                cb();
+                return;
+            }
+
+            var columns = COLUMNS_DEFAULT;
+
+            if (opts.o) {
+                columns = opts.o;
+            } else if (opts.long) {
+                columns = COLUMNS_DEFAULT_LONG;
+            }
+
+            var now = new Date();
+            migrations = migrations.map(function fmtMigr(migr) {
+                migr.shortid = migr.machine.split('-', 1)[0];
+                var created = new Date(migr.created_timestamp);
+                migr.age = common.longAgo(created, now);
+                return migr;
+            });
+
+            columns = columns.split(',');
+            var sort = opts.s.split(',');
+
+            tabula(migrations, {
+                skipHeader: opts.H,
+                columns: columns,
+                sort: sort
+            });
+            cb();
+
+        });
+    });
+}
+
+
+do_list.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    }
+].concat(common.getCliTableOptions({
+    includeLong: true,
+    sortDefault: SORT_DEFAULT
+}));
+
+do_list.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_list.help = [
+    'Show all of an account\'s migrations.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_list.completionArgtypes = ['tritoninstance', 'none'];
+
+do_list.aliases = ['ls'];
+
+module.exports = do_list;
diff --git a/lib/do_instance/do_migration/do_pause.js b/lib/do_instance/do_migration/do_pause.js
new file mode 100644
index 0000000..a919b2d
--- /dev/null
+++ b/lib/do_instance/do_migration/do_pause.js
@@ -0,0 +1,111 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration pause ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+function do_pause(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var pauseOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'pause'
+    };
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function pauseMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(pauseOpts,
+            function pauseMigrationCb(err, _migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.instId = res.instId;
+
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_pause.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for migration to be paused.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_pause.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_pause.help = [
+    'Pauses in-progress instance synchronization to an existing migration.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_pause.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_pause;
diff --git a/lib/do_instance/do_migration/do_switch.js b/lib/do_instance/do_migration/do_switch.js
new file mode 100644
index 0000000..b5dafd5
--- /dev/null
+++ b/lib/do_instance/do_migration/do_switch.js
@@ -0,0 +1,120 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration switch ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+function do_switch(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var switchOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'switch'
+    };
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function switchMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(switchOpts,
+            function switchMigrationCb(err, migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                cli.log.trace({
+                    instance: switchOpts.id,
+                    migration: migration
+                }, 'Switching to migration');
+                ctx.instId = res.instId;
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_switch.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for the switch to complete.'
+    },
+    {
+        names: ['quiet', 'q'],
+        type: 'bool',
+        help: 'Quieter output. Specifically do not dump migration watch '
+            + 'events as they complete.'
+    }
+];
+
+do_switch.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_switch.help = [
+    'Switch an instance to a migration.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_switch.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_switch;
diff --git a/lib/do_instance/do_migration/do_sync.js b/lib/do_instance/do_migration/do_sync.js
new file mode 100644
index 0000000..ec99baa
--- /dev/null
+++ b/lib/do_instance/do_migration/do_sync.js
@@ -0,0 +1,126 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration sync ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var Watcher = require('./watcher').Watcher;
+
+
+function do_sync(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing <inst> argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+
+    var syncOpts = {
+        userId: opts.userId,
+        id: inst,
+        action: 'sync'
+    };
+
+    vasync.pipeline({
+        arg: {
+            cli: cli
+        }, funcs: [
+        common.cliSetupTritonApi,
+        function syncMigration(ctx, next) {
+            ctx.start = Date.now();
+
+            cli.tritonapi.doInstanceMigration(syncOpts,
+            function syncMigrationCb(err, migration, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                cli.log.trace({
+                    instance: syncOpts.id,
+                    migration: migration
+                }, 'Synchronizing migration');
+
+                ctx.instId = res.instId;
+                next();
+            });
+        },
+        function watchMigration(ctx, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+
+            var _watcher = new Watcher(_cloudapiOpts);
+
+            _watcher.watchMigration({
+                id: ctx.instId,
+                json: opts.json,
+                quiet: opts.quiet
+            }, function watchMigrationCb(err, _progressEvents) {
+                next(err);
+            });
+        }
+    ]}, cb);
+}
+
+do_sync.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Wait for the synchronization to complete.'
+    },
+    {
+        names: ['quiet', 'q'],
+        type: 'bool',
+        help: 'Quieter output. Specifically do not dump migration watch '
+            + 'events as they complete.'
+    }
+];
+
+do_sync.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_sync.help = [
+    'The original instance will be hidden and the migrated',
+    'instance will take over as the visible instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+do_sync.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_sync;
diff --git a/lib/do_instance/do_migration/index.js b/lib/do_instance/do_migration/index.js
new file mode 100644
index 0000000..3664b21
--- /dev/null
+++ b/lib/do_instance/do_migration/index.js
@@ -0,0 +1,53 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * `triton instance migration ...`
+ */
+
+var Cmdln = require('cmdln').Cmdln;
+var util = require('util');
+
+
+// ---- CLI class
+
+function MigrationCLI(top) {
+    this.top = top.top;
+
+    Cmdln.call(this, {
+        name: top.name + ' migration',
+        desc: 'List, begin, sync and switch to Triton instance migrations.',
+        helpSubcmds: [
+            'help',
+            'begin',
+            'sync',
+            'switch',
+            'pause',
+            'abort',
+            'list',
+            'automatic',
+            'get'
+        ]
+    });
+}
+util.inherits(MigrationCLI, Cmdln);
+
+MigrationCLI.prototype.init = function init(opts, args, cb) {
+    this.log = this.top.log;
+    Cmdln.prototype.init.apply(this, arguments);
+};
+
+MigrationCLI.prototype.do_begin = require('./do_begin');
+MigrationCLI.prototype.do_sync = require('./do_sync');
+MigrationCLI.prototype.do_switch = require('./do_switch');
+MigrationCLI.prototype.do_pause = require('./do_pause');
+MigrationCLI.prototype.do_abort = require('./do_abort');
+MigrationCLI.prototype.do_list = require('./do_list');
+MigrationCLI.prototype.do_get = require('./do_get');
+MigrationCLI.prototype.do_automatic = require('./do_automatic');
+module.exports = MigrationCLI;
diff --git a/lib/do_instance/do_migration/watcher.js b/lib/do_instance/do_migration/watcher.js
new file mode 100644
index 0000000..58ed636
--- /dev/null
+++ b/lib/do_instance/do_migration/watcher.js
@@ -0,0 +1,243 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ *
+ * Client library for watch migration end-point of SmartDataCenter Cloud API.
+ * http://apidocs.joyent.com/cloudapi/
+ */
+
+
+/* jsl:ignore */
+'use strict';
+/* jsl:end */
+
+var assert = require('assert-plus');
+
+var errors = require('../../errors');
+
+var CloudAPI = require('../../cloudapi2').CloudApi;
+var HttpClient = require('restify-clients').HttpClient;
+HttpClient.prototype.post = function post(options, callback) {
+    var opts = this._options('POST', options);
+    return (this.request(opts, callback));
+};
+
+function elapsed(_start) {
+    var delta = process.hrtime(_start);
+    return (delta[0] + (delta[1] / 1e9)).toFixed(6).substr(0, 8);
+}
+
+function humanizeNetworkSpeed(speed) {
+    if (typeof (speed) !== 'number') {
+        return speed;
+    }
+    var i = 0;
+    var byteUnits = ['B/s', 'kB/s', 'MB/s', 'GB/s', 'TB/s', 'PB/s', 'EB/s'];
+    while (speed > 1024 && i < byteUnits.length) {
+        speed = speed / 1024; i++;
+    }
+    return Math.max(speed, 0).toFixed(1) + byteUnits[i];
+}
+
+var util = require('util');
+
+/*
+ * Migration watch end-point streams JSON as migration events progress through
+ * the migration process. Usage of restify JSON client could result in JSON
+ * parse errors because the data stream may or may not be complete JSON data
+ * chunks.
+ *
+ * Instead of waiting until the end of the whole process in order to get any
+ * feedback -- which is what the default restify JSONClient would do -- we use
+ * the HttpClient and provide immediate information to the user.
+ *
+ * Expected options are exactly the same as the `CloudAPI` constructor.
+ *
+ * From any CLI subcommand, those can be obtained from the current TritonAPI
+ * instance by using:
+ *
+ *      var _cloudapiOpts = cli.tritonapi._cloudapiOpts;
+ *      var _watcher = new Watcher(_cloudapiOpts);
+ */
+function Watcher(options) {
+    CloudAPI.call(this, options);
+    this.client = new HttpClient(options);
+}
+
+util.inherits(Watcher, CloudAPI);
+
+/*
+ * Watch a migration in progress for the provided machine `id`.
+ *
+ * Callback will be called with any error that may happen while watching
+ * the migration and, in case no error happens, with a list of migration
+ * progress events.
+ *
+ *      `watchCb(watchErr, migrationProgressEvents);`
+ *
+ * @param {Object} `watchOpts`:
+ *      - `id`: UUID of the machine whose migration we want to watch
+ *      - `json`: Boolean. Provide output messages as raw JSON or format them
+ *          for user feedback. (False by default)
+ *      - `quiet`: Boolean. Do not print any progress messages during the
+ *          watching process. (False by default)
+ */
+Watcher.prototype.watchMigration = function watchMigration(watchOpts, watchCb) {
+    assert.object(watchOpts, 'opts');
+    assert.uuid(watchOpts.id, 'opts.id');
+    assert.optionalBool(watchOpts.json, 'opts.json');
+    assert.optionalBool(watchOpts.quiet, 'opts.quiet');
+    assert.func(watchCb, 'cb');
+
+    var self = this;
+
+    var watchEnded = false;
+    var socketClosed = false;
+
+    var quiet = Boolean(watchOpts.quiet || false);
+    var jsonOutput = Boolean(watchOpts.json || false);
+
+    var progressEvents = [];
+    var currProgress = 0;
+
+    this._request({
+        method: 'POST',
+        path: util.format('/%s/machines/%s/migrate?action=watch',
+            this.account, watchOpts.id)
+    }, function reqCb(reqErr, req) {
+        var taskStart = process.hrtime();
+
+        req.on('close', function _watchReqCloseCb() {
+            self.log.trace({
+                progressEvents: progressEvents,
+                elapsed: elapsed(taskStart)
+            }, 'watchVmMigration:: watch request closed');
+
+            if (!watchEnded) {
+                socketClosed = true;
+                watchCb(null, progressEvents);
+            }
+        });
+
+        req.on('result', function resultCb(resErr, res) {
+            if (resErr) {
+                watchCb(resErr);
+                return;
+            }
+
+            var pending = null;
+
+            res.setEncoding('utf8');
+
+            res.on('data', function onDataCb(chunk) {
+                self.log.trace({
+                    elapsed: elapsed(taskStart),
+                    chunk: chunk
+                }, 'Received migration data');
+
+                var frags = [];
+                var rawFrags = chunk.trim().split('\n');
+
+                // If we have half a fragment from previous
+                // chunk, we should prepend it to first fragment now:
+                if (pending) {
+                    rawFrags[0] = pending + rawFrags[0];
+                    pending = null;
+                }
+
+                rawFrags.forEach(function parseFrag(frag) {
+                    try {
+                        frag = JSON.parse(frag);
+                        frags.push(frag);
+                    } catch (jsonErr) {
+                        if (jsonErr instanceof SyntaxError &&
+                            jsonErr.message ===
+                            'Unexpected end of JSON input') {
+                            pending = frag;
+                        } else {
+                            resErr = new errors.InvalidContentError(
+                                'Invalid JSON in response');
+                            watchCb(resErr);
+                            return;
+                        }
+                    }
+                });
+
+                function printEvent(evt) {
+                    if (quiet) {
+                        return;
+                    }
+
+                    if (jsonOutput) {
+                        console.log(JSON.stringify(evt));
+                        return;
+                    }
+
+                    if (evt.type === 'end') {
+                        console.log('Done - %s finished in %d seconds',
+                            evt.phase, elapsed(taskStart));
+                        return;
+                    }
+
+                    // These must be 'progress' events
+                    var state = evt.state;
+                    // Some adjustments to progress only if we're not dealing
+                    // with bytes:
+                    if (evt.total_progress === 100) {
+                        if (evt.current_progress <= currProgress) {
+                            evt.current_progress += currProgress;
+                        }
+                    }
+                    var percent = (evt.current_progress * 100) /
+                            evt.total_progress;
+
+                    currProgress = percent;
+                    var mbps = evt.transfer_bytes_second ?
+                        humanizeNetworkSpeed(evt.transfer_bytes_second) :
+                        evt.message;
+
+                    console.log('%s: %d%% %s', state, percent, mbps);
+                }
+
+                if (Array.isArray(frags)) {
+                    frags.forEach(function printFrag(frag) {
+                        printEvent(frag);
+                        progressEvents.push(frag);
+                    });
+                } else {
+                    printEvent(frags);
+                    progressEvents.push(frags);
+                }
+            });
+
+            res.on('timeout', function _watchResTimeout() {
+                self.log.trace({
+                    elapsed: elapsed(taskStart)
+                }, 'watchMigration:: response timeout');
+            });
+
+            res.on('end', function onEndCb() {
+                self.log.trace({
+                    progressEvents: progressEvents,
+                    elapsed: elapsed(taskStart)
+                }, 'watchMigration:: response finished');
+
+                if (!socketClosed) {
+                    watchEnded = true;
+                    watchCb(resErr, progressEvents);
+                }
+            });
+        });
+
+        req.end();
+    });
+};
+
+module.exports = {
+    Watcher: Watcher
+};
diff --git a/lib/do_instance/index.js b/lib/do_instance/index.js
index 87496f4..dc7ecce 100644
--- a/lib/do_instance/index.js
+++ b/lib/do_instance/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * `triton instance ...`
  */
@@ -55,7 +55,8 @@ function InstanceCLI(top) {
             'nic',
             'snapshot',
             'tag',
-            'disk'
+            'disk',
+            'migration'
         ]
     });
 }
@@ -94,6 +95,7 @@ InstanceCLI.prototype.do_audit = require('./do_audit');
 InstanceCLI.prototype.do_nic = require('./do_nic');
 InstanceCLI.prototype.do_snapshot = require('./do_snapshot');
 InstanceCLI.prototype.do_snapshots = require('./do_snapshots');
+InstanceCLI.prototype.do_migration = require('./do_migration');
 InstanceCLI.prototype.do_tag = require('./do_tag');
 InstanceCLI.prototype.do_tags = require('./do_tags');
 InstanceCLI.prototype.do_disk = require('./do_disk');
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index a3406e0..cfeb3cf 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -1897,6 +1897,94 @@ function deleteInstanceSnapshot(opts, cb) {
 };
 
 
+// ---- instance migrations
+
+/**
+ * Performs a migration action for a given instance.
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ *      - {String} action: The name for action. Required.
+ * @param {Function} callback `function (err, migration, res)`
+ */
+TritonApi.prototype.doInstanceMigration =
+function doInstanceMigration(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.string(opts.action, 'opts.action');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+    var migration;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function doMigration(arg, next) {
+            self.cloudapi.machineMigration({
+                id: arg.instId,
+                action: opts.action
+            }, function (err, migr, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                migration = migr;
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, migration, res);
+    });
+};
+
+
+/**
+ * List an account migrations.
+ *
+ * @param {Function} callback `function (err, migrations, res)`
+ */
+TritonApi.prototype.listMigrations =
+function listMigrations(opts, cb) {
+    assert.func(cb, 'cb');
+    this.cloudapi.listMigrations(cb);
+};
+
+
+/**
+ * Get instance migration
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ * @param {Function} callback `function (err, migration, res)`
+ */
+TritonApi.prototype.getMigration =
+function getMigration(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.string(opts.id, 'opts.id');
+    assert.func(cb, 'cb');
+    var self = this;
+    var res;
+    var migration;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+        function _getMigr(arg, next) {
+            self.cloudapi.getMigration({
+                id: arg.instId
+            }, function getMigrCb(err, migr, _res) {
+                    res = _res;
+                    // gross hack, in case caller needs it:
+                    res.instId = arg.instId;
+                    migration = migr;
+                    next(err);
+                });
+        }
+    ]}, function (pipeErr) {
+        cb(pipeErr, migration, res);
+    });
+};
+
+
+
 // ---- instance tags
 
 /**
diff --git a/package.json b/package.json
index d2326c1..96ef2e8 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "7.2.0",
+  "version": "7.3.0",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
diff --git a/test/integration/cli-migrations.test.js b/test/integration/cli-migrations.test.js
new file mode 100644
index 0000000..5d3aa5e
--- /dev/null
+++ b/test/integration/cli-migrations.test.js
@@ -0,0 +1,267 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+/*
+ * Integration tests for `triton instance migration ...`
+ */
+
+var h = require('./helpers');
+var f = require('util').format;
+var os = require('os');
+var test = require('tape');
+
+// --- Globals
+
+var INST_ALIAS = f('nodetritontest-migrations-%s', os.hostname());
+var INST_SHORT;
+var USER_MIGR_ALLOWED = true;
+var OPTS = {
+    skip: !h.CONFIG.allowWriteActions
+};
+
+// --- Tests
+
+if (OPTS.skip) {
+    console.error('** skipping %s tests', __filename);
+    console.error('** set "allowWriteActions" in test config to enable');
+}
+
+test('triton instance migration abort', OPTS, function (tt) {
+    tt.test('  cleanup existing inst with alias ' + INST_ALIAS, function (t) {
+        h.deleteTestInst(t, INST_ALIAS, function (err) {
+            t.ifErr(err);
+            t.end();
+        });
+    });
+
+    tt.test('  setup: triton instance create', function (t) {
+        h.createTestInst(t, INST_ALIAS, {}, function onInst(err2, instId) {
+            if (h.ifErr(t, err2, 'triton instance create')) {
+                t.end();
+                return;
+            }
+
+            INST_SHORT = instId.match(/^(.+?)-/)[1]; // convert to short ID
+
+            t.end();
+        });
+    });
+
+    tt.test('  triton instance migration begin (try)', {
+        timeout: 10 * 60 * 1000
+    }, function (t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+        var cmd = 'instance migration begin -w ' + INST_SHORT;
+        h.triton(cmd, function beginCb(err, stdout, stderr) {
+            if (err) {
+                if (stderr.match('User migration on this VM not allowed')) {
+                    USER_MIGR_ALLOWED = false;
+                }
+                t.end();
+                return;
+            }
+            t.end();
+        });
+    });
+
+    tt.test('  triton instance migration abort', {
+        timeout: 10 * 60 * 1000
+    }, function testMigrAbortCb(t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+
+        if (!USER_MIGR_ALLOWED) {
+            t.comment('Skipping test. User migration not allowed');
+            t.end();
+            return;
+        }
+        var cmd = ['instance', 'migration', 'abort', '-w', INST_SHORT];
+
+        h.safeTriton(t, cmd, function syncCb(err, stdout, stderr) {
+            if (err) {
+                t.end();
+                return;
+            }
+            t.ok(stdout.match('Done - abort finished'), 'abort');
+            t.end();
+        });
+    });
+
+    /*
+     * Use a timeout, because '-w' on delete doesn't have a way to know if the
+     * attempt failed or if it is just taking a really long time.
+     */
+    tt.test('  cleanup: triton instance rm INST', {
+        timeout: 10 * 60 * 1000
+    }, function (t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+        h.deleteTestInst(t, INST_ALIAS, function () {
+            t.end();
+        });
+    });
+});
+
+test('triton instance migration', OPTS, function (tt) {
+    h.printConfig(tt);
+
+    tt.test('  cleanup existing inst with alias ' + INST_ALIAS, function (t) {
+        h.deleteTestInst(t, INST_ALIAS, function (err) {
+            t.ifErr(err);
+            t.end();
+        });
+    });
+
+    tt.test('  setup: triton instance create', function (t) {
+        h.createTestInst(t, INST_ALIAS, {}, function onInst(err2, instId) {
+            if (h.ifErr(t, err2, 'triton instance create')) {
+                t.end();
+                return;
+            }
+
+            INST_SHORT = instId.match(/^(.+?)-/)[1]; // convert to short ID
+
+            t.end();
+        });
+    });
+
+    var actions = ['begin', 'sync', 'switch'];
+
+    actions.forEach(function doTestAction(action) {
+        var actCmd = ['instance', 'migration', action ];
+
+        tt.test('  triton ' + actCmd.join(' '), {
+            timeout: 10 * 60 * 1000
+        }, function testMigrActCb(t) {
+            if (!INST_SHORT) {
+                t.comment('Skipping test. Instance not created');
+                t.end();
+                return;
+            }
+
+            if (!USER_MIGR_ALLOWED) {
+                t.comment('Skipping test. User migration not allowed');
+                t.end();
+                return;
+            }
+            var cmd = actCmd.concat(['-w', INST_SHORT]);
+
+            h.safeTriton(t, cmd, function syncCb(err, stdout, stderr) {
+                if (err) {
+                    t.end();
+                    return;
+                }
+                t.ok(stdout.match('Done - ' + action + ' finished'), action);
+                t.end();
+            });
+        });
+    });
+
+
+    tt.test('  triton instance migration list', function (t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+
+        if (!USER_MIGR_ALLOWED) {
+            t.comment('Skipping test. User migration not allowed');
+            t.end();
+            return;
+        }
+
+        var cmd = ['instance', 'migration', 'list'];
+
+        h.safeTriton(t, cmd, function listMigrationCb(err, stdout, stderr) {
+            if (err) {
+                t.end();
+                return;
+            }
+            var migrs = stdout.split('\n');
+            t.ok(migrs[0].match(/SHORTID\s+PHASE\s+STATE\s+AGE/));
+            migrs.shift();
+
+            t.ok(migrs.length >= 1, 'triton migrs list expected migrs num');
+
+            var testMigr = migrs.filter(function (migr) {
+                return migr.match(INST_SHORT);
+            });
+
+            t.equal(testMigr.length, 1, 'triton migrs list test migr found');
+
+            t.end();
+        });
+    });
+
+    tt.test('   triton instance migration get', function (t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+
+        if (!USER_MIGR_ALLOWED) {
+            t.comment('Skipping test. User migration not allowed');
+            t.end();
+            return;
+        }
+
+        var cmd = ['instance', 'migration', 'get', INST_SHORT];
+        h.safeTriton(t, cmd, function getCb(err, stdout, stderr) {
+            if (err) {
+                t.end();
+                return;
+            }
+
+            var strs = [
+                'State',
+                'Created',
+                'Automatic',
+                'Total runtime',
+                'Phases'
+            ];
+            strs.forEach(function (str) {
+                t.ok(stdout.match(str), str);
+            });
+            t.end();
+        });
+    });
+
+
+    /*
+     * Use a timeout, because '-w' on delete doesn't have a way to know if the
+     * attempt failed or if it is just taking a really long time.
+     */
+    tt.test('  cleanup: triton instance rm INST', {
+        timeout: 10 * 60 * 1000
+    }, function (t) {
+        if (!INST_SHORT) {
+            t.comment('Skipping test. Instance not created');
+            t.end();
+            return;
+        }
+        h.deleteTestInst(t, INST_ALIAS, function () {
+            t.end();
+        });
+    });
+});
+
+// vim: set expandtab softtabstop=4 shiftwidth=4:
diff --git a/test/integration/cli-subcommands.test.js b/test/integration/cli-subcommands.test.js
index 416c334..cf00e86 100644
--- a/test/integration/cli-subcommands.test.js
+++ b/test/integration/cli-subcommands.test.js
@@ -66,6 +66,14 @@ var subs = [
     ['instance disk get'],
     ['instance disk resize'],
     ['instance disk delete', 'instance disk rm'],
+    ['instance migration begin'],
+    ['instance migration switch'],
+    ['instance migration sync'],
+    ['instance migration pause'],
+    ['instance migration abort'],
+    ['instance migration get'],
+    ['instance migration list'],
+    ['instance migration automatic'],
     ['ip'],
     ['ssh'],
     ['network'],
