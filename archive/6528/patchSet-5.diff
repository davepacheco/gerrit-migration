commit 71b14d22cf0fe008d744a4467feb7e0104dea164
Author: Isaac Davis <isaac.davis@joyent.com>
Date:   2019-07-15T20:10:19+00:00 (3 months ago)
    
    MANTA-4365 Add '--experimental' flag to `manta-adm` to control the deployment of experimental services
    Reviewed by: Joshua M. Clulow <jmc@joyent.com>
    Approved by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/cmd/manta-adm.js b/cmd/manta-adm.js
index a795f4d..1847b7b 100755
--- a/cmd/manta-adm.js
+++ b/cmd/manta-adm.js
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -873,7 +873,11 @@ MantaAdm.prototype.do_update = function (subcmd, opts, args, callback)
 			adm.fetchDeployed(stepcb);
 		},
 		function generatePlan(_, stepcb) {
-			adm.generatePlan(stepcb, service, opts.no_reprovision);
+			adm.generatePlan({
+				service: service,
+				noreprovision: opts.no_reprovision,
+				experimental: opts.experimental
+			}, stepcb);
 		},
 		function dumpPlan(_, stepcb) {
 			adm.execPlan(process.stdout, process.stderr,
@@ -941,6 +945,11 @@ MantaAdm.prototype.do_update.options = [
     'type': 'bool',
     'help': 'When upgrading a zone, always provision and deprovision ' +
 	'rather than reprovision'
+},
+{
+    'names': [ 'experimental', 'X' ],
+    'type':  'bool',
+    'help': 'Allow deployment of experimental services'
 } ];
 
 MantaAdm.prototype.do_zk = MantaAdmZk;
diff --git a/lib/adm.js b/lib/adm.js
index 8dda76c..92ac84b 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -3858,14 +3858,31 @@ maAdm.prototype.readInstanceMetadataConfigRaw = function (contents)
 /*
  * Assuming we've already loaded the current deployed configuration and the
  * user-specified configuration, generate a plan to make reality match what the
- * user wants.  If "service" is specified, then we'll only update the service
- * with name "service".  If "noreprovision" is true, we'll use provision and
- * deprovision operations even when reprovisioning would work.
+ * user wants. This function accepts an 'opts' object with three members:
+ *
+ * - service: if specified, we'll only update the service with the given name
+ *
+ * - noreprovision: if true, we'll use provision and deprovision operations even
+ *   when reprovisioning would work. False by default.
+ *
+ * - experimental: if true, we'll allow the provisioning of instances of
+ *   experimental services, meaning those listed in the mSvcNamesExperimental
+ *   array in lib/services.js. False by default.
  */
-maAdm.prototype.generatePlan = function (callback, service, noreprovision)
+maAdm.prototype.generatePlan = function (opts, callback)
 {
 	assert.ok(this.ma_instances_wanted !== null);
 	assert.ok(this.ma_plan === null);
+	assertplus.object(opts, 'opts');
+	assertplus.func(callback, 'callback');
+	assertplus.optionalString(opts.service, 'opts.service');
+	assertplus.optionalBool(opts.noreprovision, 'opts.noreprovision');
+	assertplus.optionalBool(opts.experimental, 'opts.experimental');
+
+	var service = opts.service;
+
+	var noreprovision = opts.noreprovision ? true : false;
+	var experimental = opts.experimental ? true : false;
 
 	var cnid, dcnconf, svcconfig, svcid, svcname, actual;
 	var svcname2uuids = {};
@@ -3874,6 +3891,14 @@ maAdm.prototype.generatePlan = function (callback, service, noreprovision)
 	var self = this;
 	var log = this.ma_log;
 
+	/*
+	 * As we generate the plan, if we find that an operator is attempting to
+	 * newly deploy an instance of an experimental service, we add it to
+	 * this array. Then, if the 'experimental' option hasn't been specified
+	 * and this array is not empty, we return an error.
+	 */
+	var newExpServiceInsts = [];
+
 	if (service && !svcs.serviceNameIsValid(service)) {
 		callback(new VError('unrecognized service: "%s"', service));
 		return;
@@ -3927,6 +3952,13 @@ maAdm.prototype.generatePlan = function (callback, service, noreprovision)
 				if (count > 0) {
 					self.plan(cnid, svcname, key,
 					    'provision', count, 'more wanted');
+					if (svcs.serviceIsExperimental(
+					    svcname) &&
+					    newExpServiceInsts.indexOf(
+					    svcname) === -1) {
+						newExpServiceInsts.push(
+						    svcname);
+					}
 				} else if (count < 0) {
 					self.plan(cnid, svcname, key,
 					    'deprovision', -count,
@@ -3985,6 +4017,18 @@ maAdm.prototype.generatePlan = function (callback, service, noreprovision)
 		}
 	}
 
+	/*
+	 * Check for an attempt to deploy experimental services, as described
+	 * above.
+	 */
+	if (!experimental && newExpServiceInsts.length !== 0) {
+		callback(new VError('Experimental services cannot be ' +
+		    'deployed without the "--experimental" flag. The ' +
+		    'experimental services you are attempting to deploy are: ' +
+		    newExpServiceInsts.join(', ')));
+		return;
+	}
+
 	/*
 	 * Deprovision everything on CNs not specified at all in the new
 	 * configuration.
diff --git a/lib/services.js b/lib/services.js
index f97ec04..bd31e2c 100644
--- a/lib/services.js
+++ b/lib/services.js
@@ -26,6 +26,7 @@ var common = require('./common');
 exports.ServiceConfiguration = ServiceConfiguration;
 exports.serviceNameIsValid = serviceNameIsValid;
 exports.serviceIsSharded = serviceIsSharded;
+exports.serviceIsExperimental = serviceIsExperimental;
 exports.serviceSupportsOneach = serviceSupportsOneach;
 exports.serviceSupportsProbes = serviceSupportsProbes;
 exports.serviceConfigProperties = serviceConfigProperties;
@@ -61,6 +62,16 @@ var mSvcNames = [
     'electric-boray'
 ];
 
+/*
+ * "Experimental" services -- that is, services for which deployment is allowed
+ * only if the operator uses the "--experimental" flag with`manta-adm update`.
+ */
+var mSvcNamesExperimental = [
+	'boray',
+	'buckets-postgres',
+	'electric-boray'
+];
+
 /*
  * Defines configuration properties for all services.  We do not allow
  * manta-oneach to be used with "marlin" zones.
@@ -384,6 +395,15 @@ function serviceIsSharded(svcname)
 	return (mSvcConfigs[svcname].sharded);
 }
 
+/*
+ * Given a service name, return whether that service is experimental.
+ */
+function serviceIsExperimental(svcname)
+{
+	assertplus.ok(serviceNameIsValid(svcname));
+	return (mSvcNamesExperimental.indexOf(svcname) !== -1);
+}
+
 /*
  * Given a service name, return an array of the properties typically used to
  * group instances of this service.  For most services, this is just the "image"
