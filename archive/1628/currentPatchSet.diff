From 04b4de68b10a14ccb4fe8f5a6841ca2e214d3322 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Thu, 9 Mar 2017 00:03:04 +1100
Subject: [PATCH] PUBAPI-1362: When cloudapi can't get network_uuid for a NIC
 it refuses to return a machine or list of machines Reviewed by: Josh Wilsdon
 <jwilsdon@joyent.com>

---
 docs/index.md         | 25 ++++++++++++++
 lib/machines.js       | 21 +++++++++---
 package.json          |  2 +-
 test/machines.test.js | 80 +++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 122 insertions(+), 6 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index ed4ce71..ca12484 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -859,6 +859,13 @@ variable or the `--api-version=RANGE` option to each command.
 
 The rest of this section describes API changes in each version.
 
+## 8.2.1
+
+- GetMachine works with machines that do not have a package or a network. Such
+  machines cannot be created through CloudAPI, so this isn't applicable to most
+  people unless they have an operator do this for them. ListMachines no longer
+  breaks for such machines either.
+
 ## 8.2.0
 
 - This version adds support for {{shortId}} tags in the 'name' parameter when
@@ -3924,6 +3931,15 @@ credentials | Boolean  | Whether to include the generated credentials for instan
 Note that if the special input `tags=*` is provided, any other input will be
 completely ignored and the response will return all instances with any tag.
 
+Be aware that in the case of instances created with vmadm directly (i.e. not
+through CloudAPI), ips, networks, primaryIp and package may be in a different
+format than expected. The `ips` array can contain the value "dhcp", not just
+IP strings, the `networks` array can contain null values for networks that
+CloudAPI was unable to determine (e.g. as a result of a "dhcp" IP), `primaryIp`
+too can have the value of "dhcp", and the package string can be empty instead of
+a UUID. Unless ops is bypassing CloudAPI and creating instances directly, it is
+unlikely you need concern yourself with this caveat.
+
 ### Returns
 
 An array of instance objects, which contain:
@@ -4104,6 +4120,15 @@ compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
 dns_names   | Array[String] | DNS names of the instance (if the instance is using [CNS](https://docs.joyent.com/public-cloud/network/cns))
 
+Be aware that in the case of instances created with vmadm directly (i.e. not
+through CloudAPI), ips, networks, primaryIp and package may be in a different
+format than expected. The `ips` array can contain the value "dhcp", not just
+IP strings, the `networks` array can contain null values for networks that
+CloudAPI was unable to determine (e.g. as a result of a "dhcp" IP), `primaryIp`
+too can have the value of "dhcp", and the package string can be empty instead of
+a UUID. Unless ops is bypassing CloudAPI and creating instances directly, it is
+unlikely you need concern yourself with this caveat.
+
 ### Errors
 
 For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
diff --git a/lib/machines.js b/lib/machines.js
index 116c7f4..45a350d 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -876,16 +876,23 @@ function loadMachine(req, res, next) {
                     return cb(null, req.packages);
                 }
 
-                if (!machine.billing_id) {
-                    return cb(new ResourceNotFoundError('Cannot find ' +
-                        'machine package'));
+                var pkgUuid = machine.billing_id;
+
+                if (!pkgUuid) {
+                    req.log.warn('Ignoring missing billing_id');
+                    return cb();
                 }
 
-                return req.sdc.papi.get(machine.billing_id, {},
-                                        function (err, pkg) {
+                return req.sdc.papi.get(pkgUuid, {}, function (err, pkg) {
                     if (err) {
+                        if (err.name === 'ResourceNotFoundError') {
+                            req.log.warn('Ignoring missing package in papi:',
+                                pkgUuid);
+                            return cb();
+                        }
                         return cb(err);
                     }
+
                     req.packages = [pkg];
                     req.log.debug({'package': req.pkg},
                         'selected package loaded');
@@ -962,6 +969,10 @@ function loadNetworkUuids(req, machine, cb) {
 
         return napi.getNic(vmapiNic.mac, options, function (err, napiNic) {
             if (err) {
+                if (err.name === 'ResourceNotFoundError') {
+                    req.log.warn('Ignoring missing nic in napi:', vmapiNic.mac);
+                    return next();
+                }
                 return next(err);
             }
 
diff --git a/package.json b/package.json
index 1638e19..fef6f21 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "8.2.0",
+    "version": "8.2.1",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/test/machines.test.js b/test/machines.test.js
index 89a020d..2926df1 100644
--- a/test/machines.test.js
+++ b/test/machines.test.js
@@ -17,6 +17,7 @@ var addPackage = common.addPackage;
 var checkNotFound = common.checkNotFound;
 var machinesCommon = require('./machines/common');
 var checkMachine = machinesCommon.checkMachine;
+var waitForJob = machinesCommon.waitForJob;
 
 
 // --- Globals
@@ -1215,8 +1216,10 @@ test('CreateMachine with {{shortId}} in alias', function (t) {
     });
 });
 
+
 test('Wait For Running {{shortId}} machine', waitForRunning);
 
+
 test('Get {{shortId}} machine', function (t) {
     if (!MACHINE_UUID) {
         t.notOk('no MACHINE_UUID, cannot get');
@@ -1240,9 +1243,86 @@ test('Get {{shortId}} machine', function (t) {
     });
 });
 
+
 test('Delete {{shortId}} machine', deleteMachine);
 
 
+test('Create packageless machine', function (t) {
+    var ownerUuid = CLIENT.account.uuid;
+    var vmDescription = {
+        owner_uuid: ownerUuid,
+        alias: 'cloudapi-packageless-machine-test',
+        brand: 'joyent-minimal',
+        networks: [ {
+            uuid: '', // filled in below
+            primary: true
+        } ],
+        ram: 64,
+        cpu_cap: 50,
+        image_uuid: IMAGE_UUID
+    };
+
+    CLIENT.napi.listNetworks({ nic_tag: 'external' }, function (err, nets) {
+        t.ifError(err, 'listing external network');
+
+        vmDescription.networks[0].uuid = nets[0].uuid;
+
+        CLIENT.vmapi.createVm(vmDescription, function (err2, vm) {
+            t.ifError(err2, 'Creating packageless VM');
+
+            MACHINE_UUID = vm.vm_uuid;
+
+            t.end();
+        });
+    });
+});
+
+
+test('Wait for running packageless machine', waitForRunning);
+
+
+test('Remove nic from packageless machine', function (t) {
+    CLIENT.vmapi.getVm({ uuid: MACHINE_UUID }, function (err, vm) {
+        t.ifError(err, 'getting VM ' + MACHINE_UUID);
+
+        var nic = vm.nics[0];
+
+        CLIENT.vmapi.removeNics({
+            uuid: MACHINE_UUID,
+            macs: [nic.mac]
+        }, function (err2, job) {
+            t.ifError(err2, 'Removing nic ' + nic.mac);
+
+            waitForJob(CLIENT, job.job_uuid, function (err3) {
+                t.ifError(err3, 'waiting for job ' + job.job_uuid);
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('ListMachines with packageless/nicless machine', function (t) {
+    CLIENT.get('/my/machines', function (err, req, res, body) {
+        t.ifError(err, 'GET /my/machines error');
+        t.equal(res.statusCode, 200, 'GET /my/machines status');
+        t.ok(Array.isArray(body), 'GET /my/machines body is array');
+        t.ok(body.length, 'GET /my/machines list is not empty');
+
+        var testVm = body.filter(function (m) {
+            return m.id === MACHINE_UUID;
+        })[0];
+
+        t.ok(testVm, 'packageless/nicless VM listed successfully');
+
+        t.end();
+    });
+});
+
+
+test('Delete packageless/nicless machine', deleteMachine);
+
+
 test('teardown', function (t) {
     common.deletePackage(CLIENT, SDC_256, function () {
         common.deletePackage(CLIENT, SDC_256_INACTIVE, function () {
-- 
2.21.0

