From c48662b99453a5fc28b44c8ccbd87d7eac857429 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 11 Apr 2018 12:05:10 -0700
Subject: [PATCH] joyent/node-sshpk-agent#15 "failure" messages from agent
 should produce nicer errors

---
 lib/client.js | 53 +++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 43 insertions(+), 10 deletions(-)

diff --git a/lib/client.js b/lib/client.js
index 9aec5f7..91d8d57 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -26,7 +26,7 @@ Client.prototype.listKeys = function (opts, cb) {
 	assert.func(cb, 'callback');
 
 	var frame = {type: 'request-identities'};
-	var resps = ['identities-answer'];
+	var resps = ['identities-answer', 'failure'];
 
 	this.doRequest(frame, resps, timeout, function (err, resp) {
 		if (err) {
@@ -34,6 +34,14 @@ Client.prototype.listKeys = function (opts, cb) {
 			return;
 		}
 
+		if (resp.type === 'failure') {
+			cb(new Error('SSH agent returned "failure" to ' +
+			    '"request-identities". (Agent locked, or ' +
+			    'device not present?)'));
+			return;
+		}
+		assert.strictEqual(resp.type, 'identities-answer');
+
 		var keys = [];
 		for (var i = 0; i < resp.identities.length; ++i) {
 			var id = resp.identities[i];
@@ -71,7 +79,7 @@ Client.prototype.listCertificates = function (opts, cb) {
 	assert.func(cb, 'callback');
 
 	var frame = {type: 'request-identities'};
-	var resps = ['identities-answer'];
+	var resps = ['identities-answer', 'failure'];
 
 	this.doRequest(frame, resps, timeout, function (err, resp) {
 		if (err) {
@@ -79,6 +87,14 @@ Client.prototype.listCertificates = function (opts, cb) {
 			return;
 		}
 
+		if (resp.type === 'failure') {
+			cb(new Error('SSH agent returned "failure" to ' +
+			    '"request-identities". (Agent locked, or ' +
+			    'device not present?)'));
+			return;
+		}
+		assert.strictEqual(resp.type, 'identities-answer');
+
 		var certs = [];
 		for (var i = 0; i < resp.identities.length; ++i) {
 			var id = resp.identities[i];
@@ -136,10 +152,13 @@ Client.prototype.sign = function (key, data, opts, cb) {
 		}
 
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure, no ' +
-			    'reason given'));
+			cb(new Error('SSH agent returned "failure" ' +
+			    'code in response to "sign-request" ' +
+			    '(key not found, user refused confirmation, ' +
+			    'or other failure)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'sign-response');
 
 		try {
 			var sig = sshpk.parseSignature(resp.signature,
@@ -428,9 +447,11 @@ Client.prototype.addCertificate = function (cert, key, opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent add-identity command ' +
+			    'failed (not supported or invalid key?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
@@ -468,9 +489,12 @@ Client.prototype.addKey = function (key, opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent add-identity command ' +
+			    'failed (not supported, invalid key or ' +
+			    'constraint/expiry not supported?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
@@ -499,9 +523,12 @@ Client.prototype.removeKey = function (key, opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent remove-identity command ' +
+			    'failed (key not found, or operation not ' +
+			    'supported?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
@@ -525,9 +552,11 @@ Client.prototype.removeAllKeys = function (opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent remote-all-identities ' +
+			    'command failed (not supported?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
@@ -555,9 +584,11 @@ Client.prototype.lock = function (pw, opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent lock command failed ' +
+			    '(empty or invalid password?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
@@ -585,9 +616,11 @@ Client.prototype.unlock = function (pw, opts, cb) {
 			return;
 		}
 		if (resp.type === 'failure') {
-			cb(new Error('SSH agent returned failure'));
+			cb(new Error('SSH agent unlock command failed ' +
+			    '(invalid password?)'));
 			return;
 		}
+		assert.strictEqual(resp.type, 'success');
 		cb(null);
 	});
 };
-- 
2.21.0

