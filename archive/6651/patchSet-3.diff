From e71d62a107fc6a8f2da66e81d4b2b662911802ac Mon Sep 17 00:00:00 2001
From: Ryan Zezeski <rpz@joyent.com>
Date: Wed, 24 Jul 2019 09:58:59 -0600
Subject: [PATCH] OS-7904 simnet has bogus mi_tx_cksum_flags OS-7905 mac_tx()
 is too eager to emulate hardware offloads

---
 usr/src/uts/common/io/mac/mac_client.c   |  2 +-
 usr/src/uts/common/io/mac/mac_provider.c | 40 ++++++++++++++++++++++--
 usr/src/uts/common/io/simnet/simnet.c    |  6 ++++
 usr/src/uts/common/sys/mac_impl.h        |  2 +-
 usr/src/uts/common/sys/pattr.h           |  4 ++-
 5 files changed, 48 insertions(+), 6 deletions(-)

diff --git a/usr/src/uts/common/io/mac/mac_client.c b/usr/src/uts/common/io/mac/mac_client.c
index d2444094a9..5c60bc9563 100644
--- a/usr/src/uts/common/io/mac/mac_client.c
+++ b/usr/src/uts/common/io/mac/mac_client.c
@@ -3673,7 +3673,7 @@ mac_tx(mac_client_handle_t mch, mblk_t *mp_chain, uintptr_t hint,
 
 			mp->b_next = NULL;
 
-			if (needed != 0) {
+			if ((needed & (HCK_TX_FLAGS | HW_LSO_FLAGS)) != 0) {
 				mac_emul_t emul = 0;
 
 				if (needed & HCK_IPV4_HDRCKSUM)
diff --git a/usr/src/uts/common/io/mac/mac_provider.c b/usr/src/uts/common/io/mac/mac_provider.c
index 99f2f3431e..d99a885bcb 100644
--- a/usr/src/uts/common/io/mac/mac_provider.c
+++ b/usr/src/uts/common/io/mac/mac_provider.c
@@ -21,7 +21,7 @@
 
 /*
  * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  * Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
  */
 
@@ -1003,12 +1003,33 @@ mac_pdata_update(mac_handle_t mh, void *mac_pdata, size_t dsize)
 }
 
 /*
- * Invoked by driver as well as the framework to notify its capability change.
+ * The mac provider or mac frameowrk calls this function when it wants
+ * to notify upstream consumers that the capabilities have changed and
+ * that they should modify their own internal state accordingly.
+ *
+ * We currently have no regard for the fact that a provider could
+ * decide to drop capabilities which would invalidate pending traffic.
+ * For example, if one was to disable the Tx checksum offload while
+ * TCP/IP traffic was being sent by mac clients relying on that
+ * feature, then those packets would hit the write with missing or
+ * partial checksums. A proper solution involves not only providing
+ * notfication, but also performing client quiescing. That is, a capab
+ * change should be treated as an atomic transaction that forms a
+ * barrier between traffic relying on the current capabs and traffic
+ * relying on the new capabs. In practice, simnet is currently the
+ * only provider that could hit this, and it's an easily avoidable
+ * situation (and at worst it should only lead to some dropped
+ * packets). But if we ever want better on-the-fly capab change to
+ * actual hardware providers, then we should give this update
+ * mechanism a proper implementation.
  */
 void
 mac_capab_update(mac_handle_t mh)
 {
-	/* Send MAC_NOTE_CAPAB_CHG notification */
+	/*
+	 * Send a MAC_NOTE_CAPAB_CHG notification to alert upstream
+	 * clients to renegotiate capabilities.
+	 */
 	i_mac_notify((mac_impl_t *)mh, MAC_NOTE_CAPAB_CHG);
 }
 
@@ -1310,6 +1331,19 @@ i_mac_notify_thread(void *arg)
 			}
 		}
 
+		/*
+		 * Depending on which capabs have changed, the Tx
+		 * checksum flags may also need to be updated.
+		 */
+		if ((bits & (1 << MAC_NOTE_CAPAB_CHG)) != 0) {
+			mac_perim_handle_t mph;
+			mac_handle_t mh = (mac_handle_t)mip;
+
+			mac_perim_enter_by_mh(mh, &mph);
+			mip->mi_tx_cksum_flags = mac_features_to_flags(mh);
+			mac_perim_exit(mph);
+		}
+
 		/*
 		 * Do notification callbacks for each notification type.
 		 */
diff --git a/usr/src/uts/common/io/simnet/simnet.c b/usr/src/uts/common/io/simnet/simnet.c
index b169e519b1..3653ed12f0 100644
--- a/usr/src/uts/common/io/simnet/simnet.c
+++ b/usr/src/uts/common/io/simnet/simnet.c
@@ -1385,6 +1385,12 @@ simnet_m_setprop(void *arg, const char *name, mac_prop_id_t num,
 		break;
 	}
 
+	/*
+	 * We may have modified the configuration of hardware
+	 * offloads. Make sure to renegotiate capabilities with the
+	 * upstream clients.
+	 */
+	mac_capab_update(sdev->sd_mh);
 	return (err);
 }
 
diff --git a/usr/src/uts/common/sys/mac_impl.h b/usr/src/uts/common/sys/mac_impl.h
index 26c535fb42..21f2c10a8e 100644
--- a/usr/src/uts/common/sys/mac_impl.h
+++ b/usr/src/uts/common/sys/mac_impl.h
@@ -439,7 +439,7 @@ struct mac_impl_s {
 	mac_capab_led_t		mi_led;
 
 	/* Cache of the Tx DB_CKSUMFLAGS that this MAC supports. */
-	uint16_t		mi_tx_cksum_flags; /* WO */
+	uint16_t		mi_tx_cksum_flags; /* SL */
 
 	/*
 	 * MAC address and VLAN lists. SL protected.
diff --git a/usr/src/uts/common/sys/pattr.h b/usr/src/uts/common/sys/pattr.h
index 587a51f0aa..f04eb7c081 100644
--- a/usr/src/uts/common/sys/pattr.h
+++ b/usr/src/uts/common/sys/pattr.h
@@ -21,7 +21,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 #ifndef _SYS_PATTR_H
@@ -98,6 +98,8 @@ typedef struct pattr_hcksum_s {
 
 #define	HCK_FLAGS		(HCK_IPV4_HDRCKSUM | HCK_PARTIALCKSUM |	\
 				HCK_FULLCKSUM | HCK_FULLCKSUM_OK)
+#define	HCK_TX_FLAGS		(HCK_IPV4_HDRCKSUM | HCK_PARTIALCKSUM | \
+				HCK_FULLCKSUM)
 /*
  * Extended hardware offloading flags that also use hcksum_flags
  */
-- 
2.21.0

