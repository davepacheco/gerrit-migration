From 99bd766a6b9f7b3a7eab6830b8cabf844ac3f2c4 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Sat, 1 Dec 2018 07:03:57 +1030
Subject: [PATCH] TRITON-962 Add `CreateDisk`, `ResizeDisk` and `DeleteDisk`
 end-points to VMAPI

---
 docs/index.md        |  76 ++++++++++++++++-
 lib/endpoints/vms.js | 199 ++++++++++++++++++++++++++++++++++++++++++-
 lib/errors.js        |  79 ++++++++++++++++-
 package.json         |   2 +-
 4 files changed, 350 insertions(+), 6 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 1995bdd..6c50c0f 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -36,7 +36,7 @@ call, while some of them can only be set at VM creation time. In the next table,
 the column "VM Response Default" refers to attributes that are always going to
 be part of the VM response object. Those with a column value of 'No' are only
 going to be returned when set via CreateVm or UpdateVm. Finally, the last two
-columns specify wether or not some VM attributes can be set at creation or
+columns specify whether or not some VM attributes can be set at creation or
 update time.
 
 | Param                    | Type                          | Description                                                                                                                                                                                                               | Vm Response Default | Create | Update |
@@ -52,7 +52,13 @@ update time.
 | destroyed                | Date                          | The time at which the VM was destroyed in ISO 8601 format                                                                                                                                                                 | Yes                 | No     | No     |
 | datasets                 | Array                         | VM datasets                                                                                                                                                                                                               | Yes                 | No     | No     |
 | delegate_dataset         | Boolean                       | Delegate a data dataset to the VM                                                                                                                                                                                         | No                  | Yes    | No     |
-| dns_domain               | String                        | Search domain value for /etc/resolv.conf (max length 255 chars)                                                                                                                                                   | No                  | Yes    | No     |
+| disks                    | Array                         | Array of virtual disks (zvols) that are used by a bhyve VM.                                                                                                                                                               | No                  | No     | No     |
+| disks.*.path             | String                        | File path in GZ.                                                                                                                                                                                                          | No                  | No     | No     |
+| disks.*.size             | Number (MiB)                  | Size of disk.                                                                                                                                                                                                             | No                  | No     | No     |
+| disks.*.pci_slot         | String                        | Specifies the virtual PCI slot a disk occupies.                                                                                                                                                                           | No                  | No     | No     |
+| disks.*.boot             | Boolean                       | If this is a VM's boot disk.                                                                                                                                                                                              | No                  | No     | No     |
+| flexible_disk_size       | Number (MiB)                  | Maximum amount of space that can be used by the sum of all disks.                                                                                                                                                         | No                  | Yes    | No     |
+| dns_domain               | String                        | Search domain value for /etc/resolv.conf (max length 255 chars)                                                                                                                                                           | No                  | Yes    | No     |
 | do_not_inventory         | Boolean                       | The primary use-case of this attribute is for test VMs that are created but you don't want their existence propagated up to VMAPI since they'll be short-lived and its lifecycle will be physically managed in the server | No                  | Yes    | Yes    |
 | firewall_enabled         | Boolean                       | Enable firewall for the VM                                                                                                                                                                                                | Yes                 | Yes    | Yes    |
 | fs_allowed               | String (comma-separated list) | Filesystems allowed for the VM                                                                                                                                                                                            | No                  | Yes    | Yes    |
@@ -1427,6 +1433,72 @@ For removing NICs from a VM, a macs list parameter must be specified. This param
       -d macs=90:b8:d0:d9:f0:83 \
 
 
+## CreateDisk (POST /vms/:uuid?action=create_disk)
+
+Create a virtual disk and attach it to a bhyve VM. VM must be currently stopped,
+and have flexible_disk_size set.
+
+| Param | Type         | Description                                                                                                         |
+| ----- | ------------ | ------------------------------------------------------------------------------------------------------------------- |
+| size  | Number (MiB) | Size of new virtual disk. Can also use string "remaining" to use up all remaining free space in flexible_disk_size. |
+
+### Example of creating a new 5GiB virtual disk using a JSON payload
+
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=create_disk -d '{
+        "size": 5120
+    }'
+
+### Example with form parameters
+
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=create_disk \
+      -d size=5120
+
+
+## ResizeDisk (POST /vms/:uuid?action=resize_disk)
+
+Resizes one of the virtual disks on a bhyve VM. VM must be currently stopped,
+and have flexible_disk_size set.
+
+| Param                  | Type         | Description                             |
+| ---------------------- | ------------ | --------------------------------------- |
+| slot                   | String       | Name of the virtual disk (e.g. "disk1") |
+| size                   | Number (MiB) | Size to change the virtual disk to      |
+| dangerous_allow_shrink | Boolean      | Since resizing down potentially causes data loss due to internal filesystem truncation, this must be set when shrinking a disk. |
+
+### Example: resizing virtual disk "disk1" up to 10GiB using a JSON payload
+
+    POST /vms/0cb0f7b1-b092-4252-b205-c9c268bfa148?action=resize_disk -d '{
+      "slot": "disk1",
+      "size": 10240
+    }'
+
+### Example with form parameters
+
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=resize_disk \
+      -d slot=disk1 -d size=10240
+
+
+## DeleteDisk (POST /vms/:uuid?action=delete_disk)
+
+Removes and deletes a virtual disk from a bhyve VM. VM must currently be
+stopped, and have flexible_disk_size set.
+
+| Param | Type   | Description                                   |
+| ----- | ------ | --------------------------------------------- |
+| slot  | String | Name of virtual disk to delete (e.g. "disk1") |
+
+### Example with a JSON payload
+
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=delete_disk -d '{
+      "slot": "disk2"
+    }'
+
+### Example with form parameters
+
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=delete_disk \
+      -d slot=disk2
+
+
 ## CreateSnapshot (POST /vms/:uuid?action=create_snapshot)
 
 If a name for the snapshot is not specified, VMAPI will generate a timestamp for its name with the UTC ISO date/time format (without colons or dashes):
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index c239556..2be7b49 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -39,7 +39,10 @@ var VALID_VM_ACTIONS = [
     'remove_nics',
     'create_snapshot',
     'rollback_snapshot',
-    'delete_snapshot'
+    'delete_snapshot',
+    'create_disk',
+    'resize_disk',
+    'delete_disk'
 ];
 
 
@@ -493,6 +496,15 @@ function updateVm(req, res, next) {
         case 'delete_snapshot':
             method = deleteSnapshot;
             break;
+        case 'create_disk':
+            method = createDisk;
+            break;
+        case 'resize_disk':
+            method = resizeDisk;
+            break;
+        case 'delete_disk':
+            method = deleteDisk;
+            break;
         default:
             error = [ errors.invalidParamErr('action') ];
             return next(new errors.ValidationFailedError('Invalid Parameters',
@@ -820,6 +832,191 @@ function removeNics(req, res, next) {
 }
 
 
+
+/*
+ * Add disk to a VM
+ */
+function createDisk(req, res, next) {
+    var params = req.params;
+    var size = params.size;
+    var vm = req.vm;
+    var paramErr;
+
+    req.log.trace({ vm_uuid: vm.uuid }, 'CreateDisk start');
+
+    var currentAggrSize = vm.disks.reduce(function addSize(acc, disk) {
+        return acc + disk.size;
+    }, 0);
+
+    if (isNaN(size) && size !== 'remaining') {
+        paramErr = [ errors.invalidParamErr('size', 'Not a valid value') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    } else if (vm.brand !== 'bhyve') {
+        next(new errors.BrandNotSupportedError('Can only create disks on ' +
+            'bhyve VMs'));
+        return;
+    } else if (!vm.flexible_disk_size) {
+        next(new errors.VmWithoutFlexibleDiskSizeError());
+        return;
+    } else if (vm.state !== 'stopped') {
+        next(new errors.VmNotStoppedError());
+        return;
+    } else if (size !== 'remaining' &&
+               currentAggrSize + size > vm.flexible_disk_size) {
+        next(new errors.InsufficientDiskSpaceError());
+        return;
+    }
+
+    var args = {
+        subtask: 'create_disk',
+        add_disks: [ {
+            size: size,
+            model: 'virtio'
+        } ]
+    };
+
+    req.app.wfapi.createUpdateJob(req, args, function onDiskJob(err, juuid) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        handleUpdateVMResponse(req, res, next, juuid);
+    });
+}
+
+
+
+/*
+ * Resize a VM's disk
+ */
+function resizeDisk(req, res, next) {
+    var params = req.params;
+    var size = +params.size;
+    var slot = params.slot;
+    var shrink = params.dangerous_allow_shrink;
+    var vm = req.vm;
+    var paramErr;
+
+    req.log.trace({ vm_uuid: vm.uuid }, 'ResizeDisk start');
+
+    var path = '/dev/zvol/rdsk/' + vm.zpool + '/' + vm.uuid + '/' + slot;
+
+    var found = vm.disks.filter(function matchPath(disk) {
+        return disk.path === path;
+    })[0];
+
+    var aggrSize = vm.disks.reduce(function addSize(acc, disk) {
+        return acc + disk.size;
+    }, 0);
+
+    if (!found) {
+        next(new restify.ResourceNotFoundError('Disk not found'));
+        return;
+    } else if (isNaN(size)) {
+        paramErr = [ errors.invalidParamErr('size', 'Not a valid number') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    } else if (shrink !== undefined && typeof (shrink) !== 'boolean') {
+        paramErr = [ errors.invalidParamErr('dangerous_allow_shrink', 'Not a ' +
+                     'boolean') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    } else if (vm.brand !== 'bhyve') {
+        next(new errors.BrandNotSupportedError('Can only resize disks on ' +
+             'bhyve VMs'));
+        return;
+    } else if (!vm.flexible_disk_size) {
+        next(new errors.VmWithoutFlexibleDiskSizeError());
+        return;
+    } else if (vm.state !== 'stopped') {
+        next(new errors.VmNotStoppedError());
+        return;
+    } else if (found.size > size && !shrink) {
+        paramErr = [ errors.invalidParamErr('size', 'Reducing disk size is a ' +
+                     'dangerous operation') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    } else if (aggrSize - found.size + size > vm.flexible_disk_size) {
+        next(new errors.InsufficientDiskSpaceError());
+        return;
+    }
+
+    var args = {
+        subtask: 'resize_disk',
+        update_disks: [ {
+            path: path,
+            size: size,
+            dangerous_allow_shrink: shrink || false
+        } ]
+    };
+
+    req.app.wfapi.createUpdateJob(req, args, function onDiskJob(err, juuid) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        handleUpdateVMResponse(req, res, next, juuid);
+    });
+}
+
+
+
+/*
+ * Removes a disk from a VM
+ */
+function deleteDisk(req, res, next) {
+    var params = req.params;
+    var slot = params.slot;
+    var vm = req.vm;
+
+    req.log.trace({ vm_uuid: vm.uuid }, 'DeleteDisk start');
+
+    var path = '/dev/zvol/rdsk/' + vm.zpool + '/' + vm.uuid + '/' + slot;
+
+    var found = vm.disks.filter(function matchPath(disk) {
+        return disk.path === path;
+    })[0];
+
+    if (!found) {
+        next(new restify.ResourceNotFoundError('Disk not found'));
+        return;
+    } else if (found.boot) {
+        var  paramErr = [ errors.invalidParamErr('slot', 'Cannot remove boot ' +
+                          'disk') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    } else if (vm.brand !== 'bhyve') {
+        next(new errors.BrandNotSupportedError('Can only delete disks on ' +
+            'bhyve VMs'));
+        return;
+    } else if (!vm.flexible_disk_size) {
+        next(new errors.VmWithoutFlexibleDiskSizeError());
+        return;
+    } else if (vm.state !== 'stopped') {
+        next(new errors.VmNotStoppedError());
+        return;
+    }
+
+    var args = {
+        subtask: 'delete_disk',
+        remove_disks: [path]
+    };
+
+    req.app.wfapi.createUpdateJob(req, args, function onDiskJob(err, juuid) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        handleUpdateVMResponse(req, res, next, juuid);
+    });
+}
+
+
+
 /*
  * Deletes a vm
  */
diff --git a/lib/errors.js b/lib/errors.js
index e038af7..2d9f107 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -53,7 +53,8 @@ function VmNotRunningError() {
         statusCode: this.constructor.statusCode,
         message: 'VM not running',
         body: {
-            code: this.constructor.restCode
+            code: this.constructor.restCode,
+            message: 'VM not running'
         }
     });
 }
@@ -65,6 +66,76 @@ VmNotRunningError.statusCode = 409;
 
 
 
+/*
+ *  Return this error when we try to do something that only makes sense on a
+ *  stopped container.
+ */
+function VmNotStoppedError() {
+    restify.RestError.call(this, {
+        restCode: this.constructor.restCode,
+        statusCode: this.constructor.statusCode,
+        message: 'VM not stopped',
+        body: {
+            code: this.constructor.restCode,
+            message: 'VM not stopped'
+        }
+    });
+}
+
+util.inherits(VmNotStoppedError, restify.ResourceNotFoundError);
+VmNotStoppedError.prototype.name = 'VmNotStoppedError';
+VmNotStoppedError.restCode = 'VmNotStopped';
+VmNotStoppedError.statusCode = 409;
+
+
+
+/*
+ *  Return this error when we try to do something that only makes sense on a
+ *  container with flexible disk sizing enabled.
+ */
+function VmWithoutFlexibleDiskSizeError() {
+    restify.RestError.call(this, {
+        restCode: this.constructor.restCode,
+        statusCode: this.constructor.statusCode,
+        message: 'VM does not have flexible disk sizing enabled',
+        body: {
+            code: this.constructor.restCode,
+            message: 'VM does not have flexible disk sizing enabled'
+        }
+    });
+}
+
+util.inherits(VmWithoutFlexibleDiskSizeError, restify.ResourceNotFoundError);
+VmWithoutFlexibleDiskSizeError.prototype.name =
+    'VmWithoutFlexibleDiskSizeError';
+VmWithoutFlexibleDiskSizeError.restCode = 'VmWithoutFlexibleDiskSize';
+VmWithoutFlexibleDiskSizeError.statusCode = 409;
+
+
+
+/*
+ *  Return this error when we try to do something that only makes sense on a
+ *  container with flexible disk sizing enabled.
+ */
+function InsufficientDiskSpaceError() {
+    restify.RestError.call(this, {
+        restCode: this.constructor.restCode,
+        statusCode: this.constructor.statusCode,
+        message: 'VM does not have sufficient free disk',
+        body: {
+            code: this.constructor.restCode,
+            message: 'VM does not have sufficient free disk'
+        }
+    });
+}
+
+util.inherits(InsufficientDiskSpaceError, restify.ResourceNotFoundError);
+InsufficientDiskSpaceError.prototype.name = 'InsufficientDiskSpaceError';
+InsufficientDiskSpaceError.restCode = 'InsufficientDiskSpace';
+InsufficientDiskSpaceError.statusCode = 409;
+
+
+
 /*
  * This error is produced when trying to call an action on a brand that doesn't
  * support it
@@ -230,6 +301,10 @@ exports.UnallocatedVMError = UnallocatedVMError;
 exports.ValidationFailedError = ValidationFailedError;
 exports.BrandNotSupportedError = BrandNotSupportedError;
 exports.VmNotRunningError = VmNotRunningError;
+exports.VmNotStoppedError = VmNotStoppedError;
+exports.VmWithoutFlexibleDiskSizeError = VmWithoutFlexibleDiskSizeError;
+exports.InsufficientDiskSpaceError = InsufficientDiskSpaceError;
+
 
 function MorayBucketsNotSetupError(lastInitError) {
     assert.optionalObject(lastInitError, 'lastInitError');
@@ -339,4 +414,4 @@ util.inherits(VolumesNotReachableError, restify.RestError);
 exports.VolumesNotReachableError = VolumesNotReachableError;
 VolumesNotReachableError.prototype.name = 'VolumesNotReachableError';
 VolumesNotReachableError.restCode = 'VolumesNotReachable';
-VolumesNotReachableError.statusCode = 409;
\ No newline at end of file
+VolumesNotReachableError.statusCode = 409;
diff --git a/package.json b/package.json
index a4df7f3..f803b9e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.6.6",
+  "version": "9.7.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

