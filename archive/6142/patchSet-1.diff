commit b3fc944ec22af0b506dc3c90ecc1ca6cff6c1e5d
Author: Isaac Davis <isaac.davis@joyent.com>
Date:   2019-04-22T18:22:28+00:00 (6 months ago)
    
    TRITON-1625 Have `sdcadm post-setup prometheus` add prometheus zone IP to CNS allow_transfer list
    TRITON-1624 Change prometheus image name to "manta-prometheus" in sdcadm

diff --git a/CHANGES.md b/CHANGES.md
index 31bd246..d981033 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 # sdcadm Changelog
 
+## 1.27.0
+
+- TRITON-1625 Have `sdcadm post-setup prometheus` add prometheus zone IP to CNS allow_transfer list
+- TRITON-1624 Change prometheus image name to "manta-prometheus" in sdcadm
+
 ## 1.26.0
 
 - MANTA-3552 Add `sdcadm post-setup prometheus` to setup a core Triton
diff --git a/etc/defaults.json b/etc/defaults.json
index b9288fc..283bf92 100644
--- a/etc/defaults.json
+++ b/etc/defaults.json
@@ -47,7 +47,7 @@
         "volapi": "volapi",
         "logarchiver": "logarchiver",
         "kbmapi": "kbmapi",
-        "prometheus": "prometheus"
+        "prometheus": "manta-prometheus"
     },
     "svcMinImages": {
         "binder": "20140731T211135Z",
diff --git a/lib/post-setup/prometheus.js b/lib/post-setup/prometheus.js
index 52efe70..c7298d7 100644
--- a/lib/post-setup/prometheus.js
+++ b/lib/post-setup/prometheus.js
@@ -12,6 +12,9 @@
  * The 'sdcadm post-setup prometheus' CLI subcommand.
  */
 
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
 var errors = require('../errors');
 var AddServiceProc = require('../procedures/add-service').AddServiceProcedure;
 var runProcs = require('../procedures').runProcs;
@@ -35,7 +38,7 @@ function do_prometheus(subcmd, opts, args, cb) {
             {name: 'admin'},
             // Prometheus needs to be on the external to properly work with
             // CMON's Triton service discovery and CNS -- at least until CNS
-            // support split horizon DNS to provide separate records on the
+            // supports split horizon DNS to provide separate records on the
             // admin network.
             //
             // Triton's Prometheus instances will therefore have a NIC on CMON's
@@ -70,7 +73,97 @@ function do_prometheus(subcmd, opts, args, cb) {
         ui: self.ui,
         dryRun: opts.dry_run,
         skipConfirm: opts.yes
-    }, cb);
+    }, function addedService(err) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        /*
+         * If we aborted before creating the vm or retrieving the existing vm,
+         * we don't attempt to add it to the allow_transfer list. This can
+         * happen, for example, if the user answers "no" at the confirmation
+         * prompt.
+         */
+        if (proc.svcVm) {
+            add_cns_allow_transfer(proc.svcVm, cb);
+        }
+    });
+
+    /*
+     * Adds the Prometheus vm's admin IP to CNS's list of IPs that are allowed
+     * to issue AXFR/IXFR requests, if the IP is not already in the list.
+     */
+    function add_cns_allow_transfer(vm, callback) {
+        var sapi = self.sdcadm.sapi;
+
+        /*
+         * Get the admin IP of the Prometheus vm
+         */
+        var ip;
+        for (var i = 0; i < vm.nics.length; i++) {
+            var nic = vm.nics[i];
+            if (nic.nic_tag === 'admin') {
+                ip = nic.ip;
+            }
+        }
+        if (ip === undefined) {
+            callback(new errors.InternalError(
+                'Prometheus vm %s has no admin ip', vm.uuid));
+            return;
+        }
+
+        self.ui.info('Prometheus admin IP: ' + ip);
+
+        vasync.pipeline({
+            // ctx
+            arg: {},
+            funcs: [
+                function getCnsSvc(ctx, next) {
+                    sapi.listServices({
+                        name: 'cns',
+                        application: self.sdcadm.sdcApp.uuid
+                    }, function gotCnsSvc(err, svcs) {
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        assert.equal(svcs.length, 1, 'svcs.length == 1');
+                        ctx.cnsSvc = svcs[0];
+                        next();
+                    });
+                },
+                /*
+                 * Update the cns service with the Prometheus vm's admin IP, if
+                 * necessary.
+                 */
+                function updateCnsSvc(ctx, next) {
+                    var existingIps = ctx.cnsSvc.metadata.allow_transfer;
+                    if (existingIps.indexOf(ip) > -1) {
+                        self.ui.info('Prometheus admin IP already in CNS ' +
+                            'allow_transfer list; not adding');
+                        next();
+                        return;
+                    }
+                    existingIps.push(ip);
+                    sapi.updateService(ctx.cnsSvc.uuid, {
+                        metadata: {
+                            allow_transfer: existingIps
+                        }
+                    }, function updatedCnsSvc(err, _) {
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        self.ui.info('Added Prometheus admin IP to CNS ' +
+                            'allow_transfer list');
+                        next();
+                    });
+                }
+            ]
+        }, function done(err) {
+            callback(err);
+        });
+    }
 }
 
 do_prometheus.options = [
diff --git a/lib/procedures/add-service.js b/lib/procedures/add-service.js
index e238b56..328cb48 100644
--- a/lib/procedures/add-service.js
+++ b/lib/procedures/add-service.js
@@ -610,7 +610,16 @@ AddServiceProcedure.prototype.execute = function addServiceExecute(opts, cb) {
                     ui.info('Created VM %s (%s)', inst.uuid,
                         inst.params.alias);
                     self.svcInst = inst;
-                    next();
+                    sdcadm.vmapi.getVm({
+                        uuid: self.svcInst.uuid
+                    }, function getVmCb(vmErr, vm) {
+                        if (vmErr) {
+                            next(vmErr);
+                            return;
+                        }
+                        self.svcVm = vm;
+                        next();
+                    });
                 });
             }
 
diff --git a/package.json b/package.json
index 22a20e4..13cf54c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a Triton Data Center",
-  "version": "1.26.0",
+  "version": "1.27.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
