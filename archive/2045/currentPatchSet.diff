commit 82c49db933ee52e18174788f7a4cdb6072075fc0 (refs/changes/45/2045/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-06-06T19:11:22+02:00 (2 years, 4 months ago)
    
    WORKFLOW-218 Update workflow to node-moray v3
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>
    Approved by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/lib/workflow-moray-backend.js b/lib/workflow-moray-backend.js
index 9cfec91..1c5151d 100644
--- a/lib/workflow-moray-backend.js
+++ b/lib/workflow-moray-backend.js
@@ -11,6 +11,7 @@
 var util = require('util');
 var moray = require('moray');
 var vasync = require('vasync');
+var verror = require('verror');
 var jsprim = require('jsprim');
 var Logger = require('bunyan');
 var wf = require('wf');
@@ -20,6 +21,8 @@ var sprintf = util.format;
 
 var bu = require('./wf-buckets-definition');
 
+var hasCause = verror.hasCauseWithName;
+
 // Returns true when "obj" (Object) has all the properties "kv" (Object) has,
 // and with exactly the same values, otherwise, false
 function hasPropsAndVals(obj, kv) {
@@ -106,26 +109,26 @@ var WorkflowMorayBackend = module.exports = function (config) {
     backend._bucketExists = _bucketExists;
 
     function _createBucket(name, next) {
-        return _bucketExists(name, function (exists) {
+        _bucketExists(name, function (exists) {
             if (!exists) {
                 buckets[name].options = {
                     version: config.version
                 };
-                return client.putBucket(name, buckets[name], function (err) {
+                client.putBucket(name, buckets[name], function (err) {
                     if (err) {
                         var msg = sprintf('Error creating bucket %s.', name);
-                        if (err.name === 'BucketVersionError') {
+                        if (hasCause(err, 'BucketVersionError')) {
                             msg = msg +
                             ' Cannot update a bucket to an older version';
                         }
                         log.error({err: err}, msg);
-                        return next(err);
-                    } else {
-                        return next(null, true);
+                        next(err);
+                        return;
                     }
+                    next(null, true);
                 });
             } else {
-                return next(null, false);
+                next(null, false);
             }
         });
     }
@@ -367,11 +370,12 @@ var WorkflowMorayBackend = module.exports = function (config) {
 
         _validateJob(job, function (err) {
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
 
             try {
-                return client.putObject('wf_jobs', uuid, job, opts,
+                client.putObject('wf_jobs', uuid, job, opts,
                         function (err) {
                     job.uuid = uuid;
                     if (err) {
@@ -380,27 +384,29 @@ var WorkflowMorayBackend = module.exports = function (config) {
                             job: job,
                             opts: opts
                         }, 'PUT job error');
-                        if (err.name === 'UniqueAttributeError') {
-                            return callback(
+                        if (hasCause(err, 'UniqueAttributeError')) {
+                            callback(
                               new wf.BackendInvalidArgumentError(err.message));
-                        } else if (err.name === 'EtagConflictError') {
-                            return callback(
-                                new wf.BackendPreconditionFailedError(
+                            return;
+                        } else if (hasCause(err, 'EtagConflictError')) {
+                            callback(new wf.BackendPreconditionFailedError(
                               'Job has been locked by another runner'));
+                            return;
                         } else {
-                            return callback(
-                                new wf.BackendInternalError(err.message));
+                            callback(new wf.BackendInternalError(err.message));
+                            return;
                         }
                     } else {
-                        return _decodeJob(job, true, function (j) {
+                        _decodeJob(job, true, function (j) {
                             callback(null, j);
                         });
+                        return;
                     }
                 });
 
             } catch (e) {
                 log.error(e, 'Exception trying to put Job to Moray');
-                return callback(new wf.BackendInternalError(e.message));
+                callback(new wf.BackendInternalError(e.message));
             }
 
         });
@@ -465,16 +471,15 @@ var WorkflowMorayBackend = module.exports = function (config) {
             workflow.uuid = uuid;
             if (err) {
                 log.error({err: err}, 'createWorkflow error');
-                if (err.name === 'UniqueAttributeError') {
-                    return cb(
-                      new wf.BackendInvalidArgumentError(err.message));
-                } else {
-                    return cb(new wf.BackendInternalError(err.message));
+                if (hasCause(err, 'UniqueAttributeError')) {
+                    cb(new wf.BackendInvalidArgumentError(err.message));
+                    return;
                 }
+                cb(new wf.BackendInternalError(err.message));
             } else {
                 workflow = definitions.wf_workflows.decode(workflow,
                     definitions.wf_workflows.fields);
-                return cb(null, workflow);
+                cb(null, workflow);
             }
         });
     }
@@ -501,14 +506,13 @@ var WorkflowMorayBackend = module.exports = function (config) {
 
         client.getObject('wf_workflows', uuid, meta, function (err, obj) {
             if (err) {
-                if (err.name === 'ObjectNotFoundError' ||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Workflow with uuid \'%s\' does not exist', uuid)));
-                } else {
-                    log.error({err: err}, 'getWorkflow Error');
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                log.error({err: err}, 'getWorkflow Error');
+                callback(new wf.BackendInternalError(err.message));
             } else {
                 workflow = obj.value;
                 workflow = definitions.wf_workflows.decode(workflow,
@@ -516,7 +520,7 @@ var WorkflowMorayBackend = module.exports = function (config) {
                 // We're saving the uuid as key,
                 // need to add it back to the workflow:
                 workflow.uuid = uuid;
-                return callback(null, workflow);
+                callback(null, workflow);
             }
         });
     }
@@ -580,34 +584,32 @@ var WorkflowMorayBackend = module.exports = function (config) {
                     log.error({err: err}, 'updateWorkflow error');
                     // Whatever the result, undo the delete(workflow.uuid) trick
                     workflow.uuid = uuid;
-                    if (err.name === 'ObjectNotFoundError'||
-                        err.message.indexOf('does not exist') !== -1) {
-                        return cb(new wf.BackendResourceNotFoundError(sprintf(
+                    if (hasCause(err, 'ObjectNotFoundError')) {
+                        cb(new wf.BackendResourceNotFoundError(sprintf(
                           'Workflow with uuid \'%s\' does not exist', uuid)));
-                    } else {
-                        return cb(new wf.BackendInternalError(err.message));
+                        return;
                     }
+                    cb(new wf.BackendInternalError(err.message));
                 } else {
-                    return client.putObject('wf_workflows', uuid, workflow,
+                    client.putObject('wf_workflows', uuid, workflow,
                         meta, function (err) {
                             // Whatever the result, undo delete(workflow.uuid)
                             // trick
                             workflow.uuid = uuid;
                             if (err) {
                                 log.error({err: err}, 'Update workflow error');
-                                if (err.code === 'Invalid Argument') {
-                                    return cb(
+                                if (hasCause(err, 'UniqueAttributeError')) {
+                                    cb(
                                         new wf.BackendInvalidArgumentError(
                                             err.message));
-                                } else {
-                                    return cb(
-                                      new wf.BackendInternalError(err.message));
+                                    return;
                                 }
-                            } else {
-                                workflow = definitions.wf_workflows.decode(
-                                    workflow, definitions.wf_workflows.fields);
-                                return cb(null, workflow);
-                              }
+                                cb(new wf.BackendInternalError(err.message));
+                                return;
+                            }
+                            workflow = definitions.wf_workflows.decode(
+                                workflow, definitions.wf_workflows.fields);
+                            cb(null, workflow);
                         });
                 }
             });
@@ -673,8 +675,9 @@ var WorkflowMorayBackend = module.exports = function (config) {
         }
 
         if (typeof (uuid) === 'undefined') {
-            return callback(new wf.BackendInternalError(
+            callback(new wf.BackendInternalError(
                   'WorkflowMorayBackend.getJob uuid(String) required'));
+            return;
         }
 
         if (!meta.req_id) {
@@ -682,21 +685,20 @@ var WorkflowMorayBackend = module.exports = function (config) {
         }
 
         var job;
-        return client.getObject('wf_jobs', uuid, meta, function (err, obj) {
+        client.getObject('wf_jobs', uuid, meta, function (err, obj) {
             if (err) {
-                if (err.name === 'ObjectNotFoundError'||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Job with uuid \'%s\' does not exist', uuid)));
-                } else {
-                    log.error({err: err}, 'getJob Error');
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                log.error({err: err}, 'getJob Error');
+                callback(new wf.BackendInternalError(err.message));
             } else {
                 job = obj.value;
                 job.uuid = uuid;
-                return _decodeJob(job, true, function (j) {
-                    return callback(null, j);
+                _decodeJob(job, true, function (j) {
+                    callback(null, j);
                 });
             }
         });
@@ -944,31 +946,32 @@ var WorkflowMorayBackend = module.exports = function (config) {
         return client.getObject('wf_jobs', uuid, meta, function (err, obj) {
             if (err) {
                 log.error({err: err}, 'getObject error');
-                if (err.name === 'ObjectNotFoundError'||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Job with uuid \'%s\' does not exist', uuid)));
-                } else {
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                callback(new wf.BackendInternalError(err.message));
             } else {
                 job = obj.value;
                 etag = obj._etag;
-                return _decodeJob(job, true, function (j) {
+                _decodeJob(job, true, function (j) {
                     theJob = j;
                     if (theJob.execution !== 'queued') {
-                        return callback(new wf.BackendPreconditionFailedError(
+                        callback(new wf.BackendPreconditionFailedError(
                             'Only queued jobs can run'));
+                        return;
                     } else if (theJob.runner_id) {
-                        return callback(new wf.BackendPreconditionFailedError(
+                        callback(new wf.BackendPreconditionFailedError(
                           'Job is already locked by runner: ' + job.runner_id));
+                        return;
                     } else {
                         theJob.execution = 'running';
                         theJob.runner_id = runner_id;
-                        return _putJob(uuid, theJob, {
+                        _putJob(uuid, theJob, {
                             etag: etag
                         }, function (err, obj) {
-                            return callback(err, theJob);
+                            callback(err, theJob);
                         });
                     }
                 });
@@ -1245,16 +1248,15 @@ var WorkflowMorayBackend = module.exports = function (config) {
             var runner;
             if (err) {
                 log.error({err: err}, 'getRunner error');
-                if (err.name === 'ObjectNotFoundError'||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Runner with id \'%s\' does not exist', runner_id)));
-                } else {
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                callback(new wf.BackendInternalError(err.message));
             } else {
                 runner = obj.value;
-                return callback(null, new Date(runner.active_at));
+                callback(null, new Date(runner.active_at));
             }
         });
     }
@@ -1296,25 +1298,24 @@ var WorkflowMorayBackend = module.exports = function (config) {
         client.getObject('wf_runners', runner_id, function (err, obj) {
             if (err) {
                 log.error({err: err}, 'idleRunner error');
-                if (err.name === 'ObjectNotFoundError'||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Runner with id \'%s\' does not exist', runner_id)));
-                } else {
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                callback(new wf.BackendInternalError(err.message));
             } else {
                 runner = obj.value;
-                return client.putObject('wf_runners', runner_id, {
+                client.putObject('wf_runners', runner_id, {
                     active_at: runner.active_at,
                     idle: true
                 }, function (err) {
                         if (err) {
                             log.error({err: err}, 'idleRunner putObject error');
-                            return callback(new wf.BackendInternalError(err));
-                        } else {
-                            return callback(null);
+                            callback(new wf.BackendInternalError(err));
+                            return;
                         }
+                        callback(null);
                 });
             }
         });
@@ -1767,13 +1768,13 @@ var WorkflowMorayBackend = module.exports = function (config) {
         client.getObject('wf_jobs', uuid, meta, function (err, obj) {
             if (err) {
                 log.error({err: err}, 'addInfo error');
-                if (err.name === 'ObjectNotFoundError'||
-                    err.message.indexOf('does not exist') !== -1) {
-                    return callback(new wf.BackendResourceNotFoundError(sprintf(
+                if (hasCause(err, 'ObjectNotFoundError')) {
+                    callback(new wf.BackendResourceNotFoundError(sprintf(
                       'Job with uuid \'%s\' does not exist', uuid)));
-                } else {
-                    return callback(new wf.BackendInternalError(err.message));
+                    return;
                 }
+                callback(new wf.BackendInternalError(err.message));
+                return;
             } else {
                 var o = {
                     job_uuid: uuid,
@@ -1782,19 +1783,18 @@ var WorkflowMorayBackend = module.exports = function (config) {
                 };
                 o = definitions.wf_jobs_info.encode(o);
 
-                return client.putObject('wf_jobs_info', uuidV4(), o, meta,
+                client.putObject('wf_jobs_info', uuidV4(), o, meta,
                     function (err) {
                     if (err) {
                         log.error({err: err}, 'addInfo error');
                         if (err.code === 'Invalid Argument') {
-                            return callback(
+                            callback(
                               new wf.BackendInvalidArgumentError(err.message));
-                        } else {
-                            return callback(
-                              new wf.BackendInternalError(err.message));
+                            return;
                         }
+                        callback(new wf.BackendInternalError(err.message));
                     } else {
-                        return callback(null);
+                        callback(null);
                     }
                 });
             }
diff --git a/package.json b/package.json
index 481b395..f8bd5f3 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   "author": "Pedro Palazón Candel <kusorbox@gmail.com> (http://www.joyent.com)",
   "name": "wf-moray-backend",
   "description": "A backend for wf built over Moray",
-  "version": "1.0.0",
+  "version": "1.1.0",
   "private": true,
   "homepage": "https://github.com/joyent/node-workflow-moray-backend",
   "repository": {
@@ -22,7 +22,8 @@
     "uuid": "3.0.1",
     "wf": "git+https://github.com/joyent/node-workflow.git#aac927e4",
     "vasync": "1.6.4",
-    "jsprim": "^1.3.1"
+    "jsprim": "^1.3.1",
+    "verror": "1.10.0"
   },
   "optionalDependencies": {
       "dtrace-provider": "0.8.2"
