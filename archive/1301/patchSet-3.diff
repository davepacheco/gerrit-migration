commit b1cff0f4c560bb0e62008c051c334e82dbdf8511 (refs/changes/01/1301/3)
Author: Angela Fong <angela.fong@joyent.com>
Date:   2017-03-22T07:32:14+00:00 (2 years, 7 months ago)
    
    ADMINUI-2352 Want Ability to Force VM's From Provisioning State in AdminUI

diff --git a/lib/utils.js b/lib/utils.js
index f75331ca..6bda2590 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -1,4 +1,5 @@
 var _ = require('underscore');
+var format = require('util').format;
 
 module.exports = {
     filterTraits: function (params, items) {
@@ -26,5 +27,32 @@ module.exports = {
             }
             return result.length;
         });
+    },
+
+    /**
+     * Convert a boolean or string representation into a boolean, or
+     * raise TypeError trying.
+     *
+     * @param value {Boolean|String} The input value to convert.
+     * @param default_ {Boolean} The default value is `value` is undefined.
+     * @param errName {String} The context to quote in the possibly
+     *      raised TypeError.
+     */
+    boolFromString: function (value, default_, errName) {
+        if (value === undefined) {
+            return default_;
+        } else if (value === 'false' || value === '0') {
+            return false;
+        } else if (value === 'true' || value === '1') {
+            return true;
+        } else if (typeof (value) === 'boolean') {
+            return value;
+        } else {
+            var errmsg = format('invalid boolean value: %j', value);
+            if (errName) {
+                errmsg = format('invalid boolean value for %s: %j', errName, value);
+            }
+            throw new TypeError(errmsg);
+        }
     }
 };
diff --git a/lib/vms.js b/lib/vms.js
index 4c9ff4d2..c022f216 100644
--- a/lib/vms.js
+++ b/lib/vms.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 var sprintf = require('util').format;
@@ -14,7 +14,10 @@ var errors = require('./errors');
 var _ = require('underscore');
 var getRequestHeaders = require('./get-request-headers');
 var Promise = require('promise');
+var utils = require('./utils');
+
 var NOT_AVAILABLE = 'N/A';
+
 module.exports = {
     create: create,
     list: list,
@@ -266,8 +269,28 @@ function list(req, res, next) {
 }
 
 function get(req, res, next) {
+    var params = {
+        uuid: req.params.uuid
+    };
+    if (req.params.hasOwnProperty('sync')) {
+        var sync;
+        try {
+            sync = utils.boolFromString(req.params.sync, false, 'sync');
+        } catch (boolErr) {
+            return next(new errors.InvalidParameterError(boolErr,
+                boolErr.message, [ {
+                    field: 'sync',
+                    code: 'Invalid',
+                    message: boolErr.message
+                } ]));
+        }
+        if (sync) {
+            params.sync = true;
+        }
+    }
+
     req.sdc[req.dc].vmapi.getVm(
-        {uuid: req.params.uuid},
+        params,
         {headers: getRequestHeaders(req) },
         function (err, obj)
     {
diff --git a/package.json b/package.json
index b5921c34..4d6fa6a4 100644
--- a/package.json
+++ b/package.json
@@ -35,7 +35,7 @@
     "react": "0.13.0",
     "reactify": "1.0.0",
     "restify": "2.8.5",
-    "sdc-clients": "9.2.0",
+    "sdc-clients": "10.1.0",
     "ufds": "1.1.3",
     "sdc-events": "git+ssh://git@github.com:joyent/sdc-events.git",
     "superagent": "0.21.0",
diff --git a/www/js/components/pages/vm/index.jsx b/www/js/components/pages/vm/index.jsx
index bc8d0b72..6031fb98 100644
--- a/www/js/components/pages/vm/index.jsx
+++ b/www/js/components/pages/vm/index.jsx
@@ -167,6 +167,7 @@ var VMPage = React.createClass({
                         : null }
 
                         <li className="divider"></li>
+                        <li><a onClick={this._handleSyncVm} className="sync">Sync</a></li>
                         <li><a onClick={this._handleDeleteVm} className="delete">Delete</a></li>
                     </ul>
                 </div>
@@ -506,6 +507,12 @@ var VMPage = React.createClass({
     _handleResizeJobCreated: function (job) {
         this.setState({currentJob: job});
     },
+    _handleSyncVm: function () {
+        var vm = new VMModel({uuid: this.state.vm.uuid});
+        vm.getSync();
+        window.alert('VM data synchronized from compute node.');
+        this.reloadData();
+    },
     _handleDeleteVm: function () {
         if (window.confirm('Are you sure you want to delete this VM?')) {
             var vm = new VMModel({uuid: this.state.vm.uuid});
diff --git a/www/js/models/vm.js b/www/js/models/vm.js
index a4a4742d..2e31fd74 100644
--- a/www/js/models/vm.js
+++ b/www/js/models/vm.js
@@ -81,6 +81,10 @@ var Vm = Model.extend({
         });
     },
 
+    getSync: function() {
+        $.get(this.url() + '?sync=true', {});
+    },
+
     createSnapshot: function(cb) {
         var req = $.post(this.url() + '?action=create_snapshot', {});
         req.done(function(data) {
