commit 2366624959f3c872b18d353a73cc702eb304ff84 (refs/changes/07/807/1)
Author: Josh Wilsdon <jwilsdon@joyent.com>
Date:   2016-10-27T21:36:37-07:00 (2 years, 11 months ago)
    
    ZAPI-753 Update VMAPI to node v4.x

diff --git a/Makefile b/Makefile
index ddb62e3..cee7801 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright (c) 2016, Joyent, Inc.
 #
 
 #
@@ -24,11 +24,11 @@
 
 # The prebuilt sdcnode version we want. See
 # "tools/mk/Makefile.node_prebuilt.targ" for details.
-NODE_PREBUILT_VERSION=v0.10.26
+NODE_PREBUILT_VERSION=v4.6.1
 ifeq ($(shell uname -s),SunOS)
 	NODE_PREBUILT_TAG=zone
-	# Allow building on a SmartOS image other than sdc-smartos/1.6.3.
-	NODE_PREBUILT_IMAGE=fd2cc906-8938-11e3-beab-4359c665ac99
+	# Allow building on other than sdc-minimal-multiarch-lts@15.4.1
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
 endif
 
 #
diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 179559f..14b2da7 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -21,7 +21,7 @@ var util = require('util');
 var Logger = require('bunyan');
 var async = require('async');
 var jsprint = require('jsprim');
-var ldapjs = require('ldapjs');
+var ldapjs = require('ldap-filter');
 
 var errors = require('../errors');
 var common = require('./../common');
@@ -786,7 +786,7 @@ function _addPaginationOptions(params, ldapFilterString) {
 
     if (params.marker) {
         markerFilters = _buildFiltersFromMarker(params.marker, sortOptions);
-        ldapFilterObject = ldapjs.parseFilter(ldapFilterString);
+        ldapFilterObject = ldapjs.parse(ldapFilterString);
         assert.object(ldapFilterObject, 'ldapFilterObject must be an object');
 
         combinedFilters = [ldapFilterObject].concat(markerFilters);
diff --git a/lib/errors.js b/lib/errors.js
index 726e490..bf76159 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -207,13 +207,15 @@ exports.wfapiWrap = function (opts) {
     var erropts = {
         restCode: opts.restCode || error.restCode,
         statusCode: opts.statusCode || error.statusCode,
-        message: opts.message,
+        message: opts.message || 'Unknown Error',
         constructorOpt: _WorkflowError
     };
 
     function _WorkflowError() {
         restify.RestError.call(this, erropts);
-        this.name = error.name;
+        // Always need a .name so that if we get passed to restify we don't
+        // cause it to blow up since it depends on all errors having .name.
+        this.name = error.name || 'WfapiError';
     }
     _WorkflowError.restCode = erropts.restCode;
     _WorkflowError.statusCode = erropts.statusCode;
diff --git a/lib/vmapi.js b/lib/vmapi.js
index e3da883..c7214c0 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -333,7 +333,7 @@ VMAPI.prototype.setMiddleware = function () {
     server.use(restify.acceptParser(server.acceptable));
     server.use(restify.bodyParser());
     server.use(restify.dateParser());
-    server.use(restify.queryParser());
+    server.use(restify.queryParser({allowDots: false, plainObjects: false}));
 };
 
 
@@ -413,7 +413,9 @@ VMAPI.prototype.listen = function (callback) {
 /*
  * Force JSON for all accept headers
  */
-function formatJSON(req, res, body) {
+function formatJSON(req, res, body, callback) {
+    var formattedJson;
+
     if (body instanceof Error) {
         // snoop for RestError or HttpError, but don't rely on
         // instanceof
@@ -440,10 +442,12 @@ function formatJSON(req, res, body) {
         // used to properly set the Content-Length and Content-MD5 headers, but
         // no data should actually be sent as part of the response's body. This
         // is all according to RFC 2616.
-        return ('');
+        formattedJson = '';
     } else {
-        return (data);
+        formattedJson = data;
     }
+
+    callback(null, formattedJson);
 }
 
 
diff --git a/package.json b/package.json
index 6d996de..528e74a 100644
--- a/package.json
+++ b/package.json
@@ -5,27 +5,26 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "assert-plus": "0.2.0",
-    "async": "0.2.6",
-    "bunyan": "1.3.4",
-    "changefeed": "1.1.8",
+    "assert-plus": "1.0.0",
+    "async": "0.7.0",
+    "bunyan": "1.8.1",
+    "changefeed": "1.2.2",
     "deep-diff": "0.3.3",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
-    "filed": "0.0.5",
     "jsprim": "^1.2.2",
-    "ldapjs": "^1.0.0",
-    "libuuid": "0.1.2",
-    "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
+    "ldap-filter": "0.3.3",
+    "libuuid": "0.2.1",
+    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
     "nodeunit": "0.9.1",
     "once": "^1.3.3",
-    "restify": "2.7.0",
-    "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#c962959",
+    "restify": "4.2.0",
+    "sdc-clients": "10.0.2",
     "sigyan": "0.2.0",
     "sprintf": "0.1.1",
     "strsplit": "1.0.0",
     "trace-event": "1.3.0",
     "vasync": "^1.6.3",
-    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#469fc74"
+    "wf-client": "0.2.0"
   },
   "sdcDependencies": {
     "vm-agent": ">=1.5.0"
diff --git a/test/vms.curl-head-requests.test.js b/test/vms.curl-head-requests.test.js
index 8014dbc..6afb680 100644
--- a/test/vms.curl-head-requests.test.js
+++ b/test/vms.curl-head-requests.test.js
@@ -207,8 +207,8 @@ exports.non_curl_headvms_connection_default_request = function (t) {
 
         t.ok(headers.hasOwnProperty('content-length'),
             'response must have content-length header');
-        t.equal(headers.connection, 'keep-alive',
-            'connection response header must be set to keep-alive');
+        t.equal(headers.connection, 'close',
+            'connection response header must be set to close');
 
         t.done();
     });
@@ -216,7 +216,7 @@ exports.non_curl_headvms_connection_default_request = function (t) {
 
 exports.non_curl_headvms_connection_keepalive_request = function (t) {
     nonCurlHeadRequest('/vms', {
-        connefunction: 'keep-alive'
+        connection: 'keep-alive'
     }, function onHeaders(err, headers) {
         t.ifError(err, 'request should not result in an error');
 
@@ -250,8 +250,8 @@ exports.non_curl_headvm_connection_default_request = function (t) {
 
         t.ok(headers.hasOwnProperty('content-length'),
             'response must have content-length header');
-        t.equal(headers.connection, 'keep-alive',
-            'connection response header must be set to keep-alive');
+        t.equal(headers.connection, 'close',
+            'connection response header must be set to close');
 
         t.done();
     });
