commit 22433292a816093ed1bdb75d31ef365bc0ceb14b (refs/changes/00/1500/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-02-11T05:37:17+00:00 (2 years, 8 months ago)
    
    TOOLS-1692 node-restify-warden needs to check array of UUIDs more strictly

diff --git a/.npmignore b/.npmignore
new file mode 100644
index 0000000..6c59794
--- /dev/null
+++ b/.npmignore
@@ -0,0 +1,6 @@
+/Makefile
+/deps
+/tests
+/tools
+/.gitmodules
+/.npmignore
diff --git a/lib/validators.js b/lib/validators.js
index d7ae5e2..958333a 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 'use strict';
@@ -32,7 +32,6 @@ var util_common = require('./common');
 var constants = require('./constants');
 var assert = require('assert-plus');
 var fmt = require('util').format;
-var util = require('util');
 var net = require('net');
 var ipaddr = require('ip6addr');
 
@@ -50,7 +49,7 @@ function validateIParray(_, name, arr, callback) {
     var errs = [];
     var ips = [];
 
-    if (!util.isArray(arr) && typeof (arr) !== 'string') {
+    if (!Array.isArray(arr) && typeof (arr) !== 'string') {
         callback(new errors.invalidParam(name, constants.msg.STR));
         return;
     }
@@ -171,7 +170,7 @@ function validateSubnetArray(_, name, arr, callback) {
     var errs = [];
     var sns = [];
 
-    if (!util.isArray(arr) && typeof (arr) !== 'string') {
+    if (!Array.isArray(arr) && typeof (arr) !== 'string') {
         callback(new errors.invalidParam(name, constants.msg.STR));
         return;
     }
@@ -250,11 +249,16 @@ function isValidUUID(uuid) {
  * Validates an array of UUIDs
  */
 function validateUUIDarray(_, name, val, callback) {
-    var arr = util_common.arrayify(val);
-
-    /* Dedup the list and find invalid UUIDs */
     var invalid = {};
     var valid = {};
+
+    if (!Array.isArray(val) && typeof (val) !== 'string') {
+        callback(new errors.invalidParam(name, constants.msg.ARRAY_OF_STR));
+        return;
+    }
+
+    /* Dedup the list and find invalid UUIDs */
+    var arr = util_common.arrayify(val);
     arr.forEach(function (uuid) {
         if (UUID_RE.test(uuid)) {
             valid[uuid] = 1;
@@ -270,8 +274,6 @@ function validateUUIDarray(_, name, val, callback) {
         return;
     }
 
-
-
     callback(null, Object.keys(valid).sort());
 }
 
@@ -338,7 +340,7 @@ function validateLimit(_, name, val, callback) {
 function validateFieldsArray(fields) {
     assert.arrayOfString(fields, 'fields');
     return function _validateFieldsArray(_, name, arr, callback) {
-        if (!util.isArray(arr)) {
+        if (!Array.isArray(arr)) {
             callback(new errors.invalidParam(name,
                     constants.msg.ARRAY_OF_STR));
             return;
diff --git a/package.json b/package.json
index c5b0042..68dfa09 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "restify-warden",
-  "version": "0.1.0",
+  "version": "0.1.1",
   "description": "Yet another parameter validator",
   "author": "Joyent, Inc",
   "main": "./lib/validate.js",
diff --git a/tests/run.js b/tests/run.js
index eaeea1c..4e21fa1 100644
--- a/tests/run.js
+++ b/tests/run.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 'use strict';
@@ -911,22 +911,47 @@ test('UUID-S-KI-U', function (t) {
     });
 });
 
-test('UUIDarray-S-KV', function (t) {
+test('UUIDarray-S-KV: accepts and returns array of UUIDs', function (t) {
     var opts = {
         strict: true,
         required: {
             uuid: validate.UUIDarray
         }
     };
-    var params = { uuid: ['ee985c08-aadb-11e6-a317-bb60373c8455',
-        '1719a244-ab78-11e6-bd7e-c71f1a793a36'] };
+
+    var ids = [
+        'ee985c08-aadb-11e6-a317-bb60373c8455',
+        '1719a244-ab78-11e6-bd7e-c71f1a793a36'
+    ];
+    var sortedIDs = ids.slice().sort();
+    var params = { uuid: ids };
+
     validate.params(opts, null, params, function (err, res) {
         t.ifErr(err, 'Expecting success');
+        t.deepEqual(res, { uuid: sortedIDs }, 'Returns UUIDs');
         t.end();
     });
 });
 
-test('UUIDarray-S-KI', function (t) {
+test('UUIDarray-S-KV: accepts and converts UUID string', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.UUIDarray
+        }
+    };
+
+    var id = 'ee985c08-aadb-11e6-a317-bb60373c8455';
+    var params = { uuid: id };
+
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.deepEqual(res, { uuid: [ id ] }, 'String converted to array');
+        t.end();
+    });
+});
+
+test('UUIDarray-S-KI: array containing an invalid UUID', function (t) {
     var opts = {
         strict: true,
         required: {
@@ -947,6 +972,46 @@ test('UUIDarray-S-KI', function (t) {
     });
 });
 
+test('UUIDarray-S-KI: not an array (object)', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.UUIDarray
+        }
+    };
+
+    var params = { uuid: { } };
+
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var error1 = util_err.invalidParam('uuid',
+            util_const.msg.ARRAY_OF_STR);
+        expErr(msg, [ error1 ], err, t);
+        t.end();
+    });
+});
+
+test('UUIDarray-S-KI: not an array (boolean)', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.UUIDarray
+        }
+    };
+
+    var params = { uuid: true };
+
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var error1 = util_err.invalidParam('uuid',
+            util_const.msg.ARRAY_OF_STR);
+        expErr(msg, [ error1 ], err, t);
+        t.end();
+    });
+});
+
 test('UUIDarray-S-U', function (t) {
     var opts = {
         strict: true,
