commit 309e391f0951d8beea7fe0ab1005d8a7c965ea3b (refs/changes/66/5066/1)
Author: John Levon <john.levon@joyent.com>
Date:   2018-11-15T23:46:45+00:00 (11 months ago)
    
    OS-7373 gcc7 strapfix is incomplete
    OS-7376 binutils build has incorrect compiler flags
    OS-7380 openssl should use the strap compiler
    OS-7382 nss-nspr build doesn't use LDFLAGS

diff --git a/Makefile b/Makefile
index cd18df8..8ac93cd 100644
--- a/Makefile
+++ b/Makefile
@@ -25,6 +25,10 @@ DESTDIR =	$(BASE)/proto
 ifeq ($(STRAP),strap)
 
 STRAPPROTO =	$(DESTDIR)
+
+COMMA=,
+EXTRA_COMPILERS = $(subst $(COMMA), , $(SHADOW_COMPILERS))
+
 SUBDIRS = \
 	cpp \
 	bzip2 \
@@ -36,17 +40,16 @@ SUBDIRS = \
 	node.js \
 	nss-nspr \
 	openssl1x \
-	perl
+	perl \
+	$(EXTRA_COMPILERS)
 
-COMMA=,
-EXTRA_COMPILERS = $(subst $(COMMA), , $(SHADOW_COMPILERS))
-SUBDIRS +=	$(EXTRA_COMPILERS)
-STRAPFIX +=	$(EXTRA_COMPILERS)
+STRAPFIX +=	$(PRIMARY_COMPILER) $(EXTRA_COMPILERS)
 STRAPFIX_SUBDIRS=$(STRAPFIX:%=%.strapfix)
 
 else
 
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
+
 SUBDIRS = \
 	bash \
 	bind \
@@ -89,6 +92,8 @@ SUBDIRS = \
 	wget \
 	xz
 
+STRAPFIX_SUBDIRS =
+
 endif
 
 PATH =		$(STRAPPROTO)/usr/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin
@@ -162,12 +167,14 @@ $(DESTDIR)/usr/gnu/bin/gas: FRC
 ifeq ($(STRAP),strap)
 
 $(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
+	@echo "========== building $@ =========="
 	(cd $(PRIMARY_COMPILER) && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install strapfix)
 
 $(SUBDIRS): $(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/gcc
+	@echo "========== strap building $@ =========="
 	(cd $@ && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
@@ -181,17 +188,28 @@ $(STRAPFIX_SUBDIRS): $(SUBDIRS)
 	(cd $$(basename $@ .strapfix) && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
+	    PRIMARY_COMPILER=$(PRIMARY_COMPILER) \
 	    $(MAKE) DESTDIR=$(DESTDIR) strapfix)
 
+fixup_strap: $(STRAPFIX_SUBDIRS)
+
+install_strap: binutils $(PRIMARY_COMPILER) $(SUBDIRS) fixup_strap
+
 else
 
-$(DESTDIR)/usr/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
+#
+# For the non-strap build, we just need the runtime libraries to be in place in
+# the proto dir.
+#
+$(PRIMARY_COMPILER):
+	@echo "========== building $@ =========="
 	(cd $(PRIMARY_COMPILER) && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
-	    $(MAKE) DESTDIR=$(DESTDIR) install strapfix)
+	    $(MAKE) DESTDIR=$(DESTDIR) fixup)
 
-$(SUBDIRS): $(DESTDIR)/usr/bin/gcc
+$(SUBDIRS): $(PRIMARY_COMPILER)
+	@echo "========== building $@ =========="
 	(cd $@ && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
@@ -200,17 +218,13 @@ $(SUBDIRS): $(DESTDIR)/usr/bin/gcc
 	    ALTCTFCONVERT=$(ALTCTFCONVERT) \
 	    NATIVE_PERL=$(NATIVE_PERL) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install)
-endif
-
 
-install: $(SUBDIRS) $(PRIMARY_COMPILER) binutils
+install: $(PRIMARY_COMPILER) $(SUBDIRS)
 
-fixup_strap: $(STRAPFIX_SUBDIRS)
-
-install_strap: $(SUBDIRS) $(PRIMARY_COMPILER) binutils fixup_strap
+endif
 
 clean:
-	-for dir in $(SUBDIRS) $(PRIMARY_COMPILER) binutils; \
+	-for dir in $(PRIMARY_COMPILER) $(SUBDIRS) binutils; \
 	    do (cd $$dir; $(MAKE) DESTDIR=$(DESTDIR) clean); done
 	-rm -rf proto
 
@@ -226,4 +240,4 @@ tarball:
 
 FRC:
 
-.PHONY: manifest mancheck_conf
+.PHONY: $(PRIMARY_COMPILER) $(SUBDIRS) binutils manifest mancheck_conf
diff --git a/Makefile.defs b/Makefile.defs
index 1d37aef..2c37554 100644
--- a/Makefile.defs
+++ b/Makefile.defs
@@ -34,8 +34,8 @@ GXX =		$(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/g++
 LIBSTDCXX_RUNPATH = usr/gcc/$(PRIMARY_COMPILER_VER)/lib
 else
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
-GCC =		$(DESTDIR)/usr/bin/gcc
-GXX =		$(DESTDIR)/usr/bin/g++
+GCC =		$(STRAPPROTO)/usr/bin/gcc
+GXX =		$(STRAPPROTO)/usr/bin/g++
 endif
 
 PATH =		$(STRAPPROTO)/usr/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin
diff --git a/binutils/Makefile b/binutils/Makefile
index 0631c16..d956806 100644
--- a/binutils/Makefile
+++ b/binutils/Makefile
@@ -18,13 +18,19 @@
 #
 # CDDL HEADER END
 #
-# Copyright 2017, Joyent, Inc.
+# Copyright 2018, Joyent, Inc.
 #
 
 VER =	binutils-2.25.1
 
 include ../Makefile.defs
 
+#
+# binutils configure ignores $CPPFLAGS, so pass our needed changes through
+# $CFLAGS.
+#
+CFLAGS += $(CPPFLAGS)
+
 TARBALL =		$(VER).tar.bz2
 TARBALL_COMPRESS =	-j
 AUTOCONF_OPTS = \
diff --git a/gcc4/Makefile b/gcc4/Makefile
index 6fa7269..31cb78d 100644
--- a/gcc4/Makefile
+++ b/gcc4/Makefile
@@ -36,6 +36,8 @@ GCC =	/opt/local/bin/gcc
 GXX =	/bin/false
 CFLAGS =	-nostdinc -isystem /usr/include -g -O2
 
+AUTOCONF_PREFIX = $(PREFIX)
+
 AUTOCONF_OPTS += \
 	--with-ld=/usr/bin/ld \
 	--without-gnu-ld \
@@ -60,31 +62,6 @@ OVERRIDES += \
 #
 CLEANFILES += $(VER)-32.build $(VER)-32strap.build
 
-#
-# When building the strap code, it needs to exist in a different prefix.
-#
-ifeq ($(STRAP),strap)
-AUTOCONF_PREFIX = $(PREFIX)
-endif
-
-#
-# The runtime libraries that we build into proto.strap should be made to search
-# for their dependencies there as well, so that programs built to run on the
-# build machine (from proto.strap) find the correct copies of these libraries.
-#
-ifeq ($(STRAP),strap)
-	STRAPFIX_LINKS= \
-		$(DESTDIR)/$(PREFIX)/lib/64
-	STRAPFIX_FILES_32 = \
-		$(DESTDIR)/$(PREFIX)/lib/libgcc_s.so.1 \
-		$(DESTDIR)/$(PREFIX)/lib/libstdc++.so.6
-	STRAPFIX_FILES_64 = \
-		$(DESTDIR)/$(PREFIX)/lib/64/libgcc_s.so.1 \
-		$(DESTDIR)/$(PREFIX)/lib/64/libstdc++.so.6
-	STRAPFIX_FILES = $(STRAPFIX_FILES_32) $(STRAPFIX_FILES_64)
-	STRAPFIX_BINS = gcc g++ cpp
-endif
-
 #
 # Unlike everything else, gcc is built to be a cross-compiler, really.  It
 # never runs on the target system, only the build system.  So it should not
@@ -141,23 +118,55 @@ $(VER.32)/gmp: $(GMP_VER).tar.bz2 | $(VER.32)
 	chmod 755 $@/configure
 	touch $@/configure
 
+LIBTAR=$(STRAPPROTO)/gcclibs.tar.gz
+
+ifeq ($(STRAP),strap)
+
+#
+# The runtime libraries that we build into proto.strap should be made to search
+# for their dependencies there as well, so that programs built to run on the
+# build machine (from proto.strap) find the correct copies of these libraries.
+# (Currently, this is only relevant for libstdc++.)
+#
+# Before we do so, however, we'll keep copies for the non-strap build to pick
+# up.
+#
+# We should also remove the "fixed" includes: they are just bad copies of the
+# potentially old system headers.
+#
+FIXLIBS = libgcc_s.so libstdc++.so libssp.so
+LIBDIR=$(DESTDIR)/$(PREFIX)/lib
+
 .PHONY: strapfix
-strapfix: $(STRAPFIX_LINKS) $(STRAPFIX_FILES) | install
-	for f in $(STRAPFIX_FILES_32); do \
-		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib' \
-		    $$f; \
-	done
-	for f in $(STRAPFIX_FILES_64); do \
-		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib/64' \
-		    $$f; \
-	done
+strapfix:
+	[[ -h $(LIBDIR)/64 ]] || ln -s amd64 $(LIBDIR)/64
+ifeq ($(PRIMARY_COMPILER),gcc4)
 	mkdir -p $(DESTDIR)/usr/bin
-	for f in $(STRAPFIX_BINS); do \
+	for f in gcc g++ cpp; do \
 		ln -sf $(DESTDIR)/$(PREFIX)/bin/$$f $(DESTDIR)/usr/bin/$$f; \
 	done
+	rm -f $(LIBTAR)
+	for lib in $(FIXLIBS); do \
+		(cd $(LIBDIR)/.. && gtar uvf $(LIBTAR) \
+		    lib/$$lib.* lib/64/$$lib.*) ; \
+	done
+endif
+	find $(LIBDIR) -name include-fixed | xargs rm -rf
+	for lib in $(FIXLIBS); do \
+		/usr/bin/elfedit -e 'dyn:runpath $(LIBDIR)' $(LIBDIR)/$$lib ; \
+		/usr/bin/elfedit -e 'dyn:runpath $(LIBDIR)/64' \
+		    $(LIBDIR)/64/$$lib ; \
+	done
+
+
+else
 
-$(STRAPFIX_LINKS):
-	mkdir -p `dirname $@`
-	[[ -h $@ ]] || ln -s amd64 $@
+#
+# A non-strap build: do not install anything other than our saved copy of the
+# runtime libraries. This should only happen for the primary compiler.
+#
+.PHONY: fixup
+fixup:
+	cd $(DESTDIR)/usr && gtar xvf $(LIBTAR)
+
+endif
diff --git a/gcc7/Makefile b/gcc7/Makefile
index fffe5a5..50fb2e6 100644
--- a/gcc7/Makefile
+++ b/gcc7/Makefile
@@ -19,6 +19,14 @@
 # modifications we need.  We could probably do a git clone instead, but the
 # tarball method is easier given these Makefiles.
 #
+# During a strap build, all compiler versions are built under
+# proto.strap/usr/gcc/X. For the primary compiler, we symlink into
+# proto.strap/usr/bin/gcc etc.
+#
+# For the non-strap build, we purposefully only install what the resulting
+# platform builds: namely the gcc-derived runtime libraries. The shadow
+# compilers are not relevant here.
+#
 
 VER =		gcc-7.3.0-il-1
 MPFR_VER =	mpfr-3.1.6
@@ -34,6 +42,8 @@ GCC =	/opt/local/bin/gcc
 GXX =	/opt/local/bin/g++
 CFLAGS = -g -O2
 
+AUTOCONF_PREFIX = $(PREFIX)
+
 AUTOCONF_OPTS += \
 	--with-ld=/usr/bin/ld \
 	--without-gnu-ld \
@@ -58,30 +68,6 @@ OVERRIDES += \
 #
 CLEANFILES += $(VER)-32.build $(VER)-32strap.build
 
-#
-# When building the strap code, it needs to exist in a different prefix.
-#
-ifeq ($(STRAP),strap)
-AUTOCONF_PREFIX = $(PREFIX)
-endif
-
-#
-# The runtime libraries that we build into proto.strap should be made to search
-# for their dependencies there as well, so that programs built to run on the
-# build machine (from proto.strap) find the correct copies of these libraries.
-#
-ifeq ($(STRAP),strap)
-	STRAPFIX_LINKS= \
-		$(DESTDIR)/$(PREFIX)/lib/64
-	STRAPFIX_FILES_32 = \
-		$(DESTDIR)/$(PREFIX)/lib/libgcc_s.so.1 \
-		$(DESTDIR)/$(PREFIX)/lib/libstdc++.so.6
-	STRAPFIX_FILES_64 = \
-		$(DESTDIR)/$(PREFIX)/lib/64/libgcc_s.so.1 \
-		$(DESTDIR)/$(PREFIX)/lib/64/libstdc++.so.6
-	STRAPFIX_FILES = $(STRAPFIX_FILES_32) $(STRAPFIX_FILES_64)
-endif
-
 #
 # Unlike everything else, gcc is built to be a cross-compiler, really.  It
 # never runs on the target system, only the build system.  So it should not
@@ -162,19 +148,55 @@ $(VER.32)/mpc: $(MPC_VER).tar.gz | $(VER.32)
 	chmod 755 $@/configure
 	touch $@/configure
 
+LIBTAR=$(STRAPPROTO)/gcclibs.tar.gz
+
+ifeq ($(STRAP),strap)
+
+#
+# The runtime libraries that we build into proto.strap should be made to search
+# for their dependencies there as well, so that programs built to run on the
+# build machine (from proto.strap) find the correct copies of these libraries.
+# (Currently, this is only relevant for libstdc++.)
+#
+# Before we do so, however, we'll keep copies for the non-strap build to pick
+# up.
+#
+# We should also remove the "fixed" includes: they are just bad copies of the
+# potentially old system headers.
+#
+FIXLIBS = libgcc_s.so libstdc++.so libssp.so
+LIBDIR=$(DESTDIR)/$(PREFIX)/lib
+
 .PHONY: strapfix
-strapfix: $(STRAPFIX_LINKS) $(STRAPFIX_FILES) | install
-	for f in $(STRAPFIX_FILES_32); do \
-		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib' \
-		    $$f; \
+strapfix:
+ifeq ($(PRIMARY_COMPILER),gcc7)
+	[[ -h $(LIBDIR)/64 ]] || ln -s amd64 $(LIBDIR)/64
+	mkdir -p $(DESTDIR)/usr/bin
+	for f in gcc g++ cpp; do \
+		ln -sf $(DESTDIR)/$(PREFIX)/bin/$$f $(DESTDIR)/usr/bin/$$f; \
+	done
+	rm -f $(LIBTAR)
+	for lib in $(FIXLIBS); do \
+		(cd $(LIBDIR)/.. && gtar uvf $(LIBTAR) \
+		    lib/$$lib.* lib/64/$$lib.*) ; \
 	done
-	for f in $(STRAPFIX_FILES_64); do \
-		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib/64' \
-		    $$f; \
+endif
+	find $(LIBDIR) -name include-fixed | xargs rm -rf
+	for lib in $(FIXLIBS); do \
+		/usr/bin/elfedit -e 'dyn:runpath $(LIBDIR)' $(LIBDIR)/$$lib ; \
+		/usr/bin/elfedit -e 'dyn:runpath $(LIBDIR)/64' \
+		    $(LIBDIR)/64/$$lib ; \
 	done
 
-$(STRAPFIX_LINKS):
-	mkdir -p `dirname $@`
-	[[ -h $@ ]] || ln -s amd64 $@
+
+else
+
+#
+# A non-strap build: do not install anything other than our saved copy of the
+# runtime libraries. This should only happen for the primary compiler.
+#
+.PHONY: fixup
+fixup:
+	cd $(DESTDIR)/usr && gtar xvf $(LIBTAR)
+
+endif
diff --git a/nss-nspr/Patches/ldflags.diff b/nss-nspr/Patches/ldflags.diff
new file mode 100644
index 0000000..4358ccf
--- /dev/null
+++ b/nss-nspr/Patches/ldflags.diff
@@ -0,0 +1,25 @@
+From 418135dcb6e1a9fc7e1b4b59a32f42959a9b7123 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Thu, 15 Nov 2018 22:09:47 +0000
+Subject: [PATCH] Apply $LDFLAGS when building shared libraries
+
+---
+ nss/coreconf/SunOS5.mk | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/nss/coreconf/SunOS5.mk b/nss/coreconf/SunOS5.mk
+index ce9e2cb..84e2093 100644
+--- a/nss/coreconf/SunOS5.mk
++++ b/nss/coreconf/SunOS5.mk
+@@ -79,7 +79,7 @@ endif
+ # Purify doesn't like -MDupdate
+ NOMD_OS_CFLAGS += $(DSO_CFLAGS) $(OS_DEFINES) $(SOL_CFLAGS)
+ 
+-MKSHLIB  = $(CC) $(DSO_LDOPTS) $(RPATH)
++MKSHLIB  = $(CC) $(DSO_LDOPTS) $(RPATH) $(LDFLAGS)
+ ifdef NS_USE_GCC
+ ifeq (GNU,$(findstring GNU,$(shell `$(CC) -print-prog-name=ld` -v 2>&1)))
+ 	GCC_USE_GNU_LD = 1
+-- 
+2.14.1
+
diff --git a/openssl/Makefile b/openssl/Makefile
index 5af5cce..e704900 100644
--- a/openssl/Makefile
+++ b/openssl/Makefile
@@ -19,7 +19,15 @@
 # CDDL HEADER END
 #
 # Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# openssl has a painfully baroque build system (read Configure if you doubt it).
+# Configure allows us to add -D options, but there's no way to over-ride
+# compiler flags. We want to point to the proto headers, though, so we are
+# forced to hack this in by claiming our compiler is "$(GCC) $(CPPFLAGS)".
+# I'm sorry.
 #
 
 BASE=$(PWD)
@@ -30,52 +38,46 @@ include Makefile.com
 MANDIR = $(DESTDIR)/usr/share/man
 
 CONFIG_STATUS = config.status
-    
+
 all: all32 all64
 
-all32: $(VER)/$(CONFIG_STATUS)
-	cd $(VER); env - PATH=$(PATH) \
-	"CFLAGS=$(CFLAGS)" \
-	"LDFLAGS=$(LDFLAGS)" \
-	gmake 
+all32: $(VER.32)/$(CONFIG_STATUS)
+	cd $(VER.32); gmake
 
-all64: $(VER64)/$(CONFIG_STATUS)
-	cd $(VER64); env - PATH=$(PATH) \
-	"CFLAGS=$(CFLAGS)" \
-	"LDFLAGS=$(LDFLAGS)" \
-	gmake 
+all64: $(VER.64)/$(CONFIG_STATUS)
+	cd $(VER.64); gmake
 
 # opensslconf.h is patched to ensure suitability for both 64bit and 32bit
-$(VER)/$(CONFIG_STATUS): $(VER)/configure
-	cd $(VER); env - PATH=$(PATH) \
+$(VER.32)/$(CONFIG_STATUS): $(VER.32)/configure
+	cd $(VER.32); env - PATH=$(PATH) CC="$(GCC) $(CPPFLAGS)" \
 	PERL=$(NATIVE_PERL) ksh93 ./Configure $(CONFIGURE_OPTIONS)
-	gpatch -p1 $(VER)/crypto/opensslconf.h opensslconf.patch
-	cd $(VER); gmake  depend
+	gpatch -p1 $(VER.32)/crypto/opensslconf.h opensslconf.patch
+	cd $(VER.32); gmake  depend
 	touch $@
 
-$(VER64)/$(CONFIG_STATUS): $(VER)/configure
-	cd $(VER64); env - PATH=$(PATH) \
+$(VER.64)/$(CONFIG_STATUS): $(VER.64)/configure
+	cd $(VER.64); env - PATH=$(PATH) CC="$(GCC) $(CPPFLAGS)" \
 	PERL=$(NATIVE_PERL) ksh93 ./Configure $(CONFIGURE_OPTIONS64)
-	cd $(VER64); gmake  depend
+	cd $(VER.64); gmake  depend
 	touch $@
 
 install: all install32 install64
 
 install32: all32
-	MACH32=i386 VERDIR=$(VER) BASE=$(BASE) DESTDIR=$(DESTDIR) \
-	    VERSION=$(BVER) ksh93 ./install-sfw
+	MACH32=i386 VERDIR=$(VER.32) BASE=$(BASE) DESTDIR=$(DESTDIR) \
+	    VERSION=$(VER) ksh93 ./install-sfw
 
 install64: all64
-	MACH64=amd64 VERDIR=$(VER64) BASE=$(BASE) DESTDIR=$(DESTDIR) \
-	    VERSION=$(BVER) ksh93 ./install-sfw-64
+	MACH64=amd64 VERDIR=$(VER.64) BASE=$(BASE) DESTDIR=$(DESTDIR) \
+	    VERSION=$(VER) ksh93 ./install-sfw-64
 
-$(VER)/configure: $(BVER)-src
-	cp -r $(BVER)-src $(VER) 
-	( cd $(VER) ; gpatch -p1 < ../configure.patch )
-	( cd $(VER) ; gpatch -p1 < ../limits.patch )
-	cp engine_pkcs11/* $(VER)/crypto/engine/
-	touch $(VER)/configure
-	cp -r  $(VER) $(VER64)
+$(VER.32)/configure: $(VER)-src
+	cp -r $(VER)-src $(VER.32)
+	( cd $(VER.32) ; gpatch -p1 < ../configure.patch )
+	( cd $(VER.32) ; gpatch -p1 < ../limits.patch )
+	cp engine_pkcs11/* $(VER.32)/crypto/engine/
+	touch $(VER.32)/configure
+	cp -r $(VER.32) $(VER.64)
 
 clean:
-	-rm -rf $(VER) $(VER64) $(VER)strap $(VER64)strap $(VER)strap-64
+	-rm -rf $(VER.32) $(VER.64)
diff --git a/openssl/Makefile.com b/openssl/Makefile.com
index 715a40d..d8aeb37 100644
--- a/openssl/Makefile.com
+++ b/openssl/Makefile.com
@@ -23,27 +23,27 @@
 # Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
+#
+# This build is not autoconf-style, but we still want to pick up our compilers
+# etc.
+#
+include ../Makefile.defs
 
 METAINFO_FILE = ../METADATA
-BVER = openssl-0.9.8zg
-VER = $(BVER)$(STRAP)
-VER64 =$(VER)-64
+VER = openssl-0.9.8zg
 
 PKCS11_LIB = /usr/lib/libpkcs11.so.1
 PKCS11_LIB64 = /usr/lib/64/libpkcs11.so.1
 
-CFLAGS = -DSOLARIS_OPENSSL -DNO_WINDOWS_BRAINDEATH
-CFLAGS64 = $(CFLAGS)
-
 ifneq ($(STRAP),strap)
 	LDFLAGS += $(GENLDFLAGS)
 endif
 
 GENERIC_CONFIGURE_OPTIONS = \
-	$(CFLAGS) \
+	-DSOLARIS_OPENSSL -DNO_WINDOWS_BRAINDEATH \
 	--openssldir=/etc/openssl \
 	--prefix=/usr \
 	--install_prefix=$(DESTDIR) \
