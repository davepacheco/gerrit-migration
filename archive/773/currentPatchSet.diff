commit 49a0a7a94dd0b34558f3c5590d67d7ad7724181f (refs/changes/73/773/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-10-24T17:41:46-07:00 (2 years, 11 months ago)
    
    CNS-173 Want CNS to answer for CNAME records it owns

diff --git a/lib/dns-server.js b/lib/dns-server.js
index 6993f8e..4e6ade1 100644
--- a/lib/dns-server.js
+++ b/lib/dns-server.js
@@ -278,6 +278,15 @@ DNSServer.prototype.handleQuery = function (q, cb) {
 		r.hget(k, leaf, function (err, val) {
 			if (!err && val !== null) {
 				var allRecs = JSON.parse(val);
+				var cnames = allRecs.filter(function (rec) {
+					return (rec.constructor === 'CNAME');
+				});
+				if (cnames.length > 0) {
+					self.addAnswers(q, cnames);
+					self.addAuthorityNS(q, z);
+					self.addCNAMEs(cnames, z, q, cb);
+					return;
+				}
 				var recs = allRecs.filter(function (rec) {
 					return (rec.constructor === type);
 				});
@@ -322,6 +331,30 @@ DNSServer.prototype.handleQuery = function (q, cb) {
 	});
 };
 
+DNSServer.prototype.addCNAMEs = function (recs, z, q, cb) {
+	const ZRE = new RegExp(('.' + z + '$').replace(/[.]/g, '\\.'));
+
+	var r = this.redis;
+	var k = 'zone:' + z;
+	var cname = recs[0].args[0];
+	var leaf = cname.replace(ZRE, '');
+
+	r.hget(k, leaf, function (err, val) {
+		if (!err && val !== null) {
+			var arecs = JSON.parse(val);
+			arecs = arecs.filter(function (rr) {
+				return (rr.constructor === q.type());
+			});
+			for (var i = 0; i < arecs.length; ++i) {
+				q.addAnswer(cname, rehydrate(arecs[i]), TTL);
+			}
+		}
+		q.send();
+		cb();
+		q.log.info('responded ok');
+	});
+};
+
 DNSServer.prototype.addAdditionals = function (recs, z, q, cb) {
 	const ZRE = new RegExp(('.' + z + '$').replace(/[.]/g, '\\.'));
 	var r = this.redis;
diff --git a/test/unit/dns-server.test.js b/test/unit/dns-server.test.js
index 5204db0..f971931 100644
--- a/test/unit/dns-server.test.js
+++ b/test/unit/dns-server.test.js
@@ -61,6 +61,22 @@ test('create basic dataset', function (t) {
 			}
 		]
 	});
+	s.write({
+		uuid: 'def432',
+		services: [ { name: 'cmon', ports: [] } ],
+		listInstance: true,
+		listServices: true,
+		owner: {
+			uuid: 'aaaaa',
+			login: 'admin'
+		},
+		nics: [
+			{
+				ip: '8.7.6.5',
+				zones: ['foo']
+			}
+		]
+	});
 	s.once('finish', function () {
 		s.closeSerial(function () {
 			t.end();
@@ -261,6 +277,36 @@ test('serves instance TXT records', function (t) {
 	req.send();
 });
 
+test('serves cmon CNAME records', function (t) {
+	var q = dns.Question({
+		name: 'abc123.cmon.foo',
+		type: 'A'
+	});
+	var req = dns.Request({
+		question: q,
+		server: { address: '127.0.0.1', port: 9953, type: 'udp' },
+		timeout: 1000
+	});
+	req.once('timeout', function () {
+		t.fail('timeout');
+		t.end();
+	});
+	req.on('message', function (err, answer) {
+		t.error(err);
+		t.strictEqual(answer.answer.length, 2);
+		t.strictEqual(answer.answer[0].type,
+		    dns.consts.NAME_TO_QTYPE['CNAME']);
+		t.strictEqual(answer.answer[0].data, 'cmon.foo');
+		t.strictEqual(answer.answer[1].type,
+		    dns.consts.NAME_TO_QTYPE['A']);
+		t.strictEqual(answer.answer[1].address, '8.7.6.5');
+	});
+	req.once('end', function () {
+		t.end();
+	});
+	req.send();
+});
+
 test('generate some services', function (t) {
 	++currentSerial;
 
