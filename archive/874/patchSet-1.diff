From 374f2954a0cada4eef9ab2fa8e5be9a220cbf0dd Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Thu, 10 Nov 2016 10:50:28 -0800
Subject: [PATCH] joyent/node-fast#4 client should preserve "ase_errors" for
 Errors

---
 CHANGES.md                 |  4 ++++
 lib/fast_client.js         |  6 +++++-
 package.json               |  2 +-
 test/tst.client_request.js | 42 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index f9c4f53..6d9a720 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 No changes.
 
+## v2.2.2
+
+* #4 client should preserve "ase\_errors" for Errors
+
 ## v2.2.1
 
 * #3 client should not log at "error" level
diff --git a/lib/fast_client.js b/lib/fast_client.js
index b21b12d..4f8c4f0 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -741,10 +741,14 @@ FastClient.prototype.onMessage = function (message)
 	if (message.data.d.stack) {
 		cause.stack = message.data.d.stack;
 	}
+
 	/*
-	 * Context is reconstituted for historical reasons.
+	 * "context" and "ase_errors" are reconstituted for historical reasons.
+	 * There's a similar note in lib/fast_server.js.
 	 */
 	cause.context = message.data.d.context;
+	cause.ase_errors = message.data.d.ase_errors;
+
 	request.frq_done_graceful = true;
 	this.requestFail(request, new VError({
 	    'name': 'FastServerError',
diff --git a/package.json b/package.json
index afe3729..be5c652 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.2.1",
+	"version": "2.2.2",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
diff --git a/test/tst.client_request.js b/test/tst.client_request.js
index daa0501..4f78cd4 100644
--- a/test/tst.client_request.js
+++ b/test/tst.client_request.js
@@ -246,6 +246,48 @@ var mockResponders = [ {
 	assertServerError(errors.request, mod_testcommon.dummyError);
     }
 
+}, {
+    'name': 'error with extra properties',
+    'serverReply': function (socket, message, encoder) {
+	/*
+	 * The "context" and "ase_errors" properties are supposed to be
+	 * preserved for historical reasons, but other miscellaneous properties
+	 * do not get transmitted.
+	 */
+	assertNormalRequest(message);
+	encoder.end({
+	    'msgid': message.msgid,
+	    'status': mod_protocol.FP_STATUS_ERROR,
+	    'data': {
+	        'd': {
+		    'name': 'DummyError',
+		    'message': 'a dummy message',
+		    'someOtherProp': 'bogus',
+		    'context': 'abc123',
+		    'ase_errors': [ 'foobar' ]
+		}
+	    }
+	});
+    },
+    'clientCheck': function (data, errors) {
+	var error;
+
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request !== null);
+	mod_assertplus.equal(data.length, 0);
+
+	error = errors.request;
+	mod_assertplus.equal(error.name, 'FastRequestError');
+	error = VError.cause(error);
+	mod_assertplus.equal(error.name, 'FastServerError');
+	error = VError.cause(error);
+	mod_assertplus.equal(error.name, 'DummyError');
+	mod_assertplus.deepEqual(error.context, 'abc123');
+	mod_assertplus.deepEqual(error.ase_errors, [ 'foobar' ]);
+	mod_assertplus.ok(!error.hasOwnProperty('someOtherProp'));
+    }
+
 }, {
     'name': 'unexpected end of stream: no response at all',
     'serverReply': function (socket, message, encoder) {
-- 
2.21.0

