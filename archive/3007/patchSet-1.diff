commit 0091e72146c430fea640d27ca1b58241beedf5bb (refs/changes/07/3007/1)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2017-11-29T08:13:39-07:00 (1 year, 10 months ago)
    
    MANTA-2947 muskie storage utilization threshold must be configurable

diff --git a/lib/picker.js b/lib/picker.js
index 06aafa9..271fdbc 100644
--- a/lib/picker.js
+++ b/lib/picker.js
@@ -74,9 +74,9 @@ var fetch = function fetch_moray(opts, cb) {
     assert.object(opts, 'options');
     assert.number(opts.lag, 'options.lag');
     assert.object(opts.moray, 'options.moray');
+    assert.number(opts.utilization, 'options.utilization');
     assert.optionalNumber(opts.limit, 'options.limit');
     assert.optionalNumber(opts.marker, 'options.marker');
-    assert.optionalNumber(opts.utilization, 'options.utilization');
     assert.optionalArrayOfObject(opts.values, 'options.values');
     assert.func(cb, 'callback');
 
@@ -85,7 +85,7 @@ var fetch = function fetch_moray(opts, cb) {
     var count = 0;
     var recs = 0;
     var f = sprintf('(&(percentUsed<=%d)(timestamp>=%d)%s)',
-                    opts.utilization || 90,
+                    opts.utilization,
                     Date.now() - opts.lag,
                     opts.marker ? '(_id>=' + opts.marker + ')' : '');
     var marker = opts.marker;
@@ -159,7 +159,7 @@ function fetch_stub(opts, cb) {
             var values;
             try {
                 values = JSON.parse(data).filter(function (obj) {
-                    return (obj.value.percentUsed < (opts.utilization || 90));
+                    return (obj.value.percentUsed < opts.utilization);
                 }).map(function (obj) {
                     return (obj.value);
                 });
@@ -181,7 +181,8 @@ function fetch_stub(opts, cb) {
 function poll() {
     var opts = {
         lag: this.lag,
-        moray: this.client
+        moray: this.client,
+        utilization: this.utilization
     };
     var self = this;
 
@@ -332,6 +333,7 @@ function Picker(opts) {
     assert.number(opts.defaultMaxStreamingSizeMB,
         'options.defaultMaxStreamingSizeMB');
     assert.object(opts.log, 'options.log');
+    assert.number(opts.maxUtilizationPct, 'options.maxUtilizationPct');
 
     EventEmitter.call(this);
 
@@ -347,6 +349,7 @@ function Picker(opts) {
     this.multiDC = opts.multiDC === undefined ? true : opts.multiDC;
     this.url = opts.url;
     this.defMaxSizeMB = opts.defaultMaxStreamingSizeMB;
+    this.utilization = opts.maxUtilizationPct;
 
     this.client.once('connect', poll.bind(this));
     this.once('topology', this.emit.bind(this, 'connect'));
diff --git a/main.js b/main.js
index 0bf2441..ba8ee8e 100644
--- a/main.js
+++ b/main.js
@@ -343,7 +343,8 @@ function createPickerClient(cfg) {
         moray: cfg.moray,
         log: LOG.child({component: 'picker'}, true),
         multiDC: cfg.multiDC,
-        defaultMaxStreamingSizeMB: cfg.defaultMaxStreamingSizeMB
+        defaultMaxStreamingSizeMB: cfg.defaultMaxStreamingSizeMB,
+        maxUtilizationPct: cfg.maxUtilizationPct || 90
     };
 
     var client = app.picker.createClient(opts);
