From d4cb82324aef9ba1fb3d239b07a7f747cd321072 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 28 Feb 2017 16:51:53 +0100
Subject: [PATCH] TOOLS-1711 `sdcadm update assets` broken after TOOLS-1645
 Reviewed by: Trent Mick <trent.mick@joyent.com>

---
 .../update-stateless-services-v1.js           | 144 +++++-------------
 1 file changed, 39 insertions(+), 105 deletions(-)

diff --git a/lib/procedures/update-stateless-services-v1.js b/lib/procedures/update-stateless-services-v1.js
index a837e82..3365168 100644
--- a/lib/procedures/update-stateless-services-v1.js
+++ b/lib/procedures/update-stateless-services-v1.js
@@ -87,18 +87,16 @@ UpdateStatelessServices.prototype.execute = function ussv2Execute(opts, cb) {
     var rollback = opts.plan.rollback ||Â false;
 
     function updateService(change, nextSvc) {
-        var inst = change.inst;
 
         var arg = {
             change: change,
             opts: opts,
             userScript: false,
-            HA: false,
             tmpUUID: null
         };
 
-        if ((change.insts && change.insts.length > 1) || change.HA) {
-            arg.HA = true;
+        if (!change.insts) {
+            change.insts = [change.inst];
         }
 
         if (opts.plan.changes.length > 1) {
@@ -118,8 +116,17 @@ UpdateStatelessServices.prototype.execute = function ussv2Execute(opts, cb) {
             funcs.push(s.updateSvcUserScript);
         }
 
-        if (arg.HA) { // Assume assets will not be HA setup for now
-            change.insts.forEach(function (ins) {
+        change.insts.forEach(function (ins) {
+            /*
+             * If the service params require a delegate dataset, then ensure
+             * the instance has one.
+             *
+             * Also another workaround for assets, which has a limited hacked
+             * in 'service' object.
+             */
+            if (change.service.params) {
+                assert.optionalBool(change.service.params.delegate_dataset,
+                    'change.service.params.delegate_dataset');
                 if (change.service.params.delegate_dataset) {
                     funcs.push(function (_, next) {
                         s.ensureDelegateDataset({
@@ -131,6 +138,9 @@ UpdateStatelessServices.prototype.execute = function ussv2Execute(opts, cb) {
                         }, next);
                     });
                 }
+            }
+            // workaround for assets (TOOLS-695)
+            if (change.service.metadata) {
                 funcs.push(function (_, next) {
                     s.updateVmUserScriptRemote({
                         service: change.service,
@@ -141,130 +151,54 @@ UpdateStatelessServices.prototype.execute = function ussv2Execute(opts, cb) {
                         userScript: arg.userScript
                     }, next);
                 });
-            });
-        } else if (change.inst) {
-            /*
-             * If the service params require a delegate dataset, then ensure
-             * the instance has one.
-             *
-             * Also another workaround for assets, which has a limited hacked
-             * in 'service' object.
-             */
-            if (change.service.params) {
-                assert.optionalBool(change.service.params.delegate_dataset,
-                    'change.service.params.delegate_dataset');
-                if (change.service.params.delegate_dataset) {
-                    funcs.push(function (_, next) {
-                        s.ensureDelegateDataset({
-                            service: change.service,
-                            progress: progress,
-                            zonename: inst.zonename,
-                            log: opts.log,
-                            server: inst.server
-                        }, next);
-                    });
-                }
             }
-
-            funcs.push(function (_, next) {
-                s.updateVmUserScriptRemote({
-                    service: change.service,
-                    progress: progress,
-                    zonename: inst.zonename,
-                    log: opts.log,
-                    server: inst.server,
-                    userScript: arg.userScript
-                }, next);
-            });
-        }
+        });
 
         if (change.service.metadata) {  // workaround for assets (TOOLS-695)
             funcs.push(s.updateSapiSvc);
         }
 
-        if (arg.HA) {
-            change.insts.forEach(function (ins) {
-                funcs = funcs.concat(
-                    function imgadmInstallForInstance(_, next) {
-                        return s.imgadmInstallRemote({
-                            progress: progress,
-                            img: change.image,
-                            log: opts.log,
-                            server: ins.server
-                        }, next);
-                    },
-                    function reprovisionInstance(_, next) {
-                        s.reprovisionRemote({
-                            server: ins.server,
-                            img: change.image,
-                            zonename: ins.zonename,
-                            progress: progress,
-                            log: opts.log,
-                            sdcadm: opts.sdcadm
-                        }, next);
-                    },
-                    function waitForInstanceToBeUp(_, next) {
-                        s.waitForInstToBeUp({
-                            opts: {
-                                progress: progress,
-                                sdcadm: opts.sdcadm,
-                                log: opts.log
-                            },
-                            change: {
-                                inst: ins
-                            }
-                        }, next);
-                    }
-                );
-            });
-        } else if (change.inst) {
-            funcs = funcs.concat([
-                function imgadmInstall(_, next) {
+        change.insts.forEach(function (ins) {
+            funcs = funcs.concat(
+                function imgadmInstallForInstance(_, next) {
                     return s.imgadmInstallRemote({
                         progress: progress,
                         img: change.image,
                         log: opts.log,
-                        server: inst.server
+                        server: ins.server
                     }, next);
                 },
-                function reprovisionInst(_, next) {
+                function reprovisionInstance(_, next) {
                     s.reprovisionRemote({
-                        server: inst.server,
+                        server: ins.server,
                         img: change.image,
-                        zonename: inst.zonename,
+                        zonename: ins.zonename,
                         progress: progress,
                         log: opts.log,
                         sdcadm: opts.sdcadm
                     }, next);
                 },
-                s.waitForInstToBeUp
-            ]);
-        }
-        vasync.pipeline({funcs: funcs, arg: arg}, nextSvc);
-    }
-
-    // TOOLS-1465: when updating individual instances, need to double check if
-    // service is part or not of an HA setup
-    function checkServiceHA(change, nextSvc) {
-        opts.sdcadm.sapi.listInstances({
-            service_uuid: change.service.uuid
-        }, function (err, insts) {
-            if (err) {
-                return nextSvc(new errors.SDCClientError(err, 'SAPI'));
-            }
-            if (insts.length > 1) {
-                change.HA = true;
-                if (!change.insts) {
-                    change.insts = [change.inst];
+                function waitForInstanceToBeUp(_, next) {
+                    s.waitForInstToBeUp({
+                        opts: {
+                            progress: progress,
+                            sdcadm: opts.sdcadm,
+                            log: opts.log
+                        },
+                        change: {
+                            inst: ins
+                        }
+                    }, next);
                 }
-            }
-            return updateService(change, nextSvc);
+            );
         });
+
+        vasync.pipeline({funcs: funcs, arg: arg}, nextSvc);
     }
 
     vasync.forEachPipeline({
         inputs: self.changes,
-        func: checkServiceHA
+        func: updateService
     }, cb);
 };
 
-- 
2.21.0

