commit b7ea6fadcf0622948df25daa97a83ddaa0e72d36 (refs/changes/71/3571/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-03-13T19:06:56+00:00 (1 year, 7 months ago)
    
    NET-383 Use ESLint for lint and style checks in Portolan
    Reviewed by: Jason King <jason.king@joyent.com>
    Reviewed by: Rui Loura <rui@joyent.com>
    Approved by: Rui Loura <rui@joyent.com>

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..ae6d704
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/Makefile b/Makefile
index 33e5d06..9574fe1 100644
--- a/Makefile
+++ b/Makefile
@@ -21,6 +21,7 @@ JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
+ESLINT_FILES	 = $(JS_FILES)
 SMF_MANIFESTS_IN = smf/manifests/portolan.xml.in
 CLEAN_FILES += ./node_modules
 
@@ -42,8 +43,8 @@ CTF_TYPES=-t svp_req_t \
 	-t svp_shootdown_t
 TAPE=node_modules/.bin/tape
 
-NODE_PREBUILT_VERSION=v0.10.32
 ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_VERSION=v0.10.32
 	NODE_PREBUILT_TAG=zone
 	NODE_PREBUILT_IMAGE=de411e86-548d-11e4-a4b7-3bb60478632a
 endif
@@ -53,6 +54,7 @@ include ./tools/mk/Makefile.defs
 ifeq ($(shell uname -s),SunOS)
 	include ./tools/mk/Makefile.node_prebuilt.defs
 else
+	NODE := node
 	NPM := $(shell which npm)
 	NPM_EXEC=$(NPM)
 endif
@@ -71,7 +73,7 @@ RELSTAGEDIR:=/tmp/$(STAMP)
 #
 .PHONY: all
 all: $(SMF_MANIFESTS) build/build.json | $(NPM_EXEC) sdc-scripts
-	$(NPM) install
+	$(NPM) install --production
 
 build/build.json:
 	mkdir -p build
diff --git a/bin/portolan b/bin/portolan
index c57c7cf..4de1039 100755
--- a/bin/portolan
+++ b/bin/portolan
@@ -14,6 +14,8 @@
  * Portolan CLI
  */
 
+'use strict';
+
 var mod_backend = require('../lib/backend');
 var mod_bunyan = require('bunyan');
 var mod_client = require('../lib/client');
@@ -128,7 +130,7 @@ function translateOpts(opts, trans) {
 
     if (missing.length !== 0) {
         throw new VError('missing option%s: %s',
-            (missing.length == 1 ? '' : 's'),
+            (missing.length === 1 ? '' : 's'),
             missing.join(', '));
     }
 
@@ -157,7 +159,7 @@ mod_util.inherits(PortolanCLI, mod_cmdln.Cmdln);
 /**
  * Run before the subcommand methods - overall initialization
  */
-PortolanCLI.prototype.init = function _init(opts, args, callback) {
+PortolanCLI.prototype.init = function _init(_opts, _args, callback) {
     mod_backend.load(config);
 
     config.log = mod_bunyan.createLogger({
@@ -172,7 +174,7 @@ PortolanCLI.prototype.init = function _init(opts, args, callback) {
  * Add an overlay mapping
  */
 PortolanCLI.prototype['do_add-overlay'] =
-    function _addOverlay(subcmd, opts, args, callback) {
+    function _addOverlay(_subcmd, opts, _args, callback) {
     var backendOpts;
     try {
         backendOpts = translateOpts(opts, {
@@ -183,7 +185,8 @@ PortolanCLI.prototype['do_add-overlay'] =
         });
         mod_common.validate.opts(backendOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     backendOpts.ip = mod_common.IPv6obj(backendOpts.ip);
@@ -204,7 +207,7 @@ PortolanCLI.prototype['do_add-overlay'].options = [
  * Add an underlay mapping
  */
 PortolanCLI.prototype['do_add-underlay'] =
-    function _addUnderlay(subcmd, opts, args, callback) {
+    function _addUnderlay(_subcmd, opts, _args, callback) {
     var backendOpts;
     try {
         backendOpts = translateOpts(opts, {
@@ -213,7 +216,8 @@ PortolanCLI.prototype['do_add-underlay'] =
         });
         mod_common.validate.opts(backendOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     backendOpts.ip = mod_common.IPv6obj(backendOpts.ip);
@@ -232,22 +236,24 @@ PortolanCLI.prototype['do_add-underlay'].options = [
  * Ping the portolan server
  */
 PortolanCLI.prototype['do_ping'] =
-    function _ping(subcmd, opts, args, callback) {
+    function _ping(_subcmd, opts, _args, callback) {
     var connOpts = {};
     setClientOpts(opts, connOpts);
 
     var client = mod_client.connect(connOpts, function _afterVl2Conn(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         client.ping(function (err2, res) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             json(res);
-            return callback();
+            callback();
         });
     });
 };
@@ -262,7 +268,7 @@ PortolanCLI.prototype['do_ping'].options = [
  * Do a L2 lookup
  */
 PortolanCLI.prototype['do_vl2-lookup'] =
-    function _vl2Req(subcmd, opts, args, callback) {
+    function _vl2Req(_subcmd, opts, _args, callback) {
     var connOpts;
     try {
         connOpts = translateOpts(opts, {
@@ -271,22 +277,25 @@ PortolanCLI.prototype['do_vl2-lookup'] =
         });
         mod_common.validate.opts(connOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     setClientOpts(opts, connOpts);
     var client = mod_client.connect(connOpts, function _afterVl2Conn(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         client.vl2Req(connOpts, function (err2, res) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             json(res);
-            return callback();
+            callback();
         });
     });
 };
@@ -303,7 +312,7 @@ PortolanCLI.prototype['do_vl2-lookup'].options = [
  * Do a L3 lookup
  */
 PortolanCLI.prototype['do_vl3-lookup'] =
-    function _vl3Req(subcmd, opts, args, callback) {
+    function _vl3Req(_subcmd, opts, _args, callback) {
     var connOpts;
     try {
         connOpts = translateOpts(opts, {
@@ -312,7 +321,8 @@ PortolanCLI.prototype['do_vl3-lookup'] =
         });
         mod_common.validate.opts(connOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     setClientOpts(opts, connOpts);
@@ -320,16 +330,18 @@ PortolanCLI.prototype['do_vl3-lookup'] =
 
     var client = mod_client.connect(connOpts, function _afterVl3Conn(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         client.vl3Req(connOpts, function (err2, res) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             json(res);
-            return callback();
+            callback();
         });
     });
 };
@@ -343,7 +355,7 @@ PortolanCLI.prototype['do_vl3-lookup'].options = [
 
 
 PortolanCLI.prototype['do_log_req'] =
-    function _logReq(subcmd, opts, args, callback) {
+    function _logReq(_subcmd, opts, _args, callback) {
 
     try {
         var connOpts = translateOpts(opts, {
@@ -352,7 +364,8 @@ PortolanCLI.prototype['do_log_req'] =
         });
         mod_common.validate.opts(connOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     setClientOpts(opts, connOpts);
@@ -362,16 +375,18 @@ PortolanCLI.prototype['do_log_req'] =
 
     var client = mod_client.connect(connOpts, function _afterLogReqConn(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         client.logReq(connOpts, function (err2, res) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             json(res);
-            return callback();
+            callback();
         });
     });
 };
@@ -384,7 +399,7 @@ PortolanCLI.prototype['do_log_req'].options = [
 ];
 
 PortolanCLI.prototype['do_log_rm'] =
-    function _logRm(subcmd, opts, args, callback) {
+    function _logRm(_subcmd, opts, _args, callback) {
 
     try {
         var connOpts = translateOpts(opts, {
@@ -392,7 +407,8 @@ PortolanCLI.prototype['do_log_rm'] =
         });
         mod_common.validate.opts(connOpts);
     } catch (optsErr) {
-        return callback(optsErr);
+        callback(optsErr);
+        return;
     }
 
     setClientOpts(opts, connOpts);
@@ -401,12 +417,18 @@ PortolanCLI.prototype['do_log_rm'] =
     config.log.debug({ msg: connOpts }, 'sending log rm request');
     var client = mod_client.connect(connOpts, function _afterLogRmConn(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         client.logRm(connOpts, function (err2, res) {
+            if (err2) {
+                callback(err2);
+                return;
+            }
+
             json(res);
-            return callback();
+            callback();
         });
     });
 };
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
index d75b7ca..ccb145b 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit d75b7ca8308be17c80e2b120f2a01d4a0c20d8a8
+Subproject commit ccb145bab281b81e1fbebd45b5d2c084c454df5d
diff --git a/lib/backend/index.js b/lib/backend/index.js
index 5a61b64..0216639 100644
--- a/lib/backend/index.js
+++ b/lib/backend/index.js
@@ -13,6 +13,8 @@
  * are gonna try to move your feet"
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 
 
diff --git a/lib/backend/json.js b/lib/backend/json.js
index bb1b84e..baaf92e 100644
--- a/lib/backend/json.js
+++ b/lib/backend/json.js
@@ -12,6 +12,8 @@
  * JSON file backend
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var common = require('../common');
 var fs = require('fs');
@@ -24,7 +26,7 @@ var util = require('util');
 
 
 
-/// --- Globals
+// --- Globals
 
 
 
@@ -67,7 +69,8 @@ var UNDERLAY_FILE = {
 function initFile(file, callback) {
     fs.exists(file.name, function _afterExists(exists) {
         if (exists) {
-            return callback();
+            callback();
+            return;
         }
 
         fs.writeFile(file.name, file.defaultValue, callback);
@@ -81,11 +84,13 @@ function initFile(file, callback) {
 function loadFile(file, callback) {
     fs.stat(file.name, function _afterStat(err, stats) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
-        if (stats.mtime.getTime() == file.mtime) {
-            return callback(null, file.contents);
+        if (stats.mtime.getTime() === file.mtime) {
+            callback(null, file.contents);
+            return;
         }
 
         file.mtime = stats.mtime.getTime();
@@ -113,7 +118,7 @@ function loadFile(file, callback) {
 function macIPrecEqual(recA, recB) {
     var ipObjA = common.IPv6obj(recA.ip);
     var ipObjB = common.IPv6obj(recB.ip);
-    if (recA.mac == recB.mac && ipObjA.toString() == ipObjB.toString()) {
+    if (recA.mac === recB.mac && ipObjA.toString() === ipObjB.toString()) {
         return true;
     }
 
@@ -131,7 +136,8 @@ function writeFile(file, records, callback) {
     fs.writeFile(filename, JSON.stringify(records, null, 2),
         function _afterWrite(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         fs.rename(filename, file.name, callback);
@@ -151,37 +157,31 @@ function JsonStore(opts) {
     opts.objectMode = true;
     this.log = opts.log.child({ component: 'json' });
 
-    if (!this instanceof JsonStore) {
-        return new JsonStore(opts);
-    }
-
     stream.Transform.call(this, opts);
 }
 
 util.inherits(JsonStore, stream.Transform);
 
 
-JsonStore.prototype._transform = function _dssTransform(msg, enc, callback) {
+JsonStore.prototype._transform = function _dssTransform(msg, _enc, callback) {
     this.log.debug({ message: msg }, 'json store message');
 
     switch (msg.svp_type) {
-        case types.svp_op.SVP_R_PING:
-            return this.ping(msg, callback);
-        case types.svp_op.SVP_R_VL2_REQ:
-            return this.vl2Req(msg, callback);
-        case types.svp_op.SVP_R_VL3_REQ:
-            return this.vl3Req(msg, callback);
-        case types.svp_op.SVP_R_LOG_REQ:
-            return this.logReq(msg, callback);
-        case types.svp_op.SVP_R_LOG_RM:
-            return this.logRm(msg, callback);
-        default:
-            this.log.warn({ message: msg }, 'unsupported svp_type');
-            // XXX: push some sort of error on here?
-            return callback();
+    case types.svp_op.SVP_R_PING:
+        return this.ping(msg, callback);
+    case types.svp_op.SVP_R_VL2_REQ:
+        return this.vl2Req(msg, callback);
+    case types.svp_op.SVP_R_VL3_REQ:
+        return this.vl3Req(msg, callback);
+    case types.svp_op.SVP_R_LOG_REQ:
+        return this.logReq(msg, callback);
+    case types.svp_op.SVP_R_LOG_RM:
+        return this.logRm(msg, callback);
+    default:
+        this.log.warn({ message: msg }, 'unsupported svp_type');
+        // XXX: push some sort of error on here?
+        return callback();
     }
-
-    return callback();
 };
 
 
@@ -207,15 +207,16 @@ JsonStore.prototype.vl2Req = function _jsonVl2Req(msg, callback) {
     loadFile(MAC_IP_FILE, function _afterVl2Load(err, table) {
         if (err) {
             // XXX: what to do here?
-            return callback();
+            callback();
+            return;
         }
 
         var found;
 
         for (var r in table) {
             var rec = table[r];
-            if (rec.mac == msg.svp_msg.vl2_mac
-                && rec.vnet_id == msg.svp_msg.vl2_vnetid) {
+            if (rec.mac === msg.svp_msg.vl2_mac &&
+                rec.vnet_id === msg.svp_msg.vl2_vnetid) {
                 found = rec;
                 break;
             }
@@ -225,7 +226,8 @@ JsonStore.prototype.vl2Req = function _jsonVl2Req(msg, callback) {
             self.log.debug({ mac: rec.mac, vnet_id: rec.vnet_id },
                 'mac / vnet_id not found');
             self.push(common.vl2NotFoundMsg(msg));
-            return callback();
+            callback();
+            return;
         }
 
         loadFile(UNDERLAY_FILE, function _aftervl2underlay(cnErr, map) {
@@ -262,7 +264,8 @@ JsonStore.prototype.vl3Req = function _jsonVl3Req(msg, callback) {
     loadFile(MAC_IP_FILE, function _afterVl3Load(err, table) {
         if (err) {
             // XXX: what to do here?
-            return callback();
+            callback();
+            return;
         }
 
         var found;
@@ -272,7 +275,7 @@ JsonStore.prototype.vl3Req = function _jsonVl3Req(msg, callback) {
             var rec = table[r];
             // XXX: move the .parse() to when we load?
             var recIP = ipaddr.parse(rec.ip).toString();
-            if (recIP == msgIPstr && rec.vnet_id == msg.svp_msg.vl3_vnetid) {
+            if (recIP === msgIPstr && rec.vnet_id === msg.svp_msg.vl3_vnetid) {
                 found = rec;
                 break;
             }
@@ -282,7 +285,8 @@ JsonStore.prototype.vl3Req = function _jsonVl3Req(msg, callback) {
             self.log.debug({ ip: msgIPstr, vnet_id: rec.vnet_id },
                 'IP / vnet_id not found');
             self.push(common.vl3NotFoundMsg(msg));
-            return callback();
+            callback();
+            return;
         }
 
         loadFile(UNDERLAY_FILE, function _aftervl2underlay(cnErr, map) {
@@ -313,15 +317,21 @@ JsonStore.prototype.vl3Req = function _jsonVl3Req(msg, callback) {
 /**
  * Handle a log request
  */
-JsonStore.prototype.logReq = function _jsonLogReq(msg, callback) {
+JsonStore.prototype.logReq = function _jsonLogReq(_msg, callback) {
+    this.log.warn('LOG_REQ messages not supported by JSON backend');
+    this.push(common.fatalResponse(types.op.SVP_R_LOG_REQ));
 
+    callback();
 };
 
 /**
  * Handle a log rm request
  */
-JsonStore.prototype.logRm = function _jsonLogRm(msg, callback) {
+JsonStore.prototype.logRm = function _jsonLogRm(_msg, callback) {
+    this.log.warn('LOG_RM messages not supported by JSON backend');
+    this.push(common.fatalResponse(types.op.SVP_R_LOG_RM));
 
+    callback();
 };
 
 // --- Exports
@@ -334,14 +344,16 @@ JsonStore.prototype.logRm = function _jsonLogRm(msg, callback) {
 function addOverlayMapping(opts, callback) {
     loadFile(MAC_IP_FILE, function _afterOverlayLoad(lErr, records) {
         if (lErr) {
-            return callback(lErr);
+            callback(lErr);
+            return;
         }
 
         for (var r in records) {
             var rec = records[r];
 
             if (macIPrecEqual(rec, opts)) {
-                return callback(new Error('record already exists'));
+                callback(new Error('record already exists'));
+                return;
             }
         }
 
@@ -363,11 +375,13 @@ function addOverlayMapping(opts, callback) {
 function addUnderlayMapping(opts, callback) {
     loadFile(UNDERLAY_FILE, function _afterUnderlayLoad(lErr, cns) {
         if (lErr) {
-            return callback(lErr);
+            callback(lErr);
+            return;
         }
 
         if (cns.hasOwnProperty(opts.cn_uuid)) {
-            return callback(new Error('record already exists'));
+            callback(new Error('record already exists'));
+            return;
         }
 
         cns[opts.cn_uuid] = { ip: opts.ip.toString() };
@@ -396,7 +410,8 @@ function initJsonStore(config, callback) {
 
     initFile(MAC_IP_FILE, function _afterMacInit(err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         initFile(UNDERLAY_FILE, callback);
diff --git a/lib/backend/moray.js b/lib/backend/moray.js
index 2ccecbd..aed1a99 100644
--- a/lib/backend/moray.js
+++ b/lib/backend/moray.js
@@ -12,6 +12,8 @@
  * Moray backend stream
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('../common');
@@ -45,13 +47,6 @@ function closeClient() {
 }
 
 
-function getClient() {
-    if (SHARED.moray) {
-        return SHARED.moray;
-    }
-}
-
-
 /**
  * Initialize the moray client and the portolan moray module's caches
  */
@@ -61,7 +56,8 @@ function init(config, callback) {
 
     mod_moray.createClient(config, function _afterClient(err, client) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         SHARED.moray = client;
@@ -104,16 +100,12 @@ function MorayStore(opts) {
     self.moray = opts.moray;
     self.log = opts.log;
 
-    if (!this instanceof MorayStore) {
-        return new MorayStore(opts);
-    }
-
     stream.Transform.call(this, opts);
 }
 util.inherits(MorayStore, stream.Transform);
 
 
-MorayStore.prototype._transform = function _transform(input, enc, callback) {
+MorayStore.prototype._transform = function _transform(input, _enc, callback) {
     var log = common.childLogger(this.log, input);
 
     log.debug({ message: input }, 'moray store message');
@@ -121,13 +113,15 @@ MorayStore.prototype._transform = function _transform(input, enc, callback) {
     var self = this;
     var type = input.svp_type;
     if (!type || !types.svp_op_names[type]) {
-        return callback(new Error('invalid type %s', type));
+        callback(new Error('invalid type %s', type));
+        return;
     }
 
     var op = types.svp_op_names[type].toLowerCase();
     var fn = '_op_' + op;
     if (!self[fn] || typeof (self[fn]) !== 'function') {
-        return callback(new Error('unknown operation %s', op));
+        callback(new Error('unknown operation %s', op));
+        return;
     }
 
     self[fn](input, log, function opDone(err, output) {
@@ -165,7 +159,7 @@ MorayStore.prototype._get_cn_by_ip = function _get_by_ip(ip, callback) {
 };
 
 MorayStore.prototype._op_svp_r_ping =
-        function _op_svp_r_ping(input, log, callback) {
+    function _op_svp_r_ping(_input, _log, callback) {
     var type  = types.svp_op.SVP_R_PONG;
     var output = {
         svp_type: type
@@ -177,7 +171,7 @@ MorayStore.prototype._op_svp_r_ping =
 
 
 MorayStore.prototype._op_svp_r_vl2_req =
-        function _op_svp_r_vl2_req(input, log, callback) {
+    function _op_svp_r_vl2_req(input, log, callback) {
     var self = this;
 
     mod_portolan_moray.vl2Lookup({
@@ -189,10 +183,12 @@ MorayStore.prototype._op_svp_r_vl2_req =
         if (vl2Err) {
             if (vl2Err.code === 'ENOENT') {
                 log.debug('vl2 mapping not found');
-                return callback(null, common.vl2NotFoundMsg(input));
+                callback(null, common.vl2NotFoundMsg(input));
+                return;
             }
 
-            return callback(vl2Err);
+            callback(vl2Err);
+            return;
         }
 
         self._get_cn(mapping.cn_uuid, function gotVl2Cn(cnErr, cn) {
@@ -217,7 +213,7 @@ MorayStore.prototype._op_svp_r_vl2_req =
 
 
 MorayStore.prototype._op_svp_r_vl3_req =
-        function _op_svp_r_vl3_req(input, log, callback) {
+    function _op_svp_r_vl3_req(input, log, callback) {
     var self = this;
 
     mod_portolan_moray.vl3Lookup({
@@ -229,10 +225,12 @@ MorayStore.prototype._op_svp_r_vl3_req =
         if (vl3Err) {
             if (vl3Err.code === 'ENOENT') {
                 log.debug('vl3 mapping not found');
-                return callback(null, common.vl3NotFoundMsg(input));
+                callback(null, common.vl3NotFoundMsg(input));
+                return;
             }
 
-            return callback(vl3Err);
+            callback(vl3Err);
+            return;
         }
 
         self._get_cn(mapping.cn_uuid, function (cnErr, cn) {
@@ -264,13 +262,15 @@ MorayStore.prototype._op_svp_r_log_req =
     var lr_ip = common.ipToString(input.svp_msg.lr_ip);
 
     self._get_cn_by_ip(lr_ip, function (ulErr, mapping) {
-
         if (ulErr) {
             if (ulErr.code === 'ENOENT') {
                 log.error(ulErr, 'mapping not found for ip=%s', lr_ip);
-                return callback(ulErr);
+                callback(ulErr);
+                return;
             }
-            return callback(ulErr);
+
+            callback(ulErr);
+            return;
         }
 
         log.debug({ ulErr: ulErr, ip: lr_ip, mapping: mapping },
@@ -325,7 +325,7 @@ MorayStore.prototype._op_svp_r_log_req =
                 output.svp_msg.log_data.push(logs[i]);
             }
 
-            return callback(null, output);
+            callback(null, output);
         });
     });
 };
@@ -440,7 +440,6 @@ function removeUnderlayMapping(opts, callback) {
 module.exports = {
     close: closeClient,
     createStream: createStream,
-    getClient: getClient,
     init: init,
 
     addOverlayMapping: addOverlayMapping,
diff --git a/lib/client.js b/lib/client.js
index c9e3e81..c4124c5 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -12,6 +12,8 @@
  * Portolan client
  */
 
+'use strict';
+
 var mod_assert = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_common = require('./common');
diff --git a/lib/common.js b/lib/common.js
index 091b66b..677f9e9 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -12,6 +12,8 @@
  * Utility functions
  */
 
+'use strict';
+
 var ipaddr = require('ipaddr.js');
 var types = require('./types');
 var fmt = require('util').format;
@@ -63,12 +65,12 @@ function createChildLogger(log, msg) {
  * regardless of the input type.
  */
 function createv6obj(ipStr) {
-    if (typeof (ipStr) == 'object') {
+    if (typeof (ipStr) === 'object') {
         return ipStr;
     }
 
     var ipObj = ipaddr.process(ipStr);
-    if (ipObj.kind() == 'ipv4') {
+    if (ipObj.kind() === 'ipv4') {
         ipObj = ipObj.toIPv4MappedAddress();
     }
 
@@ -99,7 +101,7 @@ function stringToIp(ip) {
 function macArrToInt(arr) {
     return parseInt(arr.map(function (n) {
         var b = n.toString(16);
-        if (b.length == 1) {
+        if (b.length === 1) {
             return '0' + b;
         }
 
@@ -170,7 +172,7 @@ function uuidToArr(uuid) {
     var nums = [];
 
     for (var i = 0; i < 16; i++) {
-        nums.push(str.substr(2*i, 2));
+        nums.push(str.substr(2 * i, 2));
     }
 
     return nums.map(function (num) {
diff --git a/lib/crc32.js b/lib/crc32.js
index 5178b34..d3d5d93 100644
--- a/lib/crc32.js
+++ b/lib/crc32.js
@@ -2,6 +2,8 @@
 // Copyright (c) 2013, Joyent, Inc. All rights reserved.
 // vim: set ts=4 sts=4 sw=4 et:
 
+'use strict';
+
 // CRC polynomial 0xedb88320
 var CRC32_TABLE = [
     0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
diff --git a/lib/framer.js b/lib/framer.js
index 2e9fd9e..db04a5c 100644
--- a/lib/framer.js
+++ b/lib/framer.js
@@ -12,6 +12,8 @@
  * SDC VXLAN Protocol framing stream
  */
 
+'use strict';
+
 var mod_assert = require('assert-plus');
 var mod_crc = require('./crc32.js');
 var mod_stream = require('stream');
@@ -22,13 +24,9 @@ var mod_util = require('util');
 // --- Internal
 
 function SVPFramer(opts) {
-    this.log = opts.log.child({ component: 'framer '});
+    this.log = opts.log.child({ component: 'framer' });
     this.svpf_msgBuffer = new Buffer(0);
 
-    if (!this instanceof SVPFramer) {
-        return new SVPFramer(opts);
-    }
-
     mod_stream.Transform.call(this, {
         objectMode: true,
         highWaterMark: 0
@@ -79,7 +77,7 @@ SVPFramer.prototype.crc = function crc(len) {
  *   - repeat from header length check.
  */
 SVPFramer.prototype._transform =
-    function _svpFrameTransform(chunk, end, callback) {
+    function _svpFrameTransform(chunk, _enc, callback) {
 
     mod_assert.ok(Buffer.isBuffer(chunk), 'msg Buffer');
 
diff --git a/lib/moray.js b/lib/moray.js
index f4660a2..d931da5 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -12,6 +12,8 @@
  * Moray-related functions
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_moray = require('moray');
 
diff --git a/lib/parser.js b/lib/parser.js
index b2193bd..65f5f4d 100644
--- a/lib/parser.js
+++ b/lib/parser.js
@@ -12,6 +12,8 @@
  * SDC VXLAN Protocol parser
  */
 
+'use strict';
+
 var mod_assert = require('assert-plus');
 var mod_common = require('./common');
 var mod_ipaddr = require('ipaddr.js');
@@ -31,14 +33,14 @@ var mod_util = require('util');
  */
 function ipFromArr(arr) {
     return new mod_ipaddr.IPv6([
-        (arr[0] << 8) | arr [1],
-        (arr[2] << 8) | arr [3],
-        (arr[4] << 8) | arr [5],
-        (arr[6] << 8) | arr [7],
-        (arr[8] << 8) | arr [9],
-        (arr[10] << 8) | arr [11],
-        (arr[12] << 8) | arr [13],
-        (arr[14] << 8) | arr [15]
+        (arr[0] << 8) | arr[1],
+        (arr[2] << 8) | arr[3],
+        (arr[4] << 8) | arr[5],
+        (arr[6] << 8) | arr[7],
+        (arr[8] << 8) | arr[9],
+        (arr[10] << 8) | arr[11],
+        (arr[12] << 8) | arr[13],
+        (arr[14] << 8) | arr[15]
     ]);
 }
 
@@ -54,10 +56,6 @@ function ipFromArr(arr) {
 function SVPparser(opts) {
     this.log = opts.log.child({ component: 'parser' });
 
-    if (!this instanceof SVPparser) {
-        return new SVPparser(opts);
-    }
-
     mod_stream.Transform.call(this, {
         objectMode: true,
         highWaterMark: 0
@@ -67,7 +65,7 @@ function SVPparser(opts) {
 mod_util.inherits(SVPparser, mod_stream.Transform);
 
 SVPparser.prototype._transform =
-        function _svpParseTransform(msg, enc, callback) {
+    function _svpParseTransform(msg, _enc, callback) {
 
     mod_assert.object(msg, 'msg object');
     mod_assert.object(msg.svp_req, 'svp_req object');
@@ -87,7 +85,8 @@ SVPparser.prototype._transform =
         // We don't have a way of formulating a response yet
         log.warn({ hdr: msg.svp_req.hdr }, 'unsupported svp_op');
         // XXX: need to pass on an error
-        return callback();
+        callback();
+        return;
     }
 
     var logOpts = {
@@ -116,146 +115,155 @@ SVPparser.prototype._transform =
     };
 
     switch (msg.svp_req.hdr.svp_op) {
-        case mod_types.svp_op.SVP_R_PING:
-            // No value: just return the header
-            break;
-
-        case mod_types.svp_op.SVP_R_PONG:
-            // No value: just return the header
-            break;
-
-        case mod_types.svp_op.SVP_R_VL2_ACK:
-            rec.svp_msg = {
-                vl2_status: payload.body.sl2a_status,
-                vl2_port: payload.body.sl2a_port,
-                vl2_ip: ipFromArr(payload.body.sl2a_addr)
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_VL2_REQ:
-            rec.svp_msg = {
-                vl2_mac: mod_common.macArrToInt(payload.body.sl2r_mac),
-                vl2_vnet_id: payload.body.sl2r_vnetid
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_VL3_REQ:
-            // XXX: return error if sl3r_type is not 1 or 2
-            var ip = ipFromArr(payload.body.sl3r_ip);
-            rec.svp_msg = {
-                vl3_ip: ip,
-                vl3_vnet_id: payload.body.sl3r_vnetid
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_VL3_ACK:
-            rec.svp_msg = {
-                vl3_status: payload.body.sl3a_status,
-                vl3_mac: mod_common.macArrToInt(payload.body.sl3a_mac),
-                vl3_port: payload.body.sl3a_uport,
-                vl3_ip: ipFromArr(payload.body.sl3a_uip)
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_LOG_REQ:
-            rec.svp_msg = {
-                lr_ip: ipFromArr(payload.body.svlr_ip),
-                lr_count: payload.body.svlr_count
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_LOG_ACK:
-            var logSize;
-            var logType;
-            var logTypedef;
-            var la_record;
-            var la_data = [];
-            offset = opInfo.sizeofReq;
-
-            log.trace({ hdr: msg.svp_req.hdr, payload: payload,
-                buf: msg.svp_buf, offset: offset, hdr: msg.svp_req.hdr },
-                'Parser: LOG_ACK message');
-
-            // workaround ctypes array limitations, see also serialize.js
-            while (offset < msg.svp_buf.length) {
-                logType = mod_types.parser.readData([
-                    { svp_log_type: { type: 'uint32_t' } }
-                ], msg.svp_buf, offset).svp_log_type;
-                logSize = mod_types.sizeof[
-                    mod_types.svp_log_type_names[logType]
-                ];
-
-                if (offset + logSize > msg.svp_buf.length) {
-                    log.warn({ buf_length: msg.svp_buf.length, offset: offset,
-                        logSize: logSize }, 'malformed log_ack: buffer '
-                        + 'length insufficient for log type');
-                    // XXX - return an actual error.
-                    return callback();
-                }
-
-                logTypedef = mod_types.svp_log_typedef[
-                    mod_types.svp_log_type_names[logType]
-                ];
-
-                la_record = mod_types.parser.readData([
-                    { log: { type: logTypedef } }
-                ], msg.svp_buf, offset).log;
-
-                if (la_record.svl3_ip) {
-                    la_record.svl3_ip = ipFromArr(la_record.svl3_ip);
-                }
-
-                la_data.push(la_record);
-                offset += logSize;
-            }
-
-            rec.svp_msg = {
-                la_status: payload.body.svla_status,
-                la_data: la_data
-            };
-            break;
-
-        case mod_types.svp_op.SVP_R_LOG_RM:
-            offset = opInfo.sizeofReq;
-            var count = payload.body.svrr_count;
-
-            rec.svp_msg = {
-                rr_count: count,
-                rr_ids: []
-            };
-
-            if (offset + count * 16 != msg.svp_buf.length) {
-                log.warn({ buf_length: msg.svp_buf.length, count: count,
-                    offset: offset },
-                    'malformed log_rm: buffer length incorrect');
+    case mod_types.svp_op.SVP_R_PING:
+        // No value: just return the header
+        break;
+
+    case mod_types.svp_op.SVP_R_PONG:
+        // No value: just return the header
+        break;
+
+    case mod_types.svp_op.SVP_R_VL2_ACK:
+        rec.svp_msg = {
+            vl2_status: payload.body.sl2a_status,
+            vl2_port: payload.body.sl2a_port,
+            vl2_ip: ipFromArr(payload.body.sl2a_addr)
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_VL2_REQ:
+        rec.svp_msg = {
+            vl2_mac: mod_common.macArrToInt(payload.body.sl2r_mac),
+            vl2_vnet_id: payload.body.sl2r_vnetid
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_VL3_REQ:
+        // XXX: return error if sl3r_type is not 1 or 2
+        var ip = ipFromArr(payload.body.sl3r_ip);
+        rec.svp_msg = {
+            vl3_ip: ip,
+            vl3_vnet_id: payload.body.sl3r_vnetid
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_VL3_ACK:
+        rec.svp_msg = {
+            vl3_status: payload.body.sl3a_status,
+            vl3_mac: mod_common.macArrToInt(payload.body.sl3a_mac),
+            vl3_port: payload.body.sl3a_uport,
+            vl3_ip: ipFromArr(payload.body.sl3a_uip)
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_LOG_REQ:
+        rec.svp_msg = {
+            lr_ip: ipFromArr(payload.body.svlr_ip),
+            lr_count: payload.body.svlr_count
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_LOG_ACK:
+        var logSize;
+        var logType;
+        var logTypedef;
+        var la_record;
+        var la_data = [];
+        offset = opInfo.sizeofReq;
+
+        log.trace({
+            hdr: msg.svp_req.hdr,
+            payload: payload,
+            buf: msg.svp_buf,
+            offset: offset
+        }, 'Parser: LOG_ACK message');
+
+        // workaround ctypes array limitations, see also serialize.js
+        while (offset < msg.svp_buf.length) {
+            logType = mod_types.parser.readData([
+                { svp_log_type: { type: 'uint32_t' } }
+            ], msg.svp_buf, offset).svp_log_type;
+            logSize = mod_types.sizeof[
+                mod_types.svp_log_type_names[logType]
+            ];
+
+            if (offset + logSize > msg.svp_buf.length) {
+                log.warn({
+                    buf_length: msg.svp_buf.length,
+                    offset: offset,
+                    logSize: logSize
+                }, 'malformed log_ack: buffer is too short for log type');
                 // XXX - return an actual error.
-                return callback();
+                callback();
+                return;
             }
 
-            for (var i = 0; i < count; i++) {
-                var arr = (mod_types.parser.readData([
-                    { id: { type: 'uint8_t[16]' } }
-                ], msg.svp_buf, offset + i * 16)).id;
-                rec.svp_msg.rr_ids.push(mod_common.arrToUuid(arr));
-            }
+            logTypedef = mod_types.svp_log_typedef[
+                mod_types.svp_log_type_names[logType]
+            ];
 
-            break;
+            la_record = mod_types.parser.readData([
+                { log: { type: logTypedef } }
+            ], msg.svp_buf, offset).log;
 
-        case mod_types.svp_op.SVP_R_LOG_RM_ACK:
-            rec.svp_msg = {
-                ra_status: payload.body.svra_status
-            };
-            break;
+            if (la_record.svl3_ip) {
+                la_record.svl3_ip = ipFromArr(la_record.svl3_ip);
+            }
 
-        default:
-            log.warn({ hdr: msg.svp_req.hdr, body: payload.body },
-                'unknown message svp_op');
+            la_data.push(la_record);
+            offset += logSize;
+        }
+
+        rec.svp_msg = {
+            la_status: payload.body.svla_status,
+            la_data: la_data
+        };
+        break;
+
+    case mod_types.svp_op.SVP_R_LOG_RM:
+        offset = opInfo.sizeofReq;
+        var count = payload.body.svrr_count;
+
+        rec.svp_msg = {
+            rr_count: count,
+            rr_ids: []
+        };
+
+        if (offset + count * 16 !== msg.svp_buf.length) {
+            log.warn({ buf_length: msg.svp_buf.length, count: count,
+                offset: offset },
+                'malformed log_rm: buffer length incorrect');
+            // XXX - return an actual error.
+            callback();
             return;
+        }
+
+        for (var i = 0; i < count; i++) {
+            var arr = (mod_types.parser.readData([
+                { id: { type: 'uint8_t[16]' } }
+            ], msg.svp_buf, offset + i * 16)).id;
+            rec.svp_msg.rr_ids.push(mod_common.arrToUuid(arr));
+        }
+
+        break;
+
+    case mod_types.svp_op.SVP_R_LOG_RM_ACK:
+        rec.svp_msg = {
+            ra_status: payload.body.svra_status
+        };
+        break;
+
+    default:
+        log.warn({ hdr: msg.svp_req.hdr, body: payload.body },
+            'unknown message svp_op');
+        // XXX - Return an error here?
+        callback();
+        return;
     }
 
     log.trace({ rec: rec }, 'parser: record');
     this.push(rec);
-    return callback();
+    callback();
 };
 
 
diff --git a/lib/portolan.js b/lib/portolan.js
index 5045498..1c05b20 100644
--- a/lib/portolan.js
+++ b/lib/portolan.js
@@ -12,6 +12,8 @@
  * Portolan server object
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var backend = require('./backend');
@@ -43,7 +45,8 @@ function createServer(config, callback) {
     backend.init(config, function _afterBackendInit(initErr) {
         if (initErr) {
             if (callback) {
-                return callback(initErr);
+                callback(initErr);
+                return;
             }
 
             throw initErr;
@@ -66,7 +69,8 @@ function createServer(config, callback) {
             var addr = server.address();
             log.info(addr, 'server listening');
             if (callback) {
-                return callback(null, server);
+                callback(null, server);
+                return;
             }
         });
     });
diff --git a/lib/serialize.js b/lib/serialize.js
index fd9387b..c990e40 100644
--- a/lib/serialize.js
+++ b/lib/serialize.js
@@ -12,7 +12,8 @@
  * SDC VLAN Protocol serializer
  */
 
-var mod_assert = require('assert-plus');
+'use strict';
+
 var common = require('./common');
 var stream = require('stream');
 var types = require('./types');
@@ -29,10 +30,6 @@ function SVPserializer(opts) {
     opts.objectMode = true;
     this.log = opts.log.child({ component: 'serializer' });
 
-    if (!this instanceof SVPserializer) {
-        return new SVPserializer(opts);
-    }
-
     stream.Transform.call(this, opts);
 }
 
@@ -46,7 +43,7 @@ util.inherits(SVPserializer, stream.Transform);
  * values to be serialized individually.
  */
 SVPserializer.prototype._transform =
-        function _svpSerTransform(msg, enc, callback) {
+    function _svpSerTransform(msg, _enc, callback) {
     var log = common.childLogger(this.log, msg);
     log.debug({ message: msg }, 'serialize message');
 
@@ -62,146 +59,146 @@ SVPserializer.prototype._transform =
 
     // XXX: rename to svp_op?
     switch (msg.svp_type) {
-        case types.svp_op.SVP_R_PING:
-            // No value: just return the header
-            break;
-
-        case types.svp_op.SVP_R_PONG:
-            // No value: just return the header
-            break;
-
-        case types.svp_op.SVP_R_VL2_ACK:
-            fixedPart = [
-                msg.svp_msg.vl2_status,
-                msg.svp_msg.vl2_port,
-                msg.svp_msg.vl2_addr.toByteArray()
-            ];
-            break;
-
-        case types.svp_op.SVP_R_VL2_REQ:
-            fixedPart = [
-                common.macToArr(msg.svp_msg.vl2_mac),
-                [ 0, 0 ], // padding
-                msg.svp_msg.vl2_vnetid
-            ];
-            break;
-
-        case types.svp_op.SVP_R_VL3_ACK:
-            fixedPart = [
-                msg.svp_msg.vl3_status,
-                common.intToMacArrayOfNums(msg.svp_msg.vl3_mac),
-                msg.svp_msg.vl3_port,
-                msg.svp_msg.vl3_addr.toByteArray()
-            ];
-            break;
-
-        case types.svp_op.SVP_R_VL3_REQ:
-            fixedPart = [
-                msg.svp_msg.vl3_ip.toByteArray(),
-                (msg.svp_msg.vl3_ip.isIPv4MappedAddress() ?
-                    types.svp_vl3_type.SVP_VL3_IP :
-                    types.svp_vl3_type.SVP_VL3_IPV6),
-                msg.svp_msg.vl3_vnetid
-            ];
-            break;
-
-        case types.svp_op.SVP_R_LOG_REQ:
-            fixedPart = [
-                msg.svp_msg.lr_count,
-                msg.svp_msg.lr_ip.toByteArray(),
-                (msg.svp_msg.lr_ip.isIPv4MappedAddress() ?
-                    types.svp_vl3_type.SVP_VL3_IP :
-                    types.svp_vl3_type.SVP_VL3_IPV6)
-            ];
-            break;
-
-        case types.svp_op.SVP_R_LOG_ACK:
-            // See block comment re: construction of this message.
-            fixedPart = [
-                msg.svp_msg.log_status
+    case types.svp_op.SVP_R_PING:
+        // No value: just return the header
+        break;
+
+    case types.svp_op.SVP_R_PONG:
+        // No value: just return the header
+        break;
+
+    case types.svp_op.SVP_R_VL2_ACK:
+        fixedPart = [
+            msg.svp_msg.vl2_status,
+            msg.svp_msg.vl2_port,
+            msg.svp_msg.vl2_addr.toByteArray()
+        ];
+        break;
+
+    case types.svp_op.SVP_R_VL2_REQ:
+        fixedPart = [
+            common.macToArr(msg.svp_msg.vl2_mac),
+            [ 0, 0 ], // padding
+            msg.svp_msg.vl2_vnetid
+        ];
+        break;
+
+    case types.svp_op.SVP_R_VL3_ACK:
+        fixedPart = [
+            msg.svp_msg.vl3_status,
+            common.intToMacArrayOfNums(msg.svp_msg.vl3_mac),
+            msg.svp_msg.vl3_port,
+            msg.svp_msg.vl3_addr.toByteArray()
+        ];
+        break;
+
+    case types.svp_op.SVP_R_VL3_REQ:
+        fixedPart = [
+            msg.svp_msg.vl3_ip.toByteArray(),
+            (msg.svp_msg.vl3_ip.isIPv4MappedAddress() ?
+                types.svp_vl3_type.SVP_VL3_IP :
+                types.svp_vl3_type.SVP_VL3_IPV6),
+            msg.svp_msg.vl3_vnetid
+        ];
+        break;
+
+    case types.svp_op.SVP_R_LOG_REQ:
+        fixedPart = [
+            msg.svp_msg.lr_count,
+            msg.svp_msg.lr_ip.toByteArray(),
+            (msg.svp_msg.lr_ip.isIPv4MappedAddress() ?
+                types.svp_vl3_type.SVP_VL3_IP :
+                types.svp_vl3_type.SVP_VL3_IPV6)
+        ];
+        break;
+
+    case types.svp_op.SVP_R_LOG_ACK:
+        // See block comment re: construction of this message.
+        fixedPart = [
+            msg.svp_msg.log_status
+        ];
+
+        for (var i_log = 0; i_log < msg.svp_msg.log_data.length; i_log++) {
+            var datum = msg.svp_msg.log_data[i_log];
+
+            var svpLogType = types.svp_log_type[datum.record.type];
+
+            log.trace({datum: datum}, 'datum to serialize');
+
+            // common initial section
+            var record = [
+                svpLogType,
+                common.uuidToArr(datum.id)
             ];
 
-            for (var i_log = 0; i_log < msg.svp_msg.log_data.length; i_log++) {
-                var datum = msg.svp_msg.log_data[i_log];
-
-                var svpLogType = types.svp_log_type[datum.record.type];
-
-                log.trace({datum: datum}, 'datum to serialize');
-
-                // common initial section
-                var record = [
-                    svpLogType,
-                    common.uuidToArr(datum.id)
-                ];
-
-                switch (svpLogType) {
-                case types.svp_log_type.SVP_LOG_VL2:
-                    record.push(common.intToMacArrayOfNums(datum.record.mac));
-                    record.push([0, 0]); // padding
-                    record.push(datum.record.vnet_id);
-                    break;
-
-                case types.svp_log_type.SVP_LOG_VL3:
-                    record.push(datum.record.ip.toByteArray());
-                    record.push([0, 0]); // padding
-                    record.push(datum.record.vlan);
-                    record.push(datum.record.vnet_id);
-                    break;
-
-                default:
-                    // XXX - unrecoverable. Needs to err.
-                    log.warn({ log_record: datum },
-                        'unknown svp_log_type');
-                    return callback();
-                }
-
-                // Works around ctypes limitation on variable-length arrays by
-                // pushing each log to the 'array part' of the message,
-                // serialized below.
-                arrPart.push({
-                    log: {
-                        type: types.svp_log_typedef[datum.record.type],
-                        value: record
-                    },
-                    offset: bufSize
-                });
-                bufSize += types.sizeof[datum.record.type];
+            switch (svpLogType) {
+            case types.svp_log_type.SVP_LOG_VL2:
+                record.push(common.intToMacArrayOfNums(datum.record.mac));
+                record.push([0, 0]); // padding
+                record.push(datum.record.vnet_id);
+                break;
+
+            case types.svp_log_type.SVP_LOG_VL3:
+                record.push(datum.record.ip.toByteArray());
+                record.push([0, 0]); // padding
+                record.push(datum.record.vlan);
+                record.push(datum.record.vnet_id);
+                break;
+
+            default:
+                // XXX - unrecoverable. Needs to err.
+                log.warn({ log_record: datum },
+                    'unknown svp_log_type');
+                return callback();
             }
-            break;
-
-        case types.svp_op.SVP_R_LOG_RM:
-            log.trace({ ids: msg.svp_msg.rr_ids }, 'LOG_RM requested');
-            fixedPart = [
-                msg.svp_msg.rr_count
-            ];
 
-
-            // Works around ctypes limitations in variable length arrays by
-            // pushing each of the log_rm UUIDs to the 'array part' of the
-            // message.
-            arrPart = msg.svp_msg.rr_ids.map(function (id, i_id) {
-                return {
-                    id: {
-                        type: 'uint8_t[16]',
-                        value: common.uuidToArr(msg.svp_msg.rr_ids[i_id])
-                    },
-                    offset: bufSize + i_id * 16
-                };
+            // Works around ctypes limitation on variable-length arrays by
+            // pushing each log to the 'array part' of the message,
+            // serialized below.
+            arrPart.push({
+                log: {
+                    type: types.svp_log_typedef[datum.record.type],
+                    value: record
+                },
+                offset: bufSize
             });
-            bufSize += arrPart.length * 16;
-
-            log.trace({ arrPart: arrPart }, 'log_rr ids');
-            break;
-
-        case types.svp_op.SVP_R_LOG_RM_ACK:
-            fixedPart = [
-                msg.svp_msg.ra_status
-            ];
-            break;
-
-        default:
-            log.warn({ message: msg }, 'unknown message svp_type');
-            return callback();
+            bufSize += types.sizeof[datum.record.type];
+        }
+        break;
+
+    case types.svp_op.SVP_R_LOG_RM:
+        log.trace({ ids: msg.svp_msg.rr_ids }, 'LOG_RM requested');
+        fixedPart = [
+            msg.svp_msg.rr_count
+        ];
+
+
+        // Works around ctypes limitations in variable length arrays by
+        // pushing each of the log_rm UUIDs to the 'array part' of the
+        // message.
+        arrPart = msg.svp_msg.rr_ids.map(function (uuid, i_id) {
+            return {
+                id: {
+                    type: 'uint8_t[16]',
+                    value: common.uuidToArr(uuid)
+                },
+                offset: bufSize + i_id * 16
+            };
+        });
+        bufSize += arrPart.length * 16;
+
+        log.trace({ arrPart: arrPart }, 'log_rr ids');
+        break;
+
+    case types.svp_op.SVP_R_LOG_RM_ACK:
+        fixedPart = [
+            msg.svp_msg.ra_status
+        ];
+        break;
+
+    default:
+        log.warn({ message: msg }, 'unknown message svp_type');
+        return callback();
     }
 
     bufData = [
@@ -254,8 +251,8 @@ SVPserializer.prototype._transform =
     buf[0xe] = (crc32 & 0x0000ff00) >>> 8;
     buf[0xf] = crc32 & 0x000000ff;
 
-    if (msg.svp_type === types.svp_op.SVP_R_LOG_ACK
-        || msg.svp_type === types.svp_op.SVP_R_LOG_RM_ACK) {
+    if (msg.svp_type === types.svp_op.SVP_R_LOG_ACK ||
+        msg.svp_type === types.svp_op.SVP_R_LOG_RM_ACK) {
         log.trace({ buf: buf }, 'wrote a buffer');
     }
 
diff --git a/lib/types.js b/lib/types.js
index 860ea25..4733df1 100644
--- a/lib/types.js
+++ b/lib/types.js
@@ -12,10 +12,11 @@
  * Portolan struct defininitions for the SDC VXLAN Protocol
  */
 
+'use strict';
+
 var ctype = require('ctype');
 var fs = require('fs');
 var path = require('path');
-var util = require('util');
 
 
 
@@ -109,8 +110,8 @@ var svp_vl3_type = {
 };
 
 var svp_log_type = {
-    SVP_LOG_VL2 : 1,
-    SVP_LOG_VL3 : 2
+    SVP_LOG_VL2: 1,
+    SVP_LOG_VL3: 2
 };
 
 var svp_log_typedef = {
diff --git a/package.json b/package.json
index e20c394..90a7d83 100644
--- a/package.json
+++ b/package.json
@@ -18,12 +18,14 @@
         "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
         "node-uuid": "1.4.2",
         "portolan-moray": "git+https://github.com/joyent/sdc-portolan-moray.git#72eb031",
+        "tape": "3.0.3",
         "vasync": "1.6.2",
         "verror": "1.6.0",
         "vstream": "0.1.0"
     },
     "devDependencies": {
-        "tape": "3.0.3"
+        "eslint": "2.13.1",
+        "eslint-plugin-joyent": "~1.3.0"
     },
     "license": "MPL-2.0"
 }
diff --git a/test/integration/backend.test.js b/test/integration/backend.test.js
index fd02afc..7ea3c81 100644
--- a/test/integration/backend.test.js
+++ b/test/integration/backend.test.js
@@ -8,6 +8,8 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+'use strict';
+
 var mod_common = require('../../lib/common');
 var mod_mapping = require('../lib/mapping');
 var mod_req = require('../lib/request');
diff --git a/test/lib/client.js b/test/lib/client.js
index 7ae0bf1..457fdf8 100644
--- a/test/lib/client.js
+++ b/test/lib/client.js
@@ -8,6 +8,8 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+'use strict';
+
 var config = require('./config');
 var mod_client = require('../../lib/client');
 var mod_log = require('./log');
@@ -39,7 +41,8 @@ function closeClient(t) {
 
 function getClient(callback) {
     if (CLIENT) {
-        return callback(null, CLIENT);
+        callback(null, CLIENT);
+        return;
     }
 
     var clientConfig = {
@@ -53,7 +56,7 @@ function getClient(callback) {
             throw cErr;
         }
 
-        return callback(null, CLIENT);
+        callback(null, CLIENT);
     });
 }
 
diff --git a/test/lib/config.js b/test/lib/config.js
index 1c7b5ae..c18d027 100644
--- a/test/lib/config.js
+++ b/test/lib/config.js
@@ -8,6 +8,7 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+'use strict';
 
 var assert = require('assert-plus');
 
diff --git a/test/lib/log.js b/test/lib/log.js
index 7e0a021..a128773 100644
--- a/test/lib/log.js
+++ b/test/lib/log.js
@@ -12,6 +12,8 @@
  * bunyan logger for tests
  */
 
+'use strict';
+
 var mod_bunyan = require('bunyan');
 
 module.exports = mod_bunyan.createLogger({
diff --git a/test/lib/mapping.js b/test/lib/mapping.js
index 9b5c94a..62b37ed 100644
--- a/test/lib/mapping.js
+++ b/test/lib/mapping.js
@@ -8,6 +8,8 @@
  * Copyright (c) 2014, Joyent, Inc.
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_common = require('../../lib/common.js');
 var mod_moray = require('../../lib/backend/moray');
diff --git a/test/lib/request.js b/test/lib/request.js
index e1f9d1e..c69ad92 100644
--- a/test/lib/request.js
+++ b/test/lib/request.js
@@ -8,6 +8,8 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_client = require('./client');
 var mod_common = require('../../lib/common');
diff --git a/test/lib/server.js b/test/lib/server.js
index 698d301..49f292f 100644
--- a/test/lib/server.js
+++ b/test/lib/server.js
@@ -8,6 +8,8 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+'use strict';
+
 var config = require('./config');
 var mod_client = require('./client');
 var mod_log = require('./log');
diff --git a/test/unit/ops.test.js b/test/unit/ops.test.js
index 2afc349..8e920d2 100644
--- a/test/unit/ops.test.js
+++ b/test/unit/ops.test.js
@@ -12,7 +12,8 @@
  * Test for basic server operations
  */
 
-var backend = require('../../lib/backend');
+'use strict';
+
 var client = require('../../lib/client');
 var portolan = require('../../lib/portolan');
 var test = require('tape');
@@ -43,7 +44,8 @@ test('setup', function (t) {
     portolan.createServer(CONFIG, function _afterCreate(err, server) {
         t.ifErr(err, 'create server');
         if (!server) {
-            return t.end();
+            t.end();
+            return;
         }
 
         SERVER = server;
diff --git a/test/unit/types.test.js b/test/unit/types.test.js
index 4275b6a..315ae21 100644
--- a/test/unit/types.test.js
+++ b/test/unit/types.test.js
@@ -14,6 +14,8 @@
  * values are changed accidentally.
  */
 
+'use strict';
+
 var mod_types = require('../../lib/types');
 var test = require('tape');
 
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index 641f331..02b2adb 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
index 1e82044..0704753 100644
--- a/tools/jsstyle.conf
+++ b/tools/jsstyle.conf
@@ -13,5 +13,4 @@ doxygen
 unparenthesized-return=0
 blank-after-start-comment=0
 leading-right-paren-ok=1
-continuation-at-front=1
 strict-indent=1
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..73dd612 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,14 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +56,50 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 1cffbe7..91f8346 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -44,6 +44,39 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
index 9376841..487824d 100644
--- a/tools/mk/Makefile.node.defs
+++ b/tools/mk/Makefile.node.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -97,8 +96,15 @@ NODE_EXEC	= $(NODE_INSTALL)/bin/node
 NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
 NPM_EXEC	= $(NODE_INSTALL)/bin/npm
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_EXEC)
 NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
index abdc616..bf53f78 100644
--- a/tools/mk/Makefile.node.targ
+++ b/tools/mk/Makefile.node.targ
@@ -29,7 +29,7 @@ else
 $(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
 	(mkdir -p $(BUILD) \
 		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
 		&& cd src-node \
 		&& git checkout $(NODE_PREBUILT_VERSION) \
 		&& ./configure $(NODE_CONFIG_FLAGS) \
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
index 5744489..2129742 100644
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -146,8 +145,15 @@ NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
 NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
 NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
 NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 16b15aa..cc5ae95 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -77,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -102,6 +105,7 @@ BASHSTYLE	?= tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
@@ -190,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -209,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +274,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,6 +304,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
@@ -316,3 +327,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
