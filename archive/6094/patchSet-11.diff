commit f23d18bf3f2ba6f866f0752b93a01835981eed1e
Author: Tim Foster <tim.foster@joyent.com>
Date:   2019-05-15T20:08:33+01:00 (5 months ago)
    
    OS-7453 convert platform build to engbld framework
    OS-6986 SmartOS release builds should include Ur
    Reviewed by: John Levon <john.levon@joyent.com>

diff --git a/.gitignore b/.gitignore
index 6ed93817..7a242004 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,10 +1,11 @@
 /build.env
-/configure.*
-/configure-*
+/configure-build
+/configure-projects
 /output
 /output-iso
 /output-usb
 /output-vmware
+/output*.old
 /projects
 /proto
 /proto.boot
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 00000000..6cbac639
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Makefile b/Makefile
index d680746b..cd4bd761 100644
--- a/Makefile
+++ b/Makefile
@@ -14,7 +14,9 @@
 #
 
 #
-# MG runs make check prior to ./configure, so allow build.env not to exist.
+# We allow build.env not to exist in case build automation expects to run
+# generic 'make check' actions without actually running ./configure in
+# advance of a full build.
 #
 ifeq ($(MAKECMDGOALS),check)
 -include build.env
@@ -57,6 +59,11 @@ else
 MAX_JOBS ?=	128
 endif
 
+#
+# deps/eng is a submodule that includes build tools, ensure it gets checked out
+#
+ENGBLD_REQUIRE := $(shell git submodule update --init deps/eng)
+
 LOCAL_SUBDIRS :=	$(shell ls projects/local)
 OVERLAYS :=	$(shell cat overlay/order)
 PKGSRC =	$(ROOT)/pkgsrc
@@ -415,13 +422,234 @@ clean:
 
 clobber: clean
 	pfexec rm -rf output/* output-iso/* output-usb/*
- 
+
 iso: live
 	./tools/build_boot_image -I -r $(ROOT)
 
 usb: live
 	./tools/build_boot_image -r $(ROOT)
 
+#
+# Targets and macros to create Triton manifests and publish build artifacts.
+#
+
+#
+# The build itself doesn't add debug suffixes to its outputs when running
+# in the 'ILLUMOS_ENABLE_DEBUG=exclusive' (configure -d) mode, so the settings
+# below add suffixes to the bits-dir copies of these files as appropriate.
+# The 'PUB_' prefix below indicates published build artifacts.
+#
+ifeq ($(ILLUMOS_ENABLE_DEBUG),exclusive)
+    PLATFORM_DEBUG_SUFFIX = -debug
+endif
+
+BUILD_NAME			?= platform
+
+#
+# Values specific to the 'platform' build.
+#
+PLATFORM_BITS_DIR		= $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)
+PLATFORM_BRANCH ?= $(shell git symbolic-ref HEAD | awk -F/ '{print $$3}')
+
+#
+# PUB_BRANCH_DESC indicates the different 'projects' branches used by the build.
+# Our shell script uniqifies the branches used, then emits a
+# hyphen-separated string of 'projects' branches *other* than ones which
+# match $PLATFORM_BRANCH (the branch of smartos-live.git itself).
+# While this doesn't perfectly disambiguate builds from different branches,
+# it is good enough for our needs.
+#
+PUB_BRANCH_DESC		= $(shell ./tools/projects_branch_desc $(PLATFORM_BRANCH))
+
+PLATFORM_TIMESTAMP		= $(shell head -n1 $(STAMPFILE))
+PLATFORM_STAMP			= $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC)-$(PLATFORM_TIMESTAMP)
+
+PLATFORM_TARBALL_BASE		= platform-$(PLATFORM_TIMESTAMP).tgz
+PLATFORM_TARBALL		= output/$(PLATFORM_TARBALL_BASE)
+
+PUB_IMAGES_BASE			= images$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+PUB_BOOT_BASE			= boot$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+
+PUB_PLATFORM_IMG_BASE		= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+PUB_PLATFORM_MF_BASE		= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).imgmanifest
+
+PUB_PLATFORM_MF			= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_MF_BASE)
+PUB_PLATFORM_TARBALL		= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_IMG_BASE)
+
+PUB_IMAGES_TARBALL		= $(PLATFORM_BITS_DIR)/$(PUB_IMAGES_BASE)
+PUB_BOOT_TARBALL		= $(PLATFORM_BITS_DIR)/$(PUB_BOOT_BASE)
+
+PLATFORM_IMAGE_UUID		?= $(shell uuid -v4)
+
+#
+# platform-publish, platform-bits-upload and platform-bits-upload-latest
+# are analogous to the 'publish', 'bits-upload' and 'bits-upload-latest'
+# targets defined in the eng.git Makefile.defs and Makefile.targ files.
+# Typically a user would 'make world && make live' before invoking any
+# of these targets, though the '*-release' targets are likely more convenient.
+# Those are not dependencies to allow more flexibility during the publication
+# process.
+#
+# The platform-bits-publish|upload targets are also used for pushing
+# SmartOS releases to Manta.
+#
+
+
+.PHONY: common-platform-publish
+common-platform-publish:
+	@echo "# Publish common platform$(PLATFORM_DEBUG_SUFFIX) bits"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cp $(PLATFORM_TARBALL) $(PUB_PLATFORM_TARBALL)
+	for config_file in configure-projects configure-build; do \
+	    if [[ -f $$config_file ]]; then \
+	        cp $$config_file $(PLATFORM_BITS_DIR); \
+	    fi; \
+	done
+	echo $(PLATFORM_STAMP) > latest-build-stamp
+
+.PHONY: triton-platform-publish
+triton-platform-publish: common-platform-publish
+	@echo "# Publish Triton-specific platform$(PLATFORM_DEBUG_SUFFIX) bits"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cat src/platform.imgmanifest.in | sed \
+	    -e "s/UUID/$(PLATFORM_IMAGE_UUID)/" \
+	    -e "s/VERSION_STAMP/$(PLATFORM_STAMP)/" \
+	    -e "s/BUILDSTAMP/$(PLATFORM_STAMP)/" \
+	    -e "s/SIZE/$$(stat --printf="%s" $(PLATFORM_TARBALL))/" \
+	    -e "s#SHA#$$(digest -a sha1 $(PLATFORM_TARBALL))#" \
+	    > $(PUB_PLATFORM_MF)
+	cp $(IMAGES_TARBALL) $(PUB_IMAGES_TARBALL)
+	cp $(BOOT_TARBALL) $(PUB_BOOT_TARBALL)
+	cd $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)
+	rm -f platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest
+	ln -s $(PUB_PLATFORM_MF_BASE) \
+	    platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest
+
+#
+# The bits-upload.sh script in deps/eng is used to upload bits
+# either to a Manta instance under $ENGBLD_DEST_OUT_PATH (requiring $MANTA_USER,
+# $MANTA_KEY_ID and $MANTA_URL to be set in the environment, and
+# $MANTA_TOOLS_PATH pointing to the manta-client tools scripts) or, with
+# $ENGBLD_BITS_UPLOAD_LOCAL set to 'true', will upload to $ENGBLD_DEST_OUT_PATH
+# on a local filesystem. If $ENGBLD_BITS_UPLOAD_IMGAPI is set in the environment
+# it also publishes any images from the -D directory to updates.joyent.com.
+#
+
+ENGBLD_DEST_OUT_PATH ?=	/public/builds
+
+ifeq ($(ENGBLD_BITS_UPLOAD_LOCAL), true)
+BITS_UPLOAD_LOCAL_ARG = -L
+else
+BITS_UPLOAD_LOCAL_ARG =
+endif
+
+ifeq ($(ENGBLD_BITS_UPLOAD_IMGAPI), true)
+BITS_UPLOAD_IMGAPI_ARG = -p
+else
+BITS_UPLOAD_IMGAPI_ARG =
+endif
+
+.PHONY: platform-bits-upload
+platform-bits-upload:
+	PATH=$(MANTA_TOOLS_PATH):$(PATH) \
+	    $(ROOT)/deps/eng/tools/bits-upload.sh \
+	        -b $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC) \
+	        $(BITS_UPLOAD_LOCAL_ARG) \
+	        $(BITS_UPLOAD_IMGAPI_ARG) \
+	        -D $(ROOT)/output/bits \
+	        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -t $(PLATFORM_STAMP)
+
+#
+# Clear TIMESTAMP due to TOOLS-2241, where bits-upload would otherwise interpret
+# that environment variable as the '-t' option
+#
+.PHONY: platform-bits-upload-latest
+platform-bits-upload-latest:
+	PATH=$(MANTA_TOOLS_PATH):$(PATH) TIMESTAMP= \
+	    $(ROOT)/deps/eng/tools/bits-upload.sh \
+	        -b $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC) \
+	        $(BITS_UPLOAD_LOCAL_ARG) \
+	        $(BITS_UPLOAD_IMGAPI_ARG) \
+	        -D $(ROOT)/output/bits \
+	        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX)
+
+#
+# A wrapper to build the additional components that a standard
+# SmartOS release needs.
+#
+.PHONY: smartos-build
+smartos-build:
+	./tools/build_changelog
+	./tools/build_boot_image -I -r $(ROOT)
+	./tools/build_boot_image -r $(ROOT)
+	./tools/build_vmware -r $(ROOT)
+
+.PHONY: smartos-publish
+smartos-publish:
+	@echo "# Publish SmartOS platform $(PLATFORM_TIMESTAMP) images"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cp output/changelog.txt $(PLATFORM_BITS_DIR)
+	cp output/platform-$(PLATFORM_TIMESTAMP)/root.password \
+	    $(PLATFORM_BITS_DIR)/SINGLE_USER_ROOT_PASSWORD.txt
+	cp output-iso/platform-$(PLATFORM_TIMESTAMP).iso \
+	    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP).iso
+	cp output-usb/platform-$(PLATFORM_TIMESTAMP).usb.gz \
+	    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP)-USB.img.gz
+	cp output-vmware/smartos-$(PLATFORM_TIMESTAMP).vmwarevm.tar.gz \
+		$(PLATFORM_BITS_DIR)
+	(cd $(PLATFORM_BITS_DIR) && \
+	    $(ROOT)/tools/smartos-index $(PLATFORM_TIMESTAMP) > index.html)
+	(cd $(PLATFORM_BITS_DIR) && \
+	    /usr/bin/sum -x md5 * > md5sums.txt)
+
+#
+# Define a series of phony targets that encapsulate a standard 'release' process
+# for both SmartOS and Triton platform builds. These are a convenience to allow
+# callers to invoke only two 'make' commands after './configure' has been run.
+# We can't combine these because our stampfile likely doesn't exist at the point
+# that the various build artifact Makefile macros are set, resulting in
+# misnamed artifacts. Thus, expected usage is:
+#
+# ./configure
+# make common-release; make triton-release
+#  or
+# make common-release; make triton-smartos-release
+# or
+# make common-release; make smartos-only-release
+#
+.PHONY: common-release
+common-release: \
+    check \
+    live \
+    pkgsrc
+
+.PHONY: triton-release
+triton-release: \
+    images-tar \
+    triton-platform-publish \
+    platform-bits-upload
+
+.PHONY: triton-smartos-release
+triton-smartos-release: \
+    images-tar \
+    triton-platform-publish \
+    smartos-build \
+    smartos-publish \
+    platform-bits-upload
+
+.PHONY: smartos-only-release
+smartos-only-release: \
+    common-platform-publish \
+    smartos-build \
+    smartos-publish \
+    platform-bits-upload
+
+print-%:
+	@echo '$*=$($*)'
+
 FRC:
 
 .PHONY: manifest mancheck_conf check jsl FRC
diff --git a/README.md b/README.md
index 172e9130..605e32f3 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,6 @@
 ```
 git clone https://github.com/joyent/smartos-live.git
 cd smartos-live
-cp sample.configure.smartos configure.smartos
 ./configure
 gmake world
 gmake live
@@ -238,6 +237,10 @@ $
 With this, you should be all set in your new environment. The normal
 build process will make sure that any required packages are installed.
 
+If you're running any of the release-engineering targets, the build will
+also require Manta tools and `updates-imgadm` to be available on `$PATH`,
+but most users are unlikely to need to build these targets.
+
 ### Basic Build Pattern
 
 Once the build zone has been configured, you can kick off a build in a
@@ -246,7 +249,6 @@ few easy steps:
 ```
 $ git clone git://github.com/joyent/smartos-live
 $ cd smartos-live
-$ cp sample.configure.smartos configure.smartos
 $ ./configure
 $ gmake live
 ```
@@ -304,6 +306,74 @@ The following summarizes the primary targets used on a day to day basis:
 * `iso`: Builds a CD-ROM ISO image, defaulting to the VGA console
 * `usb`: Builds a FAT 32 USB image, defaulting to the VGA console
 
+### Build Targets for Release Engineering
+
+This section is likely to only interest users who perform release builds
+of SmartOS, or the Triton Platform Image.
+
+When performing release builds, the following are convenient targets
+which encapsulate the entire release process for a specific Triton
+and/or SmartOS build variety:
+
+* `common-release`: depends on `check`, `live` and `pkgsrc` targets and
+   needs to be run before a subsequent `make` invocation of any of
+   the `-release` targets below
+* `smartos-release`: builds, publishes and uploads SmartOS artifacts
+* `triton-release`: builds, publishes and uploads a Triton platform
+  image
+* `triton-and-smartos-release`: all of the above
+
+The following are used by the targets listed above as part of the
+release engineering process when publishing release builds of the
+SmartOS and Triton platform image. There are varieties of each target
+for both build flavors.
+
+* `*-publish`: stage bits from the output directory, preparing for
+  upload
+* `*-bits-upload`: upload bits to either Manta, a remote filesystem
+  and optionally, a Triton imgapi instance, defaulting to
+  `updates.joyent.com`
+* `*-bits-upload-latest`: as above, except attempt to re-upload the
+  latest built bits, useful in case of interrupted uploads
+
+The `bits-upload` tool comes from
+[eng.git](http://github.com/joyent/eng) which the build pulls in via
+the `deps/eng` "git submodule" from the top-level of the workspace.
+
+The upload can be influenced by the following shell environment
+variables:
+
+* `ENGBLD_DEST_OUT_PATH`: The path where we wish to upload bits. This is
+  assumed to be relative to `$MANTA_USER` if using a Manta path.
+  Otherwise this can be set to a local (or NFS) path where we wish to
+  upload build arifacts.
+* `ENGBLD_BITS_UPLOAD_LOCAL`: If set to `true`, this causes us to simply
+  `cp(1)` bits to `$ENGBLD_DEST_OUT_PATH` rather than upload using
+  Manta tools.
+* `ENGBLD_BITS_UPLOAD_IMGAPI`: If set to `true`, this causes the build to
+  also attempt to upload any Triton images found in the `output/bits`
+  directory to an imgapi instance, which defaults to
+  `updates.joyent.com`.
+
+For Manta and imgapi uploads, the following environment variables are
+used to configure the upload:
+
+* `MANTA_USER`
+* `MANTA_KEY_ID`
+* `MANTA_URL`
+* `UPDATES_IMGADM_URL`
+* `UPDATES_IMGADM_IDENTITY`
+* `UPDATES_IMGADM_CHANNEL`
+* `UPDATES_IMGADM_USER`
+
+For details on the default values of these variables, and how they are
+used, see
+[bits-upload.sh](https://github.com/joyent/eng/blob/master/tools/bits-upload.sh)
+
+Finally, release engineers may find the script
+[`build_jenkins`](/tools/build_jenkins) useful, intended to be run
+directly as part of a Jenkins job, invoking the targets above.
+
 ### Common Tasks
 
 #### Cleaning Up
@@ -352,15 +422,46 @@ enough quality that we could cut a release at any time.
 
 While developing, you may want to use local branches, sometimes there
 are longer lived branches that exist for project development or for
-releases. To automate the configuration of branches, there is a
-`configure-branches` file in the root of the smartos-live repository. If
-you update the branch name that corresponds to a repository and rerun
-`./configure`, it will make sure that every branch is set to the correct
+releases. To automate the configuration of branches when creating the
+`projects` directory, create a file called `configure-projects` in the
+root of the smartos-live repository.
+
+The `configure-projects` file takes the format:
+
+```
+<path relative to ./projects>:<project branch>:[project git repo URL or path]
+```
+
+The special tokens `cr` or `origin` can be used in place of a full git
+repo URL to denote either standard github.com or joyent gerrit URLs for that
+project. If no URL is given, we default to github.com.
+
+If you update the branch name that corresponds to a repository, rerun
+`./configure` to make sure that every branch is set to the correct
 one, except that of smartos-live which needs to be changed manually.
 
 Not all repositories have to be on the same branch. It's totally fine to
 mix and match.
 
+#### Additional build customization
+
+Several variables can also be set in a shell script at the top of the
+smartos-live repository called `configure-build` and are sourced by `configure`
+if this file exists. This allows you to override `configure` script defaults,
+or include additional pre-build customization.
+
+If this file does not exist, the following defaults are set by `configure`:
+
+```
+PUBLISHER="joyent"
+RELEASE_VER="joyent_147"
+SUNW_SPRO12_URL="https://download.joyent.com/pub/build/SunStudio.tar.bz2"
+ON_CLOSED_BINS_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2"
+ON_CLOSED_BINS_ND_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2"
+ILLUMOS_ADJUNCT_TARBALL_URL="https://download.joyent.com/pub/build/adjuncts/"
+OVERLAYS="generic"
+```
+
 #### Debug Builds
 
 By default, all of SmartOS is built non-debug. It is possible to build a
@@ -385,7 +486,6 @@ would modify the normal workflow as follows:
 ```
 $ git clone git://github.com/joyent/smartos-live
 $ cd smartos-live
-$ cp sample.configure.smartos configure.smartos
 $ ./configure -d
 $ gmake live
 ```
diff --git a/configure b/configure
index 75bff507..fc777ecc 100755
--- a/configure
+++ b/configure
@@ -27,6 +27,22 @@ conf_ips=
 conf_priv="pfexec"
 conf_pkgsrcurl="https://download.joyent.com/pub/build/pkgsrc"
 
+#
+# Build defaults which are unlikely to change, but may be overridden by
+# configure-build.
+#
+if [[ ! -f configure-build ]]; then
+	source default.configure-build
+fi
+
+#
+# We configure the projects framework using a 'configure-projects' file. This
+# is a plain text file which contains the project name, the branch we wish to
+# build it at, and either a URL to a git repository or a keyword to denote
+# which git repository to use, either 'cr' or 'origin'. See create_projects.
+#
+read -r -d '' configure_projects < default.configure-projects
+
 function warn
 {
 	local msg="$*"
@@ -44,9 +60,9 @@ function fatal
 
 function source_vars
 {
-	for file in "$(ls configure.*)"; do
-		source "$file" || fatal "failed to source $file"
-	done
+	if [[ -f "configure-build" ]]; then
+		source "$file" || fatal "failed to source configure-build"
+	fi
 }
 
 function check_loc
@@ -64,10 +80,114 @@ function check_loc
 	fi
 }
 
+#
+# Checkout a project at the specific branch if the repository doesn't exist,
+# or isn't already at the required branch. Warn if the repository contains
+# uncommitted contents.
+#
+function checkout_project
+{
+	local dir="$1"
+	local branch="$2"
+	local url="$3"
+
+	echo "Using $url at $branch in $dir"
+
+	if [[ ! -d "$dir" ]]; then
+		git clone "$url" "${dir}" || fatal "unable to clone $dir"
+	fi
+
+	local cur=$(git -C ${dir} branch | grep "^*" | \
+	    awk 'BEGIN{ FS=" " } { print $2 }')
+
+	# If our repository is already at the desired branch, then do nothing,
+	# intentionally preserving whatever's in the repository.
+	if [[ "$cur " != "$branch" ]]; then
+		git -C ${dir} checkout ${branch}
+		if [[ $? -ne 0 ]]; then
+
+			# If this is a remote branch, say 'refs/changes/34/1234/1',
+			# then we might need to fetch it before being able to check it out.
+			echo "unable to checkout $branch, attempting to fetch it ..."
+
+			# Use a local branch name without '/' chars so a detached head
+			# doesn't confuse our standard parsing of 'git describe' output
+			local branch_desc=$(echo $branch | sed -e 's/\//_/g')
+
+			# We assume the remote is named 'origin', regardless as to whether
+			# it's from cr.joyent.us or github. Our Jenkins instance doesn't
+			# have multi-SCM support, so ./projects won't have 'cr' remotes.
+			git -C ${dir} fetch origin ${branch}:${branch_desc} || \
+				fatal "unable to fetch ${branch} from origin"
+
+			git -C ${dir} checkout ${branch_desc} || \
+				fatal "unable to checkout ${branch_desc}"
+		fi
+	fi
+
+	git -C ${dir} describe --all --long --dirty | egrep -e '-dirty$' &&
+	    echo "Warning: ${dir} contains uncommitted changes!"
+	return 0
+}
+
+#
+# Read a flat file called 'configure-projects' of the form:
+# <project name>:<project branch>:[project git repo URL or path]
+#
+# The special tokens 'cr' or 'origin' can be used in place of a full git
+# repo URL to denote either standard github.com or gerrit URLs for that
+# project. If no URL is given, we default to github.com.
+#
+# Once the configure-projects file has been read (or we've parsed the
+# defaults), invoke checkout_project for each one.
+#
 function create_projects
 {
-	local dir="projects"
+	local dir="projects/local"
+	local git_stem="https://github.com/joyent"
+
 	[[ -d "$dir" ]] || mkdir -p "$dir" || fatal "failed to create $dir"
+
+	if [[ -f "configure-projects" ]]; then
+		# note we're not attempting to merge configure-projects with the default
+		read -r -d '' configure_projects  < configure-projects
+		echo "Info: using the following configure-projects file:"
+		echo "$configure_projects"
+	else
+		echo "Info: no configure-projects file found, using defaults."
+	fi
+	echo "$configure_projects" | grep -v '^#' | while read -r line; do
+		local project_dir=$(echo $line | cut -d: -f 1 | sed -e 's/ //g')
+		local project_name=$(basename $project_dir)
+		local git_name="${project_name}.git"
+		local project_branch=$(echo $line | cut -d: -f 2 | sed -e 's/ //g')
+		local project_url=$(echo $line | cut -d: -f 3- | sed -e 's/ //g')
+
+		# special cases for some projects
+		case ${project_name} in
+		'kvm'|'kvm-cmd')
+			git_name="illumos-${project_name}.git"
+			;;
+		'illumos')
+			git_name="illumos-joyent.git"
+			;;
+		'ur-agent')
+			git_name="sdc-ur-agent.git"
+			;;
+		esac
+
+		# process URL keywords
+		case $project_url in
+		'cr')
+			project_url="https://cr.joyent.us/joyent/$git_name"
+			;;
+		'origin'|'')
+			project_url="$git_stem/$git_name"
+			;;
+		esac
+		checkout_project "projects/$project_dir" "$project_branch" \
+		    "$project_url"
+	done || fatal "Error encountered when creating projects directory"
 }
 
 function install_pkgin
@@ -156,31 +276,6 @@ function fetch_studio
 	    "cannot create Studio symlink"
 }
 
-function fetch_illumos
-{
-	local tfile="projects/illumos/usr/src/tools/env/illumos.sh"
-	[[ -f "$tfile" ]] && return
-	[[ -z "$GET_ILLUMOS" ]] && fatal "configure must define GET_ILLUMOS"
-	cd projects >/dev/null || fatal "failed to cd into projects directory"
-	/bin/bash -c "$GET_ILLUMOS " || fatal "fetching illumos failed"
-	cd - >/dev/null || fatal "failed to cd out of projects directory"
-	[[ -f "$tfile" ]] || fatal "fetched illumos appears to be missing files"
-}
-
-function fetch_illumos_extra
-{
-	local tfile="projects/illumos-extra/Makefile"
-	[[ -f "$tfile" ]] && return
-	[[ -z "$GET_ILLUMOS_EXTRA" ]] && fatal \
-	    "configure must define GET_ILLUMOS_EXTRA"
-	cd projects >/dev/null || fatal "failed to cd into projects directory"
-	/bin/bash -c  "$GET_ILLUMOS_EXTRA" || fatal \
-	    "fetching illumos-extra failed"
-	cd - >/dev/null || fatal "failed to cd out of projects directory"
-	[[ -f "$tfile" ]] || fatal \
-	    "fetched illumos-extra appears to be missing files"
-}
-
 function fetch_adjuncts
 {
 	local tgz
@@ -364,65 +459,6 @@ EOF
 	[[ $? -eq 0 ]] || fatal "failed to write illumos nightly env file"
 }
 
-function update_git
-{
-	local path=$1
-	local branch=$2
-	local cur
-
-	[[ -d "$path" ]] || fatal "can't find directory $path"
-	[[ -z "$branch" ]] && fatal "unspecified branch"
-
-	cd $path >/dev/null 2>&1 || fatal "can't cd into $path"
-	cur=$(git branch | grep "^*" | awk 'BEGIN{ FS=" " } { print $2 }')
-	[[ $? -ne 0 || -z "$cur" ]] && fatal "failed to get current branch"
-	[[ "$cur " == "$branch" ]] && return
-	git checkout $branch >/dev/null || fatal "failed to checkout $branch"
-	cd - >/dev/null 2>&1 || fatal "can't return to previous directory"
-}
-
-function update_branches
-{
-	local line repo branch
-
-	[[ ! -f "configure-branches" ]] && return
-
-	while read line; do
-		line=$(echo $line | sed -e 's/#.*$//')
-		[[ $? -eq 0 ]] || fatal \
-		    "failed to remove comments in configure-branches"
-
-		[[ -z "$line" ]] && continue
-
-		repo=${line%%:*}
-		branch=${line##*:}
-
-		[[ -z "$repo" ]] && fatal \
-		    "missing repository entry in line: [$line]"
-		[[ -z "$branch" ]] && fatal \
-		    "missing branch entry in line: [$branch]"
-
-		# Lots of "configure.smartos" out there with "illumos-live"
-		if [[ "$repo" == "smartos-live" ||
-		    "$repo" == "illumos-live" ]]; then
-			warn "configure-branches can't update smartos-live"
-			warn "ignoring and continuing on..."
-			continue
-		fi
-		if [[ "$repo" == "illumos-joyent" ]]; then
-			update_git "projects/illumos" $branch && continue
-		elif  [[ "$repo" == "smartos-overlay" ]]; then
-			update_git "overlay/smartos" $branch && continue
-		elif  [[ "$repo" == "illumos-extra" ]]; then
-			update_git "projects/illumos-extra" $branch && continue
-		else
-			[[ -d "projects/local/$repo" ]] && update_git \
-			    "projects/local/$repo" $branch && continue
-		fi
-		fatal "failed to update $repo to $branch"
-	done < "configure-branches"
-}
-
 #
 # This construction lets us place a block of text verbatim into $usage.
 #
@@ -492,22 +528,15 @@ EOF
 echo "Doing pre-flight checks... \c "
 check_loc
 echo "done."
-echo "Creating projects directory ... \c "
+echo "Creating and updating projects directory ..."
 create_projects
 echo "done."
-echo "done."
 echo "Installing packages ... \c "
 install_packages
 echo "done."
 echo "Fetching studio... \c "
 fetch_studio
 echo "done."
-echo "Fetching illumos... \c "
-fetch_illumos
-echo "done."
-echo "Fetching illumos-extra... \c "
-fetch_illumos_extra
-echo "done."
 echo "Fetching adjuncts tgz... \c "
 fetch_adjuncts
 echo "done."
@@ -520,10 +549,6 @@ echo "done."
 echo "Generating illumos environment file... \c "
 generate_env
 echo "done."
-echo "Setting up branches... \c "
-update_branches
-echo "done."
-
 
 cat <<EOF
 Configuration complete. To build the live image run:
diff --git a/default.configure-build b/default.configure-build
new file mode 100644
index 00000000..76cf7acb
--- /dev/null
+++ b/default.configure-build
@@ -0,0 +1,7 @@
+PUBLISHER="joyent"
+RELEASE_VER="joyent_147"
+SUNW_SPRO12_URL="https://download.joyent.com/pub/build/SunStudio.tar.bz2"
+ON_CLOSED_BINS_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2"
+ON_CLOSED_BINS_ND_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2"
+ILLUMOS_ADJUNCT_TARBALL_URL="https://download.joyent.com/pub/build/adjuncts/"
+OVERLAYS="generic"
diff --git a/default.configure-projects b/default.configure-projects
new file mode 100644
index 00000000..3cbd5119
--- /dev/null
+++ b/default.configure-projects
@@ -0,0 +1,6 @@
+illumos-extra: master: origin
+illumos: master: origin
+local/kvm-cmd: master: origin
+local/kvm: master: origin
+local/mdata-client: master: origin
+local/ur-agent: master: origin
\ No newline at end of file
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 00000000..dcf15a65
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit dcf15a6507556313d7925c6914c0040fbc52161e
diff --git a/sample.configure.smartos b/sample.configure.smartos
deleted file mode 100644
index d5ed1967..00000000
--- a/sample.configure.smartos
+++ /dev/null
@@ -1,33 +0,0 @@
-mkdir -p projects/local
-(cd projects/local >/dev/null && [[ -d ur-agent ]] \
-    || git clone https://github.com/joyent/sdc-ur-agent.git ur-agent)
-(cd projects/local >/dev/null && [[ -d kvm ]] \
-    || git clone https://github.com/joyent/illumos-kvm.git kvm)
-(cd projects/local >/dev/null && [[ -d kvm-cmd ]] \
-    || git clone https://github.com/joyent/illumos-kvm-cmd.git kvm-cmd)
-(cd projects/local >/dev/null && [[ -d mdata-client ]] \
-    || git clone https://github.com/joyent/mdata-client.git mdata-client)
-
-# default branch list if there isn't one
-if [[ ! -f configure-branches ]]; then
-    cat >configure-branches <<EOF
-# after editing, rerun configure
-smartos-live: master
-illumos-extra: master
-illumos-joyent: master
-ur-agent: master
-kvm: master
-kvm-cmd: master
-mdata-client: master
-EOF
-fi
-
-PUBLISHER="joyent"
-RELEASE_VER="joyent_147"
-SUNW_SPRO12_URL="https://download.joyent.com/pub/build/SunStudio.tar.bz2"
-ON_CLOSED_BINS_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2"
-ON_CLOSED_BINS_ND_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2"
-GET_ILLUMOS="git clone https://github.com/joyent/illumos-joyent.git illumos"
-GET_ILLUMOS_EXTRA="git clone https://github.com/joyent/illumos-extra.git illumos-extra"
-ILLUMOS_ADJUNCT_TARBALL_URL="https://download.joyent.com/pub/build/adjuncts/"
-OVERLAYS="generic"
diff --git a/src/platform.imgmanifest.in b/src/platform.imgmanifest.in
new file mode 100644
index 00000000..7f7a0f5a
--- /dev/null
+++ b/src/platform.imgmanifest.in
@@ -0,0 +1,27 @@
+{
+  "v": 2,
+  "uuid": "UUID",
+  "owner": "00000000-0000-0000-0000-000000000000",
+  "name": "platform",
+  "type": "other",
+  "version": "VERSION_STAMP",
+  "state": "active",
+  "disabled": false,
+  "public": false,
+  "os": "other",
+  "files": [
+    {
+      "sha1": "SHA",
+      "size": SIZE,
+      "compression": "gzip"
+    }
+  ],
+  "description": "SmartDataCenter platform image",
+  "tags": {
+    "smartdc_service": "true",
+    "buildstamp": "BUILDSTAMP"
+  },
+  "channels": [
+    "dev"
+  ]
+}
diff --git a/tools/build_jenkins b/tools/build_jenkins
new file mode 100755
index 00000000..dc4d28be
--- /dev/null
+++ b/tools/build_jenkins
@@ -0,0 +1,184 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2019, Joyent, Inc.
+#
+
+#
+# This is a wrapper used by jenkins to invoke the different targets needed for
+# the Triton platform and SmartOS build variants.
+#
+
+if [[ -n "${TRACE}" ]]; then
+    export PS4='${BASH_SOURCE}:${LINENO}: '
+    set -o xtrace
+fi
+
+set -o errexit
+set -o pipefail
+
+# Allow users to override the Manta path where we publish artifacts
+if [[ -z "${ENGBLD_DEST_OUT_PATH}" ]]; then
+    export ENGBLD_DEST_OUT_PATH=/stor/builds
+fi
+
+export TIMESTAMP=$(TZ=UTC /bin/date "+%Y%m%dT%H%M%SZ")
+export BUILDSTAMP=${TIMESTAMP}
+
+# Used to flag if this is a non-default build. This modifies the description
+# used for the platform manifest.
+export ENGBLD_CUSTOM=''
+
+# Jenkins should set this, otherwise default to the current branch, assuming
+# our working directory is a smartos-live repository.
+if [[ -z "${BRANCH}" ]]; then
+    export BRANCH=$(git branch 2> /dev/null | \
+        sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
+fi
+
+#
+# Emit usage information
+#
+function usage {
+    echo "Usage: build_jenkins [options]"
+    echo "OPTIONS"
+    echo "  -d            build a debug platform"
+    echo "  -F <flavor>   build one of the following build flavors:"
+    echo "                    triton (default)    a normal platform build"
+    echo "                    smartos             only smartos platform bits"
+    echo "                    triton-and-smartos  both of the above"
+    echo ""
+    echo "ENVIRONMENT"
+    echo "  BRANCH                the branch of smartos-live being built"
+    echo "  ENGBLD_DEST_OUT_PATH  the Manta path used when uploading artifacts"
+    echo "  PLAT_CONFIGURE_ARGS   additional arguments to pass to 'configure'"
+    echo "  PLATFORM_BUILD_FLAVOR one of the -F arguments, as above"
+    echo "  CONFIGURE_PROJECTS    content for the 'configure-projects' file"
+    echo ""
+    echo "NOTE"
+    echo "  Production builds expect we're building in a freshly cloned"
+    echo "  repository. We do not attempt to 'make clean' before rebuilding."
+    exit 2
+}
+
+#
+# A simple log wrapper for running a major build step
+#
+function log_cmd {
+    echo "==== Running $@ ====" | tee -a ${ENGBLD_LOG}
+    $@ 2>&1 | tee -a ${ENGBLD_LOG}
+}
+
+#
+# A simple log wrapper
+#
+function log {
+    $@ 2>&1 | tee -a ${ENGBLD_LOG}
+}
+
+#
+# Main
+#
+while getopts "dhF:" opt; do
+    case "${opt}" in
+        d)
+            # build debug platform bits
+            ENGBLD_CONFIGURE_DEBUG_ARG='-d'
+            ENGBLD_DEBUG_SUFFIX='-debug'
+            ;;
+        F)
+            PLATFORM_BUILD_FLAVOR="${OPTARG}"
+            ;;
+        h)
+            usage
+            ;;
+        *)
+            echo "Error: Unknown argument ${opt}"
+            usage
+    esac
+done
+shift $((OPTIND - 1))
+
+if [[ -z "$PLATFORM_BUILD_FLAVOR" ]]; then
+    PLATFORM_BUILD_FLAVOR="triton"
+fi
+
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'triton'|'smartos'|'triton-and-smartos')
+        ;;
+    *)
+        echo "Error: unknown platform build flavor: ${PLATFORM_BUILD_FLAVOR}"
+        usage
+esac
+
+ENGBLD_LOGDIR=output/bits/platform${ENGBLD_DEBUG_SUFFIX}
+ENGBLD_LOG=${ENGBLD_LOGDIR}/build.log
+
+# Rotate our output directories, mostly for the benefit of non-production builds
+# We can't log these commands as we're physically removing the log location.
+for output in output output-iso output-usb output-vmware; do
+    if [[ -d "${output}" ]]; then
+        echo "Removing old ${output} directory"
+        rm -rf ${output}.old
+        echo "Renaming output to ${output}.old"
+        mv ${output} ${output}.old
+    fi
+done
+
+mkdir -p ${ENGBLD_LOGDIR}
+touch ${ENGBLD_LOG}
+
+# Remove any old logs so that these don't get swept up as Jenkins artifacts
+log rm -rf log projects/illumos/log
+
+# Is this a release branch build
+if echo "${BRANCH}" | grep -q "^release"; then
+    ENGBLD_RELEASE=true
+else
+    ENGBLD_RELEASE=""
+fi
+
+#
+# ${CONFIGURE_PROJECTS} is multi-line jenkins parameter, set so that users can
+# specify which branches of the repositories in the smartos-live 'projects'
+# framework to build, and from where they should be cloned.
+#
+if [[ -z "${CONFIGURE_PROJECTS}" ]]; then
+    echo "using default configure-projects"
+else
+    echo "${CONFIGURE_PROJECTS}" > configure-projects
+fi
+
+# Configure the build based on the arguments we've gathered
+log_cmd  ./configure -r \
+    ${ENGBLD_CONFIGURE_DEBUG_ARG} \
+    ${PLAT_CONFIGURE_ARGS}
+
+log_cmd gmake common-release
+
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'triton')
+        log_cmd gmake triton-release
+        ;;
+    'smartos')
+        log_cmd gmake smartos-only-release
+        ;;
+    'triton-and-smartos')
+        log_cmd gmake triton-smartos-release
+        ;;
+esac
+
+# Update Manta snaplinks for smartos, only if this is a release build
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'smartos'|'triton-and-smartos')
+        if [[ -n "${ENGBLD_RELEASE}" ]]; then
+            log_cmd env TRACE=1 ./tools/smartos-release \
+                "${BRANCH}" "${TIMESTAMP}"
+        fi
+        ;;
+esac
diff --git a/tools/clobber_illumos b/tools/clobber_illumos
index 3b89f59f..28934b1f 100755
--- a/tools/clobber_illumos
+++ b/tools/clobber_illumos
@@ -39,14 +39,14 @@ function ci_fatal
 #
 # We assume that this will be run from the root of smartos-live. If
 # we're not being run from there, error, since we assume paths. We use
-# the presence of the file sample.configure.smartos for this, since it's
+# the presence of the file default.configure-projects for this, since it's
 # a relatively unique file in the top level.
 #
 function ci_verify_root
 {
-	[[ ! -f "$ci_wsroot/sample.configure.smartos" ]] && ci_fatal \
+	[[ ! -f "$ci_wsroot/default.configure-projects" ]] && ci_fatal \
 	    "determined workspace root as $ci_wsroot: but missing indicating" \
-	    "file sample.configure.smartos"
+	    "file default.configure-projects"
 }
 
 #
diff --git a/tools/projects_branch_desc b/tools/projects_branch_desc
new file mode 100755
index 00000000..add9e228
--- /dev/null
+++ b/tools/projects_branch_desc
@@ -0,0 +1,48 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2019, Joyent, Inc.
+#
+
+#
+# Query the projects framework to emit a uniquified hyphen-separated list of
+# branch names, omitting any branch names identical to the current smartos-live
+# branch, passed as $1.
+#
+
+if [[ "$1" == "-h" ]]; then
+	echo "Usage: projects_branch_desc <current_branch>"
+	exit 1
+fi
+
+# This can be an empty string, in which case our descriptor contains all
+# branch information.
+current_branch=$1
+
+PROJECT_REPOS="projects/illumos-extra \
+    projects/illumos \
+	projects/local/ur-agent \
+	projects/local/kvm \
+	projects/local/kvm-cmd \
+	projects/local/mdata-client"
+
+for repo in $PROJECT_REPOS; do
+	if [[ ! -d $repo ]]; then
+		echo "Missing repository $repo"
+		exit 1
+	fi
+
+	branch=$(git -C $repo rev-parse --abbrev-ref HEAD)
+	if [[ "$branch" == "$current_branch" ]]; then
+		continue
+	fi
+	echo $branch
+done | sort -u | while read branch; do
+		echo -n "-$branch"
+done
+echo ""
\ No newline at end of file
diff --git a/tools/smartos-index b/tools/smartos-index
new file mode 100755
index 00000000..4f40f9ff
--- /dev/null
+++ b/tools/smartos-index
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019, Joyent, Inc.
+#
+
+#
+# This script runs as part of the 'smartos-publish' Makefile target.
+# It is intended to be run from the smartos-live ./output/bits/platform
+# directory during build publication. It creates an index.html fragment
+# which gets redirected to from
+# https://us-east.manta.joyent.com/Joyent_Dev/public/SmartOS/latest.html
+#
+# The latest.html file above gets created by the 'smartos-release' script
+# which is run as part of the biweekly release process.
+#
+
+echo "<html>"
+echo "<head><title>SmartOS ${1}</title></head>"
+echo "<body>"
+for x in `ls * | grep -v index.html`; do
+  echo "<a href=\"$x\">$x</a><br>"
+done
+echo "<a href=\"md5sums.txt\">md5sums.txt</a>"
+echo "</body></html>"
diff --git a/tools/smartos-release b/tools/smartos-release
new file mode 100755
index 00000000..c35a5b05
--- /dev/null
+++ b/tools/smartos-release
@@ -0,0 +1,108 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019, Joyent, Inc.
+#
+
+#
+# This script is run as part of the biweekly SmartOS release process, and
+# creates snaplinks in Manta to point ~~/public/SmartOS/<timestamp>/ to the
+# current ~~/public/builds/platform/<release>-<timestamp>/platform directory.
+#
+
+# Update the SmartOS release directory
+if [ "$TRACE" != "" ]; then
+    export PS4='${BASH_SOURCE}:${LINENO}: '
+    set -o xtrace
+fi
+
+TOP=$(cd $(dirname $0)/../; pwd)
+PATH=$PATH:${TOP}/node_modules/manta/bin
+
+
+# --- Manta config
+
+if [[ -z "$MANTA_KEY_ID" ]]; then
+    export MANTA_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
+fi
+if [[ -z "$MANTA_URL" ]]; then
+    export MANTA_URL=https://us-east.manta.joyent.com
+fi
+if [[ -z "$MANTA_USER" ]]; then
+    export MANTA_USER="Joyent_Dev";
+fi
+
+
+# --- support functions
+
+function fatal {
+    echo "$(basename $0): error: $1"
+    exit 1
+}
+
+function errexit {
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1 at line $2"
+}
+
+function print_help() {
+    echo "Usage:"
+    echo "  ./tools/smartos-release BRANCH TIMESTAMP"
+    echo ""
+    echo "Create snaplinks under /\${MANTA_USER}/public/SmartOS/\${TIMESTAMP}"
+    echo "pointing to objects under /\${MANTA_USER}/public/builds/platform/\${BRANCH}-\${TIMESTAMP}/platform/"
+}
+
+
+# --- mainline
+
+trap 'errexit $? $LINENO' EXIT
+
+BRANCH=$1
+shift
+TIMESTAMP=$1
+
+if [[ -z "$BRANCH" ]] || [[ -z "$TIMESTAMP" ]]; then
+    echo "Error: Missing branch and/or timestamp arguments"
+    print_help
+    exit 2
+fi
+
+set -o errexit
+
+# Note that ${BRANCH} appears only once here as we assume that for release
+# builds, all project branches and smartos-live itself use the same branch
+# name. See $(PUB_BRANCH_DESC) in the top-level Makefile for more details.
+SOURCE=/${MANTA_USER}/public/builds/platform/${BRANCH}-${TIMESTAMP}/platform/
+SMARTOS=/${MANTA_USER}/public/SmartOS
+DESTINATION=${SMARTOS}/${TIMESTAMP}
+
+start_time=$(date +%s)
+echo "Creating release snaplinks under ${DESTINATION}"
+
+mmkdir -v -p ${DESTINATION}
+mfind ${SOURCE} -t o | while read OBJECT; do
+    mln ${OBJECT} ${DESTINATION}/$(basename ${OBJECT})
+done
+
+echo "Updating top level ${SMARTOS} snaplinks"
+mln ${SOURCE}/platform-${TIMESTAMP}.tgz ${SMARTOS}/platform-latest.tgz
+mln ${SOURCE}/smartos-${TIMESTAMP}.iso ${SMARTOS}/smartos-latest.iso
+mln ${SOURCE}/smartos-${TIMESTAMP}-USB.img.gz ${SMARTOS}/smartos-latest-USB.img.gz
+mln ${SOURCE}/smartos-${TIMESTAMP}.vmwarevm.tar.gz ${SMARTOS}/smartos-latest.vmwarevm.tar.gz
+
+echo "Updating ${SMARTOS}/latest object"
+echo ${DESTINATION} | mput -v -H 'content-type: text/plain' ${SMARTOS}/latest
+
+# The index.html file referenced here gets created by 'smartos-index'
+echo "<html><head><meta HTTP-EQUIV=\"REFRESH\" content=\"0; url=${SOURCE}/index.html\"></head></html>" | mput -H 'content-type: text/html' ${SMARTOS}/latest.html
+
+end_time=$(date +%s)
+elapsed=$((${end_time} - ${start_time}))
+echo "Creating release snaplinks took ${elapsed} seconds (Manta path=${DESTINATION})"
+exit 0
