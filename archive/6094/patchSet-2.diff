commit ce1cafcd9116982deaa10dfdf576e703a4a7e158
Author: Tim Foster <tim.foster@joyent.com>
Date:   2019-04-11T14:29:50+01:00 (6 months ago)
    
     OS-7453 convert platform build to engbld framework
     OS-6986 SmartOS release builds should include Ur

diff --git a/.gitignore b/.gitignore
index 6ed93817..c5b28349 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,6 +5,7 @@
 /output-iso
 /output-usb
 /output-vmware
+/output*.old
 /projects
 /proto
 /proto.boot
diff --git a/Makefile b/Makefile
index d680746b..ccd0ca24 100644
--- a/Makefile
+++ b/Makefile
@@ -14,7 +14,9 @@
 #
 
 #
-# MG runs make check prior to ./configure, so allow build.env not to exist.
+# We allow build.env not to exist in case build automation expects to run
+# generic 'make check' actions without actually running ./configure in
+# advance of a full build.
 #
 ifeq ($(MAKECMDGOALS),check)
 -include build.env
@@ -415,13 +417,232 @@ clean:
 
 clobber: clean
 	pfexec rm -rf output/* output-iso/* output-usb/*
- 
+
 iso: live
 	./tools/build_boot_image -I -r $(ROOT)
 
 usb: live
 	./tools/build_boot_image -r $(ROOT)
 
+#
+# Targets and macros to create Triton manifests and publish build artifacts.
+#
+
+#
+# The build itself doesn't add debug suffices to its outputs when running
+# in the 'ILLUMOS_ENABLE_DEBUG=exclusive' (configure -d) mode, so the settings
+# below add suffices to the bits-dir copies of these files as appropriate.
+# The 'PUB_' prefix below indicates published build artifacts.
+#
+ifeq ($(ILLUMOS_ENABLE_DEBUG),exclusive)
+    PLATFORM_DEBUG_SUFFIX = -debug
+endif
+
+BUILD_NAME			?= platform
+
+#
+# Values specific to the 'platform' build.
+#
+PLATFORM_BITS_DIR		= $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)
+PLATFORM_BRANCH ?= $(shell git symbolic-ref HEAD | awk -F/ '{print $$3}')
+
+#
+# PUB_BRANCH_DESC indicates the different 'projects' branches used by the build.
+# Our shell script uniqifies the branches used, then emits a
+# hyphen-separated string containing them if the configure-branches file
+# contains branches *other* than just $PLATFORM_BRANCH (the branch
+# of smartos-live.git itself)
+# While this doesn't perfectly disambiguate builds from different branches,
+# it is good enough for our needs.
+#
+PUB_BRANCH_DESC		= $(shell ./tools/configure_branches_desc $(PLATFORM_BRANCH))
+
+PLATFORM_TIMESTAMP		= $(shell head -n1 $(STAMPFILE))
+PLATFORM_STAMP			= $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC)-$(PLATFORM_TIMESTAMP)
+
+PLATFORM_TARBALL_BASE	= platform-$(PLATFORM_TIMESTAMP).tgz
+PLATFORM_TARBALL		= output/$(PLATFORM_TARBALL_BASE)
+
+PUB_IMAGES_BASE			= images$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+PUB_BOOT_BASE			= boot$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+
+PUB_PLATFORM_IMG_BASE	= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz
+PUB_PLATFORM_MF_BASE	= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).imgmanifest
+
+PUB_PLATFORM_MF			= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_MF_BASE)
+PUB_PLATFORM_TARBALL	= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_IMG_BASE)
+
+PUB_IMAGES_TARBALL		= $(PLATFORM_BITS_DIR)/$(PUB_IMAGES_BASE)
+PUB_BOOT_TARBALL		= $(PLATFORM_BITS_DIR)/$(PUB_BOOT_BASE)
+
+PLATFORM_IMAGE_UUID		?= $(shell uuid -v4)
+
+#
+# platform-publish, platform-bits-upload and platform-bits-upload-latest
+# are analogous to the 'publish', 'bits-upload' and 'bits-upload-latest'
+# targets defined in the eng.git Makefile.defs and Makefile.targ files.
+# Typically a user would 'make world && make live' before invoking any
+# of these targets, though the '*-release' targets are likely more convenient.
+# Those are not dependencies to allow more flexibility during the publication
+# process.
+#
+# The platform-bits-publish|upload targets are also used for pushing
+# SmartOS releases to Manta.
+#
+
+
+.PHONY: common-platform-publish
+common-platform-publish:
+	@echo "# Publish common platform$(PLATFORM_DEBUG_SUFFIX) bits"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cp $(PLATFORM_TARBALL) $(PUB_PLATFORM_TARBALL)
+	cp configure-branches $(PLATFORM_BITS_DIR)
+	echo $(PLATFORM_STAMP) > latest-build-stamp
+
+.PHONY: triton-platform-publish
+triton-platform-publish: common-platform-publish
+	@echo "# Publish Triton-specific platform$(PLATFORM_DEBUG_SUFFIX) bits"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cat src/platform.imgmanifest.in | sed \
+	    -e "s/UUID/$(PLATFORM_IMAGE_UUID)/" \
+	    -e "s/ENGBLD_CUSTOM/$(ENGBLD_CUSTOM)/" \
+	    -e "s/VERSION_STAMP/$(PLATFORM_STAMP)/" \
+	    -e "s/BUILDSTAMP/$(PLATFORM_STAMP)/" \
+	    -e "s/SIZE/$$(stat --printf="%s" $(PLATFORM_TARBALL))/" \
+	    -e "s#SHA#$$(openssl sha1 $(PLATFORM_TARBALL) \
+	        | cut -d ' ' -f2)#" \
+	    > $(PUB_PLATFORM_MF)
+	cp $(IMAGES_TARBALL) $(PUB_IMAGES_TARBALL)
+	cp $(BOOT_TARBALL) $(PUB_BOOT_TARBALL)
+	cd $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)
+	rm -f platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest
+	ln -s $(PUB_PLATFORM_MF_BASE) \
+	    platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest
+
+#
+# The bits-upload.sh script in projects/eng is used to upload bits
+# either to a Manta instance under $ENGBLD_DEST_OUT_PATH (requiring $MANTA_USER,
+# $MANTA_KEY_ID and $MANTA_URL to be set in the environment, and
+# $MANTA_TOOLS_PATH pointing to the manta-client tools scripts) or, with
+# $ENGBLD_BITS_UPLOAD_LOCAL set to 'true', will upload to $ENGBLD_DEST_OUT_PATH
+# on a local filesystem. If $ENGBLD_BITS_UPLOAD_IMGAPI is set in the environment
+# it also publishes any images from the -D directory to updates.joyent.com.
+#
+
+ENGBLD_DEST_OUT_PATH ?=	/public/builds
+
+ifeq ($(ENGBLD_BITS_UPLOAD_LOCAL), true)
+BITS_UPLOAD_LOCAL_ARG = -L
+else
+BITS_UPLOAD_LOCAL_ARG =
+endif
+
+.PHONY: platform-bits-upload
+platform-bits-upload:
+	PATH=$(MANTA_TOOLS_PATH):$(PATH) \
+	    $(ROOT)/projects/eng/tools/bits-upload.sh \
+	        -b $(PLATFORM_BRANCH) \
+	        $(BITS_UPLOAD_LOCAL_ARG) \
+	        $(BITS_UPLOAD_IMGAPI_ARG) \
+	        -D $(ROOT)/output/bits \
+	        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -t $(PLATFORM_STAMP)
+
+#
+# Clear TIMESTAMP due to a bug in bits-upload which would otherwise interpret
+# that environment variable as the '-t' option
+#
+.PHONY: platform-bits-upload-latest
+platform-bits-upload-latest:
+	PATH=$(MANTA_TOOLS_PATH):$(PATH) TIMESTAMP= \
+	    $(ROOT)/projects/eng/tools/bits-upload.sh \
+	        -b $(PLATFORM_BRANCH) \
+	        $(BITS_UPLOAD_LOCAL_ARG) \
+	        $(BITS_UPLOAD_IMGAPI_ARG) \
+	        -D $(ROOT)/output/bits \
+	        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \
+	        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX)
+
+#
+# A wrapper to build the additional components that a standard
+# SmartOS release needs.
+#
+.PHONY: smartos-build
+smartos-build:
+	./tools/build_changelog
+	./tools/build_boot_image -I -r $(ROOT)
+	./tools/build_boot_image -r $(ROOT)
+	./tools/build_vmware -r $(ROOT)
+
+.PHONY: smartos-publish
+smartos-publish:
+	@echo "# Publish SmartOS platform $(PLATFORM_TIMESTAMP) images"
+	mkdir -p $(PLATFORM_BITS_DIR)
+	cp output/changelog.txt $(PLATFORM_BITS_DIR)
+	cp output/platform-$(PLATFORM_TIMESTAMP)/root.password \
+	    $(PLATFORM_BITS_DIR)/SINGLE_USER_ROOT_PASSWORD.txt
+	cp output-iso/platform-$(PLATFORM_TIMESTAMP).iso \
+	    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP).iso
+	cp output-usb/platform-$(PLATFORM_TIMESTAMP).usb.gz \
+	    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP)-USB.img.gz
+	cp output-vmware/smartos-$(PLATFORM_TIMESTAMP).vmwarevm.tar.gz \
+		$(PLATFORM_BITS_DIR)
+	(cd $(PLATFORM_BITS_DIR) && \
+	    $(ROOT)/tools/smartos-index $(PLATFORM_TIMESTAMP) > index.html)
+	(cd $(PLATFORM_BITS_DIR) && \
+	    /usr/bin/sum -x md5 * > md5sums.txt)
+
+#
+# Define a series of phony targets that encapsulate a standard 'release' process
+# for both SmartOS and Triton platform builds. These are a convenience to allow
+# callers to invoke only two 'make' commands after './configure' has been run.
+# We can't combine these because our stampfile likely doesn't exist at the point
+# that the various build artifact Makefile macros are set, resulting in
+# misnamed artifacts. Thus, expected usage is:
+#
+# ./configure
+# make common-release; make triton-release
+#  or
+# make common-release; make triton-smartos-release
+# or
+# make common-release; make smartos-only-release
+#
+# We expect that normal development builds will use 'triton-release' and
+# that biweekly or milestone builds will use 'triton-smartos-release or
+# 'smartos-only-release', depending on the release cadence.
+#
+.PHONY: common-release
+common-release: \
+    check \
+    world \
+    live \
+    pkgsrc
+
+.PHONY: triton-release
+triton-release: \
+    images-tar \
+    triton-platform-publish \
+    platform-bits-upload
+
+.PHONY: triton-smartos-release
+triton-smartos-release: \
+    images-tar \
+    triton-platform-publish \
+    smartos-build \
+    smartos-publish \
+    platform-bits-upload
+
+.PHONY: smartos-only-release
+smartos-only-release: \
+    common-platform-publish \
+    smartos-build \
+    smartos-publish \
+    platform-bits-upload
+
+print-%:
+	@echo '$*=$($*)'
+
 FRC:
 
 .PHONY: manifest mancheck_conf check jsl FRC
diff --git a/configure b/configure
index 75bff507..70767cfe 100755
--- a/configure
+++ b/configure
@@ -232,6 +232,20 @@ function fetch_closed
 	cd - >/dev/null 2>&1
 }
 
+function fetch_eng
+{
+	# Define a file to act as a marker that indicates whether the
+	# eng repository is present.
+        local tfile="projects/eng/tools/bits-upload.sh"
+        [[ -f "$tfile" ]] && return
+        [[ -z "$GET_ENG" ]] && fatal "configure must define GET_ENG"
+        cd projects >/dev/null || fatal "failed to cd into projects directory"
+        /bin/bash -c "$GET_ENG" || fatal "fetching eng failed"
+        cd - >/dev/null || fatal "failed to cd out of projects directory"
+        [[ -f "$tfile" ]] || fatal "fetched eng appears to be missing files"
+}
+
+
 function generate_env
 {
 	#
@@ -415,6 +429,8 @@ function update_branches
 			update_git "overlay/smartos" $branch && continue
 		elif  [[ "$repo" == "illumos-extra" ]]; then
 			update_git "projects/illumos-extra" $branch && continue
+                elif [[ "$repo" == "eng" ]]; then
+			update_git "projects/eng" $branch && continue
 		else
 			[[ -d "projects/local/$repo" ]] && update_git \
 			    "projects/local/$repo" $branch && continue
@@ -508,6 +524,9 @@ echo "done."
 echo "Fetching illumos-extra... \c "
 fetch_illumos_extra
 echo "done."
+echo "Fetching eng... \c "
+fetch_eng
+echo "done."
 echo "Fetching adjuncts tgz... \c "
 fetch_adjuncts
 echo "done."
diff --git a/sample.configure.smartos b/sample.configure.smartos
index d5ed1967..d9ef5915 100644
--- a/sample.configure.smartos
+++ b/sample.configure.smartos
@@ -12,13 +12,13 @@ mkdir -p projects/local
 if [[ ! -f configure-branches ]]; then
     cat >configure-branches <<EOF
 # after editing, rerun configure
-smartos-live: master
 illumos-extra: master
 illumos-joyent: master
 ur-agent: master
 kvm: master
 kvm-cmd: master
 mdata-client: master
+eng: master
 EOF
 fi
 
@@ -29,5 +29,6 @@ ON_CLOSED_BINS_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins
 ON_CLOSED_BINS_ND_URL="https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2"
 GET_ILLUMOS="git clone https://github.com/joyent/illumos-joyent.git illumos"
 GET_ILLUMOS_EXTRA="git clone https://github.com/joyent/illumos-extra.git illumos-extra"
+GET_ENG="git clone https://github.com/joyent/eng.git eng"
 ILLUMOS_ADJUNCT_TARBALL_URL="https://download.joyent.com/pub/build/adjuncts/"
 OVERLAYS="generic"
diff --git a/src/platform.imgmanifest.in b/src/platform.imgmanifest.in
new file mode 100644
index 00000000..a6f71de5
--- /dev/null
+++ b/src/platform.imgmanifest.in
@@ -0,0 +1,27 @@
+{
+  "v": 2,
+  "uuid": "UUID",
+  "owner": "00000000-0000-0000-0000-000000000000",
+  "name": "platform",
+  "type": "other",
+  "version": "VERSION_STAMP",
+  "state": "active",
+  "disabled": false,
+  "public": false,
+  "os": "other",
+  "files": [
+    {
+      "sha1": "SHA",
+      "size": SIZE,
+      "compression": "gzip"
+    }
+  ],
+  "description": "SmartDataCenter platform imageENGBLD_CUSTOM",
+  "tags": {
+    "smartdc_service": "true",
+    "buildstamp": "BUILDSTAMP"
+  },
+  "channels": [
+    "dev"
+  ]
+}
diff --git a/tools/build_changelog b/tools/build_changelog
index ee38d844..bb0c8e03 100755
--- a/tools/build_changelog
+++ b/tools/build_changelog
@@ -82,6 +82,10 @@ fi
 
 for git_dir in $(/usr/bin/find projects -maxdepth 3 -type d -name .git || \
     fail "failed to invoke find"); do
+	if [[ "$git_dir" = "projects/eng/.git" ]]; then
+	    # eng.git isn't currently branched for releases
+	    continue
+	fi
 	(build_section ${git_dir}/.. ${lastbranch} >> output/changelog.txt) || \
 	    fail "failed to build_section for projects/${project}"
 done
diff --git a/tools/build_jenkins b/tools/build_jenkins
new file mode 100755
index 00000000..15e0357e
--- /dev/null
+++ b/tools/build_jenkins
@@ -0,0 +1,266 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2019, Joyent, Inc.
+#
+
+#
+# This is a wrapper used by jenkins to invoke the different targets needed for
+# the Triton platform and SmartOS build variants.
+#
+
+if [[ -n "${TRACE}" ]]; then
+    export PS4='${BASH_SOURCE}:${LINENO}: '
+    set -o xtrace
+fi
+
+set -o errexit
+set -o pipefail
+
+# Allow users to override the Manta path where we publish artifacts
+if [[ -z "${ENGBLD_DEST_OUT_PATH}" ]]; then
+    export ENGBLD_DEST_OUT_PATH=/stor/builds
+fi
+
+export TIMESTAMP=$(TZ=UTC date "+%Y%m%dT%H%M%SZ")
+export PATH=/usr/sfw/bin:${PATH}
+export BUILDSTAMP=${TIMESTAMP}
+
+# Used to flag if this is a non-default build. This modifies the description
+# used for the platform manifest.
+export ENGBLD_CUSTOM=''
+
+# Jenkins should set this, otherwise default to the current branch, assuming
+# our working directory is a smartos-live repository.
+if [[ -z "${BRANCH}" ]]; then
+    export BRANCH=$(git branch 2> /dev/null | \
+        sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
+fi
+
+#
+# Emit usage information
+#
+function usage {
+    echo "Usage: build_jenkins [options]"
+    echo "OPTIONS"
+    echo "  -c            clobber illumos before building"
+    echo "  -d            build a debug platform"
+    echo "  -i            do an incremental build"
+    echo "  -F <flavor>   build one of the following build flavors:"
+    echo "                    triton (default)    a normal platform build"
+    echo "                    smartos             only smartos platform bits"
+    echo "                    triton-and-smartos  both of the above"
+    echo ""
+    echo "ENVIRONMENT"
+    echo "  BRANCH                the branch of smartos-live being built"
+    echo "  ENGBLD_DEST_OUT_PATH  the Manta path used when uploading artifacts"
+    echo "  PLAT_CONFIGURE_ARGS   additional arguments to pass to 'configure'"
+    echo "  PLATFORM_BUILD_FLAVOR one of the -F arguments, as above"
+    echo "  CONFIGURE_BRANCHES    content for the 'configure-branches' file"
+    echo "  CONFIGURE_SMARTOS_URL a url for a custom 'configure.smartos' file"
+    echo ""
+    echo "NOTE"
+    echo "  Production builds expect we're building in a freshly cloned"
+    echo "  repository. We do not attempt to 'make clean' before rebuilding."
+    exit 2
+}
+
+#
+# A simple log wrapper for running a major build step
+#
+function log_cmd {
+    echo "==== Running $@ ====" | tee -a ${ENGBLD_LOG}
+    $@ 2>&1 | tee -a ${ENGBLD_LOG}
+}
+
+#
+# A simple log wrapper
+#
+function log {
+    $@ 2>&1 | tee -a ${ENGBLD_LOG}
+}
+
+#
+# Main
+#
+while getopts "cdiF:" opt; do
+    case "${opt}" in
+        c)
+            ENGBLD_CONFIGURE_ILLUMOS_CLOBBER_ARG="-c"
+            ;;
+        d)
+            # build debug platform bits
+            ENGBLD_CONFIGURE_DEBUG_ARG='-d'
+            ENGBLD_DEBUG_SUFFIX='-debug'
+            ;;
+        F)
+            PLATFORM_BUILD_FLAVOR="${OPTARG}"
+            ;;
+        i)
+            ENGBLD_INCREMENTAL='true'
+            ;;
+        *)
+            echo "Error: Unknown argument ${opt}"
+            usage
+    esac
+done
+shift $((OPTIND - 1))
+
+if [[ -z "$PLATFORM_BUILD_FLAVOR" ]]; then
+    PLATFORM_BUILD_FLAVOR="triton"
+fi
+
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'triton'|'smartos'|'triton-and-smartos')
+        ;;
+    *)
+        echo "Error: unknown platform build flavor: ${PLATFORM_BUILD_FLAVOR}"
+        usage
+esac
+
+ENGBLD_LOGDIR=output/bits/platform${ENGBLD_DEBUG_SUFFIX}
+ENGBLD_LOG=${ENGBLD_LOGDIR}/build.log
+
+# Rotate our output directories, mostly for the benefit of non-production builds
+# We can't log these commands as we're physically removing the log location.
+for output in output output-iso output-usb output-vmware; do
+    if [[ -d "${output}" ]]; then
+        echo "Removing old ${output} directory"
+        rm -rf ${output}.old
+        echo "Renaming output to ${output}.old"
+        mv ${output} ${output}.old
+    fi
+done
+
+mkdir -p ${ENGBLD_LOGDIR}
+touch ${ENGBLD_LOG}
+
+# Remove any old logs so that these don't get swept up as Jenkins artifacts
+log rm -rf log projects/illumos/log
+
+#
+# If this is an incremental build, remove stamp files so that we build those
+# targets incrementally. Otherwise, trust that the repository is freshly
+# cloned. From Jenkins, using the "Wipe out repository & force clone" git
+# plugin option will achieve this.
+#
+if [[ -n "${ENGBLD_INCREMENTAL}" ]]; then
+    log rm -f *stamp
+else
+    log echo "WARNING: This build expects the repository to be freshly cloned,"
+    log echo "         mirroring what MG used to do for production builds."
+fi
+
+# Is this a release branch build
+set +o errexit
+echo "${BRANCH}" | grep -q "^release"
+if [[ $? -eq 0 ]]; then
+    ENGBLD_RELEASE=true
+else
+    ENGBLD_RELEASE=""
+fi
+set -o errexit
+
+#
+# ${CONFIGURE_BRANCHES} is multi-line jenkins parameter, set so that users can
+# specify which branches of the repositories in the smartos-live 'projects'
+# framework to build. If Jenkins doesn't set this, use this sensible default.
+#
+if [[ -z "${CONFIGURE_BRANCHES}" ]]; then
+    BRANCH_BASE=$(basename $BRANCH)
+    if [[ -z "$BRANCH_BASE" ]]; then
+        BRANCH_BASE=master
+    fi
+    CONFIGURE_BRANCHES=$(cat <<DONE
+illumos-extra: $BRANCH_BASE
+illumos-joyent: $BRANCH_BASE
+ur-agent: $BRANCH_BASE
+kvm: $BRANCH_BASE
+kvm-cmd: $BRANCH_BASE
+mdata-client: $BRANCH_BASE
+eng: $BRANCH_BASE
+DONE
+)
+fi
+
+log echo "Using following configure-branches file:"
+log echo ${CONFIGURE_BRANCHES}
+echo "${CONFIGURE_BRANCHES}" > configure-branches
+
+#
+# Determine whether we've got a custom build so mark build artifacts
+# accordingly. For our purposes, a "custom" build
+# is any build where we've modified build arguments or git branches or
+# URLs via custom smartos.configure file if we're *not* on a release branch.
+#
+if [[ -n "${PLAT_CONFIGURE_ARGS}" ]]; then
+    export ENGBLD_CUSTOM=" (custom)"
+fi
+
+CONFIGURE_BRANCHES_SHA=$( \
+    egrep -v "^[ \t]*$|^#" configure-branches | \
+    LC_ALL=C sort | \
+    digest -a sha1)
+
+case ${CONFIGURE_BRANCHES_SHA} in
+    # default build
+    "6ff927d460e388ad18baf13f1d95cc2e6b890310")
+        ;;
+    # a custom build, only if we're not building a release branch
+    # (while it's possible to do a release-branch build of smartos-live
+    # that uses non-release branches of other repos, this seems unlikely)
+    *)
+        if [[ -z "$ENGBLD_RELEASE" ]]; then
+            export ENGBLD_CUSTOM=" (custom)"
+        fi
+        ;;
+esac
+
+#
+# ${CONFIGURE_SMARTOS_URL} allows a developer to override the configure.smartos
+# file with one from the supplied URL. This allows the user to build using
+# different git repositories, for example. Any override here indicates a custom
+# build.
+#
+if [[ -n "${CONFIGURE_SMARTOS_URL}" ]]; then
+    log echo "Using alternate configure.smartos URL: ${CONFIGURE_SMARTOS_URL}"
+    log_cmd curl -o configure.smartos ${CONFIGURE_SMARTOS_URL}
+    export ENGBLD_CUSTOM=" (custom)"
+else
+    cp sample.configure.smartos configure.smartos
+fi
+
+# Configure the build based on the arguments we've gathered
+log_cmd  ./configure -r \
+    ${ENGBLD_CONFIGURE_DEBUG_ARG} \
+    ${ENGBLD_CONFIGURE_ILLUMOS_CLOBBER_ARG} \
+    ${PLAT_CONFIGURE_ARGS}
+
+log_cmd gmake common-release
+
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'triton')
+        log_cmd gmake triton-release
+        ;;
+    'smartos')
+        log_cmd gmake smartos-only-release
+        ;;
+    'triton-and-smartos')
+        log_cmd gmake triton-smartos-release
+        ;;
+esac
+
+# Update Manta snaplinks for smartos, only if this is a release build
+case "${PLATFORM_BUILD_FLAVOR}" in
+    'smartos'|'triton-and-smartos')
+        if [[ -n "${ENGBLD_RELEASE}" ]]; then
+            log_cmd env TRACE=1 ./tools/smartos-release \
+                "${BRANCH}" "${TIMESTAMP}"
+        fi
+        ;;
+esac
diff --git a/tools/configure_branches_desc b/tools/configure_branches_desc
new file mode 100755
index 00000000..c3ec33a0
--- /dev/null
+++ b/tools/configure_branches_desc
@@ -0,0 +1,45 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2019, Joyent, Inc.
+#
+
+#
+# Parse the configure-branches file, and emit a uniquified hyphen-separated
+# list of branch names, omitting the name of the current branch. If there is
+# only a single branch and it's the same as the current branch of
+# smartos-live.git (passed as $1), then emit nothing.
+#
+
+if [[ -z "$1" ]]; then
+	echo "Usage: configure_branches_desc <current_branch>"
+	exit 1
+else
+	current_branch=$1
+fi
+
+if [[ ! -n configure-branches ]]; then
+	echo "Error: missing configure-branches file"
+	exit 1
+fi
+
+# we use xargs to trim leading/trailing whitespace.
+branches=$(grep -v '^#' configure-branches | \
+    grep : | cut -d: -f2 | sort -u | xargs)
+
+if [[ $branches == $current_branch ]]; then
+	exit 0
+fi
+
+for branch in $branches; do
+	if [[ "$branch" == "$current_branch" ]]; then
+		continue
+	fi
+	echo -n "-$branch"
+done
+echo ""
\ No newline at end of file
diff --git a/tools/smartos-index b/tools/smartos-index
new file mode 100755
index 00000000..7605c363
--- /dev/null
+++ b/tools/smartos-index
@@ -0,0 +1,19 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+echo "<html>"
+echo "<head><title>SmartOS ${1}</title></head>"
+echo "<body>"
+for x in `ls * | grep -v index.html`; do
+  echo "<a href=\"$x\">$x</a><br>"
+done
+echo "<a href=\"md5sums.txt\">md5sums.txt</a>"
+echo "</body></html>"
diff --git a/tools/smartos-release b/tools/smartos-release
new file mode 100755
index 00000000..6e58a51a
--- /dev/null
+++ b/tools/smartos-release
@@ -0,0 +1,96 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019, Joyent, Inc.
+#
+
+# Update the SmartOS release directory
+if [ "$TRACE" != "" ]; then
+    export PS4='${BASH_SOURCE}:${LINENO}: '
+    set -o xtrace
+fi
+set -o errexit
+
+TOP=$(cd $(dirname $0)/../; pwd)
+PATH=$PATH:${TOP}/node_modules/manta/bin
+
+
+# --- Manta config
+
+if [[ -z "$MANTA_KEY_ID" ]]; then
+    export MANTA_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
+fi
+if [[ -z "$MANTA_URL" ]]; then
+    export MANTA_URL=https://us-east.manta.joyent.com
+fi
+if [[ -z "$MANTA_USER" ]]; then
+    export MANTA_USER="Joyent_Dev";
+fi
+
+
+# --- support functions
+
+function fatal {
+    echo "$(basename $0): error: $1"
+    exit 1
+}
+
+function errexit {
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1 at line $2"
+}
+
+function print_help() {
+    echo "Usage:"
+    echo "  ./tools/smartos-release BRANCH TIMESTAMP"
+    echo ""
+    echo "Create snaplinks under /\${MANTA_USER}/public/SmartOS/\${TIMESTAMP}"
+    echo "pointing to objects under /\${MANTA_USER}/public/builds/platform/\${BRANCH}-\${TIMESTAMP}/platform/"
+}
+
+
+# --- mainline
+
+trap 'errexit $? $LINENO' EXIT
+
+BRANCH=$1
+shift
+TIMESTAMP=$1
+
+
+# Note that ${BRANCH} appears only once here as we assume that for release
+# builds, our configure-branches file contains only a single branch name
+# (branching all repositories for the same release name) See $(PUB_BRANCH_DESC)
+# in the top-level Makefile for more details.
+SOURCE=/${MANTA_USER}/public/builds/platform/${BRANCH}-${TIMESTAMP}/platform/
+SMARTOS=/${MANTA_USER}/public/SmartOS
+DESTINATION=${SMARTOS}/${TIMESTAMP}
+
+start_time=$(date +%s)
+echo "Creating release snaplinks under ${DESTINATION}"
+
+mmkdir -v -p ${DESTINATION}
+mfind ${SOURCE} -t o | while read OBJECT; do
+    mln ${OBJECT} ${DESTINATION}/$(basename ${OBJECT})
+done
+
+echo "Updating top level ${SMARTOS} snaplinks"
+mln ${SOURCE}/platform-${TIMESTAMP}.tgz ${SMARTOS}/platform-latest.tgz
+mln ${SOURCE}/smartos-${TIMESTAMP}.iso ${SMARTOS}/smartos-latest.iso
+mln ${SOURCE}/smartos-${TIMESTAMP}-USB.img.gz ${SMARTOS}/smartos-latest-USB.img.gz
+mln ${SOURCE}/smartos-${TIMESTAMP}.vmwarevm.tar.gz ${SMARTOS}/smartos-latest.vmwarevm.tar.gz
+
+echo "Updating ${SMARTOS}/latest object"
+echo ${DESTINATION} | mput -v -H 'content-type: text/plain' ${SMARTOS}/latest
+
+echo "<html><head><meta HTTP-EQUIV=\"REFRESH\" content=\"0; url=${SOURCE}/index.html\"></head></html>" | mput -H 'content-type: text/html' ${SMARTOS}/latest.html
+
+end_time=$(date +%s)
+elapsed=$((${end_time} - ${start_time}))
+echo "Creating release snaplinks took ${elapsed} seconds (Manta path=${DESTINATION})"
+exit 0
