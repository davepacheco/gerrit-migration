From 1ac4ba156bb16ad8b260b07755e171df8051a5ef Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 11 Jan 2018 19:18:10 +0100
Subject: [PATCH] TOOLS-1943 sdcadm should not use sdc-oneachnode to get VM
 info

---
 lib/common.js                                 | 99 +++++++++----------
 lib/post-setup/docker.js                      |  3 +-
 lib/procedures/shared.js                      | 80 +++++++++++----
 lib/procedures/update-moray-v2.js             | 28 ++++--
 lib/procedures/update-single-hn-sapi-v1.js    | 31 +++---
 .../update-stateless-services-v1.js           |  3 +-
 6 files changed, 148 insertions(+), 96 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index cce8d49..1c69875 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -26,7 +26,7 @@ var errors = require('./errors');
 var InternalError = errors.InternalError;
 
 
-//---- globals
+// --- globals
 
 var DEFAULTS_PATH = path.resolve(__dirname, '..', 'etc', 'defaults.json');
 var CONFIG_PATH = '/var/sdcadm/sdcadm.conf';
@@ -35,7 +35,7 @@ var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 
 var SECONDS = 1000;
 
-//---- exports
+// --- exports
 
 /*
  * Assert that "opts", a named parameter object passed to a function,
@@ -570,54 +570,38 @@ function spawnRun(args, cb) {
 
 
 /**
- * Call `vmadm get UUID` using sdc-oneachnode. Pretty much the same than
+ * Call `vmadm get UUID` using CNAPI. Pretty much the same than
  * the `vmGet` function at lib/vmadm.js
  *
  * @param opts {Object}
  *      - uuid {String} The VM UUID
  *      - server {String} The UUID for the server where the VM is located
- *      - log {Bunyan Logger}
+ *      - cnapi {Object CNAPI client}
  * @param cb {Function} `function (err, vm)`
  */
 function vmGetRemote(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.server, 'opts.server');
-    assert.object(opts.log, 'opts.log');
+    assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
-    var argv = [
-        '/opt/smartdc/bin/sdc-oneachnode',
-        format('-n %s ', opts.server),
-        '-j',
-        format('/usr/sbin/vmadm get %s', opts.uuid)
-    ];
-    var env = objCopy(process.env);
-    var execOpts = {
-        encoding: 'utf8',
-        env: env
-    };
-    opts.log.trace({argv: argv}, 'Getting VM info');
-    execFile(argv[0], argv.slice(1), execOpts, function (err, stdout, stderr) {
+    var vmLoadPath = util.format('/servers/%s/vms/%s',
+        opts.server, opts.uuid);
+    opts.cnapi.get({
+        path: vmLoadPath
+    }, function getVmCb(err, vm) {
         if (err) {
-            var msg = format(
-                'error Getting VM info %s:\n' +
-                '\targv: %j\n' +
-                '\texit status: %s\n' +
-                '\tstdout:\n%s\n' +
-                '\tstderr:\n%s', opts.uuid,
-                argv, err.code, stdout.trim(), stderr.trim());
-            return cb(new errors.InternalError({
-                message: msg,
-                cause: err
-            }));
+            cb(new errors.SDCClientError(err, 'cnapi'));
+            return;
         }
-        var res = JSON.parse(stdout);
-        if (!res.length || !res[0].result || !res[0].result.stdout) {
-            opts.log.error({res: res}, 'vmadm get result');
-            return cb('Unexpected vmadm get output');
+
+        if (!vm) {
+            cb(new errors.InternalError({
+                message: 'Unexpected response from CNAPI'
+            }));
+            return;
         }
-        var vm = JSON.parse(res[0].result.stdout);
         cb(null, vm);
     });
 }
@@ -625,18 +609,20 @@ function vmGetRemote(opts, cb) {
 function getZoneIP(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
-    assert.object(opts.log, 'opts.log');
+    assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
     vmGetRemote(opts, function (err, vm) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         var ip = vm.nics.filter(function (n) {
             return (n.nic_tag === 'admin');
         })[0].ip;
-        return cb(null, ip);
+
+        cb(null, ip);
     });
 }
 
@@ -672,15 +658,17 @@ function waitUntilZoneInDNS(opts, cb) {
     assert.string(opts.alias, 'opts.alias');
     assert.string(opts.domain, 'opts.domain');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
     getZoneIP({
         uuid: opts.uuid,
         server: opts.server,
-        log: opts.log
+        cnapi: opts.cnapi
     }, function (err, ip) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         var counter = 0;
         var limit = 60;
@@ -691,26 +679,28 @@ function waitUntilZoneInDNS(opts, cb) {
                 log: opts.log
             }, function (err2, ips) {
                 if (err2) {
-                    return cb(err2);
+                    cb(err2);
+                    return;
                 }
 
                 if (ips.indexOf(ip) !== -1) {
-                    return cb(null);
+                    cb(null);
+                    return;
                 }
 
                 counter += 1;
 
                 if (counter < limit) {
-                    return setTimeout(_checkDNS, 5000);
+                    setTimeout(_checkDNS, 5000);
                 } else {
-                    return cb(format(
+                    cb(format(
                         'New %s ($uuid) zone\'s IP %s did not ' +
                         'enter DNS', opts.alias, ip));
                 }
             });
         }
 
-        return _checkDNS();
+        _checkDNS();
     });
 
 }
@@ -720,16 +710,17 @@ function waitUntilZoneOutOfDNS(opts, cb) {
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.alias, 'opts.alias');
     assert.string(opts.domain, 'opts.domain');
-    assert.object(opts.log, 'opts.log');
+    assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
     getZoneIP({
         uuid: opts.uuid,
         server: opts.server,
-        log: opts.log
+        cnapi: opts.cnapi
     }, function (err, ip) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         var counter = 0;
         var limit = 60;
@@ -740,26 +731,28 @@ function waitUntilZoneOutOfDNS(opts, cb) {
                 log: opts.log
             }, function (err2, ips) {
                 if (err2) {
-                    return cb(err2);
+                    cb(err2);
+                    return;
                 }
 
                 if (ips.indexOf(ip) === -1) {
-                    return cb(null);
+                    cb(null);
+                    return;
                 }
 
                 counter += 1;
 
                 if (counter < limit) {
-                    return setTimeout(_checkDNS, 5000);
+                    setTimeout(_checkDNS, 5000);
                 } else {
-                    return cb(format(
+                    cb(format(
                         'New %s ($uuid) zone\'s IP %s did not ' +
                         'leave DNS', opts.alias, ip));
                 }
             });
         }
 
-        return _checkDNS();
+        _checkDNS();
     });
 }
 
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index ce05b48..fc040cc 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -390,7 +390,8 @@ function do_docker(subcmd, opts, args, cb) {
                 progress: self.progress,
                 zonename: ctx.dockerInst.uuid,
                 log: self.log,
-                server: ctx.dockerVm.server_uuid
+                server: ctx.dockerVm.server_uuid,
+                sdcadm: self.sdcadm
             }, next);
         },
 
diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index 3be70e5..4355993 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path');
@@ -622,36 +622,63 @@ function disableVMRegistrar(arg, next) {
 }
 
 function waitUntilVMNotInDNS(arg, next) {
+    assert.object(arg, 'arg');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.log, 'arg.log');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.string(arg.zonename, 'arg.zonename');
+    assert.string(arg.server, 'arg.server');
+    assert.string(arg.alias, 'arg.alias');
+    assert.string(arg.domain, 'arg.domain');
+    assert.func(next, 'next');
+
     var progress = arg.progress;
-    var zonename = arg.zonename;
     var server = arg.server;
+    var zonename = arg.zonename;
+
     progress('Wait until VM %s is out of DNS', zonename);
     common.waitUntilZoneOutOfDNS({
         uuid: zonename,
         server: server,
         alias: arg.alias,
         domain: arg.domain,
-        log: arg.log
+        log: arg.log,
+        cnapi: arg.sdcadm.cnapi
     }, next);
 }
 
 function waitUntilVmInDNS(arg, next) {
+    assert.object(arg, 'arg');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.log, 'arg.log');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.string(arg.zonename, 'arg.zonename');
+    assert.string(arg.server, 'arg.server');
+    assert.string(arg.alias, 'arg.alias');
+    assert.string(arg.domain, 'arg.domain');
+    assert.func(next, 'next');
+
     var progress = arg.progress;
-    var zonename = arg.zonename;
     var server = arg.server;
+    var zonename = arg.zonename;
+
     progress('Waiting until %s instance is in DNS', zonename);
     common.waitUntilZoneInDNS({
         uuid: zonename,
         server: server,
         alias: arg.alias,
         domain: arg.domain,
-        log: arg.log
+        log: arg.log,
+        cnapi: arg.sdcadm.cnapi
     }, next);
 }
 
 function stopTmpVm(arg, next) {
     if (arg.HA) {
-        return next();
+        next();
+        return;
     }
     var progress = arg.opts.progress;
     var log = arg.opts.log;
@@ -934,17 +961,27 @@ function updateVmUserScriptRemote(arg, next) {
 }
 
 function ensureDelegateDataset(arg, next) {
-    var progress = arg.progress;
-    var zonename = arg.zonename;
-    var log = arg.log;
-    var server = arg.server;
-    var service = arg.service;
-    var expectedDs = format('zones/%s/data', zonename);
+    assert.object(arg, 'arg');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.log, 'arg.log');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.string(arg.zonename, 'arg.zonename');
+    assert.string(arg.server, 'arg.server');
+    assert.func(next, 'next');
+
     var env = common.objCopy(process.env);
     var execOpts = {
         encoding: 'utf8',
         env: env
     };
+    var expectedDs = format('zones/%s/data', arg.zonename);
+    var log = arg.log;
+    var progress = arg.progress;
+    var sdcadm = arg.sdcadm;
+    var server = arg.server;
+    var service = arg.service;
+    var zonename = arg.zonename;
 
     function createDataset(_, nextCb) {
 
@@ -964,10 +1001,11 @@ function ensureDelegateDataset(arg, next) {
                     '\tstdout:\n%s\n' +
                     '\tstderr:\n%s', zonename,
                     argv, err.code, stdo.trim(), stde.trim());
-                return nextCb(new errors.InternalError({
+                nextCb(new errors.InternalError({
                     message: msg,
                     cause: err
                 }));
+                return;
             }
             log.debug('zfs dataset created: %s', stdo.toString());
             nextCb();
@@ -990,10 +1028,11 @@ function ensureDelegateDataset(arg, next) {
                     '\tstdout:\n%s\n' +
                     '\tstderr:\n%s', zonename,
                     argv, err.code, stdo.trim(), stde.trim());
-                return nextCb(new errors.InternalError({
+                nextCb(new errors.InternalError({
                     message: msg,
                     cause: err
                 }));
+                return;
             }
             log.debug('zfs dataset set zoned=on: %s', stdo.toString());
             nextCb();
@@ -1017,10 +1056,11 @@ function ensureDelegateDataset(arg, next) {
                     '\tstdout:\n%s\n' +
                     '\tstderr:\n%s', zonename,
                     argv, err.code, stdo.trim(), stde.trim());
-                return nextCb(new errors.InternalError({
+                nextCb(new errors.InternalError({
                     message: msg,
                     cause: err
                 }));
+                return;
             }
             log.debug('zonecfg set dataset name: %s', stdo.toString());
             nextCb();
@@ -1039,15 +1079,17 @@ function ensureDelegateDataset(arg, next) {
     common.vmGetRemote({
         uuid: zonename,
         server: server,
-        log: log
-    }, function (err, vm) {
+        cnapi: sdcadm.cnapi
+    }, function getVmCb(err, vm) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
         if (!vm.datasets || vm.datasets.indexOf(expectedDs) === -1) {
             progress('Adding a delegate dataset to "%s" VM %s', service.name,
                 zonename);
-            return addDelegateDataset();
+            addDelegateDataset();
+            return;
         }
 
         progress('"%s" VM already has a delegate dataset', service.name);
diff --git a/lib/procedures/update-moray-v2.js b/lib/procedures/update-moray-v2.js
index bde918f..48b8999 100644
--- a/lib/procedures/update-moray-v2.js
+++ b/lib/procedures/update-moray-v2.js
@@ -246,7 +246,8 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                             zonename: ins.zonename,
                             alias: ins.alias,
                             server: ins.server,
-                            domain: change.service.metadata.SERVICE_DOMAIN
+                            domain: change.service.metadata.SERVICE_DOMAIN,
+                            sdcadm: opts.sdcadm
                         }, next);
                     },
                     function reprovisionInst(_, next) {
@@ -278,7 +279,8 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                             zonename: ins.zonename,
                             server: ins.server,
                             alias: ins.alias,
-                            domain: change.service.metadata.SERVICE_DOMAIN
+                            domain: change.service.metadata.SERVICE_DOMAIN,
+                            sdcadm: opts.sdcadm
                         }, next);
                     }
                 ]);
@@ -325,6 +327,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         next();
                     });
                 },
+
                 function waitForTmpInstToBeUp(ctx, next) {
                     if (ctx.tmpInstanceExists) {
                         next();
@@ -351,10 +354,10 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: ctx.tmpUUID,
                         alias: ctx.tmpAlias,
                         server: ctx.change.inst.server,
-                        domain: ctx.change.service.metadata.SERVICE_DOMAIN
+                        domain: ctx.change.service.metadata.SERVICE_DOMAIN,
+                        sdcadm: opts.sdcadm
                     }, next);
                 },
-
                 function disableVMRegistrar(ctx, next) {
                     s.disableVMRegistrar({
                         log: opts.log,
@@ -369,7 +372,8 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: ctx.change.inst.zonename,
                         server: ctx.change.inst.server,
                         alias: ctx.change.inst.alias,
-                        domain: ctx.change.service.metadata.SERVICE_DOMAIN
+                        domain: ctx.change.service.metadata.SERVICE_DOMAIN,
+                        sdcadm: opts.sdcadm
                     }, next);
                 },
                 function reprovisionSingleInst(ctx, next) {
@@ -401,14 +405,17 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: ctx.change.inst.zonename,
                         server: ctx.change.inst.server,
                         alias: ctx.change.inst.alias,
-                        domain: ctx.change.service.metadata.SERVICE_DOMAIN
+                        domain: ctx.change.service.metadata.SERVICE_DOMAIN,
+                        sdcadm: opts.sdcadm
                     }, next);
                 },
                 function disableTmpVMRegistrar(ctx, next) {
                     s.disableVMRegistrar({
-                        log: opts.log,
-                        progress: progress,
-                        zonename: ctx.tmpUUID
+                        zonename: ctx.tmpUUID,
+                        alias: ctx.change.inst.alias,
+                        server: ctx.change.inst.server,
+                        domain: ctx.change.service.metadata.SERVICE_DOMAIN,
+                        sdcadm: opts.sdcadm
                     }, next);
                 },
                 function waitUntilTmpVMNotInDNS(ctx, next) {
@@ -418,7 +425,8 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: ctx.tmpUUID,
                         alias: ctx.tmpAlias,
                         server: ctx.change.inst.server,
-                        domain: ctx.change.service.metadata.SERVICE_DOMAIN
+                        domain: ctx.change.service.metadata.SERVICE_DOMAIN,
+                        sdcadm: opts.sdcadm
                     }, next);
                 },
                 function destroyTmpVm(ctx, next) {
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index 1b5e3a4..d400360 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -181,20 +181,22 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             s.checkIfTmpVMHasErrors,
             function waitUntilTmpInDNS(_, next) {
                 if (arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
-                return s.waitUntilVmInDNS({
+                s.waitUntilVmInDNS({
                     log: opts.log,
                     progress: progress,
                     zonename: arg.tmpUUID,
                     alias: arg.tmpAlias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    domain: change.service.metadata.SERVICE_DOMAIN,
+                    sdcadm: opts.sdcadm
                 }, next);
             },
             // Common to both HA/no-HA
             function disableVMRegistrar(_, next) {
-                return s.disableVMRegistrar({
+                s.disableVMRegistrar({
                     log: opts.log,
                     progress: progress,
                     zonename: inst.zonename
@@ -207,7 +209,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: inst.zonename,
                     alias: inst.alias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    domain: change.service.metadata.SERVICE_DOMAIN,
+                    sdcadm: opts.sdcadm
                 }, next);
             },
             s.reprovision,
@@ -219,16 +222,18 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: inst.zonename,
                     alias: inst.alias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    domain: change.service.metadata.SERVICE_DOMAIN,
+                    sdcadm: opts.sdcadm
                 }, next);
             },
             // And, again, no-HA only:,
             function disableTmpVMRegistrar(_, next) {
                 if (arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
 
-                return s.disableVMRegistrar({
+                s.disableVMRegistrar({
                     log: opts.log,
                     progress: progress,
                     zonename: arg.tmpUUID
@@ -236,15 +241,17 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             },
             function waitUntilTmpVMNotInDNS(_, next) {
                 if (arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
-                return s.waitUntilVMNotInDNS({
+                s.waitUntilVMNotInDNS({
                     log: opts.log,
                     progress: progress,
                     zonename: arg.tmpUUID,
                     alias: arg.tmpAlias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    domain: change.service.metadata.SERVICE_DOMAIN,
+                    sdcadm: opts.sdcadm
                 }, next);
             },
             s.stopTmpVm,
diff --git a/lib/procedures/update-stateless-services-v1.js b/lib/procedures/update-stateless-services-v1.js
index 754375a..1a85f1c 100644
--- a/lib/procedures/update-stateless-services-v1.js
+++ b/lib/procedures/update-stateless-services-v1.js
@@ -134,7 +134,8 @@ UpdateStatelessServices.prototype.execute = function ussv2Execute(opts, cb) {
                             progress: progress,
                             zonename: ins.zonename,
                             log: opts.log,
-                            server: ins.server
+                            server: ins.server,
+                            sdcadm: opts.sdcadm
                         }, next);
                     });
                 }
-- 
2.21.0

