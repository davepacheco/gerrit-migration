commit 0f2ae306b67c66417bc760e37c51ea0809ae68e4
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-05-15T18:39:29+00:00 (5 months ago)
    
    MANTA-4276 Plumb through object id RPC parameter for createobject function for boray

diff --git a/src/object.rs b/src/object.rs
index 9f95322..09c07d4 100644
--- a/src/object.rs
+++ b/src/object.rs
@@ -117,6 +117,7 @@ pub struct CreateObjectPayload {
     pub owner          : Uuid,
     pub bucket_id      : Uuid,
     pub name           : String,
+    pub id             : Uuid,
     pub vnode          : u64,
     pub content_length : i64,
     pub content_md5    : String,
@@ -274,7 +275,7 @@ pub fn create_handler(msg_id: u32,
                    mut response: Vec<FastMessage>,
                    pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                    log: &Logger) -> Result<Vec<FastMessage>, IOError> {
-    debug!(log, "handling putobject function request");
+    debug!(log, "handling createobject function request");
 
     let arg0 = match &args[0] {
         Value::Object(_) => &args[0],
@@ -287,13 +288,13 @@ pub fn create_handler(msg_id: u32,
 
     let payload = match payload_result {
         Ok(o) => o,
-        Err(_) => return Err(other_error("Failed to parse JSON data as payload for putobject function"))
+        Err(_) => return Err(other_error("Failed to parse JSON data as payload for createobject function"))
     };
 
     // Make db request and form response
-    put(payload, pool)
+    create(payload, pool)
         .and_then(|resp| {
-            let method = String::from("putobject");
+            let method = String::from("createobject");
             let value = array_wrap(serde_json::to_value(resp).unwrap());
             let msg = FastMessage::data(msg_id, FastMessageData::new(method, value));
             response.push(msg);
@@ -434,7 +435,7 @@ fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
         vnode, order_by, limit, offset)
 }
 
-fn put(payload: CreateObjectPayload,
+fn create(payload: CreateObjectPayload,
        pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
        -> Result<Option<ObjectResponse>, IOError>
 {
@@ -447,16 +448,16 @@ fn put(payload: CreateObjectPayload,
                                      &payload.bucket_id,
                                      &payload.name])
         .and_then(|_moved_rows| {
-            txn.query(create_sql.as_str(), &[&Uuid::new_v4(),
-                                          &payload.owner,
-                                          &payload.bucket_id,
-                                          &payload.name,
-                                          &payload.content_length,
-                                          &content_md5_bytes,
-                                          &payload.content_type,
-                                          &payload.headers,
-                                          &payload.sharks,
-                                          &payload.properties])
+            txn.query(create_sql.as_str(), &[&payload.id,
+                                             &payload.owner,
+                                             &payload.bucket_id,
+                                             &payload.name,
+                                             &payload.content_length,
+                                             &content_md5_bytes,
+                                             &payload.content_type,
+                                             &payload.headers,
+                                             &payload.sharks,
+                                             &payload.properties])
         })
         .map_err(|e| {
             let pg_err = format!("{}", e);
diff --git a/tests/rpc_handlers.rs b/tests/rpc_handlers.rs
index 0ef359a..7b7b77a 100644
--- a/tests/rpc_handlers.rs
+++ b/tests/rpc_handlers.rs
@@ -246,6 +246,7 @@ fn verify_rpc_handlers() {
 
 
     // Create an object
+    let object_id = Uuid::new_v4();
     let shark1 = object::StorageNodeIdentifier {
         datacenter: "us-east-1".into(),
         manta_storage_id: "1.stor.us-east.joyent.com".into(),
@@ -259,6 +260,7 @@ fn verify_rpc_handlers() {
         owner: owner_id,
         bucket_id,
         name: object.clone(),
+        id: object_id,
         vnode: 1,
         content_length: 5,
         content_md5: "xzY5jJbR9rcrMRhlcmi/8g==".into(),
