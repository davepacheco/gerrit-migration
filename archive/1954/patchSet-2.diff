commit 02583eb671650e0bb7db98c067b5b0887afa8381 (refs/changes/54/1954/2)
Author: Josh Wilsdon <jwilsdon@joyent.com>
Date:   2017-05-15T12:06:00-07:00 (2 years, 5 months ago)
    
    VOLAPI-48 volapi should allow creation w/o 'name' and generate names

diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index d548945..20ea0f8 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -262,6 +262,17 @@ function _releaseTicketAndSendResponse(ticket, req, res, next, error) {
     }
 }
 
+function generateVolumeName(volumeParams) {
+    var newName;
+
+    // Take the uuid of the volume and a new random uuid and smash them together
+    // while removing the '-'s so that the resulting name looks similar to what
+    // Docker uses.
+    newName = (volumeParams.uuid + libuuid.create()).replace(/\-/g, '');
+
+    return (newName);
+}
+
 function createVolume(req, res, next) {
     assert.object(req, 'req');
     assert.object(req.params, 'req.params');
@@ -288,7 +299,8 @@ function createVolume(req, res, next) {
         }
     }
 
-    validationErr = volumesValidation.validateVolumeName(volumeName);
+    validationErr = volumesValidation.validateVolumeName(volumeName,
+        {allowEmpty: true});
     if (validationErr !== undefined) {
         validationErrs.push(validationErr);
     }
@@ -328,6 +340,12 @@ function createVolume(req, res, next) {
         size: req.params.size
     };
 
+    // generate a name if there isn't one
+    if (!volumeParams.name || volumeParams.name === '') {
+        volumeParams.name = generateVolumeName(volumeParams);
+        req.log.debug({name: volumeParams.name}, 'generated name for volume');
+    }
+
     var context = {};
 
     vasync.pipeline({funcs: [
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index f21ec69..35b2071 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var volumes = require('../volumes');
@@ -27,11 +27,21 @@ function validateOwnerUuid(ownerUuid) {
      return err;
 }
 
-function validateVolumeName(name) {
-    var validName = typeof (name) === 'string' &&
+function validateVolumeName(name, opts) {
+     var validName;
+     var err;
+
+     // Some actions allow non-existent names (empty or undefined), if
+     // opts.allowEmpty is truthy, we'll accept a missing name or empty string
+     // as valid.
+     if (opts && opts.allowEmpty && ((name === undefined) ||
+             (typeof (name) === 'string' && name === ''))) {
+         validName = true;
+     } else {
+        validName = typeof (name) === 'string' &&
         name !== '' &&
         name.match(VALID_VOLUME_NAME_REGEXP);
-     var err;
+     }
 
      if (!validName) {
          err = new Error(name + ' is not a valid volume name');
@@ -95,4 +105,4 @@ module.exports = {
     validateVolumeState: validateVolumeState,
     validateVolumeType: validateVolumeType,
     validateVolumeUuid: validateVolumeUuid
-};
\ No newline at end of file
+};
diff --git a/test/integration/nfs-shared-volumes-creation-name-generation.test.js b/test/integration/nfs-shared-volumes-creation-name-generation.test.js
new file mode 100644
index 0000000..8bed7fe
--- /dev/null
+++ b/test/integration/nfs-shared-volumes-creation-name-generation.test.js
@@ -0,0 +1,122 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var test = require('tape');
+var vasync = require('vasync');
+
+var configLoader = require('../../lib/config-loader');
+
+var clientsSetup = require('./lib/clients-setup');
+var resources = require('./lib/resources');
+
+var CONFIG = configLoader.loadConfigSync();
+
+var UFDS_ADMIN_UUID = CONFIG.ufdsAdminUuid;
+assert.string(UFDS_ADMIN_UUID, 'UFDS_ADMIN_UUID');
+
+var CLIENTS;
+var CREATED_VOLUMES = []; // volumes we created and need to destroy
+var NFS_SHARED_VOLUMES_NAMES_PREFIX = 'nfs-shared-volumes';
+var NFS_SHARED_VOLUMES_TYPE_NAME = 'tritonnfs';
+
+var NETWORKS;
+
+test('setup', function (tt) {
+    tt.test('setup clients', function (t) {
+        clientsSetup.getApiClients(function onClientsSetup(err, clients) {
+            CLIENTS = clients;
+            t.end();
+        });
+    });
+
+    tt.test('setup networks', function (t) {
+        CLIENTS.napi.get('/networks',
+            function onListNetworks(err, networks) {
+                t.ifError(err, 'expected success listing networks');
+                t.ok(networks, 'got networks from NAPI');
+                t.ok(Array.isArray(networks),
+                    'networks object from NAPI is an array');
+                t.ok(networks.length > 1, 'expected more than 1 NAPI network');
+                NETWORKS = networks;
+                t.end();
+            });
+    });
+});
+
+test('NFS shared volume creation with missing "name"', function (tt) {
+    tt.test('creating a nfs shared volume w/o name should generate one',
+        function (t) {
+            var COMMON_PAYLOAD = {
+                owner_uuid: UFDS_ADMIN_UUID,
+                type: NFS_SHARED_VOLUMES_TYPE_NAME,
+                networks: [NETWORKS[0].uuid]
+            };
+            var EMPTY_NAME_PAYLOAD = JSON.parse(JSON.stringify(COMMON_PAYLOAD));
+            var MISSING_NAME_PAYLOADS;
+
+            EMPTY_NAME_PAYLOAD.name = '';
+
+            MISSING_NAME_PAYLOADS = [
+                COMMON_PAYLOAD,
+                EMPTY_NAME_PAYLOAD
+            ];
+
+            vasync.forEachParallel({
+                func: createVolumeWithMissingName,
+                inputs: MISSING_NAME_PAYLOADS
+            }, function missingNamesTested(err, results) {
+                t.end();
+            });
+
+            function createVolumeWithMissingName(volumeParams, callback) {
+                assert.func(callback, 'callback');
+
+                CLIENTS.volapi.createVolumeAndWait(volumeParams,
+                    function onVolumeCreated(err, volume) {
+                        t.ifErr(err, 'volume creation (name='
+                            + JSON.stringify(volumeParams.name)
+                            + ') should succeed');
+
+                        t.equal(volume.name.length, 64,
+                            'expected 64 character name');
+                        t.ok(volume.name.match(/^[a-f0-9]*$/),
+                            'expected ^[a-f0-9]*$');
+                        t.equal(volume.name.substr(0, 32),
+                            volume.uuid.replace(/\-/g, ''),
+                            'expected uuid to match first 32 chars of volume '
+                                + 'name');
+
+                        CREATED_VOLUMES.push(volume.uuid);
+
+                        callback();
+                    });
+            }
+        });
+});
+
+test('teardown', function (tt) {
+    tt.test('cleanup', function (t) {
+        vasync.forEachParallel({
+            func: function deleteVolume(volumeUuid, done) {
+                CLIENTS.volapi.deleteVolumeAndWait({
+                    uuid: volumeUuid,
+                    owner_uuid: UFDS_ADMIN_UUID
+                }, function onVolumeDeleted(err) {
+                    t.ifErr(err, 'delete volume ' + volumeUuid);
+                    done();
+                });
+            },
+            inputs: CREATED_VOLUMES
+        }, function cleanupDone(err) {
+            t.end();
+        });
+    });
+});
diff --git a/test/runtest.common b/test/runtest.common
index d194b8e..15fec1e 100644
--- a/test/runtest.common
+++ b/test/runtest.common
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright 2016, Joyent, Inc.
+# Copyright 2017, Joyent, Inc.
 #
 
 #
@@ -34,4 +34,12 @@ To run this test you must create the file:
 after ensuring you have no production data on this SDC.
 EOF
     exit 2
-fi
\ No newline at end of file
+fi
+
+# If we're in the global zone, we don't want to use the default 127.0.0.1:80,
+# and instead want to find the admin IP of VOLAPI.
+if [[ $(zonename) == "global" ]]; then
+    # Gather DC info
+    export VOLAPI_URL="http://$(vmadm lookup -j alias=volapi0 | json 0.nics \
+        | json -c 'this.nic_tag==="admin"' 0.ip)"
+fi
diff --git a/test/runtests b/test/runtests
index e9346f2..0c15e53 100755
--- a/test/runtests
+++ b/test/runtests
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2016, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -78,10 +78,6 @@ done
 # Include common functions (e.g. fatal) and perform prereq checks.
 source $(dirname $0)/runtest.common
 
-# Gather DC info
-export VOLAPI_URL="http://$(vmadm lookup -j alias=volapi0 | json 0.nics \
-    | json -c 'this.nic_tag==="admin"' 0.ip)"
-
 # Setup a clean output dir.
 echo "# Setup a clean output dir ($OUTPUT_DIR)."
 rm -rf $OUTPUT_DIR
