From b4fd088c2ccbdb18cff13529246bff4b59553d74 Mon Sep 17 00:00:00 2001
From: Robert Bogart <robert.bogart@joyent.com>
Date: Wed, 13 Mar 2019 22:40:07 +0000
Subject: [PATCH] MANTA-4131 Accelerated garbage collection needs option to
 obtain records locally

---
 bin/gc_feeder.sh | 124 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)
 create mode 100644 bin/gc_feeder.sh

diff --git a/bin/gc_feeder.sh b/bin/gc_feeder.sh
new file mode 100644
index 0000000..4d82d91
--- /dev/null
+++ b/bin/gc_feeder.sh
@@ -0,0 +1,124 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2019, Joyent, Inc.
+#
+
+ARCHIVE_BASE="/var/tmp/archive/$(date +%m.%d.%Y)"
+ARCHIVE_NUM="$(find $ARCHIVE_BASE -maxdepth 1 -type d ! -path $ARCHIVE_BASE |grep -c /)"
+ARCHIVE_DIR="$ARCHIVE_BASE/$ARCHIVE_NUM"
+
+MAKO_GC_INSTRUCTIONS="/var/tmp/mako_gc_instructions"
+MAKO_GC_STREAMS_DBS="/var/tmp/mako_gc_streams_dbs"
+SPLIT_FILES="/var/tmp/makos"
+
+PID=$$
+PID_FILE=/tmp/gc_feeder.pid
+
+function fatal
+{
+	local LNOW=`date`
+	echo "$LNOW: $(basename $0): fatal error: $*" >&2
+	exit 1
+}
+
+function log
+{
+	local LNOW=`date`
+	echo "$LNOW: $(basename $0): info: $*" >&2
+}
+
+function generate_split_files
+{
+	local storage_id
+	local moray
+	local array=(`find "$MAKO_GC_INSTRUCTIONS" -type f -name '*stor*'`)
+
+	log "Begin generating new split files at: $SPLIT_FILES"
+
+	for i in ${array[@]}
+	do
+		storage_id=$(basename $i)
+		moray=$(basename $(dirname $i))
+
+		mkdir -p "$SPLIT_FILES/$storage_id"
+
+		#
+		# Also worth mentioning, when splitting a file for a storage
+		# node, we add the shard that it came from to the name of
+		# of the split files so that two files for the same storage
+		# node (but different shards) don't collide.
+		#
+		split -l 100 "$i" \
+		    "$SPLIT_FILES/$storage_id/${storage_id}-${moray}"
+	done
+}
+
+#
+# Ensure that this script is not already executing before we proceed.  If it is
+# then exit, flagging failure.
+#
+LAST_PID=$(cat $PID_FILE 2>/dev/null)
+
+if [[ -n "$LAST_PID" ]]; then
+	ps -p $LAST_PID >/dev/null
+	if [[ $? -eq 0 ]]; then
+		echo "$0 process still running.  Exiting..."
+		exit 1
+	fi
+fi
+
+echo -n $PID >$PID_FILE
+
+#
+# Do not permit overwriting of an exiting set of archived files.
+#
+if [[ -d "$ARCHIVE_DIR" ]]; then
+	fatal "Attempting to overwrite files that have alraedy been archived"
+fi
+
+#
+# Create the directory for backing up existing files.
+#
+log "Creating archive directory: $ARCHIVE_DIR"
+mkdir -p "$ARCHIVE_DIR"
+
+#
+# Disable all feeders in the zone.
+#
+svcadm disable -s '*feeder-*'
+
+#
+# Clean out old split files directory.
+#
+if [[ -d "$SPLIT_FILES" ]]; then
+	rm -rf "$SPLIT_FILES"
+fi
+
+#
+# Generate latest set of split files.
+#
+mkdir $SPLIT_FILES
+generate_split_files
+
+#
+# Archive current set of files before starting the feeders.
+#
+log "Archiving last set of obtained files from the feeder to: $ARCHIVE_DIR"
+mv "$MAKO_GC_INSTRUCTIONS" "$ARCHIVE_DIR"
+mv "$MAKO_GC_STREAMS_DBS" "$ARCHIVE_DIR"
+
+mkdir "$MAKO_GC_INSTRUCTIONS"
+
+#
+# Start the feeders.
+#
+log "Starting feeders back up."
+svcadm enable -s '*feeder-*'
+rm "$PID_FILE"
+exit 0
-- 
2.21.0

