commit 97bf42161279eaca2c8f5ac5d1fbcc9e0efd24aa (refs/changes/91/1791/2)
Author: princesspretzel <brittany@231c6c0e-5992-6e17-85ee-8ac2c04d81b1.local>
Date:   2017-04-18T01:23:34+00:00 (2 years, 6 months ago)
    
    MANTA-3096 madtom config needs to be more tolerant of missing IPs

diff --git a/Makefile b/Makefile
index f71bd89..27176bc 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -84,7 +84,7 @@ CLEAN_FILES += $(NODEUNIT) ./node_modules/nodeunit
 .PHONY: test
 test: $(NODEUNIT)
 	mkdir -p ./tmp
-	find test/ -name '*.test.js' | xargs -n 1 $(NODEUNIT)
+	find test/ -name '*.test.js' | xargs -t -L1 ctrun -o noorphan node
 
 .PHONY: scripts
 scripts: deps/manta-scripts/.git
diff --git a/README.md b/README.md
index 82e1b82..a198d15 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # manta-madtom
@@ -14,7 +14,7 @@ This repository is part of the Joyent Manta project.  For contribution
 guidelines, issues, and general documentation, visit the main
 [Manta](http://github.com/joyent/manta) project page.
 
-Madtom is the mantified node-checker, so that we have a "pretty" ui for seeing
+Madtom is the mantified node-checker, so that we have a "pretty" UI for seeing
 which components in the system are currently up.
 
 # Repository
@@ -35,42 +35,51 @@ which components in the system are currently up.
     package.json    npm module info (holds the project version)
     README.md
 
-# Development
-
-To check out and run the tests:
+# Setup
 
-    git clone git@github.com:joyent/manta-madtom.git
-    cd madtom
+    git clone https://github.com/joyent/manta-madtom.git
+    cd manta-madtom
     make all
-    make test
 
-Before commiting/pushing run `make prepush` and, if possible, get a code
-review.
+# Development
 
-# Testing
+You first need to generate a hosts configuration file.  If you are working in a build zone,
+you should navigate the filesystem to find the etc/config.json file relative to the project's
+source code.  If you are working off of an image that has been built and deployed, you will
+find the file in `/opt/smartdc/madtom/etc/config.json`.  Once you have the file and have
+recreated it in your project directory under etc/config.json (which you'll have to make),
+you can run the following command to generate a hosts file of components you'd like to see =
+on the madtom dashboard:
 
-You first need to generate a hosts config from a running coal (note that `head`
-here is coal's GZ):
+    $ ./bin/generate_hosts_config.js -c etc/config.json \
+        -f /var/tmp/madtom-hosts.json
 
-    $ export sdc_datacenter=$(ssh -q head "sysinfo | json 'Datacenter Name'")
-    $ export sdc_dns=$(ssh -q head "vmadm list -o alias,nics.0.ip" | \
-                       grep binder | tr -s ' ' | cut -d ' ' -f 2)
-    $ ./bin/generate_hosts_config.js -d $sdc_datacenter:$sdc_dns \
-       -l $sdc_datacenter -f /var/tmp/madtom-hosts.json -n admin | bunyan
+Please note that if you use different file paths than those shown here, your tests for
+`generate_hosts_config` will break (unless you change those variables' values).
 
 You'll also want to copy one of the configuration templates in the
 "sapi\_manifests" directory to a new file and fill in any required properties.
-For example, you might copy ./sapi\_manifests/madtom\_coal/template to
-etc/checker-coal.json.
+For example, you might copy `./sapi\_manifests/madtom\_coal/template` to
+`etc/checker-coal.json` if you are using CoaL, and the corresponding checker-lab file for
+developing on a lab setup.
 
 Then fire up the madtom server (which is a very thin shim over the node-checker
 server):
 
-    $ node ./server.js -c ./etc/checker-coal.json \
+    $ node ./server.js -c ./etc/checker-{env}.json \
       -c /var/tmp/madtom-hosts.json | bunyan
 
 Note that the order of `-c` is significant.  Finally, point your browser at:
 
-    http://localhost:8080
+    http://{localhost or your IP}:8080
+
+You may have to set up SSH tunneling or an NFS server from your development environment depending on
+where you need to access the browser.
+
+You should see the status of all processes running in CoaL or your lab environment.
+
+# Testing
+
+To run the tests use the command `make test`.
 
-You should see the status of all processes in coal.
+Before commiting/pushing run `make prepush` and get a code review.
\ No newline at end of file
diff --git a/bin/generate_hosts_config.js b/bin/generate_hosts_config.js
index 9d1455e..ad52254 100755
--- a/bin/generate_hosts_config.js
+++ b/bin/generate_hosts_config.js
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -25,8 +25,6 @@ var LOG = bunyan.createLogger({
         'serializers': bunyan.stdSerializers
 });
 
-
-
 //--- Helpers
 
 function usage(msg) {
@@ -535,13 +533,13 @@ vasync.pipeline({
                                         }
                                 }
 
+                                //Leave hosts with no IP out of the config
                                 if (!ip) {
-                                        var m = 'vm doesnt have nics';
                                         _self.log.error({
                                                 'uuid': uuid,
                                                 'vm': vm
-                                        }, m);
-                                        return (subcb(new Error(m)));
+                                        }, 'vm doesnt have nics');
+                                        continue;
                                 }
 
                                 //Finally build the host struct...
@@ -561,6 +559,12 @@ vasync.pipeline({
                                 ip = findServerIp(_self['AGENT_NETWORK_TAG'],
                                                   sv);
                                 hdc = sv.sysinfo['Datacenter Name'];
+                                if (!ip) {
+                                        _self.log.error({
+                                                'uuid': uuid
+                                        }, 'agent doesnt have nics');
+                                        continue;
+                                }
                                 _self['HOSTS'].push({
                                         'hostType': 'agent',
                                         'ip': ip,
diff --git a/test/generate_hosts_config.test.js b/test/generate_hosts_config.test.js
new file mode 100644
index 0000000..7d129f8
--- /dev/null
+++ b/test/generate_hosts_config.test.js
@@ -0,0 +1,152 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assertplus = require('assert-plus');
+var child = require('child_process');
+var fs = require('fs');
+var path = require('path');
+var vasync = require('vasync');
+
+/*
+ * etc/config.json is the expected location for the madtom
+ * configuration file.
+ */
+var config_file = 'etc/config.json';
+var host_config_file = '/var/tmp/madtom-hosts.json';
+var node_path = path.join(__dirname, '..', 'node', 'bin', 'node');
+var target_path = path.join(__dirname, '..', 'bin', 'generate_hosts_config.js');
+
+var executed;
+var failed;
+
+/*
+ * This code tests the total/end functionality of the command line
+ * creation of the generation hosts configuration file in cases where
+ * error messaging can be checked by exact matches.
+ */
+
+var cases = [ {
+        'name': 'testing w/ correct flags & args',
+        'argv': ['-c', config_file, '-f', host_config_file ],
+        'error': null
+}, {
+        'name': 'testing w/ -c & -f order flipped',
+        'argv': ['-f', host_config_file, '-c', config_file ],
+        'error': null
+}, {
+        'name': 'testing w/ -f noargs',
+        'argv': ['-f'],
+        'error': 'Command failed: option requires an argument -- f\n' +
+            'Error while reading/parsing config file: ENOENT\n' +
+            'usage: generate_hosts_config.js [-a agentNetworkTag] ' +
+            '[-c configFile] [-f output_file] [-n mantaNetworkTag]\n'
+}, {
+        'name': 'testing w/ -f only',
+        'argv': ['-f', host_config_file ],
+        'error': 'Command failed: Error while reading/parsing config ' +
+            'file: ENOENT\n' +
+            'usage: generate_hosts_config.js [-a agentNetworkTag] ' +
+            '[-c configFile] [-f output_file] [-n mantaNetworkTag]\n'
+}, {
+        'name': 'testing w/ -c & -f noargs',
+        'argv': ['-c', '-f'],
+        'error': 'Command failed: Error while reading/parsing ' +
+            'config file: ENOENT\n' +
+            'usage: generate_hosts_config.js [-a agentNetworkTag] ' +
+            '[-c configFile] [-f output_file] [-n mantaNetworkTag]\n'
+}, {
+        'name': 'testing w/ -c & -f wrong args',
+        'argv': ['-c', host_config_file, '-f', config_file ],
+        'error': 'Command failed: Error while reading/parsing ' +
+        'config file: ENOENT\n' +
+            'usage: generate_hosts_config.js [-a agentNetworkTag] ' +
+            '[-c configFile] [-f output_file] [-n mantaNetworkTag]\n'
+} ];
+
+function main() {
+        executed = 0;
+        failed = 0;
+
+        fs.exists(config_file, function (there) {
+                if (!there) {
+                    console.log('tests for %s could not be run, since the' +
+                        'configuration file needed at %s is missing',
+                        target_path, config_file);
+                    process.exit(1);
+                }
+        });
+
+        vasync.forEachPipeline({
+                'func': runTestCases,
+                'inputs': cases
+        }, function (err) {
+                if (err) {
+                        console.error('test failed with error: ', err);
+                }
+        });
+
+        process.on('exit', function () {
+                assertplus.equal(executed, cases.length);
+                console.log('%d case(s) executed, %d case(s) failed',
+                    executed, failed);
+                if (failed > 0) {
+                        process.exit(1);
+                }
+        });
+}
+
+/*
+ * This function tests if running the generate host config
+ * script actually created the file, or threw the expected
+ * error in the case that incorrect or disordered arguments
+ * were passed to the command in the test case.
+ */
+function runTestCases(c, cb) {
+        assertplus.string(target_path);
+        assertplus.string(host_config_file);
+        assertplus.object(c);
+        assertplus.string(c['name']);
+        assertplus.arrayOfString(c['argv']);
+
+        /*
+         * In order to test successful creation of the config
+         * file, we can't leave the file created from old tests
+         * lying around after each test run.
+         */
+        fs.exists(host_config_file, function (there) {
+                if (there) {
+                    fs.unlinkSync(host_config_file);
+                    console.log('Cleaning up: deleted ' + host_config_file +
+                        ' left over from previous testing.');
+                }
+        });
+
+        child.execFile(target_path, c['argv'], function
+            (error, stdout, stderr) {
+                fs.exists(host_config_file, function (there) {
+                        if (error && (c['error'] !== error.message)) {
+                                console.log('* TEST CASE ' + c['name'] +
+                                    ' failed with unexpected error:\n',
+                                    error.message);
+                                failed++;
+                        }
+                        if (!error && (c['error'] !== null)) {
+                                console.log('* TEST CASE ' + c['name'] +
+                                    ' should have failed with error:\n' +
+                                    c['error']);
+                                failed++;
+                        }
+                        executed++;
+                });
+                cb();
+        });
+}
+
+main();
\ No newline at end of file
diff --git a/test/helper.js b/test/helper.js
deleted file mode 100644
index 19771e8..0000000
--- a/test/helper.js
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var bunyan = require('bunyan');
-
-
-
-///--- Helpers
-
-function createLogger(name, stream) {
-        var log = bunyan.createLogger({
-                level: (process.env.LOG_LEVEL || 'info'),
-                name: name || process.argv[1],
-                stream: stream || process.stdout,
-                src: true,
-                serializers: bunyan.stdSerializers
-        });
-        return (log);
-}
-
-
-
-///--- Exports
-
-module.exports = {
-
-        after: function after(teardown) {
-                module.parent.exports.tearDown = function _teardown(callback) {
-                        try {
-                                teardown.call(this, callback);
-                        } catch (e) {
-                                console.error('after:\n' + e.stack);
-                                process.exit(1);
-                        }
-                };
-        },
-
-        before: function before(setup) {
-                module.parent.exports.setUp = function _setup(callback) {
-                        try {
-                                setup.call(this, callback);
-                        } catch (e) {
-                                console.error('before:\n' + e.stack);
-                                process.exit(1);
-                        }
-                };
-        },
-
-        test: function test(name, tester) {
-                module.parent.exports[name] = function _(t) {
-                        var _done = false;
-                        t.end = function end() {
-                                if (!_done) {
-                                        _done = true;
-                                        t.done();
-                                }
-                        };
-                        t.notOk = function notOk(ok, message) {
-                                return (t.ok(!ok, message));
-                        };
-
-                        tester.call(this, t);
-                };
-        },
-
-        createLogger: createLogger
-
-};
diff --git a/test/server.test.js b/test/server.test.js
new file mode 100644
index 0000000..42baae8
--- /dev/null
+++ b/test/server.test.js
@@ -0,0 +1,90 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assertplus = require('assert-plus');
+var child = require('child_process');
+var fs = require('fs');
+var path = require('path');
+var vasync = require('vasync');
+
+var node_path = path.join(__dirname, '..', 'build', 'node', 'bin', 'node');
+var target_path = path.join(__dirname, '..', 'server.js');
+
+var executed;
+var failed;
+
+var cases = [ {
+        'name': 'testing w/ -c no args',
+        'argv': [target_path, '-c'],
+        'error': 'Command failed: option requires an argument -- c\n' +
+            'No config files specified.\n' +
+            'usage: server.js [-c config_file] [-p port]\n'
+}, {
+        'name': 'testing w/ no flags',
+        'argv': [target_path],
+        'error': 'Command failed: No config files specified.\n' +
+            'usage: server.js [-c config_file] [-p port]\n'
+} ];
+
+function main() {
+        executed = 0;
+        failed = 0;
+
+        vasync.forEachPipeline({
+                'func': runTestCases,
+                'inputs': cases
+        }, function (err) {
+                if (err) {
+                        console.error('test failed with error: ', err);
+                }
+        });
+
+        process.on('exit', function () {
+                assertplus.equal(executed, cases.length);
+                console.log('%d case(s) executed, %d case(s) failed',
+                    executed, failed);
+                if (failed > 0) {
+                        process.exit(1);
+                }
+        });
+}
+
+/*
+ * This function tests if the expected error messages are thrown
+ * when incorrect or missing arguments are passed to the server
+ * run command in the test cases.
+ */
+function runTestCases(c, cb) {
+        assertplus.string(node_path);
+        assertplus.object(c);
+        assertplus.string(c['name']);
+        assertplus.arrayOfString(c['argv']);
+        assertplus.string(c['error']);
+
+        child.execFile(node_path, c['argv'], function
+            (error, stdout, stderr) {
+                if (error && (c['error'] !== error.message)) {
+                        console.error('* TEST CASE ' + c['name'] +
+                            ' failed with unexpected error:\n', error.message);
+                        failed++;
+                }
+                if (!error && c['error'] !== null) {
+                        console.error('* TEST CASE ' + c['name'] +
+                            ' should have failed with error:\n' +
+                            c['error']);
+                        failed++;
+                }
+                executed++;
+                cb();
+        });
+}
+
+
+main();
\ No newline at end of file
diff --git a/test/stub.test.js b/test/stub.test.js
deleted file mode 100644
index b77f392..0000000
--- a/test/stub.test.js
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var bunyan = require('bunyan');
-var helper = require('./helper.js');
-
-
-
-///--- Globals
-
-//TODO: Make this an actual test...
-var test = helper.test;
-
-
-
-///--- Tests
-
-test('stub', function (t) {
-        t.done();
-});
