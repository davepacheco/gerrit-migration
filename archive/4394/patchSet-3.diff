commit f43f6f73faa17a67e5a0a485c333528c6bfe4bd2
Author: Gabe Gorelick <gabe@catalytic.com>
Date:   2018-06-20T20:48:47-05:00 (1 year, 4 months ago)
    
    joyen/node-verror#57 Ability to disable printf

diff --git a/CHANGES.md b/CHANGES.md
index bbb745a..653b747 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 None yet.
 
+## v1.11.0
+
+* #57 `skipPrintf` and `PError`
+
 ## v1.10.0
 
 * #49 want convenience functions for MultiErrors
diff --git a/README.md b/README.md
index c1f0635..54cfd61 100644
--- a/README.md
+++ b/README.md
@@ -24,6 +24,8 @@ The classes here are:
   for logging and debugging.
 * **SError**, which is just like VError but interprets printf-style arguments
   more strictly.
+* **PError**, which is just like VError but does not interpret printf-style
+  arguments at all.
 * **MultiError**, which is just an Error that encapsulates one or more other
   errors.  (This is used for parallel operations that return several errors.)
 
@@ -247,6 +249,7 @@ Option name      | Type             | Meaning
 `name`           | string           | Describes what kind of error this is.  This is intended for programmatic use to distinguish between different kinds of errors.  Note that in modern versions of Node.js, this name is ignored in the `stack` property value, but callers can still use the `name` property to get at it.
 `cause`          | any Error object | Indicates that the new error was caused by `cause`.  See `cause()` below.  If unspecified, the cause will be `null`.
 `strict`         | boolean          | If true, then `null` and `undefined` values in `sprintf_args` are passed through to `sprintf()`.  Otherwise, these are replaced with the strings `'null'`, and '`undefined`', respectively.
+`skipPrintf`     | boolean          | If true, then `sprintf()` is not called.
 `constructorOpt` | function         | If specified, then the stack trace for this error ends at function `constructorOpt`.  Functions called by `constructorOpt` will not show up in the stack.  This is useful when this class is subclassed.
 `info`           | object           | Specifies arbitrary informational properties that are available through the `VError.info(err)` static class method.  See that method for details.
 
@@ -261,12 +264,14 @@ argument is not an object or an Error.
 The `WError` constructor is used exactly the same way as the `VError`
 constructor.  The `SError` constructor is also used the same way as the
 `VError` constructor except that in all cases, the `strict` property is
-overriden to `true.
+overridden to `true`.  Likewise, the `PError` constructor is used the same way
+as the `VError` constructor except that in all cases, the `skipPrintf`
+property is overridden to `true`.
 
 
 ## Public properties
 
-`VError`, `WError`, and `SError` all provide the same public properties as
+`VError`, `WError`, `SError`, and `PError` all provide the same public properties as
 JavaScript's built-in Error objects.
 
 Property name | Type   | Meaning
@@ -275,7 +280,7 @@ Property name | Type   | Meaning
 `message`     | string | Human-readable summary of the failure.  Programmatically-accessible details are provided through `VError.info(err)` class method.
 `stack`       | string | Human-readable stack trace where the Error was constructed.
 
-For all of these classes, the printf-style arguments passed to the constructor
+For all of these classes, except `PError`, the printf-style arguments passed to the constructor
 are processed with `sprintf()` to form a message.  For `WError`, this becomes
 the complete `message` property.  For `SError` and `VError`, this message is
 prepended to the message of the cause, if any (with a suitable separator), and
diff --git a/lib/verror.js b/lib/verror.js
index 8663dde..daa1cf1 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -20,6 +20,7 @@ VError.VError = VError;
 /* Other exported classes */
 VError.SError = SError;
 VError.WError = WError;
+VError.PError = PError;
 VError.MultiError = MultiError;
 
 /*
@@ -107,7 +108,7 @@ function parseConstructorArguments(args)
 	 * "strict" option to the VError constructor.
 	 */
 	mod_assertplus.object(options);
-	if (!options.strict && !args.strict) {
+	if (!options.skipPrintf && !options.strict && !args.strict) {
 		sprintf_args = sprintf_args.map(function (a) {
 			return (a === null ? 'null' :
 			    a === undefined ? 'undefined' : a);
@@ -116,6 +117,8 @@ function parseConstructorArguments(args)
 
 	if (sprintf_args.length === 0) {
 		shortmessage = '';
+	} else if (options.skipPrintf) {
+		shortmessage = sprintf_args[0];
 	} else {
 		shortmessage = sprintf.apply(null, sprintf_args);
 	}
@@ -344,7 +347,7 @@ VError.errorForEach = function (err, func)
  */
 function SError()
 {
-	var args, obj, parsed, options;
+	var args, obj, parsed, options, verrorArgs;
 
 	args = Array.prototype.slice.call(arguments, 0);
 	if (!(this instanceof SError)) {
@@ -359,7 +362,13 @@ function SError()
 	});
 
 	options = parsed.options;
-	VError.call(this, options, '%s', parsed.shortmessage);
+
+	verrorArgs = [options];
+	if (!options.skipPrintf) {
+		verrorArgs.push('%s');
+	}
+	verrorArgs.push(parsed.shortmessage);
+	VError.apply(this, verrorArgs);
 
 	return (this);
 }
@@ -402,7 +411,7 @@ MultiError.prototype.errors = function me_errors()
  */
 function WError()
 {
-	var args, obj, parsed, options;
+	var args, obj, parsed, options, verrorArgs;
 
 	args = Array.prototype.slice.call(arguments, 0);
 	if (!(this instanceof WError)) {
@@ -418,7 +427,13 @@ function WError()
 
 	options = parsed.options;
 	options['skipCauseMessage'] = true;
-	VError.call(this, options, '%s', parsed.shortmessage);
+
+	verrorArgs = [options];
+	if (!options.skipPrintf) {
+		verrorArgs.push('%s');
+	}
+	verrorArgs.push(parsed.shortmessage);
+	VError.apply(this, verrorArgs);
 
 	return (this);
 }
@@ -449,3 +464,31 @@ WError.prototype.cause = function we_cause(c)
 
 	return (this.jse_cause);
 };
+
+/*
+ * PError is like VError, but the message is not run through printf-style
+ * templating.
+ */
+function PError() {
+	var args, obj, parsed;
+
+	args = Array.prototype.slice.call(arguments, 0);
+	if (!(this instanceof PError)) {
+		obj = Object.create(PError.prototype);
+		PError.apply(obj, arguments);
+		return (obj);
+	}
+
+	parsed = parseConstructorArguments({
+		'argv': args,
+		'strict': false,
+		'skipPrintf': true
+	});
+
+	VError.call(this, parsed.options, parsed.shortmessage);
+
+	return (this);
+}
+
+mod_util.inherits(PError, VError);
+PError.prototype.name = 'PError';
diff --git a/package.json b/package.json
index 79295c5..defd8b6 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
 	"name": "verror",
-	"version": "1.10.0",
+	"version": "1.11.0",
 	"description": "richer JavaScript errors",
 	"main": "./lib/verror.js",
 	"repository": {
diff --git a/test/tst.common.js b/test/tst.common.js
index e0355d6..5ee7a0e 100644
--- a/test/tst.common.js
+++ b/test/tst.common.js
@@ -10,6 +10,7 @@ var mod_testcommon = require('./common');
 var SError = mod_verror.SError;
 var VError = mod_verror.VError;
 var WError = mod_verror.WError;
+var PError = mod_verror.PError;
 
 /*
  * Save the generic parts of all stack traces so we can avoid hardcoding
@@ -177,8 +178,23 @@ function runTests(cons, label)
 	    '    at runTests (dummy filename)',
 	    '    at Object.<anonymous> (dummy filename)'
 	].join('\n') + '\n' + nodestack);
+
+	/* disabling printf */
+	err = new cons({ 'skipPrintf': true }, '%s');
+	mod_assert.equal(err.message, '%s');
+	err = new cons({ 'skipPrintf': true });
+	mod_assert.equal(err.message, '');
+	err = new cons({ 'skipPrintf': true }, '%s', 'foo');
+	mod_assert.equal(err.message, '%s');
+	err = new cons({ 'skipPrintf': false }, '%s', 'foo');
+	mod_assert.equal(err.message, 'foo');
+	err = new cons({ 'skipPrintf': null }, '%s', 'foo');
+	mod_assert.equal(err.message, 'foo');
+	err = new cons({ 'skipPrintf': undefined }, '%s', 'foo');
+	mod_assert.equal(err.message, 'foo');
 }
 
 runTests(VError, 'VError');
 runTests(WError, 'WError');
 runTests(SError, 'VError');
+runTests(PError, 'PError');
