From 328fe7c16185c477613be11b7452cc776d597051 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 1 Sep 2016 20:11:28 +0000
Subject: [PATCH] FWAPI-252 Allow using rvmRules on RVMs w/o IPs Reviewed by:
 Matt Smillie <matt.smillie@joyent.com> Approved by: Matt Smillie
 <matt.smillie@joyent.com>

---
 src/fw/lib/fw.js                    | 24 +++++----
 src/fw/lib/rvm.js                   | 22 ++++++--
 src/fw/lib/util/vm.js               | 16 +++---
 src/fw/test/unit/remote-vms.test.js | 80 +++++++++++++++++++++++++++++
 4 files changed, 119 insertions(+), 23 deletions(-)

diff --git a/src/fw/lib/fw.js b/src/fw/lib/fw.js
index 9daa1e0d..748e048c 100644
--- a/src/fw/lib/fw.js
+++ b/src/fw/lib/fw.js
@@ -210,7 +210,7 @@ function getAffectedRules(new_vms, log) {
                 || rule.from.vms.length > 0;
         }
         return false;
-    }
+    };
 }
 
 
@@ -1579,7 +1579,8 @@ function add(opts, callback) {
         function disk(_, cb) { loadDataFromDisk(log, cb); },
 
         function newRemoteVMs(res, cb) {
-            mod_rvm.create(res.vms, opts.remoteVMs, log, cb);
+            mod_rvm.create({ allVMs: res.vms, requireIPs: true, log: log },
+                opts.remoteVMs, cb);
         },
 
         // Create remote VMs (if any) from payload
@@ -2289,7 +2290,8 @@ function update(opts, callback) {
 
         // Create remote VMs (if any) from payload
         function newRemoteVMs(res, cb) {
-            mod_rvm.create(res.vms, opts.remoteVMs, log, cb);
+            mod_rvm.create({ allVMs: res.vms, requireIPs: true, log: log },
+                opts.remoteVMs, cb);
         },
 
         // Create a lookup for the new remote VMs
@@ -2454,15 +2456,14 @@ function getRemoteTargets(opts, callback) {
         }
 
         var targets = {};
-        var rules = res.state.rules;
-        var vms = res.state.vms;
 
-        for (var r in rules) {
-            var rule = rules[r];
+        for (var r in res.state.rules) {
+            var rule = res.state.rules[r];
 
             for (var d in DIRECTIONS) {
                 var dir = DIRECTIONS[d];
-                addOtherSideRemoteTargets(vms, rule, targets, dir, log);
+                addOtherSideRemoteTargets(
+                    res.state.vms, rule, targets, dir, log);
             }
         }
 
@@ -2575,8 +2576,8 @@ function getRemoteVMrules(opts, callback) {
             return mod_rvm.load(opts.remoteVM, log, cb);
         },
         function rvms(state, cb) {
-            return mod_rvm.create(state.vms, [ state.rvm ],
-                log, function (e, rvmList) {
+            mod_rvm.create({ allVMs: state.vms, requireIPs: false, log: log },
+                [ state.rvm ], function (e, rvmList) {
                 if (e) {
                     return cb(e);
                 }
@@ -2699,7 +2700,8 @@ function validatePayload(opts, callback) {
         function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
         function remoteVMs(_, cb) { mod_rvm.loadAll(log, cb); },
         function newRemoteVMs(state, cb) {
-            mod_rvm.create(state.vms, opts.remoteVMs, log, cb);
+            mod_rvm.create({ allVMs: state.vms, requireIPs: true, log: log },
+                opts.remoteVMs, cb);
         },
         // Create a combined remote VM lookup of remote VMs on disk plus
         // new remote VMs in the payload
diff --git a/src/fw/lib/rvm.js b/src/fw/lib/rvm.js
index 3a58ad79..cbc11b1a 100644
--- a/src/fw/lib/rvm.js
+++ b/src/fw/lib/rvm.js
@@ -26,6 +26,7 @@
  * fwadm: functions for manipulating remote VMs
  */
 
+var assert = require('assert-plus');
 var fs = require('fs');
 var mkdirp = require('mkdirp');
 var mod_rule = require('fwrule');
@@ -62,8 +63,12 @@ var VM_PATH = '/var/fw/vms';
  * @param callback {Function} `function (err, remoteVMs)`
  * - Where remoteVMs is an object of remote VMs, keyed by UUID
  */
-function create(allVMs, vms, log, callback) {
-    log.trace(vms, 'rvm.create: entry');
+function create(opts, vms, callback) {
+    assert.object(opts.log, 'opts.log');
+    assert.object(opts.allVMs, 'opts.allVMs');
+    assert.bool(opts.requireIPs, 'opts.requireIPs');
+
+    opts.log.trace(vms, 'rvm.create: entry');
     if (!vms || vms.length === 0) {
         return callback();
     }
@@ -74,13 +79,19 @@ function create(allVMs, vms, log, callback) {
     vms.forEach(function (vm) {
         try {
             var rvm = util_vm.createRemoteVM(vm);
-            if (allVMs.all.hasOwnProperty(rvm.uuid)) {
+            if (opts.allVMs.all.hasOwnProperty(rvm.uuid)) {
                 var err = new VError(
                     'Remote VM "%s" must not have the same UUID as a local VM',
                     rvm.uuid);
                 err.details = vm;
                 throw err;
             }
+            if (opts.requireIPs && rvm.ips.length === 0) {
+                err = new VError(
+                    'Remote VM "%s": missing IPs', rvm.uuid);
+                err.details = vm;
+                throw err;
+            }
             remoteVMs[rvm.uuid] = rvm;
         } catch (err2) {
             errs.push(err2);
@@ -88,10 +99,11 @@ function create(allVMs, vms, log, callback) {
     });
 
     if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
+        callback(util_err.createMultiError(errs));
+        return;
     }
 
-    return callback(null, remoteVMs);
+    callback(null, remoteVMs);
 }
 
 
diff --git a/src/fw/lib/util/vm.js b/src/fw/lib/util/vm.js
index a832102f..49042a4c 100644
--- a/src/fw/lib/util/vm.js
+++ b/src/fw/lib/util/vm.js
@@ -26,6 +26,7 @@
  * fwadm: shared VM logic
  */
 
+var mod_net = require('net');
 var objEmpty = require('./obj').objEmpty;
 var VError = require('verror').VError;
 
@@ -89,15 +90,16 @@ function createRemoteVM(vm) {
         });
     }
 
-    if (objEmpty(ips)) {
-        err = new VError(
-            'Remote VM "%s": missing IPs', uuid);
-        err.details = vm;
-        throw err;
-    }
-
     rvm.ips = Object.keys(ips).sort();
 
+    rvm.ips.forEach(function (ip) {
+        if (!mod_net.isIPv4(ip) && !mod_net.isIPv6(ip)) {
+            err = new VError('Invalid IP address: %s', ip);
+            err.details = vm;
+            throw err;
+        }
+    });
+
     if (vm.hasOwnProperty('tags') && !objEmpty(vm.tags)) {
         rvm.tags = {};
         for (var t in vm.tags) {
diff --git a/src/fw/test/unit/remote-vms.test.js b/src/fw/test/unit/remote-vms.test.js
index 46f87f50..aab1511b 100644
--- a/src/fw/test/unit/remote-vms.test.js
+++ b/src/fw/test/unit/remote-vms.test.js
@@ -1294,11 +1294,88 @@ exports['delete: different VMs than RVMs in rule'] = function (t) {
 };
 
 
+exports['FWAPI-252: Allow using rvmRules() on RVM w/o IPs'] = function (t) {
+    var rvm = helpers.generateVM({ tags: { other: true } });
+    delete rvm.ips;
+    delete rvm.nics;
+
+    var expRulesOnDisk = {};
+
+    var payload = {
+        remoteVMs: [],
+        rules: [
+            {
+                owner_uuid: rvm.owner_uuid,
+                rule: 'FROM tag foo TO tag other ALLOW tcp PORT 80',
+                enabled: true
+            },
+            {
+                owner_uuid: rvm.owner_uuid,
+                rule: 'FROM tag other TO tag foo ALLOW tcp PORT 80',
+                enabled: true
+            },
+            {
+                owner_uuid: rvm.owner_uuid,
+                rule: 'FROM tag foo TO tag bar ALLOW tcp PORT 80',
+                enabled: true
+            }
+        ],
+        vms: []
+    };
+
+    var rule1 = clone(payload.rules[0]);
+    var rule2 = clone(payload.rules[1]);
+    var rule3 = clone(payload.rules[2]);
+
+    async.series([
+    function (cb) {
+        fw.validatePayload(payload, function (err, res) {
+            t.ifError(err);
+            cb();
+        });
+
+    }, function (cb) {
+        fw.add(payload, function (err, res) {
+            t.ifError(err);
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            helpers.fillInRuleBlanks(res.rules, [rule1, rule2, rule3]);
+
+            expRulesOnDisk[rule1.uuid] = clone(rule1);
+            expRulesOnDisk[rule2.uuid] = clone(rule2);
+            expRulesOnDisk[rule3.uuid] = clone(rule3);
+
+            t.deepEqual(helpers.rulesOnDisk(), expRulesOnDisk, 'rules on disk');
+
+            cb();
+        });
+
+    }, function (cb) {
+        helpers.fwRvmRulesEqual({
+            t: t,
+            rules: [rule1, rule2],
+            rvm: rvm,
+            vms: []
+        }, cb);
+    }
+
+    ], function () {
+        t.done();
+    });
+};
+
+
 exports['invalid and missing parameters'] = function (t) {
     var payload = {
         vms: [ helpers.generateVM() ]
     };
 
+    var invalidIPs = helpers.generateVM();
+    invalidIPs.ips = [ '1.2.3.4.5' ];
+
     var missingIPs = helpers.generateVM();
     delete missingIPs.nics;
     delete missingIPs.ips;
@@ -1310,6 +1387,9 @@ exports['invalid and missing parameters'] = function (t) {
     sameUUID.uuid = payload.vms[0].uuid;
 
     var invalid = [
+        [ 'invalid IPs', invalidIPs, util.format(
+            'Invalid IP address: %s', invalidIPs.ips[0]) ],
+
         [ 'missing IPs', missingIPs, util.format(
             'Remote VM "%s": missing IPs', missingIPs.uuid) ],
 
-- 
2.21.0

