From 73d271bddf4f0966d6c19906e58f93e2800355d4 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 20 Dec 2017 17:26:16 +0100
Subject: [PATCH] TOOLS-1940 sdcadm should provide tools to fix sapi0 instance
 in sapi Reviewed by: Julien Gilli <julien.gilli@joyent.com>

---
 lib/procedures/create-service-instance-v1.js | 28 +++++--
 lib/steps/sapi.js                            | 87 +++++++++++++++++++-
 2 files changed, 108 insertions(+), 7 deletions(-)

diff --git a/lib/procedures/create-service-instance-v1.js b/lib/procedures/create-service-instance-v1.js
index 60f2303..d28cb99 100644
--- a/lib/procedures/create-service-instance-v1.js
+++ b/lib/procedures/create-service-instance-v1.js
@@ -18,6 +18,7 @@ var Procedure = require('./procedure').Procedure;
 var s = require('./shared');
 var common = require('../common');
 var errors = require('../errors');
+var steps = require('../steps');
 var svcadm = require('../svcadm');
 function CreateServiceInstanceV1(options) {
     assert.arrayOfObject(options.changes, 'options.changes');
@@ -68,7 +69,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
         var instances = [];
         var alias;
 
-        var steps = [
+        var funcs = [
             function getSvcInstances(_, next) {
                 progress('Getting SDC\'s %s instances from SAPI',
                         change.service.name);
@@ -94,6 +95,23 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
                 }
                 return next();
             },
+            function fixSapiZeroAlias(_, next) {
+                if (change.service.name !== 'sapi') {
+                    next();
+                    return;
+                }
+                steps.sapiFixInstanceAlias({
+                    sdcadm: sdcadm,
+                    instances: instances
+                }, function fixInstCb(fixInstErr, fixedInsts) {
+                    if (fixInstErr) {
+                        next(fixInstErr);
+                        return;
+                    }
+                    instances = fixedInsts;
+                    next();
+                });
+            },
             function generateInstanceAlias(_, next) {
                 var n = change.service.name;
                 var nextId = instances.map(function (inst) {
@@ -106,7 +124,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
         ];
 
         if (change.service.metadata) {  // workaround for assets (TOOLS-695)
-            steps = steps.concat([
+            funcs = funcs.concat([
                 s.getUserScript,
                 s.writeOldUserScriptForRollback,
                 s.updateSvcUserScript,
@@ -115,7 +133,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
         }
 
         change.servers.forEach(function (server) {
-            steps = steps.concat(
+            funcs = funcs.concat(
                 function generateAlias(ctx, next) {
                     alias = change.service.name + ctx.nextId;
                     ctx.nextId += 1;
@@ -156,7 +174,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
             );
         });
 
-        steps.push(function hupHermes(_, next) {
+        funcs.push(function hupHermes(_, next) {
             svcadm.restartHermes({
                 sdcadm: sdcadm,
                 log: opts.log,
@@ -166,7 +184,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
 
         opts.log.info({change: change},
                 'CreateServiceInstanceV1 createSvcInst');
-        vasync.pipeline({funcs: steps, arg: arg}, nextSvc);
+        vasync.pipeline({funcs: funcs, arg: arg}, nextSvc);
     }
 
     vasync.forEachPipeline({
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index f17e4a1..74003f3 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -313,11 +313,94 @@ function sapiAssertFullMode(arg, cb) {
     });
 }
 
-//---- exports
+
+/*
+ * Every triton core instance has a value for 'params.alias' in SAPI
+ * except sapi0 itself. This can make some functions which work with
+ * aliases fail. Therefore we'll provide tooling for fixing such issue
+ * when needed.
+ *
+ * HEAD-2384 should fix the root cause for this issue.
+ *
+ * @param {Object} arg: All the following arguments are required:
+ * @param {Object} arg.sdcadm: sdcadm object instance
+ * @param {Array} arg.instances: list of sapi service instances from SAPI.
+ *
+ * @param {Function} cb: Callback of the form f(err, instances);
+ */
+
+function sapiFixInstanceAlias(arg, cb) {
+    assert.object(arg, 'arg');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.array(arg.instances, 'arg.instances');
+    assert.func(cb, 'cb');
+
+    vasync.forEachPipeline({
+        inputs: arg.instances,
+        func: function fixAlias(instance, nextInstance) {
+            if (!instance.uuid) {
+                nextInstance(new errors.UsageError('Missing instance uuid'));
+                return;
+            }
+
+            if (instance.params && instance.params.alias) {
+                nextInstance();
+                return;
+            }
+
+            arg.sdcadm.vmapi.getVm({
+                uuid: instance.uuid
+            }, function getVmCb(getVmErr, vm) {
+                if (getVmErr)  {
+                    nextInstance(new errors.SDCClientError(getVmErr, 'vmapi'));
+                    return;
+                }
+
+                if (!vm.alias) {
+                    nextInstance(new errors.InternalError(
+                        'Unknown alias for instance ' + instance.uuid));
+                    return;
+                }
+
+                arg.sdcadm.sapi.updateInstance(instance.uuid, {
+                    action: 'update',
+                    params: {
+                        alias: vm.alias
+                    }
+                }, function sapiCb(sapiErr) {
+                    var updateErr;
+                    if (sapiErr) {
+                        updateErr = new errors.SDCClientError(sapiErr, 'sapi');
+                    }
+                    nextInstance(updateErr);
+                });
+            });
+        }
+    }, function pipeCb(pipeErr) {
+        if (pipeErr) {
+            cb(pipeErr);
+            return;
+        }
+        arg.sdcadm.sapi.listInstances({
+            // instance.service_uuid is mandatory in SAPI, no need to check for
+            // its existence here:
+            service_uuid: arg.instances[0].service_uuid
+        }, function listCb(listErr, updatedInstances) {
+            if (listErr) {
+                cb(new errors.SDCClientError(listErr, 'sapi'));
+                return;
+            }
+            cb(null, updatedInstances);
+        });
+    });
+}
+
+// --- exports
 
 module.exports = {
     sapiEnsureAgentServices: sapiEnsureAgentServices,
-    sapiAssertFullMode: sapiAssertFullMode
+    sapiAssertFullMode: sapiAssertFullMode,
+    sapiFixInstanceAlias: sapiFixInstanceAlias
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
-- 
2.21.0

