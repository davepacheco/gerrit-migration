commit 47cc015928db47c3d1fcf1e5cfae0b6cee38fd03 (refs/changes/23/1123/4)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-12-15T17:14:59-08:00 (2 years, 10 months ago)
    
    joyent/node-cueball#59 want Agent stop() method
    Reviewed by: Dave Pacheco <dap@joyent.com>
    Reviewed by: Cody Mello <cody.mello@joyent.com>

diff --git a/README.md b/README.md
index 5ac364a..7f4491b 100644
--- a/README.md
+++ b/README.md
@@ -84,6 +84,19 @@ Parameters
   - `pingInterval` -- optional Number, interval between health check pings
   - `errorOnEmpty` -- optional Boolean
 
+### HttpAgent#stop([cb])
+
+Stops the pools managed by this agent, calling `cb` (if given) once all have
+stopped.
+
+Once an Agent has been stopped, it can no longer accept any new requests, and
+will throw an Error if asked to do so. Calling `stop()` more than once is
+also an error and will throw.
+
+Parameters
+
+- `cb` -- optional Function (err)
+
 ## Pool
 
 ### `new mod_cueball.ConnectionPool(options)`
diff --git a/lib/agent.js b/lib/agent.js
index 65a8535..a8a581b 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -21,6 +21,7 @@ const mod_assert = require('assert-plus');
 const mod_http = require('http');
 const mod_https = require('https');
 const mod_utils = require('./utils');
+const mod_vasync = require('vasync');
 
 const Pool = mod_pool.ConnectionPool;
 
@@ -52,6 +53,7 @@ function CueBallAgent(options) {
 	this.pools = {};
 	this.resolvers = options.resolvers;
 	this.log = options.log;
+	this.cba_stopped = false;
 
 	mod_assert.number(options.spares, 'options.spares');
 	mod_assert.number(options.maximum, 'options.maximum');
@@ -90,6 +92,9 @@ if (/^v0\.[0-9]\./.test(process.version) ||
 
 CueBallAgent.prototype.addPool = function (host, options) {
 	var self = this;
+	if (this.cba_stopped) {
+		throw (new Error('Cannot add a pool to a stopped agent'));
+	}
 	mod_assert.string(host, 'hostname');
 	var poolOpts = {
 		defaultPort: this.defaultPort,
@@ -156,9 +161,45 @@ CueBallAgent.prototype.addPool = function (host, options) {
 		poolOpts.checkTimeout = this.cba_pingInterval || 30000;
 		poolOpts.checker = this.checkSocket.bind(this, host);
 	}
+	this.log.debug({ host: host }, 'CueBallAgent creating new pool');
 	this.pools[host] = new Pool(poolOpts);
 };
 
+CueBallAgent.prototype.stop = function (cb) {
+	var self = this;
+	if (this.cba_stopped) {
+		throw (new Error('Cannot stop a CueBallAgent that has ' +
+		    'already stopped'));
+	}
+	this.cba_stopped = true;
+	this.log.debug('CueBallAgent stopping all pools');
+	mod_vasync.forEachParallel({
+		inputs: Object.keys(this.pools),
+		func: stopPool
+	}, function (err) {
+		self.log.info('CueBallAgent has stopped all pools');
+		if (cb) {
+			setImmediate(function () {
+				cb(err);
+			});
+		}
+	});
+	function stopPool(host, pcb) {
+		var pool = self.pools[host];
+		delete (self.pools[host]);
+		if (pool.isInState('stopped')) {
+			pcb();
+		} else {
+			pool.on('stateChanged', function (st) {
+				if (st === 'stopped') {
+					pcb();
+				}
+			});
+			pool.stop();
+		}
+	}
+};
+
 /*
  * Sets up a duplex stream to be used for the given HTTP request.
  * Calls req.onSocket(sock) with said stream once it is ready.
@@ -168,6 +209,10 @@ CueBallAgent.prototype.addPool = function (host, options) {
  * believes the socket to be reuseable or not.
  */
 CueBallAgent.prototype.addRequest = function (req, optionsOrHost, port) {
+	if (this.cba_stopped) {
+		throw (new Error('CueBallAgent is stopped and cannot handle ' +
+		    'new requests'));
+	}
 	var options;
 	mod_assert.object(req, 'req');
 	if (typeof (optionsOrHost) === 'string') {
diff --git a/package.json b/package.json
index 61a1eb0..9ed38a0 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.1.9",
+  "version": "1.2.0",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
