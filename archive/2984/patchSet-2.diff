From e9d2d7fd9251c549a7515b35c1fb6312904703d4 Mon Sep 17 00:00:00 2001
From: Mike Zeller <mike.zeller@joyent.com>
Date: Sun, 12 Nov 2017 08:39:31 -0800
Subject: [PATCH] PUBAPI-1451 Want UpdateNetworkIP

---
 docs/index.md             | 75 ++++++++++++++++++++++++++++++
 lib/endpoints/networks.js | 96 ++++++++++++++++++++++++++++++++++++++-
 test/networks.test.js     | 86 +++++++++++++++++++++++++++++++++--
 3 files changed, 251 insertions(+), 6 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 74592f3..9f32823 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -8491,6 +8491,81 @@ ResourceNotFound | If `:login`, `:id`, or `:ip_address` does not exist
       "managed": false
     }
 
+## UpdateNetworkIP (PUT /:login/networks/:id/ips/:ip_address)
+
+Update a network's IP to toggle the `reserved` flag. If `reserved` is set to
+`true` the IP will not be given out automatically at provision time. You cannot
+update an IP on a public network. On private networks you can update an IP that
+is already in use by an instance owned by you, or an IP that is not yet in use
+as long as its within the network's subnet.
+
+### Inputs
+
+**Field**  | **Type** | **Description**
+---------- | -------- | ---------------
+reserved   | boolean  | Take the IP out of the provisioning pool
+
+### Returns
+
+An IP object:
+
+**Field**  | **Type**   | **Description**
+---------- | ---------- | ---------------
+ip         | String     | IP Address
+reserved   | Boolean    | Whether this IP is reserved or not
+managed    | Boolean    | True if the user cannot modify the IP via UpdateNetworkIP (example broadcast and gateway IPs)
+owner_uuid | UUID       | UUID of the owner that the instance is associated with (Optional)
+belongs_to_uuid | UUID  | UUID of the instance the IP is associated with (Optional)
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id`, or `:ip_address` does not exist
+InvalidArgument  | If `:id` is not a UUID, or it is a public network. If `:ip_address` is in use by another user
+MissingParameter | If the `reserved` argument isn't specefied
+
+### CLI Command
+
+    $ triton network ip update daeb93a2-532e-4bd4-8788-b6b30f10ac17 192.168.128.5 reserved=false
+
+#### Example Request
+
+    PUT  /my/networks/abc0a00b-e72a-497d-9ae5-51be025d0baf/ips/192.168.128.5 HTTP/1.1
+    authorization: Signature keyId="...
+    accept: application/json
+    accept-version: ~8
+    host: api.example.com
+
+    {
+      "reserved": false
+    }
+
+#### Example Response
+
+    HTTP/1.1 200 OK
+    Content-Type: application/json
+    Content-Length: 55
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    Access-Control-Allow-Methods: PUT, GET, HEAD
+    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
+    Connection: Keep-Alive
+    Content-MD5: DvheKXPZSZw5lav9REKHuw==
+    Date: Wed, 22 Nov 2017 18:53:02 GMT
+    Server: cloudapi/8.3.0
+    Api-Version: 8.0.0
+    Request-Id: a9715a00-6194-4053-9846-fcdf9c5476fb
+    Response-Time: 76
+
+    {
+      "ip": "192.168.128.5",
+      "reserved": false,
+      "managed": false
+    }
+
 # Nics
 
 CloudAPI provides a way to list, add and remove NICs attached to a instance.
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index 867498f..7313d0c 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -21,6 +21,7 @@ var resources = require('../resources');
 var InternalError = restify.InternalError;
 var InvalidArgumentError = restify.InvalidArgumentError;
 var ResourceNotFoundError = restify.ResourceNotFoundError;
+var MissingParameterError = restify.MissingParameterError;
 
 var FABRIC_VLAN_FIELDS = ['description', 'name', 'vlan_id'];
 var FABRIC_NETWORK_FIELDS = ['description', 'fabric', 'gateway',
@@ -384,6 +385,90 @@ function getNetworkIp(req, res, next) {
     });
 }
 
+/*
+ * Update a network ip under the following conditions:
+ * - The IP is not on a public network
+ * - The IP is not 'managed'
+ * - The IP is anywhere within the subnet (napi enforced)
+ * - The IP is not in use by another account on a shared
+ *   private network
+ */
+function updateNetworkIp(req, res, next) {
+    var napi = req.sdc.napi;
+    assert.ok(napi);
+
+    var adminUuid = req.config.ufds_admin_uuid;
+    assert.uuid(adminUuid, 'admin uuid');
+
+    var networkUuid = req.params.id;
+    var _ip = req.params.ip_address;
+    var userIp;
+
+    if (!req.params.reserved) {
+        return next(new MissingParameterError(
+            'reserved is a required argument'));
+    }
+    var reserved = req.params.reserved;
+
+    // validateNetworkForIps should have already vaidated this exists
+    var net = req.networks.find(function findNetwork(n) {
+        return n.uuid === networkUuid;
+    });
+    assert.ok(net);
+
+    // If it's a public network we don't allow ip reservations
+    if (!net.hasOwnProperty('owner_uuids')) {
+        return next(new InvalidArgumentError(
+            'cannot (un)reserve an ip on a public network'));
+    }
+
+    var pipeline = [
+        function _getIp(_, cb) {
+            napi.getIP(networkUuid, _ip, function getIP(err, ip) {
+                if (err) {
+                    return cb(err);
+                }
+
+                userIp = translateIp(ip, req.account.uuid, adminUuid);
+                cb();
+            });
+        },
+        function _updateIp(_, cb) {
+            if (userIp.managed === true) {
+                return cb(new InvalidArgumentError(
+                    'cannot (un)reserve a managed IP'));
+            }
+
+            if (userIp.hasOwnProperty('owner_uuid') &&
+                userIp.owner_uuid !== req.account.uuid) {
+                return cb(new InvalidArgumentError(
+                    'ip %s on network %s is in use by another user', _ip,
+                        networkUuid));
+            }
+
+            var opts = {reserved: reserved};
+            napi.updateIP(networkUuid, _ip, opts, function updateIp(err, ip) {
+                if (err) {
+                    return cb(err);
+                }
+
+                userIp = translateIp(ip, req.account.uuid, adminUuid);
+                cb();
+            });
+        }
+    ]
+
+    return vasync.pipeline({
+        funcs: pipeline
+    }, function (err, results) {
+        if (err) {
+            return next(translateErr(err));
+        }
+
+        res.send(userIp);
+        return next();
+    });
+}
 
 function listFabricVLANs(req, res, next) {
     assert.ok(req.account);
@@ -761,6 +846,8 @@ function mountNetworks(server, before, pre) {
         name: 'HeadNetwork'
     }, before, pre, getNetwork);
 
+    // --- Network IPs
+
     server.get({
         path: '/:account/networks/:id/ips',
         name: 'ListNetworkIPs'
@@ -771,14 +858,19 @@ function mountNetworks(server, before, pre) {
         name: 'HeadNetworkIPs'
     }, before, pre, validateNetworkForIps, listNetworkIps);
 
+    server.put({
+        path: '/:account/networks/:id/ips/:ip_address',
+        name: 'UpdateNetworkIP'
+    }, before, pre, validateNetworkForIps, updateNetworkIp);
+
     server.get({
         path: '/:account/networks/:id/ips/:ip_address',
-        name: 'GetNetworkIPs'
+        name: 'GetNetworkIP'
     }, before, pre, validateNetworkForIps, getNetworkIp);
 
     server.head({
         path: '/:account/networks/:id/ips/:ip_address',
-        name: 'HeadNetworkIPs'
+        name: 'HeadNetworkIP'
     }, before, pre, validateNetworkForIps, getNetworkIp);
 
     return server;
diff --git a/test/networks.test.js b/test/networks.test.js
index f244c73..e43b722 100644
--- a/test/networks.test.js
+++ b/test/networks.test.js
@@ -33,10 +33,13 @@ var POOL1_NAME = 'sdccloudapitest_networks_pool1';
 // Test variables
 var NO_SUCH_NETWORK_UUID = 'deaddead-c626-11e5-b674-334e7e514480';
 var RESERVED_IP = '10.99.92.25';
+var NETWORK3_MANAGED_IP = '10.99.92.1';
 var ZONE_IP1 = '10.99.90.52';
 var ZONE_IP2 = '10.99.90.53';
+var ZONE_IP3 = '10.99.92.27'; // used for private network test (different owner)
 var ZONE_UUID1 = 'c4311f24-de18-40b9-b57e-249f2aec7533';
 var ZONE_UUID2 = '5dd79db9-3d42-40a3-a600-7fa2984ff48c';
+var ZONE_UUID3 = 'd8fb0a51-4dc3-4338-8bec-de41b82a16bc';
 
 
 // --- Helpers
@@ -127,7 +130,7 @@ function createFixtures(t, cb) {
         },
         function mkTestNetwork3(_, next) {
             var params = {
-                owner_uuids: [ CLIENT.account.uuid ],
+                owner_uuids: [ CLIENT.account.uuid, OTHER.account.uuid ],
                 gateway: '10.99.92.1'
             };
             createTestNetwork(NETWORK3_NAME, 92, params, function (err, net) {
@@ -178,7 +181,19 @@ function createFixtures(t, cb) {
                     function (err, ip) {
                 t.ifError(err, 'createFixtures: zone ip ' + ZONE_IP2);
                 t.ok(ip, 'createFixtures: reserved ip');
-                fixtures.ip3 = ip;
+                next(err);
+            });
+        },
+        function mkTestZoneIP3(_, next) {
+            var params = {
+                owner_uuid: OTHER.account.uuid,
+                belongs_to_type: 'zone',
+                belongs_to_uuid: ZONE_UUID3
+            };
+            CLIENT.napi.updateIP(fixtures.network3.uuid, ZONE_IP3, params,
+                    function (err, ip) {
+                t.ifError(err, 'createFixtures: zone ip ' + ZONE_IP3);
+                t.ok(ip, 'createFixtures: reserved ip');
                 next(err);
             });
         },
@@ -403,11 +418,13 @@ test('networks', function (tt) {
         });
     });
 
+    // IP tests ------------
+
     /*
      *  On public networks we should only see provisioned ips owned
      *  by the specific user.
      */
-    tt.test('  get network ips (public)', function (t) {
+    tt.test('  list network ips (public)', function (t) {
         var out = [
             {
                 ip: ZONE_IP1,
@@ -434,7 +451,7 @@ test('networks', function (tt) {
      *  On private networks we should see provisioned/reserved ips
      *  as well as 'triton_protected' ips such as the broadcast/gateway
      */
-    tt.test('  get network ips (owner)', function (t) {
+    tt.test('  list network ips (owner)', function (t) {
         var out = [
             {
                 ip: '10.99.92.1',
@@ -446,6 +463,12 @@ test('networks', function (tt) {
                 managed: false,
                 reserved: true
             },
+            {
+                ip: ZONE_IP3,
+                managed: false,
+                reserved: false,
+                owner_uuid: OTHER.account.uuid
+            },
             {
                 ip: '10.99.92.255',
                 managed: true,
@@ -528,6 +551,61 @@ test('networks', function (tt) {
         });
     });
 
+    //  Update of IP on a public network returns InvalidArgument
+    tt.test('  update ip on public network', function (t) {
+        var path = format('/my/networks/%s/ips/%s', fixtures.network1.uuid,
+            ZONE_IP2);
+        CLIENT.put(path, {reserved: true}, function (err, req, res, body) {
+            common.checkInvalidArgument(t, err, req, res, body);
+            t.end();
+        });
+    });
+
+    //  Update of a managed IP returns InvalidArgument
+    tt.test('  update managed ip', function (t) {
+        var path = format('/my/networks/%s/ips/%s', fixtures.network3.uuid,
+            NETWORK3_MANAGED_IP);
+        CLIENT.put(path, {reserved: true}, function (err, req, res, body) {
+            common.checkInvalidArgument(t, err, req, res, body);
+            t.end();
+        });
+    });
+
+    tt.test('  update ip on private network', function (t) {
+        var ip = '10.99.92.26';
+        var out = {
+            ip: ip,
+            managed: false,
+            reserved: true
+        };
+        var path = format('/my/networks/%s/ips/%s', fixtures.network3.uuid,
+            ip);
+        CLIENT.put(path, {reserved: true}, function (err, req, res, body) {
+            t.ifError(err, 'PUT /my/networks/' + fixtures.network3.uuid +
+                '/ips/' + ip  + ' error');
+            t.equal(res.statusCode, 200,
+                'PUT /my/networks/:uuid/ips/:ip_address status');
+            common.checkHeaders(t, res.headers);
+            t.ok(body, 'PUT /my/networks/:uuid/ips/:ip_address body');
+            t.deepEqual(body, out, 'UpdateNetworkIP works on private network');
+            t.end();
+        });
+    });
+
+    /*
+     * Update of IP on private network in use by another user returns
+     * InvalidArgument
+     */
+    tt.test('  update ip on private network in use by another account',
+        function (t) {
+        var path = format('/my/networks/%s/ips/%s', fixtures.network3.uuid,
+            ZONE_IP3);
+        CLIENT.put(path, {reserved: true}, function (err, req, res, body) {
+            common.checkInvalidArgument(t, err, req, res, body);
+            t.end();
+        });
+    });
+
     tt.test('  teardown', function (t) {
         vasync.pipeline({ funcs: [
             function teardownFixtures(_, next) {
-- 
2.21.0

