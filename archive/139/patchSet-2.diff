commit b10f22fd1b782b4106930e53b1e16b83e3073996 (refs/changes/39/139/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-07-27T18:39:17+00:00 (3 years, 2 months ago)
    
    NAPI-285 Attempting to update "gateway_provisioned" should error out
    Reviewed by: Matt Smillie <matt.smillie@joyent.com>

diff --git a/lib/models/network.js b/lib/models/network.js
index a037464..9ffc907 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -106,6 +106,9 @@ var VALID_FIELDS = [
 ];
 
 
+var IMMUTABLE_FAB_PROP =
+    'Fabric network updates for this field are not supported';
+
 
 // --- Internal
 
@@ -1450,20 +1453,13 @@ function updateNetwork(opts, callback) {
 
     log.debug(params, 'updateNetwork: entry');
 
-    if (params.network.fabric) {
-        if (params.gateway) {
-            return callback(new errors.invalidParam('gateway',
-                'Fabric network updates for this field are not supported.'));
-        }
-        if (params.internet_nat) {
-            return callback(new errors.invalidParam('internet_nat',
-                'Fabric network updates for this field are not supported.'));
-        }
-    }
-
     validate.params({
         params: params,
         optional: {
+            // Immutable fabrics properties
+            gateway_provisioned: validate.bool,
+            internet_nat: validate.bool,
+
             // moray-only
             name: validate.string,
             description: validate.string,
@@ -1486,6 +1482,28 @@ function updateNetwork(opts, callback) {
             ip_use_strings: validate.bool
         },
         after: [
+            function checkImmutable(_, parsed, cb) {
+                if (params.network.fabric) {
+                    if (parsed.hasOwnProperty('gateway')) {
+                        cb(new errors.invalidParam('gateway',
+                            IMMUTABLE_FAB_PROP));
+                        return;
+                    }
+                    if (parsed.hasOwnProperty('gateway_provisioned')) {
+                        cb(new errors.invalidParam('gateway_provisioned',
+                            IMMUTABLE_FAB_PROP +
+                            ': delete the gateway NIC instead'));
+                        return;
+                    }
+                    if (parsed.hasOwnProperty('internet_nat')) {
+                        cb(new errors.invalidParam('internet_nat',
+                            IMMUTABLE_FAB_PROP));
+                        return;
+                    }
+                }
+
+                cb();
+            },
             validateProvisionRangeUpdate.bind(null, {
                 app: app,
                 fabric: opts.fabric,
@@ -1604,6 +1622,7 @@ function updateNetwork(opts, callback) {
     });
 }
 
+
 function validateListNetworks(params, callback) {
     validate.params({
         strict: true,
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index f4c1ac6..aa4909a 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -1200,6 +1200,43 @@ test('provision gateway', function (t) {
     });
 
 
+    t.test('updating gateway should be disallowed', function (t2) {
+        mod_net.update(t2, {
+            params: {
+                uuid: NETS[0].uuid,
+                gateway: NETS[0].gateway
+            },
+            expErr: mod_err.invalidParam('gateway',
+                'Fabric network updates for this field are not supported')
+        });
+    });
+
+
+    t.test('updating gateway_provisioned should be disallowed', function (t2) {
+        mod_net.update(t2, {
+            params: {
+                uuid: NETS[0].uuid,
+                gateway_provisioned: false
+            },
+            expErr: mod_err.invalidParam('gateway_provisioned',
+                'Fabric network updates for this field are not supported: ' +
+                'delete the gateway NIC instead')
+        });
+    });
+
+
+    t.test('updating internet_nat should be disallowed', function (t2) {
+        mod_net.update(t2, {
+            params: {
+                uuid: NETS[0].uuid,
+                internet_nat: false
+            },
+            expErr: mod_err.invalidParam('internet_nat',
+                'Fabric network updates for this field are not supported')
+        });
+    });
+
+
     // Now that we have a gateway provisioned, the nic should indicate that
     // the gateway is provisioned
     t.test('NETS[0]: nic has gateway_provisioned=true', function (t2) {
