From 519a6651c54681dad23076fd5aa4a06be75db6f3 Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Mon, 20 Aug 2018 18:07:48 -0700
Subject: [PATCH] TRITON-650 vm-agent should have a dummy backend

---
 bin/run-dummy-vm-agents.js           | 117 +++++++++++++++++++++++++++
 lib/event-source.js                  |   8 +-
 lib/vm-agent.js                      |  11 ++-
 lib/vm-watcher.js                    |   3 +
 lib/watchers/vmadm-events-watcher.js |   5 +-
 package.json                         |   2 +-
 6 files changed, 136 insertions(+), 10 deletions(-)
 create mode 100644 bin/run-dummy-vm-agents.js

diff --git a/bin/run-dummy-vm-agents.js b/bin/run-dummy-vm-agents.js
new file mode 100644
index 0000000..e692274
--- /dev/null
+++ b/bin/run-dummy-vm-agents.js
@@ -0,0 +1,117 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+'use strict';
+
+const child_process = require('child_process');
+const fs = require('fs');
+const path = require('path');
+const util = require('util');
+
+var assert = require('assert-plus');
+const DummyVmadm = require('vmadm/lib/index.dummy');
+const bunyan = require('bunyan');
+const vasync = require('vasync');
+
+const VmAgent = require('../lib');
+
+
+function mdataGetSync(key) {
+    assert.string(key);
+
+    return child_process
+        .execSync(`/usr/sbin/mdata-get ${key}`, {encoding: 'utf8'})
+        .trim();
+}
+
+
+function mockCloudRoot() {
+    try {
+        return mdataGetSync('mockcloudRoot');
+    } catch (err) {
+        // The old default for backward compatibility.
+        const oldDefault = '/opt/custom/virtual';
+        console.warn('warning: dummy backend could not get '
+                     + '"mockcloudRoot" dir from mdata, using default %s: %s',
+                     oldDefault, err);
+        return oldDefault;
+    }
+}
+const SERVER_ROOT = path.join(mockCloudRoot(), 'servers');
+
+
+function runAgent(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.serverUuid, 'opts.serverUuid');
+    assert.string(opts.sdcDcName, 'opts.sdcDcName');
+    assert.string(opts.dnsDomain, 'opts.dnsDomain');
+
+    const log = bunyan.createLogger({
+        level: (process.env.LOG_LEVEL || 'debug'),
+        name: 'vm-agent-' + opts.serverUuid
+    });
+
+    // these values are based on a sample from a running coal instance
+    const config = {
+        cueballHttpAgent: {
+            initialDomains: [
+                `vmapi.${opts.sdcDcName}.${opts.dnsDomain}`
+            ],
+            maximum: 100,
+            recovery: {
+                default: {
+                    delay: 250,
+                    maxDelay: 1000,
+                    maxTimeout: 8000,
+                    retries: 5,
+                    timeout: 2000
+                }
+            },
+            resolvers: [`binder.${opts.sdcDcName}.${opts.dnsDomain}`],
+            spares: 4
+        },
+
+        vmapi_url: `http://vmapi.${opts.sdcDcName}.${opts.dnsDomain}`,
+        no_rabbit: true,
+        server_uuid: opts.serverUuid
+    };
+
+    console.log(`config skeletop for agent ${opts.serverUuid}`,
+               util.inspect(config, {depth: null}));
+    config.vmadm = new DummyVmadm({serverUuid: opts.serverUuid,
+                                   serverRoot: SERVER_ROOT, log: log});
+    config.log = log;
+
+    const vmagent = new VmAgent(config);
+    vmagent.start(cb);
+}
+
+
+function main() {
+    const dirs = fs.readdirSync(SERVER_ROOT);
+    console.log('server uuids:', dirs);
+
+    const sdcDcName = mdataGetSync('sdc:datacenter_name');
+    const dnsDomain = mdataGetSync('dnsDomain');
+    console.log(`sdc:datacenter_name=${sdcDcName} dnsDomain=${dnsDomain}`);
+
+    vasync.forEachPipeline({
+        func: runAgent,
+        inputs: dirs.map(function m(dir) {
+            return {serverUuid: dir, sdcDcName: sdcDcName,
+                    dnsDomain: dnsDomain};
+        })
+    }, function _pipelineComplete(_pipelineErr) {
+        assert.ifError(_pipelineErr);
+        console.log('started all servers');
+    });
+}
+
+
+main();
diff --git a/lib/event-source.js b/lib/event-source.js
index 87ca331..081f6ff 100644
--- a/lib/event-source.js
+++ b/lib/event-source.js
@@ -5,17 +5,17 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
-var vmadm = require('vmadm');
 
 function determineEventSource(opts, cb) {
     var vmadmEventsOpts;
 
     assert.object(opts, 'opts');
-    assert(opts.log, 'opts.log');
+    assert.ok(opts.vmadm, 'opts.vmadm');
+    assert.object(opts.log, 'opts.log');
     assert.func(cb, 'cb');
 
     // Figure out the best event source for the system.  Basically, this checks
@@ -25,7 +25,7 @@ function determineEventSource(opts, cb) {
         name: 'VM Agent determineEventSource'
     };
 
-    vmadm.events(vmadmEventsOpts,
+    opts.vmadm.events(vmadmEventsOpts,
         function vmadmEventsHandler() {
             /*
              * We don't care about any events seen here - we are only
diff --git a/lib/vm-agent.js b/lib/vm-agent.js
index d7e46f8..afc413d 100644
--- a/lib/vm-agent.js
+++ b/lib/vm-agent.js
@@ -153,6 +153,10 @@ function VmAgent(options) {
     assert.string(options.vmapi_url, 'options.vmapi_url');
     assert.optionalObject(options.cueballHttpAgent, 'options.cueballHttpAgent');
 
+    if (options.vmadm) {
+        self.vmadm = options.vmadm ? options.vmadm : vmadm;
+    }
+
     // Load the list of fields that VmWatcher will be watching, which we'll
     // use when comparing objects. Since VMAPI and vmadm have different default
     // fields, this is the common list. We start with just those fields that
@@ -364,7 +368,7 @@ VmAgent.prototype.updateVmapiVm = function updateVmapiVm(vmUuid, callback) {
                 return;
             }
 
-            vmadm.load(opts, function _onVmLoad(err, vmobj) {
+            self.vmadm.load(opts, function _onVmLoad(err, vmobj) {
                 var doneLoad = (new Date()).getTime();
                 var loadErr;
 
@@ -555,7 +559,7 @@ VmAgent.prototype.setupWatcher = function setupWatcher(callback) {
         self.queueVm(vmUuid);
     }
 
-    determineEventSource({log: self.log},
+    determineEventSource({log: self.log, vmadm: self.vmadm},
         function determinedEventSource(err, eventSource) {
             if (err) {
                 callback(err);
@@ -569,6 +573,7 @@ VmAgent.prototype.setupWatcher = function setupWatcher(callback) {
             self.watcher = new VmWatcher({
                 log: self.log,
                 eventSource: eventSource,
+                vmadm: self.vmadm,
                 periodicInterval: self.periodicInterval // may be undefined
             });
 
@@ -695,7 +700,7 @@ VmAgent.prototype.initialUpdate = function initialUpdate(callback) {
             var startLookup = (new Date()).getTime();
 
             // NOTE: vmadm.lookup handles filtering out the do_not_inventory VMs
-            vmadm.lookup(ALL_VMS, opts, function _onLookup(err, vmobjs) {
+            self.vmadm.lookup(ALL_VMS, opts, function _onLookup(err, vmobjs) {
                 var doneLookup = (new Date()).getTime();
                 var vmIdx;
 
diff --git a/lib/vm-watcher.js b/lib/vm-watcher.js
index e432911..de9cc04 100644
--- a/lib/vm-watcher.js
+++ b/lib/vm-watcher.js
@@ -124,8 +124,11 @@ function VmWatcher(opts) {
     self.knownVms = {};
 
     switch (self.eventSource) {
+
         case 'vmadm-events':
+            assert.ok(opts.vmadm, 'opts.vmadm');
             self.vmadmEventsWatcher = new VmadmEventsWatcher({
+                vmadm: opts.vmadm,
                 log: opts.log,
                 updateVm: self.newUpdateHandler('vmadm')
             });
diff --git a/lib/watchers/vmadm-events-watcher.js b/lib/watchers/vmadm-events-watcher.js
index 0ed8173..4875a8b 100644
--- a/lib/watchers/vmadm-events-watcher.js
+++ b/lib/watchers/vmadm-events-watcher.js
@@ -10,7 +10,6 @@
 
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
-var vmadm = require('vmadm');
 
 // Time to wait before restarting `vmadm.events` if it has an error.
 var RESTART_TIMEOUT = 1000;
@@ -23,7 +22,9 @@ function VmadmEventsWatcher(opts) {
     assert.object(opts, 'opts');
     assert.object(opts.log, 'opts.log');
     assert.func(opts.updateVm, 'opts.updateVm');
+    assert.ok(opts.vmadm, 'opts.vmadm');
 
+    self.vmadm = opts.vmadm;
     self.log = opts.log.child({watcher: 'vmadm-events-watcher'});
     self.updateVm = opts.updateVm;
     self.vms = null;
@@ -98,7 +99,7 @@ VmadmEventsWatcher.prototype.start = function start(_cb) {
         cb(null, obj.ev);
     }
 
-    watcher = vmadm.events(opts, handler, ready);
+    watcher = self.vmadm.events(opts, handler, ready);
 
     watcher.once('error', function vmadmEventsOnceError(err) {
         self.log.error(err, 'vmadm.events error - restarting watcher');
diff --git a/package.json b/package.json
index e343e08..7a58e9c 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
         "restify-clients": "1.6.0",
         "tape": "4.2.2",
         "vasync": "1.6.3",
-        "vmadm": "1.1.0"
+        "vmadm": "1.2.0"
     },
     "devDependencies": {
         "eslint": "4.19.1",
-- 
2.21.0

