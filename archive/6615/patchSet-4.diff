From 78d82f0a7fd8118ad1d23a88bbf181612ed8464d Mon Sep 17 00:00:00 2001
From: bowrocker <jon.anderson@joyent.com>
Date: Wed, 17 Jul 2019 20:44:18 +0000
Subject: [PATCH] MANTA-4412 Add rust-cueball support to rust-moray

---
 Cargo.toml               |  15 ++++-
 examples/createbucket.rs |  14 ++++-
 examples/findobjects.rs  |  24 +++++---
 examples/listbuckets.rs  |  42 ++++++++++----
 examples/putobject.rs    |  17 +++++-
 examples/sql.rs          |  24 +++++---
 src/buckets.rs           |   2 +-
 src/client.rs            | 120 ++++++++++++++++++++++++++-------------
 src/lib.rs               |   3 -
 src/meta.rs              |   2 +-
 src/objects.rs           |   2 +-
 11 files changed, 187 insertions(+), 78 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 1422986..85ee613 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,20 +1,31 @@
 [package]
 name = "moray"
-version = "0.1.0"
-authors = ["Rui Loura <rui@joyent.com>"]
+version = "0.2.0"
+authors = ["Rui Loura <rui@joyent.com>",
+           "Jon Anderson <jon.andereson@joyent.com"]
 edition = "2018"
 
 [dependencies]
+cueball = { git = "https://github.com/joyent/rust-cueball" }
+cueball-static-resolver = { git = "https://github.com/joyent/rust-cueball-static-resolver" }
+
+cueball-tcp-stream-connection = { git = "https://github.com/joyent/rust-cueball-tcp-stream-connection" }
+
 # This branch is pinned util the following are all resolved:
 # - MANTA-4287
 # - MANTA-4288
 # - joyent/rust-fast/issues/12
 rust_fast = { git = "https://github.com/joyent/rust-fast", branch="response_handler_errors" }
 libmanta = { git = "https://github.com/joyent/rust-libmanta" }
+
 serde = { version = "1.0.89", features = ["derive"] }
 serde_json = "1.0.39"
+slog = { version = "2.4.1", features = [ "max_level_trace" ] }
+slog-bunyan = { git = "https://github.com/kellymclaughlin/bunyan", branch = "build-on-smartos" }
+
 uuid = {version = "0.7.4", features = ["v4"] }
 
 [dev-dependencies]
+slog-term = "2.4.0"
 rand = "0.6.4"
 quickcheck = "0.8.0"
diff --git a/examples/createbucket.rs b/examples/createbucket.rs
index 43dfdc1..d12eae5 100644
--- a/examples/createbucket.rs
+++ b/examples/createbucket.rs
@@ -8,13 +8,23 @@ extern crate serde_json;
 use moray::buckets;
 use moray::client::MorayClient;
 use std::io::Error;
+use std::sync::Mutex;
+
+use slog::{o, Logger, Drain};
 
 fn main() -> Result<(), Error> {
-    let ip_arr: [u8; 4] = [10, 77, 77, 9];
+    let ip_arr: [u8; 4] = [10, 77, 77, 103];
     let port: u16 = 2021;
     let opts = buckets::MethodOptions::default();
 
-    let mut mclient = MorayClient::from_parts(ip_arr, port)?;
+
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
+    let mut mclient = MorayClient::from_parts(ip_arr, port, log.clone())?;
     let bucket_config = json!({
         "index": {
             "aNumber": {
diff --git a/examples/findobjects.rs b/examples/findobjects.rs
index 9c1ef80..da3e238 100644
--- a/examples/findobjects.rs
+++ b/examples/findobjects.rs
@@ -5,10 +5,14 @@
 use libmanta::moray as manta;
 use moray::client::MorayClient;
 use moray::objects;
+
+
 use std::io::{Error, ErrorKind};
+use slog::{o, Logger, Drain};
+use std::sync::Mutex;
 
 fn main() -> Result<(), Error> {
-    let ip_arr: [u8; 4] = [10, 77, 77, 9];
+    let ip_arr: [u8; 4] = [10, 77, 77, 103];
     let port: u16 = 2021;
 
     let mut key: String = "".to_string();
@@ -16,7 +20,12 @@ fn main() -> Result<(), Error> {
     let mut oid: String = String::new();
     let mut opts = objects::MethodOptions::default();
 
-    let mut mclient = MorayClient::from_parts(ip_arr, port).unwrap();
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+    let mut mclient = MorayClient::from_parts(ip_arr, port, log.clone())?;
 
     opts.set_limit(10);
     mclient.find_objects("manta", "(type=object)", &opts, |o| {
@@ -72,10 +81,11 @@ fn main() -> Result<(), Error> {
         count += 1;
         assert_eq!(count, 1, "should only be one result");
         if o.bucket != "manta" {
-            return Err(Error::new(
+            let e = Error::new(
                 ErrorKind::Other,
                 format!("Unknown bucket type {}", &o.bucket),
-            ));
+            );
+            return Err(e)
         }
         let manta_obj: manta::ObjectType =
             serde_json::from_value(o.value.clone()).unwrap();
@@ -95,10 +105,8 @@ fn main() -> Result<(), Error> {
     mclient.find_objects("manta", "(type=directory)", &opts, |o| {
         assert_eq!(count, 1, "should only be one result");
         if o.bucket != "manta" {
-            return Err(Error::new(
-                ErrorKind::Other,
-                format!("Unknown bucket type {}", &o.bucket),
-            ));
+            return Err(Error::new(ErrorKind::Other,
+                format!("Unknown bucket type {}", &o.bucket)));
         }
         let manta_obj: manta::ObjectType =
             serde_json::from_value(o.value.clone()).unwrap();
diff --git a/examples/listbuckets.rs b/examples/listbuckets.rs
index 51279c5..8f29c3f 100644
--- a/examples/listbuckets.rs
+++ b/examples/listbuckets.rs
@@ -1,19 +1,30 @@
 /*
  * Copyright 2019 Joyent, Inc.
  */
-
 use moray::buckets;
 use moray::client::MorayClient;
 
+
 use std::io::Error;
 use std::net::SocketAddr;
 use std::str::FromStr;
+use slog::{o, Logger, Drain};
+use std::sync::Mutex;
+
 
 fn client_fromstr(
     addr: &str,
     opts: buckets::MethodOptions,
 ) -> Result<(), Error> {
-    let mut mclient = MorayClient::from_str(addr).unwrap();
+
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
+    let mut mclient = MorayClient::from_str(addr, log).unwrap();
+
     mclient.list_buckets(opts, |b| {
         dbg!(&b);
         Ok(())
@@ -23,8 +34,9 @@ fn client_fromstr(
 fn client_sockaddr(
     sockaddr: SocketAddr,
     opts: buckets::MethodOptions,
+    log: Logger,
 ) -> Result<(), Error> {
-    let mut mclient = MorayClient::new(sockaddr).unwrap();
+    let mut mclient = MorayClient::new(sockaddr, log).unwrap();
     mclient.list_buckets(opts, |b| {
         dbg!(&b);
         Ok(())
@@ -35,8 +47,9 @@ fn client_fromparts(
     ip: [u8; 4],
     port: u16,
     opts: buckets::MethodOptions,
+    log: Logger,
 ) -> Result<(), Error> {
-    let mut mclient = MorayClient::from_parts(ip, port).unwrap();
+    let mut mclient = MorayClient::from_parts(ip, port, log).unwrap();
     mclient.list_buckets(opts, |b| {
         dbg!(&b);
         Ok(())
@@ -46,8 +59,9 @@ fn client_fromparts(
 fn client_reconnect(
     addr: SocketAddr,
     opts: buckets::MethodOptions,
+    log: Logger,
 ) -> Result<(), Error> {
-    let mut mclient = MorayClient::new(addr).unwrap();
+    let mut mclient = MorayClient::new(addr, log).unwrap();
     let mut count: u64 = 0;
     mclient.list_buckets(opts.clone(), |_| {
         count += 1;
@@ -57,8 +71,6 @@ fn client_reconnect(
     println!("Found {} buckets before reconnect", count);
     println!("Reconnecting");
 
-    mclient = mclient.reconnect()?;
-
     let mut after_count = 0;
     match mclient.list_buckets(opts.clone(), |_| {
         after_count += 1;
@@ -74,7 +86,15 @@ fn client_reconnect(
 }
 
 fn main() -> Result<(), Error> {
-    let ip_arr: [u8; 4] = [10, 77, 77, 9];
+
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
+
+    let ip_arr: [u8; 4] = [10, 77, 77, 103];
     let port: u16 = 2021;
 
     let i: Vec<String> = ip_arr.iter().map(|o| o.to_string()).collect();
@@ -87,13 +107,13 @@ fn main() -> Result<(), Error> {
 
     println!("MorayClient SocketAddr");
     let sockaddr = SocketAddr::from_str(addr.as_str()).unwrap();
-    client_sockaddr(sockaddr.clone(), opts.clone())?;
+    client_sockaddr(sockaddr.clone(), opts.clone(), log.clone())?;
 
     println!("MorayClient from_parts");
-    client_fromparts(ip_arr, port, opts.clone())?;
+    client_fromparts(ip_arr, port, opts.clone(), log.clone())?;
 
     println!("MorayClient reconnect");
-    client_reconnect(sockaddr, opts)?;
+    client_reconnect(sockaddr, opts, log.clone())?;
     println!("MorayClient reconnect success");
     Ok(())
 }
diff --git a/examples/putobject.rs b/examples/putobject.rs
index 457b4b0..cf601d6 100644
--- a/examples/putobject.rs
+++ b/examples/putobject.rs
@@ -4,10 +4,15 @@
 
 #[macro_use]
 extern crate serde_json;
+
 use moray::buckets;
 use moray::client::MorayClient;
 use moray::objects::{self, Etag};
 use std::io::{Error, ErrorKind};
+use slog::{o, Logger, Drain};
+use std::sync::Mutex;
+
+
 
 fn main() -> Result<(), Error> {
     let ip_arr: [u8; 4] = [10, 77, 77, 9];
@@ -18,7 +23,14 @@ fn main() -> Result<(), Error> {
     let bucket_opts = buckets::MethodOptions::default();
     let mut new_etag = String::from("");
 
-    let mut mclient = MorayClient::from_parts(ip_arr, port)?;
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
+
+    let mut mclient = MorayClient::from_parts(ip_arr, port, log.clone())?;
 
     println!("===confirming bucket exists===");
     match mclient.get_bucket(bucket_name, bucket_opts, |b| {
@@ -31,7 +43,8 @@ fn main() -> Result<(), Error> {
                  Run the createbucket example to do so.",
                 bucket_name
             );
-            return Err(Error::new(ErrorKind::Other, e));
+            let e = Error::new(ErrorKind::Other, e);
+            return Err(e)
         }
         Ok(()) => (),
     }
diff --git a/examples/sql.rs b/examples/sql.rs
index 10c332c..fb01dcc 100644
--- a/examples/sql.rs
+++ b/examples/sql.rs
@@ -1,18 +1,21 @@
 /*
  * Copyright 2019 Joyent, Inc.
  */
-
 use moray::client::MorayClient;
 use serde_json::{Map, Value};
 use std::io::Error;
+use slog::{o, Logger, Drain};
+use std::sync::Mutex;
+
 
 fn query_handler(resp: &Value) -> Result<(), Error> {
     dbg!(&resp);
     Ok(())
 }
 
-fn query_client_string_opts(ip: [u8; 4], port: u16) -> Result<(), Error> {
-    let mut mclient = MorayClient::from_parts(ip, port).unwrap();
+fn query_client_string_opts(ip: [u8; 4], port: u16, log: Logger) -> Result<(), Error> {
+
+    let mut mclient = MorayClient::from_parts(ip, port, log)?;
 
     // The sql interface does not take 'limit' in opts
     let query = "SELECT * FROM manta limit 10";
@@ -20,8 +23,9 @@ fn query_client_string_opts(ip: [u8; 4], port: u16) -> Result<(), Error> {
     mclient.sql(query, vec![], r#"{}"#, query_handler)
 }
 
-fn query_client_map_opts(ip: [u8; 4], port: u16) -> Result<(), Error> {
-    let mut mclient = MorayClient::from_parts(ip, port).unwrap();
+fn query_client_map_opts(ip: [u8; 4], port: u16, log: Logger) -> Result<(), Error> {
+
+    let mut mclient = MorayClient::from_parts(ip, port, log)?;
 
     // The sql interface does not take 'limit' in opts
     let query = "SELECT * FROM manta limit 10";
@@ -31,11 +35,17 @@ fn query_client_map_opts(ip: [u8; 4], port: u16) -> Result<(), Error> {
 }
 
 fn main() -> Result<(), Error> {
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
     let ip_arr: [u8; 4] = [10, 77, 77, 9];
     let port: u16 = 2021;
 
     println!("Testing SQL method");
-    query_client_string_opts(ip_arr, port)?;
-    query_client_map_opts(ip_arr, port)?;
+    query_client_string_opts(ip_arr, port, log.clone())?;
+    query_client_map_opts(ip_arr, port, log.clone())?;
     Ok(())
 }
diff --git a/src/buckets.rs b/src/buckets.rs
index 1b7a927..e4a4618 100644
--- a/src/buckets.rs
+++ b/src/buckets.rs
@@ -4,7 +4,7 @@
 
 use rust_fast::client as fast_client;
 use serde::{Deserialize, Serialize};
-use serde_json::{self, Value};
+use serde_json::{self, Value, json};
 use std::io::{Error, ErrorKind};
 use std::net::TcpStream;
 use uuid::Uuid;
diff --git a/src/client.rs b/src/client.rs
index d2a2d17..728c23a 100644
--- a/src/client.rs
+++ b/src/client.rs
@@ -2,48 +2,73 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-/* TODO: rust-cueball */
+use cueball::backend::{Backend};
+use cueball::connection_pool::types::ConnectionPoolOptions;
+use cueball::connection_pool::ConnectionPool;
+use cueball_static_resolver::StaticIpResolver;
+use cueball_tcp_stream_connection::TcpStreamWrapper;
+
+use std::ops::{DerefMut};
+use slog::Logger;
+
+use std::str::FromStr;
+
 use serde_json::{self, Value};
 use std::io::Error;
-use std::net::{IpAddr, SocketAddr, TcpStream};
-use std::str::FromStr;
+
+use std::net::{IpAddr, SocketAddr};
 
 use super::buckets;
 use super::meta;
 use super::objects;
 
-#[derive(Debug)]
-pub struct MorayClient {
-    stream: TcpStream,
-    reconnect: bool,
+
+pub struct MorayClient
+{
+    connection_pool:
+        ConnectionPool<TcpStreamWrapper, StaticIpResolver, fn(&Backend)
+            -> TcpStreamWrapper>
 }
 
 ///
 /// MorayClient
 ///
 impl MorayClient {
-    // TODO: Allow for setting timeouts
-    pub fn new<S: Into<SocketAddr>>(address: S) -> Result<MorayClient, Error> {
-        match TcpStream::connect(address.into()) {
-            Ok(st) => Ok(MorayClient {
-                stream: st,
-                reconnect: true,
-            }),
-            Err(e) => Err(e),
-        }
+
+    pub fn new(
+            address: SocketAddr,
+            log :Logger) -> Result<MorayClient, Error> {
+
+        let primary_backend = (address.ip(), address.port());
+        let resolver = StaticIpResolver::new(vec![primary_backend]);
+
+        let pool_opts = ConnectionPoolOptions {
+            maximum: 5,
+            claim_timeout: Some(5000),
+            log: log,
+            rebalancer_action_delay: None,
+        };
+
+        let pool =
+            ConnectionPool::<TcpStreamWrapper, StaticIpResolver, fn(&Backend)
+                -> TcpStreamWrapper>::new(
+                    pool_opts,
+                    resolver,
+                    TcpStreamWrapper::new,
+        );
+
+
+        Ok(MorayClient {
+            connection_pool: pool,
+        })
     }
 
     pub fn from_parts<I: Into<IpAddr>>(
         ip: I,
         port: u16,
+        log: Logger,
     ) -> Result<MorayClient, Error> {
-        Self::new(SocketAddr::new(ip.into(), port))
-    }
-
-    pub fn reconnect(self) -> Result<MorayClient, Error> {
-        let sock = self.stream.peer_addr()?;
-        drop(self);
-        Self::new(sock)
+        Self::new(SocketAddr::new(ip.into(), port), log)
     }
 
     pub fn list_buckets<F>(
@@ -54,14 +79,15 @@ impl MorayClient {
     where
         F: FnMut(&buckets::Bucket) -> Result<(), Error>,
     {
+        let mut conn = self.connection_pool.claim().unwrap();
+
         buckets::get_list_buckets(
-            &mut self.stream,
+            &mut (*conn).deref_mut(),
             "",
             opts,
             buckets::Methods::List,
             bucket_handler,
-        )?;
-        Ok(())
+        )
     }
 
     pub fn get_bucket<F>(
@@ -73,14 +99,15 @@ impl MorayClient {
     where
         F: FnMut(&buckets::Bucket) -> Result<(), Error>,
     {
+        let mut conn = self.connection_pool.claim().unwrap();
+
         buckets::get_list_buckets(
-            &mut self.stream,
+            &mut (*conn).deref_mut(),
             name,
             opts,
             buckets::Methods::Get,
             bucket_handler,
-        )?;
-        Ok(())
+        )
     }
 
     pub fn get_object<F>(
@@ -93,8 +120,10 @@ impl MorayClient {
     where
         F: FnMut(&objects::MorayObject) -> Result<(), Error>,
     {
+        let mut conn = self.connection_pool.claim().unwrap();
+
         objects::get_find_objects(
-            &mut self.stream,
+            &mut (*conn).deref_mut(),
             bucket,
             key,
             opts,
@@ -113,8 +142,9 @@ impl MorayClient {
     where
         F: FnMut(&objects::MorayObject) -> Result<(), Error>,
     {
+        let mut conn = self.connection_pool.claim().unwrap();
         objects::get_find_objects(
-            &mut self.stream,
+            &mut (*conn).deref_mut(),
             bucket,
             filter,
             opts,
@@ -134,8 +164,9 @@ impl MorayClient {
     where
         F: FnMut(&str) -> Result<(), Error>,
     {
+        let mut conn = self.connection_pool.claim().unwrap();
         objects::put_object(
-            &mut self.stream,
+            &mut (*conn).deref_mut(),
             bucket,
             key,
             value,
@@ -150,7 +181,11 @@ impl MorayClient {
         config: Value,
         opts: buckets::MethodOptions,
     ) -> Result<(), Error> {
-        buckets::create_bucket(&mut self.stream, name, config, opts)
+        buckets::create_bucket(
+            &mut self.connection_pool.claim().unwrap().deref_mut(),
+            name,
+            config,
+            opts)
     }
 
     pub fn sql<F, V>(
@@ -164,15 +199,20 @@ impl MorayClient {
         F: FnMut(&Value) -> Result<(), Error>,
         V: Into<Value>,
     {
-        meta::sql(&mut self.stream, stmt, vals, opts, query_handler)
+        meta::sql(&mut self.connection_pool.claim().unwrap().deref_mut(),
+        stmt,
+        vals,
+        opts,
+        query_handler)
     }
-}
 
-impl FromStr for MorayClient {
-    type Err = Error;
-    fn from_str(s: &str) -> Result<MorayClient, Error> {
-        let addr = SocketAddr::from_str(s).expect("Error parsing address");
-        Self::new(addr)
+    pub fn from_str(
+            s: &str,
+            log: Logger
+        ) -> Result<MorayClient, Error> {
+
+            let addr = SocketAddr::from_str(s).expect("Error parsing address");
+            Self::new(addr, log.clone())
     }
 }
 
diff --git a/src/lib.rs b/src/lib.rs
index fd06e0c..fea2012 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -2,9 +2,6 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-#[macro_use]
-extern crate serde_json;
-
 pub mod buckets;
 pub mod client;
 pub mod meta;
diff --git a/src/meta.rs b/src/meta.rs
index a201edd..c4fec7d 100644
--- a/src/meta.rs
+++ b/src/meta.rs
@@ -3,7 +3,7 @@
  */
 
 use rust_fast::client as fast_client;
-use serde_json::{self, Value};
+use serde_json::{self, Value, json};
 use std::io::Error;
 use std::net::TcpStream;
 
diff --git a/src/objects.rs b/src/objects.rs
index 48b501b..03aa1e7 100644
--- a/src/objects.rs
+++ b/src/objects.rs
@@ -4,7 +4,7 @@
 
 use rust_fast::client as fast_client;
 use serde::{Deserialize, Deserializer, Serialize};
-use serde_json::Value;
+use serde_json::{Value, json};
 use std::io::{Error, ErrorKind};
 use std::net::TcpStream;
 use uuid::Uuid;
-- 
2.21.0

