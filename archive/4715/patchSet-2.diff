From 4ec123af09254fa281b9666624415b55f06236f5 Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Thu, 16 Aug 2018 12:50:49 -0400
Subject: [PATCH] TRITON-699 Remove JSStyle and Javascriptlint from net-agent
 TRITON-700 vm-agent can be less special and use the joyent eslint plugin

---
 .eslintrc                              | 150 +++++++------------------
 .gitmodules                            |   6 -
 Makefile                               |  32 +-----
 deps/javascriptlint                    |   1 -
 deps/jsstyle                           |   1 -
 lib/vm-agent.js                        |  28 ++---
 lib/vm-watcher.js                      |   8 +-
 lib/watchers/fs-watcher.js             |  18 +--
 lib/watchers/periodic-watcher.js       |  14 +--
 package.json                           |   4 +
 tests/common.js                        |   8 +-
 tests/mocks.js                         |   8 +-
 tests/test.VmAgentMockVmadm.js         |   2 +-
 tests/test.VmAgentRealVmadm.js         |  88 +++++++--------
 tests/test.VmapiFields.js              |   6 +-
 tests/test.ZoneeventWatcherOverflow.js |   2 +-
 tools/jsl.node.conf                    | 139 -----------------------
 tools/jsl.web.conf                     | 137 ----------------------
 tools/mk/Makefile.deps                 |  37 +++++-
 tools/mk/Makefile.targ                 |  48 ++++++--
 20 files changed, 209 insertions(+), 528 deletions(-)
 delete mode 160000 deps/javascriptlint
 delete mode 160000 deps/jsstyle
 delete mode 100644 tools/jsl.node.conf
 delete mode 100644 tools/jsl.web.conf

diff --git a/.eslintrc b/.eslintrc
index c80f0bb..65c08ff 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -1,119 +1,45 @@
 {
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 6,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
     "env": {
         "node": true
     },
-    "extends": [
-        "eslint:recommended"
-    ],
     "rules": {
-        "array-bracket-spacing": ["error", "never"],
-        "block-scoped-var": "error",
-        "brace-style": "error",
-        "callback-return": ["error", ["callback", "cb", "next"]],
-        "comma-dangle": ["error", "never"],
-        "comma-spacing": ["error", {"before": false, "after": true}],
-        "comma-style": ["error", "last"],
-        "complexity": ["warn", 6],
-        "computed-property-spacing": ["error", "never"],
-        "consistent-return": "error",
-        "consistent-this": ["error", "self"],
-        "curly": ["error", "all"],
-        "default-case": "error",
-        "dot-location": ["error", "property"],
-        "dot-notation": ["error", {"allowKeywords": true, "allowPattern": ""}],
-        "eqeqeq": ["error", "smart"],
-        "eol-last": "error",
-        "func-names": "error",
-        "func-style": ["error", "declaration"],
-        "global-require": "error",
-        "guard-for-in": "error",
-        "handle-callback-err": ["error", "^.*(e|E)rr" ],
-        "indent": ["error", 4, {"SwitchCase": 1}],
-        "key-spacing": ["error", {"beforeColon": false, "afterColon": true}],
-        "linebreak-style": ["error", "unix"],
-        "lines-around-comment": ["error", { "beforeBlockComment": true, "allowBlockStart": true }],
-        "max-depth": ["error", 5],
-        "max-nested-callbacks": ["error", 5],
-        "max-len": ["error", 80, 8, {"ignoreUrls": true}],
-        "new-parens": "error",
-        "newline-after-var": ["error", "always"],
-        "no-array-constructor": "error",
-        "no-case-declarations": "error",
-        "no-cond-assign": ["error", "always"],
-        "no-console": "warn",
-        "no-constant-condition": "error",
-        "no-dupe-args": "error",
-        "no-dupe-keys": "error",
-        "no-duplicate-case": "error",
-        "no-else-return": "error",
-        "no-empty": "error",
-        "no-empty-pattern": "error",
-        "no-eq-null": "error",
-        "no-eval": "error",
-        "no-extend-native":"error",
-        "no-extra-bind": "error",
-        "no-extra-semi": "error",
-        "no-floating-decimal": "error",
-        "no-implicit-coercion": "error",
-        "no-inner-declarations": "error",
-        "no-irregular-whitespace": "error",
-        "no-labels": "error",
-        "no-label-var": "error",
-        "no-loop-func": "error",
-        "no-lone-blocks": "error",
-        "no-lonely-if": "error",
-        "no-magic-numbers": ["error", {ignore: [-1, 0, 1, 2]}],
-        "no-mixed-requires": "error",
-        "no-mixed-spaces-and-tabs": "error",
-        "no-multi-spaces": ["error", { exceptions: { "Property": false } }],
-        "no-multiple-empty-lines": ["error", {"max": 2}],
-        "no-multi-str": "error",
-        "no-negated-condition": "error",
-        "no-nested-ternary": "error",
-        "no-new": "error",
-        "no-new-func": "error",
-        "no-new-object": "error",
-        "no-new-require": "error",
-        "no-new-wrappers": "error",
-        "no-param-reassign": "error",
-        "no-proto": "error",
-        "no-return-assign": ["error", "always"],
-        "no-self-compare": "error",
-        "no-sequences": "error",
-        "no-shadow": "error",
-        "no-shadow-restricted-names": "error",
-        "no-spaced-func": "error",
-        "no-throw-literal": "error",
-        "no-trailing-spaces": "error",
-        "no-undef-init": "error",
-        "no-undefined": "error",
-        "no-unneeded-ternary": "error",
-        "no-unused-expressions": "error",
-        "no-unused-vars": "error",
-        "no-use-before-define": "error",
-        "no-useless-call": "error",
-        "no-useless-concat": "error",
-        "no-warning-comments": ["warn", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
-        "no-with": "error",
-        "object-curly-spacing": ["error", "never"],
-        "one-var": ["error", "never"],
-        "operator-linebreak": ["error", "before"],
-        "padded-blocks": ["error", "never"],
-        "radix": "error",
-        "quote-props": ["error", "as-needed"],
-        "quotes": ["error", "single"],
-        "semi": ["error", "always"],
-        "semi-spacing": "error",
-        "sort-vars": ["error", {"ignoreCase": true}],
-        "keyword-spacing": "error",
-        "space-before-blocks": "error",
-        "space-before-function-paren": ["error", { "anonymous": "always", "named": "never" }],
-        "space-in-parens": ["error", "never"],
-        "space-infix-ops": "error",
-        "space-unary-ops": "error",
-        "spaced-comment": ["error", "always"],
-        "vars-on-top": "error",
-        "wrap-iife": ["error", "inside"],
-        "wrap-regex": "error"
+        // Local rule configuration
+        "no-unused-vars": [
+            "error",
+            {
+                // Track all unused identifiers
+                "vars": "all",
+                "args": "all",
+                "caughtErrors": "all",
+                // Don't warn on args that start with _, res or req.
+                // Added stdout and stderr to the standard joyent set.
+                "argsIgnorePattern": "^(_|res|req|stdout|stderr)",
+                // Don't warn on catch or var identifiers that start with _
+                "caughtIgnorePattern": "^_",
+                "varsIgnorePattern": "^_"
+            }
+        ],
+        "max-len": [
+            "error",
+            80,
+            {
+                "tabWidth": 8,
+                "ignoreComments": false,
+                "ignoreTrailingComments": false,
+                "ignoreUrls": true
+            }
+        ],
     }
 }
diff --git a/.gitmodules b/.gitmodules
index dbadc87..c6774a2 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,9 +1,3 @@
 [submodule "deps/restdown"]
 	path = deps/restdown
 	url = git://github.com/trentm/restdown.git
-[submodule "deps/javascriptlint"]
-	path = deps/javascriptlint
-	url = git://github.com/davepacheco/javascriptlint.git
-[submodule "deps/jsstyle"]
-	path = deps/jsstyle
-	url = git://github.com/davepacheco/jsstyle.git
diff --git a/Makefile b/Makefile
index bcefcfb..86040e6 100644
--- a/Makefile
+++ b/Makefile
@@ -8,28 +8,11 @@
 # Copyright (c) 2018, Joyent, Inc.
 #
 
-#
-# Makefile: basic Makefile for template API service
-#
-# This Makefile is a template for new repos. It contains only repo-specific
-# logic and uses included makefiles to supply common targets (javascriptlint,
-# jsstyle, restdown, etc.), which are used by other repos as well. You may well
-# need to rewrite most of this file, but you shouldn't need to touch the
-# included makefiles.
-#
-# If you find yourself adding support for new targets that could be useful for
-# other projects too, you should add these to the original versions of the
-# included Makefiles (in eng.git) so that other teams can use them too.
-#
-
 #
 # Files
 #
-JS_FILES =
-JSL_CONF_NODE = tools/jsl.node.conf
-JSL_FILES_NODE = $(shell find bin/ lib/ -name *.js)
-JSSTYLE_FILES =
-JSSTYLE_FLAGS =
+JS_FILES := $(shell find {bin,lib,tests} -name '*.js')
+ESLINT_FILES := $(JS_FILES)
 
 # Should be the same version as the platform's /usr/node/bin/node.
 NODE_PREBUILT_TAG =	gz
@@ -140,17 +123,6 @@ dumpvar:
 	fi
 	@echo "$(VAR) is '$($(VAR))'"
 
-# eslint ftw
-ESLINT = ./node_modules/.bin/eslint
-$(ESLINT): package.json | $(NPM_EXEC)
-	$(RUN_NPM_INSTALL)
-
-check:: check-eslint
-
-.PHONY: check-eslint
-check-eslint: $(ESLINT)
-	@$< ./
-
 include ./tools/mk/Makefile.deps
 ifeq ($(shell uname -s),SunOS)
     include ./tools/mk/Makefile.node_prebuilt.targ
diff --git a/deps/javascriptlint b/deps/javascriptlint
deleted file mode 160000
index e1bd0ab..0000000
--- a/deps/javascriptlint
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
diff --git a/deps/jsstyle b/deps/jsstyle
deleted file mode 160000
index ab8f1fc..0000000
--- a/deps/jsstyle
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit ab8f1fc8d90db8484bbed8a526ff40add5aa1c15
diff --git a/lib/vm-agent.js b/lib/vm-agent.js
index c093e15..d7e46f8 100644
--- a/lib/vm-agent.js
+++ b/lib/vm-agent.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -617,9 +617,9 @@ function makeComparable(vmobj, fields, source) {
         field = fields[fieldIdx];
 
         if (vmobj.hasOwnProperty(field)) {
-            if (source === 'vmapi'
-                && VMAPI.VMAPI_ALWAYS_SET_FIELDS.hasOwnProperty(field)
-                && !diff(VMAPI.VMAPI_ALWAYS_SET_FIELDS[field], vmobj[field])) {
+            if (source === 'vmapi' &&
+                VMAPI.VMAPI_ALWAYS_SET_FIELDS.hasOwnProperty(field) &&
+                !diff(VMAPI.VMAPI_ALWAYS_SET_FIELDS[field], vmobj[field])) {
                 /*
                  * VMAPI always includes some fields, even when unset. So we
                  * skip those here so that the comparison can work.
@@ -670,16 +670,16 @@ VmAgent.prototype.initialUpdate = function initialUpdate(callback) {
 
                     // vmobjs is an array of VM objects
                     for (vmIdx = 0; vmIdx < vmobjs.length; vmIdx++) {
-                        stash.vmapiVms.fullVms[vmobjs[vmIdx].uuid]
-                            = vmobjs[vmIdx];
-                        stash.vmapiVms.compareVms[vmobjs[vmIdx].uuid]
-                            = makeComparable(vmobjs[vmIdx],
+                        stash.vmapiVms.fullVms[vmobjs[vmIdx].uuid]  =
+                            vmobjs[vmIdx];
+                        stash.vmapiVms.compareVms[vmobjs[vmIdx].uuid] =
+                            makeComparable(vmobjs[vmIdx],
                             self.comparisonFields, 'vmapi');
                     }
                     cb();
                 }
             );
-        }, function _startWatcher(stash, cb) {
+        }, function _startWatcher(_stash, cb) {
             /*
              * Just before we do the vmadm lookup we start the watcher which
              * will be dumping changed VMs into the queue. We start it here to
@@ -727,8 +727,8 @@ VmAgent.prototype.initialUpdate = function initialUpdate(callback) {
                         self.knownDniVms[vmobjs[vmIdx].uuid] = {};
                     } else {
                         // not DNI, so include in the list
-                        stash.vmadmVms.fullVms[vmobjs[vmIdx].uuid]
-                            = vmobjs[vmIdx];
+                        stash.vmadmVms.fullVms[vmobjs[vmIdx].uuid] =
+                            vmobjs[vmIdx];
                         stash.vmadmVms
                             .compareVms[vmobjs[vmIdx].uuid] = makeComparable(
                                 vmobjs[vmIdx], self.comparisonFields, 'vmadm');
@@ -788,7 +788,7 @@ VmAgent.prototype.initialUpdate = function initialUpdate(callback) {
             });
 
             cb();
-        }, function _updateVmapiVms(stash, cb) {
+        }, function _updateVmapiVms(_stash, cb) {
             var startUpdate = (new Date()).getTime();
 
             if (Object.keys(vms).length === 0) {
@@ -843,7 +843,7 @@ VmAgent.prototype.start = function start(callback) {
     assert.optionalFunc(callback, 'callback');
 
     vasync.pipeline({arg: {}, funcs: [
-        function _setupWatcher(stash, cb) {
+        function _setupWatcher(_stash, cb) {
             // initialize the watcher if we've not already done so
             if (self.watcher) {
                 cb();
@@ -851,7 +851,7 @@ VmAgent.prototype.start = function start(callback) {
             }
 
             self.setupWatcher(cb);
-        }, function _initialUpdate(stash, cb) {
+        }, function _initialUpdate(_stash, cb) {
             var startUpdate = (new Date()).getTime();
 
             function _doInitialUpdate() {
diff --git a/lib/vm-watcher.js b/lib/vm-watcher.js
index 07310dc..e432911 100644
--- a/lib/vm-watcher.js
+++ b/lib/vm-watcher.js
@@ -240,8 +240,8 @@ function dispatchCreate(vmUuid, updateVmobj, watcher) {
     assert.object(updateVmobj, 'updateVmobj');
     assert.string(watcher, 'watcher');
 
-    if (self.knownVms.hasOwnProperty(vmUuid)
-        && self.knownVms[vmUuid].destroyed) {
+    if (self.knownVms.hasOwnProperty(vmUuid) &&
+        self.knownVms[vmUuid].destroyed) {
         // The VM was previously, destroyed: delete since this is a new one.
         delete self.knownVms[vmUuid];
     }
@@ -293,8 +293,8 @@ function dispatchModify(vmUuid, updateVmobj, watcher) {
         return;
     }
 
-    if (watcher !== 'periodic'
-        && SPECIAL_STATES.indexOf(self.knownVms[vmUuid].state) !== -1) {
+    if (watcher !== 'periodic' &&
+        SPECIAL_STATES.indexOf(self.knownVms[vmUuid].state) !== -1) {
         // when we're in one of the 'special' states, zone_state and state don't
         // match. Since watchers other than periodic don't go through vmadm,
         // they won't know about the correct 'state' in these cases, so we leave
diff --git a/lib/watchers/fs-watcher.js b/lib/watchers/fs-watcher.js
index b75ac94..457e62a 100644
--- a/lib/watchers/fs-watcher.js
+++ b/lib/watchers/fs-watcher.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -306,8 +306,8 @@ FsWatcher.prototype.watchConfig = function watchConfig(vmUuid) {
 
     assert.uuid(vmUuid, 'vmUuid');
 
-    if (self.configWatchers.hasOwnProperty(vmUuid)
-        && self.configWatchers[vmUuid] !== null) {
+    if (self.configWatchers.hasOwnProperty(vmUuid) &&
+        self.configWatchers[vmUuid] !== null) {
         // already watching
         return;
     }
@@ -331,12 +331,12 @@ FsWatcher.prototype.watchConfig = function watchConfig(vmUuid) {
                     self.log.trace('fs.watch(' + path + ') saw: ' + evt);
 
                     self.getConfigTimestamp(vmUuid,
-                        function _getTimestampCb(e, newest) {
+                        function _getTimestampCb(_e, newest) {
                             if (!newest || !self.lastSeenVms) {
                                 return;
                             }
-                            if (self.lastSeenVms.hasOwnProperty(vmUuid)
-                                && (newest > self.lastSeenVms[vmUuid])) {
+                            if (self.lastSeenVms.hasOwnProperty(vmUuid) &&
+                                (newest > self.lastSeenVms[vmUuid])) {
                                 // the VM timestamp changed, send a modify event
                                 self.updateVm(vmUuid, 'modify', {
                                     last_modified: new Date(newest)
@@ -412,7 +412,7 @@ FsWatcher.prototype.processState = function processState(callback) {
     assert.optionalFunc(callback, 'callback');
 
     vasync.pipeline({arg: {}, funcs: [
-        function _getCurrentVms(arg, cb) {
+        function _getCurrentVms(_, cb) {
             // load the current set of zones
             self.getCurrentZones(function _onGetCurrentZones(err, vms) {
                 if (err) {
@@ -503,8 +503,8 @@ FsWatcher.prototype.processState = function processState(callback) {
                 func: function _emitChanged(vmUuid, next) {
                     assert.uuid(vmUuid, 'vmUuid');
 
-                    if (self.lastSeenVms[vmUuid]
-                        && (currentVms[vmUuid] > self.lastSeenVms[vmUuid])) {
+                    if (self.lastSeenVms[vmUuid] &&
+                        (currentVms[vmUuid] > self.lastSeenVms[vmUuid])) {
                         // we've seen this before and it's newer
                         self.updateVm(vmUuid, 'modify', {
                             last_modified: new Date(currentVms[vmUuid])
diff --git a/lib/watchers/periodic-watcher.js b/lib/watchers/periodic-watcher.js
index 67c4936..9211d5d 100644
--- a/lib/watchers/periodic-watcher.js
+++ b/lib/watchers/periodic-watcher.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -255,15 +255,15 @@ PeriodicWatcher.prototype.start = function start() {
 
                     // schedule the next lookup
                     if (!self.disabled) {
-                        self.periodicTimer
-                            = setTimeout(doLookup, self.periodic_interval);
+                        self.periodicTimer =
+                            setTimeout(doLookup, self.periodic_interval);
                     }
                 } else {
                     handleVmobjs(vmobjs, function _handleVmobjs(e, changes) {
                         var done_handling = (new Date()).getTime();
 
-                        if (changes && (changes.created > 0
-                            || changes.deleted > 0 || changes.modified > 0)) {
+                        if (changes && (changes.created > 0 ||
+                            changes.deleted > 0 || changes.modified > 0)) {
                             // something changed
                             self.log.debug({
                                 action: 'handleVmobjs',
@@ -282,8 +282,8 @@ PeriodicWatcher.prototype.start = function start() {
 
                         // schedule the next lookup
                         if (!self.disabled) {
-                            self.periodicTimer
-                                = setTimeout(doLookup, self.periodic_interval);
+                            self.periodicTimer =
+                                setTimeout(doLookup, self.periodic_interval);
                         }
                     });
                 }
diff --git a/package.json b/package.json
index 94929fe..e343e08 100644
--- a/package.json
+++ b/package.json
@@ -20,6 +20,10 @@
         "vasync": "1.6.3",
         "vmadm": "1.1.0"
     },
+    "devDependencies": {
+        "eslint": "4.19.1",
+        "eslint-plugin-joyent": "~2.0.0"
+    },
     "sdcDependencies": {
         "config-agent": ">=1.3.0"
     },
diff --git a/tests/common.js b/tests/common.js
index 72b4020..aa8eeb9 100644
--- a/tests/common.js
+++ b/tests/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -48,9 +48,9 @@ function testFindSmartosImage(t, callback) {
 
         for (idx = 0; idx < imgs.length; idx++) {
             img = imgs[idx];
-            if (img && img.manifest && img.manifest.tags
-                && img.manifest.tags.smartdc
-                && (!latest || img.manifest.published_at > latest)) {
+            if (img && img.manifest && img.manifest.tags &&
+                img.manifest.tags.smartdc &&
+                (!latest || img.manifest.published_at > latest)) {
                 // found a newer SmartOS img!
                 smartosImageUUID = img.manifest.uuid;
                 latest = img.manifest.published_at;
diff --git a/tests/mocks.js b/tests/mocks.js
index 2c7567c..039a9e9 100644
--- a/tests/mocks.js
+++ b/tests/mocks.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var util = require('util');
@@ -43,8 +43,8 @@ var Logger = {
                 // VM doesn't exist, not really an error
                 return;
             }
-        } else if (err.stderr && (err.stderr.match(/^ENOENT, open.*\.xml/)
-            || (err.stderr.match(/unable to load \/etc\/zones\/.*.xml/)))) {
+        } else if (err.stderr && (err.stderr.match(/^ENOENT, open.*\.xml/) ||
+            (err.stderr.match(/unable to load \/etc\/zones\/.*.xml/)))) {
             // VM doesn't exist, not really an error
             return;
         }
@@ -215,7 +215,7 @@ fakeVmadm.getError = function getError() {
     return (vmadmErr);
 };
 
-fakeVmadm.events = function vmadmEvents(opts, handler, cb) {
+fakeVmadm.events = function vmadmEvents(_opts, _handler, cb) {
     cb(new Error('Not Implemented'));
 };
 
diff --git a/tests/test.VmAgentMockVmadm.js b/tests/test.VmAgentMockVmadm.js
index 8469442..56f5f4d 100644
--- a/tests/test.VmAgentMockVmadm.js
+++ b/tests/test.VmAgentMockVmadm.js
@@ -205,7 +205,7 @@ function _test(t) {
     // 1. When VmAgent is doing its initialization, it does a vmadm.lookup for
     // all VMs on the CN, when we see that we add our first VM. That VM will be
     // processed we'll see vmapi.updateVm and move to stage 2.
-    coordinator.on('vmadm.lookup', function _onVmadmLookup(search, opts) {
+    coordinator.on('vmadm.lookup', function _onVmadmLookup(_search, opts) {
         t.ok(!opts.fields, 'vmadm.lookup should not have "fields"');
         if (!opts.fields) {
             // initial lookup, ready to pretend some changes
diff --git a/tests/test.VmAgentRealVmadm.js b/tests/test.VmAgentRealVmadm.js
index 438f5db..ee7b15e 100644
--- a/tests/test.VmAgentRealVmadm.js
+++ b/tests/test.VmAgentRealVmadm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var execFile = require('child_process').execFile;
@@ -114,9 +114,9 @@ function waitForUpdate(startIdx, params, cb) {
         diffObj = diff(params, cmpObj);
         if (diffObj) {
             filteredDiff = diffObj.filter(function _removeNotDiffs(_diff) {
-                if (typeof (_diff.lhs) === 'string' && _diff.rhs
-                    && _diff.lhs[0] === '!'
-                    && _diff.lhs.slice(1) !== _diff.rhs.toString()) {
+                if (typeof (_diff.lhs) === 'string' && _diff.rhs &&
+                    _diff.lhs[0] === '!' &&
+                    _diff.lhs.slice(1) !== _diff.rhs.toString()) {
                     // This matches the negation
                     return (false);
                 }
@@ -244,7 +244,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
             var newAlias = payload.alias + '-HACKED';
 
             _setVmadmProperty(vmUuid, 'alias', newAlias, cb);
-        }, function _stopVm(vmUuid, cb) {
+        }, function _stopVm(_vmUuid, cb) {
             var opts = {
                 log: config.log,
                 uuid: payload.uuid
@@ -254,7 +254,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                 t.ifError(err, 'stop VM');
                 cb(err, {state: 'stopped', zone_state: 'installed'});
             });
-        }, function _startVm(vmUuid, cb) {
+        }, function _startVm(_vmUuid, cb) {
             var opts = {
                 log: config.log,
                 uuid: payload.uuid
@@ -264,7 +264,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                 t.ifError(err, 'start VM');
                 cb(err, {state: 'running', zone_state: 'running'});
             });
-        }, function _rebootVm(vmUuid, cb) {
+        }, function _rebootVm(_vmUuid, cb) {
             var opts = {
                 force: true, // force reboot, since soft-reboot is unreliable
                 log: config.log,
@@ -283,7 +283,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                     pid: '!' + prevPid
                 });
             });
-        }, function _snapshotVm(vmUuid, cb) {
+        }, function _snapshotVm(_vmUuid, cb) {
             var opts = {
                 log: config.log,
                 snapshot_name: 'snappy',
@@ -297,7 +297,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                     snapshots: [{name: 'snappy'}]
                 });
             });
-        }, function _rollbackVm(vmUuid, cb) {
+        }, function _rollbackVm(_vmUuid, cb) {
             var lastIdx = updates.length - 1;
             var opts = {
                 log: config.log,
@@ -316,7 +316,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                     snapshots: [{name: 'snappy'}]
                 });
             });
-        }, function _deleteSnapshot(vmUuid, cb) {
+        }, function _deleteSnapshot(_vmUuid, cb) {
             var opts = {
                 log: config.log,
                 snapshot_name: 'snappy',
@@ -334,7 +334,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
     ];
 
     vasync.pipeline({arg: {}, funcs: [
-        function _waitInitialUpdateVms(arg, cb) {
+        function _waitInitialUpdateVms(_, cb) {
             // Wait for VmAgent init and it'll send the initial PUT /vms, these
             // are real VMs on the node because we're not faking vmadm.
             coordinator.once('vmapi.updateServerVms',
@@ -349,7 +349,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
 
                 cb();
             });
-        }, function _createVm(arg, cb) {
+        }, function _createVm(_, cb) {
             // Create a VM then wait for the PUT /vm that includes it
             smartosVmUUID = payload.uuid;
             performThenWait(function _performCreate(next) {
@@ -365,7 +365,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                     });
                 });
             }, cb);
-        }, function _applyModifiers(arg, cb) {
+        }, function _applyModifiers(_, cb) {
             var vmUuid = smartosVmUUID;
 
             function _applyModifier(modFn, _cb) {
@@ -385,7 +385,7 @@ test('Real vmadm, fake VMAPI', function _test(t) {
                 t.ifError(err, 'applied modifiers');
                 cb(err);
             });
-        }, function _destroyVm(arg, cb) {
+        }, function _destroyVm(_, cb) {
             //  With all modifications complete, we now delete the VM which
             //  should result in one more updateVm with 'destroyed'.
 
@@ -446,7 +446,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
     var waitForUpdatesAfterFixing = 95000; // max delay is 30s, so catch 3+
 
     vasync.pipeline({arg: {}, funcs: [
-        function _waitInitialUpdateVms(arg, cb) {
+        function _waitInitialUpdateVms(_, cb) {
             // Wait for VmAgent init and it'll send the initial PUT /vms, these
             // are real VMs on the node because we're not faking vmadm.
             coordinator.once('vmapi.updateServerVms',
@@ -461,7 +461,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
 
                 cb();
             });
-        }, function _createBrokenVm(arg, cb) {
+        }, function _createBrokenVm(_, cb) {
             // Create a VM then wait for the PUT /vm that includes it (which
             // should fail)
             var thisPayload = JSON.parse(JSON.stringify(payload));
@@ -492,7 +492,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
                     });
                 });
             }, cb);
-        }, function _createOtherVms(arg, cb) {
+        }, function _createOtherVms(_, cb) {
             var uuids = [];
 
             function _createOneVm(uuid, _createOneCb) {
@@ -527,7 +527,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
 
             // create those VMs
             vasync.forEachPipeline({inputs: uuids, func: _createOneVm}, cb);
-        }, function _checkVmapiForBrokenVm(arg, cb) {
+        }, function _checkVmapiForBrokenVm(_, cb) {
             var foundBroken = 0;
             var foundNonBroken = 0;
             var vmapiVms = mocks.Vmapi.peekVms();
@@ -545,7 +545,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
                 'all non-broken VMs should be in VMAPI');
 
             cb();
-        }, function _checkBrokenRetrying(arg, cb) {
+        }, function _checkBrokenRetrying(_, cb) {
             var updateIdx = updates.length;
 
             setTimeout(function _afterWaitingForUpdates() {
@@ -569,7 +569,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
                     + oldBrokenUpdates);
                 cb();
             }, waitForUpdatesAfterFixing);
-        }, function _clearProblem(arg, cb) {
+        }, function _clearProblem(_, cb) {
             // Tell fake VMAPI that this VM is no longer a problem, then wait
             // for it to get an update and have this VM.
             performThenWait(function _performClearProblem(next) {
@@ -594,7 +594,7 @@ test('Real vmadm, fake VMAPI: 1 invalid VM', function _test(t) {
                     + ' was cleared');
                 cb();
             });
-        }, function _destroyVms(arg, cb) {
+        }, function _destroyVms(_, cb) {
             //  With all modifications complete, we now delete the VM which
             //  should result in one more updateVm with 'destroyed'.
 
@@ -670,7 +670,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
     payload.log = config.log;
 
     vasync.pipeline({arg: {}, funcs: [
-        function _createDoNotInventoryVm(arg, cb) {
+        function _createDoNotInventoryVm(_, cb) {
             vmadm.create(payload, function _vmadmCreateCb(err, info) {
                 t.ifError(err, 'create DNI VM');
                 if (!err && info) {
@@ -678,7 +678,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                 }
                 cb(err);
             });
-        }, function _waitInitialUpdateVms(arg, cb) {
+        }, function _waitInitialUpdateVms(_, cb) {
             // Wait for VmAgent init and it'll send the initial PUT /vms, these
             // are real VMs on the node because we're not faking vmadm.
             // We also ensure that the VM we created that has do_not_inventory
@@ -706,7 +706,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
             t.ok(config.server_uuid, 'new CN ' + config.server_uuid);
             vmAgent = new VmAgent(config);
             vmAgent.start();
-        }, function _removeDNI(arg, cb) {
+        }, function _removeDNI(_, cb) {
             // when we remove the DNI flag, the VM should show up at VMAPI
             performThenWait(function _performRemoveDNI(next) {
                 var updatePayload = {
@@ -726,7 +726,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                     });
                 });
             }, cb);
-        }, function reAddDNI(arg, cb) {
+        }, function reAddDNI(_, cb) {
             // add the DNI again, this will update last_modified but we should
             // not see that at VMAPI. We also update the alias so we can check
             // that later when we finally do get an update through.
@@ -748,7 +748,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                     }
                 );
             });
-        }, function stopDNI(arg, cb) {
+        }, function stopDNI(_, cb) {
             // stop the VM, since DNI is still set, nothing should come through
             var stopPayload = {
                 include_dni: true,
@@ -767,7 +767,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                     }
                 );
             });
-        }, function startDNI(arg, cb) {
+        }, function startDNI(_, cb) {
             // start the VM, since DNI is still set, nothing should come through
             var startPayload = {
                 include_dni: true,
@@ -786,7 +786,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                     }
                 );
             });
-        }, function _removeDNIAgain(arg, cb) {
+        }, function _removeDNIAgain(_, cb) {
             // when we remove the DNI flag, the VM should show up at VMAPI
             performThenWait(function _performRemoveDNI(next) {
                 var updatePayload = {
@@ -806,7 +806,7 @@ test('Real vmadm, fake VMAPI: validate DNI', function _test(t) {
                     });
                 });
             }, cb);
-        }, function _destroyVm(arg, cb) {
+        }, function _destroyVm(_, cb) {
             //  With all modifications complete, we now delete the VM which
             //  should result in one more updateVm with 'destroyed'.
             performThenWait(function _performDelete(next) {
@@ -875,7 +875,7 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
     payload2.log = config.log;
 
     vasync.pipeline({arg: {}, funcs: [
-        function _createDoNotInventoryVm1(arg, cb) {
+        function _createDoNotInventoryVm1(_, cb) {
             // creating a VM with DNI should not result in it being in the
             // initial update.
             vmadm.create(payload1, function _vmadmCreateCb(err, info) {
@@ -885,7 +885,7 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
                 }
                 cb(err);
             });
-        }, function _waitInitialUpdateVms(arg, cb) {
+        }, function _waitInitialUpdateVms(_, cb) {
             // Wait for VmAgent init and it'll send the initial PUT /vms, these
             // are real VMs on the node because we're not faking vmadm.
             coordinator.once('vmapi.updateServerVms',
@@ -900,7 +900,7 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
             t.ok(config.server_uuid, 'new CN ' + config.server_uuid);
             vmAgent = new VmAgent(config);
             vmAgent.start();
-        }, function _createDoNotInventoryVm2(arg, cb) {
+        }, function _createDoNotInventoryVm2(_, cb) {
             // creating a VM with DNI should not result in an update.
             vmadm.create(payload2, function _vmadmCreateCb(err, info) {
                 t.ifError(err, 'create DNI VM2');
@@ -909,7 +909,7 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
                 }
                 cb(err);
             });
-        }, function _destroyVm1(arg, cb) {
+        }, function _destroyVm1(_, cb) {
             //  With all modifications complete, we now delete the VM
             vmadm.delete({
                 include_dni: true,
@@ -920,7 +920,7 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
                     + (err ? err.message : 'success'));
                 cb(err);
             });
-        }, function _destroyVm2(arg, cb) {
+        }, function _destroyVm2(_, cb) {
             //  With all modifications complete, we now delete the VM
             vmadm.delete({
                 include_dni: true,
@@ -931,12 +931,12 @@ test('Real vmadm, fake VMAPI: new DNI VM', function _test(t) {
                     + (err ? err.message : 'success'));
                 cb(err);
             });
-        }, function _waitDestroyVm(arg, cb) {
+        }, function _waitDestroyVm(_, cb) {
             setTimeout(function _waitedDestroyVm() {
                 t.ok(true, 'waited ' + WAIT_DNI_DELETE_MS + ' ms after delete');
                 cb();
             }, WAIT_DNI_DELETE_MS);
-        }, function _checkUpdates(arg, cb) {
+        }, function _checkUpdates(_, cb) {
             var badUpdates = 0;
 
             updates.forEach(function _checkUpdate(vm) {
@@ -986,7 +986,7 @@ test('VmAgent works after initial errors', function _test(t) {
     var vmapiPutErr;
 
     vasync.pipeline({arg: {}, funcs: [
-        function _createSimulatedErrors(arg, cb) {
+        function _createSimulatedErrors(_, cb) {
             // simulate connection refused
             vmapiGetErr = new Error('Connection Refused');
             vmapiGetErr.code = 'ECONNREFUSED';
@@ -1002,7 +1002,7 @@ test('VmAgent works after initial errors', function _test(t) {
 
             t.ok(config.server_uuid, 'new CN ' + config.server_uuid);
             cb();
-        }, function _waitInitialUpdateVms(arg, cb) {
+        }, function _waitInitialUpdateVms(_, cb) {
             var seenGetAttempts = 0;
             var seenPutAttempts = 0;
 
@@ -1025,7 +1025,7 @@ test('VmAgent works after initial errors', function _test(t) {
             vasync.parallel({funcs: [
                 function _vmapiUpdateServerVms(cb2) {
                     coordinator.on('vmapi.updateServerVms',
-                        function _onUpdateVms(vmobjs, server_uuid, err) {
+                        function _onUpdateVms(vmobjs, _server_uuid, err) {
                             var keys = Object.keys(vmobjs);
 
                             seenPutAttempts++;
@@ -1042,7 +1042,7 @@ test('VmAgent works after initial errors', function _test(t) {
                     );
 
                     coordinator.on('vmapi.getVms',
-                        function _onVmapiGetVms(server_uuid, err) {
+                        function _onVmapiGetVms(_server_uuid, err) {
                             seenGetAttempts++;
                             t.ok(true, 'saw GET /vms [' + seenGetAttempts + ']'
                                 + (err ? ' -- ' + err.code : ''));
@@ -1057,7 +1057,7 @@ test('VmAgent works after initial errors', function _test(t) {
                     vmAgent.start(cb2);
                 }
             ]}, cb);
-        }, function _createVm(arg, cb) {
+        }, function _createVm(_, cb) {
             // now that init is complete, create a VM and make sure we see an
             // update.
 
@@ -1097,7 +1097,7 @@ test('VmAgent works after initial errors', function _test(t) {
                     });
                 }
             ]}, cb);
-        }, function _deleteVm(arg, cb) {
+        }, function _deleteVm(_, cb) {
             /*
              * Same logic applies for `vmadm.delete` as `vmadm.create` above
              * re: vasync.parallel.
@@ -1111,8 +1111,8 @@ test('VmAgent works after initial errors', function _test(t) {
                                 // this system
                                 return;
                             }
-                            if (vmobj.state === 'destroyed'
-                                && vmobj.zone_state === 'destroyed') {
+                            if (vmobj.state === 'destroyed' &&
+                                vmobj.zone_state === 'destroyed') {
                                 // when we see destroyed, we'll move on
                                 t.ok(true, 'VMAPI saw destroy for VM');
                                 coordinator.removeAllListeners(
diff --git a/tests/test.VmapiFields.js b/tests/test.VmapiFields.js
index 596a662..21f46dd 100644
--- a/tests/test.VmapiFields.js
+++ b/tests/test.VmapiFields.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -103,8 +103,8 @@ test('Compare VMAPI VM to VMAPI_ALWAYS_SET_FIELDS', function _test(t) {
     var comparableVmobj = {};
 
     Object.keys(testVmobj).forEach(function _attemptAddCompareField(field) {
-        if (VMADM_ALWAYS_SET_FIELDS.hasOwnProperty(field)
-            && !diff(VMADM_ALWAYS_SET_FIELDS[field], testVmobj[field])) {
+        if (VMADM_ALWAYS_SET_FIELDS.hasOwnProperty(field) &&
+            !diff(VMADM_ALWAYS_SET_FIELDS[field], testVmobj[field])) {
             // remove fields that are also always set in vmadm
             return;
         }
diff --git a/tests/test.ZoneeventWatcherOverflow.js b/tests/test.ZoneeventWatcherOverflow.js
index b8975ab..c96fe07 100644
--- a/tests/test.ZoneeventWatcherOverflow.js
+++ b/tests/test.ZoneeventWatcherOverflow.js
@@ -68,7 +68,7 @@ function main() {
     });
 
     test('starting ZoneeventWatcher', function _test(t) {
-        function _onVmUpdate(vmUuid, updateType, updateObj) {
+        function _onVmUpdate(vmUuid, _updateType, updateObj) {
             if (!vmEvents.hasOwnProperty(vmUuid)) {
                 vmEvents[vmUuid] = {start: 0, stop: 0, other: 0};
             }
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
deleted file mode 100644
index e8711c7..0000000
--- a/tools/jsl.node.conf
+++ /dev/null
@@ -1,139 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
--inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
--useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
--always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define __dirname
-+define clearInterval
-+define clearTimeout
-+define console
-+define exports
-+define global
-+define module
-+define process
-+define require
-+define setImmediate
-+define setInterval
-+define setTimeout
-+define Buffer
-+define JSON
-+define Math
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
deleted file mode 100644
index b135000..0000000
--- a/tools/jsl.web.conf
+++ /dev/null
@@ -1,137 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
-+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
-+unreferenced_argument        # argument declared but never referenced: {name}
-+unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
-+useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
-+always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define	JSON
-+define Math
-+define $
-+define XMLHttpRequest
-+define alert
-+define clearInterval
-+define clearTimeout
-+define confirm
-+define document
-+define setInterval
-+define setTimeout
-+define window
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 2d92ec3..91f8346 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -44,9 +44,44 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
 RESTDOWN_EXEC	?= deps/restdown/bin/restdown
 RESTDOWN	?= python $(RESTDOWN_EXEC)
 $(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 3f6d54b..dac448a 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -77,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -89,26 +92,27 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
 # Defaults for the various tools we use.
 #
 BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
+BASHSTYLE   ?= $(NODE) tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -190,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -209,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +274,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,9 +304,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -315,3 +327,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

