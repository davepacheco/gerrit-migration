From 2332b5cc82d4064888e86c69979ad52df3a10cff Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Wed, 11 Jul 2018 23:16:48 +0000
Subject: [PATCH] TRITON-170 napi-ufds-watcher should retry when failing to
 list default VLAN Reviewed by: Marsell Kukuljevic <marsell@joyent.com>
 Approved by: Marsell Kukuljevic <marsell@joyent.com>

---
 lib/default-fabric-setup.js | 178 ++++++++++++++++++++++--------------
 1 file changed, 110 insertions(+), 68 deletions(-)

diff --git a/lib/default-fabric-setup.js b/lib/default-fabric-setup.js
index 8b5e4eb..4aaa04e 100644
--- a/lib/default-fabric-setup.js
+++ b/lib/default-fabric-setup.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /**
@@ -40,47 +40,69 @@ function DefaultFabricSetupStream(opts) {
     Transform.call(this, { objectMode: true });
 
     var self = this;
+    var log = opts.log.child({ component: 'DefaultFabricSetupStream' }, true);
 
-    self.log = opts.log.child({ component: 'DefaultFabricSetupStream' }, true);
+    self.log = log;
     self.dead = false;
 
     self.napiClient = new NAPI(opts.napi);
 
     function findDefaultVlan(_opts, cb) {
+        var userUUID = _opts.uuid;
         assert.object(_opts, '_opts');
-        assert.string(_opts.uuid, 'uuid');
+        assert.string(userUUID, 'uuid');
         assert.string(_opts.requestId, 'requestId');
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        self.napiClient.listFabricVLANs(_opts.uuid,
-            reqOptions,
-            function (err, vlans) {
-
-            if (err) {
-                return cb(err);
-            }
+        function find() {
+            self.napiClient.listFabricVLANs(userUUID,
+                reqOptions,
+                function listCb(err, vlans) {
+                    var timeout = 10000;
 
-            var defaultVlan = vlans.reduce(function (acc, v) {
-                return acc || (v.name === opts.default_vlan.name ? v : null);
-            }, null);
+                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
+                        log.warn({err: err, user: userUUID},
+                            'Server error finding vlan for user %s. ' +
+                            'Retrying in %dms',
+                            userUUID, timeout);
+                        setTimeout(find, timeout);
+                        return;
+                    } else if (err) {
+                        log.error({err: err, user: userUUID},
+                            'Error finding vlan for user %s',
+                            userUUID);
+                        cb(err);
+                        return;
+                    }
 
-            if (defaultVlan) {
-                self.log.info({ vlan: defaultVlan, user: _opts.uuid },
-                    'Default vlan exists for user');
-                _opts.defaultVlan = defaultVlan;
-                return cb();
-            }
+                    var defaultVlanList;
+                    defaultVlanList = vlans.filter(function matchNm(v) {
+                        return (v.name === opts.default_vlan.name);
+                    });
+
+                    if (defaultVlanList.length === 0) {
+                        log.info({ user: userUUID },
+                            'Default vlan does not exist for user');
+                    } else {
+                        assert.ok(defaultVlanList === 1);
+                        _opts.defaultVlan = defaultVlanList[0];
+                        log.info({ vlan: _opts.defaultVlan,
+                                   user: userUUID },
+                            'Default vlan exists for user');
+                    }
 
-            self.log.info({ user: _opts.uuid },
-                'Default vlan does not exist for user');
-            return cb();
-        });
+                    cb();
+                    return;
+                });
+        }
+        find();
     }
 
     function createDefaultVlan(_opts, cb) {
+        var userUUID = _opts.uuid;
         assert.object(_opts, '_opts');
-        assert.string(_opts.uuid, 'uuid');
+        assert.string(userUUID, 'uuid');
         assert.string(_opts.requestId, 'requestId');
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
@@ -90,28 +112,28 @@ function DefaultFabricSetupStream(opts) {
         }
 
         function create() {
-            self.napiClient.createFabricVLAN(_opts.uuid,
+            self.napiClient.createFabricVLAN(userUUID,
                 opts.default_vlan,
                 reqOptions,
                 function (_err, vlan) {
                 var timeout = 10000;
                 if (_err &&
                     _err.statusCode >= 500 && _err.statusCode < 600) {
-                    self.log.error({ err: _err, user: _opts.uuid,
+                    log.error({ err: _err, user: userUUID,
                         requestId: _opts.requestId },
                         'Server error creating vlan for user %s. ' +
                         'Retrying in %sms',
-                        _opts.uuid, timeout);
+                        userUUID, timeout);
                     setTimeout(create, timeout);
                     return;
                 } else if (_err) {
-                    self.log.error({ err: _err },
+                    log.error({ err: _err },
                         'Error creating fabric vlan for user');
                     return cb(_err);
                 }
                 _opts.defaultVlan = vlan;
                 _opts.createdVlan = true;
-                self.log.info({ vlan: vlan, user: _opts.uuid },
+                log.info({ vlan: vlan, user: userUUID },
                     'Created default fabric vlan for user');
                 return cb();
             });
@@ -120,46 +142,66 @@ function DefaultFabricSetupStream(opts) {
     }
 
     function findDefaultNetwork(_opts, cb) {
+        var userUUID = _opts.uuid;
         assert.object(_opts, 'opts');
-        assert.string(_opts.uuid, 'uuid');
+        assert.string(userUUID, 'uuid');
         assert.string(_opts.requestId, 'requestId');
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        self.napiClient.listFabricNetworks(_opts.uuid,
-            opts.default_network.vlan_id,
-            {},
-            reqOptions,
-            function (err, networks) {
-            var defaultNetwork;
-            if (err) {
-                self.log.error({ err: err, user: _opts.uuid,
-                    requestId: _opts.requestId },
-                    'Error creating default fabric network for user');
-                return cb(err);
-            }
-            // XXX - this network is not necessarily the right one.
-            defaultNetwork = networks.reduce(function (acc, n) {
-                return n.name === opts.default_network.name ? n : null;
-            }, null);
-            if (defaultNetwork) {
-                self.log.info({ network: defaultNetwork, user: _opts.uuid,
-                    requestId: _opts.requestId },
-                    'Default network exists for user',
-                    defaultNetwork.uuid, _opts.uuid);
-                _opts.defaultNetwork = defaultNetwork;
-                return cb();
-            }
+        function find() {
+            self.napiClient.listFabricNetworks(userUUID,
+                opts.default_network.vlan_id,
+                {},
+                reqOptions,
+                function listCb(err, networks) {
+                    var timeout = 10000;
 
-            self.log.info({ user: _opts.uuid },
-                'Default network does not exist for user');
-            return cb();
-        });
+                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
+                        log.warn({err: err, user: userUUID},
+                            'Server error finding network for user %s. ' +
+                            'Retrying in %dms',
+                            userUUID, timeout);
+                        setTimeout(find, timeout);
+                        return;
+                    } else if (err) {
+                        log.error({err: err, user: userUUID},
+                            'Error finding network for user %s',
+                            userUUID);
+                        cb(err);
+                        return;
+                    }
+                    var defaultNetworkList;
+                    defaultNetworkList = networks.filter(function matchNm(n) {
+                        return (n.name === opts.default_network.name);
+                    });
+
+                    if (defaultNetworkList.length === 0) {
+                        log.info({ user: userUUID },
+                            'Default network does not exist for user');
+                    } else {
+                        assert.ok(defaultNetworkList === 1);
+                        _opts.defaultNetwork = defaultNetworkList[0];
+                        log.info({network: _opts.defaultNetwork,
+                                  user: userUUID,
+                                  requestId: _opts.requestId
+                                 },
+                                 'Default network exists for user',
+                                 _opts.defaultNetwork.uuid,
+                                 userUUID);
+                    }
+
+                    cb();
+                    return;
+            });
+        }
+        find();
     }
 
     function createDefaultNetwork(_opts, cb) {
+        var userUUID = _opts.uuid;
         assert.object(_opts, 'opts');
-        assert.string(_opts.uuid, 'uuid');
+        assert.string(userUUID, 'uuid');
         assert.string(_opts.requestId, 'requestId');
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
@@ -169,28 +211,28 @@ function DefaultFabricSetupStream(opts) {
         }
 
         function create() {
-            self.napiClient.createFabricNetwork(_opts.uuid,
+            self.napiClient.createFabricNetwork(userUUID,
                 opts.default_network.vlan_id, opts.default_network,
                 reqOptions,
                 function (_err, network) {
                     var timeout = 10000;
                     if (_err &&
                         _err.statusCode >= 500 && _err.statusCode < 600) {
-                        self.log.warn({ err: _err },
+                        log.warn({ err: _err, user: userUUID },
                             'Server error creating network for user %s. ' +
                             'Retrying in %sms',
-                            _opts.uuid, timeout);
+                            userUUID, timeout);
                         setTimeout(create, timeout);
                         return;
                     } else if (_err) {
-                        self.log.error({ err: _err, user: _opts.uuid },
+                        log.error({ err: _err, user: userUUID },
                             'Error creating network for user %s',
-                            _opts.uuid);
+                            userUUID);
                         return cb(_err);
                     }
-                    self.log.info({ network: network, user: _opts.uuid },
+                    log.info({ network: network, user: userUUID },
                         'create default network %s for user %s',
-                        network.uuid, _opts.uuid);
+                        network.uuid, userUUID);
                     _opts.defaultNetwork = network;
                     _opts.createdNetwork = true;
                     return cb();
@@ -215,7 +257,7 @@ function DefaultFabricSetupStream(opts) {
             return cb();
         }
 
-        self.log.debug({ user: obj.user }, 'Adding network for user');
+        log.debug({ user: obj.user }, 'Adding network for user');
 
         var arg = {
             uuid: obj.user.uuid,
@@ -241,7 +283,7 @@ function DefaultFabricSetupStream(opts) {
             } else {
                 msg = 'found existing default overlay for user';
             }
-            self.log.info({ obj: obj }, msg);
+            log.info({ obj: obj }, msg);
             self.push(obj);
 
             return cb();
-- 
2.21.0

