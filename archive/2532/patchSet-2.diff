commit 846950f981a3a776626e495e50efdc65ff2ffa41 (refs/changes/32/2532/2)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-09-08T13:17:01-07:00 (2 years, 1 month ago)
    
    DOCKER-1100 Hung docker cp connections cause sdc-docker descriptor growth

diff --git a/lib/endpoints/containers.js b/lib/endpoints/containers.js
index 0819881..f2f7c66 100644
--- a/lib/endpoints/containers.js
+++ b/lib/endpoints/containers.js
@@ -18,6 +18,7 @@ var getVm = common.getVm;
 var getVmInState = common.getVmInState;
 var validate = require('../validate');
 
+var DATA_TIMEOUT_MS = 60 * 2 * 1000;
 
 
 // ---- internal support stuff
@@ -760,7 +761,6 @@ function containerReadArchive(req, res, next) {
         var statHeader = new Buffer(JSON.stringify(
             extras.containerPathStat)).toString('base64');
 
-
         readSocket.on('connect', function () {
             res.setHeader('content-type', 'application/tar');
             res.setHeader('x-docker-container-path-stat', statHeader);
@@ -771,8 +771,45 @@ function containerReadArchive(req, res, next) {
                     opts.vm.uuid, e.message);
             });
 
+            /*
+             * Hung connections, i.e. they stop emitting 'data' events without
+             * closing, can not only cause unwanted growth in the number of
+             * used file descriptors but also make the tar process on the
+             * cn-agent/compute-node side to inadvertently prevent a zone from
+             * shutting down.
+             *
+             * To mitigate this, we will create a timer and reset it every time
+             * we receive a data event. If/when the timer fires, we disconnect
+             * the read socket.
+             */
+
+            var dataTimer;
+
+            resetDataTimeout();
+
+            readSocket.on('data', function () {
+                resetDataTimeout();
+            });
+
+            readSocket.on('end', function () {
+                clearTimeout(dataTimer);
+            });
+
             readSocket.pipe(res);
             next();
+            return;
+
+
+            function resetDataTimeout(streamProc) {
+                clearTimeout(dataTimer);
+                dataTimer = setTimeout(function () {
+                    log.error('containerReadArchive: '
+                            + 'data timeout after %s sec; '
+                            + 'terminating archive stream',
+                            DATA_TIMEOUT_MS / 1000);
+                    readSocket.destroy();
+                }, DATA_TIMEOUT_MS).unref();
+            }
         });
     }
 }
