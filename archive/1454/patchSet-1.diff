From d53514b993f5d7eccebb479d2b62898a98fce23e Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Fri, 20 Jan 2017 23:32:21 +0000
Subject: [PATCH] MORAY-389 Limit which modules triggers are allowed to require

---
 lib/objects/common.js | 64 +++++++++++++++++++++++++++++++++++--------
 1 file changed, 53 insertions(+), 11 deletions(-)

diff --git a/lib/objects/common.js b/lib/objects/common.js
index e3a0e60..6eea37a 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -18,6 +18,7 @@ var LRU = require('lru-cache');
 var once = require('once');
 var vasync = require('vasync');
 var clone = require('clone');
+var vm = require('vm');
 
 var dtrace = require('../dtrace');
 
@@ -691,6 +692,55 @@ function stdOutput(req) {
 }
 
 
+/*
+ * Some Moray triggers used the same "microtime" and "crc" modules that
+ * Moray used. We allow those triggers to continue working by passing
+ * our own require() function into their environment and restricting them
+ * to only loading those modules.
+ */
+function guardedRequire(name) {
+    if (name !== 'microtime' && name !== 'crc') {
+        throw new Error('"' + name + '" is not a permitted module');
+    }
+
+    return require(name);
+}
+
+
+function evalTrigger(f) {
+    /*
+     * We evaluate triggers in their own environment, to avoid leaking
+     * functions and variables from our own. Several things are passed
+     * into the environment of the evaluated triggers:
+     *
+     * - Error, so that all returned errors will be 'instanceof Error'
+     * - require, to allow backwards-compatibility for triggers that
+     *   used Moray's modules.
+     */
+    var ctx = {
+        Error: Error,
+        require: guardedRequire
+    };
+
+    vm.runInNewContext('fn = ' + f, ctx, 'moray-trigger');
+
+    assert.func(ctx.fn, 'trigger');
+
+    /*
+     * We store the trigger in an object so that when it gets called
+     * its 'this' value points to our object instead of to the scope
+     * in which it was called.
+     */
+    var trigger = { run: ctx.fn };
+
+    function safetyNet(arg, cb) {
+        trigger.run(arg, once(cb));
+    }
+
+    return (safetyNet);
+}
+
+
 function loadBucket(req, cb) {
     assert.object(req, 'req');
     assert.object(req.bucket, 'req.bucket');
@@ -743,21 +793,12 @@ function loadBucket(req, cb) {
         if (!row) {
             cb(new BucketNotFoundError(req.bucket.name));
         } else {
-            function parseFunctor(f) {
-                var fn;
-                assert.ok(eval('fn = ' + f));
-                function safetyNet(arg, _cb) {
-                    return (fn(arg, once(_cb)));
-                }
-                return (safetyNet);
-            }
-
             var r = row;
             req.bucket = {
                 name: r.name,
                 index: JSON.parse(r.index),
-                pre: JSON.parse(r.pre).map(parseFunctor),
-                post: JSON.parse(r.post).map(parseFunctor),
+                pre: JSON.parse(r.pre).map(evalTrigger),
+                post: JSON.parse(r.post).map(evalTrigger),
                 options: JSON.parse(r.options || {}),
                 mtime: new Date(r.mtime)
             };
@@ -979,6 +1020,7 @@ module.exports = {
     buildWhereClause: buildWhereClause,
     cacheKey: cacheKey,
     checkEtag: checkEtag,
+    evalTrigger: evalTrigger,
     loadBucket: loadBucket,
     shootdownBucket: shootdownBucket,
     verifyBucket: verifyBucket,
-- 
2.21.0

