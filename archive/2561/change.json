{"project":"joyent/illumos-joyent","branch":"master","id":"I8527b64bc3a2da06417e288e7553ecbce94eacaa","number":"2561","subject":"OS-6337 Add support for splice() system call to LX brand zones Reviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e Reviewed by: Patrick Mooney \u003cpatrick.mooney@joyent.com\u003e Reviewed by: Robert Mustacchi \u003crm@joyent.com\u003e Approved by: Patrick Mooney \u003cpatrick.mooney@","owner":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"url":"https://cr.joyent.us/2561","commitMessage":"OS-6337 Add support for splice() system call to LX brand zones\nReviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e\nReviewed by: Patrick Mooney \u003cpatrick.mooney@joyent.com\u003e\nReviewed by: Robert Mustacchi \u003crm@joyent.com\u003e\nApproved by: Patrick Mooney \u003cpatrick.mooney@joyent.com\u003e\n","createdOn":1505337811,"lastUpdated":1507161534,"open":false,"status":"MERGED","comments":[{"timestamp":1505337811,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 1."},{"timestamp":1505340221,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 1:\n\n(3 comments)"},{"timestamp":1505340966,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 1:\n\n(2 comments)"},{"timestamp":1505390062,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 1:\n\nBased on a private conversation yesterday with Robert, I took another look as the splice flags and I figured out the non-blocking scenario, so I will fix that as well."},{"timestamp":1505410735,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 1:\n\nI\u0027ve updated the code to try to address the comments so far."},{"timestamp":1505410743,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 2."},{"timestamp":1505417326,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 2:\n\n(6 comments)"},{"timestamp":1505427761,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 2:\n\n(6 comments)"},{"timestamp":1505427796,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 3."},{"timestamp":1505430728,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1505433803,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(2 comments)\n\nIs it correct that if we have a non-blocking output file that we then fail to write to, we\u0027ll then drop data?"},{"timestamp":1505480744,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 3:\n\n(4 comments)\n\nRobert wrote: \"Is it correct that if we have a non-blocking output file that we then fail to write to, we\u0027ll then drop data?\"\n\nIf by \"drop data\" you mean \"return an error from the syscall\", then yes. I\u0027ve tried to point out that I think Linux could also consume data out of an input pipe but then sometime later the write side could encounter an error, but it is hard to prove this definitively. I\u0027d like to try handle as many cases as possible, but I don\u0027t see how we can guarantee that we can never hit an error on the write side."},{"timestamp":1505480758,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 4."},{"timestamp":1505482768,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 4:\n\nTo follow up on the issue of a write failing after we read from the input pipe. I can think of a couple of different ways to reduce the exposure. First, if the write side is not a pipe then we know the read side must be a pipe. I think the pipe to pipe case is already handled fine.\n\n1) I could handle this as a special case and expose some of the fifo implementation into this code and do something like we do with the I_PEEK ioctl. That is, I could get data from the input pipe without consuming it. Once the write succeeded, I could do a normal read to consume the data from the input pipe and discard it.\n\n2) If the write returns EAGAIN, I could stay in the kernel, sleep for a short time, then retry. I could do that until the write succeeded or the syscall was interrupted."},{"timestamp":1505486203,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 4:\n\nI\u0027m going to code up that first option from my previous comment so we can see that and review it. It seems like it is a reasonable solution to this issue of failing writes."},{"timestamp":1505499365,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 4:\n\nI\u0027ve written a new test case to error on the splice write. I\u0027ve updated the code to not consume the data from the pipe unless the write succeeds. The test passes on Linux and lx."},{"timestamp":1505499377,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 5."},{"timestamp":1505509188,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5:\n\n(2 comments)\n\nThanks for a lot of the changes here. I think this is pretty close to what we want."},{"timestamp":1505510132,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 5:\n\n(1 comment)"},{"timestamp":1505511348,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5:\n\n(1 comment)"},{"timestamp":1505513046,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 6."},{"timestamp":1505513107,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 6:\n\nSince there seem to be no objections to the new approach, I\u0027ve tightened up the code a bit and it\u0027s ready for a more thorough review."},{"timestamp":1505924526,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 6: Code-Review+1\n\n(1 comment)\n\nIn general, I think this is fine. I\u0027m still a little worried about the case where we do a write to a non-blocking socket, but I think in the multiple writer case it\u0027s going to be hard to do this correctly."},{"timestamp":1505926048,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 6:\n\n(1 comment)"},{"timestamp":1505926061,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 7."},{"timestamp":1505926162,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 7: Code-Review+1"},{"timestamp":1505997730,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 7:\n\nTesting notes in the ticket."},{"timestamp":1506117266,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 7:\n\nPatrick identified a potential panic which I confirmed with a new test. If we have a pipe with some data in it and splice it to ourselves, we panic with a recursive mutex enter because we\u0027re holding the input fifo lock while we try to write."},{"timestamp":1506354475,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 8."},{"timestamp":1506467838,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 9."},{"timestamp":1506515608,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 10."},{"timestamp":1506540346,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 10:\n\n(3 comments)\n\nBig-picture question: is splice() one we may wish to promote, or is it a gross Linux-ism that deserves to stay in LX hell?"},{"timestamp":1506618102,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 10:\n\n(3 comments)\n\nFor your general question, splice seems pretty ugly to me personally and I\u0027d prefer to avoid polluting the illumos interfaces with it unless there was a compelling reason."},{"timestamp":1506618396,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 10: Code-Review+1\n\n(3 comments)\n\nMy concerns are now all addressed."},{"timestamp":1506640830,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 10:\n\n(7 comments)"},{"timestamp":1506691981,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 10:\n\n(7 comments)"},{"timestamp":1506691994,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 11."},{"timestamp":1506696666,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 11: Code-Review+1\n\nRe-uppping my +1, since change 11 is only Patrick-driven feedback."},{"timestamp":1506697401,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 11: Code-Review+1"},{"timestamp":1506988430,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 11:\n\n(1 comment)"},{"timestamp":1507032958,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 11:\n\n(1 comment)"},{"timestamp":1507041041,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 11:\n\n(1 comment)\n\nIn general, this looks good. However, the new addition of the reader hold flag may have an interesting interplay with that. What happens if we finish the read, mark the read hold and then before we can do the consume (because the write takes a while), we get an ioctl that converts the fifo to streams mode? Is there something that prevents that? Do we need to hook into fifo_fastoff() and friends to have them wait while this is ongoing and possibly signal those waiters?"},{"timestamp":1507047502,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 11:\n\nAfter looking into this, it seems like the cleanest approach is to leverage the STAYFAST flag when we have readers blocked because the input is \"on-loan\". I have made the changes to do that."},{"timestamp":1507047514,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 12."},{"timestamp":1507048016,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 12: Code-Review+1\n\n(1 comment)"},{"timestamp":1507048184,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Patch Set 12:\n\n(1 comment)"},{"timestamp":1507141613,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 12: Code-Review+1"},{"timestamp":1507146053,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 12: Code-Review+1"},{"timestamp":1507146596,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 12: Integration-Approval+1"},{"timestamp":1507155240,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 13: Patch Set 12 was rebased."},{"timestamp":1507159237,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 13:\n\nDon\u0027t forget amending the commit message..."},{"timestamp":1507161403,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Uploaded patch set 14: Commit message was updated."},{"timestamp":1507161534,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Jerry Jelinek"}],"currentPatchSet":{"number":"14","revision":"8527b64bc3a2da06417e288e7553ecbce94eacaa","parents":["94e74f1ae13f8186ead6d7e6d2e4c93275126448"],"ref":"refs/changes/61/2561/14","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1507161403,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507048016,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507141613,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507146053,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1507146596,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"SUBM","value":"1","grantedOn":1507161534,"by":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":11,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":491,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":17,"deletions":-8},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":4,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":522,"sizeDeletions":-17},"patchSets":[{"number":"1","revision":"0249c4df95bda94c191a1ecdbaff4206a43f3bbb","parents":["b34e44c2aefdd578084f80084c5ad0566f74694f"],"ref":"refs/changes/61/2561/1","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505337811,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":47,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Sendfile goes and limits some of the sizing that can be done here. Should be doing that for sockets as well or are there other types of v_type entries that have different behavior that we should consider?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":111,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This bit made me wonder if we should be more aggressive about the kinds of things that one can and can\u0027t do this from or if other things should be considered in this group. For example, if one end is a door, port, etc. how should that react in these cases?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":111,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I can add checks for vnode types that a Linux app wouldn\u0027t use and that we won\u0027t accept here, like doors."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":215,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What if another process was writing to the output file in the intervening time? Couldn\u0027t that cause that to fill up? Especially since there\u0027s nothing that stops the writable amount to change while we\u0027re not looking. Consider a socket that we\u0027re writing to that something has put in non-blocking mode. If this exceeds the writable amount there, then we\u0027d lose that. And once this happens, haven\u0027t we effectively discarded data from the read end?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":215,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"It\u0027s not very easy to confirm this, but I have to believe that Linux likely suffers from the same issue. We\u0027re writing to an fd and that can fail for lots of reasons. Maybe the VM tricks in linux will somehow prevent the data from being consumed out of the source pipe in this case, but we really don\u0027t have that option in smartos. I think as a practical matter, this won\u0027t be a concern since this is kind of an unrealistic scenario which would be hard to build a real application around. However, I do want to try our best to not consume data that we know we can lose, so I\u0027ll see if there is some way to improve the checking on the can_write side for sockets."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":236,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":246,"sizeDeletions":-9},{"number":"2","revision":"f93e3abbb5d97ea5a63aa651e20eef2ca44c938b","parents":["b34e44c2aefdd578084f80084c5ad0566f74694f"],"ref":"refs/changes/61/2561/2","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505410743,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":42,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Perhaps prefix this name with lx_\u003csomething\u003e to make stuff like fbt clearer?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":42,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":65,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Does Linux reject this sort of condition outright, rather than clamping to the maximum value?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":65,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I was trying to pre-check for the same conditions which would error out in the write path, but I was being lazy. I\u0027ve updated the code to be more correct."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":141,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Is r_off the correct size for both 32-bit and 64-bit?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":141,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"For Linux this is an loff_t which turns into a long long, so I believe the answer is yes."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":146,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"This might look a little more clean as a switch-case"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":146,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":179,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Same switch-case and 32/64-bit concerns as above."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":179,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":225,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Toss this in a #define maybe?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":225,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":294,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":304,"sizeDeletions":-9},{"number":"3","revision":"8d91011d5cd7a2714050b7089cc0c9ac39a48af1","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/3","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505427796,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":77,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I\u0027m not sure these two checks can be ordered in a way that ensures an adequately small value.  (I don\u0027t think either are guaranteed to be smaller than the other)\n\nI think a pair of serial MIN() assignments would be adequate to clamp them if the above check doesn\u0027t pass:\n\nif (fileoff \u003e\u003d curproc-\u003ep_fsz_ctl ||\n    fileoff \u003e\u003d OFFSET_MAX(fp_out)) {\n        sz \u003d 0;\n} else {\n        /* XXX: clamping comment */\n        sz \u003d MIN(sz, (size_t)curproc-\u003ep_fsz_ctl - fileoff);\n        sz \u003d MIN(sz, (size_t)OFFSET_MAX(fp_out) - fileoff);\n}"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":77,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":86,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If TCP is non-blocking it\u0027ll definitely return EAGAIN during writes or short writes."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":86,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I\u0027ve rewritten the comment."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":150,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"The found_pipe assignment can be moved above \u0027case VSOCK:\u0027 with a /* FALLTHROUGH */"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":150,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":152,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Maybe consider using \u0027default:\u0027 for the EBADF case and explicitly spelling out the allowed v_types for paranoia?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":152,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Yeah, I agree with Patrick here."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":152,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":307,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":317,"sizeDeletions":-9},{"number":"4","revision":"0a6be43818bab51e2f0976f6ef35943db694023a","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/4","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505480758,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":303,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":313,"sizeDeletions":-9},{"number":"5","revision":"92c2d252986e6f8ac4d8181b73b1f6eb9c8f2185","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/5","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505499377,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":171,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Don\u0027t we need to hold the FIFO lock between the read and consume? Otherwise what makes sure that something else doesn\u0027t come in and read the data in the interim?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":184,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So this can only happen because we drop the lock and someone else can come in and do a read at the same time, right?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":184,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"correct. I wanted to get this up for feedback on the acceptability of this approach, but if there are no overall objections, then I\u0027ll change the code to hold the lock the whole time"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":184,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This seems like a good way to try and address that problem."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":435,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":445,"sizeDeletions":-9},{"number":"6","revision":"b4916402d250599e80e2b8e042a81ea69780ce6f","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/6","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505513046,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1505924526,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}}],"comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":156,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Do we believe this must always succeed because we\u0027re holding the lock and have the data here? Maybe worth adding a comment to note that?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":156,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I added a comment which hopefully explains this."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":439,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":449,"sizeDeletions":-9},{"number":"7","revision":"3eb67e8c3b64e34b7c40abfe2abca4634ee35f52","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/7","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1505926061,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1505926162,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":445,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":455,"sizeDeletions":-9},{"number":"8","revision":"060afee40166e2d49be17a7da2e832b9d9bc2b67","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/8","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1506354475,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":459,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":6,"deletions":0},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":476,"sizeDeletions":-9},{"number":"9","revision":"15436edf5ab2c0dbc406ae1fdd43ebcc1282d137","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/9","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1506467838,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":464,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":15,"deletions":-1},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":490,"sizeDeletions":-10},{"number":"10","revision":"8fe54c4986841c747208f97691785749c47ec1d5","parents":["766f80363ee325875bdcd79484e9c04427d17aec"],"ref":"refs/changes/61/2561/10","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1506515608,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1506618396,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":55,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Could lift this up to the call point and eliminate the bsz param."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":55,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I think the code is clearer the way it is, so I left this alone."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":68,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Should these be done under fn_lock?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":68,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"done"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":106,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"style nit: Maybe worth shuffling the booleans to the end of the arguments like other control flag functionality."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":106,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"changed"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":117,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Perhaps add an ASSERT() to ensure that f_vnode-\u003ev_type \u003d\u003d VFIFO"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":117,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"added"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":122,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Is there any reason to believe that fast-mode for the fifo could have been disabled between the first check and now?  If we\u0027re worried about such a thing occurring, we could perhaps make pipe_in a \u0027boolean_t *\u0027 and force it to B_FALSE, falling back to the traditional VOP_READ style."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":122,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"That would imply an internal programming error on our part. If the fifo is switched out of pipe mode, it will no longer behave exactly like a pipe (as I know from recent experience), I added a sanity check for this but trying to use the normal read path will not always yield the expected behavior and this should never happen unless we make a mistake someplace else in our code."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":166,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Should we be at all paranoid about ensuring bp !\u003d NULL?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":166,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"As I noted in the comment, this code is derived from the PEEK code which has no such paranoia, so I\u0027d say the answer is \"no\"."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":248,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"ARGSUSED(flags) or something like it, given the comment below."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":248,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"The flags argument is used at line 373. I can try to reword the comment if its not clear, but it already does say that we check SPLICE_F_NONBLOCK."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":248,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Gerrit + Firefox means Command-F (find string) doesn\u0027t work well, or I\u0027d have seen this myself.  All set here."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":288,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Does linux treat an \"in\" socket like it does a pipe (i.e. don\u0027t actually read the data unless the write succeeds)?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":288,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"It doesn\u0027t really matter for us since an \"in\" socket means the output must be a pipe and we already do the basic work to ensure that we can write the consumed amount of data into the output pipe via the lx_spl_wr_sz function."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":288,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"OK."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":389,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Shouldn\u0027t the fifonode_t checks be done with the fn_lock held?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":389,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I see no reason for a lock on the fp_in check, but I added locks for the fp_out check."},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","line":734,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Strong statement.  It appears lx_splice.c contains the only code to clear or set FIFORDBLOCK, though.  Either here or in fifonode.h, mention that (at least of as now) FIFORDBLOCK is employed solely by splice() for LX zones?"},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","line":734,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"We have taken the approach that the generic code does not reference any particular brand implementation so I\u0027d prefer not to start that here."},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","line":734,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":467,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":15,"deletions":-2},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":493,"sizeDeletions":-11},{"number":"11","revision":"4a5d76c8f84534ca139987161dc5f453cdeff05c","parents":["5ae84a5233b723c890288b775cb5317db2e54d61"],"ref":"refs/changes/61/2561/11","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1506691994,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1506697401,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1506696666,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":294,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you clarify why it doesn\u0027t?"},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":294,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"I cannot describe the exact behavior differences. We know that turning off FIFOFAST puts the fifo into streams mode. Normally this is done when an application wants to use certain STREAMS ioctls on the fifo. We had explored using this mode in lx so that we could use streams to change the size of the fifo, but when we did that, various things started to break in subtle ways in nightly. See OS-6275. We backed out that change and went with a different approach. So, our experience is that streams-mode is not 100% compatible with the normal fifo pipe behavior, but we never spent the time to determine the exact differences."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":294,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. Thanks for the clarification."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":484,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":15,"deletions":-2},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":510,"sizeDeletions":-11},{"number":"12","revision":"bfcae91235ef05da3fb7a1e89052c64d7412bfc0","parents":["914d7a738527f83b1e811b066563842839f125a7"],"ref":"refs/changes/61/2561/12","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1507047514,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507048016,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507141613,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1507146596,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507146053,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":132,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"At first, I was going to comment on the fact that we were checking the FIFOFAST flag which fifo_stayfast_enter does. But maybe it\u0027s not a bad thing to do given that it seems that the fifo_stayfast_enter will actually block. I think that blocking is probably reasonable, but wanted to make sure we were aware."},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","line":132,"reviewer":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"message":"Yes, I think this is the way the check should be handled and I noted in the comment here that we might drop the lock (implying that we blocked). I could make that explicit in the comment. In reality I think this is mostly a non-issue."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":491,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":17,"deletions":-8},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":4,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":522,"sizeDeletions":-17},{"number":"13","revision":"6c146242a9a4d1e34f1e2f10497694dc3872d75b","parents":["94e74f1ae13f8186ead6d7e6d2e4c93275126448"],"ref":"refs/changes/61/2561/13","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1507155240,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"TRIVIAL_REBASE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507048016,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507141613,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1507146596,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507146053,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":491,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":17,"deletions":-8},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":4,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":522,"sizeDeletions":-17},{"number":"14","revision":"8527b64bc3a2da06417e288e7553ecbce94eacaa","parents":["94e74f1ae13f8186ead6d7e6d2e4c93275126448"],"ref":"refs/changes/61/2561/14","uploader":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"createdOn":1507161403,"author":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507048016,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"SUBM","value":"1","grantedOn":1507161534,"by":{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507141613,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1507146596,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1507146053,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":11,"deletions":0},{"file":"usr/src/lib/brand/lx/testing/ltp_skiplist","type":"MODIFIED","insertions":1,"deletions":-5},{"file":"usr/src/uts/common/brand/lx/os/lx_syscall.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/sys/lx_misc.h","type":"MODIFIED","insertions":3,"deletions":0},{"file":"usr/src/uts/common/brand/lx/sys/lx_syscalls.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/uts/common/brand/lx/syscall/lx_rw.c","type":"MODIFIED","insertions":2,"deletions":-2},{"file":"usr/src/uts/common/brand/lx/syscall/lx_splice.c","type":"ADDED","insertions":491,"deletions":0},{"file":"usr/src/uts/common/fs/fifofs/fifovnops.c","type":"MODIFIED","insertions":17,"deletions":-8},{"file":"usr/src/uts/common/sys/fs/fifonode.h","type":"MODIFIED","insertions":4,"deletions":0},{"file":"usr/src/uts/intel/Makefile.files","type":"MODIFIED","insertions":1,"deletions":0}],"sizeInsertions":522,"sizeDeletions":-17}],"allReviewers":[{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},{"name":"Jerry Jelinek","email":"jerry.jelinek@joyent.com","username":"jjelinek"}]}