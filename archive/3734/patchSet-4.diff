commit 02daf34cb2b4b9a0a178d5ffb21665834b6a91e4 (refs/changes/34/3734/4)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-03-29T14:09:51-04:00 (1 year, 6 months ago)
    
    TRITON-287 vmapi tests should use network names explicitly

diff --git a/test/common.js b/test/common.js
index 1c200db..56ccc73 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -230,6 +230,31 @@ function waitForValue(url, key, value, options, callback) {
     performCheck();
 }
 
+/*
+ * Given an array of networks (most likely returned from napi GET /networks),
+ * find the admin and external network and return them as an object.  This
+ * function will throw if neither network is found, or multiple networks with
+ * the name external or admin are found.
+ */
+function extractAdminAndExternalNetwork(networks) {
+    assert.arrayOfObject(networks, 'networks');
+
+    var ret = {};
+    networks.forEach(function forEachNetwork(network) {
+        assert.string(network.name, 'network.name');
+
+        if (['admin', 'external'].indexOf(network.name) >= 0) {
+            assert(!ret.hasOwnProperty(network.name), util.format(
+                'network defined more than once: "%s"', network.name));
+            ret[network.name] = network;
+        }
+    });
+    assert.object(ret.admin, 'admin network not found');
+    assert.object(ret.external, 'external network not found');
+
+    return ret;
+}
+
 module.exports = {
     setUp: setUp,
     checkHeaders: checkHeaders,
@@ -238,5 +263,6 @@ module.exports = {
     config: config,
     ifError: ifError,
     VMS_LIST_ENDPOINT: VMS_LIST_ENDPOINT,
-    waitForValue: waitForValue
+    waitForValue: waitForValue,
+    extractAdminAndExternalNetwork: extractAdminAndExternalNetwork
 };
diff --git a/test/vms.changefeed.test.js b/test/vms.changefeed.test.js
index 179c6fc..05830c7 100644
--- a/test/vms.changefeed.test.js
+++ b/test/vms.changefeed.test.js
@@ -21,6 +21,8 @@ var client;
 var IMAGE = 'fd2cc906-8938-11e3-beab-4359c665ac99';
 var CUSTOMER = common.config.ufdsAdminUuid;
 var NETWORKS = null;
+var ADMIN_NETWORK = null;
+var EXTERNAL_NETWORK = null;
 var SERVER = null;
 var VM = null;
 var CALLER = {
@@ -212,6 +214,9 @@ exports.napi_networks_ok = function (t) {
         t.ok(Array.isArray(networks), 'networks is Array');
         t.ok(networks.length > 1, 'more than 1 network found');
         NETWORKS = networks;
+        var adminExtNetworks = common.extractAdminAndExternalNetwork(networks);
+        ADMIN_NETWORK = adminExtNetworks.admin;
+        EXTERNAL_NETWORK = adminExtNetworks.external;
         t.done();
     });
 };
@@ -229,7 +234,7 @@ exports.create_vm = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
@@ -432,7 +437,7 @@ exports.listen_for_nics = function (t) {
     t.expect(5);
     var params = {
         action: 'add_nics',
-        networks: [ { uuid: NETWORKS[1].uuid } ]
+        networks: [ { uuid: EXTERNAL_NETWORK.uuid } ]
     };
 
     var opts = createOpts('/vms/' + VM.uuid + '?action=add_nics', params);
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index a292f0f..18cfee6 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -37,6 +37,9 @@ var nicMac;
 var IMAGE = 'fd2cc906-8938-11e3-beab-4359c665ac99';
 var CUSTOMER = common.config.ufdsAdminUuid;
 var NETWORKS = null;
+var ALL_NETWORKS = null;
+var ADMIN_NETWORK = null;
+var EXTERNAL_NETWORK = null;
 var VALID_NIC; // Create a new NIC with valid parameters for a later test
 var FAKE_NETWORK_UUID = 'caaaf10c-a587-49c6-9cf6-9b0a14ba960b';
 var FAKE_NETWORK_NAME = 'fakeNetworkName';
@@ -159,7 +162,7 @@ function createTestVms(cb) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 128,
@@ -312,6 +315,9 @@ exports.napi_networks_ok = function (t) {
         t.ok(Array.isArray(networks), 'networks is Array');
         t.ok(networks.length > 1, 'more than 1 network found');
         NETWORKS = networks;
+        var adminExtNetworks = common.extractAdminAndExternalNetwork(networks);
+        ADMIN_NETWORK = adminExtNetworks.admin;
+        EXTERNAL_NETWORK = adminExtNetworks.external;
         t.done();
     });
 };
@@ -645,7 +651,7 @@ exports.create_vm_locality_not_ok = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
@@ -678,7 +684,7 @@ exports.create_vm_tags_not_ok = function (t) {
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
             server_uuid: SERVER.uuid,
-            networks: [ { uuid: NETWORKS[0].uuid } ],
+            networks: [ { uuid: ADMIN_NETWORK.uuid } ],
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
             ram: 64,
@@ -811,7 +817,7 @@ exports.create_vm = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
@@ -1087,9 +1093,8 @@ exports.create_vm_with_already_provisioned_ip = function (t) {
         common.checkHeaders(t, res.headers);
         t.ok(body, 'got provisioned vm');
 
-        // This is depending on NETWORKS[0] being the admin network
         ips = body.nics.filter(function (nic) {
-            return nic.nic_tag === NETWORKS[0].nic_tag;
+            return nic.nic_tag === ADMIN_NETWORK.nic_tag;
         }).map(function (nic) {
             return nic.ip;
         });
@@ -1111,7 +1116,7 @@ exports.create_vm_with_already_provisioned_ip = function (t) {
 
         vm.networks = [
             {
-                ipv4_uuid: NETWORKS[0].uuid,
+                ipv4_uuid: ADMIN_NETWORK.uuid,
                 ipv4_ips: [ ips[0] ]
             }
         ];
@@ -1159,7 +1164,7 @@ exports.create_vm_with_already_provisioned_ip = function (t) {
 exports.add_nics_with_networks = function (t) {
     var params = {
         action: 'add_nics',
-        networks: [ { uuid: NETWORKS[1].uuid } ]
+        networks: [ { uuid: EXTERNAL_NETWORK.uuid } ]
     };
 
     var opts = createOpts(vmLocation, params);
@@ -1191,7 +1196,7 @@ exports.check_add_nics_with_network_nics_running = function (t) {
     var query = {
         belongs_to_uuid: newUuid,
         belongs_to_type: 'zone',
-        nic_tag: NETWORKS[1].nic_tag
+        nic_tag: EXTERNAL_NETWORK.nic_tag
     };
 
     waitForNicState(t, query, 'running', function (err) {
@@ -1206,8 +1211,8 @@ exports.add_nics_with_macs = function (t) {
         belongs_to_uuid: newUuid,
         belongs_to_type: 'zone',
         owner_uuid: CUSTOMER,
-        network_uuid: NETWORKS[1].uuid,
-        nic_tag: NETWORKS[1].nic_tag,
+        network_uuid: EXTERNAL_NETWORK.uuid,
+        nic_tag: EXTERNAL_NETWORK.nic_tag,
         status: 'provisioning'
     };
 
@@ -1252,7 +1257,7 @@ exports.check_add_nics_with_macs_nics_running = function (t) {
     var query = {
         belongs_to_uuid: newUuid,
         belongs_to_type: 'zone',
-        nic_tag: NETWORKS[1].nic_tag
+        nic_tag: EXTERNAL_NETWORK.nic_tag
     };
 
     waitForNicState(t, query, 'running', function (err) {
@@ -1275,7 +1280,7 @@ exports.remove_nics = function (t) {
         t.equal(body.nics.length, 3, 'body.nics has length 3');
 
         var macs = body.nics.filter(function (nic) {
-            return nic.nic_tag === NETWORKS[1].nic_tag;
+            return nic.nic_tag === EXTERNAL_NETWORK.nic_tag;
         }).map(function (nic) {
             return nic.mac;
         });
@@ -1318,7 +1323,7 @@ exports.check_remove_nics_removed = function (t) {
         query: {
             belongs_to_uuid: newUuid,
             belongs_to_type: 'zone',
-            nic_tag: NETWORKS[1].nic_tag
+            nic_tag: EXTERNAL_NETWORK.nic_tag
         }
     }, function (err, req, res, nics) {
         common.ifError(t, err);
@@ -1912,7 +1917,7 @@ exports.create_nonautoboot_vm = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
@@ -2143,7 +2148,7 @@ exports.create_vm_with_package = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: pkgId
     };
@@ -2336,7 +2341,7 @@ exports.provision_network_names = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { name: NETWORKS[0].name } ],
+        networks: [ { name: ADMIN_NETWORK.name } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
@@ -2430,7 +2435,7 @@ exports.invalid_firewall_rules = function (t) {
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
             server_uuid: SERVER.uuid,
-            networks: [ { name: NETWORKS[0].uuid } ],
+            networks: [ { name: ADMIN_NETWORK.uuid } ],
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
             ram: 64,
@@ -2468,7 +2473,7 @@ exports.create_docker_vm = function (t) {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
         server_uuid: SERVER.uuid,
-        networks: [ { uuid: NETWORKS[0].uuid } ],
+        networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
         ram: 64,
