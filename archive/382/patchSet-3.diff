From 554d6a7905101bf3ca7725613f90c476875a8ad3 Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Tue, 30 Aug 2016 12:46:43 +0200
Subject: [PATCH] TOOLS-1537 sdcadm create times out checking instance health

---
 lib/procedures/shared.js |  48 +++++++++++++++++--
 test/create.test.js      | 100 ++++++++++++++++++++++++++++-----------
 2 files changed, 117 insertions(+), 31 deletions(-)

diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index b6a2845..1dd0d72 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -645,7 +645,6 @@ function destroyTmpVM(arg, next) {
 function createInstance(arg, next) {
     var progress = arg.opts.progress;
     var sdcadm = arg.opts.sdcadm;
-
     progress('Creating "%s" instance', arg.alias);
     var iOpts = {
         params: {
@@ -671,9 +670,52 @@ function createInstance(arg, next) {
             uuid: inst_.uuid,
             instance: inst_.uuid,
             server: arg.change.server,
-            type: arg.change.service.type
+            type: arg.change.service.type,
+            version: arg.change.image.version,
+            image: arg.change.image.uuid,
+            hostname: null,
+            server_ip: null
         };
-        return next();
+
+        sdcadm.cnapi.getServer(arg.change.server,  function (err2, server) {
+            if (err2) {
+                return next(
+                    new errors.SDCClientError(err2, 'cnapi'));
+            }
+
+            var nics = server.sysinfo['Network Interfaces'] || {};
+            var adminIp = Object.keys(nics).map(function (nicName) {
+                return nics[nicName];
+            }).filter(function (nic) {
+                return nic['NIC Names'].indexOf('admin') !== -1;
+            }).map(function (nic) {
+                return nic.ip4addr;
+            })[0];
+
+            arg.change.inst.hostname = server.hostname;
+            arg.change.inst.server_ip = adminIp;
+
+            sdcadm.vmapi.getVm({
+                uuid: inst_.uuid
+            }, function (err3, vm) {
+                if (err3) {
+                    return next(
+                        new errors.SDCClientError(err3, 'vmapi'));
+                }
+
+                var vmAdminIp = vm.nics.filter(function (nic) {
+                    return nic.nic_tag === 'admin';
+                }).map(function (nic) {
+                    return nic.ip;
+                })[0];
+
+                if (vmAdminIp) {
+                    arg.change.inst.ip = vmAdminIp;
+                }
+
+                return next();
+            });
+        });
     });
 }
 
diff --git a/test/create.test.js b/test/create.test.js
index ca76f66..ad0ec54 100644
--- a/test/create.test.js
+++ b/test/create.test.js
@@ -5,16 +5,18 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 
 var test = require('tape').test;
 var exec = require('child_process').exec;
+var util = require('util');
 
 
 var HEADNODE_UUID = '';
-var NEW_NAPI_UUID = '';
+var NAPI_UUID = '';
+var NAPI_UUID_2 = '';
 var NUM_NAPI = 0;
 
 
@@ -26,22 +28,33 @@ function getNumNapi(cb) {
         }
 
         var lines = stdout.split('\n');
-        return cb(null, lines.length);
+        cb(null, lines.length);
     });
 }
 
 
+function getLatestImgAvail(cb) {
+    var cmd = 'updates-imgadm list name=napi --latest --json';
+    exec(cmd, function (err, stdout, stderr) {
+        if (err) {
+            return cb(err);
+        }
+
+        var latestImgUuid = JSON.parse(stdout.trim())[0].uuid;
+        cb(null, latestImgUuid);
+    });
+}
+
 test('setup', function (t) {
-    var cmd = 'sdc-cnapi /servers?alias=headnode | json -H';
+    var cmd = 'sysinfo | json UUID';
 
     exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
-
-        HEADNODE_UUID = JSON.parse(stdout)[0].uuid;
+        t.ifError(err, 'CNAPI error');
+        t.equal(stderr, '', 'Empty stderr');
+        HEADNODE_UUID = stdout.trim();
 
         getNumNapi(function (err2, numNapi) {
-            t.ifError(err2);
+            t.ifError(err2, 'vmadm list error');
             t.ok(numNapi >= 1, 'at least one napi instance exists');
             NUM_NAPI = numNapi;
 
@@ -53,21 +66,21 @@ test('setup', function (t) {
 
 test('sdcadm create --help', function (t) {
     exec('sdcadm create --help', function (err, stdout, stderr) {
-        t.ifError(err);
+        t.ifError(err, 'Execution error');
 
         t.notEqual(stdout.indexOf('sdcadm create <svc>'), -1);
-        t.equal(stderr, '');
+        t.equal(stderr, '', 'Empty stderr');
 
         t.end();
     });
 });
 
 
+// Mandatory --server arg:
 test('sdcadm create napi', function (t) {
     exec('sdcadm create napi', function (err, stdout, stderr) {
-        t.ok(err);
+        t.ok(err, 'Execution error');
 
-        t.equal(stdout, '');
         t.notEqual(stderr.indexOf('Must specify server uuid'), -1);
 
         t.end();
@@ -75,13 +88,13 @@ test('sdcadm create napi', function (t) {
 });
 
 
+// Mandatory --skip-ha-check for non HA service:
 test('sdcadm create napi --dry-run --server', function (t) {
     var cmd = 'sdcadm create napi --dry-run --server=' + HEADNODE_UUID;
 
     exec(cmd, function (err, stdout, stderr) {
-        t.ok(err);
+        t.ok(err, 'Execution error');
 
-        t.equal(stdout, '');
         t.notEqual(stderr.indexOf('Must provide \'--skip-ha-check\''), -1);
 
         t.end();
@@ -89,15 +102,16 @@ test('sdcadm create napi --dry-run --server', function (t) {
 });
 
 
+// Test --dry-run:
 test('sdcadm create napi --dry-run --skip-ha-check -y --server', function (t) {
     var cmd = 'sdcadm create napi --dry-run --skip-ha-check --yes --server=' +
               HEADNODE_UUID;
 
     exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err);
+        t.ifError(err, 'Execution error');
 
         t.notEqual(stdout.indexOf('Created successfully'), -1);
-        t.equal(stderr, '');
+        t.equal(stderr, '', 'Empty stderr');
 
         getNumNapi(function (err2, numNapi) {
             t.ifError(err2);
@@ -108,22 +122,23 @@ test('sdcadm create napi --dry-run --skip-ha-check -y --server', function (t) {
 });
 
 
+// Real create test:
 test('sdcadm create napi --skip-ha-check --yes --server', function (t) {
     var cmd = 'sdcadm create napi --skip-ha-check --yes --server=' +
               HEADNODE_UUID;
 
     exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
 
         t.notEqual(stdout.indexOf('Created successfully'), -1);
 
         getNumNapi(function (err2, numNapi) {
-            t.ifError(err2);
+            t.ifError(err2, 'vmadm list error');
 
             t.equal(numNapi, NUM_NAPI + 1);
             // JSSTYLED
-            NEW_NAPI_UUID = stdout.match(/Instance "(.+?)"/)[1];
+            NAPI_UUID = stdout.match(/Instance "(.+?)"/)[1];
 
             t.end();
         });
@@ -131,16 +146,45 @@ test('sdcadm create napi --skip-ha-check --yes --server', function (t) {
 });
 
 
-// TODO: --image
+// Create test with latest available image:
+test('sdcadm create napi --skip-ha-check -y -s --image', function (t) {
+    getLatestImgAvail(function (updatesErr, latestImageUuid) {
+        t.ifError(updatesErr, 'updates-imgadm list error');
+
+        var cmd = 'sdcadm create napi --skip-ha-check --yes --server=' +
+                  HEADNODE_UUID + ' --image=' + latestImageUuid;
+        exec(cmd, function (err, stdout, stderr) {
+            t.ifError(err, 'Execution error');
+            t.equal(stderr, '', 'Empty stderr');
 
+            t.notEqual(stdout.indexOf('Created successfully'), -1);
+
+            getNumNapi(function (err2, numNapi) {
+                t.ifError(err2, 'vmadm list error');
+
+                t.equal(numNapi, NUM_NAPI + 2);
+
+                // JSSTYLED
+                NAPI_UUID_2 = stdout.match(/Instance "(.+?)"/)[1];
+
+                t.end();
+            });
+        });
+    });
+});
 
 test('teardown', function (t) {
-    exec('vmadm destroy ' + NEW_NAPI_UUID, function (err, stdout, stderr) {
-        t.ifError(err);
+    var cmd = 'sdc-sapi /instances/%s -X DELETE';
 
-        t.equal(stdout, '');
-        t.notEqual(stderr.indexOf('Successfully deleted VM'), -1);
+    exec(util.format(cmd, NAPI_UUID), function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
 
-        t.end();
+        exec(util.format(cmd, NAPI_UUID_2), function (err2, stdout2, stderr2) {
+            t.ifError(err2, 'Execution error');
+            t.equal(stderr2, '', 'Empty stderr');
+
+            t.end();
+        });
     });
-});
\ No newline at end of file
+});
-- 
2.21.0

