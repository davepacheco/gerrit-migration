From ec91af4f577efecc86a4fa07a9c3e7cdb528990b Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Thu, 28 Feb 2019 17:28:04 +0000
Subject: [PATCH] MANTA-4090 convert pgstatsmon to engbld framework

---
 .gitignore                           |   5 +
 .gitmodules                          |   9 +
 Makefile                             |  58 ++---
 deps/eng                             |   1 +
 deps/javascriptlint                  |   1 +
 deps/jsstyle                         |   1 +
 tools/mk/Makefile.defs               | 105 ---------
 tools/mk/Makefile.node_modules.defs  |  68 ------
 tools/mk/Makefile.node_modules.targ  |  31 ---
 tools/mk/Makefile.node_prebuilt.defs | 159 --------------
 tools/mk/Makefile.node_prebuilt.targ |  42 ----
 tools/mk/Makefile.targ               | 309 ---------------------------
 12 files changed, 49 insertions(+), 740 deletions(-)
 create mode 160000 deps/eng
 create mode 160000 deps/javascriptlint
 create mode 160000 deps/jsstyle
 delete mode 100644 tools/mk/Makefile.defs
 delete mode 100644 tools/mk/Makefile.node_modules.defs
 delete mode 100644 tools/mk/Makefile.node_modules.targ
 delete mode 100644 tools/mk/Makefile.node_prebuilt.defs
 delete mode 100644 tools/mk/Makefile.node_prebuilt.targ
 delete mode 100644 tools/mk/Makefile.targ

diff --git a/.gitignore b/.gitignore
index 04b8435..ffbf9f3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,7 @@
+/make_stamps
+/bits
+/build
 node_modules
 test/.not_production
+pgstatsmon-pkg-*.gz
+/proto
diff --git a/.gitmodules b/.gitmodules
index 6c9d358..297363a 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -4,3 +4,12 @@
 [submodule "deps/manta-scripts"]
 	path = deps/manta-scripts
 	url = https://github.com/joyent/manta-scripts
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
+[submodule "deps/javascriptlint"]
+	path = deps/javascriptlint
+	url = https://github.com/davepacheco/javascriptlint.git
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = https://github.com/davepacheco/jsstyle.git
diff --git a/Makefile b/Makefile
index a9f3a92..1598115 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2018, Joyent, Inc. All rights reserved.
+# Copyright (c) 2019, Joyent, Inc. All rights reserved.
 #
 # Makefile: pgstatsmon - Postgres monitoring system
 #
@@ -12,15 +12,13 @@
 # Tools must be installed on the path
 #
 
-JSL	= jsl
-JSSTYLE	= jsstyle
 CATEST	= deps/catest/catest
 
 #
 # Variables
 #
 
-NAME	:= pgstatsmon
+NAME	= pgstatsmon
 
 #
 # Prebuilt Node.js
@@ -48,9 +46,14 @@ GUARD			 = test/.not_production
 DEFAULT_TEST_CONFIG	 = test/etc/testconfig.json
 TEST_BACKEND_URL	:= $(shell json -f $(DEFAULT_TEST_CONFIG) static.dbs | json -a ip)
 
-include ./tools/mk/Makefile.defs
-include ./tools/mk/Makefile.node_modules.defs
-include ./tools/mk/Makefile.node_prebuilt.defs
+ENGBLD_USE_BUILDIMAGE	= true
+ENGBLD_REQUIRE		:= $(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
+
+include ./deps/eng/tools/mk/Makefile.node_modules.defs
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.defs
 
 #
 # Install macros and targets
@@ -60,7 +63,7 @@ PROTO			= proto
 PREFIX			= /opt/smartdc/$(NAME)
 LIB_FILES		= $(notdir $(wildcard lib/*.js))
 ETC_FILES		= $(notdir $(wildcard etc/*.json))
-RELEASE_TARBALL		= $(NAME)-pkg-$(STAMP).tar.bz2
+RELEASE_TARBALL		= $(NAME)-pkg-$(STAMP).tar.gz
 NODE_MODULE_INSTALL	= $(PREFIX)/node_modules/.ok
 
 SCRIPTS		= firstboot.sh \
@@ -76,7 +79,7 @@ BOOT_SCRIPTS_DIR	= /opt/smartdc/boot
 NODE_BITS	= bin/node \
 		  lib/libgcc_s.so.1 \
 		  lib/libstdc++.so.6
-NODE_BITS_DIR	= $(PREFIX)/node
+NODE_ENGBLD_BITS_DIR	= $(PREFIX)/node
 
 SAPI_MANIFESTS		= pgstatsmon
 SAPI_MANIFESTS_DIRS	= $(SAPI_MANIFESTS:%=$(PREFIX)/sapi_manifests/%)
@@ -95,7 +98,7 @@ INSTALL_FILES	= $(addprefix $(PROTO), \
 		  $(LIB_FILES:%=$(PREFIX)/lib/%) \
 		  $(ETC_FILES:%=$(PREFIX)/etc/%) \
 		  $(NODE_MODULE_INSTALL) \
-		  $(NODE_BITS:%=$(NODE_BITS_DIR)/%) \
+		  $(NODE_BITS:%=$(NODE_ENGBLD_BITS_DIR)/%) \
 		  $(BOOT_SCRIPTS:%=$(BOOT_SCRIPTS_DIR)/%) \
 		  $(SAPI_MANIFESTS_DIRS:%=%/template) \
 		  $(SAPI_MANIFESTS_DIRS:%=%/manifest.json) \
@@ -108,9 +111,9 @@ INSTALL_DIRS	= $(addprefix $(PROTO), \
 		  $(PREFIX)/lib \
 		  $(PREFIX)/etc \
 		  $(SCRIPTS_DIR) \
-		  $(NODE_BITS_DIR) \
-		  $(NODE_BITS_DIR)/bin \
-		  $(NODE_BITS_DIR)/lib \
+		  $(NODE_ENGBLD_BITS_DIR) \
+		  $(NODE_ENGBLD_BITS_DIR)/bin \
+		  $(NODE_ENGBLD_BITS_DIR)/lib \
 		  $(BOOT_SCRIPTS_DIR) \
 		  $(SMF_MANIFEST_DIR) \
 		  $(SAPI_MANIFESTS_DIRS) \
@@ -119,33 +122,34 @@ INSTALL_DIRS	= $(addprefix $(PROTO), \
 INSTALL_FILE = rm -f $@ && cp $< $@ && chmod 644 $@
 INSTALL_EXEC = rm -f $@ && cp $< $@ && chmod 755 $@
 
+BASE_IMAGE_UUID = 04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f
+BUILDIMAGE_NAME = manta-pgstatsmon
+BUILDIMAGE_DESC	= Postgres Monitoring Service
+AGENTS		= amon config registrar
+
 #
 # build targets
 #
 
 .PHONY: all
-all: $(STAMP_NODE_PREBUILT) $(STAMP_NODE_MODULES)
+all: $(STAMP_NODE_PREBUILT) $(STAMP_NODE_MODULES) deps/manta-scripts/.git
 	$(NODE) --version
 
 .PHONY: install
 install: $(INSTALL_FILES)
 
 .PHONY: release
-release: install
+release: all install
 	@echo "==> Building $(RELEASE_TARBALL)"
-	cd $(PROTO) && gtar -jcf $(TOP)/$(RELEASE_TARBALL) \
+	cd $(PROTO) && gtar -I pigz -cf $(TOP)/$(RELEASE_TARBALL) \
 		--transform='s,^[^.],root/&,' \
 		--owner=0 --group=0 \
 		opt
 
 .PHONY: publish
 publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		echo "error: 'BITS_DIR' must be set for 'publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/$(NAME)
-	cp $(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	cp $(RELEASE_TARBALL) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
 
 .PHONY: test
 test: $(GUARD) all
@@ -203,7 +207,7 @@ $(PROTO)$(BOOT_SCRIPTS_DIR)/setup.sh: | $(INSTALL_DIRS)
 $(PROTO)$(BOOT_SCRIPTS_DIR)/configure.sh: | $(INSTALL_DIRS)
 	rm -f $@ && ln -s ../$(NAME)/scripts/everyboot.sh $@
 
-$(PROTO)$(PREFIX)/scripts/%.sh: deps/manta-scripts/%.sh | $(INSTALL_DIRS)
+$(PROTO)$(PREFIX)/scripts/%.sh: deps/manta-scripts/%.sh | $(INSTALL_DIRS) deps/manta-scripts/.git
 	$(INSTALL_EXEC)
 
 $(PROTO)$(PREFIX)/scripts/%.sh: boot/%.sh | $(INSTALL_DIRS)
@@ -217,6 +221,8 @@ $(PROTO)$(PREFIX)/sapi_manifests/%: sapi_manifests/% | $(INSTALL_DIRS)
 $(PROTO)$(PREFIX)/smf/manifests/%: smf/manifests/% | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
 
-include ./tools/mk/Makefile.targ
-include ./tools/mk/Makefile.node_modules.targ
-include ./tools/mk/Makefile.node_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.deps
+include ./deps/eng/tools/mk/Makefile.targ
+include ./deps/eng/tools/mk/Makefile.node_modules.targ
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.targ
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..cfd827a
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit cfd827a5029c249624efd6fcdee128db2a9d727e
diff --git a/deps/javascriptlint b/deps/javascriptlint
new file mode 160000
index 0000000..ad52812
--- /dev/null
+++ b/deps/javascriptlint
@@ -0,0 +1 @@
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..52dc973
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
deleted file mode 100644
index 73dd612..0000000
--- a/tools/mk/Makefile.defs
+++ /dev/null
@@ -1,105 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2018, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
-#			created.  See comments below on expensive targets.
-#
-#	CACHE_DIR	A directory tree in which temporary files may be
-#			collected by download, tarball extraction, etc.  This
-#			directory is completely removed by "make distclean".
-#			Files in this directory are not intended to be shipped.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
-
-CACHE_DIR ?=		cache
-DISTCLEAN_FILES +=	$(CACHE_DIR)
-
-#
-# EXPENSIVE TARGETS AND MAKE STAMP FILES
-#
-# Targets which are expensive to run and lack a single file that marks
-# completion are difficult to track with make; e.g., "npm install".  One
-# solution to this problem is to create "stamp" files with symbolic names which
-# are created as the final step in a complex make rule in order to mark
-# completion.
-#
-# In order to make these more uniform, and easier to target with "make clean",
-# we will attempt to store them under a single directory.  Note that these
-# files are never targets for shipping in build artefacts.
-#
-# Stamp-backed targets come in several parts.  First, a macro should be defined
-# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
-# creates this stamp file must be provided.  The recipe for this target should
-# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
-# management.
-#
-# For example:
-#
-# --- Makefile.*.defs:
-#
-#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
-#
-# --- Makefile.*.targ:
-#
-#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
-#		$(MAKE_STAMP_REMOVE)
-#		rm -rf output_tree/  # <--- ensure a clean slate
-#		expensive_program -o output_tree/ $^
-#		$(MAKE_STAMP_CREATE)
-#
-# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
-# The example above could be built manually by invoking:
-#
-#	make stamp-expensive-result
-#
-MAKE_STAMPS_DIR ?=	make_stamps
-CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
-
-MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
-MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
deleted file mode 100644
index ad9fb6d..0000000
--- a/tools/mk/Makefile.node_modules.defs
+++ /dev/null
@@ -1,68 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2018, Joyent, Inc.
-#
-
-#
-# Makefile.node_modules.defs: Makefile for using NPM modules.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile provides a target for building NPM modules from the dependency
-# information in the "package.json" file.  The "npm install" operation is
-# expensive and produces a complex (multi-file) result which is difficult for
-# make to use in dependency analysis.  As such, we use a "stamp" file to track
-# successful completion of module installation.
-#
-# This variable allows the consumer to influence the environment used to run
-# NPM commands.
-#
-#	NPM_ENV			This string should be set to a list of
-#				environment variables in the syntax used
-#				by bash; e.g.,
-#
-#					NPM_ENV =	TESTING=yes V=1
-#
-# Consumers should, for targets which depend on the installation of NPM
-# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
-# e.g.:
-#
-#	.PHONY: all
-#	all: $(STAMP_NODE_MODULES)
-#
-# A phony target, "make stamp-node-modules", is also provided to allow the
-# engineer to manually perform NPM module installation without invoking other
-# targets.  Note that this target should _not_ be used as a dependency for
-# other targets in consuming Makefiles; using phony targets to represent
-# intermediate build stages can inhibit the ability of make to determine
-# when no additional actions are required.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NPM ?= $(error You must include either Makefile.node.defs or \
-    Makefile.node_prebuilt.defs before this makefile)
-
-BUILD ?=		build
-
-#
-# Invoking "npm install" at the top-level will create a "node_modules"
-# directory into which NPM modules will be installed.
-#
-CLEAN_FILES +=		node_modules
-
-#
-# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
-# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
-# in CLEAN_FILES already.
-#
-STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
deleted file mode 100644
index 762f3bf..0000000
--- a/tools/mk/Makefile.node_modules.targ
+++ /dev/null
@@ -1,31 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2018, Joyent, Inc.
-#
-
-#
-# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
-    before this file)
-
-#
-# If the "package.json" file changes, we need to rebuild the contents of
-# the "node_modules" directory.
-#
-$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
-	$(MAKE_STAMP_REMOVE)
-	rm -rf node_modules
-	$(NPM_ENV) $(NPM) install
-	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index 9edc396..0000000
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,159 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2018, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates downloading and bundling a prebuilt node.js
-# build (using the 'sdcnode' distro builds). This is an alternative to
-# the "Makefile.node.*" makefiles for *building* a node from source.
-#
-# Usage:
-#
-# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
-#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
-#   below.
-# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
-# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
-#   Makefile.
-# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
-#   or `$(NPM_EXEC)`. E.g.:
-#
-#		node_modules/restify: deps/restify $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-#   or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#		node_modules/restify: deps/restify | $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-# - Use `$(NPM)` or `$(NODE)` to use your node build.
-# - Include the "$(NODE_INSTALL)" tree in your release package.
-#
-#
-# When including this Makefile, you MUST also specify:
-#
-#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
-#				package to use. Typically this is one of the
-#				node version tags, e.g. "v0.6.18" but it
-#				can be any commitish.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
-#				can either be a *local directory* or *a
-#				URL* dir (with trailing '/') which serves
-#				Apache/Nginx dir listing HTML.
-#				(default: sdcnode master build dir on stuff)
-#
-#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
-#				configuration builds of node, e.g. say a
-#				build configured `--without-ssl`. These
-#				special configurations are given a tag, e.g.
-#				'gz', that is used in the filename. Optionally
-#				specify a tag name here.
-#				(default: empty)
-#
-#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
-#				from which to pull. Generally one should stick
-#				with the default.
-#				(default: master)
-#
-#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
-#				for an sdcnode build that you want to use (potential compat
-#				issues be damned), then set this to the UUID of the sdcnode
-#				build you want. See here for available build image uuids:
-#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#
-# Dev Notes:
-#
-# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
-# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
-# included to ensure an exact match with the build machine. This name (e.g.
-# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
-# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
-# downloaded and extracted into "NODE_INSTALL".
-#
-# The "*_EXEC" vars are set to named symlinks, e.g.
-# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
-# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
-# node install.
-#
-# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
-# package naming.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
-
-
-BUILD		?= build
-NODE_INSTALL	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL) \
-	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-
-NODE_PREBUILT_BRANCH ?= master
-NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
-ifeq ($(NODE_PREBUILT_TAG),)
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
-else
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
-endif
-NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
-NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
-ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
-	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
-	endif
-else
-	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
-	endif
-endif
-ifeq ($(NODE_PREBUILT_TARBALL),)
-	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
-endif
-
-
-# Prebuild-specific paths for the "*_EXEC" vars to ensure that
-# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
-# choice changes) causes a install of the new node.
-NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
-NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
-NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
-
-#
-# These paths should be used during the build process to invoke Node and
-# Node-related build tools like NPM.  All paths are fully qualified so that
-# they work regardless of the current working directory at the point of
-# invocation.
-#
-# Note that where PATH is overridden, the value chosen must cause execution of
-# "node" to find the same binary to which the NODE macro refers.
-#
-NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
-NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
deleted file mode 100644
index 0e720a8..0000000
--- a/tools/mk/Makefile.node_prebuilt.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2018, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
-# build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-
-
-NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
-
-
-# TODO: remove this limitation
-# Limitation: currently presuming that the NODE_INSTALL basename is
-# 'node' and that sdcnode tarballs have a 'node' top-level dir.
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
-		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
-	rm -rf $(NODE_INSTALL) \
-		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-	mkdir -p $(shell dirname $(NODE_INSTALL))
-	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
-		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
-		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
-	else \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
-	fi
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
deleted file mode 100644
index 8300cdb..0000000
--- a/tools/mk/Makefile.targ
+++ /dev/null
@@ -1,309 +0,0 @@
-# -*- mode: makefile -*-
-#
-# Copyright (c) 2018, Joyent, Inc. All rights reserved.
-#
-# Makefile.targ: common targets.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile defines several useful targets and rules. You can use it by
-# including it from a Makefile that specifies some of the variables below.
-#
-# Targets defined in this Makefile:
-#
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
-#
-#	clean	Removes built files
-#
-#	docs	Builds restdown documentation in docs/
-#
-#	prepush	Depends on "check" and "test"
-#
-#	test	Does nothing (you should override this)
-#
-#	xref	Generates cscope (source cross-reference index)
-#
-# For details on what these targets are supposed to do, see the Joyent
-# Engineering Guide.
-#
-# To make use of these targets, you'll need to set some of these variables. Any
-# variables left unset will simply not be used.
-#
-#	BASH_FILES	Bash scripts to check for syntax
-#			(paths relative to top-level Makefile)
-#
-#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
-#			that files generated by targets in this Makefile are
-#			automatically included in CLEAN_FILES.  These include
-#			restdown-generated HTML and JSON files.
-#
-#	DOC_FILES	Restdown (documentation source) files. These are
-#			assumed to be contained in "docs/", and must NOT
-#			contain the "docs/" prefix.
-#
-#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
-#	JSL_CONF_WEB	(paths relative to top-level Makefile)
-#
-#			Node.js and Web configuration files are separate
-#			because you'll usually want different global variable
-#			configurations.  If no file is specified, none is given
-#			to jsl, which causes it to use a default configuration,
-#			which probably isn't what you want.
-#
-#	JSL_FILES_NODE	JavaScript files to check with Node config file.
-#	JSL_FILES_WEB	JavaScript files to check with Web config file.
-#
-#	JSON_FILES	JSON files to be validated
-#
-#	JSSTYLE_FILES	JavaScript files to be style-checked
-#
-# You can also override these variables:
-#
-#	BASH		Path to bash (default: "bash")
-#
-#	CSCOPE_DIRS	Directories to search for source files for the cscope
-#			index. (default: ".")
-#
-#	JSL		Path to JavaScriptLint (default: "jsl")
-#
-#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
-#	JSL_FLAGS_WEB
-#	JSL_FLAGS
-#
-#	JSON		Path to json tool (default: "json")
-#
-#	JSSTYLE		Path to jsstyle (default: "jsstyle")
-#
-#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
-#
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
-#
-
-#
-# Defaults for the various tools we use.
-#
-BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
-CP		?= cp
-CSCOPE		?= cscope
-CSCOPE_DIRS	?= .
-JSL		?= jsl
-JSON		?= json
-JSSTYLE		?= jsstyle
-MKDIR		?= mkdir -p
-MV		?= mv
-RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
-RMTREE		?= rm -rf
-JSL_FLAGS  	?= --nologo --nosummary
-
-ifeq ($(shell uname -s),SunOS)
-	TAR	?= gtar
-else
-	TAR	?= tar
-endif
-
-
-#
-# Defaults for other fixed values.
-#
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
-DOC_BUILD	= $(BUILD)/docs/public
-
-#
-# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
-#
-ifneq ($(origin JSL_CONF_NODE), undefined)
-	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
-endif
-
-ifneq ($(origin JSL_CONF_WEB), undefined)
-	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
-endif
-
-#
-# Targets. For descriptions on what these are supposed to do, see the
-# Joyent Engineering Guide.
-#
-
-#
-# Instruct make to keep around temporary files. We have rules below that
-# automatically update git submodules as needed, but they employ a deps/*/.git
-# temporary file. Without this directive, make tries to remove these .git
-# directories after the build has completed.
-#
-.SECONDARY: $($(wildcard deps/*):%=%/.git)
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# These recipes make heavy use of dynamically-created phony targets. The parent
-# Makefile defines a list of input files like BASH_FILES. We then say that each
-# of these files depends on a fake target called filename.bashchk, and then we
-# define a pattern rule for those targets that runs bash in check-syntax-only
-# mode. This mechanism has the nice properties that if you specify zero files,
-# the rule becomes a noop (unlike a single rule to check all bash files, which
-# would invoke bash with zero files), and you can check individual files from
-# the command line with "make filename.bashchk".
-#
-.PHONY: check-bash
-check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
-
-%.bashchk: %
-	$(BASH) -n $^
-
-%.bashstyle: %
-	$(BASHSTYLE) $^
-
-.PHONY: check-json
-check-json: $(JSON_FILES:%=%.jsonchk)
-
-%.jsonchk: %
-	$(JSON) --validate -f $^
-
-#
-# The above approach can be slow when there are many files to check because it
-# requires that "make" invoke the check tool once for each file, rather than
-# passing in several files at once.  For the JavaScript check targets, we define
-# a variable for the target itself *only if* the list of input files is
-# non-empty.  This avoids invoking the tool if there are no files to check.
-#
-JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
-.PHONY: check-jsl-node
-check-jsl-node: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
-.PHONY: check-jsl-web
-check-jsl-web: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
-
-.PHONY: check-jsl
-check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
-
-JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
-
-.PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
-	@echo check ok
-
-.PHONY: clean
-clean::
-	-$(RMTREE) $(CLEAN_FILES)
-
-.PHONY: distclean
-distclean:: clean
-	-$(RMTREE) $(DISTCLEAN_FILES)
-
-CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
-CLEAN_FILES += $(CSCOPE_FILES)
-
-.PHONY: xref
-xref: cscope.files
-	$(CSCOPE) -bqR
-
-.PHONY: cscope.files
-cscope.files:
-	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
-	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
-
-#
-# The "docs" target is complicated because we do several things here:
-#
-#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
-#
-#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
-#        functions as a complete copy of the documentation that could be
-#        mirrored or served over HTTP.
-#
-#    (3) Then copy any directories and media from docs/media into
-#        $(DOC_BUILD)/media. This allows projects to include their own media,
-#        including files that will override same-named files provided by
-#        restdown.
-#
-# Step (3) is the surprisingly complex part: in order to do this, we need to
-# identify the subdirectories in docs/media, recreate them in
-# $(DOC_BUILD)/media, then do the same with the files.
-#
-DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
-DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
-DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
-
-DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
-DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
-DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
-
-#
-# Like the other targets, "docs" just depends on the final files we want to
-# create in $(DOC_BUILD), leveraging other targets and recipes to define how
-# to get there.
-#
-.PHONY: docs
-docs:							\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
-	$(DOC_MEDIA_FILES_BUILD)
-
-#
-# We keep the intermediate files so that the next build can see whether the
-# files in DOC_BUILD are up to date.
-#
-.PRECIOUS:					\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
-
-#
-# We do clean those intermediate files, as well as all of DOC_BUILD.
-#
-CLEAN_FILES +=					\
-	$(DOC_BUILD)				\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
-
-#
-# Before installing the files, we must make sure the directories exist. The |
-# syntax tells make that the dependency need only exist, not be up to date.
-# Otherwise, it might try to rebuild spuriously because the directory itself
-# appears out of date.
-#
-$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
-
-$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
-	$(CP) $< $@
-
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
-	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
-
-$(DOC_BUILD):
-	$(MKDIR) $@
-
-$(DOC_MEDIA_DIRS_BUILD):
-	$(MKDIR) $@
-
-#
-# The default "test" target does nothing. This should usually be overridden by
-# the parent Makefile. It's included here so we can define "prepush" without
-# requiring the repo to define "test".
-#
-.PHONY: test
-test:
-
-.PHONY: prepush
-prepush: check test
-- 
2.21.0

