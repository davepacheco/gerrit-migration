commit 15d805d343caf1f3c275561f0156648c75c777bf (refs/changes/46/5046/1)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2018-11-09T20:20:04+00:00 (11 months ago)
    
    MANTA-4014 store snaplinkDisabled flag as ufds attribute

diff --git a/lib/adm.js b/lib/adm.js
index 8ee697a..60a5bce 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -2412,8 +2412,7 @@ maAdm.prototype.genconfigFromFile = function (args, callback)
 
 maAdm.prototype.disableSnaplinks = function (args, callback) {
 	var self;
-	var account, uuid;
-	var disabledAccounts;
+	var account;
 
 	assertplus.string(args.account, 'args.account');
 
@@ -2426,34 +2425,22 @@ maAdm.prototype.disableSnaplinks = function (args, callback) {
 			    'snaplinks for user account ' + account));
 			return;
 		}
-		uuid = user.uuid;
-		disabledAccounts = self.ma_app.metadata[
-		    'ACCOUNTS_SNAPLINKS_DISABLED'] || [];
-
-		for (var i = 0; i < disabledAccounts.length; i++) {
-			var disabledAccount = disabledAccounts[i];
-			if (disabledAccount.uuid === uuid) {
-				callback(new Error('snaplinks ' +
-				    'already disabled for ' + account));
-				return;
-			}
-			delete (disabledAccount.last);
+		if (user.snaplinks_disabled === true) {
+			callback(new Error('snaplinks ' +
+			    'already disabled for ' + account));
+			return;
 		}
-
-		disabledAccounts.push({
-		    uuid: uuid,
-		    last: true
-		});
-
-		self.ma_sdc.SAPI.updateApplication(self.ma_app.uuid, {
-		    metadata: {
-		        'ACCOUNTS_SNAPLINKS_DISABLED': disabledAccounts
-		    }
-		}, function (updateErr) {
+		var change = {
+			type: (user.snaplinks_disabled === undefined) ? 'add' :
+			    'replace',
+			modification: { snaplinks_disabled: true }
+		};
+		self.ma_sdc.UFDS.modify(user.dn, [change],
+		    function (updateErr) {
 			if (updateErr) {
 				callback(new VError(updateErr, 'unable ' +
 				    'to disable snaplinks for user account ' +
-				    uuid));
+				    user.uuid));
 				return;
 			}
 			callback();
@@ -2462,59 +2449,36 @@ maAdm.prototype.disableSnaplinks = function (args, callback) {
 };
 
 maAdm.prototype.enableSnaplinks = function (args, callback) {
-	var disabledAccounts, newDisabledAccounts;
-	var account, uuid;
-	var found;
+	var account;
 	var self;
 
 	assertplus.string(args.account, 'args.account');
 
 	self = this;
 	account = args.account;
-	newDisabledAccounts = [];
-	found = false;
 
 	self.ma_sdc.UFDS.getUser(account, function (err, user) {
 		if (err) {
 			callback(new VError(err, 'Unable to enable snaplinks ' +
-			    'for user account ' + uuid));
+			    'for user account ' + user.uuid));
 			return;
 		}
-		uuid = user.uuid;
-		disabledAccounts = self.ma_app.metadata[
-		    'ACCOUNTS_SNAPLINKS_DISABLED'] || [];
-
-		for (var i = 0; i < disabledAccounts.length; i++) {
-			var disabledAccount = disabledAccounts[i];
-			delete (disabledAccount.last);
-
-			if (disabledAccount.uuid === uuid) {
-				found = true;
-			} else {
-				newDisabledAccounts.push(disabledAccount);
-			}
-		}
-
-		if (!found) {
-			callback(new VError('snaplinks already enabled for ' +
-			    'account ' + account));
+		if (user.snaplinks_disabled === false) {
+			callback(new Error('snaplinks ' +
+			    'already enabled for ' + account));
 			return;
 		}
-
-		if (newDisabledAccounts.length > 0) {
-			newDisabledAccounts[
-			    newDisabledAccounts.length - 1].last = true;
-		}
-
-		self.ma_sdc.SAPI.updateApplication(self.ma_app.uuid, {
-		    metadata: {
-		        'ACCOUNTS_SNAPLINKS_DISABLED': newDisabledAccounts
-		    }
-		}, function (updateErr) {
+		var change = {
+			type: (user.snaplinks_disabled === undefined) ? 'add' :
+			    'replace',
+			modification: { snaplinks_disabled: false }
+		};
+		self.ma_sdc.UFDS.modify(user.dn, [change],
+		    function (updateErr) {
 			if (updateErr) {
 				callback(new VError(updateErr, 'unable ' +
-				    'to disable snaplinks for user account ' +
-				    uuid));
+				    'to enable snaplinks for user account ' +
+				    user.uuid));
 				return;
 			}
 			callback();
@@ -2533,25 +2497,22 @@ maAdm.prototype.dumpSnaplinkDisabledAccounts = function (args, callback) {
 	self = this;
 	rows = [];
 
-	vasync.forEachPipeline({
-		inputs: self.ma_app.metadata['ACCOUNTS_SNAPLINKS_DISABLED'],
-		func: function (account, next) {
-			self.ma_sdc.UFDS.getUser(account.uuid,
-			    function (err, user) {
-				if (err) {
-					next(err);
-					return;
-				}
-				rows.push([user.uuid, user.login]);
-				next();
-			});
-		}
-	}, function (err) {
-		if (err) {
-			callback(new VError(err, 'Error listing snaplink ' +
-			    'disabled accounts'));
+	var opts = {
+		filter: '(&(snaplinks_disabled=true)(objectclass=sdcperson))',
+		scope: 'sub'
+	};
+	var base = 'ou=users, o=smartdc';
+
+	self.ma_sdc.UFDS.search(base, opts, function (ldapErr, entries) {
+		if (ldapErr) {
+			callback(new VError(ldapErr, 'error listing ufds ' +
+			    'users'));
 			return;
 		}
+		for (var i = 0; i < entries.length; i++) {
+			var entry = entries[i];
+			rows.push([entry.uuid, entry.login]);
+		}
 		self.doList({
 			'stream': args.stream,
 			'columnsSelected': args.columns,
