commit e98307e4ed74e489b979d4c3f720249e9116eae8 (refs/changes/19/3419/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2018-02-19T15:24:37-08:00 (1 year, 8 months ago)
    
    TRITON-160 clean cruft out of sdc-sapi
    Reviewed by: Julien Gilli <julien.gilli@joyent.com>
    Approved by: Julien Gilli <julien.gilli@joyent.com>

diff --git a/Makefile b/Makefile
index 45565ca..75f5e5f 100644
--- a/Makefile
+++ b/Makefile
@@ -99,10 +99,6 @@ service: all $(SMF_MANIFESTS)
 	cp -r $(TOP)/lib/common \
 		$(TOP)/lib/server \
 		$(SVC_INSTDIR)/lib
-	cp $(TOP)/tools/sapi-backfill-service-type.js \
-		$(SVC_INSTDIR)/tools/
-	cp $(TOP)/tools/sapi-backfill-instance-type.js \
-		$(SVC_INSTDIR)/tools/
 	mkdir -p $(TOP)/build/service/root/opt/smartdc/boot
 	cp -R $(TOP)/deps/sdc-scripts/* \
 	    $(TOP)/build/service/root/opt/smartdc/boot/
diff --git a/bin/mdata-update b/bin/mdata-update
deleted file mode 120000
index ce6757e..0000000
--- a/bin/mdata-update
+++ /dev/null
@@ -1 +0,0 @@
-../cmd/mdata-update.js
\ No newline at end of file
diff --git a/bin/sapiadm b/bin/sapiadm
deleted file mode 120000
index bad1054..0000000
--- a/bin/sapiadm
+++ /dev/null
@@ -1 +0,0 @@
-../cmd/sapiadm.js
\ No newline at end of file
diff --git a/cmd/mdata-update.js b/cmd/mdata-update.js
deleted file mode 100755
index b2f1cde..0000000
--- a/cmd/mdata-update.js
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/opt/smartdc/config-agent/build/node/bin/node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * mdata-update.js: update a zone's metadata
- */
-
-var async = require('async');
-var cp = require('child_process');
-var fs = require('fs');
-var optimist = require('optimist');
-var sdc = require('sdc-clients');
-
-var Logger = require('bunyan');
-
-optimist.usage('Usage: mdata-update <key> <value>');
-var ARGV = optimist.options({}).argv;
-
-if (ARGV._.length !== 2) {
-    optimist.showHelp();
-    process.exit(1);
-}
-
-var LOG = new Logger({
-    name: __filename,
-    serializers: Logger.stdSerializers
-});
-
-var CFG = '/opt/smartdc/config-agent/etc/config.json';
-var config = JSON.parse(fs.readFileSync(CFG, 'utf8'));
-
-var SAPI = new sdc.SAPI({
-    url: config.sapi.url,
-    log: LOG,
-    agent: false
-});
-
-var ZONENAME;
-
-async.waterfall([
-    function (cb) {
-        cp.exec('/usr/bin/zonename', function (err, stdout) {
-            if (err)
-                throw (err);
-            ZONENAME = stdout.trim();
-            cb();
-        });
-    },
-    function (cb) {
-        var opts = {};
-        opts.metadata = {};
-        opts.metadata[ARGV._[0]] = ARGV._[1];
-
-        opts.action = 'update';
-
-        SAPI.updateInstance(ZONENAME, opts, function (err) {
-            if (err)
-                throw (err);
-            cb();
-        });
-    }
-], function () {
-    console.log('Updated metadata key "' + ARGV._[0] + '"');
-    process.exit(0);
-});
diff --git a/cmd/sapiadm.js b/cmd/sapiadm.js
deleted file mode 100755
index a11ba33..0000000
--- a/cmd/sapiadm.js
+++ /dev/null
@@ -1,706 +0,0 @@
-#!/usr/node/bin/node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * sapiadm.js: CLI tool for SAPI
- */
-
-var assert = require('assert-plus');
-var async = require('async');
-var cmdln = require('cmdln');
-var cp = require('child_process');
-var fs = require('fs');
-var os = require('os');
-var path = require('path');
-var sdc = require('sdc-clients');
-var util = require('util');
-
-var mod_util = require('../lib/common/util');
-
-var sprintf = require('sprintf-js').sprintf;
-
-var Cmdln = cmdln.Cmdln;
-var bunyan = require('bunyan');
-
-var VERSION = '1.0.0';
-
-
-function sortBy(field) {
-    return (function (a, b) {
-        if (a[field] < b[field])
-            return (-1);
-        if (a[field] > b[field])
-            return (1);
-        return (0);
-    });
-}
-
-function Sapiadm() {
-    Cmdln.call(this, {
-        name: 'sapiadm',
-        desc: 'Administer SAPI objects',
-        // Custom options. By default you get -h/--help.
-        options: [
-            {names: ['help', 'h'], type: 'bool',
-                help: 'Print help and exit.'},
-            {name: 'version', type: 'bool',
-                help: 'Print version and exit.'},
-            {names: ['verbose', 'v'], type: 'arrayOfBool',
-                help: 'More verbose logging.'}
-        ]
-    });
-}
-util.inherits(Sapiadm, Cmdln);
-
-Sapiadm.prototype.init = function (opts, args, cb) {
-    var self = this;
-
-    if (opts.version) {
-        console.log(VERSION);
-        cb(false);
-        return;
-    }
-
-    var level = 'warn';
-    var src = false;
-    if (opts.verbose) {
-        if (opts.verbose.length === 1) {
-            level = 'info';
-        } else if (opts.verbose.length === 2) {
-            level = 'debug';
-        } else {
-            level = 'trace';
-            src = true;
-        }
-    }
-    this.log = bunyan.createLogger({
-        name: __filename,
-        serializers: bunyan.stdSerializers,
-        src: src,
-        streams: [
-            {
-                stream: process.stderr,
-                level: level
-            }
-        ]
-    });
-
-    var onReady = function (err, client) {
-        if (err)
-            return (cb(err));
-        self.client = client;
-        Cmdln.prototype.init.call(self, opts, args, cb);
-    };
-
-    mod_util.zonename(function (err, zonename) {
-        if (err)
-            return (cb(err));
-
-        if (zonename === 'global')
-            initGlobalZone.call(self, onReady);
-        else
-            initNonGlobalZone.call(self, onReady);
-
-    });
-};
-
-function initGlobalZone(cb) {
-    var self = this;
-
-    var cmd = '/usr/bin/bash /lib/sdc/config.sh -json';
-
-    cp.exec(cmd, function (err, stdout, stderr) {
-        if (err)
-            return (cb(err));
-
-        var config = JSON.parse(stdout);
-        var sapi_url = 'http://' + config.sapi_domain;
-
-        var client = new sdc.SAPI({
-            url: sapi_url,
-            log: self.log,
-            agent: false
-        });
-
-        cb(null, client);
-    });
-}
-
-function initNonGlobalZone(cb) {
-    var self = this;
-
-    var CFG = '/opt/smartdc/config-agent/etc/config.json';
-
-    fs.readFile(CFG, 'utf8', function (err, contents) {
-        if (err)
-            return (cb(err));
-
-        var config = JSON.parse(contents);
-
-        var client = new sdc.SAPI({
-            url: config.sapi.url,
-            log: self.log,
-            agent: false
-        });
-
-        cb(null, client);
-    });
-}
-
-
-// -- Main subcommands
-
-Sapiadm.prototype.do_get = function (subcmd, opts, args, cb) {
-    if (args.length !== 1) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    this.client.whatis(args[0], function (err, app) {
-        if (err)
-            return (cb(err));
-
-        if (!app) {
-            console.log('no such object: ' + args[0]);
-            return (cb(null));
-        }
-
-        console.log(JSON.stringify(app, null, 4));
-        return (cb());
-    });
-};
-Sapiadm.prototype.do_get.help = (
-    'Get object details.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm get UUID\n'
-);
-
-
-Sapiadm.prototype.do_showapp = function (subcmd, opts, args, cb) {
-    var self = this;
-
-    if (args.length !== 1) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    var search_opts = {};
-    search_opts.name = args[0];
-
-    this.client.listApplications(search_opts, function (err, apps) {
-        if (err)
-            return (cb(err));
-
-        if (apps.length === 0) {
-            console.log('no such application: ' + args[0]);
-            return (cb(null));
-        }
-
-        self.client.getApplicationObjects(apps[0].uuid,
-            function (suberr, ret) {
-            if (suberr)
-                return (cb(suberr));
-            if (opts.json) {
-                printApplicationJSON(ret.services,
-                                     ret.instances);
-            } else {
-                printApplication(ret.services, ret.instances);
-            }
-            return (cb(null));
-        });
-    });
-};
-Sapiadm.prototype.do_showapp.options = [
-    {
-        names: [ 'json', 'j' ],
-        type: 'bool',
-        help: 'output in JSON'
-    }
-];
-Sapiadm.prototype.do_showapp.help = (
-    'Show services and instances inside an application.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm showapp APPLICATION-NAME\n'
-    + '     sapiadm showapp -j APPLICATION-NAME\n'
-);
-
-
-Sapiadm.prototype.do_update = function (subcmd, opts, args, cb) {
-    var self = this;
-
-    if (args.length !== 1 && args.length !== 2) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    var uuid = args[0];
-
-    async.waterfall([
-        function (subcb) {
-            if (args.length === 1)
-                return (readInput(opts, subcb));
-
-            /*
-             * If there's a second argument, it must be in the form:
-             *
-             *     metadata.foo=bar
-             */
-            var input = args[1];
-
-            if (input.indexOf('=') === -1)
-                return (cb(new Error('invalid syntax')));
-
-            var tokens = input.split('=');
-            var key = tokens[0];
-            var value = tokens[1].trim();
-
-            if (key.indexOf('.') === -1)
-                return (cb(new Error('missing update type')));
-
-            var type = key.substr(0, key.indexOf('.'));
-            type = type.toLowerCase();
-
-            if (type !== 'params' &&
-                type !== 'metadata' &&
-                type !== 'manifests') {
-                return (cb(new Error(
-                    'invalid type (must be one of "params", ' +
-                    '"metadata", or "manifests")')));
-            }
-
-            var field = key.substr(key.indexOf('.') + 1);
-
-            if (field.indexOf('.') !== -1) {
-                return (cb(new Error(
-                    'fields cannot be complex objects ' +
-                    '(' + field + ' contains a \'.\'). ' +
-                    'Please update with the -f option or by ' +
-                    'piping a json object in.')));
-            }
-
-            var changes = {};
-            changes[type] = {};
-            changes[type][field] = value;
-
-            return (subcb(null, changes));
-        },
-        function (changes, subcb) {
-            self.client.whatis(uuid, function (err, obj) {
-                if (err)
-                    return (subcb(err));
-
-                if (!obj) {
-                    console.log('no such object: ' + uuid);
-                    return (cb(null));
-                }
-
-                return (subcb(null, changes, obj));
-            });
-        },
-        function (changes, obj, subcb) {
-            var func;
-            if (obj.type === 'application')
-                func = self.client.updateApplication;
-            if (obj.type === 'service')
-                func = self.client.updateService;
-            if (obj.type === 'instance')
-                func = self.client.updateInstance;
-
-            assert.func(func, 'func');
-
-            func.call(self.client, obj.uuid, changes, subcb);
-        }
-    ], cb);
-};
-Sapiadm.prototype.do_update.options = [
-    {
-        names: [ 'f' ],
-        type: 'string',
-        helpArg: 'FILE',
-        help: 'file containing update JSON'
-    }
-];
-Sapiadm.prototype.do_update.help = (
-    'Update a SAPI object.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm update UUID metadata.foo=bar\n'
-    + '     sapiadm update UUID -f /tmp/changes.json\n'
-    + '     echo \'{ "metadata": { "foo": "bar" } }\' |\n'
-    + '         sapiadm update UUID\n'
-    + '\n'
-    + '{{options}}\n'
-);
-
-
-Sapiadm.prototype.do_provision = function (subcmd, opts, args, cb) {
-    var self = this;
-    // Cannot specify '-f FILE' *and* SERVICE-UUID arg.
-    if (args.length > 1 || (opts.f && args.length)) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    function readInputStr(subcb) {
-        if (opts.f) {
-            fs.readFile(opts.f, 'utf8', subcb);
-        } else if (args.length) {
-            subcb(null, JSON.stringify({service_uuid: args[0]}));
-        } else {
-            var stdin = '';
-            process.stdin.resume();
-            process.stdin.on('data', function (chunk) {
-                stdin += chunk;
-            });
-            process.stdin.on('end', function () {
-                subcb(null, stdin);
-            });
-        }
-    }
-
-    function getInput(subcb) {
-        readInputStr(function (rErr, input_str) {
-            if (rErr)
-                return (subcb(rErr));
-            parseInput(input_str, function (err, input) {
-                if (err) {
-                    return (subcb(err));
-                }
-                subcb(null, input);
-            });
-        });
-    }
-
-    getInput(function (pErr, input) {
-        if (pErr)
-            return (cb(pErr));
-
-        var service_uuid = input.service_uuid;
-        delete input.service_uuid;
-
-        self.log.debug({service_uuid: service_uuid, opts: input},
-            'call SAPI.createInstance');
-        self.client.createInstance(service_uuid, input,
-            function (err, inst) {
-            if (err)
-                return (cb(err));
-
-            console.log('Provisioned instance %s successfully',
-                inst.uuid);
-            cb();
-        });
-    });
-};
-Sapiadm.prototype.do_provision.options = [
-    {
-        names: [ 'f' ],
-        type: 'string',
-        helpArg: 'FILE',
-        help: 'Optional additional provision JSON payload. Use "-"'
-            + 'to read JSON from stdin.'
-    }
-];
-Sapiadm.prototype.do_provision.help = (
-    'Provision a new instance the given service.\n'
-    + '\n'
-    + 'Extra provision params, instance metadata and manifests can\n'
-    + 'optionally be provided via stdin or a file specified with "-f".\n'
-    + 'Minimally a service uuid must be provided as an argument or as\n'
-    + '"service_uuid" in the JSON payload. See \n'
-    + '<https://mo.joyent.com/docs/sapi/master/#CreateInstance> for full\n'
-    + 'details on acceptable payload.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm provision <service-uuid>\n'
-    + '     sapiadm provision -f <file>\n'
-    + '     ...payload on stdin ... | sapiadm provision\n'
-    + '\n'
-    + '{{options}}'
-    + '\n'
-    + 'Examples:\n'
-    + '     sapiadm provision 66a67b43-6744-4f4d-afee-6f64dc61afb7\n'
-    + '\n'
-    + '     sapiadm provision -f payload.json\n'
-    + '\n'
-    + '     echo \'{\n'
-    + '         "service_uuid": "66a67b43-6744-4f4d-afee-6f64dc61afb7",\n'
-    + '         "params": {\n'
-    + '             "alias": "foo0"\n'
-    + '         }\n'
-    + '     }\' | sapiadm provision\n'
-);
-
-
-Sapiadm.prototype.do_reprovision = function (subcmd, opts, args, cb) {
-    if (args.length !== 2) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    var instance_uuid = args[0];
-    var image_uuid = args[1];
-
-    this.client.reprovisionInstance(instance_uuid, image_uuid,
-        function (err) {
-        if (err)
-            return (cb(err));
-
-        console.log(sprintf('Reprovisioned %s successfully',
-            instance_uuid));
-        cb();
-    });
-};
-Sapiadm.prototype.do_reprovision.help = (
-    'Reprovision an existing instance with a new image.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm reprovision INSTANCE-UUID IMAGE-UUID\n'
-);
-
-
-Sapiadm.prototype.do_edit_manifest = function (subcmd, opts, args, cb) {
-    if (args.length !== 2) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
-
-    var self = this;
-    var svc_or_app_uuid = args[0];
-    var mn_name = args[1];
-    var old_mn_uuid;
-    var svcapp_type;
-    var svcapp;
-    var mn;
-
-    async.waterfall([
-        function getSvcOrApp(subcb) {
-            self.client.getService(svc_or_app_uuid,
-                    function (sErr, svc_) {
-                if (sErr) {
-                    self.client.getApplication(
-                            svc_or_app_uuid,
-                            function (aErr, app_) {
-                        svcapp = app_;
-                        svcapp_type = 'application';
-                        subcb(aErr);
-                    });
-                } else {
-                    svcapp = svc_;
-                    svcapp_type = 'service';
-                    subcb();
-                }
-            });
-        },
-        function getMn(subcb) {
-            var mn_uuid = svcapp.manifests[mn_name];
-            if (!mn_uuid) {
-                subcb(new Error(sprintf(
-                    'no manifest named "%s" on %s "%s"',
-                    mn_name, svcapp_type, svc_or_app_uuid)));
-                return;
-            }
-            self.client.getManifest(mn_uuid, function (err, mn_) {
-                mn = mn_;
-                old_mn_uuid = mn.uuid;
-                subcb(err);
-            });
-        },
-        function editMn(subcb) {
-            editInVi(mn_name, mn.template, subcb);
-        },
-        function earlyOutOrNewMn(new_template, changed, subcb) {
-            if (!changed) {
-                console.log(
-                    'Manifest "%s" on %s "%s" unchanged.',
-                    mn_name, svcapp_type, svc_or_app_uuid);
-                subcb(true);
-                return;
-            }
-            delete mn.uuid;
-            mn.template = new_template;
-            self.client.createManifest(mn, function (err, newMn) {
-                if (!err) {
-                    console.log(
-                        'Created new manifest "%s".',
-                        newMn.uuid);
-                }
-                subcb(err, newMn);
-            });
-        },
-        function updateSvcOrApp(newMn, subcb) {
-            var update = {
-                action: 'update',
-                manifests: {}
-            };
-            update.manifests[mn_name] = newMn.uuid;
-            var updateFunc = (svcapp_type === 'service'
-                ? self.client.updateService
-                : self.client.updateApplication)
-                .bind(self.client);
-            updateFunc(svc_or_app_uuid, update,
-                function (err, newSvc) {
-                if (!err) {
-                    console.log('Updated %s "%s" with '
-                        + 'new manifest.', svcapp_type,
-                        svc_or_app_uuid);
-                }
-                subcb(err);
-            });
-        },
-        function deleteMn(subcb) {
-            self.client.deleteManifest(old_mn_uuid, function (err) {
-                if (!err) {
-                    console.log(
-                        'Deleted old manifest "%s".',
-                        old_mn_uuid);
-                }
-                subcb(err);
-            });
-        }
-    ], function (err) {
-        // `err === true` is the early out
-        if (err && err !== true) {
-            cb(err);
-            return;
-        }
-        cb();
-    });
-};
-Sapiadm.prototype.do_edit_manifest.help = (
-    'Edit a manifest tied to a service or application and save it back.\n'
-    + '\n'
-    + 'SAPI does not include an UpdateManifest endpoint, so this instead\n'
-    + 'creates a new manifest, swaps the new manifest UUID into the service,\n'
-    + 'and deletes the old.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     sapiadm edit-manifest SERVICE-UUID MANIFEST-NAME\n'
-);
-
-
-// -- Helper functions
-
-
-/**
- * Edit the given text in Vi and return the edited text.
- *
- * This callback with `callback(err, updatedText, changed)` where `changed`
- * is a boolean true if the text was changed.
- */
-function editInVi(filename, beforeText, callback) {
-    var tmpPath = path.resolve(os.tmpDir(),
-        sprintf('sapiadm-%s-edit-%s', process.pid, filename));
-    fs.writeFileSync(tmpPath, beforeText, 'utf8');
-
-    var vi = cp.spawn('/usr/bin/vi', ['-f', tmpPath], {stdio: 'inherit'});
-    vi.on('exit', function (code) {
-        if (code) {
-            return (callback(code));
-        }
-        var afterText = fs.readFileSync(tmpPath, 'utf8');
-        fs.unlinkSync(tmpPath);
-        callback(null, afterText, (afterText !== beforeText));
-    });
-}
-
-function printApplication(services, instances) {
-    var width = 0;
-
-    Object.keys(services).forEach(function (uuid) {
-        width = Math.max(width, services[uuid].name.length);
-    });
-
-    var fmt = '%-' + width + 's  %-36s  %-8s';
-    console.log(sprintf(fmt, 'NAME', 'UUID', 'INSTANCES'));
-
-    Object.keys(services).forEach(function (uuid) {
-        var name = services[uuid].name;
-        var insts = instances[uuid] ? instances[uuid] : [];
-
-        insts = insts.sort(sortBy('uuid'));
-
-        console.log(sprintf(fmt, name, uuid, insts.length));
-
-        if (insts.length === 0)
-            return;
-
-        console.log('  |');
-        for (var ii = 0; ii < insts.length; ii++) {
-            console.log(sprintf(fmt,
-                ii === 0 ? '  ---> ' : '',
-                insts[ii].uuid, ''));
-        }
-    });
-}
-
-function printApplicationJSON(services, instances) {
-    Object.keys(services).forEach(function (uuid) {
-        var name = services[uuid].name;
-        var insts = instances[uuid] ? instances[uuid] : [];
-
-        for (var ii = 0; ii < insts.length; ii++) {
-            insts[ii] = insts[ii].uuid;
-        }
-
-        var out = {
-            name: name,
-            uuid: uuid,
-            instances: insts
-        };
-
-        console.log(JSON.stringify(out));
-    });
-}
-
-function readInput(opts, cb) {
-    if (opts.f) {
-        fs.readFile(opts.f, 'utf8', function (err, contents) {
-            if (err)
-                return (cb(err));
-            parseInput(contents, cb);
-        });
-    } else {
-        var content = '';
-        var calledBack = false;
-        process.stdin.on('data', function (chunk) {
-            content += chunk;
-        });
-        process.stdin.on('end', function () {
-            if (calledBack)
-                return;
-            calledBack = true;
-            parseInput(content, cb);
-        });
-        process.stdin.on('error', function (err) {
-            if (calledBack)
-                return;
-            calledBack = true;
-            cb(err);
-        });
-        process.stdin.resume();
-    }
-}
-
-function parseInput(input, cb) {
-    var changes = null;
-    try {
-        changes = JSON.parse(input);
-    } catch (e) {
-        return (cb(new Error('input is invalid JSON')));
-    }
-
-    return (cb(null, changes));
-}
-
-
-cmdln.main(Sapiadm);
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
deleted file mode 100644
index b135000..0000000
--- a/tools/jsl.web.conf
+++ /dev/null
@@ -1,137 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
-+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
-+unreferenced_argument        # argument declared but never referenced: {name}
-+unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
-+useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
-+always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define	JSON
-+define Math
-+define $
-+define XMLHttpRequest
-+define alert
-+define clearInterval
-+define clearTimeout
-+define confirm
-+define document
-+define setInterval
-+define setTimeout
-+define window
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/node-v0.8-patch-for-build-on-mac.patch b/tools/node-v0.8-patch-for-build-on-mac.patch
deleted file mode 100644
index b75f597..0000000
--- a/tools/node-v0.8-patch-for-build-on-mac.patch
+++ /dev/null
@@ -1,29 +0,0 @@
-You need to manually patch this into build/src-node for a local
-node build of v0.8 *on your Mac*, if you do that.
-
-From 532f9ffca2d9ac01e92a15a46adc0374ef75f4c4 Mon Sep 17 00:00:00 2001
-From: Fedor Indutny <fedor.indutny@gmail.com>
-Date: Thu, 31 Oct 2013 15:08:17 +0400
-Subject: [PATCH] v8: backport b3775cf3 from upstream
-
----
- deps/v8/src/spaces.h | 3 ++-
- 1 file changed, 2 insertions(+), 1 deletion(-)
-
-diff --git a/deps/v8/src/spaces.h b/deps/v8/src/spaces.h
-index b0ecc5d..d76d77d 100644
---- a/deps/v8/src/spaces.h
-+++ b/deps/v8/src/spaces.h
-@@ -321,7 +321,8 @@ class MemoryChunk {
-   Space* owner() const {
-     if ((reinterpret_cast<intptr_t>(owner_) & kFailureTagMask) ==
-         kFailureTag) {
--      return reinterpret_cast<Space*>(owner_ - kFailureTag);
-+      return reinterpret_cast<Space*>(reinterpret_cast<intptr_t>(owner_) -
-+                                      kFailureTag);
-     } else {
-       return NULL;
-     }
--- 
-1.8.5.1
-
diff --git a/tools/sapi-backfill-instance-type.js b/tools/sapi-backfill-instance-type.js
deleted file mode 100644
index ec28064..0000000
--- a/tools/sapi-backfill-instance-type.js
+++ /dev/null
@@ -1,227 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * Backfill sapi_instances bucket after adding index type field
- */
-
-var path = require('path');
-var fs = require('fs');
-var util = require('util');
-var moray = require('moray');
-var async = require('async');
-
-var config_file = path.resolve(__dirname, '..', 'etc/config.json');
-var bunyan = require('bunyan');
-
-var SERVICES_BUCKET = 'sapi_services';
-var INSTANCES_BUCKET = 'sapi_instances';
-
-var services = {};
-
-var config;
-try {
-    config = JSON.parse(fs.readFileSync(config_file, 'utf8'));
-} catch (e) {
-    console.error('Error parsing config file JSON:');
-    console.dir(e);
-    process.exit(1);
-}
-
-var log = new bunyan({
-    name: 'sapi-backfill',
-    streams: [ {
-        level: config.logLevel || 'info',
-        stream: process.stdout
-    }]
-});
-
-var morayClient = moray.createClient({
-    log: log,
-    host: config.moray.host,
-    port: config.moray.port,
-    retry: (config.retry === false ? false : {
-        retries: Infinity,
-        minTimeout: 1000,
-        maxTimeout: 60000
-    })
-});
-
-function onConnect() {
-    morayClient.removeListener('error', onError);
-    log.info('moray: connected %s', morayClient.toString());
-    verifyServicesBucket(onVerifyBucket);
-}
-
-function onConnectAttempt(number, delay) {
-    var level;
-    if (number === 0) {
-        level = 'info';
-    } else if (number < 5) {
-        level = 'warn';
-    } else {
-        level = 'error';
-    }
-
-    log[level]({
-        attempt: number,
-        delay: delay
-    }, 'moray: connection attempted');
-}
-
-function onError(err) {
-    log.error(err, 'moray: connection failed');
-}
-
-morayClient.once('connect', onConnect);
-morayClient.once('error', onError);
-morayClient.on('connectAttempt', onConnectAttempt);
-
-
-
-/*
- * Work is done here
- */
-
-function verifyServicesBucket(cb) {
-    morayClient.getBucket(SERVICES_BUCKET, function (err, bucket) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (bucket.index.type === undefined) {
-            cb(new Error('"type" index does not exist for the sapi_services ' +
-                'bucket, cannot continue with this migration.'));
-            return;
-        }
-
-        updateInstancesBucket(cb);
-    });
-}
-
-function updateInstancesBucket(cb) {
-    morayClient.getBucket(INSTANCES_BUCKET, function (err, bucket) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (bucket.index.type !== undefined) {
-            log.info('"type" index is already added');
-            cb();
-            return;
-        }
-
-        var cfg = {
-            index: {
-                uuid: { type: 'string', unique: true },
-                service_uuid: { type: 'string' },
-                type: { type: 'string' }
-            }
-        };
-        morayClient.updateBucket(INSTANCES_BUCKET, cfg, cb);
-    });
-}
-
-// We just need the services types. When type is undefined (newly migrated
-// database) then we default to make all its instances type=vm
-function loadServices(cb) {
-    var req = morayClient.findObjects(SERVICES_BUCKET, '(uuid=*)');
-
-    req.once('error', cb);
-
-    req.on('record', function (object) {
-        services[object.value.uuid] = object.value.type;
-    });
-
-    return req.once('end', function () {
-        cb(null);
-    });
-}
-
-function listInstances(cb) {
-    var instances = [];
-    var req = morayClient.sql('select * from ' + INSTANCES_BUCKET);
-
-    req.once('error', cb);
-
-    req.on('record', function (object) {
-        // push every instance uuid that does not have a type yet
-        if (object.type === null || object.type === undefined) {
-            instances.push(object.uuid);
-        } else {
-            log.info('Instance %s already has type=%s', object.uuid,
-                object.type);
-        }
-    });
-
-    req.once('end', function () {
-        return (cb(null, instances));
-    });
-}
-
-function updateInstances(instances, cb) {
-    async.forEach(instances, updateInstance, cb);
-}
-
-function updateInstance(uuid, cb) {
-    morayClient.getObject(INSTANCES_BUCKET, uuid, function (getErr, object) {
-        if (getErr) {
-            cb(getErr);
-            return;
-        }
-
-        var instance = object.value;
-        instance.type = services[instance.service_uuid] || 'vm';
-
-        morayClient.putObject(INSTANCES_BUCKET, uuid, instance,
-            { noBucketCache: true }, function (err) {
-                if (err) {
-                    log.error(err, 'Could not update instance %s', uuid);
-                    cb(err);
-                    return;
-                }
-
-                log.info('Instance %s has ben updated', uuid);
-                cb();
-        });
-    });
-}
-
-function onVerifyBucket(bucketErr) {
-    if (bucketErr) {
-        log.error(bucketErr, 'Could not update bucket');
-        process.exit(1);
-    }
-
-    loadServices(function (loadErr) {
-        if (loadErr) {
-            log.error(loadErr, 'Could not load list of services');
-            process.exit(1);
-        }
-
-        listInstances(function (err, instances) {
-            if (err) {
-                log.error(err, 'Could not list instances');
-                process.exit(1);
-            }
-
-            updateInstances(instances, function (updateErr) {
-                if (updateErr) {
-                    log.error(updateErr, 'Could not update instances');
-                    process.exit(1);
-                }
-                log.info('Instances have been updated');
-                process.exit(0);
-            });
-        });
-    });
-}
diff --git a/tools/sapi-backfill-service-type.js b/tools/sapi-backfill-service-type.js
deleted file mode 100644
index 7230740..0000000
--- a/tools/sapi-backfill-service-type.js
+++ /dev/null
@@ -1,182 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * Backfill sapi_services bucket after adding index type field
- */
-
-var path = require('path');
-var fs = require('fs');
-var util = require('util');
-var moray = require('moray');
-var async = require('async');
-
-var config_file = path.resolve(__dirname, '..', 'etc/config.json');
-var bunyan = require('bunyan');
-
-var SERVICES_BUCKET = 'sapi_services';
-
-var config;
-try {
-    config = JSON.parse(fs.readFileSync(config_file, 'utf8'));
-} catch (e) {
-    console.error('Error parsing config file JSON:');
-    console.dir(e);
-    process.exit(1);
-}
-
-var log = new bunyan({
-    name: 'sapi-backfill',
-    streams: [ {
-        level: config.logLevel || 'info',
-        stream: process.stdout
-    }]
-});
-
-var morayClient = moray.createClient({
-    log: log,
-    host: config.moray.host,
-    port: config.moray.port,
-    retry: (config.retry === false ? false : {
-        retries: Infinity,
-        minTimeout: 1000,
-        maxTimeout: 60000
-    })
-});
-
-function onConnect() {
-    morayClient.removeListener('error', onError);
-    log.info('moray: connected %s', morayClient.toString());
-    updateBucket(onBucket);
-}
-
-function onConnectAttempt(number, delay) {
-    var level;
-    if (number === 0) {
-        level = 'info';
-    } else if (number < 5) {
-        level = 'warn';
-    } else {
-        level = 'error';
-    }
-
-    log[level]({
-        attempt: number,
-        delay: delay
-    }, 'moray: connection attempted');
-}
-
-function onError(err) {
-    log.error(err, 'moray: connection failed');
-}
-
-morayClient.once('connect', onConnect);
-morayClient.once('error', onError);
-morayClient.on('connectAttempt', onConnectAttempt);
-
-
-
-/*
- * Work is done here
- */
-
-function updateBucket(cb) {
-    morayClient.getBucket(SERVICES_BUCKET, function (err, bucket) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (bucket.index.type !== undefined) {
-            log.info('"type" index is already added');
-            cb();
-            return;
-        }
-
-        var cfg = {
-            index: {
-                uuid: { type: 'string', unique: true },
-                name: { type: 'string' },
-                application_uuid: { type: 'string' },
-                type: { type: 'string' }
-            }
-        };
-        morayClient.updateBucket(SERVICES_BUCKET, cfg, cb);
-    });
-}
-
-function listServices(cb) {
-    var services = [];
-    var req = morayClient.findObjects(SERVICES_BUCKET, '(uuid=*)');
-
-    req.once('error', cb);
-
-    req.on('record', function (object) {
-        services.push(object.value);
-    });
-
-    return req.once('end', function () {
-        cb(null, services);
-    });
-}
-
-function updateServices(services, cb) {
-    async.forEach(services, updateService, cb);
-}
-
-function updateService(service, cb) {
-    var uuid = service.uuid;
-
-    if (service.type === undefined) {
-        if (service.name === 'vm-agent' || service.name === 'net-agent') {
-            service.type = 'agent';
-        } else {
-            service.type = 'vm';
-        }
-
-        morayClient.putObject(SERVICES_BUCKET, uuid, service,
-            { noBucketCache: true }, function (err) {
-            if (err) {
-                log.error(err, 'Could not update service %s', uuid);
-                cb(err);
-                return;
-            }
-
-            log.info('Service %s has ben updated', uuid);
-            cb();
-        });
-    } else {
-        log.info('Service %s already has a type %s', uuid, service.type);
-        process.nextTick(cb);
-    }
-}
-
-function onBucket(bucketErr) {
-    if (bucketErr) {
-        log.error(bucketErr, 'Could not update bucket');
-        process.exit(1);
-    }
-
-    listServices(function (err, services) {
-        if (err) {
-            log.error(err, 'Could not list services');
-            process.exit(1);
-        }
-
-        updateServices(services, function (updateErr) {
-            if (updateErr) {
-                log.error(updateErr, 'Could not update services');
-                process.exit(1);
-            }
-            log.info('Services have been updated');
-            process.exit(0);
-        });
-    });
-}
diff --git a/tools/scp-sapiadm-to b/tools/scp-sapiadm-to
deleted file mode 100755
index f5079e8..0000000
--- a/tools/scp-sapiadm-to
+++ /dev/null
@@ -1,22 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# scp cmd/sapiadm.js to sapiadm on the given HN.
-#
-
-#set -o xtrace
-set -o errexit
-
-TOP=$(cd $(dirname $0)/../; pwd)
-NODE=$1
-scp $TOP/cmd/sapiadm.js $NODE:/opt/smartdc/bin/sapiadm
-
diff --git a/tools/update_sapi_zone.sh b/tools/update_sapi_zone.sh
deleted file mode 100755
index a56a692..0000000
--- a/tools/update_sapi_zone.sh
+++ /dev/null
@@ -1,41 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# update_sapi_zone.sh: This script updates the SAPI zone on a server.
-#
-
-
-set -o xtrace
-set -o errexit
-
-if [[ $# -ne 1 ]]; then
-    echo "usage: $0 <machine>"
-    exit 1
-fi
-
-NODE=$1
-
-# Allow callers to pass additional flags to ssh and scp
-[[ -n ${SSH} ]] || SSH=ssh
-[[ -n ${SCP} ]] || SCP=scp
-
-UUID=$(${SSH} ${NODE} "vmadm lookup alias=~sapi0")
-
-rsync -avz \
-    build \
-    lib \
-    node_modules \
-    sapi_manifests \
-    server.js \
-    smf \
-    test \
-    ${NODE}:/zones/${UUID}/root/opt/smartdc/sapi
