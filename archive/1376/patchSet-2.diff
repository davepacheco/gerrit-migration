commit 0d7bb50a6555f2afd30b93409f25cd9dd22e6fd3 (refs/changes/76/1376/2)
Author: Jordan Hendricks <jordan.hendricks@joyent.com>
Date:   2017-02-01T02:47:57+00:00 (2 years, 8 months ago)
    
    MANTA-2169 Support multipart upload of a single file to Manta

diff --git a/lib/moray.js b/lib/moray.js
index 12dbed3..50fd8d1 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 //
@@ -77,6 +77,18 @@ var DIR_COUNT_SCHEMA = {
 var DIR_COUNT_VERSION = 1;
 
 
+var MANTA_UPLOADS_BUCKET = process.env.MANTA_UPLOADS_BUCKET ||
+    'manta_uploads';
+var MANTA_UPLOADS_SCHEMA = {
+    finalizingType: {
+        type: 'string'
+    },
+    uploadId: {
+        type: 'string'
+    }
+};
+var MANTA_UPLOADS_VERSION = 1;
+
 
 ///--- Internal Functions
 
@@ -97,6 +109,16 @@ function setupMantaBuckets(log, client, cb) {
                 }
             },
             log: log
+        }, {
+            client: client,
+            bucket: MANTA_UPLOADS_BUCKET,
+            opts: {
+                index: MANTA_UPLOADS_SCHEMA,
+                options: {
+                    version: MANTA_UPLOADS_VERSION
+                }
+            },
+            log: log
         }, {
             client: client,
             bucket: DELETE_LOG_BUCKET,
@@ -291,8 +313,6 @@ function recordDeleteLog(req, cb) {
 
 
 function createMetadata(options) {
-    assert.object(options, 'options');
-    assert.string(options.key, 'options.key');
     assert.string(options.owner, 'options.owner');
     assert.string(options.type, 'options.type');
     assert.optionalObject(options.headers, 'options.headers');
@@ -348,7 +368,9 @@ function createMetadata(options) {
         break;
 
     case 'directory':
-        // noop
+        if (options.upload) {
+            md.upload = options.upload;
+        }
         break;
 
     default:
@@ -533,12 +555,15 @@ Moray.prototype.initAttempt = function initAttempt() {
     });
 };
 
+
 Moray.prototype.putMetadata = function putMetadata(options, callback) {
     assert.object(options, 'options');
     assert.string(options.key, 'options.key');
     assert.string(options.requestId, 'options.requestId');
-    assert.object(options, 'options.previousMetadata');
     assert.func(callback, 'callback');
+    if (!options.upload) {
+        assert.optionalObject(options, 'options.previousMetadata');
+    }
 
     callback = once(callback);
 
@@ -556,12 +581,15 @@ Moray.prototype.putMetadata = function putMetadata(options, callback) {
     var md = createMetadata(options);
     var opts = {
         req_id: options.requestId,
-        etag: options._etag,
-        headers: {
-            'x-muskie-prev-metadata': options.previousMetadata
-        }
+        etag: options._etag
     };
 
+    if (!options.upload) {
+        opts.headers = {
+            'x-muskie-prev-metadata': options.previousMetadata
+        };
+    }
+
     log.debug({
         key: key,
         metadata: md,
@@ -597,6 +625,70 @@ Moray.prototype.putMetadata = function putMetadata(options, callback) {
 };
 
 
+Moray.prototype.putFinalizingMetadata =
+function putFinalizingMetadata(key, options, callback) {
+    assert.string(key, 'key');
+    assert.object(options, 'options');
+    assert.string(options.uploadId, 'options.uploadId');
+    assert.string(options.finalizingType, 'options.finalizingType');
+    assert.string(options.owner, 'options.owner');
+    assert.string(options.requestId, 'options.requestId');
+    assert.string(options.objectPath, 'options.objectPath');
+    assert.string(options.objectId, 'options.objectId');
+    assert.func(callback, 'callback');
+
+    callback = once(callback);
+
+    if (!this.client) {
+        setImmediate(function () {
+            callback(new Error('not connected'));
+        });
+        return;
+    }
+
+    var attempts = 0;
+    var client = this.client;
+    var log = this.log;
+    var opts = {
+        req_id: options.requestId,
+        etag: options._etag
+    };
+    var md = options;
+
+    log.debug({
+        key: key,
+        metadata: md,
+        etag: opts.etag,
+        requestId: opts.requestId
+    }, 'Moray.putFinalizingMetadata: entered');
+    (function put() {
+        client.putObject(MANTA_UPLOADS_BUCKET, key, md, opts, function (err) {
+            if (err) {
+                log.debug({
+                    err: err,
+                    key: key,
+                    requestId: opts.requestId
+                }, 'Moray.putFinalizingMetadata: error writing metadata');
+
+                if ((err.name === 'EtagConflictError' ||
+                     err.name === 'UniqueAttributeError') &&
+                    opts.etag === undefined && ++attempts < 3) {
+                    process.nextTick(put);
+                } else {
+                    callback(err);
+                }
+            } else {
+                log.debug({
+                    key: key,
+                    requestId: opts.requestId
+                }, 'Moray.putFinalizingMetadata: done');
+                callback(null, md);
+            }
+        });
+    })();
+};
+
+
 Moray.prototype.getMetadata = function getMetadata(options, callback) {
     assert.object(options, 'options');
     assert.string(options.key, 'options.key');
@@ -644,6 +736,53 @@ Moray.prototype.getMetadata = function getMetadata(options, callback) {
 };
 
 
+Moray.prototype.getFinalizingMetadata =
+function getFinalizingMetadata(options, callback) {
+    assert.object(options, 'options');
+    assert.string(options.key, 'options.key');
+    assert.string(options.requestId, 'options.requestId');
+    assert.func(callback, 'callback');
+
+    if (!this.client) {
+        setImmediate(function () {
+            callback(new Error('not connected'));
+        });
+        return;
+    }
+
+    var client = this.client;
+    var key = options.key;
+    var log = this.log;
+    var opts = {
+        req_id: options.requestId,
+        noCache: true
+    };
+
+    log.debug({
+        key: key,
+        requestId: opts.requestId
+    }, 'Moray.getFinalizingMetadata: entered');
+
+    client.getObject(MANTA_UPLOADS_BUCKET, key, opts, function (err, md) {
+        if (err) {
+            log.debug({
+                err: err,
+                key: key,
+                requestId: opts.requestId
+            }, 'Moray.getFinalizingMetadata: error reading metadata');
+            callback(err);
+        } else {
+            log.debug({
+                key: key,
+                metadata: md.value,
+                requestId: opts.requestId
+            }, 'Moray.getFinalizingMetadata: done');
+            callback(null, md.value, md);
+        }
+    });
+};
+
+
 Moray.prototype.delMetadata = function delMetadata(options, callback) {
     assert.object(options, 'options');
     assert.string(options.key, 'options.key');
