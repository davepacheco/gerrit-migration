From fb0beb91c756c4ee18815ff0d48105326ae65c0d Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Tue, 23 Aug 2016 03:06:20 +0000
Subject: [PATCH] OS-5612 lxbrand syscalls should not abuse aston()

---
 usr/src/uts/common/brand/lx/os/lx_syscall.c |  2 --
 usr/src/uts/i86pc/ml/syscall_asm_amd64.s    | 30 ++++++++++++++++-----
 2 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/os/lx_syscall.c b/usr/src/uts/common/brand/lx/os/lx_syscall.c
index 037cdebcb9..86715607ab 100644
--- a/usr/src/uts/common/brand/lx/os/lx_syscall.c
+++ b/usr/src/uts/common/brand/lx/os/lx_syscall.c
@@ -263,8 +263,6 @@ lx_syscall_return(klwp_t *lwp, int syscall_num, long ret)
 	 * emulated Linux system call:
 	 */
 	lwp->lwp_eosys = JUSTRETURN;
-	curthread->t_post_sys = 1;
-	aston(curthread);
 }
 
 static void
diff --git a/usr/src/uts/i86pc/ml/syscall_asm_amd64.s b/usr/src/uts/i86pc/ml/syscall_asm_amd64.s
index a4dd2722b6..fb04a9bdfb 100644
--- a/usr/src/uts/i86pc/ml/syscall_asm_amd64.s
+++ b/usr/src/uts/i86pc/ml/syscall_asm_amd64.s
@@ -531,12 +531,21 @@ noprod_sys_syscall:
 	addq	$8, %rsp
 
 	/*
-	 * If the alternate handler returns 0, we skip straight to the return to
-	 * usermode.  Otherwise, we resume regular system call processing.
+	 * If the alternate handler returns non-zero, the normal system call
+	 * processing is resumed.
 	 */
 	testl	%eax, %eax
 	popq	%rax
-	jz	_syscall_after_brand
+	jnz	_syscall_no_brand
+
+	/*
+	 * For branded syscalls which were handled in-kernel, shuffle the
+	 * register state as would be done by the native handler before jumping
+	 * to the post-syscall logic.
+	 */
+	movq	REGOFF_RAX(%rsp), %r12
+	movq	REGOFF_RDX(%rsp), %r13
+	jmp	_syscall_after_brand
 
 _syscall_no_brand:
 	movw	%ax, T_SYSNUM(%r15)
@@ -831,11 +840,20 @@ _syscall32_save:
 	call	*%rax
 
 	/*
-	 * If the alternate handler returns 0, we skip straight to the return
-	 * to usermode.  Otherwise, we resume regular system call processing.
+	 * If the alternate handler returns non-zero, the normal system call
+	 * processing is resumed.
 	 */
 	testl	%eax, %eax
-	jz	_syscall32_after_brand
+	jnz	_syscall32_no_brand
+
+	/*
+	 * For branded syscalls which were handled in-kernel, shuffle the
+	 * register state as would be done by the native handler before jumping
+	 * to the post-syscall logic.
+	 */
+	movl	REGOFF_RAX(%rsp), %r12d
+	movl	REGOFF_RDX(%rsp), %r13d
+	jmp	_syscall32_after_brand
 
 _syscall32_no_brand:
 	/*
-- 
2.21.0

