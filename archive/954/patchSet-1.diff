From ac4a220e2e2f97e023cfc7db9933e053119db35b Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 25 Nov 2016 11:23:00 -0800
Subject: [PATCH] IMGAPI-603 sdc-imgapi-cli needs node v4 support

---
 CHANGES.md                      |   3 +
 Makefile                        |  41 +-------
 lib/cli.js                      |  62 +++++-------
 lib/errors.js                   |   2 +-
 package.json                    |  26 ++---
 test/basics.test.js             |  18 +---
 test/runtests                   | 169 --------------------------------
 test/tap4nodeunit.js            |  68 -------------
 tools/mk/Makefile.manpages.defs | 128 ++++++++++++++++++++++++
 tools/mk/Makefile.manpages.targ |  28 ++++++
 tools/mk/Makefile.node.targ     |   2 +-
 tools/mk/Makefile.targ          |  11 ++-
 12 files changed, 211 insertions(+), 347 deletions(-)
 delete mode 100755 test/runtests
 delete mode 100644 test/tap4nodeunit.js
 create mode 100644 tools/mk/Makefile.manpages.defs
 create mode 100644 tools/mk/Makefile.manpages.targ

diff --git a/CHANGES.md b/CHANGES.md
index e50e0c6..237044c 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,8 @@
 # joyent-imgadm, sdc-imgadm, updates-imgadm Changelog
 
+## not yet released
+
+- IMGAPI-603 Support node v4 and later. Drop support for node v0.8.
 
 ## 2.2.2
 
diff --git a/Makefile b/Makefile
index f35ad37..3043141 100644
--- a/Makefile
+++ b/Makefile
@@ -5,30 +5,20 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile for IMGAPI
+# Copyright 2016 Joyent, Inc.
 #
 
 #
 # Vars, Tools, Files, Flags
 #
-NAME		:= imgapi-cli
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v '/tmp/')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
-NODEUNIT	:= ./node_modules/.bin/nodeunit
 
 include ./tools/mk/Makefile.defs
 
-RELEASE_TARBALL	:= $(NAME)-pkg-$(STAMP).tar.bz2
-RELSTAGEDIR          := /tmp/$(STAMP)
-
-
 
 #
 # Targets
@@ -38,33 +28,8 @@ all:
 	npm install
 
 .PHONY: test
-test:
-	$(NODEUNIT) test/*.test.js
-
-.PHONY: release
-release: all
-	@echo "Building $(RELEASE_TARBALL)"
-	mkdir -p $(RELSTAGEDIR)/$(NAME)
-	cp -r \
-		$(TOP)/bin \
-		$(TOP)/build \
-		$(TOP)/lib \
-		$(TOP)/node_modules \
-		$(TOP)/package.json \
-		$(TOP)/README.md \
-		$(TOP)/test \
-		$(RELSTAGEDIR)/$(NAME)
-	(cd $(RELSTAGEDIR) && $(TAR) -jcf $(TOP)/$(RELEASE_TARBALL) $(NAME))
-	@rm -rf $(RELSTAGEDIR)
-
-.PHONY: publish
-publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		@echo "error: 'BITS_DIR' must be set for 'publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/$(NAME)
-	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
+test: | node_modules/.bin/tape
+	node_modules/.bin/tape test/*.test.js
 
 DISTCLEAN_FILES += node_modules
 
diff --git a/lib/cli.js b/lib/cli.js
index 006358c..4c6f603 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -12,26 +12,25 @@
  * The main entry point for an imgapi-cli instance.
  */
 
-var util = require('util'),
-    format = util.format;
-var path = require('path');
-var fs = require('fs');
-var crypto = require('crypto');
 var assert = require('assert-plus');
-var nopt = require('nopt');
-var sprintf = require('extsprintf').sprintf;
-var imgapi = require('sdc-clients/lib/imgapi');
 var bunyan = require('bunyan');
+var crypto = require('crypto');
+var fs = require('fs');
+var imgapi = require('sdc-clients/lib/imgapi');
+var nopt = require('nopt');
+var path = require('path');
 var ProgressBar = require('progbar').ProgressBar;
-var restify = require('sdc-clients/node_modules/restify');
+var sprintf = require('extsprintf').sprintf;
 var strsplit = require('strsplit');
 var tabula = require('tabula');
+var util = require('util');
 var vasync = require('vasync');
 
-var common = require('./common'),
-    objCopy = common.objCopy;
+var common = require('./common');
 var errors = require('./errors');
 
+var format = util.format;
+var objCopy = common.objCopy;
 
 
 //---- internal support stuff
@@ -42,13 +41,6 @@ if (process.env.HOME) {
 }
 
 
-var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
-function assertUuid(uuid) {
-    if (!UUID_RE.test(uuid)) {
-        throw new errors.InvalidUUIDError(uuid);
-    }
-}
-
 // The name of the event on a write stream indicating it is done.
 var nodeVer = process.versions.node.split('.').map(Number);
 var writeStreamFinishEvent = 'finish';
@@ -272,9 +264,7 @@ CLI.prototype.main = function main(argv, callback) {
                 stream: process.stderr,
                 level: level
             }],
-            src: src,
-            // https://github.com/mcavage/node-restify/pull/501 is fixed
-            serializers: restify.bunyan.serializers
+            src: src
         });
         self.log.debug({opts: opts, argv: argv}, 'parsed argv');
         var imgapiOpts = {
@@ -831,7 +821,7 @@ CLI.prototype.do_get = function do_get(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     var getOpts = {};
     if (opts.inclAdminFields) {
@@ -882,7 +872,7 @@ CLI.prototype.do_get_file = function do_get_file(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
     assert.ok(!(opts.output && opts.outputUuidExt),
         'cannot use both "-o <file>" and "-O" options');
 
@@ -997,7 +987,7 @@ CLI.prototype.do_get_icon = function do_get_icon(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
     assert.ok(!(opts.output && opts.outputUuidExt),
         'cannot use both "-o <file>" and "-O" options');
 
@@ -1095,7 +1085,7 @@ CLI.prototype.do_delete = function do_delete(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
     var delOpts = {};
     if (opts['force-all-channels']) {
         delOpts.forceAllChannels = true;
@@ -1384,7 +1374,7 @@ CLI.prototype.do_update = function do_update(subcmd, opts, args, callback) {
     }
 
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     // When -f or stdin is passed only 1 arg (uuid) is allowed
     // When property=value then n + 1 where n is the number of properties
@@ -1496,7 +1486,7 @@ CLI.prototype.do_import = function do_import(subcmd, opts, args, callback) {
     } else if (args.length === 1) {
         // `*-imgadm import -S <source-url> <uuid>`
         uuid = args[0];
-        assertUuid(uuid);
+        assert.uuid(uuid, 'uuid');
 
         if (!opts['source-url']) {
             return callback(new errors.UsageError('no source URL given'));
@@ -1712,7 +1702,7 @@ CLI.prototype.do_add_file = function do_add_file(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     if (!opts.file) {
         return callback(new errors.UsageError('no image file path given'));
@@ -1846,7 +1836,7 @@ CLI.prototype.do_add_icon = function do_add_icon(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     if (!opts.file) {
         return callback(new errors.UsageError('no icon file path given'));
@@ -1960,7 +1950,7 @@ function do_delete_icon(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     self.client.deleteImageIcon(uuid, function (err, image, res) {
         self.log.trace({err: err, image: image, res: res}, 'DeleteImageIcon');
@@ -1987,7 +1977,7 @@ CLI.prototype.do_export = function do_export(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     var mpath = opts['output-template'];
     if (!mpath) {
@@ -2040,7 +2030,7 @@ CLI.prototype.do_activate = function do_activate(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     self.client.activateImage(uuid, function (err, image, res) {
         self.log.trace({err: err, image: image, res: res}, 'ActivateImage');
@@ -2071,7 +2061,7 @@ CLI.prototype.do_disable = function do_disable(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     self.client.disableImage(uuid, function (err, image, res) {
         self.log.trace({err: err, image: image, res: res}, 'DisableImage');
@@ -2103,7 +2093,7 @@ CLI.prototype.do_enable = function do_enable(subcmd, opts, args, callback) {
             'incorrect number of args (%d): %s', args.length, args.join(' '))));
     }
     var uuid = args[0];
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     self.client.enableImage(uuid, function (err, image, res) {
         self.log.trace({err: err, image: image, res: res}, 'EnableImage');
@@ -2135,7 +2125,7 @@ CLI.prototype.do_add_acl = function do_add_acl(subcmd, opts, args, callback) {
             'expecting image UUID as first argument'));
     }
     var uuid = args.shift();
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     if (args.length === 0) {
         return callback(new errors.UsageError(
@@ -2170,7 +2160,7 @@ function do_remove_acl(subcmd, opts, args, callback) {
             'expecting image UUID as first argument'));
     }
     var uuid = args.shift();
-    assertUuid(uuid);
+    assert.uuid(uuid, 'uuid');
 
     if (args.length === 0) {
         return callback(new errors.UsageError(
diff --git a/lib/errors.js b/lib/errors.js
index 71b3467..0d2645d 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -34,7 +34,7 @@ function ImgapiCliError(options) {
     assert.string(options.message, 'options.message');
     assert.string(options.code, 'options.code');
     assert.optionalObject(options.cause, 'options.cause');
-    assert.optionalNumber(options.statusCode, 'options.statusCode');
+    assert.optionalFinite(options.statusCode, 'options.statusCode');
     var self = this;
 
     var args = [];
diff --git a/package.json b/package.json
index e42dc30..ea71035 100644
--- a/package.json
+++ b/package.json
@@ -5,22 +5,22 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "assert-plus": "0.1.5",
-    "async": "0.1.22",
-    "bunyan": "1.3.4",
-    "extsprintf": "1.0.1",
-    "mkdirp": "0.3.5",
+    "assert-plus": "1.0.0",
+    "bunyan": "1.8.5",
+    "extsprintf": "1.3.0",
+    "mkdirp": "0.5.1",
     "nopt": "2.0.0",
-    "progbar": "0.0.2",
-    "sdc-clients": "9.5.1",
+    "progbar": "1.1.1",
+    "sdc-clients": "10.0.3",
     "strsplit": "1.0.0",
-    "tabula": "1.2.2",
-    "vasync": "1.5.0",
-    "verror": "1.3.4"
+    "tabula": "1.8.0",
+    "vasync": "1.6.4",
+    "verror": "1.9.0"
   },
   "devDependencies": {
-    "jshint": "2.1",
-    "nodeunit": "0.8.1"
+    "jshint": "~2.9.4",
+    "nodeunit": "~0.10.2",
+    "tape": "4.6.3"
   },
   "bin": {
     "joyent-imgadm": "./bin/joyent-imgadm",
@@ -28,7 +28,7 @@
     "updates-imgadm": "./bin/updates-imgadm"
   },
   "engines": {
-    "node": ">=0.8"
+    "node": ">=0.10"
   },
   "license": "MPL-2.0"
 }
diff --git a/test/basics.test.js b/test/basics.test.js
index fc40a3e..7284a63 100644
--- a/test/basics.test.js
+++ b/test/basics.test.js
@@ -5,31 +5,17 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
  * Some base imgapi-cli tests.
  */
 
-var format = require('util').format;
 var exec = require('child_process').exec;
+var test = require('tape');
 
 
-// node-tap API
-if (require.cache[__dirname + '/tap4nodeunit.js'])
-    delete require.cache[__dirname + '/tap4nodeunit.js'];
-var tap4nodeunit = require('./tap4nodeunit.js');
-var after = tap4nodeunit.after;
-var before = tap4nodeunit.before;
-var test = tap4nodeunit.test;
-
-
-
-before(function (next) {
-    next();
-});
-
 test('imgapi-cli --version', function (t) {
     exec('./bin/imgapi-cli --version', function (err, stdout, stderr) {
         t.ifError(err, err);
diff --git a/test/runtests b/test/runtests
deleted file mode 100755
index 296feca..0000000
--- a/test/runtests
+++ /dev/null
@@ -1,169 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Run the imgadm tests. This is expected to be run from a SmartOS GZ.
-#
-# This creates .tap files in the OUTPUT_DIR (/var/tmp/imgadmtest) that
-# can be processed by a TAP reader. Testing config and log files are
-# also placed in this dir.
-#
-# Run `./runtests -h` for usage info.
-#
-
-if [ "$TRACE" != "" ]; then
-    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-
-#---- support functions
-
-function fatal
-{
-    echo "$(basename $0): fatal error: $*"
-    exit 1
-}
-
-function cleanup () {
-    local status=$?
-    if [[ $status -ne 0 ]]; then
-        echo "error $status (run 'TRACE=1 $0' for more info)"
-    fi
-}
-
-function usage
-{
-    echo "Usage:"
-    echo "  runtests [OPTIONS...]"
-    echo ""
-    echo "Options:"
-    echo "  -h           Print this help and exit."
-    echo "  -f FILTER    Filter pattern (substring match) for test files to run."
-    echo "  -r REPORTER  Use an alternate nodeunit reporter. Default 'tap'."
-}
-
-
-
-#---- mainline
-
-trap 'cleanup' EXIT
-
-start_time=$(date +%s)
-
-TOP=$(cd $(dirname $0)/../; pwd)
-NODE_INSTALL=$TOP/build/node
-NODEUNIT=./node_modules/.bin/nodeunit
-
-
-# Options.
-opt_test_pattern=
-opt_reporter=tap
-while getopts "hf:" opt
-do
-    case "$opt" in
-        h)
-            usage
-            exit 0
-            ;;
-        f)
-            opt_test_pattern=$OPTARG
-            ;;
-        r)
-            opt_reporter=$OPTARG
-            ;;
-        *)
-            usage
-            exit 1
-            ;;
-    esac
-done
-
-
-# Guard from running in production.
-if [[ -z "$opt_local" ]]; then
-if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
-    cat <<EOF
-To run this test you must create the file:
-
-    /lib/sdc/.sdc-test-no-production-data
-
-after ensuring you have no production data on this SDC.
-EOF
-    exit 2
-fi
-fi
-
-
-# Setup a clean output dir.
-OUTPUT_DIR=/var/tmp/imgadmtest
-echo "# Setup a clean output dir ($OUTPUT_DIR)."
-rm -rf $OUTPUT_DIR
-mkdir -p $OUTPUT_DIR
-
-
-# Simplify: just run everything from $TOP.
-cd $TOP
-
-
-# Run the tests.
-echo ""
-retval=0
-test_files=$(ls -1 test/*.test.js)
-if [[ -n "$opt_test_pattern" ]]; then
-    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
-    echo "# Running filtered set of test files: $test_files"
-fi
-if [[ -n "$test_files" ]]; then
-    if [[ $opt_reporter == "tap" ]]; then
-        PATH=$NODE_INSTALL/bin:$PATH $NODEUNIT --reporter $opt_reporter $test_files \
-            | tee $OUTPUT_DIR/imgadm.tap
-    else
-        PATH=$NODE_INSTALL/bin:$PATH $NODEUNIT --reporter $opt_reporter $test_files
-        retval=$?
-    fi
-fi
-
-
-if [[ $opt_reporter == "tap" ]]; then
-    echo ""
-    echo "# test output:"
-    ls $OUTPUT_DIR/*.tap
-
-    # Colored summary of results (borrowed from smartos-live.git/src/vm/run-tests).
-    echo ""
-    echo "# test results:"
-
-    end_time=$(date +%s)
-    elapsed=$((${end_time} - ${start_time}))
-
-    tests=$(grep "^# tests [0-9]" $OUTPUT_DIR/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-    passed=$(grep "^# pass  [0-9]" $OUTPUT_DIR/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-    [[ -z ${tests} ]] && tests=0
-    [[ -z ${passed} ]] && passed=0
-    fail=$((${tests} - ${passed}))
-
-    echo "# Completed in ${elapsed} seconds."
-    echo -e "# \033[32mPASS: ${passed} / ${tests}\033[39m"
-    if [[ ${fail} -gt 0 ]]; then
-        echo -e "# \033[31mFAIL: ${fail} / ${tests}\033[39m"
-    fi
-    echo ""
-
-    if [[ ${tests} != ${passed} ]]; then
-        exit 1
-    fi
-else
-    exit $retval
-fi
diff --git a/test/tap4nodeunit.js b/test/tap4nodeunit.js
deleted file mode 100644
index d11b27d..0000000
--- a/test/tap4nodeunit.js
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- *
- * Help nodeunit API feel like node-tap's.
- *
- * Usage:
- *      if (require.cache[__dirname + '/tap4nodeunit.js'])
- *          delete require.cache[__dirname + '/tap4nodeunit.js'];
- *      var tap4nodeunit = require('./tap4nodeunit.js');
- *      var after = tap4nodeunit.after;
- *      var before = tap4nodeunit.before;
- *      var test = tap4nodeunit.test;
- */
-
-
-
-//---- Exports
-
-module.exports = {
-
-        after: function after(teardown) {
-                module.parent.exports.tearDown = function _teardown(callback) {
-                        try {
-                                teardown.call(this, callback);
-                        } catch (e) {
-                                console.error('after:\n' + e.stack);
-                                process.exit(1);
-                        }
-                };
-        },
-
-        before: function before(setup) {
-                module.parent.exports.setUp = function _setup(callback) {
-                        try {
-                                setup.call(this, callback);
-                        } catch (e) {
-                                console.error('before:\n' + e.stack);
-                                process.exit(1);
-                        }
-                };
-        },
-
-        test: function test(name, tester) {
-                module.parent.exports[name] = function _(t) {
-                        var _done = false;
-                        t.end = function end() {
-                                if (!_done) {
-                                        _done = true;
-                                        t.done();
-                                }
-                        };
-                        t.notOk = function notOk(ok, message) {
-                                return (t.ok(!ok, message));
-                        };
-
-                        tester.call(this, t);
-                };
-        }
-};
diff --git a/tools/mk/Makefile.manpages.defs b/tools/mk/Makefile.manpages.defs
new file mode 100644
index 0000000..6da7876
--- /dev/null
+++ b/tools/mk/Makefile.manpages.defs
@@ -0,0 +1,128 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.defs: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile is used along with Makefile.manpages.targ to build section
+# manpages for the current repository from Markdown sources using the md2man
+# tool.  You can build several different sections of manpages with this
+# Makefile, but you'll need to include the Makefile once for each section with a
+# different value of MAN_SECTION.  Required input variables include:
+#
+#     MAN_SECTION	defines which section's manpages will be built
+#     			(e.g., "1")
+#
+#     MAN_INROOT	defines the root of a directory tree containing man
+#     			pages source files in Markdown format.  The directory
+#     			tree should be organized as:
+#
+#     			    $(MAN_INROOT)/man$(MAN_SECTION)/*.md
+#
+#     MAN_OUTROOT	defines the root of a directory tree that will contain
+#     			the generated man pages.  The directory tree will be
+#     			organized as:
+#
+#     			    $(MAN_OUTROOT)/man$(MAN_SECTION)/*.$(MAN_SECTION)
+#
+#			This should mirror the typical man page directory
+#			structure, and should probably be alongside a
+#			corresponding "bin" directory to leverage the way
+#			man(1)'s looks up man pages for binaries.
+#
+# A common configuration would be to set MAN_INROOT = "docs/man" and
+# MAN_OUTROOT = "man".  In that case, you might have source files:
+#
+#     ./bin/mytool
+#     ./bin/my-other-tool
+#     ./docs/man/man1/mytool.md
+#     ./docs/man/man1/my-other-tool.md
+#
+# and that will generate files:
+#
+#     ./man/man1/mytool.1
+#     ./man/man1/my-other-tool.1
+#
+# Optional input variables include:
+#
+#     MD2MAN		tool to generate man pages from Markdown sources
+#     			The recommended tool is md2man-roff, available at
+#     			https://github.com/sunaku/md2man.
+#
+#     MKDIRP		should generally be "mkdir -p"
+#
+# This Makefile produces Make variables:
+#
+#     MAN_$(MAN_SECTION)_OUTPUTS	generated manual pages.  You can depend
+#     					on these in order to build them in
+#     					whatever top-level targets you want.
+#
+#     MAN_OUTPUTS			will be extended to include
+#     					MAN_$(MAN_SECTION)_OUTPUTS.
+#
+# There are two basic ways this tends to be used:
+#
+#     (1) Building manpages is part of the normal build.  Have the default
+#         target (usually "all") depends on either "manpages" or the built man
+#         pages directly (via MAN_OUTPAGES).  In this case, only the man pages
+#         _sources_ would be checked into source control.
+#
+#     (2) Building manpages is an ad-hoc operation outside the normal build
+#         process.  Developers that change the man page sources are expected to
+#         build the man pages and commit the generated pages into source
+#         control.
+#
+# Option (1) is preferred, since option (2) violates the basic tenets of
+# software engineering that processes should generally be automated and that
+# generated files should not be checked into source control.  The problem is
+# that in practice, the tools that we use to generate man pages are not widely
+# installed on most users' systems, even developers' systems, so it's less than
+# ideal to require them for the main build.  This is especially true for many of
+# our Node modules, where there's traditionally no difference between the
+# published npm package and the repository source itself.  As a result, we use
+# option (2) in most places.  However, this Makefile supports both modes.
+#
+
+MAN_SECTION			?= $(error MAN_SECTION is not defined)
+MAN_INROOT			?= $(error MAN_INROOT is not defined)
+MAN_OUTROOT			?= $(error MAN_OUTROOT is not defined)
+MD2MAN				?= md2man-roff
+MKDIRP				?= mkdir -p
+
+#
+# Define some convenience variables for referring to the input and output
+# directories for this section's man pages.  These variables must have
+# MAN_SECTION in the name, and must use eager binding (":="), since MAN_SECTION
+# may change after this file is included.
+#
+MAN_INDIR_$(MAN_SECTION)	:= $(MAN_INROOT)/man$(MAN_SECTION)
+MAN_OUTDIR_$(MAN_SECTION)	:= $(MAN_OUTROOT)/man$(MAN_SECTION)
+
+#
+# Define the lists of input and output files for this section's man pages.  The
+# list of inputs is just the list of Markdown files in the input directory.  We
+# construct the list of outputs by taking that same list and replacing the
+# section-specific input directory with the section-specific output directory
+# and changing the file extension.
+#
+MAN_$(MAN_SECTION)_INPUTS	:= $(wildcard $(MAN_INDIR_$(MAN_SECTION))/*.md)
+MAN_$(MAN_SECTION)_OUTPUTS_TMP  := \
+    $(MAN_$(MAN_SECTION)_INPUTS:$(MAN_INDIR_$(MAN_SECTION))/%=$(MAN_OUTDIR_$(MAN_SECTION))/%)
+MAN_$(MAN_SECTION)_OUTPUTS	:= \
+    $(MAN_$(MAN_SECTION)_OUTPUTS_TMP:%.md=%.$(MAN_SECTION))
+
+MAN_OUTPUTS			:= $(MAN_OUTPUTS) $(MAN_$(MAN_SECTION)_OUTPUTS)
diff --git a/tools/mk/Makefile.manpages.targ b/tools/mk/Makefile.manpages.targ
new file mode 100644
index 0000000..11f242b
--- /dev/null
+++ b/tools/mk/Makefile.manpages.targ
@@ -0,0 +1,28 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.targ: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# See Makefile.manpages.defs.
+#
+
+$(MAN_$(MAN_SECTION)_OUTPUTS): $(MAN_OUTDIR_$(MAN_SECTION))/%.$(MAN_SECTION): $(MAN_INDIR_$(MAN_SECTION))/%.md | $(MAN_OUTDIR_$(MAN_SECTION))
+	$(MD2MAN) $^ > $@
+
+$(MAN_OUTDIR_$(MAN_SECTION)):
+	$(MKDIRP) $@
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
index abdc616..bf53f78 100644
--- a/tools/mk/Makefile.node.targ
+++ b/tools/mk/Makefile.node.targ
@@ -29,7 +29,7 @@ else
 $(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
 	(mkdir -p $(BUILD) \
 		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
 		&& cd src-node \
 		&& git checkout $(NODE_PREBUILT_VERSION) \
 		&& ./configure $(NODE_CONFIG_FLAGS) \
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 5c48a67..ee7688a 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -89,9 +89,9 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
@@ -108,7 +108,7 @@ JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -264,7 +264,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,6 +294,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
-- 
2.21.0

