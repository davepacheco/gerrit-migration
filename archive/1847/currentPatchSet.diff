commit a963f3a5076bc27e738a38d4d5ba5f714fb2b7b7 (refs/changes/47/1847/5)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-04-26T12:52:45-07:00 (2 years, 5 months ago)
    
    DOCKER-1042 failure in triton docker tests assuming nginx:latest exposes port 443
    Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>
    Approved by: Todd Whiteman <todd.whiteman@joyent.com>

diff --git a/test/images/README.md b/test/images/README.md
new file mode 100644
index 0000000..ee0811b
--- /dev/null
+++ b/test/images/README.md
@@ -0,0 +1,7 @@
+This directory holds the data (typically Dockerfile's) needed to
+build and push docker images used by the sdc-docker test suite.
+By convention, our test images are published to:
+    https://hub.docker.com/u/joyentunsupported/dashboard/
+
+These images need to be *manually* built and pushed after any changes,
+before running the test suite.
diff --git a/test/images/test-run-ports/Dockerfile b/test/images/test-run-ports/Dockerfile
new file mode 100644
index 0000000..d6c2c27
--- /dev/null
+++ b/test/images/test-run-ports/Dockerfile
@@ -0,0 +1,16 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+# We use "nginx" so we can ports actually in use. We use the "-alpine" version
+# because it is much smaller.
+FROM nginx:1.13.0-alpine
+LABEL description="a test image for https://github.com/joyent/sdc-docker/blob/master/test/integration/cli-run-ports.test.js"
+EXPOSE 80 443
+CMD ["nginx", "-g", "daemon off;"]
diff --git a/test/images/test-run-ports/Makefile b/test/images/test-run-ports/Makefile
new file mode 100644
index 0000000..762c2b0
--- /dev/null
+++ b/test/images/test-run-ports/Makefile
@@ -0,0 +1,19 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+NAME=joyentunsupported/test-run-ports
+VERSION=1.0.0
+
+all:
+	docker build -t $(NAME):$(VERSION) -t $(NAME):latest .
+
+publish: all
+	docker push $(NAME):$(VERSION)
+	docker push $(NAME):latest
diff --git a/test/images/test-run-ports/README.md b/test/images/test-run-ports/README.md
new file mode 100644
index 0000000..1f3970c
--- /dev/null
+++ b/test/images/test-run-ports/README.md
@@ -0,0 +1,2 @@
+A simple image that exposes TCP ports 80 and 443 for use by
+test/integration/cli-run-ports.test.js.
diff --git a/test/integration/cli-run-ports.test.js b/test/integration/cli-run-ports.test.js
index 8b31691..a4828ed 100644
--- a/test/integration/cli-run-ports.test.js
+++ b/test/integration/cli-run-ports.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -25,6 +25,8 @@ var test = require('tape');
 
 
 // --- Globals
+
+var TEST_IMAGE = 'joyentunsupported/test-run-ports:1.0.0';
 var MAX_PORTS_PER_RULE = 8;
 var FWRULE_VERSION = 1;
 
@@ -155,16 +157,16 @@ test('setup', function (tt) {
         });
     });
 
-    tt.test('pull nginx image', function (t) {
+    tt.test('pull ' + TEST_IMAGE + ' image', function (t) {
         cli.pull(t, {
-            image: 'nginx:latest'
+            image: TEST_IMAGE
         });
     });
 
 
-    tt.test('inspect nginx image', function (t) {
+    tt.test('inspect ' + TEST_IMAGE + ' image', function (t) {
         cli.inspect(t, {
-            id: 'nginx:latest'
+            id: TEST_IMAGE
         }, function (err, img) {
             if (img) {
                 EXPOSED_PORTS = img.Config.ExposedPorts;
@@ -181,7 +183,7 @@ test('setup', function (tt) {
 test('no port args', function (tt) {
 
     tt.test('docker run: no port args', function (t) {
-        cli.run(t, { args: '-d nginx:latest' });
+        cli.run(t, { args: '-d ' + TEST_IMAGE });
     });
 
 
@@ -263,7 +265,7 @@ test('no port args', function (tt) {
 test('-P', function (tt) {
 
     tt.test('docker run -P', function (t) {
-        cli.run(t, { args: '-P -d nginx:latest' });
+        cli.run(t, { args: '-P -d ' + TEST_IMAGE });
     });
 
 
@@ -338,7 +340,7 @@ test('-P', function (tt) {
 test('-p', function (tt) {
 
     tt.test('docker run -p 80:80', function (t) {
-        cli.run(t, { args: '-p 80:80 -d nginx:latest' });
+        cli.run(t, { args: '-p 80:80 -d ' + TEST_IMAGE });
     });
 
 
@@ -410,7 +412,7 @@ test('-p', function (tt) {
     tt.test('docker run -p 8080:80', function (t) {
         // We don't allow remapping of ports (for now, at least):
         cli.run(t, {
-            args: '-p 8080:80 -d nginx:latest',
+            args: '-p 8080:80 -d ' + TEST_IMAGE,
             expectedErr: 'Error response from daemon: publish port: '
                 + 'remapping of port numbers not allowed'
         });
@@ -422,7 +424,7 @@ test('-p', function (tt) {
 test('-P and -p', function (tt) {
 
     tt.test('docker run -P -p 54:54/udp -p 90:90', function (t) {
-        cli.run(t, { args: '-P -p 54:54/udp -p 90:90 -d nginx:latest' });
+        cli.run(t, { args: '-P -p 54:54/udp -p 90:90 -d ' + TEST_IMAGE });
     });
 
 
@@ -515,8 +517,8 @@ test('-p range', function (tt) {
 
     tt.test(fmt('docker run -p %d-%d:%d-%d', START_PORT, END_PORT,
         START_PORT, END_PORT), function (t) {
-        cli.run(t, { args: fmt('-p %d-%d:%d-%d/tcp -d nginx:latest', START_PORT,
-            END_PORT, START_PORT, END_PORT) });
+        cli.run(t, { args: fmt('-p %d-%d:%d-%d/tcp -d ' + TEST_IMAGE,
+            START_PORT, END_PORT, START_PORT, END_PORT) });
     });
 
 
@@ -626,7 +628,7 @@ test('-p range', function (tt) {
     // Make sure the limit of 32 ports is enforced:
     tt.test(fmt('docker run %s', large_range), function (t) {
         cli.run(t, {
-            args: fmt('%s -d nginx:latest', large_range),
+            args: fmt('%s -d ' + TEST_IMAGE, large_range),
             expectedErr: 'Error response from daemon: publish port: '
                 + fmt('only support exposing %d TCP %s',
                     constants.MAX_EXPOSED_PORTS,
