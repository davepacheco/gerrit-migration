From 0c2f4212985e6f92697384b5c37a8b77df5a4826 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Mon, 8 Aug 2016 11:34:18 -0700
Subject: [PATCH] TOOLS-1510 Make updating VMAPI moray indices not need changes
 to sdcadm

---
 lib/apis/moray.js                             | 64 +++++++++++++
 tools/migrations/add-docker-index.js          | 94 ------------------
 .../add-all-new-indices-no-reindex-needed.js  | 96 +++++++++++++++++++
 .../add-docker-index.js                       | 42 ++++++++
 4 files changed, 202 insertions(+), 94 deletions(-)
 delete mode 100644 tools/migrations/add-docker-index.js
 create mode 100644 tools/migrations/add-new-indices-no-reindex-needed/add-all-new-indices-no-reindex-needed.js
 create mode 100644 tools/migrations/add-new-indices-no-reindex-needed/add-docker-index.js

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 179559f..affeebe 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -1033,4 +1033,68 @@ Moray.prototype.delVmRoleTags = function (uuid, cb) {
     });
 };
 
+/*
+ * Add the index "index" to the VMAPI's bucket named 'bucketName'. "index" must
+ * be an object with the following properties:
+ *
+ * - name: a string that represents the name of the index.
+ *
+ * - type: a string that represents the type of the data indexed. Can be
+ *   'string', 'number', 'boolean' or 'inet', or any of these strings within
+ *   square brackets to indicate an index on a property that stores lists of
+ *   each of these types.
+ *
+ * Calls the function "callback" with an error object as its first parameter if
+ * an error occured.
+ */
+Moray.prototype._addIndex = function _addIndex(bucketName, index, callback) {
+    assert.string(bucketName, 'bucketName');
+    assert.object(index, 'index');
+    assert.string(index.name, 'index.name');
+    assert.string(index.type, 'index.type');
+    assert.func(callback, 'callback');
+
+    var self = this;
+
+    this.connection.getBucket(bucketName, function (err, bucketObject) {
+        if (err) {
+            return callback(err);
+        } else if (bucketObject.index[index.name] !== undefined) {
+            self.log.info('"' + index.name + '" index already exists, '+
+                'no need to add');
+            return callback();
+        }
+
+        self.log.info('adding "' + index.name + '" index of type ' +
+            index.type);
+        bucketObject.index[index.name] = { type: index.type };
+        self.connection.updateBucket(bucketName, {
+            index: bucketObject.index
+        }, callback);
+    });
+};
+
+/*
+ * Add the index "index" to the VMAPI's bucket that stores VM objects. "index"
+ * must be an object with the following properties:
+ *
+ * - name: a string that represents the name of the index.
+ *
+ * - type: a string that represents the type of the data indexed. Can be
+ *   'string', 'number', 'boolean' or 'inet', or any of these strings within
+ *   square brackets to indicate an index on a property that stores lists of
+ *   each of these types.
+ *
+ * Calls the function "callback" with an error object as its first parameter if
+ * an error occured.
+ */
+Moray.prototype.addVmIndex = function addVmIndex(index, callback) {
+    assert.object(index, 'index');
+    assert.string(index.name, 'index.name');
+    assert.string(index.type, 'index.type');
+    assert.func(callback, 'callback');
+
+    this._addIndex(VMS_BUCKET_NAME, index, callback);
+};
+
 module.exports = Moray;
diff --git a/tools/migrations/add-docker-index.js b/tools/migrations/add-docker-index.js
deleted file mode 100644
index a45719f..0000000
--- a/tools/migrations/add-docker-index.js
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2016, Joyent, Inc.
- */
-
-var path = require('path');
-
-var bunyan = require('bunyan');
-var restify = require('restify');
-
-var configLoader = require('../../lib/config-loader');
-var moray = require('moray');
-
-var configFilePath = path.join(__dirname, '..', '..', 'config.json');
-var config = configLoader.loadConfig(configFilePath);
-
-var log = new bunyan({
-    name: 'add-docker-index',
-    level: config.logLevel || 'debug',
-    serializers: restify.bunyan.serializers
-});
-
-log.info({config: config}, 'Loaded configuration');
-
-/*
- * NOTE: package_version and package_name are deprecated per ZAPI-696 and should
- * be removed whenever this becomes possible.
- */
-var BUCKET = {
-    name: 'vmapi_vms',
-    index: {
-        uuid: { type: 'string', unique: true},
-        owner_uuid: { type: 'string' },
-        image_uuid: { type: 'string' },
-        billing_id: { type: 'string' },
-        server_uuid: { type: 'string' },
-        package_name: { type: 'string' },
-        package_version: { type: 'string' },
-        tags: { type: 'string' },
-        brand: { type: 'string' },
-        state: { type: 'string' },
-        alias: { type: 'string' },
-        max_physical_memory: { type: 'number' },
-        create_timestamp: { type: 'number' },
-        docker: { type: 'boolean' }
-    }
-};
-
-function getMorayClient(callback) {
-    var morayConfig = config.moray;
-
-    morayConfig.log = log;
-    var client = moray.createClient(morayConfig);
-
-    client.on('connect', function () {
-        return callback(client);
-    });
-}
-
-function updateBucket(callback) {
-    getMorayClient(function (mclient) {
-        morayClient = mclient;
-        morayClient.getBucket(BUCKET.name, function (err, bck) {
-            if (err) {
-                return callback(err);
-            } else if (bck.index.docker !== undefined) {
-                log.info('"docker" index already exists, no need to add');
-                return callback();
-            }
-
-            log.info('adding "docker" index');
-            morayClient.updateBucket(BUCKET.name, { index: BUCKET.index },
-                callback);
-        });
-    });
-}
-
-
-updateBucket(function (updateErr) {
-    if (updateErr) {
-        console.error(updateErr.toString());
-        process.exit(1);
-        return;
-    }
-
-    log.info('"docker" index has been successfully added');
-    process.exit(0);
-});
-
diff --git a/tools/migrations/add-new-indices-no-reindex-needed/add-all-new-indices-no-reindex-needed.js b/tools/migrations/add-new-indices-no-reindex-needed/add-all-new-indices-no-reindex-needed.js
new file mode 100644
index 0000000..9daf13f
--- /dev/null
+++ b/tools/migrations/add-new-indices-no-reindex-needed/add-all-new-indices-no-reindex-needed.js
@@ -0,0 +1,96 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+/*
+ * This program is responsible for adding all **new** indices to VMAPI's moray
+ * buckets **for which no reindexing is needed**.
+ *
+ * In order to add a new index to any VMAPI's moray bucket, one should write a
+ * *new* program based on the file "add-docker-index.js", and put it in the same
+ * directory, then add a reference to this program in the "addIndexMigrations"
+ * array below.
+ *
+ * This program does **not** support adding indices for which any reindexing is
+ * needed.
+ *
+ * Reindexing is needed when adding an index on any property that previous
+ * versions of VMAPI could have written. A reference to a program that adds an
+ * index for which reindexing is needed should **not be added to the
+ * "addIndexMigrations below**. Otherwise, "sdcadm vmapi up" will add that
+ * index, but will *not perform the reindexing operation*.
+ *
+ * Such indices should be added to VMAPI's moray buckets differently.
+ */
+
+var child_process = require('child_process');
+var path = require('path');
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
+var vasync = require('vasync');
+
+var configLoader = require('../../../lib/config-loader');
+
+var config = configLoader.loadConfig(path.join(__dirname, '..', '..', '..',
+    'config.json'));
+assert.object(config, 'config');
+
+var log = new bunyan({
+    name: 'add-all-indices',
+    level: config.logLevel || 'info',
+    serializers: bunyan.stdSerializers
+});
+
+/*
+ * Any program referenced by the "addIndexMigrations" list must have the
+ * following characteristics:
+ *
+ * 1. It mut be idempotent.
+ *
+ * 2. It must exit with a non-zero exit code if it failed to add the index it is
+ * meant to add.
+ *
+ * 3. It must *only* add *one* index for which *no reindexing is needed*.
+ */
+var addIndexMigrations = [
+    './add-docker-index.js'
+];
+
+function runAddIndexMigration(scriptFilePath, callback) {
+    assert.string(scriptFilePath, 'scriptFilePath');
+    assert.func(callback, 'callback');
+
+    var execArgs = [
+        process.argv[0],
+        path.resolve(__dirname, scriptFilePath)
+    ];
+
+    child_process.exec(execArgs.join(' '),
+        function onIndexMigrationDone(err, stdout, stderr) {
+            log.debug({
+                stdout: stdout,
+                stderr: stderr
+            }, 'output from ' + scriptFilePath + ' migration');
+
+            return callback(err);
+        });
+}
+
+vasync.forEachPipeline({
+    func: runAddIndexMigration,
+    inputs: addIndexMigrations
+}, function onAllMigrationsRan(err, results) {
+    if (err) {
+        log.error({err: err}, 'Error when running indices migrations');
+        process.exit(1);
+    } else {
+        log.info('All indices migrations ran successfully');
+    }
+});
diff --git a/tools/migrations/add-new-indices-no-reindex-needed/add-docker-index.js b/tools/migrations/add-new-indices-no-reindex-needed/add-docker-index.js
new file mode 100644
index 0000000..2cc5c1f
--- /dev/null
+++ b/tools/migrations/add-new-indices-no-reindex-needed/add-docker-index.js
@@ -0,0 +1,42 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+var path = require('path');
+
+var bunyan = require('bunyan');
+
+var configLoader = require('../../../lib/config-loader');
+var MORAY = require('../../../lib/apis/moray.js');
+
+var config = configLoader.loadConfig(path.join(__dirname, '..', '..', '..',
+    'config.json'));
+
+var log = new bunyan({
+    name: 'add-docker-index',
+    level: config.logLevel || 'debug',
+    serializers: bunyan.stdSerializers
+});
+
+var moray = new MORAY(config.moray);
+moray.connect();
+
+moray.once('moray-ready', function onConnectedToMoray() {
+    moray.addVmIndex({name: 'docker', type: 'string'}, function (err) {
+        moray.connection.close();
+
+        if (err) {
+            console.error(err);
+            process.exit(1);
+            return;
+        }
+
+        log.info('"docker" index has been successfully added');
+    });
+});
-- 
2.21.0

