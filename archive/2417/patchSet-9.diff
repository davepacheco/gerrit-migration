From 669df29fc0148d410184e706a37ff63b90068b32 Mon Sep 17 00:00:00 2001
From: Jordan Hendricks <jordan.hendricks@joyent.com>
Date: Wed, 16 Aug 2017 12:26:43 -0700
Subject: [PATCH] joyent/node-manta#320 client should detect if MPU is enabled
 joyent/node-manta#319 MPU-related tests should detect if MPU is supported
 Reviewed by: Approved by:

---
 CHANGES.md          |  22 +++++++++
 lib/client.js       |  51 ++++++++++++++++----
 package.json        |   2 +-
 test/client.test.js |  54 ++++++++++++++++++++++
 test/mmpu.test.js   | 110 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 230 insertions(+), 9 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index a6bc639..5e0aba6 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,28 @@
 
 ## not yet released
 
+## 5.0.0
+
+If you do not check explicitly for `ResourceNotFoundErrors` from multipart
+upload operations, this major bump will not affect you. Code that checks for a
+`ResourceNotFoundError` in the error cause chain using
+[VError](https://github.com/joyent/node-verror)'s `findCauseByName` or
+`hasCauseWithName` will continue to work.
+
+Major bump due to a change in the errors that may be returned from client
+multipart upload operations. In particular, if Manta returns a
+`ResourceNotFoundError` for an MPU operation, it is presumed that the Manta
+deployment does not have the multipart upload API enabled. The client will now
+return a `FeatureNotSupportedError` from the methods `createUpload`,
+`uploadPart`, `abortUpload`, `getUpload`, and `commitUpload` in this case, with
+the `ResourceNotFoundError` preserved in the call chain.
+Code that specifically checks for the error name `ResourceNotFoundError` to
+detect whether multipart upload is supported should be updated appropriately
+to use VError.hasCauseWithName.
+
+- joyent/node-manta#320 client should detect if MPU is enabled
+- joyent/node-manta#319 MPU-related tests should detect if MPU is supported
+
 ## 4.5.0
 
 Minor bump due to a backwards-compatible addition to the `commitUpload` method
diff --git a/lib/client.js b/lib/client.js
index 6b487d8..928a9b7 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -55,9 +55,21 @@ var UPLOAD_OPS = {
     UPLOAD: 'upload',
     COMMIT: 'commit',
     ABORT: 'abort',
-    GET: 'state'
+    GET: 'state',
+    DETECT_MPU: 'detectMpu'
 };
 
+function FeatureNotSupportedError(cause, feature) {
+    assert.object(cause, 'cause');
+    assert.string(feature, 'feature');
+
+    Verror.WError.call(this, {
+        name: 'FeatureNotSupportedError',
+        cause: cause
+    }, '%s is not supported for this Manta deployment', feature);
+}
+util.inherits(FeatureNotSupportedError, Verror.WError);
+
 
 ///--- Hacks
 
@@ -3368,7 +3380,11 @@ MantaClient.prototype.createUpload = function createUpload(p, opts, cb) {
         self.jsonClient.post(options, body, function (err2, req, res, obj) {
             if (err2) {
                 log.debug(err2);
-                cb(err2);
+                if (err2.statusCode === 404) {
+                    cb(new FeatureNotSupportedError(err2, 'multipart upload'));
+                } else {
+                    cb(err2);
+                }
             } else {
                 cb(null, obj);
             }
@@ -3440,11 +3456,18 @@ function uploadPart(stream, id, partNum, opts, cb) {
         self.client.put(options, onRequestCallback({
             cb: cb,
             log: log,
-            name: 'put',
+            name: 'uploadPart',
             onResult: onResultCallback({
-                cb: cb,
+                cb: function onResultCb(err2, res) {
+                    if (err2 && err2.statusCode === 404) {
+                        cb(new FeatureNotSupportedError(err2,
+                            'multipart upload'));
+                    } else {
+                        cb(err2, res);
+                    }
+                },
                 log: log,
-                name: 'put'
+                name: 'uploadPart'
             }),
             reqCb: reqCb
         }));
@@ -3492,7 +3515,11 @@ MantaClient.prototype.abortUpload = function abortUpload(id, opts, cb) {
         self.jsonClient.post(options, function (err2, req, res, obj) {
             if (err2) {
                 log.debug(err2);
-                cb(err2);
+                if (err2.statusCode === 404) {
+                    cb(new FeatureNotSupportedError(err2, 'multipart upload'));
+                } else {
+                    cb(err2);
+                }
             } else {
                 cb();
             }
@@ -3544,7 +3571,11 @@ MantaClient.prototype.getUpload = function getUpload(id, opts, cb) {
         self.jsonClient.get(options, function (err2, req, res, obj) {
             if (err2) {
                 log.debug(err2);
-                cb(err2);
+                if (err2.statusCode === 404) {
+                    cb(new FeatureNotSupportedError(err2, 'multipart upload'));
+                } else {
+                    cb(err2);
+                }
             } else {
                 cb(null, obj);
             }
@@ -3597,7 +3628,11 @@ MantaClient.prototype.commitUpload = function commitUpload(id, p, opts, cb) {
         self.jsonClient.post(options, body, function (err2, req, res) {
             if (err2) {
                 log.debug(err2);
-                cb(err2);
+                if (err2.statusCode === 404) {
+                    cb(new FeatureNotSupportedError(err2, 'multipart upload'));
+                } else {
+                    cb(err2);
+                }
             } else {
                 cb(null, res);
             }
diff --git a/package.json b/package.json
index 5125357..b920a6c 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
         "type": "git",
         "url": "git://github.com/joyent/node-manta.git"
     },
-    "version": "4.5.0",
+    "version": "5.0.0",
     "main": "./lib/index.js",
     "dependencies": {
         "assert-plus": "^1.0.0",
diff --git a/test/client.test.js b/test/client.test.js
index ce5bb41..28955a6 100644
--- a/test/client.test.js
+++ b/test/client.test.js
@@ -11,6 +11,7 @@ var bunyan = require('bunyan');
 var jsprim = require('jsprim');
 var libuuid = require('uuid');
 var MemoryStream = require('readable-stream/passthrough.js');
+var verror = require('verror');
 
 var logging = require('./lib/logging');
 var manta = require('../lib');
@@ -32,6 +33,7 @@ var CHILD2 = SUBDIR2 + '/child2-' + libuuid.v4().split('-')[0]; // link
 var NOENTSUB1 = SUBDIR1 + '/a/b/c';
 var NOENTSUB2 = SUBDIR1 + '/d/e/f';
 var SPECIALOBJ1 = SUBDIR1 + '/' + 'before-\r-after';
+var MPU_ENABLED;
 var UPLOAD1; // committed upload
 var UPLOAD2; // aborted upload
 var PATH1 = ROOT + '/committed-obj';
@@ -734,6 +736,15 @@ test('create upload', function (t) {
     };
 
     this.client.createUpload(PATH1, opts, function (err, obj) {
+        if (err && verror.hasCauseWithName(err, 'FeatureNotSupportedError')) {
+            MPU_ENABLED = false;
+            console.log('WARNING: skipping test "create upload": multipart ' +
+                'upload is not enabled on this Manta deployment');
+            t.done();
+            return;
+        }
+        MPU_ENABLED = true;
+
         t.ifError(err);
         if (err) {
             t.done();
@@ -748,6 +759,13 @@ test('create upload', function (t) {
 });
 
 test('upload part', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test "upload part": multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var text = 'The lazy brown fox \nsomething \nsomething foo';
     var stream = new MemoryStream();
     var opts = {
@@ -778,6 +796,13 @@ test('upload part', function (t) {
 });
 
 test('get upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test "get upload": multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var opts = {
         account: this.client.user
     };
@@ -797,6 +822,13 @@ test('get upload', function (t) {
 });
 
 test('commit upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test "commit upload": multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var opts = {
         account: this.client.user
     };
@@ -852,6 +884,13 @@ test('commit upload', function (t) {
 });
 
 test('errant commit upload returns undefined res', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test "commit upload": multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var opts = {
         account: this.client.user
     };
@@ -864,6 +903,13 @@ test('errant commit upload returns undefined res', function (t) {
 });
 
 test('abort upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test "abort upload": multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var opts = {
         account: this.client.user
     };
@@ -904,6 +950,14 @@ test('abort upload', function (t) {
 });
 
 test('#311: create upload with special headers', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: "#311: create upload with ' +
+            'special headers": multipart upload is not enabled on this ' +
+            'Manta deployment');
+        t.done();
+        return;
+    }
+
     /*
      * Test adding some headers to the target object that are also parsed by
      * the Manta client, to ensure the headers for the target object are sent
diff --git a/test/mmpu.test.js b/test/mmpu.test.js
index 1eaf674..34b29db 100644
--- a/test/mmpu.test.js
+++ b/test/mmpu.test.js
@@ -35,6 +35,8 @@ var MGET = path.resolve(BINDIR, 'mget');
 var MMPU = path.resolve(BINDIR, 'mmpu');
 var MRM = path.resolve(BINDIR, 'mrm');
 
+var MPU_ENABLED;
+
 // mmpu subcommands
 var CREATE = 'create';
 var UPLOAD = 'upload';
@@ -92,6 +94,16 @@ test('mmpu create C_OBJ_PATH -c 1 -H m-custom-header:foo -s TEXT_SIZE ' +
     forkExecWait({
         argv: argv
     }, function (err, info) {
+        if (err && info.stderr === 'mmpu create: error: multipart upload is ' +
+            'not supported for this Manta deployment\n') {
+            MPU_ENABLED = false;
+            console.log('WARNING: skipping test: multipart ' +
+                'upload is not enabled on this Manta deployment');
+            t.done();
+            return;
+        }
+        MPU_ENABLED = true;
+
         t.ifError(err, err);
         if (!err) {
             t.ok(info);
@@ -105,6 +117,13 @@ test('mmpu create C_OBJ_PATH -c 1 -H m-custom-header:foo -s TEXT_SIZE ' +
 // Get the upload we are going to commit, and verify the attributes match
 // what was specified on create.
 test('mmpu get C_ID', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, GET, C_ID ];
 
     forkExecWait({
@@ -145,6 +164,13 @@ test('mmpu get C_ID', function (t) {
 // Check that the values specified as flags overwrite the header values.
 test('mmpu create A_OBJ_PATH -c 1 -s TEXT_SIZE -m TEXT_MD5' +
 '-H durability-level 3 -H content-length:10 -H content-md5:foo', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [
         MMPU, CREATE, A_OBJ_PATH,
         '-c', '1',
@@ -172,6 +198,13 @@ test('mmpu create A_OBJ_PATH -c 1 -s TEXT_SIZE -m TEXT_MD5' +
 // Get the upload we are going to abort, and verify the attributes match
 // what was specified on create.
 test('mmpu get A_IDJ', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, GET, A_ID ];
 
     forkExecWait({
@@ -211,6 +244,13 @@ test('mmpu get A_IDJ', function (t) {
 
 // Check that no parts have been uploaded for C_ID.
 test('mmpu parts C_ID: pre-upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, PARTS, C_ID ];
 
     forkExecWait({
@@ -230,6 +270,13 @@ test('mmpu parts C_ID: pre-upload', function (t) {
 
 // Check that no parts have been uploaded for A_ID.
 test('mmpu parts A_ID: pre-upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, PARTS, A_ID ];
 
     forkExecWait({
@@ -249,6 +296,13 @@ test('mmpu parts A_ID: pre-upload', function (t) {
 
 // Check that we see the new uploads in `mmpu list`.
 test('mmpu list', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, LIST ];
 
     forkExecWait({
@@ -284,6 +338,13 @@ test('mmpu list', function (t) {
 
 // Upload a part from a file to the commit object.
 test('mmpu upload C_ID 0 -f tmpFile', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var tmpFile = '/var/tmp/node-manta-mmpu-test-tmp-file-' + process.pid;
 
     function mkTmpFile(_, cb) {
@@ -327,6 +388,13 @@ test('mmpu upload C_ID 0 -f tmpFile', function (t) {
 
 // Upload a part from a stream to the abort object.
 test('mmpu upload A_ID 0', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, UPLOAD, A_ID,
         '0'
     ];
@@ -352,6 +420,13 @@ test('mmpu upload A_ID 0', function (t) {
 
 // Check that one part has been uploaded for C_ID.
 test('mmpu parts C_ID: post-upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, PARTS, C_ID ];
 
     forkExecWait({
@@ -372,6 +447,13 @@ test('mmpu parts C_ID: post-upload', function (t) {
 
 // Check that one part has been uploaded for A_ID.
 test('mmpu parts A_ID: post-upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, PARTS, A_ID ];
 
     forkExecWait({
@@ -393,6 +475,13 @@ test('mmpu parts A_ID: post-upload', function (t) {
 
 // Check that `mmpu list -p` now includes the parts that have been uploaded.
 test('mmpu list -p', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, LIST, '-p' ];
 
     forkExecWait({
@@ -438,6 +527,13 @@ test('mmpu list -p', function (t) {
 // Check that `mmpu list` (without -p) does not show the parts that have been
 // uploaded.
 test('mmpu list: post part upload', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     var argv = [ MMPU, LIST ];
 
     forkExecWait({
@@ -484,6 +580,13 @@ test('mmpu list: post part upload', function (t) {
 // Commit the object, do an mget of it to verify it's the object we expect,
 // and remove it to clean up.
 test('mmpu commit C_ID C_ETAG0', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     function commit(_, cb) {
         var argv = [ MMPU, COMMIT, C_ID, C_ETAG0 ];
 
@@ -561,6 +664,13 @@ test('mmpu commit C_ID C_ETAG0', function (t) {
 
 // Abort the object being uploaded to A_OBJ_PATH.
 test('mmpu abort A_ID', function (t) {
+    if (!MPU_ENABLED) {
+        console.log('WARNING: skipping test: multipart ' +
+            'upload is not enabled on this Manta deployment');
+        t.done();
+        return;
+    }
+
     function abort(_, cb) {
         var argv = [ MMPU, ABORT, A_ID ];
 
-- 
2.21.0

