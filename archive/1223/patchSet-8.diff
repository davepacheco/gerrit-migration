From df14ef45f8fe2e2881983add71ecb59ed27edf80 Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Fri, 27 Jan 2017 10:51:40 -0800
Subject: [PATCH] MORAY-254 moray tools need manual pages Reviewed by: Cody
 Peter Mello <cody.mello@joyent.com> Approved by: Robert Mustacchi
 <rm@joyent.com>

---
 CHANGES.md                      |   5 +
 Makefile                        |  21 ++
 README.md                       |  27 ++-
 bin/getobject                   |   6 +-
 docs/man/man1/delbucket.md      |  35 ++++
 docs/man/man1/delmany.md        |  49 +++++
 docs/man/man1/delobject.md      |  34 ++++
 docs/man/man1/findobjects.md    | 140 +++++++++++++
 docs/man/man1/getbucket.md      |  58 ++++++
 docs/man/man1/getobject.md      |  75 +++++++
 docs/man/man1/gettokens.md      |  61 ++++++
 docs/man/man1/listbuckets.md    |  78 ++++++++
 docs/man/man1/moray.md          | 275 ++++++++++++++++++++++++++
 docs/man/man1/morayping.md      |  57 ++++++
 docs/man/man1/morayversion.md   |  54 +++++
 docs/man/man1/putbucket.md      | 135 +++++++++++++
 docs/man/man1/putobject.md      |  53 +++++
 docs/man/man1/reindexobjects.md |  74 +++++++
 docs/man/man1/sql.md            |  50 +++++
 docs/man/man1/updatemany.md     |  54 +++++
 docs/man/man3/moray.md          | 269 +++++++++++++++++++++++++
 lib/client.js                   |  85 +-------
 man/man1/delbucket.1            |  32 +++
 man/man1/delmany.1              |  46 +++++
 man/man1/delobject.1            |  31 +++
 man/man1/findobjects.1          | 171 ++++++++++++++++
 man/man1/getbucket.1            |  55 ++++++
 man/man1/getobject.1            |  72 +++++++
 man/man1/gettokens.1            |  61 ++++++
 man/man1/listbuckets.1          |  78 ++++++++
 man/man1/moray.1                | 339 ++++++++++++++++++++++++++++++++
 man/man1/morayping.1            |  62 ++++++
 man/man1/morayversion.1         |  55 ++++++
 man/man1/putbucket.1            | 151 ++++++++++++++
 man/man1/putobject.1            |  50 +++++
 man/man1/reindexobjects.1       |  83 ++++++++
 man/man1/sql.1                  |  46 +++++
 man/man1/updatemany.1           |  51 +++++
 man/man3/moray.3                | 292 +++++++++++++++++++++++++++
 package.json                    |   5 +-
 tools/mk/Makefile.manpages.defs | 128 ++++++++++++
 tools/mk/Makefile.manpages.targ |  28 +++
 42 files changed, 3440 insertions(+), 91 deletions(-)
 create mode 100644 docs/man/man1/delbucket.md
 create mode 100644 docs/man/man1/delmany.md
 create mode 100644 docs/man/man1/delobject.md
 create mode 100644 docs/man/man1/findobjects.md
 create mode 100644 docs/man/man1/getbucket.md
 create mode 100644 docs/man/man1/getobject.md
 create mode 100644 docs/man/man1/gettokens.md
 create mode 100644 docs/man/man1/listbuckets.md
 create mode 100644 docs/man/man1/moray.md
 create mode 100644 docs/man/man1/morayping.md
 create mode 100644 docs/man/man1/morayversion.md
 create mode 100644 docs/man/man1/putbucket.md
 create mode 100644 docs/man/man1/putobject.md
 create mode 100644 docs/man/man1/reindexobjects.md
 create mode 100644 docs/man/man1/sql.md
 create mode 100644 docs/man/man1/updatemany.md
 create mode 100644 docs/man/man3/moray.md
 create mode 100644 man/man1/delbucket.1
 create mode 100644 man/man1/delmany.1
 create mode 100644 man/man1/delobject.1
 create mode 100644 man/man1/findobjects.1
 create mode 100644 man/man1/getbucket.1
 create mode 100644 man/man1/getobject.1
 create mode 100644 man/man1/gettokens.1
 create mode 100644 man/man1/listbuckets.1
 create mode 100644 man/man1/moray.1
 create mode 100644 man/man1/morayping.1
 create mode 100644 man/man1/morayversion.1
 create mode 100644 man/man1/putbucket.1
 create mode 100644 man/man1/putobject.1
 create mode 100644 man/man1/reindexobjects.1
 create mode 100644 man/man1/sql.1
 create mode 100644 man/man1/updatemany.1
 create mode 100644 man/man3/moray.3
 create mode 100644 tools/mk/Makefile.manpages.defs
 create mode 100644 tools/mk/Makefile.manpages.targ

diff --git a/CHANGES.md b/CHANGES.md
index 2237a29..f70d20a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,10 @@
 # Changelog
 
+## v3.1.0
+
+* [MORAY-254](http://smartos.org/bugview/MORAY-254) moray tools need manual
+  pages
+
 ## v3.0.0
 
 * [MORAY-280](http://smartos.org/bugview/MORAY-280) Support SRV records in node-moray
diff --git a/Makefile b/Makefile
index dd30cd3..5968b28 100644
--- a/Makefile
+++ b/Makefile
@@ -38,6 +38,15 @@ JSL_FILES_NODE   = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS    = -f tools/jsstyle.conf
 
+MAN_SECTION	= 1
+MAN_INROOT	= ./docs/man
+MAN_OUTROOT	= ./man
+include ./tools/mk/Makefile.manpages.defs
+
+MAN_SECTION	= 3
+MAN_INROOT	= ./docs/man
+MAN_OUTROOT	= ./man
+include ./tools/mk/Makefile.manpages.defs
 
 include ./tools/mk/Makefile.defs
 include ./tools/mk/Makefile.smf.defs
@@ -49,5 +58,17 @@ include ./tools/mk/Makefile.smf.defs
 all: $(REPO_DEPS)
 	$(NPM) rebuild
 
+#
+# Manual pages are checked into this repository.  See Makefile.manpages.defs for
+# details.
+#
+.PHONY: manpages
+manpages: $(MAN_OUTPUTS)
+
 include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.targ
+
+MAN_SECTION	= 1
+include ./tools/mk/Makefile.manpages.targ
+MAN_SECTION	= 3
+include ./tools/mk/Makefile.manpages.targ
diff --git a/README.md b/README.md
index 4407252..f146b3d 100644
--- a/README.md
+++ b/README.md
@@ -13,18 +13,31 @@
 This repository is part of the Joyent Triton and Joyent Manta projects. See the
 [Triton](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) and
 [Manta](https://github.com/joyent/manta/blob/master/CONTRIBUTING.md)
-contributing guidelines and general documentation at the main [Triton]
-(https://github.com/joyent/triton) and [Manta](http://github.com/joyent/manta)
-project pages. *Do not use GitHub PRs*.
+contributing guidelines and general documentation at the main
+[Triton](https://github.com/joyent/triton) and
+[Manta](http://github.com/joyent/manta) project pages. *Do not use GitHub PRs*.
 
 
-## Overview
+# Overview
 
-This is the (node.js) client SDK for [Moray](https://github.com/joyent/moray).
-For usage information, visit the Moray docs.
+This is the Node.js client SDK for [Moray](https://github.com/joyent/moray).
+You can install it with:
 
+    npm install moray
+
+or, to put the manual pages and CLI tools on your path:
+
+    npm install -g moray
+
+For usage information, see:
+
+* [moray(1)](./docs/man/man1/moray.md) (overview manual page for CLI tools)
+* [moray(3)](./docs/man/man3/moray.md) (overview manual page for library
+  interface)
+* [Moray server](https://github.com/joyent/moray) overview and reference
+  documentation
 
 # Testing
 
-To test this Moray client, see the separate
+To test the Moray client, see the separate
 [moray-test-suite](https://github.com/joyent/moray-test-suite) repository.
diff --git a/bin/getobject b/bin/getobject
index d498a4d..b5b6e89 100755
--- a/bin/getobject
+++ b/bin/getobject
@@ -38,8 +38,12 @@ parser = moraycli.parseCliOptions({
             prettyPrint = false;
             break;
 
+        /*
+         * "-s" used to set noCache to true, but that's already the default, so
+         * this is effectively a no-op.  We accept it and do nothing with it for
+         * backwards compatibility.
+         */
         case 's':
-            getOptions.noCache = true;
             break;
 
         default:
diff --git a/docs/man/man1/delbucket.md b/docs/man/man1/delbucket.md
new file mode 100644
index 0000000..33b5dda
--- /dev/null
+++ b/docs/man/man1/delbucket.md
@@ -0,0 +1,35 @@
+# delbucket 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+delbucket - delete a bucket from Moray
+
+## SYNOPSIS
+
+`delbucket [COMMON_OPTIONS] BUCKET`
+
+## DESCRIPTION
+
+Removes the bucket called `BUCKET` from Moray.  Any objects contained in the
+bucket will be removed permanently.  This command fails if the bucket does not
+exist.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Delete a bucket called "accounts":
+
+    $ delbucket accounts
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`
diff --git a/docs/man/man1/delmany.md b/docs/man/man1/delmany.md
new file mode 100644
index 0000000..ec966bd
--- /dev/null
+++ b/docs/man/man1/delmany.md
@@ -0,0 +1,49 @@
+# delmany 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+delmany - delete multiple objects using a filter
+
+## SYNOPSIS
+
+`delmany [COMMON_OPTIONS] [-l LIMIT] [-o OFFSET] BUCKET FILTER`
+
+## DESCRIPTION
+
+Deletes objects from bucket `BUCKET` whose properties match the filter `FILTER`.
+Like `findobjects`, `delmany` operations are always bounded in size.  See the
+`-l LIMIT` option.  You must use multiple invocations to remove arbitrarily
+large lists of objects.
+
+`FILTER` is an LDAP-like filter string described in `findobjects(1)`.  The
+caveats described there around the use of unindexed fields apply to filters used
+with `delmany` as well.
+
+## OPTIONS
+
+`-l LIMIT`
+  Remove at most `LIMIT` objects.  This interacts badly with filters on
+  unindexed fields, as described in `findobjects(1)`.  If this option is
+  unspecified, a default limit is provided (which is currently 1000).
+
+`-o OFFSET`
+  Skip the first `OFFSET` objects matching the filter.
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Delete all objects in bucket "accounts" having a "uid" value at most 800:
+
+    $ delmany accounts '(uid<=800)'
+    2 records deleted
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`, `putobject(1)`, `findobjects(1)`
diff --git a/docs/man/man1/delobject.md b/docs/man/man1/delobject.md
new file mode 100644
index 0000000..b7b5eca
--- /dev/null
+++ b/docs/man/man1/delobject.md
@@ -0,0 +1,34 @@
+# delobject 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+delobject - delete an object by primary key
+
+## SYNOPSIS
+
+`delobject [COMMON_OPTIONS] BUCKET KEY`
+
+## DESCRIPTION
+
+Removes the object in bucket `BUCKET` having primary key `KEY`.  This command
+fails if the object does not exist.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Remove the object in "accounts" with key "hugh":
+
+    $ delobject accounts hugh
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`, `putobject(1)`
diff --git a/docs/man/man1/findobjects.md b/docs/man/man1/findobjects.md
new file mode 100644
index 0000000..381e584
--- /dev/null
+++ b/docs/man/man1/findobjects.md
@@ -0,0 +1,140 @@
+# findobjects 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+findobjects - fetch the contents of multiple objects using a filter
+
+## SYNOPSIS
+
+`findobjects [COMMON_OPTIONS] [-Hns] [-a FIELD] [-d FIELD] [-l LIMIT] [-o OFFSET] BUCKET FILTER`
+
+## DESCRIPTION
+
+Fetches objects from bucket `BUCKET` whose properties match the filter `FILTER`.
+Matching objects are printed as JSON objects similar to the `getobject` command,
+with properties `bucket`, `key`, `value`, `_id`, and `_etag`.  This command also
+provides an additional JSON property on each object:
+
+`_count`
+  A count of total objects matching this filter on the server.  See the
+  important caveats below.
+
+`findobjects` operations are always bounded in size.  See the `-l LIMIT` option.
+You must use multiple invocations using the `-l LIMIT` and `-o OFFSET` options
+(called _pagination_) to process arbitrarily large sets of objects.
+
+`FILTER` is an LDAP-like filter string.  For example, this filter matches
+objects having property "hostname" with value "wormhole":
+
+    (hostname=wormhole)
+
+This filter matches objects having a "unix\_timestamp" property at most
+1482438844:
+
+    (unix_timestamp<=1482438844)
+
+This filter matches objects meeting both constraints:
+
+    (&(hostname=wormhole)(unix_timestamp<=1482438844))
+
+And this filter matches objects meeting either one:
+
+    (|(hostname=wormhole)(unix_timestamp<=1482438844))
+
+In order to avoid expensive table scans, Moray requires that filter strings use
+at least one of the bucket's indexed fields in a way that could prune results
+(e.g., not just on one side of an "OR" clause).  Note that you can still
+construct filters that require table scans (e.g., `(hostname=*)`), and
+reasonable-looking filters can still behave pathologically.  Performance depends
+significantly on the behavior of the underlying data store.  The requirement
+around indexed fields is a heuristic to prevent obviously-pathological behavior,
+not a guarantee of good behavior.
+
+Filters can include both indexed and unindexed fields, but **using unindexed
+fields in filters is strongly discouraged.**  They cannot be used correctly with
+pagination (the `-o OFFSET` and `-l LIMIT` options) and they do not produce
+correct values for `_count`.  Attempting to use these options with filters that
+use unindexed fields often results in truncated result sets.
+
+
+## OPTIONS
+
+`-a FIELD`
+  Sort results in ascending order by indexed field `FIELD`.
+
+`-d DESC`
+  Sort results in descending order by indexed field `FIELD`.
+
+`-H`
+  Print objects using minimal JSON with one object per line (instead of
+  inserting newlines within objects and indenting for readability)
+
+`-l LIMIT`
+  Return at most `LIMIT` objects.  With `-o OFFSET`, this can be used to page
+  through a large result set.  However, this interacts badly with filters on
+  undexed fields as described above.  If this option is unspecified, a default
+  limit is provided (which is currently 1000).
+
+`-n`
+  Do not report the `_count` field with each object.  (This also skips
+  executing the underlying query on the server to perform the count.)
+
+`-o OFFSET`
+  Skip the first `OFFSET` objects matching the filter.  With `-l LIMIT`, this
+  can be used to page through a large result set.
+
+`-s`
+  Do not execute the query, but instead report the SQL strings that would be
+  used to execute the query on the underlying data store.
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Fetch objects in "accounts" having a non-NULL value of `loginName`:
+
+    $ findobjects accounts '(loginName=*)'
+
+Fetch objects in "accounts" having a numeric uid at most 800:
+
+    $ findobjects accounts '(uid<=800)'
+
+Run the same query, sorting the results in increasing order of uid:
+
+    $ findobjects -a uid accounts '(uid<=800)'
+
+Run the above query, fetching only the first 5 results:
+
+    $ findobjects -l 5 accounts '(uid<=800)'
+
+Run the above query, fetching the second 10 results:
+
+    $ findobjects -o 5 -l 10 accounts '(uid<=800)'
+
+Fetch the SQL that would be used to execute the previous query:
+
+    $ findobjects -s -o 5 -l 10 accounts '(uid<=800)'
+    {
+      "count": "SELECT count(1) over () as _count, '7e99cfd6-9758-64a1-e20a-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
+      "query": "SELECT *, '7e99cfd6-9758-64a1-e20a-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
+      "args": [
+        800
+      ]
+    }
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`, `putobject(1)`, `getobject(1)`, `delmany(1)`,
+`updatemany(1)`.
+
+## BUGS
+
+For the reasons mentioned above, it is generally considered a bug that Moray
+allows filter strings to use unindexed fields.  This is likely to change in
+future versions.
diff --git a/docs/man/man1/getbucket.md b/docs/man/man1/getbucket.md
new file mode 100644
index 0000000..5a6cfab
--- /dev/null
+++ b/docs/man/man1/getbucket.md
@@ -0,0 +1,58 @@
+# getbucket 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+getbucket - print detailed information about one bucket
+
+## SYNOPSIS
+
+`getbucket [COMMON_OPTIONS] BUCKET`
+
+## DESCRIPTION
+
+Fetches a JSON representation for the configuration of the bucket `BUCKET`.
+This representation includes information about the bucket's version and the
+indexes defined for it.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Fetch details about bucket "accounts":
+
+    $ getbucket accounts
+    {
+      "name": "accounts",
+      "index": {
+        "loginName": {
+          "type": "string",
+          "unique": true
+        },
+        "uid": {
+          "type": "number",
+          "unique": true
+        },
+        "country": {
+          "type": "string",
+          "unique": false
+        }
+      },
+      "pre": [],
+      "post": [],
+      "options": {
+        "version": 2
+      },
+      "mtime": "2017-01-27T17:56:42.005Z"
+    }
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`
diff --git a/docs/man/man1/getobject.md b/docs/man/man1/getobject.md
new file mode 100644
index 0000000..57368ac
--- /dev/null
+++ b/docs/man/man1/getobject.md
@@ -0,0 +1,75 @@
+# getobject 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+getobject - fetch the contents of an object by primary key
+
+## SYNOPSIS
+
+`getobject [COMMON_OPTIONS] [-Hs] BUCKET KEY`
+
+## DESCRIPTION
+
+Fetches the contents of the object in `BUCKET` having primary key `KEY`.  The
+result is emitted as JSON with properties:
+
+`bucket`
+  matches BUCKET
+
+`key`
+  matches KEY
+
+`value`
+  the contents of the object, which are completely user-defined
+
+`_id`
+  a unique, integer id associated with each object.  It should not be assumed
+  that these ids are assigned in any particular order, and the id may change
+  across certain kinds of updates.  Critically, if a caller inserts objects 1
+  and 2 concurrently and another caller sees object 2, then it may also see
+  object 1, but it may not.  Ids may be assigned out of insertion order.
+
+`_etag`
+  a numeric value calculated from the contents of the object.  This can be
+  used for conditional put operations.  See `putobject(1)`.
+
+## OPTIONS
+
+`-H`
+  Print the object using minimal JSON (instead of inserting newlines and
+  indenting for readability)
+
+`-s`
+  Accepted for backwards compatibility only.
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Fetch the object with key "lisa" in bucket "accounts":
+
+    $ getobject accounts lisa
+    {
+      "bucket": "accounts",
+      "key": "lisa",
+      "value": {
+        "loginName": "lisa",
+        "uid": 800,
+        "country": "USA"
+      },
+      "_id": 1,
+      "_etag": "77472568",
+      "_mtime": 1485539314987,
+      "_txn_snap": null,
+      "_count": null
+    }
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`, `putobject(1)`, `findobjects(1)`
diff --git a/docs/man/man1/gettokens.md b/docs/man/man1/gettokens.md
new file mode 100644
index 0000000..0af1bf4
--- /dev/null
+++ b/docs/man/man1/gettokens.md
@@ -0,0 +1,61 @@
+# gettokens 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+gettokens - fetch the list of shards from electric-moray
+
+## SYNOPSIS
+
+`gettokens [COMMON_OPTIONS]`
+
+## DESCRIPTION
+
+Reports the list of physical shards behind an electric-moray instance.
+
+Electric-moray is a component typically deployed in front of several separate
+Moray shards.  Electric-moray instances speak the Moray protocol to their
+clients, but they use consistent hashing on some field of each object to select
+the appropriate backend to handle each request.  (This functions similar to a
+layer-7 load balancer.)  A full discussion of electric-moray is beyond the scope
+of this documentation.
+
+For this command, the service specified with the `COMMON_OPTIONS` should be an
+electric-moray instance, not a moray instance.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Using an electric-moray service, this operation reports a list of URLs:
+
+    $ gettokens -h electric-moray.emy-10.joyent.us
+    {
+      "tokens": [
+        "tcp://1.moray.emy-10.joyent.us:2020",
+        "tcp://2.moray.emy-10.joyent.us:2020"
+      ]
+    }
+
+Using most Moray servers, this operation is not supported:
+
+    $ gettokens
+    gettokens: moray client ("172.27.10.72:52387" to "172.27.10.76:2020"): request failed: server error: Operation not supported
+
+## SEE ALSO
+
+`moray(1)`
+
+## BUGS
+
+It's not clear why backend shards are called "tokens".
+
+This command likely belongs with an electric-moray tool suite, rather than the
+Moray tool suite.
diff --git a/docs/man/man1/listbuckets.md b/docs/man/man1/listbuckets.md
new file mode 100644
index 0000000..28db7fa
--- /dev/null
+++ b/docs/man/man1/listbuckets.md
@@ -0,0 +1,78 @@
+# listbuckets 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+listbuckets - print detailed information about all buckets
+
+## SYNOPSIS
+
+`listbuckets [COMMON_OPTIONS]`
+
+## DESCRIPTION
+
+Fetches a JSON representation for the configuration of all buckets on the remote
+server.  See `getbucket(1)` for details about this representation.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+List details about the buckets on a Moray server:
+
+    $ listbuckets
+    [
+      {
+        "name": "accounts",
+        "index": {
+          "loginName": {
+            "type": "string",
+            "unique": true
+          }
+        },
+        "pre": [],
+        "post": [],
+        "options": {
+          "version": 1
+        },
+        "mtime": "2017-01-27T17:22:32.288Z"
+      },
+      {
+        "name": "accounts_withnames",
+        "index": {
+          "loginName": {
+            "type": "string",
+            "unique": true
+          },
+          "fullName": {
+            "type": "string",
+            "unique": false
+          }
+        },
+        "pre": [],
+        "post": [],
+        "options": {
+          "version": 2
+        },
+        "mtime": "2017-01-27T17:22:45.965Z"
+      }
+    ]
+
+Using the `json(1)` tool, you can easily list just the buckets' names:
+
+    $ listbuckets | json -ga name
+    accounts
+    accounts_withnames
+
+
+## SEE ALSO
+
+`moray(1)`, `getbucket(1)`, `putbucket(1)`,
+[jsontool](https://github.com/trentm/json)
diff --git a/docs/man/man1/moray.md b/docs/man/man1/moray.md
new file mode 100644
index 0000000..822558d
--- /dev/null
+++ b/docs/man/man1/moray.md
@@ -0,0 +1,275 @@
+# moray 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+moray - command-line tools for Moray
+
+## DESCRIPTION
+
+Moray is a JSON-based key-value store.  Users can create **buckets**, each
+containing any number of **objects** indexed by a primary **key**.  Additional
+indexes can be specified with each bucket.  Moray servers are typically
+stateless components deployed atop PostgreSQL databases, where buckets
+correspond to database tables, objects correspond to rows, and database indexes
+are created for each bucket index.
+
+The `moray` npm package contains a set of command-line tools to allow users to
+create, update, and delete both buckets and objects.  These tools connect to one
+or more remote Moray servers over TCP and execute operations.
+
+Working with buckets:
+
+* `putbucket`: create or update a bucket
+* `getbucket`: print detailed information about one bucket
+* `listbuckets`: print detailed information about all buckets
+* `delbucket`: delete a bucket and all of its contents
+
+Working with objects:
+
+* `putobject`: create or update an object
+* `getobject`: fetch the contents of an object by primary key
+* `delobject`: delete an object by primary key
+* `findobjects`: fetch the contents of multiple objects using a filter
+* `delmany`: delete multiple objects using a filter
+* `updatemany`: update multiple objects using a filter
+* `reindexobjects`: populate a newly-added index
+
+Working with remote servers:
+
+* `morayping`: check whether Moray is online
+* `morayversion`: check the version of a Moray server
+* `sql`: execute a SQL string on a Moray server
+* `gettokens`: fetch the list of shards from electric-moray
+
+The tools in this package support two modes for locating the remote Moray server
+on which to operate:
+
+* Using the `-S`/`--service SERVICE_NAME` option or the `MORAY_SERVICE`
+  environment variable, users specify a DNS domain to which SRV records are
+  attached that describe the list of instances available.  SRV records provide
+  both a name for the host (which may be an IP address or another DNS domain)
+  and a port on which to connect over TCP.  This mode is preferred for
+  general use because it provides information about all instances and allows the
+  client to balance multiple requests across different, equivalent servers.
+* Using the `-h`/`--host HOST_OR_IP` and `-p`/`--port PORT` options or the
+  `MORAY_URL` environment variable, users specify a specific IP address or DNS
+  domain to which traditional name records are attached and a TCP port to which
+  to connect.  This is useful primarily for testing against specific server
+  instances.
+
+If the `-S`/`--service SERVICE_NAME` command-line option is specified, it is
+always used directly as described above.
+
+If the `-h`/`--host HOST_OR_IP` or `-p`/`--port PORT` options are specified,
+they are used directly as described above.  If one is specified and not the
+other, then the other value is filled in from the `MORAY_URL` environment
+variable.  Otherwise, defaults of IP `127.0.0.1` and port `2020` are used.
+
+If none of these command-line options are specified:
+
+- if `MORAY_SERVICE` is specified, it is used to invoke the first mode
+- if `MORAY_URL` is specified, is used to invoke the second mode
+- if neither is specified, the second mode is invoked with default values
+  `127.0.0.1` port `2020`.
+
+## OPTIONS
+
+The following `COMMON_OPTIONS` options are accepted by all of these commands:
+
+`-b, --bootstrap-domain BOOTSTRAP_DOMAIN`
+  Specifies the domain name for the nameservers themselves.  Triton and Manta
+  both provide domain names for the nameservers themselves.  This is useful in
+  split DNS environments to ensure that the Moray only uses the nameservers
+  that know about the target service.  This applies to both SRV-record-based
+  discovery and traditional A-record-based discovery, but has no impact when
+  connecting to a specific IP address and port.
+
+`-h, --host HOST_OR_IP`
+  Specifies an IP address or DNS domain for the remote Moray server.  See
+  above for details.
+
+`-p, --port PORT`
+  Specifies the TCP port for the remote Moray server.  See above for details.
+
+`-S, --service SERVICE`
+  Specifies a DNS domain to be used for SRV-based service discovery of the
+  remote Moray server.  See above for details.  `SERVICE` must not be an IP
+  address.
+
+`-v, --verbose`
+  Increases the verbosity of the built-in bunyan logger.  By default, the
+  logger is created with bunyan level `fatal`.  Each additional use of `-v`
+  increases the verbosity by one level (to `error`, `warn`, and so on).  Log
+  messages are emitted to stderr.  See also the `LOG_LEVEL` environment
+  variable.
+
+## ENVIRONMENT
+
+`LOG_LEVEL`
+  Sets the node-bunyan logging level. Defaults to "fatal".
+
+`MORAY_BOOTSTRAP_DOMAIN`
+  Used as a fallback value for the `-b`/`--bootstrap-domain` option.
+
+`MORAY_SERVICE`
+  Used as a fallback value for `-S`/`--service` if neither of `-h`/`--host` or
+  `-p`/`--port` is specified.
+
+`MORAY_URL`
+  A URL of the form `tcp://HOSTNAME_OR_IP[:PORT]` where the specified
+  `HOSTNAME_OR_IP` and `PORT` will be used as fallback values for the
+  `-h`/`--host` or `-p/--port` options, respectively.  This value is only used
+  if `MORAY_SERVICE` is not present in the environment and at least one of the
+  `-h`/`--host` or `-p`/`--port` options is not specified.
+
+## EXIT STATUS
+
+0
+  Indicates successful completion
+
+1
+  Indicates failure
+
+2
+  Indicates an invalid invocation (usage error)
+
+
+## EXAMPLES
+
+Create a bucket for "accounts" version 1 with unique "loginName" and unique
+numeric values for "uid":
+
+    $ putbucket -x 1 -u loginName -u uid:number accounts
+
+Insert a few accounts.  The keys will match the login names:
+
+    $ putobject -d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \
+        accounts lisa
+    $ putobject -d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \
+        accounts hugh
+
+Fetch one of these back:
+
+    $ getobject accounts lisa
+    {
+      "bucket": "accounts",
+      "key": "lisa",
+      "value": {
+        "loginName": "lisa",
+        "uid": 800,
+        "country": "USA"
+      },
+      "_id": 1,
+      "_etag": "77472568",
+      "_mtime": 1485539314987,
+      "_txn_snap": null,
+      "_count": null
+    }
+
+Fetch objects having uids at most 800:
+
+    $ findobjects accounts '(uid<=800)'
+    {
+      "bucket": "accounts",
+      "key": "lisa",
+      "value": {
+        "loginName": "lisa",
+        "uid": 800
+      },
+      "_id": 1,
+      "_etag": "77472568",
+      "_mtime": 1485539314987,
+      "_txn_snap": null,
+      "_count": 1
+    }
+
+Update the bucket to version 2, which contains a new non-unique indexed column
+for "country":
+
+    $ putbucket -x 2 -u loginName -u uid:number -i country accounts
+
+Re-index the objects in the bucket:
+
+    $ reindexobjects accounts
+    bucket "accounts": 2 objects processed (continuing)
+    bucket "accounts": all objects processed
+
+Now we can search for accounts by country:
+
+    $ findobjects accounts '(country=UK)'
+    {
+      "bucket": "accounts",
+      "key": "hugh",
+      "value": {
+        "loginName": "hugh",
+        "uid": 801,
+        "country": "UK"
+      },
+      "_id": 2,
+      "_etag": "82E66E74",
+      "_mtime": 1485539319781,
+      "_txn_snap": null,
+      "_count": 1
+    }
+
+Update "country" for accounts with country = "UK":
+
+    $ updatemany -d '{ "country": "United Kingdom" }' accounts '(country=UK)'
+    { count: 1, etag: 'ue6d321d' }
+
+Now fetch back "hugh":
+
+    $ getobject accounts hugh
+    {
+      "bucket": "accounts",
+      "key": "hugh",
+      "value": {
+        "loginName": "hugh",
+        "uid": 801,
+        "country": "United Kingdom"
+      },
+      "_id": 2,
+      "_etag": "ue6d321d",
+      "_mtime": 1485539410157,
+      "_txn_snap": null,
+      "_count": null
+    }
+
+Now delete that object:
+
+    $ delobject accounts hugh
+
+List everything in the bucket (more precisely, everything having a non-null
+"loginName"):
+
+    $ findobjects accounts '(loginName=*)'
+    {
+      "bucket": "accounts",
+      "key": "lisa",
+      "value": {
+        "loginName": "lisa",
+        "uid": 800,
+        "country": "USA"
+      },
+      "_id": 1,
+      "_etag": "77472568",
+      "_mtime": 1485539314987,
+      "_txn_snap": null,
+      "_count": 1
+    }
+
+Finally, remove the bucket:
+
+    $ delbucket accounts
+
+## SEE ALSO
+
+`moray(3)`, `delbucket(1)`, `delmany(1)`, `delobject(1)`, `findobjects(1)`,
+`getbucket(1)`, `getobject(1)`, `gettokens(1)`, `listbuckets(1)`,
+`morayping(1)`, `morayversion(1)`, `putbucket(1)`, `putobject(1)`,
+`reindexobjects(1)`, `sql(1)`, `updatemany(1)`,
+[jsontool](https://github.com/trentm/json)
+
+## DIAGNOSTICS
+
+See the `-v`/`--verbose` option and the `LOG_LEVEL` environment variable.
diff --git a/docs/man/man1/morayping.md b/docs/man/man1/morayping.md
new file mode 100644
index 0000000..158d29b
--- /dev/null
+++ b/docs/man/man1/morayping.md
@@ -0,0 +1,57 @@
+# morayping 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+morayping - check if a Moray server is functioning
+
+## SYNOPSIS
+
+`morayping [COMMON_OPTIONS] [-dF]`
+
+## DESCRIPTION
+
+Attempts to determine whether Moray is functioning.  For this command, success
+indicates that Moray is functioning and able to respond to a request.  Failure
+indicates the command could not successfully connect and complete a request.
+
+## OPTIONS
+
+`-d`
+  Attempt to determine whether Moray has a working connection to its
+  underlying data store by making a "deep" ping request instead of a trivial
+  request.
+
+`-F`
+  Block until at least one Moray server is found and a connection is
+  established, then execute the ping request.  This is intended to
+  programmatically wait for Moray to become available, although if the request
+  fails (e.g., because of a network issue), the request is not retried, and in
+  this case Moray may still be down.
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Check whether a Moray server is online:
+
+    $ morayping
+
+Check whether the target server has working connections to its underlying data
+store:
+
+    $ morayping -d
+
+When the remote server is not online, you might get an error like this:
+
+    $ morayping -h 127.0.0.1
+    morayping: moray client "127.0.0.1:2020": failed to establish connection
+
+## SEE ALSO
+
+`moray(1)`
diff --git a/docs/man/man1/morayversion.md b/docs/man/man1/morayversion.md
new file mode 100644
index 0000000..5f47882
--- /dev/null
+++ b/docs/man/man1/morayversion.md
@@ -0,0 +1,54 @@
+# morayversion 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+morayversion - report the version of a Moray server
+
+## SYNOPSIS
+
+`morayversion [COMMON_OPTIONS]`
+
+## DESCRIPTION
+
+Attempts to determine the major version of the Moray server.  **This information
+should not be used programmatically.**  This command is intended primarily for
+operators and developers to use against specific Moray instances, either for
+debugging or in preparation for upgrading.
+
+There are important caveats about this operation:
+
+- It's always possible for an operator to upgrade or rollback a Moray server
+  immediately after this command is executed.  It's not safe to assume that the
+  value returned by this command will not change over time.
+- With most forms of service discovery (described in `moray(1)`), this request
+  may be made against any of a number of different Moray server instances.  But
+  different Moray instances may be running different versions.  This case
+  further demonstrates that it's not safe to assume that the value returned by
+  this command will not change over time, even from one millisecond to the next.
+- Old versions of Moray do not respond to the version request at all.  On such
+  servers, this command will time out (currently after 20 seconds).  It's
+  impossible to know if a timeout indicates an old version, a bug or hang on the
+  remote server, or a network issue.
+
+These caveats generally make this command unsuitable for programmatic use.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Check the version of a Moray server:
+
+    $ morayversion
+    2
+
+## SEE ALSO
+
+`moray(1)`
diff --git a/docs/man/man1/putbucket.md b/docs/man/man1/putbucket.md
new file mode 100644
index 0000000..d39b93c
--- /dev/null
+++ b/docs/man/man1/putbucket.md
@@ -0,0 +1,135 @@
+# putbucket 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+putbucket - create or update a bucket
+
+## SYNOPSIS
+
+`putbucket [COMMON_OPTIONS] [-st] [-i FIELD[:TYPE]...] [-u FIELD[:TYPE]...] [-x VERSION] BUCKET`
+
+## DESCRIPTION
+
+Creates or updates a bucket in Moray called `BUCKET`.  If the bucket does not
+exist, it is created.  If the bucket already exists and has a version, the
+bucket will only be updated if `-x` is specified and `VERSION` is greater than
+the version of the bucket on the server.
+
+A bucket's configuration includes:
+
+* a list of field names (also referred to as a **schema**) that describes the
+  top-level properties for which database indexes should be created.  These
+  indexes enable querying and manipulation using filters accepted by the
+  `findobjects`, `updatemany`, and `delmany` tools.
+* an optional version number, which is used to coordinate schema updates among
+  multiple clients having different versions.
+* a set of options defined by the server.  The only option supported by this
+  tool is `trackModification`.
+* `pre` and `post` triggers, which are functions executed on the Moray server
+
+Users may specify the bucket configuration using a combination of the `-i`,
+`-u`, `-x`, or `-t` options, or using the `-s` option and providing a JSON
+description on stdin.  The `-s` option must be used for specifying `pre` and
+`post` triggers.
+
+When you use `putbucket(1)` to add a new indexed field, that field will not be
+treated as indexed (in filters with `findobjects` and similar tools) until all
+objects in the bucket have been reindexed.  See `reindexobjects(1)`.
+
+## OPTIONS
+
+`-i FIELD[:TYPE]`
+  Adds an index on the top-level property called `FIELD`.  `FIELD` can
+  subsequently be used in filters for `findobjects`, `updatemany`, and
+  `delmany` operations.  The optional `TYPE` is interpreted by the server.
+
+`-s`
+  Read the bucket's configuration from stdin rather than the other
+  command-line options.  Other bucket-related command-line options are
+  ignored.
+
+`-t`
+  Enable the `trackModification` server-side option for this bucket.
+
+`-u FIELD[:TYPE]`
+  Adds an index just like the `[-i]` option, but additionally require that
+  values of field `FIELD` must be unique within the bucket.  Attempting to
+  insert a second object having the same value of `FIELD` as another object in
+  the bucket will fail.  This constraint is maintained by the underlying data
+  store.
+
+`-x VERSION`
+  Only create or update the bucket if it does not already exist on the server,
+  or if it exists with no version number, or if it exists with a version
+  number that's older than `VERSION`.  The new `VERSION` is stored with the
+  bucket configuration.
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+The JSON read from stdin may have the following properties:
+
+`indexes`
+  an object whose properties identify each of the indexed fields.  Each value
+  is an object with properties `type` (a string) and `unique` (a boolean).
+
+`options`
+  an object describing options interpreted by the server.  This may include
+  the `trackModification` option, which should be a boolean value.
+
+`post`, `pre`
+  arrays of strings containing JavaScript functions to be executed before
+  (`pre`) or after (`post`) various operations.  See server documentation for
+  details.  The strings themselves are evaluated in the context of this tool.
+
+`version`
+  an integer version number, as would be specified with `-x`
+
+Default values are provided that correspond to this configuration:
+
+    {
+        "indexes": {},
+        "options": {},
+        "pre": [],
+        "post": []
+    }
+
+By default, the bucket is not versioned.
+
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Create a bucket at version 1 called "accounts" with no indexed fields:
+
+    $ putbucket -x 1 accounts
+
+This bucket can be used as a key-value store, but would not support
+`findobjects` or other operations that operate on indexed fields.
+
+Create a bucket called "accounts" with a unique "loginName" field and an
+indexed "fullName" field:
+
+    $ putbucket -x 1 -u loginName -i fullName accounts
+
+Create the same bucket with version number "3":
+
+    $ putbucket -x 3 -u loginName -i fullName accounts
+
+Attempt to create the same bucket with an older version:
+
+    $ putbucket -x 2 -u loginName -i fullName accounts
+    putbucket: moray client ("172.27.10.72:65434" to "172.27.10.40:2022"): request failed: server error: accounts has a newer version than 2 (3)
+
+## SEE ALSO
+
+`moray(1)`, `reindexobjects(1)`
+
+## BUGS
+
+The JSON format is not validated on the client side.  Future versions of this
+tool may validate input on the client.
diff --git a/docs/man/man1/putobject.md b/docs/man/man1/putobject.md
new file mode 100644
index 0000000..f2f8532
--- /dev/null
+++ b/docs/man/man1/putobject.md
@@ -0,0 +1,53 @@
+# putobject 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+putobject - create or update an object
+
+## SYNOPSIS
+
+`putobject [COMMON_OPTIONS] [-d DATA] [-e ETAG] BUCKET KEY`
+
+## DESCRIPTION
+
+Creates or updates an object in bucket `BUCKET` with primary key `KEY`.  If no
+object exists having the same key, a new object is created.  If the object
+exists (and if its etag matches `ETAG`, if `-e` was specified), then the old
+object is overwritten and atomically replaced with the new one.  The object's
+contents are specified by the JSON string `DATA`.
+
+## OPTIONS
+
+`-d DATA`
+  Specifies the contents of the object as a JSON string.  Generally, objects
+  should conform to a user-defined schema, having a fixed set of properties
+  and types.  However, there are no constraints imposed by the server other
+  than uniqueness for fields that are specifically marked unique in the bucket
+  configuration.  Top-level properties of the object that correspond to
+  indexed fields will be extracted and included in an index so that it can be
+  queried and updated.  See `putbucket(1)` for details.
+
+`-e ETAG`
+  Only execute this operation if the corresponding object on the server
+  currently has etag `ETAG`.  Etags are computed on the server based on
+  object contents, and they are included in the results of any object fetch
+  operation.  This option can be used to implement optimistic concurrency
+  control (as a form of test-and-set operation).
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Inserts or updates an object with key "lisa" in bucket "accounts":
+
+    $ putobject -d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \
+        accounts lisa
+
+See also the examples in `moray(1)`.
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`
diff --git a/docs/man/man1/reindexobjects.md b/docs/man/man1/reindexobjects.md
new file mode 100644
index 0000000..5c028ea
--- /dev/null
+++ b/docs/man/man1/reindexobjects.md
@@ -0,0 +1,74 @@
+# reindexobjects 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+reindexobjects - populate a newly-added index
+
+## SYNOPSIS
+
+`reindexobjects [COMMON_OPTIONS] BUCKET [COUNT]`
+
+## DESCRIPTION
+
+Reindexing is the process by which the internal representation of objects is
+updated to account for indexes that were added after the object was last
+written.  For example, if you add a new index to a bucket that already contains
+a million objects, it's necessary to examine the raw JSON value of each object,
+extract the value of the newly-indexed field, and add that value to the index.
+Until this has been completed for all objects in the bucket, the index is
+incomplete, and it will not be used in queries with `findobjects` and related
+tools.  Because reindexing every object in the bucket can take quite a while,
+the server does not do it automatically when the index is created with
+`putbucket(1)`.  Instead, users that add indexes must use the `reindexobjects`
+command to reindex all the objects in a bucket.
+
+`reindexobjects` reindexes any objects in bucket `BUCKET` that have not been
+reindexed since the last time an indexed field was added to the bucket (e.g.,
+using `putbucket(1)`).  This operation performs as many queries as necessary,
+each reindexing up to `COUNT` objects (which defaults to 100).  The command
+stops either when all objects have been reindexed or when an error occurs.  This
+operation can take an arbitrarily long time on arbitrarily large buckets.
+
+Reindexing is idempotent.  For each object, this operation updates all indexes
+that were created after the object was written.  If you add multiple indexed
+fields, even in multiple operations, you only need to reindex each object once.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Assuming that version 1 of a bucket has been created previously:
+
+    $ putbucket -x 1 -u loginName -u uid:number accounts
+
+and some records have been stored with other fields:
+
+    $ putobject -d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \
+        accounts lisa
+    $ putobject -d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \
+        accounts hugh
+
+and someone has added an index on the field "country" in the next version of
+the bucket:
+
+    $ putbucket -x 2 -u loginName -u uid:number -i country accounts
+
+The bucket's contents can be reindexed with:
+
+    $ reindexobjects accounts
+    bucket "accounts": 2 objects processed (continuing)
+    bucket "accounts": all objects processed
+
+See the example in `moray(1)`.
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`
diff --git a/docs/man/man1/sql.md b/docs/man/man1/sql.md
new file mode 100644
index 0000000..b9ca66f
--- /dev/null
+++ b/docs/man/man1/sql.md
@@ -0,0 +1,50 @@
+# sql 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+sql - check of a Moray server is functioning
+
+## SYNOPSIS
+
+`sql [COMMON_OPTIONS] SQL`
+
+## DESCRIPTION
+
+Executes a raw SQL command `SQL` against Moray's backing data store.  This is
+intended for experienced operators and developers to run ad hoc queries (usually
+read-only).  A mistake in the `SQL` string can cause all manner of bad behavior,
+including database deadlock, data corruption, and data loss.  This tool and
+Moray perform almost no validation on the input string.
+
+This should not be used as part of normal operation.  Normal operations should
+be first-classed as specific Moray requests with associated tools.
+
+## OPTIONS
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Run a simple SQL `SELECT` query for the current time:
+
+    $ sql 'SELECT NOW()'
+    {
+      "now": "2017-01-27T17:12:42.651Z"
+    }
+
+## SEE ALSO
+
+`moray(1)`
+
+## BUGS
+
+Moray removes newlines from all SQL commands that it executes, including those
+specified with this command.  The results can be surprising.  This most commonly
+affects SQL "--" comments, which run to the end of the line.  Since newlines are
+stripped, everything after the first opening "--" gets commented out.
diff --git a/docs/man/man1/updatemany.md b/docs/man/man1/updatemany.md
new file mode 100644
index 0000000..6e369df
--- /dev/null
+++ b/docs/man/man1/updatemany.md
@@ -0,0 +1,54 @@
+# updatemany 1 "January 2017" Moray "Moray Client Tools"
+
+## NAME
+
+updatemany - update multiple objects using a filter
+
+## SYNOPSIS
+
+`updatemany [COMMON_OPTIONS] [-d DATA] [-l LIMIT] BUCKET FILTER`
+
+## DESCRIPTION
+
+Updates objects from bucket `BUCKET` whose properties match the filter `FILTER`.
+`DATA` is a JSON object describing what to update.  Properties of `DATA` must be
+indexed fields.  For each matching row, the fields specified in `DATA` will be
+updated to their corresponding values in `DATA`.  Other fields are unchanged.
+
+Like `findobjects`, `updatemany` operations are always bounded in size.  See the
+`-l LIMIT` option.  You must use multiple invocations to update arbitrarily
+large lists of objects.
+
+`FILTER` is an LDAP-like filter string described in `findobjects(1)`.  The
+caveats described there around the use of unindexed fields apply to filters used
+with `updatemany` as well.
+
+## OPTIONS
+
+`-d DATA`
+  Specifies the fields to update in each matching object.
+
+`-l LIMIT`
+  Remove at most `LIMIT` objects.  This interacts badly with filters on
+  unindexed fields, as described in `findobjects(1)`.  If this option is
+  unspecified, a default limit is provided (which is currently 1000).
+
+See `moray(1)` for information about the `COMMON_OPTIONS`, which control
+the log verbosity and how to locate the remote server.
+
+## ENVIRONMENT
+
+See `moray(1)` for information about the `LOG_LEVEL`, `MORAY_SERVICE`, and
+`MORAY_URL` environment variables.
+
+## EXAMPLES
+
+Update objects in bucket "accounts" having a value of "country" equal to "UK"
+so that the "country" is now "United Kingdom":
+
+    $ updatemany -d '{ "country": "United Kingdom" }' accounts '(country=UK)'
+    { count: 1, etag: 'ue6d321d' }
+
+## SEE ALSO
+
+`moray(1)`, `putbucket(1)`, `putobject(1)`, `findobjects(1)`
diff --git a/docs/man/man3/moray.md b/docs/man/man3/moray.md
new file mode 100644
index 0000000..24939d7
--- /dev/null
+++ b/docs/man/man3/moray.md
@@ -0,0 +1,269 @@
+# moray 3 "January 2017" Moray "Moray Client Library"
+
+## NAME
+
+moray - Node.js client library for Moray
+
+## DESCRIPTION
+
+Moray is a JSON-based key-value store.  For an overview of Moray, see
+`moray(1)`.  This manual page assumes basic familiarity with the services Moray
+provides, how to use them from the command line, and how both SRV-based service
+discovery and traditional service discovery work from the command line.
+
+The `moray` npm package contains a Node.js client library that allows consumers
+to create, update, and delete both buckets and objects.  The package also
+contains a suite of command-line tools for exercising these interfaces.  When in
+doubt, see the implementation of those tools for examples of using each RPC
+call.
+
+### Creating a client
+
+To interact with Moray, users of the Node library instantiate a Moray client
+object, which requires a bunyan-style logger.  The simplest invocation, which is
+suitable only for one-off tools and test programs, would be to connect to Moray
+on localhost:
+
+    var mod_bunyan = require('bunyan');
+    var mod_moray = require('moray');
+
+    var log = mod_bunyan.createLogger({ name: 'my-tool', level: 'INFO' });
+
+    var client = mod_moray.createClient({
+        log: log,
+        host: '127.0.0.1',
+        port: 2020
+    });
+
+    client.on('connect', function () {
+        /* Start making RPC calls.  This example lists buckets. */
+        client.listBuckets(function (err, buckets) {
+            if (err) {
+                /* This should be handled more gracefully! */
+                throw (err);
+            }
+
+            console.log(JSON.stringify(buckets));
+
+            /* When finished, be sure to close the client. */
+            client.close();
+        });
+    });
+
+This works for a simple test program, but is not suitable for Triton and Manta
+servers or command-line tools for a few reasons:
+
+* This mode does not support SRV-based service discovery, which is critical for
+  increased scalability and improved fault tolerance.  SRV-based discovery is
+  configured by using the `srvDomain` property instead of `host` or `port.`
+* This mode does not enable the client to use bootstrap resolvers, which are
+  critical for use in mixed DNS environments (e.g., where a combination of
+  Triton, Manta, or external namservers may be in use).  Bootstrap resolvers are
+  configured using the `cueballOptions.resolvers` property.
+* Command-line tools should generally specify additional parameters to ensure
+  that they fail quickly when servers are down rather than retrying
+  indefinitely until they are online.  This means specifying `failFast`.  It's
+  also a good idea to specify `mustCloseBeforeNormalProcessExit` to make sure
+  that your tool shuts down cleanly.
+
+Here's a general pattern for *server* components in Triton and Manta to
+configure the Moray client:
+
+    var mod_jsprim = require('jsprim');
+
+    var client, config;
+
+    /*
+     * Extract the Moray client configuration block from the server's
+     * configuration file.  Here, we assume that "serverConfig" came from
+     * parsing the server's configuration file.  We also assume that the
+     * Moray configuration property is just called "moray", but some components
+     * (notably Muskie) have multiple clients, and they would use different
+     * property names (e.g., "picker" or "marlin").
+     */
+    config = jsprim.deepCopy(serverConfig.moray);
+    config.log = log;
+    client = mod_moray.createClient(config);
+    client.on('connect', function onMorayConnect() {
+        /* start using the client */
+    });
+
+*Client* components would usually add an `error` listener, too:
+
+    /*
+     * Client tools add an error listener.  Servers generally should NOT do this
+     * because they configure the client to retry indefinitely.  Any errors
+     * emitted by the client would be programmer errors.
+     */
+    client.on('error', function onError(err) {
+        console.error('moray client error: %s', err.message);
+        process.exit(1);
+    });
+
+In practice, `serverConfig.moray` comes from a SAPI configuration template.  For
+**Triton services**, it will typically look like this:
+
+    {
+        "srvDomain": "{{{MORAY_SERVICE}}}"
+        "cueballOptions": {
+            "resolvers": [ "{{{BINDER_SERVICE}}}" ]
+        }
+    }
+
+That will expand to something like this:
+
+    {
+        "srvDomain": "moray.mydatacenter.joyent.us",
+        "cueballOptions": {
+            "resolvers": [ "binder.mydatacenter.joyent.us" ]
+        }
+    }
+
+For **Manta services**, the template file will typically include a block that
+looks like this:
+
+    {
+        "srvDomain": "{{MARLIN_MORAY_SHARD}}",
+        "cueballOptions": {
+            "resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
+        }
+    }
+
+That will expand to something like this:
+
+    {
+        "srvDomain": "1.moray.myregion.joyent.us",
+        "cueballOptions": {
+            "resolvers": [ "nameservice.myregion.joyent.us" ]
+        }
+    }
+
+This approach (using a block from the configuration file) allows operators to
+reconfigure a service to point at a specific instance by replacing the
+`srvDomain` property with `host` and `port` properties.
+
+Command-line tools that use Moray should typically define their own options for
+specifying `srvDomain`, `host`, and `port` properties.  See `moray(1)` for the
+command-line options and fallback environment variables used by the built-in
+Moray tools.
+
+Command-line tools should generally also specify `failFast` and
+`mustCloseBeforeNormalProcessExit`.
+
+
+### Making RPC calls
+
+Callers make RPC calls by invoking RPC methods on the client.  The specific
+methods are documented in the [Moray server](https://github.com/joyent/moray)
+reference documentation.
+
+All RPC methods are asynchronous, and they all follow one of two styles
+described in the "Node.js Error Handling" documentat.  The style used depends on
+the kind of data returned by the RPC.
+
+* RPC calls that return a fixed number of results (usually just one object or a
+  small chunk of metadata) are callback-based: the last argument to the RPC
+  method is a callback.  The first argument to the callback is an optional
+  error, and subsequent arguments are RPC-specific.
+* RPC calls that return a large or variable number of results (like
+  `findObjects`) are event-emitter-based: they return an event emitter that
+  emits `error` on failure, `end` on completion, and other events depending on
+  the RPC call.
+
+All of the RPC methods take an optional `options` argument that is always the
+last non-callback argument.  (For callback-based RPCs, it's the second-to-last
+argument.  For event-emitter-based RPCs, it's the last argument.)  You can use
+this to pass in a `req_id` for correlating log entries from one service with
+the Moray client log entries.  Some APIs (namely put/get/del object) have
+additional options to allow cache bypassing, for example.
+
+
+## OPTIONS
+
+The client constructor uses named arguments on a single `args` object.
+
+All constructor invocations must provide:
+
+`log` (object)
+  a bunyan-style logger
+
+All constructor invocations must also provide one of the following:
+
+`srvDomain` (string)
+  DNS domain name for SRV-based service discovery
+
+`url` (string)
+  Describes the hostname or IP address and TCP port to specify a specific
+  Moray server to connect to (instead of using SRV-based service discovery).
+  This is deprecated for servers, and should only be used for tools, for
+  testing, and for unusual, temporary operational changes.  The format for
+  this option is the same as for the `MORAY_URL` environment variable
+  described in `moray(1)`.
+
+`host` (string) and `port` (integer or string)
+  Like `URL`, but specified using different properties.
+
+Callers may also provide:
+
+`cueballOptions` (object)
+  Overrides cueball-related options, including various timeouts and delays.
+  For specific options that can be overridden here, see the source.  **NOTE:
+  it's not expected that most consumers would need to specify any of these.
+  Default values ought to work for the port, DNS service, and all the various
+  timeouts, delays, and retry limits.**
+
+`failFast` (boolean)
+  If true, this sets a more aggressive retry policy, and the client emits
+  "error" when the underlying Cueball set reaches state "failed".  This is
+  intended for use by command-line tools to abort when it looks like dependent
+  servers are down.  Servers should generally not specify this option because
+  they should wait indefinitely for dependent services to come up.
+
+`unwrapErrors` (boolean)
+  If false (the default), Errors emitted by this client and RPC requests will
+  contain a cause chain that explains precisely what happened.  For example,
+  if an RPC fails with SomeError, you'll get back a FastRequestError
+  (indicating a request failure) caused by a FastServerError (indicating that
+  the failure was on the remote server, as opposed to a local or
+  transport-level failure) caused by a SomeError.  In this mode, you should
+  use VError.findCauseByName(err, 'SomeError') to determine whether the root
+  cause was a SomeError.
+  If the "unwrapErrors" option is true, then Fast-level errors are unwrapped
+  and the first non-Fast error in the cause chain is returned.  This is
+  provided primarily for compatibility with legacy code that uses err.name to
+  determine what kind of Error was returned.  New code should prefer
+  VError.findCauseByName() instead.
+
+`mustCloseBeforeNormalProcessExit` (boolean)
+  If true, then cause the program to crash if it would otherwise exit 0 and
+  this client has not been closed.  This is useful for making sure that client
+  consumers clean up after themselves.
+
+Some legacy options are accepted as documented in the source.
+
+## ENVIRONMENT
+
+The `LOG_LEVEL`, `MORAY_SERVICE`, and `MORAY_URL` environment variables are
+interpreted by each command-line tool, not the client library itself.
+
+
+## SEE ALSO
+
+`moray(1)`, [Moray server reference
+documentation](https://github.com/joyent/moray/blob/master/docs/index.md),
+[Node.js Error
+Handling](https://www.joyent.com/node-js/production/design/errors).
+
+
+## DIAGNOSTICS
+
+The client library logs messages using the bunyan logger.  Increase the log
+level for more verbose output.
+
+The underlying [node-fast](https://github.com/joyent/node-fast) RPC library
+provides DTrace probes on supported systems for inspecting low-level RPC events.
+
+Use Node's `--abort-on-uncaught-exception` command-line argument to enable core
+file generation upon fatal program failure.  These core files can be used with
+[mdb_v8](https://github.com/joyent/mdb_v8) to inspect the program's state at the
+time of the crash.
diff --git a/lib/client.js b/lib/client.js
index 424697c..65ff0f6 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -68,87 +68,10 @@ function emitUnavailable() {
  * appropriate TCP connections, while we maintain a small abstraction for
  * balancing requests across connections.
  *
- * You MUST specify the following named argument:
- *
- *     log             bunyan-style logger
- *
- * and ONE of the following:
- *
- *     srvDomain        for SRV-based backend discovery
- *
- *     url              to connect to backends with the specified hostname
- *                      (using A records) or IP address and port
- *
- *     host             like URL, but with separate properties
- *     (and optional port)
- *
- * You MAY also specify
- *
- *     cueballOptions   to override cueball-related options, including various
- *                      timeouts and delays.  For specific options that can be
- *                      overridden here, see the comment on
- *                      parseMorayParameters().  NOTE: it's not expected that
- *                      most consumers would need to specify any of these.
- *                      Default values ought to work for the port, DNS service,
- *                      and all the various timeouts, delays, and retry limits.
- *
- * or any number of legacy options documented with populateLegacyOptions().
- *
- * You MAY also specify:
- *
- *     failFast         If true, this sets a more aggressive retry policy, and
- *                      the client emits "error" when the underlying Cueball set
- *                      reaches state "failed".  This is intended for use by
- *                      command-line tools to abort when it looks like dependent
- *                      servers are down.  Servers should generally not specify
- *                      this option because they should wait indefinitely for
- *                      dependent services to come up.
- *
- *     unwrapErrors     If false (the default), Errors emitted by this client
- *                      and RPC requests will contain a cause chain that
- *                      explains precisely what happened.  For example, if an
- *                      RPC fails with SomeError, you'll get back a
- *                      FastRequestError (indicating a request failure) caused
- *                      by a FastServerError (indicating that the failure was on
- *                      the remote server, as opposed to a local or
- *                      transport-level failure) caused by a SomeError.  In this
- *                      mode, you should use VError.findCauseByName(err,
- *                      'SomeError') to determine whether the root cause was a
- *                      SomeError.
- *
- *                      If the "unwrapErrors" option is true, then Fast-level
- *                      errors are unwrapped and the first non-Fast error in the
- *                      cause chain is returned.  This is provided primarily for
- *                      compatibility with legacy code that uses err.name to
- *                      determine what kind of Error was returned.  New code
- *                      should prefer VError.findCauseByName() instead.
- *
- *    mustCloseBeforeNormalProcessExit
- *
- *                      If true, then cause the program to crash if it would
- *                      otherwise exit 0 and this client has not been closed.
- *                      This is useful for making sure that client consumers
- *                      clean up after themselves.
- *
- * A sample server invocation using SRV-record-based service discovery might
- * look like this:
- *
- *     var client = moray.createClient({
- *         'log': bunyan.createLogger( ... ),
- *         'srvDomain': 'moray.mydatacenter.joyent.us',
- *         'cueballOptions': {
- *             'resolvers': [ 'binder.mydatacenter.joyent.us' ]
- *         }
- *     });
- *
- * And an analogous CLI invocation might look like this:
- *
- *     var client = moray.createClient({
- *         'log': bunyan.createLogger( ... ),
- *         'srvDomain': 'moray.mydatacenter.joyent.us'
- *         'failFast': true,
- *         'mustCloseBeforeNormalProcessExit': true,
- *     });
+ * The options accepted, the constraints on them, and several examples are
+ * described in the moray(3) manual page inside this repository.  Callers can
+ * also specify any number of legacy options documented with
+ * populateLegacyOptions().
  */
 function MorayClient(options) {
     var self = this;
diff --git a/man/man1/delbucket.1 b/man/man1/delbucket.1
new file mode 100644
index 0000000..29c5677
--- /dev/null
+++ b/man/man1/delbucket.1
@@ -0,0 +1,32 @@
+.TH delbucket 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+delbucket \- delete a bucket from Moray
+.SH SYNOPSIS
+.PP
+\fB\fCdelbucket [COMMON_OPTIONS] BUCKET\fR
+.SH DESCRIPTION
+.PP
+Removes the bucket called \fB\fCBUCKET\fR from Moray.  Any objects contained in the
+bucket will be removed permanently.  This command fails if the bucket does not
+exist.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Delete a bucket called "accounts":
+.PP
+.RS
+.nf
+$ delbucket accounts
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR
diff --git a/man/man1/delmany.1 b/man/man1/delmany.1
new file mode 100644
index 0000000..ff571a4
--- /dev/null
+++ b/man/man1/delmany.1
@@ -0,0 +1,46 @@
+.TH delmany 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+delmany \- delete multiple objects using a filter
+.SH SYNOPSIS
+.PP
+\fB\fCdelmany [COMMON_OPTIONS] [\-l LIMIT] [\-o OFFSET] BUCKET FILTER\fR
+.SH DESCRIPTION
+.PP
+Deletes objects from bucket \fB\fCBUCKET\fR whose properties match the filter \fB\fCFILTER\fR\&.
+Like \fB\fCfindobjects\fR, \fB\fCdelmany\fR operations are always bounded in size.  See the
+\fB\fC\-l LIMIT\fR option.  You must use multiple invocations to remove arbitrarily
+large lists of objects.
+.PP
+\fB\fCFILTER\fR is an LDAP\-like filter string described in \fB\fCfindobjects(1)\fR\&.  The
+caveats described there around the use of unindexed fields apply to filters used
+with \fB\fCdelmany\fR as well.
+.SH OPTIONS
+.TP
+\fB\fC\-l LIMIT\fR
+Remove at most \fB\fCLIMIT\fR objects.  This interacts badly with filters on
+unindexed fields, as described in \fB\fCfindobjects(1)\fR\&.  If this option is
+unspecified, a default limit is provided (which is currently 1000).
+.TP
+\fB\fC\-o OFFSET\fR
+Skip the first \fB\fCOFFSET\fR objects matching the filter.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Delete all objects in bucket "accounts" having a "uid" value at most 800:
+.PP
+.RS
+.nf
+$ delmany accounts '(uid<=800)'
+2 records deleted
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR, \fB\fCfindobjects(1)\fR
diff --git a/man/man1/delobject.1 b/man/man1/delobject.1
new file mode 100644
index 0000000..29d3356
--- /dev/null
+++ b/man/man1/delobject.1
@@ -0,0 +1,31 @@
+.TH delobject 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+delobject \- delete an object by primary key
+.SH SYNOPSIS
+.PP
+\fB\fCdelobject [COMMON_OPTIONS] BUCKET KEY\fR
+.SH DESCRIPTION
+.PP
+Removes the object in bucket \fB\fCBUCKET\fR having primary key \fB\fCKEY\fR\&.  This command
+fails if the object does not exist.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Remove the object in "accounts" with key "hugh":
+.PP
+.RS
+.nf
+$ delobject accounts hugh
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR
diff --git a/man/man1/findobjects.1 b/man/man1/findobjects.1
new file mode 100644
index 0000000..a6e6a4d
--- /dev/null
+++ b/man/man1/findobjects.1
@@ -0,0 +1,171 @@
+.TH findobjects 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+findobjects \- fetch the contents of multiple objects using a filter
+.SH SYNOPSIS
+.PP
+\fB\fCfindobjects [COMMON_OPTIONS] [\-Hns] [\-a FIELD] [\-d FIELD] [\-l LIMIT] [\-o OFFSET] BUCKET FILTER\fR
+.SH DESCRIPTION
+.PP
+Fetches objects from bucket \fB\fCBUCKET\fR whose properties match the filter \fB\fCFILTER\fR\&.
+Matching objects are printed as JSON objects similar to the \fB\fCgetobject\fR command,
+with properties \fB\fCbucket\fR, \fB\fCkey\fR, \fB\fCvalue\fR, \fB\fC_id\fR, and \fB\fC_etag\fR\&.  This command also
+provides an additional JSON property on each object:
+.TP
+\fB\fC_count\fR
+A count of total objects matching this filter on the server.  See the
+important caveats below.
+.PP
+\fB\fCfindobjects\fR operations are always bounded in size.  See the \fB\fC\-l LIMIT\fR option.
+You must use multiple invocations using the \fB\fC\-l LIMIT\fR and \fB\fC\-o OFFSET\fR options
+(called \fIpagination\fP) to process arbitrarily large sets of objects.
+.PP
+\fB\fCFILTER\fR is an LDAP\-like filter string.  For example, this filter matches
+objects having property "hostname" with value "wormhole":
+.PP
+.RS
+.nf
+(hostname=wormhole)
+.fi
+.RE
+.PP
+This filter matches objects having a "unix_timestamp" property at most
+1482438844:
+.PP
+.RS
+.nf
+(unix_timestamp<=1482438844)
+.fi
+.RE
+.PP
+This filter matches objects meeting both constraints:
+.PP
+.RS
+.nf
+(&(hostname=wormhole)(unix_timestamp<=1482438844))
+.fi
+.RE
+.PP
+And this filter matches objects meeting either one:
+.PP
+.RS
+.nf
+(|(hostname=wormhole)(unix_timestamp<=1482438844))
+.fi
+.RE
+.PP
+In order to avoid expensive table scans, Moray requires that filter strings use
+at least one of the bucket's indexed fields in a way that could prune results
+(e.g., not just on one side of an "OR" clause).  Note that you can still
+construct filters that require table scans (e.g., \fB\fC(hostname=*)\fR), and
+reasonable\-looking filters can still behave pathologically.  Performance depends
+significantly on the behavior of the underlying data store.  The requirement
+around indexed fields is a heuristic to prevent obviously\-pathological behavior,
+not a guarantee of good behavior.
+.PP
+Filters can include both indexed and unindexed fields, but \fBusing unindexed
+fields in filters is strongly discouraged.\fP  They cannot be used correctly with
+pagination (the \fB\fC\-o OFFSET\fR and \fB\fC\-l LIMIT\fR options) and they do not produce
+correct values for \fB\fC_count\fR\&.  Attempting to use these options with filters that
+use unindexed fields often results in truncated result sets.
+.SH OPTIONS
+.TP
+\fB\fC\-a FIELD\fR
+Sort results in ascending order by indexed field \fB\fCFIELD\fR\&.
+.TP
+\fB\fC\-d DESC\fR
+Sort results in descending order by indexed field \fB\fCFIELD\fR\&.
+.TP
+\fB\fC\-H\fR
+Print objects using minimal JSON with one object per line (instead of
+inserting newlines within objects and indenting for readability)
+.TP
+\fB\fC\-l LIMIT\fR
+Return at most \fB\fCLIMIT\fR objects.  With \fB\fC\-o OFFSET\fR, this can be used to page
+through a large result set.  However, this interacts badly with filters on
+undexed fields as described above.  If this option is unspecified, a default
+limit is provided (which is currently 1000).
+.TP
+\fB\fC\-n\fR
+Do not report the \fB\fC_count\fR field with each object.  (This also skips
+executing the underlying query on the server to perform the count.)
+.TP
+\fB\fC\-o OFFSET\fR
+Skip the first \fB\fCOFFSET\fR objects matching the filter.  With \fB\fC\-l LIMIT\fR, this
+can be used to page through a large result set.
+.TP
+\fB\fC\-s\fR
+Do not execute the query, but instead report the SQL strings that would be
+used to execute the query on the underlying data store.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Fetch objects in "accounts" having a non\-NULL value of \fB\fCloginName\fR:
+.PP
+.RS
+.nf
+$ findobjects accounts '(loginName=*)'
+.fi
+.RE
+.PP
+Fetch objects in "accounts" having a numeric uid at most 800:
+.PP
+.RS
+.nf
+$ findobjects accounts '(uid<=800)'
+.fi
+.RE
+.PP
+Run the same query, sorting the results in increasing order of uid:
+.PP
+.RS
+.nf
+$ findobjects \-a uid accounts '(uid<=800)'
+.fi
+.RE
+.PP
+Run the above query, fetching only the first 5 results:
+.PP
+.RS
+.nf
+$ findobjects \-l 5 accounts '(uid<=800)'
+.fi
+.RE
+.PP
+Run the above query, fetching the second 10 results:
+.PP
+.RS
+.nf
+$ findobjects \-o 5 \-l 10 accounts '(uid<=800)'
+.fi
+.RE
+.PP
+Fetch the SQL that would be used to execute the previous query:
+.PP
+.RS
+.nf
+$ findobjects \-s \-o 5 \-l 10 accounts '(uid<=800)'
+{
+  "count": "SELECT count(1) over () as _count, '7e99cfd6\-9758\-64a1\-e20a\-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
+  "query": "SELECT *, '7e99cfd6\-9758\-64a1\-e20a\-e4594bfb43be' AS req_id FROM accounts WHERE  ( uid <= $1 AND uid IS NOT NULL )  LIMIT 10 OFFSET 5",
+  "args": [
+    800
+  ]
+}
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR, \fB\fCgetobject(1)\fR, \fB\fCdelmany(1)\fR,
+\fB\fCupdatemany(1)\fR\&.
+.SH BUGS
+.PP
+For the reasons mentioned above, it is generally considered a bug that Moray
+allows filter strings to use unindexed fields.  This is likely to change in
+future versions.
diff --git a/man/man1/getbucket.1 b/man/man1/getbucket.1
new file mode 100644
index 0000000..72bf91e
--- /dev/null
+++ b/man/man1/getbucket.1
@@ -0,0 +1,55 @@
+.TH getbucket 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+getbucket \- print detailed information about one bucket
+.SH SYNOPSIS
+.PP
+\fB\fCgetbucket [COMMON_OPTIONS] BUCKET\fR
+.SH DESCRIPTION
+.PP
+Fetches a JSON representation for the configuration of the bucket \fB\fCBUCKET\fR\&.
+This representation includes information about the bucket's version and the
+indexes defined for it.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Fetch details about bucket "accounts":
+.PP
+.RS
+.nf
+$ getbucket accounts
+{
+  "name": "accounts",
+  "index": {
+    "loginName": {
+      "type": "string",
+      "unique": true
+    },
+    "uid": {
+      "type": "number",
+      "unique": true
+    },
+    "country": {
+      "type": "string",
+      "unique": false
+    }
+  },
+  "pre": [],
+  "post": [],
+  "options": {
+    "version": 2
+  },
+  "mtime": "2017\-01\-27T17:56:42.005Z"
+}
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR
diff --git a/man/man1/getobject.1 b/man/man1/getobject.1
new file mode 100644
index 0000000..157c767
--- /dev/null
+++ b/man/man1/getobject.1
@@ -0,0 +1,72 @@
+.TH getobject 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+getobject \- fetch the contents of an object by primary key
+.SH SYNOPSIS
+.PP
+\fB\fCgetobject [COMMON_OPTIONS] [\-Hs] BUCKET KEY\fR
+.SH DESCRIPTION
+.PP
+Fetches the contents of the object in \fB\fCBUCKET\fR having primary key \fB\fCKEY\fR\&.  The
+result is emitted as JSON with properties:
+.TP
+\fB\fCbucket\fR
+matches BUCKET
+.TP
+\fB\fCkey\fR
+matches KEY
+.TP
+\fB\fCvalue\fR
+the contents of the object, which are completely user\-defined
+.TP
+\fB\fC_id\fR
+a unique, integer id associated with each object.  It should not be assumed
+that these ids are assigned in any particular order, and the id may change
+across certain kinds of updates.  Critically, if a caller inserts objects 1
+and 2 concurrently and another caller sees object 2, then it may also see
+object 1, but it may not.  Ids may be assigned out of insertion order.
+.TP
+\fB\fC_etag\fR
+a numeric value calculated from the contents of the object.  This can be
+used for conditional put operations.  See \fB\fCputobject(1)\fR\&.
+.SH OPTIONS
+.TP
+\fB\fC\-H\fR
+Print the object using minimal JSON (instead of inserting newlines and
+indenting for readability)
+.TP
+\fB\fC\-s\fR
+Accepted for backwards compatibility only.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Fetch the object with key "lisa" in bucket "accounts":
+.PP
+.RS
+.nf
+$ getobject accounts lisa
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800,
+    "country": "USA"
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": null
+}
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR, \fB\fCfindobjects(1)\fR
diff --git a/man/man1/gettokens.1 b/man/man1/gettokens.1
new file mode 100644
index 0000000..6428773
--- /dev/null
+++ b/man/man1/gettokens.1
@@ -0,0 +1,61 @@
+.TH gettokens 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+gettokens \- fetch the list of shards from electric\-moray
+.SH SYNOPSIS
+.PP
+\fB\fCgettokens [COMMON_OPTIONS]\fR
+.SH DESCRIPTION
+.PP
+Reports the list of physical shards behind an electric\-moray instance.
+.PP
+Electric\-moray is a component typically deployed in front of several separate
+Moray shards.  Electric\-moray instances speak the Moray protocol to their
+clients, but they use consistent hashing on some field of each object to select
+the appropriate backend to handle each request.  (This functions similar to a
+layer\-7 load balancer.)  A full discussion of electric\-moray is beyond the scope
+of this documentation.
+.PP
+For this command, the service specified with the \fB\fCCOMMON_OPTIONS\fR should be an
+electric\-moray instance, not a moray instance.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Using an electric\-moray service, this operation reports a list of URLs:
+.PP
+.RS
+.nf
+$ gettokens \-h electric\-moray.emy\-10.joyent.us
+{
+  "tokens": [
+    "tcp://1.moray.emy\-10.joyent.us:2020",
+    "tcp://2.moray.emy\-10.joyent.us:2020"
+  ]
+}
+.fi
+.RE
+.PP
+Using most Moray servers, this operation is not supported:
+.PP
+.RS
+.nf
+$ gettokens
+gettokens: moray client ("172.27.10.72:52387" to "172.27.10.76:2020"): request failed: server error: Operation not supported
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR
+.SH BUGS
+.PP
+It's not clear why backend shards are called "tokens".
+.PP
+This command likely belongs with an electric\-moray tool suite, rather than the
+Moray tool suite.
diff --git a/man/man1/listbuckets.1 b/man/man1/listbuckets.1
new file mode 100644
index 0000000..00667f6
--- /dev/null
+++ b/man/man1/listbuckets.1
@@ -0,0 +1,78 @@
+.TH listbuckets 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+listbuckets \- print detailed information about all buckets
+.SH SYNOPSIS
+.PP
+\fB\fClistbuckets [COMMON_OPTIONS]\fR
+.SH DESCRIPTION
+.PP
+Fetches a JSON representation for the configuration of all buckets on the remote
+server.  See \fB\fCgetbucket(1)\fR for details about this representation.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+List details about the buckets on a Moray server:
+.PP
+.RS
+.nf
+$ listbuckets
+[
+  {
+    "name": "accounts",
+    "index": {
+      "loginName": {
+        "type": "string",
+        "unique": true
+      }
+    },
+    "pre": [],
+    "post": [],
+    "options": {
+      "version": 1
+    },
+    "mtime": "2017\-01\-27T17:22:32.288Z"
+  },
+  {
+    "name": "accounts_withnames",
+    "index": {
+      "loginName": {
+        "type": "string",
+        "unique": true
+      },
+      "fullName": {
+        "type": "string",
+        "unique": false
+      }
+    },
+    "pre": [],
+    "post": [],
+    "options": {
+      "version": 2
+    },
+    "mtime": "2017\-01\-27T17:22:45.965Z"
+  }
+]
+.fi
+.RE
+.PP
+Using the \fB\fCjson(1)\fR tool, you can easily list just the buckets' names:
+.PP
+.RS
+.nf
+$ listbuckets | json \-ga name
+accounts
+accounts_withnames
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCgetbucket(1)\fR, \fB\fCputbucket(1)\fR,
+jsontool \[la]https://github.com/trentm/json\[ra]
diff --git a/man/man1/moray.1 b/man/man1/moray.1
new file mode 100644
index 0000000..cc835fa
--- /dev/null
+++ b/man/man1/moray.1
@@ -0,0 +1,339 @@
+.TH moray 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+moray \- command\-line tools for Moray
+.SH DESCRIPTION
+.PP
+Moray is a JSON\-based key\-value store.  Users can create \fBbuckets\fP, each
+containing any number of \fBobjects\fP indexed by a primary \fBkey\fP\&.  Additional
+indexes can be specified with each bucket.  Moray servers are typically
+stateless components deployed atop PostgreSQL databases, where buckets
+correspond to database tables, objects correspond to rows, and database indexes
+are created for each bucket index.
+.PP
+The \fB\fCmoray\fR npm package contains a set of command\-line tools to allow users to
+create, update, and delete both buckets and objects.  These tools connect to one
+or more remote Moray servers over TCP and execute operations.
+.PP
+Working with buckets:
+.RS
+.IP \(bu 2
+\fB\fCputbucket\fR: create or update a bucket
+.IP \(bu 2
+\fB\fCgetbucket\fR: print detailed information about one bucket
+.IP \(bu 2
+\fB\fClistbuckets\fR: print detailed information about all buckets
+.IP \(bu 2
+\fB\fCdelbucket\fR: delete a bucket and all of its contents
+.RE
+.PP
+Working with objects:
+.RS
+.IP \(bu 2
+\fB\fCputobject\fR: create or update an object
+.IP \(bu 2
+\fB\fCgetobject\fR: fetch the contents of an object by primary key
+.IP \(bu 2
+\fB\fCdelobject\fR: delete an object by primary key
+.IP \(bu 2
+\fB\fCfindobjects\fR: fetch the contents of multiple objects using a filter
+.IP \(bu 2
+\fB\fCdelmany\fR: delete multiple objects using a filter
+.IP \(bu 2
+\fB\fCupdatemany\fR: update multiple objects using a filter
+.IP \(bu 2
+\fB\fCreindexobjects\fR: populate a newly\-added index
+.RE
+.PP
+Working with remote servers:
+.RS
+.IP \(bu 2
+\fB\fCmorayping\fR: check whether Moray is online
+.IP \(bu 2
+\fB\fCmorayversion\fR: check the version of a Moray server
+.IP \(bu 2
+\fB\fCsql\fR: execute a SQL string on a Moray server
+.IP \(bu 2
+\fB\fCgettokens\fR: fetch the list of shards from electric\-moray
+.RE
+.PP
+The tools in this package support two modes for locating the remote Moray server
+on which to operate:
+.RS
+.IP \(bu 2
+Using the \fB\fC\-S\fR/\fB\fC\-\-service SERVICE_NAME\fR option or the \fB\fCMORAY_SERVICE\fR
+environment variable, users specify a DNS domain to which SRV records are
+attached that describe the list of instances available.  SRV records provide
+both a name for the host (which may be an IP address or another DNS domain)
+and a port on which to connect over TCP.  This mode is preferred for
+general use because it provides information about all instances and allows the
+client to balance multiple requests across different, equivalent servers.
+.IP \(bu 2
+Using the \fB\fC\-h\fR/\fB\fC\-\-host HOST_OR_IP\fR and \fB\fC\-p\fR/\fB\fC\-\-port PORT\fR options or the
+\fB\fCMORAY_URL\fR environment variable, users specify a specific IP address or DNS
+domain to which traditional name records are attached and a TCP port to which
+to connect.  This is useful primarily for testing against specific server
+instances.
+.RE
+.PP
+If the \fB\fC\-S\fR/\fB\fC\-\-service SERVICE_NAME\fR command\-line option is specified, it is
+always used directly as described above.
+.PP
+If the \fB\fC\-h\fR/\fB\fC\-\-host HOST_OR_IP\fR or \fB\fC\-p\fR/\fB\fC\-\-port PORT\fR options are specified,
+they are used directly as described above.  If one is specified and not the
+other, then the other value is filled in from the \fB\fCMORAY_URL\fR environment
+variable.  Otherwise, defaults of IP \fB\fC127.0.0.1\fR and port \fB\fC2020\fR are used.
+.PP
+If none of these command\-line options are specified:
+.RS
+.IP \(bu 2
+if \fB\fCMORAY_SERVICE\fR is specified, it is used to invoke the first mode
+.IP \(bu 2
+if \fB\fCMORAY_URL\fR is specified, is used to invoke the second mode
+.IP \(bu 2
+if neither is specified, the second mode is invoked with default values
+\fB\fC127.0.0.1\fR port \fB\fC2020\fR\&.
+.RE
+.SH OPTIONS
+.PP
+The following \fB\fCCOMMON_OPTIONS\fR options are accepted by all of these commands:
+.TP
+\fB\fC\-b, \-\-bootstrap\-domain BOOTSTRAP_DOMAIN\fR
+Specifies the domain name for the nameservers themselves.  Triton and Manta
+both provide domain names for the nameservers themselves.  This is useful in
+split DNS environments to ensure that the Moray only uses the nameservers
+that know about the target service.  This applies to both SRV\-record\-based
+discovery and traditional A\-record\-based discovery, but has no impact when
+connecting to a specific IP address and port.
+.TP
+\fB\fC\-h, \-\-host HOST_OR_IP\fR
+Specifies an IP address or DNS domain for the remote Moray server.  See
+above for details.
+.TP
+\fB\fC\-p, \-\-port PORT\fR
+Specifies the TCP port for the remote Moray server.  See above for details.
+.TP
+\fB\fC\-S, \-\-service SERVICE\fR
+Specifies a DNS domain to be used for SRV\-based service discovery of the
+remote Moray server.  See above for details.  \fB\fCSERVICE\fR must not be an IP
+address.
+.TP
+\fB\fC\-v, \-\-verbose\fR
+Increases the verbosity of the built\-in bunyan logger.  By default, the
+logger is created with bunyan level \fB\fCfatal\fR\&.  Each additional use of \fB\fC\-v\fR
+increases the verbosity by one level (to \fB\fCerror\fR, \fB\fCwarn\fR, and so on).  Log
+messages are emitted to stderr.  See also the \fB\fCLOG_LEVEL\fR environment
+variable.
+.SH ENVIRONMENT
+.TP
+\fB\fCLOG_LEVEL\fR
+Sets the node\-bunyan logging level. Defaults to "fatal".
+.TP
+\fB\fCMORAY_BOOTSTRAP_DOMAIN\fR
+Used as a fallback value for the \fB\fC\-b\fR/\fB\fC\-\-bootstrap\-domain\fR option.
+.TP
+\fB\fCMORAY_SERVICE\fR
+Used as a fallback value for \fB\fC\-S\fR/\fB\fC\-\-service\fR if neither of \fB\fC\-h\fR/\fB\fC\-\-host\fR or
+\fB\fC\-p\fR/\fB\fC\-\-port\fR is specified.
+.TP
+\fB\fCMORAY_URL\fR
+A URL of the form \fB\fCtcp://HOSTNAME_OR_IP[:PORT]\fR where the specified
+\fB\fCHOSTNAME_OR_IP\fR and \fB\fCPORT\fR will be used as fallback values for the
+\fB\fC\-h\fR/\fB\fC\-\-host\fR or \fB\fC\-p/\-\-port\fR options, respectively.  This value is only used
+if \fB\fCMORAY_SERVICE\fR is not present in the environment and at least one of the
+\fB\fC\-h\fR/\fB\fC\-\-host\fR or \fB\fC\-p\fR/\fB\fC\-\-port\fR options is not specified.
+.SH EXIT STATUS
+.TP
+0
+Indicates successful completion
+.TP
+1
+Indicates failure
+.TP
+2
+Indicates an invalid invocation (usage error)
+.SH EXAMPLES
+.PP
+Create a bucket for "accounts" version 1 with unique "loginName" and unique
+numeric values for "uid":
+.PP
+.RS
+.nf
+$ putbucket \-x 1 \-u loginName \-u uid:number accounts
+.fi
+.RE
+.PP
+Insert a few accounts.  The keys will match the login names:
+.PP
+.RS
+.nf
+$ putobject \-d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \\
+    accounts lisa
+$ putobject \-d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \\
+    accounts hugh
+.fi
+.RE
+.PP
+Fetch one of these back:
+.PP
+.RS
+.nf
+$ getobject accounts lisa
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800,
+    "country": "USA"
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": null
+}
+.fi
+.RE
+.PP
+Fetch objects having uids at most 800:
+.PP
+.RS
+.nf
+$ findobjects accounts '(uid<=800)'
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Update the bucket to version 2, which contains a new non\-unique indexed column
+for "country":
+.PP
+.RS
+.nf
+$ putbucket \-x 2 \-u loginName \-u uid:number \-i country accounts
+.fi
+.RE
+.PP
+Re\-index the objects in the bucket:
+.PP
+.RS
+.nf
+$ reindexobjects accounts
+bucket "accounts": 2 objects processed (continuing)
+bucket "accounts": all objects processed
+.fi
+.RE
+.PP
+Now we can search for accounts by country:
+.PP
+.RS
+.nf
+$ findobjects accounts '(country=UK)'
+{
+  "bucket": "accounts",
+  "key": "hugh",
+  "value": {
+    "loginName": "hugh",
+    "uid": 801,
+    "country": "UK"
+  },
+  "_id": 2,
+  "_etag": "82E66E74",
+  "_mtime": 1485539319781,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Update "country" for accounts with country = "UK":
+.PP
+.RS
+.nf
+$ updatemany \-d '{ "country": "United Kingdom" }' accounts '(country=UK)'
+{ count: 1, etag: 'ue6d321d' }
+.fi
+.RE
+.PP
+Now fetch back "hugh":
+.PP
+.RS
+.nf
+$ getobject accounts hugh
+{
+  "bucket": "accounts",
+  "key": "hugh",
+  "value": {
+    "loginName": "hugh",
+    "uid": 801,
+    "country": "United Kingdom"
+  },
+  "_id": 2,
+  "_etag": "ue6d321d",
+  "_mtime": 1485539410157,
+  "_txn_snap": null,
+  "_count": null
+}
+.fi
+.RE
+.PP
+Now delete that object:
+.PP
+.RS
+.nf
+$ delobject accounts hugh
+.fi
+.RE
+.PP
+List everything in the bucket (more precisely, everything having a non\-null
+"loginName"):
+.PP
+.RS
+.nf
+$ findobjects accounts '(loginName=*)'
+{
+  "bucket": "accounts",
+  "key": "lisa",
+  "value": {
+    "loginName": "lisa",
+    "uid": 800,
+    "country": "USA"
+  },
+  "_id": 1,
+  "_etag": "77472568",
+  "_mtime": 1485539314987,
+  "_txn_snap": null,
+  "_count": 1
+}
+.fi
+.RE
+.PP
+Finally, remove the bucket:
+.PP
+.RS
+.nf
+$ delbucket accounts
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(3)\fR, \fB\fCdelbucket(1)\fR, \fB\fCdelmany(1)\fR, \fB\fCdelobject(1)\fR, \fB\fCfindobjects(1)\fR,
+\fB\fCgetbucket(1)\fR, \fB\fCgetobject(1)\fR, \fB\fCgettokens(1)\fR, \fB\fClistbuckets(1)\fR,
+\fB\fCmorayping(1)\fR, \fB\fCmorayversion(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR,
+\fB\fCreindexobjects(1)\fR, \fB\fCsql(1)\fR, \fB\fCupdatemany(1)\fR,
+jsontool \[la]https://github.com/trentm/json\[ra]
+.SH DIAGNOSTICS
+.PP
+See the \fB\fC\-v\fR/\fB\fC\-\-verbose\fR option and the \fB\fCLOG_LEVEL\fR environment variable.
diff --git a/man/man1/morayping.1 b/man/man1/morayping.1
new file mode 100644
index 0000000..a2f0fb4
--- /dev/null
+++ b/man/man1/morayping.1
@@ -0,0 +1,62 @@
+.TH morayping 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+morayping \- check if a Moray server is functioning
+.SH SYNOPSIS
+.PP
+\fB\fCmorayping [COMMON_OPTIONS] [\-dF]\fR
+.SH DESCRIPTION
+.PP
+Attempts to determine whether Moray is functioning.  For this command, success
+indicates that Moray is functioning and able to respond to a request.  Failure
+indicates the command could not successfully connect and complete a request.
+.SH OPTIONS
+.TP
+\fB\fC\-d\fR
+Attempt to determine whether Moray has a working connection to its
+underlying data store by making a "deep" ping request instead of a trivial
+request.
+.TP
+\fB\fC\-F\fR
+Block until at least one Moray server is found and a connection is
+established, then execute the ping request.  This is intended to
+programmatically wait for Moray to become available, although if the request
+fails (e.g., because of a network issue), the request is not retried, and in
+this case Moray may still be down.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Check whether a Moray server is online:
+.PP
+.RS
+.nf
+$ morayping
+.fi
+.RE
+.PP
+Check whether the target server has working connections to its underlying data
+store:
+.PP
+.RS
+.nf
+$ morayping \-d
+.fi
+.RE
+.PP
+When the remote server is not online, you might get an error like this:
+.PP
+.RS
+.nf
+$ morayping \-h 127.0.0.1
+morayping: moray client "127.0.0.1:2020": failed to establish connection
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR
diff --git a/man/man1/morayversion.1 b/man/man1/morayversion.1
new file mode 100644
index 0000000..6f05f45
--- /dev/null
+++ b/man/man1/morayversion.1
@@ -0,0 +1,55 @@
+.TH morayversion 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+morayversion \- report the version of a Moray server
+.SH SYNOPSIS
+.PP
+\fB\fCmorayversion [COMMON_OPTIONS]\fR
+.SH DESCRIPTION
+.PP
+Attempts to determine the major version of the Moray server.  \fBThis information
+should not be used programmatically.\fP  This command is intended primarily for
+operators and developers to use against specific Moray instances, either for
+debugging or in preparation for upgrading.
+.PP
+There are important caveats about this operation:
+.RS
+.IP \(bu 2
+It's always possible for an operator to upgrade or rollback a Moray server
+immediately after this command is executed.  It's not safe to assume that the
+value returned by this command will not change over time.
+.IP \(bu 2
+With most forms of service discovery (described in \fB\fCmoray(1)\fR), this request
+may be made against any of a number of different Moray server instances.  But
+different Moray instances may be running different versions.  This case
+further demonstrates that it's not safe to assume that the value returned by
+this command will not change over time, even from one millisecond to the next.
+.IP \(bu 2
+Old versions of Moray do not respond to the version request at all.  On such
+servers, this command will time out (currently after 20 seconds).  It's
+impossible to know if a timeout indicates an old version, a bug or hang on the
+remote server, or a network issue.
+.RE
+.PP
+These caveats generally make this command unsuitable for programmatic use.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Check the version of a Moray server:
+.PP
+.RS
+.nf
+$ morayversion
+2
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR
diff --git a/man/man1/putbucket.1 b/man/man1/putbucket.1
new file mode 100644
index 0000000..f735d17
--- /dev/null
+++ b/man/man1/putbucket.1
@@ -0,0 +1,151 @@
+.TH putbucket 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+putbucket \- create or update a bucket
+.SH SYNOPSIS
+.PP
+\fB\fCputbucket [COMMON_OPTIONS] [\-st] [\-i FIELD[:TYPE]...] [\-u FIELD[:TYPE]...] [\-x VERSION] BUCKET\fR
+.SH DESCRIPTION
+.PP
+Creates or updates a bucket in Moray called \fB\fCBUCKET\fR\&.  If the bucket does not
+exist, it is created.  If the bucket already exists and has a version, the
+bucket will only be updated if \fB\fC\-x\fR is specified and \fB\fCVERSION\fR is greater than
+the version of the bucket on the server.
+.PP
+A bucket's configuration includes:
+.RS
+.IP \(bu 2
+a list of field names (also referred to as a \fBschema\fP) that describes the
+top\-level properties for which database indexes should be created.  These
+indexes enable querying and manipulation using filters accepted by the
+\fB\fCfindobjects\fR, \fB\fCupdatemany\fR, and \fB\fCdelmany\fR tools.
+.IP \(bu 2
+an optional version number, which is used to coordinate schema updates among
+multiple clients having different versions.
+.IP \(bu 2
+a set of options defined by the server.  The only option supported by this
+tool is \fB\fCtrackModification\fR\&.
+.IP \(bu 2
+\fB\fCpre\fR and \fB\fCpost\fR triggers, which are functions executed on the Moray server
+.RE
+.PP
+Users may specify the bucket configuration using a combination of the \fB\fC\-i\fR,
+\fB\fC\-u\fR, \fB\fC\-x\fR, or \fB\fC\-t\fR options, or using the \fB\fC\-s\fR option and providing a JSON
+description on stdin.  The \fB\fC\-s\fR option must be used for specifying \fB\fCpre\fR and
+\fB\fCpost\fR triggers.
+.PP
+When you use \fB\fCputbucket(1)\fR to add a new indexed field, that field will not be
+treated as indexed (in filters with \fB\fCfindobjects\fR and similar tools) until all
+objects in the bucket have been reindexed.  See \fB\fCreindexobjects(1)\fR\&.
+.SH OPTIONS
+.TP
+\fB\fC\-i FIELD[:TYPE]\fR
+Adds an index on the top\-level property called \fB\fCFIELD\fR\&.  \fB\fCFIELD\fR can
+subsequently be used in filters for \fB\fCfindobjects\fR, \fB\fCupdatemany\fR, and
+\fB\fCdelmany\fR operations.  The optional \fB\fCTYPE\fR is interpreted by the server.
+.TP
+\fB\fC\-s\fR
+Read the bucket's configuration from stdin rather than the other
+command\-line options.  Other bucket\-related command\-line options are
+ignored.
+.TP
+\fB\fC\-t\fR
+Enable the \fB\fCtrackModification\fR server\-side option for this bucket.
+.TP
+\fB\fC\-u FIELD[:TYPE]\fR
+Adds an index just like the \fB\fC[\-i]\fR option, but additionally require that
+values of field \fB\fCFIELD\fR must be unique within the bucket.  Attempting to
+insert a second object having the same value of \fB\fCFIELD\fR as another object in
+the bucket will fail.  This constraint is maintained by the underlying data
+store.
+.TP
+\fB\fC\-x VERSION\fR
+Only create or update the bucket if it does not already exist on the server,
+or if it exists with no version number, or if it exists with a version
+number that's older than \fB\fCVERSION\fR\&.  The new \fB\fCVERSION\fR is stored with the
+bucket configuration.
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.PP
+The JSON read from stdin may have the following properties:
+.TP
+\fB\fCindexes\fR
+an object whose properties identify each of the indexed fields.  Each value
+is an object with properties \fB\fCtype\fR (a string) and \fB\fCunique\fR (a boolean).
+.TP
+\fB\fCoptions\fR
+an object describing options interpreted by the server.  This may include
+the \fB\fCtrackModification\fR option, which should be a boolean value.
+.TP
+\fB\fCpost\fR, \fB\fCpre\fR
+arrays of strings containing JavaScript functions to be executed before
+(\fB\fCpre\fR) or after (\fB\fCpost\fR) various operations.  See server documentation for
+details.  The strings themselves are evaluated in the context of this tool.
+.TP
+\fB\fCversion\fR
+an integer version number, as would be specified with \fB\fC\-x\fR
+.PP
+Default values are provided that correspond to this configuration:
+.PP
+.RS
+.nf
+{
+    "indexes": {},
+    "options": {},
+    "pre": [],
+    "post": []
+}
+.fi
+.RE
+.PP
+By default, the bucket is not versioned.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Create a bucket at version 1 called "accounts" with no indexed fields:
+.PP
+.RS
+.nf
+$ putbucket \-x 1 accounts
+.fi
+.RE
+.PP
+This bucket can be used as a key\-value store, but would not support
+\fB\fCfindobjects\fR or other operations that operate on indexed fields.
+.PP
+Create a bucket called "accounts" with a unique "loginName" field and an
+indexed "fullName" field:
+.PP
+.RS
+.nf
+$ putbucket \-x 1 \-u loginName \-i fullName accounts
+.fi
+.RE
+.PP
+Create the same bucket with version number "3":
+.PP
+.RS
+.nf
+$ putbucket \-x 3 \-u loginName \-i fullName accounts
+.fi
+.RE
+.PP
+Attempt to create the same bucket with an older version:
+.PP
+.RS
+.nf
+$ putbucket \-x 2 \-u loginName \-i fullName accounts
+putbucket: moray client ("172.27.10.72:65434" to "172.27.10.40:2022"): request failed: server error: accounts has a newer version than 2 (3)
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCreindexobjects(1)\fR
+.SH BUGS
+.PP
+The JSON format is not validated on the client side.  Future versions of this
+tool may validate input on the client.
diff --git a/man/man1/putobject.1 b/man/man1/putobject.1
new file mode 100644
index 0000000..70a56fa
--- /dev/null
+++ b/man/man1/putobject.1
@@ -0,0 +1,50 @@
+.TH putobject 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+putobject \- create or update an object
+.SH SYNOPSIS
+.PP
+\fB\fCputobject [COMMON_OPTIONS] [\-d DATA] [\-e ETAG] BUCKET KEY\fR
+.SH DESCRIPTION
+.PP
+Creates or updates an object in bucket \fB\fCBUCKET\fR with primary key \fB\fCKEY\fR\&.  If no
+object exists having the same key, a new object is created.  If the object
+exists (and if its etag matches \fB\fCETAG\fR, if \fB\fC\-e\fR was specified), then the old
+object is overwritten and atomically replaced with the new one.  The object's
+contents are specified by the JSON string \fB\fCDATA\fR\&.
+.SH OPTIONS
+.TP
+\fB\fC\-d DATA\fR
+Specifies the contents of the object as a JSON string.  Generally, objects
+should conform to a user\-defined schema, having a fixed set of properties
+and types.  However, there are no constraints imposed by the server other
+than uniqueness for fields that are specifically marked unique in the bucket
+configuration.  Top\-level properties of the object that correspond to
+indexed fields will be extracted and included in an index so that it can be
+queried and updated.  See \fB\fCputbucket(1)\fR for details.
+.TP
+\fB\fC\-e ETAG\fR
+Only execute this operation if the corresponding object on the server
+currently has etag \fB\fCETAG\fR\&.  Etags are computed on the server based on
+object contents, and they are included in the results of any object fetch
+operation.  This option can be used to implement optimistic concurrency
+control (as a form of test\-and\-set operation).
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Inserts or updates an object with key "lisa" in bucket "accounts":
+.PP
+.RS
+.nf
+$ putobject \-d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \\
+    accounts lisa
+.fi
+.RE
+.PP
+See also the examples in \fB\fCmoray(1)\fR\&.
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR
diff --git a/man/man1/reindexobjects.1 b/man/man1/reindexobjects.1
new file mode 100644
index 0000000..e5238c7
--- /dev/null
+++ b/man/man1/reindexobjects.1
@@ -0,0 +1,83 @@
+.TH reindexobjects 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+reindexobjects \- populate a newly\-added index
+.SH SYNOPSIS
+.PP
+\fB\fCreindexobjects [COMMON_OPTIONS] BUCKET [COUNT]\fR
+.SH DESCRIPTION
+.PP
+Reindexing is the process by which the internal representation of objects is
+updated to account for indexes that were added after the object was last
+written.  For example, if you add a new index to a bucket that already contains
+a million objects, it's necessary to examine the raw JSON value of each object,
+extract the value of the newly\-indexed field, and add that value to the index.
+Until this has been completed for all objects in the bucket, the index is
+incomplete, and it will not be used in queries with \fB\fCfindobjects\fR and related
+tools.  Because reindexing every object in the bucket can take quite a while,
+the server does not do it automatically when the index is created with
+\fB\fCputbucket(1)\fR\&.  Instead, users that add indexes must use the \fB\fCreindexobjects\fR
+command to reindex all the objects in a bucket.
+.PP
+\fB\fCreindexobjects\fR reindexes any objects in bucket \fB\fCBUCKET\fR that have not been
+reindexed since the last time an indexed field was added to the bucket (e.g.,
+using \fB\fCputbucket(1)\fR).  This operation performs as many queries as necessary,
+each reindexing up to \fB\fCCOUNT\fR objects (which defaults to 100).  The command
+stops either when all objects have been reindexed or when an error occurs.  This
+operation can take an arbitrarily long time on arbitrarily large buckets.
+.PP
+Reindexing is idempotent.  For each object, this operation updates all indexes
+that were created after the object was written.  If you add multiple indexed
+fields, even in multiple operations, you only need to reindex each object once.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Assuming that version 1 of a bucket has been created previously:
+.PP
+.RS
+.nf
+$ putbucket \-x 1 \-u loginName \-u uid:number accounts
+.fi
+.RE
+.PP
+and some records have been stored with other fields:
+.PP
+.RS
+.nf
+$ putobject \-d '{ "loginName": "lisa", "uid": "800", "country": "USA" }' \\
+    accounts lisa
+$ putobject \-d '{ "loginName": "hugh", "uid": "801", "country": "UK" }' \\
+    accounts hugh
+.fi
+.RE
+.PP
+and someone has added an index on the field "country" in the next version of
+the bucket:
+.PP
+.RS
+.nf
+$ putbucket \-x 2 \-u loginName \-u uid:number \-i country accounts
+.fi
+.RE
+.PP
+The bucket's contents can be reindexed with:
+.PP
+.RS
+.nf
+$ reindexobjects accounts
+bucket "accounts": 2 objects processed (continuing)
+bucket "accounts": all objects processed
+.fi
+.RE
+.PP
+See the example in \fB\fCmoray(1)\fR\&.
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR
diff --git a/man/man1/sql.1 b/man/man1/sql.1
new file mode 100644
index 0000000..2ef1dc3
--- /dev/null
+++ b/man/man1/sql.1
@@ -0,0 +1,46 @@
+.TH sql 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+sql \- check of a Moray server is functioning
+.SH SYNOPSIS
+.PP
+\fB\fCsql [COMMON_OPTIONS] SQL\fR
+.SH DESCRIPTION
+.PP
+Executes a raw SQL command \fB\fCSQL\fR against Moray's backing data store.  This is
+intended for experienced operators and developers to run ad hoc queries (usually
+read\-only).  A mistake in the \fB\fCSQL\fR string can cause all manner of bad behavior,
+including database deadlock, data corruption, and data loss.  This tool and
+Moray perform almost no validation on the input string.
+.PP
+This should not be used as part of normal operation.  Normal operations should
+be first\-classed as specific Moray requests with associated tools.
+.SH OPTIONS
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Run a simple SQL \fB\fCSELECT\fR query for the current time:
+.PP
+.RS
+.nf
+$ sql 'SELECT NOW()'
+{
+  "now": "2017\-01\-27T17:12:42.651Z"
+}
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR
+.SH BUGS
+.PP
+Moray removes newlines from all SQL commands that it executes, including those
+specified with this command.  The results can be surprising.  This most commonly
+affects SQL "\-\-" comments, which run to the end of the line.  Since newlines are
+stripped, everything after the first opening "\-\-" gets commented out.
diff --git a/man/man1/updatemany.1 b/man/man1/updatemany.1
new file mode 100644
index 0000000..f4f899f
--- /dev/null
+++ b/man/man1/updatemany.1
@@ -0,0 +1,51 @@
+.TH updatemany 1 "January 2017" Moray "Moray Client Tools"
+.SH NAME
+.PP
+updatemany \- update multiple objects using a filter
+.SH SYNOPSIS
+.PP
+\fB\fCupdatemany [COMMON_OPTIONS] [\-d DATA] [\-l LIMIT] BUCKET FILTER\fR
+.SH DESCRIPTION
+.PP
+Updates objects from bucket \fB\fCBUCKET\fR whose properties match the filter \fB\fCFILTER\fR\&.
+\fB\fCDATA\fR is a JSON object describing what to update.  Properties of \fB\fCDATA\fR must be
+indexed fields.  For each matching row, the fields specified in \fB\fCDATA\fR will be
+updated to their corresponding values in \fB\fCDATA\fR\&.  Other fields are unchanged.
+.PP
+Like \fB\fCfindobjects\fR, \fB\fCupdatemany\fR operations are always bounded in size.  See the
+\fB\fC\-l LIMIT\fR option.  You must use multiple invocations to update arbitrarily
+large lists of objects.
+.PP
+\fB\fCFILTER\fR is an LDAP\-like filter string described in \fB\fCfindobjects(1)\fR\&.  The
+caveats described there around the use of unindexed fields apply to filters used
+with \fB\fCupdatemany\fR as well.
+.SH OPTIONS
+.TP
+\fB\fC\-d DATA\fR
+Specifies the fields to update in each matching object.
+.TP
+\fB\fC\-l LIMIT\fR
+Remove at most \fB\fCLIMIT\fR objects.  This interacts badly with filters on
+unindexed fields, as described in \fB\fCfindobjects(1)\fR\&.  If this option is
+unspecified, a default limit is provided (which is currently 1000).
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCCOMMON_OPTIONS\fR, which control
+the log verbosity and how to locate the remote server.
+.SH ENVIRONMENT
+.PP
+See \fB\fCmoray(1)\fR for information about the \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and
+\fB\fCMORAY_URL\fR environment variables.
+.SH EXAMPLES
+.PP
+Update objects in bucket "accounts" having a value of "country" equal to "UK"
+so that the "country" is now "United Kingdom":
+.PP
+.RS
+.nf
+$ updatemany \-d '{ "country": "United Kingdom" }' accounts '(country=UK)'
+{ count: 1, etag: 'ue6d321d' }
+.fi
+.RE
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, \fB\fCputbucket(1)\fR, \fB\fCputobject(1)\fR, \fB\fCfindobjects(1)\fR
diff --git a/man/man3/moray.3 b/man/man3/moray.3
new file mode 100644
index 0000000..f32f7f7
--- /dev/null
+++ b/man/man3/moray.3
@@ -0,0 +1,292 @@
+.TH moray 3 "January 2017" Moray "Moray Client Library"
+.SH NAME
+.PP
+moray \- Node.js client library for Moray
+.SH DESCRIPTION
+.PP
+Moray is a JSON\-based key\-value store.  For an overview of Moray, see
+\fB\fCmoray(1)\fR\&.  This manual page assumes basic familiarity with the services Moray
+provides, how to use them from the command line, and how both SRV\-based service
+discovery and traditional service discovery work from the command line.
+.PP
+The \fB\fCmoray\fR npm package contains a Node.js client library that allows consumers
+to create, update, and delete both buckets and objects.  The package also
+contains a suite of command\-line tools for exercising these interfaces.  When in
+doubt, see the implementation of those tools for examples of using each RPC
+call.
+.SS Creating a client
+.PP
+To interact with Moray, users of the Node library instantiate a Moray client
+object, which requires a bunyan\-style logger.  The simplest invocation, which is
+suitable only for one\-off tools and test programs, would be to connect to Moray
+on localhost:
+.PP
+.RS
+.nf
+var mod_bunyan = require('bunyan');
+var mod_moray = require('moray');
+
+var log = mod_bunyan.createLogger({ name: 'my\-tool', level: 'INFO' });
+
+var client = mod_moray.createClient({
+    log: log,
+    host: '127.0.0.1',
+    port: 2020
+});
+
+client.on('connect', function () {
+    /* Start making RPC calls.  This example lists buckets. */
+    client.listBuckets(function (err, buckets) {
+        if (err) {
+            /* This should be handled more gracefully! */
+            throw (err);
+        }
+
+        console.log(JSON.stringify(buckets));
+
+        /* When finished, be sure to close the client. */
+        client.close();
+    });
+});
+.fi
+.RE
+.PP
+This works for a simple test program, but is not suitable for Triton and Manta
+servers or command\-line tools for a few reasons:
+.RS
+.IP \(bu 2
+This mode does not support SRV\-based service discovery, which is critical for
+increased scalability and improved fault tolerance.  SRV\-based discovery is
+configured by using the \fB\fCsrvDomain\fR property instead of \fB\fChost\fR or \fB\fCport.\fR
+.IP \(bu 2
+This mode does not enable the client to use bootstrap resolvers, which are
+critical for use in mixed DNS environments (e.g., where a combination of
+Triton, Manta, or external namservers may be in use).  Bootstrap resolvers are
+configured using the \fB\fCcueballOptions.resolvers\fR property.
+.IP \(bu 2
+Command\-line tools should generally specify additional parameters to ensure
+that they fail quickly when servers are down rather than retrying
+indefinitely until they are online.  This means specifying \fB\fCfailFast\fR\&.  It's
+also a good idea to specify \fB\fCmustCloseBeforeNormalProcessExit\fR to make sure
+that your tool shuts down cleanly.
+.RE
+.PP
+Here's a general pattern for \fIserver\fP components in Triton and Manta to
+configure the Moray client:
+.PP
+.RS
+.nf
+var mod_jsprim = require('jsprim');
+
+var client, config;
+
+/*
+ * Extract the Moray client configuration block from the server's
+ * configuration file.  Here, we assume that "serverConfig" came from
+ * parsing the server's configuration file.  We also assume that the
+ * Moray configuration property is just called "moray", but some components
+ * (notably Muskie) have multiple clients, and they would use different
+ * property names (e.g., "picker" or "marlin").
+ */
+config = jsprim.deepCopy(serverConfig.moray);
+config.log = log;
+client = mod_moray.createClient(config);
+client.on('connect', function onMorayConnect() {
+    /* start using the client */
+});
+.fi
+.RE
+.PP
+\fIClient\fP components would usually add an \fB\fCerror\fR listener, too:
+.PP
+.RS
+.nf
+/*
+ * Client tools add an error listener.  Servers generally should NOT do this
+ * because they configure the client to retry indefinitely.  Any errors
+ * emitted by the client would be programmer errors.
+ */
+client.on('error', function onError(err) {
+    console.error('moray client error: %s', err.message);
+    process.exit(1);
+});
+.fi
+.RE
+.PP
+In practice, \fB\fCserverConfig.moray\fR comes from a SAPI configuration template.  For
+\fBTriton services\fP, it will typically look like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "{{{MORAY_SERVICE}}}"
+    "cueballOptions": {
+        "resolvers": [ "{{{BINDER_SERVICE}}}" ]
+    }
+}
+.fi
+.RE
+.PP
+That will expand to something like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "moray.mydatacenter.joyent.us",
+    "cueballOptions": {
+        "resolvers": [ "binder.mydatacenter.joyent.us" ]
+    }
+}
+.fi
+.RE
+.PP
+For \fBManta services\fP, the template file will typically include a block that
+looks like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "{{MARLIN_MORAY_SHARD}}",
+    "cueballOptions": {
+        "resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
+    }
+}
+.fi
+.RE
+.PP
+That will expand to something like this:
+.PP
+.RS
+.nf
+{
+    "srvDomain": "1.moray.myregion.joyent.us",
+    "cueballOptions": {
+        "resolvers": [ "nameservice.myregion.joyent.us" ]
+    }
+}
+.fi
+.RE
+.PP
+This approach (using a block from the configuration file) allows operators to
+reconfigure a service to point at a specific instance by replacing the
+\fB\fCsrvDomain\fR property with \fB\fChost\fR and \fB\fCport\fR properties.
+.PP
+Command\-line tools that use Moray should typically define their own options for
+specifying \fB\fCsrvDomain\fR, \fB\fChost\fR, and \fB\fCport\fR properties.  See \fB\fCmoray(1)\fR for the
+command\-line options and fallback environment variables used by the built\-in
+Moray tools.
+.PP
+Command\-line tools should generally also specify \fB\fCfailFast\fR and
+\fB\fCmustCloseBeforeNormalProcessExit\fR\&.
+.SS Making RPC calls
+.PP
+Callers make RPC calls by invoking RPC methods on the client.  The specific
+methods are documented in the Moray server \[la]https://github.com/joyent/moray\[ra]
+reference documentation.
+.PP
+All RPC methods are asynchronous, and they all follow one of two styles
+described in the "Node.js Error Handling" documentat.  The style used depends on
+the kind of data returned by the RPC.
+.RS
+.IP \(bu 2
+RPC calls that return a fixed number of results (usually just one object or a
+small chunk of metadata) are callback\-based: the last argument to the RPC
+method is a callback.  The first argument to the callback is an optional
+error, and subsequent arguments are RPC\-specific.
+.IP \(bu 2
+RPC calls that return a large or variable number of results (like
+\fB\fCfindObjects\fR) are event\-emitter\-based: they return an event emitter that
+emits \fB\fCerror\fR on failure, \fB\fCend\fR on completion, and other events depending on
+the RPC call.
+.RE
+.PP
+All of the RPC methods take an optional \fB\fCoptions\fR argument that is always the
+last non\-callback argument.  (For callback\-based RPCs, it's the second\-to\-last
+argument.  For event\-emitter\-based RPCs, it's the last argument.)  You can use
+this to pass in a \fB\fCreq_id\fR for correlating log entries from one service with
+the Moray client log entries.  Some APIs (namely put/get/del object) have
+additional options to allow cache bypassing, for example.
+.SH OPTIONS
+.PP
+The client constructor uses named arguments on a single \fB\fCargs\fR object.
+.PP
+All constructor invocations must provide:
+.TP
+\fB\fClog\fR (object)
+a bunyan\-style logger
+.PP
+All constructor invocations must also provide one of the following:
+.TP
+\fB\fCsrvDomain\fR (string)
+DNS domain name for SRV\-based service discovery
+.TP
+\fB\fCurl\fR (string)
+Describes the hostname or IP address and TCP port to specify a specific
+Moray server to connect to (instead of using SRV\-based service discovery).
+This is deprecated for servers, and should only be used for tools, for
+testing, and for unusual, temporary operational changes.  The format for
+this option is the same as for the \fB\fCMORAY_URL\fR environment variable
+described in \fB\fCmoray(1)\fR\&.
+.TP
+\fB\fChost\fR (string) and \fB\fCport\fR (integer or string)
+Like \fB\fCURL\fR, but specified using different properties.
+.PP
+Callers may also provide:
+.TP
+\fB\fCcueballOptions\fR (object)
+Overrides cueball\-related options, including various timeouts and delays.
+For specific options that can be overridden here, see the source.  \fBNOTE:
+it's not expected that most consumers would need to specify any of these.
+Default values ought to work for the port, DNS service, and all the various
+timeouts, delays, and retry limits.\fP
+.TP
+\fB\fCfailFast\fR (boolean)
+If true, this sets a more aggressive retry policy, and the client emits
+"error" when the underlying Cueball set reaches state "failed".  This is
+intended for use by command\-line tools to abort when it looks like dependent
+servers are down.  Servers should generally not specify this option because
+they should wait indefinitely for dependent services to come up.
+.TP
+\fB\fCunwrapErrors\fR (boolean)
+If false (the default), Errors emitted by this client and RPC requests will
+contain a cause chain that explains precisely what happened.  For example,
+if an RPC fails with SomeError, you'll get back a FastRequestError
+(indicating a request failure) caused by a FastServerError (indicating that
+the failure was on the remote server, as opposed to a local or
+transport\-level failure) caused by a SomeError.  In this mode, you should
+use VError.findCauseByName(err, 'SomeError') to determine whether the root
+cause was a SomeError.
+If the "unwrapErrors" option is true, then Fast\-level errors are unwrapped
+and the first non\-Fast error in the cause chain is returned.  This is
+provided primarily for compatibility with legacy code that uses err.name to
+determine what kind of Error was returned.  New code should prefer
+VError.findCauseByName() instead.
+.TP
+\fB\fCmustCloseBeforeNormalProcessExit\fR (boolean)
+If true, then cause the program to crash if it would otherwise exit 0 and
+this client has not been closed.  This is useful for making sure that client
+consumers clean up after themselves.
+.PP
+Some legacy options are accepted as documented in the source.
+.SH ENVIRONMENT
+.PP
+The \fB\fCLOG_LEVEL\fR, \fB\fCMORAY_SERVICE\fR, and \fB\fCMORAY_URL\fR environment variables are
+interpreted by each command\-line tool, not the client library itself.
+.SH SEE ALSO
+.PP
+\fB\fCmoray(1)\fR, Moray server reference
+documentation \[la]https://github.com/joyent/moray/blob/master/docs/index.md\[ra],
+Node.js Error
+Handling \[la]https://www.joyent.com/node-js/production/design/errors\[ra]\&.
+.SH DIAGNOSTICS
+.PP
+The client library logs messages using the bunyan logger.  Increase the log
+level for more verbose output.
+.PP
+The underlying node\-fast \[la]https://github.com/joyent/node-fast\[ra] RPC library
+provides DTrace probes on supported systems for inspecting low\-level RPC events.
+.PP
+Use Node's \fB\fC\-\-abort\-on\-uncaught\-exception\fR command\-line argument to enable core
+file generation upon fatal program failure.  These core files can be used with
+mdb_v8 \[la]https://github.com/joyent/mdb_v8\[ra] to inspect the program's state at the
+time of the crash.
diff --git a/package.json b/package.json
index 63a9530..615e0a6 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray",
     "description": "Moray client library",
-    "version": "3.0.0",
+    "version": "3.1.0",
     "author": "Joyent (joyent.com)",
     "keywords": [ "moray" ],
     "main": "./lib/index.js",
@@ -26,7 +26,8 @@
     },
     "directories": {
         "bin": "./bin",
-        "lib": "./lib"
+        "lib": "./lib",
+        "man": "./man"
     },
     "license": "MPL-2.0"
 }
diff --git a/tools/mk/Makefile.manpages.defs b/tools/mk/Makefile.manpages.defs
new file mode 100644
index 0000000..6da7876
--- /dev/null
+++ b/tools/mk/Makefile.manpages.defs
@@ -0,0 +1,128 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.defs: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile is used along with Makefile.manpages.targ to build section
+# manpages for the current repository from Markdown sources using the md2man
+# tool.  You can build several different sections of manpages with this
+# Makefile, but you'll need to include the Makefile once for each section with a
+# different value of MAN_SECTION.  Required input variables include:
+#
+#     MAN_SECTION	defines which section's manpages will be built
+#     			(e.g., "1")
+#
+#     MAN_INROOT	defines the root of a directory tree containing man
+#     			pages source files in Markdown format.  The directory
+#     			tree should be organized as:
+#
+#     			    $(MAN_INROOT)/man$(MAN_SECTION)/*.md
+#
+#     MAN_OUTROOT	defines the root of a directory tree that will contain
+#     			the generated man pages.  The directory tree will be
+#     			organized as:
+#
+#     			    $(MAN_OUTROOT)/man$(MAN_SECTION)/*.$(MAN_SECTION)
+#
+#			This should mirror the typical man page directory
+#			structure, and should probably be alongside a
+#			corresponding "bin" directory to leverage the way
+#			man(1)'s looks up man pages for binaries.
+#
+# A common configuration would be to set MAN_INROOT = "docs/man" and
+# MAN_OUTROOT = "man".  In that case, you might have source files:
+#
+#     ./bin/mytool
+#     ./bin/my-other-tool
+#     ./docs/man/man1/mytool.md
+#     ./docs/man/man1/my-other-tool.md
+#
+# and that will generate files:
+#
+#     ./man/man1/mytool.1
+#     ./man/man1/my-other-tool.1
+#
+# Optional input variables include:
+#
+#     MD2MAN		tool to generate man pages from Markdown sources
+#     			The recommended tool is md2man-roff, available at
+#     			https://github.com/sunaku/md2man.
+#
+#     MKDIRP		should generally be "mkdir -p"
+#
+# This Makefile produces Make variables:
+#
+#     MAN_$(MAN_SECTION)_OUTPUTS	generated manual pages.  You can depend
+#     					on these in order to build them in
+#     					whatever top-level targets you want.
+#
+#     MAN_OUTPUTS			will be extended to include
+#     					MAN_$(MAN_SECTION)_OUTPUTS.
+#
+# There are two basic ways this tends to be used:
+#
+#     (1) Building manpages is part of the normal build.  Have the default
+#         target (usually "all") depends on either "manpages" or the built man
+#         pages directly (via MAN_OUTPAGES).  In this case, only the man pages
+#         _sources_ would be checked into source control.
+#
+#     (2) Building manpages is an ad-hoc operation outside the normal build
+#         process.  Developers that change the man page sources are expected to
+#         build the man pages and commit the generated pages into source
+#         control.
+#
+# Option (1) is preferred, since option (2) violates the basic tenets of
+# software engineering that processes should generally be automated and that
+# generated files should not be checked into source control.  The problem is
+# that in practice, the tools that we use to generate man pages are not widely
+# installed on most users' systems, even developers' systems, so it's less than
+# ideal to require them for the main build.  This is especially true for many of
+# our Node modules, where there's traditionally no difference between the
+# published npm package and the repository source itself.  As a result, we use
+# option (2) in most places.  However, this Makefile supports both modes.
+#
+
+MAN_SECTION			?= $(error MAN_SECTION is not defined)
+MAN_INROOT			?= $(error MAN_INROOT is not defined)
+MAN_OUTROOT			?= $(error MAN_OUTROOT is not defined)
+MD2MAN				?= md2man-roff
+MKDIRP				?= mkdir -p
+
+#
+# Define some convenience variables for referring to the input and output
+# directories for this section's man pages.  These variables must have
+# MAN_SECTION in the name, and must use eager binding (":="), since MAN_SECTION
+# may change after this file is included.
+#
+MAN_INDIR_$(MAN_SECTION)	:= $(MAN_INROOT)/man$(MAN_SECTION)
+MAN_OUTDIR_$(MAN_SECTION)	:= $(MAN_OUTROOT)/man$(MAN_SECTION)
+
+#
+# Define the lists of input and output files for this section's man pages.  The
+# list of inputs is just the list of Markdown files in the input directory.  We
+# construct the list of outputs by taking that same list and replacing the
+# section-specific input directory with the section-specific output directory
+# and changing the file extension.
+#
+MAN_$(MAN_SECTION)_INPUTS	:= $(wildcard $(MAN_INDIR_$(MAN_SECTION))/*.md)
+MAN_$(MAN_SECTION)_OUTPUTS_TMP  := \
+    $(MAN_$(MAN_SECTION)_INPUTS:$(MAN_INDIR_$(MAN_SECTION))/%=$(MAN_OUTDIR_$(MAN_SECTION))/%)
+MAN_$(MAN_SECTION)_OUTPUTS	:= \
+    $(MAN_$(MAN_SECTION)_OUTPUTS_TMP:%.md=%.$(MAN_SECTION))
+
+MAN_OUTPUTS			:= $(MAN_OUTPUTS) $(MAN_$(MAN_SECTION)_OUTPUTS)
diff --git a/tools/mk/Makefile.manpages.targ b/tools/mk/Makefile.manpages.targ
new file mode 100644
index 0000000..11f242b
--- /dev/null
+++ b/tools/mk/Makefile.manpages.targ
@@ -0,0 +1,28 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.targ: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# See Makefile.manpages.defs.
+#
+
+$(MAN_$(MAN_SECTION)_OUTPUTS): $(MAN_OUTDIR_$(MAN_SECTION))/%.$(MAN_SECTION): $(MAN_INDIR_$(MAN_SECTION))/%.md | $(MAN_OUTDIR_$(MAN_SECTION))
+	$(MD2MAN) $^ > $@
+
+$(MAN_OUTDIR_$(MAN_SECTION)):
+	$(MKDIRP) $@
-- 
2.21.0

