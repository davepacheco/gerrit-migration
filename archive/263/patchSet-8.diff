From 25589a1fd6d5d9855da1e39b0c3fd678f056871f Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 22 Aug 2016 16:08:02 -0700
Subject: [PATCH] CNAPI-663 add support for paging to server ticket list

---
 Makefile                       |   5 +-
 docs/index.md                  |   5 +
 docs/static.md                 |   6 +
 lib/endpoints/waitlist.js      |  68 ++++++---
 lib/models/waitlist.js         | 191 ++++++++++++++++++++-----
 package.json                   |  11 +-
 test/waitlist/test-waitlist.js | 253 +++++++++++++++++++++++++++++++--
 7 files changed, 470 insertions(+), 69 deletions(-)

diff --git a/Makefile b/Makefile
index 0781f0b..d0955e0 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2016, Joyent, Inc.
 #
 
 #
@@ -82,8 +82,7 @@ test: $(NODEUNIT)
 
 .PHONY: test-coal
 test-coal:
-	#ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && /opt/smartdc/cnapi/build/node/bin/node /opt/smartdc/cnapi/node_modules/.bin/nodeunit --reporter default test"'
-	ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && ./test/runtests -r verbose"'
+	ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && ./test/runtests -r verbose $(TEST_ARGS)"'
 
 .PHONY: test-coal-quick
 test-coal-quick:
diff --git a/docs/index.md b/docs/index.md
index 5df334f..d08a512 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -598,6 +598,11 @@ must also be specified. Endpoint returns a ticket uuid.
       }
     ]
 
+By default this endpoint will return 1000 tickets, sorted by creation time.
+This endpoint supports the use of `limit` and `offset` parameters to allow one
+to page through the results, with the caveat that the use of paging via `limit`
+and `offset` does not guarantee that duplicates will not be seen.
+
 ### Wait on a ticket
 
     -bash-4.1# sdc-cnapi /tickets/bb5038c2-7498-4e07-b919-df072c76d2dc/wait
diff --git a/docs/static.md b/docs/static.md
index 8cb05fc..cf54405 100644
--- a/docs/static.md
+++ b/docs/static.md
@@ -600,6 +600,12 @@ must also be specified. Endpoint returns a ticket uuid.
       }
     ]
 
+By default this endpoint will return 1000 tickets, sorted by creation time.
+This endpoint supports the use of `limit` and `offset` parameters to allow one
+to page through the results, with the caveat that the use of paging via `limit`
+and `offset` does not guarantee that duplicates will not be seen.
+
+
 ### Wait on a ticket
 
     -bash-4.1# sdc-cnapi /tickets/bb5038c2-7498-4e07-b919-df072c76d2dc/wait
diff --git a/lib/endpoints/waitlist.js b/lib/endpoints/waitlist.js
index fe79a2a..8ac85c9 100644
--- a/lib/endpoints/waitlist.js
+++ b/lib/endpoints/waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -33,29 +33,65 @@ ControllerWaitlist.init = function () {
 
 
 /* BEGIN JSSTYLED */
-/*
+/**
+ *
+ * Returns all waitlist tickets currently active on a server. Returns the uuid of
+ * the newly created ticket as well as an array of all the tickets in the ticket's
+ * scope queue. By default servers are returned in the chronological order of their
+ * creation (`created_at` timestamp). By default the responses are limited to 1000
+ * results. Use the `limit` and `offset` to page through results.
+ *
+ * @name ServerWaitlistList
+ * @endpoint GET /servers/:server_uuid/tickets
+ * @section Waitlist API
+ *
+ * @param {Number} limit Return at most this many results
+ * @param {Number} offset Return results starting at this position
+ * @param {String} attribhute Attribute to sort on
+ * @param {String} order Sort in 'DESC' or 'ASC' order
+ *
+ * @response 200 Array Waitlist returned successfully
+ * @response 500 Error Could not process request
+ *
+ */
+/* END JSSTYLED */
 
-Returns all waitlist tickets currently active on a server. Returns the uuid of
-the newly created ticket as well as an array of all the tickets in the ticket's
-scope queue.
+ControllerWaitlist.list = function (req, res, next) {
+    var rules = {
+        'limit': ['optional', 'isNumberType'],
+        'offset': ['optional', 'isNumberType'],
+        'attribute': ['optional', 'isStringType', 'isTrim'],
+        'server_uuid': ['isStringType', 'isTrim'],
+        'order': ['optional', 'isStringType', 'isTrim']
+    };
+
+    if (validation.ensureParamsValid(req, res, rules, { strict: true })) {
+        next();
+        return;
+    }
 
-@name ServerWaitlistList
-@endpoint GET /servers/:server_uuid/tickets
-@section Waitlist API
+    var listOpts = {
+        server_uuid: req.params.server_uuid
+    };
 
-@response 200 Array Waitlist returned successfully
-@response 500 Error Could not process request
+    if (req.params.limit) {
+        listOpts.limit = parseInt(req.params.limit, 10);
+    }
 
-*/
-/* END JSSTYLED */
+    if (req.params.offset) {
+        listOpts.offset = parseInt(req.params.offset, 10);
+    }
 
-ControllerWaitlist.list = function (req, res, next) {
-    var params = {};
+    if (req.params.order) {
+        listOpts.order = req.params.order;
+    }
 
-    params.server_uuid = req.params.server_uuid;
+    if (req.params.attribute) {
+        listOpts.attribute = req.params.attribute;
+    }
 
     ModelWaitlist.list(
-        params,
+        listOpts,
         function (error, tickets) {
             if (error) {
                 next(new restify.InternalError(error.message));
diff --git a/lib/models/waitlist.js b/lib/models/waitlist.js
index 6a904e1..01e5e58 100644
--- a/lib/models/waitlist.js
+++ b/lib/models/waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -13,16 +13,18 @@
  * See docs/waitlist.md for more details.
  */
 
-var ModelBase = require('./base');
-var buckets = require('../apis/moray').BUCKETS;
 var assert = require('assert-plus');
+var async = require('async');
 var libuuid = require('node-uuid');
-var common = require('../common');
-var verror = require('verror');
+var once = require('once');
 var sprintf = require('sprintf').sprintf;
-var async = require('async');
 var vasync = require('vasync');
-var once = require('once');
+var verror = require('verror');
+var jsprim = require('jsprim');
+
+var ModelBase = require('./base');
+var buckets = require('../apis/moray').BUCKETS;
+var common = require('../common');
 var orderedKVString = require('../common').orderedKVString;
 
 
@@ -350,14 +352,17 @@ WaitlistDirector.cleanupOldTickets = function (callback) {
 
     var moray = ModelWaitlist.getMoray();
 
-    moray.deleteMany(buckets.waitlist_tickets.name, filter, function (error) {
-        if (error) {
-            callback(error);
-            return;
-        }
+    moray.deleteMany(
+        buckets.waitlist_tickets.name,
+        filter,
+        function (error) {
+            if (error) {
+                callback(error);
+                return;
+            }
 
-        callback();
-    });
+            callback();
+        });
 };
 
 
@@ -429,35 +434,81 @@ ModelWaitlist.ticketRelease = function (ticket_uuid, callback) {
 
 
 ModelWaitlist.list = function (params, callback) {
+    assert.optionalString(params.server_uuid, 'params.server_uuid');
+    assert.optionalNumber(params.limit, 'params.limit');
+    assert.optionalNumber(params.offset, 'params.offset');
+    assert.optionalString(params.order, 'params.order');
+    assert.optionalString(params.attribute, 'params.attribute');
+
     var uuid = params.server_uuid || '*';
-    ModelWaitlist.query('(server_uuid=' + uuid + ')', null, callback);
+    var queryOpts = {};
+
+    if (params.limit) {
+        queryOpts.limit = params.limit;
+    }
+    if (params.offset) {
+        queryOpts.offset = params.offset;
+    }
+    if (params.order) {
+        queryOpts.order = params.order;
+    }
+    if (params.attribute) {
+        queryOpts.attribute = params.attribute;
+    }
+
+    ModelWaitlist.query('(server_uuid=' + uuid + ')', queryOpts, callback);
 };
 
 
 
 ModelWaitlist.query = function (filter, findOpts, callback) {
+    assert.optionalObject(findOpts, 'findOpts');
+
     var self    = ModelWaitlist;
     var moray   = ModelWaitlist.getMoray();
     var bucket  = buckets.waitlist_tickets.name;
     var tickets = [];
 
-    if (findOpts === null) {
-        findOpts = {
-            sort: {
-                attribute: 'created_at',
-                order: 'ASC'
-            }
-        };
+    // Default sort parameters
+    var defaultSort = {
+        attribute: 'created_at',
+        order: 'ASC',
+        limit: 1000,
+        offset: 0
+    };
+
+    if (!callback) {
+        callback = findOpts;
+        findOpts = {};
+    }
+
+    var findParams = jsprim.deepCopy(findOpts);
+    var sort = findParams.sort || defaultSort;
+    findParams.sort = defaultSort;
+
+    if (sort.limit) {
+          findParams.sort.limit = sort.limit;
+    }
+    if (sort.offset) {
+          findParams.sort.offset = sort.offset;
+    }
+    if (sort.order) {
+          findParams.sort.order = sort.order;
+    }
+    if (sort.attribute) {
+          findParams.sort.attribute = sort.attribute;
     }
 
     try {
-        var req = moray.findObjects(bucket, filter, findOpts);
+        var req = moray.findObjects(bucket, filter, findParams);
     } catch (e) {
         self.log.warn({ err: e.message }, 'Received an exception from moray');
         callback(null, tickets);
         return;
     }
 
+    var oncecb = once(callback);
+
     if (!req) {
         self.log.warn('Received a null req object from moray');
         callback(null, tickets);
@@ -466,7 +517,7 @@ ModelWaitlist.query = function (filter, findOpts, callback) {
 
     function onError(err) {
         self.log.error(err, 'Error retrieving results from moray');
-        callback(err, tickets);
+        oncecb(err, tickets);
     }
 
     function onRecord(ticket) {
@@ -474,7 +525,7 @@ ModelWaitlist.query = function (filter, findOpts, callback) {
     }
 
     function processResults() {
-        callback(null, tickets);
+        oncecb(null, tickets);
     }
 
     req.on('error', onError);
@@ -1240,32 +1291,98 @@ function (ticket_uuid, callback) {
 };
 
 
+/**
+ * Only clears the queue on a `cnapi_waitlist_queues` bucket item.
+ */
 
-ModelWaitlist.prototype.deleteAllTickets = function (callback) {
+ModelWaitlist.prototype.emptyServerQueue = function (callback) {
     var self = this;
+    var serverqueue = null;
+    var moray = ModelWaitlist.getMoray();
 
     vasync.waterfall([
         function (wfcb) {
-            ModelWaitlist.getMoray().deleteMany(
-                buckets.waitlist_tickets.name,
-                '(server_uuid=' + self.uuid + ')',
-                function (delError) {
-                    wfcb(delError);
+            self.getServerQueue(function (err, s, res) {
+                if (err) {
+                    wfcb(err);
                     return;
-                });
+                }
+
+                serverqueue = s;
+                wfcb();
+            });
+
         },
         function (wfcb) {
-            ModelWaitlist.getMoray().deleteMany(
+            serverqueue = {
+                server_uuid: self.uuid,
+                updated_at: (new Date()).toISOString(),
+                tickets: {}
+            };
+
+            moray.putObject(
                 buckets.waitlist_queues.name,
-                '(server_uuid=' + self.uuid + ')',
-                function (delError) {
-                    wfcb(delError);
+                self.uuid,
+                serverqueue,
+                {},
+                function (err, response) {
+                    if (err) {
+                        wfcb(err);
+                        return;
+                    }
+
+                    wfcb();
                     return;
                 });
         }
     ],
     function (err) {
-        callback(err);
+        callback(err, { serverqueue: serverqueue });
+    });
+};
+
+
+ModelWaitlist.prototype.deleteAllTickets = function (callback) {
+    var self = this;
+
+    self.emptyServerQueue(function (err) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        ModelWaitlist.getMoray().deleteMany(
+            buckets.waitlist_tickets.name,
+            '(server_uuid=' + self.uuid + ')',
+            { noLimit: true },
+            function (delError) {
+                callback(delError);
+                return;
+            });
+    });
+};
+
+
+ModelWaitlist.prototype.countTickets = function (callback) {
+    var self = this;
+
+    var sql = 'SELECT count(1)' +
+              'FROM cnapi_waitlist_tickets ' +
+              'WHERE server_uuid=$1';
+    var count;
+
+    var oncecb = once(callback);
+
+    var req = ModelWaitlist.getMoray().sql(sql, [self.uuid], {});
+    req.once('record', function (r) {
+        count = parseInt(r.count, 10);
+    });
+    req.once('error', function (err) {
+        oncecb(err);
+    });
+
+    req.once('end', function () {
+        oncecb(null, count);
     });
 };
 
diff --git a/package.json b/package.json
index 4b2665d..09454c8 100644
--- a/package.json
+++ b/package.json
@@ -7,25 +7,26 @@
   "dependencies": {
     "amqp": "git://github.com/postwait/node-amqp.git#7a421793796bf66f5741282624c3db3ae266b3b5",
     "assert-plus": "0.1.5",
-    "async": "0.1.18",
+    "async": "1.5.2",
     "bunyan": "1.3.4",
     "dapi": "git+ssh://git@github.com:joyent/sdc-designation.git#db24809071ed2c2e5fe26fbd0b8d27d4b0f01d0a",
     "deep-equal": "git://github.com/substack/node-deep-equal.git#b2cfeb95da6982f8bc2e676231820a3a47385db3",
     "dox": "0.4.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "filed": "0.0.5",
+    "jsprim": "1.3.0",
     "memwatch": "git://github.com/lloyd/node-memwatch.git#475ce024a53c74ad5baff27003b81499896e81a5",
-    "moray": "git+ssh://git@github.com:joyent/node-moray.git#b84ef0e",
+    "moray": "git+ssh://git@github.com:joyent/node-moray.git#fd5781bc",
     "node-uuid": "1.2.0",
-    "nodeunit": "0.7.4",
+    "nodeunit": "0.9.1",
     "once": "1.3.0",
-    "restify-validator": "0.3.0",
     "restify": "^3.0.1",
+    "restify-validator": "0.3.0",
     "sdc-clients": "git+ssh://git@github.com:joyent/node-sdc-clients.git#121bd661b8301a040677f65a289d59043171ce01",
     "sprintf": "0.1.1",
     "trace-event": "1.3.0",
-    "verror": "1.3.4",
     "vasync": "git://github.com/davepacheco/node-vasync.git#e8743bb07a09dd83ea2df7e6d241c8a78b67aec6",
+    "verror": "1.3.4",
     "watershed": "0.3.0",
     "wf-client": "git+ssh://git@github.com:joyent/sdc-wf-client.git#a8590b497e40aea87610fa1c370fcbed64f43367",
     "wf-shared": "git+ssh://git@github.com:joyent/sdc-wf-shared.git#9aed2e8"
diff --git a/test/waitlist/test-waitlist.js b/test/waitlist/test-waitlist.js
index 5b974cd..c0f32ef 100644
--- a/test/waitlist/test-waitlist.js
+++ b/test/waitlist/test-waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var Logger = require('bunyan');
@@ -20,14 +20,14 @@ var path = require('path');
 var uuid = require('node-uuid');
 var sprintf = require('sprintf').sprintf;
 
+
 var CNAPI_URL = 'http://' + (process.env.CNAPI_IP || '10.99.99.22');
 var client;
-
 var wlurl;
 var serveruuid;
-
 var ticketuuid;
 
+
 function setup(callback) {
     client = restify.createJsonClient({
         agent: false,
@@ -140,8 +140,6 @@ function testCreateTicket(test) {
                 test.equal(queues[1][0].action, 'action0');
                 test.equal(queues[1][1].action, 'action0');
                 test.equal(queues[2][0].action, 'action1');
-
-                console.error(util.inspect(queues));
                 wfcb();
             }
         },
@@ -355,12 +353,251 @@ function testUpdateTicket(test) {
 }
 
 
+/**
+ * Confirm we can page through the waitlist tickets for a compute node when
+ * there are greater than 1000 tickets (the default moray limit). Exercises
+ * `limit` and `offset` parameters.
+ */
+
+function testFetchTicketsWithPaging(test) {
+    test.expect(6652);
+
+    var count = 1100;
+    var limit = 100;
+    var offset = 0;
+
+    var ticketUuids;
+
+    async.waterfall([
+        // Create number of tickets given by `count`
+        function (wfcb) {
+            createTickets({
+                test: test,
+                count: count
+            }, function (err, tickets) {
+                if (err) {
+                    wfcb(err);
+                    return;
+                }
+                ticketUuids = tickets;
+                wfcb();
+            });
+        },
+
+        // Page through in amounts given by `limit`, tally them and check that
+        // the UUIDs are the ones we created.
+        function (wfcb) {
+            var fetchMore = true;
+
+            var listOfResults = [];
+            var tickets = [];
+
+            async.whilst(
+                function () {
+                    return fetchMore;
+                },
+                doFetch,
+                function (err) {
+                    test.ok(listOfResults.length,
+                            'should be multiple pages of results (there were '
+                            + listOfResults.length + ')');
+
+                    for (var ri in listOfResults) {
+                        var result = listOfResults[ri];
+                        if (ri < listOfResults.length-1) {
+                            test.equal(listOfResults[ri].length, limit,
+                                'each page has right number of results');
+                        } else {
+                            test.equal(
+                               listOfResults[ri].length,
+                               count % limit,
+                               'last page should have `count % limit`' +
+                               ' number of results');
+                        }
+
+                        // Ensure ticket is one of the ones we created
+                        for (var r in result) {
+                            var ticket = result[r];
+                            test.ok(ticketUuids[ticket.uuid],
+                                    'found ticket we created');
+                        }
+                        test.ok(Object.keys(ticketUuids).length >= count,
+                            'server at least has many tickets as were added');
+                    }
+
+                    test.equal(listOfResults.length, 1+count/limit,
+                               'right number of pages');
+                    wfcb(err);
+                });
+
+            // Fetch all the created tickets
+            function doFetch(wlcb) {
+                var geturl = sprintf(
+                    '/servers/%s/tickets?limit=%d&offset=%d',
+                    serveruuid, limit, offset);
+                client.get(geturl, getcb);
+                function getcb(err, req, res, results) {
+                    test.ok(Array.isArray(results), 'result is an array');
+                    test.ok(results.length <= limit,
+                            'result length <= `limit`');
+
+                    listOfResults.push(results);
+                    Array.prototype.push.apply(tickets, results);
+
+
+                    // Check if we have reached the end of the results
+                    if (results.length < limit) {
+                        fetchMore = false;
+                    }
+                    offset += limit;
+                    wlcb();
+                }
+            }
+        }
+    ],
+    function (error) {
+        test.ok(!error, 'no errors returned');
+        test.done();
+    });
+}
+
+
+/**
+ *
+ * Create over 1000 tickets (the default moray limit) and make sure we
+ * can hit the delete ticket endpoint and all tickets are removed.
+ *
+ */
+
+function testDeleteOver1000Tickets(test) {
+    test.expect(5506);
+    var count = 1100;
+
+    async.waterfall([
+        function (wfcb) {
+            createTickets({
+                test: test,
+                count: count
+            }, function (err, tickets) {
+                if (err) {
+                    wfcb(err);
+                    return;
+                }
+                wfcb();
+            });
+        },
+        function (wfcb) {
+            // Fetch all the created tickets back
+            var geturl = sprintf(
+                '/servers/%s/tickets', serveruuid);
+            client.get(geturl, getcb);
+            function getcb(err, req, res, results) {
+                test.ok(Array.isArray(results), 'result is an array');
+                test.notEqual(results.length, 0,
+                              'result array not empty');
+                wfcb();
+            }
+
+        },
+        function (wfcb) {
+            var delurl = sprintf(
+                '/servers/%s/tickets?force=true',
+                serveruuid);
+            client.del(delurl, delcb);
+            function delcb(err, req, res, results) {
+                test.equal(err, null, 'no error returned');
+                wfcb();
+            }
+        },
+        function (wfcb) {
+            // Fetch all the created tickets back
+            var geturl = sprintf(
+                '/servers/%s/tickets',
+                serveruuid);
+            client.get(geturl, getcb);
+            function getcb(err, req, res, results) {
+                test.ok(Array.isArray(results), 'result is an array');
+                test.equal(results.length, 0,
+                           'result length is 0 (was ' +
+                               results.length + ')');
+                wfcb();
+            }
+
+        }
+    ], function (err) {
+        test.done();
+    });
+}
+
+
+/**
+ *
+ * Support functions
+ *
+ */
+
+function createTickets(opts, callback) {
+    var ticketUuids = {};
+
+    var count = opts.count;
+    var test = opts.test;
+
+    async.waterfall([
+        // Create N tickets
+        function (wfcb) {
+            var num = 0;
+            var i;
+
+            // Set up payloads
+            var payloads = [];
+            for (i = 0; i < count; i++) {
+                payloads.push({
+                    scope: 'test1',
+                    id: '111',
+                    expires_at:
+                        (new Date((new Date().valueOf()) +
+                         i*1000 + 600*1000)).toISOString()
+                });
+            }
+
+            // Fire off create requests
+            async.forEachSeries(payloads, onPayload, onFinish);
+            function onPayload(t, fecb) {
+                client.post(wlurl, t, function (err, req, res, ticket) {
+                    test.deepEqual(err, null, 'no error returned');
+                    test.equal(res.statusCode, 202,
+                               'POST waitlist ticket returned 202');
+                    test.ok(res, 'http response');
+                    test.ok(ticket, 'ticket created');
+                    test.ok(ticket.uuid, 'ticket had a UUID');
+
+                    ticketuuid = ticket.uuid;
+                    ticketUuids[ticket.uuid] = true;
+
+                    console.log('created %s (#%d)', ticketuuid, num++);
+                    fecb();
+                });
+            }
+
+            function onFinish(err) {
+                wfcb(err);
+            }
+        }
+    ], function (err) {
+        test.equal(err, null, 'no error returned');
+        callback(err, ticketUuids);
+    });
+}
+
+
+
 
 module.exports = {
     setUp: setup,
     tearDown: teardown,
     'delete all tickets': testDeleteAllWaitlistTickets,
-    'create tickets then get one or many': testCreateTicket
-//     'waiting on a ticket': testWaitOnTicket
-//    'create ticket and update status': testUpdateTicket
+    'create tickets then get one or many': testCreateTicket,
+    'list from server with paging': testFetchTicketsWithPaging,
+    'delete from server with over 1000 results':
+        testDeleteOver1000Tickets
 };
-- 
2.21.0

