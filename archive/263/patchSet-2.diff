commit cf3378c2718c875736d64621c878f19b1d2640e9 (refs/changes/63/263/2)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2016-08-10T09:32:02-07:00 (3 years, 2 months ago)
    
    CNAPI-663 add support for paging to server ticket list

diff --git a/Makefile b/Makefile
index 0781f0b..2e2187b 100644
--- a/Makefile
+++ b/Makefile
@@ -83,7 +83,7 @@ test: $(NODEUNIT)
 .PHONY: test-coal
 test-coal:
 	#ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && /opt/smartdc/cnapi/build/node/bin/node /opt/smartdc/cnapi/node_modules/.bin/nodeunit --reporter default test"'
-	ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && ./test/runtests -r verbose"'
+	ssh $(COAL) 'zlogin $$(/opt/smartdc/bin/sdc-vmname cnapi) "cd /opt/smartdc/cnapi && ./test/runtests -r verbose $(TEST_ARGS)"'
 
 .PHONY: test-coal-quick
 test-coal-quick:
diff --git a/lib/endpoints/waitlist.js b/lib/endpoints/waitlist.js
index fe79a2a..3b8ed38 100644
--- a/lib/endpoints/waitlist.js
+++ b/lib/endpoints/waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -33,29 +33,52 @@ ControllerWaitlist.init = function () {
 
 
 /* BEGIN JSSTYLED */
-/*
-
-Returns all waitlist tickets currently active on a server. Returns the uuid of
-the newly created ticket as well as an array of all the tickets in the ticket's
-scope queue.
-
-@name ServerWaitlistList
-@endpoint GET /servers/:server_uuid/tickets
-@section Waitlist API
-
-@response 200 Array Waitlist returned successfully
-@response 500 Error Could not process request
-
+/**
+ * 
+ * Returns all waitlist tickets currently active on a server. Returns the uuid of
+ * the newly created ticket as well as an array of all the tickets in the ticket's
+ * scope queue. By default servers are returned in the chronological order of their
+ * creation (`created_at` timestamp). By default the responses are limited to 1000
+ * results. Use the `limit` and `offset` to page through results.
+ * 
+ * @name ServerWaitlistList
+ * @endpoint GET /servers/:server_uuid/tickets
+ * @section Waitlist API
+ * 
+ * @param {Number} limit Return at most this many results
+ * @param {Number} offset Return results starting at this position
+ * @param {String} attribhute Attribute to sort on
+ * @param {String} order Sort in 'DESC' or 'ASC' order
+ * 
+ * @response 200 Array Waitlist returned successfully
+ * @response 500 Error Could not process request
+ * 
 */
 /* END JSSTYLED */
 
 ControllerWaitlist.list = function (req, res, next) {
-    var params = {};
+    var listOpts = {
+        server_uuid: req.params.server_uuid
+    };
 
-    params.server_uuid = req.params.server_uuid;
+    if (req.params.limit) {
+        listOpts.limit = parseInt(req.params.limit, 10);
+    }
+
+    if (req.params.offset) {
+        listOpts.offset = parseInt(req.params.offset, 10);
+    }
+
+    if (req.params.order) {
+        listOpts.order = req.params.order;
+    }
+
+    if (req.params.attribute) {
+        listOpts.attribute = req.params.attribute;
+    }
 
     ModelWaitlist.list(
-        params,
+        listOpts,
         function (error, tickets) {
             if (error) {
                 next(new restify.InternalError(error.message));
diff --git a/lib/models/waitlist.js b/lib/models/waitlist.js
index 6a904e1..09fda3a 100644
--- a/lib/models/waitlist.js
+++ b/lib/models/waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -430,7 +430,21 @@ ModelWaitlist.ticketRelease = function (ticket_uuid, callback) {
 
 ModelWaitlist.list = function (params, callback) {
     var uuid = params.server_uuid || '*';
-    ModelWaitlist.query('(server_uuid=' + uuid + ')', null, callback);
+    var queryOpts = {};
+
+    if (params.limit) {
+        queryOpts.limit = params.limit;
+    }
+    if (params.offset) {
+        queryOpts.offset = params.offset;
+    }
+    if (params.order) {
+        queryOpts.order = params.order;
+    }
+    if (params.attribute) {
+        queryOpts.attribute = params.attribute;
+    }
+    ModelWaitlist.query('(server_uuid=' + uuid + ')', queryOpts, callback);
 };
 
 
@@ -441,15 +455,28 @@ ModelWaitlist.query = function (filter, findOpts, callback) {
     var bucket  = buckets.waitlist_tickets.name;
     var tickets = [];
 
+
+    // Default sort parameters
+    var defaultSort = {
+        attribute: 'created_at',
+        order: 'ASC',
+        limit: 1000,
+        offset: 0
+    };
+
     if (findOpts === null) {
-        findOpts = {
-            sort: {
-                attribute: 'created_at',
-                order: 'ASC'
-            }
-        };
+        findOpts = { sort: defaultSort };
+    } else {
+        if (!findOpts.sort) {
+            findOpts.sort = defaultSort;
+        }
     }
 
+    findOpts.sort.attribute = findOpts.sort.attribute || defaultSort.attribute;
+    findOpts.sort.order = findOpts.sort.order || defaultSort.order;
+    findOpts.sort.limit = findOpts.sort.limit || defaultSort.limit;
+    findOpts.sort.offset = findOpts.sort.offset || defaultSort.offset;
+
     try {
         var req = moray.findObjects(bucket, filter, findOpts);
     } catch (e) {
diff --git a/package.json b/package.json
index 4b2665d..e2eda20 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
   "dependencies": {
     "amqp": "git://github.com/postwait/node-amqp.git#7a421793796bf66f5741282624c3db3ae266b3b5",
     "assert-plus": "0.1.5",
-    "async": "0.1.18",
+    "async": "1.5.2",
     "bunyan": "1.3.4",
     "dapi": "git+ssh://git@github.com:joyent/sdc-designation.git#db24809071ed2c2e5fe26fbd0b8d27d4b0f01d0a",
     "deep-equal": "git://github.com/substack/node-deep-equal.git#b2cfeb95da6982f8bc2e676231820a3a47385db3",
@@ -17,7 +17,7 @@
     "memwatch": "git://github.com/lloyd/node-memwatch.git#475ce024a53c74ad5baff27003b81499896e81a5",
     "moray": "git+ssh://git@github.com:joyent/node-moray.git#b84ef0e",
     "node-uuid": "1.2.0",
-    "nodeunit": "0.7.4",
+    "nodeunit": "0.9.1",
     "once": "1.3.0",
     "restify-validator": "0.3.0",
     "restify": "^3.0.1",
diff --git a/test/waitlist/test-waitlist.js b/test/waitlist/test-waitlist.js
index 5b974cd..3c4c948 100644
--- a/test/waitlist/test-waitlist.js
+++ b/test/waitlist/test-waitlist.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var Logger = require('bunyan');
@@ -20,14 +20,14 @@ var path = require('path');
 var uuid = require('node-uuid');
 var sprintf = require('sprintf').sprintf;
 
+
 var CNAPI_URL = 'http://' + (process.env.CNAPI_IP || '10.99.99.22');
 var client;
-
 var wlurl;
 var serveruuid;
-
 var ticketuuid;
 
+
 function setup(callback) {
     client = restify.createJsonClient({
         agent: false,
@@ -140,8 +140,6 @@ function testCreateTicket(test) {
                 test.equal(queues[1][0].action, 'action0');
                 test.equal(queues[1][1].action, 'action0');
                 test.equal(queues[2][0].action, 'action1');
-
-                console.error(util.inspect(queues));
                 wfcb();
             }
         },
@@ -355,12 +353,141 @@ function testUpdateTicket(test) {
 }
 
 
+function testFetchTicketsWithPaging(test) {
+    test.expect(647);
+    var count = 100;
+    var limit = 10;
+    var offset = 0;
+
+    var ticketUuids = [];
+
+    async.waterfall([
+        // Create N tickets
+        function (wfcb) {
+            var num = 0;
+            var i;
+
+            // Set up payloads
+            var payloads = [];
+            for (i = 0; i < count; i++) {
+                payloads.push({
+                    scope: 'test1',
+                    id: '111',
+                    expires_at:
+                        (new Date((new Date().valueOf()) +
+                         i*1000 + 600*1000)).toISOString()
+                });
+            }
+
+            // Fire off create requests
+            async.forEachOfSeries(payloads, onPayload, onFinish);
+            function onPayload(t, key, fecb) {
+                client.post(wlurl, t, function (err, req, res, ticket) {
+                    test.deepEqual(err, null, 'no error returned');
+                    test.equal(res.statusCode, 202,
+                               'POST waitlist ticket returned 202');
+                    test.ok(res, 'http response');
+                    test.ok(ticket, 'ticket created');
+                    test.ok(ticket.uuid, 'ticket had a UUID');
+
+                    ticketuuid = ticket.uuid;
+                    ticketUuids[ticket.uuid] = true;
+
+                    console.log('created %s (#%d)', ticketuuid, num++);
+                    fecb();
+                });
+            }
+
+            function onFinish(err) {
+                wfcb(err);
+            }
+        },
+
+        // Page through them `limit` number of results at a time
+        function (wfcb) {
+            var fetchMore = true;
+
+            var listOfResults = [];
+            var tickets = [];
+
+            async.whilst(
+                function () {
+                    return fetchMore;
+                },
+                doFetch,
+                function (err) {
+                    test.ok(listOfResults.length,
+                            'should be multiple pages of results (there were '
+                            + listOfResults.length + ')');
+
+                    for (var ri in listOfResults) {
+                        var result = listOfResults[ri];
+                        if (ri < listOfResults.length-1) {
+                            test.equal(listOfResults[ri].length, limit,
+                                'each page has right number of results');
+                        } else {
+                            test.equal(
+                               listOfResults[ri].length,
+                               count % limit,
+                               'last page should have `count % limit`' +
+                               ' number of results');
+                        }
+
+                        // Ensure ticket is one of the ones we created
+                        for (var r in result) {
+                            var ticket = result[r];
+                            test.ok(ticketUuids[ticket.uuid],
+                                    'found ticket we created');
+                        }
+                    }
+
+                    test.equal(listOfResults.length, 1+count/limit,
+                               'right number of pages');
+                    wfcb(err);
+                });
+
+            function doFetch(wlcb) {
+                // Fetch all the created tickets back
+                var geturl = sprintf(
+                    '/servers/%s/tickets?limit=%d&offset=%d',
+                    serveruuid,
+                    limit,
+                    offset);
+                client.get(geturl, getcb);
+                function getcb(err, req, res, results) {
+                    test.ok(Array.isArray(results), 'result is an array');
+                    test.ok(results.length <= limit,
+                            'result length <= `limit`');
+
+                    listOfResults.push(results);
+                    Array.prototype.push.apply(tickets, results);
+
+                    test.ok(Object.keys(ticketUuids).length >= count,
+                            'server at least as many tickets as were added');
+
+                    // Check if we have reached the end of the results
+                    if (results.length < limit) {
+                        fetchMore = false;
+                    }
+
+                    offset += limit;
+                    wlcb();
+                }
+            }
+        }
+    ],
+    function (error) {
+        test.ok(!error, 'no errors returned');
+        test.done();
+    });
+}
+
+
 
 module.exports = {
     setUp: setup,
     tearDown: teardown,
     'delete all tickets': testDeleteAllWaitlistTickets,
-    'create tickets then get one or many': testCreateTicket
-//     'waiting on a ticket': testWaitOnTicket
-//    'create ticket and update status': testUpdateTicket
+    'create tickets then get one or many': testCreateTicket,
+    'list from server with paging': testFetchTicketsWithPaging
 };
