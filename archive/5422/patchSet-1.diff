From ab091b8658d05d737c19069ddc987695c757fc2a Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 23 Jan 2019 17:38:13 -0800
Subject: [PATCH] joyent/node-zkstream#29 unreliable tests assuming after
 sync() all watchers have fired

---
 test/basic.test.js      | 155 ++++++++++++++++++++++------------------
 test/multi-node.test.js |  41 ++++++-----
 2 files changed, 112 insertions(+), 84 deletions(-)

diff --git a/test/basic.test.js b/test/basic.test.js
index 9b1a265..4cc095f 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -22,63 +22,6 @@ var log = mod_bunyan.createLogger({
 var zk;
 var connCount = 0;
 
-mod_tape.test('connect failure: refused', function (t) {
-	var zkc = new mod_zkc.Client({
-		log: log,
-		address: '127.0.0.1',
-		port: 2181
-	});
-
-	zkc.on('connect', function (st) {
-		t.fail();
-	});
-
-	zkc.on('failed', function () {
-		zkc.close();
-	});
-
-	zkc.on('close', function () {
-		t.end();
-	});
-});
-
-mod_tape.test('start awful zk server', function (t) {
-	zk = mod_net.createServer();
-	zk.on('connection', function (sock) {
-		++connCount;
-		sock.destroy();
-	});
-	zk.listen(2181, function () {
-		t.end();
-	});
-});
-
-mod_tape.test('connect failure: immediate close', function (t) {
-	var zkc = new mod_zkc.Client({
-		log: log,
-		address: '127.0.0.1',
-		port: 2181
-	});
-
-	zkc.on('close', function () {
-		t.end();
-	});
-
-	zkc.on('connect', function () {
-		t.fail();
-	});
-
-	zkc.on('failed', function () {
-		zkc.close();
-	});
-});
-
-mod_tape.test('stop awful zk server', function (t) {
-	zk.close();
-	zk = undefined;
-	t.end();
-});
-
 mod_tape.test('start zk server', function (t) {
 	zk = new mod_zk.ZKServer();
 	zk.on('stateChanged', function (st) {
@@ -680,23 +623,42 @@ mod_tape.test('data watcher', function (t) {
 
 	var data = new Buffer('hi there', 'ascii');
 	var count = 0;
+	var presetCount;
 
-	zkc.on('connect', function () {
+	mod_vasync.waterfall(
+	    [connect, makeWatcher, setValue, check],
+	    function (err) {
+		t.error(err);
+		zkc.close();
+	});
+
+	function connect(cb) {
+		zkc.on('connect', cb);
+	}
+
+	function makeWatcher(cb) {
 		zkc.watcher('/foo').on('dataChanged', function (newData) {
 			t.ok(Buffer.isBuffer(newData));
 			t.strictEqual(newData.toString('base64'),
 			    data.toString('base64'));
-			if (++count === 1) {
-				data = new Buffer('hi', 'ascii');
-				console.log('doing set');
-				zk.cli('set', '/foo', 'hi', function (err) {
-					t.error(err);
-					t.strictEqual(count, 2);
-					zkc.close();
-				});
-			}
+			if (++count === 1)
+				cb();
 		});
-	});
+	}
+
+	function setValue(cb) {
+		data = new Buffer('hi', 'ascii');
+		presetCount = count;
+		zk.cli('set', '/foo', 'hi', function (err) {
+			t.error(err);
+			cb();
+		});
+	}
+
+	function check(cb) {
+		t.ok(count > presetCount);
+		cb();
+	}
 });
 
 mod_tape.test('delete it while watching', function (t) {
@@ -1048,3 +1010,60 @@ mod_tape.test('stop zk server', function (t) {
 	});
 	zk.stop();
 });
+
+mod_tape.test('connect failure: refused', function (t) {
+	var zkc = new mod_zkc.Client({
+		log: log,
+		address: '127.0.0.1',
+		port: 2181
+	});
+
+	zkc.on('connect', function (st) {
+		t.fail();
+	});
+
+	zkc.on('failed', function () {
+		zkc.close();
+	});
+
+	zkc.on('close', function () {
+		t.end();
+	});
+});
+
+mod_tape.test('start awful zk server', function (t) {
+	zk = mod_net.createServer();
+	zk.on('connection', function (sock) {
+		++connCount;
+		sock.destroy();
+	});
+	zk.listen(2181, function () {
+		t.end();
+	});
+});
+
+mod_tape.test('connect failure: immediate close', function (t) {
+	var zkc = new mod_zkc.Client({
+		log: log,
+		address: '127.0.0.1',
+		port: 2181
+	});
+
+	zkc.on('close', function () {
+		t.end();
+	});
+
+	zkc.on('connect', function () {
+		t.fail();
+	});
+
+	zkc.on('failed', function () {
+		zkc.close();
+	});
+});
+
+mod_tape.test('stop awful zk server', function (t) {
+	zk.close();
+	zk = undefined;
+	t.end();
+});
diff --git a/test/multi-node.test.js b/test/multi-node.test.js
index 71cac37..2b27a1b 100644
--- a/test/multi-node.test.js
+++ b/test/multi-node.test.js
@@ -11,6 +11,7 @@ const mod_zk = require('./zkserver');
 const mod_zkc = require('../lib/index');
 const mod_net = require('net');
 const mod_bunyan = require('bunyan');
+const mod_vasync = require('vasync');
 
 var log = mod_bunyan.createLogger({
 	name: 'zkstream-test',
@@ -197,24 +198,32 @@ mod_tape.test('cross-server data watch', function (t) {
 	});
 
 	function setup() {
-		var watchFired = false;
-		zkc1.watcher('/foo').on('dataChanged',
-		    function (newData, stat) {
-			if (newData.toString() === 'testing') {
-				t.ok(stat.version > 0);
-				watchFired = true;
-			}
-		});
-		var data = new Buffer('testing');
-		zkc2.set('/foo', data, 0, function (err) {
+		mod_vasync.parallel({
+			funcs: [watch1, write2]
+		}, function (err) {
 			t.error(err);
-			zkc2.sync('/foo', function (err2) {
-				t.error(err2);
-				t.ok(watchFired);
-				zkc1.close();
-				zkc2.close();
-			});
+			zkc1.close();
+			zkc2.close();
 		});
+		function watch1(cb) {
+			zkc1.watcher('/foo').on('dataChanged',
+			    function (newData, stat) {
+				if (newData.toString() === 'testing') {
+					t.ok(stat.version > 0);
+					cb();
+				}
+			});
+		}
+		function write2(cb) {
+			var data = new Buffer('testing');
+			zkc2.set('/foo', data, 0, function (err) {
+				t.error(err);
+				zkc2.sync('/foo', function (err2) {
+					t.error(err2);
+					cb();
+				});
+			});
+		}
 	}
 });
 
-- 
2.21.0

