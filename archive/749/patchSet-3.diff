From 6fdea2df81ed52fed6ac3ca81f374d488d55bbf8 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Tue, 25 Oct 2016 02:27:26 -0700
Subject: [PATCH] DOCKER-947 update to node v4 Reviewed by: Drew Miller
 <drew666@gmail.com>

---
 Makefile                       |  7 ++++---
 lib/backends/sdc/build.js      |  2 +-
 lib/backends/sdc/containers.js | 24 ++++++++++++------------
 lib/backends/sdc/images.js     |  4 ++--
 lib/backends/sdc/sysinfo.js    |  2 +-
 lib/backends/sdc/utils.js      |  2 +-
 lib/common.js                  |  2 +-
 lib/config-loader.js           |  6 +++---
 lib/docker.js                  |  6 +++---
 lib/models/image.js            |  6 +++---
 lib/moray.js                   |  4 ++--
 lib/socket-manager.js          |  4 ++--
 lib/upgrade.js                 |  6 +++---
 package.json                   | 21 ++++++++++-----------
 sapi_manifests/docker/template |  5 +++--
 test/unit/affinity.test.js     |  2 +-
 16 files changed, 52 insertions(+), 51 deletions(-)

diff --git a/Makefile b/Makefile
index 3f0170c..8068009 100644
--- a/Makefile
+++ b/Makefile
@@ -24,10 +24,11 @@ JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
 SMF_MANIFESTS_IN = smf/manifests/docker.xml.in
 CLEAN_FILES += ./node_modules
 
-NODE_PREBUILT_VERSION=v0.10.48
+NODE_PREBUILT_VERSION=v4.6.1
 ifeq ($(shell uname -s),SunOS)
-	NODE_PREBUILT_TAG=zoneecdh
-	NODE_PREBUILT_IMAGE=de411e86-548d-11e4-a4b7-3bb60478632a
+	NODE_PREBUILT_TAG=zone
+	# Allow building on other than image sdc-minimal-multiarch-lts@15.4.1.
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
 endif
 
 
diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 37219e3..61ab2d2 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -678,7 +678,7 @@ function createImage(payload, opts, callback) {
     assert.object(payload, 'payload');
     assert.string(payload.finalId, 'payload.finalId');
     assert.object(payload.image, 'payload.image');
-    assert.number(payload.size, 'payload.size');
+    assert.finite(payload.size, 'payload.size');
     assert.optionalNumber(payload.virtual_size, 'payload.virtual_size');
     assert.object(opts, 'opts');
     assert.optionalObject(opts.rat, 'opts.rat');
diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index e3af48b..ad276b7 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -1231,9 +1231,9 @@ function renameLinks(opts, newName, callback) {
  */
 function getMemoryTarget(opts, container) {
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.object(opts.config, 'opts.config');
-    assert.number(opts.config.defaultMemory, 'opts.config.defaultMemory');
+    assert.finite(opts.config.defaultMemory, 'opts.config.defaultMemory');
     assert.object(opts.log, 'opts.log');
     assert.object(container, 'container');
 
@@ -1279,7 +1279,7 @@ function getClosestMemoryPackage(opts, pkgs, memory /* MiB */, callback) {
     assert.uuid(opts.account.uuid, 'opts.account.uuid');
     assert.object(opts.log, 'opts.log');
     assert.array(pkgs, 'pkgs');
-    assert.number(memory, 'memory');
+    assert.finite(memory, 'memory');
     assert.func(callback, 'callback');
 
     var candidate = {};
@@ -1677,7 +1677,7 @@ function buildVmPayload(opts, container, callback) {
     assert.object(opts.image, 'opts.image');
     assert.object(opts.vmapi, 'opts.vmapi'); // vmapi client
     assert.object(container, 'container');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
 
     var binds;
     var dockerid;
@@ -2499,7 +2499,7 @@ function getContainerCount(opts, callback) {
 function getContainersForVms(opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.app, 'opts.app');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.pkgmapUtoN, 'opts.pkgmapUtoN');
@@ -2573,7 +2573,7 @@ function getContainers(opts, callback) {
     assert.object(opts.app.config.fwapi, 'opts.app.config.fwapi');
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
     assert.object(opts.app.vmapi, 'opts.app.vmapi');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalString(opts.filters, 'opts.filters');
     assert.optionalObject(opts.log, 'opts.log');
@@ -2917,7 +2917,7 @@ function createContainer(opts, callback) {
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
     assert.object(opts.account, 'opts.account');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.optionalBool(opts.fabricRequireExternal,
                         'opts.fabricRequireExternal');
 
@@ -3446,7 +3446,7 @@ function inspectContainer(opts, callback) {
     assert.object(opts.app.config, 'opts.app.config');
     assert.object(opts.app.config.fwapi, 'opts.app.config.fwapi');
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
@@ -4046,8 +4046,8 @@ function execResize(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.object(opts.account, 'opts.account');
     assert.object(opts.socketData, 'opts.socketData');
-    assert.number(opts.w, 'opts.w');
-    assert.number(opts.h, 'opts.h');
+    assert.finite(opts.w, 'opts.w');
+    assert.finite(opts.h, 'opts.h');
 
     var socket = opts.socketData.socket;
     var data = JSON.stringify({
@@ -4181,8 +4181,8 @@ function resizeContainer(opts, callback) {
     assert.object(opts.app, 'opts.app');
     assert.string(opts.id, 'opts.id');
     assert.optionalObject(opts.log, 'opts.log');
-    assert.number(opts.w, 'opts.w');
-    assert.number(opts.h, 'opts.h');
+    assert.finite(opts.w, 'opts.w');
+    assert.finite(opts.h, 'opts.h');
 
     opts.app.sockets.pushResize(opts.id, { w: opts.w, h: opts.h });
     callback();
diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index 54ae62d..d9f8e5f 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -142,7 +142,7 @@ function listImages(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.object(opts.account, 'opts.account');
     assert.optionalBool(opts.all, 'opts.all');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.optionalString(opts.filters, 'opts.filters');
     assert.optionalBool(opts.skip_smartos, 'opts.skip_smartos');
     assert.string(opts.req_id, 'opts.req_id');
@@ -1573,7 +1573,7 @@ function createImage(opts, callback) {
     assert.object(opts.payload.image, 'opts.payload.image');
     assert.optionalBool(opts.payload.head, 'opts.payload.head');
     assert.optionalArrayOfString(opts.payload.heads, 'opts.payload.heads');
-    assert.number(opts.payload.size, 'opts.payload.size');
+    assert.finite(opts.payload.size, 'opts.payload.size');
     assert.optionalNumber(opts.payload.virtual_size,
                         'opts.payload.virtual_size');
     assert.optionalObject(opts.rat, 'opts.rat');
diff --git a/lib/backends/sdc/sysinfo.js b/lib/backends/sdc/sysinfo.js
index 25f56cc..ed9d909 100644
--- a/lib/backends/sdc/sysinfo.js
+++ b/lib/backends/sdc/sysinfo.js
@@ -53,7 +53,7 @@ function getInfo(opts, callback) {
         opts = {};
     }
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.object(opts.app, 'opts.app');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
diff --git a/lib/backends/sdc/utils.js b/lib/backends/sdc/utils.js
index 7f34502..cda3673 100644
--- a/lib/backends/sdc/utils.js
+++ b/lib/backends/sdc/utils.js
@@ -483,7 +483,7 @@ function netmaskToBits(netmask) {
 // Sadly `docker ps` and `docker inspect` container objects only share Id
 function vmobjToInspect(opts, obj, vmData, callback) {
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.imgs, 'opts.imgs');
     assert.object(opts.log, 'opts.log');
     assert.string(obj.alias, 'obj.alias');
diff --git a/lib/common.js b/lib/common.js
index 5ab60e1..a2eeff0 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -154,7 +154,7 @@ function humanDuration(seconds) {
  * `docker run --memory MEMORY` suffixes.
  */
 function humanSizeFromBytes(bytes) {
-    assert.number(bytes, 'bytes');
+    assert.finite(bytes, 'bytes');
     var sizes = ['b', 'k', 'm', 'g', 't'];
     if (bytes === 0) {
         return '0b';
diff --git a/lib/config-loader.js b/lib/config-loader.js
index f1e8be5..3b1b4ff 100644
--- a/lib/config-loader.js
+++ b/lib/config-loader.js
@@ -37,7 +37,7 @@ function loadConfigSync(opts) {
     });
 
     if (config.hasOwnProperty('fwrule_version')) {
-        assert.number(config.fwrule_version, 'config.fwrule_version');
+        assert.finite(config.fwrule_version, 'config.fwrule_version');
     } else {
         config.fwrule_version = 1;
     }
@@ -50,8 +50,8 @@ function loadConfigSync(opts) {
     }
 
     // Validation. XXX backend-specific config validation should not be here.
-    assert.number(config.port, 'config.port');
-    assert.number(config.defaultMemory, 'config.defaultMemory');
+    assert.finite(config.port, 'config.port');
+    assert.finite(config.defaultMemory, 'config.defaultMemory');
     assert.string(config.packagePrefix, 'config.packagePrefix');
     assert.string(config.logLevel, 'config.logLevel');
     assert.object(config.cnapi, 'config.cnapi');
diff --git a/lib/docker.js b/lib/docker.js
index 2f25b34..0f1c28e 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -415,9 +415,9 @@ App.prototype.createMorayClient = function createMorayClient() {
         port: self.config.moray.port,
         reconnect: true,
         retry: {
-            retries: Infinity,
-            maxTimeout: 6000,
-            minTimeout: 100
+            retries: self.config.moray.retry.retries,
+            minTimeout: self.config.moray.minTimeout,
+            maxTimeout: self.config.moray.maxTimeout
         }
     };
 
diff --git a/lib/models/image.js b/lib/models/image.js
index 87d7146..343a499 100644
--- a/lib/models/image.js
+++ b/lib/models/image.js
@@ -68,13 +68,13 @@ function objectKey(params) {
  */
 function Image(params) {
     assert.object(params, 'image params');
-    assert.number(params.created, 'params.created');
+    assert.finite(params.created, 'params.created');
     assert.string(params.docker_id, 'params.docker_id');
     assert.string(params.image_uuid, 'params.image_uuid');
     assert.string(params.owner_uuid, 'params.owner_uuid');
     assert.optionalArrayOfString(params.heads, 'params.heads');
-    assert.number(params.size, 'params.size');
-    assert.number(params.virtual_size, 'params.virtual_size');
+    assert.finite(params.size, 'params.size');
+    assert.finite(params.virtual_size, 'params.virtual_size');
     assert.optionalString(params.architecture, 'params.architecture');
     assert.optionalString(params.comment, 'params.comment');
     assert.optionalObject(params.config, 'params.config');
diff --git a/lib/moray.js b/lib/moray.js
index 3b7e3f3..1e225e3 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -149,7 +149,7 @@ function initBucket(moray, bucket, callback) {
     assert.string(bucket.desc, 'bucket.desc');
     assert.string(bucket.name, 'bucket.name');
     assert.object(bucket.schema, 'bucket.schema');
-    assert.number(bucket.version, 'bucket.version');
+    assert.finite(bucket.version, 'bucket.version');
 
     moray.getBucket(bucket.name, function (err, oldBucket) {
         if (err) {
@@ -226,7 +226,7 @@ function reindexBucket(moray, bucket, callback) {
     assert.string(bucket.desc, 'bucket.desc');
     assert.string(bucket.name, 'bucket.name');
     assert.object(bucket.schema, 'bucket.schema');
-    assert.number(bucket.version, 'bucket.version');
+    assert.finite(bucket.version, 'bucket.version');
 
     var rowsPerCall = 100;
     var processed = rowsPerCall;
diff --git a/lib/socket-manager.js b/lib/socket-manager.js
index 8ac4205..7f4a9ff 100644
--- a/lib/socket-manager.js
+++ b/lib/socket-manager.js
@@ -85,8 +85,8 @@ SocketManager.prototype.removeSocket = function (type, id) {
 SocketManager.prototype.pushResize = function (id, resize) {
     assert.string(id, 'socket identifier');
     assert.object(resize, 'resize object');
-    assert.number(resize.w, 'resize columns');
-    assert.number(resize.h, 'resize rows');
+    assert.finite(resize.w, 'resize columns');
+    assert.finite(resize.h, 'resize rows');
 
     this.resizes[id] = resize;
     return resize;
diff --git a/lib/upgrade.js b/lib/upgrade.js
index b0c8981..467f7ad 100644
--- a/lib/upgrade.js
+++ b/lib/upgrade.js
@@ -118,7 +118,7 @@ ServerUpgradeResponse.prototype._writeHeadImpl =
     };
 
 ServerUpgradeResponse.prototype.status = function status(code) {
-    assert.number(code, 'code');
+    assert.finite(code, 'code');
     this.statusCode = code;
     return (code);
 };
@@ -152,7 +152,7 @@ ServerUpgradeResponse.prototype.write = function write() {
 
 ServerUpgradeResponse.prototype.writeHead =
     function writeHead(statusCode, reason) {
-        assert.number(statusCode, 'statusCode');
+        assert.finite(statusCode, 'statusCode');
         assert.optionalString(reason, 'reason');
 
         this.statusCode = statusCode;
@@ -183,4 +183,4 @@ module.exports = {
     InvalidUpgradeStateError: InvalidUpgradeStateError
 };
 
-// vim: set et ts=8 sts=8 sw=8:
\ No newline at end of file
+// vim: set et ts=8 sts=8 sw=8:
diff --git a/package.json b/package.json
index 0a85850..a9e5418 100644
--- a/package.json
+++ b/package.json
@@ -1,25 +1,25 @@
 {
   "name": "sdc-docker",
-  "version": "0.3.0",
+  "version": "0.4.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
     "assert-plus": "1.0.0",
     "async": "0.9.0",
-    "bunyan": "1.3.2",
     "docker-registry-client": "3.2.3",
+    "bunyan": "1.8.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "fwrule": "git+https://github.com/joyent/sdc-fwrule.git#d1174be",
     "imgmanifest": "git+https://github.com/joyent/node-imgmanifest.git#91e5d80",
-    "keyapi": "git+https://github.com/joyent/keyapi.git#c30dd2710ad2175095dc0e96479686fa774b8063",
-    "libuuid": "0.1.3",
+    "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d5",
+    "libuuid": "0.2.1",
     "lru-cache": "2.5.0",
     "lstream": "0.0.4",
-    "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
+    "moray": "git+https://github.com/joyent/node-moray.git#a65aa31",
     "once": "1.3.1",
     "openssl-wrapper": "0.2.1",
-    "restify": "git+https://github.com/joyent/node-restify.git#fd5d5b5",
-    "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#5454ae4",
+    "restify": "4.1.1",
+    "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#a3e7780",
     "sdc-clients": "10.0.1",
     "sprintf": "0.1.5",
     "sshpk": "1.8.3",
@@ -27,18 +27,17 @@
     "tape": "^4.4.0",
     "trace-event": "1.2.0",
     "triton-tags": "1.0.0",
-    "ufds": "git+https://github.com/joyent/node-ufds.git#c7aa563",
+    "ufds": "git+https://github.com/joyent/node-ufds.git#f1e8cc6",
     "vasync": "1.6.3",
     "verror": "1.6.0",
-    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#946d33b",
+    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#f498b46",
     "xregexp": "3.1.0"
   },
   "devDependencies": {
     "deep-equal": "~0.2.0",
     "difflet": "0.2.6",
-    "manta": "1.4.5",
+    "manta": "3.1.2",
     "semver": "5.1.0",
-    "tape": "^4.4.0",
     "tar-stream": "1.3.1",
     "xtend": "^4.0.0"
   },
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index 6f3d7b1..15c522f 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -32,8 +32,9 @@
         "port": 2020,
         "connectTimeout": 200,
         "retry": {
-            "retries": 2,
-            "minTimeout": 500
+            "retries": 1000,
+            "minTimeout": 100,
+            "minTimeout": 6000
         }
     },
     "fwapi": {
diff --git a/test/unit/affinity.test.js b/test/unit/affinity.test.js
index f29488a..28c1662 100644
--- a/test/unit/affinity.test.js
+++ b/test/unit/affinity.test.js
@@ -26,7 +26,7 @@ var localityFromContainer = require('../../lib/backends/sdc/affinity')
 
 var log = bunyan.createLogger({
     name: 'affinity.test',
-    level: process.env.TRACE ? 'trace' : 'off',
+    level: process.env.TRACE ? 'trace' : bunyan.FATAL + 1 /* off */,
     req_id: '655b2da4-3165-9549-8626-531ef9336e1e'
 });
 
-- 
2.21.0

