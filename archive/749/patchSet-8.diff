From 5e54f8d12963ea355a3ee047b0e0aebb70f29f3f Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 31 Oct 2016 16:04:55 -0700
Subject: [PATCH] DOCKER-947 update to node v4

---
 Makefile                            |   9 +-
 lib/auth.js                         |  70 +-----------
 lib/backends/sdc/build.js           |   2 +-
 lib/backends/sdc/containers.js      |  24 ++---
 lib/backends/sdc/images.js          |   9 +-
 lib/backends/sdc/sysinfo.js         |   2 +-
 lib/backends/sdc/utils.js           |   2 +-
 lib/common.js                       |   2 +-
 lib/config-loader.js                |   6 +-
 lib/docker.js                       |  37 +++----
 lib/endpoints/containers.js         |  34 +++---
 lib/errors.js                       |   4 +-
 lib/models/image.js                 |   6 +-
 lib/moray.js                        |   4 +-
 lib/socket-manager.js               |   4 +-
 lib/upgrade.js                      |   6 +-
 package.json                        |  21 ++--
 sapi_manifests/docker/template      |   5 +-
 test/integration/api-build.test.js  |  25 +++--
 test/integration/api-create.test.js |   8 +-
 test/integration/api-images.test.js |  10 +-
 test/integration/helpers.js         | 160 +++++++++++++++++++++++-----
 test/runtest.common                 |   2 +-
 test/unit/affinity.test.js          |   2 +-
 tools/get-docker-clients.sh         |   2 +-
 tools/sdc-docker-setup.sh           |  15 ++-
 26 files changed, 273 insertions(+), 198 deletions(-)

diff --git a/Makefile b/Makefile
index 3f0170c..ffe15f8 100644
--- a/Makefile
+++ b/Makefile
@@ -24,10 +24,11 @@ JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
 SMF_MANIFESTS_IN = smf/manifests/docker.xml.in
 CLEAN_FILES += ./node_modules
 
-NODE_PREBUILT_VERSION=v0.10.48
+NODE_PREBUILT_VERSION=v4.6.1
 ifeq ($(shell uname -s),SunOS)
-	NODE_PREBUILT_TAG=zoneecdh
-	NODE_PREBUILT_IMAGE=de411e86-548d-11e4-a4b7-3bb60478632a
+	NODE_PREBUILT_TAG=zone
+	# Allow building on other than image sdc-minimal-multiarch-lts@15.4.1.
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
 endif
 
 
@@ -89,7 +90,7 @@ test: $(TAPE)
 #
 .PHONY: test-integration-in-coal
 test-integration-in-coal:
-	@ssh root@$(COAL) 'LOG_LEVEL=$(LOG_LEVEL) /zones/$$(vmadm lookup -1 alias=docker0)/root/opt/smartdc/docker/test/runtests $(TEST_ARGS)'
+	@ssh root@$(COAL) 'DOCKER_CLI_VERSIONS="$(DOCKER_CLI_VERSIONS)" LOG_LEVEL=$(LOG_LEVEL) /zones/$$(vmadm lookup -1 alias=docker0)/root/opt/smartdc/docker/test/runtests $(TEST_ARGS)'
 
 
 .PHONY: git-hooks
diff --git a/lib/auth.js b/lib/auth.js
index 584f5dd..fbe478a 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -40,84 +40,24 @@ var errors = require('./errors');
 
 var fmt = util.format;
 
-/* Turn a potentially non-zero-padded hex string into a Buffer. */
-function fromHex(hex) {
-    /*
-     * Buffer() can't take a hex string unless it's zero-padded out to an
-     * even length.
-     */
-    if (hex.length % 2 !== 0)
-        hex = '0' + hex;
-    return (new Buffer(hex, 'hex'));
-}
-
-/*
- * This is a sample certificate as parsed by node TLS. We will authorize
- * the user by finding the corresponding UFDS user by their certificate CN
- * (login/username), compute the modulus and exponent of their SSH public
- * key to their parsed certificate's modulus and exponent.
- *
- * { subject:
- *    { C: 'CA',
- *      ST: 'BC',
- *      L: 'Vancouver',
- *      O: 'Joyent',
- *      CN: 'foo',
- *      emailAddress: 'foo@bar.com' },
- *   issuer:
- *    { C: 'CA',
- *      ST: 'BC',
- *      L: 'Vancouver',
- *      O: 'Joyent',
- *      CN: 'foo',
- *      emailAddress: 'foo@bar.com' },
- *   modulus: '1AB02CD03EF...',
- *   exponent: '10001',
- *   valid_from: 'Feb 11 19:31:38 2015 GMT',
- *   valid_to: 'Feb 11 19:31:38 2016 GMT',
- *   fingerprint: 'AA:BB:CC:DD:EE:FF' }
- *
- * Note that the "modulus" and "exponent" fields are completely undocumented
- * and not guaranteed to survive into new nodejs versions. As of node v0.12
- * the new field "raw" became available (and documented), containing the raw
- * DER certificate.
- *
- */
 function authTls(req, res, next) {
     var log = req.log;
     var authCache = req.app.authCache;
     var ufds = req.app.ufds;
-    var cert = req.connection.getPeerCertificate();
 
-    /* We only support RSA keys for now until we have a newer node. */
-    if (!cert.subject || !cert.subject.CN || !cert.fingerprint
-        || !cert.modulus || !cert.exponent) {
+    var peerCert = req.connection.getPeerCertificate();
+    if (!peerCert || !peerCert.raw) {
         next(new errors.UnauthorizedError());
         return;
     }
 
-    var exponent = fromHex(cert.exponent);
-    var modulus = fromHex(cert.modulus);
-
-    /*
-     * This is an sshpk private API, so it could break if we upgrade our sshpk
-     * dep. We should keep an eye on this, and change to using the "raw" DER
-     * certificate instead of the exponent/modulus fields once we're on node
-     * 0.12 or later.
-     */
-    var peerKey = new sshpk.Key({
-        type: 'rsa',
-        parts: [
-            { name: 'e', data: sshpkUtils.mpNormalize(exponent) },
-            { name: 'n', data: sshpkUtils.mpNormalize(modulus) }
-        ]
-    });
-
+    var cert = sshpk.parseCertificate(peerCert.raw, 'x509');
+    var peerKey = cert.subjectKey;
     var peerKeyFp = peerKey.fingerprint('sha512').toString();
 
     var account;
     var ufdsKey;
-    var login = cert.subject.CN;
+    var login = cert.subjects[0].cn;
     var authFunctions = [ getMainAccount ];
 
     if (authCache.get(login) && authCache.get(login) === peerKeyFp) {
diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 37219e3..61ab2d2 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -678,7 +678,7 @@ function createImage(payload, opts, callback) {
     assert.object(payload, 'payload');
     assert.string(payload.finalId, 'payload.finalId');
     assert.object(payload.image, 'payload.image');
-    assert.number(payload.size, 'payload.size');
+    assert.finite(payload.size, 'payload.size');
     assert.optionalNumber(payload.virtual_size, 'payload.virtual_size');
     assert.object(opts, 'opts');
     assert.optionalObject(opts.rat, 'opts.rat');
diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index e3af48b..ad276b7 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -1231,9 +1231,9 @@ function renameLinks(opts, newName, callback) {
  */
 function getMemoryTarget(opts, container) {
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.object(opts.config, 'opts.config');
-    assert.number(opts.config.defaultMemory, 'opts.config.defaultMemory');
+    assert.finite(opts.config.defaultMemory, 'opts.config.defaultMemory');
     assert.object(opts.log, 'opts.log');
     assert.object(container, 'container');
 
@@ -1279,7 +1279,7 @@ function getClosestMemoryPackage(opts, pkgs, memory /* MiB */, callback) {
     assert.uuid(opts.account.uuid, 'opts.account.uuid');
     assert.object(opts.log, 'opts.log');
     assert.array(pkgs, 'pkgs');
-    assert.number(memory, 'memory');
+    assert.finite(memory, 'memory');
     assert.func(callback, 'callback');
 
     var candidate = {};
@@ -1677,7 +1677,7 @@ function buildVmPayload(opts, container, callback) {
     assert.object(opts.image, 'opts.image');
     assert.object(opts.vmapi, 'opts.vmapi'); // vmapi client
     assert.object(container, 'container');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
 
     var binds;
     var dockerid;
@@ -2499,7 +2499,7 @@ function getContainerCount(opts, callback) {
 function getContainersForVms(opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.app, 'opts.app');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.pkgmapUtoN, 'opts.pkgmapUtoN');
@@ -2573,7 +2573,7 @@ function getContainers(opts, callback) {
     assert.object(opts.app.config.fwapi, 'opts.app.config.fwapi');
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
     assert.object(opts.app.vmapi, 'opts.app.vmapi');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalString(opts.filters, 'opts.filters');
     assert.optionalObject(opts.log, 'opts.log');
@@ -2917,7 +2917,7 @@ function createContainer(opts, callback) {
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
     assert.object(opts.account, 'opts.account');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.optionalBool(opts.fabricRequireExternal,
                         'opts.fabricRequireExternal');
 
@@ -3446,7 +3446,7 @@ function inspectContainer(opts, callback) {
     assert.object(opts.app.config, 'opts.app.config');
     assert.object(opts.app.config.fwapi, 'opts.app.config.fwapi');
     assert.object(opts.app.config.papi, 'opts.app.config.papi');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.images, 'opts.images');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
@@ -4046,8 +4046,8 @@ function execResize(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.object(opts.account, 'opts.account');
     assert.object(opts.socketData, 'opts.socketData');
-    assert.number(opts.w, 'opts.w');
-    assert.number(opts.h, 'opts.h');
+    assert.finite(opts.w, 'opts.w');
+    assert.finite(opts.h, 'opts.h');
 
     var socket = opts.socketData.socket;
     var data = JSON.stringify({
@@ -4181,8 +4181,8 @@ function resizeContainer(opts, callback) {
     assert.object(opts.app, 'opts.app');
     assert.string(opts.id, 'opts.id');
     assert.optionalObject(opts.log, 'opts.log');
-    assert.number(opts.w, 'opts.w');
-    assert.number(opts.h, 'opts.h');
+    assert.finite(opts.w, 'opts.w');
+    assert.finite(opts.h, 'opts.h');
 
     opts.app.sockets.pushResize(opts.id, { w: opts.w, h: opts.h });
     callback();
diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index 54ae62d..0fe65cb 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -142,7 +142,7 @@ function listImages(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.object(opts.account, 'opts.account');
     assert.optionalBool(opts.all, 'opts.all');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.optionalString(opts.filters, 'opts.filters');
     assert.optionalBool(opts.skip_smartos, 'opts.skip_smartos');
     assert.string(opts.req_id, 'opts.req_id');
@@ -1429,6 +1429,11 @@ function pullImage(opts, callback) {
                     + 'to pull %s (%s)', opts.rat.index.name,
                     opts.rat.remoteName, opts.req_id)
             };
+        } else if (err.code === 'DownloadError') {
+            // E.g. A `DownloadError` from docker-registry-client.
+            payload = {
+                status: format('Error downloading %s: %s', imgName, err.message)
+            };
         } else if (err.code === 'NotImplemented') {
             // E.g. OAuth auth to a Docker Registry before DOCKER-771.
             payload = {
@@ -1573,7 +1578,7 @@ function createImage(opts, callback) {
     assert.object(opts.payload.image, 'opts.payload.image');
     assert.optionalBool(opts.payload.head, 'opts.payload.head');
     assert.optionalArrayOfString(opts.payload.heads, 'opts.payload.heads');
-    assert.number(opts.payload.size, 'opts.payload.size');
+    assert.finite(opts.payload.size, 'opts.payload.size');
     assert.optionalNumber(opts.payload.virtual_size,
                         'opts.payload.virtual_size');
     assert.optionalObject(opts.rat, 'opts.rat');
diff --git a/lib/backends/sdc/sysinfo.js b/lib/backends/sdc/sysinfo.js
index 25f56cc..ed9d909 100644
--- a/lib/backends/sdc/sysinfo.js
+++ b/lib/backends/sdc/sysinfo.js
@@ -53,7 +53,7 @@ function getInfo(opts, callback) {
         opts = {};
     }
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.object(opts.app, 'opts.app');
     assert.optionalObject(opts.log, 'opts.log');
     assert.string(opts.req_id, 'opts.req_id');
diff --git a/lib/backends/sdc/utils.js b/lib/backends/sdc/utils.js
index 7f34502..cda3673 100644
--- a/lib/backends/sdc/utils.js
+++ b/lib/backends/sdc/utils.js
@@ -483,7 +483,7 @@ function netmaskToBits(netmask) {
 // Sadly `docker ps` and `docker inspect` container objects only share Id
 function vmobjToInspect(opts, obj, vmData, callback) {
     assert.object(opts, 'opts');
-    assert.number(opts.clientApiVersion, 'opts.clientApiVersion');
+    assert.finite(opts.clientApiVersion, 'opts.clientApiVersion');
     assert.arrayOfObject(opts.imgs, 'opts.imgs');
     assert.object(opts.log, 'opts.log');
     assert.string(obj.alias, 'obj.alias');
diff --git a/lib/common.js b/lib/common.js
index 5ab60e1..a2eeff0 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -154,7 +154,7 @@ function humanDuration(seconds) {
  * `docker run --memory MEMORY` suffixes.
  */
 function humanSizeFromBytes(bytes) {
-    assert.number(bytes, 'bytes');
+    assert.finite(bytes, 'bytes');
     var sizes = ['b', 'k', 'm', 'g', 't'];
     if (bytes === 0) {
         return '0b';
diff --git a/lib/config-loader.js b/lib/config-loader.js
index f1e8be5..3b1b4ff 100644
--- a/lib/config-loader.js
+++ b/lib/config-loader.js
@@ -37,7 +37,7 @@ function loadConfigSync(opts) {
     });
 
     if (config.hasOwnProperty('fwrule_version')) {
-        assert.number(config.fwrule_version, 'config.fwrule_version');
+        assert.finite(config.fwrule_version, 'config.fwrule_version');
     } else {
         config.fwrule_version = 1;
     }
@@ -50,8 +50,8 @@ function loadConfigSync(opts) {
     }
 
     // Validation. XXX backend-specific config validation should not be here.
-    assert.number(config.port, 'config.port');
-    assert.number(config.defaultMemory, 'config.defaultMemory');
+    assert.finite(config.port, 'config.port');
+    assert.finite(config.defaultMemory, 'config.defaultMemory');
     assert.string(config.packagePrefix, 'config.packagePrefix');
     assert.string(config.logLevel, 'config.logLevel');
     assert.object(config.cnapi, 'config.cnapi');
diff --git a/lib/docker.js b/lib/docker.js
index 2f25b34..266911a 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -25,6 +25,7 @@ var sbs = require('sdc-bunyan-serializers');
 var os = require('os');
 var path = require('path');
 var restify = require('restify');
+var formatJSON = require('restify/lib/formatters/json');
 var UFDS = require('ufds');
 var vasync = require('vasync');
 var verror = require('verror');
@@ -110,26 +111,6 @@ function App(opts) {
         }
     });
 
-    /*
-     * HACK: Monkey-patch restify's `http.ServerResponse.format` to default
-     * to text/plain for errors without breaking the default of
-     * application/json for successful responses. Restify doesn't currently
-     * provide a hook to do this.
-     *
-     * Warning: Restify only overrides http.ServerResponse after `createServer`
-     * is called because its "server.js" is lazily imported.
-     */
-    var Response = http.ServerResponse;
-    Response.prototype._old_format = Response.prototype.format;
-    Response.prototype.format = function _my_format(body, cb) {
-        var type = this.contentType || this.getHeader('Content-Type');
-        if (!type && body instanceof Error) {
-            this.contentType = 'text/plain';
-        }
-        return this._old_format(body, cb);
-    };
-
-
     server.use(function (req, res, next) {
         // Headers we want for all responses.
         res.on('header', function onHeader() {
@@ -293,7 +274,15 @@ App.prototype.setupServer = function () {
              * I.e. we want to change this formatter, not change preferred
              * ordering.
              */
-            'text/plain; q=0.3': errors.formatErrOrText
+            'text/plain; q=0.3': errors.formatErrOrText,
+            'application/json': function (req, res, body, cb) {
+                if (body instanceof Error) {
+                    res.setHeader('content-type', 'text/plain');
+                    return errors.formatErrOrText(req, res, body, cb);
+                } else {
+                    return formatJSON(req, res, body, cb);
+                }
+            }
         }
     };
 
@@ -415,9 +404,9 @@ App.prototype.createMorayClient = function createMorayClient() {
         port: self.config.moray.port,
         reconnect: true,
         retry: {
-            retries: Infinity,
-            maxTimeout: 6000,
-            minTimeout: 100
+            retries: self.config.moray.retry.retries,
+            minTimeout: self.config.moray.minTimeout,
+            maxTimeout: self.config.moray.maxTimeout
         }
     };
 
diff --git a/lib/endpoints/containers.js b/lib/endpoints/containers.js
index db2e09e..3579e48 100644
--- a/lib/endpoints/containers.js
+++ b/lib/endpoints/containers.js
@@ -952,10 +952,18 @@ function register(http, before) {
         next();
     }
 
+    var queryParserOpts = {
+        mapParams: false,
+
+        // See: ZAPI-744:
+        allowDots: false,
+        plainObjects: false
+    };
+
     // Match: '/:apiversion/containers/json'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/json$/,
         name: 'ContainerList' }, before, getImages,
-        restify.queryParser({mapParams: false}), containerList);
+        restify.queryParser(queryParserOpts), containerList);
 
     // Match: '/:apiversion/containers/create'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/create$/,
@@ -965,7 +973,7 @@ function register(http, before) {
         validate.createContainer,
         common.checkApprovedForProvisioning,
         common.reqImageIncludeSmartos,
-        restify.queryParser({mapParams: false}),
+        restify.queryParser(queryParserOpts),
         containerCreate);
 
     // Match: '/:apiversion/containers/:id/json'
@@ -977,17 +985,17 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/top'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/top$/,
         name: 'ContainerTop' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerTop);
+        restify.queryParser(queryParserOpts), containerTop);
 
     // Match: '/:apiversion/containers/:id/logs'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/logs$/,
         name: 'ContainerLogs' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerLogs);
+        restify.queryParser(queryParserOpts), containerLogs);
 
     // Match: '/:apiversion/containers/:id/stats'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/stats$/,
         name: 'ContainerStats' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerStats);
+        restify.queryParser(queryParserOpts), containerStats);
 
     // Match: '/:apiversion/containers/:id/changes'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/changes$/,
@@ -1001,7 +1009,7 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/resize'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/resize$/,
         name: 'ContainerResize' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerResize);
+        restify.queryParser(queryParserOpts), containerResize);
 
     // Match: '/:apiversion/containers/:id/start'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/start$/,
@@ -1010,7 +1018,7 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/stop'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/stop$/,
         name: 'ContainerStop' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerStop);
+        restify.queryParser(queryParserOpts), containerStop);
 
     // Match: '/:apiversion/containers/:id/restart'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/restart$/,
@@ -1033,7 +1041,7 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/attach'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/attach$/,
         name: 'ContainerAttach' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerAttach);
+        restify.queryParser(queryParserOpts), containerAttach);
 
     // Match: '/:apiversion/containers/:id/wait'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/wait$/,
@@ -1042,7 +1050,7 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id'
     http.del({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)$/,
         name: 'ContainerDelete' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerDelete);
+        restify.queryParser(queryParserOpts), containerDelete);
 
     // Match: '/:apiversion/containers/:id/link'
     http.del({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/([^\/]+)$/,
@@ -1063,19 +1071,19 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/archive'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
         name: 'ContainerReadArchive' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}),
+        restify.queryParser(queryParserOpts),
         validate.archiveReadStream, containerReadArchive);
 
     // Match: '/:apiversion/containers/:id/archive'
     http.put({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
         name: 'ContainerWriteArchive' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}),
+        restify.queryParser(queryParserOpts),
         validate.archiveWriteStream, containerWriteArchive);
 
     // Match: '/:apiversion/containers/:id/archive'
     http.head({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
         name: 'ContainerStatArchive' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}),
+        restify.queryParser(queryParserOpts),
         validate.archiveReadStream, containerStatArchive);
 
 
@@ -1087,7 +1095,7 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/rename'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/rename$/,
         name: 'ContainerRename' }, before, reqParamsId, getVm,
-        restify.queryParser({mapParams: false}), containerRename);
+        restify.queryParser(queryParserOpts), containerRename);
 }
 
 module.exports = {
diff --git a/lib/errors.js b/lib/errors.js
index 85450a3..1c5c327 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -112,7 +112,7 @@ var RestError = restify.RestError;
  * Extend the default Restify 'text/plain' formatter to include the
  * `err.restCode` string in returned error messages.
  */
-function formatErrOrText(req, res, body) {
+function formatErrOrText(req, res, body, cb) {
     if (body instanceof Error) {
         res.statusCode = body.statusCode || 500;
         if (body.restCode && body.restCode !== 'DockerError') {
@@ -136,7 +136,7 @@ function formatErrOrText(req, res, body) {
         res.setHeader('Content-Length', Buffer.byteLength(body));
     }
 
-    return (body);
+    return cb(null, body);
 }
 
 
diff --git a/lib/models/image.js b/lib/models/image.js
index 87d7146..343a499 100644
--- a/lib/models/image.js
+++ b/lib/models/image.js
@@ -68,13 +68,13 @@ function objectKey(params) {
  */
 function Image(params) {
     assert.object(params, 'image params');
-    assert.number(params.created, 'params.created');
+    assert.finite(params.created, 'params.created');
     assert.string(params.docker_id, 'params.docker_id');
     assert.string(params.image_uuid, 'params.image_uuid');
     assert.string(params.owner_uuid, 'params.owner_uuid');
     assert.optionalArrayOfString(params.heads, 'params.heads');
-    assert.number(params.size, 'params.size');
-    assert.number(params.virtual_size, 'params.virtual_size');
+    assert.finite(params.size, 'params.size');
+    assert.finite(params.virtual_size, 'params.virtual_size');
     assert.optionalString(params.architecture, 'params.architecture');
     assert.optionalString(params.comment, 'params.comment');
     assert.optionalObject(params.config, 'params.config');
diff --git a/lib/moray.js b/lib/moray.js
index 3b7e3f3..1e225e3 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -149,7 +149,7 @@ function initBucket(moray, bucket, callback) {
     assert.string(bucket.desc, 'bucket.desc');
     assert.string(bucket.name, 'bucket.name');
     assert.object(bucket.schema, 'bucket.schema');
-    assert.number(bucket.version, 'bucket.version');
+    assert.finite(bucket.version, 'bucket.version');
 
     moray.getBucket(bucket.name, function (err, oldBucket) {
         if (err) {
@@ -226,7 +226,7 @@ function reindexBucket(moray, bucket, callback) {
     assert.string(bucket.desc, 'bucket.desc');
     assert.string(bucket.name, 'bucket.name');
     assert.object(bucket.schema, 'bucket.schema');
-    assert.number(bucket.version, 'bucket.version');
+    assert.finite(bucket.version, 'bucket.version');
 
     var rowsPerCall = 100;
     var processed = rowsPerCall;
diff --git a/lib/socket-manager.js b/lib/socket-manager.js
index 8ac4205..7f4a9ff 100644
--- a/lib/socket-manager.js
+++ b/lib/socket-manager.js
@@ -85,8 +85,8 @@ SocketManager.prototype.removeSocket = function (type, id) {
 SocketManager.prototype.pushResize = function (id, resize) {
     assert.string(id, 'socket identifier');
     assert.object(resize, 'resize object');
-    assert.number(resize.w, 'resize columns');
-    assert.number(resize.h, 'resize rows');
+    assert.finite(resize.w, 'resize columns');
+    assert.finite(resize.h, 'resize rows');
 
     this.resizes[id] = resize;
     return resize;
diff --git a/lib/upgrade.js b/lib/upgrade.js
index b0c8981..467f7ad 100644
--- a/lib/upgrade.js
+++ b/lib/upgrade.js
@@ -118,7 +118,7 @@ ServerUpgradeResponse.prototype._writeHeadImpl =
     };
 
 ServerUpgradeResponse.prototype.status = function status(code) {
-    assert.number(code, 'code');
+    assert.finite(code, 'code');
     this.statusCode = code;
     return (code);
 };
@@ -152,7 +152,7 @@ ServerUpgradeResponse.prototype.write = function write() {
 
 ServerUpgradeResponse.prototype.writeHead =
     function writeHead(statusCode, reason) {
-        assert.number(statusCode, 'statusCode');
+        assert.finite(statusCode, 'statusCode');
         assert.optionalString(reason, 'reason');
 
         this.statusCode = statusCode;
@@ -183,4 +183,4 @@ module.exports = {
     InvalidUpgradeStateError: InvalidUpgradeStateError
 };
 
-// vim: set et ts=8 sts=8 sw=8:
\ No newline at end of file
+// vim: set et ts=8 sts=8 sw=8:
diff --git a/package.json b/package.json
index 0a85850..19fb948 100644
--- a/package.json
+++ b/package.json
@@ -1,28 +1,28 @@
 {
   "name": "sdc-docker",
-  "version": "0.3.0",
+  "version": "0.4.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
     "assert-plus": "1.0.0",
     "async": "0.9.0",
-    "bunyan": "1.3.2",
     "docker-registry-client": "3.2.3",
+    "bunyan": "1.8.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "fwrule": "git+https://github.com/joyent/sdc-fwrule.git#d1174be",
     "imgmanifest": "git+https://github.com/joyent/node-imgmanifest.git#91e5d80",
-    "keyapi": "git+https://github.com/joyent/keyapi.git#c30dd2710ad2175095dc0e96479686fa774b8063",
-    "libuuid": "0.1.3",
+    "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d5",
+    "libuuid": "0.2.1",
     "lru-cache": "2.5.0",
     "lstream": "0.0.4",
-    "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
+    "moray": "git+https://github.com/joyent/node-moray.git#a65aa31",
     "once": "1.3.1",
     "openssl-wrapper": "0.2.1",
-    "restify": "git+https://github.com/joyent/node-restify.git#fd5d5b5",
-    "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#5454ae4",
+    "restify": "4.2.0",
+    "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#a3e7780",
     "sdc-clients": "10.0.1",
     "sprintf": "0.1.5",
-    "sshpk": "1.8.3",
+    "sshpk": "1.10.0",
     "strsplit": "1.0.0",
     "tape": "^4.4.0",
     "trace-event": "1.2.0",
@@ -30,15 +30,14 @@
     "ufds": "git+https://github.com/joyent/node-ufds.git#c7aa563",
     "vasync": "1.6.3",
     "verror": "1.6.0",
-    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#946d33b",
+    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#f498b46",
     "xregexp": "3.1.0"
   },
   "devDependencies": {
     "deep-equal": "~0.2.0",
     "difflet": "0.2.6",
-    "manta": "1.4.5",
+    "manta": "3.1.2",
     "semver": "5.1.0",
-    "tape": "^4.4.0",
     "tar-stream": "1.3.1",
     "xtend": "^4.0.0"
   },
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index 6f3d7b1..15c522f 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -32,8 +32,9 @@
         "port": 2020,
         "connectTimeout": 200,
         "retry": {
-            "retries": 2,
-            "minTimeout": 500
+            "retries": 1000,
+            "minTimeout": 100,
+            "minTimeout": 6000
         }
     },
     "fwapi": {
diff --git a/test/integration/api-build.test.js b/test/integration/api-build.test.js
index d037c7c..80b773b 100644
--- a/test/integration/api-build.test.js
+++ b/test/integration/api-build.test.js
@@ -16,6 +16,7 @@
  *       which are run separately (e.g. in nightly).
  */
 
+var format = require('util').format;
 var path = require('path');
 
 var tar = require('tar-stream');
@@ -118,7 +119,9 @@ test('api: build', function (tt) {
 
                 var output = result.body;
                 var hasLabel = output.indexOf('LABEL sdcdockertest=true') >= 0;
-                t.ok(hasLabel, 'output contains LABEL sdcdockertest=true');
+                t.ok(hasLabel, format(
+                    'output contains LABEL sdcdockertest=true: output=%j',
+                    output));
 
                 var hasSuccess = output.indexOf('Successfully built') >= 0;
                 t.ok(hasSuccess, 'output contains Successfully built');
@@ -178,8 +181,10 @@ test('api: build image conflicts', function (tt) {
 
     // Pull the docker.io alpine image.
     tt.test('pull docker.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName1);
-        DOCKER_ALICE.post(url, function (err, req, res, body) {
+        h.ensureImage({
+            name: imageName1,
+            user: ALICE
+        }, function (err) {
             t.error(err, 'getting docker.io alpine test image');
             t.end();
         });
@@ -187,8 +192,10 @@ test('api: build image conflicts', function (tt) {
 
     // Pull something that uses the same alpine image in a different repository.
     tt.test('pull quay.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName2);
-        DOCKER_ALICE.post(url, function (err, req) {
+        h.ensureImage({
+            name: imageName2,
+            user: ALICE
+        }, function (err) {
             t.error(err, 'getting quay.io alpine test image');
             t.end();
         });
@@ -291,9 +298,11 @@ test('api: build across multiple registries', function (tt) {
 
     // Pull the docker.io alpine image.
     tt.test('pull quay.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName);
-        DOCKER_ALICE.post(url, function (err, req, res, body) {
-            t.ifErr(err, 'getting quay.io alpine test image');
+        h.ensureImage({
+            name: imageName,
+            user: ALICE
+        }, function (err) {
+            t.error(err, 'getting docker.io alpine test image');
             t.end();
         });
     });
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index a98b14c..f0c4890 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -103,9 +103,11 @@ test('setup', function (tt) {
     });
 
     tt.test('pull nginx image', function (t) {
-        var url = '/images/create?fromImage=nginx%3Alatest';
-        DOCKER_ALICE.post(url, function (err, req, res) {
-            t.error(err, 'should be no error posting image create request');
+        h.ensureImage({
+            name: 'nginx:latest',
+            user: ALICE
+        }, function (err) {
+            t.error(err, 'should be no error pulling image');
             t.end();
         });
     });
diff --git a/test/integration/api-images.test.js b/test/integration/api-images.test.js
index bdb25f7..a27aec1 100644
--- a/test/integration/api-images.test.js
+++ b/test/integration/api-images.test.js
@@ -78,10 +78,12 @@ test('docker images', function (tt) {
 
 
     tt.test('pull ubuntu image', function (t) {
-        var url = '/images/create?fromImage=ubuntu%3Alatest';
-        DOCKER_ALICE.post(url, function (err, req, res) {
-            t.error(err, 'should be no error posting image create request');
-
+        h.ensureImage({
+            name: 'ubuntu:latest',
+            user: ALICE
+        }, function (err) {
+            console.log('ubuntu pull err: ', err);
+            t.error(err, 'should be no error pulling image');
             t.end();
         });
     });
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 57beb0e..d2a0ba0 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1150,7 +1150,9 @@ function createDockerRemoteClient(options, callback) {
         if (clientType)
             clientFactory = clientFactories[clientType];
 
-        callback(null, clientFactory.call(clientFactory, opts));
+        var client = clientFactory.call(clientFactory, opts);
+        client.user = user;
+        callback(null, client);
         return;
     });
 }
@@ -1349,6 +1351,128 @@ function buildDockerContainer(opts, callback) {
     }
 }
 
+/**
+ * Ensure the given image has been pulled, and if not then pull it down.
+ */
+function ensureImage(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.string(opts.name, 'opts.name');
+    assert.object(opts.user, 'opts.user');
+    assert.func(callback, 'callback');
+
+    var log;
+    var name = opts.name;
+
+    vasync.pipeline({ arg: {}, funcs: [
+        function getJsonClient(ctx, next) {
+            // Get the json client.
+            createDockerRemoteClient({user: opts.user},
+                    function _getJsonClient(err, client) {
+                log = client.log;
+                ctx.jsonClient = client;
+                next(err);
+            });
+        },
+
+        // Check if the image has already been pulled.
+        function checkImageExists(ctx, next) {
+            ctx.jsonClient.get('/images/' + name + '/json',
+                    function _getImage(err) {
+                if (!err) {
+                    // Image found, all is good in the world.
+                    log.debug({name: name}, 'image already exists');
+                    next(true); /* Early abort marker. */
+                    return;
+                }
+                // Allow a 404 error (image not found), other cases a failure.
+                if (err.statusCode !== 404) {
+                    log.warn({name: name}, 'image get error');
+                    next(err);
+                    return;
+                }
+                next();
+            });
+        },
+
+        function getHttpClient(ctx, next) {
+            createDockerRemoteClient({user: opts.user, clientType: 'http'},
+                    function (err, client) {
+                ctx.httpClient = client;
+                next(err);
+            });
+        },
+
+        // Image doesn't exist... pull it down.
+        function pullImage(ctx, next) {
+            log.debug({name: name}, 'ensureImage: pulling image');
+            var url = '/images/create?fromImage='
+                + encodeURIComponent(name);
+            ctx.httpClient.post(url, function _onPost(err, req) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                req.on('result', function onResponse(err2, res) {
+                    // Don't cancel the request here, wait and read the error
+                    // string in readPullResponse.
+                    ctx.err = err2;
+                    ctx.res = res;
+                    next();
+                });
+                req.on('error', function onReqError(err2) {
+                    log.error({err: err2}, 'Image pull request error');
+                    next(err2);
+                    return;
+                });
+                // We don't need to write anything to create image.
+                req.end();
+            });
+        },
+
+        function readPullResponse(ctx, next) {
+            var body = '';
+
+            ctx.res.on('data', function onResData(data) {
+                body += data.toString();
+            });
+
+            ctx.res.on('end', function onEnd() {
+                if (ctx.err) {
+                    if (!ctx.err.message) {
+                        ctx.err.message = body;
+                    }
+                    next(ctx.err);
+                    return;
+                }
+                ctx.body = body;
+                next();
+            });
+        },
+
+        // Check again to ensure the image now exists.
+        function recheckImageExists(ctx, next) {
+            ctx.jsonClient.get('/images/' + name + '/json',
+                    function _getImage(err) {
+                if (err) {
+                    log.error({name: name}, 'Error pulling image, body: %s',
+                        ctx.body);
+                    next(new Error(fmt('Failed to pull image %s', name)));
+                    return;
+                }
+                next();
+            });
+        }
+
+    ]}, function _onComplete(err) {
+        if (err === true) {
+            // Early abort - the image already exists.
+            err = null;
+        }
+        callback(err);
+    });
+}
+
+
 /**
  * Create a nginx VM fixture
  */
@@ -1407,7 +1531,6 @@ function createDockerContainer(opts, callback) {
     var dockerClient = opts.dockerClient;
     var vmapiClient = opts.vmapiClient;
     var t = opts.test;
-    var log = dockerClient.log;
     var response = {};
     var apiVersion = opts.apiVersion || ('v' + constants.API_VERSION);
 
@@ -1430,28 +1553,10 @@ function createDockerContainer(opts, callback) {
         function (next) {
             // There is a dependency here, in order to create a nginx container,
             // the nginx image must first be downloaded.
-            log.debug('Checking for nginx docker image');
-            dockerClient.get('/images/json',
-                    function (err, req, res, images) {
-
-                t.error(err, 'check for nginx image - should be no error');
-
-                if (images.filter(function (image) {
-                    return -1 !== image.RepoTags.indexOf('nginx:latest');
-                }).length === 0) {
-                    // Urgh, it doesn't exist... go get it then.
-                    log.debug('Fetching nginx image');
-                    var url = '/images/create?fromImage=nginx%3Alatest';
-
-                    dockerClient.post(url, function (err2, req2, res2) {
-                        t.error(err2, 'pull nginx image - should be no error');
-                        next(null);
-                    });
-
-                } else {
-                    next(null);
-                }
-            });
+            ensureImage({
+                name: 'nginx:latest',
+                user: dockerClient.user
+            }, next);
         },
 
         function (next) {
@@ -1502,9 +1607,11 @@ function createDockerContainer(opts, callback) {
             });
         }
     ], function (err) {
-        if (!opts.expectedError) {
-            t.error(err);
+        if (opts.expectedError) {
+            common.expApiErr(t, err, opts.expectedErr, callback);
+            return;
         }
+        t.error(err);
 
         callback(err, response);
     });
@@ -1708,6 +1815,7 @@ module.exports = {
     createVmapiClient: createVmapiClient,
     createNapiClient: createNapiClient,
     dockerIdToUuid: sdcCommon.dockerIdToUuid,
+    ensureImage: ensureImage,
     initDockerEnv: initDockerEnv,
     listContainers: listContainers,
     createDockerContainer: createDockerContainer,
diff --git a/test/runtest.common b/test/runtest.common
index ddd0cf8..70aa5bf 100644
--- a/test/runtest.common
+++ b/test/runtest.common
@@ -53,7 +53,7 @@ export NAPI_URL="http://$(vmadm lookup -j alias=napi0 | json 0.nics \
 # 2. 'DOCKER_CLI_VERSIONS' defines the 'docker' CLI versions against which we
 #    run the "test/integration/cli-*.test.js" files. This is overridable, e.g.:
 #       DOCKER_CLI_VERSIONS=1.6.2 .../runtests
-export DOCKER_AVAILABLE_CLI_VERSIONS="1.12.0-rc2 1.11.1 1.10.3 1.9.1 1.8.3 1.7.1 1.6.2"
+export DOCKER_AVAILABLE_CLI_VERSIONS="1.12.2 1.11.1 1.10.3 1.9.1 1.8.3 1.7.1 1.6.2"
 if [[ -z "$DOCKER_CLI_VERSIONS" ]]; then
     export DOCKER_CLI_VERSIONS="$DOCKER_AVAILABLE_CLI_VERSIONS"
 fi
diff --git a/test/unit/affinity.test.js b/test/unit/affinity.test.js
index f29488a..28c1662 100644
--- a/test/unit/affinity.test.js
+++ b/test/unit/affinity.test.js
@@ -26,7 +26,7 @@ var localityFromContainer = require('../../lib/backends/sdc/affinity')
 
 var log = bunyan.createLogger({
     name: 'affinity.test',
-    level: process.env.TRACE ? 'trace' : 'off',
+    level: process.env.TRACE ? 'trace' : bunyan.FATAL + 1 /* off */,
     req_id: '655b2da4-3165-9549-8626-531ef9336e1e'
 });
 
diff --git a/tools/get-docker-clients.sh b/tools/get-docker-clients.sh
index 9b70172..056ae18 100755
--- a/tools/get-docker-clients.sh
+++ b/tools/get-docker-clients.sh
@@ -43,7 +43,7 @@ set -o nounset
 
 # Note: Should keep this in sync with "DOCKER_AVAILABLE_CLI_VERIONS"
 # https://github.com/joyent/sdc-docker/blob/master/test/runtest.common#L54
-DEFAULT_VERS="1.12.0-rc2 1.11.1 1.10.3 1.9.1 1.8.3 1.7.1 1.6.2"
+DEFAULT_VERS="1.12.2 1.11.1 1.10.3 1.9.1 1.8.3 1.7.1 1.6.2"
 
 WRKDIR=/var/tmp/tmp.get-docker-clients
 DSTDIR=$(pwd)
diff --git a/tools/sdc-docker-setup.sh b/tools/sdc-docker-setup.sh
index 032ab69..406a557 100755
--- a/tools/sdc-docker-setup.sh
+++ b/tools/sdc-docker-setup.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright 2016 Joyent, Inc.
 #
 
 #
@@ -509,7 +509,18 @@ caPath=$certDir/ca.pem
 
 mkdir -p $(dirname $keyPath)
 openssl rsa -in $sshPrivKeyPath -outform pem >$keyPath 2>/dev/null
-openssl req -new -key $keyPath -out $csrPath -subj "/CN=$account" >/dev/null 2>/dev/null
+
+certSubject=
+if [[ -n "$(which uname 2>/dev/null)" && "$(uname)" == MINGW* ]]; then
+    # On the mingw32 shell on Windows we need to work around mingw32 converting
+    # args that look like Windows paths.
+    # See <http://stackoverflow.com/a/31990313> for details.
+    certSubject="//CN=$account"
+else
+    certSubject="/CN=$account"
+fi
+openssl req -new -key $keyPath -out $csrPath -subj "$certSubject" >/dev/null 2>/dev/null
+
 # TODO: expiry?
 openssl x509 -req -days 365 -in $csrPath -signkey $keyPath -out $certPath >/dev/null 2>/dev/null
 rm $csrPath    # The signing request has been used - remove it.
-- 
2.21.0

