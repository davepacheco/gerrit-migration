commit 5c538cf658d22737b9da81ca735ef48efe2fb76f (refs/changes/62/4862/12)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2018-10-22T22:03:06+00:00 (12 months ago)
    
    MANTA-3943 add 'gc' mode to manta-adm

diff --git a/cmd/manta-adm.js b/cmd/manta-adm.js
index 5b004aa..352dab7 100755
--- a/cmd/manta-adm.js
+++ b/cmd/manta-adm.js
@@ -256,6 +256,380 @@ MantaAdm.prototype.do_cn.options = [
     }
 ];
 
+function MantaAdmGc(parent)
+{
+	this.magc_parent = parent;
+	cmdln.Cmdln.call(this, {
+	    'name': parent.name + ' gc',
+	    'desc': 'Configure automatic garbage-collection.'
+	});
+}
+util.inherits(MantaAdmGc, cmdln.Cmdln);
+
+MantaAdm.prototype.do_gc = MantaAdmGc;
+
+MantaAdmGc.prototype.do_show = function (subcmd, opts, args, callback)
+{
+	var self = this;
+
+	if (args.length > 1) {
+		callback(new Error('unexpected arguments'));
+		return;
+	}
+
+	if (opts.all_metadata === undefined) {
+		opts.all_metadata = false;
+	}
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm, func;
+		adm = self.magc_parent.madm_adm;
+		func = adm.dumpDeployedInstanceMetadataJson;
+
+		adm.fetchDeployed(function (err) {
+			if (err)
+				fatal(err.message);
+
+			func.call(adm, process.stdout, {
+			    'doall': opts.all,
+			    'svcname': 'garbage-collector',
+			    'all_metadata': opts.all_metadata
+			});
+			self.magc_parent.finiAdm();
+		});
+	});
+};
+
+MantaAdmGc.prototype.do_show.help =
+    'Output a JSON object mapping of metadata shards to ' +
+    'garbage-collectors.\n\n' +
+    'Usage:\n\n' +
+    '    manta-adm gc show\n\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_show.options = [ {
+    'names': [ 'all', 'a' ],
+    'type': 'bool',
+    'help': 'Show results from all datacenters, rather than just ' +
+	    'the local one'
+}, {
+    'names': [ 'all-metadata', 'A' ],
+    'type': 'bool',
+    'help': 'Toggle whether to include all SAPI metadata fields.'
+} ];
+
+MantaAdmGc.prototype.do_update = function (subcmd, opts, args, callback)
+{
+	var self, adm;
+	var filename;
+
+	self = this;
+
+	if (args.length === 0) {
+		callback(new Error(
+		    'expected filename for desired configuration'));
+		return;
+	}
+
+	if (args.length > 1) {
+		callback(new Error('unexpected arguments'));
+		return;
+	}
+
+	filename = args[0];
+
+	vasync.pipeline({
+		funcs: [
+			function initAdm(_, stepcb) {
+				assertplus.ok(opts !== null);
+				self.magc_parent.initAdm(opts, function () {
+					adm = self.magc_parent.madm_adm;
+					stepcb();
+				});
+			},
+			function fetchDeployed(_, stepcb) {
+				adm.fetchDeployed(stepcb);
+			},
+			function readConfig(_, stepcb) {
+				adm.readInstanceMetadataConfigFromFile(
+				    filename, stepcb);
+			},
+			function execUpdate(_, stepcb) {
+				adm.updateDeployedInstanceMetadata(stepcb);
+			}
+		]
+	}, function (err) {
+		if (err)
+			fatal(err.message);
+		self.magc_parent.finiAdm();
+		callback();
+	});
+};
+
+MantaAdmGc.prototype.do_update.help =
+    'Update the mapping of index shards to garbage-collectors.\n\n' +
+    'Usage:\n\n' +
+    '    manta-adm gc update [OPTIONS] CONFIG-FILE\n\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_update.options = [];
+
+MantaAdmGc.prototype.do_gen_shard_assignment =
+function (subcmd, opts, args, callback)
+{
+	var self = this;
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm = self.magc_parent.madm_adm;
+		var func = adm.genGcMetadataConfig;
+		var options = {
+		    outstream: process.stdout
+		};
+
+		adm.fetchDeployed(function (err) {
+			if (err)
+				fatal(err.message);
+
+			func.call(adm, options, function (ferr) {
+				if (ferr)
+					fatal(ferr.message);
+
+				self.magc_parent.finiAdm();
+				callback();
+			});
+		});
+	});
+};
+
+MantaAdmGc.prototype.do_gen_shard_assignment.help =
+    'Generate an assignment of index shards to deployed ' +
+    'garbage-collector instances.\n\n' +
+    '    manta-adm gc gen-shard-assignment\n\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_gen_shard_assignment.options = [];
+
+MantaAdmGc.prototype.do_genconfig = function (subcmd, opts, args, callback)
+{
+	var num_collectors, max_cns;
+	var avoid_svcs;
+	var imageuuid;
+	var self;
+
+	if (args.length !== 2) {
+		callback(new Error('missing arguments: IMAGE_UUID ' +
+		    'NCOLLECTORS'));
+		return;
+	}
+
+	self = this;
+	imageuuid = args[0];
+
+	num_collectors = jsprim.parseInteger(args[1], { base: 10 });
+	if (num_collectors instanceof Error) {
+		callback(new VError(num_collectors, 'unable to generate ' +
+		    'garbage-collector deployment config'));
+		return;
+	}
+
+	max_cns = opts.max_cns;
+	avoid_svcs = (opts.ignore_criteria) ? [] : (opts.avoid_svcs || [
+	    'loadbalancer',
+	    'nameservice',
+	    'storage'
+	]);
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm = self.magc_parent.madm_adm;
+		var func = adm.layerServiceOnDeployedConfig;
+
+		adm.fetchDeployed(function (err) {
+			if (err)
+				fatal(err.message);
+
+			func.call(adm, {
+			    avoid_svcs: avoid_svcs,
+			    image_uuid: imageuuid,
+			    max_cns: max_cns,
+			    num_instances: num_collectors,
+			    outstream: process.stdout,
+			    svcname: 'garbage-collector'
+			});
+
+			self.magc_parent.finiAdm();
+		});
+	});
+};
+
+MantaAdmGc.prototype.do_genconfig.help =
+    'Layer a number of garbage-collector instances on top of an existing ' +
+    'Manta deployment.\n\n' +
+    '    manta-adm gc genconfig [OPTIONS] IMAGE_UUID NCOLLECTORS\n\n' +
+    '{{options}}';
+
+
+MantaAdmGc.prototype.do_genconfig.options = [ {
+    'names': [ 'max-cns', 'm' ],
+    'type': 'integer',
+    'helpArg': 'MAX_CNS',
+    'help': 'The number of CNs on which to distribute collector instances. ' +
+	    'If this option is not specified the collector instances will '  +
+	    'be distributed on as many viable CNs as possible'
+},
+{
+    'names': [ 'avoid-svcs', 'a' ],
+    'type': 'arrayOfString',
+    'help': 'Avoid co-locating garbage-collector instances with the given '  +
+	    'service. Specify multiple services by repeating this option: '  +
+	    '\'-a loadbalancer -a nameservice\'. By default, this command '  +
+	    'avoids co-locating services with loadbalancer and nameservice ' +
+	    'instances.'
+},
+{
+    'names': [ 'ignore-criteria', 'i' ],
+    'type': 'bool',
+    'help': 'Ignore service co-location constraints, which may not be ' +
+	    'satisfiable in all deployments.'
+} ];
+
+MantaAdmGc.prototype.do_disable_snaplinks =
+function (subcmd, opts, args, callback) {
+	var self;
+	var account;
+
+	if (args.length !== 1) {
+		callback(new Error('missing arguments: ACCOUNT-LOGIN'));
+		return;
+	}
+
+	self = this;
+	account = args[0];
+
+	if (account === 'poseidon') {
+		callback(new Error('cannot disable snaplinks for poseidon'));
+		return;
+	}
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm = self.magc_parent.madm_adm;
+
+		adm.fetchDeployed(function (err) {
+			if (err) {
+				callback(err);
+				return;
+			}
+			var options = {
+				account: account
+			};
+			adm.disableSnaplinks(options, function (disableErr) {
+				self.magc_parent.finiAdm();
+				callback(disableErr);
+			});
+		});
+	});
+};
+
+MantaAdmGc.prototype.do_disable_snaplinks.help =
+    'Disable snaplinks for a given user account.\n\n' +
+    '    manta-adm gc disable-snaplinks [ACCOUNT-LOGIN]\n\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_disable_snaplinks.options = [];
+
+MantaAdmGc.prototype.do_enable_snaplinks =
+function (subcmd, opts, args, callback) {
+	var self;
+	var account;
+
+	if (args.length != 1) {
+		callback(new Error('missing arguments: ACCOUNT-LOGIN'));
+		return;
+	}
+
+	self = this;
+	account = args[0];
+
+	if (account === 'poseidon') {
+		callback(new Error('snaplinks cannot be toggled for poseidon'));
+		return;
+	}
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm = self.magc_parent.madm_adm;
+
+		adm.fetchDeployed(function (err) {
+			if (err) {
+				callback(err);
+				return;
+			}
+			var options = {
+				account: account
+			};
+			adm.enableSnaplinks(options, function (enableErr) {
+				self.magc_parent.finiAdm();
+				callback(enableErr);
+			});
+		});
+
+	});
+};
+
+MantaAdmGc.prototype.do_enable_snaplinks.help =
+    'Enable snaplinks for a given user account.\n\n' +
+    '    manta-adm gc enable-snaplinks [ACCOUNT-LOGIN]\n\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_enable_snaplinks.options = [];
+
+MantaAdmGc.prototype.do_accounts =
+function (subcmd, opts, args, callback) {
+	var self, options;
+
+	self = this;
+	options = {};
+
+	if (args.length != 0) {
+		callback(new Error('unexpected arguments'));
+		return;
+	}
+
+	options = listPrepareArgs(opts, madm.gcColumnNames());
+	if (options instanceof Error) {
+		callback(options);
+		return;
+	}
+	options.stream = process.stdout;
+
+	self.magc_parent.initAdm(opts, function () {
+		var adm = self.magc_parent.madm_adm;
+
+		adm.fetchDeployed(function (err) {
+			if (err)
+				fatal(err.message);
+
+			adm.dumpSnaplinkDisabledAccounts(
+			    options, function (outputErr) {
+				if (err) {
+					callback(outputErr);
+					return;
+				}
+				self.magc_parent.finiAdm();
+				callback();
+			});
+		});
+	});
+};
+
+MantaAdmGc.prototype.do_accounts.help =
+    'List snaplink-disabled accounts.\n\n' +
+    '    manta-adm gc accounts [OPTIONS]\n' +
+    '{{options}}';
+
+MantaAdmGc.prototype.do_accounts.options = [
+    maCommonOptions.omitHeader,
+    maCommonOptions.columns
+];
+
 MantaAdm.prototype.do_genconfig = function (subcmd, opts, args, callback)
 {
 	var self = this;
diff --git a/config/services/garbage-collector/service.json b/config/services/garbage-collector/service.json
index c67c992..cda133b 100644
--- a/config/services/garbage-collector/service.json
+++ b/config/services/garbage-collector/service.json
@@ -13,9 +13,14 @@
 		"GC_RECORD_READ_SORT_ATTR": "_mtime",
 		"GC_RECORD_DELETE_BATCH_SIZE": 3500,
 		"GC_RECORD_DELETE_DELAY": 500,
-		"GC_SHARD_NUM_LO": 0,
-		"GC_SHARD_NUM_HI": 0,
 		"GC_CACHE_CAPACITY": 1000000000000,
-		"GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY": 2
+		"GC_CONCURRENCY": 2,
+		"GC_ASSIGNED_SHARDS": [],
+		"GC_ASSIGNED_BUCKETS": [
+			{
+				"name": "manta_fastdelete_queue",
+				"last": true
+			}
+		]
 	}
 }
diff --git a/config/services/garbage-collector/service.json.coal b/config/services/garbage-collector/service.json.coal
index 6e69706..6a97050 100644
--- a/config/services/garbage-collector/service.json.coal
+++ b/config/services/garbage-collector/service.json.coal
@@ -13,9 +13,14 @@
 		"GC_RECORD_READ_SORT_ATTR": "_mtime",
 		"GC_RECORD_DELETE_BATCH_SIZE": 50,
 		"GC_RECORD_DELETE_DELAY": 1000,
-		"GC_SHARD_NUM_LO": 0,
-		"GC_SHARD_NUM_HI": 0,
 		"GC_CACHE_CAPACITY": 1000000,
-		"GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY": 1
+		"GC_CONCURRENCY": 1,
+		"GC_ASSIGNED_SHARDS": [],
+		"GC_ASSIGNED_BUCKETS": [
+			{
+				"name": "manta_fastdelete_queue",
+				"last": true
+			}
+		]
 	}
 }
diff --git a/config/services/garbage-collector/service.json.lab b/config/services/garbage-collector/service.json.lab
index aea0169..1c7859d 100644
--- a/config/services/garbage-collector/service.json.lab
+++ b/config/services/garbage-collector/service.json.lab
@@ -13,9 +13,14 @@
 		"GC_RECORD_READ_SORT_ATTR": "_mtime",
 		"GC_RECORD_DELETE_BATCH_SIZE": 50,
 		"GC_RECORD_DELETE_DELAY": 1000,
-		"GC_SHARD_NUM_LO": 0,
-		"GC_SHARD_NUM_HI": 0,
 		"GC_CACHE_CAPACITY": 1000000,
-		"GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY": 2
+		"GC_CONCURRENCY": 2,
+		"GC_ASSIGNED_SHARDS": [],
+		"GC_ASSIGNED_BUCKETS": [
+			{
+				"name": "manta_fastdelete_queue",
+				"last": true
+			}
+		]
 	}
 }
diff --git a/config/services/garbage-collector/service.json.production b/config/services/garbage-collector/service.json.production
index c67c992..cda133b 100644
--- a/config/services/garbage-collector/service.json.production
+++ b/config/services/garbage-collector/service.json.production
@@ -13,9 +13,14 @@
 		"GC_RECORD_READ_SORT_ATTR": "_mtime",
 		"GC_RECORD_DELETE_BATCH_SIZE": 3500,
 		"GC_RECORD_DELETE_DELAY": 500,
-		"GC_SHARD_NUM_LO": 0,
-		"GC_SHARD_NUM_HI": 0,
 		"GC_CACHE_CAPACITY": 1000000000000,
-		"GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY": 2
+		"GC_CONCURRENCY": 2,
+		"GC_ASSIGNED_SHARDS": [],
+		"GC_ASSIGNED_BUCKETS": [
+			{
+				"name": "manta_fastdelete_queue",
+				"last": true
+			}
+		]
 	}
 }
diff --git a/lib/adm.js b/lib/adm.js
index 3165112..af87fe7 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -42,6 +42,7 @@ exports.cnColumnNames = cnColumnNames;
 exports.probeGroupColumnNames = probeGroupColumnNames;
 exports.maintWindowColumnNames = maintWindowColumnNames;
 exports.zkColumnNames = zkColumnNames;
+exports.gcColumnNames = gcColumnNames;
 exports.MantaAdm = maAdm;
 
 var maMaxConcurrency = 50; /* concurrent requests to SDC services */
@@ -322,6 +323,22 @@ function zkColumnNames()
 	return (Object.keys(maZkColumns));
 }
 
+var maGcColumns = {
+    'uuid': {
+	'label': 'ACCOUNT UUID',
+	'width': 40
+    },
+    'login': {
+	'label': 'LOGIN',
+	'width': 12
+    }
+};
+
+function gcColumnNames()
+{
+	return (Object.keys(maGcColumns));
+}
+
 /*
  * Library interface for manta-adm functionality.  This object provides methods
  * for discovering deployed Manta zones and updating the deployment to match a
@@ -418,6 +435,13 @@ function maAdm(log)
 	 */
 	this.ma_instances_local_bysvcname = null;
 
+	/*
+	 * Mapping from SAPI instance uuid to objects containing metadata fields
+	 * that the instance should be updated with. If the instance already has
+	 * those fields, they will be updated with the new values.
+	 */
+	this.ma_instance_metadata_updates = null;
+
 	/*
 	 * CNAPI server objects, indexed by server_uuid.
 	 */
@@ -2386,6 +2410,352 @@ maAdm.prototype.genconfigFromFile = function (args, callback)
 	}));
 };
 
+maAdm.prototype.disableSnaplinks = function (args, callback) {
+	var self;
+	var account, uuid;
+	var disabledAccounts;
+
+	assertplus.string(args.account, 'args.account');
+
+	self = this;
+	account = args.account;
+
+	self.ma_sdc.UFDS.getUser(account, function (err, user) {
+		if (err) {
+			callback(new VError(err, 'unable to disable ' +
+			    'snaplinks for user account ' + account));
+			return;
+		}
+		uuid = user.uuid;
+		disabledAccounts = self.ma_app.metadata[
+		    'ACCOUNTS_SNAPLINKS_DISABLED'] || [];
+
+		for (var i = 0; i < disabledAccounts.length; i++) {
+			var disabledAccount = disabledAccounts[i];
+			if (disabledAccount.uuid === uuid) {
+				callback(new Error('snaplinks ' +
+				    'already disabled for ' + account));
+				return;
+			}
+			delete (disabledAccount.last);
+		}
+
+		disabledAccounts.push({
+		    uuid: uuid,
+		    last: true
+		});
+
+		self.ma_sdc.SAPI.updateApplication(self.ma_app.uuid, {
+		    metadata: {
+		        'ACCOUNTS_SNAPLINKS_DISABLED': disabledAccounts
+		    }
+		}, function (updateErr) {
+			if (updateErr) {
+				callback(new VError(updateErr, 'unable ' +
+				    'to disable snaplinks for user account ' +
+				    uuid));
+				return;
+			}
+			callback();
+		});
+	});
+};
+
+maAdm.prototype.enableSnaplinks = function (args, callback) {
+	var disabledAccounts, newDisabledAccounts;
+	var account, uuid;
+	var found;
+	var self;
+
+	assertplus.string(args.account, 'args.account');
+
+	self = this;
+	account = args.account;
+	newDisabledAccounts = [];
+	found = false;
+
+	self.ma_sdc.UFDS.getUser(account, function (err, user) {
+		if (err) {
+			callback(new VError(err, 'Unable to enable snaplinks ' +
+			    'for user account ' + uuid));
+			return;
+		}
+		uuid = user.uuid;
+		disabledAccounts = self.ma_app.metadata[
+		    'ACCOUNTS_SNAPLINKS_DISABLED'] || [];
+
+		for (var i = 0; i < disabledAccounts.length; i++) {
+			var disabledAccount = disabledAccounts[i];
+			delete (disabledAccount.last);
+
+			if (disabledAccount.uuid === uuid) {
+				found = true;
+			} else {
+				newDisabledAccounts.push(disabledAccount);
+			}
+		}
+
+		if (!found) {
+			callback(new VError('snaplinks already enabled for ' +
+			    'account ' + account));
+			return;
+		}
+
+		if (newDisabledAccounts.length > 0) {
+			newDisabledAccounts[
+			    newDisabledAccounts.length - 1].last = true;
+		}
+
+		self.ma_sdc.SAPI.updateApplication(self.ma_app.uuid, {
+		    metadata: {
+		        'ACCOUNTS_SNAPLINKS_DISABLED': newDisabledAccounts
+		    }
+		}, function (updateErr) {
+			if (updateErr) {
+				callback(new VError(updateErr, 'unable ' +
+				    'to disable snaplinks for user account ' +
+				    uuid));
+				return;
+			}
+			callback();
+		});
+	});
+};
+
+maAdm.prototype.dumpSnaplinkDisabledAccounts = function (args, callback) {
+	var self;
+	var rows;
+
+	assertplus.object(args.stream, 'args.stream');
+	assertplus.optionalArrayOfString(args.columns, 'args.columns');
+	assertplus.optionalBool(args.omitHeader, 'args.omitHeader');
+
+	self = this;
+	rows = [];
+
+	vasync.forEachPipeline({
+		inputs: self.ma_app.metadata['ACCOUNTS_SNAPLINKS_DISABLED'],
+		func: function (account, next) {
+			self.ma_sdc.UFDS.getUser(account.uuid,
+			    function (err, user) {
+				if (err) {
+					next(err);
+					return;
+				}
+				rows.push([user.uuid, user.login]);
+				next();
+			});
+		}
+	}, function (err) {
+		if (err) {
+			callback(new VError(err, 'Error listing snaplink ' +
+			    'disabled accounts'));
+			return;
+		}
+		self.doList({
+			'stream': args.stream,
+			'columnsSelected': args.columns,
+			'columnsDefault': [ 'uuid', 'login' ],
+			'columnMetadata': maGcColumns,
+			'omitHeader': args.omitHeader,
+			'rows': rows
+		});
+		callback();
+	});
+};
+
+/*
+ * [public] Distribute index shards to garbage-collector instances as evenly as
+ * possible.
+ */
+maAdm.prototype.genGcMetadataConfig = function (args, callback)
+{
+	var self, opts, outstream;
+	var index_shards, gc_instuuids;
+	var assignedShards;
+	var gc_idx;
+
+	assignedShards = 'GC_ASSIGNED_SHARDS';
+
+	assertplus.object(args.outstream, 'args.outstream');
+
+	self = this;
+	index_shards = self.ma_app.metadata['INDEX_MORAY_SHARDS'];
+	opts = {
+	    svcname: 'garbage-collector',
+	    all_metadata: args.all_metadata || false
+	};
+	outstream = args.outstream;
+
+	self.getDeployedInstanceMetadataJson(opts, function (gc_md) {
+		var gc_instuuid;
+		var i;
+
+		gc_instuuids = Object.keys(gc_md);
+		gc_idx = 0;
+
+		/*
+		 * Clear the previous mapping.
+		 */
+		for (i = 0; i < gc_instuuids.length; i++) {
+			gc_instuuid = gc_instuuids[i];
+			gc_md[gc_instuuid][assignedShards] = [];
+		}
+
+		/*
+		 * Distribute index shards evenly across all garbage-collectors
+		 * in the DC.
+		 */
+		for (i = 0; i < index_shards.length; i++) {
+			var copy = jsprim.deepCopy(index_shards[i]);
+			delete (copy.last);
+
+			gc_md[gc_instuuids[gc_idx]][assignedShards].push(copy);
+			gc_idx = (gc_idx + 1) % gc_instuuids.length;
+		}
+
+		/*
+		 * Add the "last" field to the final element in each array. This
+		 * field is required by mustache.
+		 */
+		for (i = 0; i < gc_instuuids.length; i++) {
+			gc_instuuid = gc_instuuids[i];
+			var gc_shards = gc_md[gc_instuuid][assignedShards];
+			gc_shards[gc_shards.length - 1].last = true;
+		}
+
+		outstream.write(JSON.stringify(gc_md, null, '    ') + '\n');
+		callback();
+	});
+};
+
+/*
+ * [public] This method generates a Manta deployment layout that includes new
+ * instances of a service. The new instances are layered on the existing
+ * configuration in a minimally disruptive fashion. That is, they are added to
+ * CNs that (a) contain the fewest number of deployed instances and (b) do not
+ * have instances of any of the services listed in 'avoid_svcs'.
+ *
+ * The motivation for (b) is that it may be preferable to avoid adding load to
+ * CNs that run system-critical services like 'nameservice' or 'loadbalancer'.
+ */
+maAdm.prototype.layerServiceOnDeployedConfig = function (args)
+{
+	var self, instances_per_cn;
+	var selected_cns;
+
+	assertplus.array(args.avoid_svcs, 'args.avoid_svcs');
+	assertplus.string(args.image_uuid, 'args.image_uuid');
+	assertplus.optionalNumber(args.max_cns, 'args.max_cns');
+	assertplus.number(args.num_instances, 'args.num_instances');
+	assertplus.object(args.outstream, 'args.outstream');
+	assertplus.string(args.svcname, 'args.svcname');
+
+	self = this;
+	instances_per_cn = {};
+	selected_cns = [];
+
+	/*
+	 * Retrieve the current Manta deployment configuration.
+	 */
+	var cfg = self.getDeployedConfigByServiceJson();
+
+	/*
+	 * Count the total number of instances deployed on each CN.
+	 */
+	Object.keys(cfg).forEach(function (cnuuid) {
+		var cn_cfg = cfg[cnuuid];
+		var total = 0;
+		var svcs_in_cn = Object.keys(cn_cfg);
+
+		svcs_in_cn.forEach(function (svcname) {
+			var svc_cfg = cn_cfg[svcname];
+			var images_in_shard;
+
+			/*
+			 * If the service is sharded, count the instances
+			 * deployed in each shard.
+			 */
+			if (svcs.serviceIsSharded(svcname)) {
+				var shards_in_svc = Object.keys(svc_cfg);
+				shards_in_svc.forEach(function (shard) {
+					var sh_cfg = svc_cfg[shard];
+					images_in_shard =
+					    Object.keys(svc_cfg[shard]);
+
+					images_in_shard.forEach(
+					    function (imageuuid) {
+						total += sh_cfg[imageuuid];
+					});
+				});
+				return;
+			}
+
+			images_in_shard = Object.keys(svc_cfg);
+			images_in_shard.forEach(function (imageuuid) {
+				total += svc_cfg[imageuuid];
+			});
+
+			instances_per_cn[cnuuid] = total;
+		});
+	});
+
+	/*
+	 * Filter list of CNs, removing those that have instances of a service
+	 * the caller has asked to avoid.
+	 */
+	var viable_cns = Object.keys(instances_per_cn).filter(
+	    function (cnuuid) {
+		var viable = true;
+
+		for (var j = 0; j < args.avoid_svcs.length; j++) {
+			if (cfg[cnuuid].hasOwnProperty(args.avoid_svcs[j])) {
+				viable = false;
+			}
+		}
+
+		return (viable);
+	});
+
+	/*
+	 * Sort the list of CNs that meet the caller criteria by the total
+	 * number of instance deployed on each.
+	 */
+	selected_cns = viable_cns.sort(function (cn1, cn2) {
+		if (instances_per_cn[cn1] > instances_per_cn[cn2]) {
+			return (1);
+		}
+		if (instances_per_cn[cn1] < instances_per_cn[cn2]) {
+			return (-1);
+		}
+		return (0);
+	});
+
+	if (selected_cns.length === 0) {
+		console.error('no CNs meet deployment criteria');
+		return;
+	}
+
+	if (args.max_cns) {
+		selected_cns = selected_cns.slice(0, args.max_cns);
+	}
+
+	for (var i = 0; i < args.num_instances; i++) {
+		var next_cn = selected_cns[i % selected_cns.length];
+
+		if (!cfg[next_cn].hasOwnProperty(args.svcname)) {
+			cfg[next_cn][args.svcname] = {};
+		}
+		if (!cfg[next_cn][args.svcname][args.image_uuid]) {
+			cfg[next_cn][args.svcname][args.image_uuid] = 0;
+		}
+
+		cfg[next_cn][args.svcname][args.image_uuid]++;
+	}
+
+	args.outstream.write(JSON.stringify(cfg, null, '    ') + '\n');
+};
+
 /*
  * [public] Iterate zones matching a filter, invoking "callback" synchronously
  * for each one.  Returns an error if the filter was invalid.
@@ -2672,9 +3042,103 @@ maAdm.prototype.dumpDeployedConfigByService = function (sout, conf)
 	});
 };
 
-maAdm.prototype.dumpDeployedConfigByServiceJson = function (sout, conf)
+maAdm.prototype.getDeployedInstanceMetadataJson = function (args, callback)
+{
+	var self, rv;
+	var instuuids, svc_objs;
+	var all_metadata;
+
+	assertplus.object(args, 'args');
+	assertplus.string(args.svcname, 'args.svcname');
+	assertplus.bool(args.all_metadata, 'args.all_metadata');
+
+	self = this;
+	rv = {};
+	all_metadata = args.all_metadata;
+	svc_objs = Object.keys(self.ma_services).filter(function (svcuuid) {
+		return (self.ma_services[svcuuid].name === args.svcname);
+	});
+	if (svc_objs.length === 0) {
+		callback();
+		return;
+	}
+	instuuids = Object.keys(self.ma_instance_info).filter(
+		function (uuid) {
+		return (self.ma_instance_info[uuid].inst_svcname ===
+		    args.svcname);
+	});
+
+	var ignore_fields = (all_metadata) ? [] :
+	    common.INSTANCE_METADATA_DEFAULTS;
+
+	for (var i = 0; i < instuuids.length; i++) {
+		var instuuid = instuuids[i];
+		var inst_metadata = self.ma_instance_info[
+		    instuuid].inst_metadata;
+		var keys = Object.keys(inst_metadata);
+
+		rv[instuuid] = {};
+
+		for (var j = 0; j < keys.length; j++) {
+			var key = keys[j];
+			if (ignore_fields.indexOf(key) !== -1) {
+				continue;
+			}
+			rv[instuuid][key] = inst_metadata[key];
+		}
+	}
+
+	callback(rv);
+};
+
+maAdm.prototype.dumpDeployedInstanceMetadataJson = function (sout, conf)
+{
+	var self;
+
+	assertplus.optionalBool(conf.all_metadata, 'conf.all_metadata');
+
+	self = this;
+
+	if (conf.all_metadata === undefined) {
+		conf.all_metadata = false;
+	}
+
+	self.getDeployedInstanceMetadataJson(conf, function (rv) {
+		sout.write(JSON.stringify(rv, null, '    ') + '\n');
+	});
+
+};
+
+maAdm.prototype.updateDeployedInstanceMetadata = function (callback)
+{
+	var self;
+
+	self = this;
+
+	vasync.forEachPipeline({
+		inputs: Object.keys(self.ma_instance_metadata_updates),
+		func: function (instuuid, next) {
+			var updates = self.ma_instance_metadata_updates[
+			    instuuid];
+			self.ma_sdc.SAPI.updateInstance(instuuid, {
+			    metadata: updates
+			}, next);
+		}
+	}, function (err) {
+		if (err) {
+			callback(new VError('error while updating ' +
+			    'instance metadata', err));
+			return;
+		}
+		callback();
+	});
+};
+
+maAdm.prototype.getDeployedConfigByServiceJson = function ()
 {
-	var self, svcuuids, rv;
+	var self;
+	var rv;
+	var svcuuids;
 
 	self = this;
 	svcuuids = Object.keys(this.ma_config_bycn).sort(function (s1, s2) {
@@ -2699,6 +3163,13 @@ maAdm.prototype.dumpDeployedConfigByServiceJson = function (sout, conf)
 		}
 	});
 
+	return (rv);
+};
+
+maAdm.prototype.dumpDeployedConfigByServiceJson = function (sout, conf)
+{
+	var rv = this.getDeployedConfigByServiceJson();
+
 	sout.write(JSON.stringify(rv, null, '    ') + '\n');
 };
 
@@ -3078,6 +3549,55 @@ maAdm.prototype.readConfigRaw = function (contents)
 	return (null);
 };
 
+maAdm.prototype.readInstanceMetadataConfigFromFile =
+function (filename, callback)
+{
+	var self = this;
+	fs.readFile(filename, function (err, contents) {
+		if (err) {
+			callback(new VError(err, 'reading "%s":', filename));
+			return;
+		}
+
+		err = self.readInstanceMetadataConfigRaw(
+		    contents.toString('utf8'));
+		if (err)
+			err = new VError(err, 'processing "%s"', filename);
+		callback(err);
+	});
+};
+
+maAdm.prototype.readInstanceMetadataConfigRaw = function (contents)
+{
+	var self, instuuid, prev_svcname, next_svcname, json;
+
+	self = this;
+
+	try {
+		json = JSON.parse(contents);
+	} catch (ex) {
+		return (ex);
+	}
+
+	for (instuuid in json) {
+		prev_svcname = next_svcname;
+		if (!self.ma_instance_info.hasOwnProperty(instuuid)) {
+			return (new VError('unknown instance "%s"', instuuid));
+		}
+		next_svcname = self.ma_instance_info[instuuid].inst_svcname;
+
+		if (prev_svcname !== undefined &&
+		    prev_svcname !== next_svcname) {
+			return (new VError('instances of mulitple distinct ' +
+				'services cannot be updated at once'));
+		}
+	}
+
+	self.ma_instance_metadata_updates = json;
+
+	return (null);
+};
+
 /*
  * Assuming we've already loaded the current deployed configuration and the
  * user-specified configuration, generate a plan to make reality match what the
diff --git a/lib/common.js b/lib/common.js
index 6236c61..e923e89 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -46,6 +46,18 @@ exports.HASH_RING_IMGAPI_SERVICE = 'HASH_RING_IMGAPI_SERVICE';
 
 exports.CONFIG_FILE_DEFAULT = path.join(__dirname, '..', 'etc', 'config.json');
 
+exports.INSTANCE_METADATA_DEFAULTS = [
+    'DATACENTER',
+    'SERVICE_NAME',
+    'SHARD',
+    'SAPI_URL',
+    'UFDS_URL',
+    'UFDS_ROOT_DN',
+    'UFDS_ROOT_PW',
+    'SDC_NAMESERVERS',
+    'user-script'
+];
+
 
 // -- Helper functions
 
