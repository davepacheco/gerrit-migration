From 987a12c8657b1571c8148cc2aa3a1037e58fed0c Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Wed, 6 Mar 2019 11:12:26 -0500
Subject: [PATCH] joyent/node-boray#3 fix `make check` Reviewed by: Kelly
 McLaughlin <kelly.mclaughlin@joyent.com> Approved by: Kelly McLaughlin
 <kelly.mclaughlin@joyent.com>

---
 .gitmodules           |   8 +-
 deps/javascriptlint   |   2 +-
 deps/jsstyle          |   2 +-
 lib/bucket_buckets.js | 202 ++++++++++++++++++++++--------------------
 lib/bucket_client.js  |  88 ++++++++++--------
 lib/bucket_objects.js |   4 +-
 6 files changed, 165 insertions(+), 141 deletions(-)

diff --git a/.gitmodules b/.gitmodules
index 343084e..ecd0e5b 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,9 +1,9 @@
-[submodule "deps/jsstyle"]
-	path = deps/jsstyle
-	url = git://github.com/davepacheco/jsstyle.git
 [submodule "deps/restdown"]
 	path = deps/restdown
 	url = git://github.com/trentm/restdown.git
 [submodule "deps/javascriptlint"]
 	path = deps/javascriptlint
-	url = git://github.com/davepacheco/javascriptlint.git
+	url = git://github.com/joyent/javascriptlint.git
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = git://github.com/joyent/jsstyle.git
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..52dc973 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/lib/bucket_buckets.js b/lib/bucket_buckets.js
index c4bde2d..fef7839 100644
--- a/lib/bucket_buckets.js
+++ b/lib/bucket_buckets.js
@@ -28,198 +28,208 @@ var rpc = require('./rpc');
 ///--- API
 
 function createBucket(rpcctx, owner, bucket, vnode, callback) {
-    var cfg, opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
     assert.func(callback, 'callback');
 
-    // cfg = serializeBucketConfig(config);
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    var arg = { owner: owner,
-                name: bucket,
-                vnode: vnode
-              };
+    var arg = {
+        owner: owner,
+        name: bucket,
+        vnode: vnode
+    };
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     /*
      * electric-moray sends trailing null values with this response.  These are
      * not normally allowed unless we specify ignoreNullValues.
      */
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'putbucket',
-        'rpcargs': [arg],
-        'ignoreNullValues': true,
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'putbucket',
+        rpcargs: [arg],
+        ignoreNullValues: true,
+        log: log
     }, callback);
 }
 
 function createBucketNoVnode(rpcctx, owner, bucket, callback) {
-    var cfg, opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.func(callback, 'callback');
 
     // cfg = serializeBucketConfig(config);
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     /*
      * electric-moray sends trailing null values with this response.  These are
      * not normally allowed unless we specify ignoreNullValues.
      */
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'createbucket',
-        'rpcargs': [owner, bucket],
-        'ignoreNullValues': true,
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'createbucket',
+        rpcargs: [owner, bucket],
+        ignoreNullValues: true,
+        log: log
     }, function (err, buckets) {
-        if (!err && buckets.length != 1) {
-            err = new VError('bad server response: expected 1 bucket, found %d',
-                buckets.length);
+        if (err) {
+            callback(err);
+            return;
         }
 
-        if (err) {
+        assert.array(buckets, 'buckets');
+
+        if (buckets.length !== 1) {
+            err = new VError('bad server response: expected 1 bucket, found %d',
+                buckets.length);
             callback(err);
-        } else {
-            callback(null, buckets[0]);
+            return;
         }
+
+        callback(null, buckets[0]);
     });
 }
 
 function getBucket(rpcctx, owner, bucket, vnode, callback) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
     assert.func(callback, 'callback');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    var arg = { owner: owner,
-                name: bucket,
-                vnode: vnode
-              };
+    var arg = {
+        owner: owner,
+        name: bucket,
+        vnode: vnode
+    };
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'getbucket',
-        'rpcargs': [arg],
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'getbucket',
+        rpcargs: [arg],
+        log: log
     }, function (err, buckets) {
-        if (!err && buckets.length != 1) {
-            err = new VError('bad server response: expected 1 bucket, found %d',
-                buckets.length);
+        if (err) {
+            callback(err);
+            return;
         }
 
-        if (err) {
+        assert.array(buckets, 'buckets');
+
+        if (buckets.length !== 1) {
+            err = new VError('bad server response: expected 1 bucket, found %d',
+                buckets.length);
             callback(err);
-        } else {
-            callback(null, buckets[0]);
+            return;
         }
+
+        callback(null, buckets[0]);
     });
 }
 
 function getBucketNoVnode(rpcctx, owner, bucket, callback) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.func(callback, 'callback');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'getbucket',
-        'rpcargs': [owner, bucket],
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'getbucket',
+        rpcargs: [owner, bucket],
+        log: log
     }, function (err, buckets) {
-        if (!err && buckets.length != 1) {
-            err = new VError('bad server response: expected 1 bucket, found %d',
-                buckets.length);
+        if (err) {
+            callback(err);
+            return;
         }
 
-        if (err) {
+        assert.array(buckets, 'buckets');
+
+        if (buckets.length !== 1) {
+            err = new VError('bad server response: expected 1 bucket, found %d',
+                buckets.length);
             callback(err);
-        } else {
-            callback(null, buckets[0]);
+            return;
         }
+
+        callback(null, buckets[0]);
     });
 }
 
 function deleteBucket(rpcctx, owner, bucket, vnode, callback) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
     assert.func(callback, 'callback');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    var arg = { owner: owner,
-                name: bucket,
-                vnode: vnode
-              };
+    var arg = {
+        owner: owner,
+        name: bucket,
+        vnode: vnode
+    };
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'deletebucket',
-        'rpcargs': [arg],
-        'ignoreNullValues': true,
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'deletebucket',
+        rpcargs: [arg],
+        ignoreNullValues: true,
+        log: log
     }, function (err, buckets) {
-        if (!err && buckets.length != 1) {
-            err = new VError('bad server response: expected 1 bucket, found %d',
-                buckets.length);
+        if (err) {
+            callback(err);
+            return;
         }
 
-        if (err) {
+        assert.array(buckets, 'buckets');
+
+        if (buckets.length !== 1) {
+            err = new VError('bad server response: expected 1 bucket, found %d',
+                buckets.length);
             callback(err);
-        } else {
-            callback(null, buckets[0]);
+            return;
         }
+
+        callback(null, buckets[0]);
     });
 }
 
 function deleteBucketNoVnode(rpcctx, owner, bucket, callback) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.func(callback, 'callback');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
-        'rpcctx': rpcctx,
-        'rpcmethod': 'deletebucket',
-        'rpcargs': [owner, bucket],
-        'ignoreNullValues': true,
-        'log': log
+        rpcctx: rpcctx,
+        rpcmethod: 'deletebucket',
+        rpcargs: [owner, bucket],
+        ignoreNullValues: true,
+        log: log
     }, function (err, buckets) {
         if (err) {
             callback(err);
@@ -230,20 +240,18 @@ function deleteBucketNoVnode(rpcctx, owner, bucket, callback) {
 }
 
 function listBuckets(rpcctx, owner, vnode) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.number(vnode, 'vnode');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
     var arg = {
         owner: owner,
         vnode: vnode
     };
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     var res = new EventEmitter();
 
@@ -270,14 +278,12 @@ function listBuckets(rpcctx, owner, vnode) {
 }
 
 function listBucketsNoVnode(rpcctx, owner) {
-    var opts, log;
-
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
 
-    opts = makeBucketOptions({});
+    var opts = makeBucketOptions({});
 
-    log = rpc.childLogger(rpcctx, opts);
+    var log = rpc.childLogger(rpcctx, opts);
 
     var res = new EventEmitter();
 
@@ -314,7 +320,7 @@ function serializeBucketConfig(config) {
     var cfg, k;
 
     cfg = {};
-    if (typeof (config) == 'object' && config !== null) {
+    if (typeof (config) === 'object' && config !== null) {
         for (k in config) {
             cfg[k] = config[k];
         }
diff --git a/lib/bucket_client.js b/lib/bucket_client.js
index 05ff4d9..35be617 100644
--- a/lib/bucket_client.js
+++ b/lib/bucket_client.js
@@ -14,9 +14,7 @@
  */
 
 var EventEmitter = require('events').EventEmitter;
-var net = require('net');
 var path = require('path');
-var url = require('url');
 var util = require('util');
 
 var assert = require('assert-plus');
@@ -44,7 +42,6 @@ var dflClientTcpKeepAliveIdle   = 10000;  /* milliseconds */
  */
 var MORAY_CS_OPEN    = 'open';
 var MORAY_CS_CLOSING = 'closing';
-var MORAY_CS_CLOSED  = 'closed';
 
 
 ///--- Helpers
@@ -115,7 +112,7 @@ function MorayClient(options) {
         this.collector = options.collector;
     }
 
-    if (coptions.mode == 'srv') {
+    if (coptions.mode === 'srv') {
         resolverInput = cueballOptions.domain;
     } else {
         resolverInput = cueballOptions.domain + ':' +
@@ -217,7 +214,7 @@ util.inherits(MorayClient, EventEmitter);
 Object.defineProperty(MorayClient.prototype, 'connected', {
     'get': function () {
         return (this.timeConnected !== null &&
-            this.closeState == MORAY_CS_OPEN);
+            this.closeState === MORAY_CS_OPEN);
     }
 });
 
@@ -238,12 +235,12 @@ MorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
 
     this.log.trace({ 'newState': st }, 'cueball state change');
 
-    if (st == 'running') {
+    if (st === 'running') {
         this.timeConnected = new Date();
         this.cueball.removeListener('stateChanged', this.cueballOnStateChange);
         this.log.debug('client ready');
         this.emit('connect');
-    } else if (this.failFast && st == 'failed') {
+    } else if (this.failFast && st === 'failed') {
         this.timeCueballInitFailed = new Date();
         this.cueball.removeListener('stateChanged', this.cueballOnStateChange);
         err = new VError('moray client "%s": failed to establish connection',
@@ -261,7 +258,7 @@ MorayClient.prototype.onCueballStateChange = function onCueballStateChange(st) {
 MorayClient.prototype.close = function close() {
     var self = this;
 
-    if (this.closeState != MORAY_CS_OPEN) {
+    if (this.closeState !== MORAY_CS_OPEN) {
         this.log.warn({
             'closeState': this.closeState,
             'nactiveAtClose': this.nactiveAtClose
@@ -416,7 +413,7 @@ MorayClient.prototype.ctxCreateForCallback =
     var conn;
 
     assert.func(callback, 'callback');
-    if (this.closeState != MORAY_CS_OPEN) {
+    if (this.closeState !== MORAY_CS_OPEN) {
         setImmediate(callback, new Error('moray client has been closed'));
         return (null);
     }
@@ -441,7 +438,7 @@ MorayClient.prototype.ctxCreateForCallback =
 MorayClient.prototype.ctxCreateForEmitter = function ctxCreateForEmitter() {
     var conn;
 
-    if (this.closeState != MORAY_CS_OPEN) {
+    if (this.closeState !== MORAY_CS_OPEN) {
         return (null);
     }
 
@@ -491,15 +488,15 @@ MorayClient.prototype.ctxRelease = function ctxRelease(rpcctx) {
     delete (this.activeContexts[rpcctx.mc_id]);
     this.pool.connRelease(rpcctx.mc_conn);
 
-    if (this.nactive === 0 && this.closeState == MORAY_CS_CLOSING) {
+    if (this.nactive === 0 && this.closeState === MORAY_CS_CLOSING) {
         this.closeFini();
     }
 };
 
 /*
  * Given an RPC context and a user callback, return a callback that will
- * release the underlying RPC context and then invoke the user callback with the
- * same arguments.
+ * release the underlying RPC context and then invoke the user callback with
+ * the same arguments.
  *
  * See "Internal functions for RPC contexts and context management" above.
  */
@@ -554,18 +551,24 @@ MorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.createBucket = function createBucket(owner, bucket, vnode, cb) {
+MorayClient.prototype.createBucket =
+    function createBucket(owner, bucket, vnode, cb) {
+
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
+    if (rpcctx) {
         buckets.createBucket(rpcctx, owner, bucket, vnode,
             this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
-MorayClient.prototype.createBucketNoVnode = function createBucketNoVnode(owner, bucket, cb) {
+MorayClient.prototype.createBucketNoVnode =
+    function createBucketNoVnode(owner, bucket, cb) {
+
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
+    if (rpcctx) {
         buckets.createBucketNoVnode(rpcctx, owner, bucket,
             this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
 
@@ -579,7 +582,6 @@ MorayClient.prototype.createBucketNoVnode = function createBucketNoVnode(owner,
  * @param {Function} cb - callback
  */
 MorayClient.prototype.getBucket = function getBucket(o, b, vnode, cb) {
-    var opts = {};
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         buckets.getBucket(rpcctx, o, b, vnode, this.makeReleaseCb(rpcctx, cb));
@@ -587,7 +589,6 @@ MorayClient.prototype.getBucket = function getBucket(o, b, vnode, cb) {
 
 
 MorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
-    var opts = {};
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         buckets.getBucketNoVnode(rpcctx, o, b, this.makeReleaseCb(rpcctx, cb));
@@ -658,18 +659,22 @@ MorayClient.prototype.updateBucket = function updateBucket(b, cfg, opts, cb) {
  * @param {Function} cb - callback
  */
 MorayClient.prototype.deleteBucket = function deleteBucket(o, b, vnode, cb) {
-    var opts = {};
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        buckets.deleteBucket(rpcctx, o, b, vnode, this.makeReleaseCb(rpcctx, cb));
+    if (rpcctx) {
+        buckets.deleteBucket(rpcctx, o, b, vnode,
+            this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
 
-MorayClient.prototype.deleteBucketNoVnode = function deleteBucketNoVnode(o, b, cb) {
-    var opts = {};
+MorayClient.prototype.deleteBucketNoVnode =
+    function deleteBucketNoVnode(o, b, cb) {
+
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        buckets.deleteBucketNoVnode(rpcctx, o, b, this.makeReleaseCb(rpcctx, cb));
+    if (rpcctx) {
+        buckets.deleteBucketNoVnode(rpcctx, o, b,
+            this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
 
@@ -733,9 +738,10 @@ MorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
     }
 };
 
-MorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner, bucket_id, name,
-    content_length, content_md5, content_type, headers, sharks, props,
-    cb) {
+MorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
+    bucket_id, name, content_length, content_md5, content_type, headers,
+    sharks, props, cb) {
+
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -765,7 +771,9 @@ MorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner, bucket
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.getObject = function getObject(owner, bucket_id, name, vnode, cb) {
+MorayClient.prototype.getObject =
+    function getObject(owner, bucket_id, name, vnode, cb) {
+
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -779,7 +787,9 @@ MorayClient.prototype.getObject = function getObject(owner, bucket_id, name, vno
     }
 };
 
-MorayClient.prototype.getObjectNoVnode = function getObjectNoVnode(owner, bucket_id, name, cb) {
+MorayClient.prototype.getObjectNoVnode =
+    function getObjectNoVnode(owner, bucket_id, name, cb) {
+
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -795,7 +805,9 @@ MorayClient.prototype.getObjectNoVnode = function getObjectNoVnode(owner, bucket
 /**
  * Lists objects
  */
-MorayClient.prototype.listObjects = function listObjects(owner, bucket_id, vnode) {
+MorayClient.prototype.listObjects =
+    function listObjects(owner, bucket_id, vnode) {
+
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -809,7 +821,9 @@ MorayClient.prototype.listObjects = function listObjects(owner, bucket_id, vnode
     return (rv);
 };
 
-MorayClient.prototype.listObjectsNoVnode = function listObjectsNoVnode(owner, bucket_id) {
+MorayClient.prototype.listObjectsNoVnode =
+    function listObjectsNoVnode(owner, bucket_id) {
+
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -833,7 +847,9 @@ MorayClient.prototype.listObjectsNoVnode = function listObjectsNoVnode(owner, bu
  * @param {Object} opts - request parameters
  * @param {Function} cb - callback
  */
-MorayClient.prototype.deleteObject = function deleteObject(owner, bucket_id, name, vnode, cb) {
+MorayClient.prototype.deleteObject =
+    function deleteObject(owner, bucket_id, name, vnode, cb) {
+
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -847,7 +863,9 @@ MorayClient.prototype.deleteObject = function deleteObject(owner, bucket_id, nam
     }
 };
 
-MorayClient.prototype.deleteObjectNoVnode = function deleteObjectNoVnode(owner, bucket_id, name, cb) {
+MorayClient.prototype.deleteObjectNoVnode =
+    function deleteObjectNoVnode(owner, bucket_id, name, cb) {
+
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
diff --git a/lib/bucket_objects.js b/lib/bucket_objects.js
index c26edac..f5a0c32 100644
--- a/lib/bucket_objects.js
+++ b/lib/bucket_objects.js
@@ -76,8 +76,8 @@ function putObject(rpcctx, owner, bucket_id, name, content_length, content_md5,
     });
 }
 
-function putObjectNoVnode(rpcctx, owner, bucket_id, name, content_length, content_md5,
-    content_type, headers, sharks, props, callback) {
+function putObjectNoVnode(rpcctx, owner, bucket_id, name, content_length,
+    content_md5, content_type, headers, sharks, props, callback) {
     var opts, log;
 
     assert.object(rpcctx, 'rpcctx');
-- 
2.21.0

