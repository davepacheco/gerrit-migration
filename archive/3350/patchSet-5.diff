From f416332ebb4eef2e61016d06dd96eba5dbf0f0df Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Thu, 15 Feb 2018 15:42:03 +0000
Subject: [PATCH] joyent/node-fast#16 fastserve cannot be run concurrently even
 with different arguments Reviewed by: Cody Peter Mello
 <cody.mello@joyent.com> Approved by: Cody Peter Mello <cody.mello@joyent.com>

---
 CHANGES.md    |  2 +-
 README.md     |  2 +-
 bin/fastserve | 79 +++++++++++++++++++++++++++++++++++----------------
 3 files changed, 57 insertions(+), 26 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 582783d..e222bc0 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,7 +2,7 @@
 
 ## Not yet released.
 
-None yet.
+* #16 fastserve cannot be run concurrently even with different arguments
 
 ## v2.4.0
 
diff --git a/README.md b/README.md
index 5f331a3..e0c4d01 100644
--- a/README.md
+++ b/README.md
@@ -30,7 +30,7 @@ arguments are required unless otherwise specified.
 
 Start the Fast server:
 
-    $ fastserve 2030 > server.log &
+    $ fastserve -p 2030 > server.log &
 
 Use `fastcall` to invoke the `date` RPC method inside the client:
 
diff --git a/bin/fastserve b/bin/fastserve
index 424ea18..2eafbae 100755
--- a/bin/fastserve
+++ b/bin/fastserve
@@ -21,60 +21,93 @@ var mod_cmdutil = require('cmdutil');
 var mod_getopt = require('posix-getopt');
 var mod_fastdemo = require('../lib/demo_server');
 var mod_fastserver = require('../lib/fast_server');
+var mod_jsprim = require('jsprim');
 var mod_kang = require('kang');
 var mod_net = require('net');
 var mod_os = require('os');
 var mod_restify = require('restify');
+var mod_util = require('util');
 
-var MONITOR_PORT = 16519;
+var OPTS = {
+    '-p,--port': 'fast RPC listening port(default: 2030)',
+    '-m,--mon-port': 'monitoring server listening port (default: port+800)',
+    '-q,--quiesce': 'enable quiesce (default: false)'
+};
 
-var usageMessage = [
-    'Start a Fast protocol server supporting a few basic RPC calls.  PORT is ',
-    'the TCP port on which to listen.'
-].join('\n');
+/* construct the usage message */
+var usageMessage = '    OPTIONS';
+Object.keys(OPTS).forEach(function (arg) {
+	usageMessage += mod_util.format('\n\t%s\t%s', arg, OPTS[arg]);
+});
 
 function main()
 {
-	var argv, port, option;
+	var option;
 
+	/* default configuration values - monitorPort is set later */
 	var config = {
-		'quiesce': false
+	    'quiesce': false,
+	    'fastPort': 2030
 	};
 
 	mod_cmdutil.configure({
-	    'synopses': [ '[OPTIONS] PORT' ],
+	    'synopses': [ '[OPTIONS]' ],
 	    'usageMessage': usageMessage
 	});
 	mod_cmdutil.exitOnEpipe();
 
-	var parser = new mod_getopt.BasicParser('q(quiesce)', process.argv);
+	var parser = new mod_getopt.BasicParser('p:(port)m:(mon-port)' +
+	    'q(quiesce)', process.argv);
 	while ((option = parser.getopt()) !== undefined) {
 		switch (option.option) {
 			case 'q':
 				config.quiesce = true;
 				break;
+			case 'p':
+				config.fastPort =
+				    mod_jsprim.parseInteger(option.optarg);
+				break;
+			case 'm':
+				config.monitorPort =
+				    mod_jsprim.parseInteger(option.optarg);
+				break;
 			default:
 				mod_assertplus.equal('?', option.option);
 				mod_cmdutil.usage();
 				break;
 		}
 	}
+	/* set default monitoring port if none provided */
+	if (!config.monitorPort) {
+		config.monitorPort = config.fastPort + 800;
+	}
 
-	argv = process.argv.slice(parser.optind());
-	if (argv.length != 1) {
-		mod_cmdutil.usage('expected PORT');
+	function isInvalidPort(port) {
+	    return (isNaN(port) || port < 1 || port > 65535);
 	}
 
-	port = parseInt(argv[0], 10);
-	if (isNaN(port) || port < 1 || port > 65535) {
-		mod_cmdutil.usage('invalid TCP port: %s\n', argv[1]);
+	/* validate port configuration */
+	if (isInvalidPort(config.fastPort)) {
+		mod_cmdutil.usage('invalid fast TCP port: %s\n',
+		    config.fastPort);
+	}
+	if (isInvalidPort(config.monitorPort)) {
+		mod_cmdutil.usage('invalid monitoring TCP port: %s\n',
+		    config.monitorPort);
 	}
 
-	fastDemoServer({
-		'fastPort': port,
-		'monitorPort': MONITOR_PORT,
-		'config': config
-	});
+	if (config.fastPort === config.monitorPort) {
+		mod_cmdutil.usage('fast and monitoring TCP ports must differ:' +
+		    ' %s\n', config.fastPort);
+	}
+
+	if (parser.optind() !== process.argv.length) {
+		mod_cmdutil.usage(
+		    'Positional arguments found when none were expected: %s',
+		    process.argv.slice(parser.optind()).join(' '));
+	}
+
+	fastDemoServer(config);
 }
 
 function fastDemoServer(args)
@@ -85,9 +118,7 @@ function fastDemoServer(args)
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.number(args.fastPort, 'args.fastPort');
 	mod_assertplus.number(args.monitorPort, 'args.monitorPort');
-	mod_assertplus.object(args.config, 'args.config');
-
-	var config = args.config;
+	mod_assertplus.bool(args.quiesce, 'args.quiesce');
 
 	collector = mod_artedi.createCollector({
 	    'labels': {
@@ -167,7 +198,7 @@ function fastDemoServer(args)
 					fastserver.close();
 				}
 
-				if (config.quiesce) {
+				if (args.quiesce) {
 					log.info('quiescing server');
 					fastserver.onConnsDestroyed(shutdown);
 				} else {
-- 
2.21.0

