From 4c60a204469c39e9254c3f23a5a3e668eb1af69f Mon Sep 17 00:00:00 2001
From: Jordan Hendricks <jordan.hendricks@joyent.com>
Date: Fri, 15 Sep 2017 23:41:53 +0000
Subject: [PATCH] joyent/node-manta#326 client could support accepting fully
 qualified upload directory as input to MPU operations Reviewed by: Approved
 by:

---
 CHANGES.md        | 10 +++++++++
 bin/mmpu          | 32 ++++++++++++++++++----------
 lib/client.js     | 54 +++++++++++++++++++++++++++++++++++++++++------
 package.json      |  2 +-
 test/mmpu.test.js | 33 ++++++++++++++++-------------
 5 files changed, 97 insertions(+), 34 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index c77cf37..69299a9 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,7 +2,17 @@
 
 ## not yet released
 
+## 5.1.0
+
+Minor version bump due to a backwards-compatible additon to the multipart upload
+client operations. The client operations now allow for a `partsDirectory` string
+on the options object for multipart upload methods, which is used as the URL of
+the request. Otherwise, the parts directory is resolved using the server's
+redirect endpoint.
+
 - joyent/node-manta#325 ask server for fully qualified upload path
+- joyent/node-manta#326 client could support accepting fully qualified upload
+  directory as input to MPU operations
 
 ## 5.0.0
 
diff --git a/bin/mmpu b/bin/mmpu
index 1a7b9e4..306e00a 100755
--- a/bin/mmpu
+++ b/bin/mmpu
@@ -605,25 +605,35 @@ MMpu.prototype.do_parts = function do_parts(subcmd, opts, args, cb) {
         return;
     }
 
-    var id = args[0];
-    var prefix = id.charAt(0);
-    var url = '/' + opts.account + '/uploads/' + prefix + '/' + id;
     var client = createClient(opts);
 
-    var ftwOpts = {
-        minDepth: 0,
-        maxDepth: 1
+    var id = args[0];
+    var getUploadOpts = {
+        account: opts.account
     };
 
-    client.ftw(url, ftwOpts, function (err, res) {
+    client.getUpload(id, getUploadOpts, function (err, upload) {
         if (err) {
             client.close();
             cb(err);
         } else {
-            res.on('entry', printEntry);
-            res.on('end', function () {
-                client.close();
-                cb();
+            var url = upload.partsDirectory;
+            var ftwOpts = {
+                minDepth: 0,
+                maxDepth: 1
+            };
+
+            client.ftw(url, ftwOpts, function (err2, res) {
+                if (err2) {
+                    client.close();
+                    cb(err2);
+                } else {
+                    res.on('entry', printEntry);
+                    res.on('end', function () {
+                        client.close();
+                        cb();
+                    });
+                }
             });
         }
     });
diff --git a/lib/client.js b/lib/client.js
index 65cc1e5..a73a560 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -3258,6 +3258,7 @@ MantaClient.prototype._uploadURL = function _uploadURL(uu, done) {
     assert.object(uu, 'uu');
     assert.string(uu.uu_account, 'uu_account');
     assert.string(uu.uu_op, 'uu_op');
+    assert.optionalString(uu.uu_partsDirectory, 'uu_partsDirectory');
 
     var self = this;
 
@@ -3271,6 +3272,36 @@ MantaClient.prototype._uploadURL = function _uploadURL(uu, done) {
         return;
     }
 
+    /*
+     * If the client provided the parts directory, we can short-circuit the
+     * redirect here and just provide the URL needed for the desired operation.
+     */
+    var finalURL;
+    if (uu.uu_partsDirectory) {
+        var p = uu.uu_partsDirectory;
+
+        switch (uu.uu_op) {
+            case UPLOAD_OPS.COMMIT:
+                finalURL = p + '/commit';
+                break;
+            case UPLOAD_OPS.ABORT:
+                finalURL = p + '/abort';
+                break;
+            case UPLOAD_OPS.GET:
+                finalURL = p + '/state';
+                break;
+            case UPLOAD_OPS.UPLOAD:
+                assert.number(uu.uu_partNum, 'partNum');
+                finalURL = p + '/' + uu.uu_partNum;
+                break;
+            default:
+                throw (new Verror('Invalid operation: %s', uu.uu_op));
+        }
+
+        setImmediate(done(null, finalURL));
+        return;
+    }
+
     /*
      * Manta allows us to make a request to the top-level upload directory as
      * if the multipart upload was anchored there.  The response will be a
@@ -3300,7 +3331,7 @@ MantaClient.prototype._uploadURL = function _uploadURL(uu, done) {
 
         self.client.head(options, function (err, req) {
             if (err) {
-                err = new Verror(err, 'locating upload');
+                err = new Verror({ cause: err}, 'locating upload');
                 log.debug(err);
                 done(err);
                 return;
@@ -3317,7 +3348,7 @@ MantaClient.prototype._uploadURL = function _uploadURL(uu, done) {
                 }
 
                 if (rerr) {
-                    rerr = new Verror(err, 'locating upload');
+                    rerr = new Verror({ cause: err }, 'locating upload');
                     log.debug(rerr);
                     done(rerr);
                     return;
@@ -3333,8 +3364,6 @@ MantaClient.prototype._uploadURL = function _uploadURL(uu, done) {
                     return;
                 }
 
-                var finalURL;
-
                 switch (uu.uu_op) {
                 case UPLOAD_OPS.COMMIT:
                     finalURL = res.headers['location'] + '/commit';
@@ -3497,6 +3526,7 @@ function uploadPart(stream, id, partNum, opts, cb) {
     assert.string(id, 'id');
     assert.object(opts, 'opts');
     assert.string(opts.account, 'opts.account');
+    assert.optionalString(opts.partsDirectory, 'opts.partsDirectory');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -3506,6 +3536,7 @@ function uploadPart(stream, id, partNum, opts, cb) {
         uu_account: opts.account,
         uu_id: id,
         uu_partNum: partNum,
+        uu_partsDirectory: opts.partsDirectory,
         uu_opts: opts
     }, function (uerr, url) {
         if (uerr) {
@@ -3575,14 +3606,16 @@ function uploadPart(stream, id, partNum, opts, cb) {
  *
  * Parameters:
  *  - id: upload uuid
- *  - opts: options object that must contain the following:
+ *  - opts: options object with the following:
  *      - account: the Manta account the upload belongs to
+ *      - partsDirectory: upload directory of the upload (optional)
  *  - cb: callback function of the form f(err)
  */
 MantaClient.prototype.abortUpload = function abortUpload(id, opts, cb) {
     assert.string(id, 'id');
     assert.object(opts, 'options');
     assert.string(opts.account, 'opts.account');
+    assert.optionalString(opts.partsDirectory, 'opts.partsDirectory');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -3591,6 +3624,7 @@ MantaClient.prototype.abortUpload = function abortUpload(id, opts, cb) {
         uu_op: UPLOAD_OPS.ABORT,
         uu_account: opts.account,
         uu_id: id,
+        uu_partsDirectory: opts.partsDirectory,
         uu_opts: opts
     }, function (uerr, url) {
         if (uerr) {
@@ -3642,14 +3676,16 @@ MantaClient.prototype.abortUpload = function abortUpload(id, opts, cb) {
  *
  * Parameters:
  *  - id: upload uuid
- *  - opts: options object that must contain the following:
+ *  - opts: options object with the following:
  *      - account: the Manta account the upload belongs to
+ *      - partsDirectory: upload directory of the upload (optional)
  *  - cb: callback function of the form f(err, upload)
  */
 MantaClient.prototype.getUpload = function getUpload(id, opts, cb) {
     assert.string(id, 'id');
     assert.object(opts, 'options');
     assert.string(opts.account, 'opts.account');
+    assert.optionalString(opts.partsDirectory, 'opts.partsDirectory');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -3658,6 +3694,7 @@ MantaClient.prototype.getUpload = function getUpload(id, opts, cb) {
         uu_op: UPLOAD_OPS.GET,
         uu_account: opts.account,
         uu_id: id,
+        uu_partsDirectory: opts.partsDirectory,
         uu_opts: opts
     }, function (uerr, url) {
         if (uerr) {
@@ -3709,14 +3746,16 @@ MantaClient.prototype.getUpload = function getUpload(id, opts, cb) {
  * Parameters:
  *  - id: upload uuid
  *  - p: an array of part etags
- *  - opts: options object that must contain the following:
+ *  - opts: options object with the following:
  *      - account: the Manta account the upload belongs to
+ *      - partsDirectory: upload directory of the upload (optional)
  *  - cb: callback function of the form f(err)
  */
 MantaClient.prototype.commitUpload = function commitUpload(id, p, opts, cb) {
     assert.string(id, 'id');
     assert.object(opts, 'options');
     assert.string(opts.account, 'opts.account');
+    assert.optionalString(opts.partsDirectory, 'opts.partsDirectory');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -3725,6 +3764,7 @@ MantaClient.prototype.commitUpload = function commitUpload(id, p, opts, cb) {
         uu_op: UPLOAD_OPS.COMMIT,
         uu_account: opts.account,
         uu_id: id,
+        uu_partsDirectory: opts.partsDirectory,
         uu_opts: opts
     }, function (uerr, url) {
         if (uerr) {
diff --git a/package.json b/package.json
index b920a6c..d819c40 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
         "type": "git",
         "url": "git://github.com/joyent/node-manta.git"
     },
-    "version": "5.0.0",
+    "version": "5.1.0",
     "main": "./lib/index.js",
     "dependencies": {
         "assert-plus": "^1.0.0",
diff --git a/test/mmpu.test.js b/test/mmpu.test.js
index 34b29db..e447a95 100644
--- a/test/mmpu.test.js
+++ b/test/mmpu.test.js
@@ -56,6 +56,10 @@ var A_OBJ_PATH = format('/%s/stor/node-manta-test-mmpu-%s-abort',
 var C_ID;
 var A_ID;
 
+// upload paths
+var C_UPLOADPATH;
+var A_UPLOADPATH;
+
 // part etags
 var C_ETAG0;
 var A_ETAG0;
@@ -72,11 +76,6 @@ function test(name, testfunc) {
     module.exports[name] = testfunc;
 }
 
-function uploadPath(id) {
-    var prefix = id.charAt(0);
-    return ('/' + MANTA_USER + '/uploads/' + prefix + '/' + id);
-}
-
 
 // ---- tests
 
@@ -151,6 +150,8 @@ test('mmpu get C_ID', function (t) {
             t.equal(headers['content-md5'], TEXT_MD5);
             t.equal(headers['m-custom-header'], 'foo');
             t.equal(upload.state, 'created');
+
+            C_UPLOADPATH = upload.partsDirectory;
         } else {
             console.log(err);
             console.log(info.stderr);
@@ -197,7 +198,7 @@ test('mmpu create A_OBJ_PATH -c 1 -s TEXT_SIZE -m TEXT_MD5' +
 
 // Get the upload we are going to abort, and verify the attributes match
 // what was specified on create.
-test('mmpu get A_IDJ', function (t) {
+test('mmpu get A_ID', function (t) {
     if (!MPU_ENABLED) {
         console.log('WARNING: skipping test: multipart ' +
             'upload is not enabled on this Manta deployment');
@@ -230,8 +231,9 @@ test('mmpu get A_IDJ', function (t) {
             t.equal(headers['durability-level'], 1);
             t.equal(headers['content-length'], TEXT_SIZE);
             t.equal(headers['content-md5'], TEXT_MD5);
-
             t.equal(upload.state, 'created');
+
+            A_UPLOADPATH = upload.partsDirectory;
         } else {
             console.log(err);
             console.log(info.stderr);
@@ -310,12 +312,13 @@ test('mmpu list', function (t) {
     }, function (err, info) {
         t.ifError(err, err);
 
-        var c = uploadPath(C_ID);
-        var a = uploadPath(A_ID);
         var cFound, aFound = false;
 
         if (!err) {
             var split = info.stdout.split('\n');
+            var c = C_UPLOADPATH;
+            var a = A_UPLOADPATH;
+
             split.forEach(function (line) {
                 if (line === c) {
                     cFound = true;
@@ -434,7 +437,7 @@ test('mmpu parts C_ID: post-upload', function (t) {
     }, function (err, info) {
         t.ifError(err, err);
         if (!err) {
-            var expectedStdout = uploadPath(C_ID) + '/0\n';
+            var expectedStdout = C_UPLOADPATH + '/0\n';
             t.equal(info.stdout, expectedStdout);
         } else {
             console.log(err);
@@ -461,7 +464,7 @@ test('mmpu parts A_ID: post-upload', function (t) {
     }, function (err, info) {
         t.ifError(err, err);
         if (!err) {
-            var expectedStdout = uploadPath(A_ID) + '/0\n';
+            var expectedStdout = A_UPLOADPATH + '/0\n';
             t.equal(info.stdout, expectedStdout);
         } else {
             console.log(err);
@@ -489,8 +492,8 @@ test('mmpu list -p', function (t) {
     }, function (err, info) {
         t.ifError(err, err);
 
-        var c = uploadPath(C_ID);
-        var a = uploadPath(A_ID);
+        var c = C_UPLOADPATH;
+        var a = A_UPLOADPATH;
         var c0 = c + '/0';
         var a0 = a + '/0';
 
@@ -541,8 +544,8 @@ test('mmpu list: post part upload', function (t) {
     }, function (err, info) {
         t.ifError(err, err);
 
-        var c = uploadPath(C_ID);
-        var a = uploadPath(A_ID);
+        var c = C_UPLOADPATH;
+        var a = A_UPLOADPATH;
         var c0 = c + '/0';
         var a0 = a + '/0';
 
-- 
2.21.0

