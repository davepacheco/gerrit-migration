From d6e5335e62a2ed6bfecbfe99c1bd9d5cffc522b0 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 31 May 2017 18:54:50 +0200
Subject: [PATCH] TOOLS-1770 Add multi server support to `sdcadm create
 AGENT_INSTANCE`

---
 lib/cli/do_create.js                         | 102 ++++---
 lib/procedures/create-service-instance-v1.js |  56 +++-
 lib/procedures/index.js                      | 270 +++++++++++--------
 lib/procedures/update-agent-v1.js            |  25 +-
 lib/procedures/update-dockerlogger.js        |  26 +-
 lib/sdcadm.js                                | 107 ++++++--
 lib/steps/index.js                           |   5 +-
 lib/steps/servers.js                         | 100 +++++++
 man/man1/sdcadm.1.ronn                       |   7 +-
 9 files changed, 495 insertions(+), 203 deletions(-)
 create mode 100644 lib/steps/servers.js

diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index 96c608f..954243a 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -16,6 +16,7 @@ var vasync = require('vasync');
 
 var common = require('../common');
 var errors = require('../errors');
+var steps = require('../steps');
 
 /*
  * The 'sdcadm create' CLI subcommand.
@@ -52,7 +53,14 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
     var plan;
     var execStart;
 
-    vasync.pipeline({funcs: [
+    var servers = opts.servers;
+    // In case the deprecated 'server' option is provided, just add it to
+    // the new 'servers' option.
+    if (opts.server) {
+        servers.push(opts.server);
+    }
+
+    vasync.pipeline({ arg: {}, funcs: [
         function getLock(_, next) {
             self.sdcadm.acquireLock({progress: self.progress},
                                     function (lockErr, unlock_) {
@@ -71,36 +79,51 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
                 next(err);
             });
         },
-        function getServerFromHostname(_, next) {
-            if (!opts.server || common.UUID_RE.test(opts.server)) {
-                next();
+        function getServersFromHostname(ctx, next) {
+            if (!servers || !servers.length) {
+                next(new errors.UsageError(
+                    'Must specify at least one server uuid or hostname'));
                 return;
             }
-            self.sdcadm.cnapi.listServers({
-                hostname: opts.server
-            }, function (err, servers) {
-                if (err || !servers.length) {
-                    self.sdcadm.log.error({err: err}, 'do_create');
+
+            steps.getServersByUuidOrHostname({
+                sdcadm: self.sdcadm,
+                serverNames: servers,
+                query: {
+                    extras: 'sysinfo,agents'
+                }
+            }, function (serversErr, foundServers, serverFromUuidOrHostname) {
+                if (serversErr) {
+                    next(serversErr);
+                    return;
+                }
+
+                if (!foundServers.length) {
                     next(new errors.UsageError(util.format(
-                        'Cannot find server "%s"', opts.server)));
+                        'Cannot find servers "%s"', opts.servers.join(', '))));
                     return;
+
                 }
-                opts.server = servers[0].uuid;
+
+                opts.servers = foundServers;
+                ctx.serverFromUuidOrHostname = serverFromUuidOrHostname;
                 next();
             });
-
         },
+
         function getChangeFromArgs(_, next) {
             if (args.length === 0) {
-                return next(new errors.UsageError(
+                next(new errors.UsageError(
                     'Must specify service name or uuid'));
+                return;
             }
 
             var service = args[0];
             var change = {};
             if (svcFromName[service] === undefined) {
-                return next(new errors.UsageError(
+                next(new errors.UsageError(
                     'unknown service: ' + service));
+                return;
             }
 
             change.service = args[0];
@@ -117,28 +140,31 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
              * service
              */
             if (!change.image) {
-                return next(new errors.ValidationError(util.format(
+                next(new errors.ValidationError(util.format(
                     'Missing image_uuid for service %s in SAPI.', service)));
+                return;
             }
 
-            if (!opts.server) {
-                return next(new errors.UsageError(
-                    'Must specify server uuid or hostname'));
+            if (!opts.servers.length) {
+                next(new errors.UsageError(
+                    'Must specify at least a valid server uuid or hostname'));
+                return;
             }
-            change.server = opts.server;
+            change.servers = opts.servers.map(function (s) { return s.uuid; });
             change.type = 'create-instance';
             changes.push(change);
             next();
         },
 
-        function genPlan(_, next) {
+        function genPlan(ctx, next) {
             self.log.debug('genPlan');
             self.sdcadm.genUpdatePlan({
                 changes: changes,
                 progress: self.progress,
                 uuid: self.uuid,
                 skipHACheck: opts.dev_allow_multiple_instances,
-                forceDataPath: true
+                forceDataPath: true,
+                serverFromUuidOrHostname: ctx.serverFromUuidOrHostname
             }, function (err, plan_) {
                 plan = plan_;
                 next(err);
@@ -146,20 +172,23 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
         },
         function confirm(_, next) {
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             p('');
             p('This command will make the following changes:');
             self.sdcadm.summarizePlan({plan: plan, progress: self.progress});
             p('');
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             var msg = 'Would you like to continue? [y/N] ';
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
                 next();
@@ -168,11 +197,13 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
         function execPlan(_, next) {
             execStart = Date.now();
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             if (opts.dry_run) {
                 p('[dry-run] done');
-                return next();
+                next();
+                return;
             }
             self.sdcadm.execUpdatePlan({
                 plan: plan,
@@ -184,7 +215,8 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
         vasync.pipeline({funcs: [
             function dropLock(_, next) {
                 if (!unlock) {
-                    return next();
+                    next();
+                    return;
                 }
                 self.sdcadm.releaseLock({unlock: unlock}, next);
             }
@@ -196,7 +228,8 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
                     'unexpected error finishing create');
             }
             if (err || finishCreateErr) {
-                return cb(err || finishCreateErr);
+                cb(err || finishCreateErr);
+                return;
             }
 
             if (plan.procs.length === 0) {
@@ -212,7 +245,7 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
 
 
 Create.prototype.help = (
-    'Create an instance for an existing SDC service.\n' +
+    'Create one or more instances for an existing SDC service.\n' +
     '\n' +
     'Usage:\n' +
     '       {{name}} create <svc>\n\n' +
@@ -265,9 +298,16 @@ do_create.options = [
         help: 'UUID of the Image to be used for the instance.'
     },
     {
-        names: ['server', 's'],
+        names: ['server'],
         type: 'string',
-        help: 'The server (UUID or hostname) on which to create the instance.'
+        help: 'The server (UUID or hostname) on which to create the instance.',
+        hidden: true
+    },
+    {
+        names: ['servers', 's'],
+        type: 'arrayOfCommaSepString',
+        help: 'Comma separated list of servers (either hostnames or uuids) ' +
+            'on which to create the instance(s).'
     },
     {
         names: ['yes', 'y'],
diff --git a/lib/procedures/create-service-instance-v1.js b/lib/procedures/create-service-instance-v1.js
index c52d5c5..dc66376 100644
--- a/lib/procedures/create-service-instance-v1.js
+++ b/lib/procedures/create-service-instance-v1.js
@@ -27,7 +27,10 @@ util.inherits(CreateServiceInstanceV1, Procedure);
 CreateServiceInstanceV1.prototype.summarize = function csiv1Summarize() {
     return this.changes.map(function (ch) {
         return sprintf('create "%s" service instance using image %s (%s@%s)',
-            ch.service.name, ch.image.uuid, ch.image.name, ch.image.version);
+            ch.service.name, ch.image.uuid, ch.image.name, ch.image.version) +
+            ((ch.servers.length === 1) ?
+            sprintf(' on server %s', ch.servers[0]) :
+            sprintf(' on servers %s', ch.servers.join(',')));
     }).join('\n');
 };
 
@@ -48,7 +51,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
             change: change,
             opts: opts,
             img: change.image,
-            server: change.server,
+            servers: change.servers,
             userScript: false,
             progress: progress,
             log: opts.log
@@ -84,13 +87,11 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
             },
             function generateInstanceAlias(_, next) {
                 var n = change.service.name;
-                progress('Calculating next %s instance alias', n);
                 var nextId = instances.map(function (inst) {
                     return Number(inst.params.alias.replace(n, ''));
                 }).sort().pop();
                 nextId = isNaN(nextId) ? 0 : nextId + 1;
-                alias = n + nextId;
-                arg.alias = alias;
+                arg.nextId = nextId;
                 next();
             }
         ];
@@ -104,9 +105,48 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
             ]);
         }
 
-        steps.push(s.imgadmInstallRemote);
-        steps.push(s.createInstance);
-        steps.push(s.waitForInstToBeUp);
+        change.servers.forEach(function (server) {
+            steps = steps.concat(
+                function generateAlias(ctx, next) {
+                    alias = change.service.name + ctx.nextId;
+                    ctx.nextId += 1;
+                    next();
+                },
+                function imgadmInstallForInstance(_, next) {
+                    return s.imgadmInstallRemote({
+                        progress: progress,
+                        img: change.image,
+                        log: opts.log,
+                        server: server
+                    }, next);
+                },
+                function createInstance(_, next) {
+                    change.server = server;
+                    s.createInstance({
+                        opts: {
+                            progress: progress,
+                            sdcadm: opts.sdcadm,
+                            log: opts.log
+                        },
+                        server: server,
+                        img: change.image,
+                        alias: alias,
+                        change: change
+                    }, next);
+                },
+                function waitForInstanceToBeUp(_, next) {
+                    s.waitForInstToBeUp({
+                        opts: {
+                            progress: progress,
+                            sdcadm: opts.sdcadm,
+                            log: opts.log
+                        },
+                        change: change
+                    }, next);
+                }
+            );
+        });
+
         steps.push(function hupHermes(_, next) {
             svcadm.restartHermes({
                 sdcadm: sdcadm,
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index b40e7d8..c927de2 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -26,17 +26,22 @@ var errors = require('../errors'),
     UsageError = errors.UsageError;
 
 // --- HA ready services
-var HA_READY_SVCS = [
+
+// Here "SIMPLE" means those that can be upgraded with the
+// UpdateStatelessServices.
+var HA_READY_SIMPLE_SVCS = [
     'adminui',
     'cloudapi',
     'cmon',
     'mahi',
-    'moray',
     'nat',
     'papi',
     'portolan',
     'workflow'
 ];
+var ALL_HA_READY_SVCS = HA_READY_SIMPLE_SVCS.concat([
+    'moray'
+]);
 
 // --- Disallowed agents
 var DISALLOWED_AGENTS = ['provisioner', 'heartbeater', 'zonetracker'];
@@ -172,10 +177,10 @@ function coordinatePlan(opts, cb) {
          */
         function updateSimpleServices(_, next) {
             var simpleServices = [
-                'adminui', 'amon', 'amonredis', 'assets', 'ca',
+                'amon', 'amonredis', 'assets', 'ca',
                 'cnapi', 'cns', 'dhcpd', 'docker', 'fwapi', 'manta',
                 'napi', 'rabbitmq', 'redis', 'sdc', 'vmapi'
-            ].concat(HA_READY_SVCS);
+            ].concat(HA_READY_SIMPLE_SVCS);
             var handle = [];
             var remaining = [];
             var errs = [];
@@ -217,7 +222,8 @@ function coordinatePlan(opts, cb) {
                             change.insts = svcInsts;
                             handle.push(change);
                         } else {
-                            if (~HA_READY_SVCS.indexOf(change.service.name)) {
+                            if (~HA_READY_SIMPLE_SVCS.indexOf(
+                                change.service.name)) {
                                 var chInsts = forceSameImage ? svcInsts :
                                         svcInsts.filter(function (ins) {
                                             return (ins.image !==
@@ -617,45 +623,37 @@ function coordinatePlan(opts, cb) {
                     remaining.push(change);
                     return nextChange();
                 }
-                sdcadm.cnapi.getServer(change.server, function (sErr, serv) {
-                    if (sErr) {
-                        remaining.push(change);
-                        err = new UsageError('Cannot find server \'' +
-                                change.server + '\'');
-                        log.error({err: sErr}, 'createServiceInstance');
-                        return nextChange();
-                    }
 
-                    var sName = change.service.name;
-                    var allowed = ((avoid.indexOf(sName) === -1) &&
-                        (HA_READY_SVCS.indexOf(sName) !== -1 || change.force));
+                var sName = change.service.name;
+                var allowed = ((avoid.indexOf(sName) === -1) &&
+                    (ALL_HA_READY_SVCS.indexOf(sName) !== -1 ||
+                        change.force));
 
-                    if (allowed) {
-                        log.debug({
-                            numInsts: 0,
-                            svc: sName,
-                            server: change.server
-                        }, 'CreateServiceIntanceV1 create service ' +
-                        'additional instance');
-                        handle.push(change);
+                if (allowed) {
+                    log.debug({
+                        numInsts: change.servers.length,
+                        svc: sName,
+                        servers: change.servers
+                    }, 'CreateServiceIntanceV1 create service ' +
+                    'additional instances');
+                    handle.push(change);
+                } else {
+                    if (avoid.indexOf(sName) === -1) {
+                        err = new UsageError(format(
+                            'The "%s" service does not support proper ' +
+                            'operation with multiple instances. Running ' +
+                            'multiple instances is unsupported.\n(For ' +
+                            'development of Triton, this guard can be ' +
+                            'skipped with ' +
+                            '"--dev-allow-multiple-instances")',
+                            sName));
                     } else {
-                        if (avoid.indexOf(sName) === -1) {
-                            err = new UsageError(format(
-                                'The "%s" service does not support proper ' +
-                                'operation with multiple instances. Running ' +
-                                'multiple instances is unsupported.\n(For ' +
-                                'development of Triton, this guard can be ' +
-                                'skipped with ' +
-                                '"--dev-allow-multiple-instances")',
-                                sName));
-                        } else {
-                            remaining.push(change);
-                        }
+                        remaining.push(change);
                     }
+                }
 
-                    return nextChange();
+                return nextChange();
 
-                });
             }
 
             vasync.forEachPipeline({
@@ -864,98 +862,132 @@ function coordinatePlan(opts, cb) {
                     return nextChange();
                 }
 
-                sdcadm.cnapi.getServer(change.server, function (sErr, serv) {
-                    if (sErr) {
-                        nextChange(new errors.UsageError(
-                            'Cannot find server "' +
-                                change.server + '"'));
-                        return;
-                    }
-
-                    if (change.type !== 'create-instance' ||
-                        change.service.type !== 'agent') {
-                        remaining.push(change);
-                        nextChange();
-                        return;
-                    }
-
-                    if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
-                        errs.push(new errors.UsageError(format(
-                                'Creation of agent "%s" ' +
-                                'instances is not supported.',
-                                change.service.name)));
-                        remaining.push(change);
-                        nextChange();
-                        return;
-                    }
-
-                    var installedAgents = serv.agents.map(function (a) {
-                        return a.name;
-                    });
-
-                    if (installedAgents.indexOf(change.service.name) !== -1) {
-                        errs.push(new errors.UsageError(format(
-                                'Agent "%s" instance already exists on ' +
-                                'server "%s".',
-                                change.service.name, change.server)));
-                        remaining.push(change);
-                        nextChange();
-                        return;
-                    }
-
-                    var adminIp = common.serverAdminIpFromSysinfo(serv.sysinfo);
+                if (change.type !== 'create-instance' ||
+                    change.service.type !== 'agent') {
+                    remaining.push(change);
+                    nextChange();
+                    return;
+                }
 
-                    change.insts = [ {
-                        type: change.service.type,
-                        service: change.service.name,
-                        image: change.image.uuid,
-                        server: serv.uuid,
-                        hostname: serv.hostname,
-                        server_ip: adminIp,
-                        instance: null,
-                        version: change.image.version
-                    }];
+                if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
+                    errs.push(new errors.UsageError(format(
+                            'Creation of agent "%s" ' +
+                            'instances is not supported.',
+                            change.service.name)));
+                    remaining.push(change);
+                    nextChange();
+                    return;
+                }
 
-                    log.debug({
-                        numInsts: 1,
-                        svc: change.service.name,
-                        server: change.server
-                    }, 'UpdateAgentV1');
+                var arg = {
+                    insts: [],
+                    serverFromUuidOrHostname: opts.serverFromUuidOrHostname
+                };
+                vasync.pipeline({
+                    arg: arg,
+                    funcs: [
+                        function loadDockerloggerInstsServers(ctx, nextStep) {
+                            if (change.service.name !== 'dockerlogger') {
+                                nextStep();
+                                return;
+                            }
+                            sdcadm.sapi.listInstances({
+                                service_uuid: change.service.uuid
+                            }, function (sapiErr, sapiInsts) {
+                                if (sapiErr) {
+                                    errs.push(new errors.SDCClientError(
+                                        sapiErr, 'sapi'));
+                                    nextStep();
+                                    return;
+                                }
+                                var servers = sapiInsts.map(function (sIns) {
+                                    return sIns.params ?
+                                        sIns.params.server_uuid : null;
+                                }).filter(function (srv) {
+                                    return srv !== null;
+                                });
 
-                    if (change.service.name === 'dockerlogger') {
-                        sdcadm.sapi.listInstances({
-                            service_uuid: change.service.uuid
-                        }, function (sapiErr, sapiInsts) {
-                            if (sapiErr) {
-                                errs.push(new errors.SDCClientError(
-                                    sapiErr, 'sapi'));
-                                nextChange();
+                                ctx.dockerInstServers = servers;
+                                nextStep();
+                            });
+                        },
+                        function filterDockerLoggerInsts(ctx, nextStep) {
+                            if (change.service.name !== 'dockerlogger') {
+                                nextStep();
                                 return;
                             }
-                            var servers = sapiInsts.map(function (sIns) {
-                                return sIns.params ?
-                                    sIns.params.server_uuid : null;
-                            }).filter(function (srv) {
-                                return srv !== null;
+                            change.servers.forEach(function (server) {
+                                var s = ctx.serverFromUuidOrHostname[server];
+                                if (ctx.dockerInstServers.indexOf(
+                                    s.uuid) !== -1) {
+                                    errs.push(new errors.UsageError(format(
+                                        'Agent "%s" instance already exists ' +
+                                        'on server "%s".',
+                                        change.service.name, server)));
+                                    return;
+                                }
+                                ctx.insts.push({
+                                    type: change.service.type,
+                                    service: change.service.name,
+                                    image: change.image.uuid,
+                                    server: s.uuid,
+                                    hostname: s.hostname,
+                                    server_ip: common.serverAdminIpFromSysinfo(
+                                        s.sysinfo),
+                                    instance: null,
+                                    version: change.image.version
+                                });
                             });
-
-                            if (servers.indexOf(serv.uuid) !== -1) {
-                                errs.push(new errors.UsageError(format(
-                                    'Agent "%s" instance already exists on ' +
-                                    'server "%s".',
-                                    change.service.name, change.server)));
-                                nextChange();
+                            nextStep();
+                        },
+                        function filterAgentInstances(ctx, nextStep) {
+                            if (change.service.name === 'dockerlogger') {
+                                nextStep();
                                 return;
                             }
-                            handleDockerlogger.push(change);
-                            nextChange();
-                        });
+                            change.servers.forEach(function (server) {
+                                var s = ctx.serverFromUuidOrHostname[server];
+                                var installedAgents = s.agents.map(
+                                    function (a) {
+                                    return a.name;
+                                });
+
+                                if (installedAgents.indexOf(
+                                    change.service.name) !== -1) {
+                                    errs.push(new errors.UsageError(format(
+                                            'Agent "%s" instance already ' +
+                                            'exists on server "%s".',
+                                            change.service.name, server)));
+                                    return;
+                                }
+                                ctx.insts.push({
+                                    type: change.service.type,
+                                    service: change.service.name,
+                                    image: change.image.uuid,
+                                    server: s.uuid,
+                                    hostname: s.hostname,
+                                    server_ip: common.serverAdminIpFromSysinfo(
+                                        s.sysinfo),
+                                    instance: null,
+                                    version: change.image.version
+                                });
+                            });
+                            nextStep();
+                        }
+                    ]
+                }, function pipeCb() {
+                    if (!arg.insts.length) {
+                        remaining.push(change);
                     } else {
-                        handle.push(change);
-                        nextChange();
+                        change.insts = arg.insts;
+                        if (change.service.name === 'dockerlogger') {
+                            handleDockerlogger.push(change);
+                        } else {
+                            handle.push(change);
+                        }
                     }
+                    nextChange();
                 });
-
             }
 
             vasync.forEachPipeline({
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index 4e1b551..529ad1d 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -55,13 +55,26 @@ UpdateAgentV1.prototype.summarize = function uaSummarize() {
                         common.indent(sprintf('to image %s (%s@%s)',
                         img.uuid, img.name, img.version))];
         } else if (ch.type === 'create-instance') {
-            var inst = ch.insts[0];
-            out = [sprintf('create a new instance of "%s" service',
+            if (ch.insts.length > 1) {
+                out = [sprintf('create new instances of "%s" service',
                         ch.service.name),
-                        common.indent(sprintf('on server %s (%s)',
-                            inst.server, inst.hostname)),
-                        common.indent(sprintf('using image %s (%s@%s)',
-                        img.uuid, img.name, img.version))];
+                    common.indent(sprintf('using image %s (%s@%s)',
+                        img.uuid, img.name, img.version)),
+                    common.indent(sprintf('on %d servers:',
+                        ch.insts.length)),
+                    ch.insts.map(function (inst) {
+                        return common.indent(8, sprintf('%s (%s)',
+                            inst.server, inst.hostname));
+                    }).join(', ')
+                ];
+            } else {
+                out = [sprintf('create a new instance of "%s" service',
+                            ch.service.name),
+                            common.indent(sprintf('on server %s (%s)',
+                                ch.insts[0].server, ch.insts[0].hostname)),
+                            common.indent(sprintf('using image %s (%s@%s)',
+                            img.uuid, img.name, img.version))];
+            }
         }
         return out.join('\n');
     }).join('\n');
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index fdd7048..558351f 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -59,12 +59,26 @@ UpdateDockerlogger.prototype.summarize = function udSummarize() {
                         common.indent(sprintf('to image %s (%s@%s)',
                         img.uuid, img.name, img.version))];
         } else if (ch.type === 'create-instance') {
-            var inst = ch.insts[0];
-            out = ['create a new instance of "dockerlogger" service',
-                        common.indent(sprintf('on server %s (%s)',
-                            inst.server, inst.hostname)),
-                        common.indent(sprintf('using image %s (%s@%s)',
-                        img.uuid, img.name, img.version))];
+            if (ch.insts.length > 1) {
+                out = [sprintf('create new instances of "%s" service',
+                        ch.service.name),
+                    common.indent(sprintf('using image %s (%s@%s)',
+                        img.uuid, img.name, img.version)),
+                    common.indent(sprintf('on %d servers:',
+                        ch.insts.length)),
+                    ch.insts.map(function (inst) {
+                        return common.indent(8, sprintf('%s (%s)',
+                            inst.server, inst.hostname));
+                    }).join(', ')
+                ];
+            } else {
+                out = [sprintf('create a new instance of "%s" service',
+                            ch.service.name),
+                            common.indent(sprintf('on server %s (%s)',
+                                ch.insts[0].server, ch.insts[0].hostname)),
+                            common.indent(sprintf('using image %s (%s@%s)',
+                            img.uuid, img.name, img.version))];
+            }
         }
         return out.join('\n');
     }).join('\n');
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index c40529d..b466930 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -247,8 +247,8 @@ function SdcAdm(options) {
     Object.defineProperty(this, 'updates', {
         get: function () {
             if (self._updates === undefined) {
-                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) '
-                    + 'must be retrieved for client config');
+                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) ' +
+                    'must be retrieved for client config');
                 var opts = {
                     url: self.config.updatesServerUrl,
                     proxy: self.sdc.metadata.http_proxy || false,
@@ -269,8 +269,8 @@ function SdcAdm(options) {
     Object.defineProperty(this, 'imagesJo', {
         get: function () {
             if (self._imagesJo === undefined) {
-                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) '
-                    + 'must be retrieved for client config');
+                assert.object(self.sdc, 'self.sdc (the SAPI "sdc" app) ' +
+                    'must be retrieved for client config');
                 var opts = {
                     url: 'https://images.joyent.com',
                     proxy: self.sdc.metadata.http_proxy || false,
@@ -2147,8 +2147,8 @@ SdcAdm.prototype.getCandidateImages = function getCandidateImages(opts, cb) {
             }
             var filter = {
                 name: name,
-                marker: (currImgs.length > 0
-                    ? currImgs[0].published_at : undefined)
+                marker: (currImgs.length > 0 ?
+                    currImgs[0].published_at : undefined)
             };
 
             self.log.debug({filter: filter},
@@ -2276,8 +2276,9 @@ function reprovFailLock_IsLocked(cb) {
                 cb(readErr);
                 return;
             }
+            var reprovFailLock;
             try {
-                var reprovFailLock = JSON.parse(data);
+                reprovFailLock = JSON.parse(data);
             } catch (parseErr) {
                 cb(parseErr);
                 return;
@@ -2346,6 +2347,8 @@ SdcAdm.prototype.reprovFailLock_Unlock = function reprovFailLock_Unlock(cb) {
  *        do_available and do_update, we want to make some differences
  *        between these (avail for example includes sdcadm into the list of
  *        services to check for new available images).
+ *      - serverFromUuidOrHostname {Object} Optional. Collection of all servers
+ *        indexed by Uuids and Hostnames.
  * @param cb {Function} Callback of the form `function (err, plan)`.
  */
 SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
@@ -2378,6 +2381,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
     var insts;
     var plan;
 
+    if (options.serverFromUuidOrHostname) {
+        serverFromUuidOrHostname = options.serverFromUuidOrHostname;
+    }
+
     vasync.pipeline({funcs: [
         /**
          * Basic validation of keys of the changes. Validation of values is
@@ -2394,8 +2401,9 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 if (change.type === 'create-instance') {
                     // 1. create-instance
                     validateString(change.service, '"service" in ' + repr);
-                    validateString(change.server, '"server" in ' + repr);
-                    validateKeys(['type', 'server', 'service', 'image'],
+                    validateArrayOfStrings(change.servers,
+                        '"servers" in ' + repr);
+                    validateKeys(['type', 'servers', 'service', 'image'],
                         change, repr);
                 } else if (change.type === 'delete' && change.service &&
                         change.server) {
@@ -2477,6 +2485,24 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         msg + ' (string) is required'));
                 }
             }
+            function validateArrayOfStrings(arr, msg) {
+                if (!Array.isArray(arr)) {
+                    errs.push(new errors.ValidationError(
+                        JSON.stringify(arr) + ' (array) is required'));
+                }
+
+                var arrErrs = [];
+                arr.forEach(function (elm) {
+                    if (typeof (elm) !== 'string') {
+                        arrErrs.push(elm);
+                    }
+                });
+                if (arrErrs.length) {
+                    errs.push(new errors.ValidationError(
+                        JSON.stringify(arrErrs.join(', ')) +
+                        ' (array of strings) is required'));
+                }
+            }
             function validateKeys(allowed, change_, repr_) {
                 var extraKeys = Object.keys(change_).filter(function (k) {
                     return !~allowed.indexOf(k);
@@ -2490,6 +2516,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
         },
 
         function getServers(_, next) {
+            if (serverFromUuidOrHostname) {
+                next();
+                return;
+            }
             self.cnapi.listServers({
                 extras: 'sysinfo,agents'
             }, function (err, servers_) {
@@ -2511,7 +2541,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                     svcFromName[svcs[i].name] = svcs[i];
                 }
                 if (options.justAvailable) {
-                    svcFromName['sdcadm'] = {
+                    svcFromName.sdcadm = {
                         name: 'sdcadm',
                         type: 'other'
                     };
@@ -2625,8 +2655,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                     if (ch.server) {
                         found = false;
                         for (i = 0; i < servers.length; i++) {
-                            if (servers[i].uuid === ch.server ||
-                                servers[i].hostname === ch.server)
+                            if (serverFromUuidOrHostname[i].uuid ===
+                                ch.server ||
+                                serverFromUuidOrHostname[i].hostname ===
+                                ch.server)
                             {
                                 found = true;
                                 break;
@@ -2639,6 +2671,21 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         }
                     }
 
+                    if (ch.servers) {
+                        var notFound = [];
+                        ch.servers.forEach(function (s) {
+                            if (!serverFromUuidOrHostname[s]) {
+                                notFound.push(s);
+                            }
+                        });
+                        if (notFound.length) {
+                            nextChange(new errors.UpdateError(format(
+                                'unknown SDC servers "%s" from %s',
+                                notFound.join(', '), changeRepr)));
+                            return;
+                        }
+                    }
+
                     // All candidate images to `ch.images`. Just the single
                     // image if one was specified.
                     if (ch.image) {
@@ -2688,8 +2735,8 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         });
                     } else {
                         if (!updateAll && !options.noVerbose) {
-                            progress('Finding candidate update images '
-                                + 'for the "%s" service.', ch.service.name);
+                            progress('Finding candidate update images ' +
+                                'for the "%s" service.', ch.service.name);
                         }
                         // Special case for 'sdcadm', given it's not really a
                         // service and we get the images on a different way:
@@ -2956,17 +3003,21 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 } else if (ch.type === 'update-instance') {
                     checkMinPlatform(ch.instance, ch);
                 } else if (ch.type === 'create-instance') {
-                    server = serverFromUuidOrHostname[ch.server];
-                    if (server.current_platform <
-                        self.config.vmMinPlatform)
-                    {
-                        errs.push(new errors.UpdateError(format(
-                            'insufficient platform for a new service "%s" ' +
-                            'instance on server "%s" (current ' +
-                            'platform is "%s", require minimum "%s")',
-                            ch.service.name, ch.server, server.current_platform,
-                            self.config.vmMinPlatform)));
-                    }
+                    ch.servers.forEach(function (chServ) {
+                        server = serverFromUuidOrHostname[chServ];
+                        if (server.current_platform <
+                            self.config.vmMinPlatform)
+                        {
+                            errs.push(new errors.UpdateError(format(
+                                'insufficient platform for a new service ' +
+                                '"%s" instance on server "%s" (current ' +
+                                'platform is "%s", require minimum "%s")',
+                                ch.service.name, chServ,
+                                server.current_platform,
+                                self.config.vmMinPlatform)));
+                        }
+
+                    });
                 }
             }
             if (errs.length) {
@@ -3551,9 +3602,9 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                     });
                     if (droppedVers.length) {
                         droppedVers.sort(semver.compare);
-                        progress('Skipping available major sdcadm '
-                            + 'update, version %s (use --allow-major-update '
-                            + 'to allow)',
+                        progress('Skipping available major sdcadm ' +
+                            'update, version %s (use --allow-major-update ' +
+                            'to allow)',
                             droppedVers[droppedVers.length - 1]);
                     }
                 }
diff --git a/lib/steps/index.js b/lib/steps/index.js
index 12ba0a0..801697d 100644
--- a/lib/steps/index.js
+++ b/lib/steps/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -24,7 +24,8 @@ module.exports = {};
 [
     'no-rabbit',
     'update_vm_size',
-    'sapi'
+    'sapi',
+    'servers'
 ].forEach(function (modName) {
     var mod = require('./' + modName);
     Object.keys(mod).forEach(function (symbol) {
diff --git a/lib/steps/servers.js b/lib/steps/servers.js
new file mode 100644
index 0000000..3a498b4
--- /dev/null
+++ b/lib/steps/servers.js
@@ -0,0 +1,100 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+var util = require('util');
+var format = util.format;
+
+var assert = require('assert-plus');
+
+var errors = require('../errors');
+
+/*
+ * Given a list of server hostnames or UUIDs return their respective
+ * server records.
+ *
+ * - `opts` is an object which should contain a `sdcadm` instance and the
+ *      `serverNames` of the found servers.
+ * - `cb` must be a function with the arguments
+ *      `f(err, serversFound, serverByUuidOrHostname)`
+ */
+function getServersByUuidOrHostname(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.optionalObject(opts.query, 'opts.query');
+    assert.arrayOfString(opts.serverNames, 'opts.serverNames');
+    assert.func(cb, 'cb');
+
+    var sdcadm =  opts.sdcadm;
+    var query = opts.query || {};
+    var serverFromUuidOrHostname = {};
+    var serversFound;
+
+
+    sdcadm.cnapi.listServers(query, function (err, servers) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        var i;
+        for (i = 0; i < servers.length; i++) {
+            serverFromUuidOrHostname[servers[i].uuid] = servers[i];
+            serverFromUuidOrHostname[servers[i].hostname] = servers[i];
+        }
+
+        serversFound = opts.serverNames.map(function (s) {
+            return serverFromUuidOrHostname[s];
+        }).filter(function (x) {
+            return x !== undefined && x !== null;
+        });
+
+        var unsetup = [];
+        serversFound.forEach(function (s) {
+            if (!s.setup) {
+                unsetup.push(s.uuid);
+            }
+        });
+
+        if (unsetup.length) {
+            cb(new errors.UsageError(format(
+                'The following servers are not setup:\n%s\n' +
+                'Please make sure to setup these servers ' +
+                'or remove them from the list of servers.',
+                unsetup.join(', '))));
+            return;
+        }
+
+
+        var notRunning = [];
+        serversFound.forEach(function (srv) {
+            if (srv.status !== 'running' ||
+                (srv.status === 'running' && srv.transitional_status !== '')) {
+                notRunning.push(srv.uuid);
+            }
+        });
+
+        if (notRunning.length) {
+            cb(new errors.UsageError(format(
+                'The following servers are not running:\n%s\n' +
+                'Please make sure of these servers are running ' +
+                'or remove them from the list of servers.',
+                notRunning.join(', '))));
+            return;
+        }
+
+        cb(null, serversFound, serverFromUuidOrHostname);
+    });
+}
+
+//---- exports
+
+module.exports = {
+    getServersByUuidOrHostname: getServersByUuidOrHostname
+};
+
+// vim: set softtabstop=4 shiftwidth=4:
diff --git a/man/man1/sdcadm.1.ronn b/man/man1/sdcadm.1.ronn
index 245fce8..90b8b05 100644
--- a/man/man1/sdcadm.1.ronn
+++ b/man/man1/sdcadm.1.ronn
@@ -257,7 +257,7 @@ rollback the services/instances listed into the provided plan file.
 
 ### sdcadm create \[options\] svc
 
-Create an instance for an existing SDC service.
+Create one or more instances for an existing SDC service.
 
 Note that in order to create an instance of some services the option
 --dev-allow-multiple-instances must be specified, given that those
@@ -277,8 +277,9 @@ alternate choice provided by post-setup subcommand.
 `-i ARG, --image=ARG`
     UUID of the Image to be used for the instance.
 
-`-s ARG, --server=ARG`
-    The UUID for the target server.
+`-s STRING, --servers=STRING`
+    Comma separated list of servers (either hostnames or uuids)
+    on which to create the instance(s).
 
 `-y, --yes`
     Answer yes to all confirmations.
-- 
2.21.0

