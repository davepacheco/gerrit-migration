commit cf2a54b11556cec98cb327d26902c1ae97bcc466 (refs/changes/79/3279/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2018-01-30T15:49:43-08:00 (1 year, 8 months ago)
    
    TRITON-93 Routes are not populated consistently when provisioning new instances

diff --git a/src/vm/lib/metadata/agent.js b/src/vm/lib/metadata/agent.js
index e340892e..df2993dc 100644
--- a/src/vm/lib/metadata/agent.js
+++ b/src/vm/lib/metadata/agent.js
@@ -156,6 +156,7 @@ var path = require('path');
 var util = require('util');
 var vasync = require('vasync');
 var VM = require('/usr/vm/node_modules/VM');
+var vmload = require('/usr/vm/node_modules/vmload');
 var ZWatch = require('./zwatch');
 
 var sdc_fields = [
@@ -357,40 +358,38 @@ MetadataAgent.prototype.updateZone = function updateZone(zonename, callback) {
             return;
         }
 
-        // We do have a cached version, we'll reload only if timestamp of the
-        // XML file changed. The vmadm operations we care about will "touch"
-        // this file to update the last_modified if they don't change it
-        // directly.
-        fs.stat('/etc/zones/' + zonename + '.xml', function (err, stats) {
-            var old_mtime;
-
-            if (err && err.code === 'ENOENT') {
-                // VM has disappeared, purge from cache
-                self.purgeZoneCache(zonename);
-                cb(null, false);
-                return;
-            } else if (err) {
-                log.error({err: err, zonename: zonename},
-                    'cannot fs.stat(), reloading');
-                cb(err);
-                return;
-            }
-
-            // we just did a successful stat, we really should have
-            // self.zones[zonename]
-            assert.object(self.zones[zonename], 'self.zones[' + zonename + ']');
+        // We do have a cached version, we'll reload only if its last modified
+        // timestamp changed.
+        vmload.getLastModified(zonename, path.join('/zones', zonename), log,
+            function onLastModifiedLoaded(getLastModErr, lastModified) {
+                var old_mtime;
+
+                if (getLastModErr) {
+                    // We couldn't find the last modified time for this zone,
+                    // the VM probably disappeared, so we're removing it from
+                    // the cache.
+                    self.purgeZoneCache(zonename);
+                    cb(null, false);
+                    return;
+                }
 
-            old_mtime = (new Date(self.zones[zonename].last_modified));
-            if (stats.mtime.getTime() > old_mtime.getTime()) {
-                log.info({zonename: zonename},
-                    'last_modified was updated, reloading');
-                cb(null, true);
-                return;
-            }
+                // We just retrieved the last modified time for the zone, which
+                // means it exists, so we really should have
+                // self.zones[zonename],
+                assert.object(self.zones[zonename],
+                    'self.zones[' + zonename + ']');
+
+                old_mtime = (new Date(self.zones[zonename].last_modified));
+                if (lastModified > old_mtime.getTime()) {
+                    log.info({zonename: zonename},
+                        'last_modified was updated, reloading');
+                    cb(null, true);
+                    return;
+                }
 
-            log.trace('using cache for: ' + zonename);
-            cb(null, false);
-        });
+                log.trace('using cache for: ' + zonename);
+                cb(null, false);
+            });
     }
 
     shouldLoad(function (err, load) {
diff --git a/src/vm/node_modules/vmload/index.js b/src/vm/node_modules/vmload/index.js
index 16476b2f..c8ab9a92 100644
--- a/src/vm/node_modules/vmload/index.js
+++ b/src/vm/node_modules/vmload/index.js
@@ -1535,6 +1535,7 @@ function loadZonexmlObjects(uuid, cache, options, callback)
 }
 
 module.exports = {
+    getLastModified: getLastModified,
     getVmobj: getVmobj,
     getVmobjs: getVmobjs,
     getZoneData: getZoneData
