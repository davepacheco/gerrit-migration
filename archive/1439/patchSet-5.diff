commit 0b013f0c7fa21f9891603dc17453ed6f9441f1e7 (refs/changes/39/1439/5)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2017-03-27T17:47:15+13:00 (2 years, 6 months ago)
    
    DAPI-335: Allow operator to specify a minimum free disk space threshold

diff --git a/docs/index.md b/docs/index.md
index 6bd6c44..a387eb3 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -428,9 +428,10 @@ aware that you'll need to add the custom file back after any DAPI zone upgrade.
 | hard-filter-invalid-servers     | Removes any server objects which don't pass validation      |
 | hard-filter-large-servers       | Removes the top 15% servers with the most available RAM     |
 | hard-filter-locality-hints      | Tries to place VM near or far from other given VMs, with strict placement |
-| hard-filter-min-cpu             | Removes CNs with insufficient CPU                           |
-| hard-filter-min-disk            | Removes CNs with insufficient disk                          |
-| hard-filter-min-ram             | Removes CNs with insufficient RAM                           |
+| hard-filter-min-cpu             | Removes CNs with insufficient unreserved CPU                |
+| hard-filter-min-disk            | Removes CNs with insufficient unreserved disk               |
+| hard-filter-min-ram             | Removes CNs with insufficient unreserved RAM                |
+| hard-filter-min-free-disk       | Removes CNs with insufficient free disk                     |
 | hard-filter-overprovision-ratios | Removes CNs with different overprovision ratios than the request    |
 | hard-filter-platform-versions   | Removes servers that don't pass image manifest platform requirements |
 | hard-filter-reserved            | Removes reserved CNs                                        |
diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index 190955c..e23e8e4 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -37,7 +37,7 @@ filterMinDisk(servers, opts, cb)
 	var filter;
 
 	if (typeof (override) !== 'undefined' && !override) {
-		reasons.skip = 'Do not filter out based on minimum free disk';
+		reasons.skip = 'Do not filter out based on unreserved disk';
 		return (cb(null, servers, reasons));
 	}
 
diff --git a/lib/algorithms/hard-filter-min-free-disk.js b/lib/algorithms/hard-filter-min-free-disk.js
new file mode 100644
index 0000000..1efcc83
--- /dev/null
+++ b/lib/algorithms/hard-filter-min-free-disk.js
@@ -0,0 +1,54 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Returns servers which have more that a minumum amount of free disk.
+ */
+
+var assert = require('assert-plus');
+
+var MiB = 1024 * 1024;
+
+function
+filterMinFreeDisk(servers, opts, cb)
+{
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.object(opts.defaults, 'opts.defaults');
+	assert.func(cb, 'cb');
+
+	var reasons = {};
+	var requiredFreeDisk = opts.defaults.minimum_free_disk; // in MiB
+
+	if (requiredFreeDisk === undefined) {
+		reasons.skip = 'No minimum free disk set';
+		return (cb(null, servers, reasons));
+	}
+
+	function filter(server) {
+		var freeDisk = (server.disk_pool_size_bytes -
+			server.disk_pool_alloc_bytes) / MiB;
+
+		if (freeDisk >= +requiredFreeDisk)
+			return (true);
+
+		reasons[server.uuid] = 'Server requires ' + requiredFreeDisk +
+			'MB free disk, but only has ' + freeDisk + 'MB';
+
+		return (false);
+	}
+
+	return (cb(null, servers.filter(filter), reasons));
+}
+
+module.exports = {
+	name: 'Servers with enough free disk',
+	run: filterMinFreeDisk
+};
diff --git a/test/algorithms/hard-filter-min-disk.test.js b/test/algorithms/hard-filter-min-disk.test.js
index 6ea77ef..88fb772 100644
--- a/test/algorithms/hard-filter-min-disk.test.js
+++ b/test/algorithms/hard-filter-min-disk.test.js
@@ -112,7 +112,7 @@ test('filterMinDisk() with override', function (t) {
 
 	var expectServers = servers;
 	var expectReasons = {
-		skip: 'Do not filter out based on minimum free disk'
+		skip: 'Do not filter out based on unreserved disk'
 	};
 
 	var opts = {
diff --git a/test/algorithms/hard-filter-min-free-disk.test.js b/test/algorithms/hard-filter-min-free-disk.test.js
new file mode 100644
index 0000000..63e173c
--- /dev/null
+++ b/test/algorithms/hard-filter-min-free-disk.test.js
@@ -0,0 +1,98 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var test = require('tape');
+var filter = require('../../lib/algorithms/hard-filter-min-free-disk.js');
+var common = require('./common.js');
+
+
+var MiB = 1024 * 1024;
+var GiB = 1024 * MiB;
+var TiB = 1024 * GiB;
+
+var checkFilter = common.createPluginChecker(filter);
+
+
+test('filterMinFreeDisk()', function (t) {
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		disk_pool_size_bytes: 4 * TiB,
+		disk_pool_alloc_bytes: 3 * TiB
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		disk_pool_size_bytes: 4 * TiB,
+		disk_pool_alloc_bytes: 2 * TiB
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		disk_pool_size_bytes: 8 * TiB,
+		disk_pool_alloc_bytes: 7 * TiB
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		disk_pool_size_bytes: 8 * TiB,
+		disk_pool_alloc_bytes: 4 * TiB
+	} ];
+
+	var expectServers = [servers[1], servers[3]];
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf': 'Server requires 1572864MB free disk, but only has 1048576MB',
+		'f07f6c2c-8f9c-4b77-89fe-4b777dff5826': 'Server requires 1572864MB free disk, but only has 1048576MB'
+		/* END JSSTYLED */
+	};
+
+	var opts = { defaults: { minimum_free_disk: 1.5 * 1024 * 1024 } };
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterMinDisk() without default', function (t) {
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		disk_pool_size_bytes: 4 * TiB,
+		disk_pool_alloc_bytes: 3 * TiB
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		disk_pool_size_bytes: 4 * TiB,
+		disk_pool_alloc_bytes: 2 * TiB
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		disk_pool_size_bytes: 8 * TiB,
+		disk_pool_alloc_bytes: 7 * TiB
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		disk_pool_size_bytes: 8 * TiB,
+		disk_pool_alloc_bytes: 4 * TiB
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = { skip: 'No minimum free disk set' };
+	var opts = { defaults: {} };
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterMinDisk() with no servers', function (t) {
+	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
+	var opts = { defaults: { minimum_free_disk: 1.5 * 1024 } };
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('name', function (t) {
+	t.equal(typeof (filter.name), 'string');
+	t.end();
+});
diff --git a/test/allocator.test.js b/test/allocator.test.js
index e4cf7ac..d55dc7c 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -799,6 +799,7 @@ test('load available algorithms', function (t) {
 		'hard-filter-locality-hints',
 		'hard-filter-min-cpu',
 		'hard-filter-min-disk',
+		'hard-filter-min-free-disk',
 		'hard-filter-min-ram',
 		'hard-filter-overprovision-ratios',
 		'hard-filter-owners-servers',
