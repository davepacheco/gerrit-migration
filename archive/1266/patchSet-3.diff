From de940e111855b33123978213379d1fc66048fa59 Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@joyent.com>
Date: Tue, 17 Jan 2017 19:59:13 +0000
Subject: [PATCH] MANTA-3093 mako test suite is doa Reviewed by: Patrick Mooney
 <patrick.mooney@joyent.com> Approved by: Patrick Mooney
 <patrick.mooney@joyent.com>

---
 README.md        |  18 ++++-
 test/api.test.js | 177 +++++++++++------------------------------------
 2 files changed, 59 insertions(+), 136 deletions(-)

diff --git a/README.md b/README.md
index fff3aa9..9899fe4 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017 Joyent, Inc.
 -->
 
 # manta-mako
@@ -57,3 +57,19 @@ changes and:
     $ git diff --cached #to check the submodule git SHA
 
 Then you can commit and push like any other change.
+
+## Testing
+
+To run the mako test suite, you need to be able to run nginx in your
+zone. The following should be run as a root user (or by a user who can
+use pfexec as the primary administrator):
+
+1. `gmake release`
+2. Manually edit `build/nginx/conf/nginx.conf` to clean up the sapi manifest
+2. `mkdir /manta`
+3. `chmod 770 /manta`
+4. `chown nobody:staff /manta`
+5. Manually start nginx, by running `build/nginx/objs/nginx`
+6. Run the test suite by running `gmake test`
+7. When finished, kill the nginx processes with something like `pkill -9 nginx`
+7. When finished, clean out any left over temporary data via `rm -rf /manta/*`
diff --git a/test/api.test.js b/test/api.test.js
index f855700..5e86f06 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /* Test the Mako API endpoints */
@@ -66,22 +66,6 @@ var getNonexistentObject = function (t) {
         });
 };
 
-var getObjectCount = function (callback) {
-        options.method = 'HEAD';
-        options.path = '/';
-
-        var req = http.request(options, function (res) {
-                var count = parseInt(res.headers['x-mako-object-count'], 10);
-                return (callback(null, count));
-        });
-        req.end();
-
-        req.on('error', function (err) {
-                console.log('problem with request: ' + err.message);
-                return (callback(err));
-        });
-};
-
 test('setup', function (t) {
         fs.mkdirSync(TEST_DIR);
         createFile(file, 10 * 1024 * 1024, function () {
@@ -116,29 +100,6 @@ test('put 10 MiB object', function (t) {
         });
 });
 
-test('put existing object', function (t) {
-        options.method = 'PUT';
-        options.path = '/' + filename;
-
-        var req = http.request(options, function (res) {
-                console.log('STATUS: ' + res.statusCode);
-                console.log('HEADERS: ' + JSON.stringify(res.headers));
-                t.equal(res.statusCode, 405);
-                t.end();
-        });
-
-        req.on('error', function (err) {
-                console.log('problem with request: ' + err.message);
-                t.ok(false, err.message);
-                t.end();
-        });
-
-        fs.readFile(file, function (err, contents) {
-                req.write(contents);
-                req.end();
-        });
-});
-
 test('get 10 MiB object', function (t) {
         options.method = 'GET';
         options.path = '/' + filename;
@@ -168,107 +129,53 @@ test('get 10 MiB object', function (t) {
         });
 });
 
-test('delete 10 MiB object', function (t) {
-        options.method = 'DELETE';
-        options.path = '/' + filename;
-
-        var req = http.request(options, function (res) {
-                console.log('STATUS: ' + res.statusCode);
-                console.log('HEADERS: ' + JSON.stringify(res.headers));
-
-                t.equal(res.statusCode, 204);
-
-                options.method = 'GET';
-
-                getNonexistentObject(t);
-        });
-        req.end();
-
-        req.on('error', function (err) {
-                console.log('problem with request: ' + err.message);
-                t.ok(false, err.message);
-                t.end();
-        });
-});
-
-test('object no longer exists after delete', function (t) {
-        getNonexistentObject(t);
-});
-
-test('HEAD / reports number of objects', function (t) {
-        options.method = 'HEAD';
-        options.path = '/';
-
-        var req = http.request(options, function (res) {
-                console.log('STATUS: ' + res.statusCode);
-                console.log('HEADERS: ' + JSON.stringify(res.headers));
-
-                var count = parseInt(res.headers['x-mako-object-count'], 10);
-                t.ok(count !== NaN);
-                t.type(count, 'number', 'HEAD / returns a number');
-                t.end();
-        });
-        req.end();
-
-        req.on('error', function (err) {
-                console.log('problem with request: ' + err.message);
-                t.ok(false, err.message);
-                t.end();
-        });
-});
-
 test('100s of small files', function (t) {
-        getObjectCount(function (err, count) {
-                var files = [];
-                for (var ii = 0; ii < 200; ii++)
-                        files.push(uuid.v4());
-
-                async.series([ function (callback) {
-                        async.forEach(files, function (f, subcb) {
-                                createFile(path.join(TEST_DIR, f),
-                                    131072 * 10, function (suberr) {
-                                        return (subcb(suberr));
-                                });
-                        }, function (suberr) {
-                                if (suberr) {
-                                        t.ok(false, suberr.message);
-                                        t.end();
-                                        return (callback(suberr));
-                                }
-                                return (callback(null));
+        var files = [];
+        for (var ii = 0; ii < 200; ii++)
+                files.push(uuid.v4());
+
+        async.series([ function (callback) {
+                async.forEach(files, function (f, subcb) {
+                        createFile(path.join(TEST_DIR, f),
+                            131072 * 10, function (suberr) {
+                                return (subcb(suberr));
                         });
-                }, function (callback) {
-                        async.forEach(files, function (f, subcb) {
-                                options.method = 'PUT';
-                                options.path = '/' + f;
-
-                                var req = http.request(options,
-                                    function (res) {
-                                        t.equal(res.statusCode, 201);
-                                        return (subcb(null));
-                                });
-
-                                req.on('error', function (suberr) {
-                                        console.log('problem with request: ' +
-                                            suberr.message);
-                                        t.ok(false, suberr.message);
-                                        t.end();
-                                });
-
-                                fs.readFile(path.join(TEST_DIR, f),
-                                    function (suberr, contents) {
-                                        req.write(contents);
-                                        req.end();
-                                });
-                        }, function (suberr) {
-                                return (callback(null));
+                }, function (suberr) {
+                        if (suberr) {
+                                t.ok(false, suberr.message);
+                                t.end();
+                                return (callback(suberr));
+                        }
+                        return (callback(null));
+                });
+        }, function (callback) {
+                async.forEach(files, function (f, subcb) {
+                        options.method = 'PUT';
+                        options.path = '/' + f;
+
+                        var req = http.request(options,
+                            function (res) {
+                                t.equal(res.statusCode, 201);
+                                return (subcb(null));
                         });
-                }], function (suberr, results) {
-                        getObjectCount(function (subsuberr, newCount) {
-                                t.ok(count + 200 === newCount);
+
+                        req.on('error', function (suberr) {
+                                console.log('problem with request: ' +
+                                    suberr.message);
+                                t.ok(false, suberr.message);
                                 t.end();
                         });
+
+                        fs.readFile(path.join(TEST_DIR, f),
+                            function (suberr, contents) {
+                                req.write(contents);
+                                req.end();
+                        });
+                }, function (suberr) {
+                        return (callback(null));
                 });
+        }], function (suberr, results) {
+                t.end();
         });
 });
 
-- 
2.21.0

