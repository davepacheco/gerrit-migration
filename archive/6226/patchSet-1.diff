commit 228ec70f9b2e7850fc6b3fef28baacfb24592e89
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-05-10T07:47:40-06:00 (5 months ago)
    
    MANTA-4260 Update electric-boray for MANTA-4241 node-boray changes

diff --git a/lib/moray_client.js b/lib/boray_client.js
similarity index 65%
rename from lib/moray_client.js
rename to lib/boray_client.js
index 0f85b2d..95f1b4a 100644
--- a/lib/moray_client.js
+++ b/lib/boray_client.js
@@ -16,16 +16,16 @@ var url = require('url');
 var verror = require('verror');
 
 /*
- * Create moray clients in order to interact with moray instances.  Available
- * moray clients are listed in the ring configuration in LevelDB, which we
- * access in electric moray via node-fash.
+ * Create boray clients in order to interact with boray instances.  Available
+ * boray clients are listed in the ring configuration in LevelDB, which we
+ * access in electric boray via node-fash.
  */
 function createClient(options, callback) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.ring, 'options.ring');
     assert.array(options.pnodes, 'options.pnodes');
-    assert.object(options.morayOptions, 'options.morayOptions');
+    assert.object(options.borayOptions, 'options.borayOptions');
     assert.func(callback, 'options.callback');
 
     var log = options.log;
@@ -47,28 +47,28 @@ function createClient(options, callback) {
 
             log.info({
                 url: pnodeUrl
-            }, 'creating moray client');
+            }, 'creating boray client');
 
-            var morayargs = clone(options.morayOptions);
-            if (!morayargs.cueballOptions) {
-                morayargs.cueballOptions = {};
+            var borayargs = clone(options.borayOptions);
+            if (!borayargs.cueballOptions) {
+                borayargs.cueballOptions = {};
             }
-            morayargs.unwrapErrors = true;
-            morayargs.srvDomain = pnodeUrl.hostname;
-            morayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
-            morayargs.log = options.log.child({
-                component: 'moray-client-' + pnodeUrl.hostname
+            borayargs.unwrapErrors = true;
+            borayargs.srvDomain = pnodeUrl.hostname;
+            borayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
+            borayargs.log = options.log.child({
+                component: 'boray-client-' + pnodeUrl.hostname
             });
 
-            var client = boray.createClient(morayargs);
+            var client = boray.createClient(borayargs);
             clientMap[pnode] = client;
             clientArray.push(client);
 
             if (clientArray.length === pnodes.length) {
                 // write ready cookie when clients have connected
-                log.info('all moray clients instantiated writing ready cookie');
+                log.info('all boray clients instantiated writing ready cookie');
                 try {
-                    fs.writeFileSync('/var/tmp/electric-moray-ready', null);
+                    fs.writeFileSync('/var/tmp/electric-boray-ready', null);
                 } catch (e) {
                     throw new verror.VError(e, 'unable to write ready cookie');
                 }
@@ -76,7 +76,7 @@ function createClient(options, callback) {
         });
 
         if (clientArray.length <= 0) {
-            throw new verror.VError('No moray clients exist!');
+            throw new verror.VError('No boray clients exist!');
         }
 
         return callback(null, {
@@ -90,7 +90,7 @@ function createBucketClient(options, callback) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.array(options.pnodes, 'options.pnodes');
-    assert.object(options.morayOptions, 'options.morayOptions');
+    assert.object(options.borayOptions, 'options.borayOptions');
     assert.func(callback, 'options.callback');
 
     var log = options.log;
@@ -107,28 +107,28 @@ function createBucketClient(options, callback) {
 
         log.info({
             url: pnodeUrl
-        }, 'creating moray client');
+        }, 'creating boray client');
 
-        var morayargs = clone(options.morayOptions);
-        if (!morayargs.cueballOptions) {
-            morayargs.cueballOptions = {};
+        var borayargs = clone(options.borayOptions);
+        if (!borayargs.cueballOptions) {
+            borayargs.cueballOptions = {};
         }
-        morayargs.unwrapErrors = true;
-        morayargs.host = pnodeUrl.hostname;
-        morayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
-        morayargs.log = options.log.child({
-            component: 'moray-client-' + pnodeUrl.hostname
+        borayargs.unwrapErrors = true;
+        borayargs.host = pnodeUrl.hostname;
+        borayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
+        borayargs.log = options.log.child({
+            component: 'boray-client-' + pnodeUrl.hostname
         });
 
-        var client = boray.createClient(morayargs);
+        var client = boray.createClient(borayargs);
         clientMap[pnode] = client;
         clientArray.push(client);
 
         if (clientArray.length === pnodes.length) {
             // write ready cookie when clients have connected
-            log.info('all moray clients instantiated writing ready cookie');
+            log.info('all boray clients instantiated writing ready cookie');
             try {
-                fs.writeFileSync('/var/tmp/electric-moray-ready', null);
+                fs.writeFileSync('/var/tmp/electric-boray-ready', null);
             } catch (e) {
                 throw new verror.VError(e, 'unable to write ready cookie');
             }
@@ -136,7 +136,7 @@ function createBucketClient(options, callback) {
     });
 
     if (clientArray.length <= 0) {
-        throw new verror.VError('No moray clients exist!');
+        throw new verror.VError('No boray clients exist!');
     }
 
     return callback(null, {
diff --git a/lib/server.js b/lib/server.js
index ccecc76..4a80b68 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -22,7 +22,7 @@ var uuid = require('node-uuid');
 var vasync = require('vasync');
 var verror = require('verror');
 
-var moray_client = require('./moray_client');
+var boray_client = require('./boray_client');
 var errors = require('./errors');
 var data_placement = require('./data_placement');
 
@@ -243,7 +243,7 @@ function createServer(options, callback) {
         opts.dataDirector = dataDirector;
 
         log.info('creating moray clients');
-        moray_client.createBucketClient({
+        boray_client.createBucketClient({
             pnodes: opts.dataDirector.getPnodes(),
             morayOptions: options.morayOptions,
             log: options.log
@@ -279,8 +279,8 @@ function createServer(options, callback) {
                 { rpcmethod: 'deletebucket', rpchandler: delBucket(opts) },
                 { rpcmethod: 'listbuckets', rpchandler: listBuckets(opts) },
                 { rpcmethod: 'getobject', rpchandler: getObject(opts) },
-                { rpcmethod: 'putobject', rpchandler: putObject(opts) },
-                { rpcmethod: 'deleteobject', rpchandler: delObject(opts) },
+                { rpcmethod: 'putobject', rpchandler: createObject(opts) },
+                { rpcmethod: 'deleteobject', rpchandler: deleteObject(opts) },
                 { rpcmethod: 'listobjects', rpchandler: listObjects(opts) }
             ];
 
@@ -408,8 +408,8 @@ function createBucket(options) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
+        var owner = argv[0];
+        var bucket = argv[1];
 
         var id = options.req_id || uuid.v1();
 
@@ -422,11 +422,12 @@ function createBucket(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b
+            owner: owner,
+            bucket: bucket
         }, 'createBucket: entered');
 
-        options.dataDirector.getBucketLocation(o, b, function (err, location) {
+        options.dataDirector.getBucketLocation(owner, bucket,
+            function (err, location) {
             if (err) {
                 rpc.fail(err);
                 return;
@@ -439,7 +440,7 @@ function createBucket(options) {
 
             log.info('client: ' + client);
 
-            client.createBucket(o, b, vnode, function (pErr, meta) {
+            client.createBucket(owner, bucket, vnode, function (pErr, meta) {
                 log.debug({
                     err: pErr,
                     meta: meta
@@ -478,8 +479,8 @@ function getBucket(options) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
+        var owner = argv[0];
+        var bucket = argv[1];
 
         var id = options.req_id || uuid.v1();
         var log = options.log.child({
@@ -487,11 +488,12 @@ function getBucket(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b
+            owner: owner,
+            bucket: bucket
         }, 'getBucket: entered');
 
-        options.dataDirector.getBucketLocation(o, b, function (err, location) {
+        options.dataDirector.getBucketLocation(owner, bucket,
+            function (err, location) {
             if (err) {
                 rpc.fail(err);
                 return;
@@ -500,7 +502,7 @@ function getBucket(options) {
             var vnode = location.vnode;
             var pnode = location.pnode;
 
-            options.clients.map[pnode].getBucket(o, b, vnode,
+            options.clients.map[pnode].getBucket(owner, bucket, vnode,
                 function (gErr, rbucket) {
                 log.debug({
                     err: gErr,
@@ -541,8 +543,8 @@ function delBucket(options) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
+        var owner = argv[0];
+        var bucket = argv[1];
 
         var id = options.req_id || uuid.v1();
         var log = options.log.child({
@@ -550,11 +552,12 @@ function delBucket(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b
+            owner: owner,
+            bucket: bucket
         }, 'deleteBucket: entered');
 
-        options.dataDirector.getBucketLocation(o, b, function (err, location) {
+        options.dataDirector.getBucketLocation(owner, bucket,
+            function (err, location) {
             if (err) {
                 rpc.fail(err);
                 return;
@@ -563,7 +566,7 @@ function delBucket(options) {
             var vnode = location.vnode;
             var pnode = location.pnode;
 
-            options.clients.map[pnode].deleteBucket(o, b, vnode,
+            options.clients.map[pnode].deleteBucket(owner, bucket, vnode,
                 function (gErr, rbucket) {
                 log.debug({
                     err: gErr,
@@ -707,21 +710,21 @@ function listBuckets(options) {
 }
 
 
-function putObject(options) {
+function createObject(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.clients, 'options.clients');
 
-    function _putObject(rpc) {
+    function _createObject(rpc) {
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, PO_ARGS_SCHEMA)) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
-        var k = argv[2];
+        var owner = argv[0];
+        var bucket = argv[1];
+        var key = argv[2];
         var content_length = argv[3];
         var content_md5 = argv[4];
         var content_type = argv[5];
@@ -740,35 +743,35 @@ function putObject(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b,
-            key: k
-        }, 'putObject: entered');
+            owner: owner,
+            bucket: bucket,
+            key: key
+        }, 'createObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k,
+        options.dataDirector.getObjectLocation(owner, bucket, key,
             function (err, location) {
+                if (err) {
+                    rpc.fail(err);
+                    return;
+                }
 
-            if (err) {
-                rpc.fail(err);
-                return;
-            }
-
-            var vnode = location.vnode;
-            var pnode = location.pnode;
-            var client = options.clients.map[pnode];
+                var vnode = location.vnode;
+                var pnode = location.pnode;
+                var client = options.clients.map[pnode];
 
-            if (props.constructor === Object &&
-                Object.keys(props).length === 0) {
+                if (props.constructor === Object &&
+                    Object.keys(props).length === 0) {
 
-                props = null;
-            }
+                    props = null;
+                }
 
-            client.putObject(o, b, k, content_length, content_md5, content_type,
-                headers, sharks, props, vnode, function (pErr, meta) {
+                client.createObject(owner, bucket, key, content_length,
+                    content_md5, content_type, headers, sharks, props, vnode,
+                    function (pErr, meta) {
                 log.debug({
                     err: pErr,
                     meta: meta
-                }, 'putObject: returned');
+                }, 'createObject: returned');
 
                 // dtrace['putobject-done'].fire(function () {
                 //     return ([msgid]);
@@ -787,7 +790,7 @@ function putObject(options) {
         });
     }
 
-    return _putObject;
+    return _createObject;
 }
 
 
@@ -803,9 +806,9 @@ function getObject(options) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
-        var k = argv[2];
+        var owner = argv[0];
+        var bucket = argv[1];
+        var key = argv[2];
 
         var id = options.req_id || uuid.v1();
 
@@ -818,12 +821,12 @@ function getObject(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b,
-            key: k
+            owner: owner,
+            bucket: bucket,
+            key: key
         }, 'getObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k,
+        options.dataDirector.getObjectLocation(owner, bucket, key,
             function (err, location) {
 
             if (err) {
@@ -835,7 +838,7 @@ function getObject(options) {
             var vnode = location.vnode;
             var client = options.clients.map[pnode];
 
-            client.getObject(o, b, k, vnode, function (gErr, obj) {
+            client.getObject(owner, bucket, key, vnode, function (gErr, obj) {
                 log.debug({
                     err: gErr,
                     obj: obj
@@ -867,21 +870,21 @@ function getObject(options) {
     return _getObject;
 }
 
-function delObject(options) {
+function deleteObject(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.clients, 'options.clients');
 
-    function _delObject(rpc) {
+    function _deleteObject(rpc) {
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GO_ARGS_SCHEMA)) {
             return;
         }
 
-        var o = argv[0];
-        var b = argv[1];
-        var k = argv[2];
+        var owner = argv[0];
+        var bucket = argv[1];
+        var key = argv[2];
 
         var id = options.req_id || uuid.v1();
 
@@ -894,12 +897,12 @@ function delObject(options) {
         });
 
         log.debug({
-            owner: o,
-            bucket: b,
-            key: k
-        }, 'delObject: entered');
+            owner: owner,
+            bucket: bucket,
+            key: key
+        }, 'deleteObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k,
+        options.dataDirector.getObjectLocation(owner, bucket, key,
             function (err, location) {
 
             if (err) {
@@ -911,11 +914,12 @@ function delObject(options) {
             var vnode = location.vnode;
             var client = options.clients.map[pnode];
 
-            client.deleteObject(o, b, k, vnode, function (gErr, obj) {
+            client.deleteObject(owner, bucket, key, vnode,
+                function (gErr, obj) {
                 log.debug({
                     err: gErr,
                     obj: obj
-                }, 'delObject: returned');
+                }, 'deleteObject: returned');
 
                 // MANTA-1400: set the vnode info for debugging purposes
                 if (obj) {
@@ -939,7 +943,7 @@ function delObject(options) {
         });
     }
 
-    return _delObject;
+    return _deleteObject;
 }
 
 function listObjects(options) {
