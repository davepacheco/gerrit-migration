commit ed66db6b9ab92bcb16a0159ad989d2b2d9c79c2a (refs/changes/00/3200/4)
Author: Jordan Hendricks <jordan.hendricks@joyent.com>
Date:   2018-01-12T23:15:14+00:00 (1 year, 9 months ago)
    
    MANTA-3321 Need public documentation for multipart uploads
    MANTA-3548 API docs lead users astray in generating MANTA_KEY_ID

diff --git a/docs/operator-guide.md b/docs/operator-guide.md
index 323d7e4..912d76d 100644
--- a/docs/operator-guide.md
+++ b/docs/operator-guide.md
@@ -10,7 +10,7 @@ apisections: .
 -->
 
 <!--
-    Copyright (c) 2017, Joyent, Inc.
+    Copyright (c) 2018, Joyent, Inc.
 -->
 
 # Operator's Guide for Manta, Triton's object storage and converged analytics solution
@@ -349,6 +349,8 @@ handles PUT/GET/DELETE requests to the front door, including requests to:
 * create, list, and delete directories
 * create compute jobs, submit input, end input, fetch inputs, fetch outputs,
   fetch errors, and cancel jobs
+* create multipart uploads, upload parts, fetch multipart upload state, commit
+  multipart uploads, and abort multipart uploads
 
 ### Objects and directories
 
@@ -357,7 +359,7 @@ Requests for objects and directories involve:
 * validating the request
 * authenticating the user (via mahi, the auth cache)
 * looking up the requested object's metadata (via electric moray)
-* authorizing the user for access to the specifed resource
+* authorizing the user for access to the specified resource
 
 For requests on directories and zero-byte objects, the last step is to update or
 return the right metadata.
@@ -490,6 +492,33 @@ them.  For example, supervisors poll for tasks assigned to them that have been
 completed but not committed and agents poll for tasks assigned to them that have
 been dispatched but not accepted.
 
+## Multipart uploads
+
+Multipart uploads provide an alternate way for users to upload Manta objects.
+The user creates the multipart upload, uploads the object in parts, and exposes
+the object in Manta by committing the multipart upload.  Generally, these
+operations are implemented using existing Manta constructs:
+
+* Parts are normal Manta objects, with a few key differences.  Users cannot use
+  the GET, POST or DELETE HTTP methods on parts.  Additionally, all parts are
+  co-located on the same set of storage nodes, which are selected when the
+  multipart upload is created.
+* All parts for a given multipart upload are stored in a parts directory, which
+  is a normal Manta directory.
+* Part directories are stored in the top-level `/$MANTA_USER/uploads` directory
+  tree.
+
+Most of the logic for multipart uploads is performed by muskie, but there are
+some additional features of the system only used for multipart uploads:
+
+* the **manta_uploads** bucket in Postgres stores **finalizing records** for a
+  given shard.  A finalizing record is inserted atomically with the target
+  object record when a multipart upload is committed.
+* the mako zones have a custom **mako-finalize** operation invoked by muskie
+  when a multipart upload is committed. This operation creates the target object
+  from the parts and subsequently deletes the parts from disk.  This operation
+  is invoked on all storage nodes that will contain the target object when the
+  multipart upload is committed.
 
 ## Garbage collection, auditing, and metering
 
@@ -506,6 +535,21 @@ which objects can safely be deleted.  These delete requests are batched and sent
 to each storage node, which moves the objects to a "tombstone" area.  Objects in
 the tombstone area are deleted after a fixed interval.
 
+**Multipart upload garbage collection** is the process of cleaning up data
+associated with finalized multipart uploads.  When a multipart upload is
+finalized (committed or aborted), there are several items associated with it
+that need cleaned up, including:
+
+* its upload directory metadata
+* part object metadata
+* part data on disk (if not removed during the `mako-finalize` operation)
+* its finalizing metadata
+
+Similar to the basic garbage collection job, there is a multipart upload
+garbage collection job that operates on dumps of the metadata tier to determine
+what data associated with multipart uploads can be safely deleted.  A separate
+operation deletes these items after the job has been completed.
+
 **Auditing** is the process of ensuring that each object is replicated as
 expected.  This is a similar job run over the contents of the metadata tier and
 manifests reported by the storage nodes.
@@ -529,7 +573,7 @@ In the storage tier:
 
 * total size of data (scalable with additional storage servers)
 * size of data per object (limited to the amount of storage on any single
-  system, typically in the tens of terrabytes, which is far larger than
+  system, typically in the tens of terabytes, which is far larger than
   is typically practical)
 
 In terms of performance:
@@ -625,7 +669,7 @@ constructing the input for `manta-adm genconfig`.
 The most important production configurations are described below,
 but for reference, here are the principles to keep in mind:
 
-* **Storage** zones should only be colocated with **marlin** zones, and only on
+* **Storage** zones should only be co-located with **marlin** zones, and only on
   storage nodes.  Neither makes sense without the other, and we do not recommend
   combining them with other zones.  All other zones should be deployed onto
   non-storage compute nodes.
@@ -752,7 +796,7 @@ multi-DC, multi-compute-node deployment.  The general process is:
 1. Set up Triton in each datacenter, including the headnode, all Triton
    services, and all compute nodes you intend to use.  For easier management of
    hosts, we recommend that the hostname reflect the type of server and,
-   possibly, the intended purpose of the host.  For example, we use the the "RA"
+   possibly, the intended purpose of the host.  For example, we use the "RA"
    or "RM" prefix for "Richmond-A" hosts and "MS" prefix for "Mantis Shrimp"
    hosts.
 2. In the global zone of each Triton headnode, set up a manta deployment zone
@@ -814,7 +858,7 @@ multi-DC, multi-compute-node deployment.  The general process is:
 
    This step runs various initialization steps, including downloading all of
    the zone images required to deploy Manta.  This can take a while the first
-   time you run it, so you may want to run it in a screen seesion.  It's
+   time you run it, so you may want to run it in a screen session.  It's
    idempotent.
 
    A common failure mode for those without quite fast internet links is a
@@ -949,7 +993,7 @@ properties:
 
 | Property          | Kind                       | Description                                                                                                                                                                                                |
 | ----------------- | -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| `azs`             | array&nbsp;of&nbsp;strings | list of all availabililty zones (datacenters) participating in Manta in this region                                                                                                                        |
+| `azs`             | array&nbsp;of&nbsp;strings | list of all availability zones (datacenters) participating in Manta in this region                                                                                                                        |
 | `this_az`         | string                     | string (in `azs`) denoting this availability zone                                                                                                                                                          |
 | `manta_nodes`     | array&nbsp;of&nbsp;strings | list of server uuid's for *all* servers participating in Manta in this AZ                                                                                                                                  |
 | `marlin_nodes`    | array&nbsp;of&nbsp;strings | list of server uuid's (subset of `manta_nodes`) that are storage nodes                                                                                                                                     |
@@ -1856,6 +1900,68 @@ account, even though there is only a single set of copies of the objects.
 Metering also rounds up small objects to a minimum object size.
 
 
+## Multipart uploads
+
+### Prefix length overview
+
+The Manta multipart upload API stores the part directories of an account's
+ongoing multipart uploads under the directory tree `/$MANTA_USER/uploads`.
+Within the top-level directory, part directories are stored in subdirectories
+based on some number of the first characters of the multipart upload's UUID.
+The number of characters used to split multipart uploads is referred to as the
+"prefix length".
+
+For example, in a Manta deployment for which the prefix length is set to 3,
+a multipart upload would have an upload directory that looks like this:
+
+    /$MANTA_USER/uploads/f00/f00e51d2-7e47-4732-8edf-eb871296b343
+
+Note that the parent directory of the parts directory, also referred to
+as its "prefix directory", has 3 characters, the same as the prefix length.
+
+The following multipart upload would have been created in a Manta with a prefix
+length of 1:
+
+    /$MANTA_USER/uploads/d/d77feb78-cd7f-481f-a6c7-f653c80c7331
+
+
+### Changing the prefix length
+
+The prefix length is configurable in SAPI, represented as the
+`MUSKIE_MPU_PREFIX_DIR_LEN` SAPI variable under the "webapi" service.  For
+example, to change the prefix length of a deployment to 2, you could run:
+
+    $ sapiadm update $(sdc-sapi /services?name=webapi | json -Ha uuid) \
+        metadata."MUSKIE_MPU_PREFIX_DIR_LEN"=2
+
+As with other configuration changes to the "webapi" service, you must restart
+the "webapi" zones to see the configuration change.
+
+Multipart uploads created with a different prefix length within the same Manta
+deployment will continue to work after the prefix length is changed.
+
+### Prefix length tradeoffs
+
+The prefix length dictates the number of subdirectories allowed in the top-level
+`/$MANTA_USER/uploads` directory.  Because the number of entries in a Manta directory
+should be limited, this affects how many ongoing multipart uploads are available
+for a given account.  Increasing the prefix length also increases the number of
+requests required to list all multipart uploads under a given account.
+Consequently, a smaller prefix length allows for fewer ongoing multipart
+uploads for a single account, but less work to list them all; larger prefix
+directories allow more ongoing multipart uploads, but require more work to list
+them.
+
+For example, in a Manta deployment with a prefix length of 3, a given account
+may have up to 4096 prefix directories, allowing for about 4 billion ongoing
+multipart uploads for a given account.  Listing all of the multipart uploads
+ongoing requires a maximum of 4096 directory listings operations.  Compare this
+to a deployment with a prefix length of 1, which has a maximum of 256 prefix
+directories and allows for about 256 million multipart uploads, but only up to
+256 directory listings are required to list all multipart uploads under an
+account.
+
+
 # Debugging: general tasks
 
 ## Locating servers
diff --git a/docs/user-guide/commands-reference.md b/docs/user-guide/commands-reference.md
index 20a396e..004be0f 100644
--- a/docs/user-guide/commands-reference.md
+++ b/docs/user-guide/commands-reference.md
@@ -23,6 +23,7 @@ They are also available to your jobs in the compute environment.
 * [mlogin](mlogin.html) - Interactive session client
 * [mln](mln.html) - Makes link between objects
 * [mmkdir](mmkdir.html) - Make directories
+* [mmpu](mmpu.html) - Create and commit objects using multipart uploads
 * [mrm](mrm.html) - Remove objects or directories
 * [mrmdir](mrmdir.html) - Remove empty directories
 * [msign](msign.html) - Create a signed URL to a object stored in the service
diff --git a/docs/user-guide/index.md b/docs/user-guide/index.md
index 3520412..a38524c 100644
--- a/docs/user-guide/index.md
+++ b/docs/user-guide/index.md
@@ -134,7 +134,7 @@ Copy all of the text below, and paste it into your `~/.bash_profile` or `~/.bash
 	export MANTA_URL=https://us-east.manta.joyent.com
 	export MANTA_USER=$TRITON_CLOUD_USER_NAME
 	unset MANTA_SUBUSER # Unless you have subusers
-	export MANTA_KEY_ID=$(ssh-keygen -l -f $HOME/.ssh/id_rsa.pub | awk '{print $2}')
+        export MANTA_KEY_ID=`ssh-keygen -E md5 -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n' | cut -d: -f 2-`
 
 An easy way to do this in Mac OS X, is to copy the text, then use the `pbpaste` command
 to add the text in the clipboard to your file. like this:
@@ -160,6 +160,7 @@ Everything works if typing `mls /$MANTA_USER/` returns the top level contents.
       public/
       reports/
       stor/
+      uploads/
 
 The shortcut `~~` is equivalent to typing `/$MANTA_USER`.
 Since many operations require full Manta paths,
@@ -171,6 +172,7 @@ of this document.
       public/
       reports/
       stor/
+      uploads/
 
 
 # CLI
diff --git a/docs/user-guide/mpu-reference.md b/docs/user-guide/mpu-reference.md
new file mode 100644
index 0000000..939d91c
--- /dev/null
+++ b/docs/user-guide/mpu-reference.md
@@ -0,0 +1,204 @@
+---
+title: Multipart Uploads Reference
+markdown2extras: wiki-tables, code-friendly
+---
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2018, Joyent, Inc.
+-->
+
+# Multipart Uploads Reference
+
+This is the reference documentation for Manta multipart uploads. Unless
+otherwise specified, the semantics described here are stable, which means that
+you can expect that future updates will not change the documented behavior. You
+should avoid relying on behavior not specified here.
+
+You should be familiar with the Manta storage service before reading this
+document. To learn the basics, see [Getting Started](index.html).
+
+
+# Multipart Upload Overview
+
+## Terminology
+
+Before getting started, it's worth describing some key terms:
+
+* End users create **multipart uploads**, which allow them to upload a Manta
+  object in **parts**.
+* All multipart uploads under an account have a unique **upload ID**.
+  Parts are uploaded to the **parts directory** of the multipart upload.  The
+  parts directory is a normal Manta directory that can be listed.  The basename
+  of the parts directory's path is the multipart upload's upload ID.
+* The parts directory is sometimes also referred to as the **upload directory**
+  for a given multipart upload.
+* Once all of the parts have been uploaded, you can **commit** the
+  multipart upload, which exposes the **target object** in Manta as a normal
+  Manta object.
+* If you wish to complete the multipart upload without committing the target
+  object, you can **abort** the multipart upload instead.
+* Multipart uploads have associated state.  When the multipart upload is
+  created, it is marked as being in the **created** state.  When the multipart
+  upload is in the process of being committed or aborted, it is in the
+  **finalizing** state.  When the commit or abort has completed, the multipart
+  upload is in the **done** state.
+* When a multipart upload has been committed or aborted, it is said to be
+  **finalized**.
+
+
+## Life Cycle of a Multipart Upload
+
+The typical life cycle of a multipart upload is as follows:
+
+* The end user creates the multipart upload, with the desired path of the target
+  object as input.  The user may also specify headers to store on the target
+  object at this point, including its durability, content length, and content
+  MD5.
+* The user uploads parts for the object to the multipart upload.  The user saves
+  the etag returned by the server for each part to use when committing the
+  multipart upload.
+* After all parts have been uploaded, the user commits the multipart upload,
+  specifying the etags of the parts of the object.  The parts must be
+  consecutive and start from 0 (the first part).  When the commit has completed,
+  the target object is exposed in Manta at the path the user specified when the
+  upload was created.
+* After the multipart upload is committed, its associated data, including the
+  upload directory and the parts stored in it, are garbage collected after a
+  system-wide grace period.
+
+
+## API Constraints
+
+There are several constraints on using the multipart upload API. In particular:
+
+* Multipart uploads can have a maximum of 10000 parts.
+* Parts must be at least 5 Mb, with the exception of the last part.
+* Parts may be uploaded in any order.
+* Parts cannot be fetched as normal Manta objects, but users can verify their
+  contents from response headers, including Content-Length and Content-MD5.
+* When committing a multipart upload, the request must include zero or more
+  consecutive parts, starting with the first part.  Zero-byte objects are
+  allowed.
+* The target object's URI and its associated header data (including
+  `durability-level`) may only be specified when the multipart upload is
+  created.  It cannot be changed later.
+* The service garbage collects data resulting from with multipart uploads,
+  including the upload directory and the parts stored in it, when the upload
+  is finalized.  State information about finalized multipart is only available
+  during a system-wide grace period before the multipart upload is garbage
+  collected.
+* At this time, subusers of an account may not the multipart upload API.  This
+  may change in future revisions.
+
+# Useful Multipart Upload Operations
+
+In addition to the [multipart upload REST
+endpoints](api.html#multipart-uploads), there are some other useful operations
+to know for managing multipart uploads.
+
+## Listing Parts of a Multipart Upload
+
+Part directories are normal Manta directories and can be listed.  To see all
+the parts under a given multipart upload, do a ListDirectory operation on the
+parts directory.
+
+To see the fully qualified path of parts uploaded to a given multipart upload,
+use `mmpu`:
+
+    mmpu parts
+
+For example:
+
+    $ mmpu parts 38ca75c8-c138-4fbd-a99a-faa008924193
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193/0
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193/1
+
+To see etags, size and other information about parts uploaded to given
+multipart upload, you can run:
+
+    mget -q UPLOAD_DIR | json -ga
+
+For example:
+
+    $ mget -q /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193 | json -ga
+    {
+      "name": "0",
+      "etag": "b596212c-fa55-4eaf-9c05-99c0157c5ebe",
+      "size": 5242880,
+      "type": "object",
+      "contentType": "application/octet-stream",
+      "contentMD5": "XzY+DlipXwbL6bvGYsXftg==",
+      "mtime": "2018-01-09T17:31:30.034Z",
+      "durability": 2
+    }
+    {
+      "name": "1",
+      "etag": "d39f4cde-a50a-48bc-bcdd-77a8768b636b",
+      "size": 1507,
+      "type": "object",
+      "contentType": "application/octet-stream",
+      "contentMD5": "3ME/LJ1Y4NctYvhIJ7gq7g==",
+      "mtime": "2018-01-09T17:30:44.951Z",
+      "durability": 2
+    }
+
+## Listing All Multipart Uploads for an Account
+
+To find all multipart uploads under a given account, do a recursive listing of
+the top-level `/:login/uploads` directory; upload directories have a basename
+that is a uuid.
+
+Note that the organization of the `/:login/uploads` tree is subject to change,
+but upload directories are all stored in the tree.
+
+One way to list all multipart uploads is to use `mmpu`, which will perform this
+listing for you:
+
+    mmpu list
+
+For example:
+
+    $ mmpu list
+    /jhendricks/uploads/176/1767fbd5-ed23-4a5b-9ebe-4e025906a163
+    /jhendricks/uploads/0ab/0ab944c7-acc4-43f6-a998-93d902f33b73
+    /jhendricks/uploads/ba7/ba78e9a8-e375-4648-ae8f-fe1c8b2f1973
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193
+    /jhendricks/uploads/dbf/dbf016ca-7a7d-41b9-ab84-185a692a9fc3
+
+
+
+# Multipart Upload System Architecture
+
+This section describes some of the design principles that guide the operation of
+the Joyent Manta Multipart Upload Service.
+
+## Guiding Principles
+
+Several principles guide the design of the service:
+
+* Objects created via the multipart upload API should be indistinguishable from
+  "normal" Manta objects.
+* Users should be able to list parts they have uploaded to a multipart upload.
+* To allow the service to clean up data for multipart uploads the user does not
+  want to commit as target objects, users should be able to abort multipart
+  uploads.
+* The system should behave safely in the face of concurrent operations on the
+  same multipart upload.  For example, if one client attempts to commit a
+  multipart upload, and another concurrently attempts to abort the multipart
+  upload, only one client should succeed.
+
+## System Scale
+
+There are several relevant dimensions of scale:
+
+* Multipart uploads themselves may have up to 10000 parts.
+* An arbitrary number of multipart uploads may be ongoing for an account.  Very
+  large numbers of ongoing multipart uploads may have performance implications
+  for the system.  It is generally recommended to commit or abort a given
+  multipart uploads as soon as possible so the service may garbage collect its
+  associated data.
