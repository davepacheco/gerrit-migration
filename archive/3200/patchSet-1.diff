commit 4a63f2648d0cd719fcd1d1d82933cf24a6a7f192 (refs/changes/00/3200/1)
Author: Jordan Hendricks <jordan.hendricks@joyent.com>
Date:   2018-01-11T22:07:33+00:00 (1 year, 9 months ago)
    
    MANTA-3321 Need muskie API docs for MPU
    MANTA-3548 API docs lead users astray in generating MANTA_KEY_ID

diff --git a/docs/user-guide/commands-reference.md b/docs/user-guide/commands-reference.md
index 20a396e..004be0f 100644
--- a/docs/user-guide/commands-reference.md
+++ b/docs/user-guide/commands-reference.md
@@ -23,6 +23,7 @@ They are also available to your jobs in the compute environment.
 * [mlogin](mlogin.html) - Interactive session client
 * [mln](mln.html) - Makes link between objects
 * [mmkdir](mmkdir.html) - Make directories
+* [mmpu](mmpu.html) - Create and commit objects using multipart uploads
 * [mrm](mrm.html) - Remove objects or directories
 * [mrmdir](mrmdir.html) - Remove empty directories
 * [msign](msign.html) - Create a signed URL to a object stored in the service
diff --git a/docs/user-guide/index.md b/docs/user-guide/index.md
index 3520412..a38524c 100644
--- a/docs/user-guide/index.md
+++ b/docs/user-guide/index.md
@@ -134,7 +134,7 @@ Copy all of the text below, and paste it into your `~/.bash_profile` or `~/.bash
 	export MANTA_URL=https://us-east.manta.joyent.com
 	export MANTA_USER=$TRITON_CLOUD_USER_NAME
 	unset MANTA_SUBUSER # Unless you have subusers
-	export MANTA_KEY_ID=$(ssh-keygen -l -f $HOME/.ssh/id_rsa.pub | awk '{print $2}')
+        export MANTA_KEY_ID=`ssh-keygen -E md5 -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n' | cut -d: -f 2-`
 
 An easy way to do this in Mac OS X, is to copy the text, then use the `pbpaste` command
 to add the text in the clipboard to your file. like this:
@@ -160,6 +160,7 @@ Everything works if typing `mls /$MANTA_USER/` returns the top level contents.
       public/
       reports/
       stor/
+      uploads/
 
 The shortcut `~~` is equivalent to typing `/$MANTA_USER`.
 Since many operations require full Manta paths,
@@ -171,6 +172,7 @@ of this document.
       public/
       reports/
       stor/
+      uploads/
 
 
 # CLI
diff --git a/docs/user-guide/mpu-reference.md b/docs/user-guide/mpu-reference.md
new file mode 100644
index 0000000..b2aa044
--- /dev/null
+++ b/docs/user-guide/mpu-reference.md
@@ -0,0 +1,202 @@
+---
+title: Multipart Uploads Reference
+markdown2extras: wiki-tables, code-friendly
+---
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2018, Joyent, Inc.
+-->
+
+# Multipart Uploads Reference
+
+This is the reference documentation for Manta multipart uploads. Unless
+otherwise specified, the semantics described here are stable, which means that
+you can expect that future updates will not change the documented behavior. You
+should avoid relying on behavior not specified here.
+
+You should be familiar with the Manta storage service before reading this
+document. To learn the basics, see [Getting Started](index.html).
+
+
+# Multipart Upload Overview
+
+## Terminology
+
+Before getting started, it's worth describing some key terms:
+
+* Users create **multipart uploads**, which allow them to upload a Manta object
+  in **parts**.
+* All mulitpart uploads under an account have a unique **upload ID**.
+  Parts are uploaded to the **parts directory** of the multipart upload.  The
+  parts directory is a normal Manta directory that can be listed.  The basename
+  of the parts directory's path is the multipart upload's upload ID.
+* The parts directory is sometimes also referred to as the **upload directory**
+  for a given multipart upload.
+* Once a user has uploaded all the parts they desire, they can **commit** the
+  multipart upload, which exposes the **target object** in Manta as a normal
+  Manta object.
+* If a user wishes to complete the multipart upload without commiting the target
+  object, they can **abort** the multipart upload instead.
+* Multipart uploads have associated state.  When the multipart upload is
+  created, it is marked as being in the **created** state.  When the multipart
+  upload is in the process of being committed or aborted, it is in the
+  **finalizing** state.  When the commit or abort has completed, the multipart
+  upload is in the **done** state.
+* When a multipart upload has been committed or aborted, it is said to be
+  **finalized**.
+
+
+## Lifecycle of a Multipart Upload
+
+The typical life cycle of a multipart upload is as follows:
+
+* The user creates the multipart upload, with the desired path of the target
+  object as input.  The user may also specify headers to store on the target
+  object at this point, including its durability, content length, and content
+  MD5.
+* The user uploads parts for the object to the multipart upload.  The user saves
+  the etag returned by the server for each part to use when committing the
+  multipart upload.
+* After all parts have been uploaded, the user commits the multipart upload,
+  specifying the etags of the parts of the object.  The parts must be
+  consecutive and start from 0 (the first part).  When the commit has completed,
+  the target object is exposed in Manta at the path the user specified when the
+  upload was created.
+* After the multipart upload is committed, its associated data, including the
+  upload directory and the parts stored in it, are garbage collected after a
+  system-wide grace period.
+
+
+## API Constraints
+
+There are several constraints on using the multipart upload API. In particular:
+
+* Multipart uploads can have a maximum of 10000 parts.
+* Parts must be at least 5 Mb, with the exception of the last part.
+* Parts may be uploaded in any order.
+* Parts cannot be fetched as normal Manta objects, but users can verify their
+  contents from response headers, including Content-Length and Content-MD5.
+* When committing a multipart upload, the request must include zero or more
+  consecutive parts, starting with the first part.  Zero-byte objects are
+  allowed.
+* The target object's URI and its associated header data (including
+  `durability-level`) may only be specified when the multipart upload is
+  created.  It cannot be changed later.
+* The service garbage collects data resulting from with multipart uploads,
+  including the upload directory and the parts stored in it, when the upload
+  is finalized.  State information about finalized multipart is only available
+  during a system-wide grace period before the multipart upload is garbage
+  collected.
+
+# Useful Multipart Upload Operations
+
+In addition to the [mulitpart upload REST
+endpoints](api.html#multipart-uploads), there are some other useful operations
+to know for managing multipart uploads.
+
+## Listing Parts of a Multipart Upload
+
+Part directories are normal Manta directories and can be listed.  To see all
+the parts under a given multipart upload, do a ListDirectory operation on the
+parts directory.
+
+To see the fully qualified path of parts uploaded to a given multipart upload,
+use `mmpu`:
+
+    mmpu parts
+
+For example:
+
+    $ mmpu parts 38ca75c8-c138-4fbd-a99a-faa008924193
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193/0
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193/1
+
+To see etags, size and other information about parts uploaded to given
+multipart upload, you can run:
+
+    mget -q UPLOAD_DIR | json -ga
+
+For example:
+
+    $ mget -q /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193 | json -ga
+    {
+      "name": "0",
+      "etag": "b596212c-fa55-4eaf-9c05-99c0157c5ebe",
+      "size": 5242880,
+      "type": "object",
+      "contentType": "application/octet-stream",
+      "contentMD5": "XzY+DlipXwbL6bvGYsXftg==",
+      "mtime": "2018-01-09T17:31:30.034Z",
+      "durability": 2
+    }
+    {
+      "name": "1",
+      "etag": "d39f4cde-a50a-48bc-bcdd-77a8768b636b",
+      "size": 1507,
+      "type": "object",
+      "contentType": "application/octet-stream",
+      "contentMD5": "3ME/LJ1Y4NctYvhIJ7gq7g==",
+      "mtime": "2018-01-09T17:30:44.951Z",
+      "durability": 2
+    }
+
+## Listing All Multipart Uploads for an Account
+
+To find all multipart uploads under a given account, do a recursive listing of
+the top-level `/:login/uploads` directory; upload directories have a basename
+that is a uuid.
+
+Note that the organization of the `/:login/uploads` tree is subject to change,
+but upload directories are all stored in the tree.
+
+One way to list all multipart uploads is to use `mmpu`, which will perform this
+listing for you:
+
+    mmpu list
+
+For example:
+
+    $ mmpu list
+    /jhendricks/uploads/176/1767fbd5-ed23-4a5b-9ebe-4e025906a163
+    /jhendricks/uploads/0ab/0ab944c7-acc4-43f6-a998-93d902f33b73
+    /jhendricks/uploads/ba7/ba78e9a8-e375-4648-ae8f-fe1c8b2f1973
+    /jhendricks/uploads/38c/38ca75c8-c138-4fbd-a99a-faa008924193
+    /jhendricks/uploads/dbf/dbf016ca-7a7d-41b9-ab84-185a692a9fc3
+
+
+
+# Multipart Upload System Architechture
+
+This section describes some of the design principles that guide the operation of
+the Joyent Manta Multipart Upload Service.
+
+## Guiding Principles
+
+Several principles guide the design of the service:
+
+* Objects created via the multipart upload API should be indistinguishable from
+  "normal" Manta objects.
+* Users should be able to list parts they have uploaded to a multipart upload.
+* To allow the service to clean up data for multipart uploads the user does not
+  want to commit as target objects, users should be able to abort multipart
+  uploads.
+* The system should behave safely in the face of concurrent operations on the
+  same multpart upload.  For example, if one client attempts to commit a
+  multipart upload, and another concurrently attempts to abort the mulitpart
+  upload, only one client should succeed.
+
+## System Scale
+
+There are several relevant dimensions of scale:
+
+* Multipart uploads themselves may have up to 10000 parts.
+* An arbitrary number of multipart uploads may be ongoing for an account.  Very
+  large numbers of ongoing multipart uploads may have performance implications
+  for the system.  It is generally recommended to commit or abort a given
+  multipart uploads as soon as possible so the service may garbage collect its
+  associated data.
