From 46fd0e4f2bc233047dd521d4e5fba554f1fe16ed Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 20 Sep 2017 22:18:44 +0000
Subject: [PATCH] MORAY-428 Make it safer to use reindexing buckets

---
 lib/client.js  | 23 +++++++++++--
 lib/objects.js | 88 ++++++++++++++++++++++++++++++++++++++++++++------
 2 files changed, 99 insertions(+), 12 deletions(-)

diff --git a/lib/client.js b/lib/client.js
index e08178c..8d72783 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -85,6 +85,8 @@ function MorayClient(options) {
     assert.optionalBool(options.unwrapErrors, 'options.unwrapErrors');
     assert.optionalBool(options.failFast, 'options.failFast');
     assert.optionalBool(options.requireIndexes, 'options.requireIndexes');
+    assert.optionalBool(options.requireOnlineReindexing,
+        'options.requireOnlineReindexing');
 
     coptions = parseMorayParameters(options);
     cueballOptions = coptions.cueballOptions;
@@ -95,6 +97,8 @@ function MorayClient(options) {
     this.unwrapErrors = options.unwrapErrors ? true : false;
     this.failFast = options.failFast ? true : false;
     this.requireIndexes = options.requireIndexes ? true : false;
+    this.requireOnlineReindexing =
+        options.requireOnlineReindexing ? true : false;
 
     /* Helper objects. */
     this.log = options.log.child({
@@ -718,6 +722,10 @@ MorayClient.prototype.getObject = function getObject(b, k, opts, cb) {
     assert.object(opts, 'options');
     assert.func(cb, 'callback');
 
+    if (opts.requireOnlineReindexing === undefined) {
+        opts.requireOnlineReindexing = this.requireOnlineReindexing;
+    }
+
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         objects.getObject(rpcctx, b, k, opts, this.makeReleaseCb(rpcctx, cb));
@@ -767,9 +775,18 @@ MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
     assert.string(f, 'filter');
     assert.optionalObject(opts, 'options');
 
-    var defaultOpts = {requireIndexes: this.requireIndexes};
-    if (opts && opts.requireIndexes === undefined) {
-        opts.requireIndexes = this.requireIndexes;
+    var defaultOpts = {
+        requireIndexes: this.requireIndexes,
+        requireOnlineReindexing: this.requireOnlineReindexing
+    };
+
+    if (opts) {
+        if (opts.requireIndexes === undefined) {
+            opts.requireIndexes = this.requireIndexes;
+        }
+        if (opts.requireOnlineReindexing === undefined) {
+            opts.requireOnlineReindexing = this.requireOnlineReindexing;
+        }
     }
 
     var rpcctx = this.ctxCreateForEmitter();
diff --git a/lib/objects.js b/lib/objects.js
index 917c6ba..81aa9cb 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -67,7 +67,58 @@ function getObject(rpcctx, bucket, key, options, callback) {
     assert.object(options, 'options');
     assert.func(callback, 'callback');
 
+    var handledOptions = {
+        'requireOnlineReindexing': false
+    };
+    var optionsSpec = {
+        requireOnlineReindexing: {
+            testNeedHandling: function testNeedHandling(value) {
+                return (value === true);
+            }
+        }
+    };
+
+    var optionsToHandle = getOptionsToHandle(options, optionsSpec);
+    var needMetadataRecord = optionsToHandle.length > 0;
+
     opts = makeOptions(options);
+    if (needMetadataRecord) {
+        opts.internalOpts = { sendHandledOptions: true };
+    }
+
+    function checkHandledOptions(metadata, obj) {
+        var unhandledOptions;
+
+        if (!jsprim.hasKey(metadata, '_handledOptions')) {
+            callback(new VError({
+                info: {
+                    records: {
+                        metadata: metadata,
+                        obj: obj
+                    }
+                },
+                message: 'received 2 data messages, but ' +
+                    'first message does not look like a metadata record'
+            }));
+            return;
+        }
+
+        if (metadata._handledOptions) {
+            if (metadata._handledOptions.indexOf('requireOnlineReindexing')
+                !== -1) {
+                handledOptions.requireOnlineReindexing = true;
+            }
+        }
+
+        unhandledOptions = getUnhandledOptions(handledOptions, optionsToHandle);
+        if (unhandledOptions.length > 0) {
+            callback(createUnhandledOptionsError(unhandledOptions));
+            return;
+        }
+
+        callback(null, obj);
+    }
+
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
         'rpcctx': rpcctx,
@@ -75,15 +126,24 @@ function getObject(rpcctx, bucket, key, options, callback) {
         'rpcmethod': 'getObject',
         'rpcargs': [ bucket, key, opts ]
     }, function (err, data) {
-        if (!err && data.length != 1) {
-            err = new VError('expected exactly 1 data message, found %d',
-                data.length);
-        }
-
         if (err) {
             callback(err);
-        } else {
+            return;
+        }
+
+        if (data.length === 1) {
+            if (needMetadataRecord) {
+                err = createUnhandledOptionsError(Object.keys(handledOptions));
+                callback(err);
+                return;
+            }
+
             callback(null, data[0]);
+        } else if (data.length === 2) {
+            checkHandledOptions(data[0], data[1]);
+        } else {
+            callback(new VError('expected 1 or 2 data messages, found %d',
+                data.length));
         }
     });
 }
@@ -230,11 +290,17 @@ function findObjects(rpcctx, bucket, filter, options) {
     var isFirstDataRecord = true;
     var needMetadataRecord = false;
     var handledOptions = {
-        'requireIndexes': false
+        'requireIndexes': false,
+        'requireOnlineReindexing': false
     };
     var optionsSpec = {
         requireIndexes: {
-            testNeedHandling: function testNeedHandling(value) {
+            testNeedHandling: function testRiNeedHandling(value) {
+                return (value === true);
+            }
+        },
+        requireOnlineReindexing: {
+            testNeedHandling: function testRorNeedHandling(value) {
                 return (value === true);
             }
         }
@@ -296,6 +362,10 @@ function findObjects(rpcctx, bucket, filter, options) {
                     if (msg._handledOptions.indexOf('requireIndexes') !== -1) {
                         handledOptions.requireIndexes = true;
                     }
+                    if (msg._handledOptions.indexOf('requireOnlineReindexing')
+                        !== -1) {
+                        handledOptions.requireOnlineReindexing = true;
+                    }
                 }
             }
 
-- 
2.21.0

