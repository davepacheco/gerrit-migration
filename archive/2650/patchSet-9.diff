commit 22ab00cf1982302d4cc77546c346ebbbd681e914 (refs/changes/50/2650/9)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-10-11T21:12:53+00:00 (2 years ago)
    
    MORAY-428 Make it safer to use reindexing buckets
    Reviewed by: Kody A Kantor <kody.kantor@gmail.com>
    Reviewed by: Julien Gilli <julien.gilli@joyent.com>
    Approved by: Julien Gilli <julien.gilli@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 9d2c250..c1a1840 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,31 +1,35 @@
 # Changelog
 
+## v.3.4.0
+
+* [MORAY-428](https://smartos.org/bugview/MORAY-428) Make it safer to use reindexing buckets
+
 ## v.3.3.0
 
-* [MANTA-3371](https://devhub.joyent.com/jira/browse/MANTA-3371) triggers cannot be installed with any vnodes in read-only mode
+* [MANTA-3371](https://smartos.org/bugview/MANTA-3371) triggers cannot be installed with any vnodes in read-only mode
 
 ## v3.2.0
 
-* [MORAY-104](http://smartos.org/bugview/MORAY-104) disallow filtering on non-indexed fields except interactively
+* [MORAY-104](https://smartos.org/bugview/MORAY-104) disallow filtering on non-indexed fields except interactively
 
 ## v3.1.1
 
-* [MORAY-396](http://smartos.org/bugview/MORAY-396) update to cueball v2
+* [MORAY-396](https://smartos.org/bugview/MORAY-396) update to cueball v2
 
 ## v3.1.0
 
-* [MORAY-254](http://smartos.org/bugview/MORAY-254) moray tools need manual
+* [MORAY-254](https://smartos.org/bugview/MORAY-254) moray tools need manual
   pages
 
 ## v3.0.0
 
-* [MORAY-280](http://smartos.org/bugview/MORAY-280) Support SRV records in node-moray
-* [MORAY-381](http://smartos.org/bugview/MORAY-381) want default values with cueballOptions
-* [MORAY-380](http://smartos.org/bugview/MORAY-380) translateLegacyOptions not setting "service"
-* [MORAY-383](http://smartos.org/bugview/MORAY-383) moray client log entries could include specific backend details
-* [MORAY-384](http://smartos.org/bugview/MORAY-384) moray's default connection backoff need to be much less aggressive
-* [MORAY-385](http://smartos.org/bugview/MORAY-385) moray tools need some cleanup
-* [MORAY-349](http://smartos.org/bugview/MORAY-349) remove "backfill" command
+* [MORAY-280](https://smartos.org/bugview/MORAY-280) Support SRV records in node-moray
+* [MORAY-381](https://smartos.org/bugview/MORAY-381) want default values with cueballOptions
+* [MORAY-380](https://smartos.org/bugview/MORAY-380) translateLegacyOptions not setting "service"
+* [MORAY-383](https://smartos.org/bugview/MORAY-383) moray client log entries could include specific backend details
+* [MORAY-384](https://smartos.org/bugview/MORAY-384) moray's default connection backoff need to be much less aggressive
+* [MORAY-385](https://smartos.org/bugview/MORAY-385) moray tools need some cleanup
+* [MORAY-349](https://smartos.org/bugview/MORAY-349) remove "backfill" command
 
 **Breaking changes:**
 
diff --git a/lib/client.js b/lib/client.js
index e08178c..b870bc4 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -85,6 +85,8 @@ function MorayClient(options) {
     assert.optionalBool(options.unwrapErrors, 'options.unwrapErrors');
     assert.optionalBool(options.failFast, 'options.failFast');
     assert.optionalBool(options.requireIndexes, 'options.requireIndexes');
+    assert.optionalBool(options.requireOnlineReindexing,
+        'options.requireOnlineReindexing');
 
     coptions = parseMorayParameters(options);
     cueballOptions = coptions.cueballOptions;
@@ -95,6 +97,8 @@ function MorayClient(options) {
     this.unwrapErrors = options.unwrapErrors ? true : false;
     this.failFast = options.failFast ? true : false;
     this.requireIndexes = options.requireIndexes ? true : false;
+    this.requireOnlineReindexing =
+        options.requireOnlineReindexing ? true : false;
 
     /* Helper objects. */
     this.log = options.log.child({
@@ -718,6 +722,12 @@ MorayClient.prototype.getObject = function getObject(b, k, opts, cb) {
     assert.object(opts, 'options');
     assert.func(cb, 'callback');
 
+    if (opts.requireOnlineReindexing === undefined) {
+        opts = jsprim.mergeObjects(opts, null, {
+            requireOnlineReindexing: this.requireOnlineReindexing
+        });
+    }
+
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
         objects.getObject(rpcctx, b, k, opts, this.makeReleaseCb(rpcctx, cb));
@@ -767,14 +777,14 @@ MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
     assert.string(f, 'filter');
     assert.optionalObject(opts, 'options');
 
-    var defaultOpts = {requireIndexes: this.requireIndexes};
-    if (opts && opts.requireIndexes === undefined) {
-        opts.requireIndexes = this.requireIndexes;
-    }
+    opts = jsprim.mergeObjects(opts, null, {
+        requireIndexes: this.requireIndexes,
+        requireOnlineReindexing: this.requireOnlineReindexing
+    });
 
     var rpcctx = this.ctxCreateForEmitter();
     if (rpcctx) {
-        var rv = objects.findObjects(rpcctx, b, f, (opts || defaultOpts));
+        var rv = objects.findObjects(rpcctx, b, f, opts);
         this.releaseWhenDone(rpcctx, rv);
         return (rv);
     }
diff --git a/lib/objects.js b/lib/objects.js
index 917c6ba..81aa9cb 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -67,7 +67,58 @@ function getObject(rpcctx, bucket, key, options, callback) {
     assert.object(options, 'options');
     assert.func(callback, 'callback');
 
+    var handledOptions = {
+        'requireOnlineReindexing': false
+    };
+    var optionsSpec = {
+        requireOnlineReindexing: {
+            testNeedHandling: function testNeedHandling(value) {
+                return (value === true);
+            }
+        }
+    };
+
+    var optionsToHandle = getOptionsToHandle(options, optionsSpec);
+    var needMetadataRecord = optionsToHandle.length > 0;
+
     opts = makeOptions(options);
+    if (needMetadataRecord) {
+        opts.internalOpts = { sendHandledOptions: true };
+    }
+
+    function checkHandledOptions(metadata, obj) {
+        var unhandledOptions;
+
+        if (!jsprim.hasKey(metadata, '_handledOptions')) {
+            callback(new VError({
+                info: {
+                    records: {
+                        metadata: metadata,
+                        obj: obj
+                    }
+                },
+                message: 'received 2 data messages, but ' +
+                    'first message does not look like a metadata record'
+            }));
+            return;
+        }
+
+        if (metadata._handledOptions) {
+            if (metadata._handledOptions.indexOf('requireOnlineReindexing')
+                !== -1) {
+                handledOptions.requireOnlineReindexing = true;
+            }
+        }
+
+        unhandledOptions = getUnhandledOptions(handledOptions, optionsToHandle);
+        if (unhandledOptions.length > 0) {
+            callback(createUnhandledOptionsError(unhandledOptions));
+            return;
+        }
+
+        callback(null, obj);
+    }
+
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
         'rpcctx': rpcctx,
@@ -75,15 +126,24 @@ function getObject(rpcctx, bucket, key, options, callback) {
         'rpcmethod': 'getObject',
         'rpcargs': [ bucket, key, opts ]
     }, function (err, data) {
-        if (!err && data.length != 1) {
-            err = new VError('expected exactly 1 data message, found %d',
-                data.length);
-        }
-
         if (err) {
             callback(err);
-        } else {
+            return;
+        }
+
+        if (data.length === 1) {
+            if (needMetadataRecord) {
+                err = createUnhandledOptionsError(Object.keys(handledOptions));
+                callback(err);
+                return;
+            }
+
             callback(null, data[0]);
+        } else if (data.length === 2) {
+            checkHandledOptions(data[0], data[1]);
+        } else {
+            callback(new VError('expected 1 or 2 data messages, found %d',
+                data.length));
         }
     });
 }
@@ -230,11 +290,17 @@ function findObjects(rpcctx, bucket, filter, options) {
     var isFirstDataRecord = true;
     var needMetadataRecord = false;
     var handledOptions = {
-        'requireIndexes': false
+        'requireIndexes': false,
+        'requireOnlineReindexing': false
     };
     var optionsSpec = {
         requireIndexes: {
-            testNeedHandling: function testNeedHandling(value) {
+            testNeedHandling: function testRiNeedHandling(value) {
+                return (value === true);
+            }
+        },
+        requireOnlineReindexing: {
+            testNeedHandling: function testRorNeedHandling(value) {
                 return (value === true);
             }
         }
@@ -296,6 +362,10 @@ function findObjects(rpcctx, bucket, filter, options) {
                     if (msg._handledOptions.indexOf('requireIndexes') !== -1) {
                         handledOptions.requireIndexes = true;
                     }
+                    if (msg._handledOptions.indexOf('requireOnlineReindexing')
+                        !== -1) {
+                        handledOptions.requireOnlineReindexing = true;
+                    }
                 }
             }
 
diff --git a/package.json b/package.json
index 9350762..4bb2a9d 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray",
     "description": "Moray client library",
-    "version": "3.3.0",
+    "version": "3.4.0",
     "author": "Joyent (joyent.com)",
     "keywords": [ "moray" ],
     "main": "./lib/index.js",
