From faaa81f91fe3a4ffb225f293378903c92c4ef3b5 Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Fri, 16 Aug 2019 09:07:03 +0000
Subject: [PATCH] OS-7601 want channel support for imgadm

---
 src/img/CHANGES.md                            |  14 ++
 src/img/README.md                             |   6 +-
 src/img/lib/cli.js                            |  17 +-
 src/img/lib/imgadm.js                         |  21 ++-
 src/img/lib/sources/imgapi.js                 |   1 +
 src/img/lib/sources/source.js                 |  11 +-
 src/img/man/imgadm.1m.md                      |  14 ++
 .../node_modules/sdc-clients/lib/imgapi.js    | 155 +++++++++++++++---
 src/img/node_modules/sdc-clients/package.json |   2 +-
 src/img/package.json                          |   2 +-
 src/img/test/import.test.js                   | 108 +++++++++++-
 11 files changed, 313 insertions(+), 38 deletions(-)

diff --git a/src/img/CHANGES.md b/src/img/CHANGES.md
index 52b63c41..8e7a03d5 100644
--- a/src/img/CHANGES.md
+++ b/src/img/CHANGES.md
@@ -5,6 +5,20 @@ Known issues:
 - Docker image imports are experimental. Docker image import also only supports
   Docker Registry v2.
 
+## 3.9.4
+
+- OS-7601 want channel support for imgadm.
+  This change adds channel support for 'imgapi' sources.
+
+  The 'import' subcommand takes a '-C <channel>' argument, allowing users
+  to override the channel for all configured sources.
+
+  Otherwise, channels can be specified as a component of any URL parameter, e.g.
+
+      imgadm sources -a 'https://updates.joyent.com?channel=experimental'
+      or
+      imgadm import -S 'https://updates.joyent.com?channel=experimental' <uuid>
+
 ## 3.9.3
 
 - joyent/smartos-live#771 imgadm vacuum will try to reap images used by bhyve vms
diff --git a/src/img/README.md b/src/img/README.md
index ea650a83..a10af7c0 100644
--- a/src/img/README.md
+++ b/src/img/README.md
@@ -16,7 +16,7 @@ This can only be run in the global zone (GZ).
 
 # Development
 
-The src/img tree has not binary components, so you can get away
+The src/img tree has no binary components, so you can get away
 with faster edit/test cycle than having to do a full smartos platform
 build and rebooting on it. Here is how:
 
@@ -48,6 +48,10 @@ build and rebooting on it. Here is how:
     # Or run the test suite:
     ssh root@MY-SMARTOS-BOX /var/img/test/runtests
 
+Note that at the time of writing, version 3.9.4, we have backported
+imgapi channel support to the version of sdc-clients that is included
+in `node_modules`. This solution was preferred over upgrading sdc-clients
+in order to minimize the size of the platform image.
 
 Before commits, please (a) run the test suite on a test box per the notes
 above and (b) maintain style by running `make check`.
diff --git a/src/img/lib/cli.js b/src/img/lib/cli.js
index 5ae0801c..4e9b11f8 100644
--- a/src/img/lib/cli.js
+++ b/src/img/lib/cli.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc. All rights reserved.
+ * Copyright 2019 Joyent, Inc.
  *
  * * *
  *
@@ -485,7 +485,7 @@ CLI.prototype.printHelp = function printHelp(cb) {
         '    imgadm avail [<filters>]               list available images',
         '    imgadm show <uuid|docker-repo-tag>     show manifest of an available image',
         '',
-        '    imgadm import [-P <pool>] <image-id>   import image from a source',
+        '    imgadm import [-C <channel>] [-P <pool>] <image-id>   import image from a source',
         '    imgadm install [-P <pool>] -m <manifest> -f <file>',
         '                                           import from local image data',
         '',
@@ -1325,6 +1325,12 @@ CLI.prototype.do_import = function do_import(subcmd, opts, args, cb) {
     var log = self.log;
     var zpool = opts.P || common.DEFAULT_ZPOOL;
 
+    // reload any configured sources, using this channel argument instead
+    if (opts.channel !== undefined) {
+        self.tool.channel = opts.channel;
+        self.tool.init();
+    }
+
     vasync.pipeline({arg: {}, funcs: [
         function validateArg(ctx, next) {
             if (common.UUID_RE.test(arg)) {
@@ -1373,6 +1379,7 @@ CLI.prototype.do_import = function do_import(subcmd, opts, args, cb) {
             if (opts.source) {
                 getOpts.sources = opts.source.map(function (s) {
                     return self.tool.sourceFromInfo({
+                        channel: opts.channel,
                         url: s,
                         type: 'imgapi'
                     });
@@ -1462,6 +1469,12 @@ CLI.prototype.do_import.help = (
     + '{{options}}'
 );
 CLI.prototype.do_import.options = [
+    {
+        names: ['channel', 'C'],
+        type: 'string',
+        help: 'The channel to import from. This overrides any channel '
+            + 'parameter that may be set in the source url.'
+    },
     {
         names: ['help', 'h'],
         type: 'bool',
diff --git a/src/img/lib/imgadm.js b/src/img/lib/imgadm.js
index c60fb9fd..dc59bd02 100644
--- a/src/img/lib/imgadm.js
+++ b/src/img/lib/imgadm.js
@@ -405,11 +405,13 @@ function checkFileChecksum(opts, cb) {
 function IMGADM(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.optionalString(options.channel, 'options.channel');
 
     this.log = options.log;
     this._manifestFromUuid = null;
     this.sources = null;
     this._db = new Database(options);
+    this.channel = options.channel;
 }
 
 IMGADM.prototype.init = function init(callback) {
@@ -447,6 +449,9 @@ IMGADM.prototype.init = function init(callback) {
         async.forEachSeries(
             sourcesInfo,
             function oneSource(sourceInfo, nextSource) {
+                if (self.channel !== undefined) {
+                    sourceInfo.channel = self.channel;
+                }
                 self._addSource(sourceInfo, true, nextSource);
             },
             function doneSources(err) {
@@ -498,6 +503,7 @@ IMGADM.prototype._addSource = function _addSource(
     assert.object(sourceInfo, 'sourceInfo');
     assert.string(sourceInfo.url, 'sourceInfo.url');
     assert.string(sourceInfo.type, 'sourceInfo.type');
+    assert.optionalString(sourceInfo.channel, 'sourceInfo.channel');
     assert.optionalBool(sourceInfo.insecure, 'sourceInfo.secure');
     assert.bool(skipPingCheck, 'skipPingCheck');
     assert.func(callback, 'callback');
@@ -508,7 +514,8 @@ IMGADM.prototype._addSource = function _addSource(
     for (var i = 0; i < self.sources.length; i++) {
         if (self.sources[i].normUrl === normUrl
             && self.sources[i].type === sourceInfo.type
-            && self.sources[i].insecure === sourceInfo.insecure)
+            && self.sources[i].insecure === sourceInfo.insecure
+            && self.sources[i].channel === sourceInfo.channel)
         {
             return callback(null, false, self.sources[i]);
         }
@@ -538,6 +545,7 @@ IMGADM.prototype.sourceFromInfo = function sourceFromInfo(sourceInfo) {
 
     return mod_sources.createSource(sourceInfo.type, {
         url: sourceInfo.url,
+        channel: sourceInfo.channel,
         insecure: sourceInfo.insecure,
         log: this.log,
         userAgent: this.userAgent,
@@ -1096,6 +1104,7 @@ IMGADM.prototype.sourcesGetImportInfo =
     assert.string(opts.arg, 'opts.arg');
     assert.optionalArrayOfObject(opts.sources, 'opts.sources');
     assert.optionalBool(opts.ensureActive, 'opts.ensureActive');
+    assert.optionalString(opts.channel, 'opts.channel');
     var ensureActive = (opts.ensureActive === undefined
             ? true : opts.ensureActive);
     assert.func(cb, 'cb');
@@ -1603,8 +1612,14 @@ IMGADM.prototype._importImage = function _importImage(opts, cb) {
         }
     };
 
-    logCb('Importing %s from "%s"',
-        source.titleFromImportInfo(opts.importInfo), source.url);
+    if (source.channel !== undefined) {
+        logCb('Importing %s from "%s", channel "%s"',
+            source.titleFromImportInfo(opts.importInfo), source.url,
+            source.channel);
+    } else {
+        logCb('Importing %s from "%s"',
+            source.titleFromImportInfo(opts.importInfo), source.url);
+    }
 
     var context = {};
     vasync.pipeline({arg: context, funcs: [
diff --git a/src/img/lib/sources/imgapi.js b/src/img/lib/sources/imgapi.js
index f51e5916..1fcb4e25 100644
--- a/src/img/lib/sources/imgapi.js
+++ b/src/img/lib/sources/imgapi.js
@@ -50,6 +50,7 @@ function ImgapiSource(opts) {
             }
             this._client = imgapi.createClient({
                 url: self.normUrl,
+                channel: self.channel,
                 version: '~2',
                 headers: headers,
                 log: self.log,
diff --git a/src/img/lib/sources/source.js b/src/img/lib/sources/source.js
index 816692f8..5f138195 100644
--- a/src/img/lib/sources/source.js
+++ b/src/img/lib/sources/source.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -36,18 +36,24 @@ var errors = require('../errors');
 function Source(opts) {
     assert.object(opts, 'opts');
     assert.string(opts.url, 'opts.url');
+    assert.optionalString(opts.channel, 'opts.channel');
     assert.optionalBool(opts.insecure, 'opts.insecure');
     assert.object(opts.log, 'opts.log');
     assert.string(opts.userAgent, 'opts.userAgent');
 
     this.log = opts.log.child({
         component: 'source',
-        source: {type: this.type, url: this.url, insecure: opts.insecure}
+        source: {
+            type: this.type,
+            url: this.url,
+            insecure: opts.insecure,
+            channel: opts.channel}
     }, true);
     this.url = opts.url;
     this.insecure = opts.insecure;
     this.normUrl = common.normUrlFromUrl(this.url);
     this.userAgent = opts.userAgent;
+    this.channel = opts.channel;
 }
 
 /**
@@ -60,6 +66,7 @@ Source.prototype.toJSON = function toJSON() {
 
 Source.prototype.toString = function toString() {
     var extra = (this.insecure ? ' (insecure)' : '');
+    extra += (this.channel ? ' (channel=' + this.channel + ')' : '');
     return format('"%s" image source "%s"%s',
         this.type, this.url, extra);
 };
diff --git a/src/img/man/imgadm.1m.md b/src/img/man/imgadm.1m.md
index 1d6d9e90..c5d871f5 100644
--- a/src/img/man/imgadm.1m.md
+++ b/src/img/man/imgadm.1m.md
@@ -42,6 +42,11 @@ The manifest is a JSON serialized description.
 The identifier for an image is its UUID. Most commands operate on images by
 UUID.
 
+Image API servers that support channels can be configured as sources by
+specifying URLs with the 'channel=<channel name>' parameter. The 'import'
+command also allows a '-C' argument to override all sources and use the
+supplied channel.
+
 
 ## OPTIONS
 
@@ -76,6 +81,9 @@ UUID.
         An image source is a URL to a server implementing the IMGAPI, or
         the Docker Registry API. The default IMGAPI is https://images.joyent.com
 
+        Image API server channels can be specified by including a
+        '?channel=<channel name>' parameter as part of the supplied <url>.
+
         Usage:
             imgadm sources [--verbose|-v] [--json|-j]  # list sources
             imgadm sources -a <url> [-t <type>]        # add a source
@@ -167,8 +175,14 @@ UUID.
         Options:
             -h, --help                Show this help.
             -q, --quiet               Disable progress bar.
+            -C <channel>              Override the channel used for all sources
+                                      when looking for images.
             -P <pool>                 Name of zpool in which to look for the image.
                                       Default is "zones".
+            -S <url>                  Specify the URL from which to import the
+                                      image. The URL may include a '?channel='
+                                      parameter, but note that the -C argument,
+                                      if used, will take precedence.
 
 
     imgadm install [-P <pool>] -m <manifest> -f <file>
diff --git a/src/img/node_modules/sdc-clients/lib/imgapi.js b/src/img/node_modules/sdc-clients/lib/imgapi.js
index 13bd6c28..d6a29b19 100644
--- a/src/img/node_modules/sdc-clients/lib/imgapi.js
+++ b/src/img/node_modules/sdc-clients/lib/imgapi.js
@@ -5,7 +5,12 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
+ */
+
+/*
+ * This is a smartos-live-specific version of imgapi, part of sdc-clients 8.1.3
+ * that has support for channels backported from sdc-clients 13.0.1.
  */
 
 /*
@@ -233,7 +238,7 @@ function simpleMerge(a, b) {
  *        are given, the latter wins.
  *      - `channel` {String} Optional. The channel to use, for IMGAPI servers
  *        that use channels.
- *        See <https://mo.joyent.com/docs/imgapi/master/#ListChannels>.
+ *        See <https://updates.joyent.com/docs/#ListChannels>.
  *      - `user` {String} Optional. Used for basic or http-signature auth.
  *      - `password` {String} Optional. If provided, this implies that basic
  *        auth should be used for client requests.
@@ -278,7 +283,8 @@ function IMGAPI(options) {
     } else {
         this.url = options.url;
     }
-    this._basePath = parsed.path;  // the URL subpath *without* a trailing '/'
+    // the URL subpath *without* a trailing '/' or query params
+    this._basePath = parsed.path.split('?')[0];
     if (this._basePath.slice(-1) === '/') {
         this._basePath = this._basePath.slice(0, -1);
     }
@@ -487,6 +493,9 @@ IMGAPI.prototype.adminGetState = function adminGetState(callback) {
  *      See the doc link above for a full list of supported filters.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param callback {Function} `function (err, images, res)`
  *
  * NOTE about filters.limit and filters.marker:
@@ -510,6 +519,7 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
     assert.object(filters, 'filters');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     self._getAuthHeaders(function (hErr, headers) {
@@ -530,7 +540,9 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
 
     function listImagesWithLimit(headers, cb) {
         // limit and marker come straight from filters
-        var path = self._path('/images', filters, {channel: self.channel});
+        var path = self._path('/images', {
+            channel: options.channel || self.channel
+        }, filters);
         var reqOpts = {
             path: path,
             headers: headers
@@ -573,7 +585,9 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
                 filters.limit = limit;
             }
 
-            var path = self._path('/images', filters, {channel: self.channel});
+            var path = self._path('/images', {
+                channel: options.channel || self.channel
+            }, filters);
             var reqOpts = {
                 path: path,
                 headers: headers
@@ -638,6 +652,9 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
  *      If given this will only return images accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.getImage =
@@ -659,11 +676,12 @@ function getImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path('/images/' + uuid, {
         account: account,
-        channel: self.channel
+        channel: options.channel || self.channel
     });
     self._getAuthHeaders(function (hErr, headers) {
         if (hErr) {
@@ -697,6 +715,9 @@ function getImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.createImage =
@@ -718,9 +739,13 @@ function createImage(data, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
-    var path = self._path('/images', {account: account, channel: self.channel});
+    var path = self._path('/images', {
+        account: account,
+        channel: options.channel || self.channel
+    });
     self._getAuthHeaders(function (hErr, headers) {
         if (hErr) {
             callback(hErr);
@@ -757,6 +782,9 @@ function createImage(data, account, options, callback) {
  *      - incremental {Boolean} Optional. Default false. Create an incremental
  *        image.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -774,12 +802,13 @@ function createImageFromVm(data, options, account, callback) {
     assert.string(options.vm_uuid, 'options.vm_uuid');
     assert.optionalBool(options.incremental, 'options.incremental');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalString(account, 'account');
     assert.func(callback, 'callback');
 
     var path = self._path('/images');
     path += self._qs({
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'create-from-vm',
         vm_uuid: options.vm_uuid,
         incremental: options.incremental,
@@ -880,6 +909,9 @@ function createImageFromVmAndWait(data, options, account, callback) {
  *          Append '?channel=<channel>' to select a particular source
  *          channel, if relevant.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.adminImportImage = function adminImportImage(
@@ -894,12 +926,13 @@ IMGAPI.prototype.adminImportImage = function adminImportImage(
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalString(options.source, 'options.source');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
     assert.string(data.uuid, 'data.uuid');
 
     var path = self._path('/images/' + data.uuid);
     path += self._qs({
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import',
         skip_owner_check: options.skipOwnerCheck,
         source: options.source
@@ -950,6 +983,9 @@ IMGAPI.prototype.adminImportImage = function adminImportImage(
  * @param {Object} options: For backward compat, this argument is optional.
  *      - skipOwnerCheck {Boolean} Optional. Default false.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.adminImportRemoteImageAndWait =
@@ -964,10 +1000,11 @@ function adminImportRemoteImageAndWait(uuid, source, options, callback) {
     assert.object(options, 'options');
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path('/images/' + uuid, {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import-remote',
         source: source,
         skip_owner_check: options.skipOwnerCheck
@@ -1092,6 +1129,9 @@ function pollJob(client, job_uuid, cb) {
  * @param {Object} options: For backward compat, this argument is optional.
  *      - skipOwnerCheck {Boolean} Optional. Default false.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, job, res)`
  */
 IMGAPI.prototype.adminImportRemoteImage =
@@ -1106,10 +1146,11 @@ function adminImportRemoteImage(uuid, source, options, callback) {
     assert.object(options, 'options');
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path('/images/' + uuid, {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import-remote',
         source: source,
         skip_owner_check: options.skipOwnerCheck
@@ -1158,6 +1199,9 @@ function adminImportRemoteImage(uuid, source, options, callback) {
  *        Can be "local" or "manta". Will try to default to "manta" when
  *        available, otherwise "local".
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -1169,6 +1213,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
     assert.object(options, 'options');
     assert.string(options.uuid, 'options.uuid');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     if (callback === undefined) {
         callback = account;
         account = undefined;
@@ -1180,7 +1225,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
     if (options.source) {
         assert.string(options.source, 'options.source');
         var path = self._path(format('/images/%s/file', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             source: options.source,
             storage: options.storage
         });
@@ -1243,7 +1288,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
         }
 
         var path = self._path(format('/images/%s/file', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             compression: options.compression,
             account: account,
             sha1: options.sha1,
@@ -1318,6 +1363,9 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.getImageFile =
@@ -1336,10 +1384,11 @@ function getImageFile(uuid, filePath, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/file', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1402,6 +1451,9 @@ function getImageFile(uuid, filePath, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, stream)`
  *      The `stream` is also an HTTP response object, i.e. headers are on
  *      `stream.headers`.
@@ -1421,10 +1473,11 @@ IMGAPI.prototype.getImageFileStream = function getImageFileStream(
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/file', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1473,6 +1526,9 @@ IMGAPI.prototype.getImageFileStream = function getImageFileStream(
  *        this is required, otherwise it will be retrieved with `fs.stat`.
  *      - {String} sha1 : SHA-1 hash of the icon file being uploaded.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -1489,6 +1545,7 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
     assert.optionalString(options.sha1, 'options.sha1');
     assert.optionalNumber(options.size, 'options.size');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     if (callback === undefined) {
         callback = account;
         account = undefined;
@@ -1525,7 +1582,7 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
         }
 
         var path = self._path(format('/images/%s/icon', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             account: account,
             sha1: options.sha1
         });
@@ -1597,6 +1654,9 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.getImageIcon =
@@ -1615,10 +1675,11 @@ function getImageIcon(uuid, filePath, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1682,6 +1743,9 @@ function getImageIcon(uuid, filePath, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, stream)`
  *      The `stream` is also an HTTP response object, i.e. headers are on
  *      `stream.headers`.
@@ -1701,10 +1765,11 @@ IMGAPI.prototype.getImageIconStream = function getImageIconStream(
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1748,6 +1813,9 @@ IMGAPI.prototype.getImageIconStream = function getImageIconStream(
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.deleteImageIcon =
@@ -1765,10 +1833,11 @@ function deleteImageIcon(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1810,6 +1879,9 @@ function deleteImageIcon(uuid, account, options, callback) {
  *          then the files are saved to it. If the basename of "PATH" is not a
  *          dir, then "PATH.imgmanifest" and "PATH.zfs[.EXT]" are created.
  *      - headers {Object} Optional. Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.exportImage =
@@ -1824,11 +1896,12 @@ function exportImage(uuid, account, options, callback) {
     assert.object(options, 'options');
     assert.string(options.manta_path, 'manta_path');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalString(account, 'account');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'export',
         manta_path: options.manta_path,
         account: account
@@ -1865,6 +1938,9 @@ function exportImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.activateImage =
@@ -1882,10 +1958,11 @@ function activateImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'activate',
         account: account
     });
@@ -1921,6 +1998,9 @@ function activateImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.disableImage =
@@ -1938,10 +2018,11 @@ function disableImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'disable',
         account: account
     });
@@ -1977,6 +2058,9 @@ function disableImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.enableImage =
@@ -1994,10 +2078,11 @@ function enableImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'enable',
         account: account
     });
@@ -2034,6 +2119,9 @@ function enableImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.addImageAcl =
@@ -2052,10 +2140,11 @@ function addImageAcl(uuid, acl, account, options, callback) {
     assert.arrayOfString(acl, 'acl');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/acl', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'add',
         account: account
     });
@@ -2092,6 +2181,9 @@ function addImageAcl(uuid, acl, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.removeImageAcl =
@@ -2110,10 +2202,11 @@ function removeImageAcl(uuid, acl, account, options, callback) {
     assert.arrayOfString(acl, 'acl');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/acl', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'remove',
         account: account
     });
@@ -2150,6 +2243,9 @@ function removeImageAcl(uuid, acl, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.updateImage =
@@ -2168,10 +2264,11 @@ function updateImage(uuid, data, account, options, callback) {
     assert.object(data, 'data');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'update',
         account: account
     });
@@ -2211,6 +2308,9 @@ function updateImage(uuid, data, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  *      - forceAllChannels {Boolean} Optional. Set to true for force actual
  *        deletion ofa
  * @param {Function} callback : `function (err, res)`
@@ -2234,11 +2334,12 @@ function deleteImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalBool(options.forceAllChannels, 'options.forceAllChannels');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account,
         force_all_channels: options.forceAllChannels
     });
diff --git a/src/img/node_modules/sdc-clients/package.json b/src/img/node_modules/sdc-clients/package.json
index cecebfa9..815aa904 100644
--- a/src/img/node_modules/sdc-clients/package.json
+++ b/src/img/node_modules/sdc-clients/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-clients",
-  "description": "Contains node.js client libraries for SDC REST APIs.",
+  "description": "Contains node.js client libraries for SDC REST APIs. Note that this is a smartos-live fork of this version of sdc-clients which includes backported imgapi channel support.",
   "version": "8.1.3",
   "homepage": "http://www.joyent.com",
   "private": true,
diff --git a/src/img/package.json b/src/img/package.json
index a00e0c3c..445dc969 100644
--- a/src/img/package.json
+++ b/src/img/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgadm",
   "description": "Manage SmartOS virtual machine images.",
-  "version": "3.9.3",
+  "version": "3.9.4",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/src/img/test/import.test.js b/src/img/test/import.test.js
index 882a0ea0..7a675783 100644
--- a/src/img/test/import.test.js
+++ b/src/img/test/import.test.js
@@ -54,13 +54,22 @@ var WRKDIR = '/var/tmp/img-test-import';
 var CACHEDIR = '/var/tmp/img-test-cache';
 
 /*
- * Pick an image that (a) exists on images.joyent.com (they *do* occassionally
+ * Pick an image that (a) exists on images.joyent.com (they *do* occasionally
  * get deprecated) and (b) is relatively small and (c) is unlikely to collide
  * with current usage.
  */
 // minimal-32@15.2.0
 var TEST_IMAGE_UUID = '0764d78e-3472-11e5-8949-4f31abea4e05';
 
+/*
+ * An image that only exists on the experimental channel of updates.joyent.com.
+ * Similar to the note above, hopefully this image will always be here and will
+ * not be present on images.joyent.com, since tests rely on this fact.
+ * During setup, we import the origin image for this experimental image.
+ */
+var TEST_EXPERIMENTAL_ORIGIN = 'fd2cc906-8938-11e3-beab-4359c665ac99';
+var TEST_EXPERIMENTAL_UUID = 'b323e23f-e762-4677-a2c8-b56f3bd5ef48';
+
 var CACHEFILE = format('%s/%s.file', CACHEDIR, TEST_IMAGE_UUID);
 
 
@@ -93,6 +102,12 @@ test('setup: get test image in local SDC IMGAPI (if available)', function (t) {
     });
 });
 
+test('setup: get origin for experimental image', function (t) {
+    exec('imgadm import ' + TEST_EXPERIMENTAL_ORIGIN, function (err, o, e) {
+        t.end();
+    });
+});
+
 test('setup: CACHEDIR (' + CACHEDIR + ')', function (t) {
     mkdirp(CACHEDIR, function (err) {
         t.ifError(err);
@@ -359,6 +374,97 @@ test('pre-downloaded file (bad checksum); imgadm import ' + TEST_IMAGE_UUID,
     }); // cp
 });
 
+// Force removal of any dangling experimental image and sources which might
+// prevent these tests from reporting correct results.
+test('setup8: rm experimental image ' + TEST_EXPERIMENTAL_UUID, function (t) {
+    var cmd = format(
+        'imgadm delete %s ;'
+            + 'imgadm sources -d https://updates.joyent.com ;'
+            + 'imgadm sources -d '
+            + 'https://updates.joyent.com?channel=experimental',
+        TEST_EXPERIMENTAL_UUID);
+    t.exec(cmd, function () {
+        t.end();
+    });
+});
+
+// With no configured experimental sources, this should fail, which will
+// also help determine whether the image has perhaps been added to
+// images.joyent.com, in which case, maintainers should select a different
+// TEST_EXPERIMENTAL_UUID (and TEST_EXPERIMENTAL_ORIGIN if necessary)
+test('experimental image import fails', function (t) {
+    var cmd = 'imgadm import ' + TEST_EXPERIMENTAL_UUID;
+    exec(cmd, function (err, stdout, stderr) {
+        t.ok(/ActiveImageNotFound/.test(stderr),
+            'ActiveImageNotFound error code on stderr');
+        t.end();
+    });
+});
+
+test('setup9: add updates.joyent.com source', function (t) {
+    var cmd = 'imgadm sources -a https://updates.joyent.com';
+    exec(cmd, function () {
+        t.end();
+    });
+});
+
+// With a -C argument, this should succeed, assuming our test experimental
+// image does still exist on that channel.
+test('experimental image import with -C arg', function (t) {
+    var cmd = 'imgadm import -C experimental ' + TEST_EXPERIMENTAL_UUID;
+    exec(cmd, function (err, stdout, stderr) {
+        exec('imgadm get ' + TEST_EXPERIMENTAL_UUID, function (err2, o, e) {
+            t.ifError(err2);
+            t.end();
+        });
+    });
+});
+
+test('setup10: delete experimental image', function (t) {
+    var cmd = format('imgadm delete %s', TEST_EXPERIMENTAL_UUID);
+    exec(cmd, function () {
+        t.end();
+    });
+});
+
+// With a -S argument, this should succeed
+test('experimental image import with -S channel url', function (t) {
+    var cmd = ('imgadm import '
+            + '-S https://updates.joyent.com?channel=experimental '
+            + TEST_EXPERIMENTAL_UUID);
+    exec(cmd, function (err, stdout, stderr) {
+        exec('imgadm get ' + TEST_EXPERIMENTAL_UUID, function (err2, o, e) {
+            t.ifError(err2);
+            t.end();
+        });
+    });
+});
+
+// delete our experimental image and our updates.joyent.com url, then add
+// that source, this time with a channel.
+test('setup11: delete experimental image', function (t) {
+    var cmd = format(
+        'imgadm delete %s ; '
+            + 'imgadm sources -d https://updates.joyent.com ; '
+            + 'imgadm sources -a '
+            + 'https://updates.joyent.com?channel=experimental ',
+        TEST_EXPERIMENTAL_UUID);
+    exec(cmd, function (err, o, e) {
+        t.ifError(err);
+        t.end();
+    });
+});
+
+// With a configured experimental channel, this should succeed
+test('experimental image import configured channel', function (t) {
+    var cmd = 'imgadm import ' + TEST_EXPERIMENTAL_UUID;
+    exec(cmd, function (err, stdout, stderr) {
+        exec('imgadm get ' + TEST_EXPERIMENTAL_UUID, function (err2, o, e) {
+            t.ifError(err2);
+            t.end();
+        });
+    });
+});
 
 
 // Need a test IMGAPI for the following:
-- 
2.21.0

