commit a8acdfabc28aa6e79f399e5d9c69babaf6ac9439 (refs/changes/06/3206/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-01-12T00:53:46-05:00 (1 year, 9 months ago)
    
    ZAPI-667 offset_fields_vms_ok test and related tests should not rely on existing VMs

diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index b237f3f..f38a099 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 // var test = require('tap').test;
@@ -134,6 +134,99 @@ function createOpts(path, params) {
 }
 
 
+function createTestVms(t, cb) {
+    var NUM_VMS = 3;
+    var i = 0;
+
+    var VM = {
+        autoboot: false,
+        owner_uuid: CUSTOMER,
+        image_uuid: IMAGE,
+        server_uuid: SERVER.uuid,
+        networks: [ { uuid: NETWORKS[0].uuid } ],
+        brand: 'joyent-minimal',
+        billing_id: '00000000-0000-0000-0000-000000000000',
+        ram: 128,
+        quota: 10,
+        customer_metadata: {},
+        creator_uuid: CUSTOMER,
+        origin: 'cloudapi',
+        role_tags: ['fd48177c-d7c3-11e3-9330-28cfe91a33c9']
+    };
+
+    async.whilst(
+        function () {
+            return i < NUM_VMS;
+        },
+        function (next) {
+            var vm = jsprim.deepCopy(VM);
+            vm.alias = util.format('vmapitest-full-%d-%d', process.pid, i);
+
+            var opts = createOpts('/vms', vm);
+
+            client.post(opts, vm, function (err, req, res, body) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                var job = '/jobs/' + body.job_uuid;
+
+                t.ok(body, util.format('created vm %s %s',
+                    i, vm.alias, body.vm_uuid));
+
+                i++;
+                waitForValue(job, 'execution', 'succeeded', {
+                    client: client
+                }, next);
+            });
+        },
+        function (err) {
+            cb(err);
+        });
+}
+
+
+function destroyTestVms(t, cb) {
+    var path = '/vms?alias=vmapitest-full-&owner_uuid=' + CUSTOMER;
+
+    client.get(path, function (err, req, res, body) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        assert.arrayOfObject(body, 'body is Array');
+
+        body = body.filter(function (vm) {
+            return ['destroyed', 'failed'].indexOf(vm.state) === -1;
+        });
+
+        t.ok(body, util.format('deleting %d test vms', body.length));
+
+        async.whilst(
+            function () {
+                return body.length > 0;
+            },
+            function (next) {
+                var vm = body.pop();
+                var opts = createOpts('/vms/' + vm.uuid);
+
+                client.del(opts, function (err2, req2, res2, body2) {
+                    if (err2) {
+                        next(err2);
+                        return;
+                    }
+
+                    t.ok(true, util.format('deleted %s', vm.uuid));
+                    next();
+                });
+
+            }, function (err2) {
+                cb(err2);
+            });
+    });
+}
+
 
 // --- Tests
 
@@ -183,6 +276,19 @@ exports.napi_networks_ok = function (t) {
 };
 
 
+exports.initialize_test_vms = function (t) {
+    destroyTestVms(t, function (err) {
+        common.ifError(t, err);
+
+        createTestVms(t, function (err2) {
+            common.ifError(t, err2);
+
+            t.done();
+        });
+    });
+};
+
+
 exports.filter_vms_empty = function (t) {
     var path = '/vms?ram=32&owner_uuid=' + CUSTOMER;
 
@@ -2429,3 +2535,12 @@ exports.destroy_docker_vm = function (t) {
         t.done();
     });
 };
+
+
+exports.destroy_test_vms_final = function (t) {
+    destroyTestVms(t, function (err) {
+        common.ifError(t, err);
+
+        t.done();
+    });
+};
