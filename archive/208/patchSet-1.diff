From b0af23fb5a1e9ca795483ddb089ebdf209bc3c4d Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Fri, 5 Aug 2016 15:32:00 +0000
Subject: [PATCH] OS-5577 tmpfs reports incorrect sizing via statvfs OS-5578
 lint errors in tmpfs

---
 usr/src/uts/common/fs/tmpfs/tmp_subr.c   | 2 +-
 usr/src/uts/common/fs/tmpfs/tmp_tnode.c  | 3 +--
 usr/src/uts/common/fs/tmpfs/tmp_vfsops.c | 4 ++--
 3 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/usr/src/uts/common/fs/tmpfs/tmp_subr.c b/usr/src/uts/common/fs/tmpfs/tmp_subr.c
index cea31fd3ff..1f62d2fe9d 100644
--- a/usr/src/uts/common/fs/tmpfs/tmp_subr.c
+++ b/usr/src/uts/common/fs/tmpfs/tmp_subr.c
@@ -196,7 +196,7 @@ tmp_convnum(char *str, size_t *maxbytes)
 	 * system's total available swap size as the initial value. Perform the
 	 * intermediate calculation in pages to avoid overflow.
 	 */
-	if (*c == '\%') {
+	if (*c == '%') {
 		u_longlong_t cap;
 
 		if (*(c + 1) != '\0')
diff --git a/usr/src/uts/common/fs/tmpfs/tmp_tnode.c b/usr/src/uts/common/fs/tmpfs/tmp_tnode.c
index 91ff8bb7fa..13ea356924 100644
--- a/usr/src/uts/common/fs/tmpfs/tmp_tnode.c
+++ b/usr/src/uts/common/fs/tmpfs/tmp_tnode.c
@@ -281,7 +281,6 @@ tmpnode_trunc(
 {
 	size_t oldsize = tp->tn_size;
 	size_t delta;
-	struct vnode *vp = TNTOV(tp);
 	timestruc_t now;
 	int error = 0;
 
@@ -365,7 +364,7 @@ tmpnode_trunc(
 			/* Delete anon array for tmpnode */
 			ASSERT(tp->tn_nblocks == 0);
 			ASSERT(anon_get_ptr(tp->tn_anon, 0) == NULL);
-			ASSERT(!vn_has_cached_data(vp));
+			ASSERT(!vn_has_cached_data(TNTOV(tp)));
 
 			anon_release(tp->tn_anon, tp->tn_asize);
 			tp->tn_anon = NULL;
diff --git a/usr/src/uts/common/fs/tmpfs/tmp_vfsops.c b/usr/src/uts/common/fs/tmpfs/tmp_vfsops.c
index 3d73364bcd..d7a56c5c33 100644
--- a/usr/src/uts/common/fs/tmpfs/tmp_vfsops.c
+++ b/usr/src/uts/common/fs/tmpfs/tmp_vfsops.c
@@ -761,7 +761,7 @@ tmp_statvfs(struct vfs *vfsp, struct statvfs64 *sbp)
 	 */
 	if (blocks > tmpfs_minfree)
 		sbp->f_bfree = MIN(blocks - tmpfs_minfree,
-		    tm->tm_anonmax - tm->tm_anonmem);
+		    btop(tm->tm_anonmax) - btopr(tm->tm_anonmem));
 	else
 		sbp->f_bfree = 0;
 
@@ -770,7 +770,7 @@ tmp_statvfs(struct vfs *vfsp, struct statvfs64 *sbp)
 	/*
 	 * Total number of blocks is what's available plus what's been used
 	 */
-	sbp->f_blocks = (fsblkcnt64_t)(sbp->f_bfree + tm->tm_anonmem);
+	sbp->f_blocks = (fsblkcnt64_t)(sbp->f_bfree + btopr(tm->tm_anonmem));
 
 	if (eff_zid != GLOBAL_ZONEUNIQID &&
 	    zp->zone_max_swap_ctl != UINT64_MAX) {
-- 
2.21.0

