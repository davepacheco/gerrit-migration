From 423b5520799ffa05a707a4c5e10a6b2841deea68 Mon Sep 17 00:00:00 2001
From: Robert Bogart <robert.bogart@joyent.com>
Date: Tue, 12 Jun 2018 19:32:21 +0000
Subject: [PATCH] MANTA-3596 binder could export metrics via artedi

---
 lib/server.js | 24 +++++++++++++++---------
 lib/zk.js     | 14 ++++++++++++--
 main.js       | 46 +++++++++++++++++++++++-----------------------
 package.json  |  3 ++-
 4 files changed, 52 insertions(+), 35 deletions(-)

diff --git a/lib/server.js b/lib/server.js
index 381670d..aa0d5d0 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -12,7 +12,7 @@ var assert = require('assert-plus');
 var dns = require('dns');
 var url = require('url');
 var mod_os = require('os');
-
+var mod_artedi = require('artedi');
 var mname = require('mname');
 
 
@@ -434,7 +434,7 @@ function createServer(options) {
         assert.object(options.log, 'options.log');
         assert.optionalObject(options.recursion, 'options.recursion');
         assert.string(options.dnsDomain, 'options.dnsDomain');
-        assert.object(options.metrics, 'options.metrics');
+        assert.optionalObject(options.collector, 'options.collector');
         var log = options.log;
 
         var server = mname.createServer({
@@ -442,19 +442,25 @@ function createServer(options) {
                 log: log
         });
 
-        var metricsManager = options.metrics;
+        var collector;
+
+        if (options.collector === undefined || options.collectopr === null) {
+                collector = mod_artedi.createCollector();
+        } else {
+                collector = options.collector;
+        }
 
-        metricsManager.collector.counter({
+        collector.counter({
                 name: METRIC_REQUEST_COUNTER,
                 help: 'count of Binder requests completed'
         });
 
-        metricsManager.collector.histogram({
+        collector.histogram({
                 name: METRIC_LATENCY_HISTOGRAM,
                 help: 'total time to process Binder requests'
         });
 
-        metricsManager.collector.histogram({
+        collector.histogram({
                 name: METRIC_SIZE_HISTOGRAM,
                 help: 'size in bytes of Binder responses'
         });
@@ -508,13 +514,13 @@ function createServer(options) {
                         return ([query]);
                 });
 
-                var query_counter = metricsManager.collector.getCollector(
+                var query_counter = collector.getCollector(
                     METRIC_REQUEST_COUNTER);
 
-                var latency_histogram = metricsManager.collector.getCollector(
+                var latency_histogram = collector.getCollector(
                     METRIC_LATENCY_HISTOGRAM);
 
-                var size_histogram = metricsManager.collector.getCollector(
+                var size_histogram = collector.getCollector(
                     METRIC_SIZE_HISTOGRAM);
 
                 var labels = { type: query.type() };
diff --git a/lib/zk.js b/lib/zk.js
index 52bef67..b7b998f 100644
--- a/lib/zk.js
+++ b/lib/zk.js
@@ -15,18 +15,27 @@ var mod_vasync = require('vasync');
 var mod_verror = require('verror');
 var mod_zkstream = require('zkstream');
 var mod_util = require('util');
+var mod_artedi = require('artedi');
 
 function ZKCache(options) {
         mod_assert.object(options, 'options');
         mod_assert.object(options.log, 'options.log');
         mod_assert.string(options.domain, 'options.domain');
+        mod_assert.optionalObject(options.collector, 'options.collector');
+
+        if (options.collector === undefined || options.collector === null) {
+                this.ca_collector = mod_artedi.createCollector();
+        } else {
+                this.ca_collector = options.collector;
+        }
 
         this.ca_treeNodes = {};
         this.ca_zk = new mod_zkstream.Client({
                 address: process.env.ZK_HOST || '127.0.0.1',
                 port: 2181,
                 log: options.log,
-                sessionTimeout: 30000
+                sessionTimeout: 30000,
+                collector: this.ca_collector
         });
         this.ca_domain = options.domain;
         this.ca_log = options.log;
@@ -149,7 +158,8 @@ TreeNode.prototype.onDataChanged = function (zk, data, stat) {
                 this.tn_log.trace({
                     path: this.tn_path,
                     parsedData: parsedData,
-                    typeField: typeof (parsedData.type)
+                    typeField: (parsedData === null) ? undefined :
+                    typeof (parsedData.type)
                 }, 'onDataChanged: unexpected data');
                 return;
         }
diff --git a/main.js b/main.js
index 2124b84..6a510fa 100644
--- a/main.js
+++ b/main.js
@@ -131,13 +131,34 @@ function safeUnlink(socketPath) {
 
 
 function run(opts) {
+        var metricsManager = createMetricsManager({
+                address: '0.0.0.0',
+                log: LOG,
+                staticLabels: {
+                        datacenter: opts.datacenterName,
+                        instance: opts.instance_uuid,
+                        server: opts.server_uuid,
+                        service: opts.service_name,
+                        port: opts.port
+                },
+                /*
+                 * A recommended convention for deriving the port number to be
+                 * used by the corresponding metrics server is to add 1000 to
+                 * the service port number.
+                 */
+                 port: opts.port + 1000,
+                 restify: restify
+        });
+        metricsManager.listen(function () {});
+
         vasync.pipeline({
                 'arg': {},
                 'funcs': [
                         function initZk(_, subcb) {
                                 _.zkCache = new core.ZKCache({
                                         log: LOG,
-                                        domain: opts.dnsDomain
+                                        domain: opts.dnsDomain,
+                                        collector: metricsManager.collector
                                 });
                                 subcb();
                         },
@@ -180,27 +201,6 @@ function run(opts) {
                                 setImmediate(subcb);
                         },
                         function initServer(_, subcb) {
-                                var metricsManager = createMetricsManager({
-                                        address: '0.0.0.0',
-                                        log: LOG,
-                                        staticLabels: {
-                                                datacenter: opts.datacenterName,
-                                                instance: opts.instance_uuid,
-                                                server: opts.server_uuid,
-                                                service: opts.service_name,
-                                                port: opts.port
-                                        },
-                                        /*
-                                         * A recommended convention for deriving
-                                         * the port number to be used by the
-                                         * corresponding metrics server is to
-                                         * add 1000 to the service port number.
-                                         */
-                                        port: opts.port + 1000,
-                                        restify: restify
-                                });
-                                metricsManager.listen(function () {});
-
                                 _.server = core.createServer({
                                         name: NAME,
                                         log: LOG,
@@ -210,7 +210,7 @@ function run(opts) {
                                         zkCache: _.zkCache,
                                         dnsDomain: opts.dnsDomain,
                                         datacenterName: opts.datacenterName,
-                                        metrics: metricsManager
+                                        collector: metricsManager.collector
                                 });
                                 _.server.start(subcb);
                         }
diff --git a/package.json b/package.json
index 626ea08..9411128 100644
--- a/package.json
+++ b/package.json
@@ -6,6 +6,7 @@
   "license": "MPL-2.0",
   "private": true,
   "dependencies": {
+    "artedi": "1.3.0",
     "assert-plus": "0.1.5",
     "bunyan": "1.5.1",
     "clone": "0.1.1",
@@ -21,7 +22,7 @@
     "vasync": "2.1.0",
     "verror": "^1.10.0",
     "xtend": "1.0.3",
-    "zkstream": "0.9.0"
+    "zkstream": "0.11.0"
   },
   "engines": {
     "node": ">=0.8"
-- 
2.21.0

