From ae7af7a1c9cdcfef46e6331e04c55d8284db1b9e Mon Sep 17 00:00:00 2001
From: Robert Bogart <robert.bogart@joyent.com>
Date: Wed, 23 May 2018 22:37:10 +0000
Subject: [PATCH] MANTA-3596 binder could export metrics via artedi

---
 lib/client.js     | 16 +++++++++++++++-
 lib/zk-session.js | 32 ++++++++++++++++++++++++++++++++
 package.json      |  1 +
 3 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/lib/client.js b/lib/client.js
index d0d1b91..bbe2fa7 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -10,6 +10,7 @@ module.exports = { Client: ZKClient };
 
 const mod_fsm = require('mooremachine');
 const mod_assert = require('assert-plus');
+const mod_artedi = require('artedi');
 const mod_consts = require('./zk-consts');
 const mod_util = require('util');
 const mod_stream = require('stream');
@@ -40,6 +41,18 @@ function ZKClient(opts) {
 		});
 	}
 
+	/*
+	 * If the caller did not supply a collector for tracking metrics, then
+	 * create one internally.  At least for now, it is not a requirement
+	 * for all consumers to provide one.
+	 */
+	mod_assert.optionalObject(opts.collector);
+	if (opts.collector === undefined || opts.collector === null) {
+		this.zc_collector = mod_artedi.createCollector();
+	} else {
+		this.zc_collector = opts.collector;
+	}
+
 	mod_assert.optionalArrayOfObject(opts.servers, 'options.servers');
 	if (opts.servers === undefined || opts.servers === null) {
 		mod_assert.string(opts.address, 'options.address');
@@ -168,7 +181,8 @@ ZKClient.prototype._newSession = function () {
 		return;
 	var s = new mod_zks.ZKSession({
 		timeout: this.zc_sessionTimeout,
-		log: this.zc_log
+		log: this.zc_log,
+		collector: this.zc_collector
 	});
 	this.zc_session = s;
 	function initialHandler(st) {
diff --git a/lib/zk-session.js b/lib/zk-session.js
index a3489d5..98c2a41 100644
--- a/lib/zk-session.js
+++ b/lib/zk-session.js
@@ -22,10 +22,14 @@ const mod_events = require('events');
 const mod_bunyan = require('bunyan');
 const mod_verror = require('verror');
 
+var METRIC_ZK_SESSION_COUNTER = 'zookeeper_session_count';
+var METRIC_ZK_NOTIFICATION_COUNTER = 'zookeeper_notifications';
+
 function ZKSession(opts) {
 	mod_assert.object(opts, 'options');
 	mod_assert.number(opts.timeout, 'options.timeout');
 	mod_assert.object(opts.log, 'options.log');
+	mod_assert.object(opts.collector, 'options.collector');
 
 	this.zs_conn = undefined;
 	this.zs_oldConn = undefined;
@@ -37,11 +41,30 @@ function ZKSession(opts) {
 	this.zs_log = opts.log.child({
 		component: 'ZKSession'
 	});
+	this.zs_collector = opts.collector;
 
 	this.zs_lastZxid = new mod_jsbn.BigInteger('0');
 	this.zs_sessionId = new mod_jsbn.BigInteger('0');
 	this.zs_passwd = new Buffer(8).fill(0);
 
+	/* Create a counter for tracking ZooKeeper notifications. */
+	this.zs_collector.counter({
+		name: METRIC_ZK_NOTIFICATION_COUNTER,
+		help: 'Notifications received from ZooKeeper'
+	});
+
+	/*
+	 * The name of this metric can be misleading as the client is
+	 * monogomous.  That is, at any point in time, we only ever have one
+	 * session with a ZooKeeper server.  This is intended to track the total
+	 * number of times that we have had to establish (or re-establish) a
+	 * session with a ZooKeeper server.
+	 */
+	this.zs_collector.counter({
+		name: METRIC_ZK_SESSION_COUNTER,
+		help: 'Total number of sessions created'
+	});
+
 	mod_fsm.FSM.call(this, 'detached');
 }
 mod_util.inherits(ZKSession, mod_fsm.FSM);
@@ -158,6 +181,10 @@ ZKSession.prototype.state_attaching = function (S) {
 		self.zs_sessionId = sid;
 		self.zs_passwd = pkt.passwd;
 		self.resetExpiryTimer();
+
+		var session_counter = self.zs_collector.getCollector(
+		    METRIC_ZK_SESSION_COUNTER);
+		session_counter.increment();
 		S.gotoState('attached');
 	});
 
@@ -351,6 +378,11 @@ ZKSession.prototype.processNotification = function (pkt) {
 		zxid: pkt.zxid.toString('hex'),
 		type: pkt.type
 	}, 'notification %s for %s', evt, pkt.path);
+
+	var notifications = this.zs_collector.getCollector(
+	    METRIC_ZK_NOTIFICATION_COUNTER);
+	notifications.increment({event: evt});
+
 	if (watcher)
 		watcher.emit(evt);
 };
diff --git a/package.json b/package.json
index 23daeef..347e68e 100644
--- a/package.json
+++ b/package.json
@@ -8,6 +8,7 @@
   },
   "main": "lib/index.js",
   "dependencies": {
+    "artedi": "1.3.0",
     "assert-plus": "^1.0.0",
     "bunyan": "^1.8.10",
     "cueball": "^2.2.7",
-- 
2.21.0

