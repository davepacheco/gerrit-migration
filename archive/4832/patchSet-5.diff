commit becbef190c49962ad154e248c7e8e2dea3d37abc (refs/changes/32/4832/5)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2018-09-13T19:11:29+00:00 (1 year, 1 month ago)
    
    MANTA-3945 garbage-collector loads index shard list incorrectly

diff --git a/cmd/server.js b/cmd/server.js
index a4599d0..2e9dd6e 100644
--- a/cmd/server.js
+++ b/cmd/server.js
@@ -18,6 +18,7 @@ var mod_moray = require('moray');
 var mod_path = require('path');
 var mod_restify = require('restify');
 var mod_sdc = require('sdc-clients');
+var mod_util = require('util');
 var mod_vasync = require('vasync');
 var mod_verror = require('verror');
 
@@ -176,28 +177,104 @@ load_index_shard_range(ctx, done)
 {
 	var index_shards = ctx.ctx_manta_app.metadata['INDEX_MORAY_SHARDS'];
 	mod_assertplus.array(index_shards, 'index_shards');
+	mod_assertplus.ok(ctx.ctx_cfg.index_shard_lo === undefined,
+		'unexpected context configuration: \'index_shard_lo\'');
+	mod_assertplus.ok(ctx.ctx_cfg.index_shard_hi === undefined,
+		'unexpected context configuration: \'index_shard_hi\'');
 
 	if (index_shards.length === 0) {
 		done(new VE('Manta application has no index shards.'));
 		return;
 	}
 
-	ctx.ctx_cfg.index_shard_lo = parseInt(
-			index_shards[0].host.charAt(0), 10);
+	/*
+	 * Today, garbage-collector instances are assigned shards in contiguous
+	 * inclusive ranges like [2,8]. This assignment scheme relies on the
+	 * convention that index shards in production deployments are given
+	 * consecutive numeric shard names: 2.moray.{{DOMAIN}},
+	 * 3.moray.{{DOMAIN}} ... 97.moray.{{DOMAIN}}. In order to ensure that
+	 * the collector doesn't attempt to process records for non-index
+	 * shards, it loads the complete index shard range from the SAPI Manta
+	 * application below.
+	 *
+	 * The list of shards in the SAPI Manta application's INDEX_MORAY_SHARDS
+	 * metadata array are not ordered. It is also not the case that the
+	 * shard whose name is the highest numeric value in the list contains
+	 * the "last" field (the "last" field is syntax required by hogan.js
+	 * template engine).
+	 *
+	 * In order to correctly filter operator requests to GC from shards that
+	 * are not index shards, we retrieve the full range of index shards by
+	 * finding the lowest and highest valued numeric shard names in the
+	 * list. Every time a request to change the range of shards a collector
+	 * should GC from is made, a check is done to ensure the new range is a
+	 * subset of the range of full index shards retrieved below.
+	 *
+	 * There is future work planned to remove the assumption of consecutive
+	 * numeric index shard names from the garbage-collector.
+	 */
+	var shard_url_re = new RegExp('^(\\d+).' +
+		ctx.ctx_cfg.shards.domain_suffix + '$');
+
+	function parse_shard_number_from_url(shard_url, cb) {
+		var results = shard_url_re.exec(shard_url);
+		if (results === null) {
+			cb(new VE('Unexpected shard url \'%s\'. Collector ' +
+				'expects shard names matching \'%s\'.',
+				shard_url, shard_url_re.toString()));
+			return;
+		}
+		/*
+		 * RegExp.exec puts places the single matched group at index
+		 * 1 of the 'result' array.
+		 */
+		var shard_num = parseInt(results[1], 10);
 
-	index_shards.forEach(function (shard) {
-		if (shard.last) {
-			ctx.ctx_cfg.index_shard_hi = parseInt(
-				shard.host.charAt(0), 10);
+		if (isNaN(shard_num)) {
+			cb(new VE('Unexpected shard url \'%s\', collector ' +
+				'expects consecutive numeric shard names ' +
+				'matching \'%s\'.', shard_url,
+				shard_url_re.toString()));
+			return;
 		}
-	});
 
-	ctx.ctx_log.info({
-		lo: ctx.ctx_cfg.index_shard_lo,
-		hi: ctx.ctx_cfg.index_shard_hi
-	}, 'Discovered index shard range');
+		cb(null, shard_num);
+	}
 
-	done();
+	function parse_shard_url_and_update_range(shard, next) {
+		parse_shard_number_from_url(shard.host,
+			function (err, shard_num) {
+			if (err) {
+				next(err);
+				return;
+			}
+			if (ctx.ctx_cfg.index_shard_lo === undefined ||
+			    ctx.ctx_cfg.index_shard_lo > shard_num) {
+				ctx.ctx_cfg.index_shard_lo = shard_num;
+			}
+
+			if (ctx.ctx_cfg.index_shard_hi === undefined ||
+			    ctx.ctx_cfg.index_shard_hi < shard_num) {
+				ctx.ctx_cfg.index_shard_hi = shard_num;
+			}
+			next();
+		});
+	}
+
+	mod_vasync.forEachPipeline({
+		inputs: index_shards,
+		func: parse_shard_url_and_update_range
+	}, function (err) {
+		if (err) {
+			done(err);
+			return;
+		}
+		ctx.ctx_log.info({
+			lo: ctx.ctx_cfg.index_shard_lo,
+			hi: ctx.ctx_cfg.index_shard_hi
+		}, 'Discovered index shard range');
+		done();
+	});
 }
 
 
