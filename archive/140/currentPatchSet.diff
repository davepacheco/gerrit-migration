From afc7f962829246d30dd4b6f56950ef573d52a144 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 28 Apr 2016 03:48:56 +0000
Subject: [PATCH] NAPI-362 Want a fresher NAPI Reviewed by: Matt Smillie
 <matt.smillie@joyent.com>

---
 Makefile                                      |  18 ++-
 bin/ip2num                                    |   2 +
 bin/mac2num                                   |   2 +
 bin/num2ip                                    |   2 +
 bin/num2mac                                   |   2 +
 deps/javascriptlint                           |   2 +-
 deps/jsstyle                                  |   2 +-
 lib/apis/moray.js                             |   5 +-
 lib/config.js                                 |   3 +-
 lib/endpoints/aggregations.js                 |   3 +-
 lib/endpoints/fabrics/common.js               |   2 +
 lib/endpoints/fabrics/networks.js             |   6 +-
 lib/endpoints/fabrics/vlans.js                |   4 +-
 lib/endpoints/index.js                        |   2 +-
 lib/endpoints/network-pools.js                |   3 +-
 lib/endpoints/networks/common.js              |   2 +
 lib/endpoints/networks/index.js               |  11 +-
 lib/endpoints/networks/ips.js                 |   3 +-
 lib/endpoints/networks/nics.js                |   2 +
 lib/endpoints/nic-tags.js                     |   7 +-
 lib/endpoints/nics.js                         |  27 +---
 lib/endpoints/ping.js                         |   2 +
 lib/endpoints/search.js                       |   7 +-
 lib/init.js                                   |   2 +
 lib/migrate.js                                |   4 +-
 lib/migratectl.js                             |  10 +-
 lib/models/aggregation.js                     |   5 +-
 lib/models/fabric.js                          |   1 +
 lib/models/index.js                           |   2 +
 lib/models/ip/common.js                       |  27 ++--
 lib/models/ip/index.js                        |  17 +--
 lib/models/ip/provision.js                    |   6 +-
 lib/models/network-pool.js                    |  15 +-
 lib/models/network.js                         |  29 ++--
 lib/models/nic-tag.js                         |  90 ++++++-----
 lib/models/nic/bucket.js                      |   2 +
 lib/models/nic/common.js                      |   6 +-
 lib/models/nic/create.js                      |   4 +-
 lib/models/nic/del.js                         |   6 +-
 lib/models/nic/get.js                         |   3 +-
 lib/models/nic/index.js                       |   2 +
 lib/models/nic/list.js                        |   2 +
 lib/models/nic/obj.js                         |   5 +-
 lib/models/nic/provision.js                   |   7 +-
 lib/models/nic/update.js                      |  25 +--
 lib/models/vlan.js                            |   9 +-
 lib/napi.js                                   |  17 +--
 lib/napictl.js                                |  10 +-
 lib/util/common.js                            |  22 +--
 lib/util/constants.js                         |   2 +
 lib/util/errors.js                            |   2 +
 lib/util/ip.js                                |   4 +-
 lib/util/mac.js                               |  17 ++-
 lib/util/subnet.js                            |   3 +-
 lib/util/validate.js                          |  21 ++-
 package.json                                  |  27 ++--
 server.js                                     |   2 +
 test/integration/aggregations.test.js         |  37 +----
 test/integration/fabrics-invalid.test.js      |  16 +-
 test/integration/fabrics.test.js              |   7 +-
 test/integration/helpers.js                   |  17 ++-
 test/integration/ips.test.js                  |   7 +-
 .../migration-1.2.0-networks.test.js          |   7 +-
 test/integration/network-overlap.test.js      |   9 +-
 test/integration/network-owner.test.js        |  10 +-
 test/integration/network-pools.test.js        |   9 +-
 test/integration/networks.test.js             |  11 +-
 test/integration/nic-tags.test.js             |  13 +-
 test/integration/nics.test.js                 |  32 ++--
 test/integration/provision.test.js            |  14 +-
 test/integration/regression-NET-281.test.js   |   2 +
 .../zz-delete-test-networks.test.js           |   6 +-
 test/lib/aggr.js                              |   3 +-
 test/lib/client.js                            |   1 +
 test/lib/common.js                            |   6 +-
 test/lib/config.js                            |   2 +
 test/lib/err.js                               |   3 +-
 test/lib/fabric-net.js                        |   6 +-
 test/lib/fabrics.js                           |   2 +
 test/lib/ip.js                                |   2 +
 test/lib/log.js                               |   2 +
 test/lib/migration.js                         |   8 +-
 test/lib/mock-moray.js                        |  14 +-
 test/lib/mock-wf.js                           |   2 +
 test/lib/moray.js                             |   6 +-
 test/lib/net.js                               |   6 +-
 test/lib/nic-tag.js                           |   6 +-
 test/lib/nic.js                               |   6 +-
 test/lib/pool.js                              |   9 +-
 test/lib/portolan.js                          |   2 +
 test/lib/server.js                            |   4 +-
 test/lib/vlan.js                              |   3 +-
 test/unit/aggregations.test.js                |  19 ++-
 test/unit/helpers.js                          |  14 +-
 test/unit/ips.test.js                         |  93 ++++++------
 test/unit/network-owner.test.js               |   9 +-
 test/unit/network-pools.test.js               | 109 +++++++-------
 test/unit/networks.test.js                    |  41 +++--
 test/unit/nic-tags.test.js                    | 142 +++++++++++++-----
 test/unit/nics.test.js                        |  66 ++++----
 test/unit/search-ips.test.js                  |  14 +-
 test/unit/util-ip.test.js                     |   2 +
 test/unit/util-mac.test.js                    |   4 +-
 tools/eslint.node.conf                        |  22 +++
 tools/jsl.node.conf                           |   4 +-
 105 files changed, 748 insertions(+), 606 deletions(-)
 create mode 100644 tools/eslint.node.conf

diff --git a/Makefile b/Makefile
index a6bd83f..5646d88 100644
--- a/Makefile
+++ b/Makefile
@@ -27,10 +27,13 @@ EXTRA_DOC_DEPS	= deps/restdown-brand-remora/.git
 DOC_FILES	 = index.md
 JS_FILES	:= $(shell ls *.js) $(shell find lib test -name '*.js') \
 	bin/ip2num bin/num2ip bin/mac2num bin/num2mac
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE   = $(JS_FILES)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,doxygen,unparenthesized-return=0
+JSL_CONF_NODE	= tools/jsl.node.conf
+JSL_FILES_NODE	= $(JS_FILES)
+JSSTYLE_FILES	= $(JS_FILES)
+JSSTYLE_FLAGS	= -o indent=4,doxygen,unparenthesized-return=0
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
 SMF_MANIFESTS_IN = smf/manifests/napi.xml.in
 BASH_FILES	:= sbin/napid bin/napictl
 JSON_FILES  := package.json config.json.sample
@@ -64,6 +67,9 @@ INSTDIR         := $(PKGDIR)/root/opt/smartdc/napi
 all: $(SMF_MANIFESTS) | $(TAPE) $(REPO_DEPS) sdc-scripts
 	$(NPM) install
 
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install
+
 $(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
@@ -131,6 +137,10 @@ publish: release
 	mkdir -p $(BITS_DIR)/napi
 	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/napi/$(RELEASE_TARBALL)
 
+.PHONY: check
+check:: $(ESLINT)
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
+
 #
 # Includes
 #
diff --git a/bin/ip2num b/bin/ip2num
index 67d0ff2..2437e1a 100755
--- a/bin/ip2num
+++ b/bin/ip2num
@@ -13,6 +13,8 @@
  * Convert an IP address into its numeric format
  */
 
+'use strict';
+
 var path = require('path');
 var util_ip = require('../lib/util/ip');
 
diff --git a/bin/mac2num b/bin/mac2num
index 857901b..17f7643 100755
--- a/bin/mac2num
+++ b/bin/mac2num
@@ -13,6 +13,8 @@
  * Convert a MAC address into its numeric format
  */
 
+'use strict';
+
 var path = require('path');
 var util_mac = require('../lib/util/mac');
 
diff --git a/bin/num2ip b/bin/num2ip
index 3f89928..3d3ee63 100755
--- a/bin/num2ip
+++ b/bin/num2ip
@@ -13,6 +13,8 @@
  * Convert an IP number into an address
  */
 
+'use strict';
+
 var path = require('path');
 var util_ip = require('../lib/util/ip');
 
diff --git a/bin/num2mac b/bin/num2mac
index 1223691..108bd2f 100755
--- a/bin/num2mac
+++ b/bin/num2mac
@@ -13,6 +13,8 @@
  * Convert a MAC number into its address
  */
 
+'use strict';
+
 var path = require('path');
 var util_mac = require('../lib/util/mac');
 
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..040bf5e 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit 040bf5e429969ae42d976b570fd64c9e17fab20f
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..b94eb62 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit b94eb629ee524d21b563c8b4461caa2bdf1becc6
diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index d0bcadd..c2a5a75 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -12,9 +12,12 @@
  * Moray API convenience wrappers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('../util/constants');
 var clone = require('clone');
+var jsprim = require('jsprim');
 var restify = require('restify');
 var util = require('util');
 var util_common = require('../util/common');
@@ -61,7 +64,7 @@ function ldapFilter(inObj, bucket) {
         return inObj;
     }
 
-    if (util_common.hashEmpty(inObj)) {
+    if (jsprim.isEmpty(inObj)) {
         return '';
     }
 
diff --git a/lib/config.js b/lib/config.js
index 02a9a53..a220ed6 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -12,9 +12,10 @@
  * NAPI config file loading and validation
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var fs = require('fs');
-var util = require('util');
 
 
 
diff --git a/lib/endpoints/aggregations.js b/lib/endpoints/aggregations.js
index abef84c..029eaa4 100644
--- a/lib/endpoints/aggregations.js
+++ b/lib/endpoints/aggregations.js
@@ -12,9 +12,10 @@
  * NAPI /aggregations endpoints
  */
 
+'use strict';
+
 var mod_aggr = require('../models/aggregation');
 var restify = require('restify');
-var util = require('util');
 
 
 
diff --git a/lib/endpoints/fabrics/common.js b/lib/endpoints/fabrics/common.js
index d73d2d3..3cd9772 100644
--- a/lib/endpoints/fabrics/common.js
+++ b/lib/endpoints/fabrics/common.js
@@ -12,6 +12,8 @@
  * Common functions shared between fabrics endpoints
  */
 
+'use strict';
+
 var constants = require('../../util/constants');
 var mod_restify = require('restify');
 
diff --git a/lib/endpoints/fabrics/networks.js b/lib/endpoints/fabrics/networks.js
index d26444f..db4c5e2 100644
--- a/lib/endpoints/fabrics/networks.js
+++ b/lib/endpoints/fabrics/networks.js
@@ -12,6 +12,8 @@
  * NAPI /fabrics/:owner_uuid/vlans/:vlan_id/networks endpoints
  */
 
+'use strict';
+
 var constants = require('../../util/constants');
 var mod_common = require('./common');
 var mod_fabric_net = require('../../models/network');
@@ -65,7 +67,7 @@ function getParentVLAN(req, res, next) {
  * fabric network
  */
 function delFabricNetwork(req, res, next) {
-    mod_fabric_net.del(reqOpts(req), function (err, vlan) {
+    mod_fabric_net.del(reqOpts(req), function (err) {
         if (err) {
             return next(err);
         }
@@ -144,7 +146,7 @@ function listFabricNetworks(req, res, next) {
  * PUT /fabrics/:owner_uuid/vlans/:vlan_id/networks/:uuid - update a
  * fabric Network
  */
-function updateFabricNetwork(req, res, next) {
+function updateFabricNetwork(req, res, next) { // eslint-disable-line
     req.params.fabric = true;
 
     mod_fabric_net.update(reqOpts(req), function (err, net) {
diff --git a/lib/endpoints/fabrics/vlans.js b/lib/endpoints/fabrics/vlans.js
index 1562d5d..4a4873c 100644
--- a/lib/endpoints/fabrics/vlans.js
+++ b/lib/endpoints/fabrics/vlans.js
@@ -12,6 +12,8 @@
  * NAPI /fabrics/:owner_uuid/vlans endpoints
  */
 
+'use strict';
+
 var mod_common = require('./common');
 var mod_fabric = require('../../models/fabric');
 var mod_vlan = require('../../models/vlan');
@@ -75,7 +77,7 @@ function delFabricVLAN(req, res, next) {
         app: req.app,
         log: req.log,
         params: req.params
-    }, function (err, vlan) {
+    }, function (err) {
         if (err) {
             return next(err);
         }
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index 4a669c0..c3cf925 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -12,7 +12,7 @@
  * Handles loading all restify endpoints for NAPI
  */
 
-
+'use strict';
 
 /*
  * Endpoints are in their own individual files, in a directory structure
diff --git a/lib/endpoints/network-pools.js b/lib/endpoints/network-pools.js
index dda6fc6..10f01c2 100644
--- a/lib/endpoints/network-pools.js
+++ b/lib/endpoints/network-pools.js
@@ -12,9 +12,10 @@
  * NAPI /network_pools endpoints
  */
 
+'use strict';
+
 var mod_pool = require('../models/network-pool');
 var restify = require('restify');
-var util = require('util');
 
 
 
diff --git a/lib/endpoints/networks/common.js b/lib/endpoints/networks/common.js
index b99202e..a611dae 100644
--- a/lib/endpoints/networks/common.js
+++ b/lib/endpoints/networks/common.js
@@ -12,6 +12,8 @@
  * Common functions shared between networks endpoints
  */
 
+'use strict';
+
 var mod_net = require('../../models/network');
 var mod_restify = require('restify');
 
diff --git a/lib/endpoints/networks/index.js b/lib/endpoints/networks/index.js
index 688497b..3f1452e 100644
--- a/lib/endpoints/networks/index.js
+++ b/lib/endpoints/networks/index.js
@@ -12,6 +12,8 @@
  * NAPI /networks endpoints
  */
 
+'use strict';
+
 var errors = require('../../util/errors');
 var mod_common = require('./common');
 var mod_net = require('../../models/network');
@@ -29,6 +31,10 @@ var restify = require('restify');
  */
 function ensureNetworkUnused(req, res, next) {
     return mod_pool.list(req.app, req.log, { }, function (err, pools) {
+        if (err) {
+            return next(err);
+        }
+
         var usedBy = [];
         for (var p in pools) {
             if (pools[p].networks.indexOf(req.params.uuid) !== -1) {
@@ -145,9 +151,6 @@ function putNetwork(req, res, next) {
         }
 
         var ser = net.serialize();
-        if (net.hasOwnProperty('job_uuid')) {
-            ser.job_uuid = net.job_uuid;
-        }
 
         res.send(200, ser);
         return next();
@@ -165,7 +168,7 @@ function deleteNetwork(req, res, next) {
         params: req.params
     };
 
-    mod_net.del(opts, function (err, tag) {
+    mod_net.del(opts, function (err) {
         req.log.debug('deleteNetwork: cb entry');
         if (err) {
             return next(err);
diff --git a/lib/endpoints/networks/ips.js b/lib/endpoints/networks/ips.js
index 9eb9ec0..4bd53e6 100644
--- a/lib/endpoints/networks/ips.js
+++ b/lib/endpoints/networks/ips.js
@@ -12,8 +12,9 @@
  * NAPI /networks/:network_uuid/ips endpoints
  */
 
+'use strict';
+
 var mod_common = require('./common');
-var assert = require('assert-plus');
 var mod_ip = require('../../models/ip');
 var restify = require('restify');
 var util_ip = require('../../util/ip');
diff --git a/lib/endpoints/networks/nics.js b/lib/endpoints/networks/nics.js
index 9a14cc4..148743c 100644
--- a/lib/endpoints/networks/nics.js
+++ b/lib/endpoints/networks/nics.js
@@ -12,6 +12,8 @@
  * NAPI /networks/:network_uuid/nics endpoints
  */
 
+'use strict';
+
 var mod_nic = require('../../models/nic');
 var reqToOpts = require('../../util/common').reqToOpts;
 
diff --git a/lib/endpoints/nic-tags.js b/lib/endpoints/nic-tags.js
index e1046c8..6a3a3de 100644
--- a/lib/endpoints/nic-tags.js
+++ b/lib/endpoints/nic-tags.js
@@ -12,11 +12,10 @@
  * NAPI /nic_tags endpoints
  */
 
-var errors = require('../util/errors');
-var mod_net = require('../models/network');
+'use strict';
+
 var mod_nicTag = require('../models/nic-tag');
 var restify = require('restify');
-var util = require('util');
 
 
 
@@ -97,7 +96,7 @@ function putNicTag(req, res, next) {
  * DELETE /nic_tags/:name: delete a nic tag
  */
 function deleteNicTag(req, res, next) {
-    mod_nicTag.del(req.app, req.log, req.params, function (err, tag) {
+    mod_nicTag.del(req.app, req.log, req.params, function (err) {
         if (err) {
             return next(err);
         }
diff --git a/lib/endpoints/nics.js b/lib/endpoints/nics.js
index 3124cc7..0f7cc97 100644
--- a/lib/endpoints/nics.js
+++ b/lib/endpoints/nics.js
@@ -12,6 +12,8 @@
  * NAPI /nics endpoints
  */
 
+'use strict';
+
 var mod_nic = require('../models/nic');
 var reqToOpts = require('../util/common').reqToOpts;
 var restify = require('restify');
@@ -68,7 +70,7 @@ function listNics(req, res, next) {
  */
 function getNic(req, res, next) {
     mod_nic.get(reqToOpts(req), function (err, nic) {
-        req.log.debug({err: err, nic: nic}, 'getNic: cb entry');
+        req.log.debug({ err: err, nic: nic }, 'getNic: cb entry');
         if (err) {
             return next(err);
         }
@@ -89,7 +91,7 @@ function getNic(req, res, next) {
  */
 function putNic(req, res, next) {
     mod_nic.update(reqToOpts(req), function (err, nic) {
-        req.log.debug({err: err, nic: nic}, 'putNic: cb entry');
+        req.log.debug({ err: err, nic: nic }, 'putNic: cb entry');
         if (err) {
             return next(err);
         }
@@ -104,7 +106,7 @@ function putNic(req, res, next) {
  */
 function postNic(req, res, next) {
     mod_nic.create(reqToOpts(req), function (err, nic) {
-        req.log.debug({err: err, nic: nic}, 'postNic: cb entry');
+        req.log.debug({ err: err, nic: nic }, 'postNic: cb entry');
         if (err) {
             return next(err);
         }
@@ -120,7 +122,7 @@ function postNic(req, res, next) {
  */
 function deleteNic(req, res, next) {
     mod_nic.del(reqToOpts(req), function (err) {
-        req.log.debug({err: err}, 'deleteNic: cb entry');
+        req.log.debug({ err: err }, 'deleteNic: cb entry');
         if (err) {
             return next(err);
         }
@@ -130,23 +132,6 @@ function deleteNic(req, res, next) {
 }
 
 
-/**
- * When the USE_NET_AGENT feature flag is not active, we will ignore all the
- * net-agent requests by cheking the value of the user-agent request header
- */
-function _checkNetAgentRequest(req, res, next) {
-    if (req.config.useNetAgent !== true &&
-        req.header('user-agent').indexOf('net-agent') !== -1) {
-        req.log.info('Ignoring net-agent request, feature flag is off');
-        res.send(200);
-        return next(false);
-    } else {
-        return next();
-    }
-}
-
-
-
 /**
  * Register all endpoints with the restify server
  */
diff --git a/lib/endpoints/ping.js b/lib/endpoints/ping.js
index 1cfe166..5d7f231 100644
--- a/lib/endpoints/ping.js
+++ b/lib/endpoints/ping.js
@@ -12,6 +12,8 @@
  * NAPI /ping endpoint
  */
 
+'use strict';
+
 var constants = require('../util/constants');
 
 
diff --git a/lib/endpoints/search.js b/lib/endpoints/search.js
index e9a5966..0f31337 100644
--- a/lib/endpoints/search.js
+++ b/lib/endpoints/search.js
@@ -12,17 +12,16 @@
  * NAPI /search endpoints
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('../util/constants');
-var mod_err = require('../util/errors');
 var mod_ip = require('../models/ip');
 var mod_net = require('../models/network');
 var mod_stream = require('stream');
 var mod_util = require('util');
 var restify = require('restify');
-var util_ip = require('../util/ip');
 var validate = require('../util/validate');
-var vasync = require('vasync');
 
 /**
  * Filter our arguments into a set which are used to list networks and others.
@@ -80,7 +79,7 @@ mod_util.inherits(SearchIPNetworkStream, mod_stream.Transform);
  * The primary engine behind the transform stream. Determines whether or not
  * this network has an IP address that we care about.
  */
-SearchIPNetworkStream.prototype._transform = function (net, enc, done) {
+SearchIPNetworkStream.prototype._transform = function (net, _enc, done) {
     var self = this;
 
     /*
diff --git a/lib/init.js b/lib/init.js
index 6ca2b40..4454a9e 100644
--- a/lib/init.js
+++ b/lib/init.js
@@ -12,6 +12,8 @@
  * NAPI data initialization
  */
 
+'use strict';
+
 var constants = require('./util/constants');
 var errors = require('./util/errors');
 var fmt = require('util').format;
diff --git a/lib/migrate.js b/lib/migrate.js
index 8702269..e7795bc 100644
--- a/lib/migrate.js
+++ b/lib/migrate.js
@@ -28,6 +28,8 @@
  * for any records that still need to be processed.
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var mod_moray = require('./apis/moray');
@@ -151,7 +153,7 @@ function migrate(opts, callback) {
         if (err) {
             return callback(err);
         }
-        log.trace({bucket: bucket.name, res: res}, 'migration complete');
+        log.trace({ bucket: bucket.name, res: res }, 'migration complete');
         log.info('end migration for bucket %s', bucket.name);
         return callback();
     });
diff --git a/lib/migratectl.js b/lib/migratectl.js
index 2a29d2a..6449c69 100755
--- a/lib/migratectl.js
+++ b/lib/migratectl.js
@@ -28,6 +28,8 @@
  * for any records that still need to be processed.
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
 var dashdash = require('dashdash');
 var mod_ip = require('./lib/models/ip');
@@ -63,7 +65,7 @@ function usage(exit) {
 
 
 function main() {
-    var parser = dashdash.createParser({options: OPTS});
+    var parser = dashdash.createParser({ options: OPTS });
     var opts, config;
     try {
         opts = parser.parse(process.argv);
@@ -82,7 +84,7 @@ function main() {
 
     try {
         config = require(opts.config);
-    } catch (e) {
+    } catch (_) {
         console.error('error: ' + path.resolve(opts.config) +
             ' invalid or not found.');
         process.exit(1);
@@ -132,7 +134,7 @@ function main() {
 
         mod_migrate.migrate(migrateOpts, function (merr) {
             if (merr) {
-                log.fatal({error: merr}, 'error during migration');
+                log.fatal({ error: merr }, 'error during migration');
                 process.exit(1);
             }
 
@@ -144,7 +146,7 @@ function main() {
 
             napi.updateNetwork(uuid, updateParams, function (uerr) {
                 if (uerr) {
-                    log.fatal({error: uerr}, 'error updating network');
+                    log.fatal({ error: uerr }, 'error updating network');
                     process.exit(1);
                 }
                 return;
diff --git a/lib/models/aggregation.js b/lib/models/aggregation.js
index 6ea2324..88f579c 100644
--- a/lib/models/aggregation.js
+++ b/lib/models/aggregation.js
@@ -12,8 +12,11 @@
  * aggregation model
  */
 
+'use strict';
+
 var constants = require('../util/constants');
 var errors = require('../util/errors');
+var jsprim = require('jsprim');
 var mod_moray = require('../apis/moray');
 var mod_nic = require('./nic');
 var mod_nicTag = require('./nic-tag');
@@ -108,7 +111,7 @@ function validateMACs(opts, name, list, callback) {
         }
     });
 
-    if (!util_common.hashEmpty(invalid)) {
+    if (!jsprim.isEmpty(invalid)) {
         var mErr = new errors.invalidParam(name, 'invalid MAC addresses',
             { invalid: Object.keys(invalid).sort() });
         return callback(mErr);
diff --git a/lib/models/fabric.js b/lib/models/fabric.js
index 2854e5c..4fed356 100644
--- a/lib/models/fabric.js
+++ b/lib/models/fabric.js
@@ -12,6 +12,7 @@
  * fabric model
  */
 
+'use strict';
 
 var constants = require('../util/constants');
 var mod_moray = require('../apis/moray');
diff --git a/lib/models/index.js b/lib/models/index.js
index a1fd555..d3c684e 100644
--- a/lib/models/index.js
+++ b/lib/models/index.js
@@ -12,6 +12,8 @@
  * Handles initializing all models
  */
 
+'use strict';
+
 var mod_aggr = require('./aggregation');
 var mod_fabric = require('./fabric');
 var mod_network_pool = require('./network-pool');
diff --git a/lib/models/ip/common.js b/lib/models/ip/common.js
index b19a3bf..5726482 100644
--- a/lib/models/ip/common.js
+++ b/lib/models/ip/common.js
@@ -12,6 +12,8 @@
  * ip model: common code
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var constants = require('../../util/constants');
@@ -60,6 +62,10 @@ var OPTIONAL_PARAMS = [
  * IP object constructor
  */
 function IP(params) {
+    assert.object(params, 'params');
+    assert.object(params.network, 'params.network');
+    assert.string(params.network_uuid, 'params.network_uuid');
+
     this.params = params;
 
     if (this.params.ipaddr) {
@@ -68,9 +74,7 @@ function IP(params) {
         this.params.ip = util_ip.toIPAddr(params.ip);
     }
 
-    // XXX: assert in params:
-    // * ip
-    // * network_uuid
+    assert.ok(this.params.ip, 'params.ip');
 
     if (params.hasOwnProperty('reserved') &&
         typeof (params.reserved) !== 'boolean') {
@@ -85,6 +89,8 @@ function IP(params) {
 
     this.use_strings = params.use_strings ||
         (params.network && params.network.ip_use_strings);
+
+    Object.seal(this);
 }
 
 Object.defineProperty(IP.prototype, 'address', {
@@ -103,7 +109,7 @@ Object.defineProperty(IP.prototype, 'v6address', {
     get: function () {
         var ipObj = this.params.ip;
 
-        if (ipObj.kind() == 'ipv4') {
+        if (ipObj.kind() === 'ipv4') {
             ipObj = ipObj.toIPv4MappedAddress();
         }
 
@@ -155,7 +161,7 @@ IP.prototype.key = function ipKey() {
 /**
  * Returns true if this IP can be provisioned
  */
-IP.prototype.provisionable = function ipProvisionable(opts) {
+IP.prototype.provisionable = function ipProvisionable() {
     if (!this.params.belongs_to_uuid || !this.params.belongs_to_type) {
         return true;
     }
@@ -250,17 +256,6 @@ function bucketName(networkUUID) {
 }
 
 
-/*
- * Convert an IP (address or string) to integer form
- */
-function ipToNumber(ip) {
-    if (isNaN(ip)) {
-        ip = util_ip.aton(ip);
-    }
-    return ip;
-}
-
-
 /**
  * Returns the bucket for a network
  */
diff --git a/lib/models/ip/index.js b/lib/models/ip/index.js
index 25faa1d..f99f1ec 100644
--- a/lib/models/ip/index.js
+++ b/lib/models/ip/index.js
@@ -12,7 +12,8 @@
  * IP model
  */
 
-var assert = require('assert-plus');
+'use strict';
+
 var common = require('./common');
 var constants = require('../../util/constants');
 var errors = require('../../util/errors');
@@ -21,12 +22,8 @@ var IP = common.IP;
 var jsprim = require('jsprim');
 var mod_moray = require('../../apis/moray');
 var restify = require('restify');
-var util = require('util');
-var util_common = require('../../util/common');
 var util_ip = require('../../util/ip');
-var util_mac = require('../../util/mac');
 var validate = require('../../util/validate');
-var vasync = require('vasync');
 
 
 
@@ -76,7 +73,7 @@ function validateNetworkObj(name, net, callback) {
  * If we are attempting to add or update owner_uuid, ensure that it
  * matches the network
  */
-function validateNetworkOwner(params, validated, callback) {
+function validateNetworkOwner(_, validated, callback) {
     if (!validated.network) {
         // We've already failed to validate the network - just return
         return callback();
@@ -175,9 +172,9 @@ function listNetworkIPs(app, log, oparams, callback) {
         });
 
         req.on('record', function _onNetListRec(rec) {
-            rec.value.network = params.network;
+            rec.value.network = oparams.network;
+            rec.value.network_uuid = params.network_uuid;
             var ip = new IP(rec.value);
-            ip.params.network_uuid = params.network_uuid;
             ips.push(ip);
         });
 
@@ -493,7 +490,7 @@ function batchCreateIPs(app, log, params, callback) {
         var key = ip.key();
 
         return {
-            bucket : bucket.name,
+            bucket: bucket.name,
             key: key,
             operation: 'put',
             value: ip.raw()
@@ -594,7 +591,7 @@ function extractParams(params, override) {
 /**
  * Initializes the nic tags bucket
  */
-function initIPbucket(app, log, networkUUID, callback) {
+function initIPbucket(app, networkUUID, callback) {
     var ipBucket = common.getBucketObj(networkUUID);
     mod_moray.initBucket(app.moray, ipBucket, callback);
 }
diff --git a/lib/models/ip/provision.js b/lib/models/ip/provision.js
index c0657a2..4508e8a 100644
--- a/lib/models/ip/provision.js
+++ b/lib/models/ip/provision.js
@@ -12,6 +12,8 @@
  * ip model: provisioning functions for IPs on logical networks
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var common = require('./common');
 var constants = require('../../util/constants');
@@ -437,7 +439,7 @@ function nextIPonNetwork(opts, callback) {
     var bucket = common.getBucketObj(opts.validated.network_uuid);
 
     if (opts.err) {
-        if (opts.err.context && opts.err.context.bucket == bucket.name) {
+        if (opts.err.context && opts.err.context.bucket === bucket.name) {
             // The error was because the IP we picked last time was already
             // taken - remove it from the queue below
             opts.log.debug('nextIPonNetwork: previous error due to us');
@@ -477,7 +479,7 @@ function nextIPonNetwork(opts, callback) {
 
     opts.log.debug('nextIPonNetwork: selecting IPs with %s', selectionFn.name);
 
-    selectionFn(opts, function (err, gap) {
+    selectionFn(opts, function (err) {
         if (err) {
             opts.ipProvisionTries++;
             return callback(err);
diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 25e0398..930ba1d 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -12,7 +12,8 @@
  * network pool model
  */
 
-var assert = require('assert');
+'use strict';
+
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var mod_moray = require('../apis/moray');
@@ -100,7 +101,7 @@ function validateNetworks(app, log, name, list, callback) {
                     tag = res.params.nic_tag;
                 }
 
-                if (res.params.nic_tag != tag) {
+                if (res.params.nic_tag !== tag) {
                     tagsNotMatching.push(uuid);
                     return cb();
                 }
@@ -136,7 +137,7 @@ function validateNetworks(app, log, name, list, callback) {
  * Validate that if a pool has an owner_uuid, all networks in the pool either
  * match that owner_uuid or have no owner_uuid.
  */
-function validateNetworkOwners(original, parsed, callback) {
+function validateNetworkOwners(_, parsed, callback) {
     if (!parsed.owner_uuids || !parsed._networks ||
         parsed.owner_uuids.length === 0 ||
         parsed._networks.length === 0) {
@@ -552,13 +553,7 @@ function deleteNetworkPool(app, log, params, callback) {
             return callback(err);
         }
 
-        app.moray.delObject(BUCKET.name, params.uuid, function (err2) {
-            if (err2) {
-                return callback(err2);
-            }
-
-            return callback();
-        });
+        app.moray.delObject(BUCKET.name, params.uuid, callback);
     });
 }
 
diff --git a/lib/models/network.js b/lib/models/network.js
index 9ffc907..4dda955 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -5,19 +5,19 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
  * network model and related functions
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var fmt = require('util').format;
-var ipaddr = require('ipaddr.js');
 var jsprim = require('jsprim');
 var lomstream = require('lomstream');
 var mod_ip = require('./ip');
@@ -33,8 +33,9 @@ var validate = require('../util/validate');
 var vasync = require('vasync');
 /*
  * Circular dependencies required at end of file.
- * var mod_network = require('./network');
  */
+var mod_nicTag; // = require('./nic-tag');
+var mod_nic_list; // = require('./nic/list').list;
 
 
 /*
@@ -209,6 +210,7 @@ function nameStr(params) {
 function placeholderIP(network, num) {
     var params = {
         network: network,
+        network_uuid: network.uuid,
         reserved: false
     };
 
@@ -297,7 +299,7 @@ function provisionRangeUpdates(app, log, network, update, callback) {
             }
 
             getOpts.params.ip = newIP;
-            mod_ip.get(getOpts, function (err3, newRec) {
+            mod_ip.get(getOpts, function (err3, _) {
                 if (err3) {
                     if (err3.statusCode === 404) {
                         batch.push({
@@ -603,7 +605,7 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
     if (badRoutes.length > 0) {
         errs.push(errors.invalidParam('routes',
             util.format(constants.SUBNET_ROUTE_DST_MISMATCH, subnetType),
-            { 'invalid' : badRoutes }));
+            { 'invalid': badRoutes }));
     }
 
     // IPv4-only checks - broadcast address is reserved
@@ -832,7 +834,7 @@ function createValidNetwork(opts, callback) {
                 log: log,
                 owner_uuid: opts.owner_uuid
             }),
-            validateNicTagMTU.bind(null, {app: app, log: log})
+            validateNicTagMTU.bind(null, { app: app, log: log })
         ]
     }, function (err, validatedParams) {
         if (err) {
@@ -1028,6 +1030,8 @@ function Network(params) {
     if (params.fields) {
         this.fields = params.fields;
     }
+
+    Object.seal(this);
 }
 
 Object.defineProperty(Network.prototype, 'gateway_provisioned', {
@@ -1183,7 +1187,6 @@ Network.prototype.serialize = function networkSerialize(opts) {
         name: this.params.name,
         provision_end_ip: this.params.provision_end_ip.toString(),
         provision_start_ip: this.params.provision_start_ip.toString(),
-        vlan_id: this.params.vlan_id,
         subnet: util.format('%s/%d',
             this.params.subnet_start.toString(),
             this.params.subnet_bits),
@@ -1346,7 +1349,7 @@ function createNetwork(opts, callback) {
         },
 
         function _createIPbucket(_, cb) {
-            mod_ip.bucketInit(app, log, network.uuid, cb);
+            mod_ip.bucketInit(app, network.uuid, cb);
         },
 
         function _createIPs(_, cb) {
@@ -1738,7 +1741,7 @@ function listNetworks(opts, callback) {
 /**
  * Internal function used to generate a fetch request for listNetworks.
  */
-function listNetworksFetch(opts, lobj, datacb, callback) {
+function listNetworksFetch(opts, lobj, _datacb, callback) {
     var copyOpts;
 
     assert.object(lobj);
@@ -1879,7 +1882,7 @@ function deleteNetwork(opts, callback) {
 
     log.debug(params, 'deleteNetwork: entry');
 
-    getNetwork(opts, function (getErr, oldNet) {
+    getNetwork(opts, function (getErr, _oldNet) {
         // We're going to rely on getNetwork() to do the validation of params
         // for us, including ownership checks
         if (getErr) {
@@ -1953,5 +1956,5 @@ module.exports = {
 /*
  * Circular dependencies 'require'd here. DON'T ASK QUESTIONS.
  */
-var mod_nicTag = require('./nic-tag');
-var mod_nic_list = require('./nic/list').list;
+mod_nicTag = require('./nic-tag');
+mod_nic_list = require('./nic/list').list;
diff --git a/lib/models/nic-tag.js b/lib/models/nic-tag.js
index 001db9c..32545cf 100644
--- a/lib/models/nic-tag.js
+++ b/lib/models/nic-tag.js
@@ -12,22 +12,21 @@
  * nic tag model
  */
 
+'use strict';
 
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var mod_moray = require('../apis/moray');
-var restify = require('restify');
 var util = require('util');
 var util_common = require('../util/common');
 var UUID = require('node-uuid');
 var validate = require('../util/validate');
 var vasync = require('vasync');
-var verror = require('verror');
 
 /*
  * Circular dependencies required at end of file.
- * var mod_network = require('./network');
  */
+var mod_network; // = require('./network');
 
 
 
@@ -81,12 +80,12 @@ function validateName(app, log, name, val, callback) {
 /**
  * Validates that the admin nic is created with an MTU of 1500.
  */
-function validateNicTagCreation(params, parsed, cb) {
+function validateNicTagCreation(_, parsed, cb) {
     if (parsed.name !== 'admin') {
         return cb();
     }
 
-    if (parsed.hasOwnProperty('mtu') && parsed.mtu != constants.MTU_DEFAULT) {
+    if (parsed.hasOwnProperty('mtu') && parsed.mtu !== constants.MTU_DEFAULT) {
         return cb(errors.invalidParam('mtu', constants.ADMIN_MTU_MSG));
     }
     return cb();
@@ -134,7 +133,7 @@ function nicTagInUse(opts, params, parsed, cb) {
 /**
  * Must have one of Name or MTU in an update.
  */
-function nameOrMTURequired(opts, params, parsed, cb) {
+function nameOrMTURequired(_opts, _params, parsed, cb) {
     if (!(parsed.hasOwnProperty('name') || parsed.hasOwnProperty('mtu'))) {
         return cb(errors.missingParam('name'));
     }
@@ -142,7 +141,7 @@ function nameOrMTURequired(opts, params, parsed, cb) {
 }
 
 
-function adminUpdateProhibited(opts, params, parsed, cb) {
+function adminUpdateProhibited(_opts, params, _parsed, cb) {
     if (params.oldname === 'admin') {
         return cb(errors.invalidParam('name', constants.ADMIN_UPDATE_MSG));
     }
@@ -150,7 +149,7 @@ function adminUpdateProhibited(opts, params, parsed, cb) {
 }
 
 
-function externalNameChangeProhibited(opts, params, parsed, cb) {
+function externalNameChangeProhibited(_opts, params, parsed, cb) {
     if (params.oldname === 'external' && parsed.name !== 'external') {
         return cb(errors.invalidParam('name', constants.EXTERNAL_RENAME_MSG));
     }
@@ -168,6 +167,9 @@ function validNameChange(opts, params, parsed, cb) {
     if (params.oldname !== parsed.name) {
         return getNicTag(opts.app, opts.log, { name: parsed.name },
             function (err, nictag) {
+            if (err && err.name !== 'ResourceNotFoundError') {
+                return cb(err);
+            }
             if (nictag) {
                 return cb(errors.duplicateParam('name'));
             }
@@ -183,36 +185,37 @@ function validNameChange(opts, params, parsed, cb) {
  * its networks.
  */
 function networkMTU(opts, params, parsed, callback) {
-    if (parsed.hasOwnProperty('mtu')) {
+    if (!parsed.hasOwnProperty('mtu')) {
+        callback();
+        return;
+    }
 
-        mod_network.list({
-            app: opts.app,
-            log: opts.log,
-            params: {
-                nic_tag: params.oldname
-            }
-        }, function (listErr, networks) {
-            var n;
+    mod_network.list({
+        app: opts.app,
+        log: opts.log,
+        params: {
+            nic_tag: params.oldname
+        }
+    }, function (listErr, networks) {
+        var n;
 
-            if (listErr) {
-                return callback(listErr);
-            }
+        if (listErr) {
+            callback(listErr);
+            return;
+        }
 
-            for (n in networks) {
-                if (!networks.hasOwnProperty(n)) {
-                    continue;
-                }
-                if (networks[n].params.mtu > parsed.mtu) {
-                    return callback(errors.nictagMtuInvalidForNetworks(
-                        networks));
-                }
+        for (n in networks) {
+            if (!networks.hasOwnProperty(n)) {
+                continue;
+            }
+            if (networks[n].params.mtu > parsed.mtu) {
+                callback(errors.nictagMtuInvalidForNetworks(networks));
+                return;
             }
+        }
 
-            return callback();
-        });
-    } else {
-        return callback();
-    }
+        callback();
+    });
 }
 
 
@@ -432,11 +435,11 @@ function updateNicTag(app, log, params, callback) {
                 },
                 after: [
                     nicTagInUse.bind(null, { app: app, log: log }),
-                    nameOrMTURequired.bind(null, { app: app, log: log}),
-                    adminUpdateProhibited.bind(null, { app: app, log: log}),
+                    nameOrMTURequired.bind(null, { app: app, log: log }),
+                    adminUpdateProhibited.bind(null, { app: app, log: log }),
                     externalNameChangeProhibited.bind(null,
-                        { app: app, log: log}),
-                    validNameChange.bind(null, { app: app, log: log}),
+                        { app: app, log: log }),
+                    validNameChange.bind(null, { app: app, log: log }),
                     networkMTU.bind(null, { app: app, log: log })
                 ]
             },
@@ -511,16 +514,11 @@ function deleteNicTag(app, log, params, callback) {
         after: nicTagInUse.bind(null, { app: app, log: log })
     }, function (err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
-        app.moray.delObject(BUCKET.name, params.name, function (err2) {
-            if (err2) {
-                return callback(err2);
-            }
-
-            return callback();
-        });
+        app.moray.delObject(BUCKET.name, params.name, callback);
     });
 }
 
@@ -622,4 +620,4 @@ module.exports = {
 /*
  * Circular dependencies 'require'd here. DON'T ASK QUESTIONS.
  */
-var mod_network = require('./network');
+mod_network = require('./network');
diff --git a/lib/models/nic/bucket.js b/lib/models/nic/bucket.js
index a7574e1..26200ac 100644
--- a/lib/models/nic/bucket.js
+++ b/lib/models/nic/bucket.js
@@ -7,6 +7,8 @@
  * deal with the circular dependency between nic and network models.
  */
 
+'use strict';
+
 // You can't use Postgres reserved keywords as column names, so
 // primary gets mapped to primary_flag. See:
 // http://www.postgresql.org/docs/current/static/sql-keywords-appendix.html
diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index 5fccbc4..22f9374 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -12,6 +12,8 @@
  * nic model: common code
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('../../util/constants');
 var errors = require('../../util/errors');
@@ -248,13 +250,13 @@ function validateNetworkParams(opts, params, parsedParams, callback) {
                          * IP errors), we should bubble upwards.
                          */
                         if (e.code === 'InvalidParameter') {
-                            cb(null, {input: network, result: false});
+                            cb(null, { input: network, result: false });
                             return;
                         }
                         cb(e);
                         return;
                     }
-                    cb(null, {input: network, result: true});
+                    cb(null, { input: network, result: true });
                 });
             },
             inputs: res
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index d579ada..4f3af8d 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -12,6 +12,8 @@
  * nic model: creation
  */
 
+'use strict';
+
 var common = require('./common');
 var mod_nicTag = require('../nic-tag');
 var provision = require('./provision');
@@ -77,7 +79,7 @@ function validateParams(opts, callback) {
         }
 
         opts.validated = res;
-        opts.log.debug({validated: opts.validated },
+        opts.log.debug({ validated: opts.validated },
             'validated network params');
         return callback();
     });
diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index 37535e2..d19b3b3 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -12,11 +12,11 @@
  * nic model: deleting
  */
 
+'use strict';
+
 var common = require('./common');
 var getNic = require('./get').get;
 var mod_ip = require('../ip');
-var mod_moray = require('../../apis/moray');
-var provision = require('./provision');
 var validate = require('../../util/validate');
 var vasync = require('vasync');
 
@@ -49,7 +49,7 @@ function listVnetCns(opts, cb) {
         return cb();
     }
     var listOpts = {
-        vnet_id : opts.existingNic.network.vnet_id,
+        vnet_id: opts.existingNic.network.vnet_id,
         moray: opts.app.moray,
         log: opts.log
     };
diff --git a/lib/models/nic/get.js b/lib/models/nic/get.js
index a6ff895..58ae550 100644
--- a/lib/models/nic/get.js
+++ b/lib/models/nic/get.js
@@ -12,11 +12,12 @@
  * nic model: getting
  */
 
+'use strict';
+
 var common = require('./common');
 var createFromRaw = require('./obj').createFromRaw;
 var mod_moray = require('../../apis/moray');
 var validate = require('../../util/validate');
-var vasync = require('vasync');
 
 
 
diff --git a/lib/models/nic/index.js b/lib/models/nic/index.js
index c2836c5..8dc6992 100644
--- a/lib/models/nic/index.js
+++ b/lib/models/nic/index.js
@@ -12,6 +12,8 @@
  * nic model
  */
 
+'use strict';
+
 var common = require('./common');
 var mod_moray = require('../../apis/moray');
 var mod_portolan_moray = require('portolan-moray');
diff --git a/lib/models/nic/list.js b/lib/models/nic/list.js
index 58ddbca..4895a2b 100644
--- a/lib/models/nic/list.js
+++ b/lib/models/nic/list.js
@@ -12,6 +12,8 @@
  * nic model: listing
  */
 
+'use strict';
+
 var clone = require('clone');
 var BUCKET = require('./bucket').BUCKET;
 var createFromRaw = require('./obj').createFromRaw;
diff --git a/lib/models/nic/obj.js b/lib/models/nic/obj.js
index 0bfdef4..9aebc73 100644
--- a/lib/models/nic/obj.js
+++ b/lib/models/nic/obj.js
@@ -12,6 +12,8 @@
  * nic model object
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var BUCKET = require('./bucket').BUCKET;
 var constants = require('../../util/constants');
@@ -21,11 +23,8 @@ var mod_moray = require('../../apis/moray');
 var mod_portolan_moray = require('portolan-moray');
 var mod_net = require('../network');
 var mod_ip = require('../ip');
-var util = require('util');
-var util_common = require('../../util/common');
 var util_ip = require('../../util/ip');
 var util_mac = require('../../util/mac');
-var UUID = require('node-uuid');
 var vasync = require('vasync');
 var VError = require('verror').VError;
 
diff --git a/lib/models/nic/provision.js b/lib/models/nic/provision.js
index aad21f0..4a7ee71 100644
--- a/lib/models/nic/provision.js
+++ b/lib/models/nic/provision.js
@@ -12,6 +12,8 @@
  * nic model: provisioning functions for nics and IPs
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -19,7 +21,6 @@ var constants = require('../../util/constants');
 var errors = require('../../util/errors');
 var mod_ip = require('../ip');
 var mod_net = require('../network');
-var mod_portolan_moray = require('portolan-moray');
 var Nic = require('./obj').Nic;
 var restify = require('restify');
 var util = require('util');
@@ -58,7 +59,7 @@ function ipOnNetwork(opts, callback) {
     var ipBucket = mod_ip.bucket(params.network_uuid);
 
     if (opts.ip && opts.err && opts.err.context &&
-        opts.err.context.bucket == ipBucket.name) {
+        opts.err.context.bucket === ipBucket.name) {
         var usedErr = new errors.InvalidParamsError(
             constants.msg.INVALID_PARAMS,
             [ errors.duplicateParam('ip', util.format(
@@ -301,7 +302,7 @@ function listVnetCns(opts, cb) {
             return cb(listErr);
         }
 
-        opts.log.debug({vnetCns: vnetCns}, 'provision.listVnetCns exit');
+        opts.log.debug({ vnetCns: vnetCns }, 'provision.listVnetCns exit');
         opts.vnetCns = vnetCns;
         return cb(null);
     });
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index 37bc018..0fbdce5 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -12,19 +12,18 @@
  * nic model: updating
  */
 
+'use strict';
+
 var common = require('./common');
 var constants = require('../../util/constants');
 var errors = require('../../util/errors');
 var getNic = require('./get').get;
 var mod_ip = require('../ip');
-var mod_vasync = require('vasync');
 var mod_nicTag = require('../nic-tag');
 var mod_portolan_moray = require('portolan-moray');
 var Nic = require('./obj').Nic;
 var provision = require('./provision');
 var util = require('util');
-var util_mac = require('../../util/mac');
-var util_common = require('../../util/common');
 var vasync = require('vasync');
 var validate = require('../../util/validate');
 
@@ -140,20 +139,9 @@ function getUpdatedNicParams(opts) {
 function getExistingNic(opts, callback) {
     opts.log.trace('getExistingNic: entry');
 
-    var macNum = util_mac.macAddressToNumber(opts.params.mac);
-    if (!macNum) {
-        // Just return here - we'll fail with a nicer error in
-        // validateUpdateParams()
-        return callback();
-    }
-
     getNic(opts, function (err, res) {
-        if (err) {
-            return callback(err);
-        }
-
         opts.existingNic = res;
-        return callback();
+        return callback(err);
     });
 }
 
@@ -441,12 +429,7 @@ function update(opts, callback) {
     opts.log.trace('nic.update: entry');
 
     var funcs = [
-        function _existingNic(_opts, _cb) {
-            getNic(_opts, function (err, nic) {
-                _opts.existingNic = nic;
-                return _cb(err);
-            });
-        },
+        getExistingNic,
         validateUpdateParams,
         setUpdateType,
         provisionIP,
diff --git a/lib/models/vlan.js b/lib/models/vlan.js
index 47cdf01..1c826bf 100644
--- a/lib/models/vlan.js
+++ b/lib/models/vlan.js
@@ -12,17 +12,14 @@
  * Fabric vlan model
  */
 
+'use strict';
+
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var fmt = require('util').format;
 var mod_fabric = require('./fabric');
 var mod_moray = require('../apis/moray');
 var mod_net = require('./network');
-var restify = require('restify');
-var util_common = require('../util/common');
-var util_ip = require('../util/ip');
-var util_subnet = require('../util/subnet');
-var UUID = require('node-uuid');
 var validate = require('../util/validate');
 
 
@@ -214,7 +211,7 @@ function createFabricVLAN(opts, callback) {
             if (err2) {
                 // XXX: distinguish between which of these conflicted, and
                 // retry if it was the fabric
-                if (err2.name == 'EtagConflictError') {
+                if (err2.name === 'EtagConflictError') {
                     return callback(new errors.InUseError(
                         constants.msg.VLAN_USED, [
                             errors.duplicateParam('vlan_id',
diff --git a/lib/napi.js b/lib/napi.js
index 4c0cc9a..d31acaa 100644
--- a/lib/napi.js
+++ b/lib/napi.js
@@ -12,12 +12,11 @@
  * The Networking API application
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var constants = require('./util/constants');
 var endpoints = require('./endpoints');
-var errors = require('./util/errors');
-var fs = require('fs');
 var EffluentLogger = require('effluent-logger');
 var EventEmitter = require('events').EventEmitter;
 var http = require('http');
@@ -25,8 +24,6 @@ var https = require('https');
 var models = require('./models');
 var mod_config = require('./config');
 var mod_init = require('./init');
-var mod_net = require('./models/network');
-var mod_nicTag = require('./models/nic-tag');
 var mod_migrate = require('./migrate.js');
 var moray = require('moray');
 var os = require('os');
@@ -149,15 +146,15 @@ function NAPI(opts) {
     server.use(restify.queryParser());
     server.use(restify.bodyParser());
 
-    server.on('after', function (req, res, route, err) {
+    server.on('after', function (req, res, route, _err) {
         if (route && !EVT_SKIP_ROUTES[route.name]) {
-            req.trace.end({name: route.name, req_seq: req.trace.seq_id});
+            req.trace.end({ name: route.name, req_seq: req.trace.seq_id });
         }
     });
 
     server.on('after', function _filteredAuditLog(req, res, route, err) {
         // Don't log ping requests, to avoid filling up the log
-        if (route && (route.name == 'getping' || route.name == 'headping')) {
+        if (route && (route.name === 'getping' || route.name === 'headping')) {
             return;
         }
 
@@ -168,7 +165,7 @@ function NAPI(opts) {
             }, true),
             // Successful GET res bodies are uninteresting and *big*.
             body: !((req.method === 'GET') &&
-                Math.floor(res.statusCode/100) === 2)
+                Math.floor(res.statusCode / 100) === 2)
         })(req, res, route, err);
     });
 
@@ -369,7 +366,7 @@ NAPI.prototype.init = function serverInit() {
 
     // node-moray's version API returns the version as the first argument of the
     // callback (and never returns an error)
-    this.moray.version({log: self.moray.log}, function (v) {
+    this.moray.version({ log: self.moray.log }, function (v) {
         self.morayVersion = v;
         modelInitRetry();
     });
diff --git a/lib/napictl.js b/lib/napictl.js
index bdcc573..00edcbe 100755
--- a/lib/napictl.js
+++ b/lib/napictl.js
@@ -13,6 +13,10 @@
  * Networking API
  */
 
+/* eslint-disable no-unused-vars */
+
+'use strict';
+
 var assert = require('assert-plus');
 var cmdln = require('cmdln');
 var fmt = require('util').format;
@@ -143,7 +147,7 @@ function requiredArgs(args, names) {
     var found = [];
     var missing = [];
     for (var i in names) {
-        if (args[i] == undefined) {
+        if (args[i] === undefined) {
             missing.push(names[i]);
         } else {
             found.push(args[i]);
@@ -242,9 +246,9 @@ NapiCli.prototype.getKeyValArgs = function (args, idx) {
         console.error('command-line params: ' + json(params));
     }
 
-    if (errs.length != 0) {
+    if (errs.length !== 0) {
         throw new VError('Invalid key / value parameter%s: %s',
-                (errs.length == 1 ? '' : 's'), errs.join(', '));
+                (errs.length === 1 ? '' : 's'), errs.join(', '));
     }
 
     return params;
diff --git a/lib/util/common.js b/lib/util/common.js
index 940802f..bd45f2a 100644
--- a/lib/util/common.js
+++ b/lib/util/common.js
@@ -12,8 +12,9 @@
  * Utilities: sharing is caring
  */
 
+'use strict';
+
 var errors = require('./errors');
-var restify = require('restify');
 
 
 
@@ -33,20 +34,6 @@ function arrayify(obj) {
 }
 
 
-/**
- * Returns true if the hash is empty
- */
-function hashEmpty(hash) {
-    /* jsl:ignore (for unused variable warning) */
-    for (var k in hash) {
-        return false;
-    }
-    /* jsl:end */
-
-    return true;
-}
-
-
 /**
  * Keeps repeating repeatCb, calling afterCb once done.
  * the arguments to repeatCb are: fn(err, res, keepGoing)
@@ -61,14 +48,10 @@ function repeat(repeatCb, afterCb) {
             return afterCb(err, res);
         }
 
-        /* jsl:ignore (for undeclared identifier warning) */
         return setImmediate(function _repeat() { repeatCb(next); });
-        /* jsl:end (for undeclared identifier warning) */
     };
 
-    /* jsl:ignore (for undeclared identifier warning) */
     return setImmediate(function _repeatFirst() { repeatCb(next); });
-    /* jsl:end (for undeclared identifier warning) */
 }
 
 
@@ -114,7 +97,6 @@ function translateParams(from, map, to) {
 
 module.exports = {
     arrayify: arrayify,
-    hashEmpty: hashEmpty,
     repeat: repeat,
     requireParams: requireParams,
     reqToOpts: reqToOpts,
diff --git a/lib/util/constants.js b/lib/util/constants.js
index d6695a9..946edb8 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -12,6 +12,8 @@
  * Shared constants
  */
 
+'use strict';
+
 var MESSAGES = {
     AGGR_BELONGS: 'all nics must have belongs_to_uuid of type server',
     AGGR_MATCH: 'belongs_to_uuid must match for all nics in the aggregation',
diff --git a/lib/util/errors.js b/lib/util/errors.js
index fd7e8d4..53a1c5c 100644
--- a/lib/util/errors.js
+++ b/lib/util/errors.js
@@ -12,6 +12,8 @@
  * Error classes and helpers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('./constants');
 var restify = require('restify');
diff --git a/lib/util/ip.js b/lib/util/ip.js
index fbcf6de..9bb58f3 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -12,6 +12,8 @@
  * IP-related utilities
  */
 
+'use strict';
+
 var ipaddr = require('ipaddr.js');
 var net = require('net');
 
@@ -76,7 +78,7 @@ function toIP6Addr(addr) {
     }
 
     var ipObj = ipaddr.process(addr);
-    if (ipObj.kind() == 'ipv4') {
+    if (ipObj.kind() === 'ipv4') {
         ipObj = ipObj.toIPv4MappedAddress();
     }
 
diff --git a/lib/util/mac.js b/lib/util/mac.js
index 334d6ab..0d800de 100644
--- a/lib/util/mac.js
+++ b/lib/util/mac.js
@@ -12,6 +12,7 @@
  * MAC address-related utilities
  */
 
+'use strict';
 
 var NON_HEX_RE = /[^a-fA-F0-9]/g;
 
@@ -25,7 +26,7 @@ function macAddressToNumber(addr) {
     }
 
     var num = addr.replace(/[-:]/g, '');
-    if (num.length != 12) {
+    if (num.length !== 12) {
         return null;
     }
     if (NON_HEX_RE.test(num)) {
@@ -59,42 +60,42 @@ function macNumberToAddress(num) {
     }
 
     // 2^40 = 1099511627776
-    var a = Math.floor(num/ 1099511627776);
+    var a = Math.floor(num / 1099511627776);
     var aR = num - (a * 1099511627776);
     var aStr = a.toString(16);
-    if (aStr.length == 1) {
+    if (aStr.length === 1) {
         aStr = '0' + aStr;
     }
 
     var b = Math.floor(aR / 4294967296);
     var bR = aR - (b * 4294967296);
     var bStr = b.toString(16);
-    if (bStr.length == 1) {
+    if (bStr.length === 1) {
         bStr = '0' + bStr;
     }
 
     var c = Math.floor(bR / 16777216);
     var cR = bR - (c * 16777216);
     var cStr = c.toString(16);
-    if (cStr.length == 1) {
+    if (cStr.length === 1) {
         cStr = '0' + cStr;
     }
 
     var d = Math.floor(cR / 65536);
     var dR = cR - (d * 65536);
     var dStr = d.toString(16);
-    if (dStr.length == 1) {
+    if (dStr.length === 1) {
         dStr = '0' + dStr;
     }
 
     var e = Math.floor(dR / 256);
     var eR = dR - (e * 256);
     var eStr = e.toString(16);
-    if (eStr.length == 1) {
+    if (eStr.length === 1) {
         eStr = '0' + eStr;
     }
     var fStr = eR.toString(16);
-    if (fStr.length == 1) {
+    if (fStr.length === 1) {
         fStr = '0' + fStr;
     }
 
diff --git a/lib/util/subnet.js b/lib/util/subnet.js
index c42b139..2987b4f 100644
--- a/lib/util/subnet.js
+++ b/lib/util/subnet.js
@@ -12,8 +12,9 @@
  * Subnet-related utilities
  */
 
+'use strict';
+
 var constants = require('./constants');
-var errors = require('./errors');
 var util = require('util');
 var util_ip = require('./ip');
 
diff --git a/lib/util/validate.js b/lib/util/validate.js
index df2e649..16c93b5 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -12,11 +12,13 @@
  * parameter validation functions
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('../util/constants');
 var errors = require('./errors');
 var fmt = require('util').format;
-var ipaddr = require('ipaddr.js');
+var jsprim = require('jsprim');
 var restify = require('restify');
 var util = require('util');
 var util_common = require('./common');
@@ -213,10 +215,7 @@ function validateStringArray(name, vals, callback) {
 function validateStringOrArray(name, val, callback) {
     validateString(name, val, function (err, vals) {
         if (err) {
-            validateStringArray(name, val, function (ierr, ival) {
-                 return callback(ierr, ival);
-            });
-            return;
+            return validateStringArray(name, val, callback);
         } else {
             return callback(null, vals);
         }
@@ -232,12 +231,18 @@ function validateIParray(name, arr, callback) {
     var ips = [];
 
     if (!util.isArray(arr) && typeof (arr) !== 'string') {
-        return callback(new errors.invalidParam(name, constants.msg.STR));
+        return callback(new errors.invalidParam(name,
+            constants.msg.ARRAY_OF_STR));
     }
 
     // UFDS will return a scalar if there's only one IP. Also allow
     // comma-separated IPs from the commandline tools
     util_common.arrayify(arr).forEach(function (i) {
+        if (typeof (i) !== 'string') {
+            errs.push(i);
+            return;
+        }
+
         var ip = i.replace(/\s+/, '');
         if (!ip) {
             return;
@@ -437,7 +442,7 @@ function validateUUIDarray(name, val, callback) {
         }
     });
 
-    if (!util_common.hashEmpty(invalid)) {
+    if (!jsprim.isEmpty(invalid)) {
         var err = new errors.invalidParam(name, 'invalid UUID');
         err.invalid = Object.keys(invalid).sort();
         return callback(err);
@@ -684,7 +689,7 @@ function crossValidate(errs, raw, validated, afterFuncs, callback) {
                 return cb();
             });
         }
-    }, function (err, results) {
+    }, function (_, _results) {
         return errResult(errs, validated, callback);
     });
 }
diff --git a/package.json b/package.json
index ac9fe5d..6d197e8 100644
--- a/package.json
+++ b/package.json
@@ -5,27 +5,28 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "assert-plus": "0.1.2",
-    "bunyan": "1.2.3",
-    "clone": "0.1.5",
+    "assert-plus": "1.0.0",
+    "bunyan": "1.8.1",
+    "clone": "1.0.2",
     "cmdln": "3.0.2",
     "dashdash": "1.7.3",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "ipaddr.js": "0.1.8",
-    "jsprim": "0.6.1",
-    "lomstream": "1.0.0",
-    "moray": "git+ssh://git@github.com:joyent/node-moray.git#b84ef0e",
-    "node-uuid": "1.4.2",
-    "portolan-moray": "git+ssh://git@github.com:joyent/sdc-portolan-moray.git#72eb031",
+    "jsprim": "1.2.2",
+    "lomstream": "1.1.0",
+    "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
+    "node-uuid": "1.4.7",
+    "portolan-moray": "git+https://github.com/joyent/sdc-portolan-moray.git#c756be9",
     "restify": "4.1.1",
-    "sdc-clients": "git+ssh://git@github.com:joyent/node-sdc-clients.git#beadb69",
-    "tape": "3.0.3",
+    "sdc-clients": "9.2.0",
+    "tape": "4.5.1",
     "trace-event": "1.3.0",
-    "vasync": "1.6.2",
-    "verror": "1.3.5"
+    "vasync": "1.6.4",
+    "verror": "1.6.1"
   },
   "devDependencies": {
-    "async": "0.1.22",
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1",
     "crc": "0.2.1",
     "ldapjs": "0.5.7",
     "xtend": "4.0.0"
diff --git a/server.js b/server.js
index bf1d66c..dd7f9c9 100644
--- a/server.js
+++ b/server.js
@@ -12,6 +12,8 @@
  * Main entry-point for the Networking API.
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
 var napi = require('./lib/napi');
 var restify = require('restify');
diff --git a/test/integration/aggregations.test.js b/test/integration/aggregations.test.js
index 14c1c74..e72b9b1 100644
--- a/test/integration/aggregations.test.js
+++ b/test/integration/aggregations.test.js
@@ -12,13 +12,14 @@
  * Integration tests for /aggregations endpoints
  */
 
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var h = require('./helpers');
 var mod_aggr = require('../lib/aggr');
 var mod_err = require('../../lib/util/errors');
 var mod_nic = require('../lib/nic');
 var test = require('tape');
-var util = require('util');
 var vasync = require('vasync');
 
 
@@ -27,7 +28,7 @@ var vasync = require('vasync');
 
 
 
-var NAPI = h.createNAPIclient();
+var NAPI = h.createNAPIclient(); // eslint-disable-line
 var owner = 'd9a4394a-1fba-49dc-b81d-a8ac54ca8ffa';
 var state = {
     aggrs: [],
@@ -40,36 +41,6 @@ var uuids = [
 
 
 
-// --- Helpers
-
-
-
-/**
- * Create an aggregation, but expect an error
- */
-function expCreateErr(t, params, expErr, callback) {
-    mod_aggr.create(t, state, params, { expectError: true },
-        function (err, res) {
-        if (!err) {
-            t.deepEqual(res, {}, 'res should not exist');
-            return t.end();
-        }
-
-        t.deepEqual(err.body, h.invalidParamErr({
-            errors: [ expErr ],
-            message: 'Invalid parameters'
-        }), 'Error body');
-
-        if (callback) {
-            return callback();
-        } else {
-            return t.end();
-        }
-    });
-}
-
-
-
 // --- Setup
 
 
@@ -376,11 +347,13 @@ test('teardown', function (t) {
             inputs: state.aggrs,
             func: function _delAggr(aggr, cb) {
                 mod_aggr.del(t2, aggr, function (err) {
+                    t2.ifError(err, 'deleted aggr');
                     return cb();
                 });
             }
 
         }, function (err) {
+            t2.ifError(err, 'deleted aggrs');
             return t2.end();
         });
     });
diff --git a/test/integration/fabrics-invalid.test.js b/test/integration/fabrics-invalid.test.js
index a34b684..9a92b1c 100644
--- a/test/integration/fabrics-invalid.test.js
+++ b/test/integration/fabrics-invalid.test.js
@@ -12,6 +12,8 @@
  * Fabric tests: invalid input
  */
 
+'use strict';
+
 var common = require('../lib/common');
 var extend = require('xtend');
 var fmt = require('util').format;
@@ -161,7 +163,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans', OWNERS[0]);
 
-        NAPI.client.post(path, params, function (err, req, res, obj) {
+        NAPI.client.post(path, params, function (err, req, res, _obj) {
             t.ok(err, 'error returned');
             if (err) {
                 t.equal(err.statusCode, 422, 'status code');
@@ -180,7 +182,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans/asdf', OWNERS[0]);
 
-        NAPI.client.put(path, params, function (err, req, res, obj) {
+        NAPI.client.put(path, params, function (err, req, res, _obj) {
             t.ok(err, 'error returned');
             if (err) {
                 t.equal(err.statusCode, 422, 'status code');
@@ -199,7 +201,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans/500', OWNERS[0]);
 
-        NAPI.client.put(path, params, function (err, req, res, obj) {
+        NAPI.client.put(path, params, function (err, req, res, _obj) {
             t.ok(err, 'error returned');
             if (err) {
                 t.equal(err.statusCode, 404, 'status code');
@@ -217,7 +219,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans/%d', OWNERS[0], VLANS[0].vlan_id);
 
-        NAPI.client.put(path, params, function (err, req, res, obj) {
+        NAPI.client.put(path, params, function (err, req, res, _obj) {
             common.ifErr(t, err, 'after PUT');
             return t.end();
         });
@@ -235,7 +237,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans/%d', OWNERS[0], VLANS[0].vlan_id);
 
-        NAPI.client.put(path, params, function (err, req, res, obj) {
+        NAPI.client.put(path, params, function (err, req, res, _obj) {
             common.ifErr(t, err, 'after PUT');
             return t.end();
         });
@@ -252,7 +254,7 @@ test('invalid vlan_id and owner_uuid: create and update', function (tt) {
         };
         var path = fmt('/fabrics/%s/vlans/%d', OWNERS[0], VLANS[0].vlan_id);
 
-        NAPI.client.put(path, params, function (err, req, res, obj) {
+        NAPI.client.put(path, params, function (err, req, res, _obj) {
             common.ifErr(t, err, 'after PUT');
             return t.end();
         });
@@ -327,7 +329,7 @@ test('create invalid networks', function (t) {
 
         // resolvers
         [ { resolvers: {} },
-            mod_err.invalidParam('resolvers', mod_err.msg.str) ],
+            mod_err.invalidParam('resolvers', mod_err.msg.strArray) ],
         [ { resolvers: 'asdf' }, resolverErr ],
         [ { resolvers: [ 'asdf' ] }, resolverErr ],
 
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index aa4909a..b4ebdac 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -12,6 +12,8 @@
  * Fabric tests
  */
 
+'use strict';
+
 var clone = require('clone');
 var config = require('../lib/config');
 var constants = require('../../lib/util/constants');
@@ -35,8 +37,6 @@ var test = require('../lib/fabrics').testIfEnabled;
 
 var ADMIN_OWNER;    // Loaded in setup below
 var CREATED = {};
-// XXX: shouldn't have to do this!
-var NAPI = h.createNAPIclient();
 var OWNERS = [
     mod_uuid.v4(),
     mod_uuid.v4(),
@@ -973,6 +973,7 @@ test('provision zone nics', function (t) {
                 deleted: false,
                 ip: CREATED.updateNic.ip,
                 mac: CREATED.updateNic.mac,
+                version: 1,
                 vnet_id: mod_portolan.nicVnetID(t, CREATED.updateNic)
             }
         });
@@ -1023,6 +1024,7 @@ test('provision zone nics', function (t) {
                 deleted: false,
                 ip: updateNic.ip,
                 mac: updateNic.mac,
+                version: 1,
                 vnet_id: mod_portolan.nicVnetID(t, updateNic)
             }
         });
@@ -1052,6 +1054,7 @@ test('provision zone nics', function (t) {
                 deleted: false,
                 ip: updateNic.ip,
                 mac: updateNic.mac,
+                version: 1,
                 vnet_id: mod_portolan.nicVnetID(t, updateNic)
             }
         });
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 4f6b3d8..dd08639 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -12,15 +12,13 @@
  * Test helpers for NAPI integration tests
  */
 
-var assert = require('assert');
-var bunyan = require('bunyan');
+'use strict';
+
 var common = require('../lib/common');
 var config = require('../lib/config');
 var fmt = require('util').format;
-var fs = require('fs');
 var mod_client = require('../lib/client');
 var mod_net = require('../lib/net');
-var path = require('path');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
 var vasync = require('vasync');
@@ -159,7 +157,7 @@ function deleteNicTag(t, napi, state, name, callback) {
 /**
  * Deletes all nic tags in state.nic_tags
  */
-function deleteNicTags(t, napi, state) {
+function deleteNicTags(t, napi, state, callback) {
     if (!state.hasOwnProperty('nic_tags') || state.nic_tags.length === 0) {
         return t.end();
     }
@@ -176,6 +174,11 @@ function deleteNicTags(t, napi, state) {
             });
         }
     }, function (err) {
+        t.ifError(err, 'delete test nic tags');
+        if (callback) {
+            return callback(err);
+        }
+
         return t.end();
     });
 }
@@ -214,7 +217,7 @@ function deletePreviousNetworks(t) {
             inputs: matching,
             func: function _delOne(net, cb) {
                 napi.deleteNetwork(net.uuid, { force: true }, function (dErr) {
-                    common.ifErr(t, err, fmt('delete network %s (%s)',
+                    common.ifErr(t, dErr, fmt('delete network %s (%s)',
                         net.uuid, net.name));
 
                     return cb();
@@ -345,7 +348,7 @@ function loadUFDSadminUUID(t, callback) {
  * similar() (that's a little test humour for you).
  */
 function similar(t, str, substr, message) {
-    t.ok((str.indexOf(substr) !== -1) || (str == substr), message);
+    t.ok((str.indexOf(substr) !== -1) || (str === substr), message);
 }
 
 
diff --git a/test/integration/ips.test.js b/test/integration/ips.test.js
index 62c2ecb..22ad0fa 100644
--- a/test/integration/ips.test.js
+++ b/test/integration/ips.test.js
@@ -12,6 +12,8 @@
  * Integration tests for /networks/:uuid/ips endpoints
  */
 
+'use strict';
+
 var common = require('../lib/common');
 var h = require('./helpers');
 var mod_ip = require('../lib/ip');
@@ -231,7 +233,8 @@ test('PUT /networks/:uuid/ips/:ip (free an IP)', function (t) {
             doUpdate
         ]
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'both updates should succeed');
+        t.end();
     });
 });
 
@@ -259,7 +262,7 @@ test('GET /networks/:uuid/ips: reserved IP', function (t) {
 
             var found = false;
             for (var i in ips) {
-                if (ips[i].ip == params.ip) {
+                if (ips[i].ip === params.ip) {
                     found = true;
                     t.deepEqual(ips[i], params, 'IP in list is correct');
                     break;
diff --git a/test/integration/migration-1.2.0-networks.test.js b/test/integration/migration-1.2.0-networks.test.js
index 0bf94c7..544163e 100644
--- a/test/integration/migration-1.2.0-networks.test.js
+++ b/test/integration/migration-1.2.0-networks.test.js
@@ -12,20 +12,18 @@
  * Network migration tests
  */
 
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var extend = require('xtend');
-var fmt = require('util').format;
-var h = require('./helpers');
 var mod_ip = require('../lib/ip');
 var mod_migr = require('../lib/migration');
-var mod_moray = require('../lib/moray');
 var mod_net = require('../lib/net');
 var mod_nic = require('../lib/nic');
 var mod_nictag = require('../lib/nic-tag');
 var mod_server = require('../lib/server');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
-var util = require('util');
 
 
 
@@ -33,7 +31,6 @@ var util = require('util');
 
 
 
-var NAPI;
 var BUCKETS = {
     adminIPs: ipsBucketV1('napi_ips_07eef409_c6eb_42cb_8712_bb0deaab8108'),
 
diff --git a/test/integration/network-overlap.test.js b/test/integration/network-overlap.test.js
index 74d9c6d..2891c8f 100644
--- a/test/integration/network-overlap.test.js
+++ b/test/integration/network-overlap.test.js
@@ -12,8 +12,9 @@
  * Integration tests for overlapping networks
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var constants = require('../../lib/util/constants');
 var fmt = require('util').format;
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
@@ -24,7 +25,6 @@ var mod_vlan = require('../lib/vlan');
 var mod_vasync = require('vasync');
 var test = require('tape');
 var testIfFabricsEnabled = require('../lib/fabrics').testIfEnabled;
-var util = require('util');
 
 
 
@@ -204,10 +204,11 @@ function testOverlap(t, testParams) {
                         created.push(oNet);
                     }
 
-                    return cb();
+                    return cb(err);
                 });
             }
-        }, function () {
+        }, function (err) {
+            t2.ifError(err, 'successfully created non-overlapping networks');
             return t2.end();
         });
     });
diff --git a/test/integration/network-owner.test.js b/test/integration/network-owner.test.js
index 7b923ae..c197532 100644
--- a/test/integration/network-owner.test.js
+++ b/test/integration/network-owner.test.js
@@ -12,16 +12,16 @@
  * Integration tests for /networks endpoints with owner_uuids specified
  */
 
+'use strict';
+
 var common = require('../lib/common');
 var constants = require('../../lib/util/constants');
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
 var mod_uuid = require('node-uuid');
 var mod_net = require('../lib/net');
-var mod_nic = require('../lib/nic');
 var mod_pool = require('../lib/pool');
 var test = require('tape');
-var util = require('util');
 var util_ip = require('../../lib/util/ip');
 var vasync = require('vasync');
 
@@ -579,10 +579,10 @@ test('teardown', function (t) {
             h.deleteNetwork(t, napi, state, 'noOwner2', cb);
 
         }, function (_, cb) {
-            h.deleteNicTags(t, napi, state);
+            h.deleteNicTags(t, napi, state, cb);
         }
     ] }, function (err) {
-        h.ifError(t, err, 'teardown pipeline');
-        return t.end();
+        t.ifError(err, 'teardown pipeline');
+        t.end();
     });
 });
diff --git a/test/integration/network-pools.test.js b/test/integration/network-pools.test.js
index 81a0283..e771eee 100644
--- a/test/integration/network-pools.test.js
+++ b/test/integration/network-pools.test.js
@@ -12,6 +12,8 @@
  * Integration tests for /network-pools endpoints
  */
 
+'use strict';
+
 var clone = require('clone');
 var h = require('./helpers');
 var mod_pool = require('../lib/pool');
@@ -43,7 +45,7 @@ function poolInList(t, pool, list) {
     var found = 0;
     for (var i = 0; i < list.length; i++) {
         var cur = list[i];
-        if (cur.uuid == pool.uuid) {
+        if (cur.uuid === pool.uuid) {
             t.deepEqual(cur, pool, util.format('pool %s in list', pool.name));
             found++;
         }
@@ -151,7 +153,7 @@ test('PUT /network_pools/:uuid', function (t) {
         t.deepEqual(res, params, 'update params');
 
         return napi.getNetworkPool(res.uuid, function (err2, res2) {
-            t.ifError(err, 'get network pool: ' + params.uuid);
+            t.ifError(err2, 'get network pool: ' + params.uuid);
             if (err) {
                 return t.end();
             }
@@ -173,7 +175,8 @@ test('DELETE /network-pools/:uuid', function (t) {
             });
         }
     }, function (err, res) {
-        return t.end();
+        t.ifError(err, 'deleting pools should succeed');
+        t.end();
     });
 });
 
diff --git a/test/integration/networks.test.js b/test/integration/networks.test.js
index 5cd0235..ec3e4d1 100644
--- a/test/integration/networks.test.js
+++ b/test/integration/networks.test.js
@@ -12,11 +12,12 @@
  * Integration tests for /networks endpoints
  */
 
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var extend = require('xtend');
 var fmt = require('util').format;
 var h = require('./helpers');
-var mod_err = require('../../lib/util/errors');
 var mod_net = require('../lib/net');
 var mod_uuid = require('node-uuid');
 var mod_vasync = require('vasync');
@@ -179,7 +180,8 @@ test('validate IPs created with network', function (t) {
         func: checkIP,
         inputs: ips
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'getting all IPs should succeed');
+        t.end();
     });
 });
 
@@ -402,7 +404,6 @@ test('network update: resolvers and name', function (tt) {
         updateParams.uuid = params.uuid;
 
         mod_net.update(t, {
-            fillIn: [ 'job_uuid' ],
             params: updateParams,
             exp: params
         });
@@ -410,8 +411,6 @@ test('network update: resolvers and name', function (tt) {
 
 
     tt.test('get network', function (t) {
-        delete params.job_uuid;
-
         mod_net.get(t, {
             params: {
                 uuid: params.uuid
@@ -447,7 +446,7 @@ test('teardown', function (t) {
         mod_vasync.forEachParallel({
             func: deleteNet,
             inputs: names
-        }, function (err) {
+        }, function () {
             return t2.end();
         });
     });
diff --git a/test/integration/nic-tags.test.js b/test/integration/nic-tags.test.js
index 5e6a5f1..b5c1ec6 100644
--- a/test/integration/nic-tags.test.js
+++ b/test/integration/nic-tags.test.js
@@ -12,10 +12,11 @@
  * Integration tests for /nic-tags endpoints
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_nic_tag = require('../lib/nic-tag');
 var test = require('tape');
-var util = require('util');
 var vasync = require('vasync');
 
 
@@ -57,8 +58,9 @@ test('POST /nic_tags', function (t) {
     vasync.forEachParallel({
         inputs: tagNames,
         func: createNicTag
-    }, function (err, res) {
-        return t.end();
+    }, function (err) {
+        t.ifError(err, 'creating NIC tags should succeed');
+        t.end();
     });
 });
 
@@ -111,7 +113,8 @@ test('DELETE /nic_tags', function (t) {
                 cb(err);
             });
         }
-    }, function (err, res) {
-        return t.end();
+    }, function (err) {
+        t.ifError(err, 'deleting NIC tags should succeed');
+        t.end();
     });
 });
diff --git a/test/integration/nics.test.js b/test/integration/nics.test.js
index b5bc79a..9a77d30 100644
--- a/test/integration/nics.test.js
+++ b/test/integration/nics.test.js
@@ -12,6 +12,8 @@
  * Integration tests for /nics and /networks/:uuid/nics endpoints
  */
 
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
@@ -20,8 +22,6 @@ var mod_nic = require('../lib/nic');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
-var util_ip = require('../../lib/util/ip');
-var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
 
@@ -305,7 +305,7 @@ test('POST /nics (with IP already reserved)', function (t) {
                 free: false
             };
             t2.deepEqual(res2, exp,
-                'IP params correct: '+ d.params.ip + d.desc);
+                'IP params correct: ' + d.params.ip + d.desc);
 
             return t2.end();
         });
@@ -452,7 +452,8 @@ test('Check IPs are created along with nics', function (t) {
         func: checkIP,
         inputs: ips
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'getting IPs should succeed');
+        t.end();
     });
 });
 
@@ -647,7 +648,8 @@ test('DELETE /nics/:mac (with reserved IP)', function (t) {
         func: delNic,
         inputs: ['resNic1', 'resNic2']
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'deleting NICs should succeed');
+        t.end();
     });
 });
 
@@ -672,7 +674,8 @@ test('GET /nics/:mac', function (t) {
         func: checkNic,
         inputs: nics
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'getting NICs should succeed');
+        t.end();
     });
 });
 
@@ -712,7 +715,8 @@ test('PUT /nics/:mac', function (t) {
         func: updateNic,
         inputs: nics
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'updating NICs should succeed');
+        t.end();
     });
 });
 
@@ -748,7 +752,8 @@ test('Check IPs are updated along with nics', function (t) {
         func: checkIP,
         inputs: ips
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'getting IPs should succeed');
+        t.end();
     });
 });
 
@@ -1058,7 +1063,7 @@ test('GET /nics (filtered)', function (t) {
             for (var i = 0; i < res.length; i++) {
                 var cur = res[i];
                 for (var f in filter) {
-                    if (cur[f] != filter[f]) {
+                    if (cur[f] !== filter[f]) {
                         t.equal(cur[f], filter[f], util.format('nic "%s" ' +
                             'does not match filter %s=%s: %j',
                             cur.mac, f, filter[f], cur));
@@ -1075,7 +1080,8 @@ test('GET /nics (filtered)', function (t) {
         func: listNics,
         inputs: filters
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'listing nics should succeed');
+        t.end();
     });
 });
 
@@ -1234,7 +1240,7 @@ test('DELETE /nics/:mac', function (t) {
     vasync.forEachParallel({
         func: delNic,
         inputs: nics
-    }, function (err) {
+    }, function (_err) {
         return t.end();
     });
 });
@@ -1247,7 +1253,7 @@ test('Check IPs are freed along with nics', function (t) {
         var ip = state.ip[ipDesc];
         var net = state.networks[0];
 
-        if (ipDesc == 'putIPwithName') {
+        if (ipDesc === 'putIPwithName') {
             net = state.adminNet;
         }
 
@@ -1280,7 +1286,7 @@ test('Check IPs are freed along with nics', function (t) {
     vasync.forEachParallel({
         func: checkIP,
         inputs: ips
-    }, function (err) {
+    }, function (_err) {
         return t.end();
     });
 });
diff --git a/test/integration/provision.test.js b/test/integration/provision.test.js
index 2646052..f8c4211 100644
--- a/test/integration/provision.test.js
+++ b/test/integration/provision.test.js
@@ -12,6 +12,8 @@
  * Integration tests for provisioning IPs
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var constants = require('../../lib/util/constants');
@@ -25,7 +27,6 @@ var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
-var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
 
@@ -438,7 +439,7 @@ function deleteTwoNics(t) {
                 }
 
                 napi.getIP(nic.network_uuid, nic.ip, function (err2, ip) {
-                    if (h.ifErr(t, err, 'get IP ' + nic.ip)) {
+                    if (h.ifErr(t, err2, 'get IP ' + nic.ip)) {
                         return cb(err);
                     }
 
@@ -475,7 +476,7 @@ function reprovisionDeleted(t, opts) {
 
     vasync.forEachParallel({
         inputs: state.deleted,
-        func: function _delOne(nic, cb) {
+        func: function _delOne(_, cb) {
             var client = h.createNAPIclient();
             var desc = util.format(' (req_id=%s)', client.req_id);
             var params = clone(NIC_PARAMS);
@@ -495,7 +496,8 @@ function reprovisionDeleted(t, opts) {
                 return cb();
             });
         }
-    }, function () {
+    }, function (err) {
+        t.ifError(err, 'reprovisioning all NICs should succeed');
         t.deepEqual(provisioned.sort(ipSort), state.deleted.map(function (n) {
             return n.ip;
         }).sort(ipSort), 'IPs reprovisioned');
@@ -529,7 +531,7 @@ function deleteAll(t) {
                     }
 
                     napi.getIP(nic.network_uuid, nic.ip, function (err2, ip) {
-                        if (h.ifErr(t2, err, 'get IP ' + nic.ip)) {
+                        if (h.ifErr(t2, err2, 'get IP ' + nic.ip)) {
                             return cb(err);
                         }
 
@@ -749,6 +751,7 @@ test('delete: in order', function (t) {
             delNext
         ]
     }, function (err) {
+        t.ifError(err, 'successful deletes');
         return t.end();
     });
 });
@@ -783,6 +786,7 @@ test('reprovision: by modification time', function (t) {
             provisionNext
         ]
     }, function (err) {
+        t.ifError(err, 'successful provisions');
         t.deepEqual(state.delayed.map(function (n) {
             return n.ip;
         }), provisioned, 'IPs reprovisioned in modification order');
diff --git a/test/integration/regression-NET-281.test.js b/test/integration/regression-NET-281.test.js
index 1d5400b..cfa423e 100644
--- a/test/integration/regression-NET-281.test.js
+++ b/test/integration/regression-NET-281.test.js
@@ -22,6 +22,8 @@
  * JSON.
  */
 
+'use strict';
+
 var config = require('../lib/config');
 var mod_restify = require('restify');
 var test = require('tape');
diff --git a/test/integration/zz-delete-test-networks.test.js b/test/integration/zz-delete-test-networks.test.js
index 14a2b30..4a7d06e 100644
--- a/test/integration/zz-delete-test-networks.test.js
+++ b/test/integration/zz-delete-test-networks.test.js
@@ -13,6 +13,8 @@
  * tests that crash half-way through
  */
 
+'use strict';
+
 var common = require('../lib/common');
 var fmt = require('util').format;
 var h = require('./helpers');
@@ -28,19 +30,15 @@ var vasync = require('vasync');
 var NAPI = h.createNAPIclient();
 // Regexes that match the network name:
 var NET_REs = [
-    /* jsl:ignore (for "regular expressions should be preceded ..." warning) */
     /^test-fabric-net\d-\d+$/,
     /^test-overlap-net\d-\d+$/,
     /^network-integration-\d+-\d$/,
     /^integration-overlap-testing/,
     /^test-net\d-\d+$/
-    /* jsl:end */
 ];
 var POOL_REs = [
-    /* jsl:ignore (for "regular expressions should be preceded ..." warning) */
     /^pool\d-\d+$/,
     /^test-pool\d-\d+$/
-    /* jsl:end */
 ];
 
 
diff --git a/test/lib/aggr.js b/test/lib/aggr.js
index c55b84f..0a51279 100644
--- a/test/lib/aggr.js
+++ b/test/lib/aggr.js
@@ -12,8 +12,9 @@
  * Test helpers for dealing with aggregations
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var common = require('./common');
 var log = require('./log');
 var mod_client = require('./client');
diff --git a/test/lib/client.js b/test/lib/client.js
index 36b7b73..840a0a8 100644
--- a/test/lib/client.js
+++ b/test/lib/client.js
@@ -12,6 +12,7 @@
  * Test helpers for dealing with the NAPI client
  */
 
+'use strict';
 
 
 // --- Globals
diff --git a/test/lib/common.js b/test/lib/common.js
index f5d3cff..3a32e28 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -12,6 +12,8 @@
  * Common test helpers shared between integration and unit tests
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var fmt = require('util').format;
 var clone = require('clone');
@@ -287,7 +289,7 @@ function afterAPIcall(t, opts, callback, err, obj, _, res) {
             type + 'partial result' + desc);
     }
 
-    if (opts.reqType == 'create') {
+    if (opts.reqType === 'create') {
         addToState(opts, opts.type + 's', obj);
     }
 
@@ -567,7 +569,7 @@ function randomMAC() {
     var data = [(Math.floor(Math.random() * 15) + 1).toString(16) + 2];
     for (var i = 0; i < 5; i++) {
          var oct = (Math.floor(Math.random() * 255)).toString(16);
-         if (oct.length == 1) {
+         if (oct.length === 1) {
                 oct = '0' + oct;
          }
          data.push(oct);
diff --git a/test/lib/config.js b/test/lib/config.js
index dd88bf6..bd187bc 100644
--- a/test/lib/config.js
+++ b/test/lib/config.js
@@ -12,6 +12,8 @@
  * Test configuration
  */
 
+'use strict';
+
 var clone = require('clone');
 var fmt = require('util').format;
 var fs = require('fs');
diff --git a/test/lib/err.js b/test/lib/err.js
index 5dcb235..577b994 100644
--- a/test/lib/err.js
+++ b/test/lib/err.js
@@ -12,10 +12,11 @@
  * Error helpers
  */
 
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var errors = require('../../lib/util/errors');
 var util = require('util');
-var util_mac = require('../../lib/util/mac');
 
 
 
diff --git a/test/lib/fabric-net.js b/test/lib/fabric-net.js
index cc35c45..62d9a37 100644
--- a/test/lib/fabric-net.js
+++ b/test/lib/fabric-net.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with fabric networks
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -20,11 +22,9 @@ var fmt = require('util').format;
 var log = require('./log');
 var mod_client = require('./client');
 var mod_vasync = require('vasync');
-var util = require('util');
 var util_ip = require('../../lib/util/ip');
 
 var doneErr = common.doneErr;
-var doneRes = common.doneRes;
 
 
 
@@ -67,7 +67,7 @@ function createFabricNet(t, opts, callback) {
     var owner = params.owner_uuid;
     var vlan = params.vlan_id;
 
-    if (params.name == '<generate>') {
+    if (params.name === '<generate>') {
         params.name = generateNetworkName();
     }
 
diff --git a/test/lib/fabrics.js b/test/lib/fabrics.js
index 57740f5..e785109 100644
--- a/test/lib/fabrics.js
+++ b/test/lib/fabrics.js
@@ -12,6 +12,8 @@
  * Test helpers for testing fabrics
  */
 
+'use strict';
+
 var h = require('../integration/helpers');
 var test = require('tape');
 
diff --git a/test/lib/ip.js b/test/lib/ip.js
index a2ed009..5329038 100644
--- a/test/lib/ip.js
+++ b/test/lib/ip.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with IPs
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
diff --git a/test/lib/log.js b/test/lib/log.js
index f2dcfd0..0b38b59 100644
--- a/test/lib/log.js
+++ b/test/lib/log.js
@@ -12,6 +12,8 @@
  * bunyan logger for tests
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
 
 module.exports = bunyan.createLogger({
diff --git a/test/lib/migration.js b/test/lib/migration.js
index 5a71a84..0ebb3f6 100644
--- a/test/lib/migration.js
+++ b/test/lib/migration.js
@@ -12,8 +12,9 @@
  * Test helpers for accessing mock moray data
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var config = require('./config');
 var fmt = require('util').format;
 var log = require('./log');
@@ -199,7 +200,7 @@ function initTestBucket(t, opts) {
         function _getClient(_, cb) {
             getMorayClient(function (clErr, cl) {
                 client = cl;
-                return cb();
+                return cb(clErr);
             });
         },
 
@@ -255,7 +256,8 @@ function initTestBucket(t, opts) {
             });
         }
 
-    ] }, function () {
+    ] }, function (err) {
+        t.ifError(err, 'successfully initialized test buckets');
         return t.end();
     });
 }
diff --git a/test/lib/mock-moray.js b/test/lib/mock-moray.js
index f73e467..af1eca9 100644
--- a/test/lib/mock-moray.js
+++ b/test/lib/mock-moray.js
@@ -12,6 +12,8 @@
  * Mock moray object for unit tests
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var crc = require('crc');
 var clone = require('clone');
@@ -98,7 +100,7 @@ function checkEtag(opts, bucket, key, batch) {
         }
 
         var obj = BUCKET_VALUES[bucket][key];
-        if (opts.etag != obj._etag) {
+        if (opts.etag !== obj._etag) {
             throw etagConflictErr(
                 util.format('wanted to put etag "%s", but object has etag "%s"',
                     opts.etag, obj._etag), errOpts);
@@ -248,7 +250,7 @@ FakeMoray.prototype.batch = function _batch(data, callback) {
 
         var knownOp = false;
         ['delete', 'put', 'update'].forEach(function (opt) {
-            if (item.operation == opt) {
+            if (item.operation === opt) {
                 knownOp = true;
             }
         });
@@ -454,7 +456,7 @@ FakeMoray.prototype.putObject =
 
 
 FakeMoray.prototype.reindexObjects =
-        function reindexObjects(bucket, count, opts, callback) {
+        function reindexObjects(_bucket, _count, _opts, callback) {
     return callback(null, { processed: 0 });
 };
 
@@ -594,7 +596,8 @@ FakeMoray.prototype._gapNumber = function _gapNumber(opts) {
         }
 
         var bucketKeys = Object.keys(BUCKET_VALUES[bucket]).map(function (k) {
-            return Number(k); }).sort();
+            return Number(k);
+        }).sort();
         var found = 0;
         var last = bucketKeys[0];
         for (var i in bucketKeys) {
@@ -659,7 +662,8 @@ FakeMoray.prototype._gapIP = function _gapIP(opts) {
         }
 
         var bucketKeys = Object.keys(BUCKET_VALUES[bucket]).map(function (k) {
-            return util_ip.toIPAddr(k); }).sort(util_ip.compareTo);
+            return util_ip.toIPAddr(k);
+        }).sort(util_ip.compareTo);
         var found = 0;
         var last = bucketKeys[0];
         for (var i in bucketKeys) {
diff --git a/test/lib/mock-wf.js b/test/lib/mock-wf.js
index 44b8633..62cfe5d 100644
--- a/test/lib/mock-wf.js
+++ b/test/lib/mock-wf.js
@@ -12,6 +12,8 @@
  * Mock workflow client
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_uuid = require('node-uuid');
 
diff --git a/test/lib/moray.js b/test/lib/moray.js
index f400788..15302e0 100644
--- a/test/lib/moray.js
+++ b/test/lib/moray.js
@@ -12,6 +12,8 @@
  * Test helpers for accessing mock moray data
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mock_moray = require('./mock-moray');
 var mod_ip = require('../../lib/models/ip');
@@ -109,7 +111,7 @@ function getLastError() {
 /**
  * Gets all nic records from fake moray, sorted by MAC address
  */
-function getNic(mac, ip) {
+function getNic(mac) {
     var macNum = util_mac.aton(mac);
     assert.number(macNum, 'Not a valid MAC address');
 
@@ -119,7 +121,7 @@ function getNic(mac, ip) {
 /**
  * Gets all nic records from fake moray, sorted by MAC address
  */
-function getNics(network, ip) {
+function getNics() {
     var bucket = mock_moray._buckets.napi_nics;
     assert.object(bucket, 'bucket');
 
diff --git a/test/lib/net.js b/test/lib/net.js
index ae24be8..36becfa 100644
--- a/test/lib/net.js
+++ b/test/lib/net.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with networks
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -19,10 +21,8 @@ var fmt = require('util').format;
 var log = require('./log');
 var mod_client = require('./client');
 var mod_vasync = require('vasync');
-var util = require('util');
 var util_ip = require('../../lib/util/ip');
 
-var doneRes = common.doneRes;
 var doneErr = common.doneErr;
 
 
@@ -73,7 +73,7 @@ function createNet(t, opts, callback) {
     var client = opts.client || mod_client.get();
     var params = clone(opts.params);
 
-    if (params.name == '<generate>') {
+    if (params.name === '<generate>') {
         params.name = netName();
     }
 
diff --git a/test/lib/nic-tag.js b/test/lib/nic-tag.js
index 67760b3..e871552 100644
--- a/test/lib/nic-tag.js
+++ b/test/lib/nic-tag.js
@@ -12,8 +12,9 @@
  * Test helpers for dealing with nic tags
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var common = require('./common');
 var config = require('./config');
 var log = require('./log');
@@ -21,7 +22,6 @@ var mod_client = require('./client');
 var mod_vasync = require('vasync');
 var util = require('util');
 
-var doneRes = common.doneRes;
 var doneErr = common.doneErr;
 
 
@@ -68,7 +68,7 @@ function createTag(t, opts, callback) {
 
     var name = opts.name;
     var params = opts.params || {};
-    if (name == '<generate>') {
+    if (name === '<generate>') {
         name = util.format('test_tag%d_%d', NUM++, process.pid);
     }
 
diff --git a/test/lib/nic.js b/test/lib/nic.js
index e40bbf6..af9b9db 100644
--- a/test/lib/nic.js
+++ b/test/lib/nic.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with nics
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -76,7 +78,7 @@ function createNic(t, opts, callback) {
     assert.object(opts.params, 'opts.params');
 
     var mac = opts.mac;
-    if (mac == 'generate') {
+    if (mac === 'generate') {
         mac = common.randomMAC();
     }
     opts.idKey = 'mac';
@@ -133,7 +135,7 @@ function createNumNics(t, opts, callback) {
             nics.push(nic);
         }
 
-        if (++done == opts.num) {
+        if (++done === opts.num) {
             if (errs.length !== 0) {
                 return doneErr(new verror.MultiError(errs), t, callback);
             }
diff --git a/test/lib/pool.js b/test/lib/pool.js
index 54ae26e..8721199 100644
--- a/test/lib/pool.js
+++ b/test/lib/pool.js
@@ -12,13 +12,14 @@
  * Test helpers for dealing with network pools
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
 var log = require('./log');
 var mod_client = require('./client');
 var util = require('util');
-var verror = require('verror');
 
 var doneRes = common.doneRes;
 var doneErr = common.doneErr;
@@ -52,14 +53,14 @@ function create(t, opts, callback) {
     assert.object(opts.params, 'opts.params');
 
     var name = opts.name;
-    if (name == '<generate>') {
+    if (name === '<generate>') {
         name = util.format('test-pool%d-%d', NUM++, process.pid);
     }
     opts.reqType = 'create';
     opts.type = 'pool';
     opts.idKey = 'uuid';
 
-    if (opts.exp && opts.name == '<generate>') {
+    if (opts.exp && opts.name === '<generate>') {
         opts.exp.name = name;
     }
 
@@ -131,7 +132,7 @@ function delAll(t, opts, callback) {
 
         function _afterDel() {
             done++;
-            if (done == res.length) {
+            if (done === res.length) {
                 doneRes(res, t, callback);
             }
         }
diff --git a/test/lib/portolan.js b/test/lib/portolan.js
index 1867d34..28c0346 100644
--- a/test/lib/portolan.js
+++ b/test/lib/portolan.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with overlays
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var config = require('./config');
diff --git a/test/lib/server.js b/test/lib/server.js
index 5bc0822..837ae6d 100644
--- a/test/lib/server.js
+++ b/test/lib/server.js
@@ -12,10 +12,10 @@
  * NAPI test server helpers
  */
 
-var assert = require('assert-plus');
+'use strict';
+
 var common = require('./common');
 var config = require('./config');
-var fs = require('fs');
 var FakeWFclient = require('./mock-wf').FakeWFclient;
 var log = require('./log');
 var mock_moray = require('./mock-moray');
diff --git a/test/lib/vlan.js b/test/lib/vlan.js
index fb24383..8277691 100644
--- a/test/lib/vlan.js
+++ b/test/lib/vlan.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with fabric VLANs
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -19,7 +21,6 @@ var fmt = require('util').format;
 var log = require('./log');
 var mod_client = require('./client');
 var mod_vasync = require('vasync');
-var util = require('util');
 
 var doneErr = common.doneErr;
 
diff --git a/test/unit/aggregations.test.js b/test/unit/aggregations.test.js
index e4059ba..05094eb 100644
--- a/test/unit/aggregations.test.js
+++ b/test/unit/aggregations.test.js
@@ -12,6 +12,8 @@
  * Unit tests for aggregation endpoints
  */
 
+'use strict';
+
 var h = require('./helpers');
 var common = require('../lib/common');
 var clone = require('clone');
@@ -23,7 +25,6 @@ var mod_nic = require('../lib/nic');
 var mod_nic_tag = require('../lib/nic-tag');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
-var util = require('util');
 var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
@@ -156,11 +157,10 @@ test('setup', function (t) {
 
     t.test('create client and server', function (t2) {
         h.createClientAndServer(function (err, res) {
-            t2.ifError(err, 'server creation');
-            t2.ok(res, 'client');
             NAPI = res;
-
-            return t2.end();
+            t2.ifError(err, 'server creation');
+            t2.ok(NAPI, 'client');
+            t2.end();
         });
     });
 
@@ -627,12 +627,11 @@ test('delete', function (t) {
         vasync.forEachParallel({
             inputs: state.aggrs,
             func: function _del(aggr, cb) {
-                mod_aggr.del(t2, aggr, function (err, res) {
-                    return cb();
-                });
+                mod_aggr.del(t2, aggr, cb);
             }
-        }, function () {
-            return t2.end();
+        }, function (err) {
+            t2.ifError(err, 'deleting aggrs should succeed');
+            t2.end();
         });
     });
 
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 484c492..4c2275c 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -12,20 +12,14 @@
  * Test helpers for NAPI unit tests
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var bunyan = require('bunyan');
-var clone = require('clone');
 var common = require('../lib/common');
 var constants = require('../../lib/util/constants');
-var fs = require('fs');
-var EventEmitter = require('events').EventEmitter;
-var ldapjs = require('ldapjs');
-var mod_client = require('../lib/client');
 var mod_server = require('../lib/server');
-var restify = require('restify');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
-var verror = require('verror');
 
 
 
@@ -69,6 +63,10 @@ function createClientAndServer(callback) {
     mod_server._create({
         unitTest: true
     }, function (err, res) {
+        if (err) {
+            return callback(err);
+        }
+
         SERVER = res.server;
         return callback(null, res.client);
     });
diff --git a/test/unit/ips.test.js b/test/unit/ips.test.js
index 6324a08..81ca326 100644
--- a/test/unit/ips.test.js
+++ b/test/unit/ips.test.js
@@ -12,14 +12,14 @@
  * Unit tests for IP endpoints
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var async = require('async');
 var clone = require('clone');
 var common = require('../lib/common');
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
 var mod_uuid = require('node-uuid');
-var restify = require('restify');
 var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
@@ -30,7 +30,6 @@ var vasync = require('vasync');
 
 
 
-var d = {};
 var MORAY_IP = '10.0.2.15';
 var NON_MORAY_IP = '10.0.2.115';
 var NAPI;
@@ -523,26 +522,29 @@ test('Update IP - valid param combinations (IP in moray)', function (t) {
         updateList.push({ reserved: false });
         updateList.push({ owner_uuid: mod_uuid.v4() });
 
-        async.forEachSeries(updateList, function (params, cb) {
-            NAPI.updateIP(NET.uuid, '10.0.2.25', params,
-                function (err2, obj, req, res) {
-                t.ifError(err2);
-                if (err2) {
-                    return cb();
-                }
-
-                t.equal(res.statusCode, 200, 'status code: ' +
-                    JSON.stringify(params));
-                for (var p in params) {
-                    ipParams[p] = params[p];
-                }
-
-                t.deepEqual(obj, ipParams, 'response');
-
-                return cb();
-            });
+        vasync.forEachPipeline({
+            'inputs': updateList,
+            'func': function (params, cb) {
+                NAPI.updateIP(NET.uuid, '10.0.2.25', params,
+                    function (err2, obj, req, res) {
+                    if (h.ifErr(t, err2, 'update IP')) {
+                        cb();
+                        return;
+                    }
+
+                    t.equal(res.statusCode, 200, 'status code: ' +
+                        JSON.stringify(params));
+                    for (var p in params) {
+                        ipParams[p] = params[p];
+                    }
+
+                    t.deepEqual(obj, ipParams, 'response');
+
+                    cb();
+                });
+            }
         }, function () {
-            return t.end();
+            t.end();
         });
     });
 });
@@ -559,31 +561,34 @@ test('Update IP - valid param combinations (IP not in moray)', function (t) {
             owner_uuid: mod_uuid.v4() }
     ];
 
-    async.forEachSeries(updateList, function (updateData, cb) {
-        var ip = '10.0.2.22' + i;
+    vasync.forEachPipeline({
+        'inputs': updateList,
+        'func': function (updateData, cb) {
+            var ip = '10.0.2.22' + i;
+
+            NAPI.updateIP(NET.uuid, ip, updateData,
+                function (err, obj, req, res) {
+                if (h.ifErr(t, err, 'update IP')) {
+                    t.deepEqual(err.body, {}, 'error body: ' +
+                        JSON.stringify(updateData));
+                    cb();
+                    return;
+                }
 
-        NAPI.updateIP(NET.uuid, ip, updateData,
-            function (err, obj, req, res) {
-            t.ifError(err);
-            if (err) {
-                t.deepEqual(err.body, {}, 'error body: ' +
+                t.equal(res.statusCode, 200, 'status code: ' +
                     JSON.stringify(updateData));
-                return cb();
-            }
-
-            t.equal(res.statusCode, 200, 'status code: ' +
-                JSON.stringify(updateData));
-            updateData.free =
-                updateData.hasOwnProperty('reserved') ? true : false;
-            updateData.reserved = false;
-            updateData.network_uuid = NET.uuid;
-            updateData.ip = ip;
-            t.deepEqual(obj, updateData, 'Response');
-
-            return cb();
-        });
+                updateData.free =
+                    updateData.hasOwnProperty('reserved') ? true : false;
+                updateData.reserved = false;
+                updateData.network_uuid = NET.uuid;
+                updateData.ip = ip;
+                t.deepEqual(obj, updateData, 'Response');
+
+                cb();
+            });
+        }
     }, function () {
-        return t.end();
+        t.end();
     });
 });
 
diff --git a/test/unit/network-owner.test.js b/test/unit/network-owner.test.js
index 157e581..0f8cc40 100644
--- a/test/unit/network-owner.test.js
+++ b/test/unit/network-owner.test.js
@@ -12,14 +12,14 @@
  * Unit tests for network endpoints
  */
 
-var assert = require('assert-plus');
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var helpers = require('./helpers');
 var mod_err = require('../../lib/util/errors');
 var mod_nic = require('../lib/nic');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
-var util = require('util');
 var util_ip = require('../../lib/util/ip');
 
 
@@ -325,9 +325,10 @@ test('setup', function (t) {
     t.test('create nic tag', function (t2) {
         // Match the name of the nic tag in helpers.validNetworkParams()
         NAPI.createNicTag('nic_tag', function (err2, res2) {
-            t2.ifError(err2);
             TAG = res2;
-            return t2.end();
+            t2.ifError(err2, 'no error creating NIC tag');
+            t2.ok(TAG, 'created NIC tag');
+            t2.end();
         });
     });
 
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index e513ba2..8370575 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -12,8 +12,9 @@
  * Unit tests for nic endpoints
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var async = require('async');
 var clone = require('clone');
 var common = require('../lib/common');
 var constants = require('../../lib/util/constants');
@@ -25,6 +26,7 @@ var mod_nic = require('../lib/nic');
 var mod_tag = require('../lib/nic-tag');
 var mod_pool = require('../lib/pool');
 var mod_uuid = require('node-uuid');
+var repeat = require('../../lib/util/common').repeat;
 var test = require('tape');
 var util = require('util');
 
@@ -561,7 +563,7 @@ test('Provision nic - on network pool with IP', function (t) {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
         ip: NETS[1].provision_start_ip,
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     NAPI.provisionNic(POOLS[0].uuid, params, function (err, res) {
@@ -581,8 +583,6 @@ test('Provision nic - on network pool with IP', function (t) {
 
 
 test('Provision nic - on network pool', function (t) {
-    var earlyOutErr;
-
     // The "Update pool" test above changes POOLS[0] to have NETS[0] and
     // NETS[1] as its networks:
     var ipNums = [
@@ -592,64 +592,61 @@ test('Provision nic - on network pool', function (t) {
         '9', '10', '11', '12'
     ];
 
-    async.whilst(
-        function () { return (!earlyOutErr && ipNums.length !== 0); },
-        function (cb) {
-            var client = h.createClient();
-            var params = {
-                belongs_to_type: 'zone',
-                belongs_to_uuid: mod_uuid.v4(),
-                owner_uuid:  mod_uuid.v4()
-            };
-            var nextIPnum = ipNums.shift();
-            var nextIP = util.format('10.0.%d.%d',
-                nextIPnum < 6 ? 0 : 1,
-                nextIPnum);
-            var desc = util.format(' %s (req_id=%s)', nextIP, client.req_id);
-
-            client.provisionNic(POOLS[0].uuid, params, function (err, res) {
-                if (h.ifErr(t, err, 'provisioning' + desc)) {
-                    earlyOutErr = err;
-                    return cb();
-                }
-
-                var net = nextIPnum < 6 ? NETS[0] : NETS[1];
-                t.deepEqual(res, mod_nic.addDefaultParams({
-                    belongs_to_type: params.belongs_to_type,
-                    belongs_to_uuid: params.belongs_to_uuid,
-                    ip: nextIP,
-                    mac: res.mac,
-                    owner_uuid: params.owner_uuid
-                }, net), 'result for' + desc);
+    repeat(function (cb) {
+        var client = h.createClient();
+        var params = {
+            belongs_to_type: 'zone',
+            belongs_to_uuid: mod_uuid.v4(),
+            owner_uuid: mod_uuid.v4()
+        };
+        var nextIPnum = ipNums.shift();
+        var nextIP = util.format('10.0.%d.%d',
+            nextIPnum < 6 ? 0 : 1,
+            nextIPnum);
+        var desc = util.format(' %s (req_id=%s)', nextIP, client.req_id);
+
+        client.provisionNic(POOLS[0].uuid, params, function (err, res) {
+            if (h.ifErr(t, err, 'provisioning' + desc)) {
+                return cb(null, null, true);
+            }
 
-                return cb();
-            });
-        },
-        function () {
-            // Both networks should now be exhausted of IPs and should return
-            // an error accordingly
+            var net = nextIPnum < 6 ? NETS[0] : NETS[1];
+            t.deepEqual(res, mod_nic.addDefaultParams({
+                belongs_to_type: params.belongs_to_type,
+                belongs_to_uuid: params.belongs_to_uuid,
+                ip: nextIP,
+                mac: res.mac,
+                owner_uuid: params.owner_uuid
+            }, net), 'result for' + desc);
+
+            var keepGoing = ipNums.length !== 0;
+            return cb(null, null, keepGoing);
+        });
+    }, function () {
+        // Both networks should now be exhausted of IPs and should return
+        // an error accordingly
 
-            var params = {
-                belongs_to_type: 'zone',
-                belongs_to_uuid: mod_uuid.v4(),
-                owner_uuid:  mod_uuid.v4()
-            };
+        var params = {
+            belongs_to_type: 'zone',
+            belongs_to_uuid: mod_uuid.v4(),
+            owner_uuid: mod_uuid.v4()
+        };
 
-            NAPI.provisionNic(POOLS[0].uuid, params, function (err, res) {
-                t.ok(err);
-                if (!err) {
-                    return t.end();
-                }
+        NAPI.provisionNic(POOLS[0].uuid, params, function (err, res) {
+            t.ok(err);
+            if (!err) {
+                return t.end();
+            }
 
-                t.equal(err.statusCode, 422, 'status code');
-                t.deepEqual(err.body, h.invalidParamErr({
-                    errors: [ mod_err.invalidParam('network_uuid',
-                                        constants.POOL_FULL_MSG) ]
-                }), 'error body');
+            t.equal(err.statusCode, 422, 'status code');
+            t.deepEqual(err.body, h.invalidParamErr({
+                errors: [ mod_err.invalidParam('network_uuid',
+                                    constants.POOL_FULL_MSG) ]
+            }), 'error body');
 
-                return t.end();
-            });
+            return t.end();
         });
+    });
 });
 
 
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index 0a79545..c462434 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -12,8 +12,8 @@
  * Unit tests for network endpoints
  */
 
-var assert = require('assert-plus');
-var async = require('async');
+'use strict';
+
 var clone = require('clone');
 var common = require('../lib/common');
 var constants = require('../../lib/util/constants');
@@ -23,13 +23,10 @@ var mod_err = require('../../lib/util/errors');
 var mod_ip = require('../../lib/models/ip');
 var mod_moray = require('../lib/moray');
 var mod_net = require('../lib/net');
-var mod_nic = require('../lib/nic');
 var mod_test_err = require('../lib/err');
 var mod_uuid = require('node-uuid');
-var mod_wf = require('../lib/mock-wf');
 var test = require('tape');
 var util = require('util');
-var util_ip = require('../../lib/util/ip');
 var vasync = require('vasync');
 
 
@@ -71,8 +68,9 @@ test('Initial setup', function (t) {
 
         // Match the name of the nic tag in h.validNetworkParams()
         NAPI.createNicTag('nic_tag', function (err2, res2) {
-            t.ifError(err2);
             TAG = res2;
+            t.ifError(err2, 'no error creating NIC tag');
+            t.ok(TAG, 'created NIC tag');
             t.end();
         });
     });
@@ -272,6 +270,11 @@ test('Create network - invalid parameters', function (t) {
         ['provision_end_ip', fmt('10.0.%d.1', num + 1), MSG.end_outside],
         ['provision_end_ip', fmt('10.0.%d.255', num), MSG.end_broadcast],
 
+        ['resolvers', true, constants.msg.ARRAY_OF_STR],
+        ['resolvers', 5, constants.msg.ARRAY_OF_STR],
+        ['resolvers', [ '1.2.3.4', true ], [ true ], 'invalid IP'],
+        ['resolvers', [ 5, true ], [ 5, true ], 'invalid IPs'],
+
         ['routes', { 'asdf': 'asdf', 'foo': 'bar' },
             [ 'asdf', 'asdf', 'foo', 'bar' ],
             'invalid routes'],
@@ -520,6 +523,9 @@ test('Create network where mtu nic_tag > network > default', function (t) {
             return t.end();
         }
 
+        nicTagParams.uuid = nictag.uuid;
+        t.deepEqual(nictag, nicTagParams, 'correct nictag result');
+
         var networkParams = h.validNetworkParams({
             nic_tag: nicTagName,
             mtu: constants.MTU_DEFAULT + 1000
@@ -561,6 +567,9 @@ test('Create network where mtu == nic_tag == max', function (t) {
             return t.end();
         }
 
+        nicTagParams.uuid = nictag.uuid;
+        t.deepEqual(nictag, nicTagParams, 'correct nictag result');
+
         var networkParams = h.validNetworkParams({
             nic_tag: nicTagName,
             mtu: constants.MTU_DEFAULT + 1000
@@ -1076,7 +1085,8 @@ test('Update provision range', function (t) {
                     ]
                 }
             ];
-            async.forEachSeries(updates, function (u, cb2) {
+
+            function updateBoundaries(u, cb2) {
                 var p = {
                     provision_end_ip: u.provision_end_ip,
                     provision_start_ip: u.provision_start_ip
@@ -1084,7 +1094,8 @@ test('Update provision range', function (t) {
 
                 NAPI.updateNetwork(net.uuid, p, function (err2, res2) {
                     if (h.ifErr(t, err2, u.desc + ': update network')) {
-                        return cb2(err2);
+                        cb2(err2);
+                        return;
                     }
 
                     ['provision_start_ip', 'provision_end_ip'].forEach(
@@ -1104,12 +1115,16 @@ test('Update provision range', function (t) {
                         return cb2();
                     });
                 });
-            }, function () {
-                return cb();
-            });
+            }
+
+            vasync.forEachPipeline({
+                'inputs': updates,
+                'func': updateBoundaries
+            }, cb);
         }
-    ] }, function () {
-        return t.end();
+    ] }, function (err) {
+        t.ifErr(err, 'provision range tests should finish cleanly');
+        t.end();
     });
 });
 
diff --git a/test/unit/nic-tags.test.js b/test/unit/nic-tags.test.js
index 9f2c7ff..01fe903 100644
--- a/test/unit/nic-tags.test.js
+++ b/test/unit/nic-tags.test.js
@@ -12,6 +12,8 @@
  * Unit tests for nic tag endpoints
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var common = require('../lib/common');
 var h = require('./helpers');
@@ -19,7 +21,6 @@ var mod_err = require('../../lib/util/errors');
 var mod_moray = require('../lib/moray');
 var constants = require('../../lib/util/constants');
 var test = require('tape');
-var util = require('util');
 
 
 
@@ -139,6 +140,7 @@ test('Create nic tag - missing all parameters', function (t) {
     // specified
     NAPI.post('/nic_tags', {}, function (err, obj, req, res) {
         t.ok(err, 'error returned');
+        t.deepEqual(obj, null, 'no value returned');
         if (!err) {
             return t.end();
         }
@@ -176,7 +178,7 @@ test('Create nic tag - duplicate name', function (t) {
 
 
 test('Create nic tag - with MTU', function (t) {
-    NAPI.createNicTag('newtagnamemtu', { mtu : constants.MTU_MAX },
+    NAPI.createNicTag('newtagnamemtu', { mtu: constants.MTU_MAX },
         function (err, obj, req, res) {
         if (h.ifErr(t, err, 'nic tag create - MTU')) {
             return t.end();
@@ -187,7 +189,7 @@ test('Create nic tag - with MTU', function (t) {
         var expObj = {
             name: 'newtagnamemtu',
             uuid: added.uuid,
-            mtu : constants.MTU_MAX
+            mtu: constants.MTU_MAX
         };
         t.deepEqual(obj, expObj, 'create response - MTU');
 
@@ -263,7 +265,7 @@ test('Create nic tag - with MTU > max', function (t) {
 
 
 test('Create admin nic tag - with default MTU', function (t) {
-    NAPI.createNicTag('admin', { mtu : constants.MTU_DEFAULT },
+    NAPI.createNicTag('admin', { mtu: constants.MTU_DEFAULT },
         function (err, obj, req, res) {
         if (h.ifErr(t, err, 'nic tag create ')) {
             return t.end();
@@ -274,7 +276,7 @@ test('Create admin nic tag - with default MTU', function (t) {
         var expObj = {
             name: 'admin',
             uuid: added.uuid,
-            mtu : constants.MTU_DEFAULT
+            mtu: constants.MTU_DEFAULT
         };
         t.deepEqual(obj, expObj, 'create response');
 
@@ -295,10 +297,11 @@ test('Create admin nic tag - with default MTU', function (t) {
 });
 
 test('Create admin nic tag - with wrong MTU', function (t) {
-    NAPI.createNicTag('admin', { mtu : constants.MTU_DEFAULT + 10 },
+    NAPI.createNicTag('admin', { mtu: constants.MTU_DEFAULT + 10 },
         function (err, obj, req, res) {
 
         t.ok(err, 'error returned');
+        t.deepEqual(obj, null, 'no value returned');
         if (!err) {
             return t.end();
         }
@@ -317,6 +320,11 @@ test('Create admin nic tag - with wrong MTU', function (t) {
 
 test('Delete nic tag in use', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         var netParams = h.validNetworkParams({
             nic_tag: curTag.name
         });
@@ -354,6 +362,11 @@ test('Delete nic tag in use', function (t) {
 
 test('Update nic tag - successful', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name, { name: 'bar2' },
             function (err, obj, req, res) {
             t.ifError(err, 'error returned');
@@ -376,8 +389,14 @@ test('Update nic tag - successful', function (t) {
 
 test('Update nic tag - missing name', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name, { }, function (err, obj, req, res) {
             t.ok(err, 'error returned');
+            t.deepEqual(obj, null, 'no value returned');
             if (!err) {
                 return t.end();
             }
@@ -396,6 +415,11 @@ test('Update nic tag - missing name', function (t) {
 
 test('Update nic tag - nic tag in use by network', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         var netParams = h.validNetworkParams({
             nic_tag: curTag.name
         });
@@ -428,6 +452,11 @@ test('Update nic tag - nic tag in use by network', function (t) {
 
 test('Update nic tag - already used name', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.createNicTag('somenewtag1', function (err, res) {
             t.ifError(err);
 
@@ -451,6 +480,11 @@ test('Update nic tag - already used name', function (t) {
 
 test('Update nic tag - MTU only', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name,
             { mtu: constants.MTU_NICTAG_MIN + 10 },
             function (err, obj, req, res) {
@@ -473,6 +507,11 @@ test('Update nic tag - MTU only', function (t) {
 
 test('Update nic tag - MTU and name', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name,
             { name: 'newname', mtu: constants.MTU_NICTAG_MIN + 10 },
             function (err, obj, req, res) {
@@ -494,84 +533,88 @@ test('Update nic tag - MTU and name', function (t) {
 });
 
 test('update admin nictag - name', function (t) {
-    NAPI.createNicTag('admin', { name: 'admin' }, function (err, nictag) {
-        if (h.ifErr(t, err, 'nic tag creation')) {
+    NAPI.createNicTag('admin', { name: 'admin' }, function (tErr, nictag) {
+        if (h.ifErr(t, tErr, 'nic tag creation')) {
             return t.end();
         }
 
+        t.ok(nictag, 'nictag object returned');
+
         NAPI.updateNicTag('admin', { name: 'notadmin' },
-            function (_err, obj, req, res) {
-            t.ok(_err, 'err returned');
-            if (!_err) {
+            function (err, obj, req, res) {
+            t.ok(err, 'err returned');
+            t.deepEqual(obj, null, 'no value returned');
+            if (!err) {
                 return t.end();
             }
 
-            t.equal(_err.statusCode, 422, 'status code');
-            t.deepEqual(_err.body, h.invalidParamErr({
+            t.equal(err.statusCode, 422, 'status code');
+            t.deepEqual(err.body, h.invalidParamErr({
                 errors: [
                     mod_err.invalidParam('name', constants.ADMIN_UPDATE_MSG)
                 ]
             }), 'Error body');
 
             // clean up 'admin' nictag, tested elsewhere.
-            return NAPI.deleteNicTag('admin', function (__err) {
-                t.ifError(__err, 'err cleaning up admin nic tag');
-                if (__err) {
-                    return t.end();
-                }
-                return t.end();
+            return NAPI.deleteNicTag('admin', function (err2) {
+                t.ifError(err2, 'err cleaning up admin nic tag');
+                t.end();
             });
         });
     });
 });
 
 test('update admin nictag - MTU', function (t) {
-    NAPI.createNicTag('admin', { name: 'admin' }, function (err, nictag) {
-        if (h.ifErr(t, err, 'nic tag creation')) {
+    NAPI.createNicTag('admin', { name: 'admin' }, function (tErr, nictag) {
+        if (h.ifErr(t, tErr, 'nic tag creation')) {
             return t.end();
         }
 
+        t.ok(nictag, 'nictag object returned');
+
         NAPI.updateNicTag('admin', { mtu: constants.MTU_NICTAG_MIN },
-            function (_err, obj, req, res) {
-            t.error(err, 'err returned');
-            if (!_err) {
+            function (err, obj, req, res) {
+            t.ok(err, 'err returned');
+            t.deepEqual(obj, null, 'no value returned');
+            if (!err) {
                 return t.end();
             }
 
-            t.equal(_err.statusCode, 422, 'status code');
-            t.deepEqual(_err.body, h.invalidParamErr({
+            t.equal(err.statusCode, 422, 'status code');
+            t.deepEqual(err.body, h.invalidParamErr({
                 errors: [
                     mod_err.invalidParam('name', constants.ADMIN_UPDATE_MSG)
                 ]
             }), 'Error body');
 
             // clean up 'admin' nictag, tested elsewhere.
-            return NAPI.deleteNicTag('admin', function (__err) {
-                t.ifError(__err, 'err cleaning up admin nic tag');
-                if (__err) {
-                    return t.end();
-                }
-                return t.end();
+            return NAPI.deleteNicTag('admin', function (err2) {
+                t.ifError(err2, 'err cleaning up admin nic tag');
+                t.end();
             });
         });
     });
 });
 
 test('update external nictag - name', function (t) {
-    NAPI.createNicTag('external', { name: 'external' }, function (err, nictag) {
-        if (h.ifErr(t, err, 'nic tag creation')) {
+    NAPI.createNicTag('external', { name: 'external' },
+        function (tErr, nictag) {
+        if (h.ifErr(t, tErr, 'nic tag creation')) {
             return t.end();
         }
 
+        t.ok(nictag, 'nictag object returned');
+
         NAPI.updateNicTag('external', { name: 'mobile' },
-            function (_err, obj, req, res) {
-            t.ok(_err, 'err returned');
-            if (!_err) {
+            function (err, obj, req, res) {
+            t.ok(err, 'err returned');
+            t.deepEqual(obj, null, 'no value returned');
+            if (!err) {
                 return t.end();
             }
 
-            t.equal(_err.statusCode, 422, 'status code');
-            t.deepEqual(_err.body, h.invalidParamErr({
+            t.equal(err.statusCode, 422, 'status code');
+            t.deepEqual(err.body, h.invalidParamErr({
                 errors: [
                     mod_err.invalidParam('name', constants.EXTERNAL_RENAME_MSG)
                 ]
@@ -585,11 +628,17 @@ test('update external nictag - name', function (t) {
 
 test('Update nic tag - bogus MTU', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name,
             { name: curTag.name, mtu: 'foobar' },
             function (err, obj, req, res) {
 
             t.ok(err, 'error returned');
+            t.deepEqual(obj, null, 'no value returned');
             if (!err) {
                 return t.end();
             }
@@ -607,11 +656,17 @@ test('Update nic tag - bogus MTU', function (t) {
 
 test('Update nic tag - with MTU < min', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name,
             { name: curTag.name, mtu: constants.MTU_NICTAG_MIN - 10 },
             function (err, obj, req, res) {
             // XXX do tests.
             t.ok(err, 'error returned');
+            t.deepEqual(obj, null, 'no value returned');
             if (!err) {
                 return t.end();
             }
@@ -629,11 +684,17 @@ test('Update nic tag - with MTU < min', function (t) {
 
 test('Update nic tag - with MTU > max', function (t) {
     newTag(t, function (tErr, curTag) {
+        if (h.ifErr(t, tErr, 'created new NIC tag')) {
+            t.end();
+            return;
+        }
+
         NAPI.updateNicTag(curTag.name,
             { name: curTag.name, mtu: constants.MTU_MAX + 10 },
             function (err, obj, req, res) {
             // XXX do tests.
             t.ok(err, 'error returned');
+            t.deepEqual(obj, null, 'no value returned');
             if (!err) {
                 return t.end();
             }
@@ -656,6 +717,9 @@ test('Update nic tag - MTU < networks', function (t) {
         if (h.ifErr(t, err, 'nic tag create')) {
             return t.end();
         }
+
+        t.ok(obj, 'created NIC tag');
+
         var netParams = h.validNetworkParams({
             nic_tag: tagName,
             mtu: constants.MTU_MAX
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index 0296530..36e9dae 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -12,8 +12,8 @@
  * Unit tests for nic endpoints
  */
 
-var assert = require('assert-plus');
-var clone = require('clone');
+'use strict';
+
 var common = require('../lib/common');
 var constants = require('../../lib/util/constants');
 var extend = require('xtend');
@@ -27,9 +27,6 @@ var mod_net = require('../lib/net');
 var mod_nic = require('../lib/nic');
 var mod_nicTag = require('../lib/nic-tag');
 var mod_uuid = require('node-uuid');
-var Network = require('../../lib/models/network').Network;
-var NicTag = require('../../lib/models/nic-tag').NicTag;
-var restify = require('restify');
 var test = require('tape');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
@@ -61,11 +58,11 @@ test('Initial setup', function (t) {
 
     t.test('create client and server', function (t2) {
         h.createClientAndServer(function (err, res) {
-            t.ifError(err, 'server creation');
-            t.ok(res, 'client');
+            t2.ifError(err, 'server creation');
+            t2.ok(res, 'client');
             NAPI = res;
 
-            return t.end();
+            t2.end();
         });
     });
 
@@ -505,7 +502,7 @@ test('Create nic with resolver IP', function (t) {
             belongs_to_uuid: mod_uuid.v4(),
             ip: net.resolvers[0],
             network_uuid: net.uuid,
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         d.mac = h.randomMAC();
@@ -527,7 +524,7 @@ test('Provision nic', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     NAPI.provisionNic(NET2.uuid, params, function (err, res) {
@@ -574,7 +571,7 @@ test('Provision nic: exceed MAC retries', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
     var numNicsBefore = mod_moray.getNics().length;
 
@@ -629,7 +626,7 @@ test('Provision nic: exceed IP retries', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
     var numNicsBefore = mod_moray.getNics().length;
 
@@ -688,7 +685,7 @@ test('Provision nic: MAC retry', function (t) {
         var params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         var fakeErr = new Error('Already exists');
@@ -741,7 +738,7 @@ test('Provision nic: MAC retry', function (t) {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
             network_uuid: PROV_MAC_NET.uuid,
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         var fakeErr = new Error('Already exists');
@@ -792,7 +789,7 @@ test('Provision nic: IP retry', function (t) {
         var params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         var fakeErr = new Error('Already exists');
@@ -847,7 +844,7 @@ test('Provision nic: IP retry', function (t) {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
             network_uuid: PROV_MAC_NET.uuid,
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         var fakeErr = new Error('Already exists');
@@ -968,7 +965,7 @@ test('Provision nic - with IP', function (t) {
         d.params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         mod_nic.create(t2, {
@@ -1000,7 +997,7 @@ test('Provision nic - with IP', function (t) {
         d.params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         d.exp3 = {
@@ -1040,7 +1037,7 @@ test('(PNDS) Provision nic - with different state', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4(),
+        owner_uuid: mod_uuid.v4(),
         state: 'stopped'
     };
     var exp = mod_nic.addDefaultParams({
@@ -1095,7 +1092,7 @@ test('Update nic - provision IP', function (t) {
         d.params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         mod_nic.create(t2, {
@@ -1159,7 +1156,7 @@ test('Update nic - IP parameters updated', function (t) {
             belongs_to_uuid: mod_uuid.v4(),
             ip: '10.0.2.188',
             network_uuid: NET.uuid,
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
         d.mac = h.randomMAC();
         d.exp = mod_nic.addDefaultParams({
@@ -1188,7 +1185,7 @@ test('Update nic - IP parameters updated', function (t) {
         var updateParams = {
             belongs_to_type: 'other',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         h.copyParams(updateParams, d.exp);
@@ -1250,7 +1247,7 @@ test('Update nic - change IP', function (t) {
             belongs_to_uuid: mod_uuid.v4(),
             ip: d.ips[0],
             network_uuid: NET.uuid,
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         d.mac = h.randomMAC();
@@ -1454,7 +1451,7 @@ test('Update nic - add resolver IP', function (t) {
         d.partialExp = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         d.mac = h.randomMAC();
@@ -1490,7 +1487,7 @@ test('Update nic - all invalid params', function (t) {
     var goodParams = {
         belongs_to_type: 'server',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     var badParams = {
@@ -1552,7 +1549,7 @@ test('Update nic - invalid params', function (t) {
     var goodParams = {
         belongs_to_type: 'server',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     var invalid = [
@@ -1636,7 +1633,7 @@ test('Update nic - no changes', function (t) {
         var params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         var partialExp = {
@@ -1726,7 +1723,7 @@ test('Update nic - change state', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     t.test('provision', function (t2) {
@@ -1759,7 +1756,7 @@ test('Update nic moray failure getting IP / network', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
 
@@ -1797,16 +1794,17 @@ test('Update nic moray failure getting IP / network', function (t) {
 
     t.test('check error', function (t2) {
         // Make sure we made it to the correct error
-        t.deepEqual(mod_moray.getErrors().getObject, [], 'no errors remaining');
+        t2.deepEqual(mod_moray.getErrors().getObject, [],
+            'no errors remaining');
 
-        t.deepEqual(mod_moray.getLastError(), {
+        t2.deepEqual(mod_moray.getLastError(), {
             bucket: ip_common.bucketName(NET2.uuid),
             key: mod_nic.lastCreated().ip,
             op: 'getObject',
             msg: 'Oh no!'
         }, 'last error');
 
-        return t.end();
+        t2.end();
     });
 
 
@@ -1834,7 +1832,7 @@ test('Delete nic - IP ownership changed underneath', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid:  mod_uuid.v4()
+        owner_uuid: mod_uuid.v4()
     };
 
     t.test('provision', function (t2) {
@@ -1942,7 +1940,7 @@ test('antispoof options', function (t) {
             allow_unfiltered_promisc: true,
             belongs_to_type: 'zone',
             belongs_to_uuid: mod_uuid.v4(),
-            owner_uuid:  mod_uuid.v4()
+            owner_uuid: mod_uuid.v4()
         };
 
         mod_nic.provision(t2, {
diff --git a/test/unit/search-ips.test.js b/test/unit/search-ips.test.js
index 0bd22cc..b9974e6 100644
--- a/test/unit/search-ips.test.js
+++ b/test/unit/search-ips.test.js
@@ -12,9 +12,8 @@
  * Unit tests for /search/ips endpoints
  */
 
-var assert = require('assert-plus');
-var async = require('async');
-var clone = require('clone');
+'use strict';
+
 var constants = require('../../lib/util/constants');
 var fmt = require('util').format;
 var h = require('./helpers');
@@ -22,10 +21,7 @@ var mod_err = require('../../lib/util/errors');
 var mod_net = require('../lib/net');
 var mod_nicTag = require('../lib/nic-tag');
 var mod_uuid = require('node-uuid');
-var restify = require('restify');
 var test = require('tape');
-var util = require('util');
-var vasync = require('vasync');
 
 
 
@@ -71,9 +67,10 @@ test('Initial setup', function (t) {
             params: params,
             partialExp: params
         }, function (err, res) {
+            t2.ifError(err, 'creating network should succeed');
             if (res) {
                 NETS.push(res);
-                t.ok(res.uuid, 'network uuid: ' + res.uuid);
+                t2.ok(res.uuid, 'network uuid: ' + res.uuid);
             }
 
             return t2.end();
@@ -82,7 +79,8 @@ test('Initial setup', function (t) {
 
     t.test('create client and server', function (t2) {
         h.createClientAndServer(function (err, res) {
-            t.ok(res, 'client');
+            t2.ifError(err, 'creating client and server should succeed');
+            t2.ok(res, 'client');
             NAPI = res;
             return t2.end();
         });
diff --git a/test/unit/util-ip.test.js b/test/unit/util-ip.test.js
index 6015289..a0e42af 100644
--- a/test/unit/util-ip.test.js
+++ b/test/unit/util-ip.test.js
@@ -12,6 +12,8 @@
  * IP address utility unit tests
  */
 
+'use strict';
+
 var IP = require('../../lib/util/ip');
 var test = require('tape');
 var util = require('util');
diff --git a/test/unit/util-mac.test.js b/test/unit/util-mac.test.js
index ecaafc0..688257e 100644
--- a/test/unit/util-mac.test.js
+++ b/test/unit/util-mac.test.js
@@ -12,6 +12,8 @@
  * MAC address utility unit tests
  */
 
+'use strict';
+
 var MAC = require('../../lib/util/mac');
 var test = require('tape');
 
@@ -26,7 +28,7 @@ test('macOUItoNumber - valid', function (t) {
         t.equal(MAC.macOUItoNumber(macs[m][0]), macs[m][1],
             'MAC number for "' + macs[m][0] + '" is valid');
         t.equal(MAC.macNumberToAddress(macs[m][1]), macs[m][2],
-            'MAC address "' +macs[m][2] + '" is valid');
+            'MAC address "' + macs[m][2] + '" is valid');
     }
 
     return t.end();
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..7996475
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,22 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ],
+        "consistent-return": "off",
+        "no-loop-func": "off"
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index e3501ad..ca9c670 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -32,7 +32,7 @@
 +legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
 +meaningless_block            # meaningless block; curly braces have no impact
 +mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
+-misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
 +missing_break                # missing break statement
 +missing_break_for_last_case  # missing break statement for last case in switch
 +missing_default_case         # missing default case in switch statement
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
-- 
2.21.0

