commit 36d59a79372fc57a0e15841b4acb47995bfa9df0 (refs/changes/04/1604/3)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-03-03T16:07:42-08:00 (2 years, 7 months ago)
    
    IMGAPI-619 add better error handling for _dockerDownloadAndImportImage
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/images.js b/lib/images.js
index 086d972..6673217 100644
--- a/lib/images.js
+++ b/lib/images.js
@@ -2448,7 +2448,7 @@ function _dockerDownloadAndImportImage(opts, callback) {
     var manifest;
     var newImage;
 
-    log.debug({uuid: uuid},
+    log.debug({imgId: imgId, uuid: uuid},
         'AdminImportDockerImage: check if image already exists');
     Image.get(app, uuid, log, function (gErr, image) {
         if (!gErr) {
@@ -2496,11 +2496,13 @@ function _dockerDownloadAndImportImage(opts, callback) {
             addImageFile
         ]}, function afterPipe(pipeErr, results) {
             if (pipeErr) {
+                log.info({imgId: imgId, err: pipeErr},
+                    'dockerDownloadAndImportImage: error downloading layer');
                 ctx.resMessage({
                     type: 'progress',
                     payload: {
                         id: imgId.substr(0, 12),
-                        status: pipeErr.message
+                        status: format('import error: %s', pipeErr.message)
                     }
                 });
                 callback(pipeErr);
@@ -2703,7 +2705,12 @@ function _dockerDownloadAndImportImage(opts, callback) {
                 // Give a short respite and then go again.
                 setTimeout(function () {
                     if (ctx.downloadsCanceled) {
-                        next(new errors.DownloadError('Download canceled'));
+                        log.info({err: rErr, imgId: imgId, fileSize: fileSize,
+                            addImageFileAttempts: addImageFileAttempts},
+                            'dockerDownloadAndImportImage: not retrying, ' +
+                            'download already canceled');
+                        next(new errors.DownloadError(rErr,
+                            'Download canceled'));
                         return;
                     }
                     log.info({imgId: imgId, fileSize: fileSize,
@@ -2731,7 +2738,7 @@ function _dockerDownloadAndImportImage(opts, callback) {
                         retryAddImageFile(fErr);
                         return;
                     }
-                    log.info({imgId: imgId, err: err},
+                    log.info({imgId: imgId, err: fErr},
                         'dockerDownloadAndImportImage: ' +
                         'not retrying on this error');
                     return next(fErr);
@@ -2830,10 +2837,12 @@ function _dockerDownloadAndImportImage(opts, callback) {
                 image: newImage,
                 stream: stream,
                 reqId: stream.id(),
-                filename: 'file0'
+                filename: 'file0',
+                noStreamErrorHandler: true
             }, function (sErr, tmpFilename, filename) {
                 if (sErr) {
-                    req.log.error(sErr, 'error storing image file');
+                    log.error({err: sErr, imgId: imgId},
+                        'error storing image file');
                     finish(errors.parseErrorFromStorage(
                         sErr, 'error receiving image file'));
                 } else {
diff --git a/lib/storage.js b/lib/storage.js
index 09b17dd..e41e308 100644
--- a/lib/storage.js
+++ b/lib/storage.js
@@ -294,6 +294,7 @@ LocalStorage.prototype.storeFileFromStream =
     assert.string(opts.filename, 'opts.filename');
     assert.optionalNumber(opts.size, 'opts.size');
     assert.optionalString(opts.contentMD5, 'opts.contentMD5');
+    assert.optionalBool(opts.noStreamErrorHandler, 'opts.noStreamErrorHandler');
     assert.func(callback, 'callback');
     var callbackOnce = once(callback);
 
@@ -315,9 +316,11 @@ LocalStorage.prototype.storeFileFromStream =
             return;
         }
 
-        opts.stream.on('error', function (err) {
-            onFileWriteStream(err);
-        });
+        if (!opts.noStreamErrorHandler) {
+            opts.stream.on('error', function (err) {
+                onFileWriteStream(err);
+            });
+        }
 
         if (opts.size !== undefined || opts.contentMD5) {
             opts.stream.on('data', function (chunk) {
