commit e2201c90de0888bcdda973495e148388f939dc94 (refs/changes/87/4687/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-08-15T17:43:50+02:00 (1 year, 2 months ago)
    
    TRITON-619 Manatee upgrades broken

diff --git a/lib/server/stor/moray_local.js b/lib/server/stor/moray_local.js
index 6618dde..5335e80 100644
--- a/lib/server/stor/moray_local.js
+++ b/lib/server/stor/moray_local.js
@@ -15,7 +15,7 @@
 
 var assert = require('assert-plus');
 var vasync = require('vasync');
-var verror = require('verror');
+var VError = require('verror');
 
 var util = require('../../common/util');
 
@@ -40,23 +40,53 @@ function MorayLocalStorage(opts) {
 
 // -- Helpers
 
-function is500(err) {
-    // All names that we consider "internal errors".  If we're missing
-    // one, get the stack trace, which should look like:
-    //    first of 1 error: connect ECONNREFUSED
-    //    ...
-    //    Caused by: Error: connect ECONNREFUSED
-    //               ^^^^^ <-- Is what should be in the list below
-    var names = [
-        'NoConnectionError',     // Moray HA Proxy is down
-        'ConnectionClosedError', // Moray services are down
-        'PoolClosedError',       // Postgres is down
-        'Error',         // Postgres is down
-        'error'                  // ZK is down
+function morayUsageError(err) {
+    // Instead of trying to figure out which errors are 500 by wondering about
+    // possible error names, we'll check that the error is not one of the known
+    // moray errors and consider it "internal error" otherwise.
+    //
+    // Known moray errors are included into moray's Error library
+    // (https://github.com/joyent/moray/blob/master/lib/errors.js) and
+    // documented as part of the Moray usage docs
+    // (https://github.com/joyent/moray/blob/master/docs/index.md).
+    //
+    // Every time a new usage error is added to moray, this file needs to
+    // be updated to include it.
+    assert.object(err, 'err');
+    var idx;
+    var usageErrors = [
+        'BucketNotFoundError',
+        'BucketConflictError',
+        'BucketVersionError',
+        // 'ConnectTimeoutError',
+        'EtagConflictError',
+        'FieldUpdateError',
+        // 'InternalError',
+        'InvalidMorayConfigError',
+        'InvalidBucketConfigError',
+        'InvalidBucketNameError',
+        'InvalidIndexDefinitionError',
+        'InvalidIndexTypeError',
+        'InvalidRequireError',
+        'InvalidQueryError',
+        'InvocationError',
+        // 'NoDatabasePeersError',
+        'NotFunctionError',
+        'NotIndexedError',
+        'NotNullableError',
+        'ObjectNotFoundError',
+        'QueryTimeoutError',
+        'SchemaChangeError',
+        'UniqueAttributeError'
     ];
-    return (names.some(function (name) {
-        return (verror.hasCauseWithName(err, name));
-    }));
+
+    for (idx = 0; idx < usageErrors.length; ++idx) {
+        if (VError.hasCauseWithName(err, usageErrors[idx])) {
+            return true;
+        }
+    }
+
+    return false;
 }
 
 function findApplication(uuid, cb) {
@@ -119,7 +149,8 @@ function loadAppObjects(uuid, stor, cb) {
         function findServices(_, subcb) {
             if (!_.application) {
                 _.services = [];
-                return (subcb());
+                subcb();
+                return;
             }
             var f = {
                 'application_uuid': _.application.value.uuid
@@ -264,7 +295,8 @@ function refreshLocal(cb) {
                         'type': type,
                         'obj': obj
                     }, m);
-                    return (pcb(new Error(m)));
+                    pcb(new Error(m));
+                    return;
                 }
                 var b = self.buckets[type];
                 var k = obj.uuid;
@@ -332,7 +364,7 @@ function refreshLocal(cb) {
             self.log.info('local stor refresh complete');
         }
         if (cb) {
-            return (cb(err));
+            cb(err);
         }
     });
 }
@@ -348,7 +380,7 @@ MorayLocalStorage.prototype.init = function init(cb) {
         self.interval = setInterval(refreshLocal.bind(self),
                         self.refreshInterval);
         if (cb) {
-            return (cb(err));
+            cb(err);
         }
     });
 };
@@ -369,8 +401,8 @@ function putObject(bucket, uuid, obj, opts, cb) {
                         opts, subcb);
             },
             function putLocal(_, subcb) {
-                function onRes(err) {
-                    return (subcb());
+                function onRes(_err) {
+                    subcb();
                 }
                 self.local.putObject(bucket, uuid, obj,
                         opts, onRes);
@@ -385,18 +417,20 @@ MorayLocalStorage.prototype.getObject = function getObject(bucket, uuid, cb) {
     // Try to read from moray.  If it fails due to being unavailable, then
     // we try to read from local.
     self.moray.getObject(bucket, uuid, function (err, obj) {
-        if (!err || !is500(err)) {
-            return (cb(err, obj));
+        if (!err || morayUsageError(err)) {
+            cb(err, obj);
+            return;
         }
         self.local.getObject(bucket, uuid, function (err2, obj2) {
             if (err2 || !obj2) {
                 // Return the original moray err.
-                return (cb(err));
+                cb(err);
+                return;
             }
             self.log.error(err, 'Failed to fetch from moray but ' +
                        'succeeded from local storage.  Is ' +
                        'moray down?');
-            return (cb(null, obj2));
+            cb(null, obj2);
         });
     });
 };
@@ -412,8 +446,9 @@ MorayLocalStorage.prototype.delObject = function delObject(bucket, uuid, cb) {
                 self.moray.delObject(bucket, uuid, subcb);
             },
             function delLocal(_, subcb) {
-                function onRes(err) {
-                    return (subcb());
+                function onRes(_err) {
+                    subcb();
+                    return;
                 }
                 self.local.delObject(bucket, uuid, onRes);
             }
@@ -429,18 +464,20 @@ function listObjectValues(bucket, filters, opts, cb) {
     // Try to read from moray.  If it fails due to being unavailable, then
     // we try to read from local.
     self.moray.listObjectValues(bucket, filters, opts, function (err, os) {
-        if (!err || !is500(err)) {
-            return (cb(err, os));
+        if (!err || morayUsageError(err)) {
+            cb(err, os);
+            return;
         }
         function onRes(err2, objs) {
             if (err2 || !objs || objs.length === 0) {
                 // Return the original moray err.
-                return (cb(err));
+                cb(err);
+                return;
             }
             self.log.error(err, 'Failed to fetch from moray but ' +
                        'succeeded from local storage.  Is ' +
                        'moray down?');
-            return (cb(null, objs));
+            cb(null, objs);
         }
         self.local.listObjectValues(bucket, filters, opts, onRes);
     });
@@ -455,7 +492,8 @@ MorayLocalStorage.prototype.ping = function ping(cb) {
     var self = this;
     self.moray.ping(function (err) {
         if (err) {
-            return (cb(err));
+            cb(err);
+            return;
         }
         self.local.ping(cb);
     });
