From 8211b497e812106ce1bd14b6eb79e3e336c69ba4 Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Mon, 12 Mar 2018 23:52:27 +0000
Subject: [PATCH] OS-6761 hcksum routines are too verbose OS-6762 want
 hcksum_clone function

---
 usr/src/uts/common/inet/ipf/ip_fil_solaris.c  |   8 +-
 usr/src/uts/common/io/chxge/ch.c              |   7 +-
 usr/src/uts/common/io/dld/dld_proto.c         |   7 +-
 usr/src/uts/common/io/elxl/elxl.c             |   6 +-
 usr/src/uts/common/io/gld.c                   |   7 +-
 usr/src/uts/common/io/ib/clients/ibd/ibd_cm.c |   7 +-
 usr/src/uts/common/io/mac/mac_util.c          |  17 +--
 usr/src/uts/common/os/strsubr.c               | 113 ++++++------------
 usr/src/uts/common/sys/strsubr.h              |  10 +-
 usr/src/uts/intel/io/vmxnet3s/vmxnet3_rx.c    |   3 +-
 usr/src/uts/intel/io/vmxnet3s/vmxnet3_tx.c    |   3 +-
 11 files changed, 71 insertions(+), 117 deletions(-)

diff --git a/usr/src/uts/common/inet/ipf/ip_fil_solaris.c b/usr/src/uts/common/inet/ipf/ip_fil_solaris.c
index 2a32ccc940..ad7a4beae2 100644
--- a/usr/src/uts/common/inet/ipf/ip_fil_solaris.c
+++ b/usr/src/uts/common/inet/ipf/ip_fil_solaris.c
@@ -5,7 +5,7 @@
  *
  * Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
  *
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #if !defined(lint)
@@ -1799,8 +1799,7 @@ int len;
 		 * Need to preserve checksum information by copying them
 		 * to newmp which heads the pulluped message.
 		 */
-		hcksum_retrieve(m, NULL, NULL, &start, &stuff, &end,
-		    &value, &flags);
+		hcksum_retrieve(m, &start, &stuff, &end, &value, &flags);
 
 		if (pullupmsg(m, len + ipoff + inc) == 0) {
 			ATOMIC_INCL(ifs->ifs_frstats[out].fr_pull[1]);
@@ -1813,8 +1812,7 @@ int len;
 			return NULL;
 		}
 
-		(void) hcksum_assoc(m, NULL, NULL, start, stuff, end,
-		    value, flags, 0);
+		hcksum_assoc(m, start, stuff, end, value, flags);
 
 		m->b_prev = m2;
 		m->b_rptr += inc;
diff --git a/usr/src/uts/common/io/chxge/ch.c b/usr/src/uts/common/io/chxge/ch.c
index 9f1f7f87de..a5723431fa 100644
--- a/usr/src/uts/common/io/chxge/ch.c
+++ b/usr/src/uts/common/io/chxge/ch.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -1377,8 +1378,7 @@ ch_send_up(ch_t *chp, mblk_t *mp, uint32_t cksum, int flg)
 		 * set in /etc/system (see sge.c).
 		 */
 		if (flg)
-			(void) hcksum_assoc(mp, NULL, NULL, 0, 0, 0, cksum,
-			    HCK_FULLCKSUM, 0);
+			hcksum_assoc(mp, 0, 0, 0, cksum, HCK_FULLCKSUM);
 		gld_recv(chp->ch_macp, mp);
 	} else {
 		freemsg(mp);
@@ -1693,8 +1693,7 @@ ch_send(gld_mac_info_t *macinfo, mblk_t *mp)
 	msg_flg = 0;
 	if (chp->ch_config.cksum_enabled) {
 		if (is_T2(chp)) {
-			hcksum_retrieve(mp, NULL, NULL, NULL, NULL, NULL,
-			    NULL, &msg_flg);
+			hcksum_retrieve(mp, NULL, NULL, NULL, NULL, &msg_flg);
 			flg = (msg_flg & HCK_FULLCKSUM)?
 			    CH_NO_CPL: CH_NO_HWCKSUM|CH_NO_CPL;
 		} else
diff --git a/usr/src/uts/common/io/dld/dld_proto.c b/usr/src/uts/common/io/dld/dld_proto.c
index d6b28c86a7..5080b247f1 100644
--- a/usr/src/uts/common/io/dld/dld_proto.c
+++ b/usr/src/uts/common/io/dld/dld_proto.c
@@ -21,7 +21,7 @@
 /*
  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
  * Copyright 2012, Nexenta Systems, Inc. All rights reserved.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -1211,7 +1211,6 @@ proto_unitdata_req(dld_str_t *dsp, mblk_t *mp)
 	uint16_t		sap;
 	uint_t			addr_length;
 	mblk_t			*bp, *payload;
-	uint32_t		start, stuff, end, value, flags;
 	t_uscalar_t		dl_err;
 	uint_t			max_sdu;
 
@@ -1280,9 +1279,7 @@ proto_unitdata_req(dld_str_t *dsp, mblk_t *mp)
 	/*
 	 * Transfer the checksum offload information if it is present.
 	 */
-	hcksum_retrieve(payload, NULL, NULL, &start, &stuff, &end, &value,
-	    &flags);
-	(void) hcksum_assoc(bp, NULL, NULL, start, stuff, end, value, flags, 0);
+	hcksum_clone(payload, bp);
 
 	/*
 	 * Link the payload onto the new header.
diff --git a/usr/src/uts/common/io/elxl/elxl.c b/usr/src/uts/common/io/elxl/elxl.c
index 2ffe96aff3..9d33eaf589 100644
--- a/usr/src/uts/common/io/elxl/elxl.c
+++ b/usr/src/uts/common/io/elxl/elxl.c
@@ -1,6 +1,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -1163,8 +1164,7 @@ elxl_m_tx(void *arg, mblk_t *mp)
 		cflags = 0;
 		if ((sc->ex_conf & CONF_90XB) != 0) {
 			uint32_t	pflags;
-			hcksum_retrieve(mp, NULL, NULL, NULL, NULL, NULL, NULL,
-			    &pflags);
+			hcksum_retrieve(mp, NULL, NULL, NULL, NULL, &pflags);
 			if (pflags & HCK_IPV4_HDRCKSUM) {
 				cflags |= EX_DPD_IPCKSUM;
 			}
@@ -1327,7 +1327,7 @@ elxl_recv(elxl_t *sc, ex_desc_t *rxd, uint32_t stat)
 		if (stat & (EX_UPD_TCPCHECKED | EX_UPD_UDPCHECKED)) {
 			pflags |= (HCK_FULLCKSUM | HCK_FULLCKSUM_OK);
 		}
-		(void) hcksum_assoc(mp, NULL, NULL, 0, 0, 0, 0, pflags, 0);
+		hcksum_assoc(mp, 0, 0, 0, 0, pflags);
 	}
 
 	return (mp);
diff --git a/usr/src/uts/common/io/gld.c b/usr/src/uts/common/io/gld.c
index ac0abe3263..3de30232fc 100644
--- a/usr/src/uts/common/io/gld.c
+++ b/usr/src/uts/common/io/gld.c
@@ -22,6 +22,7 @@
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  * Copyright (c) 2016 by Delphix. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -4550,8 +4551,7 @@ gld_unitdata(queue_t *q, mblk_t *mp)
 	ifp = ((gld_mac_pvt_t *)macinfo->gldm_mac_pvt)->interfacep;
 
 	/* grab any checksum information that may be present */
-	hcksum_retrieve(mp->b_cont, NULL, NULL, &start, &stuff, &end,
-	    &value, &flags);
+	hcksum_retrieve(mp->b_cont, &start, &stuff, &end, &value, &flags);
 
 	/*
 	 * Prepend a valid header for transmission
@@ -4567,8 +4567,7 @@ gld_unitdata(queue_t *q, mblk_t *mp)
 	}
 
 	/* apply any checksum information to the first block in the chain */
-	(void) hcksum_assoc(nmp, NULL, NULL, start, stuff, end, value,
-	    flags, 0);
+	hcksum_assoc(nmp, start, stuff, end, value, flags);
 
 	GLD_CLEAR_MBLK_VTAG(nmp);
 	if (gld_start(q, nmp, GLD_WSRV, upri) == GLD_NORESOURCES) {
diff --git a/usr/src/uts/common/io/ib/clients/ibd/ibd_cm.c b/usr/src/uts/common/io/ib/clients/ibd/ibd_cm.c
index 1c8318b191..79a3324e2f 100644
--- a/usr/src/uts/common/io/ib/clients/ibd/ibd_cm.c
+++ b/usr/src/uts/common/io/ib/clients/ibd/ibd_cm.c
@@ -21,6 +21,7 @@
 
 /*
  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 /* Copyright (c) 1990 Mentat Inc. */
 
@@ -272,8 +273,7 @@ ibd_async_rc_process_too_big(ibd_state_t *state, ibd_req_t *req)
 	icmph->icmph_checksum = IP_CSUM(pmtu_mp,
 	    (int32_t)sizeof (ib_header_info_t) + (int32_t)sizeof (ipha_t), 0);
 
-	(void) hcksum_assoc(pmtu_mp, NULL, NULL, 0, 0, 0, 0,
-	    HCK_FULLCKSUM | HCK_FULLCKSUM_OK, 0);
+	hcksum_assoc(pmtu_mp, 0, 0, 0, 0, HCK_FULLCKSUM | HCK_FULLCKSUM_OK);
 
 	DPRINT(30, "ibd_async_rc_process_too_big: sap=0x%x, ip_src=0x%x, "
 	    "ip_dst=0x%x, ttl=%d, len_needed=%d, msg_len=%d",
@@ -1560,8 +1560,7 @@ ibd_rc_process_rx(ibd_rc_chan_t *chan, ibd_rwqe_t *rwqe, ibt_wc_t *wc)
 	/*
 	 * Can RC mode in IB guarantee its checksum correctness?
 	 *
-	 *	(void) hcksum_assoc(mp, NULL, NULL, 0, 0, 0, 0,
-	 *	    HCK_FULLCKSUM | HCK_FULLCKSUM_OK, 0);
+	 * hcksum_assoc(mp, 0, 0, 0, 0, HCK_FULLCKSUM | HCK_FULLCKSUM_OK);
 	 */
 
 	/*
diff --git a/usr/src/uts/common/io/mac/mac_util.c b/usr/src/uts/common/io/mac/mac_util.c
index e83af37f16..1779f29c24 100644
--- a/usr/src/uts/common/io/mac/mac_util.c
+++ b/usr/src/uts/common/io/mac/mac_util.c
@@ -20,6 +20,7 @@
  */
 /*
  * Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -55,15 +56,12 @@ static mblk_t *
 mac_copymsg_cksum(mblk_t *mp)
 {
 	mblk_t *mp1;
-	uint32_t start, stuff, end, value, flags;
 
 	mp1 = copymsg(mp);
 	if (mp1 == NULL)
 		return (NULL);
 
-	hcksum_retrieve(mp, NULL, NULL, &start, &stuff, &end, &value, &flags);
-	(void) hcksum_assoc(mp1, NULL, NULL, start, stuff, end, value,
-	    flags, KM_NOSLEEP);
+	hcksum_clone(mp, mp1);
 
 	return (mp1);
 }
@@ -108,8 +106,7 @@ mac_fix_cksum(mblk_t *mp_chain)
 		struct ether_header *ehp;
 		uint16_t sap;
 
-		hcksum_retrieve(mp, NULL, NULL, &start, &stuff, &end, &value,
-		    &flags);
+		hcksum_retrieve(mp, &start, &stuff, &end, &value, &flags);
 		if (flags == 0)
 			continue;
 
@@ -304,8 +301,7 @@ mac_fix_cksum(mblk_t *mp_chain)
 			value = 0;
 		}
 
-		(void) hcksum_assoc(mp, NULL, NULL, start, stuff, end,
-		    value, flags, KM_NOSLEEP);
+		hcksum_assoc(mp, start, stuff, end, value, flags);
 	}
 
 	return (new_chain);
@@ -320,7 +316,6 @@ mac_add_vlan_tag(mblk_t *mp, uint_t pri, uint16_t vid)
 	mblk_t *hmp;
 	struct ether_vlan_header *evhp;
 	struct ether_header *ehp;
-	uint32_t start, stuff, end, value, flags;
 
 	ASSERT(pri != 0 || vid != 0);
 
@@ -350,9 +345,7 @@ mac_add_vlan_tag(mblk_t *mp, uint_t pri, uint16_t vid)
 	 * Free the original message if it's now empty. Link the
 	 * rest of messages to the header message.
 	 */
-	hcksum_retrieve(mp, NULL, NULL, &start, &stuff, &end, &value, &flags);
-	(void) hcksum_assoc(hmp, NULL, NULL, start, stuff, end, value, flags,
-	    KM_NOSLEEP);
+	hcksum_clone(mp, hmp);
 	if (MBLKL(mp) == 0) {
 		hmp->b_cont = mp->b_cont;
 		freeb(mp);
diff --git a/usr/src/uts/common/os/strsubr.c b/usr/src/uts/common/os/strsubr.c
index 87e0c5511d..91807cb39c 100644
--- a/usr/src/uts/common/os/strsubr.c
+++ b/usr/src/uts/common/os/strsubr.c
@@ -26,6 +26,7 @@
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  * Copyright (c) 2016 by Delphix. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -8449,96 +8450,60 @@ mblk_copycred(mblk_t *mp, const mblk_t *src)
 		dbp->db_cpid = cpid;
 }
 
-int
-hcksum_assoc(mblk_t *mp,  multidata_t *mmd, pdesc_t *pd,
-    uint32_t start, uint32_t stuff, uint32_t end, uint32_t value,
-    uint32_t flags, int km_flags)
+void
+hcksum_assoc(mblk_t *mp, uint32_t start, uint32_t stuff, uint32_t end,
+    uint32_t value, uint32_t flags)
 {
-	int rc = 0;
-
-	ASSERT(DB_TYPE(mp) == M_DATA || DB_TYPE(mp) == M_MULTIDATA);
-	if (mp->b_datap->db_type == M_DATA) {
-		/* Associate values for M_DATA type */
-		DB_CKSUMSTART(mp) = (intptr_t)start;
-		DB_CKSUMSTUFF(mp) = (intptr_t)stuff;
-		DB_CKSUMEND(mp) = (intptr_t)end;
-		DB_CKSUMFLAGS(mp) = flags;
-		DB_CKSUM16(mp) = (uint16_t)value;
-
-	} else {
-		pattrinfo_t pa_info;
-
-		ASSERT(mmd != NULL);
+	VERIFY(DB_TYPE(mp) == M_DATA);
 
-		pa_info.type = PATTR_HCKSUM;
-		pa_info.len = sizeof (pattr_hcksum_t);
-
-		if (mmd_addpattr(mmd, pd, &pa_info, B_TRUE, km_flags) != NULL) {
-			pattr_hcksum_t *hck = (pattr_hcksum_t *)pa_info.buf;
-
-			hck->hcksum_start_offset = start;
-			hck->hcksum_stuff_offset = stuff;
-			hck->hcksum_end_offset = end;
-			hck->hcksum_cksum_val.inet_cksum = (uint16_t)value;
-			hck->hcksum_flags = flags;
-		} else {
-			rc = -1;
-		}
-	}
-	return (rc);
+	DB_CKSUMSTART(mp) = (intptr_t)start;
+	DB_CKSUMSTUFF(mp) = (intptr_t)stuff;
+	DB_CKSUMEND(mp) = (intptr_t)end;
+	DB_CKSUMFLAGS(mp) = flags;
+	DB_CKSUM16(mp) = (uint16_t)value;
 }
 
 void
-hcksum_retrieve(mblk_t *mp, multidata_t *mmd, pdesc_t *pd,
-    uint32_t *start, uint32_t *stuff, uint32_t *end,
+hcksum_retrieve(mblk_t *mp, uint32_t *start, uint32_t *stuff, uint32_t *end,
     uint32_t *value, uint32_t *flags)
 {
-	ASSERT(DB_TYPE(mp) == M_DATA || DB_TYPE(mp) == M_MULTIDATA);
-	if (mp->b_datap->db_type == M_DATA) {
-		if (flags != NULL) {
-			*flags = DB_CKSUMFLAGS(mp) & HCK_FLAGS;
-			if ((*flags & (HCK_PARTIALCKSUM |
-			    HCK_FULLCKSUM)) != 0) {
-				if (value != NULL)
-					*value = (uint32_t)DB_CKSUM16(mp);
-				if ((*flags & HCK_PARTIALCKSUM) != 0) {
-					if (start != NULL)
-						*start =
-						    (uint32_t)DB_CKSUMSTART(mp);
-					if (stuff != NULL)
-						*stuff =
-						    (uint32_t)DB_CKSUMSTUFF(mp);
-					if (end != NULL)
-						*end =
-						    (uint32_t)DB_CKSUMEND(mp);
-				}
-			}
-		}
-	} else {
-		pattrinfo_t hck_attr = {PATTR_HCKSUM};
+	VERIFY(DB_TYPE(mp) == M_DATA);
 
-		ASSERT(mmd != NULL);
-
-		/* get hardware checksum attribute */
-		if (mmd_getpattr(mmd, pd, &hck_attr) != NULL) {
-			pattr_hcksum_t *hck = (pattr_hcksum_t *)hck_attr.buf;
+	if (flags == NULL)
+		return;
 
-			ASSERT(hck_attr.len >= sizeof (pattr_hcksum_t));
-			if (flags != NULL)
-				*flags = hck->hcksum_flags;
+	*flags = DB_CKSUMFLAGS(mp) & HCK_FLAGS;
+	if ((*flags & (HCK_PARTIALCKSUM | HCK_FULLCKSUM)) != 0) {
+		if (value != NULL)
+			*value = (uint32_t)DB_CKSUM16(mp);
+		if ((*flags & HCK_PARTIALCKSUM) != 0) {
 			if (start != NULL)
-				*start = hck->hcksum_start_offset;
+				*start = (uint32_t)DB_CKSUMSTART(mp);
 			if (stuff != NULL)
-				*stuff = hck->hcksum_stuff_offset;
+				*stuff = (uint32_t)DB_CKSUMSTUFF(mp);
 			if (end != NULL)
-				*end = hck->hcksum_end_offset;
-			if (value != NULL)
-				*value = (uint32_t)
-				    hck->hcksum_cksum_val.inet_cksum;
+				*end = (uint32_t)DB_CKSUMEND(mp);
 		}
 	}
 }
 
+void
+hcksum_clone(mblk_t *mp, mblk_t *target_mp)
+{
+	VERIFY(DB_TYPE(mp) == M_DATA && DB_TYPE(target_mp) == M_DATA);
+
+	/*
+	 * Do these assignments unconditionally, rather than only when flags is
+	 * non-zero.  This protects a situation where zeroed hcksum data does
+	 * not make the jump onto an mblk_t with stale data in those fields.
+	 */
+	DB_CKSUMFLAGS(target_mp) = (DB_CKSUMFLAGS(mp) & HCK_FLAGS);
+	DB_CKSUMSTUFF(target_mp) = DB_CKSUMSTUFF(mp);
+	DB_CKSUMEND(target_mp) = DB_CKSUMEND(mp);
+	DB_CKSUMFLAGS(target_mp) = DB_CKSUMFLAGS(mp);
+	DB_CKSUM16(target_mp) = DB_CKSUM16(mp);
+}
+
 void
 lso_info_set(mblk_t *mp, uint32_t mss, uint32_t flags)
 {
diff --git a/usr/src/uts/common/sys/strsubr.h b/usr/src/uts/common/sys/strsubr.h
index 064fdf5b09..44f3f8e4e5 100644
--- a/usr/src/uts/common/sys/strsubr.h
+++ b/usr/src/uts/common/sys/strsubr.h
@@ -25,6 +25,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #ifndef _SYS_STRSUBR_H
@@ -1238,10 +1239,11 @@ extern void strsignal_nolock(stdata_t *, int, uchar_t);
 
 struct multidata_s;
 struct pdesc_s;
-extern int hcksum_assoc(mblk_t *, struct multidata_s *, struct pdesc_s  *,
-    uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int);
-extern void hcksum_retrieve(mblk_t *, struct multidata_s *, struct pdesc_s *,
-    uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *);
+extern void hcksum_assoc(mblk_t *, uint32_t, uint32_t, uint32_t, uint32_t,
+    uint32_t);
+extern void hcksum_retrieve(mblk_t *, uint32_t *, uint32_t *, uint32_t *,
+    uint32_t *, uint32_t *);
+extern void hcksum_clone(mblk_t *, mblk_t *);
 extern void lso_info_set(mblk_t *, uint32_t, uint32_t);
 extern void lso_info_cleanup(mblk_t *);
 extern unsigned int bcksum(uchar_t *, int, unsigned int);
diff --git a/usr/src/uts/intel/io/vmxnet3s/vmxnet3_rx.c b/usr/src/uts/intel/io/vmxnet3s/vmxnet3_rx.c
index 8004a3eb3e..7f75e63b05 100644
--- a/usr/src/uts/intel/io/vmxnet3s/vmxnet3_rx.c
+++ b/usr/src/uts/intel/io/vmxnet3s/vmxnet3_rx.c
@@ -14,6 +14,7 @@
  */
 /*
  * Copyright (c) 2013, 2016 by Delphix. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <vmxnet3.h>
@@ -322,7 +323,7 @@ vmxnet3_rx_hwcksum(vmxnet3_softc_t *dp, mblk_t *mp,
 
 		VMXNET3_DEBUG(dp, 3, "rx cksum flags = 0x%x\n", flags);
 
-		(void) hcksum_assoc(mp, NULL, NULL, 0, 0, 0, 0, flags, 0);
+		hcksum_assoc(mp, 0, 0, 0, 0, flags);
 	}
 }
 
diff --git a/usr/src/uts/intel/io/vmxnet3s/vmxnet3_tx.c b/usr/src/uts/intel/io/vmxnet3s/vmxnet3_tx.c
index 8a9f05e690..defa4310a2 100644
--- a/usr/src/uts/intel/io/vmxnet3s/vmxnet3_tx.c
+++ b/usr/src/uts/intel/io/vmxnet3s/vmxnet3_tx.c
@@ -15,6 +15,7 @@
 
 /*
  * Copyright (c) 2012, 2016 by Delphix. All rights reserved.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <vmxnet3.h>
@@ -79,7 +80,7 @@ vmxnet3_tx_prepare_offload(vmxnet3_softc_t *dp, vmxnet3_offload_t *ol,
 	ol->hlen = 0;
 	ol->msscof = 0;
 
-	hcksum_retrieve(mp, NULL, NULL, &start, &stuff, NULL, &value, &flags);
+	hcksum_retrieve(mp, &start, &stuff, NULL, &value, &flags);
 
 	mac_lso_get(mp, &mss, &lso_flag);
 
-- 
2.21.0

