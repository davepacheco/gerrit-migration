From 549c6e5bbc72a906ef01afbd3fe79a7ac6a2ac16 Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Wed, 15 Mar 2017 21:29:20 -0700
Subject: [PATCH] NAPI-384 Entries should have creation or update times if
 possible in the API

---
 docs/index.md                          |   9 +-
 lib/models/nic/create.js               |   7 +-
 lib/models/nic/obj.js                  |  20 ++-
 lib/models/nic/provision.js            |   4 +
 lib/models/nic/update.js               |   5 +
 test/integration/fabrics.test.js       |   9 +-
 test/integration/helpers.js            |  30 ++++
 test/integration/network-owner.test.js |   5 +-
 test/integration/nics.test.js          | 101 +++++++++++-
 test/lib/common.js                     | 135 +++++++++++++++-
 test/lib/nic.js                        |   1 +
 test/unit/network-pools.test.js        |   4 +
 test/unit/nics.test.js                 | 206 ++++++++++++++++++-------
 13 files changed, 470 insertions(+), 66 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index e19bdef..6d2bf4c 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1151,9 +1151,16 @@ Returns the nic with the given MAC address.
       "resolvers": [
         "8.8.4.4",
         "8.8.8.8"
-      ]
+      ],
+      "created_timestamp": "2017-04-01T01:02:03.456Z",
+      "modified_timestamp": "2017-05-12T11:22:33.777Z"
     }
 
+The meaning of the fields are the same as in the CreateNic call.
+
+NOTE: The created and modified timestamps are read-only.  They may also
+return "1970-01-01T00:00:00.000Z" (epoch) if the creation or last modification
+of the nic occurred prior to NAPI implementing support for the timestamps.
 
 ## UpdateNic (PUT /nics/:mac_address)
 
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index b0ce442..3c1635b 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -75,21 +75,20 @@ function validateParams(opts, callback) {
 
     validate.params(CREATE_SCHEMA, copts, opts.params, function (err, res) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         opts.validated = res;
         opts.log.debug({ validated: opts.validated },
             'validated network params');
-        return callback();
+        callback();
     });
 }
 
-
 // --- Exports
 
 
-
 /**
  * Creates a new Nic (and optionally a new IP with it)
  *
diff --git a/lib/models/nic/obj.js b/lib/models/nic/obj.js
index 85355d9..5c00487 100644
--- a/lib/models/nic/obj.js
+++ b/lib/models/nic/obj.js
@@ -174,6 +174,8 @@ function Nic(params) {
     assert.optionalString(params.nic_tag, 'nic_tag');
     assert.optionalString(params.state, 'state');
     assert.optionalString(params.ipaddr, 'ipaddr');
+    assert.optionalNumber(params.modified_timestamp, 'modified_timestamp');
+    assert.optionalNumber(params.created_timestamp, 'created_timestamp');
 
     params.state = params.state || constants.DEFAULT_NIC_STATE;
 
@@ -204,6 +206,14 @@ function Nic(params) {
         params.primary = params.primary_flag;
     }
 
+    if (!params.hasOwnProperty('created_timestamp')) {
+        params.created_timestamp = 0;
+    }
+
+    if (!params.hasOwnProperty('modified_timestamp')) {
+        params.modified_timestamp = 0;
+    }
+
     this.params = params;
 
     if (params.hasOwnProperty('etag')) {
@@ -446,9 +456,15 @@ Nic.prototype.serialize = function nicSerialize() {
         mac: macAddr,
         owner_uuid: this.params.owner_uuid,
         primary: this.params.primary ? true : false,
-        state: this.params.state
+        state: this.params.state,
     };
 
+    var createdDate = new Date(this.params.created_timestamp);
+    var modifiedDate = new Date(this.params.modified_timestamp);
+
+    serialized.created_timestamp = createdDate.toISOString();
+    serialized.modified_timestamp = modifiedDate.toISOString();
+
     if (this.ip) {
         var ipSer = this.ip.serialize();
         serialized.ip = ipSer.ip;
@@ -506,6 +522,8 @@ Nic.prototype.raw = function nicRaw() {
         belongs_to_type: this.params.belongs_to_type,
         primary_flag: this.params.primary ? true : false,
         state: this.params.state,
+        created_timestamp: this.params.created_timestamp,
+        modified_timestamp: this.params.modified_timestamp,
         v: BUCKET.version
     };
 
diff --git a/lib/models/nic/provision.js b/lib/models/nic/provision.js
index a352a60..601f828 100644
--- a/lib/models/nic/provision.js
+++ b/lib/models/nic/provision.js
@@ -436,6 +436,10 @@ function randomMAC(opts, callback) {
 function addParams(opts, callback) {
     opts.nicFn = opts.validated.mac ? macSupplied : randomMAC;
     opts.baseParams = mod_ip.params(opts.validated);
+
+    opts.validated.created_timestamp = Date.now();
+    opts.validated.modified_timestamp = opts.validated.created_timestamp;
+
     callback();
 }
 
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index 63959d5..081d2a9 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -149,6 +149,11 @@ function getUpdatedNicParams(opts) {
 
     updatedNicParams.etag = opts.existingNic.etag;
 
+    // save timestamps as milliseconds since epoch
+    var createdDate = new Date(updatedNicParams.created_timestamp);
+    updatedNicParams.created_timestamp = Number(createdDate);
+    updatedNicParams.modified_timestamp = Date.now();
+
     return updatedNicParams;
 }
 
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index e08bf18..f9affad 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -1186,7 +1186,8 @@ test('update nics', function (t) {
         mod_nic.updateAndGet(t2, {
             mac: CREATED.updateNic.mac,
             params: CREATED.updateNic,
-            exp: CREATED.updateNic
+            exp: CREATED.updateNic,
+            ignore: [ 'modified_timestamp' ]
         });
     });
 
@@ -1386,7 +1387,8 @@ test('basic shootdown tests', function (t) {
         mod_nic.updateAndGet(t2, {
             mac: nic1.mac,
             params: params,
-            exp: extend(nic1, params)
+            exp: extend(nic1, params),
+            ignore: [ 'modified_timestamp' ]
         });
     });
 
@@ -1451,7 +1453,8 @@ test('basic shootdown tests', function (t) {
             params: {
                 cn_uuid: SERVERS[1]
             },
-            exp: nic1
+            exp: nic1,
+            ignore: [ 'modified_timestamp' ]
         });
     });
 
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index dd08639..c068d36 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -50,6 +50,34 @@ function addNetParamsToNic(state, params) {
     mod_net.addNetParams(state.network, params);
 }
 
+/*
+ * Save the timestamps from an object into state, and remove from
+ * nic to keep deepEquals happy
+ */
+function saveTimestamps(state, obj, which) {
+    if (!state.ts.created_timestamp) {
+        state.ts.created_timestamp = {};
+    }
+    if (!state.ts.modified_timestamp) {
+        state.ts.modified_timestamp = {};
+    }
+
+    state.ts.created_timestamp[which] = obj.created_timestamp;
+    delete obj.created_timestamp;
+
+    state.ts.modified_timestamp[which] = obj.modified_timestamp;
+    delete obj.modified_timestamp;
+}
+
+/*
+ * Verify that after a modification that the timestamp is advancing.
+ */
+function timestampsAdvance(t, desc, oldTs, newTs) {
+    // this is technically superfluous, but it yields more information on
+    // failure than the subsequent t.ok() test
+    t.notEqual(oldTs, newTs, 'modified timestamp updated' + desc);
+    t.ok(newTs > oldTs, 'modified timestamp advancing' + desc);
+}
 
 /**
  * Create a NAPI client, with a req_id for tracking requests.
@@ -395,7 +423,9 @@ module.exports = {
     loadUFDSadminUUID: loadUFDSadminUUID,
     randomMAC: common.randomMAC,
     reqOpts: common.reqOpts,
+    saveTimestamps: saveTimestamps,
     similar: similar,
+    timestampsAdvance: timestampsAdvance,
     get ufdsAdminUuid() {
         if (!ADMIN_UUID) {
             throw new Error(
diff --git a/test/integration/network-owner.test.js b/test/integration/network-owner.test.js
index 15dbb84..669783b 100644
--- a/test/integration/network-owner.test.js
+++ b/test/integration/network-owner.test.js
@@ -61,8 +61,7 @@ function checkProvisionSuccess(newOwner, t) {
     };
 
     napi.provisionNic(state.network.uuid, params, function (err, res) {
-        t.ifError(err, 'error returned');
-        if (err) {
+        if (h.ifErr(t, err, 'error returned')) {
             t.deepEqual(err.body, {}, 'err body for debugging');
             return t.end();
         }
@@ -81,6 +80,8 @@ function checkProvisionSuccess(newOwner, t) {
         params.ip = nextIP;
 
         h.addNetParamsToNic(state, params);
+        delete res.created_timestamp;
+        delete res.modified_timestamp;
         t.deepEqual(res, params, 'nic params');
 
         return t.end();
diff --git a/test/integration/nics.test.js b/test/integration/nics.test.js
index 29f21bd..4427d57 100644
--- a/test/integration/nics.test.js
+++ b/test/integration/nics.test.js
@@ -35,7 +35,8 @@ var state = {
     nic: {},
     ip: {},
     desc: {},
-    mac: {}
+    mac: {},
+    ts: {}
 };
 var uuids = {
     admin: '',
@@ -113,6 +114,9 @@ test('POST /nics (basic)', function (t) {
 
         params.mac = mac;
         mod_nic.addDefaultParams(params);
+        t.equal(res.created_timestamp, res.modified_timestamp,
+            'nic timestamps exist and equal' + desc);
+        h.saveTimestamps(state, res, 'a');
         t.deepEqual(res, params, 'nic params returned' + desc);
         state.nic.a = params;
         state.desc.a = desc;
@@ -146,6 +150,9 @@ test('POST /nics (with IP, network and state)', function (t) {
 
             params.mac = d.mac;
             mod_nic.addDefaultParams(params, state.networks[0]);
+            t2.equal(res.created_timestamp, res.modified_timestamp,
+                'nic timestamps exist and equal' + desc);
+            h.saveTimestamps(state, res, 'b');
             t2.deepEqual(res, params, 'nic params returned' + desc);
             state.nic.b = params;
             state.desc.b = desc;
@@ -214,6 +221,9 @@ test('POST /nics (with IP but no network)', function (t) {
 
         params.mac = mac;
         mod_nic.addDefaultParams(params, state.networks[0]);
+        t.equal(res.created_timestamp, res.modified_timestamp,
+            'nic timestamps exist and equal' + desc);
+        h.saveTimestamps(state, res, 'c');
         t.deepEqual(res, params, 'nic params returned' + desc);
         state.nic.c = params;
         state.desc.c = desc;
@@ -281,6 +291,9 @@ test('POST /nics (with IP already reserved)', function (t) {
 
             d.params.mac = mac;
             mod_nic.addDefaultParams(d.params, state.networks[0]);
+            t2.equal(res.created_timestamp, res.modified_timestamp,
+                'nic timestamps exist and equal' + d.desc);
+            h.saveTimestamps(state, res, 'resNic1');
             t2.deepEqual(res, d.params, 'nic params returned' + d.desc);
             state.resNic1 = d.params;
             state.desc.resNic1 = d.desc;
@@ -383,7 +396,10 @@ test('POST /networks/:uuid/nics (basic)', function (t) {
 
         params.mac = res.mac;
         params.ip = res.ip;
+        t.equal(res.created_timestampstamp, res.modified_timestampstamp,
+            'nic timestamps exist and equal' + desc);
         mod_nic.addDefaultParams(params, state.networks[0]);
+        h.saveTimestamps(state, res, 'd');
 
         t.deepEqual(res, params, 'nic params returned' + desc);
         state.nic.d = params;
@@ -413,6 +429,9 @@ test('POST /networks/:uuid/nics (with IP)', function (t) {
 
         params.mac = res.mac;
         mod_nic.addDefaultParams(params, state.networks[0]);
+        t.equal(res.created_timestamp, res.modified_timestamp,
+                'nic timestamps exist and equal' + desc);
+        h.saveTimestamps(state, res, 'e');
 
         t.deepEqual(res, params, 'nic params returned' + desc);
         state.nic.e = params;
@@ -481,6 +500,9 @@ test('POST /nics (with reserved IP)', function (t) {
         params.mac = mac;
         params.ip = res.ip;
         mod_nic.addDefaultParams(params, state.networks[0]);
+        t.equal(res.created_timestamp, res.modified_timestamp,
+            'nic timestamps returned and initially equal' + desc);
+        h.saveTimestamps(state, res, 'resNic2');
         t.deepEqual(res, params, 'nic params returned' + desc);
         state.resNic2 = res;
         state.desc.resNic2 = desc;
@@ -533,6 +555,9 @@ test('POST /nics (with model)', function (t) {
                 params.primary = false;
                 params.mac = mac;
                 params.state = constants.DEFAULT_NIC_STATE;
+                t.equal(res.created_timestamp, res.modified_timestamp,
+                    'nic timestamps exist and equal' + desc);
+                h.saveTimestamps(state, res, 'model');
                 t.deepEqual(res, params, 'nic params returned' + desc);
                 state.nic.model = params;
                 state.desc.model = desc;
@@ -546,6 +571,10 @@ test('POST /nics (with model)', function (t) {
                 if (err) {
                     return cb(err);
                 }
+                t.equal(res.created_timestamp, res.modified_timestamp,
+                    'get nic timestamps exist and equal' + desc);
+                delete res.created_timestamp;
+                delete res.modified_timestamp;
 
                 t.deepEqual(res, params, 'nic params returned' + desc);
                 return cb();
@@ -559,6 +588,12 @@ test('POST /nics (with model)', function (t) {
                 }
 
                 params.model = 'e1000';
+
+                t.equal(res.created_timestamp, state.ts.created_timestamp.model,
+                    'nic created time unchanged' + desc);
+                h.timestampsAdvance(t, desc, state.ts.modified_timestamp.model,
+                    res.modified_timestamp);
+                h.saveTimestamps(state, res, 'model');
                 t.deepEqual(res, params, 'updated nic params returned' + desc);
                 return cb();
             });
@@ -570,6 +605,14 @@ test('POST /nics (with model)', function (t) {
                     return cb(err);
                 }
 
+                t.equal(res.created_timestamp, state.ts.created_timestamp.model,
+                    'nic created time unchanged' + desc);
+                t.equal(res.modified_timestamp,
+                    state.ts.modified_timestamp.model,
+                    'nic modified time unchanged' + desc);
+                delete res.created_timestamp;
+                delete res.modified_timestamp;
+
                 t.deepEqual(res, params, 'nic params returned' + desc);
                 return cb();
             });
@@ -662,11 +705,22 @@ test('GET /nics/:mac', function (t) {
     function checkNic(nicNum, cb) {
         var nic = state.nic[nicNum];
         var desc = state.desc[nicNum];
+        var crtime = state.ts.created_timestamp[nicNum];
+        var mtime = state.ts.modified_timestamp[nicNum];
+
         napi.getNic(nic.mac, h.reqOpts(t, desc), function (err, res) {
             t.ifError(err, 'get nic' + desc);
             if (err) {
                 return cb(err);
             }
+
+            t.equal(crtime, res.created_timestamp,
+                'get params created_timestamp' + desc);
+            t.equal(mtime, res.modified_timestamp,
+                'get params modified_timestamp' + desc);
+            delete res.created_timestamp;
+            delete res.modified_timestamp;
+
             t.deepEqual(res, nic, 'get params' + desc);
             return cb();
         });
@@ -695,10 +749,18 @@ test('PUT /nics/:mac', function (t) {
         var client = h.createNAPIclient(t);
         var desc = ' update ' + state.desc[nicNum] + ' req_id=' + client.req_id;
         var nic = state.nic[nicNum];
+        var crtime = state.ts.created_timestamp[nicNum];
+        var mtime = state.ts.modified_timestamp[nicNum];
 
         client.updateNic(nic.mac, params, function (err, res) {
             h.ifErr(t, err, desc);
 
+            t.equal(res.created_timestamp, crtime,
+                'created_timestamp unmodified' + desc);
+            h.timestampsAdvance(t, desc, mtime, res.modified_timestamp);
+            mtime = res.modified_timestamp;
+            h.saveTimestamps(state, res, nicNum);
+
             for (var p in params) {
                 nic[p] = params[p];
             }
@@ -706,6 +768,14 @@ test('PUT /nics/:mac', function (t) {
 
             client.getNic(nic.mac, function (err2, res2) {
                 h.ifErr(t, err2, 'get' + desc);
+
+                t.equal(res2.created_timestamp, crtime,
+                    'get created_timestamp unmodified' + desc);
+                t.equal(res2.modified_timestamp, mtime,
+                    'get modified_timestamp unmodified' + desc);
+                delete res2.created_timestamp;
+                delete res2.modified_timestamp;
+
                 t.deepEqual(res2, nic, 'get params' + desc);
 
                 return cb();
@@ -777,6 +847,7 @@ test('PUT /nics (with network_uuid and state)', function (t) {
 
         state.nic.putIPnetUUID = params;
         state.desc.putIPnetUUID = desc;
+        h.saveTimestamps(state, res, 'putIPnetUUID');
 
         var updateParams = {
             network_uuid: state.networks[0].uuid,
@@ -788,11 +859,20 @@ test('PUT /nics (with network_uuid and state)', function (t) {
                 return t.end();
             }
 
+            var crtime = state.ts.created_timestamp.putIPnetUUID;
+            var mtime = state.ts.modified_timestamp.putIPnetUUID;
+
             params.mac = mac;
             params.ip = res2.ip;
             params.state = 'stopped';
             mod_nic.addDefaultParams(params, state.networks[0]);
             t.ok(res2.ip, 'nic now has IP address');
+
+            t.equal(res2.created_timestamp, crtime,
+                'nic created time unchanged' + desc);
+            h.timestampsAdvance(t, desc, mtime, res2.modified_timestamp);
+            h.saveTimestamps(state, res2, 'putIPnetUUID');
+
             t.deepEqual(res2, params, 'nic params returned' + desc);
             state.nic.putIPnetUUID = params;
             state.ip.putIPnetUUID = res2.ip;
@@ -863,6 +943,7 @@ test('PUT /nics (with network_uuid set to admin)', function (t) {
 
         state.nic.putIPwithName = params;
         state.desc.putIPwithName = desc;
+        h.saveTimestamps(state, res, 'putIPwithName');
 
         var updateParams = {
             network_uuid: 'admin',
@@ -875,11 +956,19 @@ test('PUT /nics (with network_uuid set to admin)', function (t) {
                 return t.end();
             }
 
+            var crtime = state.ts.created_timestamp.putIPwithName;
+            var mtime = state.ts.modified_timestamp.putIPwithName;
+
             params.mac = mac;
             params.ip = res2.ip;
             params.owner_uuid = updateParams.owner_uuid;
             mod_nic.addDefaultParams(params, state.adminNet);
 
+            t.equal(res2.created_timestamp, crtime,
+                'created time unchanged' + desc);
+            h.timestampsAdvance(t, desc, mtime, res2.modified_timestamp);
+            h.saveTimestamps(state, res2, 'putIPwithName');
+
             t.deepEqual(res2, params, 'nic params returned' + desc);
             state.nic.putIPwithName = params;
             state.ip.putIPwithName = res2.ip;
@@ -1039,6 +1128,16 @@ test('GET /nics (filtered by belongs_to_uuid)', function (t) {
 
             var params = state.nic[nics[cur.mac]];
             var desc = state.desc[nics[cur.mac]];
+            var crtime = state.ts.created_timestamp[nics[cur.mac]];
+            var mtime = state.ts.modified_timestamp[nics[cur.mac]];
+
+            t.equal(cur.created_timestamp, crtime,
+                'list nic created time matches' + desc);
+            t.equal(cur.modified_timestamp, mtime,
+                'list nic modified time matches' + desc);
+            delete cur.created_timestamp;
+            delete cur.modified_timestamp;
+
             t.deepEqual(cur, params, 'list nic matches' + desc);
             found++;
         }
diff --git a/test/lib/common.js b/test/lib/common.js
index 40d3d1c..3fb8da9 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -183,7 +183,93 @@ var badLimitOffTests = [
     }
 ];
 
+// --- Private functions
 
+/*
+ * check if {created,modified}_timestamp are returned with sane values
+ * on creation or modification, as well as adjust opts as necessary
+ * so t.deepEquals() is kept happy
+ *
+ * Optionally, opts.ts can be used to track the timestamps
+ * across multiple invocations to make sure the values are
+ * being updated as expected.
+ */
+function checkTimestamps(t, type, desc, opts, obj) {
+    assert.optionalObject(opts.ts, 'opts.ts');
+
+    var supportedTypes = [ 'nic' ];
+
+    if (supportedTypes.indexOf(opts.type) < 0) {
+        return;
+    }
+
+    switch (opts.reqType) {
+        case 'create':
+            t.notEqual(obj.created_timestamp, 0,
+                type + 'created ts > 0' + desc);
+            t.notEqual(obj.modified_timestamp, 0,
+                type + 'modified ts > 0' + desc);
+            t.equal(obj.created_timestamp, obj.modified_timestamp,
+                type + 'created and modified ts equal at creation' + desc);
+
+            if (opts.ts) {
+                opts.ts.created_timestamp = obj.created_timestamp;
+                opts.ts.modified_timestamp = obj.modified_timestamp;
+            }
+            break;
+
+        case 'get':
+        case 'list':
+            // existing objects might not yet have timestamps, so can return 0
+            t.ok(obj.created_timestamp,
+                type + 'created ts exists' + desc);
+            t.ok(obj.modified_timestamp,
+                type + 'modified ts exsists' + desc);
+
+            if (opts.ts) {
+                t.equal(obj.modified_timestamp, opts.ts.modified_timestamp,
+                    type + 'modified ts unchanged on get' + desc);
+            }
+            break;
+
+        case 'update':
+            t.notEqual(obj.created_timestamp, 0,
+                type + 'created ts set' + desc);
+            t.notEqual(obj.modified_timestamp, 0,
+                type + 'modified ts set' + desc);
+            t.ok(obj.modified_timestamp > obj.created_timestamp,
+                type + 'modified ts > created ts on update' + desc);
+
+            if (opts.ts) {
+                t.ok(obj.modified_timestamp > opts.ts.modified_timestamp,
+                    type + 'modified ts increasing after update' + desc);
+                opts.ts.modified_timestamp = obj.modified_timestamp;
+            }
+            break;
+
+        default:
+            return;
+    }
+
+    if (opts.exp) {
+        var ignore = opts.ignore ? opts.ignore : [];
+
+        // skip implicit checks if caller explicity specifies a value
+        if (!opts.exp.created_timestamp) {
+            if (ignore.indexOf('created_timestamp') < 0) {
+                ignore.push('created_timestamp');
+            }
+        }
+
+        if (!opts.exp.modified_timestamp) {
+            if (ignore.indexOf('modified_timestamp') < 0) {
+                ignore.push('modified_timestamp');
+            }
+        }
+
+        opts.ignore = ignore;
+    }
+}
 
 // --- Exported functions
 
@@ -256,6 +342,8 @@ function afterAPIcall(t, opts, callback, err, obj, _, res) {
         t.ok(true, fmt('created %s "%s"', opts.type, obj[opts.idKey]));
     }
 
+    checkTimestamps(t, type, desc, opts, obj);
+
     if (opts.exp) {
         // For creates, the server will generate an ID (usually a UUID) if
         // it's not set in the request.  Copy this over to the expected
@@ -276,7 +364,23 @@ function afterAPIcall(t, opts, callback, err, obj, _, res) {
             });
         }
 
-        t.deepEqual(obj, opts.exp, type + 'full result' + desc);
+        var actual = obj;
+        var expected = opts.exp;
+
+        if (opts.hasOwnProperty('ignore')) {
+            var objClone = clone(obj);
+            var expClone = clone(opts.exp);
+
+            opts.ignore.forEach(function (ign) {
+                delete objClone[ign];
+                delete expClone[ign];
+            });
+
+            actual = objClone;
+            expected = expClone;
+        }
+
+        t.deepEqual(actual, expected, type + 'full result' + desc);
     }
 
     if (opts.partialExp) {
@@ -381,7 +485,36 @@ function afterAPIlist(t, opts, callback, err, obj, _, res) {
                     partialRes[p] = resObj[p];
                 }
 
+                var tsOpts = {
+                    id: opts.id,
+                    type: opts.type,
+                    reqType: opts.reqType,
+                    exp: expObj,
+                    ignore: clone(opts.ignore)
+                };
+
+                if (opts.ts && opts.ts[idx]) {
+                    tsOpts.ts = opts.ts[idx];
+                }
+
+                checkTimestamps(t, type, desc, tsOpts, resObj);
+
                 if (opts.deepEqual) {
+                    // ignore doesn't really make sense in the context of a
+                    // partial response
+                    if (tsOpts.ignore) {
+                        var resClone = clone(resObj);
+                        var expClone = clone(expObj);
+
+                        tsOpts.ignore.forEach(function (ign) {
+                            delete resClone[ign];
+                            delete expClone[ign];
+                        });
+
+                        resObj = resClone;
+                        expObj = expClone;
+                    }
+
                     t.deepEqual(resObj, expObj,
                         'full result for ' + resObj[id] + desc);
 
diff --git a/test/lib/nic.js b/test/lib/nic.js
index 415efa6..1436922 100644
--- a/test/lib/nic.js
+++ b/test/lib/nic.js
@@ -247,6 +247,7 @@ function listNics(t, opts, callback) {
     }
     opts.id = 'mac';
     opts.type = TYPE;
+    opts.reqType = 'list';
 
     log.debug({ params: params }, 'list networks');
 
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index 21be0e2..673954c 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -1007,6 +1007,10 @@ test('Provision nic - on network pool', function (t) {
             }
 
             var net = nextIPnum < 6 ? NETS[0] : NETS[1];
+
+            delete res.created_timestamp;
+            delete res.modified_timestamp;
+
             t.deepEqual(res, mod_nic.addDefaultParams({
                 belongs_to_type: params.belongs_to_type,
                 belongs_to_uuid: params.belongs_to_uuid,
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index e328064..1753f7f 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -321,7 +321,9 @@ test('Create nic on network_uuid=admin', function (t) {
             belongs_to_uuid: params.belongs_to_uuid,
             ip: res.ip,
             mac: res.mac,
-            owner_uuid: params.owner_uuid
+            owner_uuid: params.owner_uuid,
+            created_timestamp: res.created_timestamp,
+            modified_timestamp: res.modified_timestamp
         }, ADMIN_NET);
         t.deepEqual(res, exp, 'create on admin: good response');
 
@@ -523,7 +525,9 @@ test('Create nic - invalid params', function (t) {
 
 test('Create nic - empty nic_tags_provided', function (t) {
     t.plan(9);
-    var d = {};
+    var d = {
+        ts: {}
+    };
 
     t.test('create', function (t2) {
         var mac = h.randomMAC();
@@ -542,7 +546,8 @@ test('Create nic - empty nic_tags_provided', function (t) {
         mod_nic.createAndGet(t2, {
             mac: mac,
             params: d.params,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -575,7 +580,8 @@ test('Create nic - empty nic_tags_provided', function (t) {
         mod_nic.updateAndGet(t2, {
             mac: d.exp.mac,
             params: params,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -597,7 +603,8 @@ test('Create nic - empty nic_tags_provided', function (t) {
             params: {
                 nic_tags_provided: [ ]
             },
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -619,7 +626,8 @@ test('Create nic - empty nic_tags_provided', function (t) {
         mod_nic.updateAndGet(t2, {
             mac: d.exp.mac,
             params: params,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -631,7 +639,8 @@ test('Create nic - empty nic_tags_provided', function (t) {
             params: {
                 nic_tags_provided: ''
             },
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 });
@@ -706,9 +715,15 @@ test('Provision nic', function (t) {
             resolvers: NET2.resolvers,
             routes: NET2.routes,
             state: constants.DEFAULT_NIC_STATE,
-            vlan_id: NET2.vlan_id
+            vlan_id: NET2.vlan_id,
+            created_timestamp: res.created_timestamp,
+            modified_timestamp: res.modified_timestamp
         };
         t.deepEqual(res, exp, 'result');
+        t.equal(res.created_timestamp, res.modified_timestamp,
+            'nic created and modified ts equal at creation');
+        t.notEqual(res.created_timestamp, 0, 'nic created ts non-zero');
+
 
         NAPI.getNic(res.mac, function (err2, res2) {
             if (h.ifErr(t, err2, 'get provisioned nic')) {
@@ -1000,6 +1015,14 @@ test('Provision nic: MAC retry', function (t) {
                     batch: [ ]
                 }, 'no more batch errors left');
 
+                d.created_timestamp = morayObj.created_timestamp;
+                d.modified_timestamp = morayObj.modified_timestamp;
+                t2.equal(morayObj.created_timestamp,
+                    morayObj.modified_timestamp,
+                    'nic created and modified ts equal at creation');
+                t2.notEqual(res.created_timestamp, 0,
+                    'nic created ts non-zero');
+
                 t2.end();
             });
         });
@@ -1069,7 +1092,9 @@ test('Provision nic: MAC retry', function (t) {
 
 test('Provision nic: IP retry', function (t) {
     t.plan(4);
-    var d = {};
+    var d = {
+        ts: {}
+    };
 
     t.test('provision', function (t2) {
         var params = {
@@ -1102,6 +1127,13 @@ test('Provision nic: IP retry', function (t) {
 
                 t2.equal(res.network_uuid, PROV_MAC_NET.uuid,
                     'network_uuid correct');
+                t2.equal(res.created_timestamp, res.modified_timestamp,
+                    'nic created and modified ts equal at creation');
+                t2.notEqual(res.created_timestamp, 0,
+                    'nic created ts non-zero');
+
+                d.ts.created_timestamp = res.created_timestamp;
+                d.ts.modified_timestamp = res.modified_timestamp;
 
                 // Make sure we actually hit those errors:
                 t2.deepEqual(MORAY.getMockErrors(), {
@@ -1118,7 +1150,8 @@ test('Provision nic: IP retry', function (t) {
             mac: d.mac,
             partialExp: {
                 network_uuid: PROV_MAC_NET.uuid
-            }
+            },
+            ts: d.ts
         });
     });
 
@@ -1144,7 +1177,8 @@ test('Provision nic: IP retry', function (t) {
         mod_nic.create(t2, {
             mac: d.mac,
             params: params,
-            partialExp: params
+            partialExp: params,
+            ts: d.ts
         }, function (err, res) {
             if (h.ifErr(t2, err, 'Create should succeed')) {
                 t2.end();
@@ -1178,7 +1212,8 @@ test('Provision nic: IP retry', function (t) {
             mac: d.mac,
             partialExp: {
                 network_uuid: PROV_MAC_NET.uuid
-            }
+            },
+            ts: d.ts
         });
     });
 });
@@ -1247,12 +1282,18 @@ test('Provision nic - with IP', function (t) {
                 return t2.end();
             }
 
+            t2.equal(res.created_timestamp, res.modified_timestamp,
+                'nic created and modified ts equal at creation');
+            t2.notEqual(res.created_timestamp, 0, 'nic created ts non-zero');
+
             d.exp = mod_nic.addDefaultParams({
                 belongs_to_type: params.belongs_to_type,
                 belongs_to_uuid: params.belongs_to_uuid,
                 ip: fmt('10.0.%d.200', NET2.num),
                 mac: res.mac,
-                owner_uuid: params.owner_uuid
+                owner_uuid: params.owner_uuid,
+                created_timestamp: res.created_timestamp,
+                modified_timestamp: res.modified_timestamp
             }, NET2);
             t2.deepEqual(res, d.exp, 'result');
             return t2.end();
@@ -1385,20 +1426,23 @@ test('(PNDS) Provision nic - with different state', function (t) {
         owner_uuid: params.owner_uuid,
         state: 'stopped'
     }, NET2);
+    var ts = {};
 
     t.test('(PNDS) provision', function (t2) {
         mod_nic.provision(t2, {
             fillInMissing: true,
             net: NET2.uuid,
             params: params,
-            exp: exp
+            exp: exp,
+            ts: ts
         });
     });
 
     t.test('(PNDS) get nic', function (t2) {
         mod_nic.get(t2, {
             mac: exp.mac,
-            exp: exp
+            exp: exp,
+            ts: ts
         });
     });
 
@@ -1410,7 +1454,8 @@ test('(PNDS) Provision nic - with different state', function (t) {
             params: {
                 state: 'running'
             },
-            exp: exp
+            exp: exp,
+            ts: ts
         });
     });
 });
@@ -1583,7 +1628,9 @@ test('Delete a NIC w/ an address on it', function (t) {
                 belongs_to_uuid: params.belongs_to_uuid,
                 ip: ip,
                 owner_uuid: params.owner_uuid,
-                state: 'provisioning'
+                state: 'provisioning',
+                created_timestamp: res.created_timestamp,
+                modified_timestamp: res.modified_timestamp
             }, NET2);
 
             t.deepEqual(res, nic, 'result');
@@ -1657,11 +1704,13 @@ test('Update nic - provision IP', function (t) {
             belongs_to_uuid: mod_uuid.v4(),
             owner_uuid: mod_uuid.v4()
         };
+        d.ts = {};
 
         mod_nic.create(t2, {
             mac: d.mac,
             params: d.params,
-            partialExp: d.params
+            partialExp: d.params,
+            ts: d.ts
         });
 
     });
@@ -1680,14 +1729,16 @@ test('Update nic - provision IP', function (t) {
             params: {
                 network_uuid: NET3.uuid
             },
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
     t.test('get nic', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1729,18 +1780,21 @@ test('Update nic - IP parameters updated', function (t) {
             mac: d.mac,
             owner_uuid: d.params.owner_uuid
         }, NET);
+        d.ts = {};
 
         mod_nic.create(t2, {
             mac: d.mac,
             params: d.params,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
     t.test('get after create', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1752,17 +1806,20 @@ test('Update nic - IP parameters updated', function (t) {
         };
 
         h.copyParams(updateParams, d.exp);
+
         mod_nic.update(t2, {
             mac: d.mac,
             params: updateParams,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
     t.test('get after update', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1807,11 +1864,13 @@ test('Update nic - change IP', function (t) {
             owner_uuid: params.owner_uuid
         }, NET);
         d.other = mod_uuid.v4();
+        d.ts = {};
 
         mod_nic.create(t2, {
             mac: d.mac,
             params: params,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1828,14 +1887,16 @@ test('Update nic - change IP', function (t) {
         mod_nic.update(t2, {
             mac: d.mac,
             params: updateParams,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
     t.test('get: after first update', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1928,14 +1989,16 @@ test('Update nic - change IP', function (t) {
         mod_nic.update(t2, {
             mac: d.mac,
             params: updateParams,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
     t.test('get: after update to ip2', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -1995,6 +2058,8 @@ test('Update nic - add resolver IP', function (t) {
         });
     });
 
+    d.ts = {};
+
     t.test('create', function (t2) {
         d.partialExp = {
             belongs_to_type: 'zone',
@@ -2006,7 +2071,8 @@ test('Update nic - add resolver IP', function (t) {
         mod_nic.create(t2, {
             mac: d.mac,
             params: d.partialExp,
-            partialExp: d.partialExp
+            partialExp: d.partialExp,
+            ts: d.ts
         });
     });
 
@@ -2024,7 +2090,8 @@ test('Update nic - add resolver IP', function (t) {
         mod_nic.updateAndGet(t2, {
             mac: d.mac,
             params: updateParams,
-            partialExp: d.partialExp
+            partialExp: d.partialExp,
+            ts: d.ts
         });
     });
 });
@@ -2173,6 +2240,7 @@ test('Update nic - invalid params', function (t) {
 test('Update nic - no changes', function (t) {
     t.plan(8);
     var d = {};
+    var ts = {};
 
     t.test('provision', function (t2) {
         var params = {
@@ -2191,22 +2259,29 @@ test('Update nic - no changes', function (t) {
             net: NET2.uuid,
             params: params,
             state: d,
-            partialExp: partialExp
+            partialExp: partialExp,
+            ts: ts
         });
     });
 
     t.test('update with same params', function (t2) {
+        delete d.nics[0].modified_timestamp;
+
         mod_nic.update(t2, {
             mac: d.nics[0].mac,
             params: d.nics[0],
-            exp: d.nics[0]
+            exp: d.nics[0],
+            // even though there is no effective change, for now
+            // this should still bump modified_timestamp
+            ts: ts
         });
     });
 
     t.test('get', function (t2) {
         mod_nic.get(t2, {
             mac: d.nics[0].mac,
-            exp: d.nics[0]
+            exp: d.nics[0],
+            ts: ts
         });
     });
 
@@ -2218,14 +2293,16 @@ test('Update nic - no changes', function (t) {
             params: {
                 network_uuid: NET3.uuid
             },
-            exp: d.nics[0]
+            exp: d.nics[0],
+            ts: ts
         });
     });
 
     t.test('get after network_uuid', function (t2) {
         mod_nic.get(t2, {
             mac: d.nics[0].mac,
-            exp: d.nics[0]
+            exp: d.nics[0],
+            ts: ts
         });
     });
 
@@ -2237,14 +2314,16 @@ test('Update nic - no changes', function (t) {
             params: {
                 mac: d.newMAC
             },
-            exp: d.nics[0]
+            exp: d.nics[0],
+            ts: ts
         });
     });
 
     t.test('get after mac update', function (t2) {
         mod_nic.get(t2, {
             mac: d.nics[0].mac,
-            exp: d.nics[0]
+            exp: d.nics[0],
+            ts: ts
         });
     });
 
@@ -2271,6 +2350,8 @@ test('Update nic - change state', function (t) {
         owner_uuid: mod_uuid.v4()
     };
 
+    var ts = {};
+
     t.test('provision', function (t2) {
         mod_nic.provision(t2, {
             net: NET2.uuid,
@@ -2278,7 +2359,8 @@ test('Update nic - change state', function (t) {
             partialExp: extend(params, {
                 ip: h.nextProvisionableIP(NET2),
                 state: constants.DEFAULT_NIC_STATE
-            })
+            }),
+            ts: ts
         });
     });
 
@@ -2290,7 +2372,8 @@ test('Update nic - change state', function (t) {
         mod_nic.update(t2, {
             mac: mod_nic.lastCreated().mac,
             params: updateParams,
-            partialExp: updateParams
+            partialExp: updateParams,
+            ts: ts
         });
     });
 
@@ -2372,6 +2455,7 @@ test('Update nic moray failure getting IP / network', function (t) {
         owner_uuid: mod_uuid.v4()
     };
 
+    var ts = {};
 
     t.test('provision', function (t2) {
         mod_nic.provision(t2, {
@@ -2380,7 +2464,8 @@ test('Update nic moray failure getting IP / network', function (t) {
             partialExp: extend(params, {
                 ip: h.nextProvisionableIP(NET2),
                 network_uuid: NET2.uuid
-            })
+            }),
+            ts: ts
         });
     });
 
@@ -2428,7 +2513,8 @@ test('Update nic moray failure getting IP / network', function (t) {
                 ip: mod_nic.lastCreated().ip,
                 mac: mod_nic.lastCreated().mac,
                 network_uuid: NET2.uuid
-            })
+            }),
+            ts: ts
         });
     });
 
@@ -2666,6 +2752,7 @@ test('NAPI-407: Concurrent deletes should fail with 404s', function (t) {
 test('antispoof options', function (t) {
     t.plan(6);
     var d = {};
+    d.ts = {};
 
     t.test('provision', function (t2) {
         d.params = {
@@ -2682,7 +2769,8 @@ test('antispoof options', function (t) {
         mod_nic.provision(t2, {
             net: NET2.uuid,
             params: d.params,
-            partialExp: d.params
+            partialExp: d.params,
+            ts: d.ts
         }, function (err, res) {
             if (err) {
                 return t2.end();
@@ -2690,6 +2778,7 @@ test('antispoof options', function (t) {
 
             d.exp = res;
             d.mac = res.mac;
+            delete d.exp.modified_timestamp;
             t2.equal(res.ip, h.nextProvisionableIP(NET2), 'IP');
 
             mod_moray.getNic(MORAY, res.mac, function (err2, morayObj) {
@@ -2704,7 +2793,8 @@ test('antispoof options', function (t) {
     t.test('get after provision', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            partialExp: d.params
+            partialExp: d.params,
+            ts: d.ts
         });
     });
 
@@ -2726,7 +2816,8 @@ test('antispoof options', function (t) {
         mod_nic.update(t2, {
             mac: d.mac,
             params: d.updateParams,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         }, function (err, res) {
             if (h.ifErr(t2, err, 'Update should succeed')) {
                 t2.end();
@@ -2746,7 +2837,8 @@ test('antispoof options', function (t) {
     t.test('get after disable', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 
@@ -2759,7 +2851,8 @@ test('antispoof options', function (t) {
         mod_nic.update(t2, {
             mac: d.mac,
             params: d.updateParams,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         }, function (err, res) {
             if (h.ifErr(t2, err, 'Update should succeed')) {
                 t2.end();
@@ -2779,7 +2872,8 @@ test('antispoof options', function (t) {
     t.test('get after re-enable', function (t2) {
         mod_nic.get(t2, {
             mac: d.mac,
-            exp: d.exp
+            exp: d.exp,
+            ts: d.ts
         });
     });
 });
@@ -2832,6 +2926,7 @@ test('primary uniqueness', function (t) {
         d.macs = [ h.randomMAC(), h.randomMAC() ];
         d.owner = mod_uuid.v4();
         d.zone = mod_uuid.v4();
+        d.ts = [ {}, {} ];
         d.params = {
             belongs_to_type: 'zone',
             belongs_to_uuid: d.zone,
@@ -2845,7 +2940,8 @@ test('primary uniqueness', function (t) {
             params: d.params,
             partialExp: {
                 primary: true
-            }
+            },
+            ts: d.ts[0]
         });
     });
 
@@ -2856,7 +2952,8 @@ test('primary uniqueness', function (t) {
             params: d.params,
             partialExp: {
                 primary: true
-            }
+            },
+            ts: d.ts[1]
         });
     });
 
@@ -2865,7 +2962,8 @@ test('primary uniqueness', function (t) {
             mac: d.macs[0],
             partialExp: {
                 primary: false
-            }
+            },
+            ts: d.ts[0]
         });
     });
 
@@ -2877,7 +2975,8 @@ test('primary uniqueness', function (t) {
             },
             partialExp: {
                 primary: true
-            }
+            },
+            ts: d.ts[0]
         });
     });
 
@@ -2886,7 +2985,8 @@ test('primary uniqueness', function (t) {
             mac: d.macs[1],
             partialExp: {
                 primary: false
-            }
+            },
+            ts: d.ts[1]
         });
     });
 });
-- 
2.21.0

