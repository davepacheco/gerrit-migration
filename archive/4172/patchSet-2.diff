commit 5a53031a3dfddcb7029d348a471e38f34daecba0 (refs/changes/72/4172/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-06-08T22:42:09+02:00 (1 year, 4 months ago)
    
    TRITON-477 `sdcadm create $SVC --image` does not support channels

diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index 17f5736..5fa7065 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -73,6 +73,19 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
     };
 
     vasync.pipeline({ arg: context, funcs: [
+        function ensureSdcApp(_, next) {
+            self.sdcadm.ensureSdcApp({}, function (err) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                // Set or override the default channel if anything is given:
+                if (opts.channel) {
+                    self.sdcadm.updates.channel = opts.channel;
+                }
+                next();
+            });
+        },
         function getLock(_, next) {
             self.sdcadm.acquireLock({progress: self.progress},
                                     function (lockErr, unlock_) {
@@ -277,6 +290,12 @@ do_create.options = [
         type: 'string',
         help: 'UUID of the Image to be used for the instance.'
     },
+    {
+        names: ['channel', 'C'],
+        type: 'string',
+        help: 'Use the given channel to fetch the image, even if it is ' +
+            'not the default one.'
+    },
     {
         // Deprecated in favour of `-s,--servers`
         names: ['server'],
diff --git a/test/check-health.test.js b/test/check-health.test.js
index e16cfac..8db6c3f 100644
--- a/test/check-health.test.js
+++ b/test/check-health.test.js
@@ -248,7 +248,7 @@ test('check-health when binder is down', function (t) {
                     });
             },
             function checkHealth(_, next) {
-                exec('sdcadm check-health', function (err, stdout, stderr) {
+                exec('sdcadm check-health -H', function (err, stdout, stderr) {
                     t.equal(err && err.code, 1, 'errcode is 1');
                     t.equal(err.killed, false, 'process not killed');
                     t.equal(stdout, '');
