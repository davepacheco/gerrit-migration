commit f48c63a30dde88dc95c8cd67b59360481e7e8db1 (refs/changes/84/4184/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2018-06-11T14:35:33-07:00 (1 year, 4 months ago)
    
    TRITON-493 '--tree' option to sdc-imgadm, updates-imgadm, joyent-imgadm to show origin hierarchy

diff --git a/CHANGES.md b/CHANGES.md
index 92b3a0c..4f58fc9 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,11 @@
 
 ## not yet released
 
+## 2.3.0
+
+- TRITON-493: Add `--tree` option to sdc-imgadm et al to show origin
+  hierarchy.
+
 ## 2.2.5
 
 - IMGAPI-623 `updates-imgadm -d ...` overly verbose
diff --git a/lib/cli.js b/lib/cli.js
index 495e909..4874a85 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -645,6 +645,8 @@ CLI.prototype.do_list = function do_list(subcmd, opts, args, callback) {
     var self = this;
     var filters = {};
     var listOpts = {};
+    var i;
+
     if (opts.all) {
         filters.state = 'all';
     }
@@ -659,7 +661,7 @@ CLI.prototype.do_list = function do_list(subcmd, opts, args, callback) {
         listOpts.inclAdminFields = opts.inclAdminFields;
     }
 
-    for (var i = 0; i < args.length; i++) {
+    for (i = 0; i < args.length; i++) {
         var arg = args[i];
         var idx = arg.indexOf('=');
         if (idx === -1) {
@@ -689,13 +691,110 @@ CLI.prototype.do_list = function do_list(subcmd, opts, args, callback) {
             images = Object.keys(imageFromOwnerName).map(
                 function (oN) { return imageFromOwnerName[oN]; });
         }
+
         /*JSSTYLED*/
         var sortFields = (opts.sort || 'published_at,name').split(/,/g);
         tabula.sortArrayOfObjects(images, sortFields);
+
         if (opts.json) {
             console.log(JSON.stringify(images, null, 2));
         } else {
-            images.forEach(function (img) {
+            var columns = opts.output;
+            if (!columns) {
+                if (filters.state) {
+                    columns = 'uuid,name,version,flags,os,state,published';
+                } else {
+                    columns = 'uuid,name,version,flags,os,published';
+                }
+            }
+            /* JSSTYLED */
+            columns = columns.split(/,/g);
+
+            // Group in a tree view by "origin".
+            // Faux image entries are add for missing origin images.
+            // Limitations: This doesn't support sorting by sortFields at
+            // each generation.
+            if (opts.tree) {
+                var firstCol = columns[0];
+                var img;
+                var imageFromUuid = {};
+                var remainingUuids = [];
+
+                for (i = 0; i < images.length; i++) {
+                    img = images[i];
+                    imageFromUuid[img.uuid] = img;
+                }
+
+                for (i = 0; i < images.length; i++) {
+                    img = images[i];
+                    if (img.origin) {
+                        img._treeStack = [img.origin];
+                        remainingUuids.push(img.uuid);
+                        if (!imageFromUuid[img.origin]) {
+                            // Add faux entry for missing origins.
+                            var faux = imageFromUuid[img.origin] = {
+                                uuid: img.origin,
+                                _treeStack: [img.origin]
+                            };
+                            columns.forEach(function (col) {
+                                if (!faux[col]) {
+                                    faux[col] = '???';
+                                }
+                            });
+                            images.push(faux);
+                        }
+                    } else {
+                        img._treeStack = [img.uuid];
+                    }
+                }
+
+                while (remainingUuids.length) {
+                    var stillRemainingUuids = [];
+                    remainingUuids.forEach(function (uuid) {
+                        img = imageFromUuid[uuid];
+                        var originUuid = img._treeStack[0];
+                        var originImg = imageFromUuid[originUuid];
+                        if (originImg.origin) {
+                            img._treeStack.unshift(originImg.origin);
+                            stillRemainingUuids.push(uuid);
+                        } else {
+                            img._treeStack = imageFromUuid[originUuid].
+                                _treeStack.concat(img._treeStack);
+                        }
+                    });
+                    remainingUuids = stillRemainingUuids;
+                }
+
+                // Sort by the treeStack.
+                tabula.sortArrayOfObjects(images, ['_treeStack']);
+
+                // Add tree-depth prefix to the first column values.
+                for (i = 0; i < images.length; i++) {
+                    img = images[i];
+                    var treeStack = img._treeStack;
+                    if (treeStack.length === 1) {
+                        continue;
+                    }
+                    var prefix = '';
+                    for (var n = 0; n < treeStack.length - 2; n++) {
+                        prefix += '    ';
+                    }
+                    var last = (
+                        i + 1 === images.length ||
+                            images[i+1]._treeStack.toString() !==
+                                treeStack.toString()
+                    );
+                    if (!last) {
+                        prefix += ' |- ';
+                    } else {
+                        prefix += ' `- ';
+                    }
+                    img[firstCol] = prefix + img[firstCol];
+                }
+            }
+
+            for (i = 0; i < images.length; i++) {
+                img = images[i];
                 if (img.published_at) {
                     // Just the date.
                     img.published_date = img.published_at.slice(0, 10);
@@ -711,25 +810,15 @@ CLI.prototype.do_list = function do_list(subcmd, opts, args, callback) {
                 if (img['public']) flags.push('P');
                 if (img.state !== 'active') flags.push('X');
                 img.flags = flags.length ? flags.join('') : undefined;
-            });
-            try {
-                var columns = opts.output;
-                if (!columns) {
-                    if (filters.state) {
-                        columns = 'uuid,name,version,flags,os,state,published';
-                    } else {
-                        columns = 'uuid,name,version,flags,os,published';
-                    }
-                }
-                for (var k = 0; k < images.length; k++) {
-                    if (images[k].channels) {
-                        images[k].channels = images[k].channels.join(',');
-                    }
+                if (img.channels) {
+                    img.channels = img.channels.join(',');
                 }
+            }
+
+            try {
                 tabula(images, {
                     skipHeader: opts.skipHeader,
-                    /*JSSTYLED*/
-                    columns: columns.split(/,/g),
+                    columns: columns,
                     validFields: ('uuid,owner,name,version,state,disabled,' +
                         'public,published,published_at,published_date,type,' +
                         'os,urn,nic_driver,disk_driver,cpu_type,image_size,' +
@@ -791,7 +880,11 @@ CLI.prototype.do_list.description = (
     '    -s field1,...      Sort on the given fields. Default is\n' +
     '                       "published_at,name".\n' +
     '    --latest           Only show the latest image, by published_at,\n' +
-    '                       for a given (owner, name) set\n'
+    '                       for a given (owner, name) set\n' +
+    '    --tree             Show tree view organized by image "origin". Note:\n' +
+    '                       This may add placeholder entries for origin images\n' +
+    '                       that are not already an included image.\n' +
+    '                       Limitation: `-s` sorting is not supported.'
     /* END JSSTYLED */
 );
 CLI.prototype.do_list.longOpts = {
@@ -803,7 +896,8 @@ CLI.prototype.do_list.longOpts = {
     'latest': Boolean,
     'marker': String,
     'limit': Number,
-    'inclAdminFields': Boolean
+    'inclAdminFields': Boolean,
+    'tree': Boolean
 };
 CLI.prototype.do_list.shortOpts = {
     'j': ['--json'],
diff --git a/package.json b/package.json
index c793787..94c31e3 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi-cli",
   "description": "a CLI for an Triton's IMGAPI (https://images.joyent.com/docs/)",
-  "version": "2.2.5",
+  "version": "2.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
