commit 41db4910ccf24deb6ac162dc1f6d98010ebbadeb (refs/changes/30/3430/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-02-20T18:27:16-08:00 (1 year, 8 months ago)
    
    TRITON-163 Triton should refuse to mix bhyve & kvm and send bhyve VMs only to capable nodes

diff --git a/lib/algorithms/hard-filter-hvm.js b/lib/algorithms/hard-filter-hvm.js
new file mode 100644
index 0000000..668d0c7
--- /dev/null
+++ b/lib/algorithms/hard-filter-hvm.js
@@ -0,0 +1,83 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * This filter will:
+ *
+ *	* prevent brand=bhyve VMs from being provisioned to servers that don't
+ *	  have 'Bhyve Capable' set to true in their sysinfo.
+ *	* prevent brand=bhyve VMs from being provisioned to servers that have
+ *	  existing kvm VMs.
+ *	* prevent brand=kvm VMs from being provisioned to servers that have
+ *	  existing bhyve VMs.
+ *
+ * Note that calculate-ticketed-vms.js will have added in-flight VMs to the
+ * server.vms arrays, so we will also refuse to provision bhyve to a system that
+ * has an in-progress kvm provision and vice versa.
+ */
+
+var assert = require('assert-plus');
+
+var HVM_BRANDS = ['bhyve', 'kvm'];
+
+
+function filterHVM(servers, opts, cb) {
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.object(opts.vm, 'opts.vm');
+	assert.string(opts.vm.brand, 'opts.vm.brand');
+	assert.func(cb, 'cb');
+
+	var reasons = {};
+	var newVmBrand = opts.vm.brand;
+
+	var adequateServers = servers.filter(function checkServer(server) {
+		var bhyveSupport = server.sysinfo['Bhyve Capable'];
+		var vms = server.vms;
+		var vmNames = Object.keys(vms);
+
+		if (HVM_BRANDS.indexOf(newVmBrand) === -1) {
+			// We don't care about VMs with brands that are not HVM
+			return (true);
+		}
+
+		if (newVmBrand === 'bhyve' && bhyveSupport !== true) {
+			reasons[server.uuid] =
+			    'Server does not support "bhyve" VMs';
+			return (false);
+		}
+
+		for (var i = 0; i !== vmNames.length; i++) {
+			var vm = vms[vmNames[i]];
+
+			if (HVM_BRANDS.indexOf(vm.brand) === -1) {
+				// Brands other than these won't conflict
+				continue;
+			}
+
+			if (vm.brand !== newVmBrand) {
+				reasons[server.uuid] = 'VM ' + vm.uuid +
+				    ' has brand ' + vm.brand + ' which ' +
+				    'is incompatible with new VMs using ' +
+					'brand ' + newVmBrand;
+				return (false);
+			}
+		}
+
+		return (true);
+	});
+
+	return (cb(null, adequateServers, reasons));
+}
+
+module.exports = {
+	name: 'Servers which are capable of requested virtualization',
+	run: filterHVM
+};
diff --git a/test/algorithms/hard-filter-hvm.test.js b/test/algorithms/hard-filter-hvm.test.js
new file mode 100644
index 0000000..0a67c4f
--- /dev/null
+++ b/test/algorithms/hard-filter-hvm.test.js
@@ -0,0 +1,177 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var test = require('tape');
+var filter = require('../../lib/algorithms/hard-filter-hvm.js');
+var common = require('./common.js');
+
+
+var checkFilter = common.createPluginChecker(filter);
+
+
+test('filterHVM() with joyent', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [
+			{ brand: 'bhyve' },
+			{ brand: 'kvm' }
+		]
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'joyent', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	// With brand=joyent, it really shouldn't matter which other
+	// instances are on the system.
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with kvm and no existing VMs', function (t) {
+	var servers = [ {
+		sysinfo: {},
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'kvm', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	// no existing VMs, so kvm should be fine on the only server
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with bhyve and mixed HW support', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: []
+	}, {
+		sysinfo: {},
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {
+		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
+			'Server does not support "bhyve" VMs'
+	};
+
+	var opts = {
+		vm:  { brand: 'bhyve', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with bhyve and existing kvm', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'kvm',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		}]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(1, 2);
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM 3ac37ee8-16a9-11e8-a114-9bd01a859c7f has ' +
+			'brand kvm which is incompatible with new VMs ' +
+			'using brand bhyve'
+	};
+
+	var opts = {
+		vm:  { brand: 'bhyve', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with kvm and existing bhyve', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'bhyve',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		} ]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(1, 2);
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM 3ac37ee8-16a9-11e8-a114-9bd01a859c7f has brand ' +
+			'bhyve which is incompatible with new VMs using ' +
+			'brand kvm'
+	};
+
+	var opts = {
+		vm:  { brand: 'kvm', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with no servers', function (t) {
+	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'joyent', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('name', function (t) {
+	t.equal(typeof (filter.name), 'string');
+	t.end();
+});
diff --git a/test/allocator.test.js b/test/allocator.test.js
index 8630cb5..e08518e 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -795,6 +795,7 @@ test('load available algorithms', function (t) {
 		'hard-filter-capness',
 		'hard-filter-feature-min-platform',
 		'hard-filter-headnode',
+		'hard-filter-hvm',
 		'hard-filter-invalid-servers',
 		'hard-filter-large-servers',
 		'hard-filter-locality-hints',
