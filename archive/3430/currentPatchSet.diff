From af2b13ddc5dbe10a4511936ea46e6655bf6d4aab Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 27 Feb 2018 12:44:27 -0800
Subject: [PATCH] TRITON-163 Triton should refuse to mix bhyve & kvm and send
 bhyve VMs only to capable nodes

---
 lib/algorithms/calculate-server-unreserved.js |   4 +-
 lib/algorithms/calculate-ticketed-vms.js      |  23 ++-
 lib/algorithms/hard-filter-hvm.js             |  84 +++++++++
 lib/algorithms/hard-filter-min-disk.js        |   5 +-
 lib/algorithms/hard-filter-min-ram.js         |   4 +-
 package.json                                  |   2 +-
 .../calculate-server-unreserved.test.js       |  43 ++++-
 .../algorithms/calculate-ticketed-vms.test.js |  65 ++++++-
 test/algorithms/hard-filter-hvm.test.js       | 177 ++++++++++++++++++
 test/algorithms/hard-filter-min-ram.test.js   |  41 +++-
 test/allocator.test.js                        |   3 +-
 11 files changed, 435 insertions(+), 16 deletions(-)
 create mode 100644 lib/algorithms/hard-filter-hvm.js
 create mode 100644 test/algorithms/hard-filter-hvm.test.js

diff --git a/lib/algorithms/calculate-server-unreserved.js b/lib/algorithms/calculate-server-unreserved.js
index f0e17b4..4431dbf 100644
--- a/lib/algorithms/calculate-server-unreserved.js
+++ b/lib/algorithms/calculate-server-unreserved.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -99,7 +99,7 @@ calculateServerUnreserved(servers, opts, cb)
 
 			ram = vm.max_physical_memory;
 			if (vm.state !== 'failed') {
-				if (vm.brand !== 'kvm')
+				if (['bhyve', 'kvm'].indexOf(vm.brand) === -1)
 					ram /= overprovisionRam;
 
 				server.unreserved_ram -= ram;
diff --git a/lib/algorithms/calculate-ticketed-vms.js b/lib/algorithms/calculate-ticketed-vms.js
index 5dddaee..946e6ba 100644
--- a/lib/algorithms/calculate-ticketed-vms.js
+++ b/lib/algorithms/calculate-ticketed-vms.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -65,6 +65,17 @@ addTicketedVms(servers, opts, cb)
 				server.disk_kvm_zvol_volsize_bytes +=
 					vm.zvol_quota * GiB;
 
+				delete vm.zvol_quota;
+			} else if (vm.brand === 'bhyve') {
+				// When a bhyve VM is provisioned, vmadm will
+				// add the zvol size to the quota. Since here
+				// we're dealing with VMs that have not yet
+				// been provisioned, we have to add that
+				// ourselves.
+				server.disk_zone_quota_bytes +=
+					vm.zvol_quota * GiB;
+				vm.quota += vm.zvol_quota;
+
 				delete vm.zvol_quota;
 			}
 		}
@@ -109,8 +120,14 @@ createVm(ticket)
 		state: 'running'
 	};
 
-	if (vm.brand === 'kvm') {
-		vm.max_physical_memory += 1024;
+	if (['bhyve', 'kvm'].indexOf(vm.brand) !== -1) {
+		if (vm.brand === 'kvm') {
+			vm.max_physical_memory += 1024;
+		} else if (vm.brand === 'bhyve') {
+			// value should match BHYVE_MEM_OVERHEAD in
+			// smartos-live/src/vm/node_modules/proptable.js
+			vm.max_physical_memory += (1024 + 256);
+		}
 		vm.zvol_quota = 0;
 
 		if (meta.disks) {
diff --git a/lib/algorithms/hard-filter-hvm.js b/lib/algorithms/hard-filter-hvm.js
new file mode 100644
index 0000000..79f2777
--- /dev/null
+++ b/lib/algorithms/hard-filter-hvm.js
@@ -0,0 +1,84 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * This filter will:
+ *
+ *	* prevent brand=bhyve VMs from being provisioned to servers that don't
+ *	  have 'Bhyve Capable' set to true in their sysinfo.
+ *	* prevent brand=bhyve VMs from being provisioned to servers that have
+ *	  existing kvm VMs.
+ *	* prevent brand=kvm VMs from being provisioned to servers that have
+ *	  existing bhyve VMs.
+ *
+ * Note that calculate-ticketed-vms.js will have added in-flight VMs to the
+ * server.vms arrays, so we will also refuse to provision bhyve to a system that
+ * has an in-progress kvm provision and vice versa.
+ */
+
+var assert = require('assert-plus');
+
+var HVM_BRANDS = ['bhyve', 'kvm'];
+
+
+function filterHVM(servers, opts, cb) {
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.object(opts.vm, 'opts.vm');
+	assert.string(opts.vm.brand, 'opts.vm.brand');
+	assert.func(cb, 'cb');
+
+	var adequateServers = servers;
+	var reasons = {};
+	var newVmBrand = opts.vm.brand;
+
+	if (HVM_BRANDS.indexOf(newVmBrand) === -1) {
+		// We don't care about VMs with brands that are not HVM
+		return (cb(null, servers, reasons));
+	}
+
+	adequateServers = servers.filter(function checkServer(server) {
+		var bhyveSupport = server.sysinfo['Bhyve Capable'];
+		var vms = server.vms;
+		var vmNames = Object.keys(vms);
+
+		if (newVmBrand === 'bhyve' && bhyveSupport !== true) {
+			reasons[server.uuid] =
+			    'Server does not support "bhyve" VMs';
+			return (false);
+		}
+
+		for (var i = 0; i !== vmNames.length; i++) {
+			var vm = vms[vmNames[i]];
+
+			if (HVM_BRANDS.indexOf(vm.brand) === -1) {
+				// Brands other than these won't conflict
+				continue;
+			}
+
+			if (vm.brand !== newVmBrand) {
+				reasons[server.uuid] = 'VM ' + vm.uuid +
+				    ' has brand ' + vm.brand + ' which ' +
+				    'is incompatible with new VMs using ' +
+				    'brand ' + newVmBrand;
+				return (false);
+			}
+		}
+
+		return (true);
+	});
+
+	return (cb(null, adequateServers, reasons));
+}
+
+module.exports = {
+	name: 'Servers which are capable of requested virtualization',
+	run: filterHVM
+};
diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index e23e8e4..159b338 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -54,7 +54,8 @@ filterMinDisk(servers, opts, cb)
 		// GiB, while the latter is in MiB.
 		var quota = vm.quota ? vm.quota * 1024 : pkg.quota;
 
-		if (vm.brand === 'kvm' || img.type === 'zvol') {
+		if (['bhyve', 'kvm'].indexOf(vm.brand) !== -1 ||
+			    img.type === 'zvol') {
 			// image_size applies to disk[0], quota to disk[1]
 			requestedDisk = quota + img.image_size;
 		} else {
diff --git a/lib/algorithms/hard-filter-min-ram.js b/lib/algorithms/hard-filter-min-ram.js
index 8fdada8..4a66e0a 100644
--- a/lib/algorithms/hard-filter-min-ram.js
+++ b/lib/algorithms/hard-filter-min-ram.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -39,7 +39,7 @@ filterMinRam(servers, opts, cb)
 	if (pkg && pkg.overprovision_ram) {
 		var requestedRam = vm.ram || pkg.max_physical_memory;
 
-		if (vm.brand !== 'kvm')
+		if (['bhyve', 'kvm'].indexOf(vm.brand) === -1)
 			requestedRam /= pkg.overprovision_ram;
 
 		filter = function (server) {
diff --git a/package.json b/package.json
index 790948d..e1c9e4c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "dapi",
   "description": "SmartDataCenter Designation API",
-  "version": "8.1.0",
+  "version": "8.2.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/algorithms/calculate-server-unreserved.test.js b/test/algorithms/calculate-server-unreserved.test.js
index 8beac5c..1022bfe 100644
--- a/test/algorithms/calculate-server-unreserved.test.js
+++ b/test/algorithms/calculate-server-unreserved.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -17,6 +17,7 @@ test('calculateServerUnreserved()', function (t) {
 	var GB = 1024 * 1024 * 1024;
 
 	var serversInfo = [
+		// [0]
 		{
 			memory_total_bytes: 2942881792,
 			disk_pool_size_bytes: 2048 * GB,
@@ -48,6 +49,7 @@ test('calculateServerUnreserved()', function (t) {
 				}
 			}
 		},
+		// [1]
 		{
 			memory_total_bytes: 9132881112,
 			disk_pool_size_bytes: 2048 * GB,
@@ -79,6 +81,7 @@ test('calculateServerUnreserved()', function (t) {
 				}
 			}
 		},
+		// [2]
 		{
 			overprovision_ratios: { ram: 1.5 },
 			memory_total_bytes: 9132881112,
@@ -111,6 +114,7 @@ test('calculateServerUnreserved()', function (t) {
 				}
 			}
 		},
+		// [3]
 		{
 			overprovision_ratios: { ram: 1.5, disk: 2.0, cpu: 2.0 },
 			memory_total_bytes: 9132881112,
@@ -152,6 +156,7 @@ test('calculateServerUnreserved()', function (t) {
 				}
 			}
 		},
+		// [4]
 		{
 			memory_total_bytes: 2942881792,
 			disk_pool_size_bytes: 2048 * GB,
@@ -182,6 +187,38 @@ test('calculateServerUnreserved()', function (t) {
 					max_physical_memory: 128
 				}
 			}
+		},
+		// [5] same as [4], but bhyve instead of kvm
+		{
+			memory_total_bytes: 2942881792,
+			disk_pool_size_bytes: 2048 * GB,
+			disk_pool_alloc_bytes: 1024 * GB,
+			disk_system_used_bytes: 10 * GB,
+			disk_installed_images_used_bytes: 1 * GB,
+			disk_zone_quota_bytes: 0,
+			disk_zone_quota_used_bytes: 0,
+			disk_kvm_quota_bytes: 0,
+			disk_kvm_zvol_volsize_bytes: 0,
+			disk_cores_quota_used_bytes: 1 * GB,
+			reservation_ratio: 0.15,
+			sysinfo: {
+				'Zpool Size in GiB': 2048,
+				'CPU Total Cores': 16
+			},
+			vms: {
+				'372a07dc-6e83-4c5f-b0e3-27e413f4a925': {
+					brand: 'bhyve',
+					cpu_cap: 350,
+					quota: 25,
+					max_physical_memory: 2048
+				},
+				'3066c163-31cb-4a2f-87c4-eec9b1aa2218': {
+					brand: 'bhyve',
+					cpu_cap: 350,
+					quota: 5,
+					max_physical_memory: 128
+				}
+			}
 		}
 	];
 
@@ -212,6 +249,10 @@ test('calculateServerUnreserved()', function (t) {
 		t.equal(servers[4].unreserved_ram,  209);
 		t.equal(servers[4].unreserved_cpu,  1425);
 
+		t.equal(servers[5].unreserved_disk, 922746);
+		t.equal(servers[5].unreserved_ram,  209);
+		t.equal(servers[5].unreserved_cpu,  1425);
+
 		t.end();
 	});
 });
diff --git a/test/algorithms/calculate-ticketed-vms.test.js b/test/algorithms/calculate-ticketed-vms.test.js
index a6646a6..207e589 100644
--- a/test/algorithms/calculate-ticketed-vms.test.js
+++ b/test/algorithms/calculate-ticketed-vms.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -76,6 +76,14 @@ var SERVERS = [ {
 	uuid: '0c104a5b-1844-4205-821b-f0c989ccf6e7',
 	disk_kvm_zvol_volsize_bytes: 0,
 	disk_zone_quota_bytes: 0
+}, {
+	// this one will have an in-flight bhyve provision
+	uuid: '282bd1ca-1bf1-11e8-b756-afc3f7940864',
+	sysinfo: {
+		'Bhyve Capable': true
+	},
+	disk_kvm_zvol_volsize_bytes: 0,
+	disk_zone_quota_bytes: 0
 } ];
 
 var TICKETS = [ {
@@ -194,6 +202,33 @@ var TICKETS = [ {
 			refreservation: 25600
 		} ]
 	}
+}, {
+	// in-flight bhyve provision
+	uuid: '3f2c2028-1bf1-11e8-a512-130d62a301b1',
+	server_uuid: '282bd1ca-1bf1-11e8-b756-afc3f7940864',
+	scope: 'vm',
+	id: '67adeb44-1bf1-11e8-9828-735e406bdf49',
+	expires_at: '2014-12-10T07:03:19.207Z',
+	created_at: '2014-12-10T06:53:19.217Z',
+	updated_at: '2014-12-10T06:53:45.306Z',
+	status: 'active',
+	action: 'provision',
+	extra: {
+		workflow_job_uuid: '8299720c-1bf1-11e8-be8d-af10b6e78c96',
+		owner_uuid: '930896af-bf8c-48d4-885c-6573a94b1853',
+		max_physical_memory: 2048,
+		cpu_cap: 600,
+		quota: 10,
+		brand: 'bhyve',
+		disks: [ {
+			image_uuid: 'd8d81aee-20cf-11e5-8503-2bc101a1d577',
+			image_name: 'debian-7',
+			image_size: 10240
+		}, {
+			size: 25600,
+			refreservation: 25600
+		} ]
+	}
 } ];
 
 
@@ -202,6 +237,9 @@ test('calculate ticketed VMs', function (t) {
 	var opts = common.addCommonOpts({ tickets: TICKETS });
 
 	filter.run(SERVERS, opts, function (err, servers, reasons) {
+		var server;
+		var vmUuid;
+
 		t.ifError(err);
 
 		// t.deepEqual(servers, serversInfo);
@@ -209,8 +247,8 @@ test('calculate ticketed VMs', function (t) {
 
 		t.deepEqual(servers[0], SERVERS[0]);
 
-		var vmUuid = '8e54da2f-996f-491c-92ff-1b1d6c48f314';
-		var server = servers[1];
+		vmUuid = '8e54da2f-996f-491c-92ff-1b1d6c48f314';
+		server = servers[1];
 		t.deepEqual(server, {
 			uuid: '67e48c2e-45bb-400a-bc7d-3143894aacfa',
 			disk_kvm_zvol_volsize_bytes: 0,
@@ -249,6 +287,27 @@ test('calculate ticketed VMs', function (t) {
 			}
 		});
 
+		vmUuid = '67adeb44-1bf1-11e8-9828-735e406bdf49';
+		server = servers[3];
+		t.deepEqual(server, {
+			uuid: '282bd1ca-1bf1-11e8-b756-afc3f7940864',
+			disk_kvm_zvol_volsize_bytes: 0,
+			disk_zone_quota_bytes: 35 * GiB, // for root and zvols
+			sysinfo: { 'Bhyve Capable': true },
+			vms: {
+				'67adeb44-1bf1-11e8-9828-735e406bdf49': {
+					uuid: vmUuid,
+					owner_uuid: ownerUuid,
+					max_physical_memory: 3328,
+					cpu_cap: 600,
+					quota: 35,
+					brand: 'bhyve',
+					zone_state: 'running',
+					state: 'running'
+				}
+			}
+		});
+
 		t.end();
 	});
 });
diff --git a/test/algorithms/hard-filter-hvm.test.js b/test/algorithms/hard-filter-hvm.test.js
new file mode 100644
index 0000000..0a67c4f
--- /dev/null
+++ b/test/algorithms/hard-filter-hvm.test.js
@@ -0,0 +1,177 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var test = require('tape');
+var filter = require('../../lib/algorithms/hard-filter-hvm.js');
+var common = require('./common.js');
+
+
+var checkFilter = common.createPluginChecker(filter);
+
+
+test('filterHVM() with joyent', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [
+			{ brand: 'bhyve' },
+			{ brand: 'kvm' }
+		]
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'joyent', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	// With brand=joyent, it really shouldn't matter which other
+	// instances are on the system.
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with kvm and no existing VMs', function (t) {
+	var servers = [ {
+		sysinfo: {},
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'kvm', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	// no existing VMs, so kvm should be fine on the only server
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with bhyve and mixed HW support', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: []
+	}, {
+		sysinfo: {},
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(0, 1);
+	var expectReasons = {
+		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
+			'Server does not support "bhyve" VMs'
+	};
+
+	var opts = {
+		vm:  { brand: 'bhyve', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with bhyve and existing kvm', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'kvm',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		}]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(1, 2);
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM 3ac37ee8-16a9-11e8-a114-9bd01a859c7f has ' +
+			'brand kvm which is incompatible with new VMs ' +
+			'using brand bhyve'
+	};
+
+	var opts = {
+		vm:  { brand: 'bhyve', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with kvm and existing bhyve', function (t) {
+	var servers = [ {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'bhyve',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		} ]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers.slice(1, 2);
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM 3ac37ee8-16a9-11e8-a114-9bd01a859c7f has brand ' +
+			'bhyve which is incompatible with new VMs using ' +
+			'brand kvm'
+	};
+
+	var opts = {
+		vm:  { brand: 'kvm', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with no servers', function (t) {
+	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
+	var opts = {
+		vm:  { brand: 'joyent', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('name', function (t) {
+	t.equal(typeof (filter.name), 'string');
+	t.end();
+});
diff --git a/test/algorithms/hard-filter-min-ram.test.js b/test/algorithms/hard-filter-min-ram.test.js
index 7c5e940..5bf6692 100644
--- a/test/algorithms/hard-filter-min-ram.test.js
+++ b/test/algorithms/hard-filter-min-ram.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -92,6 +92,45 @@ test('filterMinRam() with KVM', function (t) {
 });
 
 
+test('filterMinRam() with bhyve', function (t) {
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 2.0 }
+	} ];
+
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM\'s calculated 512 RAM is less than server\'s ' +
+			'spare 256',
+		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
+			'VM\'s calculated 512 RAM is less than server\'s ' +
+			'spare 511'
+	};
+
+	var expectServers = servers.slice(2, 4);
+	var opts = {
+		vm:  { ram: 512, brand: 'bhyve' },
+		pkg: { overprovision_ram: 2.0 },
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
 test('filterMinRam() without pkg', function (t) {
 	var servers = [ {
 		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
diff --git a/test/allocator.test.js b/test/allocator.test.js
index 8630cb5..e08518e 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -795,6 +795,7 @@ test('load available algorithms', function (t) {
 		'hard-filter-capness',
 		'hard-filter-feature-min-platform',
 		'hard-filter-headnode',
+		'hard-filter-hvm',
 		'hard-filter-invalid-servers',
 		'hard-filter-large-servers',
 		'hard-filter-locality-hints',
-- 
2.21.0

