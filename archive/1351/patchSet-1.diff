From 2bb3cc8f0901060e65ee9c5e0bb583ba892ac69d Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Thu, 26 Jan 2017 16:09:50 -0800
Subject: [PATCH] MANTA-3126 update marlin to Moray v3

---
 agent/lib/agent/agent.js                     | 28 ++++++++--
 common/lib/bus.js                            | 54 +++++---------------
 common/lib/marlin.js                         | 44 ++++++++++++----
 dev/package.json                             |  4 +-
 jobsupervisor/etc/config.coal.json           | 19 +++----
 jobsupervisor/lib/worker/locator.js          |  6 +--
 jobsupervisor/lib/worker/schema.js           | 29 ++---------
 jobsupervisor/lib/worker/worker.js           |  7 ++-
 jobsupervisor/sapi_manifests/marlin/template | 19 +++----
 package.json                                 |  2 +-
 10 files changed, 106 insertions(+), 106 deletions(-)

diff --git a/agent/lib/agent/agent.js b/agent/lib/agent/agent.js
index c661a3b..c4a37ab 100644
--- a/agent/lib/agent/agent.js
+++ b/agent/lib/agent/agent.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -404,7 +404,7 @@ function usage(errmsg)
 function mAgent(filename)
 {
 	var agent = this;
-	var url, tunables, defaults, srv;
+	var url, tunables, defaults, srv, buscfg;
 
 	this.ma_log = new mod_bunyan({
 	    'name': maServerName,
@@ -523,7 +523,29 @@ function mAgent(filename)
 	});
 	this.ma_cueball_kang = mod_cueball.poolMonitor.toKangOptions();
 
-	this.ma_bus = new mod_bus.createBus(this.ma_conf, {
+	/*
+	 * Generally, the goal is to make our actual configuration file closely
+	 * match what we pass to Moray clients so that operators can easily
+	 * adjust it.  See the way the jobsupervisor (and other Moray v3
+	 * consumers) pass through their moray configuration straight to a Moray
+	 * client.  However, without SAPI management for agent configuration
+	 * files, in order to avoid a marlin-agent/config-file flag day, we have
+	 * to translate an older form of the configuration into what we need
+	 * today.  This means it's currently not possible to configure the
+	 * Marlin agent to use Moray without at least trying SRV records.
+	 */
+	url = mod_url.parse(this.ma_conf['moray']['url']);
+	buscfg = {
+	    'tunables': this.ma_conf['tunables'],
+	    'morayConfig': {
+	        'srvDomain': url['hostname'],
+		'cueballOptions': {
+		    'resolvers': this.ma_conf['dns']['nameservers'].slice(0),
+		    'defaultPort': parseInt(url['port'], 10) || 2020
+		}
+	    }
+	};
+	this.ma_bus = new mod_bus.createBus(buscfg, {
 	    'log': this.ma_log.child({ 'component': 'MorayBus' })
 	});
 
diff --git a/common/lib/bus.js b/common/lib/bus.js
index e5323de..256bc55 100644
--- a/common/lib/bus.js
+++ b/common/lib/bus.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -91,35 +91,21 @@ var mGenericTransientErrors = {
 function createBus(conf, options)
 {
 	mod_assert.equal(typeof (conf), 'object');
-	mod_assert.ok(conf.hasOwnProperty('moray'));
+	mod_assert.ok(conf.hasOwnProperty('morayConfig'));
+	mod_assert.ok(conf.hasOwnProperty('tunables'));
 
 	mod_assert.equal(typeof (options), 'object');
 	mod_assert.equal(typeof (options['log']), 'object');
 
-	var morayconf, dnsconf, tunconf;
-	dnsconf = conf['dns'];
-	morayconf = conf['moray'];
-	if (morayconf['storage'])
-		morayconf = morayconf['storage'];
-	tunconf = conf['tunables'];
-
-	return (new MorayBus(morayconf, dnsconf, tunconf, options));
+	return (new MorayBus(conf['morayConfig'], conf['tunables'], options));
 }
 
-function MorayBus(morayconf, dnsconf, tunconf, options)
+function MorayBus(morayconf, tunconf, options)
 {
-	var url;
-
-	url = mod_url.parse(morayconf['url']);
-	this.mb_host = url['hostname'];
-	this.mb_port = parseInt(url['port'], 10);
-	this.mb_reconnect = morayconf['reconnect'];
-	this.mb_dns = dnsconf ?
-	    { 'resolvers': dnsconf['nameservers'].slice(0) } : undefined;
-
+	this.mb_config_moray = mod_jsprim.deepCopy(morayconf);
 	this.mb_log = options['log'];
 	this.mb_client = undefined;	/* current Moray client */
-	this.mb_connecting = false;	/* currently connecting */
+	this.mb_connecting = false;	/* a connect operation is outstanding */
 	this.mb_reported = {};		/* last report time, by error name */
 	this.mb_onconnect = [];
 
@@ -267,33 +253,17 @@ MorayBus.prototype.fence = function (id, callback)
 MorayBus.prototype.connect = function ()
 {
 	var bus = this;
-	var client;
+	var args, client;
 
 	if (this.mb_client !== undefined || this.mb_connecting)
 		return;
 
 	this.mb_connecting = true;
-
-	client = mod_moray.createClient({
-	    'host': this.mb_host,
-	    'port': this.mb_port,
-	    'log': this.mb_log.child({ 'component': 'moray' }),
-	    'retry': this.mb_reconnect,
-	    'dns': this.mb_dns
-	});
-
-	client.on('error', function (err) {
-		bus.mb_connecting = false;
-		bus.mb_log.error(err, 'moray client error');
-	});
-
-	client.on('close', function () {
-		bus.mb_log.error('moray client closed');
-	});
-
+	args = mod_jsprim.deepCopy(this.mb_config_moray);
+	args.log = this.mb_log.child({ 'component': 'moray' });
+	client = mod_moray.createClient(args);
 	client.on('connect', function () {
-		mod_assert.ok(bus.mb_client === undefined ||
-		    bus.mb_client == client);
+		mod_assert.ok(bus.mb_client === undefined);
 		bus.mb_client = client;
 		bus.mb_connecting = false;
 		bus.emit('ready');
diff --git a/common/lib/marlin.js b/common/lib/marlin.js
index c791a07..5c32b57 100644
--- a/common/lib/marlin.js
+++ b/common/lib/marlin.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -45,7 +45,9 @@ exports.MarlinMeterReader = mod_meter.MarlinMeterReader;
 /*
  * Creates a new Marlin client.	 "conf" arguments include:
  *
- *    moray		Moray configuration to use (including at least "url")
+ *    moray		Moray configuration to use (including at least "url" for
+ *    			legacy behavior, or arguments to Moray client
+ *    			constructor)
  *
  *    log		Bunyan-style logger
  *
@@ -214,6 +216,8 @@ function MarlinApi(args)
 	mod_events.EventEmitter();
 
 	var conf = args['conf'];
+	var morayargs, url;
+
 	mod_assert.equal(typeof (conf['moray']), 'object');
 	mod_assert.equal(typeof (conf['buckets']), 'object');
 	mod_assert.ok(conf['buckets'].hasOwnProperty('job'));
@@ -223,18 +227,40 @@ function MarlinApi(args)
 	mod_assert.ok(conf['buckets'].hasOwnProperty('taskoutput'));
 	mod_assert.ok(Array.isArray(conf['images']));
 
-	var url = mod_url.parse(conf['moray']['url']);
-
 	this.ma_log = args['log'];
 
-	this.ma_client = mod_moray.createClient({
-	    'host': url['hostname'],
-	    'port': parseInt(url['port'], 10),
+	/*
+	 * After Moray v3, consumers are generally supposed to take
+	 * configuration directly from a config file and pass them through to
+	 * the client constructor.  However, Moray v3 was a major version bump.
+	 * This module has no way to implement that because muskie depends on
+	 * the latest commit on master.  As a result, we have to accept the
+	 * configuration that muskie used to provide, but we translate that to
+	 * the new-style configuration as best we can.  (We cannot support
+	 * bootstrap resolvers this way because the old configuration did not
+	 * include that.)  This is similar to what we do in the Marlin agent.
+	 *
+	 * If "url" was not specified in the moray options, we assume this is a
+	 * new-style configuration and we pass it right through.
+	 */
+	morayargs = {
 	    'log': args['log'].child({'component': 'moray'}),
-	    'retry': conf['moray']['retry'],
 	    'unwrapErrors': true
-	});
+	};
+
+	if (conf['moray']['url']) {
+		url = mod_url.parse(conf['moray']['url']);
+		morayargs['srvDomain'] = url['hostname'];
+		morayargs['cueballOptions'] = {
+		    'defaultPort': parseInt(url['port'], 10) || 2020
+		};
+	} else {
+		mod_jsprim.forEachKey(conf['moray'], function (k, v) {
+			morayargs[k] = v;
+		});
+	}
 
+	this.ma_client = mod_moray.createClient(morayargs);
 	this.ma_client.on('close', this.emit.bind(this, 'close'));
 	this.ma_client.on('connect', this.emit.bind(this, 'connect'));
 	this.ma_client.on('error', this.emit.bind(this, 'error'));
diff --git a/dev/package.json b/dev/package.json
index 58ea3c8..4c5d8a6 100644
--- a/dev/package.json
+++ b/dev/package.json
@@ -26,14 +26,14 @@
 		"jsprim": "^1.3.1",
 		"kang": "0.0.5",
 		"kstat": "0.5.0",
-		"libmanta": "git+https://github.com/joyent/node-libmanta.git#master",
+		"libmanta": "git+https://github.com/davepacheco/node-libmanta.git#dev-MORAY-280",
 		"lstream": "0.0.3",
 		"mahi": "git+https://github.com/joyent/node-mahi.git#master",
 		"manta": "^3.0.0",
 		"manta-compute-bin": "git+https://github.com/joyent/manta-compute-bin.git#master",
 		"memorystream": "0.2.0",
 		"mkdirp": "0.3.1",
-		"moray": "^2.0.0",
+		"moray": "3.0.0",
 		"node-uuid": "1.4.0",
 		"panic": "0.2.1",
 		"posix-getopt": "^1.0.0",
diff --git a/jobsupervisor/etc/config.coal.json b/jobsupervisor/etc/config.coal.json
index 7706ae9..6dc2822 100644
--- a/jobsupervisor/etc/config.coal.json
+++ b/jobsupervisor/etc/config.coal.json
@@ -10,18 +10,19 @@
 
 	"moray": {
 		"index": {
-			"host": "electric-moray.sf.joyent.us",
-			"port": 2020,
-			"retry": {
-				"maxTimeout": 30000,
-				"retries": 120
+			"morayOptions": {
+				"srvDomain": "electric-moray.sf.joyent.us",
+				"cueballOptions": {
+					"resolvers": [ "nameservice.sf.joyent.us" ]
+				}
 			}
 		},
 		"storage": {
-			"url": "tcp://1.moray.sf.joyent.us:2020",
-			"reconnect": {
-				"maxTimeout": 30000,
-				"retries": 120
+			"morayOptions": {
+				"srvDomain": "1.moray.sf.joyent.us",
+				"cueballOptions": {
+					"resolvers": [ "nameservice.sf.joyent.us" ]
+				}
 			}
 		}
 	},
diff --git a/jobsupervisor/lib/worker/locator.js b/jobsupervisor/lib/worker/locator.js
index 1ebe9eb..b28833b 100644
--- a/jobsupervisor/lib/worker/locator.js
+++ b/jobsupervisor/lib/worker/locator.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -82,8 +82,8 @@ exports.createLocator = createLocator;
  *
  *	moray.index: electric moray configuration
  *
- * The locator will use the electric moray instance specified by
- * moray.index.{host,port} to find objects.
+ * The locator will use the electric moray instance specified by moray.index to
+ * find objects.
  */
 function createLocator(conf, args)
 {
diff --git a/jobsupervisor/lib/worker/schema.js b/jobsupervisor/lib/worker/schema.js
index 37d44c5..8aa8ac8 100644
--- a/jobsupervisor/lib/worker/schema.js
+++ b/jobsupervisor/lib/worker/schema.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -33,34 +33,11 @@ module.exports = {
 	    'properties': {
 		'index': {
 		    'required': true,
-		    'type': 'object',
-		    'properties': {
-			'host': mod_schema.sStringRequiredNonEmpty,
-			'port': mod_schema.sTcpPortRequired,
-			'retry': {
-			    'required': true,
-			    'type': 'object',
-			    'properties': {
-				'maxTimeout': mod_schema.sIntervalRequired,
-				'retries': mod_schema.sIntervalRequired
-			    }
-			}
-		    }
+		    'type': 'object'
 		},
 		'storage': {
 		    'required': true,
-		    'type': 'object',
-		    'properties': {
-			'url': mod_schema.sStringRequiredNonEmpty,
-			'reconnect': {
-			    'required': true,
-			    'type': 'object',
-			    'properties': {
-				'maxTimeout': mod_schema.sIntervalRequired,
-				'retries': mod_schema.sIntervalRequired
-			    }
-			}
-		    }
+		    'type': 'object'
 		}
 	    }
 	},
diff --git a/jobsupervisor/lib/worker/worker.js b/jobsupervisor/lib/worker/worker.js
index 9485fd6..9202ad0 100644
--- a/jobsupervisor/lib/worker/worker.js
+++ b/jobsupervisor/lib/worker/worker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -420,7 +420,10 @@ function Worker(args)
 	/* helper objects */
 	this.w_log = args['log'];
 
-	this.w_bus = mod_bus.createBus(conf, {
+	this.w_bus = mod_bus.createBus({
+	    'morayConfig': this.w_conf['moray']['storage']['morayOptions'],
+	    'tunables': this.w_conf['tunables']
+	}, {
 	    'log': this.w_log.child({ 'component': 'MorayBus' })
 	});
 
diff --git a/jobsupervisor/sapi_manifests/marlin/template b/jobsupervisor/sapi_manifests/marlin/template
index e3c34c4..e121e8b 100644
--- a/jobsupervisor/sapi_manifests/marlin/template
+++ b/jobsupervisor/sapi_manifests/marlin/template
@@ -8,18 +8,19 @@
 	},
 	"moray": {
 		"index": {
-			"host": "{{ELECTRIC_MORAY}}",
-			"port": 2020,
-			"retry": {
-				"maxTimeout": 30000,
-				"retries": 120
+			"morayOptions": {
+				"srvDomain": "{{ELECTRIC_MORAY}}",
+				"cueballOptions": {
+					"resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
+				}
 			}
 		},
 		"storage": {
-			"url": "tcp://{{MARLIN_MORAY_SHARD}}:2020/",
-			"reconnect": {
-				"maxTimeout": 30000,
-				"retries": 120
+			"morayOptions": {
+				"srvDomain": "{{MARLIN_MORAY_SHARD}}",
+				"cueballOptions": {
+					"resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
+				}
 			}
 		}
 	},
diff --git a/package.json b/package.json
index ed9ea5f..94345f5 100644
--- a/package.json
+++ b/package.json
@@ -22,7 +22,7 @@
 		"jsprim": "0.5.0",
 		"lstream": "0.0.3",
 		"mahi": "git+https://github.com/joyent/node-mahi.git#master",
-		"moray": "^2.0.0",
+		"moray": "3.0.0",
 		"node-uuid": "1.4.0",
 		"posix-getopt": "1.0.0",
 		"retry": "0.6.0",
-- 
2.21.0

