commit 418458ac78d95c57dcbc2d9289842c2e242c0eab (refs/changes/45/4645/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-08-03T00:46:10+00:00 (1 year, 2 months ago)
    
    TRITON-637 fwadm(1M) needs to add "keep state" to outbound allow rules (sync w/ smartos-live)

diff --git a/deps/fw/lib/fw.js b/deps/fw/lib/fw.js
index 669fc83..1ee415f 100644
--- a/deps/fw/lib/fw.js
+++ b/deps/fw/lib/fw.js
@@ -1259,7 +1259,8 @@ function prepareIPFdata(opts, log, callback) {
 
         conf[vm].sort(compareRules).forEach(function (sortObj) {
             var ktxt = KEEP_FRAGS;
-            if (sortObj.direction === 'to' && iks[sortObj.protocol]) {
+            if ((sortObj.direction === 'from' && sortObj.action === 'allow')
+                || (sortObj.direction === 'to' && iks[sortObj.protocol])) {
                 ktxt += KEEP_STATE;
             }
 
diff --git a/deps/fw/test/lib/helpers.js b/deps/fw/test/lib/helpers.js
index 22c7474..45d4bf3 100644
--- a/deps/fw/test/lib/helpers.js
+++ b/deps/fw/test/lib/helpers.js
@@ -696,24 +696,24 @@ function allowInICMP6(src, type, code) {
 }
 
 
-function allowPortOutTCP(dst, port) {
-    return createPortRule('pass', 'out', 'tcp', 'any to ' + dst, port);
+function allowPortOutTCP(dst, port, rest) {
+    return createPortRule('pass', 'out', 'tcp', 'any to ' + dst, port, rest);
 }
 
-function blockPortOutTCP(dst, port) {
-    return createPortRule('block', 'out', 'tcp', 'any to ' + dst, port);
+function blockPortOutTCP(dst, port, rest) {
+    return createPortRule('block', 'out', 'tcp', 'any to ' + dst, port, rest);
 }
 
-function allowPortOutUDP(dst, port) {
-    return createPortRule('pass', 'out', 'udp', 'any to ' + dst, port);
+function allowPortOutUDP(dst, port, rest) {
+    return createPortRule('pass', 'out', 'udp', 'any to ' + dst, port, rest);
 }
 
 function allowRangeOutUDP(dst, p1, p2) {
     return createRangeRule('pass', 'out', 'udp', 'any to ' + dst, p1, p2);
 }
 
-function blockPortOutUDP(dst, port) {
-    return createPortRule('block', 'out', 'udp', 'any to ' + dst, port);
+function blockPortOutUDP(dst, port, rest) {
+    return createPortRule('block', 'out', 'udp', 'any to ' + dst, port, rest);
 }
 
 function blockRangeOutUDP(dst, p1, p2) {
diff --git a/deps/fw/test/unit/priority.test.js b/deps/fw/test/unit/priority.test.js
index d31fc0a..da2d805 100644
--- a/deps/fw/test/unit/priority.test.js
+++ b/deps/fw/test/unit/priority.test.js
@@ -219,9 +219,9 @@ exports['Overriding outbound rules'] = function (t) {
             }, 'rules returned');
 
             v4rules[vm.uuid].out.udp = [
-                helpers.allowPortOutUDP('10.99.99.254', 22),
+                helpers.allowPortOutUDP('10.99.99.254', 22, 'keep state'),
                 helpers.blockRangeOutUDP('10.99.99.254', 15, 30),
-                helpers.allowPortOutUDP('10.99.99.0/24'),
+                helpers.allowPortOutUDP('10.99.99.0/24', '', 'keep state'),
                 helpers.blockPortOutUDP('any')
             ];
 
