From 5874682d2c24cc2e148c77be80cd7c5e0951926f Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 13 Jun 2018 14:20:16 -0700
Subject: [PATCH] TRITON-501 prep and get binder test suite running on Triton
 binder0 in nightly

---
 Makefile              |   1 +
 package.json          |   2 +-
 test/database.test.js |   1 -
 test/helper.js        |  10 ++--
 test/runtests         | 117 ++++++++++++++++++++++++++++++++++++++++++
 test/service.test.js  |   1 -
 tools/rsync-to        |  94 +++++++++++++++++++++++++++++++++
 7 files changed, 218 insertions(+), 8 deletions(-)
 create mode 100755 test/runtests
 create mode 100755 tools/rsync-to

diff --git a/Makefile b/Makefile
index 42cbcf1..3b204f0 100644
--- a/Makefile
+++ b/Makefile
@@ -151,6 +151,7 @@ release: all $(SMF_MANIFESTS) balancer smf_adjust
 	    $(ROOT)/deps/zookeeper-common/sapi_manifests \
 	    $(ROOT)/deps/zookeeper-common/smf \
 	    $(ROOT)/smf \
+	    $(ROOT)/test \
 	    $(ROOT)/bin \
 	    $(RELSTAGEDIR)/root/opt/smartdc/binder
 	cp \
diff --git a/package.json b/package.json
index 9411128..30dbcdf 100644
--- a/package.json
+++ b/package.json
@@ -29,7 +29,7 @@
   },
   "devDependencies": {
     "expiring-lru-cache": "2.1.0",
-    "nodeunit": "0.9.0"
+    "nodeunit": "0.11.2"
   },
   "scripts": {
     "start": "node ./main.js"
diff --git a/test/database.test.js b/test/database.test.js
index 9f7542a..e1f6f59 100644
--- a/test/database.test.js
+++ b/test/database.test.js
@@ -9,7 +9,6 @@
  */
 
 var vasync = require('vasync');
-var mod_zkstream = require('zkstream');
 
 var core = require('../lib');
 
diff --git a/test/helper.js b/test/helper.js
index 4f7bd09..3155241 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 // Just a simple wrapper over nodeunit's exports syntax. Also exposes a common
@@ -15,7 +15,6 @@ var bunyan = require('bunyan');
 var Cache = require('expiring-lru-cache');
 var mname = require('mname');
 var vasync = require('vasync');
-var nzk = require('node-zookeeper-client');
 var path = require('path');
 var mod_zkstream = require('zkstream');
 
@@ -37,7 +36,7 @@ function createLogger(name, stream) {
         var log = bunyan.createLogger({
                 level: (process.env.LOG_LEVEL || 'info'),
                 name: name || process.argv[1],
-                stream: stream || process.stdout,
+                stream: stream || process.stderr,
                 src: true,
                 serializers: mname.bunyan.serializers
         });
@@ -46,7 +45,7 @@ function createLogger(name, stream) {
 
 
 function createServer(callback) {
-        var log = createLogger();
+        var log = createLogger('bindertest');
         var arg = {};
 
         var funcs = [
@@ -56,7 +55,8 @@ function createServer(callback) {
                         _.zk = new mod_zkstream.Client({
                                 address: host,
                                 port: port,
-                                timeout: 10000
+                                timeout: 10000,
+                                log: log
                         });
                         _.zk.once('connect', cb);
                 },
diff --git a/test/runtests b/test/runtests
new file mode 100755
index 0000000..6e8b609
--- /dev/null
+++ b/test/runtests
@@ -0,0 +1,117 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Run the binders tests. This is meant to be called from within a Triton
+# binder zone, e.g.:
+#       sdc-login -l binder0
+#       /opt/smartdc/binder/test/runtests
+#
+# Run `./runtests -h` for usage info.
+#
+
+if [ "$TRACE" != "" ]; then
+    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+LOG=/var/tmp/bindertest.log
+
+
+#---- guard
+
+if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
+    cat <<EOF
+To run this test you must create the file:
+
+    /lib/sdc/.sdc-test-no-production-data
+
+after ensuring you have no production data on this SDC.
+
+Also, make sure that the sapi and imgapi zones have external nics.  See the
+README for more detail.
+EOF
+    exit 2
+fi
+
+
+#---- support functions
+
+function fatal
+{
+    echo "$(basename $0): fatal error: $*"
+    exit 1
+}
+
+function usage
+{
+    echo "Usage:"
+    echo "  runtests [OPTIONS...]"
+    echo ""
+    echo "Options:"
+    echo "  -f FILTER    Filter pattern for test files to run."
+    echo "  -r REPORTER  Nodeunit reporter to use. Defaults to 'tap'."
+}
+
+function cleanup () {
+    local status=$?
+    if [[ $status -ne 0 ]]; then
+        echo "error $status (log at '$LOG', run 'TRACE=1 $0' for more info)" >&2
+    fi
+}
+
+
+
+#---- mainline
+
+trap 'cleanup' EXIT
+
+TOP=$(cd $(dirname $0)/../; pwd)
+
+# Options.
+opt_reporter=tap
+opt_test_pattern=
+while getopts "hr:f:" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        f)
+            opt_test_pattern="$OPTARG"
+            ;;
+        r)
+            opt_reporter=$OPTARG
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+
+cd ${TOP}
+
+test_files=$(ls -1 test/*.test.js)
+if [[ -n "$opt_test_pattern" ]]; then
+    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
+    echo "# Running filtered set of test files: $test_files"
+fi
+
+# Currently binder's test files write Bunyan logs to stderr. We pipe those
+# to a file to not interfere with reading the test output.
+echo "# Test log at $LOG"
+./build/node/bin/node ./node_modules/.bin/nodeunit \
+    --reporter=$opt_reporter \
+    ${test_files} 2>$LOG
diff --git a/test/service.test.js b/test/service.test.js
index 39f73a5..d6fcab2 100644
--- a/test/service.test.js
+++ b/test/service.test.js
@@ -9,7 +9,6 @@
  */
 
 var vasync = require('vasync');
-var mod_zkstream = require('zkstream');
 
 var core = require('../lib');
 
diff --git a/tools/rsync-to b/tools/rsync-to
new file mode 100755
index 0000000..30d2dbb
--- /dev/null
+++ b/tools/rsync-to
@@ -0,0 +1,94 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Rsync local working copy changes to a Triton "binder0" instance on a headnode.
+#
+# Usage:
+#   ./tools/rsync-to HEADNODE-GZ-IP
+#
+# WARNING: This is quick hack for developers to quickly sync changes to
+# interpreted files from a local working copy to a deployed Triton "binder0"
+# zone (e.g. in COAL) for testing. It does *not* produce a perfect replica
+# of a full clean binder image build.
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+TOP=$(cd $(dirname $0)/../; pwd)
+ALIAS=binder0
+SERVICE_PREFIX=/opt/smartdc/binder
+SMF_FMRI=binder
+SSH_OPTS="-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
+HEADNODE=root@$1
+INST=
+
+function fatal
+{
+    echo "$0: fatal error: $*"
+    exit 1
+}
+
+# ---- mainline
+
+if [[ -z "$INST" ]]; then
+    INST=$(ssh $SSH_OPTS $HEADNODE vmadm lookup -1 alias=$ALIAS state=running)
+fi
+echo "$ALIAS instance: $INST"
+
+rsyncOpts=
+if [[ $(uname -s) != "SunOS" ]]; then
+    # Skip updating binary modules because the local and deployment OS do
+    # not match.
+    rsyncOpts="--exclude *.node --exclude build"
+else
+    # The local working copy matches the deployed OS (SmartOS), so let's
+    # wipe "node_modules" to sync it fully everytime.
+    ssh $SSH_OPTS $HEADNODE rm -rf /zones/$INST/root${SERVICE_PREFIX}/node_modules
+fi
+
+rsync -av ${TOP}/ \
+    $HEADNODE:/zones/$INST/root${SERVICE_PREFIX} \
+    $rsyncOpts \
+    --exclude .git/ \
+    --exclude /boot/ \
+    --exclude /build/ \
+    --exclude /docs/ \
+    --exclude /deps/ \
+    --exclude /balancer/ \
+    --exclude /smf_adjust/ \
+    --exclude /src/ \
+    --exclude /tools/ \
+    --exclude /env.sh \
+    --exclude /LICENSE \
+    --exclude /Makefile \
+    --exclude /README.md \
+    --exclude /tmp/
+rsync -av ${TOP}/boot/ \
+    $HEADNODE:/zones/$INST/root/opt/smartdc/boot/ \
+    $rsyncOpts
+
+state=$(ssh $SSH_OPTS ${HEADNODE} svcs -z ${INST} -H -o state $SMF_FMRI)
+if [[ "$state" == "maintenance" ]]; then
+    ssh $SSH_OPTS ${HEADNODE} svcadm -z ${INST} clear $SMF_FMRI
+else
+    ssh $SSH_OPTS ${HEADNODE} svcadm -z ${INST} restart $SMF_FMRI
+fi
+
+# Warning: We aren't restarting config-agent, so local changes to
+# sapi_manifests/... will have to wait for config-agent's polling interval.
+#
+#   ssh $SSH_OPTS ${NODE} svcadm -z ${INST} restart config-agent
-- 
2.21.0

