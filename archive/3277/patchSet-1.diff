commit a22cf583b07de47ee9fd269fc28c0b67d9545430 (refs/changes/77/3277/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-01-29T12:22:26-08:00 (1 year, 8 months ago)
    
    TRITON-69 cn-agent should not try to update boot time just once, should retry instead

diff --git a/lib/app.js b/lib/app.js
index e7b9ba2..9e60d75 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -443,8 +443,8 @@ App.prototype.setupAmqpClient = function () {
     // Set up Ur client.
     self.log.debug('Ready to communicate with ur');
     self.ur = new Ur({ log: self.log });
-    self.ur.on('serverStartup', self.onSysinfoReceived.bind(self));
-    self.ur.on('serverSysinfo', self.onSysinfoReceived.bind(self));
+    self.ur.on('serverStartup', self.onSysinfoReceivedUr.bind(self));
+    self.ur.on('serverSysinfo', self.onSysinfoReceivedUr.bind(self));
 };
 
 
@@ -1157,6 +1157,13 @@ function (sysinfo, refreshcb) {
     }
 };
 
+App.prototype.onSysinfoReceivedUr =
+function onSysinfoReceivedUr(message, routingKey) {
+    var self = this;
+    var serverUuid = routingKey.split('.')[2];
+
+    return self.onSysinfoReceived(serverUuid, message);
+};
 
 /**
  * Compute nodes which are not in the 'setup' state, will periodically
@@ -1165,13 +1172,13 @@ function (sysinfo, refreshcb) {
  * ignore message. If it's not found in Moray, we need to add it.
  */
 
-App.prototype.onSysinfoReceived = function (message, routingKey) {
+App.prototype.onSysinfoReceived =
+function onSysinfoReceived(serverUuid, newSysinfo, callback) {
     var self = this;
 
     var sysinfoTimeoutSeconds = 90;
-    var uuid = routingKey.split('.')[2];
-    self.log.info('sysinfo message received from %s', uuid);
-    self.log.debug(message);
+    self.log.info('new sysinfo received for %s', serverUuid);
+    self.log.debug({sysinfo: newSysinfo}, 'sysinfo for %s', serverUuid);
 
     var serverValues;
 
@@ -1180,7 +1187,7 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
             // If server exists and is not setup, clear and set a timeout to
             // set status to unknown. This way will need to periodically send
             // out sysinfo messages or it will be marked as status = 'unknown'.
-            ModelServer.get(uuid, function (e, s, values) {
+            ModelServer.get(serverUuid, function (e, s, values) {
                 if (e) {
                     next(e);
                     return;
@@ -1198,25 +1205,25 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
             // Initiate a sysinfo workflow for server
             if (self.workflow.connected) {
                 if (!serverValues ||
-                    !deepEqual(message, serverValues.sysinfo))
+                    !deepEqual(newSysinfo, serverValues.sysinfo))
                 {
                     self.log.info(
                         'starting server-sysinfo workflow for changed sysinfo');
-                    ModelServer.beginSysinfoWorkflow(message);
+                    ModelServer.beginSysinfoWorkflow(newSysinfo);
                 } else {
                     self.log.debug(
-                        { uuid: uuid},
+                        { uuid: serverUuid},
                         'skipping server-sysinfo workflow ' +
                         'for sysinfo with no changes');
                 }
             } else {
-                self.log.error({ uuid: uuid},
+                self.log.error({ uuid: serverUuid},
                     'could not create sysinfo workflow: workflow unavailable');
             }
             next();
         },
         function (next) {
-            self.refreshServerFromSysinfo(message, function (error) {
+            self.refreshServerFromSysinfo(newSysinfo, function (error) {
                 if (error) {
                     next(error);
                     return;
@@ -1229,15 +1236,19 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
         if (err) {
             self.log.error(err, 'error handling sysinfo message');
         }
-        self.log.debug('sysinfo handler complete for %s', uuid);
+        self.log.debug('sysinfo handler complete for %s', serverUuid);
+
+        if (callback) {
+            callback(err);
+        }
     });
 
     function setStatusTimeout() {
-        clearTimeout(self.statusTimeouts[uuid]);
+        clearTimeout(self.statusTimeouts[serverUuid]);
 
-        self.statusTimeouts[uuid] = setTimeout(function () {
-            self.statusTimeouts[uuid] = null;
-            ModelServer.get(uuid, function (e, s, so) {
+        self.statusTimeouts[serverUuid] = setTimeout(function () {
+            self.statusTimeouts[serverUuid] = null;
+            ModelServer.get(serverUuid, function (e, s, so) {
                 if (e) {
                     self.log.error(e);
                     return;
@@ -1251,7 +1262,7 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
 
                 s.modify({ status: 'unknown' }, function () {
                     self.log.warn(
-                        { uuid: uuid },
+                        { uuid: serverUuid },
                         'no sysinfo from server in %d ' +
                         'seconds, status => unknown',
                         sysinfoTimeoutSeconds);
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index 4c4d066..6631ae6 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -731,6 +731,63 @@ Server.setup = function handlerServerSetup(req, res, next) {
 };
 
 
+/* BEGIN JSSTYLED */
+/**
+ * Register a given server's sysinfo values and store them in the server object.
+ * Does the same thing as CNAPI recieving a sysinfo message via Ur.
+ *
+ * IMPORTANT: This endpoint is only intended to be used by cn-agent. Any other
+ * use will not be supported and may break in the future.
+ *
+ * @name ServerSysinfoRegister
+ * @endpoint POST /servers/:server_uuid/sysinfo
+ * @section Server API
+ * @param {Object} sysinfo Sysinfo Object.
+ *
+ * @response 200 None Sysinfo registration initiated
+ * @response 500 None Error while processing request
+ */
+/* END JSSTYLED */
+
+Server.sysinfoRegister = function handlerServerSysinfoRegister(req, res, next) {
+    var newSysinfo;
+    var rules = {
+        'server_uuid': ['isStringType'],
+        'sysinfo': ['isObjectType']
+    };
+    var server_uuid;
+
+    if (validation.ensureParamsValid(req, res, rules, { strict: true })) {
+        next();
+        return;
+    }
+
+    newSysinfo = req.params.sysinfo;
+    server_uuid = req.params.server_uuid;
+
+    req.log.info({
+        server_uuid: server_uuid,
+        sysinfo: newSysinfo
+    }, 'registering sysinfo for server');
+
+    ModelServer.getApp().onSysinfoReceived(server_uuid, newSysinfo,
+        function onSysinfoUpdated(err) {
+            if (err) {
+                req.log.error({
+                    err: err,
+                    server_uuid: server_uuid,
+                    sysinfo: newSysinfo
+                }, 'failed to update sysinfo');
+            } else {
+                req.log.info({
+                    server_uuid: server_uuid
+                }, 'successsfully updated sysinfo');
+                res.send(200);
+            }
+            next(err);
+        });
+};
+
 /* BEGIN JSSTYLED */
 /**
  * Fetch a given server's sysinfo values and store them in the server object.
@@ -1176,6 +1233,18 @@ function attachTo(http, app) {
         }),
         Server.sysinfoRefresh);
 
+    // Register server sysinfo
+    http.post({
+        path: '/servers/:server_uuid/sysinfo',
+        name: 'ServerSysinfoRegister' },
+        ensure({
+            connectionTimeoutSeconds: 60 * 60,
+            app: app,
+            prepopulate: [],
+            connected: ['moray', 'workflow']
+        }),
+        Server.sysinfoRegister);
+
     // Factory-reset server
     http.put({
         path: '/servers/:server_uuid/factory-reset',
diff --git a/package.json b/package.json
index ebfc4dd..602a399 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.5.1",
+  "version": "1.6.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
