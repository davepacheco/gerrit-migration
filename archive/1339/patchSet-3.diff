commit 2f40b764d67d8f54cef51f3c6c6136c1f3dc3d3e (refs/changes/39/1339/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-01-27T22:33:34+00:00 (2 years, 8 months ago)
    
    ZAPI-751 add-nics workflow should set the cn_uuid of the new NIC
    ZAPI-764 Provisioning fabric NATs broken by VMAPI initialization changes

diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..9600c7e 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit 9600c7e56c84f3a74d6e3d70c336e86f7a3e3769
diff --git a/lib/common/validation.js b/lib/common/validation.js
index 1a56cad..374db7c 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -2276,15 +2276,15 @@ exports.validateMacs = function (params) {
  * RAM or disk for example
  */
 exports.setDefaultValues = function (params, options) {
-    var config = {};
-    var i;
+    assert.object(options, 'options');
+    assert.object(options.config, 'options.config');
+    assert.optionalObject(options.config.overlay, 'options.config.overlay');
 
-    if (options && options.config) {
-        config = options.config;
+    var config = options.config;
+    var i;
 
-        if (config.overlay.natPool) {
-            params.sdc_nat_pool = config.overlay.natPool;
-        }
+    if (config.overlay && config.overlay.enabled) {
+        params.sdc_nat_pool = config.overlay.natPool;
     }
 
     if (params.uuid === undefined) {
@@ -2337,7 +2337,7 @@ exports.setDefaultValues = function (params, options) {
         // Set a default refreservation for i > 0 disks
         for (i = 1; i < params.disks.length; i++) {
             if (params.disks[i].refreservation === undefined) {
-                if (config && config.reserveKvmStorage === false) {
+                if (config.reserveKvmStorage === false) {
                     params.disks[i].refreservation = 0;
                 } else {
                     params.disks[i].refreservation = params.disks[i].size;
diff --git a/lib/vmapi.js b/lib/vmapi.js
index 079921b..60e72fa 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -52,6 +52,15 @@ function VMAPI(options) {
     assert.object(options, 'options');
     assert.optionalObject(options.log, 'options.log');
 
+    // Fabric options
+    assert.optionalObject(options.overlay, 'options.overlay');
+    if (options.overlay) {
+        assert.bool(options.overlay.enabled, 'options.overlay.enabled');
+        if (options.overlay.enabled) {
+            assert.uuid(options.overlay.natPool, 'options.overlay.natPool');
+        }
+    }
+
     assert.optionalObject(options.apiClients, 'options.apiClients');
     if (options.apiClients) {
         assert.optionalObject(options.apiClients.wfapi,
@@ -90,6 +99,7 @@ function VMAPI(options) {
         this.log = options.log;
     }
 
+    this.options = options;
     this.changefeedOptions = options.changefeed;
 
     validations.init(options);
diff --git a/lib/workflows/add-nics.js b/lib/workflows/add-nics.js
index 8c3d8ac..b7ac403 100644
--- a/lib/workflows/add-nics.js
+++ b/lib/workflows/add-nics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -21,7 +21,7 @@
 
 var async;  // stub to keep jsl happy
 var common = require('./job-common');
-var VERSION = '7.0.11';
+var VERSION = '7.1.0';
 
 
 /*
diff --git a/lib/workflows/fabric-common.js b/lib/workflows/fabric-common.js
index 0ded893..cf87053 100644
--- a/lib/workflows/fabric-common.js
+++ b/lib/workflows/fabric-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -143,7 +143,7 @@ function acquireFabricTickets(job, cb) {
             if (sErr) {
                 cb(sErr);
             } else {
-                cb(null, 'Fabric nat tickets acquired');
+                cb(null, 'Fabric NAT tickets acquired');
             }
         });
     });
@@ -163,7 +163,7 @@ function provisionFabricNats(job, cb) {
     }
 
     if (!job.params.sdc_nat_pool) {
-        return cb(null, 'No fabric NAT pool configured for provisioning');
+        return cb(new Error('No fabric NAT pool configured for provisioning'));
     }
 
     var cnapi = new sdcClients.CNAPI({
diff --git a/lib/workflows/job-common.js b/lib/workflows/job-common.js
index 45a91ee..9e2321d 100644
--- a/lib/workflows/job-common.js
+++ b/lib/workflows/job-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -675,6 +675,9 @@ function validateNetworks(job, cb) {
  * don't provision any new NICs.
  */
 function provisionNics(job, cb) {
+    var inst_uuid = job.params.uuid || job.params.vm_uuid;
+    var owner_uuid = job.params.owner_uuid;
+
     var networks = job.params.networks;
     if (networks === undefined) {
         cb('Networks are required');
@@ -706,9 +709,10 @@ function provisionNics(job, cb) {
     // accidentally reusing an object
     function nicParams() {
         return {
-            owner_uuid: job.params.owner_uuid,
-            belongs_to_uuid: job.params.uuid || job.params.vm_uuid,
-            belongs_to_type: 'zone'
+            owner_uuid: owner_uuid,
+            belongs_to_uuid: inst_uuid,
+            belongs_to_type: 'zone',
+            cn_uuid: job.params.server_uuid
         };
     }
 
@@ -721,16 +725,30 @@ function provisionNics(job, cb) {
         }
     }
 
-    // Get current list of NICs that might have been provisioned ahead of time
-    napi.listNics(nicParams(), function (err, res) {
+    var antiSpoofParams = [
+        'allow_dhcp_spoofing',
+        'allow_ip_spoofing',
+        'allow_mac_spoofing',
+        'allow_restricted_traffic'
+    ];
+
+    /*
+     * Get current list of NICs that might have been provisioned ahead of time.
+     * This is done in some places when an IP address needs to be known ahead
+     * of time. For example, Zookeeper instances in Manta have their NICs
+     * created before provisioning instances, so that they can be configured
+     * to know each other's addresses before booting.
+     */
+    napi.listNics({
+        owner_uuid: owner_uuid,
+        belongs_to_uuid: inst_uuid,
+        belongs_to_type: 'zone'
+    }, function asyncProvisionNics(err, currentNics) {
         if (err) {
             cb(err);
             return;
         }
-        return asyncProvisionNics(res);
-    });
 
-    function asyncProvisionNics(currentNics) {
         async.mapSeries(networks, function (network, next) {
             // If there is at least one provisioned NIC in one of the networks
             // provided, skip napi.provisionNic for this network
@@ -745,10 +763,7 @@ function provisionNics(job, cb) {
                 return;
             }
 
-            var antiSpoofParams = ['allow_dhcp_spoofing', 'allow_ip_spoofing',
-                'allow_mac_spoofing', 'allow_restricted_traffic'];
             var params = nicParams();
-            params.cn_uuid = job.params.server_uuid;
             if (network.ipv4_ips !== undefined)
                 params.ip = network.ipv4_ips[0];
             if (network.primary !== undefined)
@@ -780,7 +795,8 @@ function provisionNics(job, cb) {
                 cb(null, 'NICs allocated');
             }
         });
-    }
+    });
+
 }
 
 
@@ -836,6 +852,7 @@ function addNics(job, cb) {
                 owner_uuid: job.params.owner_uuid,
                 belongs_to_uuid: job.params.uuid || job.params.vm_uuid,
                 belongs_to_type: 'zone',
+                cn_uuid: job.params.server_uuid,
                 state: 'provisioning'
             };
 
diff --git a/lib/workflows/provision.js b/lib/workflows/provision.js
index 8a1e27b..f4ad1a0 100644
--- a/lib/workflows/provision.js
+++ b/lib/workflows/provision.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -19,7 +19,7 @@ var common = require('./job-common');
 var childProcess = require('child_process');
 var wfapiUrl;
 
-var VERSION = '7.3.1';
+var VERSION = '7.4.0';
 
 
 /*
diff --git a/sapi_manifests/vmapi/template b/sapi_manifests/vmapi/template
index 8af9d37..7c57f13 100644
--- a/sapi_manifests/vmapi/template
+++ b/sapi_manifests/vmapi/template
@@ -18,7 +18,11 @@
     },
     "overlay": {
 {{#fabric_cfg}}
+        "enabled": true,
         "natPool": "{{{sdc_nat_pool}}}"
+{{/fabric_cfg}}
+{{^fabric_cfg}}
+        "enabled": false
 {{/fabric_cfg}}
     },
     "wfapi": {
diff --git a/server.js b/server.js
index 917e218..8bac9c3 100644
--- a/server.js
+++ b/server.js
@@ -145,7 +145,7 @@ function startVmapiService() {
         }
     ]}, function dependenciesInitDone(err) {
         if (err) {
-            vmapi.log.error({
+            vmapiLog.error({
                 error: err
             }, 'failed to initialize VMAPI\'s dependencies');
 
diff --git a/test/lib/vm.js b/test/lib/vm.js
index aec267f..88d2db5 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -35,7 +35,7 @@ function createTestVm(moray, options, vmParams, callback) {
     var log = options.log || new BunyanNoopLogger();
 
     vmParams = common.clone(vmParams);
-    common.setDefaultValues(vmParams, {});
+    common.setDefaultValues(vmParams, { config: {} });
 
     // Prefix the VM alias with a prefix that identifies
     // it as a test VM.
