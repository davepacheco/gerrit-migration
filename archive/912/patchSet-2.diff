commit c305041b73125eac67845d0e2d63cfd4dce51fae (refs/changes/12/912/2)
Author: Bryan Cantrill <bryan@joyent.com>
Date:   2016-11-18T01:26:02+00:00 (2 years, 11 months ago)
    
    TOOLS-1616 v8plus forces constructors to have exactly one argument
    TOOLS-1617 v8plus should be more readily buildable

diff --git a/CHANGES.md b/CHANGES.md
index e802ed5..5630edf 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,11 @@
 # v8plus Change History
 
+## 1.0.2
+
+Fixes a bug whereby C constructors were silently forced into having one
+(and exactly one) argument -- resulting in incorrect behavior when the
+number of arguments was zero or more than one.
+
 ## 1.0.1
 
 A minor bug fix that allows C constructors to indicate an exception without
diff --git a/examples/Makefile b/examples/Makefile
index 96c1eb2..4a18616 100644
--- a/examples/Makefile
+++ b/examples/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2012 Joyent, Inc.  All rights reserved.
+# Copyright (c) 2016 Joyent, Inc.  All rights reserved.
 #
 
 V8PLUS =	..
@@ -14,8 +14,11 @@ SRCS =	\
 
 ERRNO_JSON =	errno.json
 
-PREFIX_NODE =	/opt/local
+PREFIX_NODE =	$(shell dirname $$(bash -c 'hash node; hash -t node'))/..
 CC =		/opt/local/bin/gcc
 CXX =		/opt/local/bin/g++
 
+CTFCONVERT =	/bin/true
+CTFMERGE =	/bin/true
+
 include $(V8PLUS)/Makefile.v8plus.targ
diff --git a/examples/example.c b/examples/example.c
index 3a4df5c..e9eef26 100644
--- a/examples/example.c
+++ b/examples/example.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright (c) 2016 Joyent, Inc.  All rights reserved.
  */
 
 #include <sys/ccompile.h>
@@ -60,7 +60,7 @@ example_set_impl(example_t *ep, nvpair_t *pp)
 static nvlist_t *
 example_ctor(const nvlist_t *ap, void **epp)
 {
-	nvpair_t *pp;
+	nvpair_t *pp = NULL;
 	example_t *ep;
 
 	if (v8plus_args(ap, V8PLUS_ARG_F_NOEXTRA, V8PLUS_TYPE_NONE) != 0 &&
@@ -71,7 +71,9 @@ example_ctor(const nvlist_t *ap, void **epp)
 	if ((ep = malloc(sizeof (example_t))) == NULL)
 		return (v8plus_error(V8PLUSERR_NOMEM, NULL));
 
-	(void) example_set_impl(ep, pp);
+	if (pp != NULL)
+		(void) example_set_impl(ep, pp);
+
 	if (v8plus_exception_pending()) {
 		free(ep);
 		return (NULL);
diff --git a/package.json b/package.json
index 2b92e16..ce6d62f 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
 	"author": "Keith 'The Mayor' Wesolowski <keith.wesolowski@joyent.com>",
 	"name": "v8plus",
 	"description": "utility environment for writing addons in C",
-	"version": "1.0.1",
+	"version": "1.0.2",
 	"contributors": [
 		"Joshua M. Clulow <jmc@joyent.com>",
 		"Bryan Cantrill <bryan@joyent.com>"
diff --git a/v8plus_objectwrap.cc b/v8plus_objectwrap.cc
index 62cd05a..1c842b4 100644
--- a/v8plus_objectwrap.cc
+++ b/v8plus_objectwrap.cc
@@ -256,8 +256,12 @@ V8_JS_FUNC_DEFN(v8plus::ObjectWrap::cons, args)
 	v8::Local<v8::External> ext = data.As<v8::External>();
 	v8plus_func_ctx_t* fcp =
 	    reinterpret_cast<v8plus_func_ctx_t *>(ext->Value());
-	const unsigned argc = 1;
-	v8::Handle<v8::Value> argv[argc] = { args[0] };
+	const unsigned argc = args.Length();
+	v8::Handle<v8::Value> argv[argc];
+
+	for (unsigned i = 0; i < argc; i++)
+		argv[i] = args[i];
+
 	v8::Local<v8::Object> instance =
 	    V8_LOCAL(fcp->vfc_ctor, v8::Function)->NewInstance(argc, argv);
 
diff --git a/v8plus_subr.cc b/v8plus_subr.cc
index c353d7e..a5c0f56 100644
--- a/v8plus_subr.cc
+++ b/v8plus_subr.cc
@@ -488,7 +488,8 @@ v8plus::nvpair_to_v8_Value(ISOLATE_OR_UNUSED(iso), const nvpair_t *pp)
 		if (nv != 1)
 			v8plus_panic("bad uint64 array length %u", nv);
 		if ((it = cbhash.find(*vp)) == cbhash.end())
-			v8plus_panic("callback hash tag %llu not found", *vp);
+			v8plus_panic("callback hash tag %llu not found",
+			    (unsigned long long)*vp);
 
 		return (it->second.ch_hdl);
 	}
@@ -564,7 +565,8 @@ v8plus_call_direct(v8plus_jsfunc_t f, const nvlist_t *lp)
 	DECLARE_ISOLATE_FROM_CURRENT(iso);
 
 	if ((it = cbhash.find(f)) == cbhash.end())
-		v8plus_panic("callback hash tag %llu not found", f);
+		v8plus_panic("callback hash tag %llu not found",
+		    (unsigned long long)f);
 
 	argc = max_argc;
 	nvlist_to_v8_argv(ISOLATE_OR_NULL(iso), lp, &argc, argv);
@@ -654,7 +656,8 @@ v8plus_jsfunc_hold(v8plus_jsfunc_t f)
 	std::unordered_map<uint64_t, cb_hdl_t>::iterator it;
 
 	if ((it = cbhash.find(f)) == cbhash.end())
-		v8plus_panic("callback hash tag %llu not found", f);
+		v8plus_panic("callback hash tag %llu not found",
+		    (unsigned long long)f);
 
 	if (!it->second.ch_persist) {
 		V8_PF_ASSIGN(it->second.ch_phdl, it->second.ch_hdl);
@@ -676,10 +679,12 @@ v8plus_jsfunc_rele_direct(v8plus_jsfunc_t f)
 	std::unordered_map<uint64_t, cb_hdl_t>::iterator it;
 
 	if ((it = cbhash.find(f)) == cbhash.end())
-		v8plus_panic("callback hash tag %llu not found", f);
+		v8plus_panic("callback hash tag %llu not found",
+		    (unsigned long long)f);
 
 	if (it->second.ch_refs == 0)
-		v8plus_panic("releasing unheld callback hash tag %llu", f);
+		v8plus_panic("releasing unheld callback hash tag %llu",
+		    (unsigned long long)f);
 
 	if (--it->second.ch_refs == 0) {
 		if (it->second.ch_persist) {
