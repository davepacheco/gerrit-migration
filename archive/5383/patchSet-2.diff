From f7d83171e1ad5401209296c2380cc5da87155778 Mon Sep 17 00:00:00 2001
From: Isaac Davis <isaac.davis@joyent.com>
Date: Thu, 17 Jan 2019 23:41:57 +0000
Subject: [PATCH] TRITON-1090 Want auto.TRITON_APPLICATION and
 auto.MANTA_APPLICATION boolean variables in config-agent templates

---
 CHANGES.md         | 11 ++++--
 README.md          |  4 ++
 agent.js           | 43 +++++++++++++++-----
 lib/agent/agent.js | 98 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 144 insertions(+), 12 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 9ef9fe4..7597255 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,13 +1,18 @@
 # sdc-config-agent changelog
 
+## 1.9.0
+
+- [TRITON-1090] Add support for `auto.TRITON_APPLICATION` and
+  `auto.MANTA_APPLICATION`
+
 ## 1.8.1
 
-- TRITON-691 update config-agent's node to v6
+- [TRITON-691] update config-agent's node to v6
 
 ## 1.8.0
 
-- TRITON-508 config-agent autometadata should contain an array of IPs for each nic
-- TRITON-509 config-agent should use `<tag>_rack_<rackid>` as rack aware namespace
+- [TRITON-508] config-agent autometadata should contain an array of IPs for each nic
+- [TRITON-509] config-agent should use `<tag>_rack_<rackid>` as rack aware namespace
 
 ## 1.7.1
 
diff --git a/README.md b/README.md
index 986f01b..9cda188 100644
--- a/README.md
+++ b/README.md
@@ -37,3 +37,7 @@ about the local environment. They are:
   template config-agent is rendering
 - `auto.<TAG>_IP`, the IP address on the NIC with tag `<TAG>` or `<TAG>_RACK<NUM>`
 - `auto.PRIMARY_IP`, in a zone, this is the IP address of the primary NIC
+- `auto.TRITON_APPLICATION`, `true` if the instance is part of the Triton SAPI
+  application; `false` otherwise.
+- `auto.MANTA_APPLICATION`, `true` if the instance is part of the Manta SAPI
+  application; `false` otherwise.
diff --git a/agent.js b/agent.js
index e2ee3e7..120b316 100644
--- a/agent.js
+++ b/agent.js
@@ -24,6 +24,9 @@ var jsprim = require('jsprim');
 var optimist = require('optimist');
 var util = require('./lib/common/util');
 var vasync = require('vasync');
+var mod_verror = require('verror');
+
+var VError = mod_verror.VError;
 
 var Agent = require('./lib/agent/agent');
 
@@ -296,6 +299,27 @@ function setInZoneAutoMetadata(callback) {
 
 					cb();
 				});
+			},
+			function getApplicationMembershipIZ(_, cb) {
+				agent.getApplicationName(function (err, name) {
+					if (err) {
+						cb(err);
+						return;
+					}
+					if (name === 'sdc') {
+						autoMetadata.TRITON_APPLICATION = true;
+						autoMetadata.MANTA_APPLICATION = false;
+						cb();
+						return;
+					} else if (name === 'manta') {
+						autoMetadata.TRITON_APPLICATION = false;
+						autoMetadata.MANTA_APPLICATION = true;
+						cb();
+						return;
+					}
+
+					cb(new VError('Unrecognized application name: %s', name));
+				});
 			}
 		]
 	}, function doneInZoneAutoMetadata(err) {
@@ -327,6 +351,16 @@ async.waterfall([
 		});
 	},
 
+	function createAgent(cb) {
+		agent = new Agent(config, log);
+
+		agent.init(function (err) {
+			if (err)
+				log.error(err, 'failed to initialize agent');
+			return (cb(err));
+		});
+	},
+
 	function gatherAutoMetadata(cb) {
 		if (zonename === 'global') {
 			setGlobalZoneAutoMetadata(cb);
@@ -352,15 +386,6 @@ async.waterfall([
 			cb();
 		});
 	},
-	function (cb) {
-		agent = new Agent(config, log);
-
-		agent.init(function (err) {
-			if (err)
-				log.error(err, 'failed to initialize agent');
-			return (cb(err));
-		});
-	},
 	function (cb) {
 		if (ARGV.s) {
 			/*
diff --git a/lib/agent/agent.js b/lib/agent/agent.js
index 434a25b..d789494 100644
--- a/lib/agent/agent.js
+++ b/lib/agent/agent.js
@@ -428,6 +428,104 @@ Agent.prototype.checkAndRefreshInst = function checkAndRefreshInst(opts, cb) {
 	}
 };
 
+Agent.prototype.getApplicationName = function getApplicationName(callback) {
+	var self = this;
+	var parentLog = self.log;
+	var sapi = self.sapi;
+
+	/*
+	 * Walk up the sapi hierarchy until we reach the application, then get the
+	 * name.
+	 */
+	vasync.pipeline({
+		arg: {},
+		funcs: [
+			function verifyNotGlobal(_, cb) {
+				getZonename({log: parentLog},
+					function gotZonename(err, zonename) {
+					if (err) {
+						parentLog.error(err, 'failed to determine zone name ' +
+							'for getApplicationName');
+						cb(err);
+						return;
+					}
+					assert.notEqual(zonename, 'global');
+					assert.equal(self.instances.length, 1);
+					cb();
+				});
+			},
+
+			function getServiceUuid(ctx, cb) {
+				/*
+				 * self.instances is guaranteed to be of length 1 by the assert
+				 * statement above.
+				 */
+				var instanceUuid = self.instances[0];
+				var log = parentLog.child({inst: instanceUuid}, true);
+
+				log.debug('call SAPI GetInstance');
+				console.log(sapi);
+				sapi.getInstance(instanceUuid,
+					function gotInstance(err, instance) {
+					if (err) {
+						log.error(err, 'SAPI GetInstance error');
+						cb(err);
+						return;
+					}
+					log.trace({instance: instance}, 'SAPI GetInstance result');
+					ctx.serviceUuid = instance.service_uuid;
+					cb();
+				});
+			},
+
+			function getAppUuid(ctx, cb) {
+				var serviceUuid = ctx.serviceUuid;
+				var log = parentLog.child({svc: serviceUuid}, true);
+
+				log.debug('call SAPI GetService');
+				sapi.getService(serviceUuid,
+					function gotService(err, service) {
+					if (err) {
+						log.error(err, 'SAPI GetService error');
+						cb(err);
+						return;
+					}
+					log.trace({service: service}, 'SAPI GetService result');
+					ctx.applicationUuid = service.application_uuid;
+					cb();
+				});
+			},
+
+			function getAppName(ctx, cb) {
+				var applicationUuid = ctx.applicationUuid;
+				var log = parentLog.child({app: applicationUuid}, true);
+
+				log.debug('call SAPI GetApplication');
+				sapi.getApplication(applicationUuid,
+					function gotApp(err, application) {
+					if (err) {
+						log.error(err, 'SAPI GetApplication error');
+						cb(err);
+						return;
+					}
+					log.trace({application: application},
+						'SAPI GetApplication result');
+					cb(null, application.name);
+				});
+			}
+		]
+	}, function gotAppName(err, results) {
+		if (err) {
+			callback(err);
+			return;
+		}
+		// We've returned the name as the last result in the pipeline above.
+		var name = results.successes.pop();
+		parentLog.info('Got application name: %s', name);
+		callback(err, name);
+	});
+};
+
 /*
  * Look through a list of directories for subdirs named "sapi_manifests".
  */
-- 
2.21.0

