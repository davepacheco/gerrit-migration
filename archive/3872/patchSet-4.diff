commit 1c5cbf8cb02eaf78d83c71a3d6acfff535efd466 (refs/changes/72/3872/4)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-04-26T23:16:32+00:00 (1 year, 5 months ago)
    
    TRITON-346 Private subnet checks are imperfect
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>
    Approved by: Alex Wilson <alex.wilson@joyent.com>

diff --git a/lib/models/network.js b/lib/models/network.js
index 49e3c1d..fa4a21e 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -884,12 +884,12 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
     }
 
     if (parsedParams.fabric) {
-        if (subnetType === 'ipv4' && !util_ip.isRFC1918(subnetStart)) {
+        if (subnetType === 'ipv4' && !util_ip.isRFC1918(subnet)) {
             callback(errors.invalidParam('subnet',
                 constants.PRIV_RANGE_ONLY));
             return;
         }
-        if (subnetType === 'ipv6' && !util_ip.isUniqueLocal(subnetStart)) {
+        if (subnetType === 'ipv6' && !util_ip.isUniqueLocal(subnet)) {
             callback(errors.invalidParam('subnet',
                 constants.PRIV_RANGE_ONLY));
             return;
@@ -907,8 +907,8 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
          * a network operator could construct a number of private networks on
          * completely separate physical networks.
          */
-        if (util_ip.isRFC1918(subnetStart) ||
-            util_ip.isUniqueLocal(subnetStart)) {
+        if (util_ip.isRFC1918(subnet) ||
+            util_ip.isUniqueLocal(subnet)) {
             callback();
             return;
         }
diff --git a/lib/util/ip.js b/lib/util/ip.js
index 7a38cc9..f7e79b7 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -133,23 +133,27 @@ var RFC1918Subnets = [
  */
 var UniqueLocalSubnet = ipaddr.createCIDR('fd00::', 8);
 
+function isNestedSubnet(s1, s2) {
+    return s1.contains(s2.address()) && s1.prefixLength() <= s2.prefixLength();
+}
 
 /*
- * Returns true if the IP passed in is in any of the RFC1918 private
- * address spaces
+ * Returns true if the subnet passed in lies within any of the RFC1918 private
+ * address spaces.
  */
-function isRFC1918(ip) {
-    return RFC1918Subnets.some(function (subnet) {
-        return subnet.contains(ip);
+function isRFC1918(subnet) {
+    return RFC1918Subnets.some(function (privsub) {
+        return isNestedSubnet(privsub, subnet);
     });
 }
 
 
 /*
- * Returns true if the IP passed in is an IPv6 Unique Local Address
+ * Returns true if the subnet passed in is nested within the IPv6 Unique Local
+ * Address range.
  */
-function isUniqueLocal(ip) {
-    return UniqueLocalSubnet.contains(ip);
+function isUniqueLocal(subnet) {
+    return isNestedSubnet(UniqueLocalSubnet, subnet);
 }
 
 
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index fe98b73..2186710 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -794,6 +794,25 @@ test('Create IPv4 fabric network - non-private subnet', function (t) {
     });
 });
 
+test('Create IPv4 fabric network - non-private subnet', function (t) {
+    mod_net.create(t, {
+        params: h.validNetworkParams({
+            fabric: true,
+            owner_uuids: [ mod_uuid.v4() ],
+            provision_start_ip: '192.168.0.1',
+            provision_end_ip: '192.168.0.254',
+            subnet: '192.168.0.0/15'
+        }),
+        expCode: 422,
+        expErr: h.invalidParamErr({
+            errors: [
+                mod_err.invalidParam('subnet', constants.PRIV_RANGE_ONLY)
+            ]
+        })
+    });
+});
+
+
 
 test('Create IPv6 fabric network - non-private subnet', function (t) {
     mod_net.create(t, {
diff --git a/test/unit/util-ip.test.js b/test/unit/util-ip.test.js
index 13f3a2c..4e27cba 100644
--- a/test/unit/util-ip.test.js
+++ b/test/unit/util-ip.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -14,10 +14,12 @@
 
 'use strict';
 
+var ip6addr = require('ip6addr');
 var IP = require('../../lib/util/ip');
 var test = require('tape');
 var util = require('util');
 
+var s = ip6addr.createCIDR;
 
 
 test('addressToNumber / numberToAddress - valid', function (t) {
@@ -274,15 +276,18 @@ test('compareTo', function (t) {
 
 test('isRFC1918', function (t) {
     var valid = [
-        '10.0.0.0',
-        '10.3.2.1',
-        '10.255.255.255',
-        '172.16.0.0',
-        '172.17.17.17',
-        '172.31.255.255',
-        '192.168.0.0',
-        '192.168.20.20',
-        '192.168.255.255'
+        s('10.0.0.0/8'),
+        s('10.3.2.0/24'),
+        s('10.255.255.0/24'),
+        s('10.255.255.255/32'),
+        s('172.16.0.0/16'),
+        s('172.16.0.0/12'),
+        s('172.17.17.17/32'),
+        s('172.31.255.255/32'),
+        s('192.168.0.0/16'),
+        s('192.168.0.0/24'),
+        s('192.168.20.20/32'),
+        s('192.168.255.255/32')
     ];
 
     t.test('valid', function (t2) {
@@ -296,16 +301,17 @@ test('isRFC1918', function (t) {
 
 
     var invalid = [
-        'fc00:5de::243',
-        'fd00::1',
-        'fd05:a:b:c::167',
-        '9.255.255.255',
-        '11.0.0.0',
-        '172.15.255.255',
-        '172.32.0.0',
-        '192.167.255.255',
-        '192.169.0.0',
-        '8.8.8.8'
+        s('fc00:5de::/64'),
+        s('fd00::1/128'),
+        s('fd05:a:b:c::167/128'),
+        s('9.255.255.255/32'),
+        s('11.0.0.0/8'),
+        s('172.15.255.0/24'),
+        s('172.32.0.0/16'),
+        s('192.167.255.0/24'),
+        s('192.168.0.0/15'),
+        s('192.169.0.0/16'),
+        s('8.8.8.8/32')
     ];
 
     t.test('invalid', function (t2) {
@@ -320,11 +326,13 @@ test('isRFC1918', function (t) {
 
 test('isUniqueLocal', function (t) {
     var valid = [
-        'fd00::1',
-        'fd05:a:b:c::167',
-        'fd34::20e',
-        'fd5e::1f',
-        'fddd::40e'
+        s('fd00::/8'),
+        s('fd00::/16'),
+        s('fd00::/64'),
+        s('fd05:a:b:c::167/128'),
+        s('fd34::20e:0/112'),
+        s('fd5e::1f/128'),
+        s('fddd::40e/128')
     ];
 
     t.test('valid', function (t2) {
@@ -339,21 +347,25 @@ test('isUniqueLocal', function (t) {
 
     var invalid = [
         // Invalid for now, since fc00::/8 is unallocated:
-        'fc00:5de::243',
-        'fc02::a:b:c:d',
-        'fcff::20',
+        s('fc00::/7'),
+        s('fc00::/8'),
+        s('fc00:5de::243/128'),
+        s('fc02::a:b:c:d/128'),
+        s('fcff::20/128'),
 
         // Always invalid:
-        '2001:4860:4860::8888',
-        'fe00::1',
-        'fb00::20',
-        'a:b:c:d::20',
-        '123:456:789:0:0:987:654:321',
-        'fe80::92b8:d0ff:fe4b:c73b',
-        '::1',
-        '1.2.3.4',
-        '10.10.10.5',
-        '192.168.1.1'
+        s('2001:4860:4860::8888/128'),
+        s('fe00::/16'),
+        s('fe00::/64'),
+        s('fb00::20/128'),
+        s('a:b:c:d::/64'),
+        s('123:456:789:0:0:987:654:321/128'),
+        s('fe80::92b8:d0ff:fe4b:c73b/128'),
+        s('::/0'),
+        s('::1/128'),
+        s('1.2.3.4/32'),
+        s('10.10.10.5/32'),
+        s('192.168.1.1/32')
     ];
 
     t.test('invalid', function (t2) {
