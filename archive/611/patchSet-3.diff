commit 7d0b4b7dedc7c36ba1eec23394d009567b6ef35a (refs/changes/11/611/3)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-10-07T11:35:30-07:00 (3 years ago)
    
    IMGAPI-587 get IMGAPI working with node v4
    Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index e1a7d35..9761923 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # IMGAPI changelog
 
+## 3.1.0
+
+- Updates to support using node v4 (IMGAPI-587).
+
 ## 3.0.0
 
 This is a major ver bump because there was a significant re-write of
diff --git a/Makefile b/Makefile
index 2c28c42..061d9d1 100644
--- a/Makefile
+++ b/Makefile
@@ -33,7 +33,7 @@ SMF_MANIFESTS = $(shell ls smf/manifests/*.xml)
 NODEUNIT	:= ./node_modules/.bin/nodeunit
 CLEAN_FILES += ./node_modules
 
-NODE_PREBUILT_VERSION=v0.12.16
+NODE_PREBUILT_VERSION=v4.6.0
 ifeq ($(shell uname -s),SunOS)
 	NODE_PREBUILT_TAG=zone
 	# Allow building on other than image sdc-minimal-multiarch-lts@15.4.1.
diff --git a/lib/app.js b/lib/app.js
index c23cfc5..b08015a 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -227,7 +227,7 @@ function getAuthMiddleware(app, config, passive) {
 /**
  * Modified restify.formatters.json.formatJSON to indent-2 JSON from IMGAPI.
  */
-function formatJSON(req, res, body) {
+function formatJSON(req, res, body, cb) {
     if (body instanceof Error) {
         // snoop for RestError or HttpError, but don't rely on
         // instanceof
@@ -245,7 +245,7 @@ function formatJSON(req, res, body) {
 
     var data = JSON.stringify(body, null, 2);
     res.setHeader('Content-Length', Buffer.byteLength(data));
-    return (data);
+    cb(null, data);
 }
 
 
@@ -479,7 +479,7 @@ App.prototype.setup = function (callback) {
     var self = this;
     var log = this.log;
 
-    // ufdsClient is still needed for app.ufdsClient.getUser
+    // ufdsClient is needed for app.ufdsClient.getUserEx
     if (self.config.ufds) {
         var ufdsConfig = utils.objCopy(self.config.ufds);
         ufdsConfig.log = self.log.child({'ufdsClient': true}, true);
diff --git a/lib/config.js b/lib/config.js
index 88a0ee7..2066bc2 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -67,9 +67,9 @@ function dottedLookup(obj, str, c) {
 
 
 function validateConfigSync(config) {
-    assert.number(config.port, 'config.port');
+    assert.finite(config.port, 'config.port');
     assert.string(config.address, 'config.address');
-    assert.number(config.maxSockets, 'config.maxSockets');
+    assert.finite(config.maxSockets, 'config.maxSockets');
     assert.optionalString(config.serverName, 'config.serverName');
 
     assert.string(config.mode, 'config.mode');
@@ -87,7 +87,7 @@ function validateConfigSync(config) {
 
         assert.object(config.moray, 'config.moray');
         assert.string(config.moray.host, 'config.moray.host');
-        assert.number(config.moray.port, 'config.moray.port');
+        assert.finite(config.moray.port, 'config.moray.port');
 
         assert.object(config.wfapi, 'config.wfapi');
         assert.string(config.wfapi.url, 'config.wfapi.url');
diff --git a/lib/database.js b/lib/database.js
index 8732f69..9057038 100644
--- a/lib/database.js
+++ b/lib/database.js
@@ -21,8 +21,8 @@ var path = require('path');
 var fs = require('fs');
 
 var assert = require('assert-plus');
-var filters = require('ldapjs').filters;
 var async = require('async');
+var mod_ldapFilter = require('ldap-filter');
 var mkdirp = require('mkdirp');
 var rimraf = require('rimraf');
 
@@ -629,7 +629,7 @@ MorayDatabase.prototype.search = function (options, callback) {
     var filter = options.filter;
     log.trace({ options: options }, 'MorayDatabase.options');
 
-    // Build the ldapjs filter.
+    // Build the ldap filter.
     var ldapFilter = null;
     var findOpts = {};
 
@@ -637,33 +637,33 @@ MorayDatabase.prototype.search = function (options, callback) {
     if (fields.length === 0) {
         /*jsl:pass*/
     } else {
-        ldapFilter = new filters.AndFilter();
+        ldapFilter = new mod_ldapFilter.AndFilter();
         for (var i = 0; i < fields.length; i++) {
             var field = fields[i];
             var value = filter[field];
             if (value === undefined)
                 continue;
             if (field === 'expires_at') {
-                ldapFilter.addFilter(new filters.LessThanEqualsFilter(
+                ldapFilter.addFilter(new mod_ldapFilter.LessThanEqualsFilter(
                     {attribute: field, value: value}));
                 continue;
             }
             switch (SEARCH_TYPE_FROM_FIELD[field]) {
             case 'str':
-                ldapFilter.addFilter(new filters.EqualityFilter(
+                ldapFilter.addFilter(new mod_ldapFilter.EqualityFilter(
                         {attribute: field, value: value}));
                 break;
             case '!str':
                 if (value && value[0] === '!') {
                     // Invert
-                    ldapFilter.addFilter(new filters.NotFilter({
-                        filter: new filters.EqualityFilter({
+                    ldapFilter.addFilter(new mod_ldapFilter.NotFilter({
+                        filter: new mod_ldapFilter.EqualityFilter({
                             attribute: field,
                             value: value.slice(1)
                         })
                     }));
                 } else {
-                    ldapFilter.addFilter(new filters.EqualityFilter(
+                    ldapFilter.addFilter(new mod_ldapFilter.EqualityFilter(
                             {attribute: field, value: value}));
                 }
                 break;
@@ -682,30 +682,32 @@ MorayDatabase.prototype.search = function (options, callback) {
                 for (var j = 0; j < value.length; j++) {
                     alength = value[j].split('=').length;
                     if (alength == 1) {
-                        ldapFilter.addFilter(new filters.EqualityFilter(
+                        ldapFilter.addFilter(new mod_ldapFilter.EqualityFilter(
                             {attribute: field, value: value[j]}));
                     } else if (alength >= 2) {
                         if (value[j].split('=')[1] === '') {
-                            ldapFilter.addFilter(new filters.SubstringFilter(
-                                {attribute: field, initial: value[j]}));
+                            ldapFilter.addFilter(
+                                new mod_ldapFilter.SubstringFilter(
+                                    {attribute: field, initial: value[j]}));
                         } else {
-                            ldapFilter.addFilter(new filters.EqualityFilter(
-                                {attribute: field, value: value[j]}));
+                            ldapFilter.addFilter(
+                                new mod_ldapFilter.EqualityFilter(
+                                    {attribute: field, value: value[j]}));
                         }
                     }
                 }
                 break;
             case 'bool':
-                ldapFilter.addFilter(new filters.EqualityFilter(
+                ldapFilter.addFilter(new mod_ldapFilter.EqualityFilter(
                     {attribute: field, value: value.toString()}));
                 break;
             case '~str':
                 if (value[0] === '~') {
-                    ldapFilter.addFilter(new filters.SubstringFilter(
+                    ldapFilter.addFilter(new mod_ldapFilter.SubstringFilter(
                         {attribute: field, initial: '',
                          any: [value.slice(1)]}));
                 } else {
-                    ldapFilter.addFilter(new filters.EqualityFilter(
+                    ldapFilter.addFilter(new mod_ldapFilter.EqualityFilter(
                         {attribute: field, value: value}));
                 }
                 break;
@@ -718,9 +720,9 @@ MorayDatabase.prototype.search = function (options, callback) {
         if (options.marker) {
             var filterClass;
             if (options.sort.order === 'ASC' || options.sort.order === 'asc') {
-                filterClass = filters.GreaterThanEqualsFilter;
+                filterClass = mod_ldapFilter.GreaterThanEqualsFilter;
             } else {
-                filterClass = filters.LessThanEqualsFilter;
+                filterClass = mod_ldapFilter.LessThanEqualsFilter;
             }
             ldapFilter.addFilter(new filterClass(
                 { attribute: 'published_at', value: String(options.marker) }));
@@ -732,7 +734,7 @@ MorayDatabase.prototype.search = function (options, callback) {
 
         // When all fields have an undefined value
         if (!ldapFilter.filters.length) {
-            ldapFilter = new filters.PresenceFilter({ attribute: 'uuid' });
+            ldapFilter = new mod_ldapFilter.PresenceFilter({attribute: 'uuid'});
         }
     }
 
diff --git a/lib/images.js b/lib/images.js
index 75aabbc..66b7845 100644
--- a/lib/images.js
+++ b/lib/images.js
@@ -27,7 +27,7 @@ var imgmanifest = require('imgmanifest');
 var lib_uuid = require('uuid');
 var once = require('once');
 var restify = require('restify');
-var sdc = require('sdc-clients');
+var sdcClients = require('sdc-clients');
 var vasync = require('vasync');
 
 var channels = require('./channels');
@@ -638,7 +638,7 @@ function createImportImageJob(req, uuid, source, skipOwnerCheck, log, cb) {
         return cb(new errors.ServiceUnavailableError('Workflow API is down.'));
     }
 
-    var client = new sdc.IMGAPI(utils.commonHttpClientOpts({
+    var client = new sdcClients.IMGAPI(utils.commonHttpClientOpts({
         url: source,
         log: log
     }, req));
@@ -1777,7 +1777,8 @@ function apiCreateImageFromVm(req, res, callback) {
     async.waterfall([
         // Ensure the vm is on a CN with sufficient platform (IMGAPI-298).
         function getVmServer(next) {
-            var vmapi = new sdc.VMAPI({url: app.config.vmapi.url, log: log});
+            var vmapi = new sdcClients.VMAPI(
+                {url: app.config.vmapi.url, log: log});
             var params = {uuid: vmUuid, owner_uuid: account};
             var opts = {headers: {'x-request-id': req.getId()}};
             vmapi.getVm(params, opts, function (err, vm_) {
@@ -1797,7 +1798,8 @@ function apiCreateImageFromVm(req, res, callback) {
                 function (s) { return Number(s); });
             minVerObj.push(minVer[1]);
 
-            var cnapi = new sdc.CNAPI({url: app.config.cnapi.url, log: log});
+            var cnapi = new sdcClients.CNAPI(
+                {url: app.config.cnapi.url, log: log});
             var opts = {headers: {'x-request-id': req.getId()}};
             cnapi.getServer(serverUuid, opts, function (err, server) {
                 if (err) {
@@ -2209,7 +2211,7 @@ function apiAdminImportImageFromSource(req, res, cb) {
     var serialized;
     vasync.pipeline({funcs: [
         function getImageFromSource(_, next) {
-            var client = new sdc.IMGAPI(utils.commonHttpClientOpts({
+            var client = new sdcClients.IMGAPI(utils.commonHttpClientOpts({
                 url: source,
                 log: log
             }, req));
@@ -2406,7 +2408,7 @@ function _dockerDownloadAndImportImage(opts, callback) {
     assert.object(opts.ctx, 'opts.ctx');
     assert.func(callback, 'callback');
     var ctx = opts.ctx;
-    assert.number(ctx.regV, 'ctx.regV');
+    assert.finite(ctx.regV, 'ctx.regV');
     if (ctx.regV === 1) {
         assert.object(ctx.regClientV1, 'ctx.regClientV1');
     } else {
@@ -3770,7 +3772,7 @@ function apiAddImageFileFromSource(req, res, next) {
     }
 
     var uuid = req.params.uuid;
-    var client = new sdc.IMGAPI(utils.commonHttpClientOpts({
+    var client = new sdcClients.IMGAPI(utils.commonHttpClientOpts({
         url: req.query.source,
         log: req.log
     }, req));
@@ -4421,7 +4423,10 @@ function apiExportImage(req, res, callback) {
     // TODO: with RBAC v2 work this should be a check with secapi that the
     //      account can write to that area.
     if (account) {
-        app.ufdsClient.getUser(account, function (err, user) {
+        app.ufdsClient.getUserEx({
+            searchType: 'uuid',
+            value: account
+        }, function (err, user) {
             if (err) {
                 return callback(new errors.AccountDoesNotExistError(
                     err, account));
diff --git a/lib/utils.js b/lib/utils.js
index 7f6e2da..21f0f7a 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -287,7 +287,10 @@ function checkOwnerExists(opts, cb) {
 
     if (opts.app.mode === 'dc') {
         opts.app.log.debug('ensure owner "%s" exists in UFDS', opts.owner);
-        opts.app.ufdsClient.getUser(opts.owner, function (err, user) {
+        opts.app.ufdsClient.getUserEx({
+            searchType: 'uuid',
+            value: opts.owner
+        }, function (err, user) {
             if (err) {
                 return cb(new errors.OwnerDoesNotExistError(
                     err, opts.owner));
diff --git a/package.json b/package.json
index f9787f2..280820c 100644
--- a/package.json
+++ b/package.json
@@ -5,43 +5,43 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "assert-plus": "0.1.5",
+    "assert-plus": "1.0.0",
     "async": "0.7.0",
-    "bunyan": "1.3.3",
+    "bunyan": "1.8.1",
     "cmdln": "3.2.1",
     "dashdash": "1.10.0",
-    "docker-registry-client": "3.1.3",
+    "docker-registry-client": "3.2.0",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "expiring-lru-cache": "2.1.0",
     "extsprintf": "1.2.0",
     "forkexec": "1.1.0",
     "glob": "7.0.5",
     "handlebars": "4.0.5",
-    "imgmanifest": "git+ssh://git@github.com:joyent/node-imgmanifest.git#91e5d80",
+    "imgmanifest": "git+https://github.com/joyent/node-imgmanifest.git#91e5d80",
     "json": "9.0.4",
-    "ldapjs": "git+ssh://git@github.com:mcavage/node-ldapjs.git#3edf9de5786170b22581ddc87386b78e9dd5bb6a",
+    "ldap-filter": "0.3.1",
     "uuid": "2.0.2",
-    "manta": "2.0.7",
+    "manta": "3.1.2",
     "manta-dir-watcher": "1.1.0",
-    "manta-sync": "0.3.4",
+    "manta-sync": "0.4.0",
     "memorystream": "0.2.0",
     "mkdirp": "0.3.5",
-    "moray": "git+ssh://git@github.com:joyent/node-moray.git#b84ef0e",
+    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
     "nopt": "2.2.0",
     "once": "1.3.0",
     "passwd": "0.0.11",
     "posix-getopt": "1.0.0",
-    "progbar": "git+ssh://git@github.com:trentm/node-progbar.git#a4c56e6",
-    "restify": "git://github.com/joyent/node-restify.git#fd5d5b5",
+    "progbar": "git+https://github.com/trentm/node-progbar.git#a4c56e6",
+    "restify": "4.1.1",
     "rimraf": "2.2.6",
-    "sdc-clients": "9.5.0",
+    "sdc-clients": "10.0.0",
     "semver": "3.0.1",
     "sshpk": "1.10.0",
     "trace-event": "1.2.0",
-    "ufds": "git+ssh://git@github.com:joyent/node-ufds.git#a7c674b76696fe7ab0fff1e2486f20d3af6a0d1a",
+    "ufds": "1.2.0",
     "vasync": "1.6.3",
     "verror": "1.6.0",
-    "wf-client": "git+ssh://git@github.com:joyent/sdc-wf-client.git#adb8803"
+    "wf-client": "0.2.0"
   },
   "optionalDependencies": {
     "http-signature": "0.10.0"
diff --git a/tools/migrate-storage-local-to-manta.js b/tools/migrate-storage-local-to-manta.js
index a6106ff..9b50cb6 100644
--- a/tools/migrate-storage-local-to-manta.js
+++ b/tools/migrate-storage-local-to-manta.js
@@ -25,7 +25,6 @@
 var p = console.log;
 var fs = require('fs');
 var path = require('path');
-var ldap = require('ldapjs');
 var assert = require('assert-plus');
 var async = require('async');
 var passwd = require('passwd');
