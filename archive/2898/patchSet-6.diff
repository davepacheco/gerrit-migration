commit 4045c90e0bca06a85e4e91d64f98db95b40ffed3 (refs/changes/98/2898/6)
Author: Tim Kordas <tim.kordas@joyent.com>
Date:   2017-11-03T10:18:40-07:00 (1 year, 11 months ago)
    
    MORAY-452 client should use a priority-queue to assign connection.

diff --git a/lib/pool.js b/lib/pool.js
index b8203be..84e9136 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -29,8 +29,8 @@
  */
 
 var assert = require('assert-plus');
-var jsprim = require('jsprim');
 var VError = require('verror');
+var fpq = require('fastpriorityqueue');
 
 module.exports = MorayConnectionPool;
 
@@ -92,6 +92,9 @@ function MorayConnectionPool(args) {
     this.mcp_conns = {};    /* all connections */
     this.mcp_avail = {};    /* connections in service for new requests */
 
+    /* priority queue of available connections */
+    this.mcp_fpq = new fpq(function (a, b) { return (a.count < b.count); });
+
     /* Counters for debugging */
     this.mcp_nalloc_ok = 0;     /* successful allocations */
     this.mcp_nalloc_fail = 0;   /* failed allocations */
@@ -114,17 +117,36 @@ function MorayConnectionPool(args) {
  * The caller must invoke connRelease() when the request is finished.
  */
 MorayConnectionPool.prototype.connAlloc = function () {
-    var availkeys, key, mconn, aconn;
+    var entry, mconn, aconn;
 
     /*
-     * There are more sophisticated ways to pick a connection (e.g., store
-     * connections in a priority queue by number of outstanding requests).  But
-     * our expectation is that Moray servers are pretty uniform, Moray requests
-     * are pretty uniform in their cost on the server, and so a random
-     * distribution is likely to be reasonable.
+     * Our release and drain functionality often requires access by key, so
+     * maintaining a pure priority-queue is a little bit complex. We use
+     * an "availability" hash along with a priority-queue. The availability
+     * hash is authoritative (ie the priority queue may have entries which
+     * are no longer available, so we have to check).
+     *
+     * node-moray#4:
+     *
+     * Randomly picking Moray servers works when their response times are
+     * all uniform; but small differences in response times, (especially
+     * with bursty workloads) can end up assigning too much work to the
+     * slowest server(s). In cases where the server performance is partly
+     * dictated by the amount of work, we end up with a positive feedback
+     * loop where the slowest servers acquire a mounting backlog while the
+     * least-loaded stay lightly loaded.
+     *
+     * Get the next entry from our priority-queue, check that it is still
+     * a valid entry.
      */
-    availkeys = Object.keys(this.mcp_avail);
-    if (availkeys.length === 0) {
+    while ((entry = this.mcp_fpq.poll()) !== undefined) {
+        // We got an entry from our queue, is it legal to use ?
+        if (this.mcp_avail.hasOwnProperty(entry.key))
+            break;
+    }
+
+    // No valid connections available.
+    if (entry === undefined) {
         this.mcp_nalloc_fail++;
         this.mcp_log.trace('failed to allocate connection');
         return (new VError({
@@ -132,11 +154,15 @@ MorayConnectionPool.prototype.connAlloc = function () {
         }, 'no connections available'));
     }
 
-    key = jsprim.randElt(availkeys);
-    mconn = this.mcp_conns[key];
+    mconn = this.mcp_conns[entry.key];
     assert.ok(mconn instanceof MorayConnection);
     assert.ok(mconn.mc_nreqs >= 0);
     mconn.mc_nreqs++;
+    entry.count = mconn.mc_nreqs;
+
+    // Update our priority queue.
+    this.mcp_fpq.add(entry);
+
     aconn = new MorayConnectionAllocation(mconn);
     mconn.mc_log.trace('allocated connection');
     this.mcp_nalloc_ok++;
@@ -169,7 +195,8 @@ MorayConnectionPool.prototype.connRelease = function (aconn) {
 
 /*
  * [private] Invoked by cueball when a new connection has been established and
- * is ready for use.  Just add it to our set of available connections.
+ * is ready for use.  Just add it to our set of available connections. Also
+ * add it to our priority queue with a count of zero (ie highest priority).
  */
 MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
     var mconn, extras;
@@ -183,6 +210,7 @@ MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
         this.mcp_log.child(extras, true));
     this.mcp_conns[key] = mconn;
     this.mcp_avail[key] = true;
+    this.mcp_fpq.add({ 'key': key, 'count': 0});
     mconn.mc_log.info('new connection');
 };
 
@@ -191,6 +219,10 @@ MorayConnectionPool.prototype.connAdd = function connAdd(key, conn, hdl) {
  * service.  This connection may well still be in use by any number of requests.
  * It's our responsibility to stop assigning new work to it, wait for existing
  * requests to complete, and close the connection.
+ *
+ * We don't explicitly remove the conn-entry from our priority-queue: instead we
+ * lazily do that in #connAlloc -- removal from the mcp_avail hash is sufficient
+ * mark it "dead" to #connAlloc.
  */
 MorayConnectionPool.prototype.connDrain = function connDrain(key) {
     var mconn;
@@ -199,7 +231,9 @@ MorayConnectionPool.prototype.connDrain = function connDrain(key) {
     assert.ok(this.mcp_avail.hasOwnProperty(key));
 
     /*
-     * Remove the connection from service for new requests.
+     * Remove the connection from service for new requests. As noted
+     * above, this implicitly removes it from consideration in the
+     * priority queue in #connAlloc.
      */
     delete (this.mcp_avail[key]);
 
diff --git a/package.json b/package.json
index 4bb2a9d..c7655c6 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray",
     "description": "Moray client library",
-    "version": "3.4.0",
+    "version": "3.5.0",
     "author": "Joyent (joyent.com)",
     "keywords": [ "moray" ],
     "main": "./lib/index.js",
@@ -17,6 +17,7 @@
         "cueball": "^2.2.0",
         "extsprintf": "^1.3.0",
         "fast": "^2.1.0",
+        "fastpriorityqueue":"^0.3.1",
         "libuuid": "0.2.1",
         "jsprim": "^1.3.0",
         "posix-getopt": "^1.0.0",
