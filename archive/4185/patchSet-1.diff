commit d8aa880bb7e07c4abb41cba1511e75cd601f2715 (refs/changes/85/4185/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2018-06-11T18:53:41-07:00 (1 year, 4 months ago)
    
    TRITON-494 drop (mostly) unused object_caches in SAPI

diff --git a/lib/server/stor/moray.js b/lib/server/stor/moray.js
index 8dc4443..b6aa1ef 100644
--- a/lib/server/stor/moray.js
+++ b/lib/server/stor/moray.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
- * lib/server/stor/moray.js: moray interface
+ * Storage/DB interface to Moray.
  */
 
 var mod_net = require('net');
@@ -17,12 +17,11 @@ var mod_net = require('net');
 var async = require('async');
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
-var LRU = require('lru-cache');
 var moray = require('moray');
 var morayFilter = require('moray-filter');
 var once = require('once');
 var vasync = require('vasync');
-var verror = require('verror');
+var VError = require('verror');
 
 var mod_errors = require('../errors');
 
@@ -124,14 +123,6 @@ MorayStorage.prototype.init = function init(cb) {
         init_barrier.start('master_moray');
     }
 
-    if (this.object_caches) {
-        Object.keys(this.object_caches).forEach(function (key) {
-            if (this.object_caches && this.object_caches[key]) {
-                this.object_caches[key].reset();
-            }
-        });
-    }
-
     function setup(tag, client) {
         log.info({ tag: tag, client: client.toString() },
             'moray: setting up');
@@ -285,7 +276,7 @@ function createBucket(client, name, cfg, cb) {
             return;
         }
 
-        if (err && !verror.hasCauseWithName(err, 'BucketNotFoundError')) {
+        if (err && !VError.hasCauseWithName(err, 'BucketNotFoundError')) {
             log.error(err, 'failed to get bucket %s', name);
             cb(err);
             return;
@@ -302,15 +293,6 @@ function createBucket(client, name, cfg, cb) {
             log.info({ client: client.toString() },
                 'moray: create bucket %s', name);
 
-            if (!self.object_caches)
-                self.object_caches = {};
-
-            self.object_caches[name] = LRU({
-                max: 1000,
-                maxAge: 15 * 1000,  /* 15 seconds */
-                length: function () { return (1); }
-            });
-
             cb();
         });
     });
@@ -361,11 +343,6 @@ function putObject(bucket, uuid, obj, opts, cb) {
         record.value = obj;
         record.etag = res.etag;
 
-        if (self.object_caches && self.object_caches[bucket]) {
-            log.debug('adding object %s to cache', uuid);
-            self.object_caches[bucket].set(uuid, record);
-        }
-
         cb(null);
     });
 }
@@ -377,14 +354,6 @@ MorayStorage.prototype.getObject = function getObject(bucket, uuid, cb) {
     assert.string(uuid, 'uuid');
     assert.func(cb, 'cb');
 
-    if (this.object_caches && this.object_caches[bucket]) {
-        var obj = this.object_caches[bucket].peek(uuid);
-        if (obj) {
-            log.debug('serving object %s from cache', uuid);
-            return (cb(null, obj));
-        }
-    }
-
     var filter = sprintf('(uuid=%s)', uuid);
 
     /*
@@ -415,26 +384,18 @@ MorayStorage.prototype.delObject = function delObject(bucket, uuid, cb) {
     assert.string(uuid, 'uuid');
     assert.func(cb, 'cb');
 
-    var onFinish = function () {
-        if (self.object_caches && self.object_caches[bucket]) {
-            log.debug('deleting object %s from cache', uuid);
-            self.object_caches[bucket].del(uuid);
-        }
-        cb();
-    };
-
     this.local.delObject(bucket, uuid, function (err) {
-        if (err && !verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
+        if (err && !VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
             cb(err);
             return;
         }
 
         if (!err) {
-            onFinish();
+            cb();
             return;
         }
 
-        assert.ok(err && verror.hasCauseWithName(err, 'ObjectNotFoundError'));
+        assert.ok(err && VError.hasCauseWithName(err, 'ObjectNotFoundError'));
 
         if (!self.master) {
             cb(new mod_errors.ObjectNotFoundError(err.message));
@@ -449,13 +410,13 @@ MorayStorage.prototype.delObject = function delObject(bucket, uuid, cb) {
          */
         self.master.delObject(bucket, uuid, function (suberr) {
             if (suberr &&
-                !verror.hasCauseWithName(suberr, 'ObjectNotFoundError')) {
+                !VError.hasCauseWithName(suberr, 'ObjectNotFoundError')) {
                 cb(suberr);
                 return;
             }
 
             if (!suberr) {
-                onFinish();
+                cb();
                 return;
             }
 
