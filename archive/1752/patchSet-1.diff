From c09eae11ddeb5848dddf6219f8f7551c2611a57e Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Wed, 5 Apr 2017 15:00:49 -0500
Subject: [PATCH] TOOLS-1653 triton development guide should describe where to
 find ./tools/setup-remote-build-zone.sh TOOLS-1747 Triton development guide
 shouldn't use sdc-* command in examples

---
 docs/developer-guide/building.md | 142 ++++++++++++++++++++++---------
 1 file changed, 101 insertions(+), 41 deletions(-)

diff --git a/docs/developer-guide/building.md b/docs/developer-guide/building.md
index cc2cf04..97ea993 100644
--- a/docs/developer-guide/building.md
+++ b/docs/developer-guide/building.md
@@ -1,18 +1,18 @@
-# Building SDC
+# Building Triton
 
 ## Prerequisites
 
  * we assume you have npm/node installed on your workstation
  * we assume you have git installed on your workstation
  * we assume you have json (npm install -g json) installed on your workstation
- * we assume you understand the basics of SDC, if not please start with [the
-   SmartDataCenter README](https://github.com/joyent/sdc#readme)
+ * we assume you understand the basics of Triton, if not please start with [the
+   Triton DataCenter README](https://github.com/joyent/sdc#readme)
  * we assume you have your SSH keys loaded in your ssh-agent when connecting
    to build zones via SSH.
 
 ## Decisions to Make
 
-To build SDC components you to decide first make a couple choices:
+To build Triton components you to decide first make a couple choices:
 
  * which components are you going to build?
  * where are you going to build components?
@@ -21,20 +21,34 @@ To build SDC components you to decide first make a couple choices:
 
 If you are building any of the following components:
 
+ * cns
  * manta-manatee
  * sdc-manatee
  * electric-moray
  * platform
 
-you will need a sdc-multiarch 13.3.1 build zone. For any other components you
-will need an sdc-smartos 1.6.3. If you want to build *all* components, you'll
-need both.
+you will need an sdc-multiarch 13.3.1 build zone. For the following components,
+you will need an sdc-minimal-multiarch 15.4.1 zone:
+
+ * cloudapi
+ * cmon
+ * docker
+ * imgapi
+ * nfsserver
+ * papi
+ * vmapi
+ * volapi
+
+For any other components you will need an sdc-smartos 1.6.3 zone. If you want
+to build *all* components, you'll need all three.  The ./tools/target-\*.sh
+scripts in MG (see "Clone MG (mountain-gorilla)") list the definitive list
+of components for each respective version.
 
 ### Where to build
 
-If you have an account in the Joyent Public Cloud you can build all components
+If you have an account in the Triton Public Cloud you can build all components
 (except "platform", see "Building the Platform") required to create a working
-SDC headnode in the JPC and have the outputs pushed to Joyent's Manta. This is
+SDC headnode in the TPC and have the outputs pushed to Joyent's Manta. This is
 the easiest method for building, but will create several zones (one for each
 zone image built) and store results in Manta, both of which will have billing
 consequences.
@@ -43,8 +57,8 @@ If instead you would like to build components in a local SDC install or in a
 downloaded CoaL image, you will have some additional setup to do before you can
 build. In this case, see the section "Setting up an SDC for builds".
 
-NOTE: Even if you do not use JPC and output your builds to Manta, you will still
-need an account in JPC in order to do a build. This is because dependent
+NOTE: Even if you do not use TPC and output your builds to Manta, you will still
+need an account in TPC in order to do a build. This is because dependent
 components will still need to be downloaded from Manta.
 
 ## Setting up your workspace for driving builds
@@ -89,7 +103,7 @@ export SDC_KEY_ID=<KEY>
 export SDC_URL=https://us-east-1.api.joyentcloud.com
 ```
 
-where <USER> is the name of the JPC/SDC user you want to build with, and <KEY>
+where <USER> is the name of the TPC/SDC user you want to build with, and <KEY>
 is the SSH fingerprint of the SSH key that you've added for your user.
 
 If you're using CoaL and using the default self-signed certificates for cloudapi
@@ -110,7 +124,7 @@ you've pointed these at different SDC standups. In that case zones will be
 created using the SDC_ACCOUNT credentials and any files pulled from / pushed to
 Manta will be done using the MANTA_USER's credentials.
 
-If you're *not* using JPC here, you'll want to change the SDC_URL and MANTA_URL
+If you're *not* using TPC here, you'll want to change the SDC_URL and MANTA_URL
 above to match your local cloudapi and manta respectively.
 
 NOTE: if your SDC is not yet setup, you need to set SDC_URL *after* setting up
@@ -120,7 +134,7 @@ cloudapi in the next section.
 ## Setting up an SDC for builds
 
 NOTE: skip this section (move on to "Setting up the build environment") if
-you're going to build in the JPC.
+you're going to build in the TPC.
 
 This section assumes that you have a local SDC/CoaL setup and have access to
 the global zone.
@@ -196,7 +210,7 @@ images you need are:
 
  * fd2cc906-8938-11e3-beab-4359c665ac99 / sdc-smartos 1.6.3
  * b4bdc598-8939-11e3-bea4-8341f6861379 / sdc-multiarch 13.3.1
-
+ * 18b094b0-eb01-11e5-80c1-175dac7ddf02 / sdc-minimal-multiarch 15.4.1
 
 ## Setting up the build environment(s)
 
@@ -207,7 +221,7 @@ the creation of the required zones.
 ### Common steps to creating any build zone
 
 Before you continue, ensure that whatever user you're going to use (whether your
-personal account in JPC or 'admin' or other user in your local SDC/CoaL) has
+personal account in TPC or 'admin' or other user in your local SDC/CoaL) has
 your SSH keys added to it. This is important as these instructions will have
 you running sdc-* commands and manta commands which will need these credentials.
 
@@ -224,14 +238,14 @@ package you're going to use to build. To do this (assuming you've setup all the
 variables listed in the previous section correctly) you can run:
 
 ```
-sdc-listpackages | json -c "this.name == 'g3-standard-2-smartos'" 0.id
+triton packages -j | json -gc "this.name == 'g4-highcpu-4G'" 0.id
 ```
 
-replacing 'g3-standard-2-smartos' with the name of your package if you're not
-using JPC. For CoaL you can use package 'sdc_2048' if you haven't changed the
+replacing 'g4-highcpu-4G' with the name of your package if you're not
+using TPC. For CoaL you can use package 'sdc_2048' if you haven't changed the
 default packages. The output of this command will be a UUID which you should
 substitute in commands below. In my case the value was
-'486bb054-6a97-4ba3-97b7-2413d5f8e849' so substitute your own value where you
+'14b0351e-d0f8-11e5-8a78-9fb74f9e7bc3' so substitute your own value where you
 see that.  If your SDC_ACCOUNT isn't an administrator, you may not be able
 to find the `sdc_2048` package.  If you are using COAL this is because the
 package's owner_uuid is admin.  To make images public for you ruser to see, run
@@ -250,10 +264,10 @@ better off creating a new, public package.
 To create a sdc-smartos 1.6.3 zone you'll want to run:
 
 ```
-sdc-createmachine \
-    --dataset fd2cc906-8938-11e3-beab-4359c665ac99 \
-    --package 486bb054-6a97-4ba3-97b7-2413d5f8e849 \
-    --name "build-1.6.3"
+triton instance create \
+    --name "build-1.6.3" \
+    fd2cc906-8938-11e3-beab-4359c665ac99 \
+    486bb054-6a97-4ba3-97b7-2413d5f8e849
 ```
 
 changing "486bb054-6a97-4ba3-97b7-2413d5f8e849" to match the UUID you got in
@@ -264,14 +278,14 @@ UUID of the new build VM.
 You can run:
 
 ```
-sdc-getmachine 721182fa-d4f1-61f6-8fae-9875512356e2 | json state
+triton instance get 721182fa-d4f1-61f6-8fae-9875512356e2 | json state
 ```
 
 substituting your own UUID for '721182fa-d4f1-61f6-8fae-9875512356e2' until the
 result is 'running'. Once the VM goes running, you can find its IP using:
 
 ```
-sdc-getmachine 721182fa-d4f1-61f6-8fae-9875512356e2 | json ips
+triton instance get 721182fa-d4f1-61f6-8fae-9875512356e2 | json ips
 ```
 
 (again substituting your own UUID for '721182fa-d4f1-61f6-8fae-9875512356e2').
@@ -290,16 +304,37 @@ dataset "fd2cc906-8938-11e3-beab-4359c665ac99" you should use dataset
 For example:
 
 ```
-sdc-createmachine \
-  --dataset b4bdc598-8939-11e3-bea4-8341f6861379 \
-  --package 486bb054-6a97-4ba3-97b7-2413d5f8e849 \
-  --name "build-13.3.1"
+triton instance create \
+  --name "build-13.3.1" \
+  b4bdc598-8939-11e3-bea4-8341f6861379 \
+  486bb054-6a97-4ba3-97b7-2413d5f8e849
+```
+
+### Creating an sdc-minimal-multiarch-lts 15.4.1 build zone
+
+Note: if building in TPC, the sdc-* images are not available for provisioning.
+Instead, the equivalent public package minimal-multiarch-lts 15.4.1 can be
+used.  To determine the image UUID, the following command can be run:
+
+```
+triton image list -Hlo id name=minimal-multiarch-lts version=15.4.1
+```
+
+In my case, the image UUID returned ede31770-e19c-11e5-bb6e-3b7de3cca9ce.
+
+Otherwise, the steps are the same as the other versions, but replacing the
+image value with the correct image value:
+
 ```
+triton instance create \
+  --name "build-15.4.1" \
+  ede31770-e19c-11e5-bb6e-3b7de3cca9ce \
+  486bb054-6a97-4ba3-97b7-2413d5f8e849
 
 ### Preparing build zone(s) for builds
 
-For each build zone (1.6.3 or 13.3.1) you want to follow the same set of
-instructions. First you want to do:
+For each build zone you want to follow the same set of instructions. First
+from your local MG repo you want to do:
 
 ```
 ./tools/setup-remote-build-zone.sh root@<BUILD_ZONE_IP>
@@ -310,7 +345,7 @@ and generally gets it ready for you to login and start some builds.
 
 ### Cloning MG in your build zone
 
-For each build zone (1.6.3 or 13.3.1) you want to clone MG before you start
+For each build zone you want to clone MG before you start
 building. So SSH to the build zone, then run:
 
 ```
@@ -320,7 +355,7 @@ git clone git@github.com:joyent/mountain-gorilla.git MG && cd MG
 
 ### Add additional environment variables
 
-If you're building in JPC, you can skip this step. If you're building in a local
+If you're building in TPC, you can skip this step. If you're building in a local
 SDC/CoaL setup, you'll probably also need to also set the following at this
 point:
 
@@ -351,7 +386,11 @@ The following commands should be run in the MG directory in the appropriate
 build zone for the target you're building. They should also be run with all the
 environment variables described earlier set.
 
-### Option 1: build a single target, taking dependencies from joyager
+By default, the build process will attempt to fetch the dependencies from
+${MANTA_USER}/stor/builds.  The `-d` and `-D` options can be used to specify
+an alternate Manta account and location (respectively).
+
+### Option 1: build a single target, taking dependencies from Joyent_Dev
 
 Ensure you've set the appropriate environment variables, especially:
 
@@ -361,29 +400,44 @@ Ensure you've set the appropriate environment variables, especially:
 Then to build, run the following in your MG directory in your build zone:
 
 ```
-TARG=<build>; ./configure -t ${TARG} -d joyager -D /stor/builds \
+TARG=<build>; ./configure -t ${TARG} -d Joyent_Dev -D /stor/builds \
     -O /stor/whatever/builds && make ${TARG}_upload_manta
 ```
 
 if we use 'assets' for the build for example:
 
 ```
-TARG=assets; ./configure -t ${TARG} -d joyager -D /stor/builds \
+TARG=assets; ./configure -t ${TARG} -d Joyent_Dev -D /stor/builds \
     -O /stor/whatever/builds && make ${TARG}_upload_manta
 ```
 
 which will:
 
- * download dependencies from /joyager/stor/builds
+ * download dependencies from /Joyent_Dev/stor/builds
  * create a tarball of the assets bits + dependencies
- * create a SmartOS VM in JPC (using cloudapi)
+ * create a SmartOS VM in TPC (using cloudapi)
  * install the tarball of bits into the JPC VM
  * create an image from the VM, sending to Manta
  * download the image from Manta modify the manifest
  * push the build back to manta in ${MANTA_USER}/stor/whatever/builds/assets
 
+Note: most packages include a required platform version for building.  This
+is used so that images are built on the oldest supported (at build time)
+platform.  The `-P` flag can be added to the `./configure` command to bypass
+this requirement.
+
+Additionally, if you are building in TPC, the image UUIDs for a given
+target are unlikely to be available for the instance creation step.  To use an
+equivalent public image, add `${TARG}_IMAGE_UUID=xxxxx` as a parameter to
+make.  For example (including ignoring the platform version check):
+
+```
+TARG=<something>; ./configure -t ${TARG} -d Joyent_Dev -D /stor/builds \
+    -O /stor/whatever/builds -P && make ${TARG}_upload_manta \
+    ${TARG}_IMAGE_UUID=ede31770-e19c-11e5-bb6e-3b7de3cca9ce
+```
 
-### Option 2: build a single target, taking dependencies from joyager but not uploading results
+### Option 2: build a single target, taking dependencies from Joyent_Dev but not uploading results
 
 To *not* upload results to Manta, follow the same procedure as in "Option 1" but
 change the make target from:
@@ -399,7 +453,7 @@ make ${TARG}
 ```
 
 The result will then be in the bits/ directory instead of going to Manta.
-
+If using TPC, the same notes about image availability will also apply.
 
 ### Option 3: build all targets from scratch
 
@@ -429,6 +483,12 @@ Once this is complete, we can run the same command just with:
 ./tools/targets-13.3.1.sh
 ```
 
+or
+
+```
+./tools/targets-15.4.1.sh
+```
+
 instead of:
 
 ```
-- 
2.21.0

