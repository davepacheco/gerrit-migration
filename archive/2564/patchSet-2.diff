commit a36d432425f5447f3a6d344f1a4fcb464c11cb72 (refs/changes/64/2564/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-09-14T12:15:41-07:00 (2 years, 1 month ago)
    
    MANTA-3425 want support for reverse lookups in binder
    MANTA-3424 binder tests should cover SRV records and rcodes

diff --git a/lib/server.js b/lib/server.js
index eae6ee0..7b55914 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -19,6 +19,7 @@ var mname = require('mname');
 
 var ARecord = mname.ARecord;
 var SRVRecord = mname.SRVRecord;
+var PTRRecord = mname.PTRRecord;
 
 
 ///--- Helpers
@@ -52,6 +53,75 @@ function stripSuffix(suffix, str) {
                 return (str);
 }
 
+function resolvePtr(options, query, cb) {
+        query.response.header.ra = 0;
+        var domain = query.name();
+
+        var parts = domain.split('.').reverse();
+        if (parts.length < 2 || parts[0] !== 'arpa' || parts[1] !== 'in-addr') {
+                query._log.trace('not an ipv4 reverse name');
+                query.setError('refused');
+                query.respond();
+                cb();
+                return;
+        }
+        /*
+         * We don't bother validating the rest of the address, because if it's
+         * invalid we won't find it in ZK anyway, and we'll just return
+         * REFUSED like we should (so the client goes and tries the next NS)
+         */
+        var ip = parts.slice(2).join('.');
+
+        if (!options.zkCache.isReady()) {
+                query._log.error('no ZooKeeper client');
+                query.setError('eserver');
+                query.respond();
+                cb();
+                return;
+        }
+
+        query._log = query._log.child({
+                query: {
+                        ip: ip,
+                        type: query.type()
+                }
+        }, true);
+
+        var log = query._log;
+        var stamp = query._stamp;
+        var zk = options.zkCache;
+
+        var node = zk.reverseLookup(ip);
+
+        if (!node) {
+                log.trace('node not found in ZK cache');
+
+                if (options.recursion) {
+                        log.trace('handing off to recursion');
+                        options.recursion.resolve(query, cb);
+                        return;
+                }
+
+                query.setError('refused');
+                stamp('pre-resp');
+                query.respond();
+                cb();
+                return;
+        }
+
+        var record = node.data;
+        var ttl = 30;
+        if (record.ttl !== undefined)
+                ttl = record.ttl;
+        if (record[record.type].ttl !== undefined)
+                ttl = record[record.type].ttl;
+
+        query.addAnswer(domain, new PTRRecord(node.domain), ttl);
+        stamp('pre-resp');
+        query.respond();
+        cb();
+}
+
 function resolve(options, query, cb) {
         query.response.header.ra = 0;
         var domain = query.name();
@@ -220,6 +290,7 @@ function resolve(options, query, cb) {
         case 'load_balancer':
         case 'moray_host':
         case 'redis_host':
+        case 'rr_host':
                 addr = record[record.type].address;
                 query.addAnswer(domain, new ARecord(addr), ttl);
                 break;
@@ -379,6 +450,9 @@ function createServer(options) {
                 case 'SRV':
                         resolve(options, query, cb);
                         break;
+                case 'PTR':
+                        resolvePtr(options, query, cb);
+                        break;
 
                 default:
                         // Anything unsupported we tell the client the truth
diff --git a/lib/zk.js b/lib/zk.js
index c88a0ea..f1fd475 100644
--- a/lib/zk.js
+++ b/lib/zk.js
@@ -30,6 +30,7 @@ function ZKCache(options) {
         });
         this.ca_domain = options.domain;
         this.ca_log = options.log;
+        this.ca_revLookup = {};
 
         var self = this;
         this.ca_zk.on('session', function () {
@@ -52,6 +53,9 @@ ZKCache.prototype.getClient = function (cb) {
 ZKCache.prototype.lookup = function (domain) {
         return (this.ca_treeNodes[domain]);
 };
+ZKCache.prototype.reverseLookup = function (ip) {
+        return (this.ca_revLookup[ip]);
+};
 ZKCache.prototype.rebuildCache = function () {
         var tn = this.ca_treeNodes[this.ca_domain];
         if (tn === undefined) {
@@ -73,6 +77,7 @@ function TreeNode(cache, pDomain, name) {
         this.tn_cache = cache;
         this.tn_kids = {};
         this.tn_data = null;
+        this.tn_ip = undefined;
         this.tn_log = cache.ca_log.child({
                 component: 'ZKTreeNode',
                 domain: this.tn_domain
@@ -86,6 +91,11 @@ Object.defineProperty(TreeNode.prototype, 'name', {
                 return (this.tn_name);
         }
 });
+Object.defineProperty(TreeNode.prototype, 'domain', {
+        get: function () {
+                return (this.tn_domain);
+        }
+});
 Object.defineProperty(TreeNode.prototype, 'children', {
         get: function () {
                 var self = this;
@@ -134,6 +144,31 @@ TreeNode.prototype.onDataChanged = function (zk, data, stat) {
                 return;
         }
         this.tn_data = parsedData;
+
+        if (parsedData === null || typeof (parsedData.type) !== 'string')
+                return;
+
+        switch (parsedData.type) {
+        case 'db_host':
+        case 'host':
+        case 'load_balancer':
+        case 'moray_host':
+        case 'redis_host':
+        case 'rr_host':
+                var record = parsedData[parsedData.type];
+                if (typeof (record) !== 'object' || record === null)
+                        break;
+                var addr = record.address;
+                if (this.tn_ip)
+                        delete (this.tn_cache.ca_revLookup[this.tn_ip]);
+                this.tn_ip = addr;
+                if (addr)
+                        this.tn_cache.ca_revLookup[addr] = this;
+                break;
+
+        default:
+                break;
+        }
 };
 TreeNode.prototype.unbind = function () {
         var self = this;
diff --git a/test/dig.js b/test/dig.js
index ffc1985..952d17f 100644
--- a/test/dig.js
+++ b/test/dig.js
@@ -37,6 +37,11 @@ function parseAnswer(tokens) {
                 type:   t[3],
                 target: t[4]
         };
+        if (t[3] === 'SRV') {
+                r.target = t[7];
+                r.port = parseInt(t[6], 10);
+                r.priority = parseInt(t[5], 10);
+        }
 
         return (r);
 }
@@ -57,6 +62,8 @@ function parseDig(output) {
         lines.forEach(function (l) {
                 if (l === '') {
                         section = undefined;
+                } else if (/^;; ->>HEADER<<-/.test(l)) {
+                        section = 'header';
                 } else if (/^;; QUESTION SECTION:/.test(l)) {
                         section = 'question';
                 } else if (/^;; ANSWER SECTION:/.test(l)) {
@@ -67,6 +74,13 @@ function parseDig(output) {
                         section = 'authority';
                 }
 
+                if (section === 'header') {
+                        var m = l.match(/, status: ([A-Z]+), /);
+                        if (m && m[1]) {
+                                results.status = m[1];
+                        }
+                }
+
                 if (section === 'question') {
                         if (/^;([A-Za-z0-9])*\./.test(l)) {
                                 results.question =
@@ -76,7 +90,7 @@ function parseDig(output) {
 
                 if (section === 'answer') {
                         if (/^([_A-Za-z0-9])+/.test(l)) {
-                                var tokens = l.match(/(.*)/)[0].split(/\t/);
+                                var tokens = l.split(/[\t ]+/);
                                 var answer = parseAnswer(tokens);
                                 if (answer)
                                         results.answers.push(answer);
diff --git a/test/host.test.js b/test/host.test.js
index bcc0cba..3bdbb5b 100644
--- a/test/host.test.js
+++ b/test/host.test.js
@@ -99,6 +99,7 @@ test('resolve record ok', function (t) {
         dig(RECORD, 'A', function (err, results) {
                 t.ifError(err);
                 t.ok(results);
+                t.equal(results.status, 'NOERROR');
                 t.ok(results.answers);
                 t.equal(results.answers.length, 1);
                 t.deepEqual(results.answers[0], {
@@ -110,3 +111,57 @@ test('resolve record ok', function (t) {
                 t.end();
         });
 });
+
+test('resolve reverse record ok', function (t) {
+        var dom = ADDR.split('.').reverse().join('.') + '.in-addr.arpa';
+        dig(dom, 'PTR', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'NOERROR');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 1);
+                t.deepEqual(results.answers[0], {
+                        name: dom,
+                        ttl: 30,
+                        type: 'PTR',
+                        target: RECORD + '.'
+                });
+                t.end();
+        });
+});
+
+test('reverse record not found', function (t) {
+        var dom = '1.2.3.4.in-addr.arpa';
+        dig(dom, 'PTR', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'REFUSED');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 0);
+                t.end();
+        });
+});
+
+test('reverse record invalid', function (t) {
+        var dom = 'foobar.com';
+        dig(dom, 'PTR', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'REFUSED');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 0);
+                t.end();
+        });
+});
+
+test('reverse record invalid ip', function (t) {
+        var dom = '1.2.in-addr.arpa';
+        dig(dom, 'PTR', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'REFUSED');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 0);
+                t.end();
+        });
+});
diff --git a/test/service.test.js b/test/service.test.js
index f3fb2e4..39f73a5 100644
--- a/test/service.test.js
+++ b/test/service.test.js
@@ -147,6 +147,7 @@ test('resolve record ok', function (t) {
         dig(SVC, 'A', function (err, results) {
                 t.ifError(err);
                 t.ok(results);
+                t.equal(results.status, 'NOERROR');
                 t.ok(results.answers);
                 t.equal(results.answers.length, 2);
                 results.answers.forEach(function (a) {
@@ -159,11 +160,84 @@ test('resolve record ok', function (t) {
         });
 });
 
+test('resolve SRV records ok', function (t) {
+        dig('_http._tcp.' + SVC, 'SRV', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'NOERROR');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 2);
+                results.answers.forEach(function (a) {
+                        t.equal(a.ttl, 60);
+                        t.equal(a.type, 'SRV');
+                        t.equal(a.port, 80);
+                        t.ok(/lb[AB]\.bar\.foo\.com\.?/.test(a.target));
+                });
+                t.end();
+        });
+});
+
+test('SRV wrong service', function (t) {
+        dig('_http._udp.' + SVC, 'SRV', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'NXDOMAIN');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 0);
+                t.end();
+        });
+});
+
+test('SRV not exist', function (t) {
+        dig('_http._tcp.foobar.foo.com', 'SRV', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'REFUSED');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 0);
+                t.end();
+        });
+});
+
+test('resolve member record ok', function (t) {
+        dig('lba.' + SVC, 'A', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'NOERROR');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 1);
+                t.deepEqual(results.answers[0], {
+                        name: 'lba.' + SVC,
+                        ttl: 30,
+                        type: 'A',
+                        target: LBS['lbA']
+                });
+                t.end();
+        });
+});
+
+test('resolve reverse record ok', function (t) {
+        var dom = LBS['lbA'].split('.').reverse().join('.') + '.in-addr.arpa';
+        dig(dom, 'PTR', function (err, results) {
+                t.ifError(err);
+                t.ok(results);
+                t.equal(results.status, 'NOERROR');
+                t.ok(results.answers);
+                t.equal(results.answers.length, 1);
+                var a = results.answers[0];
+                t.equal(a.name, dom);
+                t.equal(a.type, 'PTR');
+                t.equal(a.target, 'lba.bar.foo.com.');
+                t.end();
+        });
+});
+
 
 test('resolve record not found', function (t) {
         dig('blah.blah', 'A', function (err, results) {
                 t.ifError(err);
                 t.ok(results);
+                t.equal(results.status, 'REFUSED');
                 t.ok(results.answers);
                 t.equal(results.answers.length, 0);
                 t.end();
