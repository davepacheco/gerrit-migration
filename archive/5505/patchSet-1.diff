From a832c4b383191e2c04063dc673aeb927d0195cc1 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 6 Feb 2019 18:42:42 +0000
Subject: [PATCH] TRITON-1186 FWAPI should always account for tags and VMs in
 PRIORITY rules TRITON-1190 FWAPI assumes that it can return "parsed.ports"
 for all rules

---
 lib/endpoints/resolve.js         |  24 ++++++-
 lib/rule.js                      |   6 +-
 package.json                     |   3 +-
 test/integration/list.test.js    | 106 +++++++++++++++++++++++++++++--
 test/integration/resolve.test.js |  35 +++++++++-
 5 files changed, 163 insertions(+), 11 deletions(-)

diff --git a/lib/endpoints/resolve.js b/lib/endpoints/resolve.js
index 0f229e1..cbcd459 100644
--- a/lib/endpoints/resolve.js
+++ b/lib/endpoints/resolve.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -47,7 +47,26 @@ var RESOLVE_SCHEMA = {
     }
 };
 
+/**
+ * If a rule matches the default firewall behaviour (allow outbound, block
+ * inbound), then there's no need for firewaller to try and fetch the mentioned
+ * remote VMs from VMAPI.
+ */
+function isNoOpRule(rule, d) {
+    var p = rule.priority;
+    var a = rule.action;
+
+    if (p > 0) {
+        /*
+         * We don't bother trying to determine whether or not a rule
+         * with PRIORITY is effectively a no-op, since it would require
+         * examining all other applied rules with a lower priority.
+         */
+        return false;
+    }
 
+    return (d === 'from' && a === 'allow') || (d === 'to' && a === 'block');
+}
 
 /**
  * For targets specified by params, determine the targets on the other side
@@ -67,8 +86,7 @@ function resolveTargets(rules, params, log, callback) {
     }
 
     function addOtherSideData(rule, d) {
-        if ((d === 'from' && rule.action === 'allow') ||
-            (d === 'to' && rule.action === 'block')) {
+        if (isNoOpRule(rule, d)) {
             log.debug(
                 'resolveTargets: rule %s: match on side %s, but action is %s',
                 rule.uuid, d, rule.action);
diff --git a/lib/rule.js b/lib/rule.js
index 526e168..bae0bc8 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -626,6 +626,10 @@ Rule.prototype.serialize = function _ruleSerialize(opts) {
                 break;
 
             case 'parsed.ports':
+                if (!hasKey(self, 'ports')) {
+                    break;
+                }
+
                 addParsed();
                 ser.parsed.ports = self.ports.map(function (p) {
                     if (p !== 'all') {
diff --git a/package.json b/package.json
index 037c09f..815b91d 100644
--- a/package.json
+++ b/package.json
@@ -33,8 +33,7 @@
     "trace-event": "1.3.0",
     "triton-netconfig": "1.3.0",
     "vasync": "1.6.4",
-    "verror": "1.9.0",
-    "xtend": "4.0"
+    "verror": "1.9.0"
   },
   "license": "MPL-2.0"
 }
diff --git a/test/integration/list.test.js b/test/integration/list.test.js
index bac06fc..a40a441 100644
--- a/test/integration/list.test.js
+++ b/test/integration/list.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -16,7 +16,7 @@
 
 var test = require('tape');
 var constants = require('../../lib/util/constants');
-var extend = require('xtend');
+var extend = require('jsprim').mergeObjects;
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('uuid');
 
@@ -27,6 +27,7 @@ var mod_uuid = require('uuid');
 
 
 var OWNERS = [
+    mod_uuid.v4(),
     mod_uuid.v4(),
     mod_uuid.v4(),
     mod_uuid.v4()
@@ -84,6 +85,21 @@ var RULES = [
         enabled: true,
         owner_uuid: OWNERS[2],
         rule: 'FROM any TO all vms ALLOW esp'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[2],
+        rule: 'FROM any TO tag "a" = "q" ALLOW icmp TYPE all'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[2],
+        rule: 'FROM any TO tag "b" ALLOW icmp6 TYPE all'
+    },
+    {
+        enabled: true,
+        owner_uuid: OWNERS[2],
+        rule: 'FROM tag "c" TO any BLOCK udp PORT 53'
     }
 ];
 
@@ -131,12 +147,12 @@ test('list: all ports', function (t) {
     mod_rule.createAndGet(t, {
         rule: {
             enabled: true,
-            owner_uuid: OWNERS[2],
+            owner_uuid: OWNERS[3],
             rule: 'FROM tag "foo" TO all vms BLOCK udp PORTS 1 - 200, 1 - 65535'
         },
         exp: {
             enabled: true,
-            owner_uuid: OWNERS[2],
+            owner_uuid: OWNERS[3],
             rule: 'FROM tag "foo" TO all vms BLOCK udp PORT all'
         }
     }, function (err) {
@@ -228,6 +244,88 @@ test('list: IPsec protocols', function (t) {
 });
 
 
+test('list: ICMP', function (t) {
+    t.plan(2);
+
+    t.test('list: ICMP - v4', function (t2) {
+        mod_rule.list(t2, {
+            params: {
+                owner_uuid: OWNERS[2],
+                protocol: 'icmp'
+            },
+            exp: [
+                RULES[9]
+            ]
+        });
+    });
+
+    t.test('list: ICMP - v6', function (t2) {
+        mod_rule.list(t2, {
+            params: {
+                owner_uuid: OWNERS[2],
+                protocol: 'icmp6'
+            },
+            exp: [
+                RULES[10]
+            ]
+        });
+    });
+});
+
+
+
+test('list: request parsed "fields"', function (t) {
+    mod_rule.list(t, {
+        params: {
+            owner_uuid: OWNERS[2],
+            fields: constants.PARSED_FIELDS
+        },
+        exp: [
+            extend(RULES[7], {
+                parsed: {
+                    protocol: 'ah',
+                    action: 'allow',
+                    fromtags: {},
+                    totags: {}
+                }
+            }),
+            extend(RULES[8], {
+                parsed: {
+                    protocol: 'esp',
+                    action: 'allow',
+                    fromtags: {},
+                    totags: {}
+                }
+            }),
+            extend(RULES[9], {
+                parsed: {
+                    protocol: 'icmp',
+                    action: 'allow',
+                    fromtags: {},
+                    totags: { a: { all: false, values: [ 'q' ] } }
+                }
+            }),
+            extend(RULES[10], {
+                parsed: {
+                    protocol: 'icmp6',
+                    action: 'allow',
+                    fromtags: {},
+                    totags: { b: { all: true, values: [] } }
+                }
+            }),
+            extend(RULES[11], {
+                parsed: {
+                    protocol: 'udp',
+                    action: 'block',
+                    fromtags: { c: { all: true, values: [] } },
+                    totags: {},
+                    ports: [ 53 ]
+                }
+            })
+        ]
+    });
+});
+
 // --- Teardown
 
 
diff --git a/test/integration/resolve.test.js b/test/integration/resolve.test.js
index e3577fa..e853c46 100644
--- a/test/integration/resolve.test.js
+++ b/test/integration/resolve.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -156,6 +156,24 @@ test('setup', function (t) {
             numOneToNumTwo: {
                 rule: 'FROM tag "num" = "one" TO tag "num" = "two" ALLOW '
                     + 'tcp PORT 55'
+            },
+            noopRuleA: {
+                rule: 'FROM tag "a" TO tag "noop?" BLOCK tcp PORT 90 PRIORITY 1'
+            },
+            noopRuleB: {
+                rule: 'FROM tag "b" TO tag "noop?" BLOCK tcp PORT 90'
+            },
+            noopRuleC: {
+                rule: 'FROM tag "noop?" TO tag "c" BLOCK tcp PORT 90'
+            },
+            noopRuleD: {
+                rule: 'FROM tag "noop?" TO tag "d" ALLOW tcp PORT 90 PRIORITY 1'
+            },
+            noopRuleE: {
+                rule: 'FROM tag "noop?" TO tag "e" ALLOW tcp PORT 90'
+            },
+            noopRuleF: {
+                rule: 'FROM tag "e" TO tag "noop?" ALLOW tcp PORT 90'
             }
         },
 
@@ -766,6 +784,21 @@ test('resolve', function (t) {
             rules: [ RULES.o6.vm6ToIp, RULES.o6.vmsOnBothSides ],
             tags: { },
             vms: [ VMS[5], VMS[6] ]
+        } ],
+    [   fmt('Tags from no-op rules are dropped'),
+        {
+            owner_uuid: OWNERS[0],
+            tags: { 'noop?': true }
+        },
+        {
+            allVMs: false,
+            owner_uuid: OWNERS[0],
+            rules: oRules(0, [
+                'noopRuleA', 'noopRuleB', 'noopRuleC',
+                'noopRuleD', 'noopRuleE', 'noopRuleF'
+            ]),
+            tags: { a: true, c: true, d: true, e: true },
+            vms: [ ]
         } ]
     ];
 
-- 
2.21.0

