commit bc418d40813727e3058b01b4c93007b3311b7949 (refs/changes/49/3949/2)
Author: John Levon <john.levon@joyent.com>
Date:   2018-05-16T12:21:20+00:00 (1 year, 5 months ago)
    
    OS-6921 vmadm reboot can leave bhyve VMs in stopped state

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 2aa95e51..f7cc7788 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -14101,7 +14101,6 @@ function doTermStop(vmobj, options, callback)
     var err;
     var timer;
     var tracers_obj;
-    var waiter;
 
     assert(vmobj.pid);
 
@@ -14113,16 +14112,15 @@ function doTermStop(vmobj, options, callback)
 
     log.debug({vmobj_pid: vmobj.pid, timeout: options.timeout}, 'doTermStop');
 
-    // From options, we use:
-    // options.timeout
-    function haltZone() {
+    function haltZone(cb) {
         zoneadm(['-u', vmobj.uuid, 'halt', '-X'], log, function (e, fds) {
             var msg = trim(fds.stderr);
 
             if (!e || msg.match(/zone is already halted$/)) {
                 // success
                 log.info('zone is halted');
-                callback();
+                if (cb)
+                    cb();
                 return;
             } else if (e) {
                 log.error({
@@ -14130,7 +14128,8 @@ function doTermStop(vmobj, options, callback)
                     stdout: fds.stdout,
                     stderr: fds.stderr
                 }, 'failed to halt zone');
-                callback(e);
+                if (cb)
+                    cb(e);
                 return;
             }
         });
@@ -14141,7 +14140,7 @@ function doTermStop(vmobj, options, callback)
     // zone.
     if (vmobj.pid === 4294967295) {
         log.warn('PID is 4294967295, halting zone instead of killing init');
-        haltZone();
+        haltZone(callback);
         return;
     }
 
@@ -14149,8 +14148,8 @@ function doTermStop(vmobj, options, callback)
     log.info({vmobj_pid: vmobj.pid}, 'Sending SIGTERM to VM\'s init PID');
     err = killSig(vmobj.pid, 'SIGTERM');
     if (err && err.code === 'ESRCH') {
-        // process already doesn't exist
-        callback();
+        // process already doesn't exist (but zone may still be on the way down)
+        haltZone(callback);
         return;
     } else if (err) {
         /*
@@ -14162,57 +14161,42 @@ function doTermStop(vmobj, options, callback)
     }
 
     /*
-     * We expect the stop to have completed within options.timeout seconds,
-     * if it hasn't we'll try SIGKILL and if that fails to kill the zone,
-     * we'll do a 'zoneadm halt'.
+     * We'll pwait on on our init process. If it's not done by the timeout,
+     * we'll then force the matter via SIGKILL or halting the zone.  In any
+     * case, the pwait should eventually finish, so we'll make sure that's the
+     * only path out, in order to avoid accidentally invoking the callback
+     * twice.
      */
     timer = setTimeout(function _timeoutAfterTerm() {
-        function _doHaltZone() {
-            if (waiter) {
-                waiter.kill();
-                waiter = null;
-            }
-
-            haltZone(); // will call callback();
+        if (!options.killOnTimeout) {
+            haltZone();
+            return;
         }
 
-        if (options.killOnTimeout) {
-            /*
-             * Hit timeout, do kill -KILL, ignore error since either process
-             * is gone and doPwait will notice and exit, or we'll timeout a
-             * second time.
-             */
-            log.info({vmobj_pid: vmobj.pid},
-                'Sending SIGKILL to VM\'s init PID');
-            killSig(vmobj.pid, 'SIGKILL');
-            /*
-             * Sent kill -KILL, so process really should just exit. In case it
-             * doesn't though set one more timer. If that expires, halt the
-             * zone.
-             */
-            timer = setTimeout(function _timeoutAfterKill() {
-                log.warn({vmobj_pid: vmobj.pid}, 'SIGKILL does not seem to '
-                    + 'have stopped zone, attempting "zoneadm halt"');
-                _doHaltZone();
-            }, (10 * 1000));
-        } else {
-            _doHaltZone();
-        }
+        log.info({vmobj_pid: vmobj.pid}, 'Sending SIGKILL to VM\'s init PID');
+        killSig(vmobj.pid, 'SIGKILL');
+
+        // A last-ditch zone halt if even KILL didn't make progress...
+        timer = setTimeout(function _timeoutAfterKill() {
+            log.warn({vmobj_pid: vmobj.pid}, 'SIGKILL does not seem to '
+                + 'have stopped zone, attempting "zoneadm halt"');
+            haltZone();
+        }, (10 * 1000));
     }, (options.timeout * 1000));
 
-    /*
-     * This 'waiter' watches for the PID to exit and calls _onExit callback
-     * when it does. Can be immediately.
-     */
-    waiter = doPwait(vmobj.pid, log, function _onExit() {
+    doPwait(vmobj.pid, log, function _onExit() {
+        log.debug({vmobj_pid: vmobj.pid}, 'pwait reports that init exited');
+
         if (timer) {
             clearTimeout(timer);
             timer = null;
         }
 
-        // It's dead Jim!
-        log.debug({vmobj_pid: vmobj.pid}, 'pwait reports that init exited');
-        callback();
+        /*
+         * init is done, but the zone could still not quite be halted (e.g.
+         * still 'down'); so we need to ensure it's really halted.
+         */
+        haltZone(callback);
     });
 }
 
diff --git a/src/vm/node_modules/forkexec/.npmignore b/src/vm/node_modules/forkexec/.npmignore
new file mode 100644
index 00000000..db5dad8e
--- /dev/null
+++ b/src/vm/node_modules/forkexec/.npmignore
@@ -0,0 +1,4 @@
+examples/
+tools/
+test/
+Makefile*
diff --git a/src/vm/node_modules/forkexec/CHANGES.md b/src/vm/node_modules/forkexec/CHANGES.md
new file mode 100644
index 00000000..fdb22668
--- /dev/null
+++ b/src/vm/node_modules/forkexec/CHANGES.md
@@ -0,0 +1,20 @@
+# Changelog
+
+# Not yet released
+
+No changes.
+
+
+# v1.1.0 (2016-07-14)
+
+* joyent/node-forkexec#3 optionally include stderr in error message
+* joyent/node-forkexec#4 NPM package should not ship development files
+
+# v1.0.0 (2016-05-20)
+
+* joyent/node-forkexec#2 add interface for normalizing Node errors
+* Commit to API
+
+# v0.1.0 (2015-03-17)
+
+* Initial version with forkExecWait().
diff --git a/src/vm/node_modules/forkexec/LICENSE b/src/vm/node_modules/forkexec/LICENSE
new file mode 100644
index 00000000..37702144
--- /dev/null
+++ b/src/vm/node_modules/forkexec/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2015, Joyent, Inc. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE
diff --git a/src/vm/node_modules/forkexec/README.md b/src/vm/node_modules/forkexec/README.md
new file mode 100644
index 00000000..64d8ba2c
--- /dev/null
+++ b/src/vm/node_modules/forkexec/README.md
@@ -0,0 +1,294 @@
+# forkexec: sane child process library
+
+This library provides somewhat saner interfaces to Node's
+[child_process](https://nodejs.org/api/child_process.html) module.  It's still
+growing, and most of the interfaces there don't have analogs here yet.
+
+The interfaces in this library conform to Joyent's [Best Practices for Error
+Handling in Node.js](http://www.joyent.com/developers/node/design/errors).  Most
+notably:
+
+* most arguments are passed via named properties of an "args" object, and
+* passing invalid arguments into the library results in thrown exceptions that
+  _should not be caught_.  Don't pass bad values in.
+
+The only interfaces currently provided are:
+
+* [forkExecWait](#forkexecwait)`(args, callback)`: like
+  `child_process.execFile`, but all operational errors are emitted
+  asynchronously, errors are more descriptive, and there's a crisper summary of
+  exactly what happened.
+* [interpretChildProcessResult](#interpretchildprocessresult)`(args)`:
+  lower-level function for taking the result of one of Node's `child_process`
+  functions and producing a normalized summary of what happened.
+
+**One of the biggest challenges in using Node's child\_process interfaces is
+properly interpreting the result.**  When you kick off a child process (as with
+fork/exec), there are basically four possible outcomes:
+
+1. Node failed to fork or exec the child process at all.
+   (`error` is non-null, `status` is null, and `signal` is null)
+2. The child process was successfully forked and exec'd, but terminated
+   abnormally due to a signal.
+   (`error` is non-null, `status` is null, and `signal` is non-null)
+3. The child process was successfully forked and exec'd and exited
+   with a status code other than 0.
+   (`error` is non-null, `status` is a non-zero integer, and `signal` is null).
+4. The child process was successfully forked and exec'd and exited with
+   a status code of 0.
+   (`error` is null, `status` is 0, and `signal` is null.)
+
+Most code doesn't handle (1) at all, since it usually results in the
+child\_process function throwing an exception rather than calling your callback.
+Most use-cases want to treat (1), (2), and (3) as failure cases and generate a
+descriptive error for them, but the built-in Errors are not very descriptive.
+
+The interfaces here attempt to make the common case very easy (providing a
+descriptive, non-null Error in cases (1) through (3), but not (4)), while still
+allowing more complex callers to easily determine exactly what happened.  These
+interfaces do this by taking the result of the underlying Node API function and
+producing an `info` object with properties:
+
+* **error**: null if the child process was created and terminated normally with
+  exit\_status 0.  This is a non-null, descriptive error if the child process was
+  not created at all, if the process was terminated abnormally by a signal, or
+  if the process was terminated normally with a non-zero exit status.
+* **status**: the wait(2) numeric status code if the child process exited
+  normally, and null otherwise.
+* **signal**: the name of the signal that terminated the child process if the
+* child process exited abnormally as a result of a signal, or null otherwise
+
+
+## forkExecWait
+
+Like the built-in `child_process.execFile`, this function forks a child process,
+exec's the requested command, waits for it to exit, and captures the full stdout
+and stderr.  The file should be an executable on the caller's PATH.  It is
+_not_ passed through `bash -c` as would happen with `child_process.exec`.
+
+### Arguments
+
+```javascript
+forkExecWait(args, callback)
+```
+
+The main argument is:
+
+* **argv** (array of string): command-line arguments, _including the command
+  name itself_.  If you want to run "ls -l", this should be `[ 'ls', '-l' ]`.
+
+The following arguments have the same semantics as for Node's built-in
+`child_process.execFile` except where otherwise noted:
+
+* **timeout** (int: milliseconds): maximum time the child process may run before
+  SIGKILL will be sent to it.  If 0, then there is no timeout.  (Note that Node
+  lets you override the signal used and defaults to SIGTERM.  This interface
+  always uses SIGKILL.)
+* **cwd** (string): working directory
+* **encoding** (string): encoding for stdout and stderr
+* **env** (object): environment variables
+* **maxBuffer** (int): bytes of stdout and stderr that will be buffered
+* **uid** (int): uid for child process
+* **gid** (int): gid for child process
+* **includeStderr** (boolean): if the process exits with a non-zero status,
+  the output of `stderr` will be trimmed and included in the error message.
+  Defaults to `false`.
+
+### Return value
+
+The return value is the same as `child_process.execFile` except when that
+function would throw an exception, in which case this function will return
+`null` and the error that would have been thrown is instead emitted to the
+callback (as you'd probably have expected Node to do).
+
+### Callback
+
+The callback is invoked as `callback(err, info)`, where `info` always has
+properties:
+
+* **error**, **status**, **signal**: see description of "info" object above.
+  `info.error` is the same as the `err` argument.
+* **stdout**: the string contents of the command's stdout.  This is unspecified
+  if the process was not successfully exec'd.
+* **stderr**: the string contents of the command's stderr.  This is unspecified
+  if the process was not successfully exec'd.
+
+### Error handling
+
+As described above, the interface throws on programmer errors, and these should
+not be handled.  Operational errors are emitted asynchronously.  See the four
+possible outcomes described above for what those are.
+
+### Examples
+
+Normal command:
+
+```javascript
+forkExecWait({
+    'argv': [ 'echo', 'hello', 'world' ]
+}, function (err, info) {
+    console.log(info);
+});
+```
+
+```javascript
+{ error: null,
+  status: 0,
+  signal: null,
+  stdout: 'hello world\n',
+  stderr: '' }
+```
+
+Successful fork/exec, command fails:
+
+```javascript
+forkExecWait({
+    'argv': [ 'grep', 'foobar' '/nonexistent_file' ]
+}, function (err, info) {
+    console.log(info);
+});
+```
+
+```javascript
+{ error: 
+   { [VError: exec "grep foobar /nonexistent_file": exited with status 2]
+     jse_shortmsg: 'exec "grep foobar /nonexistent_file"',
+     jse_summary: 'exec "grep foobar /nonexistent_file": exited with status 2',
+     jse_cause: 
+      { [VError: exited with status 2]
+        jse_shortmsg: 'exited with status 2',
+        jse_summary: 'exited with status 2',
+        message: 'exited with status 2' },
+     message: 'exec "grep foobar /nonexistent_file": exited with status 2' },
+  status: 2,
+  signal: null,
+  stdout: '',
+  stderr: 'grep: /nonexistent_file: No such file or directory\n' }
+```
+
+Failed fork/exec: command not found:
+
+```javascript
+forkExecWait({
+    'argv': [ 'nonexistent', 'command' ]
+}, function (err, info) {
+    console.log(info);
+});
+```
+
+```javascript
+{ error: 
+   { [VError: exec "nonexistent command": spawn nonexistent ENOENT]
+     jse_shortmsg: 'exec "nonexistent command"',
+     jse_summary: 'exec "nonexistent command": spawn nonexistent ENOENT',
+     jse_cause: 
+      { [Error: spawn nonexistent ENOENT]
+        code: 'ENOENT',
+        errno: 'ENOENT',
+        syscall: 'spawn nonexistent',
+        path: 'nonexistent',
+        cmd: 'nonexistent command' },
+     message: 'exec "nonexistent command": spawn nonexistent ENOENT' },
+  status: null,
+  signal: null,
+  stdout: '',
+  stderr: '' }
+```
+
+Failed fork/exec: command is not executable (note: Node throws on this, while
+this library emits an error asynchronously, since this is an operational error):
+
+```javascript
+forkExecWait({
+    'argv': [ '/dev/null' ]
+}, function (err, info) {
+    console.log(info);
+});
+```
+
+```javascript
+{ error: 
+   { [VError: exec "/dev/null": spawn EACCES]
+     jse_shortmsg: 'exec "/dev/null"',
+     jse_summary: 'exec "/dev/null": spawn EACCES',
+     jse_cause: { [Error: spawn EACCES] code: 'EACCES', errno: 'EACCES', syscall: 'spawn' },
+     message: 'exec "/dev/null": spawn EACCES' },
+  status: null,
+  signal: null,
+  stdout: '',
+  stderr: '' }
+```
+
+Command times out (killed by our SIGKILL after 3 seconds):
+
+```javascript
+forkExecWait({
+    'argv': [ 'sleep', '4' ],
+    'timeout': 3000,
+}, function (err, info) {
+    console.log(info);
+});
+```
+
+```javascript
+{ error: 
+   { [VError: exec "sleep 2": unexpectedly terminated by signal SIGKILL]
+     jse_shortmsg: 'exec "sleep 2"',
+     jse_summary: 'exec "sleep 2": unexpectedly terminated by signal SIGKILL',
+     jse_cause: 
+      { [VError: unexpectedly terminated by signal SIGKILL]
+        jse_shortmsg: 'unexpectedly terminated by signal SIGKILL',
+        jse_summary: 'unexpectedly terminated by signal SIGKILL',
+        message: 'unexpectedly terminated by signal SIGKILL' },
+     message: 'exec "sleep 2": unexpectedly terminated by signal SIGKILL' },
+  status: null,
+  signal: 'SIGKILL',
+  stdout: '',
+  stderr: '' }
+```
+
+
+## interpretChildProcessResult
+
+This lower-level function takes the results of one of the `child_process`
+functions and produces the `info` object described above, including a more
+descriptive Error (if there was one).
+
+### Arguments
+
+```javascript
+interpretChildProcessResult(args)
+```
+
+Named arguments are:
+
+* **label** (string): label for the child process.  This can be just the command
+  (e.g., "grep"), the full argument string (e.g., "grep foo /my/files"), a
+  human-readable label (e.g., "grep subprocess"), or whatever else you want to
+  report with an optional error.
+* **error** (optional Error): error object reported by one of Node's
+  child_process functions.  Per the Node docs, this should be either `null` or
+  an instance of Error.
+
+### Return value
+
+The return value is an `info` object with the `error`, `status`, and `signal`
+properties described above.
+
+
+### Error handling
+
+As described above, the interface throws on programmer errors, and these should
+not be handled.  There are no operational errors for this interface.
+
+
+# Contributions
+
+Contributions welcome.  Code should be "make prepush" clean.  To run "make
+prepush", you'll need these tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
+
+If you're changing something non-trivial or user-facing, you may want to submit
+an issue first.
diff --git a/src/vm/node_modules/forkexec/lib/forkexec.js b/src/vm/node_modules/forkexec/lib/forkexec.js
new file mode 100644
index 00000000..cde4d21f
--- /dev/null
+++ b/src/vm/node_modules/forkexec/lib/forkexec.js
@@ -0,0 +1,165 @@
+/*
+ * lib/forkexec.js: sane child process library
+ */
+
+var mod_assertplus = require('assert-plus');
+var mod_child = require('child_process');
+var VError = require('verror');
+
+exports.forkExecWait = forkExecWait;
+exports.interpretChildProcessResult = interpretChildProcessResult;
+
+/*
+ * forkExecWait(args, callback): similar to Node's child_process.execFile().
+ * See README.md for interface details.
+ */
+function forkExecWait(args, callback)
+{
+	var cmd, cmdstr, cmdargs, options;
+	var passthru, rv;
+
+	mod_assertplus.object(args, 'args');
+	mod_assertplus.arrayOfString(args.argv, 'args.argv');
+	mod_assertplus.optionalString(args.cwd, 'args.cwd');
+	mod_assertplus.optionalObject(args.env, 'args.env');
+	mod_assertplus.optionalNumber(args.timeout, 'args.timeout');
+	mod_assertplus.optionalNumber(args.maxBuffer, 'args.maxBuffer');
+	mod_assertplus.optionalNumber(args.uid, 'args.uid');
+	mod_assertplus.optionalNumber(args.gid, 'args.gid');
+	mod_assertplus.optionalBool(args.includeStderr, 'args.stderr');
+
+	cmd = args.argv[0];
+	cmdstr = JSON.stringify(args.argv.join(' '));
+	cmdargs = args.argv.slice(1);
+	options = {};
+	passthru = [ 'cwd', 'encoding', 'env', 'maxBuffer', 'uid', 'gid',
+	    'timeout' ];
+	passthru.forEach(function (field) {
+		if (args.hasOwnProperty(field))
+			options[field] = args[field];
+	});
+
+	if (options.hasOwnProperty('timeout'))
+		options['killSignal'] = 'SIGKILL';
+
+	/*
+	 * Node returns most operational errors asynchronously here, but some
+	 * are synchronous (like EACCES from exec(2)).  We want to make these
+	 * asynchronous here.
+	 */
+	try {
+		rv = mod_child.execFile(cmd, cmdargs, options,
+		    function (error, stdout, stderr) {
+			onChildExited(cmdstr, callback, error, stdout, stderr,
+			    args.includeStderr);
+		    });
+	} catch (ex) {
+		rv = null;
+		setImmediate(onChildExited, cmdstr, callback, ex, '', '',
+		    args.includeStderr);
+	}
+
+	return (rv);
+}
+
+function onChildExited(cmdstr, callback, error, stdout, stderr, includeStderr)
+{
+	var info;
+	var extra;
+
+	if (!includeStderr || typeof (stderr) !== 'string' ||
+	    (extra = stderr.trim()) === '') {
+		extra = null;
+	}
+
+	info = interpretChildProcessResult({
+	    'label': cmdstr,
+	    'error': error,
+	    '_extra': extra
+	});
+
+	info.stdout = stdout;
+	info.stderr = stderr;
+	callback(info.error, info);
+}
+
+/*
+ * Common function for constructing an "info" object from a call to one of
+ * Node's child_process functions.  This function effectively normalizes the
+ * various possible failure cases from child process exits.  Arguments:
+ *
+ *     label	label for the child process.  This can be just the command
+ *              (e.g., "grep"), the full argument string (e.g., "grep foo
+ *              /my/files"), a human-readable label (e.g., "grep subprocess"),
+ *              or whatever else you want to report with an optional error.
+ *
+ *     error	error object reported by one of Node's child_process functions
+ *
+ * The return value is the object described in the README.
+ */
+function interpretChildProcessResult(args)
+{
+	var info, err;
+	var error;
+
+	mod_assertplus.object(args, 'args');
+	mod_assertplus.string(args.label, 'args.label');
+	mod_assertplus.optionalString(args._extra, 'args._extra');
+
+	error = args.error;
+	info = {
+	    'error': null,
+	    'status': null,
+	    'signal': null
+	};
+
+	if (error === null) {
+		info.status = 0;
+		return (info);
+	}
+
+	/*
+	 * child_process.execFile() is documented to produce either null
+	 * or an instance of Error.
+	 */
+	mod_assertplus.ok(error instanceof Error,
+	    'child_process function returned non-null, non-Error');
+	if (error.signal) {
+		/*
+		 * We deliberately don't pass "error" to the VError
+		 * constructor because the "message" on Node's error is
+		 * non-idiomatic for Unix programs.
+		 */
+		err = new VError('unexpectedly terminated by signal %s',
+		    error.signal);
+		info.signal = error.signal;
+	} else if (typeof (error.code) == 'number') {
+		/* See above. */
+		if (args._extra) {
+			err = new VError('exited with status %d: %s',
+			    error.code, args._extra);
+		} else {
+			err = new VError('exited with status %d', error.code);
+		}
+		info.status = error.code;
+	} else {
+		/*
+		 * In this case, fork() or exec() probably failed.
+		 * Neither "signal" nor "status" will be provided to the
+		 * caller since no child process was created.  In this
+		 * case, we use the underlying error as a cause because
+		 * it may well be meaningful.
+		 *
+		 * Note that this kind of error can have a "code" on it,
+		 * but it's not the status code of the program.  Node
+		 * uses "code" on other kinds of errors.  That's why the
+		 * previous condition checks whether "code" is a number,
+		 * not just whether it's present.
+		 */
+		err = error;
+	}
+
+	mod_assertplus.ok(err instanceof Error);
+	info.error = new VError(err, 'exec %s', args.label);
+	return (info);
+}
diff --git a/src/vm/node_modules/forkexec/package.json b/src/vm/node_modules/forkexec/package.json
new file mode 100644
index 00000000..f2b69d58
--- /dev/null
+++ b/src/vm/node_modules/forkexec/package.json
@@ -0,0 +1,91 @@
+{
+  "_args": [
+    [
+      {
+        "raw": "forkexec",
+        "scope": null,
+        "escapedName": "forkexec",
+        "name": "forkexec",
+        "rawSpec": "",
+        "spec": "latest",
+        "type": "tag"
+      },
+      "/root/smartos-live/src/vm"
+    ]
+  ],
+  "_from": "forkexec@latest",
+  "_id": "forkexec@1.1.0",
+  "_inCache": true,
+  "_location": "/forkexec",
+  "_nodeVersion": "0.12.8",
+  "_npmOperationalInternal": {
+    "host": "packages-16-east.internal.npmjs.com",
+    "tmp": "tmp/forkexec-1.1.0.tgz_1468519415244_0.7898068625945598"
+  },
+  "_npmUser": {
+    "name": "jclulow",
+    "email": "josh@sysmgr.org"
+  },
+  "_npmVersion": "2.14.9",
+  "_phantomChildren": {},
+  "_requested": {
+    "raw": "forkexec",
+    "scope": null,
+    "escapedName": "forkexec",
+    "name": "forkexec",
+    "rawSpec": "",
+    "spec": "latest",
+    "type": "tag"
+  },
+  "_requiredBy": [
+    "#USER"
+  ],
+  "_resolved": "https://registry.npmjs.org/forkexec/-/forkexec-1.1.0.tgz",
+  "_shasum": "abd8cee71277bfaa5d23380a84199a324bb2b0e6",
+  "_shrinkwrap": null,
+  "_spec": "forkexec",
+  "_where": "/root/smartos-live/src/vm",
+  "author": {
+    "name": "Joyent",
+    "url": "joyent.com"
+  },
+  "bugs": {
+    "url": "https://github.com/joyent/node-forkexec/issues"
+  },
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "verror": "^1.6.0"
+  },
+  "description": "sane child process library",
+  "devDependencies": {},
+  "directories": {},
+  "dist": {
+    "shasum": "abd8cee71277bfaa5d23380a84199a324bb2b0e6",
+    "tarball": "https://registry.npmjs.org/forkexec/-/forkexec-1.1.0.tgz"
+  },
+  "gitHead": "5427cedebd103275b0ba3e0733dc586b80446d0e",
+  "homepage": "https://github.com/joyent/node-forkexec#readme",
+  "license": "MIT",
+  "main": "./lib/forkexec.js",
+  "maintainers": [
+    {
+      "name": "dap",
+      "email": "dap@cs.brown.edu"
+    },
+    {
+      "name": "jclulow",
+      "email": "josh@sysmgr.org"
+    }
+  ],
+  "name": "forkexec",
+  "optionalDependencies": {},
+  "readme": "ERROR: No README data found!",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/joyent/node-forkexec.git"
+  },
+  "scripts": {
+    "test": "make test"
+  },
+  "version": "1.1.0"
+}
diff --git a/src/vm/node_modules/vasync/lib/vasync.js b/src/vm/node_modules/vasync/lib/vasync.js
index 1b7b5646..85b5d3a0 100644
--- a/src/vm/node_modules/vasync/lib/vasync.js
+++ b/src/vm/node_modules/vasync/lib/vasync.js
@@ -23,6 +23,7 @@ exports.queue = queue;
 exports.queuev = queuev;
 exports.barrier = barrier;
 exports.waterfall = waterfall;
+exports.race = race;
 
 if (!global.setImmediate) {
 	global.setImmediate = function (func) {
@@ -762,7 +763,7 @@ function waterfall_impl(opts)
 
 	rv = {
 	    'operations': funcs.map(function (func) {
-	        return ({
+		return ({
 		    'func': func,
 		    'funcname': func.name || '(anon)',
 		    'status': 'waiting'
@@ -889,3 +890,76 @@ function waterfall_impl(opts)
 	}
 	return (rv);
 }
+
+/*
+ * Given a set of functions that complete asynchronously using the standard
+ * callback(err, result) pattern, invoke them all, but only invoke the callback
+ * for the first function to complete. The other callback invocations, if any,
+ * are ignored.  See README.md for details.
+ */
+function race(funcs, callback)
+{
+	var rv, doneOne, i;
+
+	mod_assert.ok(Array.isArray(funcs),
+	    '"funcs" must be specified and must be an array');
+	mod_assert.ok(arguments.length == 1 || typeof (callback) == 'function',
+	    '"callback" must be a function');
+
+	rv = {
+	    'operations': new Array(funcs.length),
+	    'successes': [],
+	    'ndone': 0,
+	    'nerrors': 0
+	};
+
+	if (funcs.length === 0) {
+		if (callback)
+			setImmediate(function () { callback(null, rv); });
+		return (rv);
+	}
+
+	function once(fn) {
+		var f = function () {
+			if (f.called)
+				return;
+			f.called = true;
+			fn.apply(this, arguments);
+		};
+		f.called = false;
+		return (f);
+	}
+
+	callback = once(callback);
+
+	doneOne = function (entry) {
+		return (function (err, result) {
+			mod_assert.equal(entry['status'], 'pending');
+
+			entry['err'] = err;
+			entry['result'] = result;
+			entry['status'] = err ? 'fail' : 'ok';
+
+			if (err)
+				rv['nerrors']++;
+			else
+				rv['successes'].push(result);
+
+			rv['ndone']++;
+
+			callback.apply(null, arguments);
+		});
+	};
+
+	for (i = 0; i < funcs.length; i++) {
+		rv['operations'][i] = {
+			'func': funcs[i],
+			'funcname': funcs[i].name || '(anon)',
+			'status': 'pending'
+		};
+
+		funcs[i](doneOne(rv['operations'][i]));
+	}
+
+	return (rv);
+}
diff --git a/src/vm/node_modules/vasync/package.json b/src/vm/node_modules/vasync/package.json
index 3fb51250..6dd977c9 100644
--- a/src/vm/node_modules/vasync/package.json
+++ b/src/vm/node_modules/vasync/package.json
@@ -1,35 +1,24 @@
 {
-  "name": "vasync",
-  "version": "2.2.0",
-  "description": "utilities for observable asynchronous control flow",
-  "main": "./lib/vasync.js",
-  "repository": {
-    "type": "git",
-    "url": "git://github.com/davepacheco/node-vasync.git"
-  },
-  "scripts": {
-    "test": "tap --stdout tests/ && ./node_modules/.bin/nodeunit tests/compat.js && ./node_modules/.bin/nodeunit tests/compat_tryEach.js"
-  },
-  "devDependencies": {
-    "tap": "~0.4.8",
-    "nodeunit": "0.8.7"
-  },
-  "dependencies": {
-    "verror": "1.10.0"
-  },
-  "engines": [
-    "node >=0.6.0"
-  ],
-  "license": "MIT",
-  "gitHead": "b267712029d0b7e3e5fe30a8426400027076dfe0",
-  "readme": "# vasync: observable asynchronous control flow\n\nThis module provides several functions for asynchronous control flow.  There are\nmany modules that do this already (notably async.js).  This one's claim to fame\nis improved debuggability.\n\n\n## Observability is important\n\nWorking with Node's asynchronous, callback-based model is much easier with a\nhandful of simple control-flow abstractions, like:\n\n* waterfalls and pipelines (which invoke a list of asynchronous callbacks\n  sequentially)\n* parallel pipelines (which invoke a list of asynchronous callbacks in parallel\n  and invoke a top-level callback when the last one completes).\n* queues\n* barriers\n\nBut these structures also introduce new types of programming errors: failing to\ninvoke the callback can cause the program to hang, and inadvertently invoking it\ntwice can cause all kinds of mayhem that's very difficult to debug.\n\nThe functions in this module keep track of what's going on so that you can\nfigure out what happened when your program goes wrong.  They generally return an\nobject describing details of the current state.  If your program goes wrong, you\nhave several ways of getting at this state:\n\n* On illumos-based systems, use MDB to [find the status object](http://dtrace.org/blogs/bmc/2012/05/05/debugging-node-js-memory-leaks/)\n  and then [print it out](http://dtrace.org/blogs/dap/2012/01/13/playing-with-nodev8-postmortem-debugging/).\n* Provide an HTTP API (or AMQP, or whatever) that returns these pending status\n  objects as JSON (see [kang](https://github.com/davepacheco/kang)).\n* Incorporate a REPL into your program and print out the status object.\n* Use the Node debugger to print out the status object.\n\n## Functions\n\n* [parallel](#parallel-invoke-n-functions-in-parallel): invoke N functions in\n  parallel (and merge the results)\n* [forEachParallel](#foreachparallel-invoke-the-same-function-on-n-inputs-in-parallel):\n  invoke the same function on N inputs in parallel\n* [pipeline](#pipeline-invoke-n-functions-in-series-and-stop-on-failure): invoke\n  N functions in series (and stop on failure)\n* [tryEach](#tryeach-invoke-n-functions-in-series-and-stop-on-success): invoke\n  N functions in series (and stop on success)\n* [forEachPipeline](#foreachpipeline-invoke-the-same-function-on-n-inputs-in-series-and-stop-on-failure):\n  invoke the same function on N inputs in series (and stop on failure)\n* [filter/filterSeries/filterLimit](#filterfilterlimitfilterseries-filter-n-inputs-serially-or-concurrently):\n  filter N inputs serially or concurrently\n* [whilst](#whilst-invoke-a-function-repeatedly-until-a-stopping-condition-is-met):\n  invoke a function repeatedly until a stopping condition is met\n* [waterfall](#waterfall-invoke-n-functions-in-series-stop-on-failure-and-propagate-results):\n  like pipeline, but propagating results between stages\n* [barrier](#barrier-coordinate-multiple-concurrent-operations): coordinate\n  multiple concurrent operations\n* [queue/queuev](#queuequeuev-fixed-size-worker-queue): fixed-size worker queue\n\n### parallel: invoke N functions in parallel\n\nSynopsis: `parallel(args, callback)`\n\nThis function takes a list of input functions (specified by the \"funcs\" property\nof \"args\") and runs them all.  These input functions are expected to be\nasynchronous: they get a \"callback\" argument and should invoke it as\n`callback(err, result)`.  The error and result will be saved and made available\nto the original caller when all of these functions complete.\n\nThis function returns the same \"result\" object it passes to the callback, and\nyou can use the fields in this object to debug or observe progress:\n\n* `operations`: array corresponding to the input functions, with\n    * `func`: input function,\n    * `status`: \"pending\", \"ok\", or \"fail\",\n    * `err`: returned \"err\" value, if any, and\n    * `result`: returned \"result\" value, if any\n* `successes`: \"result\" field for each of \"operations\" where\n  \"status\" == \"ok\" (in no particular order)\n* `ndone`: number of input operations that have completed\n* `nerrors`: number of input operations that have failed\n\nThis status object lets you see in a debugger exactly which functions have\ncompleted, what they returned, and which ones are outstanding.\n\nAll errors are combined into a single \"err\" parameter to the final callback (see\nbelow).\n\nExample usage:\n\n```js\nconsole.log(mod_vasync.parallel({\n    'funcs': [\n        function f1 (callback) { mod_dns.resolve('joyent.com', callback); },\n        function f2 (callback) { mod_dns.resolve('github.com', callback); },\n        function f3 (callback) { mod_dns.resolve('asdfaqsdfj.com', callback); }\n    ]\n}, function (err, results) {\n        console.log('error: %s', err.message);\n        console.log('results: %s', mod_util.inspect(results, null, 3));\n}));\n```\n\nIn the first tick, this outputs:\n\n```js\nstatus: { operations:\n   [ { func: [Function: f1], status: 'pending' },\n     { func: [Function: f2], status: 'pending' },\n     { func: [Function: f3], status: 'pending' } ],\n  successes: [],\n  ndone: 0,\n  nerrors: 0 }\n```\n\nshowing that there are three operations pending and none has yet been started.\nWhen the program finishes, it outputs this error:\n\n    error: first of 1 error: queryA ENOTFOUND\n\nwhich encapsulates all of the intermediate failures.  This model allows you to\nwrite the final callback like you normally would:\n\n```js\nif (err)\n  return (callback(err));\n```\n\nand still propagate useful information to callers that don't deal with multiple\nerrors (i.e. most callers).\n\nThe example also prints out the detailed final status, including all of the\nerrors and return values:\n\n```js\nresults: { operations:\n   [ { func: [Function: f1],\n       funcname: 'f1',\n       status: 'ok',\n       err: null,\n       result: [ '165.225.132.33' ] },\n     { func: [Function: f2],\n       funcname: 'f2',\n       status: 'ok',\n       err: null,\n       result: [ '207.97.227.239' ] },\n     { func: [Function: f3],\n       funcname: 'f3',\n       status: 'fail',\n       err: { [Error: queryA ENOTFOUND] code: 'ENOTFOUND',\n          errno: 'ENOTFOUND', syscall: 'queryA' },\n       result: undefined } ],\n  successes: [ [ '165.225.132.33' ], [ '207.97.227.239' ] ],\n  ndone: 3,\n  nerrors: 1 }\n```\n\nYou can use this if you want to handle all of the errors individually or to get\nat all of the individual return values.\n\nNote that \"successes\" is provided as a convenience and the order of items in\nthat array may not correspond to the order of the inputs.  To consume output in\nan ordered manner, you should iterate over \"operations\" and pick out the result\nfrom each item.\n\n\n### forEachParallel: invoke the same function on N inputs in parallel\n\nSynopsis: `forEachParallel(args, callback)`\n\nThis function is exactly like `parallel`, except that the input is specified as\na *single* function (\"func\") and a list of inputs (\"inputs\").  The function is\ninvoked on each input in parallel.\n\nThis example is exactly equivalent to the one above:\n\n```js\nconsole.log(mod_vasync.forEachParallel({\n    'func': mod_dns.resolve,\n    'inputs': [ 'joyent.com', 'github.com', 'asdfaqsdfj.com' ]\n}, function (err, results) {\n    console.log('error: %s', err.message);\n    console.log('results: %s', mod_util.inspect(results, null, 3));\n}));\n```\n\n### pipeline: invoke N functions in series (and stop on failure)\n\nSynopsis: `pipeline(args, callback)`\n\nThe named arguments (that go inside `args`) are:\n\n* `funcs`: input functions, to be invoked in series\n* `arg`: arbitrary argument that will be passed to each function\n\nThe functions are invoked in order as `func(arg, callback)`, where \"arg\" is the\nuser-supplied argument from \"args\" and \"callback\" should be invoked in the usual\nway.  If any function emits an error, the whole pipeline stops.\n\nThe return value and the arguments to the final callback are exactly the same as\nfor `parallel`.  The error object for the final callback is just the error\nreturned by whatever pipeline function failed (if any).\n\nThis example is similar to the one above, except that it runs the steps in\nsequence and stops early because `pipeline` stops on the first error:\n\n```js\nconsole.log(mod_vasync.pipeline({\n    'funcs': [\n        function f1 (_, callback) { mod_fs.stat('/tmp', callback); },\n        function f2 (_, callback) { mod_fs.stat('/noexist', callback); },\n        function f3 (_, callback) { mod_fs.stat('/var', callback); }\n    ]\n}, function (err, results) {\n        console.log('error: %s', err.message);\n        console.log('results: %s', mod_util.inspect(results, null, 3));\n}));\n```\n\nAs a result, the status after the first tick looks like this:\n\n```js\n{ operations:\n   [ { func: [Function: f1], status: 'pending' },\n     { func: [Function: f2], status: 'waiting' },\n     { func: [Function: f3], status: 'waiting' } ],\n  successes: [],\n  ndone: 0,\n  nerrors: 0 }\n```\n\nNote that the second and third stages are now \"waiting\", rather than \"pending\"\nin the `parallel` case.  The error and complete result look just like the\nparallel case.\n\n### tryEach: invoke N functions in series (and stop on success)\n\nSynopsis: `tryEach(funcs, callback)`\n\nThe `tryEach` function invokes each of the asynchronous functions in `funcs`\nserially. Each function takes a single argument: an interstitial-callback.\n`tryEach` will keep calling the functions until one of them succeeds (or they\nall fail).  At the end, the terminating-callback is invoked with the error\nand/or results provided by the last function that was called (either the last\none that failed or the first one that succeeded).\n\nThis example is similar to the one above, except that it runs the steps in\nsequence and stops early because `tryEach` stops on the first success:\n\n```js\nconsole.log(mod_vasync.tryEach([\n        function f1 (callback) { mod_fs.stat('/notreal', callback); },\n        function f2 (callback) { mod_fs.stat('/noexist', callback); },\n        function f3 (callback) { mod_fs.stat('/var', callback); },\n        function f4 (callback) { mod_fs.stat('/noexist', callback); }\n    ],\n    function (err, results) {\n            console.log('error: %s', err);\n            console.log('results: %s', mod_util.inspect(results));\n}));\n\n```\n\nThe above code will stop when it finishes f3, and we will only print a single\nresult and no errors:\n\n```js\nerror: null\nresults: { dev: 65760,\n  mode: 16877,\n  nlink: 41,\n  uid: 0,\n  gid: 3,\n  rdev: -1,\n  blksize: 2560,\n  ino: 11,\n  size: 41,\n  blocks: 7,\n  atime: Thu May 28 2015 16:21:25 GMT+0000 (UTC),\n  mtime: Thu Jan 21 2016 22:08:50 GMT+0000 (UTC),\n  ctime: Thu Jan 21 2016 22:08:50 GMT+0000 (UTC) }\n```\n\nIf we comment out `f3`, we get the following output:\n\n```js\nerror: Error: ENOENT, stat '/noexist'\nresults: undefined\n```\n\nNote that: there is a mismatch (inherited from `async`) between the semantics\nof the interstitial callback and the sematics of the terminating callback. See\nthe following example:\n\n```js\nconsole.log(mod_vasync.tryEach([\n        function f1 (callback) { callback(new Error()); },\n        function f2 (callback) { callback(new Error()); },\n        function f3 (callback) { callback(null, 1, 2, 3); },\n        function f4 (callback) { callback(null, 1); }\n    ],\n    function (err, results) {\n            console.log('error: %s', err);\n            console.log('results: %s', mod_util.inspect(results));\n}));\n\n```\n\nWe pass one or more results to the terminating-callback via the\ninterstitial-callback's arglist -- `(err, res1, res2, ...)`. From the\ncallback-implementor's perspective, the results get wrapped up in an array\n`(err, [res1, res2, ...])` -- unless there is only one result, which simply\ngets passed through as the terminating callback's second argument. This means\nthat when we call the callback in `f3` above, the terminating callback receives\nthe list `[1, 2, 3]` as its second argument. If, we comment out `f3`, we will\nend up calling the callback in `f4` which will end up invoking the terminating\ncallback with a single result: `1`, instead of `[1]`.\n\n\nIn short, be mindful that there is not always a 1:1 correspondence between the\nterminating callback that you define, and the interstitial callback that gets\ncalled from the function.\n\n\n\n### forEachPipeline: invoke the same function on N inputs in series (and stop on failure)\n\nSynopsis: `forEachPipeline(args, callback)`\n\nThis function is exactly like `pipeline`, except that the input is specified as\na *single* function (\"func\") and a list of inputs (\"inputs\").  The function is\ninvoked on each input in series.\n\nThis example is exactly equivalent to the one above:\n\n```js\nconsole.log(mod_vasync.forEachPipeline({\n    'func': mod_dns.resolve,\n    'inputs': [ 'joyent.com', 'github.com', 'asdfaqsdfj.com' ]\n}, function (err, results) {\n    console.log('error: %s', err.message);\n    console.log('results: %s', mod_util.inspect(results, null, 3));\n}));\n```\n\n### waterfall: invoke N functions in series, stop on failure, and propagate results\n\nSynopsis: `waterfall(funcs, callback)`\n\nThis function works like `pipeline` except for argument passing.\n\nEach function is passed any values emitted by the previous function (none for\nthe first function), followed by the callback to invoke upon completion.  This\ncallback must be invoked exactly once, regardless of success or failure.  As\nconventional in Node, the first argument to the callback indicates an error (if\nnon-null).  Subsequent arguments are passed to the next function in the \"funcs\"\nchain.\n\nIf any function fails (i.e., calls its callback with an Error), then the\nremaining functions are not invoked and \"callback\" is invoked with the error.\n\nThe only difference between waterfall() and pipeline() are the arguments passed\nto each function in the chain.  pipeline() always passes the same argument\nfollowed by the callback, while waterfall() passes whatever values were emitted\nby the previous function followed by the callback.\n\nHere's an example:\n\n```js\nmod_vasync.waterfall([\n    function func1(callback) {\n \tsetImmediate(function () {\n\t\tcallback(null, 37);\n\t});\n    },\n    function func2(extra, callback) {\n\tconsole.log('func2 got \"%s\" from func1', extra);\n\tcallback();\n    }\n], function () {\n\tconsole.log('done');\n});\n```\n\nThis prints:\n\n```\nfunc2 got \"37\" from func1\nbetter stop early\n```\n\n### filter/filterLimit/filterSeries: filter N inputs serially or concurrently\n\nSynopsis: `filter(inputs, filterFunc, callback)`\n\nSynopsis: `filterSeries(inputs, filterFunc, callback)`\n\nSynopsis: `filterLimit(inputs, limit, filterFunc, callback)`\n\nThese functions take an array (of anything) and a function to call on each\nelement of the array.  The function must callback with a true or false value as\nthe second argument or an error object as the first argument.  False values\nwill result in the element being filtered out of the results array.  An error\nobject passed as the first argument will cause the filter function to stop\nprocessing new elements and callback to the caller with the error immediately.\nOriginal input array order is maintained.\n\n`filter` and `filterSeries` are analogous to calling `filterLimit` with\na limit of `Infinity` and `1` respectively.\n\n\n```js\nvar inputs = [\n    'joyent.com',\n    'github.com',\n    'asdfaqsdfj.com'\n];\nfunction filterFunc(input, cb) {\n    mod_dns.resolve(input, function (err, results) {\n        if (err) {\n            cb(null, false);\n        } else {\n            cb(null, true);\n        }\n    }\n}\nmod_vasync.filter(inputs, filterFunc, function (err, results) {\n    // err => undefined\n    // results => ['joyent.com', 'github.com']\n});\n```\n\n### whilst: invoke a function repeatedly until a stopping condition is met\n\nSynopsis: `whilst(testFunc, iterateFunc, callback)`\n\nRepeatedly invoke `iterateFunc` while `testFunc` returns a true value.\n`iterateFunc` is an asychronous function that must call its callback (the first\nand only argument given to it) when it is finished with an optional error\nobject as the first argument, and any other arbitrary arguments.  If an error\nobject is given as the first argument, `whilst` will finish and call `callback`\nwith the error object.  `testFunc` is a synchronous function that must return\na value - if the value resolves to true `whilst` will invoke `iterateFunc`, if\nit resolves to false `whilst` will finish and invoke `callback` with the last\nset of arguments `iterateFunc` called back with.\n\n`whilst` also returns an object suitable for introspecting the current state of\nthe specific `whilst` invocation which contains the following properties:\n\n* `finished`: boolean if this invocation has finished or is in progress\n* `iterations`: number of iterations performed (calls to `iterateFunc`)\n\nCompatible with `async.whilst`\n\n```js\nvar n = 0;\n\nvar w = mod_vasync.whilst(\n    function testFunc() {\n        return (n < 5);\n    },\n    function iterateFunc(cb) {\n        n++;\n        cb(null, {n: n});\n    },\n    function whilstDone(err, arg) {\n        // err => undefined\n        // arg => {n: 5}\n        // w => {finished: true, iterations: 5}\n    }\n);\n\n// w => {finished: false, iterations: 0}\n```\n\n### barrier: coordinate multiple concurrent operations\n\nSynopsis: `barrier([args])`\n\nReturns a new barrier object.  Like `parallel`, barriers are useful for\ncoordinating several concurrent operations, but instead of specifying a list of\nfunctions to invoke, you just say how many (and optionally which ones) are\noutstanding, and this object emits `'drain'` when they've all completed.  This\nis syntactically lighter-weight, and more flexible.\n\n* Methods:\n\n    * start(name): Indicates that the named operation began.  The name must not\n      match an operation which is already ongoing.\n    * done(name): Indicates that the named operation ended.\n\n\n* Read-only public properties (for debugging):\n\n    * pending: Set of pending operations.  Keys are names passed to \"start\", and\n      values are timestamps when the operation began.\n    * recent: Array of recent completed operations.  Each element is an object\n      with a \"name\", \"start\", and \"done\" field.  By default, 10 operations are\n      remembered.\n\n\n* Options:\n\n    * nrecent: number of recent operations to remember (for debugging)\n\nExample: printing sizes of files in a directory\n\n```js\nvar mod_fs = require('fs');\nvar mod_path = require('path');\nvar mod_vasync = require('../lib/vasync');\n\nvar barrier = mod_vasync.barrier();\n\nbarrier.on('drain', function () {\n  console.log('all files checked');\n});\n\nbarrier.start('readdir');\n\nmod_fs.readdir(__dirname, function (err, files) {\n  barrier.done('readdir');\n\n  if (err)\n    throw (err);\n\n  files.forEach(function (file) {\n    barrier.start('stat ' + file);\n\n    var path = mod_path.join(__dirname, file);\n\n    mod_fs.stat(path, function (err2, stat) {\n      barrier.done('stat ' + file);\n      console.log('%s: %d bytes', file, stat['size']);\n    });\n  });\n});\n```\n\nThis emits:\n\n    barrier-readdir.js: 602 bytes\n    foreach-parallel.js: 358 bytes\n    barrier-basic.js: 552 bytes\n    nofail.js: 384 bytes\n    pipeline.js: 490 bytes\n    parallel.js: 481 bytes\n    queue-serializer.js: 441 bytes\n    queue-stat.js: 529 bytes\n    all files checked\n\n\n### queue/queuev: fixed-size worker queue\n\nSynopsis: `queue(worker, concurrency)`\n\nSynopsis: `queuev(args)`\n\nThis function returns an object that allows up to a fixed number of tasks to be\ndispatched at any given time.  The interface is compatible with that provided\nby the \"async\" Node library, except that the returned object's fields represent\na public interface you can use to introspect what's going on.\n\n* Arguments\n\n    * worker: a function invoked as `worker(task, callback)`, where `task` is a\n      task dispatched to this queue and `callback` should be invoked when the\n      task completes.\n    * concurrency: a positive integer indicating the maximum number of tasks\n      that may be dispatched at any time.  With concurrency = 1, the queue\n      serializes all operations.\n\n\n* Methods\n\n    * push(task, [callback]): add a task (or array of tasks) to the queue, with\n      an optional callback to be invoked when each task completes.  If a list of\n      tasks are added, the callback is invoked for each one.\n    * length(): for compatibility with node-async.\n    * close(): signal that no more tasks will be enqueued.  Further attempts to\n      enqueue tasks to this queue will throw.  Once all pending and queued\n      tasks are completed the object will emit the \"end\" event.  The \"end\"\n      event is the last event the queue will emit, and it will be emitted even\n      if no tasks were ever enqueued.\n    * kill(): clear enqueued tasks and implicitly close the queue.  Several\n      caveats apply when kill() is called:\n        * The completion callback will _not_ be called for items purged from\n          the queue.\n        * The drain handler is cleared (for node-async compatibility)\n        * Subsequent calls to kill() or close() are no-ops.\n        * As with close(), it is not legal to call push() after kill().\n\n\n* Read-only public properties (for debugging):\n\n    * concurrency: for compatibility with node-async\n    * worker: worker function, as passed into \"queue\"/\"queuev\"\n    * worker\\_name: worker function's \"name\" field\n    * npending: the number of tasks currently being processed\n    * pending: an object (*not* an array) describing the tasks currently being\n      processed\n    * queued: array of tasks currently queued for processing\n    * closed: true when close() has been called on the queue\n    * ended: true when all tasks have completed processing, and no more\n      processing will occur\n    * killed: true when kill() has been called on the queue\n\n\n* Hooks (for compatibility with node-async):\n\n    * saturated\n    * empty\n    * drain\n\n* Events\n\n    * 'end': see close()\n\nIf the tasks are themselves simple objects, then the entire queue may be\nserialized (as via JSON.stringify) for debugging and monitoring tools.  Using\nthe above fields, you can see what this queue is doing (worker\\_name), which\ntasks are queued, which tasks are being processed, and so on.\n\n### Example 1: Stat several files\n\nHere's an example demonstrating the queue:\n\n```js\nvar mod_fs = require('fs');\nvar mod_vasync = require('../lib/vasync');\n\nvar queue;\n\nfunction doneOne()\n{\n  console.log('task completed; queue state:\\n%s\\n',\n      JSON.stringify(queue, null, 4));\n}\n\nqueue = mod_vasync.queue(mod_fs.stat, 2);\n\nconsole.log('initial queue state:\\n%s\\n', JSON.stringify(queue, null, 4));\n\nqueue.push('/tmp/file1', doneOne);\nqueue.push('/tmp/file2', doneOne);\nqueue.push('/tmp/file3', doneOne);\nqueue.push('/tmp/file4', doneOne);\n\nconsole.log('all tasks dispatched:\\n%s\\n', JSON.stringify(queue, null, 4));\n```\n\nThe initial queue state looks like this:\n\n```js\ninitial queue state:\n{\n    \"nextid\": 0,\n    \"worker_name\": \"anon\",\n    \"npending\": 0,\n    \"pending\": {},\n    \"queued\": [],\n    \"concurrency\": 2\n}\n```\nAfter four tasks have been pushed, we see that two of them have been dispatched\nand the remaining two are queued up:\n\n```js\nall tasks pushed:\n{\n    \"nextid\": 4,\n    \"worker_name\": \"anon\",\n    \"npending\": 2,\n    \"pending\": {\n        \"1\": {\n            \"id\": 1,\n            \"task\": \"/tmp/file1\"\n        },\n        \"2\": {\n            \"id\": 2,\n            \"task\": \"/tmp/file2\"\n        }\n    },\n    \"queued\": [\n        {\n            \"id\": 3,\n            \"task\": \"/tmp/file3\"\n        },\n        {\n            \"id\": 4,\n            \"task\": \"/tmp/file4\"\n        }\n    ],\n    \"concurrency\": 2\n}\n```\n\nAs they complete, we see tasks moving from \"queued\" to \"pending\", and completed\ntasks disappear:\n\n```js\ntask completed; queue state:\n{\n    \"nextid\": 4,\n    \"worker_name\": \"anon\",\n    \"npending\": 1,\n    \"pending\": {\n        \"3\": {\n            \"id\": 3,\n            \"task\": \"/tmp/file3\"\n        }\n    },\n    \"queued\": [\n        {\n            \"id\": 4,\n            \"task\": \"/tmp/file4\"\n        }\n    ],\n    \"concurrency\": 2\n}\n```\n\nWhen all tasks have completed, the queue state looks like it started:\n\n```js\ntask completed; queue state:\n{\n    \"nextid\": 4,\n    \"worker_name\": \"anon\",\n    \"npending\": 0,\n    \"pending\": {},\n    \"queued\": [],\n    \"concurrency\": 2\n}\n```\n\n\n### Example 2: A simple serializer\n\nYou can use a queue with concurrency 1 and where the tasks are themselves\nfunctions to ensure that an arbitrary asynchronous function never runs\nconcurrently with another one, no matter what each one does.  Since the tasks\nare the actual functions to be invoked, the worker function just invokes each\none:\n\n```js\nvar mod_vasync = require('../lib/vasync');\n\nvar queue = mod_vasync.queue(\n    function (task, callback) { task(callback); }, 1);\n\nqueue.push(function (callback) {\n  console.log('first task begins');\n  setTimeout(function () {\n    console.log('first task ends');\n    callback();\n  }, 500);\n});\n\nqueue.push(function (callback) {\n  console.log('second task begins');\n  process.nextTick(function () {\n    console.log('second task ends');\n    callback();\n  });\n});\n```\n\nThis example outputs:\n\n    $ node examples/queue-serializer.js\n    first task begins\n    first task ends\n    second task begins\n    second task ends\n",
-  "readmeFilename": "README.md",
-  "bugs": {
-    "url": "https://github.com/davepacheco/node-vasync/issues"
-  },
-  "homepage": "https://github.com/davepacheco/node-vasync",
-  "_id": "vasync@2.2.0",
-  "_shasum": "e954b29f3da731929b43e5de172345b747ab8ef9",
-  "_from": "git://github.com/joyent/node-vasync.git",
-  "_resolved": "git://github.com/joyent/node-vasync.git#b267712029d0b7e3e5fe30a8426400027076dfe0"
+	"name": "vasync",
+	"version": "2.3.0",
+	"description": "utilities for observable asynchronous control flow",
+	"main": "./lib/vasync.js",
+	"repository": {
+		"type": "git",
+		"url": "git://github.com/davepacheco/node-vasync.git"
+	},
+	"scripts": {
+		"test": "./node_modules/.bin/tap --stdout tests/ && ./node_modules/.bin/nodeunit tests/compat.js && ./node_modules/.bin/nodeunit tests/compat_tryEach.js"
+	},
+	"devDependencies": {
+		"tap": "~0.4.8",
+		"nodeunit": "0.8.7"
+	},
+	"dependencies": {
+		"verror": "1.10.0"
+	},
+	"engines": [
+		"node >=0.6.0"
+	],
+	"license": "MIT"
 }
