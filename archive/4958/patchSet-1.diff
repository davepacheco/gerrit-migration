commit 1150df35e60fdbefa8f21773f3f09c9b47e3034f (refs/changes/58/4958/1)
Author: John Levon <john.levon@joyent.com>
Date:   2018-10-15T12:53:49+00:00 (12 months ago)
    
    TOOLS-2090 MG should support ./configure arguments
    TOOLS-2091 MG uploads should be visible as Jenkins build artifacts
    TOOLS-2092 MG shouldn't hard-code the target from the job name

diff --git a/Makefile b/Makefile
index 416696a..97ec6ad 100644
--- a/Makefile
+++ b/Makefile
@@ -13,7 +13,7 @@
 #
 # Environment variables used:
 #
-# - JOB_NAME (typically set by the Jenkins jobs that run this) is used for
+# - MG_TARGET (typically set by the Jenkins jobs that run this) is used for
 #   some targets.
 # - UPLOAD_SUBDIRS can be used to specify extra bits subdirs to upload
 #   in the "upload_jenkins" target.
@@ -29,6 +29,12 @@ TOP := $(shell pwd)
 BUILD_DIR=$(TOP)/build
 BITS_DIR=$(TOP)/bits
 
+#
+# We used to treat $JOB_NAME from Jenkins as the target, so default back to that
+# if $MG_TARGET is not set.
+#
+MG_TARGET ?= $(JOB_NAME)
+
 # Tools
 MAKE = make
 TAR = tar
@@ -2689,7 +2695,7 @@ endif	# $(JOYENT_BUILD) == true
 
 #
 # These targets will be built for every member of the "headnode*" family
-# of MG jobs:
+# of MG targets:
 #
 HEADNODE_TARGETS = \
 	cleanimgcruft \
@@ -2699,7 +2705,7 @@ HEADNODE_TARGETS = \
 	releasejson
 
 #
-# These targets are only built for the base "headnode" job.
+# These targets are only built for the base "headnode" target.
 #
 HEADNODE_BASE_ONLY_TARGETS = \
 	gz-tools
@@ -2905,14 +2911,11 @@ PLATFORM_BITS= \
 	$(PLATFORM_BITS_TAR_BOOT)
 PLATFORM_MANIFEST_BIT=platform.imgmanifest
 
-platform : PLAT_SUFFIX += ""
-platform : PLAT_CONF_ARGS += "no"
-platform : PLAT_FLAVOR = ""
+ILLUMOS_ENABLE_DEBUG="no"
+PLAT_FLAVOR=""
+
 platform-debug : PLAT_SUFFIX += "-debug"
-platform-debug : PLAT_CONF_ARGS += "exclusive"
-platform-debug : PLAT_FLAVOR = ""
-platform-smartos : PLAT_SUFFIX += ""
-platform-smartos : PLAT_CONF_ARGS += "no"
+platform-debug : ILLUMOS_ENABLE_DEBUG = "exclusive"
 platform-smartos : PLAT_FLAVOR = "-smartos"
 
 
@@ -2940,9 +2943,14 @@ smartos_live_make_check:
 # PATH: Ensure using GCC from SFW as require for platform build.
 $(PLATFORM_BITS): build/smartos-live/configure.mg build/smartos-live/configure-branches
 	@echo "# Build platform: branch $(SMARTOS_LIVE_BRANCH), sha $(SMARTOS_LIVE_SHA), time `date -u +%Y%m%dT%H%M%SZ`"
+	#
+	# We could use -d in PLAT_CONFIGURE_ARGS, but historically, we
+	# enabled a debug build via the environment variable, so we'll keep that
+	# around for building older platforms as needed.
+	#
 	(cd build/smartos-live \
-		&& PATH=/usr/sfw/bin:$(PATH) \
-			ILLUMOS_ENABLE_DEBUG=$(PLAT_CONF_ARGS) ./configure \
+		&& PATH=/usr/sfw/bin:$(PATH) ILLUMOS_ENABLE_DEBUG=$(ILLUMOS_ENABLE_DEBUG) \
+			./configure $(PLAT_CONFIGURE_ARGS) \
 		&& PATH=/usr/sfw/bin:$(PATH) \
 			BUILDSTAMP=$(TIMESTAMP) \
 			gmake world \
@@ -3093,10 +3101,10 @@ upload_jenkins:
 
 # Upload bits we want to keep for a Jenkins build to manta
 manta_upload_jenkins:
-	@[[ -z "$(JOB_NAME)" ]] \
-		&& echo "error: JOB_NAME isn't set (is this being run under Jenkins?)" \
+	@[[ -z "$(MG_TARGET)" ]] \
+		&& echo "error: MG_TARGET isn't set (is this being run under Jenkins?)" \
 		&& exit 1 || true
-	TRACE=1 ./tools/mantaput-bits "$(BRANCH)" "$(TRY_BRANCH)" "$(TIMESTAMP)" $(MG_OUT_PATH)/$(JOB_NAME) $(JOB_NAME) $(UPLOAD_SUBDIRS)
+	TRACE=1 ./tools/mantaput-bits "$(BRANCH)" "$(TRY_BRANCH)" "$(TIMESTAMP)" $(MG_OUT_PATH)/$(MG_TARGET) $(MG_TARGET) $(UPLOAD_SUBDIRS)
 
 %_upload_manta: %
 	./tools/manta-upload "$*"
@@ -3105,11 +3113,11 @@ manta_upload_jenkins:
 	./tools/local-bitsdir-copy "$*"
 
 # Publish the image for this Jenkins job to https://updates.joyent.com, if
-# appropriate. No-op if the current JOB_NAME doesn't have a "*_publish_image"
+# appropriate. No-op if the current MG_TARGET doesn't have a "*_publish_image"
 # target.
 jenkins_publish_image:
-	@[[ -z "$(JOB_NAME)" ]] \
-		&& echo "error: JOB_NAME isn't set (is this being run under Jenkins?)" \
+	@[[ -z "$(MG_TARGET)" ]] \
+		&& echo "error: MG_TARGET isn't set (is this being run under Jenkins?)" \
 		&& exit 1 || true
-	@[[ -z "$(shell grep '^$(JOB_NAME)_publish_image\>' Makefile || true)" ]] \
-		|| make $(JOB_NAME)_publish_image
+	@[[ -z "$(shell grep '^$(MG_TARGET)_publish_image\>' Makefile || true)" ]] \
+		|| make $(MG_TARGET)_publish_image
diff --git a/docs/index.md b/docs/index.md
index 5e19f7e..6a505e2 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -67,9 +67,9 @@ Using vmapi as an example (see "Prerequisites" section below):
     cd mountain-gorilla
     ./configure -t vmapi -b master -d Joyent_Dev         # 2.
     gmake vmapi                                          # 3.
-    JOB_NAME=vmapi gmake manta_upload_jenkins            # 4.
+    MG_TARGET=vmapi gmake manta_upload_jenkins            # 4.
         # New bits at /Joyent_Dev/stor/builds/vmapi/$branch-$timestamp/
-    JOB_NAME=vmapi gmake jenkins_publish_image           # 5.
+    MG_TARGET=vmapi gmake jenkins_publish_image           # 5.
         # `updates-imgadm list name=vmapi` to see added VMAPI image.
 
 The full set of targets that MG supports is both in
@@ -202,14 +202,14 @@ Simplified, what most of our jobs do here is:
 
     git clone git@github.com:joyent/mountain-gorilla.git   # aka "MG"
     cd mountain-gorilla
-    ./configure -t <job>
-    gmake <job>
+    ./configure -t <target>
+    gmake <target>
     gmake manta_upload_jenkins  # which runs mountain-gorilla.git/tools/mantaput-bits
     gmake jenkins_publish_image # which uploads to updates.joyent.com
 
-The `configure -t <job>` here usually clones the repo(s) required and pulls down
-dependencies from npm and Manta. This is mountain-gorilla.git/configure in case
-you need to look at it.
+The `configure -t <target>` here usually clones the repo(s) required and pulls
+down dependencies from npm and Manta. This is mountain-gorilla.git/configure in
+case you need to look at it.
 
 With all the components downloaded `gmake <job>` builds all the bits that will
 end up in /opt/smartdc/$app in the zone. This is the part that's critical to
diff --git a/tools/jenkins-build b/tools/jenkins-build
index b4936c8..40614fe 100755
--- a/tools/jenkins-build
+++ b/tools/jenkins-build
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 #
@@ -135,6 +135,12 @@ env
 echo ""
 echo "#---------------------- configure"
 
+#
+# The target defaults to the job name (e.g. platform-debug), but a job can also
+# directly specify MG_TARGET as a parameter to over-ride this.
+#
+[[ -z "$MG_TARGET" ]] && MG_TARGET=$JOB_NAME
+
 [[ -z "$BRANCH" ]] && BRANCH=master
 # Note the "-c" to use a cache dir one up, i.e. shared between builds of this job.
 CACHE_DIR=$(cd ../; pwd)/cache
@@ -149,7 +155,7 @@ fi
 if [[ ! -f targets.json ]]; then
     bash < targets.json.in | json > targets.json
 fi
-IS_PUBLIC=$(json < targets.json ${JOB_NAME}.public)
+IS_PUBLIC=$(json < targets.json ${MG_TARGET}.public)
 if [[ ${IS_PUBLIC} == "true" ]]; then
     JENKINS_OUTPUT_BASE="/public/${MG_JENKINS_BUILDS_DIR}"
 else
@@ -163,11 +169,11 @@ if [[ ! -z ${USE_PREV_RELEASES_FOR} ]]; then
 fi
 
 if [[ -z ${JOYENT_BUILD} || ${JOYENT_BUILD} == "true" ]]; then
-    TRACE=1 ./configure -j -t $JOB_NAME -c "$CACHE_DIR" -b "$BRANCH" \
+    TRACE=1 ./configure -j -t $MG_TARGET -c "$CACHE_DIR" -b "$BRANCH" \
         -J /stor/builds -D /public/builds -O ${JENKINS_OUTPUT_BASE} \
         -B "$TRY_BRANCH" ${EXTRA_ARGS}
 else
-    TRACE=1 ./configure -t $JOB_NAME -c "$CACHE_DIR" -b "$BRANCH" \
+    TRACE=1 ./configure -t $MG_TARGET -c "$CACHE_DIR" -b "$BRANCH" \
         -D /public/builds -O ${JENKINS_OUTPUT_BASE} -B "$TRY_BRANCH" \
         ${EXTRA_ARGS}
 fi
@@ -182,7 +188,7 @@ echo "TIME: MG configure took ${elapsed} seconds"
 echo ""
 echo "#---------------------- make"
 
-V=1 gmake $JOB_NAME
+V=1 gmake $MG_TARGET
 
 now_time=$(date +%s)
 elapsed=$((${now_time} - ${last_time}))
@@ -194,10 +200,10 @@ echo "TIME: build took ${elapsed} seconds"
 echo ""
 echo "#---------------------- upload"
 
-cp $LOG bits/$JOB_NAME/
+cp $LOG bits/$MG_TARGET/
 gmake manta_upload_jenkins
 
-if [[ ${JOB_NAME} == "smartos" ]] && [[ ${BRANCH} == release* ]]; then
+if [[ ${MG_TARGET} == "smartos" ]] && [[ ${BRANCH} == release* ]]; then
     gmake smartos-release
 fi
 
diff --git a/tools/local-bitsdir-copy b/tools/local-bitsdir-copy
index e8359c0..c7613ba 100755
--- a/tools/local-bitsdir-copy
+++ b/tools/local-bitsdir-copy
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 #
@@ -25,12 +25,12 @@ function fatal ()
     exit 1
 }
 
-JOB_NAME=$1
-if [[ -z ${JOB_NAME} || -n $2 ]]; then
+MG_TARGET=$1
+if [[ -z ${MG_TARGET} || -n $2 ]]; then
     fatal "Usage: $0 <job_name>"
 fi
 
-mkdir -p ${LOCAL_BITS_DIR}/${JOB_NAME}
-rsync -va ${TOP}/bits/${JOB_NAME}/* ${LOCAL_BITS_DIR}/${JOB_NAME}/
+mkdir -p ${LOCAL_BITS_DIR}/${MG_TARGET}
+rsync -va ${TOP}/bits/${MG_TARGET}/* ${LOCAL_BITS_DIR}/${MG_TARGET}/
 
 exit 0
diff --git a/tools/manta-upload b/tools/manta-upload
index abe3efa..07512e5 100755
--- a/tools/manta-upload
+++ b/tools/manta-upload
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 #
@@ -25,9 +25,9 @@ function fatal ()
     exit 1
 }
 
-JOB_NAME=$1
-if [[ -z ${JOB_NAME} || -n $2 ]]; then
-    fatal "Usage: $0 <job_name>"
+MG_TARGET=$1
+if [[ -z ${MG_TARGET} || -n $2 ]]; then
+    fatal "Usage: $0 <target>"
 fi
 
 if [[ ! -f ${TOP}/bits/config.mk ]]; then
@@ -50,8 +50,8 @@ ${TOP}/tools/mantaput-bits \
     "${BRANCH}" \
     "${TRY_BRANCH}" \
     "${TIMESTAMP}" \
-    ${MG_OUT_PATH}/${JOB_NAME} \
-    ${JOB_NAME} \
+    ${MG_OUT_PATH}/${MG_TARGET} \
+    ${MG_TARGET} \
     ${UPLOAD_SUBDIRS}
 
 exit 0
diff --git a/tools/mantaput-bits b/tools/mantaput-bits
index 7acc80f..8a83dd7 100755
--- a/tools/mantaput-bits
+++ b/tools/mantaput-bits
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 # Upload the bits dir to Manta
@@ -19,7 +19,9 @@ set -o errexit
 TOP=$(cd $(dirname $0)/../; pwd)
 BITS_DIR=bits/
 PATH=$PATH:${TOP}/node_modules/manta/bin
+UPLOAD_LOG=${TOP}/upload.log
 
+echo "U
 # --- Manta config
 if [[ -z "$MANTA_KEY_ID" ]]; then
     export MANTA_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
@@ -50,6 +52,10 @@ function print_help() {
     echo "\${MANTA_USER}/stor or (if starts with '/') a path under \${MANTA_USER}"
 }
 
+function msg() {
+	echo $* | tee -a $UPLOAD_LOG
+}
+
 trap 'errexit $? $LINENO' EXIT
 
 BRANCH=$1
@@ -76,7 +82,7 @@ fi
 upload_subdir=$UPLOAD_BRANCH-$TIMESTAMP
 
 start_time=$(date +%s)
-echo "Uploading bits to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}"
+msg "Uploading bits to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}"
 
 # need to create the directory structure first
 if [[ -z "$SUBDIRS" ]]; then
@@ -111,10 +117,11 @@ for file in $files; do
     if [[ -z ${manta_md5} ]]; then
         # file doesn't exist, upload it
 
+	echo ${MANTA_URL}/${manta_object} >>$UPLOAD_LOG
         mput -v -f ${file} ${manta_object}
         [[ $? == 0 ]] || fatal "Failed to upload ${file} to ${manta_object}"
     else
-        echo "${manta_object} already exists and matches local file, skipping upload."
+        msg "${manta_object} already exists and matches local file, skipping upload."
     fi
     md5sums="${md5sums}${local_md5_line}\n"
 done
@@ -130,8 +137,6 @@ if [[ $UPLOAD_BRANCH =~ ^release- ]]; then
     echo "/${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}" | mput -v -H 'content-type: text/plain' /${MANTA_USER}${UPLOAD_BASE_DIR}/latest-release
 fi
 
-echo "Uploaded to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}"
-
 end_time=$(date +%s)
 elapsed=$((${end_time} - ${start_time}))
-echo "Upload took ${elapsed} seconds (Manta path=/${MANTA_USER}${UPLOAD_BASE_DIR}/$upload_subdir)."
+msg "Uploaded to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir} in ${elapsed} seconds"
