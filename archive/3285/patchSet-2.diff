commit 49bbaeafebc60ca1a10996f33c1542f52ccf55ae (refs/changes/85/3285/2)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2018-02-05T13:58:13-08:00 (1 year, 8 months ago)
    
    PUBAPI-1470 volume objects should expose their creation timestamp in a property named "created" instead of "create_timestamp"

diff --git a/docs/index.md b/docs/index.md
index a58cc0b..79c332d 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -8986,7 +8986,7 @@ id         | String   | The UUID of the volume itself
 owner_uuid | String   | The UUID of the volume's owner. In the example of a NFS shared volume, the owner is the user who created the volume
 name       | String   | The volume's name. It must be unique for a given user. It must match the regular expression `/^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/`. The maximum length for a volume's name is 256 characters. Trying to create or update a volume with a name longer than 256 characters will result in an error
 type       | String   | Identifies the volume's type. There is currently one possible value for this property: `tritonnfs`. Additional types may be added in the future, and they can all have different sets of [type specific properties](#type-specific-properties)
-create_timestamp | String | A timestamp that indicates the time at which the volume was created
+created    | String | A timestamp that indicates the time at which the volume was created
 state      | String   | `creating`, `ready`, `deleting`, `deleted` or `failed`. Indicates in which state the volume currently is. `failed` volumes are still persisted to Moray for troubleshooting/debugging purposes. See the section [Volumes state machine](#volumes-state-machine) for a diagram and further details about the volumes' state machine
 networks   | Array of string | A list of network UUIDs that represents the networks on which this volume can be reached
 refs       | Array of string | A list of VM UUIDs that reference this volume
@@ -8999,7 +8999,7 @@ Here's an example of a volume object in JSON format:
   "owner_uuid": "some-uuid",
   "name": "foo",
   "type": "tritonnfs",
-  "create_timestamp": "2017-11-16T17:31:56.763Z",
+  "created": "2017-11-16T17:31:56.763Z",
   "state": "created",
   "networks": [
     "bf6960ac-97e3-47b6-9fe0-bc12c47db78a"
@@ -9039,7 +9039,7 @@ A `'tritonnfs'` volume can be represented as following:
   "owner_uuid": "some-uuid",
   "name": "foo",
   "type": "tritonnfs",
-  "create_timestamp": "2017-11-16T17:31:56.763Z",
+  "created": "2017-11-16T17:31:56.763Z",
   "state": "created",
   "size": 10240,
   "networks": [
diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index 6400858..92ec16b 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -580,6 +580,14 @@ function translateVolumeFromVolApi(volapiVolume) {
     cloudApiVolume.id = cloudApiVolume.uuid;
     delete cloudApiVolume.uuid;
 
+    /*
+     * The name "created" is more consistent than "create_timestamp" with the
+     * same property that is set for machines, and is less surprising for
+     * consumers of the new volume related API endpoints.
+     */
+    cloudApiVolume.created = cloudApiVolume.create_timestamp;
+    delete cloudApiVolume.create_timestamp;
+
     /*
      * The fact that a tritonnfs volume is associated with a storage VM is
      * considered to be an implementation detail that is irrelevant to end
diff --git a/test/volumes-basic.test.js b/test/volumes-basic.test.js
index 0912d90..18a2c9e 100644
--- a/test/volumes-basic.test.js
+++ b/test/volumes-basic.test.js
@@ -112,9 +112,8 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
                     'volume should have state \'' + expectedState + '\'');
                 t.equal(testVolume.vm_uuid, undefined,
                     'vm_uuid property should not be present in the response');
-                t.ok(ISO_DATE_STRING_RE.test(testVolume.create_timestamp),
-                    'create_timestamp field should match ' +
-                        ISO_DATE_STRING_RE);
+                t.ok(ISO_DATE_STRING_RE.test(testVolume.created),
+                    'created field should match ' + ISO_DATE_STRING_RE);
 
                 t.end();
             });
@@ -141,10 +140,9 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
                     'vm_uuid property should not be present in the response');
 
                 createTimestamp =
-                    volumesWithNewlyCreatedVolumeName[0].create_timestamp;
+                    volumesWithNewlyCreatedVolumeName[0].created;
                 t.ok(ISO_DATE_STRING_RE.test(createTimestamp),
-                    'create_timestamp field should match ' +
-                        ISO_DATE_STRING_RE);
+                    'created field should match ' + ISO_DATE_STRING_RE);
 
                 t.end();
             });
@@ -161,9 +159,8 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
                     'volume name should be \'' + testVolumeName + '\'');
                 t.equal(testVolume.vm_uuid, undefined,
                     'vm_uuid property should not be present in the response');
-                t.ok(ISO_DATE_STRING_RE.test(testVolume.create_timestamp),
-                    'create_timestamp field should match ' +
-                        ISO_DATE_STRING_RE);
+                t.ok(ISO_DATE_STRING_RE.test(testVolume.created),
+                    'created field should match ' + ISO_DATE_STRING_RE);
 
                 t.end();
             });
