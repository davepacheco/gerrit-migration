commit 17f5790dd071203203e03131efc03ccdd7bc549a (refs/changes/70/1670/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-03-15T16:39:30-07:00 (2 years, 7 months ago)
    
    ZAPI-773 style checker and linter should be run on JavaScript source code in tools/ folder when running make check
    ZAPI-774 tools/add-test-vms.js throws uncaught error due to missing dependency
    ZAPI-776 tools/perf/random-load.js doesn't exit when entering ctrl-c
    ZAPI-777 tools/npmfreeze.js is obsolete and should be removed

diff --git a/Makefile b/Makefile
index cee7801..e086f33 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2016, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -42,7 +42,7 @@ NODEUNIT  := ./node_modules/.bin/nodeunit
 DOC_FILES	 = index.md
 RESTDOWN_FLAGS   = --brand-dir=deps/restdown-brand-remora
 EXTRA_DOC_DEPS += deps/restdown-brand-remora/.git
-JS_FILES	:= $(shell find lib test -name '*.js')
+JS_FILES	:= $(shell find tools lib test -name '*.js')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE   = server.js $(JS_FILES)
 JSSTYLE_FILES	 = server.js $(JS_FILES)
diff --git a/lib/apis/wfapi.js b/lib/apis/wfapi.js
index d251ec3..08a84ae 100644
--- a/lib/apis/wfapi.js
+++ b/lib/apis/wfapi.js
@@ -810,8 +810,6 @@ Wfapi.prototype.listJobs = function (params, cb) {
     });
 };
 
-
-
 /*
  * Take any x-context header from the caller and put it in the params fed
  * to further API calls. NB: params arg is mutated.
diff --git a/package.json b/package.json
index 8dd3691..8342ebf 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "backoff": "2.5.0",
     "bunyan": "1.8.1",
     "changefeed": "1.2.2",
+    "dashdash": "1.14.1",
     "deep-diff": "0.3.3",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "jsprim": "^1.2.2",
diff --git a/tools/add-test-vms.js b/tools/add-test-vms.js
index 4020791..271c0a0 100755
--- a/tools/add-test-vms.js
+++ b/tools/add-test-vms.js
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -18,14 +18,14 @@
  * Run node add-test-vms.js -h for usage.
  */
 
-var path = require('path');
-var fs = require('fs');
-
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
 var dashdash = require('dashdash');
+var fs = require('fs');
+var jsprim = require('jsprim');
 var libuuid = require('libuuid');
-var bunyan = require('bunyan');
+var path = require('path');
 var restify = require('restify');
-var assert = require('assert-plus');
 
 var testVm = require('../test/lib/vm');
 var configFileLoader = require('../lib/config-loader');
@@ -37,15 +37,12 @@ var DEFAULT_CONCURRENCY = 10;
 var configFilePath = path.join(__dirname, '..', 'config.json');
 var config = configFileLoader.loadConfig(configFilePath);
 
-log = this.log = new bunyan({
+var log = this.log = new bunyan({
     name: 'add-test-vms',
     level: process.env.LOG_LEVEL || config.logLevel || 'debug',
     serializers: restify.bunyan.serializers
 });
 
-config.moray.reconnect = true;
-var moray = new MORAY(config.moray);
-
 var cmdlineOptions = [
     {
         names: ['help', 'h'],
@@ -83,19 +80,21 @@ function addTestVms(nbVms, concurrency, data) {
     assert.ok(concurrency > 0, 'concurrency must be a positive number');
 
     assert.optionalObject(data, 'data must be an optional object');
+    var moray = new MORAY(config.moray);
+
     data = data || {};
 
     moray.connect();
     moray.once('moray-ready', function () {
         log.debug('Moray ready!');
 
-        log.debug('Number of test VMs to create:', nbTestVmsToCreate);
-        assert.finite(nbTestVmsToCreate);
+        log.debug('Number of test VMs to create:', nbVms);
+        assert.finite(nbVms);
 
         log.debug('concurrency:', concurrency);
         assert.finite(concurrency);
 
-        testVm.createTestVMs(nbTestVmsToCreate, moray, {
+        testVm.createTestVMs(nbVms, moray, {
             concurrency: concurrency,
             log: log
         }, data, function allVmsCreated(err) {
@@ -112,9 +111,9 @@ function addTestVms(nbVms, concurrency, data) {
 }
 
 var cmdlineOptionsParser = dashdash.createParser({options: cmdlineOptions});
-var nbTestVmsToCreate;
-var concurrency;
-var testVmsData;
+var nbVmsParam;
+var concurrencyParam;
+var vmsDataParam;
 var parsedCmdlineOpts;
 
 try {
@@ -123,20 +122,20 @@ try {
     if (parsedCmdlineOpts.help) {
         printUsage(cmdlineOptionsParser);
     } else {
-        nbTestVmsToCreate = Number(parsedCmdlineOpts.n) ||
+        nbVmsParam = Number(parsedCmdlineOpts.n) ||
             DEFAULT_NB_TEST_VMS_TO_CREATE;
 
-        concurrency = Number(parsedCmdlineOpts.c) ||
+        concurrencyParam = Number(parsedCmdlineOpts.c) ||
             DEFAULT_CONCURRENCY;
 
         if (parsedCmdlineOpts.d) {
-            testVmsData = JSON.parse(parsedCmdlineOpts.d);
+            vmsDataParam = JSON.parse(parsedCmdlineOpts.d);
         }
 
-        addTestVms(nbTestVmsToCreate, concurrency, testVmsData);
+        addTestVms(nbVmsParam, concurrencyParam, vmsDataParam);
     }
 } catch (err) {
-    console.error('Could not parse command line options');
+    console.error('Could not parse command line options, error:', err);
     printUsage(cmdlineOptionsParser);
     process.exit(1);
 }
diff --git a/tools/fix-no-owner.js b/tools/fix-no-owner.js
index bedfdda..f4cf9bf 100644
--- a/tools/fix-no-owner.js
+++ b/tools/fix-no-owner.js
@@ -9,44 +9,45 @@
  */
 
 // Backfill image_uuid for KVM VMs
-var path = require('path');
+
+var async = require('async');
+var bunyan = require('bunyan');
 var fs = require('fs');
+var path = require('path');
+var restify = require('restify');
 var util = require('util');
+
+var common = require('../lib/common');
 var MORAY = require('../lib/apis/moray');
 var WFAPI = require('../lib/apis/wfapi');
-var common = require('../lib/common');
 
-var config_file = path.resolve(__dirname, '..', 'config.json');
-var bunyan = require('bunyan');
-var restify = require('restify');
-var async = require('async');
-var levels = [bunyan.TRACE, bunyan.DEBUG, bunyan.INFO,
-              bunyan.WARN, bunyan.ERROR, bunyan.FATAL];
 var config;
-var log;
 
 // If you don't pass this flag the script will read in test mode
 var force = (process.argv[2] === '-f' ? true : false);
 
+var levels = [bunyan.TRACE, bunyan.DEBUG, bunyan.INFO,
+              bunyan.WARN, bunyan.ERROR, bunyan.FATAL];
+
 /*
  * Loads and parse the configuration file at config.json
  */
 function loadConfig() {
-    var configPath = path.join(__dirname, '..', 'config.json');
+    var CONFIG_FILE_PATH = path.join(__dirname, '..', 'config.json');
 
-    if (!fs.existsSync(configPath)) {
-        console.error('Config file not found: ' + configPath +
+    if (!fs.existsSync(CONFIG_FILE_PATH)) {
+        console.error('Config file not found: ' + CONFIG_FILE_PATH +
           ' does not exist. Aborting.');
         process.exit(1);
     }
 
-    var theConfig = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
+    var theConfig = JSON.parse(fs.readFileSync(CONFIG_FILE_PATH, 'utf-8'));
     return theConfig;
 }
 
-var config = loadConfig();
+config = loadConfig();
 
-log = this.log = new bunyan({
+var log = this.log = new bunyan({
     name: 'fix-now-owner',
     level: config.logLevel || 'debug',
     serializers: restify.bunyan.serializers
@@ -58,11 +59,18 @@ var wfapi = new WFAPI(config.wfapi);
 
 moray.connect();
 moray.once('moray-ready', function () {
-    wfapi.connect(onWfapi);
+    var listVmsParams = { query: '(&(state=destroyed)!(owner_uuid=*))' };
+
+    log.info('Connected to moray, listing all VMs');
+
+    wfapi.connect();
+
+    moray.listVms(listVmsParams, function onListVms(err, vms) {
+        if (err) {
+            log.error({err: err}, 'Error when listing VMs');
+        } else {
+            log.info('All VMs listed successfully, processing them...');
 
-    function onWfapi() {
-        var params = { query: '(&(state=destroyed)!(owner_uuid=*))' };
-        moray.listVms(params, function (err, vms) {
             async.mapSeries(vms, fixVM, function (ferr) {
                 if (ferr) {
                     log.error({ err: ferr }, 'Could not fix all VMs');
@@ -72,15 +80,17 @@ moray.once('moray-ready', function () {
                     }
                     log.info('%s corrupt VMs have been fixed', vms.length);
                 }
+
+                moray.close();
             });
-        });
-    }
+        }
+    });
 
     function fixVM(vm, next) {
-        var params = { vm_uuid: vm.uuid, task: 'destroy' };
+        var listJobsParams = { vm_uuid: vm.uuid, task: 'destroy' };
         // Each VM should only have one destroy job
         // Just be careful and re-check the job is a destroy task
-        wfapi.listJobs(params, function (err, jobs) {
+        wfapi.listJobs(listJobsParams, function (err, jobs) {
             if (err) {
                 return next(err);
             }
@@ -117,4 +127,3 @@ moray.once('moray-ready', function () {
         });
     }
 });
-
diff --git a/tools/kvm-backfill.js b/tools/kvm-backfill.js
index 87ad57a..c33e477 100644
--- a/tools/kvm-backfill.js
+++ b/tools/kvm-backfill.js
@@ -5,21 +5,26 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 // Backfill image_uuid for KVM VMs
-var path = require('path');
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
 var fs = require('fs');
+var jsprim = require('jsprim');
+var path = require('path');
 var util = require('util');
+
+var configLoader = require('../lib/config-loader');
 var MORAY = require('../lib/apis/moray');
 
-var config_file = path.resolve(__dirname, '..', 'config.json');
-var bunyan = require('bunyan');
+var configFilePath = path.resolve(__dirname, '..', 'config.json');
+var config = configLoader.loadConfig(configFilePath);
+
 var levels = [bunyan.TRACE, bunyan.DEBUG, bunyan.INFO,
               bunyan.WARN, bunyan.ERROR, bunyan.FATAL];
-var config;
-var log;
+
 var VMS_LIMIT = (process.env.VMS_LIMIT) ? Number(process.env.VMS_LIMIT) : 10;
 
 // Total number of VMs
@@ -27,153 +32,138 @@ var TOTAL = 0;
 // Number of VMs we've finished with:
 var PROCESSED = 0;
 
-fs.readFile(config_file, 'utf8', function (err, data) {
-    if (err) {
-        console.error('Error reading config file:');
-        console.dir(err);
-        process.exit(1);
-    } else {
-        try {
-            config = JSON.parse(data);
-        } catch (e) {
-            console.error('Error parsing config file JSON:');
-            console.dir(e);
-            process.exit(1);
-        }
-    }
+var log = new bunyan({
+    name: 'kvm-backfill',
+    streams: [ {
+        level: config.logLevel || 'info',
+        stream: process.stdout
+    }]
+});
 
-    log = new bunyan({
-        name: 'kvm-backfill',
-        streams: [ {
-            level: config.logLevel || 'info',
-            stream: process.stdout
-        }]
-    });
+var moray = new MORAY(config.moray);
 
-    var moray = new MORAY(config.moray);
-    moray.connect();
-    moray.once('moray-ready', onMoray);
+moray.connect();
 
-    function onMoray() {
-        processVms(0, VMS_LIMIT, processCb);
+moray.once('moray-ready', function onMorayReady() {
+    startProcessingVMs(moray);
+});
 
-        function processVms(offset, limit, cb) {
-            var done = 0;
+function startProcessingVMs(morayClient) {
+    assert.object(morayClient, 'morayClient');
 
-            function wait() {
-                log.info('inside wait %d %d', done, limit);
+    processVms(0, VMS_LIMIT, processCb);
 
-                if (done === limit) {
-                    return cb();
-                } else {
-                    return setTimeout(wait, 1000);
-                }
+    function processVms(offset, limit, cb) {
+        var done = 0;
+
+        function wait() {
+            log.info('inside wait %d %d', done, limit);
+
+            if (done === limit) {
+                return cb();
+            } else {
+                return setTimeout(wait, 1000);
             }
+        }
 
-            moray.countVms({ brand: 'kvm' }, onCount);
+        morayClient.countVms({ brand: 'kvm' }, onCount);
 
-            function onCount(cerr, count) {
-                if (cerr) {
-                    log.error({err: err}, 'Could not get count of vms');
-                    process.exit(1);
+        function onCount(countVmsErr, count) {
+            if (countVmsErr) {
+                log.error({err: countVmsErr}, 'Could not get count of vms');
+                process.exit(1);
+            }
+
+            var query = { brand: 'kvm', offset: offset, limit: limit };
+            morayClient.listVms(query, true, function (err, vms) {
+                if (err) {
+                    log.error({err: err}, 'Error fetching VMs');
+                    return processCb(err);
+                }
+                // Should happen just on first pass
+                if (TOTAL === 0) {
+                    TOTAL = count;
+                }
+                if (count < limit) {
+                    limit = count;
                 }
 
-                var query = { brand: 'kvm', offset: offset, limit: limit };
-                moray.listVms(query, true, function (err, vms) {
-                    if (err) {
-                        log.error({err: err}, 'Error fetching VMs');
-                        return processCb(err);
-                    }
-                    // Should happen just on first pass
-                    if (TOTAL === 0) {
-                        TOTAL = count;
+                vms.forEach(processVm);
+                function processVm(vm) {
+                    var disks = vm.disks;
+
+                    // If VM has a value here then it's already good
+                    if (vm.image_uuid) {
+                        PROCESSED += 1;
+                        done += 1;
+                        log.info('VM %d of %d already processed',
+                                    PROCESSED, TOTAL);
+                        return;
                     }
-                    if (count < limit) {
-                        limit = count;
+
+                    try {
+                        if (typeof (disks) == 'string') {
+                            disks = JSON.parse(disks);
+                        }
+                    } catch (e) {
+                        PROCESSED += 1;
+                        done += 1;
+
+                        log.error({
+                            err: e,
+                            vm_uuid: vm.uuid
+                        }, 'Error parsing VM disks, skipping.');
+                        return;
                     }
 
-                    vms.forEach(processVm);
-                    function processVm(vm) {
-                        var disks = vm.disks;
+                    if (disks && disks[0] && disks[0].image_uuid) {
+                        vm.image_uuid = disks[0].image_uuid;
 
-                        // If VM has a value here then it's already good
-                        if (vm.image_uuid) {
+                        morayClient.putVm(vm.uuid, vm, function (perr) {
                             PROCESSED += 1;
                             done += 1;
-                            log.info('VM %d of %d already processed',
-                                        PROCESSED, TOTAL);
-                            return;
-                        }
 
-                        try {
-                            if (typeof (disks) == 'string') {
-                                disks = JSON.parse(disks);
+                            if (perr) {
+                                log.error({
+                                    err: perr,
+                                    vm_uuid: vm.uuid
+                                }, 'Error updating VM');
+                            } else {
+                                log.info({
+                                    vm_uuid: vm.uuid,
+                                    server_uuid: vm.server_uuid
+                                },
+                                util.format('VM %d of %d updated',
+                                    PROCESSED, TOTAL));
                             }
-                        } catch (e) {
-                            PROCESSED += 1;
-                            done += 1;
-
-                            log.error({
-                                err: e,
-                                vm_uuid: vm.uuid
-                            }, 'Error parsing VM disks, skipping.');
-                            return;
-                        }
-
-                        if (disks && disks[0] && disks[0].image_uuid) {
-                            vm.image_uuid = disks[0].image_uuid;
-
-                            moray.putVm(vm.uuid, vm, function (perr) {
-                                PROCESSED += 1;
-                                done += 1;
-
-                                if (perr) {
-                                    log.error({
-                                        err: perr,
-                                        vm_uuid: vm.uuid
-                                    }, 'Error updating VM');
-                                } else {
-                                    log.info({
-                                        vm_uuid: vm.uuid,
-                                        server_uuid: vm.server_uuid
-                                    },
-                                    util.format('VM %d of %d updated',
-                                        PROCESSED, TOTAL));
-                                }
-                            });
-
-                        // This should never happen
-                        } else {
-                            PROCESSED += 1;
-                            done += 1;
-                            log.warn({ vm_uuid: vm.uuid }, 'Error does not ' +
-                            'have standard disks array, skipping.');
-                        }
+                        });
+
+                    // This should never happen
+                    } else {
+                        PROCESSED += 1;
+                        done += 1;
+                        log.warn({ vm_uuid: vm.uuid }, 'Error does not ' +
+                        'have standard disks array, skipping.');
                     }
+                }
 
-                    return wait();
-                });
-            }
+                return wait();
+            });
         }
+    }
 
-        function processCb(err) {
-            if (err) {
-                console.log(err.message);
-                if (err.message ===
-                        'the underlying connection has been closed') {
-                    log.warn('Waiting for moray to reconnect');
-                    moray.once('moray-connected', function () {
-                        processVms(PROCESSED, VMS_LIMIT, processCb);
-                    });
-                }
-                return (false);
-            } else if (PROCESSED < TOTAL) {
-                log.info('% %d', PROCESSED, TOTAL);
-                return processVms(PROCESSED, VMS_LIMIT, processCb);
-            } else {
-                log.info('%d VMS PROCESSED. DONE!', TOTAL);
-                return (true);
-            }
+    function processCb(err) {
+        if (err) {
+            console.log(err.message);
+        }
+
+        if (PROCESSED < TOTAL) {
+            log.info('% %d', PROCESSED, TOTAL);
+            return processVms(PROCESSED, VMS_LIMIT, processCb);
+        } else {
+            log.info('%d VMS PROCESSED. DONE!', TOTAL);
+            morayClient.connection.close();
+            return (true);
         }
     }
-});
+}
diff --git a/tools/migrations/add-docker-index.js b/tools/migrations/add-docker-index.js
index a45719f..2920fe0 100644
--- a/tools/migrations/add-docker-index.js
+++ b/tools/migrations/add-docker-index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var path = require('path');
@@ -64,7 +64,7 @@ function getMorayClient(callback) {
 
 function updateBucket(callback) {
     getMorayClient(function (mclient) {
-        morayClient = mclient;
+        var morayClient = mclient;
         morayClient.getBucket(BUCKET.name, function (err, bck) {
             if (err) {
                 return callback(err);
@@ -91,4 +91,3 @@ updateBucket(function (updateErr) {
     log.info('"docker" index has been successfully added');
     process.exit(0);
 });
-
diff --git a/tools/npmfreeze.js b/tools/npmfreeze.js
deleted file mode 100755
index da0a6dc..0000000
--- a/tools/npmfreeze.js
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-//
-//
-// Generate a 'dependencies' block for a top-level package.json that includes
-// the explicit versions for all recursive npm modules. See 'Method 3' in
-// <https://head.no.de/docs/eng> for why this is interesting.
-//
-// Usage:
-//      find . -name 'package.json' | xargs ./tools/npmfreeze.js
-//
-// If two parts of the node_modules tree includes separate versions of a
-// particular module, then the greater version is used.
-
-var fs = require('fs');
-var semver = require('semver');
-var spawn = require('child_process').spawn;
-
-
-// --- Globals
-var deps = {};
-
-
-// --- Helpers
-
-function done() {
-    console.log(JSON.stringify(deps, null, 2));
-}
-
-
-function waitForDone() {
-    process.nextTick(function () {
-        if (wait === 0)
-            return done();
-
-        return waitForDone();
-    });
-}
-
-
-// --- Main
-
-process.argv.slice(2).forEach(function (fname) {
-    var pkg = JSON.parse(fs.readFileSync(fname, 'utf8'));
-    if (!pkg.dependencies)
-        return;
-
-    var tmp = pkg.dependencies;
-    Object.keys(tmp).forEach(function (dep) {
-        if (!deps[dep] || semver.gt(tmp[dep], deps[dep]))
-            deps[dep] = semver.clean(tmp[dep]) || '*';
-    });
-});
-
-// Make a pass and clean up all the '*'
-var wait = 0;
-Object.keys(deps).forEach(function (k) {
-    if (deps[k] !== '*')
-        return;
-
-    wait++;
-    var npm = spawn('npm', ['info', k]);
-    var json = '';
-    npm.stdout.on('data', function (data) {
-        if (data)
-            json += data;
-    });
-
-    npm.stdout.on('end', function (code) {
-        if (code) {
-            console.error('npm info %s exited: %d', k, code);
-            process.exit(code);
-        }
-
-        var val;
-        eval('val = ' + json);
-
-        deps[k] = val['dist-tags'].latest;
-        wait--;
-    });
-});
-
-return (wait === 0 ? done() : waitForDone());
diff --git a/tools/perf/profile.js b/tools/perf/profile.js
index bce7764..72122d1 100755
--- a/tools/perf/profile.js
+++ b/tools/perf/profile.js
@@ -1,4 +1,3 @@
-#!/usr//bin/env node
 /*
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 //
@@ -17,9 +16,9 @@
 //
 
 var cp = require('child_process');
+var fs = require('fs');
 var exec = cp.exec;
 var sprintf = require('sprintf').sprintf;
-var fs = require("fs");
 
 var FILE = './dtrace.out';
 var LINES = [];
@@ -53,7 +52,7 @@ function parseLines(cb) {
         cb();
     });
 
-    stream.on('data', function(chunk) {
+    stream.on('data', function onData(chunk) {
         var lines, i;
         lines = (lastLine + chunk).split('\n');
 
@@ -69,7 +68,7 @@ function parseLines(cb) {
 
 
 function processLine(line) {
-    var reqLine, fields, latency, statusCode, success, serverName;
+    var reqLine, fields, latency, statusCode, success;
 
     fields = line.split(' ');
     reqLine = fields.slice(0, 2).join(' ');
@@ -125,7 +124,7 @@ function printSummary() {
         avgRounded = Math.round((req.total / req.count) * 100) / 100;
 
         console.log(sprintf('%50s %10s %10s %10s %10s %10s',
-            reqLine.substr(0,50), req.count, req.min, avgRounded,
+            reqLine.substr(0, 50), req.count, req.min, avgRounded,
             req.max, req.statusCodes.join(', ')));
     });
 }
diff --git a/tools/perf/random-load.js b/tools/perf/random-load.js
index 12e0c00..a7837a3 100644
--- a/tools/perf/random-load.js
+++ b/tools/perf/random-load.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 // Backfill image_uuid for KVM VMs
@@ -17,7 +17,6 @@ var config_file = path.resolve(__dirname, '..', '..', 'config.json');
 var bunyan = require('bunyan');
 var restify = require('restify');
 var async = require('async');
-var log;
 
 var VMAPI = require('sdc-clients').VMAPI;
 var log = new bunyan({
@@ -28,6 +27,7 @@ var log = new bunyan({
 
 var GUINEA_PIG_ALIASES = ['papi0', 'dapi0', 'assets0'];
 var GUINEA_PIG_UUIDS = [];
+var periodicLoad;
 var UUIDS = [];
 var uuid, params;
 
@@ -39,7 +39,7 @@ var REQUESTS = [
     [ 'snapshotVm', 0.07, true, true ]
 ];
 
-vmapi = new VMAPI({
+var vmapi = new VMAPI({
     url: 'localhost',
     retry: {
         retries: 1,
@@ -63,7 +63,7 @@ vmapi.listVms({ 'tag.smartdc_type': 'core' }, function (err, vms) {
 
     // Careful :)
     var interval = process.env.LOAD_INTERVAL || 3000;
-    setInterval(function () { randomLoad(); }, interval);
+    periodicLoad = setInterval(function () { randomLoad(); }, interval);
 });
 
 
@@ -107,9 +107,10 @@ function randomLoad() {
 }
 
 
-process.on('SIGINT', function() {
+process.on('SIGINT', function onSigInt() {
     console.log('Received CTRL-C. Exiting...');
     vmapi.client.close();
+    clearInterval(periodicLoad);
 });
 
 
