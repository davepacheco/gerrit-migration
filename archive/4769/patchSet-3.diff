commit db6ae74ea28b59eb002b503336711b6fb6550f28 (refs/changes/69/4769/3)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-09-10T20:42:27+02:00 (1 year, 1 month ago)
    
    TRITON-742 datasets.joyent.com should be retired

diff --git a/CHANGES.md b/CHANGES.md
index 5671515..ba834df 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,7 +6,11 @@
 
 # sdc-clients Changelog
 
-## not yet released
+## Not yet released
+
+## 12.0.0
+
+- TRITON-742 Remove dsapi client
 
 ## 11.3.1
 
diff --git a/lib/dsapi.js b/lib/dsapi.js
deleted file mode 100644
index f4ad7df..0000000
--- a/lib/dsapi.js
+++ /dev/null
@@ -1,250 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2016, Joyent, Inc.
- */
-
-/*
- * Client library for the (old) SDC Datasets API (DSAPI).
- *
- * DSAPI is now deprecated in favor of IMGAPI, but continues on for
- * backward compat and transition from SDC 6.5.
- */
-
-var assert = require('assert-plus');
-var qs = require('querystring');
-var restifyClients = require('restify-clients');
-var util = require('util');
-
-
-
-// ---- internal support stuff
-
-/**
- * Note: Borrowed from muskie.git/lib/common.js. The hope is that this hack
- * will no longer be necessary in node 0.10.x.
- *
- * This is so shitty...
- * Node makes no guarantees it won't emit. Even if you call pause.
- * So basically, we buffer whatever chunks it decides it wanted to
- * throw at us. Later we go ahead and remove the listener we setup
- * to buffer, and then re-emit.
- */
-function pauseStream(stream) {
-    function _buffer(chunk) {
-        stream.__buffered.push(chunk);
-    }
-
-    function _catchEnd(chunk) {
-        stream.__imgapi_ended = true;
-    }
-
-    stream.__imgapi_ended = false;
-    stream.__imgapi_paused = true;
-    stream.__buffered = [];
-    stream.on('data', _buffer);
-    stream.once('end', _catchEnd);
-    stream.pause();
-
-    stream._resume = stream.resume;
-    stream.resume = function _imgapi_resume() {
-        if (!stream.__imgapi_paused)
-            return;
-
-        stream.removeListener('data', _buffer);
-        stream.removeListener('end', _catchEnd);
-
-        stream.__buffered.forEach(stream.emit.bind(stream, 'data'));
-        stream.__buffered.length = 0;
-
-        stream._resume();
-        stream.resume = stream._resume;
-
-        if (stream.__imgapi_ended)
-            stream.emit('end');
-    };
-}
-
-
-
-
-// ---- DSAPI
-
-
-function DSAPI(options) {
-    if (typeof (options) !== 'object') {
-        throw new TypeError('options (Object) required');
-    }
-    if (typeof (options.url) !== 'string') {
-        throw new TypeError('options.url (String) required');
-    }
-
-    this.client = restifyClients.createJsonClient(options);
-    // Work around <https://github.com/mcavage/node-restify/pull/291>.
-    // Switch to `restifyClients.clientHttpClient` when that pull is in.
-    options.type = 'http';
-    this.rawClient = restifyClients.createClient(options);
-    if (options.username && options.password) {
-        this.client.basicAuth(options.username, options.password);
-        this.rawClient.basicAuth(options.username, options.password);
-    }
-}
-
-
-/**
- * Terminate any open connections to the CA service.
- */
-DSAPI.prototype.close = function close() {
-    this.client.close();
-};
-
-
-/**
- * Ping
- */
-DSAPI.prototype.ping = function ping(callback) {
-    var self = this;
-    assert.func(callback, 'callback');
-
-    var path = '/ping';
-    self.client.get(path, function (err, req, res, pong) {
-        if (err) {
-            callback(err, null, res);
-        } else {
-            callback(null, pong, res);
-        }
-    });
-};
-
-
-/**
- * Lists all Images
- *
- * @param {Object} params : Filter params. Images can be filtered by
- *                          'name', 'version', 'type', 'os',
- *                          'restricted_to_uuid' & 'creator_uuid' params.
- * @param {Function} callback : `function (err, images, res)`
- */
-DSAPI.prototype.listImages = function (params, cb) {
-    var self = this,
-        path = '/datasets';
-
-    if (typeof (params) === 'function') {
-        cb = params;
-        params = {};
-    } else if (typeof (params) !== 'object') {
-        throw new TypeError('params (Object) required');
-    }
-
-    params = qs.stringify(params);
-
-    if (params !== '') {
-        path += '?' + params;
-    }
-
-    return self.client.get(path, function (err, req, res, imgs) {
-        if (err) {
-            return cb(err, null, res);
-        } else {
-            return cb(null, imgs, res);
-        }
-    });
-};
-
-
-/**
- * Gets an IMAGE by UUID
- *
- * @param {String} image_uuid : the UUID of the IMAGE.
- * @param {Function} callback : of the form f(err, img).
- */
-DSAPI.prototype.getImage = function (image_uuid, cb) {
-    var self = this,
-        path;
-
-    if (typeof (image_uuid) !== 'string') {
-        throw new TypeError('image_uuid (String) required');
-    }
-
-    path = util.format('/datasets/%s', image_uuid);
-
-    return self.client.get(path, function (err, req, res, img) {
-        if (err) {
-            return cb(err);
-        } else {
-            return cb(null, img);
-        }
-    });
-};
-
-
-
-/**
- * Get an image file stream.
- * Note: This
- *
- * @param {String} uuid : the UUID of the image.
- * @param {Function} callback : `function (err, stream)`
- *      The `stream` is also an HTTP response object, i.e. headers are on
- *      `stream.headers`.
- */
-DSAPI.prototype.getImageFileStream = function getImageFileStream(
-        uuid, callback) {
-    var self = this;
-    assert.string(uuid, 'uuid');
-    assert.func(callback, 'callback');
-
-    self.getImage(uuid, function (getErr, image) {
-        if (getErr) {
-            callback(getErr);
-            return;
-        }
-        var path = image.files[0].url;
-        self.rawClient.get(path, function (connectErr, req) {
-            if (connectErr) {
-                callback(connectErr);
-                return;
-            }
-            req.on('result', function (resultErr, res) {
-                if (resultErr) {
-                    if (!res) {
-                        callback(resultErr);
-                    } else {
-                        var finished = false;
-                        function finish(err) {
-                            if (finished)
-                                return;
-                            finished = true;
-                            if (!resultErr.body.message && errMessage) {
-                                resultErr.body.message = errMessage;
-                            }
-                            callback(resultErr, res);
-                        }
-                        var errMessage = '';
-                        res.on('data', function (chunk) {
-                            errMessage += chunk;
-                        });
-                        res.on('error', finish);
-                        res.on('end', finish);
-                    }
-                    return;
-                }
-                pauseStream(res);
-                callback(null, res);
-            });
-        });
-    });
-};
-
-
-// ---- exports
-
-module.exports = DSAPI;
-
-module.exports.createClient = function createClient(options) {
-    return new DSAPI(options);
-};
diff --git a/package.json b/package.json
index dc3bd55..8c137ba 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "11.3.1",
+  "version": "12.0.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
diff --git a/test/dsapi.test.js b/test/dsapi.test.js
deleted file mode 100644
index 590bb64..0000000
--- a/test/dsapi.test.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2016 Joyent, Inc.
- */
-
-var bunyan = require('bunyan');
-var test = require('tape');
-var util = require('util');
-
-var DSAPI = require('../lib/index').DSAPI;
-
-
-// --- Globals
-
-var DSAPI_URL = process.env.DSAPI_URL || 'https://datasets.joyent.com';
-var dsapi;
-var IMAGES;
-
-
-// --- Tests
-
-test('dsapi', function (tt) {
-    tt.test(' setup', function (t) {
-        var log = bunyan.createLogger({
-            name: 'dsapi.test',
-            stream: process.stderr,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: bunyan.stdSerializers
-        });
-
-        dsapi = new DSAPI({
-            url: DSAPI_URL,
-            retry: {
-                retries: 1,
-                minTimeout: 1000
-            },
-            log: log,
-            rejectUnauthorized: false
-        });
-
-        t.end();
-    });
-
-    tt.test(' list images', function (t) {
-        dsapi.listImages(function (err, images, res) {
-            t.ifError(err, 'listImages Error');
-            t.ok(images, 'listImages OK');
-            if (images) {
-                IMAGES = images;
-                IMAGES.forEach(function (ds) {
-                    t.ok(ds.name, 'ds.name OK');
-                    t.ok(ds.version, 'ds.version OK');
-                    t.ok(ds.os, 'ds.os OK');
-                    t.ok(ds.urn, 'ds.urn OK');
-                    t.ok(ds.uuid, 'ds.uuid OK');
-                });
-            }
-            t.ok(res, 'listImages response object');
-            t.end();
-        });
-    });
-
-    tt.test(' get image', function (t) {
-        dsapi.getImage(IMAGES[0].uuid, function (err, img) {
-            t.ifError(err, 'getImage Error');
-            t.ok(img, 'getImage OK');
-            t.equal(img.urn, IMAGES[0].urn);
-            t.end();
-        });
-    });
-
-    tt.test(' teardown', function (t) {
-        dsapi.close();
-        t.end();
-    });
-});
