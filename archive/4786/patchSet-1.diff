commit 4185fe98370ded13a6c29096aa91537531ca6b16 (refs/changes/86/4786/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-09-04T18:26:08-07:00 (1 year, 1 month ago)
    
    TRITON-359 CNS CMON names for CNs causing sadness

diff --git a/lib/cn-filter.js b/lib/cn-filter.js
index 8b19829..5c19a1d 100644
--- a/lib/cn-filter.js
+++ b/lib/cn-filter.js
@@ -21,6 +21,9 @@ var consts = require('./consts');
 
 var UPDATE_INTERVAL = 30000;
 
+var MIN_FAKE_INTERVAL = 200;
+var MAX_FAKE_INTERVAL = 2000;
+
 function CNFilter(opts) {
 	assert.object(opts, 'options');
 
@@ -50,16 +53,24 @@ function CNFilter(opts) {
 	};
 
 	var self = this;
-	this.timer = setInterval(function () {
+	this.timer = setTimeout(function () {
 		self.updateServers();
 	}, UPDATE_INTERVAL);
 
+	this.fakeCNQueue = [];
+	this.nextFakeTimer = undefined;
+	this.fakeInterval = MIN_FAKE_INTERVAL;
+
 	stream.Transform.call(this, xformOpts);
 }
 util.inherits(CNFilter, stream.Transform);
 
 CNFilter.prototype.updateServers = function (cb) {
 	var self = this;
+	if (this.timer) {
+		clearTimeout(this.timer);
+		this.timer = undefined;
+	}
 	self.client.get('/servers?setup=true&extras=status',
 	    function (err, req, res, objs) {
 		if (err) {
@@ -77,7 +88,11 @@ CNFilter.prototype.updateServers = function (cb) {
 			var newObj = cutServerObj(obj);
 
 			self.cache[obj.uuid] = newObj;
-			self.pushFakeVM(newObj);
+
+			if (!oldObj || newObj.hostname !== oldObj.hostname ||
+			    newObj.down !== oldObj.down) {
+				self.pushFakeVM(newObj);
+			}
 
 			if (oldObj && newObj.down !== oldObj.down) {
 				self.log.info({
@@ -91,6 +106,9 @@ CNFilter.prototype.updateServers = function (cb) {
 				});
 			}
 		});
+		self.timer = setTimeout(function () {
+			self.updateServers();
+		}, UPDATE_INTERVAL);
 		if (cb)
 			cb();
 	});
@@ -152,8 +170,38 @@ CNFilter.prototype.pushFakeVM = function (server) {
 	};
 	vm.timers = vm.timers || [];
 	vm.timers.push({t: new Date(), n: 'cn-filter'});
+	this.fakeCNQueue.push(vm);
+	if (this.nextFakeTimer === undefined) {
+		var self = this;
+		this.nextFakeTimer = setTimeout(function () {
+			self.handleFakeQueue();
+		}, this.fakeInterval);
+	}
+};
+
+CNFilter.prototype.handleFakeQueue = function () {
+	if (this.nextFakeTimer) {
+		clearTimeout(this.nextFakeTimer);
+		this.nextFakeTimer = undefined;
+	}
+	var vm = this.fakeCNQueue.pop();
 	this.log.trace({vm: vm}, 'pushing fake CN vm');
-	this.push(vm);
+	var ret = this.push(vm);
+	if (ret === false) {
+		this.fakeInterval *= 2;
+		if (this.fakeInterval > MAX_FAKE_INTERVAL)
+			this.fakeInterval = MAX_FAKE_INTERVAL;
+	} else {
+		this.fakeInterval = Math.round(0.8 * this.fakeInterval);
+		if (this.fakeInterval < MIN_FAKE_INTERVAL)
+			this.fakeInterval = MIN_FAKE_INTERVAL;
+	}
+	if (this.fakeCNQueue.length > 0) {
+		var self = this;
+		this.nextFakeTimer = setTimeout(function () {
+			self.handleFakeQueue();
+		}, this.fakeInterval);
+	}
 };
 
 CNFilter.prototype._transform = function (vm, enc, cb) {
