From cf461a09395312d4f8bc2f8736e567e0c740b1e3 Mon Sep 17 00:00:00 2001
From: Mike Zeller <mike@mikezeller.net>
Date: Tue, 17 Apr 2018 16:37:28 +0000
Subject: [PATCH] OS-6857 Allow writing linklocal routes using MAC addresses
 instead of NIC index

---
 src/manifest                                  |  35 +
 src/vm/lib/metadata/agent.js                  |  77 +-
 src/vm/node_modules/VM.js                     |  43 +-
 src/vm/node_modules/macaddr/lib/macaddr.js    | 236 ++++++
 .../node_modules/assert-plus/assert.js        | 211 +++++
 .../node_modules/assert-plus/package.json     |  82 ++
 .../macaddr/node_modules/jsprim/LICENSE       |  19 +
 .../macaddr/node_modules/jsprim/lib/jsprim.js | 735 ++++++++++++++++++
 .../jsprim/node_modules/extsprintf/LICENSE    |  19 +
 .../node_modules/extsprintf/lib/extsprintf.js | 183 +++++
 .../node_modules/extsprintf/package.json      |  41 +
 .../node_modules/json-schema/lib/links.js     |  66 ++
 .../node_modules/json-schema/lib/validate.js  | 273 +++++++
 .../node_modules/json-schema/package.json     |  65 ++
 .../jsprim/node_modules/verror/LICENSE        |  19 +
 .../jsprim/node_modules/verror/lib/verror.js  | 451 +++++++++++
 .../verror/node_modules/core-util-is/LICENSE  |  19 +
 .../node_modules/core-util-is/lib/util.js     | 107 +++
 .../node_modules/core-util-is/package.json    |  59 ++
 .../jsprim/node_modules/verror/package.json   |  50 ++
 .../macaddr/node_modules/jsprim/package.json  |  51 ++
 src/vm/node_modules/macaddr/package.json      |  63 ++
 src/vm/tests/test-routes-joyent-minimal.js    |  48 +-
 23 files changed, 2926 insertions(+), 26 deletions(-)
 create mode 100644 src/vm/node_modules/macaddr/lib/macaddr.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/assert-plus/assert.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/assert-plus/package.json
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/LICENSE
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/lib/jsprim.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/LICENSE
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib/extsprintf.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/package.json
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/links.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/validate.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/package.json
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/LICENSE
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib/verror.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/LICENSE
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib/util.js
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/package.json
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/package.json
 create mode 100644 src/vm/node_modules/macaddr/node_modules/jsprim/package.json
 create mode 100644 src/vm/node_modules/macaddr/package.json

diff --git a/src/manifest b/src/manifest
index d7479116..f53d9576 100644
--- a/src/manifest
+++ b/src/manifest
@@ -479,6 +479,41 @@ f usr/vm/node_modules/hrtime.js 0444 root root
 f usr/vm/node_modules/ip.js 0444 root bin
 f usr/vm/node_modules/locker.js 0444 root bin
 f usr/vm/node_modules/nic.js 0444 root bin
+d usr/vm/node_modules/macaddr/ 0755 root root
+d usr/vm/node_modules/macaddr/lib 0755 root root
+f usr/vm/node_modules/macaddr/lib/macaddr.js 0644 root root
+d usr/vm/node_modules/macaddr/node_modules 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/assert-plus 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/assert-plus/assert.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/assert-plus/package.json 0644 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/lib 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/lib/jsprim.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/LICENSE 0644 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib/extsprintf.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/LICENSE 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/package.json 0644 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/links.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/validate.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/package.json 0644 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib/verror.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/LICENSE 0644 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is 0755 root root
+d usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib 0755 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib/util.js 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/LICENSE 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/package.json 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/package.json 0644 root root
+f usr/vm/node_modules/macaddr/node_modules/jsprim/package.json 0644 root root
+f usr/vm/node_modules/macaddr/package.json 0644 root root
 d usr/vm/node_modules/mkdirp 0755 root root
 f usr/vm/node_modules/mkdirp/LICENSE 0444 root root
 f usr/vm/node_modules/mkdirp/package.json 0444 root root
diff --git a/src/vm/lib/metadata/agent.js b/src/vm/lib/metadata/agent.js
index 74c3d4bc..aef34a0b 100644
--- a/src/vm/lib/metadata/agent.js
+++ b/src/vm/lib/metadata/agent.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * # OVERVIEW
@@ -151,6 +151,7 @@ var fs = require('fs');
 var getZoneinfo
     = require('/usr/vm/node_modules/vmload/vmload-zoneinfo').getZoneinfo;
 var guessHandleType = process.binding('tty_wrap').guessHandleType;
+var macaddr = require('/usr/vm/node_modules/macaddr');
 var net = require('net');
 var path = require('path');
 var util = require('util');
@@ -1394,27 +1395,79 @@ MetadataAgent.prototype.makeMetadataHandler = function (zone, socket) {
                         // to do the updateZone here so that we have latest
                         // data.
                         for (var r in vmobj.routes) {
+                            var gateway;
+                            var foundNic = null;
                             var route = { linklocal: false, dst: r };
-                            var nicIdx = vmobj.routes[r].match(/nics\[(\d+)\]/);
-                            if (!nicIdx) {
+                            var mac;
+                            var macMatch = vmobj.routes[r]
+                                .match(/^macs\[(.+)\]$/);
+                            var nicMac;
+                            var nicIdx = vmobj.routes[r]
+                                .match(/^nics\[(\d+)\]$/);
+
+                            if (!nicIdx && !macMatch) {
                                 // Non link-local route: we have all the
                                 // information we need already
                                 route.gateway = vmobj.routes[r];
                                 vmRoutes.push(route);
                                 continue;
                             }
-                            nicIdx = Number(nicIdx[1]);
 
-                            // Link-local route: we need the IP of the local nic
-                            if (!vmobj.hasOwnProperty('nics')
-                                || !vmobj.nics[nicIdx]
-                                || !vmobj.nics[nicIdx].hasOwnProperty('ip')
-                                || vmobj.nics[nicIdx].ip === 'dhcp') {
-
-                                continue;
+                            if (macMatch) {
+                                try {
+                                    mac = macaddr.parse(macMatch[1]);
+                                } catch (parseErr) {
+                                    zlog.warn(parseErr, 'failed to parse mac'
+                                        + ' addr');
+                                    continue;
+                                }
+
+                                if (!vmobj.hasOwnProperty('nics'))
+                                    continue;
+
+                                // Link-local route: we need the IP of the
+                                // local nic with the provided mac address
+                                for (var i = 0; i < vmobj.nics.length; i++) {
+                                    try {
+                                        nicMac = macaddr.parse(vmobj.nics[i]
+                                            .mac);
+                                    } catch (parseErr) {
+                                        zlog.warn(parseErr, 'failed to parse'
+                                            + ' nic mac addr');
+                                        continue;
+                                    }
+                                    if (nicMac.compare(mac) === 0) {
+                                        foundNic = vmobj.nics[i];
+                                        break;
+                                    }
+                                }
+
+                                if (!foundNic || !foundNic.hasOwnProperty('ip')
+                                    || foundNic.ip === 'dhcp') {
+
+                                    continue;
+                                }
+
+                                gateway = foundNic.ip;
+
+                            } else {
+                                nicIdx = Number(nicIdx[1]);
+
+                                // Link-local route: we need the IP of the
+                                // local nic
+                                if (!vmobj.hasOwnProperty('nics')
+                                    || !vmobj.nics[nicIdx]
+                                    || !vmobj.nics[nicIdx].hasOwnProperty('ip')
+                                    || vmobj.nics[nicIdx].ip === 'dhcp') {
+
+                                    continue;
+                                }
+
+                                gateway = vmobj.nics[nicIdx].ip;
                             }
 
-                            route.gateway = vmobj.nics[nicIdx].ip;
+                            assert.string(gateway, 'gateway');
+                            route.gateway = gateway;
                             route.linklocal = true;
                             vmRoutes.push(route);
                         }
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index ee4fbe72..4b04d0ba 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -83,6 +83,7 @@ var fwlog = require('/usr/fw/lib/util/log');
 var http = require('http');
 var ipaddr = require('/usr/vm/node_modules/ip');
 var libuuid = require('/usr/node/node_modules/uuid');
+var macaddr = require('/usr/vm/node_modules/macaddr');
 var mkdirp = require('/usr/vm/node_modules/mkdirp');
 var mod_nic = require('/usr/vm/node_modules/nic');
 var net = require('net');
@@ -5014,18 +5015,48 @@ function checkPayloadProperties(payload, vmobj, log, callback)
     }
 
     function validLocalRoute(r) {
-        var nicIdx = r.match(/nics\[(\d+)\]/);
-        if (!nicIdx) {
-            is_nic = false;
-            return false;
+        var index;
+        var macAddress;
+        var macMatch = r.match(/^macs\[(.+)\]$/);
+        var nicIdx = null;
+        var nicMatch = r.match(/^nics\[(\d+)\]$/);
+
+        if (macMatch) {
+            try {
+                macAddress = macaddr.parse(macMatch[1]);
+            } catch (parseErr) {
+                log.debug(parseErr, 'failed to parse mac from macs[]');
+            }
+
+            if (!macAddress) {
+                is_nic = false;
+                return false;
+            }
+
+            for (index = 0; index < nics_result_ordered.length; index++) {
+                if (nics_result_ordered[index].mac === macAddress.toString()) {
+                    nicIdx = index;
+                    break;
+                }
+            }
+
+        } else {
+            if (!nicMatch) {
+                is_nic = false;
+                return false;
+            }
+            nicIdx = Number(nicMatch[1]);
         }
+
         is_nic = true;
 
+        if (nicIdx === null)
+            return false;
+
         if (nics_result_ordered.length === 0) {
             return false;
         }
 
-        nicIdx = Number(nicIdx[1]);
         if (!nics_result_ordered[nicIdx]
             || !nics_result_ordered[nicIdx].hasOwnProperty('ips')) {
             return false;
@@ -5059,7 +5090,7 @@ function checkPayloadProperties(payload, vmobj, log, callback)
                         is_nic ? 'Route gateway: "' + src
                             + '" refers to non-existent or DHCP nic'
                         : 'Invalid route gateway: "' + src
-                            + '" (must be IP address or nic)'));
+                            + '" (must be IP address, MAC address, or nic)'));
                     return;
                 }
 
diff --git a/src/vm/node_modules/macaddr/lib/macaddr.js b/src/vm/node_modules/macaddr/lib/macaddr.js
new file mode 100644
index 00000000..1451ce7f
--- /dev/null
+++ b/src/vm/node_modules/macaddr/lib/macaddr.js
@@ -0,0 +1,236 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+'use strict';
+
+var assert = require('assert-plus');
+var mod_jsprim = require('jsprim');
+
+var HEX_RE = /^[a-f0-9]$/;
+
+// --- Helpers
+
+function isxdigit(c) {
+    return HEX_RE.test(c);
+}
+
+
+var strDefaults = {
+    zeroPad: true // Pad with zeros when an octet would print as 1 char
+};
+
+
+function getStrOpt(opts, name) {
+    if (opts && opts.hasOwnProperty(name)) {
+        return opts[name];
+    } else {
+        return strDefaults[name];
+    }
+}
+
+
+// --- Main class
+
+/**
+ * The MAC class wraps a 48-bit integer, and provides several helper
+ * methods for manipulating it.
+ *
+ * It could wrap an array of 6 octets instead, but doing so complicates
+ * processing both numeric input and output, without improving string
+ * processing in a useful way. (We would be able to remove the bitwise
+ * arithmetic in .toString(), but it would just end up in parseLong()
+ * instead.)
+ *
+ * Since the initial motivation for this library was a program that
+ * stores MAC addresses as numbers in its database, making numeric
+ * processing easier made more sense.
+ */
+function MAC(value) {
+    assert.number(value, 'value');
+    this._value = value;
+}
+
+
+MAC.prototype.toString = function toString(opts) {
+    assert.optionalObject(opts, 'opts');
+    var zeroPad = getStrOpt(opts, 'zeroPad');
+
+    var result = '';
+    var fields = [
+        /*
+         * JavaScript converts numbers to 32-bit integers when doing bitwise
+         * arithmetic, so we have to handle the first two parts of the number
+         * differently.
+         */
+        (this._value / 0x010000000000) & 0xff,
+        (this._value / 0x000100000000) & 0xff,
+
+        (this._value >>> 24) & 0xff,
+        (this._value >>> 16) & 0xff,
+        (this._value >>> 8) & 0xff,
+        (this._value) & 0xff
+    ];
+
+    var octet;
+
+    for (var i = 0; i < fields.length; i++) {
+        if (i !== 0) {
+            result += ':';
+        }
+
+        octet = fields[i].toString(16);
+        if (zeroPad && octet.length === 1) {
+            result += '0';
+        }
+        result += octet;
+    }
+
+    return result;
+};
+
+
+MAC.prototype.toLong = function toLong() {
+    return this._value;
+};
+
+
+MAC.prototype.compare = function compare(other) {
+    assert.ok(other instanceof MAC, 'other is a MAC object');
+
+    if (this._value < other._value) {
+        return -1;
+    } else if (this._value > other._value) {
+        return 1;
+    } else {
+        return 0;
+    }
+};
+
+
+// --- Input parsing
+
+function parseString(input) {
+    assert.string(input);
+    input = input.toLowerCase();
+    var pos = 0;
+    var value = 0;
+    var octet = '';
+    var sep = null;
+    var chr, tmp;
+
+    /*
+     * Test if a character is a valid separator. If we haven't seen a
+     * separator yet, and it's one of the allowed separator characters,
+     * lock in to that character to prevent using a different value later.
+     */
+    function issep(s) {
+        if (sep !== null) {
+            return (s === sep);
+        }
+
+        if (s === ':' || s === '-') {
+            sep = s;
+            return true;
+        }
+
+        return false;
+    }
+
+    function process() {
+        if (octet.length === 0) {
+            throw new Error('expected to find a hexadecimal number before ' +
+                JSON.stringify(sep));
+        } else if (octet.length > 2) {
+            throw new Error(
+                'too many hexadecimal digits in ' + JSON.stringify(octet));
+        } else if (pos < 6) {
+            tmp = mod_jsprim.parseInteger(octet, { base: 16 });
+            if (tmp instanceof Error) {
+                throw tmp;
+            }
+            value *= 0x100;
+            value += tmp;
+            pos += 1;
+            octet = '';
+        } else {
+            throw new Error('too many octets in MAC address');
+        }
+    }
+
+    for (var i = 0; i < input.length; i++) {
+        chr = input[i];
+        if (issep(chr)) {
+            process();
+        } else if (isxdigit(chr)) {
+            octet += chr;
+        } else {
+            throw new Error('unrecognized character ' + JSON.stringify(chr));
+        }
+    }
+
+    if (issep(chr)) {
+        throw new Error('trailing ' + JSON.stringify(sep) + ' in MAC address');
+    }
+
+    if (pos === 0) {
+        if (octet.length !== 12) {
+            throw new Error('MAC address is too short');
+        }
+
+        value = mod_jsprim.parseInteger(octet, { base: 16 });
+        if (value instanceof Error) {
+            throw value;
+        }
+    } else {
+        process();
+
+        if (pos !== 6) {
+            throw new Error('too few octets in MAC address');
+        }
+    }
+
+    return new MAC(value);
+}
+
+
+function parseLong(input) {
+    assert.number(input);
+
+    if (input !== Math.floor(input)) {
+        throw new Error('Value must be an integer');
+    }
+
+    if (input < 0 || input > 0xffffffffffff) {
+        throw new Error('Value must be 48-bit');
+    }
+
+    return new MAC(input);
+}
+
+
+// --- Exports
+
+function macaddrParse(input) {
+    var type = typeof (input);
+
+    switch (type) {
+    case 'string':
+        return parseString(input);
+    case 'number':
+        return parseLong(input);
+    default:
+        throw new Error('expected string or integer, but got ' + type);
+    }
+}
+
+
+module.exports = {
+    parse: macaddrParse
+};
diff --git a/src/vm/node_modules/macaddr/node_modules/assert-plus/assert.js b/src/vm/node_modules/macaddr/node_modules/assert-plus/assert.js
new file mode 100644
index 00000000..26f944ee
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/assert-plus/assert.js
@@ -0,0 +1,211 @@
+// Copyright (c) 2012, Mark Cavage. All rights reserved.
+// Copyright 2015 Joyent, Inc.
+
+var assert = require('assert');
+var Stream = require('stream').Stream;
+var util = require('util');
+
+
+///--- Globals
+
+/* JSSTYLED */
+var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
+
+
+///--- Internal
+
+function _capitalize(str) {
+    return (str.charAt(0).toUpperCase() + str.slice(1));
+}
+
+function _toss(name, expected, oper, arg, actual) {
+    throw new assert.AssertionError({
+        message: util.format('%s (%s) is required', name, expected),
+        actual: (actual === undefined) ? typeof (arg) : actual(arg),
+        expected: expected,
+        operator: oper || '===',
+        stackStartFunction: _toss.caller
+    });
+}
+
+function _getClass(arg) {
+    return (Object.prototype.toString.call(arg).slice(8, -1));
+}
+
+function noop() {
+    // Why even bother with asserts?
+}
+
+
+///--- Exports
+
+var types = {
+    bool: {
+        check: function (arg) { return typeof (arg) === 'boolean'; }
+    },
+    func: {
+        check: function (arg) { return typeof (arg) === 'function'; }
+    },
+    string: {
+        check: function (arg) { return typeof (arg) === 'string'; }
+    },
+    object: {
+        check: function (arg) {
+            return typeof (arg) === 'object' && arg !== null;
+        }
+    },
+    number: {
+        check: function (arg) {
+            return typeof (arg) === 'number' && !isNaN(arg);
+        }
+    },
+    finite: {
+        check: function (arg) {
+            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);
+        }
+    },
+    buffer: {
+        check: function (arg) { return Buffer.isBuffer(arg); },
+        operator: 'Buffer.isBuffer'
+    },
+    array: {
+        check: function (arg) { return Array.isArray(arg); },
+        operator: 'Array.isArray'
+    },
+    stream: {
+        check: function (arg) { return arg instanceof Stream; },
+        operator: 'instanceof',
+        actual: _getClass
+    },
+    date: {
+        check: function (arg) { return arg instanceof Date; },
+        operator: 'instanceof',
+        actual: _getClass
+    },
+    regexp: {
+        check: function (arg) { return arg instanceof RegExp; },
+        operator: 'instanceof',
+        actual: _getClass
+    },
+    uuid: {
+        check: function (arg) {
+            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);
+        },
+        operator: 'isUUID'
+    }
+};
+
+function _setExports(ndebug) {
+    var keys = Object.keys(types);
+    var out;
+
+    /* re-export standard assert */
+    if (process.env.NODE_NDEBUG) {
+        out = noop;
+    } else {
+        out = function (arg, msg) {
+            if (!arg) {
+                _toss(msg, 'true', arg);
+            }
+        };
+    }
+
+    /* standard checks */
+    keys.forEach(function (k) {
+        if (ndebug) {
+            out[k] = noop;
+            return;
+        }
+        var type = types[k];
+        out[k] = function (arg, msg) {
+            if (!type.check(arg)) {
+                _toss(msg, k, type.operator, arg, type.actual);
+            }
+        };
+    });
+
+    /* optional checks */
+    keys.forEach(function (k) {
+        var name = 'optional' + _capitalize(k);
+        if (ndebug) {
+            out[name] = noop;
+            return;
+        }
+        var type = types[k];
+        out[name] = function (arg, msg) {
+            if (arg === undefined || arg === null) {
+                return;
+            }
+            if (!type.check(arg)) {
+                _toss(msg, k, type.operator, arg, type.actual);
+            }
+        };
+    });
+
+    /* arrayOf checks */
+    keys.forEach(function (k) {
+        var name = 'arrayOf' + _capitalize(k);
+        if (ndebug) {
+            out[name] = noop;
+            return;
+        }
+        var type = types[k];
+        var expected = '[' + k + ']';
+        out[name] = function (arg, msg) {
+            if (!Array.isArray(arg)) {
+                _toss(msg, expected, type.operator, arg, type.actual);
+            }
+            var i;
+            for (i = 0; i < arg.length; i++) {
+                if (!type.check(arg[i])) {
+                    _toss(msg, expected, type.operator, arg, type.actual);
+                }
+            }
+        };
+    });
+
+    /* optionalArrayOf checks */
+    keys.forEach(function (k) {
+        var name = 'optionalArrayOf' + _capitalize(k);
+        if (ndebug) {
+            out[name] = noop;
+            return;
+        }
+        var type = types[k];
+        var expected = '[' + k + ']';
+        out[name] = function (arg, msg) {
+            if (arg === undefined || arg === null) {
+                return;
+            }
+            if (!Array.isArray(arg)) {
+                _toss(msg, expected, type.operator, arg, type.actual);
+            }
+            var i;
+            for (i = 0; i < arg.length; i++) {
+                if (!type.check(arg[i])) {
+                    _toss(msg, expected, type.operator, arg, type.actual);
+                }
+            }
+        };
+    });
+
+    /* re-export built-in assertions */
+    Object.keys(assert).forEach(function (k) {
+        if (k === 'AssertionError') {
+            out[k] = assert[k];
+            return;
+        }
+        if (ndebug) {
+            out[k] = noop;
+            return;
+        }
+        out[k] = assert[k];
+    });
+
+    /* export ourselves (for unit tests _only_) */
+    out._setExports = _setExports;
+
+    return out;
+}
+
+module.exports = _setExports(process.env.NODE_NDEBUG);
diff --git a/src/vm/node_modules/macaddr/node_modules/assert-plus/package.json b/src/vm/node_modules/macaddr/node_modules/assert-plus/package.json
new file mode 100644
index 00000000..824f313c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/assert-plus/package.json
@@ -0,0 +1,82 @@
+{
+  "author": {
+    "name": "Mark Cavage",
+    "email": "mcavage@gmail.com"
+  },
+  "name": "assert-plus",
+  "description": "Extra assertions on top of node's assert module",
+  "version": "1.0.0",
+  "license": "MIT",
+  "main": "./assert.js",
+  "devDependencies": {
+    "tape": "4.2.2",
+    "faucet": "0.0.1"
+  },
+  "optionalDependencies": {},
+  "scripts": {
+    "test": "tape tests/*.js | ./node_modules/.bin/faucet"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/mcavage/node-assert-plus.git"
+  },
+  "engines": {
+    "node": ">=0.8"
+  },
+  "contributors": [
+    {
+      "name": "Dave Eddy",
+      "email": "dave@daveeddy.com"
+    },
+    {
+      "name": "Fred Kuo",
+      "email": "fred.kuo@joyent.com"
+    },
+    {
+      "name": "Lars-Magnus Skog",
+      "email": "ralphtheninja@riseup.net"
+    },
+    {
+      "name": "Mark Cavage",
+      "email": "mcavage@gmail.com"
+    },
+    {
+      "name": "Patrick Mooney",
+      "email": "pmooney@pfmooney.com"
+    },
+    {
+      "name": "Rob Gulewich",
+      "email": "robert.gulewich@joyent.com"
+    }
+  ],
+  "bugs": {
+    "url": "https://github.com/mcavage/node-assert-plus/issues"
+  },
+  "homepage": "https://github.com/mcavage/node-assert-plus#readme",
+  "dependencies": {},
+  "_id": "assert-plus@1.0.0",
+  "_shasum": "f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525",
+  "_resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+  "_from": "assert-plus@>=1.0.0 <2.0.0",
+  "_npmVersion": "3.3.9",
+  "_nodeVersion": "0.10.40",
+  "_npmUser": {
+    "name": "pfmooney",
+    "email": "patrick.f.mooney@gmail.com"
+  },
+  "maintainers": [
+    {
+      "name": "mcavage",
+      "email": "mcavage@gmail.com"
+    },
+    {
+      "name": "pfmooney",
+      "email": "patrick.f.mooney@gmail.com"
+    }
+  ],
+  "dist": {
+    "shasum": "f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525",
+    "tarball": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"
+  },
+  "directories": {}
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/LICENSE b/src/vm/node_modules/macaddr/node_modules/jsprim/LICENSE
new file mode 100644
index 00000000..cbc0bb3b
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2012, Joyent, Inc. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/lib/jsprim.js b/src/vm/node_modules/macaddr/node_modules/jsprim/lib/jsprim.js
new file mode 100644
index 00000000..f7d0d81c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/lib/jsprim.js
@@ -0,0 +1,735 @@
+/*
+ * lib/jsprim.js: utilities for primitive JavaScript types
+ */
+
+var mod_assert = require('assert-plus');
+var mod_util = require('util');
+
+var mod_extsprintf = require('extsprintf');
+var mod_verror = require('verror');
+var mod_jsonschema = require('json-schema');
+
+/*
+ * Public interface
+ */
+exports.deepCopy = deepCopy;
+exports.deepEqual = deepEqual;
+exports.isEmpty = isEmpty;
+exports.hasKey = hasKey;
+exports.forEachKey = forEachKey;
+exports.pluck = pluck;
+exports.flattenObject = flattenObject;
+exports.flattenIter = flattenIter;
+exports.validateJsonObject = validateJsonObjectJS;
+exports.validateJsonObjectJS = validateJsonObjectJS;
+exports.randElt = randElt;
+exports.extraProperties = extraProperties;
+exports.mergeObjects = mergeObjects;
+
+exports.startsWith = startsWith;
+exports.endsWith = endsWith;
+
+exports.parseInteger = parseInteger;
+
+exports.iso8601 = iso8601;
+exports.rfc1123 = rfc1123;
+exports.parseDateTime = parseDateTime;
+
+exports.hrtimediff = hrtimeDiff;
+exports.hrtimeDiff = hrtimeDiff;
+exports.hrtimeAccum = hrtimeAccum;
+exports.hrtimeAdd = hrtimeAdd;
+exports.hrtimeNanosec = hrtimeNanosec;
+exports.hrtimeMicrosec = hrtimeMicrosec;
+exports.hrtimeMillisec = hrtimeMillisec;
+
+
+/*
+ * Deep copy an acyclic *basic* Javascript object.  This only handles basic
+ * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects
+ * containing these.  This does *not* handle instances of other classes.
+ */
+function deepCopy(obj)
+{
+	var ret, key;
+	var marker = '__deepCopy';
+
+	if (obj && obj[marker])
+		throw (new Error('attempted deep copy of cyclic object'));
+
+	if (obj && obj.constructor == Object) {
+		ret = {};
+		obj[marker] = true;
+
+		for (key in obj) {
+			if (key == marker)
+				continue;
+
+			ret[key] = deepCopy(obj[key]);
+		}
+
+		delete (obj[marker]);
+		return (ret);
+	}
+
+	if (obj && obj.constructor == Array) {
+		ret = [];
+		obj[marker] = true;
+
+		for (key = 0; key < obj.length; key++)
+			ret.push(deepCopy(obj[key]));
+
+		delete (obj[marker]);
+		return (ret);
+	}
+
+	/*
+	 * It must be a primitive type -- just return it.
+	 */
+	return (obj);
+}
+
+function deepEqual(obj1, obj2)
+{
+	if (typeof (obj1) != typeof (obj2))
+		return (false);
+
+	if (obj1 === null || obj2 === null || typeof (obj1) != 'object')
+		return (obj1 === obj2);
+
+	if (obj1.constructor != obj2.constructor)
+		return (false);
+
+	var k;
+	for (k in obj1) {
+		if (!obj2.hasOwnProperty(k))
+			return (false);
+
+		if (!deepEqual(obj1[k], obj2[k]))
+			return (false);
+	}
+
+	for (k in obj2) {
+		if (!obj1.hasOwnProperty(k))
+			return (false);
+	}
+
+	return (true);
+}
+
+function isEmpty(obj)
+{
+	var key;
+	for (key in obj)
+		return (false);
+	return (true);
+}
+
+function hasKey(obj, key)
+{
+	mod_assert.equal(typeof (key), 'string');
+	return (Object.prototype.hasOwnProperty.call(obj, key));
+}
+
+function forEachKey(obj, callback)
+{
+	for (var key in obj) {
+		if (hasKey(obj, key)) {
+			callback(key, obj[key]);
+		}
+	}
+}
+
+function pluck(obj, key)
+{
+	mod_assert.equal(typeof (key), 'string');
+	return (pluckv(obj, key));
+}
+
+function pluckv(obj, key)
+{
+	if (obj === null || typeof (obj) !== 'object')
+		return (undefined);
+
+	if (obj.hasOwnProperty(key))
+		return (obj[key]);
+
+	var i = key.indexOf('.');
+	if (i == -1)
+		return (undefined);
+
+	var key1 = key.substr(0, i);
+	if (!obj.hasOwnProperty(key1))
+		return (undefined);
+
+	return (pluckv(obj[key1], key.substr(i + 1)));
+}
+
+/*
+ * Invoke callback(row) for each entry in the array that would be returned by
+ * flattenObject(data, depth).  This is just like flattenObject(data,
+ * depth).forEach(callback), except that the intermediate array is never
+ * created.
+ */
+function flattenIter(data, depth, callback)
+{
+	doFlattenIter(data, depth, [], callback);
+}
+
+function doFlattenIter(data, depth, accum, callback)
+{
+	var each;
+	var key;
+
+	if (depth === 0) {
+		each = accum.slice(0);
+		each.push(data);
+		callback(each);
+		return;
+	}
+
+	mod_assert.ok(data !== null);
+	mod_assert.equal(typeof (data), 'object');
+	mod_assert.equal(typeof (depth), 'number');
+	mod_assert.ok(depth >= 0);
+
+	for (key in data) {
+		each = accum.slice(0);
+		each.push(key);
+		doFlattenIter(data[key], depth - 1, each, callback);
+	}
+}
+
+function flattenObject(data, depth)
+{
+	if (depth === 0)
+		return ([ data ]);
+
+	mod_assert.ok(data !== null);
+	mod_assert.equal(typeof (data), 'object');
+	mod_assert.equal(typeof (depth), 'number');
+	mod_assert.ok(depth >= 0);
+
+	var rv = [];
+	var key;
+
+	for (key in data) {
+		flattenObject(data[key], depth - 1).forEach(function (p) {
+			rv.push([ key ].concat(p));
+		});
+	}
+
+	return (rv);
+}
+
+function startsWith(str, prefix)
+{
+	return (str.substr(0, prefix.length) == prefix);
+}
+
+function endsWith(str, suffix)
+{
+	return (str.substr(
+	    str.length - suffix.length, suffix.length) == suffix);
+}
+
+function iso8601(d)
+{
+	if (typeof (d) == 'number')
+		d = new Date(d);
+	mod_assert.ok(d.constructor === Date);
+	return (mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',
+	    d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(),
+	    d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(),
+	    d.getUTCMilliseconds()));
+}
+
+var RFC1123_MONTHS = [
+    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
+    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
+var RFC1123_DAYS = [
+    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
+
+function rfc1123(date) {
+	return (mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT',
+	    RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(),
+	    RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(),
+	    date.getUTCHours(), date.getUTCMinutes(),
+	    date.getUTCSeconds()));
+}
+
+/*
+ * Parses a date expressed as a string, as either a number of milliseconds since
+ * the epoch or any string format that Date accepts, giving preference to the
+ * former where these two sets overlap (e.g., small numbers).
+ */
+function parseDateTime(str)
+{
+	/*
+	 * This is irritatingly implicit, but significantly more concise than
+	 * alternatives.  The "+str" will convert a string containing only a
+	 * number directly to a Number, or NaN for other strings.  Thus, if the
+	 * conversion succeeds, we use it (this is the milliseconds-since-epoch
+	 * case).  Otherwise, we pass the string directly to the Date
+	 * constructor to parse.
+	 */
+	var numeric = +str;
+	if (!isNaN(numeric)) {
+		return (new Date(numeric));
+	} else {
+		return (new Date(str));
+	}
+}
+
+
+/*
+ * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
+ * the ES6 definitions here, while allowing for them to someday be higher.
+ */
+var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
+var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
+
+
+/*
+ * Default options for parseInteger().
+ */
+var PI_DEFAULTS = {
+	base: 10,
+	allowSign: true,
+	allowPrefix: false,
+	allowTrailing: false,
+	allowImprecise: false,
+	trimWhitespace: false,
+	leadingZeroIsOctal: false
+};
+
+var CP_0 = 0x30;
+var CP_9 = 0x39;
+
+var CP_A = 0x41;
+var CP_B = 0x42;
+var CP_O = 0x4f;
+var CP_T = 0x54;
+var CP_X = 0x58;
+var CP_Z = 0x5a;
+
+var CP_a = 0x61;
+var CP_b = 0x62;
+var CP_o = 0x6f;
+var CP_t = 0x74;
+var CP_x = 0x78;
+var CP_z = 0x7a;
+
+var PI_CONV_DEC = 0x30;
+var PI_CONV_UC = 0x37;
+var PI_CONV_LC = 0x57;
+
+
+/*
+ * A stricter version of parseInt() that provides options for changing what
+ * is an acceptable string (for example, disallowing trailing characters).
+ */
+function parseInteger(str, uopts)
+{
+	mod_assert.string(str, 'str');
+	mod_assert.optionalObject(uopts, 'options');
+
+	var baseOverride = false;
+	var options = PI_DEFAULTS;
+
+	if (uopts) {
+		baseOverride = hasKey(uopts, 'base');
+		options = mergeObjects(options, uopts);
+		mod_assert.number(options.base, 'options.base');
+		mod_assert.ok(options.base >= 2, 'options.base >= 2');
+		mod_assert.ok(options.base <= 36, 'options.base <= 36');
+		mod_assert.bool(options.allowSign, 'options.allowSign');
+		mod_assert.bool(options.allowPrefix, 'options.allowPrefix');
+		mod_assert.bool(options.allowTrailing,
+		    'options.allowTrailing');
+		mod_assert.bool(options.allowImprecise,
+		    'options.allowImprecise');
+		mod_assert.bool(options.trimWhitespace,
+		    'options.trimWhitespace');
+		mod_assert.bool(options.leadingZeroIsOctal,
+		    'options.leadingZeroIsOctal');
+
+		if (options.leadingZeroIsOctal) {
+			mod_assert.ok(!baseOverride,
+			    '"base" and "leadingZeroIsOctal" are ' +
+			    'mutually exclusive');
+		}
+	}
+
+	var c;
+	var pbase = -1;
+	var base = options.base;
+	var start;
+	var mult = 1;
+	var value = 0;
+	var idx = 0;
+	var len = str.length;
+
+	/* Trim any whitespace on the left side. */
+	if (options.trimWhitespace) {
+		while (idx < len && isSpace(str.charCodeAt(idx))) {
+			++idx;
+		}
+	}
+
+	/* Check the number for a leading sign. */
+	if (options.allowSign) {
+		if (str[idx] === '-') {
+			idx += 1;
+			mult = -1;
+		} else if (str[idx] === '+') {
+			idx += 1;
+		}
+	}
+
+	/* Parse the base-indicating prefix if there is one. */
+	if (str[idx] === '0') {
+		if (options.allowPrefix) {
+			pbase = prefixToBase(str.charCodeAt(idx + 1));
+			if (pbase !== -1 && (!baseOverride || pbase === base)) {
+				base = pbase;
+				idx += 2;
+			}
+		}
+
+		if (pbase === -1 && options.leadingZeroIsOctal) {
+			base = 8;
+		}
+	}
+
+	/* Parse the actual digits. */
+	for (start = idx; idx < len; ++idx) {
+		c = translateDigit(str.charCodeAt(idx));
+		if (c !== -1 && c < base) {
+			value *= base;
+			value += c;
+		} else {
+			break;
+		}
+	}
+
+	/* If we didn't parse any digits, we have an invalid number. */
+	if (start === idx) {
+		return (new Error('invalid number: ' + JSON.stringify(str)));
+	}
+
+	/* Trim any whitespace on the right side. */
+	if (options.trimWhitespace) {
+		while (idx < len && isSpace(str.charCodeAt(idx))) {
+			++idx;
+		}
+	}
+
+	/* Check for trailing characters. */
+	if (idx < len && !options.allowTrailing) {
+		return (new Error('trailing characters after number: ' +
+		    JSON.stringify(str.slice(idx))));
+	}
+
+	/* If our value is 0, we return now, to avoid returning -0. */
+	if (value === 0) {
+		return (0);
+	}
+
+	/* Calculate our final value. */
+	var result = value * mult;
+
+	/*
+	 * If the string represents a value that cannot be precisely represented
+	 * by JavaScript, then we want to check that:
+	 *
+	 * - We never increased the value past MAX_SAFE_INTEGER
+	 * - We don't make the result negative and below MIN_SAFE_INTEGER
+	 *
+	 * Because we only ever increment the value during parsing, there's no
+	 * chance of moving past MAX_SAFE_INTEGER and then dropping below it
+	 * again, losing precision in the process. This means that we only need
+	 * to do our checks here, at the end.
+	 */
+	if (!options.allowImprecise &&
+	    (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {
+		return (new Error('number is outside of the supported range: ' +
+		    JSON.stringify(str.slice(start, idx))));
+	}
+
+	return (result);
+}
+
+
+/*
+ * Interpret a character code as a base-36 digit.
+ */
+function translateDigit(d)
+{
+	if (d >= CP_0 && d <= CP_9) {
+		/* '0' to '9' -> 0 to 9 */
+		return (d - PI_CONV_DEC);
+	} else if (d >= CP_A && d <= CP_Z) {
+		/* 'A' - 'Z' -> 10 to 35 */
+		return (d - PI_CONV_UC);
+	} else if (d >= CP_a && d <= CP_z) {
+		/* 'a' - 'z' -> 10 to 35 */
+		return (d - PI_CONV_LC);
+	} else {
+		/* Invalid character code */
+		return (-1);
+	}
+}
+
+
+/*
+ * Test if a value matches the ECMAScript definition of trimmable whitespace.
+ */
+function isSpace(c)
+{
+	return (c === 0x20) ||
+	    (c >= 0x0009 && c <= 0x000d) ||
+	    (c === 0x00a0) ||
+	    (c === 0x1680) ||
+	    (c === 0x180e) ||
+	    (c >= 0x2000 && c <= 0x200a) ||
+	    (c === 0x2028) ||
+	    (c === 0x2029) ||
+	    (c === 0x202f) ||
+	    (c === 0x205f) ||
+	    (c === 0x3000) ||
+	    (c === 0xfeff);
+}
+
+
+/*
+ * Determine which base a character indicates (e.g., 'x' indicates hex).
+ */
+function prefixToBase(c)
+{
+	if (c === CP_b || c === CP_B) {
+		/* 0b/0B (binary) */
+		return (2);
+	} else if (c === CP_o || c === CP_O) {
+		/* 0o/0O (octal) */
+		return (8);
+	} else if (c === CP_t || c === CP_T) {
+		/* 0t/0T (decimal) */
+		return (10);
+	} else if (c === CP_x || c === CP_X) {
+		/* 0x/0X (hexadecimal) */
+		return (16);
+	} else {
+		/* Not a meaningful character */
+		return (-1);
+	}
+}
+
+
+function validateJsonObjectJS(schema, input)
+{
+	var report = mod_jsonschema.validate(input, schema);
+
+	if (report.errors.length === 0)
+		return (null);
+
+	/* Currently, we only do anything useful with the first error. */
+	var error = report.errors[0];
+
+	/* The failed property is given by a URI with an irrelevant prefix. */
+	var propname = error['property'];
+	var reason = error['message'].toLowerCase();
+	var i, j;
+
+	/*
+	 * There's at least one case where the property error message is
+	 * confusing at best.  We work around this here.
+	 */
+	if ((i = reason.indexOf('the property ')) != -1 &&
+	    (j = reason.indexOf(' is not defined in the schema and the ' +
+	    'schema does not allow additional properties')) != -1) {
+		i += 'the property '.length;
+		if (propname === '')
+			propname = reason.substr(i, j - i);
+		else
+			propname = propname + '.' + reason.substr(i, j - i);
+
+		reason = 'unsupported property';
+	}
+
+	var rv = new mod_verror.VError('property "%s": %s', propname, reason);
+	rv.jsv_details = error;
+	return (rv);
+}
+
+function randElt(arr)
+{
+	mod_assert.ok(Array.isArray(arr) && arr.length > 0,
+	    'randElt argument must be a non-empty array');
+
+	return (arr[Math.floor(Math.random() * arr.length)]);
+}
+
+function assertHrtime(a)
+{
+	mod_assert.ok(a[0] >= 0 && a[1] >= 0,
+	    'negative numbers not allowed in hrtimes');
+	mod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');
+}
+
+/*
+ * Compute the time elapsed between hrtime readings A and B, where A is later
+ * than B.  hrtime readings come from Node's process.hrtime().  There is no
+ * defined way to represent negative deltas, so it's illegal to diff B from A
+ * where the time denoted by B is later than the time denoted by A.  If this
+ * becomes valuable, we can define a representation and extend the
+ * implementation to support it.
+ */
+function hrtimeDiff(a, b)
+{
+	assertHrtime(a);
+	assertHrtime(b);
+	mod_assert.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]),
+	    'negative differences not allowed');
+
+	var rv = [ a[0] - b[0], 0 ];
+
+	if (a[1] >= b[1]) {
+		rv[1] = a[1] - b[1];
+	} else {
+		rv[0]--;
+		rv[1] = 1e9 - (b[1] - a[1]);
+	}
+
+	return (rv);
+}
+
+/*
+ * Convert a hrtime reading from the array format returned by Node's
+ * process.hrtime() into a scalar number of nanoseconds.
+ */
+function hrtimeNanosec(a)
+{
+	assertHrtime(a);
+
+	return (Math.floor(a[0] * 1e9 + a[1]));
+}
+
+/*
+ * Convert a hrtime reading from the array format returned by Node's
+ * process.hrtime() into a scalar number of microseconds.
+ */
+function hrtimeMicrosec(a)
+{
+	assertHrtime(a);
+
+	return (Math.floor(a[0] * 1e6 + a[1] / 1e3));
+}
+
+/*
+ * Convert a hrtime reading from the array format returned by Node's
+ * process.hrtime() into a scalar number of milliseconds.
+ */
+function hrtimeMillisec(a)
+{
+	assertHrtime(a);
+
+	return (Math.floor(a[0] * 1e3 + a[1] / 1e6));
+}
+
+/*
+ * Add two hrtime readings A and B, overwriting A with the result of the
+ * addition.  This function is useful for accumulating several hrtime intervals
+ * into a counter.  Returns A.
+ */
+function hrtimeAccum(a, b)
+{
+	assertHrtime(a);
+	assertHrtime(b);
+
+	/*
+	 * Accumulate the nanosecond component.
+	 */
+	a[1] += b[1];
+	if (a[1] >= 1e9) {
+		/*
+		 * The nanosecond component overflowed, so carry to the seconds
+		 * field.
+		 */
+		a[0]++;
+		a[1] -= 1e9;
+	}
+
+	/*
+	 * Accumulate the seconds component.
+	 */
+	a[0] += b[0];
+
+	return (a);
+}
+
+/*
+ * Add two hrtime readings A and B, returning the result as a new hrtime array.
+ * Does not modify either input argument.
+ */
+function hrtimeAdd(a, b)
+{
+	assertHrtime(a);
+
+	var rv = [ a[0], a[1] ];
+
+	return (hrtimeAccum(rv, b));
+}
+
+
+/*
+ * Check an object for unexpected properties.  Accepts the object to check, and
+ * an array of allowed property names (strings).  Returns an array of key names
+ * that were found on the object, but did not appear in the list of allowed
+ * properties.  If no properties were found, the returned array will be of
+ * zero length.
+ */
+function extraProperties(obj, allowed)
+{
+	mod_assert.ok(typeof (obj) === 'object' && obj !== null,
+	    'obj argument must be a non-null object');
+	mod_assert.ok(Array.isArray(allowed),
+	    'allowed argument must be an array of strings');
+	for (var i = 0; i < allowed.length; i++) {
+		mod_assert.ok(typeof (allowed[i]) === 'string',
+		    'allowed argument must be an array of strings');
+	}
+
+	return (Object.keys(obj).filter(function (key) {
+		return (allowed.indexOf(key) === -1);
+	}));
+}
+
+/*
+ * Given three sets of properties "provided" (may be undefined), "overrides"
+ * (required), and "defaults" (may be undefined), construct an object containing
+ * the union of these sets with "overrides" overriding "provided", and
+ * "provided" overriding "defaults".  None of the input objects are modified.
+ */
+function mergeObjects(provided, overrides, defaults)
+{
+	var rv, k;
+
+	rv = {};
+	if (defaults) {
+		for (k in defaults)
+			rv[k] = defaults[k];
+	}
+
+	if (provided) {
+		for (k in provided)
+			rv[k] = provided[k];
+	}
+
+	if (overrides) {
+		for (k in overrides)
+			rv[k] = overrides[k];
+	}
+
+	return (rv);
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/LICENSE b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/LICENSE
new file mode 100644
index 00000000..cbc0bb3b
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2012, Joyent, Inc. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib/extsprintf.js b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib/extsprintf.js
new file mode 100644
index 00000000..ed883d32
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/lib/extsprintf.js
@@ -0,0 +1,183 @@
+/*
+ * extsprintf.js: extended POSIX-style sprintf
+ */
+
+var mod_assert = require('assert');
+var mod_util = require('util');
+
+/*
+ * Public interface
+ */
+exports.sprintf = jsSprintf;
+exports.printf = jsPrintf;
+exports.fprintf = jsFprintf;
+
+/*
+ * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
+ * exception when given a format string we don't understand, rather than
+ * ignoring it, so that we won't break existing programs if/when we go implement
+ * the rest of this.
+ *
+ * This implementation currently supports specifying
+ *	- field alignment ('-' flag),
+ * 	- zero-pad ('0' flag)
+ *	- always show numeric sign ('+' flag),
+ *	- field width
+ *	- conversions for strings, decimal integers, and floats (numbers).
+ *	- argument size specifiers.  These are all accepted but ignored, since
+ *	  Javascript has no notion of the physical size of an argument.
+ *
+ * Everything else is currently unsupported, most notably precision, unsigned
+ * numbers, non-decimal numbers, and characters.
+ */
+function jsSprintf(fmt)
+{
+	var regex = [
+	    '([^%]*)',				/* normal text */
+	    '%',				/* start of format */
+	    '([\'\\-+ #0]*?)',			/* flags (optional) */
+	    '([1-9]\\d*)?',			/* width (optional) */
+	    '(\\.([1-9]\\d*))?',		/* precision (optional) */
+	    '[lhjztL]*?',			/* length mods (ignored) */
+	    '([diouxXfFeEgGaAcCsSp%jr])'	/* conversion */
+	].join('');
+
+	var re = new RegExp(regex);
+	var args = Array.prototype.slice.call(arguments, 1);
+	var flags, width, precision, conversion;
+	var left, pad, sign, arg, match;
+	var ret = '';
+	var argn = 1;
+
+	mod_assert.equal('string', typeof (fmt));
+
+	while ((match = re.exec(fmt)) !== null) {
+		ret += match[1];
+		fmt = fmt.substring(match[0].length);
+
+		flags = match[2] || '';
+		width = match[3] || 0;
+		precision = match[4] || '';
+		conversion = match[6];
+		left = false;
+		sign = false;
+		pad = ' ';
+
+		if (conversion == '%') {
+			ret += '%';
+			continue;
+		}
+
+		if (args.length === 0)
+			throw (new Error('too few args to sprintf'));
+
+		arg = args.shift();
+		argn++;
+
+		if (flags.match(/[\' #]/))
+			throw (new Error(
+			    'unsupported flags: ' + flags));
+
+		if (precision.length > 0)
+			throw (new Error(
+			    'non-zero precision not supported'));
+
+		if (flags.match(/-/))
+			left = true;
+
+		if (flags.match(/0/))
+			pad = '0';
+
+		if (flags.match(/\+/))
+			sign = true;
+
+		switch (conversion) {
+		case 's':
+			if (arg === undefined || arg === null)
+				throw (new Error('argument ' + argn +
+				    ': attempted to print undefined or null ' +
+				    'as a string'));
+			ret += doPad(pad, width, left, arg.toString());
+			break;
+
+		case 'd':
+			arg = Math.floor(arg);
+			/*jsl:fallthru*/
+		case 'f':
+			sign = sign && arg > 0 ? '+' : '';
+			ret += sign + doPad(pad, width, left,
+			    arg.toString());
+			break;
+
+		case 'x':
+			ret += doPad(pad, width, left, arg.toString(16));
+			break;
+
+		case 'j': /* non-standard */
+			if (width === 0)
+				width = 10;
+			ret += mod_util.inspect(arg, false, width);
+			break;
+
+		case 'r': /* non-standard */
+			ret += dumpException(arg);
+			break;
+
+		default:
+			throw (new Error('unsupported conversion: ' +
+			    conversion));
+		}
+	}
+
+	ret += fmt;
+	return (ret);
+}
+
+function jsPrintf() {
+	var args = Array.prototype.slice.call(arguments);
+	args.unshift(process.stdout);
+	jsFprintf.apply(null, args);
+}
+
+function jsFprintf(stream) {
+	var args = Array.prototype.slice.call(arguments, 1);
+	return (stream.write(jsSprintf.apply(this, args)));
+}
+
+function doPad(chr, width, left, str)
+{
+	var ret = str;
+
+	while (ret.length < width) {
+		if (left)
+			ret += chr;
+		else
+			ret = chr + ret;
+	}
+
+	return (ret);
+}
+
+/*
+ * This function dumps long stack traces for exceptions having a cause() method.
+ * See node-verror for an example.
+ */
+function dumpException(ex)
+{
+	var ret;
+
+	if (!(ex instanceof Error))
+		throw (new Error(jsSprintf('invalid type for %%r: %j', ex)));
+
+	/* Note that V8 prepends "ex.stack" with ex.toString(). */
+	ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;
+
+	if (ex.cause && typeof (ex.cause) === 'function') {
+		var cex = ex.cause();
+		if (cex) {
+			ret += '\nCaused by: ' + dumpException(cex);
+		}
+	}
+
+	return (ret);
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/package.json b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/package.json
new file mode 100644
index 00000000..868dd17c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/extsprintf/package.json
@@ -0,0 +1,41 @@
+{
+  "name": "extsprintf",
+  "version": "1.3.0",
+  "description": "extended POSIX-style sprintf",
+  "main": "./lib/extsprintf.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/davepacheco/node-extsprintf.git"
+  },
+  "engines": [
+    "node >=0.6.0"
+  ],
+  "license": "MIT",
+  "gitHead": "accc9f2774189a416f294546ed03b626eec3f80c",
+  "bugs": {
+    "url": "https://github.com/davepacheco/node-extsprintf/issues"
+  },
+  "homepage": "https://github.com/davepacheco/node-extsprintf",
+  "_id": "extsprintf@1.3.0",
+  "scripts": {},
+  "_shasum": "96918440e3041a7a414f8c52e3c574eb3c3e1e05",
+  "_from": "extsprintf@1.3.0",
+  "_npmVersion": "2.5.1",
+  "_nodeVersion": "0.12.0",
+  "_npmUser": {
+    "name": "dap",
+    "email": "dap@cs.brown.edu"
+  },
+  "maintainers": [
+    {
+      "name": "dap",
+      "email": "dap@cs.brown.edu"
+    }
+  ],
+  "dist": {
+    "shasum": "96918440e3041a7a414f8c52e3c574eb3c3e1e05",
+    "tarball": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/links.js b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/links.js
new file mode 100644
index 00000000..8a87f02d
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/links.js
@@ -0,0 +1,66 @@
+/** 
+ * JSON Schema link handler
+ * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
+ * Licensed under the MIT (MIT-LICENSE.txt) license.
+ */
+(function (root, factory) {
+    if (typeof define === 'function' && define.amd) {
+        // AMD. Register as an anonymous module.
+        define([], function () {
+            return factory();
+        });
+    } else if (typeof module === 'object' && module.exports) {
+        // Node. Does not work with strict CommonJS, but
+        // only CommonJS-like environments that support module.exports,
+        // like Node.
+        module.exports = factory();
+    } else {
+        // Browser globals
+        root.jsonSchemaLinks = factory();
+    }
+}(this, function () {// setup primitive classes to be JSON Schema types
+var exports = {};
+exports.cacheLinks = true;
+exports.getLink = function(relation, instance, schema){
+	// gets the URI of the link for the given relation based on the instance and schema
+	// for example:
+	// getLink(
+	// 		"brother", 
+	// 		{"brother_id":33}, 
+	// 		{links:[{rel:"brother", href:"Brother/{brother_id}"}]}) ->
+	//	"Brother/33"
+	var links = schema.__linkTemplates; 
+	if(!links){
+		links = {};
+		var schemaLinks = schema.links;
+		if(schemaLinks && schemaLinks instanceof Array){
+			schemaLinks.forEach(function(link){
+	/*			// TODO: allow for multiple same-name relations
+				if(links[link.rel]){
+					if(!(links[link.rel] instanceof Array)){
+						links[link.rel] = [links[link.rel]];
+					}
+				}*/
+				links[link.rel] = link.href;
+			});
+		}
+		if(exports.cacheLinks){
+			schema.__linkTemplates = links;
+		}
+	}
+	var linkTemplate = links[relation];
+	return linkTemplate && exports.substitute(linkTemplate, instance);
+};
+
+exports.substitute = function(linkTemplate, instance){
+	return linkTemplate.replace(/\{([^\}]*)\}/g, function(t, property){
+			var value = instance[decodeURIComponent(property)];
+			if(value instanceof Array){
+				// the value is an array, it should produce a URI like /Table/(4,5,8) and store.get() should handle that as an array of values
+				return '(' + value.join(',') + ')';
+			}
+			return value;
+		});
+};
+return exports;
+}));
\ No newline at end of file
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/validate.js b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/validate.js
new file mode 100644
index 00000000..e4dc1511
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/lib/validate.js
@@ -0,0 +1,273 @@
+/**
+ * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
+ *	(http://www.json.com/json-schema-proposal/)
+ *
+ * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
+ * Licensed under the MIT (MIT-LICENSE.txt) license.
+To use the validator call the validate function with an instance object and an optional schema object.
+If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
+that schema will be used to validate and the schema parameter is not necessary (if both exist,
+both validations will occur).
+The validate method will return an array of validation errors. If there are no errors, then an
+empty list will be returned. A validation error will have two properties:
+"property" which indicates which property had the error
+"message" which indicates what the error was
+ */
+(function (root, factory) {
+    if (typeof define === 'function' && define.amd) {
+        // AMD. Register as an anonymous module.
+        define([], function () {
+            return factory();
+        });
+    } else if (typeof module === 'object' && module.exports) {
+        // Node. Does not work with strict CommonJS, but
+        // only CommonJS-like environments that support module.exports,
+        // like Node.
+        module.exports = factory();
+    } else {
+        // Browser globals
+        root.jsonSchema = factory();
+    }
+}(this, function () {// setup primitive classes to be JSON Schema types
+var exports = validate
+exports.Integer = {type:"integer"};
+var primitiveConstructors = {
+	String: String,
+	Boolean: Boolean,
+	Number: Number,
+	Object: Object,
+	Array: Array,
+	Date: Date
+}
+exports.validate = validate;
+function validate(/*Any*/instance,/*Object*/schema) {
+		// Summary:
+		//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
+		// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
+		// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
+		// 		both validations will occur).
+		// 		The validate method will return an object with two properties:
+		// 			valid: A boolean indicating if the instance is valid by the schema
+		// 			errors: An array of validation errors. If there are no errors, then an
+		// 					empty list will be returned. A validation error will have two properties:
+		// 						property: which indicates which property had the error
+		// 						message: which indicates what the error was
+		//
+		return validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});
+	};
+exports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {
+		// Summary:
+		// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
+		// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
+		// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
+		// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
+		// 		information.
+		//
+		return validate(value, schema, {changing: property || "property"});
+	};
+var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {
+
+	if (!options) options = {};
+	var _changing = options.changing;
+
+	function getType(schema){
+		return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
+	}
+	var errors = [];
+	// validate a value against a property definition
+	function checkProp(value, schema, path,i){
+
+		var l;
+		path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
+		function addError(message){
+			errors.push({property:path,message:message});
+		}
+
+		if((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){
+			if(typeof schema == 'function'){
+				if(!(value instanceof schema)){
+					addError("is not an instance of the class/constructor " + schema.name);
+				}
+			}else if(schema){
+				addError("Invalid schema/property definition " + schema);
+			}
+			return null;
+		}
+		if(_changing && schema.readonly){
+			addError("is a readonly field, it can not be changed");
+		}
+		if(schema['extends']){ // if it extends another schema, it must pass that schema as well
+			checkProp(value,schema['extends'],path,i);
+		}
+		// validate a value against a type definition
+		function checkType(type,value){
+			if(type){
+				if(typeof type == 'string' && type != 'any' &&
+						(type == 'null' ? value !== null : typeof value != type) &&
+						!(value instanceof Array && type == 'array') &&
+						!(value instanceof Date && type == 'date') &&
+						!(type == 'integer' && value%1===0)){
+					return [{property:path,message:(typeof value) + " value found, but a " + type + " is required"}];
+				}
+				if(type instanceof Array){
+					var unionErrors=[];
+					for(var j = 0; j < type.length; j++){ // a union type
+						if(!(unionErrors=checkType(type[j],value)).length){
+							break;
+						}
+					}
+					if(unionErrors.length){
+						return unionErrors;
+					}
+				}else if(typeof type == 'object'){
+					var priorErrors = errors;
+					errors = [];
+					checkProp(value,type,path);
+					var theseErrors = errors;
+					errors = priorErrors;
+					return theseErrors;
+				}
+			}
+			return [];
+		}
+		if(value === undefined){
+			if(schema.required){
+				addError("is missing and it is required");
+			}
+		}else{
+			errors = errors.concat(checkType(getType(schema),value));
+			if(schema.disallow && !checkType(schema.disallow,value).length){
+				addError(" disallowed value was matched");
+			}
+			if(value !== null){
+				if(value instanceof Array){
+					if(schema.items){
+						var itemsIsArray = schema.items instanceof Array;
+						var propDef = schema.items;
+						for (i = 0, l = value.length; i < l; i += 1) {
+							if (itemsIsArray)
+								propDef = schema.items[i];
+							if (options.coerce)
+								value[i] = options.coerce(value[i], propDef);
+							errors.concat(checkProp(value[i],propDef,path,i));
+						}
+					}
+					if(schema.minItems && value.length < schema.minItems){
+						addError("There must be a minimum of " + schema.minItems + " in the array");
+					}
+					if(schema.maxItems && value.length > schema.maxItems){
+						addError("There must be a maximum of " + schema.maxItems + " in the array");
+					}
+				}else if(schema.properties || schema.additionalProperties){
+					errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
+				}
+				if(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){
+					addError("does not match the regex pattern " + schema.pattern);
+				}
+				if(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){
+					addError("may only be " + schema.maxLength + " characters long");
+				}
+				if(schema.minLength && typeof value == 'string' && value.length < schema.minLength){
+					addError("must be at least " + schema.minLength + " characters long");
+				}
+				if(typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&
+						schema.minimum > value){
+					addError("must have a minimum value of " + schema.minimum);
+				}
+				if(typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&
+						schema.maximum < value){
+					addError("must have a maximum value of " + schema.maximum);
+				}
+				if(schema['enum']){
+					var enumer = schema['enum'];
+					l = enumer.length;
+					var found;
+					for(var j = 0; j < l; j++){
+						if(enumer[j]===value){
+							found=1;
+							break;
+						}
+					}
+					if(!found){
+						addError("does not have a value in the enumeration " + enumer.join(", "));
+					}
+				}
+				if(typeof schema.maxDecimal == 'number' &&
+					(value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))){
+					addError("may only have " + schema.maxDecimal + " digits of decimal places");
+				}
+			}
+		}
+		return null;
+	}
+	// validate an object against a schema
+	function checkObj(instance,objTypeDef,path,additionalProp){
+
+		if(typeof objTypeDef =='object'){
+			if(typeof instance != 'object' || instance instanceof Array){
+				errors.push({property:path,message:"an object is required"});
+			}
+			
+			for(var i in objTypeDef){ 
+				if(objTypeDef.hasOwnProperty(i)){
+					var value = instance[i];
+					// skip _not_ specified properties
+					if (value === undefined && options.existingOnly) continue;
+					var propDef = objTypeDef[i];
+					// set default
+					if(value === undefined && propDef["default"]){
+						value = instance[i] = propDef["default"];
+					}
+					if(options.coerce && i in instance){
+						value = instance[i] = options.coerce(value, propDef);
+					}
+					checkProp(value,propDef,path,i);
+				}
+			}
+		}
+		for(i in instance){
+			if(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){
+				if (options.filter) {
+					delete instance[i];
+					continue;
+				} else {
+					errors.push({property:path,message:(typeof value) + "The property " + i +
+						" is not defined in the schema and the schema does not allow additional properties"});
+				}
+			}
+			var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
+			if(requires && !(requires in instance)){
+				errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
+			}
+			value = instance[i];
+			if(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){
+				if(options.coerce){
+					value = instance[i] = options.coerce(value, additionalProp);
+				}
+				checkProp(value,additionalProp,path,i);
+			}
+			if(!_changing && value && value.$schema){
+				errors = errors.concat(checkProp(value,value.$schema,path,i));
+			}
+		}
+		return errors;
+	}
+	if(schema){
+		checkProp(instance,schema,'',_changing || '');
+	}
+	if(!_changing && instance && instance.$schema){
+		checkProp(instance,instance.$schema,'','');
+	}
+	return {valid:!errors.length,errors:errors};
+};
+exports.mustBeValid = function(result){
+	//	summary:
+	//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
+	// result: the result returned from checkPropertyChange or validate
+	if(!result.valid){
+		throw new TypeError(result.errors.map(function(error){return "for property " + error.property + ': ' + error.message;}).join(", \n"));
+	}
+}
+
+return exports;
+}));
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/package.json b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/package.json
new file mode 100644
index 00000000..2e1c5581
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/json-schema/package.json
@@ -0,0 +1,65 @@
+{
+  "name": "json-schema",
+  "version": "0.2.3",
+  "author": {
+    "name": "Kris Zyp"
+  },
+  "description": "JSON Schema validation and specifications",
+  "maintainers": [
+    {
+      "name": "kriszyp",
+      "email": "kriszyp@gmail.com"
+    }
+  ],
+  "keywords": [
+    "json",
+    "schema"
+  ],
+  "licenses": [
+    {
+      "type": "AFLv2.1",
+      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L43"
+    },
+    {
+      "type": "BSD",
+      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L13"
+    }
+  ],
+  "repository": {
+    "type": "git",
+    "url": "git+ssh://git@github.com/kriszyp/json-schema.git"
+  },
+  "directories": {
+    "lib": "./lib"
+  },
+  "main": "./lib/validate.js",
+  "devDependencies": {
+    "vows": "*"
+  },
+  "scripts": {
+    "test": "echo TESTS DISABLED vows --spec test/*.js"
+  },
+  "gitHead": "07ae2c618b5f581dbc108e065f4f95dcf0a1d85f",
+  "bugs": {
+    "url": "https://github.com/kriszyp/json-schema/issues"
+  },
+  "homepage": "https://github.com/kriszyp/json-schema#readme",
+  "_id": "json-schema@0.2.3",
+  "_shasum": "b480c892e59a2f05954ce727bd3f2a4e882f9e13",
+  "_from": "json-schema@0.2.3",
+  "_npmVersion": "3.8.9",
+  "_nodeVersion": "6.1.0",
+  "_npmUser": {
+    "name": "kriszyp",
+    "email": "kriszyp@gmail.com"
+  },
+  "dist": {
+    "shasum": "b480c892e59a2f05954ce727bd3f2a4e882f9e13",
+    "tarball": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"
+  },
+  "_npmOperationalInternal": {
+    "host": "packages-12-west.internal.npmjs.com",
+    "tmp": "tmp/json-schema-0.2.3.tgz_1473699189380_0.7420965158380568"
+  },
+  "_resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/LICENSE b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/LICENSE
new file mode 100644
index 00000000..82a5cb86
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2016, Joyent, Inc. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib/verror.js b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib/verror.js
new file mode 100644
index 00000000..8663ddea
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/lib/verror.js
@@ -0,0 +1,451 @@
+/*
+ * verror.js: richer JavaScript errors
+ */
+
+var mod_assertplus = require('assert-plus');
+var mod_util = require('util');
+
+var mod_extsprintf = require('extsprintf');
+var mod_isError = require('core-util-is').isError;
+var sprintf = mod_extsprintf.sprintf;
+
+/*
+ * Public interface
+ */
+
+/* So you can 'var VError = require('verror')' */
+module.exports = VError;
+/* For compatibility */
+VError.VError = VError;
+/* Other exported classes */
+VError.SError = SError;
+VError.WError = WError;
+VError.MultiError = MultiError;
+
+/*
+ * Common function used to parse constructor arguments for VError, WError, and
+ * SError.  Named arguments to this function:
+ *
+ *     strict		force strict interpretation of sprintf arguments, even
+ *     			if the options in "argv" don't say so
+ *
+ *     argv		error's constructor arguments, which are to be
+ *     			interpreted as described in README.md.  For quick
+ *     			reference, "argv" has one of the following forms:
+ *
+ *          [ sprintf_args... ]           (argv[0] is a string)
+ *          [ cause, sprintf_args... ]    (argv[0] is an Error)
+ *          [ options, sprintf_args... ]  (argv[0] is an object)
+ *
+ * This function normalizes these forms, producing an object with the following
+ * properties:
+ *
+ *    options           equivalent to "options" in third form.  This will never
+ *    			be a direct reference to what the caller passed in
+ *    			(i.e., it may be a shallow copy), so it can be freely
+ *    			modified.
+ *
+ *    shortmessage      result of sprintf(sprintf_args), taking options.strict
+ *    			into account as described in README.md.
+ */
+function parseConstructorArguments(args)
+{
+	var argv, options, sprintf_args, shortmessage, k;
+
+	mod_assertplus.object(args, 'args');
+	mod_assertplus.bool(args.strict, 'args.strict');
+	mod_assertplus.array(args.argv, 'args.argv');
+	argv = args.argv;
+
+	/*
+	 * First, figure out which form of invocation we've been given.
+	 */
+	if (argv.length === 0) {
+		options = {};
+		sprintf_args = [];
+	} else if (mod_isError(argv[0])) {
+		options = { 'cause': argv[0] };
+		sprintf_args = argv.slice(1);
+	} else if (typeof (argv[0]) === 'object') {
+		options = {};
+		for (k in argv[0]) {
+			options[k] = argv[0][k];
+		}
+		sprintf_args = argv.slice(1);
+	} else {
+		mod_assertplus.string(argv[0],
+		    'first argument to VError, SError, or WError ' +
+		    'constructor must be a string, object, or Error');
+		options = {};
+		sprintf_args = argv;
+	}
+
+	/*
+	 * Now construct the error's message.
+	 *
+	 * extsprintf (which we invoke here with our caller's arguments in order
+	 * to construct this Error's message) is strict in its interpretation of
+	 * values to be processed by the "%s" specifier.  The value passed to
+	 * extsprintf must actually be a string or something convertible to a
+	 * String using .toString().  Passing other values (notably "null" and
+	 * "undefined") is considered a programmer error.  The assumption is
+	 * that if you actually want to print the string "null" or "undefined",
+	 * then that's easy to do that when you're calling extsprintf; on the
+	 * other hand, if you did NOT want that (i.e., there's actually a bug
+	 * where the program assumes some variable is non-null and tries to
+	 * print it, which might happen when constructing a packet or file in
+	 * some specific format), then it's better to stop immediately than
+	 * produce bogus output.
+	 *
+	 * However, sometimes the bug is only in the code calling VError, and a
+	 * programmer might prefer to have the error message contain "null" or
+	 * "undefined" rather than have the bug in the error path crash the
+	 * program (making the first bug harder to identify).  For that reason,
+	 * by default VError converts "null" or "undefined" arguments to their
+	 * string representations and passes those to extsprintf.  Programmers
+	 * desiring the strict behavior can use the SError class or pass the
+	 * "strict" option to the VError constructor.
+	 */
+	mod_assertplus.object(options);
+	if (!options.strict && !args.strict) {
+		sprintf_args = sprintf_args.map(function (a) {
+			return (a === null ? 'null' :
+			    a === undefined ? 'undefined' : a);
+		});
+	}
+
+	if (sprintf_args.length === 0) {
+		shortmessage = '';
+	} else {
+		shortmessage = sprintf.apply(null, sprintf_args);
+	}
+
+	return ({
+	    'options': options,
+	    'shortmessage': shortmessage
+	});
+}
+
+/*
+ * See README.md for reference documentation.
+ */
+function VError()
+{
+	var args, obj, parsed, cause, ctor, message, k;
+
+	args = Array.prototype.slice.call(arguments, 0);
+
+	/*
+	 * This is a regrettable pattern, but JavaScript's built-in Error class
+	 * is defined to work this way, so we allow the constructor to be called
+	 * without "new".
+	 */
+	if (!(this instanceof VError)) {
+		obj = Object.create(VError.prototype);
+		VError.apply(obj, arguments);
+		return (obj);
+	}
+
+	/*
+	 * For convenience and backwards compatibility, we support several
+	 * different calling forms.  Normalize them here.
+	 */
+	parsed = parseConstructorArguments({
+	    'argv': args,
+	    'strict': false
+	});
+
+	/*
+	 * If we've been given a name, apply it now.
+	 */
+	if (parsed.options.name) {
+		mod_assertplus.string(parsed.options.name,
+		    'error\'s "name" must be a string');
+		this.name = parsed.options.name;
+	}
+
+	/*
+	 * For debugging, we keep track of the original short message (attached
+	 * this Error particularly) separately from the complete message (which
+	 * includes the messages of our cause chain).
+	 */
+	this.jse_shortmsg = parsed.shortmessage;
+	message = parsed.shortmessage;
+
+	/*
+	 * If we've been given a cause, record a reference to it and update our
+	 * message appropriately.
+	 */
+	cause = parsed.options.cause;
+	if (cause) {
+		mod_assertplus.ok(mod_isError(cause), 'cause is not an Error');
+		this.jse_cause = cause;
+
+		if (!parsed.options.skipCauseMessage) {
+			message += ': ' + cause.message;
+		}
+	}
+
+	/*
+	 * If we've been given an object with properties, shallow-copy that
+	 * here.  We don't want to use a deep copy in case there are non-plain
+	 * objects here, but we don't want to use the original object in case
+	 * the caller modifies it later.
+	 */
+	this.jse_info = {};
+	if (parsed.options.info) {
+		for (k in parsed.options.info) {
+			this.jse_info[k] = parsed.options.info[k];
+		}
+	}
+
+	this.message = message;
+	Error.call(this, message);
+
+	if (Error.captureStackTrace) {
+		ctor = parsed.options.constructorOpt || this.constructor;
+		Error.captureStackTrace(this, ctor);
+	}
+
+	return (this);
+}
+
+mod_util.inherits(VError, Error);
+VError.prototype.name = 'VError';
+
+VError.prototype.toString = function ve_toString()
+{
+	var str = (this.hasOwnProperty('name') && this.name ||
+		this.constructor.name || this.constructor.prototype.name);
+	if (this.message)
+		str += ': ' + this.message;
+
+	return (str);
+};
+
+/*
+ * This method is provided for compatibility.  New callers should use
+ * VError.cause() instead.  That method also uses the saner `null` return value
+ * when there is no cause.
+ */
+VError.prototype.cause = function ve_cause()
+{
+	var cause = VError.cause(this);
+	return (cause === null ? undefined : cause);
+};
+
+/*
+ * Static methods
+ *
+ * These class-level methods are provided so that callers can use them on
+ * instances of Errors that are not VErrors.  New interfaces should be provided
+ * only using static methods to eliminate the class of programming mistake where
+ * people fail to check whether the Error object has the corresponding methods.
+ */
+
+VError.cause = function (err)
+{
+	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	return (mod_isError(err.jse_cause) ? err.jse_cause : null);
+};
+
+VError.info = function (err)
+{
+	var rv, cause, k;
+
+	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	cause = VError.cause(err);
+	if (cause !== null) {
+		rv = VError.info(cause);
+	} else {
+		rv = {};
+	}
+
+	if (typeof (err.jse_info) == 'object' && err.jse_info !== null) {
+		for (k in err.jse_info) {
+			rv[k] = err.jse_info[k];
+		}
+	}
+
+	return (rv);
+};
+
+VError.findCauseByName = function (err, name)
+{
+	var cause;
+
+	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	mod_assertplus.string(name, 'name');
+	mod_assertplus.ok(name.length > 0, 'name cannot be empty');
+
+	for (cause = err; cause !== null; cause = VError.cause(cause)) {
+		mod_assertplus.ok(mod_isError(cause));
+		if (cause.name == name) {
+			return (cause);
+		}
+	}
+
+	return (null);
+};
+
+VError.hasCauseWithName = function (err, name)
+{
+	return (VError.findCauseByName(err, name) !== null);
+};
+
+VError.fullStack = function (err)
+{
+	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+
+	var cause = VError.cause(err);
+
+	if (cause) {
+		return (err.stack + '\ncaused by: ' + VError.fullStack(cause));
+	}
+
+	return (err.stack);
+};
+
+VError.errorFromList = function (errors)
+{
+	mod_assertplus.arrayOfObject(errors, 'errors');
+
+	if (errors.length === 0) {
+		return (null);
+	}
+
+	errors.forEach(function (e) {
+		mod_assertplus.ok(mod_isError(e));
+	});
+
+	if (errors.length == 1) {
+		return (errors[0]);
+	}
+
+	return (new MultiError(errors));
+};
+
+VError.errorForEach = function (err, func)
+{
+	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	mod_assertplus.func(func, 'func');
+
+	if (err instanceof MultiError) {
+		err.errors().forEach(function iterError(e) { func(e); });
+	} else {
+		func(err);
+	}
+};
+
+
+/*
+ * SError is like VError, but stricter about types.  You cannot pass "null" or
+ * "undefined" as string arguments to the formatter.
+ */
+function SError()
+{
+	var args, obj, parsed, options;
+
+	args = Array.prototype.slice.call(arguments, 0);
+	if (!(this instanceof SError)) {
+		obj = Object.create(SError.prototype);
+		SError.apply(obj, arguments);
+		return (obj);
+	}
+
+	parsed = parseConstructorArguments({
+	    'argv': args,
+	    'strict': true
+	});
+
+	options = parsed.options;
+	VError.call(this, options, '%s', parsed.shortmessage);
+
+	return (this);
+}
+
+/*
+ * We don't bother setting SError.prototype.name because once constructed,
+ * SErrors are just like VErrors.
+ */
+mod_util.inherits(SError, VError);
+
+
+/*
+ * Represents a collection of errors for the purpose of consumers that generally
+ * only deal with one error.  Callers can extract the individual errors
+ * contained in this object, but may also just treat it as a normal single
+ * error, in which case a summary message will be printed.
+ */
+function MultiError(errors)
+{
+	mod_assertplus.array(errors, 'list of errors');
+	mod_assertplus.ok(errors.length > 0, 'must be at least one error');
+	this.ase_errors = errors;
+
+	VError.call(this, {
+	    'cause': errors[0]
+	}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
+}
+
+mod_util.inherits(MultiError, VError);
+MultiError.prototype.name = 'MultiError';
+
+MultiError.prototype.errors = function me_errors()
+{
+	return (this.ase_errors.slice(0));
+};
+
+
+/*
+ * See README.md for reference details.
+ */
+function WError()
+{
+	var args, obj, parsed, options;
+
+	args = Array.prototype.slice.call(arguments, 0);
+	if (!(this instanceof WError)) {
+		obj = Object.create(WError.prototype);
+		WError.apply(obj, args);
+		return (obj);
+	}
+
+	parsed = parseConstructorArguments({
+	    'argv': args,
+	    'strict': false
+	});
+
+	options = parsed.options;
+	options['skipCauseMessage'] = true;
+	VError.call(this, options, '%s', parsed.shortmessage);
+
+	return (this);
+}
+
+mod_util.inherits(WError, VError);
+WError.prototype.name = 'WError';
+
+WError.prototype.toString = function we_toString()
+{
+	var str = (this.hasOwnProperty('name') && this.name ||
+		this.constructor.name || this.constructor.prototype.name);
+	if (this.message)
+		str += ': ' + this.message;
+	if (this.jse_cause && this.jse_cause.message)
+		str += '; caused by ' + this.jse_cause.toString();
+
+	return (str);
+};
+
+/*
+ * For purely historical reasons, WError's cause() function allows you to set
+ * the cause.
+ */
+WError.prototype.cause = function we_cause(c)
+{
+	if (mod_isError(c))
+		this.jse_cause = c;
+
+	return (this.jse_cause);
+};
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/LICENSE b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/LICENSE
new file mode 100644
index 00000000..d8d7f943
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/LICENSE
@@ -0,0 +1,19 @@
+Copyright Node.js contributors. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to
+deal in the Software without restriction, including without limitation the
+rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+sell copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+IN THE SOFTWARE.
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib/util.js b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib/util.js
new file mode 100644
index 00000000..ff4c851c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/lib/util.js
@@ -0,0 +1,107 @@
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+// NOTE: These type checking functions intentionally don't use `instanceof`
+// because it is fragile and can be easily faked with `Object.create()`.
+
+function isArray(arg) {
+  if (Array.isArray) {
+    return Array.isArray(arg);
+  }
+  return objectToString(arg) === '[object Array]';
+}
+exports.isArray = isArray;
+
+function isBoolean(arg) {
+  return typeof arg === 'boolean';
+}
+exports.isBoolean = isBoolean;
+
+function isNull(arg) {
+  return arg === null;
+}
+exports.isNull = isNull;
+
+function isNullOrUndefined(arg) {
+  return arg == null;
+}
+exports.isNullOrUndefined = isNullOrUndefined;
+
+function isNumber(arg) {
+  return typeof arg === 'number';
+}
+exports.isNumber = isNumber;
+
+function isString(arg) {
+  return typeof arg === 'string';
+}
+exports.isString = isString;
+
+function isSymbol(arg) {
+  return typeof arg === 'symbol';
+}
+exports.isSymbol = isSymbol;
+
+function isUndefined(arg) {
+  return arg === void 0;
+}
+exports.isUndefined = isUndefined;
+
+function isRegExp(re) {
+  return objectToString(re) === '[object RegExp]';
+}
+exports.isRegExp = isRegExp;
+
+function isObject(arg) {
+  return typeof arg === 'object' && arg !== null;
+}
+exports.isObject = isObject;
+
+function isDate(d) {
+  return objectToString(d) === '[object Date]';
+}
+exports.isDate = isDate;
+
+function isError(e) {
+  return (objectToString(e) === '[object Error]' || e instanceof Error);
+}
+exports.isError = isError;
+
+function isFunction(arg) {
+  return typeof arg === 'function';
+}
+exports.isFunction = isFunction;
+
+function isPrimitive(arg) {
+  return arg === null ||
+         typeof arg === 'boolean' ||
+         typeof arg === 'number' ||
+         typeof arg === 'string' ||
+         typeof arg === 'symbol' ||  // ES6 symbol
+         typeof arg === 'undefined';
+}
+exports.isPrimitive = isPrimitive;
+
+exports.isBuffer = Buffer.isBuffer;
+
+function objectToString(o) {
+  return Object.prototype.toString.call(o);
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/package.json b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/package.json
new file mode 100644
index 00000000..b9c3354c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/node_modules/core-util-is/package.json
@@ -0,0 +1,59 @@
+{
+  "name": "core-util-is",
+  "version": "1.0.2",
+  "description": "The `util.is*` functions introduced in Node v0.12.",
+  "main": "lib/util.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/isaacs/core-util-is.git"
+  },
+  "keywords": [
+    "util",
+    "isBuffer",
+    "isArray",
+    "isNumber",
+    "isString",
+    "isRegExp",
+    "isThis",
+    "isThat",
+    "polyfill"
+  ],
+  "author": {
+    "name": "Isaac Z. Schlueter",
+    "email": "i@izs.me",
+    "url": "http://blog.izs.me/"
+  },
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/isaacs/core-util-is/issues"
+  },
+  "scripts": {
+    "test": "tap test.js"
+  },
+  "devDependencies": {
+    "tap": "^2.3.0"
+  },
+  "gitHead": "a177da234df5638b363ddc15fa324619a38577c8",
+  "homepage": "https://github.com/isaacs/core-util-is#readme",
+  "_id": "core-util-is@1.0.2",
+  "_shasum": "b5fd54220aa2bc5ab57aab7140c940754503c1a7",
+  "_from": "core-util-is@1.0.2",
+  "_npmVersion": "3.3.2",
+  "_nodeVersion": "4.0.0",
+  "_npmUser": {
+    "name": "isaacs",
+    "email": "i@izs.me"
+  },
+  "dist": {
+    "shasum": "b5fd54220aa2bc5ab57aab7140c940754503c1a7",
+    "tarball": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz"
+  },
+  "maintainers": [
+    {
+      "name": "isaacs",
+      "email": "i@izs.me"
+    }
+  ],
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz"
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/package.json b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/package.json
new file mode 100644
index 00000000..2e3a3b64
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/node_modules/verror/package.json
@@ -0,0 +1,50 @@
+{
+  "name": "verror",
+  "version": "1.10.0",
+  "description": "richer JavaScript errors",
+  "main": "./lib/verror.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/davepacheco/node-verror.git"
+  },
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "core-util-is": "1.0.2",
+    "extsprintf": "^1.2.0"
+  },
+  "engines": [
+    "node >=0.6.0"
+  ],
+  "scripts": {
+    "test": "make test"
+  },
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/davepacheco/node-verror/issues"
+  },
+  "homepage": "https://github.com/davepacheco/node-verror",
+  "_id": "verror@1.10.0",
+  "_shasum": "3a105ca17053af55d6e270c1f8288682e18da400",
+  "_from": "verror@1.10.0",
+  "_npmVersion": "1.4.9",
+  "_npmUser": {
+    "name": "dap",
+    "email": "dap@cs.brown.edu"
+  },
+  "maintainers": [
+    {
+      "name": "dap",
+      "email": "dap@cs.brown.edu"
+    }
+  ],
+  "dist": {
+    "shasum": "3a105ca17053af55d6e270c1f8288682e18da400",
+    "tarball": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"
+  },
+  "_npmOperationalInternal": {
+    "host": "packages-12-west.internal.npmjs.com",
+    "tmp": "tmp/verror-1.10.0.tgz_1493743247437_0.7535550429020077"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"
+}
diff --git a/src/vm/node_modules/macaddr/node_modules/jsprim/package.json b/src/vm/node_modules/macaddr/node_modules/jsprim/package.json
new file mode 100644
index 00000000..91b8f36c
--- /dev/null
+++ b/src/vm/node_modules/macaddr/node_modules/jsprim/package.json
@@ -0,0 +1,51 @@
+{
+  "name": "jsprim",
+  "version": "1.4.1",
+  "description": "utilities for primitive JavaScript types",
+  "main": "./lib/jsprim.js",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/joyent/node-jsprim.git"
+  },
+  "dependencies": {
+    "assert-plus": "1.0.0",
+    "extsprintf": "1.3.0",
+    "json-schema": "0.2.3",
+    "verror": "1.10.0"
+  },
+  "engines": [
+    "node >=0.6.0"
+  ],
+  "license": "MIT",
+  "gitHead": "f7d80a9e8e3f79c0b76448ad9ceab252fb309b32",
+  "bugs": {
+    "url": "https://github.com/joyent/node-jsprim/issues"
+  },
+  "homepage": "https://github.com/joyent/node-jsprim#readme",
+  "_id": "jsprim@1.4.1",
+  "scripts": {},
+  "_shasum": "313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2",
+  "_from": "jsprim@>=1.4.0 <2.0.0",
+  "_npmVersion": "2.15.1",
+  "_nodeVersion": "0.10.45",
+  "_npmUser": {
+    "name": "dap",
+    "email": "dap@cs.brown.edu"
+  },
+  "maintainers": [
+    {
+      "name": "dap",
+      "email": "dap@cs.brown.edu"
+    }
+  ],
+  "dist": {
+    "shasum": "313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2",
+    "tarball": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"
+  },
+  "_npmOperationalInternal": {
+    "host": "s3://npm-registry-packages",
+    "tmp": "tmp/jsprim-1.4.1.tgz_1501691396911_0.08959000837057829"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"
+}
diff --git a/src/vm/node_modules/macaddr/package.json b/src/vm/node_modules/macaddr/package.json
new file mode 100644
index 00000000..e6733d20
--- /dev/null
+++ b/src/vm/node_modules/macaddr/package.json
@@ -0,0 +1,63 @@
+{
+  "name": "macaddr",
+  "version": "0.0.1",
+  "description": "MAC address parsing and manipulation",
+  "keywords": [
+    "mac",
+    "macaddr"
+  ],
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/joyent/node-macaddr.git"
+  },
+  "main": "lib/macaddr.js",
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "jsprim": "^1.4.0"
+  },
+  "devDependencies": {
+    "istanbul": "^0.3.6",
+    "faucet": "0.0.1",
+    "tape": "^3.5.0",
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.1.0"
+  },
+  "scripts": {
+    "test": "istanbul cover --print none test/runall.js"
+  },
+  "author": {
+    "name": "Joyent",
+    "url": "joyent.com"
+  },
+  "license": "MPL-2.0",
+  "gitHead": "aa5d43b69451aedb4412b860e113c8091d0ed854",
+  "bugs": {
+    "url": "https://github.com/joyent/node-macaddr/issues"
+  },
+  "homepage": "https://github.com/joyent/node-macaddr#readme",
+  "_id": "macaddr@0.0.1",
+  "_shasum": "4fca1fa64626c68ae831a34b06722cb49e78c1d0",
+  "_from": "macaddr@latest",
+  "_npmVersion": "2.15.1",
+  "_nodeVersion": "0.10.46",
+  "_npmUser": {
+    "name": "melloc",
+    "email": "cody.mello@joyent.com"
+  },
+  "dist": {
+    "shasum": "4fca1fa64626c68ae831a34b06722cb49e78c1d0",
+    "tarball": "https://registry.npmjs.org/macaddr/-/macaddr-0.0.1.tgz"
+  },
+  "maintainers": [
+    {
+      "name": "melloc",
+      "email": "cody.mello@joyent.com"
+    }
+  ],
+  "_npmOperationalInternal": {
+    "host": "s3://npm-registry-packages",
+    "tmp": "tmp/macaddr-0.0.1.tgz_1502746444725_0.33112972835078835"
+  },
+  "directories": {},
+  "_resolved": "https://registry.npmjs.org/macaddr/-/macaddr-0.0.1.tgz"
+}
diff --git a/src/vm/tests/test-routes-joyent-minimal.js b/src/vm/tests/test-routes-joyent-minimal.js
index 44b4e8d8..5fe4ed8e 100644
--- a/src/vm/tests/test-routes-joyent-minimal.js
+++ b/src/vm/tests/test-routes-joyent-minimal.js
@@ -24,7 +24,7 @@ var DO_NOT_CLEANUP_VMS = false;
 var INVALID_DEST = 'Invalid route destination: "%s" '
     + '(must be IP address or CIDR)';
 var INVALID_GW = 'Invalid route gateway: "%s" '
-    + '(must be IP address or nic)';
+    + '(must be IP address, MAC address, or nic)';
 var INVALID_NIC = 'Route gateway: "%s" '
     + 'refers to non-existent or DHCP nic';
 var INVALID_VAL = 'Invalid value(s) for: %s';
@@ -378,6 +378,11 @@ var failures = [
         { routes: { '10.2.0.0/24': 'asdf' } }
     ],
 
+    [ 'gateway: invalid mac',
+        format(INVALID_GW, 'macs[asdf]'),
+        { routes: { '10.2.0.0/24': 'macs[asdf]' } }
+    ],
+
     [ 'gateway: CIDR',
         format(INVALID_GW, '10.2.0.0/24'),
         { routes: { '10.2.0.0/24': '10.2.0.0/24' } }
@@ -409,6 +414,27 @@ var failures = [
         }
     ],
 
+    [ 'gateway nic by mac: no nics',
+        format(INVALID_NIC, 'macs[aa:bb:cc:dd:ee:ff]'),
+        { routes: { '10.2.0.0/24': 'macs[aa:bb:cc:dd:ee:ff]' } }
+    ],
+
+    [ 'gateway nic by mac: nic with mac not present',
+        format(INVALID_NIC, 'macs[aa:bb:cc:dd:ee:ff]'),
+        {
+            routes: { '10.2.0.0/24': 'macs[aa:bb:cc:dd:ee:ff]' },
+            nics: [ { nic_tag: 'admin', ip: 'dhcp' } ]
+        }
+    ],
+
+    [ 'gateway nic by mac: dhcp nic',
+        format(INVALID_NIC, 'macs[aa:bb:cc:dd:ee:ff]'),
+        {
+            routes: { '10.2.0.0/24': 'macs[aa:bb:cc:dd:ee:ff]' },
+            nics: [ { nic_tag: 'admin', ip: 'dhcp' } ]
+        }
+    ],
+
     [ 'maintain_resolvers: invalid',
         format(INVALID_VAL, 'maintain_resolvers'),
         { maintain_resolvers: 'asdf' }
@@ -461,29 +487,34 @@ test('update routes and resolvers', function(t) {
     // Routes controlled by vmadm:
     var vmadmRoutes = {
         '172.21.1.1': '172.20.1.2',     // nics[1].ip
-        '172.22.2.0/24': '172.19.1.1'
+        '172.22.2.0/24': '172.19.1.1',
+        '172.23.3.0/24': '172.19.1.2'   // nics[1].ip determined by mac addr
     };
     // Kernel's routing table for the zone:
     var routingTable = {
-        '172.19.1.0': '172.19.1.2',     // nics[1] local subnet route
-        '172.20.1.0': '172.20.1.2',     // nics[2] local subnet route
+        '172.19.1.0': '172.19.1.2',     // nics[0] local subnet route
+        '172.20.1.0': '172.20.1.2',     // nics[1] local subnet route
         '172.21.1.1': '172.20.1.2',
-        '172.22.2.0': '172.19.1.1'
+        '172.22.2.0': '172.19.1.1',
+        '172.23.3.0': '172.19.1.2'
     };
     var oldResolvers;
     var resolvers = [ '172.21.1.1' ];
     var routes = {
         '172.21.1.1': 'nics[1]',
-        '172.22.2.0/24': '172.19.1.1'
+        '172.22.2.0/24': '172.19.1.1',
+        '172.23.3.0/24': 'macs[aa:bb:cc:12:34:56]'
     };
     var newPayload = {
         nics: [
             { nic_tag: 'admin',
               ip: '172.19.1.2',
-              netmask: '255.255.255.0' },
+              netmask: '255.255.255.0',
+              mac: 'aa:bb:cc:12:34:56' },
             { nic_tag: 'admin',
               ip: '172.20.1.2',
-              netmask: '255.255.255.0' },
+              netmask: '255.255.255.0',
+              mac: 'aa:bb:cc:12:34:57' },
         ],
         maintain_resolvers: true,
         nowait: false,
@@ -846,6 +877,7 @@ test('update routes and resolvers', function(t) {
             }
 
             delete routingTable['172.22.3.0'];
+            delete routingTable['172.23.3.0'];
             updateVM(t, state, updatePayload, 'update 8', cb);
         },
 
-- 
2.21.0

