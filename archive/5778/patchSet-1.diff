commit a5e70ee2fddebedfc7ee9523d6b1c8a3a6489b2b
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-03-12T15:05:55-07:00 (7 months ago)
    
    MANTA-4172 zk client ping timeouts not working

diff --git a/lib/ConnectionManager.js b/lib/ConnectionManager.js
index 1c63046..87e3621 100644
--- a/lib/ConnectionManager.js
+++ b/lib/ConnectionManager.js
@@ -33,6 +33,16 @@ var STATES = { // Connection States.
     AUTHENTICATION_FAILED : -4
 };
 
+var STATES_REV = {}; // Reverse lookup for connection states
+
+Object.keys(STATES).forEach(function (k) {
+    STATES_REV[STATES[k]] = k;
+});
+
+// Keep ping history for this long (ms)
+var PING_HISTORY = 5 * 60 * 1000;
+// Keep this many state history entries
+var MAX_STATE_HISTORY = 16;
 
 /**
  * Construct a new ConnectionManager instance.
@@ -92,11 +102,31 @@ function ConnectionManager(connectionString, options, stateListener) {
     this.packetQueue.on('readable', this.onPacketQueueReadable.bind(this));
     this.pendingQueue = [];
 
+    this.pings = [];
+    this.stateHistory = [];
+
     this.on('state', stateListener);
+
+    this.register();
 }
 
 utils.inherits(ConnectionManager, events.EventEmitter);
 
+ConnectionManager.instances = [];
+
+ConnectionManager.prototype.register = function () {
+    ConnectionManager.instances.push(this);
+};
+
+ConnectionManager.prototype.unregister = function () {
+    var insts = ConnectionManager.instances;
+    var idx = insts.indexOf(this);
+
+    if (idx !== -1) {
+        insts.splice(idx, 1);
+    }
+};
+
 /**
  * Update the session timeout and related timeout variables.
  *
@@ -163,10 +193,18 @@ ConnectionManager.prototype.setState = function (state) {
         throw new Error('state must be a valid number.');
     }
 
+    this.stateHistory.push({ state: STATES_REV[state], time: new Date() });
+    while (this.stateHistory.length > MAX_STATE_HISTORY)
+        this.stateHistory.shift();
+
     if (this.state !== state) {
         this.state = state;
         this.emit('state', this.state);
     }
+
+    if (state === STATES.CLOSED) {
+        this.unregister();
+    }
 };
 
 ConnectionManager.prototype.registerDataWatcher = function (path, watcher) {
@@ -253,6 +291,18 @@ ConnectionManager.prototype.onSocketClosed = function (hasError) {
         errorCode,
         pendingPacket;
 
+    var now = new Date();
+
+    this.pings.forEach(function (ping) {
+        if (ping.timer) {
+            clearTimeout(ping.timer);
+            ping.timer = null;
+        }
+        if (!ping.received) {
+            ping.killed = now;
+        }
+    });
+
     switch (this.state) {
     case STATES.CLOSING:
         errorCode = Exception.CONNECTION_LOSS;
@@ -285,6 +335,7 @@ ConnectionManager.prototype.onSocketError = function (error) {
     if (this.connectTimeoutHandler) {
         clearTimeout(this.connectTimeoutHandler);
     }
+    this.lastSocketError = error;
 
     // After socket error, the socket closed event will be triggered,
     // we will retry connect in that listener function.
@@ -363,6 +414,17 @@ ConnectionManager.prototype.onSocketTimeout = function () {
             jute.XID_PING,
             jute.OP_CODES.PING
         );
+        var self = this;
+        var sent = new Date();
+        var socket = this.socket;
+        var timer = setTimeout(function () {
+            socket.destroy();
+        }, this.pingTimeout);
+
+        this.pings.push({
+            sent: sent,
+            timer: timer
+        });
 
         request = new jute.Request(header, null);
         this.queue(request);
@@ -458,6 +520,29 @@ ConnectionManager.prototype.onSocketData = function (buffer) {
         // TODO BETTTER LOGGING
         switch (responseHeader.xid) {
         case jute.XID_PING:
+            var outstanding = self.pings.filter(function (p) {
+                return (!p.received && !p.killed);
+            });
+            var next = outstanding.shift();
+
+            if (!next) {
+                break;
+            }
+            var now = new Date();
+
+            next.received = now;
+            if (next.timer) {
+                clearTimeout(next.timer);
+                next.timer = null;
+            }
+            while (self.pings[0]) {
+                var delta = now.getTime() - self.pings[0].sent.getTime();
+
+                if (delta < PING_HISTORY) {
+                    break;
+                }
+                self.pings.shift();
+            }
             break;
         case jute.XID_AUTHENTICATION:
             if (responseHeader.err === Exception.AUTH_FAILED) {
diff --git a/package.json b/package.json
index e7dc5c7..7c814b2 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "joyent-zookeeper-client",
-  "version": "0.2.2",
+  "version": "0.2.3",
   "description": "A pure Javascript ZooKeeper client for Node.js.",
   "author": "Alex Guan <alex.guan@gmail.com>",
   "main": "index.js",
