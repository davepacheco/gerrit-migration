commit 89648e1545841f594cd4dea9dede747e54c32c26 (refs/changes/03/2203/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-07-10T16:19:20-07:00 (2 years, 3 months ago)
    
    CNAPI-708 CNAPI waitlist test periodically failing on nightly

diff --git a/lib/models/waitlist.js b/lib/models/waitlist.js
index e95a860..0f4132a 100644
--- a/lib/models/waitlist.js
+++ b/lib/models/waitlist.js
@@ -862,7 +862,16 @@ function (ticket, serverqueue, etag, callback) {
             wfcb();
         },
         function (wfcb) {
+            self.log.debug({
+                batch: data
+            }, 'performing batch operation to activate next ticket');
             moray.batch(data, function (err, meta) {
+                if (err) {
+                    self.log.error({
+                        err: err
+                    }, 'Error when performing batch operation');
+                }
+
                 if (err &&
                    (VError.hasCauseWithName(err, 'EtagConflictError') ||
                    (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
@@ -873,6 +882,9 @@ function (ticket, serverqueue, etag, callback) {
                                 wfcb(err2);
                                 return;
                             }
+
+                            self.log.debug('retrying ' +
+                                'expireTicketUpdateQueueActivateNext');
                             self.expireTicketUpdateQueueActivateNext(
                                 ticket,
                                 resp.serverqueue,
@@ -1127,7 +1139,9 @@ ModelWaitlist.prototype.createTicket = function (params, callback) {
     };
     var queue;
 
-    self.log.info('creating ticket %s', ticket_uuid);
+    self.log.info({
+        ticket: ticket
+    }, 'creating ticket %s', ticket_uuid);
 
     vasync.waterfall([
         ensureServerQueue,
@@ -1397,6 +1411,9 @@ ModelWaitlist.prototype.deleteAllTickets = function (callback) {
                     '(server_uuid=' + self.uuid + ')',
                     function (delError) {
                         if (delError) {
+                            self.log.error({
+                                err: delError
+                            }, 'Error when deleting tickets');
                             wfcb(delError);
                             return;
                         }
@@ -1408,9 +1425,17 @@ ModelWaitlist.prototype.deleteAllTickets = function (callback) {
             function (wfcb) {
                 self.countTickets(function (err, ticketCount) {
                     if (err) {
+                        self.log.error({
+                            err: err
+                        }, 'Error when counting tickets');
                         wfcb(err);
                         return;
                     }
+
+                    self.log.debug({
+                        ticketCount: ticketCount
+                    }, 'Tickets count after delete iteration');
+
                     if (ticketCount === 0) {
                         done = true;
                     }
diff --git a/test/waitlist/test-waitlist-continuous.js b/test/waitlist/test-waitlist-continuous.js
index 1f2da93..ba55c67 100644
--- a/test/waitlist/test-waitlist-continuous.js
+++ b/test/waitlist/test-waitlist-continuous.js
@@ -87,7 +87,7 @@ function testContinuosCreateWaitRelease(test) {
 
     function create(cb) {
         var ticketPayload = {
-            scope: 'test1',
+            scope: 'test-continuous-create-wait-release',
             id: '111',
             expires_at:
                 (new Date((new Date().valueOf()) + 60*1000)).toISOString()
diff --git a/test/waitlist/test-waitlist-expiry.js b/test/waitlist/test-waitlist-expiry.js
index e30d7fd..7043ec1 100644
--- a/test/waitlist/test-waitlist-expiry.js
+++ b/test/waitlist/test-waitlist-expiry.js
@@ -64,7 +64,7 @@ function deleteAllTickets(callback) {
 function testExpireSingleTicket(test) {
     var expireTimeSeconds = 3;
     var ticketPayload = {
-        scope: 'test',
+        scope: 'test-expire-single-ticket',
         id: '123',
         expires_at: (
             new Date((new Date().valueOf()) +
@@ -136,7 +136,7 @@ function testExpireSingleTicketStartNext(test) {
     var expireTimeSeconds2 = 24;
 
     var ticketPayload = {
-        scope: 'test',
+        scope: 'test-expire-single-ticket',
         id: '123',
         expires_at: (
             new Date((new Date().valueOf()) +
@@ -144,7 +144,7 @@ function testExpireSingleTicketStartNext(test) {
     };
 
     var ticketPayload2 = {
-        scope: 'test',
+        scope: 'test-expire-single-ticket',
         id: '123',
         expires_at: (
             new Date((new Date().valueOf()) +
diff --git a/test/waitlist/test-waitlist-repeatedly.js b/test/waitlist/test-waitlist-repeatedly.js
index 6102553..138aaa0 100644
--- a/test/waitlist/test-waitlist-repeatedly.js
+++ b/test/waitlist/test-waitlist-repeatedly.js
@@ -60,7 +60,7 @@ function deleteAllTickets(callback) {
 
 function testWaitForActiveTicket(test) {
     var ticketPayload = {
-        scope: 'test1',
+        scope: 'test-waitlist-repeatedly-test-wait-for-active-ticket',
         id: '111',
         expires_at: (new Date((new Date().valueOf()) + 120*1000)).toISOString()
     };
@@ -119,7 +119,7 @@ function testWaitOnTicket(test) {
 
     for (i = 0; i < count; i++) {
         payloads.push({
-            scope: 'test1',
+            scope: 'test-waitlist-repeatedly-test-wait-on-ticket',
             id: '111',
             expires_at:
                 (new Date((new Date().valueOf()) + 120*1000)).toISOString()
diff --git a/test/waitlist/test-waitlist-wait.js b/test/waitlist/test-waitlist-wait.js
index 3a85d8e..755fb1a 100644
--- a/test/waitlist/test-waitlist-wait.js
+++ b/test/waitlist/test-waitlist-wait.js
@@ -60,7 +60,7 @@ function deleteAllTickets(callback) {
 
 function testWaitForActiveTicket(test) {
     var ticketPayload = {
-        scope: 'test1',
+        scope: 'test-waitlist-wait-test-wait-for-active-ticket',
         id: '111',
         expires_at: (new Date((new Date().valueOf()) + 120*1000)).toISOString()
     };
@@ -122,7 +122,7 @@ function testWaitOnTicket(test) {
 
     for (i = 0; i < count; i++) {
         payloads.push({
-            scope: 'test1',
+            scope: 'test-waitlist-wait-test-wait-on-ticket',
             id: '111',
             expires_at:
                 (new Date((new Date().valueOf()) + 120*1000)).toISOString()
diff --git a/test/waitlist/test-waitlist.js b/test/waitlist/test-waitlist.js
index 8215d19..0362060 100644
--- a/test/waitlist/test-waitlist.js
+++ b/test/waitlist/test-waitlist.js
@@ -11,6 +11,7 @@
 var Logger = require('bunyan');
 var restify = require('restify');
 
+var assert = require('assert-plus');
 var async = require('async');
 var cp = require('child_process');
 var fs = require('fs');
@@ -85,7 +86,7 @@ function testCreateTicket(test) {
     test.expect(59);
 
     var ticketPayload = {
-        scope: 'test',
+        scope: 'test-create-ticket',
         id: '123',
         expires_at: (new Date((new Date().valueOf()) + 60*1000)).toISOString(),
         action: 'action0',
@@ -93,7 +94,7 @@ function testCreateTicket(test) {
     };
 
     var ticketPayload2 = {
-        scope: 'test',
+        scope: 'test-create-ticket',
         id: '234',
         expires_at: (new Date((new Date().valueOf()) + 60*1000)).toISOString(),
         action: 'action1',
@@ -218,7 +219,7 @@ function testCreateWaitReleaseTicket(test) {
     var expireTimeSeconds = 3;
     var expireTimeSeconds2 = 4;
     var ticketPayload = {
-        scope: 'test',
+        scope: 'test-create-wait-release-ticket',
         id: '123',
         expires_at: (
             new Date((new Date().valueOf()) +
@@ -226,7 +227,7 @@ function testCreateWaitReleaseTicket(test) {
     };
 
     var ticketPayload2 = {
-        scope: 'test',
+        scope: 'test-create-wait-release-ticket',
         id: '123',
         expires_at: (
             new Date((new Date().valueOf()) +
@@ -379,6 +380,7 @@ function testLimitOffsetValidation(test) {
         // Create number of tickets given by `count`
         function (wfcb) {
             createTickets({
+                ticketsScope: 'limit-offset-validation',
                 test: test,
                 count: count
             }, function (err, tickets) {
@@ -449,6 +451,7 @@ function testFetchTicketsWithPaging(test) {
         // Create number of tickets given by `count`
         function (wfcb) {
             createTickets({
+                ticketsScope: 'fetch-tickets-with-paging',
                 test: test,
                 count: count
             }, function (err, tickets) {
@@ -553,6 +556,7 @@ function testDeleteOver1000Tickets(test) {
     async.waterfall([
         function (wfcb) {
             createTickets({
+                ticketsScope: 'delete-over-1000-tickets',
                 test: test,
                 count: count
             }, function (err, tickets) {
@@ -569,7 +573,8 @@ function testDeleteOver1000Tickets(test) {
             client.get(geturl, getcb);
             function getcb(err, req, res, results) {
                 test.ok(Array.isArray(results), 'result is an array');
-                test.notEqual(results.length, 0, 'result array not empty');
+                test.notEqual(results.length, 0,
+                    'result array not empty, nb tickets is: ' + results.length);
                 wfcb();
             }
 
@@ -589,14 +594,17 @@ function testDeleteOver1000Tickets(test) {
             function getcb(err, req, res, results) {
                 test.ok(Array.isArray(results), 'result is an array');
                 test.equal(results.length, 0,
-                           'result length is 0 (was ' +
-                               results.length + ')');
+                            'result length is 0 (was ' +
+                                results.length + ', content: ' +
+                                util.inspect(results) + ')');
                 wfcb();
             }
 
         }
     ], function (err) {
+        console.log((new Date().toISOString() + 'calling test.done()'));
         test.done();
+        console.log((new Date().toISOString() + 'called test.done()'));
     });
 }
 
@@ -608,6 +616,11 @@ function testDeleteOver1000Tickets(test) {
  */
 
 function createTickets(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.number(opts.count, 'opts.count');
+    assert.string(opts.ticketsScope, 'opts.ticketsScope');
+    assert.object(opts.test, 'opts.test');
+
     var ticketUuids = {};
 
     var count = opts.count;
@@ -623,7 +636,11 @@ function createTickets(opts, callback) {
             var payloads = [];
             for (i = 0; i < count; i++) {
                 payloads.push({
-                    scope: 'test1',
+                    scope: opts.ticketsScope,
+                    /*
+                     * This ID needs to be constant so tickets get queued and
+                     * don't become active.
+                     */
                     id: '111',
                     expires_at:
                         (new Date((new Date().valueOf()) +
