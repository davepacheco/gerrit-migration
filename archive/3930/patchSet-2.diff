commit e18ac84935b0fd47f8400399931781a46616d976 (refs/changes/30/3930/2)
Author: Robert Bogart <robert.bogart@joyent.com>
Date:   2018-05-10T21:13:15+00:00 (1 year, 5 months ago)
    
    MANTA-3676 Improve binder observability

diff --git a/lib/server.js b/lib/server.js
index 6aa2ba8..5785fbd 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -11,6 +11,7 @@
 var assert = require('assert-plus');
 var dns = require('dns');
 var url = require('url');
+var mod_os = require('os');
 
 var mname = require('mname');
 
@@ -21,6 +22,17 @@ var ARecord = mname.ARecord;
 var SRVRecord = mname.SRVRecord;
 var PTRRecord = mname.PTRRecord;
 
+///--- USDT probes
+var d = require('dtrace-provider');
+var dtp = d.createDTraceProvider('binder');
+var p1 = dtp.addProbe('op-req-start', 'json');
+var p2 = dtp.addProbe('op-req-done', 'json');
+dtp.enable();
+
+// Binder metric collectors
+var METRIC_REQUEST_COUNTER = 'binder_requests_completed';
+var METRIC_LATENCY_HISTOGRAM = 'binder_request_latency_ms';
+var METRIC_SIZE_HISTOGRAM = 'binder_response_size_bytes';
 
 ///--- Helpers
 
@@ -422,6 +434,7 @@ function createServer(options) {
         assert.object(options.log, 'options.log');
         assert.optionalObject(options.recursion, 'options.recursion');
         assert.string(options.dnsDomain, 'options.dnsDomain');
+        assert.object(options.metrics, 'options.metrics');
         var log = options.log;
 
         var server = mname.createServer({
@@ -429,7 +442,28 @@ function createServer(options) {
                 log: log
         });
 
+        var metricsManager = options.metrics;
+
+        metricsManager.collector.counter({
+                name: METRIC_REQUEST_COUNTER,
+                help: 'count of Binder requests completed'
+        });
+
+        metricsManager.collector.histogram({
+                name: METRIC_LATENCY_HISTOGRAM,
+                help: 'total time to process Binder requests'
+        });
+
+        metricsManager.collector.histogram({
+                name: METRIC_SIZE_HISTOGRAM,
+                help: 'size in bytes of Binder responses'
+        });
+
         server.on('query', function onQuery(query, cb) {
+                p1.fire(function () {
+                        return ([query]);
+                });
+
                 var lastStamp = new Date();
                 query._start = lastStamp;
                 query._times = {};
@@ -470,6 +504,24 @@ function createServer(options) {
                 if (lat > 1000)
                         loglevel = 'warn';
 
+                p2.fire(function () {
+                        return ([query]);
+                });
+
+                var query_counter = metricsManager.collector.getCollector(
+                    METRIC_REQUEST_COUNTER);
+
+                var latency_histogram = metricsManager.collector.getCollector(
+                    METRIC_LATENCY_HISTOGRAM);
+
+                var size_histogram = metricsManager.collector.getCollector(
+                    METRIC_SIZE_HISTOGRAM);
+
+                var labels = { type: query.type() };
+                query_counter.increment(labels);
+                latency_histogram.observe(lat, labels);
+                size_histogram.observe(query._bytes_sent, labels);
+
                 query._log[loglevel]({
                         rcode: query.error(),
                         answers: query.answers().map(function (r) {
diff --git a/main.js b/main.js
index f7493d9..2124b84 100644
--- a/main.js
+++ b/main.js
@@ -14,6 +14,8 @@ var os = require('os');
 var path = require('path');
 var repl = require('repl');
 
+var createMetricsManager = require('triton-metrics').createMetricsManager;
+var restify = require('restify');
 var bunyan = require('bunyan');
 var clone = require('clone');
 var LRU = require('lru-cache');
@@ -178,6 +180,27 @@ function run(opts) {
                                 setImmediate(subcb);
                         },
                         function initServer(_, subcb) {
+                                var metricsManager = createMetricsManager({
+                                        address: '0.0.0.0',
+                                        log: LOG,
+                                        staticLabels: {
+                                                datacenter: opts.datacenterName,
+                                                instance: opts.instance_uuid,
+                                                server: opts.server_uuid,
+                                                service: opts.service_name,
+                                                port: opts.port
+                                        },
+                                        /*
+                                         * A recommended convention for deriving
+                                         * the port number to be used by the
+                                         * corresponding metrics server is to
+                                         * add 1000 to the service port number.
+                                         */
+                                        port: opts.port + 1000,
+                                        restify: restify
+                                });
+                                metricsManager.listen(function () {});
+
                                 _.server = core.createServer({
                                         name: NAME,
                                         log: LOG,
@@ -186,7 +209,8 @@ function run(opts) {
                                         recursion: _.recursion,
                                         zkCache: _.zkCache,
                                         dnsDomain: opts.dnsDomain,
-                                        datacenterName: opts.datacenterName
+                                        datacenterName: opts.datacenterName,
+                                        metrics: metricsManager
                                 });
                                 _.server.start(subcb);
                         }
diff --git a/package.json b/package.json
index e87c7b3..26b9c24 100644
--- a/package.json
+++ b/package.json
@@ -9,12 +9,15 @@
     "assert-plus": "0.1.5",
     "bunyan": "1.5.1",
     "clone": "0.1.1",
+    "dtrace-provider": "0.8.6",
     "lru-cache": "2.7.0",
     "mname": "1.4.0",
     "mooremachine": "^2.1.0",
     "mname-client": "0.6.0",
     "posix-getopt": "1.0.0",
+    "restify": "4.3.2",
     "sdc-clients": "9.0.3",
+    "triton-metrics": "0.1.0",
     "vasync": "2.1.0",
     "verror": "^1.10.0",
     "xtend": "1.0.3",
diff --git a/sapi_manifests/binder/template b/sapi_manifests/binder/template
index db48014..beb7a06 100644
--- a/sapi_manifests/binder/template
+++ b/sapi_manifests/binder/template
@@ -26,6 +26,9 @@
     {{/dns_domain}}
     {{^dns_domain}}
     "dnsDomain": "{{{DNS_DOMAIN}}}",
-    "datacenterName": "{{{DATACENTER}}}"
+    "datacenterName": "{{{DATACENTER}}}",
+    "instance_uuid": "{{auto.ZONENAME}}",
+    "server_uuid": "{{auto.SERVER_UUID}}",
+    "service_name": "{{SERVICE_NAME}}"
     {{/dns_domain}}
 }
