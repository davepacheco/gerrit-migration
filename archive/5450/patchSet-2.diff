From b77f42261c990b3f0cd7c17a0c0967c8a02a080f Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 29 Jan 2019 17:44:03 -0800
Subject: [PATCH] TRITON-1173 add CNAPI/cn-agent support for uninstalling
 agents

---
 docs/index.md            |  25 ++++++++-
 lib/endpoints/servers.js | 118 ++++++++++++++++++++++++++++++++++++++-
 lib/errors.js            |   3 +-
 package.json             |   2 +-
 tools/rsync-to           |   6 +-
 5 files changed, 144 insertions(+), 10 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 4d3bb3b..3e37fde 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright (c) 2018, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
 <!--
@@ -1087,7 +1087,7 @@ parameter must be an array of objects. Those objects must have both the
 
 ## PlatformList (GET /platforms)
 
-Returns avaiable platform images in datacenter.
+Returns available platform images in datacenter.
 
 ### Inputs
 
@@ -1457,6 +1457,27 @@ install and server will download and install package.
 | 500  | Error | Could not process request           |
 
 
+## ServerUninstallAgents (POST /servers/:server_uuid/uninstall-agents)
+
+Uninstall the given agents on the server.
+(Requires cn-agent v2.8.0 or later.)
+
+### Inputs
+
+| Param  | Type  | Description                                                                                                                                       |
+| ------ | ----- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
+| agents | Array | The names of the agents to uninstall. Passing      "cn-agent" as an agent to remove results in undefined (and likely      destructive) behaviour. |
+
+
+### Responses
+
+| Code | Type  | Description                                                                  |
+| ---- | ----- | ---------------------------------------------------------------------------- |
+| 200  | Ok    | Uninstall task created successfully                                          |
+| 412  | Error | PreconditionFailed if the target server has a cn-agent      that is too old. |
+| 500  | Error | Could not process request                                                    |
+
+
 
 # Virtual Machine API
 
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index 44ec8d0..ff3595e 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -27,6 +27,7 @@ var VError = require('verror');
 var common = require('../common');
 var datasetEndpoints = require('./zfs');
 var Designation = require('../designation');
+var errors = require('../errors');
 var ModelPlatform = require('../models/platform');
 var ModelServer = require('../models/server');
 var ur = require('./ur');
@@ -1295,6 +1296,106 @@ Server.installAgent = function handlerServerInstallAgent(req, res, next) {
 };
 
 
+/**
+ * Uninstall the given agents on the server.
+ * (Requires cn-agent v2.8.0 or later.)
+ *
+ * @name ServerUninstallAgents
+ * @endpoint POST /servers/:server_uuid/uninstall-agents
+ * @section Server API
+ * @param {Array} agents The names of the agents to uninstall. Passing
+ *      "cn-agent" as an agent to remove results in undefined (and likely
+ *      destructive) behaviour.
+ *
+ * @response 200 Ok Uninstall task created successfully
+ * @response 412 Error PreconditionFailed if the target server has a cn-agent
+ *      that is too old.
+ * @response 500 Error Could not process request
+ */
+Server.uninstallAgents = function uninstallAgents(req, res, next) {
+    var self = this;
+    const CN_AGENT_VERSION_WITH_AGENTS_UNINSTALL = '2.8.0';
+
+    // Dev Note: The `execute` task above provides a fallback to using Ur if
+    // the target server's cn-agent is older and doesn't have the relevant task.
+    // There isn't a backward compatibility requirement here, so this task
+    // does not provide that default. It is up to the caller to know that
+    // a cn-agent of at least version 2.8.0 is required.
+
+    var rules = {
+        'agents': ['isArrayType']
+    };
+    if (validation.ensureParamsValid(req, res, rules)) {
+        next();
+        return;
+    }
+
+    vasync.pipeline({arg: {}, funcs: [
+        function getCnAgentVersion(ctx, cb) {
+            req.stash.server.getFinal({
+                sysinfo: false,
+                vms: false,
+                disk: false,
+                agents: true,
+                last_heartbeat: false,
+                memory: false
+            }, function (err, server) {
+                var agent;
+                var idx;
+
+                if (err) {
+                    cb(new VError(err, 'could not determine cn-agent version'));
+                    return;
+                }
+
+                ctx.cnAgent = {}; // To ensure we always have an object.
+                for (idx = 0; idx < server.agents.length; idx++) {
+                    agent = server.agents[idx];
+                    if (agent.name === 'cn-agent') {
+                        ctx.cnAgent = agent;
+                        break;
+                    }
+                }
+
+                cb();
+            });
+        },
+        function bailIfCnAgentTooOld(ctx, cb) {
+            if (!ctx.cnAgent.version ||
+                semver.lt(ctx.cnAgent.version,
+                    CN_AGENT_VERSION_WITH_AGENTS_UNINSTALL))
+            {
+                cb(new errors.PreconditionFailedError(
+                    'cn-agent (v%s) on server %s does not support '
+                    + '"agents_uninstall": require at least cn-agent v%s',
+                    ctx.cnAgent.version, req.stash.server.uuid,
+                    CN_AGENT_VERSION_WITH_AGENTS_UNINSTALL));
+            } else {
+                self.log.debug(
+                    'server %s cn-agent supports "agents_uninstall": v%s',
+                    req.stash.server.uuid, ctx.cnAgent.version);
+                cb();
+            }
+        },
+        function requestCnAgentTask(ctx, cb) {
+            req.stash.server.sendTaskRequest({
+                task: 'agents_uninstall',
+                params: req.params,
+                req: req,
+                evcb: ModelServer.createComputeNodeAgentHandler(
+                    self, req.params.jobid),
+                cb: function onTaskRequested(_taskReqErr, task) {
+                    res.send({ id: task.id });
+                    cb();
+                }
+            });
+        }
+    ]}, function finish(err) {
+        next(err);
+    });
+};
+
+
 Server.nop = function handlerServerNop(req, res, next) {
     req.params.sleep = parseInt(req.params.sleep, 10) || 0;
     req.stash.server.sendTaskRequest({
@@ -1404,7 +1505,7 @@ function attachTo(http, app) {
         }),
         Server.ensureImage);
 
-    // Import an image to the server
+    // Install a Triton agent on the server
     http.post({
         path: '/servers/:server_uuid/install-agent',
         name: 'ServerInstallAgent' },
@@ -1417,6 +1518,19 @@ function attachTo(http, app) {
         }),
         Server.installAgent);
 
+    // Uninstall one or more Triton agents on the server
+    http.post({
+        path: '/servers/:server_uuid/uninstall-agents',
+        name: 'ServerUninstallAgents' },
+        ensure({
+            connectionTimeoutSeconds: 60 * 60,
+            app: app,
+            serverRunning: true,
+            prepopulate: ['server'],
+            connected: ['moray']
+        }),
+        Server.uninstallAgents);
+
     // Refresh server sysinfo
     http.post({
         path: '/servers/:server_uuid/sysinfo-refresh',
diff --git a/lib/errors.js b/lib/errors.js
index 79efec4..2787111 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -255,6 +255,7 @@ module.exports = {
     ServiceUnavailableError: restify.ServiceUnavailableError,
     ForbiddenError: restify.ForbiddenError,
     BadRequestError: restify.BadRequestError,
+    PreconditionFailedError: restify.PreconditionFailedError,
 
     CnapiError: CnapiError,
     NoAllocatableServersError: NoAllocatableServersError,
diff --git a/package.json b/package.json
index 5cc1d16..6622817 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.18.4",
+  "version": "1.19.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/tools/rsync-to b/tools/rsync-to
index 2fb85a2..8d7f661 100755
--- a/tools/rsync-to
+++ b/tools/rsync-to
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
@@ -21,9 +21,7 @@ NODE=$1
 ROLE=cnapi
 
 if [[ -z "$ZONE" ]]; then
-    ZONE=$(ssh $NODE "/opt/smartdc/bin/sdc-vmapi /vms" 2>/dev/null \
-        | json -H -c "this.tags && this.tags.smartdc_role === '$ROLE'" \
-            -c 'this.state === "running"' 0.uuid)
+    ZONE=$(ssh $NODE "/usr/sbin/vmadm lookup -1 alias=~^$ROLE")
 fi
 echo "ZONE: $ZONE"
 
-- 
2.21.0

