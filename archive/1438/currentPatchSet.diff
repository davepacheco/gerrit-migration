commit 4ccba7289e7fcc22cc04738c0effac80d465452c (refs/changes/38/1438/1)
Author: YangYong3 <yy1111.yang@samsung.com>
Date:   2017-02-06T14:55:17+09:00 (2 years, 8 months ago)
    
    joyent/node-triton#169 rbac CLI info, apply, reset, do_role_tags not working ..

diff --git a/lib/do_rbac/do_apply.js b/lib/do_rbac/do_apply.js
index 2bd083d..7de1f12 100644
--- a/lib/do_rbac/do_apply.js
+++ b/lib/do_rbac/do_apply.js
@@ -39,7 +39,18 @@ function do_apply(subcmd, opts, args, cb) {
         rbacConfigPath: opts.file || './rbac.json',
         rbacDryRun: opts.dry_run
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
+
         rbac.loadRbacConfig,
         rbac.loadRbacState,
         rbac.createRbacUpdatePlan,
diff --git a/lib/do_rbac/do_info.js b/lib/do_rbac/do_info.js
index bcb7853..e9b2793 100644
--- a/lib/do_rbac/do_info.js
+++ b/lib/do_rbac/do_info.js
@@ -60,8 +60,6 @@ var common = require('../common');
 var errors = require('../errors');
 var rbac = require('../rbac');
 
-
-
 function do_info(subcmd, opts, args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -83,7 +81,17 @@ function do_info(subcmd, opts, args, cb) {
         cloudapi: this.top.tritonapi.cloudapi,
         rbacStateAll: opts.all
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
 
         rbac.loadRbacState,
 
diff --git a/lib/do_rbac/do_reset.js b/lib/do_rbac/do_reset.js
index 998bdfa..132041b 100644
--- a/lib/do_rbac/do_reset.js
+++ b/lib/do_rbac/do_reset.js
@@ -36,7 +36,18 @@ function do_reset(subcmd, opts, args, cb) {
         cloudapi: this.top.tritonapi.cloudapi,
         rbacDryRun: opts.dry_run
     };
+
+    var cli = this.top;
+    var tritonapi = this.top.tritonapi;
+
     vasync.pipeline({arg: context, funcs: [
+        function cliSetupTritonApi(ctx, next) {
+            common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+                ctx.cloudapi = tritonapi.cloudapi;
+                next();
+            });
+        },
+
         function emptyConfig(ctx, next) {
             ctx.rbacConfig = {};
             next();
diff --git a/lib/do_rbac/do_role_tags.js b/lib/do_rbac/do_role_tags.js
index c669f1c..d45f305 100644
--- a/lib/do_rbac/do_role_tags.js
+++ b/lib/do_rbac/do_role_tags.js
@@ -69,25 +69,27 @@ function _listRoleTags(opts, cb) {
     assert.string(opts.resourceId, 'opts.resourceId');
     assert.optionalBool(opts.json, 'opts.json');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.getRoleTags({
-        resourceType: opts.resourceType,
-        id: opts.resourceId
-    }, function (err, roleTags) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.getRoleTags({
+            resourceType: opts.resourceType,
+            id: opts.resourceId
+        }, function (err, roleTags) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-        if (opts.json) {
-            console.log(JSON.stringify(roleTags));
-        } else {
-            roleTags.forEach(function (r) {
-                console.log(r);
-            });
-        }
-        cb();
+            if (opts.json) {
+                console.log(JSON.stringify(roleTags));
+            } else {
+                roleTags.forEach(function (r) {
+                    console.log(r);
+                });
+            }
+            cb();
+        });
     });
 }
 
@@ -100,7 +102,9 @@ function _addRoleTags(opts, cb) {
     var cli = opts.cli;
     var log = cli.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
+
         function getCurrRoleTags(ctx, next) {
             cli.tritonapi.getRoleTags({
                 resourceType: opts.resourceType,
@@ -217,23 +221,24 @@ function _editRoleTags(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.getRoleTags({
+            resourceType: opts.resourceType,
+            id: opts.resourceId
+        }, function (err, roleTags_) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-    cli.tritonapi.getRoleTags({
-        resourceType: opts.resourceType,
-        id: opts.resourceId
-    }, function (err, roleTags_) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        roleTags = roleTags_;
-        filename = format('%s-%s-%s-roleTags.txt',
-            cli.tritonapi.profile.account,
-            opts.resourceType,
-            common.filenameSlug(opts.resourceId));
-        origText = _reprFromRoleTags(roleTags);
-        editAttempt(origText);
+            roleTags = roleTags_;
+            filename = format('%s-%s-%s-roleTags.txt',
+                cli.tritonapi.profile.account,
+                opts.resourceType,
+                common.filenameSlug(opts.resourceId));
+            origText = _reprFromRoleTags(roleTags);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -247,7 +252,8 @@ function _setRoleTags(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(ctx, next) {
             if (opts.yes) {
                 return next();
@@ -289,7 +295,8 @@ function _deleteRoleTags(opts, cb) {
     var cli = opts.cli;
     var log = cli.log;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function getCurrRoleTags(ctx, next) {
             cli.tritonapi.getRoleTags({
                 resourceType: opts.resourceType,
@@ -369,7 +376,8 @@ function _deleteAllRoleTags(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(ctx, next) {
             if (opts.yes) {
                 return next();
@@ -421,7 +429,6 @@ function makeRoleTagsFunc(cfg) {
     assert.string(cfg.cmdName, 'cfg.cmdName');
     assert.string(cfg.argName, 'cfg.argName');
     assert.string(cfg.helpArgIs, 'cfg.helpArgIs');
-
     var func = function (subcmd, opts, args, cb) {
         if (opts.help) {
             this.do_help('help', {}, [subcmd], cb);
