From 5a4b0974e6ca1295f2ca551cffd1dd427e1a89c5 Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@joyent.com>
Date: Fri, 11 Nov 2016 04:05:25 +0000
Subject: [PATCH] OS-5693 dis can't handle x86 SSE 3 instructions OS-5786 want
 avx2 disasm tests OS-5787 want SSE 4.1 disasm tests

---
 usr/src/common/dis/i386/dis_tables.c          | 27 +++---
 usr/src/test/util-tests/tests/dis/Makefile    |  6 ++
 .../tests/dis/i386/32.avx2-gather.out         | 48 +++++++++++
 .../tests/dis/i386/32.avx2-gather.s           | 57 +++++++++++++
 .../util-tests/tests/dis/i386/32.avx2.out     | 59 +++++++++++++
 .../test/util-tests/tests/dis/i386/32.avx2.s  | 84 +++++++++++++++++++
 .../util-tests/tests/dis/i386/32.sse-3.out    | 31 +++++++
 .../test/util-tests/tests/dis/i386/32.sse-3.s | 56 +++++++++++++
 .../tests/dis/i386/64.avx2-gather.out         | 64 ++++++++++++++
 .../tests/dis/i386/64.avx2-gather.s           | 57 +++++++++++++
 .../util-tests/tests/dis/i386/64.avx2.out     | 59 +++++++++++++
 .../test/util-tests/tests/dis/i386/64.avx2.s  | 84 +++++++++++++++++++
 .../util-tests/tests/dis/i386/64.sse-3.out    | 31 +++++++
 .../test/util-tests/tests/dis/i386/64.sse-3.s | 56 +++++++++++++
 14 files changed, 707 insertions(+), 12 deletions(-)
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.s
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.avx2.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.avx2.s
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.sse-3.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/32.sse-3.s
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.s
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.avx2.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.avx2.s
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.sse-3.out
 create mode 100644 usr/src/test/util-tests/tests/dis/i386/64.sse-3.s

diff --git a/usr/src/common/dis/i386/dis_tables.c b/usr/src/common/dis/i386/dis_tables.c
index 4360009b26..9c06b09741 100644
--- a/usr/src/common/dis/i386/dis_tables.c
+++ b/usr/src/common/dis/i386/dis_tables.c
@@ -689,7 +689,7 @@ const instable_t dis_opSIMDdata16[256] = {
 /*  [70]  */	TNSZ("pshufd",XMMP,16),	INVALID,		INVALID,		INVALID,
 /*  [74]  */	TNSZ("pcmpeqb",XMM,16),	TNSZ("pcmpeqw",XMM,16),	TNSZ("pcmpeqd",XMM,16),	INVALID,
 /*  [78]  */	TNSZ("extrq",XMM2I,16),	TNSZ("extrq",XMM,16), INVALID,		INVALID,
-/*  [7C]  */	INVALID,		INVALID,		TNSZ("movd",XMM3MXS,4),	TNSZ("movdqa",XMMS,16),
+/*  [7C]  */	TNSZ("haddpd",XMM,16),	TNSZ("hsubpd",XMM,16),	TNSZ("movd",XMM3MXS,4),	TNSZ("movdqa",XMMS,16),
 
 /*  [80]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [84]  */	INVALID,		INVALID,		INVALID,		INVALID,
@@ -716,7 +716,7 @@ const instable_t dis_opSIMDdata16[256] = {
 /*  [C8]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [CC]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
-/*  [D0]  */	INVALID,		TNSZ("psrlw",XMM,16),	TNSZ("psrld",XMM,16),	TNSZ("psrlq",XMM,16),
+/*  [D0]  */	TNSZ("addsubpd",XMM,16),TNSZ("psrlw",XMM,16),	TNSZ("psrld",XMM,16),	TNSZ("psrlq",XMM,16),
 /*  [D4]  */	TNSZ("paddq",XMM,16),	TNSZ("pmullw",XMM,16),	TNSZ("movq",XMMS,8),	TNS("pmovmskb",XMMX3),
 /*  [D8]  */	TNSZ("psubusb",XMM,16),	TNSZ("psubusw",XMM,16),	TNSZ("pminub",XMM,16),	TNSZ("pand",XMM,16),
 /*  [DC]  */	TNSZ("paddusb",XMM,16),	TNSZ("paddusw",XMM,16),	TNSZ("pmaxub",XMM,16),	TNSZ("pandn",XMM,16),
@@ -823,7 +823,7 @@ const instable_t dis_opSIMDrepnz[256] = {
 /*  [08]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [0C]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
-/*  [10]  */	TNSZ("movsd",XMM,8),	TNSZ("movsd",XMMS,8),	INVALID,		INVALID,
+/*  [10]  */	TNSZ("movsd",XMM,8),	TNSZ("movsd",XMMS,8),	TNSZ("movddup",XMM,8),	INVALID,
 /*  [14]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [18]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [1C]  */	INVALID,		INVALID,		INVALID,		INVALID,
@@ -856,7 +856,7 @@ const instable_t dis_opSIMDrepnz[256] = {
 /*  [70]  */	TNSZ("pshuflw",XMMP,16),INVALID,		INVALID,		INVALID,
 /*  [74]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [78]  */	TNSZ("insertq",XMMX2I,16),TNSZ("insertq",XMM,8),INVALID,		INVALID,
-/*  [7C]  */	INVALID,		INVALID,		INVALID,		INVALID,
+/*  [7C]  */	TNSZ("haddps",XMM,16),	TNSZ("hsubps",XMM,16),	INVALID,		INVALID,
 
 /*  [80]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [84]  */	INVALID,		INVALID,		INVALID,		INVALID,
@@ -883,7 +883,7 @@ const instable_t dis_opSIMDrepnz[256] = {
 /*  [C8]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [CC]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
-/*  [D0]  */	INVALID,		INVALID,		INVALID,		INVALID,
+/*  [D0]  */	TNSZ("addsubps",XMM,16),INVALID,		INVALID,		INVALID,
 /*  [D4]  */	INVALID,		INVALID,		TNS("movdq2q",XMMXM),	INVALID,
 /*  [D8]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [DC]  */	INVALID,		INVALID,		INVALID,		INVALID,
@@ -893,7 +893,7 @@ const instable_t dis_opSIMDrepnz[256] = {
 /*  [E8]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [EC]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
-/*  [F0]  */	INVALID,		INVALID,		INVALID,		INVALID,
+/*  [F0]  */	TNS("lddqu",XMMM),	INVALID,		INVALID,		INVALID,
 /*  [F4]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [F8]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [FC]  */	INVALID,		INVALID,		INVALID,		INVALID,
@@ -1235,8 +1235,8 @@ const instable_t dis_opSIMDrepz[256] = {
 /*  [08]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [0C]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
-/*  [10]  */	TNSZ("movss",XMM,4),	TNSZ("movss",XMMS,4),	INVALID,		INVALID,
-/*  [14]  */	INVALID,		INVALID,		INVALID,		INVALID,
+/*  [10]  */	TNSZ("movss",XMM,4),	TNSZ("movss",XMMS,4),	TNSZ("movsldup",XMM,16),INVALID,
+/*  [14]  */	INVALID,		INVALID,		TNSZ("movshdup",XMM,16),INVALID,
 /*  [18]  */	INVALID,		INVALID,		INVALID,		INVALID,
 /*  [1C]  */	INVALID,		INVALID,		INVALID,		INVALID,
 
@@ -2078,19 +2078,19 @@ const instable_t dis_opFP1n2[8][8] = {
 /*  [2,0]  */	TNS("fiaddl",M),	TNS("fimull",M),	TNS("ficoml",M),	TNS("ficompl",M),
 /*  [2,4]  */	TNS("fisubl",M),	TNS("fisubrl",M),	TNS("fidivl",M),	TNS("fidivrl",M),
 }, {
-/*  [3,0]  */	TNS("fildl",M),		INVALID,		TNS("fistl",M),		TNS("fistpl",M),
+/*  [3,0]  */	TNS("fildl",M),		TNSZ("tisttpl",M,4),	TNS("fistl",M),		TNS("fistpl",M),
 /*  [3,4]  */	INVALID,		TNSZ("fldt",M,10),	INVALID,		TNSZ("fstpt",M,10),
 }, {
 /*  [4,0]  */	TNSZ("faddl",M,8),	TNSZ("fmull",M,8),	TNSZ("fcoml",M,8),	TNSZ("fcompl",M,8),
 /*  [4,1]  */	TNSZ("fsubl",M,8),	TNSZ("fsubrl",M,8),	TNSZ("fdivl",M,8),	TNSZ("fdivrl",M,8),
 }, {
-/*  [5,0]  */	TNSZ("fldl",M,8),	INVALID,		TNSZ("fstl",M,8),	TNSZ("fstpl",M,8),
+/*  [5,0]  */	TNSZ("fldl",M,8),	TNSZ("fisttpll",M,8),	TNSZ("fstl",M,8),	TNSZ("fstpl",M,8),
 /*  [5,4]  */	TNSZ("frstor",M,108),	INVALID,		TNSZ("fnsave",M,108),	TNSZ("fnstsw",M,2),
 }, {
 /*  [6,0]  */	TNSZ("fiadd",M,2),	TNSZ("fimul",M,2),	TNSZ("ficom",M,2),	TNSZ("ficomp",M,2),
 /*  [6,4]  */	TNSZ("fisub",M,2),	TNSZ("fisubr",M,2),	TNSZ("fidiv",M,2),	TNSZ("fidivr",M,2),
 }, {
-/*  [7,0]  */	TNSZ("fild",M,2),	INVALID,		TNSZ("fist",M,2),	TNSZ("fistp",M,2),
+/*  [7,0]  */	TNSZ("fild",M,2),	TNSZ("fisttp",M,2),	TNSZ("fist",M,2),	TNSZ("fistp",M,2),
 /*  [7,4]  */	TNSZ("fbld",M,10),	TNSZ("fildll",M,8),	TNSZ("fbstp",M,10),	TNSZ("fistpll",M,8),
 } };
 
@@ -3462,9 +3462,12 @@ dtrace_disx86(dis86_t *x, uint_t cpu_mode)
 		goto error;
 
 	/*
-	 * deal with MMX/SSE opcodes which are changed by prefixes
+	 * Deal with MMX/SSE opcodes which are changed by prefixes. Note, we do
+	 * need to include UNKNOWN below, as we may have instructions that
+	 * actually have a prefix, but don't exist in any other form.
 	 */
 	switch (dp->it_adrmode) {
+	case UNKNOWN:
 	case MMO:
 	case MMOIMPL:
 	case MMO3P:
diff --git a/usr/src/test/util-tests/tests/dis/Makefile b/usr/src/test/util-tests/tests/dis/Makefile
index d75e207eb1..8756887e38 100644
--- a/usr/src/test/util-tests/tests/dis/Makefile
+++ b/usr/src/test/util-tests/tests/dis/Makefile
@@ -26,6 +26,7 @@ SPARC_TESTS = \
 
 I386_TESTS =		\
 	32.adx 		\
+	32.avx2		\
 	32.aes 		\
 	32.bmi1 	\
 	32.bmi2 	\
@@ -36,9 +37,12 @@ I386_TESTS =		\
 	32.lzcnt 	\
 	32.popcnt 	\
 	32.sha		\
+	32.sse-3	\
+	32.sse-4.1 	\
 	32.sse-4.2 	\
 	32.ssse3 	\
 	32.xsave 	\
+	64.avx2		\
 	64.adx 		\
 	64.aes 		\
 	64.bmi1 	\
@@ -52,6 +56,8 @@ I386_TESTS =		\
 	64.popcnt 	\
 	64.random 	\
 	64.sha		\
+	64.sse-3	\
+	64.sse-4.1 	\
 	64.sse-4.2 	\
 	64.ssse3 	\
 	64.vmx 		\
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.out b/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.out
new file mode 100644
index 0000000000..c434239327
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.out
@@ -0,0 +1,48 @@
+    libdis_test:       c4 e2 f9 92 14 88  vgatherdpd %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0x6:   c4 e2 f9 92 14 8d  vgatherdpd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x10:  c4 e2 fd 92 14 88  vgatherdpd %ymm0,(%eax,%xmm1,4),%ymm2
+    libdis_test+0x16:  c4 e2 fd 92 14 8d  vgatherdpd %ymm0,0x42(,%xmm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x20:  c4 e2 79 92 14 88  vgatherdps %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0x26:  c4 e2 79 92 14 8d  vgatherdps %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x30:  c4 e2 7d 92 14 88  vgatherdps %ymm0,(%eax,%ymm1,4),%ymm2
+    libdis_test+0x36:  c4 e2 7d 92 14 8d  vgatherdps %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x40:  c4 e2 f9 93 14 88  vgatherqpd %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0x46:  c4 e2 f9 93 14 8d  vgatherqpd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x50:  c4 e2 fd 93 14 88  vgatherqpd %ymm0,(%eax,%ymm1,4),%ymm2
+    libdis_test+0x56:  c4 e2 fd 93 14 8d  vgatherqpd %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x60:  c4 e2 79 93 14 88  vgatherqps %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0x66:  c4 e2 79 93 14 8d  vgatherqps %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x70:  c4 e2 7d 93 14 88  vgatherqps %xmm0,(%eax,%ymm1,4),%xmm2
+    libdis_test+0x76:  c4 e2 7d 93 14 8d  vgatherqps %xmm0,0x42(,%ymm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x80:  c4 e2 79 90 14 88  vpgatherdd %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0x86:  c4 e2 79 90 14 8d  vpgatherdd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x90:  c4 e2 7d 90 14 88  vpgatherdd %ymm0,(%eax,%ymm1,4),%ymm2
+    libdis_test+0x96:  c4 e2 7d 90 14 8d  vpgatherdd %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0xa0:  c4 e2 f9 90 14 88  vpgatherdq %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0xa6:  c4 e2 f9 90 14 8d  vpgatherdq %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xb0:  c4 e2 fd 90 14 88  vpgatherdq %ymm0,(%eax,%xmm1,4),%ymm2
+    libdis_test+0xb6:  c4 e2 fd 90 14 8d  vpgatherdq %ymm0,0x42(,%xmm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0xc0:  c4 e2 79 91 14 88  vpgatherqd %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0xc6:  c4 e2 79 91 14 8d  vpgatherqd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xd0:  c4 e2 7d 91 14 88  vpgatherqd %xmm0,(%eax,%ymm1,4),%xmm2
+    libdis_test+0xd6:  c4 e2 7d 91 14 8d  vpgatherqd %xmm0,0x42(,%ymm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xe0:  c4 e2 f9 91 14 88  vpgatherqq %xmm0,(%eax,%xmm1,4),%xmm2
+    libdis_test+0xe6:  c4 e2 f9 91 14 8d  vpgatherqq %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xf0:  c4 e2 fd 91 14 88  vpgatherqq %ymm0,(%eax,%ymm1,4),%ymm2
+    libdis_test+0xf6:  c4 e2 fd 91 14 8d  vpgatherqq %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.s b/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.s
new file mode 100644
index 0000000000..149b2ac8fc
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.avx2-gather.s
@@ -0,0 +1,57 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test AVX2 Gather related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	vgatherdpd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherdpd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherdpd	%ymm0, (%eax, %xmm1, 4), %ymm2
+	vgatherdpd	%ymm0, 0x42(, %xmm1, 4), %ymm2
+	vgatherdps	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherdps	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherdps	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vgatherdps	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vgatherqpd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherqpd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherqpd	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vgatherqpd	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vgatherqps	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherqps	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherqps	%xmm0, (%eax, %ymm1, 4), %xmm2
+	vgatherqps	%xmm0, 0x42(, %ymm1, 4), %xmm2
+	vpgatherdd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherdd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherdd	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vpgatherdd	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vpgatherdq	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherdq	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherdq	%ymm0, (%eax, %xmm1, 4), %ymm2
+	vpgatherdq	%ymm0, 0x42(, %xmm1, 4), %ymm2
+	vpgatherqd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherqd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherqd	%xmm0, (%eax, %ymm1, 4), %xmm2
+	vpgatherqd	%xmm0, 0x42(, %ymm1, 4), %xmm2
+	vpgatherqq	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherqq	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherqq	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vpgatherqq	%ymm0, 0x42(, %ymm1, 4), %ymm2
+.size libdis_test, [.-libdis_test]
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.avx2.out b/usr/src/test/util-tests/tests/dis/i386/32.avx2.out
new file mode 100644
index 0000000000..2d9f62f1e2
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.avx2.out
@@ -0,0 +1,59 @@
+    libdis_test:       c4 e2 7d 5a 00     vbroadcasti128 (%eax),%ymm0
+    libdis_test+0x5:   c4 e3 7d 39 dc 23  vextracti128 $0x23,%ymm3,%xmm4
+    libdis_test+0xb:   c4 e3 7d 39 1b 23  vextracti128 $0x23,%ymm3,(%ebx)
+    libdis_test+0x11:  c4 e3 65 38 e2 42  vinserti128 $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x17:  c4 e3 65 38 20 42  vinserti128 $0x42,(%eax),%ymm3,%ymm4
+    libdis_test+0x1d:  c4 e2 7d 2a 00     vmovntdqa (%eax),%ymm0
+    libdis_test+0x22:  c4 e3 61 02 e2 42  vpblendd $0x42,%xmm2,%xmm3,%xmm4
+    libdis_test+0x28:  c4 e3 61 02 20 42  vpblendd $0x42,(%eax),%xmm3,%xmm4
+    libdis_test+0x2e:  c4 e3 65 02 e2 42  vpblendd $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x34:  c4 e3 65 02 20 42  vpblendd $0x42,(%eax),%ymm3,%ymm4
+    libdis_test+0x3a:  c4 e2 79 78 c8     vpbroadcastb %xmm0,%xmm1
+    libdis_test+0x3f:  c4 e2 79 78 10     vpbroadcastb (%eax),%xmm2
+    libdis_test+0x44:  c4 e2 7d 78 c8     vpbroadcastb %xmm0,%ymm1
+    libdis_test+0x49:  c4 e2 7d 78 10     vpbroadcastb (%eax),%ymm2
+    libdis_test+0x4e:  c4 e2 79 58 c8     vpbroadcastd %xmm0,%xmm1
+    libdis_test+0x53:  c4 e2 79 58 10     vpbroadcastd (%eax),%xmm2
+    libdis_test+0x58:  c4 e2 7d 58 c8     vpbroadcastd %xmm0,%ymm1
+    libdis_test+0x5d:  c4 e2 7d 58 10     vpbroadcastd (%eax),%ymm2
+    libdis_test+0x62:  c4 e2 79 59 c8     vpbroadcastq %xmm0,%xmm1
+    libdis_test+0x67:  c4 e2 79 59 10     vpbroadcastq (%eax),%xmm2
+    libdis_test+0x6c:  c4 e2 7d 59 c8     vpbroadcastq %xmm0,%ymm1
+    libdis_test+0x71:  c4 e2 7d 59 10     vpbroadcastq (%eax),%ymm2
+    libdis_test+0x76:  c4 e2 79 79 c8     vpbroadcastw %xmm0,%xmm1
+    libdis_test+0x7b:  c4 e2 79 79 10     vpbroadcastw (%eax),%xmm2
+    libdis_test+0x80:  c4 e2 7d 79 c8     vpbroadcastw %xmm0,%ymm1
+    libdis_test+0x85:  c4 e2 7d 79 10     vpbroadcastw (%eax),%ymm2
+    libdis_test+0x8a:  c4 e3 65 46 e2 42  vperm2i128 $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x90:  c4 e3 65 46 20 42  vperm2i128 $0x42,(%eax),%ymm3,%ymm4
+    libdis_test+0x96:  c4 e2 65 36 e2     vpermd %ymm2,%ymm3,%ymm4
+    libdis_test+0x9b:  c4 e2 65 36 20     vpermd (%eax),%ymm3,%ymm4
+    libdis_test+0xa0:  c4 e3 fd 01 da 42  vpermpd $0x42,%ymm2,%ymm3
+    libdis_test+0xa6:  c4 e3 fd 01 18 42  vpermpd $0x42,(%eax),%ymm3
+    libdis_test+0xac:  c4 e2 6d 16 d9     vpermps %ymm1,%ymm2,%ymm3
+    libdis_test+0xb1:  c4 e2 6d 16 18     vpermps (%eax),%ymm2,%ymm3
+    libdis_test+0xb6:  c4 e3 fd 00 da 42  vpermq $0x42,%ymm2,%ymm3
+    libdis_test+0xbc:  c4 e3 fd 00 18 42  vpermq $0x42,(%eax),%ymm3
+    libdis_test+0xc2:  c4 e2 6d 8c 18     vpmaskmovd (%eax),%ymm2,%ymm3
+    libdis_test+0xc7:  c4 e2 e9 8c 18     vpmaskmovq (%eax),%xmm2,%xmm3
+    libdis_test+0xcc:  c4 e2 ed 8c 18     vpmaskmovq (%eax),%ymm2,%ymm3
+    libdis_test+0xd1:  c4 e2 69 47 d9     vpsllvd %xmm1,%xmm2,%xmm3
+    libdis_test+0xd6:  c4 e2 69 47 18     vpsllvd (%eax),%xmm2,%xmm3
+    libdis_test+0xdb:  c4 e2 6d 47 d9     vpsllvd %ymm1,%ymm2,%ymm3
+    libdis_test+0xe0:  c4 e2 6d 47 18     vpsllvd (%eax),%ymm2,%ymm3
+    libdis_test+0xe5:  c4 e2 e9 47 d9     vpsllvq %xmm1,%xmm2,%xmm3
+    libdis_test+0xea:  c4 e2 e9 47 18     vpsllvq (%eax),%xmm2,%xmm3
+    libdis_test+0xef:  c4 e2 ed 47 d9     vpsllvq %ymm1,%ymm2,%ymm3
+    libdis_test+0xf4:  c4 e2 ed 47 18     vpsllvq (%eax),%ymm2,%ymm3
+    libdis_test+0xf9:  c4 e2 69 46 d9     vpsravd %xmm1,%xmm2,%xmm3
+    libdis_test+0xfe:  c4 e2 69 46 18     vpsravd (%eax),%xmm2,%xmm3
+    libdis_test+0x103: c4 e2 6d 46 d9     vpsravd %ymm1,%ymm2,%ymm3
+    libdis_test+0x108: c4 e2 6d 46 18     vpsravd (%eax),%ymm2,%ymm3
+    libdis_test+0x10d: c4 e2 69 45 d9     vpsrlvd %xmm1,%xmm2,%xmm3
+    libdis_test+0x112: c4 e2 69 45 18     vpsrlvd (%eax),%xmm2,%xmm3
+    libdis_test+0x117: c4 e2 6d 45 d9     vpsrlvd %ymm1,%ymm2,%ymm3
+    libdis_test+0x11c: c4 e2 6d 45 18     vpsrlvd (%eax),%ymm2,%ymm3
+    libdis_test+0x121: c4 e2 e9 45 d9     vpsrlvq %xmm1,%xmm2,%xmm3
+    libdis_test+0x126: c4 e2 e9 45 18     vpsrlvq (%eax),%xmm2,%xmm3
+    libdis_test+0x12b: c4 e2 ed 45 d9     vpsrlvq %ymm1,%ymm2,%ymm3
+    libdis_test+0x130: c4 e2 ed 45 18     vpsrlvq (%eax),%ymm2,%ymm3
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.avx2.s b/usr/src/test/util-tests/tests/dis/i386/32.avx2.s
new file mode 100644
index 0000000000..9cbf71cbd1
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.avx2.s
@@ -0,0 +1,84 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test AVX2 related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	vbroadcasti128	(%eax), %ymm0
+	vextracti128	$0x23, %ymm3, %xmm4
+	vextracti128	$0x23, %ymm3, (%ebx)
+	vinserti128	$0x42, %xmm2, %ymm3, %ymm4
+	vinserti128	$0x42, (%eax), %ymm3, %ymm4
+	vmovntdqa	(%eax), %ymm0
+	vpblendd	$0x42, %xmm2, %xmm3, %xmm4
+	vpblendd	$0x42, (%eax), %xmm3, %xmm4
+	vpblendd	$0x42, %ymm2, %ymm3, %ymm4
+	vpblendd	$0x42, (%eax), %ymm3, %ymm4
+	vpbroadcastb	%xmm0, %xmm1
+	vpbroadcastb	(%eax), %xmm2
+	vpbroadcastb	%xmm0, %ymm1
+	vpbroadcastb	(%eax), %ymm2
+	vpbroadcastd	%xmm0, %xmm1
+	vpbroadcastd	(%eax), %xmm2
+	vpbroadcastd	%xmm0, %ymm1
+	vpbroadcastd	(%eax), %ymm2
+	vpbroadcastq	%xmm0, %xmm1
+	vpbroadcastq	(%eax), %xmm2
+	vpbroadcastq	%xmm0, %ymm1
+	vpbroadcastq	(%eax), %ymm2
+	vpbroadcastw	%xmm0, %xmm1
+	vpbroadcastw	(%eax), %xmm2
+	vpbroadcastw	%xmm0, %ymm1
+	vpbroadcastw	(%eax), %ymm2
+	vperm2i128	$0x42, %ymm2, %ymm3, %ymm4
+	vperm2i128	$0x42, (%eax), %ymm3, %ymm4
+	vpermd		%ymm2, %ymm3, %ymm4
+	vpermd		(%eax), %ymm3, %ymm4
+	vpermpd		$0x42, %ymm2, %ymm3
+	vpermpd		$0x42, (%eax), %ymm3
+	vpermps		%ymm1, %ymm2, %ymm3
+	vpermps		(%eax), %ymm2, %ymm3
+	vpermq		$0x42, %ymm2, %ymm3
+	vpermq		$0x42, (%eax), %ymm3
+	vpmaskmovd	(%eax), %ymm2, %ymm3
+	vpmaskmovq	(%eax), %xmm2, %xmm3
+	vpmaskmovq	(%eax), %ymm2, %ymm3
+	vpsllvd		%xmm1, %xmm2, %xmm3
+	vpsllvd		(%eax), %xmm2, %xmm3
+	vpsllvd		%ymm1, %ymm2, %ymm3
+	vpsllvd		(%eax), %ymm2, %ymm3
+	vpsllvq		%xmm1, %xmm2, %xmm3
+	vpsllvq		(%eax), %xmm2, %xmm3
+	vpsllvq		%ymm1, %ymm2, %ymm3
+	vpsllvq		(%eax), %ymm2, %ymm3
+	vpsravd		%xmm1, %xmm2, %xmm3
+	vpsravd		(%eax), %xmm2, %xmm3
+	vpsravd		%ymm1, %ymm2, %ymm3
+	vpsravd		(%eax), %ymm2, %ymm3
+	vpsrlvd		%xmm1, %xmm2, %xmm3
+	vpsrlvd		(%eax), %xmm2, %xmm3
+	vpsrlvd		%ymm1, %ymm2, %ymm3
+	vpsrlvd		(%eax), %ymm2, %ymm3
+	vpsrlvq		%xmm1, %xmm2, %xmm3
+	vpsrlvq		(%eax), %xmm2, %xmm3
+	vpsrlvq		%ymm1, %ymm2, %ymm3
+	vpsrlvq		(%eax), %ymm2, %ymm3
+.size libdis_test, [.-libdis_test]
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.sse-3.out b/usr/src/test/util-tests/tests/dis/i386/32.sse-3.out
new file mode 100644
index 0000000000..829f52afdf
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.sse-3.out
@@ -0,0 +1,31 @@
+    libdis_test:      66 0f d0 c8        addsubpd %xmm0,%xmm1
+    libdis_test+0x4:  66 0f d0 12        addsubpd (%edx),%xmm2
+    libdis_test+0x8:  66 0f d0 54 24 23  addsubpd 0x23(%esp),%xmm2
+    libdis_test+0xe:  f2 0f d0 c8        addsubps %xmm0,%xmm1
+    libdis_test+0x12: f2 0f d0 12        addsubps (%edx),%xmm2
+    libdis_test+0x16: f2 0f d0 54 24 23  addsubps 0x23(%esp),%xmm2
+    libdis_test+0x1c: 66 0f 7c c8        haddpd %xmm0,%xmm1
+    libdis_test+0x20: 66 0f 7c 12        haddpd (%edx),%xmm2
+    libdis_test+0x24: 66 0f 7c 54 24 23  haddpd 0x23(%esp),%xmm2
+    libdis_test+0x2a: f2 0f 7c c8        haddps %xmm0,%xmm1
+    libdis_test+0x2e: f2 0f 7c 12        haddps (%edx),%xmm2
+    libdis_test+0x32: f2 0f 7c 54 24 23  haddps 0x23(%esp),%xmm2
+    libdis_test+0x38: 66 0f 7d c8        hsubpd %xmm0,%xmm1
+    libdis_test+0x3c: 66 0f 7d 12        hsubpd (%edx),%xmm2
+    libdis_test+0x40: 66 0f 7d 54 24 23  hsubpd 0x23(%esp),%xmm2
+    libdis_test+0x46: f2 0f 7d c8        hsubps %xmm0,%xmm1
+    libdis_test+0x4a: f2 0f 7d 12        hsubps (%edx),%xmm2
+    libdis_test+0x4e: f2 0f 7d 54 24 23  hsubps 0x23(%esp),%xmm2
+    libdis_test+0x54: f2 0f f0 18        lddqu  (%eax),%xmm3
+    libdis_test+0x58: f2 0f 12 ec        movddup %xmm4,%xmm5
+    libdis_test+0x5c: f2 0f 12 30        movddup (%eax),%xmm6
+    libdis_test+0x60: f2 0f 12 7b 42     movddup 0x42(%ebx),%xmm7
+    libdis_test+0x65: f3 0f 16 ec        movshdup %xmm4,%xmm5
+    libdis_test+0x69: f3 0f 16 30        movshdup (%eax),%xmm6
+    libdis_test+0x6d: f3 0f 16 7b 42     movshdup 0x42(%ebx),%xmm7
+    libdis_test+0x72: f3 0f 12 ec        movsldup %xmm4,%xmm5
+    libdis_test+0x76: f3 0f 12 30        movsldup (%eax),%xmm6
+    libdis_test+0x7a: f3 0f 12 7b 42     movsldup 0x42(%ebx),%xmm7
+    libdis_test+0x7f: df 88 34 12 00 00  fisttp 0x1234(%eax)
+    libdis_test+0x85: db 88 34 12 00 00  tisttpl 0x1234(%eax)
+    libdis_test+0x8b: dd 88 34 12 00 00  fisttpll 0x1234(%eax)
diff --git a/usr/src/test/util-tests/tests/dis/i386/32.sse-3.s b/usr/src/test/util-tests/tests/dis/i386/32.sse-3.s
new file mode 100644
index 0000000000..30fbe88c47
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/32.sse-3.s
@@ -0,0 +1,56 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test SSE 3 related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	addsubpd	%xmm0, %xmm1
+	addsubpd	(%edx), %xmm2
+	addsubpd	0x23(%esp), %xmm2
+	addsubps	%xmm0, %xmm1
+	addsubps	(%edx), %xmm2
+	addsubps	0x23(%esp), %xmm2
+	haddpd		%xmm0, %xmm1
+	haddpd		(%edx), %xmm2
+	haddpd		0x23(%esp), %xmm2
+	haddps		%xmm0, %xmm1
+	haddps		(%edx), %xmm2
+	haddps		0x23(%esp), %xmm2
+	hsubpd		%xmm0, %xmm1
+	hsubpd		(%edx), %xmm2
+	hsubpd		0x23(%esp), %xmm2
+	hsubps		%xmm0, %xmm1
+	hsubps		(%edx), %xmm2
+	hsubps		0x23(%esp), %xmm2
+	lddqu		(%eax), %xmm3
+	movddup		%xmm4, %xmm5
+	movddup		(%eax), %xmm6
+	movddup		0x42(%ebx), %xmm7
+	movshdup	%xmm4, %xmm5
+	movshdup	(%eax), %xmm6
+	movshdup	0x42(%ebx), %xmm7
+	movsldup	%xmm4, %xmm5
+	movsldup	(%eax), %xmm6
+	movsldup	0x42(%ebx), %xmm7
+	fisttp		0x1234(%eax)
+	fisttpl		0x1234(%eax)
+	fisttpll	0x1234(%eax)
+.size libdis_test, [.-libdis_test]
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.out b/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.out
new file mode 100644
index 0000000000..170132e474
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.out
@@ -0,0 +1,64 @@
+    libdis_test:       67 c4 e2 f9 92 14  vgatherdpd %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0x7:   c4 e2 f9 92 14 8d  vgatherdpd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x11:  67 c4 e2 fd 92 14  vgatherdpd %ymm0,(%rax,%xmm1,4),%ymm2
+                       88 
+    libdis_test+0x18:  c4 e2 fd 92 14 8d  vgatherdpd %ymm0,0x42(,%xmm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x22:  67 c4 e2 79 92 14  vgatherdps %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0x29:  c4 e2 79 92 14 8d  vgatherdps %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x33:  67 c4 e2 7d 92 14  vgatherdps %ymm0,(%rax,%ymm1,4),%ymm2
+                       88 
+    libdis_test+0x3a:  c4 e2 7d 92 14 8d  vgatherdps %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x44:  67 c4 e2 f9 93 14  vgatherqpd %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0x4b:  c4 e2 f9 93 14 8d  vgatherqpd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x55:  67 c4 e2 fd 93 14  vgatherqpd %ymm0,(%rax,%ymm1,4),%ymm2
+                       88 
+    libdis_test+0x5c:  c4 e2 fd 93 14 8d  vgatherqpd %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0x66:  67 c4 e2 79 93 14  vgatherqps %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0x6d:  c4 e2 79 93 14 8d  vgatherqps %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x77:  67 c4 e2 7d 93 14  vgatherqps %xmm0,(%rax,%ymm1,4),%xmm2
+                       88 
+    libdis_test+0x7e:  c4 e2 7d 93 14 8d  vgatherqps %xmm0,0x42(,%ymm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x88:  67 c4 e2 79 90 14  vpgatherdd %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0x8f:  c4 e2 79 90 14 8d  vpgatherdd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0x99:  67 c4 e2 7d 90 14  vpgatherdd %ymm0,(%rax,%ymm1,4),%ymm2
+                       88 
+    libdis_test+0xa0:  c4 e2 7d 90 14 8d  vpgatherdd %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0xaa:  67 c4 e2 f9 90 14  vpgatherdq %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0xb1:  c4 e2 f9 90 14 8d  vpgatherdq %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xbb:  67 c4 e2 fd 90 14  vpgatherdq %ymm0,(%rax,%xmm1,4),%ymm2
+                       88 
+    libdis_test+0xc2:  c4 e2 fd 90 14 8d  vpgatherdq %ymm0,0x42(,%xmm1,4),%ymm2
+                       42 00 00 00 
+    libdis_test+0xcc:  67 c4 e2 79 91 14  vpgatherqd %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0xd3:  c4 e2 79 91 14 8d  vpgatherqd %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xdd:  67 c4 e2 7d 91 14  vpgatherqd %xmm0,(%rax,%ymm1,4),%xmm2
+                       88 
+    libdis_test+0xe4:  c4 e2 7d 91 14 8d  vpgatherqd %xmm0,0x42(,%ymm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xee:  67 c4 e2 f9 91 14  vpgatherqq %xmm0,(%rax,%xmm1,4),%xmm2
+                       88 
+    libdis_test+0xf5:  c4 e2 f9 91 14 8d  vpgatherqq %xmm0,0x42(,%xmm1,4),%xmm2
+                       42 00 00 00 
+    libdis_test+0xff:  67 c4 e2 fd 91 14  vpgatherqq %ymm0,(%rax,%ymm1,4),%ymm2
+                       88 
+    libdis_test+0x106: c4 e2 fd 91 14 8d  vpgatherqq %ymm0,0x42(,%ymm1,4),%ymm2
+                       42 00 00 00 
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.s b/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.s
new file mode 100644
index 0000000000..149b2ac8fc
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.avx2-gather.s
@@ -0,0 +1,57 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test AVX2 Gather related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	vgatherdpd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherdpd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherdpd	%ymm0, (%eax, %xmm1, 4), %ymm2
+	vgatherdpd	%ymm0, 0x42(, %xmm1, 4), %ymm2
+	vgatherdps	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherdps	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherdps	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vgatherdps	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vgatherqpd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherqpd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherqpd	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vgatherqpd	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vgatherqps	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vgatherqps	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vgatherqps	%xmm0, (%eax, %ymm1, 4), %xmm2
+	vgatherqps	%xmm0, 0x42(, %ymm1, 4), %xmm2
+	vpgatherdd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherdd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherdd	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vpgatherdd	%ymm0, 0x42(, %ymm1, 4), %ymm2
+	vpgatherdq	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherdq	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherdq	%ymm0, (%eax, %xmm1, 4), %ymm2
+	vpgatherdq	%ymm0, 0x42(, %xmm1, 4), %ymm2
+	vpgatherqd	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherqd	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherqd	%xmm0, (%eax, %ymm1, 4), %xmm2
+	vpgatherqd	%xmm0, 0x42(, %ymm1, 4), %xmm2
+	vpgatherqq	%xmm0, (%eax, %xmm1, 4), %xmm2
+	vpgatherqq	%xmm0, 0x42(, %xmm1, 4), %xmm2
+	vpgatherqq	%ymm0, (%eax, %ymm1, 4), %ymm2
+	vpgatherqq	%ymm0, 0x42(, %ymm1, 4), %ymm2
+.size libdis_test, [.-libdis_test]
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.avx2.out b/usr/src/test/util-tests/tests/dis/i386/64.avx2.out
new file mode 100644
index 0000000000..fe0dacbae1
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.avx2.out
@@ -0,0 +1,59 @@
+    libdis_test:       c4 e2 7d 5a 00     vbroadcasti128 (%rax),%ymm0
+    libdis_test+0x5:   c4 e3 7d 39 dc 23  vextracti128 $0x23,%ymm3,%xmm4
+    libdis_test+0xb:   c4 e3 7d 39 1b 23  vextracti128 $0x23,%ymm3,(%rbx)
+    libdis_test+0x11:  c4 e3 65 38 e2 42  vinserti128 $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x17:  c4 e3 65 38 20 42  vinserti128 $0x42,(%rax),%ymm3,%ymm4
+    libdis_test+0x1d:  c4 e2 7d 2a 00     vmovntdqa (%rax),%ymm0
+    libdis_test+0x22:  c4 e3 61 02 e2 42  vpblendd $0x42,%xmm2,%xmm3,%xmm4
+    libdis_test+0x28:  c4 e3 61 02 20 42  vpblendd $0x42,(%rax),%xmm3,%xmm4
+    libdis_test+0x2e:  c4 e3 65 02 e2 42  vpblendd $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x34:  c4 e3 65 02 20 42  vpblendd $0x42,(%rax),%ymm3,%ymm4
+    libdis_test+0x3a:  c4 e2 79 78 c8     vpbroadcastb %xmm0,%xmm1
+    libdis_test+0x3f:  c4 e2 79 78 10     vpbroadcastb (%rax),%xmm2
+    libdis_test+0x44:  c4 e2 7d 78 c8     vpbroadcastb %xmm0,%ymm1
+    libdis_test+0x49:  c4 e2 7d 78 10     vpbroadcastb (%rax),%ymm2
+    libdis_test+0x4e:  c4 e2 79 58 c8     vpbroadcastd %xmm0,%xmm1
+    libdis_test+0x53:  c4 e2 79 58 10     vpbroadcastd (%rax),%xmm2
+    libdis_test+0x58:  c4 e2 7d 58 c8     vpbroadcastd %xmm0,%ymm1
+    libdis_test+0x5d:  c4 e2 7d 58 10     vpbroadcastd (%rax),%ymm2
+    libdis_test+0x62:  c4 e2 79 59 c8     vpbroadcastq %xmm0,%xmm1
+    libdis_test+0x67:  c4 e2 79 59 10     vpbroadcastq (%rax),%xmm2
+    libdis_test+0x6c:  c4 e2 7d 59 c8     vpbroadcastq %xmm0,%ymm1
+    libdis_test+0x71:  c4 e2 7d 59 10     vpbroadcastq (%rax),%ymm2
+    libdis_test+0x76:  c4 e2 79 79 c8     vpbroadcastw %xmm0,%xmm1
+    libdis_test+0x7b:  c4 e2 79 79 10     vpbroadcastw (%rax),%xmm2
+    libdis_test+0x80:  c4 e2 7d 79 c8     vpbroadcastw %xmm0,%ymm1
+    libdis_test+0x85:  c4 e2 7d 79 10     vpbroadcastw (%rax),%ymm2
+    libdis_test+0x8a:  c4 e3 65 46 e2 42  vperm2i128 $0x42,%ymm2,%ymm3,%ymm4
+    libdis_test+0x90:  c4 e3 65 46 20 42  vperm2i128 $0x42,(%rax),%ymm3,%ymm4
+    libdis_test+0x96:  c4 e2 65 36 e2     vpermd %ymm2,%ymm3,%ymm4
+    libdis_test+0x9b:  c4 e2 65 36 20     vpermd (%rax),%ymm3,%ymm4
+    libdis_test+0xa0:  c4 e3 fd 01 da 42  vpermpd $0x42,%ymm2,%ymm3
+    libdis_test+0xa6:  c4 e3 fd 01 18 42  vpermpd $0x42,(%rax),%ymm3
+    libdis_test+0xac:  c4 e2 6d 16 d9     vpermps %ymm1,%ymm2,%ymm3
+    libdis_test+0xb1:  c4 e2 6d 16 18     vpermps (%rax),%ymm2,%ymm3
+    libdis_test+0xb6:  c4 e3 fd 00 da 42  vpermq $0x42,%ymm2,%ymm3
+    libdis_test+0xbc:  c4 e3 fd 00 18 42  vpermq $0x42,(%rax),%ymm3
+    libdis_test+0xc2:  c4 e2 6d 8c 18     vpmaskmovd (%rax),%ymm2,%ymm3
+    libdis_test+0xc7:  c4 e2 e9 8c 18     vpmaskmovq (%rax),%xmm2,%xmm3
+    libdis_test+0xcc:  c4 e2 ed 8c 18     vpmaskmovq (%rax),%ymm2,%ymm3
+    libdis_test+0xd1:  c4 e2 69 47 d9     vpsllvd %xmm1,%xmm2,%xmm3
+    libdis_test+0xd6:  c4 e2 69 47 18     vpsllvd (%rax),%xmm2,%xmm3
+    libdis_test+0xdb:  c4 e2 6d 47 d9     vpsllvd %ymm1,%ymm2,%ymm3
+    libdis_test+0xe0:  c4 e2 6d 47 18     vpsllvd (%rax),%ymm2,%ymm3
+    libdis_test+0xe5:  c4 e2 e9 47 d9     vpsllvq %xmm1,%xmm2,%xmm3
+    libdis_test+0xea:  c4 e2 e9 47 18     vpsllvq (%rax),%xmm2,%xmm3
+    libdis_test+0xef:  c4 e2 ed 47 d9     vpsllvq %ymm1,%ymm2,%ymm3
+    libdis_test+0xf4:  c4 e2 ed 47 18     vpsllvq (%rax),%ymm2,%ymm3
+    libdis_test+0xf9:  c4 e2 69 46 d9     vpsravd %xmm1,%xmm2,%xmm3
+    libdis_test+0xfe:  c4 e2 69 46 18     vpsravd (%rax),%xmm2,%xmm3
+    libdis_test+0x103: c4 e2 6d 46 d9     vpsravd %ymm1,%ymm2,%ymm3
+    libdis_test+0x108: c4 e2 6d 46 18     vpsravd (%rax),%ymm2,%ymm3
+    libdis_test+0x10d: c4 e2 69 45 d9     vpsrlvd %xmm1,%xmm2,%xmm3
+    libdis_test+0x112: c4 e2 69 45 18     vpsrlvd (%rax),%xmm2,%xmm3
+    libdis_test+0x117: c4 e2 6d 45 d9     vpsrlvd %ymm1,%ymm2,%ymm3
+    libdis_test+0x11c: c4 e2 6d 45 18     vpsrlvd (%rax),%ymm2,%ymm3
+    libdis_test+0x121: c4 e2 e9 45 d9     vpsrlvq %xmm1,%xmm2,%xmm3
+    libdis_test+0x126: c4 e2 e9 45 18     vpsrlvq (%rax),%xmm2,%xmm3
+    libdis_test+0x12b: c4 e2 ed 45 d9     vpsrlvq %ymm1,%ymm2,%ymm3
+    libdis_test+0x130: c4 e2 ed 45 18     vpsrlvq (%rax),%ymm2,%ymm3
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.avx2.s b/usr/src/test/util-tests/tests/dis/i386/64.avx2.s
new file mode 100644
index 0000000000..3f43c49ff4
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.avx2.s
@@ -0,0 +1,84 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test AVX2 related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	vbroadcasti128	(%rax), %ymm0
+	vextracti128	$0x23, %ymm3, %xmm4
+	vextracti128	$0x23, %ymm3, (%rbx)
+	vinserti128	$0x42, %xmm2, %ymm3, %ymm4
+	vinserti128	$0x42, (%rax), %ymm3, %ymm4
+	vmovntdqa	(%rax), %ymm0
+	vpblendd	$0x42, %xmm2, %xmm3, %xmm4
+	vpblendd	$0x42, (%rax), %xmm3, %xmm4
+	vpblendd	$0x42, %ymm2, %ymm3, %ymm4
+	vpblendd	$0x42, (%rax), %ymm3, %ymm4
+	vpbroadcastb	%xmm0, %xmm1
+	vpbroadcastb	(%rax), %xmm2
+	vpbroadcastb	%xmm0, %ymm1
+	vpbroadcastb	(%rax), %ymm2
+	vpbroadcastd	%xmm0, %xmm1
+	vpbroadcastd	(%rax), %xmm2
+	vpbroadcastd	%xmm0, %ymm1
+	vpbroadcastd	(%rax), %ymm2
+	vpbroadcastq	%xmm0, %xmm1
+	vpbroadcastq	(%rax), %xmm2
+	vpbroadcastq	%xmm0, %ymm1
+	vpbroadcastq	(%rax), %ymm2
+	vpbroadcastw	%xmm0, %xmm1
+	vpbroadcastw	(%rax), %xmm2
+	vpbroadcastw	%xmm0, %ymm1
+	vpbroadcastw	(%rax), %ymm2
+	vperm2i128	$0x42, %ymm2, %ymm3, %ymm4
+	vperm2i128	$0x42, (%rax), %ymm3, %ymm4
+	vpermd		%ymm2, %ymm3, %ymm4
+	vpermd		(%rax), %ymm3, %ymm4
+	vpermpd		$0x42, %ymm2, %ymm3
+	vpermpd		$0x42, (%rax), %ymm3
+	vpermps		%ymm1, %ymm2, %ymm3
+	vpermps		(%rax), %ymm2, %ymm3
+	vpermq		$0x42, %ymm2, %ymm3
+	vpermq		$0x42, (%rax), %ymm3
+	vpmaskmovd	(%rax), %ymm2, %ymm3
+	vpmaskmovq	(%rax), %xmm2, %xmm3
+	vpmaskmovq	(%rax), %ymm2, %ymm3
+	vpsllvd		%xmm1, %xmm2, %xmm3
+	vpsllvd		(%rax), %xmm2, %xmm3
+	vpsllvd		%ymm1, %ymm2, %ymm3
+	vpsllvd		(%rax), %ymm2, %ymm3
+	vpsllvq		%xmm1, %xmm2, %xmm3
+	vpsllvq		(%rax), %xmm2, %xmm3
+	vpsllvq		%ymm1, %ymm2, %ymm3
+	vpsllvq		(%rax), %ymm2, %ymm3
+	vpsravd		%xmm1, %xmm2, %xmm3
+	vpsravd		(%rax), %xmm2, %xmm3
+	vpsravd		%ymm1, %ymm2, %ymm3
+	vpsravd		(%rax), %ymm2, %ymm3
+	vpsrlvd		%xmm1, %xmm2, %xmm3
+	vpsrlvd		(%rax), %xmm2, %xmm3
+	vpsrlvd		%ymm1, %ymm2, %ymm3
+	vpsrlvd		(%rax), %ymm2, %ymm3
+	vpsrlvq		%xmm1, %xmm2, %xmm3
+	vpsrlvq		(%rax), %xmm2, %xmm3
+	vpsrlvq		%ymm1, %ymm2, %ymm3
+	vpsrlvq		(%rax), %ymm2, %ymm3
+.size libdis_test, [.-libdis_test]
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.sse-3.out b/usr/src/test/util-tests/tests/dis/i386/64.sse-3.out
new file mode 100644
index 0000000000..21c82e0a65
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.sse-3.out
@@ -0,0 +1,31 @@
+    libdis_test:      66 0f d0 c8        addsubpd %xmm0,%xmm1
+    libdis_test+0x4:  66 0f d0 12        addsubpd (%rdx),%xmm2
+    libdis_test+0x8:  66 0f d0 54 24 23  addsubpd 0x23(%rsp),%xmm2
+    libdis_test+0xe:  f2 0f d0 c8        addsubps %xmm0,%xmm1
+    libdis_test+0x12: f2 0f d0 12        addsubps (%rdx),%xmm2
+    libdis_test+0x16: f2 0f d0 54 24 23  addsubps 0x23(%rsp),%xmm2
+    libdis_test+0x1c: 66 0f 7c c8        haddpd %xmm0,%xmm1
+    libdis_test+0x20: 66 0f 7c 12        haddpd (%rdx),%xmm2
+    libdis_test+0x24: 66 0f 7c 54 24 23  haddpd 0x23(%rsp),%xmm2
+    libdis_test+0x2a: f2 0f 7c c8        haddps %xmm0,%xmm1
+    libdis_test+0x2e: f2 0f 7c 12        haddps (%rdx),%xmm2
+    libdis_test+0x32: f2 0f 7c 54 24 23  haddps 0x23(%rsp),%xmm2
+    libdis_test+0x38: 66 0f 7d c8        hsubpd %xmm0,%xmm1
+    libdis_test+0x3c: 66 0f 7d 12        hsubpd (%rdx),%xmm2
+    libdis_test+0x40: 66 0f 7d 54 24 23  hsubpd 0x23(%rsp),%xmm2
+    libdis_test+0x46: f2 0f 7d c8        hsubps %xmm0,%xmm1
+    libdis_test+0x4a: f2 0f 7d 12        hsubps (%rdx),%xmm2
+    libdis_test+0x4e: f2 0f 7d 54 24 23  hsubps 0x23(%rsp),%xmm2
+    libdis_test+0x54: f2 0f f0 18        lddqu  (%rax),%xmm3
+    libdis_test+0x58: f2 0f 12 ec        movddup %xmm4,%xmm5
+    libdis_test+0x5c: f2 0f 12 30        movddup (%rax),%xmm6
+    libdis_test+0x60: f2 0f 12 7b 42     movddup 0x42(%rbx),%xmm7
+    libdis_test+0x65: f3 0f 16 ec        movshdup %xmm4,%xmm5
+    libdis_test+0x69: f3 0f 16 30        movshdup (%rax),%xmm6
+    libdis_test+0x6d: f3 0f 16 7b 42     movshdup 0x42(%rbx),%xmm7
+    libdis_test+0x72: f3 0f 12 ec        movsldup %xmm4,%xmm5
+    libdis_test+0x76: f3 0f 12 30        movsldup (%rax),%xmm6
+    libdis_test+0x7a: f3 0f 12 7b 42     movsldup 0x42(%rbx),%xmm7
+    libdis_test+0x7f: df 88 34 12 00 00  fisttp 0x1234(%rax)
+    libdis_test+0x85: db 88 34 12 00 00  tisttpl 0x1234(%rax)
+    libdis_test+0x8b: dd 88 34 12 00 00  fisttpll 0x1234(%rax)
diff --git a/usr/src/test/util-tests/tests/dis/i386/64.sse-3.s b/usr/src/test/util-tests/tests/dis/i386/64.sse-3.s
new file mode 100644
index 0000000000..c238b1c355
--- /dev/null
+++ b/usr/src/test/util-tests/tests/dis/i386/64.sse-3.s
@@ -0,0 +1,56 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Test SSE 3 related instructions
+ */
+
+.text
+.align 16
+.globl libdis_test
+.type libdis_test, @function
+libdis_test:
+	addsubpd	%xmm0, %xmm1
+	addsubpd	(%rdx), %xmm2
+	addsubpd	0x23(%rsp), %xmm2
+	addsubps	%xmm0, %xmm1
+	addsubps	(%rdx), %xmm2
+	addsubps	0x23(%rsp), %xmm2
+	haddpd		%xmm0, %xmm1
+	haddpd		(%rdx), %xmm2
+	haddpd		0x23(%rsp), %xmm2
+	haddps		%xmm0, %xmm1
+	haddps		(%rdx), %xmm2
+	haddps		0x23(%rsp), %xmm2
+	hsubpd		%xmm0, %xmm1
+	hsubpd		(%rdx), %xmm2
+	hsubpd		0x23(%rsp), %xmm2
+	hsubps		%xmm0, %xmm1
+	hsubps		(%rdx), %xmm2
+	hsubps		0x23(%rsp), %xmm2
+	lddqu		(%rax), %xmm3
+	movddup		%xmm4, %xmm5
+	movddup		(%rax), %xmm6
+	movddup		0x42(%rbx), %xmm7
+	movshdup	%xmm4, %xmm5
+	movshdup	(%rax), %xmm6
+	movshdup	0x42(%rbx), %xmm7
+	movsldup	%xmm4, %xmm5
+	movsldup	(%rax), %xmm6
+	movsldup	0x42(%rbx), %xmm7
+	fisttp		0x1234(%rax)
+	fisttpl		0x1234(%rax)
+	fisttpll	0x1234(%rax)
+.size libdis_test, [.-libdis_test]
-- 
2.21.0

