commit 42959e4b1f762bda0da8acf96e761ee6a4439e65
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2019-05-09T22:05:50+00:00 (5 months ago)
    
    joyent/node-mooremachine#20 Want shorthand methods for transitions on events and after timeouts
    joyent/node-mooremachine#19 Missing documentation for FSMStateHandle#immediate()

diff --git a/README.adoc b/README.adoc
index c8a82e6..fe67d47 100644
--- a/README.adoc
+++ b/README.adoc
@@ -275,12 +275,41 @@ Parameters:
 
  - `state`: a String, name of state to transition into
 
+### `FSMStateHandle#gotoStateOn(emitter, event, state)`
+
+Transitions the FSM into the given new state when `emitter` emits `event`. The
+registered callback will be removed if the FSM moves out of the current state.
+This is convenient shorthand for writing:
+
+```js
+S.on(emitter, event, function () {
+    S.gotoState(state);
+});
+```
+
+### `FSMStateHandle#gotoStateTimeout(timeoutMs, state)`
+
+Transitions the FSM into the given new state after `timeoutMs` milliseconds
+have elapsed. The timer is cleared if the FSM moves out of the current state.
+This is convenient shorthand for writing:
+
+```js
+S.timeout(timeoutMs, function () {
+    S.gotoState(state);
+});
+```
+
 ### `FSMStateHandle#on(emitter, event, cb)`
 
 Works like `EventEmitter#on`: equivalent to `emitter.on(event, cb)` but
 registers the callback for removal as soon as the FSM moves out of the current
 state.
 
+### `FSMStateHandle#immediate(cb)`
+
+Equivalent to `setImmediate(cb)`, but registers the timer for clearing as soon
+as the FSM moves out of the current state.
+
 ### `FSMStateHandle#timeout(timeoutMs, cb)`
 
 Equivalent to `setTimeout(cb, timeoutMs)`, but registers the timer for clearing
diff --git a/lib/fsm.js b/lib/fsm.js
index 3d71bdc..8db6ab8 100644
--- a/lib/fsm.js
+++ b/lib/fsm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 module.exports = FSM;
@@ -77,6 +77,26 @@ FSMStateHandle.prototype.gotoState = function (state) {
 	return (this.fsh_fsm._gotoState(state));
 };
 
+FSMStateHandle.prototype.gotoStateOn = function (obj, evt, state) {
+	mod_assert.string(state, 'state');
+
+	var self = this;
+
+	self.on(obj, evt, function _gotoStateOn() {
+		self.gotoState(state);
+	});
+};
+
+FSMStateHandle.prototype.gotoStateTimeout = function (timeout, state) {
+	mod_assert.string(state, 'state');
+
+	var self = this;
+
+	self.timeout(timeout, function _gotoStateTimeout() {
+		self.gotoState(state);
+	});
+};
+
 FSMStateHandle.prototype.reset = function () {
 	this.fsh_valid = true;
 	this.fsh_nextState = undefined;
diff --git a/package.json b/package.json
index 379f99a..8f37a97 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mooremachine",
-  "version": "2.2.1",
+  "version": "2.3.0",
   "description": "Moore finite state machines",
   "main": "lib/index.js",
   "scripts": {
diff --git a/test/basic.test.js b/test/basic.test.js
index 33aafac..e8a09e5 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var FSM = require('../lib/fsm');
@@ -404,6 +404,37 @@ test('timeouts', function (t) {
 	}, 70);
 });
 
+test('state transition shorthand', function (t) {
+	var Class = function () {
+		FSM.call(this, 's1');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_s1 = function (S) {
+		S.gotoStateOn(this, 'foo', 's2');
+		S.gotoStateTimeout(50, 's3');
+	};
+	Class.prototype.state_s2 = function (S) {
+		S.gotoStateTimeout(50, 's1');
+	};
+	Class.prototype.state_s3 = function (S) {
+		S.gotoStateOn(this, 'foo', 's1');
+	};
+
+	var c = new Class();
+	t.ok(c.isInState('s1'));
+	c.emit('foo');
+	t.ok(c.isInState('s2'));
+
+	setTimeout(function () {
+		t.ok(c.isInState('s1'));
+
+		setTimeout(function () {
+			t.ok(c.isInState('s3'));
+			t.end();
+		}, 70);
+	}, 70);
+});
+
 test('all state events', function (t) {
 	var Class = function () {
 		this.allStateEvent('foo');
@@ -517,7 +548,9 @@ test('invalid arguments throw', function (t) {
 			'timeout',
 			'callback',
 			'on',
-			'gotoState'
+			'gotoState',
+			'gotoStateOn',
+			'gotoStateTimeout'
 		];
 
 		funcsToThrow.forEach(function (funcName) {
