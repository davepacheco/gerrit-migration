commit df27f1cc8fe5ce96d0493d9b756d1d1d0f59e338 (refs/changes/61/1361/1)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2017-01-28T00:53:38+08:00 (2 years, 8 months ago)
    
    CNAPI-691: unreserved_* attributes on server objects don't change with overprovisioning changes

diff --git a/lib/app.js b/lib/app.js
index 87c26ce..618679c 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -33,6 +33,7 @@ var amqp = require('amqp');
 var buckets = require('./apis/moray').BUCKETS;
 var common = require('./common');
 var createServer = require('./server').createServer;
+var Designation = require('./designation');
 var EffluentLogger = require('effluent-logger');
 var ModelBase = require('./models/base');
 var ModelImage = require('./models/image');
@@ -101,6 +102,8 @@ function App(config) {
     ModelWaitlist.init(self);
     ModelVM.init(self);
 
+    Designation.init(self);
+
     self.statusTimeouts = {};
 }
 
diff --git a/lib/designation.js b/lib/designation.js
new file mode 100644
index 0000000..0d0d7c1
--- /dev/null
+++ b/lib/designation.js
@@ -0,0 +1,167 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Initialize DAPI (the VM allocator), so that its services are available
+ * to various endpoints. It is used both for selecting the server new VMs
+ * should be placed on, and calculating spare capacity on each server.
+ */
+
+var dapiAlloc = require('dapi/lib/allocator');
+var dapiValid = require('dapi/lib/validations');
+
+var ModelVm = require('./models/vm');
+
+var DEFAULT_WEIGHT_CURRENT_PLATFORM = 1;
+var DEFAULT_WEIGHT_NEXT_REBOOT      = 0.5;
+var DEFAULT_WEIGHT_NUM_OWNER_ZONES  = 0;
+var DEFAULT_WEIGHT_UNIFORM_RANDOM   = 0.5;
+var DEFAULT_WEIGHT_UNRESERVED_DISK  = 1;
+var DEFAULT_WEIGHT_UNRESERVED_RAM   = 2;
+
+var DEFAULT_FILTER_HEADNODE      = true;
+var DEFAULT_FILTER_MIN_RESOURCES = true;
+var DEFAULT_FILTER_LARGE_SERVERS = true;
+var DEFAULT_DISABLE_OVERRIDE_OVERPROV = false;
+
+
+function Designation() {}
+
+
+Designation.init = function init(app) {
+    var config = app.config.dapi;
+    Designation.defaults = getDefaults(config.changeDefaults);
+
+    var err = dapiValid.validateDefaults(Designation.defaults);
+    if (err) {
+        throw new Error(err);
+    }
+
+    var opts = {
+        log: config.log
+    };
+
+    if (config.useVmapi) {
+        opts.getVm = function getVm(vmUuid, cb) {
+            ModelVm.getVmViaVmapi({ uuid: vmUuid }, cb);
+        };
+
+        opts.getServerVms = function getServerVms(serverUuid, cb) {
+            var vmOpts = {
+                server_uuid: serverUuid,
+                predicate: {
+                    and: [
+                        { ne: ['state', 'destroyed'] },
+                        { ne: ['state', 'failed'] },
+                        // We include this one since vmapi sometimes provides
+                        // nulls in some of the attributes here, which dapi
+                        // is not expecting. Waitlist tickets still cover
+                        // the existence of these VMs, without this problem.
+                        { ne: ['state', 'provisioning'] }
+                    ]
+                }
+            };
+
+            ModelVm.listVmsViaVmapi(vmOpts, cb);
+        };
+    }
+
+    Designation.allocator = new dapiAlloc(opts, config.allocationDescription,
+                                          Designation.defaults);
+
+    // XXX dapi currently doesn't support disabling getServerVms() per request,
+    // but cnapi provides its own filled `vms` attribute when adding
+    // unreserved_* attributes. When dapi does support disabling the above per
+    // request, this second instance should be removed
+    Designation.allocCapacity = new dapiAlloc({
+        log: config.log
+    }, config.allocationDescription, Designation.defaults);
+
+    Designation.filterHeadnode = Designation.defaults.filter_headnode;
+    Designation.useVmapi = config.useVmapi;
+};
+
+
+Designation.validations = dapiValid;
+
+
+/*
+ * Given a list of server and a series of constraints, return a server
+ * that fulfills all requirements (if possible).
+ */
+Designation.allocate =
+function allocate(servers, vm, img, pkg, tickets, cb) {
+    Designation.allocator.allocate(servers, vm, img, pkg, tickets, cb);
+};
+
+
+/*
+ * Adds the unreserved_ram/disk/cpu attributes to a server object, each
+ * attribute indicating how much spare capacity dapi calculates a server has.
+ */
+Designation.addUnreservedAttr =
+function addUnreservedAttr(server, cb) {
+    Designation.allocator.allocCapacity.serverCapacity(server, cb);
+};
+
+
+/*
+ * Given a server, returns how much spare capacity dapi calculates the server
+ * has. This differs from addUnreservedAttr() in that it returns a separate
+ * description of the spare capacity to the callback.
+ */
+Designation.serverCapacity =
+function serverCapacity(server, cb) {
+    Designation.allocator.serverCapacity(server, cb);
+};
+
+
+function getDefaults(changeDefaults) {
+    var defaults = {};
+
+    function setDefault(attr, deflt) {
+        var opt = changeDefaults[attr];
+
+        if (opt === '' || !opt) {
+            defaults[attr] = deflt;
+        } else if (opt === 'true') {
+            defaults[attr] = true;
+        } else if (opt === 'false') {
+            defaults[attr] = false;
+        } else {
+            defaults[attr] = opt;
+        }
+    }
+
+    setDefault('disable_override_overprovisioning',
+               DEFAULT_DISABLE_OVERRIDE_OVERPROV);
+    setDefault('filter_headnode',      DEFAULT_FILTER_HEADNODE);
+    setDefault('filter_min_resources', DEFAULT_FILTER_MIN_RESOURCES);
+    setDefault('filter_large_servers', DEFAULT_FILTER_LARGE_SERVERS);
+
+    setDefault('weight_current_platform', DEFAULT_WEIGHT_CURRENT_PLATFORM);
+    setDefault('weight_next_reboot',      DEFAULT_WEIGHT_NEXT_REBOOT);
+    setDefault('weight_num_owner_zones',  DEFAULT_WEIGHT_NUM_OWNER_ZONES);
+    setDefault('weight_uniform_random',   DEFAULT_WEIGHT_UNIFORM_RANDOM);
+    setDefault('weight_unreserved_disk',  DEFAULT_WEIGHT_UNRESERVED_DISK);
+    setDefault('weight_unreserved_ram',   DEFAULT_WEIGHT_UNRESERVED_RAM);
+
+    setDefault('server_spread');
+    setDefault('filter_vm_limit');
+    setDefault('filter_docker_min_platform');
+    setDefault('filter_owner_server');
+    setDefault('overprovision_ratio_cpu');
+    setDefault('overprovision_ratio_ram');
+    setDefault('overprovision_ratio_disk');
+
+    return defaults;
+}
+
+exports.Designation = Designation;
diff --git a/lib/endpoints/allocator.js b/lib/endpoints/allocations.js
similarity index 76%
rename from lib/endpoints/allocator.js
rename to lib/endpoints/allocations.js
index 3a43b82..5f99b27 100644
--- a/lib/endpoints/allocator.js
+++ b/lib/endpoints/allocations.js
@@ -19,11 +19,8 @@ var async   = require('async');
 var restify = require('restify');
 var zlib    = require('zlib');
 
-var dapiAlloc = require('dapi/lib/allocator');
-var dapiValid = require('dapi/lib/validations');
-
+var Designation   = require('../designation');
 var ModelServer   = require('../models/server');
-var ModelVm       = require('../models/vm');
 var ModelWaitlist = require('../models/waitlist');
 var validation    = require('../validation/endpoints');
 var common        = require('../common');
@@ -48,59 +45,8 @@ var SERVER_CHUNK_SIZE = 50;
 
 var VOLUMES_MSG = 'Servers containing VMs required for volumes-from';
 
-var DEFAULT_WEIGHT_CURRENT_PLATFORM = 1;
-var DEFAULT_WEIGHT_NEXT_REBOOT      = 0.5;
-var DEFAULT_WEIGHT_NUM_OWNER_ZONES  = 0;
-var DEFAULT_WEIGHT_UNIFORM_RANDOM   = 0.5;
-var DEFAULT_WEIGHT_UNRESERVED_DISK  = 1;
-var DEFAULT_WEIGHT_UNRESERVED_RAM   = 2;
-
-var DEFAULT_FILTER_HEADNODE      = true;
-var DEFAULT_FILTER_MIN_RESOURCES = true;
-var DEFAULT_FILTER_LARGE_SERVERS = true;
-var DEFAULT_DISABLE_OVERRIDE_OVERPROV = false;
-
-
-function Allocator(algoDesc, changeDefaults, useVmapi) {
-    this.defaults = getDefaults(changeDefaults);
-    var err = dapiValid.validateDefaults(this.defaults);
-    if (err) {
-        throw new Error(err);
-    }
-
-    var opts = {
-        log: ModelServer.log
-    };
-
-    if (useVmapi) {
-        opts.getVm = function getVm(vmUuid, cb) {
-            ModelVm.getVmViaVmapi({ uuid: vmUuid }, cb);
-        };
-
-        opts.getServerVms = function getServerVms(serverUuid, cb) {
-            var vmOpts = {
-                server_uuid: serverUuid,
-                predicate: {
-                    and: [
-                        { ne: ['state', 'destroyed'] },
-                        { ne: ['state', 'failed'] },
-                        // We include this one since vmapi sometimes provides
-                        // nulls in some of the attributes here, which dapi
-                        // is not expecting. Waitlist tickets still cover
-                        // the existence of these VMs, without this problem.
-                        { ne: ['state', 'provisioning'] }
-                    ]
-                }
-            };
-
-            ModelVm.listVmsViaVmapi(vmOpts, cb);
-        };
-    }
 
-    this.allocator = new dapiAlloc(opts, algoDesc, this.defaults);
-    this.filterHeadnode = this.defaults.filter_headnode;
-    this.useVmapi = useVmapi;
-}
+function Allocations() {}
 
 
 /* BEGIN JSSTYLED */
@@ -134,9 +80,8 @@ function Allocator(algoDesc, changeDefaults, useVmapi) {
  */
 /* END JSSTYLED */
 
-Allocator.prototype.allocate =
-function handlerAllocatorAllocate(req, res, next) {
-    var self = this;
+Allocations.allocate = function handlerAllocatorAllocate(req, res, next) {
+    var allocator = Designation.allocator;
     var err;
 
     if (validation.ensureParamsValid(req, res, ALLOC_VALIDATION_RULES)) {
@@ -151,14 +96,14 @@ function handlerAllocatorAllocate(req, res, next) {
     var vm      = params.vm;
     var tags    = params.nic_tags;
 
-    err = dapiValid.validateImage(img);
+    err = allocator.validateImage(img);
     if (err) {
         invalid('image', err, res, next);
         return;
     }
 
     if (pkg) {
-        err = dapiValid.validatePackage(pkg);
+        err = allocator.validatePackage(pkg);
         if (err) {
             invalid('package', err, res, next);
             return;
@@ -166,7 +111,7 @@ function handlerAllocatorAllocate(req, res, next) {
     }
 
     var requirements = params.image.requirements;
-    err = dapiValid.validateVmPayload(vm, requirements);
+    err = allocator.validateVmPayload(vm, requirements);
     if (err) {
         invalid('vm', err, res, next);
         return;
@@ -198,8 +143,8 @@ function handlerAllocatorAllocate(req, res, next) {
 
     async.series([
         function getAllUnreservedServers(cb) {
-            getServers(log, servers, false, self.filterHeadnode,
-                       self.useVmapi, function (err2, _details) {
+            getServers(log, servers, false, allocator.filterHeadnode,
+                       allocator.useVmapi, function (err2, _details) {
                 if (err2) {
                     cb(new restify.InternalError(err2.message));
                     return;
@@ -237,7 +182,6 @@ function handlerAllocatorAllocate(req, res, next) {
                 chunks.push(serverDetails.slice(j, j + SERVER_CHUNK_SIZE));
             }
 
-            var allocator = self.allocator;
             function allocChunk() {
                 var serversChunk = chunks.pop();
                 var startTime = new Date();
@@ -254,7 +198,7 @@ function handlerAllocatorAllocate(req, res, next) {
                     log.debug('Allocator run took', deltaTime, 'ms');
 
                     logResults(log, server, serversChunk, req.params, tickets,
-                               self.defaults, stepSummary);
+                               allocator.defaults, stepSummary);
 
                     // after allocation and logging, remove vms hash so the
                     // GC can collect it
@@ -379,10 +323,7 @@ function handlerAllocatorAllocate(req, res, next) {
  */
 /* END JSSTYLED */
 
-Allocator.prototype.capacity =
-function handlerAllocatorCapacity(req, res, next) {
-    var self = this;
-
+Allocations.capacity = function handlerAllocatorCapacity(req, res, next) {
     if (validation.ensureParamsValid(req, res, CAPACITY_VALIDATION_RULES)) {
         next();
         return;
@@ -400,7 +341,7 @@ function handlerAllocatorCapacity(req, res, next) {
         }
     }
 
-    getServers(log, servers, null, null, self.useVmapi,
+    getServers(log, servers, null, null, Designation.useVmapi,
                function (err, serverDetails) {
         if (err) {
             next(new restify.InternalError(err.message));
@@ -410,7 +351,7 @@ function handlerAllocatorCapacity(req, res, next) {
         log.debug({ servers: serverDetails },
                       'Servers found, running capacity');
 
-        self.allocator.serverCapacity(serverDetails,
+        Designation.serverCapacity(serverDetails,
                 function (err2, capacities, reasons) {
             if (err2) {
                 log.error(err2, 'Error while determining capacity');
@@ -434,48 +375,6 @@ function handlerAllocatorCapacity(req, res, next) {
 };
 
 
-function getDefaults(changeDefaults) {
-    var defaults = {};
-
-    function setDefault(attr, deflt) {
-        var opt = changeDefaults[attr];
-
-        if (opt === '' || !opt) {
-            defaults[attr] = deflt;
-        } else if (opt === 'true') {
-            defaults[attr] = true;
-        } else if (opt === 'false') {
-            defaults[attr] = false;
-        } else {
-            defaults[attr] = opt;
-        }
-    }
-
-    setDefault('disable_override_overprovisioning',
-               DEFAULT_DISABLE_OVERRIDE_OVERPROV);
-    setDefault('filter_headnode',      DEFAULT_FILTER_HEADNODE);
-    setDefault('filter_min_resources', DEFAULT_FILTER_MIN_RESOURCES);
-    setDefault('filter_large_servers', DEFAULT_FILTER_LARGE_SERVERS);
-
-    setDefault('weight_current_platform', DEFAULT_WEIGHT_CURRENT_PLATFORM);
-    setDefault('weight_next_reboot',      DEFAULT_WEIGHT_NEXT_REBOOT);
-    setDefault('weight_num_owner_zones',  DEFAULT_WEIGHT_NUM_OWNER_ZONES);
-    setDefault('weight_uniform_random',   DEFAULT_WEIGHT_UNIFORM_RANDOM);
-    setDefault('weight_unreserved_disk',  DEFAULT_WEIGHT_UNRESERVED_DISK);
-    setDefault('weight_unreserved_ram',   DEFAULT_WEIGHT_UNRESERVED_RAM);
-
-    setDefault('server_spread');
-    setDefault('filter_vm_limit');
-    setDefault('filter_docker_min_platform');
-    setDefault('filter_owner_server');
-    setDefault('overprovision_ratio_cpu');
-    setDefault('overprovision_ratio_ram');
-    setDefault('overprovision_ratio_disk');
-
-    return defaults;
-}
-
-
 function getServers(log, serverUuids, reserved, filterHeadnode, useVmapi, cb) {
     var options = {
         wantFinal: true,
@@ -577,11 +476,6 @@ function logResults(log, server, servers, params, tickets, defaults, steps) {
 
 
 function attachTo(http, app) {
-    var config = app.config.dapi;
-    var allocator = new Allocator(config.allocationDescription,
-                                  config.changeDefaults,
-                                  config.useVmapi);
-
     var ensure = require('../endpoints').ensure;
 
     var endpoints = [
@@ -603,7 +497,7 @@ function attachTo(http, app) {
                 connected: ['moray']
             }),
             function (req, res, next) {
-                allocator[path](req, res, next);
+                Allocations[path](req, res, next);
             });
     });
 }
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index f936916..9f7bb0b 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -23,8 +23,8 @@ var util = require('util');
 var VError = require('verror');
 
 var common = require('../common');
-var dapiAlloc = require('dapi/lib/allocator');
 var datasetEndpoints = require('./zfs');
+var Designation = require('../designation');
 var ModelPlatform = require('../models/platform');
 var ModelServer = require('../models/server');
 var validation = require('../validation/endpoints');
@@ -33,15 +33,6 @@ var validation = require('../validation/endpoints');
 function Server() {}
 
 
-Server.init = function () {
-    Server.log = ModelServer.log;
-    var opts = { log: ModelServer.log };
-    var stubDesc = ['pipe', 'identity']; // not actually used here
-    var defaults = {};
-    Server.allocator = new dapiAlloc(opts, stubDesc, defaults);
-};
-
-
 /* BEGIN JSSTYLED */
 /**
  * Returns Servers present in datacenter.
@@ -185,7 +176,7 @@ Server.list = function handlerSeverList(req, res, next) {
 
                 // this mutates s, adding unreserved_cpu, unreserved_ram
                 // and unreserved_disk to eligible servers
-                Server.allocator.serverCapacity(s, function (err) {
+                Designation.serverCapacity(s, function (err) {
                     if (err) {
                         cb(err);
                         return;
@@ -269,7 +260,7 @@ Server.get = function handlerServerGet(req, res, next) {
             req.log.debug('Running capacity');
             // this mutates server, adding unreserved_cpu, unreserved_ram and
             // unreserved_disk to eligible servers
-            Server.allocator.serverCapacity([server], function (err) {
+            Designation.serverCapacity([server], function (err) {
                 if (err) {
                     next(err);
                     return;
@@ -1054,8 +1045,6 @@ Server.nop = function handlerServerNop(req, res, next) {
 
 
 function attachTo(http, app) {
-    Server.init();
-
     var ensure = require('../endpoints').ensure;
 
     // List servers
