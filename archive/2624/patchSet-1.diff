commit 677db6caf7268ba81b9943b3d7d507a653a25bab (refs/changes/24/2624/1)
Author: Tim Kordas <tim.kordas@joyent.com>
Date:   2017-09-20T09:18:40-07:00 (2 years, 1 month ago)
    
    MORAY-418 moray should queue requests when new PG connections fail

diff --git a/lib/pg.js b/lib/pg.js
index 2f2f2ef..8b25b56 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -20,7 +20,9 @@ var libuuid = require('libuuid');
 var once = require('once');
 var pg = require('pg');
 require('pg-parse-float')(pg);
-var pooling = require('pooling');
+
+const mod_cueball = require('cueball');
+var pg_url_parse = require('pg-connection-string').parse
 
 var dtrace = require('./dtrace');
 
@@ -69,7 +71,7 @@ function PGClient(options) {
         CLIENT_ID = 1;
 
     this.client = options.client;
-    this.client.on('error', this._handleClientError.bind(this));
+//    this.client.on('error', this._handleClientError.bind(this));
 
     this.pool = options.pool;
 
@@ -83,7 +85,7 @@ function PGClient(options) {
         moray_id: this._moray_id
     }, true);
 }
-
+util.inherits(PGClient, EventEmitter);
 
 /*
  * The underlying Postgres will emit errors when it has a connection
@@ -253,7 +255,7 @@ PGClient.prototype.begin = function transactionBegin(level, cb) {
     }
     assert.func(cb, 'callback');
 
-    var q = self.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level);
+    var q = self.client.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level);
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -296,7 +298,7 @@ PGClient.prototype.commit = function transactionCommit(cb) {
      */
     self.setTimeout(0);
 
-    var q = self.query('COMMIT');
+    var q = self.client.query('COMMIT');
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -343,7 +345,7 @@ PGClient.prototype.rollback = function transactionRollback(cb) {
         return;
     }
 
-    var q = self.query('ROLLBACK');
+    var q = self.client.query('ROLLBACK');
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -365,8 +367,14 @@ PGClient.prototype.close = function closePGClient() {
         self.client = null;
         self._deadbeef = true;
     });
+    self.emit('close');
 };
 
+// synonym for close (for node-cueball's API).
+PGClient.prototype.destroy = PGClient.prototype.close;
+
+
+
 
 ///--- End Postgres Client Wrapper Class
 
@@ -416,13 +424,20 @@ function pgCreate(opts) {
 
     var log = opts.log;
 
-    function _pgCreate(cb) {
-        cb = once(cb);
-
+    function _pgCreate() {
         var client = new pg.Client({
             connectionString: opts.url,
             keepAlive: true
         });
+        console.log("_pgCreate: client: " + client);
+        var pgc = new PGClient({
+            client: client,
+            connectTimeout: opts.connectTimeout,
+            log: opts.log,
+            pool: opts.pool,
+            queryTimeout: opts.queryTimeout,
+            url: opts.url
+        });
 
         if (opts.connectTimeout > 0) {
             var timer = setTimeout(function () {
@@ -435,25 +450,15 @@ function pgCreate(opts) {
                 }
 
                 var t = opts.connectTimeout;
-                cb(new ConnectTimeoutError(t));
+                pgc.emit('error', new ConnectTimeoutError(t));
             }, opts.connectTimeout);
         }
 
         client.once('connect', function onConnect() {
             clearTimeout(timer);
-
             client.removeAllListeners('error');
-
-            var pgc = new PGClient({
-                client: client,
-                connectTimeout: opts.connectTimeout,
-                log: opts.log,
-                pool: opts.pool,
-                queryTimeout: opts.queryTimeout,
-                url: opts.url
-            });
-
-            cb(null, pgc);
+            console.log("CONNECT");
+            pgc.emit('connect');
         });
 
         client.once('error', function onError(err) {
@@ -464,11 +469,12 @@ function pgCreate(opts) {
 
             if (client.connection && client.connection.stream)
                 client.connection.stream.destroy();
-
-            cb(err);
+            var t = opts.connectTimeout;
+            pgc.emit('error', new ConnectTimeoutError(t));
         });
 
         client.connect();
+        return (pgc);
     }
 
     return (_pgCreate);
@@ -549,6 +555,7 @@ function PGPool(options) {
         queryTimeout: self.queryTimeout,
         url: options.url
     };
+/*
     this.pool = pooling.createPool({
         assert: pgAssert,
         checkInterval: options.checkInterval,
@@ -572,6 +579,32 @@ function PGPool(options) {
     this.pool.on('drain', reEmit.bind(this, 'drain'));
     this.pool.once('end', reEmit.bind(this, 'end'));
     this.pool.once('error', reEmit.bind(this, 'error'));
+*/
+    var resolverInfo = {
+        'defaultPort' : 5432,
+        'backends' : [{'address':'127.0.0.1','port':5432}]
+    };
+    var pgConnInfo = pg_url_parse(options.url);
+    var staticResolver = new mod_cueball.StaticIpResolver(resolverInfo);
+    staticResolver.start();
+
+    this.pool = new mod_cueball.ConnectionPool({
+        domain: pgConnInfo['host'],
+        service: '_postgres._tcp',
+        defaultPort: parseInt(pgConnInfo['port']),
+        spares: 2,
+        maximum: 8,
+        constructor: pgCreate(pgOpts),
+        resolver: staticResolver,
+        recovery: {
+            default: {
+                timeout: 2000,
+                retries: 5,
+                delay: 250,
+                maxDelay: 1000
+            }
+        }
+    });
 }
 util.inherits(PGPool, EventEmitter);
 
@@ -603,15 +636,17 @@ PGPool.prototype.checkout = function checkout(callback) {
     var log = this.log;
 
     log.trace({pool: this.pool}, 'checkout: entered');
-    this.pool.acquire(function (err, client) {
+    //    this.pool.acquire(function (err, client) {
+    this.pool.claim(function (err, h, client) {
         if (err) {
             log.trace(err, 'checkout: failed');
             callback(err);
         } else {
+            console.log("inside checkout callback: " + client);
+            client.handle = h;
             log.trace({
                 client: client
             }, 'checkout: done');
-
             callback(null, client);
         }
     });
@@ -621,7 +656,11 @@ PGPool.prototype.checkout = function checkout(callback) {
 PGPool.prototype.release = function release(client) {
     assert.object(client, 'client');
 
-    this.pool.release(client);
+    //    this.pool.release(client);
+    if (client.handle) {
+        client.handle.release();
+        client.handle = undefined;
+    }
 
     this.log.trace({
         client: client,
diff --git a/package.json b/package.json
index f150d9b..edbfc73 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
         "bunyan-syslog": "0.2.2",
         "clone": "0.1.11",
         "crc": "0.2.1",
+        "cueball": "2.2.9",
         "dtrace-provider": "0.2.8",
         "deep-equal": "0.0.0",
         "fast": "2.2.4",
