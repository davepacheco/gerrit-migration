From 776d6347a972b5dbeda1f2a4124e897420d4e8a6 Mon Sep 17 00:00:00 2001
From: Tim Kordas <tim.kordas@joyent.com>
Date: Wed, 20 Sep 2017 09:18:40 -0700
Subject: [PATCH] MORAY-418 moray should queue requests when new PG connections
 fail MORAY-339 moray needs to use exponential backoff when connection to
 postgresql MORAY-294 suspect moray doesn't honor its connection limit
 properly MORAY-427 moray queuing needs work

---
 lib/manatee.js    |  67 ++++++++----
 lib/pg.js         | 268 +++++++++++++++++++++++++++++++++-------------
 lib/sql.js        |   1 -
 lib/standalone.js |  27 +++--
 package.json      |   2 +
 5 files changed, 260 insertions(+), 105 deletions(-)

diff --git a/lib/manatee.js b/lib/manatee.js
index 451022a..8f97d13 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -16,15 +16,11 @@ var bunyan = require('bunyan');
 var manatee = require('node-manatee');
 var once = require('once');
 var url = require('url');
-var vasync = require('vasync');
-var VError = require('verror').VError;
-var xtend = require('xtend');
 
 var postgresPool = require('./pg');
 
 var NoDatabasePeersError = require('./errors').NoDatabasePeersError;
 
-
 ///--- Globals
 
 var sprintf = util.format;
@@ -59,13 +55,13 @@ var SERIALIZERS = {
     },
     db: function (db) {
         try {
-            var p = db.pool;
+            var s = db.getStats();
 
             return ({
-                available: p.available.length,
-                max: p.max,
-                size: p.resources.length,
-                waiting: p.queue.length
+                available: s.idleConnections,
+                max: db.pool.maxConnections,
+                size: s.totalConnections,
+                waiting: s.waiterCount
             });
         } catch (e) {
             return null;
@@ -111,6 +107,7 @@ function Manatee(options) {
         }
         setImmediate(cb);
     });
+    this._resolver = null;
 
     self._manatee = manatee.createClient(self._manateeCfg);
     self._manatee.on('ready', function () {
@@ -216,11 +213,13 @@ Manatee.prototype.close = function close(cb) {
         this._manatee.close();
         this._manatee = null;
     }
+    if (this._resolver) {
+        this._resolver.stopResolver();
+        this._resolver = null;
+    }
     this.emit('close');
 };
 
-
-
 ///--- Private Methods
 
 
@@ -255,6 +254,7 @@ Manatee.prototype._refresh = function _refresh(topology) {
         assert.object(opts.log, 'options.log');
         assert.object(opts.pgConfig, 'options.pgConfig');
         assert.string(opts.url, 'options.url');
+        assert.object(opts.resolver, 'options.resolver');
 
         log.info({url: opts.url}, '_refresh.createPGPool: create new pg pool');
 
@@ -268,6 +268,7 @@ Manatee.prototype._refresh = function _refresh(topology) {
             role: 'primary',
             queryTimeout: opts.pgConfig.queryTimeout,
             url: opts.url,
+            resolver: opts.resolver,
             collector: opts.collector
         });
 
@@ -284,24 +285,30 @@ Manatee.prototype._refresh = function _refresh(topology) {
         newPrimary = url.format(newPrimary);
     }
 
-    log.info({
+    log.warn({
         currentPrimary: previous ? previous.url : 'none',
         newPrimary: newPrimary ? newPrimary : 'none'
     }, '_refresh: manatee topology updated');
 
     /*
-     * always close the previous if it exists, since by definition the
-     * primary has changed
+     * MORAY-418 We update our node-cueball resolver instead of closing the
+     * previous pool.
      */
     if (previous) {
         log.info({
             oldPrimary: previous.url,
             newPrimary: newPrimary ? newPrimary : 'none'
         }, '_refresh: primary gone, closing');
-        previous.close();
     }
 
     /*
+     * MORAY-418 We update the backend in our node-cueball pool resolver, and
+     * delegate pool-maintenance to the node-cueball internals.
+     *
+     * Before we used node-cueball, we used to re-create the pool from scratch
+     * for *any* config change -- even if the primary stayed the same as
+     * described below:
+     *
      * MORAY-225 We always connect to the new primary regardless of the
      * previous primary. Even if the old primary == new primary, we still will
      * want to connect, since the old primary's connections might be
@@ -311,11 +318,29 @@ Manatee.prototype._refresh = function _refresh(topology) {
         log.info({
             newPrimary: newPrimary
         }, '_refresh: connecting to new primary');
-        self._database = createPGPool({
-            log: log,
-            pgConfig: self._pgConfig,
-            collector: self._collector,
-            url: newPrimary
-        });
+
+        if (previous && self._resolver) {
+            self._resolver.updateBackend(newPrimary);
+        } else {
+            /*
+             * We're using node-cueball in a slightly weird way here:
+             *
+             * Manatee handles our failover (which is non-DNS driven). We only
+             * ever want to have a single-backend in node-cueball's
+             * resolver. And the resolver "backend" data consists of a
+             * PG-Connection-Info string for use by the pooled clients.
+             */
+            self._resolver = new postgresPool.PGResolver();
+            self._resolver.start();
+            self._resolver.updateBackend(newPrimary);
+
+            self._database = createPGPool({
+                log: log,
+                pgConfig: self._pgConfig,
+                url: newPrimary,
+                resolver: self._resolver,
+                collector: self._collector
+            });
+        }
     }
 };
diff --git a/lib/pg.js b/lib/pg.js
index 44c2ae6..1cc45a2 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -8,7 +8,6 @@
  * Copyright 2017, Joyent, Inc.
  */
 
-var crypto = require('crypto');
 var EventEmitter = require('events').EventEmitter;
 var util = require('util');
 
@@ -17,10 +16,11 @@ var bunyan = require('bunyan');
 var clone = require('clone');
 var jsprim = require('jsprim');
 var libuuid = require('libuuid');
-var once = require('once');
 var pg = require('pg');
 require('pg-parse-float')(pg);
-var pooling = require('pooling');
+
+const mod_cueball = require('cueball');
+var pg_url_parse = require('pg-connection-string').parse;
 
 var dtrace = require('./dtrace');
 
@@ -84,7 +84,7 @@ function PGClient(options) {
         moray_id: this._moray_id
     }, true);
 }
-
+util.inherits(PGClient, EventEmitter);
 
 /*
  * The underlying Postgres will emit errors when it has a connection
@@ -118,7 +118,21 @@ PGClient.prototype.setTimeout = function setQueryTimeout(timeout) {
  * client back to the pool.
  */
 PGClient.prototype.release = function clientRelease() {
-    assert.equal(false, this._moray_txn, 'finished transaction');
+    var ok = false;
+    try {
+        ok = pgAssert(this);
+    } catch (e) {
+        ok = false;
+    }
+
+    // We aren't intact, don't release ourselves back to the pool.
+    if (!ok && this.handle) {
+        var handle = this.handle;
+        this.handle = undefined;
+        handle.close();
+        return;
+    }
+
     this.setTimeout(this._defaultTimeout);
     this.pool.release(this);
 };
@@ -194,7 +208,13 @@ PGClient.prototype.query = function clientQuery(sql, args) {
             err: err
         }, 'query: failed');
 
-        done('error', err);
+       /*
+        * node-postgres' client.query interface, when called without a
+        * callback, can emit an error before our caller is listening
+        * properly for errors. Using setImmediate() here is more
+        * straightforward than changing our public-api.
+        */
+        setImmediate(function () { done('error', err); });
     });
 
     if (this._queryTimeout > 0) {
@@ -366,16 +386,78 @@ PGClient.prototype.close = function closePGClient() {
         self.client = null;
         self._deadbeef = true;
     });
+    self.emit('close');
 };
 
+// synonym for close (for node-cueball's API).
+PGClient.prototype.destroy = PGClient.prototype.close;
+
 
 ///--- End Postgres Client Wrapper Class
 
+///--- Resolver-class for giving node-cueball its PG-connect-string
+
+function PGResolver(options) {
+    this.backend = null;
+    this.key = null;
+    this.state = 'idle';
+}
+util.inherits(PGResolver, EventEmitter);
+
+PGResolver.prototype.start = function startResolver() {
+    var oldState = this.state;
+    this.state = 'running';
+    if (oldState !== this.state) {
+        this.emit('updated');
+    }
+};
+
+PGResolver.prototype.stop = function stopResolver() {
+    var oldState = this.state;
+    this.state = 'stopped';
+    if (oldState !== this.state) {
+        this.emit('updated');
+    }
+};
+
+PGResolver.prototype.getState = function getResolverState() {
+    return (this.state);
+};
+
+PGResolver.prototype.isInState = function isInResolverState(testState) {
+    return (this.state === testState);
+};
 
+PGResolver.prototype.list = function listBackends(currentState) {
+    var l = {};
+    if (this.key) {
+        l[this.key] = this.backend;
+    }
+    return l;
+};
+
+// We allow one backend at a time.
+PGResolver.prototype.updateBackend = function updateBackend(backend) {
+    assert.string(backend);
+    if (this.key) {
+        var oldkey = this.key;
+        this.key = null;
+        this.emit('removed', oldkey);
+    }
+
+    this.key = libuuid.create();
+    this.backend = {
+        'url' : backend
+    };
+    this.emit('added', this.key, this.backend);
+    this.emit('updated');
+};
+///--- End PGResolver Class
 
 ///--- Pool Functions
 
 function pgAssert(_pg) {
+    assert.equal(false, _pg._moray_txn, 'finished transaction');
     assert.ok(_pg, 'pg client wrapper');
     assert.ok(_pg.client, 'pg handle');
     assert.ok(_pg.client.connection, 'pg connection');
@@ -387,28 +469,29 @@ function pgAssert(_pg) {
     return (!_pg._moray_had_err);
 }
 
-
-function pgCheck(options) {
-    function _pgCheck(client, cb) {
-        var ok = false;
-        var req = client.query('SELECT NOW() AS when');
-        req.once('error', cb);
-        req.once('row', function (row) {
-            ok = true;
-        });
-        req.once('end', function () {
-            if (!ok) {
-                cb(new Error('no rows received'));
-            } else {
-                cb();
-            }
-        });
-    }
-
-    return (_pgCheck);
+/*
+ * node-cueball's checker interface expects does an "implied claim" on the idle
+ * connection we're checking: it expects us to call either handle.release() for
+ * check-success, or handle.close() for check-failure.
+ */
+function pgCheck(handle, pgc) {
+    var ok = false;
+    var req = pgc.query('SELECT NOW() AS when');
+    req.once('error', function () {
+        handle.close();
+    });
+    req.once('row', function (row) {
+        ok = true;
+    });
+    req.once('end', function () {
+        if (!ok) {
+            handle.close();
+        } else {
+            handle.release();
+        }
+    });
 }
 
-
 function pgCreate(opts) {
     assert.object(opts, 'options');
     assert.object(opts.log, 'options.log');
@@ -417,14 +500,21 @@ function pgCreate(opts) {
 
     var log = opts.log;
 
-    function _pgCreate(cb) {
-        cb = once(cb);
-
+    function _pgCreate(backend) {
         var client = new pg.Client({
-            connectionString: opts.url,
+            connectionString: backend.url,
             keepAlive: true
         });
 
+        var pgc = new PGClient({
+            client: client,
+            connectTimeout: opts.connectTimeout,
+            log: opts.log,
+            pool: opts.pool,
+            queryTimeout: opts.queryTimeout,
+            url: backend.url
+        });
+
         if (opts.connectTimeout > 0) {
             var timer = setTimeout(function () {
                 // do not remove error listener as node may
@@ -436,25 +526,18 @@ function pgCreate(opts) {
                 }
 
                 var t = opts.connectTimeout;
-                cb(new ConnectTimeoutError(t));
+                pgc.emit('error', new ConnectTimeoutError(t));
             }, opts.connectTimeout);
         }
 
         client.once('connect', function onConnect() {
+            // Remove the timeout handlers
             clearTimeout(timer);
-
             client.removeAllListeners('error');
 
-            var pgc = new PGClient({
-                client: client,
-                connectTimeout: opts.connectTimeout,
-                log: opts.log,
-                pool: opts.pool,
-                queryTimeout: opts.queryTimeout,
-                url: opts.url
-            });
-
-            cb(null, pgc);
+            // Rebind our client-connection error-handler
+            client.on('error', pgc._handleClientError.bind(pgc));
+            pgc.emit('connect');
         });
 
         client.once('error', function onError(err) {
@@ -465,11 +548,12 @@ function pgCreate(opts) {
 
             if (client.connection && client.connection.stream)
                 client.connection.stream.destroy();
-
-            cb(err);
+            var t = opts.connectTimeout;
+            pgc.emit('error', new ConnectTimeoutError(t));
         });
 
         client.connect();
+        return (pgc);
     }
 
     return (_pgCreate);
@@ -483,11 +567,11 @@ function pgDestroy(opts) {
 
     return (_pgDestroy);
 }
-
 ///--- End Pool Functions
 
 
 
+
 ///--- API
 
 /**
@@ -522,6 +606,7 @@ function PGPool(options) {
     assert.number(options.checkInterval, 'options.checkInterval');
     assert.number(options.connectTimeout, 'options.connectTimeout');
     assert.object(options.log, 'options.log');
+    assert.object(options.resolver, 'options.resolver');
     assert.number(options.maxConnections, 'options.maxConnections');
     assert.number(options.maxIdleTime, 'options.maxIdleTime');
     assert.number(options.queryTimeout, 'options.queryTimeout');
@@ -575,16 +660,30 @@ function PGPool(options) {
         queryTimeout: self.queryTimeout,
         url: options.url
     };
-    this.pool = pooling.createPool({
-        assert: pgAssert,
-        checkInterval: options.checkInterval,
-        max: options.maxConnections,
-        maxIdleTime: options.maxIdleTime,
-        log: self.log,
-        name: 'moray-pgpool' + (options.role ? '-' + options.role : ''),
-        check: pgCheck(pgOpts),
-        create: pgCreate(pgOpts),
-        destroy: pgDestroy(pgOpts)
+    /*
+     * Our node-cueball connection-pool constructor is built with the smarts
+     * required to connect to the current primary (see pgOpts above).
+     */
+    var pgConnInfo = pg_url_parse(options.url);
+    this.pool = new mod_cueball.ConnectionPool({
+        domain: pgConnInfo['host'],
+        service: '_postgres._tcp',
+        defaultPort: parseInt(pgConnInfo['port'], 10),
+        spares: options.minSpareConnections,
+        maximum: options.maxConnections,
+        constructor: pgCreate(pgOpts),
+        resolver: options.resolver,
+        checkTimeout: options.checkInterval,
+        checker: pgCheck,
+        recovery: {
+            default: {
+                timeout: self.connectTimeout,
+                maxTimeout: 30000,
+                retries: 20,
+                delay: 250,
+                maxDelay: 30000
+            }
+        }
     });
 
     this.url = options.url;
@@ -606,47 +705,52 @@ PGPool.prototype.close = function close(cb) {
     var self = this;
 
     this.log.trace({pool: self.pool}, 'close: entered');
-    this.pool.shutdown(function () {
-        self.removeAllListeners('death');
-        self.removeAllListeners('drain');
-        self.removeAllListeners('end');
-        self.removeAllListeners('error');
 
-        self._deadbeef = true;
+    this.pool.stop();
 
-        self.log.trace({pool: self.pool}, 'close: closed');
-        if (typeof (cb) === 'function')
-            cb();
+    self.removeAllListeners('death');
+    self.removeAllListeners('drain');
+    self.removeAllListeners('end');
+    self.removeAllListeners('error');
 
-        self.emit('close');
-    });
+    self._deadbeef = true;
+
+    self.log.trace({pool: self.pool}, 'close: closed');
+    if (typeof (cb) === 'function')
+        cb();
+
+    self.emit('close');
 };
 
 
 PGPool.prototype.checkout = function checkout(callback) {
     assert.func(callback, 'callback');
-    assert.array(this.pool.queue, 'this.pool.queue');
+    assert.object(this.pool.p_waiters, 'this.pool.p_waiters');
 
     var log = this.log;
 
     log.trace({pool: this.pool}, 'checkout: entered');
 
-    if (this.pool.queue.length >= this.maxQueueLength) {
+    if (this.pool.getStats().waiterCount >= this.maxQueueLength) {
         setImmediate(callback, new NoDatabasePeersError(
             'unable to acquire backend connection due to ' +
             'service being overloaded'));
         return;
     }
 
-    this.pool.acquire(function (err, client) {
+    this.pool.claim(function (err, h, client) {
         if (err) {
             log.trace(err, 'checkout: failed');
             callback(err);
         } else {
+            /*
+             * Save the pool-handle into our client object (callback
+             * will need it for pool management.
+             */
+            client.handle = h;
             log.trace({
                 client: client
             }, 'checkout: done');
-
             callback(null, client);
         }
     });
@@ -656,7 +760,11 @@ PGPool.prototype.checkout = function checkout(callback) {
 PGPool.prototype.release = function release(client) {
     assert.object(client, 'client');
 
-    this.pool.release(client);
+    if (client.handle) {
+        var handle = client.handle;
+        client.handle = undefined;
+        handle.release();
+    }
 
     this.log.trace({
         client: client,
@@ -664,6 +772,10 @@ PGPool.prototype.release = function release(client) {
     }, 'release: done');
 };
 
+PGPool.prototype.getStats = function getStats() {
+    // pass-through to node-cueball
+    return (this.pool.getStats());
+};
 
 PGPool.prototype.toString = function toString() {
     var str = '[object PGPool <' +
@@ -679,12 +791,12 @@ PGPool.prototype.toString = function toString() {
  * Record the connection counts and request queue length.
  */
 PGPool.prototype.getPoolStats = function getPoolStats() {
-    var poolState = this.state();
+    var stats = this.pool.getStats();
 
-    this.openGauge.set(poolState.resources);
-    this.pendingGauge.set(poolState.pending);
-    this.availableGauge.set(poolState.available);
-    this.queueDepthGauge.set(poolState.queue);
+    this.openGauge.set(stats.totalConnections);
+    this.pendingGauge.set(stats.pendingConnections);
+    this.availableGauge.set(stats.idleConnections);
+    this.queueDepthGauge.set(stats.waiterCount);
 };
 
 /*
@@ -755,12 +867,16 @@ module.exports = {
         number('connectTimeout', 1000);
         number('maxIdleTime', 120000);
         number('maxConnections', 5);
+        number('minSpareConnections', 1);
         number('queryTimeout', 0);
         number('maxQueueLength', 2000);
 
         return (new PGPool(opts));
     },
 
+    // Exported for use by manatee/standalone and tests.
+    PGResolver: PGResolver,
+
     PGPool: PGPool,
 
     pgError: pgError,
diff --git a/lib/sql.js b/lib/sql.js
index ea7b77b..f98b6e8 100644
--- a/lib/sql.js
+++ b/lib/sql.js
@@ -10,7 +10,6 @@
 
 var once = require('once');
 
-var pgError = require('./pg').pgError;
 var control = require('./control');
 
 
diff --git a/lib/standalone.js b/lib/standalone.js
index 8ac0f29..2856558 100644
--- a/lib/standalone.js
+++ b/lib/standalone.js
@@ -13,8 +13,6 @@ var util = require('util');
 
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
-var once = require('once');
-var VError = require('verror').VError;
 
 var postgresPool = require('./pg');
 
@@ -39,13 +37,13 @@ var SERIALIZERS = {
         return (obj);
     },
     db: function (db) {
-        var p = db.pool;
+        var s = db.pool.getStat();
 
         return ({
-            available: p.available.length,
-            max: p.max,
-            size: p.resources.length,
-            waiting: p.queue.length
+            available: s.idleConnections,
+            max: db.pool.maxConnections,
+            size: s.totalConnections,
+            waiting: s.waiterCount
         });
     },
     err: bunyan.stdSerializers.err
@@ -65,6 +63,7 @@ function createPGPool(opts) {
     assert.object(opts.pgConfig, 'options.pgConfig');
     assert.object(opts.collector, 'options.collector');
     assert.string(opts.url, 'options.url');
+    assert.object(opts.resolver, 'options.resolver');
 
     var pool = postgresPool.createPool({
         log: opts.log,
@@ -76,6 +75,7 @@ function createPGPool(opts) {
         role: opts.role,
         queryTimeout: opts.pgConfig.queryTimeout,
         url: opts.url,
+        resolver: opts.resolver,
         collector: opts.collector
     });
 
@@ -219,9 +219,21 @@ Standalone.prototype._refresh = function _refresh() {
 
     // If there is an existing connection pool, close it:
     if (self.database && self.database.primary) {
+        if (self.resolver) {
+            self.resolver.stop();
+            self.resolver = null;
+        }
         self.database.primary.close();
     }
 
+    /*
+     * Create a resolver instance for node-cueball to retrieve
+     * postgres-connection strings.
+     */
+    self.resolver = new postgresPool.PGResolver();
+    self.resolver.start();
+    self.resolver.updateBackend(self.url);
+
     // Mock up a topology based on our single PostgreSQL URL:
     self.database = {
         primary: createPGPool({
@@ -229,6 +241,7 @@ Standalone.prototype._refresh = function _refresh() {
             pgConfig: self.pgConfig,
             role: 'primary',
             url: self.url,
+            resolver: self.resolver,
             collector: self.collector
         })
     };
diff --git a/package.json b/package.json
index 9ef41db..4205e6b 100644
--- a/package.json
+++ b/package.json
@@ -13,6 +13,7 @@
         "bunyan-syslog": "0.2.2",
         "clone": "0.1.11",
         "crc": "0.2.1",
+        "cueball": "2.4.0",
         "dtrace-provider": "~0.8",
         "deep-equal": "0.0.0",
         "fast": "2.3.0",
@@ -28,6 +29,7 @@
         "microtime": "0.5.1",
         "once": "1.3.0",
         "pg": "6.2.4",
+        "pg-connection-string": "0.1.3",
         "pg-parse-float": "0.0.1",
         "pooling": "0.4.5",
         "posix-getopt": "1.2.0",
-- 
2.21.0

