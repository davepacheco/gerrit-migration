From ab150fdef87d6e7cf84124d5996603b96674edb2 Mon Sep 17 00:00:00 2001
From: Tim Kordas <tim.kordas@joyent.com>
Date: Wed, 20 Sep 2017 09:18:40 -0700
Subject: [PATCH] MORAY-418 moray should queue requests when new PG connections
 fail

---
 lib/pg.js    | 126 +++++++++++++++++++++++++++++++--------------------
 package.json |   1 +
 2 files changed, 78 insertions(+), 49 deletions(-)

diff --git a/lib/pg.js b/lib/pg.js
index 2f2f2ef..908330c 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -20,7 +20,9 @@ var libuuid = require('libuuid');
 var once = require('once');
 var pg = require('pg');
 require('pg-parse-float')(pg);
-var pooling = require('pooling');
+
+const mod_cueball = require('cueball');
+var pg_url_parse = require('pg-connection-string').parse;
 
 var dtrace = require('./dtrace');
 
@@ -69,7 +71,7 @@ function PGClient(options) {
         CLIENT_ID = 1;
 
     this.client = options.client;
-    this.client.on('error', this._handleClientError.bind(this));
+//    this.client.on('error', this._handleClientError.bind(this));
 
     this.pool = options.pool;
 
@@ -83,7 +85,7 @@ function PGClient(options) {
         moray_id: this._moray_id
     }, true);
 }
-
+util.inherits(PGClient, EventEmitter);
 
 /*
  * The underlying Postgres will emit errors when it has a connection
@@ -253,7 +255,7 @@ PGClient.prototype.begin = function transactionBegin(level, cb) {
     }
     assert.func(cb, 'callback');
 
-    var q = self.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level);
+    var q = self.client.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level);
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -296,7 +298,7 @@ PGClient.prototype.commit = function transactionCommit(cb) {
      */
     self.setTimeout(0);
 
-    var q = self.query('COMMIT');
+    var q = self.client.query('COMMIT');
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -343,7 +345,7 @@ PGClient.prototype.rollback = function transactionRollback(cb) {
         return;
     }
 
-    var q = self.query('ROLLBACK');
+    var q = self.client.query('ROLLBACK');
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -365,8 +367,14 @@ PGClient.prototype.close = function closePGClient() {
         self.client = null;
         self._deadbeef = true;
     });
+    self.emit('close');
 };
 
+// synonym for close (for node-cueball's API).
+PGClient.prototype.destroy = PGClient.prototype.close;
+
+
+
 
 ///--- End Postgres Client Wrapper Class
 
@@ -416,14 +424,21 @@ function pgCreate(opts) {
 
     var log = opts.log;
 
-    function _pgCreate(cb) {
-        cb = once(cb);
-
+    function _pgCreate() {
         var client = new pg.Client({
             connectionString: opts.url,
             keepAlive: true
         });
 
+        var pgc = new PGClient({
+            client: client,
+            connectTimeout: opts.connectTimeout,
+            log: opts.log,
+            pool: opts.pool,
+            queryTimeout: opts.queryTimeout,
+            url: opts.url
+        });
+
         if (opts.connectTimeout > 0) {
             var timer = setTimeout(function () {
                 // do not remove error listener as node may
@@ -435,25 +450,14 @@ function pgCreate(opts) {
                 }
 
                 var t = opts.connectTimeout;
-                cb(new ConnectTimeoutError(t));
+                pgc.emit('error', new ConnectTimeoutError(t));
             }, opts.connectTimeout);
         }
 
         client.once('connect', function onConnect() {
             clearTimeout(timer);
-
             client.removeAllListeners('error');
-
-            var pgc = new PGClient({
-                client: client,
-                connectTimeout: opts.connectTimeout,
-                log: opts.log,
-                pool: opts.pool,
-                queryTimeout: opts.queryTimeout,
-                url: opts.url
-            });
-
-            cb(null, pgc);
+            pgc.emit('connect');
         });
 
         client.once('error', function onError(err) {
@@ -464,11 +468,12 @@ function pgCreate(opts) {
 
             if (client.connection && client.connection.stream)
                 client.connection.stream.destroy();
-
-            cb(err);
+            var t = opts.connectTimeout;
+            pgc.emit('error', new ConnectTimeoutError(t));
         });
 
         client.connect();
+        return (pgc);
     }
 
     return (_pgCreate);
@@ -549,29 +554,43 @@ function PGPool(options) {
         queryTimeout: self.queryTimeout,
         url: options.url
     };
-    this.pool = pooling.createPool({
-        assert: pgAssert,
-        checkInterval: options.checkInterval,
-        max: options.maxConnections,
-        maxIdleTime: options.maxIdleTime,
-        log: self.log,
-        name: 'moray-pgpool' + (options.role ? '-' + options.role : ''),
-        check: pgCheck(pgOpts),
-        create: pgCreate(pgOpts),
-        destroy: pgDestroy(pgOpts)
-    });
 
-    this.url = options.url;
-
-    function reEmit(event) {
-        self.log.debug('pool event: %s', event);
-        self.emit.apply(self, arguments);
-    }
-
-    this.pool.on('death', reEmit.bind(this, 'death'));
-    this.pool.on('drain', reEmit.bind(this, 'drain'));
-    this.pool.once('end', reEmit.bind(this, 'end'));
-    this.pool.once('error', reEmit.bind(this, 'error'));
+    /*
+     * We're using node-cueball in a slightly weird way here:
+     *
+     * Manatee handles our failover (which is non-DNS driven). We only ever
+     * want to have a single-backend in node-cueball's resolver -- and we
+     * never actually connect to the backend provided by the resolver. It is
+     * only used to "disable" node-cueball's service-discovery.
+     *
+     * Our node-cueball connection-pool constructor is built with the smarts
+     * required to connect to the current primary (see pgOpts above).
+     */
+    var resolverInfo = {
+        'defaultPort' : 1,
+        'backends' : [ { 'address':'169.254.1.1', 'port': 1 } ]
+    };
+    var pgConnInfo = pg_url_parse(options.url);
+    var staticResolver = new mod_cueball.StaticIpResolver(resolverInfo);
+    staticResolver.start();
+
+    this.pool = new mod_cueball.ConnectionPool({
+        domain: pgConnInfo['host'],
+        service: '_postgres._tcp',
+        defaultPort: parseInt(pgConnInfo['port'], 10),
+        spares: 2,
+        maximum: 8,
+        constructor: pgCreate(pgOpts),
+        resolver: staticResolver,
+        recovery: {
+            default: {
+                timeout: 2000,
+                retries: 5,
+                delay: 250,
+                maxDelay: 1000
+            }
+        }
+    });
 }
 util.inherits(PGPool, EventEmitter);
 
@@ -603,15 +622,20 @@ PGPool.prototype.checkout = function checkout(callback) {
     var log = this.log;
 
     log.trace({pool: this.pool}, 'checkout: entered');
-    this.pool.acquire(function (err, client) {
+    //    this.pool.acquire(function (err, client) {
+    this.pool.claim(function (err, h, client) {
         if (err) {
             log.trace(err, 'checkout: failed');
             callback(err);
         } else {
+            /*
+             * Save the pool-handle into our client object (callback
+             * will need it for pool management.
+             */
+            client.handle = h;
             log.trace({
                 client: client
             }, 'checkout: done');
-
             callback(null, client);
         }
     });
@@ -621,7 +645,11 @@ PGPool.prototype.checkout = function checkout(callback) {
 PGPool.prototype.release = function release(client) {
     assert.object(client, 'client');
 
-    this.pool.release(client);
+    //    this.pool.release(client);
+    if (client.handle) {
+        client.handle.release();
+        client.handle = undefined;
+    }
 
     this.log.trace({
         client: client,
diff --git a/package.json b/package.json
index f150d9b..edbfc73 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
         "bunyan-syslog": "0.2.2",
         "clone": "0.1.11",
         "crc": "0.2.1",
+        "cueball": "2.2.9",
         "dtrace-provider": "0.2.8",
         "deep-equal": "0.0.0",
         "fast": "2.2.4",
-- 
2.21.0

