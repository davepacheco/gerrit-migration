commit 5c29f784435b6e315f2a0a4c8bc06ec126fc90cb (refs/changes/41/1141/3)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-12-19T23:34:23+00:00 (2 years, 10 months ago)
    
    joyent/node-cueball#62 returning to idle from error fails to emit connectedToBackend
    Reviewed by: David Pacheco <dap@joyent.com>

diff --git a/lib/pool.js b/lib/pool.js
index 655e75d..1ec3503 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -598,14 +598,14 @@ CueBallConnectionPool.prototype.addConnection = function (key) {
 			 */
 			fsm.p_initq_node.remove();
 			delete (fsm.p_initq_node);
+		}
 
-			if (newState === 'idle') {
-				self.emit('connectedToBackend', key, fsm);
+		if (newState === 'idle') {
+			self.emit('connectedToBackend', key, fsm);
 
-				if (self.p_dead[key] !== undefined) {
-					delete (self.p_dead[key]);
-					self.rebalance();
-				}
+			if (self.p_dead[key] !== undefined) {
+				delete (self.p_dead[key]);
+				self.rebalance();
 			}
 		}
 
diff --git a/package.json b/package.json
index 9ed38a0..940ef84 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.2.0",
+  "version": "1.2.1",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index ce8f2c1..a461011 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -381,6 +381,142 @@ mod_tape.test('removing a backend', function (t) {
 	});
 });
 
+mod_tape.test('pool failure', function (t) {
+	connections = [];
+	resolver = undefined;
+
+	recovery.default.retries = 2;
+	var pool = new mod_pool.ConnectionPool({
+		log: log,
+		domain: 'foobar',
+		spares: 2,
+		maximum: 2,
+		constructor: function (backend) {
+			return (new DummyConnection(backend));
+		},
+		recovery: recovery
+	});
+	t.ok(resolver);
+
+	pool.on('stateChanged', function (st) {
+		if (st === 'stopped') {
+			t.end();
+		}
+	});
+
+	resolver.emit('added', 'b1', {});
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		t.deepEqual(counts, { 'b1': 2 });
+
+		index.b1[0].connect();
+		index.b1[0].emit('error', new Error());
+		index.b1[1].connect();
+		index.b1[1].emit('error', new Error());
+
+		setTimeout(function () {
+			t.ok(pool.isInState('running'));
+
+			t.equal(connections.length, 2);
+			summarize();
+			index.b1[1].connect();
+			index.b1[1].emit('error', new Error());
+			index.b1[0].connect();
+
+			setTimeout(function () {
+				t.ok(pool.isInState('running'));
+
+				t.equal(connections.length, 2);
+				summarize();
+				index.b1[0].emit('error', new Error());
+				index.b1[1].emit('error', new Error());
+
+				setTimeout(function () {
+					t.ok(pool.isInState('failed'));
+
+					t.equal(connections.length, 1);
+					summarize();
+					t.deepEqual(counts, { 'b1': 1 });
+
+					index.b1[0].connect();
+
+					setImmediate(function () {
+						t.ok(pool.isInState('running'));
+						pool.stop();
+					});
+				}, 100);
+			}, 100);
+		}, 100);
+	});
+});
+
+mod_tape.test('pool failure / retry race', function (t) {
+	connections = [];
+	resolver = undefined;
+
+	recovery.default.retries = 2;
+	var pool = new mod_pool.ConnectionPool({
+		log: log,
+		domain: 'foobar',
+		spares: 2,
+		maximum: 2,
+		constructor: function (backend) {
+			return (new DummyConnection(backend));
+		},
+		recovery: recovery
+	});
+	t.ok(resolver);
+
+	pool.on('stateChanged', function (st) {
+		if (st === 'stopped') {
+			t.end();
+		}
+	});
+
+	resolver.emit('added', 'b1', {});
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		t.deepEqual(counts, { 'b1': 2 });
+
+		index.b1[0].connect();
+		index.b1[0].emit('error', new Error());
+		index.b1[1].connect();
+		index.b1[1].emit('error', new Error());
+
+		setTimeout(function () {
+			t.ok(pool.isInState('running'));
+
+			t.equal(connections.length, 2);
+			summarize();
+			index.b1[1].connect();
+			index.b1[1].emit('error', new Error());
+			index.b1[0].connect();
+			index.b1[0].emit('error', new Error());
+
+			setTimeout(function () {
+				t.ok(pool.isInState('running'));
+
+				t.equal(connections.length, 2);
+				summarize();
+				index.b1[1].emit('error', new Error());
+				index.b1[0].connect();
+
+				setTimeout(function () {
+					t.ok(pool.isInState('running'));
+
+					t.equal(connections.length, 2);
+					summarize();
+					t.deepEqual(counts, { 'b1': 2 });
+
+					pool.stop();
+				}, 100);
+			}, 100);
+		}, 100);
+	});
+});
+
 mod_tape.test('cleanup sandbox', function (t) {
 	sandbox.restore();
 	t.end();
