commit 12592cbae48a71fe6319a4b19a609f948571166a (refs/changes/44/2244/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2017-07-20T16:13:56-07:00 (2 years, 3 months ago)
    
    VOLAPI-19 All VOLAPI endpoints should error when unsupported input parameters are sent with any request

diff --git a/lib/endpoints/common.js b/lib/endpoints/common.js
new file mode 100644
index 0000000..d5dda0d
--- /dev/null
+++ b/lib/endpoints/common.js
@@ -0,0 +1,56 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+
+function checkMandatoryParamsPresence(params, mandatoryParamNames) {
+    assert.object(params, 'params');
+    assert.arrayOfString(mandatoryParamNames, 'mandatoryParamNames');
+
+    var errs = [];
+    var mandatoryParamIndex;
+    var mandatoryParamName;
+
+    for (mandatoryParamIndex = 0; mandatoryParamIndex <
+        mandatoryParamNames.length; ++mandatoryParamIndex) {
+        mandatoryParamName = mandatoryParamNames[mandatoryParamIndex];
+        if (!params.hasOwnProperty(mandatoryParamName)) {
+            errs.push(new Error('missing mandatory parameter: ' +
+                mandatoryParamName));
+        }
+    }
+
+    return errs;
+}
+
+function checkInvalidParams(params, validParamNames) {
+    assert.object(params, 'params');
+    assert.arrayOfString(validParamNames, 'validParamNames');
+
+    var errs = [];
+    var paramName;
+
+    for (paramName in params) {
+        if (!params.hasOwnProperty(paramName)) {
+            continue;
+        }
+
+        if (validParamNames.indexOf(paramName) === -1) {
+            errs.push(new Error('invalid parameter: ' + paramName));
+        }
+    }
+
+    return errs;
+}
+
+module.exports = {
+    checkInvalidParams: checkInvalidParams,
+    checkMandatoryParamsPresence: checkMandatoryParamsPresence
+};
diff --git a/lib/endpoints/ping.js b/lib/endpoints/ping.js
index a2718d3..5a2fd70 100644
--- a/lib/endpoints/ping.js
+++ b/lib/endpoints/ping.js
@@ -5,25 +5,40 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert');
+var restify = require('restify');
+
+var common = require('./common');
+var errors = require('../errors');
+
+var checkInvalidParams = common.checkInvalidParams;
 
 /*
  * GET /ping
  */
 function ping(req, res, next) {
     var healthy = true;
+    var invalidParamsErrs;
     var response = {};
     var status = 'OK';
+    var VALID_PARAM_NAMES = [];
+
+    invalidParamsErrs = checkInvalidParams(req.params, VALID_PARAM_NAMES);
+
+    if (invalidParamsErrs.length > 0) {
+        next(new errors.ValidationError(invalidParamsErrs));
+        return;
+    }
 
     response.pid = process.pid;
     response.status = status;
     response.healthy = healthy;
 
     res.send(200, response);
-    return next();
+    next();
 }
 
 function mount(config, server) {
@@ -31,7 +46,7 @@ function mount(config, server) {
         path: '/ping',
         name: 'Ping',
         version: '1.0.0'
-    }, ping);
+    }, restify.queryParser(), ping);
 }
 
 module.exports = {
diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index b45f676..c268959 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -17,6 +17,7 @@ var path = require('path');
 var restify = require('restify');
 var vasync = require('vasync');
 
+var common = require('./common');
 var errors = require('../errors');
 var networksValidation = require('../validation/networks');
 var predicateValidation = require('../validation/predicate');
@@ -25,6 +26,9 @@ var volumesModel = require('../models/volumes');
 var volumeUtils = require('../volumes');
 var volumesValidation = require('../validation/volumes');
 
+var checkInvalidParams = common.checkInvalidParams;
+var checkMandatoryParamsPresence = common.checkMandatoryParamsPresence;
+
 var CONFIG;
 var APPLICATION_STATE;
 
@@ -310,6 +314,8 @@ function createVolume(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
+    var invalidParamsErrs;
+    var mandatoryParamsErrs;
     var networkValidationErrs;
     var ownerUuid = req.params.owner_uuid;
     var validationErr;
@@ -318,6 +324,16 @@ function createVolume(req, res, next) {
     var volumeName = req.params.name;
     var volumeUuid = libuuid.create();
 
+    var VALID_PARAM_NAMES = ['name', 'networks', 'owner_uuid', 'size', 'type'];
+    var MANDATORY_PARAM_NAMES = ['networks', 'owner_uuid', 'type'];
+
+    invalidParamsErrs = checkInvalidParams(req.params, VALID_PARAM_NAMES);
+    mandatoryParamsErrs = checkMandatoryParamsPresence(req.params,
+        MANDATORY_PARAM_NAMES);
+
+    validationErrs = validationErrs.concat(mandatoryParamsErrs);
+    validationErrs = validationErrs.concat(invalidParamsErrs);
+
     validationErr = volumesValidation.validateOwnerUuid(req.params.owner_uuid);
     if (validationErr !== undefined) {
         validationErrs.push(validationErr);
@@ -853,14 +869,30 @@ function validateListVolumeSizes(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
+    var invalidParamsErrs;
     var validationErr;
+    var validationErrs = [];
+
+    var VALID_PARAM_NAMES = ['type'];
+
+    invalidParamsErrs = checkInvalidParams(req.params, VALID_PARAM_NAMES);
+    validationErrs = validationErrs.concat(invalidParamsErrs);
 
     // if type=<type> is passed, must be a valid type
     if (req.params.type) {
         validationErr = volumesValidation.validateVolumeType(req.params.type);
+        if (validationErr) {
+            validationErrs.push(validationErr);
+        }
     }
 
-    next(validationErr);
+    if (validationErrs.length > 0) {
+        next(new errors.ValidationError(validationErrs));
+        return;
+    } else {
+        next();
+        return;
+    }
 }
 
 function listVolumeSizes(req, res, next) {
@@ -929,6 +961,37 @@ function renderVolumeSizes(req, res, next) {
     next();
 }
 
+function validateGetVolumeReferences(req, res, next) {
+    var invalidParamsErrs;
+    var mandatoryParamsErrs;
+    var validationErrs = [];
+
+    var VALID_PARAM_NAMES = [
+        'name',
+        'networks',
+        'owner_uuid',
+        'size',
+        'type',
+        'uuid'
+    ];
+    var MANDATORY_PARAM_NAMES = ['networks', 'type'];
+
+    invalidParamsErrs = checkInvalidParams(req.params, VALID_PARAM_NAMES);
+    mandatoryParamsErrs = checkMandatoryParamsPresence(req.params,
+        MANDATORY_PARAM_NAMES);
+
+    validationErrs = validationErrs.concat(mandatoryParamsErrs);
+    validationErrs = validationErrs.concat(invalidParamsErrs);
+
+    if (validationErrs.length > 0) {
+        next(new errors.ValidationError(validationErrs));
+        return;
+    } else {
+        next();
+        return;
+    }
+}
+
 function _getVolumeReferences(volumeObject, options, callback) {
     assert.object(volumeObject, 'volumeObject');
     assert.object(options, 'options');
@@ -979,6 +1042,23 @@ function getVolumeReferences(req, res, next) {
     });
 }
 
+function validateDeleteVolume(req, res, next) {
+    var invalidParamsErrs;
+    var validationErrs = [];
+    var VALID_PARAM_NAMES = ['owner_uuid', 'uuid'];
+
+    invalidParamsErrs = checkInvalidParams(req.params, VALID_PARAM_NAMES);
+    validationErrs = validationErrs.concat(invalidParamsErrs);
+
+    if (validationErrs.length > 0) {
+        next(new errors.ValidationError(validationErrs));
+        return;
+    } else {
+        next();
+        return;
+    }
+}
+
 function deleteVolume(req, res, next) {
     assert.object(req, 'req');
     assert.object(req.loadedVolumeObject, 'req.loadedVolumeObject');
@@ -1225,46 +1305,6 @@ function loadVolumeObject(req, res, next) {
         });
 }
 
-function checkMandatoryParamsPresence(params, mandatoryParamNames) {
-    assert.object(params, 'params');
-    assert.arrayOfString(mandatoryParamNames, 'mandatoryParamNames');
-
-    var errs = [];
-    var mandatoryParamIndex;
-    var mandatoryParamName;
-
-    for (mandatoryParamIndex = 0; mandatoryParamIndex <
-        mandatoryParamNames.length; ++mandatoryParamIndex) {
-        mandatoryParamName = mandatoryParamNames[mandatoryParamIndex];
-        if (!params.hasOwnProperty(mandatoryParamName)) {
-            errs.push(new Error('missing mandatory parameter: ' +
-                mandatoryParamName));
-        }
-    }
-
-    return errs;
-}
-
-function checkInvalidParams(params, validParamNames) {
-    assert.object(params, 'params');
-    assert.arrayOfString(validParamNames, 'validParamNames');
-
-    var errs = [];
-    var paramName;
-
-    for (paramName in params) {
-        if (!params.hasOwnProperty(paramName)) {
-            continue;
-        }
-
-        if (validParamNames.indexOf(paramName) === -1) {
-            errs.push(new Error('invalid parameter: ' + paramName));
-        }
-    }
-
-    return errs;
-}
-
 function validateUpdateVolume(req, res, next) {
     assert.object(req, 'req');
     assert.object(res, 'res');
@@ -1597,7 +1637,8 @@ function mount(config, server, applicationState) {
         path: '/volumes/:uuid',
         name: 'DeleteVolume',
         version: '1.0.0'
-    }, restify.queryParser(), loadVolumeObject, deleteVolume,
+    }, restify.queryParser(), validateDeleteVolume, loadVolumeObject,
+        deleteVolume,
         function renderDeletedVolume(req, res, next) {
             /*
              * It seems we need to explicitly send an empty response for some
@@ -1615,8 +1656,8 @@ function mount(config, server, applicationState) {
          path: '/volumes/:uuid/references',
          name: 'GetVolumeReferences',
          version: '1.0.0'
-     }, restify.queryParser(), loadVolumeObject, getVolumeReferences,
-        renderVolumeReferences, makeSendResponseHandler({
+     }, restify.queryParser(), validateGetVolumeReferences, loadVolumeObject,
+        getVolumeReferences, renderVolumeReferences, makeSendResponseHandler({
             statusCode: 200
         }));
 
diff --git a/test/integration/invalid-parameters.test.js b/test/integration/invalid-parameters.test.js
new file mode 100644
index 0000000..04f963a
--- /dev/null
+++ b/test/integration/invalid-parameters.test.js
@@ -0,0 +1,161 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var test = require('tape');
+var vasync = require('vasync');
+
+var configLoader = require('../../lib/config-loader');
+
+var clientsSetup = require('./lib/clients-setup');
+var resources = require('./lib/resources');
+var testVolumes = require('./lib/volumes');
+
+var CLIENTS;
+
+function confirmBogusParam(t, endpoint, err) {
+    t.ok(err, endpoint + ' w/ bad param should result in an error');
+    t.equal((err ? err.message : ''),
+        'Validation error, causes: Error: invalid parameter: bogus',
+        'expected error due to invalid parameter');
+}
+
+test('setup', function (tt) {
+    tt.test('setup clients', function (t) {
+        clientsSetup.getApiClients(function onClientsSetup(err, clients) {
+            CLIENTS = clients;
+            t.end();
+        });
+    });
+});
+
+test('testing endpoints with invalid parameters', function (tt) {
+
+    tt.test('ping with bogus=true should fail', function (t) {
+        CLIENTS.volapi.get({path: '/ping?bogus=true'}, function onPing(err) {
+            confirmBogusParam(t, 'Ping', err);
+            t.end();
+        });
+    });
+
+    tt.test('creating a volume with bogus=true should fail', function (t) {
+        var volumeParams = {
+            bogus: true,
+            networks: [],
+            type: 'tritonnfs',
+            owner_uuid: '00000000-0000-0000-0000-000000000000'
+        };
+
+        CLIENTS.volapi.createVolume(volumeParams,
+            function onVolumeCreated(err, volume) {
+                confirmBogusParam(t, 'CreateVolume', err);
+                t.end();
+            });
+    });
+
+    tt.test('creating a volume with missing type should fail', function (t) {
+        var errMatch = /Validation error.*missing mandatory parameter: type/;
+        var volumeParams = {
+            networks: [],
+            owner_uuid: '00000000-0000-0000-0000-000000000000'
+        };
+
+        CLIENTS.volapi.createVolume(volumeParams,
+            function onVolumeCreated(err, volume) {
+                t.ok(err, 'volume creation should result in an error');
+                if (err) {
+                    t.ok(errMatch.test(err.message),
+                        'expected error due to missing type, got: '
+                        + err.message);
+                }
+                t.end();
+            });
+    });
+
+    tt.test('listing volumes with bogus=true should fail', function (t) {
+        CLIENTS.volapi.listVolumes({
+            bogus: true
+        }, function onListVolumes(err, req, res, obj) {
+            confirmBogusParam(t, 'ListVolumes', err);
+            t.end();
+        });
+    });
+
+    tt.test('listing volumesizes with bogus=true should fail', function (t) {
+        CLIENTS.volapi.listVolumeSizes({
+            bogus: true
+        }, function onListVolumeSizes(err, req, res, obj) {
+            confirmBogusParam(t, 'ListVolumeSizes', err);
+            t.end();
+        });
+    });
+
+    tt.test('get volume with bogus=true should fail', function (t) {
+        var uuid = '00000000-0000-0000-0000-000000000000';
+
+        CLIENTS.volapi.get({
+            path: '/volumes/' + uuid + '?bogus=true'
+        }, function onGetVolumes(err, req, res, obj) {
+            confirmBogusParam(t, 'GetVolume', err);
+            t.end();
+        });
+    });
+
+    tt.test('get volume references with bogus=true should fail', function (t) {
+        var uuid = '00000000-0000-0000-0000-000000000000';
+
+        CLIENTS.volapi.get({
+            path: '/volumes/' + uuid
+                + '/references?networks=[]&type=tritonnfs&bogus=true'
+        }, function onGetVolumeReferences(err, req, res, obj) {
+            confirmBogusParam(t, 'GetVolumeReferences', err);
+            t.end();
+        });
+    });
+
+    tt.test('get volume references without type should fail', function (t) {
+        var uuid = '00000000-0000-0000-0000-000000000000';
+
+        CLIENTS.volapi.get({
+            path: '/volumes/' + uuid + '/references'
+        }, function onGetVolumeReferences(err, req, res, obj) {
+            var errMatch =
+                /Validation error.*missing mandatory parameter: type/;
+
+            t.ok(err, 'get volume references should result in an error');
+            if (err) {
+                t.ok(errMatch.test(err.message),
+                    'expected error due to missing type, got: ' + err.message);
+            }
+
+            t.end();
+        });
+    });
+
+    tt.test('delete volume with bogus=true should fail', function (t) {
+        var uuid = '00000000-0000-0000-0000-000000000000';
+
+        CLIENTS.volapi.del('/volumes/' + uuid + '?bogus=true',
+            function onDeleteVolume(err, req, res) {
+                confirmBogusParam(t, 'DeleteVolume', err);
+                t.end();
+            });
+    });
+
+    tt.test('update volume with bogus=true should fail', function (t) {
+        var uuid = '00000000-0000-0000-0000-000000000000';
+
+        CLIENTS.volapi.post('/volumes/' + uuid, {bogus: true},
+            function onUpdateVolume(err, req, res) {
+                confirmBogusParam(t, 'UpdateVolume', err);
+                t.end();
+            });
+    });
+});
