commit 7bb271c8d2f346e935395cba4740bf4d676f4fce (refs/changes/21/2321/3)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-08-03T13:12:51-07:00 (2 years, 2 months ago)
    
    joyent/node-mooremachine#15 Want timestamps in fsm state history

diff --git a/lib/fsm.js b/lib/fsm.js
index ea07260..5e11586 100644
--- a/lib/fsm.js
+++ b/lib/fsm.js
@@ -47,6 +47,7 @@ function FSMStateHandle(fsm, state, link) {
 	this.fsh_immediates = [];
 	this.fsh_validTransitions = undefined;
 	this.fsh_nextState = undefined;
+	this.fsh_exitedAt = undefined;
 }
 
 FSMStateHandle.prototype.validTransitions = function (states) {
@@ -71,6 +72,7 @@ FSMStateHandle.prototype.gotoState = function (state) {
 	}
 	this.fsh_valid = false;
 	this.fsh_nextState = state;
+	this.fsh_exitedAt = new Date();
 	return (this.fsh_fsm._gotoState(state));
 };
 
@@ -315,7 +317,7 @@ FSM.prototype._gotoState = function (state) {
 
 	this.fsm_handle = new FSMStateHandle(this, state, this.fsm_handle);
 
-	this.fsm_history.push(state);
+	this.fsm_history.push([state, new Date()]);
 	if (this.fsm_history.length >= 8)
 		this.fsm_history.shift();
 
diff --git a/package.json b/package.json
index ce2b3b0..c17d660 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mooremachine",
-  "version": "2.1.0",
+  "version": "2.2.0",
   "description": "Moore finite state machines",
   "main": "lib/index.js",
   "scripts": {
diff --git a/test/basic.test.js b/test/basic.test.js
index baed932..bb3cd5c 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -59,12 +59,12 @@ test('S.on works, emits stateChanged', function (t) {
 	});
 	t.ok(c.isInState('initial'));
 	t.strictEqual(e.listeners('foo').length, 1);
-	setImmediate(function () {
+	setTimeout(function () {
 		t.ok(c.isInState('next'));
 		t.strictEqual(e.listeners('foo').length, 0);
 		t.deepEqual(history, ['initial', 'next']);
 		t.end();
-	});
+	}, 100);
 });
 
 test('double transition', function (t) {
@@ -494,8 +494,9 @@ test('interacting FSMs', function (t) {
 	t.ok(a.isInState('s1'));
 	t.ok(b.isInState('s1'));
 
-	t.deepEqual(a.fsm_history, ['s1', 's2', 's3', 's1']);
-	t.deepEqual(b.fsm_history, ['s1', 's2', 's3', 's1']);
+	function takeFirst(arr) { return (arr[0]); }
+	t.deepEqual(a.fsm_history.map(takeFirst), ['s1', 's2', 's3', 's1']);
+	t.deepEqual(b.fsm_history.map(takeFirst), ['s1', 's2', 's3', 's1']);
 
 	t.end();
 });
