commit 78af5307d8239e94f4b00b70c3c8b5664ccd3c6c (refs/changes/38/4438/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-06-29T11:22:50+02:00 (1 year, 3 months ago)
    
    TRITON-537 `sdcadm post-setup ha-manatee` fails creating manatee2
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index d876381..826d42a 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -625,7 +625,8 @@ function do_update_other(subcmd, opts, args, cb) {
         function runVmapiMigrations(_, next) {
             self.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'vmapi',
-                state: 'running'
+                state: 'running',
+                owner_uuid: self.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, vms_) {
                 if (vmsErr) {
                     next(vmsErr);
diff --git a/lib/post-setup/ha-binder.js b/lib/post-setup/ha-binder.js
index 29aee6a..7c15b26 100644
--- a/lib/post-setup/ha-binder.js
+++ b/lib/post-setup/ha-binder.js
@@ -162,7 +162,8 @@ function do_ha_binder(subcmd, opts, args, cb) {
             self.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'binder',
                 state: 'running',
-                sort: 'create_timestamp.asc'
+                sort: 'create_timestamp.asc',
+                owner_uuid: self.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, vms_) {
                 if (vmsErr) {
                     next(vmsErr);
@@ -567,7 +568,8 @@ function do_ha_binder(subcmd, opts, args, cb) {
         function getBinderVmsAfterCreation(ctx, next) {
             self.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'binder',
-                state: 'running'
+                state: 'running',
+                owner_uuid: self.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, vms_) {
                 if (vmsErr) {
                     next(vmsErr);
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index aca0f4e..9981ff7 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -442,6 +442,38 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             });
         },
 
+        function getMorayVms(ctx, next) {
+            self.progress('Getting SDC\'s moray vms from VMAPI');
+            self.sdcadm.vmapi.listVms({
+                'tag.smartdc_role': 'moray',
+                state: 'running',
+                owner_uuid: self.sdcadm.config.ufds_admin_uuid
+            }, function (vmsErr, vms_) {
+                if (vmsErr) {
+                    next(vmsErr);
+                    return;
+                }
+                ctx.morayVms = vms_;
+                next();
+            });
+        },
+
+        function getWorkflowVms(ctx, next) {
+            self.progress('Getting SDC\'s workflow vms from VMAPI');
+            self.sdcadm.vmapi.listVms({
+                'tag.smartdc_role': 'workflow',
+                state: 'running',
+                owner_uuid: self.sdcadm.config.ufds_admin_uuid
+            }, function (vmsErr, vms_) {
+                if (vmsErr) {
+                    next(vmsErr);
+                    return;
+                }
+                ctx.wfVms = vms_;
+                next();
+            });
+        },
+
         function getShardState(_, next) {
             self.progress('Getting manatee shard state');
             shared.getShardState({
@@ -629,6 +661,59 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             waitForHA(pri.uuid, manateeAdm21, next);
         },
 
+        function restartMorays(ctx, next) {
+            self.progress('Restarting moray services');
+            vasync.forEachParallel({
+                inputs: ctx.morayVms,
+                func: function restartMoray(vm, nextVM) {
+                    shared.restartRemoteSvc({
+                        server: vm.server_uuid,
+                        zone: vm.uuid,
+                        fmri: '*moray*',
+                        log: self.log
+                    }, nextVM);
+                }
+            }, next);
+        },
+
+        function wait4Morays(ctx, next) {
+            self.progress('Waiting for moray services to be up');
+            shared.wait4Morays({
+                vms: ctx.morayVms,
+                sdcadm: self.sdcadm
+            }, next);
+        },
+
+        function restartWfApis(ctx, next) {
+            self.progress('Restarting wf-api services');
+            vasync.forEachParallel({
+                inputs: ctx.wfVms,
+                func: function restartWfApi(vm, nextVM) {
+                    shared.restartRemoteSvc({
+                        server: vm.server_uuid,
+                        zone: vm.uuid,
+                        fmri: 'wf-api',
+                        log: self.log
+                    }, nextVM);
+                }
+            }, next);
+        },
+
+        function restartWfRunners(ctx, next) {
+            self.progress('Restarting wf-runner services');
+            vasync.forEachParallel({
+                inputs: ctx.wfVms,
+                func: function restartWfRunner(vm, nextVM) {
+                    shared.restartRemoteSvc({
+                        server: vm.server_uuid,
+                        zone: vm.uuid,
+                        fmri: 'wf-runner',
+                        log: self.log
+                    }, nextVM);
+                }
+            }, next);
+        },
+
         // Due to the proces above, moray and all the services connected to
         // moray, need to reconnect. Let's give them one minute:
         function waitForSvcsReconnecting(_, next) {
diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index 3d1dc85..758b631 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -471,7 +471,8 @@ function checkHA(arg, next) {
 
         sdcadm.vmapi.listVms({
             'tag.smartdc_role': arg.change.service.name,
-            state: 'running'
+            state: 'running',
+            owner_uuid: sdcadm.config.ufds_admin_uuid
         }, function (vmsErr, vms) {
             if (vmsErr) {
                 next(new SDCClientError(vmsErr, 'vmapi'));
diff --git a/lib/procedures/update-manatee-v2.js b/lib/procedures/update-manatee-v2.js
index 07c421b..1044b96 100644
--- a/lib/procedures/update-manatee-v2.js
+++ b/lib/procedures/update-manatee-v2.js
@@ -589,7 +589,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 progress('Getting SDC\'s moray vms from VMAPI');
                 sdcadm.vmapi.listVms({
                     'tag.smartdc_role': 'moray',
-                    state: 'running'
+                    state: 'running',
+                    owner_uuid: sdcadm.config.ufds_admin_uuid
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
                         next(vmsErr);
@@ -604,7 +605,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 progress('Getting SDC\'s workflow vms from VMAPI');
                 sdcadm.vmapi.listVms({
                     'tag.smartdc_role': 'workflow',
-                    state: 'running'
+                    state: 'running',
+                    owner_uuid: sdcadm.config.ufds_admin_uuid
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
                         next(vmsErr);
@@ -1129,7 +1131,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                         s.disableRemoteSvc({
                             server: vm.server_uuid,
                             zone: vm.uuid,
-                            fmri: '*moray-202*',
+                            fmri: '*moray*',
                             log: log
                         }, next_);
                     }
@@ -1144,7 +1146,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                         s.enableRemoteSvc({
                             server: vm.server_uuid,
                             zone: vm.uuid,
-                            fmri: '*moray-202*',
+                            fmri: '*moray*',
                             log: log
                         }, next_);
                     }
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index bb84a80..8506a00 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -1282,7 +1282,8 @@ SdcAdm.prototype.getImgsForSvcVms = function getImgsForSvcVms(opts, cb) {
             function _getVms(_, next) {
                 self.vmapi.listVms({
                     'tag.smartdc_role': svc.name,
-                    state: 'active'
+                    state: 'active',
+                    owner_uuid: self.config.ufds_admin_uuid
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
                         next(vmsErr);
diff --git a/lib/steps/binder.js b/lib/steps/binder.js
index 77702a7..36f172d 100644
--- a/lib/steps/binder.js
+++ b/lib/steps/binder.js
@@ -98,7 +98,8 @@ function checkCoreVmInstancesResolvers(arg, cb) {
                 }
                 sdcadm.vmapi.listVms({
                     'tag.smartdc_role': 'binder',
-                    state: 'running'
+                    state: 'running',
+                    owner_uuid: sdcadm.config.ufds_admin_uuid
                 }, function (vmsErr, vms) {
                     if (vmsErr) {
                         next(vmsErr);
diff --git a/lib/steps/zookeeper.js b/lib/steps/zookeeper.js
index 65cf3af..3564a54 100644
--- a/lib/steps/zookeeper.js
+++ b/lib/steps/zookeeper.js
@@ -164,7 +164,8 @@ function backupZKData(opts, callback) {
             }
             sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'binder',
-                state: 'running'
+                state: 'running',
+                owner_uuid: sdcadm.config.ufds_admin_uuid
             }, function vmapiCb(vmsErr, vms) {
                 if (vmsErr) {
                     next(vmsErr);
@@ -441,7 +442,8 @@ function getCoreZkConfig(opts, callback) {
             opts.progress('Getting SDC\'s moray vms from VMAPI');
             opts.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'moray',
-                state: 'running'
+                state: 'running',
+                owner_uuid: opts.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, vms) {
                 if (vmsErr) {
                     next(vmsErr);
@@ -476,7 +478,8 @@ function getCoreZkConfig(opts, callback) {
             opts.progress('Getting SDC\'s manatees vms from VMAPI');
             opts.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'manatee',
-                state: 'running'
+                state: 'running',
+                owner_uuid: opts.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, vms) {
                 if (vmsErr) {
                     next(vmsErr);
