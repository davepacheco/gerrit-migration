commit 2c21ecab1671f3f362cdc64c7e4be44da94c4a45 (refs/changes/36/3236/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2018-01-18T14:54:46-08:00 (1 year, 9 months ago)
    
    TRITON-51 make image creation non-incremental by default

diff --git a/Makefile b/Makefile
index 2af1711..ca018c3 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright 2017 Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -171,6 +171,7 @@ images_test: $(TAP)
 	$(NODE_EXEC) $(TAP) test/images.70.test.js
 	$(NODE_EXEC) $(TAP) test/images.80.test.js
 	$(NODE_EXEC) $(TAP) test/images.test.js
+	$(NODE_EXEC) $(TAP) test/images-create.test.js
 
 keys_test: $(TAP)
 	$(NODE_EXEC) $(TAP) test/keys.test.js
diff --git a/docs/index.md b/docs/index.md
index 1f15fa6..a4423da 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -12,7 +12,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright 2017, Joyent, Inc.
+    Copyright (c) 2018, Joyent, Inc.
 -->
 
 
@@ -39,7 +39,7 @@ documentation does not cover. For more information about Triton visit
 Any content formatted as follows is a command-line example that you can run from
 a shell:
 
-    $ sdc-listmachines
+    $ triton instance list
 
 All other examples and information are formatted like so:
 
@@ -47,7 +47,6 @@ All other examples and information are formatted like so:
 
 
 
-
 # Introduction to CloudAPI
 
 ## What is CloudAPI?
@@ -93,7 +92,6 @@ functionality.
 
 
 
-
 # Getting Started
 
 If you choose to use node-triton or node-smartdc, be aware that they both
@@ -229,14 +227,10 @@ size.  You can get the list of available packages using the
 [ListPackages](#ListPackages) section below for a detailed explanation of these
 commands.
 
-Once you have the package and image ids, to provision a new instance:
+Once you have the package and image names (or IDs), to provision a new instance:
 
     $ triton instance create $image $package
 
-or
-
-    $ sdc-createmachine --image=$image --package=$package
-
 For example:
 
     $ triton instance create 2b683a82-a066-11e3-97ab-2faa44701c5a 64e23114-d502-c171-967f-b0e0cfb2009a
@@ -252,10 +246,6 @@ Retrieve the status of your new instance by:
 
     $ triton instance get $instance_id
 
-or
-
-    $ sdc-getmachine $instance_id
-
 For example:
 
     $ triton instance get 9205af5b-f2c0-ef07-e1f3-94bf1ff8fb93
@@ -754,7 +744,7 @@ communicating with CloudAPI:
 
         curl -s -k -i \
             -H 'Accept: application/json' \
-            -H "accept-version: ~8" \
+            -H "accept-version: ~9||~8||~7" \
             -H "Date: $now" \
             -H "Authorization: Signature keyId=\"/$SDC_ACCOUNT/keys/id_rsa\",algorithm=\"rsa-sha256\" $signature" \
             "$@" "$url"
@@ -847,48 +837,49 @@ range, they can leverage the codes above.
 
 A CloudAPI endpoint has two relevant version values: the code version and the
 "API version". The former includes the full `major.minor.patch` version value
-of the deployed server and, as of CloudAPI v8.3.0, is available in the "Server"
+of the deployed server and, as of CloudAPI v8.3.0, is available in the "server"
 header of all responses:
 
-    Server: cloudapi/8.3.1
+    server: cloudapi/8.3.1
 
-The *API* version is only changed for major versions, e.g. API version "8.0.0"
-is used for all 8.x code versions. (Older CloudAPI v7 would bump the API version
+The *API* version is only changed for major versions, e.g. API version "9.0.0"
+is used for all 9.x code versions. (Older CloudAPI v7 would bump the API version
 at the minor version level.)
 
 All requests to CloudAPI must specify an acceptable API [version
 range](https://github.com/npm/node-semver#ranges) via the 'Accept-Version' (or
 for backward compatibility the 'Api-Version') header. For example:
 
-    Accept-Version: ~8              // accept any 8.x version
-    Accept-Version: 7.0.0           // require exactly this version
-    Accept-Version: ~8||~7          // accept 8.x or 7.x
+    Accept-Version: ~9              // accept any 8.x version
+    Accept-Version: 7.3.0           // require exactly this version
+    Accept-Version: ~9||~8||~7      // accept 9x or 8.x or 7.x
     Accept-Version: *               // the latest version (wild west)
 
 For new applications using CloudAPI SDKs, it is recommended that one explicitly
-accept a particular major version, e.g. `Accept-Version: ~8`, so that
+accept a particular major version, e.g. `Accept-Version: ~9`, so that
 future CloudAPI backward incompatible changes (always done with a *major*
 version bump) don't break your application.
 
 The [`triton` tool](https://github.com/joyent/node-triton) uses
-`Accept-Version: ~8||~7` by default. Users can restrict the API version via the
-`triton --accept-version=RANGE ...` option. The older `sdc-*` tools from
+`Accept-Version: ~9||~8||~7` by default. Users can restrict the API version
+via the `triton --accept-version=RANGE ...` option. The older `sdc-*` tools from
 node-smartdc similarly use `~8||~7` by default, and users can restrict the API
 version via the `SDC_API_VERSION=RANGE` environment variable or the
-`--api-version=RANGE` option to each command.
+`--api-version=RANGE` option to each command. However, overriding the requested
+API version is generally only useful for debugging.
 
 The set of supported *API versions* is given in the ping endpoint:
 
     GET /ping
     accept: application/json
-    accept-version: ~8
+    accept-version: ~9
     ...
 
     HTTPS/1.1 200 OK
-    server: cloudapi/8.3.0
+    server: cloudapi/9.0.0
     content-type: application/json
     ...
-    api-version: 8.0.0
+    api-version: 9.0.0
 
     {
         "ping": "pong",
@@ -898,7 +889,8 @@ The set of supported *API versions* is given in the ping endpoint:
                 "7.1.0",
                 "7.2.0",
                 "7.3.0",
-                "8.0.0"
+                "8.0.0",
+                "9.0.0"
             ]
         }
     }
@@ -908,6 +900,16 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+## 9.0.0
+
+- [Backward incompatible] [CreateImageFromMachine](#CreateImageFromMachine) has
+  changed the default behavior from creating incremental images to creating
+  *non*-incremental images. An optional `incremental` boolean param was added.
+  Use `incremental=true` to get the old behavior.
+
+  Version 6 of the node-triton library has been updated to use the new default.
+  Older node-triton will still get the old behavior.
+
 ## 8.5.0
 
 - CreateMachine and AddNic now accept specifying a [network
@@ -3236,6 +3238,7 @@ state        | String   | The current state of the image. One of 'active', 'unac
 tags         | Object   | An object of key/value pairs that allows clients to categorize images by any given criteria
 eula         | String   | URL of the End User License Agreement (EULA) for the image
 acl          | Array    | Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.
+origin       | UUID     | If the image is incremental, this field is the UUID of the image on which this image is built. An incremental image only includes the difference from the origin image.
 error        | Object   | If `state=="failed"`, resulting from [CreateImageFromMachine](#CreateImageFromMachine) failure, then there may be an error object of the form `{"code": "<string error code>", "message": "<string desc>"}`
 error.code   | String   | A CamelCase string code for this error, e.g. "PrepareImageDidNotRun". See [GetImage](#GetImage) docs for a table of error.code values
 error.message| String   | A short description of the image creation failure
@@ -3343,6 +3346,7 @@ state        | String   | The current state of the image. One of 'active', 'unac
 tags         | Object   | An object of key/value pairs that allows clients to categorize images by any given criteria
 eula         | String   | URL of the End User License Agreement (EULA) for the image
 acl          | Array    | Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.
+origin       | UUID     | If the image is incremental, this field is the UUID of the image on which this image is built. An incremental image only includes the difference from the origin image.
 error        | Object   | If `state=="failed"`, resulting from [CreateImageFromMachine](#CreateImageFromMachine) failure, then there may be an error object of the form `{"code": "<string error code>", "message": "<string desc>"}`
 error.code   | String   | A CamelCase string code for this error, e.g. "PrepareImageDidNotRun". See [GetImage](#GetImage) docs for a table of error.code values
 error.message| String   | A short description of the image creation failure
@@ -3566,13 +3570,14 @@ Create a new custom image from an instance.  The typical process is:
 
 ### Inputs
 
-All inputs except `machine` are image manifest fields as defined by
-[the IMGAPI docs](https://images.joyent.com/docs/#image-manifests).  Note that
-not all fields listed there can be specified here.
+All inputs except `machine` and `incremental` are image manifest fields as
+defined by [the IMGAPI docs](https://images.joyent.com/docs/#image-manifests).
+Note that not all fields listed there are exposed here.
 
 **Field**   | **Type** | **Required?** | **Description**
 ----------- | -------- | ------------- | ---------------
 machine     | UUID     | Yes | The prepared and stopped instance UUID from which the image is to be created
+incremental | Boolean  | No  | Whether the created image is incremental, i.e. only includes the difference from the instance image. See discussion below. (Added in v9.0.0. Defaults to false in v9.0.0 and later. The default was *true* in earlier versions.)
 name        | String   | Yes | The name of the custom image, e.g. "my-image". See the [IMGAPI docs](https://images.joyent.com/docs/#manifest-name) for details
 version     | String   | Yes | The version of the custom image, e.g. "1.0.0". See the [IMGAPI docs](https://images.joyent.com/docs/#manifest-version) for details
 description | String   | No  | The image [description](https://images.joyent.com/docs/#manifest-description)
@@ -3581,6 +3586,26 @@ eula        | String   | No  | The image [eula](https://images.joyent.com/docs/#
 acl         | String   | No  | The image [acl](https://images.joyent.com/docs/#manifest-acl)
 tags        | String   | No  | The image [tags](https://images.joyent.com/docs/#manifest-tags)
 
+
+#### incremental
+
+A Triton image may be incremental or not. An incremental image only includes the
+file system differences from its origin image. This means that the image can
+be smaller. However, it also means that there is a dependency between the
+incremental image and its origin image. This dependency chain adds some
+complexity for [image export](#ExportImage),
+[cross-account image cloning](#CloneImageToAccount), and
+[cross-datacenter image copying](#CopyImageFromDc). As well, because machine
+instances are often [spread across servers](#affinity-rules) in a datacenter,
+the reduced size of incremental images does not always translate to faster
+provisions.
+
+As a result, it is recommended that most users *not* create
+incremental custom images, unless they have a good use case for it. As of
+CloudAPI version 9.0.0, the default behavior is that created custom images
+are non-incremental. In earlier versions, all custom images were incremental.
+To get the old behavior, pass `incremental=true` to this endpoint.
+
 ### Returns
 
 **Field**    | **Type** | **Description**
@@ -3618,11 +3643,7 @@ NotAvailable   | Typically this indicates that image creation is not supported f
 
 ### Example CLI Command
 
-    $ triton image create a44f2b9b-e7af-f548-b0ba-4d9270423f1a my-custom-image 1.0.0
-
-or
-
-    $ sdc-createimagefrommachine --machine=a44f2b9b-e7af-f548-b0ba-4d9270423f1a --name=my-custom-image --imageVersion=1.0.0
+    $ triton image create my-customized-machine my-image 1.0.0
 
 #### Example HTTP Request
 
@@ -3630,37 +3651,27 @@ or
     Authorization: ...
     Host: api.example.com
     Accept: application/json
-    Api-Version: ~8
+    Accept-Version: ~9
 
     {
       "machine": "a44f2b9b-e7af-f548-b0ba-4d9270423f1a",
-      "name": "my-custom-image",
+      "name": "my-image",
       "version": "1.0.0"
     }
 
 #### Example HTTP Response
 
     HTTP/1.1 201 Created
-    x-joyent-jobid: 0b30ef20-d622-436a-9c30-7376ba7d904c
-    Location: /admin/images/b87616a2-7a49-4e02-a71d-2e0ce5a2f037
-    Content-Type: application/json
-    Content-Length: 125
-    Access-Control-Allow-Origin: *
-    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
-    Access-Control-Allow-Methods: GET, HEAD, POST
-    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
-    Connection: Keep-Alive
-    Content-MD5: 2sEZ45LmhRiretMPn5sqVA==
-    Date: Thu, 21 Jan 2016 08:00:09 GMT
-    Server: Joyent Triton 8.0.0
-    Api-Version: 8.0.0
-    Request-Id: 88af23b0-f952-11e2-8f2c-fff0ec35f4ce
-    Response-Time: 160
+    ...
+    server: cloudapi/9.0.0
+    api-version: 9.0.0
+    request-id: 88af23b0-f952-11e2-8f2c-fff0ec35f4ce
+    response-time: 160
 
     {
         "id": "62306cd7-7b8a-c5dd-d44e-8491c83b9974",
-        "name": "my-custom-image",
-        "version": "1.2.3",
+        "name": "my-image",
+        "version": "1.0.0",
         "requirements": {},
         "owner": "47034e57-42d1-0342-b302-00db733e8c8a",
         "public": false,
diff --git a/lib/app.js b/lib/app.js
index 11802d1..95cb12b 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -394,7 +394,7 @@ module.exports = {
         config.name = 'cloudapi/' + version();
         // API version and package.json version are separate; see RFD 68
         // for more details
-        config.version = ['8.0.0', '7.3.0', '7.2.0', '7.1.0', '7.0.0'];
+        config.version = ['9.0.0', '8.0.0', '7.3.0', '7.2.0', '7.1.0', '7.0.0'];
 
         if (config.dc_maint_eta) {
             var d = new Date(config.dc_maint_eta);
diff --git a/lib/common.js b/lib/common.js
new file mode 100644
index 0000000..98a6133
--- /dev/null
+++ b/lib/common.js
@@ -0,0 +1,64 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * Shared common functions for CloudAPI.
+ */
+
+var assert = require('assert-plus');
+var VError = require('verror');
+
+/**
+ * Parse a boolean from a string or boolean parameter (e.g. from an HTTP
+ * query or body param.
+ *
+ *      PARAM           RETURN VALUE
+ *      ------------- | ------------
+ *      true          | true
+ *      false         | false
+ *      'true'        | true
+ *      'false'       | false
+ *      undefined     | false
+ *      anything else | throws an error
+ *
+ * @param {String|Boolean} param - The param string or boolean. It can also be
+ *      `undefined` (for a `false` response) to allow calling code to do:
+ *             var follow = common.boolFromParam(req.query.follow);
+ * @param {String} name - Optional. If given, and if the value is invalid,
+ *      then this name is used in the error message.
+ * @returns {Boolean}
+ */
+function boolFromParam(param, name) {
+    assert.optionalString(name, 'name');
+
+    switch (param) {
+        case true:
+            return true;
+        case false:
+            return false;
+        case 'true':
+            return true;
+        case 'false':
+            return false;
+        case undefined:
+            return false;
+        default:
+            if (name) {
+                throw new VError('%s param is not a valid boolean: %j',
+                    name, param);
+            } else {
+                throw new VError('param is not a valid boolean: %j', param);
+            }
+    }
+}
+
+module.exports = {
+    boolFromParam: boolFromParam
+};
diff --git a/lib/datasets.js b/lib/datasets.js
index 1a0520c..883c581 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -5,24 +5,9 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-//
-// Depending on the end-point we're hitting, we have different load options:
-//
-// LIST /images || POST /machines: load only active images, we don't
-// want any user creating a new machine with a disabled dataset.
-//
-// GET /images/:image_uuid || GET|POST /machines/:uuid: load by UUID
-// we'll try to skip loading all the images when possible.
-//
-// LIST /machines => load Active and, additionally, load deactivated too, given
-// a machine could have been provisioned in the past using an Image which has
-// been deactivated since then
-
-
-var p = console.log;
 var assert = require('assert-plus');
 var util = require('util');
 var semver = require('semver');
@@ -31,7 +16,10 @@ var restify = require('restify'),
     InvalidArgumentError = restify.InvalidArgumentError,
     ResourceNotFoundError = restify.ResourceNotFoundError;
 
+var common = require('./common');
 var resources = require('./resources');
+
+
 // --- Globals
 
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
@@ -348,6 +336,16 @@ function curImg(req, cb) {
 /**
  * Load `req.datasets` and `req.dataset` as appropriate for the endpoint
  * and query params.
+ *
+ * LIST /images || POST /machines: load only active images, we don't
+ * want any user creating a new machine with a disabled dataset.
+ *
+ * GET /images/:image_uuid || GET|POST /machines/:uuid: load by UUID
+ * we'll try to skip loading all the images when possible.
+ *
+ * LIST /machines => load Active and, additionally, load deactivated too, given
+ * a machine could have been provisioned in the past using an Image which has
+ * been deactivated since then
  */
 function loadDatasets(req, res, next) {
     var pathname = req.getUrl().pathname;
@@ -439,16 +437,16 @@ function get(req, res, next) {
 function create(req, res, next) {
     var log = req.log;
     if (!req.params.machine) {
-        return next(new MissingParameterError(
-                    'machine is a required argument'));
+        next(new MissingParameterError('machine is a required argument'));
+        return;
     }
     if (!req.params.name) {
-        return next(new MissingParameterError(
-                    'Image name is a required argument'));
+        next(new MissingParameterError('Image name is a required argument'));
+        return;
     }
     if (!req.params.version) {
-        return next(new MissingParameterError(
-                    'Image version is a required argument'));
+        next(new MissingParameterError('Image version is a required argument'));
+        return;
     }
 
     var data = {
@@ -470,19 +468,37 @@ function create(req, res, next) {
         }
     });
 
-    var vm_uuid = req.params.machine;
+    /*
+     * In CloudAPI v9 and later, we accept an `incremental` boolean param,
+     * and by default `incremental=false`. In CloudAPI versions before that,
+     * `incremental=true`.
+     */
+    var incremental;
+    var apiVer = req.getVersion();
+    if (semver.satisfies('9.0.0', apiVer) || semver.ltr('9.0.0', apiVer)) {
+        try {
+            incremental = common.boolFromParam(req.params.incremental,
+                'incremental');
+        } catch (incrementalErr) {
+            next(new InvalidArgumentError(incrementalErr));
+            return;
+        }
+    } else {
+        incremental = true;
+    }
 
     var createOpts = {
-        vm_uuid: vm_uuid,
-        incremental: true,
+        vm_uuid: req.params.machine,
+        incremental: incremental,
         headers: {
             'x-request-id': req.getId()
         }
     };
-    return req.sdc.imgapi.createImageFromVm(data, createOpts, req.account.uuid,
+    req.sdc.imgapi.createImageFromVm(data, createOpts, req.account.uuid,
             function (err, job, result) {
         if (err) {
-            return next(errFromImgapiErr(err));
+            next(errFromImgapiErr(err));
+            return;
         }
 
         data.uuid = job.image_uuid;
@@ -503,7 +519,7 @@ function create(req, res, next) {
         res.setHeader('x-joyent-jobid', job.job_uuid);
         res.header('Location', locat);
         res.send(201, translate(req, data));
-        return next();
+        next();
     });
 }
 
@@ -642,7 +658,7 @@ function mount(server, before, config) {
     server.post({
         path: '/:account/images',
         name: 'CreateImageFromMachine',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, create, resources.updateResource);
 
     server.post({
diff --git a/test/common.js b/test/common.js
index 51192f7..58167f3 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -22,6 +22,7 @@ var libuuid = require('libuuid');
 var util = require('util');
 var fs = require('fs');
 var vasync = require('vasync');
+var VError = require('verror');
 
 var UFDS = require('ufds');
 var VMAPI = require('sdc-clients').VMAPI;
@@ -1048,9 +1049,80 @@ function napiDeleteNicTagByName(opts, cb) {
     });
 }
 
-// --- Library
 
 
+/**
+ * Wait for an image to go one of a set of specific states.
+ *
+ * @param {Object} options
+ *      - {Object} imgapiClient
+ *      - {String} id - image UUID
+ *      - {Array of String} states - desired state
+ *      - {Number} interval (optional) - Time in ms to poll. Default is 1000ms.
+ * @param {Function} cb - `function (err, image, res)`
+ *      Called when state is reached or on error.
+ *
+ * Dev Note: Adapted from waitForImageStates from node-triton/lib/cloudapi2.js.
+ */
+function _waitForImageStates(opts, cb) {
+    assert.object(opts.imgapiClient, 'opts.imgapiClient');
+    assert.uuid(opts.id, 'opts.id');
+    assert.arrayOfString(opts.states, 'opts.states');
+    assert.optionalNumber(opts.interval, 'opts.interval');
+    assert.func(cb, 'cb');
+    var interval = (opts.interval === undefined ? 1000 : opts.interval);
+    assert.ok(interval > 0, 'interval must be a positive number');
+
+    function poll() {
+        opts.imgapiClient.getImage(opts.id, function (err, img, res) {
+            if (err) {
+                cb(err, null, res);
+                return;
+            }
+            if (opts.states.indexOf(img.state) !== -1) {
+                cb(null, img, res);
+                return;
+            }
+            setTimeout(poll, interval);
+        });
+    }
+
+    setImmediate(poll);
+}
+
+/*
+ * Wait for the given image ID to transition to 'active' or 'failed'. An
+ * `err` is returned if it goes to 'failed'.
+ */
+function waitForImageCreate(client, imgId, cb) {
+    assert.object(client, 'client');
+    assert.uuid(imgId, 'imgId');
+    assert.func(cb, 'cb');
+
+    _waitForImageStates({
+        imgapiClient: client.imgapi,
+        id: imgId,
+        states: ['active', 'failed']
+    }, function (err, img) {
+        if (err) {
+            cb(err);
+            return;
+        } else if (img.state === 'active') {
+            cb(null, img);
+        } else {
+            assert.equal(img.state, 'failed');
+            var failedErr = new VError('failed to create image %s (%s@%s)%s',
+                img.id, img.name, img.version,
+                (img.error ? util.format(': (%s) %s',
+                    img.error.code, img.error.message): ''));
+            cb(failedErr, img);
+        }
+    });
+}
+
+
+// --- Library
+
 module.exports = {
     setup: setup,
     teardown: teardown,
@@ -1080,6 +1152,8 @@ module.exports = {
     napiDeleteNetworkByName: napiDeleteNetworkByName,
     napiDeletePoolByName: napiDeletePoolByName,
 
+    waitForImageCreate: waitForImageCreate,
+
     sdc_128_package: SDC_128_PACKAGE,
 
     getCfg: function () {
diff --git a/test/images-create.test.js b/test/images-create.test.js
new file mode 100644
index 0000000..b624975
--- /dev/null
+++ b/test/images-create.test.js
@@ -0,0 +1,241 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var test = require('tape').test;
+var libuuid = require('libuuid');
+var util = require('util');
+var vasync = require('vasync');
+
+var common = require('./common');
+var machinesCommon = require('./machines/common');
+var waitForJob = machinesCommon.waitForJob; // XXX
+
+
+// --- Globals
+
+var format = util.format;
+
+var CLIENTS;
+var CLIENT;
+var SERVER;
+
+// --- Helpers
+
+// --- Tests
+
+test('image creation', function (tt) {
+    var testInstId;
+    var testOriginId;
+    var testNamePrefix = 'sdccloudapitest_images_create_'
+        + libuuid.create().split('-')[0] + '_';
+    var testImg1Id;
+    var testImg2Id;
+    var testImg3Id;
+
+    tt.test('  setup clients', function (t) {
+        common.setup({clientApiTestVersion: '~9'},
+                function (_, clients, server) {
+            CLIENTS = clients;
+            CLIENT  = clients.user;
+            SERVER  = server;
+
+            t.end();
+        });
+    });
+
+    tt.test('  setup test inst', function (t) {
+        vasync.pipeline({arg: {}, funcs: [
+            function testOriginImg(ctx, next) {
+                common.getTestImage(CLIENT, function (err, img) {
+                    t.ifError(err, 'getTestImage');
+                    ctx.img = img;
+                    testOriginId = img.id;
+                    next(err);
+                });
+            },
+
+            function testServer(ctx, next) {
+                common.getTestServer(CLIENT, function (err, server) {
+                    t.ifError(err, 'getTestServer');
+                    ctx.server = server;
+                    next(err);
+                });
+            },
+
+            function createInst(ctx, next) {
+                var createOpts = {
+                    image: ctx.img.id,
+                    package: common.sdc_128_package.name,
+                    name: testNamePrefix + 'inst',
+                    server_uuid: ctx.server.uuid
+                };
+                machinesCommon.createMachine(t, CLIENT, createOpts,
+                        function (err, instId) {
+                    t.ifError(err, 'createTestInst');
+                    ctx.instId = instId;
+                    t.ok(instId, 'test inst id: ' + instId);
+                    next(err);
+                });
+            },
+
+            function waitForInst(ctx, next) {
+                machinesCommon.waitForRunningMachine(CLIENT, ctx.instId,
+                        function (err) {
+                    t.ifError(err, 'waitForRunningMachine ' + ctx.instId);
+                    if (!err) {
+                        testInstId = ctx.instId;
+                    }
+                    next(err);
+                });
+            }
+        ]}, function doneSetupTestInst(err) {
+            t.ifError(err, 'setup test inst');
+            t.end();
+        });
+    });
+
+    // As of CloudAPI v9 this should default to a non-incremental build.
+    tt.test('  create image1 (latest API version)', function (t) {
+        var name = testNamePrefix + 'image1';
+        var createOpts = {
+            machine: testInstId,
+            name: name,
+            version: '1.0.0'
+        };
+        CLIENT.post('/my/images', createOpts, function (err, req, res, img) {
+            t.ifError(err, 'create image ' + name + ' err');
+            t.ok(img.name, 'image name: ' + img.name);
+            t.ok(img.id, 'image id: ' + img.id);
+            testImg1Id = img.id;
+            t.end();
+        });
+    });
+    tt.test('  wait for and check image1', function (t) {
+        common.waitForImageCreate(CLIENT, testImg1Id, function (err, img) {
+            t.ifError(err, 'wait for image1 ' + testImg1Id + ' create');
+            t.ok(img, 'created image manifest');
+            if (img) {
+                t.equal(img.state, 'active', format(
+                    'image1 %s state is active: %s', testImg1Id, img.state));
+                t.equal(img.origin, undefined, format(
+                    'image1 %s has *no* origin', testImg1Id));
+            }
+            t.end();
+        });
+    });
+
+    // With ?incremental=true we should get an incremental image.
+    tt.test('  create image2 (specify incremental)', function (t) {
+        var name = testNamePrefix + 'image2';
+        var createOpts = {
+            machine: testInstId,
+            name: name,
+            version: '1.0.0',
+            incremental: true
+        };
+        CLIENT.post('/my/images', createOpts, function (err, req, res, img) {
+            t.ifError(err, 'create image ' + name + ' err');
+            t.ok(img.name, 'image name: ' + img.name);
+            t.ok(img.id, 'image id: ' + img.id);
+            testImg2Id = img.id;
+            t.end();
+        });
+    });
+    tt.test('  wait for and check image2', function (t) {
+        common.waitForImageCreate(CLIENT, testImg2Id, function (err, img) {
+            t.ifError(err, 'wait for image2 ' + testImg2Id + ' create');
+            t.ok(img, 'created image manifest');
+            if (img) {
+                t.equal(img.state, 'active', format(
+                    'image2 %s state is active: %s', testImg2Id, img.state));
+                t.equal(img.origin, testOriginId, format(
+                    'image2 %s has the expected origin: %s', testImg2Id,
+                    img.origin));
+            }
+            t.end();
+        });
+    });
+
+    // CloudAPI v8 and earlier, the default was incremental images.
+    tt.test('  create image3 (API version 8)', function (t) {
+        var name = testNamePrefix + 'image3';
+        var createOpts = {
+            machine: testInstId,
+            name: name,
+            version: '1.0.0'
+        };
+
+        CLIENT.post({
+            path: '/my/images',
+            headers: {
+                'accept-version': '~8'
+            }
+        }, createOpts, function (err, req, res, img) {
+            t.ifError(err, 'create image ' + name + ' err');
+            t.ok(img.name, 'image name: ' + img.name);
+            t.ok(img.id, 'image id: ' + img.id);
+            testImg3Id = img.id;
+            t.end();
+        });
+    });
+    tt.test('  wait for and check image3', function (t) {
+        common.waitForImageCreate(CLIENT, testImg3Id, function (err, img) {
+            t.ifError(err, 'wait for image3 ' + testImg3Id + ' create');
+            t.ok(img, 'created image manifest');
+            if (img) {
+                t.equal(img.state, 'active', format(
+                    'image3 %s state is active: %s', testImg3Id, img.state));
+                t.equal(img.origin, testOriginId, format(
+                    'image3 %s has the expected origin: %s', testImg3Id,
+                    img.origin));
+            }
+            t.end();
+        });
+    });
+
+    tt.test('  delete image1, image2, and image3', function (t) {
+        vasync.forEachParallel({
+            inputs: [testImg1Id, testImg2Id, testImg3Id],
+            func: function deleteOneTestImg(imgId, next) {
+                if (!imgId) {
+                    next();
+                    return;
+                }
+                CLIENT.del('/my/images/' + imgId, function (err, req, res) {
+                    t.ifError(err, format('delete test image %s (req_id=%s)',
+                        imgId, res.headers['request-id']));
+                    next();
+                });
+            }
+        }, function (err) {
+            t.ifError(err, 'delete test images');
+            t.end();
+        });
+    });
+
+    tt.test('  delete test inst', function (t) {
+        if (!testInstId) {
+            t.end();
+            return;
+        }
+        CLIENT.del('/my/machines/' + testInstId, function (err, req, res) {
+            t.ifError(err, format('delete test inst %s (req_id=%s)',
+                testInstId, res.headers['request-id']));
+            t.end();
+        });
+    });
+
+    tt.test('  teardown clients', function (t) {
+        common.teardown(CLIENTS, SERVER, function (err) {
+            t.ifError(err, 'teardown success');
+            t.end();
+        });
+    });
+});
diff --git a/test/images.test.js b/test/images.test.js
index 12aa442..a996fd1 100644
--- a/test/images.test.js
+++ b/test/images.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var test = require('tape').test;
@@ -89,7 +89,7 @@ function getInaccessibleImage(client) {
 
 
 test('setup', function (t) {
-    common.setup({clientApiTestVersion: '~8.0'},
+    common.setup({clientApiTestVersion: '~9'},
             function (_, clients, server) {
         CLIENTS = clients;
         CLIENT  = clients.user;
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index fddac08..4478256 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -1,5 +1,5 @@
 #
-# Configuration File for JavaScript Lint 
+# Configuration File for JavaScript Lint
 #
 # This configuration file can be used to lint a collection of scripts, or to enable
 # or disable warnings for scripts that are linted via the command line.
@@ -118,6 +118,7 @@
 +define module
 +define process
 +define require
++define setImmediate
 +define setInterval
 +define setTimeout
 +define Buffer
@@ -136,4 +137,3 @@
 # To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
 # or "+process Folder\Path\*.htm".
 #
-
