From 76e395d05409b407592a11ab16a9c9ff086f7a7a Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 22 Sep 2017 19:28:09 +0200
Subject: [PATCH] CAPI-537 ufds-master tests failing in nightly-1 b/c
 certificate/key are provided

---
 test/add.test.js            |  12 ++--
 test/capi/customers.test.js | 139 +++++++-----------------------------
 test/helper.js              |  54 +++++++++-----
 test/mod.test.js            |  24 ++++---
 4 files changed, 82 insertions(+), 147 deletions(-)

diff --git a/test/add.test.js b/test/add.test.js
index 21f790b..00ff22e 100644
--- a/test/add.test.js
+++ b/test/add.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -25,6 +25,7 @@ var helper = require('./helper.js');
 
 var CLIENT;
 var SERVER;
+var CONFIG;
 var SUFFIX = process.env.UFDS_SUFFIX || 'o=smartdc';
 var DN_FMT = 'uuid=%s, ' + SUFFIX;
 
@@ -36,6 +37,7 @@ var DUP_DN = sprintf(DN_FMT, DUP_ID);
 // --- Tests
 
 test('setup', function (t) {
+    CONFIG = helper.config;
     helper.createServer(function (err, server) {
         t.ifError(err);
         t.ok(server);
@@ -204,7 +206,7 @@ test('add blacklisted email', function (t) {
 
 test('add dclocalconfig with wrong datacenter in dn', function (t) {
     var entry = {
-        dclocalconfig: 'coal',
+        dclocalconfig: CONFIG.datacenter_name,
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
@@ -222,7 +224,7 @@ test('add dclocalconfig with wrong datacenter in entry', function (t) {
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
-    var dn = 'dclocalconfig=coal, ' + DUP_DN;
+    var dn = 'dclocalconfig=' + CONFIG.datacenter_name + ', ' + DUP_DN;
 
     CLIENT.add(dn, entry, function (err) {
         t.ok(err, 'entry dclocalconfig mismatch err');
@@ -232,12 +234,12 @@ test('add dclocalconfig with wrong datacenter in entry', function (t) {
 
 test('add dcuserconfig child', function (t) {
     var entry = {
-        dclocalconfig: 'coal',
+        dclocalconfig: CONFIG.datacenter_name,
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
 
-    var dn = 'dclocalconfig=coal, ' + DUP_DN;
+    var dn = 'dclocalconfig=' + CONFIG.datacenter_name + ', ' + DUP_DN;
 
     CLIENT.add(dn, entry, function (err) {
         t.ifError(err);
diff --git a/test/capi/customers.test.js b/test/capi/customers.test.js
index 7d8c7b4..6ba4ca4 100644
--- a/test/capi/customers.test.js
+++ b/test/capi/customers.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -27,9 +27,10 @@ function uuid() {
 }
 var vasync = require('vasync');
 
-///--- Globals
+// --- Globals
 var CAPI;
 var SERVER;
+var CONFIG;
 var UFDS_SERVER;
 var SUFFIX = process.env.UFDS_SUFFIX || 'o=smartdc';
 
@@ -38,8 +39,6 @@ var DUP_LOGIN = 'a' + DUP_ID.substr(0, 7);
 var DUP_EMAIL = DUP_LOGIN + '_test@joyent.com';
 var CUSTOMER;
 
-var FRAUD_EMAIL = DUP_LOGIN + '_fraud_test@joyent.com';
-var FRAUD_WILDCARD = '*_test@joyent.com';
 
 var METADATA_OBJ_KEY = 'private-api-key';
 var METADATA_OBJ_VAL = {
@@ -52,15 +51,17 @@ var METADATA_STR_KEY = 'useMoreSecurity';
 var METADATA_STR_VAL = 'secretkey=OFRVW3Z6HJ6SQZT5JRLXGV2PG5CWSQCY';
 var METADATA_STR_VAL_PLAIN = 'notQueryStringParseable';
 
-///--- Tests
+// --- Tests
 
 test('setup', function (t) {
+    CONFIG = helper.config;
     vasync.pipeline({
         'funcs': [
             function createUFDS(_, cb) {
                 helper.createServer(function (err, ufds) {
                     if (err) {
-                        return cb(err);
+                        cb(err);
+                        return;
                     }
                     t.ok(ufds);
                     UFDS_SERVER = ufds;
@@ -70,7 +71,8 @@ test('setup', function (t) {
             function createServer(_, cb) {
                 helper.createCAPIServer(function (err, server) {
                     if (err) {
-                        return cb(err);
+                        cb(err);
+                        return;
                     }
                     t.ok(server);
                     SERVER = server;
@@ -221,7 +223,7 @@ test('customer forgot_password', function (t) {
 });
 
 test('get customer (404)', function (t) {
-    CAPI.get('/customers/' + CUSTOMER.login, function (err, req, res, obj) {
+    CAPI.get('/customers/' + CUSTOMER.login, function (err, req, res) {
         t.ok(err);
         t.equal(res.statusCode, 404);
         t.end();
@@ -295,7 +297,7 @@ test('forgot password', function (t) {
 test('forgot password unknown email', function (t) {
     CAPI.post('/forgot_password', {
         email: 'whatever@foo.net'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ok(err);
         t.equal(res.statusCode, 404);
         t.end();
@@ -488,7 +490,7 @@ test('smartlogin invalid fp', function (t) {
     var p = util.format('/customers/%s/ssh_sessions', CUSTOMER.uuid);
     CAPI.post(p, {
         fingerprint: 'asdfasdfadsfasdf'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ok(err);
         t.equal(res.statusCode, 409);
         t.end();
@@ -499,7 +501,7 @@ test('smartlogin not found md5', function (t) {
     var p = util.format('/customers/%s/ssh_sessions', CUSTOMER.uuid);
     CAPI.post(p, {
         fingerprint: KEY_FP_MD5.slice(3) + ':aa'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ok(err);
         t.equal(res.statusCode, 409);
         t.end();
@@ -510,7 +512,7 @@ test('smartlogin ok md5', function (t) {
     var p = util.format('/customers/%s/ssh_sessions', CUSTOMER.uuid);
     CAPI.post(p, {
         fingerprint: KEY_FP_MD5
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 201);
         t.end();
@@ -521,7 +523,7 @@ test('smartlogin ok sha256', function (t) {
     var p = util.format('/customers/%s/ssh_sessions', CUSTOMER.uuid);
     CAPI.post(p, {
         fingerprint: KEY_FP_SHA256
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 201);
         t.end();
@@ -533,7 +535,7 @@ test('smartlogin wrong algorithm', function (t) {
     CAPI.post(p, {
         fingerprint: KEY_FP_SHA256,
         algorithm: 'foo'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ok(err);
         t.equal(res.statusCode, 409);
         t.end();
@@ -545,7 +547,7 @@ test('smartlogin ok algorithm', function (t) {
     CAPI.post(p, {
         fingerprint: KEY_FP_SHA256,
         algorithm: 'rsa'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 201);
         t.end();
@@ -556,7 +558,7 @@ test('update key', function (t) {
     var p = util.format(KEY_PATH, CUSTOMER.uuid, KEY.id);
     CAPI.put(p, {
         name: 'my_rsa_key'
-    }, function (err, req, res, obj) {
+    }, function (err, req, res) {
         t.ifError(err);
         t.end();
     });
@@ -566,12 +568,12 @@ test('update key', function (t) {
 // --- Limits:
 test('add limit', function (t) {
     var limitPath = util.format('/customers/%s/limits/%s/%s',
-        CUSTOMER.uuid, 'coal', 'smartos');
+        CUSTOMER.uuid, CONFIG.datacenter_name, 'smartos');
     var restify = require('restify');
     var client = restify.createStringClient({
         url: CAPI.url.protocol + '//' + CAPI.url.host
     });
-    client.put(limitPath, '7', function (err, req, res, obj) {
+    client.put(limitPath, '7', function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 201);
         client.close();
@@ -595,12 +597,12 @@ test('list limits', function (t) {
 
 test('modify limit', function (t) {
     var limitPath = util.format('/customers/%s/limits/%s/%s',
-        CUSTOMER.uuid, 'coal', 'smartos');
+        CUSTOMER.uuid, CONFIG.datacenter_name, 'smartos');
     var restify = require('restify');
     var client = restify.createStringClient({
         url: CAPI.url.protocol + '//' + CAPI.url.host
     });
-    client.put(limitPath, '14', function (err, req, res, obj) {
+    client.put(limitPath, '14', function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 200);
         client.close();
@@ -618,7 +620,7 @@ test('modify limit', function (t) {
 
 test('delete limit', function (t) {
     var limitPath = util.format('/customers/%s/limits/%s/%s',
-        CUSTOMER.uuid, 'coal', 'smartos');
+        CUSTOMER.uuid, CONFIG.datacenter_name, 'smartos');
     CAPI.del(limitPath, function (err, req, res) {
         t.ifError(err);
         t.equal(res.statusCode, 200);
@@ -628,7 +630,7 @@ test('delete limit', function (t) {
 
 // Or we'll raise a NotAllowedOnNonLeafError from delete customer:
 test('limit cleanup', function (t) {
-    var limitDn = util.format('dclimit=coal, %s',
+    var limitDn = util.format('dclimit=' + CONFIG.datacenter_name + ', %s',
         'uuid=' + CUSTOMER.uuid + ', ou=users, ' + SUFFIX);
     helper.createClient(function (err, client) {
         t.ifError(err);
@@ -652,7 +654,7 @@ test('add app meta key (parseable string)', function (t) {
     var client = restify.createStringClient({
         url: CAPI.url.protocol + '//' + CAPI.url.host
     });
-    client.put(appKeyMetaPath, METADATA_STR_VAL, function (err, req, res, obj) {
+    client.put(appKeyMetaPath, METADATA_STR_VAL, function (_, req, res) {
         t.equal(res.statusCode, 201);
         client.close();
         t.end();
@@ -684,7 +686,7 @@ test('update app meta key (to plain string)', function (t) {
         url: CAPI.url.protocol + '//' + CAPI.url.host
     });
     client.put(appKeyMetaPath, METADATA_STR_VAL_PLAIN,
-        function (err, req, res, obj) {
+        function (_, req, res) {
             t.equal(res.statusCode, 200);
             client.close();
             t.end();
@@ -711,7 +713,7 @@ test('add app meta key (object)', function (t) {
     var client = restify.createStringClient({
         url: CAPI.url.protocol + '//' + CAPI.url.host
     });
-    client.put(appKeyMetaPath, METADATA_OBJ_VAL, function (err, req, res, obj) {
+    client.put(appKeyMetaPath, METADATA_OBJ_VAL, function (_, req, res) {
         t.equal(res.statusCode, 201);
         client.close();
         t.end();
@@ -779,93 +781,6 @@ test('meta cleanup', function (t) {
 });
 
 
-// CAPI-234: Blacklist "/fraud"
-//test('add email to blacklist', function (t) {
-//    CAPI.post('/fraud', {email: FRAUD_EMAIL}, function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(201, res.statusCode);
-//        t.ok(Array.isArray(obj));
-//        t.equal(obj[obj.length - 1].email_address, FRAUD_EMAIL);
-//        t.end();
-//    });
-//});
-
-
-//test('get blacklist', function (t) {
-//    CAPI.get('/fraud', function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(200, res.statusCode);
-//        t.ok(Array.isArray(obj));
-//        if (obj.length) {
-//            t.ok(obj[0].email_address);
-//            t.ok(obj[0].id);
-//        }
-//        t.end();
-//    });
-//});
-
-
-//test('search email in blacklist', function (t) {
-//    CAPI.get('/fraud/' + FRAUD_EMAIL, function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(200, res.statusCode);
-//        t.ok(obj.email_address);
-//        t.ok(obj.id);
-//        t.end();
-//    });
-//});
-
-
-//test('search email not in blacklist', function (t) {
-//    CAPI.get('/fraud/' + DUP_EMAIL, function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(200, res.statusCode);
-//        t.ok(obj); // it is actually a plain []
-//        t.ok(!obj.email_address);
-//        t.end();
-//    });
-//});
-
-
-//test('add wildcard to blacklist', function (t) {
-//    CAPI.post('/fraud',
-//        {email: FRAUD_WILDCARD}, function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(201, res.statusCode);
-//        t.ok(Array.isArray(obj));
-//        t.equal(obj[obj.length - 1].email_address, FRAUD_WILDCARD);
-//        t.end();
-//    });
-//});
-
-
-//test('search email wildcard in blacklist', function (t) {
-//    CAPI.get('/fraud/' + DUP_EMAIL, function (err, req, res, obj) {
-//        t.ifError(err);
-//        t.equal(200, res.statusCode);
-//        t.ok(obj.email_address);
-//        t.ok(obj.id);
-//        t.end();
-//    });
-//});
-
-
-// Go with clean blacklist for the next time:
-//test('blacklist cleanup', function (t) {
-//    helper.createClient(function (err, client) {
-//        t.ifError(err);
-//        t.ok(client);
-//        client.del('cn=blacklist, o=smartdc', function (err1) {
-//            t.ifError(err1);
-//            client.unbind(function (err2) {
-//                t.ifError(err2);
-//                t.end();
-//            });
-//        });
-//    });
-//});
-
-
 test('delete key', function (t) {
     var p = util.format(KEY_PATH, CUSTOMER.uuid, KEY.id);
     CAPI.del(p, function (err, req, res) {
diff --git a/test/helper.js b/test/helper.js
index 2718a03..d328f3e 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 // Also expose a common logger for all tests.
@@ -14,22 +14,24 @@ var assert = require('assert');
 var fs = require('fs');
 var path = require('path');
 var util = require('util');
-var child_process = require('child_process');
 
 var Logger = require('bunyan');
 var ldapjs = require('ldapjs');
 var moray = require('moray');
 var restify = require('restify');
 
-///--- Globals
+// --- Globals
 var CONFIG;
 var CFG_FILE = process.env.TEST_CONFIG_FILE ||
             path.normalize(__dirname + '/../etc/config.coal.json');
 
 try {
     CONFIG = JSON.parse(fs.readFileSync(CFG_FILE, 'utf8'));
-    CONFIG.host = CONFIG.host || '10.99.99.18';
-    CONFIG.port = CONFIG.port || 636;
+    CONFIG.host = CONFIG.host || '0.0.0.0';
+    CONFIG.port = CONFIG.port || 1389;
+    if (CONFIG.certificate) {
+        delete CONFIG.certificate;
+    }
 } catch (e) {
     console.error('Unable to parse configuration file: ' + e.message);
     process.exit(1);
@@ -45,9 +47,10 @@ var LOG = new Logger({
 
 
 function get(client, DN, callback) {
-    return client.search(DN, '(objectclass=*)', function (err, res) {
+    client.search(DN, '(objectclass=*)', function (err, res) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var obj;
@@ -57,19 +60,20 @@ function get(client, DN, callback) {
         });
 
         res.once('error', function (err2) {
-            return callback(err2);
+            callback(err2);
+            return;
         });
 
         res.once('end', function (result) {
-            return callback(null, obj);
+            callback(null, obj);
+            return;
         });
 
-        return;
     });
 }
 
 
-///--- Exports
+// --- Exports
 
 module.exports = {
     createClient: function createClient(nobind, callback) {
@@ -130,7 +134,8 @@ module.exports = {
         assert.equal(typeof (cb), 'function');
         // Don't initialize local server if remote is specified.
         if (CONFIG.host !== '127.0.0.1') {
-            return cb(null, {});
+            cb(null, {});
+            return;
         }
         var basePath = path.normalize(__dirname + '/../');
         var ufds = require(basePath + '/lib/ufds');
@@ -145,7 +150,6 @@ module.exports = {
         var server = ufds.createServer(config);
         server.init(function () {
             cb(null, server);
-            return true;
         });
     },
 
@@ -153,7 +157,8 @@ module.exports = {
         assert.equal(typeof (cb), 'function');
         // No cleanup needed for remote server
         if (CONFIG.host !== '127.0.0.1') {
-            return cb();
+            cb();
+            return;
         }
         server.server.close();
         server.moray.close();
@@ -165,6 +170,11 @@ module.exports = {
         var basePath = path.normalize(__dirname + '/../');
         var capi = require(basePath + '/capi/server.js');
         var config = capi.processConfigFile(CFG_FILE);
+        // Don't initialize local server if remote is specified.
+        if (config.host !== '127.0.0.1') {
+            cb(null, {});
+            return;
+        }
         config.log = new Logger({
             name: 'capi',
             level: config.logLevel,
@@ -174,7 +184,8 @@ module.exports = {
         var server = capi.createServer(config);
         server.connect(function (err) {
           if (err) {
-            return cb(err);
+            cb(err);
+            return;
           }
           cb(null, server);
         });
@@ -182,6 +193,11 @@ module.exports = {
 
     destroyCAPIServer: function destroyCAPIServer(server, cb) {
         assert.equal(typeof (cb), 'function');
+        // No cleanup needed for remote server
+        if (CONFIG.host !== '127.0.0.1') {
+            cb();
+            return;
+        }
         server.close(cb);
     },
 
@@ -221,7 +237,8 @@ module.exports = {
                 var finished = 0;
                 if (rows.length === 0) {
                     client.close();
-                    return callback();
+                    callback();
+                    return;
                 }
                 rows.forEach(function (r) {
                     client.delObject(r.bucket, r.key, function (err) {
@@ -229,9 +246,8 @@ module.exports = {
                         finished += 1;
                         if (finished === rows.length) {
                             client.close();
-                            return callback();
-                        } else {
-                            return false;
+                            callback();
+                            return;
                         }
                     });
                 });
diff --git a/test/mod.test.js b/test/mod.test.js
index 49f953d..b851c46 100644
--- a/test/mod.test.js
+++ b/test/mod.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -19,10 +19,11 @@ var helper = require('./helper.js');
 
 
 
-///--- Globals
+// --- Globals
 
 var CLIENT;
 var SERVER;
+var CONFIG;
 var SUFFIX = process.env.UFDS_SUFFIX || 'o=smartdc';
 var ID = uuid();
 var USER_DN = 'cn=child, ' + SUFFIX;
@@ -35,7 +36,7 @@ var USER = {
 };
 
 
-///--- Helpers
+// --- Helpers
 
 function get(callback) {
     return CLIENT.search(USER_DN, '(objectclass=*)', function (err, res) {
@@ -83,9 +84,10 @@ function get(callback) {
 
 
 
-///--- Tests
+// --- Tests
 
 test('setup', function (t) {
+    CONFIG = helper.config;
     helper.createServer(function (err, server) {
         t.ifError(err);
         t.ok(server);
@@ -254,9 +256,9 @@ test('modify sub-user login', function (t) {
 });
 
 test('modify dclocalconfig', function (t) {
-    var dn = 'dclocalconfig=coal, ' + USER_DN;
+    var dn = 'dclocalconfig=' + CONFIG.datacenter_name + ', ' + USER_DN;
     var entry = {
-        dclocalconfig: 'coal',
+        dclocalconfig: CONFIG.datacenter_name,
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
@@ -288,9 +290,9 @@ test('modify dclocalconfig', function (t) {
 
 
 test('modify dclocalconfig dclocalconfig property', function (t) {
-    var dn = 'dclocalconfig=coal, ' + USER_DN;
+    var dn = 'dclocalconfig=' + CONFIG.datacenter_name + ', ' + USER_DN;
     var entry = {
-        dclocalconfig: 'coal',
+        dclocalconfig: CONFIG.datacenter_name,
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
@@ -318,16 +320,16 @@ test('modify dclocalconfig dclocalconfig property', function (t) {
 });
 
 test('modify dclocalconfig with identical entry', function (t) {
-    var dn = 'dclocalconfig=coal, ' + USER_DN;
+    var dn = 'dclocalconfig=' + CONFIG.datacenter_name + ', ' + USER_DN;
     var entry = {
-        dclocalconfig: 'coal',
+        dclocalconfig: CONFIG.datacenter_name,
         defaultFabricSetup: false,
         objectclass: 'dclocalconfig'
     };
     var change = {
         type: 'replace',
         modification: {
-            dclocalconfig: 'coal'
+            dclocalconfig: CONFIG.datacenter_name
         }
     };
 
-- 
2.21.0

