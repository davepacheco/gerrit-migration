commit effefc1c5d62a14ffae7c483e7b00c6883359128 (refs/changes/37/2637/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-09-22T17:23:00+02:00 (2 years, 1 month ago)
    
    CAPI-537 ufds-master tests failing in nightly-1 b/c certificate/key are provided

diff --git a/sapi_manifests/ufds/template b/sapi_manifests/ufds/template
index ede90c4..0f91772 100644
--- a/sapi_manifests/ufds/template
+++ b/sapi_manifests/ufds/template
@@ -2,8 +2,6 @@
     "port": 636,
     "rootDN": "{{{ufds_ldap_root_dn}}}",
     "rootPassword": "{{{ufds_ldap_root_pw}}}",
-    "certificate": "/opt/smartdc/ufds/ssl/cert.pem",
-    "key": "/opt/smartdc/ufds/ssl/key.pem",
     "logLevel": "info",
     "use_bcrypt": false,
     "ufds_is_master": {{{ufds_is_master}}},
diff --git a/test/helper.js b/test/helper.js
index 2718a03..5b9e145 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 // Also expose a common logger for all tests.
@@ -14,22 +14,21 @@ var assert = require('assert');
 var fs = require('fs');
 var path = require('path');
 var util = require('util');
-var child_process = require('child_process');
 
 var Logger = require('bunyan');
 var ldapjs = require('ldapjs');
 var moray = require('moray');
 var restify = require('restify');
 
-///--- Globals
+// --- Globals
 var CONFIG;
 var CFG_FILE = process.env.TEST_CONFIG_FILE ||
             path.normalize(__dirname + '/../etc/config.coal.json');
 
 try {
     CONFIG = JSON.parse(fs.readFileSync(CFG_FILE, 'utf8'));
-    CONFIG.host = CONFIG.host || '10.99.99.18';
-    CONFIG.port = CONFIG.port || 636;
+    CONFIG.host = CONFIG.host || '0.0.0.0';
+    CONFIG.port = CONFIG.port || 1389;
 } catch (e) {
     console.error('Unable to parse configuration file: ' + e.message);
     process.exit(1);
@@ -45,9 +44,10 @@ var LOG = new Logger({
 
 
 function get(client, DN, callback) {
-    return client.search(DN, '(objectclass=*)', function (err, res) {
+    client.search(DN, '(objectclass=*)', function (err, res) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var obj;
@@ -57,19 +57,20 @@ function get(client, DN, callback) {
         });
 
         res.once('error', function (err2) {
-            return callback(err2);
+            callback(err2);
+            return;
         });
 
         res.once('end', function (result) {
-            return callback(null, obj);
+            callback(null, obj);
+            return;
         });
 
-        return;
     });
 }
 
 
-///--- Exports
+// --- Exports
 
 module.exports = {
     createClient: function createClient(nobind, callback) {
@@ -130,7 +131,8 @@ module.exports = {
         assert.equal(typeof (cb), 'function');
         // Don't initialize local server if remote is specified.
         if (CONFIG.host !== '127.0.0.1') {
-            return cb(null, {});
+            cb(null, {});
+            return;
         }
         var basePath = path.normalize(__dirname + '/../');
         var ufds = require(basePath + '/lib/ufds');
@@ -145,7 +147,6 @@ module.exports = {
         var server = ufds.createServer(config);
         server.init(function () {
             cb(null, server);
-            return true;
         });
     },
 
@@ -153,7 +154,8 @@ module.exports = {
         assert.equal(typeof (cb), 'function');
         // No cleanup needed for remote server
         if (CONFIG.host !== '127.0.0.1') {
-            return cb();
+            cb();
+            return;
         }
         server.server.close();
         server.moray.close();
@@ -174,7 +176,8 @@ module.exports = {
         var server = capi.createServer(config);
         server.connect(function (err) {
           if (err) {
-            return cb(err);
+            cb(err);
+            return;
           }
           cb(null, server);
         });
@@ -221,7 +224,8 @@ module.exports = {
                 var finished = 0;
                 if (rows.length === 0) {
                     client.close();
-                    return callback();
+                    callback();
+                    return;
                 }
                 rows.forEach(function (r) {
                     client.delObject(r.bucket, r.key, function (err) {
@@ -229,9 +233,8 @@ module.exports = {
                         finished += 1;
                         if (finished === rows.length) {
                             client.close();
-                            return callback();
-                        } else {
-                            return false;
+                            callback();
+                            return;
                         }
                     });
                 });
