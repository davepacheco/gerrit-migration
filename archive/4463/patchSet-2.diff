From 242e3f681abf4ee56e390be1c90fee0cad089711 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 19 Apr 2018 22:48:39 +0000
Subject: [PATCH] TRITON-284 Add networks and NICs changefeeds to NAPI

---
 lib/models/aggregation.js    |  61 ++++-
 lib/models/network.js        |  44 +++-
 lib/models/nic-tag.js        |  38 +++-
 lib/models/nic/create.js     |  20 +-
 lib/models/nic/del.js        |  19 +-
 lib/models/nic/update.js     |  33 ++-
 lib/napi.js                  |  85 ++++++-
 package.json                 |   1 +
 test/unit/changefeed.test.js | 419 +++++++++++++++++++++++++++++++++++
 9 files changed, 706 insertions(+), 14 deletions(-)
 create mode 100644 test/unit/changefeed.test.js

diff --git a/lib/models/aggregation.js b/lib/models/aggregation.js
index 71edd59..23bbc6b 100644
--- a/lib/models/aggregation.js
+++ b/lib/models/aggregation.js
@@ -32,7 +32,7 @@ var VError = require('verror');
 // --- Globals
 
 
-
+var CHANGEFEED_PARAMS = [ 'lacp_mode' ];
 var LACP_MODES = [ 'off', 'active', 'passive' ];
 var BUCKET = {
     desc: 'aggregation',
@@ -383,7 +383,24 @@ function createAggr(opts, callback) {
                 return;
             }
 
-            callback(null, aggr);
+            opts.app.publisher.publish({
+                changeKind: {
+                    resource: 'aggregation',
+                    subResources: [ 'create' ]
+                },
+                changedResourceId: aggr.id,
+                belongs_to_uuid: aggr.params.belongs_to_uuid,
+                name: aggr.params.name,
+                etag: aggr.etag
+            }, function (cfErr) {
+                if (cfErr) {
+                    app.log.warn(cfErr,
+                        'failed to publish changefeed entry ' +
+                        'for aggr %s', aggr.id);
+                }
+
+                callback(null, aggr);
+            });
         });
     });
 }
@@ -478,7 +495,31 @@ function updateAggr(opts, callback) {
                 return;
             }
 
-            callback(null, new Aggr(rec.value));
+            var aggr = new Aggr(rec.value);
+
+            function done() {
+                callback(null, aggr);
+            }
+
+            var changed = CHANGEFEED_PARAMS.filter(function (param) {
+                return opts.params.hasOwnProperty(param);
+            });
+
+            if (changed.length === 0) {
+                done();
+                return;
+            }
+
+            opts.app.publisher.publish({
+                changeKind: {
+                    resource: 'aggregation',
+                    subResources: changed
+                },
+                changedResourceId: aggr.id,
+                belongs_to_uuid: aggr.params.belongs_to_uuid,
+                name: aggr.params.name,
+                etag: aggr.etag
+            }, done);
         });
     });
 }
@@ -505,7 +546,19 @@ function deleteAggr(opts, callback) {
 
             opts.log.info(validated, 'deleted aggregation "%s"', validated.id);
 
-            callback();
+            var idx = validated.id.lastIndexOf('-');
+            var uuid = validated.id.slice(0, idx);
+            var name = validated.id.slice(idx + 1);
+
+            opts.app.publisher.publish({
+                changeKind: {
+                    resource: 'aggregation',
+                    subResources: [ 'delete' ]
+                },
+                changedResourceId: validated.id,
+                belongs_to_uuid: uuid,
+                name: name
+            }, callback);
         });
     });
 }
diff --git a/lib/models/network.js b/lib/models/network.js
index deca829..bce7e75 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -1895,6 +1895,17 @@ function createNetwork(opts, callback) {
             // XXX: should create the network and the IPs in the same batch
             log.info(batch, 'Reserving IPs for network "%s"', network.uuid);
             return mod_ip.batchCreate(app, log, batch, cb);
+        },
+
+        function (_, cb) {
+            app.publisher.publish({
+                changeKind: {
+                    resource: 'network',
+                    subResources: [ 'create' ]
+                },
+                changedResourceId: network.uuid,
+                etag: network.etag
+            }, cb);
         }
 
         ]
@@ -1946,6 +1957,7 @@ function updateNetwork(opts, callback) {
             return callback(err);
         }
 
+        var changed = [];
         var batch = [ {
             bucket: BUCKET.name,
             key: params.uuid,
@@ -2007,6 +2019,7 @@ function updateNetwork(opts, callback) {
 
             validated._gatewayIP.reserved = true;
             batch.push(validated._gatewayIP.batch());
+            changed.push('gateway');
         }
 
         if (validated.hasOwnProperty('resolvers')) {
@@ -2020,6 +2033,8 @@ function updateNetwork(opts, callback) {
                 batch[0].value.resolvers = validated.resolvers.map(
                     function (r) { return r.toLong(); });
             }
+
+            changed.push('resolvers');
         }
 
         if (validated.hasOwnProperty('routes')) {
@@ -2028,6 +2043,8 @@ function updateNetwork(opts, callback) {
             if (isIPv4) {
                 batch[0].value.routes = routeNumbers(validated.routes);
             }
+
+            changed.push('routes');
         }
 
         provisionRangeUpdates(app, log, params.network, validated,
@@ -2051,7 +2068,23 @@ function updateNetwork(opts, callback) {
                 toReturn.etag =
                     util_common.getEtag(res.etags, BUCKET.name, toReturn.uuid);
 
-                callback(null, toReturn);
+                function afterPublish(cfErr) {
+                    callback(cfErr, toReturn);
+                }
+
+                if (changed.length === 0) {
+                    afterPublish();
+                    return;
+                }
+
+                app.publisher.publish({
+                    changeKind: {
+                        resource: 'network',
+                        subResources: changed
+                    },
+                    changedResourceId: toReturn.uuid,
+                    etag: toReturn.etag
+                }, afterPublish);
             });
         });
     });
@@ -2337,6 +2370,15 @@ function deleteNetwork(opts, callback) {
 
                 cb(err);
             });
+        },
+        function deleteNetPublish(_, cb) {
+            app.publisher.publish({
+                changeKind: {
+                    resource: 'network',
+                    subResources: [ 'delete' ]
+                },
+                changedResourceId: params.uuid
+            }, cb);
         }
     ] }, callback);
 }
diff --git a/lib/models/nic-tag.js b/lib/models/nic-tag.js
index 3de99a2..4be918d 100644
--- a/lib/models/nic-tag.js
+++ b/lib/models/nic-tag.js
@@ -381,19 +381,34 @@ function createNicTag(app, log, params, callback) {
         log: log
     };
 
-    validate.params(CREATE_SCHEMA, copts, params, function (err) {
+    validate.params(CREATE_SCHEMA, copts, params, function (err, validated) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
-        var tag = new NicTag(params);
+        var tag = new NicTag(validated);
         mod_moray.putObj(app.moray, BUCKET, tag, function (pErr) {
             if (pErr) {
                 callback(pErr);
                 return;
             }
 
-            callback(null, tag);
+            app.publisher.publish({
+                changeKind: {
+                    resource: 'nic_tag',
+                    subResources: [ 'create' ]
+                },
+                changedResourceId: tag.name,
+                etag: tag.etag
+            }, function (cfErr) {
+                if (cfErr) {
+                    callback(cfErr);
+                    return;
+                }
+
+                callback(null, tag);
+            });
         });
     });
 }
@@ -542,7 +557,20 @@ function deleteNicTag(app, log, params, callback) {
             return;
         }
 
-        app.moray.delObject(BUCKET.name, params.name, callback);
+        app.moray.delObject(BUCKET.name, params.name, function (dErr) {
+            if (dErr) {
+                callback(dErr);
+                return;
+            }
+
+            app.publisher.publish({
+                changeKind: {
+                    resource: 'nic_tag',
+                    subResources: [ 'delete' ]
+                },
+                changedResourceId: params.name
+            }, callback);
+        });
     });
 }
 
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index 67f0481..2446b85 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -87,6 +87,23 @@ function validateParams(opts, callback) {
     });
 }
 
+
+/**
+ * Publish to the 'nic' changefeed that we have created a new NIC.
+ */
+function publishCreateNIC(opts, callback) {
+    opts.app.publisher.publish({
+        changeKind: {
+            resource: 'nic',
+            subResources: [ 'create' ]
+        },
+        changedResourceId: opts.nic.mac.toString(),
+        belongs_to_uuid: opts.nic.params.belongs_to_uuid,
+        cn_uuid: opts.nic.params.cn_uuid,
+        etag: opts.nic.etag
+    }, callback);
+}
+
 // --- Exports
 
 
@@ -119,7 +136,8 @@ function create(opts, callback) {
         funcs: [
             validateParams,
             provision.addParams,
-            provision.nicAndIP
+            provision.nicAndIP,
+            publishCreateNIC
         ]
     }, function (err) {
         callback(err, opts.nic);
diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index 301218a..4c61939 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -112,6 +112,22 @@ function commitBatch(opts, callback) {
 }
 
 
+/**
+ * Public to the 'nic' changefeed that we have deleted a NIC.
+ */
+function publishDeleteNIC(opts, callback) {
+    opts.app.publisher.publish({
+        changeKind: {
+            resource: 'nic',
+            subResources: [ 'delete' ]
+        },
+        changedResourceId: opts.existingNic.mac.toString(),
+        belongs_to_uuid: opts.existingNic.params.belongs_to_uuid,
+        cn_uuid: opts.existingNic.params.cn_uuid
+    }, callback);
+}
+
+
 // --- Exports
 
 
@@ -129,7 +145,8 @@ function del(opts, callback) {
             listVnetCns,
             addNicToBatch,
             delIPs,
-            commitBatch
+            commitBatch,
+            publishDeleteNIC
         ]
     }, function (err) {
         if (err) {
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index cdbc320..2b8105c 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -58,6 +58,15 @@ var UPDATE_PARAMS = [
     'vlan_id'
 ];
 
+var CHANGEFEED_PARAMS = [
+    'allow_dhcp_spoofing',
+    'allow_ip_spoofing',
+    'allow_mac_spoofing',
+    'allow_restricted_traffic',
+    'allow_unfiltered_promisc',
+    'primary',
+    'state'
+];
 
 var UPDATE_SCHEMA = {
     required: {
@@ -298,7 +307,29 @@ function update(opts, callback) {
             after: opts.nic.serialize()
         }, 'Updated nic');
 
-        callback(null, opts.nic);
+        function done() {
+            callback(null, opts.nic);
+        }
+
+        var changed = CHANGEFEED_PARAMS.filter(function (param) {
+            return opts.params.hasOwnProperty(param);
+        });
+
+        if (changed.length === 0) {
+            done();
+            return;
+        }
+
+        opts.app.publisher.publish({
+            changeKind: {
+                resource: 'nic',
+                subResources: changed
+            },
+            changedResourceId: opts.nic.mac.toString(),
+            belongs_to_uuid: opts.nic.params.belongs_to_uuid,
+            cn_uuid: opts.nic.params.cn_uuid,
+            etag: opts.nic.etag
+        }, done);
     });
 }
 
diff --git a/lib/napi.js b/lib/napi.js
index 86d9378..6b64aad 100644
--- a/lib/napi.js
+++ b/lib/napi.js
@@ -23,6 +23,7 @@ var http = require('http');
 var https = require('https');
 var models = require('./models');
 var mod_apis_moray = require('./apis/moray');
+var mod_changefeed = require('changefeed');
 var mod_config = require('./config');
 var mod_init = require('./init');
 var mod_jsprim = require('jsprim');
@@ -41,6 +42,7 @@ var VError = require('verror');
 
 var INIT_RETRY_DELAY = 10000;
 var METRICS_SERVER_PORT = 8881;
+var NAPI_CHANGEFEED_BUCKET = 'napi_changes';
 var USAGE_PERIOD = 8 * 60 * 60 * 1000; // 8 hours
 var PKG = require('../package.json');
 var request_seq_id = 0;
@@ -345,7 +347,7 @@ NAPI.prototype.state_init.buckets = function (S) {
 NAPI.prototype.state_init.migrations = function (S) {
     var self = this;
 
-    S.validTransitions([ 'init.migrations', 'init.loadInitialData' ]);
+    S.validTransitions([ 'init.migrations', 'init.publisher' ]);
 
     mod_migrate.migrateAll({
         app: self,
@@ -359,8 +361,85 @@ NAPI.prototype.state_init.migrations = function (S) {
         }
 
         self.log.info('Migrations complete');
+        S.gotoState('init.publisher');
+    });
+};
+
+NAPI.prototype.state_init.publisher = function (S) {
+    var self = this;
+
+    S.validTransitions([ 'init.loadInitialData', 'failed' ]);
+
+    self.publisher = mod_changefeed.createPublisher({
+        backoff: {
+            maxTimeout: Infinity,
+            minTimeout: 10,
+            retries: Infinity
+        },
+        log: self.log.child({ component: 'changefeed' }),
+        maxAge: 2000,
+        moray: {
+            bucketName: NAPI_CHANGEFEED_BUCKET,
+            client: self.moray
+        },
+        restifyServer: self.server,
+        resources: [
+            {
+                bootstrapRoute: '/aggregations',
+                resource: 'aggregation',
+                subResources: [
+                    'create',
+                    'delete',
+                    'lacp_mode'
+                ]
+            },
+            {
+                bootstrapRoute: '/networks',
+                resource: 'network',
+                subResources: [
+                    'create',
+                    'delete',
+                    'gateway',
+                    'resolvers',
+                    'routes'
+                ]
+            },
+            {
+                bootstrapRoute: '/nic_tags',
+                resource: 'nic_tag',
+                subResources: [
+                    'create',
+                    'delete'
+                ]
+            },
+            {
+                bootstrapRoute: '/nics',
+                resource: 'nic',
+                subResources: [
+                    'create',
+                    'delete',
+                    'allow_dhcp_spoofing',
+                    'allow_ip_spoofing',
+                    'allow_mac_spoofing',
+                    'allow_restricted_traffic',
+                    'allow_unfiltered_promisc',
+                    'primary',
+                    'state'
+                ]
+            }
+        ]
+    });
+
+    S.on(self.publisher, 'moray-ready', function () {
         S.gotoState('init.loadInitialData');
     });
+
+    S.on(self.publisher, 'moray-fail', function () {
+        self.initErr = new VError('changefeed failed to setup moray buckets');
+        S.gotoState('failed');
+    });
+
+    self.publisher.start();
 };
 
 NAPI.prototype.state_init.loadInitialData = function (S) {
@@ -431,6 +510,10 @@ NAPI.prototype._cleanup = function (callback) {
     }
 
     function onServerClose(err) {
+        if (self.publisher) {
+            self.publisher.stop();
+        }
+
         if (self.moray) {
             self.moray.close();
         }
diff --git a/package.json b/package.json
index c888df8..9d036ee 100644
--- a/package.json
+++ b/package.json
@@ -7,6 +7,7 @@
   "dependencies": {
     "assert-plus": "1.0.0",
     "bunyan": "1.8.12",
+    "changefeed": "~1.5.0",
     "clone": "1.0.2",
     "cmdln": "3.0.2",
     "dashdash": "1.7.3",
diff --git a/test/unit/changefeed.test.js b/test/unit/changefeed.test.js
new file mode 100644
index 0000000..61be6c6
--- /dev/null
+++ b/test/unit/changefeed.test.js
@@ -0,0 +1,419 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+/*
+ * Unit tests for network endpoints
+ */
+
+'use strict';
+
+var constants = require('../../lib/util/constants');
+var h = require('./helpers');
+var LOG = require('../lib/log');
+var mod_aggr = require('../lib/aggr');
+var mod_changefeed = require('changefeed');
+var mod_net = require('../lib/net');
+var mod_nic = require('../lib/nic');
+var mod_nic_tag = require('../lib/nic-tag');
+var mod_server = require('../lib/server');
+var mod_uuid = require('node-uuid');
+var test = require('tape');
+
+
+// --- Globals
+
+var FEED;
+var MORAY;
+var NAPI;
+var NET;
+var TAG;
+
+var INSTUUID = mod_uuid.v4();
+
+var CF_RESOURCES = [
+    {
+        resource: 'network',
+        subResources: [
+            'create',
+            'delete',
+            'gateway',
+            'resolvers',
+            'routes'
+        ]
+    },
+    {
+        resource: 'nic',
+        subResources: [
+            'create',
+            'delete',
+            'allow_dhcp_spoofing',
+            'allow_ip_spoofing',
+            'allow_mac_spoofing',
+            'allow_restricted_traffic',
+            'allow_unfiltered_promisc',
+            'primary'
+        ]
+    },
+    {
+        resource: 'nic_tag',
+        subResources: [
+            'create',
+            'delete'
+        ]
+    },
+    {
+        resource: 'aggregation',
+        subResources: [
+            'create',
+            'delete',
+            'lacp_mode'
+        ]
+    }
+];
+
+// --- Setup
+
+test('Initial setup', function (t) {
+    h.reset();
+
+    t.test('setup client and server', function (t2) {
+        h.createClientAndServer(function (err, res, moray) {
+            NAPI = res;
+            MORAY = moray;
+
+            t2.ifError(err, 'server creation');
+            t2.ok(NAPI, 'have NAPI client object');
+            t2.ok(MORAY, 'have MORAY client object');
+            t2.end();
+        });
+    });
+
+    t.test('setup listener', function (t2) {
+        var count = 0;
+
+        t2.plan(CF_RESOURCES.length);
+
+        FEED = mod_changefeed.createListener({
+            log: LOG,
+            url: 'http://localhost:' + NAPI.client.url.port,
+            instance: INSTUUID,
+            service: 'napi-tests',
+            resources: CF_RESOURCES,
+            backoff: {
+                maxTimeout: 10000,
+                minTimeout: 2000,
+                retries: Infinity
+            }
+        });
+
+        FEED.on('bootstrap', function (bs) {
+            t2.ok(bs, 'bootstrap object returned');
+            if (++count === CF_RESOURCES.length) {
+                t2.end();
+            }
+        });
+
+        FEED.register();
+    });
+});
+
+
+// --- Tests
+
+test('nic_tag/network events', function (t) {
+    t.test('create nic tag', function (t2) {
+        mod_nic_tag.create(t2, {
+            // Match the name of the nic tag in h.validNetworkParams()
+            name: 'nic_tag',
+            partialExp: {
+                name: 'nic_tag'
+            }
+        }, function (_, res) {
+            TAG = res;
+            t2.end();
+        });
+    });
+
+    t.test('check create nic_tag event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'nic_tag',
+                subResources: [ 'create' ]
+            }, 'nic_tag create event');
+            t2.deepEqual(evt.changedResourceId, TAG.name);
+            t2.ok(evt.etag);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+
+    t.test('create network', function (t2) {
+        mod_net.create(t2, {
+            params: h.validNetworkParams(),
+            partialExp: {
+                family: 'ipv4'
+            }
+        }, function (_, res) {
+            NET = res;
+            t2.end();
+        });
+    });
+
+    t.test('check create network event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'network',
+                subResources: [ 'create' ]
+            }, 'network create event');
+            t2.deepEqual(evt.changedResourceId, NET.uuid);
+            t2.ok(evt.etag);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+});
+
+
+test('nic events', function (t) {
+    var cn_uuid = mod_uuid.v4();
+    var aggrId = mod_aggr.id(cn_uuid, 'aggr1');
+    var mac = '01:23:45:67:89:ab';
+    var params = {
+        belongs_to_uuid: cn_uuid,
+        belongs_to_type: 'server',
+        owner_uuid: constants.UFDS_ADMIN_UUID,
+        cn_uuid: cn_uuid,
+        network_uuid: NET.uuid
+    };
+
+    t.test('create nic', function (t2) {
+        mod_nic.create(t2, {
+            mac: mac,
+            params: params,
+            partialExp: params
+        });
+    });
+
+    t.test('check for create nic event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'nic',
+                subResources: [ 'create' ]
+            }, 'nic create event');
+            t2.deepEqual(evt.changedResourceId, mac, 'has correct mac');
+            t2.ok(evt.etag, 'has etag');
+            t2.ok(evt.published, 'has published');
+
+            t2.end();
+        });
+    });
+
+    t.test('update nic', function (t2) {
+        mod_nic.update(t2, {
+            mac: mac,
+            params: {
+                allow_ip_spoofing: true,
+                state: 'stopped'
+            },
+            partialExp: {
+                allow_ip_spoofing: true,
+                state: 'stopped'
+            }
+        });
+    });
+
+    t.test('check for update nic event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'nic',
+                subResources: [
+                    'allow_ip_spoofing',
+                    'state'
+                ]
+            }, 'nic create event');
+            t2.deepEqual(evt.changedResourceId, mac, 'has correct mac');
+            t2.deepEqual(evt.cn_uuid, params.cn_uuid, 'has cn_uuid');
+            t2.ok(evt.etag, 'has etag');
+            t2.ok(evt.published, 'has published');
+
+            t2.end();
+        });
+    });
+
+    t.test('create aggr', function (t2) {
+        mod_aggr.create(t2, {
+            params: {
+                name: 'aggr1',
+                macs: [ mac ]
+            },
+            exp: {
+                id: aggrId,
+                belongs_to_uuid: cn_uuid,
+                lacp_mode: 'off',
+                macs: [ mac ],
+                name: 'aggr1'
+            }
+        });
+    });
+
+    t.test('check for create aggr event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'aggregation',
+                subResources: [ 'create' ]
+            }, 'aggr create event');
+            t2.deepEqual(evt.changedResourceId, aggrId);
+            t2.deepEqual(evt.belongs_to_uuid, cn_uuid);
+            t2.deepEqual(evt.name, 'aggr1');
+            t2.ok(evt.etag);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+
+    t.test('update aggr', function (t2) {
+        mod_aggr.update(t2, {
+            id: aggrId,
+            params: {
+                lacp_mode: 'active'
+            },
+            exp: {
+                id: aggrId,
+                belongs_to_uuid: cn_uuid,
+                lacp_mode: 'active',
+                macs: [ mac ],
+                name: 'aggr1'
+            }
+        });
+    });
+
+    t.test('check for update aggr event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'aggregation',
+                subResources: [ 'lacp_mode' ]
+            }, 'aggr update event');
+            t2.deepEqual(evt.changedResourceId, aggrId);
+            t2.deepEqual(evt.belongs_to_uuid, cn_uuid);
+            t2.deepEqual(evt.name, 'aggr1');
+            t2.ok(evt.etag);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+
+    t.test('delete aggr', function (t2) {
+        mod_aggr.del(t2, { id: aggrId });
+    });
+
+    t.test('check for delete aggr event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'aggregation',
+                subResources: [ 'delete' ]
+            }, 'aggr delete event');
+            t2.deepEqual(evt.changedResourceId, aggrId);
+            t2.deepEqual(evt.belongs_to_uuid, cn_uuid);
+            t2.deepEqual(evt.name, 'aggr1');
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+
+    t.test('delete nic', function (t2) {
+        mod_nic.del(t2, { mac: mac });
+    });
+
+    t.test('check for delete nic event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'nic',
+                subResources: [ 'delete' ]
+            }, 'nic create event');
+            t2.deepEqual(evt.changedResourceId, mac, 'has correct mac');
+            t2.deepEqual(evt.cn_uuid, params.cn_uuid, 'has cn_uuid');
+            t2.ok(evt.published, 'has published');
+
+            t2.end();
+        });
+    });
+});
+
+
+test('nic_tag/network delete events', function (t) {
+    t.test('delete network', function (t2) {
+        mod_net.del(t2, { uuid: NET.uuid });
+    });
+
+    t.test('check delete network event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'network',
+                subResources: [ 'delete' ]
+            }, 'network delete event');
+            t2.deepEqual(evt.changedResourceId, NET.uuid);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+
+    t.test('delete nic tag', function (t2) {
+        mod_nic_tag.del(t2, { name: TAG.name });
+    });
+
+    t.test('check delete nic_tag event', function (t2) {
+        FEED.once('readable', function () {
+            var evt = FEED.read();
+
+            t2.deepEqual(evt.changeKind, {
+                resource: 'nic_tag',
+                subResources: [ 'delete' ]
+            }, 'nic_tag delete event');
+            t2.deepEqual(evt.changedResourceId, TAG.name);
+            t2.ok(evt.published);
+
+            t2.end();
+        });
+    });
+});
+
+
+// --- Teardown
+
+test('Stop listener', function (t) {
+    FEED.close();
+    t.end();
+});
+
+test('Stop server', mod_server.close);
-- 
2.21.0

