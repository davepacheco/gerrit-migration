From 394d5ca4cdad4366b3013581218a361196c5f000 Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Fri, 6 Oct 2017 23:27:40 +0000
Subject: [PATCH] Add umem functions for array-style allocations/frees

---
 usr/src/lib/libumem/common/mapfile-vers |   9 +-
 usr/src/lib/libumem/common/stub_stand.c |  13 +++
 usr/src/lib/libumem/common/umem.c       | 112 +++++++++++++++++++++++-
 usr/src/lib/libumem/common/umem.h       |  12 ++-
 4 files changed, 140 insertions(+), 6 deletions(-)

diff --git a/usr/src/lib/libumem/common/mapfile-vers b/usr/src/lib/libumem/common/mapfile-vers
index 888a1570f2..1d4a70bf74 100644
--- a/usr/src/lib/libumem/common/mapfile-vers
+++ b/usr/src/lib/libumem/common/mapfile-vers
@@ -20,7 +20,7 @@
 #
 #
 # Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
-# Copyright (c) 2012, Joyent, Inc.  All rights reserved.
+# Copyright 2018, Joyent, Inc.
 #
 
 #
@@ -49,7 +49,6 @@ LOAD_SEGMENT umem {
 };
 $endif
 
-
 SYMBOL_VERSION SUNW_1.1 {
     global:
 	calloc			{ FLAGS = NODIRECT };
@@ -71,6 +70,12 @@ SYMBOL_VERSION SUNW_1.1 {
 SYMBOL_VERSION SUNWprivate_1.1 {
     global:
 	umem_alloc_align;
+	umem_calloc;
+	umem_cexcise;
+	umem_cfree;
+	umem_excise;
+	umem_realloc;
+	umem_reallocarray;
 	umem_free_align;
 	umem_reap;
 	vmem_add;
diff --git a/usr/src/lib/libumem/common/stub_stand.c b/usr/src/lib/libumem/common/stub_stand.c
index 7a26ea8b7f..92f39a5333 100644
--- a/usr/src/lib/libumem/common/stub_stand.c
+++ b/usr/src/lib/libumem/common/stub_stand.c
@@ -162,3 +162,16 @@ isspace(int c)
 	}
 	return (0);
 }
+
+#pragma weak __explicit_bzero_hook
+void
+__explicit_bzero_hook(void *buf, size_t len)
+{
+}
+
+void
+explicit_bzero(void *buf, size_t len)
+{
+	(void) memset(buf, 0, len);
+	__explicit_bzero_hook(buf, len);
+}
diff --git a/usr/src/lib/libumem/common/umem.c b/usr/src/lib/libumem/common/umem.c
index dbc738a049..e71f874cd8 100644
--- a/usr/src/lib/libumem/common/umem.c
+++ b/usr/src/lib/libumem/common/umem.c
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc.
  * Copyright (c) 2015 by Delphix. All rights reserved.
  */
 
@@ -2265,6 +2265,116 @@ _umem_free_align(void *buf, size_t size)
 	vmem_xfree(umem_memalign_arena, buf, size);
 }
 
+/* This is sqrt(SIZE_MAX + 1) */
+#define	MUL_NO_OVERFLOW ((size_t)1 << (sizeof (size_t) * 4))
+
+/*
+ * This is intended to look like the newer GCC / clang __builtin_umul_overflow
+ * intrinsics to facilitate using them in lieu of this function.
+ */
+static boolean_t
+mul_overflow(size_t nelem, size_t elsize, size_t *totalp)
+{
+	*totalp = nelem * elsize;
+
+	if ((nelem >= MUL_NO_OVERFLOW || elsize >= MUL_NO_OVERFLOW) &&
+	    nelem > 0 && SIZE_MAX / nelem < elsize)
+		return (B_TRUE);
+
+	return (B_FALSE);
+}
+
+void *
+umem_calloc(size_t nelem, size_t elsize, int umflag)
+{
+	size_t total;
+
+	if (nelem == 0 || elsize == 0) {
+		total = 0;
+	} else if (mul_overflow(nelem, elsize, &total)) {
+		errno = ENOMEM; /* Follow what calloc(3C) does */
+		return (NULL);
+	}
+
+	return (_umem_zalloc(total, umflag));
+}
+
+void *
+umem_realloc(void *ptr, size_t oldsize, size_t newsize, int umflag)
+{
+	void *newptr;
+
+	if (ptr == NULL)
+		return (_umem_alloc(newsize, umflag));
+
+	if ((newptr = _umem_alloc(newsize, umflag)) == NULL)
+		return (NULL);
+
+	(void) memcpy(newptr, ptr, MIN(oldsize, newsize));
+
+	if (umflag & UMEM_EXCISE)
+		umem_excise(ptr, oldsize);
+	else
+		_umem_free(ptr, oldsize);
+
+	return (newptr);
+}
+
+void *
+umem_reallocarray(void *ptr, size_t oldnelem, size_t nelem, size_t elsize,
+    int umflag)
+{
+	void *newptr;
+	size_t newtotal, oldtotal;
+
+	if (ptr == NULL)
+		return (umem_calloc(nelem, elsize, umflag));
+
+	if (mul_overflow(nelem, elsize, &newtotal)) {
+			errno = ENOMEM;
+			return (NULL);
+	}
+
+	if (mul_overflow(oldnelem, elsize, &oldtotal)) {
+		errno = EINVAL;
+		return (NULL);
+	}
+
+	if ((newptr = _umem_zalloc(newtotal, umflag)) == NULL)
+		return (NULL);
+
+	(void) memcpy(newptr, ptr, MIN(oldtotal, newtotal));
+
+	if (umflag & UMEM_EXCISE)
+		umem_excise(ptr, oldtotal);
+	else
+		_umem_free(ptr, oldtotal);
+
+	return (newptr);
+}
+
+void
+umem_cfree(void *ptr, size_t nelem, size_t elsize)
+{
+	_umem_free(ptr, nelem * elsize);
+}
+
+void
+umem_excise(void *ptr, size_t size)
+{
+	explicit_bzero(ptr, size);
+	_umem_free(ptr, size);
+}
+
+void
+umem_cexcise(void *ptr, size_t nelem, size_t elsize)
+{
+	size_t total = nelem * elsize;
+
+	explicit_bzero(ptr, total);
+	umem_free(ptr, total);
+}
+
 static void *
 umem_firewall_va_alloc(vmem_t *vmp, size_t size, int vmflag)
 {
diff --git a/usr/src/lib/libumem/common/umem.h b/usr/src/lib/libumem/common/umem.h
index f8dc475297..0295b634fe 100644
--- a/usr/src/lib/libumem/common/umem.h
+++ b/usr/src/lib/libumem/common/umem.h
@@ -22,13 +22,13 @@
 /*
  * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ *
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 #ifndef _UMEM_H
 #define	_UMEM_H
 
-#pragma ident	"%Z%%M%	%I%	%E% SMI"
-
 #include <sys/types.h>
 #include <sys/vmem.h>
 #include <stdlib.h>
@@ -39,7 +39,7 @@ extern "C" {
 
 #define	UMEM_DEFAULT	0x0000	/* normal -- may fail */
 #define	UMEM_NOFAIL	0x0100	/* Never fails -- may call exit(2) */
-
+#define	UMEM_EXCISE	0x0200	/* Zero any freed memory on realloc* calls */
 #define	UMEM_FLAGS	0xffff	/* all settable umem flags */
 
 extern void *umem_alloc(size_t, int);
@@ -47,6 +47,12 @@ extern void *umem_alloc_align(size_t, size_t, int);
 extern void *umem_zalloc(size_t, int);
 extern void umem_free(void *, size_t);
 extern void umem_free_align(void *, size_t);
+extern void *umem_realloc(void *, size_t, size_t, int);
+extern void *umem_calloc(size_t, size_t, int);
+extern void *umem_reallocarray(void *, size_t, size_t, size_t, int);
+extern void umem_cfree(void *, size_t, size_t);
+extern void umem_excise(void *, size_t);
+extern void umem_cexcise(void *, size_t, size_t);
 
 /*
  * Flags for umem_cache_create()
-- 
2.17.2 (Apple Git-113)

