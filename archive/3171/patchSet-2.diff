From ab33063230e1c602ed2437eb903e0c08ade6f9bf Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Fri, 6 Oct 2017 23:27:40 +0000
Subject: [PATCH] Add umem functions for array-style allocations/frees

---
 usr/src/lib/libumem/common/mapfile-vers |  9 ++-
 usr/src/lib/libumem/common/stub_stand.c | 13 ++++
 usr/src/lib/libumem/common/umem.c       | 82 ++++++++++++++++++++++++-
 usr/src/lib/libumem/common/umem.h       |  8 ++-
 4 files changed, 108 insertions(+), 4 deletions(-)

diff --git a/usr/src/lib/libumem/common/mapfile-vers b/usr/src/lib/libumem/common/mapfile-vers
index 888a1570f2..2f93b7e990 100644
--- a/usr/src/lib/libumem/common/mapfile-vers
+++ b/usr/src/lib/libumem/common/mapfile-vers
@@ -20,7 +20,7 @@
 #
 #
 # Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
-# Copyright (c) 2012, Joyent, Inc.  All rights reserved.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -49,6 +49,13 @@ LOAD_SEGMENT umem {
 };
 $endif
 
+SYMBOL_VERSION ILLUMOS_1.0 {
+    global:
+	umem_realloc;
+	umem_calloc;
+	umem_reallocarray;
+	umem_cfree;
+} SUNW_1.1;
 
 SYMBOL_VERSION SUNW_1.1 {
     global:
diff --git a/usr/src/lib/libumem/common/stub_stand.c b/usr/src/lib/libumem/common/stub_stand.c
index 7a26ea8b7f..92f39a5333 100644
--- a/usr/src/lib/libumem/common/stub_stand.c
+++ b/usr/src/lib/libumem/common/stub_stand.c
@@ -162,3 +162,16 @@ isspace(int c)
 	}
 	return (0);
 }
+
+#pragma weak __explicit_bzero_hook
+void
+__explicit_bzero_hook(void *buf, size_t len)
+{
+}
+
+void
+explicit_bzero(void *buf, size_t len)
+{
+	(void) memset(buf, 0, len);
+	__explicit_bzero_hook(buf, len);
+}
diff --git a/usr/src/lib/libumem/common/umem.c b/usr/src/lib/libumem/common/umem.c
index dbc738a049..28a25f7d12 100644
--- a/usr/src/lib/libumem/common/umem.c
+++ b/usr/src/lib/libumem/common/umem.c
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright (c) 2017, Joyent, Inc.
  * Copyright (c) 2015 by Delphix. All rights reserved.
  */
 
@@ -2265,6 +2265,86 @@ _umem_free_align(void *buf, size_t size)
 	vmem_xfree(umem_memalign_arena, buf, size);
 }
 
+#pragma weak umem_calloc = _umem_calloc
+void *
+_umem_calloc(size_t nelem, size_t elsize, int umflag)
+{
+	size_t total;
+
+	if (nelem == 0 || elsize == 0) {
+		total = 0;
+	} else {
+		total = nelem * elsize;
+
+		/* check for overflow */
+		if (total / nelem != elsize) {
+			errno = ENOMEM; /* Follow what calloc(3C) does */
+			return (NULL);
+		}
+	}
+
+	return (_umem_zalloc(total, umflag));
+}
+
+#pragma weak umem_realloc = _umem_realloc
+void *
+_umem_realloc(void *ptr, size_t oldsize, size_t newsize, int umflag)
+{
+	void *newptr;
+
+	if (ptr == NULL)
+		return (_umem_alloc(newsize, umflag));
+
+	if ((newptr = _umem_alloc(newsize, umflag)) == NULL)
+		return (NULL);
+
+	(void) memcpy(newptr, ptr, MIN(oldsize, newsize));
+	explicit_bzero(ptr, oldsize);
+	_umem_free(ptr, oldsize);
+
+	return (newptr);
+}
+
+#pragma weak umem_reallocarray = _umem_reallocarray
+void *
+_umem_reallocarray(void *ptr, size_t oldnelem, size_t nelem, size_t elsize,
+    int umflag)
+{
+	void *newptr;
+	size_t newtotal, oldtotal;
+
+	if (ptr == NULL)
+		return (_umem_calloc(nelem, elsize, umflag));
+
+	newtotal = nelem * elsize;
+	if (newtotal / nelem != elsize) {
+			errno = ENOMEM;
+			return (NULL);
+	}
+
+	oldtotal = oldnelem * elsize;
+	if (oldtotal / nelem != elsize) {
+		errno = EINVAL;
+		return (NULL);
+	}
+
+	if ((newptr = _umem_zalloc(newtotal, umflag)) == NULL)
+		return (NULL);
+
+	(void) memcpy(newptr, ptr, MIN(oldtotal, newtotal));
+	explicit_bzero(ptr, oldtotal);
+	_umem_free(ptr, oldtotal);
+
+	return (newptr);
+}
+
+#pragma weak umem_cfree = _umem_cfree
+void
+_umem_cfree(void *ptr, size_t nelem, size_t elsize)
+{
+	_umem_free(ptr, nelem * elsize);
+}
+
 static void *
 umem_firewall_va_alloc(vmem_t *vmp, size_t size, int vmflag)
 {
diff --git a/usr/src/lib/libumem/common/umem.h b/usr/src/lib/libumem/common/umem.h
index f8dc475297..f5891ac1c1 100644
--- a/usr/src/lib/libumem/common/umem.h
+++ b/usr/src/lib/libumem/common/umem.h
@@ -22,13 +22,13 @@
 /*
  * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 #ifndef _UMEM_H
 #define	_UMEM_H
 
-#pragma ident	"%Z%%M%	%I%	%E% SMI"
-
 #include <sys/types.h>
 #include <sys/vmem.h>
 #include <stdlib.h>
@@ -47,6 +47,10 @@ extern void *umem_alloc_align(size_t, size_t, int);
 extern void *umem_zalloc(size_t, int);
 extern void umem_free(void *, size_t);
 extern void umem_free_align(void *, size_t);
+extern void *umem_realloc(void *, size_t, size_t, int);
+extern void *umem_calloc(size_t, size_t, int);
+extern void *umem_reallocarray(void *, size_t, size_t, size_t, int);
+extern void umem_cfree(void *, size_t, size_t);
 
 /*
  * Flags for umem_cache_create()
-- 
2.21.0

