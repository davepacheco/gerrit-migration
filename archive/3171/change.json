{"project":"joyent/illumos-joyent","branch":"master","topic":"IKEV2","id":"Ic3cafc282e4db617f1feb2c6ad8bbf45044ba13a","number":"3171","subject":"Add umem functions for array-style allocations/frees","owner":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"url":"https://cr.joyent.us/3171","commitMessage":"Add umem functions for array-style allocations/frees\n","createdOn":1515458658,"lastUpdated":1518805262,"open":true,"status":"NEW","comments":[{"timestamp":1515458658,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 1."},{"timestamp":1515458692,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Topic set to IKEV2"},{"timestamp":1515513528,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 1:\n\n(2 comments)\n\nAlso, do you need to update umem man pages?"},{"timestamp":1515602347,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 2."},{"timestamp":1515602359,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 1:\n\n(2 comments)"},{"timestamp":1515624611,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1515625105,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\nWe can be sure to note the behavior if we decide to keep it.\n\nTo date, the discussion relevant to this change (review comments from round 1 of IKE reviews) was \u0027let\u0027s add something like realloc/reallocarray/etc. to umem\u0027 and no further specifics, so this is just a first attempt at addressing that.  I\u0027d prefer if we can get reasonable agreement on the form of the APIs (either the current form or after a bit of iteration) before worrying about the man pages -- though having the man pages updated prior to any integration of this specific work is something we/I should do."},{"timestamp":1516947143,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 2:\n\n(8 comments)\n\nThese have been sitting here for a little while. I\u0027m not sure this is complete, but I wanted to try and get out what I could while I had something."},{"timestamp":1518725049,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(7 comments)\n\nI\u0027ll hold off on the man page bits until we\u0027re happy we want to make them public."},{"timestamp":1518725056,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 3."},{"timestamp":1518725874,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 3:\n\nAlso to reiterate -- the current plan is to integrate this around the same time as ikev2 unless someone needs it sooner.  It was just done as it\u0027s own review to help break up the in-progress ikev2 review into some smaller logical chunks."},{"timestamp":1518735343,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 3:\n\nCan/should you add entries to libumem.3lib and friends?"},{"timestamp":1518736162,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 3:\n\nYes -- but I think it\u0027d be more appropriate to wait until we make these functions non-private."},{"timestamp":1518740994,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(1 comment)\n\nIn general this looks good. I agree that it\u0027s fine not to document this for the moment."},{"timestamp":1518803822,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 3:\n\n(1 comment)"},{"timestamp":1518804633,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 4."},{"timestamp":1518805262,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 4:\n\nI\u0027ve masked off the UMEM_EXCISE option for the umem_*realloc() calls for now.\n\nThinking about it more, I could see arguments where one might want something like:\n    int flags \u003d UMEM_NOFAIL|UMEM_EXCISE;\nand use that everywhere when calling umem functions (suggesting that umem_*alloc() should just ignore UMEM_EXCISE if not appropriate.\n\nHaving said that, it\u0027s probably something that we can discuss outside of trying to do a review and come back with a better idea of the direction we want to go -- these were mostly placeholders for IKEv2, and aren\u0027t intended to integrate any time soon (mostly just as a sanity check that nothing too crazy is going on).\n\nI think any approach we decide (including ditching them from libumem completely) isn\u0027t going to paint IKEv2 into a corner, so there\u0027s no urgency on doing at lot of review on this right now (esp. given all the other stuff going on)."}],"currentPatchSet":{"number":"4","revision":"c3cafc282e4db617f1feb2c6ad8bbf45044ba13a","parents":["dcfabe727de41d525e4b2a94b88c62f519a259de"],"ref":"refs/changes/71/3171/4","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1518804633,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/libumem/common/mapfile-vers","type":"MODIFIED","insertions":7,"deletions":-2},{"file":"usr/src/lib/libumem/common/stub_stand.c","type":"MODIFIED","insertions":13,"deletions":0},{"file":"usr/src/lib/libumem/common/umem.c","type":"MODIFIED","insertions":118,"deletions":-1},{"file":"usr/src/lib/libumem/common/umem.h","type":"MODIFIED","insertions":9,"deletions":-3}],"sizeInsertions":147,"sizeDeletions":-6},"patchSets":[{"number":"1","revision":"43c78dac822993e85903c7a97b9947932ead214a","parents":["dcfabe727de41d525e4b2a94b88c62f519a259de"],"ref":"refs/changes/71/3171/1","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1515458658,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/lib/libumem/common/umem.c","line":2268,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why the pragma?"},{"file":"usr/src/lib/libumem/common/umem.c","line":2281,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Good question.  Regular calloc/reallocarray does ENOMEM, per its man page:\n\nENOMEM   The physical limits of the system are exceeded by\n         size bytes of memory which cannot be allocated, or\n         there\u0027s integer overflow in reallocarray().\n\nSo lose the XXX, and cite normal calloc() instead."},{"file":"usr/src/lib/libumem/common/umem.c","line":2281,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/lib/libumem/common/umem.c","line":2302,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Does vanilla realloc() do this?  Or is this new?"},{"file":"usr/src/lib/libumem/common/umem.c","line":2302,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"This is new -- just being paranoid."},{"file":"usr/src/lib/libumem/common/umem.c","line":2302,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"If/when you do a man page, mention this as a distinguishing characteristic.  Also, if umem debug is enabled, the _umem_free() will do this with 0xdeadbeef instead, so maybe only do this when the right umem flag is NOT set?"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/libumem/common/mapfile-vers","type":"MODIFIED","insertions":8,"deletions":-1},{"file":"usr/src/lib/libumem/common/stub_stand.c","type":"MODIFIED","insertions":13,"deletions":0},{"file":"usr/src/lib/libumem/common/umem.c","type":"MODIFIED","insertions":81,"deletions":-1},{"file":"usr/src/lib/libumem/common/umem.h","type":"MODIFIED","insertions":6,"deletions":-2}],"sizeInsertions":108,"sizeDeletions":-4},{"number":"2","revision":"ab33063230e1c602ed2437eb903e0c08ade6f9bf","parents":["dcfabe727de41d525e4b2a94b88c62f519a259de"],"ref":"refs/changes/71/3171/2","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1515602347,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/lib/libumem/common/mapfile-vers","line":52,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please put this in a private section until we upstream this and are happy committing to this API."},{"file":"usr/src/lib/libumem/common/mapfile-vers","line":52,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/lib/libumem/common/umem.c","line":2268,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we need the weak pragmas? Are you sure those aren\u0027t leftovers from the synonyms days?\n\nNote, this applies to all the functions here."},{"file":"usr/src/lib/libumem/common/umem.c","line":2268,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I think it\u0027s a holdover from the days prior to direct binding.  I\u0027ll remove them for the newly added ones, but will leave the existing ones as is out of caution."},{"file":"usr/src/lib/libumem/common/umem.c","line":2280,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason that you do overflow checking this way versus say what reallocarray does?"},{"file":"usr/src/lib/libumem/common/umem.c","line":2280,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"That is how calloc(3C) does it, so that\u0027s where it comes from.  But (see below), I\u0027ll move this into a common function."},{"file":"usr/src/lib/libumem/common/umem.c","line":2302,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Traditionally the memory freed this way is not subject to being explicitly zeroed. If we want to use it in contexts where that would help (where we\u0027re growing a buffer of secrets), then this should be controlled by passing in a new  flag in umflag, I believe."},{"file":"usr/src/lib/libumem/common/umem.c","line":2302,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll create a UMEM_EXCISE flag that does this."},{"file":"usr/src/lib/libumem/common/umem.c","line":2329,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would replace this with the the current reallocarray() style checks."},{"file":"usr/src/lib/libumem/common/umem.c","line":2329,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done.  Though I\u0027d like to put the logic into a common function along the line of:\n\nstatic boolean_t\nmul_overflow(size_t a, size_t b, size_t *c)\n{\n   *c \u003d a * b;\n   return (check_if_overflowed ? B_TRUE : B_FALSE);\n}\n\nThat mimics what the gcc (5.1 and later) and clang __builtin_umul_overflow() intrinsics do.  It shouldn\u0027t hurt anything, and should make it a bit easier to utilize those intrinsics whenever we transition to newer compilers."},{"file":"usr/src/lib/libumem/common/umem.c","line":2335,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would again make this zeroing conditional on a flag."},{"file":"usr/src/lib/libumem/common/umem.c","line":2335,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/lib/libumem/common/umem.c","line":2343,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I can see how this makes sense to add. Should we be adding a version that takes care of zeroing it as well ala freezero?\n\nMaybe there should be a umem_excise and umem_cexcise that does the explicit bzero and then does the counting frees."},{"file":"usr/src/lib/libumem/common/umem.c","line":2343,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/libumem/common/mapfile-vers","type":"MODIFIED","insertions":8,"deletions":-1},{"file":"usr/src/lib/libumem/common/stub_stand.c","type":"MODIFIED","insertions":13,"deletions":0},{"file":"usr/src/lib/libumem/common/umem.c","type":"MODIFIED","insertions":81,"deletions":-1},{"file":"usr/src/lib/libumem/common/umem.h","type":"MODIFIED","insertions":6,"deletions":-2}],"sizeInsertions":108,"sizeDeletions":-4},{"number":"3","revision":"394d5ca4cdad4366b3013581218a361196c5f000","parents":["dcfabe727de41d525e4b2a94b88c62f519a259de"],"ref":"refs/changes/71/3171/3","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1518725056,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/lib/libumem/common/umem.c","line":2299,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Here and in pretty much all the other places we\u0027re kind of blindly passing in the UMEM_EXCISE flag to the other umem functions.\n\nDo we want this flag to be passed through? Should umem_alloc and co. just ignore this? I guess they do that for other flags, but I\u0027m not sure."},{"file":"usr/src/lib/libumem/common/umem.c","line":2299,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It should, but I can mask it off to be safe.\n\nOne other thing I thought of -- should overflow + UMEM_NOFAIL have special behavior? Offhand, I can think of a few possibilities:\n  - We invoke the umem_nofail callback (if defined), though it has no way to know that the failure is due to overflow vs. low memory\n  - Abort/exit (possibly configurable).  Arguably if passed UMEM_NOFAIL, the caller is expecting a valid address (i.e. shouldn\u0027t need to check NULL, should be able to read/write without error), yet if the sizes overflow, there is never a way we can satisfy the request, so doing an abort() or the like seems the only option with the current api.\n  - Additional handler like umem_nofail that can be invoked in such conditions."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/libumem/common/mapfile-vers","type":"MODIFIED","insertions":7,"deletions":-2},{"file":"usr/src/lib/libumem/common/stub_stand.c","type":"MODIFIED","insertions":13,"deletions":0},{"file":"usr/src/lib/libumem/common/umem.c","type":"MODIFIED","insertions":111,"deletions":-1},{"file":"usr/src/lib/libumem/common/umem.h","type":"MODIFIED","insertions":9,"deletions":-3}],"sizeInsertions":140,"sizeDeletions":-6},{"number":"4","revision":"c3cafc282e4db617f1feb2c6ad8bbf45044ba13a","parents":["dcfabe727de41d525e4b2a94b88c62f519a259de"],"ref":"refs/changes/71/3171/4","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1518804633,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/lib/libumem/common/mapfile-vers","type":"MODIFIED","insertions":7,"deletions":-2},{"file":"usr/src/lib/libumem/common/stub_stand.c","type":"MODIFIED","insertions":13,"deletions":0},{"file":"usr/src/lib/libumem/common/umem.c","type":"MODIFIED","insertions":118,"deletions":-1},{"file":"usr/src/lib/libumem/common/umem.h","type":"MODIFIED","insertions":9,"deletions":-3}],"sizeInsertions":147,"sizeDeletions":-6}],"allReviewers":[{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}]}