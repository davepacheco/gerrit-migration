commit 42c93dd0af7d4c1c8a1603068ae007cc47ca7308 (refs/changes/98/1898/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-05-04T12:44:20+02:00 (2 years, 5 months ago)
    
    TOOLS-1643 sdcadm: use cueball Resolver for waitUntilZone[In|OutOf]DNS instead of system dig

diff --git a/lib/common.js b/lib/common.js
index 0c8f3e5..5e5248a 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -21,6 +21,7 @@ var util = require('util');
 var vasync = require('vasync');
 var backoff = require('backoff');
 var once = require('once');
+var cueball = require('cueball');
 
 var errors = require('./errors');
 var InternalError = errors.InternalError;
@@ -640,38 +641,66 @@ function getZoneIP(opts, cb) {
     });
 }
 
-function digDomain(opts, cb) {
-    assert.object(opts, 'opts');
-    assert.string(opts.domain, 'opts.domain');
-    assert.object(opts.log, 'opts.log');
-    assert.func(cb, 'cb');
-
-    var argv = [
-        '/usr/sbin/dig',
-        opts.domain,
-        '+short'
-    ];
-
-    execFilePlus({
-        argv: argv,
-        log: opts.log
-    }, function (err, stdout, stderr) {
-        if (err) {
-            return cb(err);
+/*
+ * Create an instance of cueball's resolver using binder for
+ * resolution of the given service. Optionally, can pass the
+ * port the service should be listening to (default to port 80)
+ */
+function resolverForService(options) {
+    assert.object(options, 'options');
+    assert.object(options.sdcadm, 'options.sdcadm');
+    assert.string(options.service, 'options.service');
+    assert.optionalNumber(options.defaultPort, 'options.defaultPort');
+
+    var sdcadm = options.sdcadm;
+    var host = format('%s.%s.%s',
+            options.service,
+            sdcadm.config.datacenter_name,
+            sdcadm.config.dns_domain);
+    var defPort = options.defaultPort || 80;
+
+    var resolver = cueball.resolverForIpOrDomain({
+        input: host,
+        resolverConfig: {
+            resolvers: [format('binder.%s.%s',
+                        sdcadm.config.datacenter_name,
+                        sdcadm.config.dns_domain)],
+            service: '_http._tcp',
+            defaultPort: defPort,
+            recovery: {
+                default: {
+                    timeout: 1000,
+                    retries: 1,
+                    delay: 1000,
+                    maxDelay: 1000
+                }
+            },
+            log: sdcadm.log
         }
-
-        var ips = stdout.trim().split('\n');
-        return cb(null, ips);
     });
+
+    return (resolver);
 }
 
 
+/*
+ * Wait until the given zone is out of DNS using the provided
+ * cueball's resolvers backends.
+ *
+ * Resolver will be created by procedure functions using the function
+ * resolverForService above.
+ *
+ * The backends object has a key/value format, where the keys are
+ * cueball's keys for each backend, and the values are the IPs
+ * associated with the domain we're looking for in DNS.
+ */
 function waitUntilZoneInDNS(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.alias, 'opts.alias');
-    assert.string(opts.domain, 'opts.domain');
+    assert.string(opts.server, 'opts.server');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.backends, 'opts.backends');
     assert.func(cb, 'cb');
 
     getZoneIP({
@@ -680,47 +709,50 @@ function waitUntilZoneInDNS(opts, cb) {
         log: opts.log
     }, function (err, ip) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
+
         var counter = 0;
         var limit = 60;
 
         function _checkDNS() {
-            digDomain({
-                domain: opts.domain,
-                log: opts.log
-            }, function (err2, ips) {
-                if (err2) {
-                    return cb(err2);
-                }
+            var alreadyInDns = false;
 
-                if (ips.indexOf(ip) !== -1) {
-                    return cb(null);
+            Object.keys(opts.backends).forEach(function (k) {
+                if (opts.backends[k] === ip) {
+                    alreadyInDns = true;
                 }
+            });
 
-                counter += 1;
+            if (alreadyInDns) {
+                cb();
+                return;
+            }
 
-                if (counter < limit) {
-                    return setTimeout(_checkDNS, 5000);
-                } else {
-                    return cb(format(
-                        'New %s ($uuid) zone\'s IP %s did not ' +
-                        'enter DNS', opts.alias, ip));
-                }
-            });
+            counter += 1;
+
+            if (counter < limit) {
+                setTimeout(_checkDNS, 5000);
+            } else {
+                cb(format(
+                    'New %s ($uuid) zone\'s IP %s did not ' +
+                    'enter DNS', opts.alias, ip));
+            }
         }
 
-        return _checkDNS();
+        _checkDNS();
     });
-
 }
 
+
 function waitUntilZoneOutOfDNS(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.alias, 'opts.alias');
-    assert.string(opts.domain, 'opts.domain');
+    assert.string(opts.server, 'opts.server');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.backends, 'opts.backends');
     assert.func(cb, 'cb');
 
     getZoneIP({
@@ -729,37 +761,34 @@ function waitUntilZoneOutOfDNS(opts, cb) {
         log: opts.log
     }, function (err, ip) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         var counter = 0;
         var limit = 60;
 
         function _checkDNS() {
-            digDomain({
-                domain: opts.domain,
-                log: opts.log
-            }, function (err2, ips) {
-                if (err2) {
-                    return cb(err2);
-                }
+            var ips = Object.keys(opts.backends).map(function (k) {
+                return opts.backends[k];
+            });
 
-                if (ips.indexOf(ip) === -1) {
-                    return cb(null);
-                }
+            if (ips.indexOf(ip) === -1) {
+                cb();
+                return;
+            }
 
-                counter += 1;
+            counter += 1;
 
-                if (counter < limit) {
-                    return setTimeout(_checkDNS, 5000);
-                } else {
-                    return cb(format(
-                        'New %s ($uuid) zone\'s IP %s did not ' +
-                        'leave DNS', opts.alias, ip));
-                }
-            });
+            if (counter < limit) {
+                setTimeout(_checkDNS, 5000);
+            } else {
+                cb(format(
+                    'New %s ($uuid) zone\'s IP %s did not ' +
+                    'leave DNS', opts.alias, ip));
+            }
         }
 
-        return _checkDNS();
+        _checkDNS();
     });
 }
 
@@ -1664,7 +1693,7 @@ module.exports = {
     execPlus: execPlus,
     spawnRun: spawnRun,
     getZoneIP: getZoneIP,
-    digDomain: digDomain,
+    resolverForService: resolverForService,
     waitUntilZoneInDNS: waitUntilZoneInDNS,
     waitUntilZoneOutOfDNS: waitUntilZoneOutOfDNS,
     vmGetRemote: vmGetRemote,
diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index bc4f2a7..babbf0c 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -610,7 +610,7 @@ function waitUntilVMNotInDNS(arg, next) {
         uuid: zonename,
         server: server,
         alias: arg.alias,
-        domain: arg.domain,
+        backends: arg.backends,
         log: arg.log
     }, next);
 }
@@ -624,7 +624,7 @@ function waitUntilVmInDNS(arg, next) {
         uuid: zonename,
         server: server,
         alias: arg.alias,
-        domain: arg.domain,
+        backends: arg.backends,
         log: arg.log
     }, next);
 }
diff --git a/lib/procedures/update-moray-v2.js b/lib/procedures/update-moray-v2.js
index 980070e..6f7cee7 100644
--- a/lib/procedures/update-moray-v2.js
+++ b/lib/procedures/update-moray-v2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -70,6 +70,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
     assert.func(cb, 'cb');
 
     var self = this;
+    var sdcadm = opts.sdcadm;
     var progress = opts.progress;
     var rollback = opts.plan.rollback ||Â false;
 
@@ -125,6 +126,29 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
         }
 
         funcs.push(s.updateSapiSvc);
+        funcs.push(
+            /*
+             * Set ctx.resolver and ctx.backends needed by waitUntilVmInDNS and
+             * waitUntilVMNotInDNS
+             */
+            function createResolver(ctx, next) {
+                ctx.resolver = common.resolverForService({
+                    sdcadm: sdcadm,
+                    service: change.service.name
+                });
+                ctx.backends = {};
+                ctx.resolver.on('added', function (key, backend) {
+                    ctx.backends[key] = backend.address;
+                });
+
+                ctx.resolver.on('removed', function (key) {
+                    delete ctx.backends[key];
+                });
+
+                ctx.resolver.start();
+                next();
+            }
+        );
 
         if (arg.HA) {
             change.insts.forEach(function (ins) {
@@ -145,14 +169,14 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                             server: ins.server
                         }, next);
                     },
-                    function waitUntilInstNotInDNS(_, next) {
+                    function waitUntilInstNotInDNS(ctx, next) {
                         s.waitUntilVMNotInDNS({
                             log: opts.log,
                             progress: progress,
                             zonename: ins.zonename,
                             alias: ins.alias,
                             server: ins.server,
-                            domain: change.service.metadata.SERVICE_DOMAIN
+                            backends: ctx.backends
                         }, next);
                     },
                     function reprovisionInst(_, next) {
@@ -170,14 +194,14 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                             ins.service, ins.zonename);
                         setTimeout(next, 15 * 1000);
                     },
-                    function waitUntilInstInDNS(_, next) {
+                    function waitUntilInstInDNS(ctx, next) {
                         s.waitUntilVmInDNS({
                             log: opts.log,
                             progress: progress,
                             zonename: ins.zonename,
                             server: ins.server,
                             alias: ins.alias,
-                            domain: change.service.metadata.SERVICE_DOMAIN
+                            backends: ctx.backends
                         }, next);
                     }
                 ]);
@@ -204,14 +228,14 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                 s.waitForTmpInstToBeUp,
                 s.getTmpInstanceUUID,
                 s.checkIfTmpVMHasErrors,
-                function waitUntilTmpInDNS(_, next) {
+                function waitUntilTmpInDNS(ctx, next) {
                     return s.waitUntilVmInDNS({
                         log: opts.log,
                         progress: progress,
                         zonename: arg.tmpUUID,
                         alias: arg.tmpAlias,
                         server: inst.server,
-                        domain: change.service.metadata.SERVICE_DOMAIN
+                        backends: ctx.backends
                     }, next);
                 },
                 function disableVMRegistrar(_, next) {
@@ -221,26 +245,26 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: inst.zonename
                     }, next);
                 },
-                function waitUntilVMNotInDNS(_, next) {
+                function waitUntilVMNotInDNS(ctx, next) {
                     s.waitUntilVMNotInDNS({
                         log: opts.log,
                         progress: progress,
                         zonename: inst.zonename,
                         server: inst.server,
                         alias: inst.alias,
-                        domain: change.service.metadata.SERVICE_DOMAIN
+                        backends: ctx.backends
                     }, next);
                 },
                 s.reprovision,
                 s.waitForInstToBeUp,
-                function waitUntilVmInDNS(_, next) {
+                function waitUntilVmInDNS(ctx, next) {
                     s.waitUntilVmInDNS({
                         log: opts.log,
                         progress: progress,
                         zonename: inst.zonename,
                         alias: inst.alias,
                         server: inst.server,
-                        domain: change.service.metadata.SERVICE_DOMAIN
+                        backends: ctx.backends
                     }, next);
                 },
                 function disableTmpVMRegistrar(_, next) {
@@ -250,14 +274,14 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
                         zonename: arg.tmpUUID
                     }, next);
                 },
-                function waitUntilTmpVMNotInDNS(_, next) {
+                function waitUntilTmpVMNotInDNS(ctx, next) {
                     return s.waitUntilVMNotInDNS({
                         log: opts.log,
                         progress: progress,
                         zonename: arg.tmpUUID,
                         alias: arg.tmpAlias,
                         server: inst.server,
-                        domain: change.service.metadata.SERVICE_DOMAIN
+                        backends: ctx.backends
                     }, next);
                 },
                 s.stopTmpVm,
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index e9288df..af319cd 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -171,6 +171,29 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     return next();
                 });
             },
+
+            /*
+             * Set ctx.resolver and ctx.backends needed by waitUntilVmInDNS and
+             * waitUntilVMNotInDNS
+             */
+            function createResolver(ctx, next) {
+                ctx.resolver = common.resolverForService({
+                    sdcadm: sdcadm,
+                    service: change.service.name
+                });
+                ctx.backends = {};
+                ctx.resolver.on('added', function (key, backend) {
+                    ctx.backends[key] = backend.address;
+                });
+
+                ctx.resolver.on('removed', function (key) {
+                    delete ctx.backends[key];
+                });
+
+                ctx.resolver.start();
+                next();
+            },
+
             /**
              * Create a temporary "sapiXtmp" instance when no HA
              */
@@ -178,7 +201,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             s.waitForTmpInstToBeUp,
             s.getTmpInstanceUUID,
             s.checkIfTmpVMHasErrors,
-            function waitUntilTmpInDNS(_, next) {
+            function waitUntilTmpInDNS(ctx, next) {
                 if (arg.HA) {
                     return next();
                 }
@@ -188,7 +211,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: arg.tmpUUID,
                     alias: arg.tmpAlias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    backends: ctx.backends
                 }, next);
             },
             // Common to both HA/no-HA
@@ -199,26 +222,26 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: inst.zonename
                 }, next);
             },
-            function waitUntilVMNotInDNS(_, next) {
+            function waitUntilVMNotInDNS(ctx, next) {
                 s.waitUntilVMNotInDNS({
                     log: opts.log,
                     progress: progress,
                     zonename: inst.zonename,
                     alias: inst.alias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    backends: ctx.backends
                 }, next);
             },
             s.reprovision,
             s.waitForInstToBeUp,
-            function waitUntilVmInDNS(_, next) {
+            function waitUntilVmInDNS(ctx, next) {
                 s.waitUntilVmInDNS({
                     log: opts.log,
                     progress: progress,
                     zonename: inst.zonename,
                     alias: inst.alias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    backends: ctx.backends
                 }, next);
             },
             // And, again, no-HA only:,
@@ -233,7 +256,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: arg.tmpUUID
                 }, next);
             },
-            function waitUntilTmpVMNotInDNS(_, next) {
+            function waitUntilTmpVMNotInDNS(ctx, next) {
                 if (arg.HA) {
                     return next();
                 }
@@ -243,11 +266,15 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
                     zonename: arg.tmpUUID,
                     alias: arg.tmpAlias,
                     server: inst.server,
-                    domain: change.service.metadata.SERVICE_DOMAIN
+                    backends: ctx.backends
                 }, next);
             },
             s.stopTmpVm,
-            s.destroyTmpVM
+            s.destroyTmpVM,
+            function stopResolver(ctx, next) {
+                ctx.resolver.stop();
+                next();
+            }
         ]), arg: arg}, nextSvc);
     }
 
