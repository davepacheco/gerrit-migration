From afe4542660c880e295e7632c1b5c455c4ff1f531 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Sat, 3 Dec 2016 00:34:25 +0000
Subject: [PATCH] MORAY-363 Validate index names Reviewed by: Patrick Mooney
 <patrick.mooney@joyent.com> Reviewed by: David Pacheco <dap@joyent.com>
 Approved by: David Pacheco <dap@joyent.com>

---
 test/buckets.test.js | 97 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 97 insertions(+)

diff --git a/test/buckets.test.js b/test/buckets.test.js
index 6462d72..1417ec0 100644
--- a/test/buckets.test.js
+++ b/test/buckets.test.js
@@ -379,6 +379,103 @@ test('create bucket bad index type', function (t) {
     });
 });
 
+test('bad index names', function (t) {
+    var names = [
+        // Reserved names
+        '_etag', '_id', '_key', '_mtime', '_rver', '_txn_snap',
+        '_value', '_vnode', '_atime', '_ctime',
+
+        // Reserved names, different case
+        '_ETag', '_ID', '_Key', '_MTime', '_Value', '_VNODE',
+
+        // Disallowed characters
+        'a!b', 'b@c', '&', '*', 'a+b', '~name', 'a-b',
+
+        // Empty string
+        '',
+
+        // Restrictions on names with leading underscores
+        '__foo', '_foo_2', '_bar_a', '___a',
+
+        // Numbers at the beginning
+        '1', '2nd', '5column',
+
+        // Ending with an underscore
+        '_', 'foo_', 'a2_',
+
+        // Begins with "moray"
+        '_moray', '__moray', '___Moray', '_moray_column', 'moray',
+        'MORAY', 'morayC', 'moray_index', 'MoraY_foo', 'moray_bar'
+    ];
+
+    function isInvalidBucketErr(err) {
+        return err && VError.hasCauseWithName(err, 'InvalidBucketConfigError');
+    }
+
+    vasync.forEachPipeline({
+        inputs: names,
+        func: function checkIndexName(name, cb) {
+            var schema = { index: { } };
+            schema.index[name] = { type: 'string' };
+
+            c.createBucket(b, schema, function (err) {
+                t.ok(isInvalidBucketErr(err),
+                    JSON.stringify(name) + ' should be rejected');
+                cb();
+            });
+        }
+    }, function () {
+        t.end();
+    });
+});
+
+test('good index names', function (t) {
+    var names = [
+        // Contains an underscore
+        '_v', '_foo', '_bar', 'belongs_to_uuid', 'zfs_io_priority',
+
+        // Mixed case
+        'wantInputRemoved', 'wantRetry', 'timeDone',
+
+        // All upper-case
+        'ZFS', 'AVAILABLE_MB',
+
+        // Numbers at the end
+        'foo1', 'number10', '_v2',
+
+        // Index names from Triton and Manta
+        '_default', '_owner', '_replicated', 'result', 'status', 'target',
+        'timestamp', 'transient', 'updated_at', 'urn', 'v', 'valid',
+        'version', 'worker',
+
+        // Single letter
+        'a', 'b', 'v', 'A', 'Z', 'V'
+    ];
+
+    t.test('create bucket', function (t2) {
+        c.createBucket(b, {}, function (err) {
+            t2.ifError(err);
+            t2.end();
+        });
+    });
+
+
+    t.test('update bucket w/ different index names', function (t2) {
+        vasync.forEachPipeline({
+            inputs: names,
+            func: function checkIndexName(name, cb) {
+                var schema = { index: {} };
+                schema.index[name] = { type: 'string' };
+                c.updateBucket(b, schema, function (err) {
+                    t2.ifError(err, JSON.stringify(name) + ' should be okay');
+                    cb();
+                });
+            }
+        }, function () {
+            t2.end();
+        });
+    });
+});
 
 test('create bucket triggers not function', function (t) {
     c.createBucket(b, {pre: ['foo']}, function (err) {
-- 
2.21.0

