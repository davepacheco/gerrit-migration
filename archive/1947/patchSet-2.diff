commit d487752a0edb3f56d40c1f4616ba0fd005dbbf87 (refs/changes/47/1947/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-05-17T20:35:05+00:00 (2 years, 5 months ago)
    
    DAPI-340 Allow VMs to provide NIC tag alternatives

diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..b9f5092 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit b9f50929ee2df140fd2d111f053b20593e068cdc
diff --git a/lib/algorithms/hard-filter-vlans.js b/lib/algorithms/hard-filter-vlans.js
index 1f8cecf..657aacf 100644
--- a/lib/algorithms/hard-filter-vlans.js
+++ b/lib/algorithms/hard-filter-vlans.js
@@ -5,39 +5,73 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
- * Returns servers which have all the required VLANs.
+ * Returns servers which have all the required NIC Tags.
  *
  * Servers have NIC "tags" attached to each NIC, which is visible in that
  * server's sysinfo. Tags are a means of telling whether certain networks are
- * accessible on a NIC. When a server is requested from DAPI, a set of tags are
- * provided, which DAPI then attempts to match against the union of all tags
- * present on a server's NICs.
+ * accessible on a NIC. When a server is requested from DAPI, a set of tag
+ * requirements is provided, which DAPI then attempts to match against the union
+ * of all tags present on a server's NICs.
  *
- * In short, if a server doesn't have all the requested tags on one or more of
- * its NICs, that means it cannot reach all the networks that the new VM being
- * allocated must be able to reach, thus the server is dropped from further
- * consideration.
+ * The requirements are expressed as an array of each network or pool's NIC tag
+ * options. While a network can only be on a single NIC tag, and will therefore
+ * only ever have an array with a single possibility, a network pool may contain
+ * networks on different tags, and will therefore provide several alternative
+ * choices.
+ *
+ * As an example, consider an attempt to provision on a network and two pools.
+ * In such a scenario, we might receive the following "nic_tag_requirements":
+ *
+ * [
+ *   [ "sdc_overlay" ],
+ *   [ "r1external", "r2external", "r3external" ],
+ *   [ "r1internal", "r2internal", "r3internal" ]
+ * ]
+ *
+ * And we might have the following choices for servers:
+ *
+ * Server 1: admin, r1external, r1internal, sdc_underlay, sdc_overlay
+ * Server 2: admin, r1external, r1internal
+ * Server 3: admin, r2external, r2internal
+ * Server 4: admin, r3external, r3internal, sdc_underlay, sdc_overlay
+ *
+ * In this scenario, Servers 2 & 3 are rejected, since they don't meet our
+ * "sdc_overlay" requirement. Servers 1 & 2 are kept though, since 1 is able to
+ * meet the r1external and r1internal requirements, and 2 is able to meet the
+ * r2external and r2internal requirements.
+ *
+ * In short, if a server doesn't meet the provided tag requirements, then the
+ * the VM being allocated would not be able to reach all requested networks or
+ * any of the networks in a requested pool. The server is therefore dropped from
+ * further consideration.
  */
 
 var assert = require('assert-plus');
+var mod_util = require('util');
 
-function
-filterVlans(servers, opts, cb)
-{
+function filterTags(servers, opts, cb) {
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(opts, 'opts');
 	assert.func(cb, 'cb');
 
-	var requestedVlans = opts.vm.nic_tags;
+	var requestedTags = null;
 	var reasons = {};
 	var adequateServers;
 
-	if (!requestedVlans) {
-		reasons.skip = 'No nic_tags to filter on';
+	if (opts.vm.nic_tag_requirements) {
+		requestedTags = opts.vm.nic_tag_requirements;
+	} else if (opts.vm.nic_tags) {
+		requestedTags = opts.vm.nic_tags.map(function (nic_tag) {
+			return ([ nic_tag ]);
+		});
+	}
+
+	if (requestedTags === null) {
+		reasons.skip = 'No NIC Tag requirements to filter on';
 		return (cb(null, servers, reasons));
 	}
 
@@ -56,29 +90,38 @@ filterVlans(servers, opts, cb)
 		}
 
 		tags = getTags(interfaces, vnics);
-		onlineTags  = tags[0];
-		offlineTags = tags[1];
-
-		/* jsl: ignore (bogus unreachable warning) */
-		for (var i = 0; i !== requestedVlans.length; i++) {
-		/* jsl: end */
-			var tag = requestedVlans[i];
+		onlineTags  = tags.online;
+		offlineTags = tags.offline;
+
+		for (var i = 0; i < requestedTags.length; i++) {
+			var reqs = requestedTags[i];
+			var satisfiedOnline = false;
+			var satisfiedOffline = null;
+
+			for (var j = 0; j < reqs.length; j++) {
+				var tag = reqs[j];
+				if (onlineTags[tag]) {
+					satisfiedOnline = true;
+					break;
+				} else if (offlineTags[tag]) {
+					satisfiedOffline = tag;
+				}
+			}
 
-			if (onlineTags[tag])
+			if (satisfiedOnline) {
 				continue;
-
-			if (offlineTags[tag]) {
+			} else if (satisfiedOffline !== null) {
 				var nic = offlineTags[tag];
-
-				reasons[server.uuid] = 'NIC ' + nic.interface +
-					' for tag "' + tag + '" is ' +
-					nic['Link Status'];
+				reasons[server.uuid] = mod_util.format(
+				    'NIC %s for tag "%s" is %s',
+				    nic.interface, tag, nic['Link Status']);
+				return (false);
 			} else {
 				reasons[server.uuid] =
-				    'Server missing vlan "' + tag + '"';
+				    'Server must have one of the NIC Tags: ' +
+				    reqs.join(', ');
+				return (false);
 			}
-
-			return (false);
 		}
 
 		return (true);
@@ -87,9 +130,7 @@ filterVlans(servers, opts, cb)
 	return (cb(null, adequateServers, reasons));
 }
 
-function
-getTags(interfaces, vnics)
-{
+function getTags(interfaces, vnics) {
 	var onlineTags = {};
 	var offlineTags = {};
 
@@ -123,10 +164,13 @@ getTags(interfaces, vnics)
 		}
 	});
 
-	return ([onlineTags, offlineTags]);
+	return {
+		online: onlineTags,
+		offline: offlineTags
+	};
 }
 
 module.exports = {
-	name: 'Servers supporting required VLANs',
-	run: filterVlans
+	name: 'Servers supporting required NIC Tags',
+	run: filterTags
 };
diff --git a/lib/validations.js b/lib/validations.js
index bcefc1b..eac8f8c 100644
--- a/lib/validations.js
+++ b/lib/validations.js
@@ -259,6 +259,10 @@ function validateLocality(locality)
 	return (null);
 }
 
+function validateNicTagRequirements(nic_tag_requirements) {
+	return (validate_schema(s_dapi.nic_tag_reqs, nic_tag_requirements));
+}
+
 /*
  * Validates a VM payload -- this includes the VM and checking of
  * and requirements attribute. Returns an error message if validation fails.
@@ -590,6 +594,7 @@ module.exports = {
 	validateServers: validateServers,
 	validateImage: validateImage,
 	validateImages: validateImages,
+	validateNicTagRequirements: validateNicTagRequirements,
 	validatePackage: validatePackage,
 	validatePackages: validatePackages,
 	validateTicket: validateTicket,
diff --git a/package.json b/package.json
index 18d66ce..1dc49e6 100644
--- a/package.json
+++ b/package.json
@@ -8,7 +8,7 @@
     "assert-plus": "~1.0.0",
     "bunyan": "1.8.5",
     "libuuid": "0.2.1",
-    "joyent-schemas": "git+https://github.com/joyent/schemas.git#77afd7c080fb89c1efe1afd582e9b553ae856e5d",
+    "joyent-schemas": "git+https://github.com/joyent/schemas.git#DAPI-340",
     "jsprim": "1.3.1",
     "vasync": "~1.6.4"
   },
diff --git a/test/algorithms/hard-filter-vlans.test.js b/test/algorithms/hard-filter-vlans.test.js
index 6f23397..58fb6e2 100644
--- a/test/algorithms/hard-filter-vlans.test.js
+++ b/test/algorithms/hard-filter-vlans.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -123,11 +123,12 @@ var SERVERS = [
 ];
 
 
-function
-runTest(t, vlans, expectedUuids, expectedReasons)
-{
-	var opts = common.addCommonOpts({ vm: { nic_tags: vlans }});
+function missing(tags) {
+	return ('Server must have one of the NIC Tags: ' + tags.join(', '));
+}
+
 
+function runTestHelper(t, opts, expectedUuids, expectedReasons) {
 	filter.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -144,7 +145,21 @@ runTest(t, vlans, expectedUuids, expectedReasons)
 }
 
 
-test('filterVlans() on single vlan 1', function (t) {
+function runTest(t, nic_tags, expectedUuids, expectedReasons) {
+	var opts = common.addCommonOpts({ vm: { nic_tags: nic_tags }});
+
+	runTestHelper(t, opts, expectedUuids, expectedReasons);
+}
+
+
+function runMixedTest(t, reqs, expectedUuids, expectedReasons) {
+	var opts = common.addCommonOpts({ vm: { nic_tag_requirements: reqs }});
+
+	runTestHelper(t, opts, expectedUuids, expectedReasons);
+}
+
+
+test('filterTags() on single vlan 1', function (t) {
 	var expectUuids = [
 		'00009386-8c67-b674-587f-101f1db2eda7',
 		'222266d7-465d-4c22-b26e-a6707a22390e'
@@ -153,20 +168,20 @@ test('filterVlans() on single vlan 1', function (t) {
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
 			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "external"'
+			missing([ 'external' ])
 	};
 
 	runTest(t, ['external'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on single vlan 2', function (t) {
+test('filterTags() on single vlan 2', function (t) {
 	var expectUuids = [
 		'00009386-8c67-b674-587f-101f1db2eda7',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1',
@@ -174,41 +189,41 @@ test('filterVlans() on single vlan 2', function (t) {
 	];
 	var expectReasons = {
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "admin"'
+			missing([ 'admin' ])
 	};
 
 	runTest(t, ['admin'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on single vlan 3', function (t) {
+test('filterTags() on single vlan 3', function (t) {
 	var expectUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
 	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "customer12"'
+			missing([ 'customer12' ])
 	};
 
 	runTest(t, ['customer12'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on single vlan 4', function (t) {
+test('filterTags() on single vlan 4', function (t) {
 	var expectUuids = [
 		'00009386-8c67-b674-587f-101f1db2eda7',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1',
@@ -224,30 +239,30 @@ test('filterVlans() on single vlan 4', function (t) {
 });
 
 
-test('filterVlans() on single vlan 5', function (t) {
+test('filterTags() on single vlan 5', function (t) {
 	var expectUuids = [];
 	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'222266d7-465d-4c22-b26e-a6707a22390e':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "doesnotexist"'
+			missing([ 'doesnotexist' ])
 	};
 
 	runTest(t, ['doesnotexist'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on multiple vlans 1', function (t) {
+test('filterTags() on multiple vlans 1', function (t) {
 	var expectUuids = [
 		'00009386-8c67-b674-587f-101f1db2eda7',
 		'222266d7-465d-4c22-b26e-a6707a22390e'
@@ -256,20 +271,20 @@ test('filterVlans() on multiple vlans 1', function (t) {
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
 			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "external"',
+			missing([ 'external' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "external"'
+			missing([ 'external' ])
 	};
 
 	runTest(t, ['external', 'admin'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on multiple vlans 2', function (t) {
+test('filterTags() on multiple vlans 2', function (t) {
 	var expectUuids = [
 		'00009386-8c67-b674-587f-101f1db2eda7',
 		'222266d7-465d-4c22-b26e-a6707a22390e'
@@ -278,34 +293,34 @@ test('filterVlans() on multiple vlans 2', function (t) {
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
 			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "admin"'
+			missing([ 'admin' ])
 	};
 
 	runTest(t, ['admin', 'external'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on multiple vlans 3', function (t) {
+test('filterTags() on multiple vlans 3', function (t) {
 	var expectUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
 	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "customer12"',
+			missing([ 'customer12' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "customer12"'
+			missing([ 'customer12' ])
 	};
 
 	runTest(t, ['customer12', 'admin', 'external'], expectUuids,
@@ -314,30 +329,30 @@ test('filterVlans() on multiple vlans 3', function (t) {
 
 
 
-test('filterVlans() on multiple vlans 4', function (t) {
+test('filterTags() on multiple vlans 4', function (t) {
 	var expectUuids = [];
 	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'222266d7-465d-4c22-b26e-a6707a22390e':
-			'Server missing vlan "doesnotexist"',
+			missing([ 'doesnotexist' ]),
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'5555fa4e-144f-43e1-809f-70404573b076':
-			'Server missing vlan "admin"',
+			missing([ 'admin' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "admin"'
+			missing([ 'admin' ])
 	};
 
 	runTest(t, ['admin', 'doesnotexist'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() with no servers', function (t) {
+test('filterTags() with no servers', function (t) {
 	var emptyServers = [];
 	var opts = common.addCommonOpts({ vm: { nic_tags: ['admin'] }});
 
@@ -352,47 +367,122 @@ test('filterVlans() with no servers', function (t) {
 });
 
 
-test('filterVlans() on single overlay tag', function (t) {
+test('filterTags() on single overlay tag', function (t) {
 	var expectUuids = [ '3333059f-8ce2-4573-b56a-4ed2db802ea8',
 		'5555fa4e-144f-43e1-809f-70404573b076' ];
 	var expectReasons = {
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
 			'NIC e1000g0 for tag "sdc_overlay" is down',
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'222266d7-465d-4c22-b26e-a6707a22390e':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "sdc_overlay"'
+			missing([ 'sdc_overlay' ])
 	};
 
 	runTest(t, ['sdc_overlay'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on overlay tag and vlan', function (t) {
+test('filterTags() on overlay tag and vlan', function (t) {
 	var expectUuids = [ '5555fa4e-144f-43e1-809f-70404573b076' ];
 	var expectReasons = {
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
 			'NIC e1000g0 for tag "sdc_overlay" is down',
 		'00009386-8c67-b674-587f-101f1db2eda7':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'222266d7-465d-4c22-b26e-a6707a22390e':
-			'Server missing vlan "sdc_overlay"',
+			missing([ 'sdc_overlay' ]),
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
-			'Server missing vlan "customer13"',
+			missing([ 'customer13' ]),
 		'666660a9-4174-4e97-91d3-4becd075d280':
-			'Server missing vlan "sdc_overlay"'
+			missing([ 'sdc_overlay' ])
 	};
 
 	runTest(t, ['sdc_overlay', 'customer13'], expectUuids, expectReasons);
 });
 
 
+test('filterTags() on pool with mixed tags', function (t) {
+	var expectUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
+	var expectReasons = {
+		'00009386-8c67-b674-587f-101f1db2eda7':
+			missing([ 'customer12', 'nonexistent1' ]),
+		'1111e5f9-75e6-43e8-a016-a85835b377e1':
+			'NIC e1000g0 for tag "external" is down',
+		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
+			missing([ 'external' ]),
+		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
+			missing([ 'external' ]),
+		'5555fa4e-144f-43e1-809f-70404573b076':
+			missing([ 'external' ]),
+		'666660a9-4174-4e97-91d3-4becd075d280':
+			missing([ 'external' ])
+	};
+
+	runMixedTest(t, [
+		[ 'external' ],
+		[ 'customer12', 'nonexistent1' ],
+		[ 'customer13', 'external', 'admin', 'nonexistent2' ]
+	], expectUuids, expectReasons);
+});
+
+
+test('filterTags() on pool that has all NIC Tags', function (t) {
+	var allTags = [
+		'customer12', 'customer13', 'external',
+		'admin', 'sdc_overlay'
+	];
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
+		'1111e5f9-75e6-43e8-a016-a85835b377e1',
+		'222266d7-465d-4c22-b26e-a6707a22390e',
+		'3333059f-8ce2-4573-b56a-4ed2db802ea8',
+		'5555fa4e-144f-43e1-809f-70404573b076'
+	];
+	var expectReasons = {
+		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
+			'NIC e1000g0 for tag "sdc_overlay" is down',
+		'666660a9-4174-4e97-91d3-4becd075d280':
+			missing(allTags)
+	};
+
+	runMixedTest(t, [ allTags ], expectUuids, expectReasons);
+});
+
+
+test('filterTags() with too restrictive requirements', function (t) {
+	var expectUuids = [ ];
+	var expectReasons = {
+		'00009386-8c67-b674-587f-101f1db2eda7':
+			missing([ 'customer12', 'nonexistent1' ]),
+		'1111e5f9-75e6-43e8-a016-a85835b377e1':
+			'NIC e1000g0 for tag "external" is down',
+		'222266d7-465d-4c22-b26e-a6707a22390e':
+			missing([ 'customer13', 'nonexistent2' ]),
+		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
+			missing([ 'external' ]),
+		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
+			missing([ 'external' ]),
+		'5555fa4e-144f-43e1-809f-70404573b076':
+			missing([ 'external' ]),
+		'666660a9-4174-4e97-91d3-4becd075d280':
+			missing([ 'external' ])
+	};
+
+	runMixedTest(t, [
+		[ 'external' ],
+		[ 'customer12', 'nonexistent1' ],
+		[ 'customer13', 'nonexistent2' ]
+	], expectUuids, expectReasons);
+});
+
+
 test('name', function (t) {
 	t.equal(typeof (filter.name), 'string');
 	t.end();
diff --git a/test/integration.test.js b/test/integration.test.js
index f3992ee..250bc5f 100644
--- a/test/integration.test.js
+++ b/test/integration.test.js
@@ -180,13 +180,13 @@ test('allocate 1', function (t) {
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers supporting required VLANs',
+			step: 'Servers supporting required NIC Tags',
 			remaining: [
 				'00000000-0000-0000-0000-00259094373c',
 				'00000000-0000-0000-0000-0025909437d4'
 			],
 			reasons: {
-				skip: 'No nic_tags to filter on'
+				skip: 'No NIC Tag requirements to filter on'
 			}
 		}, {
 			/* JSSTYLED */
@@ -367,13 +367,13 @@ test('allocate 2', function (t) {
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers supporting required VLANs',
+			step: 'Servers supporting required NIC Tags',
 			remaining: [
 				'00000000-0000-0000-0000-00259094373c',
 				'00000000-0000-0000-0000-0025909437d4'
 			],
 			reasons: {
-				skip: 'No nic_tags to filter on'
+				skip: 'No NIC Tag requirements to filter on'
 			}
 		}, {
 			/* JSSTYLED */
