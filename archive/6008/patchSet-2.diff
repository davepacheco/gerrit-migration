commit f08aa2128b0564a28a86d7ecfefb7b6465c1b412
Author: Trent Mick <trentm@gmail.com>
Date:   2019-04-06T23:45:44-07:00 (6 months ago)
    
    TRITON-1347 switch node-triton test runner to node-tap

diff --git a/CHANGES.md b/CHANGES.md
index fdcda9c..925b040 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,6 +6,11 @@ Known issues:
 
 ## not yet released
 
+## 7.0.2
+
+- [TRITON-1347] Changing to node-tap as the test runner. Also some
+  improvements to the testing docs.
+
 ## 7.0.1
 
 - [TRITON-884] Drop support for Cloud Analytics-related RBAC "resources"
diff --git a/Makefile b/Makefile
index b2fac48..fa7eb6e 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 # Makefile for node-triton
 #
@@ -14,6 +14,10 @@ JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
 CLEAN_FILES += ./node_modules
+TAP_EXEC = ./node_modules/.bin/tap
+TEST_JOBS ?= 10
+TEST_TIMEOUT_S ?= 1200
+TEST_GLOB ?= *
 
 include ./tools/mk/Makefile.defs
 
@@ -29,17 +33,13 @@ test: test-unit test-integration
 
 .PHONY: test-unit
 test-unit:
-	NODE_NDEBUG= ./node_modules/.bin/tape test/unit/*.test.js
+	NODE_NDEBUG= $(TAP_EXEC) --timeout $(TEST_TIMEOUT_S) -j $(TEST_JOBS) \
+		-o ./test-unit.tap test/unit/$(TEST_GLOB).test.js
 
 .PHONY: test-integration
 test-integration:
-	NODE_NDEBUG= ./node_modules/.bin/tape test/integration/*.test.js
-
-.PHONY: test-in-parallel
-test-in-parallel:
-	ls test/unit/*.test.js test/integration/*.test.js \
-	    | parallel ./node_modules/.bin/tape \
-	    | ./node_modules/.bin/tap-summary --no-ansi --no-progress
+	NODE_NDEBUG= $(TAP_EXEC) --timeout $(TEST_TIMEOUT_S) -j $(TEST_JOBS) \
+		-o ./test-integration.tap test/integration/$(TEST_GLOB).test.js
 
 .PHONY: clean
 clean::
diff --git a/README.md b/README.md
index e201640..096aa0d 100644
--- a/README.md
+++ b/README.md
@@ -357,7 +357,7 @@ Also please run the full (longer) test suite (`make test`). See the next
 section.
 
 
-## Test suite
+## Testing
 
 node-triton has both unit tests (`make test-unit`) and integration tests (`make
 test-integration`). Integration tests require a config file, by default at
@@ -378,21 +378,69 @@ just a "profileName" or "profile" is required.
 *Warning:* Running the *integration* tests will create resources and could
 incur costs if running against a public cloud.
 
-Run all tests:
+Usage:
 
-    make test
+    make test-unit [TEST-VARS]          # run unit tests
+    make test-integration [TEST-VARS]   # run integration tests
+    make test [TEST-VARS]               # run both sets
 
-You can use `TRITON_TEST_CONFIG` to override the test file, e.g.:
+Test output is node-tap's default short form output. Full TAP output is
+written to "test-unit.tap" and "test-integration.tap". You can use `TAP=1`
+to have TAP output emited to stdout.
 
-    $ cat test/coal.json
-    {
-        "profileName": "coal",
-        "allowWriteActions": true
-    }
-    $ TRITON_TEST_CONFIG=test/coal.json make test
+### Test vars
+
+There are a few `TEST_...` vars that can tweak how the tests are run.
+
+- `TEST_CONFIG=<path to JSON config file>` - By default the integration test
+  suite uses "test/config.json". Use this to provide an alternative. This can
+  be useful if you have test configs for a number of separate target DCs. E.g.:
+
+        $ cat test/coal.json
+        {
+            "profileName": "coal",
+            "allowWriteActions": true
+        }
+        $ make test TEST_CONFIG=test/coal.json
+
+  where "coal" here refers to a development Triton (a.k.a SDC) ["Cloud On A
+  Laptop"](https://github.com/joyent/sdc#getting-started) standup.
+
+- `TEST_GLOB=<glob for test file basename>` - By default all "*.test.js"
+  in the "test/unit/" and "test/integration" dirs are run. To run just
+  those with "image" in the name, use `make test TEST_GLOB=*image*`, or
+  to run a specific test file: `make test TEST_GLOB=metadataFromOpts`.
+
+- `TEST_JOBS=<number of test files to run concurrently>` - By default this is
+  10. Set to 1 to run tests serially.
+
+- `TEST_TIMEOUT_S=<number of seconds timeout for each test file>` - By default
+  this is 1200 (10 minutes). Ideally tests are written to take much less than
+  10 minutes.
+
+- `TAP=1` to have the test suite emit TAP output. This is a node-tap envvar.
+
+
+### Testing Development Guide
+
+- Unit tests (i.e. not requiring the cloudapi endpoint) in "unit/\*.test.js".
+  Integration tests "integration/\*.test.js".
+
+- We are using node-tap. Read [RFD
+  139](https://github.com/joyent/rfd/blob/master/rfd/0139/README.md#guidelines-for-using-node-tap-in-triton-repos)
+  for some guidelines for node-tap usage. The more common we can make some
+  basic usage patterns in the many Triton repos, the easier the maintenance.
+
+- Use "test/lib/\*.js" and "test/{unit,integration}/helpers.js" to help make
+  ".test.js" code more expressive. Avoid excessive parameterization, however.
+  Some cut 'n paste of boilerplate is fine if it makes an individual test
+  clearer and easier to debug and maintain.
 
-where "coal" here refers to a development Triton (a.k.a SDC) ["Cloud On A
-Laptop"](https://github.com/joyent/sdc#getting-started) standup.
+- Node-tap supports running test files in parallel, and `make test` by
+  default runs tests in parallel. Therefore:
+    - Ensure that test files do not depend on each other and can run
+      concurrently.
+    - Prefer more and smaller and more targetted test files.
 
 
 ## Release process
diff --git a/package.json b/package.json
index 499091a..a4f3451 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "7.0.1",
+  "version": "7.0.2",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
@@ -32,8 +32,8 @@
     "wordwrap": "1.0.0"
   },
   "devDependencies": {
+    "tap": "11.1.5",
     "tape": "4.2.0",
-    "tap-summary": "3.0.2",
     "uuid": "3.2.1"
   },
   "main": "./lib",
diff --git a/test/README.md b/test/README.md
deleted file mode 100644
index 3e9ac52..0000000
--- a/test/README.md
+++ /dev/null
@@ -1,36 +0,0 @@
-The node-triton test suite.
-
-There are two sets of tests here: *unit* tests which can be run in your local
-clone (see "test/unit/") and *integration* tests which are run against a
-cloudapi. 
-
-**WARNING**: While this test suite should strive to not be destructive to
-existing data in the used account, one should take pause before blindly
-running it with one's cloudapi creds.
-
-
-# Usage
-
-Unit tests should be run before commits:
-
-    make test
-
-Or you can run a specific test file via:
-
-    cd test
-    ./runtest unit/foo.test.js
-
-
-Integration tests: XXX how to run?
-
-
-# Development Guidelines
-
-- We are using [tape](https://github.com/substack/tape).
-
-- Use "test/lib/\*.js" and "test/{unit,integration}/helpers.js" to help make
-  ".test.js" code more expressive:
-
-- Unit tests (i.e. not requiring the cloudapi endpoint) in "unit/\*.test.js".
-  Integration tests "integration/\*.test.js".
-
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 0b6af0c..e00a613 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -26,8 +26,10 @@ var testcommon = require('../lib/testcommon');
 
 
 var CONFIG;
-var configPath = process.env.TRITON_TEST_CONFIG
-        ? path.resolve(process.cwd(), process.env.TRITON_TEST_CONFIG)
+// The `TRITON_TEST_CONFIG` var is deprecated, but supported for a while.
+var TEST_CONFIG = (process.env.TEST_CONFIG || process.env.TRITON_TEST_CONFIG);
+var configPath = TEST_CONFIG
+        ? path.resolve(process.cwd(), TEST_CONFIG)
         : path.resolve(__dirname, '..', 'config.json');
 try {
     CONFIG = require(configPath);
@@ -57,9 +59,9 @@ try {
     error('* * *');
     error('node-triton integration tests require a config file. By default');
     error('it looks for "test/config.json". Or you can set the');
-    error('TRITON_TEST_CONFIG envvar. E.g.:');
+    error('TEST_CONFIG envvar. E.g.:');
     error('');
-    error('    TRITON_TEST_CONFIG=test/coal.json make test');
+    error('    make test TEST_CONFIG=test/coal.json');
     error('');
     error('See "test/config.json.sample" for a starting point for a config.');
     error('');
diff --git a/test/runtests b/test/runtests
deleted file mode 100755
index f344565..0000000
--- a/test/runtests
+++ /dev/null
@@ -1,151 +0,0 @@
-#!/usr/bin/env bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2015, Joyent, Inc.
-#
-
-#
-# Run *integration* tests.
-#
-# This creates .tap files in OUTPUT_DIR that can be processed by a TAP reader.
-# Testing config and log files are also placed in this dir.
-#
-# Run `./runtests -h` for usage info.
-#
-
-if [ "$TRACE" != "" ]; then
-    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-
-#---- support functions
-
-function fatal
-{
-    echo "$(basename $0): fatal error: $*"
-    exit 1
-}
-
-function usage
-{
-    echo "Usage:"
-    echo "  runtests [OPTIONS...]"
-    echo ""
-    echo "Options:"
-    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
-    echo "  -s          Stop on first error."
-}
-
-
-
-#---- mainline
-
-start_time=$(date +%s)
-
-API=docker
-TOP=$(cd $(dirname $0)/../; pwd)
-NODE_INSTALL=$TOP/build/node
-OUTPUT_DIR=/var/tmp/${API}test
-TAPE=$TOP/node_modules/.bin/tape
-FAILING_LIST=$OUTPUT_DIR/failing-tests.txt
-
-# Options.
-opt_test_pattern=
-opt_stop_on_failure=
-while getopts "hf:s" opt
-do
-    case "$opt" in
-        h)
-            usage
-            exit 0
-            ;;
-        f)
-            opt_test_pattern=$OPTARG
-            ;;
-        s)
-            opt_stop_on_failure="true"
-            ;;
-        *)
-            usage
-            exit 1
-            ;;
-    esac
-done
-
-
-# Setup a clean output dir.
-echo "# Setup a clean output dir ($OUTPUT_DIR)."
-rm -rf $OUTPUT_DIR
-mkdir -p /$OUTPUT_DIR
-touch $FAILING_LIST
-
-cd $TOP
-
-
-# Run the integration tests
-
-echo ""
-test_files=$(ls -1 test/integration/*.test.js)
-if [[ -n "$opt_test_pattern" ]]; then
-    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
-    echo "# Running filtered set of test files: $test_files"
-fi
-
-set +o errexit
-
-for file in $test_files; do
-    test_file=$(basename $file)
-    echo "# $test_file"
-    PATH=$NODE_INSTALL/bin:$PATH $TAPE $file \
-        | tee $OUTPUT_DIR/$test_file.tap
-    if [[ "$?" != "0" ]]; then
-        echo $file >> $OUTPUT_DIR/failing-tests.txt
-        [[ -n "$opt_stop_on_failure" ]] && break
-    fi
-done
-
-set -o errexit
-
-echo ""
-echo "# test output in $OUTPUT_DIR:"
-cd $OUTPUT_DIR
-ls *.tap
-
-
-# Colored summary of results (borrowed from smartos-live.git/src/vm/run-tests).
-echo ""
-echo "# test results:"
-
-end_time=$(date +%s)
-elapsed=$((${end_time} - ${start_time}))
-
-tests=$(grep "^# tests [0-9]" $OUTPUT_DIR/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-passed=$(grep "^# pass  [0-9]" $OUTPUT_DIR/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-[[ -z ${tests} ]] && tests=0
-[[ -z ${passed} ]] && passed=0
-fail=$((${tests} - ${passed}))
-failing_tests=$(cat ${FAILING_LIST} | wc -l)
-
-echo "# Completed in ${elapsed} seconds."
-echo -e "# \033[32mPASS: ${passed} / ${tests}\033[39m"
-if [[ ${fail} -gt 0 ]]; then
-    echo -e "# \033[31mFAIL: ${fail} / ${tests}\033[39m"
-fi
-
-if [[ ${failing_tests} -gt 0 ]]; then
-    echo ""
-    echo -e "# \033[31mFAILING TESTS:\033[39m"
-    cat $FAILING_LIST | sed -e 's,^,#   ,'
-fi
-echo ""
-
-exit $failing_tests
