From d77785608799db6331e1dcf5c95819b867e03182 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 31 Aug 2016 18:18:34 +0000
Subject: [PATCH] FWAPI-239 Firewall rules are not regenerated when machine tag
 changes are made FWAPI-249 firewaller doesn't fetch remote VMs with matching
 tags

---
 lib/pred.js                 |   2 +-
 lib/tasks/vm-add.js         |  66 +----------
 lib/tasks/vm-common.js      |  84 +++++++++++++
 lib/tasks/vm-update.js      | 229 ++++++++++++++++++++++++------------
 lib/vmapi.js                |  97 +++++++++++----
 package.json                |   2 +-
 test/lib/vm.js              |   2 +-
 test/unit/helpers.js        |   1 +
 test/unit/vm-update.test.js |   7 +-
 9 files changed, 321 insertions(+), 169 deletions(-)
 create mode 100644 lib/tasks/vm-common.js

diff --git a/lib/pred.js b/lib/pred.js
index 7379bb2..f365648 100644
--- a/lib/pred.js
+++ b/lib/pred.js
@@ -94,7 +94,7 @@ function createPred(params) {
                 orFilter.push(eqFilt('tag.' + t, vals[v]));
             }
         } else {
-            if (t === true) {
+            if (tags[t] === true) {
                 orFilter.push(eqFilt('tag.' + t, '*'));
             } else {
                 orFilter.push(eqFilt('tag.' + t, tags[t]));
diff --git a/lib/tasks/vm-add.js b/lib/tasks/vm-add.js
index 704c248..c935d5c 100644
--- a/lib/tasks/vm-add.js
+++ b/lib/tasks/vm-add.js
@@ -16,71 +16,7 @@ var fw = require('../fw');
 var mod_fwapi = require('../fwapi');
 var mod_vm = require('../vm');
 
-
-
-// --- Internal
-
-
-
-/**
- * The VM is not local: add it if there are any non-global rules that would
- * apply to it
- */
-function addRemoteVM(opts, vms, callback) {
-    var rulesPayload = {
-        log: opts.log,
-        req_id: opts.req_id,
-        payload: {
-            vms: vms,
-            remoteVM: opts.value
-        }
-    };
-
-    fw.rvmRules(rulesPayload, function (err2, rvmRules) {
-        if (err2) {
-            return callback(err2);
-        }
-
-        var globalRules = 0;
-        var nonGlobalRules = 0;
-
-        rvmRules.forEach(function (rvmRule) {
-            if (rvmRule.global) {
-                globalRules++;
-            } else {
-                nonGlobalRules++;
-            }
-        });
-
-        if (nonGlobalRules === 0) {
-            opts.log.info(
-                { rvm: opts.value, globalRules: globalRules },
-                'Remote VM "%s" is not the target of any ' +
-                'non-global rules: not adding', opts.value.uuid);
-            return callback();
-        }
-
-        var addPayload = {
-            log: opts.log,
-            req_id: opts.req_id,
-            payload: {
-                remoteVMs: [ opts.value ],
-                vms: vms
-            }
-        };
-
-        fw.add(addPayload, function (err3, res) {
-            if (!err3) {
-                opts.cache.addVMs(opts.value.owner_uuid, [opts.value]);
-            }
-
-            opts.log.info(opts.value,
-                'Added remote VM "%s"', opts.value.uuid);
-            return callback(err3, res);
-        });
-    });
-}
-
+var addRemoteVM = require('./vm-common').addRemoteVM;
 
 
 // --- Exports
diff --git a/lib/tasks/vm-common.js b/lib/tasks/vm-common.js
new file mode 100644
index 0000000..fdb3b0e
--- /dev/null
+++ b/lib/tasks/vm-common.js
@@ -0,0 +1,84 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+/*
+ * Common routines for managing VMs.
+ */
+
+var fw = require('../fw');
+
+
+// --- Exports
+
+/**
+ * Check if an array of rules contains any non-global rules
+ */
+function hasNonGlobalRules(rules) {
+    return rules.some(function (rule) {
+        return !rule.global;
+    });
+}
+
+
+/**
+ * The VM is not local: add it if there are any non-global rules that would
+ * apply to it
+ */
+function addRemoteVM(opts, vms, callback) {
+    var rulesPayload = {
+        log: opts.log,
+        req_id: opts.req_id,
+        payload: {
+            vms: vms,
+            remoteVM: opts.value
+        }
+    };
+
+    fw.rvmRules(rulesPayload, function (err2, rvmRules) {
+        if (err2) {
+            callback(err2);
+            return;
+        }
+
+        if (!hasNonGlobalRules(rvmRules)) {
+            opts.log.info(
+                { rvm: opts.value },
+                'Remote VM "%s" is not the target of any ' +
+                'non-global rules: not adding', opts.value.uuid);
+            callback();
+            return;
+        }
+
+        var addPayload = {
+            log: opts.log,
+            req_id: opts.req_id,
+            payload: {
+                remoteVMs: [ opts.value ],
+                vms: vms
+            }
+        };
+
+        fw.add(addPayload, function (err3, res) {
+            if (!err3) {
+                opts.cache.addVMs(opts.value.owner_uuid, [opts.value]);
+            }
+
+            opts.log.info(opts.value,
+                'Added remote VM "%s"', opts.value.uuid);
+            callback(err3, res);
+        });
+    });
+}
+
+
+module.exports = {
+    addRemoteVM: addRemoteVM,
+    hasNonGlobalRules: hasNonGlobalRules
+};
diff --git a/lib/tasks/vm-update.js b/lib/tasks/vm-update.js
index 48267cf..5f1e11e 100644
--- a/lib/tasks/vm-update.js
+++ b/lib/tasks/vm-update.js
@@ -12,21 +12,70 @@
  * Update remote VM task
  */
 
+var clone = require('clone');
 var fw = require('../fw');
+var mod_common = require('./vm-common');
 var mod_fwapi = require('../fwapi');
 var mod_vm = require('../vm');
+var mod_vmapi = require('../vmapi');
 var prim = require('jsprim');
 
+var addRemoteVM = mod_common.addRemoteVM;
+var hasNonGlobalRules = mod_common.hasNonGlobalRules;
 
 
 // --- Internal
 
+function fillRVM(opts, rvm) {
+    var t;
+
+    if (opts.value.hasOwnProperty('add_nics')) {
+        rvm.nics = opts.value.add_nics;
+    }
+
+    if (!rvm.hasOwnProperty('ips')) {
+        rvm.ips = [];
+    }
+
+    if (opts.value.hasOwnProperty('remove_ips') && rvm.ips) {
+        rvm.ips = rvm.ips.filter(function (ip) {
+            return (opts.value.remove_ips.indexOf(ip) === -1);
+        });
+    }
+
+    if (!rvm.hasOwnProperty('tags')) {
+        rvm.tags = {};
+    }
+
+    if (opts.value.hasOwnProperty('set_tags')) {
+        for (t in opts.value.set_tags) {
+            rvm.tags[t] = opts.value.set_tags[t];
+        }
+    }
+
+    if (opts.value.hasOwnProperty('remove_tags')) {
+        for (t in opts.value.remove_tags) {
+            delete rvm.tags[opts.value.remove_tags[t]];
+        }
+    }
+
+    if (prim.isEmpty(rvm.tags)) {
+        delete rvm.tags;
+    }
+
+    return rvm;
+}
 
 
+/**
+ * If a local VM changes properties, new rules may become applicable. Check
+ * with FWAPI using its new properties, and then update its firewall.
+ */
 function updateLocalVM(opts, localVM, callback) {
-    mod_fwapi.resolveLocalVM(opts, localVM, function (err, res) {
-        if (err || res) {
-            return callback(err);
+    mod_fwapi.resolveLocalVM(opts, localVM, function (err) {
+        if (err) {
+            callback(err);
+            return;
         }
 
         opts.log.info({ localVM: localVM }, 'updating local VM');
@@ -38,14 +87,106 @@ function updateLocalVM(opts, localVM, callback) {
             }
         }, callback);
     });
-
 }
 
 
-
-// --- Exports
+/**
+ * When a remote VM changes, determine if it's relevant to any local VMs,
+ * and fetch its information if so.
+ */
+function updateRVM(opts, vms, callback) {
+    var rvm_uuid = opts.value.uuid;
+    var rvmPayload = {
+        log: opts.log,
+        req_id: opts.req_id,
+        payload: { remoteVM: rvm_uuid }
+    };
+
+    fw.getRVM(rvmPayload, function (err2, rvm) {
+        if (err2) {
+            if (err2.code !== 'ENOENT') {
+                /* Unknown failure: abort  */
+                callback(err2);
+            } else if (opts.value.owner_uuid === undefined) {
+                /*
+                 * RVM doesn't exist locally and an out-of-date VMAPI
+                 * hasn't sent us the owner UUID, so we can't determine
+                 * if the RVM needs to be saved locally: fetch the VM
+                 * object from VMAPI, and then check if we need to
+                 * save it.
+                 */
+                opts.log.warn('Update information for %s is missing '
+                    + 'an owner_uuid: update VMAPI', rvm_uuid);
+                mod_vmapi.get(opts, rvm_uuid, function (err3, nrvm) {
+                    if (err3) {
+                        callback(err3);
+                        return;
+                    }
+
+                    var nopts = clone(opts, false, 1);
+                    nopts.value = nrvm;
+                    addRemoteVM(nopts, vms, callback);
+                });
+            } else {
+                /*
+                 * Check if this VM update would make this RVM relevant to
+                 * any of the local VMs' rules. If so, fetch the VM object
+                 * and save it locally.
+                 */
+                fw.rvmRules({
+                    log: opts.log,
+                    req_id: opts.req_id,
+                    payload: {
+                        vms: vms,
+                        remoteVM: fillRVM(opts, {
+                            owner_uuid: opts.value.owner_uuid,
+                            uuid: rvm_uuid
+                        })
+                    }
+                }, function (err3, rvmRules) {
+                    if (err3 || !hasNonGlobalRules(rvmRules)) {
+                        callback(err3);
+                        return;
+                    }
+
+                    mod_vmapi.get(opts, rvm_uuid, function (err4, nrvm) {
+                        if (err4) {
+                            callback(err4);
+                            return;
+                        }
+
+                        fw.add({
+                            log: opts.log,
+                            req_id: opts.req_id,
+                            payload: {
+                                remoteVMs: [ nrvm ],
+                                vms: vms
+                            }
+                        }, callback);
+                    });
+                });
+            }
+        } else {
+            /*
+             * RVM already exists locally, so we'll just update it. It's
+             * okay if this update makes it no longer relevant locally,
+             * since we'll take care of garbage collecting it and any
+             * other irrelevant VMs during the periodic "sync" task.
+             */
+            fw.update({
+                log: opts.log,
+                req_id: opts.req_id,
+                payload: {
+                    remoteVMs: [ fillRVM(opts, rvm) ],
+                    vms: vms
+                }
+            }, callback);
+        }
+    });
+}
 
 
+// --- Exports
 
 /*
  * vm-update task entry point
@@ -61,88 +202,26 @@ function updateVM(opts, callback) {
 
     if (!opts.value.uuid) {
         opts.log.warn(opts.value, 'Remote VM missing UUID: not updating');
-        return callback();
+        callback();
+        return;
     }
 
     // XXX: validate other properties
 
     mod_vm.list(opts.log, filter, function (err, vms) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var localVM = mod_vm.isLocal(vms, opts.value);
         if (localVM) {
             opts.vms = vms;
-            return updateLocalVM(opts, localVM, callback);
+            updateLocalVM(opts, localVM, callback);
+            return;
         }
 
-        var rvmPayload = {
-            log: opts.log,
-            req_id: opts.req_id,
-            payload: { remoteVM: opts.value.uuid }
-        };
-
-        fw.getRVM(rvmPayload, function (err2, rvm) {
-            if (err2) {
-                if (err2.code === 'ENOENT') {
-                    opts.log.info(opts.value,
-                        'Remote VM "%s" does not exist on this server: ' +
-                        'not updating', opts.value.uuid);
-                    return callback();
-                }
-                return callback(err2);
-            }
-
-            var t;
-
-            if (opts.value.hasOwnProperty('add_nics')) {
-                rvm.nics = opts.value.add_nics;
-            }
-
-            if (opts.value.hasOwnProperty('remove_ips') && rvm.ips) {
-                rvm.ips = rvm.ips.filter(function (ip) {
-                    return opts.value.remove_ips.indexOf(ip) === -1;
-                });
-            }
-
-            if (opts.value.hasOwnProperty('remove_tags')) {
-                for (t in opts.value.remove_tags) {
-                    delete rvm.tags[t];
-                }
-            }
-
-            if (!rvm.hasOwnProperty('tags')) {
-                rvm.tags = {};
-            }
-
-            if (opts.value.hasOwnProperty('set_tags')) {
-                for (t in opts.value.set_tags) {
-                    rvm.tags[t] = opts.value.set_tags[t];
-                }
-            }
-
-            if (opts.value.hasOwnProperty('remove_tags')) {
-                for (t in opts.value.remove_tags) {
-                    delete rvm.tags[t];
-                }
-            }
-
-            if (prim.isEmpty(rvm.tags)) {
-                delete rvm.tags;
-            }
-
-            var updatePayload = {
-                log: opts.log,
-                req_id: opts.req_id,
-                payload: {
-                    remoteVMs: [ rvm ],
-                    vms: vms
-                }
-            };
-
-            fw.update(updatePayload, callback);
-        });
+        updateRVM(opts, vms, callback);
     });
 }
 
diff --git a/lib/vmapi.js b/lib/vmapi.js
index de11a9a..fab3ec2 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -22,6 +22,28 @@ var VMAPI = require('sdc-clients').VMAPI;
 
 
 
+// --- Internal
+
+
+
+function buildRVM(vm) {
+    var rvm = {
+        enabled: vm.firewall_enabled ? true : false,
+        ips: vm.nics.map(function (n) { return n.ip; }),
+        owner_uuid: vm.owner_uuid,
+        tags: {},
+        uuid: vm.uuid
+    };
+
+    for (var t in vm.tags) {
+        rvm.tags[t] = vm.tags[t];
+    }
+
+    return rvm;
+}
+
+
+
 // --- Exports
 
 
@@ -31,6 +53,49 @@ function createClient(opts) {
 }
 
 
+function getVM(opts, vm_uuid, callback) {
+    var clientCreated = false;
+
+    assert.object(opts, 'opts');
+    assert.string(vm_uuid, 'vm_uuid');
+    assert.func(callback, 'callback');
+
+    if (!opts.vmapi) {
+        opts.vmapi = createClient(opts);
+        clientCreated = true;
+    }
+
+    var getParams = {
+        path: '/vms/' + vm_uuid
+    };
+
+    if (opts.req_id) {
+        getParams.headers = { 'x-request-id': opts.req_id };
+    }
+
+    opts.log.debug('vmapi.get: Getting VM %s', vm_uuid);
+
+    opts.vmapi.get(getParams, function (err, vm) {
+        if (clientCreated) {
+            opts.vmapi.client.close();
+        }
+
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        if (!vm.hasOwnProperty('nics') || vm.nics.length === 0) {
+            opts.log.warn(vm, 'vmapi.get: Got VM from VMAPI with no nics');
+            callback();
+            return;
+        }
+
+        callback(null, buildRVM(vm));
+    });
+}
+
+
 function listVMs(opts, callback) {
     var filter = opts.filter;
     var clientCreated = false;
@@ -48,7 +113,8 @@ function listVMs(opts, callback) {
     if (prim.isEmpty(tags) && vmsToFind.length === 0 && !filter.allVMs) {
         opts.log.debug('vmapi.list: No tags or VMs to get for owner "%s"',
             opts.filter.owner_uuid);
-        return callback();
+        callback();
+        return;
     }
 
     predicate = pred.create(opts.filter);
@@ -70,8 +136,13 @@ function listVMs(opts, callback) {
     opts.log.debug({ params: getParams, predicate: predicate }, 'listing VMs');
 
     opts.vmapi.get(getParams, function (err, vms) {
+        if (clientCreated) {
+            opts.vmapi.client.close();
+        }
+
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var rvms = [];
@@ -89,27 +160,10 @@ function listVMs(opts, callback) {
                 continue;
             }
 
-            var rvm = {
-                enabled: vm.firewall_enabled ? true : false,
-                ips: vm.nics.map(function (n) { return n.ip; }),
-                owner_uuid: vm.owner_uuid,
-                tags: {},
-                uuid: vm.uuid
-            };
-
-            for (var t in vm.tags) {
-                rvm.tags[t] = vm.tags[t];
-            }
-
-            rvms.push(rvm);
-        }
-
-
-        if (clientCreated) {
-            opts.vmapi.client.close();
+            rvms.push(buildRVM(vm));
         }
 
-        return callback(null, rvms);
+        callback(null, rvms);
     });
 }
 
@@ -237,6 +291,7 @@ function populateRemoteVMs(opts, callback) {
 
 module.exports = {
     createClient: createClient,
+    get: getVM,
     list: listVMs,
     populateRemoteVMs: populateRemoteVMs
 };
diff --git a/package.json b/package.json
index d612af0..2959ee7 100644
--- a/package.json
+++ b/package.json
@@ -9,7 +9,7 @@
         "async": "0.2.9",
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
-        "clone": "0.1.11",
+        "clone": "1.0.2",
         "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
         "jsprim": "0.5.0",
         "lockfd": "1.0.1",
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 51e5fef..6864cff 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -59,7 +59,7 @@ function ipfRule(t, opts) {
     assert.object(opts.vm, 'opts.vm');
     assert.string(opts.vm.uuid, 'opts.vm.uuid');
 
-    var ipfConfs = fwHelper.zoneIPFconfigs();
+    var ipfConfs = fwHelper.zoneIPFconfigs(4);
     var cur = ipfConfs;
     var curStr;
     // XXX: allow setting pass / block
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 2f27d41..5fa89dd 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -175,6 +175,7 @@ function setupMocks() {
         './vmapi',
         './vms',
         './vm-add',
+        './vm-common',
         './vm-delete',
         './vm-update',
         '../fw',
diff --git a/test/unit/vm-update.test.js b/test/unit/vm-update.test.js
index e5e5c0d..d81abb1 100644
--- a/test/unit/vm-update.test.js
+++ b/test/unit/vm-update.test.js
@@ -324,11 +324,8 @@ exports['update so rules no longer affect VM'] = {
                 port: 22,
                 proto: 'tcp',
                 target: 'any',
-                vm: d.vms[0]
-                // XXX: this is wrong - the VM's ipf rules should be
-                // rewritten. Uncomment the next line once FWAPI-200
-                // is fixed:
-                // doesNotExist: true
+                vm: d.vms[0],
+                doesNotExist: true
             });
 
             return t.done();
-- 
2.21.0

