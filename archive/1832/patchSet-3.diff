From de41e2ba641e1a17b1e41c45fe389164ffec9a0f Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Mon, 24 Apr 2017 15:41:21 -0700
Subject: [PATCH] ZAPI-782 ZAPI-685 broke DeleteVm

---
 docs/index.md                                 | 27 ++++++-
 lib/apis/wfapi.js                             |  6 +-
 lib/endpoints/vms.js                          | 64 +++++----------
 ...ms.delete_non_existing_no_workflow.test.js | 78 +++++--------------
 4 files changed, 68 insertions(+), 107 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 884a2ce..16d1c4f 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright (c) 2015, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # Introduction to VMs API
@@ -1399,8 +1399,11 @@ has succeeded.
 
 ## DeleteVm (DELETE /vms/:uuid)
 
-Deletes a VM. The VM will be physically destroyed and it will be marked as destroyed
-in the cache database.
+Deletes a VM. If the VM exists and has a `server_uuid` that refers to an actual
+CN that is available, the VM will be physically destroyed and it will be marked
+as destroyed in the cache database.
+
+If the VM doesn't have a `server_uuid`, the request will result in an error.
 
 ### Inputs
 
@@ -1418,11 +1421,29 @@ in the cache database.
 | 404  | VM Not Found. VM does not exist or VM does not belong to the specified owner | Error object       |
 | 409  | VM not allocated to a server yet                                             | Error object       |
 
+On a successful response, a [VM Job Response Object](#vm-job-response-object) is
+returned in the response body.
 
 ### Example
 
     DELETE /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83
 
+    HTTP/1.1 202 Accepted
+    Connection: close
+    workflow-api: http://workflow.coal.joyent.us
+    Content-Type: application/json
+    Content-Length: 100
+    Content-MD5: as77tkERx4gj7igpE83PyQ==
+    Date: Mon, 24 Apr 2017 22:30:44 GMT
+    Server: VMAPI
+    x-request-id: d169bbdf-a54c-4f71-a543-8928cda5b152
+    x-response-time: 170
+    x-server-name: d6334b70-2e19-4af4-85ba-53776ef82820
+
+    {
+      "vm_uuid": "e9bd0ed1-7de3-4c66-a649-d675dbce6e83",
+      "job_uuid": "56aca67a-5374-4117-9817-6ac77060697e"
+    }
 
 # VM Metadata
 
diff --git a/lib/apis/wfapi.js b/lib/apis/wfapi.js
index d251ec3..ad7f3e6 100644
--- a/lib/apis/wfapi.js
+++ b/lib/apis/wfapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -398,6 +398,10 @@ Wfapi.prototype.createReprovisionJob = function (req, cb) {
  * Queues a destroy job.
  */
 Wfapi.prototype.createDestroyJob = function (req, cb) {
+    assert.object(req.vm, 'req.vm');
+    assert.uuid(req.vm.uuid, 'req.vm.uuid');
+    assert.uuid(req.vm.server_uuid, 'req.vm.server_uuid');
+
     var self = this;
     var vm_uuid = req.vm.uuid;
     var params = {};
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 8f1175b..6bf6d03 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -770,58 +770,36 @@ function deleteVm(req, res, next) {
 
     req.log.trace({ vm_uuid: req.params.uuid }, 'DeleteVm start');
 
-    if (req.vm.state === 'provisioning') {
-        return next(new restify.errors.ConflictError('Cannot delete a VM ' +
-            'when it is provisioning'));
-    }
-
     if (sync && ['true', 'false'].indexOf(sync) === -1) {
         var error = [ errors.invalidParamErr('sync') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     } else {
         req.params.sync = (sync === 'true' ? true : false);
     }
 
-    // If the vm has no server_uuid and unless it's provisioning, then starting
-    // a destroy workflow would fail right after it starts, since there's
-    // nothing to delete on any CN. In this case, instead of taking some space
-    // in the workflow's queue (slowing down any other worfklow) and waiting
-    // for the workflow to fail, just mark the VM as destroyed in moray.
-    // It's faster, and uses far less resources of the overall system.
+    /*
+     * If the vm has no server_uuid, then starting a destroy workflow would fail
+     * right after it starts, since the part of the workflow that would start
+     * the destroy VM task wouldn't be able to determine on which CN to start
+     * it. In this case, instead of taking some space in the workflow's queue
+     * (slowing down any other worfklow) and waiting for the workflow to fail,
+     * just error right away. It's faster, and uses far less resources of the
+     * overall system. We can't mark the VM as destroyed because in this case
+     * the VM might actually exist somewhere.
+     */
     if (req.vm.server_uuid === undefined || req.vm.server_uuid === null) {
-        req.app.moray.markAsDestroyed(req.vm, onVmMarkedDestroyed);
+        next(new restify.errors.ConflictError('Cannot delete a VM with no ' +
+            'server_uuid'));
     } else {
-        req.app.cnapi.getServer(req.vm.server_uuid,
-            function onGetServer(err, server) {
-                var serverNotFoundError = _cnapiServerNotFoundError(err);
-                if (err && !serverNotFoundError) {
-                    return next(err);
-                }
-
-                if (serverNotFoundError) {
-                    req.app.moray.markAsDestroyed(req.vm, onVmMarkedDestroyed);
-                } else {
-                    return req.app.wfapi.createDestroyJob(req,
-                        function (jobErr, juuid) {
-                            if (jobErr) {
-                                return next(jobErr);
-                            }
-
-                            return handleUpdateVMResponse(req, res, next,
-                                juuid);
-                        });
-                }
-            });
-    }
-
-    function onVmMarkedDestroyed(markDestroyedErr, destroyedVm) {
-        if (markDestroyedErr) {
-            return next(markDestroyedErr);
-        }
+        req.app.wfapi.createDestroyJob(req, function (jobErr, juuid) {
+            if (jobErr) {
+                next(jobErr);
+                return;
+            }
 
-        res.send(200, destroyedVm);
-        return next();
+            handleUpdateVMResponse(req, res, next, juuid);
+        });
     }
 }
 
diff --git a/test/vms.delete_non_existing_no_workflow.test.js b/test/vms.delete_non_existing_no_workflow.test.js
index e1c5b6e..30d945b 100644
--- a/test/vms.delete_non_existing_no_workflow.test.js
+++ b/test/vms.delete_non_existing_no_workflow.test.js
@@ -8,10 +8,9 @@
  * Copyright (c) 2017, Joyent, Inc.
  */
 
-// The goal of this test is to make sure that, when sending a DELETE request
-// for a VM that has no server_uuid, or for which the server_uuid does not
-// represent a CN that actually exists, a destroy workflow is not started and
-// instead the VM's state is set to destroyed immediately.
+// The goal of this test is to make sure that, when sending a DELETE request for
+// a VM that has no server_uuid, a destroy workflow is not started and instead
+// the request results in an error right away.
 
 var assert = require('assert-plus');
 var libuuid = require('libuuid');
@@ -51,66 +50,25 @@ exports.create_vm_with_null_server_uuid = function (t) {
 exports.delete_vm_with_null_server_uuid = function (t) {
     client.del('/vms/' + TEST_VM_UUID,
         function onVmDeleted(err, req, res, body) {
-            t.ifError(err);
-            t.equal(body.state, 'destroyed',
-                'The response body should have a state set to destroyed');
-            t.equal(body.job_uuid, undefined,
-                'The response body should not have a job uuid');
-            t.done();
-        });
-};
+            var expectedErrMsg = 'Cannot delete a VM with no server_uuid';
 
-exports.create_vm_on_non_existing_server_uuid = function (t) {
-    client.put('/vms/' + TEST_VM_UUID, {
-        uuid: TEST_VM_UUID,
-        server_uuid: NON_EXISTING_CN_UUID,
-        alias: vmTest.TEST_VMS_ALIAS,
-        state: 'running'
-    }, function onPutDone(err, req, res, newVm) {
-        t.ifError(err, 'The test VM should be created succesfully');
-        t.ok(newVm, 'The response should contain a VM object');
-        t.equal(newVm.server_uuid, NON_EXISTING_CN_UUID,
-            'The server_uuid property of the test VM should be the uuid of ' +
-            'the non-existing CN');
-        t.done();
-    });
-};
+            t.ok(err, 'deleting a vm with a null server_uuid should error');
+            if (err) {
+                t.equal(err.message, expectedErrMsg,
+                    'Error message should be: ' + expectedErrMsg);
+            }
 
-exports.delete_vm_on_non_existing_server_uuid = function (t) {
-    client.del('/vms/' + TEST_VM_UUID,
-        function onVmDeleted(err, req, res, body) {
-            t.ifError(err);
-            t.equal(body.state, 'destroyed',
-                'The response body should have a state set to destroyed');
-            t.equal(body.job_uuid, undefined,
-                'The response body should not have a job uuid');
-            t.done();
-        });
-};
+            client.get('/vms/' + TEST_VM_UUID,
+                function onGetVm(getVmErr, getVmReq, getVmRes, getVmBody) {
+                    var expectedState = 'running';
 
-exports.create_provisioning_vm = function (t) {
-    client.put('/vms/' + TEST_VM_UUID, {
-        uuid: TEST_VM_UUID,
-        alias: vmTest.TEST_VMS_ALIAS,
-        state: 'provisioning'
-    }, function onPutDone(err, req, res, newVm) {
-        t.ifError(err, 'The test VM should be created succesfully');
-        t.ok(newVm, 'The response should contain a VM object');
-        t.equal(newVm.server_uuid, null,
-            'The server_uuid property of the test VM should be null');
-        t.equal(newVm.state, 'provisioning',
-            'The new VM should be in the provisioning state');
-        t.done();
-    });
-};
+                    t.ifError(getVmErr, 'Getting VM with uuid ' + TEST_VM_UUID +
+                        ' should not error');
+                    t.equal(getVmBody.state, expectedState,
+                        'VM state should be ' + expectedState);
 
-exports.delete_provisioning_vm = function (t) {
-    client.del('/vms/' + TEST_VM_UUID,
-        function onVmDeleted(err, req, res, body) {
-            t.ok(err);
-            t.equal(res.statusCode, 409,
-                'The server should respond with a 409 HTTP status code');
-            t.done();
+                    t.done();
+                });
         });
 };
 
-- 
2.21.0

