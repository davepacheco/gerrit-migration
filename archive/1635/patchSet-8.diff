commit 7176c3a67d4e251785d6412559ead5a51b76a31c (refs/changes/35/1635/8)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-04-03T14:15:39+00:00 (2 years, 6 months ago)
    
    TOOLS-1716 sdcadm fails with "no such image in local IMGAPI"

diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 46e87c8..90ae0dc 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -770,73 +770,119 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
             if (opts.svcs && opts.svcs.indexOf('dockerlogger') === -1) {
                 return next();
             }
-            self.getSvc({
-                app: self.sdc.uuid,
-                svc: 'dockerlogger',
-                allowNone: true
-            }, function (svcErr, dlSvc) {
-                if (svcErr) {
-                    return next(new errors.SDCClientError(svcErr, 'sapi'));
-                }
 
-                if (!dlSvc) {
-                    return next();
-                }
+            var dlCtx = {};
+
+            vasync.pipeline({
+                arg: dlCtx,
+                funcs: [
+                    function getDockerLoggerService(arg, nextFun) {
+                        self.getSvc({
+                            app: self.sdc.uuid,
+                            svc: 'dockerlogger',
+                            allowNone: true
+                        }, function (svcErr, dlSvc) {
+                            if (svcErr) {
+                                nextFun(new errors.SDCClientError(
+                                    svcErr, 'sapi'));
+                                return;
+                            }
+                            if (dlSvc) {
+                                arg.service = dlSvc;
+                            }
+                            nextFun();
+                        });
+                    },
+
+                    function getDockerLoggerImage(arg, nextFun) {
+                        if (!arg.service ||
+                            !arg.service.params.image_uuid) {
+                            nextFun();
+                            return;
+                        }
 
-                var imgUuid = dlSvc.params.image_uuid;
-                self.imgapi.getImage(imgUuid, function (imgErr, img) {
-                    if (imgErr) {
-                        return next(new errors.SDCClientError(
+                        var imgUuid = arg.service.params.image_uuid;
+                        self.imgapi.getImage(imgUuid, function (imgErr, img) {
+                            if (imgErr) {
+                                nextFun(new errors.SDCClientError(
                                     imgErr, 'imgapi'));
-                    }
+                                return;
+                            }
 
-                    if (!img) {
-                        return next();
-                    }
+                            if (img) {
+                                arg.image = img;
+                            }
+                            nextFun();
+                        });
+                    },
 
-                    self.sapi.listInstances({
-                        service_uuid: dlSvc.uuid
-                    }, function (instErr, dlInsts) {
-                        if (instErr) {
-                            return next(new errors.SDCClientError(
-                                        instErr, 'sapi'));
+                    function getDockerloggerInsts(arg, nextFun) {
+                        if (!arg.service) {
+                            nextFun();
+                            return;
                         }
 
-                        dlInsts = dlInsts.map(function (ins) {
-                            var d = {
-                                type: ins.type,
-                                instance: ins.uuid,
-                                service: 'dockerlogger',
-                                image: imgUuid,
-                                version: img.version
-                            };
-                            if (ins.params && ins.params.server_uuid) {
-                                var id = ins.params.server_uuid;
-                                d.server = id;
-                                /*
-                                 * If a compute node has been removed from
-                                 * CNAPI, there may still be a dangling
-                                 * SAPI instance -- if the server no
-                                 * longer exists, skip it.
-                                 */
-                                if (!ctx.serverFromUuid[id]) {
-                                    self.log.warn({
-                                        instance: ins
-                                    }, 'Skipping dockerlogger instance ' +
-                                    'for unknown server');
-                                    return null;
-                                }
-                                d.hostname = ctx.serverFromUuid[id].hostname;
-                                d.server_ip = ctx.serverAdminIpFromUuid[id];
+                        self.sapi.listInstances({
+                            service_uuid: arg.service.uuid
+                        }, function (instErr, dlInsts) {
+                            if (instErr) {
+                                nextFun(new errors.SDCClientError(
+                                            instErr, 'sapi'));
+                                return;
                             }
-                            return (d);
-                        }).filter(function (ins) {
-                            return (ins !== null);
+
+                            arg.insts = dlInsts;
+                            nextFun();
                         });
-                        ctx.insts = ctx.insts.concat(dlInsts);
-                        next();
-                    });
+                    }
+
+                ]
+            }, function (pipeErr) {
+                if (pipeErr) {
+                    next(pipeErr);
+                    return;
+                }
+
+                if (!dlCtx.insts) {
+                    next();
+                    return;
+                }
+
+                var dlInsts = dlCtx.insts.map(function (ins) {
+                    var d = {
+                        type: ins.type,
+                        instance: ins.uuid,
+                        service: 'dockerlogger'
+                    };
+                    if (dlCtx.image) {
+                        d.image = dlCtx.image.uuid;
+                        d.version = dlCtx.image.version;
+                    }
+                    if (ins.params && ins.params.server_uuid) {
+                        var id = ins.params.server_uuid;
+                        d.server = id;
+                        /*
+                         * If a compute node has been removed from
+                         * CNAPI, there may still be a dangling
+                         * SAPI instance -- if the server no
+                         * longer exists, skip it.
+                         */
+                        if (!ctx.serverFromUuid[id]) {
+                            self.log.warn({
+                                instance: ins
+                            }, 'Skipping dockerlogger instance ' +
+                            'for unknown server');
+                            return null;
+                        }
+                        d.hostname = ctx.serverFromUuid[id].hostname;
+                        d.server_ip = ctx.serverAdminIpFromUuid[id];
+                    }
+                    return (d);
+                }).filter(function (ins) {
+                    return (ins !== null);
                 });
+                ctx.insts = ctx.insts.concat(dlInsts);
+                next();
             });
         }
     ]}, function (err) {
diff --git a/lib/steps/agent-services.js b/lib/steps/agent-services.js
index afd2df0..a5dcc1d 100644
--- a/lib/steps/agent-services.js
+++ b/lib/steps/agent-services.js
@@ -99,14 +99,14 @@ function agentServicesEnsureCreated(arg, cb) {
         vasync.forEachPipeline({
             func: function (agent, next) {
                 var name = agent.name;
-                var imgUUIDPath = util.format(
-                    '/opt/smartdc/agents/lib/node_modules/%s/image_uuid',
-                    name);
-                fs.readFile(imgUUIDPath, {
+                var imageUuidPath = '/opt/smartdc/agents/lib/node_modules/' +
+                    name + '/image_uuid';
+                fs.readFile(imageUuidPath, {
                     encoding: 'utf8'
                 }, function (err, data) {
                     if (err) {
-                        log.error({err: err}, 'Error reading agent image uuid');
+                        log.warn({err: err, name: name, path: imageUuidPath},
+                            'could not read agent image_uuid file');
                         next();
                         return;
                     }
@@ -135,6 +135,7 @@ function agentServicesEnsureCreated(arg, cb) {
                 return next();
             });
         },
+
         function checkMinSapiVersion(_, next) {
             var splitVersion = img.version.split('-');
             var validSapi = false;
@@ -180,10 +181,6 @@ function agentServicesEnsureCreated(arg, cb) {
             }, next);
         },
 
-        function getAgentImgVersions(_, next) {
-            getAgentImages(next);
-        },
-
         function saveChangesToHistory(_, next) {
             var changes = [];
             newAgentServices.forEach(function (s) {
@@ -222,25 +219,46 @@ function agentServicesEnsureCreated(arg, cb) {
                 next();
             }
         },
+
+        /*
+         * TOOLS-1716: We'll create agents w/o image_uuids first, in order
+         * to workaround SAPI verification of local IMGAPI images when creating
+         * a service. Then, we'll queue these services for update, given SAPI's
+         * update service will not validate the image uuids.
+         *
+         * This approach could be removed once SAPI-285 is implemented, and we
+         * could save services including image_uuid from the beginning.
+         */
         function addAgentsServices(_, next) {
             vasync.forEachParallel({
                 inputs: newAgentServices,
-                func: function addAgentSvc(agent, callback) {
+                func: function addAgentSvc(agent, nextAgent) {
                     progress('Adding service for agent \'%s\'', agent);
                     log.trace({
                         service: agent,
                         params: agentServices[agent]
                     }, 'Adding new agent service');
                     if (DRY_RUN) {
-                        callback();
+                        nextAgent();
                     } else {
                         sdcadm.sapi.createService(agent, app.uuid,
-                            agentServices[agent], callback);
+                            agentServices[agent], function (sErr, newSvc) {
+                                if (sErr) {
+                                    nextAgent(sErr);
+                                    return;
+                                }
+                                updateAgentServices.push(newSvc);
+                                nextAgent();
+                            });
                     }
                 }
             }, next);
         },
 
+        function getAgentImgVersions(_, next) {
+            getAgentImages(next);
+        },
+
         function updateAgentsServices(_, next) {
             vasync.forEachParallel({
                 inputs: updateAgentServices,
