From 552facefbd9c1907556fa0728160545ef4a8c37c Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 9 Mar 2017 19:05:45 +0100
Subject: [PATCH] TOOLS-1716 sdcadm fails with "no such image in local IMGAPI"

---
 lib/cli/index.js            |  2 +-
 lib/platform.js             | 10 ++++++----
 lib/steps/agent-services.js | 33 ---------------------------------
 lib/ur.js                   | 20 +++++++-------------
 4 files changed, 14 insertions(+), 51 deletions(-)

diff --git a/lib/cli/index.js b/lib/cli/index.js
index 4a8f82b..e887624 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -473,6 +473,6 @@ if (require.main === module) {
         argv: process.argv,
         showCode: true,
         showErr: true,
-        finale: 'exit'
+        finale: 'softexit'
     });
 }
diff --git a/lib/platform.js b/lib/platform.js
index f9eba36..dbbb9a4 100644
--- a/lib/platform.js
+++ b/lib/platform.js
@@ -731,10 +731,12 @@ Platform.prototype.install = function install(opts, callback) {
                         'in channel \'%s\'', opts.image,
                         self.sdcadm.updates.channel || defaultChannel);
             } else {
-                progress('In order not to have to re-download image, ' +
-                         '%s has been left behind.', filepath);
-                progress('After correcting above problem, rerun ' +
-                         '`sdcadm platform install %s`.', filepath);
+                if (filepath) {
+                    progress('In order not to have to re-download image, ' +
+                             '%s has been left behind.', filepath);
+                    progress('After correcting above problem, rerun ' +
+                             '`sdcadm platform install %s`.', filepath);
+                }
             }
             updateHistory(hist, function (_histErr) {
                 callback(err);
diff --git a/lib/steps/agent-services.js b/lib/steps/agent-services.js
index afd2df0..08ef937 100644
--- a/lib/steps/agent-services.js
+++ b/lib/steps/agent-services.js
@@ -91,35 +91,6 @@ function agentServicesEnsureCreated(arg, cb) {
         agentServices[n].metadata[logLevelKey] = 'info';
     });
 
-
-    // The first time we add agent services to SAPI we'll use the HN image
-    // version to create the service, assuming that's the version installed
-    // everywhere across the whole SDC setup
-    function getAgentImages(callback) {
-        vasync.forEachPipeline({
-            func: function (agent, next) {
-                var name = agent.name;
-                var imgUUIDPath = util.format(
-                    '/opt/smartdc/agents/lib/node_modules/%s/image_uuid',
-                    name);
-                fs.readFile(imgUUIDPath, {
-                    encoding: 'utf8'
-                }, function (err, data) {
-                    if (err) {
-                        log.error({err: err}, 'Error reading agent image uuid');
-                        next();
-                        return;
-                    }
-                    agentServices[name].params.image_uuid = data.trim();
-                    next();
-                });
-            },
-            inputs: agentNames.map(function (agent) {
-                return agentServices[agent];
-            })
-        }, callback);
-    }
-
     var newAgentServices = [];
     var updateAgentServices = [];
 
@@ -180,10 +151,6 @@ function agentServicesEnsureCreated(arg, cb) {
             }, next);
         },
 
-        function getAgentImgVersions(_, next) {
-            getAgentImages(next);
-        },
-
         function saveChangesToHistory(_, next) {
             var changes = [];
             newAgentServices.forEach(function (s) {
diff --git a/lib/ur.js b/lib/ur.js
index ecfeb93..fbffb94 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -80,18 +80,12 @@ function exec(opts, cb) {
     assert.func(cb, 'cb');
     var cb_ = once(cb);
 
-    // FIXME: modify to use urclient via sdcadm.getUrConnection()
-    var client = urclient.create_ur_client({
-        log: opts.log || opts.sdcadm.log,
-        amqp_config: opts.sdcadm.config.amqp,
-        connect_timeout: (opts.connectTimeout === undefined ?
-            5000 : opts.connectTimeout),
-        enable_http: false
-    });
-
-    client.on('error', cb_);
-    client.on('ready', function () {
-        client.exec({
+    opts.sdcadm.getUrConnection(function (urErr, urClient) {
+        if (urErr) {
+            cb_(urErr);
+            return;
+        }
+        urClient.exec({
             script: opts.cmd,
             server_uuid: opts.server,
             timeout: (opts.execTimeout === undefined ?
-- 
2.21.0

