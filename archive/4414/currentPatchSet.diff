From c41edaa852414a628e41ae6b133db08e9700ab4b Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Fri, 22 Jun 2018 19:15:54 +0000
Subject: [PATCH] Revert "TRITON-170 napi-ufds-watcher should retry when
 failing to list default VLAN"

This reverts commit 60d76a6102cf06879617fa3cfcd3eda7ba6503d4.
---
 lib/default-fabric-setup.js | 131 ++++++++++++++----------------------
 1 file changed, 49 insertions(+), 82 deletions(-)

diff --git a/lib/default-fabric-setup.js b/lib/default-fabric-setup.js
index 448ad9b..8b5e4eb 100644
--- a/lib/default-fabric-setup.js
+++ b/lib/default-fabric-setup.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2015, Joyent, Inc.
  */
 
 /**
@@ -53,46 +53,29 @@ function DefaultFabricSetupStream(opts) {
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        function find() {
-            self.napiClient.listFabricVLANs(_opts.uuid,
-                reqOptions,
-                function listCb(err, vlans) {
-                    var timeout = 10000;
+        self.napiClient.listFabricVLANs(_opts.uuid,
+            reqOptions,
+            function (err, vlans) {
 
-                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
-                        self.log.warn({err: err, user: _opts.uuid},
-                            'Server error finding vlan for user %s. ' +
-                            'Retrying in %dms',
-                            _opts.uuid, timeout);
-                        setTimeout(find, timeout);
-                        return;
-                    } else if (err) {
-                        self.log.error({err: err, user: _opts.uuid},
-                            'Error finding vlan for user %s',
-                            _opts.uuid);
-                        cb(err);
-                        return;
-                    }
+            if (err) {
+                return cb(err);
+            }
 
-                    var defaultVlan = vlans.filter(function matchNm(v) {
-                        return (v.name === opts.default_vlan.name);
-                    });
+            var defaultVlan = vlans.reduce(function (acc, v) {
+                return acc || (v.name === opts.default_vlan.name ? v : null);
+            }, null);
 
-                    if (defaultVlan) {
-                        self.log.info({ vlan: defaultVlan, user: _opts.uuid },
-                            'Default vlan exists for user');
-                        _opts.defaultVlan = defaultVlan;
-                        cb();
-                        return;
-                    }
+            if (defaultVlan) {
+                self.log.info({ vlan: defaultVlan, user: _opts.uuid },
+                    'Default vlan exists for user');
+                _opts.defaultVlan = defaultVlan;
+                return cb();
+            }
 
-                    self.log.info({ user: _opts.uuid },
-                        'Default vlan does not exist for user');
-                    cb();
-                    return;
-                });
-        }
-        find();
+            self.log.info({ user: _opts.uuid },
+                'Default vlan does not exist for user');
+            return cb();
+        });
     }
 
     function createDefaultVlan(_opts, cb) {
@@ -143,51 +126,35 @@ function DefaultFabricSetupStream(opts) {
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        function find() {
-            self.napiClient.listFabricNetworks(_opts.uuid,
-                opts.default_network.vlan_id,
-                {},
-                reqOptions,
-                function listCb(err, networks) {
-                    var timeout = 10000;
+        self.napiClient.listFabricNetworks(_opts.uuid,
+            opts.default_network.vlan_id,
+            {},
+            reqOptions,
+            function (err, networks) {
+            var defaultNetwork;
+            if (err) {
+                self.log.error({ err: err, user: _opts.uuid,
+                    requestId: _opts.requestId },
+                    'Error creating default fabric network for user');
+                return cb(err);
+            }
+            // XXX - this network is not necessarily the right one.
+            defaultNetwork = networks.reduce(function (acc, n) {
+                return n.name === opts.default_network.name ? n : null;
+            }, null);
+            if (defaultNetwork) {
+                self.log.info({ network: defaultNetwork, user: _opts.uuid,
+                    requestId: _opts.requestId },
+                    'Default network exists for user',
+                    defaultNetwork.uuid, _opts.uuid);
+                _opts.defaultNetwork = defaultNetwork;
+                return cb();
+            }
 
-                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
-                        self.log.warn({err: err, user: _opts.uuid},
-                            'Server error finding network for user %s. ' +
-                            'Retrying in %dms',
-                            _opts.uuid, timeout);
-                        setTimeout(find, timeout);
-                        return;
-                    } else if (err) {
-                        self.log.error({err: err, user: _opts.uuid},
-                            'Error finding network for user %s',
-                            _opts.uuid);
-                        cb(err);
-                        return;
-                    }
-                    // XXX - this network is not necessarily the right one.
-                    var defaultNetwork = networks.filter(function matchNm(n) {
-                        return (n.name === opts.default_network.name);
-                    });
-                    if (defaultNetwork) {
-                        self.log.info({network: defaultNetwork,
-                                       user: _opts.uuid,
-                                       requestId: _opts.requestId
-                                      },
-                                      'Default network exists for user',
-                                      defaultNetwork.uuid,
-                                      _opts.uuid);
-                        _opts.defaultNetwork = defaultNetwork;
-                        cb();
-                        return;
-                    }
-                    self.log.info({ user: _opts.uuid },
-                        'Default network does not exist for user');
-                    cb();
-                    return;
-            });
-        }
-        find();
+            self.log.info({ user: _opts.uuid },
+                'Default network does not exist for user');
+            return cb();
+        });
     }
 
     function createDefaultNetwork(_opts, cb) {
@@ -209,7 +176,7 @@ function DefaultFabricSetupStream(opts) {
                     var timeout = 10000;
                     if (_err &&
                         _err.statusCode >= 500 && _err.statusCode < 600) {
-                        self.log.warn({ err: _err, user: _opts.uuid },
+                        self.log.warn({ err: _err },
                             'Server error creating network for user %s. ' +
                             'Retrying in %sms',
                             _opts.uuid, timeout);
-- 
2.21.0

