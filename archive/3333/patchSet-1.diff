From ea6cb160c446237f2ea4fe2e6294fa4560633046 Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Thu, 8 Feb 2018 22:47:53 +0000
Subject: [PATCH] joyent/node-vmapi-resolver#1 implement initial VMAPI cueball
 resolver

---
 CONTRIBUTING.md |  18 +++
 Makefile        |  30 +++++
 Makefile.targ   | 309 ++++++++++++++++++++++++++++++++++++++++++++++++
 README.md       |  61 ++++++++++
 jsl.node.conf   | 139 ++++++++++++++++++++++
 lib/resolver.js | 287 ++++++++++++++++++++++++++++++++++++++++++++
 package.json    |  21 ++++
 7 files changed, 865 insertions(+)
 create mode 100644 CONTRIBUTING.md
 create mode 100644 Makefile
 create mode 100644 Makefile.targ
 create mode 100644 README.md
 create mode 100644 jsl.node.conf
 create mode 100644 lib/resolver.js
 create mode 100644 package.json

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..a391735
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,18 @@
+# Contributing to vmapi-resolver
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes.  Anyone can submit changes.  To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+You must submit a GitHub issue before submitting a change for code review.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean.  The "prepush" target runs the
+"check" target, which requires these separate tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..e132ed0
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,30 @@
+#
+# Copyright (c) 2018, Joyent, Inc. All rights reserved.
+#
+# Makefile: top-level Makefile
+#
+# This Makefile contains only repo-specific logic and uses included makefiles
+# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are
+# used by other repos as well.
+#
+
+#
+# Tools must be installed on the path
+#
+JSL		 = jsl
+JSSTYLE		 = jsstyle
+
+#
+# Files
+#
+JS_FILES	:= $(shell find lib -name '*.js')
+JSON_FILES      := package.json
+JSL_FILES_NODE   = $(JS_FILES)
+JSSTYLE_FILES	 = $(JS_FILES)
+JSL_CONF_NODE	 = jsl.node.conf
+CLEAN_FILES	+= node_modules
+
+all:
+	npm install
+
+include ./Makefile.targ
diff --git a/Makefile.targ b/Makefile.targ
new file mode 100644
index 0000000..b6e642b
--- /dev/null
+++ b/Makefile.targ
@@ -0,0 +1,309 @@
+# -*- mode: makefile -*-
+#
+# Copyright (c) 2012, Joyent, Inc. All rights reserved.
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
+#			(see above). If you want to use, say, '.md' instead, then
+#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE	?= tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .restdown
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs:							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..4326f29
--- /dev/null
+++ b/README.md
@@ -0,0 +1,61 @@
+# vmapi-resolver
+
+This is a [node-cueball](https://github.com/joyent/node-cueball) Resolver which
+uses VMAPI to discover backends.
+
+vmapi-resolver periodically polls VMAPI for information about deployed virtual
+machines. This is meant to be used as a library imported into a program that
+uses node-cueball to manage connections.
+
+If VMs with the given NIC and VM tags has its state transitioned to 'running',
+it will be picked up by vmapi-resolver and emitted with an 'added' event. If
+a VM that _was_ running leaves the 'running' state, vmapi-resolver will emit
+a 'removed' event.
+
+For more information on Cueball resolvers, see the Cueball
+[documentation](https://joyent.github.io/node-cueball/#about_the_interface).
+
+## Install
+
+	npm install vmapi-resolver
+
+## Example
+
+This is a minimal example of how to use vmapi-resolver:
+
+```javascript
+var mod_resolver = require('vmapi-resolver');
+var mod_bunyan = require('bunyan');
+
+var log = mod_bunyan.createLogger({name: 'main'});
+var resolver = new mod_resolver.VmapiResolver({
+	'log': log,
+	'url': 'http://vmapi.coal-1.example.com', /* VMAPI url */
+	'pollInterval': 600000, /* poll VMAPI every 10 minutes */
+	'tags': { /* NIC and VM tags */
+		'vm_tag_name': 'manta_role',
+		'vm_tag_value': 'postgres',
+		'nic_tag_name': 'manta'
+	},
+	'backend_port': 5432 /* port number of the listening process */
+});
+
+resolver.on('added', function (key, backend) {
+	log.info(backend, 'added');
+});
+
+resolver.on('removed', function (backend) {
+	log.info(backend, 'removed');
+});
+
+resolver.start();
+```
+
+## License
+
+MIT. See the LICENSE file.
+
+## Contributing
+
+Contributions should be made via the [Joyent Gerrit](https://cr.joyent.us).
+See the CONTRIBUTING file.
diff --git a/jsl.node.conf b/jsl.node.conf
new file mode 100644
index 0000000..c44e8ee
--- /dev/null
+++ b/jsl.node.conf
@@ -0,0 +1,139 @@
+#
+# Configuration File for JavaScript Lint 
+#
+# This configuration file can be used to lint a collection of scripts, or to enable
+# or disable warnings for scripts that are linted via the command line.
+#
+
+### Warnings
+# Enable or disable warnings based on requirements.
+# Use "+WarningName" to display or "-WarningName" to suppress.
+#
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
++comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
++comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
+-inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
++leading_decimal_point        # leading decimal point may indicate a number or an object member
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
++nested_comment               # nested comment
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
++partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
+-unreferenced_argument        # argument declared but never referenced: {name}
+-unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
++useless_assign               # useless assignment
++useless_comparison           # useless comparison; comparing identical expressions
+-useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
++with_statement               # with statement hides undeclared variables; use temporary variable instead
+
+
+### Output format
+# Customize the format of the error message.
+#    __FILE__ indicates current file path
+#    __FILENAME__ indicates current file name
+#    __LINE__ indicates current line
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
+#
+# Visual Studio syntax (default):
++output-format __FILE__(__LINE__): __ERROR__
+# Alternative syntax:
+#+output-format __FILE__:__LINE__: __ERROR__
+
+
+### Context
+# Show the in-line position of the error.
+# Use "+context" to display or "-context" to suppress.
+#
++context
+
+
+### Control Comments
+# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
+# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
+# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
+# although legacy control comments are enabled by default for backward compatibility.
+#
+-legacy_control_comments
+
+
+### Defining identifiers
+# By default, "option explicit" is enabled on a per-file basis.
+# To enable this for all files, use "+always_use_option_explicit"
+-always_use_option_explicit
+
+# Define certain identifiers of which the lint is not aware.
+# (Use this in conjunction with the "undeclared identifier" warning.)
+#
+# Common uses for webpages might be:
++define __dirname
++define clearInterval
++define clearTimeout
++define console
++define exports
++define global
++define module
++define process
++define require
++define setInterval
++define setImmediate
++define setTimeout
++define Buffer
++define JSON
++define Math
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
+
+### Files
+# Specify which files to lint
+# Use "+recurse" to enable recursion (disabled by default).
+# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
+# or "+process Folder\Path\*.htm".
+#
+
diff --git a/lib/resolver.js b/lib/resolver.js
new file mode 100644
index 0000000..56e4bb2
--- /dev/null
+++ b/lib/resolver.js
@@ -0,0 +1,287 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * resolver.js: periodically poll Triton's VMAPI for information about deployed
+ * VMs.
+ */
+
+var mod_assert = require('assert-plus');
+var mod_crypto = require('crypto');
+var mod_uuid = require('uuid/v4');
+
+var mod_util = require('util');
+
+var FSM = require('mooremachine').FSM;
+var VMAPI = require('sdc-clients').VMAPI;
+var EventEmitter = require('events').EventEmitter;
+
+function VmapiResolver(opts) {
+	mod_assert.object(opts, 'opts');
+	mod_assert.string(opts.url, 'opts.url');
+	mod_assert.object(opts.tags, 'opts.tags');
+	mod_assert.string(opts.tags.vm_tag_name, 'opts.tags.vm_tag_name');
+	mod_assert.string(opts.tags.vm_tag_value, 'opts.tags.vm_tag_value');
+	mod_assert.string(opts.tags.nic_tag_name, 'opts.tags.nic_tag_name');
+	mod_assert.number(opts.backend_port, 'opts.backend_port');
+	mod_assert.number(opts.pollInterval, 'opts.pollInterval');
+
+	this.vmr_url = opts.url; /* VMAPI url */
+	this.vmr_tags = opts.tags; /* VM and NIC tags */
+	this.vmr_backend_port = opts.backend_port; /* backend listening port */
+	this.vmr_pollInterval = opts.pollInterval; /* poll interval */
+	this.vmr_log = opts.log.child({'component': 'VmapiResolver'});
+	this.vmr_backends = {}; /* emitted backends */
+	this.vmr_discovered_backends = [];  /* response from VMAPI */
+	this.vmr_lastPoll = null; /* blocks setInterval() from piling up */
+
+	/* useful for debugging */
+	this.vmr_lastBackends = {};
+	this.vmr_lastAdded = [];
+	this.vmr_lastRemoved = [];
+
+	/* create VMAPI client */
+	this.vmr_vmapi = new VMAPI({
+		'url': this.vmr_url,
+		'retry': {
+			retries: 3,
+			minTimeout: 2000,
+			maxTimeout: 10000
+		},
+		'log': this.vmr_log.child({'component': 'VmapiClient'}),
+		'agent': false
+	});
+
+	EventEmitter.call(this);
+	FSM.call(this, 'stopped'); /* transition to 'stopped' state */
+}
+mod_util.inherits(VmapiResolver, FSM);
+
+VmapiResolver.prototype.getBackends = function getBackends(cb) {
+	var log = this.vmr_log;
+	var vm_tag_name = this.vmr_tags.vm_tag_name;
+	var vm_tag_value = this.vmr_tags.vm_tag_value;
+	var nic_name = this.vmr_tags.nic_tag_name;
+	var backends = [];
+
+	/* create a 'tag.manta_role' or similar for filtering VMs */
+	var tag_field = mod_util.format('tag.%s', vm_tag_name);
+
+	var filter = {};
+	filter['state'] = 'running';
+	filter[tag_field] = vm_tag_value;
+
+	/* find VMs */
+	this.vmr_vmapi.listVms(filter, function (err, vms) {
+		if (err) {
+			cb(err);
+			return;
+		}
+		Object.keys(vms).forEach(function (vm) {
+			vms[vm].nics.forEach(function (nic) {
+				/* nic tag has to match the requested nic tag */
+				if (nic.nic_tag === nic_name) {
+					backends.push({
+						'name': vms[vm].alias,
+						'address': nic.ip
+					});
+				}
+			});
+		});
+		log.info(backends, 'discovered backends');
+		cb(null, backends);
+	});
+};
+
+VmapiResolver.prototype.diffAndEmit = function diffAndEmit() {
+	var self = this;
+	var added = [];
+	var removed = [];
+	var new_backends = {};
+	var old_backend;
+	var found = false;
+	var be;
+
+	this.vmr_discovered_backends.forEach(function (backend) {
+		be = {
+			'name': backend.name,
+			'address': backend.address,
+			'port': self.vmr_backend_port
+		};
+		Object.keys(self.vmr_backends).forEach(function (key) {
+			old_backend = self.vmr_backends[key];
+			if (old_backend.address === be.address &&
+			    old_backend.name === be.name) {
+				found = true;
+				be.key = key;
+			}
+		});
+		if (!found) {
+			be.key = mod_crypto.randomBytes(9).toString('base64');
+			added.push(be.key);
+		}
+		new_backends[be.key] = be;
+		found = false;
+	});
+
+	Object.keys(this.vmr_backends).forEach(function (k) {
+		if (new_backends[k] === undefined) {
+			removed.push(k);
+		}
+	});
+	added.forEach(function (k) {
+		self.emit('added', k, new_backends[k]);
+	});
+	removed.forEach(function (k) {
+		self.emit('removed', k);
+	});
+
+	/* keep the backends from the last time we got a modification */
+	if (added.length > 0 || removed.length > 0) {
+		this.vmr_lastBackends = this.vmr_backends;
+	}
+	this.vmr_backends = new_backends; /* set the new backends */
+
+	/* save the backends added/removed in this cycle for debugging */
+	this.vmr_lastAdded = added;
+	this.vmr_lastRemoved = removed;
+
+	this.vmr_log.info({
+		'added': added,
+		'removed': removed
+	}, 'backends modified');
+};
+
+
+VmapiResolver.prototype.state_stopped = function (S) {
+	S.on(this, 'startAsserted', function () {
+		S.gotoState('starting');
+	});
+};
+
+VmapiResolver.prototype.state_starting = function (S) {
+	S.on(this, 'failAsserted', function () {
+		S.gotoState('failed');
+	});
+
+	var self = this;
+	this.getBackends(function (err, backends) {
+		if (err) {
+			self.vmr_log.error(err, 'could not get backends');
+			self.emit('failAsserted');
+			return;
+		}
+		self.vmr_discovered_backends = backends;
+		S.gotoState('running');
+	});
+};
+
+VmapiResolver.prototype.state_running = function (S) {
+	var self = this;
+	this.diffAndEmit();
+
+	var interval = setInterval(function () {
+		if (self.vmr_lastPoll) {
+			/* last poll is still running */
+			return;
+		}
+		self.vmr_lastPoll = new Date().toISOString();
+		self.getBackends(function (err, backends) {
+			self.vmr_lastPoll = null;
+			if (err) {
+				self.vmr_log.error(err, 'could not get'
+				    + ' backends');
+				return;
+			}
+			self.vmr_discovered_backends = backends;
+			self.diffAndEmit();
+		});
+	}, this.vmr_pollInterval);
+	S.on(this, 'stopAsserted', function () {
+		clearInterval(interval);
+		S.gotoState('stopping');
+	});
+};
+
+VmapiResolver.prototype.state_failed = function (S) {
+	var self = this;
+
+	var interval = setInterval(function () {
+		if (self.vmr_lastPoll) {
+			/* last poll is still running */
+			return;
+		}
+		self.vmr_lastPoll = new Date().toISOString();
+		self.getBackends(function (err, backends) {
+			self.vmr_lastPoll = null;
+			if (err) {
+				self.vmr_log.error(err, 'could not get'
+				    + ' backends');
+				return;
+			}
+			self.vmr_log.info('successfully got backends,'
+			    + ' transitioning to "running"');
+			clearInterval(interval);
+			self.vmr_discovered_backends = backends;
+			S.gotoState('running');
+		});
+	}, this.vmr_pollInterval);
+
+	S.on(this, 'stopAsserted', function () {
+		clearInterval(interval);
+		S.gotoState('stopping');
+	});
+};
+
+VmapiResolver.prototype.state_stopping = function (S) {
+	var self = this;
+	var to_remove;
+	var removed = [];
+
+	/* remove all backends */
+	Object.keys(this.vmr_backends).forEach(function (be) {
+		to_remove = self.vmr_backends[be];
+		self.emit('removed', to_remove['key']);
+		removed.push(to_remove);
+	});
+
+	this.vmr_lastRemoved = removed;
+	this.vmr_backends = {};
+	S.immediate(function () {
+		S.gotoState('stopped');
+	});
+};
+
+VmapiResolver.prototype.start = function start() {
+	mod_assert.ok(this.isInState('stopped'));
+	this.emit('startAsserted');
+};
+
+VmapiResolver.prototype.stop = function stop() {
+	mod_assert.ok(this.isInState('running') ||
+	    this.isInState('failed'));
+	this.emit('stopAsserted');
+};
+
+VmapiResolver.prototype.count = function count() {
+	return (this.vmr_backends.length);
+};
+
+VmapiResolver.prototype.getLastError = function getLastError() {
+	return (this.vmr_last_error);
+};
+
+VmapiResolver.prototype.list = function list() {
+	return (this.vmr_backends);
+};
+
+
+
+module.exports = {
+	VmapiResolver: VmapiResolver
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..5334c2a
--- /dev/null
+++ b/package.json
@@ -0,0 +1,21 @@
+{
+  "name": "vmapi-resolver",
+  "version": "1.0.0",
+  "description": "node-cueball resolver using VMAPI",
+  "repository": {
+    "url": "https://github.com/joyent/node-vmapi-resolver.git",
+    "type": "git"
+  },
+  "main": "lib/resolver.js",
+  "dependencies": {
+    "assert-plus": "1.0.0",
+    "changefeed": "1.3.0",
+    "bunyan": "1.8.12",
+    "mooremachine": "2.2.0",
+    "restify-clients": "1.5.2",
+    "sdc-clients": "10.4.1",
+    "uuid": "3.2.1"
+  },
+  "author": "Joyent Inc.",
+  "license": "MIT"
+}
-- 
2.21.0

