From 86add19c98a87ba4b885a73120540e5d114fa22b Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Thu, 12 Jan 2017 17:03:03 -0800
Subject: [PATCH] joyent/node-cueball#71 add earlier assertion to help catch
 #70, and dupe tests Reviewed by: Dave Pacheco <dap@joyent.com>

---
 lib/set.js        |   7 ++-
 test/cset.test.js |   7 ++-
 test/dns.test.js  | 156 +++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 163 insertions(+), 7 deletions(-)

diff --git a/lib/set.js b/lib/set.js
index 03e2c0c..38fadd8 100644
--- a/lib/set.js
+++ b/lib/set.js
@@ -120,6 +120,8 @@ mod_util.inherits(CueBallConnectionSet, FSM);
 
 CueBallConnectionSet.prototype.on_resolver_added = function (k, backend) {
 	backend.key = k;
+	mod_assert.strictEqual(this.cs_keys.indexOf(k), -1,
+	    'Resolver key is a duplicate');
 	var idx = Math.floor(Math.random() * (this.cs_keys.length + 1));
 	this.cs_keys.splice(idx, 0, k);
 	this.cs_backends[k] = backend;
@@ -130,8 +132,9 @@ CueBallConnectionSet.prototype.on_resolver_removed = function (k) {
 	var self = this;
 
 	var idx = this.cs_keys.indexOf(k);
-	if (idx !== -1)
-		this.cs_keys.splice(idx, 1);
+	mod_assert.notStrictEqual(idx, -1, 'Resolver removed key that is not ' +
+	    'present in cs_keys');
+	this.cs_keys.splice(idx, 1);
 	delete (this.cs_backends[k]);
 	delete (this.cs_dead[k]);
 
diff --git a/test/cset.test.js b/test/cset.test.js
index cea02f8..118c558 100644
--- a/test/cset.test.js
+++ b/test/cset.test.js
@@ -370,15 +370,16 @@ mod_tape.test('removing an unused backend (cueball#47)', function (t) {
 	resolver.emit('added', 'b1', {});
 	resolver.emit('added', 'b2', {});
 	resolver.emit('added', 'b3', {});
+	var bkeys = ['b1', 'b2', 'b3'];
 
 	setImmediate(function () {
 		t.equal(connections.length, 2);
 		summarize();
-		var bs = Object.keys(counts).filter(function (k) {
+		var bs = bkeys.filter(function (k) {
 			return (counts[k] > 0);
 		});
-		var nbs = Object.keys(counts).filter(function (k) {
-			return (counts[k] === 0);
+		var nbs = bkeys.filter(function (k) {
+			return (counts[k] === undefined || counts[k] === 0);
 		});
 		t.equal(bs.length, 2);
 		index[bs[0]][0].connect();
diff --git a/test/dns.test.js b/test/dns.test.js
index 9008947..17c12e3 100644
--- a/test/dns.test.js
+++ b/test/dns.test.js
@@ -152,7 +152,37 @@ DummyDnsClient.prototype.lookup = function (options, cb) {
 				});
 				reply.header.anCount++;
 			}
-
+		} else if (parts[1] === 'dupe' && parts[2] === '_tcp' &&
+		    options.type === 'SRV') {
+			reply.header.flags.rcode = mod_proto.rCodes.NOERROR;
+			reply.answer.push({
+				name: options.domain,
+				rtype: mod_proto.queryTypes.SRV,
+				rclass: mod_proto.qClasses.IN,
+				rttl: srv_ttl,
+				rdata: {
+					priority: 0,
+					weight: 10,
+					port: 112,
+					target: 'dupe.ok'
+				}
+			});
+			reply.header.anCount++;
+			if (use_a2) {
+				reply.answer.push({
+					name: options.domain,
+					rtype: mod_proto.queryTypes.SRV,
+					rclass: mod_proto.qClasses.IN,
+					rttl: srv_ttl,
+					rdata: {
+						priority: 0,
+						weight: 10,
+						port: 112,
+						target: 'dupe.ok'
+					}
+				});
+				reply.header.anCount++;
+			}
 		} else if (parts[1] === 'a' && options.type === 'A') {
 			reply.header.flags.rcode = mod_proto.rCodes.NOERROR;
 			reply.answer.push({
@@ -193,8 +223,34 @@ DummyDnsClient.prototype.lookup = function (options, cb) {
 				rdata: { target: '1234:abcd::1' }
 			});
 			reply.header.anCount++;
+		} else if (parts[1] === 'dupe' && options.type === 'A') {
+			reply.header.flags.rcode = mod_proto.rCodes.NOERROR;
+			reply.answer.push({
+				name: options.domain,
+				rtype: mod_proto.queryTypes.A,
+				rclass: mod_proto.qClasses.IN,
+				rttl: 3600,
+				rdata: { target: '1.2.3.1' }
+			});
+			reply.header.anCount++;
+			reply.answer.push({
+				name: options.domain,
+				rtype: mod_proto.queryTypes.A,
+				rclass: mod_proto.qClasses.IN,
+				rttl: 3600,
+				rdata: { target: '1.2.3.1' }
+			});
+			reply.header.anCount++;
+			reply.answer.push({
+				name: options.domain,
+				rtype: mod_proto.queryTypes.A,
+				rclass: mod_proto.qClasses.IN,
+				rttl: 3600,
+				rdata: { target: '1.2.3.1' }
+			});
+			reply.header.anCount++;
 		} else if (parts[1] === 'a' || parts[1] === 'aaaa' ||
-		    parts[1] === 'a2') {
+		    parts[1] === 'a2' || parts[1] === 'dupe') {
 			reply.header.flags.rcode = mod_proto.rCodes.NOERROR;
 			/* send a NODATA response. */
 		}
@@ -673,6 +729,102 @@ mod_tape.test('short-cut on non-ipv6', function (t) {
 	res.start();
 });
 
+mod_tape.test('srv lookup, duped records', function (t) {
+	use_a2 = false;
+	srv_ttl = 1;
+	var res = new mod_resolver.DNSResolver({
+		domain: 'dupe.ok',
+		service: '_foo._tcp',
+		defaultPort: 112,
+		resolvers: ['1.2.3.4'],
+		recovery: recovery,
+		log: log
+	});
+	var backends = [], keys = [];
+	res.on('added', function (key, backend) {
+		keys.push(key);
+		backends.push(backend);
+	});
+	res.on('removed', function (key) {
+		var idx = keys.indexOf(key);
+		keys.splice(idx, 1);
+	});
+	res.on('stateChanged', function (st) {
+		if (st === 'failed') {
+			t.fail();
+			res.stop();
+			t.end();
+		} else if (st === 'running') {
+			t.equal(keys.length, 1);
+			t.equal(backends.length, 1);
+			t.strictEqual(backends[0].address, '1.2.3.1');
+			t.strictEqual(backends[0].port, 112);
+
+			t.equal(nsclients.length, 1);
+			var history = nsclients[0].history.map(function (f) {
+				return (f.domain + '/' + f.type);
+			});
+			t.deepEqual(history, [
+				'_foo._tcp.dupe.ok/SRV', /* no retries, SRV */
+				'dupe.ok/A'
+			]);
+
+			nsclients[0].history = [];
+
+			use_a2 = true;
+			setTimeout(stage2, 1500);
+		}
+	});
+	res.start();
+
+	function stage2() {
+		t.equal(keys.length, 1);
+		t.equal(backends.length, 1);
+		t.strictEqual(backends[0].address, '1.2.3.1');
+		t.strictEqual(backends[0].port, 112);
+
+		t.equal(nsclients.length, 1);
+		var history = nsclients[0].history.map(
+		    function (f) {
+			return (f.domain + '/' + f.type);
+		});
+		t.deepEqual(history, [
+			'_foo._tcp.dupe.ok/SRV'
+		]);
+
+		nsclients[0].history = [];
+
+		use_a2 = false;
+
+		setTimeout(stage3, 1500);
+	}
+
+	function stage3() {
+		t.equal(keys.length, 1);
+		t.equal(backends.length, 1);
+		t.strictEqual(backends[0].address, '1.2.3.1');
+		t.strictEqual(backends[0].port, 112);
+
+		t.equal(nsclients.length, 1);
+		var history = nsclients[0].history.map(
+		    function (f) {
+			return (f.domain + '/' + f.type);
+		});
+		t.deepEqual(history, [
+			'_foo._tcp.dupe.ok/SRV',
+			'_foo._tcp.dupe.ok/SRV'
+		]);
+
+		nsclients[0].history = [];
+
+		use_a2 = false;
+		srv_ttl = 3600;
+
+		res.stop();
+		t.end();
+	}
+});
+
 mod_tape.test('cleanup sandbox', function (t) {
 	sandbox.restore();
 	t.end();
-- 
2.21.0

