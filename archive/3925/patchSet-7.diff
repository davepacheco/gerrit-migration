commit acd625333b5ba804d17b6020370e9beb401f068d (refs/changes/25/3925/7)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-05-15T21:37:25+00:00 (1 year, 5 months ago)
    
    node-fast#17 node-fast could track client metrics
    TRITON-375 node-moray should expose similar metrics to moray server

diff --git a/CHANGES.md b/CHANGES.md
index e222bc0..0a2a6ed 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,11 @@
 
 ## Not yet released.
 
+None yet.
+
+## v2.5.0
+
+* #17 node-fast could track client metrics
 * #16 fastserve cannot be run concurrently even with different arguments
 
 ## v2.4.0
diff --git a/README.md b/README.md
index e0c4d01..ec6e0eb 100644
--- a/README.md
+++ b/README.md
@@ -104,17 +104,18 @@ function provided by the Kang library.
 
 ### Metric Collection
 
-The Fast server optionally collects some basic request metrics using
+The Fast client and server optionally collect some basic request metrics using
 [node-artedi](https://github.com/joyent/node-artedi).
 
-The metrics collected by the fast server are:
+The metrics collected are:
 
 * total request count
 * latency of requests, implemented as a histogram
 
-You can pass an artedi-style metric collector into the Fast server constructor
-to enable metric collection. An example of how to do this is included in the
-built-in demo server ("fastserve").
+You can pass an artedi-style metric collector into the Fast server or client
+constructor to enable metric collection. An example of how to do this for the
+server is included in the built-in demo server ("fastserve") and the
+benchmarking tool ("fastbench") includes a client example with metrics enabled.
 
 ### DTrace probes
 
@@ -184,6 +185,7 @@ Constructor arguments:
 
 Name              | Type         | Meaning
 ----------------- | ------------ | -------
+`collector`       | object       | [artedi](https://github.com/joyent/node-artedi)-style metric collector
 `log`             | object       | [bunyan](https://github.com/trentm/node-bunyan)-style logger
 `transport`       | `net.Socket` | underlying TCP connection to the server
 `nRecentRequests` | positive int | number of recent requests to track for debugging purposes
diff --git a/bin/fastbench b/bin/fastbench
index 96e574e..644fedf 100755
--- a/bin/fastbench
+++ b/bin/fastbench
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -15,11 +15,13 @@
  * measuring latency and throughput.
  */
 
+var mod_artedi = require('artedi');
 var mod_assertplus = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
 var mod_extsprintf = require('extsprintf');
 var mod_getopt = require('posix-getopt');
+var mod_http = require('http');
 var mod_jsprim = require('jsprim');
 var mod_kang = require('kang');
 var mod_net = require('net');
@@ -40,6 +42,8 @@ var fbDflConcurrency = 1;
 var fbDflReportingInterval = 5;
 /* default port for kang server */
 var fbDflKangPort = 16520;
+/* default port for artedi server */
+var fbDflArtediPort = 16521;
 
 /*
  * The Big Theory Statement in lib/fast_server.js explains that completing N
@@ -90,6 +94,7 @@ function main()
 	    'fbDuration': null,
 	    'fbReportingInterval': fbDflReportingInterval * 1000,
 	    'fbConcurrency': fbDflConcurrency,
+	    'fbArtediPort': fbDflArtediPort,
 	    'fbKangPort': fbDflKangPort
 	};
 
@@ -175,9 +180,12 @@ function parseOptInt(option, min)
 
 function fastbench(config)
 {
+	var collector;
 	var log, queue, bencher, nconns, i;
 	var start = new Date();
 
+	collector = mod_artedi.createCollector();
+
 	printf('%s (%d) pid %d: running workload "%s" ',
 	    start.toISOString(), start.getTime(), process.pid,
 	    config.fbWorkload.name());
@@ -214,6 +222,7 @@ function fastbench(config)
 		});
 		csock.on('connect', function () {
 			var fastclient = new mod_fast.FastClient({
+			    'collector': collector,
 			    'log': log,
 			    'transport': csock,
 			    'nRecentRequests': 5
@@ -230,23 +239,13 @@ function fastbench(config)
 	    }
 	});
 
+
 	bencher = new FastBench();
 	bencher.fb_config = config;
 	bencher.fb_sockets = [];
 	bencher.fb_fastclients = [];
 
-	nconns = Math.ceil(config.fbConcurrency / fbDflRequestsPerConnection);
-	mod_assertplus.ok(nconns > 0);
-	for (i = 0; i < nconns; i++) {
-		queue.push(0);
-	}
-	queue.close();
-	queue.on('end', function () {
-		printf('established %d connections to %s:%d\n',
-		    bencher.fb_sockets.length, config.fbHost, config.fbPort);
-		mod_assertplus.equal(bencher.fb_sockets.length,
-		    bencher.fb_fastclients.length);
-
+	function _startKang(_, cb) {
 		mod_kang.knStartServer({
 		    'port': config.fbKangPort,
 		    'uri_base': '/kang',
@@ -262,6 +261,50 @@ function fastbench(config)
 			bencher.fb_kangserver = server;
 			log.info({ 'kangPort': config.fbKangPort },
 			    'listening for kang requests');
+		        cb();
+		});
+	}
+
+	function _startArtedi(_, cb) {
+		var server;
+
+		function _artediHandler(req, res) {
+			collector.collect(mod_artedi.FMT_PROM,
+			    function _outputMetrics(err, metrics) {
+				mod_assertplus.ok(!err);
+				res.end(metrics);
+			});
+		}
+
+		server = mod_http.createServer(_artediHandler);
+		server.listen(config.fbArtediPort, function _onListen(err) {
+			mod_assertplus.ok(!err);
+			bencher.fb_artediserver = server;
+			log.info({ artediPort: config.fbArtediPort },
+			    'listening for artedi requests');
+			cb();
+		});
+	}
+
+	nconns = Math.ceil(config.fbConcurrency / fbDflRequestsPerConnection);
+	mod_assertplus.ok(nconns > 0);
+	for (i = 0; i < nconns; i++) {
+		queue.push(0);
+	}
+	queue.close();
+	queue.on('end', function () {
+		printf('established %d connections to %s:%d\n',
+		    bencher.fb_sockets.length, config.fbHost, config.fbPort);
+		mod_assertplus.equal(bencher.fb_sockets.length,
+		    bencher.fb_fastclients.length);
+
+		mod_vasync.pipeline({
+			funcs: [
+			    _startKang,
+			    _startArtedi
+			]
+		}, function _pipelineComplete(err) {
+			mod_assertplus.ok(!err);
 
 			if (config.fbDuration !== null) {
 				setTimeout(function onCommandTimeout() {
@@ -292,6 +335,7 @@ function FastBench()
 	this.fb_nerrors = 0;	/* unexpected errors */
 	this.fb_hiwat = 0;	/* maximum observed concurrency */
 	this.fb_timeout = null;	/* reporting timeout */
+	this.fb_artediserver = null;	/* artedi server */
 	this.fb_kangserver = null;	/* kang server */
 
 	/* last reported stats */
@@ -398,6 +442,7 @@ FastBench.prototype.finish = function ()
 		clearTimeout(this.fb_timeout);
 	}
 
+	this.fb_artediserver.close();
 	this.fb_kangserver.close();
 	this.printResults();
 };
diff --git a/lib/fast_client.js b/lib/fast_client.js
index 4f8c4f0..b569f08 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,7 @@
 var mod_assertplus = require('assert-plus');
 var mod_dtrace = require('dtrace-provider');
 var mod_events = require('events');
+var mod_jsprim = require('jsprim');
 var mod_microtime = require('microtime');
 var mod_util = require('util');
 var VError = require('verror');
@@ -46,6 +47,8 @@ fastNclients = 0;
  *
  * Named arguments:
  *
+ *     collector	artedi-style metric collector
+ *
  *     log		bunyan-style logger
  *
  *     nRecentRequests	count of recent requests to keep track of (for
@@ -69,10 +72,12 @@ function FastClient(args)
 	var self = this;
 
 	mod_assertplus.object(args, 'args');
+	mod_assertplus.optionalObject(args.collector, 'args.collector');
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.number(args.nRecentRequests, 'args.nRecentRequests');
 	mod_assertplus.object(args.transport, 'args.transport');
 
+	this.fc_collector = args.collector;	/* metric collector */
 	this.fc_log = args.log;
 	this.fc_transport = args.transport;
 	this.fc_nrecent = args.nRecentRequests;
@@ -103,6 +108,17 @@ function FastClient(args)
 	this.fc_detached = false;	 /* caller detached us */
 	this.fc_transport_ended = false; /* transport detached us */
 
+	if (this.fc_collector) {
+		this.fc_request_counter = this.fc_collector.counter({
+			name: 'fast_client_requests_completed',
+			help: 'count of fast client requests completed'
+		});
+		this.fc_latency_histogram = this.fc_collector.histogram({
+			name: 'fast_client_request_time_ms',
+			help: 'end-to-end fast client request duration'
+		});
+	}
+
 	if (fastClientProvider === null) {
 		fastClientProvider = fastClientProviderInit();
 	}
@@ -190,6 +206,7 @@ FastClient.prototype.rpc = function (args)
 
 	this.fc_pending[msgid] = request;
 	this.fc_nrpc_started++;
+	request.frq_hrtstarted = process.hrtime();
 
 	if (this.fc_error !== null || this.fc_detached ||
 	    this.fc_transport_ended) {
@@ -607,6 +624,9 @@ FastClient.prototype.requestFail = function (request, error)
  */
 FastClient.prototype.requestComplete = function (request)
 {
+	var diff;
+	var labels;
+	var latency;
 	var msgid;
 	var self = this;
 
@@ -647,6 +667,19 @@ FastClient.prototype.requestComplete = function (request)
 	delete (this.fc_pending[msgid]);
 	this.fc_nrpc_done++;
 
+	if (this.fc_collector) {
+		/* Record metrics */
+
+		/* Calculate milliseconds since the request began. */
+		diff = process.hrtime(request.frq_hrtstarted);
+		latency = mod_jsprim.hrtimeMillisec(diff);
+
+		/* Track the requested RPC methoad. */
+		labels = { 'rpcMethod': request.frq_rpcmethod };
+		this.fc_request_counter.increment(labels);
+		this.fc_latency_histogram.observe(latency, labels);
+	}
+
 	this.fc_recentrpc.push(request);
 	if (this.fc_recentrpc.length > this.fc_nrecent) {
 		this.fc_recentrpc.shift();
diff --git a/lib/fast_client_request.js b/lib/fast_client_request.js
index b4a5491..d304e60 100644
--- a/lib/fast_client_request.js
+++ b/lib/fast_client_request.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -102,6 +102,7 @@ function FastClientRequest(args)
 	this.frq_done_graceful = false;	/* recvd "end" or "error" from server */
 	this.frq_abandoned = false;	/* abandoned locally */
 	this.frq_error = null;		/* error, if any */
+	this.frq_hrtstarted = null;	/* granular time the request started */
 	this.frq_timeout = null;	/* timeout handle, if any */
 
 	/* helpers */
diff --git a/package.json b/package.json
index 275a7ea..b45b940 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.4.0",
+	"version": "2.5.0",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
diff --git a/test/common/client.js b/test/common/client.js
index e9084c4..7eee34e 100644
--- a/test/common/client.js
+++ b/test/common/client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -34,7 +34,9 @@ function ClientTestContext(args)
 {
 	mod_assertplus.object(args.server);
 	mod_assertplus.object(args.log);
+	mod_assertplus.optionalObject(args.collector);
 
+	this.ctc_collector = args.collector; /* artedi collector */
 	this.ctc_log = args.log;		/* bunyan logger */
 	this.ctc_closed = false;		/* already cleaned up */
 
@@ -65,6 +67,7 @@ ClientTestContext.prototype.establishConnection = function ()
 	this.ctc_client_sock = mod_net.createConnection(
 	    mod_testcommon.serverPort, mod_testcommon.serverIp);
 	this.ctc_fastclient = new mod_client.FastClient({
+	    'collector': this.ctc_collector,
 	    'log': this.ctc_log.child({ 'component': 'FastClient' }),
 	    'nRecentRequests': 100,
 	    'transport': this.ctc_client_sock
diff --git a/test/tst.client_request.js b/test/tst.client_request.js
index 4f78cd4..ef0f70e 100644
--- a/test/tst.client_request.js
+++ b/test/tst.client_request.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -21,6 +21,7 @@
  * interaction.  These are defined in tst.client_generic.js.
  */
 
+var mod_artedi = require('artedi');
 var mod_assertplus = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_microtime = require('microtime');
@@ -73,9 +74,15 @@ function main()
 function runTestCase(testcase, callback)
 {
 	var ctc, ctr;
+	var collector;
+
+	collector = mod_artedi.createCollector({labels: {
+		service: 'tst.client_request'
+	}});
 
 	console.log('test case: %s', testcase.name);
 	ctc = new mod_testclient.ClientTestContext({
+	    'collector': collector,
 	    'server': serverSocket,
 	    'log': testLog.child({ 'testcase': testcase['name'] })
 	});
@@ -88,6 +95,17 @@ function runTestCase(testcase, callback)
 	});
 
 	ctr = ctc.makeRequest(function () {
+		if (testcase.hasOwnProperty('artediPromCheck')) {
+			/*
+			 * Function provided to check the Prometheus formatted
+			 * metrics.
+			 */
+			collector.collect(mod_artedi.FMT_PROM,
+			    function _outputMetrics(err, metrics) {
+				mod_assertplus.ok(!err);
+				testcase['artediPromCheck'](metrics);
+			});
+		}
 		testcase['clientCheck'](ctr.ctr_data, {
 		    'socket': ctc.ctc_error_sock,
 		    'client': ctc.ctc_error_client,
@@ -129,7 +147,7 @@ function runTestCase(testcase, callback)
  *                          is convenient for receiving well-formed messages
  *
  *     clientCheck   a function invoked after the test case has completed in
- *                   to verify client behavior.  It's invoked as:
+ *                   order to verify client behavior.  It's invoked as:
  *
  *                       clientCheck(data, error)
  *
@@ -140,6 +158,17 @@ function runTestCase(testcase, callback)
  *               errors  an object with properties for each possible error
  *                       emitted during the test, including "socket", "client",
  *                       and "request".
+ *
+ *     artediPromCheck  an optional function invoked after the test case has
+ *                      completed in order to verify the Prometheus-formatted
+ *                      artedi metrics for this request. It is invoked as:
+ *
+ *                          artediPromCheck(metrics)
+ *
+ *                      where
+ *
+ *                metrics  is a multi-line string containing the metrics for
+ *                         this request.
  */
 
 var mockResponders = [ {
@@ -478,6 +507,38 @@ var mockResponders = [ {
 		mod_assertplus.equal(data[i], 'string_' + i);
 	}
     }
+
+}, {
+    'name': 'artedi metrics ok for simple request',
+    'serverReply': function (socket, message, encoder) {
+	var d = ['hello world'];
+
+	assertNormalRequest(message);
+	encoder.write({
+	    'msgid': message.msgid,
+	    'status': mod_protocol.FP_STATUS_END,
+	    'data': { 'd': d }
+	});
+
+	encoder.end();
+    },
+    'artediPromCheck': function (metrics) {
+	var metricsLines;
+	mod_assertplus.string(metrics);
+	mod_assertplus.ok(metrics.length > 0);
+
+	metricsLines = metrics.trim().split(/\n/);
+	mod_assertplus.ok(metricsLines.indexOf(
+	    'fast_client_requests_completed{rpcMethod="testmethod",' +
+		'service="tst.client_request"} 1') !== -1);
+    },
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request === null);
+	mod_assertplus.deepEqual(data, ['hello world']);
+    }
+
 } ];
 
 /*
