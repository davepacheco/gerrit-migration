From da3cbe2417a2261c15d187939abd8eab07327009 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Wed, 9 May 2018 14:24:15 -0700
Subject: [PATCH] TRITON-375 node-moray should expose similar metrics to moray
 server

---
 README.md                  | 11 ++++++-----
 lib/fast_client.js         | 35 ++++++++++++++++++++++++++++++++++-
 lib/fast_client_request.js |  3 ++-
 package.json               |  2 +-
 4 files changed, 43 insertions(+), 8 deletions(-)

diff --git a/README.md b/README.md
index e0c4d01..53cb84c 100644
--- a/README.md
+++ b/README.md
@@ -104,17 +104,17 @@ function provided by the Kang library.
 
 ### Metric Collection
 
-The Fast server optionally collects some basic request metrics using
+The Fast client and server optionally collect some basic request metrics using
 [node-artedi](https://github.com/joyent/node-artedi).
 
-The metrics collected by the fast server are:
+The metrics collected are:
 
 * total request count
 * latency of requests, implemented as a histogram
 
-You can pass an artedi-style metric collector into the Fast server constructor
-to enable metric collection. An example of how to do this is included in the
-built-in demo server ("fastserve").
+You can pass an artedi-style metric collector into the Fast server or client
+constructor to enable metric collection. An example of how to do this for the
+server is included in the built-in demo server ("fastserve").
 
 ### DTrace probes
 
@@ -184,6 +184,7 @@ Constructor arguments:
 
 Name              | Type         | Meaning
 ----------------- | ------------ | -------
+`collector`       | object       | [artedi](https://github.com/joyent/node-artedi)-style metric collector
 `log`             | object       | [bunyan](https://github.com/trentm/node-bunyan)-style logger
 `transport`       | `net.Socket` | underlying TCP connection to the server
 `nRecentRequests` | positive int | number of recent requests to track for debugging purposes
diff --git a/lib/fast_client.js b/lib/fast_client.js
index 4f8c4f0..d436637 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,7 @@
 var mod_assertplus = require('assert-plus');
 var mod_dtrace = require('dtrace-provider');
 var mod_events = require('events');
+var mod_jsprim = require('jsprim');
 var mod_microtime = require('microtime');
 var mod_util = require('util');
 var VError = require('verror');
@@ -46,6 +47,8 @@ fastNclients = 0;
  *
  * Named arguments:
  *
+ *     collector	artedi-style metric collector
+ *
  *     log		bunyan-style logger
  *
  *     nRecentRequests	count of recent requests to keep track of (for
@@ -69,10 +72,12 @@ function FastClient(args)
 	var self = this;
 
 	mod_assertplus.object(args, 'args');
+	mod_assertplus.optionalObject(args.collector, 'args.collector');
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.number(args.nRecentRequests, 'args.nRecentRequests');
 	mod_assertplus.object(args.transport, 'args.transport');
 
+	this.fc_collector = args.collector;	/* metric collector */
 	this.fc_log = args.log;
 	this.fc_transport = args.transport;
 	this.fc_nrecent = args.nRecentRequests;
@@ -103,6 +108,17 @@ function FastClient(args)
 	this.fc_detached = false;	 /* caller detached us */
 	this.fc_transport_ended = false; /* transport detached us */
 
+	if (this.fc_collector) {
+		this.fc_request_counter = this.fc_collector.counter({
+			name: 'fast_client_requests_completed',
+			help: 'count of fast client requests completed'
+		});
+		this.fc_latency_histogram = this.fc_collector.histogram({
+			name: 'fast_client_request_time_ms',
+			help: 'total time to process fast client requests'
+		});
+	}
+
 	if (fastClientProvider === null) {
 		fastClientProvider = fastClientProviderInit();
 	}
@@ -190,6 +206,7 @@ FastClient.prototype.rpc = function (args)
 
 	this.fc_pending[msgid] = request;
 	this.fc_nrpc_started++;
+	request.frq_hrtstarted = process.hrtime();
 
 	if (this.fc_error !== null || this.fc_detached ||
 	    this.fc_transport_ended) {
@@ -607,6 +624,9 @@ FastClient.prototype.requestFail = function (request, error)
  */
 FastClient.prototype.requestComplete = function (request)
 {
+	var diff;
+	var labels;
+	var latency;
 	var msgid;
 	var self = this;
 
@@ -647,6 +667,19 @@ FastClient.prototype.requestComplete = function (request)
 	delete (this.fc_pending[msgid]);
 	this.fc_nrpc_done++;
 
+	if (this.fc_collector) {
+		/* Record metrics */
+
+		/* Calculate milliseconds since the request began. */
+		diff = process.hrtime(request.frq_hrtstarted);
+		latency = mod_jsprim.hrtimeMillisec(diff);
+
+		/* Track the requested RPC methoad. */
+		labels = { 'rpcMethod': request.frq_rpcmethod };
+		this.fc_request_counter.increment(labels);
+		this.fc_latency_histogram.observe(latency, labels);
+	}
+
 	this.fc_recentrpc.push(request);
 	if (this.fc_recentrpc.length > this.fc_nrecent) {
 		this.fc_recentrpc.shift();
diff --git a/lib/fast_client_request.js b/lib/fast_client_request.js
index b4a5491..ceebe71 100644
--- a/lib/fast_client_request.js
+++ b/lib/fast_client_request.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -74,6 +74,7 @@ function FastClientRequest(args)
 
 	/* rpc parameters */
 	this.frq_client = args.client;
+	this.fsr_hrtstarted = null;	/* granular time the request started */
 	this.frq_msgid = args.msgid;
 	this.frq_rpcmethod = args.rpcmethod;
 	this.frq_rpcargs = args.rpcargs;
diff --git a/package.json b/package.json
index 275a7ea..b45b940 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.4.0",
+	"version": "2.5.0",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
-- 
2.21.0

