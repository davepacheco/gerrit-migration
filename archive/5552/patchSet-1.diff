commit ad503e5a4ea80757779946c0913e2a9c8f5c8dee (refs/changes/52/5552/1)
Author: dyep <dyep49@gmail.com>
Date:   2019-02-08T04:15:24-08:00 (8 months ago)
    
    TRITON-965 Support flexible disk information for Machines/Packages

diff --git a/lib/datasets.js b/lib/datasets.js
index 3fbdd74..38dbb32 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -135,6 +135,10 @@ function translate(req, dataset) {
         }
     }
 
+    if (dataset.type === 'zvol') {
+        obj.image_size = dataset.image_size;
+    }
+
     if (dataset.description) {
         obj.description = dataset.description;
     }
diff --git a/lib/machines.js b/lib/machines.js
index 985e585..779e0e2 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -155,7 +155,8 @@ function translate(machine, req)  {
         tags: machine.tags,
         credentials: credentials,
         created: machine.create_timestamp || (new Date()).toISOString(),
-        updated: machine.last_modified || (new Date()).toISOString()
+        updated: machine.last_modified || (new Date()).toISOString(),
+        free_space: Number(machine.free_space)
     };
 
     if (machine.docker) {
@@ -240,6 +241,29 @@ function translate(machine, req)  {
         msg.dns_names = machine.dns_names;
     }
 
+    if (machine.brand === 'bhyve') {
+        msg.disks = machine.disks.map(function parseDisks(disk) {
+            var diskObj = {
+                size: disk.size
+            };
+
+            if (disk.boot) {
+                diskObj.boot = disk.boot;
+            }
+
+            if (disk.image_uuid) {
+                diskObj.image = disk.image_uuid;
+                diskObj.size = disk.size;
+            }
+
+            if (disk.uuid) {
+                diskObj.uuid = disk.uuid;
+            }
+
+            return diskObj;
+        });
+    }
+
     return msg;
 }
 
@@ -415,10 +439,73 @@ function getCreateOptions(req) {
     }
 
     if (['bhyve', 'kvm'].indexOf(brand) !== -1) {
-        opts.disks = [
-            { image_uuid: img.uuid },
-            { size: parseInt(pkg.quota, 10) }
-        ];
+        if (params.disks && !pkg.flexible_disk) {
+            throw new InvalidArgumentError(
+                'The use of `disks` is only supported if the package ' +
+                'has the flexible_disk attr set to true');
+        }
+
+        if (brand === 'bhyve' && pkg.flexible_disk) {
+            var disks = params.disks || pkg.disks;
+            if (disks) {
+                if (disks.length > 8) {
+                    throw new InvalidArgumentError(
+                        'A maximum of 8 disks per VM are supported');
+                }
+
+                var imageUuid = params.image || pkg.image;
+                disks[0].image_uuid = imageUuid;
+
+                var lastDisk = disks.length - 1;
+                var disksSum = disks.reduce(
+                    function sumDisk(sum, disk, idx) {
+                    if (idx !== lastDisk && disk.size === 'remaining') {
+                        throw new InvalidArgumentError(
+                            'disk.size can only be set to ' +
+                            '`remaining` if it is the last disk ' +
+                            'specified');
+                    }
+
+                    var diskSize =
+                        disk.size === 'remaining' ? 0 : disk.size;
+
+                    if (diskSize === undefined && disk.image_uuid) {
+                        if (idx !== 0) {
+                            throw new MissingParameterError(
+                                'disk.size must be set if disk is ' +
+                                'not the boot disk');
+                        }
+
+                        diskSize = img.image_size;
+                    }
+
+                    return sum + diskSize;
+                }, 0);
+
+                if (disksSum >= pkg.quota) {
+                    throw new InvalidArgumentError(
+                        'The size of the disks must not be ' +
+                        'greater than the package quota');
+                }
+
+                if (disks[lastDisk].size === 'remaining') {
+                    var remaining = pkg.quota - disksSum;
+                    disks[lastDisk].size = remaining;
+                }
+
+                opts.disks = disks;
+            } else {
+                opts.disks = [
+                    { image_uuid: img.uuid },
+                    { size: parseInt(pkg.quota, 10) - img.image_size }
+                ];
+            }
+        } else {
+            opts.disks = [
+                { image_uuid: img.uuid },
+                { size: parseInt(pkg.quota, 10) }
+            ];
+        }
 
         if (brand === 'bhyve') {
             // With bhyve we also need to always set boot=true for the image
@@ -438,6 +525,7 @@ function getCreateOptions(req) {
         // For bhyve we set the same quota here for the zoneroot usage, but the
         // quota will get adjusted later by vmadm to include the disks.
         opts.quota = 10;
+        opts.flexible_disk_size = Number(pkg.quota);
     } else {
         opts.image_uuid = img.uuid;
         opts.image_os   = img.os;
@@ -1629,7 +1717,6 @@ function create(req, res, next) {
         });
     }
 
-
     var createdMachine;
 
     pipeline.push(function (_, cb) {
diff --git a/package.json b/package.json
index 3b041ba..065de4e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "9.3.2",
+    "version": "9.4.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -25,7 +25,7 @@
         "filed": "0.0.7",
         "http-signature": "1.1.0",
         "joyent-schemas": "git+https://github.com/joyent/schemas.git#dd1c3cbfae6e2aa6ceafbe003bd95fb5e579e748",
-        "jsprim": "0.6.1",
+        "jsprim": "1.4.1",
         "kang": "1.1.0",
         "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d582e1d9d338b7082d61f34ba8d1bbc540a",
         "krill": "1.0.1",
diff --git a/test/common.js b/test/common.js
index 1617ab0..8e6fd9c 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index 15ce135..258ca1b 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -320,7 +320,7 @@ test('Delete KVM tests', function (t) {
 
 
 test('Create bhyve machine', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
+    if (!BHYVE_IMAGE_UUID) {
         t.end();
         return;
     }
diff --git a/test/machines.94.test.js b/test/machines.94.test.js
new file mode 100644
index 0000000..a1d3330
--- /dev/null
+++ b/test/machines.94.test.js
@@ -0,0 +1,682 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var test = require('@smaller/tap').test;
+var util = require('util');
+var vasync = require('vasync');
+
+var common = require('./common');
+var machinesCommon = require('./machines/common');
+var checkMachine = machinesCommon.checkMachine;
+var deleteMachine = require('./machines/delete');
+
+var BHYVE_128 = Object.assign({}, common.bhyve_128_package, {
+    quota: 15360
+});
+
+var BHYVE_128_INFLEXIBLE = Object.assign({}, BHYVE_128, {
+    uuid: '48653cc1-e9a2-448f-a245-b361c8c5a6f9',
+    name: 'sdc_128_bhyve_inflexible',
+    flexible_disk: false
+});
+
+var BHYVE_128_FLEXIBLE = Object.assign({}, BHYVE_128, {
+    uuid: '1db47fe9-a06b-439a-ac21-bffeb1b44b83',
+    name: 'sdc_128_bhyve_flex',
+    flexible_disk: true
+});
+
+var BHYVE_128_FLEXIBLE_DISKS = Object.assign({}, BHYVE_128_FLEXIBLE, {
+    uuid: '7296b6bf-a1bd-4c5a-aa01-ef7f9a26d103',
+    name: 'sdc_128_bhyve_flex_disks',
+    disks: [
+        {},
+        {size: 512}
+    ]
+});
+
+var BHYVE_128_FLEXIBLE_REMAINING = Object.assign({}, BHYVE_128_FLEXIBLE, {
+    uuid: '3b71c830-ae07-4c38-a035-8f6882455954',
+    name: 'sdc_128_bhyve_flex_remaining',
+    disks: [
+        { size: 'remaining' }
+    ]
+});
+
+var CUSTOM_BHYVE_PACKAGES = [
+    BHYVE_128_FLEXIBLE,
+    BHYVE_128_FLEXIBLE_DISKS,
+    BHYVE_128_INFLEXIBLE,
+    BHYVE_128_FLEXIBLE_REMAINING
+];
+
+var BHYVE_IMAGE;
+var BHYVE_IMAGE_UUID;
+var BHYVE_MACHINE_UUID;
+var CLIENT;
+var CLIENTS;
+var OTHER;
+var SERVER;
+var SERVER_UUID;
+
+function checkDisk(t, expectedDisk, actualDisk) {
+    Object.keys(expectedDisk).forEach(function check(prop) {
+        t.strictEqual(expectedDisk[prop], actualDisk[prop]);
+    });
+}
+
+function checkDisks(t, expectedDisks, actualDisks) {
+    expectedDisks.forEach(function check(disk, idx) {
+        checkDisk(t, disk, actualDisks[idx]);
+    });
+}
+
+test('setup', function (t) {
+    common.setup({clientApiVersion: '~9.0'},
+        function onSetup(_, clients, server) {
+        CLIENTS = clients;
+        CLIENT = clients.user;
+        OTHER = clients.other;
+        SERVER = server;
+
+        t.end();
+    });
+});
+
+test('get bhyve image', function (t) {
+    // Make sure we're not getting an lx-branded image instead
+    // of a KVM/bhyve one. Note that starting with images built
+    // after 20180819 the same images can be used for both of them;
+    // therefore we're trying to pick latest available image, instead
+    // of first one.
+    CLIENT.get('/my/images?os=linux', function (err, req, res, body) {
+        t.ifError(err, 'GET /my/images error');
+        t.equal(res.statusCode, 200, 'GET /my/images status');
+        common.checkHeaders(t, res.headers);
+        t.ok(body, 'GET /my/images body');
+        t.ok(Array.isArray(body), 'GET /my/images body is an array');
+        // Do nothing if we haven't got a Linux image already imported
+        if (body.length === 0) {
+            console.log('No bhyve images imported, ' +
+                'skipping bhyve provisioning');
+        } else {
+            var bhyveImages = body.filter(function getBhyve(img) {
+                return img.published_at >= '2018-08-19T00:00:00Z';
+            });
+
+            var bhyveImage = bhyveImages.pop();
+
+            if (bhyveImage) {
+                BHYVE_IMAGE = bhyveImage;
+                BHYVE_IMAGE_UUID = bhyveImage.id;
+                console.log('BHYVE_IMAGE_UUID: ' + BHYVE_IMAGE_UUID);
+            }
+        }
+        t.end();
+    });
+});
+
+test('add bhyve packages', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    vasync.forEachPipeline({
+        func: function addPackage(pkg, next) {
+            common.addPackage(CLIENT, pkg, next);
+        },
+        inputs: CUSTOM_BHYVE_PACKAGES
+    }, function onDone(err) {
+        t.ifError(err, 'Add package error');
+        t.end();
+    });
+});
+
+test('Get test server', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    common.getTestServer(CLIENT, function (err, testServer) {
+        t.ifError(err);
+        SERVER_UUID = testServer.uuid;
+        t.end();
+    });
+});
+
+test('CreateMachine - disks and no flexible_disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [ {}, {size: 512} ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-inflexible-test-' + process.pid,
+        package: BHYVE_128_INFLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - 9 disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-too-many-disks-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - Invalid use of remaining and flexible disk package',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 512 },
+            { size: 'remaining' },
+            { size: 'remaining' }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-invalid-remaining-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - Disk size is greater than quota',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 102400 }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-oversized-disks-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - No disks/package has disks', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE_DISKS.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            console.log('Requested provision of bhyve machine: %s',
+                        BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - No disks/package has disks',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+        function waitForMachineCb(err) {
+            t.ifError(err);
+
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+
+            t.end();
+    });
+});
+
+test('GetMachine has disks - No disks/package has disks', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size
+        },
+        {
+            size: BHYVE_128_FLEXIBLE_DISKS.disks[1].size
+        }
+    ];
+
+    var pkg = BHYVE_128_FLEXIBLE_DISKS;
+    var usedSpace = pkg.disks[1].size + BHYVE_IMAGE.image_size;
+    var expectedFree = pkg.quota - usedSpace;
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            t.equal(body.free_space, expectedFree);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - No disks/package has disks', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            { uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
+            { uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 512},
+            { uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 'remaining' }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-disks-flex-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            console.log('Requested provision of bhyve machine: %s',
+                        BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - disks and flexible disk package',
+    function (t) {
+        if (!BHYVE_IMAGE_UUID) {
+            t.ok(true, 'No bhyve images. Test skipped');
+            t.end();
+            return;
+        }
+
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                t.ifError(err);
+
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.end();
+        });
+    }
+);
+
+test('GetMachine has disks - disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size,
+            uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+        },
+        {
+            size: 512,
+            uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+        },
+        {
+            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
+            uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            t.deepEqual(body.disks, expectedDisks);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - disks and flexible disk package', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - no disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-no-disks-flex-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            console.log('Requested provision of bhyve machine: %s',
+                        BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - no disks and flexible disk package',
+    function (t) {
+        if (!BHYVE_IMAGE_UUID) {
+            t.ok(true, 'No bhyve images. Test skipped');
+            t.end();
+            return;
+        }
+
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                t.ifError(err);
+
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.end();
+        });
+    }
+);
+
+test('GetMachine has disks - no disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size
+        },
+        {
+            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - no disks and flexible disk package', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - Package has remaining boot disk', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-remaining-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE_REMAINING.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            console.log('Requested provision of bhyve machine: %s',
+                        BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - Package has remaining boot disk',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+        function waitForMachineCb(err) {
+            t.ifError(err);
+
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+
+            t.end();
+    });
+});
+
+test('GetMachine has disks - Package has remaining boot disk', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_128_FLEXIBLE_REMAINING.quota
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            t.deepEqual(body.free_space, 0);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - Package has remaining boot disk', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('teardown', function (t) {
+    common.teardown(CLIENTS, SERVER, function (teardownErr) {
+        t.ifError(teardownErr, 'Teardown success');
+
+        if (!BHYVE_IMAGE_UUID) {
+            t.end();
+            return;
+        }
+
+        vasync.forEachParallel({
+            func: function deletePackage(pkg, next) {
+                common.deletePackage(CLIENT, pkg, next);
+            },
+            inputs: CUSTOM_BHYVE_PACKAGES
+        }, function onDone(pkgErr) {
+            t.ifError(pkgErr, 'Delete package error');
+            t.end();
+        });
+    });
+});
diff --git a/test/machines/common.js b/test/machines/common.js
index 201f0bd..77e260f 100644
--- a/test/machines/common.js
+++ b/test/machines/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -85,6 +85,11 @@ function checkMachine(t, m) {
         t.ok(m.primaryIp, 'checkMachine primaryIp ok');
     }
 
+    if (m.brand === 'bhyve') {
+        t.ok(m.image, 'checkMachine image ok');
+        t.ok(m.disks, 'checkMachine disks ok');
+    }
+
     // Sometimes test suites from other applications create zones with a
     // 00000000-0000-0000-0000-000000000000 billing_id, which is changed by
     // cloudapi to '' since it's not an actual package UUID. Alas, we work
diff --git a/test/machines/snapshots.js b/test/machines/snapshots.js
index 8c419ee..2faa1bc 100644
--- a/test/machines/snapshots.js
+++ b/test/machines/snapshots.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var common = require('../common');
@@ -21,6 +21,7 @@ var checkNotFound = common.checkNotFound;
 function checkSnapshot(t, snap) {
     t.ok(snap, 'snapshot ok');
     t.ok(snap.name, 'snapshot name ok');
+    t.ok(snap.size, 'snapshot size ok');
     t.ok(snap.state, 'snapshot state ok');
 }
 
