commit df736f7657b596dc7ea992c1b74296db4a2187c8 (refs/changes/52/5552/4)
Author: dyep <dyep49@gmail.com>
Date:   2019-02-12T22:23:22-08:00 (8 months ago)
    
    TRITON-965 Support flexible disk information for Machines/Packages

diff --git a/docs/index.md b/docs/index.md
index 0f6964c..23ad59c 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -12,7 +12,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright 2018, Joyent, Inc.
+    Copyright 2019, Joyent, Inc.
 -->
 
 
@@ -922,6 +922,12 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.4.0
+- [CreateMachine](#CreateMachine) may pass disk quantity and size for bhyve
+  instances. [GetMachine](#GetMachine) and [ListMachines](#ListMachcines)
+  returns information about these disks. [GetMachineSnapshot](#GetMachineSnapshot)
+  and [ListMachineSnapshots](#ListMachineSnapshots) includes snapshot size.
+
 ## 9.2.0
 
 - Added new ImportImageFromDatacenter API method to allow an image to be copied
@@ -4414,6 +4420,7 @@ state       | String   | The current state of this instance (e.g. running)
 image       | String   | The image id this instance was provisioned with
 memory      | Number   | The amount of RAM this instance has (in MiB)
 disk        | Number   | The amount of disk this instance has (in MiB)
+disks       | Array    | An array of disk objects (bhyve)
 metadata    | Object[String => String] | Any additional metadata this instance has
 tags        | Object[String => String] | Any tags this instance has
 created     | ISO8601 date | When this instance was created
@@ -4426,6 +4433,8 @@ firewall_enabled | Boolean  | Whether firewall rules are enforced on this instan
 deletion_protection | Boolean | Whether an instance is destroyable. See [Deletion Protection](#deletion-protection)
 compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
+flexible    | Boolean | Whether this instance uses the flexible_disk_space feature (bhyve)
+free_space  | Number | The amount of space (MiB) that is not allocated to disks nor in use by snapshots of those disks. If snapshots are present, writes to disks may reduce this value (bhyve)
 
 ### Errors
 
@@ -4570,6 +4579,7 @@ state       | String   | The current state of this instance (e.g. running)
 image       | String   | The image id this instance was provisioned with
 memory      | Number   | The amount of RAM this instance has (in MiB)
 disk        | Number   | The amount of disk this instance has (in MiB)
+disks       | Array    | An array of disk objects (bhyve)
 metadata    | Object[String => String] | Any additional metadata this instance has
 tags        | Object[String => String] | Any tags this instance has
 created     | ISO8601 date | When this instance was created
@@ -4582,6 +4592,9 @@ firewall_enabled | Boolean  | Whether firewall rules are enforced on this instan
 compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
 dns_names   | Array[String] | DNS names of the instance (if the instance is using [CNS](https://docs.joyent.com/public-cloud/network/cns))
+flexible    | Boolean | Whether this instance uses the flexible_disk_space feature (bhyve)
+free_space  | Number | The amount of space (MiB) that is not allocated to disks nor in use by snapshots of those disks. If snapshots are present, writes to disks may reduce this value (bhyve)
+
 
 Be aware that in the case of instances created with vmadm directly (i.e. not
 through CloudAPI), ips, networks, primaryIp and package may be in a different
@@ -4748,6 +4761,7 @@ firewall_enabled | Boolean | Completely enable or disable firewall for this inst
 deletion_protection | Boolean | Whether an instance is destroyable. See [Deletion Protection](#deletion-protection). Default is false
 allow_shared_images | Boolean | Whether to allow provisioning from a shared image. Default is false
 volumes   | Array    | A list of objects representing volumes to mount when the newly created machine boots
+disks     | Array    | An array of disk objects to be created (bhyve)
 
 #### volumes
 
@@ -4779,6 +4793,35 @@ type       | String   | The type of the volume to mount (currently only `"triton
 mode       | String   | Determines the read/write mode for the volume to mount. Accepted values are `"ro"` (for read-only) and `"rw"` (for read-write). The default value is `"rw"`.
 mountpoint | String   | Specifies where the volume is mounted in the newly created machine's filesystem. It must start with a slash (`"/"`) and it must contain at least one character that is not `'/'`.
 
+#### disks
+The `disks` input parameter allows users to specify a list of disks to be provisioned when creating a bhyve instance. This parameter can only be specified if the package has its `flexible_disk` attribute set to `true`. The sum of the sizes of the disks may be no greater than the package quota.
+
+```
+"disks": [
+  {
+    "uuid": "eea4e223-dee6-44dc-a7e1-71f996e534f0",
+    "boot": true
+  },
+  {
+    "uuid": "dea91a7f-5fe3-4408-b25a-994c97a7975e",
+    "size": 512
+  },
+  {
+    "uuid": "c41ce11e-bed2-45d2-bdb8-8dc889ed8ced",
+    "size": "remaining"
+  }
+]
+```
+
+Each object of the `disks` array has the following layout
+
+**Field**  | **Type** | **Description**
+---------- | -------- | ---------------
+UUID       | UUID     | Unique id for this disk
+boot       | Boolean  | If `true`, this is the boot disk
+image      | UUID     | The image from which the disk was created
+size       | Integer  | The size of the disk in mebibytes or "remaining". If "remaining", size will be set to the difference between the package quota and sum of the other disks.
+
 ### Returns
 
 **Field**   | **Type** | **Description**
@@ -4790,6 +4833,7 @@ brand       | String   | (v8.0+) The type of instance (e.g. lx)
 state       | String   | The current state of this instance (e.g. running)
 memory      | Number   | The amount of RAM this instance has (in MiB)
 disk        | Number   | The amount of disk this instance has (in MiB)
+disks       | Array    | (v9.x.y+) One disk object per disk in the VM (bhyve only)
 ips         | Array[String] | The IP addresses this instance has
 metadata    | Object[String => String] | Any additional metadata this instance has
 package     | String   | The id or name of the package used to create this instance
@@ -4807,6 +4851,7 @@ For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses)
 ResourceNotFound     | If `:login` does not exist
 InsufficientCapacity | There isn't enough capacity in this datacenter
 InvalidArgument      | If one of the input parameters was invalid
+MissingParameter     | If one of the input parameters was missing
 
 ### CLI Command
 
@@ -5700,6 +5745,7 @@ An array of snapshots:
 --------- | -------- | ---------------
 name      | String   | The name of this snapshot
 state     | String   | The current state of the snapshot
+size      | Number   | The size of the snapshot (MiB)
 
 ### Errors
 
diff --git a/lib/datasets.js b/lib/datasets.js
index 3fbdd74..38dbb32 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -135,6 +135,10 @@ function translate(req, dataset) {
         }
     }
 
+    if (dataset.type === 'zvol') {
+        obj.image_size = dataset.image_size;
+    }
+
     if (dataset.description) {
         obj.description = dataset.description;
     }
diff --git a/lib/machines.js b/lib/machines.js
index 985e585..ef2fb61 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -232,6 +232,10 @@ function translate(machine, req)  {
             return (d.uuid === machine.billing_id);
         });
         msg.package = packages[0] ? packages[0].name : '';
+
+        if (machine.brand === 'bhyve') {
+            msg.flexible = packages[0] && packages[0].flexible_disk;
+        }
     } else {
         msg.package = '';
     }
@@ -240,6 +244,33 @@ function translate(machine, req)  {
         msg.dns_names = machine.dns_names;
     }
 
+    if (machine.free_space !== undefined) {
+        msg.free_space = machine.free_space;
+    }
+
+    if (machine.brand === 'bhyve') {
+        msg.disks = machine.disks.map(function parseDisks(disk) {
+            var diskObj = {
+                size: disk.size
+            };
+
+            if (disk.boot) {
+                diskObj.boot = disk.boot;
+            }
+
+            if (disk.image_uuid) {
+                diskObj.image = disk.image_uuid;
+                diskObj.size = disk.size;
+            }
+
+            if (disk.uuid) {
+                diskObj.uuid = disk.uuid;
+            }
+
+            return diskObj;
+        });
+    }
+
     return msg;
 }
 
@@ -414,11 +445,98 @@ function getCreateOptions(req) {
         opts.cpu_shares = Math.ceil(pkg.fss);
     }
 
+    if (pkg.flexible_disk && brand !== 'bhyve') {
+        if (pkg.flexible_disk) {
+            throw new InvalidArgumentError(
+                'The use of `flexible_disk` is not supported with ' +
+                brand);
+        }
+    }
+
     if (['bhyve', 'kvm'].indexOf(brand) !== -1) {
-        opts.disks = [
-            { image_uuid: img.uuid },
-            { size: parseInt(pkg.quota, 10) }
-        ];
+        if (params.disks && !pkg.flexible_disk) {
+            throw new InvalidArgumentError(
+                'The use of `disks` is only supported if the package ' +
+                'has the flexible_disk attr set to true');
+        }
+
+        if (pkg.flexible_disk) {
+            var disks = params.disks || pkg.disks;
+            if (disks) {
+                if (disks.length > 8) {
+                    throw new InvalidArgumentError(
+                        'A maximum of 8 disks per VM are supported');
+                }
+
+                var imageUuid = params.image || pkg.image;
+                disks[0].image_uuid = imageUuid;
+
+                var remainingIdx;
+                var disksSum = disks.reduce(
+                    function sumDisk(sum, disk, idx) {
+                    var diskSize;
+
+                    if (remainingIdx && disk.size === 'remaining') {
+                        throw new InvalidArgumentError(
+                            'Only one disk.size can be set to ' +
+                            '`remaining`');
+                    }
+
+                    if (disk.size === 'remaining') {
+                        remainingIdx = idx;
+                        diskSize = 0;
+                    } else {
+                        diskSize = disk.size;
+                    }
+
+                    if (diskSize === undefined && disk.image_uuid) {
+                        if (idx !== 0) {
+                            throw new MissingParameterError(
+                                'disk.size must be set if disk is ' +
+                                'not the boot disk');
+                        }
+
+                        diskSize = img.image_size;
+                    }
+
+                    return sum + diskSize;
+                }, 0);
+
+                if (remainingIdx !== undefined) {
+                    var remaining = pkg.quota - disksSum;
+
+                    if (remainingIdx === 0 && img.image_size > remaining) {
+                        throw new InvalidArgumentError(
+                            'The size of the disks must not be ' +
+                            'greater than the package quota');
+                    }
+
+                    disks[remainingIdx].size = remaining;
+                    disksSum += remaining;
+                }
+
+
+                if (disksSum > pkg.quota) {
+                    throw new InvalidArgumentError(
+                        'The size of the disks must not be ' +
+                        'greater than the package quota');
+                }
+
+                opts.disks = disks;
+            } else {
+                opts.disks = [
+                    { image_uuid: img.uuid },
+                    { size: parseInt(pkg.quota, 10) - img.image_size }
+                ];
+            }
+
+            opts.flexible_disk_size = Number(pkg.quota);
+        } else {
+            opts.disks = [
+                { image_uuid: img.uuid },
+                { size: parseInt(pkg.quota, 10) }
+            ];
+        }
 
         if (brand === 'bhyve') {
             // With bhyve we also need to always set boot=true for the image
@@ -1629,7 +1747,6 @@ function create(req, res, next) {
         });
     }
 
-
     var createdMachine;
 
     pipeline.push(function (_, cb) {
diff --git a/lib/snapshots.js b/lib/snapshots.js
index 2206047..088ab1b 100644
--- a/lib/snapshots.js
+++ b/lib/snapshots.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -22,6 +22,7 @@ function translate(snapshot) {
         name: snapshot.name,
         state: (snapshot.creation_state === 'succeeded') ? 'created' :
             snapshot.creation_state,
+        size: snapshot.size,
         created: snapshot.created_at,
         updated: snapshot.created_at
     };
diff --git a/package.json b/package.json
index 3b041ba..065de4e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "9.3.2",
+    "version": "9.4.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -25,7 +25,7 @@
         "filed": "0.0.7",
         "http-signature": "1.1.0",
         "joyent-schemas": "git+https://github.com/joyent/schemas.git#dd1c3cbfae6e2aa6ceafbe003bd95fb5e579e748",
-        "jsprim": "0.6.1",
+        "jsprim": "1.4.1",
         "kang": "1.1.0",
         "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d582e1d9d338b7082d61f34ba8d1bbc540a",
         "krill": "1.0.1",
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index 15ce135..258ca1b 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -320,7 +320,7 @@ test('Delete KVM tests', function (t) {
 
 
 test('Create bhyve machine', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
+    if (!BHYVE_IMAGE_UUID) {
         t.end();
         return;
     }
diff --git a/test/machines.94.test.js b/test/machines.94.test.js
new file mode 100644
index 0000000..e297983
--- /dev/null
+++ b/test/machines.94.test.js
@@ -0,0 +1,899 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+var test = require('@smaller/tap').test;
+var util = require('util');
+var vasync = require('vasync');
+
+var common = require('./common');
+var machinesCommon = require('./machines/common');
+var checkMachine = machinesCommon.checkMachine;
+var deleteMachine = require('./machines/delete');
+
+var BHYVE_128 = Object.assign({}, common.bhyve_128_package, {
+    quota: 15360
+});
+
+var BHYVE_128_INFLEXIBLE = Object.assign({}, BHYVE_128, {
+    uuid: '48653cc1-e9a2-448f-a245-b361c8c5a6f9',
+    name: 'sdc_128_bhyve_inflexible',
+    flexible_disk: false
+});
+
+var BHYVE_128_FLEXIBLE = Object.assign({}, BHYVE_128, {
+    uuid: '1db47fe9-a06b-439a-ac21-bffeb1b44b83',
+    name: 'sdc_128_bhyve_flex',
+    flexible_disk: true
+});
+
+var BHYVE_128_FLEXIBLE_DISKS = Object.assign({}, BHYVE_128_FLEXIBLE, {
+    uuid: '7296b6bf-a1bd-4c5a-aa01-ef7f9a26d103',
+    name: 'sdc_128_bhyve_flex_disks',
+    disks: [
+        {},
+        {size: 512}
+    ]
+});
+
+var BHYVE_128_FLEXIBLE_REMAINING = Object.assign({}, BHYVE_128_FLEXIBLE, {
+    uuid: '3b71c830-ae07-4c38-a035-8f6882455954',
+    name: 'sdc_128_bhyve_flex_remaining',
+    disks: [
+        { size: 'remaining' }
+    ]
+});
+
+var CUSTOM_BHYVE_PACKAGES = [
+    BHYVE_128_FLEXIBLE,
+    BHYVE_128_FLEXIBLE_DISKS,
+    BHYVE_128_INFLEXIBLE,
+    BHYVE_128_FLEXIBLE_REMAINING
+];
+
+var BHYVE_IMAGE;
+var BHYVE_IMAGE_UUID;
+var BHYVE_MACHINE_UUID;
+var CLIENT;
+var CLIENTS;
+var OTHER;
+var SERVER;
+var SERVER_UUID;
+
+function checkDisk(t, expectedDisk, actualDisk) {
+    Object.keys(expectedDisk).forEach(function check(prop) {
+        t.strictEqual(expectedDisk[prop], actualDisk[prop]);
+    });
+}
+
+function checkDisks(t, expectedDisks, actualDisks) {
+    expectedDisks.forEach(function check(disk, idx) {
+        checkDisk(t, disk, actualDisks[idx]);
+    });
+}
+
+function checkDisksQuota(t, disks, quota) {
+    var disksSum = disks.reduce(function sumDisk(sum, disk) {
+        return sum + disk.size;
+    }, 0);
+
+    t.strictEqual(disksSum, quota);
+}
+
+test('setup', function (t) {
+    common.setup({clientApiVersion: '~9.0'},
+        function onSetup(_, clients, server) {
+        CLIENTS = clients;
+        CLIENT = clients.user;
+        OTHER = clients.other;
+        SERVER = server;
+
+        t.end();
+    });
+});
+
+test('get bhyve image', function (t) {
+    // Make sure we're not getting an lx-branded image instead
+    // of a KVM/bhyve one.
+    CLIENT.get('/my/images?os=linux', function (err, req, res, body) {
+        t.ifError(err, 'GET /my/images error');
+        t.equal(res.statusCode, 200, 'GET /my/images status');
+        common.checkHeaders(t, res.headers);
+        t.ok(body, 'GET /my/images body');
+        t.ok(Array.isArray(body), 'GET /my/images body is an array');
+        // Do nothing if we haven't got a Linux image already imported
+        if (body.length === 0) {
+            t.ok(true, 'No bhyve images imported, skipping bhyve provisioning');
+        } else {
+            var bhyveImages = body.filter(function getBhyve(img) {
+                return !img.requirements || !img.requirements.brand ||
+                    img.requirements.brand === 'bhyve';
+            });
+
+            var bhyveImage = bhyveImages.pop();
+
+            if (bhyveImage) {
+                BHYVE_IMAGE = bhyveImage;
+                BHYVE_IMAGE_UUID = bhyveImage.id;
+                t.ok(true, 'BHYVE_IMAGE_UUID: ' + BHYVE_IMAGE_UUID);
+            }
+        }
+        t.end();
+    });
+});
+
+test('add bhyve packages', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    vasync.forEachPipeline({
+        func: function addPackage(pkg, next) {
+            common.addPackage(CLIENT, pkg, next);
+        },
+        inputs: CUSTOM_BHYVE_PACKAGES
+    }, function onDone(err) {
+        t.ifError(err, 'Add package error');
+        t.end();
+    });
+});
+
+test('Get test server', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    common.getTestServer(CLIENT, function (err, testServer) {
+        t.ifError(err);
+        SERVER_UUID = testServer.uuid;
+        t.end();
+    });
+});
+
+test('CreateMachine - disks and no flexible_disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [ {}, {size: 512} ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-inflexible-test-' + process.pid,
+        package: BHYVE_128_INFLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - 9 disks and flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 },
+            { size: 512 }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-too-many-disks-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - Multiple `remaining` disks',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 512 },
+            { size: 'remaining' },
+            { size: 'remaining' }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-invalid-remaining-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - Disks size is greater than quota',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            {},
+            { size: 102400 }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-oversized-disks-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ok(err);
+            t.equal(err.statusCode, 409);
+            t.equal(body.code, 'InvalidArgument');
+            t.end();
+    });
+});
+
+test('CreateMachine - No disks/inflexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-no-disks-inflex-package-test-' + process.pid,
+        package: BHYVE_128_INFLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - no disks/inflexible disk package',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+        function waitForMachineCb(err) {
+            t.ifError(err);
+
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+
+            t.end();
+    });
+});
+
+test('GetMachine has disks - no disks/inflexible disk package',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size
+        },
+        {
+            size: BHYVE_128_INFLEXIBLE.quota
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            t.strictEqual(body.flexible, false);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - no disks/inflexible disk package',
+    function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID, function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - No disks/package has disks', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE_DISKS.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - No disks/package has disks',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+        function waitForMachineCb(err) {
+            t.ifError(err);
+
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+
+            t.end();
+    });
+});
+
+test('GetMachine has disks - No disks/package has disks', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size
+        },
+        {
+            size: BHYVE_128_FLEXIBLE_DISKS.disks[1].size
+        }
+    ];
+
+    var pkg = BHYVE_128_FLEXIBLE_DISKS;
+    var usedSpace = pkg.disks[1].size + BHYVE_IMAGE.image_size;
+    var expectedFree = pkg.quota - usedSpace;
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            checkDisksQuota(t, body.disks,
+                BHYVE_128_FLEXIBLE_DISKS.quota - body.free_space);
+            t.strictEqual(body.flexible, true);
+            t.equal(body.free_space, expectedFree);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - No disks/package has disks', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - Disks/flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            { uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
+            { uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 512},
+            { uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 'remaining' }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-disks-flex-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - Disks/flexible disk package',
+    function (t) {
+        if (!BHYVE_IMAGE_UUID) {
+            t.ok(true, 'No bhyve images. Test skipped');
+            t.end();
+            return;
+        }
+
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                t.ifError(err);
+
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.end();
+        });
+    }
+);
+
+test('GetMachine has disks - Disks/flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size,
+            uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+        },
+        {
+            size: 512,
+            uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+        },
+        {
+            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
+            uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            t.strictEqual(body.flexible, true);
+            checkDisksQuota(t, body.disks,
+                BHYVE_128_FLEXIBLE.quota - body.free_space);
+            t.deepEqual(body.disks, expectedDisks);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - Disks/flexible disk package', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - Disks with remaining/flex disk package',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        disks: [
+            { uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
+            { uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 'remaining'},
+            { uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 512 }
+        ],
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-disks-flex-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - Disks with remaining/flex disk package',
+    function (t) {
+        if (!BHYVE_IMAGE_UUID) {
+            t.ok(true, 'No bhyve images. Test skipped');
+            t.end();
+            return;
+        }
+
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                t.ifError(err);
+
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.end();
+        });
+    }
+);
+
+test('GetMachine has disks - Disks with remaining/flex disk package',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size,
+            uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+        },
+        {
+            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
+            uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+        },
+        {
+            size: 512,
+            uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            t.strictEqual(body.flexible, true);
+            checkDisksQuota(t, body.disks,
+                BHYVE_128_FLEXIBLE.quota - body.free_space);
+            t.deepEqual(body.disks, expectedDisks);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - Disks with remaining/flex disk package',
+    function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - No disks/flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-no-disks-flex-package-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - No disks/flexible disk package',
+    function (t) {
+        if (!BHYVE_IMAGE_UUID) {
+            t.ok(true, 'No bhyve images. Test skipped');
+            t.end();
+            return;
+        }
+
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                t.ifError(err);
+
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.end();
+        });
+    }
+);
+
+test('GetMachine has disks - No disks/flexible disk package', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_IMAGE.image_size
+        },
+        {
+            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisksQuota(t, body.disks,
+                BHYVE_128_FLEXIBLE.quota - body.free_space);
+            checkDisks(t, expectedDisks, body.disks);
+            t.strictEqual(body.flexible, true);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - No disks/flexible disk package', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('CreateMachine - Package has remaining boot disk', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var obj = {
+        image: BHYVE_IMAGE_UUID,
+        name: 'bhyve-remaining-test-' + process.pid,
+        package: BHYVE_128_FLEXIBLE_REMAINING.uuid,
+        server_uuid: SERVER_UUID
+    };
+
+    CLIENT.post('/my/machines', obj,
+        function createdMachine(err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            t.ok(true, 'Requested provision of bhyve machine: ' +
+                BHYVE_MACHINE_UUID);
+            t.end();
+    });
+});
+
+test('Wait For bhyve machine running - Package has remaining boot disk',
+    function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+        function waitForMachineCb(err) {
+            t.ifError(err);
+
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+
+            t.end();
+    });
+});
+
+test('GetMachine has disks - Package has remaining boot disk', function (t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            image: BHYVE_IMAGE_UUID,
+            size: BHYVE_128_FLEXIBLE_REMAINING.quota
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+        function gotMachine(err, req, res, body) {
+            t.ifError(err);
+            checkDisks(t, expectedDisks, body.disks);
+            checkDisksQuota(t, body.disks, BHYVE_128_FLEXIBLE_REMAINING.quota);
+            t.strictEqual(body.flexible, true);
+            t.strictEqual(body.free_space, 0);
+            t.end();
+    });
+});
+
+test('Delete bhyve test vm - Package has remaining boot disk', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+
+    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+        function onDelete() {
+            BHYVE_MACHINE_UUID = undefined;
+            t.end();
+    });
+});
+
+test('teardown', function (t) {
+    common.teardown(CLIENTS, SERVER, function (teardownErr) {
+        t.ifError(teardownErr, 'Teardown success');
+
+        if (!BHYVE_IMAGE_UUID) {
+            t.end();
+            return;
+        }
+
+        vasync.forEachParallel({
+            func: function deletePackage(pkg, next) {
+                common.deletePackage(CLIENT, pkg, next);
+            },
+            inputs: CUSTOM_BHYVE_PACKAGES
+        }, function onDone(pkgErr) {
+            t.ifError(pkgErr, 'Delete package error');
+            t.end();
+        });
+    });
+});
diff --git a/test/machines/common.js b/test/machines/common.js
index 201f0bd..77e260f 100644
--- a/test/machines/common.js
+++ b/test/machines/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -85,6 +85,11 @@ function checkMachine(t, m) {
         t.ok(m.primaryIp, 'checkMachine primaryIp ok');
     }
 
+    if (m.brand === 'bhyve') {
+        t.ok(m.image, 'checkMachine image ok');
+        t.ok(m.disks, 'checkMachine disks ok');
+    }
+
     // Sometimes test suites from other applications create zones with a
     // 00000000-0000-0000-0000-000000000000 billing_id, which is changed by
     // cloudapi to '' since it's not an actual package UUID. Alas, we work
diff --git a/test/machines/snapshots.js b/test/machines/snapshots.js
index 8c419ee..9ae9a65 100644
--- a/test/machines/snapshots.js
+++ b/test/machines/snapshots.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var common = require('../common');
@@ -93,6 +93,7 @@ module.exports = function (suite, client, other, machine, callback) {
                 t.ok(body.length, 'there are snapshots');
                 body.forEach(function (s) {
                     checkSnapshot(t, s);
+                    t.ok(s.size, 'snapshot size ok');
                 });
                 t.end();
             });
@@ -125,6 +126,7 @@ module.exports = function (suite, client, other, machine, callback) {
                 common.checkHeaders(t, res.headers);
                 t.ok(body, 'snapshot body');
                 checkSnapshot(t, body);
+                t.ok(body.size, 'snapshot size ok');
                 t.end();
             });
         } else {
