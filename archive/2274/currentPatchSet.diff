commit 834f023a8d46675687d52531c321cab2d9a41a32 (refs/changes/74/2274/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-07-25T01:53:48+00:00 (2 years, 2 months ago)
    
    joyent/gerritbot#4 Copy uncommitted bits from running zone

diff --git a/agent.js b/agent.js
index 96a5e3a..35e3555 100644
--- a/agent.js
+++ b/agent.js
@@ -24,15 +24,18 @@ process.env.TERM = 'vt100';
 
 var UUID = mod_cp.spawnSync('zonename').stdout.toString('ascii').trim();
 
-var client;
 var retries = 3;
 var timeout = 5000;
 var delay = 5000;
 
 function connect() {
+	var client;
+
 	var timer = setTimeout(function () {
 		timer = undefined;
 		client.close();
+		client.terminate();
+		onClose();
 	}, timeout);
 	timeout *= 2;
 
@@ -44,26 +47,30 @@ function connect() {
 			uuid: UUID
 		}));
 	});
-	client.on('message', onMessage);
-	client.on('error', function (err) {
-		console.error(err.stack);
-		onClose();
-	});
+	client.on('message', onMessage.bind(null, client));
+	client.on('error', onError);
 	client.on('close', onClose);
 	function onClose() {
-		clearTimeout(timer);
+		if (timer === undefined)
+			clearTimeout(timer);
+		client.removeListener('message', onMessage);
+		client.removeListener('error', onError);
+		client.removeListener('close', onClose);
 		if (--retries > 0) {
-			setTimeout(function () {
-				connect();
-			}, delay);
+			setTimeout(connect, delay);
 			delay *= 2;
 		} else {
 			process.exit(1);
 		}
 	}
+	function onError(err) {
+		console.error(err.stack);
+		client.terminate();
+		onClose();
+	}
 }
 
-function onMessage(msg) {
+function onMessage(client, msg) {
 	msg = JSON.parse(msg);
 	var cookie = msg.cookie;
 	if (msg.op === 'spawn') {
@@ -85,7 +92,8 @@ function onMessage(msg) {
 			while ((data = kid.stdout.read()) !== null) {
 				evt.data.push(data.toString('base64'));
 			}
-			client.send(JSON.stringify(evt));
+			if (evt.data.length > 0)
+				client.send(JSON.stringify(evt));
 		});
 		kid.stdout.on('end', function () {
 			var evt = {
@@ -106,7 +114,8 @@ function onMessage(msg) {
 			while ((data = kid.stderr.read()) !== null) {
 				evt.data.push(data.toString('base64'));
 			}
-			client.send(JSON.stringify(evt));
+			if (evt.data.length > 0)
+				client.send(JSON.stringify(evt));
 		});
 		kid.stderr.on('end', function () {
 			var evt = {
diff --git a/etc/config.json b/etc/config.json
index ec0db0e..3275370 100644
--- a/etc/config.json
+++ b/etc/config.json
@@ -13,7 +13,7 @@
 		"host": "docker.staging-2.cns.joyent.us",
 		"user": "awilson",
 		"keyFile": "./sdc.id_rsa",
-		"network": "unwashed"
+		"network": "external"
 	},
 	"slaves": {
 		"image": "96bcddda-beb7-11e5-af20-a3fb54c8ae29",
diff --git a/server.js b/server.js
index 346d2d5..d149348 100644
--- a/server.js
+++ b/server.js
@@ -47,8 +47,8 @@ var cert = mod_sshpk.createSelfSignedCertificate(id, dockerKey);
 config.gerrit.log = log;
 config.gerrit.recovery = {
 	default: {
-		timeout: 20000,
-		maxTimeout: 60000,
+		timeout: 30000,
+		maxTimeout: 120000,
 		delay: 5000,
 		maxDelay: 15000,
 		retries: Infinity
@@ -177,6 +177,7 @@ function SlaveConnection(opts) {
 	this.sc_config = opts.config;
 	this.sc_uuid = undefined;
 	this.sc_kids = {};
+	this.sc_lastMsg = [];
 	slaves.push(this);
 	mod_fsm.FSM.call(this, 'idle');
 }
@@ -213,7 +214,9 @@ SlaveConnection.prototype.state_auth = function (S) {
 			S.gotoState('closing');
 			return;
 		}
-		if (msg.cookie === COOKIE) {
+		var keys = Object.keys(msg).sort();
+		if (msg.cookie === COOKIE && keys.length === 2 &&
+		    keys[0] === 'cookie' && keys[1] === 'uuid') {
 			self.sc_uuid = msg.uuid.replace(/-/g, '');
 			var cid = self.sc_uuid.slice(0, 12);
 			delete (spawning[cid]);
@@ -301,7 +304,7 @@ SlaveConnection.prototype.state_setup.npm = function (S) {
 			S.gotoState('closing');
 			return;
 		}
-		S.gotoState('setup.jsl_clone');
+		S.gotoState('setup.clean_old');
 	});
 	function processPkgsrc(instr, cb) {
 		var cmd = 'pfexec';
@@ -323,6 +326,29 @@ SlaveConnection.prototype.state_setup.npm = function (S) {
 	}
 };
 
+SlaveConnection.prototype.state_setup.clean_old = function (S) {
+	var self = this;
+	var kid = this.spawn('rm',
+	    ['-rf',
+	    '/home/build/jsstyle',
+	    '/home/build/javascriptlint',
+	    '/tmp/repo']);
+	var errOut = '';
+	S.on(kid.stderr, 'data', function (data) {
+		errOut = errOut + data.toString('utf-8');
+	});
+	S.on(kid, 'close', function (exitStatus) {
+		if (exitStatus === 0) {
+			S.gotoState('setup.jsl_clone');
+			return;
+		}
+		self.sc_log.error('failed to run command in zone',
+		    {stderr: errOut});
+		S.gotoState('closing');
+		return;
+	});
+};
+
 SlaveConnection.prototype.state_setup.jsl_clone = function (S) {
 	var self = this;
 	var kid = this.spawn('git',
@@ -718,7 +744,7 @@ SlaveConnection.prototype.state_running.report = function (S) {
 	gerrit.review(spec, review, S.callback(function (err) {
 		if (err) {
 			self.sc_log.error({ err: err },
-			    'failed to post review');
+			    'failed to post review (report)');
 			/*
 			 * If we hit
 			 * <https://bugs.chromium.org/p/gerrit/issues/detail?id=3475>
@@ -826,6 +852,9 @@ SlaveConnection.prototype.handleMessage = function (msg) {
 	} else {
 		throw (new Error('Unknown event type ' + msg.event));
 	}
+	this.sc_lastMsg.push(msg);
+	if (this.sc_lastMsg.length > 8)
+		this.sc_lastMsg.shift();
 };
 
 SlaveConnection.prototype.spawn = function (cmd, args, opts) {
