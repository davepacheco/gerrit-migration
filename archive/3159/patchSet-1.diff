From b6c2e5497e7e27ee096a09c3a21c927723a99fa3 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Thu, 4 Jan 2018 15:34:08 -0800
Subject: [PATCH] ZAPI-821 VMAPI tests abort due to unexpected output

---
 test/vms.volumes.test.js | 31 ++++++++++++++++++++++++++++++-
 1 file changed, 30 insertions(+), 1 deletion(-)

diff --git a/test/vms.volumes.test.js b/test/vms.volumes.test.js
index 34c71ad..1d7e109 100644
--- a/test/vms.volumes.test.js
+++ b/test/vms.volumes.test.js
@@ -276,7 +276,8 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
                         function onListVolumes(listVolErr, req, res, body) {
                             t.ifError(listVolErr, 'Listing volumes with name ' +
                                 volumeName + ' should succeed');
-                            if (body) {
+                            t.ok(body, 'response should not be empty');
+                            if (body && body.length > 0) {
                                 volumeUuid = body[0].uuid;
                             }
 
@@ -285,6 +286,13 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
                 },
 
                 function checkVolumeProvisioned(ctx, next) {
+                    if (volumeUuid === undefined) {
+                        t.ok(false,
+                            'volumeUuid not found, cannot check volume state');
+                        next();
+                        return;
+                    }
+
                     waitForValue('/volumes/' + volumeUuid, 'state', 'ready',
                         { client: client.volapi },
                         function onVolCreated(volCreatErr) {
@@ -296,6 +304,12 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
                 },
 
                 function deleteVm(ctx, next) {
+                    if (!vmUuid) {
+                        t.ok(false, 'vmUuid not found, cannot delete VM');
+                        next();
+                        return;
+                    }
+
                     client.del({
                         path: '/vms/' + vmUuid
                     }, function onVmDeleted(vmDelErr) {
@@ -307,6 +321,14 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
                 },
 
                 function waitForVmDeleted(ctx, next) {
+                    if (!vmUuid) {
+                        t.ok(false,
+                            'vmUuid not found, cannot wait for VM to be ' +
+                                'deleted');
+                        next();
+                        return;
+                    }
+
                     waitForValue('/vms/' + vmUuid, 'state', 'destroyed', {
                         client: client
                     }, function onVmDeleted(vmDelErr) {
@@ -318,6 +340,13 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
                 },
 
                 function deleteVolume(ctx, next) {
+                    if (!volumeUuid) {
+                        t.ok(false,
+                            'volumeUuid not found, cannot delete volume');
+                        next();
+                        return;
+                    }
+
                     client.volapi.del('/volumes/' + volumeUuid + '?force=true',
                         function onVolDeleted(volDelErr) {
                             t.ifError(volDelErr);
-- 
2.21.0

