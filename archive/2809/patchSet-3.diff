commit c2e1dea7d3d83f228f7b40ca23104da9a7b83789 (refs/changes/09/2809/3)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-10-19T17:34:15-07:00 (2 years ago)
    
    CNAPI-724 CNAPI still not alerting clients waiting on tasks

diff --git a/lib/app.js b/lib/app.js
index 95600ff..e7b9ba2 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
- * This is where the core of CNAPI abstractions and logic is defined:
+ * This is where the core of CNAPI abstractions and logic is defined.
  */
 
 
@@ -1261,6 +1261,7 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
     }
 };
 
+/* BEGIN JSSTYLED */
 /*
  * Set a callback to be executed when a cn-agent task has completed. This
  * allows upstream clients to initiate a task and then wait for it to complete,
@@ -1268,19 +1269,21 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
  *
  * @param opts {Object}
  * @param opts.taskid {String}
+ * @param opts.timeoutSeconds {Number} How long to wait before we consider this task timed out
  * @param callback {Function} Function to call on task completion
- *
  */
+/* END JSSTYLED */
 
 App.prototype.waitForTask = function (opts, callback) {
-    assert.object(opts, 'opts');
-    assert.string(opts.taskid, 'opts.taskid');
-    assert.optionalNumber(opts.timeoutSeconds, 'opts.timeoutSeconds');
-
     var self = this;
     var taskid = opts.taskid;
     var timeoutSeconds = opts.timeoutSeconds || 3600;
 
+    assert.object(opts, 'opts');
+    assert.string(opts.taskid, 'opts.taskid');
+    assert.optionalNumber(opts.timeoutSeconds, 'opts.timeoutSeconds');
+    assert.func(callback, 'callback');
+
     if (!self.taskCallbacks.hasOwnProperty(taskid)) {
         self.taskCallbacks[taskid] = {
             callbacks: []
@@ -1288,12 +1291,15 @@ App.prototype.waitForTask = function (opts, callback) {
     }
 
     // Check if there is a cached response for this task.
-
     if (self.taskCallbacks[taskid].task) {
+        self.log.debug({ cached: self.taskCallbacks[taskid].task },
+            'waitForTask: returning a cached task value');
         callback(null, self.taskCallbacks[taskid].task);
         return;
     }
 
+    self.log.debug('waitForTask: no cached value found');
+
     /**
      * Generate an id so we can find our way back to a particular callback when
      * it comes to time expire it.
@@ -1333,9 +1339,13 @@ App.prototype.waitForTask = function (opts, callback) {
  * a cn-agent task we initiated has completed.
  */
 
-App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
+App.prototype.alertWaitingTasks = function (err, taskid, task) {
     var self = this;
 
+    assert.optionalObject(err, 'err');
+    assert.string(taskid, 'taskid');
+    assert.object(task, 'task');
+
     /**
      * If no callbacks were set for this task response when we go to alert
      * waiting callbacks, cache the value in case we end up trying to wait for
@@ -1349,9 +1359,9 @@ App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
     if (!self.taskCallbacks.hasOwnProperty(taskid) ||
             self.taskCallbacks[taskid].callbacks.length === 0)
     {
-        self.log.warn(
-            'wanted to alert callbacks for task %s, but none found', taskid);
-        self.log.warn({ task: task }, 'caching response for %s', taskid);
+        self.log.debug(
+            'alertWaitingTasks: wanted to alert callbacks for task %s, '
+            + 'but none found, caching response', taskid);
 
         var timeout = setTimeout(function () {
             delete self.taskCallbacks[taskid];
@@ -1367,6 +1377,7 @@ App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
              */
             cleanupTimeout: timeout
         };
+
         return;
     }
 
diff --git a/lib/endpoints/tasks.js b/lib/endpoints/tasks.js
index 8e25fae..1aa5f58 100644
--- a/lib/endpoints/tasks.js
+++ b/lib/endpoints/tasks.js
@@ -69,15 +69,33 @@ Task.get = function handlerTaskGet(req, res, next) {
 Task.wait = function handlerTaskWait(req, res, next) {
     var task;
 
+    req.log.debug('handlerTaskWait: starting to wait');
+
     get(function (val) {
         if (task.status === 'complete' || task.status === 'failure') {
+            req.log.debug({ task: task }, 'handlerTaskWait: got task',
+                req.params.taskid, task.status);
             res.send(200, task);
             next();
             return;
         }
 
-        wait(function () {
+        req.log.debug(
+            'handlerTaskWait: task not complete nor failure, waiting on task');
+
+        wait(function (err) {
+            if (err) {
+                req.log.error(err, 'error waiting on task');
+
+                next(new restify.InternalError(
+                    'error waiting on task'));
+                return;
+            }
+
             get(function () {
+                req.log.debug({ task: task },
+                    'handlerTaskWait: got task after wait',
+                    req.params.taskid, task.status);
                 res.send(200, task);
                 next();
             });
@@ -111,14 +129,16 @@ Task.wait = function handlerTaskWait(req, res, next) {
     function wait(cb) {
         ModelServer.getApp().waitForTask({
             taskid: req.params.taskid,
-            timeoutSeconds: req.params.timeout &&
-                parseInt(req.params.timeout, 10) || 3600
-        }, function (err, mytask) {
+            timeoutSeconds:
+                req.params.timeout && parseInt(req.params.timeout, 10) || 3600
+        }, function (err, _task) {
             if (err) {
-                cb();
+                req.log.debug(
+                    { err: err }, 'handlerTaskWait: waitForTask error');
+                cb(err);
                 return;
             }
-
+            task = _task;
             cb();
         });
     }
diff --git a/lib/models/server.js b/lib/models/server.js
index be310fb..e167280 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -2249,7 +2249,7 @@ function (opts) {
                 if (persist) {
                     updateTask(function () {
                         ModelServer.getApp().alertWaitingTasks(
-                            err, taskstatus.id);
+                            err, taskstatus.id, taskstatus);
                     });
                 }
 
@@ -2271,6 +2271,9 @@ function (opts) {
 
     function updateTask(cb) {
         var moray = ModelServer.getMoray();
+
+        self.log.debug({ taskstatus: taskstatus },
+            'sendTaskRequest: updating task value in moray');
         moray.putObject(buckets.tasks.name, taskstatus.id, taskstatus,
             function (putError) {
                 if (putError) {
