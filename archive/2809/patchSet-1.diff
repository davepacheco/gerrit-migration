commit 951ab71ab44090c1cfe1da46781d2584388ff836 (refs/changes/09/2809/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-10-18T03:22:14-07:00 (2 years ago)
    
    CNAPI-724 CNAPI still not alerting clients waiting on tasks

diff --git a/lib/app.js b/lib/app.js
index 95600ff..3096020 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
- * This is where the core of CNAPI abstractions and logic is defined:
+ * This is where the core of CNAPI abstractions and logic is defined.
  */
 
 
@@ -1269,7 +1269,6 @@ App.prototype.onSysinfoReceived = function (message, routingKey) {
  * @param opts {Object}
  * @param opts.taskid {String}
  * @param callback {Function} Function to call on task completion
- *
  */
 
 App.prototype.waitForTask = function (opts, callback) {
@@ -1288,10 +1287,13 @@ App.prototype.waitForTask = function (opts, callback) {
     }
 
     // Check if there is a cached response for this task.
-
     if (self.taskCallbacks[taskid].task) {
+        self.log.info({ cached: self.taskCallbacks[taskid].task },
+            'waitForTask: returning a cached task value');
         callback(null, self.taskCallbacks[taskid].task);
         return;
+    } else {
+        self.log.info('waitForTask: no cached value found');
     }
 
     /**
@@ -1333,7 +1335,7 @@ App.prototype.waitForTask = function (opts, callback) {
  * a cn-agent task we initiated has completed.
  */
 
-App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
+App.prototype.alertWaitingTasks = function (err, taskid, task) {
     var self = this;
 
     /**
@@ -1350,8 +1352,10 @@ App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
             self.taskCallbacks[taskid].callbacks.length === 0)
     {
         self.log.warn(
-            'wanted to alert callbacks for task %s, but none found', taskid);
-        self.log.warn({ task: task }, 'caching response for %s', taskid);
+            'alertWaitingTasks: wanted to alert callbacks for task %s, '
+            + 'but none found', taskid);
+        self.log.warn({ task: task },
+                'alertWaitingTasks: caching response for %s', taskid);
 
         var timeout = setTimeout(function () {
             delete self.taskCallbacks[taskid];
@@ -1367,6 +1371,7 @@ App.prototype.alertWaitingTasks = function (err, taskid, task, callback) {
              */
             cleanupTimeout: timeout
         };
+
         return;
     }
 
diff --git a/lib/endpoints/tasks.js b/lib/endpoints/tasks.js
index 8e25fae..949cd71 100644
--- a/lib/endpoints/tasks.js
+++ b/lib/endpoints/tasks.js
@@ -69,15 +69,25 @@ Task.get = function handlerTaskGet(req, res, next) {
 Task.wait = function handlerTaskWait(req, res, next) {
     var task;
 
+    req.log.warn('handlerTaskWait: starting to wait');
+
     get(function (val) {
         if (task.status === 'complete' || task.status === 'failure') {
+            req.log.info({ task: task }, 'handlerTaskWait: get task',
+                req.params.taskid, task.status);
             res.send(200, task);
             next();
             return;
         }
 
+        req.log.info(
+            'handlerTaskWait: task not complete or failure, waiting on task');
+
         wait(function () {
             get(function () {
+                req.log.info({ task: task },
+                    'handlerTaskWait: get task after wait',
+                    req.params.taskid, task.status);
                 res.send(200, task);
                 next();
             });
@@ -113,12 +123,14 @@ Task.wait = function handlerTaskWait(req, res, next) {
             taskid: req.params.taskid,
             timeoutSeconds: req.params.timeout &&
                 parseInt(req.params.timeout, 10) || 3600
-        }, function (err, mytask) {
+        }, function (err, _task) {
             if (err) {
-                cb();
+                cb(err);
+                req.log.warn(
+                    { err: err }, 'handlerTaskWait: waitForTask error');
                 return;
             }
-
+            task = _task;
             cb();
         });
     }
@@ -131,6 +143,8 @@ function attachTo(http, app) {
         app: app
     };
 
+    Task.log = app.getLog();
+
     // Get task details
     http.get(
         { path: '/tasks/:taskid', name: 'TaskGet' },
diff --git a/lib/models/server.js b/lib/models/server.js
index be310fb..5944fc6 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -2249,7 +2249,7 @@ function (opts) {
                 if (persist) {
                     updateTask(function () {
                         ModelServer.getApp().alertWaitingTasks(
-                            err, taskstatus.id);
+                            err, taskstatus.id, taskstatus);
                     });
                 }
 
@@ -2271,6 +2271,9 @@ function (opts) {
 
     function updateTask(cb) {
         var moray = ModelServer.getMoray();
+
+        self.log.info({ taskstatus: taskstatus },
+            'sendTaskRequest: updating task value in moray');
         moray.putObject(buckets.tasks.name, taskstatus.id, taskstatus,
             function (putError) {
                 if (putError) {
