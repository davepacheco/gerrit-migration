commit 95214a0ba35ed1201f2dacd5e569ce4a80575f6e (refs/changes/29/2229/3)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-07-19T18:43:43-07:00 (2 years, 3 months ago)
    
    CNS-170 Expose a separate CNS name/zone for each distinct network

diff --git a/lib/api-server.js b/lib/api-server.js
index 093ae11..08554f3 100644
--- a/lib/api-server.js
+++ b/lib/api-server.js
@@ -29,6 +29,7 @@ var EventEmitter = require('events').EventEmitter;
 var UfdsFilter = require('./ufds-filter');
 var NetPoolFilter = require('./net-pool-filter');
 var NetFilter = require('./net-filter');
+var NetworkInfoFilter = require('./network-info-filter');
 
 var VERSION = consts.VERSION;
 var TTL = consts.TTL;
@@ -131,14 +132,16 @@ function APIServer(opts) {
 	this.pipeline.uf = new UfdsFilter(popts);
 	this.pipeline.npf = new NetPoolFilter(popts);
 	this.pipeline.nf = new NetFilter(popts);
+	this.pipeline.nif = new NetworkInfoFilter(popts);
 
 	this.pipeline.uf.pipe(this.pipeline.npf);
 	this.pipeline.npf.pipe(this.pipeline.nf);
+	this.pipeline.nf.pipe(this.pipeline.nif);
 
 	var reqs = {};
-	this.pipeline.nf.on('readable', function () {
+	this.pipeline.nif.on('readable', function () {
 		var obj;
-		while ((obj = self.pipeline.nf.read()) !== null) {
+		while ((obj = self.pipeline.nif.read()) !== null) {
 			obj.suffixes = getSuffixes(obj, self.config);
 			var ev = reqs[obj.id];
 			delete (reqs[obj.id]);
diff --git a/lib/network-info-filter.js b/lib/network-info-filter.js
new file mode 100644
index 0000000..d704d00
--- /dev/null
+++ b/lib/network-info-filter.js
@@ -0,0 +1,121 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = NetworkInfoFilter;
+
+var stream = require('stream');
+var util = require('util');
+var assert = require('assert-plus');
+var utils = require('./utils');
+var bunyan = require('bunyan');
+var LRUCache = require('lru-cache');
+var restify = require('restify-clients');
+var qs = require('querystring');
+var vasync = require('vasync');
+
+var consts = require('./consts');
+
+function NetworkInfoFilter(opts) {
+	assert.object(opts, 'options');
+
+	assert.optionalObject(opts.log, 'options.log');
+	var log = opts.log || bunyan.createLogger({name: 'cns'});
+	this.log = log.child({stage: 'NetworkInfoFilter'});
+
+	assert.object(opts.config, 'options.config');
+	assert.object(opts.config.napi_opts, 'config.napi_opts');
+	this.config = opts.config.napi_opts;
+	assert.string(this.config.address, 'napi_opts.address');
+
+	assert.optionalObject(opts.agent, 'options.agent');
+
+	this.client = restify.createJsonClient({
+		url: 'http://' + this.config.address,
+		agent: opts.agent
+	});
+
+	this.cache = LRUCache({
+		max: 32 * 1024 * 1024,
+		length: function jsonLength(t) {
+			return (JSON.stringify(t).length);
+		},
+		maxAge: 1 * 60 * 1000
+	});
+
+	var xformOpts = {
+		readableObjectMode: true,
+		writableObjectMode: true
+	};
+	stream.Transform.call(this, xformOpts);
+}
+util.inherits(NetworkInfoFilter, stream.Transform);
+
+NetworkInfoFilter.prototype._transform = function (vm, enc, cb) {
+	assert.object(vm, 'vm');
+	assert.arrayOfObject(vm.nics, 'vm.nics');
+
+	var self = this;
+	vasync.forEachParallel({
+		inputs: vm.nics,
+		func: doNic
+	}, function (err) {
+		if (err) {
+			self.log.warn({
+			    vm: vm.uuid,
+			    err: err,
+			    networks: vm.nics.map(function (n) {
+				return (n.network_uuid);
+			    })
+			}, 'got error retrieving NAPI records, dropping');
+			cb();
+			return;
+		}
+		vm.timers = vm.timers || [];
+		vm.timers.push({t: new Date(), n: 'network-info-filter'});
+		self.push(vm);
+		cb();
+	});
+
+	function doNic(nic, ccb) {
+		self.getNetwork(nic.network_uuid, function (err, napiObj) {
+			if (err) {
+				ccb(err);
+				return;
+			}
+
+			assert.strictEqual(napiObj.uuid, nic.network_uuid);
+			nic.network = napiObj;
+
+			ccb();
+		});
+	}
+};
+
+NetworkInfoFilter.prototype.getNetwork = function (uuid, cb) {
+	var v = this.cache.get(uuid);
+	if (v) {
+		cb(null, v);
+		return;
+	}
+
+	var self = this;
+	this.client.get('/networks/' + uuid, function (err, req, res, obj) {
+		if (err) {
+			cb(err);
+			return;
+		}
+
+		var cutObj = {};
+		cutObj.name = obj.name;
+		cutObj.owner_uuids = obj.owner_uuids;
+		cutObj.uuid = obj.uuid;
+
+		self.cache.set(uuid, cutObj);
+		cb(null, cutObj);
+	});
+};
diff --git a/lib/vm-to-zones.js b/lib/vm-to-zones.js
index b3d3b21..5fe6d03 100644
--- a/lib/vm-to-zones.js
+++ b/lib/vm-to-zones.js
@@ -32,7 +32,8 @@ function buildZonesFromVm(vm, config, log) {
 					entries.push({
 						type: 'instance',
 						ip: ip,
-						zone: zone
+						zone: zone,
+						network: nic.network
 					});
 				}
 				if (vm.listServices) {
@@ -41,7 +42,8 @@ function buildZonesFromVm(vm, config, log) {
 							type: 'service',
 							ip: ip,
 							zone: zone,
-							service: svc
+							service: svc,
+							network: nic.network
 						});
 					});
 				}
@@ -143,6 +145,14 @@ function primaryName(vm, config) {
 	return ((vm.primaryName = n));
 }
 
+function isWildcard(config, zone) {
+	return (config.forward_zones[zone].networks.indexOf('*') !== -1);
+}
+
+function isNetOwned(vm, netw) {
+	return ((netw.owner_uuids || []).indexOf(vm.owner.uuid) !== -1);
+}
+
 function addInstance(zones, vm, ent, config) {
 	function addName(name) {
 		if (!zones[ent.zone])
@@ -194,16 +204,37 @@ function addInstance(zones, vm, ent, config) {
 	addName(n);
 	addACME(n);
 
+	var doNetworkName = (isWildcard(config, ent.zone) &&
+	    isNetOwned(vm, ent.network));
+
+	if (doNetworkName) {
+		n = dnsify(ent.network.name) + '.' + n;
+		addName(n);
+		addACME(n);
+	}
+
 	if (config.use_login && vm.owner.login.length < 63) {
 		n = vm.uuid + '.inst.' + dnsify(vm.owner.login);
 		addName(n);
 		addACME(n);
+
+		if (doNetworkName) {
+			n = dnsify(ent.network.name) + '.' + n;
+			addName(n);
+			addACME(n);
+		}
 	}
 
 	if (config.use_alias && vm.alias && vm.alias.length < 63) {
 		n = dnsify(vm.alias) + '.inst.' + vm.owner.uuid;
 		addName(n);
 		addACME(n);
+
+		if (doNetworkName) {
+			n = dnsify(ent.network.name) + '.' + n;
+			addName(n);
+			addACME(n);
+		}
 	}
 
 	if (config.use_login && config.use_alias && vm.alias &&
@@ -211,6 +242,12 @@ function addInstance(zones, vm, ent, config) {
 		n = dnsify(vm.alias) + '.inst.' + dnsify(vm.owner.login);
 		addName(n);
 		addACME(n);
+
+		if (doNetworkName) {
+			n = dnsify(ent.network.name) + '.' + n;
+			addName(n);
+			addACME(n);
+		}
 	}
 
 	revName = revName + '.' + ent.zone;
@@ -289,21 +326,45 @@ function addService(zones, vm, ent, config) {
 			});
 		}
 	}
-	addName(svc.name + '.svc.' + vm.owner.uuid);
-	addACME(svc.name + '.svc.' + vm.owner.uuid);
+
+	var doNetworkName = (isWildcard(config, ent.zone) &&
+	    isNetOwned(vm, ent.network));
+
+	var n = svc.name + '.svc.' + vm.owner.uuid;
+	addName(n);
+	addACME(n);
 	if (vm.owner.login === 'admin') {
 		addName(svc.name);
 		addACME(svc.name);
 	}
 	svc.ports.forEach(function (port) {
-		addSRV(svc.name + '.svc.' + vm.owner.uuid, port);
+		addSRV(n, port);
 	});
+
+	if (doNetworkName) {
+		n = dnsify(ent.network.name) + '.' + n;
+		addName(n);
+		addACME(n);
+		svc.ports.forEach(function (port) {
+			addSRV(n, port);
+		});
+	}
+
 	if (config.use_login && vm.owner.login.length < 63) {
-		addName(svc.name + '.svc.' + dnsify(vm.owner.login));
-		addACME(svc.name + '.svc.' + dnsify(vm.owner.login));
+		n = svc.name + '.svc.' + dnsify(vm.owner.login);
+		addName(n);
+		addACME(n);
 		svc.ports.forEach(function (port) {
-			addSRV(
-			    svc.name + '.svc.' + dnsify(vm.owner.login), port);
+			addSRV(n, port);
 		});
+
+		if (doNetworkName) {
+			n = dnsify(ent.network.name) + '.' + n;
+			addName(n);
+			addACME(n);
+			svc.ports.forEach(function (port) {
+				addSRV(n, port);
+			});
+		}
 	}
 }
diff --git a/test/unit/dns-server.test.js b/test/unit/dns-server.test.js
index 931f424..f2af1b7 100644
--- a/test/unit/dns-server.test.js
+++ b/test/unit/dns-server.test.js
@@ -44,7 +44,7 @@ test('create basic dataset', function (t) {
 		client: redis,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -61,7 +61,8 @@ test('create basic dataset', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo' }
 			}
 		]
 	});
@@ -77,7 +78,8 @@ test('create basic dataset', function (t) {
 		nics: [
 			{
 				ip: '8.7.6.5',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'bar' }
 			}
 		]
 	});
@@ -349,7 +351,7 @@ test('generate some services', function (t) {
 		client: redis,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -366,7 +368,8 @@ test('generate some services', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.5',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo' }
 			}
 		]
 	});
@@ -381,7 +384,8 @@ test('generate some services', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.6',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'bar' }
 			}
 		]
 	});
@@ -493,7 +497,7 @@ test('services with ports (SRV)', function (t) {
 		client: redis,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -510,7 +514,8 @@ test('services with ports (SRV)', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.5',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo' }
 			}
 		]
 	});
@@ -525,7 +530,8 @@ test('services with ports (SRV)', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.6',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'bar' }
 			}
 		]
 	});
diff --git a/test/unit/update-stream.test.js b/test/unit/update-stream.test.js
index f40ab75..8350d91 100644
--- a/test/unit/update-stream.test.js
+++ b/test/unit/update-stream.test.js
@@ -60,7 +60,7 @@ test('writes records for one container', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -72,13 +72,18 @@ test('writes records for one container', function (t) {
 		listInstance: true,
 		listServices: true,
 		reasons: [],
+		owner_uuid: 'def432',
 		owner: {
 			uuid: 'def432'
 		},
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: {
+					name: 'foo',
+					owner_uuids: ['def432']
+				}
 			}
 		]
 	});
@@ -139,7 +144,7 @@ test('deletes records for one container', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -151,13 +156,18 @@ test('deletes records for one container', function (t) {
 		listInstance: true,
 		listServices: true,
 		reasons: [],
+		owner_uuid: 'def432',
 		owner: {
 			uuid: 'def432'
 		},
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: {
+					name: 'foo',
+					owner_uuids: ['def432']
+				}
 			}
 		]
 	}, undefined, function () {
@@ -175,7 +185,11 @@ test('deletes records for one container', function (t) {
 				nics: [
 					{
 						ip: '1.2.3.4',
-						zones: ['foo']
+						zones: ['foo'],
+						network: {
+							name: 'foo',
+							owner_uuids: ['def432']
+						}
 					}
 				]
 			});
@@ -243,7 +257,7 @@ test('updates records upon a change of IP', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -255,13 +269,18 @@ test('updates records upon a change of IP', function (t) {
 		services: [],
 		listInstance: true,
 		listServices: true,
+		owner_uuid: 'def432',
 		owner: {
 			uuid: 'def432'
 		},
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: {
+					name: 'foo',
+					owner_uuids: ['def432']
+				}
 			}
 		]
 	}, undefined, function () {
@@ -272,13 +291,18 @@ test('updates records upon a change of IP', function (t) {
 				services: [],
 				listInstance: true,
 				listServices: true,
+				owner_uuid: 'def432',
 				owner: {
 					uuid: 'def432'
 				},
 				nics: [
 					{
 						ip: '1.2.3.5',
-						zones: ['foo']
+						zones: ['foo'],
+						network: {
+							name: 'foo',
+							owner_uuids: ['def432']
+						}
 					}
 				]
 			});
@@ -370,7 +394,7 @@ test('writes records for a service', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -388,7 +412,8 @@ test('writes records for a service', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo' }
 			}
 		]
 	});
@@ -403,7 +428,8 @@ test('writes records for a service', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.6',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo' }
 			}
 		]
 	});
@@ -455,7 +481,7 @@ test('service with zones with multiple nics', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['*'] }
 			},
 			reverse_zones: {}
 		}
@@ -472,11 +498,13 @@ test('service with zones with multiple nics', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo', owner_uuids: [] }
 			},
 			{
 				ip: '2.3.1.2',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'bar', owner_uuids: [] }
 			}
 		]
 	});
@@ -491,11 +519,13 @@ test('service with zones with multiple nics', function (t) {
 		nics: [
 			{
 				ip: '1.2.3.6',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo', owner_uuids: [] }
 			},
 			{
 				ip: '2.3.1.4',
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'bar', owner_uuids: [] }
 			}
 		]
 	});
@@ -546,7 +576,7 @@ test('container with ipv6 addresses', function (t) {
 		client: client,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -563,7 +593,8 @@ test('container with ipv6 addresses', function (t) {
 		nics: [
 			{
 				ips: ['1.2.3.4', 'abcd:f00::1'],
-				zones: ['foo']
+				zones: ['foo'],
+				network: { name: 'foo', owner_uuids: [] }
 			}
 		]
 	});
@@ -625,7 +656,7 @@ test('add, delete-add race against commit', function (t) {
 		log: log,
 		config: {
 			forward_zones: {
-				'foo': {}
+				'foo': { networks: ['aaaaaa'] }
 			},
 			reverse_zones: {}
 		}
@@ -646,7 +677,11 @@ test('add, delete-add race against commit', function (t) {
 					nics: [
 						{
 							ip: '1.2.3.4',
-							zones: ['foo']
+							zones: ['foo'],
+							network: {
+								name: 'foo',
+								owner_uuids: []
+							}
 						}
 					]
 				}, undefined, cb);
@@ -663,7 +698,11 @@ test('add, delete-add race against commit', function (t) {
 					nics: [
 						{
 							ip: '1.2.3.4',
-							zones: ['foo']
+							zones: ['foo'],
+							network: {
+								name: 'foo',
+								owner_uuids: []
+							}
 						}
 					]
 				}, undefined, cb);
@@ -692,7 +731,11 @@ test('add, delete-add race against commit', function (t) {
 					nics: [
 						{
 							ip: '1.2.3.4',
-							zones: ['foo']
+							zones: ['foo'],
+							network: {
+								name: 'foo',
+								owner_uuids: []
+							}
 						}
 					]
 				}, undefined, cb);
@@ -710,7 +753,11 @@ test('add, delete-add race against commit', function (t) {
 					nics: [
 						{
 							ip: '1.2.3.4',
-							zones: ['foo']
+							zones: ['foo'],
+							network: {
+								name: 'foo',
+								owner_uuids: []
+							}
 						}
 					]
 				}, undefined, function () {
diff --git a/test/unit/vm-to-zones.test.js b/test/unit/vm-to-zones.test.js
index 93ead05..6d99ec4 100644
--- a/test/unit/vm-to-zones.test.js
+++ b/test/unit/vm-to-zones.test.js
@@ -19,7 +19,7 @@ var log = bunyan.createLogger({name: 'cns'});
 test('basic single container', function (t) {
 	var config = {
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -34,7 +34,8 @@ test('basic single container', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -42,7 +43,7 @@ test('basic single container', function (t) {
 	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
 
 	t.deepEqual(Object.keys(zones['foo']), ['abc123.inst.def432',
-	    'abc123.cmon']);
+	    'default-fabric.abc123.inst.def432', 'abc123.cmon']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['abc123.inst.def432'];
@@ -65,7 +66,7 @@ test('basic single container', function (t) {
 test('cloudapi instance', function (t) {
 	var config = {
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -81,7 +82,8 @@ test('cloudapi instance', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -90,7 +92,8 @@ test('cloudapi instance', function (t) {
 
 	t.deepEqual(Object.keys(zones['foo']).sort(), [
 	    'abc123.cmon', 'abc123.inst.def432', 'cloudapi',
-	    'cloudapi.svc.def432']);
+	    'cloudapi.svc.def432', 'default-fabric.abc123.inst.def432',
+	    'default-fabric.cloudapi.svc.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['cloudapi'];
@@ -110,7 +113,7 @@ test('with use_alias', function (t) {
 	var config = {
 	    use_alias: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -126,7 +129,11 @@ test('with use_alias', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: {
+			name: 'SDC-Customer-Public-Pool-72.2.118.0/23',
+			owner_uuids: ['def432']
+		    }
 		}
 	    ]
 	};
@@ -134,7 +141,10 @@ test('with use_alias', function (t) {
 	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
-	    ['abc123.cmon', 'abc123.inst.def432', 'test.inst.def432']);
+	    ['abc123.cmon', 'abc123.inst.def432',
+	    'sdc-customer-public-pool-72-2-118-0-23.abc123.inst.def432',
+	    'sdc-customer-public-pool-72-2-118-0-23.test.inst.def432',
+	    'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['test.inst.def432'];
@@ -154,7 +164,7 @@ test('with use_login', function (t) {
 	var config = {
 	    use_login: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -171,7 +181,8 @@ test('with use_login', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['abc123'] }
 		}
 	    ]
 	};
@@ -200,7 +211,7 @@ test('with use_alias and use_login', function (t) {
 	    use_alias: true,
 	    use_login: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -217,7 +228,8 @@ test('with use_alias and use_login', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -226,7 +238,11 @@ test('with use_alias and use_login', function (t) {
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
 	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
-	    'test.inst.bar', 'test.inst.def432']);
+	    'default-fabric.abc123.inst.bar',
+	    'default-fabric.abc123.inst.def432',
+	    'default-fabric.test.inst.bar',
+	    'default-fabric.test.inst.def432', 'test.inst.bar',
+	    'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 
 	var fwd = zones['foo']['test.inst.bar'];
@@ -247,7 +263,7 @@ test('using a PTR name', function (t) {
 	    use_alias: true,
 	    use_login: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -265,7 +281,8 @@ test('using a PTR name', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -285,8 +302,8 @@ test('multi-zone', function (t) {
 	    use_alias: true,
 	    use_login: true,
 	    forward_zones: {
-		'foo': {},
-		'bar': {}
+		'foo': { networks: ['*'] },
+		'bar': { networks: ['aaaaaa'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -303,11 +320,13 @@ test('multi-zone', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		},
 		{
 		    ip: '3.2.1.4',
-		    zones: ['bar']
+		    zones: ['bar'],
+		    network: { name: 'external', owner_uuids: [] }
 		}
 	    ]
 	};
@@ -317,9 +336,13 @@ test('multi-zone', function (t) {
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
 	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
-	    'test.inst.bar', 'test.inst.def432']);
+	    'default-fabric.abc123.inst.bar',
+	    'default-fabric.abc123.inst.def432', 'default-fabric.test.inst.bar',
+	    'default-fabric.test.inst.def432', 'test.inst.bar',
+	    'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['bar']).sort(),
-	    Object.keys(zones['foo']).sort());
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
+	    'test.inst.bar', 'test.inst.def432']);
 
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 	t.deepEqual(Object.keys(zones['1.2.3.in-addr.arpa']), ['4']);
@@ -346,9 +369,9 @@ test('multi-zone, single PTRs', function (t) {
 	    use_alias: true,
 	    use_login: true,
 	    forward_zones: {
-		'foo': {},
-		'bar': {},
-		'baz': {}
+		'foo': { networks: ['*'] },
+		'bar': { networks: ['bbbbb'] },
+		'baz': { networks: ['aaaaa'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -365,11 +388,13 @@ test('multi-zone, single PTRs', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo', 'bar']
+		    zones: ['foo', 'bar'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		},
 		{
 		    ip: '3.2.1.4',
-		    zones: ['baz']
+		    zones: ['baz'],
+		    network: { name: 'external', owner_uuids: [] }
 		}
 	    ]
 	};
@@ -379,9 +404,13 @@ test('multi-zone, single PTRs', function (t) {
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
 	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
-	    'test.inst.bar', 'test.inst.def432']);
+	    'default-fabric.abc123.inst.bar',
+	    'default-fabric.abc123.inst.def432', 'default-fabric.test.inst.bar',
+	    'default-fabric.test.inst.def432', 'test.inst.bar',
+	    'test.inst.def432']);
 	t.deepEqual(Object.keys(zones['bar']).sort(),
-	    Object.keys(zones['foo']).sort());
+	    ['abc123.cmon', 'abc123.inst.bar', 'abc123.inst.def432',
+	    'test.inst.bar', 'test.inst.def432']);
 
 	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
 	t.deepEqual(Object.keys(zones['1.2.3.in-addr.arpa']), ['4']);
@@ -408,9 +437,9 @@ test('multi-zone, shortest zone priority PTR', function (t) {
 	    use_alias: true,
 	    use_login: true,
 	    forward_zones: {
-		'foobarbaz': {},
-		'foobar': {},
-		'baz': {}
+		'foobarbaz': { networks: ['*'] },
+		'foobar': { networks: ['aaaaaa'] },
+		'baz': { networks: ['bbbbbb'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -427,7 +456,8 @@ test('multi-zone, shortest zone priority PTR', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foobar', 'foobarbaz', 'baz']
+		    zones: ['foobar', 'foobarbaz', 'baz'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -445,7 +475,7 @@ test('service with srvs', function (t) {
 	var config = {
 	    use_alias: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['*'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -463,7 +493,8 @@ test('service with srvs', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -471,7 +502,10 @@ test('service with srvs', function (t) {
 	t.deepEqual(Object.keys(zones), ['foo', '3.2.1.in-addr.arpa']);
 
 	t.deepEqual(Object.keys(zones['foo']).sort(),
-	    ['abc123.cmon', 'abc123.inst.def432', 'svc1.svc.def432',
+	    ['abc123.cmon', 'abc123.inst.def432',
+	    'default-fabric.abc123.inst.def432',
+	    'default-fabric.svc1.svc.def432',
+	    'default-fabric.test.inst.def432', 'svc1.svc.def432',
 	    'test.inst.def432']);
 
 	var fwd = zones['foo']['test.inst.def432'];
@@ -497,7 +531,7 @@ test('acme challenge support', function (t) {
 	var config = {
 	    use_alias: true,
 	    forward_zones: {
-		'foo': {}
+		'foo': { networks: ['aaaaa'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -519,7 +553,8 @@ test('acme challenge support', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
@@ -557,8 +592,8 @@ test('acme challenge support', function (t) {
 test('cmon everywhere', function (t) {
 	var config = {
 	    forward_zones: {
-		'foo': {},
-		'bar': {}
+		'foo': { networks: ['bbbbbb'] },
+		'bar': { networks: ['aaaaaa'] }
 	    },
 	    reverse_zones: {}
 	};
@@ -573,7 +608,8 @@ test('cmon everywhere', function (t) {
 	    nics: [
 		{
 		    ip: '1.2.3.4',
-		    zones: ['foo']
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
 		}
 	    ]
 	};
diff --git a/updater.js b/updater.js
index 6ff0b6a..34e6d3e 100644
--- a/updater.js
+++ b/updater.js
@@ -19,6 +19,7 @@ var UfdsFilter = require('./lib/ufds-filter');
 var NetPoolFilter = require('./lib/net-pool-filter');
 var NetFilter = require('./lib/net-filter');
 var NAPILegacyFilter = require('./lib/napi-legacy-filter');
+var NetworkInfoFilter = require('./lib/network-info-filter');
 var PollerStream = require('./lib/poller-stream');
 var ReaperStream = require('./lib/reaper-stream');
 var createUfdsPool = require('./lib/ufds-pool');
@@ -72,6 +73,7 @@ var cff = new ChangefeedFilter(opts);
 var uf = new UfdsFilter(opts);
 var nlf = new NAPILegacyFilter(opts);
 var npf = new NetPoolFilter(opts);
+var nif = new NetworkInfoFilter(opts);
 var nf = new NetFilter(opts);
 var ffs = new FlagFilter(opts);
 var us = new UpdateStream(opts);
@@ -121,7 +123,8 @@ AppFSM.prototype.state_initial = function (S) {
 	uf.pipe(nlf);
 	nlf.pipe(npf);
 	npf.pipe(nf);
-	nf.pipe(ffs);
+	nf.pipe(nif);
+	nif.pipe(ffs);
 	ffs.pipe(us);
 	rs.pipe(cnf);
 
