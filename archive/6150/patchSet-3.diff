From c7e58b410bd89026e0a6cbe805d8e4e4284104ac Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Thu, 25 Apr 2019 16:55:28 -0700
Subject: [PATCH] TRITON-1407 Migration sync fails with a snapshot out of space
 error for bhyve zones

---
 lib/workflows/job-common.js          |  41 ++++-
 lib/workflows/migrate-abort.js       |   8 +-
 lib/workflows/migrate-begin.js       |  14 ++
 lib/workflows/migrate-switch.js      |  13 ++
 lib/workflows/migrate-sync.js        |  12 ++
 lib/workflows/vm-migration/abort.js  |   1 -
 lib/workflows/vm-migration/begin.js  | 191 ++++++++++++++++++++
 lib/workflows/vm-migration/common.js | 252 ++++++++++++++++++++++++---
 lib/workflows/vm-migration/pause.js  |   6 +
 package.json                         |   5 +-
 test/vms.migrate.test.js             |  27 ++-
 11 files changed, 520 insertions(+), 50 deletions(-)

diff --git a/lib/workflows/job-common.js b/lib/workflows/job-common.js
index 48a8e7f..c622b09 100644
--- a/lib/workflows/job-common.js
+++ b/lib/workflows/job-common.js
@@ -48,6 +48,17 @@ function clearSkipZoneAction(job, cb) {
     cb();
 }
 
+/*
+ * Clears the taskId and "skip_zone_action" flag on the job so that subsequent
+ * tasks in a given workflow do not mis-query or skip any action accidentally.
+ */
+function setupForWaitTask(job, cb) {
+    delete job.params.taskId;
+    delete job.params.skip_zone_action;
+
+    cb();
+}
+
 /*
  * General purpose function to call a CNAPI endpoint. endpoint and requestMethod
  * are required. This function will post the job params object as params for the
@@ -145,16 +156,21 @@ function waitTask(job, cb) {
             // Tasks that modify VM state should add a .vm to the task
             // with something like "self.finish({ vm: machine });"
             if (task.history && task.history.length > 0 &&
-                task.history[0].name === 'finish' &&
-                task.history[0].event &&
-                task.history[0].event.vm) {
+                    task.history[0].name === 'finish' &&
+                    task.history[0].event) {
 
-                job.finished_vm = task.history[0].event.vm;
-                job.log.debug({vm_uuid: job.finished_vm.uuid},
-                    'finish() returned VM');
-            }
-            if (job.store_task_result_in_attribute) {
-                job[job.store_task_result_in_attribute] = task;
+                var event = task.history[0].event;
+                if (event.vm) {
+                    job.finished_vm = event.vm;
+                    job.log.debug({vm_uuid: job.finished_vm.uuid},
+                        'finish() returned VM');
+                }
+
+                job.log.debug({event: event}, 'finish() returned event');
+
+                if (job.store_task_finish_event_in_attribute) {
+                    job[job.store_task_finish_event_in_attribute] = event;
+                }
             }
 
             cb(null, 'Job succeeded!');
@@ -1287,6 +1303,13 @@ module.exports = {
                 restify: 'restify'
             }
         },
+        setupForWaitTask: {
+            name: 'common.setupForWaitTask',
+            timeout: 60,
+            retry: 1,
+            body: setupForWaitTask,
+            modules: {}
+        },
         waitTask: {
             name: 'common.wait_task',
             timeout: 300,
diff --git a/lib/workflows/migrate-abort.js b/lib/workflows/migrate-abort.js
index 44579ab..3c80bd1 100644
--- a/lib/workflows/migrate-abort.js
+++ b/lib/workflows/migrate-abort.js
@@ -48,15 +48,21 @@ var workflow = module.exports = {
         migrationCommon.tasks.disallowRetry,
 
         /* Destroy the target vm. */
+        common.tasks.setupForWaitTask,
         abort.tasks.deleteTargetDniVm,
         common.tasks.waitTask,
 
         /* Destroy any leftover sync snapshots */
+        common.tasks.setupForWaitTask,
         modSwitch.tasks.removeSourceSnapshots,
         common.tasks.waitTask,
 
+        /* Set quotas back as they should be. */
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.restoreSourceZfsQuota,
+        common.tasks.waitTask,
+
         /* All done - record final details and store as successful */
-        // modSwitch.tasks.recordServerDetails,
         migrationCommon.tasks.storeSuccess,
 
         common.tasks.releaseVMTicket
diff --git a/lib/workflows/migrate-begin.js b/lib/workflows/migrate-begin.js
index 870116f..1c62db5 100644
--- a/lib/workflows/migrate-begin.js
+++ b/lib/workflows/migrate-begin.js
@@ -29,6 +29,11 @@ var workflow = module.exports = {
 
         migrationCommon.tasks.validate,
 
+        common.tasks.setupForWaitTask,
+        migrationBegin.tasks.getSourceFilesystemDetails,
+        common.tasks.waitTask,
+        migrationBegin.tasks.storeSourceFilesystemDetails,
+
         migrationBegin.tasks.createProvisionPayload,
 
         common.tasks.acquireAllocationTicket,
@@ -50,6 +55,15 @@ var workflow = module.exports = {
 
         migrationBegin.tasks.provisionVm,
 
+        common.tasks.setupForWaitTask,
+        migrationBegin.tasks.getTargetFilesystemDetails,
+        common.tasks.waitTask,
+        migrationBegin.tasks.storeTargetFilesystemDetails,
+
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.removeTargetZfsQuota,
+        common.tasks.waitTask,
+
         migrationCommon.tasks.storeSuccess,
 
         migrationBegin.tasks.startSyncWhenAutomatic
diff --git a/lib/workflows/migrate-switch.js b/lib/workflows/migrate-switch.js
index 1409856..be08525 100644
--- a/lib/workflows/migrate-switch.js
+++ b/lib/workflows/migrate-switch.js
@@ -54,15 +54,18 @@ var workflow = module.exports = {
         modSwitch.tasks.reserveNetworkIps,
         modSwitch.tasks.storeReservedNetworkIps,
 
+        common.tasks.setupForWaitTask,
         modSwitch.tasks.setupTargetFilesystem,
         common.tasks.waitTask,
 
+        common.tasks.setupForWaitTask,
         modSwitch.tasks.setTargetVmAutoboot,
         common.tasks.waitTask,
 
         // From this point on we cannot allow a retry of the switch.
         migrationCommon.tasks.disallowRetry,
 
+        common.tasks.setupForWaitTask,
         modSwitch.tasks.setSourceDoNotInventory,
         common.tasks.waitTask,
 
@@ -71,6 +74,7 @@ var workflow = module.exports = {
 
         modSwitch.tasks.updateVmServerUuid,
 
+        common.tasks.setupForWaitTask,
         modSwitch.tasks.removeTargetDoNotInventory,
         common.tasks.waitTask,
 
@@ -80,6 +84,15 @@ var workflow = module.exports = {
         modSwitch.tasks.removeTargetSnapshots,
         common.tasks.waitTask,
 
+        /* Set quotas back as they should be. */
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.restoreSourceZfsQuota,
+        common.tasks.waitTask,
+
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.restoreTargetZfsQuota,
+        common.tasks.waitTask,
+
         /* All done - record final details and store as successful */
         // modSwitch.tasks.recordServerDetails,
         migrationCommon.tasks.storeSuccess,
diff --git a/lib/workflows/migrate-sync.js b/lib/workflows/migrate-sync.js
index 1a0355a..c04b1c2 100644
--- a/lib/workflows/migrate-sync.js
+++ b/lib/workflows/migrate-sync.js
@@ -42,11 +42,17 @@ var workflow = module.exports = {
         /* Other vm actions are allowed now. */
         common.tasks.releaseVMTicket,
 
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.removeSourceZfsQuota,
+        common.tasks.waitTask,
+
         /* Start source migration listener process. */
+        common.tasks.setupForWaitTask,
         migrationCommon.tasks.setupCnapiSource,
         common.tasks.waitTask,
 
         /* Start target migration listener process. */
+        common.tasks.setupForWaitTask,
         migrationCommon.tasks.setupCnapiTarget,
         common.tasks.waitTask,
 
@@ -55,6 +61,10 @@ var workflow = module.exports = {
         /* Do the sync */
         migrationSync.tasks.sync,
 
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.restoreSourceZfsQuota,
+        common.tasks.waitTask,
+
         migrationCommon.tasks.storeSuccess,
 
         migrationSync.tasks.startSyncOrSwitchWhenAutomatic
@@ -63,6 +73,7 @@ var workflow = module.exports = {
     onerror: [
         cleanupSource,
         cleanupTarget,
+        migrationCommon.tasks.restoreSourceZfsQuota,
         migrationCommon.tasks.storeFailure,
         common.tasks.releaseVMTicketIgnoringErr
     ],
@@ -70,6 +81,7 @@ var workflow = module.exports = {
     oncancel: [
         cleanupSource,
         cleanupTarget,
+        migrationCommon.tasks.restoreSourceZfsQuota,
         migrationCommon.tasks.storeFailure,
         common.tasks.releaseVMTicketIgnoringErr
     ]
diff --git a/lib/workflows/vm-migration/abort.js b/lib/workflows/vm-migration/abort.js
index afc362c..6f1ebbf 100644
--- a/lib/workflows/vm-migration/abort.js
+++ b/lib/workflows/vm-migration/abort.js
@@ -27,7 +27,6 @@ function ensureTargetVmHasDni(job, cb) {
     var url = '/servers/' +
         record.target_server_uuid + '/vms/' +
         record.target_vm_uuid + '?include_dni=true';
-    job.store_task_result_in_attribute = 'targetVm';
 
     cnapi.get(url, function _cnapiGetTargetDniVmCb(err, req, res, vm) {
         if (err) {
diff --git a/lib/workflows/vm-migration/begin.js b/lib/workflows/vm-migration/begin.js
index bd8b0ea..dc9ecf1 100644
--- a/lib/workflows/vm-migration/begin.js
+++ b/lib/workflows/vm-migration/begin.js
@@ -9,10 +9,163 @@
  */
 
 
+var assert = require('assert-plus');
 var restify = require('restify');
 var sdcClients = require('sdc-clients');
 
 
+/**
+ * For BHYVE we may to tweak the quota on the root zfs dataset in order to be
+ * able to create snapshots. We check if we need to do that here.
+ */
+function getSourceFilesystemDetails(job, cb) {
+    var record = job.params.migrationTask.record;
+
+    assert.object(job.params.vm, 'job.params.vm');
+    assert.uuid(record.source_server_uuid, 'record.source_server_uuid');
+    assert.uuid(record.vm_uuid, 'record.vm_uuid');
+
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: { 'x-request-id': job.params['x-request-id'] }
+    });
+
+    var url = '/servers/' +
+        record.source_server_uuid + '/vms/' +
+        record.vm_uuid + '/migrate';
+    var payload = {
+        action: 'get-filesystem-details',
+        migrationTask: job.params.migrationTask,
+        vm: job.params.vm,
+        vm_uuid: record.vm_uuid
+    };
+
+    // Set where the result of the cnapi task will be stored.
+    job.store_task_finish_event_in_attribute = 'sourceFilesystemDetails';
+
+    cnapi.post(url, payload, function _getSourceFsCb(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'OK - task id: ' + task.id + ' queued to CNAPI!');
+    });
+}
+
+
+function getTargetFilesystemDetails(job, cb) {
+    var record = job.params.migrationTask.record;
+
+    assert.object(job.params.vm, 'job.params.vm');
+    assert.uuid(record.target_server_uuid, 'record.target_server_uuid');
+    assert.uuid(record.target_vm_uuid, 'record.target_vm_uuid');
+
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: { 'x-request-id': job.params['x-request-id'] }
+    });
+
+    var url = '/servers/' +
+        record.target_server_uuid + '/vms/' +
+        record.target_vm_uuid + '/migrate';
+    var payload = {
+        action: 'get-filesystem-details',
+        migrationTask: job.params.migrationTask,
+        vm: job.params.vm,
+        vm_uuid: record.target_vm_uuid
+    };
+
+    // Set where the result of the cnapi task will be stored.
+    job.store_task_finish_event_in_attribute = 'targetFilesystemDetails';
+
+    cnapi.post(url, payload, function _getTargetFsCb(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'OK - task id: ' + task.id + ' queued to CNAPI!');
+    });
+}
+
+
+function storeSourceFilesystemDetails(job, cb) {
+    var record = job.params.migrationTask.record;
+
+    assert.object(job.params.vm, 'job.params.vm');
+
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    if (!job.sourceFilesystemDetails) {
+        cb('Failed to retrieve BHYVE source filesystem details');
+        return;
+    }
+
+    record.sourceFilesystemDetails = job.sourceFilesystemDetails;
+
+    // Mark whether quota tweaking is necessary.
+    if (!parseInt(record.sourceFilesystemDetails.quotaStr, 10) ||
+            record.sourceFilesystemDetails.quotaStr !==
+                record.sourceFilesystemDetails.reservationStr) {
+        record.sourceFilesystemDetails.mustRemoveQuotaForSync = false;
+    } else {
+        record.sourceFilesystemDetails.mustRemoveQuotaForSync = true;
+    }
+
+    cb(null, 'OK - stored BHYVE filesystem details');
+}
+
+
+function storeTargetFilesystemDetails(job, cb) {
+    var record = job.params.migrationTask.record;
+
+    assert.object(job.params.vm, 'job.params.vm');
+
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    if (!job.targetFilesystemDetails) {
+        cb('Failed to retrieve BHYVE target filesystem details');
+        return;
+    }
+
+    record.targetFilesystemDetails = job.targetFilesystemDetails;
+
+    // Mark whether quota tweaking is necessary.
+    if (!parseInt(record.targetFilesystemDetails.quotaStr, 10) ||
+            record.targetFilesystemDetails.quotaStr !==
+                record.targetFilesystemDetails.reservationStr) {
+        record.targetFilesystemDetails.mustRemoveQuotaForSync = false;
+    } else {
+        record.targetFilesystemDetails.mustRemoveQuotaForSync = true;
+    }
+
+    cb(null, 'OK - stored BHYVE filesystem details');
+}
+
+
 function createProvisionPayload(job, cb) {
     var record = job.params.migrationTask.record;
 
@@ -331,6 +484,26 @@ module.exports = {
                 restify: 'restify'
             }
         },
+        getSourceFilesystemDetails: {
+            name: 'migration.begin.getSourceFilesystemDetails',
+            timeout: 300,
+            retry: 1,
+            body: getSourceFilesystemDetails,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
+        getTargetFilesystemDetails: {
+            name: 'migration.begin.getTargetFilesystemDetails',
+            timeout: 300,
+            retry: 1,
+            body: getTargetFilesystemDetails,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
         provisionVm: {
             name: 'migration.provisionVm',
             timeout: 900,
@@ -349,6 +522,24 @@ module.exports = {
             modules: {
                 restify: 'restify'
             }
+        },
+        storeSourceFilesystemDetails: {
+            name: 'migration.begin.storeSourceFilesystemDetails',
+            timeout: 60,
+            retry: 1,
+            body: storeSourceFilesystemDetails,
+            modules: {
+                assert: 'assert-plus'
+            }
+        },
+        storeTargetFilesystemDetails: {
+            name: 'migration.begin.storeTargetFilesystemDetails',
+            timeout: 60,
+            retry: 1,
+            body: storeTargetFilesystemDetails,
+            modules: {
+                assert: 'assert-plus'
+            }
         }
     }
 };
diff --git a/lib/workflows/vm-migration/common.js b/lib/workflows/vm-migration/common.js
index c8af75b..11ca62b 100644
--- a/lib/workflows/vm-migration/common.js
+++ b/lib/workflows/vm-migration/common.js
@@ -112,7 +112,7 @@ function setupCnapiSource(job, cb) {
     job.server_uuid = job.params['server_uuid'];
 
     // Used to keep the task result around.
-    job.store_task_result_in_attribute = 'source_cn_result';
+    job.store_task_finish_event_in_attribute = 'source_cn_result';
 
     // Not using sdc-clients to allow calling generic POST actions without
     // explicitly saying: startVm, stopVm, etc
@@ -135,6 +135,186 @@ function setupCnapiSource(job, cb) {
 }
 
 
+function removeSourceZfsQuota(job, cb) {
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var record = job.params.migrationTask.record;
+
+    assert.string(record.source_server_uuid, 'record.source_server_uuid');
+    assert.object(record.sourceFilesystemDetails,
+        'record.sourceFilesystemDetails');
+
+    if (!record.sourceFilesystemDetails.mustRemoveQuotaForSync) {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - do not need to remove quota');
+        return;
+    }
+
+    job.endpoint = '/servers/' +
+                   record.source_server_uuid + '/vms/' +
+                   record.vm_uuid + '/migrate';
+    job.action = 'migrate';
+    job.params.action = 'remove-zfs-quota';
+    job.params.skip_zone_action = false;
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: {'x-request-id': job.params['x-request-id']}
+    });
+
+    function callback(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'Migration task id: ' + task.id + ' queued to CNAPI!');
+    }
+
+    cnapi.post(job.endpoint, job.params, callback);
+}
+
+
+function removeTargetZfsQuota(job, cb) {
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var record = job.params.migrationTask.record;
+
+    assert.string(record.target_server_uuid, 'record.target_server_uuid');
+    assert.object(record.targetFilesystemDetails,
+        'record.targetFilesystemDetails');
+
+    if (!record.targetFilesystemDetails.mustRemoveQuotaForSync) {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - do not need to remove quota');
+        return;
+    }
+
+    job.endpoint = '/servers/' +
+                   record.target_server_uuid + '/vms/' +
+                   record.target_vm_uuid + '/migrate';
+    job.action = 'migrate';
+    job.params.action = 'remove-zfs-quota';
+    job.params.skip_zone_action = false;
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: {'x-request-id': job.params['x-request-id']}
+    });
+
+    function callback(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'Migration task id: ' + task.id + ' queued to CNAPI!');
+    }
+
+    cnapi.post(job.endpoint, job.params, callback);
+}
+
+
+function restoreSourceZfsQuota(job, cb) {
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var record = job.params.migrationTask.record;
+
+    assert.string(record.source_server_uuid, 'record.source_server_uuid');
+    assert.object(record.sourceFilesystemDetails,
+        'record.sourceFilesystemDetails');
+
+    if (!record.sourceFilesystemDetails.mustRemoveQuotaForSync) {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - do not need to restore quota');
+        return;
+    }
+
+    job.endpoint = '/servers/' +
+                   record.source_server_uuid + '/vms/' +
+                   record.vm_uuid + '/migrate';
+    job.action = 'migrate';
+    job.params.action = 'restore-zfs-quota';
+    job.params.skip_zone_action = false;
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: {'x-request-id': job.params['x-request-id']}
+    });
+
+    function callback(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'Migration task id: ' + task.id + ' queued to CNAPI!');
+    }
+
+    cnapi.post(job.endpoint, job.params, callback);
+}
+
+
+function restoreTargetZfsQuota(job, cb) {
+    if (job.params.vm.brand !== 'bhyve') {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - not necessary for ' + job.params.vm.brand + ' zone');
+        return;
+    }
+
+    var record = job.params.migrationTask.record;
+
+    assert.string(record.target_server_uuid, 'record.target_server_uuid');
+    assert.object(record.targetFilesystemDetails,
+        'record.targetFilesystemDetails');
+
+    if (!record.targetFilesystemDetails.mustRemoveQuotaForSync) {
+        job.params.skip_zone_action = true;
+        cb(null, 'OK - do not need to restore quota');
+        return;
+    }
+
+    job.endpoint = '/servers/' +
+                   record.target_server_uuid + '/vms/' +
+                   record.target_vm_uuid + '/migrate';
+    job.action = 'migrate';
+    job.params.action = 'restore-zfs-quota';
+    job.params.skip_zone_action = false;
+
+    var cnapi = restify.createJsonClient({
+        url: cnapiUrl,
+        headers: {'x-request-id': job.params['x-request-id']}
+    });
+
+    function callback(err, req, res, task) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        job.taskId = task.id;
+        cb(null, 'Migration task id: ' + task.id + ' queued to CNAPI!');
+    }
+
+    cnapi.post(job.endpoint, job.params, callback);
+}
+
+
 /*
  * Set up the cnapi receiver process on the target server.
  *
@@ -162,7 +342,7 @@ function setupCnapiTarget(job, cb) {
     job.params.action = 'receive';
 
     // Used to keep the task result around.
-    job.store_task_result_in_attribute = 'target_cn_result';
+    job.store_task_finish_event_in_attribute = 'target_cn_result';
 
     // Not using sdc-clients to allow calling generic POST actions without
     // explicitly saying: startVm, stopVm, etc
@@ -332,33 +512,22 @@ function storeProcessDetails(job, cb) {
     var record = job.params.migrationTask.record;
     var progressHistory = record.progress_history;
     var progressEntry = progressHistory[job.params.migrationTask.progressIdx];
-    var task_event;
 
     /* Store source CN process. */
-    if (job.source_cn_result && job.source_cn_result.history &&
-            job.source_cn_result.history.length > 0 &&
-            job.source_cn_result.history[0].name === 'finish' &&
-            job.source_cn_result.history[0].event) {
-
-        task_event = job.source_cn_result.history[0].event;
+    if (job.source_cn_result) {
         record.source_process_details = {
-            pid: task_event.pid,
-            host: task_event.host,
-            port: task_event.port
+            pid: job.source_cn_result.pid,
+            host: job.source_cn_result.host,
+            port: job.source_cn_result.port
         };
     }
 
     /* Store target CN process. */
-    if (job.target_cn_result && job.target_cn_result.history &&
-            job.target_cn_result.history.length > 0 &&
-            job.target_cn_result.history[0].name === 'finish' &&
-            job.target_cn_result.history[0].event) {
-
-        task_event = job.target_cn_result.history[0].event;
+    if (job.target_cn_result) {
         record.target_process_details = {
-            pid: task_event.pid,
-            host: task_event.host,
-            port: task_event.port
+            pid: job.target_cn_result.pid,
+            host: job.target_cn_result.host,
+            port: job.target_cn_result.port
         };
     }
 
@@ -384,7 +553,6 @@ function storeProcessDetails(job, cb) {
         }
 
         // TODO: Store ETag?
-        job.params.migrationTask.record = record;
 
         if (record.source_process_details.pid === -1) {
             job.log.error('No source CN PID, last task result: %j',
@@ -602,6 +770,46 @@ module.exports = {
             body: disallowRetry,
             modules: {}
         },
+        removeSourceZfsQuota: {
+            name: 'migration.removeSourceZfsQuota',
+            timeout: 300,
+            retry: 1,
+            body: removeSourceZfsQuota,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
+        removeTargetZfsQuota: {
+            name: 'migration.removeTargetZfsQuota',
+            timeout: 300,
+            retry: 1,
+            body: removeTargetZfsQuota,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
+        restoreSourceZfsQuota: {
+            name: 'migration.restoreSourceZfsQuota',
+            timeout: 300,
+            retry: 1,
+            body: restoreSourceZfsQuota,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
+        restoreTargetZfsQuota: {
+            name: 'migration.restoreTargetZfsQuota',
+            timeout: 300,
+            retry: 1,
+            body: restoreTargetZfsQuota,
+            modules: {
+                assert: 'assert-plus',
+                restify: 'restify'
+            }
+        },
         setupCnapiSource: {
             name: 'migration.setupCnapiSource',
             timeout: 300,
diff --git a/lib/workflows/vm-migration/pause.js b/lib/workflows/vm-migration/pause.js
index d888439..20aed77 100644
--- a/lib/workflows/vm-migration/pause.js
+++ b/lib/workflows/vm-migration/pause.js
@@ -68,6 +68,12 @@ function cancelSyncWorkflow(job, cb) {
 
     wfapi.post('/jobs/' + jobUuid + '/cancel', function (err, req, res) {
         if (err) {
+            if (err.message && err.message.indexOf(
+                    'Finished jobs cannot be canceled') !== -1) {
+                cb(null, 'OK - migration sync workflow job already finished');
+                return;
+            }
+
             job.log.error({err: err}, 'Unable to cancel migration sync job: ' +
                 err);
             cb(err);
diff --git a/package.json b/package.json
index 90e755b..6c30939 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.8.2",
+  "version": "9.8.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -37,8 +37,7 @@
   },
   "devDependencies": {
     "byline": "5.0.0",
-    "nodeunit": "0.11.3",
-    "tap": "*"
+    "nodeunit": "0.11.3"
   },
   "scripts": {
     "start": "node ./server.js"
diff --git a/test/vms.migrate.test.js b/test/vms.migrate.test.js
index 69ef28f..ed0884a 100644
--- a/test/vms.migrate.test.js
+++ b/test/vms.migrate.test.js
@@ -92,20 +92,19 @@ var configurations = [
             }
         }
     },
-    // BHYVE testing is disabled due to failing snapshot (out of space).
-    // {
-    //     type: 'bhyve',
-    //     imageName: 'ubuntu-certified-16.04',
-    //     packageName: 'sample-2G',
-    //     vm: {
-    //         alias: 'vmapitest-migrate-' + testUuid.generateShortUuid(),
-    //         brand: 'bhyve',
-    //         owner_uuid: ADMIN_USER_UUID,
-    //         tags: {
-    //             'triton.placement.exclude_virtual_servers': true
-    //         }
-    //     }
-    // },
+    {
+        type: 'bhyve',
+        imageName: 'ubuntu-certified-16.04',
+        packageName: 'sample-2G',
+        vm: {
+            alias: 'vmapitest-migrate-' + testUuid.generateShortUuid(),
+            brand: 'bhyve',
+            owner_uuid: ADMIN_USER_UUID,
+            tags: {
+                'triton.placement.exclude_virtual_servers': true
+            }
+        }
+    },
     {
         type: 'kvm',
         imageName: 'ubuntu-certified-16.04',
-- 
2.21.0

