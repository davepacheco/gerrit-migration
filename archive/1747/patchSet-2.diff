From e47fb47ea19bb42971eb60a3da6ec6ca3bf17615 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 4 Apr 2017 13:32:32 -0700
Subject: [PATCH] joyent/node-sshpk-agent#10 add support for rsa-sha2-256
 signatures

---
 lib/client.js         | 40 +++++++++++++++++++++-------------------
 lib/protocol.js       |  8 ++++++++
 package.json          |  4 ++--
 test/basic.test.js    | 34 +++++++++++++++++++++-------------
 test/key-mgmt.test.js | 12 ++++++------
 5 files changed, 58 insertions(+), 40 deletions(-)

diff --git a/lib/client.js b/lib/client.js
index 16e8f3d..dda77c7 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -125,7 +125,7 @@ Client.prototype.sign = function (key, data, opts, cb) {
 		type: 'sign-request',
 		publicKey: key.toBuffer('rfc4253'),
 		data: data,
-		flags: []
+		flags: ['rsa-sha2-256']
 	};
 	var resps = ['failure', 'sign-response'];
 
@@ -146,25 +146,27 @@ Client.prototype.sign = function (key, data, opts, cb) {
 			    key.type, 'ssh');
 
 			/* Emulate the openssh hash algorithm choice */
-			switch (key.type) {
-			case 'rsa':
-			case 'dsa':
-				sig.hashAlgorithm = 'sha1';
-				break;
-			case 'ecdsa':
-				if (key.size <= 256)
-					sig.hashAlgorithm = 'sha256';
-				else if (key.size <= 384)
-					sig.hashAlgorithm = 'sha384';
-				else
+			if (typeof (sig.hashAlgorithm) !== 'string') {
+				switch (key.type) {
+				case 'rsa':
+				case 'dsa':
+					sig.hashAlgorithm = 'sha1';
+					break;
+				case 'ecdsa':
+					if (key.size <= 256)
+						sig.hashAlgorithm = 'sha256';
+					else if (key.size <= 384)
+						sig.hashAlgorithm = 'sha384';
+					else
+						sig.hashAlgorithm = 'sha512';
+					break;
+				case 'ed25519':
 					sig.hashAlgorithm = 'sha512';
-				break;
-			case 'ed25519':
-				sig.hashAlgorithm = 'sha512';
-				break;
-			default:
-				/* what */
-				break;
+					break;
+				default:
+					/* what */
+					break;
+				}
 			}
 		} catch (e) {
 			var err2 = new AgentProtocolError(resp,
diff --git a/lib/protocol.js b/lib/protocol.js
index 57ab15f..4cf902d 100644
--- a/lib/protocol.js
+++ b/lib/protocol.js
@@ -66,6 +66,10 @@ var SignReqFlags = {
 		var x = 0x0;
 		if (v.indexOf('old-signature') !== -1)
 			x |= 0x01;
+		if (v.indexOf('rsa-sha2-256') !== -1)
+			x |= 0x02;
+		if (v.indexOf('rsa-sha2-512') !== -1)
+			x |= 0x04;
 		return (U32.encode(x, buf, offset));
 	},
 	decodeSize: U32.decodeSize,
@@ -74,6 +78,10 @@ var SignReqFlags = {
 		var v = [];
 		if ((r.value & 0x01) === 0x01)
 			v.push('old-signature');
+		if ((r.value & 0x02) === 0x02)
+			v.push('rsa-sha2-256');
+		if ((r.value & 0x04) === 0x04)
+			v.push('rsa-sha2-512');
 		r.value = v;
 		return (r);
 	}
diff --git a/package.json b/package.json
index 0a32425..eca42bc 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sshpk-agent",
-  "version": "1.4.2",
+  "version": "1.5.0",
   "description": "ssh-agent client for use with sshpk",
   "main": "lib/index.js",
   "scripts": {
@@ -29,7 +29,7 @@
     "assert-plus": "^1.0.0",
     "mooremachine": "^2.0.1",
     "readable-stream": "^2.1.4",
-    "sshpk": ">=1.9.1 < 1.11.0"
+    "sshpk": ">=1.13.0 < 1.14.0"
   },
   "devDependencies": {
     "tape": "^3.5.0",
diff --git a/test/basic.test.js b/test/basic.test.js
index a2d9e1e..84d4f9e 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -46,6 +46,12 @@ test('agent setup', function (t) {
 	});
 });
 
+var ver = Agent.getVersion();
+if (ver === undefined)
+	ver = [0, 0, 0];
+else
+	console.log('using OpenSSH version %d.%dp%d', ver[0], ver[1], ver[2]);
+
 test('Client takes path to socket in constructor', function (t) {
 	var c = new sshpkAgent.Client({
 		socketPath: agent.env['SSH_AUTH_SOCK']
@@ -221,9 +227,14 @@ test('Client can sign data with an rsa key', function (t) {
 			t.ok(sig);
 			t.ok(sig instanceof sshpk.Signature);
 
-			t.strictEqual(sig.hashAlgorithm, 'sha1');
+			t.notStrictEqual(sig.hashAlgorithm, undefined);
+			if (ver >= [7, 0, 1]) {
+				t.strictEqual(sig.hashAlgorithm, 'sha256');
+			} else {
+				t.strictEqual(sig.hashAlgorithm, 'sha1');
+			}
 
-			var v = key.createVerify('sha1');
+			var v = key.createVerify(sig.hashAlgorithm);
 			v.update('foobar');
 			t.ok(v.verify(sig));
 
@@ -246,9 +257,9 @@ test('Client can sign data with an ecdsa key', function (t) {
 			t.ok(sig);
 			t.ok(sig instanceof sshpk.Signature);
 
-			t.strictEqual(sig.hashAlgorithm, 'sha384');
+			t.notStrictEqual(sig.hashAlgorithm, undefined);
 
-			var v = key.createVerify('sha384');
+			var v = key.createVerify(sig.hashAlgorithm);
 			v.update('foobar');
 			t.ok(v.verify(sig));
 
@@ -258,11 +269,6 @@ test('Client can sign data with an ecdsa key', function (t) {
 });
 
 var usedEd = false;
-var ver = Agent.getVersion();
-if (ver === undefined)
-	ver = [0, 0, 0];
-else
-	console.log('using OpenSSH version %d.%dp%d', ver[0], ver[1], ver[2]);
 
 if (ver >= [6, 5, 1]) {
 	usedEd = true;
@@ -282,9 +288,11 @@ if (ver >= [6, 5, 1]) {
 					t.ok(sig);
 					t.ok(sig instanceof sshpk.Signature);
 
-					t.strictEqual(sig.hashAlgorithm, 'sha512');
+					t.notStrictEqual(sig.hashAlgorithm,
+					    undefined);
 
-					var v = key.createVerify('sha512');
+					var v = key.createVerify(
+					    sig.hashAlgorithm);
 					v.update('foobar');
 					t.ok(v.verify(sig));
 
@@ -314,9 +322,9 @@ test('Client can sign data with a dsa key', function (t) {
 				t.ok(sig);
 				t.ok(sig instanceof sshpk.Signature);
 
-				t.strictEqual(sig.hashAlgorithm, 'sha1');
+				t.notStrictEqual(sig.hashAlgorithm, undefined);
 
-				var v = key.createVerify('sha1');
+				var v = key.createVerify(sig.hashAlgorithm);
 				v.update('foobar');
 				t.ok(v.verify(sig));
 
diff --git a/test/key-mgmt.test.js b/test/key-mgmt.test.js
index 5f817e9..e9ef52b 100644
--- a/test/key-mgmt.test.js
+++ b/test/key-mgmt.test.js
@@ -125,6 +125,12 @@ test('Client can add an RSA certificate', function (t) {
 	});
 });
 
+var ver = Agent.getVersion();
+if (ver === undefined)
+	ver = [0, 0, 0];
+else
+	console.log('using OpenSSH version %d.%dp%d', ver[0], ver[1], ver[2]);
+
 test('Client can add an ECDSA certificate', function (t) {
 	var pem = fs.readFileSync(path.join(testDir, 'id_ecdsa'));
 	var pk = sshpk.parsePrivateKey(pem, 'pem', 'test/id_ecdsa');
@@ -152,12 +158,6 @@ test('Client can add an ECDSA certificate', function (t) {
 	});
 });
 
-var ver = Agent.getVersion();
-if (ver === undefined)
-	ver = [0, 0, 0];
-else
-	console.log('using OpenSSH version %d.%dp%d', ver[0], ver[1], ver[2]);
-
 if (ver >= [6, 5, 1]) {
 	test('Client can add an ED25519 certificate', function (t) {
 		var pem = fs.readFileSync(path.join(testDir, 'id_ed25519'));
-- 
2.21.0

