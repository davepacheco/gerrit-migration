From bd6536a3702756d0dad4c3307ac859936e7d1f51 Mon Sep 17 00:00:00 2001
From: Dylan Yep <dyep49@gmail.com>
Date: Tue, 6 Feb 2018 19:01:06 -0800
Subject: [PATCH] TRITON-63 Add metrics collection to VMAPI

---
 Makefile                                      |   2 +-
 docs/index.md                                 |  39 ++++-
 lib/metrics.js                                | 125 ++++++++++++++
 lib/vmapi.js                                  |   6 +
 package.json                                  |   1 +
 sapi_manifests/vmapi/template                 |   5 +
 server.js                                     |  24 +++
 .../vmapi-server-throwing-expected-stderr.txt |   2 +-
 .../vmapi-server-with-throwing-handler.js     |   9 +-
 test/metrics.test.js                          | 157 ++++++++++++++++++
 test/vms.data-migrations.test.js              |   7 +-
 ...index-moray-bucket-transient-error.test.js |   7 +-
 ...e-moray-bucket-non-transient-error.test.js |   7 +-
 ...e-moray-bucket-removes-index-fails.test.js |   7 +-
 ...pdate-moray-bucket-transient-error.test.js |   7 +-
 ...vms.update-moray-bucket-versioning.test.js |   7 +-
 16 files changed, 401 insertions(+), 11 deletions(-)
 create mode 100644 lib/metrics.js
 create mode 100644 test/metrics.test.js

diff --git a/Makefile b/Makefile
index a7c34a9..e8bbe11 100644
--- a/Makefile
+++ b/Makefile
@@ -118,7 +118,7 @@ publish: release
 COAL=root@10.99.99.7
 test-coal:
 	./tools/rsync-to coal
-	ssh $(COAL) "/zones/\$$(vmadm lookup -1 alias=vmapi0)/root/opt/smartdc/vmapi/test/runtests"
+	ssh $(COAL) "/opt/smartdc/bin/sdc-login -l vmapi "/opt/smartdc/vmapi/test/runtests""
 
 
 include ./tools/mk/Makefile.deps
diff --git a/docs/index.md b/docs/index.md
index db32891..a10a93b 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright (c) 2017, Joyent, Inc.
+    Copyright (c) 2018, Joyent, Inc.
 -->
 
 # Introduction to VMs API
@@ -433,6 +433,43 @@ The `dataMigrations` property is composed of two sub-properties:
    migration that completed successfully, they represent the latest error that
    occured when migration the data for the corresponding data model.
 
+# Metrics
+
+VMAPI exposes metrics via [node-artedi](https://github.com/joyent/node-artedi).
+For development, it is probably easiest to use `curl` to scrape metrics:
+
+```
+$ curl http://localhost:8881/metrics
+```
+The metrics are returned in Prometheus v0.0.4 text format.
+
+The following metrics are collected:
+
+- http_requests_completed
+- http_request_duration_seconds
+
+Each of the metrics returned include the following metadata labels:
+
+- datacenter (Datacenter name e.g. us-east-1)
+- service (Service name e.g. vmapi)
+- instance (Instance UUID)
+- server (Server UUID)
+- pid
+- method (e.g. 'PUT')
+- status_code (e.g. 200)
+- route (e.g. 'listvms')
+- user_agent
+
+The metric collection facility provided is intended to be consumed by a monitoring service like a Prometheus or InfluxDB server.
+
+Notably, some metadata labels are not being collected due to their potential
+for high cardinality. Metadata labels that have a large number of unique
+values cause memory strain on metric client processes (vmapi) as well as
+metric servers (Prometheus). It's important to understand what kind of an
+effect on the entire system the addition of metrics and metadata labels can have
+before adding them. This is an issue that would likely not appear in a
+development or staging environment.
+
 # VMs
 
 The Vms endpoint let us get information about VMs living on a SDC install; there is only one VMAPI instance per datacenter. VMAPI acts as an HTTP interface to VM data stored in Moray. VMAPI is used to obtain information about particular VMs, or when we need perform actions on them -- such as start, reboot, resize, etc.
diff --git a/lib/metrics.js b/lib/metrics.js
new file mode 100644
index 0000000..ea00617
--- /dev/null
+++ b/lib/metrics.js
@@ -0,0 +1,125 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+/*
+ * Artedi metrics.
+ */
+
+var artedi = require('artedi');
+var assert = require('assert-plus');
+var restify = require('restify');
+var VError = require('verror');
+
+function getMetricsHandler(collector) {
+    function getMetrics(req, res, next) {
+        /*
+         * Restify GET requests will keep socket open until entire request
+         * body is read. req.resume() is used to prevent connection leaks.
+         *
+         * More information at:
+         * https://jira.joyent.us/browse/MANTA-3338
+         * https://cr.joyent.us/#/c/2823/1/lib/other.js
+         */
+        req.on('end', function collectMetrics() {
+            collector.collect(artedi.FMT_PROM,
+                function sendMetrics(err, metrics) {
+                if (err) {
+                    next(new VError(err, 'error retrieving metrics'));
+                    return;
+                }
+                /* BEGIN JSSTYLED */
+                /*
+                 * Content-Type header is set to indicate the Prometheus
+                 * exposition format version
+                 *
+                 * More information at:
+                 * https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#format-version-004
+                 */
+                /* END JSSTYLED */
+                res.setHeader('Content-Type', 'text/plain; version=0.0.4');
+                res.send(metrics);
+                next();
+            });
+        });
+        req.resume();
+    }
+    var chain = [ getMetrics ];
+    return chain;
+}
+
+function Metrics(config) {
+    assert.object(config, 'config');
+    assert.object(config.log, 'config.log');
+    assert.object(config.labels, 'config.labels');
+    assert.string(config.address, 'config.address');
+    assert.number(config.port, 'config.port');
+
+    var collector = artedi.createCollector({ labels: config.labels });
+    this.collector = collector;
+
+    this.requestCounter = this.collector.counter({
+        name: 'http_requests_completed',
+        help: 'count of requests completed'
+    });
+
+    this.timeHistogram = this.collector.histogram({
+        name: 'http_request_duration_seconds',
+        help: 'total time to process requests'
+    });
+
+    this.address = config.address;
+    this.log = config.log;
+    this.port = config.port;
+    this.server = restify.createServer({ severName: 'Metrics' });
+    this.server.get('/metrics', getMetricsHandler(collector));
+}
+
+Metrics.prototype.listen = function startMetricsServer(callback) {
+    var self = this;
+
+    self.server.listen(self.port, self.address, function serverStarted() {
+        self.log.info('metrics server started on port %d', self.port);
+        callback();
+    });
+};
+
+Metrics.prototype.update = function updateMetrics(req, res, route, err) {
+
+    var routeName = route ? (route.name || route) : 'unknown';
+    var userAgent = req.userAgent();
+
+    // Only the first token is added to the label to prevent cardinality issues
+    var shortUserAgent = userAgent ? userAgent.split(' ')[0] : 'unknown';
+
+    var labels = {
+        route: routeName,
+        method: req.method,
+        user_agent: shortUserAgent,
+        status_code: res.statusCode
+    };
+
+    var latency = res.getHeader('X-Response-Time');
+    if (typeof (latency) !== 'number') {
+        latency = Date.now() - req._time;
+    }
+
+    var latencySeconds = latency / 1000;
+
+    this.requestCounter.increment(labels);
+    this.timeHistogram.observe(latencySeconds, labels);
+};
+
+function createMetricsManager(options) {
+    return new Metrics(options);
+}
+
+module.exports = {
+    createMetricsManager: createMetricsManager
+};
diff --git a/lib/vmapi.js b/lib/vmapi.js
index f2a6aa7..0435205 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -44,6 +44,7 @@ var API_SERVER_DEFAULT_PORT = 80;
  */
 function VmapiApp(options) {
     assert.object(options, 'options');
+    assert.object(options.metricsManager, 'options.metricsManager');
     assert.optionalObject(options.log, 'options.log');
 
     // Fabric options
@@ -119,6 +120,8 @@ function VmapiApp(options) {
         this.log = options.log;
     }
 
+    this.metricsManager = options.metricsManager;
+
     this.options = options;
 
     /*
@@ -168,6 +171,7 @@ VmapiApp.prototype._initApis = function _initApis(options) {
     assert.object(options, 'options');
 
     var apiVersion = options.version;
+    var metricsManager = options.metricsManager;
 
     var log = this.log;
     assert.object(log, 'log');
@@ -234,6 +238,8 @@ VmapiApp.prototype._initApis = function _initApis(options) {
         })(req, res, route, err);
     });
 
+    this.server.on('after', metricsManager.update.bind(metricsManager));
+
     // Init Server middleware
     this.setMiddleware();
     this.setStaticRoutes();
diff --git a/package.json b/package.json
index c644304..cdbd686 100644
--- a/package.json
+++ b/package.json
@@ -5,6 +5,7 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
+    "artedi": "^1.2.1",
     "assert-plus": "1.0.0",
     "async": "0.7.0",
     "backoff": "2.5.0",
diff --git a/sapi_manifests/vmapi/template b/sapi_manifests/vmapi/template
index e75210b..20bd8e5 100644
--- a/sapi_manifests/vmapi/template
+++ b/sapi_manifests/vmapi/template
@@ -4,6 +4,11 @@
     "useVmAgent": true,
     "ufdsAdminUuid": "{{{ufds_admin_uuid}}}",
     "reserveKvmStorage": "{{reserveKvmStorage}}",
+    "datacenterName": "{{datacenter_name}}",
+    "serviceName": "{{SERVICE_NAME}}",
+    "instanceUuid": "{{auto.ZONENAME}}",
+    "serverUuid": "{{auto.SERVER_UUID}}",
+    "adminIp": "{{auto.ADMIN_IP}}",
 {{#experimental_fluentd_host}}
     "fluentd_host": "{{{experimental_fluentd_host}}}",
 {{/experimental_fluentd_host}}
diff --git a/server.js b/server.js
index ca60ba5..bd2f756 100644
--- a/server.js
+++ b/server.js
@@ -38,6 +38,7 @@ var configLoader = require('./lib/config-loader');
 var DataMigrationsController = require('./lib/data-migrations/controller');
 var dataMigrationsLoader = require('./lib/data-migrations/loader');
 var morayInit = require('./lib/moray/moray-init.js');
+var createMetricsManager = require('./lib/metrics').createMetricsManager;
 
 var DATA_MIGRATIONS;
 var dataMigrationCtrl;
@@ -141,6 +142,7 @@ function startVmapiService() {
     var config = configLoader.loadConfig(configFilePath);
     var dataMigrations;
     var dataMigrationsCtrl;
+    var metricsManager;
     var vmapiLog = bunyan.createLogger({
         name: 'vmapi',
         level: config.logLevel,
@@ -256,6 +258,27 @@ function startVmapiService() {
              * API client's connection status appropriately and differently.
              */
             next();
+        },
+        function createMetricsCollector(_, next) {
+            var metricsLog = vmapiLog.child({component: 'metrics'});
+
+            var metricsConfig = {
+                address: config.adminIp,
+                log: metricsLog,
+                labels: {
+                    datacenter: config.datacenterName,
+                    instance: config.instanceUuid,
+                    pid: process.pid,
+                    server: config.serverUuid,
+                    service: config.serviceName
+                },
+                port: 8881
+            };
+
+            metricsManager = createMetricsManager(metricsConfig);
+            metricsManager.listen(function metricsServerStarted() {
+                next();
+            });
         }
     ]}, function dependenciesInitDone(err) {
         if (err) {
@@ -278,6 +301,7 @@ function startVmapiService() {
                 changefeedPublisher: changefeedPublisher,
                 dataMigrationsCtrl: dataMigrationsCtrl,
                 log: vmapiLog.child({ component: 'http-api' }, true),
+                metricsManager: metricsManager,
                 moray: moray,
                 morayBucketsInitializer: morayBucketsInitializer,
                 overlay: config.overlay,
diff --git a/test/fixtures/vmapi-server-throwing-expected-stderr.txt b/test/fixtures/vmapi-server-throwing-expected-stderr.txt
index 15bcc9a..79ea48e 100644
--- a/test/fixtures/vmapi-server-throwing-expected-stderr.txt
+++ b/test/fixtures/vmapi-server-throwing-expected-stderr.txt
@@ -3,4 +3,4 @@
     ^
 
 Error: boom
-    at Server.throwingRestifyHandler (/opt/smartdc/vmapi/test/fixtures/vmapi-server-with-throwing-handler.js:24:11)
\ No newline at end of file
+    at Server.throwingRestifyHandler (/opt/smartdc/vmapi/test/fixtures/vmapi-server-with-throwing-handler.js:24:11)
diff --git a/test/fixtures/vmapi-server-with-throwing-handler.js b/test/fixtures/vmapi-server-with-throwing-handler.js
index 8041192..eaa921c 100644
--- a/test/fixtures/vmapi-server-with-throwing-handler.js
+++ b/test/fixtures/vmapi-server-with-throwing-handler.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var libuuid = require('libuuid');
@@ -24,6 +24,10 @@ function throwingRestifyHandler(req, res, next) {
     throw new Error('boom');
 }
 
+var mockedMetricsManager = {
+    update: function () {}
+};
+
 var mockedWfapiClient = {
     connected: true,
     connect: function mockedWfapiConnect(callback) {
@@ -46,6 +50,7 @@ vasync.pipeline({funcs: [
             },
             changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
             dataMigrationsCtrl: new NoopDataMigrationsController(),
+            metricsManager: mockedMetricsManager,
             morayBucketsInitializer: {
                 status: function status() { return 'BUCKETS_REINDEX_DONE'; },
                 lastInitError: function lastInitError() { return null; }
@@ -89,4 +94,4 @@ vasync.pipeline({funcs: [
         vmapiClient.close();
         vmapiApp.close();
     });
-});
\ No newline at end of file
+});
diff --git a/test/metrics.test.js b/test/metrics.test.js
new file mode 100644
index 0000000..c66685b
--- /dev/null
+++ b/test/metrics.test.js
@@ -0,0 +1,157 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var restify = require('restify');
+var url = require('url');
+var vasync = require('vasync');
+
+var common = require('./common');
+
+var metricsClient;
+var vmapiClient;
+
+function createMetricsClient() {
+    var vmapiUrl = process.env.VMAPI_URL || 'http://localhost';
+    var parsedUrl = url.parse(vmapiUrl);
+    parsedUrl.port = 8881;
+    parsedUrl.host = null;
+
+    var metricsUrl = url.format(parsedUrl);
+    var client = restify.createStringClient({
+        connectTimeout: 250,
+        rejectUnauthorized: false,
+        retry: false,
+        url: metricsUrl
+    });
+
+    return client;
+}
+
+/*
+ * The metrics endpoint returns metrics in the Prometheus v0.0.4 format.
+ * This function takes the metrics response and a regular expression
+ * to match the metric line you want to match as input and returns the
+ * count of that metric.
+ */
+function getMetricCount(metricsRes, metricRegExp) {
+    var metricsLines = metricsRes.split('\n');
+    var metricLine = metricsLines.filter(function (line) {
+        return metricRegExp.test(line);
+    });
+    var count = parseInt(metricLine[0].split('} ')[1]);
+    return count;
+}
+
+function incrementListVmCount(_, callback) {
+    var endpoint = '/vms?limit=1';
+    vmapiClient.get(endpoint, callback);
+}
+
+function fetchMetricCount(metricRegExp, callback) {
+    metricsClient.get('/metrics', function getMetrics(err, req, res, data) {
+        var count = getMetricCount(data, metricRegExp);
+        callback(err, count);
+    });
+}
+
+exports.setUp = function (callback) {
+    common.setUp(function (err, _client) {
+        assert.ifError(err);
+        assert.ok(_client, 'restify client');
+        vmapiClient = _client;
+        metricsClient = createMetricsClient();
+        callback();
+    });
+};
+
+exports.metrics_handler = function (t) {
+    metricsClient.get('/metrics', function getMetrics(err, req, res, data) {
+        common.ifError(t, err);
+        t.ok(res, 'The response should exist');
+        t.equal(res.statusCode, 200, 'The status code should be 200');
+        t.ok(data, 'The data should exist');
+        t.done();
+    });
+};
+
+exports.metrics_counter = function (t) {
+    var listVmCount;
+    var updatedListVmCount;
+    var listVmRegExpString = 'http_requests_completed.*' +
+                             'route="listvms".*method="GET".*' +
+                             'status_code="200"';
+    var listVmRegExp = new RegExp(listVmRegExpString);
+
+    vasync.pipeline({
+        funcs: [
+            incrementListVmCount,
+            function getVmCount(ctx, next) {
+                fetchMetricCount(listVmRegExp, function (err, count) {
+                    common.ifError(t, err);
+                    listVmCount = count;
+                    next();
+                });
+            },
+            incrementListVmCount,
+            function getUpdatedVmCount(ctx, next) {
+                fetchMetricCount(listVmRegExp, function (err, count) {
+                    common.ifError(t, err);
+                    updatedListVmCount = count;
+                    next();
+                });
+            }
+        ]
+    }, function (err, results) {
+        common.ifError(t, err);
+        t.ok(listVmCount, 'listvm count');
+        t.ok(updatedListVmCount, 'updated listvm count');
+        t.ok(listVmCount < updatedListVmCount,
+                'listvm count should increase');
+        t.done();
+    });
+};
+
+exports.metrics_histogram_counter = function (t) {
+    var listVmDurationCount;
+    var updatedListVmDurationCount;
+    var listVmDurationRegExpString = 'http_request_duration_seconds.*' +
+                                     'le="\\+Inf".*route="listvms".*' +
+                                     'method="GET".*status_code="200"';
+    var listVmDurationRegExp = new RegExp(listVmDurationRegExpString);
+
+    vasync.pipeline({
+        funcs: [
+            incrementListVmCount,
+            function getListDurationCount(ctx, next) {
+                fetchMetricCount(listVmDurationRegExp, function (err, count) {
+                    common.ifError(t, err);
+                    listVmDurationCount = count;
+                    next();
+                });
+            },
+            incrementListVmCount,
+            function getUpdatedListDurationCount(ctx, next) {
+                fetchMetricCount(listVmDurationRegExp, function (err, count) {
+                    common.ifError(t, err);
+                    updatedListVmDurationCount = count;
+                    next();
+                });
+            }
+        ]
+    }, function (err, results) {
+        common.ifError(t, err);
+        t.ok(listVmDurationCount, 'listvm duration count');
+        t.ok(updatedListVmDurationCount, 'updated listvm duration count');
+        t.ok(listVmDurationCount < updatedListVmDurationCount,
+                'listvm duration count should increase');
+        t.done();
+    });
+};
diff --git a/test/vms.data-migrations.test.js b/test/vms.data-migrations.test.js
index 7737ffc..81715b1 100644
--- a/test/vms.data-migrations.test.js
+++ b/test/vms.data-migrations.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -28,6 +28,10 @@ var morayInit = require('../lib/moray/moray-init');
 var testMoray = require('./lib/moray.js');
 var VmapiApp = require('../lib/vmapi');
 
+var MOCKED_METRICS_MANAGER = {
+    update: function () {}
+};
+
 var MOCKED_WFAPI_CLIENT = {
     connected: true,
     connect: function mockedWfapiConnect(callback) {
@@ -264,6 +268,7 @@ exports.data_migrations = function (t) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: ctx.dataMigrationsCtrl,
+                metricsManager: MOCKED_METRICS_MANAGER,
                 morayBucketsInitializer: ctx.morayBucketsInitializer,
                 moray: ctx.moray
             });
diff --git a/test/vms.reindex-moray-bucket-transient-error.test.js b/test/vms.reindex-moray-bucket-transient-error.test.js
index f52316a..e13b6d5 100644
--- a/test/vms.reindex-moray-bucket-transient-error.test.js
+++ b/test/vms.reindex-moray-bucket-transient-error.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -70,6 +70,10 @@ exports.moray_init_transient_error = function (t) {
     var moray;
     var origMorayReindexBucket;
 
+    var mockedMetricsManager = {
+        update: function () {}
+    };
+
     var mockedWfapiClient = {
         connected: true,
         connect: function mockedWfapiConnect(callback) {
@@ -103,6 +107,7 @@ exports.moray_init_transient_error = function (t) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: new NoopDataMigrationsController(),
+                metricsManager: mockedMetricsManager,
                 morayBucketsInitializer: morayBucketsInitializer,
                 moray: moray
             });
diff --git a/test/vms.update-moray-bucket-non-transient-error.test.js b/test/vms.update-moray-bucket-non-transient-error.test.js
index 83b53d2..2733c3a 100644
--- a/test/vms.update-moray-bucket-non-transient-error.test.js
+++ b/test/vms.update-moray-bucket-non-transient-error.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -84,6 +84,10 @@ var morayBucketsConfigWithError = {
 };
 
 exports.moray_init_non_transient_error = function (t) {
+    var mockedMetricsManager = {
+        update: function () {}
+    };
+
     var mockedWfapiClient = {
         connected: true,
         connect: function mockedWfapiConnect(callback) {
@@ -134,6 +138,7 @@ exports.moray_init_non_transient_error = function (t) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: new NoopDataMigrationsController(),
+                metricsManager: mockedMetricsManager,
                 morayBucketsInitializer: morayBucketsInitializer,
                 moray: moray
             });
diff --git a/test/vms.update-moray-bucket-removes-index-fails.test.js b/test/vms.update-moray-bucket-removes-index-fails.test.js
index a7da666..5151654 100644
--- a/test/vms.update-moray-bucket-removes-index-fails.test.js
+++ b/test/vms.update-moray-bucket-removes-index-fails.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -84,6 +84,10 @@ exports.moray_init_invalid_index_removal = function (t) {
     var moray;
     var vmapiApp;
 
+    var mockedMetricsManager = {
+        update: function () {}
+    };
+
     var mockedWfapiClient = {
         connected: true,
         connect: function mockedWfapiConnect(callback) {
@@ -156,6 +160,7 @@ exports.moray_init_invalid_index_removal = function (t) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: new NoopDataMigrationsController(),
+                metricsManager: mockedMetricsManager,
                 morayBucketsInitializer: morayBucketsInitializer,
                 moray: moray
             });
diff --git a/test/vms.update-moray-bucket-transient-error.test.js b/test/vms.update-moray-bucket-transient-error.test.js
index e91ebb5..a72c70a 100644
--- a/test/vms.update-moray-bucket-transient-error.test.js
+++ b/test/vms.update-moray-bucket-transient-error.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -38,6 +38,10 @@ exports.moray_init_transient_error = function (t) {
     var moray;
     var origMorayClientGetBucket;
 
+    var mockedMetricsManager = {
+        update: function () {}
+    };
+
     var mockedWfapiClient = {
         connected: true,
         connect: function mockedWfapiConnect(callback) {
@@ -70,6 +74,7 @@ exports.moray_init_transient_error = function (t) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: new NoopDataMigrationsController(),
+                metricsManager: mockedMetricsManager,
                 morayBucketsInitializer: morayBucketsInitializer,
                 moray: moray
             });
diff --git a/test/vms.update-moray-bucket-versioning.test.js b/test/vms.update-moray-bucket-versioning.test.js
index 469ddda..ef3cad6 100644
--- a/test/vms.update-moray-bucket-versioning.test.js
+++ b/test/vms.update-moray-bucket-versioning.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -26,6 +26,10 @@ var NoopDataMigrationsController =
 var testMoray = require('./lib/moray.js');
 var VmapiApp = require('../lib/vmapi');
 
+var MOCKED_METRICS_MANAGER = {
+    update: function () {}
+};
+
 var MOCKED_WFAPI_CLIENT = {
     connected: true,
     connect: function mockedWfapiConnect(callback) {
@@ -324,6 +328,7 @@ function testMigrationToBucketsConfig(bucketsConfig, options, t, callback) {
                 },
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher(),
                 dataMigrationsCtrl: new NoopDataMigrationsController(),
+                metricsManager: MOCKED_METRICS_MANAGER,
                 morayBucketsInitializer: morayBucketsInitializer,
                 moray: storage
             });
-- 
2.21.0

