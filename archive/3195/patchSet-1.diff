commit 38ee1334cb16c384f038f9037f51327f4520b928 (refs/changes/95/3195/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-01-10T21:36:20-05:00 (1 year, 9 months ago)
    
    TRITON-42 node-triton should support nics when creating an instance

diff --git a/CHANGES.md b/CHANGES.md
index 03ec7dc..6f8a5ae 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -14,6 +14,8 @@ Known issues:
   `triton network ip update`
 - [TRITON-24] node-triton ListNetworkIPs has unordered results, e.g.
   `triton network ip list NETWORK`
+- [TRITON-42] node-triton should support nics when creating an instance, e.g.
+  `triton instance create --nic <Network Object> IMAGE PACKAGE`
 
 ## 5.5.0
 
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index ba43791..32b9eb4 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  *
  * Client library for the SmartDataCenter Cloud API (cloudapi).
  * http://apidocs.joyent.com/cloudapi/
@@ -154,6 +154,11 @@ function CloudApi(options) {
     this.client = new SaferJsonClient(options);
 }
 
+// <Network Object Key> -> <expected typeof>
+CloudApi.prototype.NETWORK_OBJECT_FIELDS = {
+    ipv4_uuid: 'string',
+    ipv4_ips: 'string'
+};
 
 CloudApi.prototype.close = function close(callback) {
     this.log.trace({host: this.client.url && this.client.url.host},
@@ -1123,7 +1128,7 @@ CloudApi.prototype.createMachine = function createMachine(options, callback) {
     assert.optionalString(options.name, 'options.name');
     assert.uuid(options.image, 'options.image');
     assert.uuid(options.package, 'options.package');
-    assert.optionalArrayOfUuid(options.networks, 'options.networks');
+    assert.optionalArray(options.networks, 'options.networks');
     // TODO: assert the other fields
     assert.func(callback, 'callback');
 
diff --git a/lib/common.js b/lib/common.js
index 1dfb7b0..3928b7e 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -24,7 +24,8 @@ var wordwrap = require('wordwrap');
 
 var errors = require('./errors'),
     InternalError = errors.InternalError;
-
+var NETWORK_OBJECT_FIELDS =
+    require('./cloudapi2').CloudApi.prototype.NETWORK_OBJECT_FIELDS;
 
 
 // ---- support stuff
@@ -1412,6 +1413,47 @@ function ipv4ToLong(ip) {
     return l;
 }
 
+/*
+ * Parse the input from the `--nics <nic>` CLI argument.
+ *
+ * @param s {String} The string passed as <nic> (comma separated key=value
+ *                   pairs) ex: 'ipv4_uuid=1234,ipv4_ips=1.2.3.4|5.6.7.8'
+ * @return {Object} A network object.  From the example above:
+ * {
+ *     "ipv4_uuid": 1234,
+ *     "ipv4_ips": [
+ *         "1.2.3.4",
+ *         "5.6.7.8"
+ *      ]
+ * }
+ * Note: "1234" is used as the UUID for this example, but would actually cause
+ * `parseNicsCLI` to throw as it is not a valid UUID.
+ */
+function parseNicsCLI(s) {
+    var nic = s.split(',');
+
+    var obj = objFromKeyValueArgs(nic, {
+        disableDotted: true,
+        typeHintFromKey: NETWORK_OBJECT_FIELDS,
+        validKeys: Object.keys(NETWORK_OBJECT_FIELDS)
+    });
+
+    if (!obj.ipv4_uuid) {
+        throw new errors.UsageError(
+            'ipv4_uuid must be specified in network object');
+    }
+
+    if (obj.ipv4_ips) {
+        obj.ipv4_ips = obj.ipv4_ips.split('|');
+    }
+
+    assert.uuid(obj.ipv4_uuid, 'obj.ipv4_uuid');
+    assert.optionalArrayOfString(obj.ipv4_ips, 'obj.ipv4_ips');
+
+    return obj;
+}
+
+
 //---- exports
 
 module.exports = {
@@ -1451,6 +1493,7 @@ module.exports = {
     monotonicTimeDiffMs: monotonicTimeDiffMs,
     readStdin: readStdin,
     validateObject: validateObject,
-    ipv4ToLong: ipv4ToLong
+    ipv4ToLong: ipv4ToLong,
+    parseNicsCLI: parseNicsCLI
 };
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/do_instance/do_create.js b/lib/do_instance/do_create.js
index 47b7e18..fec9c32 100644
--- a/lib/do_instance/do_create.js
+++ b/lib/do_instance/do_create.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  *
  * `triton instance create ...`
  */
@@ -19,6 +19,8 @@ var common = require('../common');
 var distractions = require('../distractions');
 var errors = require('../errors');
 var mat = require('../metadataandtags');
+var NETWORK_OBJECT_FIELDS =
+    require('../cloudapi2').CloudApi.prototype.NETWORK_OBJECT_FIELDS;
 
 function parseVolMount(volume) {
     var components;
@@ -83,6 +85,9 @@ function do_create(subcmd, opts, args, cb) {
         return;
     } else if (args.length !== 2) {
         return cb(new errors.UsageError('incorrect number of args'));
+    } else if (opts.nic && opts.network) {
+        return cb(new errors.UsageError(
+            '--network and --nic cannot be specified together'));
     }
 
     var log = this.top.log;
@@ -224,6 +229,38 @@ function do_create(subcmd, opts, args, cb) {
             next();
         },
 
+        /*
+         * Parse any nics given via `--nic`
+         */
+        function parseNics(ctx, next) {
+            if (!opts.nic) {
+                next();
+                return;
+            }
+
+            ctx.nics = [];
+            var nics = opts.nic;
+            var nic;
+            var i;
+
+            log.trace({nics: nics}, 'parsing nics');
+
+            for (i = 0; i < nics.length; i++) {
+                nic = nics[i];
+
+                try {
+                    ctx.nics.push(common.parseNicsCLI(nic));
+                } catch (err) {
+                    next(err);
+                    return;
+                }
+            }
+
+            log.trace({nics: ctx.nics}, 'parsed nics');
+
+            next();
+        },
+
         /*
          * Determine `ctx.locality` according to what CloudAPI supports
          * based on `ctx.affinities` parsed earlier.
@@ -371,11 +408,17 @@ function do_create(subcmd, opts, args, cb) {
             var createOpts = {
                 name: opts.name,
                 image: ctx.img.id,
-                'package': ctx.pkg && ctx.pkg.id,
-                networks: ctx.nets && ctx.nets.map(
-                    function (net) { return net.id; })
+                'package': ctx.pkg && ctx.pkg.id
             };
 
+            if (ctx.nets) {
+                createOpts.networks = ctx.nets.map(function (net) {
+                    return net.id;
+                });
+            } else if (ctx.nics) {
+                createOpts.networks = ctx.nics;
+            }
+
             if (ctx.volMounts) {
                 createOpts.volumes = ctx.volMounts;
             }
@@ -537,6 +580,15 @@ do_create.options = [
             'This option can be used multiple times.',
         completionType: 'tritonnetwork'
     },
+    {
+        names: ['nic'],
+        type: 'arrayOfString',
+        helpArg: 'NIC',
+        help: 'A network object containing comma separated key=value pairs ' +
+            '(Network object format). ' +
+            'This option can be used multiple times. Valid keys are: ' +
+            Object.keys(NETWORK_OBJECT_FIELDS).join(', ')
+    },
     {
         // TODO: add boolNegationPrefix:'no-' when that cmdln pull is in
         names: ['firewall'],
