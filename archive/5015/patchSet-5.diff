From c75f9dd1e12cedff8e1c560f58b5b45f94e327ba Mon Sep 17 00:00:00 2001
From: Isaac Davis <isaac.davis@joyent.com>
Date: Tue, 2 Apr 2019 18:24:46 +0000
Subject: [PATCH] MANTA-3552 create Triton Prometheus image

---
 .gitignore                        |   1 +
 CHANGES.md                        |   5 ++
 etc/defaults.json                 |   3 +-
 lib/post-setup/index.js           |   3 +-
 lib/post-setup/prometheus.js      | 139 ++++++++++++++++++++++++++++++
 lib/procedures/download-images.js |   1 +
 lib/procedures/index.js           |   3 +-
 lib/sdcadm.js                     |   4 +-
 package.json                      |   4 +-
 tools/rsync-to                    |   2 +
 10 files changed, 159 insertions(+), 6 deletions(-)
 create mode 100644 lib/post-setup/prometheus.js

diff --git a/.gitignore b/.gitignore
index fafe040..5eb89dc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,4 +8,5 @@
 /npm-debug.log
 /sdcadm-*.sh
 /tmp
+/etc/sdcadm.completion
 man/man1/sdcadm.1
diff --git a/CHANGES.md b/CHANGES.md
index e9fff40..31bd246 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 # sdcadm Changelog
 
+## 1.26.0
+
+- MANTA-3552 Add `sdcadm post-setup prometheus` to setup a core Triton
+  Prometheus service.
+
 ## 1.25.3
 
 - TRITON-1349 Subcommand `sdcadm post-setup kbmapi` using AddServiceProcedure
diff --git a/etc/defaults.json b/etc/defaults.json
index 94115e5..b9288fc 100644
--- a/etc/defaults.json
+++ b/etc/defaults.json
@@ -46,7 +46,8 @@
         "dockerlogger": "dockerlogger",
         "volapi": "volapi",
         "logarchiver": "logarchiver",
-        "kbmapi": "kbmapi"
+        "kbmapi": "kbmapi",
+        "prometheus": "prometheus"
     },
     "svcMinImages": {
         "binder": "20140731T211135Z",
diff --git a/lib/post-setup/index.js b/lib/post-setup/index.js
index 0c7d3cc..14c468c 100644
--- a/lib/post-setup/index.js
+++ b/lib/post-setup/index.js
@@ -27,7 +27,7 @@ function PostSetupCLI(top) {
         name: 'sdcadm post-setup',
         desc: 'Common post-setup procedures.\n' +
             '\n' +
-            'The default setup of a SmartDataCenter headnode is somewhat\n' +
+            'The default setup of a Triton Data Center headnode is somewhat\n' +
             'minimal. "Everything up to adminui." Practical usage of\n' +
             'SDC -- whether for production, development or testing --\n' +
             'involves a number of common post-setup steps. This command\n' +
@@ -78,6 +78,7 @@ PostSetupCLI.prototype.do_cns = require('./cns').do_cns;
 PostSetupCLI.prototype.do_volapi = require('./volapi').do_volapi;
 PostSetupCLI.prototype.do_logarchiver = require('./logarchiver').do_logarchiver;
 PostSetupCLI.prototype.do_kbmapi = require('./kbmapi').do_kbmapi;
+PostSetupCLI.prototype.do_prometheus = require('./prometheus').do_prometheus;
 
 // --- exports
 
diff --git a/lib/post-setup/prometheus.js b/lib/post-setup/prometheus.js
new file mode 100644
index 0000000..52efe70
--- /dev/null
+++ b/lib/post-setup/prometheus.js
@@ -0,0 +1,139 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * The 'sdcadm post-setup prometheus' CLI subcommand.
+ */
+
+var errors = require('../errors');
+var AddServiceProc = require('../procedures/add-service').AddServiceProcedure;
+var runProcs = require('../procedures').runProcs;
+
+function do_prometheus(subcmd, opts, args, cb) {
+    var self = this;
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length > 0) {
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
+    }
+
+    const svcName = 'prometheus';
+    const procOpts = {
+        svcName: svcName,
+        packageName: 'sdc_1024',
+        delegatedDataset: true,
+        networks: [
+            {name: 'admin'},
+            // Prometheus needs to be on the external to properly work with
+            // CMON's Triton service discovery and CNS -- at least until CNS
+            // support split horizon DNS to provide separate records on the
+            // admin network.
+            //
+            // Triton's Prometheus instances will therefore have a NIC on CMON's
+            // non-admin network. Currently by default that is the "external"
+            // network.
+            //
+            // A firewall will be setup on prometheus0 so that by default no
+            // inbound requests are allowed on that interface.
+            {name: 'external', primary: true}
+        ],
+        firewallEnabled: true
+    };
+
+    if (opts.image) {
+        procOpts.image = opts.image;
+    }
+
+    if (opts.channel) {
+        procOpts.channel = opts.channel;
+    }
+
+    if (opts.server) {
+        procOpts.server = opts.server;
+    }
+
+    const proc = new AddServiceProc(procOpts);
+
+    runProcs({
+        log: self.log,
+        procs: [proc],
+        sdcadm: self.sdcadm,
+        ui: self.ui,
+        dryRun: opts.dry_run,
+        skipConfirm: opts.yes
+    }, cb);
+}
+
+do_prometheus.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['yes', 'y'],
+        type: 'bool',
+        help: 'Answer yes to all confirmations.'
+    },
+    {
+        names: ['dry-run', 'n'],
+        type: 'bool',
+        help: 'Do a dry-run.'
+    },
+    {
+        names: ['server', 's'],
+        type: 'string',
+        help: 'Either hostname or uuid of the server on which to create' +
+            ' the instance. (By default the headnode will be used.)',
+        helpArg: 'SERVER'
+    },
+    {
+        group: 'Image selection (by default latest image on default ' +
+            'channel)'
+    },
+    {
+        names: ['image', 'i'],
+        type: 'string',
+        help: 'Specifies which image to use for the first instance. ' +
+            'Use "latest" (the default) for the latest available on ' +
+            'updates.joyent.com, "current" for the latest image already ' +
+            'in the datacenter (if any), or an image UUID or version.'
+    },
+    {
+        names: ['channel', 'C'],
+        type: 'string',
+        help: 'The updates.joyent.com channel from which to fetch the ' +
+            'image. See `sdcadm channel get` for the default channel.'
+    }
+
+];
+
+do_prometheus.help = [
+    'Create the "prometheus" service and a first instance.',
+    '',
+    'Usage:',
+    '     {{name}} prometheus',
+    '',
+    '{{options}}',
+    'The "prometheus" service monitors Triton components using the ' +
+    'Prometheus time-series database.'
+].join('\n');
+
+do_prometheus.logToFile = true;
+
+// --- exports
+
+module.exports = {
+    do_prometheus: do_prometheus
+};
+
+// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/procedures/download-images.js b/lib/procedures/download-images.js
index 86f6036..8ea658c 100644
--- a/lib/procedures/download-images.js
+++ b/lib/procedures/download-images.js
@@ -30,6 +30,7 @@ function DownloadImages(options) {
     assert.arrayOfObject(options.images, 'options.images');
     assert.optionalString(options.channel, 'options.channel');
     this.images = options.images;
+    this.channel = options.channel;
 }
 util.inherits(DownloadImages, Procedure);
 
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index b8fdaa3..397040c 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -204,7 +204,8 @@ function coordinatePlan(opts, cb) {
             var simpleServices = [
                 'amon', 'amonredis', 'assets', 'cnapi', 'cns', 'dhcpd',
                 'docker', 'fwapi', 'kbmapi', 'logarchiver', 'manta', 'napi',
-                'rabbitmq', 'redis', 'sdc', 'ufds', 'vmapi', 'volapi'
+                'prometheus', 'rabbitmq', 'redis', 'sdc', 'ufds', 'vmapi',
+                'volapi'
             ].concat(HA_READY_SIMPLE_SVCS);
             var handle = [];
             var remaining = [];
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 5f2ab19..555eaf3 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -3720,13 +3720,15 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
         vmapi: '/ping',
         volapi: '/ping',
         workflow: '/ping',
+        prometheus: '/-/healthy',
         // agents
         firewaller: '/status'
     };
 
     var pingPorts = {
         cloudapi: 443,
-        firewaller: 2021
+        firewaller: 2021,
+        prometheus: 9090
     };
 
     // We can ping instances either when we checked for svcs health using
diff --git a/package.json b/package.json
index 89206ca..22a20e4 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
-  "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.25.3",
+  "description": "Administer a Triton Data Center",
+  "version": "1.26.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/tools/rsync-to b/tools/rsync-to
index f89fb59..e80efe5 100755
--- a/tools/rsync-to
+++ b/tools/rsync-to
@@ -41,3 +41,5 @@ for name in $toSync; do
     fi
 done
 rsync -av ${TOP}/tools/rotate-logs.sh $NODE:$BASEDIR/tools/ $extraOpts
+
+ssh $NODE "$BASEDIR/bin/sdcadm completion > $BASEDIR/etc/sdcadm.completion"
\ No newline at end of file
-- 
2.21.0

