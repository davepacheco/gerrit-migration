From fd2d2a9d540866b615e6c342eb932bacffa1e01c Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@joyent.com>
Date: Mon, 31 Jul 2017 15:30:14 +0000
Subject: [PATCH] OS-6324 Need support for LSI 9305-24i

---
 .../common/io/scsi/adapters/mpt_sas/mptsas_impl.c   | 13 ++++++++++++-
 .../common/io/scsi/adapters/mpt_sas/mptsas_init.c   |  2 +-
 .../common/sys/scsi/adapters/mpt_sas/mptsas_var.h   |  6 ++----
 3 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_impl.c b/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_impl.c
index ddb6e169b6..85751a8ff3 100644
--- a/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_impl.c
+++ b/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_impl.c
@@ -1944,11 +1944,22 @@ mptsas_get_sas_io_unit_page_hndshk(mptsas_t *mpt)
 	uint32_t		readpage1 = 0, retrypage0 = 0;
 	uint16_t		iocstatus;
 	uint8_t			port_flags, page_number, action;
-	uint32_t		reply_size = 256; /* Big enough for any page */
+	uint32_t		reply_size;
 	uint_t			state;
 	int			rval = DDI_FAILURE;
 	boolean_t		free_recv = B_FALSE, free_page = B_FALSE;
 
+	/*
+	 * We want to find a reply_size that's large enough for the page0 and
+	 * page1 sizes and resistant to increase in the number of phys.
+	 */
+	reply_size = MAX(page0_size, page1_size);
+	if (P2ROUNDUP(reply_size, 256) <= reply_size) {
+		mptsas_log(mpt, CE_WARN, "mptsas_get_sas_io_unit_page_hndsk: "
+		    "cannot size reply size");
+		goto cleanup;
+	}
+
 	/*
 	 * Initialize our "state machine".  This is a bit convoluted,
 	 * but it keeps us from having to do the ddi allocations numerous
diff --git a/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_init.c b/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_init.c
index 380a0c10a6..e3e4774846 100644
--- a/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_init.c
+++ b/usr/src/uts/common/io/scsi/adapters/mpt_sas/mptsas_init.c
@@ -306,7 +306,7 @@ mptsas_ioc_do_get_facts_reply(mptsas_t *mpt, caddr_t memp, int var,
 	 * Set flag to check for SAS3 support.
 	 */
 	msgversion = ddi_get16(accessp, &factsreply->MsgVersion);
-	if (msgversion == MPI2_VERSION_02_05) {
+	if (msgversion >= MPI2_VERSION_02_05) {
 		mptsas_log(mpt, CE_NOTE, "?mpt_sas%d SAS 3 Supported\n",
 		    mpt->m_instance);
 		mpt->m_MPI25 = TRUE;
diff --git a/usr/src/uts/common/sys/scsi/adapters/mpt_sas/mptsas_var.h b/usr/src/uts/common/sys/scsi/adapters/mpt_sas/mptsas_var.h
index bd77c1b8fa..1b17ba2d95 100644
--- a/usr/src/uts/common/sys/scsi/adapters/mpt_sas/mptsas_var.h
+++ b/usr/src/uts/common/sys/scsi/adapters/mpt_sas/mptsas_var.h
@@ -79,15 +79,13 @@ extern "C" {
 
 #define	MPTSAS_INITIAL_SOFT_SPACE	4
 
-#define	MAX_MPI_PORTS		16
-
 /*
  * Note below macro definition and data type definition
  * are used for phy mask handling, it should be changed
  * simultaneously.
  */
-#define	MPTSAS_MAX_PHYS		16
-typedef uint16_t		mptsas_phymask_t;
+#define	MPTSAS_MAX_PHYS		24
+typedef uint32_t		mptsas_phymask_t;
 
 #define	MPTSAS_INVALID_DEVHDL	0xffff
 #define	MPTSAS_SATA_GUID	"sata-guid"
-- 
2.21.0

