From 5861c7b6fdf6d9f412fd1582fc287487799f3977 Mon Sep 17 00:00:00 2001
From: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date: Thu, 21 Feb 2019 11:26:15 +0100
Subject: [PATCH] OS-7607 savecore(1M) should be able to work on read-only dump
 devices

---
 usr/src/cmd/savecore/savecore.c | 29 ++++++++++++++++++++---------
 usr/src/man/man1m/savecore.1m   | 22 ++++++++++++++--------
 2 files changed, 34 insertions(+), 17 deletions(-)

diff --git a/usr/src/cmd/savecore/savecore.c b/usr/src/cmd/savecore/savecore.c
index e1d3589acc..eec75441fb 100644
--- a/usr/src/cmd/savecore/savecore.c
+++ b/usr/src/cmd/savecore/savecore.c
@@ -20,7 +20,7 @@
  */
 /*
  * Copyright (c) 1983, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 /*
  * Copyright 2016 Nexenta Systems, Inc. All rights reserved.
@@ -92,6 +92,7 @@ static dumpdatahdr_t datahdr;		/* compression info */
 static long	coreblksize;		/* preferred write size (st_blksize) */
 static int	cflag;			/* run as savecore -c */
 static int	mflag;			/* run as savecore -m */
+static int	rflag;			/* run as savecore -r */
 
 /*
  * Payload information for the events we raise.  These are used
@@ -355,7 +356,7 @@ read_number_from_file(const char *filename, long default_value)
 static void
 read_dumphdr(void)
 {
-	if (filemode)
+	if (filemode || rflag)
 		dumpfd = Open(dumpfile, O_RDONLY, 0644);
 	else
 		dumpfd = Open(dumpfile, O_RDWR | O_DSYNC, 0644);
@@ -408,7 +409,7 @@ read_dumphdr(void)
 		/*
 		 * Clear valid bit so we don't complain on every invocation.
 		 */
-		if (!filemode)
+		if (!filemode && !rflag)
 			Pwrite(dumpfd, &dumphdr, sizeof (dumphdr), endoff);
 		logprint(SC_SL_ERR | SC_EXIT_ERR,
 		    "initial dump header corrupt");
@@ -660,7 +661,7 @@ copy_crashfile(const char *corefile)
 	 * Write out the modified dump header to the dump device.
 	 * The dump device has been processed, so DF_VALID is clear.
 	 */
-	if (!filemode)
+	if (!filemode && !rflag)
 		Pwrite(dumpfd, &dumphdr, sizeof (dumphdr), endoff);
 
 	(void) close(corefd);
@@ -1422,7 +1423,7 @@ build_corefile(const char *namelist, const char *corefile)
 	 * Write out the modified dump headers.
 	 */
 	Pwrite(corefd, &corehdr, sizeof (corehdr), 0);
-	if (!filemode)
+	if (!filemode && !rflag)
 		Pwrite(dumpfd, &dumphdr, sizeof (dumphdr), endoff);
 
 	(void) close(corefd);
@@ -1454,7 +1455,10 @@ message_save(void)
 	int logfd;
 
 	logfd = Open("/dev/conslog", O_WRONLY, 0644);
-	dumpfd = Open(dumpfile, O_RDWR | O_DSYNC, 0644);
+	if (rflag)
+		dumpfd = Open(dumpfile, O_RDONLY, 0644);
+	else
+		dumpfd = Open(dumpfile, O_RDWR | O_DSYNC, 0644);
 	dumpoff = llseek(dumpfd, dumpoff, SEEK_END) & -DUMP_OFFSET;
 
 	ctl.buf = (void *)&lc;
@@ -1501,7 +1505,8 @@ message_save(void)
 			    strerror(errno));
 
 		ld.ld_magic = 0;	/* clear magic so we never save twice */
-		Pwrite(dumpfd, &ld, sizeof (log_dump_t), ldoff);
+		if (!rflag)
+			Pwrite(dumpfd, &ld, sizeof (log_dump_t), ldoff);
 	}
 	return (0);
 }
@@ -1531,7 +1536,10 @@ stack_retrieve(char *stack)
 	    DUMP_ERPTSIZE);
 	dumpoff -= DUMP_SUMMARYSIZE;
 
-	dumpfd = Open(dumpfile, O_RDWR | O_DSYNC, 0644);
+	if (rflag)
+		dumpfd = Open(dumpfile, O_RDONLY | O_DSYNC, 0644);
+	else
+		dumpfd = Open(dumpfile, O_RDWR | O_DSYNC, 0644);
 	dumpoff = llseek(dumpfd, dumpoff, SEEK_END) & -DUMP_OFFSET;
 
 	Pread(dumpfd, &sd, sizeof (summary_dump_t), dumpoff);
@@ -1668,7 +1676,7 @@ main(int argc, char *argv[])
 	if (savedir != NULL)
 		savedir = strdup(savedir);
 
-	while ((c = getopt(argc, argv, "Lvcdmf:")) != EOF) {
+	while ((c = getopt(argc, argv, "Lvcdmf:r")) != EOF) {
 		switch (c) {
 		case 'L':
 			livedump++;
@@ -1685,6 +1693,9 @@ main(int argc, char *argv[])
 		case 'm':
 			mflag++;
 			break;
+		case 'r':
+			rflag++;
+			break;
 		case 'f':
 			dumpfile = optarg;
 			filebounds = getbounds(dumpfile);
diff --git a/usr/src/man/man1m/savecore.1m b/usr/src/man/man1m/savecore.1m
index e88ffbf8bc..a8591c15f9 100644
--- a/usr/src/man/man1m/savecore.1m
+++ b/usr/src/man/man1m/savecore.1m
@@ -2,17 +2,17 @@
 .\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
 .\" Copyright (c) 1983 Regents of the University of California. All rights reserved. The Berkeley software License Agreement specifies the terms and conditions for redistribution.
 .\" Copyright 2013 Nexenta Systems, Inc.  All Rights Reserved.
-.TH SAVECORE 1M "Jan 30, 2013"
+.\" Copyright 2019 Joyent, Inc.
+.TH SAVECORE 1M "February 22, 2019"
 .SH NAME
 savecore \- save a crash dump of the operating system
 .SH SYNOPSIS
 .LP
 .nf
-\fB/usr/bin/savecore\fR [\fB-Lvd\fR] [\fB-f\fR \fIdumpfile\fR] [\fIdirectory\fR]
+\fB/usr/bin/savecore\fR [\fB-Lvdr\fR] [\fB-f\fR \fIdumpfile\fR] [\fIdirectory\fR]
 .fi
 
 .SH DESCRIPTION
-.sp
 .LP
 The \fBsavecore\fR utility saves a crash dump of the kernel (assuming that one
 was made) and writes a reboot message in the shutdown log. By default, it is
@@ -42,7 +42,6 @@ The \fBsavecore\fR utility also logs a reboot message using facility
 \fBLOG_AUTH\fR (see \fBsyslog\fR(3C)). If the system crashed as a result of a
 panic, \fBsavecore\fR logs the panic string too.
 .SH OPTIONS
-.sp
 .LP
 The following options are supported:
 .sp
@@ -87,6 +86,17 @@ continue to change while the dump is saved. This means that live crash dumps
 are not fully self-consistent.
 .RE
 
+.sp
+.ne 2
+.na
+\fB\fB-r\fR\fR
+.ad
+.RS 15n
+Open the dump device or file as read-only, and don't update the dump header
+or do anything else that might modify the crash dump. This option can be used
+to recover a crash dump from a read-only device.
+.RE
+
 .sp
 .ne 2
 .na
@@ -97,7 +107,6 @@ Verbose. Enables verbose error messages from \fBsavecore\fR.
 .RE
 
 .SH OPERANDS
-.sp
 .LP
 The following operands are supported:
 .sp
@@ -112,7 +121,6 @@ specified, \fBsavecore\fR saves the crash dump files to the default
 .RE
 
 .SH FILES
-.sp
 .ne 2
 .na
 \fB\fIdirectory\fR\fB/vmdump.\fR\fIn\fR\fR
@@ -167,12 +175,10 @@ default crash dump directory
 .RE
 
 .SH SEE ALSO
-.sp
 .LP
 \fBadb\fR(1), \fBmdb\fR(1), \fBsvcs\fR(1), \fBdd\fR(1M), \fBdumpadm\fR(1M),
 \fBsvcadm\fR(1M), \fBsyslog\fR(3C), \fBattributes\fR(5), \fBsmf\fR(5)
 .SH NOTES
-.sp
 .LP
 The system crash dump service is managed by the service management facility,
 \fBsmf\fR(5), under the service identifier:
-- 
2.21.0

