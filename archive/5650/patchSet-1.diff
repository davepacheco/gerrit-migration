commit 0ae203860ff5af8613d6b2b667b9ee2a73cf5898 (refs/changes/50/5650/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-02-27T14:49:25-05:00 (7 months ago)
    
    joyent/boray#4 add support for "listobjects"

diff --git a/src/main.rs b/src/main.rs
index 73e35a4..4342c62 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -56,6 +56,7 @@ fn msg_handler(msg: &FastMessage,
                 "getobject"    => object::get_handler(msg.id, &args, response, &pool, &log),
                 "putobject"    => object::put_handler(msg.id, &args, response, &pool, &log),
                 "deleteobject" => object::delete_handler(msg.id, &args, response, &pool, &log),
+                "listobjects"  => object::list_handler(msg.id, &args, response, &pool, &log),
                 "getbucket"    => bucket::get_handler(msg.id, &args, response, &pool, &log),
                 "putbucket"    => bucket::put_handler(msg.id, &args, response, &pool, &log),
                 "deletebucket" => bucket::delete_handler(msg.id, &args, response, &pool, &log),
diff --git a/src/object.rs b/src/object.rs
index f8e17ae..fafcf30 100644
--- a/src/object.rs
+++ b/src/object.rs
@@ -61,6 +61,13 @@ pub struct PutObjectPayload {
     properties     : Option<Value>
 }
 
+#[derive(Debug, Serialize, Deserialize)]
+pub struct ListObjectsPayload {
+    owner     : Uuid,
+    bucket_id : Uuid,
+    vnode     : u64
+}
+
 pub fn get_handler(msg_id: u32,
                       args: &Vec<Value>,
                       mut response: Vec<FastMessage>,
@@ -111,6 +118,59 @@ pub fn get_handler(msg_id: u32,
     }
 }
 
+pub fn list_handler(msg_id: u32,
+                    args: &Vec<Value>,
+                    mut response: Vec<FastMessage>,
+                    pool: &Pool<PostgresConnectionManager>,
+                    log: &Logger) -> Result<Vec<FastMessage>, IOError> {
+    debug!(log, "handling listobjects function request");
+
+    let arg0 = match &args[0] {
+        Value::Object(_) => &args[0],
+        _ => return Err(other_error("Expected JSON object"))
+    };
+
+    let data_clone = arg0.clone();
+    let payload_result: Result<ListObjectsPayload, _> =
+        serde_json::from_value(data_clone);
+
+    let payload = match payload_result {
+        Ok(o) => o,
+        Err(_) => return Err(other_error("Failed to parse JSON data as payload for listobjects function"))
+    };
+
+    // Make db request and form response
+    // TODO: make this call safe
+    let conn = pool.get().unwrap();
+    let txn = conn.transaction().unwrap();
+    let list_sql = list_sql(&payload.vnode);
+
+    for row in txn.query(&list_sql, &[&payload.owner, &payload.bucket_id]).unwrap().iter() {
+        let content_md5_bytes: Vec<u8> = row.get(7);
+        let content_md5 = base64::encode(&content_md5_bytes);
+        let resp = ObjectResponse {
+            id             : row.get(0),
+            owner          : row.get(1),
+            bucket_id      : row.get(2),
+            name           : row.get(3),
+            created        : row.get(4),
+            modified       : row.get(5),
+            content_length : row.get(6),
+            content_md5    : content_md5,
+            content_type   : row.get(8),
+            headers        : row.get(9),
+            sharks         : row.get(10),
+            properties     : row.get(11),
+        };
+
+        let value = array_wrap(serde_json::to_value(resp).unwrap());
+        let msg = FastMessage::data(msg_id, FastMessageData::new(String::from("listobjects"), value));
+        response.push(msg);
+    }
+
+    Ok(response)
+}
+
 pub fn put_handler(msg_id: u32,
                    args: &Vec<Value>,
                    mut response: Vec<FastMessage>,
@@ -239,6 +299,16 @@ fn get_sql(vnode: &u64) -> String {
        AND name = $3"].concat()
 }
 
+// TODO add limits to this
+fn list_sql(vnode: &u64) -> String {
+    ["SELECT id, owner, bucket_id, name, created, modified, content_length, \
+      content_md5, content_type, headers, sharks, properties \
+      FROM manta_bucket_",
+     &vnode.to_string(),
+     &".manta_bucket_object WHERE owner = $1 \
+       AND bucket_id = $2"].concat()
+}
+
 fn put(payload: PutObjectPayload, pool: &Pool<PostgresConnectionManager>)
        -> PostgresResult<Option<ObjectResponse>>
 {
