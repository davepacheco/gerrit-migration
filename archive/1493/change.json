{"project":"joyent/smartos-live","branch":"master","id":"Ie61526b1402328e9cf9edb8149a4982ae465166d","number":"1493","subject":"OS-3069 need fs watcher to watch zones\u0027 files","owner":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"url":"https://cr.joyent.us/1493","commitMessage":"OS-3069 need fs watcher to watch zones\u0027 files\n","createdOn":1486763212,"lastUpdated":1513703867,"open":false,"status":"ABANDONED","comments":[{"timestamp":1486763212,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 1."},{"timestamp":1486763215,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 1:\n\nNew commits:\n    \n    commit 6d780e21303d01743484272ff1a16f3eae847381\n    \n    initial fswatcher commit"},{"timestamp":1486763250,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 1: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1489420739,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 2: Patch Set 1 was rebased."},{"timestamp":1489420742,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 2:\n\nNew commits:\n    \n    commit 3e71b739f19340844a8fb0018f8b7d6651782799\n    \n    initial fswatcher commit"},{"timestamp":1489420778,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 2:\n\n\"make check\" passed ok"},{"timestamp":1489421995,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 3."},{"timestamp":1489421998,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 3:\n\nNew commits:\n    \n    commit 05ea0036242ad9e7629b2ae963ecdb1eb407413a\n    \n    fswatcher.c cleanup based on sysevent.c review\n    \n    commit 0f16d740127e37e8f8263ab4e759100731398b82\n    \n    emit delete when a final event is seen"},{"timestamp":1489422046,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 3: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1491591424,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(7 comments)\n\nAdded some initial comments about the interface. I haven\u0027t reviewed the implementation details yet."},{"timestamp":1491927082,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 3:\n\n(7 comments)"},{"timestamp":1491927850,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 4."},{"timestamp":1491927853,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 4:\n\nNew commits:\n    \n    commit 5366d98ac1aed38f9ed8b1706a7820b76d64a93b\n    \n    better docs based on Julien review"},{"timestamp":1491927889,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 4: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1491942756,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(4 comments)"},{"timestamp":1491943028,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 3:\n\n(1 comment)"},{"timestamp":1492099371,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 3:\n\n(2 comments)"},{"timestamp":1492099596,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 5."},{"timestamp":1492099599,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\nNew commits:\n    \n    commit 2539aa7df622711e8284bef6966218a38e8ea243\n    \n    doc fixes based on Julien review"},{"timestamp":1492099633,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 5: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1492820560,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 5:\n\n(7 comments)\n\nSome feedback in progress."},{"timestamp":1493058326,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 5:\n\n(19 comments)"},{"timestamp":1493150532,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\n(25 comments)"},{"timestamp":1493163297,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 5:\n\n(6 comments)"},{"timestamp":1493173192,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\n(4 comments)"},{"timestamp":1493234302,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 5:\n\n(18 comments)"},{"timestamp":1493244797,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\n(15 comments)"},{"timestamp":1493245315,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\n(2 comments)"},{"timestamp":1493308016,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 6."},{"timestamp":1493308020,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 6:\n\nNew commits:\n    \n    commit 9d6df29fde9cf42259410d2a1f76ab0633090ac7\n    \n    changes based on julien and pmooney review\n    \n    commit 71c0e524efafb2383cd4a6e622017d77bd8251a3\n    \n    half review based on julien"},{"timestamp":1493308056,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 6: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1493316583,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 6:\n\n(8 comments)"},{"timestamp":1493323937,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 6:\n\n(8 comments)"},{"timestamp":1493324052,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 7."},{"timestamp":1493324055,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 7:\n\nNew commits:\n    \n    commit 0d70e5d78a2c1f489162bd26eaf045232065e877\n    \n    nits based on julien review"},{"timestamp":1493324101,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 7: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1493400769,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 5:\n\n(5 comments)"},{"timestamp":1493417275,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 7:\n\n(7 comments)"},{"timestamp":1493670661,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 6:\n\n(4 comments)"},{"timestamp":1493670670,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 8."},{"timestamp":1493670674,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 8:\n\nNew commits:\n    \n    commit eff2f285c076bc5ddeef20fdb519e50f37c6c0ba\n    \n    changes based on julien review"},{"timestamp":1493670716,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 8: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1493671438,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 7:\n\n(7 comments)"},{"timestamp":1493671446,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 9."},{"timestamp":1493671450,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 9:\n\nNew commits:\n    \n    commit 3586bad4e619b9b479e578e6512827f5020841dc\n    \n    changes based on pmooney review"},{"timestamp":1493671485,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 9: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1493674585,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 9:\n\n(1 comment)"},{"timestamp":1493771480,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 9: Code-Review+1"},{"timestamp":1493834597,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 9: Code-Review+1"},{"timestamp":1493837758,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 10: Commit message was updated."},{"timestamp":1494001868,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 11."},{"timestamp":1494001871,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 11:\n\nNew commits:\n    \n    commit 1dbacc5855d27fe5583fec4fbeef102c62b6b3b2\n    \n    remove date from fswatcher.js"},{"timestamp":1494001907,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 11: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1494256713,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 11: Code-Review+1"},{"timestamp":1494265838,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Patch Set 11: Code-Review+1"},{"timestamp":1503593648,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 12."},{"timestamp":1503593652,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 12:\n\nNew commits:\n    \n    commit bd71e6d9a6f19bf00e1635ab871d7ef523d8c63f\n    \n    Merge branch \u0027master\u0027 into grr-OS-3069"},{"timestamp":1503593689,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 12: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1504218575,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 12: Code-Review+1\n\nMaybe squash and rebase this in prep for merging?\nIt\u0027ll make it easier to track changes down the line when rebasing on the tip of master."},{"timestamp":1504295155,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 12:\n\n\u003e Maybe squash and rebase this in prep for merging?\n \u003e It\u0027ll make it easier to track changes down the line when rebasing\n \u003e on the tip of master.\n\nI\u0027m holding off on OS-3069 (this), OS-5954 and OS-5956 until this https://cr.joyent.us/#/c/2398/ or something similar is merged... as they will all rely on it."},{"timestamp":1507153463,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 13."},{"timestamp":1507153467,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 13:\n\nNew commits:\n    \n    commit 0fddcb9fa41339449261b3c16d1fcbfd612c1566\n    \n    remove date from fswatcher.js\n    \n    commit fbb5aea5fa2c830894eb2d85fbdb9cc15b17db5b\n    \n    changes based on pmooney review\n    \n    commit 7f35b67b1a93e9e9b52c5c6a5121381b3638fc2e\n    \n    changes based on julien review\n    \n    commit 96b44ee146624eb2d4da341241eb6edcc64c83fb\n    \n    nits based on julien review\n    \n    commit 3f1fe8160a451c0b93cfddbe3397788689351596\n    \n    changes based on julien and pmooney review\n    \n    commit 7181a0f3f2fe19ee9cd390b979e2f02be689fd11\n    \n    half review based on julien\n    \n    commit 4db479b34df9571a74d542e7dafb2d05e7aa37c6\n    \n    doc fixes based on Julien review\n    \n    commit 69d07f3bd2fac926828b66437a0fcb52bd30cae4\n    \n    better docs based on Julien review\n    \n    commit 6003b1234ef9841ae10a8909d2e8b34dc816d808\n    \n    fswatcher.c cleanup based on sysevent.c review\n    \n    commit dce37bff53ea47d488aa9c6376fd118e372b5770\n    \n    emit delete when a final event is seen\n    \n    commit aa5edef3aaf5207af385e6d885090dfea0854ee7\n    \n    initial fswatcher commit"},{"timestamp":1507153509,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 13: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1507153653,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Uploaded patch set 14."},{"timestamp":1507153657,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 14:\n\nNew commits:\n    \n    commit 971f15a927f575b19bbd69ffeab4c4b07ef667bc\n    \n    add hrtime debugging"},{"timestamp":1507153696,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 14: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1513703867,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Abandoned\n\nin OS-2647"}],"currentPatchSet":{"number":"14","revision":"e61526b1402328e9cf9edb8149a4982ae465166d","parents":["85545cdfed4dc84ad7968b2c3a6f2017733899f2"],"ref":"refs/changes/93/1493/14","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1507153653,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507153696,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":927,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2474,"sizeDeletions":0},"patchSets":[{"number":"1","revision":"b3b65ad29e5288515e06355447a0e93457f12bb6","parents":["a6518ae5c88afd42324ce0c92a809adf798249ba"],"ref":"refs/changes/93/1493/1","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1486763212,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1486763250,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":982,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":769,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":511,"deletions":0}],"sizeInsertions":2271,"sizeDeletions":0},{"number":"2","revision":"d700ebee377a9fbf510323cef410fb3b1865e917","parents":["ac4d9b5056736bafbacdd0e6e2a3b03030c36b4a"],"ref":"refs/changes/93/1493/2","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1489420739,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"TRIVIAL_REBASE","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1486763250,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":982,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":769,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":511,"deletions":0}],"sizeInsertions":2271,"sizeDeletions":0},{"number":"3","revision":"e223aa696fbb315eca09a0e0e5bc4edc55a54ff9","parents":["ac4d9b5056736bafbacdd0e6e2a3b03030c36b4a"],"ref":"refs/changes/93/1493/3","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1489421995,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1489422046,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"src/fswatcher.c","line":44,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Does that mean one cannot watch a symlink, but just the source of it? Wouldn\u0027t that be a limitation?"},{"file":"src/fswatcher.c","line":44,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Correct, only the source of symlink can be watched by this program as-is.\n\nI could rework this comment to list it as a limitation."},{"file":"src/fswatcher.c","line":50,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Is the \"UNWATCH\" command *received* or *sent* by the user?"},{"file":"src/fswatcher.c","line":50,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"the UNWATCH command is *sent* by the user, but this paragraph is from the context of this C program, so it this program *receives* the UNWATCH command from the user."},{"file":"src/fswatcher.c","line":50,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Should \"by the user\" then be changed to \"from the user\"? It could me my non-native English that\u0027s failing me too."},{"file":"src/fswatcher.c","line":50,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I actually had to read this paragraph multiple times to understand what your comment was referring to.  However, rereading it now, I see that saying \"from the user\" would be clearer, as \"by the user\" only seems to work with the supporting context as \"by\" is really inferred as \"from\"."},{"file":"src/fswatcher.c","line":51,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"From the associated ticket:\n\n\u003e fs.watch doesn\u0027t work in node and if it did work the API doesn\u0027t allow for\n\u003e watching non-existent files (notifying when file is created)\n\nSo from that I thought that this watcher would allow to be notified when a file is created, potentially after it was deleted. Thus I do not understand why a file \"can no longer be watched\" after FILE_DELETE."},{"file":"src/fswatcher.c","line":51,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"The event ports system in the kernel is not able to watch a pathname that does not yet exist (which is what this C program uses).  The JavaScript module that wraps this C program however adds this functionality.\n\nAs such, this C program can\u0027t watch a file that doesn\u0027t exist, but the JavaScript library can, by periodically retrying the file watch."},{"file":"src/fswatcher.c","line":51,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good, thanks for clarifying!"},{"file":"src/fswatcher.c","line":70,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: it might help to order the description of properties the same way they are ordered in the sample data structure above."},{"file":"src/fswatcher.c","line":70,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":72,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"If deleted files are being rewatched, how can an event be final without an UNWATCH?"},{"file":"src/fswatcher.c","line":72,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"final only means this C program won\u0027t attempt to rewatch the file.  The higher level JavaScript library will see this \"final\" flag and know to queue a rewatch of the file."},{"file":"src/fswatcher.c","line":72,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good, thanks for the clarification!"},{"file":"src/fswatcher.c","line":82,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Nit: moving that info to come with the description of each field above might make it easier to understand."},{"file":"src/fswatcher.c","line":82,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":253,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"It might be worth it to include a bit more context around:\n\n\u003e the magic of number 33 (why it works better than many other constants, prime or not) has never been adequately explained."},{"file":"src/fswatcher.c","line":253,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I don\u0027t have any context around it... I just needed a simple hashing algorithm to make AVL tree lookups faster - I\u0027m open to suggestions for better documented or more performant simple hashing algorithms."},{"file":"src/fswatcher.c","line":253,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"What I mean is not that I think we should change the algorithm, but we should mention why we chose this algorithm. What are the tradeoffs that this algorithm makes that suit our use case.\n\nMy concern is that otherwise someone else will read that code and:\n\n1. will want to understand what it\u0027s doing\n\n2. will want to know whether it\u0027s safe/worth it with regards to our use case to make changes to it\n\nWithout knowing why we chose this algorithm, this is difficult to assess."},{"file":"src/fswatcher.c","line":253,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"For instance, a quick search on google shows links to http://stackoverflow.com/questions/1579721/why-are-5381-and-33-so-important-in-the-djb2-algorithm and http://stackoverflow.com/questions/1579721/why-are-5381-and-33-so-important-in-the-djb2-algorithm.\n\nWhile I would not consider them as authoritative on the subject, they hint at some characteristics of this algorithm that would be worth documenting in my opinion."},{"file":"src/fswatcher.c","line":253,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I\u0027ll document this function better in the next change."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1032,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":780,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":511,"deletions":0}],"sizeInsertions":2332,"sizeDeletions":0},{"number":"4","revision":"72042dc0b57bbc6dfcb78f7497bc0cfdc9dde0f9","parents":["6b833549a5739a30c623198e9029765e2b1fa3ff"],"ref":"refs/changes/93/1493/4","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1491927850,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1491927889,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1037,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":780,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":511,"deletions":0}],"sizeInsertions":2337,"sizeDeletions":0},{"number":"5","revision":"9a7f3c9c7693cd7a1f545d66cea95a894931a526","parents":["37fa0b13a2503039ea0e9ba785f1951785d941ad"],"ref":"refs/changes/93/1493/5","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1492099596,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1492099633,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"src/fswatcher.c","line":44,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Do we have an exhaustive list of what types of entries that fswatcher supports? If so it might help to mention them all here."},{"file":"src/fswatcher.c","line":44,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Any file that event ports supports can be watched by fswatcher.  So instead of documenting that here (as it could potentially change) I can add a note to look at port_associate(3C)"},{"file":"src/fswatcher.c","line":133,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"This doesn\u0027t appear to be used anywhere."},{"file":"src/fswatcher.c","line":133,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Interesting. Funny thing is, it looks like it was never used in the original fswatcher.c code when I took over this project (https://github.com/joyent/smartos-live/blob/OS-2647/src/fswatcher.c).\n\nI\u0027ll remove it, and let the JavaScript library handle wrapping the key used when it\u0027s some high number."},{"file":"src/fswatcher.c","line":225,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Maybe let the preprocessor concat the whole usage statement rather than making the repeating printf calls?  Your choice."},{"file":"src/fswatcher.c","line":225,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":340,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Make this a boolean_t?  Perhaps rename \u0027is_final\u0027?"},{"file":"src/fswatcher.c","line":340,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":378,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Something to consider for this logic:\n\nYou could restructure it into a const array of"},{"file":"src/fswatcher.c","line":378,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"This is a little awkward with the \u0027changes[]\u0027 sizing depending on the count of following checks.  I would either assert(i \u003c (sizeof (changes) / sizeof (changes[0]);\n\nor an array-iterated version like the example below could be considered:\n\nstruct flag_names {\n    int fn_flag;\n    const char *fn_name;\n};\n\nstruct flag_names flags[] \u003d {\n    { FILE_ACCESS, \"FILE_ACCESS\" },\n    ...\n};\n\nconst uint_t num_flags \u003d (sizeof (flags) / sizeof (flags[0]));\nconst char *changes[num_flags];\nuint_t count \u003d 0;\n\nfor (uint_t i; i \u003c num_flags; i++) {\n    if ((event \u0026 flags[i].fn_flag) !\u003d 0) {\n        changes[count++] \u003d flags[i].fn_name;\n    }\n}"},{"file":"src/fswatcher.c","line":378,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Hm, I see what you are saying and your example makes sense to me... I\u0027ll change it to that."},{"file":"src/fswatcher.c","line":415,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"use \u0027sizeof (message)\u0027 instead"},{"file":"src/fswatcher.c","line":415,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":443,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"\u0027sizeof (message)\u0027"},{"file":"src/fswatcher.c","line":443,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":467,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Change the below comments to /* */ style"},{"file":"src/fswatcher.c","line":467,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":472,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"This should be a ulong_t to match the sizing determined by avl_numnodes() below."},{"file":"src/fswatcher.c","line":472,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Good catch, I\u0027ll change the type of `numnodes` (line 469) above to match."},{"file":"src/fswatcher.c","line":575,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Switch to /* */ comments"},{"file":"src/fswatcher.c","line":575,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":578,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Maybe cope these inside the for-loop block"},{"file":"src/fswatcher.c","line":578,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Darn, this is actually carryover from switching between C and JavaScript so much.  Will change."},{"file":"src/fswatcher.c","line":665,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Like above switch to boolean_t?"},{"file":"src/fswatcher.c","line":665,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Will do, this is carryover from the older fswatcher.c."},{"file":"src/fswatcher.c","line":749,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Why reference \u0027final\u0027 at this point when it should always be false?"},{"file":"src/fswatcher.c","line":749,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":799,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Remove newline."},{"file":"src/fswatcher.c","line":799,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":849,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Capitalize"},{"file":"src/fswatcher.c","line":849,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":857,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Do you know if this notation is guaranteed to allocate adequate stack space based on the array type?"},{"file":"src/fswatcher.c","line":857,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"The goal here was to ensure that the character array was always null terminated.  I\u0027ll look through the implementation and figure out a better way to do this."},{"file":"src/fswatcher.c","line":865,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"There\u0027s a chance this could be done by the preprocessor rather than at runtime.  Alternatively, asprintf() could alleviate the need for all of the MAX_FMT_LEN stuff."},{"file":"src/fswatcher.c","line":865,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I\u0027ll look into asprintf()... this is carryover from the old version of fswatcher.c that I would be happy to remove."},{"file":"src/fswatcher.c","line":931,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"use \u0027sizeof (str)\u0027"},{"file":"src/fswatcher.c","line":931,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":71,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Thinking out loud: do we expect a lot of clients connecting to that service? I would think we\u0027d have just one for now that would be vminfod? If we expect to have a significant number of clients it might help to have timers with delays that have less chance to fire in sync."},{"file":"src/vm/node_modules/fswatcher.js","line":71,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I\u0027m not sure exactly what you mean by this.  There is no \"fswatcher\" service, instead the process is forked whenever a new JS instance of FsWatcher is created."},{"file":"src/vm/node_modules/fswatcher.js","line":71,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"By \"service\" I meant the process that is forked. However after reviewing the rest of the code it seems that there\u0027s one process per user of this module, so it shouldn\u0027t be a problem."},{"file":"src/vm/node_modules/fswatcher.js","line":71,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"ah ok.  sounds good."},{"file":"src/vm/node_modules/fswatcher.js","line":143,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Should we assert on \"opts\"\u0027 type? Same for \"opts.log\", \"opts.dedup\", and any property on \"opts\"."},{"file":"src/vm/node_modules/fswatcher.js","line":143,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":164,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Shouldn\u0027t FsWatcher call \"EventEmitter\"\u0027s constructor then?"},{"file":"src/vm/node_modules/fswatcher.js","line":164,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Good catch, I normally don\u0027t miss this."},{"file":"src/vm/node_modules/fswatcher.js","line":173,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Do we really want to get rid of an existing buffer if it exists already?"},{"file":"src/vm/node_modules/fswatcher.js","line":173,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I will rework the .stop() method to handle clearing this buffer after the process has exited"},{"file":"src/vm/node_modules/fswatcher.js","line":181,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Should we use a monotonic timer here instead of wall clock time?"},{"file":"src/vm/node_modules/fswatcher.js","line":181,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Is there a way for a monotonic timer to work when spanned across multiple processes? The datestamps for each event come from fswatcher.c"},{"file":"src/vm/node_modules/fswatcher.js","line":181,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"I think that the monotonic clock exposed by node via \"process.hrtime\" is system-wide, but I haven\u0027t verified that."},{"file":"src/vm/node_modules/fswatcher.js","line":181,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I just checked it out and it works across system wide! using clock_gettime with CLOCK_MONOTONIC I\u0027m able to get the same data from inside the C program.\n\nI\u0027ll rework the C program to add a \"time\" property with the current hrtime as an array (like process.hrtime)"},{"file":"src/vm/node_modules/fswatcher.js","line":195,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"What happens if a program that uses fswatcher exits without calling \"stop()\"? Would we leak FSWATCHER_CMD processes?"},{"file":"src/vm/node_modules/fswatcher.js","line":195,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I think node handles stopping any child processes without letting them become daemons if the parent dies.  I\u0027m fairly certain this is normal behavior - if not, there will need to be some reworking done."},{"file":"src/vm/node_modules/fswatcher.js","line":195,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Running the following:\n\n➜  ~ node\n\u003e var childProc \u003d child_process.spawn(\u0027/bin/bash\u0027, [\u0027-c\u0027, \u0027sleep 60\u0027]);\nundefined\n\u003e %                                                                                                                                                                                                         ➜  ~ ps auxwww | grep \u0027sleep 60\u0027 | grep -v grep\nJulienGilli      3282   0.0  0.0  2432764    500 s012  S     4:26PM   0:00.01 sleep 60\n➜  ~\n\nSeems to show that when exiting the node repl, the bash process that was created by child_process.spawn did not exit."},{"file":"src/vm/node_modules/fswatcher.js","line":195,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Ah, my mistake.  I for some reason thought node being torn down would cause signals to be sent to the child, but upon further thinking I realize that that could cause more harm than good.\n\nfswatcher.c however has logic to stop running when stdin can\u0027t be read anymore, so the parent process dying will result in the C program terminating as well."},{"file":"src/vm/node_modules/fswatcher.js","line":398,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"We should check \"kill\"\u0027s return value to make sure the signal was actually sent. We should also probably check wether the process exited or not before we can call start() again, otherwise we might have several fswatcher processes running at the same time."},{"file":"src/vm/node_modules/fswatcher.js","line":398,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"There is no documented return value for process.kill AFAICT https://nodejs.org/docs/latest-v0.10.x/api/process.html#process_process_kill_pid_signal\n\nI believe it will throw an error if it fails (if the pid is invalid).\n\nI\u0027ll rework this code to make .stop() take a cb, and the callback will fire when the process actually exits."},{"file":"src/vm/node_modules/fswatcher.js","line":398,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good!"},{"file":"src/vm/node_modules/fswatcher.js","line":463,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: use if (o \u003d\u003d\u003d undefined) {} instead of if (!o) {} if \"o\" is an object. It makes the code easier to read, because then we know what value we\u0027re actually looking for: undefined and no any other falsy value."},{"file":"src/vm/node_modules/fswatcher.js","line":463,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":465,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why would we set initial to false here? Is it possible that the watch could be cancelled while still in the \"initial retries\" phase?"},{"file":"src/vm/node_modules/fswatcher.js","line":465,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"\"initial\" has sort of changed meanings here as this code has evolved.  It\u0027s basically a simple substitute for a \"once\" function, to ensure the callback is only fired once.\n\nI\u0027ll rename this variable and hopefully make it clearer."},{"file":"src/vm/node_modules/fswatcher.js","line":485,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: name the callback function."},{"file":"src/vm/node_modules/fswatcher.js","line":485,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":492,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why is \"initial\" set to false? Isn\u0027t the watcher still in the \"initial\" phase until o.tries \u003e\u003d self.initial_watch_tries?"},{"file":"src/vm/node_modules/fswatcher.js","line":492,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"The fswatcher module will callback that the file is being watched before the watch actually succeeds.  This is because one of its \"features\" is to be able to watch a file before it exists."},{"file":"src/vm/node_modules/fswatcher.js","line":546,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: name that callback function.\n\nAlso, does sending the command always succeed? I would expect there would be errors to handle, and possibly a need to retry."},{"file":"src/vm/node_modules/fswatcher.js","line":546,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Now that I know child.stdin.write could fail, this signature will most likely change."},{"file":"src/vm/node_modules/fswatcher.js","line":548,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why is this assertion commented out?"},{"file":"src/vm/node_modules/fswatcher.js","line":548,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I\u0027ll have to test - I don\u0027t know why."},{"file":"src/vm/node_modules/fswatcher.js","line":593,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"What if the string\u0027s last character is not \\n (e.g a space), but the last non-whitespace character is a newline character?"},{"file":"src/vm/node_modules/fswatcher.js","line":593,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"That would be an issue, good catch.  I\u0027ll rework this code to ensure that only one newline is present, and that it is the last character of the string... as anything else is invalid."},{"file":"src/vm/node_modules/fswatcher.js","line":612,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Should we handle errors here?"},{"file":"src/vm/node_modules/fswatcher.js","line":612,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I actually wasn\u0027t aware that stdin.write could fail, but it makes sense.  I\u0027ll check into that... I don\u0027t know currently if errors are thrown or the return value is modified."},{"file":"src/vm/node_modules/fswatcher.js","line":626,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: assert on \"f\"\u0027s type?"},{"file":"src/vm/node_modules/fswatcher.js","line":626,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":650,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: assert on \"cb\"\u0027s type?"},{"file":"src/vm/node_modules/fswatcher.js","line":650,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":659,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: name that function.\n\nAlso, I usually avoid to use \"cb2\" as a callback function name, because it ends up being confusing since it doesn\u0027t convey the semantics of that function.\n\nFWIW, for a \"forEachPipeline\" function, I tend to name that function \"done\"."},{"file":"src/vm/node_modules/fswatcher.js","line":659,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I can go both ways on this.  There are instances in VM.js where we will have a \"parallel\" inside a \"series\", so having \"cb2\" and \"cb3\" helps in a way to keep track of how deep in the stack we actually are."},{"file":"src/vm/node_modules/fswatcher.js","line":659,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Sounds good."},{"file":"src/vm/node_modules/fswatcher.js","line":669,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: name that function."},{"file":"src/vm/node_modules/fswatcher.js","line":669,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":687,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Would using wall clock time present problems with regards to time drift?"},{"file":"src/vm/node_modules/fswatcher.js","line":687,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"WRT to my comments above, this is meant to mimic an alert that would have been seen from the fswatcher.c program, which uses wall timestamps.  If there is a way to reliably create a wall time independent clock that can span multiple processes this can be changed, but I\u0027m not sure what can be done for this parent-child relationship that exist currently."},{"file":"src/vm/node_modules/fswatcher.js","line":687,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"I think the monotonic clock exposed by process.hrtime is a system-wide clock, but I haven\u0027t verified that. It might be helpful to ask any of the OS folks."},{"file":"src/vm/node_modules/fswatcher.js","line":697,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: name that function."},{"file":"src/vm/node_modules/fswatcher.js","line":697,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":704,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why do we ignore errors? If that\u0027s correct to ignore errors, then we should document why, otherwise it looks like an oversight."},{"file":"src/vm/node_modules/fswatcher.js","line":704,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Good point, I\u0027ll have to look into this to remind myself why errors are ignored, or if this is an oversight.  If it\u0027s intentional I\u0027ll document it."},{"file":"src/vm/node_modules/fswatcher.js","line":711,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: assert on \"f\"\u0027s and \"cb\"\u0027s types."},{"file":"src/vm/node_modules/fswatcher.js","line":711,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":735,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"It might be helpful to assert on self.watching being an object. Same for not_yet_watching."},{"file":"src/vm/node_modules/fswatcher.js","line":735,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":745,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: assert on \"src\"\u0027s type?"},{"file":"src/vm/node_modules/fswatcher.js","line":745,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1045,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":780,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":511,"deletions":0}],"sizeInsertions":2345,"sizeDeletions":0},{"number":"6","revision":"bdd1452c599eafbe4f0f7eae501aaf33b4542d0a","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/6","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1493308016,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493308056,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"src/vm/node_modules/fswatcher.js","line":208,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Where is the \"date\" property used now?"},{"file":"src/vm/node_modules/fswatcher.js","line":208,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Ah, I left the date property as part of what is outputted by fswatcher.c (it outputs both a wall time and monotonic timer).  Would it make sense to have it only output the monotonic clock?"},{"file":"src/vm/node_modules/fswatcher.js","line":208,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"What is the wall time used for? Searching in this file, I couldn\u0027t find a place where it\u0027s used or where removing its usage would have an impact, but I may have missed something."},{"file":"src/vm/node_modules/fswatcher.js","line":208,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"It\u0027s not used for anything, but the consumer of this module could use it i suppose.  I\u0027ll remove though since we have the hrtime now."},{"file":"src/vm/node_modules/fswatcher.js","line":209,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why should this be set to [0, 0] instead of the return value of \"process.hrtime()\"?"},{"file":"src/vm/node_modules/fswatcher.js","line":209,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"This is sort of meant to be a `null` value (like how new Date() is given the argument 0).  This guarantees that this \"previous event\" won\u0027t match the first event that is seen by the fswatcher.c program."},{"file":"src/vm/node_modules/fswatcher.js","line":209,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"OK, would null be a better value for this then?"},{"file":"src/vm/node_modules/fswatcher.js","line":209,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I\u0027ll change the entire prev_event to null and check for that in the dedup logic"},{"file":"src/vm/node_modules/fswatcher.js","line":261,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Should we also handle \u0027error\u0027 events?"},{"file":"src/vm/node_modules/fswatcher.js","line":261,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Hm, that\u0027s a good question.  The only real errors that could possibly be problematic for us is if the executable failed to execute (for whatever reason).  What do you think would be the appropriate way to handle child process errors?\n\nShould the errors from the watcher be caught and re-emitted by this class?"},{"file":"src/vm/node_modules/fswatcher.js","line":261,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"If we don\u0027t handle error events, then the process that uses the fswatcher module will exit, because there would be no way for the user program to set a \u0027error\u0027 event listener on the self.watcher ChildProcess instance.\n\nIt seems that might not be desirable. Re-emitting error events emitted by the self.watcher ChildProcess instance as a \"We can\u0027t watch files\" seems like it would allow for the users of this module to restart the watcher if they wanted to, or deliberately not handle the error if they\u0027re OK with exiting in that case."},{"file":"src/vm/node_modules/fswatcher.js","line":261,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/vm/node_modules/fswatcher.js","line":314,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"nit: rename this to \"parseErr\"? \"_err\" feels a bit confusing compared to \"err\"."},{"file":"src/vm/node_modules/fswatcher.js","line":314,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Agreed.  I only did it since it clashed with `var err;` above. will rename."},{"file":"src/vm/node_modules/fswatcher.js","line":325,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Why not just compare obj.time[0] with self.prev_event.time[0] and obj.time[1] with self.prev_event.time[1]?"},{"file":"src/vm/node_modules/fswatcher.js","line":325,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Multiple events can sometimes be seen (typically as a result of fs.writeFileSync) when a file is modified that all happen within the same millisecond (sometimes microsecond). \n\nTechnically speaking, there are 2 distinct file event modifications that happened, but since they happen within the same millisecond, it\u0027s fine for our purposes (vminfod) to throw out subsequent events... that\u0027s why I convert the timers to milliseconds to compare them."},{"file":"src/vm/node_modules/fswatcher.js","line":325,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"OK, I had missed the \"Math.round\" part. Sounds good! Maybe a more explicit comment would help."},{"file":"src/vm/node_modules/fswatcher.js","line":325,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"There is a the comment for the definition of self.prev_event that explains the millisecond resolution i believe, is that sufficient?"},{"file":"src/vm/node_modules/fswatcher.js","line":570,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Is the date property still used?"},{"file":"src/vm/node_modules/fswatcher.js","line":570,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"See comment above re initializing the self.prev_event variable."},{"file":"src/vm/node_modules/fswatcher.js","line":690,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"What kind of errors are we looking to catch? Wouldn\u0027t failing to write to stdin not throw but instead call the \"self.watcher.stdin.write\"\u0027s callback with an error object instead of throwing an error?"},{"file":"src/vm/node_modules/fswatcher.js","line":690,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"In my testing, the error is thrown during a simple example where a write to stdin is done after the process has died.\n\n # /usr/node/bin/node\n \u003e process.version\n \u0027v0.10.26\u0027\n \u003e var c \u003d child_process.spawn(\u0027cat\u0027, [], {stdio: \u0027pipe\u0027})\n undefined\n \u003e c.stdin.write(\u0027hi\u0027)\n true\n \u003e c.kill()\n true\n \u003e c.stdin.write(\u0027hi\u0027)\n Error: This socket has been ended by the other party\n    at Socket.writeAfterFIN [as write] (net.js:278:12)\n    at repl:1:10\n    at REPLServer.self.eval (repl.js:110:21)\n    at Interface.\u003canonymous\u003e (repl.js:239:12)\n    at Interface.EventEmitter.emit (events.js:95:17)\n    at Interface._onLine (readline.js:202:10)\n    at Interface._line (readline.js:531:8)\n    at Interface._ttyWrite (readline.js:760:14)\n    at ReadStream.onkeypress (readline.js:99:10)\n    at ReadStream.EventEmitter.emit (events.js:98:17)"},{"file":"src/vm/node_modules/fswatcher.js","line":690,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"OK, so what happens in this case is that an error is emitted synchronously (and thus throws synchronously if there\u0027s no error event listener) _and_ the write\u0027s callback is called with the same error object as its first parameter.\n\nI think it\u0027s more idiomatic to register an error event handler, but the end result in this case is the same."},{"file":"src/vm/node_modules/fswatcher.js","line":898,"reviewer":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},"message":"Using \"Object.prototype.hasOwnProperty\" seems a bit cleaner than creating an instance every time this function is called."},{"file":"src/vm/node_modules/fswatcher.js","line":898,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1046,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":913,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2493,"sizeDeletions":0},{"number":"7","revision":"3409ae87942c1fe751995c4c2f289bf35ac2fc26","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/7","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1493324052,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493324101,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"src/fswatcher.c","line":39,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Could just state UINT64_MAX here"},{"file":"src/fswatcher.c","line":39,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":142,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"again, \u0027UINT64_MAX\u0027"},{"file":"src/fswatcher.c","line":142,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":273,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"If the preceding utility functions are \u0027static\u0027, why not this, and frankly, much of the remaining functions, save for \u0027main\u0027?"},{"file":"src/fswatcher.c","line":273,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"I think carelessness on my part is the answer to this question :(.  I\u0027ll make the changes."},{"file":"src/fswatcher.c","line":323,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"If you really want \u0027hrtime\u0027, see gethrtime(), which yields a scalar 64-bit value."},{"file":"src/fswatcher.c","line":323,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"In order for JavaScript to be able to handle this data properly it needs to be broken into seconds and nanoseconds.  Would gethrtime() be preferable to clock_gettime in this instance?"},{"file":"src/fswatcher.c","line":323,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Oh, right.  I overlooked the js number limitations.  Your use of clock_gettime() is fine here."},{"file":"src/fswatcher.c","line":560,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Is it ever the case that name is NULLed out on a handle?"},{"file":"src/fswatcher.c","line":560,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"It shouldn\u0027t be"},{"file":"src/fswatcher.c","line":572,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Why not inline the logic for free_handle() here.  This function appears to be the only consumer."},{"file":"src/fswatcher.c","line":572,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Done"},{"file":"src/fswatcher.c","line":606,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Is it expected that fswatcher will be under such signal load that stat(2) fails in such a manner?"},{"file":"src/fswatcher.c","line":606,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"No, this is carryover from https://github.com/joyent/smartos-live/blob/OS-2647/src/fswatcher.c#L446-L489"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1046,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":913,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2493,"sizeDeletions":0},{"number":"8","revision":"30416d1b6080ab19586b3fdb2d49f1f19773552b","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/8","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1493670670,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493670716,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1046,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":914,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2494,"sizeDeletions":0},{"number":"9","revision":"af1456bf7973fb05036b49171a76626079dbaa41","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/9","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1493671446,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493671485,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1493834597,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1493771480,"by":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":914,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2461,"sizeDeletions":0},{"number":"10","revision":"5a970fa3f428773880eb352c28dfec51f3820ebd","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/10","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1493837758,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1493671485,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1493834597,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1493771480,"by":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":914,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2461,"sizeDeletions":0},{"number":"11","revision":"1daba554f33c3db7dd21df3d2ffc9eca2e75412e","parents":["b7272e9a8d0bc947e9e85b9ebae9237a8024a55d"],"ref":"refs/changes/93/1493/11","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1494001868,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1494001907,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1494256713,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1494265838,"by":{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":911,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2458,"sizeDeletions":0},{"number":"12","revision":"757be0d57aeb9a4936235c1e074312ba021d2cfb","parents":["ed7577cb855337d9a93e66fa0eb73eb604fe8f04"],"ref":"refs/changes/93/1493/12","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1503593648,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1503593689,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1504218575,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":911,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2458,"sizeDeletions":0},{"number":"13","revision":"e80672dbf942a57cbcf251a9d3ade46db759a59e","parents":["85545cdfed4dc84ad7968b2c3a6f2017733899f2"],"ref":"refs/changes/93/1493/13","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1507153463,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507153509,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":8,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":911,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2458,"sizeDeletions":0},{"number":"14","revision":"e61526b1402328e9cf9edb8149a4982ae465166d","parents":["85545cdfed4dc84ad7968b2c3a6f2017733899f2"],"ref":"refs/changes/93/1493/14","uploader":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"createdOn":1507153653,"author":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507153696,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":".gitignore","type":"MODIFIED","insertions":1,"deletions":0},{"file":"src/Makefile","type":"MODIFIED","insertions":6,"deletions":0},{"file":"src/fswatcher.c","type":"ADDED","insertions":1013,"deletions":0},{"file":"src/manifest","type":"MODIFIED","insertions":2,"deletions":0},{"file":"src/vm/node_modules/fswatcher.js","type":"ADDED","insertions":927,"deletions":0},{"file":"src/vm/tests/test-fswatcher.js","type":"ADDED","insertions":525,"deletions":0}],"sizeInsertions":2474,"sizeDeletions":0}],"allReviewers":[{"name":"Joyent Automation","username":"joyent-automation"},{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},{"name":"Julien Gilli","email":"jgilli@netflix.com","username":"misterdjules"},{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"}]}