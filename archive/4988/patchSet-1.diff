From 54fcca0e7d9a12f7b9d1cbdf0d49b265f1d1879f Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Mon, 22 Oct 2018 00:53:14 +0000
Subject: [PATCH] OS-7318 hook_stack_notify_unregister can leave stack locked

---
 usr/src/uts/common/io/hook.c | 61 ++++++++++++++++++------------------
 1 file changed, 30 insertions(+), 31 deletions(-)

diff --git a/usr/src/uts/common/io/hook.c b/usr/src/uts/common/io/hook.c
index b32da5a369..4cfa8fced0 100644
--- a/usr/src/uts/common/io/hook.c
+++ b/usr/src/uts/common/io/hook.c
@@ -707,50 +707,49 @@ hook_stack_notify_unregister(netstackid_t stackid, hook_notify_fn_t callback)
 {
 	hook_family_int_t *hfi;
 	hook_stack_t *hks;
-	boolean_t canrun;
+	boolean_t canrun = B_FALSE;
 	char buffer[16];
 	void *arg;
 	int error;
 
 	mutex_enter(&hook_stack_lock);
 	hks = hook_stack_get(stackid);
-	if (hks != NULL) {
-		CVW_ENTER_WRITE(&hks->hks_lock);
-		canrun = (hook_wait_setflag(&hks->hks_waiter, FWF_ADD_WAIT_MASK,
-		    FWF_ADD_WANTED, FWF_ADD_ACTIVE) != -1);
-
-		error = hook_notify_unregister(&hks->hks_nhead, callback, &arg);
-		CVW_EXIT_WRITE(&hks->hks_lock);
-	} else {
-		error = ESRCH;
+	if (hks == NULL) {
+		mutex_exit(&hook_stack_lock);
+		return (ESRCH);
 	}
+
+	CVW_ENTER_WRITE(&hks->hks_lock);
+	canrun = (hook_wait_setflag(&hks->hks_waiter, FWF_DEL_WAIT_MASK,
+	    FWF_DEL_WANTED, FWF_DEL_ACTIVE) != -1);
+
+	error = hook_notify_unregister(&hks->hks_nhead, callback, &arg);
+	CVW_EXIT_WRITE(&hks->hks_lock);
 	mutex_exit(&hook_stack_lock);
 
-	if (error == 0) {
-		if (canrun) {
-			/*
-			 * Generate fake unregister event for callback that
-			 * is being removed, letting it know everything that
-			 * currently exists is now "disappearing."
-			 */
-			(void) snprintf(buffer, sizeof (buffer), "%u",
-			    hks->hks_netstackid);
-
-			SLIST_FOREACH(hfi, &hks->hks_familylist, hfi_entry) {
-				callback(HN_UNREGISTER, arg, buffer, NULL,
-				    hfi->hfi_family.hf_name);
-			}
+	if (error == 0 && canrun) {
+		/*
+		 * Generate fake unregister event for callback that
+		 * is being removed, letting it know everything that
+		 * currently exists is now "disappearing."
+		 */
+		(void) snprintf(buffer, sizeof (buffer), "%u",
+		    hks->hks_netstackid);
 
-			hook_wait_unsetflag(&hks->hks_waiter, FWF_ADD_ACTIVE);
+		SLIST_FOREACH(hfi, &hks->hks_familylist, hfi_entry) {
+			callback(HN_UNREGISTER, arg, buffer, NULL,
+			    hfi->hfi_family.hf_name);
 		}
-
-		mutex_enter(&hook_stack_lock);
-		hks = hook_stack_get(stackid);
-		if ((error == 0) && (hks->hks_shutdown == 2))
-			hook_stack_remove(hks);
-		mutex_exit(&hook_stack_lock);
 	}
 
+	mutex_enter(&hook_stack_lock);
+	if (canrun)
+		hook_wait_unsetflag(&hks->hks_waiter, FWF_DEL_ACTIVE);
+
+	if ((error == 0) && (hks->hks_shutdown == 2))
+		hook_stack_remove(hks);
+	mutex_exit(&hook_stack_lock);
+
 	return (error);
 }
 
-- 
2.21.0

