From c68ede0f6c858c23375f02e1291d4ad6fd541853 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Thu, 27 Dec 2018 02:21:28 -0500
Subject: [PATCH] OS-7439 vmadm coredumps when attempting to unset certain zone
 properties Reviewed by: Jorge Schrauwen <sjorge@blackdot.be>

---
 src/vm/node_modules/VM.js   | 81 ++++++++++++++++++++++++-------------
 src/vm/tests/test-update.js | 44 ++++++++++++++++++++
 2 files changed, 96 insertions(+), 29 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 6c0efe71..a9f863ee 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -6549,6 +6549,33 @@ function buildZonecfgUpdate(vmobj, payload, log)
     var tmp;
     var zcfg = '';
 
+    /*
+     * Map vmobj property name to zonecfg property name with optional value
+     * formatting function.
+     */
+    var propertyMap = {
+        cpu_shares: {prop: 'cpu-shares'},
+        limit_priv: {
+            prop: 'limitpriv',
+            format: function formatLimitpriv(s) {
+                return sprintf('"%s"', s);
+            }
+        },
+        max_lwps: {prop: 'max-lwps'},
+        max_msg_ids: {prop: 'max-msg-ids'},
+        max_sem_ids: {prop: 'max-sem-ids'},
+        max_shm_ids: {prop: 'max-shm-ids'},
+        max_shm_memory: {
+            prop: 'max-shm-memory',
+            format: function formatMaxShmMemory(s) {
+                assert.number(s, 's');
+
+                return (s * 1024 * 1024).toString();
+            }
+        },
+        zfs_io_priority: {prop: 'zfs-io-priority'}
+    };
+
     assert(log, 'no logger passed to buildZonecfgUpdate()');
 
     log.debug({vmobj: vmobj, payload: payload},
@@ -6561,35 +6588,31 @@ function buildZonecfgUpdate(vmobj, payload, log)
     }
 
     // Global properties can just be set, no need to clear anything first.
-    if (payload.hasOwnProperty('cpu_shares')) {
-        zcfg = zcfg + 'set cpu-shares=' + payload.cpu_shares.toString() + '\n';
-    }
-    if (payload.hasOwnProperty('limit_priv')) {
-        zcfg = zcfg + 'set limitpriv="' + payload.limit_priv + '"\n';
-    }
-    if (payload.hasOwnProperty('max_lwps')) {
-        zcfg = zcfg + 'set max-lwps=' + payload.max_lwps.toString() + '\n';
-    }
-    if (payload.hasOwnProperty('max_msg_ids')) {
-        zcfg = zcfg + 'set max-msg-ids=' + payload.max_msg_ids.toString()
-            + '\n';
-    }
-    if (payload.hasOwnProperty('max_sem_ids')) {
-        zcfg = zcfg + 'set max-sem-ids=' + payload.max_sem_ids.toString()
-            + '\n';
-    }
-    if (payload.hasOwnProperty('max_shm_ids')) {
-        zcfg = zcfg + 'set max-shm-ids=' + payload.max_shm_ids.toString()
-            + '\n';
-    }
-    if (payload.hasOwnProperty('max_shm_memory')) {
-        zcfg = zcfg + 'set max-shm-memory='
-            + (payload.max_shm_memory * 1024 * 1024).toString() + '\n';
-    }
-    if (payload.hasOwnProperty('zfs_io_priority')) {
-        zcfg = zcfg + 'set zfs-io-priority='
-            + payload.zfs_io_priority.toString() + '\n';
-    }
+    Object.keys(propertyMap).forEach(function (vmProp) {
+        if (!payload.hasOwnProperty(vmProp)) {
+            return;
+        }
+
+        var value = payload[vmProp];
+        var o = propertyMap[vmProp];
+
+        assert.object(o, 'o');
+        assert.string(o.prop, 'o.prop');
+        assert.optionalFunc(o.format, 'o.format');
+
+        var zcfgProp = o.prop;
+
+        if (value === undefined) {
+            // remove the property
+            zcfg = zcfg + sprintf('clear %s\n', zcfgProp);
+        } else {
+            // set the property
+            if (o.format) {
+                value = o.format(value);
+            }
+            zcfg = zcfg + sprintf('set %s=%s\n', zcfgProp, value);
+        }
+    });
 
     if (!BRAND_OPTIONS[brand].features.use_vm_autoboot
         && payload.hasOwnProperty('autoboot')) {
diff --git a/src/vm/tests/test-update.js b/src/vm/tests/test-update.js
index 93f0f549..144c610d 100644
--- a/src/vm/tests/test-update.js
+++ b/src/vm/tests/test-update.js
@@ -268,6 +268,20 @@ var UNMODIFIABLE_PROPS = [
     ['zonename', 'bogus-zonename']
 ];
 
+/*
+ * Items that are set using zonecfg with an array of bogus (but valid) property
+ * values.
+ */
+var ZONECFG_PROPS = {
+    cpu_shares: [undefined, 5, undefined],
+    limit_priv: ['', 'default', 'default,dtrace_user', ''],
+    max_lwps: [undefined, 5000, undefined],
+    max_msg_ids: [undefined, 5000, undefined],
+    max_shm_ids: [undefined, 5000, undefined],
+    max_shm_memory: [undefined, 5000, undefined],
+    zfs_io_priority: [undefined, 50, undefined]
+};
+
 test('create VM', function (t) {
     VM.create(PAYLOADS.create, function (err, vmobj) {
         if (err) {
@@ -1412,6 +1426,36 @@ test('attempt to modify unmodifiable properties', function (t) {
     });
 });
 
+/*
+ * Attempt to remove and set properties that are stored in zonecfg.
+ */
+test('attempt to remove and set zonecfg properties', function (t) {
+    vasync.forEachPipeline({
+        inputs: Object.keys(ZONECFG_PROPS),
+        func: function (prop, cb) {
+            var values = ZONECFG_PROPS[prop];
+
+            vasync.forEachPipeline({
+                inputs: values,
+                func: function (value, cb2) {
+                    var payload = {};
+                    payload[prop] = value;
+
+                    VM.update(vm_uuid, payload, function (err) {
+                        common.ifError(t, err, f('update VM property %j to %j',
+                            prop, value));
+
+                        cb2(err);
+                    });
+                }
+            }, cb);
+        }
+    }, function (err) {
+        common.ifError(t, err, 'zonecfg properties');
+        t.end();
+    });
+});
+
 test('delete zone', function (t) {
     if (vm_uuid) {
         VM.delete(vm_uuid, function (err) {
-- 
2.21.0

