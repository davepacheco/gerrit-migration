commit 68afbc8e8bfa4f1ec5bcc7ba320ee76cf680b34b (refs/changes/66/1066/2)
Author: David Pacheco <dap@joyent.com>
Date:   2016-12-05T16:43:47-08:00 (2 years, 10 months ago)
    
    MORAY-381 want default values with cueballOptions
    MORAY-380 translateLegacyOptions not setting "service"

diff --git a/Makefile b/Makefile
index 711c949..c2f88d9 100644
--- a/Makefile
+++ b/Makefile
@@ -70,6 +70,7 @@ test: | $(FAUCET) $(MORAY_TEST_ENV_FILE)
 	$(CTRUN) node test/arrays.test.js | $(FAUCET) && \
 	$(CTRUN) node test/version.test.js | $(FAUCET) && \
 	$(CTRUN) node test/translate-legacy.test.js | $(FAUCET) && \
+	$(CTRUN) node test/normalize-cueball.test.js | $(FAUCET) && \
 	$(CTRUN) node test/loop.test.js | bunyan -lfatal )
 	@echo tests passed
 
diff --git a/test/helper.js b/test/helper.js
index 1013170..acb377b 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -8,7 +8,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-var assert = require('assert');
+var assert = require('assert-plus');
 var child = require('child_process');
 var forkexec = require('forkexec');
 var fs = require('fs');
@@ -166,6 +166,77 @@ function cleanupServer(server, cb) {
     }
 }
 
+/*
+ * This function behaves like t.deepEqual(), except that it ignores properties
+ * in "actual" that are not present in "expected".  This applies recursively, so
+ * that if expected.x.y exists but actual.x.y doesn't (but actual.x and
+ * expected.x are otherwise equivalent), then no error is thrown.
+ *
+ * Arguments:
+ *
+ *     t            the node-tape test context
+ *
+ *     expected     expected object
+ *
+ *     actual       actual object
+ *
+ *     prefix       property name for the top-level objects.  This is used to
+ *                  construct specific error messages when subproperties don't
+ *                  match.
+ */
+function checkDeepSubset(t, expected, actual, prefix) {
+    var k;
+
+    assert.object(t, 't');
+    assert.object(expected, 'expected');
+    assert.object(actual, 'actual');
+    assert.string(prefix, 'prefix');
+
+    for (k in expected) {
+        if (typeof (expected[k]) == 'object' &&
+            typeof (actual[k]) == 'object' &&
+            expected[k] !== null && actual[k] !== null &&
+            !Array.isArray(expected[k]) && !Array.isArray(actual[k])) {
+
+            checkDeepSubset(t, expected[k], actual[k], prefix + '.' + k);
+        } else {
+            t.deepEqual(actual[k], expected[k], prefix + '.' + k + '  matches');
+        }
+    }
+}
+
+/*
+ * Defines a node-tape test-case called "tc.name" for testing a stateless,
+ * synchronous function "func" with specific input "tc.input".  If "tc.output"
+ * is specified, the function should return an object of which "tc.output" is a
+ * subset (according to checkDeepSubset()).  Otherwise, "tc.errmsg" must be
+ * specified, and the function must thrown an exception such that t.throws(...,
+ * errmsg) passes.
+ */
+function defineStatelessTestCase(tape, func, tc) {
+    assert.string(tc.name);
+    assert.object(tc.input);
+    assert.optionalObject(tc.output);
+    assert.ok(tc.output || tc.errmsg);
+    assert.ok(!(tc.output && tc.errmsg));
+
+    tape.test(tc.name, function runTestCase(t) {
+        var rv;
+
+        if (tc.errmsg) {
+            t.throws(function () {
+                func(tc.input);
+            }, tc.errmsg);
+        } else {
+            rv = func(tc.input);
+            assert.object(rv);
+            checkDeepSubset(t, tc.output, rv, 'result');
+        }
+
+        t.end();
+    });
+}
+
 ///--- Exports
 
 module.exports = {
@@ -173,5 +244,6 @@ module.exports = {
     createLogger: createLogger,
     createClient: createClient,
     createServer: createServer,
-    cleanupServer: cleanupServer
+    cleanupServer: cleanupServer,
+    defineStatelessTestCase: defineStatelessTestCase
 };
diff --git a/test/normalize-cueball.test.js b/test/normalize-cueball.test.js
new file mode 100644
index 0000000..02f33b1
--- /dev/null
+++ b/test/normalize-cueball.test.js
@@ -0,0 +1,185 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+/*
+ * normalize-cueball.test.js: tests function to normalize Moray constructor's
+ * cueball options.
+ */
+
+var moray = require('moray');
+var tape = require('tape');
+var normalizeCueballOptions = moray.Client.privateNormalizeCueballOptions;
+
+var helper = require('./helper');
+var testcases;
+
+function main()
+{
+    testcases.forEach(function (tc) {
+        helper.defineStatelessTestCase(tape, normalizeCueballOptions, tc);
+    });
+}
+
+testcases = [
+/*
+ * This initial group of test cases exercises failures resulting from missing or
+ * invalid arguments.  Note that bad types of arguments for which we do not
+ * provide defaults (like "resolvers") do not get checked here, so we don't test
+ * for them.  Cueball will detect those cases.
+ */
+{
+    'name': 'no arguments',
+    'input': {},
+    'errmsg': /is required/
+}, {
+    'name': 'domain: bad',
+    'input': { 'domain': 47 },
+    'errmsg': /domain.*is required/
+}, {
+    'name': 'service: bad type',
+    'input': {
+        'domain': 'foobar',
+        'service': 47
+    },
+    'errmsg': /service.*is required/
+}, {
+    'name': 'defaultPort: bad type',
+    'input': {
+        'domain': 'foobar',
+        'defaultPort': '123'
+    },
+    'errmsg': /defaultPort.*is required/
+}, {
+    'name': 'maxDNSConcurrency: bad type',
+    'input': {
+        'domain': 'foobar',
+        'maxDNSConcurrency': '1'
+    },
+    'errmsg': /maxDNSConcurrency.*is required/
+}, {
+    'name': 'target: bad type',
+    'input': {
+        'domain': 'foobar',
+        'target': '1',
+        'maximum': 3
+    },
+    'errmsg': /target.*is required/
+}, {
+    'name': 'maximum: bad type',
+    'input': {
+        'domain': 'foobar',
+        'target': 1,
+        'maximum': '3'
+    },
+    'errmsg': /maximum.*is required/
+}, {
+    'name': 'target, maximum: only target specified',
+    'input': {
+        'domain': 'foobar',
+        'target': 1
+    },
+    /* JSSTYLED */
+    'errmsg': /must specify either or both of "target" and "maximum"/
+}, {
+    'name': 'target, maximum: only maximum specified',
+    'input': {
+        'domain': 'foobar',
+        'maximum': 3
+    },
+    /* JSSTYLED */
+    'errmsg': /must specify either or both of "target" and "maximum"/
+},
+
+{
+    /*
+     * This is one of the most important default configurations.  This is also
+     * the only one for which we'll bother checking default output values.
+     */
+    'name': 'minimum valid: only domain is specified',
+    'input': {
+        'domain': 'foobar'
+    },
+    'output': {
+        /* resolver-only options */
+        'domain': 'foobar',
+        'service': '_moray._tcp',
+        'defaultPort': 2020,
+        'resolvers': undefined,
+        'maxDNSConcurrency': 3,
+
+        /* connection set options */
+        'target': 6,
+        'maximum': 15,
+
+        /* shared options */
+        'recovery': {
+            'default': {
+                'retries': 5,
+                'timeout': 2000,
+                'maxTimeout': 30000,
+                'delay': 1000,
+                'maxDelay': 60000
+            },
+            'dns': {
+                'retries': 5,
+                'timeout': 1000,
+                'maxTimeout': 20000,
+                'delay': 10,
+                'maxDelay': 10000
+            },
+            'dns_srv': {
+                'retries': 0,
+                'timeout': 1000,
+                'maxTimeout': 20000,
+                'delay': 10,
+                'maxDelay': 10000
+            }
+        }
+    }
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'domain plus resolvers',
+    'input': {
+        'domain': 'foobar',
+        'resolvers': [ '1.2.3.4' ]
+    },
+    'output': {
+        'domain': 'foobar',
+        'resolvers': [ '1.2.3.4' ]
+    }
+}, {
+    'name': 'specify everything',
+    'input': {
+        'domain': 'movie.edu',
+        'service': 'fx',
+        'defaultPort': 1234,
+        'resolvers': [ '1.2.3.4', '4.3.2.1' ],
+        'maxDNSConcurrency': 7,
+        'target': 15,
+        'maximum': 25,
+        'recovery': {
+            'missing': 'everything'
+        }
+    },
+    'output': {
+        'domain': 'movie.edu',
+        'service': 'fx',
+        'defaultPort': 1234,
+        'resolvers': [ '1.2.3.4', '4.3.2.1' ],
+        'maxDNSConcurrency': 7,
+        'target': 15,
+        'maximum': 25,
+        'recovery': {
+            'missing': 'everything'
+        }
+    }
+} ];
+
+main();
diff --git a/test/translate-legacy.test.js b/test/translate-legacy.test.js
index 82b6f24..96e7578 100644
--- a/test/translate-legacy.test.js
+++ b/test/translate-legacy.test.js
@@ -18,66 +18,17 @@ var moray = require('moray');
 var tape = require('tape');
 var translateLegacyOptions = moray.Client.privateTranslateLegacyOptions;
 
+var helper = require('./helper');
+
 var testcases;
 
 function main()
 {
-    testcases.forEach(defineTestCase);
-}
-
-function defineTestCase(tc)
-{
-    assertplus.string(tc.name);
-    assertplus.object(tc.input);
-    assertplus.optionalObject(tc.output);
-    assertplus.ok(tc.output || tc.errmsg);
-    assertplus.ok(!(tc.output && tc.errmsg));
-
-    tape.test(tc.name, function runTestCase(t) {
-        var rv;
-
-        if (tc.errmsg) {
-            t.throws(function () {
-                translateLegacyOptions(tc.input);
-            }, tc.errmsg);
-            t.end();
-            return;
-        }
-
-        /*
-         * There's no sense in testing all of the defaults.  We only compare
-         * properties that were specified in tc.output.
-         */
-        rv = translateLegacyOptions(tc.input);
-        assertplus.object(rv);
-        checkDeepSubset(t, tc.output, rv, 'result');
-        t.end();
+    testcases.forEach(function (tc) {
+        helper.defineStatelessTestCase(tape, translateLegacyOptions, tc);
     });
 }
 
-/*
- * This function behaves like t.deepEqual(), except that it ignores properties
- * in "actual" that are not present in "expected".  This applies recursively, so
- * that if expected.x.y exists but actual.x.y doesn't (but actual.x and
- * expected.x are otherwise equivalent), then no error is thrown.
- */
-function checkDeepSubset(t, expected, actual, prefix)
-{
-    var k;
-
-    for (k in expected) {
-        if (typeof (expected[k]) == 'object' &&
-            typeof (actual[k]) == 'object' &&
-            expected[k] !== null && actual[k] !== null &&
-            !Array.isArray(expected[k]) && !Array.isArray(actual[k])) {
-
-            checkDeepSubset(t, expected[k], actual[k], prefix + '.' + k);
-        } else {
-            t.deepEqual(expected[k], actual[k], prefix + '.' + k + '  matches');
-        }
-    }
-}
-
 /*
  * For details on allowed inputs and expected behavior, see the detailed comment
  * above translateLegacyOptions().
@@ -94,13 +45,20 @@ testcases = [ {
  */
 
 {
+    /* This is one of the most important default configurations. */
     'name': 'host specified, missing port',
     'input': { 'host': 'foobar' },
-    'errmsg': /port.*is required/
+    'output': {
+        'service': '_moray._tcp',
+        'defaultPort': 2020,
+        'domain': 'foobar'
+    }
 }, {
+    /* This is one of the most important default configurations. */
     'name': 'host and port specified',
     'input': { 'host': 'foobar', 'port': 1234 },
     'output': {
+        'service': '_moray._tcp',
         'defaultPort': 1234,
         'domain': 'foobar'
     }
@@ -117,9 +75,11 @@ testcases = [ {
     'input': { 'url': 1234 },
     'errmsg': /is required/
 }, {
+    /* This is one of the most important default configurations. */
     'name': 'url specified with port',
     'input': { 'url': 'tcp://foobar.a.b.c:1234/' },
     'output': {
+        'service': '_moray._tcp',
         'defaultPort': 1234,
         'domain': 'foobar.a.b.c'
     }
@@ -127,6 +87,7 @@ testcases = [ {
     'name': 'url specified with no port',
     'input': { 'url': 'tcp://foobar.a.b.c/' },
     'output': {
+        'service': '_moray._tcp',
         'defaultPort': 2020,
         'domain': 'foobar.a.b.c'
     }
@@ -134,6 +95,7 @@ testcases = [ {
     'name': 'url and port specified',
     'input': { 'url': 'tcp://foobar.a.b.c:1234/', 'port': 3456 },
     'output': {
+        'service': '_moray._tcp',
         'defaultPort': 3456,
         'domain': 'foobar.a.b.c'
     }
@@ -141,6 +103,7 @@ testcases = [ {
     'name': 'host, url, and port specified',
     'input': { 'url': 'tcp://foobar.a:1234/', 'host': 'fooey', 'port': 3456 },
     'output': {
+        'service': '_moray._tcp',
         'defaultPort': 3456,
         'domain': 'fooey'
     }
@@ -163,12 +126,13 @@ testcases = [ {
         'connectTimeout': 4567
     },
     'output': {
+        'service': '_moray._tcp',
         'domain': 'foobar.a.b',
         'defaultPort': 5678,
         'recovery': {
             'default': {
                 'timeout': 4567,
-                'maxTimeout': 4567,
+                'maxTimeout': 30000,
                 'retries': 0,
                 'delay': 0,
                 'maxDelay': 0
@@ -191,6 +155,7 @@ testcases = [ {
         'maxConnections': 427
     },
     'output': {
+        'service': '_moray._tcp',
         'domain': 'foobar.a.b',
         'defaultPort': 5678,
         'maximum': 427
@@ -204,6 +169,33 @@ testcases = [ {
         'dns': 17
     },
     'errmsg': /dns/
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'dns: only resolvers specified',
+    'input': {
+        'url': 'tcp://foobar.a.b:5678',
+        'dns': {
+            'resolvers': [ '1.2.3.4', '5.6.7.8' ]
+        }
+    },
+    'output': {
+        'service': '_moray._tcp',
+        'domain': 'foobar.a.b',
+        'defaultPort': 5678,
+        'resolvers': [ '1.2.3.4', '5.6.7.8' ],
+        'recovery': {
+            'dns': {
+                'retries': 5,
+                'timeout': 1000,
+                'maxTimeout': 20000
+            },
+            'dns_srv': {
+                'retries': 0,
+                'timeout': 1000,
+                'maxTimeout': 20000
+            }
+        }
+    }
 }, {
     'name': 'dns: specified',
     'input': {
@@ -216,17 +208,18 @@ testcases = [ {
         }
     },
     'output': {
+        'service': '_moray._tcp',
         'domain': 'foobar.a.b',
         'defaultPort': 5678,
         'resolvers': [ '1.2.3.4', '5.6.7.8' ],
         'recovery': {
             'dns': {
                 'timeout': 9876,
-                'maxTimeout': 9876
+                'maxTimeout': 20000
             },
             'dns_srv': {
                 'timeout': 9876,
-                'maxTimeout': 9876
+                'maxTimeout': 20000
             }
         }
     }
@@ -261,6 +254,7 @@ testcases = [ {
         }
     },
     'output': {
+        'service': '_moray._tcp',
         'resolvers': undefined,
         'recovery': {
             'dns': {},
@@ -296,22 +290,23 @@ testcases = [ {
     },
     'output': {
         'domain': 'example.com',
+        'service': '_moray._tcp',
         'defaultPort': 314,
         'maximum': 333,
         'resolvers': [ '1.1.1.1', '2.2.2.2' ],
         'recovery': {
             'dns': {
                 'timeout': 222,
-                'maxTimeout': 222
+                'maxTimeout': 20000
             },
             'dns_srv': {
                 'retries': 0,
                 'timeout': 222,
-                'maxTimeout': 222
+                'maxTimeout': 20000
             },
             'default': {
                 'timeout': 111,
-                'maxTimeout': 111,
+                'maxTimeout': 30000,
                 'retries': 444,
                 'delay': 777,
                 'maxDelay': 888
