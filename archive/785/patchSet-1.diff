From 67f69fac63409b7cfd77913acea83501fb0f357a Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Tue, 25 Oct 2016 20:25:56 +0000
Subject: [PATCH] OS-5728 lx_proc should anchor properly to zone

---
 usr/src/uts/common/brand/lx/procfs/lx_proc.h  |   1 +
 .../uts/common/brand/lx/procfs/lx_prsubr.c    |  13 ++
 .../uts/common/brand/lx/procfs/lx_prvnops.c   | 133 +++++++++---------
 3 files changed, 78 insertions(+), 69 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/procfs/lx_proc.h b/usr/src/uts/common/brand/lx/procfs/lx_proc.h
index 37bae590a8..b4665a484a 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_proc.h
+++ b/usr/src/uts/common/brand/lx/procfs/lx_proc.h
@@ -341,6 +341,7 @@ typedef enum lxpr_zombok {
 extern proc_t *lxpr_lock(lxpr_node_t *, zombok_t);
 extern proc_t *lxpr_lock_pid(lxpr_node_t *, pid_t, zombok_t, kthread_t **);
 extern void lxpr_unlock(proc_t *);
+extern netstack_t *lxpr_netstack(lxpr_node_t *);
 extern void lxpr_fixpid(zone_t *, proc_t *, pid_t *, pid_t *);
 
 #ifdef	__cplusplus
diff --git a/usr/src/uts/common/brand/lx/procfs/lx_prsubr.c b/usr/src/uts/common/brand/lx/procfs/lx_prsubr.c
index 0e26346b63..a10a098ee4 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_prsubr.c
+++ b/usr/src/uts/common/brand/lx/procfs/lx_prsubr.c
@@ -282,6 +282,19 @@ retry:
 	return (p);
 }
 
+netstack_t *
+lxpr_netstack(lxpr_node_t *lxpnp)
+{
+	netstack_t *ns;
+
+	ns = LXPTOZ(lxpnp)->zone_netstack;
+	ASSERT(ns != NULL);
+	if (ns->netstack_flags & (NSF_UNINIT|NSF_CLOSING))
+		return (NULL);
+
+	netstack_hold(ns);
+	return (ns);
+}
 
 /*
  * Lookup process from pid associated with lxpr_node and return with p_lock and
diff --git a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
index 9b99a092ec..10cb7c7e88 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
+++ b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
@@ -2726,7 +2726,7 @@ lxpr_read_net_if_inet6(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	ill_walk_context_t	ctx;
 	char ifname[LIFNAMSIZ], ip6out[33];
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return;
 	ipst = ns->netstack_ip;
@@ -2820,7 +2820,7 @@ lxpr_read_net_ipv6_route(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	netstack_t *ns;
 	ip_stack_t *ipst;
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return;
 	ipst = ns->netstack_ip;
@@ -2931,7 +2931,7 @@ lxpr_read_net_route(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	lxpr_uiobuf_printf(uiobuf, "Iface\tDestination\tGateway \tFlags\t"
 	    "RefCnt\tUse\tMetric\tMask\t\tMTU\tWindow\tIRTT\n");
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return;
 	ipst = ns->netstack_ip;
@@ -3148,7 +3148,7 @@ lxpr_convert_tcp_state(int st)
 }
 
 static void
-lxpr_format_tcp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
+lxpr_format_tcp(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 {
 	int i, sl = 0;
 	connf_t *connfp;
@@ -3188,7 +3188,7 @@ lxpr_format_tcp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 	 *  - timeout
 	 */
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return;
 	ipst = ns->netstack_ip;
@@ -3255,18 +3255,18 @@ lxpr_format_tcp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 static void
 lxpr_read_net_tcp(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	lxpr_format_tcp(uiobuf, IPV4_VERSION);
+	lxpr_format_tcp(lxpnp, uiobuf, IPV4_VERSION);
 }
 
 /* ARGSUSED */
 static void
 lxpr_read_net_tcp6(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	lxpr_format_tcp(uiobuf, IPV6_VERSION);
+	lxpr_format_tcp(lxpnp, uiobuf, IPV6_VERSION);
 }
 
 static void
-lxpr_format_udp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
+lxpr_format_udp(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 {
 	int i, sl = 0;
 	connf_t *connfp;
@@ -3306,7 +3306,7 @@ lxpr_format_udp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 	 *  - inode
 	 */
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return;
 	ipst = ns->netstack_ip;
@@ -3384,14 +3384,14 @@ lxpr_format_udp(lxpr_uiobuf_t *uiobuf, ushort_t ipver)
 static void
 lxpr_read_net_udp(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	lxpr_format_udp(uiobuf, IPV4_VERSION);
+	lxpr_format_udp(lxpnp, uiobuf, IPV4_VERSION);
 }
 
 /* ARGSUSED */
 static void
 lxpr_read_net_udp6(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	lxpr_format_udp(uiobuf, IPV6_VERSION);
+	lxpr_format_udp(lxpnp, uiobuf, IPV6_VERSION);
 }
 
 /* ARGSUSED */
@@ -3565,9 +3565,9 @@ lxpr_read_loadavg(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	 * includes the current CPU.
 	 */
 	if (pool_pset_enabled()) {
-		psetid_t psetid = zone_pset_get(curproc->p_zone);
+		psetid_t psetid = zone_pset_get(LXPTOZ(lxpnp));
 
-		ASSERT(curproc->p_zone != &zone0);
+		ASSERT(LXPTOZ(lxpnp) != &zone0);
 		cp = CPU->cpu_part;
 
 		nrunnable = cp->cp_nrunning + cp->cp_nrunnable;
@@ -3769,7 +3769,7 @@ lxpr_read_partitions(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	lxpr_uiobuf_printf(uiobuf, "major minor  #blocks  name\n\n");
 
-	lxzd = ztolxzd(curproc->p_zone);
+	lxzd = ztolxzd(LXPTOZ(lxpnp));
 	if (lxzd == NULL)
 		return;
 	ASSERT(lxzd->lxzd_vdisks != NULL);
@@ -4224,10 +4224,10 @@ lxpr_read_stat(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 static void
 lxpr_read_swaps(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	zone_t *zone = curzone;
+	zone_t *zone = LXPTOZ(lxpnp);
 	uint64_t totswap, usedswap;
 
-	if (zone == global_zone || zone->zone_max_swap_ctl == UINT64_MAX) {
+	if (zone->zone_max_swap_ctl == UINT64_MAX) {
 		totswap = (k_anoninfo.ani_max * PAGESIZE) >> 10;
 	} else {
 		mutex_enter(&zone->zone_mem_lock);
@@ -4255,11 +4255,12 @@ lxpr_read_swaps(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 static void
 lxpr_read_sys_fs_filemax(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
+	zone_t *zone = LXPTOZ(lxpnp);
 	uint64_t max_fh, proc_lim;
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_FS_FILEMAX);
-	proc_lim = (uint64_t)(curzone->zone_nprocs_ctl == INT_MAX ?
-	    maxpid : curzone->zone_nprocs_ctl);
+	proc_lim = (uint64_t)(zone->zone_nprocs_ctl == INT_MAX ?
+	    maxpid : zone->zone_nprocs_ctl);
 	max_fh = proc_lim * (uint64_t)rlim_fd_max;
 	lxpr_uiobuf_printf(uiobuf, "%llu\n", max_fh);
 }
@@ -4310,7 +4311,7 @@ lxpr_read_sys_kernel_caplcap(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 static void
 lxpr_read_sys_kernel_corepatt(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	zone_t *zone = curproc->p_zone;
+	zone_t *zone = LXPTOZ(lxpnp);
 	struct core_globals *cg;
 	refstr_t *rp;
 	corectl_path_t *ccp;
@@ -4367,7 +4368,7 @@ lxpr_read_sys_kernel_msgmni(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	mutex_enter(&curproc->p_lock);
 	val = rctl_enforced_value(rc_zone_msgmni,
-	    curproc->p_zone->zone_rctls, curproc);
+	    LXPTOZ(lxpnp)->zone_rctls, curproc);
 	mutex_exit(&curproc->p_lock);
 
 	lxpr_uiobuf_printf(uiobuf, "%u\n", (uint_t)val);
@@ -4385,21 +4386,18 @@ lxpr_read_sys_kernel_ngroups_max(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 static void
 lxpr_read_sys_kernel_osrel(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
-	lx_zone_data_t *br_data;
+	zone_t *zone = LXPTOZ(lxpnp);
+	lx_zone_data_t *lxzd = ztolxzd(zone);
 	char version[LX_KERN_VERSION_MAX];
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_OSREL);
-	br_data = ztolxzd(curproc->p_zone);
-	if (curproc->p_zone->zone_brand == &lx_brand) {
-		mutex_enter(&br_data->lxzd_lock);
-		(void) strlcpy(version, br_data->lxzd_kernel_version,
-		    sizeof (version));
-		mutex_exit(&br_data->lxzd_lock);
+	ASSERT(zone->zone_brand == &lx_brand);
+	ASSERT(lxzd != NULL);
 
-		lxpr_uiobuf_printf(uiobuf, "%s\n", version);
-	} else {
-		lxpr_uiobuf_printf(uiobuf, "\n");
-	}
+	mutex_enter(&lxzd->lxzd_lock);
+	(void) strlcpy(version, lxzd->lxzd_kernel_version, sizeof (version));
+	mutex_exit(&lxzd->lxzd_lock);
+	lxpr_uiobuf_printf(uiobuf, "%s\n", version);
 }
 
 /* ARGSUSED */
@@ -4428,19 +4426,16 @@ lxpr_read_sys_kernel_rand_bootid(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	 * appears to resemble a uuid but since it is not documented to be a
 	 * uuid, we don't worry about that.
 	 */
-	lx_zone_data_t *br_data;
+	zone_t *zone = LXPTOZ(lxpnp);
+	lx_zone_data_t *lxzd = ztolxzd(zone);
 	char bootid[LX_BOOTID_LEN];
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_RAND_BOOTID);
+	ASSERT(zone->zone_brand == &lx_brand);
+	ASSERT(lxzd != NULL);
 
-	if (curproc->p_zone->zone_brand != &lx_brand) {
-		lxpr_uiobuf_printf(uiobuf, "0\n");
-		return;
-	}
-
-	br_data = ztolxzd(curproc->p_zone);
-	mutex_enter(&br_data->lxzd_lock);
-	if (br_data->lxzd_bootid[0] == '\0') {
+	mutex_enter(&lxzd->lxzd_lock);
+	if (lxzd->lxzd_bootid[0] == '\0') {
 		int i;
 
 		for (i = 0; i < 5; i++) {
@@ -4460,17 +4455,16 @@ lxpr_read_sys_kernel_rand_bootid(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 				break;
 			}
 			if (i > 0)
-				(void) strlcat(br_data->lxzd_bootid, "-",
-				    sizeof (br_data->lxzd_bootid));
-			(void) strlcat(br_data->lxzd_bootid, s,
-			    sizeof (br_data->lxzd_bootid));
+				(void) strlcat(lxzd->lxzd_bootid, "-",
+				    sizeof (lxzd->lxzd_bootid));
+			(void) strlcat(lxzd->lxzd_bootid, s,
+			    sizeof (lxzd->lxzd_bootid));
 		}
 	}
-	(void) strlcpy(bootid, br_data->lxzd_bootid, sizeof (bootid));
-	mutex_exit(&br_data->lxzd_lock);
+	(void) strlcpy(bootid, lxzd->lxzd_bootid, sizeof (bootid));
+	mutex_exit(&lxzd->lxzd_lock);
 
 	lxpr_uiobuf_printf(uiobuf, "%s\n", bootid);
-
 }
 
 /* ARGSUSED */
@@ -4478,6 +4472,7 @@ static void
 lxpr_read_sys_kernel_sem(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
 	proc_t *pp = curproc;
+	zone_t *zone = LXPTOZ(lxpnp);
 	rctl_qty_t vmsl, vopm, vmni, vmns;
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_SEM);
@@ -4485,7 +4480,7 @@ lxpr_read_sys_kernel_sem(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	mutex_enter(&pp->p_lock);
 	vmsl = rctl_enforced_value(rc_process_semmsl, pp->p_rctls, pp);
 	vopm = rctl_enforced_value(rc_process_semopm, pp->p_rctls, pp);
-	vmni = rctl_enforced_value(rc_zone_semmni, pp->p_zone->zone_rctls, pp);
+	vmni = rctl_enforced_value(rc_zone_semmni, zone->zone_rctls, pp);
 	mutex_exit(&pp->p_lock);
 	vmns = vmsl * vmni;
 	if (vmns < vmsl || vmns < vmni) {
@@ -4507,12 +4502,12 @@ static void
 lxpr_read_sys_kernel_shmall(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
 	rctl_qty_t val;
+	zone_t *zone = LXPTOZ(lxpnp);
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_SHMALL);
 
 	mutex_enter(&curproc->p_lock);
-	val = rctl_enforced_value(rc_zone_shmmax,
-	    curproc->p_zone->zone_rctls, curproc);
+	val = rctl_enforced_value(rc_zone_shmmax, zone->zone_rctls, curproc);
 	mutex_exit(&curproc->p_lock);
 
 	/* value is in pages */
@@ -4524,12 +4519,12 @@ static void
 lxpr_read_sys_kernel_shmmax(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
 	rctl_qty_t val;
+	zone_t *zone = LXPTOZ(lxpnp);
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_SHMMAX);
 
 	mutex_enter(&curproc->p_lock);
-	val = rctl_enforced_value(rc_zone_shmmax,
-	    curproc->p_zone->zone_rctls, curproc);
+	val = rctl_enforced_value(rc_zone_shmmax, zone->zone_rctls, curproc);
 	mutex_exit(&curproc->p_lock);
 
 	if (val > FOURGB)
@@ -4543,12 +4538,12 @@ static void
 lxpr_read_sys_kernel_shmmni(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
 	rctl_qty_t val;
+	zone_t *zone = LXPTOZ(lxpnp);
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_SHMMNI);
 
 	mutex_enter(&curproc->p_lock);
-	val = rctl_enforced_value(rc_zone_shmmni,
-	    curproc->p_zone->zone_rctls, curproc);
+	val = rctl_enforced_value(rc_zone_shmmni, zone->zone_rctls, curproc);
 	mutex_exit(&curproc->p_lock);
 
 	if (val > FOURGB)
@@ -4562,7 +4557,7 @@ static void
 lxpr_read_sys_kernel_threads_max(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 {
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_KERNEL_THREADS_MAX);
-	lxpr_uiobuf_printf(uiobuf, "%d\n", curproc->p_zone->zone_nlwps_ctl);
+	lxpr_uiobuf_printf(uiobuf, "%d\n", LXPTOZ(lxpnp)->zone_nlwps_ctl);
 }
 
 /* ARGSUSED */
@@ -4574,7 +4569,7 @@ lxpr_read_sys_net_core_somaxc(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_CORE_SOMAXCON);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_printf(uiobuf, "%d\n", SOMAXCONN);
 		return;
@@ -4603,7 +4598,7 @@ lxpr_read_sys_net_ipv4_ip_lport_range(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_IP_LPORT_RANGE);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4637,7 +4632,7 @@ lxpr_read_sys_net_ipv4_tcp_fin_to(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_FIN_TO);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4671,7 +4666,7 @@ lxpr_read_sys_net_ipv4_tcp_ka_int(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_KA_INT);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4702,7 +4697,7 @@ lxpr_read_sys_net_ipv4_tcp_ka_tim(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_KA_TIM);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4731,7 +4726,7 @@ lxpr_read_sys_net_ipv4_tcp_max_syn_bl(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_MAX_SYN_BL);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4765,7 +4760,7 @@ lxpr_read_sys_net_ipv4_tcp_rwmem(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_RMEM ||
 	    lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_WMEM);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4803,7 +4798,7 @@ lxpr_read_sys_net_ipv4_tcp_sack(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_SACK);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -4836,7 +4831,7 @@ lxpr_read_sys_net_ipv4_tcp_winscale(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
 
 	ASSERT(lxpnp->lxpr_type == LXPR_SYS_NET_IPV4_TCP_WINSCALE);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL) {
 		lxpr_uiobuf_seterr(uiobuf, ENXIO);
 		return;
@@ -6350,7 +6345,7 @@ lxpr_readdir_taskdir(lxpr_node_t *lxpnp, uio_t *uiop, int *eofp)
 			 * Convert pid to Linux default of 1 if we're the
 			 * zone's init.
 			 */
-			if (emul_tid == curproc->p_zone->zone_proc_initpid)
+			if (emul_tid == LXPTOZ(lxpnp)->zone_proc_initpid)
 				emul_tid = 1;
 		}
 
@@ -6681,7 +6676,7 @@ lxpr_write_tcp_property(lxpr_node_t *lxpnp, struct uio *uio,
 	if (val[0] == '\0') /* no input */
 		return (EINVAL);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return (EINVAL);
 
@@ -6811,7 +6806,7 @@ lxpr_write_sys_net_ipv4_ip_lport_range(lxpr_node_t *lxpnp, struct uio *uio,
 	if (low > high || high > 65535)
 		return (EINVAL);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return (EINVAL);
 
@@ -6906,7 +6901,7 @@ lxpr_write_sys_net_ipv4_tcp_rwmem(lxpr_node_t *lxpnp, struct uio *uio,
 	    def > ONEGB || max < 8192)
 		return (EINVAL);
 
-	ns = netstack_get_current();
+	ns = lxpr_netstack(lxpnp);
 	if (ns == NULL)
 		return (EINVAL);
 
@@ -6998,7 +6993,7 @@ static int
 lxpr_write_sys_kernel_corepatt(lxpr_node_t *lxpnp, struct uio *uio,
     struct cred *cr, caller_context_t *ct)
 {
-	zone_t *zone = curproc->p_zone;
+	zone_t *zone = LXPTOZ(lxpnp);
 	struct core_globals *cg;
 	refstr_t *rp, *nrp;
 	corectl_path_t *ccp;
-- 
2.21.0

