From 750be641bf274bbe91830a47ef87b43ce5f974b1 Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Wed, 13 Jun 2018 20:43:04 -0400
Subject: [PATCH] Undo svp_vl3_lookup_cb() changes Malformed svp_query_t for
 route lookup Explicitly pad svp_route_ack_t Missing byte-order calls

---
 usr/src/lib/varpd/svp/common/libvarpd_svp.c   | 43 +------------------
 .../lib/varpd/svp/common/libvarpd_svp_conn.c  |  3 +-
 .../lib/varpd/svp/common/libvarpd_svp_prot.h  |  1 +
 .../varpd/svp/common/libvarpd_svp_remote.c    | 29 ++++++++-----
 4 files changed, 22 insertions(+), 54 deletions(-)

diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp.c b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
index 095e5dc23b..698957d84b 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
@@ -458,47 +458,8 @@ svp_vl3_lookup_cb(svp_t *svp, svp_status_t status, const uint8_t *vl2mac,
 	}
 
 	/* Inject the L2 mapping before the L3 */
-	/*
-	 * XXX KEBE SAYS - this if () may change a lot before we're finally
-	 * done.  Basically, we want to know if a VL3 is a special next-hop
-	 * router IP.  For this moment, we have to beware of SVP server
-	 * work-in-progress issues, or other pathologies.
-	 */
-	if (bcmp(uip, &point.otp_ip, sizeof (struct in6_addr)) != 0 &&
-	    !IN6_IS_ADDR_V4MAPPED_ANY(uip)) {
-		/* Normal L3 lookup result... */
-		bcopy(uip, &point.otp_ip, sizeof (struct in6_addr));
-		point.otp_port = uport;
-	} else {
-		/*
-		 * Oh my, we have a next-hop router IP, thanks to the all-0s
-		 * IP coming from portolan.
-		 * Set the MAC to the ouid+vid concatenated
-		 * special-router-MAC. Overlay down below will know
-		 * that uport == 0 and otp_ip == 0 means the MAC is a special
-		 * one. 
-		 */
-		/*
-		 * XXX KEBE ASKS, do we rewrite the MAC for this?  Or do
-		 * we trust the SVP server's answer and just count on the
-		 * all-zeroes {port,IP}?
-		 */
-		if (bcmp(svp->svp_router_oui, nexthop_mac, ETHERADDRL) == 0) {
-			/*
-			 * We don't have a router_oui, so we can't support
-			 * special-router-MAC.  Drop it.
-			 */
-			libvarpd_plugin_arp_reply(svl->svl_u.svl_vl3.svl_vah,
-			    VARPD_LOOKUP_DROP);
-			umem_cache_free(svp_lookup_cache, svl);
-			return;
-		}
-		bcopy(svp->svp_router_oui, nexthop_mac, 3);
-		nexthop_mac[3] = (svp->svp_vid >> 16) & 0xff;
-		nexthop_mac[4] = (svp->svp_vid >> 8) & 0xff;
-		nexthop_mac[5] = svp->svp_vid & 0xff;
-		vl2mac = nexthop_mac;
-	}
+	bcopy(uip, &point.otp_ip, sizeof (struct in6_addr));
+	point.otp_port = uport;
 	libvarpd_inject_varp(svp->svp_hdl, vl2mac, &point);
 
 	bcopy(vl2mac, svl->svl_u.svl_vl3.svl_out, ETHERADDRL);
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c b/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
index 28cc25b537..b5fdbf12ef 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
@@ -572,8 +572,7 @@ svp_conn_pollin_validate(svp_conn_t *scp)
 		    BUNYAN_T_INT32, "operation", nop,
 		    BUNYAN_T_INT32, "response_id", resp->svp_id,
 		    BUNYAN_T_INT32, "response_size", nsize,
-		    BUNYAN_T_INT32, "expected_size", nop == SVP_R_VL2_ACK ?
-		    sizeof (svp_vl2_ack_t) : sizeof (svp_vl3_ack_t),
+		    BUNYAN_T_INT32, "expected_size", expected_size,
 		    BUNYAN_T_INT32, "query_state", sqp->sq_state,
 		    BUNYAN_T_END);
 		return (B_FALSE);
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
index 7a3f47f979..08dfb99f41 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
@@ -292,6 +292,7 @@ typedef struct svp_route_ack {
 	uint8_t	sra_dstmac[ETHERADDRL];	/* Far-remote VL2 dest. */
 	uint8_t		sra_src_pfx;	/* Far-remote VL3 source prefix */
 	uint8_t		sra_dst_pfx;	/* Far-remote VL3 dest. prefix */
+	uint16_t	sra_pad;	/* Must be explicit to 4-bytes. */
 } svp_route_ack_t;
 
 #ifdef __cplusplus
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
index 5a951f1888..cf825c5ed9 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
@@ -376,7 +376,7 @@ svp_remote_vl2_lookup(svp_t *svp, svp_query_t *sqp, const uint8_t *mac,
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
-	sqp->sq_header.svp_crc32 = htonl(0);
+	sqp->sq_header.svp_crc32 = 0;
 	sqp->sq_rdata = vl2r;
 	sqp->sq_rsize = sizeof (svp_vl2_req_t);
 	sqp->sq_wdata = NULL;
@@ -397,11 +397,15 @@ svp_remote_route_lookup_cb(svp_query_t *sqp, void *arg)
 	svp_t *svp = sqp->sq_svp;
 	svp_route_ack_t *sra = (svp_route_ack_t *)sqp->sq_wdata;
 
+	/*
+	 * Do the ntoh*()-ing here.
+	 */
 	if (sqp->sq_status == SVP_S_OK) {
-		svp->svp_cb.scb_route_lookup(svp, sqp->sq_status,
-		    sra->sra_dcid, sra->sra_vnetid, sra->sra_vlan,
-		    sra->sra_srcmac, sra->sra_dstmac, sra->sra_port,
-		    sra->sra_ip, sra->sra_src_pfx, sra->sra_dst_pfx, arg);
+		svp->svp_cb.scb_route_lookup(svp, ntohl(sqp->sq_status),
+		    ntohl(sra->sra_dcid), ntohl(sra->sra_vnetid),
+		    ntohs(sra->sra_vlan), sra->sra_srcmac, sra->sra_dstmac,
+		    ntohs(sra->sra_port), sra->sra_ip, sra->sra_src_pfx,
+		    sra->sra_dst_pfx, arg);
 	} else {
 		svp->svp_cb.scb_route_lookup(svp, sqp->sq_status,
 		    0, 0, 0, NULL, NULL, 0, NULL, 0, 0, arg);
@@ -427,14 +431,17 @@ svp_remote_route_lookup(svp_t *svp, svp_query_t *sqp,
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
-	sqp->sq_header.svp_crc32 = htonl(0);
+	sqp->sq_header.svp_crc32 = 0;
 	sqp->sq_rdata = srr;
+	sqp->sq_rsize = sizeof (svp_route_req_t);
+	sqp->sq_wdata = NULL;
+	sqp->sq_wsize = 0;
 
 	bcopy(src, srr->srr_srcip, sizeof (struct in6_addr));
 	bcopy(dst, srr->srr_dstip, sizeof (struct in6_addr));
 	/* Caller should've checked both are the same type... */
-	srr->srr_vnetid = vnetid;
-	srr->srr_vlan = vlan;
+	srr->srr_vnetid = htonl(vnetid);
+	srr->srr_vlan = htons(vlan);
 	srr->srr_pad = 0;
 
 	mutex_enter(&srp->sr_lock);
@@ -478,7 +485,7 @@ svp_remote_vl3_common(svp_remote_t *srp, svp_query_t *sqp,
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
-	sqp->sq_header.svp_crc32 = htonl(0);
+	sqp->sq_header.svp_crc32 = 0;
 	sqp->sq_rdata = vl3r;
 	sqp->sq_rsize = sizeof (svp_vl3_req_t);
 	sqp->sq_wdata = NULL;
@@ -559,7 +566,7 @@ svp_remote_log_request(svp_remote_t *srp, svp_query_t *sqp, void *buf,
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
-	sqp->sq_header.svp_crc32 = htonl(0);
+	sqp->sq_header.svp_crc32 = 0;
 	sqp->sq_rdata = logr;
 	sqp->sq_rsize = sizeof (svp_log_req_t);
 	sqp->sq_wdata = buf;
@@ -604,7 +611,7 @@ svp_remote_lrm_request(svp_remote_t *srp, svp_query_t *sqp, void *buf,
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
-	sqp->sq_header.svp_crc32 = htonl(0);
+	sqp->sq_header.svp_crc32 = 0;
 	sqp->sq_rdata = buf;
 	sqp->sq_rsize = buflen;
 	sqp->sq_wdata = NULL;
-- 
2.21.0

