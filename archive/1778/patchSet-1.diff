From 98f72696d76085fe34641c6dc13f5fd80f8c2bd1 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Mon, 10 Apr 2017 13:39:20 -0700
Subject: [PATCH] DOCKER-1032 test-docker failure in nightly: cli-links.test.js
 (DOCKER_CLI_VERSION=1.10.3)

---
 lib/backends/sdc/containers.js | 50 +++++++++++++++++++++++-----------
 1 file changed, 34 insertions(+), 16 deletions(-)

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index 7bf54d0..47bd525 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -1096,17 +1096,18 @@ function storeLinks(opts, linkDetails, callback) {
     });
 }
 
-function deleteLinks(opts) {
+function deleteLinks(opts, cb) {
     assert.object(opts, 'opts');
     assert.object(opts.vm, 'opts.vm');
     assert.object(opts.app, 'opts.app');
     assert.object(opts.account, 'opts.account');
     assert.object(opts.log, 'opts.log');
+    assert.func(cb, 'cb');
 
     var log = opts.log;
     var linksToDelete = [];
 
-    function findLinkCallbackWrapper(cb) {
+    function findLinkCallbackWrapper(callback) {
         return function (err, links) {
             if (err) {
                 log.warn('Error finding links for %s: %s', opts.vm.uuid, err);
@@ -1118,30 +1119,32 @@ function deleteLinks(opts) {
     }
 
     vasync.pipeline({ funcs: [
-        function (_, cb) {
+        function findTargettingLinks(_, next) {
             // Find links whose target container is being deleted.
             var params = {
                 owner_uuid: opts.account.uuid,
                 target_uuid: opts.vm.uuid
             };
-            Link.find(opts.app, log, params, findLinkCallbackWrapper(cb));
+            Link.find(opts.app, log, params, findLinkCallbackWrapper(next));
         },
-        function (_, cb) {
+        function findSourceLinks(_, next) {
             // Find links for the container being deleted.
             var params = {
                 owner_uuid: opts.account.uuid,
                 container_uuid: opts.vm.uuid
             };
-            Link.find(opts.app, log, params, findLinkCallbackWrapper(cb));
+            Link.find(opts.app, log, params, findLinkCallbackWrapper(next));
         },
-        function (_, cb) {
+        function delLinks(_, next) {
             // Delete the links we found.
             log.info('deleteLinks: found ' + linksToDelete.length + ' links');
             linksToDelete.forEach(function (l) {
-                Link.del(opts.app, log, l, function () {});
+                Link.del(opts.app, log, l, function () {}, next);
             });
         }
-    ]});
+    ]}, function onDeleteLinksDone(delLinksErr) {
+        cb(delLinksErr);
+    });
 }
 
 function renameLinks(opts, newName, callback) {
@@ -3388,15 +3391,30 @@ function deleteContainer(opts, callback) {
             function _deleteVmCb(deleteErr, job) {
                 if (deleteErr) {
                     log.error(deleteErr, 'Error deleting container.');
-                    return callback(errors.vmapiErrorWrap(
-                            deleteErr, 'problem deleting container'));
-                }
+                    callback(errors.vmapiErrorWrap(deleteErr,
+                        'problem deleting container'));
+                    return;
+                } else {
+                    log.info('Container deleted successfully');
 
-                // Remove the docker links for this container.
-                deleteLinks(opts);
+                    deleteLinks(opts, function onDeleteLinks(delLinksErr) {
+                        if (delLinksErr) {
+                            log.error({err: delLinksErr},
+                                'Error when deleting links');
+                        } else {
+                            log.debug('Successfully deleted links');
+                        }
 
-                log.debug({job: job}, 'created start job');
-                callback();
+                        /*
+                         * Here we intentionally ignore any error that may have
+                         * happened when deleting links, as the only consequence
+                         * is that the links bucket will have dangling links,
+                         * but this will not impact service.
+                         */
+                        callback();
+                    });
+
+                }
             });
     });
 }
-- 
2.21.0

