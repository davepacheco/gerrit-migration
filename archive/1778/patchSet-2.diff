commit bfb7809211dd8b13db139b2b4db0882e88c1f267 (refs/changes/78/1778/2)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-04-10T15:19:21-07:00 (2 years, 6 months ago)
    
    DOCKER-1032 test-docker failure in nightly: cli-links.test.js (DOCKER_CLI_VERSION=1.10.3)

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index 7bf54d0..369857b 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -1096,52 +1096,58 @@ function storeLinks(opts, linkDetails, callback) {
     });
 }
 
-function deleteLinks(opts) {
+function deleteLinks(opts, cb) {
     assert.object(opts, 'opts');
     assert.object(opts.vm, 'opts.vm');
     assert.object(opts.app, 'opts.app');
     assert.object(opts.account, 'opts.account');
     assert.object(opts.log, 'opts.log');
+    assert.func(cb, 'cb');
 
     var log = opts.log;
     var linksToDelete = [];
 
-    function findLinkCallbackWrapper(cb) {
+    function findLinkCallbackWrapper(callback) {
         return function (err, links) {
             if (err) {
                 log.warn('Error finding links for %s: %s', opts.vm.uuid, err);
             } else if (links && links.length > 0) {
                 linksToDelete = linksToDelete.concat(links);
             }
-            cb();
+            callback();
         };
     }
 
     vasync.pipeline({ funcs: [
-        function (_, cb) {
+        function findTargettingLinks(_, next) {
             // Find links whose target container is being deleted.
             var params = {
                 owner_uuid: opts.account.uuid,
                 target_uuid: opts.vm.uuid
             };
-            Link.find(opts.app, log, params, findLinkCallbackWrapper(cb));
+            Link.find(opts.app, log, params, findLinkCallbackWrapper(next));
         },
-        function (_, cb) {
+        function findSourceLinks(_, next) {
             // Find links for the container being deleted.
             var params = {
                 owner_uuid: opts.account.uuid,
                 container_uuid: opts.vm.uuid
             };
-            Link.find(opts.app, log, params, findLinkCallbackWrapper(cb));
+            Link.find(opts.app, log, params, findLinkCallbackWrapper(next));
         },
-        function (_, cb) {
+        function delLinks(_, next) {
             // Delete the links we found.
             log.info('deleteLinks: found ' + linksToDelete.length + ' links');
-            linksToDelete.forEach(function (l) {
-                Link.del(opts.app, log, l, function () {});
-            });
+            vasync.forEachParallel({
+                func: function delSingleLink(link, done) {
+                    Link.del(opts.app, log, link, done);
+                },
+                inputs: linksToDelete
+            }, next);
         }
-    ]});
+    ]}, function onDeleteLinksDone(delLinksErr) {
+        cb(delLinksErr);
+    });
 }
 
 function renameLinks(opts, newName, callback) {
@@ -3388,15 +3394,30 @@ function deleteContainer(opts, callback) {
             function _deleteVmCb(deleteErr, job) {
                 if (deleteErr) {
                     log.error(deleteErr, 'Error deleting container.');
-                    return callback(errors.vmapiErrorWrap(
-                            deleteErr, 'problem deleting container'));
-                }
+                    callback(errors.vmapiErrorWrap(deleteErr,
+                        'problem deleting container'));
+                    return;
+                } else {
+                    log.info({job: job}, 'Container deleted successfully');
 
-                // Remove the docker links for this container.
-                deleteLinks(opts);
+                    deleteLinks(opts, function onDeleteLinks(delLinksErr) {
+                        if (delLinksErr) {
+                            log.error({err: delLinksErr},
+                                'Error when deleting links');
+                        } else {
+                            log.debug('Successfully deleted links');
+                        }
 
-                log.debug({job: job}, 'created start job');
-                callback();
+                        /*
+                         * Here we intentionally ignore any error that may have
+                         * happened when deleting links, as the only consequence
+                         * is that the links bucket will have dangling links,
+                         * but this will not impact service.
+                         */
+                        callback();
+                    });
+
+                }
             });
     });
 }
@@ -3433,13 +3454,23 @@ function deleteLink(opts, callback) {
             return;
         }
         // Delete the link(s) found.
-        links.forEach(function (l) {
-            Link.del(opts.app, log, l, function () {});
-        });
-        log.debug('Deleted %d link(s) for link name [%s/%s]',
-                links.length, opts.vm.alias, linkAlias);
+        vasync.forEachParallel({
+            func: function delLink(link, done) {
+                Link.del(opts.app, log, link, done);
+            },
+            inputs: links
+        }, function onLinksDeleted(delLinksErr) {
+            if (!delLinksErr) {
+                log.debug('Deleted %d link(s) for link name [%s/%s]',
+                    links.length, opts.vm.alias, linkAlias);
+            } else {
+                log.error({err: delLinksErr},
+                    'Error when deleting link(s) for link name [%s/%s]',
+                        links.length, opts.vm.alias, linkAlias);
+            }
 
-        callback();
+            callback(delLinksErr);
+        });
     }
 
     // Fetch links for this container.
diff --git a/lib/models/link.js b/lib/models/link.js
index 44ec404..343692e 100644
--- a/lib/models/link.js
+++ b/lib/models/link.js
@@ -249,6 +249,7 @@ function deleteLink(app, log, params, callback) {
     assert.string(params.owner_uuid, 'params.owner_uuid');
     assert.string(params.container_uuid, 'params.container_uuid');
     assert.string(params.alias, 'params.alias');
+    assert.func(callback, 'callback');
 
     log.debug(params, 'deleteLink: entry');
 
