commit 1668e295444306683c6c73f011c5e90fcae95765 (refs/changes/69/1769/1)
Author: Jason King <jason.king@joyent.com>
Date:   2017-04-07T15:54:02-05:00 (2 years, 6 months ago)
    
    joyent/node-triton#197 Create triton image export command

diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index f872baa..84f4101 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  *
  * Client library for the SmartDataCenter Cloud API (cloudapi).
  * http://apidocs.joyent.com/cloudapi/
@@ -669,7 +669,32 @@ function createImageFromMachine(opts, cb) {
     });
 };
 
+/**
+ * Export an image to Manta.
+ * <http://apidocs.joyent.com/cloudapi/#ExportImage>
+ *
+ * @param {Object} opts
+ *      - {UUID} id  Required.  The id of the image to export.
+ *      - {String} manta_path  Required.  The path in Manta to write the image.
+ * @param {Function} cb of the form `function (err, image, res)`
+ */
+CloudApi.prototype.exportImage = function exportImage(opts, cb) {
+    assert.uuid(opts.id, 'id');
+    assert.string(opts.manta_path, 'manta_path');
+    assert.func(cb, 'cb');
+    var data = {
+        action: 'export',
+        manta_path: opts.manta_path
+    };
 
+    this._request({
+        method: 'POST',
+        path: format('/%s/images/%s', this.account, opts.id),
+        data: data
+    }, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
 
 /**
  * Wait for an image to go one of a set of specfic states.
diff --git a/lib/do_image/do_export.js b/lib/do_image/do_export.js
new file mode 100644
index 0000000..1b811de
--- /dev/null
+++ b/lib/do_image/do_export.js
@@ -0,0 +1,133 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ *
+ * `triton image export ...`
+ */
+
+var assert = require('assert-plus');
+var format = require('util').format;
+var fs = require('fs');
+var strsplit = require('strsplit');
+var tabula = require('tabula');
+var vasync = require('vasync');
+
+var common = require('../common');
+var errors = require('../errors');
+
+// ---- the command
+
+function do_export(subcmd, opts, args, cb) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length !== 2) {
+        cb(new errors.UsageError(
+            'incorrect number of args: expect 2, got ' + args.length));
+        return;
+    }
+
+    var log = this.top.log;
+    var tritonapi = this.top.tritonapi;
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function getImage(ctx, next) {
+            tritonapi.getImage(args[0], function getRes(err, img) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                log.trace({image: img}, 'image export: img');
+                ctx.img = img;
+                next();
+            });
+        },
+        function exportImage(ctx, next) {
+            log.trace({ dryRun: opts.dry_run, manta_path: ctx.manta_path},
+                'image export path');
+
+            console.log('Exporting image %s@%s to %s',
+                ctx.img.name, ctx.img.version, args[1]);
+
+            if (!opts.dry_run) {
+                tritonapi.cloudapi.exportImage({
+                    id: ctx.img.id,
+                    manta_path: args[1]
+                }, function (err, path) {
+                    if (err) {
+                        next(new errors.TritonError(err,
+                            'error exporting image to manta'));
+                        return;
+                    }
+
+                    log.trace({path: path}, 'image export: path');
+                    ctx.path = path;
+                    next();
+                    return;
+                });
+            }
+        },
+        function outputResults(ctx, next) {
+            if (opts.json) {
+                console.log(JSON.stringify(ctx.path));
+            } else {
+                console.log('Manta URL: %s', ctx.path.manta_url);
+                console.log('Manifest path: %s', ctx.path.manifest_path);
+                console.log('Image path: %s', ctx.path.image_path);
+            }
+            next();
+            return;
+        }
+    ]}, function (err) {
+        cb(err);
+    });
+}
+
+do_export.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        group: 'Other options'
+    },
+    {
+        names: ['dry-run'],
+        type: 'bool',
+        help: 'Go through the motions without actually creating.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_export.synopses = [
+    '{{name}} {{cmd}} [OPTIONS] IMAGE MANTA_PATH'
+];
+
+do_export.help = [
+    /* BEGIN JSSTYLED */
+    'Export an image.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "IMAGE" is an image id (a full UUID), an image name (selects the',
+    'latest, by "published_at", image with that name), an image "name@version"',
+    '(selects latest match by "published_at"), or an image short ID (ID prefix).'
+    /* END JSSTYLED */
+].join('\n');
+
+do_export.completionArgtypes = ['tritonimage', 'none'];
+
+module.exports = do_export;
diff --git a/lib/do_image/index.js b/lib/do_image/index.js
index 35fb759..f427e6d 100644
--- a/lib/do_image/index.js
+++ b/lib/do_image/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  *
  * `triton image ...`
  */
@@ -35,6 +35,7 @@ function ImageCLI(top) {
             'get',
             'create',
             'delete',
+            'export',
             'wait'
         ]
     });
@@ -50,6 +51,7 @@ ImageCLI.prototype.do_list = require('./do_list');
 ImageCLI.prototype.do_get = require('./do_get');
 ImageCLI.prototype.do_create = require('./do_create');
 ImageCLI.prototype.do_delete = require('./do_delete');
+ImageCLI.prototype.do_export = require('./do_export');
 ImageCLI.prototype.do_wait = require('./do_wait');
 
 
