commit 579458a650498bca970f572dda474c1e45b82ca9
Author: bowrocker <jon.anderson@joyent.com>
Date:   2019-07-23T17:05:18+00:00 (3 months ago)
    
    MANTA-4423 Update rust-sharkspotter with new rust-moray API

diff --git a/Cargo.toml b/Cargo.toml
index 679b506..ccdf20e 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,7 +1,7 @@
 [package]
 name = "sharkspotter"
 version = "0.1.0"
-authors = ["Rui Loura <rui@joyent.com>"]
+authors = ["Rui Loura <rui@joyent.com>", "Jon Anderson <jon.anderson@joyent.com>"]
 edition = "2018"
 
 [dependencies]
@@ -10,5 +10,8 @@ serde = { version = "1.0.89", features = ["derive"] }
 serde_json = "1.0.39"
 clap = "2.33.0"
 libmanta = { git = "https://github.com/joyent/rust-libmanta" }
-moray = { git = "https://github.com/joyent/rust-moray", branch = "reconnect" }
+moray = { git = "https://github.com/joyent/rust-moray"}
+slog = { version = "2.5.2" }
+slog-bunyan = { git = "https://github.com/kellymclaughlin/bunyan", branch = "build-on-smartos" }
 trust-dns-resolver = "0.11.1"
+slog-term = "2.4.1"
diff --git a/src/lib.rs b/src/lib.rs
index af09354..a2e21a2 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -9,9 +9,9 @@ use libmanta::moray::MantaObject;
 use moray::client::MorayClient;
 use serde::Deserialize;
 use serde_json::{self, Value};
+use slog::Logger;
 use std::io::{Error, ErrorKind};
 use std::net::IpAddr;
-use std::str::FromStr;
 use trust_dns_resolver::Resolver;
 
 #[derive(Deserialize, Debug, Clone)]
@@ -114,13 +114,14 @@ fn iter_ids<F>(
     id_name: &str,
     moray_socket: &String,
     conf: &config::Config,
+    log: Logger,
     shard_num: u32,
     mut handler: F,
 ) -> Result<(), Error>
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
-    let mut mclient = MorayClient::from_str(moray_socket.as_str()).unwrap();
+    let mut mclient = MorayClient::from_str(moray_socket.as_str(), log, None).unwrap();
     let mut start_id = conf.begin;
     let mut end_id = conf.begin + conf.chunk_size - 1;
     let largest_id = match find_largest_id_value(&mut mclient, id_name) {
@@ -148,16 +149,6 @@ where
             &mut handler,
         ) {
             Ok(()) => (),
-            Err(ref e) if e.kind() == ErrorKind::UnexpectedEof => {
-                eprintln!("Reconnecting!");
-                mclient = match mclient.reconnect() {
-                    Ok(client) => client,
-                    Err(e) => {
-                        eprintln!("Failed to reconnect: {}", e);
-                        return Err(e);
-                    }
-                };
-            }
             Err(e) => return Err(e),
         };
 
@@ -182,7 +173,7 @@ where
     Ok(())
 }
 
-pub fn run<F>(conf: &config::Config, mut handler: F) -> Result<(), Error>
+pub fn run<F>(conf: &config::Config, log: Logger, mut handler: F) -> Result<(), Error>
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
@@ -197,8 +188,8 @@ where
 
         let moray_socket = format!("{}:{}", moray_ip.to_string(), 2021);
 
-        iter_ids("_id", &moray_socket, &conf, i, &mut handler)?;
-        iter_ids("_idx", &moray_socket, &conf, i, &mut handler)?;
+        iter_ids("_id", &moray_socket, &conf, log.clone(), i, &mut handler)?;
+        iter_ids("_idx", &moray_socket, &conf, log.clone(), i, &mut handler)?;
     }
 
     Ok(())
diff --git a/src/main.rs b/src/main.rs
index 0ba3649..ad1d783 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,6 +2,8 @@
 
 extern crate sharkspotter;
 
+
+use slog::{o, Logger, Drain};
 use std::collections::HashMap;
 use std::env;
 use std::fs::OpenOptions;
@@ -9,6 +11,7 @@ use std::io::prelude::*;
 use std::io::Error;
 use std::path::Path;
 use std::process;
+use std::sync::Mutex;
 
 use sharkspotter::config::Config;
 
@@ -18,6 +21,12 @@ fn main() -> Result<(), Error> {
         process::exit(1);
     });
 
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+
     let mut file_map = HashMap::new();
 
     for i in conf.min_shard..=conf.max_shard {
@@ -35,7 +44,7 @@ fn main() -> Result<(), Error> {
 
         file_map.insert(i, file);
     }
-    sharkspotter::run(&conf, |mobj, shard| {
+    sharkspotter::run(&conf, log, |mobj, shard| {
         println!("{} | {}", shard, mobj.object_id);
         let file = file_map.get_mut(&shard).unwrap();
         let buf = serde_json::to_string(&mobj)?;
