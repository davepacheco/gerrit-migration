From 8248c2136a91fb23f809976f68ae1e41cc6d3c69 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Tue, 1 Nov 2016 01:40:57 +0000
Subject: [PATCH] FWAPI-260 Tag names and values in rules need to be unescaped
 for comparisons

---
 src/fw/lib/cli.js                             |   7 +-
 src/fw/lib/filter.js                          |  26 +-
 src/fw/lib/fw.js                              |  79 +--
 src/fw/lib/fwadm.js                           |  20 +-
 src/fw/lib/rvm.js                             |   7 +-
 src/fw/lib/util/errors.js                     |   5 +-
 src/fw/lib/util/log.js                        |   7 +-
 src/fw/lib/util/obj.js                        |  20 +-
 src/fw/lib/util/vm.js                         |  41 +-
 src/fw/node_modules/fwrule/index.js           |  12 +-
 src/fw/node_modules/fwrule/parser.js          |   4 +-
 src/fw/node_modules/fwrule/rule.js            | 220 +++++++-
 src/fw/node_modules/fwrule/validators.js      |  18 +-
 src/fw/test/integration/examples.test.js      |   9 +-
 ...one-enabled.js => in-zone-enabled.test.js} |   0
 src/fw/test/lib/helpers.js                    |  31 +-
 src/fw/test/lib/mocks.js                      |  23 +-
 src/fw/test/lib/vm.js                         |   5 +-
 src/fw/test/unit/fw.test.js                   |   8 +-
 src/fw/test/unit/owner.test.js                |   7 +-
 src/fw/test/unit/remote-vms.test.js           |  24 +-
 src/fw/test/unit/tags.test.js                 | 199 ++++++-
 src/fw/test/unit/validate.test.js             |  10 +-
 src/fw/test/unit/wildcards.test.js            |   4 +-
 src/fw/tools/fwrule/Makefile                  |  30 +-
 src/fw/tools/fwrule/README.md                 |   4 +-
 src/fw/tools/fwrule/lib/index.js              |  12 +-
 src/fw/tools/fwrule/lib/parser.js             |   4 +-
 src/fw/tools/fwrule/lib/rule.js               | 220 +++++++-
 src/fw/tools/fwrule/lib/validators.js         |  18 +-
 src/fw/tools/fwrule/package.json              |  15 +-
 src/fw/tools/fwrule/src/fwrule.jison          |   3 +-
 src/fw/tools/fwrule/test/invalid.test.js      |  71 ++-
 src/fw/tools/fwrule/test/parser.test.js       | 326 +++++++++--
 src/fw/tools/fwrule/test/rule.test.js         | 530 ++++++++++++++----
 src/fw/tools/fwrule/test/run.js               |  24 +
 src/fw/tools/fwrule/test/validators.test.js   | 125 +++--
 src/fw/tools/fwrule/tools/eslint.node.conf    |  20 +
 src/fw/tools/fwrule/tools/jsl.node.conf       |   2 +-
 39 files changed, 1730 insertions(+), 460 deletions(-)
 rename src/fw/test/integration/{in-zone-enabled.js => in-zone-enabled.test.js} (100%)
 create mode 100644 src/fw/tools/fwrule/test/run.js
 create mode 100644 src/fw/tools/fwrule/tools/eslint.node.conf

diff --git a/src/fw/lib/cli.js b/src/fw/lib/cli.js
index 1dfb1778..b82eb920 100644
--- a/src/fw/lib/cli.js
+++ b/src/fw/lib/cli.js
@@ -28,12 +28,15 @@
 
 var cmdln = require('cmdln');
 var fs = require('fs');
+var mod_obj = require('./util/obj');
 var tab = require('tab');
 var tty = require('tty');
 var util = require('util');
 var verror = require('verror');
 
 
+var hasKey = mod_obj.hasKey;
+
 
 // --- Globals
 
@@ -205,7 +208,7 @@ function outputError(err, opts) {
     var errs = [ err ];
 
     OUTPUT_ERROR = true;
-    if (err.hasOwnProperty('ase_errors')) {
+    if (hasKey(err, 'ase_errors')) {
         errs = err.ase_errors;
     }
 
@@ -213,7 +216,7 @@ function outputError(err, opts) {
         return console.error(json({
             errors: errs.map(function (e) {
                 var j = { message: e.message };
-                if (e.hasOwnProperty('code')) {
+                if (hasKey(e, 'code')) {
                     j.code = e.code;
                 }
 
diff --git a/src/fw/lib/filter.js b/src/fw/lib/filter.js
index ae7ef15f..617dc35b 100644
--- a/src/fw/lib/filter.js
+++ b/src/fw/lib/filter.js
@@ -20,15 +20,19 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: functions for filtering rules and remote VMs
  */
 
 var assert = require('assert-plus');
+var mod_obj = require('./util/obj');
 var mod_rvm = require('./rvm');
-var objEmpty = require('./util/obj').objEmpty;
+
+
+var hasKey = mod_obj.hasKey;
+var objEmpty = mod_obj.objEmpty;
 
 
 
@@ -101,9 +105,9 @@ function rulesByRVMs(remoteVMs, rules, log, callback) {
             return;
         }
 
-        if (remoteVMs[type].hasOwnProperty(t)
+        if (hasKey(remoteVMs[type], t)
             && !objEmpty(remoteVMs[type][t])) {
-            if (!rule.hasOwnProperty('owner_uuid')) {
+            if (!hasKey(rule, 'owner_uuid')) {
                 pushRule(rule);
                 return;
             }
@@ -152,7 +156,7 @@ function rulesByUUIDs(rules, uuids, log, callback) {
     }, {});
 
     rules.forEach(function (rule) {
-        if (uuidHash.hasOwnProperty(rule.uuid)) {
+        if (hasKey(uuidHash, rule.uuid)) {
             delete uuidHash[rule.uuid];
             results.matching.push(rule);
         } else {
@@ -192,14 +196,14 @@ function rulesByVMs(allVMs, vms, rules, log, callback) {
         log.trace('filter.rulesByVMs: type=%s, t=%s, rule=%s',
             type, t, rule);
 
-        if (!allVMs[type].hasOwnProperty(t)) {
+        if (!hasKey(allVMs[type], t)) {
             return;
         }
 
         var vmList = allVMs[type][t];
 
         if (val) {
-            if (!allVMs[type][t].hasOwnProperty(val)) {
+            if (!hasKey(allVMs[type][t], val)) {
                 return;
             }
             vmList = allVMs[type][t][val];
@@ -208,7 +212,7 @@ function rulesByVMs(allVMs, vms, rules, log, callback) {
         var owner = rule.owner_uuid;
 
         for (var uuid in vmList) {
-            if (!vms.hasOwnProperty(uuid)) {
+            if (!hasKey(vms, uuid)) {
                 continue;
             }
 
@@ -301,7 +305,7 @@ function vmsByRules(opts, callback) {
     var matchingVMs = {};
     var vms = opts.vms;
 
-    if (opts.hasOwnProperty('includeDisabled')) {
+    if (hasKey(opts, 'includeDisabled')) {
         includeDisabled = opts.includeDisabled;
     }
 
@@ -314,7 +318,7 @@ function vmsByRules(opts, callback) {
             return;
         }
 
-        if (!vms[type].hasOwnProperty(t)) {
+        if (!hasKey(vms[type], t)) {
             opts.log.trace(
                 'filter.vmsByRules: type=%s, t=%s, rule=%s: not in VM hash',
                 type, t, rule);
@@ -323,7 +327,7 @@ function vmsByRules(opts, callback) {
 
         var vmList = vms[type][t];
         if (val) {
-            if (!vms[type][t].hasOwnProperty(val)) {
+            if (!hasKey(vms[type][t], val)) {
                 return;
             }
             vmList = vms[type][t][val];
diff --git a/src/fw/lib/fw.js b/src/fw/lib/fw.js
index a1af9b37..284dcd69 100644
--- a/src/fw/lib/fw.js
+++ b/src/fw/lib/fw.js
@@ -48,6 +48,7 @@ var verror = require('verror');
 
 var createSubObjects = mod_obj.createSubObjects;
 var forEachKey = mod_obj.forEachKey;
+var hasKey = mod_obj.hasKey;
 var objEmpty = mod_obj.objEmpty;
 var mergeObjects = mod_obj.mergeObjects;
 
@@ -140,7 +141,7 @@ function ruleTypeDirWalk(rules, cb) {
     rules.forEach(function (rule) {
         DIRECTIONS.forEach(function (dir) {
             ['ips', 'tags', 'vms'].forEach(function (type) {
-                if (rule[dir].hasOwnProperty(type)) {
+                if (hasKey(rule[dir], type)) {
                     rule[dir][type].forEach(function (t) {
                         cb(rule, dir, type, t);
                     });
@@ -160,7 +161,7 @@ function dedupRules(list1, list2) {
     var toReturn = [];
 
     list1.concat(list2).forEach(function (r) {
-        if (r.hasOwnProperty('uuid') && !seenUUIDs.hasOwnProperty(r.uuid)) {
+        if (hasKey(r, 'uuid') && !hasKey(seenUUIDs, r.uuid)) {
             toReturn.push(r);
             seenUUIDs[r.uuid] = 1;
         }
@@ -176,7 +177,7 @@ function dedupRules(list1, list2) {
  */
 function getChangingRules(rules, existingRules, cb) {
     var changing = rules.filter(function (rule) {
-        if (!existingRules.hasOwnProperty(rule.uuid)) {
+        if (!hasKey(existingRules, rule.uuid)) {
             return true;
         }
         return !mod_obj.shallowObjEqual(rule.serialize(),
@@ -286,11 +287,11 @@ function createRules(inRules, createdBy, callback) {
 
     inRules.forEach(function (payloadRule) {
         var rule = clone(payloadRule);
-        if (!rule.hasOwnProperty('version')) {
+        if (!hasKey(rule, 'version')) {
             rule.version = ver;
         }
 
-        if (createdBy && !rule.hasOwnProperty('created_by')) {
+        if (createdBy && !hasKey(rule, 'created_by')) {
             rule.created_by = createdBy;
         }
 
@@ -331,31 +332,31 @@ function createUpdatedRules(opts, log, callback) {
     updatedRules.forEach(function (rule) {
         // Assume that we're allowed to do adds - findRules() would have errored
         // out if allowAdds was unset and an add was attempted
-        if (!rule.hasOwnProperty('version')) {
+        if (!hasKey(rule, 'version')) {
             rule.version = ver;
         }
 
-        if (opts.createdBy && !rule.hasOwnProperty('created_by')) {
+        if (opts.createdBy && !hasKey(rule, 'created_by')) {
             rule.created_by = opts.createdBy;
         }
 
-        if (originals.hasOwnProperty(rule.uuid)) {
+        if (hasKey(originals, rule.uuid)) {
             origRule = originals[rule.uuid].serialize();
             mergedRule = mergeObjects(rule, origRule);
 
-            if (!(rule.hasOwnProperty('owner_uuid')
-                && rule.hasOwnProperty('global'))) {
+            if (!(hasKey(rule, 'owner_uuid')
+                && hasKey(rule, 'global'))) {
                 // If both owner_uuid and global are set - let
                 // this bubble up the appropriate error in createRules()
 
-                if (rule.hasOwnProperty('owner_uuid')
-                    && origRule.hasOwnProperty('global')) {
+                if (hasKey(rule, 'owner_uuid')
+                    && hasKey(origRule, 'global')) {
                     // Updating from global -> owner_uuid rule
                     delete mergedRule.global;
                 }
 
-                if (rule.hasOwnProperty('global')
-                    && origRule.hasOwnProperty('owner_uuid')) {
+                if (hasKey(rule, 'global')
+                    && hasKey(origRule, 'owner_uuid')) {
                     // Updating from owner_uuid -> global rule
                     delete mergedRule.owner_uuid;
                 }
@@ -425,7 +426,7 @@ function createVMlookup(vms, log, callback) {
     vms.forEach(function (fullVM) {
         var missing = [];
         VM_FIELDS_REQUIRED.forEach(function (field) {
-            if (!fullVM.hasOwnProperty(field)) {
+            if (!hasKey(fullVM, field)) {
                 missing.push(field);
             }
         });
@@ -462,7 +463,7 @@ function createVMlookup(vms, log, callback) {
         var truncated = { };
         ['vms', 'tags', 'ips'].forEach(function (type) {
             truncated[type] = {};
-            if (!vmStore.hasOwnProperty(type)) {
+            if (!hasKey(vmStore, type)) {
                 return;
             }
 
@@ -712,12 +713,12 @@ function findRules(opts, log, callback) {
     var missing = {};
 
     rules.forEach(function (r) {
-        if (!r.hasOwnProperty('uuid')) {
+        if (!hasKey(r, 'uuid')) {
             errs.push(new verror.VError('Missing UUID of rule: %j', r));
             return;
         }
 
-        if (allRules.hasOwnProperty(r.uuid)) {
+        if (hasKey(allRules, r.uuid)) {
             found[r.uuid] = allRules[r.uuid];
         } else {
             missing[r.uuid] = 1;
@@ -765,11 +766,11 @@ function lookupVMs(allVMs, vms, log, callback) {
     var toReturn = {};
     var errs = [];
     vms.forEach(function (vm) {
-        if (!vm.hasOwnProperty('uuid')) {
+        if (!hasKey(vm, 'uuid')) {
             errs.push(new verror.VError('VM missing uuid property: %j', vm));
             return;
         }
-        if (!allVMs.all.hasOwnProperty(vm.uuid)) {
+        if (!hasKey(allVMs.all, vm.uuid)) {
             errs.push(new verror.VError('Could not find VM "%s" in VM list',
                 vm.uuid));
             return;
@@ -825,13 +826,13 @@ function validateRules(vms, rvms, rules, log, callback) {
         createSubObjects(sideData, rule.uuid, dir, 'missing', type);
         createSubObjects(sideData, rule.uuid, dir, 'vms');
 
-        if (vms[type].hasOwnProperty(t)) {
+        if (hasKey(vms[type], t)) {
             for (var vm in vms[type][t]) {
                 sideData[rule.uuid][dir].vms[vm] = 1;
             }
             delete rulesLeft[rule.uuid];
 
-        } else if (rvms[type].hasOwnProperty(t)) {
+        } else if (hasKey(rvms[type], t)) {
             delete rulesLeft[rule.uuid];
 
         } else {
@@ -854,8 +855,8 @@ function validateRules(vms, rvms, rules, log, callback) {
         DIRECTIONS.forEach(function (dir) {
             var otherSide = (dir == 'to' ? 'from' : 'to');
 
-            if (!missing.hasOwnProperty(dir) || objEmpty(missing[dir].vms)
-                || !missing.hasOwnProperty(otherSide)) {
+            if (!hasKey(missing, dir) || objEmpty(missing[dir].vms)
+                || !hasKey(missing, otherSide)) {
                 return;
             }
 
@@ -888,8 +889,8 @@ function protoTarget(rule, target) {
         return 'icmp-type ' + typeArr[0]
             + (typeArr.length === 1 ? '' : ' code ' + typeArr[1]);
     } else {
-        if (target.hasOwnProperty('start')
-            && target.hasOwnProperty('end')) {
+        if (hasKey(target, 'start')
+            && hasKey(target, 'end')) {
 
             return 'port ' + target.start + ' : ' + target.end;
         } else {
@@ -1037,7 +1038,7 @@ function prepareIPFdata(opts, log, callback) {
                 }
 
                 otherSideRules.forEach(function (oRule) {
-                    if (!conf.hasOwnProperty(uuid)) {
+                    if (!hasKey(conf, uuid)) {
                         return;
                     }
 
@@ -1065,7 +1066,7 @@ function prepareIPFdata(opts, log, callback) {
 
         // XXX: sort here
         conf[vm].forEach(function (sortObj) {
-            if (!rulesIncluded.hasOwnProperty(sortObj.uuid)) {
+            if (!hasKey(rulesIncluded, sortObj.uuid)) {
                 rulesIncluded[sortObj.uuid] = [];
             }
             rulesIncluded[sortObj.uuid].push(sortObj.direction);
@@ -1110,21 +1111,21 @@ function vmsOnSide(allVMs, rule, dir, log) {
                 return;
             }
 
-            if (!allVMs[type] || !allVMs[type].hasOwnProperty(t)) {
+            if (!allVMs[type] || !hasKey(allVMs[type], t)) {
                 log.debug('No matching VMs found in lookup for %s=%s', type, t);
                 return;
             }
 
             var vmList = allVMs[type][t];
             if (value !== undefined) {
-                if (!vmList.hasOwnProperty(value)) {
+                if (!hasKey(vmList, value)) {
                     return;
                 }
                 vmList = vmList[value];
             }
 
             Object.keys(vmList).forEach(function (uuid) {
-                if (rule.hasOwnProperty('owner_uuid')
+                if (hasKey(rule, 'owner_uuid')
                     && (rule.owner_uuid != vmList[uuid].owner_uuid)) {
                     return;
                 }
@@ -1188,14 +1189,14 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
             }
 
             [localVMs, remoteVMs].forEach(function (lookup) {
-                if (!lookup.hasOwnProperty(typePlural)
-                    || !lookup[typePlural].hasOwnProperty(value)) {
+                if (!hasKey(lookup, typePlural)
+                    || !hasKey(lookup[typePlural], value)) {
                     return;
                 }
 
                 var vmList = lookup[typePlural][value];
                 if (t !== undefined) {
-                    if (!vmList.hasOwnProperty(t)) {
+                    if (!hasKey(vmList, t)) {
                         return;
                     }
                     vmList = vmList[t];
@@ -1236,7 +1237,7 @@ function addOtherSideRemoteTargets(vms, rule, targets, dir, log) {
 
     var otherSide = dir === 'from' ? 'to' : 'from';
     if (rule[otherSide].tags.length !== 0) {
-        if (!targets.hasOwnProperty('tags')) {
+        if (!hasKey(targets, 'tags')) {
             targets.tags = {};
         }
 
@@ -1251,7 +1252,7 @@ function addOtherSideRemoteTargets(vms, rule, targets, dir, log) {
                 val = tag[1];
             }
 
-            if (!targets.tags.hasOwnProperty(key)) {
+            if (!hasKey(targets.tags, key)) {
                 targets.tags[key] = val;
             } else {
                 if (targets.tags[key] !== true) {
@@ -1272,13 +1273,13 @@ function addOtherSideRemoteTargets(vms, rule, targets, dir, log) {
     }
 
     if (rule[otherSide].vms.length !== 0) {
-        if (!targets.hasOwnProperty('vms')) {
+        if (!hasKey(targets, 'vms')) {
             targets.vms = {};
         }
 
         rule[otherSide].vms.forEach(function (vm) {
             // Don't add if it's a local VM
-            if (!vms.all.hasOwnProperty(vm)) {
+            if (!hasKey(vms.all, vm)) {
                 targets.vms[vm] = true;
             }
         });
@@ -2486,7 +2487,7 @@ function getRemoteTargets(opts, callback) {
             }
         }
 
-        if (targets.hasOwnProperty('vms')) {
+        if (hasKey(targets, 'vms')) {
             targets.vms = Object.keys(targets.vms);
             if (targets.vms.length === 0) {
                 delete targets.vms;
diff --git a/src/fw/lib/fwadm.js b/src/fw/lib/fwadm.js
index 1e3aff00..c0a7d98f 100644
--- a/src/fw/lib/fwadm.js
+++ b/src/fw/lib/fwadm.js
@@ -42,6 +42,8 @@ var verror = require('verror');
 var VM = require('/usr/vm/node_modules/VM');
 
 
+var hasKey = util_obj.hasKey;
+
 
 // --- Globals
 
@@ -137,11 +139,11 @@ function preparePayload(opts, payload) {
 
         // Allow doing this:
         //   echo '{ ... }' | fwadm add|update
-        if (newOpts.hasOwnProperty('rule')
-            || newOpts.hasOwnProperty('enabled')
-            || newOpts.hasOwnProperty('description')
-            || newOpts.hasOwnProperty('owner_uuid')
-            || newOpts.hasOwnProperty('version')) {
+        if (hasKey(newOpts, 'rule')
+            || hasKey(newOpts, 'enabled')
+            || hasKey(newOpts, 'description')
+            || hasKey(newOpts, 'owner_uuid')
+            || hasKey(newOpts, 'version')) {
             // Trying to add a single rule, and nothing else
             newOpts = { rules: [ newOpts ] };
         }
@@ -189,7 +191,7 @@ function ruleOutput(err, res, opts, action) {
         return console.log(cli.json(res));
     }
 
-    if (opts && opts.stdout && res.hasOwnProperty('files')) {
+    if (opts && opts.stdout && hasKey(res, 'files')) {
         for (var f in res.files) {
             console.log('=== %s', f);
             console.log(res.files[f]);
@@ -360,7 +362,7 @@ Fwadm.prototype.do_add_rvm = function (subcmd, opts, args, callback) {
                 vms: state.vms
             };
 
-            if (state.payload.hasOwnProperty('remoteVMs')) {
+            if (hasKey(state.payload, 'remoteVMs')) {
                 // formatted like it was being passed to 'fwadm add'
                 addOpts.remoteVMs = state.payload.remoteVMs;
             } else {
@@ -446,7 +448,7 @@ Fwadm.prototype.do_update = function (subcmd, opts, args, callback) {
 
         // Allow doing an 'update <uuid>' instead of requiring the UUID be in
         // the payload:
-        if (id && updatePayload.hasOwnProperty('rules')
+        if (id && hasKey(updatePayload, 'rules')
             && updatePayload.rules.length === 1) {
             updatePayload.rules[0].uuid = cli.validateUUID(id);
         }
@@ -877,7 +879,7 @@ for (var cmd in HELP) {
     var proto = Fwadm.prototype[do_key];
     proto = Fwadm.prototype[do_key] = wrapSubcmd(proto);
     proto.help = info.summary + '\n\n{{usage}}\n\n{{options}}';
-    if (info.hasOwnProperty('examples')) {
+    if (hasKey(info, 'examples')) {
         proto.help += '\n\nExamples:\n\n' + info.examples;
     }
 
diff --git a/src/fw/lib/rvm.js b/src/fw/lib/rvm.js
index cbc11b1a..6331d9a0 100644
--- a/src/fw/lib/rvm.js
+++ b/src/fw/lib/rvm.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: functions for manipulating remote VMs
@@ -40,6 +40,7 @@ var VError = require('verror').VError;
 
 var createSubObjects = util_obj.createSubObjects;
 var forEachKey = util_obj.forEachKey;
+var hasKey = util_obj.hasKey;
 
 
 
@@ -79,7 +80,7 @@ function create(opts, vms, callback) {
     vms.forEach(function (vm) {
         try {
             var rvm = util_vm.createRemoteVM(vm);
-            if (opts.allVMs.all.hasOwnProperty(rvm.uuid)) {
+            if (hasKey(opts.allVMs.all, rvm.uuid)) {
                 var err = new VError(
                     'Remote VM "%s" must not have the same UUID as a local VM',
                     rvm.uuid);
@@ -143,7 +144,7 @@ function createLookup(remoteVMs, log) {
             rvmLookup.vms[uuid] = {};
             rvmLookup.vms[uuid][uuid] = rvm;
 
-            if (rvm.hasOwnProperty('tags')) {
+            if (hasKey(rvm, 'tags')) {
                 forEachKey(rvm.tags, function (tag, val) {
                     createSubObjects(rvmLookup.tags, tag, uuid, rvm);
                     createSubObjects(rvmLookup, 'tagValues', tag, val,
diff --git a/src/fw/lib/util/errors.js b/src/fw/lib/util/errors.js
index 2738c44d..e1c030b5 100644
--- a/src/fw/lib/util/errors.js
+++ b/src/fw/lib/util/errors.js
@@ -26,9 +26,12 @@
  * fwadm: errors
  */
 
+var mod_obj = require('./obj');
 var verror = require('verror');
 
 
+var hasKey = mod_obj.hasKey;
+
 
 // --- Exports
 
@@ -47,7 +50,7 @@ function createMultiError(errs) {
     var err = new verror.MultiError(errs);
 
     errs.forEach(function (e) {
-        if (e.hasOwnProperty('details')) {
+        if (hasKey(e, 'details')) {
             details.push(e.details);
         }
     });
diff --git a/src/fw/lib/util/log.js b/src/fw/lib/util/log.js
index 11bed3fc..1a9d82f3 100644
--- a/src/fw/lib/util/log.js
+++ b/src/fw/lib/util/log.js
@@ -31,6 +31,7 @@ var bunyan;
 var events = require('events');
 var fs = require('fs');
 var mkdirp = require('mkdirp');
+var mod_obj = require('./obj');
 var mod_uuid = require('node-uuid');
 var path = require('path');
 var sprintf = require('extsprintf').sprintf;
@@ -38,6 +39,8 @@ var util = require('util');
 var vasync = require('vasync');
 
 
+var hasKey = mod_obj.hasKey;
+
 
 // --- Globals
 
@@ -126,7 +129,7 @@ function vmSerializer(vms) {
         }
 
         return vms.map(function (v) {
-            return v.hasOwnProperty('uuid') ? v.uuid : v;
+            return hasKey(v, 'uuid') ? v.uuid : v;
         });
     }
 
@@ -412,7 +415,7 @@ function logEntry(opts, action, readOnly) {
  * Log error and suberrors on API endpoint exit
  */
 function finishErr(log, err, msg) {
-    if (err.hasOwnProperty('ase_errors')) {
+    if (hasKey(err, 'ase_errors')) {
         for (var e in err.ase_errors) {
             log.error(err.ase_errors[e], msg + ': err %d/%d',
                 Number(e) + 1, err.ase_errors.length);
diff --git a/src/fw/lib/util/obj.js b/src/fw/lib/util/obj.js
index 04f7e126..b0741820 100644
--- a/src/fw/lib/util/obj.js
+++ b/src/fw/lib/util/obj.js
@@ -31,18 +31,25 @@
 // --- Exports
 
 
+/**
+ * Safely check if an object has a property
+ */
+function hasKey(obj, prop) {
+    return Object.prototype.hasOwnProperty.call(obj, prop);
+}
+
 
 /**
  * Adds to a 3-level deep object
  */
 function addToObj3(hash, key1, key2, key3, obj) {
-    if (!hash.hasOwnProperty(key1)) {
+    if (!hasKey(hash, key1)) {
         hash[key1] = {};
     }
-    if (!hash[key1].hasOwnProperty(key2)) {
+    if (!hasKey(hash[key1], key2)) {
         hash[key1][key2] = {};
     }
-    if (!hash[key1][key2].hasOwnProperty(key3)) {
+    if (!hasKey(hash[key1][key2], key3)) {
         hash[key1][key2][key3] = obj;
     }
 }
@@ -63,7 +70,7 @@ function createSubObjects() {
             return;
         }
 
-        if (!h.hasOwnProperty(arguments[i])) {
+        if (!hasKey(h, arguments[i])) {
             h[arguments[i]] = {};
         }
         prev = h;
@@ -126,7 +133,7 @@ function objValues(obj) {
 function shallowObjEqual(obj1, obj2) {
     var field;
     for (field in obj1) {
-        if (!obj2.hasOwnProperty(field))
+        if (!hasKey(obj2, field))
             return false;
 
         if (obj1[field] !== obj2[field]) {
@@ -135,7 +142,7 @@ function shallowObjEqual(obj1, obj2) {
     }
 
     for (field in obj2) {
-        if (!obj1.hasOwnProperty(field))
+        if (!hasKey(obj1, field))
             return false;
     }
 
@@ -147,6 +154,7 @@ module.exports = {
     addToObj3: addToObj3,
     createSubObjects: createSubObjects,
     forEachKey: forEachKey,
+    hasKey: hasKey,
     mergeObjects: mergeObjects,
     shallowObjEqual: shallowObjEqual,
     values: objValues,
diff --git a/src/fw/lib/util/vm.js b/src/fw/lib/util/vm.js
index 49042a4c..f27ebe04 100644
--- a/src/fw/lib/util/vm.js
+++ b/src/fw/lib/util/vm.js
@@ -27,15 +27,29 @@
  */
 
 var mod_net = require('net');
-var objEmpty = require('./obj').objEmpty;
+var mod_obj = require('./obj');
 var VError = require('verror').VError;
 
+
+var objEmpty = mod_obj.objEmpty;
+var hasKey = mod_obj.hasKey;
+
+
+var UUID_REGEX =
+    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
+
+
+function validUUID(uuid) {
+    return UUID_REGEX.test(uuid);
+}
+
+
 function getIPs(n) {
-    if (n.hasOwnProperty('ips')) {
+    if (hasKey(n, 'ips')) {
         return n.ips.map(function (ip) {
             return ip.split('/')[0];
         });
-    } else if (n.hasOwnProperty('ip')) {
+    } else if (hasKey(n, 'ip')) {
         return [n.ip];
     } else {
         return [];
@@ -76,15 +90,22 @@ function createRemoteVM(vm) {
         err.details = vm;
         throw err;
     }
+
+    if (!validUUID(uuid)) {
+        err = new VError('Invalid Remote VM UUID: %s', uuid);
+        err.details = vm;
+        throw err;
+    }
+
     rvm.uuid = uuid;
 
-    if (vm.hasOwnProperty('nics')) {
+    if (hasKey(vm, 'nics')) {
         ipsFromNICs(vm.nics).forEach(function (ip) {
             ips[ip] = 1;
         });
     }
 
-    if (vm.hasOwnProperty('ips')) {
+    if (hasKey(vm, 'ips')) {
         vm.ips.forEach(function (ip) {
             ips[ip] = 1;
         });
@@ -100,15 +121,19 @@ function createRemoteVM(vm) {
         }
     });
 
-    if (vm.hasOwnProperty('tags') && !objEmpty(vm.tags)) {
+    if (hasKey(vm, 'tags') && !objEmpty(vm.tags)) {
         rvm.tags = {};
         for (var t in vm.tags) {
             rvm.tags[t] = vm.tags[t];
         }
     }
 
-    if (vm.hasOwnProperty('owner_uuid')) {
-        // XXX: validate UUID
+    if (hasKey(vm, 'owner_uuid')) {
+        if (!validUUID(vm.owner_uuid)) {
+            err = new VError('Invalid owner UUID: %s', vm.owner_uuid);
+            err.details = vm;
+            throw err;
+        }
         rvm.owner_uuid = vm.owner_uuid;
     }
 
diff --git a/src/fw/node_modules/fwrule/index.js b/src/fw/node_modules/fwrule/index.js
index e219748d..f42f6a92 100644
--- a/src/fw/node_modules/fwrule/index.js
+++ b/src/fw/node_modules/fwrule/index.js
@@ -26,11 +26,12 @@
  * firewall rule parser: entry point
  */
 
+'use strict';
+
 var mod_net = require('net');
 var parser = require('./parser').parser;
 var rule = require('./rule');
 var validators = require('./validators');
-var VError = require('verror').VError;
 
 
 
@@ -39,7 +40,6 @@ var VError = require('verror').VError;
 
 
 var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var portRE = /^[0-9]{1,5}$/;
 
 /**
  * The fwrule language is versioned so that use of new features can be
@@ -109,8 +109,8 @@ parser.yy.validateIPv6address = function validateIPv6address(ip) {
 };
 
 
-parser.yy.validateIPv6subnet = function validateIPv6subnet(ip, subnet) {
-    if (!validators.validateIPv6subnet(ip, subnet)) {
+parser.yy.validateIPv6subnet = function validateIPv6subnet(subnet) {
+    if (!validators.validateIPv6subnet(subnet)) {
         throw new validators.InvalidParamError('rule',
             'Subnet "%s" is invalid (must be in CIDR format)', subnet);
     }
@@ -182,7 +182,7 @@ parser.yy.validateOKVersion = function validateOKVersion(ver, feature) {
 };
 
 
-parser.yy.parseError = function parseError(str, details) {
+parser.yy.parseError = function parseError(_, details) {
     var err;
     if (details.token === null) {
         var pre = this.yy.lexer.pastInput();
@@ -216,6 +216,8 @@ parser.yy.parseError = function parseError(str, details) {
 };
 
 
+parser.yy.tagUnescape = rule.tagUnescape;
+
 
 // --- Exports
 
diff --git a/src/fw/node_modules/fwrule/parser.js b/src/fw/node_modules/fwrule/parser.js
index 4e7b5900..f50b0abc 100644
--- a/src/fw/node_modules/fwrule/parser.js
+++ b/src/fw/node_modules/fwrule/parser.js
@@ -522,7 +522,7 @@ case 47:return 63;
 break;
 case 48:return 63;
 break;
-case 49:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 37;
+case 49:yy_.yytext = yy.tagUnescape(yy_.yytext.substr(1,yy_.yyleng-2)); return 37;
 break;
 case 50:return 27;
 break;
@@ -534,7 +534,7 @@ case 53:return 33
 break;
 }
 },
-rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
+rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:\\["bfnrt/()\\]|\\u[a-fA-F0-9]{4}|[^"\\])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
 conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
 };
 return lexer;
diff --git a/src/fw/node_modules/fwrule/rule.js b/src/fw/node_modules/fwrule/rule.js
index 71bdf7c1..d9eab021 100644
--- a/src/fw/node_modules/fwrule/rule.js
+++ b/src/fw/node_modules/fwrule/rule.js
@@ -26,6 +26,8 @@
  * fwadm: firewall rule model
  */
 
+'use strict';
+
 var mod_net = require('net');
 var mod_uuid = require('node-uuid');
 var sprintf = require('extsprintf').sprintf;
@@ -63,23 +65,30 @@ var icmpr = /^icmp6?$/;
 // --- Internal functions
 
 
+/**
+ * Safely check if an object has a property
+ */
+function hasOwnProperty(obj, prop) {
+    return Object.prototype.hasOwnProperty.call(obj, prop);
+}
+
 
 /**
  * Calls callback for all of the firewall target types
  */
 function forEachTarget(obj, callback) {
     DIRECTIONS.forEach(function (dir) {
-        if (!obj.hasOwnProperty(dir)) {
+        if (!hasOwnProperty(obj, dir)) {
             return;
         }
 
         TARGET_TYPES.forEach(function (type) {
             var name = type + 's';
-            if (!obj[dir].hasOwnProperty(name)) {
+            if (!hasOwnProperty(obj[dir], name)) {
                 return;
             }
 
-            callback(dir, type, type, obj[dir][name]);
+            callback(dir, type, name, obj[dir][name]);
         });
     });
 }
@@ -105,7 +114,7 @@ function icmpTypeSort(types) {
  * Adds a tag to an object
  */
 function addTag(obj, tag, val) {
-    if (!obj.hasOwnProperty(tag)) {
+    if (!hasOwnProperty(obj, tag)) {
         obj[tag] = {};
     }
 
@@ -114,7 +123,7 @@ function addTag(obj, tag, val) {
         return;
     }
 
-    if (!obj[tag].hasOwnProperty('values')) {
+    if (!hasOwnProperty(obj[tag], 'values')) {
         obj[tag].values = {};
     }
 
@@ -128,7 +137,7 @@ function addTag(obj, tag, val) {
 function tagList(obj) {
     var tags = [];
     Object.keys(obj).sort().forEach(function (tag) {
-        if (obj[tag].hasOwnProperty('all')) {
+        if (hasOwnProperty(obj[tag], 'all')) {
             tags.push(tag);
         } else {
             Object.keys(obj[tag].values).sort().forEach(function (val) {
@@ -141,15 +150,164 @@ function tagList(obj) {
 
 
 /**
- * Quotes a string if it contains non-alphanumeric characters
+ * The following characters are allowed to come after an escape, and get
+ * escaped when producing rule text.
+ *
+ * Parentheses don't need to be escaped with newer parsers, but will cause
+ * errors with older parsers which expect them to be escaped. We therefore
+ * always escape them when generating rule text, to make sure we don't
+ * cause issues for older parsers.
  */
-function quote(str) {
-    var WORD_RE = /[^-a-zA-Z0-9_]/;
-    if (str.search(WORD_RE) !== -1) {
-        return '"' + str + '"';
+var escapes = {
+    '"': '"',
+    'b': '\b',
+    'f': '\f',
+    'n': '\n',
+    'r': '\r',
+    't': '\t',
+    '/': '/',
+    '(': '(',
+    ')': ')',
+    '\\': '\\'
+};
+
+
+/**
+ * When producing text versions of a rule, we escape Unicode whitespace
+ * characters. These characters don't need to be escaped, but we do so
+ * to reduce the chance that an operator will look at a rule and mistake
+ * any of them for the ASCII space character (\u0020), or not see them
+ * because they're non-printing.
+ */
+var unescapes = {
+    // Things that need to be escaped for the fwrule parser
+    '"': '"',
+    '(': '(',
+    ')': ')',
+    '\\': '\\',
+
+    // Special ASCII characters we don't want to print
+    '\u0000': 'u0000', // null (NUL)
+    '\u0001': 'u0001', // start of heading (SOH)
+    '\u0002': 'u0002', // start of text (STX)
+    '\u0003': 'u0003', // end of text (ETX)
+    '\u0004': 'u0004', // end of transmission (EOT)
+    '\u0005': 'u0005', // enquiry (ENQ)
+    '\u0006': 'u0006', // acknowledgement (ACK)
+    '\u0007': 'u0007', // bell (BEL)
+    '\u0008': 'b',     // backspace (BS)
+    '\u0009': 't',     // horizontal tab (HT)
+    '\u000A': 'n',     // newline (NL)
+    '\u000B': 'u000B', // vertical tab (VT)
+    '\u000C': 'f',     // form feed/next page (NP)
+    '\u000D': 'r',     // carriage return (CR)
+    '\u000E': 'u000E', // shift out (SO)
+    '\u000F': 'u000F', // shift in (SI)
+    '\u0010': 'u0010', // data link escape (DLE)
+    '\u0011': 'u0011', // device control 1 (DC1)/XON
+    '\u0012': 'u0012', // device control 2 (DC2)
+    '\u0013': 'u0013', // device control 3 (DC3)/XOFF
+    '\u0014': 'u0014', // device control 4 (DC4)
+    '\u0015': 'u0015', // negative acknowledgement (NAK)
+    '\u0016': 'u0016', // synchronous idle (SYN)
+    '\u0017': 'u0017', // end of transmission block (ETB)
+    '\u0018': 'u0018', // cancel (CAN)
+    '\u0019': 'u0019', // end of medium (EM)
+    '\u001A': 'u001A', // substitute (SUB)
+    '\u001B': 'u001B', // escape (ESC)
+    '\u001C': 'u001C', // file separator (FS)
+    '\u001D': 'u001D', // group separator (GS)
+    '\u001E': 'u001E', // record separator (RS)
+    '\u001F': 'u001F', // unit separator (US)
+    '\u007F': 'u007F', // delete (DEL)
+
+    // Unicode whitespace characters
+    '\u0085': 'u0085', // next line
+    '\u00A0': 'u00A0', // non-breaking space
+    '\u1680': 'u1680', // ogham space mark
+    '\u180E': 'u180E', // mongolian vowel separator
+    '\u2000': 'u2000', // en quad
+    '\u2001': 'u2001', // em quad
+    '\u2002': 'u2002', // en space
+    '\u2003': 'u2003', // em space
+    '\u2004': 'u2004', // three-per-em space
+    '\u2005': 'u2005', // four-per-em space
+    '\u2006': 'u2006', // six-per-em space
+    '\u2007': 'u2007', // figure space
+    '\u2008': 'u2008', // punctuation space
+    '\u2009': 'u2009', // thin space
+    '\u200A': 'u200A', // hair space
+    '\u200B': 'u200B', // zero width space
+    '\u200C': 'u200C', // zero width non-joiner
+    '\u200D': 'u200D', // zero width joiner
+    '\u2028': 'u2028', // line separator
+    '\u2029': 'u2029', // paragraph separator
+    '\u202F': 'u202F', // narrow no-break space
+    '\u205F': 'u205F', // medium mathematical space
+    '\u2060': 'u2060', // word joiner
+    '\u3000': 'u3000', // ideographic space
+    '\uFEFF': 'uFEFF'  // zero width no-break space
+};
+
+
+/**
+ * Unescape a string that's been escaped so that it can be used
+ * in a firewall rule.
+ */
+function tagUnescape(ostr) {
+    var nstr = '';
+    var len = ostr.length;
+
+    for (var cur = 0; cur < len; cur += 1) {
+        var val = ostr[cur];
+        if (val === '\\') {
+            var escaped = ostr[cur + 1];
+            if (escaped === 'u') {
+                nstr += String.fromCharCode(
+                    parseInt(ostr.substring(cur + 2, cur + 6), 16));
+                cur += 5;
+            } else if (escapes[escaped] !== undefined) {
+                nstr += escapes[escaped];
+                cur += 1;
+            } else {
+                throw new Error('Invalid escape sequence "\\' + escaped + '"!');
+            }
+        } else {
+            nstr += val;
+        }
+    }
+
+    return nstr;
+}
+
+
+/**
+ * Escape a string so that it can be placed, quoted, into a
+ * firewall rule.
+ */
+function tagEscape(ostr) {
+    var nstr = '';
+    var len = ostr.length;
+
+    for (var cur = 0; cur < len; cur += 1) {
+        var val = ostr[cur];
+        if (unescapes[val] !== undefined) {
+            nstr += '\\' + unescapes[val];
+        } else {
+            nstr += val;
+        }
     }
 
-    return str;
+    return nstr;
+}
+
+
+/**
+ * Quotes a string in case it contains non-alphanumeric
+ * characters or keywords for firewall rules.
+ */
+function quote(str) {
+    return '"' + tagEscape(str) + '"';
 }
 
 
@@ -182,7 +340,7 @@ function FwRule(data, opts) {
         }
     }
 
-    if (data.hasOwnProperty('uuid')) {
+    if (hasOwnProperty(data, 'uuid')) {
         if (!validators.validateUUID(data.uuid)) {
             errs.push(new validators.InvalidParamError('uuid',
                 'Invalid rule UUID'));
@@ -195,7 +353,7 @@ function FwRule(data, opts) {
 
     this.version = data.version || generateVersion();
 
-    if (data.hasOwnProperty('owner_uuid')) {
+    if (hasOwnProperty(data, 'owner_uuid')) {
         if (!validators.validateUUID(data.owner_uuid)) {
             errs.push(new validators.InvalidParamError('owner_uuid',
                 'Invalid owner UUID'));
@@ -206,7 +364,7 @@ function FwRule(data, opts) {
         this.global = true;
     }
 
-    if (data.hasOwnProperty('enabled')) {
+    if (hasOwnProperty(data, 'enabled')) {
         if (!validators.bool(data.enabled)) {
             errs.push(new validators.InvalidParamError('enabled',
                 'enabled must be true or false'));
@@ -219,7 +377,7 @@ function FwRule(data, opts) {
 
     for (var s in STRING_PROPS) {
         var str = STRING_PROPS[s];
-        if (data.hasOwnProperty(str)) {
+        if (hasOwnProperty(data, str)) {
             try {
                 validators.validateString(str, data[str]);
                 this[str] = data[str];
@@ -230,19 +388,19 @@ function FwRule(data, opts) {
     }
 
     if (opts.enforceGlobal) {
-        if (data.hasOwnProperty('global') && !validators.bool(data.global)) {
+        if (hasOwnProperty(data, 'global') && !validators.bool(data.global)) {
             errs.push(new validators.InvalidParamError('global',
                 'global must be true or false'));
         }
 
-        if (data.hasOwnProperty('global')
-            && data.hasOwnProperty('owner_uuid') && data.global) {
+        if (hasOwnProperty(data, 'global')
+            && hasOwnProperty(data, 'owner_uuid') && data.global) {
             errs.push(new validators.InvalidParamError('global',
                 'cannot specify both global and owner_uuid'));
         }
 
-        if (!data.hasOwnProperty('global')
-            && !data.hasOwnProperty('owner_uuid')) {
+        if (!hasOwnProperty(data, 'global')
+            && !hasOwnProperty(data, 'owner_uuid')) {
             errs.push(new validators.InvalidParamError('owner_uuid',
                 'owner_uuid required'));
         }
@@ -269,8 +427,8 @@ function FwRule(data, opts) {
         this.protoTargets = this.types;
     } else {
         this.ports = parsed.protocol.targets.sort(function (a, b) {
-            var first = a.hasOwnProperty('start') ? a.start : a;
-            var second = b.hasOwnProperty('start') ? b.start : b;
+            var first = hasOwnProperty(a, 'start') ? a.start : a;
+            var second = hasOwnProperty(b, 'start') ? b.start : b;
             return Number(first) - Number(second);
         });
         this.protoTargets = this.ports;
@@ -308,7 +466,7 @@ function FwRule(data, opts) {
             var name = target[0] + 's';
 
             numTargets++;
-            if (!dirs[dir].hasOwnProperty(name)) {
+            if (!hasOwnProperty(dirs[dir], name)) {
                 dirs[dir][name] = {};
             }
 
@@ -343,7 +501,7 @@ function FwRule(data, opts) {
         dir = DIRECTIONS[d];
         for (var t in TARGET_TYPES) {
             var type = TARGET_TYPES[t] + 's';
-            if (dirs[dir].hasOwnProperty(type)) {
+            if (hasOwnProperty(dirs[dir], type)) {
                 if (type === 'tags') {
                     this[dir][type] = tagList(dirs[dir][type]);
 
@@ -430,7 +588,7 @@ FwRule.prototype.raw = function () {
 
     for (var s in STRING_PROPS) {
         var str = STRING_PROPS[s];
-        if (this.hasOwnProperty(str)) {
+        if (hasOwnProperty(this, str)) {
             raw[str] = this[str];
         }
     }
@@ -460,7 +618,7 @@ FwRule.prototype.serialize = function (fields) {
                 ser.global = true;
             }
         } else {
-            if (this.hasOwnProperty(field)) {
+            if (hasOwnProperty(this, field)) {
                 ser[field] = this[field];
             }
         }
@@ -482,7 +640,7 @@ FwRule.prototype.text = function () {
         to: []
     };
 
-    forEachTarget(this, function (dir, type, name, arr) {
+    forEachTarget(this, function (dir, type, _, arr) {
         for (var i in arr) {
             var txt;
             if (type === 'tag') {
@@ -513,8 +671,8 @@ FwRule.prototype.text = function () {
         );
     } else {
         ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start')
-                && port.hasOwnProperty('end')) {
+            if (hasOwnProperty(port, 'start')
+                && hasOwnProperty(port, 'end')) {
                 /*
                  * We only output PORTS when we have a range, since we don't
                  * distinguish PORTS 1, 2 from (PORT 1 AND PORT 2) after
@@ -581,6 +739,8 @@ function generateVersion() {
 module.exports = {
     create: createRule,
     generateVersion: generateVersion,
+    tagEscape: tagEscape,
+    tagUnescape: tagUnescape,
     DIRECTIONS: DIRECTIONS,
     FIELDS: FIELDS,
     FwRule: FwRule,
diff --git a/src/fw/node_modules/fwrule/validators.js b/src/fw/node_modules/fwrule/validators.js
index 73ce97ed..651df743 100644
--- a/src/fw/node_modules/fwrule/validators.js
+++ b/src/fw/node_modules/fwrule/validators.js
@@ -28,6 +28,8 @@
  * firewall rule parser: validation functions
  */
 
+'use strict';
+
 var net = require('net');
 var util = require('util');
 var VError = require('verror').VError;
@@ -65,7 +67,7 @@ util.inherits(InvalidParamError, VError);
  * the broadcast address
  */
 function validateIPv4address(ip) {
-    if (!net.isIPv4(ip) || (ip == '255.255.255.255') || (ip == '0.0.0.0')) {
+    if (!net.isIPv4(ip) || (ip === '255.255.255.255') || (ip === '0.0.0.0')) {
         return false;
     }
 
@@ -149,11 +151,12 @@ function validatePortOrAll(port) {
  * and lower-case allowed)
  */
 function validateProtocol(protocol) {
-    var protoLC = protocol.toLowerCase();
-    if ((protoLC != 'tcp') && (protoLC != 'udp') && (!icmpr.test(protoLC))) {
+    if (typeof (protocol) !== 'string') {
         return false;
     }
-    return true;
+
+    var protoLC = protocol.toLowerCase();
+    return ((protoLC === 'tcp') || (protoLC === 'udp') || icmpr.test(protoLC));
 }
 
 
@@ -162,11 +165,12 @@ function validateProtocol(protocol) {
  * mixed case allowed)
  */
 function validateAction(action) {
-    var actionLC = action.toLowerCase();
-    if ((actionLC != 'allow') && (actionLC != 'block')) {
+    if (typeof (action) !== 'string') {
         return false;
     }
-    return true;
+
+    var actionLC = action.toLowerCase();
+    return ((actionLC === 'allow') || (actionLC === 'block'));
 }
 
 
diff --git a/src/fw/test/integration/examples.test.js b/src/fw/test/integration/examples.test.js
index 01e80256..28645690 100644
--- a/src/fw/test/integration/examples.test.js
+++ b/src/fw/test/integration/examples.test.js
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  * Integration test: test that commands and payloads in etc/examples are
  * actually valid
@@ -12,6 +12,7 @@ var mod_vm = require('../lib/vm');
 var path = require('path');
 var util = require('util');
 
+var hasKey = require('../../lib/util/obj').hasKey;
 
 
 // --- Globals
@@ -132,7 +133,7 @@ exports['setup'] = function (t) {
 
     exampleFiles.forEach(function (ex) {
         var prefix = ex.split('_')[0];
-        if (!EXAMPLES.hasOwnProperty(prefix)) {
+        if (!hasKey(EXAMPLES, prefix)) {
             EXAMPLES[prefix] = {};
         }
 
@@ -190,7 +191,7 @@ exports['fwadm_list_json'] = function (t) {
         }
 
         json.forEach(function (r) {
-            if (RULES.hasOwnProperty(r.uuid)) {
+            if (hasKey(RULES, r.uuid)) {
                 rules.splice(rules.indexOf(r.uuid), 1);
             }
         });
@@ -219,7 +220,7 @@ exports['fwadm_list_parseable'] = function (t) {
             var fields = r.split('|');
             t.equal(fields.length, 3, '3 fields per line');
 
-            if (RULES.hasOwnProperty(fields[0])) {
+            if (hasKey(RULES, fields[0])) {
                 rules.splice(rules.indexOf(fields[0]), 1);
             }
         });
diff --git a/src/fw/test/integration/in-zone-enabled.js b/src/fw/test/integration/in-zone-enabled.test.js
similarity index 100%
rename from src/fw/test/integration/in-zone-enabled.js
rename to src/fw/test/integration/in-zone-enabled.test.js
diff --git a/src/fw/test/lib/helpers.js b/src/fw/test/lib/helpers.js
index 3c8e38cb..dba0dd38 100644
--- a/src/fw/test/lib/helpers.js
+++ b/src/fw/test/lib/helpers.js
@@ -33,8 +33,10 @@ var mocks = require('./mocks');
 var mod_uuid = require('node-uuid');
 var util = require('util');
 var util_vm = require('../../lib/util/vm');
+var VError = require('verror');
 
 var createSubObjects = mod_obj.createSubObjects;
+var hasKey = mod_obj.hasKey;
 
 
 
@@ -101,7 +103,7 @@ function addZoneRules(exp, toAdd) {
 
         // [vm, 'in', 'pass', 'tcp', ip, ports]
         var proto = createSubObjects(exp[vm], r[1], r[2], r[3]);
-        if (!proto.hasOwnProperty(r[4])) {
+        if (!hasKey(proto, r[4])) {
             proto[r[4]] = [];
         }
 
@@ -147,13 +149,14 @@ function fillInRuleBlanks(res, incomplete) {
     }
 
     toFill.forEach(function (rule) {
-        var match = findRuleInList(rule, res);
+        var findRuleText = fwrule.create(rule).text();
+        var match = findRuleInList(findRuleText, res);
         if (!match) {
-            return;
+            throw new VError('Couldn\'t find matching rule: %s', findRuleText);
         }
 
         for (var p in match) {
-            if (!rule.hasOwnProperty(p)) {
+            if (!hasKey(rule, p)) {
                 rule[p] = match[p];
             }
         }
@@ -163,12 +166,10 @@ function fillInRuleBlanks(res, incomplete) {
 /**
  * Finds a rule in the list by rule text
  */
-function findRuleInList(findRule, list) {
-    var findRuleObj = fwrule.create(findRule);
-
+function findRuleInList(findRuleText, list) {
     for (var r in list) {
         var ruleObj = fwrule.create(list[r]);
-        if (findRuleObj.text() == ruleObj.text()) {
+        if (findRuleText === ruleObj.text()) {
             return list[r];
         }
     }
@@ -253,7 +254,7 @@ function fwRvmRulesEqual(opts, callback) {
         // clone the input rules in case order is important to the caller:
         opts.t.deepEqual(res.sort(uuidSort), clone(opts.rules).sort(uuidSort),
             'fw.rvmRules() correct for '
-            + typeof (opts.rvm) === 'object' ?  opts.rvm.uuid : opts.rvm);
+            + (typeof (opts.rvm) === 'object' ?  opts.rvm.uuid : opts.rvm));
 
         return callback();
     });
@@ -361,7 +362,7 @@ function zoneIPFconfigs(version) {
         if (!startsWith(dir, '/zones') || !endsWith(dir, '/config')) {
             continue;
         }
-        if (!root[dir].hasOwnProperty(filename)) {
+        if (!hasKey(root[dir], filename)) {
             continue;
         }
 
@@ -432,7 +433,7 @@ function zoneIPFconfigs(version) {
             }
 
             var dests = createSubObjects(firewalls, zone, d, action, proto);
-            if (!dests.hasOwnProperty(dest)) {
+            if (!hasKey(dests, dest)) {
                 dests[dest] = [];
             }
 
@@ -470,7 +471,7 @@ function getIPFenabled() {
  */
 function uuidNum(num) {
     return '00000000-0000-0000-0000-0000000000'
-        + (Number(num) < 9 ? '0' + num : num);
+        + (Number(num) < 10 ? '0' + num : num);
 }
 
 
@@ -503,7 +504,7 @@ function generateVM(override) {
         }
     }
 
-    if (!vm.hasOwnProperty('zonepath')) {
+    if (!hasKey(vm, 'zonepath')) {
         vm.zonepath = util.format('/zones/%s', vm.uuid);
     }
 
@@ -567,11 +568,11 @@ function rulesOnDisk(fw) {
  * Sort the various fields of a fw.js results object
  */
 function sortRes(res) {
-    if (res.hasOwnProperty('vms')) {
+    if (hasKey(res, 'vms')) {
         res.vms.sort();
     }
 
-    if (res.hasOwnProperty('rules')) {
+    if (hasKey(res, 'rules')) {
         res.rules.sort(uuidSort);
     }
 
diff --git a/src/fw/test/lib/mocks.js b/src/fw/test/lib/mocks.js
index eebe4086..ac159fa8 100644
--- a/src/fw/test/lib/mocks.js
+++ b/src/fw/test/lib/mocks.js
@@ -11,6 +11,7 @@ var mod_obj = require('../../lib/util/obj');
 var util = require('util');
 
 var createSubObjects = mod_obj.createSubObjects;
+var hasKey = mod_obj.hasKey;
 
 
 
@@ -242,8 +243,7 @@ function stat(file, cb) {
     var p = _splitFile(file);
     var root = VALUES.fs;
 
-    if (!root.hasOwnProperty(p.dir)
-            || !root[p.dir].hasOwnProperty(p.file)) {
+    if (!hasKey(root, p.dir) || !hasKey(root[p.dir], p.file)) {
         return cb(_ENOENT(file));
     }
 
@@ -252,7 +252,7 @@ function stat(file, cb) {
 
 function readDir(dir, cb) {
     var root = VALUES.fs;
-    if (!root.hasOwnProperty(dir)) {
+    if (!hasKey(root, dir)) {
         return cb(_ENOENT(dir));
     }
 
@@ -264,8 +264,7 @@ function readFile(file, cb) {
     var p = _splitFile(file);
     var root = VALUES.fs;
 
-    if (!root.hasOwnProperty(p.dir)
-            || !root[p.dir].hasOwnProperty(p.file)) {
+    if (!hasKey(root, p.dir) || !hasKey(root[p.dir], p.file)) {
         return cb(_ENOENT(file));
     }
 
@@ -277,8 +276,7 @@ function readFileSync(file, cb) {
     var p = _splitFile(file);
     var root = VALUES.fs;
 
-    if (!root.hasOwnProperty(p.dir)
-            || !root[p.dir].hasOwnProperty(p.file)) {
+    if (!hasKey(root, p.dir) || !hasKey(root[p.dir], p.file)) {
         throw _ENOENT(file);
     }
 
@@ -317,8 +315,7 @@ function unlink(file, cb) {
     var p = _splitFile(file);
     var root = VALUES.fs;
 
-    if (!root.hasOwnProperty(p.dir)
-            || !root[p.dir].hasOwnProperty(p.file)) {
+    if (!hasKey(root, p.dir) || !hasKey(root[p.dir], p.file)) {
         return cb(_ENOENT(file));
     }
 
@@ -332,7 +329,7 @@ function writeFile(f, data, cb) {
     var p = _splitFile(f);
 
     var root = VALUES.fs;
-    if (!root.hasOwnProperty(p.dir)) {
+    if (!hasKey(root, p.dir)) {
         root[p.dir] = {};
     }
 
@@ -347,7 +344,7 @@ function writeFile(f, data, cb) {
 
 
 function mkdirp(dir, cb) {
-    if (!VALUES.fs.hasOwnProperty(dir)) {
+    if (!hasKey(VALUES.fs, dir)) {
         VALUES.fs[dir] = {};
     }
     return cb();
@@ -355,7 +352,7 @@ function mkdirp(dir, cb) {
 
 
 mkdirp.sync = function mkdirpSync(dir) {
-    if (!VALUES.fs.hasOwnProperty(dir)) {
+    if (!hasKey(VALUES.fs, dir)) {
         VALUES.fs[dir] = {};
     }
     return;
@@ -411,7 +408,7 @@ function resetValues(opts) {
 
     if (opts && opts.initialValues) {
         // As a convenience, allow fs values to be full paths
-        if (opts.initialValues.hasOwnProperty('fs')) {
+        if (hasKey(opts.initialValues, 'fs')) {
             for (var f in opts.initialValues.fs) {
                 var p = _splitFile(f);
                 mkdirp.sync(p.dir);
diff --git a/src/fw/test/lib/vm.js b/src/fw/test/lib/vm.js
index f2d495bd..e89c2f6f 100644
--- a/src/fw/test/lib/vm.js
+++ b/src/fw/test/lib/vm.js
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  * Test utilities for running vmadm commands
  */
@@ -10,6 +10,7 @@ var common = require('./common');
 var mod_log = require('./log');
 var util = require('util');
 
+var hasKey = require('../../lib/util/obj').hasKey;
 
 
 // --- Globals
@@ -58,7 +59,7 @@ function create(t, opts, callback) {
             params[p] = opts.params[p];
         }
 
-        if (!params.hasOwnProperty('alias')) {
+        if (!hasKey(params, 'alias')) {
             params.alias = util.format('fwtest-%d-%d', process.pid, VM_NUM++);
         }
 
diff --git a/src/fw/test/unit/fw.test.js b/src/fw/test/unit/fw.test.js
index f920eb60..a8ee090b 100644
--- a/src/fw/test/unit/fw.test.js
+++ b/src/fw/test/unit/fw.test.js
@@ -385,7 +385,7 @@ exports['add: tag to IP'] = function (t) {
         rules: [
             {
                 owner_uuid: vm1.owner_uuid,
-                rule: 'FROM tag foo TO ip 10.99.99.254 BLOCK tcp PORT 25',
+                rule: 'FROM tag "foo" TO ip 10.99.99.254 BLOCK tcp PORT 25',
                 enabled: true
             }
         ],
@@ -485,12 +485,14 @@ exports['add: tag to subnet'] = function (t) {
         rules: [
             {
                 owner_uuid: vm1.owner_uuid,
-                rule: 'FROM tag foo TO subnet 10.99.99.0/24 BLOCK tcp PORT 25',
+                rule: 'FROM tag "foo" TO subnet 10.99.99.0/24 BLOCK '
+                    + 'tcp PORT 25',
                 enabled: true
             },
             {
                 owner_uuid: vm2.owner_uuid,
-                rule: 'FROM subnet 10.99.99.0/24 TO tag foo ALLOW tcp PORT 80',
+                rule: 'FROM subnet 10.99.99.0/24 TO tag "foo" ALLOW '
+                    + 'tcp PORT 80',
                 enabled: true
             }
         ],
diff --git a/src/fw/test/unit/owner.test.js b/src/fw/test/unit/owner.test.js
index 3567e767..c1adc8de 100644
--- a/src/fw/test/unit/owner.test.js
+++ b/src/fw/test/unit/owner.test.js
@@ -79,7 +79,7 @@ exports['tag to IP'] = function (t) {
     var payload = {
         rules: [
             {
-                rule: 'FROM tag foo TO ip 10.99.99.254 BLOCK tcp PORT 25',
+                rule: 'FROM tag "foo" TO ip 10.99.99.254 BLOCK tcp PORT 25',
                 enabled: true,
                 owner_uuid: owner
             }
@@ -149,7 +149,8 @@ exports['tag to IP'] = function (t) {
         var payload2 = {
             rules: [
                 {
-                    rule: 'FROM tag foo TO ip 10.99.99.254 BLOCK tcp PORT 250',
+                    rule: 'FROM tag "foo" TO ip 10.99.99.254 '
+                        + 'BLOCK tcp PORT 250',
                     enabled: true,
                     global: true
                 }
@@ -642,7 +643,7 @@ exports['remote vms: tags'] = function (t) {
         rules: [
             {
                 owner_uuid: owner,
-                rule: util.format('FROM tag one TO vm %s ALLOW tcp PORT 8081',
+                rule: util.format('FROM tag "one" TO vm %s ALLOW tcp PORT 8081',
                     vm1.uuid),
                 enabled: true
             }
diff --git a/src/fw/test/unit/remote-vms.test.js b/src/fw/test/unit/remote-vms.test.js
index aab1511b..c6bb5fed 100644
--- a/src/fw/test/unit/remote-vms.test.js
+++ b/src/fw/test/unit/remote-vms.test.js
@@ -500,13 +500,13 @@ exports['local VM to remote tag'] = function (t) {
         rules: [
             {
                 owner_uuid: vm.owner_uuid,
-                rule: util.format('FROM vm %s TO tag other ALLOW tcp PORT 80',
+                rule: util.format('FROM vm %s TO tag "other" ALLOW tcp PORT 80',
                                 vm.uuid),
                 enabled: true
             },
             {
                 owner_uuid: vm.owner_uuid,
-                rule: util.format('FROM tag other TO vm %s ALLOW tcp PORT 80',
+                rule: util.format('FROM tag "other" TO vm %s ALLOW tcp PORT 80',
                                 vm.uuid),
                 enabled: true
             }
@@ -694,7 +694,7 @@ exports['FWAPI-248 - only list an applicable rule once'] = function (t) {
     var rvm = helpers.generateVM({ tags: { foo: true, bar: false } });
     var rule = {
         owner_uuid: rvm.owner_uuid,
-        rule: 'FROM tag foo TO tag bar ALLOW tcp PORT 80',
+        rule: 'FROM tag "foo" TO tag "bar" ALLOW tcp PORT 80',
         enabled: true
     };
     var payload = {
@@ -975,7 +975,7 @@ exports['owner_uuid filtering'] = function (t) {
     var payload = {
         rules: [
             {
-                rule: util.format('FROM tag one TO vm %s ALLOW tcp PORT 25',
+                rule: util.format('FROM tag "one" TO vm %s ALLOW tcp PORT 25',
                                 vm.uuid),
                 owner_uuid: ownerA,
                 enabled: true
@@ -1306,17 +1306,17 @@ exports['FWAPI-252: Allow using rvmRules() on RVM w/o IPs'] = function (t) {
         rules: [
             {
                 owner_uuid: rvm.owner_uuid,
-                rule: 'FROM tag foo TO tag other ALLOW tcp PORT 80',
+                rule: 'FROM tag "foo" TO tag "other" ALLOW tcp PORT 80',
                 enabled: true
             },
             {
                 owner_uuid: rvm.owner_uuid,
-                rule: 'FROM tag other TO tag foo ALLOW tcp PORT 80',
+                rule: 'FROM tag "other" TO tag "foo" ALLOW tcp PORT 80',
                 enabled: true
             },
             {
                 owner_uuid: rvm.owner_uuid,
-                rule: 'FROM tag foo TO tag bar ALLOW tcp PORT 80',
+                rule: 'FROM tag "foo" TO tag "bar" ALLOW tcp PORT 80',
                 enabled: true
             }
         ],
@@ -1386,7 +1386,17 @@ exports['invalid and missing parameters'] = function (t) {
     var sameUUID = helpers.generateVM();
     sameUUID.uuid = payload.vms[0].uuid;
 
+    var badUUID = helpers.generateVM({ uuid: 'hasOwnProperty' });
+
+    var badOwnerUUID = helpers.generateVM({ owner_uuid: 'hasOwnProperty' });
+
     var invalid = [
+        [ 'invalid rule UUID', badUUID,
+            'Invalid Remote VM UUID: hasOwnProperty' ],
+
+        [ 'invalid owner UUID', badOwnerUUID,
+            'Invalid owner UUID: hasOwnProperty' ],
+
         [ 'invalid IPs', invalidIPs, util.format(
             'Invalid IP address: %s', invalidIPs.ips[0]) ],
 
diff --git a/src/fw/test/unit/tags.test.js b/src/fw/test/unit/tags.test.js
index 3fa4e6ff..8bfa1cd8 100644
--- a/src/fw/test/unit/tags.test.js
+++ b/src/fw/test/unit/tags.test.js
@@ -152,7 +152,7 @@ exports['add / update: tag to tag'] = function (t) {
     var payload = {
         rules: [
             {
-                rule: 'FROM tag one TO tag one ALLOW tcp PORT 80',
+                rule: 'FROM tag "one" TO tag "one" ALLOW tcp PORT 80',
                 owner_uuid: vm1.owner_uuid,
                 enabled: true
             }
@@ -576,12 +576,12 @@ exports['add / update: tag to tag'] = function (t) {
             rules: [
                 {
                     owner_uuid: vm1.owner_uuid,
-                    rule: 'FROM tag red TO tag one ALLOW udp PORT 1000',
+                    rule: 'FROM tag "red" TO tag "one" ALLOW udp PORT 1000',
                     enabled: true
                 },
                 {
                     owner_uuid: vm1.owner_uuid,
-                    rule: 'FROM tag red TO tag one ALLOW udp PORT 1001',
+                    rule: 'FROM tag "red" TO tag "one" ALLOW udp PORT 1001',
                     enabled: true
                 }
             ],
@@ -637,7 +637,7 @@ exports['add / update: tag to tag'] = function (t) {
             rules: [
                 {
                     owner_uuid: vm1.owner_uuid,
-                    rule: 'FROM tag one TO tag red ALLOW tcp PORT 25',
+                    rule: 'FROM tag "one" TO tag "red" ALLOW tcp PORT 25',
                     enabled: true
                 }
             ],
@@ -683,7 +683,7 @@ exports['add / update: tag to tag'] = function (t) {
         // Update rule 2 to include tag blue (remote VM 12 has this tag):
         // - tag one VMs should have firewalls updated
 
-        rule2.rule = 'FROM (tag blue OR tag red) TO tag one '
+        rule2.rule = 'FROM (tag "blue" OR tag "red") TO tag "one" '
             + 'ALLOW udp (PORT 1000 AND PORT 1050)';
 
         var updatePayload = {
@@ -823,13 +823,15 @@ exports['add / update: tag to tag'] = function (t) {
                 {
                     owner_uuid: vm1.owner_uuid,
                     rule: util.format(
-                        'FROM vm %s TO tag one ALLOW tcp PORT 8080', vm4.uuid),
+                        'FROM vm %s TO tag "one" ALLOW tcp PORT 8080',
+                        vm4.uuid),
                     enabled: true
                 },
                 {
                     owner_uuid: vm1.owner_uuid,
                     rule: util.format(
-                        'FROM tag one TO vm %s ALLOW tcp PORT 8080', vm4.uuid),
+                        'FROM tag "one" TO vm %s ALLOW tcp PORT 8080',
+                        vm4.uuid),
                     enabled: true
                 }
             ],
@@ -902,7 +904,7 @@ exports['add / update: tag to tag'] = function (t) {
             rules: [
                 {
                     owner_uuid: vm1.owner_uuid,
-                    rule: 'FROM tag one TO tag two ALLOW tcp PORT 125',
+                    rule: 'FROM tag "one" TO tag "two" ALLOW tcp PORT 125',
                     enabled: true
                 }
             ],
@@ -987,7 +989,7 @@ exports['tags with values'] = function (t) {
         rules: [
             {
                 owner_uuid: vm1.owner_uuid,
-                rule: 'FROM any TO tag role = web ALLOW tcp PORT 80',
+                rule: 'FROM any TO tag "role" = "web" ALLOW tcp PORT 80',
                 enabled: true
             }
         ],
@@ -1063,7 +1065,7 @@ exports['tags with values'] = function (t) {
             rules: [
                 {
                     owner_uuid: vm1.owner_uuid,
-                    rule: 'FROM tag role = web TO tag role = mon '
+                    rule: 'FROM tag "role" = "web" TO tag "role" = "mon" '
                         + 'ALLOW udp PORT 514',
                     enabled: true
                 }
@@ -1147,7 +1149,8 @@ exports['tags with values'] = function (t) {
             rules: [
                 {
                     uuid: expRules[0].uuid,
-                    rule: 'FROM any TO (tag role = db OR tag role = web) ALLOW '
+                    rule: 'FROM any TO '
+                        + '(tag "role" = "db" OR tag "role" = "web") ALLOW '
                         + 'tcp PORT 80'
                 }
             ],
@@ -1308,7 +1311,7 @@ exports['add a local provisioning VM with a tag'] = {
         });
         d.rule = {
             owner_uuid: d.vm.owner_uuid,
-            rule: 'FROM tag blocksmtp TO any BLOCK tcp PORT 25',
+            rule: 'FROM tag "blocksmtp" TO any BLOCK tcp PORT 25',
             enabled: true
         };
 
@@ -1365,18 +1368,186 @@ exports['add a local provisioning VM with a tag'] = {
 };
 
 
+exports['tags with escaped characters or odd names/values'] = function (t) {
+    reset();
+    var vms = [
+        helpers.generateVM({ tags: { hasOwnProperty: 'quux' } }),
+        helpers.generateVM({ tags: { foo: 'hasOwnProperty' } }),
+        helpers.generateVM({ tags: { '☃': 'رجل الثلج' } }),
+        helpers.generateVM({ tags: { '(a\nb)': 'foo\tbar' } }),
+        helpers.generateVM({ tags: { 'toString': 'baz' } })
+    ];
+    var rules = [
+        {
+            owner_uuid: vms[0].owner_uuid,
+            rule: 'FROM any TO tag hasOwnProperty ALLOW tcp PORT 80',
+            enabled: true
+        },
+        {
+            owner_uuid: vms[0].owner_uuid,
+            rule: 'FROM any TO tag foo = hasOwnProperty ALLOW tcp PORT 81',
+            enabled: true
+        },
+        {
+            owner_uuid: vms[0].owner_uuid,
+            rule: 'FROM any TO tag "\\u2603" = "\\u0631\\u062c\\u0644 '
+                + '\\u0627\\u0644\\u062b\\u0644\\u062c" ALLOW tcp PORT 82',
+            enabled: true
+        },
+        {
+            owner_uuid: vms[0].owner_uuid,
+            rule: 'FROM any TO tag "\\(a\\nb)" = "foo\\tbar" ALLOW tcp PORT 83',
+            enabled: true
+        },
+        {
+            owner_uuid: vms[0].owner_uuid,
+            rule: 'FROM any TO tag toString = baz ALLOW tcp PORT 84',
+            enabled: true
+        }
+    ];
+
+    var expRules = {};
+    var expRulesOnDisk = {};
+    var remoteVMsOnDisk = {};
+    var vmsEnabled = {};
+
+    var payload = {
+        localVMs: vms,
+        rules: rules,
+        vms: vms
+    };
+
+    async.series([
+    function (cb) {
+        fw.validatePayload(payload, function (err, res) {
+            t.ifError(err);
+            cb();
+        });
+
+    }, function (cb) {
+        fw.add(payload, function (err, res) {
+            t.ifError(err);
+            if (err) {
+                cb();
+                return;
+            }
+
+            // Replace with the normalized versions.
+            rules[0].rule =
+                'FROM any TO tag "hasOwnProperty" ALLOW tcp PORT 80';
+            rules[1].rule =
+                'FROM any TO tag "foo" = "hasOwnProperty" ALLOW tcp PORT 81';
+            rules[2].rule =
+                'FROM any TO tag "☃" = "رجل الثلج" ALLOW tcp PORT 82';
+            rules[3].rule =
+                'FROM any TO tag "\\(a\\nb\\)" = "foo\\tbar" ALLOW tcp PORT 83';
+            rules[4].rule =
+                'FROM any TO tag "toString" = "baz" ALLOW tcp PORT 84';
+
+            helpers.fillInRuleBlanks(res.rules, rules);
+            t.deepEqual(helpers.sortRes(res), {
+                vms: helpers.sortedUUIDs(vms),
+                rules: rules.slice().sort(helpers.uuidSort)
+            }, 'rules returned');
+
+            helpers.addZoneRules(expRules, [
+                [vms[0], 'default'],
+                [vms[1], 'default'],
+                [vms[2], 'default'],
+                [vms[3], 'default'],
+                [vms[4], 'default'],
+
+                [vms[0], 'in', 'pass', 'tcp', 'any', 80],
+                [vms[1], 'in', 'pass', 'tcp', 'any', 81],
+                [vms[2], 'in', 'pass', 'tcp', 'any', 82],
+                [vms[3], 'in', 'pass', 'tcp', 'any', 83],
+                [vms[4], 'in', 'pass', 'tcp', 'any', 84]
+            ]);
+
+            t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
+                'IPv4 firewall rules');
+            t.deepEqual(helpers.zoneIPFconfigs(6), expRules,
+                'IPv6 firewall rules');
+
+            vmsEnabled[vms[0].uuid] = true;
+            vmsEnabled[vms[1].uuid] = true;
+            vmsEnabled[vms[2].uuid] = true;
+            vmsEnabled[vms[3].uuid] = true;
+            vmsEnabled[vms[4].uuid] = true;
+
+            t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
+                'firewalls enabled');
+
+            t.deepEqual(helpers.remoteVMsOnDisk(), remoteVMsOnDisk,
+                'remote VMs on disk');
+
+            expRulesOnDisk[rules[0].uuid] = clone(rules[0]);
+            expRulesOnDisk[rules[1].uuid] = clone(rules[1]);
+            expRulesOnDisk[rules[2].uuid] = clone(rules[2]);
+            expRulesOnDisk[rules[3].uuid] = clone(rules[3]);
+            expRulesOnDisk[rules[4].uuid] = clone(rules[4]);
+
+            t.deepEqual(helpers.rulesOnDisk(), expRulesOnDisk, 'rules on disk');
+
+            cb();
+        });
+    }, function (cb) {
+        helpers.fwListEquals(t, rules, cb);
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: [ rules[0] ],
+            vm: vms[0],
+            vms: vms
+        }, cb);
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: [ rules[1] ],
+            vm: vms[1],
+            vms: vms
+        }, cb);
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: [ rules[2] ],
+            vm: vms[2],
+            vms: vms
+        }, cb);
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: [ rules[3] ],
+            vm: vms[3],
+            vms: vms
+        }, cb);
+    }, function (cb) {
+        helpers.fwRulesEqual({
+            t: t,
+            rules: [ rules[4] ],
+            vm: vms[4],
+            vms: vms
+        }, cb);
+    }
+
+    ], function () {
+        t.done();
+    });
+};
+
+
 exports['tags that target no VMs'] = function (t) {
     reset();
     var vms = [ helpers.generateVM(), helpers.generateVM() ];
     var rules = [
         {
             owner_uuid: vms[0].owner_uuid,
-            rule: 'FROM any TO tag doesnotexist ALLOW tcp PORT 80',
+            rule: 'FROM any TO tag "doesnotexist" ALLOW tcp PORT 80',
             enabled: true
         },
         {
             owner_uuid: vms[0].owner_uuid,
-            rule: 'FROM any TO tag exists = nada ALLOW tcp PORT 81',
+            rule: 'FROM any TO tag "exists" = "nada" ALLOW tcp PORT 81',
             enabled: true
         }
     ];
diff --git a/src/fw/test/unit/validate.test.js b/src/fw/test/unit/validate.test.js
index 6b4b9884..5606b086 100644
--- a/src/fw/test/unit/validate.test.js
+++ b/src/fw/test/unit/validate.test.js
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  * fwadm tests
  */
@@ -82,21 +82,21 @@ exports['single rules'] = function (t) {
         },
         {
             name: 'tag to ip: valid',
-            rule: 'FROM tag one TO ip 1.2.3.4 BLOCK tcp PORT 25'
+            rule: 'FROM tag "one" TO ip 1.2.3.4 BLOCK tcp PORT 25'
         },
         {
             name: 'tag to ip: missing tag',
-            rule: 'FROM tag two TO ip 1.2.3.4 BLOCK tcp PORT 25'
+            rule: 'FROM tag "two" TO ip 1.2.3.4 BLOCK tcp PORT 25'
         },
         {
             name: 'vm to missing tag',
-            rule: util.format('FROM vm %s TO tag two BLOCK tcp PORT 25',
+            rule: util.format('FROM vm %s TO tag "two" BLOCK tcp PORT 25',
                 vm.uuid)
         },
         {
             name: 'vm to missing tag and missing vm',
             rule: util.format(
-                'FROM vm %s TO (tag blue OR vm %s) BLOCK tcp PORT 25',
+                'FROM vm %s TO (tag "blue" OR vm %s) BLOCK tcp PORT 25',
                 vm.uuid, uuid1),
             errors: [ util.format('Missing vm %s for rule: %r', uuid1) ]
         }
diff --git a/src/fw/test/unit/wildcards.test.js b/src/fw/test/unit/wildcards.test.js
index 7bf46535..cf38efcb 100644
--- a/src/fw/test/unit/wildcards.test.js
+++ b/src/fw/test/unit/wildcards.test.js
@@ -213,7 +213,7 @@ exports['any <-> vm: add / update'] = function (t) {
                 {
                     uuid: expRules[1].uuid,
                     rule: util.format(
-                        'FROM any TO (tag one OR vm %s) ALLOW tcp PORT 8081',
+                        'FROM any TO (tag "one" OR vm %s) ALLOW tcp PORT 8081',
                         vm.uuid)
                 }
             ],
@@ -747,7 +747,7 @@ exports['add / update: all ports'] = function (t) {
                 {
                     uuid: expRules[1].uuid,
                     rule: util.format(
-                        'FROM any TO (tag one OR vm %s) ALLOW tcp PORT 8081',
+                        'FROM any TO (tag "one" OR vm %s) ALLOW tcp PORT 8081',
                         vm.uuid)
                 }
             ],
diff --git a/src/fw/tools/fwrule/Makefile b/src/fw/tools/fwrule/Makefile
index 8bf4b637..d041e359 100644
--- a/src/fw/tools/fwrule/Makefile
+++ b/src/fw/tools/fwrule/Makefile
@@ -20,7 +20,7 @@
 #
 # CDDL HEADER END
 #
-# Copyright (c) 2014, Joyent, Inc. All rights reserved.
+# Copyright 2016, Joyent, Inc. All rights reserved.
 #
 #
 # fwrule Makefile
@@ -31,7 +31,8 @@
 # Tools
 #
 JISON	:= ./node_modules/jison/lib/cli.js
-NODEUNIT := node_modules/nodeunit/bin/nodeunit
+ISTANBUL := node_modules/.bin/istanbul
+FAUCET := node_modules/.bin/faucet
 RAMSEY := node_modules/ramsey/bin/ramsey
 NPM := npm
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v parser.js)
@@ -41,6 +42,9 @@ JSL_FLAGS  	?= --nologo --nosummary
 JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
 
 
 #
@@ -52,7 +56,13 @@ parser: $(JISON)
 	@cp ./src/header.js ./lib/parser.js
 	@cat ./src/fwrule.jison | $(JISON)  >> ./lib/parser.js
 
-$(NODEUNIT):
+$(ESLINT):
+	$(NPM) install
+
+$(ISTANBUL):
+	$(NPM) install
+
+$(FAUCET):
 	$(NPM) install
 
 $(JISON):
@@ -67,15 +77,11 @@ $(RAMSEY):
 #
 
 .PHONY: test
-test: $(NODEUNIT)
-	@(for F in test/*.js; do \
-		echo "# $$F" ;\
-		$(NODEUNIT) --reporter tap $$F ;\
-		[[ $$? == "0" ]] || exit 1; \
-	done)
+test: $(ISTANBUL) $(FAUCET)
+	$(ISTANBUL) cover --print none test/run.js | $(FAUCET)
 
 .PHONY: check
-check: check-jsl check-jsstyle
+check: check-jsl check-jsstyle check-eslint
 	@echo check ok
 
 .PHONY: prepush
@@ -130,3 +136,7 @@ check-jsl: $(JSL_EXEC)
 .PHONY: check-jsstyle
 check-jsstyle:  $(JSSTYLE_EXEC)
 	@$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check-eslint
+check-eslint: $(ESLINT)
+	@$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
diff --git a/src/fw/tools/fwrule/README.md b/src/fw/tools/fwrule/README.md
index 4af3adbd..b735d060 100644
--- a/src/fw/tools/fwrule/README.md
+++ b/src/fw/tools/fwrule/README.md
@@ -2,9 +2,9 @@
 
 Joyent firewall rule object wrapper. This is a copy of the sdc-fwrule repo. For
 contribution guidelines, issues, and general documentation, visit the main
-[SDC](http://github.com/joyent/sdc) project page.
+[sdc-fwrule](http://github.com/joyent/sdc-fwrule) project page.
 
-This contains shared code for manipulating SmartDataCenter firewall rules.
+This contains shared code for manipulating Triton firewall rules.
 There are two parts to this package:
 
 * A Jison grammar (src/fwrule.jison) that specifies a DSL for writing
diff --git a/src/fw/tools/fwrule/lib/index.js b/src/fw/tools/fwrule/lib/index.js
index e219748d..f42f6a92 100644
--- a/src/fw/tools/fwrule/lib/index.js
+++ b/src/fw/tools/fwrule/lib/index.js
@@ -26,11 +26,12 @@
  * firewall rule parser: entry point
  */
 
+'use strict';
+
 var mod_net = require('net');
 var parser = require('./parser').parser;
 var rule = require('./rule');
 var validators = require('./validators');
-var VError = require('verror').VError;
 
 
 
@@ -39,7 +40,6 @@ var VError = require('verror').VError;
 
 
 var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var portRE = /^[0-9]{1,5}$/;
 
 /**
  * The fwrule language is versioned so that use of new features can be
@@ -109,8 +109,8 @@ parser.yy.validateIPv6address = function validateIPv6address(ip) {
 };
 
 
-parser.yy.validateIPv6subnet = function validateIPv6subnet(ip, subnet) {
-    if (!validators.validateIPv6subnet(ip, subnet)) {
+parser.yy.validateIPv6subnet = function validateIPv6subnet(subnet) {
+    if (!validators.validateIPv6subnet(subnet)) {
         throw new validators.InvalidParamError('rule',
             'Subnet "%s" is invalid (must be in CIDR format)', subnet);
     }
@@ -182,7 +182,7 @@ parser.yy.validateOKVersion = function validateOKVersion(ver, feature) {
 };
 
 
-parser.yy.parseError = function parseError(str, details) {
+parser.yy.parseError = function parseError(_, details) {
     var err;
     if (details.token === null) {
         var pre = this.yy.lexer.pastInput();
@@ -216,6 +216,8 @@ parser.yy.parseError = function parseError(str, details) {
 };
 
 
+parser.yy.tagUnescape = rule.tagUnescape;
+
 
 // --- Exports
 
diff --git a/src/fw/tools/fwrule/lib/parser.js b/src/fw/tools/fwrule/lib/parser.js
index 4e7b5900..f50b0abc 100644
--- a/src/fw/tools/fwrule/lib/parser.js
+++ b/src/fw/tools/fwrule/lib/parser.js
@@ -522,7 +522,7 @@ case 47:return 63;
 break;
 case 48:return 63;
 break;
-case 49:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 37;
+case 49:yy_.yytext = yy.tagUnescape(yy_.yytext.substr(1,yy_.yyleng-2)); return 37;
 break;
 case 50:return 27;
 break;
@@ -534,7 +534,7 @@ case 53:return 33
 break;
 }
 },
-rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
+rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:\\["bfnrt/()\\]|\\u[a-fA-F0-9]{4}|[^"\\])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
 conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
 };
 return lexer;
diff --git a/src/fw/tools/fwrule/lib/rule.js b/src/fw/tools/fwrule/lib/rule.js
index 71bdf7c1..d9eab021 100644
--- a/src/fw/tools/fwrule/lib/rule.js
+++ b/src/fw/tools/fwrule/lib/rule.js
@@ -26,6 +26,8 @@
  * fwadm: firewall rule model
  */
 
+'use strict';
+
 var mod_net = require('net');
 var mod_uuid = require('node-uuid');
 var sprintf = require('extsprintf').sprintf;
@@ -63,23 +65,30 @@ var icmpr = /^icmp6?$/;
 // --- Internal functions
 
 
+/**
+ * Safely check if an object has a property
+ */
+function hasOwnProperty(obj, prop) {
+    return Object.prototype.hasOwnProperty.call(obj, prop);
+}
+
 
 /**
  * Calls callback for all of the firewall target types
  */
 function forEachTarget(obj, callback) {
     DIRECTIONS.forEach(function (dir) {
-        if (!obj.hasOwnProperty(dir)) {
+        if (!hasOwnProperty(obj, dir)) {
             return;
         }
 
         TARGET_TYPES.forEach(function (type) {
             var name = type + 's';
-            if (!obj[dir].hasOwnProperty(name)) {
+            if (!hasOwnProperty(obj[dir], name)) {
                 return;
             }
 
-            callback(dir, type, type, obj[dir][name]);
+            callback(dir, type, name, obj[dir][name]);
         });
     });
 }
@@ -105,7 +114,7 @@ function icmpTypeSort(types) {
  * Adds a tag to an object
  */
 function addTag(obj, tag, val) {
-    if (!obj.hasOwnProperty(tag)) {
+    if (!hasOwnProperty(obj, tag)) {
         obj[tag] = {};
     }
 
@@ -114,7 +123,7 @@ function addTag(obj, tag, val) {
         return;
     }
 
-    if (!obj[tag].hasOwnProperty('values')) {
+    if (!hasOwnProperty(obj[tag], 'values')) {
         obj[tag].values = {};
     }
 
@@ -128,7 +137,7 @@ function addTag(obj, tag, val) {
 function tagList(obj) {
     var tags = [];
     Object.keys(obj).sort().forEach(function (tag) {
-        if (obj[tag].hasOwnProperty('all')) {
+        if (hasOwnProperty(obj[tag], 'all')) {
             tags.push(tag);
         } else {
             Object.keys(obj[tag].values).sort().forEach(function (val) {
@@ -141,15 +150,164 @@ function tagList(obj) {
 
 
 /**
- * Quotes a string if it contains non-alphanumeric characters
+ * The following characters are allowed to come after an escape, and get
+ * escaped when producing rule text.
+ *
+ * Parentheses don't need to be escaped with newer parsers, but will cause
+ * errors with older parsers which expect them to be escaped. We therefore
+ * always escape them when generating rule text, to make sure we don't
+ * cause issues for older parsers.
  */
-function quote(str) {
-    var WORD_RE = /[^-a-zA-Z0-9_]/;
-    if (str.search(WORD_RE) !== -1) {
-        return '"' + str + '"';
+var escapes = {
+    '"': '"',
+    'b': '\b',
+    'f': '\f',
+    'n': '\n',
+    'r': '\r',
+    't': '\t',
+    '/': '/',
+    '(': '(',
+    ')': ')',
+    '\\': '\\'
+};
+
+
+/**
+ * When producing text versions of a rule, we escape Unicode whitespace
+ * characters. These characters don't need to be escaped, but we do so
+ * to reduce the chance that an operator will look at a rule and mistake
+ * any of them for the ASCII space character (\u0020), or not see them
+ * because they're non-printing.
+ */
+var unescapes = {
+    // Things that need to be escaped for the fwrule parser
+    '"': '"',
+    '(': '(',
+    ')': ')',
+    '\\': '\\',
+
+    // Special ASCII characters we don't want to print
+    '\u0000': 'u0000', // null (NUL)
+    '\u0001': 'u0001', // start of heading (SOH)
+    '\u0002': 'u0002', // start of text (STX)
+    '\u0003': 'u0003', // end of text (ETX)
+    '\u0004': 'u0004', // end of transmission (EOT)
+    '\u0005': 'u0005', // enquiry (ENQ)
+    '\u0006': 'u0006', // acknowledgement (ACK)
+    '\u0007': 'u0007', // bell (BEL)
+    '\u0008': 'b',     // backspace (BS)
+    '\u0009': 't',     // horizontal tab (HT)
+    '\u000A': 'n',     // newline (NL)
+    '\u000B': 'u000B', // vertical tab (VT)
+    '\u000C': 'f',     // form feed/next page (NP)
+    '\u000D': 'r',     // carriage return (CR)
+    '\u000E': 'u000E', // shift out (SO)
+    '\u000F': 'u000F', // shift in (SI)
+    '\u0010': 'u0010', // data link escape (DLE)
+    '\u0011': 'u0011', // device control 1 (DC1)/XON
+    '\u0012': 'u0012', // device control 2 (DC2)
+    '\u0013': 'u0013', // device control 3 (DC3)/XOFF
+    '\u0014': 'u0014', // device control 4 (DC4)
+    '\u0015': 'u0015', // negative acknowledgement (NAK)
+    '\u0016': 'u0016', // synchronous idle (SYN)
+    '\u0017': 'u0017', // end of transmission block (ETB)
+    '\u0018': 'u0018', // cancel (CAN)
+    '\u0019': 'u0019', // end of medium (EM)
+    '\u001A': 'u001A', // substitute (SUB)
+    '\u001B': 'u001B', // escape (ESC)
+    '\u001C': 'u001C', // file separator (FS)
+    '\u001D': 'u001D', // group separator (GS)
+    '\u001E': 'u001E', // record separator (RS)
+    '\u001F': 'u001F', // unit separator (US)
+    '\u007F': 'u007F', // delete (DEL)
+
+    // Unicode whitespace characters
+    '\u0085': 'u0085', // next line
+    '\u00A0': 'u00A0', // non-breaking space
+    '\u1680': 'u1680', // ogham space mark
+    '\u180E': 'u180E', // mongolian vowel separator
+    '\u2000': 'u2000', // en quad
+    '\u2001': 'u2001', // em quad
+    '\u2002': 'u2002', // en space
+    '\u2003': 'u2003', // em space
+    '\u2004': 'u2004', // three-per-em space
+    '\u2005': 'u2005', // four-per-em space
+    '\u2006': 'u2006', // six-per-em space
+    '\u2007': 'u2007', // figure space
+    '\u2008': 'u2008', // punctuation space
+    '\u2009': 'u2009', // thin space
+    '\u200A': 'u200A', // hair space
+    '\u200B': 'u200B', // zero width space
+    '\u200C': 'u200C', // zero width non-joiner
+    '\u200D': 'u200D', // zero width joiner
+    '\u2028': 'u2028', // line separator
+    '\u2029': 'u2029', // paragraph separator
+    '\u202F': 'u202F', // narrow no-break space
+    '\u205F': 'u205F', // medium mathematical space
+    '\u2060': 'u2060', // word joiner
+    '\u3000': 'u3000', // ideographic space
+    '\uFEFF': 'uFEFF'  // zero width no-break space
+};
+
+
+/**
+ * Unescape a string that's been escaped so that it can be used
+ * in a firewall rule.
+ */
+function tagUnescape(ostr) {
+    var nstr = '';
+    var len = ostr.length;
+
+    for (var cur = 0; cur < len; cur += 1) {
+        var val = ostr[cur];
+        if (val === '\\') {
+            var escaped = ostr[cur + 1];
+            if (escaped === 'u') {
+                nstr += String.fromCharCode(
+                    parseInt(ostr.substring(cur + 2, cur + 6), 16));
+                cur += 5;
+            } else if (escapes[escaped] !== undefined) {
+                nstr += escapes[escaped];
+                cur += 1;
+            } else {
+                throw new Error('Invalid escape sequence "\\' + escaped + '"!');
+            }
+        } else {
+            nstr += val;
+        }
+    }
+
+    return nstr;
+}
+
+
+/**
+ * Escape a string so that it can be placed, quoted, into a
+ * firewall rule.
+ */
+function tagEscape(ostr) {
+    var nstr = '';
+    var len = ostr.length;
+
+    for (var cur = 0; cur < len; cur += 1) {
+        var val = ostr[cur];
+        if (unescapes[val] !== undefined) {
+            nstr += '\\' + unescapes[val];
+        } else {
+            nstr += val;
+        }
     }
 
-    return str;
+    return nstr;
+}
+
+
+/**
+ * Quotes a string in case it contains non-alphanumeric
+ * characters or keywords for firewall rules.
+ */
+function quote(str) {
+    return '"' + tagEscape(str) + '"';
 }
 
 
@@ -182,7 +340,7 @@ function FwRule(data, opts) {
         }
     }
 
-    if (data.hasOwnProperty('uuid')) {
+    if (hasOwnProperty(data, 'uuid')) {
         if (!validators.validateUUID(data.uuid)) {
             errs.push(new validators.InvalidParamError('uuid',
                 'Invalid rule UUID'));
@@ -195,7 +353,7 @@ function FwRule(data, opts) {
 
     this.version = data.version || generateVersion();
 
-    if (data.hasOwnProperty('owner_uuid')) {
+    if (hasOwnProperty(data, 'owner_uuid')) {
         if (!validators.validateUUID(data.owner_uuid)) {
             errs.push(new validators.InvalidParamError('owner_uuid',
                 'Invalid owner UUID'));
@@ -206,7 +364,7 @@ function FwRule(data, opts) {
         this.global = true;
     }
 
-    if (data.hasOwnProperty('enabled')) {
+    if (hasOwnProperty(data, 'enabled')) {
         if (!validators.bool(data.enabled)) {
             errs.push(new validators.InvalidParamError('enabled',
                 'enabled must be true or false'));
@@ -219,7 +377,7 @@ function FwRule(data, opts) {
 
     for (var s in STRING_PROPS) {
         var str = STRING_PROPS[s];
-        if (data.hasOwnProperty(str)) {
+        if (hasOwnProperty(data, str)) {
             try {
                 validators.validateString(str, data[str]);
                 this[str] = data[str];
@@ -230,19 +388,19 @@ function FwRule(data, opts) {
     }
 
     if (opts.enforceGlobal) {
-        if (data.hasOwnProperty('global') && !validators.bool(data.global)) {
+        if (hasOwnProperty(data, 'global') && !validators.bool(data.global)) {
             errs.push(new validators.InvalidParamError('global',
                 'global must be true or false'));
         }
 
-        if (data.hasOwnProperty('global')
-            && data.hasOwnProperty('owner_uuid') && data.global) {
+        if (hasOwnProperty(data, 'global')
+            && hasOwnProperty(data, 'owner_uuid') && data.global) {
             errs.push(new validators.InvalidParamError('global',
                 'cannot specify both global and owner_uuid'));
         }
 
-        if (!data.hasOwnProperty('global')
-            && !data.hasOwnProperty('owner_uuid')) {
+        if (!hasOwnProperty(data, 'global')
+            && !hasOwnProperty(data, 'owner_uuid')) {
             errs.push(new validators.InvalidParamError('owner_uuid',
                 'owner_uuid required'));
         }
@@ -269,8 +427,8 @@ function FwRule(data, opts) {
         this.protoTargets = this.types;
     } else {
         this.ports = parsed.protocol.targets.sort(function (a, b) {
-            var first = a.hasOwnProperty('start') ? a.start : a;
-            var second = b.hasOwnProperty('start') ? b.start : b;
+            var first = hasOwnProperty(a, 'start') ? a.start : a;
+            var second = hasOwnProperty(b, 'start') ? b.start : b;
             return Number(first) - Number(second);
         });
         this.protoTargets = this.ports;
@@ -308,7 +466,7 @@ function FwRule(data, opts) {
             var name = target[0] + 's';
 
             numTargets++;
-            if (!dirs[dir].hasOwnProperty(name)) {
+            if (!hasOwnProperty(dirs[dir], name)) {
                 dirs[dir][name] = {};
             }
 
@@ -343,7 +501,7 @@ function FwRule(data, opts) {
         dir = DIRECTIONS[d];
         for (var t in TARGET_TYPES) {
             var type = TARGET_TYPES[t] + 's';
-            if (dirs[dir].hasOwnProperty(type)) {
+            if (hasOwnProperty(dirs[dir], type)) {
                 if (type === 'tags') {
                     this[dir][type] = tagList(dirs[dir][type]);
 
@@ -430,7 +588,7 @@ FwRule.prototype.raw = function () {
 
     for (var s in STRING_PROPS) {
         var str = STRING_PROPS[s];
-        if (this.hasOwnProperty(str)) {
+        if (hasOwnProperty(this, str)) {
             raw[str] = this[str];
         }
     }
@@ -460,7 +618,7 @@ FwRule.prototype.serialize = function (fields) {
                 ser.global = true;
             }
         } else {
-            if (this.hasOwnProperty(field)) {
+            if (hasOwnProperty(this, field)) {
                 ser[field] = this[field];
             }
         }
@@ -482,7 +640,7 @@ FwRule.prototype.text = function () {
         to: []
     };
 
-    forEachTarget(this, function (dir, type, name, arr) {
+    forEachTarget(this, function (dir, type, _, arr) {
         for (var i in arr) {
             var txt;
             if (type === 'tag') {
@@ -513,8 +671,8 @@ FwRule.prototype.text = function () {
         );
     } else {
         ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start')
-                && port.hasOwnProperty('end')) {
+            if (hasOwnProperty(port, 'start')
+                && hasOwnProperty(port, 'end')) {
                 /*
                  * We only output PORTS when we have a range, since we don't
                  * distinguish PORTS 1, 2 from (PORT 1 AND PORT 2) after
@@ -581,6 +739,8 @@ function generateVersion() {
 module.exports = {
     create: createRule,
     generateVersion: generateVersion,
+    tagEscape: tagEscape,
+    tagUnescape: tagUnescape,
     DIRECTIONS: DIRECTIONS,
     FIELDS: FIELDS,
     FwRule: FwRule,
diff --git a/src/fw/tools/fwrule/lib/validators.js b/src/fw/tools/fwrule/lib/validators.js
index 73ce97ed..651df743 100644
--- a/src/fw/tools/fwrule/lib/validators.js
+++ b/src/fw/tools/fwrule/lib/validators.js
@@ -28,6 +28,8 @@
  * firewall rule parser: validation functions
  */
 
+'use strict';
+
 var net = require('net');
 var util = require('util');
 var VError = require('verror').VError;
@@ -65,7 +67,7 @@ util.inherits(InvalidParamError, VError);
  * the broadcast address
  */
 function validateIPv4address(ip) {
-    if (!net.isIPv4(ip) || (ip == '255.255.255.255') || (ip == '0.0.0.0')) {
+    if (!net.isIPv4(ip) || (ip === '255.255.255.255') || (ip === '0.0.0.0')) {
         return false;
     }
 
@@ -149,11 +151,12 @@ function validatePortOrAll(port) {
  * and lower-case allowed)
  */
 function validateProtocol(protocol) {
-    var protoLC = protocol.toLowerCase();
-    if ((protoLC != 'tcp') && (protoLC != 'udp') && (!icmpr.test(protoLC))) {
+    if (typeof (protocol) !== 'string') {
         return false;
     }
-    return true;
+
+    var protoLC = protocol.toLowerCase();
+    return ((protoLC === 'tcp') || (protoLC === 'udp') || icmpr.test(protoLC));
 }
 
 
@@ -162,11 +165,12 @@ function validateProtocol(protocol) {
  * mixed case allowed)
  */
 function validateAction(action) {
-    var actionLC = action.toLowerCase();
-    if ((actionLC != 'allow') && (actionLC != 'block')) {
+    if (typeof (action) !== 'string') {
         return false;
     }
-    return true;
+
+    var actionLC = action.toLowerCase();
+    return ((actionLC === 'allow') || (actionLC === 'block'));
 }
 
 
diff --git a/src/fw/tools/fwrule/package.json b/src/fw/tools/fwrule/package.json
index 5264b575..e3660f40 100644
--- a/src/fw/tools/fwrule/package.json
+++ b/src/fw/tools/fwrule/package.json
@@ -1,20 +1,29 @@
 {
   "name": "fwrule",
   "description": "Parser for Joyent firewall rules",
-  "version": "1.0.0",
+  "version": "1.3.1",
   "author": "Joyent (joyent.com)",
+  "keywords": [ "smartos", "triton" ],
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/joyent/sdc-fwrule.git"
+  },
   "dependencies": {
     "node-uuid": "1.2.0",
     "extsprintf": "1.0.1",
     "verror": "1.3.4"
   },
   "devDependencies": {
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1",
+    "faucet": "0.0.1",
+    "istanbul": "^0.4.0",
     "jison": "0.4.2",
-    "nodeunit": "0.9.1",
+    "tape": "^4.2.2",
     "ramsey": "0.1.2"
   },
   "engines": {
-    "node": ">=0.6"
+    "node": ">=0.10"
   },
   "main": "lib/index.js",
   "scripts": {
diff --git a/src/fw/tools/fwrule/src/fwrule.jison b/src/fw/tools/fwrule/src/fwrule.jison
index b94118fd..cc6140ae 100644
--- a/src/fw/tools/fwrule/src/fwrule.jison
+++ b/src/fw/tools/fwrule/src/fwrule.jison
@@ -30,7 +30,6 @@
 
 digit                   [0-9]
 hex                     [0-9a-f]
-esc                     "\\"
 t                       {digit}{1,3}
 
 %%
@@ -89,7 +88,7 @@ t                       {digit}{1,3}
 "CODE"                  return 'CODE';
 "code"                  return 'CODE';
 
-\"(?:{esc}["bfnrt/{esc}]|{esc}"u"[a-fA-F0-9]{4}|[^"{esc}])*\"  yytext = yytext.substr(1,yyleng-2); return 'STRING';
+\"(?:\\["bfnrt/()\\]|\\"u"[a-fA-F0-9]{4}|[^"\\])*\"  yytext = yy.tagUnescape(yytext.substr(1,yyleng-2)); return 'STRING';
 {t}'.'{t}'.'{t}'.'{t}          return 'IPV4ADDR';
 {hex}*':'{hex}*':'[:0-9a-f]*   return 'IPV6ADDR';
 '/'{digit}{1,3}                return 'CIDRSUFFIX';
diff --git a/src/fw/tools/fwrule/test/invalid.test.js b/src/fw/tools/fwrule/test/invalid.test.js
index 211fb07b..379899c8 100644
--- a/src/fw/tools/fwrule/test/invalid.test.js
+++ b/src/fw/tools/fwrule/test/invalid.test.js
@@ -26,14 +26,10 @@
  * Negative unit tests for the firewall rule object
  */
 
-var fwrule = require('../lib/index');
-var util = require('util');
-
+'use strict';
 
-
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
+var fwrule = require('../lib/index');
+var test = require('tape');
 
 
 function longStr() {
@@ -102,10 +98,30 @@ var INVALID = [
                         + 'expected: \'(\', \'all\', \'any\', \'ip\', '
                         + '\'subnet\', \'vm\', \'tag\', found: word'],
 
-    [ 'invalid subnet',
+    [ 'invalid IPv4',
+        { rule: 'FROM tag foo TO ip 10.288.0.0 ALLOW udp port 53' },
+        'rule', 'IPv4 address "10.288.0.0" is invalid' ],
+
+    [ 'invalid IPv6',
+        { rule: 'FROM tag foo TO ip fd00::12345 ALLOW udp port 53' },
+        'rule', 'IPv6 address "fd00::12345" is invalid' ],
+
+    [ 'invalid IPv4 subnet: bad address component',
+        { rule: 'FROM tag foo TO subnet 10.350.0.0/24 ALLOW udp port 53' },
+        'rule', 'Subnet "10.350.0.0/24" is invalid (must be in CIDR format)' ],
+
+    [ 'invalid IPv4 subnet: bad prefix length',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/33 ALLOW udp port 53' },
         'rule', 'Subnet "10.8.0.0/33" is invalid (must be in CIDR format)' ],
 
+    [ 'invalid IPv6 subnet: bad address component',
+        { rule: 'FROM tag foo TO subnet fd005::/64 ALLOW udp port 53' },
+        'rule', 'Subnet "fd005::/64" is invalid (must be in CIDR format)' ],
+
+    [ 'invalid IPv6 subnet: bad prefix length',
+        { rule: 'FROM tag foo TO subnet fd00::/130 ALLOW udp port 53' },
+        'rule', 'Subnet "fd00::/130" is invalid (must be in CIDR format)' ],
+
     [ 'invalid port: too small',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 0' },
         'rule', 'Port number "0" is invalid' ],
@@ -114,6 +130,10 @@ var INVALID = [
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 65537' },
         'rule', 'Port number "65537" is invalid' ],
 
+    [ 'invalid port range: too many numbers',
+        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 1-20-30' },
+        'rule', '"1-20-30" is not a valid port number or range' ],
+
     [ 'invalid port range: too small',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 0-20' },
         'rule', 'Port number "0" is invalid' ],
@@ -314,7 +334,7 @@ var INVALID = [
 ];
 
 
-exports['Invalid rules'] = function (t) {
+test('Invalid rules', function (t) {
     INVALID.forEach(function (data) {
         var testName = data[0];
         var expMsg = data[3];
@@ -324,7 +344,7 @@ exports['Invalid rules'] = function (t) {
         var thrown = false;
 
         try {
-            opts = (field == 'global' ? { enforceGlobal: true } : {});
+            opts = (field === 'global' ? { enforceGlobal: true } : {});
             fwrule.create(rule, opts);
         } catch (err) {
             thrown = true;
@@ -335,11 +355,11 @@ exports['Invalid rules'] = function (t) {
         t.ok(thrown, 'Error thrown: ' + testName);
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['Invalid parameters'] = function (t) {
+test('Invalid parameters', function (t) {
     var thrown = false;
     var invalid = {
         enabled: 'invalid',
@@ -369,11 +389,11 @@ exports['Invalid parameters'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
+    t.end();
+});
 
 
-exports['Missing rule field'] = function (t) {
+test('Missing rule field', function (t) {
     var thrown = false;
 
     try {
@@ -385,11 +405,11 @@ exports['Missing rule field'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
+    t.end();
+});
 
 
-exports['global and owner_uuid not set'] = function (t) {
+test('global and owner_uuid not set', function (t) {
     var thrown = false;
 
     try {
@@ -403,14 +423,5 @@ exports['global and owner_uuid not set'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
-
-
-
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
+    t.end();
+});
diff --git a/src/fw/tools/fwrule/test/parser.test.js b/src/fw/tools/fwrule/test/parser.test.js
index 47ac52f7..55373eb6 100644
--- a/src/fw/tools/fwrule/test/parser.test.js
+++ b/src/fw/tools/fwrule/test/parser.test.js
@@ -26,12 +26,46 @@
  * Unit tests for the firewall rule parser
  */
 
+'use strict';
+
 var util = require('util');
 var parser = require('../lib/index');
+var test = require('tape');
+
+
+// --- Helpers
+
+function checkInvalidRules(t, toCheck) {
+    toCheck.forEach(function (rule) {
+        try {
+            parser.parse(rule);
+            t.fail('Parsing bad rule didn\'t fail: ' + rule);
+        } catch (err) {
+            t.ok(err.message, 'Failed to parse bad rule: ' + rule);
+        }
+    });
+
+    t.end();
+}
 
 
+// --- Tests
 
-exports['tags'] = function (t) {
+
+test('empty input', function (t) {
+    try {
+        parser.parse('');
+        t.ok(false, 'Empty input to the parser should throw!');
+    } catch (err) {
+        t.deepEqual(err.message,
+            'Error at character 0: \'\', expected: \'FROM\', '
+            + 'found: empty string');
+    }
+    t.end();
+});
+
+
+test('tags', function (t) {
     t.deepEqual(parser.parse(
         'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80'),
         { from: [ [ 'ip', '1.2.3.4' ] ],
@@ -43,11 +77,11 @@ exports['tags'] = function (t) {
             }
         }, 'tag containing dashes');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp'] = function (t) {
+test('icmp', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -57,7 +91,7 @@ exports['icmp'] = function (t) {
             action: 'allow',
             protocol: {
                 name: 'icmp',
-                targets: [ '8' ]
+                targets: [ 8 ]
             }
         }, 'icmp with type');
 
@@ -72,11 +106,11 @@ exports['icmp'] = function (t) {
             }
         }, 'icmp with type and code');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['case insensitivity'] = function (t) {
+test('case insensitivity', function (t) {
     var vm = 'b5ff85db-fc33-4471-b045-5688cb7fa6a8';
     var ipToTag = {
         from: [ [ 'ip', '1.2.3.4' ] ],
@@ -115,7 +149,7 @@ exports['case insensitivity'] = function (t) {
         action: 'allow',
         protocol: {
             name: 'icmp',
-            targets: [ '8:0', '9' ]
+            targets: [ '8:0', 9 ]
         }
     };
 
@@ -141,15 +175,168 @@ exports['case insensitivity'] = function (t) {
         try {
             t.deepEqual(parser.parse(data[0]), data[1], data[0]);
         } catch (err) {
-            t.ifError(err);
+            t.ifError(err, data[0]);
         }
     });
 
-    t.done();
-};
+    t.end();
+});
 
-exports['port ranges'] = function (t) {
 
+test('parentheses around wildcards', function (t) {
+    var anyToAll = {
+        from: [ [ 'wildcard', 'any' ] ],
+        to: [ [ 'wildcard', 'vmall' ] ],
+        action: 'allow',
+        protocol: {
+            name: 'udp',
+            targets: [ 50 ]
+        }
+    };
+
+    [
+        [ 'from (ANY) to ALL VMS allow UDP ports 50', anyToAll ],
+        [ 'from (any) to all vms allow udp ports 50', anyToAll ],
+        [ 'from ANY to (ALL VMS) allow UDP ports 50', anyToAll ],
+        [ 'from any to (all vms) allow udp ports 50', anyToAll ],
+        [ 'FROM ( ANY ) TO ALL VMS ALLOW UDP ports 50', anyToAll ],
+        [ 'FROM ( ANY ) TO all vms ALLOW udp ports 50', anyToAll ],
+        [ 'from ANY to ( ALL VMS ) allow UDP ports 50', anyToAll ],
+        [ 'from any to ( all vms ) allow udp ports 50', anyToAll ],
+        [ 'from ( any ) to ( all vms ) allow udp ports 50', anyToAll ],
+        [ 'from (any) to (all vms) allow udp ports 50', anyToAll ]
+    ].forEach(function (data) {
+        try {
+            t.deepEqual(parser.parse(data[0]), data[1], data[0]);
+        } catch (err) {
+            t.ifError(err, data[0]);
+        }
+    });
+
+    t.end();
+});
+
+
+test('incomplete rule text', function (t) {
+    var check = [ ];
+
+    var to = [ 'TO' ];
+    var targets = [
+        'any', 'all vms', 'ip 1.2.3.4', 'ip fd00::1', 'subnet 1.2.3.0/24',
+        'subnet fd00::/64', 'tag foo', 'tag foo = bar',
+        'vm ca3eb1d6-1555-44fb-ea1a-ab66f4685214'
+    ];
+    var endings = [ 'port', 'ports', 'ports 1 -', 'ports 1-', 'type',
+        'type 128 code' ];
+
+    function buildStr(str, remains) {
+        check.push(str);
+
+        if (remains[0] !== undefined) {
+            remains[0].forEach(function (strB) {
+                buildStr(str + ' ' + strB, remains.slice(1));
+            });
+        }
+    }
+
+    buildStr('FROM',
+        [ targets, to, targets, parser.ACTIONS, parser.PROTOCOLS, endings ]);
+
+    checkInvalidRules(t, check);
+});
+
+
+test('Invalid: Logical operations', function (t) {
+    checkInvalidRules(t, [
+        'FROM (tag a foo tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a xor tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a nand tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a not tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a nor tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a xnor tag b) TO any ALLOW tcp PORT 80'
+    ]);
+});
+
+
+test('Invalid: Actions', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any DENY tcp PORT 80',
+        'FROM any TO any FORWARD tcp PORT 80',
+        'FROM any TO any OBSTRUCT tcp PORT 80',
+        'FROM any TO any PASS tcp PORT 80',
+        'FROM any TO any PASSTHROUGH tcp PORT 80',
+        'FROM any TO any PERMIT tcp PORT 80'
+    ]);
+});
+
+
+test('Invalid: Protocols', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW foo PORT 80',
+        'FROM any TO any ALLOW bar PORT 80',
+        'FROM any TO any ALLOW ftp PORT 80',
+        'FROM any TO any ALLOW ssh PORT 80',
+        'FROM any TO any ALLOW http PORT 80',
+        'FROM any TO any ALLOW sctp PORT 80',
+        'FROM any TO any ALLOW dccp PORT 80',
+        'FROM any TO any ALLOW mtcp PORT 80'
+    ]);
+});
+
+test('Invalid: Parameters for TCP & UDP', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW tcp PORT hello',
+        'FROM any TO any ALLOW udp PORT hello',
+        'FROM any TO any ALLOW tcp PORT ssh',
+        'FROM any TO any ALLOW udp PORT ssh',
+        'FROM any TO any ALLOW tcp PORT _',
+        'FROM any TO any ALLOW udp PORT _',
+        'FROM any TO any ALLOW tcp PORT *',
+        'FROM any TO any ALLOW udp PORT *',
+        'FROM any TO any ALLOW tcp PORTS hello',
+        'FROM any TO any ALLOW udp PORTS hello',
+        'FROM any TO any ALLOW tcp PORTS ssh',
+        'FROM any TO any ALLOW udp PORTS ssh',
+        'FROM any TO any ALLOW tcp PORTS ssh-http',
+        'FROM any TO any ALLOW udp PORTS ssh-http',
+        'FROM any TO any ALLOW tcp PORTS _',
+        'FROM any TO any ALLOW udp PORTS _',
+        'FROM any TO any ALLOW tcp PORTS *',
+        'FROM any TO any ALLOW udp PORTS *',
+        'FROM any TO any ALLOW tcp TYPE 128',
+        'FROM any TO any ALLOW udp TYPE 128',
+        'FROM any TO any ALLOW tcp TYPE 128 CODE 0',
+        'FROM any TO any ALLOW udp TYPE 128 CODE 0'
+    ]);
+});
+
+test('Invalid: Parameters for ICMP(6)', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW icmp PORT 80',
+        'FROM any TO any ALLOW icmp6 PORT 80',
+        'FROM any TO any ALLOW icmp PORTS 80',
+        'FROM any TO any ALLOW icmp6 PORTS 80',
+        'FROM any TO any ALLOW icmp PORTS 80-85',
+        'FROM any TO any ALLOW icmp6 PORTS 80-85',
+        'FROM any TO any ALLOW icmp TYPE foo',
+        'FROM any TO any ALLOW icmp6 TYPE foo',
+        'FROM any TO any ALLOW icmp TYPE *',
+        'FROM any TO any ALLOW icmp6 TYPE *',
+        'FROM any TO any ALLOW icmp TYPE 1:0',
+        'FROM any TO any ALLOW icmp6 TYPE 1:0',
+        'FROM any TO any ALLOW icmp 1:0',
+        'FROM any TO any ALLOW icmp6 1:0',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE *',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE *',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE _',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE _'
+    ]);
+});
+
+
+test('port ranges', function (t) {
     var rangeA = {
         from: [ [ 'ip', '1.2.3.4' ] ],
         to: [ [ 'tag', 'some-tag' ] ],
@@ -170,10 +357,11 @@ exports['port ranges'] = function (t) {
             t.ifError(err);
         }
     });
-    t.done();
-};
+    t.end();
+});
+
 
-exports['version mismatch'] = function (t) {
+test('version mismatch', function (t) {
     try {
         parser.parse('FROM tag foo TO tag bar ALLOW TCP PORTS 20-30',
             { maxVersion: 1 });
@@ -184,10 +372,11 @@ exports['version mismatch'] = function (t) {
             'The rule uses a feature (port ranges) newer than this API allows',
             'Correct error message for using ports in version 1');
     }
-    t.done();
-};
+    t.end();
+});
 
-exports['icmp with code'] = function (t) {
+
+test('icmp with code', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
     var ruleTxt = util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type 8 '
         + 'code 0', vm);
@@ -202,10 +391,11 @@ exports['icmp with code'] = function (t) {
             }
         }, 'icmp with type');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['icmp type all'] = function (t) {
+test('icmp type all', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -230,10 +420,11 @@ exports['icmp type all'] = function (t) {
             }
         }, 'icmp type all in parens');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['icmp6 type all'] = function (t) {
+
+test('icmp6 type all', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -258,10 +449,11 @@ exports['icmp6 type all'] = function (t) {
             }
         }, 'icmp6 type all in parens');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['tag with value'] = function (t) {
+test('Tags: With value', function (t) {
     var ruleTxt = 'FROM tag foo = bar TO ip 8.8.8.8 BLOCK udp PORT 53';
 
     t.deepEqual(parser.parse(ruleTxt),
@@ -274,11 +466,11 @@ exports['tag with value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags with values'] = function (t) {
+test('Tags: Multiple values', function (t) {
     var ruleTxt = 'FROM (tag foo = bar OR tag some = value) TO '
         + 'ip 8.8.8.8 BLOCK udp PORT 53';
 
@@ -295,11 +487,11 @@ exports['multiple tags with values'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tag with quoted value'] = function (t) {
+test('Tags: Quoted value', function (t) {
     var ruleTxt = 'FROM tag foo = "some value" TO ip 8.8.8.8 BLOCK udp PORT 53';
 
     t.deepEqual(parser.parse(ruleTxt),
@@ -312,11 +504,11 @@ exports['tag with quoted value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags with quoted name and value'] = function (t) {
+test('Tags: Quoted name and value', function (t) {
     var ruleTxt = 'FROM (tag "tag one" = "some value" OR '
         + 'tag "tag two" = "another value")'
         + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
@@ -334,11 +526,61 @@ exports['tags with quoted name and value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
+
+
+test('Tags: Escaped characters', function (t) {
+    var ruleTxt = 'FROM (tag "\\"" = "\\)" OR tag "\\n" = "\\b") TO tag "\\(" '
+        + 'BLOCK udp PORT 53';
+
+    t.deepEqual(parser.parse(ruleTxt), {
+        from: [ [ 'tag', [ '"', ')' ] ],
+                [ 'tag', [ '\n', '\b' ] ] ],
+        to: [ [ 'tag', '(' ] ],
+        action: 'block',
+        protocol: {
+            name: 'udp',
+            targets: [ 53 ]
+        }
+    });
+
+    t.end();
+});
+
+
+test('Tags: Parens shouldn\'t have to be escaped', function (t) {
+    var ruleTxt = 'FROM tag "(" = "(" TO tag ")" = ")" '
+        + 'BLOCK udp PORT 53';
+
+    t.deepEqual(parser.parse(ruleTxt), {
+        from: [ [ 'tag', [ '(', '(' ] ] ],
+        to: [ [ 'tag', [ ')', ')' ] ] ],
+        action: 'block',
+        protocol: {
+            name: 'udp',
+            targets: [ 53 ]
+        }
+    });
+
+    t.end();
+});
+
+
+test('Tags: UTF-8 characters can be written using \\u', function (t) {
+    var escapedTxt = 'FROM tag "\\u2603" = "\\u0631\\u062c\\u0644 '
+        + '\\u0627\\u0644\\u062b\\u0644\\u062c" TO tag "\\u26C4" '
+        + 'BLOCK udp PORT 53';
+    var unicodeTxt = 'FROM tag "☃" = "رجل الثلج" TO tag "⛄" '
+        + 'BLOCK udp PORT 53';
+
+    t.deepEqual(parser.parse(escapedTxt), parser.parse(unicodeTxt));
+
+    t.end();
+});
 
 
-exports['tags with unicode characters'] = function (t) {
+test('Tags: Unicode characters', function (t) {
     var ruleTxt = 'FROM (tag "☂" = "ທ" OR '
         + 'tag "삼겹살" = "불고기")'
         + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
@@ -356,5 +598,5 @@ exports['tags with unicode characters'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
diff --git a/src/fw/tools/fwrule/test/rule.test.js b/src/fw/tools/fwrule/test/rule.test.js
index e284ad64..a855982a 100644
--- a/src/fw/tools/fwrule/test/rule.test.js
+++ b/src/fw/tools/fwrule/test/rule.test.js
@@ -26,32 +26,119 @@
  * Unit tests for the firewall rule object
  */
 
+'use strict';
+
 var fwrule = require('../lib/index');
 var util = require('util');
+var test = require('tape');
+
+var TAG_TEST =
+    'FROM tag "%s" = "%s" TO tag "%s" = "%s" ALLOW tcp PORT 80';
+var TAG_TEST_UNQUOTED = 'FROM tag %s = %s TO tag %s = %s ALLOW tcp PORT 80';
+
+
+function stringify(val) {
+    switch (val) {
+    case '\u0085':
+        return '"\\u0085"';
+    default:
+        return JSON.stringify(val);
+    }
+}
+
+
+function testTagInRules(t, unquotedOK, txtIn, txtOut, val) {
+    var desc = util.format('txtIn=%s, txtOut=%s, val=%s',
+        stringify(txtIn), stringify(txtOut), stringify(val));
+    var ruleOut = util.format(TAG_TEST, txtOut, txtOut, txtOut, txtOut);
+    var toParse = [ util.format(TAG_TEST, txtIn, txtIn, txtIn, txtIn) ];
+
+    if (unquotedOK) {
+        toParse.push(
+            util.format(TAG_TEST_UNQUOTED, txtIn, txtIn, txtIn, txtIn));
+    }
+
+    toParse.forEach(function (ruleIn) {
+        var rule = fwrule.create({
+            rule: ruleIn,
+            created_by: 'fwadm',
+            description: desc,
+            enabled: true,
+            version: fwrule.generateVersion()
+        });
+
+        var raw = {
+            from: {
+                ips: [],
+                subnets: [],
+                vms: [],
+                tags: [ [ val, val ] ],
+                wildcards: []
+            },
+            to: {
+                ips: [],
+                subnets: [],
+                vms: [],
+                tags: [ [ val, val ] ],
+                wildcards: []
+            },
+            created_by: 'fwadm',
+            description: desc,
+            enabled: true,
+            ports: [ 80 ],
+            action: 'allow',
+            protocol: 'tcp',
+            uuid: rule.uuid,
+            version: rule.version
+        };
 
+        t.deepEqual(rule.raw(), raw, desc + ': rule.raw()');
+        t.deepEqual(rule.from, raw.from, desc + ': rule.from');
+        t.deepEqual(rule.to, raw.to, desc + ': rule.to');
+        t.ok(!rule.allVMs, desc + ': rule.allVMs');
 
+        var ser = {
+            created_by: 'fwadm',
+            description: desc,
+            enabled: true,
+            global: true,
+            rule: ruleOut,
+            uuid: rule.uuid,
+            version: rule.version
+        };
 
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
+        t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
+        t.deepEqual(rule.serialize(['enabled', 'version']),
+            { enabled: ser.enabled, version: ser.version },
+            'rule.serialize(): enabled, version');
+    });
+}
 
 
+function checkTagsInRules(t, toCheck) {
+    toCheck.forEach(function (cfg) {
+        testTagInRules(t, cfg.unquotedOK, cfg.in, cfg.out, cfg.val);
+    });
+
+    t.end();
+}
+
 
 // --- Tests
 
 
 
-exports['rule exports'] = function (t) {
+test('rule exports', function (t) {
     ['ACTIONS', 'DIRECTIONS', 'FIELDS', 'PROTOCOLS', 'TARGET_TYPES'].forEach(
         function (field) {
         t.ok(fwrule[field].length > 0, 'fwrule.' + field);
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['all target types'] = function (t) {
+test('all target types', function (t) {
     var desc = 'all target types';
     var ips = ['192.168.1.1', '10.2.0.3'];
     var vms = ['9a343ca8-b42a-4a27-a9c5-800f57d1e8ed',
@@ -107,8 +194,8 @@ exports['all target types'] = function (t) {
         description: desc,
         enabled: true,
         global: true,
-        rule: util.format('FROM (ip %s OR subnet %s OR tag %s OR vm %s) '
-            + 'TO (ip %s OR subnet %s OR tag %s OR vm %s) ALLOW tcp PORT 80',
+        rule: util.format('FROM (ip %s OR subnet %s OR tag "%s" OR vm %s) '
+            + 'TO (ip %s OR subnet %s OR tag "%s" OR vm %s) ALLOW tcp PORT 80',
             ips[0], subnets[0], tags[0], vms[0],
             ips[1], subnets[1], tags[1], vms[1]),
         uuid: rule.uuid,
@@ -120,19 +207,19 @@ exports['all target types'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['any'] = function (t) {
+test('any', function (t) {
     var ip = '192.168.3.2';
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var tag = 'tag3';
     var subnet = '192.168.0.0/16';
 
     var ruleTxt = util.format(
-        'FROM (ip %s OR subnet %s OR tag %s OR vm %s) TO any ALLOW tcp PORT 80',
-        ip, subnet, tag, vm);
+        'FROM (ip %s OR subnet %s OR tag "%s" OR vm %s) TO any'
+        + ' ALLOW tcp PORT 80', ip, subnet, tag, vm);
 
     var rule = fwrule.create({
         rule: ruleTxt,
@@ -176,11 +263,11 @@ exports['any'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['all vms'] = function (t) {
+test('all vms', function (t) {
     var ip = '192.168.3.2';
     var owner = '50716241-ac8d-4e63-a9e4-77ff07cede61';
 
@@ -232,11 +319,11 @@ exports['all vms'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags'] = function (t) {
+test('tags', function (t) {
     var ruleTxt = 'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80';
     var rule = new fwrule.create({
         rule: ruleTxt,
@@ -270,26 +357,72 @@ exports['tags'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
+        rule: 'FROM ip 1.2.3.4 TO tag "some-tag" ALLOW tcp PORT 80',
+        uuid: rule.uuid,
+        version: rule.version
+    }, 'rule.serialize()');
+    t.ok(!rule.allVMs, 'rule.allVMs');
+
+    t.end();
+});
+
+
+test('tag "hasOwnProperty"', function (t) {
+    var ruleTxt = 'FROM ip 1.2.3.4 TO (tag hasOwnProperty OR tag some-tag) '
+        + 'ALLOW tcp PORT 80';
+    var rule = new fwrule.create({
         rule: ruleTxt,
+        version: fwrule.generateVersion()
+    });
+
+    var raw = {
+        action: 'allow',
+        enabled: false,
+        from: {
+            ips: [ '1.2.3.4' ],
+            vms: [],
+            subnets: [],
+            tags: [],
+            wildcards: []
+        },
+        protocol: 'tcp',
+        ports: [ 80 ],
+        to: {
+            ips: [],
+            vms: [],
+            subnets: [],
+            tags: [ 'hasOwnProperty', 'some-tag' ],
+            wildcards: []
+        },
+        uuid: rule.uuid,
+        version: rule.version
+    };
+    t.deepEqual(rule.raw(), raw, 'rule.raw()');
+
+    t.deepEqual(rule.serialize(), {
+        enabled: false,
+        global: true,
+        rule: 'FROM ip 1.2.3.4 TO (tag "hasOwnProperty" OR tag "some-tag") '
+            + 'ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
     t.ok(!rule.allVMs, 'rule.allVMs');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple ports and owner_uuid'] = function (t) {
+test('multiple ports and owner_uuid', function (t) {
     var inRule1 = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
+        rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + '(PORT 1002 AND PORT 1052)',
         enabled: true,
         owner_uuid: '930896af-bf8c-48d4-885c-6573a94b1853',
         version: fwrule.generateVersion()
     };
     var inRule2 = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
+        rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + 'PORTS 1002, 1052',
         enabled: true,
         owner_uuid: '930896af-bf8c-48d4-885c-6573a94b1853',
@@ -336,6 +469,7 @@ exports['multiple ports and owner_uuid'] = function (t) {
     }, 'rule1.serialize()');
 
     raw.uuid = rule2.uuid;
+    raw.version = rule2.version;
 
     t.deepEqual(rule2.raw(), raw, 'rule2.raw()');
     t.deepEqual(rule2.ports, raw.ports, 'rule2.ports');
@@ -349,11 +483,11 @@ exports['multiple ports and owner_uuid'] = function (t) {
         version: rule2.version
     }, 'rule2.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp'] = function (t) {
+test('icmp', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -401,11 +535,11 @@ exports['icmp'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp with code'] = function (t) {
+test('icmp with code', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -453,11 +587,11 @@ exports['icmp with code'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp: multiple types'] = function (t) {
+test('icmp: multiple types', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -509,11 +643,11 @@ exports['icmp: multiple types'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['sorting: icmp codes'] = function (t) {
+test('sorting: icmp codes', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var rule = fwrule.create({
@@ -564,10 +698,11 @@ exports['sorting: icmp codes'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['sorting: icmp6 codes'] = function (t) {
+test('sorting: icmp6 codes', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var rule = fwrule.create({
@@ -618,10 +753,11 @@ exports['sorting: icmp6 codes'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['sorting: ports'] = function (t) {
+
+test('sorting: ports', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + '(PORT 1002 AND PORT 10 AND PORT 1052 AND PORT 80 AND PORT 30245 '
@@ -659,17 +795,18 @@ exports['sorting: ports'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
+        rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + '(PORT 6 AND PORT 10 AND PORT 80 AND PORT 1002 AND PORT 1052 '
             + 'AND PORT 30245)',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['sorting: port ranges'] = function (t) {
+
+test('sorting: port ranges', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + 'PORTS 1002, 20-40, 10, 1052, 80, 30245, 6 - 11',
@@ -711,16 +848,17 @@ exports['sorting: port ranges'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
+        rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + 'PORTS 6 - 11, 10, 20 - 40, 80, 1002, 1052, 30245',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['single port range'] = function (t) {
+
+test('single port range', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + 'PORTS 50-50',
@@ -757,18 +895,19 @@ exports['single port range'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: true,
         global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
+        rule: 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp '
             + 'PORTS 50 - 50',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['port ALL'] = function (t) {
-    var normalText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp PORT all';
-    var parenText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp ( PORT all )';
+test('port ALL', function (t) {
+    var normalText = 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp PORT all';
+    var parenText = 'FROM ip 10.88.88.1 TO tag "tag2" ALLOW tcp ( PORT all )';
     var ruleTexts = [ normalText, parenText ];
 
     ruleTexts.forEach(function (ruleText) {
@@ -815,11 +954,11 @@ exports['port ALL'] = function (t) {
         }, 'rule.serialize()');
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags: equal'] = function (t) {
+test('tags: equal', function (t) {
     var ruleTxt =
         'FROM ip 1.2.3.4 TO tag some-tag = value ALLOW tcp PORT 80';
     var rule = new fwrule.create({
@@ -854,7 +993,7 @@ exports['tags: equal'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
-        rule: ruleTxt,
+        rule: 'FROM ip 1.2.3.4 TO tag "some-tag" = "value" ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
@@ -862,11 +1001,11 @@ exports['tags: equal'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: equal'] = function (t) {
+test('multiple tags: equal', function (t) {
     var ruleTxt = 'FROM ip 1.2.3.4 TO '
         + '(tag some-tag = value OR tag some-tag = value2) ALLOW tcp PORT 80';
     var rule = new fwrule.create({
@@ -904,7 +1043,9 @@ exports['multiple tags: equal'] = function (t) {
     t.deepEqual(rule.serialize(), {
         enabled: false,
         global: true,
-        rule: ruleTxt,
+        rule: 'FROM ip 1.2.3.4 TO '
+            + '(tag "some-tag" = "value" OR tag "some-tag" = "value2")'
+            + ' ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
     }, 'rule.serialize()');
@@ -912,11 +1053,11 @@ exports['multiple tags: equal'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: multiple values'] = function (t) {
+test('multiple tags: multiple values', function (t) {
     var rule = new fwrule.create({
         rule: 'FROM (tag some-tag OR tag some-tag = value0) TO '
             + '(tag some-tag = value OR tag some-tag = value2) '
@@ -956,8 +1097,8 @@ exports['multiple tags: multiple values'] = function (t) {
         global: true,
         // 'some-tag = value0' is a subset of 'tag some-tag', so it is not
         // included in the rule text
-        rule: 'FROM tag some-tag TO '
-            + '(tag some-tag = value OR tag some-tag = value2) '
+        rule: 'FROM tag "some-tag" TO '
+            + '(tag "some-tag" = "value" OR tag "some-tag" = "value2") '
             + 'ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
@@ -966,11 +1107,11 @@ exports['multiple tags: multiple values'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.from.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: multiple quoted values'] = function (t) {
+test('multiple tags: multiple quoted values', function (t) {
     var owner = 'ace1da4b-9ab2-4991-8298-700bec1b70ed';
     var rule = new fwrule.create({
         owner_uuid: owner,
@@ -1019,7 +1160,7 @@ exports['multiple tags: multiple quoted values'] = function (t) {
         owner_uuid: owner,
         rule: 'FROM (tag "김치" = "白김치" '
             + 'OR tag "김치" = "백김치") TO '
-            + '(tag "some tag" = value OR tag some-tag = "another value") '
+            + '(tag "some tag" = "value" OR tag "some-tag" = "another value") '
             + 'ALLOW tcp PORT 80',
         uuid: rule.uuid,
         version: rule.version
@@ -1033,11 +1174,11 @@ exports['multiple tags: multiple quoted values'] = function (t) {
                 [ '김치', '백김치' ]
         ], 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['IPv6 sources'] = function (t) {
+test('IPv6 sources', function (t) {
     var desc = 'IPv6 sources';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var ips = ['fd00::2', 'fe80::8:20ff:fe40:65e4'];
@@ -1097,10 +1238,11 @@ exports['IPv6 sources'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['IPv6 subnet sources'] = function (t) {
+test('IPv6 subnet sources', function (t) {
     var desc = 'IPv6 subnet sources';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var cidr = 'fd00::/64';
@@ -1160,10 +1302,11 @@ exports['IPv6 subnet sources'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['IPv6 destinations'] = function (t) {
+
+test('IPv6 destinations', function (t) {
     var desc = 'IPv6 destinations';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var ips = ['fd00::1', 'fd00::2'];
@@ -1223,10 +1366,11 @@ exports['IPv6 destinations'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['IPv6 subnet destinations'] = function (t) {
+test('IPv6 subnet destinations', function (t) {
     var desc = 'IPv6 subnet destinations';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var cidr = 'fd00::/64';
@@ -1286,10 +1430,11 @@ exports['IPv6 subnet destinations'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['Mixed IPv4 and IPv6'] = function (t) {
+
+test('Mixed IPv4 and IPv6', function (t) {
     var desc = 'Mixed IPv4 and IPv6';
     var vm1 = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var vm2 = '518908b6-8299-466d-8ea5-20a0ceff63ec';
@@ -1351,14 +1496,205 @@ exports['Mixed IPv4 and IPv6'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
 
+test('Tag names and values: Normal', function (t) {
+    var tags = [ 'foo', 'foo-bar', 'foo_bar', 'db2', 'foo_bar-baz', '_' ];
 
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
+    var check = [];
+    tags.forEach(function (tag) {
+        check.push({ unquotedOK: true, in: tag, out: tag, val: tag });
+        var tagUpper = tag.toUpperCase();
+        check.push({
+            unquotedOK: true,
+            in: tagUpper,
+            out: tagUpper,
+            val: tagUpper
+        });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: IP addresses and subnets', function (t) {
+    checkTagsInRules(t, [
+        { in: '1.2.3.4', out: '1.2.3.4', val: '1.2.3.4' },
+        { in: '1.2.3.0/24', out: '1.2.3.0/24', val: '1.2.3.0/24' },
+        { in: '1.2.3.0\\/24', out: '1.2.3.0/24', val: '1.2.3.0/24' },
+        { in: 'fd00::a:b:c:5', out: 'fd00::a:b:c:5', val: 'fd00::a:b:c:5' },
+        { in: 'fc00::/7', out: 'fc00::/7', val: 'fc00::/7' },
+        { in: 'fc00::\\/7', out: 'fc00::/7', val: 'fc00::/7' }
+    ]);
+});
+
+
+test('Tag names and values: Numeric', function (t) {
+    var numbers = [
+        '0', '1', '5', '2000', '1234567890', '987654321', '23', '00000', '0',
+        '01', '10', '111111111'
+    ];
+
+    var check = [];
+    numbers.forEach(function (num) {
+        check.push({ unquotedOK: true, in: num, out: num, val: num });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: Keywords', function (t) {
+    var kws = [
+        'tag', 'from', 'to', 'ip', 'subnet', 'vm', 'any', 'all', 'all vms',
+        'vms', 'or', 'and', 'block', 'allow', 'port', 'ports', 'tcp', 'udp',
+        'icmp', 'icmp6', 'type', 'code'
+    ];
+
+    var check = [];
+    kws.forEach(function (kw) {
+        check.push({ in: kw, out: kw, val: kw });
+        var kwUpper = kw.toUpperCase();
+        check.push({ in: kwUpper, out: kwUpper, val: kwUpper });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: Escaped characters', function (t) {
+    checkTagsInRules(t, [
+        { val: ' ', in: ' ', out: ' ' },
+        { val: ' ', in: '\\u0020', out: ' ' },
+        { val: '\t', in: '\t', out: '\\t' },
+        { val: '\t', in: '\\t', out: '\\t' },
+        { val: '\t', in: '\\u0009', out: '\\t' },
+        { val: '\n', in: '\n', out: '\\n' },
+        { val: '\n', in: '\\n', out: '\\n' },
+        { val: '\n', in: '\\u000A', out: '\\n' },
+        { val: '\b', in: '\b', out: '\\b' },
+        { val: '\b', in: '\\b', out: '\\b' },
+        { val: '\b', in: '\\u0008', out: '\\b' },
+        { val: '\f', in: '\f', out: '\\f' },
+        { val: '\f', in: '\\f', out: '\\f' },
+        { val: '\f', in: '\\u000C', out: '\\f' },
+        { val: '\r', in: '\r', out: '\\r' },
+        { val: '\r', in: '\\r', out: '\\r' },
+        { val: '\r', in: '\\u000D', out: '\\r' },
+        { val: '/', in: '/', out: '/' },
+        { val: '/', in: '\\/', out: '/' },
+        { val: '(', in: '(', out: '\\(' },
+        { val: '(', in: '\\(', out: '\\(' },
+        { val: ')', in: ')', out: '\\)' },
+        { val: ')', in: '\\)', out: '\\)' },
+        { val: '"', in: '\\"', out: '\\"' },
+        { val: '\\', in: '\\\\', out: '\\\\' }
+    ]);
+});
+
+
+test('Tag names and values: Odd characters', function (t) {
+    var chars = [
+        '!', '@', '#', '$', '%', '^', '&', '*', ',', '.', '<', '>', '?', ';',
+        ':', '\'', '[', ']', '{', '}', '|', '=', '+', '~', '`', '-', '_'
+    ];
+
+    var check = [];
+    chars.forEach(function (c) {
+        check.push({ in: c, out: c, val: c });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: ASCII control characters', function (t) {
+    var chars = [
+        '0000', // null (NUL)
+        '0001', // start of heading (SOH)
+        '0002', // start of text (STX)
+        '0003', // end of text (ETX)
+        '0004', // end of transmission (EOT)
+        '0005', // enquiry (ENQ)
+        '0006', // acknowledgement (ACK)
+        '0007', // bell (BEL)
+        '000B', // vertical tab (VT)
+        '000E', // shift out (SO)
+        '000F', // shift in (SI)
+        '0010', // data link escape (DLE)
+        '0011', // device control 1 (DC1)/XON
+        '0012', // device control 2 (DC2)
+        '0013', // device control 3 (DC3)/XOFF
+        '0014', // device control 4 (DC4)
+        '0015', // negative acknowledgement (NAK)
+        '0016', // synchronous idle (SYN)
+        '0017', // end of transmission block (ETB)
+        '0018', // cancel (CAN)
+        '0019', // end of medium (EM)
+        '001A', // substitute (SUB)
+        '001B', // escape (ESC)
+        '001C', // file separator (FS)
+        '001D', // group separator (GS)
+        '001E', // record separator (RS)
+        '001F', // unit separator (US)
+        '007F'  // delete (DEL)
+    ];
+
+    var check = [];
+    chars.forEach(function (str) {
+        var space = String.fromCharCode(parseInt(str, 16));
+        var escaped = '\\u' + str;
+        var escapedLC = '\\u' + str.toLowerCase();
+        check.push({ in: space, out: escaped, val: space });
+        check.push({ in: escaped, out: escaped, val: space });
+        check.push({ in: escapedLC, out: escaped, val: space });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: Unicode whitespace characters', function (t) {
+    var chars = [
+        '000B', // vertical tab
+        '0085', // next line
+        '00A0', // non-breaking space
+        '1680', // ogham space mark
+        '180E', // mongolian vowel separator
+        '2000', // en quad
+        '2001', // em quad
+        '2002', // en space
+        '2003', // em space
+        '2004', // three-per-em space
+        '2005', // four-per-em space
+        '2006', // six-per-em space
+        '2007', // figure space
+        '2008', // punctuation space
+        '2009', // thin space
+        '200A', // hair space
+        '200B', // zero width space
+        '200C', // zero width non-joiner
+        '200D', // zero width joiner
+        '2028', // line separator
+        '2029', // paragraph separator
+        '202F', // narrow no-break space
+        '205F', // medium mathematical space
+        '2060', // word joiner
+        '3000', // ideographic space
+        'FEFF'  // zero width no-break space
+    ];
+
+    var check = [];
+    chars.forEach(function (str) {
+        var space = String.fromCharCode(parseInt(str, 16));
+        var escaped = '\\u' + str;
+        var escapedLC = '\\u' + str.toLowerCase();
+        check.push({ in: space, out: escaped, val: space });
+        check.push({ in: escaped, out: escaped, val: space });
+        check.push({ in: escapedLC, out: escaped, val: space });
+    });
+
+    checkTagsInRules(t, check);
+});
diff --git a/src/fw/tools/fwrule/test/run.js b/src/fw/tools/fwrule/test/run.js
new file mode 100644
index 00000000..276bc301
--- /dev/null
+++ b/src/fw/tools/fwrule/test/run.js
@@ -0,0 +1,24 @@
+// Copyright 2014 Patrick Mooney.  All rights reserved.
+
+'use strict';
+
+var assert = require('assert');
+var fs = require('fs');
+var path = require('path');
+
+function runTests(directory) {
+    fs.readdir(directory, function (err, files) {
+        assert.ifError(err);
+        files.filter(function (f) {
+            return (/\.test\.js$/.test(f));
+        }).map(function (f) {
+            return (path.join(directory, f));
+        }).forEach(require);
+    });
+}
+
+// --- Run All Tests
+
+(function main() {
+    runTests(__dirname);
+})();
diff --git a/src/fw/tools/fwrule/test/validators.test.js b/src/fw/tools/fwrule/test/validators.test.js
index d86d319b..65c62b87 100644
--- a/src/fw/tools/fwrule/test/validators.test.js
+++ b/src/fw/tools/fwrule/test/validators.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -28,23 +28,17 @@
  * Unit tests for the firewall rule validators
  */
 
-var validator = require('../lib/validators.js');
-
-
-
-// --- Globals
+'use strict';
 
-
-
-var IS_NODE_08 = (process.version.indexOf('v0.8') === 0);
+var test = require('tape');
+var validator = require('../lib/validators.js');
 
 
 
 // --- Tests
 
 
-
-exports['IPv4 addresses'] = function (t) {
+test('IPv4 addresses', function (t) {
     var i;
     var valid = [
         '1.2.3.4',
@@ -55,30 +49,24 @@ exports['IPv4 addresses'] = function (t) {
         '1',
         'asdf',
         '0.0.0.0',
+        '01.02.03.04',
         '255.255.255.255',
         '256.0.0.1'
     ];
 
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04');
-    } else {
-        invalid.push('01.02.03.04');
-    }
-
     for (i in valid) {
         t.ok(validator.validateIPv4address(valid[i]), valid[i]);
     }
 
     for (i in invalid) {
-        t.ok(!validator.validateIPv4address(invalid[i]), invalid[i]);
+        t.notOk(validator.validateIPv4address(invalid[i]), invalid[i]);
     }
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['IPv4 subnets'] = function (t) {
+test('IPv4 subnets', function (t) {
     var i;
     var valid = [
         '1.2.3.4/24',
@@ -92,30 +80,24 @@ exports['IPv4 subnets'] = function (t) {
         'asdf',
         '0.0.0.0/32',
         '1.0.0.0/33',
+        '01.02.03.04/24',
         '1.0.0.0/0'
     ];
 
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04/24');
-    } else {
-        invalid.push('01.02.03.04/24');
-    }
-
     for (i in valid) {
         t.ok(validator.validateIPv4subnet(valid[i]), 'valid: ' + valid[i]);
     }
 
     for (i in invalid) {
-        t.ok(!validator.validateIPv4subnet(invalid[i]),
+        t.notOk(validator.validateIPv4subnet(invalid[i]),
             'invalid: ' + invalid[i]);
     }
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['ports'] = function (t) {
+test('ports', function (t) {
     var i;
     var valid = [
         1,
@@ -146,9 +128,80 @@ exports['ports'] = function (t) {
     }
 
     for (i in invalid) {
-        t.ok(!validator.validatePortOrAll(invalid[i]),
+        t.notOk(validator.validatePortOrAll(invalid[i]),
+            'invalid: ' + invalid[i]);
+    }
+
+    return t.end();
+});
+
+
+test('protocols', function (t) {
+    var i;
+    var valid = [
+        'tcp',
+        'TCP',
+        'udp',
+        'UDP',
+        'icmp',
+        'ICMP',
+        'icmp6',
+        'ICMP6'
+    ];
+
+    var invalid = [
+        0,
+        {},
+        65536,
+        '65536',
+        '',
+        [],
+        -1,
+        'something',
+        'ethernet',
+        'ftp'
+    ];
+
+    for (i in valid) {
+        t.ok(validator.validateProtocol(valid[i]), 'valid: ' + valid[i]);
+    }
+
+    for (i in invalid) {
+        t.notOk(validator.validateProtocol(invalid[i]),
+            'invalid: ' + invalid[i]);
+    }
+
+    return t.end();
+});
+
+test('actions', function (t) {
+    var i;
+    var valid = [
+        'block',
+        'BLOCK',
+        'allow',
+        'ALLOW'
+    ];
+
+    var invalid = [
+        0,
+        {},
+        65536,
+        '65536',
+        '',
+        'something',
+        'permit',
+        'obstruct'
+    ];
+
+    for (i in valid) {
+        t.ok(validator.validateAction(valid[i]), 'valid: ' + valid[i]);
+    }
+
+    for (i in invalid) {
+        t.notOk(validator.validateAction(invalid[i]),
             'invalid: ' + invalid[i]);
     }
 
-    return t.done();
-};
+    return t.end();
+});
diff --git a/src/fw/tools/fwrule/tools/eslint.node.conf b/src/fw/tools/fwrule/tools/eslint.node.conf
new file mode 100644
index 00000000..ae6d704d
--- /dev/null
+++ b/src/fw/tools/fwrule/tools/eslint.node.conf
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/src/fw/tools/fwrule/tools/jsl.node.conf b/src/fw/tools/fwrule/tools/jsl.node.conf
index 0b8ae95a..591cb8c7 100644
--- a/src/fw/tools/fwrule/tools/jsl.node.conf
+++ b/src/fw/tools/fwrule/tools/jsl.node.conf
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
-- 
2.21.0

