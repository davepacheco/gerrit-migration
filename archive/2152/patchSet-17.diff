From 90b924dfc2f6d12695e63285b3c230f968d8e19b Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Wed, 26 Jul 2017 16:47:31 -0400
Subject: [PATCH] joyent/node-vasync#33 want filterEachPipeline and
 filterEachParallel

---
 README.md       |  43 ++++++++++
 lib/vasync.js   | 119 ++++++++++++++++++++++++++++
 package.json    |   2 +-
 tests/filter.js | 207 ++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 370 insertions(+), 1 deletion(-)
 create mode 100644 tests/filter.js

diff --git a/README.md b/README.md
index 5a8f276..2174881 100644
--- a/README.md
+++ b/README.md
@@ -45,6 +45,8 @@ have several ways of getting at this state:
   N functions in series (and stop on success)
 * [forEachPipeline](#foreachpipeline-invoke-the-same-function-on-n-inputs-in-series-and-stop-on-failure):
   invoke the same function on N inputs in series (and stop on failure)
+* [filter/filterSeries/filterLimit](#filterfilterlimitfilterseries-filter-n-inputs-serially-or-concurrently):
+  filter N inputs serially or concurrently
 * [waterfall](#waterfall-invoke-n-functions-in-series-stop-on-failure-and-propagate-results):
   like pipeline, but propagating results between stages
 * [barrier](#barrier-coordinate-multiple-concurrent-operations): coordinate
@@ -383,6 +385,47 @@ func2 got "37" from func1
 better stop early
 ```
 
+### filter/filterLimit/filterSeries: filter N inputs serially or concurrently
+
+Synopsis: `filter(inputs, filterFunc, callback)`
+
+Synopsis: `filterSeries(inputs, filterFunc, callback)`
+
+Synopsis: `filterLimit(inputs, limit, filterFunc, callback)`
+
+These functions take an array (of anything) and a function to call on each
+element of the array.  The function must callback with a true or false value as
+the second argument or an error object as the first argument.  False values
+will result in the element being filtered out of the results array.  An error
+object passed as the first argument will cause the filter function to stop
+processing new elements and callback to the caller with the error immediately.
+Original input array order is maintained.
+
+`filter` and `filterSeries` are analogous to calling `filterLimit` with
+a limit of `Infinity` and `1` respectively.
+
+
+```js
+var inputs = [
+    'joyent.com',
+    'github.com',
+    'asdfaqsdfj.com'
+];
+function filterFunc(input, cb) {
+    mod_dns.resolve(input, function (err, results) {
+        if (err) {
+            cb(null, false);
+        } else {
+            cb(null, true);
+        }
+    }
+}
+mod_vasync.filter(inputs, filterFunc, function (err, results) {
+    // err => undefined
+    // results => ['joyent.com', 'github.com']
+});
+```
+
 ### barrier: coordinate multiple concurrent operations
 
 Synopsis: `barrier([args])`
diff --git a/lib/vasync.js b/lib/vasync.js
index f2f9b87..e22d4a0 100644
--- a/lib/vasync.js
+++ b/lib/vasync.js
@@ -15,6 +15,9 @@ exports.forEachParallel = forEachParallel;
 exports.pipeline = pipeline;
 exports.tryEach = tryEach;
 exports.forEachPipeline = forEachPipeline;
+exports.filter = filter;
+exports.filterLimit = filterLimit;
+exports.filterSeries = filterSeries;
 exports.queue = queue;
 exports.queuev = queuev;
 exports.barrier = barrier;
@@ -209,6 +212,122 @@ function forEachPipeline(args, callback) {
 	return (pipeline({'funcs': funcs}, callback));
 }
 
+/*
+ * async.js compatible filter, filterLimit, and filterSeries.  Takes an input
+ * array, optionally a limit, and a single function to filter an array and will
+ * callback with a new filtered array. This is effectively an asynchronous
+ * version of Array.prototype.filter.
+ */
+function filter(inputs, filterFunc, callback) {
+	return (filterLimit(inputs, Infinity, filterFunc, callback));
+}
+
+function filterSeries(inputs, filterFunc, callback) {
+	return (filterLimit(inputs, 1, filterFunc, callback));
+}
+
+function filterLimit(inputs, limit, filterFunc, callback) {
+	mod_assert.ok(Array.isArray(inputs),
+	    '"inputs" must be specified and must be an array');
+	mod_assert.equal(typeof (limit), 'number',
+	    '"limit" must be a number');
+	mod_assert.equal(isNaN(limit), false,
+	    '"limit" must be a number');
+	mod_assert.equal(typeof (filterFunc), 'function',
+	    '"filterFunc" must be specified and must be a function');
+	mod_assert.equal(typeof (callback), 'function',
+	    '"callback" argument must be specified as a function');
+
+	var errors = [];
+	var q = queue(processInput, limit);
+	var results = [];
+
+	function processInput(input, cb) {
+		/*
+		 * If the errors array has any members, an error was
+		 * encountered in a previous invocation of filterFunc, so all
+		 * future filtering will be skipped.
+		 */
+		if (errors.length > 0) {
+			cb();
+			return;
+		}
+
+		filterFunc(input.elem, function inputFiltered(err, ans) {
+			/*
+			 * We ensure here that a filterFunc callback is only
+			 * ever invoked once.
+			 */
+			if (results.hasOwnProperty(input.idx)) {
+				throw (new mod_verror.VError(
+				    'vasync.filter*: filterFunc idx %d ' +
+				    'invoked its callback twice', input.idx));
+			}
+
+			/*
+			 * The original element, as well as the answer "ans"
+			 * (truth value) is stored to later be filtered when
+			 * all outstanding jobs are finished.
+			 */
+			results[input.idx] = {
+				elem: input.elem,
+				ans: !!ans
+			};
+
+			/*
+			 * Any error encountered while filtering will result in
+			 * all future operations being skipped, and the error
+			 * object being returned in the users callback.
+			 */
+			if (err) {
+				errors.push(err);
+				cb();
+				return;
+			}
+
+			cb();
+		});
+	}
+
+	q.once('drain', function queueDrained() {
+		if (errors.length > 0) {
+			callback(mod_verror.errorFromList(errors));
+			return;
+		}
+
+		/*
+		 * results is now an array of objects in the same order of the
+		 * inputs array, where each object looks like:
+		 *
+		 * {
+		 *     "ans": <true|false>,
+		 *     "elem": <original input element>
+		 * }
+		 *
+		 * we filter out elements that have a false "ans" value, and
+		 * then map the array to contain only the input elements.
+		 */
+		results = results.filter(function filterFalseInputs(input) {
+			return (input.ans);
+		}).map(function mapInputElements(input) {
+			return (input.elem);
+		});
+		callback(null, results);
+	});
+
+	inputs.forEach(function iterateInput(elem, idx) {
+		/*
+		 * We retain the array index to ensure that order is
+		 * maintained.
+		 */
+		q.push({
+			elem: elem,
+			idx: idx
+		});
+	});
+
+	return (q);
+}
 
 /*
  * async-compatible "queue" function.
diff --git a/package.json b/package.json
index 7c842de..7f7adb9 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
 		"nodeunit": "0.8.7"
 	},
 	"dependencies": {
-		"verror": "1.6.0"
+		"verror": "1.10.0"
 	},
 	"engines": [
 		"node >=0.6.0"
diff --git a/tests/filter.js b/tests/filter.js
new file mode 100644
index 0000000..fc44bbc
--- /dev/null
+++ b/tests/filter.js
@@ -0,0 +1,207 @@
+/*
+ * Tests the "filter", "filterSeries", and "filterLimit" functions
+ */
+
+var mod_util = require('util');
+
+var mod_tap = require('tap');
+var mod_vasync = require('..');
+
+mod_tap.test('filterSeries', function (test) {
+	var inputs = [0, 1, 2, 3, 4, 5];
+	var curTasks = 0;
+	var maxTasks = 0;
+	// filterSeries has an implicit limit of 1 concurrent operation
+	var limit = 1;
+
+	function filterFunc(input, cb) {
+		curTasks++;
+		if (curTasks > maxTasks) {
+			maxTasks = curTasks;
+		}
+		test.ok(curTasks <= limit, mod_util.format(
+		    'input %d: current tasks %d <= %d',
+		    input, curTasks, limit));
+
+		setTimeout(function () {
+			curTasks--;
+			cb(null, input < 2 || input === 4);
+		}, 50);
+	}
+
+	mod_vasync.filterSeries(inputs, filterFunc,
+	    function filterDone(err, results) {
+
+		test.ok(!err, 'error unset');
+		test.equal(maxTasks, limit, 'max tasks reached limit');
+		test.deepEqual(results, [0, 1, 4], 'results array correct');
+		test.end();
+	});
+});
+
+mod_tap.test('filterLimit', function (test) {
+	var inputs = [0, 1, 2, 3, 4, 5];
+	var curTasks = 0;
+	var maxTasks = 0;
+	var limit = 2;
+
+	function filterFunc(input, cb) {
+		curTasks++;
+		if (curTasks > maxTasks) {
+			maxTasks = curTasks;
+		}
+		test.ok(curTasks <= limit, mod_util.format(
+		    'input %d: current tasks %d <= %d',
+		    input, curTasks, limit));
+
+		setTimeout(function () {
+			curTasks--;
+			cb(null, input < 2 || input === 4);
+		}, 50);
+	}
+
+	mod_vasync.filterLimit(inputs, limit, filterFunc,
+	    function filterDone(err, results) {
+
+		test.ok(!err, 'error unset');
+		test.equal(maxTasks, limit, 'max tasks reached limit');
+		test.deepEqual(results, [0, 1, 4], 'results array correct');
+		test.end();
+	});
+});
+
+mod_tap.test('filter (maintain order)', function (test) {
+	var inputs = [0, 1, 2, 3, 4, 5];
+	var limit = inputs.length;
+	var storedValues = [];
+
+	function filterFunc(input, cb) {
+		/*
+		 * Hold every callback in an array to be called when all
+		 * filterFunc's have run.  This way, we can ensure that all
+		 * tasks have started without waiting for any others to finish.
+		 */
+		storedValues.push({
+			input: input,
+			cb: cb
+		});
+
+		test.ok(storedValues.length <= limit, mod_util.format(
+		    'input %d: current tasks %d <= %d',
+		    input, storedValues.length, limit));
+
+		/*
+		 * When this constraint is true, all filterFunc's have run for
+		 * each input.  We now call all callbacks in a pre-determined
+		 * order (out of order of the original) to ensure the final
+		 * array is in the correct order.
+		 */
+		if (storedValues.length === inputs.length) {
+			[5, 2, 0, 1, 4, 3].forEach(function (i) {
+				var o = storedValues[i];
+				o.cb(null, o.input < 2 || o.input === 4);
+			});
+		}
+	}
+
+	mod_vasync.filter(inputs, filterFunc,
+	    function filterDone(err, results) {
+
+		test.ok(!err, 'error unset');
+		test.equal(storedValues.length, inputs.length,
+		    'max tasks reached limit');
+		test.deepEqual(results, [0, 1, 4], 'results array correct');
+		test.end();
+	});
+});
+
+mod_tap.test('filterSeries error handling', function (test) {
+	/*
+	 * We will error half way through the list of inputs to ensure that
+	 * first half are processed while the second half are ignored.
+	 */
+	var inputs = [0, 1, 2, 3, 4, 5];
+
+	function filterFunc(input, cb) {
+		switch (input) {
+		case 0:
+		case 1:
+		case 2:
+			cb(null, true);
+			break;
+		case 3:
+			cb(new Error('error on ' + input));
+			break;
+		case 4:
+		case 5:
+			test.ok(false, 'processed too many inputs');
+			cb(new Error('processed too many inputs'));
+			break;
+		default:
+			test.ok(false, 'unexpected input: ' + input);
+			cb(new Error('unexpected input'));
+			break;
+		}
+	}
+
+	mod_vasync.filterSeries(inputs, filterFunc,
+	    function filterDone(err, results) {
+
+		test.ok(err, 'error set');
+		test.ok(err.message === 'error on 3', 'error on input 3');
+		test.ok(results === undefined, 'results is unset');
+		test.end();
+	});
+});
+
+mod_tap.test('filterSeries double callback', function (test) {
+	var inputs = [0, 1, 2, 3, 4, 5];
+
+	function filterFunc(input, cb) {
+		switch (input) {
+		case 0:
+		case 1:
+		case 2:
+			cb(null, true);
+			break;
+		case 3:
+			/*
+			 * The first call to cb() should "win" - meaning this
+			 * value will be filtered out of the final array of
+			 * results.
+			 */
+			cb(null, false);
+			test.throws(function () {
+				cb(null, true);
+			});
+			break;
+		case 4:
+			/*
+			 * Like input 3, all subsequent calls to cb() will
+			 * throw an error and not affect the original call to
+			 * cb().
+			 */
+			cb(null, true);
+			test.throws(function () {
+				cb(new Error('uh oh'));
+			});
+			break;
+		case 5:
+			cb(null, true);
+			break;
+		default:
+			test.ok(false, 'unexpected input: ' + input);
+			cb(new Error('unexpected input'));
+			break;
+		}
+	}
+
+	mod_vasync.filterSeries(inputs, filterFunc,
+	    function filterDone(err, results) {
+
+		test.ok(!err, 'error not set');
+		test.deepEqual(results, [0, 1, 2, 4, 5],
+		    'results array correct');
+		test.end();
+	});
+});
-- 
2.21.0

