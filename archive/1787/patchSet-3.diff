commit fffa26239c5ef143c325dca433ed5a11f60674d5 (refs/changes/87/1787/3)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2017-04-14T00:45:12+00:00 (2 years, 6 months ago)
    
    DOCKER-897 Add all provisionable networks to `docker run --network`

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index cf6d358..2e087c9 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -710,8 +710,7 @@ function namedNetwork(opts, container, payload, callback) {
                 // XXX - ldapEscape required to work around NAPI-367
                 var listParams = {
                     uuid: utils.ldapEscape(uuid),
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 napi.listNetworks(listParams,
@@ -720,8 +719,7 @@ function namedNetwork(opts, container, payload, callback) {
             function byName(cb) {
                 var listParams = {
                     name: query,
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 log.debug({ listParams: listParams },
@@ -762,8 +760,7 @@ function namedNetwork(opts, container, payload, callback) {
 
                 var listParams = {
                     uuid: uuidSearchStr,
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 log.debug({ listParams: listParams },
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index 97dfe07..45ca4c4 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -392,6 +392,7 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
     var fNetwork1;
     var fNetwork2;
     var fNetwork3;
+    var nonFabricNetwork;
 
     if (!FABRICS) {
         tt.comment('Fabrics not enabled, skipping tests that require them.');
@@ -480,6 +481,9 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
                 function fnw3(_, cb) {
                     h.getOrCreateFabricNetwork(NAPI, ALICE.account.uuid,
                         fVlan.vlan_id, nw3params, cb);
+                },
+                function fnonFabricNet(_, cb) {
+                    h.getNetwork(NAPI, 'external', cb);
                 }
             ]
         }, function (err, results) {
@@ -491,6 +495,7 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
             fNetwork1 = results.operations[0].result;
             fNetwork2 = results.operations[1].result;
             fNetwork3 = results.operations[2].result;
+            nonFabricNetwork = results.operations[3].result;
 
             t.end();
         });
@@ -568,6 +573,32 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
         }
     });
 
+    tt.test('create with partial network id, publish ports', function (t) {
+        var partialId = (fNetwork1.uuid + fNetwork1.uuid).replace(/-/g, '');
+        partialId = partialId.substr(0, 10);
+
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': partialId,
+                     'HostConfig.PublishAllPorts': true},
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'two nics');
+            t.equal(nics[0].network_uuid, fNetwork1.uuid, 'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
     tt.test('prefer name over partial id', function (t) {
         // fNetwork2 is named using a partial id from fNetwork1.
 
@@ -632,4 +663,90 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
             t.end();
         }
     });
+
+    tt.test('create without specifying network', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 1, 'only one nic');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create without specifying network, publish ports', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: {'HostConfig.PublishAllPorts': true},
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'only two nics');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create with L3 nonFabric network', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': nonFabricNetwork.name },
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 1, 'only one nic');
+            t.equal(nics[0].network_uuid, nonFabricNetwork.uuid, 'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create with L3 nonFabric network, publish ports', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': nonFabricNetwork.name,
+                     'HostConfig.PublishAllPorts': true},
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'two nics');
+            t.equal(nics[0].network_uuid, nonFabricNetwork.uuid, 'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
 });
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 5405801..e17a734 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1819,6 +1819,79 @@ function getOrCreateFabricNetwork(client, userUuid, vlan_id, params, callback) {
     );
 }
 
+function getOrCreateNetwork(client, params, callback) {
+    var listParams = {
+        name: params.name
+    };
+    client.listNetworks(listParams, function (err, res) {
+        if (err) {
+            console.log('WTAF1');
+            return callback(err);
+        }
+        if (res.length !== 0) {
+            return callback(null, res[0]);
+        }
+        console.log('AG');
+        client.createNetwork(params, callback);
+    });
+}
+
+function getOrCreateNicTag(client, name, callback) {
+    assert.object(client, 'napi client');
+    assert.string(name, 'name');
+    client.getNicTag(name, function (err, nictag) {
+        if (err && err.body.code === "ResourceNotFound") {
+            client.createNicTag(name, function (err2, created) {
+                if (err2) {
+                    console.log('WTF1');
+                    return callback(err2);
+                }
+                console.log('WTF2');
+                return callback(null, created);
+            });
+        } else if (err) {
+            console.log('WTF3');
+            return callback(err);
+        } else {
+            console.log('WTF4');
+            callback(null, nictag);
+        }
+    });
+}
+
+function getNetwork(client, name, callback) {
+    assert.object(client, 'napi client');
+    assert.string(name, 'network name');
+
+    var listParams = {name: name};
+    client.listNetworks(listParams, function (err, networks) {
+        if (err) {
+            return callback(err);
+        }
+        if (networks.length !== 0) {
+            return callback(null, networks[0]);
+        }
+        callback();
+    });
+}
+
+function getNicsByVm(client, vm, callback) {
+    assert.object(client, 'napi client');
+    assert.object(vm, 'vm');
+
+    var listParams = { belongs_to_uuid: vm.uuid };
+    client.listNics(listParams, function (err, nics) {
+        if (err) {
+            return callback(err);
+        }
+        if (nics.length !== 0) {
+            return callback(null, nics);
+        }
+        callback();
+    });
+}
+
+
 /*
  * Return the array of active packages in sorted (smallest to largest) order.
  *
@@ -1881,6 +1954,10 @@ module.exports = {
     buildDockerContainer: buildDockerContainer,
     getOrCreateFabricVLAN: getOrCreateFabricVLAN,
     getOrCreateFabricNetwork: getOrCreateFabricNetwork,
+    getOrCreateNetwork: getOrCreateNetwork,
+    getNetwork: getNetwork,
+    getOrCreateNicTag: getOrCreateNicTag,
+    getNicsByVm: getNicsByVm,
     getSortedPackages: getSortedPackages,
 
     getDockerEnv: getDockerEnv,
