From 2bb47cda1e40a5313a6627916b8b5b9b720ba4ba Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Thu, 13 Apr 2017 15:36:53 +0000
Subject: [PATCH] DOCKER-897 Add all provisionable networks to `docker run
 --network` Reviewed by: Cody Peter Mello <cody.mello@joyent.com> Approved by:
 Cody Peter Mello <cody.mello@joyent.com>

---
 lib/backends/sdc/containers.js      |   9 +-
 test/integration/api-create.test.js | 189 ++++++++++++++++++++++++++++
 test/integration/helpers.js         |  34 +++++
 3 files changed, 226 insertions(+), 6 deletions(-)

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index bc34df5..ee9966d 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -762,8 +762,7 @@ function namedNetwork(opts, container, payload, callback) {
                 // XXX - ldapEscape required to work around NAPI-367
                 var listParams = {
                     uuid: utils.ldapEscape(uuid),
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 napi.listNetworks(listParams,
@@ -772,8 +771,7 @@ function namedNetwork(opts, container, payload, callback) {
             function byName(cb) {
                 var listParams = {
                     name: query,
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 log.debug({ listParams: listParams },
@@ -814,8 +812,7 @@ function namedNetwork(opts, container, payload, callback) {
 
                 var listParams = {
                     uuid: uuidSearchStr,
-                    fabric: true,
-                    owner_uuid: opts.account.uuid
+                    provisionable_by: opts.account.uuid
                 };
 
                 log.debug({ listParams: listParams },
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index fa93c49..80154c9 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -392,6 +392,8 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
     var fNetwork1;
     var fNetwork2;
     var fNetwork3;
+    var nonFabricNetwork;
+    var adminNetwork;
 
     if (!FABRICS) {
         tt.comment('Fabrics not enabled, skipping tests that require them.');
@@ -480,6 +482,12 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
                 function fnw3(_, cb) {
                     h.getOrCreateFabricNetwork(NAPI, ALICE.account.uuid,
                         fVlan.vlan_id, nw3params, cb);
+                },
+                function fnonFabricNet(_, cb) {
+                    h.getNetwork(NAPI, {name: 'external'}, cb);
+                },
+                function fadminNet(_, cb) {
+                    h.getNetwork(NAPI, {name: 'admin'}, cb);
                 }
             ]
         }, function (err, results) {
@@ -491,6 +499,8 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
             fNetwork1 = results.operations[0].result;
             fNetwork2 = results.operations[1].result;
             fNetwork3 = results.operations[2].result;
+            nonFabricNetwork = results.operations[3].result;
+            adminNetwork = results.operations[4].result;
 
             t.end();
         });
@@ -568,6 +578,36 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
         }
     });
 
+    tt.test('create with partial network id, publish ports', function (t) {
+        var partialId = (fNetwork1.uuid + fNetwork1.uuid).replace(/-/g, '');
+        partialId = partialId.substr(0, 10);
+
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: {
+                'HostConfig.NetworkMode': partialId,
+                'HostConfig.PublishAllPorts': true
+            },
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'two nics');
+            t.equal(nics[0].network_uuid, fNetwork1.uuid, 'correct network');
+            t.equal(nics[1].network_uuid, nonFabricNetwork.uuid,
+                'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
     tt.test('prefer name over partial id', function (t) {
         // fNetwork2 is named using a partial id from fNetwork1.
 
@@ -632,6 +672,155 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
             t.end();
         }
     });
+
+    tt.test('create without specifying network', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 1, 'only one nic');
+            h.getNetwork(NAPI, {uuid: nics[0].network_uuid},
+                function (err2, net) {
+
+                t.ifErr(err2, 'get network');
+                t.ok(net, 'nets exists');
+                if (net) {
+                    t.equal(net.name, 'My-Fabric-Network', 'correct network');
+                }
+                DOCKER_ALICE.del('/containers/' + result.id + '?force=1',
+                    ondelete);
+            });
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create without specifying network, publish ports', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: {'HostConfig.PublishAllPorts': true},
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'only two nics');
+            t.equal(nics[1].network_uuid, nonFabricNetwork.uuid,
+                    'correct network');
+            h.getNetwork(NAPI, {uuid: nics[0].network_uuid},
+                function (err2, net) {
+
+                t.ifErr(err2, 'get network');
+                t.ok(net, 'nets exists');
+                if (net) {
+                    t.equal(net.name, 'My-Fabric-Network', 'correct network');
+                }
+                DOCKER_ALICE.del('/containers/' + result.id + '?force=1',
+                    ondelete);
+            });
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create with L3 nonFabric network', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': nonFabricNetwork.name },
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 1, 'only one nic');
+            t.equal(nics[0].network_uuid, nonFabricNetwork.uuid,
+                'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('create with L3 nonFabric network, publish ports', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: {
+                'HostConfig.NetworkMode': nonFabricNetwork.name,
+                'HostConfig.PublishAllPorts': true
+            },
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            var nics = result.vm.nics;
+            t.equal(nics.length, 2, 'two nics');
+            t.equal(nics[0].network_uuid, nonFabricNetwork.uuid,
+                'correct network');
+            t.equal(nics[1].network_uuid, nonFabricNetwork.uuid,
+                'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
+    tt.test('fail to create with admin network', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': adminNetwork.name },
+            start: false,
+            expectedErr: '(Error) network admin not found'
+        }, oncreate);
+
+        function oncreate(err, result) {
+            t.ok(err, 'Expecting error');
+            t.end();
+        }
+    });
+
+    tt.test('fail to create with admin network, publish ports', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: {
+                'HostConfig.NetworkMode': adminNetwork.name,
+                'HostConfig.PublishAllPorts': true
+            },
+            start: false,
+            expectedErr: '(Error) network admin not found'
+        }, oncreate);
+
+        function oncreate(err, result) {
+            t.ok(err, 'Expecting error');
+            t.end();
+        }
+    });
 });
 
 
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 47094d7..bd64fc7 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1843,6 +1843,38 @@ function getOrCreateFabricNetwork(client, userUuid, vlan_id, params, callback) {
     );
 }
 
+function getNetwork(client, params, callback) {
+    assert.object(client, 'napi client');
+    assert.object(params, 'network params');
+
+    client.listNetworks(params, function (err, networks) {
+        if (err) {
+            return callback(err);
+        }
+        if (networks.length !== 0) {
+            return callback(null, networks[0]);
+        }
+        callback(new Error('Network not found'));
+    });
+}
+
+function getNicsByVm(client, vm, callback) {
+    assert.object(client, 'napi client');
+    assert.object(vm, 'vm');
+
+    var listParams = { belongs_to_uuid: vm.uuid };
+    client.listNics(listParams, function (err, nics) {
+        if (err) {
+            return callback(err);
+        }
+        if (nics.length !== 0) {
+            return callback(null, nics);
+        }
+        callback(new Error('No Nics found for VM ' + vm.uuid));
+    });
+}
+
+
 /*
  * Return the array of active packages in sorted (smallest to largest) order.
  *
@@ -1906,6 +1938,8 @@ module.exports = {
     getOrCreateExternalNetwork: getOrCreateExternalNetwork,
     getOrCreateFabricVLAN: getOrCreateFabricVLAN,
     getOrCreateFabricNetwork: getOrCreateFabricNetwork,
+    getNetwork: getNetwork,
+    getNicsByVm: getNicsByVm,
     getSortedPackages: getSortedPackages,
 
     getDockerEnv: getDockerEnv,
-- 
2.21.0

