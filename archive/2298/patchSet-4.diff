From 200799a2ea8c634e5758a0b69e5695c6a1c440d7 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 22 Dec 2017 16:30:37 -0800
Subject: [PATCH] TOOLS-1826 eng.git Makefile support for check-eslint Reviewed
 by: Cody Peter Mello <cody.mello@joyent.com> Approved by: Cody Peter Mello
 <cody.mello@joyent.com>

---
 docs/index.md          | 23 +++++++++++++----------
 tools/mk/Makefile.deps | 35 ++++++++++++++++++++++++++++++++++-
 tools/mk/Makefile.targ | 13 ++++++++++++-
 3 files changed, 59 insertions(+), 12 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index bd9f970..65a469b 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -254,7 +254,8 @@ Existing style-checking tools include:
 
 * C: [cstyle](https://github.com/joyent/illumos-joyent/blob/master/usr/src/tools/scripts/cstyle.pl)
 * JavaScript: [jsstyle](https://github.com/davepacheco/jsstyle),
-  [gjslint](https://code.google.com/closure/utilities/docs/linter_howto.html)
+  [gjslint](https://code.google.com/closure/utilities/docs/linter_howto.html),
+  [eslint](http://eslint.org/)
 * Bash: bashstyle (contained in eng.git:tools/bashstyle)
 * Makefiles: use bashstyle for now
 
@@ -283,15 +284,17 @@ Make target: "check"
 ## Lint
 
 Every C repository **must** run "lint" and every JavaScript repository **must**
-run [javascriptlint](http://github.com/davepacheco/javascriptlint) and both
-**must** be lint-clean. Note that lint is not the same as style: lint covers
-objectively dangerous patterns like undeclared variables, while style covers
-subjective conventions like spacing.
-
-Both lint and javascriptlint are very configurable. Projects may choose to
-enable and disable particular sets of checks as they deem appropriate. Most
-checks can be disabled on a per-line basis. As with style, it's recommended
-that we minimize divergence between repositories.
+run [javascriptlint](http://github.com/davepacheco/javascriptlint) and/or
+[eslint](http://eslint.org) and all **must** be lint-clean. Note that lint is
+not the same as style: lint covers objectively dangerous patterns like
+undeclared variables, while style covers subjective conventions like spacing.
+
+All of `lint`, `javascriptlint`, and `eslint` very configurable. See
+[RFD 100](https://github.com/joyent/rfd/tree/master/rfd/0100) for eslint usage
+in Joyent repositories. Projects may choose to enable and disable particular
+sets of checks as they deem appropriate. Most checks can be disabled on a
+per-line basis. As with style, it's recommended that we minimize divergence
+between repositories.
 
 Make target: "check"
 
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 1cffbe7..7419253 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -44,6 +44,39 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 54edf0e..cc5ae95 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -76,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -101,6 +105,7 @@ BASHSTYLE	?= tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
@@ -189,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -208,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
-- 
2.21.0

