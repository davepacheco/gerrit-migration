From cde9a92b00bd4d2506d44f365ffe830f74701eb9 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 15 May 2019 21:31:40 +0200
Subject: [PATCH] TRITON-1321 fwapi needs to support log boolean on rules

---
 lib/cli.js                               | 15 ++++++---
 lib/endpoints/rules/index.js             |  5 +--
 lib/fwapi-cli.js                         |  2 +-
 lib/rule.js                              | 20 ++++++++++--
 lib/ufds/filter.js                       | 13 +++++++-
 package.json                             |  2 +-
 test/integration/get.test.js             | 14 ++++++++-
 test/integration/global.test.js          |  3 +-
 test/integration/invalid.test.js         | 11 ++++++-
 test/integration/list.test.js            | 27 +++++++++++++++-
 test/integration/provision.multi-test.js |  4 +++
 test/integration/resolve.test.js         | 39 ++++++++++++++++--------
 test/integration/update.test.js          |  3 +-
 test/integration/vm-update.multi-test.js |  2 ++
 test/runtest                             |  3 +-
 test/unit/rule.test.js                   |  9 ++++--
 16 files changed, 139 insertions(+), 33 deletions(-)

diff --git a/lib/cli.js b/lib/cli.js
index 023303b..ade7884 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2017, Joyent, Inc. All rights reserved.
+ * Copyright 2019 Joyent, Inc. All rights reserved.
  *
  * fwadm: CLI shared logic
  */
@@ -61,7 +61,7 @@ function displayRules(err, res, opts) {
         return;
     }
 
-    console.log('UUID                                 ENABLED RULE');
+    console.log('UUID                                 ENABLED LOG     RULE');
     res.forEach(function (r) {
         console.log(ruleLine(r));
     });
@@ -100,6 +100,11 @@ function getPayload(opts, args, callback) {
             payload.enabled = opts.enable;
         }
 
+
+        if (opts.log) {
+            payload.log = opts.log;
+        }
+
         ['description', 'global', 'owner_uuid'].forEach(function (p) {
             if (opts.hasOwnProperty(p)) {
                 payload[p] = opts[p];
@@ -198,8 +203,10 @@ function outputError(err, opts) {
  * Outputs one formatted rule line
  */
 function ruleLine(r) {
-    return util.format('%s %s %s', r.uuid,
-        r.enabled ? 'true   ' : 'false  ', r.rule);
+    return util.format('%s %s %s %s', r.uuid,
+        r.enabled ? 'true   ' : 'false  ',
+        r.log ? 'true   ' : 'false  ',
+        r.rule);
 }
 
 
diff --git a/lib/endpoints/rules/index.js b/lib/endpoints/rules/index.js
index ec25b83..8cbba2c 100644
--- a/lib/endpoints/rules/index.js
+++ b/lib/endpoints/rules/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -42,7 +42,8 @@ var LIST_SCHEMA = {
         action: validateAction,
         global: validate.boolean,
         tag: validateTag,
-        wildcard: validateArrayOfStrings
+        wildcard: validateArrayOfStrings,
+        log: validate.boolean
     }
 };
 
diff --git a/lib/fwapi-cli.js b/lib/fwapi-cli.js
index 91525a7..2528776 100644
--- a/lib/fwapi-cli.js
+++ b/lib/fwapi-cli.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
diff --git a/lib/rule.js b/lib/rule.js
index bae0bc8..26ccc6a 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -35,8 +35,9 @@ var tagUnescape = require('fwrule/lib/rule').tagUnescape;
  *
  * 1 - Initial version.
  * 2 - Save tag names/values unescaped, and index on "description".
+ * 3 - Add "log" field.
  */
-var MORAY_RAW_VERSION = 2;
+var MORAY_RAW_VERSION = 3;
 
 var BUCKET = {
     desc: 'fwrules',
@@ -56,6 +57,7 @@ var BUCKET = {
             'action': { 'type': 'string' },
             'protocol': { 'type': 'string' },
             'enabled': { 'type': 'boolean' },
+            'log': { 'type': 'boolean' },
             'fromwildcards': {
                 'type': '[string]'
             },
@@ -111,6 +113,8 @@ function ruleFromMoray(raw) {
     var data = {
         enabled: typeof (raw.enabled) === 'boolean' ? raw.enabled :
             (raw.enabled === 'true'),
+        log: typeof (raw.log) === 'boolean' ? raw.log :
+            (raw.log === 'true'),
         objectclass: raw.objectclass,
         parsed: {
             priority: raw.priority,
@@ -167,6 +171,11 @@ function ruleFromMoray(raw) {
         data.enabled = raw.enabled;
     }
 
+
+    if (typeof (raw.log) === 'boolean') {
+        data.log = raw.log;
+    }
+
     if (hasKey(raw, 'owner')) {
         data.owner_uuid = raw.owner;
     }
@@ -217,6 +226,8 @@ function ruleFromUFDS(raw) {
     var data = {
         enabled: typeof (raw.enabled) === 'boolean' ? raw.enabled :
             (raw.enabled === 'true'),
+        log: typeof (raw.log) === 'boolean' ? raw.log :
+            (raw.log === 'true'),
         objectclass: raw.objectclass,
         parsed: {
             action: raw.action,
@@ -259,6 +270,9 @@ function ruleFromUFDS(raw) {
         data.enabled = raw.enabled;
     }
 
+    if (typeof (raw.log) === 'boolean') {
+        data.log = raw.log;
+    }
     if (hasKey(raw, 'owner')) {
         data.owner_uuid = raw.owner;
     }
@@ -391,6 +405,7 @@ Rule.prototype.rawMoray = function _ruleRawMoray() {
     var raw = {
         action: this.action,
         enabled: this.enabled,
+        log: this.log,
         objectclass: Rule.objectclass,
         priority: this.priority,
         protocol: this.protocol,
@@ -494,6 +509,7 @@ Rule.prototype.rawUFDS = function _ruleRawUFDS() {
     var raw = {
         action: this.action,
         enabled: this.enabled,
+        log: this.log,
         objectclass: Rule.objectclass,
         protocol: this.protocol,
         uuid: this.uuid,
diff --git a/lib/ufds/filter.js b/lib/ufds/filter.js
index b9ce76c..0634ec5 100644
--- a/lib/ufds/filter.js
+++ b/lib/ufds/filter.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -95,6 +95,15 @@ function ruleCommonFilter(opts) {
         filter.push(eq('enabled', params.enabled));
     }
 
+
+    if (hasKey(params, 'log')) {
+        if ((params.log !== 'true') && (params.log !== 'false')) {
+            throw new restify.InvalidArgumentError(
+                'Invalid value for log: must be true or false');
+        }
+        filter.push(eq('log', params.log));
+    }
+
     if (hasKey(params, 'port')) {
         if (!validators.validatePortOrAll(params.port)) {
             throw new restify.InvalidArgumentError(
@@ -151,6 +160,7 @@ function ruleCommonFilter(opts) {
  *     Optional parameters:
  *     - action {String}
  *     - enabled {Boolean}
+ *     - log {Boolean}
  *     - port {Integer}
  *     - protocol {String}
  *     - ip {String or Array}
@@ -294,6 +304,7 @@ function ruleMorayFilter(opts) {
  *     Optional parameters:
  *     - action {String}
  *     - enabled {Boolean}
+ *     - log {Boolean}
  *     - port {Integer}
  *     - protocol {String}
  *     - ip {String or Array}
diff --git a/package.json b/package.json
index 0c47f80..6555450 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,7 @@
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "extsprintf": "1.0.2",
     "fast-messages": "1.0.1",
-    "fwrule": "2.0.0",
+    "fwrule": "2.1.0",
     "jsprim": "^2.0.0",
     "moray": "^3.5.0",
     "moray-filter": "1.0.0",
diff --git a/test/integration/get.test.js b/test/integration/get.test.js
index e782686..a1348db 100644
--- a/test/integration/get.test.js
+++ b/test/integration/get.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -37,17 +37,20 @@ var VM_UUIDS = [
 var RULES = [
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM any TO all vms ALLOW tcp PORT 5000'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[1],
         rule: 'FROM (tag "foo" = "bar" OR tag "foo" = "baz") '
             + 'TO tag "side" = "two" ALLOW tcp (PORT 5003 AND PORT 5004)'
     },
     {
         enabled: true,
+        log: false,
         global: true,
         rule: 'FROM any TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
@@ -55,32 +58,38 @@ var RULES = [
     /* IP rule, VM rule, subnet rule */
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM ip 8.8.8.8 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM ip 4.4.4.4 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM subnet 10.8.0.0/16 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM subnet 10.7.0.0/16 TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM vm ' + VM_UUIDS[0] +
             ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM vm ' + VM_UUIDS[1] +
             ' TO tag "foo" = "baz" ALLOW tcp PORT 5010'
@@ -89,16 +98,19 @@ var RULES = [
     /* FWRULE_VERSION 4 features */
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM tag "a" TO tag "b" ALLOW tcp PORT 80 PRIORITY 50'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM tag "a" TO tag "b" ALLOW ah'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM tag "a" TO tag "b" ALLOW esp'
     }
diff --git a/test/integration/global.test.js b/test/integration/global.test.js
index 2843d1e..0baccce 100644
--- a/test/integration/global.test.js
+++ b/test/integration/global.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019, Joyent, Inc.
  */
 
 /*
@@ -46,6 +46,7 @@ test('Add rule', function (t) {
     RULES.push({
         enabled: true,
         global: true,
+        log: false,
         rule: 'FROM any TO all vms ALLOW udp PORT 5000'
     });
 
diff --git a/test/integration/invalid.test.js b/test/integration/invalid.test.js
index 932669e..216c43e 100644
--- a/test/integration/invalid.test.js
+++ b/test/integration/invalid.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -60,6 +60,15 @@ function createPayload(ruleTxt) {
       },
       [ mod_err.invalidParam('global', 'global must be true or false') ] ],
 
+    [ 'bad log value',
+      {
+          rule: 'FROM tag a TO tag b ALLOW udp port 53',
+          enabled: true,
+          global: true,
+          log: 'foobar'
+      },
+      [ mod_err.invalidParam('log', 'log must be true or false') ] ],
+
     [ 'bad IPv4 subnet: bits to right of mask',
       createPayload('FROM tag foo TO subnet 10.8.0.0/5 ALLOW udp port 53'),
       [ mod_err.invalidParam('rule',
diff --git a/test/integration/list.test.js b/test/integration/list.test.js
index a40a441..d898a42 100644
--- a/test/integration/list.test.js
+++ b/test/integration/list.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -36,21 +36,25 @@ var RULES = [
     // Add another rule for this user to make sure we're not return all
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM any TO all vms ALLOW tcp PORT 5000'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM all vms TO subnet 10.2.1.0/24 ALLOW tcp PORT 5001'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM subnet 10.2.1.0/24 TO all vms ALLOW tcp PORT 5002'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM subnet 10.3.1.0/24 TO all vms ALLOW tcp PORT 5002'
     },
@@ -59,16 +63,19 @@ var RULES = [
 
     {
         enabled: true,
+        log: true,
         owner_uuid: OWNERS[1],
         rule: 'FROM subnet 10.2.1.0/24 TO all vms ALLOW tcp PORT 5001'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[1],
         rule: 'FROM tag "foo" TO all vms BLOCK udp PORT all'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[1],
         rule: 'FROM (tag "foo" = "bar" OR tag "foo" = "baz") '
             + 'TO tag "side" = "two" ALLOW tcp (PORT 5003 AND PORT 5004)'
@@ -78,26 +85,31 @@ var RULES = [
 
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM any TO all vms ALLOW ah'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM any TO all vms ALLOW esp'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM any TO tag "a" = "q" ALLOW icmp TYPE all'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM any TO tag "b" ALLOW icmp6 TYPE all'
     },
     {
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[2],
         rule: 'FROM tag "c" TO any BLOCK udp PORT 53'
     }
@@ -143,6 +155,18 @@ test('list: subnet 10.3.1.0/24', function (t) {
     });
 });
 
+test('list: enabled true', function (t) {
+    mod_rule.list(t, {
+        params: {
+            owner_uuid: OWNERS[1],
+            log: true
+        },
+        exp: [
+            RULES[4]
+        ]
+    });
+});
+
 test('list: all ports', function (t) {
     mod_rule.createAndGet(t, {
         rule: {
@@ -152,6 +176,7 @@ test('list: all ports', function (t) {
         },
         exp: {
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[3],
             rule: 'FROM tag "foo" TO all vms BLOCK udp PORT all'
         }
diff --git a/test/integration/provision.multi-test.js b/test/integration/provision.multi-test.js
index 441b97b..9896a9a 100644
--- a/test/integration/provision.multi-test.js
+++ b/test/integration/provision.multi-test.js
@@ -83,6 +83,7 @@ test('Add rules', OPTS, function (t) {
         RULES.ssh = {
             description: 'allow SSH',
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format('FROM any TO tag "%s" ALLOW tcp PORT 22',
                 TAGS.ssh)
@@ -98,6 +99,7 @@ test('Add rules', OPTS, function (t) {
         RULES.dns = {
             description: 'allow DNS',
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format('FROM any TO tag "%s" ALLOW udp PORT 53',
                 TAGS.dns)
@@ -227,6 +229,7 @@ test('Add disabled rule', OPTS, function (t) {
         RULES.db = {
             description: 'allow DB',
             enabled: false,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format('FROM (tag "%s" = "1" OR tag "%s" = "2") TO ' +
                 '(tag "%s" = "1" OR tag "%s" = "2") ALLOW tcp PORT 5432',
@@ -387,6 +390,7 @@ test('Add VMs rule', OPTS, function (t) {
     t.test('add', function (t2) {
         RULES.https = {
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format('FROM vm %s TO vm %s ALLOW tcp PORT 443',
                 VMS[2].uuid, VMS[1].uuid)
diff --git a/test/integration/resolve.test.js b/test/integration/resolve.test.js
index c73a4b9..1418943 100644
--- a/test/integration/resolve.test.js
+++ b/test/integration/resolve.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -182,7 +182,8 @@ test('setup', function (t) {
                 owner_uuid: OWNERS[1],
                 rule: fmt('FROM vm %s TO all vms BLOCK udp PORT 54',
                     VMS[2]),
-                enabled: true
+                enabled: true,
+                log: false
             }
         },
 
@@ -190,7 +191,8 @@ test('setup', function (t) {
             oneToAll: {
                 owner_uuid: OWNERS[2],
                 rule: 'FROM tag "one" TO all vms BLOCK udp PORT 55',
-                enabled: true
+                enabled: true,
+                log: false
             }
         },
 
@@ -198,7 +200,8 @@ test('setup', function (t) {
             oneToAll: {
                 owner_uuid: OWNERS[3],
                 rule: 'FROM tag "one" TO all vms ALLOW udp PORT 56',
-                enabled: true
+                enabled: true,
+                log: false
             }
         },
 
@@ -206,7 +209,8 @@ test('setup', function (t) {
             allToOne: {
                 owner_uuid: OWNERS[4],
                 rule: 'FROM all vms TO tag "one" BLOCK udp PORT 57',
-                enabled: true
+                enabled: true,
+                log: false
             }
         },
 
@@ -214,7 +218,8 @@ test('setup', function (t) {
             allToOne: {
                 owner_uuid: OWNERS[5],
                 rule: 'FROM all vms TO tag "one" ALLOW udp PORT 58',
-                enabled: true
+                enabled: true,
+                log: false
             }
         },
 
@@ -222,20 +227,23 @@ test('setup', function (t) {
             vmToOne: {
                 owner_uuid: OWNERS[6],
                 rule: fmt('FROM vm %s TO tag "one" ALLOW udp PORT 59', VMS[4]),
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             vmToOneTwo: {
                 owner_uuid: OWNERS[6],
                 rule: fmt('FROM vm %s TO tag "one" = "two" ALLOW udp PORT 59',
                     VMS[4]),
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             vmToOneThree: {
                 owner_uuid: OWNERS[6],
                 rule: 'FROM any TO tag "one" = "three" ALLOW udp PORT 59',
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             vmToMultiTags: {
@@ -243,21 +251,24 @@ test('setup', function (t) {
                 rule: fmt('FROM vm %s TO '
                     + '(tag "five" = "six" OR tag "three" = "four") '
                     + 'ALLOW udp PORT 58', VMS[3]),
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             ipToVm5: {
                 owner_uuid: OWNERS[6],
                 rule: fmt('FROM ip 10.1.2.5 TO vm %s ALLOW tcp PORT 80',
                     VMS[5]),
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             vm6ToIp: {
                 owner_uuid: OWNERS[6],
                 rule: fmt('FROM vm %s TO ip 10.1.2.5 BLOCK tcp PORT 80',
                     VMS[6]),
-                enabled: true
+                enabled: true,
+                log: false
             },
 
             vmsOnBothSides: {
@@ -265,7 +276,8 @@ test('setup', function (t) {
                 rule: fmt('FROM (ip 10.1.2.5 OR vm %s OR vm %s) TO '
                     + '(ip 10.1.2.5 OR vm %s OR vm %s) ALLOW udp PORT 5432',
                     VMS[5], VMS[6], VMS[5], VMS[6]),
-                enabled: true
+                enabled: true,
+                log: false
             }
         }
     };
@@ -273,6 +285,7 @@ test('setup', function (t) {
     for (r in RULES.o0) {
         RULES.o0[r] = {
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: RULES.o0[r].rule
         };
diff --git a/test/integration/update.test.js b/test/integration/update.test.js
index cb226c4..c79bde0 100644
--- a/test/integration/update.test.js
+++ b/test/integration/update.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -39,6 +39,7 @@ var RULES = [];
 test('Add rule', function (t) {
     RULES.push({
         enabled: true,
+        log: false,
         owner_uuid: OWNERS[0],
         rule: 'FROM all vms TO tag "test" BLOCK tcp PORT 8000'
     });
diff --git a/test/integration/vm-update.multi-test.js b/test/integration/vm-update.multi-test.js
index 414ecfa..e83c177 100644
--- a/test/integration/vm-update.multi-test.js
+++ b/test/integration/vm-update.multi-test.js
@@ -80,6 +80,7 @@ test('Add rules', OPTS, function (t) {
         RULES.ssh1 = {
             description: 'allow SSH',
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format(
                 'FROM tag "%s" = "one" TO tag "%s" = "two" ALLOW tcp PORT 22',
@@ -96,6 +97,7 @@ test('Add rules', OPTS, function (t) {
         RULES.web1 = {
             description: 'allow DB access',
             enabled: true,
+            log: false,
             owner_uuid: OWNERS[0],
             rule: util.format(
                 'FROM tag "%s" TO tag "%s" ALLOW tcp PORT 5432',
diff --git a/test/runtest b/test/runtest
index f386a9f..99d18d7 100755
--- a/test/runtest
+++ b/test/runtest
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -14,7 +14,6 @@
 
 TOP=$(cd $(dirname $0)/../; pwd)
 NODE_INSTALL=$TOP/node
-NODEUNIT=$TOP/node_modules/.bin/nodeunit
 UNAME=$(uname -s)
 
 guard_file=/lib/sdc/.sdc-test-no-production-data
diff --git a/test/unit/rule.test.js b/test/unit/rule.test.js
index f4dc25a..b737b01 100644
--- a/test/unit/rule.test.js
+++ b/test/unit/rule.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -95,6 +95,8 @@ test('all target types', function (t) {
     inRule.version = rule.version;
 
     t.deepEqual(rule.rawUFDS(), raw, 'rule.rawUFDS()');
+
+    inRule.log = rule.log;
     t.deepEqual(rule.serialize(), inRule, 'rule.serialize()');
     t.equal(rule.dn, util.format('uuid=%s, ou=fwrules, o=smartdc', rule.uuid),
         'rule.dn');
@@ -138,6 +140,8 @@ test('owner_uuid', function (t) {
     inRule.version = rule.version;
 
     t.deepEqual(rule.rawUFDS(), raw, 'rule.rawUFDS()');
+
+    inRule.log = rule.log;
     t.deepEqual(rule.serialize(), inRule, 'rule.serialize()');
     t.equal(rule.dn, util.format('uuid=%s, ou=fwrules, o=smartdc', rule.uuid),
         'rule.dn');
@@ -187,7 +191,8 @@ test('multiple tags with multiple quoted values', function (t) {
             + '(tag "some tag" = "value" OR tag "some-tag" = "another value") '
             + 'ALLOW tcp PORT 80',
         uuid: rule.uuid,
-        version: rule.version
+        version: rule.version,
+        log: false
     };
     t.deepEqual(rule.serialize(), serialized, 'rule.serialize()');
 
-- 
2.21.0

