From a0affd53c68dc3ff1d0a81754ea6de3cd9c8ad4a Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Thu, 18 Aug 2016 10:27:11 -0700
Subject: [PATCH] MANTA-2901 setupMantaBuckets retries should be less
 aggressive

---
 lib/moray.js | 362 +++++++++++++++++++++++++++++++--------------------
 1 file changed, 222 insertions(+), 140 deletions(-)

diff --git a/lib/moray.js b/lib/moray.js
index a0d520d..68dd271 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 //
@@ -19,6 +19,7 @@ var path = require('path');
 var util = require('util');
 
 var assert = require('assert-plus');
+var backoff = require('backoff');
 var moray = require('moray');
 var once = require('once');
 var vasync = require('vasync');
@@ -79,12 +80,79 @@ var DIR_COUNT_VERSION = 1;
 
 ///--- Internal Functions
 
+/*
+ * Create the Moray buckets used by Manta.
+ */
+function setupMantaBuckets(log, client, cb) {
+    return (vasync.forEachParallel({
+        func: createBucket,
+        inputs: [ {
+            client: client,
+            bucket: BUCKET,
+            opts: {
+                index: SCHEMA,
+                post: POST,
+                options: {
+                    version: BUCKET_VERSION
+                }
+            },
+            log: log
+        }, {
+            client: client,
+            bucket: DELETE_LOG_BUCKET,
+            opts: {
+                index: DELETE_LOG_SCHEMA,
+                options: {
+                    version: DELETE_LOG_VERSION
+                }
+            },
+            log: log
+        }, {
+            client: client,
+            bucket: DIR_COUNT_BUCKET,
+            opts: {
+                index: DIR_COUNT_SCHEMA,
+                options: {
+                    version: DIR_COUNT_VERSION
+                }
+            },
+            log: log
+        } ]
+    }, function onPipelineDone(err) {
+        /*
+         * It's possible for many concurrent invocations of this function to
+         * fail because the underlying PostgreSQL queries stomp on each other.
+         * When this happens, at least one of them will have succeeded, so we
+         * can safely proceed.  It's regrettable that the only way we currently
+         * have to identify this case are based on the message emitted by
+         * PostgreSQL.
+         */
+        if (err && (/tuple concurrently updated/.test(err.msg) ||
+            /deadlock detected/.test(err.msg) ||
+            /duplicate key value violates unique constraint/.test(err.msg))) {
+            log.info(err, 'ignoring concurrency error');
+            err = null;
+        }
+
+        if (err) {
+            err = new VError(err, 'setupMantaBuckets');
+        }
+
+        cb(err);
+    }));
+}
+
+/*
+ * We use a PostgreSQL trigger to maintain a separate table of sizes for each
+ * directory.  We install that trigger immediately after creating the Manta
+ * buckets in Moray.  This step is idempotent.
+ */
 function setupMantaTrigger(log, client, cb) {
     var readoptions, updatesql, funcsql;
 
     readoptions = { 'encoding': 'utf8' };
 
-    vasync.waterfall([
+    return (vasync.waterfall([
         function readUpdateFunction(callback) {
             var filepath = path.join(__dirname, 'trigger_update.plpgsql');
             log.trace('setupMantaTrigger: read "%s"', filepath);
@@ -120,11 +188,11 @@ function setupMantaTrigger(log, client, cb) {
         }
     ], function (err) {
         if (err) {
-            err = new VError(err, 'updating trigger');
+            err = new VError(err, 'setupMantaTrigger');
         }
 
         cb(err);
-    });
+    }));
 }
 
 
@@ -286,6 +354,8 @@ function createBucket(opts, cb) {
 ///--- API
 
 function Moray(options) {
+    var self = this;
+
     EventEmitter.call(this);
 
     this.connectTimeout = options.connectTimeout || 1000;
@@ -300,161 +370,173 @@ function Moray(options) {
     this.retry = options.retry;
     this.url = 'tcp://' + options.host + ':' + (options.port || 2020);
 
-    this.init();
-}
-util.inherits(Moray, EventEmitter);
-
-
-Moray.prototype.init = function init() {
-    var log = this.log;
-    var self = this;
-
-    log.debug('libmanta.Moray.init: entered');
-
-    this.client = moray.createClient({
-        connectTimeout: self.connectTimeout,
-        log: self.log,
-        host: self.host,
-        port: self.port,
-        reconnect: true,
-        retry: self.retry
+    /*
+     * Configure the exponential backoff object we use to manage backoff during
+     * initialization.
+     */
+    this.initBackoff = new backoff.exponential({
+        'randomisationFactor': 0.5,
+        'initialDelay': 5000,
+        'maxDelay': 300000
     });
 
-    function onConnect() {
-        //Create the manta* buckets
-        vasync.forEachParallel({
-            func: createBucket,
-            inputs: [ {
-                client: self.client,
-                bucket: BUCKET,
-                opts: {
-                    index: SCHEMA,
-                    post: POST,
-                    options: {
-                        version: BUCKET_VERSION
-                    }
-                },
-                log: log
-            }, {
-                client: self.client,
-                bucket: DELETE_LOG_BUCKET,
-                opts: {
-                    index: DELETE_LOG_SCHEMA,
-                    options: {
-                        version: DELETE_LOG_VERSION
-                    }
-                },
-                log: log
-            }, {
-                client: self.client,
-                bucket: DIR_COUNT_BUCKET,
-                opts: {
-                    index: DIR_COUNT_SCHEMA,
-                    options: {
-                        version: DIR_COUNT_VERSION
-                    }
-                },
-                log: log
-            }]
-        }, function onPipelineDone(err) {
-            function handleError(err2) {
-                log.error({
-                    bucket: err2.bucket,
-                    err: err2,
-                    opts: err2.opts
-                }, 'Moray.init: bucket create error; attempting reconnect in ' +
-                          '5 seconds');
-
-                self.client.once('error', function () {});
-                self.client.close();
-                setTimeout(self.init.bind(self), 5000);
-            }
-
-            function retryInitAfterError() {
-                self.client.once('error', function () {});
-                self.client.close();
-                setImmediate(self.init.bind(self));
-            }
-
-            function had_err(_err) {
-                if (!_err)
-                    return (false);
+    this.initBackoff.on('backoff', function (which, delay, error) {
+        assert.equal(which + 1, self.initAttempts);
+        self.log.warn({
+            'nfailures': which + 1,
+            'willRetryAfterMilliseconds': delay,
+            'error': error
+        }, 'libmanta.Moray.initAttempt failed (will retry)');
+    });
 
-                // ghetto, but we need to ignore messages like below.
-                // This is ok, as far as all testing goes, since *one* of
-                // the requests will have gone through.
-                //
-                // tuple concurrently updated
-                // deadlock detected
+    this.initBackoff.on('ready', function () {
+        self.initAttempt();
+    });
 
-                var msg = _err.message;
-                if (/tuple concurrently updated/.test(msg))
-                    return (false);
+    /*
+     * Define event handlers for the Moray client used at various parts during
+     * initialization.
+     *
+     * The Moray client should generally not emit errors, but it's known to do
+     * so under some conditions.  Our response depends on what phases of
+     * initialization we've already completed:
+     *
+     * (1) Before we've established a connection to the client: if an error is
+     *     emitted at this phase, we assume that we failed to establish a
+     *     connection and we abort the current initialization attempt.  We will
+     *     end up retrying with exponential backoff.
+     *
+     * (2) After we've established a connection, but before initialization has
+     *     completed: if an error is emitted at this phase, we'll log it but
+     *     otherwise ignore it because we assume that whatever operations we
+     *     have outstanding will also fail.
+     *
+     * (3) After we've initialized, errors are passed through to our consumer.
+     */
+    this.onErrorDuringInit = function onErrorDuringInit(err) {
+        self.log.warn(err, 'ignoring client-level error during init');
+    };
+    this.onErrorPostInit = function onErrorPostInit(err) {
+        self.log.warn(err, 'moray client error');
+        self.emit('error', err);
+    };
 
-                if (/deadlock detected/.test(msg))
-                    return (false);
+    /* These fields exist only for debugging. */
+    this.initAttempts = 0;
+    this.initPipeline = null;
+    this.initBuckets = null;
+    this.initTrigger = null;
 
-                if (/duplicate key value violates unique constraint/.test(msg))
-                    return (false);
+    this.initAttempt();
+}
 
-                return (true);
-            }
+util.inherits(Moray, EventEmitter);
 
-            if (had_err(err)) {
-                handleError(err);
-                return;
-            }
+Moray.prototype.initAttempt = function initAttempt() {
+    var self = this;
+    var log = this.log;
 
-            if (err)
-                log.info(err, 'ignoring concurrency error');
+    assert.ok(this.client === null, 'previous initAttempt did not complete');
+    assert.ok(this.initPipeline === null);
+    assert.ok(this.initBuckets === null);
+    assert.ok(this.initTrigger === null);
 
-            // Once all the moray buckets are done, then we need to create
-            // the moray directory counts postgres triggers. this is super
-            // gross, but there's not really a way around it. See MORAY-204.
-            setupMantaTrigger(log, self.client, function (err2) {
-                if (had_err(err2)) {
-                    handleError(err2);
-                    return;
-                }
+    this.initAttempts++;
+    log.debug({
+        'attempt': this.initAttempts
+    }, 'libmanta.Moray.initAttempt: entered');
+
+    this.initPipeline = vasync.waterfall([
+        function initClient(callback) {
+            self.client = moray.createClient({
+                connectTimeout: self.connectTimeout,
+                log: self.log,
+                host: self.host,
+                port: self.port,
+                reconnect: true,
+                retry: self.retry
+            });
 
-                // If somehow we got one of the concurrency errors from
-                // setupMantaTrigger, try again immediately.  The second attempt
-                // should see the updated state and make no changes.
-                if (err2) {
-                    log.info(err2,
-                        'Moray.init: retryable error from setupMantaTrigger');
-                    retryInitAfterError();
-                    return;
-                }
+            var onErrorDuringConnect = function onErrDuringConnect(err) {
+                callback(new VError(err, 'moray client error'));
+            };
 
-                self.client.removeListener('error', onConnectError);
+            self.client.on('error', onErrorDuringConnect);
+            self.client.once('connect', function onConnect() {
+                self.client.removeListener('error', onErrorDuringConnect);
+                self.client.on('error', self.onErrorDuringInit);
+                callback();
+            });
+        },
 
-                self.client.on('close', self.emit.bind(self, 'close'));
-                self.client.on('connect', self.emit.bind(self, 'connect'));
-                self.client.on('error', self.emit.bind(self, 'error'));
+        function setupBuckets(callback) {
+            self.initBuckets = setupMantaBuckets(log, self.client, callback);
+        },
 
-                log.info('Moray.init: done');
-                self.emit('connect');
-            });
-        });
-    }
+        function setupTrigger(callback) {
+            self.initTrigger = setupMantaTrigger(log, self.client, callback);
+        }
+    ], function (err) {
+        self.initPipeline = null;
+        self.initBuckets = null;
+        self.initTrigger = null;
 
-    function onConnectError(err) {
-        self.client.removeAllListeners('connectAttempt');
-        self.client.removeListener('connect', onConnect);
-        log.error({
-            err: err
-        }, 'Moray.init: connect error; attempting reconnect in 5 seconds');
-        setTimeout(self.init.bind(self), 5000);
-    }
 
-    this.client.once('connect', onConnect);
-    this.client.once('error', onConnectError);
+        if (err) {
+            /* XXX may need to remove onErrorDuringInit */
+            self.client.close();
+            self.client = null;
+            err = new VError(err, 'libmanta.Moray.initAttempt');
+            self.initBackoff.backoff(err);
+        } else {
+            /*
+             * We could reset the "backoff" object in the success case, or even
+             * null it out since we're never going to use it again.  But it's
+             * not that large, and it may be useful for debugging, so we just
+             * leave it alone.
+             */
+            self.client.removeListener('error', self.onErrorDuringInit);
+            self.client.on('error', self.onErrorPostInit);
+            self.client.on('close', self.emit.bind(self, 'close'));
+            self.client.on('connect', self.emit.bind(self, 'connect'));
+            log.info({ 'attempt': self.initAttempts },
+                'libmanta.Moray.initAttempt: done');
+            self.emit('connect');
+        }
+    });
 
-    this.client.on('connectAttempt', this.emit.bind(this, 'connectAttempt'));
+    /*
+     * XXX There are a few major changes from the previous code:
+     *
+     * - If 'error' is emitted by the moray client during initialization, we
+     *   would previously remove listeners (similar to what detachClient does)
+     *   and schedule a retry.  However, the client generally shouldn't ever
+     *   emit an error -- it's supposed to reconnect if things go sideways.
+     *   There are cases where it does so (which are bugs), but they're cases
+     *   where the underlying operation should also fail, and there was always
+     *   code to schedule a retry in those cases.  I think that means that in
+     *   the old code if we saw one of these errors emitted on the client, we'd
+     *   schedule two retries and initialize twice.
+     *
+     *   Once initialization completed in the old code, errors from the client
+     *   were passed through to our consumer, who could not do anything but
+     *   instantiate a new instance of this class.  In reality, Muskie never
+     *   does anything when this happens, though it logs that it "failed to
+     *   connect", when in fact, it can only see the 'error' if it *had*
+     *   successfully connected and the client later emitted an 'error'.
+     *
+     *   In the new code, we clearly delineate errors that happen in one of
+     *   three phases -- see the constructor.
+     *
+     *   In the new code, we don't handle errors after we decide to close the
+     *   client.
+     *
+     * - We're using exponential backoff, with randomization.
+     * - We're keeping track of more debugging state.
+     * - Removed 'connectAttempt' event.
+     */
 };
 
-
 Moray.prototype.putMetadata = function putMetadata(options, callback) {
     assert.object(options, 'options');
     assert.string(options.key, 'options.key');
-- 
2.21.0

