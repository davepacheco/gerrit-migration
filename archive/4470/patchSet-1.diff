From a78c74971068be909f45ff8283412e12c3f7a127 Mon Sep 17 00:00:00 2001
From: John Levon <john.levon@joyent.com>
Date: Tue, 3 Jul 2018 12:19:19 +0000
Subject: [PATCH] OS-7015 pagefault loop because somebody lost our %cr3

---
 usr/src/uts/intel/kdi/kdi_asm.s | 62 +++++++++++++++++++++++++--------
 1 file changed, 47 insertions(+), 15 deletions(-)

diff --git a/usr/src/uts/intel/kdi/kdi_asm.s b/usr/src/uts/intel/kdi/kdi_asm.s
index 5180dbb1b2..b29c523aeb 100644
--- a/usr/src/uts/intel/kdi/kdi_asm.s
+++ b/usr/src/uts/intel/kdi/kdi_asm.s
@@ -591,32 +591,64 @@
 	movq	KRS_GREGS(%rdi), %rsp
 	movq	REG_OFF(KDIREG_TRAPNO)(%rsp), %rdi
 	cmpq	$T_SGLSTP, %rdi
-	je	1f
+	je	kdi_pass_dbgtrap
 	cmpq	$T_BPTFLT, %rdi
-	je	2f
+	je	kdi_pass_brktrap
 	cmpq	$T_DBGENTR, %rdi
-	je	3f
+	je	kdi_pass_invaltrap
 	/*
 	 * Hmm, unknown handler.  Somebody forgot to update this when they
 	 * added a new trap interposition... try to drop back into kmdb.
 	 */
 	int	$T_DBGENTR
 
-#define	CALL_TRAP_HANDLER(name) \
-	KDI_RESTORE_REGS(%rsp); \
-	/* Discard state, trapno, err */ \
-	addq	$REG_OFF(KDIREG_RIP), %rsp; \
-	XPV_TRAP_PUSH; \
-	jmp	%cs:name
+/*
+ * kdi_cmnint stashed the original %cr3 into KDIREG_CR3, then (probably)
+ * switched us to the CPU's kf_kernel_cr3. We're about to call, for example:
+ *
+ * dbgtrap->trap()->tr_iret_kernel
+ *
+ * Unlike tr_iret_kdi, at no point does this restore the original %cr3.  So
+ * before we jump to the kernel trap handler, we'll restore it here (unless, of
+ * course, we actually came from userspace).
+ *
+ * This isn't just a matter of tidiness: for example, consider:
+ *
+ * hat_switch(oldhat=khat, newhat=prochat)
+ *  setcr3()
+ *  reset_kpti()
+ *   *brktrap* due to fbt on reset_kpti:entry
+ *
+ * Here, we have the new hat's %cr3, but we haven't yet updated kf_kernel_cr3
+ * (i.e. our current %cr3 is khat's). So if we don't restore here, we'll stay on
+ * khat's cr3 value on returning from the trap: not good if we fault on a
+ * userspace address.
+ */
 
-1:
-	CALL_TRAP_HANDLER(dbgtrap)
+#define	RESTORE_KERNEL_REGS				\
+	cmpw	$KCS_SEL, REG_OFF(KDIREG_CS)(%rsp);	\
+	jne	1f;					\
+	movq	REG_OFF(KDIREG_CR3)(%rsp), %r13;	\
+	movq	%r13, %cr3;				\
+1:							\
+	KDI_RESTORE_REGS(%rsp);				\
+	/* Discard state, trapno, err */		\
+	addq	$REG_OFF(KDIREG_RIP), %rsp;		\
+	XPV_TRAP_PUSH
+
+kdi_pass_dbgtrap:
+	RESTORE_KERNEL_REGS;
+	jmp	%cs:dbgtrap;
 	/*NOTREACHED*/
-2:
-	CALL_TRAP_HANDLER(brktrap)
+
+kdi_pass_brktrap:
+	RESTORE_KERNEL_REGS;
+	jmp	%cs:brktrap;
 	/*NOTREACHED*/
-3:
-	CALL_TRAP_HANDLER(invaltrap)
+
+kdi_pass_invaltrap:
+	RESTORE_KERNEL_REGS;
+	jmp	%cs:invaltrap;
 	/*NOTREACHED*/
 
 	SET_SIZE(kdi_pass_to_kernel)
-- 
2.21.0

