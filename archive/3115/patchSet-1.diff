From f3dc11096cadd2e02edd96546364b3449249a222 Mon Sep 17 00:00:00 2001
From: brittany <brittany.wald@joyent.com>
Date: Sat, 2 Dec 2017 00:11:15 +0000
Subject: [PATCH] MANTA-3476 read-only pnodes

---
 cmd/manta-shardadm.js | 203 +++++++++++++++++++++++++++---------------
 1 file changed, 129 insertions(+), 74 deletions(-)

diff --git a/cmd/manta-shardadm.js b/cmd/manta-shardadm.js
index efd0f2b..dfe581c 100755
--- a/cmd/manta-shardadm.js
+++ b/cmd/manta-shardadm.js
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -31,49 +31,56 @@ var VERSION = '1.0.0';
 
 function Shardadm() {
 	Cmdln.call(this, {
-	    name: 'manta-shardadm',
-	    desc: 'Manage manta shards',
-	    // Custom options. By default you get -h/--help.
-	    options: [
+		name: 'manta-shardadm',
+		desc: 'Manage manta shards',
+		// Custom options. By default you get -h/--help.
+		options: [
 		{names: ['help', 'h'], type: 'bool',
-		    help: 'Print help and exit.'},
+			help: 'Print help and exit.'},
 		{name: 'version', type: 'bool',
-		    help: 'Print version and exit.'}
-	    ]
+			help: 'Print version and exit.'}
+		]
 	});
 }
 util.inherits(Shardadm, Cmdln);
 
 Shardadm.prototype.init = function (opts, args, cb) {
+	assert.object(opts, 'opts');
+	assert.object(args, 'args');
+	assert.func(cb, 'cb');
+
+	this.log = new Logger({
+		name: __filename,
+		serializers: Logger.stdSerializers,
+		streams: [ {
+			level: 'debug',
+			path: '/var/log/manta-shardadm.log'
+		} ]
+	});
+
 	if (opts.version) {
-		console.log(this.name, VERSION);
+		this.log.debug({
+			name: this.name,
+			version: VERSION
+		});
 		cb(false);
 		return;
 	}
 
-	this.log = new Logger({
-	    name: __filename,
-	    serializers: Logger.stdSerializers,
-	    streams: [ {
-		level: 'debug',
-		path: '/var/log/manta-shardadm.log'
-	    } ]
-	});
-
 	var CFG = path.resolve(__dirname, '../etc/config.json');
 	var config = JSON.parse(fs.readFileSync(CFG, 'utf8'));
 
 	this.client = new sdc.SAPI({
-	    url: config.sapi.url,
-	    log: this.log,
-	    agent: false
+		url: config.sapi.url,
+		log: this.log,
+		agent: false
 	});
 
 	Cmdln.prototype.init.apply(this, arguments);
 };
 
-
 Shardadm.prototype.do_list = function (subcmd, opts, args, cb) {
+	var fmt = '%-12s %-28s %s';
 	var search_opts = {};
 	search_opts.name = 'manta';
 
@@ -85,12 +92,39 @@ Shardadm.prototype.do_list = function (subcmd, opts, args, cb) {
 			console.log('No manta application configured');
 			return (cb(null));
 		}
+		var metadata = apps[0].metadata;
+		var indexShards = metadata[common.INDEX_SHARDS];
+
+		console.log(sprintf(fmt,
+			'TYPE', 'SHARD NAME', 'READ ONLY STATUS'));
+
+		if (indexShards) {
+			for (var i = 0; i < indexShards.length; i++) {
+				var roStatus = indexShards[i].readOnly ?
+					indexShards[i].readOnly.toString() :
+					'false';
+				console.log(sprintf(fmt,
+					'Index',
+					indexShards[i].host,
+					roStatus));
+			}
+		}
+
+		if (metadata[common.MARLIN_SHARD])
+			console.log(sprintf(fmt,
+				'Marlin',
+				metadata[common.MARLIN_SHARD],
+				'--'));
+
+		if (metadata[common.STORAGE_SHARD])
+			console.log(sprintf(fmt,
+				'Storage',
+				metadata[common.STORAGE_SHARD],
+				'--'));
 
-		printShards(apps[0].metadata, cb);
+		return (cb(null));
 	});
 };
-Shardadm.prototype.do_list.help = 'List shards';
-
 Shardadm.prototype.do_list.help = (
 	'List Manta shards.\n'
 	+ '\n'
@@ -98,32 +132,11 @@ Shardadm.prototype.do_list.help = (
 	+ '     manta-shardadm list \n'
 );
 
-function printShards(metadata, cb) {
-	var fmt = '%-12s %s';
-
-	console.log(sprintf(fmt, 'TYPE', 'SHARD NAME'));
-
-	if (metadata[common.INDEX_SHARDS]) {
-		for (var i = 0; i < metadata[common.INDEX_SHARDS].length; i++) {
-			console.log(sprintf(fmt,
-			    'Index', metadata[common.INDEX_SHARDS][i].host));
-		}
-	}
-
-	if (metadata[common.MARLIN_SHARD])
-		console.log(sprintf(fmt,
-		    'Marlin', metadata[common.MARLIN_SHARD]));
-	if (metadata[common.STORAGE_SHARD])
-		console.log(sprintf(fmt,
-		    'Storage', metadata[common.STORAGE_SHARD]));
-
-	return (cb(null));
-}
-
 Shardadm.prototype.do_set = function (subcmd, opts, args, cb) {
 	var self = this;
 
-	if (args.length !== 0 || (!opts.i && !opts.m && !opts.s)) {
+	if (args.length !== 0 || (!opts.i && !opts.m && !opts.s && !opts.r &&
+		!opts.w)) {
 		this.do_help('help', {}, [subcmd], cb);
 		return;
 	}
@@ -144,27 +157,42 @@ Shardadm.prototype.do_set = function (subcmd, opts, args, cb) {
 		var domain_name = '.' + app.metadata['DOMAIN_NAME'];
 
 		var metadata = {};
+		var shards;
+		var key;
 
 		if (opts.m) {
 			metadata[common.MARLIN_SHARD] =
-			    addSuffix(opts.m, domain_name);
+				addSuffix(opts.m, domain_name);
 		}
 
 		if (opts.s) {
 			metadata[common.STORAGE_SHARD] =
-			    addSuffix(opts.s, domain_name);
+				addSuffix(opts.s, domain_name);
 		}
 
 		if (opts.i) {
-			var names = opts.i.split(' ');
-			var shards = [];
+			var indexShards = indexShardHash(opts.i, domain_name);
+			metadata[common.INDEX_SHARDS] = indexShards;
+		}
 
-			names.forEach(function (name) {
-				var shard = addSuffix(name, domain_name);
-				shards.push({ host: shard });
-			});
-			shards[shards.length - 1].last = true;
+		if (opts.r) {
+			shards = app.metadata[common.INDEX_SHARDS];
+			for (key in shards) {
+				if (opts.r === shards[key].host)
+					shards[key].readOnly = true;
+			}
+			metadata[common.INDEX_SHARDS] = shards;
+		}
 
+		if (opts.w) {
+			shards = app.metadata[common.INDEX_SHARDS];
+			for (key in shards) {
+				if ((opts.w === shards[key].host) &&
+					shards[key].readOnly === true)
+				{
+					delete shards[key].readOnly;
+				}
+			}
 			metadata[common.INDEX_SHARDS] = shards;
 		}
 
@@ -173,29 +201,39 @@ Shardadm.prototype.do_set = function (subcmd, opts, args, cb) {
 			return (cb(null));
 		}
 
-		self.client.updateApplication(app.uuid, { metadata: metadata },
-		    function (suberr) {
-			if (suberr)
-				return (cb(suberr));
+		self.client.updateApplication(app.uuid,
+			{ metadata: metadata },
+				function (suberr) {
+				if (suberr)
+					return (cb(suberr));
 
-			console.log('Updated Manta shards successfully');
-			return (cb(null));
-		    });
+				console.log(
+					'Updated Manta shards successfully');
+				return (cb(null));
+				});
 	});
 };
 Shardadm.prototype.do_set.options = [
 	{
-	    names: [ 'i' ],
-	    type: 'string',
-	    help: 'shards for indexing tier'
+		names: [ 'i' ],
+		type: 'string',
+		help: 'shards for indexing tier'
+	}, {
+		names: [ 'm' ],
+		type: 'string',
+		help: 'shard for marlin job records'
+	}, {
+		names: [ 's' ],
+		type: 'string',
+		help: 'shard for minnow (manta_storage) records'
 	}, {
-	    names: [ 'm' ],
-	    type: 'string',
-	    help: 'shard for marlin job records'
+		names: [ 'r' ],
+		type: 'string',
+		help: 'shard(s) to place in read-only mode (only index)'
 	}, {
-	    names: [ 's' ],
-	    type: 'string',
-	    help: 'shard for minnow (manta_storage) records'
+		names: [ 'w' ],
+		type: 'string',
+		help: 'shard(s) to place in writable mode (only index)'
 	}
 ];
 Shardadm.prototype.do_set.help = (
@@ -212,9 +250,26 @@ Shardadm.prototype.do_set.help = (
  */
 function addSuffix(str, suffix) {
 	return (str.indexOf(suffix, str.length - suffix.length) === -1 ?
-	    str + suffix : str);
+		str + suffix : str);
 }
 
+/*
+ * Creates a hash of shards as host keys, and a key to designate the last shard
+ * in the list for index shards.
+ */
+function indexShardHash(shardList, domainName) {
+	assert.arrayOfString(shardList, 'shardList');
+
+	var names = shardList.split(' ');
+	var shards = [];
+
+	names.forEach(function (name) {
+		var shard = addSuffix(name, domainName);
+		shards.push({ host: shard });
+	});
+	shards[shards.length - 1].last = true;
+	return (shards);
+}
 
 var cli = new Shardadm();
 cmdln.main(cli);
-- 
2.17.2 (Apple Git-113)

