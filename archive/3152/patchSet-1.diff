commit da638c9ca926a9ff64cfda68e5ff5927b08895af (refs/changes/52/3152/1)
Author: David Pacheco <dap@joyent.com>
Date:   2018-01-03T13:00:32-08:00 (1 year, 9 months ago)
    
    joyent/node-fast#15 server leaks memory on socket errors

diff --git a/lib/fast_server.js b/lib/fast_server.js
index 66e0485..620f476 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -565,15 +565,25 @@ FastServer.prototype.connDrain = function (conn)
 		    return ([ self.fs_dtid, conn.fc_connid ]);
 		});
 
-		/*
-		 * As long as we didn't see a socket error and didn't already
-		 * terminate the socket, destroy the socket.  We could try to
-		 * end it gracefully, but we don't actually want to wait for the
-		 * client to shut it down cleanly.  If we already saw an error,
-		 * then there's nothing else to do.
-		 */
-		if (conn.fc_socket_error === null &&
-		    conn.fc_server_error === null) {
+		if (conn.fc_socket_error !== null) {
+			/*
+			 * If we did see a socket error, then we must explicitly
+			 * tear down the pipeline.  Otherwise, these streams
+			 * will maintain references to each other, resulting in
+			 * a leak.
+			 */
+			conn.fc_socket.unpipe();
+			conn.fc_ckddecoder.unpipe();
+			conn.fc_rawdecoder.unpipe();
+		} else if (conn.fc_server_error === null) {
+			/*
+			 * As long as we didn't see a socket error and didn't
+			 * already terminate the socket, destroy the socket.  We
+			 * could try to end it gracefully, but we don't actually
+			 * want to wait for the client to shut it down cleanly.
+			 * If we already saw an error, then there's nothing else
+			 * to do.
+			 */
 			conn.fc_socket.destroy();
 		}
 	}
