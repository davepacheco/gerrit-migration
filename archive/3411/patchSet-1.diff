From eac4f35ea6f497ea45c24b62b08382be6d6f8acb Mon Sep 17 00:00:00 2001
From: Bryan Cantrill <bryan@joyent.com>
Date: Sat, 17 Feb 2018 02:46:28 +0000
Subject: [PATCH] OS-6625 cassandra java process dumps core in lx-related
 library code

---
 usr/src/lib/brand/lx/lx_brand/common/clone.c  |  6 +++---
 usr/src/lib/brand/lx/lx_brand/common/signal.c | 17 ++++++++---------
 usr/src/lib/brand/lx/lx_brand/common/stack.c  |  5 ++---
 3 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/usr/src/lib/brand/lx/lx_brand/common/clone.c b/usr/src/lib/brand/lx/lx_brand/common/clone.c
index f759506aff..109baf3d0a 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/clone.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/clone.c
@@ -22,7 +22,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <assert.h>
@@ -631,7 +631,7 @@ lx_clone(uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4, uintptr_t p5)
 	 * thread:
 	 */
 	if ((cs = malloc(sizeof (*cs))) == NULL) {
-		lx_debug("could not allocate clone_state: %s", strerror(errno));
+		lx_debug("could not allocate clone_state: %d", errno);
 		return (-ENOMEM);
 	}
 	cs->c_flags = flags;
@@ -665,7 +665,7 @@ lx_clone(uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4, uintptr_t p5)
 	 */
 	VERIFY0(sigfillset(&sigmask));
 	if (sigprocmask(SIG_BLOCK, &sigmask, &osigmask) < 0) {
-		lx_debug("lx_clone sigprocmask() failed: %s", strerror(errno));
+		lx_debug("lx_clone sigprocmask() failed: %d", errno);
 		free(cs->c_lx_tsd);
 		free(cs);
 		return (-errno);
diff --git a/usr/src/lib/brand/lx/lx_brand/common/signal.c b/usr/src/lib/brand/lx/lx_brand/common/signal.c
index 61ddd6db20..a8e3601cb9 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/signal.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/signal.c
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc. All rights reserved.
+ * Copyright 2018 Joyent, Inc. All rights reserved.
  */
 
 #include <sys/types.h>
@@ -1931,8 +1931,8 @@ lx_sigaction_common(int lx_sig, struct lx_sigaction *lxsp,
 
 			if (sigprocmask(SIG_BLOCK, &new_set, &oset) < 0) {
 				err = errno;
-				lx_debug("unable to block signal %d: %s", sig,
-				    strerror(err));
+				lx_debug("unable to block signal %d: %d",
+				    sig, err);
 				return (-err);
 			}
 
@@ -1945,8 +1945,8 @@ lx_sigaction_common(int lx_sig, struct lx_sigaction *lxsp,
 			if (sigaction(sig, NULL, &sa) < 0) {
 				err = errno;
 				lx_debug("sigaction() to get old "
-				    "disposition for signal %d failed: "
-				    "%s", sig, strerror(err));
+				    "disposition for signal %d failed: %d",
+				    sig, err);
 				(void) sigprocmask(SIG_SETMASK, &oset, NULL);
 				return (-err);
 			}
@@ -2003,7 +2003,7 @@ lx_sigaction_common(int lx_sig, struct lx_sigaction *lxsp,
 					err = errno;
 					lx_debug("sigaction() to set new "
 					    "disposition for signal %d failed: "
-					    "%s", sig, strerror(err));
+					    "%d", sig, err);
 					(void) sigprocmask(SIG_SETMASK, &oset,
 					    NULL);
 					return (-err);
@@ -2028,10 +2028,9 @@ lx_sigaction_common(int lx_sig, struct lx_sigaction *lxsp,
 
 				if (sigaction(sig, &sa, NULL) < 0) {
 					err = errno;
-					lx_debug("sigaction(%d, %s) failed: %s",
+					lx_debug("sigaction(%d, %s) failed: %d",
 					    sig, ((sa.sa_handler == SIG_DFL) ?
-					    "SIG_DFL" : "SIG_IGN"),
-					    strerror(err));
+					    "SIG_DFL" : "SIG_IGN"), err);
 					(void) sigprocmask(SIG_SETMASK, &oset,
 					    NULL);
 					return (-err);
diff --git a/usr/src/lib/brand/lx/lx_brand/common/stack.c b/usr/src/lib/brand/lx/lx_brand/common/stack.c
index daa40f3cc6..8f2c1cacc7 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/stack.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/stack.c
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -256,8 +256,7 @@ lx_alloc_stack(void **nstack, size_t *nstack_size)
 	if ((stack = mmap(NULL, stacksize, stackprot, MAP_PRIVATE |
 	    MAP_NORESERVE | MAP_ANON, -1, (off_t)0)) == MAP_FAILED) {
 		int en = errno;
-		lx_debug("lx_alloc_stack: failed to allocate stack: %s",
-		    strerror(errno));
+		lx_debug("lx_alloc_stack: failed to allocate stack: %d", errno);
 		errno = en;
 		return (-1);
 	}
-- 
2.21.0

