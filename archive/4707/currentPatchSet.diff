From 255fbe3030b2a3c7e0986c5b3fd7073bc9d5be32 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Fri, 24 Aug 2018 18:55:28 -0400
Subject: [PATCH] joyent/node-manta#61 msign should allow for friendlier expiry
 date formats Reviewed by: Robert Mustacchi <rm@joyent.com> Reviewed by: Trent
 Mick <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 CHANGES.md         |  10 +++
 bin/msign          |  63 +++++++++++++++--
 docs/man/msign.md  |  21 +++++-
 man/man1/msign.1   |  30 +++++++-
 package.json       |   2 +-
 test/msign.test.js | 167 +++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 286 insertions(+), 7 deletions(-)
 create mode 100644 test/msign.test.js

diff --git a/CHANGES.md b/CHANGES.md
index 2ef85d7..5dc55b0 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,16 @@
 
 ## not yet released
 
+## 5.2.0
+
+- [#61](https://github.com/joyent/node-manta/issues/61) msign should allow for
+  friendlier expiry date formats
+
+  `msign -E <expires>` now supported, e.g.
+
+      msign -E 30m ~~/stor/bar # 30 minutes from now
+      msign -E 1h ~~/stor/foo  # 1 hour from now
+
 - joyent/node-manta#333 The --role-tag option does not work for mput, muntar,
   mln, or mmkdir
 - joyent/node-manta#329 Refactor all commands to use common option parsing code
diff --git a/bin/msign b/bin/msign
index 6cd1ca0..280a535 100755
--- a/bin/msign
+++ b/bin/msign
@@ -4,7 +4,7 @@
  * Copyright 2018 Joyent, Inc.
  */
 
-var fs = require('fs');
+var assert = require('assert-plus');
 var path = require('path');
 var url = require('url');
 
@@ -25,8 +25,13 @@ function optionsParser(name) {
             {
                 names: ['expires', 'e'],
                 type: 'positiveInteger',
-                help: 'expiration time (epoch). Default is 1hr from now.',
-                'default': Math.floor((new Date().getTime() / 1000) + 3600),
+                help: 'expiration time (epoch). Default is 1h from now.',
+                helpArg: 'EXPIRATION'
+            },
+            {
+                names: ['expires-relative', 'E'],
+                type: 'string',
+                help: 'expiration time (relative). Default is 1h from now.',
                 helpArg: 'EXPIRATION'
             },
             {
@@ -126,13 +131,63 @@ function parseCmdOptions(opts, parser) {
     } catch (e) {
         ifError(e);
     }
+
+    if (opts.hasOwnProperty('expires') &&
+        opts.hasOwnProperty('expires_relative')) {
+
+        ifError(new Error('-e and -E cannot be specified together'));
+    }
+
+    // normalize expires (-e and -E) options
+    var expires = Math.floor((new Date().getTime() / 1000) + 3600);
+
+    if (opts.hasOwnProperty('expires_relative')) {
+        var match = opts.expires_relative.match(/^([1-9][0-9]*)([smhdwy])$/);
+        if (!match) {
+            ifError(new Error('invalid expires: ' + opts.expires_relative));
+        }
+
+        var now = Math.floor(Date.now() / 1000);
+        var num = parseInt(match[1], 10);
+
+        // This should be the case because of the regex match above
+        assert.number(num, 'num');
+        assert(num > 0, 'num > 0');
+
+        switch (match[2]) {
+        case 's':
+            expires = now + (num);
+            break;
+        case 'm':
+            expires = now + (num * 60);
+            break;
+        case 'h':
+            expires = now + (num * 60 * 60);
+            break;
+        case 'd':
+            expires = now + (num * 60 * 60 * 24);
+            break;
+        case 'w':
+            expires = now + (num * 60 * 60 * 24 * 7);
+            break;
+        case 'y':
+            expires = now + (num * 60 * 60 * 24 * 365);
+            break;
+        default:
+            ifError(new Error('invalid expires: ' + opts.expires));
+            break;
+        }
+    } else if (opts.hasOwnProperty('expires')) {
+        expires = opts.expires;
+    }
+
     opts.paths.forEach(function (p) {
 
         ifError(manta.assertPath(p, true));
 
         var _opts = {
             algorithm: opts.algorithm,
-            expires: opts.expires,
+            expires: expires,
             host: url.parse(opts.url).host,
             keyId: opts.keyId,
             log: opts.log,
diff --git a/docs/man/msign.md b/docs/man/msign.md
index 946ef0d..09d3d62 100644
--- a/docs/man/msign.md
+++ b/docs/man/msign.md
@@ -1,4 +1,4 @@
-msign 1 "May 2013" Manta "Manta Commands"
+msign 1 "August 2018" Manta "Manta Commands"
 =======================================
 
 NAME
@@ -36,6 +36,14 @@ On OS X, you would sign this way:
 
     $ msign -e $(date -v+1m "+%s") ~~/stor/tmp
 
+You can also use `-E` for a friendly relative date format:
+
+    $ msign -E 5s ~~/foo # expires in 5 seconds
+    $ msign -E 5m ~~/foo # expires in 5 minutes
+    $ msign -E 5h ~~/foo # expires in 5 hours
+    $ msign -E 5d ~~/foo # expires in 5 days
+    $ msign -E 5w ~~/foo # expires in 5 weeks
+    $ msign -E 5y ~~/foo # expires in 5 years
 
 OPTIONS
 -------
@@ -47,6 +55,17 @@ OPTIONS
   Signed URL should last until EXPIRATION (seconds since epoch).  Default is 1
   hour from `now`.
 
+`-e, --expires-relative expiration`
+  Signed URL should last until EXPIRATION (relative time spec).  Default is 1
+  hour from `now`.  Time specification format:
+
+    [n]s - seconds from now
+    [n]m - minutes from now
+    [n]h - hours from now
+    [n]d - days from now
+    [n]w - weeks from now
+    [n]y - years from now
+
 `-h, --help`
   Print a help message and exit.
 
diff --git a/man/man1/msign.1 b/man/man1/msign.1
index a8d9b72..674f45d 100644
--- a/man/man1/msign.1
+++ b/man/man1/msign.1
@@ -1,4 +1,4 @@
-.TH msign 1 "May 2013" Manta "Manta Commands"
+.TH msign 1 "August 2018" Manta "Manta Commands"
 .SH NAME
 .PP
 msign \- create a signed URL to a Manta object
@@ -34,6 +34,19 @@ On OS X, you would sign this way:
 $ msign \-e $(date \-v+1m "+%s") ~~/stor/tmp
 .fi
 .RE
+.PP
+You can also use \fB\fC\-E\fR for a friendly relative date format:
+.PP
+.RS
+.nf
+$ msign \-E 5s ~~/foo # expires in 5 seconds
+$ msign \-E 5m ~~/foo # expires in 5 minutes
+$ msign \-E 5h ~~/foo # expires in 5 hours
+$ msign \-E 5d ~~/foo # expires in 5 days
+$ msign \-E 5w ~~/foo # expires in 5 weeks
+$ msign \-E 5y ~~/foo # expires in 5 years
+.fi
+.RE
 .SH OPTIONS
 .TP
 \fB\fC\-a, \-\-account login\fR
@@ -43,6 +56,21 @@ Authenticate as account (login name).
 Signed URL should last until EXPIRATION (seconds since epoch).  Default is 1
 hour from \fB\fCnow\fR\&.
 .TP
+\fB\fC\-e, \-\-expires\-relative expiration\fR
+Signed URL should last until EXPIRATION (relative time spec).  Default is 1
+hour from \fB\fCnow\fR\&.  Time specification format:
+.PP
+.RS
+.nf
+[n]s \- seconds from now
+[n]m \- minutes from now
+[n]h \- hours from now
+[n]d \- days from now
+[n]w \- weeks from now
+[n]y \- years from now
+.fi
+.RE
+.TP
 \fB\fC\-h, \-\-help\fR
 Print a help message and exit.
 .TP
diff --git a/package.json b/package.json
index 9dd62ec..721c3e2 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
         "type": "git",
         "url": "git://github.com/joyent/node-manta.git"
     },
-    "version": "5.1.1",
+    "version": "5.2.0",
     "main": "./lib/index.js",
     "dependencies": {
         "assert-plus": "^1.0.0",
diff --git a/test/msign.test.js b/test/msign.test.js
new file mode 100644
index 0000000..730c824
--- /dev/null
+++ b/test/msign.test.js
@@ -0,0 +1,167 @@
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+/*
+ * Test `msign`.
+ */
+
+var f = require('util').format;
+var forkExecWait = require('forkexec').forkExecWait;
+var path = require('path');
+var url = require('url');
+
+// ---- globals
+
+var BINDIR = path.resolve(__dirname, '../bin');
+var MSIGN = path.resolve(BINDIR, 'msign');
+
+// This doesn't really matter - msign doesn't check to see if the object exists
+var PATH = '~~/stor/foo';
+
+// ---- helper functions
+
+function test(name, testfunc) {
+    module.exports[name] = testfunc;
+}
+
+
+// ---- tests
+
+test('msign (no arguments)', function (t) {
+    forkExecWait({
+        argv: [MSIGN]
+    }, function (err, info) {
+        t.ok(err, 'msign should fail');
+        t.ok(/^path required/m.test(info.stderr), 'path required in stderr');
+        t.done();
+    });
+});
+
+test(f('msign %s', PATH), function (t) {
+    var mantaUrl = process.env.MANTA_URL;
+
+    forkExecWait({
+        argv: [MSIGN, PATH]
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        // should be a signed URL
+        var uri = info.stdout.trim();
+
+        t.ok(uri.length > mantaUrl.length, 'uri.length > mantaUrl.length');
+        t.equal(uri.slice(0, mantaUrl.length), mantaUrl, 'base URL correct');
+
+        // ensure query paramaters are present that we expect
+        var signed = url.parse(uri, true);
+        var q = signed.query;
+        t.ok(q, 'query');
+        t.ok(q.signature, 'signature');
+        t.ok(q.algorithm, 'algorithm');
+        t.ok(q.expires, 'expires');
+        t.ok(q.keyId, 'keyId');
+
+        t.done();
+    });
+});
+
+test(f('msign -e <expires> %s', PATH), function (t) {
+    // 1 minute from now
+    var expires = Math.floor(Date.now() / 1000) + 60;
+
+    forkExecWait({
+        argv: [MSIGN, '-e', expires.toString(), PATH]
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        var uri = info.stdout.trim();
+        var signed = url.parse(uri, true);
+        var q = signed.query;
+
+        t.ok(q, 'query');
+        t.equal(q.expires, expires, 'expires');
+
+        t.done();
+    });
+});
+
+test(f('msign -E 1h %s', PATH), function (t) {
+    // 1 hour from now
+    var expires = Math.floor(Date.now() / 1000) + (1 * 60 * 60);
+
+    forkExecWait({
+        argv: [MSIGN, '-E', '1h', PATH]
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        var uri = info.stdout.trim();
+        var signed = url.parse(uri, true);
+        var q = signed.query;
+
+        /*
+         * Because there is some time from when we get the current time in this
+         * test, to when `msign` gets the current time, it is possible that the
+         * expires date set by `msign` will be a couple seconds ahead of us, so
+         * allow for a slight variance.
+         */
+        t.ok(q.expires >= expires, 'q.expires >= expires');
+        t.ok(q.expires < expires + 5, 'q.expires < expires + 5');
+
+        t.done();
+    });
+});
+
+// Good arguments
+[
+    '1s',
+    '1m',
+    '1h',
+    '1d',
+    '1w',
+    '1y'
+].forEach(function (expires) {
+    test(f('msign -E %s %s (good argument)', expires, PATH), function (t) {
+        forkExecWait({
+            argv: [MSIGN, '-E', expires, PATH]
+        }, function (err, info) {
+            t.ifError(err, err);
+            t.done();
+        });
+    });
+});
+
+// Bad arguments
+[
+    'foo',
+    '',
+    '-5s',
+    '74q',
+    '0s',
+    '0m',
+    '0h',
+    '0d',
+    '0w',
+    '0y'
+].forEach(function (expires) {
+    test(f('msign -E %s %s (bad argument)', expires, PATH), function (t) {
+        forkExecWait({
+            argv: [MSIGN, '-E', expires, PATH]
+        }, function (err, info) {
+            t.ok(err, 'msign should fail');
+            t.ok(/invalid expires: /m.test(info.stderr),
+                'invalid expires in stderr');
+            t.done();
+        });
+    });
+});
+
+test('msign -E and -e together', function (t) {
+    forkExecWait({
+        argv: [MSIGN, '-E', '1h', '-e', '1234567', PATH]
+    }, function (err, info) {
+        t.ok(err, 'msign should fail');
+        t.ok(/-e and -E cannot be specified together/m.test(info.stderr),
+            '-e and -E cannot be specified together in stderr');
+        t.done();
+    });
+});
-- 
2.21.0

