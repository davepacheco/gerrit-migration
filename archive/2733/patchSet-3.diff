commit d21c0f84c373d1f81ea8565d072e9eeb39057a68 (refs/changes/33/2733/3)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2017-10-24T09:40:52-06:00 (1 year, 11 months ago)
    
    MANTA-3450 Address concurrency errors when creating postgres functions

diff --git a/lib/trigger_dircount.plpgsql b/lib/trigger_dircount.plpgsql
index c136d50..102cbed 100644
--- a/lib/trigger_dircount.plpgsql
+++ b/lib/trigger_dircount.plpgsql
@@ -22,24 +22,36 @@
  * to see if we need to update the trigger.  It's possible that no version is
  * installed, an older version is installed, a newer version is installed, or
  * this exact version is already installed.
+ */
+
+BEGIN;
+
+/*
+ * Use a transaction advisory lock to prevent errors that result from
+ * concurrent execution of a CREATE FUNCTION statement. The lock is
+ * automatically released at the end of the transaction.
  *
- * If this script is executed concurrently by multiple clients, it's possible
- * for this operation to fail with a "tuple concurrently modified" error.  This
- * is annoying, but not easy to work around:
- *
- *     o We cannot DROP the function instead (even inside a transaction) because
- *       it may be in use by an existing trigger.
- *     o We cannot DROP the trigger along with it, even if we recreate it inside
- *       a transaction, because that operation takes an exclusive table lock and
- *       it's critical that we not do that unless we actually need to update the
- *       trigger.)
- *     o There is no CREATE FUNCTION IF NOT EXISTS.
- *
- * Sadly, the easiest thing to do is to have the caller retry on this error
- * until it succeeds.  The assumption is that as long as the number of clients
- * is bounded, and all clients are retrying, then eventually all will succeed
- * because each time the error is returned, one of the clients has succeeded.
+ * Two keys are used for the lock to carve out a unique
+ * namespace. Each key must be a 32-bit integer. The first key is derived
+ * from the project name and the second key is derived from the
+ * function name. An MD5 hash of each string is taken and the bytes
+ * are converted to an integer value. This hopefully avoids the
+ * case where multiple applications inadvertently use the same set of
+ * keys and also the case where different function creation statements
+ * use the same key while also ensuring each invocation of this
+ * statement does use the same key.
  */
+WITH digest1 AS (
+    SELECT md5('libmanta') AS val
+), digest2 AS (
+    SELECT md5('count_manta_directories_v3') AS val
+), lockkey1 AS (
+    SELECT ('x'||(SELECT val FROM digest1))::bit(32)::integer AS val
+), lockkey2 AS (
+    SELECT ('x'||(SELECT val FROM digest2))::bit(32)::integer AS val
+)
+SELECT pg_advisory_xact_lock((SELECT val FROM lockkey1), (SELECT val FROM lockkey2));
+
 CREATE OR REPLACE FUNCTION count_manta_directories_v3() RETURNS TRIGGER AS
     $FunctionCode$
     DECLARE tmpcount NUMERIC;
@@ -117,6 +129,8 @@ CREATE OR REPLACE FUNCTION count_manta_directories_v3() RETURNS TRIGGER AS
     END;
 $FunctionCode$ LANGUAGE plpgsql;
 
+COMMIT;
+
 /*
  * Transactionally install this trigger.
  */
diff --git a/lib/trigger_update.plpgsql b/lib/trigger_update.plpgsql
index 542e393..acfae4d 100644
--- a/lib/trigger_update.plpgsql
+++ b/lib/trigger_update.plpgsql
@@ -32,7 +32,7 @@
  *     tg_trigname      name of the trigger
  *
  *     tg_version       the version of the trigger you want to install
- *     			(a non-negative integer)
+ *                      (a non-negative integer)
  *
  *     tg_procname      the name of the procedure to execute for the trigger
  *                      (a version string will be appended to this value to
@@ -82,7 +82,7 @@
  * At this point, if the previous version of the code runs (i.e., the one that
  * defines "my_trigger_v1"), it will see that a newer trigger is installed and
  * make no changes.
- * 
+ *
  *
  * CONCURRENCY: The execution of this function necessarily happens in the
  * context of a transaction.  If there was no BEGIN to start a transaction
@@ -129,6 +129,32 @@
 
 BEGIN;
 
+/*
+ * Use a transaction advisory lock to prevent errors that result from
+ * concurrent execution of a CREATE FUNCTION statement. The lock is
+ * automatically released at the end of the transaction.
+ *
+ * Two keys are used for the lock to carve out a unique
+ * namespace. Each key must be a 32-bit integer. The first key is derived
+ * from the project name and the second key is derived from the
+ * function name. An MD5 hash of each string is taken and the bytes
+ * are converted to an integer value. This hopefully avoids the
+ * case where multiple applications inadvertently use the same set of
+ * keys and also the case where different function creation statements
+ * use the same key while also ensuring each invocation of this
+ * statement does use the same key.
+ */
+WITH digest1 AS (
+    SELECT md5('libmanta') AS val
+), digest2 AS (
+    SELECT md5('manta_update_versioned_trigger') AS val
+), lockkey1 AS (
+    SELECT ('x'||(SELECT val FROM digest1))::bit(32)::integer AS val
+), lockkey2 AS (
+    SELECT ('x'||(SELECT val FROM digest2))::bit(32)::integer AS val
+)
+SELECT pg_advisory_xact_lock((SELECT val FROM lockkey1), (SELECT val FROM lockkey2));
+
 CREATE OR REPLACE FUNCTION manta_update_versioned_trigger (
     tg_tablename varchar(128),
     tg_trigname  varchar(128),
@@ -139,66 +165,66 @@ CREATE OR REPLACE FUNCTION manta_update_versioned_trigger (
     $FUNCTION_CODE$
     BEGIN /* function definition, NOT transaction */
 
-	/*
-	 * We want to log what we're doing, and those messages are sometimes
-	 * greater than 80 columns.  Due to MORAY-317, we cannot use string
-	 * concatenation.  Due to the definition of RAISE, the string we log
-	 * must be a literal anyway.  We could use EXECUTE to dynamically
-	 * generate the command, but RAISE is specific to pl/pgSQL, not SQL per
-	 * se, so we'd have to wrap it in a DO block.  Ugh.  Sometimes, we just
-	 * can't have nice things.
-	 */
-	RAISE NOTICE '% trigger "%" on table "%" (want version %)',
-	    'manta_update_versioned_trigger: checking state for',
-	    tg_trigname, tg_tablename, tg_version;
+        /*
+         * We want to log what we're doing, and those messages are sometimes
+         * greater than 80 columns.  Due to MORAY-317, we cannot use string
+         * concatenation.  Due to the definition of RAISE, the string we log
+         * must be a literal anyway.  We could use EXECUTE to dynamically
+         * generate the command, but RAISE is specific to pl/pgSQL, not SQL per
+         * se, so we'd have to wrap it in a DO block.  Ugh.  Sometimes, we just
+         * can't have nice things.
+         */
+        RAISE NOTICE '% trigger "%" on table "%" (want version %)',
+            'manta_update_versioned_trigger: checking state for',
+            tg_trigname, tg_tablename, tg_version;
 
-	/*
-	 * If there are matching triggers whose version number (encoded in the
-	 * procedure name, in turn encoded in the trigger's action statement) is
-	 * newer than ours, then we don't have to do anything.  Locking is not
-	 * necessary here, since the presence of any triggers as new as ours at
-	 * any time means that we have no work to do.  Moreover, it's critical
-	 * that we do NOT lock here, because doing so is extremely disruptive,
-	 * and we only want to require locking when changes are actually likely
-	 * to be made.
-	 */
-	IF EXISTS (SELECT *
-	           FROM  information_schema.triggers
-		   WHERE event_object_table = tg_tablename AND
-		         trigger_name = tg_trigname AND
-		         action_statement ~
-		           ('EXECUTE PROCEDURE ' || tg_procname || '_v\d+\(\)$')
-			 AND substring(action_statement
-			   from '_v(\d+)\(\)$')::integer >= tg_version)
-	THEN
-		RAISE NOTICE 
-		    'manta_update_versioned_trigger: no changes needed';
-	        RETURN 'no changes needed';
-	END IF;
+        /*
+         * If there are matching triggers whose version number (encoded in the
+         * procedure name, in turn encoded in the trigger's action statement) is
+         * newer than ours, then we don't have to do anything.  Locking is not
+         * necessary here, since the presence of any triggers as new as ours at
+         * any time means that we have no work to do.  Moreover, it's critical
+         * that we do NOT lock here, because doing so is extremely disruptive,
+         * and we only want to require locking when changes are actually likely
+         * to be made.
+         */
+        IF EXISTS (SELECT *
+                   FROM  information_schema.triggers
+                   WHERE event_object_table = tg_tablename AND
+                         trigger_name = tg_trigname AND
+                         action_statement ~
+                           ('EXECUTE PROCEDURE ' || tg_procname || '_v\d+\(\)$')
+                         AND substring(action_statement
+                           from '_v(\d+)\(\)$')::integer >= tg_version)
+        THEN
+                RAISE NOTICE
+                    'manta_update_versioned_trigger: no changes needed';
+                RETURN 'no changes needed';
+        END IF;
 
-	/*
-	 * If there is an older trigger, remove it now.
-	 */
-	RAISE NOTICE '% "%" on table "%"',
-	    'manta_update_versioned_trigger: removing previous trigger',
-	    tg_trigname, tg_tablename;
-	EXECUTE 'DROP TRIGGER IF EXISTS ' || quote_ident(tg_trigname) ||
-	    ' ON ' || quote_ident(tg_tablename);
+        /*
+         * If there is an older trigger, remove it now.
+         */
+        RAISE NOTICE '% "%" on table "%"',
+            'manta_update_versioned_trigger: removing previous trigger',
+            tg_trigname, tg_tablename;
+        EXECUTE 'DROP TRIGGER IF EXISTS ' || quote_ident(tg_trigname) ||
+            ' ON ' || quote_ident(tg_tablename);
 
-	/*
-	 * Instantiate the new trigger.  The only way this should be able to
-	 * fail if some other invocation created this trigger after we removed
-	 * it above.  The caller is expected to retry until this succeeds.
-	 */
-	RAISE NOTICE '% trigger "%" on table "%" at version %',
-	    'manta_update_versioned_trigger: installing',
-	    tg_trigname, tg_tablename, tg_version;
-	EXECUTE 'CREATE TRIGGER ' || quote_ident(tg_trigname)  ||
-	    ' AFTER INSERT OR DELETE ON ' || quote_ident(tg_tablename) ||
-	    ' FOR EACH ROW EXECUTE PROCEDURE ' ||
-	    quote_ident(tg_procname) || '_v' || tg_version || '()';
+        /*
+         * Instantiate the new trigger.  The only way this should be able to
+         * fail if some other invocation created this trigger after we removed
+         * it above.  The caller is expected to retry until this succeeds.
+         */
+        RAISE NOTICE '% trigger "%" on table "%" at version %',
+            'manta_update_versioned_trigger: installing',
+            tg_trigname, tg_tablename, tg_version;
+        EXECUTE 'CREATE TRIGGER ' || quote_ident(tg_trigname)  ||
+            ' AFTER INSERT OR DELETE ON ' || quote_ident(tg_tablename) ||
+            ' FOR EACH ROW EXECUTE PROCEDURE ' ||
+            quote_ident(tg_procname) || '_v' || tg_version || '()';
 
-	RETURN 'installed version ' || tg_version;
+        RETURN 'installed version ' || tg_version;
     END;  /* function definition */
     $FUNCTION_CODE$ LANGUAGE plpgsql;
 
