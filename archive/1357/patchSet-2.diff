From 66efc923eebf65fd22523555036c16e21ae194ea Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Fri, 27 Jan 2017 04:53:46 +0000
Subject: [PATCH] FWAPI-273 Rules containing a tag w/ a value followed by a tag
 w/o one crash (sync w/ smartos-live) Reviewed by: Alex Wilson
 <alex.wilson@joyent.com> Approved by: Alex Wilson <alex.wilson@joyent.com>

---
 deps/fw/lib/fw.js              | 24 ++++++++-------
 deps/fw/test/unit/tags.test.js | 55 +++++++++++++++++++++++++++++++++-
 2 files changed, 68 insertions(+), 11 deletions(-)

diff --git a/deps/fw/lib/fw.js b/deps/fw/lib/fw.js
index 284dcd6..ebc0a0a 100644
--- a/deps/fw/lib/fw.js
+++ b/deps/fw/lib/fw.js
@@ -21,7 +21,7 @@
  * CDDL HEADER END
  *
  *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
+ * Copyright 2017, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: Main entry points
@@ -1098,8 +1098,9 @@ function prepareIPFdata(opts, log, callback) {
 function vmsOnSide(allVMs, rule, dir, log) {
     var matching = [];
 
-    ['vms', 'tags', 'wildcards'].forEach(function (type) {
-        rule[dir][type].forEach(function (t) {
+    ['vms', 'tags', 'wildcards'].forEach(function (walkType) {
+        rule[dir][walkType].forEach(function (t) {
+            var type = walkType;
             var value;
             if (typeof (t) !== 'string') {
                 value = t[1];
@@ -1176,25 +1177,28 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
     ['tag', 'vm', 'wildcard'].forEach(function (type) {
         var typePlural = type + 's';
         rule[otherSide][typePlural].forEach(function (value) {
+            var lookupType = type;
+            var lookupTypePlural = typePlural;
             var t;
+
             if (typeof (value) !== 'string') {
                 t = value[1];
                 value = value[0];
-                type = 'tagValue';
-                typePlural = 'tagValues';
+                lookupType = 'tagValue';
+                lookupTypePlural = 'tagValues';
             }
 
-            if (type === 'wildcards' && value === 'any') {
+            if (lookupTypePlural === 'wildcards' && value === 'any') {
                 return;
             }
 
             [localVMs, remoteVMs].forEach(function (lookup) {
-                if (!hasKey(lookup, typePlural)
-                    || !hasKey(lookup[typePlural], value)) {
+                if (!hasKey(lookup, lookupTypePlural)
+                    || !hasKey(lookup[lookupTypePlural], value)) {
                     return;
                 }
 
-                var vmList = lookup[typePlural][value];
+                var vmList = lookup[lookupTypePlural][value];
                 if (t !== undefined) {
                     if (!hasKey(vmList, t)) {
                         return;
@@ -1212,7 +1216,7 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
                         rule: rule,
                         direction: dir,
                         targets: vm.ips,
-                        type: type,
+                        type: lookupType,
                         value: value
                     }));
                 });
diff --git a/deps/fw/test/unit/tags.test.js b/deps/fw/test/unit/tags.test.js
index 8bfa1cd..eb581af 100644
--- a/deps/fw/test/unit/tags.test.js
+++ b/deps/fw/test/unit/tags.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
+ * Copyright 2017, Joyent, Inc. All rights reserved.
  *
  * fwadm test: tags
  */
@@ -1662,6 +1662,59 @@ exports['tags that target no VMs'] = function (t) {
 };
 
 
+exports['FWAPI-273: Tag without a value following one with'] = function (t) {
+    reset();
+    var vm = helpers.generateVM({ tags: { c: true } });
+    var vms = [ vm ];
+    var rule = {
+        owner_uuid: vm.owner_uuid,
+        rule: 'FROM any TO (tag "a" = "b" OR tag "c") ALLOW tcp PORT 25',
+        enabled: true
+    };
+
+    var expRules = {};
+    var expRulesOnDisk = {};
+    var vmsEnabled = {};
+
+    fw.add({ localVMs: vms, vms: vms, rules: [ rule ] }, function (err, res) {
+        t.ifError(err);
+        if (err) {
+            t.done();
+            return;
+        }
+
+        helpers.fillInRuleBlanks(res.rules, rule);
+        t.deepEqual(res, {
+            vms: [ vm.uuid ],
+            rules: [ rule ]
+        }, 'result');
+
+        helpers.addZoneRules(expRules, [
+            [ vm, 'default' ],
+            [ vm, 'in', 'pass', 'tcp', 'any', 25 ]
+        ]);
+
+        t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
+            'IPv4 firewall rules');
+        t.deepEqual(helpers.zoneIPFconfigs(6), expRules,
+            'IPv6 firewall rules');
+
+        vmsEnabled[vm.uuid] = true;
+        t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
+            'firewalls enabled');
+
+        t.deepEqual(helpers.remoteVMsOnDisk(), {},
+            'remote VMs on disk');
+
+        expRulesOnDisk[rule.uuid] = clone(rule);
+
+        t.deepEqual(helpers.rulesOnDisk(), expRulesOnDisk, 'rules on disk');
+
+        t.done();
+    });
+};
+
+
 // --- Teardown
 
 
-- 
2.21.0

