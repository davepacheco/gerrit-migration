commit 2567ceb56828e5fd48547989c9f354b637cdbe25 (refs/changes/29/3429/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2018-02-20T17:36:33-08:00 (1 year, 8 months ago)
    
    TRITON-158 archive test VMs on delete for node-sdc-clients' CNAPI tests

diff --git a/test/cnapi.test.js b/test/cnapi.test.js
index 36b996c..6c67a44 100644
--- a/test/cnapi.test.js
+++ b/test/cnapi.test.js
@@ -27,116 +27,6 @@ var testVmAlias = 'nodesdcclientstest-cnapi-' + testVmUuid.split('-')[0];
 var TASK = null;
 var CUSTOMER = process.env.UFDS_ADMIN_UUID;
 
-
-// --- Helpers
-
-function waitForVmState(t, cnapi, state, callback) {
-    var finished = false;
-    var error;
-
-    var timeout = setTimeout(function () {
-        if (finished) {
-            return;
-        }
-
-        if (error) {
-            callback(error);
-            return;
-        } else {
-            callback(new Error('timed out waiting on vm state'));
-            return;
-        }
-    }, 30000);
-
-    function check() {
-        cnapi.getVm(SERVER, testVmUuid, function (err, vm) {
-            error = err;
-            if (err) {
-                setTimeout(check, 3000);
-                return;
-            }
-            t.comment('test VM ' + testVmUuid + ' state: ' + vm.state);
-
-            if (vm.state === state) {
-                clearTimeout(timeout);
-                callback();
-                return;
-            }
-
-            setTimeout(check, 3000);
-        });
-    }
-
-    check();
-}
-
-function waitForTask(t, cnapi, callback) {
-    var finished = false;
-    var error;
-
-    var tasktimeout;
-
-    var timeout = setTimeout(function () {
-        clearTimeout(tasktimeout);
-        if (finished) {
-            return;
-        }
-
-        if (error) {
-            callback(error);
-            return;
-        } else {
-            callback(new Error('timed out waiting on task at '
-                + (new Date()).toISOString()));
-            return;
-        }
-    }, 50000);
-
-    function check() {
-        cnapi.getTask(TASK, function (err, task) {
-            error = err;
-            if (finished) {
-                return;
-            }
-            if (err) {
-                t.comment('CNAPI getTask err: ' + err.message);
-                if (err.message === 'no such task found') {
-                    setTimeout(check, 3000);
-                    return;
-                }
-                clearTimeout(timeout);
-                finished = true;
-                callback(err);
-                return;
-            }
-
-            t.comment('[' + (new Date()).toISOString() + '] CNAPI task '
-                + TASK + ' status: ' + task.status);
-
-            if (task.status == 'failure') {
-                clearTimeout(timeout);
-                finished = true;
-                callback(new Error(
-                    'Task failed ' + util.inspect(task, { depth: null })));
-                return;
-            }
-
-            if (task.status == 'complete') {
-                clearTimeout(timeout);
-                finished = true;
-                callback(null);
-                return;
-            }
-
-            tasktimeout = setTimeout(check, 3000);
-            return;
-        });
-    }
-
-    check();
-}
-
-
 // --- Tests
 
 test('cnapi', function (tt) {
@@ -233,24 +123,25 @@ test('cnapi', function (tt) {
         });
     });
 
-    tt.test(' wait for running', function (t) {
-        waitForTask(t, cnapi, function (err) {
-            t.ifError(err);
-            waitForVmState(t, cnapi, 'running', function (stateErr) {
-                t.ifError(stateErr);
-                t.end();
-            });
+    tt.test(' get task', function (t) {
+        cnapi.getTask(TASK, function onGetTask(getTaskErr, task) {
+            t.ifError(getTaskErr);
+            t.end();
         });
     });
 
-    tt.test(' get vm', function (t) {
-        setTimeout(function () {
-            cnapi.getVm(SERVER, testVmUuid, function (err, vm) {
-                t.ifError(err);
-                t.ok(vm);
+    tt.test(' wait for running', function (t) {
+        cnapi.waitTask(TASK, {}, function onTaskDone(taskErr, task) {
+            t.ifError(taskErr);
+            if (!taskErr) {
+                cnapi.getVm(SERVER, testVmUuid, function (getVmErr, vm) {
+                    t.ok(vm && vm.state === 'running', 'VM is running');
+                    t.end();
+                });
+            } else {
                 t.end();
-            });
-        }, 10000);
+            }
+        });
     });
 
     tt.test(' stop vm', function (t) {
@@ -263,71 +154,77 @@ test('cnapi', function (tt) {
     });
 
     tt.test(' wait for stopped', function (t) {
-        waitForTask(t, cnapi, function (err) {
-            t.ifError(err);
-            waitForVmState(t, cnapi, 'stopped', function (err2) {
-                t.ifError(err2);
+        cnapi.waitTask(TASK, {}, function onTaskDone(taskErr, task) {
+            t.ifError(taskErr);
+            if (!taskErr) {
+                cnapi.getVm(SERVER, testVmUuid, function (getVmErr, vm) {
+                    t.ok(vm && vm.state === 'stopped', 'VM is stopped');
+                    t.end();
+                });
+            } else {
                 t.end();
-            });
+            }
         });
     });
 
     tt.test(' start vm', function (t) {
-        setTimeout(function () {
-            cnapi.startVm(SERVER, testVmUuid, function (err, task) {
-                t.ifError(err);
-                t.ok(task);
-                TASK = task.id;
-                t.end();
-            });
-        }, 6000);
+        cnapi.startVm(SERVER, testVmUuid, function (err, task) {
+            t.ifError(err);
+            t.ok(task);
+            TASK = task.id;
+            t.end();
+        });
     });
 
-    tt.test(' wait for started', function (t) {
-        waitForTask(t, cnapi, function (err) {
-            t.ifError(err);
-            waitForVmState(t, cnapi, 'running', function (err2) {
-                t.ifError(err2);
+    tt.test(' wait for running', function (t) {
+        cnapi.waitTask(TASK, {}, function onTaskDone(taskErr, task) {
+            t.ifError(taskErr);
+            if (!taskErr) {
+                cnapi.getVm(SERVER, testVmUuid, function (getVmErr, vm) {
+                    t.ok(vm && vm.state === 'running', 'VM is running');
+                    t.end();
+                });
+            } else {
                 t.end();
-            });
+            }
         });
     });
 
     tt.test(' reboot vm', function (t) {
-        setTimeout(function () {
-            cnapi.rebootVm(SERVER, testVmUuid, function (err, task) {
-                t.ifError(err);
-                t.ok(task);
-                TASK = task.id;
-                t.end();
-            });
-        }, 6000);
+        cnapi.rebootVm(SERVER, testVmUuid, function (err, task) {
+            t.ifError(err);
+            t.ok(task);
+            TASK = task.id;
+            t.end();
+        });
     });
 
-    tt.test(' wait for reboot', function (t) {
-        waitForTask(t, cnapi, function (err) {
-            t.ifError(err);
-            waitForVmState(t, cnapi, 'running', function (err2) {
-                t.ifError(err2);
+    tt.test(' wait for running', function (t) {
+        cnapi.waitTask(TASK, {}, function onTaskDone(taskErr, task) {
+            t.ifError(taskErr);
+            if (!taskErr) {
+                cnapi.getVm(SERVER, testVmUuid, function (getVmErr, vm) {
+                    t.ok(vm && vm.state === 'running', 'VM is running');
+                    t.end();
+                });
+            } else {
                 t.end();
-            });
+            }
         });
     });
 
     tt.test(' delete vm', function (t) {
-        setTimeout(function () {
-            cnapi.deleteVm(SERVER, testVmUuid, function (err, task) {
-                t.ifError(err);
-                t.ok(task);
-                TASK = task.id;
-                t.end();
-            });
-        }, 3000);
+        cnapi.deleteVm(SERVER, testVmUuid, function (err, task) {
+            t.ifError(err);
+            t.ok(task);
+            TASK = task.id;
+            t.end();
+        });
     });
 
     tt.test(' wait for deleted', function (t) {
-        waitForTask(t, cnapi, function (err) {
-            t.ifError(err);
+        cnapi.waitTask(TASK, {}, function onTaskDone(taskErr, task) {
+            t.ifError(taskErr);
             t.end();
         });
     });
