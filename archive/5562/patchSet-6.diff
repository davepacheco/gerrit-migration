From a8ca5c75bb4dc883e2b37f3a3cc6f058ed3b4e09 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Thu, 28 Mar 2019 12:27:24 -0600
Subject: [PATCH] joyent/node-fast#23 Add support for updated crc package to
 improve interoperability

---
 .gitmodules                  |   4 +-
 bin/fastcall                 |   6 +-
 bin/fastserve                |   6 +-
 lib/fast.js                  |   4 +
 lib/fast_client.js           |  14 ++-
 lib/fast_protocol.js         | 134 ++++++++++++++++++----
 lib/fast_server.js           |  30 +++--
 package.json                 |   3 +-
 test/common.js               |  12 +-
 test/common/client.js        |  34 ++++--
 test/tst.client_generic.js   |  14 ++-
 test/tst.client_request.js   | 210 ++++++++++++++++++++++++++++++++---
 test/tst.protocol_decoder.js | 125 +++++++++++++++++++--
 test/tst.protocol_encoder.js |  28 ++++-
 14 files changed, 535 insertions(+), 89 deletions(-)

diff --git a/.gitmodules b/.gitmodules
index 401f01a..3cd4d83 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,3 @@
 [submodule "deps/catest"]
-	path = deps/catest
-	url = https://github.com/joyent/catest
+        path = deps/catest
+        url = https://github.com/joyent/catest
diff --git a/bin/fastcall b/bin/fastcall
index 42db0de..277caef 100755
--- a/bin/fastcall
+++ b/bin/fastcall
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -20,6 +20,7 @@ var mod_assertplus = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
 var mod_fast = require('../lib/fast_client');
+var mod_protocol = require('../lib/fast_protocol');
 var mod_getopt = require('posix-getopt');
 var mod_net = require('net');
 
@@ -153,7 +154,8 @@ function fastcall(args, callback)
 		fastconn = new mod_fast.FastClient({
 		    'log': log,
 		    'transport': conn,
-		    'nRecentRequests': 10
+		    'nRecentRequests': 10,
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V1
 		});
 
 		fastconn.on('error', function (err) {
diff --git a/bin/fastserve b/bin/fastserve
index 2eafbae..b38e0c3 100755
--- a/bin/fastserve
+++ b/bin/fastserve
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -21,6 +21,7 @@ var mod_cmdutil = require('cmdutil');
 var mod_getopt = require('posix-getopt');
 var mod_fastdemo = require('../lib/demo_server');
 var mod_fastserver = require('../lib/fast_server');
+var mod_protocol = require('../lib/fast_protocol');
 var mod_jsprim = require('jsprim');
 var mod_kang = require('kang');
 var mod_net = require('net');
@@ -136,7 +137,8 @@ function fastDemoServer(args)
 	fastserver = new mod_fastserver.FastServer({
 	    'log': log,
 	    'collector': collector,
-	    'server': sock
+	    'server': sock,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2
 	});
 
 	mod_fastdemo.demoRpcs().forEach(function (r) {
diff --git a/lib/fast.js b/lib/fast.js
index b28ef20..81dfec2 100644
--- a/lib/fast.js
+++ b/lib/fast.js
@@ -14,6 +14,10 @@
 
 var mod_client = require('./fast_client');
 var mod_server = require('./fast_server');
+var mod_protocol = require('./fast_protocol');
 
 exports.FastClient = mod_client.FastClient;
 exports.FastServer = mod_server.FastServer;
+exports.FAST_CHECKSUM_V1 = mod_protocol.FAST_CHECKSUM_V1;
+exports.FAST_CHECKSUM_V1_V2 = mod_protocol.FAST_CHECKSUM_V1_V2;
+exports.FAST_CHECKSUM_V2 = mod_protocol.FAST_CHECKSUM_V2;
diff --git a/lib/fast_client.js b/lib/fast_client.js
index f584918..3437c75 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -75,6 +75,9 @@ fastNclients = 0;
  *     			request failures.  The caller is also expected to listen
  *     			for these errors and handle reconnection appropriately.
  *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		For details see joyent/node-fast#23.
+ *
  * On 'error', the caller should assume that the current connection to the
  * server is in an undefined state and should not be used any more.  Any
  * in-flight RPC will be terminated gracefully (i.e., with an "error" or "end"
@@ -90,11 +93,14 @@ function FastClient(args)
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.number(args.nRecentRequests, 'args.nRecentRequests');
 	mod_assertplus.object(args.transport, 'args.transport');
+	mod_assertplus.optionalNumber(args.crc_mode, 'args.crc_mode');
 
 	this.fc_collector = args.collector;	/* metric collector */
 	this.fc_log = args.log;
 	this.fc_transport = args.transport;
 	this.fc_nrecent = args.nRecentRequests;
+	/* supported crc mode for joyent/node-fast#23 */
+	this.fast_crc_mode = args.crc_mode || mod_protocol.FAST_CHECKSUM_V1;
 
 	/* RPC and protocol state */
 	this.fc_pending = {}; 		/* pending requests */
@@ -116,7 +122,8 @@ function FastClient(args)
 	/* transport and message helper objects */
 	this.fc_transport_onerr = null;	/* error listener */
 	this.fc_msgencoder = new mod_protocol.FastMessageEncoder();
-	this.fc_msgdecoder = new mod_protocol.FastMessageDecoder();
+	this.fc_msgdecoder =
+	    new mod_protocol.FastMessageDecoder(this.fast_crc_mode);
 
 	/* transport state */
 	this.fc_detached = false;	 /* caller detached us */
@@ -248,7 +255,8 @@ FastClient.prototype.rpc = function (args)
 		    'name': args.rpcmethod
 		},
 		'd': args.rpcargs
-	    }
+	    },
+	    'crc_mode': this.fast_crc_mode
 	};
 
 	request.frq_log.debug({
diff --git a/lib/fast_protocol.js b/lib/fast_protocol.js
index d385c47..fd15521 100644
--- a/lib/fast_protocol.js
+++ b/lib/fast_protocol.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_crc = require('crc');
+var mod_old_crc = require('oldcrc');
 var mod_stream = require('stream');
 var mod_util = require('util');
 var VError = require('verror');
@@ -69,7 +70,19 @@ exports.FastMessageDecoder = FastMessageDecoder;
  *
  * Due to historical bugs in node-crc, the CRC implementation used in version 1
  * of the protocol is essentially incompatible with any CRC implementation other
- * than the one provided by node-crc version 0.x.
+ * than the one provided by node-crc version 0.x. The changes to address
+ * joyent/node-fast#23 were done to create a migration path for clients and
+ * servers off of the buggy version with minimal operational impact. Clients and
+ * servers may select a mode of operation where only the buggy CRC calculation
+ * is used or where only a correct version of the calculation is used.
+ * Additionally, servers may elect to operate in a mode where messages whose CRC
+ * is calculated with either the buggy or correct implementation are accepted.
+ * In this mode the server will use the same CRC calculation method in response
+ * messages to a client that the client used when encoding the message to
+ * transmit to the server. This allows for clients to be updated in a gradual
+ * manner to support the correct CRC calculation. The FAST_CHECKSUM_* constants
+ * in this file control the mode of operation with respet to the CRC calculation
+ * of clients and servers.
  */
 
 /*
@@ -120,6 +133,13 @@ var FP_VERSION_CURRENT     = FP_VERSION_1;
 exports.FP_VERSION_1       = FP_VERSION_1;
 exports.FP_VERSION_CURRENT = FP_VERSION_CURRENT;
 
+// These constants are facilitate an upgrade path from buggy node-crc@0.3.0
+var FAST_CHECKSUM_V1         = 0x1;
+var FAST_CHECKSUM_V1_V2      = 0x2;
+var FAST_CHECKSUM_V2         = 0x3;
+exports.FAST_CHECKSUM_V1     = FAST_CHECKSUM_V1;
+exports.FAST_CHECKSUM_V1_V2 = FAST_CHECKSUM_V1_V2;
+exports.FAST_CHECKSUM_V2     = FAST_CHECKSUM_V2;
 
 /*
  * Encode a logical message for sending over the wire.  This requires the
@@ -128,15 +148,18 @@ exports.FP_VERSION_CURRENT = FP_VERSION_CURRENT;
  *     msgid    (number) message identifier -- see lib/fast.js
  *
  *     data     (object) represents message contents.  At this level, this
- *			 can be any plain-old JavaScript object.
+ *                       can be any plain-old JavaScript object.
  *
  *     status   (number) message "status" (one of FP_STATUS_DATA, FP_STATUS_END,
- *			 or FP_STATUS_ERROR).
+ *                       or FP_STATUS_ERROR).
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		For details see joyent/node-fast#23.
  *
  * Failure to match these requirements is a programmer error that may result in
  * a synchronously thrown exception that should not be caught.
  */
-function fastMessageEncode(msg)
+function fastMessageEncode(msg, default_crc_mode)
 {
 	var buffer, data_encoded, datalen, crc16;
 
@@ -147,6 +170,7 @@ function fastMessageEncode(msg)
 	    'msg.msgid is not an integer between 0 and FP_MSGID_MAX');
 	mod_assertplus.object(msg.data, 'msg.data');
 	mod_assertplus.number(msg.status, 'msg.status');
+	mod_assertplus.optionalNumber(msg.crc_mode, 'msg.crc_mode');
 
 	switch (msg.status) {
 	case FP_STATUS_DATA:
@@ -158,7 +182,13 @@ function fastMessageEncode(msg)
 	}
 
 	data_encoded = JSON.stringify(msg.data);
-	crc16 = mod_crc.crc16(data_encoded);
+
+	var crc_mode = msg.crc_mode || default_crc_mode || FAST_CHECKSUM_V1;
+	if (crc_mode === FAST_CHECKSUM_V1) {
+		crc16 = mod_old_crc.crc16(data_encoded);
+	} else {
+		crc16 = mod_crc.crc16(data_encoded);
+	}
 	datalen = Buffer.byteLength(data_encoded);
 	buffer = new Buffer(FP_HEADER_SZ + datalen);
 	buffer.writeUInt8(FP_VERSION_CURRENT, FP_OFF_VERSION);
@@ -177,26 +207,71 @@ function fastMessageEncode(msg)
  * version, type, status, and msgid) at this point, but the data has not been
  * read, so the CRC has not been validated.
  */
-function fastMessageDecode(header, buffer)
+function fastMessageDecode(header, buffer, crc_mode)
 {
-	var datalen, datastr, json, calc;
+	var datalen, datastr, json, calc, calc_old, decoded_crc_mode;
 
 	mod_assertplus.number(header.datalen, 'header.datalen');
 	datalen = header.datalen;
 	mod_assertplus.equal(buffer.length, FP_OFF_DATA + datalen);
 	datastr = buffer.toString('utf8', FP_OFF_DATA);
-	calc = mod_crc.crc16(datastr);
 
-	if (calc != header.crc) {
-		return (new VError({
-		    'name': 'FastProtocolError',
-		    'info': {
-			'fastReason': 'bad_crc',
-			'crcCalculated': calc,
-			'crcExpected': header.crc
-		    }
-		}, 'fast protocol: expected CRC %s, found %s',
-		    header.crc, calc));
+	crc_mode = crc_mode || FAST_CHECKSUM_V1;
+	switch (crc_mode) {
+	case FAST_CHECKSUM_V1:
+		calc_old = mod_old_crc.crc16(datastr);
+		if (calc_old != header.crc) {
+			return (new VError({
+			    'name': 'FastProtocolError',
+			    'info': {
+				'fastReason': 'bad_crc',
+				'crcCalculated': calc_old,
+				'crcExpected': header.crc
+			    }
+			}, 'fast protocol: expected CRC %s, found %s',
+			    header.crc, calc_old));
+		}
+		decoded_crc_mode = FAST_CHECKSUM_V1;
+		break;
+	case FAST_CHECKSUM_V1_V2:
+		calc_old = mod_old_crc.crc16(datastr);
+		calc = mod_crc.crc16(datastr);
+
+		if (calc_old != header.crc && calc != header.crc) {
+			return (new VError({
+			    'name': 'FastProtocolError',
+			    'info': {
+				'fastReason': 'bad_crc',
+				'crcCalculated': calc,
+				'crcCalculatedOld': calc_old,
+				'crcExpected': header.crc
+			    }
+			}, 'fast protocol: expected CRC %s or %s, found %s',
+			    header.crc, calc, calc_old));
+		} else if (calc == header.crc) {
+			decoded_crc_mode = FAST_CHECKSUM_V2;
+		} else {
+			decoded_crc_mode = FAST_CHECKSUM_V1;
+		}
+		break;
+	case FAST_CHECKSUM_V2:
+		calc = mod_crc.crc16(datastr);
+		if (calc != header.crc) {
+			return (new VError({
+			    'name': 'FastProtocolError',
+			    'info': {
+				'fastReason': 'bad_crc',
+				'crcCalculated': calc,
+				'crcExpected': header.crc
+			    }
+			}, 'fast protocol: expected CRC %s, found %s',
+			    header.crc, calc));
+		}
+		decoded_crc_mode = FAST_CHECKSUM_V2;
+		break;
+	default:
+		mod_assertplus.fail('Encountered invalid CRC mode ' + crc_mode);
+		break;
 	}
 
 	try {
@@ -247,27 +322,33 @@ function fastMessageDecode(header, buffer)
 	return ({
 	    'status': header.status,
 	    'msgid': header.msgid,
-	    'data': json
+	    'data': json,
+	    'crc_mode': decoded_crc_mode
 	});
 }
 
 /*
  * Transform stream that takes logical messages and emits a buffer representing
  * that message (for sending over the wire).
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		For details see joyent/node-fast#23.
  */
-function FastMessageEncoder()
+function FastMessageEncoder(crc_mode)
 {
 	mod_stream.Transform.call(this, {
 	    'highWaterMark': 16,
 	    'objectMode': true
 	});
+
+	this.crc_mode = crc_mode;
 }
 
 mod_util.inherits(FastMessageEncoder, mod_stream.Transform);
 
 FastMessageEncoder.prototype._transform = function (chunk, _, callback)
 {
-	this.push(fastMessageEncode(chunk));
+	this.push(fastMessageEncode(chunk, this.crc_mode));
 	setImmediate(callback);
 };
 
@@ -275,8 +356,11 @@ FastMessageEncoder.prototype._transform = function (chunk, _, callback)
 /*
  * Transform stream that takes bytes (via Buffer objects) and emits an object
  * representing the encoded Fast message.
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		For details see joyent/node-fast#23.
  */
-function FastMessageDecoder()
+function FastMessageDecoder(crc_mode)
 {
 	mod_stream.Transform.call(this, {
 	    'objectMode': true
@@ -300,6 +384,8 @@ function FastMessageDecoder()
 	/* debug information */
 	this.md_nmessages = 0;
 	this.md_nbytes = 0;
+
+	this.crc_mode = crc_mode;
 }
 
 mod_util.inherits(FastMessageDecoder, mod_stream.Transform);
@@ -437,7 +523,7 @@ FastMessageDecoder.prototype.decode = function (callback)
 		    'msgid': this.md_msgid,
 		    'crc': this.md_crc,
 		    'datalen': this.md_datalen
-		}, buf);
+		}, buf, this.crc_mode);
 		if (msg instanceof Error) {
 			this.md_error = msg;
 			break;
diff --git a/lib/fast_server.js b/lib/fast_server.js
index 4cc50c0..668391b 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -174,6 +174,9 @@ fastNservers = 0;
  *
  *     collector	artedi-style metric collector
  *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		For details see joyent/node-fast#23.
+ *
  * Use the server by invoking the registerRpcMethod() method to register
  * handlers for named RPC methods.
  */
@@ -186,12 +189,15 @@ function FastServer(args)
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.object(args.server, 'args.server');
 	mod_assertplus.optionalObject(args.collector, 'args.collector');
+	mod_assertplus.optionalNumber(args.crc_mode, 'args.crc_mode');
 
 	this.fs_log = args.log;		/* logger */
 	this.fs_server = args.server;	/* server socket */
 	this.fs_collector = args.collector;		/* metric collector */
 	this.fs_handlers = {};		/* registered handlers, by name */
 	this.fs_conns = {};		/* active connections */
+	/* supported crc mode for joyent/node-fast#23 */
+	this.fast_crc_mode = args.crc_mode || mod_protocol.FAST_CHECKSUM_V1;
 	this.fs_msghandler = new FastMessageHandler({
 	    'server': this
 	});
@@ -321,6 +327,7 @@ FastServer.prototype.kangStats = function ()
 	rv['nRequestsStarted'] = this.fs_nrequests_started;
 	rv['nRequestsCompleted'] = this.fs_nrequests_completed;
 	rv['nRequestsFailed'] = this.fs_nrequests_failed;
+	rv['fastCRCMode'] = this.fast_crc_mode;
 	return (rv);
 };
 
@@ -447,7 +454,8 @@ FastServer.prototype.connCreate = function (sock)
 	fastconn = new FastRpcConnection({
 	    'connId': cid,
 	    'socket': sock,
-	    'log': this.fs_log
+	    'log': this.fs_log,
+	    'crc_mode': this.fast_crc_mode
 	});
 
 	this.fs_nconnections_created++;
@@ -1014,6 +1022,9 @@ function FastRpcHandler(args)
  *     socket	underlying socket for communicating with client
  *
  *     log      bunyan-style logger
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *              	For details see joyent/node-fast#23.
  */
 function FastRpcConnection(args)
 {
@@ -1021,6 +1032,7 @@ function FastRpcConnection(args)
 	mod_assertplus.ok(args.connId, 'args.connId');
 	mod_assertplus.object(args.socket, 'args.socket');
 	mod_assertplus.object(args.log, 'args.log');
+	mod_assertplus.number(args.crc_mode, 'args.crc_mode');
 
 	this.fc_connid = args.connId;	/* see above */
 	this.fc_socket = args.socket;	/* see above */
@@ -1038,6 +1050,7 @@ function FastRpcConnection(args)
 	this.fc_socket_error = null;	/* conn experienced socket error */
 	this.fc_server_error = null;	/* proto error or shutdown */
 	this.fc_draining = false;	/* waiting for connection to drain */
+	this.crc_mode = args.crc_mode;
 
 	/*
 	 * Messages written to fc_msgencoder are encoded and sent to the socket.
@@ -1058,7 +1071,7 @@ function FastRpcConnection(args)
 	 * (using the FastRpcConnectionDecoder transform stream) and then
 	 * emitted from fc_ckddecoder.
 	 */
-	this.fc_rawdecoder = new mod_protocol.FastMessageDecoder();
+	this.fc_rawdecoder = new mod_protocol.FastMessageDecoder(this.crc_mode);
 	this.fc_socket.pipe(this.fc_rawdecoder);
 	this.fc_ckddecoder = new FastRpcConnectionDecoder({ 'fastConn': this });
 	this.fc_rawdecoder.pipe(this.fc_ckddecoder);
@@ -1249,16 +1262,18 @@ FastRpcResponseEncoder.prototype._transform = function (obj, _, callback)
 
 	mod_assertplus.ok(typeof (obj) == 'object' && obj !== null,
 	    'can only send non-null objects');
+	var crc_mode = this.fse_request.fsr_message.crc_mode;
 	this.push(requestMakeMessage(this.fse_request,
-	    mod_protocol.FP_STATUS_DATA, [ obj ]));
+	    mod_protocol.FP_STATUS_DATA, [ obj ], crc_mode));
 	setImmediate(callback);
 };
 
 FastRpcResponseEncoder.prototype._flush = function (callback)
 {
 	if (this.fse_request.fsr_state == FR_S_RUNNING) {
+		var crc_mode = this.fse_request.fsr_message.crc_mode;
 		this.push(requestMakeMessage(this.fse_request,
-		    mod_protocol.FP_STATUS_END, null));
+		    mod_protocol.FP_STATUS_END, null, crc_mode));
 	}
 
 	setImmediate(callback);
@@ -1267,7 +1282,7 @@ FastRpcResponseEncoder.prototype._flush = function (callback)
 /*
  * Construct a Fast RPC message that's part of a response for the given request.
  */
-function requestMakeMessage(request, status, data)
+function requestMakeMessage(request, status, data, crc_mode)
 {
 	var datum;
 
@@ -1327,7 +1342,8 @@ function requestMakeMessage(request, status, data)
 		    'name': request.fsr_rpcmethod
 		},
 		'd': datum
-	    }
+	    },
+	    'crc_mode': crc_mode
 	});
 }
 
diff --git a/package.json b/package.json
index 099d849..7254f19 100644
--- a/package.json
+++ b/package.json
@@ -11,7 +11,8 @@
 		"assert-plus": "1.0.0",
 		"bunyan": "^1.7.1",
 		"cmdutil": "^1.0.0",
-		"crc": "0.3.0",
+		"crc": "3.4.4",
+		"oldcrc": "git://github.com/joyent/node-crc.git#0.3.0-oldcrc",
 		"extsprintf": "^1.3.0",
 		"jsprim": "^1.2.2",
 		"kang": "^1.1.0",
diff --git a/test/common.js b/test/common.js
index 6b3dea8..bb4f8f2 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -13,6 +13,7 @@
  */
 
 var mod_assertplus = require('assert-plus');
+var mod_old_crc = require('oldcrc');
 var mod_crc = require('crc');
 var mod_net = require('net');
 var mod_protocol = require('../lib/fast_protocol');
@@ -88,10 +89,15 @@ function makeBigObject(width, depth)
  * of invalid messages.  If you want to generate valid Fast messages, see the
  * MessageEncoder class.
  */
-function writeMessageForEncodedData(buf, msgid, status, dataenc, msgoffset)
+function writeMessageForEncodedData(buf, msgid, status, dataenc, msgoffset,
+    crc_mode)
 {
 	var crc, datalen;
-	crc = mod_crc.crc16(dataenc);
+	if (crc_mode && crc_mode === mod_protocol.FAST_CHECKSUM_V1) {
+		crc = mod_old_crc.crc16(dataenc);
+	} else {
+		crc = mod_crc.crc16(dataenc);
+	}
 	datalen = Buffer.byteLength(dataenc);
 
 	buf.writeUInt8(mod_protocol.FP_VERSION_1,
diff --git a/test/common/client.js b/test/common/client.js
index 7eee34e..1ee5584 100644
--- a/test/common/client.js
+++ b/test/common/client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -35,17 +35,30 @@ function ClientTestContext(args)
 	mod_assertplus.object(args.server);
 	mod_assertplus.object(args.log);
 	mod_assertplus.optionalObject(args.collector);
+	mod_assertplus.optionalNumber(args.client_crc_mode);
+	mod_assertplus.optionalNumber(args.server_decoder_crc_mode);
 
 	this.ctc_collector = args.collector; /* artedi collector */
 	this.ctc_log = args.log;		/* bunyan logger */
 	this.ctc_closed = false;		/* already cleaned up */
 
+	/*
+	 * Settings to test the CRC modes added to support transitioning off the
+	 * buggy node-crc@0.3.0 dependency.
+	 */
+	this.client_crc_mode = args.client_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+	this.server_decoder_crc_mode = args.server_decoder_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+	this.server_encoder_crc_mode = args.server_encoder_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+
 	/* server handles */
 	this.ctc_server = args.server;	/* server listening socket */
 	this.ctc_server_sock = null;	/* server-side connection to client */
-	this.ctc_server_message = null;	/* first message received by server */
-	this.ctc_server_decoder = null;	/* decoder piped from ctc_server_sock */
-	this.ctc_server_encoder = null;	/* encoder piped to ctc_server_sock */
+	this.ctc_server_message = null; /* first message received by server */
+	this.ctc_server_decoder = null; /* decoder piped from ctc_server_sock */
+	this.ctc_server_encoder = null; /* encoder piped to ctc_server_sock */
 
 	/* client handles */
 	this.ctc_client_sock = null;	/* client TCP socket */
@@ -70,7 +83,8 @@ ClientTestContext.prototype.establishConnection = function ()
 	    'collector': this.ctc_collector,
 	    'log': this.ctc_log.child({ 'component': 'FastClient' }),
 	    'nRecentRequests': 100,
-	    'transport': this.ctc_client_sock
+	    'transport': this.ctc_client_sock,
+	    'crc_mode': this.client_crc_mode
 	});
 
 	this.ctc_fastclient.on('error', function (err) {
@@ -88,8 +102,10 @@ ClientTestContext.prototype.establishConnection = function ()
 		sock.pipe(self.ctc_server_decoder);
 	});
 
-	this.ctc_server_encoder = new mod_protocol.FastMessageEncoder();
-	this.ctc_server_decoder = new mod_protocol.FastMessageDecoder();
+	this.ctc_server_encoder =
+	    new mod_protocol.FastMessageEncoder(this.server_encoder_crc_mode);
+	this.ctc_server_decoder =
+	    new mod_protocol.FastMessageDecoder(this.server_decoder_crc_mode);
 };
 
 /*
@@ -145,7 +161,7 @@ ClientTestContext.prototype.serverReply = function (message, options)
 };
 
 /*
- * Direct the client to execute an RPC request.  Returns a ClientTestRequest,
+ * Direct the client to execute an RPC request.	 Returns a ClientTestRequest,
  * which keeps track of events emitted on the request.
  */
 ClientTestContext.prototype.makeRequest = function (callback)
@@ -201,7 +217,7 @@ ClientTestContext.prototype.makeRequestWithOptions =
 };
 
 /*
- * Clean up the client and server connections.  This does not close the
+ * Clean up the client and server connections.	This does not close the
  * listening socket.
  */
 ClientTestContext.prototype.cleanup = function ()
diff --git a/test/tst.client_generic.js b/test/tst.client_generic.js
index 3ac94e5..33f989c 100644
--- a/test/tst.client_generic.js
+++ b/test/tst.client_generic.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -124,7 +124,8 @@ function runDuplicateResponseTest(ctc, firstIsError, secondStatus, callback)
 		    'status': secondStatus,
 		    'data': secondStatus === mod_protocol.FP_STATUS_ERROR ?
 			mod_testcommon.dummyResponseError :
-			mod_testcommon.dummyResponseData
+			mod_testcommon.dummyResponseData,
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 
 		/*
@@ -183,7 +184,8 @@ function runClientFailureTest(ctc, doFail, callback)
 			ctc.ctc_server_encoder.write({
 			    'msgid': message.msgid,
 			    'status': mod_protocol.FP_STATUS_DATA,
-			    'data': mod_testcommon.dummyResponseData
+			    'data': mod_testcommon.dummyResponseData,
+			    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 			});
 		});
 	    },
@@ -336,7 +338,8 @@ var test_cases = [ {
 	ctc.ctc_server_encoder.end({
 	    'msgid': 0x7,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
 
 	ctc.ctc_fastclient.on('error', function (err) {
@@ -363,7 +366,8 @@ var test_cases = [ {
 		ctc.ctc_server_encoder.end({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_END,
-		    'data': { 'd': [ true, null, 7 ] }
+		    'data': { 'd': [ true, null, 7 ] },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	});
 
diff --git a/test/tst.client_request.js b/test/tst.client_request.js
index ef0f70e..6485e5c 100644
--- a/test/tst.client_request.js
+++ b/test/tst.client_request.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -80,11 +80,16 @@ function runTestCase(testcase, callback)
 		service: 'tst.client_request'
 	}});
 
+	var client_crc_mode = testcase.client_crc_mode;
+	var server_decoder_crc_mode = testcase.server_decoder_crc_mode;
+
 	console.log('test case: %s', testcase.name);
 	ctc = new mod_testclient.ClientTestContext({
 	    'collector': collector,
 	    'server': serverSocket,
-	    'log': testLog.child({ 'testcase': testcase['name'] })
+	    'log': testLog.child({ 'testcase': testcase['name'] }),
+	    'client_crc_mode': client_crc_mode,
+	    'server_decoder_crc_mode': server_decoder_crc_mode
 	});
 
 	ctc.establishConnection();
@@ -94,6 +99,11 @@ function runTestCase(testcase, callback)
 		    ctc.ctc_server_encoder, ctc.ctc_server_decoder);
 	});
 
+	ctc.ctc_server_decoder.on('error', function (err) {
+		testcase['serverReply'](ctc.ctc_server_sock, err,
+		    ctc.ctc_server_encoder, ctc.ctc_server_decoder);
+	});
+
 	ctr = ctc.makeRequest(function () {
 		if (testcase.hasOwnProperty('artediPromCheck')) {
 			/*
@@ -178,9 +188,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': mod_testcommon.dummyResponseEndEmpty
+	    'data': mod_testcommon.dummyResponseEndEmpty,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -203,14 +216,17 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': i == nmessages - 1 ?
-		        mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_END :
 			mod_protocol.FP_STATUS_DATA,
-		    'data': { 'd': d }
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end();
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -229,9 +245,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -251,16 +270,20 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_DATA,
-		    'data': mod_testcommon.dummyResponseData
+		    'data': mod_testcommon.dummyResponseData,
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -288,16 +311,19 @@ var mockResponders = [ {
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
 	    'data': {
-	        'd': {
+		'd': {
 		    'name': 'DummyError',
 		    'message': 'a dummy message',
 		    'someOtherProp': 'bogus',
 		    'context': 'abc123',
 		    'ase_errors': [ 'foobar' ]
 		}
-	    }
+	    },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var error;
 
@@ -322,6 +348,8 @@ var mockResponders = [ {
     'serverReply': function (socket, message, encoder) {
 	socket.end();
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -341,6 +369,8 @@ var mockResponders = [ {
 	buf.writeUInt8(mod_protocol.FP_VERSION_1, mod_protocol.FP_OFF_VERSION);
 	socket.end(buf);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -359,9 +389,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_DATA,
-	    'data': mod_testcommon.dummyResponseData
+	    'data': mod_testcommon.dummyResponseData,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -382,9 +415,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': 47,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': mod_testcommon.dummyResponseData
+	    'data': mod_testcommon.dummyResponseData,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -407,9 +443,12 @@ var mockResponders = [ {
 	 */
 	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + 1);
 	mod_testcommon.writeMessageForEncodedData(
-	    buf, 3, mod_protocol.FP_STATUS_END, '{', 0);
+	    buf, 3, mod_protocol.FP_STATUS_END, '{', 0,
+	    mod_protocol.FAST_CHECKSUM_V2);
 	socket.end(buf);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -428,9 +467,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': { 'd': {} }
+	    'data': { 'd': {} },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -454,16 +496,20 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_DATA,
-		    'data': { 'd': [ 'string_' + i ] }
+		    'data': { 'd': [ 'string_' + i ] },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': [ 'lastmessage' ] }
+	    'data': { 'd': [ 'lastmessage' ] },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -493,9 +539,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': d }
+	    'data': { 'd': d },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -517,7 +566,8 @@ var mockResponders = [ {
 	encoder.write({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': d }
+	    'data': { 'd': d },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
 
 	encoder.end();
@@ -532,6 +582,8 @@ var mockResponders = [ {
 	    'fast_client_requests_completed{rpcMethod="testmethod",' +
 		'service="tst.client_request"} 1') !== -1);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -539,6 +591,128 @@ var mockResponders = [ {
 	mod_assertplus.deepEqual(data, ['hello world']);
     }
 
+}, {
+    'name': 'ok, client uses new crc encoding, server accepts old and new',
+    'serverReply': function (socket, message, encoder) {
+	var nmessages, i, j, d;
+
+	assertNormalRequest(message);
+	nmessages = 5;
+	for (i = 0; i < nmessages; i++) {
+		d = [];
+		for (j = 0; j < i; j++) {
+			d.push('string ' + i + '_' + j);
+		}
+		encoder.write({
+		    'msgid': message.msgid,
+		    'status': i == nmessages - 1 ?
+			mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_DATA,
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
+		});
+	}
+
+	encoder.end();
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request === null);
+	mod_assertplus.deepEqual(data, [
+	    'string 1_0', 'string 2_0', 'string 2_1', 'string 3_0',
+	    'string 3_1', 'string 3_2', 'string 4_0', 'string 4_1',
+	    'string 4_2', 'string 4_3'
+	]);
+    }
+
+}, {
+    'name': 'ok, client uses old crc encoding, server accepts old and new',
+    'serverReply': function (socket, message, encoder) {
+	var nmessages, i, j, d;
+
+	assertNormalRequest(message);
+	nmessages = 5;
+	for (i = 0; i < nmessages; i++) {
+		d = [];
+		for (j = 0; j < i; j++) {
+			d.push('string ' + i + '_' + j);
+		}
+		encoder.write({
+		    'msgid': message.msgid,
+		    'status': i == nmessages - 1 ?
+			mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_DATA,
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V1
+		});
+	}
+
+	encoder.end();
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request === null);
+	mod_assertplus.deepEqual(data, [
+	    'string 1_0', 'string 2_0', 'string 2_1', 'string 3_0',
+	    'string 3_1', 'string 3_2', 'string 4_0', 'string 4_1',
+	    'string 4_2', 'string 4_3'
+	]);
+    }
+
+}, {
+    'name': 'error, client uses old crc encoding, server accepts only new',
+    'serverReply': function (socket, message, encoder) {
+	encoder.end({
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_ERROR,
+	    'data': { 'd': message },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
+	});
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client !== null);
+	mod_assertplus.ok(errors.request !== null);
+	mod_assertplus.equal(data.length, 0);
+
+	mod_assertplus.equal(errors.client.name, 'FastProtocolError');
+	mod_assertplus.ok(/fast protocol: expected CRC/.test(
+	    errors.client.message));
+	mod_testcommon.assertRequestError(errors.request, errors.client);
+    }
+
+}, {
+    'name': 'error, client uses new crc encoding, server accepts only old',
+    'serverReply': function (socket, message, encoder) {
+	encoder.end({
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_ERROR,
+	    'data': { 'd': message },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V1
+	});
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client !== null);
+	mod_assertplus.ok(errors.request !== null);
+	mod_assertplus.equal(data.length, 0);
+
+	mod_assertplus.equal(errors.client.name, 'FastProtocolError');
+	mod_assertplus.ok(/fast protocol: expected CRC/.test(
+	    errors.client.message));
+	mod_testcommon.assertRequestError(errors.request, errors.client);
+    }
+
 } ];
 
 /*
diff --git a/test/tst.protocol_decoder.js b/test/tst.protocol_decoder.js
index 2436c78..a88c3a0 100644
--- a/test/tst.protocol_decoder.js
+++ b/test/tst.protocol_decoder.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_cmdutil = require('cmdutil');
+var mod_old_crc = require('oldcrc');
 var mod_crc = require('crc');
 var mod_extsprintf = require('extsprintf');
 var mod_path = require('path');
@@ -45,7 +46,8 @@ function main()
 
 function runTestCase(testcase, callback)
 {
-	var decoder = new mod_protocol.FastMessageDecoder();
+	var crc_mode = testcase['crc_mode'] || mod_protocol.FAST_CHECKSUM_V2;
+	var decoder = new mod_protocol.FastMessageDecoder(crc_mode);
 	var data = [];
 	var error = null;
 
@@ -71,6 +73,7 @@ function runTestCase(testcase, callback)
 
 var sample_object = { 'd': [ { 'hello': 'world' } ] };
 var sample_data = JSON.stringify(sample_object);
+var sample_old_crc = mod_old_crc.crc16(sample_data);
 var sample_crc = mod_crc.crc16(sample_data);
 
 var sample_error = { 'd': { 'name': 'AnError', 'message': 'boom!' } };
@@ -78,9 +81,90 @@ var sample_error = { 'd': { 'name': 'AnError', 'message': 'boom!' } };
 /* This object winds up being about 28MB encoded as JSON. */
 var big_object = { 'd': [ mod_testcommon.makeBigObject(10, 6) ] };
 var big_data = JSON.stringify(big_object);
-var big_crc = mod_crc.crc16(big_data);
+var big_crc = mod_old_crc.crc16(big_data);
 
 test_cases = [ {
+    'name': 'basic DATA message (old CRC calculaton)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_old_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
+    'name': 'basic DATA message (old CRC calculation, dual CRC mode)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_old_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
+    'name': 'basic DATA message (decoder in dual CRC mode)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
     'name': 'basic DATA message',
     'input': function () {
 	/*
@@ -99,6 +183,7 @@ test_cases = [ {
 	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
 	return (buf);
     },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'check': function (error, data) {
 	mod_assertplus.ok(error === null);
 	mod_assertplus.equal(data.length, 1);
@@ -134,10 +219,11 @@ test_cases = [ {
 }, {
     'name': 'DATA message with maximum msgid',
     'input': function () {
-	var buf = makeSampleMessage();
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V2);
 	buf.writeUInt32BE(mod_protocol.FP_MSGID_MAX, mod_protocol.FP_OFF_MSGID);
 	return (buf);
     },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'check': function (error, data) {
 	mod_assertplus.ok(error === null);
 	mod_assertplus.equal(data.length, 1);
@@ -330,9 +416,9 @@ test_cases = [ {
 	mod_assertplus.equal(VError.info(error).foundMsgid, 2147483648);
     }
 }, {
-    'name': 'bad CRC',
+    'name': 'bad CRC 1',
     'input': function () {
-	var buf = makeSampleMessage();
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V2);
 	mod_assertplus.ok(
 	    buf.readUInt32BE(mod_protocol.FP_OFF_CRC) != 0xdeadbeef);
 	buf.writeUInt32BE(0xdeadbeef, mod_protocol.FP_OFF_CRC);
@@ -347,6 +433,25 @@ test_cases = [ {
 	mod_assertplus.equal(VError.info(error).crcCalculated, sample_crc);
 	mod_assertplus.equal(VError.info(error).crcExpected, 0xdeadbeef);
     }
+}, {
+    'name': 'bad CRC 2',
+    'input': function () {
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V1);
+	mod_assertplus.ok(
+	    buf.readUInt32BE(mod_protocol.FP_OFF_CRC) != 0xdeadbeef);
+	buf.writeUInt32BE(0xdeadbeef, mod_protocol.FP_OFF_CRC);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'check': function (error, data) {
+	mod_assertplus.equal(data.length, 0);
+	mod_assertplus.ok(error instanceof Error);
+	mod_assertplus.equal(error.name, 'FastProtocolError');
+	mod_assertplus.ok(/expected CRC 3735928559, found/.test(error.message));
+	mod_assertplus.equal(VError.info(error).fastReason, 'bad_crc');
+	mod_assertplus.equal(VError.info(error).crcCalculated, sample_old_crc);
+	mod_assertplus.equal(VError.info(error).crcExpected, 0xdeadbeef);
+    }
 }, {
     'name': 'bad: DATA message with non-array data.d',
     'input': function () {
@@ -538,13 +643,13 @@ test_cases = [ {
     }
 } ];
 
-function makeSampleMessage()
+function makeSampleMessage(crc_mode)
 {
 	return (makeMessageForData(mod_protocol.FP_MSGID_MAX,
-	    mod_protocol.FP_STATUS_DATA, sample_object));
+	    mod_protocol.FP_STATUS_DATA, sample_object, crc_mode));
 }
 
-function makeMessageForData(msgid, status, data)
+function makeMessageForData(msgid, status, data, crc_mode)
 {
 	var datalen, dataenc, buf;
 
@@ -554,7 +659,7 @@ function makeMessageForData(msgid, status, data)
 	datalen = Buffer.byteLength(dataenc);
 	buf = new Buffer(mod_protocol.FP_HEADER_SZ + datalen);
 	mod_testcommon.writeMessageForEncodedData(
-	    buf, msgid, status, dataenc, 0);
+	    buf, msgid, status, dataenc, 0, crc_mode);
 	return (buf);
 }
 
diff --git a/test/tst.protocol_encoder.js b/test/tst.protocol_encoder.js
index 7646e09..36d4bb4 100644
--- a/test/tst.protocol_encoder.js
+++ b/test/tst.protocol_encoder.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -35,10 +35,27 @@ function main()
 	bigdataval = JSON.stringify(bigdata);
 	printf('%d bytes (stringified)\n', bigdataval.length);
 
-	test_cases.forEach(runTestCase);
+	test_cases.map(useOldCrc).forEach(runTestCase);
+	test_cases.map(useNewCrc).forEach(runTestCase);
+	test_cases.map(useOldNewCrc).forEach(runTestCase);
 	printf('%s tests passed\n', mod_path.basename(__filename));
 }
 
+function useOldCrc(testCase) {
+	testCase.input.crc_mode = mod_protocol.FAST_CHECKSUM_V1;
+	return (testCase);
+}
+
+function useNewCrc(testCase) {
+	testCase.input.crc_mode = mod_protocol.FAST_CHECKSUM_V2;
+	return (testCase);
+}
+
+function useOldNewCrc(testCase) {
+	testCase.input.crc_mode = mod_protocol.FAST_CHECKSUM_V1_V2;
+	return (testCase);
+}
+
 test_cases = [ {
     'name': 'basic data message',
     'input': {
@@ -53,7 +70,11 @@ test_cases = [ {
 	mod_assertplus.equal(parsed.pm_data.toString('utf8'), expected);
 	mod_assertplus.equal(parsed.pm_msgid, 1);
 	mod_assertplus.equal(parsed.pm_status, mod_protocol.FP_STATUS_DATA);
-	mod_assertplus.equal(parsed.pm_crc, 10980);
+	if (parsed.pm_crc_mode === mod_protocol.FAST_CHECKSUM_V1) {
+		mod_assertplus.equal(parsed.pm_crc, 10980);
+	} else {
+		mod_assertplus.equal(parsed.pm_crc, 7500);
+	}
     }
 }, {
     'name': 'large data message',
@@ -253,6 +274,7 @@ function runTestCase(testcase)
 		parsed.pm_msgid =
 		    outbuf.readUInt32BE(mod_protocol.FP_OFF_MSGID);
 		parsed.pm_crc = outbuf.readUInt32BE(mod_protocol.FP_OFF_CRC);
+		parsed.pm_crc_mode = testcase.input.crc_mode;
 
 		mod_assertplus.ok(parsed.pm_status > 0 &&
 		    parsed.pm_status <= 0x3);
-- 
2.21.0

