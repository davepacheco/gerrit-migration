From e7ea83e13bcb822c21c262ec99d405c23ddd9118 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Wed, 24 Apr 2019 14:37:03 -0600
Subject: [PATCH] joyent/node-fast#23 Add support for updated crc package to
 improve interoperability

---
 .gitmodules                             |  10 +-
 Makefile                                |   3 +-
 bin/fastbench                           |  33 ++-
 bin/fastcall                            |  45 ++-
 bin/fastserve                           |  38 ++-
 deps/javascriptlint                     |   1 +
 deps/jsstyle                            |   1 +
 lib/fast.js                             |   4 +
 lib/fast_client.js                      |  23 +-
 lib/fast_protocol.js                    | 212 ++++++++++++--
 lib/fast_server.js                      |  40 ++-
 package.json                            |   3 +-
 test/common.js                          |  12 +-
 test/common/client.js                   |  34 ++-
 test/tst.client_generic.js              |  14 +-
 test/tst.client_request.js              | 210 ++++++++++++--
 test/tst.crc_mode.js                    | 370 ++++++++++++++++++++++++
 test/tst.protocol_decoder.js            | 125 +++++++-
 test/tst.protocol_encoder.js            |  22 +-
 tools/mk/Makefile.deps                  |  54 ++++
 Makefile.targ => tools/mk/Makefile.targ |  35 ++-
 21 files changed, 1172 insertions(+), 117 deletions(-)
 create mode 160000 deps/javascriptlint
 create mode 160000 deps/jsstyle
 create mode 100644 test/tst.crc_mode.js
 create mode 100644 tools/mk/Makefile.deps
 rename Makefile.targ => tools/mk/Makefile.targ (90%)

diff --git a/.gitmodules b/.gitmodules
index 401f01a..1dd4087 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,9 @@
 [submodule "deps/catest"]
-	path = deps/catest
-	url = https://github.com/joyent/catest
+        path = deps/catest
+        url = https://github.com/joyent/catest
+[submodule "deps/jsstyle"]
+        path = deps/jsstyle
+        url = https://github.com/davepacheco/jsstyle.git
+[submodule "deps/javascriptlint"]
+        path = deps/javascriptlint
+        url = https://github.com/davepacheco/javascriptlint.git
diff --git a/Makefile b/Makefile
index 98e361a..52b049a 100644
--- a/Makefile
+++ b/Makefile
@@ -46,5 +46,6 @@ test: | $(CATEST)
 
 $(CATEST): deps/catest/.git
 
-include ./Makefile.targ
+include ./tools/mk/Makefile.deps
+include ./tools/mk/Makefile.targ
 include ./test/compat/Makefile.compat.targ
diff --git a/bin/fastbench b/bin/fastbench
index 9d54ab6..3e7cac4 100755
--- a/bin/fastbench
+++ b/bin/fastbench
@@ -44,6 +44,8 @@ var fbDflReportingInterval = 5;
 var fbDflKangPort = 16520;
 /* default port for artedi server */
 var fbDflArtediPort = 16521;
+/* default CRC compatibility mode */
+var crcMode = mod_fast.FAST_CHECKSUM_V2;
 
 /*
  * The Big Theory Statement in lib/fast_server.js explains that completing N
@@ -74,10 +76,12 @@ function fbUsageMessage()
 		fbDflConcurrency + ')',
 	    '    -d | --duration NSECONDS     Stop after NSECONDS seconds.',
 	    '    -i | --interval NSECONDS     Report every NSECONDS seconds.',
-	    '    -k | --kang-port PORT         Use PORT for kang endpoint.',
+	    '    -k | --kang-port PORT        Use PORT for kang endpoint.',
 	    '    -n | --nrequests NREQUESTS   Stop after completing ' +
 		'NREQUESTS requests.',
-	    '    -p | --artedi-port PORT       Use PORT for metrics endpoint.',
+	    '    -p | --artedi-port PORT      Use PORT for metrics endpoint.',
+	    '    -m | --crc-mode MODE         Optional CRC compatibility mode.',
+	    '                                 One of: v1 or v2. Default: v2.',
 	    ''
 	].join('\n');
 
@@ -97,7 +101,8 @@ function main()
 	    'fbReportingInterval': fbDflReportingInterval * 1000,
 	    'fbConcurrency': fbDflConcurrency,
 	    'fbArtediPort': fbDflArtediPort,
-	    'fbKangPort': fbDflKangPort
+	    'fbKangPort': fbDflKangPort,
+	    'crcMode': crcMode
 	};
 
 	mod_cmdutil.configure({
@@ -109,7 +114,7 @@ function main()
 
 	parser = new mod_getopt.BasicParser(
 	    'c:(count)d:(duration)i:(interval)n:(nrequests)' +
-		'p:(artedi-port)k:(kang-port)',
+		'p:(artedi-port)k:(kang-port)m:(crc-mode)',
 	     process.argv);
 	while ((option = parser.getopt()) !== undefined) {
 		switch (option.option) {
@@ -138,6 +143,10 @@ function main()
 			config.fbKangPort = parseOptInt(option, 1);
 			break;
 
+		case 'm':
+			config.crcMode = parseOptCrcMode(option);
+			break;
+
 		default:
 			/* error message already emitted */
 			mod_assertplus.equal('?', option.option);
@@ -190,6 +199,19 @@ function parseOptInt(option, min)
 	return (v);
 }
 
+function parseOptCrcMode(option)
+{
+	if (option.optarg !== 'v1' && option.optarg !== 'v2') {
+		mod_cmdutil.usage('invalid CRC mode: %s', option.optarg);
+		return (-1);
+
+	} else if (option.optarg === 'v1') {
+		return (mod_fast.FAST_CHECKSUM_V1);
+	} else {
+		return (mod_fast.FAST_CHECKSUM_V2);
+	}
+}
+
 function fastbench(config)
 {
 	var collector;
@@ -237,7 +259,8 @@ function fastbench(config)
 			    'collector': collector,
 			    'log': log,
 			    'transport': csock,
-			    'nRecentRequests': 5
+			    'nRecentRequests': 5,
+			    'crc_mode': config.crcMode
 			});
 
 			bencher.fb_fastclients.push(fastclient);
diff --git a/bin/fastcall b/bin/fastcall
index 42db0de..116ca1f 100755
--- a/bin/fastcall
+++ b/bin/fastcall
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -19,15 +19,16 @@ var VError = require('verror');
 var mod_assertplus = require('assert-plus');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
-var mod_fast = require('../lib/fast_client');
+var mod_fast = require('../lib/fast');
 var mod_getopt = require('posix-getopt');
 var mod_net = require('net');
 
 var OPTS = {
 	'a': 'abandon the RPC request after issuing it ' +
-		'via FastClientRequest#abandon',
+	    'via FastClientRequest#abandon',
 	'c': 'do not close the socket used to talk ' +
-		'to the FastServer until SIGINT'
+	    'to the FastServer until SIGINT',
+	'm': 'optional CRC compatibility mode. One of: v1 or v2. Default: v2.'
 };
 
 function main()
@@ -38,22 +39,26 @@ function main()
 	var timeout = null;
 
 	mod_cmdutil.configure({
-	    'synopses': [ '[OPTIONS] HOST PORT METHOD ARGS' ],
+	    'synopses': [ '[OPTIONS] HOST PORT METHOD ARGS [CRC_MODE]' ],
 	    'usageMessage': [
 		'    OPTIONS',
 		'        -a,--abandon-immediately   ' + OPTS['a'],
 		'        -c,--leave-conn-open       ' + OPTS['c'],
-	        '    HOST     DNS name or IP address for remote server',
+		'        -m,--crc-mode              ' + OPTS['m'],
+		'    HOST     DNS name or IP address for remote server',
 		'    PORT     TCP port for remote server',
 		'    METHOD   Name of remote RPC method call',
 		'    ARGS     JSON-encoded arguments for RPC method call'
+
 	    ].join('\n')
 	});
 	mod_cmdutil.exitOnEpipe();
 
+	var crcMode = mod_fast.FAST_CHECKSUM_V2;
+
 	var option;
 	var parser = new mod_getopt.BasicParser('a(abandon-immediately)' +
-	    'c(leave-conn-open)', process.argv);
+	    'c(leave-conn-open)m:(crc-mode)', process.argv);
 	while ((option = parser.getopt()) !== undefined) {
 		switch (option.option) {
 			case 'c':
@@ -62,6 +67,9 @@ function main()
 			case 'a':
 				doabandon = true;
 				break;
+			case 'm':
+				crcMode = parseOptCrcMode(option);
+				break;
 			default:
 				mod_assertplus.equal('?', option.option);
 				mod_cmdutil.usage();
@@ -98,7 +106,8 @@ function main()
 	    'rpcargs': rpcargs,
 	    'timeout': timeout,
 	    'abandonImmediately': doabandon,
-	    'leaveConnOpen': leaveconnopen
+	    'leaveConnOpen': leaveconnopen,
+	    'crc_mode': crcMode
 	}, function (err, result) {
 		if (err) {
 			mod_cmdutil.warn(err);
@@ -106,10 +115,23 @@ function main()
 	});
 }
 
+function parseOptCrcMode(option)
+{
+	if (option.optarg !== 'v1' && option.optarg !== 'v2') {
+		mod_cmdutil.usage('invalid CRC mode: %s', option.optarg);
+		return (-1);
+
+	} else if (option.optarg === 'v1') {
+		return (mod_fast.FAST_CHECKSUM_V1);
+	} else {
+		return (mod_fast.FAST_CHECKSUM_V2);
+	}
+}
+
 function fastcall(args, callback)
 {
 	var log, conn;
-	var rpcmethod, rpcargs, timeout, doabandon, leaveconnopen;
+	var rpcmethod, rpcargs, timeout, doabandon, leaveconnopen, crc_mode;
 
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.string(args.host, 'args.host');
@@ -119,12 +141,14 @@ function fastcall(args, callback)
 	mod_assertplus.array(args.rpcargs, 'args.rpcargs');
 	mod_assertplus.bool(args.abandonImmediately, 'args.abandonImmediately');
 	mod_assertplus.bool(args.leaveConnOpen, 'args.leaveConnOpen');
+	mod_assertplus.number(args.crc_mode, 'args.crc_mode');
 
 	rpcmethod = args.rpcmethod;
 	rpcargs = args.rpcargs;
 	timeout = args.timeout;
 	doabandon = args.abandonImmediately;
 	leaveconnopen = args.leaveConnOpen;
+	crc_mode = args.crc_mode;
 
 	log = new mod_bunyan({
 	    'name': 'fastcall',
@@ -153,7 +177,8 @@ function fastcall(args, callback)
 		fastconn = new mod_fast.FastClient({
 		    'log': log,
 		    'transport': conn,
-		    'nRecentRequests': 10
+		    'nRecentRequests': 10,
+		    'crc_mode': crc_mode
 		});
 
 		fastconn.on('error', function (err) {
diff --git a/bin/fastserve b/bin/fastserve
index 2eafbae..c94b765 100755
--- a/bin/fastserve
+++ b/bin/fastserve
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -20,7 +20,7 @@ var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
 var mod_getopt = require('posix-getopt');
 var mod_fastdemo = require('../lib/demo_server');
-var mod_fastserver = require('../lib/fast_server');
+var mod_fast = require('../lib/fast');
 var mod_jsprim = require('jsprim');
 var mod_kang = require('kang');
 var mod_net = require('net');
@@ -31,7 +31,9 @@ var mod_util = require('util');
 var OPTS = {
     '-p,--port': 'fast RPC listening port(default: 2030)',
     '-m,--mon-port': 'monitoring server listening port (default: port+800)',
-    '-q,--quiesce': 'enable quiesce (default: false)'
+    '-q,--quiesce': 'enable quiesce (default: false)',
+    '-c,--crc-mode': 'CRC compatibility mode. One of: v1, v2, or v1_v2 ' +
+	'(default: v1_v2).'
 };
 
 /* construct the usage message */
@@ -47,7 +49,8 @@ function main()
 	/* default configuration values - monitorPort is set later */
 	var config = {
 	    'quiesce': false,
-	    'fastPort': 2030
+	    'fastPort': 2030,
+	    'crcMode': mod_fast.FAST_CHECKSUM_V1_V2
 	};
 
 	mod_cmdutil.configure({
@@ -57,7 +60,7 @@ function main()
 	mod_cmdutil.exitOnEpipe();
 
 	var parser = new mod_getopt.BasicParser('p:(port)m:(mon-port)' +
-	    'q(quiesce)', process.argv);
+	    'q(quiesce)c:(crc-mode)', process.argv);
 	while ((option = parser.getopt()) !== undefined) {
 		switch (option.option) {
 			case 'q':
@@ -71,6 +74,9 @@ function main()
 				config.monitorPort =
 				    mod_jsprim.parseInteger(option.optarg);
 				break;
+			case 'c':
+				config.crcMode = parseOptCrcMode(option);
+				break;
 			default:
 				mod_assertplus.equal('?', option.option);
 				mod_cmdutil.usage();
@@ -110,6 +116,22 @@ function main()
 	fastDemoServer(config);
 }
 
+function parseOptCrcMode(option)
+{
+	if (option.optarg !== 'v1' &&
+	    option.optarg !== 'v2' &&
+	    option.optarg !== 'v1_v2') {
+		mod_cmdutil.usage('invalid CRC mode: ' + option.optarg);
+		return (-1);
+	} else if (option.optarg === 'v1') {
+		return (mod_fast.FAST_CHECKSUM_V1);
+	} else if (option.optarg === 'v2') {
+		return (mod_fast.FAST_CHECKSUM_V2);
+	} else {
+		return (mod_fast.FAST_CHECKSUM_V1_V2);
+	}
+}
+
 function fastDemoServer(args)
 {
 	var fastPort, log, sock, collector, fastserver;
@@ -119,6 +141,7 @@ function fastDemoServer(args)
 	mod_assertplus.number(args.fastPort, 'args.fastPort');
 	mod_assertplus.number(args.monitorPort, 'args.monitorPort');
 	mod_assertplus.bool(args.quiesce, 'args.quiesce');
+	mod_assertplus.number(args.crcMode, 'args.crcMode');
 
 	collector = mod_artedi.createCollector({
 	    'labels': {
@@ -133,10 +156,11 @@ function fastDemoServer(args)
 
 	log.info('starting fast server');
 	sock = mod_net.createServer({ 'allowHalfOpen': true });
-	fastserver = new mod_fastserver.FastServer({
+	fastserver = new mod_fast.FastServer({
 	    'log': log,
 	    'collector': collector,
-	    'server': sock
+	    'server': sock,
+	    'crc_mode': args.crcMode
 	});
 
 	mod_fastdemo.demoRpcs().forEach(function (r) {
diff --git a/deps/javascriptlint b/deps/javascriptlint
new file mode 160000
index 0000000..ad52812
--- /dev/null
+++ b/deps/javascriptlint
@@ -0,0 +1 @@
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..52dc973
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/lib/fast.js b/lib/fast.js
index b28ef20..81dfec2 100644
--- a/lib/fast.js
+++ b/lib/fast.js
@@ -14,6 +14,10 @@
 
 var mod_client = require('./fast_client');
 var mod_server = require('./fast_server');
+var mod_protocol = require('./fast_protocol');
 
 exports.FastClient = mod_client.FastClient;
 exports.FastServer = mod_server.FastServer;
+exports.FAST_CHECKSUM_V1 = mod_protocol.FAST_CHECKSUM_V1;
+exports.FAST_CHECKSUM_V1_V2 = mod_protocol.FAST_CHECKSUM_V1_V2;
+exports.FAST_CHECKSUM_V2 = mod_protocol.FAST_CHECKSUM_V2;
diff --git a/lib/fast_client.js b/lib/fast_client.js
index f584918..d4d3736 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -75,6 +75,12 @@ fastNclients = 0;
  *     			request failures.  The caller is also expected to listen
  *     			for these errors and handle reconnection appropriately.
  *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the fast_protocol module documentation for more
+ *                      details. The valid values for a FastClient are
+ *                      FAST_CHECKSUM_V1 and FAST_CHECKSUM_V2.
+ *                      FAST_CHECKSUM_V1_V2 is only valid for FastServers.
+ *
  * On 'error', the caller should assume that the current connection to the
  * server is in an undefined state and should not be used any more.  Any
  * in-flight RPC will be terminated gracefully (i.e., with an "error" or "end"
@@ -90,11 +96,20 @@ function FastClient(args)
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.number(args.nRecentRequests, 'args.nRecentRequests');
 	mod_assertplus.object(args.transport, 'args.transport');
+	mod_assertplus.optionalNumber(args.crc_mode, 'args.crc_mode');
+
+	if (args.crc_mode && args.crc_mode !== mod_protocol.FAST_CHECKSUM_V1 &&
+	    args.crc_mode !== mod_protocol.FAST_CHECKSUM_V2) {
+		mod_assertplus.fail('encountered invalid CRC mode ' +
+		    args.crc_mode);
+	}
 
 	this.fc_collector = args.collector;	/* metric collector */
 	this.fc_log = args.log;
 	this.fc_transport = args.transport;
 	this.fc_nrecent = args.nRecentRequests;
+	/* supported crc mode for joyent/node-fast#23 */
+	this.fast_crc_mode = args.crc_mode || mod_protocol.FAST_CHECKSUM_V1;
 
 	/* RPC and protocol state */
 	this.fc_pending = {}; 		/* pending requests */
@@ -116,7 +131,8 @@ function FastClient(args)
 	/* transport and message helper objects */
 	this.fc_transport_onerr = null;	/* error listener */
 	this.fc_msgencoder = new mod_protocol.FastMessageEncoder();
-	this.fc_msgdecoder = new mod_protocol.FastMessageDecoder();
+	this.fc_msgdecoder =
+	    new mod_protocol.FastMessageDecoder(this.fast_crc_mode);
 
 	/* transport state */
 	this.fc_detached = false;	 /* caller detached us */
@@ -248,7 +264,8 @@ FastClient.prototype.rpc = function (args)
 		    'name': args.rpcmethod
 		},
 		'd': args.rpcargs
-	    }
+	    },
+	    'crc_mode': this.fast_crc_mode
 	};
 
 	request.frq_log.debug({
diff --git a/lib/fast_protocol.js b/lib/fast_protocol.js
index d385c47..4766621 100644
--- a/lib/fast_protocol.js
+++ b/lib/fast_protocol.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,8 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_crc = require('crc');
+var mod_extsprintf = require('extsprintf');
+var mod_old_crc = require('oldcrc');
 var mod_stream = require('stream');
 var mod_util = require('util');
 var VError = require('verror');
@@ -69,7 +71,24 @@ exports.FastMessageDecoder = FastMessageDecoder;
  *
  * Due to historical bugs in node-crc, the CRC implementation used in version 1
  * of the protocol is essentially incompatible with any CRC implementation other
- * than the one provided by node-crc version 0.x.
+ * than the one provided by node-crc version 0.x. The changes to address this
+ * incompatibility (originally recorded on Github as joyent/node-fast#23) were
+ * done to create a migration path for clients and servers off of the buggy
+ * version with minimal operational impact. Clients and servers may select a
+ * mode of operation where only the buggy CRC calculation is used or where only
+ * a correct version of the calculation is used. Additionally, servers may elect
+ * to operate in a mode where messages whose CRC is calculated with either the
+ * buggy or correct implementation are accepted. In this mode the server will
+ * use the same CRC calculation method in response messages to a client that the
+ * client used when encoding the message to transmit to the server. This allows
+ * for clients to be updated in a gradual manner to support the correct CRC
+ * calculation. The FAST_CHECKSUM_* constants in this file control the mode of
+ * operation with respect to the CRC calculation of clients and servers. This
+ * mechanism can be reused in the event of other such library incompatibilities.
+ * This mechanism is not intended or required for normal version upgrades to the
+ * CRC library dependency where there is no change in the result produced by one
+ * of the CRC calculation methods used by node-fast (crc16 is currently the only
+ * one used).
  */
 
 /*
@@ -120,6 +139,13 @@ var FP_VERSION_CURRENT     = FP_VERSION_1;
 exports.FP_VERSION_1       = FP_VERSION_1;
 exports.FP_VERSION_CURRENT = FP_VERSION_CURRENT;
 
+// These constants are facilitate an upgrade path from buggy node-crc@0.3.0
+var FAST_CHECKSUM_V1         = 0x1;
+var FAST_CHECKSUM_V1_V2      = 0x2;
+var FAST_CHECKSUM_V2         = 0x3;
+exports.FAST_CHECKSUM_V1     = FAST_CHECKSUM_V1;
+exports.FAST_CHECKSUM_V1_V2  = FAST_CHECKSUM_V1_V2;
+exports.FAST_CHECKSUM_V2     = FAST_CHECKSUM_V2;
 
 /*
  * Encode a logical message for sending over the wire.  This requires the
@@ -128,15 +154,23 @@ exports.FP_VERSION_CURRENT = FP_VERSION_CURRENT;
  *     msgid    (number) message identifier -- see lib/fast.js
  *
  *     data     (object) represents message contents.  At this level, this
- *			 can be any plain-old JavaScript object.
+ *                       can be any plain-old JavaScript object.
  *
  *     status   (number) message "status" (one of FP_STATUS_DATA, FP_STATUS_END,
- *			 or FP_STATUS_ERROR).
+ *                       or FP_STATUS_ERROR).
  *
  * Failure to match these requirements is a programmer error that may result in
  * a synchronously thrown exception that should not be caught.
+ *
+ * Additionally, the following property may be present:
+ *
+ *     crc_mode	(number) CRC compatibility mode. Used to transition off buggy
+ *                       node-crc version. The valid values are FAST_CHECKSUM_V1
+ *                       or FAST_CHECKSUM_V2. Any other value results in a
+ *                       thrown exception. See the comments at the beginning of
+ *                       this module for more details about this property.
  */
-function fastMessageEncode(msg)
+function fastMessageEncode(msg, default_crc_mode)
 {
 	var buffer, data_encoded, datalen, crc16;
 
@@ -147,6 +181,13 @@ function fastMessageEncode(msg)
 	    'msg.msgid is not an integer between 0 and FP_MSGID_MAX');
 	mod_assertplus.object(msg.data, 'msg.data');
 	mod_assertplus.number(msg.status, 'msg.status');
+	mod_assertplus.optionalNumber(msg.crc_mode, 'msg.crc_mode');
+
+	if (default_crc_mode && default_crc_mode !== FAST_CHECKSUM_V1 &&
+	    default_crc_mode !== FAST_CHECKSUM_V2) {
+		mod_assertplus.fail('encountered invalid CRC mode ' +
+		    default_crc_mode);
+	}
 
 	switch (msg.status) {
 	case FP_STATUS_DATA:
@@ -158,7 +199,17 @@ function fastMessageEncode(msg)
 	}
 
 	data_encoded = JSON.stringify(msg.data);
-	crc16 = mod_crc.crc16(data_encoded);
+
+	var crc_mode = msg.crc_mode || default_crc_mode || FAST_CHECKSUM_V1;
+	if (crc_mode === FAST_CHECKSUM_V1) {
+		crc16 = mod_old_crc.crc16(data_encoded);
+	} else if (crc_mode === FAST_CHECKSUM_V2) {
+		crc16 = mod_crc.crc16(data_encoded);
+	} else {
+		throw (new VError('fastMessageEncode: unsupported CRC mode: ' +
+		    crc_mode));
+	}
+
 	datalen = Buffer.byteLength(data_encoded);
 	buffer = new Buffer(FP_HEADER_SZ + datalen);
 	buffer.writeUInt8(FP_VERSION_CURRENT, FP_OFF_VERSION);
@@ -171,32 +222,132 @@ function fastMessageEncode(msg)
 	return (buffer);
 }
 
+/*
+ * Validate the message CRC based on the CRC compatibility mode. Returns an
+ * object that contains the decoded CRC mode if the validation is successful
+ * or an error if the validation fails.
+ *
+ *     crcMode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the comments at the top of this module for more
+ *                      details.
+ *     headerCrc        The CRC provided in the Fast message header.
+ *     data             The string representation of the Fast message data.
+ */
+function validateCrc(crcMode, headerCrc, data) {
+	var decodedCrcMode, error, v1CalculatedCrc, v2CalculatedCrc;
+
+	switch (crcMode) {
+	case FAST_CHECKSUM_V1:
+		v1CalculatedCrc = mod_old_crc.crc16(data);
+		if (v1CalculatedCrc !== headerCrc) {
+			error = crcValidationError(crcMode, headerCrc,
+			    v1CalculatedCrc, undefined);
+		}
+		break;
+	case FAST_CHECKSUM_V1_V2:
+		v1CalculatedCrc = mod_old_crc.crc16(data);
+		v2CalculatedCrc = mod_crc.crc16(data);
+
+		if (v1CalculatedCrc !== headerCrc &&
+		    v2CalculatedCrc !== headerCrc) {
+			error = crcValidationError(crcMode, headerCrc,
+			    v1CalculatedCrc, v2CalculatedCrc);
+		} else if (v2CalculatedCrc === headerCrc) {
+			decodedCrcMode = FAST_CHECKSUM_V2;
+		} else {
+			decodedCrcMode = FAST_CHECKSUM_V1;
+		}
+		break;
+	case FAST_CHECKSUM_V2:
+		v2CalculatedCrc = mod_crc.crc16(data);
+		if (v2CalculatedCrc !== headerCrc) {
+			error = crcValidationError(crcMode, headerCrc,
+			    undefined, v2CalculatedCrc);
+		}
+		decodedCrcMode = FAST_CHECKSUM_V2;
+		break;
+	default:
+		mod_assertplus.fail('encountered invalid CRC mode ' + crcMode);
+		break;
+	}
+
+	return ({ decodedCrcMode: decodedCrcMode, error: error});
+}
+
+/*
+ * Return a Verror with details about a CRC validation failure based on the CRC
+ * compatibility mode.
+ *
+ *     crcMode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the comments at the top of this module for more
+ *                      details.
+ *     headerCrc        The CRC provided in the Fast message header.
+ *     v1CalculatedCrc  The calculated CRC for the FAST_CHECKSUM_V1 CRC mode.
+ *                      May be undefined if the CRC mode is set to
+ *                      FAST_CHECKSUM_V2.
+ *     v2CalculatedCrc  The calculated CRC for the FAST_CHECKSUM_V2 CRC mode.
+ *                      May be undefined if the CRC mode is set to
+ *                      FAST_CHECKSUM_V1.
+ */
+function crcValidationError(crcMode, headerCrc, v1CalculatedCrc,
+    v2CalculatedCrc) {
+	var errorObj = {
+	    'name': 'FastProtocolError',
+	    'info': {
+		'fastReason': 'bad_crc',
+		'crcExpected': headerCrc
+	    }
+	};
+	var errorStr = mod_extsprintf.sprintf('fast protocol: expected CRC ' +
+	    '%s, found ', headerCrc);
+	var crcStr = '';
+
+	switch (crcMode) {
+	case FAST_CHECKSUM_V1:
+		errorObj.info.crcCalculated = v1CalculatedCrc;
+		crcStr = mod_extsprintf.sprintf('%s', v1CalculatedCrc);
+		break;
+	case FAST_CHECKSUM_V1_V2:
+		errorObj.info.crcCalculatedV1 = v1CalculatedCrc;
+		errorObj.info.crcCalculatedV2 = v2CalculatedCrc;
+		crcStr = mod_extsprintf.sprintf('%s or %s', v1CalculatedCrc,
+		    v2CalculatedCrc);
+		break;
+	case FAST_CHECKSUM_V2:
+		errorObj.info.crcCalculated = v2CalculatedCrc;
+		crcStr = mod_extsprintf.sprintf('%s', v2CalculatedCrc);
+		break;
+	default:
+		break;
+	}
+
+	errorStr += crcStr;
+	return (new VError(errorObj, errorStr));
+}
+
 /*
  * Decode a fast message from a buffer that's known to contain a single,
  * well-formed message.  All of the protocol fields are known to be valid (e.g.,
  * version, type, status, and msgid) at this point, but the data has not been
  * read, so the CRC has not been validated.
  */
-function fastMessageDecode(header, buffer)
+function fastMessageDecode(header, buffer, crcMode)
 {
-	var datalen, datastr, json, calc;
+	var datalen, datastr, json, decodedCrcMode;
 
 	mod_assertplus.number(header.datalen, 'header.datalen');
 	datalen = header.datalen;
 	mod_assertplus.equal(buffer.length, FP_OFF_DATA + datalen);
 	datastr = buffer.toString('utf8', FP_OFF_DATA);
-	calc = mod_crc.crc16(datastr);
 
-	if (calc != header.crc) {
-		return (new VError({
-		    'name': 'FastProtocolError',
-		    'info': {
-			'fastReason': 'bad_crc',
-			'crcCalculated': calc,
-			'crcExpected': header.crc
-		    }
-		}, 'fast protocol: expected CRC %s, found %s',
-		    header.crc, calc));
+	crcMode = crcMode || FAST_CHECKSUM_V1;
+
+	var crcValidationResult = validateCrc(crcMode, header.crc, datastr);
+
+	if (crcValidationResult && crcValidationResult.error) {
+		return (crcValidationResult.error);
+	} else {
+		decodedCrcMode = crcValidationResult.decodedCrcMode;
 	}
 
 	try {
@@ -247,27 +398,34 @@ function fastMessageDecode(header, buffer)
 	return ({
 	    'status': header.status,
 	    'msgid': header.msgid,
-	    'data': json
+	    'data': json,
+	    'crc_mode': decodedCrcMode
 	});
 }
 
 /*
  * Transform stream that takes logical messages and emits a buffer representing
  * that message (for sending over the wire).
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the comments at the top of this module for more
+ *                      details.
  */
-function FastMessageEncoder()
+function FastMessageEncoder(crc_mode)
 {
 	mod_stream.Transform.call(this, {
 	    'highWaterMark': 16,
 	    'objectMode': true
 	});
+
+	this.crc_mode = crc_mode;
 }
 
 mod_util.inherits(FastMessageEncoder, mod_stream.Transform);
 
 FastMessageEncoder.prototype._transform = function (chunk, _, callback)
 {
-	this.push(fastMessageEncode(chunk));
+	this.push(fastMessageEncode(chunk, this.crc_mode));
 	setImmediate(callback);
 };
 
@@ -275,8 +433,12 @@ FastMessageEncoder.prototype._transform = function (chunk, _, callback)
 /*
  * Transform stream that takes bytes (via Buffer objects) and emits an object
  * representing the encoded Fast message.
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the comments at the top of this module for more
+ *                      details.
  */
-function FastMessageDecoder()
+function FastMessageDecoder(crc_mode)
 {
 	mod_stream.Transform.call(this, {
 	    'objectMode': true
@@ -300,6 +462,8 @@ function FastMessageDecoder()
 	/* debug information */
 	this.md_nmessages = 0;
 	this.md_nbytes = 0;
+
+	this.crc_mode = crc_mode;
 }
 
 mod_util.inherits(FastMessageDecoder, mod_stream.Transform);
@@ -437,7 +601,7 @@ FastMessageDecoder.prototype.decode = function (callback)
 		    'msgid': this.md_msgid,
 		    'crc': this.md_crc,
 		    'datalen': this.md_datalen
-		}, buf);
+		}, buf, this.crc_mode);
 		if (msg instanceof Error) {
 			this.md_error = msg;
 			break;
diff --git a/lib/fast_server.js b/lib/fast_server.js
index 4cc50c0..06b5672 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -174,6 +174,12 @@ fastNservers = 0;
  *
  *     collector	artedi-style metric collector
  *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *             		See the fast_protocol module documentation for more
+ *                      details. The valid values for a FastServer are
+ *                      FAST_CHECKSUM_V1, FAST_CHECKSUM_V2, and
+ *                      FAST_CHECKSUM_V1_V2.
+ *
  * Use the server by invoking the registerRpcMethod() method to register
  * handlers for named RPC methods.
  */
@@ -186,12 +192,22 @@ function FastServer(args)
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.object(args.server, 'args.server');
 	mod_assertplus.optionalObject(args.collector, 'args.collector');
+	mod_assertplus.optionalNumber(args.crc_mode, 'args.crc_mode');
+
+	if (args.crc_mode && args.crc_mode !== mod_protocol.FAST_CHECKSUM_V1 &&
+	    args.crc_mode !== mod_protocol.FAST_CHECKSUM_V2 &&
+	    args.crc_mode !== mod_protocol.FAST_CHECKSUM_V1_V2) {
+		mod_assertplus.fail('encountered invalid CRC mode ' +
+		    args.crc_mode);
+	}
 
 	this.fs_log = args.log;		/* logger */
 	this.fs_server = args.server;	/* server socket */
 	this.fs_collector = args.collector;		/* metric collector */
 	this.fs_handlers = {};		/* registered handlers, by name */
 	this.fs_conns = {};		/* active connections */
+	/* supported crc mode for joyent/node-fast#23 */
+	this.fast_crc_mode = args.crc_mode || mod_protocol.FAST_CHECKSUM_V1;
 	this.fs_msghandler = new FastMessageHandler({
 	    'server': this
 	});
@@ -321,6 +337,7 @@ FastServer.prototype.kangStats = function ()
 	rv['nRequestsStarted'] = this.fs_nrequests_started;
 	rv['nRequestsCompleted'] = this.fs_nrequests_completed;
 	rv['nRequestsFailed'] = this.fs_nrequests_failed;
+	rv['fastCRCMode'] = this.fast_crc_mode;
 	return (rv);
 };
 
@@ -447,7 +464,8 @@ FastServer.prototype.connCreate = function (sock)
 	fastconn = new FastRpcConnection({
 	    'connId': cid,
 	    'socket': sock,
-	    'log': this.fs_log
+	    'log': this.fs_log,
+	    'crc_mode': this.fast_crc_mode
 	});
 
 	this.fs_nconnections_created++;
@@ -1014,6 +1032,9 @@ function FastRpcHandler(args)
  *     socket	underlying socket for communicating with client
  *
  *     log      bunyan-style logger
+ *
+ *     crc_mode		CRC mode. Used to transition off buggy node-crc version.
+ *              	For details see joyent/node-fast#23.
  */
 function FastRpcConnection(args)
 {
@@ -1021,6 +1042,7 @@ function FastRpcConnection(args)
 	mod_assertplus.ok(args.connId, 'args.connId');
 	mod_assertplus.object(args.socket, 'args.socket');
 	mod_assertplus.object(args.log, 'args.log');
+	mod_assertplus.number(args.crc_mode, 'args.crc_mode');
 
 	this.fc_connid = args.connId;	/* see above */
 	this.fc_socket = args.socket;	/* see above */
@@ -1038,6 +1060,7 @@ function FastRpcConnection(args)
 	this.fc_socket_error = null;	/* conn experienced socket error */
 	this.fc_server_error = null;	/* proto error or shutdown */
 	this.fc_draining = false;	/* waiting for connection to drain */
+	this.crc_mode = args.crc_mode;
 
 	/*
 	 * Messages written to fc_msgencoder are encoded and sent to the socket.
@@ -1058,7 +1081,7 @@ function FastRpcConnection(args)
 	 * (using the FastRpcConnectionDecoder transform stream) and then
 	 * emitted from fc_ckddecoder.
 	 */
-	this.fc_rawdecoder = new mod_protocol.FastMessageDecoder();
+	this.fc_rawdecoder = new mod_protocol.FastMessageDecoder(this.crc_mode);
 	this.fc_socket.pipe(this.fc_rawdecoder);
 	this.fc_ckddecoder = new FastRpcConnectionDecoder({ 'fastConn': this });
 	this.fc_rawdecoder.pipe(this.fc_ckddecoder);
@@ -1249,16 +1272,18 @@ FastRpcResponseEncoder.prototype._transform = function (obj, _, callback)
 
 	mod_assertplus.ok(typeof (obj) == 'object' && obj !== null,
 	    'can only send non-null objects');
+	var crc_mode = this.fse_request.fsr_message.crc_mode;
 	this.push(requestMakeMessage(this.fse_request,
-	    mod_protocol.FP_STATUS_DATA, [ obj ]));
+	    mod_protocol.FP_STATUS_DATA, [ obj ], crc_mode));
 	setImmediate(callback);
 };
 
 FastRpcResponseEncoder.prototype._flush = function (callback)
 {
 	if (this.fse_request.fsr_state == FR_S_RUNNING) {
+		var crc_mode = this.fse_request.fsr_message.crc_mode;
 		this.push(requestMakeMessage(this.fse_request,
-		    mod_protocol.FP_STATUS_END, null));
+		    mod_protocol.FP_STATUS_END, null, crc_mode));
 	}
 
 	setImmediate(callback);
@@ -1267,7 +1292,7 @@ FastRpcResponseEncoder.prototype._flush = function (callback)
 /*
  * Construct a Fast RPC message that's part of a response for the given request.
  */
-function requestMakeMessage(request, status, data)
+function requestMakeMessage(request, status, data, crc_mode)
 {
 	var datum;
 
@@ -1327,7 +1352,8 @@ function requestMakeMessage(request, status, data)
 		    'name': request.fsr_rpcmethod
 		},
 		'd': datum
-	    }
+	    },
+	    'crc_mode': crc_mode
 	});
 }
 
diff --git a/package.json b/package.json
index 099d849..7254f19 100644
--- a/package.json
+++ b/package.json
@@ -11,7 +11,8 @@
 		"assert-plus": "1.0.0",
 		"bunyan": "^1.7.1",
 		"cmdutil": "^1.0.0",
-		"crc": "0.3.0",
+		"crc": "3.4.4",
+		"oldcrc": "git://github.com/joyent/node-crc.git#0.3.0-oldcrc",
 		"extsprintf": "^1.3.0",
 		"jsprim": "^1.2.2",
 		"kang": "^1.1.0",
diff --git a/test/common.js b/test/common.js
index 6b3dea8..bb4f8f2 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -13,6 +13,7 @@
  */
 
 var mod_assertplus = require('assert-plus');
+var mod_old_crc = require('oldcrc');
 var mod_crc = require('crc');
 var mod_net = require('net');
 var mod_protocol = require('../lib/fast_protocol');
@@ -88,10 +89,15 @@ function makeBigObject(width, depth)
  * of invalid messages.  If you want to generate valid Fast messages, see the
  * MessageEncoder class.
  */
-function writeMessageForEncodedData(buf, msgid, status, dataenc, msgoffset)
+function writeMessageForEncodedData(buf, msgid, status, dataenc, msgoffset,
+    crc_mode)
 {
 	var crc, datalen;
-	crc = mod_crc.crc16(dataenc);
+	if (crc_mode && crc_mode === mod_protocol.FAST_CHECKSUM_V1) {
+		crc = mod_old_crc.crc16(dataenc);
+	} else {
+		crc = mod_crc.crc16(dataenc);
+	}
 	datalen = Buffer.byteLength(dataenc);
 
 	buf.writeUInt8(mod_protocol.FP_VERSION_1,
diff --git a/test/common/client.js b/test/common/client.js
index 7eee34e..1ee5584 100644
--- a/test/common/client.js
+++ b/test/common/client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -35,17 +35,30 @@ function ClientTestContext(args)
 	mod_assertplus.object(args.server);
 	mod_assertplus.object(args.log);
 	mod_assertplus.optionalObject(args.collector);
+	mod_assertplus.optionalNumber(args.client_crc_mode);
+	mod_assertplus.optionalNumber(args.server_decoder_crc_mode);
 
 	this.ctc_collector = args.collector; /* artedi collector */
 	this.ctc_log = args.log;		/* bunyan logger */
 	this.ctc_closed = false;		/* already cleaned up */
 
+	/*
+	 * Settings to test the CRC modes added to support transitioning off the
+	 * buggy node-crc@0.3.0 dependency.
+	 */
+	this.client_crc_mode = args.client_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+	this.server_decoder_crc_mode = args.server_decoder_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+	this.server_encoder_crc_mode = args.server_encoder_crc_mode ||
+	    mod_protocol.FAST_CHECKSUM_V2;
+
 	/* server handles */
 	this.ctc_server = args.server;	/* server listening socket */
 	this.ctc_server_sock = null;	/* server-side connection to client */
-	this.ctc_server_message = null;	/* first message received by server */
-	this.ctc_server_decoder = null;	/* decoder piped from ctc_server_sock */
-	this.ctc_server_encoder = null;	/* encoder piped to ctc_server_sock */
+	this.ctc_server_message = null; /* first message received by server */
+	this.ctc_server_decoder = null; /* decoder piped from ctc_server_sock */
+	this.ctc_server_encoder = null; /* encoder piped to ctc_server_sock */
 
 	/* client handles */
 	this.ctc_client_sock = null;	/* client TCP socket */
@@ -70,7 +83,8 @@ ClientTestContext.prototype.establishConnection = function ()
 	    'collector': this.ctc_collector,
 	    'log': this.ctc_log.child({ 'component': 'FastClient' }),
 	    'nRecentRequests': 100,
-	    'transport': this.ctc_client_sock
+	    'transport': this.ctc_client_sock,
+	    'crc_mode': this.client_crc_mode
 	});
 
 	this.ctc_fastclient.on('error', function (err) {
@@ -88,8 +102,10 @@ ClientTestContext.prototype.establishConnection = function ()
 		sock.pipe(self.ctc_server_decoder);
 	});
 
-	this.ctc_server_encoder = new mod_protocol.FastMessageEncoder();
-	this.ctc_server_decoder = new mod_protocol.FastMessageDecoder();
+	this.ctc_server_encoder =
+	    new mod_protocol.FastMessageEncoder(this.server_encoder_crc_mode);
+	this.ctc_server_decoder =
+	    new mod_protocol.FastMessageDecoder(this.server_decoder_crc_mode);
 };
 
 /*
@@ -145,7 +161,7 @@ ClientTestContext.prototype.serverReply = function (message, options)
 };
 
 /*
- * Direct the client to execute an RPC request.  Returns a ClientTestRequest,
+ * Direct the client to execute an RPC request.	 Returns a ClientTestRequest,
  * which keeps track of events emitted on the request.
  */
 ClientTestContext.prototype.makeRequest = function (callback)
@@ -201,7 +217,7 @@ ClientTestContext.prototype.makeRequestWithOptions =
 };
 
 /*
- * Clean up the client and server connections.  This does not close the
+ * Clean up the client and server connections.	This does not close the
  * listening socket.
  */
 ClientTestContext.prototype.cleanup = function ()
diff --git a/test/tst.client_generic.js b/test/tst.client_generic.js
index 3ac94e5..33f989c 100644
--- a/test/tst.client_generic.js
+++ b/test/tst.client_generic.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -124,7 +124,8 @@ function runDuplicateResponseTest(ctc, firstIsError, secondStatus, callback)
 		    'status': secondStatus,
 		    'data': secondStatus === mod_protocol.FP_STATUS_ERROR ?
 			mod_testcommon.dummyResponseError :
-			mod_testcommon.dummyResponseData
+			mod_testcommon.dummyResponseData,
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 
 		/*
@@ -183,7 +184,8 @@ function runClientFailureTest(ctc, doFail, callback)
 			ctc.ctc_server_encoder.write({
 			    'msgid': message.msgid,
 			    'status': mod_protocol.FP_STATUS_DATA,
-			    'data': mod_testcommon.dummyResponseData
+			    'data': mod_testcommon.dummyResponseData,
+			    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 			});
 		});
 	    },
@@ -336,7 +338,8 @@ var test_cases = [ {
 	ctc.ctc_server_encoder.end({
 	    'msgid': 0x7,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
 
 	ctc.ctc_fastclient.on('error', function (err) {
@@ -363,7 +366,8 @@ var test_cases = [ {
 		ctc.ctc_server_encoder.end({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_END,
-		    'data': { 'd': [ true, null, 7 ] }
+		    'data': { 'd': [ true, null, 7 ] },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	});
 
diff --git a/test/tst.client_request.js b/test/tst.client_request.js
index ef0f70e..6485e5c 100644
--- a/test/tst.client_request.js
+++ b/test/tst.client_request.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -80,11 +80,16 @@ function runTestCase(testcase, callback)
 		service: 'tst.client_request'
 	}});
 
+	var client_crc_mode = testcase.client_crc_mode;
+	var server_decoder_crc_mode = testcase.server_decoder_crc_mode;
+
 	console.log('test case: %s', testcase.name);
 	ctc = new mod_testclient.ClientTestContext({
 	    'collector': collector,
 	    'server': serverSocket,
-	    'log': testLog.child({ 'testcase': testcase['name'] })
+	    'log': testLog.child({ 'testcase': testcase['name'] }),
+	    'client_crc_mode': client_crc_mode,
+	    'server_decoder_crc_mode': server_decoder_crc_mode
 	});
 
 	ctc.establishConnection();
@@ -94,6 +99,11 @@ function runTestCase(testcase, callback)
 		    ctc.ctc_server_encoder, ctc.ctc_server_decoder);
 	});
 
+	ctc.ctc_server_decoder.on('error', function (err) {
+		testcase['serverReply'](ctc.ctc_server_sock, err,
+		    ctc.ctc_server_encoder, ctc.ctc_server_decoder);
+	});
+
 	ctr = ctc.makeRequest(function () {
 		if (testcase.hasOwnProperty('artediPromCheck')) {
 			/*
@@ -178,9 +188,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': mod_testcommon.dummyResponseEndEmpty
+	    'data': mod_testcommon.dummyResponseEndEmpty,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -203,14 +216,17 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': i == nmessages - 1 ?
-		        mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_END :
 			mod_protocol.FP_STATUS_DATA,
-		    'data': { 'd': d }
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end();
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -229,9 +245,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -251,16 +270,20 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_DATA,
-		    'data': mod_testcommon.dummyResponseData
+		    'data': mod_testcommon.dummyResponseData,
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': mod_testcommon.dummyResponseError
+	    'data': mod_testcommon.dummyResponseError,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -288,16 +311,19 @@ var mockResponders = [ {
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
 	    'data': {
-	        'd': {
+		'd': {
 		    'name': 'DummyError',
 		    'message': 'a dummy message',
 		    'someOtherProp': 'bogus',
 		    'context': 'abc123',
 		    'ase_errors': [ 'foobar' ]
 		}
-	    }
+	    },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var error;
 
@@ -322,6 +348,8 @@ var mockResponders = [ {
     'serverReply': function (socket, message, encoder) {
 	socket.end();
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -341,6 +369,8 @@ var mockResponders = [ {
 	buf.writeUInt8(mod_protocol.FP_VERSION_1, mod_protocol.FP_OFF_VERSION);
 	socket.end(buf);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -359,9 +389,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_DATA,
-	    'data': mod_testcommon.dummyResponseData
+	    'data': mod_testcommon.dummyResponseData,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -382,9 +415,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': 47,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': mod_testcommon.dummyResponseData
+	    'data': mod_testcommon.dummyResponseData,
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -407,9 +443,12 @@ var mockResponders = [ {
 	 */
 	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + 1);
 	mod_testcommon.writeMessageForEncodedData(
-	    buf, 3, mod_protocol.FP_STATUS_END, '{', 0);
+	    buf, 3, mod_protocol.FP_STATUS_END, '{', 0,
+	    mod_protocol.FAST_CHECKSUM_V2);
 	socket.end(buf);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -428,9 +467,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_ERROR,
-	    'data': { 'd': {} }
+	    'data': { 'd': {} },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client !== null);
@@ -454,16 +496,20 @@ var mockResponders = [ {
 		encoder.write({
 		    'msgid': message.msgid,
 		    'status': mod_protocol.FP_STATUS_DATA,
-		    'data': { 'd': [ 'string_' + i ] }
+		    'data': { 'd': [ 'string_' + i ] },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 		});
 	}
 
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': [ 'lastmessage' ] }
+	    'data': { 'd': [ 'lastmessage' ] },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -493,9 +539,12 @@ var mockResponders = [ {
 	encoder.end({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': d }
+	    'data': { 'd': d },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	var i;
 	mod_assertplus.ok(errors.socket === null);
@@ -517,7 +566,8 @@ var mockResponders = [ {
 	encoder.write({
 	    'msgid': message.msgid,
 	    'status': mod_protocol.FP_STATUS_END,
-	    'data': { 'd': d }
+	    'data': { 'd': d },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
 	});
 
 	encoder.end();
@@ -532,6 +582,8 @@ var mockResponders = [ {
 	    'fast_client_requests_completed{rpcMethod="testmethod",' +
 		'service="tst.client_request"} 1') !== -1);
     },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
     'clientCheck': function (data, errors) {
 	mod_assertplus.ok(errors.socket === null);
 	mod_assertplus.ok(errors.client === null);
@@ -539,6 +591,128 @@ var mockResponders = [ {
 	mod_assertplus.deepEqual(data, ['hello world']);
     }
 
+}, {
+    'name': 'ok, client uses new crc encoding, server accepts old and new',
+    'serverReply': function (socket, message, encoder) {
+	var nmessages, i, j, d;
+
+	assertNormalRequest(message);
+	nmessages = 5;
+	for (i = 0; i < nmessages; i++) {
+		d = [];
+		for (j = 0; j < i; j++) {
+			d.push('string ' + i + '_' + j);
+		}
+		encoder.write({
+		    'msgid': message.msgid,
+		    'status': i == nmessages - 1 ?
+			mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_DATA,
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
+		});
+	}
+
+	encoder.end();
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request === null);
+	mod_assertplus.deepEqual(data, [
+	    'string 1_0', 'string 2_0', 'string 2_1', 'string 3_0',
+	    'string 3_1', 'string 3_2', 'string 4_0', 'string 4_1',
+	    'string 4_2', 'string 4_3'
+	]);
+    }
+
+}, {
+    'name': 'ok, client uses old crc encoding, server accepts old and new',
+    'serverReply': function (socket, message, encoder) {
+	var nmessages, i, j, d;
+
+	assertNormalRequest(message);
+	nmessages = 5;
+	for (i = 0; i < nmessages; i++) {
+		d = [];
+		for (j = 0; j < i; j++) {
+			d.push('string ' + i + '_' + j);
+		}
+		encoder.write({
+		    'msgid': message.msgid,
+		    'status': i == nmessages - 1 ?
+			mod_protocol.FP_STATUS_END :
+			mod_protocol.FP_STATUS_DATA,
+		    'data': { 'd': d },
+		    'crc_mode': mod_protocol.FAST_CHECKSUM_V1
+		});
+	}
+
+	encoder.end();
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client === null);
+	mod_assertplus.ok(errors.request === null);
+	mod_assertplus.deepEqual(data, [
+	    'string 1_0', 'string 2_0', 'string 2_1', 'string 3_0',
+	    'string 3_1', 'string 3_2', 'string 4_0', 'string 4_1',
+	    'string 4_2', 'string 4_3'
+	]);
+    }
+
+}, {
+    'name': 'error, client uses old crc encoding, server accepts only new',
+    'serverReply': function (socket, message, encoder) {
+	encoder.end({
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_ERROR,
+	    'data': { 'd': message },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V2
+	});
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client !== null);
+	mod_assertplus.ok(errors.request !== null);
+	mod_assertplus.equal(data.length, 0);
+
+	mod_assertplus.equal(errors.client.name, 'FastProtocolError');
+	mod_assertplus.ok(/fast protocol: expected CRC/.test(
+	    errors.client.message));
+	mod_testcommon.assertRequestError(errors.request, errors.client);
+    }
+
+}, {
+    'name': 'error, client uses new crc encoding, server accepts only old',
+    'serverReply': function (socket, message, encoder) {
+	encoder.end({
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_ERROR,
+	    'data': { 'd': message },
+	    'crc_mode': mod_protocol.FAST_CHECKSUM_V1
+	});
+    },
+    'client_crc_mode': mod_protocol.FAST_CHECKSUM_V2,
+    'server_decoder_crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'clientCheck': function (data, errors) {
+	mod_assertplus.ok(errors.socket === null);
+	mod_assertplus.ok(errors.client !== null);
+	mod_assertplus.ok(errors.request !== null);
+	mod_assertplus.equal(data.length, 0);
+
+	mod_assertplus.equal(errors.client.name, 'FastProtocolError');
+	mod_assertplus.ok(/fast protocol: expected CRC/.test(
+	    errors.client.message));
+	mod_testcommon.assertRequestError(errors.request, errors.client);
+    }
+
 } ];
 
 /*
diff --git a/test/tst.crc_mode.js b/test/tst.crc_mode.js
new file mode 100644
index 0000000..ba0f933
--- /dev/null
+++ b/test/tst.crc_mode.js
@@ -0,0 +1,370 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * test/tst.crc_mode.js: tests for CRC compatibility mode validations
+ *
+ * Tests for CRC compatibility mode validations. For more details about this see
+ * the fast_protocol module documentation.
+ */
+
+var mod_assertplus = require('assert-plus');
+var mod_bunyan = require('bunyan');
+var mod_net = require('net');
+var mod_path = require('path');
+var mod_vasync = require('vasync');
+
+var mod_fast = require('../lib/fast');
+var mod_protocol = require('../lib/fast_protocol');
+var mod_testcommon = require('./common');
+
+
+function main() {
+	var serverSocket, csock;
+	var serverPort = mod_testcommon.serverPort;
+	var serverIp = mod_testcommon.serverIp;
+
+	var log = new mod_bunyan({
+	    'name': mod_path.basename(__filename),
+	    'level': process.env['LOG_LEVEL'] || 'fatal'
+	});
+
+	var barrier = mod_vasync.barrier();
+	barrier.start('crc test run');
+
+	barrier.on('drain', function () {
+		log.info('all test cases complete');
+	});
+
+
+	mod_testcommon.mockServerSetup(function (s) {
+		log.info('server listening');
+		serverSocket = s;
+
+		mod_vasync.pipeline({ 'funcs': [
+			function create_connection(_, next) {
+				csock = mod_net.createConnection(serverPort,
+				    serverIp);
+				next();
+			},
+			function create_fast_client_ok(_, next) {
+				createFastClientOk(log, csock, next);
+			},
+			function create_fast_client_fail(_, next) {
+				createFastClientFail(log, csock, next);
+			},
+			function create_fast_server_ok(_, next) {
+				createFastServerOk(log, serverSocket, next);
+			},
+			function create_fast_server_fail(_, next) {
+				createFastServerFail(log, serverSocket, next);
+			},
+			function fast_message_encode_ok(_, next) {
+				fastMessageEncodeOk(log, next);
+			},
+			function fast_message_encode_fail(_, next) {
+				fastMessageEncodeFail(log, next);
+			}
+
+		]}, function (err) {
+			if (err) {
+				throw (err);
+			}
+
+			csock.destroy();
+			mod_testcommon.mockServerTeardown(serverSocket);
+
+			barrier.done('crc test run');
+		});
+	});
+}
+
+/*
+ * Test to ensure FastClients can be created with valid CRC mode values.
+ */
+function createFastClientOk(l, transport, cb) {
+	try {
+		var client1 = new mod_fast.FastClient({
+		    'log': l,
+		    'transport': transport,
+		    'nRecentRequests': 100,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V1
+		});
+		var client2 = new mod_fast.FastClient({
+		    'log': l,
+		    'transport': transport,
+		    'nRecentRequests': 100,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V2
+		});
+		l.info('created fast clients');
+		client1.detach();
+		client2.detach();
+		mod_assertplus.ok(true);
+	} catch (ex) {
+		mod_assertplus.fail('failed to create FastClient with valid ' +
+		    'CRC mode');
+		l.info('did not create fast client');
+	}
+
+	cb();
+}
+
+/*
+ * Test to ensure an attempt to create a FastClient with invalid CRC mode
+ * values fails.
+ */
+function createFastClientFail(l, transport, cb) {
+	try {
+		var client1 = new mod_fast.FastClient({
+		    'log': l,
+		    'transport': transport,
+		    'nRecentRequests': 100,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V1_V2
+		});
+		l.info('created fast client');
+		client1.detach();
+	} catch (ex1) {
+		try {
+			var client2 = new mod_fast.FastClient({
+			    'log': l,
+			    'transport': transport,
+			    'nRecentRequests': 100,
+			    'crc_mode': 42 // An invalid CRC mode value
+			});
+			l.info('created fast client');
+			client2.detach();
+		} catch (ex2) {
+			mod_assertplus.ok(true);
+			l.info('did not create fast client');
+			cb();
+			return;
+		}
+	}
+
+	mod_assertplus.fail('failed to reject invalid FastClient CRC mode');
+	cb();
+}
+
+/*
+ * Test to ensure FastServers can be created with valid CRC mode values.
+ */
+function createFastServerOk(l, server_sock, cb) {
+	try {
+		var server1 = new mod_fast.FastServer({
+		    'log': l,
+		    'server': server_sock,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V1
+		});
+		server1.close();
+		var server2 = new mod_fast.FastServer({
+		    'log': l,
+		    'server': server_sock,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V2
+		});
+		server2.close();
+		var server3 = new mod_fast.FastServer({
+		    'log': l,
+		    'server': server_sock,
+		    'crc_mode': mod_fast.FAST_CHECKSUM_V1_V2
+		});
+		server3.close();
+		mod_assertplus.ok(true);
+	} catch (ex1) {
+		mod_assertplus.fail('failed to create FastServer with valid ' +
+		    'CRC mode');
+		l.info('did not create fast client');
+	}
+
+	cb();
+}
+
+/*
+ * Test to ensure an attempt to create a FastServer with invalid CRC mode
+ * values fails.
+ */
+function createFastServerFail(l, server_sock, cb) {
+	try {
+		var server1 = new mod_fast.FastServer({
+		    'log': l,
+		    'server': server_sock,
+		    'crc_mode': 140
+		});
+		server1.close();
+	} catch (ex1) {
+		mod_assertplus.ok(true);
+		l.info('did not create fast client');
+		cb();
+		return;
+	}
+
+	mod_assertplus.fail('failed to reject invalid FastServer CRC mode');
+	cb();
+}
+
+function fastMessageEncodeOk(l, cb) {
+	var msg1 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ]
+	};
+	var msg2 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ],
+	    'crc_mode': mod_fast.FAST_CHECKSUM_V1
+	};
+	var msg3 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ],
+	    'crc_mode': mod_fast.FAST_CHECKSUM_V2
+	};
+	try {
+		mod_protocol.fastMessageEncode(msg1);
+		mod_protocol.fastMessageEncode(msg2);
+		mod_protocol.fastMessageEncode(msg3);
+		mod_protocol.fastMessageEncode(msg1, mod_fast.FAST_CHECKSUM_V1);
+		mod_protocol.fastMessageEncode(msg2, mod_fast.FAST_CHECKSUM_V1);
+		mod_protocol.fastMessageEncode(msg3, mod_fast.FAST_CHECKSUM_V1);
+		mod_protocol.fastMessageEncode(msg1, mod_fast.FAST_CHECKSUM_V2);
+		mod_protocol.fastMessageEncode(msg2, mod_fast.FAST_CHECKSUM_V2);
+		mod_protocol.fastMessageEncode(msg3, mod_fast.FAST_CHECKSUM_V2);
+		mod_assertplus.ok(true);
+	} catch (ex) {
+		mod_assertplus.fail('fastMessageEncode failed with valid ' +
+		    'CRC mode: ' + ex.message);
+		l.info('fastMessageEncode failed');
+	}
+
+	cb();
+}
+
+function fastMessageEncodeFail(l, cb) {
+	var msg1 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ]
+	};
+	var msg2 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ],
+	    'crc_mode': mod_fast.FAST_CHECKSUM_V1_V2
+	};
+	var msg3 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ],
+	    'crc_mode': 50
+	};
+	var msg4 = {
+	    'msgid': 1,
+	    'status': mod_protocol.FP_STATUS_DATA,
+	    'data': [ 'hello', 'world' ],
+	    'crc_mode': mod_fast.FAST_CHECKSUM_V2
+	};
+
+	try {
+		mod_protocol.fastMessageEncode(msg1,
+		    mod_fast.FAST_CHECKSUM_V1_V2);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode FAST_CHECKSUM_V1_V2');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg1, 50);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode 50 ');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg2,
+		    mod_fast.FAST_CHECKSUM_V1_V2);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode FAST_CHECKSUM_V1_V2');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg2,
+		    mod_fast.FAST_CHECKSUM_V2);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode FAST_CHECKSUM_V1_V2');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg2);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode FAST_CHECKSUM_V1_V2');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg3, 50);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode 50');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg3);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode 50');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg3, mod_fast.FAST_CHECKSUM_V2);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'CRC mode 50');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	try {
+		mod_protocol.fastMessageEncode(msg4, 45);
+		mod_assertplus.fail('fastMessageEncode allowed invalid ' +
+		    'default CRC mode 45');
+		cb();
+		return;
+	} catch (ex) {
+		mod_assertplus.ok(true);
+	}
+
+	cb();
+}
+
+main();
diff --git a/test/tst.protocol_decoder.js b/test/tst.protocol_decoder.js
index 2436c78..a88c3a0 100644
--- a/test/tst.protocol_decoder.js
+++ b/test/tst.protocol_decoder.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_cmdutil = require('cmdutil');
+var mod_old_crc = require('oldcrc');
 var mod_crc = require('crc');
 var mod_extsprintf = require('extsprintf');
 var mod_path = require('path');
@@ -45,7 +46,8 @@ function main()
 
 function runTestCase(testcase, callback)
 {
-	var decoder = new mod_protocol.FastMessageDecoder();
+	var crc_mode = testcase['crc_mode'] || mod_protocol.FAST_CHECKSUM_V2;
+	var decoder = new mod_protocol.FastMessageDecoder(crc_mode);
 	var data = [];
 	var error = null;
 
@@ -71,6 +73,7 @@ function runTestCase(testcase, callback)
 
 var sample_object = { 'd': [ { 'hello': 'world' } ] };
 var sample_data = JSON.stringify(sample_object);
+var sample_old_crc = mod_old_crc.crc16(sample_data);
 var sample_crc = mod_crc.crc16(sample_data);
 
 var sample_error = { 'd': { 'name': 'AnError', 'message': 'boom!' } };
@@ -78,9 +81,90 @@ var sample_error = { 'd': { 'name': 'AnError', 'message': 'boom!' } };
 /* This object winds up being about 28MB encoded as JSON. */
 var big_object = { 'd': [ mod_testcommon.makeBigObject(10, 6) ] };
 var big_data = JSON.stringify(big_object);
-var big_crc = mod_crc.crc16(big_data);
+var big_crc = mod_old_crc.crc16(big_data);
 
 test_cases = [ {
+    'name': 'basic DATA message (old CRC calculaton)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_old_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
+    'name': 'basic DATA message (old CRC calculation, dual CRC mode)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_old_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
+    'name': 'basic DATA message (decoder in dual CRC mode)',
+    'input': function () {
+	/*
+	 * The first few of these test cases hardcode protocol values to make
+	 * sure these constants don't break silently on us (e.g., checking null
+	 * against undefined because FP_OFF_TYPE has been deleted).  Later,
+	 * we'll just use the constants for clarity.
+	 */
+	var buf = new Buffer(mod_protocol.FP_HEADER_SZ + sample_data.length);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_VERSION);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_TYPE);
+	buf.writeUInt8(0x1, mod_protocol.FP_OFF_STATUS);
+	buf.writeUInt32BE(0xbadcafe, mod_protocol.FP_OFF_MSGID);
+	buf.writeUInt32BE(sample_crc, mod_protocol.FP_OFF_CRC);
+	buf.writeUInt32BE(sample_data.length, mod_protocol.FP_OFF_DATALEN);
+	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1_V2,
+    'check': function (error, data) {
+	mod_assertplus.ok(error === null);
+	mod_assertplus.equal(data.length, 1);
+	mod_assertplus.equal(data[0].msgid, 0xbadcafe);
+	mod_assertplus.equal(data[0].status, mod_protocol.FP_STATUS_DATA);
+	mod_assertplus.deepEqual(data[0].data, sample_object);
+    }
+}, {
     'name': 'basic DATA message',
     'input': function () {
 	/*
@@ -99,6 +183,7 @@ test_cases = [ {
 	buf.write(sample_data, mod_protocol.FP_OFF_DATA);
 	return (buf);
     },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'check': function (error, data) {
 	mod_assertplus.ok(error === null);
 	mod_assertplus.equal(data.length, 1);
@@ -134,10 +219,11 @@ test_cases = [ {
 }, {
     'name': 'DATA message with maximum msgid',
     'input': function () {
-	var buf = makeSampleMessage();
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V2);
 	buf.writeUInt32BE(mod_protocol.FP_MSGID_MAX, mod_protocol.FP_OFF_MSGID);
 	return (buf);
     },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V2,
     'check': function (error, data) {
 	mod_assertplus.ok(error === null);
 	mod_assertplus.equal(data.length, 1);
@@ -330,9 +416,9 @@ test_cases = [ {
 	mod_assertplus.equal(VError.info(error).foundMsgid, 2147483648);
     }
 }, {
-    'name': 'bad CRC',
+    'name': 'bad CRC 1',
     'input': function () {
-	var buf = makeSampleMessage();
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V2);
 	mod_assertplus.ok(
 	    buf.readUInt32BE(mod_protocol.FP_OFF_CRC) != 0xdeadbeef);
 	buf.writeUInt32BE(0xdeadbeef, mod_protocol.FP_OFF_CRC);
@@ -347,6 +433,25 @@ test_cases = [ {
 	mod_assertplus.equal(VError.info(error).crcCalculated, sample_crc);
 	mod_assertplus.equal(VError.info(error).crcExpected, 0xdeadbeef);
     }
+}, {
+    'name': 'bad CRC 2',
+    'input': function () {
+	var buf = makeSampleMessage(mod_protocol.FAST_CHECKSUM_V1);
+	mod_assertplus.ok(
+	    buf.readUInt32BE(mod_protocol.FP_OFF_CRC) != 0xdeadbeef);
+	buf.writeUInt32BE(0xdeadbeef, mod_protocol.FP_OFF_CRC);
+	return (buf);
+    },
+    'crc_mode': mod_protocol.FAST_CHECKSUM_V1,
+    'check': function (error, data) {
+	mod_assertplus.equal(data.length, 0);
+	mod_assertplus.ok(error instanceof Error);
+	mod_assertplus.equal(error.name, 'FastProtocolError');
+	mod_assertplus.ok(/expected CRC 3735928559, found/.test(error.message));
+	mod_assertplus.equal(VError.info(error).fastReason, 'bad_crc');
+	mod_assertplus.equal(VError.info(error).crcCalculated, sample_old_crc);
+	mod_assertplus.equal(VError.info(error).crcExpected, 0xdeadbeef);
+    }
 }, {
     'name': 'bad: DATA message with non-array data.d',
     'input': function () {
@@ -538,13 +643,13 @@ test_cases = [ {
     }
 } ];
 
-function makeSampleMessage()
+function makeSampleMessage(crc_mode)
 {
 	return (makeMessageForData(mod_protocol.FP_MSGID_MAX,
-	    mod_protocol.FP_STATUS_DATA, sample_object));
+	    mod_protocol.FP_STATUS_DATA, sample_object, crc_mode));
 }
 
-function makeMessageForData(msgid, status, data)
+function makeMessageForData(msgid, status, data, crc_mode)
 {
 	var datalen, dataenc, buf;
 
@@ -554,7 +659,7 @@ function makeMessageForData(msgid, status, data)
 	datalen = Buffer.byteLength(dataenc);
 	buf = new Buffer(mod_protocol.FP_HEADER_SZ + datalen);
 	mod_testcommon.writeMessageForEncodedData(
-	    buf, msgid, status, dataenc, 0);
+	    buf, msgid, status, dataenc, 0, crc_mode);
 	return (buf);
 }
 
diff --git a/test/tst.protocol_encoder.js b/test/tst.protocol_encoder.js
index 7646e09..21402f7 100644
--- a/test/tst.protocol_encoder.js
+++ b/test/tst.protocol_encoder.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -35,10 +35,21 @@ function main()
 	bigdataval = JSON.stringify(bigdata);
 	printf('%d bytes (stringified)\n', bigdataval.length);
 
-	test_cases.forEach(runTestCase);
+	test_cases.map(useOldCrc).forEach(runTestCase);
+	test_cases.map(useNewCrc).forEach(runTestCase);
 	printf('%s tests passed\n', mod_path.basename(__filename));
 }
 
+function useOldCrc(testCase) {
+	testCase.input.crc_mode = mod_protocol.FAST_CHECKSUM_V1;
+	return (testCase);
+}
+
+function useNewCrc(testCase) {
+	testCase.input.crc_mode = mod_protocol.FAST_CHECKSUM_V2;
+	return (testCase);
+}
+
 test_cases = [ {
     'name': 'basic data message',
     'input': {
@@ -53,7 +64,11 @@ test_cases = [ {
 	mod_assertplus.equal(parsed.pm_data.toString('utf8'), expected);
 	mod_assertplus.equal(parsed.pm_msgid, 1);
 	mod_assertplus.equal(parsed.pm_status, mod_protocol.FP_STATUS_DATA);
-	mod_assertplus.equal(parsed.pm_crc, 10980);
+	if (parsed.pm_crc_mode === mod_protocol.FAST_CHECKSUM_V1) {
+		mod_assertplus.equal(parsed.pm_crc, 10980);
+	} else {
+		mod_assertplus.equal(parsed.pm_crc, 7500);
+	}
     }
 }, {
     'name': 'large data message',
@@ -253,6 +268,7 @@ function runTestCase(testcase)
 		parsed.pm_msgid =
 		    outbuf.readUInt32BE(mod_protocol.FP_OFF_MSGID);
 		parsed.pm_crc = outbuf.readUInt32BE(mod_protocol.FP_OFF_CRC);
+		parsed.pm_crc_mode = testcase.input.crc_mode;
 
 		mod_assertplus.ok(parsed.pm_status > 0 &&
 		    parsed.pm_status <= 0x3);
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..1cffbe7
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,54 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/Makefile.targ b/tools/mk/Makefile.targ
similarity index 90%
rename from Makefile.targ
rename to tools/mk/Makefile.targ
index ea19000..54edf0e 100644
--- a/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -89,9 +88,9 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
@@ -108,7 +107,7 @@ JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -209,7 +208,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +263,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,9 +293,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -315,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

