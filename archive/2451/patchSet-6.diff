commit c4658d0e9ac4254f9240f45953bfb193fbeae761 (refs/changes/51/2451/6)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-09-26T17:01:00-04:00 (2 years ago)
    
    OS-6305 want hrtime processing library for easier timing statistics

diff --git a/src/Makefile b/src/Makefile
index 1a0f5761..8d217572 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -83,6 +83,7 @@ JS_CHECK_TARGETS=\
 	vm/sbin/*.js \
 	vm/node_modules/dladm.js \
 	vm/node_modules/expander.js \
+	vm/node_modules/hrtime.js \
 	vm/node_modules/ip.js \
 	vm/node_modules/nic.js \
 	vm/node_modules/proptable.js \
@@ -101,6 +102,7 @@ JS_CHECK_TARGETS=\
 	vm/tests/test-create-filesystems.js \
 	vm/tests/test-docker.js \
 	vm/tests/test-defaults.js \
+	vm/tests/test-hrtime.js \
 	vm/tests/test-indestructible.js \
 	vm/tests/test-internal_metadata_namespaces.js \
 	vm/tests/test-lastexited.js \
diff --git a/src/manifest b/src/manifest
index 287f6109..b60f314c 100644
--- a/src/manifest
+++ b/src/manifest
@@ -294,6 +294,7 @@ f usr/node/0.10/node_modules/node-expat.js 0444 root bin
 f usr/vm/node_modules/bunyan.js 0444 root bin
 f usr/vm/node_modules/dladm.js 0444 root bin
 f usr/vm/node_modules/expander.js 0444 root bin
+f usr/vm/node_modules/hrtime.js 0444 root root
 f usr/vm/node_modules/ip.js 0444 root bin
 f usr/vm/node_modules/locker.js 0444 root bin
 f usr/vm/node_modules/nic.js 0444 root bin
diff --git a/src/vm/node_modules/hrtime.js b/src/vm/node_modules/hrtime.js
new file mode 100644
index 00000000..5ad45940
--- /dev/null
+++ b/src/vm/node_modules/hrtime.js
@@ -0,0 +1,213 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright 2017 Joyent, Inc.
+ *
+ */
+
+/*
+ * hrtime.js provides helper functions to more easily work with hrtimes.
+ *
+ * It was originally created with the intent to provide the simplicity of using
+ * Date.now(), but with the guarantees offered by a monotonic clock.
+ *
+ */
+
+var util = require('util');
+
+var assert = require('/usr/node/node_modules/assert-plus');
+
+module.exports.prettyHrtime = prettyHrtime;
+module.exports.hrtimeDelta = hrtimeDelta;
+module.exports.hrtimeDeltaPretty = hrtimeDeltaPretty;
+module.exports.hrtimeComparator = hrtimeComparator;
+module.exports.hrtimeToString = hrtimeToString;
+module.exports.stringToHrtime = stringToHrtime;
+module.exports.assertHrtime = assertHrtime;
+
+/*
+ * Convert an hrtime delta to a relative representation - returns strings like
+ * "300.0s (5m)" (5 minutes), "0.523s (523ms)" (523 milliseconds), etc.
+ *
+ * Example:
+ *
+ * var then = process.hrtime();
+ *
+ * setTimeout(function () {
+ *     var now = process.hrtime();
+ *     var delta;
+ *     var s;
+ *
+ *     // use hrtimeDelta to calculate the delta
+ *     delta = hrtimeDelta(now, then);
+ *     s = prettyHrtime(delta);
+ *     // => "5.0s (5s)"
+ *
+ *     // pass the first time to the process.hrtime function to calculate the
+ *     // delta
+ *     delta = process.hrtime(then);
+ *     s = prettyHrtime(delta);
+ *     // => "5.0s (5s)"
+ * }, 5 * 1000);
+ *
+ */
+function prettyHrtime(delta) {
+    var times;
+    var names;
+    var relative = '0ns';
+
+    assertHrtime(delta, 'delta');
+
+    times = [
+        delta[0] / 60 / 60 / 24, // days
+        delta[0] / 60 / 60,      // hours
+        delta[0] / 60,           // minutes
+        delta[0],                // seconds
+        delta[1] / 1e3 / 1e3,    // ms
+        delta[1] / 1e3,          // us
+        delta[1]                 // ns
+    ];
+    names = ['d', 'h', 'm', 's', 'ms', 'us', 'ns'];
+
+    /*
+     * Add milliseconds to seconds (as a decimal) to ensure that the rounding
+     * logic below works properly.
+     */
+    times[3] += (times[4] / 1e3);
+
+    for (var i = 0; i < names.length; i++) {
+        var t = times[i];
+        if (Math.floor(t) > 0) {
+            relative = parseFloat(t.toFixed(2), 10) + names[i];
+            break;
+        }
+    }
+
+    return util.format('%ss (%s)', hrtimeToString(delta), relative);
+}
+
+/*
+ * Calculate the difference of 2 hrtimes (subtracts hr2 from hr1)
+ * and returns an array of seconds and nano seconds.
+ *
+ * hr1 must be larger than hr2
+ */
+function hrtimeDelta(hr1, hr2) {
+    assertHrtime(hr1, 'hr1');
+    assertHrtime(hr2, 'hr2');
+
+    var s = hr1[0] - hr2[0];
+    var ns = hr1[1] - hr2[1];
+    var ret;
+
+    if (ns < 0) {
+        ns += 1e9;
+        s -= 1;
+    }
+
+    ret = [s, ns];
+
+    assertHrtime(ret, 'ret');
+
+    return ret;
+}
+
+/*
+ * Convenience wrapper for:
+ *
+ * prettyHrtime(hrtimeDelta(now, then));
+ */
+function hrtimeDeltaPretty(hr1, hr2) {
+    assertHrtime(hr1, 'hr1');
+    assertHrtime(hr2, 'hr2');
+    return prettyHrtime(hrtimeDelta(hr1, hr2));
+}
+
+
+/*
+ * Compare hrtime objects, cane be used directly with Array.prototype.sort
+ */
+function hrtimeComparator(hr1, hr2) {
+    assertHrtime(hr1, 'hr1');
+    assertHrtime(hr2, 'hr2');
+
+    var s1 = hr1[0];
+    var s2 = hr2[0];
+    var ns1 = hr1[1];
+    var ns2 = hr2[1];
+
+    // first compare seconds
+    if (s1 < s2)
+        return -1;
+    else if (s1 > s2)
+        return 1;
+
+    // next compare nano seconds
+    if (ns1 < ns2)
+        return -1;
+    else if (ns1 > ns2)
+        return 1;
+
+    // hr times are the same
+    return 0;
+}
+
+/*
+ * Pretty print an hrtime as a string like "<secs>.<nanosecs>"
+ */
+function hrtimeToString(hrtime) {
+    assertHrtime(hrtime, 'hrtime');
+
+    var s = hrtime[0];
+    var ns = hrtime[1].toString();
+
+    while (ns.length < 9) {
+        ns = '0' + ns;
+    }
+
+    return util.format('%d.%s', s, ns);
+}
+
+/*
+ * Convert a string like "<secs>.<nanosecs>" to an hrtime array
+ */
+function stringToHrtime(s) {
+    assert.string(s, 's');
+    var hrtime = s.split('.').map(function (section) {
+        return parseInt(section, 10);
+    });
+    assertHrtime(hrtime, 'hrtime');
+    return hrtime;
+}
+
+/*
+ * Assert that an object is an hrtime
+ */
+function assertHrtime(hrtime, s) {
+    s = s || 'hrtime';
+    assert.string(s, 's');
+    assert.arrayOfNumber(hrtime, s);
+    assert.equal(hrtime.length, 2, s);
+    assert(hrtime[0] >= 0, 'secs >= 0');
+    assert(hrtime[1] >= 0, 'nsecs >= 0');
+    assert(hrtime[1] < 1e9, 'nsecs < 1e9');
+}
diff --git a/src/vm/node_modules/sysevent-stream.js b/src/vm/node_modules/sysevent-stream.js
index 3fd4dc92..c9d86e6b 100644
--- a/src/vm/node_modules/sysevent-stream.js
+++ b/src/vm/node_modules/sysevent-stream.js
@@ -30,6 +30,7 @@ var stream = require('stream');
 var util = require('util');
 
 var assert = require('/usr/node/node_modules/assert-plus');
+var hrtime = require('/usr/vm/node_modules/hrtime');
 var LineStream = require('/usr/node/node_modules/linestream');
 
 function noop() {}
@@ -120,6 +121,7 @@ function SyseventStream(opts) {
     var self = this;
 
     self.ses_stopped = false;
+    self.ses_started = process.hrtime();
 
     // become a transform stream
     stream.Transform.call(self, {objectMode: true});
@@ -252,6 +254,8 @@ SyseventStream.prototype._transform = function _transform(chunk, encoding, cb) {
     switch (ev.type) {
     case 'ready':
         assert(self.ses_ready_timeout, '"ready" event already seen');
+        self.ses_logger.debug('sysevent stream ready, took %s',
+            hrtime.prettyHrtime(process.hrtime(self.ses_started)));
         self.emit('ready');
         self._clear_ready_timeout();
         break;
diff --git a/src/vm/node_modules/vmload/index.js b/src/vm/node_modules/vmload/index.js
index 5c64f7e0..1e37a83f 100644
--- a/src/vm/node_modules/vmload/index.js
+++ b/src/vm/node_modules/vmload/index.js
@@ -34,6 +34,7 @@ var getVmobjJSON = require('./vmload-json').getVmobjJSON;
 var getVmobjXMLFile = require('./vmload-xml').getVmobjXMLFile;
 var getZoneinfo = require('./vmload-zoneinfo').getZoneinfo;
 var getZoneRecords = require('./vmload-zoneadm').getZoneRecords;
+var hrtime = require('/usr/vm/node_modules/hrtime');
 var path = require('path');
 var props = require('/usr/vm/node_modules/props');
 var utils = require('utils');
@@ -1165,12 +1166,12 @@ function loadDatasetObjects(uuid, cache, options, callback)
         });
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     getDatasets(obj, options, function (err, results) {
 
-        log.debug('loading dataset_objects took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading dataset_objects took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
 
         if (err) {
             callback(err);
@@ -1207,7 +1208,7 @@ function loadJsonObjects(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     // (parallel)
     async.each(Object.keys(cache.zoneadm_objects), function (vm_uuid, cb) {
@@ -1246,8 +1247,8 @@ function loadJsonObjects(uuid, cache, options, callback)
             cb();
         });
     }, function (err) {
-        log.debug('loading json_objects took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading json_objects took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
 
         if (errors.length > 0) {
             // XXX just return the first error for now
@@ -1283,7 +1284,7 @@ function loadLastExited(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     // (parallel)
     async.each(Object.keys(cache.zoneadm_objects), function (vm_uuid, cb) {
@@ -1301,8 +1302,8 @@ function loadLastExited(uuid, cache, options, callback)
             cb();
         });
     }, function (err) {
-        log.debug('loading last_exited took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading last_exited took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
         cache.last_exited = last_exited;
         callback();
     });
@@ -1329,7 +1330,7 @@ function loadLastModified(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     // (parallel)
     async.each(Object.keys(cache.zoneadm_objects), function (vm_uuid, cb) {
@@ -1347,8 +1348,8 @@ function loadLastModified(uuid, cache, options, callback)
             cb();
         });
     }, function (err) {
-        log.debug('loading last_modified took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading last_modified took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
         cache.last_modified = last_modified;
         callback();
     });
@@ -1373,12 +1374,12 @@ function loadSysinfo(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     getSysinfo(log, function (err, sysinfo) {
 
-        log.debug('loading sysinfo took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading sysinfo took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
 
         if (err) {
             log.error(err);
@@ -1410,7 +1411,7 @@ function loadZoneinfoObjects(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     /*
      * NOTE: we pass in the uuid parameter we were provided which means the
@@ -1418,8 +1419,8 @@ function loadZoneinfoObjects(uuid, cache, options, callback)
      * uuid !== null.
      */
     getZoneinfo(uuid, options, function (err, results) {
-        log.debug('loading zoneinfo_objects took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading zoneinfo_objects took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
 
         if (err) {
             callback(err);
@@ -1445,7 +1446,7 @@ function loadZoneadmObjects(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     /*
      * NOTE: we pass in the uuid parameter we were provided which means the
@@ -1453,8 +1454,8 @@ function loadZoneadmObjects(uuid, cache, options, callback)
      * uuid !== null.
      */
     getZoneRecords(uuid, options, function (err, results) {
-        log.debug('loading zoneadm_objects took '
-            + ((new Date).getTime() - start_time) + ' ms');
+        log.debug('loading zoneadm_objects took %s',
+            hrtime.prettyHrtime(process.hrtime(start_time)));
 
         if (err) {
             callback(err);
@@ -1487,7 +1488,7 @@ function loadZonexmlObjects(uuid, cache, options, callback)
         return;
     }
 
-    start_time = (new Date).getTime();
+    start_time = process.hrtime();
 
     // load the XML and translate to JSON in parallel for all VMs in
     // cache.zoneadm_objects
@@ -1518,8 +1519,8 @@ function loadZonexmlObjects(uuid, cache, options, callback)
                 }
             );
         }, function (err) {
-            log.debug('loading zonexml_objects took '
-                + ((new Date).getTime() - start_time) + ' ms');
+            log.debug('loading zonexml_objects took %s',
+                hrtime.prettyHrtime(process.hrtime(start_time)));
 
             if (errors.length > 0) {
                 // XXX just return the first error for now
diff --git a/src/vm/node_modules/vmload/vmload-datasets.js b/src/vm/node_modules/vmload/vmload-datasets.js
index f964bea0..7f251772 100644
--- a/src/vm/node_modules/vmload/vmload-datasets.js
+++ b/src/vm/node_modules/vmload/vmload-datasets.js
@@ -27,6 +27,7 @@
 var assert = require('assert');
 var async = require('/usr/node/node_modules/async');
 var EventEmitter = require('events').EventEmitter;
+var hrtime = require('/usr/vm/node_modules/hrtime');
 var props = require('/usr/vm/node_modules/props');
 var spawn = require('child_process').spawn;
 var utils = require('utils');
@@ -622,7 +623,7 @@ zfs_list_queue = async.queue(function (task, callback) {
 
     var log = task.log;
     var options = {};
-    var started = Date.now(0);
+    var started = process.hrtime();
 
     options = {
         fields: task.fields,
@@ -650,7 +651,8 @@ zfs_list_queue = async.queue(function (task, callback) {
         emitter.emit('result', err, data);
         emitter.removeAllListeners('result');
 
-        log.debug('zfs list took ' + (Date.now(0) - started) + ' ms');
+        log.debug('zfs list took %s',
+            hrtime.prettyHrtime(process.hrtime(started)));
         callback();
     });
 
diff --git a/src/vm/tests/test-hrtime.js b/src/vm/tests/test-hrtime.js
new file mode 100644
index 00000000..cb7615cc
--- /dev/null
+++ b/src/vm/tests/test-hrtime.js
@@ -0,0 +1,129 @@
+/*
+ * Copyright 2017, Joyent, Inc.
+ *
+ */
+
+var hrtime = require('/usr/vm/node_modules/hrtime');
+
+// this puts test stuff in global, so we need to tell jsl about that:
+/* jsl:import ../node_modules/nodeunit-plus/index.js */
+require('/usr/vm/node_modules/nodeunit-plus');
+
+test('test pretty hrtime and delta (static time)', function (t) {
+    [
+        {
+            then: [5, 0],
+            now: [5, 1],
+            delta: [0, 1],
+            s: '0.000000001s (1ns)'
+        },
+        {
+            then: [5, 0],
+            now: [5, 1000],
+            delta: [0, 1000],
+            s: '0.000001000s (1us)'
+        },
+        {
+            then: [5, 0],
+            now: [5, 1000000],
+            delta: [0, 1000000],
+            s: '0.001000000s (1ms)'
+        },
+        {
+            then: [5, 0],
+            now: [6, 0],
+            delta: [1, 0],
+            s: '1.000000000s (1s)'
+        },
+        {
+            then: [5, 0],
+            now: [65, 0],
+            delta: [60, 0],
+            s: '60.000000000s (1m)'
+        },
+        {
+            then: [5, 0],
+            now: [5, 500478],
+            delta: [0, 500478],
+            s: '0.000500478s (500.48us)'
+        }
+    ].forEach(function (o) {
+        var delta = hrtime.hrtimeDelta(o.now, o.then);
+        var s = hrtime.prettyHrtime(delta);
+
+        t.deepEqual(delta, o.delta, 'hrtimeDelta delta: '
+            + JSON.stringify(o.delta));
+        t.equal(s, o.s, 'prettyHrtime delta: ' + o.s);
+    });
+
+    t.end();
+});
+
+test('test hrtime comparator', function (t) {
+    var sorted_times = [
+        [0, 0],
+        [0, 500000000],
+        [1, 0],
+        [1, 500000000],
+        [2, 0],
+        [2, 500000000],
+        [3, 0],
+        [3, 500000000],
+        [4, 0]
+    ];
+    var unsorted_times = [
+        [0, 0],
+        [1, 0],
+        [2, 0],
+        [3, 0],
+        [4, 0],
+        [0, 500000000],
+        [1, 500000000],
+        [2, 500000000],
+        [3, 500000000]
+    ];
+
+    // sort the unsorted times
+    unsorted_times.sort(hrtime.hrtimeComparator);
+    t.deepEqual(unsorted_times, sorted_times, 'sorted array of hrtimes');
+
+    t.end();
+});
+
+test('assert hrtime', function (t) {
+    var hrtimes = [
+        [0, 0],
+        [0, 1],
+        process.hrtime()
+    ];
+    var non_hrtimes = [
+        undefined,
+        'foo',
+        42,
+        [0, 1, 2],
+        ['hello', 'world'],
+        [new Date(), NaN]
+    ];
+
+    hrtimes.forEach(function (hrt) {
+        t.doesNotThrow(function () {
+            hrtime.assertHrtime(hrt);
+        });
+    });
+    non_hrtimes.forEach(function (non_hrt) {
+        t.throws(function () {
+            hrtime.assertHrtime(non_hrt);
+        });
+    });
+
+    t.end();
+});
+
+test('hrtime string conversion', function (t) {
+    var hrt = process.hrtime();
+    var roundtrip = hrtime.stringToHrtime(hrtime.hrtimeToString(hrt));
+
+    t.deepEqual(roundtrip, hrt, 'round trip conversion');
+
+    t.end();
+});
