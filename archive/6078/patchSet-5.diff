commit d52a276f9121183085768e6dabb7eb50a7a37e95
Author: Tim Foster <tim.foster@joyent.com>
Date:   2019-04-10T22:37:06+01:00 (6 months ago)
    
    OS-7725 SmartOS VMWare image creation needs to adapt to loader changes
    OS-7728 SmartOS VMWare image fails to install
    OS-7731 SmartOS builds need to use serial for loader
    Portions contributed by: John Levon <john.levon@joyent.com>
    Reviewed by: John Levon <john.levon@joyent.com>
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>
    Reviewed by: Jason King <jason.king@joyent.com>
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: Brian Bennett <brian.bennett@joyent.com>

diff --git a/README.md b/README.md
index 115e3eff..172e9130 100644
--- a/README.md
+++ b/README.md
@@ -270,9 +270,9 @@ to the VGA console. To make an ISO or USB image you can run from the
 root of the smartos-live repository:
 
 ```
-$ ./tools/build_iso
-$ ./tools/build_usb
-$ ./tools/build_iso -c ttyb # sets the default console to ttyb
+$ ./tools/build_boot_image -r $ROOT
+$ ./tools/build_boot_image -I -r $ROOT
+$ ./tools/build_boot_image -I -r $ROOT -c ttyb # sets the default console to ttyb
 ```
 
 These will create images in the `output-usb` and `output-iso`
diff --git a/overlay/generic/smartdc/lib/smartos_prompt_config.sh b/overlay/generic/smartdc/lib/smartos_prompt_config.sh
index 3c49ff1d..762d6d1c 100755
--- a/overlay/generic/smartdc/lib/smartos_prompt_config.sh
+++ b/overlay/generic/smartdc/lib/smartos_prompt_config.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2018, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 # XXX - TODO
@@ -755,6 +755,12 @@ promptpool()
 						bootdisk = 1;
 				}
 				close(cmd);
+				cmd = "fstyp -v /dev/dsk/" $2 "s2 2>/dev/null";
+				while ((cmd | getline) > 0) {
+					if ($0 ~ /^Volume Label:/ && $3 == "SMARTOSBOOT")
+						bootdisk = 1;
+				}
+				close(cmd);
 				if (bootdisk)
 					next;
 				print diskinfo;
diff --git a/tools/build_boot_image b/tools/build_boot_image
index 82d68738..eefbef82 100755
--- a/tools/build_boot_image
+++ b/tools/build_boot_image
@@ -171,8 +171,12 @@ function populate_root()
 	readonly shadow=\'\$5\$2HOHRnK3\$NvLlm.1KQBbB0WjoP7xcIwGnllhzp2HnT.mDO7DpxYA\'
 
 	case "$bi_console" in
-	text)	console="text" ;;
-	tty*)	console="$bi_console,text" ;;
+	text) console="text,ttya,ttyb,ttyc,ttyd" ;;
+	ttya) console="ttya,ttyb,ttyc,ttyd,text" ;;
+	ttyb) console="ttyb,ttya,ttyc,ttyd,text" ;;
+	ttyc) console="ttyc,ttya,ttyb,ttyd,text" ;;
+	ttyd) console="ttyd,ttya,ttyb,ttyc,text" ;;
+
 	*)	echo "unknown console $bi_console" 2>&1
 		exit 1 ;;
 	esac
diff --git a/tools/build_vmware b/tools/build_vmware
index 6ddddd1e..6adccaff 100755
--- a/tools/build_vmware
+++ b/tools/build_vmware
@@ -11,7 +11,7 @@
 #
 
 #
-# Copyright 2015 Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
@@ -37,7 +37,7 @@ function bi_ensure_usb_image
 	if [[ -z "${bi_platform_name}" ]]; then
 		fail "\$bi_platform_name not set"
 	fi
-	bi_usb_image="output-usb/${bi_platform_name}.usb.bz2"
+	bi_usb_image="output-usb/${bi_platform_name}.usb.gz"
 
 	bi_emit_start 'Looking for USB image'
 	if [[ -f "${bi_usb_image}" ]]; then
@@ -53,7 +53,7 @@ function bi_ensure_usb_image
 
 	bi_emit_start 'Building USB image'
 	bi_emit_newline
-	if ! "${bi_wsroot}/tools/build_usb"; then
+	if ! ${bi_wsroot}/tools/build_boot_image -r ${bi_wsroot}; then
 		fail 'Failed to build USB image'
 	fi
 	bi_emit_done
@@ -93,7 +93,7 @@ function bi_ensure_fresh_template
 function bi_unpack_usb_image
 {
 	bi_emit_start 'Unpacking USB image into template'
-	if ! bzip2 --keep --decompress --stdout "${bi_usb_image}" \
+	if ! gunzip --decompress --stdout "${bi_usb_image}" \
 	    >"${bi_output_dir}/${bi_template_name}/smartos.img"; then
 		fail 'could not unpack USB image'
 	fi
@@ -106,10 +106,10 @@ function bi_generate_vmware_tar
 	local output_file
 
 	output_name=$(echo "${bi_platform_name}" | sed 's/^platform/smartos/')
-	output_file="${output_name}.vmwarevm.tar.bz2"
+	output_file="${output_name}.vmwarevm.tar.gz"
 
 	bi_emit_start 'Generating VMware tarball'
-	if ! (cd "${bi_output_dir}" && gtar -jcf "${output_file}" \
+	if ! (cd "${bi_output_dir}" && gtar -I pigz -cf "${output_file}" \
 	    "${bi_template_name}"); then
 		fail 'gtar failed'
 	fi
@@ -118,6 +118,13 @@ function bi_generate_vmware_tar
 	bi_emit_info 'VMware Output' "$(pwd)/${bi_output_dir}/${output_file}"
 }
 
+while getopts "r:" c $@; do
+	case "$c" in
+	r)	bi_wsroot=$(readlink -f $OPTARG) ;;
+	:)	usage ;;
+	*)	usage ;;
+	esac
+done
 
 #
 # Get us to the root of the workspace
