commit 03481022a2210b824fae958fea1d68fb1331ad44 (refs/changes/56/1856/1)
Author: Jason King <jason.king@joyent.com>
Date:   2017-04-26T18:59:39-05:00 (2 years, 5 months ago)
    
    NAPI-375 Multiple filter use on IP search endpoint seems to only heed first filter

diff --git a/lib/endpoints/search.js b/lib/endpoints/search.js
index 5dde889..be46c7c 100644
--- a/lib/endpoints/search.js
+++ b/lib/endpoints/search.js
@@ -60,6 +60,14 @@ function searchIPsFilterArgs(params) {
             continue;
         }
 
+        // Comparing the IP is superfluous, as the API already guarantees
+        // this.  Additionally, the saved IP in the stream (sipn_ip) is an
+        // object, while the passed in value will be a string, so the comparison
+        // will fail.
+        if (key === 'ip') {
+            continue;
+        }
+
         if (SIP_LIST_ARGS[key] === true) {
             list_args[key] = params[key];
         } else {
@@ -141,7 +149,7 @@ SearchIPNetworkStream.prototype._transform = function (net, _enc, done) {
                 return done();
             }
 
-            if (self.sipn_args.prop !== sip.prop) {
+            if (self.sipn_args[prop] !== sip[prop]) {
                 return done();
             }
         }
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 4b11955..f154c89 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -53,7 +53,7 @@ var MESSAGES = {
     PROV_END_TYPE_MISMATCH: 'provision_end_ip and subnet must both be ' +
         'IPv4 or IPv6 addresses',
 
-    SEARCH_NO_NETS: 'No networks found containing that IP address',
+    SEARCH_NO_NETS: 'No networks found matching search criteria',
     STR: 'must be a string',
     UNKNOWN_PARAMS: 'Unknown parameters',
     VLAN_USED: 'VLAN ID is already in use',
diff --git a/test/lib/ip.js b/test/lib/ip.js
index 5329038..ab5f477 100644
--- a/test/lib/ip.js
+++ b/test/lib/ip.js
@@ -101,6 +101,21 @@ function listIPs(t, opts, callback) {
         common.afterAPIlist.bind(null, t, opts, callback));
 }
 
+function searchIPs(t, opts, callback) {
+    var client = opts.client || mod_client.get();
+
+    assert.object(t, 't');
+    assert.string(opts.ip, 'opts.ip');
+    assert.object(opts.params, 'opts.params');
+
+    opts.type = TYPE;
+    opts.id = 'ip';
+
+    log.debug({ params: opts.params }, 'search IPs');
+
+    client.searchIPs(opts.ip, opts.params,
+        common.afterAPIlist.bind(null, t, opts, callback));
+}
 
 /**
  * Update an IP and compare the output
@@ -131,5 +146,6 @@ module.exports = {
     get: getIP,
     freeIP: freeIPrecord,
     list: listIPs,
+    search: searchIPs,
     update: updateIP
 };
diff --git a/test/unit/search-ips.test.js b/test/unit/search-ips.test.js
index b9974e6..b656d42 100644
--- a/test/unit/search-ips.test.js
+++ b/test/unit/search-ips.test.js
@@ -18,7 +18,9 @@ var constants = require('../../lib/util/constants');
 var fmt = require('util').format;
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
+var mod_ip = require('../lib/ip');
 var mod_net = require('../lib/net');
+var mod_nic = require('../lib/nic');
 var mod_nicTag = require('../lib/nic-tag');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
@@ -229,7 +231,66 @@ test('IP not in any networks', function (t) {
     });
 });
 
+test('Search', function (t) {
+    var ip = fmt('10.0.%d.200', h.NET_NUM - 1);
 
+    var params = {
+        belongs_to_type: 'zone',
+        belongs_to_uuid: mod_uuid.v4(),
+        ip: ip,
+        owner_uuid: mod_uuid.v4()
+    };
+
+    var ipObj = {};
+
+    h.copyParams(params, ipObj);
+
+    ipObj.reserved = false;
+    ipObj.free = false;
+
+    t.test('create ip', function (t2) {
+        mod_nic.provision(t2, {
+            net: NETS[2].uuid,
+            params: params,
+            partialExp: params
+        }, function (_, res) {
+            ipObj.network_uuid = res.network_uuid;
+            return t2.end();
+        });
+    });
+
+    t.test('find - just ip', function (t2) {
+        mod_ip.search(t2, {
+            ip: ip,
+            params: {},
+            present: [ ipObj ]
+        });
+    });
+
+    t.test('find - ip & belongs_to_uuid', function (t2) {
+        mod_ip.search(t2, {
+            ip: ip,
+            params: {
+                belongs_to_uuid: ipObj.belongs_to_uuid
+            },
+            present: [ ipObj ]
+        });
+    });
+
+    t.test('find - ip & belongs_to_uuid doesn\'t match', function (t2) {
+        mod_ip.search(t2, {
+            ip: ip,
+            params: {
+                belongs_to_uuid: mod_uuid.v4()
+            },
+            expCode: 404,
+            expErr: {
+                code: 'ResourceNotFound',
+                message: constants.msg.SEARCH_NO_NETS
+            }
+        });
+    });
+});
 
 // --- Teardown
 
