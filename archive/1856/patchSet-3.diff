From b56b23588d68923b8c0445c9a5ae180e5b4f26dc Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 26 Apr 2017 18:23:43 +0000
Subject: [PATCH] NAPI-407 Check for ObjectNotFoundErrors on NIC deletes
 Reviewed by: Todd Whiteman <todd.whiteman@joyent.com> Approved by: Todd
 Whiteman <todd.whiteman@joyent.com>

---
 lib/models/nic/del.js  | 20 +++++++++++-
 test/unit/nics.test.js | 70 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 89 insertions(+), 1 deletion(-)

diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index b37efe2..2927814 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -17,8 +17,10 @@
 var assert = require('assert-plus');
 var common = require('./common');
 var getNic = require('./get').get;
+var restify = require('restify');
 var validate = require('../../util/validate');
 var vasync = require('vasync');
+var VError = require('verror');
 
 
 // --- Internal
@@ -102,6 +104,22 @@ function delIP(opts, ip) {
 }
 
 
+/**
+ * Perform a normal batch commit, but check if the NIC has already been removed
+ * from underneath us.
+ */
+function commitBatch(opts, callback) {
+    common.commitBatch(opts, function (err) {
+        if (err && VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
+            callback(new restify.ResourceNotFoundError(err, 'nic not found'));
+            return;
+        }
+
+        callback(err);
+    });
+}
+
+
 // --- Exports
 
 
@@ -120,7 +138,7 @@ function del(opts, callback) {
             listVnetCns,
             addNicToBatch,
             delIPs,
-            common.commitBatch
+            commitBatch
         ]
     }, function (err) {
         if (err) {
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index 9377a8a..e328064 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -2593,6 +2593,76 @@ test('Delete nic - IP ownership changed underneath', function (t) {
 });
 
 
+test('NAPI-407: Concurrent deletes should fail with 404s', function (t) {
+    var params = {
+        belongs_to_type: 'zone',
+        belongs_to_uuid: mod_uuid.v4(),
+        owner_uuid: mod_uuid.v4()
+    };
+    var nic;
+
+    t.plan(2);
+
+    t.test('provision', function (t2) {
+        NAPI.provisionNic(NET2.uuid, params, function (err, res) {
+            if (h.ifErr(t2, err, 'provision new nic')) {
+                t2.end();
+                return;
+            }
+
+            nic = res;
+            for (var p in params) {
+                t2.equal(nic[p], params[p], p + ' correct');
+            }
+
+            t2.equal(res.ip, h.nextProvisionableIP(NET2), 'IP');
+
+            t2.end();
+        });
+    });
+
+    t.test('delete nic', function (t2) {
+        var barrier = vasync.barrier();
+        var deleted = false;
+        var done = 0;
+
+        barrier.on('drain', function () {
+            t2.ok(deleted, 'should have deleted NIC once');
+            t2.end();
+        });
+
+        function onDelete(err, _, req, res) {
+            if (err) {
+                t2.deepEqual(err.statusCode, 404, 'nic should be gone');
+                t2.deepEqual(err.body, {
+                    code: 'ResourceNotFound',
+                    message: 'nic not found'
+                }, 'correct error body');
+            } else {
+                if (deleted) {
+                    t2.deepEqual(null, res, 'should only delete once');
+                } else {
+                    t2.equal(res.statusCode, 204, 'successfully deleted');
+                    deleted = true;
+                }
+            }
+
+            done += 1;
+            barrier.done('delete-' + done.toString());
+        }
+
+        barrier.start('delete-1');
+        NAPI.deleteNic(nic.mac, onDelete);
+
+        barrier.start('delete-2');
+        NAPI.deleteNic(nic.mac, onDelete);
+
+        barrier.start('delete-3');
+        NAPI.deleteNic(nic.mac, onDelete);
+    });
+});
+
+
 test('antispoof options', function (t) {
     t.plan(6);
     var d = {};
-- 
2.21.0

