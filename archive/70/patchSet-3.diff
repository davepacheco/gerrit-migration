From b74ad36a3d3219256d900357bee85e7094c094fb Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Wed, 13 Jul 2016 22:07:26 +0000
Subject: [PATCH] OS-5482 SIGAR cannot report disk I/O Reviewed by: Patrick
 Mooney <patrick.mooney@joyent.com>

---
 .../lib/brand/lx/zone/lx_boot_zone_ubuntu.ksh |  9 +----
 .../uts/common/brand/lx/devfs/lxd_vfsops.c    |  9 ++++-
 usr/src/uts/common/brand/lx/syscall/lx_stat.c | 39 ++++++++++++++++++-
 3 files changed, 46 insertions(+), 11 deletions(-)

diff --git a/usr/src/lib/brand/lx/zone/lx_boot_zone_ubuntu.ksh b/usr/src/lib/brand/lx/zone/lx_boot_zone_ubuntu.ksh
index 2d664be89d..27d047e4ca 100644
--- a/usr/src/lib/brand/lx/zone/lx_boot_zone_ubuntu.ksh
+++ b/usr/src/lib/brand/lx/zone/lx_boot_zone_ubuntu.ksh
@@ -29,13 +29,6 @@ safe_dir /etc/network
 safe_dir /etc/network/interfaces.d
 safe_dir /etc/network/interfaces.d/smartos
 
-ZPOOL=`df $ZONEROOT | awk -F '[()]' '{split($2, field, "/"); print field[1]; }'`
-if [ -z "$ZPOOL" ]; then
-	ROOTDEV="/"
-else
-	ROOTDEV="/dev/$ZPOOL"
-fi
-
 # Populate resolve.conf setup files
 zonecfg -z $ZONENAME info attr name=resolvers | awk '
 BEGIN {
@@ -122,7 +115,7 @@ emits filesystem
 emits mounted
 
 script
-    echo "$ROOTDEV / zfs rw 0 0" > /etc/mtab
+    echo "/dev/zfsds0 / zfs rw 0 0" > /etc/mtab
     echo "proc /proc proc rw,noexec,nosuid,nodev 0 0" >> /etc/mtab
 
     /sbin/initctl emit --no-wait virtual-filesystems
diff --git a/usr/src/uts/common/brand/lx/devfs/lxd_vfsops.c b/usr/src/uts/common/brand/lx/devfs/lxd_vfsops.c
index b6c65c8b3b..b2e2b9b9e3 100644
--- a/usr/src/uts/common/brand/lx/devfs/lxd_vfsops.c
+++ b/usr/src/uts/common/brand/lx/devfs/lxd_vfsops.c
@@ -503,14 +503,21 @@ lxd_mount(vfs_t *vfsp, vnode_t *mvp, struct mounta *uap, cred_t *cr)
 
 	vd = list_head(lxzdata->lxzd_vdisks);
 	while (vd != NULL) {
-		/* only create links for actual zvols */
 		if (vd->lxvd_type == LXVD_ZVOL) {
 			char lnknm[MAXPATHLEN];
 
+			/* Create a symlink for the actual zvol. */
 			(void) snprintf(lnknm, sizeof (lnknm),
 			    "./zvol/dsk/%s", vd->lxvd_real_name);
 			(void) lxd_symlink(LDNTOV(ldn), vd->lxvd_name, &vattr,
 			    lnknm, cr, NULL, 0);
+		} else if (vd->lxvd_type == LXVD_ZFS_DS) {
+			/*
+			 * Create a symlink for the root "disk" using /dev/zfs
+			 * as the target device.
+			 */
+			(void) lxd_symlink(LDNTOV(ldn), vd->lxvd_name, &vattr,
+			    "./zfs", cr, NULL, 0);
 		}
 
 		vd = list_next(lxzdata->lxzd_vdisks, vd);
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_stat.c b/usr/src/uts/common/brand/lx/syscall/lx_stat.c
index 2ec8a4542d..81e37dafe2 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_stat.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_stat.c
@@ -114,14 +114,49 @@ static void
 lx_stat_xlate_dev(vattr_t *vattr)
 {
 	lx_zone_data_t *lxzd = ztolxzd(curproc->p_zone);
-	dev_t dev = vattr->va_fsid;
+	dev_t dev;
 	lx_virt_disk_t *vd;
+	boolean_t is_dev;
 
-	/* Substitute emulated major/minor on mounted datasets */
+	if (S_ISCHR(vattr->va_mode) || S_ISBLK(vattr->va_mode)) {
+		dev = vattr->va_rdev;
+		is_dev = B_TRUE;
+	} else {
+		dev = vattr->va_fsid;
+		is_dev = B_FALSE;
+	}
+
+	/*
+	 * See if this is the /dev/zfs device. If it is, the device number has
+	 * already been converted to Linux format in the lx devfs so we have
+	 * to check for that and not a native major/minor style.
+	 */
+	if (S_ISCHR(vattr->va_mode) &&
+	    LX_GETMAJOR(dev) == getmajor(lxzd->lxzd_zfs_dev) &&
+	    LX_GETMINOR(dev) == 0) {
+		/*
+		 * We use the /dev/zfs device as a placeholder for our in-zone
+		 * fabricated /dev/zfsds0 device that we're pretending / is
+		 * mounted on. lx_zone_get_zfsds has pre-allocated this
+		 * entry in the emulated device list. Reset dev so we can
+		 * properly match in the following loop.
+		 */
+		dev = curproc->p_zone->zone_rootvp->v_vfsp->vfs_dev;
+	}
+
+	/* Substitute emulated major/minor on zvols or mounted datasets. */
 	vd = list_head(lxzd->lxzd_vdisks);
 	while (vd != NULL) {
 		if (vd->lxvd_real_dev == dev) {
 			dev = vd->lxvd_emul_dev;
+			/*
+			 * We only update rdev for matching zfds/zvol devices
+			 * so that the other devices are unchanged.
+			 */
+			if (is_dev) {
+				vattr->va_rdev = LX_MAKEDEVICE(getmajor(dev),
+				    getminor(dev));
+			}
 			break;
 		}
 		vd = list_next(lxzd->lxzd_vdisks, vd);
-- 
2.21.0

