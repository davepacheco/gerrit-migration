commit 1f18e8afe70bfb109a7e7c0c00123b4566c82663 (refs/changes/23/2223/1)
Author: Jordan Hendricks <jordan.hendricks@joyent.com>
Date:   2017-07-15T00:11:20+00:00 (2 years, 3 months ago)
    
    MANTA-3350 Add query parameter to muskie that allows operators to delete
    upload directories and parts
    Reviewed by;
    Approved by:

diff --git a/lib/server.js b/lib/server.js
index e2056e4..2d38e99 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -429,13 +429,15 @@ function createServer(options, clearProxy) {
     return (server);
 }
 
+
 function forbiddenHandler(req, res, next) {
-        req.log.info('Method ' + req.method + ' disallowed for ' + req.url);
-        res.send(405);
-        next(false);
+    req.log.debug('Method ' + req.method + ' disallowed for ' + req.url);
+    res.send(405);
+    next(false);
 }
 
 
+
 /*
  * This adds the routes for the majority of multipart upload API endpoints,
  * including:
@@ -526,24 +528,6 @@ function addMultipartUploadRoutes(server) {
         contentType: '*/*'
     }, uploads.redirectHandler());
 
-    /*
-     * Path: /:account/uploads/[0-f]/:id
-     *
-     * Allowed: GET (list-parts), HEAD
-     * Disallowed: PUT, POST, DELETE
-     */
-    server.put({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
-    server.post({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
-    server.del({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
     /*
      * Path: /:account/uploads/[0-f]/:id/state
      *
@@ -633,12 +617,34 @@ function addMultipartUploadRoutes(server) {
  * API -- that is, the uploading of parts.
  */
 function addMultipartUploadDataPlaneRoutes(server) {
+    /*
+     * Path: /:account/uploads/[0-f]/:id
+     *
+     * Allowed: GET (list-parts), HEAD
+     * Disallowed: PUT, POST, DELETE (except with override query param)
+     */
+    server.del({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, uploads.delUploadDirHandler());
+
+    server.put({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, forbiddenHandler);
+
+    server.post({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, forbiddenHandler);
+
     /*
      * Path: /:account/uploads/[0-f]/:id/:partNum
      *
      * Allowed: PUT (upload-part), HEAD
-     * Disallowed: GET, POST, DELETE
+     * Disallowed: GET, POST, DELETE (except with override query param)
      */
+    server.del({
+        path: '/:account/uploads/[0-f]+/:id/:partNum'
+    }, uploads.delPartHandler());
+
     server.put({
         path: '/:account/uploads/[0-f]+/:id/:partNum',
         name: 'UploadPart',
@@ -652,12 +658,9 @@ function addMultipartUploadDataPlaneRoutes(server) {
     server.post({
         path: '/:account/uploads/[0-f]+/:id/:partNum'
     }, forbiddenHandler);
-
-    server.del({
-        path: '/:account/uploads/[0-f]+/:id/:partNum'
-    }, forbiddenHandler);
 }
 
+
 ///--- Exports
 
 module.exports = {
diff --git a/lib/uploads/del.js b/lib/uploads/del.js
new file mode 100644
index 0000000..36c5afc
--- /dev/null
+++ b/lib/uploads/del.js
@@ -0,0 +1,67 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var dir = require('../dir');
+var obj = require('../obj');
+
+
+/*
+ * Typically, deletion of parts and uploaded directories from MPUs is not
+ * allowed. However, we make this available to operator accounts provided
+ * the query parameter "override=true" is provided in the URL.
+ *
+ * After verifying these checks, we call into the existing handlers for deleting
+ * objects or directories.
+ */
+
+
+function checkOperator(req, res, next) {
+    if (!req.caller.account.isOperator) {
+        res.send(405);
+        next(false);
+    } else {
+        next();
+    }
+}
+
+
+function checkOverride(req, res, next) {
+    if (req.query.override === 'true') {
+        next();
+    } else {
+        res.send(403);
+        next(false);
+    }
+}
+
+
+///--- Exports
+
+module.exports = {
+
+    delUploadDirHandler: function delUploadDirHandler() {
+        var chain = [
+            checkOperator,
+            checkOverride,
+            dir.deleteDirectoryHandler()
+        ];
+        return (chain);
+    },
+
+
+    delPartHandler: function delPartHandler() {
+        var chain = [
+            checkOperator,
+            checkOverride,
+            obj.deleteObjectHandler()
+        ];
+        return (chain);
+    }
+};
diff --git a/lib/uploads/index.js b/lib/uploads/index.js
index da67ab5..ff61c30 100644
--- a/lib/uploads/index.js
+++ b/lib/uploads/index.js
@@ -21,9 +21,10 @@ function reExport(obj) {
 ///--- Exports
 
 module.exports = {};
+reExport(require('./abort'));
 reExport(require('./create'));
-reExport(require('./upload'));
 reExport(require('./commit'));
-reExport(require('./abort'));
+reExport(require('./del'));
 reExport(require('./get'));
 reExport(require('./redirect'));
+reExport(require('./upload'));
diff --git a/test/mpu/del.test.js b/test/mpu/del.test.js
new file mode 100644
index 0000000..95df2d9
--- /dev/null
+++ b/test/mpu/del.test.js
@@ -0,0 +1,214 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var path = require('path');
+var uuid = require('node-uuid');
+var vasync = require('vasync');
+var verror = require('verror');
+
+if (require.cache[path.join(__dirname, '/../helper.js')])
+    delete require.cache[path.join(__dirname, '/../helper.js')];
+if (require.cache[__dirname + '/helper.js'])
+    delete require.cache[__dirname + '/helper.js'];
+var testHelper = require('../helper.js');
+var helper = require('./helper.js');
+
+var after = testHelper.after;
+var before = testHelper.before;
+var test = testHelper.test;
+
+var ifErr = helper.ifErr;
+
+before(function (cb) {
+    helper.initMPUTester.call(this, cb);
+});
+
+
+after(function (cb) {
+    helper.cleanupMPUTester.call(this, cb);
+});
+
+
+// Delete parts/upload directories: allowed cases
+
+test('del upload directory with operator override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var opts = {
+            query: {
+                override: true
+            }
+        };
+        self.client.unlink(self.uploadPath(), opts, function (err2, res) {
+            if (ifErr(t, err2, 'unlink')) {
+                t.end();
+                return;
+            }
+
+            t.ok(res);
+            t.checkResponse(res, 204);
+            t.end();
+        });
+    });
+});
+
+
+test('del part with operator override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            var opts = {
+                query: {
+                    override: true
+                }
+            };
+            self.client.unlink(self.uploadPath(), opts, function (err3, res) {
+                if (ifErr(t, err3, 'unlink')) {
+                    t.end();
+                    return;
+                }
+
+                t.ok(res);
+                t.checkResponse(res, 204);
+                t.end();
+            });
+        });
+    });
+});
+
+
+// Delete parts/upload directories: operator, no override provided
+
+test('del upload directory: operator but no override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        self.client.unlink(self.uploadPath(), function (err2, res) {
+            if (ifErr(t, err2, 'unlink')) {
+                t.end();
+                return;
+            }
+
+            t.ok(res);
+            t.checkResponse(res, 405);
+            t.end();
+        });
+    });
+});
+
+
+test('del part: operator but no override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            self.client.unlink(self.uploadPath(), function (err3, res) {
+                if (ifErr(t, err3, 'unlink')) {
+                    t.end();
+                    return;
+                }
+
+                t.ok(res);
+                t.checkResponse(res, 405);
+                t.end();
+            });
+        });
+    });
+});
+
+
+// Delete parts/upload directories: non-operator, no override provided
+
+test('del upload directory: operator but no override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        self.client.unlink(self.uploadPath(), function (err2, res) {
+            if (ifErr(t, err2, 'unlink')) {
+                t.end();
+                return;
+            }
+
+            t.ok(res);
+            t.checkResponse(res, 405);
+            t.end();
+        });
+    });
+});
+
+
+test('del part: operator but no override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err2, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            self.client.unlink(self.uploadPath(), function (err3, res) {
+                if (ifErr(t, err3, 'unlink')) {
+                    t.end();
+                    return;
+                }
+
+                t.ok(res);
+                t.checkResponse(res, 405);
+                t.end();
+            });
+        });
+    });
+});
