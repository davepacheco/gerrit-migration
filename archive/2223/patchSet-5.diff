From 4485ef564c2f70b629b1f930e8e113f7f9fe32a8 Mon Sep 17 00:00:00 2001
From: Jordan Hendricks <jordan.hendricks@joyent.com>
Date: Sat, 15 Jul 2017 00:11:20 +0000
Subject: [PATCH] MANTA-3350 Add query parameter to muskie that allows
 operators to delete upload directories and parts Reviewed by; Approved by:

---
 README.md            |  19 +--
 lib/server.js        |  55 +++++----
 lib/uploads/del.js   |  67 ++++++++++
 lib/uploads/index.js |   5 +-
 package.json         |   1 +
 test/mpu/del.test.js | 285 +++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 397 insertions(+), 35 deletions(-)
 create mode 100644 lib/uploads/del.js
 create mode 100644 test/mpu/del.test.js

diff --git a/README.md b/README.md
index 2b6def4..c1e2cd0 100644
--- a/README.md
+++ b/README.md
@@ -35,23 +35,28 @@ prerequisites in your development environment:
    to Manta.  The manta-deployment zone includes a tool called add-dev-user that
    can be used to do this.  You can find it at
    /opt/smartdc/manta-deployment/tools/add-dev-user.
-   Note: You should not use the "poseidon" user for running the tests.
 2. The ssh key that you use to authenticate as this account should be
    passwordless.  It must also be stored locally, with the public key being
    called $HOME/.ssh/id\_rsa.pub.
-3. Your SDC and Manta environment variables should point at the SDC and Manta
+3. Some tests also require an operator account to test with.  By default, the
+   tests will use the "poseidon" account, but you must provide a valid private
+   key for the poseidon account at `$HOME/.ssh/id_rsa_poseidon`.
+   Optionally, you can provide a separate operator SDC account by setting
+   `MANTA_OPERATOR_USER` and the location of its private key at
+   `MANTA_OPERATOR_KEYFILE` in your environment.
+4. Your SDC and Manta environment variables should point at the SDC and Manta
    instances that you're testing with.  The SDC and Manta variables should refer
    to the same user account, and they should both refer to the ssh key stored in
    $HOME/.ssh/id\_rsa.pub mentioned above.
-4. Before running the tests, you must set the `MUSKIE_SALT`, `MUSKIE_KEY`, and
-   `MUSKIE_IV` environment variables to the same values being used for the
-   muskie instances in your existing Manta installation.  You can find these
-   values in SAPI, using:
+5. Before running the tests, you must set the `MUSKIE_SALT`, `MUSKIE_KEY`, and
+   `MUSKIE_IV` environment variables to the same values being used for the muskie
+   instances in your existing Manta installation.  You can find these values in
+   SAPI, using:
 
         sdc-sapi /services?application_uuid="$(sdc-sapi \
             /applications?name=manta | json -H application_uuid)&name=webapi" |
             json -H -a metadata
-5. You'll need to create a muskie configuration file that's appropriate for your
+6. You'll need to create a muskie configuration file that's appropriate for your
    environment.  The easiest way to do this is to copy "etc/config.coal.json" in
    this repo into a new file "config.json".  Then:
 
diff --git a/lib/server.js b/lib/server.js
index b04eb4b..5389edd 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -444,13 +444,15 @@ function createServer(options, clearProxy) {
     return (server);
 }
 
+
 function forbiddenHandler(req, res, next) {
-        req.log.info('Method ' + req.method + ' disallowed for ' + req.url);
-        res.send(405);
-        next(false);
+    req.log.debug('Method ' + req.method + ' disallowed for ' + req.url);
+    res.send(405);
+    next(false);
 }
 
 
+
 /*
  * This adds the routes for the majority of multipart upload API endpoints,
  * including:
@@ -541,24 +543,6 @@ function addMultipartUploadRoutes(server) {
         contentType: '*/*'
     }, uploads.redirectHandler());
 
-    /*
-     * Path: /:account/uploads/[0-f]/:id
-     *
-     * Allowed: GET (list-parts), HEAD
-     * Disallowed: PUT, POST, DELETE
-     */
-    server.put({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
-    server.post({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
-    server.del({
-        path: '/:account/uploads/[0-f]+/:id'
-    }, forbiddenHandler);
-
     /*
      * Path: /:account/uploads/[0-f]/:id/state
      *
@@ -648,12 +632,34 @@ function addMultipartUploadRoutes(server) {
  * API -- that is, the uploading of parts.
  */
 function addMultipartUploadDataPlaneRoutes(server) {
+    /*
+     * Path: /:account/uploads/[0-f]/:id
+     *
+     * Allowed: GET (list-parts), HEAD
+     * Disallowed: PUT, POST, DELETE (except with override query param)
+     */
+    server.del({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, uploads.delUploadDirHandler());
+
+    server.put({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, forbiddenHandler);
+
+    server.post({
+        path: '/:account/uploads/[0-f]+/:id'
+    }, forbiddenHandler);
+
     /*
      * Path: /:account/uploads/[0-f]/:id/:partNum
      *
      * Allowed: PUT (upload-part), HEAD
-     * Disallowed: GET, POST, DELETE
+     * Disallowed: GET, POST, DELETE (except with override query param)
      */
+    server.del({
+        path: '/:account/uploads/[0-f]+/:id/:partNum'
+    }, uploads.delPartHandler());
+
     server.put({
         path: '/:account/uploads/[0-f]+/:id/:partNum',
         name: 'UploadPart',
@@ -667,12 +673,9 @@ function addMultipartUploadDataPlaneRoutes(server) {
     server.post({
         path: '/:account/uploads/[0-f]+/:id/:partNum'
     }, forbiddenHandler);
-
-    server.del({
-        path: '/:account/uploads/[0-f]+/:id/:partNum'
-    }, forbiddenHandler);
 }
 
+
 ///--- Exports
 
 module.exports = {
diff --git a/lib/uploads/del.js b/lib/uploads/del.js
new file mode 100644
index 0000000..2549b8d
--- /dev/null
+++ b/lib/uploads/del.js
@@ -0,0 +1,67 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var dir = require('../dir');
+var obj = require('../obj');
+
+
+/*
+ * Typically, deletion of parts and uploaded directories from MPUs is not
+ * allowed. However, we make this available to operator accounts provided
+ * the query parameter "override=true" is provided in the URL.
+ *
+ * After verifying these checks, we call into the existing handlers for deleting
+ * objects or directories to finish the DELETE.
+ */
+
+
+function checkOperator(req, res, next) {
+    if (!req.caller.account.isOperator) {
+        res.send(405);
+        next(false);
+    } else {
+        next();
+    }
+}
+
+
+function checkOverride(req, res, next) {
+    if (req.query.override === 'true') {
+        next();
+    } else {
+        res.send(422);
+        next(false);
+    }
+}
+
+
+///--- Exports
+
+module.exports = {
+
+    delUploadDirHandler: function delUploadDirHandler() {
+        var chain = [
+            checkOperator,
+            checkOverride,
+            dir.deleteDirectoryHandler()
+        ];
+        return (chain);
+    },
+
+
+    delPartHandler: function delPartHandler() {
+        var chain = [
+            checkOperator,
+            checkOverride,
+            obj.deleteObjectHandler()
+        ];
+        return (chain);
+    }
+};
diff --git a/lib/uploads/index.js b/lib/uploads/index.js
index da67ab5..ff61c30 100644
--- a/lib/uploads/index.js
+++ b/lib/uploads/index.js
@@ -21,9 +21,10 @@ function reExport(obj) {
 ///--- Exports
 
 module.exports = {};
+reExport(require('./abort'));
 reExport(require('./create'));
-reExport(require('./upload'));
 reExport(require('./commit'));
-reExport(require('./abort'));
+reExport(require('./del'));
 reExport(require('./get'));
 reExport(require('./redirect'));
+reExport(require('./upload'));
diff --git a/package.json b/package.json
index 490ff4a..16192a4 100644
--- a/package.json
+++ b/package.json
@@ -36,6 +36,7 @@
         "moray": "3.3.0",
         "once": "1.3.0",
         "restify": "2.6.3",
+        "sshpk": "1.13.1",
         "vasync": "^1.5.0",
         "verror": "^1.9.0",
         "watershed": "0.3.0",
diff --git a/test/mpu/del.test.js b/test/mpu/del.test.js
new file mode 100644
index 0000000..8d829b8
--- /dev/null
+++ b/test/mpu/del.test.js
@@ -0,0 +1,285 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var fs = require('fs');
+
+var manta = require('manta');
+var path = require('path');
+var sshpk = require('sshpk');
+var uuid = require('node-uuid');
+var vasync = require('vasync');
+var verror = require('verror');
+
+if (require.cache[path.join(__dirname, '/../helper.js')])
+    delete require.cache[path.join(__dirname, '/../helper.js')];
+if (require.cache[__dirname + '/helper.js'])
+    delete require.cache[__dirname + '/helper.js'];
+var testHelper = require('../helper.js');
+var helper = require('./helper.js');
+
+var after = testHelper.after;
+var before = testHelper.before;
+var test = testHelper.test;
+
+var ifErr = helper.ifErr;
+
+/*
+ * We need an operator account for these tests, so we use poseidon, unless an
+ * alternate one is provide.
+ */
+var TEST_OPERATOR = 'poseidon' || process.env.MANTA_OPERATOR_USER;
+var TEST_OPERATOR_KEY = (process.env.HOME + '/.ssh/id_rsa_poseidon') ||
+                         process.env.MANTA_OPERATOR_KEYFILE;
+
+before(function (cb) {
+    helper.initMPUTester.call(this, cb);
+});
+
+
+after(function (cb) {
+    helper.cleanupMPUTester.call(this, cb);
+});
+
+/*
+ * Helper to create a Manta client for the operator account.
+ *
+ * Parameters:
+ *  - user: the operator account
+ *  - keyFile: local path to the private key for this account
+ */
+function createOperatorClient(user, keyFile) {
+    var key = fs.readFileSync(keyFile);
+    var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
+
+    var log = testHelper.createLogger();
+    var client = manta.createClient({
+        agent: false,
+        connectTimeout: 2000,
+        log: log,
+        retry: false,
+        sign: manta.privateKeySigner({
+            key: key,
+            keyId: keyId,
+            log: log,
+            user: user
+        }),
+        rejectUnauthorized: false,
+        url: process.env.MANTA_URL || 'http://localhost:8080',
+        user: user
+    });
+
+    return (client);
+}
+
+
+// Delete parts/upload directories: allowed cases
+
+test('del upload directory with operator override', function (t) {
+    var self = this;
+
+    self.client.close();
+    self.client = createOperatorClient(TEST_OPERATOR, TEST_OPERATOR_KEY);
+
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var opts = {
+            query: {
+                override: true
+            }
+        };
+        self.client.unlink(self.uploadPath(), opts, function (err2, res) {
+            if (ifErr(t, err2, 'unlink')) {
+                t.end();
+                return;
+            }
+
+            t.ok(res);
+            t.checkResponse(res, 204);
+            t.end();
+        });
+    });
+});
+
+
+test('del part with operator override', function (t) {
+    var self = this;
+
+    self.client.close();
+    self.client = createOperatorClient(TEST_OPERATOR, TEST_OPERATOR_KEY);
+
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            var opts = {
+                query: {
+                    override: true
+                }
+            };
+            self.client.unlink(self.uploadPath(pn), opts, function (err3, res) {
+                if (ifErr(t, err3, 'unlink')) {
+                    t.end();
+                    return;
+                }
+
+                t.ok(res);
+                t.checkResponse(res, 204);
+                t.end();
+            });
+        });
+    });
+});
+
+
+// Delete parts/upload directories: operator, no override provided
+
+test('del upload directory: operator but no override', function (t) {
+    var self = this;
+
+    self.client.close();
+    self.client = createOperatorClient(TEST_OPERATOR, TEST_OPERATOR_KEY);
+
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        self.client.unlink(self.uploadPath(), function (err2, res) {
+            t.ok(err2);
+            if (!err2) {
+                return (t.end());
+            }
+            t.ok(verror.hasCauseWithName(err2,
+                'UnprocessableEntityError'), err2);
+            t.checkResponse(res, 422);
+            t.end();
+        });
+    });
+});
+
+
+test('del part: operator but no override', function (t) {
+    var self = this;
+
+    self.client.close();
+    self.client = createOperatorClient(TEST_OPERATOR, TEST_OPERATOR_KEY);
+
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            self.client.unlink(self.uploadPath(pn), function (err3, res) {
+                t.ok(err3);
+                if (!err3) {
+                    return (t.end());
+                }
+                t.ok(verror.hasCauseWithName(err3,
+                    'UnprocessableEntityError'), err3);
+                t.checkResponse(res, 422);
+                t.end();
+            });
+        });
+    });
+});
+
+
+// Delete parts/upload directories: non-operator, override provided
+
+test('del upload directory: non-operator with override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var opts = {
+            query: {
+                override: true
+            }
+        };
+
+        self.client.unlink(self.uploadPath(), opts, function (err2, res) {
+            t.ok(err2);
+            if (!err2) {
+                return (t.end());
+            }
+            t.ok(verror.hasCauseWithName(err2,
+                'MethodNotAllowedError'), err2);
+            t.checkResponse(res, 405);
+            t.end();
+        });
+    });
+});
+
+
+test('del part: non-operator with override', function (t) {
+    var self = this;
+    var h = {};
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        var pn = helper.MIN_PART_NUM;
+        self.writeTestObject(self.uploadId, pn, function (err2, _) {
+            if (ifErr(t, err2, 'uploaded part')) {
+                t.end();
+                return;
+            }
+
+            var opts = {
+                query: {
+                    override: true
+                }
+            };
+
+            self.client.unlink(self.uploadPath(pn), opts, function (err3, res) {
+                t.ok(err3);
+                if (!err3) {
+                    return (t.end());
+                }
+                t.ok(verror.hasCauseWithName(err3,
+                    'MethodNotAllowedError'), err3);
+                t.checkResponse(res, 405);
+                t.end();
+            });
+        });
+    });
+});
-- 
2.21.0

