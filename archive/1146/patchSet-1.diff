From a5f113a714722666d36d2700790a8b8dae2073ed Mon Sep 17 00:00:00 2001
From: Dillon Amburgey <dillona@dillona.com>
Date: Mon, 19 Dec 2016 22:00:00 -0500
Subject: [PATCH] joyent/node-triton#158 tritonapi image cache never expires

---
 lib/tritonapi.js | 57 +++++++++++++++++++++++++++++-------------------
 1 file changed, 34 insertions(+), 23 deletions(-)

diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 9b34f15..70e79bd 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -375,33 +375,44 @@ TritonApi.prototype._cacheGetJson = function _cacheGetJson(key, cb) {
     assert.string(key, 'key');
     assert.func(cb, 'cb');
 
+    var ttl = 5 * 60 * 1000; // timeout of cache file info (ms)
+
     var keyPath = path.resolve(this.cacheDir, key);
-    fs.readFile(keyPath, 'utf8', function (err, data) {
-        if (err && err.code === 'ENOENT') {
-            self.log.trace({keyPath: keyPath},
-                'cache file does not exist');
-            return cb();
-        } else if (err) {
-            self.log.warn({err: err, keyPath: keyPath},
-                'error reading cache file');
-            return cb();
-        }
-        var obj;
-        try {
-            obj = JSON.parse(data);
-        } catch (dataErr) {
-            self.log.trace({err: dataErr, keyPath: keyPath},
-                'error parsing JSON cache file, removing');
-            fs.unlink(keyPath, function (err2) {
-                if (err2) {
-                    self.log.warn({err: err2},
-                        'failed to remove JSON cache file');
+    fs.stat(keyPath, function (statErr, stats) {
+        if (!statErr &&
+            stats.mtime.getTime() + ttl >= (new Date()).getTime()) {
+            fs.readFile(keyPath, 'utf8', function (err, data) {
+                if (err && err.code === 'ENOENT') {
+                    self.log.trace({keyPath: keyPath},
+                                   'cache file does not exist');
+                    return cb();
+                } else if (err) {
+                    self.log.warn({err: err, keyPath: keyPath},
+                                  'error reading cache file');
+                    return cb();
+                }
+                var obj;
+                try {
+                    obj = JSON.parse(data);
+                } catch (dataErr) {
+                    self.log.trace({err: dataErr, keyPath: keyPath},
+                                   'error parsing JSON cache file, removing');
+                    fs.unlink(keyPath, function (err2) {
+                        if (err2) {
+                            self.log.warn({err: err2},
+                                          'failed to remove JSON cache file');
+                        }
+                        cb(err2);
+                    });
+                    return;
                 }
-                cb(err2);
+                cb(null, obj);
             });
-            return;
+        } else if (statErr && statErr.code !== 'ENOENT') {
+            return cb(statErr);
+        } else {
+            return cb();
         }
-        cb(null, obj);
     });
 };
 
-- 
2.21.0

