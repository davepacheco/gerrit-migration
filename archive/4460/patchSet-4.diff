From 3cac21ad89c6d5874cfddc7a7fb50ae8db3acb96 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 3 Jul 2018 19:05:54 +0200
Subject: [PATCH] TRITON-92 set 'dns_domain' on all Triton core VMs Reviewed
 by: Marsell Kukuljevic <marsell@joyent.com>

---
 lib/common.js                              | 86 ++++++++++------------
 lib/procedures/update-single-hn-sapi-v1.js |  1 +
 lib/steps/dnsdomain.js                     | 55 ++++++++++++++
 lib/steps/index.js                         |  3 +-
 test/update.test.js                        |  5 +-
 5 files changed, 100 insertions(+), 50 deletions(-)
 create mode 100644 lib/steps/dnsdomain.js

diff --git a/lib/common.js b/lib/common.js
index 5562de8..d9bf137 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -657,7 +657,11 @@ function digDomain(opts, cb) {
 }
 
 
-function waitUntilZoneInDNS(opts, cb) {
+/*
+ * Shared code between waitUntilZoneOutOfDNS and waitUntilZoneInDNS
+ * functions below.
+ */
+function _waitForZoneDNSChanges(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.alias, 'opts.alias');
@@ -666,6 +670,8 @@ function waitUntilZoneInDNS(opts, cb) {
     assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
+    assert.bool(opts.addedToDns, 'opts.addedToDns');
+
     getZoneIP({
         uuid: opts.uuid,
         server: opts.server,
@@ -688,77 +694,65 @@ function waitUntilZoneInDNS(opts, cb) {
                     return;
                 }
 
-                if (ips.indexOf(ip) !== -1) {
-                    cb(null);
-                    return;
+                if (opts.addedToDns) {
+                    if (ips.indexOf(ip) !== -1) {
+                        cb(null);
+                        return;
+                    }
+                } else {
+                    if (ips.indexOf(ip) === -1) {
+                        cb(null);
+                        return;
+                    }
                 }
 
+
+
                 counter += 1;
 
                 if (counter < limit) {
                     setTimeout(_checkDNS, 5000);
                 } else {
-                    cb(format(
-                        'New %s ($uuid) zone\'s IP %s did not ' +
-                        'enter DNS', opts.alias, ip));
+                    var word = opts.addedToDns ? 'enter' : 'leave';
+                    cb(new errors.InternalError({
+                        message: format(
+                            'New %s (%s) zone\'s IP %s did not %s DNS',
+                            opts.alias, opts.uuid, ip, word
+                        )
+                    }));
                 }
             });
         }
 
         _checkDNS();
     });
-
 }
 
-function waitUntilZoneOutOfDNS(opts, cb) {
+function waitUntilZoneInDNS(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
     assert.string(opts.alias, 'opts.alias');
     assert.string(opts.domain, 'opts.domain');
+    assert.object(opts.log, 'opts.log');
     assert.object(opts.cnapi, 'opts.cnapi');
     assert.func(cb, 'cb');
 
-    getZoneIP({
-        uuid: opts.uuid,
-        server: opts.server,
-        cnapi: opts.cnapi
-    }, function (err, ip) {
-        if (err) {
-            cb(err);
-            return;
-        }
-        var counter = 0;
-        var limit = 60;
+    opts.addedToDns = true;
 
-        function _checkDNS() {
-            digDomain({
-                domain: opts.domain,
-                log: opts.log
-            }, function (err2, ips) {
-                if (err2) {
-                    cb(err2);
-                    return;
-                }
-
-                if (ips.indexOf(ip) === -1) {
-                    cb(null);
-                    return;
-                }
+    _waitForZoneDNSChanges(opts, cb);
+}
 
-                counter += 1;
+function waitUntilZoneOutOfDNS(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.string(opts.alias, 'opts.alias');
+    assert.string(opts.domain, 'opts.domain');
+    assert.object(opts.cnapi, 'opts.cnapi');
+    assert.func(cb, 'cb');
 
-                if (counter < limit) {
-                    setTimeout(_checkDNS, 5000);
-                } else {
-                    cb(format(
-                        'New %s ($uuid) zone\'s IP %s did not ' +
-                        'leave DNS', opts.alias, ip));
-                }
-            });
-        }
+    opts.addedToDns = false;
 
-        _checkDNS();
-    });
+    _waitForZoneDNSChanges(opts, cb);
 }
 
 
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index a994fac..d717e5d 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -19,6 +19,7 @@ var vmadm = require('../vmadm');
 
 var Procedure = require('./procedure').Procedure;
 var s = require('./shared');
+
 /**
  * First pass procedure for updating sapi service
  *
diff --git a/lib/steps/dnsdomain.js b/lib/steps/dnsdomain.js
new file mode 100644
index 0000000..77c07bb
--- /dev/null
+++ b/lib/steps/dnsdomain.js
@@ -0,0 +1,55 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+/*
+ * Steps for setting the proper "dns_domain" value for SDC application.
+ */
+
+var assert = require('assert-plus');
+
+var errors = require('../errors');
+
+function ensureDnsDomainSdcAppParam(arg, cb) {
+    assert.object(arg, 'arg');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.object(arg.sdcadm.sdcApp, 'arg.sdcadm.sdcApp');
+    assert.func(cb, 'cb');
+
+    var sdcadm = arg.sdcadm;
+    var app = arg.sdcadm.sdcApp;
+
+    if (app.params.dns_domain) {
+        cb();
+        return;
+    }
+
+    arg.progress('Setting "params.dns_domain" on Sdc Application');
+
+    sdcadm.sapi.updateApplication(app.uuid, {
+        params: {
+            dns_domain: app.metadata.dns_domain
+        }
+    }, function updateAppCb(sapiErr) {
+        if (sapiErr) {
+            cb(new errors.SDCClientError(sapiErr, 'sapi'));
+            return;
+        }
+        cb();
+    });
+}
+
+// --- exports
+
+module.exports = {
+    ensureDnsDomainSdcAppParam: ensureDnsDomainSdcAppParam
+};
+
+// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/steps/index.js b/lib/steps/index.js
index bb81417..dbcb9a5 100644
--- a/lib/steps/index.js
+++ b/lib/steps/index.js
@@ -27,7 +27,8 @@ module.exports = {};
     'sapi',
     'servers',
     'binder',
-    'zookeeper'
+    'zookeeper',
+    'dnsdomain'
 ].forEach(function (modName) {
     var mod = require('./' + modName);
     Object.keys(mod).forEach(function (symbol) {
diff --git a/test/update.test.js b/test/update.test.js
index 6b560d4..10679db 100644
--- a/test/update.test.js
+++ b/test/update.test.js
@@ -215,9 +215,8 @@ test('update non-HA moray and SAPI consecutively', function (t) {
             'Reprovisioning VM',
             'Destroying tmp VM',
             'Updating sapi',
-            'Provisioning Temporary sapi',
-            'Reprovisioning sapi VM',
-            'Stop tmp VM',
+            'Verifying SAPI full mode',
+            'Waiting for sapi',
             'Updated successfully'
         ];
 
-- 
2.21.0

