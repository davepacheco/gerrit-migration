commit 0dd8ca0e27d6b5fa5caaf878d85f0c16177c0fca (refs/changes/76/2176/1)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-06-30T16:14:56-07:00 (2 years, 3 months ago)
    
    DOCKER-1073 Allow docker rm on a container that failed to provision

diff --git a/lib/common.js b/lib/common.js
index 75a864a..11f0b86 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -10,12 +10,9 @@
 
 var assert = require('assert-plus');
 var format = require('util').format;
-var imgmanifest = require('imgmanifest');
 var libuuid = require('libuuid');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
-var url = require('url');
-var vasync = require('vasync');
 
 var constants = require('./constants');
 var errors = require('./errors');
@@ -616,6 +613,68 @@ function getVm(req, res, next) {
 }
 
 
+/**
+ * Creates a restify handler that will find the vm and also verify the vm is
+ * in the required state.
+ *
+ * @param opts.allowedStates {Array} Vm states that are allowed.
+ * @param opts.disallowedStates {Array} Vm states that arn't allowed.
+ * @returns {Function} A restify handler/function.
+ */
+function getVmInState(opts) {
+    assert.object(opts, 'opts');
+    assert.optionalArrayOfString(opts.allowedStates, 'opts.allowedStates');
+    assert.optionalArrayOfString(opts.disallowedStates,
+        'opts.disallowedStates');
+
+    var allowed;
+    var disallowed;
+    var i;
+
+    // Convert array of allowed states into a hash, for easy lookup.
+    if (opts.allowedStates) {
+        allowed = {};
+        for (i = 0; i < opts.allowedStates.length; i++) {
+            allowed[opts.allowedStates[i]] = true;
+        }
+    }
+
+    // Convert array of disallowed states into a hash, for easy lookup.
+    if (opts.disallowedStates) {
+        disallowed = {};
+        for (i = 0; i < opts.disallowedStates.length; i++) {
+            disallowed[opts.disallowedStates[i]] = true;
+        }
+    }
+
+    // Return the restify handler that will find and validate the vm state.
+    return (function getVmInStateHandler(req, res, next) {
+        getVm(req, res, function (err) {
+            if (err) {
+                next(err);
+                return;
+            }
+
+            assert.object(req.vm, 'req.vm');
+
+            if (allowed && !allowed[req.vm.state]) {
+                next(format('Container state "%s" not allowed for this '
+                    + 'command', req.vm.state));
+                return;
+            }
+
+            if (disallowed && disallowed[req.vm.state]) {
+                next(format('Container state "%s" not allowed for this '
+                    + 'command', req.vm.state));
+                return;
+            }
+
+            next();
+        });
+    });
+}
+
+
 /*
  * Restify handler to set `req.image` to the docker image named by
  * `req.body.Image`. `req.image` is a instance of the `Image` model.
@@ -813,6 +872,7 @@ module.exports = {
     reqRegAuth: reqRegAuth,
     getVm: getVm,
     getVmByUuid: getVmByUuid,
+    getVmInState: getVmInState,
     humanDuration: humanDuration,
     humanSizeFromBytes: humanSizeFromBytes,
     isUUID: isUUID,
diff --git a/lib/endpoints/commit.js b/lib/endpoints/commit.js
index c404a65..ba17a98 100644
--- a/lib/endpoints/commit.js
+++ b/lib/endpoints/commit.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var restify = require('restify');
@@ -83,8 +83,9 @@ function register(http, before) {
     }
 
     http.post({ path: /^(\/v[^\/]+)?\/commit$/, name: 'Commit' },
-        before, restify.queryParser({mapParams: false}),
-        reqParamsId, common.getVm, commit);
+        before, restify.queryParser({mapParams: false}), reqParamsId,
+        common.getVmInState({disallowedStates: ['provisioning']}),
+        commit);
 
 }
 
diff --git a/lib/endpoints/containers.js b/lib/endpoints/containers.js
index e135b78..0819881 100644
--- a/lib/endpoints/containers.js
+++ b/lib/endpoints/containers.js
@@ -15,6 +15,7 @@ var util = require('util');
 var common = require('../common');
 var errors = require('../errors');
 var getVm = common.getVm;
+var getVmInState = common.getVmInState;
 var validate = require('../validate');
 
 
@@ -978,7 +979,8 @@ function register(http, before) {
 
     // Match: '/:apiversion/containers/:id/top'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/top$/,
-        name: 'ContainerTop' }, before, reqParamsId, getVm,
+        name: 'ContainerTop' }, before, reqParamsId,
+        getVmInState({allowedStates: ['running']}),
         queryParser, containerTop);
 
     // Match: '/:apiversion/containers/:id/logs'
@@ -1043,7 +1045,8 @@ function register(http, before) {
 
     // Match: '/:apiversion/containers/:id'
     http.del({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)$/,
-        name: 'ContainerDelete' }, before, reqParamsId, getVm,
+        name: 'ContainerDelete' }, before, reqParamsId,
+        getVmInState({disallowedStates: ['provisioning']}),
         queryParser, containerDelete);
 
     // Match: '/:apiversion/containers/:id/link'
@@ -1060,23 +1063,27 @@ function register(http, before) {
     // Match: '/:apiversion/containers/:id/copy'
     http.post({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/copy$/,
         name: 'ContainerCopy' }, before, reqParamsId, restify.bodyParser(),
-        getVm, containerCopy);
+        getVmInState({disallowedStates: ['provisioning']}),
+        containerCopy);
 
     // Match: '/:apiversion/containers/:id/archive'
     http.get({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
-        name: 'ContainerReadArchive' }, before, reqParamsId, getVm,
+        name: 'ContainerReadArchive' }, before, reqParamsId,
+        getVmInState({disallowedStates: ['provisioning']}),
         queryParser,
         validate.archiveReadStream, containerReadArchive);
 
     // Match: '/:apiversion/containers/:id/archive'
     http.put({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
-        name: 'ContainerWriteArchive' }, before, reqParamsId, getVm,
+        name: 'ContainerWriteArchive' }, before, reqParamsId,
+        getVmInState({disallowedStates: ['provisioning']}),
         queryParser,
         validate.archiveWriteStream, containerWriteArchive);
 
     // Match: '/:apiversion/containers/:id/archive'
     http.head({ path: /^(\/v[^\/]+)?\/containers\/([^\/]+)\/archive$/,
-        name: 'ContainerStatArchive' }, before, reqParamsId, getVm,
+        name: 'ContainerStatArchive' }, before, reqParamsId,
+        getVmInState({disallowedStates: ['provisioning']}),
         queryParser,
         validate.archiveReadStream, containerStatArchive);
 
diff --git a/package.json b/package.json
index 8d461e0..e3c0e32 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker",
-  "version": "0.4.1",
+  "version": "0.4.2",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -37,6 +37,7 @@
     "deep-equal": "~0.2.0",
     "difflet": "0.2.6",
     "manta": "3.1.2",
+    "rewire": "2.5.2",
     "semver": "5.1.0",
     "tar-stream": "1.3.1",
     "xtend": "^4.0.0"
diff --git a/test/unit/get-vm-in-state.test.js b/test/unit/get-vm-in-state.test.js
new file mode 100644
index 0000000..47ccddf
--- /dev/null
+++ b/test/unit/get-vm-in-state.test.js
@@ -0,0 +1,182 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test getVmInState in lib/common.js by mocking out the common.getVm method.
+ */
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
+var format = require('util').format;
+var test = require('tape');
+var rewire = require('rewire');
+
+var common = rewire('../../lib/common');
+var testcommon = require('../lib/common');
+
+
+// ---- globals
+
+var log = bunyan.createLogger({
+    name: 'affinity.test',
+    level: process.env.TRACE ? 'trace' : bunyan.FATAL + 1 /* off */,
+    req_id: '655b2da4-3165-9549-8626-531ef9336e1e'
+});
+
+
+// ---- helpers
+
+function createMockGetVm(vmState) {
+    return (function mockGetVm(req, res, next) {
+        req.vm = {
+            state: vmState
+        };
+        setImmediate(next);
+    });
+}
+
+function checkExpectedErr(t, err, expected) {
+    if (!err) {
+        t.error(format('error message matches %s: %j', expected, err));
+        return;
+    }
+
+    var errorString = (typeof (err) === 'object' ? err.message : err)
+        .replace(/\n$/, '');
+
+    if (RegExp.prototype.isPrototypeOf(expected)) {
+        t.ok(expected.test(errorString),
+            format('error message matches %s: %j', expected, errorString));
+    } else {
+        t.equal(errorString, expected,
+            'error message matches expected pattern');
+    }
+}
+
+// ---- tests
+
+
+test('getVmInState', function (tt) {
+
+    var cases = [
+        {
+            name: 'no wanted or unwanted states',
+            vmState: 'running',
+            opts: {}
+        },
+        {
+            name: 'exactly one wanted state',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['running']
+            }
+        },
+        {
+            name: 'one of many wanted states',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['stopped', 'running', 'starting']
+            }
+        },
+        {
+            name: 'none of many wanted states',
+            vmState: 'sleeping',
+            opts: {
+                allowedStates: ['stopped', 'running', 'starting']
+            },
+            expectedErr: new RegExp('^Container state "sleeping" not allowed')
+        },
+        {
+            name: 'exactly one unwanted state',
+            vmState: 'running',
+            opts: {
+                disallowedStates: ['running']
+            },
+            expectedErr: new RegExp('^Container state "running" not allowed')
+        },
+        {
+            name: 'one of many unwanted states',
+            vmState: 'running',
+            opts: {
+                disallowedStates: ['stopped', 'running', 'starting']
+            },
+            expectedErr: new RegExp('^Container state "running" not allowed')
+        },
+        {
+            name: 'none of many unwanted states',
+            vmState: 'sleeping',
+            opts: {
+                disallowedStates: ['stopped', 'running', 'starting']
+            }
+        },
+        {
+            name: 'one of many wanted states, none of many unwanted states',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['stopped', 'running', 'starting'],
+                disallowedStates: ['hiding', 'fleeing', 'sleeping']
+            }
+        },
+        {
+            name: 'none of many wanted states, one of many unwanted states',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['hiding', 'fleeing', 'sleeping'],
+                disallowedStates: ['stopped', 'running', 'starting']
+            },
+            expectedErr: new RegExp('^Container state "running" not allowed')
+        },
+        {
+            name: 'none of many wanted states, none of many unwanted states',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['hiding', 'fleeing', 'sleeping'],
+                disallowedStates: ['stopped', 'paused', 'starting']
+            },
+            expectedErr: new RegExp('^Container state "running" not allowed')
+        },
+        // Ensure disabled gets priority over enabled.
+        {
+            name: 'one of many wanted states, one of many unwanted states',
+            vmState: 'running',
+            opts: {
+                allowedStates: ['hiding', 'fleeing', 'running', 'sleeping'],
+                disallowedStates: ['stopped', 'running', 'starting']
+            },
+            expectedErr: new RegExp('^Container state "running" not allowed')
+        }
+    ];
+
+    cases.forEach(function (c) {
+        if (process.env.FILTER && c.name.indexOf(process.env.FILTER) === -1) {
+            tt.skip(' ' + c.name + ' (FILTER=' + process.env.FILTER + ')');
+            return;
+        }
+
+        tt.test(' ' + c.name, function (t) {
+            var getVmInStateFn;
+            var req = {};
+            var res = {};
+
+            // rewire the common.getVm function, before calling getVmInState.
+            common.__set__('getVm', createMockGetVm(c.vmState));
+            getVmInStateFn = common.getVmInState(c.opts);
+
+            getVmInStateFn(req, res, function (err) {
+                if (err && c.expectedErr) {
+                    checkExpectedErr(t, err, c.expectedErr);
+                } else if (err) {
+                    t.ifErr(err, 'getVmInState returned unexpected error');
+                }
+                t.end();
+            });
+        });
+    });
+});
