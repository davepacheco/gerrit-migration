From dda201374bf5f2646e120421cb3617c6195a4a99 Mon Sep 17 00:00:00 2001
From: John Levon <john.levon@joyent.com>
Date: Wed, 5 Sep 2018 11:03:14 +0000
Subject: [PATCH] OS-7283 ./configure should support multiple compilers OS-7286
 illumos-extra should compile with newer GCCs

---
 Makefile                                      | 39 ++++++++++++------
 Makefile.defs                                 |  7 +++-
 README.md                                     |  2 +-
 dialog/Makefile                               |  1 +
 ...RCE-to-700-to-avoid-feature_tests.h-.patch | 35 ++++++++++++++++
 gnupg/Makefile                                |  1 +
 ...-to-explicitly-ask-for-the-old-style.patch | 30 ++++++++++++++
 manifest                                      |  8 ++--
 mdb_v8/Makefile                               |  4 ++
 ncurses/Makefile                              |  1 +
 node.js/Makefile                              | 13 +++++-
 ...bit-hack-for-recent-gcc-which-does-m.patch | 40 +++++++++++++++++++
 ...m-std-nullptr_t-requires-static_cast.patch | 25 ++++++++++++
 ...arious-warnings-that-break-the-build.patch | 23 +++++++++++
 ...-toxic-due-to-feature_tests.h-so-avo.patch | 24 +++++++++++
 openssl1x/engine_pkcs11/hw_pk11_pub.c         |  2 +-
 screen/Makefile                               |  4 +-
 17 files changed, 234 insertions(+), 25 deletions(-)
 create mode 100644 dialog/Patches/0001-Force-_XOPEN_SOURCE-to-700-to-avoid-feature_tests.h-.patch
 create mode 100644 gnupg/Patches/0001-With-C99-we-need-to-explicitly-ask-for-the-old-style.patch
 create mode 100644 node.js/Patches/0001-Disable-the-signbit-hack-for-recent-gcc-which-does-m.patch
 create mode 100644 node.js/Patches/0002-converting-from-std-nullptr_t-requires-static_cast.patch
 create mode 100644 nss-nspr/Patches/0001-turn-off-various-warnings-that-break-the-build.patch
 create mode 100644 openssh/Patches/1002-_XOPEN_SOURCE-is-toxic-due-to-feature_tests.h-so-avo.patch

diff --git a/Makefile b/Makefile
index bf1800c..7e89922 100644
--- a/Makefile
+++ b/Makefile
@@ -17,10 +17,13 @@
 # To build everything just run 'gmake' in this directory.
 #
 
-BASE =		$(PWD)
+include $(CURDIR)/../../configure.env
+
+BASE =		$(CURDIR)
 DESTDIR =	$(BASE)/proto
 
 ifeq ($(STRAP),strap)
+
 STRAPPROTO =	$(DESTDIR)
 SUBDIRS = \
 	cpp \
@@ -35,12 +38,14 @@ SUBDIRS = \
 	openssl1x \
 	perl
 
-ifeq ($(BUILD_EXTRA_GCC),yes)
-SUBDIRS +=	gcc6 gcc7
-STRAPFIX +=	gcc6 gcc7
+COMMA=,
+EXTRA_COMPILERS = $(subst $(COMMA), , $(SHADOW_COMPILERS))
+SUBDIRS +=	$(EXTRA_COMPILERS)
+STRAPFIX +=	$(EXTRA_COMPILERS)
 STRAPFIX_SUBDIRS=$(STRAPFIX:%=%.strapfix)
-endif
+
 else
+
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
 SUBDIRS = \
 	bash \
@@ -83,6 +88,7 @@ SUBDIRS = \
 	vim \
 	wget \
 	xz
+
 endif
 
 PATH =		$(STRAPPROTO)/usr/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin
@@ -101,6 +107,10 @@ GITDESCRIBE = \
 
 TARBALL =	$(NAME)-$(BRANCH)-$(TIMESTAMP)-$(GITDESCRIBE).tgz
 
+LIBSTDCXXVER_4 = 6.0.13
+LIBSTDCXXVER_6 = 6.0.22
+LIBSTDCXXVER_7 = 6.0.24
+
 #
 # Some software (e.g., OpenSSL 0.9.8) is very particular about the Perl
 # interpreter used during the build.  This is the full path to the version
@@ -150,13 +160,14 @@ $(DESTDIR)/usr/gnu/bin/gas: FRC
 # gas.
 #
 ifeq ($(STRAP),strap)
-$(DESTDIR)/usr/gcc/4/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
-	(cd gcc4 && \
+
+$(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
+	(cd $(PRIMARY_COMPILER) && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install strapfix)
 
-$(SUBDIRS): $(DESTDIR)/usr/gcc/4/bin/gcc
+$(SUBDIRS): $(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/gcc
 	(cd $@ && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
@@ -173,8 +184,9 @@ $(STRAPFIX_SUBDIRS): $(SUBDIRS)
 	    $(MAKE) DESTDIR=$(DESTDIR) strapfix)
 
 else
+
 $(DESTDIR)/usr/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
-	(cd gcc4 && \
+	(cd $(PRIMARY_COMPILER) && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install strapfix)
@@ -191,19 +203,20 @@ $(SUBDIRS): $(DESTDIR)/usr/bin/gcc
 endif
 
 
-install: $(SUBDIRS) gcc4 binutils
+install: $(SUBDIRS) $(PRIMARY_COMPILER) binutils
 
 fixup_strap: $(STRAPFIX_SUBDIRS)
 
-install_strap: $(SUBDIRS) gcc4 binutils fixup_strap
+install_strap: $(SUBDIRS) $(PRIMARY_COMPILER) binutils fixup_strap
 
 clean:
-	-for dir in $(SUBDIRS) gcc4 binutils; \
+	-for dir in $(SUBDIRS) $(PRIMARY_COMPILER) binutils; \
 	    do (cd $$dir; $(MAKE) DESTDIR=$(DESTDIR) clean); done
 	-rm -rf proto
 
 manifest:
-	cp manifest $(DESTDIR)/$(DESTNAME)
+	sed 's/$$LIBSTDCXXVER/$(LIBSTDCXXVER_$(PRIMARY_COMPILER_VER))/g' \
+	    manifest >$(DESTDIR)/$(DESTNAME)
 
 mancheck_conf:
 	cp mancheck.conf $(DESTDIR)/$(DESTNAME)
diff --git a/Makefile.defs b/Makefile.defs
index 231e99c..c28227c 100644
--- a/Makefile.defs
+++ b/Makefile.defs
@@ -15,6 +15,9 @@
 
 BASE =		$(PWD)
 DESTDIR =	$(BASE)/../proto
+
+include $(BASE)/../../../configure.env
+
 VER.32 =	$(VER)-32$(STRAP)
 VER.64 =	$(VER)-64$(STRAP)
 OBJ.32 =	$(VER.32)$(SEPARATE_BUILD:yes=.build)
@@ -26,8 +29,8 @@ FETCH_BASE =	https://us-east.manta.joyent.com/Joyent_Dev/public/illumos-extra
 
 ifeq ($(STRAP),strap)
 STRAPPROTO =	$(DESTDIR)
-GCC =		$(DESTDIR)/usr/gcc/4/bin/gcc
-GXX =		$(DESTDIR)/usr/gcc/4/bin/g++
+GCC =		$(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/gcc
+GXX =		$(DESTDIR)/usr/gcc/$(PRIMARY_COMPILER_VER)/bin/g++
 else
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
 GCC =		$(DESTDIR)/usr/bin/gcc
diff --git a/README.md b/README.md
index 6008fb0..7111b3e 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 This repository, illumos-extra, is a collection of software which falls
 into two categories: either it is an illumos build and/or run-time
 dependency or it is a piece of additional software that SmartOS uses.
-For example, the `gcc` and `binutils` directories are examples of
+For example, the `gcc*` and `binutils` directories are examples of
 illumos dependencies, while `node.js` and `lldp` are examples of extra
 pieces of software that SmartOS uses to form its core ram-disk.
 illumos-extra is a fundamental part of the SmartOS build process;
diff --git a/dialog/Makefile b/dialog/Makefile
index c744941..af529eb 100644
--- a/dialog/Makefile
+++ b/dialog/Makefile
@@ -27,6 +27,7 @@ VER =	dialog-1.1-20111020
 
 include ../Makefile.defs
 
+PATCHES = Patches/*
 AUTOCONF_OUT =	src/auto/config.status
 AUTOCONF_OPTS += \
 	--mandir=/usr/share/man \
diff --git a/dialog/Patches/0001-Force-_XOPEN_SOURCE-to-700-to-avoid-feature_tests.h-.patch b/dialog/Patches/0001-Force-_XOPEN_SOURCE-to-700-to-avoid-feature_tests.h-.patch
new file mode 100644
index 0000000..489bb3b
--- /dev/null
+++ b/dialog/Patches/0001-Force-_XOPEN_SOURCE-to-700-to-avoid-feature_tests.h-.patch
@@ -0,0 +1,35 @@
+From 5f59d43f807f4f3e996e9fd81ac300c2a5005424 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Thu, 6 Sep 2018 11:03:17 +0000
+Subject: [PATCH] Force _XOPEN_SOURCE to 700 to avoid feature_tests.h breakage
+
+---
+ configure | 12 +++++++++++-
+ 1 file changed, 11 insertions(+), 1 deletion(-)
+
+diff --git a/configure b/configure
+index c2fbb93..b435920 100755
+--- a/configure
++++ b/configure
+@@ -3000,7 +3000,17 @@ sco*) #(vi
+ 	# setting _XOPEN_SOURCE breaks Lynx on SCO Unix / OpenServer
+ 	;;
+ solaris2.1[0-9]) #(vi
+-	cf_xopen_source="-D__EXTENSIONS__ -D_XOPEN_SOURCE=$cf_XOPEN_SOURCE"
++	#
++	# Avoid toxic XOPEN_SOURCE settings that break feature_tests.h.
++	#
++	# Why are we patching configure directly you ask, not configure.in?
++	#
++	# It's because, in between autoconf 2.52 and 2.69, they decided to break
++	# an AC_CONFIG_HEADER() that used '@DEFS@', so it silently doesn't get
++	# replaced if we try to regenerate from configure.in. So sadly, this
++	# hack is by far the lowest cost way to fix this up.
++	#
++	cf_xopen_source="-std=c99 -D__EXTENSIONS__ -D_XOPEN_SOURCE=700 -DPOSIX_C_SOURCE=200809L"
+ 	;;
+ solaris2.[1-9]) #(vi
+ 	cf_xopen_source="-D__EXTENSIONS__"
+-- 
+2.14.1
+
diff --git a/gnupg/Makefile b/gnupg/Makefile
index abbcf1b..9b7f566 100644
--- a/gnupg/Makefile
+++ b/gnupg/Makefile
@@ -22,6 +22,7 @@
 #
 
 VER =	gnupg-1.4.11
+PATCHES = Patches/*
 
 include ../Makefile.defs
 
diff --git a/gnupg/Patches/0001-With-C99-we-need-to-explicitly-ask-for-the-old-style.patch b/gnupg/Patches/0001-With-C99-we-need-to-explicitly-ask-for-the-old-style.patch
new file mode 100644
index 0000000..80de9d9
--- /dev/null
+++ b/gnupg/Patches/0001-With-C99-we-need-to-explicitly-ask-for-the-old-style.patch
@@ -0,0 +1,30 @@
+From 0e72ad50e11376749d41fbb2cce7fe1d6478ba14 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Thu, 6 Sep 2018 11:42:17 +0000
+Subject: [PATCH] With C99, we need to explicitly ask for the old-style inline
+ semantics
+
+---
+ mpi/mpi-inline.h | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+diff --git a/mpi/mpi-inline.h b/mpi/mpi-inline.h
+index f5e84e8..bb72e4a 100644
+--- a/mpi/mpi-inline.h
++++ b/mpi/mpi-inline.h
+@@ -29,8 +29,12 @@
+ #define G10_MPI_INLINE_H
+ 
+ #ifndef G10_MPI_INLINE_DECL
++#ifdef __GNUC_STDC_INLINE__
++#define G10_MPI_INLINE_DECL  extern inline __attribute__ ((__gnu_inline__))
++#else
+ #define G10_MPI_INLINE_DECL  extern __inline__
+ #endif
++#endif
+ 
+ G10_MPI_INLINE_DECL  mpi_limb_t
+ mpihelp_add_1( mpi_ptr_t res_ptr, mpi_ptr_t s1_ptr,
+-- 
+2.14.1
+
diff --git a/manifest b/manifest
index 5e4caa3..03aa914 100644
--- a/manifest
+++ b/manifest
@@ -114,11 +114,11 @@ f usr/lib/iconv/amd64/UCS-2%UTF-8.so 0755 root bin
 f usr/lib/iconv/amd64/UCS-2LE%UTF-8.so 0755 root bin
 # gcc
 f usr/lib/amd64/libgcc_s.so.1 0555 root bin
-f usr/lib/amd64/libstdc++.so.6.0.13 0555 root bin
-s usr/lib/amd64/libstdc++.so.6=libstdc++.so.6.0.13
+f usr/lib/amd64/libstdc++.so.$LIBSTDCXXVER 0555 root bin
+s usr/lib/amd64/libstdc++.so.6=libstdc++.so.$LIBSTDCXXVER
 f usr/lib/libgcc_s.so.1 0555 root bin
-f usr/lib/libstdc++.so.6.0.13 0555 root bin
-s usr/lib/libstdc++.so.6=libstdc++.so.6.0.13
+f usr/lib/libstdc++.so.$LIBSTDCXXVER 0555 root bin
+s usr/lib/libstdc++.so.6=libstdc++.so.$LIBSTDCXXVER
 f usr/lib/libssp.so.0.0.0 0555 root bin
 s usr/lib/libssp.so.0=libssp.so.0.0.0
 f usr/lib/amd64/libssp.so.0.0.0 0555 root bin
diff --git a/mdb_v8/Makefile b/mdb_v8/Makefile
index 92eb96f..4b10fa8 100644
--- a/mdb_v8/Makefile
+++ b/mdb_v8/Makefile
@@ -38,6 +38,10 @@ CTF_LIBS = $(VER)/build/ia32/mdb_v8.so \
 #
 CFLAGS += -g
 
+#
+# To avoid "error: left shift of negative value"
+CFLAGS += -Wno-shift-negative-value
+
 #
 # There are a couple of bugs in the currently released version of mdb_v8
 # that do not support parallelism, thus we explicitly do not include any
diff --git a/ncurses/Makefile b/ncurses/Makefile
index e7fd906..7ac15f9 100644
--- a/ncurses/Makefile
+++ b/ncurses/Makefile
@@ -31,6 +31,7 @@ AUTOCONF_PREFIX =	/usr/gnu
 AUTOCONF_OPTS += \
 	-C \
 	--with-shared \
+	--without-cxx-binding \
 	--without-normal
 
 AUTOCONF_OPTS.64 += \
diff --git a/node.js/Makefile b/node.js/Makefile
index e8edf57..87d7338 100644
--- a/node.js/Makefile
+++ b/node.js/Makefile
@@ -29,7 +29,16 @@ include ../Makefile.defs
 NODE_ROOT =	$(DESTDIR)/usr/node/$(MAJOR_VER)
 VERSIONJS =	$(NODE_ROOT)/node_modules/platform_node_version.js
 
-CFLAGS +=	-Wno-unknown-pragmas
+# ../deps/v8/src/objects.h:5188:44: error: left operand of shift expression
+# '(-1 << 3)' is negative
+CXXFLAGS +=	-fpermissive
+
+# https://github.com/nodejs/node/issues/6272
+#
+# Aside from the issues listed there, this causes v8 to explode during init in
+# AdvanceSweeper.
+#
+CXXFLAGS += -fno-delete-null-pointer-checks
 
 #
 # Node's build system is super broken.  If we pass it LIBS at configure time,
@@ -64,7 +73,7 @@ AUTOCONF_OPTS += \
 
 AUTOCONF_CFLAGS =	CFLAGS="$(CPPFLAGS) $(CFLAGS)"
 AUTOCONF_LIBS =
-AUTOCONF_ENV +=		CXXFLAGS="$(CPPFLAGS) $(CFLAGS)"
+AUTOCONF_ENV +=		CXXFLAGS="$(CPPFLAGS) $(CFLAGS) $(CXXFLAGS)"
 
 #
 # Jump through hoops to get the locally-run build tools to build with the
diff --git a/node.js/Patches/0001-Disable-the-signbit-hack-for-recent-gcc-which-does-m.patch b/node.js/Patches/0001-Disable-the-signbit-hack-for-recent-gcc-which-does-m.patch
new file mode 100644
index 0000000..586e1ec
--- /dev/null
+++ b/node.js/Patches/0001-Disable-the-signbit-hack-for-recent-gcc-which-does-m.patch
@@ -0,0 +1,40 @@
+From 87539f2888aa1c0c7e37e0a7bc8c6d08127e1c55 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Wed, 5 Sep 2018 09:39:24 +0000
+Subject: [PATCH] Disable the signbit hack for recent gcc, which does make it
+ visible to v8
+
+---
+ deps/v8/src/platform-solaris.cc | 2 +-
+ deps/v8/src/platform.h          | 2 +-
+ 2 files changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/deps/v8/src/platform-solaris.cc b/deps/v8/src/platform-solaris.cc
+index 07718fe..2bd3c17 100644
+--- a/deps/v8/src/platform-solaris.cc
++++ b/deps/v8/src/platform-solaris.cc
+@@ -61,7 +61,7 @@
+ // It seems there is a bug in some Solaris distributions (experienced in
+ // SunOS 5.10 Generic_141445-09) which make it difficult or impossible to
+ // access signbit() despite the availability of other C99 math functions.
+-#ifndef signbit
++#if !defined(signbit) && __GNUC__ < 6
+ // Test sign - usually defined in math.h
+ int signbit(double x) {
+   // We need to take care of the special case of both positive and negative
+diff --git a/deps/v8/src/platform.h b/deps/v8/src/platform.h
+index 63a6e44..db1b2ec 100644
+--- a/deps/v8/src/platform.h
++++ b/deps/v8/src/platform.h
+@@ -44,7 +44,7 @@
+ #ifndef V8_PLATFORM_H_
+ #define V8_PLATFORM_H_
+ 
+-#ifdef __sun
++#if defined(__sun) && __GNUC__ < 6
+ # ifndef signbit
+ int signbit(double x);
+ # endif
+-- 
+2.14.1
+
diff --git a/node.js/Patches/0002-converting-from-std-nullptr_t-requires-static_cast.patch b/node.js/Patches/0002-converting-from-std-nullptr_t-requires-static_cast.patch
new file mode 100644
index 0000000..dc23366
--- /dev/null
+++ b/node.js/Patches/0002-converting-from-std-nullptr_t-requires-static_cast.patch
@@ -0,0 +1,25 @@
+From 22ae87c9780464c6e8d35fa8be77d3a5123afce2 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Wed, 5 Sep 2018 18:25:21 +0000
+Subject: [PATCH] converting from std::nullptr_t requires static_cast<>
+
+---
+ deps/v8/src/stub-cache.cc | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/deps/v8/src/stub-cache.cc b/deps/v8/src/stub-cache.cc
+index 8490c7e..54947e1 100644
+--- a/deps/v8/src/stub-cache.cc
++++ b/deps/v8/src/stub-cache.cc
+@@ -1361,7 +1361,7 @@ Handle<Code> StubCompiler::GetCodeWithFlags(Code::Flags flags,
+                                             Handle<String> name) {
+   return (FLAG_print_code_stubs && !name.is_null())
+       ? GetCodeWithFlags(flags, *name->ToCString())
+-      : GetCodeWithFlags(flags, reinterpret_cast<char*>(NULL));
++      : GetCodeWithFlags(flags, static_cast<char*>(NULL));
+ }
+ 
+ 
+-- 
+2.14.1
+
diff --git a/nss-nspr/Patches/0001-turn-off-various-warnings-that-break-the-build.patch b/nss-nspr/Patches/0001-turn-off-various-warnings-that-break-the-build.patch
new file mode 100644
index 0000000..e3ce93c
--- /dev/null
+++ b/nss-nspr/Patches/0001-turn-off-various-warnings-that-break-the-build.patch
@@ -0,0 +1,23 @@
+From 2dbe76aed64d04ff840d90523f19b27433ac9c8f Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Wed, 5 Sep 2018 10:51:40 +0000
+Subject: [PATCH] turn off various warnings that break the build
+
+---
+ nss/coreconf/config.mk | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/nss/coreconf/config.mk b/nss/coreconf/config.mk
+index bb87ad3..0dd4591 100644
+--- a/nss/coreconf/config.mk
++++ b/nss/coreconf/config.mk
+@@ -221,3 +221,6 @@ $(error Setting NSS_ENABLE_TLS_1_3 and NSS_DISABLE_ECC isn't a good idea.)
+ endif
+ DEFINES += -DNSS_ENABLE_TLS_1_3
+ endif
++
++CFLAGS += -Wno-unused -Wno-int-in-bool-context
++CXXFLAGS += -Wno-unused -Wno-int-in-bool-context
+-- 
+2.14.1
+
diff --git a/openssh/Patches/1002-_XOPEN_SOURCE-is-toxic-due-to-feature_tests.h-so-avo.patch b/openssh/Patches/1002-_XOPEN_SOURCE-is-toxic-due-to-feature_tests.h-so-avo.patch
new file mode 100644
index 0000000..a90af7d
--- /dev/null
+++ b/openssh/Patches/1002-_XOPEN_SOURCE-is-toxic-due-to-feature_tests.h-so-avo.patch
@@ -0,0 +1,24 @@
+From 1484808bb32a33282dfb6f3b5742f11cb1e6d9f6 Mon Sep 17 00:00:00 2001
+From: John Levon <john.levon@joyent.com>
+Date: Wed, 5 Sep 2018 20:16:20 +0000
+Subject: [PATCH] _XOPEN_SOURCE is toxic due to feature_tests.h, so avoid it
+
+---
+ configure.ac | 1 -
+ 1 file changed, 1 deletion(-)
+
+diff --git a/configure.ac b/configure.ac
+index 8e0426a..1b2b933 100755
+--- a/configure.ac
++++ b/configure.ac
+@@ -1863,7 +1863,6 @@ AC_CHECK_FUNCS([ \
+ 
+ dnl Wide character support.  Linux man page says it needs _XOPEN_SOURCE.
+ saved_CFLAGS="$CFLAGS"
+-CFLAGS="$CFLAGS -D_XOPEN_SOURCE"
+ AC_CHECK_FUNCS([mblen mbtowc nl_langinfo wcwidth])
+ CFLAGS="$saved_CFLAGS"
+ 
+-- 
+2.14.1
+
diff --git a/openssl1x/engine_pkcs11/hw_pk11_pub.c b/openssl1x/engine_pkcs11/hw_pk11_pub.c
index 3914053..542c083 100644
--- a/openssl1x/engine_pkcs11/hw_pk11_pub.c
+++ b/openssl1x/engine_pkcs11/hw_pk11_pub.c
@@ -1247,7 +1247,7 @@ EVP_PKEY *pk11_load_privkey(ENGINE* e, const char *privkey_id,
 	pkcs11_uri uri_struct;
 	CK_RV rv;
 	CK_BBOOL is_token = CK_TRUE;
-	CK_BBOOL rollback = CK_FALSE;
+	CK_BBOOL rollback __unused = CK_FALSE;
 	CK_BYTE attr_data[8][MAXATTR];
 	CK_OBJECT_CLASS key_class = CKO_PRIVATE_KEY;
 	CK_OBJECT_HANDLE ks_key = CK_INVALID_HANDLE;	/* key in keystore */
diff --git a/screen/Makefile b/screen/Makefile
index 26d82ed..d1bd94d 100644
--- a/screen/Makefile
+++ b/screen/Makefile
@@ -28,11 +28,11 @@ include ../Makefile.defs
 PATCHES =	Patches/*
 
 #
-# We set _XOPEN_SOURCE=500 so that screen can access additional fields in
+# We set _XOPEN_SOURCE=700 so that screen can access additional fields in
 # struct msghdr. pkgsrc also does this.
 #
 AUTOCONF_ENV += \
-	CFLAGS=-D_XOPEN_SOURCE=500
+	CFLAGS="-std=c99 -D_XOPEN_SOURCE=700"
 
 #
 # It is important to make sure that screen has a prefix of /usr. When screen
-- 
2.21.0

