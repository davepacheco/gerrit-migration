commit af6ef20bdcdd41bc2dd78d4f8fef51dbda6c33d3
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-05-10T06:54:49-06:00 (5 months ago)
    
    MANTA-4257 Update electric-boray zone setup and configuration

diff --git a/boot/configure.sh b/boot/configure.sh
index 9aa7f1e..4ff1ae7 100644
--- a/boot/configure.sh
+++ b/boot/configure.sh
@@ -7,7 +7,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 set -o xtrace
@@ -20,7 +20,7 @@ if [[ -h $SOURCE ]]; then
 fi
 DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
 PROFILE=/root/.bashrc
-SVC_ROOT=/opt/smartdc/electric-moray
+SVC_ROOT=/opt/smartdc/electric-boray
 
 source ${DIR}/scripts/util.sh
 source ${DIR}/scripts/services.sh
@@ -30,7 +30,7 @@ export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}
 
 
 
-ZFS_DATASET=zones/$(/usr/bin/zonename)/data/electric-moray
+ZFS_DATASET=zones/$(/usr/bin/zonename)/data/electric-boray
 
 # Mainline
 
diff --git a/boot/setup.sh b/boot/setup.sh
index 44bb06d..bd821e9 100755
--- a/boot/setup.sh
+++ b/boot/setup.sh
@@ -6,11 +6,11 @@
 #
 
 #
-# Copyright (c) 2018, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
-# Bootstraps the consistent hash ring for electric-moray.
+# Bootstraps the consistent hash ring for electric-boray.
 #
 
 set -o xtrace
@@ -23,7 +23,7 @@ if [[ -h $SOURCE ]]; then
 fi
 DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
 PROFILE=/root/.bashrc
-SVC_ROOT=/opt/smartdc/electric-moray
+SVC_ROOT=/opt/smartdc/electric-boray
 
 source ${DIR}/scripts/util.sh
 source ${DIR}/scripts/services.sh
@@ -31,8 +31,8 @@ source ${DIR}/scripts/services.sh
 export PATH=$SVC_ROOT/bin:$SVC_ROOT/build/node/bin:/opt/local/bin:/usr/sbin/:/usr/bin:$PATH
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
 
-FASH=/opt/smartdc/electric-moray/node_modules/.bin/fash
-LEVELDB_DIR_PARENT=/electric-moray/chash
+FASH=/opt/smartdc/electric-boray/node_modules/.bin/fash
+LEVELDB_DIR_PARENT=/electric-boray/chash
 LEVELDB_DIR=$LEVELDB_DIR_PARENT/leveldb-
 SAPI_URL=$(mdata-get SAPI_URL)
 [[ -n $SAPI_URL ]] || fatal "no SAPI_URL found"
@@ -74,7 +74,7 @@ export SDC_IMGADM_URL=$(json metadata.HASH_RING_IMGAPI_SERVICE <<< "$manta_app")
 [[ -n $SDC_IMGADM_URL ]] || fatal "no SDC_IMGADM_URL found"
 ZONE_UUID=$(/usr/bin/zonename)
 ZFS_PARENT_DATASET=zones/$ZONE_UUID/data
-ZFS_DATASET=$ZFS_PARENT_DATASET/electric-moray
+ZFS_DATASET=$ZFS_PARENT_DATASET/electric-boray
 
 function manta_hack_syslog_conf {
     # Hack.  See MANTA-2165
@@ -86,17 +86,17 @@ function manta_hack_syslog_conf {
 }
 
 function manta_setup_determine_instances {
-    ELECTRIC_MORAY_INSTANCES=1
+    ELECTRIC_BORAY_INSTANCES=1
     local size=`json -f ${METADATA} SIZE`
     if [ "$size" = "lab" ] || [ "$size" = "production" ]
     then
-        ELECTRIC_MORAY_INSTANCES=4
+        ELECTRIC_BORAY_INSTANCES=4
     fi
 }
 
 function manta_setup_leveldb_hash_ring {
     # get the hash ring image
-    /opt/smartdc/electric-moray/node_modules/.bin/sdc-imgadm get-file $HASH_RING_IMAGE -o $HASH_RING_FILE
+    /opt/smartdc/electric-boray/node_modules/.bin/sdc-imgadm get-file $HASH_RING_IMAGE -o $HASH_RING_FILE
     local leveldb_ring_parent_dir=/var/tmp/$(uuid -v4)
     local leveldb_ring=$leveldb_ring_parent_dir/hash_ring
     mkdir -p $leveldb_ring_parent_dir
@@ -119,7 +119,7 @@ function manta_setup_leveldb_hash_ring {
     [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
     # build the list of leveldb locations
     local leveldb_dirs
-    for (( i=1; i<=$ELECTRIC_MORAY_INSTANCES; i++ ))
+    for (( i=1; i<=$ELECTRIC_BORAY_INSTANCES; i++ ))
     do
         leveldb_dirs[$i]=$LEVELDB_DIR$(expr 2020 + $i)
     done
@@ -139,12 +139,12 @@ function manta_setup_leveldb_hash_ring {
     [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
 }
 
-function manta_setup_electric_moray {
+function manta_setup_electric_boray {
     #Build the list of ports.  That'll be used for everything else.
     local ports
     local kangs
     local statuses
-    for (( i=1; i<=$ELECTRIC_MORAY_INSTANCES; i++ )); do
+    for (( i=1; i<=$ELECTRIC_BORAY_INSTANCES; i++ )); do
         ports[$i]=`expr 2020 + $i`
         kangs[$i]=`expr 3020 + $i`
         statuses[$i]=`expr 4020 + $i`
@@ -170,10 +170,10 @@ function manta_setup_electric_moray {
 
     #haproxy
     for port in "${ports[@]}"; do
-        hainstances="$hainstances        server electric-moray-$port 127.0.0.1:$port check inter 10s slowstart 10s error-limit 3 on-error mark-down\n"
+        hainstances="$hainstances        server electric-boray-$port 127.0.0.1:$port check inter 10s slowstart 10s error-limit 3 on-error mark-down\n"
     done
 
-    sed -e "s#@@ELECTRIC-MORAY_INSTANCES@@#$hainstances#g" \
+    sed -e "s#@@ELECTRIC-BORAY_INSTANCES@@#$hainstances#g" \
         $SVC_ROOT/etc/haproxy.cfg.in > $SVC_ROOT/etc/haproxy.cfg || \
         fatal "could not process $src to $dest"
 
@@ -181,33 +181,33 @@ function manta_setup_electric_moray {
         fatal "unable to import haproxy"
     svcadm enable "manta/haproxy" || fatal "unable to start haproxy"
 
-    #electric-moray instances
-    local electric_moray_xml_in=$SVC_ROOT/smf/manifests/electric-moray.xml.in
-    for (( i=1; i<=$ELECTRIC_MORAY_INSTANCES; i++ )); do
+    #electric-boray instances
+    local electric_boray_xml_in=$SVC_ROOT/smf/manifests/electric-boray.xml.in
+    for (( i=1; i<=$ELECTRIC_BORAY_INSTANCES; i++ )); do
         local port=${ports[$i]}
         local kang=${kangs[$i]}
         local status=${statuses[$i]}
-        local electric_moray_instance="electric-moray-$port"
-        local electric_moray_xml_out=$SVC_ROOT/smf/manifests/electric-moray-$port.xml
-        sed -e "s#@@ELECTRIC-MORAY_PORT@@#$port#g" \
+        local electric_boray_instance="electric-boray-$port"
+        local electric_boray_xml_out=$SVC_ROOT/smf/manifests/electric-boray-$port.xml
+        sed -e "s#@@ELECTRIC-BORAY_PORT@@#$port#g" \
             -e "s#@@KANG_PORT@@#$kang#g" \
             -e "s#@@STATUS_PORT@@#$status#g" \
-            -e "s#@@ELECTRIC-MORAY_INSTANCE_NAME@@#$electric_moray_instance#g" \
-            $electric_moray_xml_in  > $electric_moray_xml_out || \
-            fatal "could not process $electric_moray_xml_in to $electric_moray_xml_out"
-
-        svccfg import $electric_moray_xml_out || \
-            fatal "unable to import $electric_moray_instance: $electric_moray_xml_out"
-        svcadm enable "$electric_moray_instance" || \
-            fatal "unable to start $electric_moray_instance"
+            -e "s#@@ELECTRIC-BORAY_INSTANCE_NAME@@#$electric_boray_instance#g" \
+            $electric_boray_xml_in  > $electric_boray_xml_out || \
+            fatal "could not process $electric_boray_xml_in to $electric_boray_xml_out"
+
+        svccfg import $electric_boray_xml_out || \
+            fatal "unable to import $electric_boray_instance: $electric_boray_xml_out"
+        svcadm enable "$electric_boray_instance" || \
+            fatal "unable to start $electric_boray_instance"
     done
 
     unset IFS
 }
 
-function manta_setup_moray_rsyslogd {
+function manta_setup_boray_rsyslogd {
     #rsyslog was already set up by common setup- this will overwrite the
-    # config and restart since we want moray to log locally.
+    # config and restart since we want boray to log locally.
     local domain_name=$(json -f ${METADATA} domain_name)
     [[ $? -eq 0 ]] || fatal "Unable to domain name from metadata"
 
@@ -250,7 +250,7 @@ HERE
 # Support node bunyan logs going to local0 and forwarding
 # only as logs are already captured via SMF
 # Uncomment the following line to get local logs via syslog
-local0.* /var/log/electric-moray.log;bunyan
+local0.* /var/log/electric-boray.log;bunyan
 local0.* @@ops.$domain_name:10514
 
 HERE
@@ -265,7 +265,7 @@ HERE
     [[ $? -eq 0 ]] || fatal "Unable to restart rsyslog"
 
     #log pulling
-    manta_add_logadm_entry "electric-moray" "/var/log" "exact"
+    manta_add_logadm_entry "electric-boray" "/var/log" "exact"
 }
 
 # Mainline
@@ -277,20 +277,19 @@ echo "Running common setup scripts"
 manta_common_presetup
 
 echo "Adding local manifest directories"
-manta_add_manifest_dir "/opt/smartdc/electric-moray"
+manta_add_manifest_dir "/opt/smartdc/electric-boray"
 
-manta_common_setup "electric-moray" 0
+manta_common_setup "electric-boray" 0
 
 manta_setup_determine_instances
 
-echo "Setting up leveldb"
-manta_setup_leveldb_hash_ring
+# echo "Setting up leveldb"
+# manta_setup_leveldb_hash_ring
 
-echo "Setting up e-moray"
-manta_setup_electric_moray
-manta_setup_moray_rsyslogd
+echo "Setting up e-boray"
+manta_setup_electric_boray
+manta_setup_boray_rsyslogd
 
 manta_common_setup_end
 
 exit 0
-
diff --git a/lib/boray_client.js b/lib/boray_client.js
new file mode 100644
index 0000000..373a588
--- /dev/null
+++ b/lib/boray_client.js
@@ -0,0 +1,82 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var clone = require('clone');
+var fs = require('fs');
+var boray = require('boray');
+var url = require('url');
+var verror = require('verror');
+
+/*
+ * Create boray clients in order to interact with boray instances.
+ */
+function createClient(options, callback) {
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.array(options.pnodes, 'options.pnodes');
+    assert.object(options.borayOptions, 'options.borayOptions');
+    assert.func(callback, 'options.callback');
+
+    var log = options.log;
+
+    var clientMap = {};
+    var clientArray = [];
+
+    var pnodes = options.pnodes;
+
+    pnodes.forEach(function (pnode) {
+        var pnodeUrl = url.parse(pnode);
+        assert.string(pnodeUrl.port, 'pnodeUrl.port');
+        assert.string(pnodeUrl.hostname, 'pnodeUrl.hostname');
+
+        log.info({
+            url: pnodeUrl
+        }, 'creating boray client');
+
+        var borayargs = clone(options.borayOptions);
+        if (!borayargs.cueballOptions) {
+            borayargs.cueballOptions = {};
+        }
+        borayargs.unwrapErrors = true;
+        borayargs.host = pnodeUrl.hostname;
+        borayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
+        borayargs.log = options.log.child({
+            component: 'boray-client-' + pnodeUrl.hostname
+        });
+
+        var client = boray.createClient(borayargs);
+        clientMap[pnode] = client;
+        clientArray.push(client);
+
+        if (clientArray.length === pnodes.length) {
+            // write ready cookie when clients have connected
+            log.info('all boray clients instantiated writing ready cookie');
+            try {
+                fs.writeFileSync('/var/tmp/electric-boray-ready', null);
+            } catch (e) {
+                throw new verror.VError(e, 'unable to write ready cookie');
+            }
+        }
+    });
+
+    if (clientArray.length <= 0) {
+        throw new verror.VError('No boray clients exist!');
+    }
+
+    return callback(null, {
+        map: clientMap,
+        array: clientArray
+    });
+}
+
+module.exports = {
+    createClient: createClient
+};
diff --git a/lib/dtrace.js b/lib/dtrace.js
index f2a3f9c..f9d449c 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var dtrace = require('dtrace-provider');
@@ -17,38 +17,61 @@ var dtrace = require('dtrace-provider');
 var DTraceProvider = dtrace.DTraceProvider;
 
 var PROBES = {
-    // msgid, req_id, bucket, key, value
-    'putobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
+    // msgid, req_id, owner, bucket
+    'createbucket-start': ['int', 'char *', 'char *', 'char *'],
 
     // msgid
-    'putobject-done': ['int'],
+    'createbucket-done': ['int'],
 
-    // msgid, req_id
-    'batch-start': ['int', 'char *'],
+    // msgid, req_id, owner, bucket
+    'getbucket-start': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid, value
+    'getbucket-done': ['int', 'json'],
+
+    // msgid, req_id, owner, bucket
+    'deletebucket-start': ['int', 'char *', 'char *', 'char *'],
+
+    // msgid
+    'deletebucket-done': ['int'],
+
+    // msgid, req_id, owner, sorted, order_by, prefix, limit
+    'listbuckets-start': ['int', 'char *', 'char *', 'json', 'char *', 'char *',
+        'int'],
 
     // msgid
-    'batch-done': ['int'],
+    'listbuckets-record': ['int'],
 
-    // msgid, req_id, bucket, key
-    'getobject-start': ['int', 'char *', 'char *', 'char *'],
+    // msgid, num_records
+    'listbuckets-done': ['int'],
+
+    // msgid, req_id, owner, bucket, key
+    'createobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
+
+    // msgid
+    'createobject-done': ['int'],
+
+    // msgid, req_id, owner, bucket, key
+    'getobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
 
     // msgid, value
     'getobject-done': ['int', 'json'],
 
-    // msgid, req_id, bucket, key
-    'delobject-start': ['int', 'char *', 'char *', 'char *'],
+    // msgid, req_id, owner, bucket, key
+    'deleteobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
 
     // msgid
-    'delobject-done': ['int'],
+    'deleteobject-done': ['int'],
 
-    // msgid, req_id, bucket, filter
-    'findobjects-start': ['int', 'char *', 'char *', 'char *'],
+    // msgid, req_id, owner, sorted, order_by, prefix, limit
+    'listobjects-start': ['int', 'char *', 'char *', 'json', 'char *', 'char *',
+        'int'],
 
-    // msgid, key, id, etag, value
-    'findobjects-record': ['int', 'char *', 'int', 'char *', 'char *'],
+    // msgid
+    'listobjects-record': ['int'],
 
     // msgid, num_records
-    'findobjects-done': ['int', 'int']
+    'listobjects-done': ['int']
 };
 var PROVIDER;
 
@@ -58,7 +81,7 @@ var PROVIDER;
 
 module.exports = function exportStaticProvider() {
     if (!PROVIDER) {
-        PROVIDER = dtrace.createDTraceProvider('electric-moray');
+        PROVIDER = dtrace.createDTraceProvider('electric-boray');
 
         PROVIDER._fast_probes = {};
 
diff --git a/lib/moray_client.js b/lib/moray_client.js
deleted file mode 100644
index 0f85b2d..0000000
--- a/lib/moray_client.js
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2019, Joyent, Inc.
- */
-
-var assert = require('assert-plus');
-var clone = require('clone');
-var fs = require('fs');
-var boray = require('boray');
-var url = require('url');
-var verror = require('verror');
-
-/*
- * Create moray clients in order to interact with moray instances.  Available
- * moray clients are listed in the ring configuration in LevelDB, which we
- * access in electric moray via node-fash.
- */
-function createClient(options, callback) {
-    assert.object(options, 'options');
-    assert.object(options.log, 'options.log');
-    assert.object(options.ring, 'options.ring');
-    assert.array(options.pnodes, 'options.pnodes');
-    assert.object(options.morayOptions, 'options.morayOptions');
-    assert.func(callback, 'options.callback');
-
-    var log = options.log;
-
-    var clientMap = {};
-    var clientArray = [];
-
-    options.ring.getPnodes(function (err, pnodes) {
-        if (err) {
-            throw new verror.VError(err, 'unable to get pnodes');
-        }
-
-        assert.arrayOfString(pnodes, 'pnodes');
-
-        pnodes.forEach(function (pnode) {
-            var pnodeUrl = url.parse(pnode);
-            assert.string(pnodeUrl.port, 'pnodeUrl.port');
-            assert.string(pnodeUrl.hostname, 'pnodeUrl.hostname');
-
-            log.info({
-                url: pnodeUrl
-            }, 'creating moray client');
-
-            var morayargs = clone(options.morayOptions);
-            if (!morayargs.cueballOptions) {
-                morayargs.cueballOptions = {};
-            }
-            morayargs.unwrapErrors = true;
-            morayargs.srvDomain = pnodeUrl.hostname;
-            morayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
-            morayargs.log = options.log.child({
-                component: 'moray-client-' + pnodeUrl.hostname
-            });
-
-            var client = boray.createClient(morayargs);
-            clientMap[pnode] = client;
-            clientArray.push(client);
-
-            if (clientArray.length === pnodes.length) {
-                // write ready cookie when clients have connected
-                log.info('all moray clients instantiated writing ready cookie');
-                try {
-                    fs.writeFileSync('/var/tmp/electric-moray-ready', null);
-                } catch (e) {
-                    throw new verror.VError(e, 'unable to write ready cookie');
-                }
-            }
-        });
-
-        if (clientArray.length <= 0) {
-            throw new verror.VError('No moray clients exist!');
-        }
-
-        return callback(null, {
-            map: clientMap,
-            array: clientArray
-        });
-    });
-}
-
-function createBucketClient(options, callback) {
-    assert.object(options, 'options');
-    assert.object(options.log, 'options.log');
-    assert.array(options.pnodes, 'options.pnodes');
-    assert.object(options.morayOptions, 'options.morayOptions');
-    assert.func(callback, 'options.callback');
-
-    var log = options.log;
-
-    var clientMap = {};
-    var clientArray = [];
-
-    var pnodes = options.pnodes;
-
-    pnodes.forEach(function (pnode) {
-        var pnodeUrl = url.parse(pnode);
-        assert.string(pnodeUrl.port, 'pnodeUrl.port');
-        assert.string(pnodeUrl.hostname, 'pnodeUrl.hostname');
-
-        log.info({
-            url: pnodeUrl
-        }, 'creating moray client');
-
-        var morayargs = clone(options.morayOptions);
-        if (!morayargs.cueballOptions) {
-            morayargs.cueballOptions = {};
-        }
-        morayargs.unwrapErrors = true;
-        morayargs.host = pnodeUrl.hostname;
-        morayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
-        morayargs.log = options.log.child({
-            component: 'moray-client-' + pnodeUrl.hostname
-        });
-
-        var client = boray.createClient(morayargs);
-        clientMap[pnode] = client;
-        clientArray.push(client);
-
-        if (clientArray.length === pnodes.length) {
-            // write ready cookie when clients have connected
-            log.info('all moray clients instantiated writing ready cookie');
-            try {
-                fs.writeFileSync('/var/tmp/electric-moray-ready', null);
-            } catch (e) {
-                throw new verror.VError(e, 'unable to write ready cookie');
-            }
-        }
-    });
-
-    if (clientArray.length <= 0) {
-        throw new verror.VError('No moray clients exist!');
-    }
-
-    return callback(null, {
-        map: clientMap,
-        array: clientArray
-    });
-}
-
-module.exports = {
-    createClient: createClient,
-    createBucketClient: createBucketClient
-};
diff --git a/lib/server.js b/lib/server.js
index ccecc76..5d30bac 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -22,7 +22,8 @@ var uuid = require('node-uuid');
 var vasync = require('vasync');
 var verror = require('verror');
 
-var moray_client = require('./moray_client');
+var boray_client = require('./boray_client');
+var dtrace = require('./dtrace');
 var errors = require('./errors');
 var data_placement = require('./data_placement');
 
@@ -60,7 +61,7 @@ var GO_ARGS_SCHEMA = [
     { name: 'name', type: 'string' }
 ];
 
-var PO_ARGS_SCHEMA = [
+var CO_ARGS_SCHEMA = [
     { name: 'owner', type: 'string' },
     { name: 'bucket_id', type: 'string' },
     { name: 'name', type: 'string' },
@@ -228,7 +229,7 @@ function createServer(options, callback) {
     // remove ready flag
     log.info('server.createServer: removing ready cookie on startup');
     try {
-        fs.unlinkSync('/var/tmp/electric-moray-ready');
+        fs.unlinkSync('/var/tmp/electric-boray-ready');
     } catch (e) {
         // ignore failures if file DNE
     }
@@ -242,14 +243,14 @@ function createServer(options, callback) {
 
         opts.dataDirector = dataDirector;
 
-        log.info('creating moray clients');
-        moray_client.createBucketClient({
+        log.info('creating boray clients');
+        boray_client.createClient({
             pnodes: opts.dataDirector.getPnodes(),
-            morayOptions: options.morayOptions,
+            borayOptions: options.borayOptions,
             log: options.log
         }, function (cErr, clients) {
             if (cErr) {
-                throw new verror.VError(cErr, 'unable to create moray clients');
+                throw new verror.VError(cErr, 'unable to create boray clients');
             }
 
             opts.clients = clients;
@@ -276,11 +277,11 @@ function createServer(options, callback) {
             var methods = [
                 { rpcmethod: 'getbucket', rpchandler: getBucket(opts) },
                 { rpcmethod: 'createbucket', rpchandler: createBucket(opts) },
-                { rpcmethod: 'deletebucket', rpchandler: delBucket(opts) },
+                { rpcmethod: 'deletebucket', rpchandler: deleteBucket(opts) },
                 { rpcmethod: 'listbuckets', rpchandler: listBuckets(opts) },
                 { rpcmethod: 'getobject', rpchandler: getObject(opts) },
-                { rpcmethod: 'putobject', rpchandler: putObject(opts) },
-                { rpcmethod: 'deleteobject', rpchandler: delObject(opts) },
+                { rpcmethod: 'createobject', rpchandler: createObject(opts) },
+                { rpcmethod: 'deleteobject', rpchandler: deleteObject(opts) },
                 { rpcmethod: 'listobjects', rpchandler: listObjects(opts) }
             ];
 
@@ -289,7 +290,7 @@ function createServer(options, callback) {
             });
 
             var kangOpts = {
-                service_name: 'electric-moray',
+                service_name: 'electric-boray',
                 version: KANG_VERSION,
                 uri_base: '/kang',
                 ident: os.hostname + '/' + process.pid,
@@ -331,7 +332,7 @@ function createServer(options, callback) {
             });
 
             socket.on('listening', function () {
-                log.info('moray listening on %d', options.port);
+                log.info('boray listening on %d', options.port);
                 callback(null, {
                     dataDirector: opts.dataDirector,
                     // ring: opts.ring,
@@ -402,6 +403,7 @@ function createBucket(options) {
     assert.object(options.clients, 'options.clients');
 
     function _createBucket(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, CB_ARGS_SCHEMA)) {
@@ -413,9 +415,9 @@ function createBucket(options) {
 
         var id = options.req_id || uuid.v1();
 
-        // dtrace['createbucket-start'].fire(function () {
-        //     return ([msgid, id, b, k, opts._value]);
-        // });
+        dtrace['createbucket-start'].fire(function () {
+            return ([msgid, id, o, b]);
+        });
 
         var log = options.log.child({
             req_id: id
@@ -445,9 +447,9 @@ function createBucket(options) {
                     meta: meta
                 }, 'createBucket: returned');
 
-                // dtrace['createbucket-done'].fire(function () {
-                //     return ([msgid]);
-                // });
+                dtrace['createbucket-done'].fire(function () {
+                    return ([msgid]);
+                });
 
                 if (pErr) {
                     rpc.fail(pErr);
@@ -472,6 +474,7 @@ function getBucket(options) {
     assert.object(options.clients, 'options.clients');
 
     function _getBucket(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GB_ARGS_SCHEMA)) {
@@ -482,6 +485,11 @@ function getBucket(options) {
         var b = argv[1];
 
         var id = options.req_id || uuid.v1();
+
+        dtrace['getbucket-start'].fire(function () {
+            return ([msgid, id, o, b]);
+        });
+
         var log = options.log.child({
             req_id: id
         });
@@ -507,11 +515,14 @@ function getBucket(options) {
                     bucket: rbucket
                 }, 'getBucket: returned');
 
+                dtrace['getbucket-done'].fire(function () {
+                    return ([msgid]);
+                });
 
                 /*
                  * serialize the deserialized bucket response. To make this
                  * faster, we could:
-                 * 1) modify the moray client to make deserializing optional.
+                 * 1) modify the boray client to make deserializing optional.
                  * 2) directly hook up the streams by modifying the underlying
                  * node-fast stream.
                  */
@@ -529,12 +540,13 @@ function getBucket(options) {
 }
 
 
-function delBucket(options) {
+function deleteBucket(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.clients, 'options.clients');
 
-    function _delBucket(rpc) {
+    function _deleteBucket(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, DB_ARGS_SCHEMA)) {
@@ -545,6 +557,11 @@ function delBucket(options) {
         var b = argv[1];
 
         var id = options.req_id || uuid.v1();
+
+        dtrace['deletebucket-start'].fire(function () {
+            return ([msgid, id, o, b]);
+        });
+
         var log = options.log.child({
             req_id: id
         });
@@ -570,11 +587,14 @@ function delBucket(options) {
                     bucket: rbucket
                 }, 'deleteBucket: returned');
 
+                dtrace['deletebucket-done'].fire(function () {
+                    return ([msgid]);
+                });
 
                 /*
                  * serialize the deserialized bucket response. To make this
                  * faster, we could:
-                 * 1) modify the moray client to make deserializing optional.
+                 * 1) modify the boray client to make deserializing optional.
                  * 2) directly hook up the streams by modifying the underlying
                  * node-fast stream.
                  */
@@ -588,7 +608,7 @@ function delBucket(options) {
         });
     }
 
-    return _delBucket;
+    return _deleteBucket;
 }
 
 function listBuckets(options) {
@@ -597,6 +617,7 @@ function listBuckets(options) {
     assert.object(options.clients, 'options.clients');
 
     function _listBuckets(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, LB_ARGS_SCHEMA)) {
@@ -614,6 +635,11 @@ function listBuckets(options) {
         }
 
         var id = options.req_id || uuid.v1();
+
+        dtrace['listbuckets-start'].fire(function () {
+            return ([msgid, id, owner, sorted, order_by, prefix, limit]);
+        });
+
         var log = options.log.child({
             req_id: id
         });
@@ -665,6 +691,9 @@ function listBuckets(options) {
         };
         paginationStream(opts,
             function onRecord(record) {
+                dtrace['listbuckets-record'].fire(function () {
+                    return ([msgid]);
+                });
                 rpc.write(formatRecord(record));
             },
             function done(err) {
@@ -675,6 +704,11 @@ function listBuckets(options) {
                 }
 
                 log.debug('listBuckets done');
+
+                dtrace['listbuckets-done'].fire(function () {
+                    return ([msgid]);
+                });
+
                 rpc.end();
             });
 
@@ -707,15 +741,16 @@ function listBuckets(options) {
 }
 
 
-function putObject(options) {
+function createObject(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.clients, 'options.clients');
 
-    function _putObject(rpc) {
+    function _createObject(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
-        if (invalidArgs(rpc, argv, PO_ARGS_SCHEMA)) {
+        if (invalidArgs(rpc, argv, CO_ARGS_SCHEMA)) {
             return;
         }
 
@@ -731,9 +766,9 @@ function putObject(options) {
 
         var id = options.req_id || uuid.v1();
 
-        // dtrace['putobject-start'].fire(function () {
-        //     return ([msgid, id, b, k, opts._value]);
-        // });
+        dtrace['createobject-start'].fire(function () {
+            return ([msgid, id, o, b, k]);
+        });
 
         var log = options.log.child({
             req_id: id
@@ -743,7 +778,7 @@ function putObject(options) {
             owner: o,
             bucket: b,
             key: k
-        }, 'putObject: entered');
+        }, 'createObject: entered');
 
         options.dataDirector.getObjectLocation(o, b, k,
             function (err, location) {
@@ -763,16 +798,17 @@ function putObject(options) {
                 props = null;
             }
 
-            client.putObject(o, b, k, content_length, content_md5, content_type,
-                headers, sharks, props, vnode, function (pErr, meta) {
-                log.debug({
+            client.createObject(o, b, k, content_length, content_md5,
+                content_type, headers, sharks, props, vnode,
+                function (pErr, meta) {
+                    log.debug({
                     err: pErr,
                     meta: meta
-                }, 'putObject: returned');
+                }, 'createObject: returned');
 
-                // dtrace['putobject-done'].fire(function () {
-                //     return ([msgid]);
-                // });
+                dtrace['createobject-done'].fire(function () {
+                    return ([msgid]);
+                });
 
                 if (pErr) {
                     rpc.fail(pErr);
@@ -787,7 +823,7 @@ function putObject(options) {
         });
     }
 
-    return _putObject;
+    return _createObject;
 }
 
 
@@ -797,6 +833,7 @@ function getObject(options) {
     assert.object(options.clients, 'options.clients');
 
     function _getObject(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GO_ARGS_SCHEMA)) {
@@ -809,9 +846,9 @@ function getObject(options) {
 
         var id = options.req_id || uuid.v1();
 
-        // dtrace['getobject-start'].fire(function () {
-        //     return ([msgid, id, b, k]);
-        // });
+        dtrace['getobject-start'].fire(function () {
+            return ([msgid, id, o, b, k]);
+        });
 
         var log = options.log.child({
             req_id: id
@@ -850,9 +887,9 @@ function getObject(options) {
                     obj: obj
                 }, 'sanitized object');
 
-                // dtrace['getobject-done'].fire(function () {
-                //     return ([msgid, obj]);
-                // });
+                dtrace['getobject-done'].fire(function () {
+                    return ([msgid, obj]);
+                });
 
                 if (gErr) {
                     rpc.fail(gErr);
@@ -867,12 +904,13 @@ function getObject(options) {
     return _getObject;
 }
 
-function delObject(options) {
+function deleteObject(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.clients, 'options.clients');
 
-    function _delObject(rpc) {
+    function _deleteObject(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GO_ARGS_SCHEMA)) {
@@ -885,9 +923,9 @@ function delObject(options) {
 
         var id = options.req_id || uuid.v1();
 
-        // dtrace['getobject-start'].fire(function () {
-        //     return ([msgid, id, b, k]);
-        // });
+        dtrace['deleteobject-start'].fire(function () {
+            return ([msgid, id, o, b, k]);
+        });
 
         var log = options.log.child({
             req_id: id
@@ -897,7 +935,7 @@ function delObject(options) {
             owner: o,
             bucket: b,
             key: k
-        }, 'delObject: entered');
+        }, 'deleteObject: entered');
 
         options.dataDirector.getObjectLocation(o, b, k,
             function (err, location) {
@@ -915,7 +953,7 @@ function delObject(options) {
                 log.debug({
                     err: gErr,
                     obj: obj
-                }, 'delObject: returned');
+                }, 'deleteObject: returned');
 
                 // MANTA-1400: set the vnode info for debugging purposes
                 if (obj) {
@@ -926,9 +964,9 @@ function delObject(options) {
                     obj: obj
                 }, 'sanitized object');
 
-                // dtrace['getobject-done'].fire(function () {
-                //     return ([msgid, obj]);
-                // });
+                dtrace['deleteobject-done'].fire(function () {
+                    return ([msgid]);
+                });
 
                 if (gErr) {
                     rpc.fail(gErr);
@@ -939,7 +977,7 @@ function delObject(options) {
         });
     }
 
-    return _delObject;
+    return _deleteObject;
 }
 
 function listObjects(options) {
@@ -948,6 +986,7 @@ function listObjects(options) {
     assert.object(options.clients, 'options.clients');
 
     function _listObjects(rpc) {
+        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, LO_ARGS_SCHEMA)) {
@@ -967,9 +1006,9 @@ function listObjects(options) {
 
         var id = options.req_id || uuid.v1();
 
-        // dtrace['getobject-start'].fire(function () {
-        //     return ([msgid, id, b, k]);
-        // });
+        dtrace['listobjects-start'].fire(function () {
+            return ([msgid, id, owner, sorted, order_by, prefix, limit]);
+        });
 
         var log = options.log.child({
             req_id: id
@@ -1019,6 +1058,9 @@ function listObjects(options) {
         };
         paginationStream(opts,
             function onRecord(record) {
+                dtrace['listobjects-record'].fire(function () {
+                    return ([msgid]);
+                });
                 rpc.write(formatRecord(record));
             },
             function done(err) {
@@ -1029,6 +1071,11 @@ function listObjects(options) {
                 }
 
                 log.debug('listObjects done');
+
+                dtrace['listobjects-done'].fire(function () {
+                    return ([msgid]);
+                });
+
                 rpc.end();
             });
 
diff --git a/lib/status_server.js b/lib/status_server.js
index 968ffd1..44eab88 100644
--- a/lib/status_server.js
+++ b/lib/status_server.js
@@ -12,7 +12,7 @@ var assert = require('assert-plus');
 var restify = require('restify');
 
 /*
- * Serves HTTP requests for electric-moray process state access.
+ * Serves HTTP requests for electric-boray process state access.
  */
 function createStatusServer(options, callback) {
     assert.object(options, 'options');
@@ -30,10 +30,10 @@ function createStatusServer(options, callback) {
     };
 
     /*
-     * REST API server to access the status of an electric-moray instance.
+     * REST API server to access the status of an electric-boray instance.
      */
     var server = restify.createServer({
-        name: 'electric-moray-status'
+        name: 'electric-boray-status'
     });
 
     server.get('/status', createStatusHandler(opts));
@@ -48,7 +48,7 @@ function createStatusServer(options, callback) {
 }
 
 /*
- * Exposes the current configured state of an electric-moray process, providing
+ * Exposes the current configured state of an electric-boray process, providing
  * some details about this process and SMF identity.  This information enables
  * other systems to correlate the output of svcs(1) with this status object.
  */
diff --git a/package.json b/package.json
index b378284..6097b7b 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "electric-boray",
-    "description": "buckets moray proxy service",
+    "description": "buckets boray proxy service",
     "version": "1.0.3",
     "author": "Joyent (joyent.com)",
     "private": true,
diff --git a/sapi_manifests/electric-boray/manifest.json b/sapi_manifests/electric-boray/manifest.json
new file mode 100644
index 0000000..37b02b5
--- /dev/null
+++ b/sapi_manifests/electric-boray/manifest.json
@@ -0,0 +1,6 @@
+{
+    "name": "electric-boray",
+    "path": "/opt/smartdc/electric-boray/etc/config.json",
+    "post_cmd": "/usr/sbin/svcadm refresh electric-boray",
+        "master": true
+}
diff --git a/sapi_manifests/electric-moray/template b/sapi_manifests/electric-boray/template
similarity index 91%
rename from sapi_manifests/electric-moray/template
rename to sapi_manifests/electric-boray/template
index b8cac1d..216264c 100644
--- a/sapi_manifests/electric-moray/template
+++ b/sapi_manifests/electric-boray/template
@@ -12,7 +12,7 @@
         "size": 5000,
         "expiry": 60
     },
-    "morayOptions": {
+    "borayOptions": {
         "cueballOptions": {
             "resolvers": [ "nameservice.{{DOMAIN_NAME}}" ]
         }
@@ -31,14 +31,14 @@
         an inverted section, surrounding it with "last" flags, which is a field
         we use to indicate that mustache/hogan.js should not render a trailing
         comma, which JSON disallows.}}
-        "indexShards": [ {{#INDEX_MORAY_SHARDS}}
+        "indexShards": [ {{#INDEX_BORAY_SHARDS}}
             {
                 "host": "{{host}}"{{#readOnly}},
                 {{! The readOnly field should have a value of true, or else it
                 should not be included in the object.  Its value is manipulated
                 via manta-shardadm.}}
                 "readOnly": {{readOnly}}{{/readOnly}}
-            }{{^last}},{{/last}}{{/INDEX_MORAY_SHARDS}}
+            }{{^last}},{{/last}}{{/INDEX_BORAY_SHARDS}}
         ]
     },
     "server_uuid": "{{auto.SERVER_UUID}}",
diff --git a/sapi_manifests/electric-moray/manifest.json b/sapi_manifests/electric-moray/manifest.json
deleted file mode 100644
index c9affb8..0000000
--- a/sapi_manifests/electric-moray/manifest.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "name": "electric-moray",
-    "path": "/opt/smartdc/electric-moray/etc/config.json",
-    "post_cmd": "/usr/sbin/svcadm refresh electric-moray",
-	"master": true
-}
diff --git a/sapi_manifests/registrar/template.in b/sapi_manifests/registrar/template.in
index 5b86e90..280b55e 100644
--- a/sapi_manifests/registrar/template.in
+++ b/sapi_manifests/registrar/template.in
@@ -1,11 +1,11 @@
 {
   "registration": {
     "domain": "{{SERVICE_NAME}}",
-    "type": "moray_host",
+    "type": "boray_host",
     "service": {
       "type": "service",
       "service": {
-        "srvce": "_moray",
+        "srvce": "_boray",
         "proto": "_tcp",
         "port": 2020
       },
@@ -30,7 +30,7 @@
   "adminIp": "{{auto.MANTA_IP}}",
 
   "healthCheck": {
-    "command": "test -e /var/tmp/electric-moray-ready",
+    "command": "test -e /var/tmp/electric-boray-ready",
     "ignoreExitStatus": false,
     "stdoutMatch": {
       "pattern": ""
diff --git a/smf/manifests/electric-moray.xml.in b/smf/manifests/electric-boray.xml.in
similarity index 80%
rename from smf/manifests/electric-moray.xml.in
rename to smf/manifests/electric-boray.xml.in
index 85d0866..8eb2f75 100644
--- a/smf/manifests/electric-moray.xml.in
+++ b/smf/manifests/electric-boray.xml.in
@@ -7,11 +7,11 @@
 -->
 
 <!--
-    Copyright (c) 2018, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
-<service_bundle type="manifest" name="-electric-moray">
-    <service name="smartdc/application/electric-moray" type="service" version="1">
+<service_bundle type="manifest" name="-electric-boray">
+    <service name="smartdc/application/electric-boray" type="service" version="1">
 
         <dependency name="network"
             grouping="require_all"
@@ -44,13 +44,13 @@
         <exec_method
             type="method"
             name="start"
-            exec="node --abort-on-uncaught-exception main.js -f etc/config.json -r %{electric-moray/ring-location} -p %{electric-moray/port} -k %{electric-moray/kang} -s %{electric-moray/status} &amp;"
+            exec="node --abort-on-uncaught-exception main.js -f etc/config.json -r %{electric-boray/ring-location} -p %{electric-boray/port} -k %{electric-boray/kang} -s %{electric-boray/status} &amp;"
             timeout_seconds="30">
-            <method_context working_directory="/opt/smartdc/electric-moray">
+            <method_context working_directory="/opt/smartdc/electric-boray">
                 <method_credential user="root" group="nobody" />
                 <method_environment>
                     <envvar name="PATH"
-                        value="/opt/smartdc/electric-moray/build/node/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
+                        value="/opt/smartdc/electric-boray/build/node/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
                     <envvar name="LD_PRELOAD_32"
                         value="/usr/lib/extendedFILE.so.1" />
                 </method_environment>
@@ -65,12 +65,12 @@
 
         <property_group name="application" type="application" />
 
-        <instance name="@@ELECTRIC-MORAY_INSTANCE_NAME@@" enabled="true">
-            <property_group name="electric-moray" type="application">
-                <propval name="port" type="astring" value="@@ELECTRIC-MORAY_PORT@@" />
+        <instance name="@@ELECTRIC-BORAY_INSTANCE_NAME@@" enabled="true">
+            <property_group name="electric-boray" type="application">
+                <propval name="port" type="astring" value="@@ELECTRIC-BORAY_PORT@@" />
                 <propval name="kang" type="astring" value="@@KANG_PORT@@" />
                 <propval name="status" type="astring" value="@@STATUS_PORT@@" />
-                <propval name="ring-location" type="astring" value="/electric-moray/chash/leveldb-@@ELECTRIC-MORAY_PORT@@" />
+                <propval name="ring-location" type="astring" value="/electric-boray/chash/leveldb-@@ELECTRIC-BORAY_PORT@@" />
             </property_group>
         </instance>
 
@@ -78,7 +78,7 @@
 
         <template>
             <common_name>
-                <loctext xml:lang="C">Joyent electric-moray Service</loctext>
+                <loctext xml:lang="C">Joyent electric-boray Service</loctext>
             </common_name>
         </template>
 
diff --git a/smf/manifests/haproxy.xml.in b/smf/manifests/haproxy.xml.in
index f7bd2d6..689df3c 100644
--- a/smf/manifests/haproxy.xml.in
+++ b/smf/manifests/haproxy.xml.in
@@ -7,7 +7,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
 <service_bundle type="manifest" name="haproxy">
@@ -39,9 +39,9 @@
 
         <exec_method type="method"
             name="start"
-            exec="/opt/local/sbin/haproxy -f /opt/smartdc/electric-moray/etc/haproxy.cfg -D"
+            exec="/opt/local/sbin/haproxy -f /opt/smartdc/electric-boray/etc/haproxy.cfg -D"
             timeout_seconds="30">
-            <method_context working_directory="/opt/smartdc/electric-moray">
+            <method_context working_directory="/opt/smartdc/electric-boray">
                 <method_environment>
                     <envvar name="PATH"
                         value="/opt/local/bin:/usr/bin:/usr/sbin:/bin"/>
