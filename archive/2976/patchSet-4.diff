From e06898fe0eec3180041ec43544fdd9b770ded827 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 5 Dec 2017 08:50:13 -0800
Subject: [PATCH] AGENT-1088 cn-agent should attempt to cleanup after logadm
 Reviewed by: Dave Eddy <dave.eddy@joyent.com> Reviewed by: Orlando Vazquez
 <orlando@joyent.com> Approved by: Orlando Vazquez <orlando@joyent.com>

---
 lib/tasks/machine_destroy.js | 146 +++++++++++++++++++++++++++++------
 1 file changed, 123 insertions(+), 23 deletions(-)

diff --git a/lib/tasks/machine_destroy.js b/lib/tasks/machine_destroy.js
index 1af96b6..a38f103 100644
--- a/lib/tasks/machine_destroy.js
+++ b/lib/tasks/machine_destroy.js
@@ -5,14 +5,23 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
+var common = require('../common');
+var execFile = require('child_process').execFile;
+var fs = require('fs');
+var path = require('path');
+var smartdcconfig = require('../smartdc-config');
 var Task = require('../task_agent/task');
+var vasync = require('vasync');
 var vmadm = require('vmadm');
-var execFile = require('child_process').execFile;
-var common = require('../common');
-var async = require('async');
+
+/*
+ * We'll try to work around logadm bugs (See OS-6053) for platforms older than
+ * this. 20171125T020845Z is the first Jenkins platform that had the "fix".
+ */
+var LOGADM_WORKAROUND_PLATFORM = '20171125T020845Z.';
 
 var MachineDestroyTask = module.exports = function (req) {
     Task.call(this);
@@ -25,34 +34,125 @@ function start() {
     var self = this;
     var uuid = self.req.params.uuid;
     var vmadmOpts = {};
+    var workaroundLogadm = false;
+    var workaroundLogFile = path.join('/zones', uuid, '/root/tmp/vm.log');
 
     vmadmOpts.log = self.log;
     vmadmOpts.req_id = self.req.req_id;
     vmadmOpts.uuid = uuid;
     vmadmOpts.vmadmLogger = common.makeVmadmLogger(self);
 
-    common.ensureProvisionComplete(self.req.uuid, function () {
-        /*JSSTYLED*/
-        vmadm.delete(vmadmOpts, function (error) {
-            var errlines = [];
+    vasync.pipeline({
+        funcs: [
+            function ensureProvisionComplete(_, cb) {
+                common.ensureProvisionComplete(self.req.uuid, cb);
+            },
+            function detectLogadmBugWorkaroundRequired(_, cb) {
+                /*
+                 * This can go away when the fix to OS-6053 is older than the
+                 * minimum supported platform for Triton.
+                 *
+                 */
+                fs.access(workaroundLogFile, function _onAccess(accessErr) {
+                    if (accessErr) {
+                        /* on any error, we assume we don't need workaround */
+                        cb();
+                        return;
+                    }
+
+                    /* no error, so file exists and VM is probably KVM VM */
+                    smartdcconfig.sysinfo(function (sysinfoErr, sysinfo) {
+                        if (sysinfoErr) {
+                            /*
+                             * If we failed to load sysinfo, we'll just skip KVM
+                             * log cleanup. This is best-effort and the log will
+                             * get cleaned up when the system is updated to
+                             * OS-6053 anyway.
+                             */
+                            cb();
+                            return;
+                        }
+
+                        /*
+                         * 'Live Image' should be something like:
+                         *
+                         *   20170922T193941Z
+                         */
+                        if (sysinfo['Live Image'] <
+                            LOGADM_WORKAROUND_PLATFORM) {
 
-            if (error && error.stderrLines) {
-                errlines = error.stderrLines.split('\n');
+                            workaroundLogadm = true;
+                            self.log.warn({uuid: uuid}, 'VM appears to be ' +
+                                'KVM: will try to work around logadm');
+                        }
+
+                        cb();
+                        return;
+                    });
+                });
+            },
+            function deleteVm(_, cb) {
+                /* this will pass the error (if any) to _pipelineCompleted */
+                vmadm.delete(vmadmOpts, cb);
+            },
+            function cleanupKvmLogs(_, cb) {
+                var args = ['-r', workaroundLogFile];
+
+                /*
+                 * This can go away when the fix to OS-6053 is older than the
+                 * minimum supported platform for Triton.
+                 *
+                 */
+                if (!workaroundLogadm) {
+                    cb();
+                    return;
+                }
+
+                execFile('/usr/sbin/logadm', args, function _onExec(err) {
+                    if (err) {
+                        /*
+                         * We only log here, because this is a best-effort
+                         * attempt to work around a bug, it's not considered
+                         * fatal if it doesn't work.
+                         */
+                        self.log.debug({uuid: uuid}, 'Failed to cleanup ' +
+                            'after logadm bugs: ignoring');
+                    }
+                    cb();
+                });
             }
-            if (!error || (error && errlines.length > 0 &&
-                errlines[errlines.length - 1].match(': No such zone')))
-            {
-                self.finish();
-            } else if (error && error.restCode &&
-                (error.restCode === 'VmNotFound'))
-            {
-                self.finish();
-            } else if (error) {
-                var msg = error instanceof Error ? error.message : error;
-                self.fatal('vmadm.delete error: ' + msg);
-                return;
+        ]
+    }, function _pipelineComplete(err) {
+        var errLines = [];
+        var lastErrLine = '';
+        var msg;
+
+        if (!err) {
+            /* Success! */
+            self.finish();
+            return;
+        }
+
+        if (err.stderrLines) {
+            errLines = err.stderrLines.split('\n');
+            if (errLines.length > 0) {
+                lastErrLine = errLines[errLines.length - 1];
             }
-        });
+        }
+
+        if (lastErrLine.match(': No such zone') ||
+            (err.restCode && (err.restCode === 'VmNotFound'))) {
+
+            /*
+             * The zone doesn't exist, so consider the delete a success (so
+             * we're idempotent)
+             */
+            self.finish();
+            return;
+        }
+
+        msg = err instanceof Error ? err.message : err;
+        self.fatal('delete error: ' + msg);
     });
 }
 
-- 
2.21.0

