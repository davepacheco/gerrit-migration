From d21911423f394bb58972341a7f3eafd70253f07b Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 9 May 2017 12:11:25 -0700
Subject: [PATCH] TOOLS-1752 Create tool for creating Triton origin images

---
 .gitignore              |   1 +
 CHANGES.md              |   6 +-
 Makefile                |  56 +++++++-
 README.md               | 280 +++++++++++++++++++++++++++++++++++++---
 images.json             |  19 +++
 package.json            |   9 +-
 tools/build-image.sh    | 227 ++++++++++++++++++++++++++++++++
 tools/build-images.sh   | 100 ++++++++++++++
 tools/publish-images.sh | 144 +++++++++++++++++++++
 9 files changed, 822 insertions(+), 20 deletions(-)
 create mode 100644 images.json
 create mode 100755 tools/build-image.sh
 create mode 100755 tools/build-images.sh
 create mode 100755 tools/publish-images.sh

diff --git a/.gitignore b/.gitignore
index 7e7a84d..56d39c9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 /node_modules
 /tmp
+/build
 /npm-debug.log
diff --git a/CHANGES.md b/CHANGES.md
index 03fd7a3..08c390f 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,10 @@
 
 ## not yet released
 
+## 1.0.1
+
+- Bump the included pkgsrc curl from "curl-7.47.1" to "curl-7.51.0".
+
 ## 1.0.0
 
-(working on it)
+First release. Was only ever an internal experimental release.
diff --git a/Makefile b/Makefile
index 9c2f1a9..53d4f3c 100644
--- a/Makefile
+++ b/Makefile
@@ -4,10 +4,64 @@
 # Makefile for triton-origin-image
 #
 
+NPM = npm
+JSON = ./node_modules/.bin/json
+
+# Gather build info (based on
+# https://github.com/joyent/eng/blob/master/tools/mk/Makefile.defs#L34-L48)
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+GITHASH := $(shell git log -1 --pretty='%H')
+
 
 #
 # Targets
 #
+
 .PHONY: all
-all:
+all: build/buildinfo.json build/image-0-stamp
+
+$(JSON):
+	$(NPM) install
+
+build/buildinfo.json: | $(JSON)
+	mkdir -p build/
+	echo '{}' \
+		| $(JSON) -e "this.branch='$(BRANCH)'" \
+			-e "this.timestamp='$(TIMESTAMP)'" \
+			-e "this.git='$(GITHASH)'" \
+		> $@
+
+.PHONY: buildinfo
+buildinfo: build/buildinfo.json
+
+.PHONY: images
+images: build/image-0-stamp
+
+# Build all images spec'd in images.json and upload to Manta builds area,
+# e.g. /Joyent_Dev/public/builds/triton-origin-image/...
+build/image-0-stamp: build/buildinfo.json images.json
+	./tools/build-images.sh -b build/buildinfo.json -i images.json
+	touch $@
+
+# Publish the built images (identified via "buildinfo.json") to
+# updates.joyent.com.
+publish: build/buildinfo.json
+	./tools/publish-images.sh -b build/buildinfo.json
+
+.PHONY: check
+check:
+	@echo "check ok"
+
+.PHONY: clean
+clean:
+	rm -rf build
 
+.PHONY: distclean
+distclean: clean
+	rm -rf node_modules
diff --git a/README.md b/README.md
index f22dcd0..dbcdd56 100644
--- a/README.md
+++ b/README.md
@@ -5,28 +5,278 @@ guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
 *Triton does not use GitHub PRs* -- and general documentation at the main
 [Triton project](https://github.com/joyent/triton) page.
 
-This repository defines how to build an image for use as an origin image for
-core Triton (and Manta) components, per [RFD
-46](https://github.com/joyent/rfd/blob/master/rfd/0046/README.md).
+This repository defines how "triton-origin" images -- for use as the origin
+image for core Triton (and Manta) components -- are built. [RFD 46: Origin
+images for Triton and Manta core
+images](https://github.com/joyent/rfd/tree/master/rfd/0046) is the primary
+design document for this repo. The goal is to provide a single (or small set) of
+origin images for all Triton and Manta VM components:
 
-tl;dr:
+- to save space for distribution, and
+- to have a well documented common base to help with maintenance.
 
-- This repo builds a "triton-origin-multiarch@1.0.0", say,
-  image and publishes it to updates.joyent.com.
-- A Triton core component, say VMAPI, uses this image as the origin
-  image on which "vmapi" images are built. 
 
+## tl;dr
 
-## How to build and publish a new triton-origin image
+- This repo builds one or more "triton-origin-$pkgsrcArch-$originVer@$version"
+  images, e.g. "triton-origin-multiarch-15.4.1@1.0.0", and publishes them to
+  updates.joyent.com and images.joyent.com. (See the "Building triton-origin
+  images" section below.)
+- After sanity testing, those images are "released" for use by Triton/Manta
+  components. (See the "Releasing triton-origin images" section below.)
+- A Triton/Manta core component, say VMAPI, uses one of these images as the
+  origin image on which "vmapi" images are built. (See the "How to use
+  triton-origin images" section below.)
 
-TODO
+If you are a Triton/Manta developer working on any of its services, then you
+mostly likely only need to care about "How to use triton-origin images".
 
-Something along the lines of:
 
-- `make SOMETHING` to build an image using the current code
-- `make SOMETHING` to publish it to updates.jo
-- Setup a new Jenkins build zone using this image for sdcnode builds
-- Update sdcnode.git to get sdcnode builds for this new image.
+## How to use triton-origin images
+
+This section has the instructions for a switching a Triton or Manta component
+to using a triton-origin image.
+
+1. Find the latest released set of triton-origin images:
+
+        updates-imgadm -C release list --latest name=~triton-origin-
+
+    For example:
+
+        $ updates-imgadm -C release list --latest name=~triton-origin- version=1.0.0
+        UUID                                  NAME                            VERSION  FLAGS  OS       PUBLISHED
+        e24bd5b7-f06b-4d6a-84f1-45c0b342e4d2  triton-origin-multiarch-15.4.1  1.0.0    I      smartos  2017-05-02T06:42:18Z
+
+    and choose the flavour you want. In our example (and at the time of
+    writing) there is only *one* flavour, so that's easy.
+
+2. Update `"image_uuid": "<uuid from step 1>"` for your component in
+   ["targets.json.in" in
+   MG](https://github.com/joyent/mountain-gorilla/blob/master/targets.json.in).
+   This tells the MG-based build to use that origin for image creation.
+
+   For example for VMAPI, we'd update
+   [here](https://github.com/joyent/mountain-gorilla/blob/53f3f76e4dda86e48dbfd07c61faee9814626b2a/targets.json.in#L603-L604).
+
+3. If you are moving from a *non*-triton-origin image, then you can remove
+   the set of pkgsrc packages that are included in triton-origin images
+   from the "pkgsrc" field in "targets.json.in". The included triton-origin
+   packages are:
+
+        coreutils
+        curl
+        gsed
+        patch
+        sudo
+
+4. If your component uses [sdcnode](https://github.com/joyent/sdcnode) (most
+   currently do), then you may need to update `NODE_PREBUILT_` variables in
+   your Makefile. You probably have a block like this:
+
+        NODE_PREBUILT_VERSION=v4.6.1
+        ifeq ($(shell uname -s),SunOS)
+            NODE_PREBUILT_TAG=zone
+            # This is sdc-minimal-multiarch-lts@15.4.1, compat with
+            # triton-origin-multiarch-15.4.1.
+            NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
+        endif
+
+    That `NODE_PREBUILT_IMAGE` value needs to be the image UUID of sdcnode
+    builds which are *compatible* with the triton-origin flavour you are using.
+    "Compatible" here means that it is based on the same `$pkgsrcArch` and
+    `$baseVersion` of the minimal/base origin image. Use the "sdcnode
+    compatibility with triton-origin images" table and example below.
+
+    For example, say you are using "triton-origin-multiarch-15.4.1@1.0.1".
+    That is [based on](./images.json#L5-L9) "minimal-multiarch-lts@15.4.1".
+    From <https://download.joyent.com/pub/build/sdcnode/README.html> we see
+    that there are sdcnode builds for "sdc-minimal-multiarch-lts@15.4.1:
+    18b094b0-eb01-11e5-80c1-175dac7ddf02". Therefore we want:
+
+        NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
+
+5. Update Jenkins (Joyent's current CI system) configuration for your
+   component's job to get an appropriate Jenkins Agent. Specifically the
+   "Label Expression" of the job configuration needs to be updated.
+   See the compatibility table below.
+
+
+### sdcnode compatibility with triton-origin images
+
+Ultimately the authority for which sdcnode builds and triton-origin images are
+available is in the [triton-origin images.json](./images.json) and [sdcnode
+nodeconfigs.json](https://github.com/joyent/sdcnode/blob/master/nodeconfigs.json)
+files. We will try to keep this table up to date:
+
+| triton-origin image            | based on                     | sdcnode compatible build         | `NODE_PREBUILT_VERSION`              |
+| ------------------------------ | ---------------------------- | -------------------------------- | ------------------------------------ |
+| triton-origin-multiarch-15.4.1 | minimal-multiarch-lts@15.4.1 | sdc-minimal-multiarch-lts@15.4.1 | 18b094b0-eb01-11e5-80c1-175dac7ddf02 |
+| -                              | -                            | sdc-base@14.2.0                  | de411e86-548d-11e4-a4b7-3bb60478632a |
+| -                              | -                            | sdc-multiarch@13.3.1             | b4bdc598-8939-11e3-bea4-8341f6861379 |
+| -                              | -                            | sdc-smartos@1.6.3                | fd2cc906-8938-11e3-beab-4359c665ac99 |
+
+
+- Q: Why does sdcnode have "sdc-"-prefixed images?
+  A: Because that's what we did before RFD 46 and triton-origin images. We
+  copied the public "base/smartos/minimal" image and prefixed with "sdc-" to
+  allow having a different lifetime for Triton component origin images than
+  for public usage of those images. This was partially necessitated because
+  many Triton/Manta components still use the long deprecated "smartos@1.6.3"
+  origin image. Eventually, these sdcnode flavours will be phased out.
+
+
+### Joyent Jenkins agent labels compatibility with triton-origin images
+
+| triton-origin image            | Jenkins agent labels                      |
+| ------------------------------ | ----------------------------------------- |
+| triton-origin-multiarch-15.4.1 | image_ver:15.4.1 && pkgsrc_arch:multiarch |
+
+See the internal <https://mo.joyent.com/docs/engdoc/master/jenkins/index.html#agent-labels>
+for details.
+
+
+## Development of triton-origin images
+
+The triton-origin images to be built are defined in
+[images.json](./images.json). This set should remain small to avoid having a
+large number of origin images in play that can increase the size of the Triton
+headnode build on the USB key; and to avoid testing/maintenance surface area.
+
+The active set of triton-origin images is defined by the Triton/Manta
+components' `image_uuid` UUID value in [MG's
+targets.json.in](https://github.com/joyent/mountain-gorilla/blob/master/targets.json.in).
+Those UUIDs refer to origin images published to <https://updates.joyent.com>.
+
+For Joyent Engineering, the "triton-origin-image" Jenkins job handles building
+triton-origin images for pushes to "master". The "Releasing ..." step is still
+manual.
+
+
+### Naming and versioning
+
+Triton-origin images are named and versioned as follows:
+
+    name = "triton-origin-$pkgsrcArch-$originVer"
+    version = "<version string from ./package.json>"
+
+where `$pkgsrcArch` is one of "multiarch" (the typical arch, per discussion in
+RFD 46), "i386", or "x86\_64"; and "$originVer" is the version of the origin
+image on which the triton-origin image is based.
+
+For example, a triton-origin image based on "minimal-multiarch-lts@15.4.1" will
+be "triton-origin-multiarch-15.4.1@1.2.3" (assuming "1.2.3" is the package.json
+version). See the "Naming and versioning" section in RFD 46 for some
+justification.
+
+
+### Building triton-origin images
+
+*First*, to build all the images and export them to Manta
+(at "/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/"):
+
+    make clean all
+
+This will use **your current `triton` CLI profile and `MANTA_*` settings**.
+There is an assumption that this Triton DataCenter has an associated Manta
+(which is a requirement for
+[ExportImage](https://apidocs.joyent.com/cloudapi/#ExportImage)) *and*,
+currently, that **this is the production Manta in us-east
+<https://us-east.manta.joyent.com>**. The latter is because of a limitation in
+CloudAPI that doesn't provide a programmatic way to get the Manta URL with which
+the DC's IMGAPI is associated, if any.
+
+The upload path in Manta roughly follows the pattern used for building Triton
+and Manta components. See <https://github.com/joyent/mountain-gorilla> and,
+for Joyent Engineering builds see
+`/Joyent_Dev/public/builds/triton-origin-image` in Joyent's us-east Manta.
+
+
+*Then*, publish the built images to <https://updates.joyent.com>:
+
+    make publish
+
+This will use **your current `UPDATES_IMGADM_*` settings**, which requires you
+to have publish credentials to updates.jo. If this is the "master" branch, then
+the images will be published to the "dev" channel of updates.jo. Otherwise,
+they will be published to the "experimental" channel of updates.jo.
+
+
+### Releasing triton-origin images
+
+The steps above will build and publish new triton-origin images to the "dev"
+channel of updates.joyent.com. A Triton component, say VMAPI, *could* use that
+new triton-origin image in the "dev" channel. However, we would rather have a
+controlled process where there is an explicit manual step to release new
+triton-origin images. Benefits:
+
+- We hopefully **reduce the number of active triton-origin images in use**. In
+  the extreme, if every Triton component used a different triton-origin image,
+  we could lose the space benefits on the USB key and on zpools for deployment.
+- We use this opportunity to **also publish the new triton-origin images to
+  images.joyent.com and to the Triton Public Cloud**. These triton-origin images
+  are necessary for non-Joyent users (who don't have direct access to our
+  CI system) to [build Triton components
+  themselves](https://github.com/joyent/triton/blob/master/docs/developer-guide/building.md).
+
+A downside is that we have to bother with a manual release process. However,
+I don't expect there to be much churn on triton-origin images, so I doubt it
+will be much of a burden.
+
+How to release a new set of triton-origin images:
+
+1. List the set images in the "dev" channel to release via:
+
+        updates-imgadm -C dev list --latest \
+            name=~triton-origin- version=$(json -f package.json version)
+
+    For example:
+
+        $ updates-imgadm -C dev list --latest name=~triton-origin- version=1.0.0
+        UUID                                  NAME                            VERSION  FLAGS  OS       PUBLISHED
+        e24bd5b7-f06b-4d6a-84f1-45c0b342e4d2  triton-origin-multiarch-15.4.1  1.0.0    I      smartos  2017-05-02T06:42:18Z
+
+2. Create a [TRITON](https://devhub.joyent.com/jira/browse/TRITON) ticket to
+   note the release of new triton-origin images. Include the listing from
+   step 1.
+
+3. Add those images to all of the "release" (required for Triton releases),
+   "staging" (required for the Triton release process), and "support"
+   (required eventually when Support takes release images) channels of
+   updates.joyent.com:
+
+        imageUuids=$(updates-imgadm -C dev list -H -o uuid --latest \
+            name=~triton-origin- version=$(json -f package.json version) | xargs)
+        updates-imgadm -C dev channel-add staging $imageUuids
+        updates-imgadm -C dev channel-add release $imageUuids
+        updates-imgadm -C dev channel-add support $imageUuids
+
+    (Dev Note: One might hit TOOLS-1733 while doing this.)
+
+4. Publish the images to <https://images.joyent.com>: This is a first step in
+   getting them available for non-Joyent users to build Triton components
+   themselves.
+
+   TODO: provide a tool to do this. For now you need to download each from
+   updates.jo, tweak `public: true` in the manifest, and then use
+   `joyent-imgadm` to publish them to images.jo.
+
+5. Open a CM ticket to have the new triton-origin images get imported into
+   the TPC datacenters.
+
+
+### Warning: minimal 16.4.1
+
+The 16.4.x generation of base/minimal images has issue DATASET-1297
+("base-64-lts 16.4.1 image is broken: does not work on platforms older than
+20161108T160947Z"), which is a blocker for triton-origin usage. JoshW mentions
+that to use these we could run them through the deholer.
+
+### Limitation: hardcoded "mantaUrl"
+
+Currently there is no good way to infer the linked `MANTA_URL` for a given
+Triton CLI profile (aka CloudAPI). It would be nice to have that on the
+cloudapi's ListServices. Therefore we currently hardcode the Manta URL in the
+scripts.
 
 
 ## License
diff --git a/images.json b/images.json
new file mode 100644
index 0000000..71fb940
--- /dev/null
+++ b/images.json
@@ -0,0 +1,19 @@
+[
+    {
+        "namePrefix": "triton-origin-multiarch",
+        "desc": "Triton/Manta component origin image based on multiarch 15.4.x",
+        "origin": {
+            "uuid": "ede31770-e19c-11e5-bb6e-3b7de3cca9ce",
+            "name": "minimal-multiarch-lts",
+            "version": "15.4.1"
+        },
+        "pkgsrc": [
+            "coreutils-8.23nb2",
+            "curl-7.51.0",
+            "gsed-4.2.2nb4",
+            "patch-2.7.5",
+            "sudo-1.8.15"
+        ],
+        "protoMinMemoryMb": "1024"
+    }
+]
diff --git a/package.json b/package.json
index 93cc55a..028b320 100644
--- a/package.json
+++ b/package.json
@@ -1,12 +1,15 @@
 {
   "name": "triton-origin-image",
-  "description": "an origin image for Triton DataCenter core components",
-  "version": "1.0.0",
+  "description": "origin images for Triton DataCenter core components",
+  "version": "1.0.1",
   "author": "Joyent (joyent.com)",
   "private": true,
   "homepage": "https://github.com/joyent/triton-origin-image",
   "dependencies": {
-    "triton": "5.1.1"
+    "imgapi-cli": "git+https://github.com/joyent/sdc-imgapi-cli.git#v2.2.5",
+    "json": "9.0.6",
+    "manta": "4.3.0",
+    "triton": "5.2.0"
   },
   "repository": {
     "type": "git",
diff --git a/tools/build-image.sh b/tools/build-image.sh
new file mode 100755
index 0000000..eac75dc
--- /dev/null
+++ b/tools/build-image.sh
@@ -0,0 +1,227 @@
+#!/bin/bash
+# vi: expandtab sw=4 ts=4
+
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Build a single triton-origin image with the given image config.
+#
+
+if [[ -n "$TRACE" ]]; then
+    if [[ -t 1 ]]; then
+        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
+    else
+        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    fi
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
+SCRIPT="$(basename $0)"
+
+export PATH="${TOP}/node_modules/.bin:${PATH}"
+
+
+# ---- support functions
+
+function fatal {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+    fi
+    cleanup 1
+}
+
+function cleanup() {
+    local exit_status=${1:-$?}
+
+    if [[ -n "$KEEP_INFRA_ON_FAILURE" ]]; then
+        echo "$0: NOT cleaning up (\$KEEP_INFRA_ON_FAILURE is set)" >&2
+    else
+        [[ -n "$protoName" ]] && triton instance rm $protoName || true
+        [[ -n "$imageUuid" ]] && triton image rm -f ${imageUuid} || true
+    fi
+
+
+    exit $exit_status
+}
+
+function usage() {
+    echo "Usage:"
+    echo "  $SCRIPT IMAGE-CONFIG-JSON BUILDINFO-FILE"
+    echo ""
+    echo "Options:"
+    echo "  -h       Print this help and exit."
+    echo ""
+    echo "Environment:"
+    echo "  KEEP_INFRA_ON_FAILURE=1     Set this to *not* remove the proto"
+    echo "                              instance and created image on script "
+    echo "                              failure. Useful for debugging."
+}
+
+function usageErr() {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+        echo ""
+    fi
+    usage
+    fatal
+}
+
+
+# ---- mainline
+
+while getopts h opt; do
+    case $opt in
+    h)
+        usage
+        exit 0
+        ;;
+    *)
+        usage
+        exit 1
+        ;;
+    esac
+done
+shift $(($OPTIND - 1))
+
+imageConfig="$1"
+[[ -n "$imageConfig" ]] || usageErr "missing IMAGE-CONFIG-JSON arg"
+buildinfoFile="$2"
+[[ -n "$buildinfoFile" ]] || usageErr "missing BUILDINFO-FILE arg"
+[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
+json -qnf "$buildinfoFile" || fatal "'$buildinfoFile' is not valid JSON"
+
+buildinfo=$(cat "$buildinfoFile")
+originUuid=$(echo "$imageConfig" | json origin.uuid)
+originName=$(echo "$imageConfig" | json origin.name)
+originVersion=$(echo "$imageConfig" | json origin.version)
+imageName=$(echo "$imageConfig" | json namePrefix)-$originVersion
+imageVersion=$(cat $TOP/package.json | json version)
+imageHomepage=$(cat $TOP/package.json | json homepage)
+imageDesc=$(echo "$imageConfig" | json desc)
+protoMinMemoryMb=$(echo "$imageConfig" | json protoMinMemoryMb)
+tritonAccount=$(triton profile get -j | json account)
+tritonKeyId=$(triton profile get -j | json keyId)
+branch=$(echo "$buildinfo" | json branch)
+[[ -n "$branch" ]] || fatal "buildinfo is missing 'branch'"
+timestamp=$(echo "$buildinfo" | json timestamp)
+[[ -n "$timestamp" ]] || fatal "buildinfo is missing 'timestamp'"
+mantaUploadDir=/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/
+mantaLatestLink=/$tritonAccount/public/builds/triton-origin-image/$branch-latest
+
+
+# Validate that origin.uuid matches origin.{name,version} as a sanity check.
+originManifest=$(joyent-imgadm get $originUuid)
+[[ $(echo "$originManifest" | json name) == "$originName" ]] \
+    && [[ $(echo "$originManifest" | json version) == "$originVersion" ]] \
+    || fatal "origin.uuid, $originUuid, does not match name@version in image config: $originName@$originVersion"
+originMinPlatform=$(echo "$originManifest" | json 'requirements.min_platform["7.0"]')
+
+
+trap cleanup ERR
+
+# Hardcoded MANTA_URL b/c can't get from CloudAPI.
+export MANTA_URL=https://us-east.manta.joyent.com
+export MANTA_USER=$tritonAccount
+export MANTA_KEY_ID=$tritonKeyId
+unset MANTA_TLS_INSECURE  # not yet supported
+unset MANTA_SUBUSER  # not supported
+
+
+echo "Building $imageName@$imageVersion image"
+echo "Manta upload dir:"
+echo "    $mantaUploadDir"
+echo "Image config:"
+echo "$imageConfig" | json | sed -e 's/^/    /'
+echo "Triton CLI profile:"
+triton profile get | sed -e 's/^/    /'
+
+# Create the proto instance.
+echo ""
+
+# Find a package with sufficient RAM, but avoid crazy large packages.
+protoPkg=$(triton pkgs -j \
+    | json -gac "this.memory >= $protoMinMemoryMb
+        && this.memory <= 2 * $protoMinMemoryMb" name \
+    | head -1)
+protoName="TEMP-$imageName-proto-$(date +%s)"
+
+pkgsrcPkgs="$(echo "$imageConfig" \
+    | json -e 'this.flat = this.pkgsrc.join(" ")' flat)"
+userScript="/opt/local/bin/pkgin -f -y update"
+userScript="${userScript}; /opt/local/bin/pkgin -y in $pkgsrcPkgs"
+userScript="${userScript}; touch /.done"
+
+triton instance create -w -n $protoName \
+    -m "user-script=$userScript" \
+    "$originUuid" "$protoPkg"
+
+
+# Wait for the user-script to complete.
+ip=$(triton instance ip $protoName)
+ssh="ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$ip"
+count=0
+set +o errexit
+while (( count < 60 )); do
+    $ssh "[[ -f /.done ]] || exit 42" >/dev/null && break
+    rc=$?
+    [[ $rc -ne 42 ]] && fatal "Error during ssh"
+
+    (( count = count + 1 ))
+    sleep 15
+done
+set -o errexit
+$ssh "rm /.done"
+
+
+# Stop the proto and create our image
+echo ""
+echo "Creating image from proto inst $protoName"
+triton instance stop -w $protoName
+
+output=$(triton image create -jw \
+    -d "$imageDesc" \
+    -t "$(json -f $buildinfoFile -o json-0 branch timestamp git)" \
+    --homepage "$imageHomepage" \
+    "$protoName" "${imageName}" "${imageVersion}")
+echo "$output"
+imageUuid=$(echo "$output" | head -1 | json id)
+echo "Image UUID: $imageUuid"
+
+
+# Export the image to our Manta build area
+echo ""
+mmkdir -p $mantaUploadDir
+triton image export $imageUuid $mantaUploadDir
+echo $mantaUploadDir | mput $mantaLatestLink   # create the `BRANCH-latest` file
+mput -f $buildinfoFile -H 'content-type: application/json' \
+    $mantaUploadDir/buildinfo.json
+# TODO: want sha256sums or md5sums files in there?
+
+# Tweaks to imgmanifest for publishing.
+# - Set requirements.min_platform to that of the origin, because we know we
+#   haven't added binary components that depend on the platform on which the
+#   proto instance was deployed.
+# - Set owner to the "not set" UUID (see IMGAPI-408), as is done by
+#   updates.joyent.com itself on import.
+imgmanifestName=$(mls $mantaUploadDir | grep '\.imgmanifest')
+mget -o build/$imgmanifestName $mantaUploadDir/$imgmanifestName
+json -f build/$imgmanifestName -I \
+    -e "this.requirements.min_platform['7.0'] = '$originMinPlatform'" \
+    -e "this.owner = '00000000-0000-0000-0000-000000000000'"
+mput -f build/$imgmanifestName $mantaUploadDir/$imgmanifestName
+
+
+echo ""
+echo "Cleaning up"
+triton instance rm -w $protoName
+triton image rm -f $imageUuid
diff --git a/tools/build-images.sh b/tools/build-images.sh
new file mode 100755
index 0000000..bdfdbdd
--- /dev/null
+++ b/tools/build-images.sh
@@ -0,0 +1,100 @@
+#!/bin/bash
+# vi: expandtab sw=4 ts=4
+
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Build the triton-origin images per the given build info and images config.
+#
+
+if [[ -n "$TRACE" ]]; then
+    if [[ -t 1 ]]; then
+        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
+    else
+        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    fi
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
+SCRIPT="$(basename $0)"
+
+export PATH="${TOP}/node_modules/.bin:${PATH}"
+
+
+# ---- support functions
+
+function fatal {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+    fi
+    exit 1
+}
+
+function usage() {
+    echo "Usage:"
+    echo "  $SCRIPT -i IMAGES-CONFIG-FILE -b BUILDINFO-FILE"
+    echo ""
+    echo "Options:"
+    echo "  -h       Print this help and exit."
+    echo "  -i FILE  images config file, typically ./images.json"
+    echo "  -b FILE  buildinfo file, typically ./build/buildinfo.json"
+}
+
+function usageErr() {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+        echo ""
+    fi
+    usage
+    fatal
+}
+
+
+# ---- mainline
+
+imagesFile=
+buildinfoFile=
+while getopts hi:b: opt; do
+    case $opt in
+    h)
+        usage
+        exit 0
+        ;;
+    i)
+        [[ -n "$OPTARG" ]] && imagesFile="$OPTARG"
+        ;;
+    b)
+        [[ -n "$OPTARG" ]] && buildinfoFile="$OPTARG"
+        ;;
+    *)
+        usage
+        exit 1
+        ;;
+    esac
+done
+shift $(($OPTIND - 1))
+
+[[ -n "$imagesFile" ]] || usageErr "missing '-i FILE' option"
+[[ -f "$imagesFile" ]] || usageErr "images file does not exist: $imagesFile"
+json -qnf "$imagesFile" || fatal "'$imagesFile' is not valid JSON"
+[[ -n "$buildinfoFile" ]] || usageErr "missing '-b FILE' option"
+[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
+
+imagesConfig=$(cat $imagesFile)
+numImages=$(echo "$imagesConfig" | json length)
+for (( i=0; i<$numImages; i++ ))
+do
+    echo ""
+    imageConfig=$(echo "$imagesConfig" | json $i)
+    $TOP/tools/build-image.sh "$imageConfig" "$buildinfoFile"
+done
diff --git a/tools/publish-images.sh b/tools/publish-images.sh
new file mode 100755
index 0000000..7949828
--- /dev/null
+++ b/tools/publish-images.sh
@@ -0,0 +1,144 @@
+#!/bin/bash
+# vi: expandtab sw=4 ts=4
+
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Publish the built images per the given build info.
+#
+
+if [[ -n "$TRACE" ]]; then
+    if [[ -t 1 ]]; then
+        export PS4='\033[90m[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }\033[39m'
+    else
+        export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    fi
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+TOP=$(cd $(dirname $0)/../ > /dev/null; pwd)
+SCRIPT="$(basename $0)"
+
+export PATH="${TOP}/node_modules/.bin:${PATH}"
+
+
+# ---- support functions
+
+function fatal {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+    fi
+    exit 1
+}
+
+function usage() {
+    echo "Usage:"
+    echo "  $SCRIPT -b BUILDINFO-FILE"
+    echo ""
+    echo "Options:"
+    echo "  -h       Print this help and exit."
+    echo "  -b FILE  buildinfo file, typically ./build/buildinfo.json"
+}
+
+function usageErr() {
+    if [[ -n "$1" ]]; then
+        echo "$SCRIPT: error: $1" >&2
+        echo ""
+    fi
+    usage
+    fatal
+}
+
+
+# ---- mainline
+
+buildinfoFile=
+while getopts hb: opt; do
+    case $opt in
+    h)
+        usage
+        exit 0
+        ;;
+    b)
+        [[ -n "$OPTARG" ]] && buildinfoFile="$OPTARG"
+        ;;
+    *)
+        usage
+        exit 1
+        ;;
+    esac
+done
+shift $(($OPTIND - 1))
+
+[[ -n "$buildinfoFile" ]] || usageErr "missing '-b FILE' option"
+[[ -f "$buildinfoFile" ]] || usageErr "buildinfo file does not exist: $buildinfoFile"
+json -qnf "$buildinfoFile" || fatal "'$buildinfoFile' is not valid JSON"
+
+
+buildinfo=$(cat "$buildinfoFile")
+tritonAccount=$(triton profile get -j | json account)
+tritonKeyId=$(triton profile get -j | json keyId)
+branch=$(echo "$buildinfo" | json branch)
+[[ -n "$branch" ]] || fatal "buildinfo is missing 'branch'"
+timestamp=$(echo "$buildinfo" | json timestamp)
+[[ -n "$timestamp" ]] || fatal "buildinfo is missing 'timestamp'"
+mantaUploadDir=/$tritonAccount/public/builds/triton-origin-image/$branch-$timestamp/
+
+
+# Hardcoded MANTA_URL b/c can't get from CloudAPI.
+export MANTA_URL=https://us-east.manta.joyent.com
+export MANTA_USER=$tritonAccount
+export MANTA_KEY_ID=$tritonKeyId
+unset MANTA_TLS_INSECURE  # not yet supported
+unset MANTA_SUBUSER  # not supported
+
+
+if [[ $branch == "master" ]]; then
+    channel=dev
+else
+    channel=experimental
+fi
+imgmanifests=$(mfind -t o -n '^triton-origin-.*\.imgmanifest$' $mantaUploadDir)
+
+for imgmanifestMpath in $imgmanifests; do
+    # Longer term: I'd like to support updates.joyent.com having a special
+    # "import an image from files in the same Manta I use". In which case we
+    # would not need to download the (largish) image file and then immediately
+    # upload it again.
+    #
+    # For now: Download the manifest and file and `updates-imgadm import` it.
+    base=$(basename $imgmanifestMpath .imgmanifest)
+    imgUuid=$(json -f build/$base.imgmanifest uuid)
+    imgName=$(json -f build/$base.imgmanifest name)
+    imgVer=$(json -f build/$base.imgmanifest version)
+    imgFileSha1=$(json -f build/$base.imgmanifest files.0.sha1)
+    echo ""
+    echo "Publishing image $imgUuid ($imgName@$imgVer)"
+    echo "    to https://updates.joyent.com (channel '$channel')"
+
+    # Download the bits to publish. If we already have the (large) file,
+    # try to avoid re-downloading it (e.g. from a failed earlier publish
+    # attempt).
+    mget -o build/$base.imgmanifest $imgmanifestMpath
+    if [[ -f build/$base.zfs.gz ]]; then
+        currSha1=$(openssl dgst -sha1 build/$base.zfs.gz | awk '{print $NF}')
+        if [[ $currSha1 != $imgFileSha1 ]]; then
+            rm build/$base.zfs.gz
+        fi
+    fi
+    if [[ ! -f build/$base.zfs.gz ]]; then
+        mget -o build/$base.zfs.gz $mantaUploadDir/$base.zfs.gz
+    fi
+
+    # Publish it.
+    updates-imgadm -C $channel import -m build/$base.imgmanifest -f build/$base.zfs.gz
+done
-- 
2.21.0

