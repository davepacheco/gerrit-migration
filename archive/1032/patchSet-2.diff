From 7f3268c410ea4a00069ca3ae346b4f65946421af Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 30 Nov 2016 18:23:29 -0800
Subject: [PATCH] joyent/node-mname#9 support for cancelled requests
 joyent/node-mname#10 want configurable socket timeout Reviewed by: Cody Mello
 <cody.mello@joyent.com>

---
 lib/server.js | 28 +++++++++++++++++++++-------
 package.json  |  2 +-
 2 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/lib/server.js b/lib/server.js
index 3cfd06f..1871b6c 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -48,11 +48,15 @@ function Server(options) {
         assert.object(options, 'options');
         assert.object(options.log, 'options.log');
         assert.optionalString(options.name, 'options.name');
+        assert.optionalNumber(options.timeout, 'options.timeout');
 
         this._log = options.log.child({component: 'named.Server'}, true);
         this._name = options.name || 'named';
         this._socket = null;
         this._notifies = {};
+        this._timeout = options.timeout;
+        if (this._timeout === undefined || this._timeout === null)
+                this._timeout = 5000;
 }
 util.inherits(Server, EventEmitter);
 
@@ -108,14 +112,23 @@ Server.prototype.listenTcp = function listenTcp(opts, callback) {
                 var qs = {};
                 var theyEnded = false;
                 sock.on('timeout', function () {
-                        if (Object.keys(qs).length < 1)
+                        var reqs = Object.keys(qs).length;
+                        if (reqs < 1) {
                                 sock.end();
-                        setTimeout(function () {
-                                if (!theyEnded)
-                                        sock.destroy();
-                        }, 5000);
+                                setTimeout(function () {
+                                        if (!theyEnded) {
+                                                log.debug('remote side left ' +
+                                                    'connection dangling, ' +
+                                                    'destroying it');
+                                                sock.destroy();
+                                        }
+                                }, self._timeout);
+                        } else {
+                                log.debug('timeout on tcp socket with %d ' +
+                                    'reqs outstanding', reqs);
+                        }
                 });
-                sock.setTimeout(5000);
+                sock.setTimeout(self._timeout);
                 sock.on('end', function () {
                         theyEnded = true;
                         /* Close our end too if no outstanding requests. */
@@ -202,9 +215,10 @@ Server.prototype.listenTcp = function listenTcp(opts, callback) {
                                     qbuf === undefined) {
                                         log.debug('dropping query response, ' +
                                             'tcp socket already closed');
-                                        return;
+                                        return (false);
                                 }
                                 self.send(query);
+                                return (true);
                         };
 
                         query.end = function end() {
diff --git a/package.json b/package.json
index 4f90dea..b0ec040 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "mname",
   "description": "DNS server library for node.js",
-  "version": "1.2.0",
+  "version": "1.3.0",
   "author": "arekinath <alex@cooperi.net>",
   "contributors": [
     "Mark Cavage",
-- 
2.21.0

