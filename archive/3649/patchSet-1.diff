From 04378f86b17d5368047baf023686ae5edb69f3ef Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Tue, 13 Mar 2018 14:37:06 -0400
Subject: [PATCH] First-cut at new SVP messages, and a version addition too.

---
 .../lib/varpd/svp/common/libvarpd_svp_prot.h  | 65 ++++++++++++++++++-
 1 file changed, 62 insertions(+), 3 deletions(-)

diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
index 16dbdbec05..71cfbe11a4 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
@@ -34,6 +34,8 @@ extern "C" {
  */
 
 #define	SVP_VERSION_ONE	1
+#define	SVP_VERSION_TWO	2
+/* XXX KEBE SAYS -- we are not yet ready to bump this. */
 #define	SVP_CURRENT_VERSION	SVP_VERSION_ONE
 
 typedef struct svp_req {
@@ -58,7 +60,9 @@ typedef enum svp_op {
 	SVP_R_LOG_ACK		= 0x0A,
 	SVP_R_LOG_RM		= 0x0B,
 	SVP_R_LOG_RM_ACK	= 0x0C,
-	SVP_R_SHOOTDOWN		= 0x0D
+	SVP_R_SHOOTDOWN		= 0x0D,
+	SVP_R_REMOTE_VL3_REQ	= 0x0E,
+	SVP_R_REMOTE_VL3_ACK	= 0x0F
 } svp_op_t;
 
 typedef enum svp_status {
@@ -109,8 +113,8 @@ typedef struct svp_vl3_req {
 } svp_vl3_req_t;
 
 /*
- * This response, corresponding to the SVP_R_VL3_ACK, includes an answer to both
- * the VL3->VL2 and the VL2->UL3 requests.
+ * This response, corresponding to the SVP_R_VL3_ACK, includes an answer to
+ * both the VL3->VL2 and the VL2->UL3 requests.
  */
 typedef struct svp_vl3_ack {
 	uint32_t	sl3a_status;
@@ -119,6 +123,31 @@ typedef struct svp_vl3_ack {
 	uint8_t		sl3a_uip[16];
 } svp_vl3_ack_t;
 
+/*
+ * A client issues the SVP_R_REMOTE_VL3_REQ for a far-remote (cross-DC) VL3 IP
+ * address.  The server may take longer because it may query cross-DC to get
+ * the answer for our response.
+ */
+typedef struct svp_rvl3_req {
+	uint8_t		srl3r_ip[16];
+	uint32_t	srl3r_type;	/* Same as SVP_R_VL3_REQ */
+	uint32_t	sl3r_vnetid;
+	/* KEBE ASKS -> should the request include the guess for the dcid? */
+} svp_rvl3_req_t;
+
+/*
+ * The remote-VL3 response contains more than the regular VL3 one, because
+ * overlay needs to rewrite the MAC header completely.
+ */
+typedef struct svp_rvl3_ack {
+	uint32_t	srl3a_status;
+	uint8_t		srl3a_dstmac[ETHERADDRL];
+	uint8_t		srl3a_srcmac[ETHERADDRL];
+	uint16_t	srl3a_vlanid;
+	uint16_t	srl3a_uport;
+	uint8_t		srl3a_uip[16];
+} svp_rvl3_ack_t;
+
 /*
  * SVP_R_BULK_REQ requests a bulk dump of data. Currently we have two kinds of
  * data tables that we need to dump: VL3->VL2 mappings and VL2->UL3 mappings.
@@ -229,6 +258,36 @@ typedef struct svp_shootdown {
 	uint32_t	svsd_vnetid;
 } svp_shootdown_t;
 
+/*
+ * A route-request (SVP_R_ROUTE_REQUEST) queries an SVP server to get a
+ * far-remote (i.e. another Triton Data Center, nee. SDC) SVP server for
+ * far-remote networks.  Modern overlay modules will request IP destinations
+ * using SVP_R_VL3_REQ for remote-Triton networks, but cannot until they know
+ * how to reach the remote-Triton SVP server.
+ */
+typedef struct svp_route_req {
+	uint32_t	srr_vnetid;	/* Requester's vnet ID. */
+	uint16_t	srr_vlan;	/* Requester's VLAN ID. */
+	uint16_t	srr_pad;	/* Zero on xmit, ignore on receipt. */
+	uint32_t	srr_srcip[4];	/* VL3 Source IP. */
+	uint32_t	srr_dstip[4];	/* VL3 Destination IP. */
+} svp_route_req_t;
+
+/*
+ * The far-remote Triton Data Center will answer with the requisite information
+ * to send overlay packets to the appropriate far-remote CNs.
+ */
+typedef struct svp_route_ack {
+	uint32_t	sra_vnetid;	/* Far-remote vnet ID. */
+	uint16_t	sra_vlan;	/* Far-remote VLAN ID. */
+	uint8_t		sra_prefixlen;	/* Prefix length (in6_addr-always) */
+	uint8_t		sra_pad;	/* Zero on xmit, ignore on receipt. */
+	uint32_t	sra_dcid;	/* Far-remote Data Center ID. */
+	/* MAC address for the fake-next-hop of the far-remote fabric. */
+	uint8_t		sra_router_mac[6];
+	/* XXX KEBE ASKS, anything else? */
+} svp_route_ack_t;
+
 #ifdef __cplusplus
 }
 #endif
-- 
2.21.0

