From 71a0dd0b0eade2e8a61d1d78c8a16fe9d899c3f7 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 6 Dec 2017 01:29:50 +0000
Subject: [PATCH] OS-4683 Using the allowed-ips property prevents using dynamic
 addresses

---
 .../generic/usr/lib/brand/jcommon/statechange | 18 +++++-
 src/vm/node_modules/VM.js                     | 63 +++++++++++++++----
 src/vm/node_modules/dladm.js                  | 23 +++++--
 src/vm/tests/test-spoof-opts.js               | 14 +++++
 4 files changed, 102 insertions(+), 16 deletions(-)

diff --git a/overlay/generic/usr/lib/brand/jcommon/statechange b/overlay/generic/usr/lib/brand/jcommon/statechange
index 2f9cbbc2..12f55a74 100644
--- a/overlay/generic/usr/lib/brand/jcommon/statechange
+++ b/overlay/generic/usr/lib/brand/jcommon/statechange
@@ -486,12 +486,20 @@ setup_net()
 			unset allowed_ip_map
 			typeset -A allowed_ip_map
 
+			dynamic_methods=""
+			separator=""
 			OLDIFS=$IFS
 			IFS=,
 
 			for zone_ip in $zone_ips; do
 				# For each static IP available, add it to the list.
-				if [[ $zone_ip != "dhcp" ]] && [[ $zone_ip != "addrconf" ]]; then
+				if [[ $zone_ip == "dhcp" ]]; then
+					dynamic_methods+="${separator}dhcpv4"
+					separator=","
+				elif [[ $zone_ip == "addrconf" ]]; then
+					dynamic_methods+="${separator}addrconf"
+					separator=","
+				else
 					clean_ip=`printf "%s" "${zone_ip}" | sed 's|^\([^/]*\)/.*|\1|'`
 					allowed_ip_map[${clean_ip}]=true
 				fi
@@ -525,6 +533,14 @@ setup_net()
 				log_and_exit \
 				    "error setting VNIC allowed-ips $nic $allowed_ip_list"
 			fi
+
+			# Set the dynamic-methods property on the NIC
+			if [[ -n ${dynamic_methods} ]] &&
+			    ! dladm set-linkprop -t -z $ZONENAME \
+			    -p "dynamic-methods=${dynamic_methods}" ${nic}; then
+				log_and_exit \
+				    "error setting VNIC dynamic-methods $nic $dynamic_methods"
+			fi
 		fi
 
 		if [[ "$enable_dhcp" != "true" ]] && [[ -n "$allowed_dhcp_cids" ]] &&
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index e25b16ec..ac43db55 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -12629,6 +12629,7 @@ function updateVnicAllowedCIDs(uuid, nic, log, callback) {
 function updateVnicAllowedIPs(uuid, nic, log, callback)
 {
     var ips = {};
+    var dyn_methods = [];
     var tracers_obj;
 
     assert(log, 'no logger passed to updateVnicAllowedIPs()');
@@ -12652,11 +12653,13 @@ function updateVnicAllowedIPs(uuid, nic, log, callback)
 
     if (nic.hasOwnProperty('ips')) {
         nic.ips.forEach(function (ip) {
-            if (ipaddr.isAutoConfigOption(ip)) {
-                return;
+            if (ip === 'dhcp') {
+                dyn_methods.push('dhcpv4');
+            } else if (ip === 'addrconf') {
+                dyn_methods.push('addrconf');
+            } else {
+                ips[ipaddr.splitCIDR(ip).ip] = true;
             }
-
-            ips[ipaddr.splitCIDR(ip).ip] = true;
         });
     }
 
@@ -12672,16 +12675,34 @@ function updateVnicAllowedIPs(uuid, nic, log, callback)
 
     ips = Object.keys(ips);
 
-    if (ips.length === 0) {
-        dladm.resetLinkProp(uuid, nic.interface, 'allowed-ips', log, callback);
-    } else {
-        dladm.setLinkProp(uuid, nic.interface, 'allowed-ips', ips, log,
-            callback);
+    function resetAllowedIPs(_, cont) {
+        if (ips.length === 0) {
+            dladm.resetLinkProp(uuid, nic.interface, 'allowed-ips',
+                log, cont);
+        } else {
+            dladm.setLinkProp(uuid, nic.interface, 'allowed-ips', ips,
+                log, cont);
+        }
     }
+
+    function resetDynamicMethods(_, cont) {
+        if (dyn_methods.length === 0) {
+            dladm.resetLinkProp(uuid, nic.interface, 'dynamic-methods',
+                log, cont);
+        } else {
+            dladm.setLinkProp(uuid, nic.interface, 'dynamic-methods',
+                dyn_methods, log, cont);
+        }
+    }
+
+    vasync.pipeline({
+        'funcs': [ resetAllowedIPs, resetDynamicMethods ]
+    }, callback);
 }
 
 function updateVnicProperties(uuid, vmobj, payload, log, callback)
 {
+    var onlineLinks;
     var tracers_obj;
 
     assert(log, 'no logger passed to updateVnicProperties()');
@@ -12706,7 +12727,7 @@ function updateVnicProperties(uuid, vmobj, payload, log, callback)
         return;
     }
 
-    async.forEach(payload.update_nics, function (nic, cb) {
+    function updateSpoofOpts(nic, cb) {
         var opt;
         var needsUpdate = false;
         var needsIPupdate = false;
@@ -12733,6 +12754,7 @@ function updateVnicProperties(uuid, vmobj, payload, log, callback)
         }
 
         if (nic.hasOwnProperty('vrrp_primary_ip')
+            || nic.hasOwnProperty('ips')
             || nic.hasOwnProperty('allowed_ips')
             || nic.hasOwnProperty('allow_ip_spoofing')) {
             needsIPupdate = true;
@@ -12754,6 +12776,11 @@ function updateVnicProperties(uuid, vmobj, payload, log, callback)
             return;
         }
 
+        if (onlineLinks.indexOf(vm_nic.interface) === -1) {
+            cb();
+            return;
+        }
+
         // Using the updated nic object, figure out what spoofing opts to set
         for (opt in spoof_opts) {
             if (vm_nic.hasOwnProperty(opt) && fixBoolean(vm_nic[opt])) {
@@ -12807,7 +12834,21 @@ function updateVnicProperties(uuid, vmobj, payload, log, callback)
                 }
             ]
         }, cb);
-    }, callback);
+    }
+
+    dladm.listLinks(uuid, log, function (err, links) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        onlineLinks = links;
+
+        vasync.forEachParallel({
+            inputs: payload.update_nics,
+            func: updateSpoofOpts
+        }, callback);
+    });
 }
 
 // Ensure that we're logging to the fwadm logs
diff --git a/src/vm/node_modules/dladm.js b/src/vm/node_modules/dladm.js
index 80c1a888..a6e533b2 100644
--- a/src/vm/node_modules/dladm.js
+++ b/src/vm/node_modules/dladm.js
@@ -43,6 +43,7 @@ var execFile = require('child_process').execFile;
 var ARRAY_PROPS = {
     'allowed-ips': 1,
     'allowed-dhcp-cids': 1,
+    'dynamic-methods': 1,
     'protection' : 1
 };
 
@@ -111,14 +112,15 @@ exports.showLinkProp = function (zone, nic, log, callback) {
                 // Comments below are to avoid "comma or semicolon followed
                 // by non-blank" errors (for the comma inside the replace)
 
-                /* JSSTYLED */
                 properties[lastProp].push(fields[0].replace(/,$/, ''));
 
             } else {
-                /* JSSTYLED */
                 val = fields[1].replace(/,$/, '');
-                properties[fields[0]] = ARRAY_PROPS.hasOwnProperty(fields[0]) ?
-                    [val] : val;
+                if (ARRAY_PROPS.hasOwnProperty(fields[0])) {
+                    properties[fields[0]] = val.split(',');
+                } else {
+                    properties[fields[0]] = val;
+                }
                 lastProp = fields[0];
             }
         }
@@ -126,6 +128,19 @@ exports.showLinkProp = function (zone, nic, log, callback) {
     });
 };
 
+exports.listLinks = function (zone, log, callback) {
+    var args = [ 'show-vnic', '-z', zone, '-o', 'link', '-p' ];
+
+    dladm(args, log, function (err, res) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        callback(null, res.stdout.split('\n'));
+    });
+};
+
 exports.showEtherstub = function (stub, log, callback) {
     var args = ['show-etherstub'];
     var stubs = [];
diff --git a/src/vm/tests/test-spoof-opts.js b/src/vm/tests/test-spoof-opts.js
index dfbba753..cba73eb0 100644
--- a/src/vm/tests/test-spoof-opts.js
+++ b/src/vm/tests/test-spoof-opts.js
@@ -50,6 +50,9 @@ function nic_link_props(opts, callback) {
                 return ip + '/32';
             }),
             opts.nic + ': allowed-ips ' + opts.desc);
+        opts.t.deepEqual(props['dynamic-methods'].sort(),
+            opts.dynamic_methods,
+            opts.nic + ': dynamic methods ' + opts.desc);
 
         return callback();
     });
@@ -163,6 +166,7 @@ function brand_test(brand, image, t) {
                     allowed_dhcp_cids: [ '--' ],
                     props: [ 'dhcp-nospoof', 'ip-nospoof', 'mac-nospoof',
                         'restricted' ],
+                    dynamic_methods: [ '--' ],
                     allowed_ips: [ ips[i] ]
                 }, cb2);
             }, cb);
@@ -369,6 +373,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -381,6 +386,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ '--' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -394,6 +400,7 @@ function brand_test(brand, image, t) {
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'ip-nospoof', 'mac-nospoof',
                     'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ips[2], '10.5.0.201', '10.5.0.202']
             }, cb);
 
@@ -409,6 +416,7 @@ function brand_test(brand, image, t) {
                     'dhcp-nospoof', 'ip-nospoof',
                     'mac-nospoof', 'restricted'
                 ],
+                dynamic_methods: [ 'dhcpv6', 'slaac' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -462,6 +470,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -474,6 +483,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -487,6 +497,7 @@ function brand_test(brand, image, t) {
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'ip-nospoof', 'mac-nospoof',
                     'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ips[2], '10.5.0.201', '10.5.0.202']
             }, cb);
 
@@ -540,6 +551,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -551,6 +563,7 @@ function brand_test(brand, image, t) {
                 t: t,
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ '--' ]
             }, cb);
 
@@ -563,6 +576,7 @@ function brand_test(brand, image, t) {
                 allowed_dhcp_cids: [ '--' ],
                 props: [ 'dhcp-nospoof', 'ip-nospoof', 'mac-nospoof',
                     'restricted' ],
+                dynamic_methods: [ '--' ],
                 allowed_ips: [ips[2], '10.5.0.201', '10.5.0.202']
             }, cb);
         }, function (cb) {
-- 
2.21.0

