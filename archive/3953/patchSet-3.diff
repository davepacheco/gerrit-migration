From 83b60efe4edf0a36fc8231835c12fe6513e19c06 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Mon, 30 Apr 2018 14:05:04 -0700
Subject: [PATCH] MANTA-3672 want support for cross-account RBAC role
 membership Reviewed by: Trent Mick <trent.mick@joyent.com>

---
 docs/index.md          | 225 ++++++++++++++++------
 lib/app.js             |   2 +-
 lib/membership.js      | 144 ++++++++++----
 lib/roles.js           | 424 ++++++++++++++++++++++++++++++++---------
 test/analytics.test.js |   2 +-
 test/auth.test.js      |   2 +-
 test/users.test.js     | 228 +++++++++++++++++++++-
 7 files changed, 842 insertions(+), 185 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index b45976e..f39bc10 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -523,18 +523,28 @@ These account users can additionally be organized using [Roles](#roles):
       "id": "ff578c1f-bad5-4d3c-8880-2f76745f2511",
       "name": "devs",
       "members": [
-        "bob",
-        "fred",
-        "pedro"
-      ],
-      "default_members": [
-        "bob",
-        "fred"
+        {
+          "type": "subuser",
+          "id": "985e0ed4-9994-4303-8c43-6c92b7988167",
+          "login": "bob",
+          "default": true
+        },
+        {
+          "type": "subuser",
+          "id": "0cc38461-787a-4c05-a3f3-352a4d55541f",
+          "login": "fred",
+          "default": false
+        }
       ],
       "policies": [
-        "createMachine",
-        "resizeMachine",
-        "createImageFromMachine"
+        {
+          "id": "2104c53f-2e33-4393-9320-a6521d5ef2dc",
+          "name": "createMachine"
+        },
+        {
+          "id": "e8bdd555-eef0-4c1c-83be-93c443b59e3e",
+          "name": "restart instances"
+        }
       ]
     }
 
@@ -908,6 +918,14 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+## 9.0.0
+
+- New object-based format for Roles: the "members" and "policies" properties
+  are now arrays of objects describing their values, rather than arrays of
+  strings as they were before. The "default_members" array is replaced by the
+  "default" boolean property on the objects. You can still elect to use the old
+  interface by using a lower `Accept-Version` than `9.0.0`.
+
 ## 8.11.0
 
 - Added a new API method to the plugin interface: modifyProvisionNetworks. This
@@ -2083,8 +2101,23 @@ Array of role objects.  Each role object has the following fields:
 id        | UUID     | Unique id for this role
 name      | String   | The role name
 policies  | Array    | This account's policies which this role obeys (Optional)
-members   | Array    | This account's user logins this role applies to (Optional)
-default_members | Array | This account's user logins this role applies to by default (Optional)
+members   | Array    | This account's users this role applies to (Optional)
+
+The `policies` Array contains objects with the following fields:
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | UUID     | Unique id for this policy
+name      | String   | The policy name
+
+The `members` Array contains objects with the following fields:
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+type      | String   | Either `"subuser"` or `"account"`
+id        | UUID     | Unique id for this user
+login     | String   | Login name of this user
+default   | Boolean  | If `true`, the user is a default member of the role
 
 ### Errors
 
@@ -2102,7 +2135,7 @@ ResourceNotFound | If `:account` does not exist
     Accept: application/json
     Content-Type: application/json
     Host: api.example.com
-    Api-Version: ~8
+    Accept-Version: ~9
     Authorization: Signature keyId...
 
 ### Example Response
@@ -2117,8 +2150,8 @@ ResourceNotFound | If `:account` does not exist
     Connection: Keep-Alive
     Content-MD5: cxF+Tamx+GkSloXKYHvX/Q==
     Date: Tue, 19 Jan 2016 10:54:05 GMT
-    Server: Joyent Triton 8.0.0
-    Api-Version: 8.0.0
+    Server: cloudapi/9.0.0
+    Api-Version: 9.0.0
     Request-Id: f2a9bf40-be9a-11e5-820f-3bf7c01a78db
     Response-Time: 4086
 
@@ -2127,13 +2160,18 @@ ResourceNotFound | If `:account` does not exist
         "name": "readable",
         "id": "e53b8fec-e661-4ded-a21e-959c9ba08cb2",
         "members": [
-          "foo"
-        ],
-        "default_members": [
-          "foo"
+          {
+            "type": "subuser",
+            "id": "267c1fa9-8247-4860-8b95-61ba6d5a5fb5",
+            "login": "foo",
+            "default": true
+          }
         ],
         "policies": [
-          "readinstance"
+          {
+            "id": "92914b4f-79bf-4664-bc3b-b6dbb424263f",
+            "name": "readinstance"
+          }
         ]
       }
     ]
@@ -2154,8 +2192,23 @@ Get an account role (`:role`) by `id` or `name`.
 id        | UUID     | Unique id for this role
 name      | String   | The role name
 policies  | Array    | This account's policies which this role obeys (Optional)
-members   | Array    | This account's user logins this role applies to (Optional)
-default_members| Array | This account's user logins this role applies to by default (Optional)
+members   | Array    | This account's users this role applies to (Optional)
+
+The `policies` Array contains objects with the following fields:
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | UUID     | Unique id for this policy
+name      | String   | The policy name
+
+The `members` Array contains objects with the following fields:
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+type      | String   | Either `"subuser"` or `"account"`
+id        | UUID     | Unique id for this user
+login     | String   | Login name of this user
+default   | Boolean  | If `true`, the user is a default member of the role
 
 ### Errors
 
@@ -2173,7 +2226,7 @@ ResourceNotFound | If `:account` or `:role` do not exist
     Accept: application/json
     Content-Type: application/json
     Host: api.example.com
-    Api-Version: ~8
+    Accept-Version: ~9
     Authorization: Signature keyId...
 
 ### Example Response
@@ -2188,8 +2241,8 @@ ResourceNotFound | If `:account` or `:role` do not exist
     Connection: Keep-Alive
     Content-MD5: Sr2lbN/2Jhl7q1VsGV63xg==
     Date: Tue, 19 Jan 2016 11:00:08 GMT
-    Server: Joyent Triton 8.0.0
-    Api-Version: 8.0.0
+    Server: cloudapi/9.0.0
+    Api-Version: 9.0.0
     Request-Id: cd193de0-be9b-11e5-b9fe-8768cab09198
     Response-Time: 1268
 
@@ -2197,13 +2250,18 @@ ResourceNotFound | If `:account` or `:role` do not exist
       "name": "readable",
       "id": "e53b8fec-e661-4ded-a21e-959c9ba08cb2",
       "members": [
-        "foo"
-      ],
-      "default_members": [
-        "foo"
+        {
+          "type": "subuser",
+          "id": "267c1fa9-8247-4860-8b95-61ba6d5a5fb5",
+          "login": "foo",
+          "default": true
+        }
       ],
       "policies": [
-        "readinstance"
+        {
+          "id": "92914b4f-79bf-4664-bc3b-b6dbb424263f",
+          "name": "readinstance"
+        }
       ]
     }
 
@@ -2219,7 +2277,24 @@ Create a new role for your account.
 name      | String   | The role's name
 policies  | Array    | This account's policies to be given to this role (Optional)
 members   | Array    | This account's user logins to be added to this role (Optional)
-default_members | Array | This account's user logins to be added to this role and have it enabled by default (Optional)
+
+The `policies` Array contains objects with the following fields (either `id` or
+`name` is required, both may be supplied but if so only `id` will be used):
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | UUID     | Unique id for this policy (either id or name required)
+name      | String   | The policy name (either id or name required)
+
+The `members` Array contains objects with the following fields (either `id` or
+`login` is required, both may be supplied but if so only `id` will be used):
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+type      | String   | Either `"subuser"` or `"account"`
+id        | UUID     | Unique id for this user (either id or login required)
+login     | String   | Login name of this user (either id or login required)
+default   | Boolean  | If `true`, the user is a default member of the role (Optional)
 
 ### Returns
 
@@ -2230,8 +2305,7 @@ Account role.
 id        | UUID     | Unique id for this role
 name      | String   | The role name
 policies  | Array    | This account's policies which this role obeys (Optional)
-members   | Array    | This account's user logins this role applies to (Optional)
-default_members| Array | This account's user logins this role applies to by default (Optional)
+members   | Array    | This account's users this role applies to (Optional)
 
 ### Errors
 
@@ -2245,6 +2319,8 @@ ResourceNotFound | If `:account` does not exist
 
 ### CLI Command:
 
+Note that the CLI command uses the older v7.x/v8.x API.
+
     $ sdc-role create --name=readable --members=foo --default-members=foo --policies=readinstance
 
 Possible alternate formats to pass in multiple items; in `sdc-role`, CSV and
@@ -2260,15 +2336,14 @@ JSON are also acceptable formats for `--members`, `--default-members` and
     Accept: application/json
     Content-Type: application/json
     Host: api.example.com
-    Api-Version: ~8
+    Accept-Version: ~9
     Content-Length: 40
     Authorization: Signature keyId...
 
     {
         "name": "readable",
-        "members": ["foo"],
-        "default_members": ["foo"],
-        "policies": ["readinstance"]
+        "members": [{"type": "subuser", "login": "foo", "default": true}],
+        "policies": [{"name": "readinstance"}]
     }
 
 ### Example Response
@@ -2284,8 +2359,8 @@ JSON are also acceptable formats for `--members`, `--default-members` and
     Connection: Keep-Alive
     Content-MD5: JC584Ys8XLt9OsqeKzFGRA==
     Date: Tue, 19 Jan 2016 11:49:25 GMT
-    Server: Joyent Triton 8.0.0
-    Api-Version: 8.0.0
+    Server: cloudapi/9.0.0
+    Api-Version: 9.0.0
     Request-Id: af9adf10-bea2-11e5-820f-3bf7c01a78db
     Response-Time: 1017
 
@@ -2293,13 +2368,18 @@ JSON are also acceptable formats for `--members`, `--default-members` and
       "name": "readable",
       "id": "e53b8fec-e661-4ded-a21e-959c9ba08cb2",
       "members": [
-        "foo"
-      ],
-      "default_members": [
-        "foo"
+        {
+          "type": "subuser",
+          "id": "267c1fa9-8247-4860-8b95-61ba6d5a5fb5",
+          "login": "foo",
+          "default": true
+        }
       ],
       "policies": [
-        "readinstance"
+        {
+          "id": "7bde94da-e279-4c74-86bc-1b0b046f7fc4",
+          "name": "readinstance"
+        }
       ]
     }
 
@@ -2314,8 +2394,25 @@ Modifies an account role.  Anything but `id` can be modified.
 --------- | -------- | --------------
 name      | String   | The role's name
 policies  | Array    | This account's policies to be given to this role (Optional)
-members   | Array    | This account's user logins to be added to this role (Optional)
-default_members | Array | This account's user logins to be added to this role and have it enabled by default (Optional)
+members   | Array    | This account's users to be added to this role (Optional)
+
+The `policies` Array contains objects with the following fields (either `id` or
+`name` is required, both may be supplied but if so only `id` will be used):
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | UUID     | Unique id for this policy (either id or name required)
+name      | String   | The policy name (either id or name required)
+
+The `members` Array contains objects with the following fields (either `id` or
+`login` is required, both may be supplied but if so only `id` will be used):
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+type      | String   | Either `"subuser"` or `"account"`
+id        | UUID     | Unique id for this user (either id or login required)
+login     | String   | Login name of this user (either id or login required)
+default   | Boolean  | If `true`, the user is a default member of the role (Optional)
 
 ### Returns
 
@@ -2326,8 +2423,7 @@ Account role
 id        | UUID     | Unique id for this role
 name      | String   | The role name
 policies  | Array    | This account's policies which this role obeys (Optional)
-members   | Array    | This account's user logins this role applies to (Optional)
-default_members| Array | This account's user logins this role applies to by default (Optional)
+members   | Array    | This account's users this role applies to (Optional)
 
 ### Errors
 
@@ -2349,12 +2445,15 @@ ResourceNotFound | If `:account` does not exist
     Accept: application/json
     Content-Type: application/json
     Host: api.example.com
-    Api-Version: ~8
+    Api-Version: ~9
     Content-Length: 40
     Authorization: Signature keyId...
 
     {
-        "members": ["foo", "bar"]
+        "members": [
+          {"type": "subuser", "login": "foo", "default": true},
+          {"type": "subuser", "login": "bar"}
+        ]
     }
 
 ### Example Response
@@ -2369,8 +2468,8 @@ ResourceNotFound | If `:account` does not exist
     Connection: Keep-Alive
     Content-MD5: Sr2lbN/2Jhl7q1VsGV63xg==
     Date: Tue, 19 Jan 2016 13:31:13 GMT
-    Server: Joyent Triton 8.0.0
-    Api-Version: 8.0.0
+    Server: cloudapi/9.0.0
+    Api-Version: 9.0.0
     Request-Id: e8534140-beb0-11e5-b819-3f29fab5fc3a
     Response-Time: 1310
 
@@ -2378,14 +2477,24 @@ ResourceNotFound | If `:account` does not exist
       "name": "readable",
       "id": "e53b8fec-e661-4ded-a21e-959c9ba08cb2",
       "members": [
-        "foo",
-        "bar"
-      ],
-      "default_members": [
-        "foo"
+        {
+          "type": "subuser",
+          "id": "267c1fa9-8247-4860-8b95-61ba6d5a5fb5",
+          "login": "foo",
+          "default": true
+        },
+        {
+          "type": "subuser",
+          "id": "383a466a-be93-4664-9625-a876ff655c4c",
+          "login": "bar",
+          "default": false
+        }
       ],
       "policies": [
-        "readinstance"
+        {
+          "id": "7bde94da-e279-4c74-86bc-1b0b046f7fc4",
+          "name": "readinstance"
+        }
       ]
     }
 
diff --git a/lib/app.js b/lib/app.js
index cbad86b..e879b0b 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -276,7 +276,7 @@ module.exports = {
         config.name = 'cloudapi/' + version();
         // API version and package.json version are separate; see RFD 68
         // for more details
-        config.version = ['8.0.0', '7.3.0', '7.2.0', '7.1.0', '7.0.0'];
+        config.version = ['9.0.0', '8.0.0', '7.3.0', '7.2.0', '7.1.0', '7.0.0'];
 
         if (config.dc_maint_eta) {
             var d = new Date(config.dc_maint_eta);
diff --git a/lib/membership.js b/lib/membership.js
index a54941f..85f9bc0 100644
--- a/lib/membership.js
+++ b/lib/membership.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -20,6 +20,7 @@ var assert  = require('assert');
 var restify = require('restify');
 var sprintf = require('util').format;
 var vasync  = require('vasync');
+var semver = require('semver');
 
 var USER_FMT = 'uuid=%s, ou=users, o=smartdc';
 
@@ -215,38 +216,64 @@ function translateGroup(req, group, cb) {
         r.policies = [r.policies];
     }
 
-    if (r.members.length) {
-        pipeline_funcs.push(function _loadMembers(_, _cb) {
-            /* JSSTYLED */
-            var RE = /^uuid=([^,]+)/;
-            var res = RE.exec(r.members[0]);
-            preloadUsers(req, r.members, {
-                searchby: (res !== null) ? 'dn' : 'uuid'
-            }, function (err, users) {
-                if (err) {
-                    return _cb(err);
-                }
-                r.members = users;
-                return _cb(null);
-            });
+    function _loadMembers(prop, _, _cb) {
+        /* JSSTYLED */
+        var subRE = /^uuid=([^,]+), uuid=[^,]+, ou=users, o=smartdc$/;
+        /* JSSTYLED */
+        var acctRE = /^uuid=([^,]+), ou=users, o=smartdc$/;
+
+        var subusers = [];
+        var accounts = [];
+        r[prop].forEach(function (dn) {
+            var res = subRE.exec(dn);
+            if (res !== null) {
+                subusers.push(res[1]);
+                return;
+            }
+            res = acctRE.exec(dn);
+            if (res !== null) {
+                accounts.push(res[1]);
+            }
         });
+        if (subusers.length) {
+            preloadUsers(req, subusers, {
+                searchby: 'uuid'
+            }, _preloadResult);
+        } else {
+            _preloadResult(null, []);
+        }
+        function _preloadResult(err, users) {
+            if (err) {
+                _cb(err);
+                return;
+            }
+            r[prop] = users;
+            vasync.forEachParallel({
+                inputs: accounts,
+                func: function _fetchAccount(uuid, _ccb) {
+                    req.sdc.mahi.getAccountById(uuid, function (merr, acct) {
+                        if (merr) {
+                            _ccb();
+                            return;
+                        }
+                        r[prop].push({
+                            id: acct.account.uuid,
+                            login: acct.account.login,
+                            isAccount: true
+                        });
+                        _ccb();
+                    });
+                }
+            }, _cb);
+        }
+    }
+
+    if (r.members.length) {
+        pipeline_funcs.push(_loadMembers.bind(this, 'members'));
     }
 
     if (r.default_members.length) {
-        pipeline_funcs.push(function _loadDefaultMembers(_, _cb) {
-            /* JSSTYLED */
-            var RE = /^uuid=([^,]+)/;
-            var res = RE.exec(r.default_members[0]);
-            preloadUsers(req, r.default_members, {
-                searchby: (res !== null) ? 'dn' : 'uuid'
-            }, function (err, users) {
-                if (err) {
-                    return _cb(err);
-                }
-                r.default_members = users;
-                return _cb(null);
-            });
-        });
+        pipeline_funcs.push(_loadMembers.bind(this, 'default_members'));
     }
 
 
@@ -268,23 +295,76 @@ function translateGroup(req, group, cb) {
     }
 
 
-    if (pipeline_funcs.length) {
+    if (pipeline_funcs.length && semver.gtr('9.0.0', req.getVersion())) {
         pipeline_funcs.push(function _translate(_, _cb) {
             r.policies = r.policies.map(function (policy) {
                 return (policy.name);
             });
 
-            r.default_members = r.default_members.map(function (member) {
+            r.default_members = r.default_members.filter(function (member) {
+                return (!member.isAccount);
+            }).map(function (member) {
                 return (member.login);
             });
 
-            r.members = r.members.map(function (member) {
+            r.members = r.members.filter(function (member) {
+                return (!member.isAccount);
+            }).map(function (member) {
                 return (member.login);
             });
 
             return _cb(null);
         });
 
+        vasync.pipeline({
+            funcs: pipeline_funcs
+        }, function (err, results) {
+            if (err) {
+                return cb(err);
+            }
+            return cb(null, r);
+        });
+    } else if (pipeline_funcs.length) {
+        pipeline_funcs.push(function _newTranslate(_, _cb) {
+            r.policies = r.policies.map(function (policy) {
+                return ({ id: policy.id, name: policy.name });
+            });
+
+            var members = r.members;
+            var defaults = r.default_members;
+            var map = {};
+
+            delete (r.members);
+            delete (r.default_members);
+
+            members.forEach(function (member) {
+                map[member.id] = member;
+            });
+            defaults.forEach(function (member) {
+                if (map[member.id] === undefined) {
+                    map[member.id] = member;
+                }
+                map[member.id].default = true;
+            });
+
+            r.members = Object.keys(map).map(function (k) {
+                var obj = {
+                    id: map[k].id,
+                    login: map[k].login
+                };
+                if (map[k].default) {
+                    obj.default = true;
+                }
+                obj.type = 'subuser';
+                if (map[k].isAccount) {
+                    obj.type = 'account';
+                }
+                return (obj);
+            });
+
+            return _cb(null);
+        });
+
         vasync.pipeline({
             funcs: pipeline_funcs
         }, function (err, results) {
diff --git a/lib/roles.js b/lib/roles.js
index a5764ca..76768a7 100644
--- a/lib/roles.js
+++ b/lib/roles.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -37,6 +37,8 @@ var restify = require('restify'),
 var bleedingEdge = require('./bleeding-edge'),
     guard = bleedingEdge.bleedingEdgeGuard;
 
+var semver = require('semver');
+
 var resources = require('./resources');
 
 // --- Globals
@@ -60,171 +62,413 @@ var membership = require('./membership'),
 
 
 function parseParams(req, res, next) {
+    var params = req.params;
+    var i, j;
+    var entry = {};
+
+    if (semver.gtr('9.0.0', req.getVersion())) {
+        parseParams_old(req, res, next);
+        return;
+    }
+
+    if (params.name) {
+        if (typeof (params.name) !== 'string') {
+            next(new InvalidArgumentError('Role "name" must be a string'));
+            return;
+        }
+        entry.name = params.name;
+    }
+
+    if (params.policies) {
+        if (!Array.isArray(params.policies)) {
+            next(new InvalidArgumentError('Role "policies" must be an array ' +
+                'of objects'));
+            return;
+        }
+        for (i = 0; i < params.policies.length; ++i) {
+            var policy = params.policies[i];
+            if (typeof (policy) !== 'object') {
+                next(new InvalidArgumentError('Role "policies" must be an ' +
+                    'array of objects'));
+                return;
+            }
+            var keys = Object.keys(policy);
+            for (j = 0; j < keys.length; ++j) {
+                switch (keys[j]) {
+                case 'id':
+                    if (typeof (policy.id) !== 'string' ||
+                        !UUID_RE.test(policy.id)) {
+                        next(new InvalidArgumentError('Policy "id" ' +
+                            'property must be a string UUID'));
+                        return;
+                    }
+                    break;
+                case 'name':
+                    if (typeof (policy.name) !== 'string') {
+                        next(new InvalidArgumentError('Policy "name" ' +
+                            'property must be a string'));
+                        return;
+                    }
+                    break;
+                default:
+                    next(new InvalidArgumentError('Policy references may ' +
+                        'only contain "name" or "id" properties, not ' +
+                        '"' + keys[j] + '"'));
+                    return;
+                }
+            }
+        }
+        entry.policies = params.policies;
+    }
+
+    if (params.members) {
+        if (!Array.isArray(params.members)) {
+            next(new InvalidArgumentError('Role "members" must be an array ' +
+                'of objects'));
+            return;
+        }
+        for (i = 0; i < params.members.length; ++i) {
+            var member = params.members[i];
+            if (typeof (member) !== 'object') {
+                next(new InvalidArgumentError('Role "members" must be an ' +
+                    'array of objects'));
+                return;
+            }
+            if (typeof (member.type) !== 'string') {
+                next(new InvalidArgumentError('Role "member" references must ' +
+                    'have a string "type" property'));
+                return;
+            }
+            keys = Object.keys(member);
+            switch (member.type) {
+            case 'subuser':
+            case 'account':
+                break;
+            default:
+                next(new InvalidArgumentError('Member "type" is not ' +
+                    'supported: "' + member.type + '"'));
+                return;
+            }
+            for (j = 0; j < keys.length; ++j) {
+                switch (keys[j]) {
+                case 'type':
+                    break;
+                case 'id':
+                    if (typeof (member.id) !== 'string' ||
+                        !UUID_RE.test(member.id)) {
+                        next(new InvalidArgumentError('Member "id" ' +
+                            'property must be a string UUID'));
+                        return;
+                    }
+                    break;
+                case 'login':
+                    if (typeof (member.login) !== 'string') {
+                        next(new InvalidArgumentError('Member "login" ' +
+                            'property must be a string'));
+                        return;
+                    }
+                    break;
+                case 'default':
+                    if (member.default !== true && member.default !== false) {
+                        next(new InvalidArgumentError('Member "default" ' +
+                            'property must be a boolean'));
+                        return;
+                    }
+                    break;
+                default:
+                    next(new InvalidArgumentError('Member references may ' +
+                        'only contain "type", "login", "id", or "default" ' +
+                        'properties, not "' + keys[j] + '"'));
+                    return;
+                }
+            }
+        }
+        entry.members = params.members;
+    }
+
+    fetchParamsData(entry, req, res, next);
+}
+
+function parseParams_old(req, res, next) {
     var params = req.params;
     var entry  = {};
+    var memberLookup = {};
 
     if (params.name) {
         entry.name = params.name;
     }
 
     if (params.members) {
+        var members;
         if (typeof (params.members) === 'string') {
             try {
-                entry.uniquemember = JSON.parse(params.members);
+                members = JSON.parse(params.members);
             } catch (e) {}
         }
 
-        if (!entry.uniquemember) {
-            entry.uniquemember = [params.members];
+        if (!members) {
+            members = [params.members];
         }
 
-        if (entry.uniquemember.length && Array.isArray(entry.uniquemember[0])) {
-            entry.uniquemember = entry.uniquemember[0];
+        if (members.length && Array.isArray(members[0])) {
+            members = members[0];
         }
+
+        entry.members = [];
+        members.forEach(function (login) {
+            if (!memberLookup[login]) {
+                var m = { type: 'subuser', login: login, default: false };
+                memberLookup[login] = m;
+                entry.members.push(m);
+            }
+        });
     }
 
-    if (params.policies) {
-        if (typeof (params.members) === 'string') {
+    if (params.default_members) {
+        var defaults;
+        if (typeof (params.default_members) === 'string') {
             try {
-                entry.memberpolicy = JSON.parse(params.policies);
+                defaults = JSON.parse(params.default_members);
             } catch (e) {}
         }
 
-        if (!entry.memberpolicy) {
-            entry.memberpolicy = [params.policies];
+        if (!defaults) {
+            defaults = [params.default_members];
         }
 
-        if (entry.memberpolicy.length && Array.isArray(entry.memberpolicy[0])) {
-            entry.memberpolicy = entry.memberpolicy[0];
+        if (defaults.length && Array.isArray(defaults[0])) {
+            defaults = defaults[0];
         }
-        // It could be possible to give it the empty string, which may cause us
-        // some trouble:
-        if (entry.memberpolicy[0] === '') {
-            entry.memberpolicy = [];
+
+        if (!entry.members) {
+            entry.members = [];
         }
+
+        defaults.forEach(function (login) {
+            var m;
+            if (memberLookup[login]) {
+                m = memberLookup[login];
+            } else {
+                m = { type: 'subuser', login: login };
+                memberLookup[login] = m;
+                entry.members.push(m);
+            }
+            m.default = true;
+        });
     }
 
-    if (params.default_members) {
-        if (typeof (params.default_members) === 'string') {
+    if (params.policies) {
+        var policies;
+        if (typeof (params.policies) === 'string') {
             try {
-                entry.uniquememberdefault = JSON.parse(params.default_members);
+                policies = JSON.parse(params.policies);
             } catch (e) {}
         }
 
-        if (!entry.uniquememberdefault) {
-            entry.uniquememberdefault = [params.default_members];
+        if (!policies) {
+            policies = [params.policies];
         }
 
-        if (entry.uniquememberdefault.length &&
-                Array.isArray(entry.uniquememberdefault[0])) {
-            entry.uniquememberdefault = entry.uniquememberdefault[0];
+        if (policies.length && Array.isArray(policies[0])) {
+            policies = policies[0];
         }
+        // It could be possible to give it the empty string, which may cause us
+        // some trouble:
+        if (policies[0] === '') {
+            policies = [];
+        }
+
+        entry.policies = [];
+        policies.forEach(function (name) {
+            var p = { name: name };
+            entry.policies.push(p);
+        });
     }
 
+    fetchParamsData(entry, req, res, next);
+}
+
+function fetchParamsData(entry, req, res, next) {
     vasync.pipeline({
         funcs: [
-            function _getPolicies(_, cb) {
-                req.policies = {};
-                if (typeof (entry.memberpolicy) === 'number') {
-                    entry.memberpolicy = [String(entry.memberpolicy)];
+            function _getPoliciesByName(_, cb) {
+                if (!entry.policies) {
+                    return cb(null);
                 }
-                if (!entry.memberpolicy || !entry.memberpolicy.length) {
+                var lookup = {};
+                entry.policies.forEach(function (p) {
+                    if (p.name) {
+                        lookup[p.name] = p;
+                    }
+                });
+                var keys = Object.keys(lookup);
+                if (!keys.length) {
                     return cb(null);
                 }
-                return preloadPolicies(req, entry.memberpolicy,
+                return preloadPolicies(req, keys,
                     function (err, policies) {
                     if (err) {
                         return cb(err);
                     } else {
-                        policies.map(function (r) {
-                            req.policies[r.name] = r;
+                        policies.forEach(function (r) {
+                            var p = lookup[r.name];
+                            if (p) {
+                                p.info = r;
+                                p.dn = util.format(POLICY_FMT, r.id,
+                                    req.account.uuid);
+                            }
                         });
                         return cb(null);
                     }
                 });
             },
-            function _getMembers(_, cb) {
-                req.members = {};
-                if (!entry.uniquemember || !entry.uniquemember.length) {
+            function _getPoliciesById(_, cb) {
+                var lookup = {};
+                if (!entry.policies) {
                     return cb(null);
                 }
-                return preloadUsers(req, entry.uniquemember,
-                        function (err, members) {
-                    if (err) {
-                        return cb(err);
-                    } else {
-                        members.map(function (m) {
-                            req.members[m.login] = m;
-                        });
-                        return cb(null);
+                entry.policies.forEach(function (p) {
+                    if (p.id && !p.dn) {
+                        lookup[p.id] = p;
                     }
                 });
-            },
-            function _getDefaultMembers(_, cb) {
-                req.defaultmembers = {};
-                if (!entry.uniquememberdefault ||
-                        !entry.uniquememberdefault.length) {
+                var keys = Object.keys(lookup);
+                if (!keys.length) {
                     return cb(null);
                 }
-                return preloadUsers(req, entry.uniquememberdefault,
-                        function (err, members) {
+                return preloadPolicies(req, keys, { searchby: 'uuid' },
+                    function (err, policies) {
                     if (err) {
                         return cb(err);
                     } else {
-                        members.map(function (m) {
-                            req.defaultmembers[m.login] = m;
+                        policies.forEach(function (r) {
+                            var p = lookup[r.id];
+                            if (p) {
+                                p.info = r;
+                                p.dn = util.format(POLICY_FMT, r.id,
+                                    req.account.uuid);
+                            }
                         });
                         return cb(null);
                     }
                 });
             },
+            function _getSubusers(_, cb) {
+                if (!entry.members) {
+                    cb(null);
+                    return;
+                }
+                var subusers = entry.members.filter(function (m) {
+                    return (m.type === 'subuser');
+                });
+                vasync.forEachParallel({
+                    inputs: subusers,
+                    func: function _getSubuser(m, ccb) {
+                        function _afterGetSubuser(err, i) {
+                            if (err) {
+                                ccb();
+                                return;
+                            }
+                            m.info = i;
+                            m.dn = util.format(SUB_USER_FMT,
+                                i.user.uuid, i.account.uuid);
+                            ccb();
+                        }
+                        if (m.id) {
+                            req.sdc.mahi.getUserById(m.id, _afterGetSubuser);
+                        } else if (m.login) {
+                            req.sdc.mahi.getUser(m.login, req.account.login,
+                                false, _afterGetSubuser);
+                        }
+                    }
+                }, cb);
+            },
+            function _getAccounts(_, cb) {
+                if (!entry.members) {
+                    cb(null);
+                    return;
+                }
+                var accounts = entry.members.filter(function (m) {
+                    return (m.type === 'account');
+                });
+                vasync.forEachParallel({
+                    inputs: accounts,
+                    func: function _getAccount(m, ccb) {
+                        function _afterGetAccount(err, i) {
+                            if (err) {
+                                ccb();
+                                return;
+                            }
+                            m.info = i;
+                            m.dn = util.format(USER_FMT, i.account.uuid);
+                            ccb();
+                        }
+                        if (m.id) {
+                            req.sdc.mahi.getAccountById(m.id, _afterGetAccount);
+                        } else if (m.login) {
+                            req.sdc.mahi.getAccount(m.login, _afterGetAccount);
+                        }
+                    }
+                }, cb);
+            },
 
             function _verifyParams(_, cb) {
                 var errors = [];
                 if (entry.name && entry.name === 'true') {
                     errors.push('"true" is not a valid role name');
                 }
-                if (entry.uniquemember) {
-                    entry.uniquemember =
-                        entry.uniquemember.map(function (login) {
-                        if (!req.members[login]) {
-                            errors.push('Invalid user ' + login);
-                            return false;
+                if (entry.members) {
+                    var members = entry.members;
+
+                    members.forEach(function (m) {
+                        if (!m.info || !m.dn) {
+                            if (m.id) {
+                                errors.push('Invalid ' + m.type + ': ' + m.id);
+                            } else if (m.login) {
+                                errors.push('Invalid ' + m.type + ': ' +
+                                    m.login);
+                            } else {
+                                /* We should never get here */
+                                errors.push('Invalid member: ' +
+                                    JSON.stringify(m));
+                            }
                         }
-                        return (util.format(
-                                SUB_USER_FMT, req.members[login].id,
-                                req.account.uuid));
                     });
-                }
-                if (entry.uniquememberdefault) {
-                    entry.uniquememberdefault =
-                        entry.uniquememberdefault.map(function (login) {
-                        if (!req.defaultmembers[login]) {
-                            errors.push('Invalid default role for user ' +
-                                login);
-                            return false;
-                        }
-                        return (util.format(
-                                SUB_USER_FMT, req.defaultmembers[login].id,
-                                req.account.uuid));
+
+                    delete (entry.members);
+                    entry.uniquemember = members.map(function (m) {
+                        return (m.dn);
+                    });
+                    entry.uniquememberdefault = members.filter(function (m) {
+                        return (m.default);
+                    }).map(function (m) {
+                        return (m.dn);
                     });
                 }
-                if (entry.memberpolicy) {
-                    entry.memberpolicy =
-                        entry.memberpolicy.map(function (policy) {
-                        if (!req.policies[policy]) {
-                            errors.push('Invalid policy ' + policy);
-                            return false;
-                        }
+                if (entry.policies) {
+                    var policies = entry.policies;
 
-                        return (util.format(
-                                POLICY_FMT, req.policies[policy].id,
-                                req.account.uuid));
+                    if (entry.name === ADMIN_ROLE_NAME) {
+                        errors.push('Administrator role cannot have policies');
+                    }
+
+                    policies.forEach(function (p) {
+                        if (!p.info || !p.dn) {
+                            if (p.id) {
+                                errors.push('Invalid policy: ' + p.id);
+                            } else if (p.name) {
+                                errors.push('Invalid policy: ' + p.name);
+                            } else {
+                                errors.push('Invalid policy: ' +
+                                    JSON.stringify(p));
+                            }
+                        }
                     });
-                }
 
-                if (entry.memberpolicy && entry.name === ADMIN_ROLE_NAME) {
-                    errors.push('Administrator role cannot have policies');
+                    delete (entry.policies);
+                    entry.memberpolicy = policies.map(function (p) {
+                        return (p.dn);
+                    });
                 }
 
                 if (errors.length) {
@@ -384,7 +628,9 @@ function update(req, res, next) {
         if (err1) {
             return next(err1);
         }
-        if (group1.name === ADMIN_ROLE_NAME && params.memberpolicy) {
+        if (group1.name === ADMIN_ROLE_NAME &&
+            (params.memberpolicy || params.policies)) {
+
             return next(new InvalidArgumentError(
                     'Administrator role cannot have policies'));
         }
diff --git a/test/analytics.test.js b/test/analytics.test.js
index c9bd8ca..e108183 100644
--- a/test/analytics.test.js
+++ b/test/analytics.test.js
@@ -129,7 +129,7 @@ function checkInstrumentation(t, inst, justCreated) {
 
 
 test('setup', function (t) {
-    common.setup(function (_, clients, server) {
+    common.setup({ clientApiVersion: '~8' }, function (_, clients, server) {
         CLIENTS = clients;
         CLIENT  = clients.user;
         OTHER   = clients.other;
diff --git a/test/auth.test.js b/test/auth.test.js
index 66b2568..0fcbec8 100644
--- a/test/auth.test.js
+++ b/test/auth.test.js
@@ -42,7 +42,7 @@ var ROLE_UUID;
 
 
 test('setup', function (t) {
-    common.setup(function (_, clients, server) {
+    common.setup({ clientApiVersion: '~8' }, function (_, clients, server) {
         CLIENTS = clients;
         SERVER  = server;
 
diff --git a/test/users.test.js b/test/users.test.js
index 0b9a101..7e0ff1d 100644
--- a/test/users.test.js
+++ b/test/users.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -135,7 +135,7 @@ function checkKey(t, key) {
 
 
 test('setup', function (t) {
-    common.setup(function (_, clients, server) {
+    common.setup({ clientApiVersion: '~8' }, function (_, clients, server) {
         CLIENTS = clients;
         CLIENT  = clients.user;
         SUB_CLIENT = clients.subuser;
@@ -369,7 +369,10 @@ test('create another user', function (t) {
 
         SUB_USER_2 = body;
 
-        t.end();
+        /* Sleep for 10 sec to let mahi replicate. */
+        setTimeout(function () {
+            t.end();
+        }, 10000);
     });
 });
 
@@ -1056,6 +1059,225 @@ test('delete role', function (t) {
     });
 });
 
+test('create role v9 - v8 style', function (t) {
+    var role_uuid = libuuid.create();
+    var name = 'a' + role_uuid.substr(0, 7);
+
+    var entry = {
+        name: name,
+        members: [SUB_LOGIN_2, OTHER.login]
+    };
+
+    var opts = {
+        path: '/my/roles',
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.post(opts, entry, function (err, req, res, body) {
+        t.ok(err);
+        t.equal(err.name, 'InvalidArgumentError');
+        t.equal(res.statusCode, 409);
+        t.ok(body);
+        t.end();
+    });
+});
+
+test('create role v9 - extra props', function (t) {
+    var role_uuid = libuuid.create();
+    var name = 'a' + role_uuid.substr(0, 7);
+
+    var entry = {
+        name: name,
+        members: [
+            {
+                type: 'subuser',
+                foobar: 'bar',
+                login: SUB_LOGIN_2,
+                default: false
+            }
+        ]
+    };
+
+    var opts = {
+        path: '/my/roles',
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.post(opts, entry, function (err, req, res, body) {
+        t.ok(err);
+        t.equal(err.name, 'InvalidArgumentError');
+        t.equal(res.statusCode, 409);
+        t.ok(body);
+        t.ok(/foobar/.test(body.message));
+        t.end();
+    });
+});
+
+test('create role v9 - missing type', function (t) {
+    var role_uuid = libuuid.create();
+    var name = 'a' + role_uuid.substr(0, 7);
+
+    var entry = {
+        name: name,
+        members: [
+            {
+                login: SUB_LOGIN_2,
+                default: 'false'
+            }
+        ]
+    };
+
+    var opts = {
+        path: '/my/roles',
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.post(opts, entry, function (err, req, res, body) {
+        t.ok(err);
+        t.equal(err.name, 'InvalidArgumentError');
+        t.equal(res.statusCode, 409);
+        t.ok(body);
+        t.ok(/type/.test(body.message));
+        t.end();
+    });
+});
+
+test('create role v9 - stringified', function (t) {
+    var role_uuid = libuuid.create();
+    var name = 'a' + role_uuid.substr(0, 7);
+
+    var entry = {
+        name: name,
+        members: [
+            {
+                type: 'subuser',
+                login: SUB_LOGIN_2,
+                default: 'false'
+            }
+        ]
+    };
+
+    var opts = {
+        path: '/my/roles',
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.post(opts, entry, function (err, req, res, body) {
+        t.ok(err);
+        t.equal(err.name, 'InvalidArgumentError');
+        t.equal(res.statusCode, 409);
+        t.ok(body);
+        t.ok(/default/.test(body.message));
+        t.end();
+    });
+});
+
+test('create role v9', function (t) {
+    var role_uuid = libuuid.create();
+    var name = 'a' + role_uuid.substr(0, 7);
+
+    var entry = {
+        name: name,
+        members: [
+            {
+                type: 'subuser',
+                login: SUB_LOGIN_2,
+                default: false
+            },
+            {
+                type: 'account',
+                login: OTHER.login,
+                default: true
+            }
+        ],
+        policies: [
+            {
+                id: POLICY_UUID
+            }
+        ]
+    };
+
+    var opts = {
+        path: '/my/roles',
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.post(opts, entry, function (err, req, res, body) {
+        t.ifError(err);
+        t.ok(body);
+        t.equal(res.statusCode, 201);
+        common.checkHeaders(t, res.headers);
+        checkRole(t, body);
+
+        ROLE_UUID = body.id;
+        ROLE_NAME = body.name;
+
+        t.end();
+    });
+});
+
+test('get role (by UUID)', function (t) {
+    CLIENT.get('/my/roles/' + ROLE_UUID, function (err, req, res, body) {
+        t.ifError(err);
+        t.equal(res.statusCode, 200);
+        common.checkHeaders(t, res.headers);
+        t.ok(body);
+        t.equal(body.id, ROLE_UUID);
+        t.deepEqual(body.members, [SUB_LOGIN_2]);
+        t.deepEqual(body.default_members, []);
+        t.deepEqual(body.policies, [POLICY_NAME]);
+        t.end();
+    });
+});
+
+test('get role v9 (by UUID)', function (t) {
+    var opts = {
+        path: '/my/roles/' + ROLE_UUID,
+        headers: {
+            'accept-version': '~9'
+        }
+    };
+    CLIENT.get(opts, function (err, req, res, body) {
+        t.ifError(err);
+        t.equal(res.statusCode, 200);
+        common.checkHeaders(t, res.headers);
+        t.ok(body);
+        t.strictEqual(body.id, ROLE_UUID, 'role UUID matches');
+        t.ok(Array.isArray(body.members), 'members is an array');
+        t.strictEqual(typeof (body.members[0]), 'object',
+            'members[0] is object');
+        t.strictEqual(body.members.length, 2, '2 members present');
+        body.members.forEach(function (member) {
+            if (member.type === 'subuser') {
+                t.strictEqual(member.login, SUB_LOGIN_2);
+            } else if (member.type === 'account') {
+                t.strictEqual(member.login, OTHER.login);
+            }
+        });
+        t.ok(Array.isArray(body.policies), 'policies is an array');
+        t.strictEqual(typeof (body.policies[0]), 'object',
+            'policies[0] is object');
+        t.strictEqual(body.policies[0].id, POLICY_UUID, 'policy uuid');
+        t.strictEqual(body.policies[0].name, POLICY_NAME, 'policy name');
+        t.end();
+    });
+});
+
+test('delete role', function (t) {
+    var url = '/my/roles/' + ROLE_UUID;
+
+    CLIENT.del(url, function (err, req, res) {
+        t.ifError(err);
+        t.equal(res.statusCode, 204);
+        common.checkHeaders(t, res.headers);
+        t.end();
+    });
+});
 
 test('delete second role', function (t) {
     var url = '/my/roles/' + ROLE_UUID_2;
-- 
2.21.0

