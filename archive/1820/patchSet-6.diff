From 494bf603b82f8972e81be7914caccf9e0b56f2dd Mon Sep 17 00:00:00 2001
From: Richard Bradley <richard.bradley@joyent.com>
Date: Wed, 26 Apr 2017 14:48:46 +0100
Subject: [PATCH] MANTA-3228 "mgenazconfig.js" should be able to create a Manta
 networking config file MANTA-3231 Missing sprintf arg in warning when server
 is missing from Triton data

---
 bin/mgenazconfig.js   | 322 +++++++++++++++++++++++++++++++++++++++++-
 docs/gen-manta-net.md |  92 ++++++++++++
 lib/schema.js         |  34 +++++
 3 files changed, 445 insertions(+), 3 deletions(-)
 create mode 100644 docs/gen-manta-net.md

diff --git a/bin/mgenazconfig.js b/bin/mgenazconfig.js
index 069fa61..1f9d060 100755
--- a/bin/mgenazconfig.js
+++ b/bin/mgenazconfig.js
@@ -41,7 +41,8 @@ var mod_triton = require('../lib/triton');
 var mgCmds = {
     'fetch-inventory': mgCmdFetchInventory,
     'fetch-triton': mgCmdFetchTriton,
-    'gen-manta': mgCmdGenManta
+    'gen-manta': mgCmdGenManta,
+    'gen-manta-net': mgCmdGenMantaNet
 };
 
 /* getopt option string for global options */
@@ -64,6 +65,15 @@ var mgHardwareToServerType = {
     'Joyent-Storage-Platform-7001': 'storage'
 };
 
+/*
+ * Networks required as part of `manta-net.sh`'s configuration file.
+ */
+var mgNetworkNames = [
+    'admin',
+    'manta',
+    'marlin'
+];
+
 function main()
 {
 	var mgopts, args, parser, option, funcs;
@@ -90,7 +100,8 @@ function main()
 	    'synopses': [
 	        '[-c CONFIG_FILE] [-d DATA_DIR] fetch-inventory REGION',
 	        '[-c CONFIG_FILE] [-d DATA_DIR] fetch-triton REGION',
-	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta REGION'
+	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta REGION',
+	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta-net REGION'
 	    ]
 	});
 
@@ -546,6 +557,44 @@ function mgCmdGenManta(mgopts, callback)
 	});
 }
 
+function mgCmdGenMantaNet(mgopts, callback)
+{
+	var funcs;
+
+	if (mgopts.mgo_cmdargs.length === 0) {
+		mod_cmdutil.usage('expected region name');
+	}
+
+	if (mgopts.mgo_cmdargs.length > 1) {
+		mod_cmdutil.usage('extra arguments');
+	}
+
+	if (!mgRegionArg(mgopts, callback)) {
+		return;
+	}
+
+	funcs = [];
+	funcs.push(function findLatestInventory(_, subcallback) {
+		mgopts.mgo_devices_by_az = {};
+		mgFindLatest({
+		    'mgopts': mgopts,
+		    'type': 'inventory',
+		    'process': mgParseInventory,
+		    'required': true
+		}, subcallback);
+	});
+
+	funcs.push(function genMantaNet(_, subcallback) {
+		mgGenMantaNet(mgopts, subcallback);
+	});
+
+	mod_vasync.pipeline({
+	    'funcs': funcs
+	}, function (err) {
+		callback(err);
+	});
+}
+
 function mgFindLatest(args, callback)
 {
 	var mgopts, type, processFunc, required;
@@ -934,6 +983,185 @@ function mgGenManta(mgopts, callback)
 	mgGenMantaFinish(mgopts, rv, callback);
 }
 
+function mgGenMantaNet(mgopts, callback)
+{
+	var rv, counters, azs, counters_az, config_az, racks;
+	var usedSerials, errors, warnings;
+
+	errors = [];
+	rv = [];
+	usedSerials = {};
+	counters = {};
+
+	azs = mgopts.mgo_config_region.azs.map(function (az) {
+		return (az.name);
+	});
+
+	/*
+	 * Here we check for the existence of the "networking" object in each
+	 * AZ's config. This is a hard failure in `gen-manta-net`, and the
+	 * reason it's not enforced in the schema is because we don't want to
+	 * have to define networking information if `gen-manta-net` isn't to be
+	 * used (e.g. the user only wants to make use of `gen-manta`).
+	 */
+	mgopts.mgo_config_region.azs.forEach(function (az) {
+		if (!az.hasOwnProperty('networking')) {
+			errors.push(new VError(
+			    '%s has no "networking" property', az.name));
+		}
+	});
+	if (errors.length > 0) {
+		setImmediate(callback, new VError.MultiError(errors));
+		return;
+	}
+
+	mgopts.mgo_config_region.azs.forEach(function (az) {
+		counters_az = {
+		    'nMetadata': 0,
+		    'nStorage': 0,
+		    'nMantaVnics': 0,
+		    'nUsedMac': 0,
+		    'nMissingUuid': 0
+		};
+
+		config_az = {};
+		config_az.this_az = az.name;
+		config_az.azs = azs;
+		config_az.manta_nodes = [];
+		config_az.marlin_nodes = [];
+		config_az.nic_mappings = {};
+
+		mgNetworkNames.forEach(function (n) {
+			mod_assertplus.ok(az.networking.hasOwnProperty(n),
+			    az.name + ' missing network definition: ' + n);
+
+			config_az[n] = {};
+			config_az[n]['network'] = az.networking[n].network.name;
+			config_az[n]['nic_tag'] =
+			    az.networking[n].network.nic_tag;
+
+			mgopts.mgo_config_region.azs.forEach(function (sub_az) {
+				mod_assertplus.ok(sub_az.networking.
+				    hasOwnProperty(n), az.name + ' missing ' +
+				    'network definition: ' + n);
+
+				var network = sub_az.networking[n]['network'];
+				var row = {};
+				row['subnet'] = network.subnet;
+				row['gateway'] = network.gateway;
+				if (n !== 'admin') {
+				    row['start'] = network.provision_start_ip;
+				    row['end'] = network.provision_end_ip;
+				    row['vlan_id'] = network.vlan_id;
+				}
+				config_az[n][sub_az.name] = row;
+			});
+		});
+
+		racks = az.d42racks;
+
+		mgopts.mgo_devices_by_az[az.name].forEach(function (device) {
+			var type, uuid;
+
+			if (device.d42d_uuid === null) {
+				uuid = device.d42d_serial;
+				counters_az['nMissingUuid']++;
+			} else {
+				uuid = device.d42d_uuid;
+			}
+
+			if (racks.indexOf(device.d42d_rack) < 0)
+				return;
+
+			if (device.d42d_hardware === null ||
+			    !mod_jsprim.hasKey(mgHardwareToServerType,
+			    device.d42d_hardware))
+				return;
+
+			type = mgHardwareToServerType[device.d42d_hardware];
+			if (type !== 'storage' && type !== 'metadata')
+				return;
+
+			if (type === 'storage') {
+				counters_az['nStorage']++;
+				config_az.marlin_nodes.push(uuid);
+			} else if (type === 'metadata') {
+				counters_az['nMetadata']++;
+			}
+
+			config_az.manta_nodes.push(uuid);
+			config_az.nic_mappings[uuid] =
+			    mgGenNicMapping(counters_az, az, uuid, type);
+			usedSerials[device.d42d_serial] = device;
+		});
+
+		rv.push(config_az);
+		counters[az.name] = counters_az;
+	});
+
+	warnings = mgGenMantaNetCrossCheck(mgopts, rv, usedSerials, counters);
+	mgGenMantaNetSummarize(mgopts, warnings, counters);
+
+	if (errors.length > 0) {
+		setImmediate(callback, new VError.MultiError(errors));
+		return;
+	}
+
+	mod_vasync.forEachParallel({
+	    'func': function netFinish(az, cb) {
+		mgGenMantaNetFinish(mgopts, az, cb);
+	    },
+	    'inputs': rv
+	}, callback);
+}
+
+/*
+ * Takes as input the Device 42 object for a device and the type of Manta
+ * server of this device and returns an object that is appropriate for use
+ * in the "nic_mappings" section in the networking config file.
+ */
+function mgGenNicMapping(counters, az, uuid, type)
+{
+	var networking;
+	var mapping = {};
+
+	mod_assertplus.object(az, 'az');
+	mod_assertplus.object(counters, 'counters');
+	mod_assertplus.number(counters.nUsedMac, 'counters.nUsedMac');
+	mod_assertplus.string(uuid, 'uuid');
+	mod_assertplus.ok(type === 'metadata' || type === 'storage');
+
+	networking = az.networking;
+
+	mgNetworkNames.forEach(function (n) {
+		/*
+		 * The "admin" network should already have a NIC tag, so
+		 * `manta-net.sh` doesn't attempt to tag it.
+		 */
+		if (n === 'admin')
+			return;
+		/*
+		 * Only storage nodes need to have a NIC tag for the marlin
+		 * network.
+		 */
+		if (type === 'metadata' && n === 'marlin')
+			return;
+
+		if (networking[n].nic_mapping === '<mac>') {
+			counters.nUsedMac++;
+			mapping[networking[n].network.nic_tag] = {
+			    'mac': uuid + '-MAC'
+			};
+		} else {
+			mapping[networking[n].network.nic_tag] = {
+			    'aggr': networking[n].nic_mapping
+			};
+		}
+	});
+
+	return (mapping);
+}
+
 /*
  * Run additional cross-checks using whatever data we have.  Returns an array of
  * warnings.
@@ -1047,7 +1275,7 @@ function mgGenMantaCrossCheck(mgopts, result, servers, counters)
 
 		if (!mod_jsprim.hasKey(allserversBySerial, serial)) {
 			warnings.push(new VError('server %s: not found in ' +
-			    'Triton data'));
+			    'Triton data', serial));
 			return;
 		}
 
@@ -1089,6 +1317,36 @@ function mgGenMantaCrossCheck(mgopts, result, servers, counters)
 	return (warnings);
 }
 
+function mgGenMantaNetCrossCheck(mgopts, result, servers, counters)
+{
+	var warnings, nUsedMac, az;
+
+	warnings = [];
+	nUsedMac = 0;
+	nMissingUuid = 0;
+
+	for (az in counters) {
+		nUsedMac += counters[az]['nUsedMac'];
+		nMissingUuid += counters[az]['nMissingUuid'];
+	}
+	if (nUsedMac > 0) {
+		warnings.push(new VError('Some servers have been configured ' +
+		    'to use a MAC address for either their "manta" or ' +
+		    '"marlin" network. These are represented in nic_mappings ' +
+		    'as { "mac": "$server_uuid-MAC" } which will need to be ' +
+		    'replaced with their real MAC address.'));
+	}
+	if (nMissingUuid > 0){
+		warnings.push(new VError('Some servers are missing a ' +
+		    '"uuid" property.  Serial numbers have been used in the ' +
+		    'output file instead of uuids.  The resulting output ' +
+		    'file cannot be directly used for deployment, but it ' +
+		    'can be used to verify the distribution of instances.'));
+	}
+
+	return (warnings);
+}
+
 /*
  * Print out a summary of the generated config.
  */
@@ -1123,6 +1381,31 @@ function mgGenMantaSummarize(mgopts, warnings, counters)
 	}
 }
 
+function mgGenMantaNetSummarize(mgopts, warnings, counters)
+{
+	var az;
+	/*
+	 * Some of these counters will use the same information, but it's
+	 * still useful to have these seemingly-duplicated counts across
+	 * different messages as it gives the user an idea of the tasks that
+	 * `manta-net.sh` will perform, along with some numbers to cross
+	 * reference against Triton's APIs after running `manta-net.sh` if they
+	 * choose.
+	 */
+	printf('    %-10s  %9s  %9s\n', 'AZ', 'NMETADATA', 'NSTORAGE');
+	for (az in counters) {
+		printf('%-14s  %9d  %9d\n', az,
+		    counters[az]['nMetadata'], counters[az]['nStorage']);
+	}
+	if (warnings.length > 0) {
+		printf('\n');
+		warnings.forEach(function (w) {
+			console.error('WARN: %s', w.message);
+		});
+		printf('\n');
+	}
+}
+
 /*
  * Given an object representing the final output content, format it and write it
  * to an appropriate output file.
@@ -1174,6 +1457,39 @@ function mgGenMantaFinish(mgopts, result, callback)
 	    });
 }
 
+function mgGenMantaNetFinish(mgopts, result, callback)
+{
+	var outfile;
+
+	mod_assertplus.object(mgopts, 'mgopts');
+	mod_assertplus.object(result, 'result');
+	mod_assertplus.string(result.this_az, 'result.this_az');
+	mod_assertplus.func(callback, 'callback');
+
+	result.manta_nodes.sort(function (s1, s2) {
+		return (s1.localeCompare(s2));
+	});
+	result.marlin_nodes.sort(function (s1, s2) {
+		return (s1.localeCompare(s2));
+	});
+	outfile = mgopts.mgo_region_name + '-' + result.this_az +
+	    '-networking.json';
+	mod_fs.writeFile(outfile, JSON.stringify(result), { 'flag': 'wx' },
+	    function onOutputWriteDone(err) {
+		if (err) {
+			if (err.code == 'EEXIST') {
+				err = new VError('file already exists');
+			}
+
+			callback(new VError(err, 'write "%s"', outfile));
+			return;
+		}
+
+		console.log('wrote %s', outfile);
+		callback();
+	});
+}
+
 function log_start()
 {
 	var str = mod_extsprintf.sprintf.apply(null, arguments);
diff --git a/docs/gen-manta-net.md b/docs/gen-manta-net.md
new file mode 100644
index 0000000..c443197
--- /dev/null
+++ b/docs/gen-manta-net.md
@@ -0,0 +1,92 @@
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2017, Joyent, Inc.
+-->
+
+# gen-manta-net
+
+This command can be used to generate configuration files suitable for use by
+`manta-net.sh`. It makes use of data from Device 42 and some local configuration
+options.
+
+## Usage
+
+`gen-manta-net` is used per-region and the CLI usage is as follows.
+
+    $ mgenazconfig gen-manta-net myregion
+
+This will produce one file in the current working directory for each AZ in the
+specified region and a summary of its findings. The output files are named `$region_name-$az_name-networking.json`. These configuration files can then be
+passed to `manta-net.sh` in the appropriate AZ in order to setup Manta's
+networking.
+
+The summary represents the number of Manta nodes that the tool has discovered
+via Device 42 that are suitable for Manta usage.
+
+* "NMETADATA" represents the total number of metadata servers. `manta-net.sh`
+will attempt to tag a NIC on this server for the "manta" network
+* "NSTORAGE" represents the total number of storage servers. `manta-net.sh`
+will attempt to tag 2 NICs on this server for the "manta" and "marlin" networks
+* The sum of "NMETADATA" and "NSTORAGE" gives the total number of Manta servers
+in the AZ, where `manta-net.sh` will create a GZ VNIC for each of these servers
+
+## Prerequisites
+
+Device 42 data is required (`mgenazconfig fetch-inventory`).
+
+## Configuration
+
+To make use of this command the following configuration additions must be made.
+
+* In the list of AZs for a region, a "networking" object must be added that
+  contains NAPI network and NIC mapping information for the "admin", "manta",
+  and "mantanat" network. For example:
+
+
+    ...
+    }, {
+        "name": "east1c",
+        ...
+        "networking": {
+            "admin": {
+                "network": {
+                    "name": "admin",
+                    "nic_tag": "admin",
+                    "subnet": "10.99.99.0/24",
+                    "gateway": "10.99.99.1",
+                    "provision_start_ip": "10.99.99.38",
+                    "provision_end_ip": "10.99.99.253",
+                    "vlan_id": 0
+                },
+                "nic_mapping": "aggr1"
+            },
+            "manta": {
+                "network": {
+                ...
+    ...
+
+The "nic_mapping" value is assumed to be an aggregation name unless the
+special value of `<mac>` is used. When `<mac>` is used, the resulting
+configuration file will contain placeholder values (`$server_uuid-MAC"`) that
+need to be replaced with the appropriate MAC address for that server's "manta"
+and "mantanat" network.
+
+The per-network "nic_mapping" value is also assumed to be the same value across
+all servers in the AZ. That is, if you require a subset of storage servers to
+have a different aggregation tagged for "manta" usage, the resulting
+configuration file must be edited to reflect this.
+
+## Future
+
+* This tool should also fetch current NIC tag and VNIC information from NAPI,
+  which in turn can be used to only generate a config file that contains servers
+  that haven't yet had their networking configured for Manta. This is useful
+  because `manta-net.sh` will work through each server in series in order to
+  determine whether they're properly tagged and have VNICs, and for a large
+  list of servers this can take a long time when ultimately most servers might
+  not require action.
diff --git a/lib/schema.js b/lib/schema.js
index 0c664d5..4307c9f 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -44,6 +44,32 @@ var mgSchemaConfig = {
     }
 };
 
+var mgSchemaTritonNetwork = {
+    'type': 'object',
+    'required': true,
+    'properties': {
+	'name':               { 'type': 'string',  'required': true },
+	'nic_tag':            { 'type': 'string',  'required': true },
+	'subnet':             { 'type': 'string',  'required': true },
+	'gateway':            { 'type': 'string',  'required': true },
+	'provision_start_ip': { 'type': 'string',  'required': true },
+	'provision_end_ip':   { 'type': 'string',  'required': true },
+	'vlan_id':            { 'type': 'integer', 'required': true }
+    }
+};
+
+var mgSchemaConfigNetwork = {
+    'type': 'object',
+    'required': true,
+    'properties': {
+	'network': mgSchemaTritonNetwork,
+	'nic_mapping': {
+	    'type': 'string',
+	    'required': true
+	}
+    }
+};
+
 /*
  * If JSON schema v3 supports specifying schemas for values inside an object
  * whose properties themselves are not known ahead of time, the author cannot
@@ -91,6 +117,14 @@ var mgSchemaConfigRegion = {
 			    'type': 'string',
 			    'minLength': 1
 			}
+		    },
+		    'networking': {
+			'type': 'object',
+			'properties': {
+			    'admin':  mgSchemaConfigNetwork,
+			    'manta':  mgSchemaConfigNetwork,
+			    'marlin': mgSchemaConfigNetwork
+			}
 		    }
 		}
 	    }
-- 
2.21.0

