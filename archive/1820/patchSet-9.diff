commit defd6e5eff67552934f0e8b8f46dd1cac4f42d02 (refs/changes/20/1820/9)
Author: Richard Bradley <richard.bradley@joyent.com>
Date:   2017-04-27T14:05:35+01:00 (2 years, 5 months ago)
    
    MANTA-3228 "mgenazconfig.js" should be able to create a Manta networking config file
    MANTA-3231 Missing sprintf arg in warning when server is missing from Triton data

diff --git a/README.md b/README.md
index 78a4db7..001c175 100644
--- a/README.md
+++ b/README.md
@@ -34,6 +34,16 @@ stages of configuration files.
       | `mgenazconfig fetch-inventory`    | `mgenazconfig fetch-triton`
       |                                   | (optional)
       + <---------------------------------+
+      |
+      | `mgenazconfig gen-manta-net`
+      |
+    configuration for server networking and required Manta
+    networks in a region
+      |
+      | `manta-net.sh` (in each AZ)
+      |
+      V
+    Manta-specific networking configured
       |
       | `mgenazconfig gen-manta`
       |
@@ -50,6 +60,10 @@ stages of configuration files.
       v
     Deployed Manta
 
+The configuration files from `mgenazconfig gen-manta` and
+`mgenazconfig gen-manta-net` can be generated in parallel, but the above is the
+general workflow when deploying Manta.
+
 This tool itself has a configuration file that describes:
 
 * how to reach the Device42 endpoint
@@ -58,6 +72,10 @@ This tool itself has a configuration file that describes:
 * for each AZ, the name of the "building" in the Device42 database, the list of
   rack names in the Device42 database that should be part of this Manta
   deployment, and an optional CNAPI endpoint for the AZ
+* optionally, for each AZ, a description of the intended networking
+  configuration (see the
+  [Additional `gen-manta-net` configuration](#additional-gen-manta-net-configuration)
+  section)
 
 Here's an example configuration file for a single, eight-shard, three-AZ Manta
 deployment using two racks' worth of servers per DC:
@@ -107,12 +125,19 @@ Now, fetch the inventory from Device42
 This downloads the inventory to a directory in the current working directory
 called `mgenazconfig_data`.  You can override this with the `-d` option.
 
-Now, generate a Manta configuration:
+Now, generate a Manta configuration suitable for use by `manta-adm genconfig`:
 
     $ mgenazconfig -c /path/to/config/file gen-manta myregion
 
 This will produce an output file in the current directory.
 
+To generate Manta networking configuration suitable for use by `manta-net.sh`,
+use the following:
+
+    $ mgenazconfig -c /path/to/config/file gen-manta-net myregion.
+
+This will produce an output file per AZ in the region.
+
 Once Triton has been set up, you can run additional cross-checks with data from
 CNAPI.  First, fetch the CNAPI inventory:
 
@@ -125,6 +150,50 @@ Now, regenerate the configuration with cross-checks:
     $ mgenazconfig -c /path/to/config/file gen-manta myregion
 
 
+## Additional `gen-manta-net` configuration
+
+This piece of configuration is optional to allow `gen-manta` to be used prior to
+networking information being known. To make use of the `gen-manta-net`
+subcommand the following configuration additions must be made.
+
+* In the list of AZs for a region, a "networking" object must be added that
+  contains NAPI network and NIC mapping information for the "admin", "manta",
+  and "mantanat" network. For example:
+
+      ...
+      }, {
+      "name": "east1c",
+          ...
+          "networking": {
+              "admin": {
+                  "network": {
+                      "name": "admin",
+                      "nic_tag": "admin",
+                      "subnet": "10.99.99.0/24",
+                      "gateway": "10.99.99.1",
+                      "provision_start_ip": "10.99.99.38",
+                      "provision_end_ip": "10.99.99.253",
+                      "vlan_id": 0
+                  },
+                  "nic_mapping": "aggr1"
+              },
+              "manta": {
+                  "network": {
+                  ...
+      ...
+
+The "nic_mapping" value is assumed to be an aggregation name unless the
+special value of `<mac>` is used. When `<mac>` is used, the resulting
+configuration file will contain placeholder values (`$server_uuid-MAC"`) that
+need to be replaced with the appropriate MAC address for that server's "manta"
+and "mantanat" network.
+
+The per-network "nic_mapping" value is also assumed to be the same value across
+all servers in the AZ. That is, if you require a subset of storage servers to
+have a different aggregation tagged for "manta" usage, the resulting
+configuration file must be edited to reflect this.
+
+
 ## Design notes
 
 This process should ideally work even before Triton is set up in the target
@@ -174,5 +243,9 @@ For the list of information that this tool needs to generate for use by
 `manta-adm genconfig --from-file`, see the [manta-adm manual
 page](https://github.com/joyent/sdc-manta/blob/master/docs/man/man1/manta-adm.md#genconfig-subcommand).
 
+For information on the networking configuration file used by `manta-net.sh`, see
+the [operator guide]
+(https://github.com/joyent/manta/blob/master/docs/operator-guide/index.md#networking-configuration).
+
 For information about the Device 42 API, see [the Device42 API
 reference](http://api.device42.com/).
diff --git a/bin/mgenazconfig.js b/bin/mgenazconfig.js
index 069fa61..92a3dc5 100755
--- a/bin/mgenazconfig.js
+++ b/bin/mgenazconfig.js
@@ -41,7 +41,8 @@ var mod_triton = require('../lib/triton');
 var mgCmds = {
     'fetch-inventory': mgCmdFetchInventory,
     'fetch-triton': mgCmdFetchTriton,
-    'gen-manta': mgCmdGenManta
+    'gen-manta': mgCmdGenManta,
+    'gen-manta-net': mgCmdGenMantaNet
 };
 
 /* getopt option string for global options */
@@ -64,6 +65,15 @@ var mgHardwareToServerType = {
     'Joyent-Storage-Platform-7001': 'storage'
 };
 
+/*
+ * Networks required as part of `manta-net.sh`'s configuration file.
+ */
+var mgNetworkNames = [
+    'admin',
+    'manta',
+    'marlin'
+];
+
 function main()
 {
 	var mgopts, args, parser, option, funcs;
@@ -90,7 +100,8 @@ function main()
 	    'synopses': [
 	        '[-c CONFIG_FILE] [-d DATA_DIR] fetch-inventory REGION',
 	        '[-c CONFIG_FILE] [-d DATA_DIR] fetch-triton REGION',
-	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta REGION'
+	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta REGION',
+	        '[-c CONFIG_FILE] [-d DATA_DIR] gen-manta-net REGION'
 	    ]
 	});
 
@@ -546,6 +557,44 @@ function mgCmdGenManta(mgopts, callback)
 	});
 }
 
+function mgCmdGenMantaNet(mgopts, callback)
+{
+	var funcs;
+
+	if (mgopts.mgo_cmdargs.length === 0) {
+		mod_cmdutil.usage('expected region name');
+	}
+
+	if (mgopts.mgo_cmdargs.length > 1) {
+		mod_cmdutil.usage('extra arguments');
+	}
+
+	if (!mgRegionArg(mgopts, callback)) {
+		return;
+	}
+
+	funcs = [];
+	funcs.push(function findLatestInventory(_, subcallback) {
+		mgopts.mgo_devices_by_az = {};
+		mgFindLatest({
+		    'mgopts': mgopts,
+		    'type': 'inventory',
+		    'process': mgParseInventory,
+		    'required': true
+		}, subcallback);
+	});
+
+	funcs.push(function genMantaNet(_, subcallback) {
+		mgGenMantaNet(mgopts, subcallback);
+	});
+
+	mod_vasync.pipeline({
+	    'funcs': funcs
+	}, function (err) {
+		callback(err);
+	});
+}
+
 function mgFindLatest(args, callback)
 {
 	var mgopts, type, processFunc, required;
@@ -934,6 +983,185 @@ function mgGenManta(mgopts, callback)
 	mgGenMantaFinish(mgopts, rv, callback);
 }
 
+function mgGenMantaNet(mgopts, callback)
+{
+	var rv, counters, azs, counters_az, config_az, racks;
+	var usedSerials, errors, warnings;
+
+	errors = [];
+	rv = [];
+	usedSerials = {};
+	counters = {};
+
+	azs = mgopts.mgo_config_region.azs.map(function (az) {
+		return (az.name);
+	});
+
+	/*
+	 * Here we check for the existence of the "networking" object in each
+	 * AZ's config. This is a hard failure in `gen-manta-net`, and the
+	 * reason it's not enforced in the schema is because we don't want to
+	 * have to define networking information if `gen-manta-net` isn't to be
+	 * used (e.g. the user only wants to make use of `gen-manta`).
+	 */
+	mgopts.mgo_config_region.azs.forEach(function (az) {
+		if (!az.hasOwnProperty('networking')) {
+			errors.push(new VError(
+			    '%s has no "networking" property', az.name));
+		}
+	});
+	if (errors.length > 0) {
+		setImmediate(callback, new VError.MultiError(errors));
+		return;
+	}
+
+	mgopts.mgo_config_region.azs.forEach(function (az) {
+		counters_az = {
+		    'nMetadata': 0,
+		    'nStorage': 0,
+		    'nMantaVnics': 0,
+		    'nUsedMac': 0,
+		    'nMissingUuid': 0
+		};
+
+		config_az = {};
+		config_az.this_az = az.name;
+		config_az.azs = azs;
+		config_az.manta_nodes = [];
+		config_az.marlin_nodes = [];
+		config_az.nic_mappings = {};
+
+		mgNetworkNames.forEach(function (n) {
+			mod_assertplus.ok(az.networking.hasOwnProperty(n),
+			    az.name + ' missing network definition: ' + n);
+
+			config_az[n] = {};
+			config_az[n]['network'] = az.networking[n].network.name;
+			config_az[n]['nic_tag'] =
+			    az.networking[n].network.nic_tag;
+
+			mgopts.mgo_config_region.azs.forEach(function (sub_az) {
+				mod_assertplus.ok(sub_az.networking.
+				    hasOwnProperty(n), az.name + ' missing ' +
+				    'network definition: ' + n);
+
+				var network = sub_az.networking[n]['network'];
+				var row = {};
+				row['subnet'] = network.subnet;
+				row['gateway'] = network.gateway;
+				if (n !== 'admin') {
+				    row['start'] = network.provision_start_ip;
+				    row['end'] = network.provision_end_ip;
+				    row['vlan_id'] = network.vlan_id;
+				}
+				config_az[n][sub_az.name] = row;
+			});
+		});
+
+		racks = az.d42racks;
+
+		mgopts.mgo_devices_by_az[az.name].forEach(function (device) {
+			var type, uuid;
+
+			if (device.d42d_uuid === null) {
+				uuid = device.d42d_serial;
+				counters_az['nMissingUuid']++;
+			} else {
+				uuid = device.d42d_uuid;
+			}
+
+			if (racks.indexOf(device.d42d_rack) < 0)
+				return;
+
+			if (device.d42d_hardware === null ||
+			    !mod_jsprim.hasKey(mgHardwareToServerType,
+			    device.d42d_hardware))
+				return;
+
+			type = mgHardwareToServerType[device.d42d_hardware];
+			if (type !== 'storage' && type !== 'metadata')
+				return;
+
+			if (type === 'storage') {
+				counters_az['nStorage']++;
+				config_az.marlin_nodes.push(uuid);
+			} else if (type === 'metadata') {
+				counters_az['nMetadata']++;
+			}
+
+			config_az.manta_nodes.push(uuid);
+			config_az.nic_mappings[uuid] =
+			    mgGenNicMapping(counters_az, az, uuid, type);
+			usedSerials[device.d42d_serial] = device;
+		});
+
+		rv.push(config_az);
+		counters[az.name] = counters_az;
+	});
+
+	warnings = mgGenMantaNetCrossCheck(mgopts, rv, usedSerials, counters);
+	mgGenMantaNetSummarize(mgopts, warnings, counters);
+
+	if (errors.length > 0) {
+		setImmediate(callback, new VError.MultiError(errors));
+		return;
+	}
+
+	mod_vasync.forEachParallel({
+	    'func': function netFinish(az, cb) {
+		mgGenMantaNetFinish(mgopts, az, cb);
+	    },
+	    'inputs': rv
+	}, callback);
+}
+
+/*
+ * Takes as input the Device 42 object for a device and the type of Manta
+ * server of this device and returns an object that is appropriate for use
+ * in the "nic_mappings" section in the networking config file.
+ */
+function mgGenNicMapping(counters, az, uuid, type)
+{
+	var networking;
+	var mapping = {};
+
+	mod_assertplus.object(az, 'az');
+	mod_assertplus.object(counters, 'counters');
+	mod_assertplus.number(counters.nUsedMac, 'counters.nUsedMac');
+	mod_assertplus.string(uuid, 'uuid');
+	mod_assertplus.ok(type === 'metadata' || type === 'storage');
+
+	networking = az.networking;
+
+	mgNetworkNames.forEach(function (n) {
+		/*
+		 * The "admin" network should already have a NIC tag, so
+		 * `manta-net.sh` doesn't attempt to tag it.
+		 */
+		if (n === 'admin')
+			return;
+		/*
+		 * Only storage nodes need to have a NIC tag for the marlin
+		 * network.
+		 */
+		if (type === 'metadata' && n === 'marlin')
+			return;
+
+		if (networking[n].nic_mapping === '<mac>') {
+			counters.nUsedMac++;
+			mapping[networking[n].network.nic_tag] = {
+			    'mac': uuid + '-MAC'
+			};
+		} else {
+			mapping[networking[n].network.nic_tag] = {
+			    'aggr': networking[n].nic_mapping
+			};
+		}
+	});
+
+	return (mapping);
+}
+
 /*
  * Run additional cross-checks using whatever data we have.  Returns an array of
  * warnings.
@@ -1047,7 +1275,7 @@ function mgGenMantaCrossCheck(mgopts, result, servers, counters)
 
 		if (!mod_jsprim.hasKey(allserversBySerial, serial)) {
 			warnings.push(new VError('server %s: not found in ' +
-			    'Triton data'));
+			    'Triton data', serial));
 			return;
 		}
 
@@ -1089,6 +1317,37 @@ function mgGenMantaCrossCheck(mgopts, result, servers, counters)
 	return (warnings);
 }
 
+function mgGenMantaNetCrossCheck(mgopts, result, servers, counters)
+{
+	var warnings, nUsedMac, nMissingUuid, az;
+
+	warnings = [];
+	nUsedMac = 0;
+	nMissingUuid = 0;
+
+	for (az in counters) {
+		nUsedMac += counters[az]['nUsedMac'];
+		nMissingUuid += counters[az]['nMissingUuid'];
+	}
+	if (nUsedMac > 0) {
+		warnings.push(new VError('Some servers have been configured ' +
+		    'to use a MAC address for either their "manta" or ' +
+		    '"marlin" network. These are represented in nic_mappings ' +
+		    'as { "mac": "$server_uuid-MAC" } which will need to be ' +
+		    'replaced with their real MAC address.'));
+	}
+	if (nMissingUuid > 0) {
+		warnings.push(new VError('Some servers are missing a ' +
+		    '"uuid" property.  Serial numbers have been used in the ' +
+		    'output file instead of uuids.  The resulting output ' +
+		    'file cannot be directly used for deployment, but it ' +
+		    'can be used to verify the planned network ' +
+		    'modifications.'));
+	}
+
+	return (warnings);
+}
+
 /*
  * Print out a summary of the generated config.
  */
@@ -1123,6 +1382,31 @@ function mgGenMantaSummarize(mgopts, warnings, counters)
 	}
 }
 
+function mgGenMantaNetSummarize(mgopts, warnings, counters)
+{
+	var az;
+	/*
+	 * Some of these counters will use the same information, but it's
+	 * still useful to have these seemingly-duplicated counts across
+	 * different messages as it gives the user an idea of the tasks that
+	 * `manta-net.sh` will perform, along with some numbers to cross
+	 * reference against Triton's APIs after running `manta-net.sh` if they
+	 * choose.
+	 */
+	printf('    %-10s  %9s  %9s\n', 'AZ', 'NMETADATA', 'NSTORAGE');
+	for (az in counters) {
+		printf('%-14s  %9d  %9d\n', az,
+		    counters[az]['nMetadata'], counters[az]['nStorage']);
+	}
+	if (warnings.length > 0) {
+		printf('\n');
+		warnings.forEach(function (w) {
+			console.error('WARN: %s', w.message);
+		});
+		printf('\n');
+	}
+}
+
 /*
  * Given an object representing the final output content, format it and write it
  * to an appropriate output file.
@@ -1174,6 +1458,39 @@ function mgGenMantaFinish(mgopts, result, callback)
 	    });
 }
 
+function mgGenMantaNetFinish(mgopts, result, callback)
+{
+	var outfile;
+
+	mod_assertplus.object(mgopts, 'mgopts');
+	mod_assertplus.object(result, 'result');
+	mod_assertplus.string(result.this_az, 'result.this_az');
+	mod_assertplus.func(callback, 'callback');
+
+	result.manta_nodes.sort(function (s1, s2) {
+		return (s1.localeCompare(s2));
+	});
+	result.marlin_nodes.sort(function (s1, s2) {
+		return (s1.localeCompare(s2));
+	});
+	outfile = mgopts.mgo_region_name + '-' + result.this_az +
+	    '-networking.json';
+	mod_fs.writeFile(outfile, JSON.stringify(result), { 'flag': 'wx' },
+	    function onOutputWriteDone(err) {
+		if (err) {
+			if (err.code == 'EEXIST') {
+				err = new VError('file already exists');
+			}
+
+			callback(new VError(err, 'write "%s"', outfile));
+			return;
+		}
+
+		console.log('wrote %s', outfile);
+		callback();
+	});
+}
+
 function log_start()
 {
 	var str = mod_extsprintf.sprintf.apply(null, arguments);
diff --git a/lib/schema.js b/lib/schema.js
index 0c664d5..4307c9f 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -44,6 +44,32 @@ var mgSchemaConfig = {
     }
 };
 
+var mgSchemaTritonNetwork = {
+    'type': 'object',
+    'required': true,
+    'properties': {
+	'name':               { 'type': 'string',  'required': true },
+	'nic_tag':            { 'type': 'string',  'required': true },
+	'subnet':             { 'type': 'string',  'required': true },
+	'gateway':            { 'type': 'string',  'required': true },
+	'provision_start_ip': { 'type': 'string',  'required': true },
+	'provision_end_ip':   { 'type': 'string',  'required': true },
+	'vlan_id':            { 'type': 'integer', 'required': true }
+    }
+};
+
+var mgSchemaConfigNetwork = {
+    'type': 'object',
+    'required': true,
+    'properties': {
+	'network': mgSchemaTritonNetwork,
+	'nic_mapping': {
+	    'type': 'string',
+	    'required': true
+	}
+    }
+};
+
 /*
  * If JSON schema v3 supports specifying schemas for values inside an object
  * whose properties themselves are not known ahead of time, the author cannot
@@ -91,6 +117,14 @@ var mgSchemaConfigRegion = {
 			    'type': 'string',
 			    'minLength': 1
 			}
+		    },
+		    'networking': {
+			'type': 'object',
+			'properties': {
+			    'admin':  mgSchemaConfigNetwork,
+			    'manta':  mgSchemaConfigNetwork,
+			    'marlin': mgSchemaConfigNetwork
+			}
 		    }
 		}
 	    }
