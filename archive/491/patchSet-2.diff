commit 9e7bdd9447a0840119329b64bc76607e09d50f2b (refs/changes/91/491/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-09-16T21:24:11+00:00 (3 years, 1 month ago)
    
    Revert "PUBAPI-1322 - GetImage should be able to retrieve disabled images."
    
    This reverts commit 4a415bf0d8f645194694a29149fcecc590dc51b2.

diff --git a/lib/datasets.js b/lib/datasets.js
index 757d166..1a0520c 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -202,25 +202,18 @@ function translate(req, dataset) {
 
 
 function loadImage(req, cb) {
-    var datasetUuid = req.params.dataset || req.params.image;
+    var pathname = req.getUrl().pathname;
     var accountUuid = req.account.uuid;
+    var datasetUuid = req.params.dataset || req.params.image;
     var opts = { headers: { 'x-request-id': req.getId() } };
 
-    // We don't pass the account UUID here, since we might be loading a
-    // now-disabled image, and imgapi won't let us load a disabled
-    // image if we provide an account UUID; we need to check that next.
-    req.sdc.imgapi.getImage(datasetUuid, opts, function (err, img) {
-        if (err) {
-            return cb(err);
-        }
-
-        // Users should not see non-public images that don't belong to them
-        if (!img.public && img.owner !== accountUuid) {
-            return cb(new ResourceNotFoundError('image not found'));
-        }
-
-        return cb(null, img);
-    });
+    if (/\/machines/.test(pathname) && req.method === 'GET') {
+        // We don't pass 'account' here, since we might be loading a
+        // now-disabled image which was previously used for a machine:
+        return req.sdc.imgapi.getImage(datasetUuid, opts, cb);
+    } else {
+        return req.sdc.imgapi.getImage(datasetUuid, accountUuid, opts, cb);
+    }
 }
 
 
@@ -324,11 +317,9 @@ function getImage(req, res, next) {
     loadImage(req, function (err, img) {
         if (err) {
             return next(err);
-        }
-
-        // Users should not be able to see their destroyed images
-        if (img.state === 'destroyed') {
-            return next(new ResourceNotFoundError('image not found'));
+        } else if (img.state === 'destroyed') {
+            // Users should not see their destroyed images
+            return next(new ResourceNotFoundError('%s not found', img.uuid));
         }
 
         req.dataset = img;
diff --git a/test/images.test.js b/test/images.test.js
index 8e5cb92..680ad96 100644
--- a/test/images.test.js
+++ b/test/images.test.js
@@ -217,27 +217,6 @@ test('GetImage should not return non-permission images', function (t) {
 });
 
 
-test('GetImage returns disabled images', function (t) {
-    CLIENT.imgapi.disableImage(IMAGE.id, function (err) {
-        t.ifError(err);
-
-        CLIENT.get('/my/images/' + IMAGE.id, function (err2, req, res, body) {
-            t.ifError(err2);
-
-            t.equal(res.statusCode, 200, 'GET /my/images/:uuid status');
-            common.checkHeaders(t, res.headers);
-            t.ok(body, 'GET /my/images/:uuid body');
-            checkImage(t, body);
-
-            CLIENT.imgapi.enableImage(IMAGE.id, function (err3) {
-                t.ifError(err3);
-                t.end();
-            });
-        });
-    });
-});
-
-
 test('GetImage 404', function (t) {
     CLIENT.get('/my/images/' + common.uuid(), function (err) {
         t.ok(err, 'GET /my/images/ error');
