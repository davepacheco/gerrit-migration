commit ac0fb53fb729e6107cd5920c1623c738965aab70 (refs/changes/56/3256/6)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-01-29T11:51:22-08:00 (1 year, 8 months ago)
    
    TRITON-61 cn-agent should have the ability to run different tasks on non-SmartOS platforms
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Orlando Vazquez <orlando@joyent.com>

diff --git a/.gitignore b/.gitignore
index ed22100..654742a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 /node_modules
 /tmp
+/log
 /*.tar.gz
 build
 describe
diff --git a/bin/cn-agent.js b/bin/cn-agent.js
index a2bb12f..5644f90 100755
--- a/bin/cn-agent.js
+++ b/bin/cn-agent.js
@@ -5,17 +5,14 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var bunyan = require('bunyan');
-var exec = require('child_process').exec;
-var fs = require('fs');
-var once = require('once');
 var os = require('os');
 var path = require('path');
-var tty = require('tty');
-var util = require('util');
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
 var vasync = require('vasync');
 var verror = require('verror');
 
@@ -23,88 +20,144 @@ var AgentHttpServer = require('../lib/server');
 var App = require('../lib/app');
 var TaskAgent = require('../lib/task_agent/task_agent');
 var dispatch = require('../lib/task_agent/dispatch');
-var sdcconfig = require('../lib/smartdc-config');
 
 var createHttpTaskDispatchFn = dispatch.createHttpTaskDispatchFn;
 var createTaskDispatchFn = dispatch.createTaskDispatchFn;
 
+var BACKEND_DIR = '../lib/backends';
+var LOGNAME = 'cn-agent';
+
+
 main();
 
-function main() {
-    var logname = 'cn-agent';
+function loadBackend(opts) {
+    var Backend;
+    var backendName = os.platform();
+
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+
+    if (process.env.CN_AGENT_BACKEND) {
+        // allow overriding the backend (useful for testing)
+        backendName = process.env.CN_AGENT_BACKEND;
+    } else if (backendName === 'sunos') {
+        backendName = 'smartos';
+    }
+
+    // This will throw if backend doesn't exist
+    Backend = require(path.join(BACKEND_DIR, backendName));
+
+    // Backends should set self.name = opts.backendName.
+    opts.backendName = backendName;
+
+    return (new Backend(opts));
+}
 
-    var log = bunyan.createLogger({ name: logname });
+function main() {
+    var log;
     var sysinfo;
     var sdc_config;
 
-
-    // The plan is to migrate to using this file as the entire configuration
-    // needed for the cn-agent. For now we rely on the presence of this file
-    // to detect if we are intending to run the agent, which is why no_rabbit
-    // is false by default
-    var agentConfigPath = '/opt/smartdc/agents/etc/cn-agent.config.json';
     var agentConfig;
+    var backend;
 
-    try {
-        agentConfig = JSON.parse(fs.readFileSync(agentConfigPath, 'utf-8'));
-    } catch (e) {
-        log.error(e, 'Could not parse agent config: "%s", '
-            + 'setting no_rabbit flag to false', e.message);
-        agentConfig = { no_rabbit: false };
-    }
-
-    if (!agentConfig.no_rabbit) {
-        log.warn('"no_rabbit" flag is not true, cn-agent will now sleep');
-        // http://nodejs.org/docs/latest/api/all.html#all_settimeout_cb_ms
-        // ...The timeout must be in the range of 1-2,147,483,647 inclusive...
-        setInterval(function () {}, 2000000000);
-    }
+    log = bunyan.createLogger({
+        level: process.env.CN_AGENT_LOG_LEVEL,
+        name: LOGNAME
+    });
 
+    backend = loadBackend({
+        log: log
+    });
 
-    vasync.waterfall([
-        function (next) {
-            sdcconfig.sysinfo(function (err, sysinfoObj) {
-                if (err) {
-                    next(new verror.VError(err, 'fetching sysinfo'));
+    assert.object(backend, 'backend');
+    assert.string(backend.name, 'backend.name');
+
+    log.info('cn-agent starting with backend "' + backend.name + '"');
+
+    vasync.pipeline({
+        funcs: [
+            function getAgentConfig(_, cb) {
+                backend.getAgentConfig(function onAgentConfig(err, config) {
+                    if (err) {
+                        cb(new verror.VError(err, 'fetching agent config'));
+                        return;
+                    }
+                    agentConfig = config;
+                    cb();
+                });
+            }, function ensureNoRabbit(_, cb) {
+                if (agentConfig.no_rabbit) {
+                    cb();
                     return;
                 }
 
-                sysinfo = sysinfoObj;
-                next();
-            });
-        },
-        function (next) {
-            sdcconfig.sdcConfig(function (error, configObj) {
-                if (error) {
-                    next(new verror.VError(error, 'fetching SDC config'));
-                    return;
-                }
-                sdc_config = configObj;
-                next();
-            });
+                log.warn('"no_rabbit" flag is not true, ' +
+                    'cn-agent will now sleep');
+                /* JSSTYLED */
+                // http://nodejs.org/docs/latest/api/all.html#all_settimeout_cb_ms
+                // ...The timeout must be in the range of 1-2,147,483,647
+                // inclusive...
+                setInterval(function () {}, 2000000000);
+
+                // Important: in this case we're *not* calling cb() because we
+                // want to hang forever. It's what rabbit holdouts deserve.
+
+            }, function getSysinfo(_, cb) {
+                backend.getSysinfo(function onSysinfo(err, sysinfoObj) {
+                    if (err) {
+                        cb(new verror.VError(err, 'fetching sysinfo'));
+                        return;
+                    }
+                    sysinfo = sysinfoObj;
+                    cb();
+                });
+            }, function getSdcConfig(_, cb) {
+                backend.getSdcConfig(function onSdcConfig(err, config) {
+                    if (err) {
+                        cb(new verror.VError(err, 'fetching SDC config'));
+                        return;
+                    }
+                    sdc_config = config;
+                    cb();
+                });
+            }
+        ]
+    }, function onPipelineComplete(err) {
+        var agentServer;
+        var app;
+        var ip;
+        var options;
+
+        if (err) {
+            throw err;
         }
-    ],
-    function (e) {
-        var ip = firstAdminIp(sysinfo);
 
-        var agentServer = new AgentHttpServer({
+        ip = firstAdminIp(sysinfo);
+
+        agentServer = new AgentHttpServer({
             bindip: ip,
             log: log,
             uuid: sysinfo.UUID
         });
         agentServer.start();
 
-        var options = {
-            uuid: sysinfo.UUID,
-            log: log,
-            tasklogdir: '/var/log/' + logname + '/logs',
-            logname: logname,
-            taskspath: path.join(__dirname, '..', 'lib/tasks'),
+        options = {
             agentserver: agentServer,
-            sdc_config: sdc_config
+            backend: backend,
+            config: agentConfig,
+            log: log,
+            logname: LOGNAME,
+            sdc_config: sdc_config,
+            sysinfo: sysinfo,
+            tasklogdir: agentConfig.tasklogdir ||
+                '/var/log/' + LOGNAME + '/logs',
+            taskspath: path.join(__dirname, '..',
+                'lib/backends', backend.name, 'tasks'),
+            uuid: sysinfo.UUID
         };
 
-        var app = new App(options);
+        app = new App(options);
 
         // EXPERIMENTAL
         if (agentConfig.fluentd_host) {
@@ -117,19 +170,23 @@ function main() {
 
 
 function firstAdminIp(sysinfo) {
+    var iface;
     var interfaces;
+    var ip;
+    var isAdmin;
+    var nic;
 
     interfaces = sysinfo['Network Interfaces'];
 
-    for (var iface in interfaces) {
+    for (iface in interfaces) {
         if (!interfaces.hasOwnProperty(iface)) {
             continue;
         }
 
-        var nic = interfaces[iface]['NIC Names'];
-        var isAdmin = nic.indexOf('admin') !== -1;
+        nic = interfaces[iface]['NIC Names'];
+        isAdmin = nic.indexOf('admin') !== -1;
         if (isAdmin) {
-            var ip = interfaces[iface].ip4addr;
+            ip = interfaces[iface].ip4addr;
             return ip;
         }
     }
diff --git a/lib/app.js b/lib/app.js
index a5a1069..fe60454 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,168 +5,54 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var async = require('async');
 var dns = require('dns');
 var exec = require('child_process').exec;
 var fs = require('fs');
+var os = require('os');
+
+var assert = require('assert-plus');
+var async = require('async');
 var restify = require('restify');
+var vasync = require('vasync');
 var verror = require('verror');
-var assert = require('assert-plus');
-var StatusReporter = require('./heartbeater');
 
+var StatusReporter = require('./heartbeater');
 
 var createHttpTaskDispatchFn
     = require('./task_agent/dispatch').createHttpTaskDispatchFn;
-var sdcconfig = require('./smartdc-config');
 var TaskAgent = require('./task_agent/task_agent');
 
 var DEFAULT_TASK_TIMEOUT_SECONDS = 60 * 60;
 
-var queueDefns = [
-    {
-        name: 'machine_creation',
-        tasks: [ 'machine_create', 'machine_reprovision' ]
-    },
-    {
-        name: 'image_import_tasks',
-        tasks: [ 'image_ensure_present' ]
-    },
-    {
-        name: 'server_tasks',
-        tasks: [
-            'server_overprovision_ratio'
-        ]
-    },
-    {
-        name: 'docker_tasks',
-        tasks: [
-            'docker_exec',
-            'docker_copy',
-            'docker_stats'
-        ]
-    },
-    {
-        name: 'docker_build_task',
-
-        /**
-         * `docker build` payloads, particularly those with a large range
-         * of exposed ports, tend to be HUGE and negatively impact the
-         * service when logged.
-         */
-        log_params: false,
-        tasks: [
-            'docker_build'
-        ]
-    },
-    {
-        name: 'server_nic_tasks',
-        tasks: [
-            'server_update_nics'
-        ]
-    },
-    {
-        name: 'agents_tasks',
-        maxConcurrent: 1,
-        tasks: [
-            'agent_install',
-            'shutdown_cn_agent_update',
-            'refresh_agents'
-        ]
-    },
-    {
-        name: 'machine_tasks',
-        tasks: [
-            'machine_boot',
-            'machine_destroy',
-            'machine_kill',
-            'machine_proc',
-            'machine_reboot',
-            'machine_shutdown',
-            'machine_update',
-            'machine_update_nics',
-            'machine_screenshot',
-            'machine_create_snapshot',
-            'machine_rollback_snapshot',
-            'machine_delete_snapshot'
-        ]
-    },
-    {
-        name: 'machine_images',
-        tasks: [
-            'machine_create_image'
-        ]
-    },
-    {
-        name: 'image_query',
-        logging: false,
-        tasks: [
-            'image_get'
-        ]
-    },
-    {
-        name: 'machine_query',
-        logging: false,
-        tasks: [
-            'machine_load',
-            'machine_info'
-        ]
-    },
-    {
-        name: 'zfs_tasks',
-        tasks: [
-            'zfs_create_dataset',
-            'zfs_destroy_dataset',
-            'zfs_rename_dataset',
-            'zfs_snapshot_dataset',
-            'zfs_rollback_dataset',
-            'zfs_clone_dataset',
-            'zfs_set_properties'
-        ]
-    },
-    {
-        name: 'zfs_query',
-        tasks: [
-            'zfs_get_properties',
-            'zfs_list_datasets',
-            'zfs_list_snapshots',
-            'zfs_list_pools'
-        ]
-    },
-    {
-        name: 'test_sleep',
-        tasks: [ 'sleep' ]
-    },
-    {
-        name: 'nop',
-        tasks: [ 'nop' ]
-    },
-    {
-        name: 'test_subtask',
-        tasks: [ 'test_subtask' ]
-    }
-];
 
 function App(options) {
     assert.object(options, 'options');
-    assert.object(options.log, 'options.log');
-    assert.string(options.uuid, 'options.uuid');
-    assert.string(options.tasklogdir, 'options.tasklogdir');
     assert.object(options.agentserver, 'options.agentserver');
+    assert.object(options.backend, 'options.backend');
+    assert.object(options.config, 'options.config');
     assert.optionalObject(options.env, 'options.env');
+    assert.object(options.log, 'options.log');
     assert.object(options.sdc_config, 'options.sdc_config');
+    assert.object(options.sysinfo, 'options.sysinfo');
+    assert.string(options.tasklogdir, 'options.tasklogdir');
+    assert.uuid(options.uuid, 'options.uuid');
 
     this.options = options;
     if (!options.env) {
         options.env = {};
     }
 
+    this.agentserver = options.agentserver;
+    this.backend = options.backend;
+    this.config = options.config;
+    this.log = options.log.child();
     this.sdc_config = options.sdc_config;
+    this.sysinfo = options.sysinfo;
     this.uuid = options.uuid;
-    this.log = options.log.child();
-    this.agentserver = options.agentserver;
+
     this.log.info('started cn-agent for %s', this.uuid);
 }
 
@@ -190,6 +76,12 @@ function shuffleArray(array) {
 App.prototype.retrieveCnapiAddresses = function (callback) {
     var self = this;
 
+    // Allow overriding the IPs to use for CNAPI via the config
+    if (self.config.cnapi_ips) {
+        callback(null, self.config.cnapi_ips);
+        return;
+    }
+
     assert.string(self.sdc_config.dns_domain, 'options.sdc_config.dns_domain');
     assert.string(self.sdc_config.datacenter_name,
         'options.sdc_config.datacenter_name');
@@ -261,22 +153,32 @@ App.prototype.ensureCnapiLookedUp = function (callback) {
 
 App.prototype.updateAgents = function (callback) {
     var self = this;
+
+    if (self.config.skip_agents_update) {
+        self.log.warn('skip_agents_update set, skipping agents update');
+        callback();
+        return;
+    }
+
     // We assume nobody will use this before initializing heartbeater,
     // otherwise we should complain:
     if (!self.client) {
-        return callback(new verror.VError('CNAPI client not initialized'));
+        callback(new verror.VError('CNAPI client not initialized'));
+        return;
     }
     // And the same for sysinfo:
     if (!self.sysinfo) {
-        return callback(new verror.VError('sysinfo not initialized'));
+        callback(new verror.VError('sysinfo not initialized'));
+        return;
     }
     var agents = self.sysinfo['SDC Agents'];
     var agents_dir = '/opt/smartdc/agents/lib/node_modules';
-    return fs.readdir(agents_dir, function (err, files) {
+    fs.readdir(agents_dir, function (err, files) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
-        return async.each(files, function getImageAndUUID(name, cb) {
+        async.each(files, function getImageAndUUID(name, cb) {
             var uuid_path = '/opt/smartdc/agents/etc/' + name;
             var uuidFileExists;
             var uuid;
@@ -288,10 +190,11 @@ App.prototype.updateAgents = function (callback) {
                         encoding: 'utf8'
                     }, function (er2, img_uuid) {
                         if (er2) {
-                            return next(er2);
+                            next(er2);
+                            return;
                         }
                         image_uuid = img_uuid.trim();
-                        return next();
+                        next();
                     });
                 },
                 function agentUuidFileExists(next) {
@@ -304,21 +207,24 @@ App.prototype.updateAgents = function (callback) {
                 },
                 function getUUID(next) {
                     if (!uuidFileExists) {
-                        return next();
+                        next();
+                        return;
                     }
-                    return fs.readFile(uuid_path, {
+                    fs.readFile(uuid_path, {
                         encoding: 'utf8'
                     }, function (er2, agent_uuid) {
                         if (er2) {
-                            return next(er2);
+                            next(er2);
+                            return;
                         }
                         uuid = agent_uuid.trim();
-                        return next();
+                        next();
                     });
                 }
             ], function seriesCb(er2, results) {
                 if (er2) {
-                    return cb(er2);
+                    cb(er2);
+                    return;
                 }
                 agents.forEach(function (a) {
                     if (a.name === name) {
@@ -328,15 +234,15 @@ App.prototype.updateAgents = function (callback) {
                         }
                     }
                 });
-                return cb();
+                cb();
             });
         }, function (er3) {
             if (er3) {
-                return callback(new verror.VError(
-                            'Cannot get agents image versions'));
+                callback(new verror.VError('Cannot get agents image versions'));
+                return;
             }
             self.log.info({agents: agents}, 'Posting agents');
-            return self.client.post('/servers/' + self.uuid, {
+            self.client.post('/servers/' + self.uuid, {
                 agents: agents
             }, function (er4) {
                 if (er4) {
@@ -344,7 +250,8 @@ App.prototype.updateAgents = function (callback) {
                 } else {
                     self.log.info('posted agents info to cnapi');
                 }
-                return callback();
+                callback();
+                return;
             });
         });
     });
@@ -353,7 +260,7 @@ App.prototype.updateAgents = function (callback) {
 
 App.prototype.startHeartbeater = function () {
     var self = this;
-    var statusReporter = new StatusReporter({ log: self.log });
+    var statusReporter;
     var cnapiAddr = self.cnapiAddr;
 
     var url = 'http://' + cnapiAddr;
@@ -364,6 +271,11 @@ App.prototype.startHeartbeater = function () {
         requestTimeout: 5000
     };
 
+    statusReporter = new StatusReporter({
+        backend: self.backend,
+        log: self.log
+    });
+
     self.log.info('cnapi ip was %s', cnapiAddr);
     self.client = restify.createJsonClient(restifyOptions);
     var statusurlpath = '/servers/' + self.uuid + '/events/status';
@@ -388,9 +300,7 @@ App.prototype.startHeartbeater = function () {
                 return;
             }
             self.log.debug('posted status to cnapi');
-
         });
-
     });
 
     self.updateAgents(function (err) {
@@ -407,73 +317,58 @@ App.prototype.startHeartbeater = function () {
 App.prototype.start = function () {
     var self = this;
 
-    var taskspath = self.options.taskspath;
-    var tasklogdir = self.options.tasklogdir;
-    var uuid = self.options.uuid;
-    var logname = self.options.logname;
+    var agent;
     var agentserver = self.options.agentserver;
+    var logname = self.options.logname;
+    var tasklogdir = self.options.tasklogdir;
+    var taskspath = self.options.taskspath;
+    var queueDefns;
+    var uuid = self.uuid;
 
-    var agent = new TaskAgent({
-        tasklogdir: tasklogdir,
-        taskspath: taskspath,
-        uuid: uuid,
-        log: self.log,
-        logname: logname,
+    queueDefns = self.backend.queueDefns;
+    assert.object(queueDefns, 'queueDefns');
+
+    agent = new TaskAgent({
         agentserver: agentserver,
+        backend: self.backend,
         env: self.options.env,
-        timeoutSeconds: DEFAULT_TASK_TIMEOUT_SECONDS
+        log: self.log,
+        logname: logname,
+        tasklogdir: tasklogdir,
+        taskspath: taskspath,
+        timeoutSeconds: DEFAULT_TASK_TIMEOUT_SECONDS,
+        uuid: uuid
     });
 
     for (var i = 0; i < queueDefns.length; i++) {
         queueDefns[i].onhttpmsg = createHttpTaskDispatchFn(agent, taskspath);
     }
 
-    async.waterfall([
-        function (cb) {
-            sdcconfig.sdcConfig(function (error, config) {
-                if (error) {
-                    cb(new verror.VError(
-                        error, 'looking up sdc config'));
-                    return;
-                }
-                self.sdcconfig = config;
+    vasync.pipeline({
+        funcs: [
+            function _ensureCnapiLookedUp(_, cb) {
+                self.ensureCnapiLookedUp(cb);
+            }, function _startHeartbeater(_, cb) {
+                self.startHeartbeater();
                 cb();
-            });
-        },
-        function (cb) {
-            sdcconfig.sysinfo(function (error, sysinfo) {
-                if (error) {
-                    cb(new verror.VError(
-                        error, 'looking up sysinfo'));
+            }, function _cleanupStaleLocks(_, cb) {
+                if (self.backend.cleanupStaleLocks === undefined) {
+                    cb();
                     return;
                 }
-                self.sysinfo = sysinfo;
-                cb();
-            });
-        },
-        function (cb) {
-            self.ensureCnapiLookedUp(function (error) {
-                if (error) {
-                    cb(error);
-                }
-                cb();
-            });
-        }],
-        function (error) {
-            if (!self.uuid) {
-                self.uuid = self.sysinfo.UUID;
+
+                self.backend.cleanupStaleLocks(cb);
             }
-            self.startHeartbeater();
-
-            // AGENT-640: Ensure we clean up any stale machine creation guard
-            // files, then set queues up as per usual.
-            var cmd = '/usr/bin/rm -f /var/tmp/machine-creation-*';
-            exec(cmd, function (execerror, stdout, stderr) {
-                agent.useQueues(queueDefns);
-                self.log.info('starting cn-agent for %s', self.uuid);
-                agent.start();
-            });
-        });
+        ]
+    }, function onPipelineComplete(err) {
+        if (err) {
+            throw err;
+        }
+
+        agent.useQueues(queueDefns);
+        self.log.info('starting cn-agent for %s', self.uuid);
+        agent.start();
+    });
 };
 
 
diff --git a/bin/chroot-gtar b/lib/backends/smartos/bin/chroot-gtar
similarity index 100%
rename from bin/chroot-gtar
rename to lib/backends/smartos/bin/chroot-gtar
diff --git a/bin/docker-build.js b/lib/backends/smartos/bin/docker-build.js
similarity index 99%
rename from bin/docker-build.js
rename to lib/backends/smartos/bin/docker-build.js
index 089e589..6b486e9 100644
--- a/bin/docker-build.js
+++ b/lib/backends/smartos/bin/docker-build.js
@@ -35,7 +35,7 @@ var sprintf = require('sprintf').sprintf;
 var zfs = require('zfs').zfs;
 
 var LineStream = require('lstream');
-var smartDcConfig = require('../lib/smartdc-config');
+var smartDcConfig = require('../smartdc-config');
 
 
 var SERVER_CLOSE_TIMEOUT = 60 * 1000; // 1 minute
@@ -45,7 +45,7 @@ var gImgapiClient = null;  // IMGAPI client.
 var gScratchImageUuid = null;  // Scratch image uuid in IMGAPI.
 var gSnapshotId = 0;  // Snapshot id counter.
 var gSnapshots = [];  // Snapshots created during the build.
-var gSnapshotTarExe = path.join(__dirname, '../lib/zfs_snapshot_tar');
+var gSnapshotTarExe = path.join(__dirname, '../../../zfs_snapshot_tar');
 
 
 /*
diff --git a/bin/docker-copy.js b/lib/backends/smartos/bin/docker-copy.js
similarity index 96%
rename from bin/docker-copy.js
rename to lib/backends/smartos/bin/docker-copy.js
index 4d9f0af..f1fc95c 100644
--- a/bin/docker-copy.js
+++ b/lib/backends/smartos/bin/docker-copy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var net = require('net');
diff --git a/bin/docker-exec.js b/lib/backends/smartos/bin/docker-exec.js
similarity index 95%
rename from bin/docker-exec.js
rename to lib/backends/smartos/bin/docker-exec.js
index e7ede27..73f8f39 100644
--- a/bin/docker-exec.js
+++ b/lib/backends/smartos/bin/docker-exec.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var net = require('net');
diff --git a/bin/docker-stats.js b/lib/backends/smartos/bin/docker-stats.js
similarity index 99%
rename from bin/docker-stats.js
rename to lib/backends/smartos/bin/docker-stats.js
index cf3f1de..674feb1 100644
--- a/bin/docker-stats.js
+++ b/lib/backends/smartos/bin/docker-stats.js
@@ -126,7 +126,7 @@
 var net = require('net');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
-var smartDcConfig = require('../lib/smartdc-config');
+var smartDcConfig = require('../smartdc-config');
 var kstat = require('kstat');
 var sprintf = require('sprintf').sprintf;
 
diff --git a/lib/common.js b/lib/backends/smartos/common.js
similarity index 50%
rename from lib/common.js
rename to lib/backends/smartos/common.js
index c70306c..04ad398 100644
--- a/lib/common.js
+++ b/lib/backends/smartos/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -14,31 +14,11 @@
  *
  */
 
-var fs = require('fs');
 var execFile = require('child_process').execFile;
-var EffluentLogger = require('effluent-logger');
-var async = require('async');
-var Zone = require('tracker/lib/zone');
-
-/**
- *
- * Returns a copy of an object withs keys upper-cased.
- *
- * @param obj {Object}
- *   Covert the keys of `obj` to uppercase and return new object.
- *
- */
+var fs = require('fs');
 
-function keysToUpper(obj) {
-    var upperObj = {};
-    var keys = Object.keys(obj);
-    var i = keys.length;
-    while (i--) {
-        upperObj[keys[i].toUpperCase().replace(/[^A-Za-z0-9_]/, '_')]
-        = obj[keys[i]];
-    }
-    return upperObj;
-}
+var async = require('async');
+var EffluentLogger = require('effluent-logger');
 
 var FIELDS = 'zoneid:zonename:state:zonepath:uuid:brand:ip-type'.split(':');
 
@@ -106,132 +86,6 @@ function modifyConfig(configPath, key, value, callback) {
     });
 }
 
-function zoneadm(zone, addtlArgs, callback) {
-    var args = ['-z', zone];
-    args.push.apply(args, addtlArgs);
-    execFile('/usr/sbin/zoneadm', args, { encoding: 'utf8' },
-        function (error, stderr, stdout) {
-            if (error) {
-                callback(
-                    new Error(
-                        'Error running zoneadm '
-                        + addtlArgs.join(' ')
-                        + ' on zone: '
-                        + stderr.trim()));
-                return;
-            }
-            callback();
-            return;
-        });
-}
-
-function zonecfg(zone, addtlArgs, callback) {
-    var args = ['-z', zone];
-    args.push.apply(args, addtlArgs);
-    execFile('/usr/sbin/zonecfg', args, { encoding: 'utf8' },
-        function (error, stderr, stdout) {
-            if (error) {
-                return callback(
-                    new Error(
-                        'Error running zonecfg ' + addtlArgs.join(' ')
-                        + ' on zone: ' + stderr.trim()));
-            }
-            return callback();
-        });
-}
-
-function halt(zone, callback) {
-    zoneadm(zone, ['halt', '-X'], callback);
-}
-
-function disableAutoboot(zone, callback) {
-    zonecfg(zone, ['set', 'autoboot=false'], callback);
-}
-
-function enableAutoboot(zone, callback) {
-    zonecfg(zone, ['set', 'autoboot=true'], callback);
-}
-
-function boot(zone, callback) {
-    zoneadm(zone, ['boot', '-X'], callback);
-}
-
-function uninstallZone(zone, callback) {
-    zoneadm(zone, ['uninstall', '-F'], callback);
-}
-
-function deleteZone(zone, callback) {
-    zonecfg(zone, ['delete', '-F'], callback);
-}
-
-
-function destroyZone(zone, callback) {
-    console.log('Attempting to destroy zone');
-    async.waterfall([
-        // async.apply(disableAutoboot, zone),
-        async.apply(halt, zone),
-        async.apply(uninstallZone, zone),
-        async.apply(deleteZone, zone)
-    ],
-    function (error) {
-        if (error) {
-            console.log('Error destroying zone: ' + error);
-            return callback(error);
-        }
-        return callback();
-    });
-}
-
-function logParseTrace(trace, logger) {
-    if (typeof (trace) === 'object') {
-        for (var i in trace) {
-            var item = trace[i];
-            var timestamp = item.timestamp;
-
-            delete item.timestamp;
-
-            logger.logMessage('info', item, timestamp);
-        }
-    }
-}
-
-function zpoolFromZoneName(zonename, callback) {
-    Zone.get(zonename, function (error, zone) {
-        console.dir(zone);
-        var zpool = zone.zonepath.slice(1).split('/', 1)[0];
-        return callback(null, zpool);
-    });
-}
-
-function setZoneAttribute(zone, name, value, callback) {
-    var rmAttrArgs = [
-        [
-            'remove attr name=' + name,
-            'commit'
-        ].join('; ')
-    ];
-
-    var addAttrArgs = [
-        [
-            'add attr; set name="'+name+'"',
-            'set type=string',
-            'set value="'+value+'"',
-            'end',
-            'commit'
-        ].join('; ')
-    ];
-
-    zonecfg(zone, rmAttrArgs, function () {
-        if (value && value.toString()) {
-            zonecfg(zone, addAttrArgs, function (error) {
-                return callback(error);
-            });
-        } else {
-            callback();
-        }
-    });
-}
-
 /*
  * Create a logger for re-logging vmadm log messages.
  *
@@ -303,24 +157,10 @@ function ensureProvisionComplete(uuid, callback) {
 }
 
 
-
 module.exports = {
     ensureProvisionComplete: ensureProvisionComplete,
-    provisionInProgressFile: provisionInProgressFile,
     makeVmadmLogger: makeVmadmLogger,
-    setZoneAttribute: setZoneAttribute,
-    zpoolFromZoneName: zpoolFromZoneName,
-    logParseTrace: logParseTrace,
-    destroyZone: destroyZone,
-    deleteZone: deleteZone,
-    uninstallZone: uninstallZone,
-    boot: boot,
-    enableAutoboot: enableAutoboot,
-    disableAutoboot: disableAutoboot,
-    zonecfg: zonecfg,
-    zoneadm: zoneadm,
     modifyConfig: modifyConfig,
-    zoneList: zoneList,
-    parseZoneList: parseZoneList,
-    keysToUpper: keysToUpper
+    provisionInProgressFile: provisionInProgressFile,
+    zoneList: zoneList
 };
diff --git a/lib/imgadm.js b/lib/backends/smartos/imgadm.js
similarity index 100%
rename from lib/imgadm.js
rename to lib/backends/smartos/imgadm.js
diff --git a/lib/backends/smartos/index.js b/lib/backends/smartos/index.js
new file mode 100644
index 0000000..beae4fc
--- /dev/null
+++ b/lib/backends/smartos/index.js
@@ -0,0 +1,772 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+// This file serves as an example of the minimum required in order to implement
+// a cn-agent backend.
+
+var cp = require('child_process');
+var EventEmitter = require('events').EventEmitter;
+var exec = cp.exec;
+var execFile = cp.execFile;
+var fs = require('fs');
+var os = require('os');
+var spawn = cp.spawn;
+var util = require('util');
+
+var assert = require('assert-plus');
+var async = require('async');
+var kstat = require('kstat');
+var sprintf = require('sprintf').sprintf;
+var vasync = require('vasync');
+var vmadm = require('vmadm');
+var zfs = require('zfs').zfs;
+var zpool = require('zfs').zpool;
+
+var imgadm = require('./imgadm');
+var smartdc_config = require('./smartdc-config');
+
+var systempages_reader = null;
+var arcstats_reader = null;
+
+
+// ms to wait when zoneevent exits, before restarting
+var ZONEEVENT_RESTART_INTERVAL = 30 * 1000;
+
+
+var queueDefns = [
+    {
+        name: 'machine_creation',
+        tasks: [ 'machine_create', 'machine_reprovision' ]
+    },
+    {
+        name: 'image_import_tasks',
+        tasks: [ 'image_ensure_present' ]
+    },
+    {
+        name: 'server_tasks',
+        tasks: [
+            'server_overprovision_ratio'
+        ]
+    },
+    {
+        name: 'docker_tasks',
+        tasks: [
+            'docker_exec',
+            'docker_copy',
+            'docker_stats'
+        ]
+    },
+    {
+        name: 'docker_build_task',
+
+        /**
+         * `docker build` payloads, particularly those with a large range
+         * of exposed ports, tend to be HUGE and negatively impact the
+         * service when logged.
+         */
+        log_params: false,
+        tasks: [
+            'docker_build'
+        ]
+    },
+    {
+        name: 'server_nic_tasks',
+        tasks: [
+            'server_update_nics'
+        ]
+    },
+    {
+        name: 'agents_tasks',
+        maxConcurrent: 1,
+        tasks: [
+            'agent_install',
+            'shutdown_cn_agent_update',
+            'refresh_agents'
+        ]
+    },
+    {
+        name: 'machine_tasks',
+        tasks: [
+            'machine_boot',
+            'machine_destroy',
+            'machine_kill',
+            'machine_proc',
+            'machine_reboot',
+            'machine_shutdown',
+            'machine_update',
+            'machine_update_nics',
+            'machine_screenshot',
+            'machine_create_snapshot',
+            'machine_rollback_snapshot',
+            'machine_delete_snapshot'
+        ]
+    },
+    {
+        name: 'machine_images',
+        tasks: [
+            'machine_create_image'
+        ]
+    },
+    {
+        name: 'image_query',
+        logging: false,
+        tasks: [
+            'image_get'
+        ]
+    },
+    {
+        name: 'machine_query',
+        logging: false,
+        tasks: [
+            'machine_load',
+            'machine_info'
+        ]
+    },
+    {
+        name: 'zfs_tasks',
+        tasks: [
+            'zfs_create_dataset',
+            'zfs_destroy_dataset',
+            'zfs_rename_dataset',
+            'zfs_snapshot_dataset',
+            'zfs_rollback_dataset',
+            'zfs_clone_dataset',
+            'zfs_set_properties'
+        ]
+    },
+    {
+        name: 'zfs_query',
+        tasks: [
+            'zfs_get_properties',
+            'zfs_list_datasets',
+            'zfs_list_snapshots',
+            'zfs_list_pools'
+        ]
+    },
+    {
+        name: 'test_sleep',
+        tasks: [ 'sleep' ]
+    },
+    {
+        name: 'nop',
+        tasks: [ 'nop' ]
+    },
+    {
+        name: 'test_subtask',
+        tasks: [ 'test_subtask' ]
+    }
+];
+
+
+/**
+ * 1) the sum of the disk used by the kvm VMs' zvols' volsizes
+ * 2) the sum of the maximum capacity of VMs' zvols
+ * 3) the sum of the quotas for kvm VMs (this space has a different usage
+ *     pattern from zone's quotas)
+ * 4) the sum of the quotas for non-kvm VMs
+ * 5) the sum of the cores quotas for all VMs of all brands
+ * 6) the sum of the disk used by images installed on the CN
+ * 7) the total size of the pool
+ * 8) the 'system space' which would be the total size of the pool minus
+ *    the sum of the other numbers here and include things like the files
+ *    in /opt, kernel dumps, and anything else written that's not part of
+ *    the above.
+ *
+ * This calls:
+ *
+ *   callback(err, usage)
+ *
+ * where usage is an object with these properties:
+ *
+ *   kvm_zvol_used_bytes: 0,
+ *   kvm_zvol_volsize_bytes: 0,
+ *   kvm_quota_bytes: 0,
+ *   kvm_quota_used_bytes: 0,
+ *   zone_quota_bytes: 0,
+ *   zone_quota_used_bytes: 0,
+ *   cores_quota_bytes: 0,
+ *   cores_quota_used_bytes: 0,
+ *   installed_images_used_bytes: 0,
+ *   pool_size_bytes: 0,
+ *   pool_alloc_bytes: 0,
+ *   system_used_bytes: 0
+ *
+ */
+function getDiskUsage(opts, vms, callback) {
+    var datasets = {};
+    var usage = {
+        kvm_zvol_used_bytes: 0,
+        kvm_zvol_volsize_bytes: 0,
+        kvm_quota_bytes: 0,
+        kvm_quota_used_bytes: 0,
+        zone_quota_bytes: 0,
+        zone_quota_used_bytes: 0,
+        cores_quota_bytes: 0,
+        cores_quota_used_bytes: 0,
+        installed_images_used_bytes: 0,
+        pool_size_bytes: 0,
+        pool_alloc_bytes: 0,
+        system_used_bytes: 0
+    };
+
+    assert.object(opts.log, 'opts.log');
+
+    function toInt(val) {
+        var a = parseInt(val, 10);
+        return (isNaN(a) ? 0 : a);
+    }
+
+    async.waterfall([
+        function (cb) {
+            zfs.get(
+                null, // Look up properties for *all* datasets
+                [ 'name', 'used', 'avail', 'refer', 'type', 'mountpoint',
+                'quota', 'origin', 'volsize'],
+                true, // Parseable
+                function (geterr, props) {
+                    if (geterr) {
+                        cb(geterr);
+                        return;
+                    }
+
+                    datasets = props;
+                    cb();
+            });
+        },
+        function (cb) {
+            async.each(Object.keys(vms), function (uuid, fecb) {
+                var vm = vms[uuid];
+
+                // #1,2
+                if (vm.brand === 'kvm') {
+                    var devices = vm.disks;
+                    var device;
+
+                    for (var deviceIdx in devices) {
+                        device = devices[deviceIdx];
+
+                        var match = device.path;
+                        var rdskpath = '/dev/zvol/rdsk/';
+                        var rdskpathlen = rdskpath.length;
+                        var ds = match.slice(rdskpathlen);
+
+                        if (datasets.hasOwnProperty(ds)) {
+                            usage.kvm_zvol_used_bytes +=
+                                toInt(datasets[ds].used);
+                            usage.kvm_zvol_volsize_bytes +=
+                                toInt(datasets[ds].volsize);
+                        }
+                    }
+
+                    // #3
+                    if (datasets.hasOwnProperty(vm.zonepath.slice(1))) {
+                        usage.kvm_quota_bytes += toInt(
+                            datasets[vm.zonepath.slice(1)].quota);
+                        usage.kvm_quota_used_bytes += toInt(
+                            datasets[vm.zonepath.slice(1)].used);
+                    }
+                } else {
+                    // #4
+                    if (datasets.hasOwnProperty(vm.zonepath.slice(1))) {
+                        usage.zone_quota_bytes += toInt(
+                            datasets[vm.zonepath.slice(1)].quota);
+                        usage.zone_quota_used_bytes += toInt(
+                            datasets[vm.zonepath.slice(1)].used);
+                    }
+                }
+
+                // #5
+                var coreds = datasets[vm.zonepath.slice(1) + '/cores'] ||
+                    datasets['zones/cores/' + vm.uuid];
+                if (coreds) {
+                    usage.cores_quota_bytes += toInt(coreds.quota);
+                    usage.cores_quota_used_bytes += toInt(coreds.used);
+                }
+
+                fecb();
+            }, function (error) {
+                cb(error);
+            });
+        },
+        function (cb) {
+            // #6
+            // Sum installed images 'used' values
+
+            async.forEachSeries(
+                Object.keys(datasets),
+                onDataset,
+                onDatasetsDone);
+
+            function onDatasetsDone(err) {
+                cb(err);
+            }
+
+            function onDataset(dataset, _next) {
+                // Guard against us blowing up the stack (AGENT-1072)
+                var next = function (err) {
+                    setImmediate(function (_err) {
+                        _next(_err);
+                    }, err);
+                };
+
+                // Eliminate snapshots and sub-filesystems
+                var UUID_RE = '([0-9a-f]{8}-[0-9a-f]{4}-' +
+                              '[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-' +
+                              '[0-9a-f]{12})';
+
+                var datasetReStr = '^([^/]+)/' + UUID_RE + '$';
+                var match = dataset.match(new RegExp(datasetReStr));
+                if (!match) {
+                    next();
+                    return;
+                }
+
+                // Check if UUID corresponds to that of an installed image
+                var datasetUuid = match[2];
+
+                opts.log.trace(
+                    { uuid: datasetUuid },
+                    'quickGetImage');
+                imgadm.quickGetImage({
+                    uuid: datasetUuid,
+                    log: opts.log
+                }, function (err, manifest) {
+                    if (err && err.code === 'ImageNotInstalled') {
+                        next();
+                        return;
+                    } else if (err) {
+                        opts.log.error({
+                            uuid: datasetUuid, err: err },
+                            'quickGetImage');
+                        next();
+                        return;
+                    }
+
+                    /*
+                     * If we used "imgadm get" we might get a dummy result for
+                     * a random UUID-named dataset. We can't easily tell whether
+                     * it's really an image (in the Bad Old Days no metadata was
+                     * really required), so if it has nothing but a uuid in its
+                     * manifest, skip it.
+                     *
+                     * It's better to miss one or two images here (they'll still
+                     * get counted against provisionable space by DAPI, just as
+                     * system_used instead) than to double-count real VMs
+                     * (which could make this box un-provisionable).
+                     */
+                    var keys = Object.keys(manifest);
+                    if (keys.length === 1 && keys[0] === 'uuid') {
+                        next();
+                        return;
+                    }
+
+                    // Tally bytes used
+                    usage.installed_images_used_bytes
+                        += toInt(datasets[dataset].used);
+
+                    next();
+                });
+            }
+        },
+        function (cb) {
+            // #7
+            var poolds = datasets['zones'];
+            usage.pool_alloc_bytes = toInt(poolds.used);
+            usage.pool_size_bytes = toInt(poolds.used) +
+                toInt(poolds.available);
+
+            // #8
+            // All separated usages should be subtracted from the allocated
+            // here. Anything not specifically listed is treated as 'system
+            // space'.
+            usage.system_used_bytes = usage.pool_alloc_bytes - (
+                usage.kvm_zvol_used_bytes +
+                usage.kvm_quota_used_bytes +
+                usage.zone_quota_used_bytes +
+                usage.cores_quota_used_bytes +
+                usage.installed_images_used_bytes);
+
+            cb();
+        }
+    ],
+    function (error) {
+        if (error) {
+            opts.log.warn(error.message);
+        }
+        callback(null, usage);
+    });
+}
+
+
+// getPoolSpaceStats() calls:
+//
+//  callback(err, spaceStats)
+//
+// where spaceStats looks like:
+//
+//  {
+//      bytes_available: <number>,
+//      bytes_used: <number>
+//  }
+//
+// NOTE: this function is used by getZpoolInfo and not exported itself.
+//
+function getPoolSpaceStats(pool, opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+
+    var log = opts.log;
+    var spaceStats = {};
+
+    zfs.get(pool, ['used', 'available'], true, function _onGet(err, props) {
+        if (err) {
+            log.error({err: err}, 'zfs get error');
+            callback(err);
+            return;
+        }
+
+        if (!props[pool]) {
+            log.error({props: props},
+                'XXX props returned degenerate values');
+            callback(new Error('degenerate usage values returned for ' +
+                'zpool ' + pool));
+            return;
+        }
+
+        spaceStats = {
+            bytes_available: parseInt(props[pool].available, 10),
+            bytes_used: parseInt(props[pool].used, 10)
+        };
+
+        callback(null, spaceStats);
+    });
+}
+
+
+// getZpoolInfo() calls:
+//
+//  callback(err, zpoolStatus)
+//
+// where zpoolStatus looks like:
+//
+//  {
+//      <pool_name>: {
+//          bytes_available,
+//          bytes_used
+//      }
+//  }
+//
+function getZpoolInfo(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+
+    var log = opts.log;
+    var zpoolStatus = {};
+
+    zpool.list(function _onZpoolList(zpoolListErr, _, lines) {
+        if (zpoolListErr) {
+            log.error({err: zpoolListErr}, 'zpool list error');
+            callback(zpoolListErr);
+            return;
+        }
+
+        vasync.forEachParallel({
+            inputs: lines,
+            func: function _getSpaceStats(poolinfo, cb) {
+                var pool = poolinfo[0];
+
+                getPoolSpaceStats(pool, opts, function _onSpaceStats(err, ss) {
+                    if (err) {
+                        cb(err);
+                        return;
+                    }
+
+                    zpoolStatus[pool] = ss;
+                    cb();
+                });
+            }
+        }, function _afterSpaceStats(err) {
+            callback(err, zpoolStatus);
+        });
+    });
+}
+
+
+function startZoneeventWatcher(opts, watchers) {
+    var pid;
+
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+
+    watchers.zoneeventHandle = spawn('/usr/vm/sbin/zoneevent', []);
+    pid = watchers.zoneeventHandle.pid;
+    opts.log.info('zoneevent[' + pid + '] watcher running');
+
+    watchers.zoneeventHandle.stdout.on('data', function _onData(data) {
+        // If we cared about the data here, we'd parse it (JSON) but we just
+        // care that *something* changed, not what it was so we always just
+        // mark our sample dirty when we see any changes.
+        opts.dirtyFn();
+    });
+
+    // stdin is not used
+    watchers.zoneeventHandle.stdin.end();
+
+    watchers.zoneeventHandle.on('exit', function _onExit(code) {
+        watchers.zoneeventHandle = null;
+        opts.log.warn('zoneevent[' + pid + '] watcher exited.');
+
+        // restart the watcher in ZONEEVENT_RESTART_INTERVAL ms
+        setTimeout(function _restartZoneeventWatcher() {
+            startZoneeventWatcher(opts, watchers);
+        }, ZONEEVENT_RESTART_INTERVAL);
+    });
+}
+
+
+function startZoneConfigWatcher(opts, watchers) {
+    var dir = '/etc/zones';
+
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+
+    watchers.configWatchHandle = fs.watch(dir, function _onFsEvent() {
+        // note: we ignore the arguments to the _onFsEvent() callback here
+        // because we don't care *what* changed.
+        opts.dirtyFn();
+    });
+
+    opts.log.info('started fs.watch() for ' + dir);
+}
+
+
+function SmartosBackend(opts) {
+    var self = this;
+
+    self.log = opts.log;
+    self.name = opts.backendName;
+    self.queueDefns = queueDefns;
+}
+
+
+/*
+ * This function grabs some basic memory usage information via kstat.  It should
+ * be called like:
+ *
+ *     getMemoryInfo({log: log}, function _onInfo(err, data) {
+ *         // data will contain several memory properties if err is not set
+ *     });
+ *
+ * values in the data object are in bytes for maximum accuracy. Fields are:
+ *
+ *    availrmem_bytes
+ *    arcsize_bytes
+ *    total_bytes
+ *
+ * `getMemoryInfo` was lifted from:
+ *
+ * https://github.com/joyent/smartos-live/blob/master/src/node_modules/system.js
+ *
+ */
+SmartosBackend.prototype.getMemoryInfo = function getMemoryInfo(callback) {
+    var arcstats_val, systempages_val;
+
+    // Setup readers if we've not already done so.
+    if (!arcstats_reader) {
+        arcstats_reader = new kstat.Reader({ module: 'zfs',
+            'class': 'misc', instance: 0, name: 'arcstats' });
+    }
+
+    if (!systempages_reader) {
+        systempages_reader = new kstat.Reader({ module: 'unix',
+            'class': 'pages', instance: 0, name: 'system_pages' });
+    }
+
+    // Get the latest values from kstat
+    systempages_val = systempages_reader.read();
+    arcstats_val = arcstats_reader.read();
+
+    if (!systempages_val) {
+        callback(new Error('No value for system_pages.'));
+        return;
+    }
+    if (!arcstats_val) {
+        callback(new Error('No value for arcstats.'));
+        return;
+    }
+
+    if (!systempages_val.hasOwnProperty(0) ||
+        !systempages_val[0].hasOwnProperty('data') ||
+        !systempages_val[0].data.hasOwnProperty('availrmem') ||
+        !systempages_val[0].data.hasOwnProperty('pagestotal')) {
+
+        callback(new Error('Invalid data returned for system_pages:'
+            + JSON.stringify(systempages_val)));
+
+        return;
+    }
+
+    if (!arcstats_val.hasOwnProperty(0) ||
+        !arcstats_val[0].hasOwnProperty('data') ||
+        !arcstats_val[0].data.hasOwnProperty('size')) {
+
+        callback(new Error('Invalid data returned for arcstats:'
+            + JSON.stringify(arcstats_val)));
+        return;
+    }
+
+    callback(null, {
+        'availrmem_bytes': (systempages_val[0].data.availrmem * 4096),
+        'arcsize_bytes': arcstats_val[0].data.size,
+        'total_bytes': (systempages_val[0].data.pagestotal * 4096)
+    });
+
+    return;
+};
+
+
+SmartosBackend.prototype.getAgentConfig = function getAgentConfig(callback) {
+    var self = this;
+
+    // The plan is to migrate to using this file as the entire configuration
+    // needed for the cn-agent. For now we rely on the presence of this file
+    // to detect if we are intending to run the agent, which is why no_rabbit
+    // is false by default
+    var agentConfig;
+    var agentConfigPath = '/opt/smartdc/agents/etc/cn-agent.config.json';
+
+    try {
+        agentConfig = JSON.parse(fs.readFileSync(agentConfigPath, 'utf-8'));
+    } catch (e) {
+        self.log.error(e, 'Could not parse agent config: "%s", '
+            + 'setting no_rabbit flag to false', e.message);
+        agentConfig = { no_rabbit: false };
+    }
+
+    callback(null, agentConfig);
+};
+
+
+// These just proxy to smartdc_config
+SmartosBackend.prototype.getSdcConfig = smartdc_config.sdcConfig;
+SmartosBackend.prototype.getSysinfo = smartdc_config.sysinfo;
+
+
+SmartosBackend.prototype.getBootTime = function getBootTime(callback) {
+    // sysinfo will have the 'Boot Time' cached, so we use that
+    smartdc_config.sysinfo(function onSysinfo(err, sysinfo) {
+        var boot_time;
+
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        boot_time =
+            new Date(parseInt(sysinfo['Boot Time'], 10) * 1000).toISOString();
+
+        callback(null, boot_time);
+    });
+};
+
+
+SmartosBackend.prototype.getDiskUsage = function _getDiskUsage(vms, callback) {
+    var self = this;
+
+    getDiskUsage({log: self.log}, vms, callback);
+};
+
+
+// opts will have:
+//
+//  {
+//    fields: <array of field names to include in objects>,
+//    log: <bunyan logger>,
+//  }
+SmartosBackend.prototype.loadVms = function loadVms(opts, callback) {
+    vmadm.lookup({}, opts, function onLookup(err, vmobjs) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        callback(null, vmobjs);
+    });
+};
+
+
+SmartosBackend.prototype.getZpoolInfo = function _getZpoolInfo(callback) {
+    var self = this;
+
+    getZpoolInfo({log: self.log}, function onPoolInfo(err, info) {
+        if (err) {
+            callback(err);
+            return;
+        }
+        callback(null, info);
+    });
+
+};
+
+
+//
+// The watchers here watch for 2 types of events:
+//
+//  1. /usr/vm/sbin/zoneevent for zone state changes
+//  2. fs.watch() on /etc/zones for zone configuration changes
+//
+// if either of these events are seen, we'll call the 'dirtyFn' function
+// that was passed in the opts. This will tell cn-agent to reload its data
+// asap. Otherwise the change might not be noticed for up to a minute.
+//
+// opts will have:
+//
+//  {
+//     dirtyFn: <function>,
+//     log: <bunyan logger>
+//  }
+//
+SmartosBackend.prototype.startWatchers = function startWatchers(opts) {
+    var watchers = {};
+
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.func(opts.dirtyFn, 'dirtyFn');
+
+    // These should call opts.dirtyFn any time they decide the sample should be
+    // "marked dirty" meaning that something changed and any cache might be
+    // invalid. They should also restart themselves if there is a problem.
+
+    startZoneeventWatcher(opts, watchers);
+    startZoneConfigWatcher(opts, watchers);
+
+    return watchers;
+};
+
+
+SmartosBackend.prototype.stopWatchers = function stopWatchers(watchers) {
+    // Not implemented. If in the future we want to be able to stop the watchers
+    // we started with startWatchers, we will be passed the same object we
+    // returned there.
+};
+
+
+SmartosBackend.prototype.cleanupStaleLocks =
+function cleanupStaleLocks(callback) {
+    // AGENT-640: Ensure we clean up any stale machine creation guard
+    // files, then set queues up as per usual.
+    var cmd = '/usr/bin/rm -f /var/tmp/machine-creation-*';
+    exec(cmd, function (err, stdout, stderr) {
+        callback(err);
+    });
+};
+
+
+module.exports = SmartosBackend;
diff --git a/lib/docker-stdio.js b/lib/backends/smartos/lib/docker-stdio.js
similarity index 99%
rename from lib/docker-stdio.js
rename to lib/backends/smartos/lib/docker-stdio.js
index bf7f4df..eb72168 100644
--- a/lib/docker-stdio.js
+++ b/lib/backends/smartos/lib/docker-stdio.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * The logic contained in this file is responsible for plumbing the various
  * input/output connections and sockets necessary for communicating with docker
  * containers.
+ *
+ * This is specific to the smartos backend.
  */
 
 
diff --git a/lib/update-wait-flag.js b/lib/backends/smartos/lib/update-wait-flag.js
similarity index 100%
rename from lib/update-wait-flag.js
rename to lib/backends/smartos/lib/update-wait-flag.js
diff --git a/lib/smartdc-config.js b/lib/backends/smartos/smartdc-config.js
similarity index 100%
rename from lib/smartdc-config.js
rename to lib/backends/smartos/smartdc-config.js
diff --git a/lib/tasks/agent_install.js b/lib/backends/smartos/tasks/agent_install.js
similarity index 98%
rename from lib/tasks/agent_install.js
rename to lib/backends/smartos/tasks/agent_install.js
index bdca88a..158bf89 100644
--- a/lib/tasks/agent_install.js
+++ b/lib/backends/smartos/tasks/agent_install.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -72,16 +72,20 @@
  */
 
 
-var APM = require('../apm').APM;
 var assert = require('assert');
-var async = require('async');
 var child_process = require('child_process');
 var execFile = child_process.execFile;
 var fs = require('fs');
-var Task = require('../task_agent/task');
-var refreshAgents = require('./shared').refreshAgents;
-var restify = require('restify');
+
+var async = require('async');
 var bunyan = require('bunyan');
+var restify = require('restify');
+
+var APM = require('../../../apm').APM;
+var refreshAgents = require('./shared').refreshAgents;
+var smartdc_config = require('../smartdc-config');
+var Task = require('../../../task_agent/task');
+
 var CURL_CMD = '/usr/bin/curl';
 
 function AgentInstallTask(req) {
@@ -392,7 +396,6 @@ function start() {
     var apm = new APM({log: self.log});
     var image_uuid = self.req.params.image_uuid;
     var opts = {
-        imgapi_domain: self.sdcConfig.imgapi_domain,
         log: self.log,
         output_prefix: '/var/tmp/' + image_uuid
     };
@@ -427,6 +430,17 @@ function start() {
     }
 
     async.waterfall([
+        function getSdcConfigImgapiDomain(cb) {
+            smartdc_config.sdcConfig(function (configError, config) {
+                if (configError) {
+                    cb(configError);
+                    return;
+                }
+
+                opts.imgapi_domain = config.imgapi_domain;
+                cb();
+            });
+        },
         function getImage(cb) {
             // If we already got these from cn-agent sending the task to
             // cn-agent-update, we can safely skip this step:
diff --git a/lib/tasks/docker_build.js b/lib/backends/smartos/tasks/docker_build.js
similarity index 93%
rename from lib/tasks/docker_build.js
rename to lib/backends/smartos/tasks/docker_build.js
index d0a50e2..bdb625e 100644
--- a/lib/tasks/docker_build.js
+++ b/lib/backends/smartos/tasks/docker_build.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var fork = require('child_process').fork;
 var once = require('once');
 
@@ -29,7 +29,7 @@ function start(callback) {
     var self = this;
 
     self.log.debug('Starting docker-build.js child process');
-    var binfn = __dirname + '/../../bin/docker-build.js';
+    var binfn = __dirname + '/../bin/docker-build.js';
     var opts = { silent: true };
     var payload = self.req.params.payload;
 
diff --git a/lib/tasks/docker_copy.js b/lib/backends/smartos/tasks/docker_copy.js
similarity index 95%
rename from lib/tasks/docker_copy.js
rename to lib/backends/smartos/tasks/docker_copy.js
index 1fd1dca..4e3b00b 100644
--- a/lib/tasks/docker_copy.js
+++ b/lib/backends/smartos/tasks/docker_copy.js
@@ -8,7 +8,7 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var common = require('../common');
 var fork = require('child_process').fork;
 var getFirstAdminIp = require('../smartdc-config').getFirstAdminIp;
@@ -29,7 +29,7 @@ DockerExecTask.setStart(start);
 function start(callback) {
     var self = this;
 
-    var binfn = __dirname + '/../../bin/docker-copy.js';
+    var binfn = __dirname + '/../bin/docker-copy.js';
 
     var opts = {};
     var dockerCopy = fork(binfn, [], opts);
diff --git a/lib/tasks/docker_exec.js b/lib/backends/smartos/tasks/docker_exec.js
similarity index 97%
rename from lib/tasks/docker_exec.js
rename to lib/backends/smartos/tasks/docker_exec.js
index 012f78d..6cb26d7 100644
--- a/lib/tasks/docker_exec.js
+++ b/lib/backends/smartos/tasks/docker_exec.js
@@ -8,15 +8,14 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var sysinfo = require('../smartdc-config').sysinfo;
 var vmadm = require('vmadm');
 var async = require('async');
-var common = require('../common');
 var fork = require('child_process').fork;
 var once = require('once');
 var path = require('path');
-var wait_flag = require('../update-wait-flag');
+var wait_flag = require('../lib/update-wait-flag');
 
 var RUNNING_CHECK_INTERVAL = 200; // ms (how long to wait between vmadm.load's)
 var WAIT_TIMEOUT = 60;            // seconds
@@ -127,7 +126,7 @@ function start(callback) {
     timeout_at = (new Date()).getTime() + (WAIT_TIMEOUT * 1000);
 
     function _spawnExec(err, vmobj) {
-        var binfn = __dirname + '/../../bin/docker-exec.js';
+        var binfn = __dirname + '/../bin/docker-exec.js';
         var brand;
         var dockerExec;
         var opts = {};
diff --git a/lib/tasks/docker_stats.js b/lib/backends/smartos/tasks/docker_stats.js
similarity index 88%
rename from lib/tasks/docker_stats.js
rename to lib/backends/smartos/tasks/docker_stats.js
index d633b8c..4e8ff4b 100644
--- a/lib/tasks/docker_stats.js
+++ b/lib/backends/smartos/tasks/docker_stats.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var fork = require('child_process').fork;
 var once = require('once');
 
@@ -28,7 +28,7 @@ DockerStatsTask.setStart(start);
 function start(callback) {
     var self = this;
 
-    var binfn = __dirname + '/../../bin/docker-stats.js';
+    var binfn = __dirname + '/../bin/docker-stats.js';
 
     var opts = {};
     var dockerStats = fork(binfn, [], opts);
diff --git a/lib/tasks/image_ensure_present.js b/lib/backends/smartos/tasks/image_ensure_present.js
similarity index 97%
rename from lib/tasks/image_ensure_present.js
rename to lib/backends/smartos/tasks/image_ensure_present.js
index 89fce00..7d28294 100644
--- a/lib/tasks/image_ensure_present.js
+++ b/lib/backends/smartos/tasks/image_ensure_present.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -16,9 +16,8 @@ var format = require('util').format;
 var semver = require('semver');
 var zfs = require('zfs').zfs;
 
-var common = require('../common');
 var imgadm = require('../imgadm');
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 
 var DEFAULT_CN_AGENT_PORT = 5309;
 var REQUIRED_IMGADM_VERSION = '3.3.0';
diff --git a/lib/tasks/image_get.js b/lib/backends/smartos/tasks/image_get.js
similarity index 88%
rename from lib/tasks/image_get.js
rename to lib/backends/smartos/tasks/image_get.js
index 8196db7..44cc184 100644
--- a/lib/tasks/image_get.js
+++ b/lib/backends/smartos/tasks/image_get.js
@@ -5,12 +5,11 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 var imgadm = require('../imgadm');
 
 var ImageGetTask = module.exports = function (req) {
diff --git a/lib/tasks/kvmdebug.js b/lib/backends/smartos/tasks/kvmdebug.js
similarity index 100%
rename from lib/tasks/kvmdebug.js
rename to lib/backends/smartos/tasks/kvmdebug.js
diff --git a/lib/tasks/machine_boot.js b/lib/backends/smartos/tasks/machine_boot.js
similarity index 97%
rename from lib/tasks/machine_boot.js
rename to lib/backends/smartos/tasks/machine_boot.js
index 16b5126..58312fb 100644
--- a/lib/tasks/machine_boot.js
+++ b/lib/backends/smartos/tasks/machine_boot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_create.js b/lib/backends/smartos/tasks/machine_create.js
similarity index 99%
rename from lib/tasks/machine_create.js
rename to lib/backends/smartos/tasks/machine_create.js
index 821b877..3621a91 100644
--- a/lib/tasks/machine_create.js
+++ b/lib/backends/smartos/tasks/machine_create.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var async = require('async');
 var common = require('../common');
diff --git a/lib/tasks/machine_create_image.js b/lib/backends/smartos/tasks/machine_create_image.js
similarity index 94%
rename from lib/tasks/machine_create_image.js
rename to lib/backends/smartos/tasks/machine_create_image.js
index ca95a47..5a24c57 100644
--- a/lib/tasks/machine_create_image.js
+++ b/lib/backends/smartos/tasks/machine_create_image.js
@@ -5,16 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * A provisioner task to create an image from a VM.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 var imgadm = require('../imgadm');
 
 
diff --git a/lib/tasks/machine_create_snapshot.js b/lib/backends/smartos/tasks/machine_create_snapshot.js
similarity index 95%
rename from lib/tasks/machine_create_snapshot.js
rename to lib/backends/smartos/tasks/machine_create_snapshot.js
index 5aa5fb4..66e11ac 100644
--- a/lib/tasks/machine_create_snapshot.js
+++ b/lib/backends/smartos/tasks/machine_create_snapshot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_delete_snapshot.js b/lib/backends/smartos/tasks/machine_delete_snapshot.js
similarity index 95%
rename from lib/tasks/machine_delete_snapshot.js
rename to lib/backends/smartos/tasks/machine_delete_snapshot.js
index c4c1db6..d5ceec8 100644
--- a/lib/tasks/machine_delete_snapshot.js
+++ b/lib/backends/smartos/tasks/machine_delete_snapshot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_destroy.js b/lib/backends/smartos/tasks/machine_destroy.js
similarity index 98%
rename from lib/tasks/machine_destroy.js
rename to lib/backends/smartos/tasks/machine_destroy.js
index a38f103..c08e2b5 100644
--- a/lib/tasks/machine_destroy.js
+++ b/lib/backends/smartos/tasks/machine_destroy.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var common = require('../common');
@@ -13,7 +13,7 @@ var execFile = require('child_process').execFile;
 var fs = require('fs');
 var path = require('path');
 var smartdcconfig = require('../smartdc-config');
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vasync = require('vasync');
 var vmadm = require('vmadm');
 
diff --git a/lib/tasks/machine_info.js b/lib/backends/smartos/tasks/machine_info.js
similarity index 93%
rename from lib/tasks/machine_info.js
rename to lib/backends/smartos/tasks/machine_info.js
index 218a40f..407fac7 100644
--- a/lib/tasks/machine_info.js
+++ b/lib/backends/smartos/tasks/machine_info.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_kill.js b/lib/backends/smartos/tasks/machine_kill.js
similarity index 95%
rename from lib/tasks/machine_kill.js
rename to lib/backends/smartos/tasks/machine_kill.js
index c389b17..ade8778 100644
--- a/lib/tasks/machine_kill.js
+++ b/lib/backends/smartos/tasks/machine_kill.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm  = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_load.js b/lib/backends/smartos/tasks/machine_load.js
similarity index 93%
rename from lib/tasks/machine_load.js
rename to lib/backends/smartos/tasks/machine_load.js
index 6916d5c..2942058 100644
--- a/lib/tasks/machine_load.js
+++ b/lib/backends/smartos/tasks/machine_load.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_proc.js b/lib/backends/smartos/tasks/machine_proc.js
similarity index 97%
rename from lib/tasks/machine_proc.js
rename to lib/backends/smartos/tasks/machine_proc.js
index bb5e00c..dd971ef 100644
--- a/lib/tasks/machine_proc.js
+++ b/lib/backends/smartos/tasks/machine_proc.js
@@ -5,13 +5,13 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var common = require('../common');
 var execFile = require('child_process').execFile;
 var procread = require('procread');
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 
 var MachineProcTask = module.exports = function (req) {
diff --git a/lib/tasks/machine_reboot.js b/lib/backends/smartos/tasks/machine_reboot.js
similarity index 98%
rename from lib/tasks/machine_reboot.js
rename to lib/backends/smartos/tasks/machine_reboot.js
index c27b991..b6cf0e2 100644
--- a/lib/tasks/machine_reboot.js
+++ b/lib/backends/smartos/tasks/machine_reboot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_reprovision.js b/lib/backends/smartos/tasks/machine_reprovision.js
similarity index 98%
rename from lib/tasks/machine_reprovision.js
rename to lib/backends/smartos/tasks/machine_reprovision.js
index 831c389..301720c 100644
--- a/lib/tasks/machine_reprovision.js
+++ b/lib/backends/smartos/tasks/machine_reprovision.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var async = require('async');
 var common = require('../common');
diff --git a/lib/tasks/machine_rollback_snapshot.js b/lib/backends/smartos/tasks/machine_rollback_snapshot.js
similarity index 95%
rename from lib/tasks/machine_rollback_snapshot.js
rename to lib/backends/smartos/tasks/machine_rollback_snapshot.js
index e015671..b5dcabc 100644
--- a/lib/tasks/machine_rollback_snapshot.js
+++ b/lib/backends/smartos/tasks/machine_rollback_snapshot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_screenshot.js b/lib/backends/smartos/tasks/machine_screenshot.js
similarity index 95%
rename from lib/tasks/machine_screenshot.js
rename to lib/backends/smartos/tasks/machine_screenshot.js
index 89db4c6..49bbd70 100644
--- a/lib/tasks/machine_screenshot.js
+++ b/lib/backends/smartos/tasks/machine_screenshot.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var fs = require('fs');
diff --git a/lib/tasks/machine_shutdown.js b/lib/backends/smartos/tasks/machine_shutdown.js
similarity index 97%
rename from lib/tasks/machine_shutdown.js
rename to lib/backends/smartos/tasks/machine_shutdown.js
index 74caaf4..b7de190 100644
--- a/lib/tasks/machine_shutdown.js
+++ b/lib/backends/smartos/tasks/machine_shutdown.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_update.js b/lib/backends/smartos/tasks/machine_update.js
similarity index 97%
rename from lib/tasks/machine_update.js
rename to lib/backends/smartos/tasks/machine_update.js
index 27c5ce5..470c6a0 100644
--- a/lib/tasks/machine_update.js
+++ b/lib/backends/smartos/tasks/machine_update.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var execFile = require('child_process').execFile;
 var common = require('../common');
diff --git a/lib/tasks/machine_update_nics.js b/lib/backends/smartos/tasks/machine_update_nics.js
similarity index 99%
rename from lib/tasks/machine_update_nics.js
rename to lib/backends/smartos/tasks/machine_update_nics.js
index 71d0d18..492f8d1 100644
--- a/lib/tasks/machine_update_nics.js
+++ b/lib/backends/smartos/tasks/machine_update_nics.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var vmadm = require('vmadm');
 var async = require('async');
 var common = require('../common');
diff --git a/lib/tasks/nop.js b/lib/backends/smartos/tasks/nop.js
similarity index 87%
rename from lib/tasks/nop.js
rename to lib/backends/smartos/tasks/nop.js
index 380e460..6acae68 100644
--- a/lib/tasks/nop.js
+++ b/lib/backends/smartos/tasks/nop.js
@@ -5,12 +5,11 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 
 var Sleep = module.exports = function (req) {
     Task.call(this);
diff --git a/lib/tasks/refresh_agents.js b/lib/backends/smartos/tasks/refresh_agents.js
similarity index 92%
rename from lib/tasks/refresh_agents.js
rename to lib/backends/smartos/tasks/refresh_agents.js
index 3ac202e..fe24eb7 100644
--- a/lib/tasks/refresh_agents.js
+++ b/lib/backends/smartos/tasks/refresh_agents.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -13,7 +13,7 @@
  * into CNAPI.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var refreshAgents = require('./shared').refreshAgents;
 
 function RefreshAgentsTask(req) {
diff --git a/lib/tasks/server_overprovision_ratio.js b/lib/backends/smartos/tasks/server_overprovision_ratio.js
similarity index 91%
rename from lib/tasks/server_overprovision_ratio.js
rename to lib/backends/smartos/tasks/server_overprovision_ratio.js
index 25bb344..cab3bc2 100644
--- a/lib/tasks/server_overprovision_ratio.js
+++ b/lib/backends/smartos/tasks/server_overprovision_ratio.js
@@ -5,16 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
 var common = require('../common');
 var fs = require('fs');
 var async = require('async');
 var sysinfo = require('../smartdc-config').sysinfo;
-var libcommon = require('../common');
 
 function ServerOverprovisionRatioTask(req) {
     Task.call(this);
@@ -49,7 +48,7 @@ function start(callback) {
                 configPath = '/opt/smartdc/config/node.config';
             }
 
-            libcommon.modifyConfig(
+            common.modifyConfig(
                 configPath, 'overprovision_ratio', value, cb);
         }
     ],
diff --git a/lib/tasks/server_update_nics.js b/lib/backends/smartos/tasks/server_update_nics.js
similarity index 97%
rename from lib/tasks/server_update_nics.js
rename to lib/backends/smartos/tasks/server_update_nics.js
index ee3941f..fa83482 100644
--- a/lib/tasks/server_update_nics.js
+++ b/lib/backends/smartos/tasks/server_update_nics.js
@@ -5,12 +5,12 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var async = require('async');
 var execFile = require('child_process').execFile;
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 
 var NICTAGADM = '/usr/bin/nictagadm';
 
diff --git a/lib/tasks/shared.js b/lib/backends/smartos/tasks/shared.js
similarity index 100%
rename from lib/tasks/shared.js
rename to lib/backends/smartos/tasks/shared.js
diff --git a/lib/tasks/shutdown_cn_agent_update.js b/lib/backends/smartos/tasks/shutdown_cn_agent_update.js
similarity index 91%
rename from lib/tasks/shutdown_cn_agent_update.js
rename to lib/backends/smartos/tasks/shutdown_cn_agent_update.js
index bc8dc48..b69cc91 100644
--- a/lib/tasks/shutdown_cn_agent_update.js
+++ b/lib/backends/smartos/tasks/shutdown_cn_agent_update.js
@@ -5,12 +5,11 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 
 var ShutdownCnAgentUpdate = module.exports = function (req) {
     Task.call(this);
diff --git a/lib/tasks/sleep.js b/lib/backends/smartos/tasks/sleep.js
similarity index 84%
rename from lib/tasks/sleep.js
rename to lib/backends/smartos/tasks/sleep.js
index b5c884f..208cc83 100644
--- a/lib/tasks/sleep.js
+++ b/lib/backends/smartos/tasks/sleep.js
@@ -5,12 +5,11 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 
 var Sleep = module.exports = function (req) {
     Task.call(this);
diff --git a/lib/tasks/test_subtask.js b/lib/backends/smartos/tasks/test_subtask.js
similarity index 88%
rename from lib/tasks/test_subtask.js
rename to lib/backends/smartos/tasks/test_subtask.js
index 99f00eb..bd6a4f5 100644
--- a/lib/tasks/test_subtask.js
+++ b/lib/backends/smartos/tasks/test_subtask.js
@@ -5,12 +5,11 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('task_agent/task');
+var Task = require('../../../task_agent/task');
 var execFile = require('child_process').execFile;
-var common = require('../common');
 
 var Sleep = module.exports = function (req) {
     Task.call(this);
diff --git a/lib/tasks/zfs_clone_dataset.js b/lib/backends/smartos/tasks/zfs_clone_dataset.js
similarity index 90%
rename from lib/tasks/zfs_clone_dataset.js
rename to lib/backends/smartos/tasks/zfs_clone_dataset.js
index 328066a..ac982f9 100644
--- a/lib/tasks/zfs_clone_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_clone_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSCloneDatasetTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_create_dataset.js b/lib/backends/smartos/tasks/zfs_create_dataset.js
similarity index 90%
rename from lib/tasks/zfs_create_dataset.js
rename to lib/backends/smartos/tasks/zfs_create_dataset.js
index 1950f51..f39630a 100644
--- a/lib/tasks/zfs_create_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_create_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSCreateDatasetTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_destroy_dataset.js b/lib/backends/smartos/tasks/zfs_destroy_dataset.js
similarity index 90%
rename from lib/tasks/zfs_destroy_dataset.js
rename to lib/backends/smartos/tasks/zfs_destroy_dataset.js
index f26fb97..0755bff 100644
--- a/lib/tasks/zfs_destroy_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_destroy_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSDestroyDatasetTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_get_properties.js b/lib/backends/smartos/tasks/zfs_get_properties.js
similarity index 91%
rename from lib/tasks/zfs_get_properties.js
rename to lib/backends/smartos/tasks/zfs_get_properties.js
index 31e91c7..7086c99 100644
--- a/lib/tasks/zfs_get_properties.js
+++ b/lib/backends/smartos/tasks/zfs_get_properties.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSGetPropsTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_list_datasets.js b/lib/backends/smartos/tasks/zfs_list_datasets.js
similarity index 93%
rename from lib/tasks/zfs_list_datasets.js
rename to lib/backends/smartos/tasks/zfs_list_datasets.js
index 8e03e78..c3ea75c 100644
--- a/lib/tasks/zfs_list_datasets.js
+++ b/lib/backends/smartos/tasks/zfs_list_datasets.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSListDatasetsTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_list_pools.js b/lib/backends/smartos/tasks/zfs_list_pools.js
similarity index 93%
rename from lib/tasks/zfs_list_pools.js
rename to lib/backends/smartos/tasks/zfs_list_pools.js
index 8f53e6d..be8b94f 100644
--- a/lib/tasks/zfs_list_pools.js
+++ b/lib/backends/smartos/tasks/zfs_list_pools.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zpool = require('zfs').zpool;
 
 var ZFSListPoolsTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_list_snapshots.js b/lib/backends/smartos/tasks/zfs_list_snapshots.js
similarity index 93%
rename from lib/tasks/zfs_list_snapshots.js
rename to lib/backends/smartos/tasks/zfs_list_snapshots.js
index 71fe825..798636e 100644
--- a/lib/tasks/zfs_list_snapshots.js
+++ b/lib/backends/smartos/tasks/zfs_list_snapshots.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 function ZFSListSnapshotsTask(req) {
diff --git a/lib/tasks/zfs_rename_dataset.js b/lib/backends/smartos/tasks/zfs_rename_dataset.js
similarity index 90%
rename from lib/tasks/zfs_rename_dataset.js
rename to lib/backends/smartos/tasks/zfs_rename_dataset.js
index eb98ae4..6f8b080 100644
--- a/lib/tasks/zfs_rename_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_rename_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSRenameDatasetTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_rollback_dataset.js b/lib/backends/smartos/tasks/zfs_rollback_dataset.js
similarity index 90%
rename from lib/tasks/zfs_rollback_dataset.js
rename to lib/backends/smartos/tasks/zfs_rollback_dataset.js
index 3178c17..5cb4f5c 100644
--- a/lib/tasks/zfs_rollback_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_rollback_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSRollbackDatasetTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_set_properties.js b/lib/backends/smartos/tasks/zfs_set_properties.js
similarity index 90%
rename from lib/tasks/zfs_set_properties.js
rename to lib/backends/smartos/tasks/zfs_set_properties.js
index fa7b82a..b6162fd 100644
--- a/lib/tasks/zfs_set_properties.js
+++ b/lib/backends/smartos/tasks/zfs_set_properties.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSSetPropsTask = module.exports = function (req) {
diff --git a/lib/tasks/zfs_snapshot_dataset.js b/lib/backends/smartos/tasks/zfs_snapshot_dataset.js
similarity index 90%
rename from lib/tasks/zfs_snapshot_dataset.js
rename to lib/backends/smartos/tasks/zfs_snapshot_dataset.js
index 058864b..1cc2c18 100644
--- a/lib/tasks/zfs_snapshot_dataset.js
+++ b/lib/backends/smartos/tasks/zfs_snapshot_dataset.js
@@ -5,10 +5,10 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var Task = require('../task_agent/task');
+var Task = require('../../../task_agent/task');
 var zfs = require('zfs').zfs;
 
 var ZFSSnapshotDatasetTask = module.exports = function (req) {
diff --git a/lib/heartbeater.js b/lib/heartbeater.js
index 118a3b1..fc24431 100644
--- a/lib/heartbeater.js
+++ b/lib/heartbeater.js
@@ -5,92 +5,35 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
-var fs = require('fs');
-var async = require('async');
-var zfs = require('zfs').zfs;
-var zpool = require('zfs').zpool;
-var kstat = require('kstat');
 var cp = require('child_process');
-var vmadm = require('vmadm');
-var imgadm = require('./imgadm');
-var exec = cp.exec;
-var spawn = cp.spawn;
-var execFile = cp.execFile;
-var Zone = require('tracker/lib/zone');
-var sprintf = require('sprintf').sprintf;
-var EventEmitter = require('events').EventEmitter;
 var events = require('events');
+var EventEmitter = require('events').EventEmitter;
 var util = require('util');
-var assert = require('assert');
-
-
-/**
- * `getMemoryInfo` was lifted from
- * https://github.com/joyent/smartos-live/blob/master/src/node_modules/system.js
- */
-var systempages_reader = null;
-var arcstats_reader = null;
-
-/*
- * This function grabs some basic memory usage information via kstat.  It should
- * be called like:
- *
- *     getMemoryInfo(function (err, data) {
- *         // data will contain several memory properties if err is not set
- *     });
- *
- * values in the data object are in bytes for maximum accuracy.
- *
- */
-function getMemoryInfo(callback)
-{
-    var arcstats_val, systempages_val;
-
-    // Setup readers if we've not already done so.
-    if (!arcstats_reader) {
-        arcstats_reader = new kstat.Reader({ module: 'zfs',
-            'class': 'misc', instance: 0, name: 'arcstats' });
-    }
-    if (!systempages_reader) {
-        systempages_reader = new kstat.Reader({ module: 'unix',
-            'class': 'pages', instance: 0, name: 'system_pages' });
-    }
-
-    // Get the latest values from kstat
-    systempages_val = systempages_reader.read();
-    arcstats_val = arcstats_reader.read();
-
-    if (!systempages_val) {
-        return callback(new Error('No value for system_pages.'));
-    }
-    if (!arcstats_val) {
-        return callback(new Error('No value for arcstats.'));
-    }
-    if (!systempages_val.hasOwnProperty(0) ||
-        !systempages_val[0].hasOwnProperty('data') ||
-        !systempages_val[0].data.hasOwnProperty('availrmem') ||
-        !systempages_val[0].data.hasOwnProperty('pagestotal')) {
-
-        return callback(new Error('Invalid data returned for system_pages:'
-            + JSON.stringify(systempages_val)));
-    }
-    if (!arcstats_val.hasOwnProperty(0) ||
-        !arcstats_val[0].hasOwnProperty('data') ||
-        !arcstats_val[0].data.hasOwnProperty('size')) {
-
-        return callback(new Error('Invalid data returned for arcstats:'
-            + JSON.stringify(arcstats_val)));
-    }
 
-    return callback(null, {
-        'availrmem_bytes': (systempages_val[0].data.availrmem * 4096),
-        'arcsize_bytes': arcstats_val[0].data.size,
-        'total_bytes': (systempages_val[0].data.pagestotal * 4096)
-    });
-}
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+
+// These are the fields we'll load for VMs
+var VM_LOOKUP_FIELDS = [
+    'brand',
+    'cpu_cap',
+    'disks',
+    'do_not_inventory',
+    'last_modified',
+    'max_physical_memory',
+    'owner_uuid',
+    'quota',
+    'state',
+    'uuid',
+    'zone_state',
+    'zoneid',
+    'zonename',
+    'zonepath'
+];
 
 
 function StatusReporter(opts) {
@@ -99,10 +42,14 @@ function StatusReporter(opts) {
     this.status_interval = 500;  // milliseconds frequency of sending msgs
     this.heartbeat_interval = 5000;  // milliseconds frequency of sending msgs
 
+    assert.object(opts, 'opts');
+    assert.object(opts.backend, 'opts.backend');
+
     this.throttle = false;
 
-    // The boot time of the global zone
-    this.boot_time = null;
+    // The backend provides the functions to get system-specific data for
+    // heartbeats.
+    this.backend = opts.backend;
 
     // This specifies whether the cache is dirty.  This could be because a zone
     // has changed state, or we've hit max_interval.  Either way, we'll reload
@@ -122,10 +69,7 @@ function StatusReporter(opts) {
     this.pingInterval = null;
     this.maxInterval = null;
 
-    // this watcher watches whether /etc/zones has changed
-    this.cfg_watcher = null;
-
-    // this is the subprocess that watches for zone changes
+    // this is the handle to the backend's watcher if it has one
     this.watcher = null;
 
     this.updateSampleAttempts = 0;
@@ -142,6 +86,7 @@ util.inherits(StatusReporter, EventEmitter);
 StatusReporter.prototype.updateSample = function () {
     var self = this;
     var newSample = {};
+    var vms;
 
     if (self.samplerLock) {
         self.updateSampleAttempts++;
@@ -163,489 +108,115 @@ StatusReporter.prototype.updateSample = function () {
 
     // set this now in case another update comes in while we're running.
     self.isDirty = false;
-    var vms;
 
-    async.series([
-        function (cb) { // zone info
-            var lookup_fields = [
-                'brand',
-                'cpu_cap',
-                'do_not_inventory',
-                'last_modified',
-                'max_physical_memory',
-                'owner_uuid',
-                'quota',
-                'state',
-                'uuid',
-                'zone_state',
-                'zoneid',
-                'zonename',
-                'zonepath'
-            ];
-
-            vmadm.lookup(
-                {}, {fields: lookup_fields, log: self.log},
-                function (err, vmobjs)
-            {
-                var vmobj;
-                var hbVm;
-                var newStatus;
-
-
-                if (err) {
-                    self.log.error(
-                        'unable update VM list: ' + err.message);
-                    self.markDirty();
-                    return cb(new Error('unable to update VM list.'));
-                } else {
+    vasync.pipeline({
+        funcs: [
+            function _getVmInfo(_, cb) {
+                self.backend.loadVms({
+                    fields: VM_LOOKUP_FIELDS,
+                    log: self.log
+                }, function onLoadVms(err, vmobjs) {
+                    var vmobj;
+
+                    assert.arrayOfObject(vmobjs, 'vmobjs');
+
+                    if (err) {
+                        self.log.error({err: err}, 'unable update VM list');
+                        cb(new Error('unable to update VM list.'));
+                        return;
+                    }
+
                     vms = {};
                     newSample.vms = {};
 
                     for (vmobj in vmobjs) {
                         vmobj = vmobjs[vmobj];
                         vms[vmobj.uuid] = vmobj;
+
                         if (!vmobj.do_not_inventory) {
-                            hbVm = {
-                                uuid: vmobj.uuid,
+                            newSample.vms[vmobj.uuid] = {
+                                brand: vmobj.brand,
+                                cpu_cap: vmobj.cpu_cap,
+                                last_modified: vmobj.last_modified,
+                                max_physical_memory: vmobj.max_physical_memory,
                                 owner_uuid: vmobj.owner_uuid,
                                 quota: vmobj.quota,
-                                max_physical_memory: vmobj.max_physical_memory,
-                                zone_state: vmobj.zone_state,
                                 state: vmobj.state,
-                                brand: vmobj.brand,
-                                cpu_cap: vmobj.cpu_cap
+                                uuid: vmobj.uuid,
+                                zone_state: vmobj.zone_state
                             };
-                            newStatus = [
-                                vmobj.zoneid ? vmobj.zoneid : '-',
-                                vmobj.zonename,
-                                vmobj.zone_state,
-                                vmobj.zonepath,
-                                vmobj.uuid,
-                                vmobj.brand,
-                                'excl',
-                                vmobj.zoneid ? vmobj.zoneid : '-'
-                            ];
-                            if (vmobj.hasOwnProperty('last_modified')) {
-                                // this is only conditional until all platforms
-                                // we might run this heartbeater on support the
-                                // last_modified property.
-                                hbVm.last_modified = vmobj.last_modified;
-                                newStatus.push(vmobj.last_modified);
-                            }
-                            newSample.vms[vmobj.uuid] = hbVm;
                         }
                     }
 
-                    return cb();
-                }
-            });
-        },
-        function (cb) { // zpool info
-            zpool.list(function (err, fields, lines) {
-                if (err) {
-                    self.log.error('zpool list error: ' + err);
-                    return cb(err);
-                }
-
-                newSample.zpoolStatus = {};
-
-                var getSpaceStats = function (line, callback) {
-                    var pool = line[0];
-
-                    newSample.zpoolStatus[pool] = {};
-
-                    zfs.get(pool, [ 'used', 'available' ], true,
-                        function (zfsError, props) {
-                            if (zfsError) {
-                                self.log.error('zfs get error: ' + zfsError);
-                                return callback(zfsError);
-                            }
-
-                            if (!props[pool]) {
-                                self.log.error({ props: props },
-                                    'XXX props returned degenerate values');
-                            }
-
-                            newSample.zpoolStatus[pool].bytes_available
-                                = parseInt(props[pool].available, 10);
-                            newSample.zpoolStatus[pool].bytes_used
-                                = parseInt(props[pool].used, 10);
-
-                            return callback();
-                        });
-                };
-
-                return (
-                    async.each(lines, getSpaceStats,
-                        function (forEachError) {
-                        if (forEachError) {
-                            self.log.error('zfs get error: ' + forEachError);
-                            return cb(forEachError);
-                        }
-
-                        return cb();
-                    }));
-            });
-        },
-        function (cb) { // meminfo
-            getMemoryInfo(function (err, meminfo) {
-                if (!err && meminfo) {
-                    newSample.meminfo = meminfo;
-                    return cb();
-                } else {
-                    self.log.warn('unable to get memory info:'
-                        + JSON.stringify(err));
-                    return cb(err);
-                }
-            });
-        },
-        function (cb) { // diskinfo
-            self.gatherDiskUsage(vms, function (err, diskinfo) {
-                if (!err && diskinfo) {
-                    newSample.diskinfo = diskinfo;
-                    return cb();
-                } else {
-                    self.log.warn('unable to get disk info:'
-                        + JSON.stringify(err));
-                    return cb(err);
-                }
-            });
-        },
-        function (cb) { // timestamp
-            newSample.boot_time = self.boot_time;
-            newSample.timestamp = new Date().toISOString();
-            cb();
-        }
-        ], function (err) {
-            if (err) {
-                self.log.error(err.message);
-            } else {
-                self.sample = newSample;
-                self.readySample = true;
-            }
-
-            self.emit('status', self.sample);
-            self.samplerLock = false;
-        });
-};
-
-
-StatusReporter.prototype.markDirty = function () {
-    var self = this;
-    self.isDirty = true;
-};
-
-
-/**
- * 1) the sum of the disk used by the kvm VMs' zvols' volsizes
- * 2) the sum of the maximum capacity of VMs' zvols
- * 3) the sum of the quotas for kvm VMs (this space has a different usage
- *     pattern from zone's quotas)
- * 4) the sum of the quotas for non-kvm VMs
- * 5) the sum of the cores quotas for all VMs of all brands
- * 6) the sum of the disk used by images installed on the CN
- * 7) the total size of the pool
- * 8) the 'system space' which would be the total size of the pool minus
- *    the sum of the other numbers here and include things like the files
- *    in /opt, kernel dumps, and anything else written that's not part of
- *    the above.
- */
-
-StatusReporter.prototype.gatherDiskUsage = function (vms, callback) {
-    var self = this;
-    var usage = {
-        kvm_zvol_used_bytes: 0,
-        kvm_zvol_volsize_bytes: 0,
-        kvm_quota_bytes: 0,
-        kvm_quota_used_bytes: 0,
-        zone_quota_bytes: 0,
-        zone_quota_used_bytes: 0,
-        cores_quota_bytes: 0,
-        cores_quota_used_bytes: 0,
-        installed_images_used_bytes: 0,
-        pool_size_bytes: 0,
-        pool_alloc_bytes: 0,
-        system_used_bytes: 0
-    };
-
-    var datasets = {};
-
-    function toInt(val) {
-        var a = parseInt(val, 10);
-        return (isNaN(a) ? 0 : a);
-    }
-
-    async.waterfall([
-        function (cb) {
-            zfs.get(
-                null, // Look up properties for *all* datasets
-                [ 'name', 'used', 'avail', 'refer', 'type', 'mountpoint',
-                'quota', 'origin', 'volsize'],
-                true, // Parseable
-                function (geterr, props) {
-                    if (geterr) {
-                        cb(geterr);
-                        return;
-                    }
-
-                    datasets = props;
                     cb();
-            });
-        },
-        function (cb) {
-            var vm;
-
-            async.each(Object.keys(vms), function (uuid, fecb) {
-                Zone.get(uuid, function (error, zone) {
-                    if (error) {
-                        self.log.error(
-                            'Error looking up zone ' + uuid + ' by uuid '
-                            + error.message + '\n'
-                            + error.stack);
-                        fecb();
+                });
+            }, function _getZpoolInfo(_, cb) {
+                self.backend.getZpoolInfo(function onZpoolInfo(err, zpoolInfo) {
+                    if (err) {
+                        self.log.error({err: err}, 'unable to get zpool info');
+                        cb(err);
                         return;
                     }
-
-                    vm = vms[uuid];
-
-                    // #1,2
-                    if (vm.brand === 'kvm') {
-                        var devices = zone.devices;
-                        var device;
-
-                        for (var deviceIdx in devices) {
-                            device = devices[deviceIdx];
-
-                            var match = device['match'];
-                            var rdskpath = '/dev/zvol/rdsk/';
-                            var rdskpathlen = rdskpath.length;
-                            var ds = match.slice(rdskpathlen);
-
-                            if (datasets.hasOwnProperty(ds)) {
-                                usage.kvm_zvol_used_bytes +=
-                                    toInt(datasets[ds].used);
-                                usage.kvm_zvol_volsize_bytes +=
-                                    toInt(datasets[ds].volsize);
-                            }
-                        }
-
-                        // #3
-                        if (datasets.hasOwnProperty(vm.zonepath.slice(1))) {
-                            usage.kvm_quota_bytes += toInt(
-                                datasets[vm.zonepath.slice(1)].quota);
-                            usage.kvm_quota_used_bytes += toInt(
-                                datasets[vm.zonepath.slice(1)].used);
-                        }
+                    newSample.zpoolStatus = zpoolInfo;
+                    cb();
+                });
+            },
+            function _getMemoryInfo(_, cb) {
+                self.backend.getMemoryInfo(function onMemoryInfo(err, meminfo) {
+                    if (err) {
+                        self.log.warn({err: err}, 'unable to get memory info');
                     } else {
-                        // #4
-                        if (datasets.hasOwnProperty(vm.zonepath.slice(1))) {
-                            usage.zone_quota_bytes += toInt(
-                                datasets[vm.zonepath.slice(1)].quota);
-                            usage.zone_quota_used_bytes += toInt(
-                                datasets[vm.zonepath.slice(1)].used);
-                        }
-                    }
-
-                    // #5
-                    var coreds = datasets[vm.zonepath.slice(1) + '/cores'] ||
-                        datasets['zones/cores/' + vm.uuid];
-                    if (coreds) {
-                        usage.cores_quota_bytes += toInt(coreds.quota);
-                        usage.cores_quota_used_bytes += toInt(coreds.used);
+                        newSample.meminfo = meminfo;
                     }
-
-                    fecb();
+                    cb(err);
                 });
             },
-            function (error) {
-                cb(error);
-            });
-        },
-        function (cb) {
-            // #6
-            // Sum installed images 'used' values
-
-            async.forEachSeries(
-                Object.keys(datasets),
-                onDataset,
-                onDatasetsDone);
-
-            function onDatasetsDone(err) {
-                cb(err);
-            }
-
-            function onDataset(dataset, _next) {
-                // Guard against us blowing up the stack (AGENT-1072)
-                var next = function (err) {
-                    setImmediate(function (_err) {
-                        _next(_err);
-                    }, err);
-                };
-
-                // Eliminate snapshots and sub-filesystems
-                var UUID_RE = '([0-9a-f]{8}-[0-9a-f]{4}-' +
-                              '[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-' +
-                              '[0-9a-f]{12})';
-
-                var datasetReStr = '^([^/]+)/' + UUID_RE + '$';
-                var match = dataset.match(new RegExp(datasetReStr));
-                if (!match) {
-                    next();
-                    return;
-                }
-
-                // Check if UUID corresponds to that of an installed image
-                var datasetUuid = match[2];
-
-                self.log.trace(
-                    { uuid: datasetUuid },
-                    'quickGetImage');
-                imgadm.quickGetImage({
-                    uuid: datasetUuid,
-                    log: self.log
-                }, function (err, manifest) {
-                    if (err && err.code === 'ImageNotInstalled') {
-                        next();
-                        return;
-                    } else if (err) {
-                        self.log.error({
-                            uuid: datasetUuid, err: err },
-                            'quickGetImage');
-                        next();
-                        return;
-                    }
-
-                    /*
-                     * If we used "imgadm get" we might get a dummy result for
-                     * a random UUID-named dataset. We can't easily tell whether
-                     * it's really an image (in the Bad Old Days no metadata was
-                     * really required), so if it has nothing but a uuid in its
-                     * manifest, skip it.
-                     *
-                     * It's better to miss one or two images here (they'll still
-                     * get counted against provisionable space by DAPI, just as
-                     * system_used instead) than to double-count real VMs
-                     * (which could make this box un-provisionable).
-                     */
-                    var keys = Object.keys(manifest);
-                    if (keys.length === 1 && keys[0] === 'uuid') {
-                        next();
-                        return;
+            function _getDiskUsage(_, cb) {
+                self.backend.getDiskUsage(vms,
+                    function onDiskUsage(err, diskusage) {
+                        if (err) {
+                            self.log.warn({err: err},
+                                'unable to get disk usage');
+                        } else {
+                            newSample.diskinfo = diskusage;
+                        }
+                        cb(err);
+                    });
+            },
+            function _getBootTime(_, cb) {
+                self.backend.getBootTime(function onBootTime(err, boot_time) {
+                    if (err) {
+                        self.log.warn({err: err},
+                            'unable to get system boot time');
+                    } else {
+                        newSample.boot_time = boot_time;
                     }
-
-                    // Tally bytes used
-                    usage.installed_images_used_bytes
-                        += toInt(datasets[dataset].used);
-
-                    next();
+                    cb(err);
                 });
+            }, function _getTimestamp(_, cb) {
+                newSample.timestamp = new Date().toISOString();
+                cb();
             }
-        },
-        function (cb) {
-            // #7
-            var poolds = datasets['zones'];
-            usage.pool_alloc_bytes = toInt(poolds.used);
-            usage.pool_size_bytes = toInt(poolds.used) +
-                toInt(poolds.available);
-
-            // #8
-            // All separated usages should be subtracted from the allocated
-            // here. Anything not specifically listed is treated as 'system
-            // space'.
-            usage.system_used_bytes = usage.pool_alloc_bytes - (
-                usage.kvm_zvol_used_bytes +
-                usage.kvm_quota_used_bytes +
-                usage.zone_quota_used_bytes +
-                usage.cores_quota_used_bytes +
-                usage.installed_images_used_bytes);
-
-            cb();
-        }
-    ],
-    function (error) {
-        if (error) {
-            self.log.warn(error.message);
-        }
-        callback(null, usage);
-    });
-};
-
-
-/**
- * Run a command via `spawn` and callback with the results a la `execFile`.
- *
- * @param args {Object}
- *      - argv {Array} Required.
- *      - log {Bunyan Logger} Required. Use to log details at trace level.
- *      - opts {Object} Optional `child_process.spawn` options.
- * @param cb {Function} `function (err, stdout, stderr)` where `err` here is
- *      an `errors.InternalError` wrapper around the child_process error.
- */
-function spawnRun(args, cb) {
-    assert.ok(args, 'args');
-    assert.ok(args.argv, 'args.argv');
-    assert.ok(args.argv.length > 0, 'argv has at least one arg');
-    assert.ok(args.log, 'args.log');
-    assert.ok(cb);
-
-    args.log.trace({exec: true, argv: args.argv}, 'exec start');
-    var child = spawn(args.argv[0], args.argv.slice(1), args.opts);
-
-    var stdout = [];
-    var stderr = [];
-    child.stdout.setEncoding('utf8');
-    child.stdout.on('data', function (chunk) { stdout.push(chunk); });
-    child.stderr.setEncoding('utf8');
-    child.stderr.on('data', function (chunk) { stderr.push(chunk); });
-
-    child.on('close', function spawnClose(code, signal) {
-        stdout = stdout.join('');
-        stderr = stderr.join('');
-        args.log.trace({exec: true, argv: args.argv, code: code,
-            signal: signal, stdout: stdout, stderr: stderr}, 'exec done');
-        if (code || signal) {
-            var msg = util.format(
-                'spawn error:\n'
-                + '\targv: %j\n'
-                + '\texit code: %s\n'
-                + '\texit signal: %s\n'
-                + '\tstdout:\n%s\n'
-                + '\tstderr:\n%s',
-                args.argv, code, signal, stdout.trim(), stderr.trim());
-            cb(new Error(msg), stdout, stderr);
+        ]
+    }, function onPipelineComplete(err) {
+        self.samplerLock = false;
+
+        if (err) {
+            // mark as dirty so that we'll try again
+            self.markDirty();
+            self.log.error({err: err}, 'failed to update sample');
         } else {
-            cb(null, stdout, stderr);
+            self.sample = newSample;
+            self.readySample = true;
+            self.emit('status', self.sample);
         }
     });
-}
-
-
-StatusReporter.prototype.startZoneWatcher = function () {
-    var self = this;
-    this.watcher = spawn('/usr/vm/sbin/zoneevent', []);
-    self.log.info('zoneevent running with pid ' + self.watcher.pid);
-    this.watcher.stdout.on('data', function (data) {
-        // If we cared about the data here, we'd parse it (JSON) but we just
-        // care that *something* changed, not what it was so we always just
-        // mark our sample dirty when we see any changes.  It's normal to
-        // see multiple updates ('C's) for one zone action.
-//         process.stdout.write('C');
-        self.markDirty();
-    });
-    this.watcher.stdin.end();
-
-    this.watcher.on('exit', function (code) {
-        self.log.warn('zoneevent watcher exited.');
-        self.watcher = null;
-    });
 };
 
-StatusReporter.prototype.startZoneConfigWatcher = function () {
+
+StatusReporter.prototype.markDirty = function () {
     var self = this;
-    self.cfg_watcher = fs.watch('/etc/zones', function (evt, file) {
-        self.markDirty();
-    });
-    self.log.info('start fs.watch() for /etc/zones');
+    self.isDirty = true;
 };
 
 
@@ -668,44 +239,43 @@ StatusReporter.prototype.checkEmitStatus = function () {
 
 StatusReporter.prototype.emitHeartbeat = function () {
     var self = this;
+
     self.emit('heartbeat');
 };
 
 
-StatusReporter.prototype.getBootTime = function (callback) {
+StatusReporter.prototype.startWatchers = function startWatchers() {
     var self = this;
 
-    execFile(
-        '/usr/bin/kstat',
-        [ '-p', '-m', 'unix', '-n', 'system_misc', '-s', 'boot_time'],
-        function (error, stdout, stderr) {
-            if (error) {
-                throw error;
-            }
-            self.boot_time = new Date(
-                parseInt(stdout.toString().split(/\s+/)[1], 10) * 1000)
-                    .toISOString();
-            callback();
-        });
+    self.watchers = self.backend.startWatchers({
+        dirtyFn: self.markDirty.bind(self),
+        log: self.log
+    });
+};
+
+
+StatusReporter.prototype.stopWatchers = function stopWatchers() {
+    var self = this;
+
+    if (self.watchers) {
+        self.backend.stopWatchers(self.watchers);
+    }
 };
 
 
 StatusReporter.prototype.start = function () {
     var self = this;
 
-    self.startZoneWatcher();
-    self.startZoneConfigWatcher();
-
-    self.getBootTime(function () {
-        // every max_interval we force an update but we send the state to the
-        // best of our knowledge every status_interval ms.
-        self.maxInterval = setInterval(
-            self.markDirty.bind(self), self.max_interval);
-        self.pingInterval = setInterval(
-            self.checkEmitStatus.bind(self), self.status_interval);
-        self.hbInterval = setInterval(
-            self.emitHeartbeat.bind(self), self.heartbeat_interval);
-    });
+    self.startWatchers();
+
+    // every max_interval we force an update but we send the state to the
+    // best of our knowledge every status_interval ms.
+    self.maxInterval = setInterval(
+        self.markDirty.bind(self), self.max_interval);
+    self.pingInterval = setInterval(
+        self.checkEmitStatus.bind(self), self.status_interval);
+    self.hbInterval = setInterval(
+        self.emitHeartbeat.bind(self), self.heartbeat_interval);
 };
 
 
diff --git a/lib/task_agent/common.js b/lib/task_agent/common.js
index c2d652a..a8f5dab 100644
--- a/lib/task_agent/common.js
+++ b/lib/task_agent/common.js
@@ -8,70 +8,6 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
-var smartdc_config = require('../smartdc-config');
-
-/**
- * Use /usr/bin/sysinfo and /lib/sdc/config.sh to determine AMQP
- * credentials or fall back to ENV variables.
- *
- * This method should be monkey-patched into an object's prototype.
- */
-
-function configureAMQP(callback) {
-    var self = this;
-
-    self.config.amqp = self.config.amqp || {};
-
-    if (!self.config.use_system_config ||
-            ['0', 'false'].indexOf(
-                process.env['AMQP_USE_SYSTEM_CONFIG']) !== -1) {
-
-        self.uuid = self.config.uuid || process.env.SERVER_UUID;
-        setAMQPConfig(
-                self.config.amqp.login || process.env['AMQP_LOGIN'],
-                self.config.amqp.password || process.env['AMQP_PASSWORD'],
-                self.config.amqp.host || process.env['AMQP_HOST'],
-                self.config.amqp.port || process.env['AMQP_PORT'],
-                self.config.amqp.vhost || process.env['AMQP_VHOST']);
-        callback();
-    } else {
-        smartdc_config.sysinfo(function (error, sysinfo) {
-            self.sysinfo = sysinfo;
-
-            // Look up and set the UUID of the machine the agent will run on.
-            if (self.config.uuid || process.env['SERVER_UUID']) {
-                self.uuid = self.config.uuid || process.env['SERVER_UUID'];
-            } else {
-                self.uuid = self.sysinfo['UUID'];
-                if (!self.uuid) {
-                    throw new Error(
-                        'Could not find "UUID" in `sysinfo` output.');
-                }
-            }
-
-            smartdc_config.sdcConfig(function (configError, sdcconfig) {
-                self.sdcConfig = sdcconfig;
-                var rabbitmq = sdcconfig['rabbitmq'].split(':');
-                if (!rabbitmq) {
-                    throw new Error(
-                        'Could not find "rabbitmq" parameter from'
-                        + ' /lib/sdc/config.sh');
-                }
-                setAMQPConfig.apply(undefined, rabbitmq);
-                callback();
-            });
-        });
-    }
-
-    function setAMQPConfig(login, password, host, port, vhost) {
-        self.config.amqp.login = login || 'guest';
-        self.config.amqp.password = password || 'guest';
-        self.config.amqp.host = host || 'localhost';
-        self.config.amqp.port = port || 5672;
-        self.config.amqp.vhost = vhost || '/';
-    }
-}
-
 
 // generate random 4 byte hex strings
 function genId() {
@@ -79,13 +15,6 @@ function genId() {
 }
 
 
-function dotjoin() {
-    return Array.prototype.join.call(arguments, '.');
-}
-
-
 module.exports = {
-    dotjoin: dotjoin,
-    genId: genId,
-    configureAMQP: configureAMQP
+    genId: genId
 };
diff --git a/lib/task_agent/task.js b/lib/task_agent/task.js
index ee28488..4b9d1a5 100644
--- a/lib/task_agent/task.js
+++ b/lib/task_agent/task.js
@@ -9,12 +9,12 @@
  */
 
 var EventEmitter = require('events').EventEmitter;
-var util = require('util');
 var fs = require('fs');
 var path = require('path');
-var smartdc_config = require('../smartdc-config');
-var common = require('./common');
 var spawn = require('child_process').spawn;
+var util = require('util');
+
+var common = require('./common');
 
 function Task(request) {
     EventEmitter.call(this);
@@ -259,12 +259,9 @@ Task.setStart = function (fn) {
                 self.finish();
                 return;
             }
-            smartdc_config.sdcConfig(function (configError, config) {
-                self.sdcConfig = config;
-                self.progress(0);
-                self.event('start', {});
-                fn.apply(self, arguments);
-            });
+            self.progress(0);
+            self.event('start', {});
+            fn.apply(self, arguments);
         });
     };
 };
diff --git a/lib/task_agent/task_agent.js b/lib/task_agent/task_agent.js
index 1438d84..8b2bee6 100644
--- a/lib/task_agent/task_agent.js
+++ b/lib/task_agent/task_agent.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var util = require('util');
@@ -13,27 +13,25 @@ var format = util.format;
 var path = require('path');
 var common = require('./common');
 var TaskRunner = require('./task_runner');
-var imgadm = require('../imgadm');
 var bunyan = require('bunyan');
 var restify = require('restify');
 var os = require('os');
 var async = require('async');
 var EventEmitter = require('events').EventEmitter;
-var cp = require('child_process');
-var execFile = cp.execFile;
 var assert = require('assert-plus');
 
 var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 
 function TaskAgent(opts) {
     EventEmitter.call(this);
-    assert.string(opts.tasklogdir, 'opts.tasklogdir');
-    assert.string(opts.uuid, 'opts.uuid');
-    assert.object(opts.log, 'opts.log');
-    assert.string(opts.taskspath, 'opts.taskspath');
     assert.object(opts.agentserver, 'opts.agentserver');
+    assert.object(opts.backend, 'opts.backend');
     assert.optionalObject(opts.env, 'opts.env');
+    assert.object(opts.log, 'opts.log');
+    assert.string(opts.tasklogdir, 'opts.tasklogdir');
+    assert.string(opts.taskspath, 'opts.taskspath');
     assert.number(opts.timeoutSeconds, 'opts.timeoutSeconds');
+    assert.string(opts.uuid, 'opts.uuid');
 
     this.tasklogdir = opts.tasklogdir;
     this.taskspath = opts.taskspath;
@@ -55,10 +53,11 @@ function TaskAgent(opts) {
     this.timeoutSeconds = opts.timeoutSeconds;
 
     this.runner = new TaskRunner({
+        backend: opts.backend,
+        env: this.env,
         log: this.log,
         logdir: this.tasklogdir,
         taskspath: this.taskspath,
-        env: this.env,
         timeoutSeconds: this.timeoutSeconds
     });
 }
diff --git a/lib/task_agent/task_runner.js b/lib/task_agent/task_runner.js
index f8d6e11..e406ab5 100644
--- a/lib/task_agent/task_runner.js
+++ b/lib/task_agent/task_runner.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -14,10 +14,12 @@
  * process.
  */
 
-var util = require('util');
-var path = require('path');
-var fs = require('fs');
 var fork = require('child_process').fork;
+var fs = require('fs');
+var path = require('path');
+var util = require('util');
+
+var assert = require('assert-plus');
 var sprintf = require('sprintf').sprintf;
 var mkdirp = require('mkdirp');
 
@@ -28,12 +30,13 @@ function isString(obj) {
 
 
 function TaskRunner(options) {
-    this.taskspath = options.taskspath;
-    this.taskHistory = [];
+    this.backend = options.backend;
     this.children = {};
-    this.logdir = options.logdir;
-    this.log = options.log;
     this.env = options.env;
+    this.log = options.log;
+    this.logdir = options.logdir;
+    this.taskHistory = [];
+    this.taskspath = options.taskspath;
     this.timeoutSeconds = options.timeoutSeconds;
 
     if (!fs.existsSync(this.logdir)) {
diff --git a/lib/vmadm_client.js b/lib/vmadm_client.js
deleted file mode 100644
index b5031ad..0000000
--- a/lib/vmadm_client.js
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var net = require('net');
-var events = require('events');
-var util = require('util');
-
-var createJsonChunkParser = function (handler) {
-    return (function () {
-        var buffer = '';
-        var onData = function (data) {
-            var chunk, chunks;
-            buffer += data.toString();
-            chunks = buffer.split('\n');
-            while (chunks.length > 1) {
-                chunk = chunks.shift();
-                var msg;
-                try {
-                    msg = JSON.parse(chunk);
-                    handler(msg);
-                } catch (e) {
-                    console.log('JSON PARSER ERROR!!!!!');
-                    console.log(chunk);
-                    console.log(e.message);
-                    console.log(e.stack);
-                }
-            }
-            buffer = chunks.pop();
-        };
-
-        return onData;
-    }());
-};
-
-function encode(data) {
-    return JSON.stringify(data);
-}
-
-function Client() {
-    events.EventEmitter.call(this);
-}
-
-util.inherits(Client, events.EventEmitter);
-
-/**
- * connect
- *
- * @param {String} socket (example: /tmp/vmadmd.sock)
- * @param {Function} callback callback to execute on a successful connection
- *
- * @return {Client} client
- */
-Client.prototype.connect = function (sock, callback) {
-    var self = this;
-
-    this.connection = net.Stream();
-    this.connection.setEncoding('utf8');
-
-    if (typeof (callback) !== 'undefined') {
-        this.on('connect', callback);
-    }
-
-    function onJSON(result) {
-        self.emit('data', result);
-        if (result.id) {
-            self.emit('data-' + result.id, result);
-        }
-    }
-
-    this.connection.on('data', createJsonChunkParser(onJSON));
-
-    this.connection.on('connect', function (socket) {
-        console.log('Connected to vmadmd socket');
-        self.emit('connect', callback);
-    });
-
-    this.connection.connect(sock);
-
-    return this;
-};
-
-/**
- * Sends an action to vmadmd with the provided payload
- *
- * @param {String} action Action to call (ie: shutdown/halt/create)
- * @param {Object} payload Payload to send with the action, optional
- * @param {Function} callback executes callback(result) on response
- */
-Client.prototype.action = function (action, payload, callback) {
-    if (arguments.length === 2 && typeof (payload) === 'Function') {
-        callback = payload;
-        payload  = null;
-    }
-
-    var id = (new Date()).getTime();
-
-    var data = {
-        'id': id,
-        'action': action,
-        'payload': payload
-    };
-
-    if (callback !== undefined) {
-        this.on('data-'+id, function (response) {
-            console.log(
-                'Got response back from vmadmd action "%s": %s', action,
-            response.type);
-            return callback(response);
-        });
-    }
-
-    this.connection.write(encode(data) + '\n\n');
-};
-
-exports.Client = Client;
diff --git a/package.json b/package.json
index dcabf67..45e7d28 100644
--- a/package.json
+++ b/package.json
@@ -28,11 +28,10 @@
     "semver": "5.4.1",
     "sprintf": "0.1.5",
     "trace-event": "git+https://github.com/joyent/node-trace-event.git#9f7d00b8c3594def9ef534f68c16c215c3dba9f2",
-    "tracker": "git+https://github.com/joyent/node-tracker.git#3a139906c9eb8d8684ac54cf54cd010315856042",
     "uuid": "3.0.1",
     "vasync": "1.6.4",
     "verror": "1.9.0",
-    "vmadm": "git+https://github.com/joyent/node-vmadm.git#94e95c6b96c2c5947281a5ea3df763928a65219c",
+    "vmadm": "git+https://github.com/joyent/node-vmadm.git#bfe4d6913785cfaa0abe7e008634794942553b29",
     "zfs": "git+https://github.com/joyent/node-zfs.git#657a90d9424c45066e3e0919dfe9b34f5636e0e9"
   },
   "sdcDependencies": {
diff --git a/test/http-task.test.js b/test/http-task.test.js
index 1284a9f..df92fd0 100644
--- a/test/http-task.test.js
+++ b/test/http-task.test.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
+// This testcase is currently smartos specific.
+
 var testCase = require('nodeunit').testCase;
 var restify = require('restify');
 var Logger = require('bunyan');
-var smartdcconfig = require('../lib/smartdc-config');
+var smartdcconfig = require('../lib/backends/smartos/smartdc-config');
 
 var PROVISIONER_PORT = 5309;
 var client;
