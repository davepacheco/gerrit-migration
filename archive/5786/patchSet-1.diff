From f675d49f7279e9e83ee6b48323981f9f4d67ca87 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 13 Mar 2019 15:01:56 +0100
Subject: [PATCH] TRITON-9 affinity is racy

---
 lib/workflows/provision.js | 67 ++++++++++++++++++++++++++++++++++++--
 package.json               |  2 +-
 2 files changed, 66 insertions(+), 3 deletions(-)

diff --git a/lib/workflows/provision.js b/lib/workflows/provision.js
index c848fb0..1711b9f 100644
--- a/lib/workflows/provision.js
+++ b/lib/workflows/provision.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -23,7 +23,7 @@ var nfsVolumes = require('./nfs-volumes');
 
 var wfapiUrl;
 
-var VERSION = '8.1.2';
+var VERSION = '8.2.0';
 
 
 /*
@@ -126,6 +126,7 @@ function generatePasswords(job, cb) {
 }
 
 
+
 /*
  * Selects a server for the VM. This function will send VM, image, package and
  * NIC tag requirements to DAPI, and let it figure out which server best fits
@@ -202,6 +203,62 @@ function getAllocation(job, cb) {
 
 
 
+/*
+ * Update the server_uuid for a VM in vmapi. This function fetches a VM from
+ * vmapi, sets the server_uuid field, and posts the updated VM back to vmapi.
+ * This is required to ensure that any other concurrent allocations
+ * that may depend on other VMs being provisioned (like affinity) have that
+ * information available when it's their turn holding the dapi waitlist ticket.
+ */
+function updateVmServer(job, cb) {
+    var log = job.log;
+
+    sdcClients.VMAPI.prototype.putVm = function putVm(vm, callback) {
+        var opts = { path: '/vms/' + vm.uuid };
+
+        this.client.put(opts, vm, function putCb(err, req, res) {
+            if (err) {
+                log.error(err, 'Could not update VM %s', vm.uuid);
+                return callback(err);
+            }
+
+            log.info('VM (uuid=%s, state=%s, last_modified=%s) updated @ VMAPI',
+                vm.uuid, vm.state, vm.last_modified);
+            callback();
+        });
+    };
+
+    var vmapi = new sdcClients.VMAPI({
+        log: log,
+        url: vmapiUrl,
+        headers: { 'x-request-id': job.params['x-request-id'] }
+    });
+
+    log.info('Updating VM\'s server_uuid in vmapi');
+
+    vmapi.getVm({
+        uuid: job.params.vm_uuid
+    }, function getVmCb(err, vm) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        vm.server_uuid = job.params.server_uuid;
+
+        vmapi.putVm(vm, function putVmCb(err2) {
+            if (err2) {
+                cb(err2);
+                return;
+            }
+
+            cb(null, 'VM.server_uuid updated in vmapi');
+        });
+    });
+}
+
+
+
 /**
  * Set up the payload that will be sent to CNAPI and will be used to provision
  * the virtual machine.
@@ -520,6 +577,12 @@ var workflow = module.exports = {
         retry: 1,
         body: getAllocation,
         modules: { restify: 'restify' }
+    }, {
+        name: 'vmapi.update_vm_server_uuid',
+        timeout: 30,
+        retry: 1,
+        body: updateVmServer,
+        modules: { sdcClients: 'sdc-clients' }
     }, {
         name: 'cnapi.acquire_vm_ticket',
         timeout: 30,
diff --git a/package.json b/package.json
index b6908c9..992c2da 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.7.1",
+  "version": "9.8.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

