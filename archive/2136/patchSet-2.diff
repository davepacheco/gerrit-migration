From fd3c2cc36b8ad148f6318cceb7bf0a93ec5fb7d3 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Fri, 23 Jun 2017 00:09:42 +1200
Subject: [PATCH] PUBAPI-1405: GetConfig fails if the account doesn't yet have
 a dclocalconfig Reviewed by: Julien Gilli <julien.gilli@joyent.com>

---
 docs/index.md  |  1 +
 lib/config.js  | 16 +++++++++++++---
 lib/errors.js  | 14 ++++++++++++++
 test/common.js | 41 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 69 insertions(+), 3 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index ca12484..b5a6637 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -800,6 +800,7 @@ request:
 415      | Unsupported Media Type   | Request was encoded in a format CloudAPI does not understand
 420      | Slow Down       | You're sending too many requests too quickly
 449      | Retry With      | Invalid Version header; try with a different Api-Version string
+503      | Retry Later     | Resource is unavailable, but is expected to return
 503      | Service Unavailable      | Either there's no capacity in this datacenter, or it's in a maintenance window
 
 ### Error Responses
diff --git a/lib/config.js b/lib/config.js
index f9ef9e2..9211669 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -17,7 +17,7 @@ var jsprim = require('jsprim');
 var restify = require('restify');
 var schemas = require('joyent-schemas').cloudapi;
 var util = require('util');
-
+var errors = require('./errors');
 
 
 // --- Helpers
@@ -111,7 +111,13 @@ function updateConfig(req, res, next) {
     return req.sdc.ufds.updateDcLocalConfig(account, dc, params,
             function _afterConfUpdate(err, conf) {
         if (err) {
-            return next(translateErr(err));
+            if (err.name === 'MissingParameterError' &&
+                err.message.match('dclocalconfig')) {
+                return next(new errors.RetryLaterError(err,
+                    'Config currently unavailable; retry in 10s.'));
+            } else {
+                return next(translateErr(err));
+            }
         }
 
         res.send(translateUfdsConf(conf));
@@ -133,7 +139,11 @@ function getConfigFromUFDS(req, callback) {
     req.sdc.ufds.getDcLocalConfig(account, dc,
             function _afterConfGet(err, conf) {
         if (err) {
-            return callback(translateErr(err));
+            if (err.name !== 'ResourceNotFoundError') {
+                return callback(translateErr(err));
+            }
+
+            conf = {}; // treat an empty hash as default
         }
 
         req.log.debug({ account: account, dc: dc, config: conf },
diff --git a/lib/errors.js b/lib/errors.js
index 46e2a54..d6987c6 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -202,6 +202,19 @@ CloudApiError.prototype.statusCode = 500;
 CloudApiError.prototype.description = 'Encountered an internal error.';
 
 
+/*
+ * If an HTTP resource is currently unavailabe, but expected to become available
+ * again later, use this error class.
+ */
+function RetryLaterError() {
+    _FriendlySigRestError.apply(this, arguments);
+}
+util.inherits(RetryLaterError, _FriendlySigRestError);
+RetryLaterError.prototype.restCode = 'RetryLaterError';
+RetryLaterError.prototype.statusCode = 503;
+RetryLaterError.prototype.description = 'Resource currently unavailable';
+
+
 /*
  * Custom error class templates:
  *
@@ -313,6 +326,7 @@ module.exports = {
 
     // Custom error classes.
     CloudApiError: CloudApiError,
+    RetryLaterError: RetryLaterError,
 
     // Internal SDC API wrappers
     vmapiErrorWrap: vmapiErrorWrap
diff --git a/test/common.js b/test/common.js
index 7f5f1e9..128bf13 100644
--- a/test/common.js
+++ b/test/common.js
@@ -445,6 +445,41 @@ function waitForMahiCache(mahiclient, apath, cb) {
 }
 
 
+function waitForAccountConfigReady(client, cb) {
+    assert.object(client, 'client');
+    assert.func(cb, 'callback');
+
+    var nbTries = 0;
+    var MAX_NB_TRIES = 10;
+    var TRY_DELAY_IN_MS = 1000;
+
+    function getConfig() {
+        ++nbTries;
+        if (nbTries >= MAX_NB_TRIES) {
+            cb(new Error('max number of tries reached'));
+            return;
+        }
+
+        client.get('/my/config', function onGetConfig(err, req, res, config) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (config.default_network) {
+                cb();
+            } else {
+                setTimeout(getConfig, TRY_DELAY_IN_MS);
+            }
+
+            return;
+        });
+    }
+
+    getConfig();
+}
+
+
 // Creates a temporary user, invokes bodyCb(), destroys the user, then invokes
 // cb(). Useful for running tests in bodyCb() with a user that'll be destroyed
 // after bodyCb() completes.
@@ -595,6 +630,12 @@ function setup(opts, cb) {
         },
         function setupPackage(_, next) {
             addPackage(userClient, SDC_128_PACKAGE, next);
+        },
+        function waitUserClientConfig(_, next) {
+            waitForAccountConfigReady(userClient, next);
+        },
+        function waitOtherUserClientConfig(_, next) {
+            waitForAccountConfigReady(otherUserClient, next);
         }
     ] }, function (err) {
         if (err) {
-- 
2.21.0

