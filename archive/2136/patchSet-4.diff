From a495f5019d88a733537fc18bc46c3f612bbf755f Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Fri, 23 Jun 2017 00:09:42 +1200
Subject: [PATCH] PUBAPI-1405: GetConfig fails if the account doesn't yet have
 a dclocalconfig Reviewed by: Julien Gilli <julien.gilli@joyent.com>

---
 docs/index.md        |   1 +
 lib/config.js        |  20 ++++++--
 test/common.js       |  42 +++++++++++++++++
 test/fabrics.test.js | 106 ++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 165 insertions(+), 4 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index ca12484..00921db 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -800,6 +800,7 @@ request:
 415      | Unsupported Media Type   | Request was encoded in a format CloudAPI does not understand
 420      | Slow Down       | You're sending too many requests too quickly
 449      | Retry With      | Invalid Version header; try with a different Api-Version string
+500      | Internal Error  | An unexpected error occurred; see returned message for more details.
 503      | Service Unavailable      | Either there's no capacity in this datacenter, or it's in a maintenance window
 
 ### Error Responses
diff --git a/lib/config.js b/lib/config.js
index f9ef9e2..5614faa 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -19,7 +19,6 @@ var schemas = require('joyent-schemas').cloudapi;
 var util = require('util');
 
 
-
 // --- Helpers
 
 
@@ -111,7 +110,18 @@ function updateConfig(req, res, next) {
     return req.sdc.ufds.updateDcLocalConfig(account, dc, params,
             function _afterConfUpdate(err, conf) {
         if (err) {
-            return next(translateErr(err));
+            /*
+             * If the dclocalconfig is missing, it's most likely due to a
+             * race with napi-ufds-watcher. The watcher usually takes several
+             * seconds after the creation of a user to create dclocalconfig.
+             */
+            if (err.name === 'MissingParameterError' &&
+                err.message.match('dclocalconfig')) {
+                return next(new restify.InternalError(
+                    'Config currently unavailable.'));
+            } else {
+                return next(translateErr(err));
+            }
         }
 
         res.send(translateUfdsConf(conf));
@@ -133,7 +143,11 @@ function getConfigFromUFDS(req, callback) {
     req.sdc.ufds.getDcLocalConfig(account, dc,
             function _afterConfGet(err, conf) {
         if (err) {
-            return callback(translateErr(err));
+            if (err.name !== 'ResourceNotFoundError') {
+                return callback(translateErr(err));
+            }
+
+            conf = {}; // treat an empty object as default
         }
 
         req.log.debug({ account: account, dc: dc, config: conf },
diff --git a/test/common.js b/test/common.js
index 7f5f1e9..1f51dd3 100644
--- a/test/common.js
+++ b/test/common.js
@@ -349,6 +349,7 @@ function setupClient(version, serverUrl, user, keyId, keyPath, parentAcc, cb) {
     client.login = user;
     client.passwd = PASSWD;
     client.keyId = keyId;
+    client.datacenter = CONFIG.datacenter_name;
 
     // Create clients to all the APIs
     client.wfapi  = _wfapi();
@@ -445,6 +446,41 @@ function waitForMahiCache(mahiclient, apath, cb) {
 }
 
 
+function waitForAccountConfigReady(client, cb) {
+    assert.object(client, 'client');
+    assert.func(cb, 'callback');
+
+    var nbTries = 0;
+    var MAX_NB_TRIES = 10;
+    var TRY_DELAY_IN_MS = 1000;
+
+    function getConfig() {
+        ++nbTries;
+        if (nbTries >= MAX_NB_TRIES) {
+            cb(new Error('max number of tries reached'));
+            return;
+        }
+
+        client.get('/my/config', function onGetConfig(err, req, res, config) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (config.default_network) {
+                cb();
+            } else {
+                setTimeout(getConfig, TRY_DELAY_IN_MS);
+            }
+
+            return;
+        });
+    }
+
+    getConfig();
+}
+
+
 // Creates a temporary user, invokes bodyCb(), destroys the user, then invokes
 // cb(). Useful for running tests in bodyCb() with a user that'll be destroyed
 // after bodyCb() completes.
@@ -595,6 +631,12 @@ function setup(opts, cb) {
         },
         function setupPackage(_, next) {
             addPackage(userClient, SDC_128_PACKAGE, next);
+        },
+        function waitUserClientConfig(_, next) {
+            waitForAccountConfigReady(userClient, next);
+        },
+        function waitOtherUserClientConfig(_, next) {
+            waitForAccountConfigReady(otherUserClient, next);
         }
     ] }, function (err) {
         if (err) {
diff --git a/test/fabrics.test.js b/test/fabrics.test.js
index d31d951..901fbab 100644
--- a/test/fabrics.test.js
+++ b/test/fabrics.test.js
@@ -175,6 +175,77 @@ function checkDefaultNet(t, net) {
 }
 
 
+/**
+ * Temporarily remove dclocalconfig before invoking testFunc(). Add it back when
+ * done.
+ */
+function withoutDcLocalConfig(testFunc, cb) {
+    var accountUuid = CLIENT.account.uuid;
+    var dc = CLIENT.datacenter;
+    var ufds = CLIENT.ufds;
+    var config;
+
+    var pollGoneCount = 20;
+    var pollPresentCount = 20;
+    var pollInterval = 500; // in ms
+
+    vasync.pipeline({ funcs: [
+        function getConf(_, next) {
+            ufds.getDcLocalConfig(accountUuid, dc, function (err, _config) {
+                config = _config;
+                next(err);
+            });
+        },
+        function deleteConf(_, next) {
+            ufds.deleteDcLocalConfig(accountUuid, dc, next);
+        },
+        function pollConfGone(_, next) {
+            --pollGoneCount;
+            if (pollGoneCount === 0) {
+                next(new Error('dclocalconfig took too long to remove'));
+                return;
+            }
+
+            ufds.getDcLocalConfig(accountUuid, dc, function (err) {
+                if (err) {
+                    next(err.restCode === 'ResourceNotFound' ? null : err);
+                    return;
+                }
+
+                setTimeout(pollConfGone.bind(null, _, next), pollInterval);
+            });
+        },
+        function runTestFunc(_, next) {
+            testFunc(null, next);
+        },
+        function addConf(_, next) {
+            ufds.addDcLocalConfig(accountUuid, dc, config, next);
+        },
+        function pollConfPresent(_, next) {
+            --pollPresentCount;
+            if (pollPresentCount === 0) {
+                next(new Error('dclocalconfig took too long to return'));
+                return;
+            }
+
+            ufds.getDcLocalConfig(accountUuid, dc, function (err) {
+                if (err) {
+                    if (err.restCode === 'ResourceNotFound') {
+                        setTimeout(pollConfGone.bind(null, _, next),
+                            pollInterval);
+                    } else {
+                        next(err);
+                    }
+                    return;
+                }
+
+                next();
+            });
+        }
+    ]}, cb);
+}
+
+
 /**
  * Find a fabric network in a user's overall network list
  */
@@ -994,7 +1065,6 @@ test('default fabric', TEST_OPTS, function (tt) {
     });
 
 
-
     tt.test('confirm default network change', function (t) {
         if (!DEFAULT_NET) {
             t.fail('default vlan not found: skipping test');
@@ -1061,6 +1131,40 @@ test('default fabric', TEST_OPTS, function (tt) {
         changeDefaultNet(t, DEFAULT_NET);
     });
 
+
+    tt.test('attempt to GET/PUT a config when missing dclocalconfig',
+    function (t) {
+        if (!DEFAULT_NET) {
+            t.fail('default vlan not found: skipping test');
+            t.end();
+            return;
+        }
+
+        withoutDcLocalConfig(function (_, next) {
+            CLIENT.get('/my/config', function (err, req, res, config) {
+                t.ifError(err, 'GET Error');
+                t.equal(res.statusCode, 200, 'GET status');
+
+                t.deepEqual(config, {});
+
+                CLIENT.put('/my/config', {
+                    default_network: DEFAULT_NET.id
+                }, function (err2, req2, res2, body) {
+                    t.ok(err2, 'PUT Error expected');
+                    t.equal(res2.statusCode, 500, 'PUT status');
+                    t.deepEqual(body, {
+                        code: 'InternalError',
+                        message: 'Config currently unavailable.'
+                    });
+
+                    next();
+                });
+            });
+        }, function (err) {
+            t.ifError(err, 'Error while running without dclocalconfig');
+            t.end();
+        });
+    });
 });
 
 
-- 
2.21.0

