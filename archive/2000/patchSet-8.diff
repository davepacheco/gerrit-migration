From 14188f425c97bfdd4712478796f47e5029692b98 Mon Sep 17 00:00:00 2001
From: Kris Shannon <k.shannon@amaze.com.au>
Date: Fri, 26 May 2017 16:25:37 +1000
Subject: [PATCH] MANTA-2409 Muskie pagination subject to Moray filter
 injection MANTA-2803 Cannot mrmdir or mls in manta folder with parentheses in
 name

---
 lib/common.js    | 86 ++++++++++++++++++++++++++----------------------
 package.json     |  1 +
 test/dir.test.js | 73 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 120 insertions(+), 40 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index fc966fb..b725f51 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -17,6 +17,7 @@ var httpSignature = require('http-signature');
 
 var assert = require('assert-plus');
 var libmanta = require('libmanta');
+var morayFilter = require('moray-filter');
 var vasync = require('vasync');
 var restify = require('restify');
 var VError = require('verror');
@@ -599,7 +600,16 @@ function readdir(dir, req) {
     // We want the really low-level API here, as we want to go hit the place
     // where all the keys are, not where the dirent itself is.
     var client = req.moray;
-    var filter = '(&';
+    var filter = new morayFilter.AndFilter();
+
+    filter.addFilter(new morayFilter.EqualityFilter({
+        attribute: 'owner',
+        value: account
+    }));
+    filter.addFilter(new morayFilter.EqualityFilter({
+        attribute: 'dirname',
+        value: dir
+    }));
 
     //The 'dir' above comes in as the path of the request.  The 'dir'
     // and 'obj' parameters are filters.
@@ -608,52 +618,19 @@ function readdir(dir, req) {
     var hasObj = (req.params.obj !== undefined ||
                   req.params.object !== undefined);
 
-    if ((hasDir && hasObj) || !(hasDir || hasObj)) {
-        filter += sprintf('(owner=%s)(dirname=%s)', account, dir);
-    } else if (hasDir) {
-        filter += sprintf('(owner=%s)(dirname=%s)(type=directory)',
-                          account, dir);
-    } else {
-        filter += sprintf('(owner=%s)(dirname=%s)(type=object)',
-                          account, dir);
+    if ((hasDir || hasObj) && !(hasDir && hasObj)) {
+        filter.addFilter(new morayFilter.EqualityFilter({
+            attribute: 'type',
+            value: (hasDir ? 'directory' : 'object')
+        }));
     }
 
     var marker = req.params.marker;
     var reverse = req.params.sort_order === 'reverse';
     var tsort = req.params.sort === 'mtime';
 
-    if (marker) {
-        if (tsort) {
-            marker = new Date(marker).getTime();
-            if (!marker) {
-                ee = new EventEmitter();
-                setImmediate(function () {
-                    ee.emit('error',
-                            new InvalidParameterError('marker',
-                                                      req.params.marker));
-                });
-                return (ee);
-            }
-
-            if (reverse) {
-                filter += sprintf('(_mtime>=%s)', marker);
-            } else {
-                filter += sprintf('(_mtime<=%s)', marker);
-            }
-        } else {
-            if (reverse) {
-                filter += sprintf('(name<=%s)', marker);
-            } else {
-                filter += sprintf('(name>=%s)', marker);
-            }
-        }
-    }
-    filter += ')';
-
-
     var log = req.log;
     var opts = {
-        filter: filter,
         limit: l,
         requestId: req.getId(),
         sort: {},
@@ -677,9 +654,38 @@ function readdir(dir, req) {
         }
     }
 
+    if (marker) {
+        if (tsort) {
+            var mtime = Date.parse(marker);
+            if (Number.isFinite(mtime)) {
+                marker = mtime.toString();
+            } else {
+                ee = new EventEmitter();
+                setImmediate(function () {
+                    ee.emit('error',
+                            new InvalidParameterError('marker',
+                                                      req.params.marker));
+                });
+                return (ee);
+            }
+        }
+
+        var sortArgs = {
+            attribute: opts.sort.attribute,
+            value: marker
+        };
+        if (opts.sort.order === 'ASC') {
+            filter.addFilter(new morayFilter.GreaterThanEqualsFilter(sortArgs));
+        } else {
+            filter.addFilter(new morayFilter.LessThanEqualsFilter(sortArgs));
+        }
+    }
+
+    opts.filter = filter.toString();
+
     log.debug({
         dir: dir,
-        filter: filter
+        filter: opts.filter
     }, 'readdir: entered');
     var mreq = client.search(opts);
 
diff --git a/package.json b/package.json
index 22ed74d..e45f5dd 100644
--- a/package.json
+++ b/package.json
@@ -31,6 +31,7 @@
         "marlin": "git+https://github.com/joyent/manta-marlin.git#master",
         "mime": "1.2.11",
         "moray": "3.1.1",
+        "moray-filter": "1.0.0",
         "once": "1.3.0",
         "restify": "2.6.3",
         "vasync": "1.4.3",
diff --git a/test/dir.test.js b/test/dir.test.js
index 29b1e21..24df627 100644
--- a/test/dir.test.js
+++ b/test/dir.test.js
@@ -396,6 +396,79 @@ test('ls with obj and dir', function (t) {
 });
 
 
+test('ls escapes path', function (t) {
+    var self = this;
+    var key = this.dir + '/*needs=(escaping)';
+    this.client.mkdir(key, function (err, res) {
+        t.ifError(err);
+        t.ok(res);
+        t.checkResponse(res, 204);
+        self.client.ls(key, function (err2, res2) {
+            t.ifError(err2);
+            t.ok(res2);
+
+            res2.once('error', function (err3) {
+                t.ifError(err3);
+                t.end();
+            });
+            res2.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('ls escapes marker', function (t) {
+    var self = this;
+    var key = 'needs)*(=escaping';
+    var files = ['aaa', key, 'zzz'];
+    vasync.pipeline({
+        funcs: files.map(function (file) {
+            return function (_, cb) {
+                var path = self.dir + '/' + file;
+                writeObject(self.client, path, cb);
+            };
+        })
+    }, function (verr) {
+        t.ifError(verr);
+        self.client.ls(self.dir, { marker: key }, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.on('directory', function (dir) {
+                t.ok(!dir, 'fail, unexpected dir!');
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(2, objs.length);
+                var names = objs.map(function (d) {
+                    return (d.name);
+                }).sort();
+                t.deepEqual([key, 'zzz'], names);
+                t.end();
+            });
+        });
+    });
+});
+
+
 test('ls 404', function (t) {
     this.client.ls(this.dir + '/' + uuid.v4(), function (err, res) {
         t.ok(err);
-- 
2.21.0

