From 289ba2284db6a1737d06eb9087c8ea8aedf0632b Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Wed, 21 Dec 2016 16:14:29 -0500
Subject: [PATCH] PUBAPI-1171 improve boolean envvar error handling PUBAPI-1205
 mirror node-smartdc meaning for SDC_TESTING PUBAPI-1351 do not default to
 mixing TRITON/SDC vars

---
 CHANGES.md    |  9 +++++++++
 lib/config.js |  7 +++----
 lib/do_env.js | 16 +++++++++-------
 3 files changed, 21 insertions(+), 11 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index a0410af..1b5c962 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -7,6 +7,15 @@ Known issues:
 
 ## not yet released
 
+- PUBAPI-1171/PUBAPI-1205/PUBAPI-1351 The handling of legacy `SDC_*`
+  environment variables has been cleaned up.  These environment
+  variables are used for compatibility with the node-smartdc toolset.
+   * `SDC_TESTING` is now evaluated the same way as node-smartdc.  Any
+     set value but the empty string is true.
+   * Errors on boolean environment variables will now identify
+     the variable at fault.
+   * `triton env` no longer emits `SDC_*` variables by default.
+
 - [joyent/node-triton#137] Improve the handling for the getting started case
   when a user may not have envvars or a profile setup.
 
diff --git a/lib/config.js b/lib/config.js
index 10f22c2..a8b03c5 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -288,15 +288,14 @@ function _loadEnvProfile() {
     {
         return null;
     }
-
     if (process.env.TRITON_TLS_INSECURE) {
         envProfile.insecure = common.boolFromString(
-            process.env.TRITON_TLS_INSECURE);
+            process.env.TRITON_TLS_INSECURE, undefined, 'TRITON_TLS_INSECURE');
     } else if (process.env.SDC_TLS_INSECURE) {
         envProfile.insecure = common.boolFromString(
-            process.env.SDC_TLS_INSECURE);
+            process.env.SDC_TLS_INSECURE, undefined, 'SDC_TLS_INSECURE');
     } else if (process.env.SDC_TESTING) { // deprecated
-        envProfile.insecure = common.boolFromString(process.env.SDC_TESTING);
+        envProfile.insecure = true;
     }
 
     validateProfile(envProfile, 'environment variables');
diff --git a/lib/do_env.js b/lib/do_env.js
index 9653879..e1ee073 100644
--- a/lib/do_env.js
+++ b/lib/do_env.js
@@ -29,7 +29,7 @@ function do_env(subcmd, opts, args, cb) {
     }
 
     var profileName = args[0] || this.tritonapi.profile.name;
-    var allClientTypes = ['triton', 'docker', 'smartdc'];
+    var allClientTypes = ['triton', 'docker'];
     var clientTypes = [];
     var explicit;
     var shortOpts = '';
@@ -186,7 +186,8 @@ do_env.options = [
     {
         names: ['smartdc', 's'],
         type: 'bool',
-        help: 'Emit environment for node-smartdc (i.e. the "SDC_*" variables).'
+        help: 'Emit environment for node-smartdc (i.e. the legacy ' +
+            '"SDC_*" variables).'
     },
     {
         group: ''
@@ -204,15 +205,16 @@ do_env.help = [
     /* BEGIN JSSTYLED */
     'Emit shell commands to setup environment.',
     '',
-    'Supported "clients" here are: node-smartdc (i.e. the `sdc-*` tools),',
-    'and node-triton itself. By default this emits the environment for all',
-    'supported tools. Use options to be specific.',
+    'Supported "clients" here are: Docker, node-triton itself (this tool), and',
+    'node-smartdc (the legacy `sdc-*` tools). By default this emits the',
+    'environment for Docker and node-triton. Use options to emit commands for',
+    'only a specific toolset.',
     '',
     '{{usage}}',
     '',
     '{{options}}',
-    'If no options are given, environment variables are emitted for all clients.',
-    'If PROFILE is not given, the current profile is used.',
+    'If no options are given, environment variables are emitted for Docker',
+    'and node-triton. If PROFILE is not given, the current profile is used.',
     '',
     'The following Bash function can be added to one\'s "~/.bashrc" to quickly',
     'change between Triton profiles:',
-- 
2.21.0

