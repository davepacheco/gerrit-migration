From 00f186af179da23dd2426fd38ce8f9ed26ab6905 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Fri, 13 Jan 2017 23:23:04 +0000
Subject: [PATCH] NAPI-374 Prevent fabric NICs without a cn_uuid from being
 created

---
 lib/models/nic/common.js         | 37 ++++++++++++++-
 lib/models/nic/create.js         |  3 +-
 test/integration/fabrics.test.js | 80 ++++++++++++++------------------
 test/lib/err.js                  | 15 ++++--
 test/lib/portolan.js             |  2 +
 5 files changed, 88 insertions(+), 49 deletions(-)

diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index d07a9a7..b3ed665 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -245,6 +245,7 @@ function validateNetworkParams(opts, params, parsedParams, callback) {
             func: function (network, cb) {
                 parsedParams.network = network;
                 parsedParams.network_uuid = network.uuid;
+                parsedParams.network_fabric = network.fabric;
                 validateSubnetContainsIP(opts, parsedParams, function (e) {
                     if (e) {
                         /*
@@ -291,11 +292,43 @@ function validateNetworkParams(opts, params, parsedParams, callback) {
             }
             parsedParams.network = contained[0];
             parsedParams.network_uuid = contained[0].uuid;
+            parsedParams.network_fabric = contained[0].fabric;
             return (callback(null));
         });
     });
 }
 
+/*
+ * Determine if NIC is provisioned on top of fabric. If so, make sure that NIC
+ * has cn_uuid set. If not, it's all good.
+ */
+function validateFabricNic(_opts, _params, parsedParams, callback) {
+    var fabric = false;
+    if (parsedParams.network) {
+        fabric = parsedParams.network.fabric;
+    } else {
+        fabric = parsedParams.network_fabric;
+    }
+    if (fabric && parsedParams.cn_uuid === undefined) {
+        callback(errors.missingParam('cn_uuid'));
+    } else {
+        callback(null);
+    }
+}
+
+/*
+ * The NIC's boolean property `underlay` can only be set to true if the
+ * `belongs_to_type` is to set to 'server'.
+ */
+function validateUnderlayServer(_opts, params, _parsedParams, callback) {
+    if (params.underlay && params.belongs_to_type !== 'server') {
+        callback(errors.invalidParam('underlay',
+            'belongs_to_type not compatible with underlay'));
+    } else {
+        callback(null);
+    }
+}
+
 // --- Common create/updates/delete pipeline functions
 
 /**
@@ -356,5 +389,7 @@ module.exports = {
     listVnetCns: listVnetCns,
     validateMAC: validateMAC,
     validateNetwork: validateNetwork,
-    validateNetworkParams: validateNetworkParams
+    validateNetworkParams: validateNetworkParams,
+    validateFabricNic: validateFabricNic,
+    validateUnderlayServer: validateUnderlayServer
 };
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index 0230814..62c1b1b 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -53,7 +53,8 @@ var CREATE_SCHEMA = {
         vlan_id: validate.VLAN
     },
 
-    after: common.validateNetworkParams
+    after: [ common.validateNetworkParams, common.validateFabricNic,
+        common.validateUnderlayServer ]
 };
 
 
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index b4ebdac..726c1a3 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -821,6 +821,20 @@ test('provision server nics', function (t) {
         });
     });
 
+    t.test('REAL_NETS[0]: fail to provision underlay nic', function (t2) {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: REAL_NETS[0].uuid,
+            params: {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: SERVERS[0],
+                owner_uuid: ADMIN_OWNER,
+                underlay: true
+            },
+            expErr: mod_err.invalidParam('underlay', 'belongs_to_type not ' +
+                'compatible with underlay')
+        });
+    });
 
     t.test('REAL_NETS[0]: provision underlay nic', function (t2) {
         mod_nic.provision(t2, {
@@ -870,7 +884,6 @@ test('provision zone nics', function (t) {
         mod_fabric_net.nicTag(t, NETS[0]),
         mod_fabric_net.nicTag(t, NETS[3])
     ];
-    var updateNic;
 
     t.test('NETS[0]: provision', function (t2) {
         mod_nic.provision(t2, {
@@ -880,6 +893,7 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
@@ -888,27 +902,29 @@ test('provision zone nics', function (t) {
                 fabric: true,
                 internet_nat: true,
                 nic_tag: nicTags[0],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             })
         });
     });
 
+    var updateNic;
 
-    // We didn't specify cn_uuid when provisioning the last nic, so it should
-    // not have an overlay mapping
-    t.test('nic 0: overlay mapping not added', function (t2) {
+    // This test should fail, since no cn_uuid was provided
+    t.test('NETS[0]: provision without cn_uuid', function (t2) {
         updateNic = mod_nic.lastCreated();
-        t.ok(updateNic, 'last created nic');
-
-        mod_portolan.overlayMapping(t2, {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: NETS[0].uuid,
             params: {
-                nic: updateNic
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[0],
+                owner_uuid: OWNERS[0]
             },
-            expErr: mod_portolan.notFoundErr()
+            expErr: mod_err.missingParam('cn_uuid')
         });
     });
 
-
     t.test('NETS[0]: provision with IP', function (t2) {
         mod_nic.provision(t2, {
             fillInMissing: true,
@@ -916,12 +932,14 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 ip: '10.2.1.40',
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 ip: '10.2.1.40',
                 internet_nat: true,
@@ -987,11 +1005,13 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[1]
             },
             exp: mod_net.addNetParams(NETS[3], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: false,
                 nic_tag: nicTags[1],
@@ -1000,8 +1020,7 @@ test('provision zone nics', function (t) {
         });
     });
 
-
-    t.test('update nic to add cn_uuid', function (t2) {
+    t.test('update nic to change cn_uuid', function (t2) {
         mod_nic.updateAndGet(t2, {
             mac: updateNic.mac,
             params: {
@@ -1013,8 +1032,7 @@ test('provision zone nics', function (t) {
         });
     });
 
-
-    t.test('updated nic: overlay mapping added', function (t2) {
+    t.test('update nic: overlay mapping changed', function (t2) {
         mod_portolan.overlayMapping(t2, {
             params: {
                 nic: updateNic
@@ -1031,36 +1049,6 @@ test('provision zone nics', function (t) {
     });
 
 
-    t.test('update nic to change cn_uuid', function (t2) {
-        mod_nic.updateAndGet(t2, {
-            mac: updateNic.mac,
-            params: {
-                cn_uuid: SERVERS[0]
-            },
-            partialExp: {
-                cn_uuid: SERVERS[0]
-            }
-        });
-    });
-
-
-    t.test('updated nic: overlay mapping changed', function (t2) {
-        mod_portolan.overlayMapping(t2, {
-            params: {
-                nic: updateNic
-            },
-            exp: {
-                cn_uuid: SERVERS[0],
-                deleted: false,
-                ip: updateNic.ip,
-                mac: updateNic.mac,
-                version: 1,
-                vnet_id: mod_portolan.nicVnetID(t, updateNic)
-            }
-        });
-    });
-
-
     t.test('delete nic', function (t2) {
         mod_nic.del(t2, {
             mac: updateNic.mac,
@@ -1174,12 +1162,14 @@ test('provision gateway', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: gw,
+                cn_uuid: SERVERS[0],
                 ip: NETS[0].gateway,
                 owner_uuid: ADMIN_OWNER
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: gw,
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: true,
                 gateway_provisioned: true,
@@ -1259,11 +1249,13 @@ test('provision gateway', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: true,
                 gateway_provisioned: true,
diff --git a/test/lib/err.js b/test/lib/err.js
index 577b994..9731e5c 100644
--- a/test/lib/err.js
+++ b/test/lib/err.js
@@ -46,9 +46,6 @@ var MESSAGES = {
 
 
 
-/**
- * Return an error for an overlapping subnet
- */
 function invalidParamErr(param, msg, invalid) {
     var body = new errors.InvalidParamsError(constants.msg.INVALID_PARAMS,
         [ errors.invalidParam(param, msg) ]).body;
@@ -60,6 +57,17 @@ function invalidParamErr(param, msg, invalid) {
     return body;
 }
 
+function missingParamErr(param, msg, invalid) {
+    var body = new errors.InvalidParamsError(errors.msg.missingParams,
+        [ errors.missingParam(param, msg) ]).body;
+
+    if (invalid) {
+        body.errors[0].invalid = invalid;
+    }
+
+    return body;
+}
+
 
 /**
  * Return a "network must have no nics provisioned" error
@@ -132,6 +140,7 @@ function vlanHasNetworksErr(nets) {
 
 module.exports = {
     invalidParam: invalidParamErr,
+    missingParam: missingParamErr,
     msg: MESSAGES,
     netHasNicsErr: netHasNicsErr,
     netNameInUse: netNameInUseErr,
diff --git a/test/lib/portolan.js b/test/lib/portolan.js
index 18f45b0..80e3f78 100644
--- a/test/lib/portolan.js
+++ b/test/lib/portolan.js
@@ -109,6 +109,8 @@ function getMorayClient(callback) {
         });
 
         // XXX: Possible to get an error event here?
+        // Yes, it is possible if we passed a moray-domain to the tests via
+        // config.json.
 
         MORAY_CLIENT.once('connect', function _afterConnect() {
             return callback(null, MORAY_CLIENT);
-- 
2.21.0

