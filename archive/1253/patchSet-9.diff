From c95e900d8e14505ea19088244ac6d2ac98109d17 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Fri, 13 Jan 2017 23:23:04 +0000
Subject: [PATCH] NAPI-374 Prevent fabric NICs without a cn_uuid from being
 created NAPI-388 should validate that underlay nics are server nics

---
 lib/models/nic/common.js         | 41 +++++++++++++-
 lib/models/nic/create.js         |  8 ++-
 lib/models/nic/update.js         | 28 +++++-----
 lib/util/constants.js            |  3 +-
 test/integration/fabrics.test.js | 92 ++++++++++++++++++++------------
 test/lib/err.js                  | 17 ++++--
 test/lib/portolan.js             | 22 +++++---
 7 files changed, 149 insertions(+), 62 deletions(-)

diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index d07a9a7..dd959e6 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -296,6 +296,41 @@ function validateNetworkParams(opts, params, parsedParams, callback) {
     });
 }
 
+/*
+ * Determine if NIC is provisioned on top of fabric. If so, make sure that NIC
+ * has cn_uuid set. If not, it's all good.
+ */
+function validateFabricNic(_opts, _params, parsedParams, callback) {
+    var fabric = false;
+    if (parsedParams.network) {
+        fabric = parsedParams.network.fabric;
+    }
+    if (fabric && parsedParams.cn_uuid === undefined) {
+        callback(errors.missingParam('cn_uuid'));
+    } else {
+        callback(null);
+    }
+}
+
+/*
+ * The NIC's boolean property `underlay` can only be set to true if the
+ * `belongs_to_type` is to set to 'server'.
+ */
+function validateUnderlayServer(opts, params, _parsedParams, callback) {
+    var belongs_to_type = undefined;
+    if (params.belongs_to_type !== undefined) {
+        belongs_to_type = params.belongs_to_type;
+    } else {
+        belongs_to_type = opts.existingNic.belongs_to_type;
+    }
+    if (params.underlay && belongs_to_type !== 'server') {
+        callback(errors.invalidParam('underlay',
+            constants.SERVER_UNDERLAY_MSG));
+    } else {
+        callback(null);
+    }
+}
+
 // --- Common create/updates/delete pipeline functions
 
 /**
@@ -356,5 +391,7 @@ module.exports = {
     listVnetCns: listVnetCns,
     validateMAC: validateMAC,
     validateNetwork: validateNetwork,
-    validateNetworkParams: validateNetworkParams
+    validateNetworkParams: validateNetworkParams,
+    validateFabricNic: validateFabricNic,
+    validateUnderlayServer: validateUnderlayServer
 };
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index 0230814..f2e4d06 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -53,7 +53,11 @@ var CREATE_SCHEMA = {
         vlan_id: validate.VLAN
     },
 
-    after: common.validateNetworkParams
+    after: [
+        common.validateNetworkParams,
+        common.validateFabricNic,
+        common.validateUnderlayServer
+    ]
 };
 
 
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index a127c12..fa584f9 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
 
 'use strict';
 
+var assert = require('assert-plus');
 var common = require('./common');
 var constants = require('../../util/constants');
 var errors = require('../../util/errors');
@@ -82,22 +83,25 @@ var UPDATE_SCHEMA = {
         primary: validate.bool,
         reserved: validate.bool,
         state: validate.enum(common.VALID_NIC_STATES),
-        // XXX: only allow this if belongs_to_type is 'server'
         underlay: validate.bool,
         vlan_id: validate.VLAN
     },
 
-    after: function (opts, original, parsed, cb2) {
-        // Only add the old IP's network if we're not
-        // updating to a new network
-        if (!parsed.hasOwnProperty('network') && opts.existingNic &&
-            opts.existingNic.hasOwnProperty('network')) {
-            parsed.network = opts.existingNic.network;
-            parsed.network_uuid = opts.existingNic.network.uuid;
-        }
+    after: [
+        function (opts, original, parsed, cb2) {
+            // Only add the old IP's network if we're not
+            // updating to a new network
+            assert.object(opts.existingNic);
+            if (!parsed.hasOwnProperty('network') && opts.existingNic &&
+                opts.existingNic.hasOwnProperty('network')) {
+                parsed.network = opts.existingNic.network;
+                parsed.network_uuid = opts.existingNic.network.uuid;
+            }
 
-        common.validateNetworkParams(opts, original, parsed, cb2);
-    }
+            common.validateNetworkParams(opts, original, parsed, cb2);
+        },
+        common.validateUnderlayServer
+    ]
 };
 
 
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 4e7bb63..5bdafb3 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -155,6 +155,7 @@ module.exports = {
     PRIV_RANGE_ONLY: 'subnet must be within private ranges',
     PROV_RANGE_ORDER_MSG:
         'provision_start_ip must be before provision_end_ip',
+    SERVER_UNDERLAY_MSG: 'Only server NICs can be underlay NICs',
     SUBNET_FULL_MSG: 'no more free IPs',
     SUBNET_GATEWAY_MISMATCH: 'gateway should match subnet type (%s)',
     SUBNET_RESOLVER_MISMATCH: 'resolvers should match subnet type (%s)',
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index b4ebdac..800bcd7 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -821,6 +821,20 @@ test('provision server nics', function (t) {
         });
     });
 
+    t.test('REAL_NETS[0]: fail to provision underlay nic', function (t2) {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: REAL_NETS[0].uuid,
+            params: {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: SERVERS[0],
+                owner_uuid: ADMIN_OWNER,
+                underlay: true
+            },
+            expErr: mod_err.invalidParam('underlay',
+                constants.SERVER_UNDERLAY_MSG)
+        });
+    });
 
     t.test('REAL_NETS[0]: provision underlay nic', function (t2) {
         mod_nic.provision(t2, {
@@ -870,7 +884,6 @@ test('provision zone nics', function (t) {
         mod_fabric_net.nicTag(t, NETS[0]),
         mod_fabric_net.nicTag(t, NETS[3])
     ];
-    var updateNic;
 
     t.test('NETS[0]: provision', function (t2) {
         mod_nic.provision(t2, {
@@ -880,6 +893,7 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
@@ -888,27 +902,29 @@ test('provision zone nics', function (t) {
                 fabric: true,
                 internet_nat: true,
                 nic_tag: nicTags[0],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             })
         });
     });
 
+    var updateNic;
 
-    // We didn't specify cn_uuid when provisioning the last nic, so it should
-    // not have an overlay mapping
-    t.test('nic 0: overlay mapping not added', function (t2) {
+    // This test should fail, since no cn_uuid was provided
+    t.test('NETS[0]: provision without cn_uuid', function (t2) {
         updateNic = mod_nic.lastCreated();
-        t.ok(updateNic, 'last created nic');
-
-        mod_portolan.overlayMapping(t2, {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: NETS[0].uuid,
             params: {
-                nic: updateNic
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[0],
+                owner_uuid: OWNERS[0]
             },
-            expErr: mod_portolan.notFoundErr()
+            expErr: mod_err.missingParam('cn_uuid')
         });
     });
 
-
     t.test('NETS[0]: provision with IP', function (t2) {
         mod_nic.provision(t2, {
             fillInMissing: true,
@@ -916,12 +932,14 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 ip: '10.2.1.40',
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[0],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 ip: '10.2.1.40',
                 internet_nat: true,
@@ -987,11 +1005,13 @@ test('provision zone nics', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[1]
             },
             exp: mod_net.addNetParams(NETS[3], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: false,
                 nic_tag: nicTags[1],
@@ -1000,57 +1020,55 @@ test('provision zone nics', function (t) {
         });
     });
 
+    t.test('nic 3: overlay mapping added', function (t2) {
+        var nic = mod_nic.lastCreated();
+        t.ok(nic, 'last created nic');
 
-    t.test('update nic to add cn_uuid', function (t2) {
-        mod_nic.updateAndGet(t2, {
-            mac: updateNic.mac,
-            params: {
-                cn_uuid: SERVERS[1]
-            },
-            partialExp: {
-                cn_uuid: SERVERS[1]
-            }
-        });
-    });
-
-
-    t.test('updated nic: overlay mapping added', function (t2) {
         mod_portolan.overlayMapping(t2, {
             params: {
-                nic: updateNic
+                nic: nic
             },
             exp: {
-                cn_uuid: SERVERS[1],
+                cn_uuid: SERVERS[0],
                 deleted: false,
-                ip: updateNic.ip,
-                mac: updateNic.mac,
+                ip: nic.ip,
+                mac: nic.mac,
                 version: 1,
-                vnet_id: mod_portolan.nicVnetID(t, updateNic)
+                vnet_id: mod_portolan.nicVnetID(t, nic)
             }
         });
     });
 
-
     t.test('update nic to change cn_uuid', function (t2) {
         mod_nic.updateAndGet(t2, {
             mac: updateNic.mac,
             params: {
-                cn_uuid: SERVERS[0]
+                cn_uuid: SERVERS[1]
             },
             partialExp: {
-                cn_uuid: SERVERS[0]
+                cn_uuid: SERVERS[1]
             }
         });
     });
 
+    t.test('update nic to change underlay', function (t2) {
+        mod_nic.update(t2, {
+            mac: updateNic.mac,
+            params: {
+                underlay: true
+            },
+            expErr: mod_err.invalidParam('underlay',
+                constants.SERVER_UNDERLAY_MSG)
+        });
+    });
 
-    t.test('updated nic: overlay mapping changed', function (t2) {
+    t.test('update nic: overlay mapping changed', function (t2) {
         mod_portolan.overlayMapping(t2, {
             params: {
                 nic: updateNic
             },
             exp: {
-                cn_uuid: SERVERS[0],
+                cn_uuid: SERVERS[1],
                 deleted: false,
                 ip: updateNic.ip,
                 mac: updateNic.mac,
@@ -1174,12 +1192,14 @@ test('provision gateway', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: gw,
+                cn_uuid: SERVERS[0],
                 ip: NETS[0].gateway,
                 owner_uuid: ADMIN_OWNER
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: gw,
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: true,
                 gateway_provisioned: true,
@@ -1259,11 +1279,13 @@ test('provision gateway', function (t) {
             params: {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 owner_uuid: OWNERS[0]
             },
             exp: mod_net.addNetParams(NETS[0], {
                 belongs_to_type: 'zone',
                 belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
                 fabric: true,
                 internet_nat: true,
                 gateway_provisioned: true,
diff --git a/test/lib/err.js b/test/lib/err.js
index 577b994..203bf86 100644
--- a/test/lib/err.js
+++ b/test/lib/err.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -46,9 +46,6 @@ var MESSAGES = {
 
 
 
-/**
- * Return an error for an overlapping subnet
- */
 function invalidParamErr(param, msg, invalid) {
     var body = new errors.InvalidParamsError(constants.msg.INVALID_PARAMS,
         [ errors.invalidParam(param, msg) ]).body;
@@ -60,6 +57,17 @@ function invalidParamErr(param, msg, invalid) {
     return body;
 }
 
+function missingParamErr(param, msg, invalid) {
+    var body = new errors.InvalidParamsError(errors.msg.missingParams,
+        [ errors.missingParam(param, msg) ]).body;
+
+    if (invalid) {
+        body.errors[0].invalid = invalid;
+    }
+
+    return body;
+}
+
 
 /**
  * Return a "network must have no nics provisioned" error
@@ -132,6 +140,7 @@ function vlanHasNetworksErr(nets) {
 
 module.exports = {
     invalidParam: invalidParamErr,
+    missingParam: missingParamErr,
     msg: MESSAGES,
     netHasNicsErr: netHasNicsErr,
     netNameInUse: netNameInUseErr,
diff --git a/test/lib/portolan.js b/test/lib/portolan.js
index 18f45b0..8045c93 100644
--- a/test/lib/portolan.js
+++ b/test/lib/portolan.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -94,7 +94,8 @@ function afterMoray(t, opts, callback, err, realObj) {
 
 function getMorayClient(callback) {
     if (MORAY_CLIENT) {
-        return callback(null, MORAY_CLIENT);
+        callback(null, MORAY_CLIENT);
+        return;
     }
 
     assert.object(config, 'config');
@@ -108,10 +109,11 @@ function getMorayClient(callback) {
             port: config.moray.port
         });
 
-        // XXX: Possible to get an error event here?
+
+        MORAY_CLIENT.once('error', callback);
 
         MORAY_CLIENT.once('connect', function _afterConnect() {
-            return callback(null, MORAY_CLIENT);
+            callback(null, MORAY_CLIENT);
         });
     });
 }
@@ -173,7 +175,11 @@ function overlayMapping(t, opts, callback) {
         return doneErr(vnetErr, t, callback);
     }
 
-    getMorayClient(function (_, client) {
+    getMorayClient(function (err, client) {
+        if (err) {
+            callback(err);
+            return;
+        }
         var vl2Opts = {
             log: log,
             moray: client,
@@ -210,7 +216,11 @@ function underlayMapping(t, opts, callback) {
 
     assert.string(opts.params.cn_uuid, 'opts.params.cn_uuid');
 
-    getMorayClient(function (_, client) {
+    getMorayClient(function (err, client) {
+        if (err) {
+            callback(err);
+            return;
+        }
         var lookupOpts = {
             moray: client,
             noCache: true,
-- 
2.21.0

