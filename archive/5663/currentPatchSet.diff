commit 4647871d6a2e3d82dfc0242d5dd3ee0d2a73fca8
Author: Tim Foster <tim.foster@joyent.com>
Date:   2019-03-11T17:33:09+00:00 (7 months ago)
    
    MANTA-4079 convert manta-manatee to engbld framework
    Reviewed by: Richard Bradley <richard.bradley@joyent.com>
    Approved by: Kelly McLaughlin <kelly.mclaughlin@joyent.com>

diff --git a/.gitignore b/.gitignore
index e02b2ca..d5c805e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,13 +3,15 @@
 /node_modules
 /tmp
 /pg_prefaulter
-build
+/bits
+/build
 docs/*.json
 docs/*.html
 cscope.in.out
 cscope.po.out
 cscope.out
 smf/manifests/*.xml
+manta-manatee-pkg*.gz
 *.swp
 *.*~
 *.un~
diff --git a/.gitmodules b/.gitmodules
index fcc079e..64b300c 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -13,3 +13,6 @@
 [submodule "deps/pg_prefaulter"]
 	path = deps/pg_prefaulter
 	url = https://github.com/joyent/pg_prefaulter
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Makefile b/Makefile
index 92daa71..3833b9c 100644
--- a/Makefile
+++ b/Makefile
@@ -5,9 +5,11 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
+NAME = manta-manatee
+
 #
 # Tools
 #
@@ -32,8 +34,8 @@ SMF_MANIFESTS_IN =		smf/manifests/backupserver.xml.in \
 
 NODE_PREBUILT_VERSION :=	v0.10.48
 NODE_PREBUILT_TAG :=		zone
-# Allow building on a SmartOS image other than sdc-multiarch/13.3.1.
-NODE_PREBUILT_IMAGE =		b4bdc598-8939-11e3-bea4-8341f6861379
+# sdc-minimal-multiarch-lts@15.4.1
+NODE_PREBUILT_IMAGE =		18b094b0-eb01-11e5-80c1-175dac7ddf02
 
 #
 # The PostgreSQL prefaulter program is implemented in Go, so we will need
@@ -47,16 +49,26 @@ PG_PREFAULTER =			pg_prefaulter
 
 CLEAN_FILES +=			$(PG_PREFAULTER)
 
+ENGBLD_USE_BUILDIMAGE =		true
+ENGBLD_REQUIRE :=		$(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 
-include ./tools/mk/Makefile.defs
-include ./tools/mk/Makefile.go_prebuilt.defs
-include ./tools/mk/Makefile.node_prebuilt.defs
-include ./tools/mk/Makefile.node_modules.defs
-include ./tools/mk/Makefile.smf.defs
+include ./deps/eng/tools/mk/Makefile.go_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.node_modules.defs
+include ./deps/eng/tools/mk/Makefile.smf.defs
 
-RELEASE_TARBALL :=		manta-manatee-pkg-$(STAMP).tar.bz2
+RELEASE_TARBALL :=		$(NAME)-pkg-$(STAMP).tar.gz
 ROOT :=				$(shell pwd)
-RELSTAGEDIR :=			/tmp/$(STAMP)
+RELSTAGEDIR :=			/tmp/$(NAME)-$(STAMP)
+
+BASE_IMAGE_UUID = 04a48d7d-6bb5-4e83-8c3b-e60a99e0f48f
+BUILDIMAGE_NAME = manta-postgres
+BUILDIMAGE_DESC	= Manta manatee
+BUILDIMAGE_PKGSRC = lz4-131nb1
+AGENTS		= amon config registrar waferlock
 
 #
 # Repo-specific targets
@@ -95,18 +107,14 @@ release: all deps docs pg
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/scripts/
 	cp -R $(ROOT)/boot/* \
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/
-	cd $(RELSTAGEDIR) && $(TAR) -jcf $(ROOT)/$(RELEASE_TARBALL) root site
+	cd $(RELSTAGEDIR) && $(TAR) -I pigz -cf $(ROOT)/$(RELEASE_TARBALL) root site
 	@rm -rf $(RELSTAGEDIR)
 
 .PHONY: publish
 publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		echo "error: 'BITS_DIR' must be set for 'publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/manta-manatee
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
 	cp $(ROOT)/$(RELEASE_TARBALL) \
-	    $(BITS_DIR)/manta-manatee/$(RELEASE_TARBALL)
+	    $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
 
 .PHONY: pg
 pg: all deps/postgresql92/.git deps/postgresql96/.git deps/pg_repack/.git
@@ -130,10 +138,10 @@ $(PG_PREFAULTER): deps/pg_prefaulter/.git $(STAMP_GO_TOOLCHAIN)
 	    -X main.date=$(shell /usr/bin/date -u +%FT%TZ)" \
 	    -o $@ $(PG_PREFAULTER_IMPORT)
 
-include ./tools/mk/Makefile.deps
-include ./tools/mk/Makefile.go_prebuilt.targ
-include ./tools/mk/Makefile.node_prebuilt.targ
-include ./tools/mk/Makefile.node_modules.targ
-include ./tools/mk/Makefile.smf.targ
-include ./tools/mk/Makefile.targ
-
+include ./deps/eng/tools/mk/Makefile.deps
+include ./deps/eng/tools/mk/Makefile.go_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.node_modules.targ
+include ./deps/eng/tools/mk/Makefile.smf.targ
+include ./deps/eng/tools/mk/Makefile.targ
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..3fb93c5
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit 3fb93c5f46cc857ddeec97b1e178e4d9b83f39ab
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
deleted file mode 100644
index f6e9042..0000000
--- a/tools/mk/Makefile.defs
+++ /dev/null
@@ -1,105 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
-#			created.  See comments below on expensive targets.
-#
-#	CACHE_DIR	A directory tree in which temporary files may be
-#			collected by download, tarball extraction, etc.  This
-#			directory is completely removed by "make distclean".
-#			Files in this directory are not intended to be shipped.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
-
-CACHE_DIR ?=		cache
-DISTCLEAN_FILES +=	$(CACHE_DIR)
-
-#
-# EXPENSIVE TARGETS AND MAKE STAMP FILES
-#
-# Targets which are expensive to run and lack a single file that marks
-# completion are difficult to track with make; e.g., "npm install".  One
-# solution to this problem is to create "stamp" files with symbolic names which
-# are created as the final step in a complex make rule in order to mark
-# completion.
-#
-# In order to make these more uniform, and easier to target with "make clean",
-# we will attempt to store them under a single directory.  Note that these
-# files are never targets for shipping in build artefacts.
-#
-# Stamp-backed targets come in several parts.  First, a macro should be defined
-# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
-# creates this stamp file must be provided.  The recipe for this target should
-# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
-# management.
-#
-# For example:
-#
-# --- Makefile.*.defs:
-#
-#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
-#
-# --- Makefile.*.targ:
-#
-#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
-#		$(MAKE_STAMP_REMOVE)
-#		rm -rf output_tree/  # <--- ensure a clean slate
-#		expensive_program -o output_tree/ $^
-#		$(MAKE_STAMP_CREATE)
-#
-# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
-# The example above could be built manually by invoking:
-#
-#	make stamp-expensive-result
-#
-MAKE_STAMPS_DIR ?=	make_stamps
-CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
-
-MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
-MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
deleted file mode 100644
index 1cffbe7..0000000
--- a/tools/mk/Makefile.deps
+++ /dev/null
@@ -1,54 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.deps: Makefile for including common tools as dependencies
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
-#
-
-#
-# javascriptlint
-#
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-#
-# jsstyle
-#
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-#
-# restdown
-#
-RESTDOWN_EXEC	?= deps/restdown/bin/restdown
-RESTDOWN	?= python $(RESTDOWN_EXEC)
-$(RESTDOWN_EXEC): | deps/restdown/.git
-
-EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.go_prebuilt.defs b/tools/mk/Makefile.go_prebuilt.defs
deleted file mode 100644
index 5b5eea6..0000000
--- a/tools/mk/Makefile.go_prebuilt.defs
+++ /dev/null
@@ -1,132 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.go_prebuilt.defs: Makefile for obtaining a prebuilt Go toolchain.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile aids in the download and operation of a Go toolchain when
-# building software written in the Go language.  It provides as much isolation
-# from the broader build host as possible, including the provision of a
-# project-local GOPATH and GOROOT.
-#
-# This Makefile is intended to be used along with "Makefile.go_prebuilt.targ".
-#
-# When using this Makefile, you MUST define these variables before the include
-# directive:
-#
-#	GO_PREBUILT_VERSION	The version of the Go toolchain to download
-#				and use.  For example, "1.9".
-#
-# You MAY also specify the following variables:
-#
-#	GO_ENV			A list of environment variable specifications
-#				in shell syntax which will be prepended to Go
-#				toolchain invocations.  Using the "+=" operator,
-#				it is possible to add to the list without
-#				overriding the base environment specified by
-#				this Makefile.
-#
-# This Makefile provides definitions for the following variables:
-#
-#	GO_INSTALL		The location of the Go toolchain, relative
-#				to $(TOP).
-#
-#	GO_GOPATH		The location of the project-local GOPATH
-#				directory, relative to $(TOP).
-#
-#	GO			To be used in place of a bare invocation of
-#				"go"; e.g., "go build" would become
-#				"$(GO) build".  This invocation uses env(1)
-#				and $(GO_ENV) to construct an isolated
-#				environment.
-#
-
-ifndef TOP
-$(error You must include Makefile.defs before this makefile.)
-endif
-
-ifndef CACHE_DIR
-$(error You must include Makefile.defs before this makefile.)
-endif
-
-ifndef GO_PREBUILT_VERSION
-$(error GO_PREBUILT_VERSION must be set before including this makefile.)
-endif
-
-GO_VERSION =			$(GO_PREBUILT_VERSION)
-
-#
-# This Makefile is presently used to build programs written in the Go language
-# to be shipped in zone images.  As such, we default to a target specification
-# which is appropriate for an illumos host.
-#
-GO_GOOS ?=			solaris
-GO_GOARCH ?=			amd64
-
-#
-# The "tools/download_go" script will obtain a Go toolchain tar archive, which
-# we will store in the $(CACHE_DIR).  This directory is be removed entirely by
-# "make distclean".
-#
-GO_TARBALL =			$(CACHE_DIR)/go-$(GO_PREBUILT_VERSION).tar.bz2
-
-#
-# The downloaded Go toolchain will be extracted into a directory under
-# $(CACHE_DIR) by the $(STAMP_GO_TOOLCHAIN) target.  This directory becomes
-# the value of $GOROOT for toolchain invocations.
-#
-GO_INSTALL =			$(CACHE_DIR)/go-$(GO_VERSION)
-
-#
-# Parts of the Go toolchain store intermediate build artefacts in the GOPATH
-# directory.  At the time of writing, at least some of these intermediate
-# artefacts cannot be reused by different versions of the toolchain.  There
-# does not appear to be any mechanism in place to _prevent_ an error of this
-# type, so we include the Go toolchain version in the project-local GOPATH
-# directory name.
-#
-GO_GOPATH =			$(CACHE_DIR)/gopath-$(GO_VERSION)
-
-#
-# The Go toolchain derives some amount of behaviour from the environment.  In
-# order to precisely control that behaviour, we build up our own environment
-# containing only the expected values and run the tool under "env -i", thus
-# precluding any other variables from leaking in:
-#
-GO_ENV +=			GOROOT="$(TOP)/$(GO_INSTALL)"
-GO_ENV +=			GOPATH="$(TOP)/$(GO_GOPATH)"
-GO_ENV +=			GOARCH="$(GO_GOARCH)"
-GO_ENV +=			GOOS="$(GO_GOOS)"
-GO_ENV +=			PATH="$(TOP)/$(GO_INSTALL)/bin:$$PATH"
-
-#
-# The $(GO) variable should be used in place of bare invocations of "go".
-# For example, instead of "go build", use "$(GO) build".
-#
-GO =				env -i $(GO_ENV) $(TOP)/$(GO_INSTALL)/bin/go
-
-#
-# If the version of Go is changed in the Makefile, or interactively, we need
-# to make sure the new version is downloaded and installed.  As such, the
-# stamp name needs to include the version.
-#
-STAMP_GO_TOOLCHAIN =		$(MAKE_STAMPS_DIR)/go-toolchain-$(GO_VERSION)
-
-#
-# A regular "make clean" should remove any cached build artefacts from GOPATH.
-#
-CLEAN_FILES +=			$(GO_GOPATH)
diff --git a/tools/mk/Makefile.go_prebuilt.targ b/tools/mk/Makefile.go_prebuilt.targ
deleted file mode 100644
index 17292ef..0000000
--- a/tools/mk/Makefile.go_prebuilt.targ
+++ /dev/null
@@ -1,55 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.go_prebuilt.targ: Makefile for obtaining a prebuilt Go toolchain.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# For usage documentation, see the comments in "Makefile.go_prebuilt.defs".
-#
-
-ifndef GO_TARBALL
-$(error You must include Makefile.go_prebuilt.defs first.)
-endif
-
-#
-# Download a prebuilt copy of the Go toolchain.  There are not presently builds
-# available for illumos systems on the official Go site, so we have an
-# appropriate build stored on a Joyent server.
-#
-# Note that the GOOS and GOARCH values provided here are for the toolchain to
-# run on this machine: the build machine.  The Go toolchain is a cross
-# compiler, and the GO_GOOS and GO_GOARCH make variables represent the intended
-# _target_ for any executables built with the Go compiler.  Though it is
-# likely, at least for now, that these values are the same in our environment
-# for the build and target machines, they are nonetheless distinct concepts and
-# the use of GO_GOOS and GO_GOARCH here would not be correct.
-#
-$(GO_TARBALL):
-	rm -f $@
-	mkdir -p $(@D)
-	tools/download_go $(GO_PREBUILT_VERSION) solaris amd64 $(CACHE_DIR)
-
-#
-# Extract the Go toolchain.  This stamp includes the version number of the
-# Go toolchain, ensuring a new download and extraction if the version changes.
-#
-$(STAMP_GO_TOOLCHAIN): $(GO_TARBALL)
-	$(MAKE_STAMP_REMOVE)
-	rm -rf $(GO_INSTALL)
-	mkdir $(GO_INSTALL)
-	cd $(GO_INSTALL) && tar xfj $(TOP)/$(GO_TARBALL)
-	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index 2129742..0000000
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,159 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates downloading and bundling a prebuilt node.js
-# build (using the 'sdcnode' distro builds). This is an alternative to
-# the "Makefile.node.*" makefiles for *building* a node from source.
-#
-# Usage:
-#
-# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
-#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
-#   below.
-# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
-# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
-#   Makefile.
-# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
-#   or `$(NPM_EXEC)`. E.g.:
-#
-#		node_modules/restify: deps/restify $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-#   or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#		node_modules/restify: deps/restify | $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-# - Use `$(NPM)` or `$(NODE)` to use your node build.
-# - Include the "$(NODE_INSTALL)" tree in your release package.
-#
-#
-# When including this Makefile, you MUST also specify:
-#
-#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
-#				package to use. Typically this is one of the
-#				node version tags, e.g. "v0.6.18" but it
-#				can be any commitish.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
-#				can either be a *local directory* or *a
-#				URL* dir (with trailing '/') which serves
-#				Apache/Nginx dir listing HTML.
-#				(default: sdcnode master build dir on stuff)
-#
-#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
-#				configuration builds of node, e.g. say a
-#				build configured `--without-ssl`. These
-#				special configurations are given a tag, e.g.
-#				'gz', that is used in the filename. Optionally
-#				specify a tag name here.
-#				(default: empty)
-#
-#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
-#				from which to pull. Generally one should stick
-#				with the default.
-#				(default: master)
-#
-#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
-#				for an sdcnode build that you want to use (potential compat
-#				issues be damned), then set this to the UUID of the sdcnode
-#				build you want. See here for available build image uuids:
-#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#
-# Dev Notes:
-#
-# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
-# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
-# included to ensure an exact match with the build machine. This name (e.g.
-# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
-# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
-# downloaded and extracted into "NODE_INSTALL".
-#
-# The "*_EXEC" vars are set to named symlinks, e.g.
-# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
-# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
-# node install.
-#
-# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
-# package naming.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
-
-
-BUILD		?= build
-NODE_INSTALL	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL) \
-	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-
-NODE_PREBUILT_BRANCH ?= master
-NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
-ifeq ($(NODE_PREBUILT_TAG),)
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
-else
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
-endif
-NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
-NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
-ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
-	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
-	endif
-else
-	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
-	endif
-endif
-ifeq ($(NODE_PREBUILT_TARBALL),)
-	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
-endif
-
-
-# Prebuild-specific paths for the "*_EXEC" vars to ensure that
-# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
-# choice changes) causes a install of the new node.
-NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
-NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
-NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
-
-#
-# These paths should be used during the build process to invoke Node and
-# Node-related build tools like NPM.  All paths are fully qualified so that
-# they work regardless of the current working directory at the point of
-# invocation.
-#
-# Note that where PATH is overridden, the value chosen must cause execution of
-# "node" to find the same binary to which the NODE macro refers.
-#
-NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
-NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
deleted file mode 100644
index 6877333..0000000
--- a/tools/mk/Makefile.node_prebuilt.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
-# build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-
-
-NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
-
-
-# TODO: remove this limitation
-# Limitation: currently presuming that the NODE_INSTALL basename is
-# 'node' and that sdcnode tarballs have a 'node' top-level dir.
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
-		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
-	rm -rf $(NODE_INSTALL) \
-		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-	mkdir -p $(shell dirname $(NODE_INSTALL))
-	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
-		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
-		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
-	else \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
-	fi
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.smf.defs b/tools/mk/Makefile.smf.defs
deleted file mode 100644
index b988bbe..0000000
--- a/tools/mk/Makefile.smf.defs
+++ /dev/null
@@ -1,40 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.defs: common targets for SMF manifests
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile uses the following definitions:
-#
-#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
-#				substitutions will be made on these files:
-#
-#		@@NODE@@	path to installed node
-#
-# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
-# It also updates the "check" target to check the XML syntax of all manifests,
-# generated or otherwise.
-#
-# To use this file, be sure to also include Makefile.smf.targ after defining
-# targets.
-#
-
-SED 		?= sed
-SMF_DTD		?= tools/service_bundle.dtd.1
-XMLLINT		?= xmllint --noout
-
-SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
-CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
deleted file mode 100644
index f78de96..0000000
--- a/tools/mk/Makefile.smf.targ
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.targ: see Makefile.smf.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-.PHONY: check-manifests
-check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
-
-%.smfchk: %
-	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
-
-check:: check-manifests
-
-$(SMF_MANIFESTS): %: %.in
-	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
deleted file mode 100644
index 54edf0e..0000000
--- a/tools/mk/Makefile.targ
+++ /dev/null
@@ -1,334 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.targ: common targets.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile defines several useful targets and rules. You can use it by
-# including it from a Makefile that specifies some of the variables below.
-#
-# Targets defined in this Makefile:
-#
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
-#
-#	clean	Removes built files
-#
-#	docs	Builds restdown documentation in docs/
-#
-#	prepush	Depends on "check" and "test"
-#
-#	test	Does nothing (you should override this)
-#
-#	xref	Generates cscope (source cross-reference index)
-#
-# For details on what these targets are supposed to do, see the Joyent
-# Engineering Guide.
-#
-# To make use of these targets, you'll need to set some of these variables. Any
-# variables left unset will simply not be used.
-#
-#	BASH_FILES	Bash scripts to check for syntax
-#			(paths relative to top-level Makefile)
-#
-#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
-#			that files generated by targets in this Makefile are
-#			automatically included in CLEAN_FILES.  These include
-#			restdown-generated HTML and JSON files.
-#
-#	DOC_FILES	Restdown (documentation source) files. These are
-#			assumed to be contained in "docs/", and must NOT
-#			contain the "docs/" prefix.
-#
-#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
-#	JSL_CONF_WEB	(paths relative to top-level Makefile)
-#
-#			Node.js and Web configuration files are separate
-#			because you'll usually want different global variable
-#			configurations.  If no file is specified, none is given
-#			to jsl, which causes it to use a default configuration,
-#			which probably isn't what you want.
-#
-#	JSL_FILES_NODE	JavaScript files to check with Node config file.
-#	JSL_FILES_WEB	JavaScript files to check with Web config file.
-#
-#	JSON_FILES	JSON files to be validated
-#
-#	JSSTYLE_FILES	JavaScript files to be style-checked
-#
-# You can also override these variables:
-#
-#	BASH		Path to bash (default: "bash")
-#
-#	CSCOPE_DIRS	Directories to search for source files for the cscope
-#			index. (default: ".")
-#
-#	JSL		Path to JavaScriptLint (default: "jsl")
-#
-#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
-#	JSL_FLAGS_WEB
-#	JSL_FLAGS
-#
-#	JSON		Path to json tool (default: "json")
-#
-#	JSSTYLE		Path to jsstyle (default: "jsstyle")
-#
-#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
-#
-#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
-#			If you want to use, say, '.restdown' instead, then set
-#			'RESTDOWN_EXT=.restdown' in your Makefile.
-#
-
-#
-# Defaults for the various tools we use.
-#
-BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
-CP		?= cp
-CSCOPE		?= cscope
-CSCOPE_DIRS	?= .
-JSL		?= jsl
-JSON		?= json
-JSSTYLE		?= jsstyle
-MKDIR		?= mkdir -p
-MV		?= mv
-RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .md
-RMTREE		?= rm -rf
-JSL_FLAGS  	?= --nologo --nosummary
-
-ifeq ($(shell uname -s),SunOS)
-	TAR	?= gtar
-else
-	TAR	?= tar
-endif
-
-
-#
-# Defaults for other fixed values.
-#
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
-DOC_BUILD	= $(BUILD)/docs/public
-
-#
-# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
-#
-ifneq ($(origin JSL_CONF_NODE), undefined)
-	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
-endif
-
-ifneq ($(origin JSL_CONF_WEB), undefined)
-	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
-endif
-
-#
-# Targets. For descriptions on what these are supposed to do, see the
-# Joyent Engineering Guide.
-#
-
-#
-# Instruct make to keep around temporary files. We have rules below that
-# automatically update git submodules as needed, but they employ a deps/*/.git
-# temporary file. Without this directive, make tries to remove these .git
-# directories after the build has completed.
-#
-.SECONDARY: $($(wildcard deps/*):%=%/.git)
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# These recipes make heavy use of dynamically-created phony targets. The parent
-# Makefile defines a list of input files like BASH_FILES. We then say that each
-# of these files depends on a fake target called filename.bashchk, and then we
-# define a pattern rule for those targets that runs bash in check-syntax-only
-# mode. This mechanism has the nice properties that if you specify zero files,
-# the rule becomes a noop (unlike a single rule to check all bash files, which
-# would invoke bash with zero files), and you can check individual files from
-# the command line with "make filename.bashchk".
-#
-.PHONY: check-bash
-check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
-
-%.bashchk: %
-	$(BASH) -n $^
-
-%.bashstyle: %
-	$(BASHSTYLE) $^
-
-.PHONY: check-json
-check-json: $(JSON_FILES:%=%.jsonchk)
-
-%.jsonchk: %
-	$(JSON) --validate -f $^
-
-#
-# The above approach can be slow when there are many files to check because it
-# requires that "make" invoke the check tool once for each file, rather than
-# passing in several files at once.  For the JavaScript check targets, we define
-# a variable for the target itself *only if* the list of input files is
-# non-empty.  This avoids invoking the tool if there are no files to check.
-#
-JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
-.PHONY: check-jsl-node
-check-jsl-node: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
-.PHONY: check-jsl-web
-check-jsl-web: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
-
-.PHONY: check-jsl
-check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
-
-JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
-
-.PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
-	@echo check ok
-
-.PHONY: clean
-clean::
-	-$(RMTREE) $(CLEAN_FILES)
-
-.PHONY: distclean
-distclean:: clean
-	-$(RMTREE) $(DISTCLEAN_FILES)
-
-CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
-CLEAN_FILES += $(CSCOPE_FILES)
-
-.PHONY: xref
-xref: cscope.files
-	$(CSCOPE) -bqR
-
-.PHONY: cscope.files
-cscope.files:
-	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
-	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
-
-#
-# The "docs" target is complicated because we do several things here:
-#
-#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
-#
-#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
-#        functions as a complete copy of the documentation that could be
-#        mirrored or served over HTTP.
-#
-#    (3) Then copy any directories and media from docs/media into
-#        $(DOC_BUILD)/media. This allows projects to include their own media,
-#        including files that will override same-named files provided by
-#        restdown.
-#
-# Step (3) is the surprisingly complex part: in order to do this, we need to
-# identify the subdirectories in docs/media, recreate them in
-# $(DOC_BUILD)/media, then do the same with the files.
-#
-DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
-DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
-DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
-
-DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
-DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
-DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
-
-#
-# Like the other targets, "docs" just depends on the final files we want to
-# create in $(DOC_BUILD), leveraging other targets and recipes to define how
-# to get there.
-#
-.PHONY: docs
-docs::							\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
-	$(DOC_MEDIA_FILES_BUILD)
-
-#
-# We keep the intermediate files so that the next build can see whether the
-# files in DOC_BUILD are up to date.
-#
-.PRECIOUS:					\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
-
-#
-# We do clean those intermediate files, as well as all of DOC_BUILD.
-#
-CLEAN_FILES +=					\
-	$(DOC_BUILD)				\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
-
-#
-# Before installing the files, we must make sure the directories exist. The |
-# syntax tells make that the dependency need only exist, not be up to date.
-# Otherwise, it might try to rebuild spuriously because the directory itself
-# appears out of date.
-#
-$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
-
-$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
-	$(MKDIR) $(shell dirname $@)
-	$(CP) $< $@
-
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
-    $(EXTRA_DOC_DEPS)
-	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
-
-$(DOC_BUILD):
-	$(MKDIR) $@
-
-$(DOC_MEDIA_DIRS_BUILD):
-	$(MKDIR) $@
-
-#
-# The default "test" target does nothing. This should usually be overridden by
-# the parent Makefile. It's included here so we can define "prepush" without
-# requiring the repo to define "test".
-#
-.PHONY: test
-test:
-
-.PHONY: prepush
-prepush: check test
-
-#
-# This rule automatically exposes every "stamp" file as a target that can be
-# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
-# defined thus:
-#
-#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
-#
-# ... this can be invoked manually as "make stamp-expensive-result".  Note that
-# these phony targets are essentially just for interactive usage.  Targets
-# should be specified to depend on the macro containing the stamp file name.
-#
-# See also the comments in "Makefile.defs".
-#
-stamp-%: $(MAKE_STAMPS_DIR)/%
-	@:
