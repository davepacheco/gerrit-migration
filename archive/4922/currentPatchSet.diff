commit a94d916af7b541a3db7a06c2c7cb4123555e9174 (refs/changes/22/4922/8)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-10-17T12:34:27-04:00 (12 months ago)
    
    OS-7281 sysinfo should have tests
    Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>
    Approved by: Todd Whiteman <todd.whiteman@joyent.com>

diff --git a/src/Makefile b/src/Makefile
index 680649c4..9ededccd 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -122,6 +122,7 @@ JS_CHECK_TARGETS=\
 	vm/tests/test-send-recv.js \
 	vm/tests/test-snapshots.js \
 	vm/tests/test-spoof-opts.js \
+	vm/tests/test-sysinfo.js \
 	vm/tests/test-tmpfs.js \
 	vm/tests/test-update.js \
 	vm/tests/test-vrrp-nics.js \
diff --git a/src/vm/tests/common.js b/src/vm/tests/common.js
index f7474da4..dbb99150 100644
--- a/src/vm/tests/common.js
+++ b/src/vm/tests/common.js
@@ -28,6 +28,7 @@ var f = require('util').format;
 var cp = require('child_process');
 
 var assert = require('/usr/node/node_modules/assert-plus');
+var jsprim = require('/usr/vm/node_modules/jsprim');
 
 function vmadm(args, opts, callback) {
     assert.arrayOfString(args, 'args');
@@ -75,14 +76,29 @@ function vmadm(args, opts, callback) {
     });
 }
 
-function zfs(args, callback) {
+/*
+ * Wrapper for `cp.execFile` that will:
+ *
+ * 1. Use `utf-8` as the default encoding for output.
+ * 2. Callback with an error if any stderr is generated.
+ * 3. Take command and arguments as a single argument.
+ *
+ * Example:
+ *
+ * exec(['ls', '-lha'], function (err, stdout) {
+ * });
+ */
+function exec(args, callback) {
     assert.arrayOfString(args, 'args');
     assert.func(callback, 'callback');
 
+    args = jsprim.deepCopy(args);
+
+    var cmd = args.shift();
     var opts = {
         encoding: 'utf8'
     };
-    cp.execFile('/usr/sbin/zfs', args, opts, function (err, stdout, stderr) {
+    cp.execFile(cmd, args, opts, function (err, stdout, stderr) {
         if (err) {
             callback(err);
             return;
@@ -97,6 +113,22 @@ function zfs(args, callback) {
     });
 }
 
+/*
+ * Call zfs with arguments (same output as `exec` above), example:
+ *
+ * zfs(['list', '-Hp'], function (err, stdout) {
+ * });
+ */
+function zfs(args, callback) {
+    assert.arrayOfString(args, 'args');
+    assert.func(callback, 'callback');
+
+    args = jsprim.deepCopy(args);
+    args.unshift('/usr/sbin/zfs');
+
+    exec(args, callback);
+}
+
 /*
  * nodeunit-plus `t.ifError` is weird and ignores the second (msg) argument.
  * This function is meant to be a replacement for `t.ifError` that honors the
@@ -125,5 +157,6 @@ function ifError(t, err, msg) {
 module.exports = {
     ifError: ifError,
     vmadm: vmadm,
+    exec: exec,
     zfs: zfs
 };
diff --git a/src/vm/tests/test-sysinfo.js b/src/vm/tests/test-sysinfo.js
new file mode 100644
index 00000000..589ded54
--- /dev/null
+++ b/src/vm/tests/test-sysinfo.js
@@ -0,0 +1,92 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ *
+ */
+
+var fs = require('fs');
+
+var common = require('./common');
+
+var SYSINFO_PROG = '/usr/bin/sysinfo';
+var SYSINFO_FILE = '/tmp/.sysinfo.json';
+
+// this puts test stuff in global, so we need to tell jsl about that:
+/* jsl:import ../node_modules/nodeunit-plus/index.js */
+require('nodeunit-plus');
+
+function parseSysinfoOutput(t, out) {
+    var info;
+
+    try {
+        info = JSON.parse(out);
+    } catch (e) {
+        common.ifError(t, e, 'parse sysinfo output');
+        return;
+    }
+
+    t.equal(typeof (info), 'object', 'output is an object');
+}
+
+test('sysinfo executable', function (t) {
+    fs.stat(SYSINFO_PROG, function (err, stats) {
+        common.ifError(t, err, 'stat sysinfo');
+
+        /* jsl:ignore octal_number */
+        var mode = stats.mode & 0777;
+        t.ok(mode & 0111, 'sysinfo executable');
+        /* jsl:end */
+
+        t.end();
+    });
+});
+
+test('sysinfo (no args)', function (t) {
+    common.exec([SYSINFO_PROG], function (err, out) {
+        common.ifError(t, err, 'exec sysinfo');
+
+        parseSysinfoOutput(t, out);
+
+        t.end();
+    });
+});
+
+test('sysinfo -f', function (t) {
+    common.exec([SYSINFO_PROG, '-f'], function (err, out) {
+        common.ifError(t, err, 'exec sysinfo');
+
+        parseSysinfoOutput(t, out);
+
+        t.end();
+    });
+});
+
+test('sysinfo file: ' + SYSINFO_FILE, function (t) {
+    fs.readFile(SYSINFO_FILE, 'utf8', function (err, out) {
+        common.ifError(t, err, 'read sysinfo file');
+
+        parseSysinfoOutput(t, out);
+
+        t.end();
+    });
+});
