commit d10200a5d9bbaa9bd96fc662213e1a9a438d5d39 (refs/changes/05/1005/1)
Author: Chris Burroughs <chris.burroughs@joyent.com>
Date:   2016-11-30T13:56:05-05:00 (2 years, 10 months ago)
    
    triton instance firewall stuff

diff --git a/lib/do_instance/do_disable_firewall.js b/lib/do_instance/do_disable_firewall.js
index 370c542..7f51b39 100644
--- a/lib/do_instance/do_disable_firewall.js
+++ b/lib/do_instance/do_disable_firewall.js
@@ -14,6 +14,7 @@ var assert = require('assert-plus');
 var format = require('util').format;
 var vasync = require('vasync');
 
+var common = require('../common');
 var errors = require('../errors');
 
 
@@ -50,28 +51,33 @@ function do_disable_firewall(subcmd, opts, args, cb) {
         });
     }
 
-    vasync.forEachParallel({
-        inputs: args,
-        func: function disableOne(name, nextInst) {
-            cli.tritonapi.disableInstanceFirewall({
-                id: name
-            }, function (err, fauxInst) {
-                if (err) {
-                    nextInst(err);
-                    return;
-                }
-
-                console.log('Disabling firewall for instance "%s"', name);
-
-                if (opts.wait) {
-                    wait(name, fauxInst.id, nextInst);
-                } else {
-                    nextInst();
-                }
-            });
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
         }
-    }, function (err) {
-        cb(err);
+        vasync.forEachParallel({
+            inputs: args,
+            func: function disableOne(name, nextInst) {
+                cli.tritonapi.disableInstanceFirewall({
+                    id: name
+                }, function (err, fauxInst) {
+                    if (err) {
+                        nextInst(err);
+                        return;
+                    }
+
+                    console.log('Disabling firewall for instance "%s"', name);
+
+                    if (opts.wait) {
+                        wait(name, fauxInst.id, nextInst);
+                    } else {
+                        nextInst();
+                    }
+                });
+            }
+        }, function (err) {
+            cb(err);
+        });
     });
 }
 
diff --git a/lib/do_instance/do_enable_firewall.js b/lib/do_instance/do_enable_firewall.js
index ea15610..97f1dfb 100644
--- a/lib/do_instance/do_enable_firewall.js
+++ b/lib/do_instance/do_enable_firewall.js
@@ -14,6 +14,7 @@ var assert = require('assert-plus');
 var format = require('util').format;
 var vasync = require('vasync');
 
+var common = require('../common');
 var errors = require('../errors');
 
 
@@ -50,28 +51,33 @@ function do_enable_firewall(subcmd, opts, args, cb) {
         });
     }
 
-    vasync.forEachParallel({
-        inputs: args,
-        func: function enableOne(name, nextInst) {
-            cli.tritonapi.enableInstanceFirewall({
-                id: name
-            }, function (err, fauxInst) {
-                if (err) {
-                    nextInst(err);
-                    return;
-                }
-
-                console.log('Enabling firewall for instance "%s"', name);
-
-                if (opts.wait) {
-                    wait(name, fauxInst.id, nextInst);
-                } else {
-                    nextInst();
-                }
-            });
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
         }
-    }, function (err) {
-        cb(err);
+        vasync.forEachParallel({
+            inputs: args,
+            func: function enableOne(name, nextInst) {
+                cli.tritonapi.enableInstanceFirewall({
+                    id: name
+                }, function (err, fauxInst) {
+                    if (err) {
+                        nextInst(err);
+                        return;
+                    }
+
+                    console.log('Enabling firewall for instance "%s"', name);
+
+                    if (opts.wait) {
+                        wait(name, fauxInst.id, nextInst);
+                    } else {
+                        nextInst();
+                    }
+                });
+            }
+        }, function (err) {
+            cb(err);
+        });
     });
 }
 
diff --git a/lib/do_instance/do_fwrules.js b/lib/do_instance/do_fwrules.js
index bf06fad..00eac1f 100644
--- a/lib/do_instance/do_fwrules.js
+++ b/lib/do_instance/do_fwrules.js
@@ -41,41 +41,46 @@ function do_fwrules(subcmd, opts, args, cb) {
     var id = args[0];
 
     var cli = this.top;
-    cli.tritonapi.listInstanceFirewallRules({
-        id: id
-    }, function onRules(err, rules) {
-        if (err) {
-            cb(err);
-            return;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
         }
-
-        if (opts.json) {
-            common.jsonStream(rules);
-        } else {
-            var columns = COLUMNS_DEFAULT;
-
-            if (opts.o) {
-                columns = opts.o;
-            } else if (opts.long) {
-                columns = COLUMNS_LONG;
+        cli.tritonapi.listInstanceFirewallRules({
+            id: id
+        }, function onRules(err, rules) {
+            if (err) {
+                cb(err);
+                return;
             }
 
-            columns = columns.toLowerCase().split(',');
-            var sort = opts.s.toLowerCase().split(',');
-
-            if (columns.indexOf('shortid') !== -1) {
-                rules.forEach(function (rule) {
-                    rule.shortid = common.normShortId(rule.id);
+            if (opts.json) {
+                common.jsonStream(rules);
+            } else {
+                var columns = COLUMNS_DEFAULT;
+
+                if (opts.o) {
+                    columns = opts.o;
+                } else if (opts.long) {
+                    columns = COLUMNS_LONG;
+                }
+
+                columns = columns.toLowerCase().split(',');
+                var sort = opts.s.toLowerCase().split(',');
+
+                if (columns.indexOf('shortid') !== -1) {
+                    rules.forEach(function (rule) {
+                        rule.shortid = common.normShortId(rule.id);
+                    });
+                }
+
+                tabula(rules, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort
                 });
             }
-
-            tabula(rules, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort
-            });
-        }
-        cb();
+            cb();
+        });
     });
 }
 
