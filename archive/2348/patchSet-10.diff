From 631a91c3d0000d555f593986d207287746e2b2a8 Mon Sep 17 00:00:00 2001
From: Tim Kordas <tim.kordas@joyent.com>
Date: Tue, 8 Aug 2017 16:04:58 -0700
Subject: [PATCH] MANTA-3311 mako_gc carefully checks lock file but barrels on
 if it can't create one Reviewed by: David Pacheco <dap@joyent.com>

---
 bin/mako_gc.sh | 49 ++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 40 insertions(+), 9 deletions(-)

diff --git a/bin/mako_gc.sh b/bin/mako_gc.sh
index 3e4dfa6..f292bce 100755
--- a/bin/mako_gc.sh
+++ b/bin/mako_gc.sh
@@ -42,7 +42,8 @@ MPATH=/manta_gc/mako/$MANTA_STORAGE_ID
 PID=$$
 SCRIPT=$(basename $0)
 TMP_DIR=/tmp/mako_gc
-PID_FILE=/tmp/mako_gc.pid
+LOCKDIR=/tmp/mako_gc_lock
+PIDFILE=$LOCKDIR/mako_gc.pid
 TOMB_DATE=$(date "+%Y-%m-%d")
 TOMB_ROOT=/manta/tombstone
 TOMB_DIR=$TOMB_ROOT/$TOMB_DATE
@@ -186,18 +187,48 @@ function manta_delete() {
 : ${MANTA_STORAGE_ID:?"Manta storage id must be set."}
 
 # Check the last pid to see if a previous cron is still running...
-LAST_PID=$(cat $PID_FILE 2>/dev/null)
+# Cribbed from: http://wiki.bash-hackers.org/howto/mutex
+if mkdir "${LOCKDIR}" &>/dev/null; then
+
+    # lock succeeded, install signal handlers before storing the PID just in case
+    # storing the PID fails
+    trap 'ECODE=$?;
+          echo "[mako_gc] Removing lock. Exit: ${ETXT[ECODE]}($ECODE)" >&2
+          rm -rf "${LOCKDIR}"' 0
+    echo "$$" >"${PIDFILE}"
+    # the following handler will exit the script upon receiving these signals
+    # the trap on "0" (EXIT) from above will be triggered by this trap's "exit" command!
+    trap 'echo "[mako_gc] Killed by a signal." >&2
+          exit ${ENO_RECVSIG}' 1 2 3 15
+    echo "success, installed signal handlers"
+
+else
+
+    # lock failed, check if the other PID is alive
+    OTHERPID="$(cat "${PIDFILE}")"
+
+    # if cat isn't able to read the file, another instance is probably
+    # about to remove the lock -- exit, we're *still* locked
+    #  Thanks to Grzegorz Wierzowiecki for pointing out this race condition on
+    #  http://wiki.grzegorz.wierzowiecki.pl/code:mutex-in-bash
+    if [ $? != 0 ]; then
+      echo "lock failed, PID ${OTHERPID} is active" >&2
+      exit ${ENO_LOCKFAIL}
+    fi
 
-if [[ -n "$LAST_PID" ]]; then
-    ps -p $LAST_PID >/dev/null
-    if [[ $? -eq 0 ]]; then
-        echo "$0 process still running.  Exiting..."
-        exit 1
+    if ! kill -0 $OTHERPID &>/dev/null; then
+        # lock is stale, remove it and restart
+        echo "removing stale lock of nonexistant PID ${OTHERPID}" >&2
+        rm -rf "${LOCKDIR}"
+        echo "[mako_gc] restarting myself" >&2
+        exec "$0" "$@"
+    else
+        # lock is valid and OTHERPID is active - exit, we're locked!
+        echo "lock failed, PID ${OTHERPID} is active" >&2
+        exit ${ENO_LOCKFAIL}
     fi
 fi
 
-echo -n $PID >$PID_FILE
-
 # Ok, we're good to start gc
 log "starting gc"
 
-- 
2.21.0

