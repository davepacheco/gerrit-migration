From a7646e2fc6b16ec5747708e785d3d30e202a53f1 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 14 Mar 2017 15:19:06 -0700
Subject: [PATCH] joyent/node-cueball#102 HTTP pinger hangs

---
 CHANGES.adoc          |  9 +++++++++
 lib/connection-fsm.js | 32 +++++++++++++++++++++++++++++++-
 lib/errors.js         | 13 ++++++++++++-
 package.json          |  2 +-
 test/pool.test.js     |  4 +---
 5 files changed, 54 insertions(+), 6 deletions(-)

diff --git a/CHANGES.adoc b/CHANGES.adoc
index 9210a4f..82c8f93 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -6,6 +6,15 @@ toc::[]
 
 ## v2.x
 
+### v2.2.1
+
+Maintenance release.
+
+Bugs fixed:
+
+ - #102 HTTP Agent pinger hangs. HttpAgent's "ping" option has been broken
+   since 2.0.0.
+
 ### v2.2.0
 
 New minor release, due to addition of new API.
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 2b776fd..88f3084 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -503,6 +503,32 @@ function CueBallClaimHandle(options) {
 }
 mod_util.inherits(CueBallClaimHandle, FSM);
 
+Object.defineProperty(CueBallClaimHandle.prototype, 'writable', {
+	get: function () {
+		throw (new mod_errors.ClaimHandleMisusedError());
+	}
+});
+
+Object.defineProperty(CueBallClaimHandle.prototype, 'readable', {
+	get: function () {
+		throw (new mod_errors.ClaimHandleMisusedError());
+	}
+});
+
+CueBallClaimHandle.prototype.on = function (evt) {
+	if (evt === 'readable' || evt === 'close') {
+		throw (new mod_errors.ClaimHandleMisusedError());
+	}
+	return (EventEmitter.prototype.on.apply(this, arguments));
+};
+
+CueBallClaimHandle.prototype.once = function (evt) {
+	if (evt === 'readable' || evt === 'close') {
+		throw (new mod_errors.ClaimHandleMisusedError());
+	}
+	return (EventEmitter.prototype.once.apply(this, arguments));
+};
+
 CueBallClaimHandle.prototype.try = function (slot) {
 	mod_assert.ok(this.isInState('waiting'), 'ClaimHandle#try may only ' +
 	    'be called in state "waiting" (is in "' + this.getState() + '")');
@@ -1016,7 +1042,11 @@ function doPingCheck(fsm, checker) {
 		    'at claim\n' +
 		    'at cueball.doPingCheck\n' +
 		    'at cueball.doPingCheck\n',
-		callback: checker,
+		callback: function pingCheckAdapter(err, hdl, conn) {
+			if (err)
+				return;
+			checker(hdl, conn);
+		},
 		log: fsm.csf_log,
 		claimTimeout: Infinity
 	};
diff --git a/lib/errors.js b/lib/errors.js
index 930c045..13da0d5 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -12,12 +12,23 @@ module.exports = {
 	ConnectionTimeoutError: ConnectionTimeoutError,
 	ConnectionClosedError: ConnectionClosedError,
 	PoolFailedError: PoolFailedError,
-	PoolStoppingError: PoolStoppingError
+	PoolStoppingError: PoolStoppingError,
+	ClaimHandleMisusedError: ClaimHandleMisusedError
 };
 
 const mod_util = require('util');
 const mod_assert = require('assert-plus');
 
+function ClaimHandleMisusedError() {
+	if (Error.captureStackTrace)
+		Error.captureStackTrace(this, ClaimHandleMisusedError);
+	this.name = 'ClaimHandleMisusedError';
+	this.message = 'CueBall claim handle used as if it was a ' +
+	    'socket. Check the order and number of arguments in ' +
+	    'your claim callbacks.';
+}
+mod_util.inherits(ClaimHandleMisusedError, Error);
+
 function ClaimTimeoutError(pool) {
 	if (Error.captureStackTrace)
 		Error.captureStackTrace(this, ClaimTimeoutError);
diff --git a/package.json b/package.json
index d5523c4..335e6a9 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.2.0",
+  "version": "2.2.1",
   "description": "manage a pool of connections to a multi-node service where nodes are listed in DNS",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index 3806421..de7543a 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -627,9 +627,7 @@ mod_tape.test('pool ping checker', function (t) {
 			t.end();
 	});
 
-	function doCheck(err, hdl, conn) {
-		if (err)
-			return;
+	function doCheck(hdl, conn) {
 		conn.checked = true;
 		hdl.release();
 	}
-- 
2.21.0

