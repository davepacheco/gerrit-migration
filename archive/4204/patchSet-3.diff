From 6f656f63876c9f0242eb1b0ce226965c5389837a Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Thu, 21 Jun 2018 11:22:58 -0700
Subject: [PATCH] TRITON-53 x-account image clone

---
 CHANGES.md                   |   5 ++
 lib/cloudapi2.js             |  27 ++++++++-
 lib/do_image/do_clone.js     | 108 +++++++++++++++++++++++++++++++++++
 lib/do_image/do_list.js      |  61 ++++++++++++++++----
 lib/do_image/index.js        |   2 +
 lib/do_instance/do_create.js |   8 +++
 lib/tritonapi.js             |  36 ++++++++++++
 package.json                 |   2 +-
 8 files changed, 235 insertions(+), 14 deletions(-)
 create mode 100644 lib/do_image/do_clone.js

diff --git a/CHANGES.md b/CHANGES.md
index 0d2c70d..b982964 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -14,6 +14,11 @@ Known issues:
   decrypting) the account key itself. This makes using Docker simpler with keys
   in an SSH Agent.
 
+## 6.1.0
+
+- [TRITON-53] x-account image clone. A user can make a copy of a shared image
+  using the `triton image clone` cli command.
+
 ## 6.0.0
 
 This release containes some breaking changes with the --affinity flag to
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 26f80fd..93b8110 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -775,7 +775,7 @@ CloudApi.prototype.exportImage = function exportImage(opts, cb) {
  *      - {Object} fields  Required.  The fields to update in the image.
  * @param {Function} cb of the form `function (err, body, res)`
  */
-CloudApi.prototype.updateImage = function shareImage(opts, cb) {
+CloudApi.prototype.updateImage = function updateImage(opts, cb) {
     assert.uuid(opts.id, 'id');
     assert.object(opts.fields, 'fields');
     assert.func(cb, 'cb');
@@ -793,6 +793,31 @@ CloudApi.prototype.updateImage = function shareImage(opts, cb) {
     });
 };
 
+/**
+ * Clone an image.
+ * <http://apidocs.joyent.com/cloudapi/#CloneImage>
+ *
+ * @param {Object} opts
+ *      - {UUID} id  Required.  The id of the image to update.
+ * @param {Function} cb of the form `function (err, body, res)`
+ */
+CloudApi.prototype.cloneImage = function cloneImage(opts, cb) {
+    assert.uuid(opts.id, 'id');
+    assert.func(cb, 'cb');
+
+    this._request({
+        method: 'POST',
+        path: format('/%s/images/%s?action=clone', this.account, opts.id),
+        data: {}
+    }, function (err, req, res, body) {
+        if (err) {
+            cb(err, null, res);
+            return;
+        }
+        cb(null, body, res);
+    });
+};
+
 /**
  * Wait for an image to go one of a set of specfic states.
  *
diff --git a/lib/do_image/do_clone.js b/lib/do_image/do_clone.js
new file mode 100644
index 0000000..fdeafff
--- /dev/null
+++ b/lib/do_image/do_clone.js
@@ -0,0 +1,108 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ *
+ * `triton image clone ...`
+ */
+
+var vasync = require('vasync');
+
+var common = require('../common');
+var errors = require('../errors');
+
+// ---- the command
+
+function do_clone(subcmd, opts, args, cb) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length !== 1) {
+        cb(new errors.UsageError(
+            'incorrect number of args: expected 1, got ' + args.length));
+        return;
+    }
+
+    var log = this.top.log;
+    var tritonapi = this.top.tritonapi;
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function cloneImage(ctx, next) {
+            log.trace({dryRun: opts.dry_run, account: ctx.account},
+                'image clone account');
+
+            if (opts.dry_run) {
+                next();
+                return;
+            }
+
+            tritonapi.cloneImage({image: args[0]}, function (err, img) {
+                if (err) {
+                    next(new errors.TritonError(err, 'error cloning image'));
+                    return;
+                }
+
+                log.trace({img: img}, 'image clone result');
+
+                if (opts.json) {
+                    console.log(JSON.stringify(img));
+                } else {
+                    console.log('Cloned image id: %s', img.id);
+                }
+
+                next();
+            });
+        }
+    ]}, function (err) {
+        cb(err);
+    });
+}
+
+do_clone.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        group: 'Other options'
+    },
+    {
+        names: ['dry-run'],
+        type: 'bool',
+        help: 'Go through the motions without actually cloning.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_clone.synopses = [
+    '{{name}} {{cmd}} [OPTIONS] IMAGE'
+];
+
+do_clone.help = [
+    /* BEGIN JSSTYLED */
+    'Clone a shared image.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "IMAGE" is an image id (a full UUID), an image name (selects the',
+    'latest, by "published_at", image with that name), an image "name@version"',
+    '(selects latest match by "published_at"), or an image short ID (ID prefix).',
+    '',
+    'Note: Only shared images can be cloned.'
+    /* END JSSTYLED */
+].join('\n');
+
+do_clone.completionArgtypes = ['tritonimage', 'none'];
+
+module.exports = do_clone;
diff --git a/lib/do_image/do_list.js b/lib/do_image/do_list.js
index 5ef8063..20123d1 100644
--- a/lib/do_image/do_list.js
+++ b/lib/do_image/do_list.js
@@ -12,6 +12,7 @@
 
 var format = require('util').format;
 var tabula = require('tabula');
+var vasync = require('vasync');
 
 var common = require('../common');
 var errors = require('../errors');
@@ -67,17 +68,44 @@ function do_list(subcmd, opts, args, callback) {
         listOpts.state = 'all';
     }
 
+    var self = this;
     var tritonapi = this.top.tritonapi;
-    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
-        if (setupErr) {
-            callback(setupErr);
-            return;
-        }
-        tritonapi.listImages(listOpts, function onRes(err, imgs, res) {
-            if (err) {
-                return callback(err);
-            }
 
+    vasync.pipeline({ arg: {}, funcs: [
+        function setupTritonApi(_, next) {
+            common.cliSetupTritonApi({cli: self.top}, next);
+        },
+        function getImages(ctx, next) {
+            tritonapi.listImages(listOpts, function onRes(err, imgs, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.imgs = imgs;
+                next();
+            });
+        },
+        function getUserAccount(ctx, next) {
+            // If there are no images that use an ACL - we don't need to fetch
+            // the account, as that is only used to check if the image is shared
+            // (i.e. the account is in the image ACL).
+            if (ctx.imgs.every(function _checkAcl(img) {
+                return !Array.isArray(img.acl) || img.acl.length === 0;
+            })) {
+                next();
+                return;
+            }
+            tritonapi.cloudapi.getAccount(function _accountCb(err, account) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.account = account;
+                next();
+            });
+        },
+        function formatImages(ctx, next) {
+            var imgs = ctx.imgs;
             if (opts.json) {
                 common.jsonStream(imgs);
             } else {
@@ -99,6 +127,14 @@ function do_list(subcmd, opts, args, callback) {
                     if (img.origin) flags.push('I');
                     if (img['public']) flags.push('P');
                     if (img.state !== 'active') flags.push('X');
+                    if (Array.isArray(img.acl) && ctx.account) {
+                        if (img.acl.indexOf(ctx.account.id) !== -1) {
+                            // This image has been shared with the account.
+                            flags.push('S');
+                        }
+                        // XXX do we add a "I have shared this image" flag too,
+                        // so that a user can see which images they have shared?
+                    }
                     img.flags = flags.length ? flags.join('') : undefined;
                 }
 
@@ -108,9 +144,9 @@ function do_list(subcmd, opts, args, callback) {
                     sort: sort
                 });
             }
-            callback();
-        });
-    });
+            next();
+        }
+    ]}, callback);
 }
 
 do_list.options = [
@@ -157,6 +193,7 @@ do_list.help = [
     '    shortid*           A short ID prefix.',
     '    flags*             Single letter flags summarizing some fields:',
     '                           "P" image is public',
+    '                           "S" is a shared image (i.e. different owner)',
     '                           "I" an incremental image (i.e. has an origin)',
     '                           "X" has a state *other* than "active"',
     '    pubdate*           Short form of "published_at" with just the date',
diff --git a/lib/do_image/index.js b/lib/do_image/index.js
index 832cd59..e719037 100644
--- a/lib/do_image/index.js
+++ b/lib/do_image/index.js
@@ -33,6 +33,7 @@ function ImageCLI(top) {
             'help',
             'list',
             'get',
+            'clone',
             'create',
             'delete',
             'export',
@@ -51,6 +52,7 @@ ImageCLI.prototype.init = function init(opts, args, cb) {
 
 ImageCLI.prototype.do_list = require('./do_list');
 ImageCLI.prototype.do_get = require('./do_get');
+ImageCLI.prototype.do_clone = require('./do_clone');
 ImageCLI.prototype.do_create = require('./do_create');
 ImageCLI.prototype.do_delete = require('./do_delete');
 ImageCLI.prototype.do_export = require('./do_export');
diff --git a/lib/do_instance/do_create.js b/lib/do_instance/do_create.js
index 7bc5291..cbedb35 100644
--- a/lib/do_instance/do_create.js
+++ b/lib/do_instance/do_create.js
@@ -289,6 +289,9 @@ function do_create(subcmd, opts, args, cb) {
                     createOpts['tag.'+key] = ctx.tags[key];
                 });
             }
+            if (opts.allow_shared_images) {
+                createOpts.allow_shared_images = true;
+            }
 
             for (var i = 0; i < opts._order.length; i++) {
                 var opt = opts._order[i];
@@ -498,6 +501,11 @@ do_create.options = [
             'Joyent-provided images, the user-script is run at every boot ' +
             'of the instance. This is a shortcut for `-M user-script=FILE`.'
     },
+    {
+        names: ['allow-shared-images'],
+        type: 'bool',
+        help: 'Allow instance creation to use a shared image.'
+    },
 
     {
         group: 'Other options'
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 92882cc..ba6605c 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -864,6 +864,42 @@ TritonApi.prototype.unshareImage = function unshareImage(opts, cb)
     });
 };
 
+/**
+ * Clone a shared image.
+ *
+ * @param {Object} opts
+ *      - {String} image The image UUID, name, or short ID.  Required.
+ * @param {Function} cb `function (err, img)`
+ *      On failure `err` is an error instance, else it is null.
+ *      On success: `img` is the cloned image object.
+ */
+TritonApi.prototype.cloneImage = function cloneImage(opts, cb)
+{
+    var self = this;
+    assert.object(opts, 'opts');
+    assert.string(opts.image, 'opts.image');
+    assert.func(cb, 'cb');
+
+    var arg = {
+        image: opts.image,
+        client: self
+    };
+    var res;
+
+    vasync.pipeline({arg: arg, funcs: [
+        _stepImg,
+        function cloudApiCloneImage(ctx, next) {
+            self.cloudapi.cloneImage({id: ctx.img.id, fields: {acl: ctx.acl}},
+                    function _cloneImageCb(err, img) {
+                res = img;
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, res);
+    });
+};
+
 /**
  * Get an active package by ID, exact name, or short ID, in that order.
  *
diff --git a/package.json b/package.json
index e0da727..2c7354f 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "6.0.0",
+  "version": "6.1.0",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
-- 
2.21.0

