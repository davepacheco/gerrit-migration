{"project":"joyent/illumos-joyent","branch":"master","id":"I3624c722e34304225990537d91a91b5583632ed0","number":"5279","subject":"OS-7465 ctfdump incorrectly adopts containers Reviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e Reviewed by: Richard Lowe \u003crichlowe@richlowe.net\u003e Approved by: Alex Wilson \u003calex.wilson@joyent.com\u003e","owner":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"url":"https://cr.joyent.us/5279","commitMessage":"OS-7465 ctfdump incorrectly adopts containers\nReviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e\nReviewed by: Richard Lowe \u003crichlowe@richlowe.net\u003e\nApproved by: Alex Wilson \u003calex.wilson@joyent.com\u003e\n","createdOn":1545410880,"lastUpdated":1545925541,"open":false,"status":"MERGED","comments":[{"timestamp":1545410880,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Uploaded patch set 1."},{"timestamp":1545413231,"reviewer":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"},"message":"Patch Set 1: Code-Review+1\n\nThe code seems fine to me.\n\nWas I wrong about the intended CTF behaviour being that types in the child container should always be preferred to those in the parent?\n\nYou don\u0027t seem to be dealing with that, and it seemed like what was happening was wrong."},{"timestamp":1545413556,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 1:\n\n\u003e The code seems fine to me.\n \u003e \n \u003e Was I wrong about the intended CTF behaviour being that types in\n \u003e the child container should always be preferred to those in the\n \u003e parent?\n \u003e \n \u003e You don\u0027t seem to be dealing with that, and it seemed like what was\n \u003e happening was wrong.\n\nWell, I\u0027m not sure I\u0027ve been able to correctly reproduce that case while I was working on this. The thing that I noticed was that we incorrectly treated something as a child. But when thinking through it a child would have types that are referenced that either refer to itself or to its parent. I\u0027m not sure how they get mixed up per se. If you can provide a bit more detail (e-mail maybe how you caused it), I\u0027ll get into that."},{"timestamp":1545414594,"reviewer":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"},"message":"Patch Set 1:\n\n\u003e Well, I\u0027m not sure I\u0027ve been able to correctly reproduce that case\n \u003e while I was working on this. The thing that I noticed was that we\n \u003e incorrectly treated something as a child. But when thinking through\n \u003e it a child would have types that are referenced that either refer\n \u003e to itself or to its parent. I\u0027m not sure how they get mixed up per\n \u003e se. If you can provide a bit more detail (e-mail maybe how you\n \u003e caused it), I\u0027ll get into that.\n\n```\n; ctfdump -c -p /kernel/amd64/genunix /lib/64/libc.so.1\n...\n\ntypedef ddi_iblock_cookie_t * Classification_t;\n...\n\n; ctfdump -t /lib/64/libc.so.1 | grep 1363\n  [1363] struct  (2 bytes)\n  \u003c1364\u003e typedef Classification_t refers to 1363\n```\n\nIf 1363 is present in the child container like this, why are we\nreporting its name, etc, as it is in the parent?  You\u0027re fixing the fact that the two objects I provided have no relation to eachother, and that\u0027s great.  But you\u0027re not fixing that we\u0027re taking info from what -- I think -- is the wrong one.\n\nI thought it was valid, if uncommon, for CTF to potentially have a type in both the child and the parent in the case for example of old style Solaris patches, so it would be possible to have the parent relationship be valid but the output be incorrect.  I think."},{"timestamp":1545416047,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 1:\n\n\u003e \u003e Well, I\u0027m not sure I\u0027ve been able to correctly reproduce that\n \u003e case\n \u003e \u003e while I was working on this. The thing that I noticed was that we\n \u003e \u003e incorrectly treated something as a child. But when thinking\n \u003e through\n \u003e \u003e it a child would have types that are referenced that either refer\n \u003e \u003e to itself or to its parent. I\u0027m not sure how they get mixed up\n \u003e per\n \u003e \u003e se. If you can provide a bit more detail (e-mail maybe how you\n \u003e \u003e caused it), I\u0027ll get into that.\n \u003e \n \u003e ```\n \u003e ; ctfdump -c -p /kernel/amd64/genunix /lib/64/libc.so.1\n \u003e ...\n \u003e \n \u003e typedef ddi_iblock_cookie_t * Classification_t;\n \u003e ...\n \u003e \n \u003e ; ctfdump -t /lib/64/libc.so.1 | grep 1363\n \u003e [1363] struct  (2 bytes)\n \u003e \u003c1364\u003e typedef Classification_t refers to 1363\n \u003e ```\n \u003e \n \u003e If 1363 is present in the child container like this, why are we\n \u003e reporting its name, etc, as it is in the parent?  You\u0027re fixing the\n \u003e fact that the two objects I provided have no relation to eachother,\n \u003e and that\u0027s great.  But you\u0027re not fixing that we\u0027re taking info\n \u003e from what -- I think -- is the wrong one.\n \u003e \n \u003e I thought it was valid, if uncommon, for CTF to potentially have a\n \u003e type in both the child and the parent in the case for example of\n \u003e old style Solaris patches, so it would be possible to have the\n \u003e parent relationship be valid but the output be incorrect.  I think.\n\nOK, thanks for clarifying that. Let me explain a bit about what has happened and why I think what we have here is sufficient for this.\n\nWhen we open a container with libctf we try to determine whether the container is a parent or not. In the initial case you describe there, we think both libc and genunix are not children. However, when ctfdump saw the -p option, it unconditionally called ctf_import(). This has the side effect of marking libc as a child. \n \nNow, to determine if a type is from the parent or child, we use the upper bit in the type identifier. If you look at something that is a child (like mac, etc.) then all of its own unique types start at 0x8000. Because of this, it\u0027s supposed to be deterministic as to whe\nther you look in the parent or in the child. If the child has a type that\u0027s \u003c 0x8000 it is in the parent, otherwise it has. \n\nIf we apply this all to this case you have, because we incorrectly mark libc.so.1 a parent of genunix, when we look at libc\u0027s types, we see that they all have a type id of \u003c 0x8000, which means we need to look in the parent. Of course, this is bogus, but that\u0027s only because I incorrectly called ctf_import() unconditionally. Arguably ctf_import() maybe shouldn\u0027t have let me, but it also has to deal with the case where we don\u0027t have a relationship established yet, hence why this is only in ctfdump.\n \nIn the case where here was both a type in the parent and the child and we aren\u0027t in this i ncorrect case, then it will be fine. If I have a foo_t in the child and I reference it, it\u0027ll be some id \u003e\u003d 0x8000. Even if the parent is updated to now have a foo_t definition and  in the patching way you describe, the child will still always refer to itself and not its  parent."},{"timestamp":1545419572,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1545420133,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1545420181,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 1: Code-Review+1\n\n(1 comment)"},{"timestamp":1545875766,"reviewer":{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"},"message":"Patch Set 1: Integration-Approval+1"},{"timestamp":1545925034,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Uploaded patch set 2: Patch Set 1 was rebased."},{"timestamp":1545925508,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Uploaded patch set 3: Commit message was updated."},{"timestamp":1545925541,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Robert Mustacchi"}],"currentPatchSet":{"number":"3","revision":"3624c722e34304225990537d91a91b5583632ed0","parents":["55d9f1841d2002d6d35deb1b07fa56c666e0d13a"],"ref":"refs/changes/79/5279/3","uploader":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"createdOn":1545925508,"author":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545413231,"by":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545420181,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1545875766,"by":{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"}},{"type":"SUBM","value":"1","grantedOn":1545925541,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/cmd/ctfdump/ctfdump.c","type":"MODIFIED","insertions":33,"deletions":-1}],"sizeInsertions":33,"sizeDeletions":-1},"patchSets":[{"number":"1","revision":"931c9dbde7c8d43977e2b63aa4fd857c915e7983","parents":["b738b17750f6942c4c4e0d907d75c86465e05646"],"ref":"refs/changes/79/5279/1","uploader":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"createdOn":1545410880,"author":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1545875766,"by":{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545413231,"by":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545420181,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/cmd/ctfdump/ctfdump.c","line":1198,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"At least one of these two strings is known to be limited/controlled by us, right?  Don\u0027t want strcmp() going off the deep end."},{"file":"usr/src/cmd/ctfdump/ctfdump.c","line":1198,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"They both come from ctf data which has an explicit string section. I don\u0027t know how well libctf handles different pathologies here, but libctf guarantees that we have classic, bounded C strings. There may of course be bugs in libctf."},{"file":"usr/src/cmd/ctfdump/ctfdump.c","line":1198,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Very good, thank you."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/ctfdump/ctfdump.c","type":"MODIFIED","insertions":33,"deletions":-1}],"sizeInsertions":33,"sizeDeletions":-1},{"number":"2","revision":"53d7fb052d559a94b0519fab26e781bedea0f169","parents":["55d9f1841d2002d6d35deb1b07fa56c666e0d13a"],"ref":"refs/changes/79/5279/2","uploader":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"createdOn":1545925034,"author":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"isDraft":false,"kind":"TRIVIAL_REBASE","approvals":[{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1545875766,"by":{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545413231,"by":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545420181,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/ctfdump/ctfdump.c","type":"MODIFIED","insertions":33,"deletions":-1}],"sizeInsertions":33,"sizeDeletions":-1},{"number":"3","revision":"3624c722e34304225990537d91a91b5583632ed0","parents":["55d9f1841d2002d6d35deb1b07fa56c666e0d13a"],"ref":"refs/changes/79/5279/3","uploader":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"createdOn":1545925508,"author":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"SUBM","value":"1","grantedOn":1545925541,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1545875766,"by":{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545413231,"by":{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1545420181,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/cmd/ctfdump/ctfdump.c","type":"MODIFIED","insertions":33,"deletions":-1}],"sizeInsertions":33,"sizeDeletions":-1}],"allReviewers":[{"name":"Alex Wilson","email":"alex@cooperi.net","username":"arekinath"},{"name":"Rich Lowe","email":"richlowe@richlowe.net","username":"richlowe"},{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}]}