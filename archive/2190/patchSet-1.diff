From c2aec2e977112e8c75d1eb1142f1369772eddb41 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 21 Jun 2017 22:59:57 +0000
Subject: [PATCH] MANATEE-335 Ship both Postgres 9.2 and 9.6 in manta-manatee
 images

---
 lib/postgresMgr.js | 230 +++++++++++++++++++++++++++++++++++++--------
 1 file changed, 189 insertions(+), 41 deletions(-)

diff --git a/lib/postgresMgr.js b/lib/postgresMgr.js
index 4efe456..b3f6827 100644
--- a/lib/postgresMgr.js
+++ b/lib/postgresMgr.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /**
@@ -25,7 +25,9 @@ var backoff = require('backoff');
 var ZfsClient = require('./zfsClient');
 var ConfParser = require('./confParser');
 var EventEmitter = require('events').EventEmitter;
+var forkexec = require('forkexec');
 var fs = require('fs');
+var path = require('path');
 var pg = require('pg');
 var Client = pg.Client;
 var shelljs = require('shelljs');
@@ -41,6 +43,42 @@ var util = require('util');
 var vasync = require('vasync');
 var verror = require('verror');
 
+
+// --- Internal helpers
+
+/**
+ * Postgres versions are made up of two components: major and minor numbers.
+ * The major numbers are things like "9.2" and "9.6", while the minor number
+ * is the part after the last dot, e.g., the "4" in "9.2.4".
+ */
+function stripMinor(version) {
+    return (version.substring(0, version.lastIndexOf('.')));
+}
+
+/**
+ * Postgres 9.2 was relaxed about values for "synchronous_standby_names", but
+ * in 9.6 we need to add double quotes around the value (as well as the single
+ * quotes).
+ */
+function formatStandbyName(name) {
+    return util.format('\'"%s"\'', name);
+}
+
+/**
+ * Update (or create) a symbolic link to point at a new path.
+ */
+function updateSymlink(srcpath, dstpath) {
+    if (!fs.existsSync(dstpath)) {
+        fs.symlinkSync(srcpath, dstpath);
+    } else if (fs.readlinkSync(dstpath) !== srcpath) {
+        fs.unlinkSync(dstpath);
+        fs.symlinkSync(srcpath, dstpath);
+    }
+}
+
+
+// --- Exported functions
+
 /**
  * The manager which manages interactions with PostgreSQL.
  * Responsible for initializing, starting, stopping, and health checking a
@@ -85,22 +123,20 @@ function PostgresMgr(options) {
     assert.string(options.dataDir, 'options.dataDir');
     // postgres
     assert.string(options.dbUser, 'options.dbUser');
-    // /opt/smartdc/manatee/etc/pg_hba.conf
-    assert.string(options.hbaConf, 'options.hbaConf');
     // 10000
     assert.number(options.healthChkInterval, 'options.healthChkInterval');
     // 60000
     assert.number(options.healthChkTimeout, 'options.healthChkTimeout');
     // 300000
     assert.number(options.opsTimeout, 'options.opsTimeout');
-    // /opt/local/bin/initdb
-    assert.string(options.pgInitDbPath, 'options.pgInitDbPath');
-    // /opt/smartdc/manatee/etc/postgresql.manta.coal.conf
-    assert.string(options.postgresConf, 'options.postgresConf');
-    // /opt/local/bin/postgres
-    assert.string(options.postgresPath, 'options.postgresPath');
-    // /opt/smartdc/manatee/etc/recovery.conf
-    assert.string(options.recoveryConf, 'options.recoveryConf');
+    // /opt/smartdc/manatee/etc/
+    assert.string(options.postgresConfDir, 'options.postgresConfDir');
+    // postgresql.manta.coal.conf
+    assert.string(options.postgresConfFile, 'options.postgresConfFile');
+    // recovery.conf
+    assert.string(options.recoveryConfFile, 'options.recoveryConfFile');
+    // pg_hba.conf
+    assert.string(options.hbaConfFile, 'options.hbaConfFile');
     // 60000
     assert.number(options.replicationTimeout, 'options.replicationTimeout');
     // [ Object object ]
@@ -113,6 +149,18 @@ function PostgresMgr(options) {
     assert.optionalBool(options.oneNodeWriteMode, 'options.oneNodeWriteMode');
     // 60
     assert.number(options.pgConnectTimeout, 'options.pgConnectTimeout');
+    // "/path/.../to/.../manatee-config.json"
+    assert.string(options.dataConfig, 'options.dataConfig');
+    // "9.2", "9.6", etc.
+    assert.string(options.defaultVersion, 'options.defaultVersion');
+    // /opt/local/postgres/
+    assert.string(options.pgBaseDir, 'options.pgBaseDir');
+    // { "9.2": "9.2.4", "9.6": "9.6.3" }
+    assert.object(options.versions, 'options.versions');
+    // We should have information about 9.2:
+    assert.string(options.versions['9.2'], 'options.versions["9.2"]');
+    // We should have information about 9.6:
+    assert.string(options.versions['9.6'], 'options.versions["9.6"]');
 
     EventEmitter.call(this);
 
@@ -125,30 +173,22 @@ function PostgresMgr(options) {
 
     /** @type {string} The dir on disk where the postgres instance is located */
     self._dataDir = options.dataDir;
+    self._defaultVersion = options.defaultVersion;
+    self._pgBaseDir = options.pgBaseDir;
+    self._versions = options.versions;
+    self._dataConf = options.dataConfig;
 
-    /*
-     * paths to the postgres commands
-     */
-    /** @type {string} Path to the pg_init binary. */
-    self._pgInitDbPath = options.pgInitDbPath;
-    /** @type {string} Path to the postgres binary */
-    self._postgresPath = options.postgresPath;
 
-    /*
-     * Paths to the pg configs
-     */
-    /** @type {string} Path to the master hba config file */
-    self._hbaConf = options.hbaConf;
-    /** @type {string} Path to the master postgres config file */
-    self._postgresConf = options.postgresConf;
-    /** @type {string} Path to the master recovery config file */
-    self._recoveryConf = options.recoveryConf;
-    /** @type {string} Path to the hba config file */
-    self._hbaConfPath = self._dataDir + '/' + 'pg_hba.conf';
-    /** @type {string} Path to the postgres config file */
-    self._postgresConfPath = self._dataDir + '/' + 'postgresql.conf';
-    /** @type {string} Path to the recovery config file */
-    self._recoveryConfPath = self._dataDir + '/' + 'recovery.conf';
+    self._confDir = options.postgresConfDir;
+
+    self.hbaConfFile = options.hbaConfFile;
+    self.postgresConfFile = options.postgresConfFile;
+    self.recoveryConfFile = options.recoveryConfFile;
+
+    self._hbaConfPath = path.join(self._dataDir, 'pg_hba.conf');
+    self._postgresConfPath = path.join(self._dataDir, 'postgresql.conf');
+    self._recoveryConfPath = path.join(self._dataDir, 'recovery.conf');
+
 
     /** @type {url} The URL of this postgres instance */
     self._url = url.parse(options.url);
@@ -321,6 +361,104 @@ PostgresMgr.prototype.PRIMARY_CONNINFO_STR =
 PostgresMgr.prototype.PG_STAT_REPLICATION =
     'select * from pg_stat_replication where application_name = \'%s\'';
 
+
+/**
+ * Get the version that we expect the Postgres data to be for:
+ *
+ * - If the configuration file that the sitter writes out is present,
+ *   use the version stored in there.
+ * - If <PG_DIR>/PG_VERSION exists, then we should be on a system that
+ *   has already initialized a 9.2 database. Assert that, and then use
+ *   Postgres 9.2 paths.
+ * - If we haven't intialized a database yet, then use the configured
+ *   default paths.
+ */
+PostgresMgr.prototype.getVersionInfo = function () {
+    if (!fs.existsSync(this._dataConf)) {
+        var vfile = path.join(this._dataDir, 'PG_VERSION');
+        if (fs.existsSync(vfile)) {
+            assert.equal(fs.readFileSync(vfile, 'utf8'), '9.2');
+            return ({
+                initialized: '9.2.4',
+                current: this._versions['9.2']
+            });
+        } else {
+            return ({
+                initialized: this._versions[this._defaultVersion],
+                current: this._versions[this._defaultVersion]
+            });
+        }
+    }
+
+    var pgc = JSON.parse(fs.readFileSync(this._dataConf, 'utf8'));
+    assert.object(pgc, 'pgc');
+    assert.string(pgc.initialized, 'pgc.initialized');
+    assert.string(pgc.current, 'pgc.current');
+
+    var major = stripMinor(pgc.current);
+    var current = this._versions[major];
+
+    assert.string(current, 'current');
+
+    return ({
+        initialized: pgc.initialized,
+        current: current
+    });
+};
+
+
+/**
+ * We ship multiple versions of Postgres, and need to be able to run the
+ * appropriate version of the binaries, with suitable versions of the
+ * configuration files. We determine the relevant version here, and then
+ * generate the proper paths.
+ */
+PostgresMgr.prototype.resolveVersionedPaths = function () {
+    var verinfo = this.getVersionInfo();
+    var version = verinfo.current;
+
+    /*
+     * Write out all of our versioning information to the dataset.
+     */
+    fs.writeFileSync(this._dataConf, JSON.stringify(verinfo));
+
+    /*
+     * Update the "current" symbolic link, in case we're running for the
+     * first time after upgrading the Postgres database.
+     */
+    var pgVersDir = path.join(this._pgBaseDir, version);
+    var pgCurrDir = path.join(this._pgBaseDir, 'current');
+    updateSymlink(pgVersDir, pgCurrDir);
+
+    /*
+     * Set up paths to the Postgres commands.
+     */
+    this.dbBinDir = path.join(pgVersDir, 'bin');
+    this._pgInitDbPath = path.join(this.dbBinDir, 'initdb');
+    this._postgresPath = path.join(this.dbBinDir, 'postgres');
+
+    /*
+     * Set up paths to the Postgres configuration files.
+     */
+    var etcDir = path.join(this._confDir, stripMinor(version));
+    this._postgresConf = path.join(etcDir, this.postgresConfFile);
+    this._recoveryConf = path.join(etcDir, this.recoveryConfFile);
+    this._hbaConf = path.join(etcDir, this.hbaConfFile);
+
+    this._log.info({
+        versions: verinfo,
+        binaries: {
+            initdb: this._pgInitDbPath,
+            postgres: this._pgInitDbPath
+        },
+        configs: {
+            'pg_hba.conf': this._hbaConf,
+            'postgresql.conf': this._postgresConf,
+            'recovery.conf': this._recoveryConf
+        }
+    }, 'loaded versioning information');
+};
+
 /**
  * Start up the PG instance.  Will return an error if postgres is already
  * running.  Postgres must have previously been reconfigured.
@@ -711,7 +849,7 @@ PostgresMgr.prototype._waitForStandby = function (stdby) {
             var confOpts = {};
             confOpts[self.SYNCHRONOUS_COMMIT] = 'remote_write';
             confOpts[self.SYNCHRONOUS_STANDBY_NAMES] =
-                '\'' + stdby + '\'';
+                formatStandbyName(stdby);
             self._updatePgConf(confOpts, cb);
         },
         function _sighup(_, cb) {
@@ -852,9 +990,12 @@ PostgresMgr.prototype._updateStandby = function _updateStandby(stdby,
             var confOpts = {};
             confOpts[self.SYNCHRONOUS_COMMIT] = 'remote_write';
             if (stdby) {
-                confOpts[self.SYNCHRONOUS_STANDBY_NAMES] = '\'' + stdby + '\'';
-                // if there is a standby, we always want to stay in read-only
-                // mode
+                /*
+                 * If there is a standby, we always want to stay in read-only
+                 * mode.
+                 */
+                confOpts[self.SYNCHRONOUS_STANDBY_NAMES] =
+                    formatStandbyName(stdby);
                 confOpts[self.READ_ONLY] = 'on';
             } else if (!self._oneNodeWriteMode) {
                 confOpts[self.READ_ONLY] = 'on';
@@ -995,6 +1136,8 @@ PostgresMgr.prototype._standby = function _standby(primUrl,
         },
         // update primary_conninfo to point to the new (host, port) pair
         function _updatePrimaryConnInfo(_, cb) {
+            self.resolveVersionedPaths();
+
             updatePrimaryConnInfo(function (err) {
                 _.isRestore = err;
                 return cb();
@@ -1313,6 +1456,8 @@ PostgresMgr.prototype._start = function _start(cb) {
     var intervalId = null;
     cb = once(cb);
 
+    self.resolveVersionedPaths();
+
     /**
      * Always reset and clear the healthcheck before callback.
      * This callback is invoked when the child PG process has started.
@@ -1484,7 +1629,7 @@ PostgresMgr.prototype._initDb = function (callback) {
             });
 
         },
-        function setDataDirOnwership(_, cb) {
+        function setDataDirOwnership(_, cb) {
             var cmd = 'chown -R ' + self._dbUser + ' '  + self._dataDir;
             log.info({cmd: cmd},
                 'PostgresMgr.initDb: changing datadir ownership to postgres');
@@ -1498,11 +1643,15 @@ PostgresMgr.prototype._initDb = function (callback) {
 
         },
         function _initDb(_, cb) {
+            self.resolveVersionedPaths();
+
             var args = [ 'sudo', '-u', self._dbUser,
                          self._pgInitDbPath, '--encoding=UTF-8', '--locale=C',
                          '-D', self._dataDir ];
+
             log.info({cmd: 'initdb', argv: args},
-                     'PostgresMgr.initDb: initializing db');
+                'PostgresMgr.initDb: initializing db');
+
             mod_forkexec.forkExecWait({ argv: args }, function (err, info) {
                 // ignore errors since the db could already be initialized
                 log.info(info, 'PostgresMgr.initDb: initdb returned');
@@ -1519,9 +1668,8 @@ PostgresMgr.prototype._initDb = function (callback) {
                 shelljs.cp('-f', self._postgresConf, self._dataDir +
                     '/postgresql.conf');
 
-                return cb();
+                cb();
             });
-
         }
     ], arg: {}}, function (err) {
         log.info({err: err}, 'PostgresMgr.initDb: finished');
-- 
2.21.0

