commit d1d8a078f2a320078ceaebdd66f0a6411c4623c0 (refs/changes/57/2957/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-11-16T15:31:29-08:00 (1 year, 11 months ago)
    
    joyent/node-watershed#5 Want support for negotiating sub-protocols

diff --git a/lib/watershed.js b/lib/watershed.js
index fd58fdc..22d6535 100644
--- a/lib/watershed.js
+++ b/lib/watershed.js
@@ -59,15 +59,19 @@ _sha1(str)
 
 
 function
-_generateResponse(wskey)
+_generateResponse(wskey, proto)
 {
 	var wsaccept = _sha1(wskey + MAGIC_WEBSOCKET_UUID);
-	return ([
+	var lines = [
 		'HTTP/1.1 101 The Watershed Moment',
 		'Upgrade: websocket',
 		'Connection: Upgrade',
 		'Sec-WebSocket-Accept: ' + wsaccept
-	].join('\r\n') + '\r\n\r\n');
+	];
+	if (proto !== undefined) {
+		lines.push('Sec-WebSocket-Protocol: ' + proto);
+	}
+	return (lines.join('\r\n') + '\r\n\r\n');
 }
 
 function
@@ -136,7 +140,7 @@ generateKey()
  *    'pong':   a PONG frame arrived; (parameter will be a nonce Buffer.)
  */
 Watershed.prototype.accept = function
-accept(req, socket, head, detached)
+accept(req, socket, head, detached, protocols)
 {
 	var remote = socket.remoteAddress + ':' + socket.remotePort;
 	var local = socket.localAddress + ':' + socket.localPort;
@@ -161,11 +165,34 @@ accept(req, socket, head, detached)
 	if (wsver && wsver !== '13')
 		throw (new Error('Unsupported Sec-WebSocket-Version'));
 
+	var proto;
+	var supported = {};
+	var protoHead = req.headers['sec-websocket-protocol'];
+	if (protoHead && protocols) {
+		protocols.forEach(function (pr) {
+			supported[pr] = true;
+		});
+		var protosWanted = protoHead.split(/[, ]+/g);
+		for (var i = 0; i < protosWanted.length; ++i) {
+			if (supported[protosWanted[i]]) {
+				proto = protosWanted[i];
+				break;
+			}
+		}
+		if (proto === undefined) {
+			throw (new Error('Client and server have no matching ' +
+			    'sub-protocols'));
+		}
+	} else if (protoHead) {
+		throw (new Error('Client requested a sub-protocol but no ' +
+		    'supported sub-protocols were provided to accept()'));
+	}
+
 	/*
 	 * Write the response that lets the client know we've accepted the
 	 * Upgrade to WebSockets:
 	 */
-	socket.write(_generateResponse(wskey));
+	socket.write(_generateResponse(wskey, proto));
 
 	if (detached === true) {
 		/*
@@ -179,7 +206,8 @@ accept(req, socket, head, detached)
 		localShouldMask: false,
 		type: 'accept',
 		remote: remote,
-		local: local
+		local: local,
+		protocol: proto
 	};
 	return (new WatershedConnection(options, socket));
 };
@@ -206,6 +234,8 @@ connect(res, socket, head, wskey, detached)
 	/*
 	 * Check for the requisite headers in the Upgrade response:
 	 */
+	if (res.statusCode !== 101)
+		throw (new Error('Invalid Upgrade status code'));
 	var connection = res.headers['connection'];
 	if (!connection || connection.toLowerCase() !== 'upgrade')
 		throw (new Error('Missing Connection Header'));
@@ -218,6 +248,7 @@ connect(res, socket, head, wskey, detached)
 	var wsver = res.headers['sec-websocket-version'];
 	if (wsver && wsver !== '13')
 		throw (new Error('Unsupported Sec-WebSocket-Version'));
+	var proto = res.headers['sec-websocket-protocol'];
 
 	if (detached === true) {
 		/*
@@ -231,7 +262,8 @@ connect(res, socket, head, wskey, detached)
 		localShouldMask: true,
 		type: 'connect',
 		remote: remote,
-		local: local
+		local: local,
+		protocol: proto
 	};
 	return (new WatershedConnection(options, socket));
 };
@@ -264,6 +296,7 @@ WatershedConnection(options, socket)
 	self._socket = socket;
 	self._remote = options.remote;
 	self._local = options.local;
+	self._proto = options.protocol;
 
 	self._check_for_http_header = true;
 
@@ -353,6 +386,17 @@ WatershedConnection(options, socket)
 }
 util.inherits(WatershedConnection, EventEmitter);
 
+/*
+ * Public: WatershedConnection.getProtocol()
+ *
+ * Returns the negotiated sub-protocol chosen during accept().
+ */
+WatershedConnection.prototype.getProtocol = function
+getProtocol()
+{
+	return (this._proto);
+};
+
 /*
  * Public: WatershedConnection.end(reason)
  *
diff --git a/test/basic.js b/test/basic.js
index f500260..ac4e285 100644
--- a/test/basic.js
+++ b/test/basic.js
@@ -12,7 +12,7 @@ var wskey = shed.generateKey();
 var CLIENT;
 var HTTP;
 var SERVER;
-
+var SERVER_ERR;
 
 function failOnMessage(msg) {
 	throw new Error('received unexpected message: ' + msg.toString());
@@ -29,7 +29,14 @@ test('setup server', function (t) {
 	HTTP = http.createServer();
 	HTTP.listen(9554);
 	HTTP.on('upgrade', function (req, socket, head) {
-		SERVER = shed.accept(req, socket, head);
+		try {
+			SERVER = shed.accept(req, socket, head, false,
+			    ['test1', 'test2']);
+		} catch (err) {
+			socket.end('HTTP/1.1 400 Bad Request\r\n' +
+			    'Connection: close\r\n\r\n');
+			return;
+		}
 		SERVER.on('text', failOnMessage);
 		SERVER.on('binary', failOnMessage);
 		SERVER.on('end', failOnEnd);
@@ -137,16 +144,71 @@ test('server sends BINARY', function (t) {
 	SERVER.send(new Buffer('hello'));
 });
 
-test('teardown', function (t) {
+test('teardown client', function (t) {
 	CLIENT.removeListener('end', failOnEnd);
 	SERVER.removeListener('end', failOnEnd);
 
 	CLIENT.on('end', function (code, reason) {
 		t.equal(code, 'NORMAL', 'normal close');
 		t.equal(reason, 'test ended', 'server sent reason');
-		HTTP.close();
 		t.end();
 	});
 
 	SERVER.end('test ended');
 });
+
+test('negotiate supported subprotocol', function (t) {
+	var options = {
+		port: 9554,
+		hostname: '127.0.0.1',
+		headers: {
+			'connection': 'upgrade',
+			'upgrade': 'websocket',
+			'Sec-WebSocket-Key': wskey,
+			'Sec-WebSocket-Version': 13,
+			'Sec-WebSocket-Protocol': 'foobar, test1, test2'
+		}
+	};
+	var req = http.request(options);
+	req.end();
+	req.on('upgrade', function (res, socket, head) {
+		socket.setNoDelay(true);
+		var client = shed.connect(res, socket, head, wskey);
+		t.equal(client.getProtocol(), 'test1');
+		t.equal(SERVER.getProtocol(), 'test1');
+
+		SERVER.removeListener('end', failOnEnd);
+		SERVER.once('end', function () {
+			t.end();
+		});
+		client.end('done');
+	});
+});
+
+test('negotiation failure', function (t) {
+	var options = {
+		port: 9554,
+		hostname: '127.0.0.1',
+		headers: {
+			'connection': 'upgrade',
+			'upgrade': 'websocket',
+			'Sec-WebSocket-Key': wskey,
+			'Sec-WebSocket-Version': 13,
+			'Sec-WebSocket-Protocol': 'foobar, aaaa'
+		}
+	};
+	var req = http.request(options);
+	req.end();
+	req.on('upgrade', function (res, socket, head) {
+		t.fail();
+	});
+	req.on('response', function (res) {
+		t.equal(res.statusCode, 400);
+		t.end();
+	});
+});
+
+test('teardown', function (t) {
+	HTTP.close();
+	t.end();
+});
