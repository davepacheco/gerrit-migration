From ac3060e385e247c63e941354656b385c943c5f94 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 30 Sep 2016 14:45:47 -0700
Subject: [PATCH] TOOLS-1556 update node-sdc-clients to support node v4

---
 CHANGES.md           |   20 +-
 Makefile             |   41 +-
 README.md            |  103 +---
 docs/index.md        |  451 +-------------
 lib/amon.js          |   10 +-
 lib/assertions.js    |   38 --
 lib/ca.js            |   49 +-
 lib/cnapi.js         |    4 +-
 lib/dsapi.js         |   17 +-
 lib/index.js         |    3 -
 lib/napi.js          |    8 +-
 lib/papi.js          |  496 +++++++--------
 lib/restifyclient.js |    8 +-
 lib/vmapi.js         |    8 +-
 package.json         |   18 +-
 test/amon.test.js    |  221 +++----
 test/ca.test.js      |  274 ++++-----
 test/cnapi.test.js   |  426 ++++++-------
 test/cns.test.js     |   83 +--
 test/dsapi.test.js   |  112 ++--
 test/helper.js       |   48 --
 test/napi.test.js    |  398 ++++++------
 test/nsswitch.conf   |   69 ---
 test/papi.test.js    |  322 +++++-----
 test/runtests        |  106 ++--
 test/ufds.test.js    |  767 -----------------------
 test/vmapi.test.js   | 1395 +++++++++++++++++++++---------------------
 tools/jsl.node.conf  |    2 +-
 tools/jsl.web.conf   |  137 -----
 29 files changed, 2045 insertions(+), 3589 deletions(-)
 delete mode 100644 lib/assertions.js
 delete mode 100644 test/helper.js
 delete mode 100644 test/nsswitch.conf
 delete mode 100644 test/ufds.test.js
 delete mode 100644 tools/jsl.web.conf

diff --git a/CHANGES.md b/CHANGES.md
index 0e171bf..30434bd 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -5,11 +5,29 @@
 -->
 
 <!--
-    Copyright (c) 2016, Joyent, Inc.
+    Copyright 2016 Joyent, Inc.
 -->
 
 # sdc-clients Changelog
 
+## 10.0.0
+
+- Update dependencies and code to support working with node v4. The most
+  significant change is from a forked version of restify@2.8.5 (which added
+  a few patches for HTTP proxy support) to current restify-clients@1.x
+  and restify-errors@3.x.
+
+  Note: until <https://github.com/restify/node-restify/issues/878> work is
+  upstreamed to a restify-clients release, this will still be using a fork (but
+  a more modern one).
+
+- [Backward incompatible] Drop the "UFDS" client from this package. A long
+  while back, it was split out to the separate
+  [node-ufds](https://github.com/joyent/node-ufds) repo and `ufds` npm package.
+  Users should switch to that. Get at least ufds@1.2.0 for node v4 support.
+  UFDS client docs were moved to node-ufds in CAPI-524.
+
+
 ## 9.5.1
 
 - IMGAPI-586: Change the endpoint URL for IMGAPI AdminReloadAuthKeys.
diff --git a/Makefile b/Makefile
index 3040e4a..7efb622 100644
--- a/Makefile
+++ b/Makefile
@@ -26,8 +26,6 @@
 # Tools
 #
 NPM       := npm
-NODEUNIT	:= ./node_modules/.bin/nodeunit
-NODEUNIT_ARGS   ?=
 
 #
 # Files
@@ -48,40 +46,9 @@ include ./tools/mk/Makefile.defs
 all:
 	$(NPM) install && $(NPM) rebuild
 
-.PHONY: test ca_test ufds_test vmapi_test cnapi_test amon_test napi_test imgapi_test papi_test
-
-ca_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/ca.test.js
-
-vmapi_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/vmapi.test.js
-
-cnapi_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/cnapi.test.js
-
-ufds_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/ufds.test.js
-
-amon_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/amon.test.js
-
-napi_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/napi.test.js
-
-dsapi_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/dsapi.test.js
-
-papi_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/papi.test.js
-
-cns_test: $(NODEUNIT)
-	$(NODEUNIT) $(NODEUNIT_ARGS) test/cns.test.js
-
-test: ca_test ufds_test cnapi_test napi_test vmapi_test papi_test cns_test
-
-.PHONY: setup
-setup:
-	$(NPM) install
+.PHONY: test-in-coal
+test-in-coal:
+	./test/runtests -H root@10.99.99.7
 
 # Ensure CHANGES.md and package.json have the same version.
 .PHONY: versioncheck
@@ -89,6 +56,8 @@ versioncheck:
 	@echo version is: $(shell cat package.json | json version)
 	[[ `cat package.json | json version` == `grep '^## ' CHANGES.md | head -1 | awk '{print $$2}'` ]]
 
+check:: versioncheck
+
 .PHONY: cutarelease
 cutarelease: versioncheck
 	[[ -z `git status --short` ]]  # If this fails, the working dir is dirty.
diff --git a/README.md b/README.md
index 1902afd..2f769b1 100644
--- a/README.md
+++ b/README.md
@@ -15,97 +15,56 @@ guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
 *Triton does not use GitHub PRs* -- and general documentation at the main
 [Triton project](https://github.com/joyent/triton) page.
 
-Node.js client libraries for the various SDC REST API services: Amon, CA,
-CNAPI, NAPI, UFDS, Packages on top of UFDS and VMAPI so far.
+This repository holds Node.js client libraries for many of the core Triton REST APIs:
+Amon, CA, CNS, CNAPI, FWAPI, IMGAPI, NAPI, PAPI, SAPI, VMAPI.
 
-## Testing
-
-Short version:
-
-    make test
-
-Of course, you may want to read some assumptions we made in order to ensure
-the previous `make test` will run successfully.
+Node.js client libraries for other Triton APIs are in other repos. For example see:
+- [node-ufds](https://github.com/node-ufds): client for Triton's core UFDS service
+- [node-moray](https://github.com/node-moray): client for Triton's core Moray service
+- [node-triton](https://github.com/node-triton): Triton CloudAPI client and CLI
+- [node-manta](https://github.com/node-manta): Manta client and CLI
 
-Currently, every `test/*.test.js` file can be run separately as a different
-test suite by issuing the proper commands:
 
-    AMON_IP=10.99.99.20 \
-    MACHINE_UUID=f56dbb40-1c81-4047-9d56-73fc3adf2b99 \
-    make amon_test
-
-    CA_IP=10.99.99.24 make ca_test
-
-    make cnapi_test
+## Testing
 
-    make ufds_test
+To run the tests from a Triton DataCenter global zone:
 
-    make package_test
+    ./test/runtests
 
-    make vmapi_test
+Or to run the test suite remotely (say you are developing on Mac and want to test
+against your CoaL):
 
-    make napi_test
+    ./test/runtests -H root@10.99.99.7
 
-    make imgapi_test
+To run a single one of the files use the `-f FILTER` option, e.g.
 
-    make papi_test
+    ./test/runtests -H root@10.99.99.7 -f ./test/napi.test.js
 
-Each one of this commands assumes you've got a running version of the proper
-API service.
 
-For every service, the following environment variables can be provided to
-indicate the IP addresses where these services are running:
+## Development
 
-    AMON_IP
-    CA_IP
-    CNAPI_IP
-    UFDS_IP
-    VMAPI_IP
-    NAPI_IP
-    PAPI_IP
+Before commit, ensure that the following checks are clean:
 
-Of course, you provide each one of these environment variables to the proper
-test suite make command and, in case you plan to run `make test`, i.e, all the
-test suites, you may want to provide all these environment variables.
+    make prepush
 
-Also, note that `amon` test suite requires the UUID of a real machine to be
-given as environment variable in order to be able to create real machine
-probes (`MACHINE_UUID` env var).
+Also see the note at the top that cr.joyent.us is used for code review for
+this repo.
 
-Given UFDS, CNAPI, NAPI and VMAPI are services provided by the default headnode
-core zones, if the associated IP env variables are not provided, the test
-suites will set them to the default values into a COAL image running the
-headnode; that is:
 
-    CNAPI_IP=10.99.99.18
-    UFDS_IP=10.99.99.14
-    VMAPI_IP=10.99.99.22
-    NAPI_IP=10.99.99.10
-    AMON_IP=10.99.99.20
-    CA_IP=10.99.99.25
-    PAPI_IP=10.99.99.30
+## Releases
 
-There are no default values pointing to the headnode zones for AMON and CA.
-The default test values for these APIs point to `localhost` so, you may want
-to either run them locally or pass in the values for these zones IPs.
+Changes with possible user impact should:
 
-So, in brief, requirements to run these test suites:
+1. Add a note to the changelog (CHANGES.md).
+2. Bump the package version appropriately.
+3. Once merged to master, the new version should be tagged and published to npm
+   via:
 
-- Headnode setup, including AMON and CA zones. 
-- Run the following command:
+        make cutarelease
 
-    CNAPI_IP=10.99.99.18 \
-    VMAPI_IP=10.99.99.22 \
-    UFDS_IP=10.99.99.14 \
-    NAPI_IP=10.99.99.10 \
-    CA_IP=10.99.99.25 \
-    AMON_IP=10.99.99.20 \
-    PAPI_IP=10.99.99.30 \
-    MACHINE_UUID=f56dbb40-1c81-4047-9d56-73fc3adf2b99 \
-    make test
+   To list to npm accounts that have publish access:
 
-with the different IP env vars pointing to the right IP for each zone.
+        npm owner ls sdc-clients
 
-Note that it's also possible to pass the ENV variable `ADMIN_PWD` to be used
-with UFDS authentication tests. When not given, it will default to the
-_traditional_ `joypass123`.
+The desire is that users of this package use published versions in their
+package.json `dependencies`, rather than depending on git shas.
diff --git a/docs/index.md b/docs/index.md
index 3536474..507ec84 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -2,458 +2,11 @@
 title: node-sdc-clients
 markdown2extras: tables, code-friendly
 ---
-<!--
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/.
--->
-
-<!--
-    Copyright (c) 2014, Joyent, Inc.
--->
 
 # node-sdc-clients
 
-node-sdc-clients provides node.js client libraries for SDC Services.
-
-# UFDS API Client
-
-## UFDS(options)
-
-Creates a UFDS client instance.
-
-Options must be an object that contains
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| url | String | UFDS location |
-| bindDN | String | admin bindDN for UFDS. |
-| password | String | password to said adminDN |
-| cache | Object or *false* | age(Default 60s) size(default 1k) *false* to disable |
-
-
-## close(callback)
-
-Unbinds the underlying LDAP client.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| callback | Function | optional* callback of the form ``f(err)``. |
-
-
-
-
-## authenticate(username, password, cb)
-
-Checks a user's password in UFDS.
-
-Returns a RestError of '401' if password mismatches. Returns the same user
-object as getUser on success.
-
-### Arguments:
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| login | String | login one of login, uuid or the result of getUser. |
-| password | String | password correct password. |
-| cb | Function | callback of the form ``fn(err, user)``. |
-
-### Throws:
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input |
-
-
-
-
-## addUser(user, callback)
-
-Adds a new user into UFDS.
-
-This call expects the user object to look like the `sdcPerson` UFDS
-schema, minus objectclass/dn/uuid.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the entry to add. |
-| callback | Function | callback of the form ``fn(err, user).`` |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input |
-
-
-
-
-## getUser(login, callback)
-
-Looks up a user by login to UFDS.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| login | String | login (or uuid) for a customer. |
-| options | Object | options (optional). |
-| callback | Function | callback of the form f(err, user). |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-## updateUser(user, changes, callback)
-
-Updates a user record.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | String or Object | The user UUID or login string or a user object with a `user.dn`, `user.uuid` or `user.login` (i.e. a user object as from `getUser`).user the user record you got from getUser. |
-| changes | Object | Changes to the object you want merged in. For example: `{myfield: "blah"}` will add/replace the existing `myfield`. You can delete an existing field by passing in a null value, e.g.: `{addthisfield: "blah", rmthisfield: null}`. |
-| callback | Function | callback of the form `function (err, user)`. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-## deleteUser(user, callback)
-
-Deletes a user record.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | user the user record you got from getUser. |
-| callback | Function | callback of the form ``fn(err, user)``. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input |
-
-
-
-
-
-## addKey(user, key, callback)
-
-Adds a new SSH key to a given user record.
-
-You can either pass in an SSH public key (string) or an object of the form
-
-    {
-      name: foo,
-      openssh: public key
-    }
-
-This method will return you the full key as processed by UFDS. If you don't
-pass in a name, then the name gets set to the fingerprint of the SSH key.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the user record you got from getUser. |
-| key | String | the OpenSSH public key. |
-| callback | Function | callback of the form `fn(err, key)`. |
-
-
-
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## getKey(user, fingerprint, callback)
-
-Retrieves an SSH key by fingerprint.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | user the object you got back from getUser. |
-| fingerprint | String | fingerprint the SSH fp (or name) of the SSH key you want. |
-| callback | Function | callback of the form `fn(err, key)`. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## listKeys(user, callback)
-
-Loads all keys for a given user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | user the user you got from getUser. |
-| callback | Function | callback of the form fn(err, keys). |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-
-## deleteKey(user, key, callback)
-
-Deletes an SSH key under a user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | User | the object you got back from getUser. |
-| key | Object | key the object you got from getKey. |
-| callback | Function | callback of the form fn(err, key). |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-
-## listLimits(user, callback)
-
-Lists "CAPI" limits for a given user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the object returned from ``getUser`` |
-| callback | Function | callback of the form ``fn(err, limits)`` |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## getLimit(user, datacenter, callback)
-
-Gets a "CAPI" limit for a given user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | user the object returned from getUser. |
-| datacenter | String | datacenter the datacenter name. |
-| callback | Function | callback of the form fn(err, limits). |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-
-## addLimit(user, limit, callback)
-
-Creates a "CAPI"" limit for a given user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the object returned from getUser. |
-| limit | Object | the limit to add. |
-| callback | Function | callback of the form ``fn(err, limits)`` |
-
-
-
-
-
-
-
-## updateLimit(user, limit, callback)
-
-Updates a "CAPI"" limit for a given user.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the object returned from getUser. |
-| limit | Object | the limit to add. |
-| callback | Function | callback of the form ``fn(err, limits)`` |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-
-## deleteLimit(user, limit, callback)
-
-Deletes a "CAPI"" limit for a given user.
-
-Note that this deletes _all_ limits for a datacenter, so if you just want
-to purge one, you probably want to use updateLimit.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| user | Object | the object returned from getUser. |
-| limit | Object | the limit to delete. |
-| callback | Function callback of the form ``fn(err)``. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## add(dn, entry, callback)
-
-Low-level API to wrap up UFDS add operations.
-
-See ldapjs docs.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| dn | String | dn of the record to add. |
-| entry | Object | entry record attributes. |
-| callback | Function | callback of the form ``fn(error, entries).`` |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## del(dn, callback)
-
-Low-level API to wrap up UFDS delete operations.
-
-See ldapjs docs.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| dn | String | dn dn to delete. |
-| callback | Function | callback of the form ``fn(error)``. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-
-## modify(dn, changes, callback)
-
-Low-level API to wrap up UFDS modify operations.
-
-See ldapjs docs.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| dn | String | dn to update |
-| changes | Object | changes to make. |
-| callback | Function | callback of the form fn(error). |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-
-## search(base, options, callback)
-
-Low-level API to wrap up UFDS search operations.
-See ldapjs docs.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| base | String | search base. |
-| options | Object | search options. |
-| callback | Function | callback of the form ``fn(error, entries)``. |
-
-### Returns
-
-| Type | Description |
-| ---- | ----------- |
-| Boolean | true if callback was invoked from cache, false if not. |
-
-### Throw
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-
-## setLogLevel(level)
-
-Convenience mechanism to set the LDAP log level.
-
-| Name | Type | Description |
-| ---- | ---- | ----------- |
-| level | String | see Log4js levels. |
-
-### Throws
-
-| Error | Description |
-| ----- | ----------- |
-| TypeError | on bad input. |
-
-
-
-# Amon Master API Client
-
-TODO
-
-
-# CA API Client
-
-TODO
-
+node-sdc-clients provides node.js client libraries for many internal
+Triton core services.
 
 # VMAPI Client
 
diff --git a/lib/amon.js b/lib/amon.js
index 5105c64..93e4f34 100644
--- a/lib/amon.js
+++ b/lib/amon.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var format = require('util').format;
 var qs = require('querystring');
+var restifyClients = require('restify-clients');
 
-var assert = require('assert-plus');
-var restify = require('restify');
 
 
 
@@ -26,7 +26,7 @@ var restify = require('restify');
  *
  * @param {Object} options
  *    - url {String} Amon Master location.
- *    - ... any other options allowed to `restify.createJsonClient`
+ *    - ... any other options allowed to `restifyClients.createJsonClient`
  *
  */
 function Amon(options) {
@@ -35,7 +35,7 @@ function Amon(options) {
     if (!options.url)
         throw new TypeError('options.url (String) is required');
 
-    this.client = restify.createJsonClient(options);
+    this.client = restifyClients.createJsonClient(options);
 }
 
 
diff --git a/lib/assertions.js b/lib/assertions.js
deleted file mode 100644
index 5018081..0000000
--- a/lib/assertions.js
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var util = require('util');
-
-// --- Globals
-
-var sprintf = util.format;
-
-// --- API
-
-function assertArgument(name, type, arg) {
-    if (typeof (arg) !== type) {
-        throw new TypeError(sprintf('%s (%s) is required', name, type));
-    }
-}
-
-module.exports = {
-    assertFunction: function assertFunction(name, arg) {
-        assertArgument(name, 'function', arg);
-    },
-    assertNumber: function assertNumber(name, arg) {
-        assertArgument(name, 'number', arg);
-    },
-    assertObject: function assertObject(name, arg) {
-        assertArgument(name, 'object', arg);
-    },
-    assertString: function assertString(name, arg) {
-        assertArgument(name, 'string', arg);
-    }
-};
diff --git a/lib/ca.js b/lib/ca.js
index ff510a4..2653181 100644
--- a/lib/ca.js
+++ b/lib/ca.js
@@ -5,16 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 var assert = require('assert');
-
-var restify = require('restify');
+var restifyClients = require('restify-clients');
+var restifyErrors = require('restify-errors');
 var sprintf = require('util').format;
 
 
-
 // --- Globals
 
 var CA_FMT = '/ca/customers/%s';
@@ -26,7 +25,6 @@ var HEATMAP_IMG_FMT = INST_FMT + '/value/heatmap/image';
 var HEATMAP_DETAILS_FMT = INST_FMT + '/value/heatmap/details';
 
 
-
 // --- Helpers
 
 if (!String.prototype.capitalize) {
@@ -39,30 +37,29 @@ if (!String.prototype.capitalize) {
 function translateError(err) {
     assert.ok(err);
 
-    if (err instanceof restify.RestError) {
-        if (err.body && err.body.error) {
-            switch (err.body.error.code) {
-            case 'ECA_INVAL':
-            case 'ECA_EXISTS':
-            case 'ECA_INCOMPAT':
-                return new restify.InvalidArgumentError(err.body.error.message);
-
-            case 'ECA_NOENT':
-                return new restify.ResourceNotFoundError(
-                    err.body.error.message);
-
-            default:
-              // noop
-                break;
-            }
+    if (err.body && err.body.error) {
+        switch (err.body.error.code) {
+        case 'ECA_INVAL':
+        case 'ECA_EXISTS':
+        case 'ECA_INCOMPAT':
+            return new restifyErrors.InvalidArgumentError(
+                err.body.error.message);
+
+        case 'ECA_NOENT':
+            return new restifyErrors.ResourceNotFoundError(
+                err.body.error.message);
+
+        default:
+          // noop
+            break;
         }
-    } else if (err instanceof restify.HttpError) {
+    } else if (err.statusCode) {
         switch (err.statusCode) {
         case 400:
-            return new restify.RestError(400, 'BadRequest',
+            return new restifyErrors.RestError(400, 'BadRequest',
                                        err.message || 'bad request');
         case 404:
-            return new restify.ResourceNotFoundError(err.message ||
+            return new restifyErrors.ResourceNotFoundError(err.message ||
                                                    'resource not found');
 
         default:
@@ -71,7 +68,7 @@ function translateError(err) {
         }
     }
 
-    return new restify.InternalError('An unknown error occurred');
+    return new restifyErrors.InternalError('An unknown error occurred');
 }
 
 
@@ -108,7 +105,7 @@ function CA(options) {
 
     options.headers = options.headers || {};
     options.headers['x-api-version'] = 'ca/0.1.8';
-    this.client = restify.createJsonClient(options);
+    this.client = restifyClients.createJsonClient(options);
 }
 module.exports = CA;
 
diff --git a/lib/cnapi.js b/lib/cnapi.js
index 1972acd..3950144 100644
--- a/lib/cnapi.js
+++ b/lib/cnapi.js
@@ -15,7 +15,7 @@
 var util = require('util');
 var format = util.format;
 var assert = require('assert-plus');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
 var RestifyClient = require('./restifyclient');
 
 
@@ -71,7 +71,7 @@ function waitForJob(url, job_uuid, cb) {
     assert.string(job_uuid, 'job_uuid');
     assert.func(cb, 'cb');
 
-    var client = restify.createJsonClient({url: url, agent: false});
+    var client = restifyClients.createJsonClient({url: url, agent: false});
     pollJob(client, job_uuid, function (err, job) {
         if (err) {
             return cb(err);
diff --git a/lib/dsapi.js b/lib/dsapi.js
index d36b4dc..f4ad7df 100644
--- a/lib/dsapi.js
+++ b/lib/dsapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -15,11 +15,10 @@
  * backward compat and transition from SDC 6.5.
  */
 
-var util = require('util'),
-    format = util.format,
-    restify = require('restify'),
-    qs = require('querystring');
 var assert = require('assert-plus');
+var qs = require('querystring');
+var restifyClients = require('restify-clients');
+var util = require('util');
 
 
 
@@ -84,11 +83,11 @@ function DSAPI(options) {
         throw new TypeError('options.url (String) required');
     }
 
-    this.client = restify.createJsonClient(options);
+    this.client = restifyClients.createJsonClient(options);
     // Work around <https://github.com/mcavage/node-restify/pull/291>.
-    // Switch to `restify.clientHttpClient` when that pull is in.
+    // Switch to `restifyClients.clientHttpClient` when that pull is in.
     options.type = 'http';
-    this.rawClient = restify.createClient(options);
+    this.rawClient = restifyClients.createClient(options);
     if (options.username && options.password) {
         this.client.basicAuth(options.username, options.password);
         this.rawClient.basicAuth(options.username, options.password);
@@ -171,7 +170,7 @@ DSAPI.prototype.getImage = function (image_uuid, cb) {
         throw new TypeError('image_uuid (String) required');
     }
 
-    path = format('/datasets/%s', image_uuid);
+    path = util.format('/datasets/%s', image_uuid);
 
     return self.client.get(path, function (err, req, res, img) {
         if (err) {
diff --git a/lib/index.js b/lib/index.js
index d337518..894f45f 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -27,9 +27,6 @@ module.exports = {
     get CNAPI() {
         return require('./cnapi');
     },
-    get UFDS() {
-        return require('ufds');
-    },
     get IMGAPI() {
         return require('./imgapi');
     },
diff --git a/lib/napi.js b/lib/napi.js
index 0f9c1ba..6fca6a5 100644
--- a/lib/napi.js
+++ b/lib/napi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
@@ -18,11 +18,8 @@ var format = util.format;
 var RestifyClient = require('./restifyclient');
 
 
-
 // --- Exported Client
 
-
-
 /**
  * Constructor
  *
@@ -45,11 +42,8 @@ NAPI.prototype.ping = function (callback) {
 };
 
 
-
 // --- Network pool methods
 
-
-
 /**
  * Creates a Network Pool
  *
diff --git a/lib/papi.js b/lib/papi.js
index 8911b88..e861c34 100644
--- a/lib/papi.js
+++ b/lib/papi.js
@@ -5,31 +5,93 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
- * Client library for the SDC Packages API (PAPI)
+ * Client library for the Triton Packages API (PAPI)
  */
 
-var util = require('util');
-var format = util.format;
-var restify = require('restify');
+var assert = require('assert-plus');
+var clone = require('clone');
 var qs = require('querystring');
-var assertions = require('./assertions');
+var restifyClients = require('restify-clients');
+
+
+// ---- internal support
+
+/**
+ * Escapes param data being sent to PAPI.
+ *
+ * PAPI accepts special characters used for LDIF filters in its params
+ * when making queries. This is useful for ops, but undesirable for
+ * most applications (and especially data that may carry taint from
+ * outside). This function escapes data (both ldif and query forms) so
+ * that they're safe to use as params passed to PAPI.
+ *
+ * @param data the data to escape
+ * @param escape whether to escape the data for ldif
+ */
+function escapeParam(data, escape) {
+    if (typeof (data) !== 'string')
+        return data;
+
+    // treat undefined as true as well
+    if (escape !== false) {
+        data = data.replace('(',  '{\\28}').
+                    replace(')',  '{\\29}').
+                    replace('\\', '{\\5c}').
+                    replace('*',  '{\\2a}').
+                    replace('/',  '{\\2f}');
+    }
 
-// --- Globals
+    return qs.escape(data);
+}
 
-var assertFunction = assertions.assertFunction;
-var assertNumber = assertions.assertNumber;
-var assertObject = assertions.assertObject;
-var assertString = assertions.assertString;
 
-var ResourceNotFoundError = restify.ResourceNotFoundError;
+/**
+ * Append params to path.
+ *
+ * @param {String} path the path without params
+ * @param {Object} options the args to apply to the end of the path
+ */
+function createPath(path, options) {
+    assert.string(path, 'path');
+    assert.object(options, 'options');
+
+    var escape = options.escape;
+    delete options.escape;
 
+    var q = [];
+
+    Object.keys(options).forEach(function (k) {
+        q.push(k + '=' + escapeParam(options[k], escape));
+    });
+
+    if (q.length)
+        path += '?' + q.join('&');
+
+    return path;
+}
+
+
+// ---- client
 
-// Note this is not a constructor!.
 function PAPI(clientOpts) {
+    /*
+     * At one time, the `PAPI` export was not written to be a constructor,
+     * so usage was:
+     *      var client = PAPI(...);
+     * We want to move to the preferred:
+     *      var client = new PAPI(...);
+     * without breaking the old usage.
+     */
+    if (!(this instanceof PAPI)) {
+        return new PAPI(clientOpts);
+    }
+
+    var self = this;
+
     if (typeof (clientOpts) !== 'object') {
         throw new TypeError('clientOpts (Object) required');
     }
@@ -42,282 +104,228 @@ function PAPI(clientOpts) {
         clientOpts['X-Api-Version'] = '~7.0';
     }
 
-    var client = restify.createJsonClient(clientOpts);
-
-
-    /**
-     * Adds a new package to PAPI
-     *
-     * See https://mo.joyent.com/docs/papi/master/#packageobjects for the
-     * details on expected attributes
-     *
-     * @param {Object} pkg the entry to add.
-     * @param {Object} request options.
-     * @param {Function} cb of the form fn(err, pkg).
-     * @throws {TypeError} on bad input.
-     */
-    function add(pkg, options, cb) {
-
-        if (typeof (options) === 'function') {
-            cb = options;
-            options = {};
-        }
+    self.client = restifyClients.createJsonClient(clientOpts);
+}
 
-        assertObject('pkg', pkg);
-        assertFunction('cb', cb);
 
-        var opts = {path: '/packages'};
-        if (options.headers) {
-            opts.headers = options.headers;
-        }
+/**
+ * Adds a new package to PAPI
+ *
+ * See https://mo.joyent.com/docs/papi/master/#packageobjects for the
+ * details on expected attributes
+ *
+ * @param {Object} pkg the entry to add.
+ * @param {Object} request options.
+ * @param {Function} cb of the form fn(err, pkg).
+ * @throws {TypeError} on bad input.
+ */
+PAPI.prototype.add = function add(pkg, options, cb) {
+    var self = this;
 
-        return client.post(opts, pkg, function (err, req, res, createdPkg) {
-            if (err) {
-                return cb(err);
-            }
-            return cb(null, createdPkg);
-        });
+    if (typeof (options) === 'function') {
+        cb = options;
+        options = {};
     }
 
+    assert.object(pkg, 'pkg');
+    assert.func(cb, 'cb');
 
-    /**
-     * Looks up a package by uuid.
-     *
-     * @param {String} uuid for a package.
-     * @param {Object} options params passed to PAPI
-     * @param {Function} cb of the form f(err, pkg).
-     * @throws {TypeError} on bad input.
-     */
-    function get(uuid, options, cb) {
-        assertString('uuid', uuid);
-        assertObject('options', options);
-        assertFunction('cb', cb);
-
-        var opts = {};
+    var opts = {path: '/packages'};
+    if (options.headers) {
+        opts.headers = options.headers;
+    }
 
-        if (options.headers) {
-            opts.headers = options.headers;
-            delete options.headers;
+    return self.client.post(opts, pkg, function (err, req, res, createdPkg) {
+        if (err) {
+            return cb(err);
         }
+        return cb(null, createdPkg);
+    });
+};
+
+
+/**
+ * Looks up a package by uuid.
+ *
+ * @param {String} uuid for a package.
+ * @param {Object} options params passed to PAPI
+ * @param {Function} cb of the form f(err, pkg).
+ * @throws {TypeError} on bad input.
+ */
+PAPI.prototype.get = function get(uuid, options, cb) {
+    var self = this;
 
-        opts.path = createPath('/packages/' + uuid, options);
+    assert.string(uuid, 'uuid');
+    assert.object(options, 'options');
+    assert.func(cb, 'cb');
 
-        return client.get(opts, function (err, req, res, pkg) {
-            if (err) {
-                return cb(err);
-            }
+    var opts = {};
 
-            return cb(null, pkg);
-        });
+    if (options.headers) {
+        opts.headers = options.headers;
+        delete options.headers;
     }
 
+    opts.path = createPath('/packages/' + uuid, options);
 
-
-    /**
-     * Deletes a pkg record.
-     *
-     * @param {String} uuid the uuid of the record you received from get().
-     * @param {Object} opt the uuid of the record you received from get().
-     * @param {Function} cb of the form fn(err).
-     * @throws {TypeError} on bad input.
-     */
-    function del(uuid, options, cb) {
-        assertString('uuid', uuid);
-        assertObject('options', options);
-        assertFunction('cb', cb);
-
-
-
-        var opts = {};
-        if (options.headers) {
-            opts.headers = options.headers;
-            delete options.headers;
+    return self.client.get(opts, function (err, req, res, pkg) {
+        if (err) {
+            return cb(err);
         }
-        opts.path = createPath('/packages/' + uuid, options);
-
-        return client.del(opts, cb);
-    }
 
+        return cb(null, pkg);
+    });
+};
 
-    /**
-     * Updates a package record.
-     *
-     * Note you don't need to pass a whole copy of the pkg to changes, just the
-     * attributes you want to modify
-     *
-     * @param {Object} pkg the package record you got from get.
-     * @param {Object} changes the pkg to *replace* original package with
-     * @param {Object} request options.
-     * @param {Function} cb of the form fn(err).
-     * @throws {TypeError} on bad input.
-     */
-    function update(uuid, changes, options, cb) {
 
-        if (typeof (options) === 'function') {
-            cb = options;
-            options = {};
-        }
 
-        assertString('uuid', uuid);
-        assertObject('changes', changes);
-        assertFunction('cb', cb);
+/**
+ * Deletes a pkg record.
+ *
+ * @param {String} uuid the uuid of the record you received from get().
+ * @param {Object} opt the uuid of the record you received from get().
+ * @param {Function} cb of the form fn(err).
+ * @throws {TypeError} on bad input.
+ */
+PAPI.prototype.del = function del(uuid, options, cb) {
+    var self = this;
 
-        var p = '/packages/' + uuid;
-        var opts = {path: p};
-        if (options.headers) {
-            opts.headers = options.headers;
-        }
-        return client.put(opts, changes, function (err, req, res, pack) {
-            if (err) {
-                return cb(err);
-            }
+    assert.string(uuid, 'uuid');
+    assert.object(options, 'options');
+    assert.func(cb, 'cb');
 
-            return cb(null, pack);
-        });
+    var opts = {};
+    if (options.headers) {
+        opts.headers = options.headers;
+        delete options.headers;
     }
+    opts.path = createPath('/packages/' + uuid, options);
+
+    return self.client.del(opts, cb);
+};
+
+
+/**
+ * Updates a package record.
+ *
+ * Note you don't need to pass a whole copy of the pkg to changes, just the
+ * attributes you want to modify
+ *
+ * @param {Object} pkg the package record you got from get.
+ * @param {Object} changes the pkg to *replace* original package with
+ * @param {Object} request options.
+ * @param {Function} cb of the form fn(err).
+ * @throws {TypeError} on bad input.
+ */
+PAPI.prototype.update = function update(uuid, changes, options, cb) {
+    var self = this;
 
 
-    /**
-     * Loads a list of packages.
-     *
-     * If the filter is a string, it will be fed as an LDIF filter directly to
-     * PAPI. If it is a hash, each k/v pair will be passed to PAPI as
-     * constraints on the query.
-     *
-     * See https://mo.joyent.com/docs/papi/master/#ListPackages for detailed
-     * information regarding search filter and pagination options accepted
-     *
-     * The count argument retrieved on success will provide the total number
-     * of packages matching the given search filter (retrieved by PAPI as
-     * x-resource-count HTTP header).
-     *
-     * When passing a filter object (not a string), the query arguments will be
-     * escaped according to ldif filter rules. This can be overridden with an
-     * option, but don't do so unless you're 100% confident the query args
-     * aren't potentially tainted.
-     *
-     * @param {String or Object} provided LDAP filter.
-     * @param {Object} pagination options when desired.
-     * @param {Function} callback cb of the form fn(err, pkgs, count).
-     * @throws {TypeError} on bad input.
-     */
-    function list(filter, options, cb) {
-        assertObject('options', options);
-        assertFunction('cb', cb);
-
-        var escape = options.escape;
-        delete options.escape;
-        var headers = options.headers;
-        delete options.headers;
+    if (typeof (options) === 'function') {
+        cb = options;
+        options = {};
+    }
 
-        var q = [];
+    assert.string(uuid, 'uuid');
+    assert.object(changes, 'changes');
+    assert.func(cb, 'cb');
 
-        if (typeof (filter) === 'string') {
-            q.push('filter=' + escapeParam(filter, false));
-        } else {
-            Object.keys(filter).forEach(function (k) {
-                q.push(k + '=' + escapeParam(filter[k], escape));
-            });
+    var p = '/packages/' + uuid;
+    var opts = {path: p};
+    if (options.headers) {
+        opts.headers = options.headers;
+    }
+    return self.client.put(opts, changes, function (err, req, res, pack) {
+        if (err) {
+            return cb(err);
         }
 
-        Object.keys(options).forEach(function (k) {
-            q.push(k + '=' + options[k]);
-        });
-
-        var p = '/packages';
+        return cb(null, pack);
+    });
+};
+
+
+/**
+ * Loads a list of packages.
+ *
+ * If the filter is a string, it will be fed as an LDIF filter directly to
+ * PAPI. If it is a hash, each k/v pair will be passed to PAPI as
+ * constraints on the query.
+ *
+ * See https://mo.joyent.com/docs/papi/master/#ListPackages for detailed
+ * information regarding search filter and pagination options accepted
+ *
+ * The count argument retrieved on success will provide the total number
+ * of packages matching the given search filter (retrieved by PAPI as
+ * x-resource-count HTTP header).
+ *
+ * When passing a filter object (not a string), the query arguments will be
+ * escaped according to ldif filter rules. This can be overridden with an
+ * option, but don't do so unless you're 100% confident the query args
+ * aren't potentially tainted.
+ *
+ * @param {String or Object} provided LDAP filter.
+ * @param {Object} pagination options when desired.
+ * @param {Function} callback cb of the form fn(err, pkgs, count).
+ * @throws {TypeError} on bad input.
+ */
+PAPI.prototype.list = function list(filter, options, cb) {
+    var self = this;
 
-        // XXX should use opts.query instead
-        if (q.length) {
-            p = p + '?' + q.join('&');
-        }
+    assert.object(options, 'options');
+    assert.func(cb, 'cb');
 
-        var opts = {path: p};
-        if (headers) {
-            opts.headers = headers;
-        }
+    var escape = options.escape;
+    delete options.escape;
+    var headers = options.headers;
+    delete options.headers;
 
-        return client.get(opts, function (err, req, res, pkgs) {
-            if (err) {
-                return cb(err);
-            }
+    var q = [];
 
-            var count = Number(res.headers['x-resource-count']);
-            return cb(null, pkgs, count);
+    if (typeof (filter) === 'string') {
+        q.push('filter=' + escapeParam(filter, false));
+    } else {
+        Object.keys(filter).forEach(function (k) {
+            q.push(k + '=' + escapeParam(filter[k], escape));
         });
     }
 
+    Object.keys(options).forEach(function (k) {
+        q.push(k + '=' + options[k]);
+    });
 
-   /**
-    * Escapes param data being sent to PAPI.
-    *
-    * PAPI accepts special characters used for LDIF filters in its params
-    * when making queries. This is useful for ops, but undesirable for
-    * most applications (and especially data that may carry taint from
-    * outside). This function escapes data (both ldif and query forms) so
-    * that they're safe to use as params passed to PAPI.
-    *
-    * @param data the data to escape
-    * @param escape whether to escape the data for ldif
-    */
-    function escapeParam(data, escape) {
-        if (typeof (data) !== 'string')
-            return data;
-
-        // treat undefined as true as well
-        if (escape !== false) {
-            data = data.replace('(',  '{\\28}').
-                        replace(')',  '{\\29}').
-                        replace('\\', '{\\5c}').
-                        replace('*',  '{\\2a}').
-                        replace('/',  '{\\2f}');
-        }
+    var p = '/packages';
 
-        return qs.escape(data);
+    // XXX should use opts.query instead
+    if (q.length) {
+        p = p + '?' + q.join('&');
     }
 
+    var opts = {path: p};
+    if (headers) {
+        opts.headers = headers;
+    }
 
-   /**
-    * Append params to path.
-    *
-    * @param {String} path the path without params
-    * @param {Object} options the args to apply to the end of the path
-    */
-    function createPath(path, options) {
-        assertString('path', path);
-        assertObject('options', options);
-
-        var escape = options.escape;
-        delete options.escape;
-
-        var q = [];
+    return self.client.get(opts, function (err, req, res, pkgs) {
+        if (err) {
+            return cb(err);
+        }
 
-        Object.keys(options).forEach(function (k) {
-            q.push(k + '=' + escapeParam(options[k], escape));
-        });
+        var count = Number(res.headers['x-resource-count']);
+        return cb(null, pkgs, count);
+    });
+};
 
-        if (q.length)
-            path += '?' + q.join('&');
 
-        return path;
-    }
 
+/**
+ * Terminate any open connections to the PAPI service.
+ */
+PAPI.prototype.close = function close() {
+    var self = this;
 
-    /**
-     * Terminate any open connections to the PAPI service.
-     */
-    function close() {
-        client.close();
-    }
+    self.client.close();
+};
 
-    return {
-        add: add,
-        get: get,
-        list: list,
-        del: del,
-        update: update,
-        close: close,
-        client: client
-    };
-}
 
 module.exports = PAPI;
diff --git a/lib/restifyclient.js b/lib/restifyclient.js
index aa3c552..0f5d797 100644
--- a/lib/restifyclient.js
+++ b/lib/restifyclient.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
  * Generic restify client with basic auth
  */
 
-var restify = require('restify');
+var restifyClients = require('restify-clients');
 
 
 /**
@@ -25,7 +25,7 @@ var restify = require('restify');
  *    - username {String} username for basic auth.
  *    - password {String} password for basic auth.
  *    - url {String} NAPI url.
- *    - ... any other options allowed to `restify.createJsonClient`
+ *    - ... any other options allowed to `restifyClients.createJsonClient`
  *
  */
 function RestifyClient(options) {
@@ -34,7 +34,7 @@ function RestifyClient(options) {
     if (!options.url)
         throw new TypeError('options.url (String) is required');
 
-    this.client = restify.createJsonClient(options);
+    this.client = restifyClients.createJsonClient(options);
 
     if (options.username && options.password)
         this.client.basicAuth(options.username, options.password);
diff --git a/lib/vmapi.js b/lib/vmapi.js
index 6c4dd9d..8447397 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -5,17 +5,17 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
- * Client library for the SmartDataCenter Virtual Machine API (VMAPI).
+ * Client library for the Triton Virtual Machine API (VMAPI).
  */
 
 var assert = require('assert-plus');
 var async = require('async');
 var mod_url = require('url');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
 var util = require('util');
 var format = util.format;
 
@@ -42,7 +42,7 @@ function waitForJob(wfapiUrl, jobUuid, cb) {
     assert.string(jobUuid, 'jobUuid');
     assert.func(cb, 'cb');
 
-    var client = restify.createJsonClient({url: wfapiUrl, agent: false});
+    var client = restifyClients.createJsonClient({url: wfapiUrl, agent: false});
     pollJob(client, jobUuid, function (err, job) {
         if (err)
             return cb(err, job);
diff --git a/package.json b/package.json
index ead590e..09d5076 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
-  "description": "Contains node.js client libraries for SDC REST APIs.",
-  "version": "9.5.1",
+  "description": "node.js client libraries for Triton core REST APIs.",
+  "version": "10.0.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
@@ -12,21 +12,21 @@
     "assert-plus": "0.1.5",
     "async": "~0.9.0",
     "backoff": "^2.4.1",
-    "bunyan": "^1.2.3",
+    "bunyan": "^1.8.1",
     "clone": "0.1.8",
-    "ufds": "~1.1.2",
     "lru-cache": "2.3.0",
-    "libuuid": "0.1.4",
+    "libuuid": "0.2.1",
     "once": "^1.3.1",
-    "restify": "git://github.com/joyent/node-restify.git#fd5d5b5",
+    "restify-clients": "git+https://github.com/trentm/clients.git#0b989e0bbd375ddeefce2f6e2754f66e5dbb59d1",
+    "restify-errors": "^3.0.0",
     "vasync": "^1.6.2",
     "verror": "^1.6.0",
-    "smartdc-auth": "2.1.6"
+    "smartdc-auth": "2.5.2"
   },
   "devDependencies": {
     "ldap-filter": "^0.3.1",
-    "moray": "git+ssh://git@github.com:joyent/node-moray.git#b84ef0e0b61502d3db66c26ece9b09d59316f2d1",
-    "nodeunit": "0.8.0"
+    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
+    "tape": "^4.6.0"
   },
   "engines": {
     "node": ">=0.8.14"
diff --git a/test/amon.test.js b/test/amon.test.js
index 5ef9704..9aa0d17 100644
--- a/test/amon.test.js
+++ b/test/amon.test.js
@@ -5,17 +5,16 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var util = require('util');
-var sdcClients = require('../lib/index');
-var restify = require('restify');
-var Amon = sdcClients.Amon;
 var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
+var test = require('tape');
+
+var Amon = require('../lib/index').Amon;
+
+
+// --- globals
 
 var amon;
 
@@ -33,12 +32,12 @@ var MACHINE_UUID = process.env.MACHINE_UUID;
 // Monitor name needs to be 32 chars length max and first char must be
 // alpha always:
 var MONITOR = {
-    'name' : 'p' + uuid().replace(/-/g, '').substring(1),
+    'name' : 'p' + libuuid.create().replace(/-/g, '').substring(1),
     'contacts': ['email']
 };
 
 var MONITOR_2 = {
-    'name': 'p' + uuid().replace(/-/g, '').substring(1),
+    'name': 'p' + libuuid.create().replace(/-/g, '').substring(1),
     'contacts': ['email']
 };
 
@@ -61,124 +60,130 @@ var PROBE_2 = {
 
 // --- tests
 
-exports.setUp = function (callback) {
-    if (typeof (MACHINE_UUID) === 'undefined') {
-        throw new Error('MACHINE_UUID env var is required to run amon tests');
-    }
-    amon = new Amon({
-        url: AMON_URL,
-        agent: false
+// Skipping Amon tests. They are out of date (using 'monitors' which were
+// long ago replaced by 'probegroups').
+test.skip('amon', function (tt) {
+    tt.test(' setup', function (t) {
+        if (typeof (MACHINE_UUID) === 'undefined') {
+            throw new Error(
+                'MACHINE_UUID env var is required to run amon tests');
+        }
+        amon = new Amon({
+            url: AMON_URL
+        });
+        t.close();
     });
-    callback();
-};
 
-exports.test_put_monitor = function (test) {
-    amon.putMonitor(ADMIN_UUID, MONITOR.name, MONITOR, function (err, monitor) {
-        test.ifError(err);
-        test.ok(monitor);
-        test.equal(monitor.name, MONITOR.name);
-        test.equal(monitor.medium, MONITOR.medium);
-        test.done();
+    tt.test(' put monitor', function (t) {
+        amon.putMonitor(ADMIN_UUID, MONITOR.name, MONITOR, function (err, mon) {
+            t.ifError(err);
+            t.ok(mon);
+            t.equal(mon.name, MONITOR.name);
+            t.equal(mon.medium, MONITOR.medium);
+            t.end();
+        });
     });
-};
 
-exports.test_put_probe = function (test) {
-    amon.putProbe(ADMIN_UUID, MONITOR.name, PROBE.name, PROBE,
-        function (err, probe) {
-        test.ifError(err);
-        test.ok(probe);
-        test.equal(probe.name, PROBE.name);
-        test.equal(probe.user, PROBE.user);
-        test.equal(probe.machine, PROBE.machine);
-        test.equal(probe.monitor, PROBE.monitor);
-        test.equal(probe.type, PROBE.type);
-        test.done();
+    tt.test(' put probe', function (t) {
+        amon.putProbe(ADMIN_UUID, MONITOR.name, PROBE.name, PROBE,
+            function (err, probe) {
+            t.ifError(err);
+            t.ok(probe);
+            t.equal(probe.name, PROBE.name);
+            t.equal(probe.user, PROBE.user);
+            t.equal(probe.machine, PROBE.machine);
+            t.equal(probe.monitor, PROBE.monitor);
+            t.equal(probe.type, PROBE.type);
+            t.end();
+        });
     });
-};
 
-exports.test_list_probes = function (test) {
-    amon.putProbe(ADMIN_UUID, MONITOR.name, PROBE_2.name, PROBE_2,
-        function (err, probe) {
-        test.ifError(err);
-        test.ok(probe);
-
-        amon.listProbes(ADMIN_UUID, MONITOR.name, function (err2, probes) {
-            test.ifError(err2);
-            test.ok(probes);
-            test.equal(probes.length, 2);
-
-            amon.deleteProbe(ADMIN_UUID, MONITOR.name, PROBE_2.name,
-              function (err3) {
-                test.ifError(err3);
-                test.done();
+    tt.test(' list probes', function (t) {
+        amon.putProbe(ADMIN_UUID, MONITOR.name, PROBE_2.name, PROBE_2,
+            function (err, probe) {
+            t.ifError(err);
+            t.ok(probe);
+
+            amon.listProbes(ADMIN_UUID, MONITOR.name, function (err2, probes) {
+                t.ifError(err2);
+                t.ok(probes);
+                t.equal(probes.length, 2);
+
+                amon.deleteProbe(ADMIN_UUID, MONITOR.name, PROBE_2.name,
+                  function (err3) {
+                    t.ifError(err3);
+                    t.end();
+                });
             });
         });
     });
-};
 
-exports.test_get_probe = function (test) {
-    amon.getProbe(ADMIN_UUID, MONITOR.name, PROBE.name, function (err, probe) {
-        test.ifError(err);
-        test.ok(probe);
-        test.equal(probe.name, PROBE.name);
-        test.equal(probe.user, PROBE.user);
-        test.equal(probe.machine, PROBE.machine);
-        test.equal(probe.monitor, PROBE.monitor);
-        test.equal(probe.type, PROBE.type);
-        test.done();
+    tt.test(' get probe', function (t) {
+        amon.getProbe(ADMIN_UUID, MONITOR.name, PROBE.name,
+                function (err, probe) {
+            t.ifError(err);
+            t.ok(probe);
+            t.equal(probe.name, PROBE.name);
+            t.equal(probe.user, PROBE.user);
+            t.equal(probe.machine, PROBE.machine);
+            t.equal(probe.monitor, PROBE.monitor);
+            t.equal(probe.type, PROBE.type);
+            t.end();
+        });
     });
-};
 
-exports.test_delete_probe = function (test) {
-    amon.deleteProbe(ADMIN_UUID, MONITOR.name, PROBE.name, function (err) {
-        test.ifError(err);
-        amon.getProbe(ADMIN_UUID, MONITOR.name, PROBE.name, function (err2) {
-            test.equal(err2.statusCode, 404);
-            test.done();
+    tt.test(' delete probe', function (t) {
+        amon.deleteProbe(ADMIN_UUID, MONITOR.name, PROBE.name, function (err) {
+            t.ifError(err);
+            amon.getProbe(ADMIN_UUID, MONITOR.name, PROBE.name,
+                    function (err2) {
+                t.equal(err2.statusCode, 404);
+                t.end();
+            });
         });
     });
-};
 
-exports.test_list_monitors = function (test) {
-    amon.putMonitor(ADMIN_UUID, MONITOR_2.name, MONITOR_2,
-        function (err, monitor) {
-        test.ifError(err);
-        amon.listMonitors(ADMIN_UUID, function (err2, monitors) {
-            test.ifError(err2);
-            test.ok(monitors);
-            test.ok((monitors.length > 2), 'Found less than 2 monitors');
-            amon.deleteMonitor(ADMIN_UUID, MONITOR_2.name, function (err3) {
-                test.ifError(err3);
-                test.done();
+    tt.test(' list monitors', function (t) {
+        amon.putMonitor(ADMIN_UUID, MONITOR_2.name, MONITOR_2,
+            function (err, monitor) {
+            t.ifError(err);
+            amon.listMonitors(ADMIN_UUID, function (err2, monitors) {
+                t.ifError(err2);
+                t.ok(monitors);
+                t.ok((monitors.length > 2), 'Found less than 2 monitors');
+                amon.deleteMonitor(ADMIN_UUID, MONITOR_2.name, function (err3) {
+                    t.ifError(err3);
+                    t.end();
+                });
             });
         });
     });
-};
 
-exports.test_get_monitor = function (test) {
-    amon.getMonitor(ADMIN_UUID, MONITOR.name, function (err, monitor) {
-        test.ifError(err);
-        test.ok(monitor);
-        test.equal(monitor.name, MONITOR.name);
-        test.equal(monitor.medium, MONITOR.medium);
-        test.done();
+    tt.test(' get monitor', function (t) {
+        amon.getMonitor(ADMIN_UUID, MONITOR.name, function (err, monitor) {
+            t.ifError(err);
+            t.ok(monitor);
+            t.equal(monitor.name, MONITOR.name);
+            t.equal(monitor.medium, MONITOR.medium);
+            t.end();
+        });
     });
-};
 
-exports.test_delete_monitor = function (test) {
-    amon.deleteMonitor(ADMIN_UUID, MONITOR.name, function (err) {
-        test.ifError(err);
-        setTimeout(function () {
-            amon.getMonitor(ADMIN_UUID, MONITOR.name, function (err2) {
-                test.equal(err2.statusCode, 404);
-                test.done();
-            });
-        }, 3000);
+    tt.test(' delete monitor', function (t) {
+        amon.deleteMonitor(ADMIN_UUID, MONITOR.name, function (err) {
+            t.ifError(err);
+            setTimeout(function () {
+                amon.getMonitor(ADMIN_UUID, MONITOR.name, function (err2) {
+                    t.equal(err2.statusCode, 404);
+                    t.end();
+                });
+            }, 3000);
+        });
     });
-};
 
-exports.tearDown = function (callback) {
-    if (amon)
-        amon.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        if (amon)
+            amon.close();
+        t.end();
+    });
+});
\ No newline at end of file
diff --git a/test/ca.test.js b/test/ca.test.js
index fbf4fb6..4357ffe 100644
--- a/test/ca.test.js
+++ b/test/ca.test.js
@@ -5,18 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var util = require('util');
-
+var bunyan = require('bunyan');
 var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
+var test = require('tape');
+var util = require('util');
 
 var CA = require('../lib/index').CA;
-var restify = require('restify');
 
 
 // --- Globals
@@ -27,173 +24,176 @@ var ca = null;
 var customer = process.env.UFDS_ADMIN_UUID;
 var instrumentation = null;
 
+
 // --- Tests
 
-exports.setUp = function (callback) {
-    ca = new CA({
-        url: CA_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        agent: false
+test('ca', function (tt) {
+    tt.test(' setup', function (t) {
+        ca = new CA({
+            url: CA_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            }
+        });
+        t.end();
     });
-    callback();
-};
 
 
-exports.test_list_schema = function (test) {
-    ca.listSchema(customer, function (err, schema) {
-        test.ifError(err);
-        test.ok(schema);
-        test.done();
+    tt.test(' list schema', function (t) {
+        ca.listSchema(customer, function (err, schema) {
+            t.ifError(err);
+            t.ok(schema);
+            t.end();
+        });
     });
-};
 
 
-exports.test_create_instrumentation_bad_params = function (test) {
-    ca.createInstrumentation(customer, {}, function (err, inst) {
-        test.ok(err);
-        test.ok(!inst);
-        test.equal(err.statusCode, 409);
-        test.equal(err.restCode, 'InvalidArgument');
-        test.ok(err.message);
-        test.done();
+    tt.test(' create instrumentation bad params', function (t) {
+        ca.createInstrumentation(customer, {}, function (err, inst) {
+            t.ok(err);
+            t.ok(!inst);
+            t.equal(err.statusCode, 409);
+            t.equal(err.restCode, 'InvalidArgument');
+            t.ok(err.message);
+            t.end();
+        });
     });
-};
-
-
-exports.test_create_instrumentation = function (test) {
-    var params = {
-        module: 'fs',
-        stat: 'logical_ops',
-        decomposition: 'latency'
-    };
-    ca.createInstrumentation(customer, params, function (err, inst) {
-        var uri;
-        test.ifError(err, err);
-        test.ok(inst);
-        if (inst) {
-            uri = inst.uri;
-            instrumentation = uri.substr(uri.lastIndexOf('/') + 1);
-        }
-        test.done();
+
+
+    tt.test(' create instrumentation', function (t) {
+        var params = {
+            module: 'fs',
+            stat: 'logical_ops',
+            decomposition: 'latency'
+        };
+        ca.createInstrumentation(customer, params, function (err, inst) {
+            var uri;
+            t.ifError(err, err);
+            t.ok(inst);
+            if (inst) {
+                uri = inst.uri;
+                instrumentation = uri.substr(uri.lastIndexOf('/') + 1);
+            }
+            t.end();
+        });
     });
-};
-
-
-exports.test_list_instrumentations = function (test) {
-    ca.listInstrumentations(customer, function (err, instrumentations) {
-        test.ifError(err);
-        test.ok(instrumentations);
-        test.ok(instrumentations.length);
-        var i = instrumentations[instrumentations.length - 1];
-        test.equal(i.module, 'fs');
-        test.equal(i.stat, 'logical_ops');
-        test.done();
+
+
+    tt.test(' list instrumentations', function (t) {
+        ca.listInstrumentations(customer, function (err, instrumentations) {
+            t.ifError(err);
+            t.ok(instrumentations);
+            t.ok(instrumentations.length);
+            var i = instrumentations[instrumentations.length - 1];
+            t.equal(i.module, 'fs');
+            t.equal(i.stat, 'logical_ops');
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_instrumentations_bogus_customer = function (test) {
-    ca.listInstrumentations(uuid(), function (err, instrumentations) {
-        test.ifError(err);
-        test.ok(instrumentations);
-        test.equal(instrumentations.length, 0);
-        test.done();
+    tt.test(' list instrumentations bogus customer', function (t) {
+        ca.listInstrumentations(libuuid.create(), function (err, insts) {
+            t.ifError(err);
+            t.ok(insts);
+            t.equal(insts.length, 0);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_instrumentation_bad = function (test) {
-    ca.getInstrumentation(customer, uuid(), function (err, inst) {
-        test.ok(err);
-        test.ok(!inst);
-        test.equal(err.statusCode, 404);
-        test.equal(err.restCode, 'ResourceNotFound');
-        test.ok(err.message);
-        test.done();
+    tt.test(' get instrumentation bad', function (t) {
+        ca.getInstrumentation(customer, libuuid.create(), function (err, inst) {
+            t.ok(err);
+            t.ok(!inst);
+            t.equal(err.statusCode, 404);
+            t.equal(err.restCode, 'ResourceNotFound');
+            t.ok(err.message);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_instrumentation = function (test) {
-    ca.getInstrumentation(customer, instrumentation, function (err, inst) {
-        test.ifError(err);
-        test.ok(inst);
-        test.done();
+    tt.test(' get instrumentation', function (t) {
+        ca.getInstrumentation(customer, instrumentation, function (err, inst) {
+            t.ifError(err);
+            t.ok(inst);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_heatmap = function (test) {
-    ca.getHeatmap(customer, instrumentation, function (err, heatmap) {
-        test.ifError(err);
-        test.ok(heatmap);
-        test.done();
+    tt.test(' get heatmap', function (t) {
+        ca.getHeatmap(customer, instrumentation, function (err, heatmap) {
+            t.ifError(err);
+            t.ok(heatmap);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_heatmap_bad = function (test) {
-    ca.getHeatmap(customer, uuid(), function (err, heatmap) {
-        test.ok(err);
-        test.ok(!heatmap);
-        test.equal(err.statusCode, 404);
-        test.equal(err.restCode, 'ResourceNotFound');
-        test.ok(err.message);
+    tt.test(' get heatmap bad', function (t) {
+        ca.getHeatmap(customer, libuuid.create(), function (err, heatmap) {
+            t.ok(err);
+            t.ok(!heatmap);
+            t.equal(err.statusCode, 404);
+            t.equal(err.restCode, 'ResourceNotFound');
+            t.ok(err.message);
 
-        test.done();
+            t.end();
+        });
     });
-};
-
-
-exports.test_get_heatmap_details_bad = function (test) {
-    ca.getHeatmapDetails(customer, uuid(), {
-        x: 10,
-        y: 20
-    }, function (err, heatmap) {
-        test.ok(err);
-        test.ok(!heatmap);
-        test.equal(err.statusCode, 404);
-        test.equal(err.restCode, 'ResourceNotFound');
-        test.ok(err.message);
-        test.done();
+
+
+    tt.test(' get heatmap details bad', function (t) {
+        ca.getHeatmapDetails(customer, libuuid.create(), {
+            x: 10,
+            y: 20
+        }, function (err, heatmap) {
+            t.ok(err);
+            t.ok(!heatmap);
+            t.equal(err.statusCode, 404);
+            t.equal(err.restCode, 'ResourceNotFound');
+            t.ok(err.message);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_instrumentation_bad = function (test) {
-    ca.deleteInstrumentation(customer, uuid(), function (err) {
-        test.ok(err);
-        test.equal(err.statusCode, 404);
-        test.equal(err.restCode, 'ResourceNotFound');
-        test.ok(err.message);
-        test.done();
+    tt.test(' delete instrumentation bad', function (t) {
+        ca.deleteInstrumentation(customer, libuuid.create(), function (err) {
+            t.ok(err);
+            t.equal(err.statusCode, 404);
+            t.equal(err.restCode, 'ResourceNotFound');
+            t.ok(err.message);
+            t.end();
+        });
     });
-};
 
 
-exports.test_clone_instrumentation = function (test) {
-    ca.cloneInstrumentation(customer, instrumentation, function (err, inst) {
-        test.ifError(err);
-        ca.deleteInstrumentation(customer, inst.id, function (err2) {
-            test.ifError(err2);
-            test.done();
+    tt.test(' clone instrumentation', function (t) {
+        ca.cloneInstrumentation(customer, instrumentation,
+                function (err, inst) {
+            t.ifError(err);
+            ca.deleteInstrumentation(customer, inst.id, function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
         });
     });
-};
 
 
-exports.test_delete_instrumentation = function (test) {
-    ca.deleteInstrumentation(customer, instrumentation, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' delete instrumentation', function (t) {
+        ca.deleteInstrumentation(customer, instrumentation, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.tearDown = function (callback) {
-    ca.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        ca.close();
+        t.end();
+    });
+});
diff --git a/test/cnapi.test.js b/test/cnapi.test.js
index 70fe4e4..58e8e46 100644
--- a/test/cnapi.test.js
+++ b/test/cnapi.test.js
@@ -5,16 +5,13 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var Logger = require('bunyan');
-var restify = require('restify');
+var bunyan = require('bunyan');
 var libuuid = require('libuuid');
+var test = require('tape');
 var util = require('util');
-function uuid() {
-    return (libuuid.create());
-}
 
 var CNAPI = require('../lib/index').CNAPI;
 
@@ -25,15 +22,15 @@ var CNAPI = require('../lib/index').CNAPI;
 var CNAPI_URL = 'http://' + (process.env.CNAPI_IP || '10.99.99.22');
 
 var SERVER = null;
-var ZONE = '0777a40e-8b41-11e2-be6f-7f3bf8fcea65';
+var testVmUuid = libuuid.create();
+var testVmAlias = 'nodesdcclientstest-cnapi-' + testVmUuid.split('-')[0];
 var TASK = null;
-var DATASET_UUID = 'fd2cc906-8938-11e3-beab-4359c665ac99';
 var CUSTOMER = process.env.UFDS_ADMIN_UUID;
-var cnapi;
+
 
 // --- Helpers
 
-function waitForVmState(state, callback) {
+function waitForVmState(t, cnapi, state, callback) {
     var finished = false;
     var error;
 
@@ -52,13 +49,13 @@ function waitForVmState(state, callback) {
     }, 30000);
 
     function check() {
-        cnapi.getVm(SERVER, ZONE, function (err, vm) {
+        cnapi.getVm(SERVER, testVmUuid, function (err, vm) {
             error = err;
             if (err) {
                 setTimeout(check, 3000);
                 return;
             }
-            console.log('vm state was %s', vm.state);
+            t.comment('test VM ' + testVmUuid + ' state: ' + vm.state);
 
             if (vm.state === state) {
                 clearTimeout(timeout);
@@ -73,7 +70,7 @@ function waitForVmState(state, callback) {
     check();
 }
 
-function waitForTask(callback) {
+function waitForTask(t, cnapi, callback) {
     var finished = false;
     var error;
 
@@ -89,7 +86,8 @@ function waitForTask(callback) {
             callback(error);
             return;
         } else {
-            callback(new Error('timed out waiting on task'));
+            callback(new Error('timed out waiting on task at '
+                + (new Date()).toISOString()));
             return;
         }
     }, 50000);
@@ -101,7 +99,7 @@ function waitForTask(callback) {
                 return;
             }
             if (err) {
-                console.warn(err.message);
+                t.comment('CNAPI getTask err: ' + err.message);
                 if (err.message === 'no such task found') {
                     setTimeout(check, 3000);
                     return;
@@ -112,7 +110,8 @@ function waitForTask(callback) {
                 return;
             }
 
-            console.log('task status %s', task.status);
+            t.comment('[' + (new Date()).toISOString() + '] CNAPI task '
+                + TASK + ' status: ' + task.status);
 
             if (task.status == 'failure') {
                 clearTimeout(timeout);
@@ -123,7 +122,6 @@ function waitForTask(callback) {
             }
 
             if (task.status == 'complete') {
-                console.warn('ALL DONE');
                 clearTimeout(timeout);
                 finished = true;
                 callback(null);
@@ -141,251 +139,235 @@ function waitForTask(callback) {
 
 // --- Tests
 
-exports.setUp = function (callback) {
-    cnapi = new CNAPI({
-        url: CNAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: new Logger({
-            name: 'cnapi_unit_test',
-            stream: process.stderr,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-        }),
-        agent: false
-    });
-    callback();
-};
-
-
-exports.test_list_servers = function (test) {
-    cnapi.listServers({ headnode: true }, function (err, servers) {
-        test.ifError(err);
-        test.ok(servers);
-        SERVER = servers[0].uuid;
-        test.done();
+test('cnapi', function (tt) {
+    var cnapi;
+
+    tt.test(' setup', function (t) {
+        cnapi = new CNAPI({
+            url: CNAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: new bunyan.createLogger({
+                name: 'cnapi_unit_test',
+                stream: process.stderr,
+                level: (process.env.LOG_LEVEL || 'info'),
+                serializers: bunyan.stdSerializers
+            })
+        });
+        t.end();
     });
-};
-
 
-exports.test_get_server = function (test) {
-    cnapi.getServer(SERVER, function (err, server) {
-        test.ifError(err);
-        test.ok(server);
-        test.done();
-    });
-};
-
-
-exports.test_create_vm = function (test) {
-    var opts = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        dataset_uuid:  'fd2cc906-8938-11e3-beab-4359c665ac99',
-        brand: 'joyent',
-        image_uuid: 'fd2cc906-8938-11e3-beab-4359c665ac99',
-        image: {
-            uuid: 'fd2cc906-8938-11e3-beab-4359c665ac99',
-            files: [
-                {
-                    'sha1': '97f20b32c2016782257176fb58a35e5044f05840',
-                    'size': 46271847,
-                    'compression': 'bzip2'
-                }
-            ]
-        },
-        ram: 128
-    };
-
-    cnapi.createVm(SERVER, opts, function (err, task) {
-        test.ifError(err);
-        test.ok(task);
-        TASK = task.id;
-        test.done();
+    tt.test(' list servers', function (t) {
+        cnapi.listServers({ headnode: true }, function (err, servers) {
+            t.ifError(err);
+            t.ok(servers);
+            SERVER = servers[0].uuid;
+            t.end();
+        });
     });
-};
 
-
-exports.test_wait_for_running = function (test) {
-    waitForTask(function (err) {
-        test.ifError(err);
-
-        waitForVmState('running', function (err2) {
-            test.ifError(err2);
-            test.done();
+    tt.test(' get server', function (t) {
+        cnapi.getServer(SERVER, function (err, server) {
+            t.ifError(err);
+            t.ok(server);
+            t.end();
         });
     });
-};
-
 
-exports.test_get_vm = function (test) {
-    setTimeout(function () {
-        cnapi.getVm(SERVER, ZONE, function (err, vm) {
-            test.ifError(err);
-            test.ok(vm);
-            test.done();
+    tt.test(' create vm', function (t) {
+        var opts = {
+            uuid: testVmUuid,
+            alias: testVmAlias,
+            owner_uuid: CUSTOMER,
+            brand: 'joyent',
+            // This is sdc-smartos@1.6.3, which works for as long as it is
+            // an origin image used by core Triton zones.
+            image_uuid: 'fd2cc906-8938-11e3-beab-4359c665ac99',
+            image: {
+                uuid: 'fd2cc906-8938-11e3-beab-4359c665ac99',
+                files: [
+                    {
+                        'sha1': '97f20b32c2016782257176fb58a35e5044f05840',
+                        'size': 46271847,
+                        'compression': 'bzip2'
+                    }
+                ]
+            },
+            ram: 128
+        };
+
+        cnapi.createVm(SERVER, opts, function (err, task) {
+            t.ifError(err);
+            t.ok(task);
+            TASK = task.id;
+            t.end();
         });
-    }, 10000);
-};
-
-
-exports.test_stop_vm = function (test) {
-    cnapi.stopVm(SERVER, ZONE, function (err, task) {
-        test.ifError(err);
-        test.ok(task);
-        TASK = task.id;
-        test.done();
     });
-};
-
-
-exports.test_wait_for_stopped = function (test) {
-    waitForTask(function (err) {
-        test.ifError(err);
-        waitForVmState('stopped', function (err2) {
-            test.ifError(err2);
 
-            test.done();
+    tt.test(' wait for running', function (t) {
+        waitForTask(t, cnapi, function (err) {
+            t.ifError(err);
+            waitForVmState(t, cnapi, 'running', function (stateErr) {
+                t.ifError(stateErr);
+                t.end();
+            });
         });
     });
-};
 
+    tt.test(' get vm', function (t) {
+        setTimeout(function () {
+            cnapi.getVm(SERVER, testVmUuid, function (err, vm) {
+                t.ifError(err);
+                t.ok(vm);
+                t.end();
+            });
+        }, 10000);
+    });
 
-// Wait 3 seconds after the job completes
-exports.test_start_vm = function (test) {
-    setTimeout(function () {
-        cnapi.startVm(SERVER, ZONE, function (err, task) {
-            test.ifError(err);
-            test.ok(task);
+    tt.test(' stop vm', function (t) {
+        cnapi.stopVm(SERVER, testVmUuid, function (err, task) {
+            t.ifError(err);
+            t.ok(task);
             TASK = task.id;
-            test.done();
+            t.end();
         });
-    }, 6000);
-};
-
+    });
 
-exports.test_wait_for_started = function (test) {
-    waitForTask(function (err) {
-        test.ifError(err);
-        waitForVmState('running', function (err2) {
-            test.ifError(err2);
-            test.done();
+    tt.test(' wait for stopped', function (t) {
+        waitForTask(t, cnapi, function (err) {
+            t.ifError(err);
+            waitForVmState(t, cnapi, 'stopped', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
         });
     });
-};
 
+    tt.test(' start vm', function (t) {
+        setTimeout(function () {
+            cnapi.startVm(SERVER, testVmUuid, function (err, task) {
+                t.ifError(err);
+                t.ok(task);
+                TASK = task.id;
+                t.end();
+            });
+        }, 6000);
+    });
 
-exports.test_reboot_vm = function (test) {
-    setTimeout(function () {
-        cnapi.rebootVm(SERVER, ZONE, function (err, task) {
-            test.ifError(err);
-            test.ok(task);
-            TASK = task.id;
-            test.done();
+    tt.test(' wait for started', function (t) {
+        waitForTask(t, cnapi, function (err) {
+            t.ifError(err);
+            waitForVmState(t, cnapi, 'running', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
         });
-    }, 6000);
-};
+    });
 
+    tt.test(' reboot vm', function (t) {
+        setTimeout(function () {
+            cnapi.rebootVm(SERVER, testVmUuid, function (err, task) {
+                t.ifError(err);
+                t.ok(task);
+                TASK = task.id;
+                t.end();
+            });
+        }, 6000);
+    });
 
-exports.test_wait_for_reboot = function (test) {
-    waitForTask(function (err) {
-        test.ifError(err);
-        waitForVmState('running', function (err2) {
-            test.ifError(err2);
-            test.done();
+    tt.test(' wait for reboot', function (t) {
+        waitForTask(t, cnapi, function (err) {
+            t.ifError(err);
+            waitForVmState(t, cnapi, 'running', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
         });
     });
-};
 
+    tt.test(' delete vm', function (t) {
+        setTimeout(function () {
+            cnapi.deleteVm(SERVER, testVmUuid, function (err, task) {
+                t.ifError(err);
+                t.ok(task);
+                TASK = task.id;
+                t.end();
+            });
+        }, 3000);
+    });
 
-exports.test_delete_vm = function (test) {
-    setTimeout(function () {
-        cnapi.deleteVm(SERVER, ZONE, function (err, task) {
-            test.ifError(err);
-            test.ok(task);
-            TASK = task.id;
-            test.done();
+    tt.test(' wait for deleted', function (t) {
+        waitForTask(t, cnapi, function (err) {
+            t.ifError(err);
+            t.end();
         });
-    }, 3000);
-};
-
-
-exports.test_wait_for_deleted = function (test) {
-    waitForTask(function (err) {
-        test.ifError(err);
-        test.done();
     });
-};
-
 
-exports.test_command_execute = function (test) {
-    var script = '#!/usr/bin/bash\n\necho Hello\n';
-
-    cnapi.commandExecute(SERVER, script, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' command execute', function (t) {
+        var script = '#!/usr/bin/bash\n\necho Hello\n';
+        cnapi.commandExecute(SERVER, script, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
-
 
-exports.test_command_execute_with_env = function (test) {
-    var script = '#!/usr/bin/bash\n\necho Hello\n';
-    var env = { FOO: 'bar' };
+    tt.test(' command execute with env', function (t) {
+        var script = '#!/usr/bin/bash\n\necho Hello\n';
+        var env = { FOO: 'bar' };
 
-    cnapi.commandExecute(SERVER, script, { env: env }, function (err) {
-        test.ifError(err);
-        test.done();
+        cnapi.commandExecute(SERVER, script, { env: env }, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
+    // this test is sadly not ideal -- we'd like to check it picks only one
+    // server, and it's the correct server, but that only works if the test is
+    // run with a standup containing multiple CNs. With a standup of only COAL,
+    // this test is ambiguous.
+    tt.test(' capacity 1', function (t) {
+        var headers = { 'x-request-id': 12345 };
+
+        cnapi.capacity([SERVER], { headers: headers }, function (err, res) {
+            t.ifError(err);
+            t.equal(typeof (res), 'object');
+            t.equal(typeof (res.capacities), 'object');
+            t.equal(typeof (res.errors), 'object');
+            t.equal(Object.keys(res.capacities).length, 1);
+
+            var server = res.capacities[SERVER];
+            t.equal(typeof (server.cpu), 'number');
+            t.equal(typeof (server.ram), 'number');
+            t.equal(typeof (server.disk), 'number');
+
+            t.end();
+        });
+    });
 
-// this test is sadly not ideal -- we'd like to check it picks only one server,
-// and it's the correct server, but that only works if the test is run with
-// a standup containing multiple CNs. With a standup of only COAL, this test
-// is ambiguous.
-exports.test_capacity_1 = function (test) {
-    var headers = { 'x-request-id': 12345 };
 
-    cnapi.capacity([SERVER], { headers: headers }, function (err, res) {
-        test.ifError(err);
-        test.equal(typeof (res), 'object');
-        test.equal(typeof (res.capacities), 'object');
-        test.equal(typeof (res.errors), 'object');
-        test.equal(Object.keys(res.capacities).length, 1);
+    tt.test(' capacity 2', function (t) {
+        cnapi.capacity(null, function (err, res) {
+            t.ifError(err);
+            t.equal(typeof (res), 'object');
+            t.equal(typeof (res.capacities), 'object');
+            t.equal(typeof (res.errors), 'object');
+            t.ok(Object.keys(res.capacities).length >= 1);
 
-        var server = res.capacities[SERVER];
-        test.equal(typeof (server.cpu), 'number');
-        test.equal(typeof (server.ram), 'number');
-        test.equal(typeof (server.disk), 'number');
+            Object.keys(res.capacities).forEach(function (serverUuid) {
+                var server = res.capacities[serverUuid];
+                t.equal(typeof (server.cpu), 'number');
+                t.equal(typeof (server.ram), 'number');
+                t.equal(typeof (server.disk), 'number');
+            });
 
-        test.done();
-    });
-};
-
-
-exports.test_capacity_2 = function (test) {
-    cnapi.capacity(null, function (err, res) {
-        test.ifError(err);
-        test.equal(typeof (res), 'object');
-        test.equal(typeof (res.capacities), 'object');
-        test.equal(typeof (res.errors), 'object');
-        test.ok(Object.keys(res.capacities).length >= 1);
-
-        Object.keys(res.capacities).forEach(function (serverUuid) {
-            var server = res.capacities[serverUuid];
-            test.equal(typeof (server.cpu), 'number');
-            test.equal(typeof (server.ram), 'number');
-            test.equal(typeof (server.disk), 'number');
+            t.end();
         });
-
-        test.done();
     });
-};
 
-
-exports.tearDown = function (callback) {
-    cnapi.close();
-    callback();
-};
\ No newline at end of file
+    tt.test(' teardown', function (t) {
+        cnapi.close();
+        t.end();
+    });
+});
\ No newline at end of file
diff --git a/test/cns.test.js b/test/cns.test.js
index b64a1e3..60bcd99 100644
--- a/test/cns.test.js
+++ b/test/cns.test.js
@@ -8,55 +8,60 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-var CNS = require('../lib/index').CNS;
 var bunyan = require('bunyan');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
+var test = require('tape');
+
+var CNS = require('../lib/index').CNS;
+
 
 var CNS_IP = process.env.CNS_IP || '10.99.99.62';
 var CNS_URL = 'http://' + CNS_IP;
 
-var cns;
 
-exports.setUp = function (callback) {
-    var logger = new bunyan.createLogger({
-            name: 'cns_unit_test',
-            stream: process.stderr,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: restify.bunyan.serializers
-    });
+test('cns', function (tt) {
+    var cns;
+
+    tt.test(' setup', function (t) {
+        cns = new CNS({
+            url: CNS_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: new bunyan.createLogger({
+                name: 'cns_unit_test',
+                stream: process.stderr,
+                level: (process.env.LOG_LEVEL || 'info'),
+                serializers: restifyClients.bunyan.serializers
+            })
+        });
 
-    cns = new CNS({
-        url: CNS_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger
+        t.end();
     });
 
-    callback();
-};
 
-exports.test_ping = function (t) {
-    cns.ping(function (err) {
-        t.ifError(err);
-        t.done();
+    tt.test(' ping', function (t) {
+        cns.ping(function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
-
-exports.test_list_zones = function (t) {
-    cns.listZones(function (err, objs) {
-        t.ifError(err);
-        t.ok(objs);
-        t.ok(Array.isArray(objs));
-        t.ok(objs.length > 0);
-        t.ok(objs[0].name);
-        t.ok(objs[0].serial);
-        t.done();
+
+    tt.test(' list zones', function (t) {
+        cns.listZones(function (err, objs) {
+            t.ifError(err);
+            t.ok(objs);
+            t.ok(Array.isArray(objs));
+            t.ok(objs.length > 0);
+            t.ok(objs[0].name);
+            t.ok(objs[0].serial);
+            t.end();
+        });
     });
-};
 
-exports.tearDown = function (callback) {
-    cns.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        cns.close();
+        t.end();
+    });
+});
diff --git a/test/dsapi.test.js b/test/dsapi.test.js
index 60c40ed..590bb64 100644
--- a/test/dsapi.test.js
+++ b/test/dsapi.test.js
@@ -5,79 +5,77 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var Logger = require('bunyan'),
-    restify = require('restify'),
-    DSAPI = require('../lib/index').DSAPI,
-    util = require('util');
+var bunyan = require('bunyan');
+var test = require('tape');
+var util = require('util');
+
+var DSAPI = require('../lib/index').DSAPI;
 
-var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
 
 // --- Globals
 
 var DSAPI_URL = process.env.DSAPI_URL || 'https://datasets.joyent.com';
+var dsapi;
+var IMAGES;
+
 
-var dsapi, IMAGES;
+// --- Tests
 
-exports.setUp = function (callback) {
-    var logger = new Logger({
+test('dsapi', function (tt) {
+    tt.test(' setup', function (t) {
+        var log = bunyan.createLogger({
             name: 'dsapi.test',
             stream: process.stderr,
             level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-    });
-
-    dsapi = new DSAPI({
-        url: DSAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false,
-        rejectUnauthorized: false
-    });
+            serializers: bunyan.stdSerializers
+        });
 
-    callback();
-};
+        dsapi = new DSAPI({
+            url: DSAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log,
+            rejectUnauthorized: false
+        });
 
-
-exports.test_list_images = function (t) {
-    dsapi.listImages(function (err, images, res) {
-        t.ifError(err, 'listImages Error');
-        t.ok(images, 'listImages OK');
-        if (images) {
-            IMAGES = images;
-            IMAGES.forEach(function (ds) {
-                t.ok(ds.name, 'ds.name OK');
-                t.ok(ds.version, 'ds.version OK');
-                t.ok(ds.os, 'ds.os OK');
-                t.ok(ds.urn, 'ds.urn OK');
-                t.ok(ds.uuid, 'ds.uuid OK');
-            });
-        }
-        t.ok(res, 'listImages response object');
-        t.done();
+        t.end();
     });
-};
-
 
-exports.test_get_image = function (t) {
-    dsapi.getImage(IMAGES[0].uuid, function (err, img) {
-        t.ifError(err, 'getImage Error');
-        t.ok(img, 'getImage OK');
-        t.equal(img.urn, IMAGES[0].urn);
-        t.done();
+    tt.test(' list images', function (t) {
+        dsapi.listImages(function (err, images, res) {
+            t.ifError(err, 'listImages Error');
+            t.ok(images, 'listImages OK');
+            if (images) {
+                IMAGES = images;
+                IMAGES.forEach(function (ds) {
+                    t.ok(ds.name, 'ds.name OK');
+                    t.ok(ds.version, 'ds.version OK');
+                    t.ok(ds.os, 'ds.os OK');
+                    t.ok(ds.urn, 'ds.urn OK');
+                    t.ok(ds.uuid, 'ds.uuid OK');
+                });
+            }
+            t.ok(res, 'listImages response object');
+            t.end();
+        });
     });
-};
 
+    tt.test(' get image', function (t) {
+        dsapi.getImage(IMAGES[0].uuid, function (err, img) {
+            t.ifError(err, 'getImage Error');
+            t.ok(img, 'getImage OK');
+            t.equal(img.urn, IMAGES[0].urn);
+            t.end();
+        });
+    });
 
-exports.tearDown = function (callback) {
-    dsapi.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        dsapi.close();
+        t.end();
+    });
+});
diff --git a/test/helper.js b/test/helper.js
deleted file mode 100644
index 7aac0e6..0000000
--- a/test/helper.js
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-//
-// Just a simple wrapper over nodeunit's exports syntax. Also exposes
-// a common logger for all tests.
-//
-
-var Logger = require('bunyan');
-
-
-// --- Globals
-
-var LOG = new Logger({
-    level: (process.env.LOG_LEVEL || 'info'),
-    name: process.argv[1],
-    stream: process.stderr,
-    src: true,
-    serializers: Logger.stdSerializers
-});
-
-
-// --- Exports
-
-module.exports = {
-    after: function after(callback) {
-        module.parent.tearDown = callback;
-    },
-
-    before: function before(callback) {
-        module.parent.setUp = callback;
-    },
-
-    test: function test(name, tester) {
-        module.parent.exports[name] = tester;
-    }
-};
-
-module.exports.__defineGetter__('log', function () {
-    return (LOG);
-});
diff --git a/test/napi.test.js b/test/napi.test.js
index 37cd407..bf3d9e8 100644
--- a/test/napi.test.js
+++ b/test/napi.test.js
@@ -5,19 +5,25 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var Logger = require('bunyan'),
-    restify = require('restify'),
-    NAPI = require('../lib/index').NAPI;
-
+var bunyan = require('bunyan');
 var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
+var test = require('tape');
+
+var NAPI = require('../lib/index').NAPI;
+
+
+// --- Globals
+
+var NAPI_URL = 'http://' + (process.env.NAPI_IP || '10.99.99.10');
+
+var NETWORKS, ADMIN, EXTERNAL, napi, MAC_1, MAC_2, NIC_UUID, IP;
+
 
 // --- Helper
+
 function pseudoRandomMac() {
     var mac = [0, 0x07, 0xe9];
 
@@ -41,239 +47,233 @@ function pseudoRandomMac() {
 }
 
 
-
-// --- Globals
-
-var NAPI_URL = 'http://' + (process.env.NAPI_IP || '10.99.99.10');
-
-var NETWORKS, ADMIN, EXTERNAL, napi, MAC_1, MAC_2, NIC_UUID, IP;
-
 // --- Tests
 
-exports.setUp = function (callback) {
-    var logger = new Logger({
+test('napi', function (tt) {
+    tt.test(' setup', function (t) {
+        var log = bunyan.createLogger({
             name: 'vmapi_unit_test',
             stream: process.stderr,
             level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-    });
+            serializers: bunyan.stdSerializers
+        });
+
+        napi = new NAPI({
+            url: NAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log
+        });
 
-    napi = new NAPI({
-        url: NAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false
+        t.end();
     });
 
-    callback();
-};
 
+    /*
+     * Tests listing all networks. As a side-effect, assigns ADMIN and EXTERNAL
+     * if they exist. ADMIN is the only network that can be assumed to exist on
+     * a simple installation, and is so is used as the exemplar in several other
+     * tests.
+     */
+    tt.test(' list networks', function (t) {
+        napi.listNetworks({}, function (err, networks) {
+            t.ifError(err, 'listNetworks does not error');
+            t.ok(networks, 'listNetworks returns results');
+            t.ok(networks.length > 0, 'listNetworks non-empty');
+            NETWORKS = networks;
+            NETWORKS.forEach(function (net) {
+                t.ok(net.name, 'NAPI GET /networks name OK');
+                if (net.name === 'admin') {
+                    ADMIN = net;
+                } else if (net.name === 'external') {
+                    EXTERNAL = net;
+                }
+            });
+            t.end();
+        });
+    });
 
-/*
- * Tests listing all networks. As a side-effect, assigns ADMIN and EXTERNAL
- * if they exist. ADMIN is the only network that can be assumed to exist on
- * a simple installation, and is so is used as the exemplar in several other
- * tests.
- */
-exports.test_list_networks = function (test) {
-    napi.listNetworks({}, function (err, networks) {
-        test.ifError(err, 'listNetworks does not error');
-        test.ok(networks, 'listNetworks returns results');
-        test.ok(networks.length > 0, 'listNetworks non-empty');
-        NETWORKS = networks;
-        NETWORKS.forEach(function (net) {
-            test.ok(net.name, 'NAPI GET /networks name OK');
-            if (net.name === 'admin') {
-                ADMIN = net;
-            } else if (net.name === 'external') {
-                EXTERNAL = net;
+
+    tt.test(' get network by uuid', function (t) {
+        napi.getNetwork(ADMIN.uuid, function (err, network) {
+            t.ifError(err, 'getNetwork does not error');
+            t.ok(network, 'getNetwork returns a result');
+            t.ok(network.uuid, 'getNetwork result lacks a uuid');
+            if (network.uuid) {
+                t.strictEqual(network.uuid, ADMIN.uuid);
             }
+            t.end();
         });
-        test.done();
     });
-};
 
 
-exports.test_get_network_by_uuid = function (test) {
-    napi.getNetwork(ADMIN.uuid, function (err, network) {
-        test.ifError(err, 'getNetwork does not error');
-        test.ok(network, 'getNetwork returns a result');
-        test.ok(network.uuid, 'getNetwork result lacks a uuid');
-        if (network.uuid) {
-            test.strictEqual(network.uuid, ADMIN.uuid);
-        }
-        test.done();
+    /*
+     * Using a random uuid, attempts to get a network (ADMIN) that specifies
+     * the `provisionable_by` property, which should return an error.
+     */
+    tt.test(' get unprovisionable network', function (t) {
+        var params = { provisionable_by: libuuid.create() };
+
+        napi.getNetwork(ADMIN.uuid, { params: params },
+                        function (err, network) {
+            t.ok(err, 'getNetwork should err with invalid provisionable_by');
+            if (err) {
+                t.strictEqual(err.message, 'owner cannot provision on network',
+                    'err message as expected');
+            }
+            t.end();
+        });
     });
-};
 
 
-/*
- * Using a random uuid, attempts to get a network (ADMIN) that specifies
- * the `provisionable_by` property, which should return an error.
- */
-exports.test_get_unprovisionable_network = function (test) {
-    var params = { provisionable_by: uuid() };
-
-    napi.getNetwork(ADMIN.uuid, { params: params },
-                    function (err, network) {
-        test.ok(err, 'getNetwork should err with invalid provisionable_by');
-        if (err) {
-            test.strictEqual(err.message, 'owner cannot provision on network',
-                'err message as expected');
-        }
-        test.done();
+    tt.test(' ping', function (t) {
+        napi.ping(function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_ping = function (test) {
-    napi.ping(function (err) {
-        test.ifError(err);
-        test.done();
-    });
-};
-
-
-exports.test_list_network_ips = function (test) {
-    napi.listIPs(ADMIN.uuid, {}, function (err, ips) {
-        test.ifError(err);
-        test.ok(ips);
-        test.ok(Array.isArray(ips));
-        test.ok(ips.length > 0);
-        if (ips.length > 0) {
-            IP = ips[0];
-            test.ok(IP.ip);
-            test.ok(IP.owner_uuid);
-            test.ok(IP.belongs_to_uuid);
-            test.ok(IP.belongs_to_type);
-        }
-        test.done();
+    tt.test(' list network ips', function (t) {
+        napi.listIPs(ADMIN.uuid, {}, function (err, ips) {
+            t.ifError(err);
+            t.ok(ips);
+            t.ok(Array.isArray(ips));
+            t.ok(ips.length > 0);
+            if (ips.length > 0) {
+                IP = ips[0];
+                t.ok(IP.ip);
+                t.ok(IP.owner_uuid);
+                t.ok(IP.belongs_to_uuid);
+                t.ok(IP.belongs_to_type);
+            }
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_ip = function (test) {
-    napi.getIP(ADMIN.uuid, IP.ip, function (err, ip) {
-        test.ifError(err);
-        test.ok(ip);
-        test.deepEqual(IP, ip);
-        test.done();
+    tt.test(' get ip', function (t) {
+        napi.getIP(ADMIN.uuid, IP.ip, function (err, ip) {
+            t.ifError(err);
+            t.ok(ip);
+            t.deepEqual(IP, ip);
+            t.end();
+        });
     });
-};
-
-
-exports.test_list_nics = function (test) {
-    napi.listNics({}, function (err, nics) {
-        test.ifError(err);
-        test.ok(nics);
-        test.ok(Array.isArray(nics));
-        test.ok(nics.length > 0);
-        if (nics.length > 0) {
-            var aNic = nics[0];
-            test.ok(aNic.owner_uuid);
-            test.ok(aNic.belongs_to_uuid);
-            test.ok(aNic.belongs_to_type);
-        }
-        test.done();
+
+
+    tt.test(' list nics', function (t) {
+        napi.listNics({}, function (err, nics) {
+            t.ifError(err);
+            t.ok(nics);
+            t.ok(Array.isArray(nics));
+            t.ok(nics.length > 0);
+            if (nics.length > 0) {
+                var aNic = nics[0];
+                t.ok(aNic.owner_uuid);
+                t.ok(aNic.belongs_to_uuid);
+                t.ok(aNic.belongs_to_type);
+            }
+            t.end();
+        });
     });
-};
-
-
-exports.test_provision_nic = function (test) {
-    NIC_UUID = uuid();
-    napi.provisionNic(ADMIN.uuid, {
-        owner_uuid: process.env.UFDS_ADMIN_UUID,
-        belongs_to_uuid: NIC_UUID,
-        belongs_to_type: 'zone'
-    }, function (err, nic) {
-        test.ifError(err);
-        test.ok(nic);
-        if (nic) {
-            test.ok(nic.mac);
-            MAC_1 = nic.mac;
-            test.equal(nic.owner_uuid, process.env.UFDS_ADMIN_UUID);
-            test.equal(nic.belongs_to_uuid, NIC_UUID);
-            test.equal(nic.belongs_to_type, 'zone');
-        }
-        test.done();
+
+
+    tt.test(' provision nic', function (t) {
+        NIC_UUID = libuuid.create();
+        napi.provisionNic(ADMIN.uuid, {
+            owner_uuid: process.env.UFDS_ADMIN_UUID,
+            belongs_to_uuid: NIC_UUID,
+            belongs_to_type: 'zone'
+        }, function (err, nic) {
+            t.ifError(err);
+            t.ok(nic);
+            if (nic) {
+                t.ok(nic.mac);
+                MAC_1 = nic.mac;
+                t.equal(nic.owner_uuid, process.env.UFDS_ADMIN_UUID);
+                t.equal(nic.belongs_to_uuid, NIC_UUID);
+                t.equal(nic.belongs_to_type, 'zone');
+            }
+            t.end();
+        });
     });
-};
-
-
-exports.test_create_nic = function (test) {
-    var sUUID = uuid(),
-        mac = pseudoRandomMac();
-    napi.createNic(mac, {
-        owner_uuid: process.env.UFDS_ADMIN_UUID,
-        belongs_to_uuid: sUUID,
-        belongs_to_type: 'server'
-    }, function (err, nic) {
-        test.ifError(err);
-        test.ok(nic);
-        if (nic) {
-            test.ok(nic.mac);
-            MAC_2 = nic.mac;
-            test.equal(nic.owner_uuid, process.env.UFDS_ADMIN_UUID);
-            test.equal(nic.belongs_to_uuid, sUUID);
-            test.equal(nic.belongs_to_type, 'server');
-        }
-        test.done();
+
+
+    tt.test(' create new', function (t) {
+        var sUUID = libuuid.create(),
+            mac = pseudoRandomMac();
+        napi.createNic(mac, {
+            owner_uuid: process.env.UFDS_ADMIN_UUID,
+            belongs_to_uuid: sUUID,
+            belongs_to_type: 'server'
+        }, function (err, nic) {
+            t.ifError(err);
+            t.ok(nic);
+            if (nic) {
+                t.ok(nic.mac);
+                MAC_2 = nic.mac;
+                t.equal(nic.owner_uuid, process.env.UFDS_ADMIN_UUID);
+                t.equal(nic.belongs_to_uuid, sUUID);
+                t.equal(nic.belongs_to_type, 'server');
+            }
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_nic = function (test) {
-    napi.getNic(MAC_1, function (err, nic) {
-        test.ifError(err);
-        test.ok(nic);
-        test.done();
+    tt.test(' get nic', function (t) {
+        napi.getNic(MAC_1, function (err, nic) {
+            t.ifError(err);
+            t.ok(nic);
+            t.end();
+        });
     });
-};
 
 
-exports.test_update_nic = function (test) {
-    napi.updateNic(MAC_2, {
-        belongs_to_uuid: NIC_UUID,
-        belongs_to_type: 'zone'
-    }, function (err, nic) {
-        test.ifError(err);
-        test.ok(nic);
-        test.done();
+    tt.test(' update nic', function (t) {
+        napi.updateNic(MAC_2, {
+            belongs_to_uuid: NIC_UUID,
+            belongs_to_type: 'zone'
+        }, function (err, nic) {
+            t.ifError(err);
+            t.ok(nic);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_nics_by_owner = function (test) {
-    napi.getNics(NIC_UUID, function (err, nics) {
-        test.ifError(err);
-        test.ok(nics);
-        test.ok(Array.isArray(nics));
-        test.ok(nics.length > 0);
-        test.done();
+    tt.test(' get nics by owner', function (t) {
+        napi.getNics(NIC_UUID, function (err, nics) {
+            t.ifError(err);
+            t.ok(nics);
+            t.ok(Array.isArray(nics));
+            t.ok(nics.length > 0);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_nic = function (test) {
-    napi.deleteNic(MAC_1, function (err, nic) {
-        test.ifError(err);
-        test.done();
+    tt.test(' delete nic', function (t) {
+        napi.deleteNic(MAC_1, function (err, nic) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_nic_2 = function (test) {
-    napi.deleteNic(MAC_2, function (err, nic) {
-        test.ifError(err);
-        test.done();
+    tt.test(' delete nic 2', function (t) {
+        napi.deleteNic(MAC_2, function (err, nic) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.tearDown = function (callback) {
-    napi.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        napi.close();
+        t.end();
+    });
+});
\ No newline at end of file
diff --git a/test/nsswitch.conf b/test/nsswitch.conf
deleted file mode 100644
index 7416ca5..0000000
--- a/test/nsswitch.conf
+++ /dev/null
@@ -1,69 +0,0 @@
-#
-# CDDL HEADER START
-#
-# The contents of this file are subject to the terms of the
-# Common Development and Distribution License (the "License").
-# You may not use this file except in compliance with the License.
-#
-# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
-# or http://www.opensolaris.org/os/licensing.
-# See the License for the specific language governing permissions
-# and limitations under the License.
-#
-# When distributing Covered Code, include this CDDL HEADER in each
-# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
-# If applicable, add the following below this CDDL HEADER, with the
-# fields enclosed by brackets "[]" replaced with your own identifying
-# information: Portions Copyright [yyyy] [name of copyright owner]
-#
-# CDDL HEADER END
-#
-# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
-# Use is subject to license terms.
-#
-# ident "@(#)nsswitch.dns       1.15    06/03/24 SMI"
-
-#
-# /etc/nsswitch.dns:
-#
-# An example file that could be copied over to /etc/nsswitch.conf; it uses
-# DNS for hosts lookups, otherwise it does not use any other naming service.
-#
-# "hosts:" and "services:" in this file are used only if the
-# /etc/netconfig file has a "-" for nametoaddr_libs of "inet" transports.
-
-# DNS service expects that an instance of svc:/network/dns/client be
-# enabled and online.
-
-passwd:     files
-group:      files
-
-# You must also set up the /etc/resolv.conf file for DNS name
-# server lookup.  See resolv.conf(4).
-hosts:      files dns
-
-# Note that IPv4 addresses are searched for in all of the ipnodes databases
-# before searching the hosts databases.
-ipnodes:   files dns
-
-networks:   files
-protocols:  files
-rpc:        files
-ethers:     files
-netmasks:   files
-bootparams: files
-publickey:  files
-# At present there isn't a 'files' backend for netgroup;  the system will 
-#   figure it out pretty quickly, and won't use netgroups at all.
-netgroup:   files
-automount:  files
-aliases:    files
-services:   files
-printers:       user files
-
-auth_attr:  files
-prof_attr:  files
-project:    files
-
-tnrhtp:     files
-tnrhdb:     files
diff --git a/test/papi.test.js b/test/papi.test.js
index a73c9ad..1874fd3 100644
--- a/test/papi.test.js
+++ b/test/papi.test.js
@@ -5,17 +5,16 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
-var Logger = require('bunyan');
-var PAPI = require('../lib/index').PAPI;
-var util = require('util');
-var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
+var bunyan = require('bunyan');
 var clone = require('clone');
+var test = require('tape');
+var util = require('util');
+
+var PAPI = require('../lib/index').PAPI;
+
 
 // --- Globals
 
@@ -23,8 +22,14 @@ var PAPI_IP = process.env.PAPI_IP || '10.99.99.30';
 var PAPI_URL = 'http://' + PAPI_IP;
 var CUSTOMER = process.env.UFDS_ADMIN_UUID;
 
-var papi;
+var log = bunyan.createLogger({
+    name: 'papi_client_test',
+    stream: process.stderr,
+    level: (process.env.LOG_LEVEL || 'info'),
+    serializers: bunyan.stdSerializers
+});
 
+var papi;
 
 var entry = {
     name: 'regular_128',
@@ -82,190 +87,197 @@ var entry_with_owner = {
 var PKG;
 
 
-exports.setUp = function (callback) {
-    var logger = new Logger({
-            name: 'papi_unit_test',
-            stream: process.stderr,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-    });
-
-    papi = PAPI({
-        url: PAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false
+test('papi', function (tt) {
+    tt.test(' setup', function (t) {
+        papi = new PAPI({
+            url: PAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log
+        });
+        t.end();
     });
 
-    callback();
-};
-
 
-// Por aquí:
-exports.test_create_package = function (t) {
-    papi.add(entry, function (err, pkg) {
-        t.ifError(err);
-        t.ok(pkg);
-        t.ok(pkg.uuid);
-        t.equal(pkg.vcpus, 1);
-        t.equal(pkg.max_swap, 256);
-        t.equal(pkg.traits.bool, true);
-        t.ok(Array.isArray(pkg.networks));
-        t.equal(pkg.networks.length, 2);
-        t.deepEqual(pkg.traits.arr, ['one', 'two', 'three']);
-        t.equal(pkg.traits.str, 'a string');
-        PKG = pkg;
-        t.done();
+    tt.test(' create package', function (t) {
+        papi.add(entry, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.ok(pkg.uuid);
+            t.equal(pkg.vcpus, 1);
+            t.equal(pkg.max_swap, 256);
+            t.equal(pkg.traits.bool, true);
+            t.ok(Array.isArray(pkg.networks));
+            t.equal(pkg.networks.length, 2);
+            t.deepEqual(pkg.traits.arr, ['one', 'two', 'three']);
+            t.equal(pkg.traits.str, 'a string');
+            PKG = pkg;
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_package_by_uuid = function (t) {
-    papi.get(PKG.uuid, {}, function (err, pkg) {
-        t.ifError(err);
-        t.ok(pkg);
-        t.equal(pkg.uuid, PKG.uuid);
-        t.done();
+    tt.test(' get package by uuid', function (t) {
+        papi.get(PKG.uuid, {}, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.equal(pkg.uuid, PKG.uuid);
+            t.end();
+        });
     });
-};
 
+    /*
+     * Old versions of this client exported a PAPI that wasn't a constructor,
+     * so usage was `var client = PAPI(...);`. We now prefer
+     * `var client = new PAPI(...);`, but the old style should still work.
+     */
+    tt.test(' client created without "new PAPI"', function (t) {
+        var newlessPapi = PAPI({url: PAPI_URL, log: log});
+        newlessPapi.get(PKG.uuid, {}, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.equal(pkg.uuid, PKG.uuid);
+            newlessPapi.close();
+            t.end();
+        });
+    });
 
-exports.test_get_package_by_uuid_with_owner = function (t) {
-    papi.add(entry_with_owner, function (err, pkg) {
-        t.ifError(err);
-        t.ok(pkg);
-        t.ok(pkg.uuid);
-
-        entry_with_owner.uuid = pkg.uuid;
-
-        papi.get(pkg.uuid,
-                 { owner_uuids: entry_with_owner.owner_uuids[0] },
-                 function (err2, pkg2) {
-            t.ifError(err2);
-            t.ok(pkg2);
-            t.equal(pkg2.uuid, pkg.uuid);
-            t.done();
+    tt.test(' get package by uuid with owner', function (t) {
+        papi.add(entry_with_owner, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.ok(pkg.uuid);
+
+            entry_with_owner.uuid = pkg.uuid;
+
+            papi.get(pkg.uuid,
+                     { owner_uuids: entry_with_owner.owner_uuids[0] },
+                     function (err2, pkg2) {
+                t.ifError(err2);
+                t.ok(pkg2);
+                t.equal(pkg2.uuid, pkg.uuid);
+                t.end();
+            });
         });
     });
-};
 
 
-exports.test_get_package_by_uuid_with_bad_owner = function (t) {
-    papi.get(entry_with_owner.uuid,
-             { owner_uuids: '3621c8c3-a5d6-42c6-bcae-f7076353d150' },
-             function (err, pkg) {
-        t.ok(err);
-        t.done();
+    tt.test(' get package by uuid with bad owner', function (t) {
+        papi.get(entry_with_owner.uuid,
+                 { owner_uuids: '3621c8c3-a5d6-42c6-bcae-f7076353d150' },
+                 function (err, pkg) {
+            t.ok(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_modify_mutable_attribute = function (t) {
-    var changes = {};
-    changes.active = false;
-    changes['default'] = false;
-    changes.traits = {
-        bool: false,
-        arr: ['one', 'two', 'three'],
-        str: 'a string'
-    };
-    changes.networks = [
-        'de749393-836c-42ce-9c7b-e81072ca3a23'
-    ];
-    papi.update(PKG.uuid, changes, function (err, pkg) {
-        t.ifError(err);
-        t.ok(pkg);
-        t.equal(pkg.active, false);
-        t.equal(pkg['default'], false);
-        t.equal(pkg.traits.bool, false);
-        t.equal(pkg.networks.length, 1);
-        t.ok(Array.isArray(pkg.networks), 'networks is array');
-        PKG = pkg;
-        t.done();
+    tt.test(' modify mutable attribute', function (t) {
+        var changes = {};
+        changes.active = false;
+        changes['default'] = false;
+        changes.traits = {
+            bool: false,
+            arr: ['one', 'two', 'three'],
+            str: 'a string'
+        };
+        changes.networks = [
+            'de749393-836c-42ce-9c7b-e81072ca3a23'
+        ];
+        papi.update(PKG.uuid, changes, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.equal(pkg.active, false);
+            t.equal(pkg['default'], false);
+            t.equal(pkg.traits.bool, false);
+            t.equal(pkg.networks.length, 1);
+            t.ok(Array.isArray(pkg.networks), 'networks is array');
+            PKG = pkg;
+            t.end();
+        });
     });
-};
 
 
-exports.test_modify_immutable_attribute = function (t) {
-    var changes = clone(PKG);
-    changes.max_physical_memory = 256;
-    papi.update(PKG.uuid, changes, function (err) {
-        t.ok(err);
-        t.ok(/Attempt to update immutables/.test(err.message));
+    tt.test(' modify immutable attribute', function (t) {
+        var changes = clone(PKG);
+        changes.max_physical_memory = 256;
+        papi.update(PKG.uuid, changes, function (err) {
+            t.ok(err);
+            t.ok(/Attempt to update immutables/.test(err.message));
 
-        t.deepEqual(err.body.errors, [ {
-            field: 'max_physical_memory',
-            code: 'Invalid',
-            message: 'is immutable'
-        } ]);
+            t.deepEqual(err.body.errors, [ {
+                field: 'max_physical_memory',
+                code: 'Invalid',
+                message: 'is immutable'
+            } ]);
 
-        t.done();
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_package = function (t) {
-    papi.del(PKG.uuid, {}, function (err) {
-        t.ok(err);
-        t.equal(err.message, 'Packages cannot be deleted');
-        t.equal(err.statusCode, 405);
-        t.done();
+    tt.test(' delete package', function (t) {
+        papi.del(PKG.uuid, {}, function (err) {
+            t.ok(err);
+            t.equal(err.message, 'Packages cannot be deleted');
+            t.equal(err.statusCode, 405);
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_packages = function (t) {
-    papi.add(another_entry, function (err, pkg) {
-        t.ifError(err);
-        t.ok(pkg);
-        t.ok(pkg.uuid);
-        papi.list({}, {}, function (err2, packages) {
-            t.ifError(err2);
-            t.ok(util.isArray(packages));
-            t.done();
+    tt.test(' list packages', function (t) {
+        papi.add(another_entry, function (err, pkg) {
+            t.ifError(err);
+            t.ok(pkg);
+            t.ok(pkg.uuid);
+            papi.list({}, {}, function (err2, packages) {
+                t.ifError(err2);
+                t.ok(util.isArray(packages));
+                t.end();
+            });
         });
     });
-};
 
 
-exports.test_list_packages_using_wildcards_with_escaping = function (t) {
-    papi.list({ name: 'regular_*' }, {}, function (err, packages) {
-        t.ifError(err);
-        t.ok(util.isArray(packages));
-        t.ok(packages.length === 0);
-        t.done();
+    tt.test(' list packages using wildcards with escaping', function (t) {
+        papi.list({ name: 'regular_*' }, {}, function (err, packages) {
+            t.ifError(err);
+            t.ok(util.isArray(packages));
+            t.ok(packages.length === 0);
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_packages_using_wildcards_without_escaping = function (t) {
-    papi.list({ name: 'regular_*' }, { escape: false },
-              function (err, packages) {
-        t.ifError(err);
-        t.ok(util.isArray(packages));
-        t.ok(packages.length > 0);
-        t.done();
+    tt.test(' list packages using wildcards withtou escaping', function (t) {
+        papi.list({ name: 'regular_*' }, { escape: false },
+                  function (err, packages) {
+            t.ifError(err);
+            t.ok(util.isArray(packages));
+            t.ok(packages.length > 0);
+            t.end();
+        });
     });
-};
 
 
-exports.test_search_packages = function (t) {
-    var filter = '(max_physical_memory=128)';
-    papi.list(filter, {}, function (err, packages) {
-        t.ifError(err);
-        t.ok(util.isArray(packages));
-        packages.forEach(function (p) {
-            t.equal(128, p.max_physical_memory);
+    tt.test(' search packages', function (t) {
+        var filter = '(max_physical_memory=128)';
+        papi.list(filter, {}, function (err, packages) {
+            t.ifError(err);
+            t.ok(util.isArray(packages));
+            packages.forEach(function (p) {
+                t.equal(128, p.max_physical_memory);
+            });
+            t.end();
         });
-        t.done();
     });
-};
 
 
-exports.tearDown = function (callback) {
-    papi.close();
-    callback();
-};
\ No newline at end of file
+    tt.test(' teardown', function (t) {
+        papi.close();
+        t.end();
+    });
+});
\ No newline at end of file
diff --git a/test/runtests b/test/runtests
index 005c44c..63996da 100755
--- a/test/runtests
+++ b/test/runtests
@@ -23,22 +23,6 @@ set -o errexit
 set -o pipefail
 
 
-
-#---- guard
-
-if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
-    cat <<EOF
-To run this test you must create the file:
-
-    /lib/sdc/.sdc-test-no-production-data
-
-after ensuring you have no production data on this SDC.
-EOF
-    exit 2
-fi
-
-
-
 #---- support stuff
 
 function fatal
@@ -56,12 +40,14 @@ function errexit
 function usage
 {
     echo "Usage:"
-    echo "  ./runtests [OPTIONS...]     # from the GZ"
+    echo "  ./runtests [OPTIONS...]"
     echo ""
     echo "Options:"
-    echo "  -h          Print this help and exit."
-    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
-    echo "  -r REPOTER  The nodeunit reporter to use, default is 'tap'."
+    echo "  -h           Print this help and exit."
+    echo "  -f FILTER    Filter pattern (substring match) for test files to run."
+    echo "  -H HEADNODE  If given, then attempt to run the tests against a DC"
+    echo "               with the given headnode GZ IP. If not given, this"
+    echo "               assumes we are running from the headnode GZ."
 }
 
 
@@ -71,13 +57,12 @@ function usage
 trap 'errexit $?' EXIT
 
 TOP=$(cd $(dirname $0)/../; pwd)
-PATH=/usr/node/bin:$PATH
 
 #TODO(RELENG-386): set test user: sdcclientstestuser ??
 # Options.
 opt_test_pattern=
-opt_reporter=tap
-while getopts "hf:r:" opt
+opt_headnode=
+while getopts "hf:H:" opt
 do
     case "$opt" in
         h)
@@ -87,8 +72,8 @@ do
         f)
             opt_test_pattern=$OPTARG
             ;;
-        r)
-            opt_reporter=$OPTARG
+        H)
+            opt_headnode=$OPTARG
             ;;
         *)
             usage
@@ -98,23 +83,62 @@ do
 done
 
 
+if [[ -z "$opt_headnode" && $(uname) != "SunOS" ]]; then
+    fatal "not running on SunOS (use the '-H headnode' argument to run" \
+        "this against a given DC)"
+fi
+
+# Production guard
+MARKER="/lib/sdc/.sdc-test-no-production-data"
+haveMarker=no
+if [[ -n "$opt_headnode" ]]; then
+    if $(ssh $opt_headnode "test -f $MARKER"); then
+        haveMarker=yes
+    fi
+elif [[ -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
+    haveMarker=yes
+fi
+
+if [[ "$haveMarker" != "yes" ]]; then
+    cat <<EOF
+To run this test you must create the file:
+
+    $MARKER
+
+after ensuring you have no production data on this Triton DataCenter.
+EOF
+    exit 2
+fi
+
+
 # Gather DC setup info for the test files.
-export AMON_IP=$(bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1)
-export UFDS_IP=$(bash /lib/sdc/config.sh -json | json ufds_admin_ips | cut -d, -f1)
-export CNAPI_IP=$(bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1)
-export CA_IP=$(bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1)
-export NAPI_IP=$(bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1)
-export VMAPI_IP=$(bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1)
-export UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-export DSAPI_URL=$(bash /lib/sdc/config.sh -json | json dsapi_url)
-export PAPI_IP=$(bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1)
-export CNS_IP=$(sdcadm insts cns -j | json 0.ip)
-export MORAY_IP=$(sdcadm insts moray -j | json 0.ip)
+if [[ -n "$opt_headnode" ]]; then
+    export AMON_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1')
+    export CNAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1')
+    export CA_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1')
+    export NAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1')
+    export VMAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1')
+    export UFDS_ADMIN_UUID=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json ufds_admin_uuid')
+    export DSAPI_URL=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json dsapi_url')
+    export PAPI_IP=$(ssh $opt_headnode 'bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1')
+    export CNS_IP=$(ssh $opt_headnode '/opt/smartdc/bin/sdcadm insts cns -j | json 0.ip')
+    export MORAY_IP=$(ssh $opt_headnode '/opt/smartdc/bin/sdcadm insts moray -j | json 0.ip')
+else
+    export AMON_IP=$(bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1)
+    export CNAPI_IP=$(bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1)
+    export CA_IP=$(bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1)
+    export NAPI_IP=$(bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1)
+    export VMAPI_IP=$(bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1)
+    export UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
+    export DSAPI_URL=$(bash /lib/sdc/config.sh -json | json dsapi_url)
+    export PAPI_IP=$(bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1)
+    export CNS_IP=$(sdcadm insts cns -j | json 0.ip)
+    export MORAY_IP=$(sdcadm insts moray -j | json 0.ip)
+fi
 
 echo ""
 echo "# Datacenter config:"
 echo "#     AMON_IP is $AMON_IP"
-echo "#     UFDS_IP is $UFDS_IP"
 echo "#     CNAPI_IP is $CNAPI_IP"
 echo "#     CA_IP is $CA_IP"
 echo "#     NAPI_IP is $NAPI_IP"
@@ -128,15 +152,11 @@ echo "#     MORAY_IP is $MORAY_IP"
 
 echo ""
 cd $TOP
-NODEUNIT=$TOP/node_modules/nodeunit/bin/nodeunit
-test_files=$(ls -1 test/*.test.js)
-test_files=$(echo "$test_files" | grep -v amon)   #XXX exclude for now
+test_files=$(ls -1 ./test/*.test.js)
 if [[ -n "$opt_test_pattern" ]]; then
     test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
     echo "# Running filtered set of test files: $test_files"
 fi
 if [[ -n "$test_files" ]]; then
-    $NODEUNIT --reporter=$opt_reporter $test_files
-    # Note: Need https://github.com/caolan/nodeunit/pull/168 before we get
-    # a non-zero exit status on any test failures.
+    $TOP/node_modules/.bin/tape $test_files
 fi
diff --git a/test/ufds.test.js b/test/ufds.test.js
deleted file mode 100644
index baf9028..0000000
--- a/test/ufds.test.js
+++ /dev/null
@@ -1,767 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var Logger = require('bunyan');
-var libuuid = require('libuuid');
-function uuid() {
-    return (libuuid.create());
-}
-var util = require('util');
-var clone = require('clone');
-
-var UFDS = require('../lib/index').UFDS;
-
-
-// --- Globals
-
-var UFDS_URL = 'ldaps://' + (process.env.UFDS_IP || '10.99.99.18');
-
-var ufds;
-
-var SSH_KEY = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAvad19ePSDckmgmo6Unqmd8' +
-    'n2G7o1794VN3FazVhV09yooXIuUhA+7OmT7ChiHueayxSubgL2MrO/HvvF/GGVUs/t3e0u4' +
-    '5YwRC51EVhyDuqthVJWjKrYxgDMbHru8fc1oV51l0bKdmvmJWbA/VyeJvstoX+eiSGT3Jge' +
-    'egSMVtc= mark@foo.local';
-
-var SSH_KEY_TWO = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCymx1xJfEugfRzb3G4H' +
-'dB8pzwZWbRo6kCSSgrpElMkOSPiPYCqaRVoD7FaX1yv1wUwQzuS/9rrf9PFvdGk81CNMpy0NG/I' +
-'6nlMH/v+mKvJYGvX5hc/fAg8izLwBwqCkJw/nek8Hv3PL4bJUZ18driqn4LUoj+gFlcmYoJy9+p' +
-'uvGkgDmXQxx5z0Vf+J6N6DQo8mymgbzvAMQNgf4xfTGCjIbUJFCVOMnH2S7XPypbGzOYS3Z8VYT' +
-'bt3AZHhEq9ZK4JfC60P8ddZvx6HFxOpqcoE6lFKj2GGziXusNndxfMKjTcZx2IHHlkR2+umeEnM' +
-'QhuWNEaoMFHiEIWU8h8HloD whatever@wherever.local';
-
-var SSH_KEY_THREE = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDY2qV5e2q8qb+kYtn' +
-'pvRxC5PM6aqPPgWcaXn2gm4jtefGAPuJX9fIkz/KTRRLxdG27IMt6hBXRXvL0Gzw0H0mSUPHAbq' +
-'g4TAyG3/xEHp8iLH/QIf/RwVgjoGB0MLZn7q+L4ThMDo9rIrc5CpfOm/AN9vC4w0Zzu/XpJbzjd' +
-'pTXOh+vmOKkiWCzN+BJ9DvX3iei5NFiSL3rpru0j4CUjBKchUg6X7mdv42g/ZdRT9rilmEP154F' +
-'X/bVsFHitmyyYgba+X90uIR8KGLFZ4eWJNPprJFnCWXrpY5bSOgcS9aWVgCoH8sqHatNKUiQpZ4' +
-'Lsqr+Z4fAf4enldx/KMW91iKn whatever@wherever.local';
-
-var PWD = process.env.ADMIN_PWD || 'joypass123';
-
-var ID = uuid();
-var LOGIN = 'a' + ID.substr(0, 7);
-var EMAIL = LOGIN + '_test@joyent.com';
-var DN = util.format('uuid=%s, ou=users, o=smartdc', ID);
-
-var SUB_ID = uuid();
-var SUB_LOGIN = 'a' + SUB_ID.substr(0, 7);
-var SUB_EMAIL = SUB_LOGIN + '_test@joyent.com';
-var SUB_UUID;
-
-// --- Tests
-
-exports.setUp = function (callback) {
-    ufds = new UFDS({
-        url: UFDS_URL,
-        bindDN: 'cn=root',
-        bindPassword: 'secret',
-        clientTimeout: 2000,
-        log: new Logger({
-            name: 'ufds_unit_test',
-            stream: process.stdout,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-        }),
-        tlsOptions: {
-            rejectUnauthorized: false
-        },
-        retry: {
-            retries: 5,
-            maxTimeout: 10000,
-            minTimeout: 100
-        }
-    });
-    ufds.once('ready', function () {
-        ufds.removeAllListeners('error');
-        callback();
-    });
-    ufds.once('error', function (err) {
-        ufds.removeAllListeners('ready');
-        callback(err);
-    });
-};
-
-
-exports.testGetUser = function (test) {
-    var entry = {
-        login: LOGIN,
-        email: EMAIL,
-        uuid: ID,
-        userpassword: PWD,
-        objectclass: 'sdcperson'
-    };
-
-    ufds.add(DN, entry, function (err) {
-        test.ifError(err);
-        ufds.getUser(LOGIN, function (err2, user) {
-            test.ifError(err2);
-            test.equal(user.login, LOGIN);
-            // Testing no hidden attributes are available:
-            test.ok(!user._owner);
-            test.ok(!user._parent);
-            test.done();
-        });
-    });
-};
-
-
-exports.testGetUserByUuid = function (test) {
-    ufds.getUser(ID, function (err, user) {
-        test.ifError(err);
-        test.equal(user.login, LOGIN);
-        test.done();
-    });
-};
-
-
-exports.testGetUserByEmail = function (test) {
-    ufds.getUserByEmail(EMAIL, function (err, user) {
-        test.ifError(err);
-        test.equal(user.login, LOGIN);
-        test.done();
-    });
-};
-
-exports.testGetUserNotFound = function (test) {
-    ufds.getUser(uuid(), function (err, user) {
-        test.ok(err);
-        test.equal(err.statusCode, 404);
-        test.equal(err.restCode, 'ResourceNotFound');
-        test.ok(err.message);
-        test.ok(!user);
-        test.done();
-    });
-};
-
-
-exports.testAuthenticate = function (test) {
-    ufds.authenticate(LOGIN, PWD, function (err, user) {
-        test.ifError(err);
-        test.ok(user);
-        ufds.getUser(LOGIN, function (err2, user2) {
-            test.ifError(err2);
-            test.equal(user.login, user2.login);
-            test.done();
-        });
-    });
-};
-
-
-exports.testAuthenticateByUuid = function (test) {
-    ufds.authenticate(ID, PWD, function (err, user) {
-        test.ifError(err);
-        test.ok(user);
-        test.equal(user.login, LOGIN);
-        user.authenticate(PWD, function (err2) {
-            test.ifError(err2);
-            test.done();
-        });
-    });
-};
-
-
-exports.test_add_key = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        user.addKey(SSH_KEY, function (err2, key) {
-            test.ifError(err2, err2);
-            test.ok(key, 'have key: ' + key);
-            if (key) {
-                test.equal(key.openssh, SSH_KEY);
-            }
-            test.done();
-        });
-    });
-};
-
-
-exports.test_add_duplicated_key_not_allowed = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err, 'getUser error');
-        user.addKey(SSH_KEY, function (err2, key) {
-            test.ok(err2, 'add duplicated key error');
-            test.done();
-        });
-    });
-};
-
-
-exports.testListAndGetKeys = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        user.listKeys(function (err2, keys) {
-            test.ifError(err2);
-            test.ok(keys);
-            test.ok(keys.length);
-            test.equal(keys[0].openssh, SSH_KEY);
-            user.getKey(keys[0].fingerprint, function (err3, key) {
-                test.ifError(err3);
-                test.ok(key);
-                test.deepEqual(keys[0], key);
-                test.done();
-            });
-        });
-    });
-};
-
-
-exports.test_add_key_by_name = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        user.addKey({
-            openssh: SSH_KEY_TWO,
-            name: 'id_rsa'
-        }, function (err2, key) {
-            test.ifError(err2);
-            test.ok(key);
-            test.equal(key.openssh, SSH_KEY_TWO);
-            test.done();
-        });
-    });
-
-};
-
-exports.test_add_duplicated_key_by_name = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err, 'getUser error');
-        user.addKey({
-            openssh: SSH_KEY_THREE,
-            name: 'id_rsa'
-        }, function (err2, key) {
-            test.ok(err2, 'add duplicated key error');
-            test.done();
-        });
-    });
-};
-
-
-exports.testDelKey = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        user.listKeys(function (err2, keys) {
-            test.ifError(err2);
-            user.deleteKey(keys[0], function (err3) {
-                test.ifError(err3);
-                user.deleteKey(keys[1], function (err4) {
-                    test.ifError(err4);
-                    test.done();
-                });
-            });
-        });
-    });
-};
-
-
-exports.testUserGroups = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        test.ok(!user.isAdmin());
-        test.ok(!user.isReader());
-        user.addToGroup('readers', function (err2) {
-            test.ifError(err2);
-            ufds.getUser(LOGIN, function (err3, user2) {
-                test.ifError(err3);
-                test.ok(user2.isReader());
-                user2.addToGroup('operators', function (err4) {
-                    test.ifError(err4);
-                    ufds.getUser(LOGIN, function (err5, user3) {
-                        test.ifError(err5);
-                        test.ok(user3.isAdmin());
-                        user3.removeFromGroup('operators', function (err6) {
-                            test.ifError(err6);
-                            ufds.getUser(LOGIN, function (err7, user4) {
-                                test.ifError(err7);
-                                test.ok(user4.isReader() && !user4.isAdmin());
-                                test.done();
-                            });
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.testCrudUser = function (test) {
-    var entry = {
-        login: 'a' + uuid().replace('-', '').substr(0, 7),
-        email: uuid() + '@devnull.com',
-        userpassword: 'secret123'
-    };
-    ufds.addUser(entry, function (err, user) {
-        test.ifError(err);
-        test.ok(user);
-        test.ok(user.uuid);
-        ufds.updateUser(user, {
-            phone: '+1 (206) 555-1212',
-            pwdaccountlockedtime: Date.now() + (3600 * 1000)
-        }, function (err2) {
-            test.ifError(err2);
-            user.authenticate(entry.userpassword, function (er) {
-                test.ok(er);
-                test.equal(er.statusCode, 401);
-                user.unlock(function (e) {
-                    test.ifError(e);
-                    user.authenticate(entry.userpassword, function (er2) {
-                        test.ifError(er2);
-                        user.destroy(function (err3) {
-                            test.ifError(err3);
-                            test.done();
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.testCrudLimit = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        test.ok(user);
-        user.addLimit(
-          {datacenter: 'coal', smartos: '123'},
-          function (err2, limit2) {
-            test.ifError(err2);
-            test.ok(limit2);
-            test.ok(limit2.smartos);
-            user.listLimits(function (err3, limits) {
-                test.ifError(err3);
-                test.ok(limits);
-                test.ok(limits.length);
-                test.ok(limits[0].smartos);
-                limits[0].nodejs = 234;
-                user.updateLimit(limits[0], function (err4) {
-                    test.ifError(err4);
-                    user.getLimit(limits[0].datacenter,
-                            function (err5, limit5) {
-                        test.ifError(err5);
-                        test.ok(limit5);
-                        test.ok(limit5.smartos);
-                        test.ok(limit5.nodejs);
-                        user.deleteLimit(limit5, function (err6) {
-                            test.ifError(err6);
-                            test.done();
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.testMetadata = function (t) {
-    var meta = {
-        whatever: 'A meaningful value for whatever setting it'
-    };
-    var key = 'some-app';
-    var META_FMT = 'metadata=%s, uuid=%s, ou=users, o=smartdc';
-
-    ufds.getUser(LOGIN, function (err, user) {
-        t.ifError(err, 'testMetadata getUser error');
-        t.ok(user);
-        ufds.addMetadata(user, key, meta, function (err2, metadata) {
-            t.ifError(err2, 'testMetadata addMetadata error');
-            t.ok(metadata.cn);
-            t.equal(key, metadata.cn);
-            t.ok(metadata.dn);
-            t.equal(metadata.dn, util.format(META_FMT, key, user.uuid));
-            t.ok(metadata.objectclass);
-            t.equal('capimetadata', metadata.objectclass);
-            // CAPI-319: getMetadata w/o object
-            ufds.getMetadata(LOGIN, key, function (err3, meta3) {
-                t.ifError(err3, 'testMetadata getMetadata error');
-                t.ok(meta3);
-                // And now with object:
-                ufds.getMetadata(user, key, function (err4, meta4) {
-                    t.ifError(err4, 'testMetadata getMetadata error');
-                    t.ok(meta4);
-                    ufds.deleteMetadata(user, key, function (er5, meta5) {
-                        t.ifError(er5);
-                        t.done();
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-// Account users and roles:
-exports.test_add_sub_user_to_account = function (test) {
-    var entry = {
-        login: SUB_LOGIN,
-        email: SUB_EMAIL,
-        userpassword: PWD,
-        objectclass: 'sdcperson',
-        account: ID
-    };
-
-    ufds.addUser(entry, function (err, user) {
-        test.ifError(err);
-        test.equal(user.login, SUB_LOGIN);
-        test.ok(user.uuid);
-        SUB_UUID = user.uuid;
-        ufds.getUser(SUB_UUID, ID, function (e1, u1) {
-            test.equal(user.login, SUB_LOGIN);
-            test.done();
-        });
-    });
-
-};
-
-
-exports.test_subuser_key = function (test) {
-    ufds.getUser(SUB_LOGIN, ID, function (err, user) {
-        test.ifError(err);
-        user.addKey(SSH_KEY, function (err2, key) {
-            test.ifError(err2, err2);
-            test.ok(key, 'have key: ' + key);
-            if (key) {
-                test.equal(key.openssh, SSH_KEY);
-            }
-            user.listKeys(function (er2, keys) {
-                test.ifError(er2);
-                test.ok(keys);
-                test.ok(keys.length);
-                test.equal(keys[0].openssh, SSH_KEY);
-                user.getKey(keys[0].fingerprint, user.account,
-                    function (er3, key2) {
-                    test.ifError(er3);
-                    test.ok(key2);
-                    test.deepEqual(keys[0], key2);
-                    user.deleteKey(keys[0], function (err3) {
-                        test.ifError(err3);
-                        test.done();
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.test_sub_users_metadata = function (t) {
-    var meta = {
-        whatever: 'A meaningful value for whatever setting it'
-    };
-    var key = 'some-app';
-    var SUB_META_FMT = 'metadata=%s, uuid=%s, uuid=%s, ou=users, o=smartdc';
-
-    ufds.getUser(SUB_LOGIN, ID, function (err, user) {
-        t.ifError(err, 'testMetadata getUser error');
-        t.ok(user, 'metadata user');
-        ufds.addMetadata(user, key, meta, function (err2, metadata) {
-            t.ifError(err2, 'testMetadata addMetadata error');
-            t.ok(metadata.cn, 'metadata cn');
-            t.equal(key, metadata.cn, 'metadata cn value');
-            t.ok(metadata.dn, 'metadata dn');
-            t.equal(metadata.dn,
-                util.format(SUB_META_FMT, key, user.uuid, user.account),
-                'metadata dn value');
-            t.ok(metadata.objectclass, 'meta objectclass');
-            t.equal('capimetadata', metadata.objectclass,
-                'meta objectclass val');
-            // CAPI-319: getMetadata w/o object
-            ufds.getMetadata(SUB_LOGIN, key, user.account,
-                function (err3, meta3) {
-                t.ifError(err3, 'testMetadata getMetadata error');
-                t.ok(meta3, 'get meta w/o object');
-                // And now with object:
-                ufds.getMetadata(user, key, function (err4, meta4) {
-                    t.ifError(err4, 'testMetadata getMetadata error');
-                    t.ok(meta4, 'get meta with object');
-                    ufds.deleteMetadata(user, key, function (er5, meta5) {
-                        t.ifError(er5);
-                        t.done();
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-// Sub-users limits are the same than main account user limits:
-exports.test_sub_users_limits = function (test) {
-    ufds.getUser(LOGIN, function (err, user) {
-        test.ifError(err);
-        test.ok(user);
-        user.addLimit(
-          {datacenter: 'coal', smartos: '123'},
-          function (err2, limit) {
-            test.ifError(err2);
-            test.ok(limit);
-            test.ok(limit.smartos);
-            ufds.getUser(SUB_LOGIN, ID, function (err3, subuser) {
-                test.ifError(err3, 'sub user limits getUser error');
-                test.ok(subuser, 'subuser');
-                subuser.listLimits(function (err4, limits) {
-                    test.ifError(err4);
-                    test.ok(limits);
-                    test.ok(limits.length);
-                    test.ok(limits[0].smartos);
-                    subuser.getLimit(limits[0].datacenter,
-                            function (err5, limit5) {
-                        test.ifError(err5);
-                        test.ok(limit5);
-                        test.ok(limit5.smartos);
-                        user.deleteLimit(limit5, function (err6) {
-                            test.ifError(err6);
-                            test.done();
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-
-exports.test_sub_users_crud = function (test) {
-    var id = uuid();
-    var login = 'a' + id.substr(0, 7);
-    var email = login + '_test@joyent.com';
-
-    var entry = {
-        login: login,
-        email: email,
-        userpassword: PWD,
-        objectclass: 'sdcperson',
-        account: ID
-    };
-
-    ufds.addUser(entry, function (err, user) {
-        test.ifError(err);
-        test.equal(user.login, login);
-        ufds.getUserByEmail(entry.email, entry.account, function (err2, user2) {
-            test.ifError(err2);
-            test.equal(user2.login, login);
-
-            ufds.updateUser(user.uuid, {
-                phone: '+1 (206) 555-1212',
-                pwdaccountlockedtime: Date.now() + (3600 * 1000)
-            }, user.account, function (err3) {
-                test.ifError(err3);
-                user.authenticate(entry.userpassword, function (err4) {
-                    test.ok(err4);
-                    test.equal(err4.statusCode, 401);
-                    user.unlock(function (err5) {
-                        test.ifError(err5);
-                        user.authenticate(entry.userpassword,
-                                function (err6) {
-                            test.ifError(err6);
-                            user.destroy(function (err7) {
-                                test.ifError(err7);
-                                test.done();
-                            });
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.test_account_policies = function (test) {
-    var policy_uuid = uuid();
-    var cn = 'a' + policy_uuid.substr(0, 7);
-    var entry = {
-        name: cn,
-        rule: 'John, Jack and Jane can ops_* *',
-        account: ID,
-        uuid: policy_uuid,
-        description: 'This is completely optional'
-    };
-    ufds.addPolicy(ID, entry, function (err, policy) {
-        test.ifError(err, 'addPolicy error');
-        test.equal(policy.dn, util.format(
-                'policy-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                policy_uuid, ID));
-        ufds.listPolicies(ID, function (err2, policies) {
-            test.ifError(err2, 'listPolicies error');
-            test.ok(Array.isArray(policies), 'Array of policies');
-            test.equal(policies[0].dn, util.format(
-                'policy-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                policy_uuid, ID));
-            entry.rule = [
-                'Fred can read *.js when dirname::string = ' +
-                'examples and sourceip = 10.0.0.0/8',
-                'John, Jack and Jane can ops_* *'
-            ];
-            ufds.modifyPolicy(ID, entry.uuid, entry, function (err3, policy3) {
-                test.ifError(err3, 'modify policy error');
-                test.equal(policy3.rule.length, 2);
-                ufds.deletePolicy(ID, entry.uuid, function (err4) {
-                    test.ifError(err4, 'deletePolicy error');
-                    test.done();
-                });
-            });
-
-        });
-    });
-};
-
-
-exports.test_account_roles = function (test) {
-    var role_uuid = uuid();
-    var cn = 'a' + role_uuid.substr(0, 7);
-    var entry = {
-        name: cn,
-        uniquemember: util.format(
-                'uuid=%s, uuid=%s, ou=users, o=smartdc', SUB_UUID, ID),
-        uniquememberdefault: util.format(
-                'uuid=%s, uuid=%s, ou=users, o=smartdc', SUB_UUID, ID),
-        account: ID,
-        uuid: role_uuid
-    };
-    ufds.addRole(ID, entry, function (err, role) {
-        test.ifError(err, 'addGroup error');
-        test.equal(role.dn, util.format(
-                'role-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                role_uuid, ID));
-        ufds.listRoles(ID, function (err2, roles) {
-            test.ifError(err2, 'listRoles error');
-            test.ok(Array.isArray(roles), 'Array of roles');
-            test.equal(roles[0].dn, util.format(
-                'role-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                role_uuid, ID));
-            ufds.getUser(SUB_LOGIN, ID, function (err3, subuser) {
-                test.ifError(err3, 'sub user limits getUser error');
-                test.ok(subuser, 'subuser');
-                subuser.roles(function (err4, rls) {
-                    test.ifError(err4, 'sub user roles');
-                    test.ok(Array.isArray(rls), 'user roles is an array');
-                    subuser.defaultRoles(function (err5, drls) {
-                        test.ifError(err5, 'sub user default roles');
-                        test.ok(Array.isArray(drls),
-                            'sub user default roles is an array');
-                        entry.description = 'This is completely optional';
-                        ufds.modifyRole(ID, entry.uuid, entry,
-                                function (err6, role6) {
-                            test.ifError(err6, 'modify role error');
-                            test.ok(role6.description);
-                            ufds.deleteRole(ID, entry.uuid, function (err7) {
-                                test.ifError(err7, 'deleteRole error');
-                                test.done();
-                            });
-                        });
-                    });
-                });
-            });
-        });
-    });
-};
-
-
-exports.test_remove_user_from_account = function (test) {
-    ufds.deleteUser(SUB_LOGIN, ID, function (err) {
-        test.ifError(err);
-        test.done();
-    });
-};
-
-
-
-exports.test_hidden_control = function (test) {
-    var ufds2 = new UFDS({
-        url: UFDS_URL,
-        bindDN: 'cn=root',
-        bindPassword: 'secret',
-        clientTimeout: 2000,
-        hidden: true,
-        log: new Logger({
-            name: 'ufds_unit_test',
-            stream: process.stdout,
-            level: (process.env.LOG_LEVEL || 'info'),
-            serializers: Logger.stdSerializers
-        }),
-        tlsOptions: {
-            rejectUnauthorized: false
-        },
-        retry: {
-            retries: 5,
-            maxTimeout: 10000,
-            minTimeout: 100
-        }
-    });
-
-    ufds2.once('ready', function () {
-        ufds2.removeAllListeners('error');
-        ufds2.getUser(LOGIN, function (err, user) {
-            test.ifError(err);
-            test.equal(user.login, LOGIN);
-            // Testing hidden attributes are available:
-            test.ok(user._owner);
-            test.ok(user._parent);
-            ufds2.close(function () {
-                test.done();
-            });
-        });
-    });
-
-    ufds2.once('error', function (err) {
-        ufds2.removeAllListeners('ready');
-        test.ifError(err);
-        test.done();
-    });
-};
-
-
-exports.test_account_resources = function (test) {
-    var res_uuid = uuid();
-    var entry = {
-        name: util.format('/%s/users', ID),
-        memberrole: [ util.format(
-                'role-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                uuid(), ID) ],
-        account: ID,
-        uuid: res_uuid
-    };
-    ufds.addResource(ID, entry, function (err, resource) {
-        test.ifError(err, 'addResource error');
-        test.equal(resource.dn, util.format(
-                'resource-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                res_uuid, ID));
-        ufds.listResources(ID, function (err2, resources) {
-            test.ifError(err2, 'listResources error');
-            test.ok(Array.isArray(resources), 'Array of resources');
-            test.equal(resources[0].dn, util.format(
-                'resource-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                res_uuid, ID));
-            entry.memberrole.push(util.format(
-                'role-uuid=%s, uuid=%s, ou=users, o=smartdc',
-                uuid(), ID));
-            ufds.modifyResource(ID, entry.uuid, entry,
-                    function (err3, resource3) {
-                test.ifError(err3, 'modify resource error');
-                test.equal(resource3.memberrole.length, 2);
-                ufds.deleteResource(ID, entry.uuid, function (err4) {
-                    test.ifError(err4, 'deleteResource error');
-                    test.done();
-                });
-            });
-        });
-    });
-};
-
-
-
-exports.tearDown = function (callback) {
-    ufds.close(function () {
-        callback();
-    });
-};
diff --git a/test/vmapi.test.js b/test/vmapi.test.js
index 200f153..4006b19 100644
--- a/test/vmapi.test.js
+++ b/test/vmapi.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 
@@ -14,6 +14,7 @@ var ldapfilter = require('ldap-filter');
 var libuuid = require('libuuid');
 var bunyan = require('bunyan');
 var moray = require('moray');
+var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
 
@@ -21,6 +22,7 @@ var VMAPI = require('../lib/index').VMAPI;
 var NAPI = require('../lib/index').NAPI;
 var CNAPI = require('../lib/index').CNAPI;
 
+
 // --- Globals
 
 var VMAPI_URL = 'http://' + (process.env.VMAPI_IP || '10.99.99.27');
@@ -77,12 +79,8 @@ var NB_PAGINATION_TEST_VMS_TO_CREATE = LIST_VMS_PAGINATION_LIMIT * 2 + 1;
 var testPaginationVms;
 var leftoverTestPaginationVms;
 
-// --- Helpers
 
-process.on('uncaughtException', function (err) {
-    console.error(err.stack);
-    process.exit(1);
-});
+// --- Helpers
 
 function checkEqual(value, expected) {
     if ((typeof (value) === 'object') && (typeof (expected) === 'object')) {
@@ -235,951 +233,952 @@ function cleanupTestVms(vmProperties, callback) {
     });
 }
 
+
 // --- Tests
 
-exports.setUp = function (callback) {
-    var logger = bunyan.createLogger({
+test('vmapi', function (tt) {
+    tt.test(' setup', function (t) {
+        var log = bunyan.createLogger({
             name: 'vmapi_unit_test',
             stream: process.stderr,
             level: (process.env.LOG_LEVEL || 'info'),
             serializers: bunyan.stdSerializers
-    });
+        });
 
-    vmapi = new VMAPI({
-        url: VMAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false
-    });
+        vmapi = new VMAPI({
+            url: VMAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log
+        });
 
-    napi = new NAPI({
-        url: NAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false
-    });
+        napi = new NAPI({
+            url: NAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log
+        });
 
-    cnapi = new CNAPI({
-        url: CNAPI_URL,
-        retry: {
-            retries: 1,
-            minTimeout: 1000
-        },
-        log: logger,
-        agent: false
-    });
+        cnapi = new CNAPI({
+            url: CNAPI_URL,
+            retry: {
+                retries: 1,
+                minTimeout: 1000
+            },
+            log: log
+        });
 
-    callback();
-};
+        t.end();
+    });
 
 
+    tt.test(' list networks', function (t) {
+        napi.listNetworks({ name: 'admin' }, function (err, nets1) {
+            t.ifError(err);
+            t.ok(nets1);
+            ADMIN_NETWORK = nets1[0].uuid;
 
-exports.test_list_networks = function (test) {
-    napi.listNetworks({ name: 'admin' }, function (err, nets1) {
-        test.ifError(err);
-        test.ok(nets1);
-        ADMIN_NETWORK = nets1[0].uuid;
+            napi.listNetworks({ name: 'external' }, function (err2, nets2) {
+                t.ifError(err2);
+                t.ok(nets1);
+                EXTERNAL_NETWORK = nets1[0].uuid;
+                t.end();
+            });
+        });
+    });
 
-        napi.listNetworks({ name: 'external' }, function (err2, nets2) {
-            test.ifError(err2);
-            test.ok(nets1);
-            EXTERNAL_NETWORK = nets1[0].uuid;
-            test.done();
+    tt.test(' cleanup leftover test vms', function (t) {
+        cleanupTestVms({state: 'running'}, function cleanupDone(err) {
+            t.ifError(err);
+            t.end();
         });
     });
-};
 
-exports.cleanup_leftover_test_vms = function (test) {
-    cleanupTestVms({state: 'running'}, function cleanupDone(err) {
-        test.ifError(err);
-        test.done();
+    // Create enough fake VMs so that listing them all requires paginating
+    // through several pages.
+    tt.test(' create test list pagination vms', function (t) {
+        createTestVms(NB_PAGINATION_TEST_VMS_TO_CREATE, {state: 'running'},
+            function onTestVmsCreated(err) {
+                t.ifError(err);
+                t.end();
+            });
     });
-};
 
-// Create enough fake VMs so that listing them all requires paginating through
-// several pages.
-exports.create_test_list_pagination_vms = function (test) {
-    createTestVms(NB_PAGINATION_TEST_VMS_TO_CREATE, {state: 'running'},
-        function onTestVmsCreated(err) {
-            test.ifError(err);
-            test.done();
+    tt.test(' list pagination vms', function (t) {
+        vmapi.listVms({
+            alias: TEST_VMS_ALIAS,
+            state: 'running'
+        }, function (err, vms) {
+            t.ifError(err);
+            t.ok(vms);
+            // Make sure _all_ vms are returned, not just the first page
+            t.equal(vms.length, NB_PAGINATION_TEST_VMS_TO_CREATE,
+                'listVms should return ' + NB_PAGINATION_TEST_VMS_TO_CREATE +
+                ' VMs, but instead returned ' + vms.length);
+            testPaginationVms = vms;
+            t.end();
         });
-};
-
-exports.test_list_pagination_vms = function (test) {
-    vmapi.listVms({
-        alias: TEST_VMS_ALIAS,
-        state: 'running'
-    }, function (err, vms) {
-        test.ifError(err);
-        test.ok(vms);
-        // Make sure _all_ vms are returned, not just the first page
-        test.equal(vms.length, NB_PAGINATION_TEST_VMS_TO_CREATE,
-            'listVms should return ' + NB_PAGINATION_TEST_VMS_TO_CREATE +
-            ' VMs, but instead returned ' + vms.length);
-        testPaginationVms = vms;
-        test.done();
     });
-};
 
-exports.remove_test_list_pagination_vms = function (test) {
-    cleanupTestVms({state: 'running'}, function cleanupDone(err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' test list pagination vms', function (t) {
+        cleanupTestVms({state: 'running'}, function cleanupDone(err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
-exports.test_list_vms = function (test) {
-    vmapi.listVms(function (err, vms) {
-        test.ifError(err);
-        test.ok(vms);
-        ZONE = vms[0].uuid;
-        QUERY = {
-            uuid: ZONE,
-            owner_uuid: vms[0].owner_uuid
-        };
-        test.done();
+    tt.test(' list vms', function (t) {
+        vmapi.listVms(function (err, vms) {
+            t.ifError(err);
+            t.ok(vms);
+            ZONE = vms[0].uuid;
+            QUERY = {
+                uuid: ZONE,
+                owner_uuid: vms[0].owner_uuid
+            };
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_vms_by_owner = function (test) {
-    vmapi.listVms({ owner_uuid: CUSTOMER }, function (err, vms) {
-        test.ifError(err);
-        test.ok(vms);
-        test.done();
+    tt.test(' list vms by owner', function (t) {
+        t.ok(CUSTOMER, 'CUSTOMER is set');
+        vmapi.listVms({ owner_uuid: CUSTOMER }, function (err, vms) {
+            t.ifError(err);
+            t.ok(vms);
+            t.end();
+        });
     });
-};
 
 
-exports.test_count_vms = function (test) {
-    vmapi.countVms({ owner_uuid: CUSTOMER }, function (err, counter) {
-        test.ifError(err);
-        test.ok(counter);
-        test.done();
+    tt.test(' count vms', function (t) {
+        vmapi.countVms({ owner_uuid: CUSTOMER }, function (err, counter) {
+            t.ifError(err);
+            t.ok(counter);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_vm = function (test) {
-    vmapi.getVm(QUERY, function (err, vm) {
-        test.ifError(err);
-        test.ok(vm);
-        test.done();
+    tt.test(' get vm', function (t) {
+        vmapi.getVm(QUERY, function (err, vm) {
+            t.ifError(err);
+            t.ok(vm);
+            t.end();
+        });
     });
-};
 
 
-exports.find_headnode = function (t) {
-    cnapi.listServers(function (err, servers) {
-        t.ifError(err);
-        t.ok(servers);
-        t.ok(Array.isArray(servers));
-        t.ok(servers.length > 0);
-        servers = servers.filter(function (server) {
-            return (server.headnode);
+    tt.test(' find headnode', function (t) {
+        cnapi.listServers(function (err, servers) {
+            t.ifError(err);
+            t.ok(servers);
+            t.ok(Array.isArray(servers));
+            t.ok(servers.length > 0);
+            servers = servers.filter(function (server) {
+                return (server.headnode);
+            });
+            t.ok(servers.length > 0);
+            HEADNODE = servers[0];
+            t.ok(HEADNODE);
+            t.end();
         });
-        t.ok(servers.length > 0);
-        HEADNODE = servers[0];
-        t.ok(HEADNODE);
-        t.done();
     });
-};
 
 
-exports.test_create_zone = function (test) {
-    var opts = {
-        owner_uuid: CUSTOMER,
-        image_uuid: IMAGE_UUID,
-        networks: [ ADMIN_NETWORK ],
-        brand: 'joyent-minimal',
-        ram: 64,
-        server_uuid: HEADNODE.uuid,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT,
-        alias: 'node-sdc-clients-vmapi-test-zone'
-    };
-
-    vmapi.createVm(opts, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        ZONE = job.vm_uuid;
-        JOB_UUID = job.job_uuid;
-        QUERY = {
-            uuid: ZONE,
+    tt.test(' create zone', function (t) {
+        var opts = {
             owner_uuid: CUSTOMER,
+            image_uuid: IMAGE_UUID,
+            networks: [ ADMIN_NETWORK ],
+            brand: 'joyent-minimal',
+            ram: 64,
+            server_uuid: HEADNODE.uuid,
             origin: 'sdc-clients-test',
             owner_uuid: CUSTOMER,
-            context: CONTEXT
+            context: CONTEXT,
+            alias: 'node-sdc-clients-vmapi-test-zone'
         };
-        test.done();
+
+        vmapi.createVm(opts, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            ZONE = job.vm_uuid;
+            JOB_UUID = job.job_uuid;
+            QUERY = {
+                uuid: ZONE,
+                owner_uuid: CUSTOMER,
+                origin: 'sdc-clients-test',
+                owner_uuid: CUSTOMER,
+                context: CONTEXT
+            };
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_running_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for running job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        setTimeout(function () {
-            // Try to avoid the reboot after zoneinit so we don't stop the zone
-            // too early
-            test.done();
-        }, 10000);
+    tt.test(' wait for running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            setTimeout(function () {
+                // Try to avoid the reboot after zoneinit so we don't stop the
+                // zone too early
+                t.end();
+            }, 10000);
+        });
     });
-};
 
 
-exports.test_get_new_vm = function (test) {
-    vmapi.getVm(QUERY, function (err, vm) {
-        test.ifError(err);
-        test.ok(vm);
-        ADMIN_MAC = vm.nics[0].mac;
-        test.done();
+    tt.test(' get new vm', function (t) {
+        vmapi.getVm(QUERY, function (err, vm) {
+            t.ifError(err);
+            t.ok(vm);
+            ADMIN_MAC = vm.nics[0].mac;
+            t.end();
+        });
     });
-};
 
 
-var NEW_ALIAS = 'node-sdc-clients-vmapi-test-zone-newname';
-exports.test_update_zone = function (test) {
-    var UPDATE_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        payload: {
-            alias: NEW_ALIAS
-        },
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    var NEW_ALIAS = 'node-sdc-clients-vmapi-test-zone-newname';
+    tt.test(' update zone', function (t) {
+        var UPDATE_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            payload: {
+                alias: NEW_ALIAS
+            },
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.updateVm(UPDATE_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.updateVm(UPDATE_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_updated_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for updated job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_updated = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'alias', NEW_ALIAS, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for updated', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'alias', NEW_ALIAS, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_add_metadata = function (test) {
-    var MDATA_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        metadata: { foo: 'bar' },
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' add metadata', function (t) {
+        var MDATA_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            metadata: { foo: 'bar' },
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.addMetadata('tags', MDATA_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.addMetadata('tags', MDATA_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_add_metadata_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add metadata job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_add_metadata = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'tags', ADD_METADATA, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add metadata', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'tags', ADD_METADATA, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_metadata = function (test) {
-    vmapi.listMetadata('tags', QUERY, function (err, md) {
-        test.ifError(err);
-        test.ok(md.foo);
-        test.done();
+    tt.test(' list metadata', function (t) {
+        vmapi.listMetadata('tags', QUERY, function (err, md) {
+            t.ifError(err);
+            t.ok(md.foo);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_metadata = function (test) {
-    vmapi.getMetadata('tags', 'foo', QUERY, function (err, md) {
-        test.ifError(err);
-        test.ok(md);
-        test.done();
+    tt.test(' get metadata', function (t) {
+        vmapi.getMetadata('tags', 'foo', QUERY, function (err, md) {
+            t.ifError(err);
+            t.ok(md);
+            t.end();
+        });
     });
-};
 
 
-exports.test_set_metadata = function (test) {
-    var MDATA_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        metadata: { bar: 'baz' },
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' set metadata', function (t) {
+        var MDATA_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            metadata: { bar: 'baz' },
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.setMetadata('tags', MDATA_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.setMetadata('tags', MDATA_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_set_metadata_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for set metadata job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_set_metadata = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'tags', SET_METADATA, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for set metadata', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'tags', SET_METADATA, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_metadata = function (test) {
-    var MDATA_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' delete metadata', function (t) {
+        var MDATA_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.deleteAllMetadata('tags', MDATA_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.deleteAllMetadata('tags', MDATA_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_no_metadata_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for no metadata job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_no_metadata = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'tags', {}, function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for no metadata', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'tags', {}, function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-// VM Role Tags
+    // VM Role Tags
 
-exports.test_add_role_tags = function (test) {
-    var params = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        role_tags: [ ROLE_TAG_ONE, ROLE_TAG_TWO ],
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' add role tags', function (t) {
+        var params = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            role_tags: [ ROLE_TAG_ONE, ROLE_TAG_TWO ],
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.addRoleTags(params, function (err, role_tags) {
-        test.ifError(err);
-        test.ok(role_tags);
-        test.equal(role_tags.length, 2);
-        test.equal(role_tags[0], ROLE_TAG_ONE);
-        test.done();
+        vmapi.addRoleTags(params, function (err, role_tags) {
+            t.ifError(err);
+            t.ok(role_tags);
+            t.equal(role_tags.length, 2);
+            t.equal(role_tags[0], ROLE_TAG_ONE);
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_role_tags = function (test) {
-    var params = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER
-    };
+    tt.test(' list role tags', function (t) {
+        var params = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER
+        };
 
-    vmapi.listRoleTags(params, function (err, role_tags) {
-        test.ifError(err);
-        test.ok(role_tags);
-        test.done();
+        vmapi.listRoleTags(params, function (err, role_tags) {
+            t.ifError(err);
+            t.ok(role_tags);
+            t.end();
+        });
     });
-};
 
 
-exports.test_set_role_tags = function (test) {
-    var params = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        role_tags: [ ROLE_TAG_TWO ],
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' set role tags', function (t) {
+        var params = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            role_tags: [ ROLE_TAG_TWO ],
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.setRoleTags(params, function (err, role_tags) {
-        test.ifError(err);
-        test.ok(role_tags);
-        test.equal(role_tags.length, 1);
-        test.equal(role_tags[0], ROLE_TAG_TWO);
-        test.done();
+        vmapi.setRoleTags(params, function (err, role_tags) {
+            t.ifError(err);
+            t.ok(role_tags);
+            t.equal(role_tags.length, 1);
+            t.equal(role_tags[0], ROLE_TAG_TWO);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_role_tag = function (test) {
-    var params = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' delete role tag', function (t) {
+        var params = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.deleteRoleTag(params, ROLE_TAG_TWO, function (err, role_tags) {
-        test.ifError(err);
-        test.ok(role_tags);
-        test.done();
+        vmapi.deleteRoleTag(params, ROLE_TAG_TWO, function (err, role_tags) {
+            t.ifError(err);
+            t.ok(role_tags);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_role_tags = function (test) {
-    var params = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' delete role tags', function (t) {
+        var params = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.deleteAllRoleTags(params, function (err, role_tags) {
-        test.ifError(err);
-        test.ok(role_tags);
-        test.done();
+        vmapi.deleteAllRoleTags(params, function (err, role_tags) {
+            t.ifError(err);
+            t.ok(role_tags);
+            t.end();
+        });
     });
-};
 
 
-// END VM Role Tags
-
-
-exports.test_stop_zone = function (test) {
-    vmapi.stopVm(QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+    tt.test(' stop zone', function (t) {
+        vmapi.stopVm(QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_stopped_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for stopped job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_stopped = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'stopped', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for stopped', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'stopped', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_start_zone = function (test) {
-    vmapi.startVm(QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+    tt.test(' start zone', function (t) {
+        vmapi.startVm(QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_started_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for started job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_started = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for started', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_reboot_zone = function (test) {
-    vmapi.rebootVm(QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+    tt.test(' reboot zone', function (t) {
+        vmapi.rebootVm(QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_reboot_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for reboot job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_reboot = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for reboot', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_add_nics_using_networks = function (test) {
-    var NICS_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        networks: [ { uuid: EXTERNAL_NETWORK, primary: true } ],
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' add nics using networks', function (t) {
+        var NICS_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            networks: [ { uuid: EXTERNAL_NETWORK, primary: true } ],
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.addNics(NICS_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.addNics(NICS_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_add_nics_using_networks_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add nics using networks job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_add_nics_using_networks_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add nics using networks running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
-
-
-exports.test_add_nics_using_macs = function (test) {
-    var napiQuery = {
-        belongs_to_type: 'zone',
-        belongs_to_uuid: ZONE,
-        owner_uuid: CUSTOMER
-    };
 
-    napi.provisionNic(EXTERNAL_NETWORK, napiQuery, function (err, nic) {
-        test.ifError(err);
 
-        var vmQuery = {
-            uuid: ZONE,
-            owner_uuid: CUSTOMER,
-            macs: [ nic.mac ],
-            origin: 'sdc-clients-test',
-            owner_uuid: CUSTOMER,
-            context: CONTEXT
+    tt.test(' add nics using macs', function (t) {
+        var napiQuery = {
+            belongs_to_type: 'zone',
+            belongs_to_uuid: ZONE,
+            owner_uuid: CUSTOMER
         };
 
-        vmapi.addNics(vmQuery, function (err2, job) {
-            test.ifError(err2);
-            test.ok(job);
-            JOB_UUID = job.job_uuid;
-            test.done();
+        napi.provisionNic(EXTERNAL_NETWORK, napiQuery, function (err, nic) {
+            t.ifError(err);
+
+            var vmQuery = {
+                uuid: ZONE,
+                owner_uuid: CUSTOMER,
+                macs: [ nic.mac ],
+                origin: 'sdc-clients-test',
+                owner_uuid: CUSTOMER,
+                context: CONTEXT
+            };
+
+            vmapi.addNics(vmQuery, function (err2, job) {
+                t.ifError(err2);
+                t.ok(job);
+                JOB_UUID = job.job_uuid;
+                t.end();
+            });
         });
     });
-};
 
 
-exports.test_wait_for_add_nics_using_macs_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add nics using macs job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_add_nics_using_macs_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for add nics using macs running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_new_vm_nics = function (test) {
-    vmapi.getVm(QUERY, function (err, vm) {
-        test.ifError(err);
-        test.ok(vm);
-        EXTERNAL_MACS = vm.nics.slice(1, 3).map(function (n) { return n.mac; });
-        test.done();
+    tt.test(' get new vm nics', function (t) {
+        vmapi.getVm(QUERY, function (err, vm) {
+            t.ifError(err);
+            t.ok(vm);
+            EXTERNAL_MACS = vm.nics.slice(1, 3).map(
+                function (n) { return n.mac; });
+            t.end();
+        });
     });
-};
 
 
-exports.test_update_nics = function (test) {
-    var NICS_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        nics: [
-            {
-                mac: ADMIN_MAC,
-                primary: true
-            }, {
-                mac: EXTERNAL_MACS[0]
-            }
-        ],
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' update nics', function (t) {
+        var NICS_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            nics: [
+                {
+                    mac: ADMIN_MAC,
+                    primary: true
+                }, {
+                    mac: EXTERNAL_MACS[0]
+                }
+            ],
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.updateNics(NICS_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.updateNics(NICS_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_update_nics_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for update nics job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_update_nics_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for update nics running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_remove_nics = function (test) {
-    var NICS_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        macs: EXTERNAL_MACS,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' remove nics', function (t) {
+        var NICS_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            macs: EXTERNAL_MACS,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.removeNics(NICS_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.removeNics(NICS_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_remove_nics_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for remove nics job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_remove_nics_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for remove nics running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-// --- Snapshots before we destroy the zone!.
-exports.test_snapshot_zone = function (test) {
-    var SNAPSHOT_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        name: 'backup',
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    // --- Snapshots before we destroy the zone!.
+    tt.test(' snapshot zone', function (t) {
+        var SNAPSHOT_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            name: 'backup',
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.snapshotVm(SNAPSHOT_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.snapshotVm(SNAPSHOT_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_snapshot_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for snapshot job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_snapshotted = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for snapshotted', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_rollback_zone = function (test) {
-    var SNAPSHOT_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        name: 'backup',
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' rollback zone', function (t) {
+        var SNAPSHOT_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            name: 'backup',
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.rollbackVm(SNAPSHOT_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.rollbackVm(SNAPSHOT_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_rollback_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for rollback job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_rolled_back = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for rolled back', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_delete_snapshot = function (test) {
-    var SNAPSHOT_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        name: 'backup',
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' delete snapshot', function (t) {
+        var SNAPSHOT_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            name: 'backup',
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.deleteSnapshot(SNAPSHOT_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.deleteSnapshot(SNAPSHOT_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.wait_delete_snapshot_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' delete snapshot job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
-// -- EOSnapshots
+    // -- EOSnapshots
 
 
-exports.test_reprovision_zone = function (test) {
-    var REPROVISION_QUERY = {
-        uuid: ZONE,
-        owner_uuid: CUSTOMER,
-        image_uuid: IMAGE_UUID,
-        origin: 'sdc-clients-test',
-        owner_uuid: CUSTOMER,
-        context: CONTEXT
-    };
+    tt.test(' reprovision zone', function (t) {
+        var REPROVISION_QUERY = {
+            uuid: ZONE,
+            owner_uuid: CUSTOMER,
+            image_uuid: IMAGE_UUID,
+            origin: 'sdc-clients-test',
+            owner_uuid: CUSTOMER,
+            context: CONTEXT
+        };
 
-    vmapi.reprovisionVm(REPROVISION_QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+        vmapi.reprovisionVm(REPROVISION_QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_reprovision_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for reprovision job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_reprovision_running = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for reprovision running', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'running', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_destroy_zone = function (test) {
-    vmapi.deleteVm(QUERY, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        JOB_UUID = job.job_uuid;
-        test.done();
+    tt.test(' destroy zone', function (t) {
+        vmapi.deleteVm(QUERY, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            JOB_UUID = job.job_uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_destroyed_job = function (test) {
-    waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
-      function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for destroyed job', function (t) {
+        waitForValue(vmapi.getJob, JOB_UUID, 'execution', 'succeeded',
+          function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_wait_for_destroyed = function (test) {
-    waitForValue(vmapi.getVm, QUERY, 'state', 'destroyed', function (err) {
-        test.ifError(err);
-        test.done();
+    tt.test(' wait for destroyed', function (t) {
+        waitForValue(vmapi.getVm, QUERY, 'state', 'destroyed', function (err) {
+            t.ifError(err);
+            t.end();
+        });
     });
-};
 
 
-exports.test_list_jobs = function (test) {
-    var query = {
-        vm_uuid: ZONE,
-        task: 'provision'
-    };
+    tt.test(' list jobs', function (t) {
+        var query = {
+            vm_uuid: ZONE,
+            task: 'provision'
+        };
 
-    vmapi.listJobs(query, function (err, jobs) {
-        test.ifError(err);
-        test.ok(jobs);
-        JOB_UUID = jobs[0].uuid;
-        test.done();
+        vmapi.listJobs(query, function (err, jobs) {
+            t.ifError(err);
+            t.ok(jobs);
+            JOB_UUID = jobs[0].uuid;
+            t.end();
+        });
     });
-};
 
 
-exports.test_get_job = function (test) {
-    vmapi.getJob(JOB_UUID, function (err, job) {
-        test.ifError(err);
-        test.ok(job);
-        test.done();
+    tt.test(' get job', function (t) {
+        vmapi.getJob(JOB_UUID, function (err, job) {
+            t.ifError(err);
+            t.ok(job);
+            t.end();
+        });
     });
-};
 
 
-exports.test_check_expected_jobs = function (test) {
-    vmapi.listJobs({ vm_uuid: ZONE }, function (err, jobs) {
-        test.ifError(err);
+    tt.test(' check expected jobs', function (t) {
+        vmapi.listJobs({ vm_uuid: ZONE }, function (err, jobs) {
+            t.ifError(err);
 
-        var expectedJobs = [
-            'destroy', 'reprovision', 'delete-snapshot', 'rollback', 'snapshot',
-            'remove-nics', 'update-nics', 'add-nics', 'add-nics', 'reboot',
-            'start', 'stop', 'update', 'update', 'update', 'update', 'provision'
-        ];
+            var expectedJobs = [
+                'destroy', 'reprovision', 'delete-snapshot', 'rollback',
+                'snapshot', 'remove-nics', 'update-nics', 'add-nics',
+                'add-nics', 'reboot', 'start', 'stop', 'update', 'update',
+                'update', 'update', 'provision'
+            ];
 
-        for (var i = 0; i !== expectedJobs.length; i++) {
-            var expected = expectedJobs[i];
-            var job = jobs[i];
+            for (var i = 0; i !== expectedJobs.length; i++) {
+                var expected = expectedJobs[i];
+                var job = jobs[i];
 
-            test.ok(job.name.indexOf(expected) !== -1);
-            test.deepEqual(job.params.context, CONTEXT);
-        }
+                t.ok(job.name.indexOf(expected) !== -1);
+                t.deepEqual(job.params.context, CONTEXT);
+            }
 
-        test.done();
+            t.end();
+        });
     });
-};
 
 
-exports.tearDown = function (callback) {
-    vmapi.close();
-    callback();
-};
+    tt.test(' teardown', function (t) {
+        vmapi.close();
+        cnapi.close();
+        napi.close();
+        t.end();
+    });
+});
\ No newline at end of file
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index 2e6a838..ee0a76b 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -41,7 +41,7 @@
 +missing_semicolon_for_lambda # missing semicolon for lambda assignment
 +multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
 +nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
+-no_return_value              # function {name} does not always return a value
 +octal_number                 # leading zeros make an octal number
 +parseint_missing_radix       # parseInt missing radix parameter
 +partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
deleted file mode 100644
index b135000..0000000
--- a/tools/jsl.web.conf
+++ /dev/null
@@ -1,137 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
-+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
-+unreferenced_argument        # argument declared but never referenced: {name}
-+unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
-+useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
-+always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define	JSON
-+define Math
-+define $
-+define XMLHttpRequest
-+define alert
-+define clearInterval
-+define clearTimeout
-+define confirm
-+define document
-+define setInterval
-+define setTimeout
-+define window
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
-- 
2.21.0

