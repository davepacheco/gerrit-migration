commit 4be49d7644239ab528ef2bfc489f7aa9abe5d0a0
Author: Trent Mick <trentm@gmail.com>
Date:   2019-03-08T14:37:48-08:00 (7 months ago)
    
    TRITON-1293 CNAPI server.transitional_status being undefined confuses some clients

diff --git a/CHANGES.md b/CHANGES.md
index 4d68768..d8b79e5 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -5,11 +5,18 @@
 -->
 
 <!--
-    Copyright (c) 2019, Joyent, Inc.
+    Copyright 2019 Joyent, Inc.
 -->
 
 # sdcadm Changelog
 
+## 1.24.8
+
+- TRITON-1293 Correct the interpretation of whether a server is running from
+  a CNAPI server object (CNAPI `<server>.transitional_status` is an
+  implementation detail and not relevant for running status. This fixes a
+  potential failure in `sdcadm post-setup docker`.
+
 ## 1.24.7
 
 - TRITON-1276 sdcadm experimental update-gz-tools --latest --just-download dumps core
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index 45315b0..c0f5914 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -473,7 +473,6 @@ UpdateAgents.prototype.exec = function exec(callback) {
                         hostname: s.hostname,
                         setup: s.setup,
                         status: s.status,
-                        transitional_status: s.transitional_status,
                         uuid: s.uuid
                     };
                 });
diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 414348b..d5d90b6 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 /*
  * `sdcadm post-setup cmon`
@@ -405,22 +405,6 @@ function do_cmon(subcmd, opts, args, cb) {
                     });
                 }
 
-                var notRunning = [];
-                ctx.serversToUpdate.forEach(function (srv) {
-                    if (srv.status !== 'running' ||
-                        (srv.status === 'running' && srv.transitional_status)) {
-                        notRunning.push(srv.uuid);
-                    }
-                });
-                if (notRunning.length) {
-                    next(new UpdateError(format(
-                        'The following servers are not running:\n%s\n' +
-                        'Please make sure of these servers are running ' +
-                        'or remove them from the list of servers to ' +
-                        'update.', notRunning.join(','))));
-                    return;
-                }
-
                 // Silently skip servers where we've already setup cmon-agent:
                 ctx.serversToUpdate = ctx.serversToUpdate.filter(function (s) {
                     return !s.agents.some(function (a) {
@@ -428,7 +412,9 @@ function do_cmon(subcmd, opts, args, cb) {
                     });
                 });
 
-                next();
+                steps.servers.ensureServersRunning({
+                    servers: ctx.serversToUpdate
+                }, next);
             });
         },
 
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 5c7ffa5..80aecb1 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -489,24 +489,9 @@ function do_docker(subcmd, opts, args, cb) {
                     });
                 }
 
-                var notRunning = [];
-                ctx.serversToUpdate.forEach(function (srv) {
-                    if (srv.status !== 'running' ||
-                        (srv.status === 'running' &&
-                         srv.transitional_status !== '')) {
-                        notRunning.push(srv.uuid);
-                    }
-                });
-                if (notRunning.length) {
-                    next(new errors.UpdateError(format(
-                        'The following servers are not running:\n%s\n' +
-                        'Please make sure of these servers are running ' +
-                        'or remove them from the list of servers to ' +
-                        'update.', notRunning.join(','))));
-                    return;
-                }
-
-                next();
+                steps.servers.ensureServersRunning({
+                    servers: ctx.serversToUpdate
+                }, next);
             });
         },
 
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index c7c849f..68732b8 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -249,25 +249,12 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     }).join(',')
                 }, function (sErr, servers) {
                     if (sErr) {
-                        return next(new errors.SDCClientError(sErr, 'cnapi'));
+                        next(new errors.SDCClientError(sErr, 'cnapi'));
+                        return;
                     }
-                    var unavailable = [];
-                    servers.forEach(function (srv) {
-                        if (srv.status !== 'running' ||
-                            (srv.status === 'running' &&
-                             srv.hasOwnProperty('transitional_status') &&
-                             srv.transitional_status !== '')) {
-                            unavailable.push(srv.uuid);
-                        }
-                    });
-                    if (unavailable.length) {
-                        return next(new UpdateError(format(
-                            'The following servers are not available:\n%s\n' +
-                            'Please make sure of these servers availability ' +
-                            'or remove them from the list of servers to ' +
-                            'update before continue.', unavailable.join(','))));
-                    }
-                    return next();
+                    steps.servers.ensureServersRunning({
+                        servers: servers
+                    }, next);
                 });
             },
 
diff --git a/lib/steps/servers.js b/lib/steps/servers.js
index 01c745d..6836f81 100644
--- a/lib/steps/servers.js
+++ b/lib/steps/servers.js
@@ -161,7 +161,7 @@ function ensureServersRunning(args, cb) {
 
     var notRunning = args.servers
         .filter(function (s) {
-            return (s.status !== 'running' || s.transitional_status !== '');
+            return (s.status !== 'running');
         })
         .map(function (s) {
             return util.format('%s (%s)', s.uuid, s.hostname);
diff --git a/package.json b/package.json
index 7f450fe..816b7eb 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.24.7",
+  "version": "1.24.8",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/unit/steps/servers.test.js b/test/unit/steps/servers.test.js
new file mode 100644
index 0000000..9ac4eae
--- /dev/null
+++ b/test/unit/steps/servers.test.js
@@ -0,0 +1,77 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+/*
+ * Test parts of lib/steps/servers.js.
+ */
+
+'use strict';
+
+const test = require('tap').test;
+
+const stepsServers = require('../../../lib/steps/servers');
+
+
+test('steps.servers.ensureServersRunning', function (suite) {
+    const ensureServersRunning = stepsServers.ensureServersRunning;
+
+    suite.test('no servers', function (t) {
+        ensureServersRunning({servers: []}, function (err) {
+            t.ifError(err);
+            t.end();
+        });
+    });
+
+    suite.test('status=running', function (t) {
+        ensureServersRunning({
+            servers: [
+                {
+                    uuid: 'fffe64de-41e1-11e9-96ab-c31da21ea778',
+                    hostname: 'TESTHOST0',
+                    status: 'running'
+                },
+                {
+                    uuid: '0315187a-41e2-11e9-9c21-37ad3dd66f42',
+                    hostname: 'TESTHOST1',
+                    status: 'running'
+                }
+            ]
+        }, function (err) {
+            t.ifError(err);
+            t.end();
+        });
+    });
+
+    suite.test('status=unknown should error', function (t) {
+        ensureServersRunning({
+            servers: [
+                {
+                    uuid: 'fffe64de-41e1-11e9-96ab-c31da21ea778',
+                    hostname: 'TESTHOST0',
+                    status: 'unknown'
+                },
+                {
+                    uuid: '0315187a-41e2-11e9-9c21-37ad3dd66f42',
+                    hostname: 'TESTHOST1',
+                    status: 'running'
+                }
+            ]
+        }, function (err) {
+            t.ok(err, 'expected error that TESTHOST0 is not running');
+            t.ok(err.message.includes('not running'),
+                'error message includes "not running": ' + err.message);
+            t.ok(err.message.includes('TESTHOST0'),
+                'error message includes "TESTHOST0": ' + err.message);
+            t.end();
+        });
+    });
+
+    suite.end();
+});
