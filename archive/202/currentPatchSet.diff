From 333fe34442fe190403667c9c5fa3433d62152a11 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Wed, 3 Aug 2016 21:49:00 +0000
Subject: [PATCH] OS-5571 incorrect task count in cgroup 0 Reviewed by: Patrick
 Mooney <patrick.mooney@joyent.com>

---
 .../uts/common/brand/lx/cgroups/cgrps_vfsops.c   | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/usr/src/uts/common/brand/lx/cgroups/cgrps_vfsops.c b/usr/src/uts/common/brand/lx/cgroups/cgrps_vfsops.c
index 22966295e0..aef1b7f5b5 100644
--- a/usr/src/uts/common/brand/lx/cgroups/cgrps_vfsops.c
+++ b/usr/src/uts/common/brand/lx/cgroups/cgrps_vfsops.c
@@ -372,6 +372,7 @@ cgrp_mount(vfs_t *vfsp, vnode_t *mvp, struct mounta *uap, cred_t *cr)
 	struct vattr rattr;
 	cgrp_ssid_t ssid = CG_SSID_GENERIC;
 	lx_zone_data_t *lxzdata;
+	proc_t *p = curproc;
 
 	if ((error = secpolicy_fs_mount(cr, mvp, vfsp)) != 0)
 		return (error);
@@ -487,6 +488,21 @@ cgrp_mount(vfs_t *vfsp, vnode_t *mvp, struct mounta *uap, cred_t *cr)
 	cp->cgn_nodeid = cgrp_inode(CG_CGROUP_DIR, cgm->cg_gen);
 	cgrp_dirinit(cp, cp, cr);
 
+	/*
+	 * This initial cgrp_node will have an ID of 0. All existing processes
+	 * inside the zone will have been started with, or inherited, a
+	 * br_cgroupid of 0. We need to update the cgn_task_cnt for this new
+	 * cgroup 0 to reflect the number of tasks already in the group.
+	 * Because we must hold cg_contents in cgrp_lwp_fork_helper and
+	 * cgrp_lwp_exit_helper, no process can be creating or exiting another
+	 * thread (although that is unlikely anyway since the cgroup filesystem
+	 * is normally mounted at the start of zone bootup, before anything
+	 * else is started).
+	 */
+	mutex_enter(&p->p_zone->zone_nlwps_lock);
+	cp->cgn_task_cnt = p->p_zone->zone_nlwps;
+	mutex_exit(&p->p_zone->zone_nlwps_lock);
+
 	mutex_exit(&cgm->cg_contents);
 
 	pn_free(&dpn);
-- 
2.21.0

