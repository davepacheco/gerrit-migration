commit 3d668a961ea2fff59afc41d78a555e02cf0e0c24 (refs/changes/71/4971/2)
Author: Trent Mick <trentm@gmail.com>
Date:   2018-10-29T14:30:58-07:00 (11 months ago)
    
    TRITON-886 Add support for `channel` option to IMGAPI client `getImage` method.
    Reviewed by: Isaac Davis <isaac.davis@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index ba834df..be738b9 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,7 +10,12 @@
 
 ## 12.0.0
 
-- TRITON-742 Remove dsapi client
+- TRITON-886 Add support for `channel` option to IMGAPI client methods.
+  Typically the "channel" is set as an argument to the IMGAPI client
+  constructor. However, it can be useful to use an existing IMGAPI client
+  to make a call for a separate channel.
+
+- [Backward incompatible] TRITON-742 Remove dsapi client
 
 ## 11.3.1
 
diff --git a/lib/imgapi.js b/lib/imgapi.js
index db15d13..a275cfa 100644
--- a/lib/imgapi.js
+++ b/lib/imgapi.js
@@ -9,7 +9,7 @@
  */
 
 /*
- * Client library for the SDC Image API (IMGAPI).
+ * Client library for the TritonDC Image API (IMGAPI).
  *
  * Usage without auth (e.g. when talking to in-SDC IMGAPI on admin network):
  *
@@ -235,7 +235,7 @@ function simpleMerge(a, b) {
  *        are given, the latter wins.
  *      - `channel` {String} Optional. The channel to use, for IMGAPI servers
  *        that use channels.
- *        See <https://mo.joyent.com/docs/imgapi/master/#ListChannels>.
+ *        See <https://updates.joyent.com/docs/#ListChannels>.
  *      - `user` {String} Optional. Used for basic or http-signature auth.
  *      - `password` {String} Optional. If provided, this implies that basic
  *        auth should be used for client requests.
@@ -530,6 +530,9 @@ IMGAPI.prototype.adminReloadAuthKeys = function adminReloadAuthKeys(callback) {
  *      - headers {Object} Optional extra request headers.
  *      - inclAdminFields {Boolean} Whether to include admin fields in the
  *        returned images.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param callback {Function} `function (err, images, res)`
  *
  * NOTE about filters.limit and filters.marker:
@@ -554,6 +557,7 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
     assert.optionalBool(options.inclAdminFields, 'options.inclAdminFields');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
     var inclAdminFields = (options.inclAdminFields !== undefined
             ? options.inclAdminFields.toString()
@@ -578,7 +582,7 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
     function listImagesWithLimit(headers, cb) {
         // limit and marker come straight from filters
         var path = self._path('/images', {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             inclAdminFields: inclAdminFields
         }, filters);
         var reqOpts = {
@@ -624,7 +628,7 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
             }
 
             var path = self._path('/images', {
-                channel: self.channel,
+                channel: options.channel || self.channel,
                 inclAdminFields: inclAdminFields
             }, filters);
             var reqOpts = {
@@ -693,6 +697,9 @@ IMGAPI.prototype.listImages = function listImages(filters, options, callback) {
  *      - headers {Object} Optional extra request headers.
  *      - inclAdminFields {Boolean} Whether to include admin fields in the
  *        returned image.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.getImage =
@@ -715,6 +722,7 @@ function getImage(uuid, account, options, callback) {
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
     assert.optionalBool(options.inclAdminFields, 'options.inclAdminFields');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
     var inclAdminFields = (options.inclAdminFields !== undefined
             ? options.inclAdminFields.toString()
@@ -722,7 +730,7 @@ function getImage(uuid, account, options, callback) {
 
     var path = self._path('/images/' + uuid, {
         account: account,
-        channel: self.channel,
+        channel: options.channel || self.channel,
         inclAdminFields: inclAdminFields
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -757,6 +765,9 @@ function getImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.createImage =
@@ -778,9 +789,13 @@ function createImage(data, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
-    var path = self._path('/images', {account: account, channel: self.channel});
+    var path = self._path('/images', {
+        account: account,
+        channel: options.channel || self.channel
+    });
     self._getAuthHeaders(function (hErr, headers) {
         if (hErr) {
             callback(hErr);
@@ -817,6 +832,9 @@ function createImage(data, account, options, callback) {
  *      - incremental {Boolean} Optional. Default false. Create an incremental
  *        image.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -834,12 +852,13 @@ function createImageFromVm(data, options, account, callback) {
     assert.string(options.vm_uuid, 'options.vm_uuid');
     assert.optionalBool(options.incremental, 'options.incremental');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalString(account, 'account');
     assert.func(callback, 'callback');
 
     var path = self._path('/images');
     path += self._qs({
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'create-from-vm',
         vm_uuid: options.vm_uuid,
         incremental: options.incremental,
@@ -940,6 +959,9 @@ function createImageFromVmAndWait(data, options, account, callback) {
  *          Append '?channel=<channel>' to select a particular source
  *          channel, if relevant.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.adminImportImage = function adminImportImage(
@@ -954,12 +976,13 @@ IMGAPI.prototype.adminImportImage = function adminImportImage(
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalString(options.source, 'options.source');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
     assert.string(data.uuid, 'data.uuid');
 
     var path = self._path('/images/' + data.uuid);
     path += self._qs({
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import',
         skip_owner_check: options.skipOwnerCheck,
         source: options.source
@@ -1010,6 +1033,9 @@ IMGAPI.prototype.adminImportImage = function adminImportImage(
  * @param {Object} options: For backward compat, this argument is optional.
  *      - skipOwnerCheck {Boolean} Optional. Default false.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.adminImportRemoteImageAndWait =
@@ -1024,11 +1050,12 @@ function adminImportRemoteImageAndWait(uuid, source, options, callback) {
     assert.object(options, 'options');
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalNumber(options.retries, 'options.retries');
     assert.func(callback, 'callback');
 
     var path = self._path('/images/' + uuid, {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import-remote',
         source: source,
         skip_owner_check: options.skipOwnerCheck
@@ -1126,6 +1153,9 @@ function adminImportRemoteImageAndWait(uuid, source, options, callback) {
  *      - public {Boolean} Optional. Value for IMGAPI `manifest.public`.
  *        Default true.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.adminImportDockerImage = function adminImportDockerImage(
@@ -1147,11 +1177,12 @@ IMGAPI.prototype.adminImportDockerImage = function adminImportDockerImage(
     assert.optionalString(options.regConfig, 'options.regConfig');
     assert.optionalBool(options.public, 'options.public');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path('/images');
     path += self._qs({
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import-docker-image',
         tag: options.tag,
         digest: options.digest,
@@ -1213,6 +1244,9 @@ IMGAPI.prototype.adminImportDockerImage = function adminImportDockerImage(
  *      - regAuth {String} Optional. Registry auth info formatted as in
  *        the 'x-registry-auth' header in `docker` client requests.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.adminPushDockerImage =
@@ -1227,10 +1261,11 @@ function adminPushDockerImage(options, callback) {
     assert.object(options.image, 'options.image');
     assert.optionalString(options.regAuth, 'options.regAuth');
     assert.string(options.repoAndTag, 'options.repoAndTag');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/push', options.image.image_uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         image: options.image,
         repoAndTag: options.repoAndTag,
         public: options.public
@@ -1363,6 +1398,9 @@ function pollJob(client, job_uuid, cb) {
  * @param {Object} options: For backward compat, this argument is optional.
  *      - skipOwnerCheck {Boolean} Optional. Default false.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, job, res)`
  */
 IMGAPI.prototype.adminImportRemoteImage =
@@ -1377,10 +1415,11 @@ function adminImportRemoteImage(uuid, source, options, callback) {
     assert.object(options, 'options');
     assert.optionalBool(options.skipOwnerCheck, 'options.skipOwnerCheck');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path('/images/' + uuid, {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'import-remote',
         source: source,
         skip_owner_check: options.skipOwnerCheck
@@ -1429,6 +1468,9 @@ function adminImportRemoteImage(uuid, source, options, callback) {
  *        Can be "local" or "manta". Will try to default to "manta" when
  *        available, otherwise "local".
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -1440,6 +1482,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
     assert.object(options, 'options');
     assert.string(options.uuid, 'options.uuid');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     if (callback === undefined) {
         callback = account;
         account = undefined;
@@ -1451,7 +1494,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
     if (options.source) {
         assert.string(options.source, 'options.source');
         var path = self._path(format('/images/%s/file', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             source: options.source,
             storage: options.storage
         });
@@ -1514,7 +1557,7 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
         }
 
         var reqPath = self._path(format('/images/%s/file', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             compression: options.compression,
             account: account,
             sha1: options.sha1,
@@ -1591,6 +1634,9 @@ IMGAPI.prototype.addImageFile = function addImageFile(options, account,
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.getImageFile =
@@ -1609,10 +1655,11 @@ function getImageFile(uuid, filePath, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/file', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1675,6 +1722,9 @@ function getImageFile(uuid, filePath, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, stream)`
  *      The `stream` is also an HTTP response object, i.e. headers are on
  *      `stream.headers`.
@@ -1694,10 +1744,11 @@ IMGAPI.prototype.getImageFileStream = function getImageFileStream(
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/file', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1746,6 +1797,9 @@ IMGAPI.prototype.getImageFileStream = function getImageFileStream(
  *        this is required, otherwise it will be retrieved with `fs.stat`.
  *      - {String} sha1 : SHA-1 hash of the icon file being uploaded.
  *      - headers {Object} Optional Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {UUID} account : Optional. The UUID of the account on behalf of whom
  *      this request is being made. If given this will only return images
  *      accessible to that account.
@@ -1762,6 +1816,7 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
     assert.optionalString(options.sha1, 'options.sha1');
     assert.optionalNumber(options.size, 'options.size');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     if (callback === undefined) {
         callback = account;
         account = undefined;
@@ -1799,7 +1854,7 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
         }
 
         var path = self._path(format('/images/%s/icon', uuid), {
-            channel: self.channel,
+            channel: options.channel || self.channel,
             account: account,
             sha1: options.sha1
         });
@@ -1871,6 +1926,9 @@ IMGAPI.prototype.addImageIcon = function addImageIcon(options, account,
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, res)`
  */
 IMGAPI.prototype.getImageIcon =
@@ -1889,10 +1947,11 @@ function getImageIcon(uuid, filePath, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -1956,6 +2015,9 @@ function getImageIcon(uuid, filePath, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, stream)`
  *      The `stream` is also an HTTP response object, i.e. headers are on
  *      `stream.headers`.
@@ -1975,10 +2037,11 @@ IMGAPI.prototype.getImageIconStream = function getImageIconStream(
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -2022,6 +2085,9 @@ IMGAPI.prototype.getImageIconStream = function getImageIconStream(
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.deleteImageIcon =
@@ -2039,10 +2105,11 @@ function deleteImageIcon(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/icon', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account
     });
     self._getAuthHeaders(function (hErr, headers) {
@@ -2084,6 +2151,9 @@ function deleteImageIcon(uuid, account, options, callback) {
  *          then the files are saved to it. If the basename of "PATH" is not a
  *          dir, then "PATH.imgmanifest" and "PATH.zfs[.EXT]" are created.
  *      - headers {Object} Optional. Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.exportImage =
@@ -2098,11 +2168,12 @@ function exportImage(uuid, account, options, callback) {
     assert.object(options, 'options');
     assert.string(options.manta_path, 'manta_path');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalString(account, 'account');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'export',
         manta_path: options.manta_path,
         account: account
@@ -2139,6 +2210,9 @@ function exportImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.activateImage =
@@ -2156,10 +2230,11 @@ function activateImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'activate',
         account: account
     });
@@ -2195,6 +2270,9 @@ function activateImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.disableImage =
@@ -2212,10 +2290,11 @@ function disableImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'disable',
         account: account
     });
@@ -2251,6 +2330,9 @@ function disableImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.enableImage =
@@ -2268,10 +2350,11 @@ function enableImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'enable',
         account: account
     });
@@ -2308,6 +2391,9 @@ function enableImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.addImageAcl =
@@ -2326,10 +2412,11 @@ function addImageAcl(uuid, acl, account, options, callback) {
     assert.arrayOfString(acl, 'acl');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/acl', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'add',
         account: account
     });
@@ -2366,6 +2453,9 @@ function addImageAcl(uuid, acl, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.removeImageAcl =
@@ -2384,10 +2474,11 @@ function removeImageAcl(uuid, acl, account, options, callback) {
     assert.arrayOfString(acl, 'acl');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/acl', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'remove',
         account: account
     });
@@ -2424,6 +2515,9 @@ function removeImageAcl(uuid, acl, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.updateImage =
@@ -2442,10 +2536,11 @@ function updateImage(uuid, data, account, options, callback) {
     assert.object(data, 'data');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         action: 'update',
         account: account
     });
@@ -2480,6 +2575,9 @@ function updateImage(uuid, data, account, options, callback) {
  *      this request is being made. This UUID must be on the image ACL.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, image, res)`
  */
 IMGAPI.prototype.cloneImage =
@@ -2493,11 +2591,12 @@ function cloneImage(uuid, account, options, callback) {
     }
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s/clone', uuid), {
         account: account,
-        channel: self.channel
+        channel: options.channel || self.channel
     });
     self._getAuthHeaders(function (hErr, headers) {
         if (hErr) {
@@ -2535,6 +2634,9 @@ function cloneImage(uuid, account, options, callback) {
  *      accessible to that account.
  * @param options {Object} Optional request options.
  *      - headers {Object} Optional extra request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  *      - forceAllChannels {Boolean} Optional. Set to true for force actual
  *        deletion ofa
  * @param {Function} callback : `function (err, res)`
@@ -2558,11 +2660,12 @@ function deleteImage(uuid, account, options, callback) {
     assert.optionalString(account, 'account');
     assert.object(options, 'options');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.optionalBool(options.forceAllChannels, 'options.forceAllChannels');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
-        channel: self.channel,
+        channel: options.channel || self.channel,
         account: account,
         force_all_channels: options.forceAllChannels
     });
@@ -2601,6 +2704,9 @@ function deleteImage(uuid, account, options, callback) {
  * @param {Object} options: Required.
  *      - datacenter {String} Required. The datacenter to import the image from.
  *      - headers {Object} Optional. Additional request headers.
+ *      - channel {String} Optional override for the channel set on the
+ *        constructor. This is only relevant for IMGAPI servers that
+ *        support channels.
  * @param {Function} callback : `function (err, job, res)`
  */
 IMGAPI.prototype.importImageFromDatacenter =
@@ -2611,12 +2717,13 @@ function importImageFromDatacenter(uuid, account, options, callback) {
     assert.object(options, 'options');
     assert.string(options.datacenter, 'options.datacenter');
     assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalString(options.channel, 'options.channel');
     assert.func(callback, 'callback');
 
     var path = self._path(format('/images/%s', uuid), {
         account: account,
         action: 'import-from-datacenter',
-        channel: self.channel,
+        channel: options.channel || self.channel,
         datacenter: options.datacenter
     });
     self._getAuthHeaders(function (hErr, headers) {
