commit 6b96cbfcbfd7f436501eed7f192fda4b3f108072 (refs/changes/08/5308/5)
Author: Rui Loura <rui@joyent.com>
Date:   2019-01-07T16:30:46+00:00 (9 months ago)
    
    TRITON-868 factor out admin IP functions from sdc-server
    TRITON-995 sdc-headnode scripts/add_external_nic.sh should use network name instead of uuid
    Reviewed by: Michael Zeller <mike.zeller@joyent.com>
    Approved by: Rui <rui@joyent.com>

diff --git a/package.json b/package.json
index 60ba04b9..61e29948 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "usb-headnode",
   "description": "Build SDC headnode images",
-  "version": "3.0.0",
+  "version": "3.0.1",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -14,6 +14,7 @@
     "monowrap": "^1.0.4",
     "progbar": "^1.1.0",
     "readtoend": "0.0.1",
+    "triton-netconfig": "1.0.0",
     "vasync": "^1.6.3",
     "verror": "^1.6.0"
   },
diff --git a/scripts/add_external_nic.sh b/scripts/add_external_nic.sh
index f3465c04..3494b60b 100755
--- a/scripts/add_external_nic.sh
+++ b/scripts/add_external_nic.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
@@ -28,15 +28,13 @@ function fatal {
 
 function add_external_nic {
     local zone_uuid=$1
-    local external_net_uuid
-    external_net_uuid=$(sdc-napi /networks?name=external | json -Ha uuid)
     local tmpfile=/tmp/update_nics.$$.json
 
     echo "Adding external NIC to ${zone_uuid}"
     sdc-vmapi /vms/${zone_uuid}?action=add_nics -X POST --data-binary @- <<EOF
 {
   "networks": [
-    { "uuid": "${external_net_uuid}", "primary": true }
+    { "name": "external", "primary": true }
   ]
 }
 EOF
diff --git a/tools/bin/sdc-server b/tools/bin/sdc-server
index 9bc98e60..9f189ddc 100755
--- a/tools/bin/sdc-server
+++ b/tools/bin/sdc-server
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 //
@@ -23,6 +23,7 @@ var async = require('/usr/node/node_modules/async');
 var dashdash = require('dashdash');
 var exec = require('child_process').exec;
 var readline = require('readline');
+var netconfig = require('triton-netconfig');
 var util = require('util');
 var vasync = require('vasync');
 
@@ -245,11 +246,9 @@ function outputServerData(servers, callback)
         'HOSTNAME', 'UUID', 'VERSION', 'SETUP', 'STATUS', 'RAM', 'ADMIN_IP'));
 
     servers.forEach(function (s) {
-        var admin_ip = '-';
-        var admin_tag = 'admin';
+        var admin_ip;
         var sdc_version;
         var setup_state = s.setup;
-        var n;
 
         // Eventually this will be a first-class property of a CN
         sdc_version = s.sysinfo['SDC Version'];
@@ -257,31 +256,9 @@ function outputServerData(servers, callback)
             sdc_version = '6.x';
         }
 
-        if (s['sysinfo']['Admin NIC Tag']) {
-            admin_tag = s['sysinfo']['Admin NIC Tag'];
-        }
-
-        for (n in s['sysinfo']['Network Interfaces']) {
-            var i;
-            var found = false;
-            var nic = s['sysinfo']['Network Interfaces'][n];
-            var nicnames = nic['NIC Names'];
-
-            if (!nicnames) {
-                continue;
-            }
-
-            for (i = 0; i < nicnames.length; i++) {
-                if (nicnames[i] === admin_tag) {
-                    found = true;
-                    break;
-                }
-            }
-
-            if (found === true) {
-                admin_ip = nic['ip4addr'];
-                break;
-            }
+        admin_ip = netconfig.adminIpFromSysinfo(s['sysinfo']);
+        if (!admin_ip) {
+            admin_ip = '-';
         }
 
         function outputLine() {
@@ -747,7 +724,7 @@ function lookupServers(args, callback)
 }
 
 function outputAdminIP(server_uuid, callback) {
-    var admin_tag = 'admin';
+    var admin_ip;
 
     _getServer(server_uuid, function (err, s) {
         if (err) {
@@ -755,25 +732,14 @@ function outputAdminIP(server_uuid, callback) {
             return;
         }
 
-        if (s['sysinfo']['Admin NIC Tag']) {
-            admin_tag = s['sysinfo']['Admin NIC Tag'];
+        admin_ip = netconfig.adminIpFromSysinfo(s['sysinfo']);
+        if (!admin_ip) {
+            callback(new Error('No admin IP found'));
+            return;
         }
 
-        getNics(server_uuid, { nic_tags_provided: [admin_tag] },
-            function (err, nics) {
-
-            if (!nics || nics.length === 0) {
-                callback(new Error('No admin nic found'));
-                return;
-            }
-
-            if (!nics[0].ip) {
-                callback(new Error('No admin IP found'));
-                return;
-            }
-
-            console.log(nics[0].ip);
-        });
+        console.log(admin_ip);
+        callback();
     });
 }
 
