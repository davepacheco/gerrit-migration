commit 89e055aef1f3e574da549a98224d44d8b505223e (refs/changes/81/5381/1)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-01-17T14:28:02-07:00 (9 months ago)
    
    MANTA-4064 Muppet failing with "SyntaxError: Unexpected token o"

diff --git a/lib/watch.js b/lib/watch.js
index b1ead1d..4e65e9c 100644
--- a/lib/watch.js
+++ b/lib/watch.js
@@ -139,25 +139,51 @@ Watch.prototype.start = function start(callback) {
                 const p = self.path + '/' + child;
                 // Get info about host out of ZK
                 zk.get(p, function (err, _obj) {
-                    // Object returned as binary data from get()
-                    const obj = JSON.parse(_obj.toString());
                     if (err) {
                         _cb(err);
-                    } else if (obj.type !== 'host') {
-                        /*
-                         * webapi and loadbalancer instances both register
-                         * themselves into the same domain, but as different
-                         * types ("host" and "load_balancer", respectively).
-                         * Here we effectively filter out anything but webapi
-                         * instances.
-                         */
-                        _cb(null);
                     } else {
-                        log.debug({
-                            path: self.path,
-                            host: obj
-                        }, 'onChildrenChanged::getChild: host fetched');
-                        _cb(null, obj.host.address);
+                        var obj;
+                        if (_obj instanceof Buffer) {
+                            // Object returned as binary data from get()
+                            obj = JSON.parse(_obj.toString());
+                        } else if (_obj instanceof Object) {
+                            // We have seen Object data returned from zk.get via
+                            // this callback in MANTA-4064. This code is to help
+                            // gain understanding into what that data is.
+                            log.info({
+                                path: self.path,
+                                obj: JSON.stringify(_obj)},
+                                'onChildrenChanged::getChild: received an ' +
+                                'Object from zk.get when a Buffer was ' +
+                                'expected');
+                            obj = _obj;
+                        } else {
+                            // If we reach this block it indicates an unexpected
+                            // response from zookeeper. Just log the occurrence
+                            // and move on.
+                            log.warn({
+                                path: self.path,
+                                obj: _obj
+                            }, 'onChildrenChanged::getChild: received ' +
+                                'unexpected response from zk.get');
+                        }
+
+                        if (obj && obj.type === 'host') {
+                            log.debug({
+                                path: self.path,
+                                host: obj
+                            }, 'onChildrenChanged::getChild: host fetched');
+                            _cb(null, obj.host.address);
+                        } else {
+                            /*
+                             * webapi and loadbalancer instances both register
+                             * themselves into the same domain, but as different
+                             * types ("host" and "load_balancer", respectively).
+                             * Here we effectively filter out anything but
+                             * webapi instances.
+                             */
+                            _cb(null);
+                        }
                     }
                 });
             }
