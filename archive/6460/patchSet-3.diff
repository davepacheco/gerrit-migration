commit c8c85d40c9acd965851fdc30606d3b995844aa61
Author: Michael Zeller <mike@mikezeller.net>
Date:   2019-06-18T17:16:04+00:00 (4 months ago)
    
    TRITON-1760 Want a way for cfwlogd to drop privileges

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..088ba6b
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,10 @@
+# Generated by Cargo
+# will have compiled files and executables
+/target/
+
+# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
+# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
+Cargo.lock
+
+# These are backup files generated by rustfmt
+**/*.rs.bk
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..6cbac63
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Cargo.toml b/Cargo.toml
new file mode 100644
index 0000000..e2a28b5
--- /dev/null
+++ b/Cargo.toml
@@ -0,0 +1,16 @@
+[package]
+name = "illumos-priv"
+version = "0.1.0"
+description = "Crate providing an interface to illumos's PRIVILEGES(5)"
+readme = "README.md"
+authors = ["Mike Zeller <mike@mikezeller.net>"]
+repository = "https://github.com/joyent/rust-illumos-priv"
+keywords = ["illumos", "solaris", "security", "privileges"]
+edition = "2018"
+license = "MPL-2.0"
+categories = [
+    "os",
+    "os::unix-apis"
+]
+
+[dependencies]
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..a612ad9
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,373 @@
+Mozilla Public License Version 2.0
+==================================
+
+1. Definitions
+--------------
+
+1.1. "Contributor"
+    means each individual or legal entity that creates, contributes to
+    the creation of, or owns Covered Software.
+
+1.2. "Contributor Version"
+    means the combination of the Contributions of others (if any) used
+    by a Contributor and that particular Contributor's Contribution.
+
+1.3. "Contribution"
+    means Covered Software of a particular Contributor.
+
+1.4. "Covered Software"
+    means Source Code Form to which the initial Contributor has attached
+    the notice in Exhibit A, the Executable Form of such Source Code
+    Form, and Modifications of such Source Code Form, in each case
+    including portions thereof.
+
+1.5. "Incompatible With Secondary Licenses"
+    means
+
+    (a) that the initial Contributor has attached the notice described
+        in Exhibit B to the Covered Software; or
+
+    (b) that the Covered Software was made available under the terms of
+        version 1.1 or earlier of the License, but not also under the
+        terms of a Secondary License.
+
+1.6. "Executable Form"
+    means any form of the work other than Source Code Form.
+
+1.7. "Larger Work"
+    means a work that combines Covered Software with other material, in
+    a separate file or files, that is not Covered Software.
+
+1.8. "License"
+    means this document.
+
+1.9. "Licensable"
+    means having the right to grant, to the maximum extent possible,
+    whether at the time of the initial grant or subsequently, any and
+    all of the rights conveyed by this License.
+
+1.10. "Modifications"
+    means any of the following:
+
+    (a) any file in Source Code Form that results from an addition to,
+        deletion from, or modification of the contents of Covered
+        Software; or
+
+    (b) any new file in Source Code Form that contains any Covered
+        Software.
+
+1.11. "Patent Claims" of a Contributor
+    means any patent claim(s), including without limitation, method,
+    process, and apparatus claims, in any patent Licensable by such
+    Contributor that would be infringed, but for the grant of the
+    License, by the making, using, selling, offering for sale, having
+    made, import, or transfer of either its Contributions or its
+    Contributor Version.
+
+1.12. "Secondary License"
+    means either the GNU General Public License, Version 2.0, the GNU
+    Lesser General Public License, Version 2.1, the GNU Affero General
+    Public License, Version 3.0, or any later versions of those
+    licenses.
+
+1.13. "Source Code Form"
+    means the form of the work preferred for making modifications.
+
+1.14. "You" (or "Your")
+    means an individual or a legal entity exercising rights under this
+    License. For legal entities, "You" includes any entity that
+    controls, is controlled by, or is under common control with You. For
+    purposes of this definition, "control" means (a) the power, direct
+    or indirect, to cause the direction or management of such entity,
+    whether by contract or otherwise, or (b) ownership of more than
+    fifty percent (50%) of the outstanding shares or beneficial
+    ownership of such entity.
+
+2. License Grants and Conditions
+--------------------------------
+
+2.1. Grants
+
+Each Contributor hereby grants You a world-wide, royalty-free,
+non-exclusive license:
+
+(a) under intellectual property rights (other than patent or trademark)
+    Licensable by such Contributor to use, reproduce, make available,
+    modify, display, perform, distribute, and otherwise exploit its
+    Contributions, either on an unmodified basis, with Modifications, or
+    as part of a Larger Work; and
+
+(b) under Patent Claims of such Contributor to make, use, sell, offer
+    for sale, have made, import, and otherwise transfer either its
+    Contributions or its Contributor Version.
+
+2.2. Effective Date
+
+The licenses granted in Section 2.1 with respect to any Contribution
+become effective for each Contribution on the date the Contributor first
+distributes such Contribution.
+
+2.3. Limitations on Grant Scope
+
+The licenses granted in this Section 2 are the only rights granted under
+this License. No additional rights or licenses will be implied from the
+distribution or licensing of Covered Software under this License.
+Notwithstanding Section 2.1(b) above, no patent license is granted by a
+Contributor:
+
+(a) for any code that a Contributor has removed from Covered Software;
+    or
+
+(b) for infringements caused by: (i) Your and any other third party's
+    modifications of Covered Software, or (ii) the combination of its
+    Contributions with other software (except as part of its Contributor
+    Version); or
+
+(c) under Patent Claims infringed by Covered Software in the absence of
+    its Contributions.
+
+This License does not grant any rights in the trademarks, service marks,
+or logos of any Contributor (except as may be necessary to comply with
+the notice requirements in Section 3.4).
+
+2.4. Subsequent Licenses
+
+No Contributor makes additional grants as a result of Your choice to
+distribute the Covered Software under a subsequent version of this
+License (see Section 10.2) or under the terms of a Secondary License (if
+permitted under the terms of Section 3.3).
+
+2.5. Representation
+
+Each Contributor represents that the Contributor believes its
+Contributions are its original creation(s) or it has sufficient rights
+to grant the rights to its Contributions conveyed by this License.
+
+2.6. Fair Use
+
+This License is not intended to limit any rights You have under
+applicable copyright doctrines of fair use, fair dealing, or other
+equivalents.
+
+2.7. Conditions
+
+Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted
+in Section 2.1.
+
+3. Responsibilities
+-------------------
+
+3.1. Distribution of Source Form
+
+All distribution of Covered Software in Source Code Form, including any
+Modifications that You create or to which You contribute, must be under
+the terms of this License. You must inform recipients that the Source
+Code Form of the Covered Software is governed by the terms of this
+License, and how they can obtain a copy of this License. You may not
+attempt to alter or restrict the recipients' rights in the Source Code
+Form.
+
+3.2. Distribution of Executable Form
+
+If You distribute Covered Software in Executable Form then:
+
+(a) such Covered Software must also be made available in Source Code
+    Form, as described in Section 3.1, and You must inform recipients of
+    the Executable Form how they can obtain a copy of such Source Code
+    Form by reasonable means in a timely manner, at a charge no more
+    than the cost of distribution to the recipient; and
+
+(b) You may distribute such Executable Form under the terms of this
+    License, or sublicense it under different terms, provided that the
+    license for the Executable Form does not attempt to limit or alter
+    the recipients' rights in the Source Code Form under this License.
+
+3.3. Distribution of a Larger Work
+
+You may create and distribute a Larger Work under terms of Your choice,
+provided that You also comply with the requirements of this License for
+the Covered Software. If the Larger Work is a combination of Covered
+Software with a work governed by one or more Secondary Licenses, and the
+Covered Software is not Incompatible With Secondary Licenses, this
+License permits You to additionally distribute such Covered Software
+under the terms of such Secondary License(s), so that the recipient of
+the Larger Work may, at their option, further distribute the Covered
+Software under the terms of either this License or such Secondary
+License(s).
+
+3.4. Notices
+
+You may not remove or alter the substance of any license notices
+(including copyright notices, patent notices, disclaimers of warranty,
+or limitations of liability) contained within the Source Code Form of
+the Covered Software, except that You may alter any license notices to
+the extent required to remedy known factual inaccuracies.
+
+3.5. Application of Additional Terms
+
+You may choose to offer, and to charge a fee for, warranty, support,
+indemnity or liability obligations to one or more recipients of Covered
+Software. However, You may do so only on Your own behalf, and not on
+behalf of any Contributor. You must make it absolutely clear that any
+such warranty, support, indemnity, or liability obligation is offered by
+You alone, and You hereby agree to indemnify every Contributor for any
+liability incurred by such Contributor as a result of warranty, support,
+indemnity or liability terms You offer. You may include additional
+disclaimers of warranty and limitations of liability specific to any
+jurisdiction.
+
+4. Inability to Comply Due to Statute or Regulation
+---------------------------------------------------
+
+If it is impossible for You to comply with any of the terms of this
+License with respect to some or all of the Covered Software due to
+statute, judicial order, or regulation then You must: (a) comply with
+the terms of this License to the maximum extent possible; and (b)
+describe the limitations and the code they affect. Such description must
+be placed in a text file included with all distributions of the Covered
+Software under this License. Except to the extent prohibited by statute
+or regulation, such description must be sufficiently detailed for a
+recipient of ordinary skill to be able to understand it.
+
+5. Termination
+--------------
+
+5.1. The rights granted under this License will terminate automatically
+if You fail to comply with any of its terms. However, if You become
+compliant, then the rights granted under this License from a particular
+Contributor are reinstated (a) provisionally, unless and until such
+Contributor explicitly and finally terminates Your grants, and (b) on an
+ongoing basis, if such Contributor fails to notify You of the
+non-compliance by some reasonable means prior to 60 days after You have
+come back into compliance. Moreover, Your grants from a particular
+Contributor are reinstated on an ongoing basis if such Contributor
+notifies You of the non-compliance by some reasonable means, this is the
+first time You have received notice of non-compliance with this License
+from such Contributor, and You become compliant prior to 30 days after
+Your receipt of the notice.
+
+5.2. If You initiate litigation against any entity by asserting a patent
+infringement claim (excluding declaratory judgment actions,
+counter-claims, and cross-claims) alleging that a Contributor Version
+directly or indirectly infringes any patent, then the rights granted to
+You by any and all Contributors for the Covered Software under Section
+2.1 of this License shall terminate.
+
+5.3. In the event of termination under Sections 5.1 or 5.2 above, all
+end user license agreements (excluding distributors and resellers) which
+have been validly granted by You or Your distributors under this License
+prior to termination shall survive termination.
+
+************************************************************************
+*                                                                      *
+*  6. Disclaimer of Warranty                                           *
+*  -------------------------                                           *
+*                                                                      *
+*  Covered Software is provided under this License on an "as is"       *
+*  basis, without warranty of any kind, either expressed, implied, or  *
+*  statutory, including, without limitation, warranties that the       *
+*  Covered Software is free of defects, merchantable, fit for a        *
+*  particular purpose or non-infringing. The entire risk as to the     *
+*  quality and performance of the Covered Software is with You.        *
+*  Should any Covered Software prove defective in any respect, You     *
+*  (not any Contributor) assume the cost of any necessary servicing,   *
+*  repair, or correction. This disclaimer of warranty constitutes an   *
+*  essential part of this License. No use of any Covered Software is   *
+*  authorized under this License except under this disclaimer.         *
+*                                                                      *
+************************************************************************
+
+************************************************************************
+*                                                                      *
+*  7. Limitation of Liability                                          *
+*  --------------------------                                          *
+*                                                                      *
+*  Under no circumstances and under no legal theory, whether tort      *
+*  (including negligence), contract, or otherwise, shall any           *
+*  Contributor, or anyone who distributes Covered Software as          *
+*  permitted above, be liable to You for any direct, indirect,         *
+*  special, incidental, or consequential damages of any character      *
+*  including, without limitation, damages for lost profits, loss of    *
+*  goodwill, work stoppage, computer failure or malfunction, or any    *
+*  and all other commercial damages or losses, even if such party      *
+*  shall have been informed of the possibility of such damages. This   *
+*  limitation of liability shall not apply to liability for death or   *
+*  personal injury resulting from such party's negligence to the       *
+*  extent applicable law prohibits such limitation. Some               *
+*  jurisdictions do not allow the exclusion or limitation of           *
+*  incidental or consequential damages, so this exclusion and          *
+*  limitation may not apply to You.                                    *
+*                                                                      *
+************************************************************************
+
+8. Litigation
+-------------
+
+Any litigation relating to this License may be brought only in the
+courts of a jurisdiction where the defendant maintains its principal
+place of business and such litigation shall be governed by laws of that
+jurisdiction, without reference to its conflict-of-law provisions.
+Nothing in this Section shall prevent a party's ability to bring
+cross-claims or counter-claims.
+
+9. Miscellaneous
+----------------
+
+This License represents the complete agreement concerning the subject
+matter hereof. If any provision of this License is held to be
+unenforceable, such provision shall be reformed only to the extent
+necessary to make it enforceable. Any law or regulation which provides
+that the language of a contract shall be construed against the drafter
+shall not be used to construe this License against a Contributor.
+
+10. Versions of the License
+---------------------------
+
+10.1. New Versions
+
+Mozilla Foundation is the license steward. Except as provided in Section
+10.3, no one other than the license steward has the right to modify or
+publish new versions of this License. Each version will be given a
+distinguishing version number.
+
+10.2. Effect of New Versions
+
+You may distribute the Covered Software under the terms of the version
+of the License under which You originally received the Covered Software,
+or under the terms of any subsequent version published by the license
+steward.
+
+10.3. Modified Versions
+
+If you create software not governed by this License, and you want to
+create a new license for such software, you may create and use a
+modified version of this License if you rename the license and remove
+any references to the name of the license steward (except to note that
+such modified license differs from this License).
+
+10.4. Distributing Source Code Form that is Incompatible With Secondary
+Licenses
+
+If You choose to distribute Source Code Form that is Incompatible With
+Secondary Licenses under the terms of this version of the License, the
+notice described in Exhibit B of this License must be attached.
+
+Exhibit A - Source Code Form License Notice
+-------------------------------------------
+
+  This Source Code Form is subject to the terms of the Mozilla Public
+  License, v. 2.0. If a copy of the MPL was not distributed with this
+  file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+If it is not possible or desirable to put the notice in a particular
+file, then You may include the notice in a location (such as a LICENSE
+file in a relevant directory) where a recipient would be likely to look
+for such a notice.
+
+You may add additional accurate notices of copyright ownership.
+
+Exhibit B - "Incompatible With Secondary Licenses" Notice
+---------------------------------------------------------
+
+  This Source Code Form is "Incompatible With Secondary Licenses", as
+  defined by the Mozilla Public License, v. 2.0.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..f1e1cba
--- /dev/null
+++ b/README.md
@@ -0,0 +1,22 @@
+# rust-illumos-priv
+Adjust illumos privilege sets.
+
+illumos implements a set of privileges that provide fine-grained control over
+the actions of processes. The possession of a certain privilege allows a
+process to perform a specific set of restricted operations.
+
+See PRIVILEGES(5) for a list of privileges and their descriptions, or take a
+look at this crates documentation.
+
+## Example
+
+Dropping fork and exec privileges from a process running as root results in
+failure to fork-exec `ls`. Source for the below example can be found in
+[examples/fork-exec.rs](examples/fork-exec.rs).
+
+```
+root - rustdev ~/src/rust-illumos-priv (git:master) # cargo run --example fork-exec
+    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
+     Running `target/debug/examples/fork-exec`
+failed to fork/exec ls: PermissionDenied
+```
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..ed10150
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit ed10150657b1f3ae4f061c751daf365ed16ca8d5
diff --git a/examples/fork-exec.rs b/examples/fork-exec.rs
new file mode 100644
index 0000000..57edf93
--- /dev/null
+++ b/examples/fork-exec.rs
@@ -0,0 +1,17 @@
+use illumos_priv::{PrivOp, PrivPtype, PrivSet, Privilege};
+use std::process::Command;
+
+fn main() {
+    let pset = PrivSet::new_basic().unwrap();
+
+    pset.delset(Privilege::ProcExec).unwrap();
+    pset.delset(Privilege::ProcFork).unwrap();
+
+    illumos_priv::setppriv(PrivOp::Set, PrivPtype::Permitted, &pset).unwrap();
+    illumos_priv::setppriv(PrivOp::Set, PrivPtype::Effective, &pset).unwrap();
+
+    match Command::new("ls").output() {
+        Err(e) => eprintln!("failed to fork/exec ls: {:?}", e.kind()),
+        Ok(_) => panic!("shouldn't be able to fork/exec"),
+    }
+}
diff --git a/examples/member.rs b/examples/member.rs
new file mode 100644
index 0000000..3fa2917
--- /dev/null
+++ b/examples/member.rs
@@ -0,0 +1,19 @@
+use illumos_priv::{PrivSet, Privilege};
+
+fn main() {
+    let pset = PrivSet::new_basic().unwrap();
+
+    println!(
+        "{:?} is in the PrivSet: {}",
+        Privilege::ProcFork,
+        pset.is_member(Privilege::ProcFork)
+    );
+
+    pset.delset(Privilege::ProcFork).unwrap();
+
+    println!(
+        "{:?} is in the PrivSet: {}",
+        Privilege::ProcFork,
+        pset.is_member(Privilege::ProcFork)
+    );
+}
diff --git a/src/ffi.rs b/src/ffi.rs
new file mode 100644
index 0000000..d02a26d
--- /dev/null
+++ b/src/ffi.rs
@@ -0,0 +1,46 @@
+// This Source Code Form is subject to the terms of the Mozilla Public
+// License, v. 2.0. If a copy of the MPL was not distributed with this
+// file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+// Copyright 2019 Joyent, Inc.
+
+use std::os::raw::{c_char, c_int};
+
+#[repr(C)]
+/// illumos opaque type priv_set_t
+pub struct OpaquePrivSet {
+    _private: [u8; 0],
+}
+
+#[no_mangle]
+extern "C" {
+    /// allocates sufficient memory to contain a privilege set. The value of the returned privilege
+    /// set is indeterminate. The function returns NULL and sets errno when it fails to allocate
+    /// memory.
+    pub fn priv_allocset() -> *mut OpaquePrivSet;
+    /// Frees the storage allocated by `priv_allocset()`.
+    pub fn priv_freeset(sp: *mut OpaquePrivSet);
+    /// Clears all privileges from sp.
+    pub fn priv_emptyset(sp: *mut OpaquePrivSet);
+    /// Copies the basic privilege set to sp.
+    pub fn priv_basicset(sp: *mut OpaquePrivSet);
+    /// Adds the named privilege priv from sp.
+    pub fn priv_addset(sp: *mut OpaquePrivSet, privilege: *const c_char) -> c_int;
+    /// Removes the named privilege priv from sp.
+    pub fn priv_delset(sp: *mut OpaquePrivSet, privilege: *const c_char) -> c_int;
+    /// checks whether the named privilege priv is a member of sp.
+    pub fn priv_ismember(sp: *mut OpaquePrivSet, privilege: *const c_char) -> c_int;
+    /// checks whether the sp is an empty set.
+    pub fn priv_isemptyset(sp: *mut OpaquePrivSet) -> c_int;
+    /// checks whether the privilege set src is equal to dst.
+    pub fn priv_isequalset(src: *const OpaquePrivSet, dst: *const OpaquePrivSet) -> c_int;
+
+    /// Sets or changes the process privilege set. The op argument specifies the operation and can
+    /// be one of PRIV_OFF, PRIV_ON or PRIV_SET. The which argument specifies the name of the
+    /// privilege set. The set argument specifies the set.
+    pub fn setppriv(op: i32, which: *const c_char, sp: *mut OpaquePrivSet) -> c_int;
+    /// Returns the process privilege set specified by which in the set pointed to by set. The
+    /// memory for set is allocated with priv_allocset() and freed with priv_freeset(). Both
+    /// functions are documented on the priv_addset(3C) manual page.
+    pub fn getppriv(which: *const c_char, set: *mut OpaquePrivSet) -> c_int;
+}
diff --git a/src/lib.rs b/src/lib.rs
new file mode 100644
index 0000000..e67d8db
--- /dev/null
+++ b/src/lib.rs
@@ -0,0 +1,306 @@
+// This Source Code Form is subject to the terms of the Mozilla Public
+// License, v. 2.0. If a copy of the MPL was not distributed with this
+// file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+// Copyright 2019 Joyent, Inc.
+
+//! illumos implements a set of privileges that provide fine-grained control over the actions of
+//! processes. The possession of a certain privilege allows a process to perform a specific set of
+//! restricted operations.
+//!
+//! This crate provides a safe wrapper around this interface and lets you add/remove/replace a
+//! privilege set for a process or its off-spring.
+
+use std::ffi::CStr;
+use std::io;
+use std::os::raw::c_char;
+
+mod ffi;
+mod privileges;
+
+pub use privileges::Privilege;
+
+/// See GETPPRIV(2) for more in depth documentation.
+pub enum PrivPtype {
+    /// Set of privileges currently in effect.
+    Effective,
+    /// Set of privileges that comes into effect on exec.
+    Inheritable,
+    /// Set of privileges that can be put into the effective set without restriction.
+    Permitted,
+    /// Set of privileges that determines the absolute upper bound of privileges this process and
+    /// its off-spring can obtain.
+    Limit,
+}
+
+impl PrivPtype {
+    fn as_str(&self) -> &str {
+        match self {
+            PrivPtype::Effective => "Effective\0",
+            PrivPtype::Inheritable => "Inheritable\0",
+            PrivPtype::Permitted => "Permitted\0",
+            PrivPtype::Limit => "Limit\0",
+        }
+    }
+
+    fn as_ptr(&self) -> *const c_char {
+        CStr::from_bytes_with_nul(self.as_str().as_bytes())
+            .expect("all variants should be nul terminated")
+            .as_ptr()
+    }
+}
+
+/// See GETPPRIV(2) for more in depth documentation.
+#[repr(C)]
+pub enum PrivOp {
+    /// Turns on the privileges in a `PrivSet`
+    On = 0,
+    /// Turns off the privileges in a `PrivSet`
+    Off,
+    /// Replaces the privileges in a `PrivSet`
+    Set,
+}
+
+/// An illumos privilege set that allows one to add/remove or complete replace a set of privileges
+/// for a process. When `PrivSet` is dropped, its backing memory is freed.
+pub struct PrivSet {
+    inner: *mut ffi::OpaquePrivSet,
+}
+
+impl PrivSet {
+    /// Allocates a new empty `PrivSet`
+    pub fn new_empty() -> io::Result<Self> {
+        unsafe {
+            let inner = ptr_or_err(ffi::priv_allocset())?;
+            ffi::priv_emptyset(inner);
+            Ok(PrivSet { inner })
+        }
+    }
+
+    /// Allocates a new `PrivSet` with "basic" privileges.
+    /// "basic" privileges are "privileges" unprivileged processes are accustomed to having.
+    pub fn new_basic() -> io::Result<Self> {
+        unsafe {
+            let inner = ptr_or_err(ffi::priv_allocset())?;
+            ffi::priv_basicset(inner);
+            Ok(PrivSet { inner })
+        }
+    }
+
+    /// Adds the "basic" set to the `PrivSet`.
+    pub fn basic(&self) {
+        unsafe {
+            ffi::priv_basicset(self.inner);
+        }
+    }
+
+    /// Empties the `PrivSet` so that it contains no "privileges"
+    pub fn empty(&self) {
+        unsafe {
+            ffi::priv_emptyset(self.inner);
+        }
+    }
+
+    /// Adds the named privilege to the `PrivSet`
+    pub fn addset(&self, p: Privilege) -> io::Result<()> {
+        unsafe { ret_or_err(ffi::priv_addset(self.inner, p.as_ptr())) }
+    }
+
+    /// Removes the named privilege from the `PrivSet`
+    pub fn delset(&self, p: Privilege) -> io::Result<()> {
+        unsafe { ret_or_err(ffi::priv_delset(self.inner, p.as_ptr())) }
+    }
+
+    /// Determines whether the `PrivSet` is empty.
+    pub fn is_empty(&self) -> bool {
+        unsafe { true_or_false(ffi::priv_isemptyset(self.inner)) }
+    }
+
+    /// Determines whether the named privilege is a member of the `PrivSet`.
+    pub fn is_member(&self, p: Privilege) -> bool {
+        unsafe { true_or_false(ffi::priv_ismember(self.inner, p.as_ptr())) }
+    }
+
+    /// Determines whether the `PrivSet` is equal to the `dst` `PrivSet`.
+    pub fn is_equal(&self, dst: &PrivSet) -> bool {
+        unsafe { true_or_false(ffi::priv_isequalset(self.inner, dst.inner)) }
+    }
+}
+
+impl PartialEq for PrivSet {
+    fn eq(&self, other: &Self) -> bool {
+        self.is_equal(other)
+    }
+}
+
+/// Sets or changes the processes privilege set.
+pub fn setppriv(op: PrivOp, ptype: PrivPtype, sp: &PrivSet) -> io::Result<()> {
+    unsafe { ret_or_err(ffi::setppriv(op as i32, ptype.as_ptr(), sp.inner)) }
+}
+
+/// Gets the process privilege set for the given `PrivPtype`.
+pub fn getppriv(ptype: PrivPtype) -> io::Result<PrivSet> {
+    unsafe {
+        let inner = ptr_or_err(ffi::priv_allocset())?;
+        // Make sure we create an instance of `PrivSet` first so in the event the call to getppriv
+        // below fails, the inner value will be freed via `Drop`
+        let sp = PrivSet { inner };
+        ret_or_err(ffi::getppriv(ptype.as_ptr(), sp.inner))?;
+        Ok(sp)
+    }
+}
+
+impl Drop for PrivSet {
+    fn drop(&mut self) {
+        if !self.inner.is_null() {
+            unsafe {
+                ffi::priv_freeset(self.inner);
+            }
+        }
+    }
+}
+
+// ============ Helpers ============
+
+fn ptr_or_err<T>(ptr: *mut T) -> io::Result<*mut T> {
+    if ptr.is_null() {
+        Err(io::Error::last_os_error())
+    } else {
+        Ok(ptr)
+    }
+}
+
+fn ret_or_err(ret: i32) -> io::Result<()> {
+    match ret {
+        -1 => Err(io::Error::last_os_error()),
+        _ => Ok(()),
+    }
+}
+
+fn true_or_false(ret: i32) -> bool {
+    match ret {
+        1 => true,
+        _ => false,
+    }
+}
+
+// ============ Tests ============
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use std::process::Command;
+
+    #[test]
+    fn empty_set_test() {
+        let set = PrivSet::new_empty().unwrap();
+        assert_eq!(true, set.is_empty(), "set is empty");
+    }
+
+    #[test]
+    fn empty_test() {
+        let set = PrivSet::new_basic().unwrap();
+        assert_eq!(false, set.is_empty(), "set is not empty");
+        set.empty();
+        assert_eq!(true, set.is_empty(), "set is empty");
+    }
+
+    #[test]
+    fn is_equal_test() {
+        let src = PrivSet::new_basic().unwrap();
+        let dst = PrivSet::new_empty().unwrap();
+        assert_eq!(false, src.is_equal(&dst), "PrivSets are not equal");
+        dst.basic();
+        assert_eq!(true, src.is_equal(&dst), "PrivSets are equal");
+        // Also verify that PartialEq returns true
+        assert!(src == dst, "PrivSets are equal");
+    }
+
+    #[test]
+    fn is_member_test() {
+        let set = PrivSet::new_basic().unwrap();
+        assert_eq!(
+            true,
+            set.is_member(Privilege::ProcFork),
+            "PRIV_PROC_FORK is in the set"
+        );
+    }
+
+    #[test]
+    fn add_priv_test() {
+        let set = PrivSet::new_empty().unwrap();
+        assert_eq!(
+            false,
+            set.is_member(Privilege::ProcFork),
+            "PRIV_PROC_FORK is not in the set"
+        );
+        let _ = set
+            .addset(Privilege::ProcFork)
+            .expect("failed to add to the set");
+        assert_eq!(
+            true,
+            set.is_member(Privilege::ProcFork),
+            "PRIV_PROC_FORK is in the set"
+        );
+    }
+
+    #[test]
+    fn del_priv_test() {
+        let set = PrivSet::new_basic().unwrap();
+        assert_eq!(
+            true,
+            set.is_member(Privilege::ProcFork),
+            "PRIV_PROC_FORK is in the set"
+        );
+        let _ = set
+            .delset(Privilege::ProcFork)
+            .expect("failed to delete from set");
+        assert_eq!(
+            false,
+            set.is_member(Privilege::ProcFork),
+            "PRIV_PROC_FORK is not in the set"
+        );
+    }
+
+    #[test]
+    fn getppriv_test() {
+        let orig = getppriv(PrivPtype::Effective).unwrap();
+        let src = PrivSet::new_basic().unwrap();
+        let _ = src
+            .delset(Privilege::ProcFork)
+            .expect("failed to delete from set");
+        setppriv(PrivOp::Set, PrivPtype::Effective, &src).unwrap();
+
+        let dst = getppriv(PrivPtype::Effective).unwrap();
+        assert!(src == dst, "getpprive PrivSet matches the one we just set");
+        // Reset the original privilege set so other tests don't fail
+        setppriv(PrivOp::Set, PrivPtype::Effective, &orig).unwrap();
+    }
+
+    #[test]
+    fn drop_fork_test() {
+        let orig = getppriv(PrivPtype::Effective).unwrap();
+        let set = PrivSet::new_basic().unwrap();
+        let _ = set
+            .delset(Privilege::ProcFork)
+            .expect("failed to delete from set");
+
+        let res = Command::new("ls").output();
+        assert!(res.is_ok(), "successfully ran ls");
+
+        // Drop proc_fork and make sure the command fails below
+        setppriv(PrivOp::Set, PrivPtype::Effective, &set).unwrap();
+
+        let res = Command::new("ls").output();
+        assert!(res.is_err(), "can no longer run ls");
+        let err = res.unwrap_err();
+        assert_eq!(
+            std::io::ErrorKind::PermissionDenied,
+            err.kind(),
+            "got permission denied when attempting to run ls"
+        );
+
+        // Reset the original privilege set so other tests don't fail
+        setppriv(PrivOp::Set, PrivPtype::Effective, &orig).unwrap();
+    }
+}
diff --git a/src/privileges.rs b/src/privileges.rs
new file mode 100644
index 0000000..1bf0ff1
--- /dev/null
+++ b/src/privileges.rs
@@ -0,0 +1,613 @@
+// This Source Code Form is subject to the terms of the Mozilla Public
+// License, v. 2.0. If a copy of the MPL was not distributed with this
+// file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+// Copyright 2019 Joyent, Inc.
+
+//! The definitions below are sourced from an illumos system in "/usr/include/sys/priv_names.h"
+
+use std::ffi::CStr;
+use std::os::raw::c_char;
+
+#[derive(Debug)]
+/// Mapping to the various illumos PRIVILEGES(5).
+pub enum Privilege {
+    /// Allows a process to request critical events without limitation.
+    /// Allows a process to request reliable delivery of all events on
+    /// any event queue.
+    ContractEvent,
+
+    /// Allows a process to set the service FMRI value of a process
+    /// contract template.
+    ContractIdentity,
+
+    /// Allows a process to observe contract events generated by
+    /// contracts created and owned by users other than the process's
+    /// effective user ID.
+    /// Allows a process to open contract event endpoints belonging to
+    /// contracts created and owned by users other than the process's
+    /// effective user ID.
+    ContractObserver,
+
+    /// Allow a process to access per-CPU hardware performance counters.
+    CpcCpu,
+
+    /// Allows DTrace kernel-level tracing.
+    DtraceKernel,
+
+    /// Allows DTrace process-level tracing.
+    /// Allows process-level tracing probes to be placed and enabled in
+    /// processes to which the user has permissions.
+    DtraceProc,
+
+    /// Allows DTrace user-level tracing.
+    /// Allows use of the syscall and profile DTrace providers to
+    /// examine processes to which the user has permissions.
+    DtraceUser,
+
+    /// Allows a process to change a file's owner user ID.
+    /// Allows a process to change a file's group ID to one other than
+    /// the process' effective group ID or one of the process'
+    /// supplemental group IDs.
+    FileChown,
+
+    /// Allows a process to give away its files; a process with this
+    /// privilege will run as if {_POSIX_CHOWN_RESTRICTED} is not
+    /// in effect.
+    FileChownSelf,
+
+    /// Allows a process to execute an executable file whose permission
+    /// bits or ACL do not allow the process execute permission.
+    FileDacExecute,
+
+    /// Allows a process to read a file or directory whose permission
+    /// bits or ACL do not allow the process read permission.
+    FileDacRead,
+
+    /// Allows a process to search a directory whose permission bits or
+    /// ACL do not allow the process search permission.
+    FileDacSearch,
+
+    /// Allows a process to write a file or directory whose permission
+    /// bits or ACL do not allow the process write permission.
+    /// In order to write files owned by uid 0 in the absence of an
+    /// effective uid of 0 ALL privileges are required.
+    FileDacWrite,
+
+    /// Allows a process to set the sensitivity label of a file or
+    /// directory to a sensitivity label that does not dominate the
+    /// existing sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    FileDowngradeSl,
+
+    /// Allows a process to set immutable, nounlink or appendonly
+    /// file attributes.
+    FileFlagSet,
+
+    /// Allows a process to create hardlinks to files owned by a uid
+    /// different from the process' effective uid.
+    FileLinkAny,
+
+    /// Allows a process which is not the owner of a file or directory
+    /// to perform the following operations that are normally permitted
+    /// only for the file owner: modify that file's access and
+    /// modification times; remove or rename a file or directory whose
+    /// parent directory has the ``save text image after execution''
+    /// (sticky) bit set; mount a ``namefs'' upon a file; modify
+    /// permission bits or ACL except for the set-uid and set-gid
+    /// bits.
+    FileOwner,
+
+    /// Allows a process to read objects in the filesystem.
+    FileRead,
+
+    /// Allows a process to change the ownership of a file or write to
+    /// a file without the set-user-ID and set-group-ID bits being
+    /// cleared.
+    /// Allows a process to set the set-group-ID bit on a file or
+    /// directory whose group is not the process' effective group or
+    /// one of the process' supplemental groups.
+    /// Allows a process to set the set-user-ID bit on a file with
+    /// different ownership in the presence of PRIV_FILE_OWNER.
+    /// Additional restrictions apply when creating or modifying a
+    /// set-uid 0 file.
+    FileSetid,
+
+    /// Allows a process to set the sensitivity label of a file or
+    /// directory to a sensitivity label that dominates the existing
+    /// sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    FileUpgradeSl,
+
+    /// Allows a process to modify objects in the filesystem.
+    FileWrite,
+
+    /// Allows a process to make privileged ioctls to graphics devices.
+    /// Typically only xserver process needs to have this privilege.
+    /// A process with this privilege is also allowed to perform
+    /// privileged graphics device mappings.
+    GraphicsAccess,
+
+    /// Allows a process to perform privileged mappings through a
+    /// graphics device.
+    GraphicsMap,
+
+    /// Allows a process to manage hyprlofs entries.
+    HyprlofsControl,
+
+    /// Allows a process to read a System V IPC
+    /// Message Queue, Semaphore Set, or Shared Memory Segment whose
+    /// permission bits do not allow the process read permission.
+    /// Allows a process to read remote shared memory whose
+    /// permission bits do not allow the process read permission.
+    IpcDacRead,
+
+    /// Allows a process to write a System V IPC
+    /// Message Queue, Semaphore Set, or Shared Memory Segment whose
+    /// permission bits do not allow the process write permission.
+    /// Allows a process to read remote shared memory whose
+    /// permission bits do not allow the process write permission.
+    /// Additional restrictions apply if the owner of the object has uid 0
+    /// and the effective uid of the current process is not 0.
+    IpcDacWrite,
+
+    /// Allows a process which is not the owner of a System
+    /// V IPC Message Queue, Semaphore Set, or Shared Memory Segment to
+    /// remove, change ownership of, or change permission bits of the
+    /// Message Queue, Semaphore Set, or Shared Memory Segment.
+    /// Additional restrictions apply if the owner of the object has uid 0
+    /// and the effective uid of the current process is not 0.
+    IpcOwner,
+
+    /// Allows a process to open a TCP, UDP, SDP or SCTP network endpoint.
+    NetAccess,
+
+    /// Allow a process to bind to a port that is configured as a
+    /// multi-level port(MLP) for the process's zone. This privilege
+    /// applies to both shared address and zone-specific address MLPs.
+    /// See tnzonecfg(4) from the Trusted Extensions manual pages for
+    /// information on configuring MLP ports.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    NetBindmlp,
+
+    /// Allows a process to send and receive ICMP packets.
+    NetIcmpaccess,
+
+    /// Allows a process to set NET_MAC_AWARE process flag by using
+    /// setpflags(2). This privilege also allows a process to set
+    /// SO_MAC_EXEMPT socket option by using setsockopt(3SOCKET).
+    /// The NET_MAC_AWARE process flag and the SO_MAC_EXEMPT socket
+    /// option both allow a local process to communicate with an
+    /// unlabeled peer if the local process' label dominates the
+    /// peer's default label, or if the local process runs in the
+    /// global zone.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    NetMacAware,
+
+    /// Allows a process to set SO_MAC_IMPLICIT option by using
+    /// setsockopt(3SOCKET).  This allows a privileged process to
+    /// transmit implicitly-labeled packets to a peer.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    NetMacImplicit,
+
+    /// Allows a process to access /dev/lo0 and the devices in /dev/ipnet/
+    /// while not requiring them to need PRIV_NET_RAWACCESS.
+    NetObservability,
+
+    /// Allows a process to bind to a privileged port
+    /// number. The privilege port numbers are 1-1023 (the traditional
+    /// UNIX privileged ports) as well as those ports marked as
+    /// "udp/tcp_extra_priv_ports" with the exception of the ports
+    /// reserved for use by NFS.
+    NetPrivaddr,
+
+    /// Allows a process to have direct access to the network layer.
+    NetRawaccess,
+
+    /// Allows a process to generate audit records.
+    /// Allows a process to get its own audit pre-selection information.
+    ProcAudit,
+
+    /// Allows a process to change its root directory.
+    ProcChroot,
+
+    /// Allows a process to use high resolution timers.
+    ProcClockHighres,
+
+    /// Allows a process to call execve().
+    ProcExec,
+
+    /// Allows a process to call fork1()/forkall()/vfork()
+    ProcFork,
+
+    /// Allows a process to examine the status of processes other
+    /// than those it can send signals to.  Processes which cannot
+    /// be examined cannot be seen in /proc and appear not to exist.
+    ProcInfo,
+
+    /// Allows a process to lock pages in physical memory.
+    ProcLockMemory,
+
+    /// Allows a process to access physical memory information.
+    ProcMeminfo,
+
+    /// Allows a process to send signals to other processes, inspect
+    /// and modify process state to other processes regardless of
+    /// ownership.  When modifying another process, additional
+    /// restrictions apply:  the effective privilege set of the
+    /// attaching process must be a superset of the target process'
+    /// effective, permitted and inheritable sets; the limit set must
+    /// be a superset of the target's limit set; if the target process
+    /// has any uid set to 0 all privilege must be asserted unless the
+    /// effective uid is 0.
+    /// Allows a process to bind arbitrary processes to CPUs.
+    ProcOwner,
+
+    /// Allows a process to elevate its priority above its current level.
+    ProcPrioup,
+
+    /// Allows all that PRIV_PROC_PRIOUP allows.
+    /// Allows a process to change its scheduling class to any scheduling class,
+    /// including the RT class.
+    ProcPriocntl,
+
+    /// Allows a process to manipulate the secflags of processes (subject to,
+    /// additionally, the ability to signal that process)
+    ProcSecflags,
+
+    /// Allows a process to send signals or trace processes outside its
+    /// session.
+    ProcSession,
+
+    /// Allows a process to set its uids at will.
+    /// Assuming uid 0 requires all privileges to be asserted.
+    ProcSetid,
+
+    /// Allows a process to assign a new task ID to the calling process.
+    ProcTaskid,
+
+    /// Allows a process to trace or send signals to processes in
+    /// other zones.
+    ProcZone,
+
+    /// Allows a process to enable and disable and manage accounting through
+    /// acct(2), getacct(2), putacct(2) and wracct(2).
+    SysAcct,
+
+    /// Allows a process to perform system administration tasks such
+    /// as setting node and domain name and specifying nscd and coreadm
+    /// settings.
+    SysAdmin,
+
+    /// Allows a process to start the (kernel) audit daemon.
+    /// Allows a process to view and set audit state (audit user ID,
+    /// audit terminal ID, audit sessions ID, audit pre-selection mask).
+    /// Allows a process to turn off and on auditing.
+    /// Allows a process to configure the audit parameters (cache and
+    /// queue sizes, event to class mappings, policy options).
+    SysAudit,
+
+    /// Allows a process to perform various system configuration tasks.
+    /// Allows a process to add and remove swap devices; when adding a swap
+    /// device, a process must also have sufficient privileges to read from
+    /// and write to the swap device.
+    SysConfig,
+
+    /// Allows a process to successfully call a kernel module that
+    /// calls the kernel drv_priv(9F) function to check for allowed
+    /// access.
+    /// Allows a process to open the real console device directly.
+    /// Allows a process to open devices that have been exclusively opened.
+    SysDevices,
+
+    /// Allows a process to import a potentially untrusted file system.
+    SysFsImport,
+
+    /// Allows a process to increase the size of a System V IPC Message
+    /// Queue buffer.
+    SysIpcConfig,
+
+    /// Allows a process to unlink and link directories.
+    SysLinkdir,
+
+    /// Allows filesystem specific administrative procedures, such as
+    /// filesystem configuration ioctls, quota calls and creation/deletion
+    /// of snapshots.
+    /// Allows a process to mount and unmount filesystems which would
+    /// otherwise be restricted (i.e., most filesystems except
+    /// namefs).
+    /// A process performing a mount operation needs to have
+    /// appropriate access to the device being mounted (read-write for
+    /// "rw" mounts, read for "ro" mounts).
+    /// A process performing any of the aforementioned
+    /// filesystem operations needs to have read/write/owner
+    /// access to the mount point.
+    /// Only regular files and directories can serve as mount points
+    /// for processes which do not have all zone privileges asserted.
+    /// Unless a process has all zone privileges, the mount(2)
+    /// system call will force the "nosuid" and "restrict" options, the
+    /// latter only for autofs mountpoints.
+    /// Regardless of privileges, a process running in a non-global zone may
+    /// only control mounts performed from within said zone.
+    /// Outside the global zone, the "nodevices" option is always forced.
+    SysMount,
+
+    /// Allows a process to configure IP tunnel links.
+    SysIptunConfig,
+
+    /// Allows a process to configure all classes of datalinks, including
+    /// configuration allowed by PRIV_SYS_IPTUN_CONFIG.
+    SysDlConfig,
+
+    /// Allows a process to configure a system's IP interfaces and routes.
+    /// Allows a process to configure network parameters using ndd.
+    /// Allows a process access to otherwise restricted information using ndd.
+    /// Allows a process to configure IPsec.
+    /// Allows a process to pop anchored STREAMs modules with matching zoneid.
+    SysIpConfig,
+
+    /// Allows all that PRIV_SYS_IP_CONFIG, PRIV_SYS_DL_CONFIG, and
+    /// PRIV_SYS_PPP_CONFIG allow.
+    /// Allows a process to push the rpcmod STREAMs module.
+    /// Allows a process to INSERT/REMOVE STREAMs modules on locations other
+    /// than the top of the module stack.
+    SysNetConfig,
+
+    /// Allows a process to perform Sun private NFS specific system calls.
+    /// Allows a process to bind to ports reserved by NFS: ports 2049 (nfs)
+    /// and port 4045 (lockd).
+    SysNfs,
+
+    /// Allows a process to create and destroy PPP (sppp) interfaces.
+    /// Allows a process to configure PPP tunnels (sppptun).
+    SysPppConfig,
+
+    /// Allows a process to bind processes to processor sets.
+    SysResBind,
+
+    /// Allows all that PRIV_SYS_RES_BIND allows.
+    /// Allows a process to create and delete processor sets, assign
+    /// CPUs to processor sets and override the PSET_NOESCAPE property.
+    /// Allows a process to change the operational status of CPUs in
+    /// the system using p_online(2).
+    /// Allows a process to configure resource pools and to bind
+    /// processes to pools
+    SysResConfig,
+
+    /// Allows a process to modify the resource limits specified
+    /// by setrlimit(2) and setrctl(2) without restriction.
+    /// Allows a process to exceed the per-user maximum number of
+    /// processes.
+    /// Allows a process to extend or create files on a filesystem that
+    /// has less than minfree space in reserve.
+    SysResource,
+
+    /// Allows a process to access the Sun private SMB kernel module.
+    /// Allows a process to bind to ports reserved by NetBIOS and SMB:
+    /// ports 137 (NBNS), 138 (NetBIOS Datagram Service), 139 (NetBIOS
+    /// Session Service and SMB-over-NBT) and 445 (SMB-over-TCP).
+    SysSmb,
+
+    /// Allows a process to successfully call a third party loadable module
+    /// that calls the kernel suser() function to check for allowed access.
+    /// This privilege exists only for third party loadable module
+    /// compatibility and is not used by Solaris proper.
+    SysSuserCompat,
+
+    /// Allows a process to manipulate system time using any of the
+    /// appropriate system calls: stime, adjtime, ntp_adjtime and
+    /// the IA specific RTC calls.
+    SysTime,
+
+    /// Allows a process to translate labels that are not dominated
+    /// by the process' sensitivity label to and from an external
+    /// string form.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    SysTransLabel,
+
+    /// Allows a process to manage virtualized environments such as
+    /// xVM(5).
+    VirtManage,
+
+    /// Allows a process to override colormap restrictions.
+    /// Allows a process to install or remove colormaps.
+    /// Allows a process to retrieve colormap cell entries allocated
+    /// by other processes.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinColormap,
+
+    /// Allows a process to configure or destroy resources that are
+    /// permanently retained by the X server.
+    /// Allows a process to use SetScreenSaver to set the screen
+    /// saver timeout value.
+    /// Allows a process to use ChangeHosts to modify the display
+    /// access control list.
+    /// Allows a process to use GrabServer.
+    /// Allows a process to use the SetCloseDownMode request which
+    /// may retain window, pixmap, colormap, property, cursor, font,
+    /// or graphic context resources.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinConfig,
+
+    /// Allows a process to read from a window resource that it does
+    /// not own (has a different user ID).
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinDacRead,
+
+    /// Allows a process to write to or create a window resource that
+    /// it does not own (has a different user ID). A newly created
+    /// window property is created with the window's user ID.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinDacWrite,
+
+    /// Allows a process to perform operations on window input devices.
+    /// Allows a process to get and set keyboard and pointer controls.
+    /// Allows a process to modify pointer button and key mappings.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinDevices,
+
+    /// Allows a process to use the direct graphics access (DGA) X protocol
+    /// extensions. Direct process access to the frame buffer is still
+    /// required. Thus the process must have MAC and DAC privileges that
+    /// allow access to the frame buffer, or the frame buffer must be
+    /// allocated to the process.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinDga,
+
+    /// Allows a process to set the sensitivity label of a window resource
+    /// to a sensitivity label that does not dominate the existing
+    /// sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinDowngradeSl,
+
+    /// Allows a process to set a font path.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinFontpath,
+
+    /// Allows a process to read from a window resource whose sensitivity
+    /// label is not equal to the process sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinMacRead,
+
+    /// Allows a process to create a window resource whose sensitivity
+    /// label is not equal to the process sensitivity label.
+    /// A newly created window property is created with the window's
+    /// sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinMacWrite,
+
+    /// Allows a process to request inter-window data moves without the
+    /// intervention of the selection confirmer.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinSelection,
+
+    /// Allows a process to set the sensitivity label of a window
+    /// resource to a sensitivity label that dominates the existing
+    /// sensitivity label.
+    /// This privilege is interpreted only if the system is configured
+    /// with Trusted Extensions.
+    WinUpgradeSl,
+
+    /// Allows a process access to the xVM(5) control devices for
+    /// managing guest domains and the hypervisor. This privilege is
+    /// used only if booted into xVM on x86 platforms.
+    XvmControl,
+}
+
+impl Privilege {
+    fn as_str(&self) -> &str {
+        match self {
+            Privilege::ContractEvent => "contract_event\0",
+            Privilege::ContractIdentity => "contract_identity\0",
+            Privilege::ContractObserver => "contract_observer\0",
+            Privilege::CpcCpu => "cpc_cpu\0",
+            Privilege::DtraceKernel => "dtrace_kernel\0",
+            Privilege::DtraceProc => "dtrace_proc\0",
+            Privilege::DtraceUser => "dtrace_user\0",
+            Privilege::FileChown => "file_chown\0",
+            Privilege::FileChownSelf => "file_chown_self\0",
+            Privilege::FileDacExecute => "file_dac_execute\0",
+            Privilege::FileDacRead => "file_dac_read\0",
+            Privilege::FileDacSearch => "file_dac_search\0",
+            Privilege::FileDacWrite => "file_dac_write\0",
+            Privilege::FileDowngradeSl => "file_downgrade_sl\0",
+            Privilege::FileFlagSet => "file_flag_set\0",
+            Privilege::FileLinkAny => "file_link_any\0",
+            Privilege::FileOwner => "file_owner\0",
+            Privilege::FileRead => "file_read\0",
+            Privilege::FileSetid => "file_setid\0",
+            Privilege::FileUpgradeSl => "file_upgrade_sl\0",
+            Privilege::FileWrite => "file_write\0",
+            Privilege::GraphicsAccess => "graphics_access\0",
+            Privilege::GraphicsMap => "graphics_map\0",
+            Privilege::HyprlofsControl => "hyprlofs_control\0",
+            Privilege::IpcDacRead => "ipc_dac_read\0",
+            Privilege::IpcDacWrite => "ipc_dac_write\0",
+            Privilege::IpcOwner => "ipc_owner\0",
+            Privilege::NetAccess => "net_access\0",
+            Privilege::NetBindmlp => "net_bindmlp\0",
+            Privilege::NetIcmpaccess => "net_icmpaccess\0",
+            Privilege::NetMacAware => "net_mac_aware\0",
+            Privilege::NetMacImplicit => "net_mac_implicit\0",
+            Privilege::NetObservability => "net_observability\0",
+            Privilege::NetPrivaddr => "net_privaddr\0",
+            Privilege::NetRawaccess => "net_rawaccess\0",
+            Privilege::ProcAudit => "proc_audit\0",
+            Privilege::ProcChroot => "proc_chroot\0",
+            Privilege::ProcClockHighres => "proc_clock_highres\0",
+            Privilege::ProcExec => "proc_exec\0",
+            Privilege::ProcFork => "proc_fork\0",
+            Privilege::ProcInfo => "proc_info\0",
+            Privilege::ProcLockMemory => "proc_lock_memory\0",
+            Privilege::ProcMeminfo => "proc_meminfo\0",
+            Privilege::ProcOwner => "proc_owner\0",
+            Privilege::ProcPrioup => "proc_prioup\0",
+            Privilege::ProcPriocntl => "proc_priocntl\0",
+            Privilege::ProcSecflags => "proc_secflags\0",
+            Privilege::ProcSession => "proc_session\0",
+            Privilege::ProcSetid => "proc_setid\0",
+            Privilege::ProcTaskid => "proc_taskid\0",
+            Privilege::ProcZone => "proc_zone\0",
+            Privilege::SysAcct => "sys_acct\0",
+            Privilege::SysAdmin => "sys_admin\0",
+            Privilege::SysAudit => "sys_audit\0",
+            Privilege::SysConfig => "sys_config\0",
+            Privilege::SysDevices => "sys_devices\0",
+            Privilege::SysFsImport => "sys_fs_import\0",
+            Privilege::SysIpcConfig => "sys_ipc_config\0",
+            Privilege::SysLinkdir => "sys_linkdir\0",
+            Privilege::SysMount => "sys_mount\0",
+            Privilege::SysIptunConfig => "sys_iptun_config\0",
+            Privilege::SysDlConfig => "sys_dl_config\0",
+            Privilege::SysIpConfig => "sys_ip_config\0",
+            Privilege::SysNetConfig => "sys_net_config\0",
+            Privilege::SysNfs => "sys_nfs\0",
+            Privilege::SysPppConfig => "sys_ppp_config\0",
+            Privilege::SysResBind => "sys_res_bind\0",
+            Privilege::SysResConfig => "sys_res_config\0",
+            Privilege::SysResource => "sys_resource\0",
+            Privilege::SysSmb => "sys_smb\0",
+            Privilege::SysSuserCompat => "sys_suser_compat\0",
+            Privilege::SysTime => "sys_time\0",
+            Privilege::SysTransLabel => "sys_trans_label\0",
+            Privilege::VirtManage => "virt_manage\0",
+            Privilege::WinColormap => "win_colormap\0",
+            Privilege::WinConfig => "win_config\0",
+            Privilege::WinDacRead => "win_dac_read\0",
+            Privilege::WinDacWrite => "win_dac_write\0",
+            Privilege::WinDevices => "win_devices\0",
+            Privilege::WinDga => "win_dga\0",
+            Privilege::WinDowngradeSl => "win_downgrade_sl\0",
+            Privilege::WinFontpath => "win_fontpath\0",
+            Privilege::WinMacRead => "win_mac_read\0",
+            Privilege::WinMacWrite => "win_mac_write\0",
+            Privilege::WinSelection => "win_selection\0",
+            Privilege::WinUpgradeSl => "win_upgrade_sl\0",
+            Privilege::XvmControl => "xvm_control\0",
+        }
+    }
+
+    /// Get the correct mapping as a `*const c_char` from a `Privilege`
+    pub(crate) fn as_ptr(&self) -> *const c_char {
+        CStr::from_bytes_with_nul(self.as_str().as_bytes())
+            .expect("all variants should be nul terminated")
+            .as_ptr()
+    }
+}
