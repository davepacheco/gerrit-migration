commit 7190b8a37122236ef64f2de499723f87a5dcc4a9 (refs/changes/54/3554/2)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-03-06T22:07:28-08:00 (1 year, 7 months ago)
    
    TRITON-211 vmapi should use package.brand

diff --git a/docs/index.md b/docs/index.md
index 5d4e928..e223851 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -44,7 +44,7 @@ update time.
 | alias                    | String                        | VM alias (max length 189 chars, and must match `/^[a-zA-Z0-9][a-zA-Z0-9\_\.\-]*$/`)                                                                                                                                       | Yes                 | Yes    | Yes    |
 | autoboot                 | Boolean                       | Controls whether or not a VM is booted when the system is rebooted.                                                                                                                                                       | Yes                 | Yes    | Yes    |
 | billing_id               | UUID                          | UUID of the PAPI package associated with this VM                                                                                                                                                                          | Yes                 | Yes    | Yes    |
-| brand                    | String                        | Brand of the VM (joyent, joyent-minimal, bhyve or kvm)                                                                                                                                                                    | Yes                 | Yes    | No     |
+| brand                    | String                        | Brand of the VM (joyent, joyent-minimal, lx, bhyve or kvm)                                                                                                                                                                | Yes                 | Yes    | No     |
 | cpu_cap                  | Number                        | CPU Cap                                                                                                                                                                                                                   | No                  | Yes    | Yes    |
 | cpu_shares               | Number                        | CPU Shares                                                                                                                                                                                                                | Yes                 | Yes    | Yes    |
 | create_timestamp         | Date                          | The time at which the VM was created in ISO 8601 format                                                                                                                                                                   | Yes                 | No     | No     |
@@ -482,25 +482,25 @@ Returns a list of VMs according the specified search filter.
 All inputs are optional. Inputs that are not listed below are invalid, and
 will result in a request error.
 
-| Param            | Type                                             | Description                                            |
-| ---------------- | ------------------------------------------------ | ------------------------------------------------------ |
-| alias            | String                                           | VM Alias                                               |
-| billing_id       | UUID                                             | UUID of the package the VM was created with            |
-| brand            | String                                           | Brand of the VM (joyent, joyent-minimal, bhyve or kvm) |
-| create_timestamp | Unix Time in milliseconds or UTC ISO Date String | VM creation timestamp                                  |
-| docker           | Boolean                                          | true if the VM is a docker VM, false otherwise         |
-| fields           | String (comma-separated values)                  | Specify which VM fields to return, see below           |
-| image_uuid       | UUID                                             | Image of the VM                                        |
-| internal_metadata| String                                           | VM internal metadata, [see below](#internal-metadata)  |
-| owner_uuid       | UUID                                             | VM Owner                                               |
-| package_name     | String                                           | DEPRECATED: use billing_id                             |
-| package_version  | String                                           | DEPRECATED: use billing_id                             |
-| uuid             | UUID                                             | VM uuid                                                |
-| ram              | Number                                           | Amount of memory of the VM                             |
-| server_uuid      | UUID                                             | Server where the VM lives                              |
-| state            | String                                           | running, stopped, active or destroyed                  |
-| uuids            | String (comma-separated UUID values)             | List of VM UUIDs to match                              |
-| tag.key          | String                                           | VM tags, see below                                     |
+| Param            | Type                                             | Description                                                |
+| ---------------- | ------------------------------------------------ | ---------------------------------------------------------- |
+| alias            | String                                           | VM Alias                                                   |
+| billing_id       | UUID                                             | UUID of the package the VM was created with                |
+| brand            | String                                           | Brand of the VM (joyent, joyent-minimal, lx, bhyve or kvm) |
+| create_timestamp | Unix Time in milliseconds or UTC ISO Date String | VM creation timestamp                                      |
+| docker           | Boolean                                          | true if the VM is a docker VM, false otherwise             |
+| fields           | String (comma-separated values)                  | Specify which VM fields to return, see below               |
+| image_uuid       | UUID                                             | Image of the VM                                            |
+| internal_metadata| String                                           | VM internal metadata, [see below](#internal-metadata)      |
+| owner_uuid       | UUID                                             | VM Owner                                                   |
+| package_name     | String                                           | DEPRECATED: use billing_id                                 |
+| package_version  | String                                           | DEPRECATED: use billing_id                                 |
+| uuid             | UUID                                             | VM uuid                                                    |
+| ram              | Number                                           | Amount of memory of the VM                                 |
+| server_uuid      | UUID                                             | Server where the VM lives                                  |
+| state            | String                                           | running, stopped, active or destroyed                      |
+| uuids            | String (comma-separated UUID values)             | List of VM UUIDs to match                                  |
+| tag.key          | String                                           | VM tags, see below                                         |
 
 ### Specifying VM Fields to Return
 
@@ -921,7 +921,7 @@ the same as a GET to /vms/:uuid, however some VM attributes might not be present
 | ----------- | ------ | -------------------------------------------------------------------------------------------------------- |
 | owner_uuid  | UUID   | VM Owner                                                                                                 |
 | networks*   | Array* | List of networks. See 'Specifying Networks for a VM' below.                                              |
-| brand       | String | 'joyent', 'joyent-minimal', 'bhvve' or 'kvm'                                                             |
+| brand       | String | 'joyent', 'joyent-minimal', 'lx', 'bhvve' or 'kvm'                                                       |
 | ram*        | Number | VM RAM. Not required if billing_id is present                                                            |
 | billing_id* | UUID   | SDC Package UUID. Not required if at least ram is present. See 'Provisioning with an SDC Package' below. |
 
diff --git a/lib/common/validation.js b/lib/common/validation.js
index f766a4d..a77fa15 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -1057,6 +1057,13 @@ function validatePackageValues(papi, params, errs, callback) {
             }
         }
 
+        // Check that the package is compatible with this brand
+        if (pkg.brand !== undefined && pkg.brand !== params.brand) {
+            callback(errors.invalidParamErr('brand',
+                'Package is incompatible with specified brand'));
+            return;
+        }
+
         // Allow for manually overriding package params from original
         // provision params
         packageFields.forEach(function (field) {
@@ -1107,7 +1114,8 @@ function validatePackageValues(papi, params, errs, callback) {
         return callback();
     });
 }
-
+// export for tests
+exports._validatePackageValues = validatePackageValues;
 
 /*
  * Validates CreateVm parameters
diff --git a/package.json b/package.json
index c071406..b4a2619 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.3.1",
+  "version": "9.4.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/vms.validate.test.js b/test/vms.validate.test.js
new file mode 100644
index 0000000..4b4152e
--- /dev/null
+++ b/test/vms.validate.test.js
@@ -0,0 +1,151 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var VError = require('verror').VError;
+
+var validatePackageValues =
+    require('../lib/common/validation')._validatePackageValues;
+
+var PACKAGES = {
+    'BHYVE_PACKAGE': {
+        brand: 'bhyve',
+        cpu_cap: 100,
+        max_lwps: 4000,
+        max_physical_memory: 1024,
+        max_swap: 2048,
+        name: 'BHYVE_PACKAGE',
+        quota: 10240,
+        uuid: '62c59acd-456e-49e9-a3b2-bc707928624f',
+        vcpus: 2,
+        zfs_io_priority: 100
+    },
+    'JOYENT_PACKAGE': {
+        cpu_cap: 100,
+        max_lwps: 4000,
+        max_physical_memory: 1024,
+        max_swap: 2048,
+        name: 'JOYENT_PACKAGE',
+        quota: 10240,
+        uuid: 'f76066d9-8a26-46d8-b49b-7db693be5073',
+        zfs_io_priority: 100
+    },
+    'KVM_PACKAGE': {
+        brand: 'kvm',
+        cpu_cap: 100,
+        max_lwps: 4000,
+        max_physical_memory: 1024,
+        max_swap: 2048,
+        name: 'KVM_PACKAGE',
+        quota: 10240,
+        uuid: '592d392b-4792-4e83-8bc7-cee6506f9abb',
+        vcpus: 2,
+        zfs_io_priority: 100
+    }
+};
+
+function DummyPapi() {
+    var self = this;
+
+    var idx;
+    var pkg;
+    var pkgKeys = Object.keys(PACKAGES);
+
+    self.packages = {};
+
+    for (idx = 0; idx < pkgKeys.length; idx++) {
+        pkg = PACKAGES[pkgKeys[idx]];
+        self.packages[pkg.uuid] = pkg;
+    }
+}
+
+DummyPapi.prototype.getPackage = function getPackage(pkgUuid, callback) {
+    var self = this;
+
+    if (self.packages[pkgUuid] === undefined) {
+        callback(new VError({
+            name: 'ResourceNotFoundError'
+        }, 'Package does not exist'));
+        return;
+    }
+
+    callback(null, self.packages[pkgUuid]);
+};
+
+// This tests that our mock "getPackage" works in the case where a package
+// doesn't exist.
+exports.check_missing_package = function check_missing_package(t) {
+    var errs = [];
+
+    validatePackageValues(new DummyPapi(), {
+        billing_id: 'a7dae0a8-933b-4d74-8b41-c81fb4c792d5',
+        brand: 'joyent'
+    }, errs, function _onValidated(err) {
+        t.ok(!err, 'should be no err when package does not exist');
+        t.deepEqual(errs, [ {
+            code: 'Invalid',
+            field: 'billing_id',
+            message: 'Package does not exist'
+        } ], 'should be error in errs when package does not exist');
+        t.done();
+    });
+};
+
+// This is the common case: package has no brand
+exports.check_no_package_brand = function check_no_package_brand(t) {
+    var errs = [];
+
+    validatePackageValues(new DummyPapi(), {
+        billing_id: PACKAGES['JOYENT_PACKAGE'].uuid,
+        brand: 'joyent'
+    }, errs, function _onValidated(err) {
+        t.ok(!err, 'package should be valid when it has no brand');
+        t.deepEqual(errs, [],
+            'should be no errors when package has no brand');
+        t.done();
+    });
+};
+
+// In this case, package.brand matches payload.brand
+exports.check_valid_package_brand = function check_valid_package_brand(t) {
+    var errs = [];
+
+    validatePackageValues(new DummyPapi(), {
+        billing_id: PACKAGES['BHYVE_PACKAGE'].uuid,
+        brand: 'bhyve'
+    }, errs, function _onValidated(err) {
+        t.ok(!err, 'package should be valid when brand matches provision');
+        t.deepEqual(errs, [],
+            'should be no errors when brand matches provision');
+        t.done();
+    });
+};
+
+// In this case, package.brand differs from payload.brand
+exports.check_invalid_package_brand = function check_invalid_package_brand(t) {
+    var errs = [];
+
+    validatePackageValues(new DummyPapi(), {
+        billing_id: PACKAGES['BHYVE_PACKAGE'].uuid,
+        brand: 'kvm'
+    }, errs, function _onValidated(err) {
+        t.ok(err,
+            'package should be invalid when brand does not match provision');
+        t.equal(err.field, 'brand', 'field with problem should be "brand"');
+        t.equal(err.code, 'Invalid', 'error code should be "Invalid"');
+        t.equal(err.message, 'Package is incompatible with specified brand',
+            'error message should indicate package and brand conflict');
+
+        // errs is only populated in rare cases. Not including this one.
+        t.deepEqual(errs, [],
+            'errs should be empty after brand does not match provision');
+
+        t.done();
+    });
+};
