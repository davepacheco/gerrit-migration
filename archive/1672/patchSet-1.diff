From 9e5ca5ec52ca85a5a10ac5f744a726106bb644bc Mon Sep 17 00:00:00 2001
From: Richard Bradley <richard.bradley@joyent.com>
Date: Wed, 1 Feb 2017 14:27:33 +0000
Subject: [PATCH] MANTA-3014 Only distribute manta-nic and xdc-routes SMF
 services if required MANTA-3036 validate.js should verify this_az exists, and
 is accounted for in azs and network definitions

---
 networking/manta-net.sh | 111 +++++++++++++++++++++++++++++++++++++---
 networking/validate.js  |  13 +++++
 2 files changed, 118 insertions(+), 6 deletions(-)

diff --git a/networking/manta-net.sh b/networking/manta-net.sh
index 35aa049..0339616 100755
--- a/networking/manta-net.sh
+++ b/networking/manta-net.sh
@@ -28,6 +28,7 @@ mn_otheraz=
 mn_ufds_adminid=
 mn_out_dir="output.$$"
 mn_manta_vnic="manta0"
+mn_distribute_svcs=
 
 #
 # Variables for passing around return data.
@@ -843,6 +844,90 @@ function resolve_path
 	echo "$absdir/$rbase"
 }
 
+#
+# Fetch our boot-time networking capabilities from SAPI and set
+# mn_distribute_svcs to either true or false depending on the result. This is
+# used to determine if we should distribute the GZ SMF services from
+# "create_smf_route_svc" and "setup_manta_nic", but can be overridden with the
+# "distribute_svcs" property in the config.
+#
+function fetch_distribute_svcs
+{
+	local override sres sapi_metadata fabric_cfg
+	override=$(json distribute_svcs < $mn_config)
+	[[ $? -eq 0 ]] || fatal "failed to get svcs override"
+	sres=$(sdc-sapi /applications?name=sdc | json -H)
+	[[ $? -eq 0 ]] || fatal "unexpected failure reaching sapi"
+	sapi_metadata=$(echo $sres | json -a metadata)
+	[[ $? -eq 0 ]] || fatal "failed to get sapi metadata"
+	[[ -z "$sapi_metadata" ]] && fatal "failed to get sapi metadata"
+	fabric_cfg=$(echo $sapi_metadata | json fabric_cfg)
+	[[ $? -eq 0 ]] || fatal "failed to get get fabric config"
+	if [[ -n "$fabric_cfg" ]]; then
+		mn_distribute_svcs="false"
+	else
+		mn_distribute_svcs="true"
+	fi
+
+	# $override is optional and its value can only be a boolean. This is
+	# enforced by validate.js
+	if [[ -n "$override" ]]; then
+		mn_distribute_svcs=$override
+	fi
+}
+
+#
+# Headnodes are treated differently to other nodes in regards to boot-time
+# networking. Headnodes boot from their USB and can't make use of NAPI when they
+# boot (it's not yet available), so here we determine if the local node (assumed
+# to be a headnode) is found in the config and take further action if necessary.
+#
+function handle_headnode_boottime
+{
+	local uuid nodes
+	uuid=$(sysinfo | json UUID)
+	[[ $? -eq 0 ]] || fatal "failed to fetch sysinfo"
+	[[ -z "$uuid" ]] && "unexpected empty local uuid"
+	nodes=$(json < $mn_config | json manta_nodes | json -a)
+	[[ $? -eq 0 ]] || fatal "failed to list nodes"
+	[[ -z "$nodes" ]] && fatal "found an empty list of nodes"
+	if echo $nodes | grep -q $uuid; then
+		update_usb_boottime_module
+	fi
+}
+
+#
+# Populate the USB with an updated boot-time networking module by using the
+# hn-netfile tool inside the dhcp zone, thus allowing the headnode to make use
+# of the boot-time networking properties defined in NAPI.
+#
+function update_usb_boottime_module
+{
+	local initial_usb_status hn_netfile
+	initial_usb_status=$(sdc-usbkey status)
+	[[ $? -eq 0 ]] || fatal "failed to determine usb key mount status"
+	sdc-usbkey mount >/dev/null || fatal "failed to mount usb key"
+
+	hn_netfile=$(sdc-login -l dhcpd /opt/smartdc/booter/bin/hn-netfile)
+	[[ $? -eq 0 ]] || fatal "failed to get hn netfile"
+	[[ -z "$hn_netfile" ]] && fatal "unexpected empty hn netfile"
+	echo "$hn_netfile" | json --validate -q || fatal "hn netfile" \
+	    "unexpectedly not valid json"
+
+	# this will succeed even if for some reason the usb key isn't mounted
+	# (and the directory structure exists), but we should at least attempt
+	# to protect against other write failures, a major one being a usbkey
+	# with no available space
+	echo "$hn_netfile" > /mnt/usbkey/boot/networking.json ||
+	    fatal "failed to write hn netfile"
+
+	# we'll attempt to leave the usb key in the state that we found it in
+	if [[ "$initial_usb_status" == "unmounted" ]]; then
+		sdc-usbkey unmount >/dev/null || fatal "failed to unmount usb" \
+		    "key"
+	fi
+}
+
 if [[ $# -ne 1 ]]; then
 	fatal "<config.json>"
 fi
@@ -854,6 +939,8 @@ cd "$mn_dir" || fatal "failed to cd to \"$mn_dir\""
 validate_config || fatal "failed to validate config"
 fetch_az || fatal "failed to determine our AZ"
 fetch_ufds_ids || fatal "failed to fetch ufds admin id"
+fetch_distribute_svcs || fatal "failed to determine if GZ SMF services" \
+    "should be distributed"
 handle_tag 'admin' || fatal "failed to handle tag for admin nic_tag"
 handle_tag 'manta' || fatal "failed to handle manta nic_tag"
 handle_tag 'marlin' || fatal "failed to handle marlin nic_tag"
@@ -869,13 +956,25 @@ add_tags 'marlin' 'marlin_nodes' || fatal "failed to add marlin nic tag to CNs"
 
 setup_output_dir || fatal "failed to setup output directory"
 allocate_manta_ips || fatal "failed to allocate ips for manta nics for GZs"
-handle_manta_nics || fatal "failed to create and setup manta nics in GZs"
 
-if [[ -n "$mn_otheraz" ]]; then
-	create_smf_route_svc || fatal \
-	    "failed to create smf routing hack service"
-	distribute_smf_route_svc || fatal \
-	    "failed to distribute smf routing hack service"
+if [[ "$mn_distribute_svcs" == "true" ]]; then
+	handle_manta_nics || fatal "failed to create and setup manta nics" \
+	    "in GZs"
+	if [[ -n "$mn_otheraz" ]]; then
+		create_smf_route_svc || fatal \
+		    "failed to create smf routing hack service"
+		distribute_smf_route_svc || fatal \
+		    "failed to distribute smf routing hack service"
+	fi
+else
+	handle_headnode_boottime || fatal "failed to handle headnode" \
+	    "boot-time networking module"
+	warn "GZ SMF services have not been distributed due to either the" \
+	    "detection of boot-time networking in the datacenter or a" \
+	    "configuration option supplied in $mn_config. a reboot of each" \
+	    "node present in $mn_config is required for their respective GZ" \
+	    "networking components (nics, cross-DC routes) to be" \
+	    "configured/updated"
 fi
 
 exit 0
diff --git a/networking/validate.js b/networking/validate.js
index b749a6a..e1c5ff5 100644
--- a/networking/validate.js
+++ b/networking/validate.js
@@ -75,6 +75,12 @@ function main()
 	if (spec['manta_nodes'].length === 0)
 		fatal('no indexing CNs listed');
 
+	if (!('this_az' in spec))
+		fatal('missing this availability zone');
+
+	if (!(typeof (spec['this_az']) === 'string'))
+		fatal('this availability zone must be a string');
+
 	if (!('azs' in spec))
 		fatal('missing availability zone list');
 
@@ -84,6 +90,10 @@ function main()
 	if (spec['azs'].length === 0)
 		fatal('no azs listed');
 
+	if (spec['azs'].indexOf(spec['this_az']) < 0)
+		fatal('this availability zone missing from ' +
+		    'availability zone list');
+
 	if (!('admin' in spec))
 		fatal('missing admin network information');
 
@@ -138,6 +148,9 @@ function main()
 			fatal('missing information for az ' + az +
 			    'in the marlin block');
 	}
+	if ('distribute_svcs' in spec &&
+	    (typeof (spec['distribute_svcs']) !== 'boolean'))
+		fatal('distribute_svcs can only be a boolean');
 }
 
 main();
-- 
2.21.0

