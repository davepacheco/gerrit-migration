From aae5e1e29018377fdb9e0261f2d6163ea16d15eb Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Mon, 17 Oct 2016 13:40:25 +0200
Subject: [PATCH] TOOLS-1574 sdcadm experimental avail crashes due to missing
 agent image uuids

---
 lib/cli/do_add_new_agent_svcs.js | 90 +++++++++++++++++++++++++-------
 lib/cli/do_update_other.js       | 49 +++++++++++++++++
 2 files changed, 121 insertions(+), 18 deletions(-)

diff --git a/lib/cli/do_add_new_agent_svcs.js b/lib/cli/do_add_new_agent_svcs.js
index 6c17180..4ebcfbb 100644
--- a/lib/cli/do_add_new_agent_svcs.js
+++ b/lib/cli/do_add_new_agent_svcs.js
@@ -5,10 +5,13 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 var vasync = require('vasync');
 
+var fs = require('fs');
+var util = require('util');
+
 var errors = require('../errors');
 
 /*
@@ -58,7 +61,38 @@ function do_add_new_agent_svcs(subcmd, opts, args, cb) {
         agentServices[n].metadata[logLevelKey] = 'info';
     });
 
+
+    // The first time we add agent services to SAPI we'll use the HN image
+    // version to create the service, assuming that's the version installed
+    // everywhere across the whole SDC setup
+    function getAgentImages(callback) {
+        vasync.forEachPipeline({
+            func: function (agent, next) {
+                var name = agent.params.tags.smartdc_role;
+                var imgUUIDPath = util.format(
+                    '/opt/smartdc/agents/lib/node_modules/%s/image_uuid',
+                    name);
+                fs.readFile(imgUUIDPath, {
+                    encoding: 'utf8'
+                }, function (err, data) {
+                    if (err) {
+                        self.sdcadm.log.error({err: err},
+                            'Error reading agent image uuid');
+                        next();
+                        return;
+                    }
+                    agentServices[name].params.image_uuid = data.trim();
+                    next();
+                });
+            },
+            inputs: agentNames.map(function (agent) {
+                return agentServices[agent];
+            })
+        }, callback);
+    }
+
     var newAgentServices = [];
+    var updateAgentServices = [];
     // Used by history:
     var history;
     var changes = [];
@@ -112,17 +146,21 @@ function do_add_new_agent_svcs(subcmd, opts, args, cb) {
                         if (!svcs.length) {
                             newAgentServices.push(agent);
                         }
+                        if (!svcs[0].params.image_uuid) {
+                            agentServices[agent] = svcs[0];
+                            updateAgentServices.push(agent);
+                        }
                         return callback();
                     });
                 },
                 inputs: Object.keys(agentServices)
-            }, function (err) {
-                if (err) {
-                    return next(err);
-                }
-                return next();
-            });
+            }, next);
+        },
+
+        function getAgentImgVersions(_, next) {
+            getAgentImages(next);
         },
+
         function saveChangesToHistory(_, next) {
             newAgentServices.forEach(function (s) {
                 changes.push({
@@ -132,8 +170,18 @@ function do_add_new_agent_svcs(subcmd, opts, args, cb) {
                     },
                     type: 'create-service'
                 });
+            });
 
+            updateAgentServices.forEach(function (s) {
+                changes.push({
+                    service: {
+                        name: s,
+                        type: 'agent'
+                    },
+                    type: 'update-service'
+                });
             });
+
             self.sdcadm.history.saveHistory({
                 changes: changes
             }, function (err, hst) {
@@ -154,19 +202,25 @@ function do_add_new_agent_svcs(subcmd, opts, args, cb) {
                         params: agentServices[agent]
                     }, 'Adding new agent service');
                     self.sdcadm.sapi.createService(agent, app.uuid,
-                        agentServices[agent], function (err) {
-                            if (err) {
-                                return callback(err);
-                            }
-                            return callback();
-                    });
+                        agentServices[agent], callback);
                 }
-            }, function (err) {
-                if (err) {
-                    return next(err);
+            }, next);
+        },
+
+        function updateAgentsServices(_, next) {
+            vasync.forEachParallel({
+                inputs: updateAgentServices,
+                func: function updateAgentSvc(agent, callback) {
+                    progress('Updating service for agent \'%s\'', agent);
+                    self.log.trace({
+                        service: agent,
+                        params: agentServices[agent]
+                    }, 'Updating agent service');
+                    self.sdcadm.sapi.updateService(agentServices[agent].uuid, {
+                        params: agentServices[agent].params
+                    }, callback);
                 }
-                return next();
-            });
+            }, next);
         }
     ]}, function (err) {
         progress('Add new agent services finished (elapsed %ds).',
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index d8e696c..6151c53 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -700,6 +700,55 @@ function do_update_other(subcmd, opts, args, cb) {
                 }
                 return next();
             });
+        },
+
+        function updateAgentsImages(ctx, next) {
+            var svcsToUpdate = [];
+            ctx.svcs.forEach(function (svc) {
+                if (svc.type === 'agent' && svc.params &&
+                        !svc.params.image_uuid) {
+                    svcsToUpdate.push(svc);
+                }
+            });
+
+            function updateAgentImage(agent, callback) {
+                vasync.pipeline({
+                    funcs: [
+                        function readAgentImg(_, _cb) {
+                            var name = agent.name;
+                            var imgUUIDPath = util.format(
+                                '/opt/smartdc/agents/lib/' +
+                                'node_modules/%s/image_uuid',
+                                name);
+                            fs.readFile(imgUUIDPath, {
+                                encoding: 'utf8'
+                            }, function (err, data) {
+                                if (err) {
+                                    self.sdcadm.log.error({err: err},
+                                        'Error reading agent image uuid');
+                                    _cb(err);
+                                    return;
+                                }
+                                agent.params.image_uuid = data.trim();
+                                _cb();
+                            });
+
+                        },
+                        function updateAgentImg(_, _cb) {
+                            progress('Updating service for agent \'%s\'',
+                                    agent.name);
+                            updateService(agent.uuid, {
+                                params: agent.params
+                            }, _cb);
+                        }
+                    ]
+                }, callback);
+            }
+
+            vasync.forEachParallel({
+                inputs: svcsToUpdate,
+                func: updateAgentImage
+            }, next);
         }
     ]}, function (err) {
         if (!history) {
-- 
2.21.0

