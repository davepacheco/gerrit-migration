From 5371f2c957939c331793d7b5f30cb8d4c89b6feb Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Wed, 12 Dec 2018 21:19:27 +0000
Subject: [PATCH] TRITON-831 Create common module for triton and manta
 services/agents to determine networks Reviewed by: Trent Mick
 <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 .eslintrc                            |  19 +
 .gitignore                           |   5 +
 CHANGES.md                           |   5 +
 Makefile                             | 110 ++++++
 README.md                            |  91 +++++
 lib/index.js                         | 148 ++++++++
 package.json                         |  28 ++
 test/unit/main.test.js               | 155 ++++++++
 test/unit/testdata.json              | 510 +++++++++++++++++++++++++++
 tools/mk/Makefile.defs               | 105 ++++++
 tools/mk/Makefile.deps               |  87 +++++
 tools/mk/Makefile.node_modules.defs  |  68 ++++
 tools/mk/Makefile.node_modules.targ  |  31 ++
 tools/mk/Makefile.node_prebuilt.defs | 159 +++++++++
 tools/mk/Makefile.node_prebuilt.targ |  42 +++
 tools/mk/Makefile.targ               | 348 ++++++++++++++++++
 tools/pre-commit.sh                  |  14 +
 17 files changed, 1925 insertions(+)
 create mode 100644 .eslintrc
 create mode 100644 .gitignore
 create mode 100644 CHANGES.md
 create mode 100644 Makefile
 create mode 100644 lib/index.js
 create mode 100644 package.json
 create mode 100644 test/unit/main.test.js
 create mode 100644 test/unit/testdata.json
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.deps
 create mode 100644 tools/mk/Makefile.node_modules.defs
 create mode 100644 tools/mk/Makefile.node_modules.targ
 create mode 100644 tools/mk/Makefile.node_prebuilt.defs
 create mode 100644 tools/mk/Makefile.node_prebuilt.targ
 create mode 100644 tools/mk/Makefile.targ
 create mode 100755 tools/pre-commit.sh

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..ccc6f09
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,19 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+    }
+}
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..04bee30
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+/build
+/make_stamps
+/node_modules
+/npm-debug.log
+/tmp
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..b7a67e9
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,5 @@
+# node-triton-netconfig Changelog
+
+## 1.0.0
+
+First release.
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..60b8201
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+
+#
+# Tools
+#
+
+TAP := ./node_modules/.bin/tap
+
+#
+# Files
+#
+
+JS_FILES := $(shell find lib -name '*.js')
+ESLINT_FILES := $(JS_FILES)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_VERSION =	v4.6.1
+	NODE_PREBUILT_TAG =	zone
+	NODE_PREBUILT_IMAGE =	18b094b0-eb01-11e5-80c1-175dac7ddf02
+endif
+
+include ./tools/mk/Makefile.defs
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.defs
+else
+	NODE := node
+	NPM := $(shell which npm)
+	NPM_EXEC=$(NPM)
+endif
+include ./tools/mk/Makefile.node_modules.defs
+
+#
+# Variables
+#
+
+TEST_UNIT_JOBS ?= 4
+BUILD = $(TOP)/build
+CLEAN_FILES += $(BUILD)
+
+#
+# Targets
+#
+.PHONY: all
+all: $(STAMP_NODE_MODULES)
+
+$(TAP): $(STAMP_NODE_MODULES)
+
+$(BUILD):
+	mkdir $@
+
+.PHONY: test-unit
+test-unit: | $(TAP) $(STAMP_NODE_MODULES) $(BUILD)
+	$(TAP) --jobs=$(TEST_UNIT_JOBS) --output-file=$(BUILD)/test.unit.tap test/unit/**/*.test.js
+
+.PHONY: test-coverage-unit
+test-coverage-unit: | $(TAP) $(STAMP_NODE_MODULES) $(BUILD)
+	$(TAP) --jobs=$(TEST_UNIT_JOBS) --output-file=$(BUILD)/test.unit.tap --coverage \
+	test/unit/**/*.test.js
+
+check:: check-version
+
+# Ensure CHANGES.md and package.json have the same version.
+.PHONY: check-version
+check-version:
+	@echo version is: $(shell cat package.json | json version)
+	[[ `cat package.json | json version` == `grep '^## ' CHANGES.md | head -2 | tail -1 | awk '{print $$2}'` ]]
+
+.PHONY: fmt
+fmt:: | $(ESLINT)
+	$(ESLINT) --fix $(ESLINT_FILES)
+
+.PHONY: cutarelease
+cutarelease: check
+	[[ -z `git status --short` ]]  # If this fails, the working dir is dirty.
+	@which json 2>/dev/null 1>/dev/null && \
+	    ver=$(shell json -f package.json version) && \
+	    name=$(shell json -f package.json name) && \
+	    publishedVer=$(shell npm view -j $(shell json -f package.json name)@$(shell json -f package.json version) version 2>/dev/null) && \
+	    if [[ -n "$$publishedVer" ]]; then \
+		echo "error: $$name@$$ver is already published to npm"; \
+		exit 1; \
+	    fi && \
+	    echo "** Are you sure you want to tag and publish $$name@$$ver to npm?" && \
+	    echo "** Enter to continue, Ctrl+C to abort." && \
+	    read
+	ver=$(shell cat package.json | json version) && \
+	    date=$(shell date -u "+%Y-%m-%d") && \
+	    git tag -a "v$$ver" -m "version $$ver ($$date)" && \
+	    git push --tags origin && \
+	    npm publish
+
+.PHONY: git-hooks
+git-hooks:
+	ln -sf ../../tools/pre-commit.sh .git/hooks/pre-commit
+
+include ./tools/mk/Makefile.deps
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+endif
+include ./tools/mk/Makefile.targ
+include ./tools/mk/Makefile.node_modules.targ
diff --git a/README.md b/README.md
index 287c114..917b332 100644
--- a/README.md
+++ b/README.md
@@ -7,3 +7,94 @@ guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
 *Triton does not use GitHub PRs* -- and general documentation at the main
 [Triton project](https://github.com/joyent/triton) page.
 
+## Install
+
+```
+npm install triton-netconfig ## TBD
+```
+
+## Usage
+
+* `adminNicFromSysinfo(<CN Sysinfo>)`: return the admin NIC object from the sysinfo JSON object.
+* `adminIpFromSysinfo(<CN Sysinfo>)`: return admin IP address from sysinfo JSON object.
+* `adminIpFromVmMetadata(<VM Metadata Object>)`: return the admin IP address from VM Metadta JSON object.
+* `externalIpFromVmMetadata(<VM Metadata Object>)`: return the external IP address from VM Metadta JSON object.
+* `mantaIpFromVmMetadata(<VM Metadata Object>)`: return the manta IP address from VM Metadta JSON object.
+* `adminMacFromVmMetadata(<VM Metadata Object>)`: return the admin MAC address from VM Metadta JSON object.
+* `isNicAdmin(<NIC Ojbect>)`: return `true` if the NIC is an admin NIC, and `false` otherwise.
+* `isNicExternal(<NIC Ojbect>)`: return `true` if the NIC is an external NIC, and `false` otherwise.
+* `isNetAdmin(<NAPI Net Ojbect>)`: return `true` if the network is an admin network, and `false` otherwise.
+* `isNetExternal(<NAPI Net Ojbect>)`: return `true` if the network is an external network, and `false` otherwise.
+* `isNetInternal(<NAPI Net Ojbect>)`: return `true` if the network is an internal network, and `false` otherwise.
+
+## Example
+
+```
+var netconf = require('triton-netconfig');
+
+var serverOpts = {
+    extras: 'sysinfo,agents'
+};
+
+cnapi.listServers(serverOpts, function (serversErr, servers) {
+    if (serversErr) {
+        next(new errors.SDCClientError(serversErr, 'cnapi'));
+        return;
+    }
+    for (var i = 0; i < servers.length; i++) {
+        var server = servers[i];
+
+        if (!server.sysinfo) {
+            serverIps[server.uuid] = 'unknown';
+            continue;
+        }
+
+        serverIps[server.uuid] = netconf.adminIpFromSysinfo(server.sysinfo);
+    }
+});
+```
+
+## Development
+
+The following sections are about developing this module.
+
+### Testing
+
+To run all of the unit tests:
+
+    make test-unit
+
+Optional coverage information is generated by:
+
+    make test-coverage-unit
+
+
+### Commiting
+
+Before commit, ensure that the following passes:
+
+    make fmt check
+
+You can setup a local git pre-commit hook that'll do that by running
+
+    make git-hooks
+
+Also see the note at the top that https://cr.joyent.us is used for code review
+for this repo.
+
+
+### Releasing
+
+Changes with possible user impact should:
+
+1. Add a note to the [changelog](./CHANGES.md).
+2. Bump the package version appropriately (major for breaking changes, minor
+   for new features, patch for bug fixes).
+3. Once merged to master, the new version should be tagged and published to npm
+   via:
+
+        make cutarelease
+
+   To list to npm accounts that have publish access:
+
+        npm owner ls $packageName
diff --git a/lib/index.js b/lib/index.js
new file mode 100644
index 0000000..f9a8686
--- /dev/null
+++ b/lib/index.js
@@ -0,0 +1,148 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+// ---- Internal
+
+var RACK_RE = '(_rack_[A-Z0-9_-]+)?$';
+var ADMIN_NAME = 'admin';
+var MANTA_NAME = 'manta';
+var EXTERNAL_NAME = 'external';
+var INTERNAL_NAME = 'internal';
+
+/*
+ * TODO: prefer RFD 117 traits
+ */
+function _fromVmMetadataCommon(vm, what, network) {
+    var re = new RegExp('^' + network + RACK_RE, 'i');
+    var nics = vm.nics;
+
+    for (var i = 0; i < nics.length; i++) {
+        var nictag = nics[i].nic_tag;
+        if (re.test(nictag)) {
+            return nics[i][what];
+        }
+    }
+
+    return null;
+}
+
+/*
+ * TODO: prefer RFD 117 traits
+ */
+function _isNetNicCommon(nic, network) {
+    var re = new RegExp('^' + network + RACK_RE, 'i');
+
+    return re.test(nic.nic_tag);
+}
+
+// ---- Exports
+
+/*
+ * Returns the NAPI NIC object for the admin NIC.
+ *
+ * for config-agent process GZNicTags?
+ */
+function adminNicFromSysinfo(sysinfo) {
+    var interfaces;
+    var admin_tag = ADMIN_NAME;
+
+    if (sysinfo['Admin NIC Tag']) {
+        admin_tag = sysinfo['Admin NIC Tag'];
+    }
+
+    interfaces = sysinfo['Network Interfaces'];
+
+    for (var iface in interfaces) {
+        if (!interfaces.hasOwnProperty(iface)) {
+            continue;
+        }
+
+        var nic = interfaces[iface]['NIC Names'];
+        if (nic.indexOf(admin_tag) !== -1) {
+            return interfaces[iface];
+        }
+    }
+
+    return null;
+}
+
+/*
+ * Given a CN's sysinfo in JSON format return the admin IP.
+ */
+function adminIpFromSysinfo(sysinfo) {
+    if (sysinfo['Admin IP']) {
+        return sysinfo['Admin IP'];
+    }
+
+    var nic = adminNicFromSysinfo(sysinfo);
+
+    return nic.ip4addr;
+}
+
+// ---- From VM Metadata
+
+/*
+ * Currently only return the singleton 'ip' field.  In the future it may be
+ * beneficial to return all of the nics 'ips'.
+ */
+function adminIpFromVmMetadata(vm) {
+    return _fromVmMetadataCommon(vm, 'ip', ADMIN_NAME);
+}
+
+function externalIpFromVmMetadata(vm) {
+    return _fromVmMetadataCommon(vm, 'ip', EXTERNAL_NAME);
+}
+
+// XXX: Unused?
+function mantaIpFromVmMetadata(vm) {
+    return _fromVmMetadataCommon(vm, 'ip', MANTA_NAME);
+}
+
+function adminMacFromVmMetadata(vm) {
+    return _fromVmMetadataCommon(vm, 'mac', ADMIN_NAME);
+}
+
+// ---- isNic
+
+function isNicAdmin(nic) {
+    return _isNetNicCommon(nic, ADMIN_NAME);
+}
+
+function isNicExternal(nic) {
+    return _isNetNicCommon(nic, EXTERNAL_NAME);
+}
+
+// ---- isNet
+
+function isNetAdmin(net) {
+    return _isNetNicCommon(net, ADMIN_NAME);
+}
+
+function isNetExternal(net) {
+    return _isNetNicCommon(net, EXTERNAL_NAME);
+}
+
+function isNetInternal(net) {
+    return _isNetNicCommon(net, INTERNAL_NAME);
+}
+
+module.exports = {
+    adminNicFromSysinfo: adminNicFromSysinfo,
+    adminIpFromSysinfo: adminIpFromSysinfo,
+    adminIpFromVmMetadata: adminIpFromVmMetadata,
+    externalIpFromVmMetadata: externalIpFromVmMetadata,
+    mantaIpFromVmMetadata: mantaIpFromVmMetadata,
+    adminMacFromVmMetadata: adminMacFromVmMetadata,
+    isNicAdmin: isNicAdmin,
+    isNicExternal: isNicExternal,
+    isNetAdmin: isNetAdmin,
+    isNetExternal: isNetExternal,
+    isNetInternal: isNetInternal
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..157d014
--- /dev/null
+++ b/package.json
@@ -0,0 +1,28 @@
+{
+  "name": "triton-netconfig",
+  "version": "1.0.0",
+  "description": "Common methods for managing Triton network configuration",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/joyent/node-triton-netconfig.git"
+  },
+  "keywords": [
+    "joyent",
+    "triton"
+  ],
+  "author": "Joyent (joyent.com)",
+  "license": "MPL-2.0",
+  "engines": ["node >=4.0.0"],
+  "homepage": "https://github.com/joyent/node-triton-netconfig",
+  "main": "./lib",
+  "files": ["lib"],
+  "devDependencies": {
+    "eslint": "4.13.1",
+    "eslint-config-prettier": "^2.9.0",
+    "eslint-plugin-joyent": "~2.0.0",
+    "eslint-plugin-prettier": "^2.6.0",
+    "jsprim": "^1.4.1",
+    "prettier": "^1.11.1",
+    "tap": "^12.0.1"
+  }
+}
diff --git a/test/unit/main.test.js b/test/unit/main.test.js
new file mode 100644
index 0000000..c551369
--- /dev/null
+++ b/test/unit/main.test.js
@@ -0,0 +1,155 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+'use strict';
+
+const tap = require('tap');
+const data = require('./testdata.json');
+const netconf = require('../../lib/index');
+const jsprim = require('jsprim');
+
+const VMS = data['vms'];
+const NETS = data['nets'];
+const SYSINFO = data['sysinfo'];
+
+tap.test('nets', function (tt) {
+    tt.test('main', function (t) {
+        const admin_net = NETS['admin_mainnet'];
+        const external_net = NETS['external_mainnet'];
+        t.ok(netconf.isNetAdmin(admin_net));
+        t.notOk(netconf.isNetExternal(admin_net));
+        t.ok(netconf.isNetExternal(external_net));
+        t.notOk(netconf.isNetAdmin(external_net));
+        t.end();
+    });
+
+    tt.test('rack', function (t) {
+        const admin_net = NETS['admin_racknet'];
+        const external_net = NETS['external_racknet'];
+        t.ok(netconf.isNetAdmin(admin_net));
+        t.notOk(netconf.isNetExternal(admin_net));
+        t.ok(netconf.isNetExternal(external_net));
+        t.notOk(netconf.isNetAdmin(external_net));
+        t.end();
+    });
+    tt.end();
+});
+
+tap.test('vms', function (tt)  {
+    tt.test('main',function (t)  {
+        const main_vm = VMS['main'];
+        const external_ip = main_vm['nics'][0]['ip'];
+        const manta_ip = main_vm['nics'][1]['ip'];
+        const admin_ip = main_vm['nics'][2]['ip'];
+        const admin_mac = main_vm['nics'][2]['mac'];
+
+        t.equal(netconf.externalIpFromVmMetadata(main_vm), external_ip);
+        t.equal(netconf.mantaIpFromVmMetadata(main_vm), manta_ip);
+        t.equal(netconf.adminIpFromVmMetadata(main_vm), admin_ip);
+        t.equal(netconf.adminMacFromVmMetadata(main_vm), admin_mac);
+
+        t.end();
+    });
+
+    tt.test('rack',function (t)  {
+        const rack_vm = VMS['rack'];
+        const external_ip = rack_vm['nics'][0]['ip'];
+        const manta_ip = rack_vm['nics'][1]['ip'];
+        const admin_ip = rack_vm['nics'][2]['ip'];
+        const admin_mac = rack_vm['nics'][2]['mac'];
+
+        t.equal(netconf.externalIpFromVmMetadata(rack_vm), external_ip);
+        t.equal(netconf.mantaIpFromVmMetadata(rack_vm), manta_ip);
+        t.equal(netconf.adminIpFromVmMetadata(rack_vm), admin_ip);
+        t.equal(netconf.adminMacFromVmMetadata(rack_vm), admin_mac);
+
+        t.end();
+    });
+    tt.end();
+});
+
+tap.test('nics', function (tt)  {
+    tt.test('main',function (t)  {
+        const main_vm = VMS['rack'];
+        const external_nic = main_vm['nics'][0];
+        const manta_nic = main_vm['nics'][1];
+        const admin_nic = main_vm['nics'][2];
+
+        t.ok(netconf.isNicAdmin(admin_nic));
+        t.ok(netconf.isNicExternal(external_nic));
+
+        t.notOk(netconf.isNicExternal(manta_nic));
+        t.notOk(netconf.isNicAdmin(external_nic));
+
+        t.end();
+    });
+    tt.test('rack',function (t)  {
+        const rack_vm = VMS['rack'];
+        const external_nic = rack_vm['nics'][0];
+        const manta_nic = rack_vm['nics'][1];
+        const admin_nic = rack_vm['nics'][2];
+
+        t.ok(netconf.isNicAdmin(admin_nic));
+        t.ok(netconf.isNicExternal(external_nic));
+
+        t.notOk(netconf.isNicExternal(manta_nic));
+        t.notOk(netconf.isNicAdmin(external_nic));
+
+        t.end();
+    });
+    tt.end();
+});
+
+tap.test('sysinfo',function (tt)  {
+    tt.test('main',function (t)  {
+        const sysinfo = SYSINFO['main'];
+        const admin_if = sysinfo['Network Interfaces']['vioif0']; 
+        const admin_ip = admin_if['ip4addr'];
+        const admin_mac = admin_if['MAC Address'];
+        const admin_tags = admin_if['NIC Names'];
+
+        var no_admin_ip = jsprim.deepCopy(sysinfo);
+        delete no_admin_ip['Admin IP'];
+
+        var no_admin_tag = jsprim.deepCopy(sysinfo);
+        delete no_admin_tag['Admin NIC Tag'];
+
+        t.equal(sysinfo['Admin IP'], admin_ip);
+        t.ok(admin_tags.indexOf(sysinfo['Admin NIC Tag']) !== -1);
+
+        t.equal(netconf.adminIpFromSysinfo(sysinfo), admin_ip);
+        t.equal(netconf.adminIpFromSysinfo(no_admin_ip), admin_ip);
+        t.equal(netconf.adminIpFromSysinfo(no_admin_tag), admin_ip);
+
+        t.end();
+    });
+    tt.test('rack',function (t)  {
+        const sysinfo = SYSINFO['rack'];
+        const admin_if = sysinfo['Network Interfaces']['vioif0']; 
+        const admin_ip = admin_if['ip4addr'];
+        const admin_mac = admin_if['MAC Address'];
+        const admin_tags = admin_if['NIC Names'];
+
+        var no_admin_ip = jsprim.deepCopy(sysinfo);
+        delete no_admin_ip['Admin IP'];
+
+        var no_admin_tag = jsprim.deepCopy(sysinfo);
+        delete no_admin_tag['Admin NIC Tag'];
+
+        t.equal(sysinfo['Admin IP'], admin_ip);
+        t.ok(admin_tags.indexOf(sysinfo['Admin NIC Tag']) !== -1);
+
+        t.equal(netconf.adminIpFromSysinfo(sysinfo), admin_ip);
+        t.equal(netconf.adminIpFromSysinfo(no_admin_ip), admin_ip);
+        t.equal(netconf.adminIpFromSysinfo(no_admin_tag), admin_ip);
+
+        t.end();
+    });
+    tt.end();
+});
diff --git a/test/unit/testdata.json b/test/unit/testdata.json
new file mode 100644
index 0000000..f16d158
--- /dev/null
+++ b/test/unit/testdata.json
@@ -0,0 +1,510 @@
+{
+    "vms": {
+        "main": {
+            "uuid": "a9396198-f852-4b12-893d-ccdafa13ef0f",
+            "alias": "loadbalancer.east.joyent.us-a9396198",
+            "autoboot": true,
+            "brand": "joyent-minimal",
+            "billing_id": "00000000-0000-0000-0000-000000000000",
+            "cpu_cap": null,
+            "cpu_shares": 4,
+            "create_timestamp": "2018-11-16T16:16:28.767Z",
+            "customer_metadata": {
+              "SAPI_URL": "http://sapi.ruidc.joyent.us",
+              "user-script": "<snip>"
+            },
+            "datasets": [
+              "zones/a9396198-f852-4b12-893d-ccdafa13ef0f/data"
+            ],
+            "destroyed": null,
+            "firewall_enabled": false,
+            "internal_metadata": {},
+            "last_modified": "2018-11-20T21:48:59.000Z",
+            "limit_priv": "default",
+            "max_locked_memory": 512,
+            "max_lwps": 2000,
+            "max_physical_memory": 512,
+            "max_swap": 1024,
+            "nics": [
+              {
+                "interface": "net0",
+                "mac": "90:b8:d0:91:bd:90",
+                "vlan_id": 0,
+                "nic_tag": "external",
+                "gateway": "172.26.19.1",
+                "gateways": [
+                  "172.26.19.1"
+                ],
+                "netmask": "255.255.255.0",
+                "ip": "172.26.19.224",
+                "ips": [
+                  "172.26.19.224/24"
+                ],
+                "network_uuid": "2c606372-fa8d-452d-a93c-e4e98b98bda5",
+                "mtu": 1500,
+                "primary": true
+              },
+              {
+                "interface": "net1",
+                "mac": "90:b8:d0:f3:e4:25",
+                "vlan_id": 0,
+                "nic_tag": "manta",
+                "netmask": "255.255.255.0",
+                "ip": "10.77.77.16",
+                "ips": [
+                  "10.77.77.16/24"
+                ],
+                "network_uuid": "72437ec5-0215-4e59-92a9-da5b570ec4b3",
+                "mtu": 1500
+              },
+              {
+                "interface": "net2",
+                "mac": "90:b8:d0:08:ad:c8",
+                "vlan_id": 0,
+                "nic_tag": "admin",
+                "netmask": "255.255.255.0",
+                "ip": "10.99.99.47",
+                "ips": [
+                  "10.99.99.47/24"
+                ],
+                "network_uuid": "0a4d08a1-8e7f-48aa-9a68-91bdf2edd93e",
+                "mtu": 1500
+              }
+            ],
+            "owner_uuid": "58a49944-2b28-65ed-8992-dfa301152a67",
+            "platform_buildstamp": "20181012T154011Z",
+            "quota": 10,
+            "ram": 512,
+            "resolvers": [
+              "8.8.8.8",
+              "8.8.4.4",
+              "10.99.99.5"
+            ],
+            "server_uuid": "46561560-e276-e3b4-e7ec-f5e6f1c62e4c",
+            "snapshots": [],
+            "state": "running",
+            "tags": {
+              "manta_role": "loadbalancer"
+            },
+            "zfs_filesystem": "zones/a9396198-f852-4b12-893d-ccdafa13ef0f",
+            "zfs_io_priority": 100,
+            "zone_state": "running",
+            "zonepath": "/zones/a9396198-f852-4b12-893d-ccdafa13ef0f",
+            "zpool": "zones",
+            "boot_timestamp": "2018-11-20T22:25:26.000Z",
+            "dns_domain": "local",
+            "pid": 9495,
+            "tmpfs": 512,
+            "image_uuid": "cc31a90e-e8ef-11e8-9dd3-3779db84c64d"
+        },
+        "rack": {
+            "uuid": "cff3002a-f329-4aae-bee0-03743a7aa716",
+            "alias": "loadbalancer.east.joyent.us-cff3002a",
+            "autoboot": true,
+            "brand": "joyent-minimal",
+            "billing_id": "00000000-0000-0000-0000-000000000000",
+            "cpu_cap": null,
+            "cpu_shares": 4,
+            "create_timestamp": "2018-12-10T18:49:46.388Z",
+            "customer_metadata": {
+              "SAPI_URL": "http://sapi.ruidc.joyent.us",
+              "user-script": "<snip>"
+            },
+            "datasets": [
+              "zones/cff3002a-f329-4aae-bee0-03743a7aa716/data"
+            ],
+            "destroyed": null,
+            "firewall_enabled": false,
+            "internal_metadata": {},
+            "last_modified": "2018-12-10T18:50:37.000Z",
+            "limit_priv": "default",
+            "max_locked_memory": 512,
+            "max_lwps": 2000,
+            "max_physical_memory": 512,
+            "max_swap": 1024,
+            "nics": [
+              {
+                "interface": "net0",
+                "mac": "90:b8:d0:e4:4d:8b",
+                "vlan_id": 0,
+                "nic_tag": "external_rack_e50",
+                "gateway": "172.26.19.1",
+                "gateways": [
+                  "172.26.19.1"
+                ],
+                "netmask": "255.255.255.0",
+                "ip": "172.26.19.246",
+                "ips": [
+                  "172.26.19.246/24"
+                ],
+                "network_uuid": "f769454f-31f1-4e4b-b191-c2876b6814bb",
+                "mtu": 1500,
+                "primary": true
+              },
+              {
+                "interface": "net1",
+                "mac": "90:b8:d0:39:bc:14",
+                "vlan_id": 0,
+                "nic_tag": "manta_rack_e50",
+                "netmask": "255.255.255.0",
+                "ip": "10.111.111.6",
+                "ips": [
+                  "10.111.111.6/24"
+                ],
+                "network_uuid": "84fa6540-1218-41e8-ac19-06181c258495",
+                "mtu": 1500
+              },
+              {
+                "interface": "net2",
+                "mac": "90:b8:d0:13:af:09",
+                "vlan_id": 0,
+                "nic_tag": "admin_rack_e50",
+                "netmask": "255.255.255.0",
+                "ip": "10.222.222.13",
+                "ips": [
+                  "10.222.222.13/24"
+                ],
+                "network_uuid": "ef5461db-7a70-4920-b6fb-e5c4b9918de2",
+                "mtu": 1500
+              }
+            ],
+            "owner_uuid": "58a49944-2b28-65ed-8992-dfa301152a67",
+            "platform_buildstamp": "20181012T154011Z",
+            "quota": 10,
+            "ram": 512,
+            "resolvers": [
+              "8.8.8.8",
+              "8.8.4.4",
+              "10.99.99.5"
+            ],
+            "server_uuid": "02bfb3e3-cc8f-495a-a7d0-cd3b0186ed2e",
+            "snapshots": [],
+            "state": "running",
+            "tags": {
+              "manta_role": "loadbalancer"
+            },
+            "zfs_filesystem": "zones/cff3002a-f329-4aae-bee0-03743a7aa716",
+            "zfs_io_priority": 100,
+            "zone_state": "running",
+            "zonepath": "/zones/cff3002a-f329-4aae-bee0-03743a7aa716",
+            "zpool": "zones",
+            "boot_timestamp": "2018-12-10T18:50:04.000Z",
+            "dns_domain": "local",
+            "pid": 35709,
+            "tmpfs": 512,
+            "image_uuid": "cc31a90e-e8ef-11e8-9dd3-3779db84c64d"
+        }
+    },
+    "sysinfo": {
+        "rack": {
+            "Live Image": "20181012T154011Z",
+            "System Type": "SunOS",
+            "Boot Time": "1543434558",
+            "Datacenter Name": "ruidc",
+            "SDC Version": "7.0",
+            "Manufacturer": "Joyent",
+            "Product": "SmartDC HVM",
+            "Serial Number": "02bfb3e3-cc8f-495a-a7d0-cd3b0186ed2e",
+            "SKU Number": "001",
+            "HW Version": "7.20181112T065108Z",
+            "HW Family": "Virtual Machine",
+            "Setup": "true",
+            "VM Capable": true,
+            "Bhyve Capable": false,
+            "Bhyve Max Vcpus": 0,
+            "HVM API": false,
+            "CPU Type": "Unknown",
+            "CPU Virtualization": "none",
+            "CPU Physical Cores": 0,
+            "Admin NIC Tag": "admin_rack_e50",
+            "Admin IP": "10.222.222.10",
+            "UUID": "02bfb3e3-cc8f-495a-a7d0-cd3b0186ed2e",
+            "Hostname": "rui1",
+            "CPU Total Cores": 4,
+            "MiB of Memory": "8191",
+            "Zpool": "zones",
+            "Zpool Disks": "c3t0d0",
+            "Zpool Profile": "striped",
+            "Zpool Creation": 1542055707,
+            "Zpool Size in GiB": 188,
+            "Disks": {
+              "c2t0d0": {"Size in GB": 6},
+              "c3t0d0": {"Size in GB": 209}
+            },
+            "Boot Parameters": {
+              "module_name_0": "networking.json",
+              "hostname": "rui1",
+              "rabbitmq": "guest:guest:10.99.99.14:5672",
+              "rabbitmq_dns": "guest:guest:rabbitmq.ruidc.joyent.us:5672",
+              "admin_rack_e50_nic": "52:9d:88:56:09:c3",
+              "manta_rack_e50_nic": "52:11:49:5a:74:76",
+              "external_rack_e50_nic": "d2:35:42:95:cb:f6",
+              "console": "ttyb",
+              "boot_args": "",
+              "bootargs": ""
+            },
+            "SDC Agents": [
+              {
+                "name": "amon-agent",
+                "version": "1.0.1"
+              },
+              {
+                "name": "amon-relay",
+                "version": "1.0.1"
+              },
+              {
+                "name": "agents_core",
+                "version": "2.1.0"
+              },
+              {
+                "name": "cainstsvc",
+                "version": "0.0.3vrelease-20181122-20181121T194844Z-g92307e6"
+              },
+              {
+                "name": "smartlogin",
+                "version": "0.2.1-release-20181122-20181121T194443Z-gd6f0708"
+              },
+              {
+                "name": "config-agent",
+                "version": "1.8.1"
+              },
+              {
+                "name": "cabase",
+                "version": "1.0.3vrelease-20181122-20181121T194844Z-g92307e6"
+              },
+              {
+                "name": "marlin",
+                "version": "0.0.3"
+              },
+              {
+                "name": "cmon-agent",
+                "version": "1.10.0"
+              },
+              {
+                "name": "cn-agent",
+                "version": "2.3.2"
+              },
+              {
+                "name": "vm-agent",
+                "version": "1.8.0"
+              },
+              {
+                "name": "net-agent",
+                "version": "2.2.1"
+              },
+              {
+                "name": "firewaller",
+                "version": "1.5.1"
+              },
+              {
+                "name": "hagfish-watcher",
+                "version": "1.0.0-release-20181122-20181121T212704Z-g3caaea7"
+              }
+            ],
+            "Network Interfaces": {
+              "vioif0": {"MAC Address": "52:9d:88:56:09:c3", "ip4addr": "10.222.222.10", "Link Status": "up", "NIC Names": ["admin_rack_e50"]},
+              "vioif1": {"MAC Address": "52:11:49:5a:74:76", "ip4addr": "", "Link Status": "up", "NIC Names": ["manta_rack_e50"]},
+              "vioif2": {"MAC Address": "d2:35:42:95:cb:f6", "ip4addr": "", "Link Status": "up", "NIC Names": ["external_rack_e50"]},
+              "vioif3": {"MAC Address": "f2:9c:b6:e2:74:70", "ip4addr": "", "Link Status": "up", "NIC Names": []}
+            },
+            "Virtual Network Interfaces": {
+            },
+            "Link Aggregations": {
+            }
+        },
+        "main": {
+            "Live Image": "20181012T154011Z",
+            "System Type": "SunOS",
+            "Boot Time": "1542752612",
+            "Datacenter Name": "ruidc",
+            "SDC Version": "7.0",
+            "Manufacturer": "Joyent",
+            "Product": "SmartDC HVM",
+            "Serial Number": "46561560-e276-e3b4-e7ec-f5e6f1c62e4c",
+            "SKU Number": "001",
+            "HW Version": "7.20181112T065108Z",
+            "HW Family": "Virtual Machine",
+            "Setup": "true",
+            "VM Capable": true,
+            "Bhyve Capable": false,
+            "Bhyve Max Vcpus": 0,
+            "HVM API": false,
+            "CPU Type": "Unknown",
+            "CPU Virtualization": "none",
+            "CPU Physical Cores": 0,
+            "Admin NIC Tag": "admin",
+            "Admin IP": "10.99.99.1",
+            "UUID": "46561560-e276-e3b4-e7ec-f5e6f1c62e4c",
+            "Hostname": "headnode",
+            "CPU Total Cores": 8,
+            "MiB of Memory": "32767",
+            "Zpool": "zones",
+            "Zpool Disks": "c3t0d0",
+            "Zpool Profile": "striped",
+            "Zpool Creation": 1537380680,
+            "Zpool Size in GiB": 472,
+            "Disks": {
+              "c1d0": {"Size in GB": 8},
+              "c3t0d0": {"Size in GB": 524}
+            },
+            "Boot Parameters": {
+              "console": "ttya",
+              "headnode": "true",
+              "disable_uhci": "true",
+              "boot_args": "",
+              "bootargs": ""
+            },
+            "SDC Agents": [
+              {
+                "name": "cn-agent",
+                "version": "2.3.2"
+              },
+              {
+                "name": "smartlogin",
+                "version": "0.2.1-release-20181122-20181121T194443Z-gd6f0708"
+              },
+              {
+                "name": "amon-agent",
+                "version": "1.0.1"
+              },
+              {
+                "name": "vm-agent",
+                "version": "1.8.0"
+              },
+              {
+                "name": "cainstsvc",
+                "version": "0.0.3vrelease-20181122-20181121T194844Z-g92307e6"
+              },
+              {
+                "name": "amon-relay",
+                "version": "1.0.1"
+              },
+              {
+                "name": "firewaller",
+                "version": "1.5.1"
+              },
+              {
+                "name": "hagfish-watcher",
+                "version": "1.0.0-release-20181122-20181121T212704Z-g3caaea7"
+              },
+              {
+                "name": "agents_core",
+                "version": "2.1.0"
+              },
+              {
+                "name": "net-agent",
+                "version": "2.2.1"
+              },
+              {
+                "name": "marlin",
+                "version": "0.0.3"
+              },
+              {
+                "name": "cmon-agent",
+                "version": "1.10.0"
+              },
+              {
+                "name": "config-agent",
+                "version": "1.8.1"
+              },
+              {
+                "name": "cabase",
+                "version": "1.0.3vrelease-20181122-20181121T194844Z-g92307e6"
+              }
+            ],
+            "Network Interfaces": {
+              "vioif0": {"MAC Address": "62:0a:c4:e1:27:6e", "ip4addr": "10.99.99.1", "Link Status": "up", "NIC Names": ["admin"]},
+              "vioif1": {"MAC Address": "f2:5f:85:21:10:40", "ip4addr": "", "Link Status": "up", "NIC Names": ["manta"]},
+              "vioif2": {"MAC Address": "62:a2:b8:9d:53:29", "ip4addr": "", "Link Status": "up", "NIC Names": ["external"]},
+              "vioif3": {"MAC Address": "92:d3:a8:19:03:09", "ip4addr": "", "Link Status": "up", "NIC Names": ["mantanat"]}
+            },
+            "Virtual Network Interfaces": {
+              "external0": {"MAC Address": "02:08:20:b1:e8:64", "ip4addr": "172.26.19.220", "Link Status": "up", "Host Interface": "vioif2", "VLAN": "0"},
+              "manta0": {"MAC Address": "90:b8:d0:42:bd:24", "ip4addr": "10.77.77.5", "Link Status": "up", "Host Interface": "vioif1", "VLAN": "0"}
+            },
+            "Link Aggregations": {
+            }
+        }
+    },
+    "nets": {
+        "external_mainnet": {
+            "family": "ipv4",
+            "mtu": 1500,
+            "nic_tag": "external",
+            "name": "external",
+            "provision_end_ip": "172.26.19.239",
+            "provision_start_ip": "172.26.19.221",
+            "subnet": "172.26.19.0/24",
+            "uuid": "2c606372-fa8d-452d-a93c-e4e98b98bda5",
+            "vlan_id": 0,
+            "resolvers": [
+            "8.8.8.8",
+            "8.8.4.4"
+            ],
+            "gateway": "172.26.19.1",
+            "netmask": "255.255.255.0"
+        },
+        "admin_mainnet": {
+            "family": "ipv4",
+            "mtu": 1500,
+            "nic_tag": "admin",
+            "name": "admin",
+            "provision_end_ip": "10.99.99.254",
+            "provision_start_ip": "10.99.99.31",
+            "subnet": "10.99.99.0/24",
+            "uuid": "0a4d08a1-8e7f-48aa-9a68-91bdf2edd93e",
+            "vlan_id": 0,
+            "resolvers": [
+                "10.99.99.5"
+            ],
+            "routes": {
+                "10.222.222.0/24": "10.99.99.101"
+            },
+            "owner_uuids": [
+                "58a49944-2b28-65ed-8992-dfa301152a67",
+                "930896af-bf8c-48d4-885c-6573a94b1853"
+            ],
+            "netmask": "255.255.255.0"
+        },
+        "admin_racknet": {
+            "family": "ipv4",
+            "mtu": 1500,
+            "nic_tag": "admin_rack_e50",
+            "name": "admin_rack_e50",
+            "provision_end_ip": "10.222.222.250",
+            "provision_start_ip": "10.222.222.5",
+            "subnet": "10.222.222.0/24",
+            "uuid": "ef5461db-7a70-4920-b6fb-e5c4b9918de2",
+            "vlan_id": 0,
+            "resolvers": [
+                "10.99.99.5"
+            ],
+            "routes": {
+                "10.99.99.0/24": "10.222.222.1"
+            },
+            "owner_uuids": [
+                "58a49944-2b28-65ed-8992-dfa301152a67",
+                "930896af-bf8c-48d4-885c-6573a94b1853"
+            ],
+            "netmask": "255.255.255.0"
+        },
+        "external_racknet": {
+            "family": "ipv4",
+            "mtu": 1500,
+            "nic_tag": "external_rack_e50",
+            "name": "external_rack_e50",
+            "provision_end_ip": "172.26.19.251",
+            "provision_start_ip": "172.26.19.240",
+            "subnet": "172.26.19.0/24",
+            "uuid": "f769454f-31f1-4e4b-b191-c2876b6814bb",
+            "vlan_id": 0,
+            "resolvers": [
+                "8.8.8.8",
+                "8.8.4.4"
+            ],
+            "gateway": "172.26.19.1",
+            "netmask": "255.255.255.0"
+
+        }
+    }
+}
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..73dd612
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,105 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..91f8346
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,87 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..8ae89c2
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,348 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	BUILD		top-level directory for node binaries, generated docs,
+#			and any other build output (default: "build")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE   ?= $(NODE) tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+ESLINT		?= eslint
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		?= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
diff --git a/tools/pre-commit.sh b/tools/pre-commit.sh
new file mode 100755
index 0000000..7d2d116
--- /dev/null
+++ b/tools/pre-commit.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+#
+# A suggested git pre-commit hook for developers. Install it via:
+#
+#   make git-hooks
+#
+
+set -o errexit
+set -o pipefail
+
+make fmt
+make check
+#make test-unit
-- 
2.21.0

