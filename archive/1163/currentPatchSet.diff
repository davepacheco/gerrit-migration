From 818ca4768cafd123bc325a65bc8e187686c6ae89 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 21 Dec 2016 19:03:07 -0800
Subject: [PATCH] joyent/node-cueball#47 rapid add/remove of backend in DNS
 leads to ConnectionSet crash Reviewed by: Bryan Cantrill <bryan@joyent.com>
 Reviewed by: Robert Mustacchi <rm@joyent.com>

---
 lib/resolver.js   |  4 ++++
 lib/set.js        | 19 ++++++++++-----
 package.json      |  2 +-
 test/cset.test.js | 60 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 78 insertions(+), 7 deletions(-)

diff --git a/lib/resolver.js b/lib/resolver.js
index cf15e6e..840d67a 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -877,6 +877,10 @@ CueBallDNSResolver.prototype.state_process = function (S) {
 	}
 
 	this.emit('updated');
+
+	/* Write down what we did to help debugging. */
+	this.r_lastProcessed = { added: added, removed: removed };
+
 	S.gotoState('sleep');
 };
 
diff --git a/lib/set.js b/lib/set.js
index daf6366..10d7c89 100644
--- a/lib/set.js
+++ b/lib/set.js
@@ -126,24 +126,31 @@ CueBallConnectionSet.prototype.on_resolver_added = function (k, backend) {
 };
 
 CueBallConnectionSet.prototype.on_resolver_removed = function (k) {
+	var self = this;
+
 	var idx = this.cs_keys.indexOf(k);
 	if (idx !== -1)
 		this.cs_keys.splice(idx, 1);
 	delete (this.cs_backends[k]);
-	var self = this;
+	delete (this.cs_dead[k]);
+
 	var cks = Object.keys(this.cs_connections).filter(function (ck) {
 		return (ck.indexOf(k + '.') === 0);
 	});
+
+	var fsms = self.cs_fsms[k] || [];
+	fsms.forEach(function (fsm) {
+		if (cks.length > 0 || fsm.isInState('idle')) {
+			fsm.closeAfterRelease();
+		} else {
+			fsm.close();
+		}
+	});
 	cks.forEach(function (ck) {
 		var conn = self.cs_connections[ck];
 		delete (self.cs_connections[ck]);
 		self.assertEmit('removed', ck, conn);
 	});
-	delete (this.cs_dead[k]);
-	var fsms = self.cs_fsms[k];
-	mod_assert.ok(fsms.length <= 1);
-	if (cks.length === 0 && fsms[0] && !fsms[0].isInState('idle'))
-		fsms[0].close();
 };
 
 CueBallConnectionSet.prototype.isDeclaredDead = function (backend) {
diff --git a/package.json b/package.json
index e14bf6d..0df5f04 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.2.2",
+  "version": "1.2.3",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/cset.test.js b/test/cset.test.js
index b1fdc28..cea02f8 100644
--- a/test/cset.test.js
+++ b/test/cset.test.js
@@ -339,6 +339,66 @@ mod_tape.test('removing a backend', function (t) {
 	});
 });
 
+mod_tape.test('removing an unused backend (cueball#47)', function (t) {
+	connections = [];
+	resolver = new DummyResolver();
+
+	var cset = new mod_cset.ConnectionSet({
+		log: log,
+		constructor: function (backend) {
+			return (new DummyConnection(backend));
+		},
+		recovery: recovery,
+		target: 2,
+		maximum: 5,
+		resolver: resolver
+	});
+
+	cset.on('stateChanged', function (st) {
+		if (st === 'stopped')
+			t.end();
+	});
+
+	cset.on('added', function (key, conn) {
+	});
+
+	cset.on('removed', function (key, conn) {
+		conn.seen = true;
+		conn.destroy();
+	});
+
+	resolver.emit('added', 'b1', {});
+	resolver.emit('added', 'b2', {});
+	resolver.emit('added', 'b3', {});
+
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		var bs = Object.keys(counts).filter(function (k) {
+			return (counts[k] > 0);
+		});
+		var nbs = Object.keys(counts).filter(function (k) {
+			return (counts[k] === 0);
+		});
+		t.equal(bs.length, 2);
+		index[bs[0]][0].connect();
+		index[bs[1]][0].connect();
+
+		resolver.emit('removed', nbs[0]);
+
+		setTimeout(function () {
+			t.equal(connections.length, 2);
+			summarize();
+			t.equal(counts[bs[0]], 1);
+			t.equal(counts[bs[1]], 1);
+			t.strictEqual(counts[nbs[0]], undefined);
+
+			cset.stop();
+			resolver.stop();
+		}, 500);
+	});
+});
+
 mod_tape.test('cset with error', function (t) {
 	connections = [];
 	resolver = new DummyResolver();
-- 
2.21.0

