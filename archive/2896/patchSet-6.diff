commit 37e25b1535f8fa4e0459da07726547bd5f7a42f7 (refs/changes/96/2896/6)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-11-13T19:08:59+01:00 (1 year, 11 months ago)
    
    SAPI-294 SAPI first boot (in non-proto mode) depends on SAPI

diff --git a/Makefile b/Makefile
index 45565ca..bf3f719 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -88,17 +88,14 @@ service: all $(SMF_MANIFESTS)
 	@rm -rf $(SVC_PKGDIR)
 	@mkdir -p $(SVC_PKGDIR)/site
 	@mkdir -p $(SVC_INSTDIR)/build
-	@mkdir -p $(SVC_INSTDIR)/lib
 	@mkdir -p $(SVC_INSTDIR)/smf/manifests
 	@mkdir -p $(SVC_INSTDIR)/test
 	@mkdir -p $(SVC_INSTDIR)/tools
 	@touch $(SVC_PKGDIR)/site/.do-not-delete-me
 	cp -r $(TOP)/server.js \
+		$(TOP)/lib \
 		$(TOP)/node_modules \
 		$(SVC_INSTDIR)/
-	cp -r $(TOP)/lib/common \
-		$(TOP)/lib/server \
-		$(SVC_INSTDIR)/lib
 	cp $(TOP)/tools/sapi-backfill-service-type.js \
 		$(SVC_INSTDIR)/tools/
 	cp $(TOP)/tools/sapi-backfill-instance-type.js \
diff --git a/boot/configure.sh b/boot/configure.sh
index 1cb5f98..0484857 100755
--- a/boot/configure.sh
+++ b/boot/configure.sh
@@ -7,16 +7,10 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
 set -o xtrace
 
-echo "Updating SMF manifest"
-$(/opt/local/bin/gsed -i"" -e "s/@@PREFIX@@/\/opt\/smartdc\/sapi/g" /opt/smartdc/sapi/smf/manifests/sapi.xml)
-
-echo "Importing sapi.xml"
-/usr/sbin/svccfg import /opt/smartdc/sapi/smf/manifests/sapi.xml
-
 exit 0
diff --git a/boot/setup.sh b/boot/setup.sh
index a6556c9..b7dd74f 100755
--- a/boot/setup.sh
+++ b/boot/setup.sh
@@ -7,7 +7,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
@@ -26,12 +26,26 @@ mkdir -p /var/smartdc/sapi
 echo "" >>/root/.profile
 echo "export PATH=\$PATH:/opt/smartdc/sapi/build/node/bin:/opt/smartdc/sapi/node_modules/.bin" >>/root/.profile
 
-
 # Include common utility functions (then run the boilerplate).
 source /opt/smartdc/boot/lib/util.sh
 CONFIG_AGENT_LOCAL_MANIFESTS_DIRS=/opt/smartdc/sapi
 SAPI_PROTO_MODE=$(mdata-get SAPI_PROTO_MODE || true)
-sdc_common_setup
+
+function sdc_sapi_setup
+{
+    _sdc_load_variables
+
+    printf 'Performing setup of "%s" zone...\n' "${ZONE_ROLE}" >&2
+
+    _sdc_create_dcinfo
+    _sdc_install_bashrc
+    _sdc_setup_amon_agent
+    _sdc_log_rotation_setup
+    _sdc_mdata_rbac_setup
+    _sdc_enable_cron
+}
+
+sdc_sapi_setup
 
 # If there's a zfs dataset, make the mount point /sapi
 zfs list $ZONE_DATASET && rc=$? || rc=$?
@@ -45,68 +59,25 @@ if [[ $rc == 0 ]]; then
     fi
 fi
 
-if [[ "${SAPI_PROTO_MODE}" == "true" ]]; then
-    # During setup/bootstrapping, we do not expect binder to be available, and
-    # rely on the pre-allocated IPs. We grab all the config from the
-    # usbkey_config key in metadata which is assumed to have a copy of
-    # /usbkey/config for us.
-
-    /usr/sbin/mdata-get usbkey_config > /var/tmp/usbkey.config
-    if [[ $? -ne 0 ]]; then
-        echo "error: Unable to find usbkey/config in SAPI zone." >&2
-        exit 1
-    fi
 
-    eval $(
-    . /var/tmp/usbkey.config
-    cat <<EOF
-DATACENTER_NAME=${datacenter_name}
-IMGAPI_ADMIN_IPS=${imgapi_admin_ips}
-MORAY_ADMIN_IPS=${moray_admin_ips}
-NAPI_ADMIN_IPS=${napi_admin_ips}
-VMAPI_ADMIN_IPS=${vmapi_admin_ips}
-CNAPI_ADMIN_IPS=${cnapi_admin_ips}
-EOF
-    )
-
-    IMGAPI_URL=http://$(echo "${IMGAPI_ADMIN_IPS}" | cut -d',' -f1)
-    MORAY_HOST=$(echo "${MORAY_ADMIN_IPS}" | cut -d ',' -f1)
-    NAPI_URL=http://$(echo "${NAPI_ADMIN_IPS}" | cut -d',' -f1)
-    CNAPI_URL=http://$(echo "${CNAPI_ADMIN_IPS}" | cut -d',' -f1)
-    VMAPI_URL=http://$(echo "${VMAPI_ADMIN_IPS}" | cut -d',' -f1)
-
-    # This config file is used during setup to bootstrap SAPI. With the
-    # exception that it requires IP addresses instead of DNS names (as binder is
-    # not expected to be setup yet), it should be kept broadly in sync with the
-    # template at:
-    #   sapi.git/sapi_manifests/sapi/template
-    mkdir -p /opt/smartdc/sapi/etc
-    cat > /opt/smartdc/sapi/etc/config.json <<HERE
-{
-  "log_options": {
-    "name": "sapi",
-    "level": "debug"
-  },
-  "datacenter_name": "$DATACENTER_NAME",
-  "moray": {
-    "host": "$MORAY_HOST",
-    "port": 2020
-  },
-  "cnapi": {
-    "url": "$CNAPI_URL"
-  },
-  "vmapi": {
-    "url": "$VMAPI_URL"
-  },
-  "napi": {
-    "url": "$NAPI_URL"
-  },
-  "imgapi": {
-    "url": "$IMGAPI_URL"
-  }
-}
-HERE
+echo "Updating SMF manifest"
+$(/opt/local/bin/gsed -i"" -e "s/@@PREFIX@@/\/opt\/smartdc\/sapi/g" /opt/smartdc/sapi/smf/manifests/sapi.xml)
 
+echo "Importing sapi.xml"
+/usr/sbin/svccfg import /opt/smartdc/sapi/smf/manifests/sapi.xml
+
+if [[ "${SAPI_PROTO_MODE}" == "true" ]]; then
+    echo "Skipping config-agent/SAPI instance setup: 'sapi' " \
+    "zone in proto mode" >&2
+else
+    config_agent_state=$(/usr/bin/svcs -H -o state config-agent)
+    if [[ $? != 0 ]]; then
+        echo "Setup config-agent and registrar services" >&2
+        setup_config_agent
+        download_metadata
+        write_initial_config
+        registrar_setup
+    fi
 fi
 
 echo "Adding log rotation"
@@ -121,3 +92,4 @@ sdc_setup_complete
 
 
 exit 0
+# vim: set shiftwidth=4 tabstop=4 expandtab:
diff --git a/lib/config.js b/lib/config.js
new file mode 100644
index 0000000..a4e82db
--- /dev/null
+++ b/lib/config.js
@@ -0,0 +1,271 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * lib/config.js: SAPI configuration library
+ */
+
+var cp = require('child_process');
+var fs = require('fs');
+var net = require('net');
+var path = require('path');
+var util = require('util');
+
+var assert = require('assert-plus');
+var bunyan = require('bunyan');
+var vasync = require('vasync');
+
+var NEEDED_SERVICES = [
+    'cnapi',
+    'imgapi',
+    'moray',
+    'napi',
+    'papi',
+    'vmapi'
+];
+
+
+
+function loadConfig(config, callback) {
+    assert.object(config, 'config');
+    assert.object(config.log, 'config.log');
+    var log = config.log;
+
+    var context = {};
+    vasync.pipeline({
+        arg: context,
+        funcs: [
+            // If SAPI_PROTO_MODE is set, it means we're on
+            // first boot, and we need to rely into IPs instead
+            // of domain names
+            function getMdataSapiMode(ctx, next) {
+                cp.exec('/usr/sbin/mdata-get SAPI_PROTO_MODE',
+                    function cpCb(err, stdout) {
+                        // No metadata found:
+                        if (err && err.code === 1) {
+                            ctx.proto_mode = false;
+                            next();
+                            return;
+                        }
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+
+                        if (stdout.trim() !== 'true') {
+                            next(new Error(util.format(
+                                'Unexpected value for SAPI proto_mode: %s',
+                                stdout.trim())));
+                            return;
+                        }
+                        ctx.proto_mode = (stdout.trim() === 'true');
+                        next();
+                    });
+            },
+            // If usbkey_config exists, we're at the initial bootstrap
+            // and we need to get `dns_domain` from it.
+            // Additionaly, on this case we need to grab IP addresses
+            // to configure our services, instead of using domain names.
+            function getUsbkeyConfig(ctx, next) {
+                if (!ctx.proto_mode) {
+                    next();
+                    return;
+                }
+                cp.exec('/usr/sbin/mdata-get usbkey_config',
+                    function cpCb(err, stdout) {
+                        if (err && err.code === 1) {
+                            next();
+                            return;
+                        }
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        NEEDED_SERVICES.forEach(function (k) {
+                            var re = new RegExp(k + '_admin_ips=(.+)');
+                            var res = stdout.match(re);
+                            if (res !== null && res.length && res[1]) {
+                                var ips = res[1].split(',');
+                                if (ips.length && net.isIP(ips[0])) {
+                                    ctx[k] = ips[0];
+                                }
+                            }
+                        });
+
+                        var result = stdout.match(
+                            new RegExp('dns_domain=(.+)'));
+                        if (result !== null && result.length && result[1]) {
+                            ctx.dns_domain = result[1];
+                        }
+                        next();
+                    });
+
+            },
+            function getDcName(ctx, next) {
+                cp.exec('/usr/sbin/mdata-get sdc:datacenter_name',
+                    function cpCb(err, stdout, _) {
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        ctx.datacenter_name = stdout.trim();
+                        next();
+                    });
+            },
+            function getDnsDomain(ctx, next) {
+                if (ctx.dns_domain) {
+                    next();
+                    return;
+                }
+                cp.exec('/usr/sbin/mdata-get dns_domain',
+                    function cpCb(err, stdout, stderr) {
+                        if (err && stderr.match('No metadata')) {
+                            next();
+                            return;
+                        }
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        ctx.dns_domain = stdout.trim();
+                        next();
+                    });
+
+            },
+            // FIXME: Remove, temporary workaround until usb_key
+            // removal is implemented.
+            // This should be removed as soon as we can always get
+            // 'dns_domain' from the previous function.
+            function getDnsDomainFromUsbkey(ctx, next) {
+                if (ctx.dns_domain) {
+                    next();
+                    return;
+                }
+                cp.exec('/usr/sbin/mdata-get usbkey_config | ' +
+                        '/opt/local/bin/grep \'^dns_domain\'',
+                    function cpCb(err, stdout, _) {
+                        if (err) {
+                            next(err);
+                            return;
+                        }
+                        ctx.dns_domain = stdout.trim().split('=')[1];
+                        next();
+                    });
+
+            }
+        ]
+    }, function pipeCb(pipeErr) {
+        if (pipeErr) {
+            log.error({err: pipeErr}, 'loadConfig error');
+            callback(pipeErr);
+            return;
+        }
+
+        // If we're in proto mode, we want log level set to debug:
+        if (context.proto_mode) {
+            log.level(bunyan.DEBUG);
+        }
+
+        var cfg = {
+            log: log
+        };
+
+        if (!context.datacenter_name) {
+            callback(new Error(
+                'Missing required "datacenter_name" metadata value'));
+            return;
+        }
+
+        cfg.datacenter_name = context.datacenter_name;
+
+        if (context.proto_mode) {
+            var missing_ips = [];
+            NEEDED_SERVICES.forEach(function (c) {
+                if (!context[c]) {
+                    missing_ips.push(c);
+                } else {
+                    if (c === 'moray') {
+                        cfg.moray = {
+                            host: context[c],
+                            port: 2020
+                        };
+                    } else {
+                        cfg[c] = {
+                            url: 'http://' + context[c]
+                        };
+                    }
+                }
+            });
+
+            if (missing_ips.length) {
+                callback(new Error(util.format(
+                    'Missing required admin IPs for the services: "%s"',
+                    missing_ips.join('","'))));
+                return;
+            }
+        } else {
+            if (!context.dns_domain) {
+                callback(new Error(
+                    'Missing required "dns_domain" metadata value'));
+                return;
+            }
+            NEEDED_SERVICES.forEach(function (c) {
+                if (c === 'moray') {
+                    cfg.moray = {
+                        srvDomain: util.format('%s.%s.%s', c,
+                            context.datacenter_name, context.dns_domain),
+                        cueballOptions: {
+                            resolvers: [util.format('binder.%s.%s',
+                                context.datacenter_name, context.dns_domain)]
+                        }
+                    };
+                } else {
+                    cfg[c] = {
+                        url: util.format('http://%s.%s.%s', c,
+                            context.datacenter_name, context.dns_domain)
+                    };
+                }
+            });
+        }
+
+
+        // Try to load sapi-master.config.json if exists:
+        var masterCfg = path.resolve(__dirname,
+                    '../etc/sapi-master.config.json');
+        fs.readFile(masterCfg, {
+            encoding: 'utf8'
+        }, function readFileCb(err, data) {
+            if (err && err.code !== 'ENOENT') {
+                callback(err, cfg);
+                return;
+            }
+            if (!err) {
+                var m_config;
+                try {
+                    m_config = JSON.parse(data);
+                    if (m_config.moray &&
+                        m_config.moray.master_host &&
+                        m_config.moray.master_port) {
+                        cfg.moray.master_host = m_config.moray.master_host;
+                        cfg.moray.master_port = m_config.moray.master_port;
+                    }
+                } catch (e) {
+                    callback(e, cfg);
+                    return;
+                }
+            }
+            callback(null, cfg);
+        });
+    });
+}
+
+module.exports = {
+    loadConfig: loadConfig
+};
diff --git a/lib/server/endpoints/applications.js b/lib/server/endpoints/applications.js
index b52dd5e..ec8f3e8 100644
--- a/lib/server/endpoints/applications.js
+++ b/lib/server/endpoints/applications.js
@@ -69,8 +69,16 @@ Applications.list = function (req, res, next) {
         filters.owner_uuid = req.params.owner_uuid;
 
     var opts = {};
-    if (req.params.include_master)
+    if (req.params.include_master) {
+        if (!model.config.moray.master_host) {
+            next(new restify.ServiceUnavailableError(
+                'Parameter \'include_master\' has been specified but ' +
+                'this SAPI instance is configured without master details'));
+            return;
+        }
+    } else {
         opts.include_master = true;
+    }
 
     model.listApplications(filters, opts, function (err, apps) {
         if (err) {
diff --git a/lib/server/endpoints/instances.js b/lib/server/endpoints/instances.js
index 4f9cf43..c5e1e7d 100644
--- a/lib/server/endpoints/instances.js
+++ b/lib/server/endpoints/instances.js
@@ -129,20 +129,29 @@ Instances.list = function (req, res, next) {
     }
 
     var opts = {};
-    if (req.params.include_master)
+    if (req.params.include_master) {
+        if (!model.config.moray.master_host) {
+            next(new restify.ServiceUnavailableError(
+                'Parameter \'include_master\' has been specified but ' +
+                'this SAPI instance is configured without master details'));
+            return;
+        }
+    } else {
         opts.include_master = true;
+    }
 
     model.listInstances(filters, opts, function (err, insts) {
         if (err) {
             model.log.error(err, 'failed to list instances');
-            return (next(err));
+            next(err);
+            return;
         }
 
         var acceptVersion = req.getVersion();
         res.send(insts.map(function (inst) {
             return (serialize(inst, acceptVersion));
         }));
-        return (next());
+        next();
     });
 };
 
@@ -221,18 +230,19 @@ Instances.upgrade = function (req, res, next) {
     var image_uuid = req.params.image_uuid;
 
     if (!image_uuid) {
-        return (next(new restify.MissingParameterError(
-            'missing image_uuid')));
+        next(new restify.MissingParameterError('missing image_uuid'));
+        return;
     }
 
     model.upgradeInstance(uuid, image_uuid, function (err, inst) {
         if (err) {
             model.log.error(err, 'failed to upgrade instance');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(serialize(inst, req.getVersion()));
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/manifests.js b/lib/server/endpoints/manifests.js
index 6a2d62c..6a5ba1f 100644
--- a/lib/server/endpoints/manifests.js
+++ b/lib/server/endpoints/manifests.js
@@ -49,38 +49,47 @@ Manifests.create = function (req, res, next) {
 
     if (params.version && !semver.valid(params.version)) {
         log.error({ version: params.version }, 'invalid version');
-        return (next(new restify.InvalidArgumentError(
-            'invalid version')));
+        next(new restify.InvalidArgumentError('invalid version'));
+        return;
     }
 
     model.createManifest(params, function (err, mfest) {
         if (err) {
             model.log.error(err, 'failed to create manifest');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(mfest);
-        return (next());
+        next();
     });
 
-    return (null);
 };
 
 Manifests.list = function (req, res, next) {
     var model = this.model;
 
     var opts = {};
-    if (req.params.include_master)
+    if (req.params.include_master) {
+        if (!model.config.moray.master_host) {
+            next(new restify.ServiceUnavailableError(
+                'Parameter \'include_master\' has been specified but ' +
+                'this SAPI instance is configured without master details'));
+            return;
+        }
+    } else {
         opts.include_master = true;
+    }
 
     model.listManifests(opts, function (err, mfests) {
         if (err) {
             model.log.error(err, 'failed to list manifests');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(mfests);
-        return (next());
+        next();
     });
 };
 
@@ -88,11 +97,13 @@ Manifests.get = function (req, res, next) {
     var model = this.model;
 
     model.getManifest(req.params.uuid, function (err, mfest) {
-        if (err)
-            return (next(err));
+        if (err) {
+            next(err);
+            return;
+        }
 
         res.send(mfest);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/services.js b/lib/server/endpoints/services.js
index 46a6b82..057e273 100644
--- a/lib/server/endpoints/services.js
+++ b/lib/server/endpoints/services.js
@@ -109,13 +109,22 @@ Services.list = function (req, res, next) {
         filters.type = req.params.type;
 
     var opts = {};
-    if (req.params.include_master)
+    if (req.params.include_master) {
+        if (!model.config.moray.master_host) {
+            next(new restify.ServiceUnavailableError(
+                'Parameter \'include_master\' has been specified but ' +
+                'this SAPI instance is configured without master details'));
+            return;
+        }
+    } else {
         opts.include_master = true;
+    }
 
     model.listServices(filters, opts, function (err, svcs) {
         if (err) {
             model.log.error(err, 'failed to list services');
-            return (next(err));
+            next(err);
+            return;
         }
 
         var acceptVersion = req.getVersion();
@@ -123,7 +132,7 @@ Services.list = function (req, res, next) {
             return (serialize(svc, acceptVersion));
         }));
 
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/sapi.js b/lib/server/sapi.js
index ccdd28d..87e37ee 100644
--- a/lib/server/sapi.js
+++ b/lib/server/sapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -112,6 +112,7 @@ function createServer(options) {
     server.use(restify.queryParser());
     server.use(restify.bodyParser());
     server.use(restify.requestLogger());
+
     server.on('after', function (req, res, route, err) {
         // Skip logging some high frequency or unimportant endpoints to
         // keep log noise down.
diff --git a/package.json b/package.json
index c789b8c..f5293c2 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sapi",
   "description": "Services and Configuration API",
-  "version": "0.1.0",
+  "version": "0.2.0",
   "author": "Joyent (joyent.com)",
   "license": "MPL-2.0",
   "private": true,
diff --git a/sapi_manifests/sapi/manifest.json b/sapi_manifests/sapi/manifest.json
index bed37b2..f982ca6 100644
--- a/sapi_manifests/sapi/manifest.json
+++ b/sapi_manifests/sapi/manifest.json
@@ -1,5 +1,5 @@
 {
 	"name": "sapi",
-	"path": "/opt/smartdc/sapi/etc/config.json",
+	"path": "/opt/smartdc/sapi/etc/sapi-master.config.json",
 	"post_cmd": "/usr/sbin/svcadm restart sapi"
 }
diff --git a/sapi_manifests/sapi/template b/sapi_manifests/sapi/template
index 3aea439..84c47ba 100644
--- a/sapi_manifests/sapi/template
+++ b/sapi_manifests/sapi/template
@@ -1,30 +1,6 @@
 {
-	"log_options": {
-		"name": "sapi",
-		"level": "info"
-	},
-	"datacenter_name": "{{{datacenter_name}}}",
-	"moray": {
-		"srvDomain": "{{MORAY_SERVICE}}",
-		"cueballOptions": {
-			"resolvers": ["{{{BINDER_SERVICE}}}"]
-		},
-		"master_host": "{{{MASTER_MORAY_IP}}}",
-		"master_port": "{{{MASTER_MORAY_PORT}}}"
-	},
-	"cnapi": {
-		"url": "http://{{{CNAPI_SERVICE}}}"
-	},
-	"vmapi": {
-		"url": "http://{{{VMAPI_SERVICE}}}"
-	},
-	"napi": {
-		"url": "http://{{{NAPI_SERVICE}}}"
-	},
-	"imgapi": {
-		"url": "http://{{{IMGAPI_SERVICE}}}"
-	},
-	"papi": {
-		"url": "http://{{{PAPI_SERVICE}}}"
-	}
+    "moray": {
+        "master_host": "{{{MASTER_MORAY_IP}}}",
+        "master_port": "{{{MASTER_MORAY_PORT}}}"
+    }
 }
diff --git a/server.js b/server.js
index cf2d72d..200dc75 100644
--- a/server.js
+++ b/server.js
@@ -5,45 +5,41 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * server.js: Main entry point for the Services API
  */
 
-var assert = require('assert-plus');
+
 var bunyan = require('bunyan');
-var fs = require('fs');
-var optimist = require('optimist');
 
 var SAPI = require('./lib/server/sapi');
+var mod_config = require('./lib/config');
 
+var log = bunyan.createLogger({
+    name: 'sapi',
+    level: 'info',
+    serializers: bunyan.stdSerializers
+});
 
 
-optimist.usage('Usage:\t node server.js [ -f <config file> ]');
-var ARGV = optimist.options({
-    'f': {
-        'alias': 'file',
-        'describe': 'location of configuration file'
-    }
-}).argv;
-
-var file = ARGV.f ? ARGV.f : './etc/config.json';
-var config = JSON.parse(fs.readFileSync(file));
-
+mod_config.loadConfig({ log: log }, function (cfgErr, cfg) {
 
-assert.object(config.log_options);
-config.log_options.serializers = bunyan.stdSerializers;
-var log = bunyan.createLogger(config.log_options);
-config.log = log;
+    if (cfgErr) {
+        log.fatal({err: cfgErr}, 'Load config error');
+        process.exit(1);
+    }
 
+    log.info({ cfg: cfg }, 'loadConfig');
 
-var sapi = new SAPI(config);
+    var sapi = new SAPI(cfg);
 
-sapi.start(function (err) {
-    if (err) {
-        log.fatal(err, 'failure to start SAPI');
-        process.exit(1);
-    }
+    sapi.start(function initCb(err) {
+        if (err) {
+            log.fatal(err, 'failure to start SAPI');
+            process.exit(1);
+        }
+    });
 });
diff --git a/smf/manifests/sapi.xml.in b/smf/manifests/sapi.xml.in
index 1129959..a4728eb 100644
--- a/smf/manifests/sapi.xml.in
+++ b/smf/manifests/sapi.xml.in
@@ -7,7 +7,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 <service_bundle type="manifest" name="smartdc-application-sapi">
@@ -20,7 +20,7 @@
 	<service_fmri value="svc:/system/filesystem/local" />
 </dependency>
 
-<exec_method type="method" name="start" exec="@@NODE@@ --abort-on-uncaught-exception @@PREFIX@@/server.js -f @@PREFIX@@/etc/config.json &amp;" timeout_seconds="30" />
+<exec_method type="method" name="start" exec="@@NODE@@ --abort-on-uncaught-exception @@PREFIX@@/server.js &amp;" timeout_seconds="30" />
 <exec_method type="method" name="stop" exec=":kill" timeout_seconds="30" />
 
 <instance name="default" enabled="true" />
