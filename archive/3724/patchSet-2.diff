From 252804c58422c0ea87c96aa4f746e1bc82c078e7 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 26 Mar 2018 21:36:17 -0700
Subject: [PATCH] TRITON-273 Triton should refuse to provision a bhyve VM with
 more vcpus than bhyve supports or than the CN has

---
 lib/algorithms/hard-filter-hvm.js       | 45 ++++++++++++++++++++++++-
 package.json                            |  2 +-
 test/algorithms/hard-filter-hvm.test.js |  4 +--
 test/validations.test.js                | 22 +++++++++++-
 4 files changed, 68 insertions(+), 5 deletions(-)

diff --git a/lib/algorithms/hard-filter-hvm.js b/lib/algorithms/hard-filter-hvm.js
index 79f2777..8b5bc72 100644
--- a/lib/algorithms/hard-filter-hvm.js
+++ b/lib/algorithms/hard-filter-hvm.js
@@ -17,6 +17,8 @@
  *	  existing kvm VMs.
  *	* prevent brand=kvm VMs from being provisioned to servers that have
  *	  existing bhyve VMs.
+ *	* prevent brand=bhyve VMs from being provisioned to servers that don't
+ *	  support the requested number of vcpus.
  *
  * Note that calculate-ticketed-vms.js will have added in-flight VMs to the
  * server.vms arrays, so we will also refuse to provision bhyve to a system that
@@ -33,28 +35,69 @@ function filterHVM(servers, opts, cb) {
 	assert.object(opts, 'opts');
 	assert.object(opts.vm, 'opts.vm');
 	assert.string(opts.vm.brand, 'opts.vm.brand');
+	assert.optionalNumber(opts.vm.vcpus, 'opts.vm.vcpus');
 	assert.func(cb, 'cb');
 
 	var adequateServers = servers;
 	var reasons = {};
 	var newVmBrand = opts.vm.brand;
+	var newVmVcpus = opts.vm.vcpus;
 
 	if (HVM_BRANDS.indexOf(newVmBrand) === -1) {
 		// We don't care about VMs with brands that are not HVM
 		return (cb(null, servers, reasons));
 	}
 
+	// The assert above verifies that if this is passed, it's a number
+	// so this ensures it's not 0, undefined or null.
+	if (!newVmVcpus) {
+		// set to -1 to make it more obvious something was wrong
+		newVmVcpus = -1;
+	}
+
 	adequateServers = servers.filter(function checkServer(server) {
-		var bhyveSupport = server.sysinfo['Bhyve Capable'];
+		var bhyveMaxVcpus;
+		var bhyveSupport;
+		var serverTotalCores;
+		var sysinfo = server.sysinfo;
 		var vms = server.vms;
 		var vmNames = Object.keys(vms);
 
+		bhyveMaxVcpus = Number(sysinfo['Bhyve Max Vcpus']);
+		bhyveSupport = sysinfo['Bhyve Capable'];
+		serverTotalCores = Number(sysinfo['CPU Total Cores']);
+
+		// Older builds did not have 'Bhyve Max Vcpus', and the max
+		// there was 16
+		if (isNaN(bhyveMaxVcpus)) {
+			bhyveMaxVcpus = 16;
+		}
+
+		// Even if bhyve supports more vcpus, the system might not
+		// *have* that many cores. If so, we'll reduce max.
+		if (serverTotalCores < bhyveMaxVcpus) {
+			bhyveMaxVcpus = serverTotalCores;
+		}
+
 		if (newVmBrand === 'bhyve' && bhyveSupport !== true) {
 			reasons[server.uuid] =
 			    'Server does not support "bhyve" VMs';
 			return (false);
 		}
 
+		// Ensure the server has the correct number of cores for VM's
+		// vcpus
+		if (newVmBrand === 'bhyve') {
+			if (newVmVcpus < 1 || newVmVcpus > bhyveMaxVcpus) {
+				reasons[server.uuid] = 'bhyve VM ' +
+				    opts.vm.uuid +
+				    ' is requesting ' + newVmVcpus + ' vcpus ' +
+				    'whereas server supports 1 - ' +
+				    bhyveMaxVcpus + ' vcpus';
+				return (false);
+			}
+		}
+
 		for (var i = 0; i !== vmNames.length; i++) {
 			var vm = vms[vmNames[i]];
 
diff --git a/package.json b/package.json
index e1c9e4c..bb20a6a 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "dapi",
   "description": "SmartDataCenter Designation API",
-  "version": "8.2.0",
+  "version": "8.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/algorithms/hard-filter-hvm.test.js b/test/algorithms/hard-filter-hvm.test.js
index 0a67c4f..049865d 100644
--- a/test/algorithms/hard-filter-hvm.test.js
+++ b/test/algorithms/hard-filter-hvm.test.js
@@ -82,7 +82,7 @@ test('filterHVM() with bhyve and mixed HW support', function (t) {
 	};
 
 	var opts = {
-		vm:  { brand: 'bhyve', ram: 512 },
+		vm:  { brand: 'bhyve', ram: 512, vcpus: 1 },
 		pkg: {},
 		defaults: {}
 	};
@@ -114,7 +114,7 @@ test('filterHVM() with bhyve and existing kvm', function (t) {
 	};
 
 	var opts = {
-		vm:  { brand: 'bhyve', ram: 512 },
+		vm:  { brand: 'bhyve', ram: 512, vcpus: 1 },
 		pkg: {},
 		defaults: {}
 	};
diff --git a/test/validations.test.js b/test/validations.test.js
index 16ac95b..dcba842 100644
--- a/test/validations.test.js
+++ b/test/validations.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var test = require('tape');
@@ -27,6 +27,8 @@ var SERVER = {
 		'HW Family': 'JCP-1100',
 		'Setup': 'true',
 		'VM Capable': true,
+		'Bhyve Capable': true,
+		'Bhyve Max Vcpus': 16,
 		'CPU Type': 'Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz',
 		'CPU Virtualization': 'vmx',
 		'CPU Physical Cores': 2,
@@ -414,6 +416,24 @@ test('validate server', function (t) {
 });
 
 
+test('bad bhyve sysinfo properties', function (t) {
+	var badServer;
+	var res;
+
+	badServer = deepCopy(SERVER);
+	badServer.sysinfo['Bhyve Capable'] = 'bacon';
+	res = validations.validateServer(badServer);
+	t.ok(res);
+
+	badServer = deepCopy(SERVER);
+	badServer.sysinfo['Bhyve Max Vcpus'] = 'bacon';
+	res = validations.validateServer(badServer);
+	t.ok(res);
+
+	t.end();
+});
+
+
 test('validate servers', function (t) {
 	var res = validations.validateServers([SERVER]);
 	t.ifError(res);
-- 
2.21.0

