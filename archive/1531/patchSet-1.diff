From 7320f54a7efac8e2936fda744fcd922b6a4f84db Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Thu, 16 Feb 2017 14:32:17 -0800
Subject: [PATCH] joyent/node-cueball#95 pool failure logs should be WARN level
 joyent/node-cueball#79 "read ECONNRESET" message on busy socket ought to be a
 warning joyent/node-cueball#97 log message for 'error' emission while claimed
 went missing in 2.0

---
 lib/connection-fsm.js | 18 ++++++++++++++----
 lib/pool.js           |  4 ++--
 lib/set.js            |  4 ++--
 test/pool.test.js     |  2 +-
 4 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 8677860..dbeeb0d 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -266,26 +266,31 @@ SocketMgrFSM.prototype.state_connecting = function (S) {
 	S.on(this.sm_socket, 'error', function socketMgrErrorListener(err) {
 		self.sm_lastError = err;
 		S.gotoState('error');
+		self.sm_log.trace(err, 'emitted error while connecting');
 		self.sm_pool._incrCounter('error-during-connect');
 	});
 	S.on(this.sm_socket, 'connectError', function (err) {
 		self.sm_lastError = err;
 		S.gotoState('error');
+		self.sm_log.trace(err, 'emitted connectError while connecting');
 		self.sm_pool._incrCounter('error-during-connect');
 	});
 	S.on(this.sm_socket, 'close', function () {
 		self.sm_lastError = new mod_errors.ConnectionClosedError(self);
 		S.gotoState('error');
+		self.sm_log.trace('closed while connecting');
 		self.sm_pool._incrCounter('close-during-connect');
 	});
 	S.on(this.sm_socket, 'timeout', function () {
 		self.sm_lastError = new mod_errors.ConnectionTimeoutError(self);
 		S.gotoState('error');
+		self.sm_log.trace('timed out while connecting');
 		self.sm_pool._incrCounter('timeout-during-connect');
 	});
 	S.on(this.sm_socket, 'connectTimeout', function () {
 		self.sm_lastError = new mod_errors.ConnectionTimeoutError(self);
 		S.gotoState('error');
+		self.sm_log.trace('timed out while connecting');
 		self.sm_pool._incrCounter('timeout-during-connect');
 	});
 };
@@ -308,6 +313,7 @@ SocketMgrFSM.prototype.state_connected = function (S) {
 		self.sm_lastError = err;
 		S.gotoState('error');
 		self.sm_pool._incrCounter('error-while-connected');
+		self.sm_log.trace(err, 'emitted error while connected');
 	});
 	S.on(this.sm_socket, 'close', function () {
 		S.gotoState('closed');
@@ -320,15 +326,12 @@ SocketMgrFSM.prototype.state_connected = function (S) {
 
 SocketMgrFSM.prototype.state_error = function (S) {
 	S.validTransitions(['backoff']);
-	var log = this.sm_log;
 	if (this.sm_socket) {
 		this.sm_socket.destroy();
 		this.sm_log = this.sm_log.child({ localPort: null });
 	}
 	this.sm_socket = undefined;
 
-	log.trace(this.sm_lastError, 'got error from connection');
-
 	S.on(this, 'retryAsserted', function () {
 		S.gotoState('backoff');
 	});
@@ -633,10 +636,17 @@ CueBallClaimHandle.prototype.state_claimed = function (S) {
 			 */
 			throw (err);
 		}
+		self.ch_log.warn(err, 'connection emitted error while ' +
+		    'claimed (for claim callback "%s")', self.ch_callback.name);
+		self.ch_pool._incrCounter('error-while-claimed');
 	});
 
+	var lport = undefined;
+	if (typeof (this.ch_connection.localPort) === 'number')
+		lport = this.ch_connection.localPort;
 	this.ch_log = this.ch_slot.makeChildLogger({
-		component: 'CueBallClaimHandle'
+		component: 'CueBallClaimHandle',
+		localPort: lport
 	});
 
 	this.ch_callback(null, this, this.ch_connection);
diff --git a/lib/pool.js b/lib/pool.js
index 58a8cb3..6fff749 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -330,7 +330,7 @@ CueBallConnectionPool.prototype.state_starting = function (S) {
 		var dead = Object.keys(self.p_dead).length;
 		this._hwmCounter('max-dead-backends', dead);
 		if (dead >= self.p_keys.length) {
-			self.p_log.error(
+			self.p_log.warn(
 			    { dead: dead },
 			    'pool has exhausted all retries, now moving to ' +
 			    '"failed" state');
@@ -383,7 +383,7 @@ CueBallConnectionPool.prototype.state_running = function (S) {
 		var dead = Object.keys(self.p_dead).length;
 		this._hwmCounter('max-dead-backends', dead);
 		if (dead >= self.p_keys.length) {
-			self.p_log.error(
+			self.p_log.warn(
 			    { dead: dead },
 			    'pool has exhausted all retries, now moving to ' +
 			    '"failed" state');
diff --git a/lib/set.js b/lib/set.js
index 90788b3..11d29a2 100644
--- a/lib/set.js
+++ b/lib/set.js
@@ -204,7 +204,7 @@ CueBallConnectionSet.prototype.state_starting = function (S) {
 	S.on(this, 'closedBackend', function (fsm) {
 		var dead = Object.keys(self.cs_dead).length;
 		if (dead >= self.cs_keys.length) {
-			self.cs_log.error(
+			self.cs_log.warn(
 			    { dead: dead },
 			    'cset has exhausted all retries, now moving to ' +
 			    '"failed" state');
@@ -247,7 +247,7 @@ CueBallConnectionSet.prototype.state_running = function (S) {
 	S.on(this, 'closedBackend', function (fsm) {
 		var dead = Object.keys(self.cs_dead).length;
 		if (dead >= self.cs_keys.length) {
-			self.cs_log.error(
+			self.cs_log.warn(
 			    { dead: dead },
 			    'pool has exhausted all retries, now moving to ' +
 			    '"failed" state');
diff --git a/test/pool.test.js b/test/pool.test.js
index a1a3d94..3806421 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -318,7 +318,7 @@ mod_tape.test('error while claimed', function (t) {
 		t.equal(connections.length, 1);
 		connections[0].connect();
 
-		pool.claim(function (err, handle, conn) {
+		pool.claim(function errorWhileClaimed(err, handle, conn) {
 			t.strictEqual(conn, connections[0]);
 			conn.once('error', function () {
 				/* do nothing */
-- 
2.21.0

