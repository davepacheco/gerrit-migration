commit bf0289bb6d597d02e6a4139abe8365eca41ddcc3 (refs/changes/99/3999/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-05-29T10:04:29+02:00 (1 year, 4 months ago)
    
    TRITON-417 sdcadm tests implicitly assume dev channel

diff --git a/test/platform.test.js b/test/platform.test.js
index b236357..7e6286c 100644
--- a/test/platform.test.js
+++ b/test/platform.test.js
@@ -201,11 +201,8 @@ test('sdcadm platform available', function (t) {
 
             t.deepEqual(titles, AVAIL_TITLES, 'check column titles');
         } else {
-            t.equal(platformsDetails.shift().join(' '),
-                'The latest platform image for "dev"' +
-                ' channel is already installed.',
-                'Up to date platform'
-            );
+            t.notEqual(platformsDetails.shift().join(' ')
+                .indexOf('Up to date platform'), -1);
         }
 
         platformsDetails.forEach(function (p) {
diff --git a/test/runtests b/test/runtests
index d88e0cd..3a2b80c 100755
--- a/test/runtests
+++ b/test/runtests
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright 2016, Joyent, Inc.
+# Copyright 2018, Joyent, Inc.
 #
 
 #
@@ -138,7 +138,8 @@ for file in $test_files; do
     echo "# $test_file"
     PATH=$NODE_INSTALL/bin:$PATH $TAPE $file \
         | tee $RESULTS/$test_file.tap
-    if [[ "$?" != "0" ]]; then
+    retval=$?
+    if [[ "${retval}" != "0" ]]; then
         echo $file >> $FAILING_LIST
         [[ -n "$opt_stop_on_failure" ]] && break
     fi
diff --git a/test/sdcadm.test.js b/test/sdcadm.test.js
index 35cd336..2e2279d 100644
--- a/test/sdcadm.test.js
+++ b/test/sdcadm.test.js
@@ -41,7 +41,7 @@ test('sdcadm --help', function (t) {
 test('sdcadm --version', function (t) {
     exec('sdcadm --version', function (err, stdout, stderr) {
         t.ifError(err, 'no version error');
-        t.ok(stdout.match(/^sdcadm \d+\.\d+\.\d+ \(master-\d+T\d+Z-.+\)/));
+        t.ok(stdout.match(/^sdcadm \d+\.\d+\.\d+ \([\w-]+-\d+T\d+Z-.+\)/));
         t.equal(stderr, '');
 
         t.end();
diff --git a/test/self-update.test.js b/test/self-update.test.js
index 94e5c4b..60c5931 100644
--- a/test/self-update.test.js
+++ b/test/self-update.test.js
@@ -58,11 +58,26 @@ function getSdcadmBuildstampVersion(t, cb) {
     });
 }
 
+function getSdcadmChannel(t, cb) {
+    if (CURRENT_VERSION === '') {
+        cb();
+        return;
+    }
+    var command = 'updates-imgadm get ' + CURRENT_VERSION +
+        ' -C \'*\' | json channels[0]';
+    exec(command, function (err, stdout, stderr) {
+        t.ifError(err, 'getSdcadmChannel error');
+        t.equal(stderr, '', 'getSdcadmChannel stderr');
+        t.ok(stdout, 'getSdcadmChannel stdout');
+        cb(stdout.trim());
+    });
+}
+
 
 test('setup', function (t) {
     getSdcadmBuildstampVersion(t, function (data) {
         var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
-            'tag.buildstamp=' + data + ' --latest -o uuid -H';
+            'tag.buildstamp=' + data + ' --latest -o uuid -H -C \'*\'';
         exec(updatesCmd, function (err2, stdout, stderr) {
             t.ifError(err2);
             CURRENT_VERSION = stdout.trim();
@@ -117,7 +132,7 @@ test('sdcadm self-update --latest --channel=staging', function (t) {
 
 
 test('sdcadm self-update --latest', function (t) {
-    var cmd = 'sdcadm self-update --latest';
+    var cmd = 'sdcadm self-update --latest --channel=dev';
     exec(cmd, function (err, stdout, stderr) {
         checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
     });
@@ -125,8 +140,12 @@ test('sdcadm self-update --latest', function (t) {
 
 
 test('sdcadm self-update IMAGE_UUID', function (t) {
-    var cmd = 'sdcadm self-update ' + CURRENT_VERSION;
-    exec(cmd, function (err, stdout, stderr) {
-        checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
+    getSdcadmChannel(t, function (channel) {
+        var cmd = 'sdcadm self-update ' + CURRENT_VERSION + ' -C' + channel;
+        exec(cmd, function (err, stdout, stderr) {
+            checkUpdateResults(t, err, stdout, stderr,
+                ['Using channel ' + channel]);
+        });
     });
+
 });
diff --git a/test/update-gz-tools.test.js b/test/update-gz-tools.test.js
index ad5b079..f15deb2 100644
--- a/test/update-gz-tools.test.js
+++ b/test/update-gz-tools.test.js
@@ -17,6 +17,7 @@ var util = require('util');
 var shared = require('./shared');
 
 var CURRENT_GZ_TOOLS_VERSION = null;
+var CURRENT_GZ_TOOLS_CHANNEL;
 var LATEST_GZ_TOOLS_UUID = null;
 
 /*
@@ -32,21 +33,39 @@ function getGzToolsVersion(t, cb) {
     });
 }
 
+function getGzToolsChannel(t, cb) {
+    if (CURRENT_GZ_TOOLS_VERSION === '') {
+        cb();
+        return;
+    }
+    var command = 'updates-imgadm get ' + CURRENT_GZ_TOOLS_VERSION +
+        ' -C \'*\' | json channels[0]';
+    exec(command, function (err, stdout, stderr) {
+        t.ifError(err, 'getGzToolsChannel error');
+        t.equal(stderr, '', 'getGzToolsChannel stderr');
+        t.ok(stdout, 'getGzToolsChannel stdout');
+        cb(stdout.trim());
+    });
+}
+
 test('prepare', function (t) {
     shared.prepare(t, {external_nics: true});
 });
 
 test('setup', function (t) {
-    getGzToolsVersion(t, function (data) {
+    getGzToolsVersion(t, function versionCb(data) {
         CURRENT_GZ_TOOLS_VERSION = data;
-        var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
-            'name=gz-tools --latest -o uuid -H';
-        exec(updatesCmd, function (err2, stdout, stderr) {
-            t.ifError(err2, 'Error listing gz-tools from updates-imgadm');
-            LATEST_GZ_TOOLS_UUID = stdout.trim();
-            t.ok(LATEST_GZ_TOOLS_UUID, 'Latest gz-tools uuid');
-            t.equal(stderr, '', 'empty stderr');
-            t.end();
+        getGzToolsChannel(t, function channelCb(channel) {
+            CURRENT_GZ_TOOLS_CHANNEL = channel;
+            var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
+                'name=gz-tools --latest -o uuid -H';
+            exec(updatesCmd, function (err2, stdout, stderr) {
+                t.ifError(err2, 'Error listing gz-tools from updates-imgadm');
+                LATEST_GZ_TOOLS_UUID = stdout.trim();
+                t.ok(LATEST_GZ_TOOLS_UUID, 'Latest gz-tools uuid');
+                t.equal(stderr, '', 'empty stderr');
+                t.end();
+            });
         });
     });
 });
@@ -137,7 +156,8 @@ test('update-gz-tools IMAGE-UUID', function (t) {
     }
     var cmd = 'sdcadm experimental update-gz-tools ' +
         '--force-reinstall ' +
-        CURRENT_GZ_TOOLS_VERSION;
+        CURRENT_GZ_TOOLS_VERSION + ' -C ' +
+        CURRENT_GZ_TOOLS_CHANNEL;
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
         console.log(stdout);
