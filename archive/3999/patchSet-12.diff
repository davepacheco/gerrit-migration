From 8df28566a5c790f8fd1dba6412f35a587ed538a4 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 7 Jun 2018 19:38:20 +0200
Subject: [PATCH] TRITON-417 sdcadm tests implicitly assume dev channel

---
 test/create.test.js          | 40 +++++++++++++++++----
 test/experimental.test.js    |  2 +-
 test/platform.test.js        |  7 ++--
 test/runtests                |  7 ++--
 test/sdcadm.test.js          |  2 +-
 test/self-update.test.js     | 29 +++++++++++++---
 test/update-gz-tools.test.js | 67 ++++++++++++++++++++++++++----------
 test/update.test.js          | 59 ++++++++++++++++++-------------
 8 files changed, 149 insertions(+), 64 deletions(-)

diff --git a/test/create.test.js b/test/create.test.js
index d1eaa5c..fd78a3c 100644
--- a/test/create.test.js
+++ b/test/create.test.js
@@ -19,14 +19,29 @@ var util = require('util');
 
 var HEADNODE_UUID = '';
 var NUM_INSTS = 0;
+var CHANNEL = 'dev';
 
 function getNumInsts(cb) {
     shared.getNumInsts('amonredis', cb);
 }
 
+function getChannelForLatestLocalImg(cb) {
+    var cmd = 'updates-imgadm get ' +
+        '`sdc-sapi /services?name=amonredis|json -H [0].params.image_uuid`' +
+        ' -C \'*\' | json channels[0]';
+    exec(cmd, function execCb(err, stdout, stderr) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        var latestLocalImgChannel = stdout.trim();
+        cb(null, latestLocalImgChannel);
+    });
+}
 
-function getLatestImgAvail(cb) {
-    var cmd = 'updates-imgadm list name=amonredis --latest --json';
+function getLatestImgAvail(channel, cb) {
+    var cmd = 'updates-imgadm list name=amonredis --latest --json -C ' +
+        channel;
     exec(cmd, function execCb(err, stdout, stderr) {
         if (err) {
             cb(err);
@@ -38,6 +53,10 @@ function getLatestImgAvail(cb) {
     });
 }
 
+test('prepare', function (t) {
+    shared.prepare(t, {external_nics: true});
+});
+
 test('setup', function setupTest(t) {
     var cmd = 'sysinfo | json UUID';
 
@@ -50,8 +69,11 @@ test('setup', function setupTest(t) {
             t.ifError(err2, 'vmadm list error');
             t.ok(numInsts >= 1, 'at least one amonredis instance exists');
             NUM_INSTS = numInsts;
-
-            t.end();
+            getChannelForLatestLocalImg(function channelCb(err3, c) {
+                t.ifError(err3);
+                CHANNEL = c;
+                t.end();
+            });
         });
     });
 });
@@ -168,13 +190,16 @@ test('sdcadm create amonredis --dev-allow-multiple-instances ' +
 
 
 // Create test with latest available image:
-test('sdcadm create amonredis --dev-allow-multiple-instances' +
+// TODO: Skip this test until we have support for channels
+// in sdcadm create (TRITON-477)
+test.skip('sdcadm create amonredis --dev-allow-multiple-instances' +
      ' -y -s --image', function createWithLatestImg(t) {
     vasync.pipeline({
         arg: {},
         funcs: [
             function getLatestImg(ctx, next) {
-                getLatestImgAvail(function getImgCb(updatesErr, imageUuid) {
+                getLatestImgAvail(CHANNEL,
+                    function getImgCb(updatesErr, imageUuid) {
                     t.ifError(updatesErr, 'updates-imgadm list error');
                     ctx.image_uuid = imageUuid;
                     next();
@@ -183,7 +208,8 @@ test('sdcadm create amonredis --dev-allow-multiple-instances' +
             function createAmonRedis(ctx, next) {
                 var cmd = 'sdcadm create amonredis ' +
                           '--dev-allow-multiple-instances --yes -s ' +
-                          HEADNODE_UUID + ' --image=' + ctx.image_uuid;
+                          HEADNODE_UUID + ' --image=' + ctx.image_uuid +
+                    ' -C ' + CHANNEL;
                 exec(cmd, function execCb(err, stdout, stderr) {
                     t.ifError(err, 'Execution error');
                     t.equal(stderr, '', 'Empty stderr');
diff --git a/test/experimental.test.js b/test/experimental.test.js
index ce2c4d8..3a1d10b 100644
--- a/test/experimental.test.js
+++ b/test/experimental.test.js
@@ -40,7 +40,7 @@ function getCurrentAgentsImgManifest(t, cb) {
     }
     var command;
     if (CURRENT_AGENTS_VERSION.match(UUID_RE)) {
-        command = 'updates-imgadm get ' + CURRENT_AGENTS_VERSION;
+        command = 'updates-imgadm get ' + CURRENT_AGENTS_VERSION + ' -C \'*\'';
     } else {
         command = 'updates-imgadm list version=~master' +
         CURRENT_AGENTS_VERSION + ' --json';
diff --git a/test/platform.test.js b/test/platform.test.js
index b236357..6a7e9d0 100644
--- a/test/platform.test.js
+++ b/test/platform.test.js
@@ -201,11 +201,8 @@ test('sdcadm platform available', function (t) {
 
             t.deepEqual(titles, AVAIL_TITLES, 'check column titles');
         } else {
-            t.equal(platformsDetails.shift().join(' '),
-                'The latest platform image for "dev"' +
-                ' channel is already installed.',
-                'Up to date platform'
-            );
+            t.notEqual(platformsDetails.shift().join(' ')
+                .indexOf('already installed'), -1);
         }
 
         platformsDetails.forEach(function (p) {
diff --git a/test/runtests b/test/runtests
index d88e0cd..5a16ef3 100755
--- a/test/runtests
+++ b/test/runtests
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright 2016, Joyent, Inc.
+# Copyright 2018, Joyent, Inc.
 #
 
 #
@@ -138,7 +138,8 @@ for file in $test_files; do
     echo "# $test_file"
     PATH=$NODE_INSTALL/bin:$PATH $TAPE $file \
         | tee $RESULTS/$test_file.tap
-    if [[ "$?" != "0" ]]; then
+    retval=$?
+    if [[ "${retval}" != "0" ]]; then
         echo $file >> $FAILING_LIST
         [[ -n "$opt_stop_on_failure" ]] && break
     fi
@@ -179,4 +180,4 @@ if [[ ${failing_tests} -gt 0 ]]; then
 fi
 echo ""
 
-exit $failing_tests
+exit $fail
diff --git a/test/sdcadm.test.js b/test/sdcadm.test.js
index 35cd336..2e2279d 100644
--- a/test/sdcadm.test.js
+++ b/test/sdcadm.test.js
@@ -41,7 +41,7 @@ test('sdcadm --help', function (t) {
 test('sdcadm --version', function (t) {
     exec('sdcadm --version', function (err, stdout, stderr) {
         t.ifError(err, 'no version error');
-        t.ok(stdout.match(/^sdcadm \d+\.\d+\.\d+ \(master-\d+T\d+Z-.+\)/));
+        t.ok(stdout.match(/^sdcadm \d+\.\d+\.\d+ \([\w-]+-\d+T\d+Z-.+\)/));
         t.equal(stderr, '');
 
         t.end();
diff --git a/test/self-update.test.js b/test/self-update.test.js
index 94e5c4b..60c5931 100644
--- a/test/self-update.test.js
+++ b/test/self-update.test.js
@@ -58,11 +58,26 @@ function getSdcadmBuildstampVersion(t, cb) {
     });
 }
 
+function getSdcadmChannel(t, cb) {
+    if (CURRENT_VERSION === '') {
+        cb();
+        return;
+    }
+    var command = 'updates-imgadm get ' + CURRENT_VERSION +
+        ' -C \'*\' | json channels[0]';
+    exec(command, function (err, stdout, stderr) {
+        t.ifError(err, 'getSdcadmChannel error');
+        t.equal(stderr, '', 'getSdcadmChannel stderr');
+        t.ok(stdout, 'getSdcadmChannel stdout');
+        cb(stdout.trim());
+    });
+}
+
 
 test('setup', function (t) {
     getSdcadmBuildstampVersion(t, function (data) {
         var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
-            'tag.buildstamp=' + data + ' --latest -o uuid -H';
+            'tag.buildstamp=' + data + ' --latest -o uuid -H -C \'*\'';
         exec(updatesCmd, function (err2, stdout, stderr) {
             t.ifError(err2);
             CURRENT_VERSION = stdout.trim();
@@ -117,7 +132,7 @@ test('sdcadm self-update --latest --channel=staging', function (t) {
 
 
 test('sdcadm self-update --latest', function (t) {
-    var cmd = 'sdcadm self-update --latest';
+    var cmd = 'sdcadm self-update --latest --channel=dev';
     exec(cmd, function (err, stdout, stderr) {
         checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
     });
@@ -125,8 +140,12 @@ test('sdcadm self-update --latest', function (t) {
 
 
 test('sdcadm self-update IMAGE_UUID', function (t) {
-    var cmd = 'sdcadm self-update ' + CURRENT_VERSION;
-    exec(cmd, function (err, stdout, stderr) {
-        checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
+    getSdcadmChannel(t, function (channel) {
+        var cmd = 'sdcadm self-update ' + CURRENT_VERSION + ' -C' + channel;
+        exec(cmd, function (err, stdout, stderr) {
+            checkUpdateResults(t, err, stdout, stderr,
+                ['Using channel ' + channel]);
+        });
     });
+
 });
diff --git a/test/update-gz-tools.test.js b/test/update-gz-tools.test.js
index d3624c4..e7c0723 100644
--- a/test/update-gz-tools.test.js
+++ b/test/update-gz-tools.test.js
@@ -17,6 +17,7 @@ var util = require('util');
 var shared = require('./shared');
 
 var CURRENT_GZ_TOOLS_VERSION = null;
+var CURRENT_GZ_TOOLS_CHANNEL;
 var LATEST_GZ_TOOLS_UUID = null;
 
 /*
@@ -32,21 +33,47 @@ function getGzToolsVersion(t, cb) {
     });
 }
 
+function getGzToolsChannel(t, cb) {
+    if (CURRENT_GZ_TOOLS_VERSION === '') {
+        cb();
+        return;
+    }
+    var command = 'updates-imgadm get ' + CURRENT_GZ_TOOLS_VERSION +
+        ' -C \'*\' | json channels[0]';
+    exec(command, function (err, stdout, stderr) {
+        t.ifError(err, 'getGzToolsChannel error');
+        // It is possible that we have a gz-tools version already removed
+        // from updates-imgadm:
+        if (stderr && stderr.match('ResourceNotFound')) {
+            cb('');
+            return;
+        } else {
+            t.equal(stderr, '', 'getGzToolsChannel stderr');
+            t.ok(stdout, 'getGzToolsChannel stdout');
+            cb(stdout.trim());
+        }
+    });
+}
+
 test('prepare', function (t) {
     shared.prepare(t, {external_nics: true});
 });
 
 test('setup', function (t) {
-    getGzToolsVersion(t, function (data) {
+    getGzToolsVersion(t, function versionCb(data) {
         CURRENT_GZ_TOOLS_VERSION = data;
-        var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
-            'name=gz-tools --latest -o uuid -H';
-        exec(updatesCmd, function (err2, stdout, stderr) {
-            t.ifError(err2, 'Error listing gz-tools from updates-imgadm');
-            LATEST_GZ_TOOLS_UUID = stdout.trim();
-            t.ok(LATEST_GZ_TOOLS_UUID, 'Latest gz-tools uuid');
-            t.equal(stderr, '', 'empty stderr');
-            t.end();
+        getGzToolsChannel(t, function channelCb(channel) {
+            CURRENT_GZ_TOOLS_CHANNEL = channel;
+            var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
+                'name=gz-tools --latest -o uuid -H -C ' +
+                CURRENT_GZ_TOOLS_CHANNEL;
+            exec(updatesCmd, function (err2, stdout, stderr) {
+                t.ifError(err2, 'Error listing gz-tools from updates-imgadm');
+                LATEST_GZ_TOOLS_UUID = stdout.trim();
+                t.ok(LATEST_GZ_TOOLS_UUID, 'Latest gz-tools uuid');
+                t.equal(stderr, '', 'empty stderr');
+                t.end();
+            });
         });
     });
 });
@@ -54,11 +81,9 @@ test('setup', function (t) {
 
 test('update-gz-tools --latest --just-download', function (t) {
     var cmd = 'sdcadm experimental update-gz-tools --latest ' +
-        '--just-download --force-reinstall';
+        '--just-download --force-reinstall -C ' +
+        CURRENT_GZ_TOOLS_CHANNEL;
     exec(cmd, function (err, stdout, stderr) {
-        // FIXME: We need to either stop skipping tarball decompression
-        // when `justDownload` option is provided, or skip tarball files
-        // validation otherwise. TRITON-347
         t.ifError(err, 'Update gz-tools error');
         var findStrings = [
             'Downloading gz-tools',
@@ -107,7 +132,8 @@ test('keep --latest image', function (t) {
 
 test('update-gz-tools --latest --concurrency=3', function (t) {
     var cmd = 'sdcadm experimental update-gz-tools --latest ' +
-        '--force-reinstall --concurrency=3';
+        '--force-reinstall --concurrency=3 -C ' +
+        CURRENT_GZ_TOOLS_CHANNEL;
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
         var findStrings = [
@@ -135,7 +161,8 @@ test('update-gz-tools --latest --concurrency=3', function (t) {
 });
 
 test('update-gz-tools --latest w/o --force-reinstall', function (t) {
-    var cmd = 'sdcadm experimental update-gz-tools --latest';
+    var cmd = 'sdcadm experimental update-gz-tools --latest -C ' +
+        CURRENT_GZ_TOOLS_CHANNEL;
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
         var findStrings = [
@@ -155,7 +182,8 @@ test('update-gz-tools --latest w/o --force-reinstall', function (t) {
 test('update-gz-tools /path/to/installer', function (t) {
     var cmd = util.format('sdcadm experimental update-gz-tools ' +
         '/var/tmp/backup-gz-tools-%s.tgz ' +
-        '--force-reinstall', LATEST_GZ_TOOLS_UUID);
+        '--force-reinstall -C %s', LATEST_GZ_TOOLS_UUID,
+        CURRENT_GZ_TOOLS_CHANNEL);
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
         var findStrings = [
@@ -180,13 +208,14 @@ test('update-gz-tools IMAGE-UUID', function (t) {
         t.end();
         return;
     }
-    if (CURRENT_GZ_TOOLS_VERSION === '') {
+    if (CURRENT_GZ_TOOLS_VERSION === '' || CURRENT_GZ_TOOLS_CHANNEL === '') {
         t.end();
         return;
     }
     var cmd = 'sdcadm experimental update-gz-tools ' +
         '--force-reinstall ' +
-        CURRENT_GZ_TOOLS_VERSION;
+        CURRENT_GZ_TOOLS_VERSION + ' -C ' +
+        CURRENT_GZ_TOOLS_CHANNEL;
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
         console.log(stdout);
@@ -205,7 +234,7 @@ test('remove --latest image backup', function (t) {
         LATEST_GZ_TOOLS_UUID);
     exec(cmd, function (err, stdout, stderr) {
         t.ifError(err, 'Update gz-tools error');
-        console.log(stdout);
+        t.equal(stdout, '', 'Update gz.tools stdout');
         t.equal(stderr, '', 'Update gz.tools stderr');
         t.end();
     });
diff --git a/test/update.test.js b/test/update.test.js
index 8d2716d..6b560d4 100644
--- a/test/update.test.js
+++ b/test/update.test.js
@@ -16,7 +16,7 @@
  * - Test channels
  */
 
-
+var common = require('./common');
 var shared = require('./shared');
 
 var test = require('tape').test;
@@ -31,6 +31,8 @@ var PLAN_PATH;
 
 var PAPI_IMG_UUID;
 
+var UUID_RE = common.UUID_RE;
+
 test('setup', function (t) {
     shared.prepare(t, {external_nics: true});
 });
@@ -91,19 +93,25 @@ test('sdcadm update --just-images', function (t) {
             t.ok(stdout.match(regex), 'check update regex present');
         });
 
-        var imgUuid = stdout.match(/Imported image (.+?)/)[0];
-        PAPI_IMG_UUID = imgUuid;
+        var imgUuid = stdout.match(/Imported image (.+)/);
+        if (imgUuid && imgUuid[1].match(UUID_RE)) {
+            PAPI_IMG_UUID = imgUuid[1];
+        }
 
-        var cmd = 'sdc-imgapi /images/' + imgUuid + ' | json -H';
-        exec(cmd, function (err2, stdout2, stderr2) {
-            t.ifError(err2);
-            t.equal(stderr2, '');
+        if (PAPI_IMG_UUID) {
+            var cmd = 'sdc-imgapi /images/' + PAPI_IMG_UUID + ' | json -H';
+            exec(cmd, function (err2, stdout2, stderr2) {
+                t.ifError(err2);
+                t.equal(stderr2, '');
 
-            var img = JSON.parse(stdout2);
-            t.equal(img.name, 'papi');
+                var img = JSON.parse(stdout2);
+                t.equal(img.name, 'papi');
 
+                t.end();
+            });
+        } else {
             t.end();
-        });
+        }
     });
 });
 
@@ -121,9 +129,9 @@ test('sdcadm update', function (t) {
         }
 
         var findRegex = [
-            'Installing image .+ \\(papi',
-            'Reprovisioning papi VM',
-            'Wait \\(60s\\) for papi instance',
+            'Installing image',
+            'Reprovisioning VM',
+            'Waiting for papi instance',
             'Updated successfully'
         ];
 
@@ -135,17 +143,22 @@ test('sdcadm update', function (t) {
         t.ok(update);
         PLAN_PATH = '/var/sdcadm/updates/' + update + '/plan.json';
 
-        var papiUuid = stdout.match('papi instance (.+?) to come up')[1];
+        var instMatch = stdout.match('papi instance (.+?) to come up');
+        if (instMatch && instMatch[1].match(UUID_RE)) {
+            var papiUuid = instMatch[1];
 
-        var cmd = 'sdc-vmapi /vms/' + papiUuid + ' | json -H';
-        exec(cmd, function (err2, stdout2, stderr2) {
-            t.ifError(err2);
-            t.equal(stderr2, '');
+            var cmd = 'sdc-vmapi /vms/' + papiUuid + ' | json -H';
+            exec(cmd, function (err2, stdout2, stderr2) {
+                t.ifError(err2);
+                t.equal(stderr2, '');
 
-            var papi = JSON.parse(stdout2);
-            t.equal(papi.image_uuid, PAPI_IMG_UUID);
+                var papi = JSON.parse(stdout2);
+                t.equal(papi.image_uuid, PAPI_IMG_UUID);
+                t.end();
+            });
+        } else {
             t.end();
-        });
+        }
     });
 });
 
@@ -180,7 +193,7 @@ test('sdcadm update --force-same-image', function (t) {
 
         findStrings.forEach(function (str) {
             t.notEqual(stdout.indexOf(str), -1,
-                    util.format('check update string present %s', str));
+                    util.format('check update string present: %s', str));
         });
         t.end();
 
@@ -210,7 +223,7 @@ test('update non-HA moray and SAPI consecutively', function (t) {
 
         findStrings.forEach(function (str) {
             t.notEqual(stdout.indexOf(str), -1,
-                    util.format('check update string present %s', str));
+                    util.format('check update string present: %s', str));
         });
         t.end();
     });
-- 
2.21.0

