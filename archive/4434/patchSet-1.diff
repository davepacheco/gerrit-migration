From a743c5bbbab70b3b9d3a42353f1f00989ed222d9 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 26 Jun 2018 16:27:31 +0200
Subject: [PATCH] TRITON-92 set 'dns_domain' on all Triton core VMs

---
 scripts/build-payload.js | 11 ++++-------
 scripts/headnode.sh      |  6 ------
 scripts/sdc-init.js      | 42 ++++++++++++++++++++--------------------
 3 files changed, 25 insertions(+), 34 deletions(-)

diff --git a/scripts/build-payload.js b/scripts/build-payload.js
index fc9fe1ca..e06b6d11 100755
--- a/scripts/build-payload.js
+++ b/scripts/build-payload.js
@@ -41,8 +41,7 @@ async.series([
     },
     function loadConfig(cb) {
         execFile('/bin/bash', ['/lib/sdc/config.sh', '-json'],
-            function (error, stdout, stderr)
-            {
+            function (error, stdout, stderr) {
                 if (error) {
                     return cb(new Error('FATAL: failed to get config: ' +
                               stderr));
@@ -60,8 +59,7 @@ async.series([
     },
     function loadCreateJson(cb) {
         fs.readFile('/usbkey/zones/' + zone + '/create.json',
-            function (error, data)
-            {
+            function (error, data) {
                 if (error) {
                     return cb(error);
                 }
@@ -259,8 +257,8 @@ async.series([
             zkServers = config.binder_resolver_ips.split(',')
                 .map(function zkConfig(e) {
                     return {
-                        host : e,
-                        port : 2181
+                        host: e,
+                        port: 2181
                     };
                 });
             regConfig.zookeeper = {};
@@ -314,7 +312,6 @@ async.series([
         if (zone !== 'sapi') {
             return cb();
         }
-        obj.customer_metadata['dns_domain'] = config['dns_domain'];
 
         // Explicitly put this first sapi in proto mode.
         obj.customer_metadata['SAPI_PROTO_MODE'] = true;
diff --git a/scripts/headnode.sh b/scripts/headnode.sh
index b01d14b3..d22cb86c 100755
--- a/scripts/headnode.sh
+++ b/scripts/headnode.sh
@@ -640,12 +640,6 @@ write_initial_config
 registrar_setup
 HERE
 
-        if [[ -n "${CONFIG_dns_domain}" ]]; then
-            vmadm update $sapi_uuid <<EOF
-  {"set_customer_metadata": {"dns_domain": "${CONFIG_dns_domain}"}}
-EOF
-        fi
-
         setup_state_add "sapi_bootstrapped"
     fi
 }
diff --git a/scripts/sdc-init.js b/scripts/sdc-init.js
index 03dba9e0..366d7c95 100755
--- a/scripts/sdc-init.js
+++ b/scripts/sdc-init.js
@@ -26,12 +26,8 @@ var Logger = require('/usr/node/node_modules/bunyan');
 var sprintf = require('util').format;
 
 // Globals
-var config;
-var sdcExtras;
 var packages;
-
-var app;
-var services;
+var self;
 
 // XXX TODO:
 // parameterize /usbkey prefix (per headnode.sh)
@@ -83,7 +79,14 @@ function translateConfig(cb) {
                  'in SDC application config.');
     }
 
-    if (! config.hasOwnProperty('binder_admin_ips')) {
+    if (config.hasOwnProperty('dns_domain')) {
+        sdcExtras.params.dns_domain = config.dns_domain;
+    } else {
+        log.warn('No dns_domain in config, not setting dns_domain ' +
+                 'in SDC application config.');
+    }
+
+    if (!config.hasOwnProperty('binder_admin_ips')) {
         var msg = 'No binder_admin_ips in config, impossible to set up';
         log.fatal(msg);
         return cb(new Error(msg));
@@ -100,7 +103,7 @@ function translateConfig(cb) {
                 num: 1,
                 last: true
             };
-            if (i == c.length - 1) server.last = true;
+            if (i === c.length - 1) server.last = true;
             return server;
         });
         sdcExtras.metadata['ZK_SERVERS'] = zkServers;
@@ -161,7 +164,7 @@ function addServiceDomains(cb) {
         self.services = services;
 
         services.forEach(function (service) {
-            if (service == 'manatee')
+            if (service === 'manatee')
                 return;
             var serviceKey = sprintf('%s_SERVICE', service.toUpperCase());
             extras.metadata[serviceKey] = serviceDomain(service);
@@ -277,7 +280,7 @@ function getOrCreateSdc(cb) {
                     err.message);
                 return cb(err);
             }
-            log.debug({ sdcApp : app }, 'Created SDC application');
+            log.debug({ sdcApp: app }, 'Created SDC application');
             self.app = app;
             return cb(null);
     });
@@ -320,7 +323,7 @@ function addSdcManifests(manifests, cb) {
 
     if (Object.getOwnPropertyNames(manifests).length > 0) {
         self.sapi.updateApplication(app.uuid,
-            { manifests : manifests }, function (err) {
+            { manifests: manifests }, function (err) {
                 if (err) {
                     log.fatal(err, 'Failed to update app: %s', err.message);
                     return cb(err);
@@ -344,12 +347,12 @@ function prepareServices(cb) {
     var services = self.services;
     var dirname = '/usbkey/services';
 
-    log.debug({ services : services }, 'Creating services.');
+    log.debug({ services: services }, 'Creating services.');
     vasync.forEachParallel({
         func: function (service, _cb) {
             // can't believe we need to read a file just for this.
             var file = dirname + '/' + service + '/service.json';
-            var extras = { metadata : {}, params : {} };
+            var extras = { metadata: {}, params: {} };
             var svcDomain = serviceDomain(service);
             extras.metadata['SERVICE_DOMAIN'] = svcDomain;
             var svcDef;
@@ -391,7 +394,7 @@ function prepareServices(cb) {
         }
 
         var serviceList = results.successes;
-        log.debug({ services : serviceList }, 'Created services');
+        log.debug({ services: serviceList }, 'Created services');
         return cb(null, serviceList);
     });
 }
@@ -418,7 +421,7 @@ function filterServices(serviceList, cb) {
             assert.object(svcDef, 'svcDef');
 
             // papi needs package defn's.
-            if (service == 'papi') {
+            if (service === 'papi') {
                 packages = Object.keys(self.config).reduce(function (acc, key) {
                     if (key.match('^pkg_')) acc.push(self.config[key]);
                     return acc;
@@ -428,7 +431,7 @@ function filterServices(serviceList, cb) {
             }
 
             // napi needs resolvers in metadata
-            if (service == 'napi') {
+            if (service === 'napi') {
                 extras.metadata['admin_resolvers'] =
                 JSON.stringify(self.config.binder_admin_ips.split(','));
                 extras.metadata['ext_resolvers'] =
@@ -473,9 +476,6 @@ function filterServices(serviceList, cb) {
             }
             extras.metadata['assets-ip'] = self.config.assets_admin_ip;
             extras.metadata['user-script'] = data.toString();
-            if (service === 'sapi' && self.config.dns_domain) {
-                extras.metadata['dns_domain'] = self.config.dns_domain;
-            }
 
             // There's no need to pass the service defintion to
             // getOrCreateService() below, so remove it.
@@ -484,7 +484,7 @@ function filterServices(serviceList, cb) {
             return serviceArgs;
         });
 
-        log.debug({serviceList : list}, 'Adjusted service definitions');
+        log.debug({serviceList: list}, 'Adjusted service definitions');
 
         return cb(null, list);
     });
@@ -504,14 +504,14 @@ function getOrCreateServices(serviceList, cb) {
             return cb(err);
         }
         self.services = results.successes;
-        log.debug({ services : self.services }, 'Created SDC servces');
+        log.debug({ services: self.services }, 'Created SDC servces');
         return cb(null, self.services);
     });
 }
 
 /* -- Mainline -- */
 
-var self = this;
+self = this;
 self.log = new Logger({
     name: 'sdc-init',
     level: 'trace',
-- 
2.21.0

