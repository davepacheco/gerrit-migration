From c7ff100656d9fcbe069b95ff5c9df68a3a858bd6 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Wed, 14 Jun 2017 12:32:42 -0700
Subject: [PATCH] VOLAPI-52 sending bogus predicate to ListVolumes returns an
 incorrect response Reviewed by: Josh Wilsdon <jwilsdon@joyent.com> Approved
 by: Josh Wilsdon <jwilsdon@joyent.com>

---
 lib/endpoints/volumes.js                     |  3 +-
 lib/validation/predicate.js                  |  4 +-
 package.json                                 |  2 +-
 test/integration/list-with-predicate.test.js | 63 +++++++++++++++++++-
 4 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index 469bc69..cada867 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -732,8 +732,7 @@ function validateListVolumes(req, res, next) {
     }
 
     if (errs.length > 0) {
-        validationErr = next(new Error('Invalid list parameters: '
-            + errs));
+        validationErr = next(new errors.ValidationError(errs));
     }
 
     next(validationErr);
diff --git a/lib/validation/predicate.js b/lib/validation/predicate.js
index ce5c710..8a93ee4 100644
--- a/lib/validation/predicate.js
+++ b/lib/validation/predicate.js
@@ -10,6 +10,7 @@
 
 var assert = require('assert-plus');
 var krill = require('krill');
+var VError = require('verror');
 
 var volumes = require('../volumes');
 var volumesValidation = require('./volumes');
@@ -40,7 +41,8 @@ function validatePredicate(predicateString) {
     try {
         predicateObject = JSON.parse(predicateString);
     } catch (parseErr) {
-        error = parseErr;
+        error = new VError(parseErr, 'Could not parse JSON predicate %s',
+            predicateString);
     }
 
     if (!error) {
diff --git a/package.json b/package.json
index 3e3501a..587aaf6 100644
--- a/package.json
+++ b/package.json
@@ -14,7 +14,7 @@
     "bunyan": "^1.8.0",
     "changefeed": "1.2.2",
     "jsprim": "^1.2.2",
-    "krill": "git+https://github.com/misterdjules/node-krill.git#fix-empty-predicate-ldap-conversion",
+    "krill": "1.0.1",
     "ldap-filter": "^0.3.1",
     "libuuid": "^0.2.0",
     "mkdirp": "^0.5.1",
diff --git a/test/integration/list-with-predicate.test.js b/test/integration/list-with-predicate.test.js
index 4c0a0df..554d1b1 100644
--- a/test/integration/list-with-predicate.test.js
+++ b/test/integration/list-with-predicate.test.js
@@ -155,17 +155,76 @@ test('listing nfs shared volumes with an invalid predicate', function (tt) {
             });
         });
 
-    tt.test('using invalid name value in predicate should error',
+    tt.test('using invalid name value in predicate should error', function (t) {
+        var predicate = {
+            eq: ['name', '/invalid/name']
+        };
+
+        API_CLIENTS.volapi.listVolumes({
+            predicate: JSON.stringify(predicate)
+        }, function onListVolumes(err, req, res, obj) {
+            t.ok(err,
+                'listing volumes with invalid predicate should error');
+            t.end();
+        });
+    });
+
+    tt.test('using malformed predicate should error', function (t) {
+        var MALFORMED_PREDICATE = 'foo';
+
+        API_CLIENTS.volapi.listVolumes({
+            predicate: MALFORMED_PREDICATE
+        }, function onListVolumes(err, req, res, obj) {
+            var expectedErrMsg = 'Could not parse JSON predicate ' +
+                MALFORMED_PREDICATE;
+            var expectedStatusCode = 409;
+
+            t.ok(err,
+                'listing volumes with invalid predicate should error');
+            t.equal(err.statusCode, expectedStatusCode,
+                'response status code shoud be ' + expectedStatusCode +
+                    ', was: ' + res.statusCode);
+
+            t.ok(err.message, 'response should have error message, was: ' +
+                err.message);
+            if (err.message !== undefined) {
+                t.ok(err.message.indexOf(expectedErrMsg) !== -1,
+                    'error message should include ' + expectedErrMsg +
+                        ', was: ' + err.message);
+            }
+
+            t.end();
+        });
+    });
+
+    tt.test('using invalid value type in predicate should error',
         function (t) {
             var predicate = {
-                eq: ['name', '/invalid/name']
+                eq: ['invalid-pred', null]
             };
 
             API_CLIENTS.volapi.listVolumes({
                 predicate: JSON.stringify(predicate)
             }, function onListVolumes(err, req, res, obj) {
+                var expectedErrMsg =
+                    'predicate { eq: [ \'invalid-pred\', null ] }: field ' +
+                        '\"invalid-pred\" is not a string, number, or boolean';
+                var expectedStatusCode = 409;
+
                 t.ok(err,
                     'listing volumes with invalid predicate should error');
+                t.equal(err.statusCode, expectedStatusCode,
+                    'response status code shoud be ' + expectedStatusCode +
+                        ', was: ' + res.statusCode);
+
+                t.ok(err.message, 'response should have error message, was: ' +
+                    err.message);
+                if (err.message !== undefined) {
+                    t.ok(err.message.indexOf(expectedErrMsg) !== -1,
+                        'error message should include ' + expectedErrMsg +
+                            ', was: ' + err.message);
+                }
+
                 t.end();
             });
         });
-- 
2.21.0

