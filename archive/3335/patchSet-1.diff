From d0749fa2eef3e8b5af59c8f31d2b9ce186b2efa3 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Mon, 22 Jan 2018 20:17:33 +0000
Subject: [PATCH] TRITON-76 Fix firewall rule port and type number validation

---
 lib/index.js        | 15 ++++++++-------
 test/parser.test.js | 28 +++++++++++++++++++++++++++-
 2 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/lib/index.js b/lib/index.js
index fa88a66..d603207 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * firewall rule parser: entry point
@@ -39,8 +39,6 @@ var validators = require('./validators');
 
 
 
-var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-
 /**
  * The fwrule language is versioned so that use of new features can be
  * restricted. These versions are:
@@ -52,6 +50,9 @@ var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 var CURR_VERSION = 3;
 
 
+var NON_DIGIT_RE = /[^0-9]/;
+
+
 // --- Internal helper functions
 
 
@@ -107,7 +108,7 @@ parser.yy.validateSubnet = function validateSubnet(input) {
 
 
 parser.yy.validatePortNumber = function validatePortNumber(num) {
-    if (isNaN(num) || Number(num) < 1 || Number(num) > 65535) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 1 || Number(num) > 65535) {
         throw new validators.InvalidParamError('rule',
             'Port number "%s" is invalid', num);
     }
@@ -141,7 +142,7 @@ parser.yy.createMaybePortRange = function createMaybePortRange(num) {
 
 
 parser.yy.validateICMPcode = function validateICMPcode(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 0 || Number(num) > 255) {
         throw new validators.InvalidParamError('rule',
             'ICMP code "%s" is invalid', num);
     }
@@ -149,7 +150,7 @@ parser.yy.validateICMPcode = function validateICMPcode(num) {
 
 
 parser.yy.validateICMPtype = function validateICMPtype(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 0 || Number(num) > 255) {
         throw new validators.InvalidParamError('rule',
             'ICMP type "%s" is invalid', num);
     }
@@ -157,7 +158,7 @@ parser.yy.validateICMPtype = function validateICMPtype(num) {
 
 
 parser.yy.validateUUID = function validateUUID(text) {
-    if (!uuidRE.test(text)) {
+    if (!validators.validateUUID(text)) {
         throw new validators.InvalidParamError('rule',
             'UUID "%s" is invalid', text);
     }
diff --git a/test/parser.test.js b/test/parser.test.js
index ff90235..f2dbc35 100644
--- a/test/parser.test.js
+++ b/test/parser.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * Unit tests for the firewall rule parser
@@ -289,6 +289,20 @@ test('Invalid: Parameters for TCP & UDP', function (t) {
         'FROM any TO any ALLOW udp PORT hello',
         'FROM any TO any ALLOW tcp PORT ssh',
         'FROM any TO any ALLOW udp PORT ssh',
+        'FROM any TO any ALLOW tcp PORT "ssh"',
+        'FROM any TO any ALLOW udp PORT "ssh"',
+        'FROM any TO any ALLOW tcp PORT 50.123',
+        'FROM any TO any ALLOW udp PORT 50.123',
+        'FROM any TO any ALLOW tcp PORT "50"',
+        'FROM any TO any ALLOW udp PORT "50"',
+        'FROM any TO any ALLOW tcp PORT "50.123"',
+        'FROM any TO any ALLOW udp PORT "50.123"',
+        'FROM any TO any ALLOW tcp PORT 0x5',
+        'FROM any TO any ALLOW udp PORT 0x5',
+        'FROM any TO any ALLOW tcp PORT 9e1',
+        'FROM any TO any ALLOW udp PORT 9e1',
+        'FROM any TO any ALLOW tcp PORT 99e-1',
+        'FROM any TO any ALLOW udp PORT 99e-1',
         'FROM any TO any ALLOW tcp PORT _',
         'FROM any TO any ALLOW udp PORT _',
         'FROM any TO any ALLOW tcp PORT *',
@@ -326,8 +340,20 @@ test('Invalid: Parameters for ICMP(6)', function (t) {
         'FROM any TO any ALLOW icmp6 TYPE 1:0',
         'FROM any TO any ALLOW icmp 1:0',
         'FROM any TO any ALLOW icmp6 1:0',
+        'FROM any TO any ALLOW icmp TYPE 0x80',
+        'FROM any TO any ALLOW icmp6 TYPE 0x80',
+        'FROM any TO any ALLOW icmp TYPE 9e1',
+        'FROM any TO any ALLOW icmp6 TYPE 9e1',
+        'FROM any TO any ALLOW icmp TYPE 99e-1',
+        'FROM any TO any ALLOW icmp6 TYPE 99e-1',
         'FROM any TO any ALLOW icmp TYPE 128 CODE foo',
         'FROM any TO any ALLOW icmp6 TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 0x1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 0x1',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 1e1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 1e1',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 99e-1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 99e-1',
         'FROM any TO any ALLOW icmp TYPE 128 CODE *',
         'FROM any TO any ALLOW icmp6 TYPE 128 CODE *',
         'FROM any TO any ALLOW icmp TYPE 128 CODE _',
-- 
2.21.0

