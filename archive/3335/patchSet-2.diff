From 770f5a0d380c84c66ab1861feee897d5fab2168a Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Mon, 22 Jan 2018 20:17:33 +0000
Subject: [PATCH] TRITON-76 Fix firewall rule port and type number validation

---
 Makefile             |  2 +-
 lib/index.js         | 15 ++++++++-------
 lib/rule.js          | 12 ++++++------
 package.json         |  2 +-
 test/invalid.test.js |  8 ++++----
 test/parser.test.js  | 28 +++++++++++++++++++++++++++-
 6 files changed, 47 insertions(+), 20 deletions(-)

diff --git a/Makefile b/Makefile
index d041e35..b2811fd 100644
--- a/Makefile
+++ b/Makefile
@@ -41,7 +41,7 @@ JSL_FILES_NODE   = $(JS_FILES)
 JSL_FLAGS  	?= --nologo --nosummary
 JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
 JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
+JSSTYLE_FLAGS    = -o indent=2,strict-indent=1,doxygen,unparenthesized-return=0,leading-right-paren-ok=1
 ESLINT		= ./node_modules/.bin/eslint
 ESLINT_CONF	= tools/eslint.node.conf
 ESLINT_FILES	= $(JS_FILES)
diff --git a/lib/index.js b/lib/index.js
index fa88a66..d603207 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * firewall rule parser: entry point
@@ -39,8 +39,6 @@ var validators = require('./validators');
 
 
 
-var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-
 /**
  * The fwrule language is versioned so that use of new features can be
  * restricted. These versions are:
@@ -52,6 +50,9 @@ var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 var CURR_VERSION = 3;
 
 
+var NON_DIGIT_RE = /[^0-9]/;
+
+
 // --- Internal helper functions
 
 
@@ -107,7 +108,7 @@ parser.yy.validateSubnet = function validateSubnet(input) {
 
 
 parser.yy.validatePortNumber = function validatePortNumber(num) {
-    if (isNaN(num) || Number(num) < 1 || Number(num) > 65535) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 1 || Number(num) > 65535) {
         throw new validators.InvalidParamError('rule',
             'Port number "%s" is invalid', num);
     }
@@ -141,7 +142,7 @@ parser.yy.createMaybePortRange = function createMaybePortRange(num) {
 
 
 parser.yy.validateICMPcode = function validateICMPcode(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 0 || Number(num) > 255) {
         throw new validators.InvalidParamError('rule',
             'ICMP code "%s" is invalid', num);
     }
@@ -149,7 +150,7 @@ parser.yy.validateICMPcode = function validateICMPcode(num) {
 
 
 parser.yy.validateICMPtype = function validateICMPtype(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
+    if (NON_DIGIT_RE.test(num) || Number(num) < 0 || Number(num) > 255) {
         throw new validators.InvalidParamError('rule',
             'ICMP type "%s" is invalid', num);
     }
@@ -157,7 +158,7 @@ parser.yy.validateICMPtype = function validateICMPtype(num) {
 
 
 parser.yy.validateUUID = function validateUUID(text) {
-    if (!uuidRE.test(text)) {
+    if (!validators.validateUUID(text)) {
         throw new validators.InvalidParamError('rule',
             'UUID "%s" is invalid', text);
     }
diff --git a/lib/rule.js b/lib/rule.js
index d9eab02..93a26e8 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -393,14 +393,14 @@ function FwRule(data, opts) {
                 'global must be true or false'));
         }
 
-        if (hasOwnProperty(data, 'global')
-            && hasOwnProperty(data, 'owner_uuid') && data.global) {
+        if (hasOwnProperty(data, 'global') &&
+            hasOwnProperty(data, 'owner_uuid') && data.global) {
             errs.push(new validators.InvalidParamError('global',
                 'cannot specify both global and owner_uuid'));
         }
 
-        if (!hasOwnProperty(data, 'global')
-            && !hasOwnProperty(data, 'owner_uuid')) {
+        if (!hasOwnProperty(data, 'global') &&
+            !hasOwnProperty(data, 'owner_uuid')) {
             errs.push(new validators.InvalidParamError('owner_uuid',
                 'owner_uuid required'));
         }
@@ -671,8 +671,8 @@ FwRule.prototype.text = function () {
         );
     } else {
         ports = this.ports.map(function (port) {
-            if (hasOwnProperty(port, 'start')
-                && hasOwnProperty(port, 'end')) {
+            if (hasOwnProperty(port, 'start') &&
+                hasOwnProperty(port, 'end')) {
                 /*
                  * We only output PORTS when we have a range, since we don't
                  * distinguish PORTS 1, 2 from (PORT 1 AND PORT 2) after
diff --git a/package.json b/package.json
index 5f2aedb..8b542da 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,7 @@
   },
   "devDependencies": {
     "eslint": "2.13.1",
-    "eslint-plugin-joyent": "1.0.1",
+    "eslint-plugin-joyent": "1.3.0",
     "faucet": "0.0.1",
     "istanbul": "^0.4.0",
     "jison": "0.4.2",
diff --git a/test/invalid.test.js b/test/invalid.test.js
index 5fde866..1e407e5 100644
--- a/test/invalid.test.js
+++ b/test/invalid.test.js
@@ -313,22 +313,22 @@ var INVALID = [
     [ 'rule: bad ICMP type', {
         rule: 'FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 260'
         }, 'rule',
-        'ICMP type \"260\" is invalid'],
+        'ICMP type "260" is invalid'],
 
     [ 'rule: bad ICMP code', {
         rule: 'FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 8 CODE 270'
         }, 'rule',
-        'ICMP code \"270\" is invalid'],
+        'ICMP code "270" is invalid'],
 
     [ 'rule: bad ICMPv6 type', {
         rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP6 TYPE 260'
         }, 'rule',
-        'ICMP type \"260\" is invalid'],
+        'ICMP type "260" is invalid'],
 
     [ 'rule: bad ICMPv6 code', {
         rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP6 TYPE 128 CODE 270'
         }, 'rule',
-        'ICMP code \"270\" is invalid'],
+        'ICMP code "270" is invalid'],
 
     [ 'rule: max number of ICMPv6 types', {
         rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP ' + nTypes(9)
diff --git a/test/parser.test.js b/test/parser.test.js
index ff90235..f2dbc35 100644
--- a/test/parser.test.js
+++ b/test/parser.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * Unit tests for the firewall rule parser
@@ -289,6 +289,20 @@ test('Invalid: Parameters for TCP & UDP', function (t) {
         'FROM any TO any ALLOW udp PORT hello',
         'FROM any TO any ALLOW tcp PORT ssh',
         'FROM any TO any ALLOW udp PORT ssh',
+        'FROM any TO any ALLOW tcp PORT "ssh"',
+        'FROM any TO any ALLOW udp PORT "ssh"',
+        'FROM any TO any ALLOW tcp PORT 50.123',
+        'FROM any TO any ALLOW udp PORT 50.123',
+        'FROM any TO any ALLOW tcp PORT "50"',
+        'FROM any TO any ALLOW udp PORT "50"',
+        'FROM any TO any ALLOW tcp PORT "50.123"',
+        'FROM any TO any ALLOW udp PORT "50.123"',
+        'FROM any TO any ALLOW tcp PORT 0x5',
+        'FROM any TO any ALLOW udp PORT 0x5',
+        'FROM any TO any ALLOW tcp PORT 9e1',
+        'FROM any TO any ALLOW udp PORT 9e1',
+        'FROM any TO any ALLOW tcp PORT 99e-1',
+        'FROM any TO any ALLOW udp PORT 99e-1',
         'FROM any TO any ALLOW tcp PORT _',
         'FROM any TO any ALLOW udp PORT _',
         'FROM any TO any ALLOW tcp PORT *',
@@ -326,8 +340,20 @@ test('Invalid: Parameters for ICMP(6)', function (t) {
         'FROM any TO any ALLOW icmp6 TYPE 1:0',
         'FROM any TO any ALLOW icmp 1:0',
         'FROM any TO any ALLOW icmp6 1:0',
+        'FROM any TO any ALLOW icmp TYPE 0x80',
+        'FROM any TO any ALLOW icmp6 TYPE 0x80',
+        'FROM any TO any ALLOW icmp TYPE 9e1',
+        'FROM any TO any ALLOW icmp6 TYPE 9e1',
+        'FROM any TO any ALLOW icmp TYPE 99e-1',
+        'FROM any TO any ALLOW icmp6 TYPE 99e-1',
         'FROM any TO any ALLOW icmp TYPE 128 CODE foo',
         'FROM any TO any ALLOW icmp6 TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 0x1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 0x1',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 1e1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 1e1',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE 99e-1',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE 99e-1',
         'FROM any TO any ALLOW icmp TYPE 128 CODE *',
         'FROM any TO any ALLOW icmp6 TYPE 128 CODE *',
         'FROM any TO any ALLOW icmp TYPE 128 CODE _',
-- 
2.21.0

