From 01c9aeddbebcddad8c28ed1601d3435749234409 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 29 Nov 2017 23:38:48 +0000
Subject: [PATCH] OS-6476 Update cstyle and jsstyle in smartos-live

---
 src/Makefile            |  6 ++++
 src/bootparams.c        | 30 ++++++++++++-------
 src/disk_size.c         | 36 ++++++++++++-----------
 src/measure_terminal.c  |  8 +++---
 src/removable_disk.c    | 30 +++++++++----------
 src/sdc-on-tty.c        |  3 +-
 tools/cstyle            | 64 +++++++++++++++++++++++++++++++++++++----
 tools/jsstyle/README.md | 25 ++++++++++++++--
 tools/jsstyle/jsstyle   | 59 ++++++++++++++++++++++++++++---------
 9 files changed, 190 insertions(+), 71 deletions(-)

diff --git a/src/Makefile b/src/Makefile
index d818111a..eb0c4abf 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -125,12 +125,18 @@ JS_CHECK_OLDSKOOL_TARGETS = \
 
 # These files will get run through cstyle on 'make check'
 C_CHECK_TARGETS=\
+	bootparams.c \
 	cryptpass.c \
+	disk_size.c \
+	measure_terminal.c \
+	nomknod.c \
 	qemu-exec.c \
+	removable_disk.c \
 	vmunbundle.c \
 	zfs_recv.c \
 	zfs_send.c \
 	zoneevent.c \
+	sdc-on-tty.c \
 	sysinfo_mod.c \
 	sysevent.c \
 	dockerinit/src/dockerexec.c \
diff --git a/src/bootparams.c b/src/bootparams.c
index 9d00c331..7f08a0b7 100644
--- a/src/bootparams.c
+++ b/src/bootparams.c
@@ -2,7 +2,7 @@
  * Copyright (c) 2010 Joyent Inc., All rights reserved.
  *
  * Prints system parameters from libdevinfo
- * 
+ *
  * Compile: gcc -Wall -o bootparams bootparams.c -ldevinfo
  */
 
@@ -109,7 +109,8 @@ prop_type_guess(di_prop_t prop, void **prop_data, int *prop_type)
     return (len);
 }
 
-void prt_prop(di_prop_t prop)
+void
+prt_prop(di_prop_t prop)
 {
     int i, prop_type, nitems;
     char *p;
@@ -117,12 +118,13 @@ void prt_prop(di_prop_t prop)
 
     nitems = prop_type_guess(prop, &prop_data, &prop_type);
 
-    /* XXX: currently we only handle single string properties because those are
+    /*
+     * XXX: currently we only handle single string properties because those are
      *      all that are needed for showing boot parameters.
      */
     if ((nitems != 1) || (prop_type != DI_PROP_TYPE_STRING))
         return;
-    
+
     printf("%s=", di_prop_name(prop));
     switch (prop_type) {
         case DI_PROP_TYPE_INT:
@@ -153,7 +155,8 @@ void prt_prop(di_prop_t prop)
     printf("\n");
 }
 
-int prt_node(di_node_t node, void *arg)
+int
+prt_node(di_node_t node, void *arg)
 {
     di_prop_t prop = DI_PROP_NIL;
 
@@ -169,7 +172,8 @@ int prt_node(di_node_t node, void *arg)
 /*
  * ported from NetBSD's cat rev 1.47
  */
-void raw_cat(int rfd)
+void
+raw_cat(int rfd)
 {
     static char *buf;
     static char fb_buf[BUFSIZ];
@@ -183,12 +187,12 @@ void raw_cat(int rfd)
         struct stat sbuf;
 
         if (fstat(wfd, &sbuf) == 0 &&
-	    sbuf.st_blksize > (long)sizeof(fb_buf)) {
+            sbuf.st_blksize > (long) sizeof (fb_buf)) {
             bsize = sbuf.st_blksize;
             buf = malloc(bsize);
         }
         if (buf == NULL) {
-            bsize = sizeof(fb_buf);
+            bsize = sizeof (fb_buf);
             buf = fb_buf;
         }
     }
@@ -201,18 +205,22 @@ void raw_cat(int rfd)
     }
 }
 
-int main()
+int
+main()
 {
     di_node_t root_node;
 
     int fd;
 
+    /*
+     * If the /tmp/bootparams file exists, then it acts as a replacement for the
+     * normal data. Otherwise, if we don't have or can't open the file, then we
+     * just get the actual parameters.
+     */
     if ((fd = open("/tmp/bootparams", O_RDONLY)) != -1) {
-        /* If this file exists it acts as a replacement for the normal data */
         raw_cat(fd);
         close(fd);
     } else {
-        /* We didn't have or couldn't open the file, so just get actual params */
         root_node = di_init("/", (DINFOSUBTREE | DINFOPROP));
         if (root_node == DI_NODE_NIL) {
             fprintf(stderr, "di_init() failed\n");
diff --git a/src/disk_size.c b/src/disk_size.c
index 8d278760..3d9f5167 100644
--- a/src/disk_size.c
+++ b/src/disk_size.c
@@ -1,6 +1,6 @@
-/* 
+/*
  * Copyright (c) 2010 Joyent Inc., All rights reserved.
- * 
+ *
  * This tool takes the character device node for a disk and prints the size
  * in *bytes* for that disk.  On any error, a message explaining the problem
  * is printed to STDERR and the exit code is non-zero.
@@ -17,38 +17,40 @@
 #include <sys/vtoc.h>
 
 void
-usage(char* argv0) {
+usage(char *argv0)
+{
 	printf("Usage: %s [char dev]\n", argv0);
 	exit(1);
 }
 
 int
-main(int argc, char* argv[]) {
-	char* devpath = argv[1];
-    int devnode;
+main(int argc, char *argv[])
+{
+	char *devpath = argv[1];
+	int devnode;
 	int ret;
-    unsigned long long bytes;
-    struct dk_minfo mediainfo;
-	
+	unsigned long long bytes;
+	struct dk_minfo mediainfo;
+
 	if (argc != 2) {
 		fprintf(stderr, "FATAL: Device argument required\n");
 		usage(argv[0]);
 	}
-	
-    if ((devnode = open(devpath, O_RDONLY)) < 0 ) {
+
+	if ((devnode = open(devpath, O_RDONLY)) < 0) {
 		fprintf(stderr, "FATAL: Could not open %s\n", devpath);
 		usage(argv[0]);
-    }
-    
+	}
+
 	ret = ioctl(devnode, DKIOCGMEDIAINFO, &mediainfo);
 	close(devnode);
 
 	if (ret < 0) {
-        fprintf(stderr, "FATAL: DKIOCGMEDIAINFO failed\n");
-        exit(1);
+		fprintf(stderr, "FATAL: DKIOCGMEDIAINFO failed\n");
+		exit(1);
 	}
 
-    bytes = (mediainfo.dki_capacity * mediainfo.dki_lbsize);
-    printf("%llu\n", bytes);
+	bytes = (mediainfo.dki_capacity * mediainfo.dki_lbsize);
+	printf("%llu\n", bytes);
 	exit(0);
 }
diff --git a/src/measure_terminal.c b/src/measure_terminal.c
index b6de7f9f..29b3862b 100644
--- a/src/measure_terminal.c
+++ b/src/measure_terminal.c
@@ -240,9 +240,10 @@ main(int argc __UNUSED, char **argv __UNUSED)
 		 */
 		if (strncmp(buf0, PREAMBLE, PREAMBLE_LENGTH) == 0) {
 			/*
-			 * The terminal understood our first request and responded
-			 * with a preamble we recognise.  Consume the second
-			 * escape sequence which we know to be enroute.
+			 * The terminal understood our first request and
+			 * responded with a preamble we recognise. Consume
+			 * the second escape sequence which we know to be
+			 * enroute.
 			 */
 			is_match = B_TRUE;
 			buf1 = read_cseq();
@@ -259,4 +260,3 @@ main(int argc __UNUSED, char **argv __UNUSED)
 	 */
 	return (process_size(buf0));
 }
-
diff --git a/src/removable_disk.c b/src/removable_disk.c
index 3d392729..8f75b5f9 100644
--- a/src/removable_disk.c
+++ b/src/removable_disk.c
@@ -6,43 +6,43 @@
 #include <sys/vtoc.h>
 
 void
-usage(char* argv0) {
+usage(char *argv0) {
 	printf("Usage: %s [char dev]\n", argv0);
 }
 
 int
-main(int argc, char* argv[]) {
-	char* devpath = argv[1];
+main(int argc, char *argv[]) {
+	char *devpath = argv[1];
 	int devnode;
 	struct stat buf;
 	int ret;
 	int removable;
-	
-	if(argc != 2) {
+
+	if (argc != 2) {
 		usage(argv[0]);
-		return -1;
+		return (-1);
 	}
-	
-	if ((devnode = open(devpath, O_RDONLY)) < 0 ) {
+
+	if ((devnode = open(devpath, O_RDONLY)) < 0) {
 		printf("Could not open %s\n", devpath);
 		usage(argv[0]);
-		return -1;
+		return (-1);
 	}
-    
+
 	if (fstat(devnode, &buf) == -1 || !S_ISCHR(buf.st_mode)) {
 		printf("%s: not a character device\n", devpath);
 		usage(argv[0]);
 		close(devnode);
-		return -1;
+		return (-1);
 	}
-	
+
 	ret = ioctl(devnode, DKIOCREMOVABLE, &removable);
 
 	if ((ret >= 0) && (removable != 0)) {
 		close(devnode);
-		return 0;
+		return (0);
 	}
-	
+
 	close(devnode);
-	return 1;
+	return (1);
 }
diff --git a/src/sdc-on-tty.c b/src/sdc-on-tty.c
index 79b9c63a..9a2b1bae 100644
--- a/src/sdc-on-tty.c
+++ b/src/sdc-on-tty.c
@@ -133,8 +133,9 @@ main(int argc, char **argv)
 		exit(1);
 	}
 
-	for (i = 0 ; optind < argc; i++, optind++)
+	for (i = 0; optind < argc; i++, optind++) {
 		args[i] = argv[optind];
+	}
 	args[i] = NULL;
 
 	for (i = 0; i < ndevs; i++) {
diff --git a/tools/cstyle b/tools/cstyle
index 55aa1033..c76d2831 100755
--- a/tools/cstyle
+++ b/tools/cstyle
@@ -19,12 +19,15 @@
 #
 # CDDL HEADER END
 #
+# Copyright 2015 Toomas Soome <tsoome@me.com>
+# Copyright 2016 Nexenta Systems, Inc.
 #
 # Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
 #
+# Copyright (c) 2015 by Delphix. All rights reserved.
+#
 # @(#)cstyle 1.58 98/09/09 (from shannon)
-#ident	"%Z%%M%	%I%	%E% SMI"
 #
 # cstyle - check for some common stylistic errors.
 #
@@ -191,7 +194,11 @@ my $no_errs = 0;		# set for CSTYLED-protected lines
 sub err($) {
 	my ($error) = @_;
 	unless ($no_errs) {
-		printf $fmt, $filename, $., $error, $line;
+		if ($verbose) {
+			printf $fmt, $filename, $., $error, $line;
+		} else {
+			printf $fmt, $filename, $., $error;
+		}
 		$err_stat = 1;
 	}
 }
@@ -200,7 +207,11 @@ sub err_prefix($$) {
 	my ($prevline, $error) = @_;
 	my $out = $prevline."\n".$line;
 	unless ($no_errs) {
-		printf $fmt, $filename, $., $error, $out;
+		if ($verbose) {
+			printf $fmt, $filename, $., $error, $out;
+		} else {
+			printf $fmt, $filename, $., $error;
+		}
 		$err_stat = 1;
 	}
 }
@@ -208,7 +219,11 @@ sub err_prefix($$) {
 sub err_prev($) {
 	my ($error) = @_;
 	unless ($no_errs) {
-		printf $fmt, $filename, $. - 1, $error, $prev;
+		if ($verbose) {
+			printf $fmt, $filename, $. - 1, $error, $prev;
+		} else {
+			printf $fmt, $filename, $. - 1, $error;
+		}
 		$err_stat = 1;
 	}
 }
@@ -227,6 +242,7 @@ my $comment_done = 0;
 my $in_warlock_comment = 0;
 my $in_function = 0;
 my $in_function_header = 0;
+my $function_header_full_indent = 0;
 my $in_declaration = 0;
 my $note_level = 0;
 my $nextok = 0;
@@ -372,6 +388,7 @@ line: while (<$filehandle>) {
 		$in_function = 1;
 		$in_declaration = 1;
 		$in_function_header = 0;
+		$function_header_full_indent = 0;
 		$prev = $line;
 		next line;
 	}
@@ -384,8 +401,43 @@ line: while (<$filehandle>) {
 		$prev = $line;
 		next line;
 	}
-	if (/^\w*\($/) {
+	if ($in_function_header && ! /^    (\w|\.)/ ) {
+		if (/^{}$/) {
+			$in_function_header = 0;
+			$function_header_full_indent = 0;
+		} elsif ($picky && ! (/^\t/ && $function_header_full_indent != 0)) {
+			err("continuation line should be indented by 4 spaces");
+		}
+	}
+
+	#
+	# If this matches something of form "foo(", it's probably a function
+	# definition, unless it ends with ") bar;", in which case it's a declaration
+	# that uses a macro to generate the type.
+	#
+	if (/^\w+\(/ && !/\) \w+;$/) {
 		$in_function_header = 1;
+		if (/\($/) {
+			$function_header_full_indent = 1;
+		}
+	}
+	if ($in_function_header && /^{$/) {
+		$in_function_header = 0;
+		$function_header_full_indent = 0;
+		$in_function = 1;
+	}
+	if ($in_function_header && /\);$/) {
+		$in_function_header = 0;
+		$function_header_full_indent = 0;
+	}
+	if ($in_function_header && /{$/ ) {
+		if ($picky) {
+			err("opening brace on same line as function header");
+		}
+		$in_function_header = 0;
+		$function_header_full_indent = 0;
+		$in_function = 1;
+		next line;
 	}
 
 	if ($in_warlock_comment && /\*\//) {
@@ -591,7 +643,7 @@ line: while (<$filehandle>) {
 	if (/^\s*\(void\)[^ ]/) {
 		err("missing space after (void) cast");
 	}
-	if (/\S{/ && !/{{/) {
+	if (/\S\{/ && !/\{\{/) {
 		err("missing space before left brace");
 	}
 	if ($in_function && /^\s+{/ &&
diff --git a/tools/jsstyle/README.md b/tools/jsstyle/README.md
index 913ac423..05dcfffd 100644
--- a/tools/jsstyle/README.md
+++ b/tools/jsstyle/README.md
@@ -9,7 +9,7 @@ configurable. However it strives to enforces a single coding style based on
 that cstyle. See "Configuration Options" below.
 
 The original cstyle tool can be found here:
-<http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/tools/scripts/cstyle.pl>
+<https://github.com/illumos/illumos-gate/blob/master/usr/src/tools/scripts/cstyle.pl>
 
 The document describing C Style is available here:
 <http://www.cis.upenn.edu/~lee/06cse480/data/cstyle.ms.pdf>
@@ -30,7 +30,8 @@ Examples of conditions checked by this tool include:
 
 ## Status
 
-No known bugs.  No new features planned.
+No new features planned.  The biggest known issue is that jsstyle doesn't grok
+regexes, so you usually need to wrap these in JSSTYLED comments (see below).
 
 
 ## Usage
@@ -55,18 +56,36 @@ configurability.
                             'tab' for tab indentation (the default).
     strict-indent           Boolean option, set to 1 to force indents of spaces
                             to be a multiple of indent parameter.
+    line-length             An integer number to specify the maximum length
+                            of a line (default: 80)
     literal-string-quote    'single' (the default) or 'double'. Specifies
                             the preferred quote character for literal strings.
     unparenthesized-return  Boolean option, set to 0 to disable the
                             "unparenthesized return expression" check.
     blank-after-start-comment
                             Boolean option, set to 0 to disable the
-                            "missing blank after start comment" check.
+                            "missing blank after start comment" check. `// `
+    blank-after-open-comment
+                            Boolean option, set to 0 to disable the
+                            "missing blank after open comment" check. `/* */`
+    no-blank-for-anon-function
+                            Boolean option, set to 1 to allow anonymous
+                            functions without blank before paren. `function() { ... }`
     continuation-at-front   Boolean option, set to 1 to force continations
                             to be at the beginning rather than end of line.
     leading-right-paren-ok  Boolean option, set to 1 to allow ) to start a
                             line.
 
+    whitespace-after-left-paren-ok
+                            Boolean option, allow whitespace after a (
+                            character.
+
+    leading-comma-ok        Boolean option to allow lines to begin with commas
+                            (preceded by whitespace).
+
+    uncuddled-else-ok       Boolean option to allow for an else block to begin
+                            on a new line.
+
 ## "JSSTYLED"-comments
 
 When you want `jsstyle` to ignore a line, you can use this:
diff --git a/tools/jsstyle/jsstyle b/tools/jsstyle/jsstyle
index 1706afd3..adb3a0f2 100755
--- a/tools/jsstyle/jsstyle
+++ b/tools/jsstyle/jsstyle
@@ -23,7 +23,7 @@
 # Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
 #
-# Copyright 2011 Joyent, Inc. All rights reserved.
+# Copyright 2017 Joyent, Inc. All rights reserved.
 #
 # jsstyle - check for some common stylistic errors.
 #
@@ -102,11 +102,14 @@ if (! defined($opts{'t'})) {
 # Load config
 my %config = (
 	indent => "tab",
+	"line-length" => 80,
 	doxygen => 0,  	# doxygen comments: /** ... */
 	splint => 0,    # splint comments. Needed?
 	"unparenthesized-return" => 1,
 	"literal-string-quote" => "single",  # 'single' or 'double'
 	"blank-after-start-comment" => 1,
+	"blank-after-open-comment" => 1,
+	"no-blank-for-anon-function" => 0,
 	"continuation-at-front" => 0,
 	"leading-right-paren-ok" => 0,
 	"strict-indent" => 0
@@ -128,13 +131,22 @@ sub add_config_var ($$) {
 			die "$scope: invalid '$name': must be a number (of ".
 				"spaces) or 'tab'";
 		}
+	} elsif ($name eq "line-length") { # numeric vars
+		if ($value !~ /^\d+$/) {
+			die "$scope: invalid '$name': must be a number";
+		}
 	} elsif ($name eq "doxygen" ||   # boolean vars
 		 $name eq "splint" ||
 		 $name eq "unparenthesized-return" ||
 		 $name eq "continuation-at-front" ||
 		 $name eq "leading-right-paren-ok" ||
+		 $name eq "leading-comma-ok" ||
+		 $name eq "uncuddled-else-ok" ||
+		 $name eq "whitespace-after-left-paren-ok" ||
 		 $name eq "strict-indent" ||
-		 $name eq "blank-after-start-comment") {
+		 $name eq "blank-after-open-comment" ||
+		 $name eq "blank-after-start-comment" ||
+		 $name eq "no-blank-for-anon-function") {
 
 		if ($value != 1 && $value != 0) {
 			die "$scope: invalid '$name': don't give a value";
@@ -206,7 +218,7 @@ my $err_stat = 0;		# exit status
 
 if ($#ARGV >= 0) {
 	foreach my $arg (@ARGV) {
-		my $fh = new IO::File $arg, "r";
+		open(my $fh, "<:encoding(UTF-8)", $arg);
 		if (!defined($fh)) {
 			printf "%s: cannot open\n", $arg;
 		} else {
@@ -296,6 +308,15 @@ line: while (<$filehandle>) {
 	s/'([^\\']|\\.)*'/\'\'/g;
 	s/"([^\\"]|\\.)*"/\"\"/g;
 
+	#
+	# Strip out contents of easily identifiable regular expressions so that
+	# they don't trip us up. We only modify those that start with '^' or end
+	# with '$' since these are unlikely to be confused with other legitimate
+	# uses of '/' (such as division or comments).
+	#
+	s!/\^([^\\/]|\\.)*/!/ /!g;
+	s!/([^\\/]|\\.)*\$/!/ /!g;
+
 	#
 	# detect string continuation
 	#
@@ -349,15 +370,15 @@ line: while (<$filehandle>) {
 
 	# check length of line.
 	# first, a quick check to see if there is any chance of being too long.
-	if ((($line =~ tr/\t/\t/) * ($tab_width - 1)) + length($line) > 80) {
+	if ((($line =~ tr/\t/\t/) * ($tab_width - 1)) + length($line) > $config{"line-length"}) {
 		# yes, there is a chance.
 		# replace tabs with spaces and check again.
 		my $eline = $line;
 		1 while $eline =~
 		    s/\t+/' ' x
 			(length($&) * $tab_width - length($`) % $tab_width)/e;
-		if (length($eline) > 80) {
-			err("line > 80 characters");
+		if (length($eline) > $config{"line-length"}) {
+			err("line > " . $config{"line-length"} . " characters");
 		}
 	}
 
@@ -511,7 +532,7 @@ line: while (<$filehandle>) {
 		next line;
 	}
 
-	if ((/[^(]\/\*\S/ || /^\/\*\S/) &&
+	if ($config{"blank-after-open-comment"} && (/[^(]\/\*\S/ || /^\/\*\S/) &&
 	    !(/$lint_re/ || ($config{"splint"} && /$splint_re/))) {
 		err("missing blank after open comment");
 	}
@@ -577,13 +598,18 @@ line: while (<$filehandle>) {
 	    !/\/.*?\{\d+,?\d*\}.*?\//) {
 		err("comma or semicolon followed by non-blank");
 	}
+	# check for commas preceded by blanks
+	if ((!$config{"leading-comma-ok"} && /^\s*,/) || (!/^\s*,/ && /\s,/)) {
+		err("comma preceded by blank");
+	}
+	# check for semicolons preceded by blanks
 	# allow "for" statements to have empty "while" clauses
-	if (/\s[,;]/ && !/^[\t]+;$/ && !/^\s*for \([^;]*; ;[^;]*\)/) {
-		err("comma or semicolon preceded by blank");
+	if (/\s;/ && !/^[\t]+;$/ && !/^\s*for \([^;]*; ;[^;]*\)/) {
+		err("semicolon preceded by blank");
 	}
 	if (!$config{"continuation-at-front"} && /^\s*(&&|\|\|)/) {
 		err("improper boolean continuation");
-	} elsif ($config{"continuation-at-front"} && /(&&|\|\||\+)$/) {
+	} elsif ($config{"continuation-at-front"} && /(&&|\|\||[^+]\+)$/) {
 		err("improper continuation");
 	}
 	if (/\S   *(&&|\|\|)/ || /(&&|\|\|)   *\S/) {
@@ -591,7 +617,12 @@ line: while (<$filehandle>) {
 	}
 	# We allow methods which look like obj.delete() but not keywords without
 	# spaces ala: delete(obj)
-	if (/(?<!\.)\b(delete|typeof|instanceof|throw|with|catch|new|function|in|for|if|while|switch|return|case)\(/) {
+	if (!$config{"no-blank-for-anon-function"} && /(?<!\.)\bfunction\(/) {
+		err("missing space between 'function' and paren");
+	} elsif ($config{"no-blank-for-anon-function"} && /(?<!\.)\bfunction\s+\(/) {
+		err("space between 'function' and paren");
+	}
+	if (/(?<!\.)\b(delete|typeof|instanceof|throw|with|catch|new|in|for|if|while|switch|return|case)\(/) {
 		err("missing space between keyword and paren");
 	}
 	if (/(\b(catch|for|if|with|while|switch|return)\b.*){2,}/) {
@@ -627,7 +658,7 @@ line: while (<$filehandle>) {
 	if (/\btypeof\b/ && !/\btypeof\s*\(.*\)/) {
 		err("unparenthesized typeof expression");
 	}
-	if (/\(\s/) {
+	if (!$config{"whitespace-after-left-paren-ok"} && /\(\s/) {
 		err("whitespace after left paren");
 	}
 	# allow "for" statements to have empty "continue" clauses
@@ -641,7 +672,7 @@ line: while (<$filehandle>) {
 	if (/^\s*\(void\)[^ ]/) {
 		err("missing space after (void) cast");
 	}
-	if (/\S{/ && !/({|\(){/ &&
+	if (/\S\{/ && !/({|\(){/ &&
 	    # Allow a brace in a regex quantifier.
 	    !/\/.*?\{\d+,?\d*\}.*?\//) {
 		err("missing space before left brace");
@@ -673,7 +704,7 @@ line: while (<$filehandle>) {
 	}
 
 	if (/^\s*else\W/) {
-		if ($prev =~ /^\s*}$/) {
+		if (!$config{"uncuddled-else-ok"} && $prev =~ /^\s*}$/) {
 			err_prefix($prev,
 			    "else and right brace should be on same line");
 		}
-- 
2.21.0

