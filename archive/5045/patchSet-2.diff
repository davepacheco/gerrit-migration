From 963183ebf0973e782c543f423889bd9397b6f86a Mon Sep 17 00:00:00 2001
From: Jordan Paige Hendricks <jordan.hendricks@joyent.com>
Date: Sat, 3 Nov 2018 01:44:25 +0000
Subject: [PATCH] OS-7066 Want support ahci LED entries in topo

---
 manifest                                      |   5 +-
 usr/src/lib/fm/topo/libtopo/common/topo_hc.h  |   1 +
 ...SG-2029P-ACR24L-disk-hc-topology.xmlgenksh |  19 ++
 usr/src/lib/fm/topo/modules/common/Makefile   |   1 +
 .../modules/common/fac_prov_ahci/Makefile     |  23 ++
 .../common/fac_prov_ahci/fac_prov_ahci.c      | 274 ++++++++++++++++++
 6 files changed, 321 insertions(+), 2 deletions(-)
 create mode 100644 usr/src/lib/fm/topo/modules/common/fac_prov_ahci/Makefile
 create mode 100644 usr/src/lib/fm/topo/modules/common/fac_prov_ahci/fac_prov_ahci.c

diff --git a/manifest b/manifest
index fe5c94301c..dd71f3d4d9 100644
--- a/manifest
+++ b/manifest
@@ -5665,6 +5665,7 @@ d usr/lib/fm/topo/maps 0755 root bin
 f usr/lib/fm/topo/maps/xfp-hc-topology.xml 0444 root bin
 d usr/lib/fm/topo/plugins 0755 root bin
 f usr/lib/fm/topo/plugins/disk.so 0555 root bin
+f usr/lib/fm/topo/plugins/fac_prov_ahci.so 0555 root bin
 f usr/lib/fm/topo/plugins/fac_prov_ipmi.so 0555 root bin
 f usr/lib/fm/topo/plugins/fac_prov_mptsas.so 0555 root bin
 f usr/lib/fm/topo/plugins/ipmi.so 0555 root bin
@@ -11573,7 +11574,7 @@ f usr/share/lib/zoneinfo/Pacific/Gambier 0644 root bin
 f usr/share/lib/zoneinfo/Pacific/Guadalcanal 0644 root bin
 f usr/share/lib/zoneinfo/Pacific/Guam 0644 root bin
 f usr/share/lib/zoneinfo/Pacific/Honolulu 0644 root bin
-h usr/share/lib/zoneinfo/Pacific/Johnston=usr/share/lib/zoneinfo/Pacific/Honolulu 
+h usr/share/lib/zoneinfo/Pacific/Johnston=usr/share/lib/zoneinfo/Pacific/Honolulu
 f usr/share/lib/zoneinfo/Pacific/Kiritimati 0644 root bin
 f usr/share/lib/zoneinfo/Pacific/Kosrae 0644 root bin
 f usr/share/lib/zoneinfo/Pacific/Kwajalein 0644 root bin
@@ -15211,7 +15212,7 @@ f usr/share/man/man3dlpi/dlpi_info.3dlpi 0444 root bin
 f usr/share/man/man3dlpi/dlpi_linkname.3dlpi 0444 root bin
 f usr/share/man/man3dlpi/dlpi_mactype.3dlpi 0444 root bin
 f usr/share/man/man3dlpi/dlpi_open.3dlpi 0444 root bin
-s usr/share/man/man3dlpi/dlpi_open_zone.3dlpi=dlpi_open.3dlpi 
+s usr/share/man/man3dlpi/dlpi_open_zone.3dlpi=dlpi_open.3dlpi
 s usr/share/man/man3dlpi/dlpi_promiscoff.3dlpi=dlpi_promiscon.3dlpi
 f usr/share/man/man3dlpi/dlpi_promiscon.3dlpi 0444 root bin
 f usr/share/man/man3dlpi/dlpi_recv.3dlpi 0444 root bin
diff --git a/usr/src/lib/fm/topo/libtopo/common/topo_hc.h b/usr/src/lib/fm/topo/libtopo/common/topo_hc.h
index fdeb5f7193..5bfa6d0cd2 100644
--- a/usr/src/lib/fm/topo/libtopo/common/topo_hc.h
+++ b/usr/src/lib/fm/topo/libtopo/common/topo_hc.h
@@ -127,6 +127,7 @@ extern "C" {
 #define	TOPO_BINDING_DEVCTL	"devctl"
 #define	TOPO_BINDING_ENCLOSURE	"enclosure"
 #define	TOPO_BINDING_SLOT	"slot"
+#define	TOPO_BINDING_PORT	"port"
 
 #define	TOPO_PGROUP_STORAGE	"storage"
 #define	TOPO_STORAGE_INITIATOR_PORT	"initiator-port"
diff --git a/usr/src/lib/fm/topo/maps/SMCI,SSG-2029P-ACR24L/SSG-2029P-ACR24L-disk-hc-topology.xmlgenksh b/usr/src/lib/fm/topo/maps/SMCI,SSG-2029P-ACR24L/SSG-2029P-ACR24L-disk-hc-topology.xmlgenksh
index 327c41c53b..91bb3b7c5e 100755
--- a/usr/src/lib/fm/topo/maps/SMCI,SSG-2029P-ACR24L/SSG-2029P-ACR24L-disk-hc-topology.xmlgenksh
+++ b/usr/src/lib/fm/topo/maps/SMCI,SSG-2029P-ACR24L/SSG-2029P-ACR24L-disk-hc-topology.xmlgenksh
@@ -80,6 +80,25 @@ function do_sata_node
 	tpath="/disk@${target},0"
   cat <<EOF
     <node instance='$bay_inst'>
+    <facility name='fail' type='indicator' provider='fac_prov_ahci' >
+      <propgroup name='facility' version='1' name-stability='Private'
+        data-stability='Private' >
+        <propval name='type' type='uint32' value='0' />
+        <propmethod name='ahci_led_mode' version='0' propname='mode'
+          proptype='uint32' mutable='1'>
+        </propmethod>
+      </propgroup>
+    </facility>
+    <facility name='ident' type='indicator' provider='fac_prov_ahci' >
+      <propgroup name='facility' version='1' name-stability='Private'
+        data-stability='Private' >
+        <propval name='type' type='uint32' value='1' />
+        <propmethod name='ahci_led_mode' version='0' propname='mode'
+          proptype='uint32' mutable='1'>
+        </propmethod>
+      </propgroup>
+    </facility>
+
       <propgroup name='protocol' version='1' name-stability='Private'
         data-stability='Private'>
         <propval name='label' type='string' value='Rear Disk $bay' />
diff --git a/usr/src/lib/fm/topo/modules/common/Makefile b/usr/src/lib/fm/topo/modules/common/Makefile
index f7f47f5e06..f234c40786 100644
--- a/usr/src/lib/fm/topo/modules/common/Makefile
+++ b/usr/src/lib/fm/topo/modules/common/Makefile
@@ -27,6 +27,7 @@
 
 SUBDIRS =		\
 	disk		\
+	fac_prov_ahci	\
 	fac_prov_ipmi	\
 	fac_prov_mptsas	\
 	ipmi		\
diff --git a/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/Makefile b/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/Makefile
new file mode 100644
index 0000000000..1e4a820ec1
--- /dev/null
+++ b/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/Makefile
@@ -0,0 +1,23 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2018 <contributor>
+#
+
+MODULE = fac_prov_ahci
+CLASS = common
+
+MODULESRCS = fac_prov_ahci.c
+
+include ../../Makefile.plugin
+
+CPPFLAGS += -I$(SRC)/uts/common
diff --git a/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/fac_prov_ahci.c b/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/fac_prov_ahci.c
new file mode 100644
index 0000000000..3aad121f21
--- /dev/null
+++ b/usr/src/lib/fm/topo/modules/common/fac_prov_ahci/fac_prov_ahci.c
@@ -0,0 +1,274 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+#include <unistd.h>
+#include <stropts.h>
+#include <fcntl.h>
+#include <libnvpair.h>
+#include <string.h>
+#include <strings.h>
+#include <sys/fm/protocol.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fm/libtopo.h>
+#include <fm/topo_mod.h>
+#include <libgen.h>
+
+#include "sys/sata/adapters/ahci/ahciem.h"
+
+#define	TOPO_METH_AHCI_LED_MODE_VERSION	0
+
+typedef enum {
+	AHCI_FAC_IDENT,
+	AHCI_FAC_FAULT
+} ahci_fac_led_t;
+
+static int fac_prov_ahci_enum(topo_mod_t *, tnode_t *, const char *,
+    topo_instance_t, topo_instance_t, void *, void *);
+
+/*
+ * ahci facility provider methods
+ */
+static int ahci_led_mode(topo_mod_t *, tnode_t *, topo_version_t,
+    nvlist_t *, nvlist_t **);
+
+const topo_modops_t ahci_ops = { fac_prov_ahci_enum, NULL };
+
+const topo_modinfo_t ahci_info =
+	{ "ahci facility provider", FM_FMRI_SCHEME_HC, TOPO_VERSION,
+	&ahci_ops };
+
+static const topo_method_t ahci_fac_methods[] = {
+	{ "ahci_led_mode", TOPO_PROP_METH_DESC,
+	    TOPO_METH_AHCI_LED_MODE_VERSION,
+	    TOPO_STABILITY_INTERNAL, ahci_led_mode },
+	{ NULL }
+};
+
+int
+_topo_init(topo_mod_t *mod, topo_version_t version)
+{
+	if (getenv("TOPOFACAHCIDEBUG") != NULL)
+		topo_mod_setdebug(mod);
+
+	return (topo_mod_register(mod, &ahci_info, TOPO_VERSION));
+}
+
+void
+_topo_fini(topo_mod_t *mod)
+{
+	topo_mod_unregister(mod);
+}
+
+/*
+ * Get or set the LED state for a given led of type (facility node type, port).
+ */
+static int
+do_led_control(topo_mod_t *mod, char *devctl, uint32_t port,
+    ahci_fac_led_t fac_type, uint32_t *ledmode, boolean_t set)
+{
+	int fd;
+
+	if ((fd = open(devctl, (set ? O_RDWR : O_RDONLY))) == -1) {
+		int en = errno;
+		topo_mod_dprintf(mod, "devctl open failed: %s",
+		    strerror(errno));
+		errno = en;
+		return (-1);
+	}
+
+	ahci_ioc_em_get_t ahci_get;
+	bzero(&ahci_get, sizeof (ahci_get));
+
+	if (ioctl(fd, AHCI_EM_IOC_GET, &ahci_get)) {
+		int en = errno;
+		topo_mod_dprintf(mod, "led control ioctl failed: %s",
+		    strerror(errno));
+		(void) close(fd);
+		errno = en;
+		return (-1);
+	}
+	topo_mod_dprintf(mod, "status: %d\n", ahci_get.aiemg_status[port]);
+
+	if (set) {
+		ahci_em_led_state_t led_state;
+		uint32_t led_status = *ledmode;
+		uint_t leds;
+
+		switch (fac_type) {
+		case AHCI_FAC_IDENT:
+			led_state = AHCI_EM_LED_IDENT_ENABLE;
+			break;
+		case AHCI_FAC_FAULT:
+			led_state = AHCI_EM_LED_FAULT_ENABLE;
+			break;
+		default:
+			topo_mod_dprintf(mod, "invalid facility node type: %d",
+			    fac_type);
+			return (-1);
+		}
+
+		if (led_status) {
+			leds = ahci_get.aiemg_status[port] | led_state;
+		} else {
+			leds = ahci_get.aiemg_status[port] & ~led_state;
+		}
+
+		ahci_ioc_em_set_t ahci_set;
+		bzero(&ahci_set, sizeof (ahci_set));
+
+		ahci_set.aiems_port = port;
+		ahci_set.aiems_op = AHCI_EM_IOC_SET_OP_SET;
+		ahci_set.aiems_leds = leds;
+		topo_mod_dprintf(mod, "aiems_leds: %d", ahci_set.aiems_leds);
+
+		ioctl(fd, AHCI_EM_IOC_SET, &ahci_set);
+
+	} else {
+		boolean_t led_set;
+
+		switch (fac_type) {
+		case AHCI_FAC_IDENT:
+			led_set = ahci_get.aiemg_status[port]
+			    & AHCI_EM_LED_IDENT_ENABLE;
+			break;
+		case AHCI_FAC_FAULT:
+			led_set = ahci_get.aiemg_status[port] &
+			    AHCI_EM_LED_FAULT_ENABLE;
+			break;
+		default:
+			topo_mod_dprintf(mod, "invalid facility node type: %d",
+			    fac_type);
+			return (-1);
+		}
+
+		*ledmode = led_set ? TOPO_LED_STATE_ON : TOPO_LED_STATE_OFF;
+	}
+
+	errno = 0;
+	return (0);
+}
+
+static int
+ahci_led_mode(topo_mod_t *mod, tnode_t *node, topo_version_t vers,
+    nvlist_t *in, nvlist_t **nvout)
+{
+	int err, ret = 0;
+	tnode_t *pnode = topo_node_parent(node);
+	uint32_t ledmode = 0, ahci_port;
+	nvlist_t *pargs, *nvl;
+	char *devctl = NULL;
+	boolean_t set;
+	ahci_fac_led_t fac_type;
+
+	if (topo_prop_get_uint32(node, TOPO_PGROUP_FACILITY, TOPO_FACILITY_TYPE,
+	    &type, &err) != 0) {
+		topo_mod_dprintf(mod, "%s: Failed to lookup %s property "
+		    "(%s)", __func__, TOPO_FACILITY_TYPE, topo_strerror(err));
+		return (topo_mod_seterrno(mod, EMOD_NVL_INVAL));
+	}
+
+	switch (type) {
+	case (TOPO_LED_TYPE_SERVICE):
+		fac_type = AHCI_FAC_FAULT;
+		break;
+	case (TOPO_LED_TYPE_LOCATE):
+		fac_type = AHCI_FAC_IDENT;
+		break;
+	default:
+		topo_mod_dprintf(mod, "%s: Invalid LED type: 0x%x\n", __func__,
+		    type);
+		return (topo_mod_seterrno(mod, EMOD_NVL_INVAL));
+	}
+
+	if (topo_prop_get_string(pnode, TOPO_PGROUP_BINDING,
+	    TOPO_BINDING_DEVCTL, &devctl, &err) != 0 ||
+	    topo_prop_get_uint32(pnode, TOPO_PGROUP_BINDING,
+	    TOPO_BINDING_PORT, &ahci_port, &err) != 0) {
+		topo_mod_dprintf(mod, "%s: Facility was missing ahci binding"
+		    " properties\n", __func__);
+		ret = topo_mod_seterrno(mod, EMOD_NVL_INVAL);
+		goto out;
+	}
+
+	int lookup = nvlist_lookup_nvlist(in, TOPO_PROP_PARGS, &pargs);
+	topo_mod_dprintf(mod, "lookup? %s", !lookup ? "true" : "false");
+	if (!lookup) {
+		int exists = nvlist_exists(pargs, TOPO_PROP_VAL_VAL);
+		topo_mod_dprintf(mod, "exists? %s", exists ? "true" : "false");
+	}
+
+	if ((nvlist_lookup_nvlist(in, TOPO_PROP_PARGS, &pargs) == 0) &&
+	    nvlist_exists(pargs, TOPO_PROP_VAL_VAL)) {
+		/*
+		 * Set the LED mode.
+		 */
+		set = B_TRUE;
+		topo_mod_dprintf(mod, "%s: set led requested\n", __func__);
+
+		if (ret = nvlist_lookup_uint32(pargs, TOPO_PROP_VAL_VAL,
+		    &ledmode) != 0) {
+			topo_mod_dprintf(mod, "%s: Failed to lookup %s nvpair "
+			    "(%s)\n", __func__, TOPO_PROP_VAL_VAL,
+			    strerror(ret));
+			ret = topo_mod_seterrno(mod, EMOD_NVL_INVAL);
+			goto out;
+
+		}
+		topo_mod_dprintf(mod, "%s: Setting LED mode to %s\n", __func__,
+		    ledmode ? "ON" : "OFF");
+	} else {
+		/*
+		 * Get the LED mode
+		 */
+		set = B_FALSE;
+		topo_mod_dprintf(mod, "%s: Getting LED mode\n", __func__);
+	}
+	ret = do_led_control(mod, devctl, ahci_port, fac_type, &ledmode, set);
+
+	if (topo_mod_nvalloc(mod, &nvl, NV_UNIQUE_NAME) != 0 ||
+	    nvlist_add_string(nvl, TOPO_PROP_VAL_NAME, TOPO_LED_MODE) != 0 ||
+	    nvlist_add_uint32(nvl, TOPO_PROP_VAL_TYPE, TOPO_TYPE_UINT32) != 0 ||
+	    nvlist_add_uint32(nvl, TOPO_PROP_VAL_VAL, ledmode) != 0) {
+		topo_mod_dprintf(mod, "%s: Failed to allocate 'out' nvlist\n",
+		    __func__);
+		nvlist_free(nvl);
+		ret = topo_mod_seterrno(mod, EMOD_NOMEM);
+		goto out;
+	}
+	*nvout = nvl;
+
+out:
+	return (ret);
+}
+
+static int
+fac_prov_ahci_enum(topo_mod_t *mod, tnode_t *rnode, const char *name,
+    topo_instance_t min, topo_instance_t max, void *arg, void *unused)
+{
+
+	if (topo_node_flags(rnode) == TOPO_NODE_FACILITY) {
+		if (topo_method_register(mod, rnode, ahci_fac_methods) != 0) {
+			topo_mod_dprintf(mod, "%s: topo_method_register() "
+			    "failed: %s", __func__, topo_mod_errmsg(mod));
+			return (-1);
+		}
+		return (0);
+	}
+
+	topo_mod_dprintf(mod, "%s: unexpected node flags %x", __func__,
+	    topo_node_flags(rnode));
+	return (-1);
+}
-- 
2.21.0

