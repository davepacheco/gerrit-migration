From a0cd2f9538df9606dccc5265f107b985c12d5f8a Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Fri, 30 Sep 2016 12:00:10 -0700
Subject: [PATCH] joyent/node-fast#1 need limited support for servers that send
 null values

---
 CHANGES.md                              |  3 ++
 README.md                               | 13 +++++----
 lib/fast_client.js                      | 15 ++++++++++
 lib/fast_client_request.js              |  6 ++++
 package.json                            |  2 +-
 test/common/client.js                   |  7 +++++
 test/compat/legacy-server.js            |  8 +++--
 test/compat/manual-tst.client_compat.js | 39 +++++++++++++++++++++++++
 test/tst.client_generic.js              | 25 +++++++++++++++-
 9 files changed, 108 insertions(+), 10 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 0dba279..108d54a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,9 @@
 
 No changes.
 
+## v2.1.0
+
+* #1 need limited support for servers that send null values
 
 ## v2.0.0 (2016-08-29)
 
diff --git a/README.md b/README.md
index 943d7c7..7c4ce35 100644
--- a/README.md
+++ b/README.md
@@ -189,12 +189,13 @@ from completing.  This would usually be a protocol error of some sort.
 
 Named arguments:
 
-Name            | Type         | Meaning
---------------- | ------------ | -------
-`rpcmethod`     | string       | name of the RPC method to invoke on the server
-`rpcargs`       | array        | JSON-serializable array of RPC call arguments
-`timeout`       | integer      | (optional) milliseconds after which to abandon the request if it has not already completed.  The default is that there is no timeout.
-`log`           | object       | (optional) bunyan logger for this request.  If not specified, a child logger of the client-level logger will be used.
+Name               | Type         | Meaning
+---------------    | ------------ | -------
+`rpcmethod`        | string       | name of the RPC method to invoke on the server
+`rpcargs`          | array        | JSON-serializable array of RPC call arguments
+`timeout`          | integer      | (optional) milliseconds after which to abandon the request if it has not already completed.  The default is that there is no timeout.
+`log`              | object       | (optional) bunyan logger for this request.  If not specified, a child logger of the client-level logger will be used.
+`ignoreNullValues` | boolean      | (optional) if true, null data values will be accepted from the server and dropped.  These are otherwise considered a protocol error.
 
 The return value is an object-mode stream that consumers use to interact with
 the request.  Objects sent by the server to the client are made available via
diff --git a/lib/fast_client.js b/lib/fast_client.js
index 4a7c81f..e719f8f 100644
--- a/lib/fast_client.js
+++ b/lib/fast_client.js
@@ -129,6 +129,13 @@ mod_util.inherits(FastClient, mod_events.EventEmitter);
  *
  *     log        (optional log)	bunyan-style logger
  *
+ *     ignoreNullValues			allow null values to be received from
+ *     (optional boolean)		the server and drop them.  This is used
+ *     					for legacy servers that incorrectly sent
+ *     					null values.  If this is not specified
+ *     					and a null value is received, this is
+ *     					treated as a protocol error.
+ *
  * The semantics of "rpcmethod" and "rpcargs" are defined by the server.
  *
  * If "log" is not provided, then this request uses a child of the client-level
@@ -157,6 +164,8 @@ FastClient.prototype.rpc = function (args)
 	mod_assertplus.array(args.rpcargs, 'args.rpcargs');
 	mod_assertplus.optionalNumber(args.timeout, 'args.timeout');
 	mod_assertplus.optionalObject(args.log, 'args.log');
+	mod_assertplus.optionalBool(args.ignoreNullValues,
+	    'args.ignoreNullValues');
 
 	if (typeof (args.timeout) == 'number') {
 		mod_assertplus.ok(args.timeout > 0, 'args.timeout > 0');
@@ -171,6 +180,7 @@ FastClient.prototype.rpc = function (args)
 	    'msgid': msgid,
 	    'rpcmethod': args.rpcmethod,
 	    'rpcargs': args.rpcargs,
+	    'ignoreNullValues': args.ignoreNullValues || false,
 	    'log': log.child({
 		'component': 'FastClientRequest',
 		'msgid': msgid,
@@ -757,6 +767,11 @@ FastClient.prototype.requestEmitData = function (request, message)
 	for (i = 0; i < message.data.d.length; i++) {
 		d = message.data.d[i];
 		if (d === null) {
+			if (request.frq_ignorenull) {
+				request.frq_nignored_null++;
+				continue;
+			}
+
 			this.requestAbandon(request, new VError({
 			    'name': 'FastProtocolError',
 			    'info': {
diff --git a/lib/fast_client_request.js b/lib/fast_client_request.js
index 17c7041..b4a5491 100644
--- a/lib/fast_client_request.js
+++ b/lib/fast_client_request.js
@@ -38,6 +38,9 @@ exports.FastClientRequest = FastClientRequest;
  *
  *     rpcargs		array of arguments to pass to the remote RPC method
  *
+ *     ignoreNullValues	see "ignoreNullValues" argument to Fast client's rpc()
+ *     			method.
+ *
  *     log		bunyan-style logger
  *
  * A FastClientRequest object is a client-side caller's handle for an
@@ -67,12 +70,14 @@ function FastClientRequest(args)
 	mod_assertplus.string(args.rpcmethod, 'args.rpcmethod');
 	mod_assertplus.array(args.rpcargs, 'args.rpcargs');
 	mod_assertplus.object(args.log, 'args.log');
+	mod_assertplus.bool(args.ignoreNullValues, 'args.ignoreNullValues');
 
 	/* rpc parameters */
 	this.frq_client = args.client;
 	this.frq_msgid = args.msgid;
 	this.frq_rpcmethod = args.rpcmethod;
 	this.frq_rpcargs = args.rpcargs;
+	this.frq_ignorenull = args.ignoreNullValues;
 
 	/*
 	 * RPC state: most RPC requests are immediately transmitted (at least to
@@ -106,6 +111,7 @@ function FastClientRequest(args)
 	this.frq_skip = false;		/* RPC was skipped (no transport) */
 	this.frq_ndata = 0;		/* data messages emitted */
 	this.frq_nignored = 0;		/* count of ignored messages */
+	this.frq_nignored_null = 0;	/* count of ignored "null" values */
 	this.frq_last = null;		/* last message received */
 
 	/*
diff --git a/package.json b/package.json
index c21f308..ca21e25 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.0.0",
+	"version": "2.1.0",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
diff --git a/test/common/client.js b/test/common/client.js
index c882bd6..e9084c4 100644
--- a/test/common/client.js
+++ b/test/common/client.js
@@ -146,6 +146,12 @@ ClientTestContext.prototype.serverReply = function (message, options)
  * which keeps track of events emitted on the request.
  */
 ClientTestContext.prototype.makeRequest = function (callback)
+{
+	return (this.makeRequestWithOptions({}, callback));
+};
+
+ClientTestContext.prototype.makeRequestWithOptions =
+    function (options, callback)
 {
 	var req, log;
 	var ctr = new ClientTestRequest(this);
@@ -154,6 +160,7 @@ ClientTestContext.prototype.makeRequest = function (callback)
 	ctr.ctr_data = [];
 
 	req = ctr.ctr_request = this.ctc_fastclient.rpc({
+	    'ignoreNullValues': options.ignoreNullValues,
 	    'rpcmethod': mod_testcommon.dummyRpcMethodName,
 	    'rpcargs': mod_testcommon.dummyRpcArgs
 	});
diff --git a/test/compat/legacy-server.js b/test/compat/legacy-server.js
index 284dec8..315400a 100644
--- a/test/compat/legacy-server.js
+++ b/test/compat/legacy-server.js
@@ -113,8 +113,12 @@ function setupRpcHandlers()
 		response = arguments[arguments.length - 1];
 		args = Array.prototype.slice.call(
 		    arguments, 0, arguments.length - 1);
-		if (args.length != 1 || args[0] === null ||
-		    typeof (args[0]) != 'object' ||
+		if (args.length == 1 && args[0] === null) {
+			response.end(null);
+			return;
+		}
+
+		if (args.length != 1 || typeof (args[0]) != 'object' ||
 		    !Array.isArray(args[0].values) ||
 		    typeof (args[0].errorResult) != 'boolean') {
 			response.end(new Error('bad arguments'));
diff --git a/test/compat/manual-tst.client_compat.js b/test/compat/manual-tst.client_compat.js
index abdc060..7a2c4fc 100644
--- a/test/compat/manual-tst.client_compat.js
+++ b/test/compat/manual-tst.client_compat.js
@@ -194,6 +194,45 @@ testcases = [ {
 	});
     }
 
+}, {
+    'name': 'working RPC with null value, not allowed',
+    'run': function (log, fastclient, callback) {
+	fastclient.rpcBufferAndCallback({
+	    'maxObjectsToBuffer': 3,
+	    'rpcmethod': 'echo',
+	    'rpcargs': [ null ]
+	}, function (err, data, ndata) {
+		if (!err) {
+			callback(new Error('expected error'));
+			return;
+		}
+
+		/* JSSTYLED */
+		mod_assertplus.ok(/server sent "null" value/.test(err.message));
+		callback();
+	});
+    }
+
+}, {
+    'name': 'working RPC with null value, allowed',
+    'run': function (log, fastclient, callback) {
+	fastclient.rpcBufferAndCallback({
+	    'maxObjectsToBuffer': 3,
+	    'ignoreNullValues': true,
+	    'rpcmethod': 'echo',
+	    'rpcargs': [ null ]
+	}, function (err, data, ndata) {
+		if (err) {
+			callback(err);
+			return;
+		}
+
+		mod_assertplus.equal(data.length, ndata);
+		mod_assertplus.equal(data.length, 0);
+		callback();
+	});
+    }
+
 } ];
 
 main();
diff --git a/test/tst.client_generic.js b/test/tst.client_generic.js
index 708ac65..3ac94e5 100644
--- a/test/tst.client_generic.js
+++ b/test/tst.client_generic.js
@@ -355,7 +355,7 @@ var test_cases = [ {
     }
 
 }, {
-    'name': 'server sends message with null value',
+    'name': 'server sends message with null value, not allowed',
     'run': function (ctc, callback) {
 	var ctr;
 
@@ -379,6 +379,29 @@ var test_cases = [ {
 	});
     }
 
+}, {
+    'name': 'server sends message with null value, ignored',
+    'run': function (ctc, callback) {
+	var ctr;
+
+	ctc.ctc_server_decoder.once('data', function (message) {
+		ctc.ctc_server_encoder.end({
+		    'msgid': message.msgid,
+		    'status': mod_protocol.FP_STATUS_END,
+		    'data': { 'd': [ true, null, 7 ] }
+		});
+	});
+
+	ctr = ctc.makeRequestWithOptions({
+	    'ignoreNullValues': true
+	}, function () {
+		mod_assertplus.ok(ctr.ctr_error === null);
+		mod_assertplus.deepEqual(ctr.ctr_data, [ true, 7 ]);
+		ctc.cleanup();
+		callback();
+	});
+    }
+
  }, {
     'name': 'pending and new requests: transport detach',
     'run': function (ctc, callback) {
-- 
2.21.0

