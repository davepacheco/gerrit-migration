From 9bbbbcdaf84dff87c0725b0b243c21f883841b9b Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Tue, 26 Jul 2016 12:27:17 -0700
Subject: [PATCH] DOCKER-845 add tests for attach/exec status codes

---
 test/integration/cli-attach.test.js | 172 ++++++++++++++++++++++++++++
 test/lib/cli.js                     |  21 +++-
 2 files changed, 192 insertions(+), 1 deletion(-)
 create mode 100644 test/integration/cli-attach.test.js

diff --git a/test/integration/cli-attach.test.js b/test/integration/cli-attach.test.js
new file mode 100644
index 0000000..e82e88f
--- /dev/null
+++ b/test/integration/cli-attach.test.js
@@ -0,0 +1,172 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+/*
+ * Integration tests for `docker attach`
+ */
+
+var test = require('tape');
+var vasync = require('vasync');
+
+var cli = require('../lib/cli');
+
+
+// --- Globals
+
+var CONTAINER_PREFIX = 'sdcdockertest_';
+var container = CONTAINER_PREFIX + 'attach_test';
+
+var log = require('../lib/log');
+
+
+/**
+ * Setup
+ */
+
+test('setup', function (tt) {
+    tt.test('DockerEnv: alice init', cli.init);
+});
+
+
+/**
+ * Tests
+ */
+
+test('test status code on attach exiting with implicit 0', function (tt) {
+    removeTestContainers(tt);
+    tt.test('create container ' + container, function (t) {
+        t.plan(4);
+        var cmd = 'sleep 20; echo done';
+
+        cli.run(t, {
+            args: '-d --name ' + container + ' -d ubuntu bash -c "' + cmd + '"'
+        },
+        function (err, id) {
+            t.ifErr(err, 'docker run ' + container);
+
+            cli.attach(t, { args: id },
+            function (attachErr) {
+                t.ifErr(attachErr, 'attach should have not returned an error');
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('test status code on attach exiting with 2', function (tt) {
+    removeTestContainers(tt);
+    tt.test('create container ' + container, function (t) {
+        t.plan(5);
+        var cmd = 'sleep 20; exit 2';
+
+        cli.run(t, {
+            args: '-d --name ' + container + ' -d ubuntu bash -c "' + cmd + '"'
+        },
+        function (err, id) {
+            t.ifErr(err, 'docker run ' + container);
+
+            cli.attach(t, { args: id },
+            function (attachErr) {
+                t.ok(attachErr, 'attach should have returned an error');
+                t.equal(attachErr.cause().code, 2,
+                        'attach error status code should match');
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('test status code on exec exiting with implicit 0',
+function (tt) {
+    removeTestContainers(tt);
+    tt.test('create container ' + container, function (t) {
+        t.plan(4);
+
+        var cmd = 'echo yolo';
+
+        cli.run(t, { args: '-d --name ' + container + ' -d nginx'  },
+        function (err, id) {
+            t.ifErr(err, 'docker run ' + container);
+
+            cli.docker('exec ' + id + ' bash -c "' + cmd + '"',
+            function (execErr) {
+                t.ifErr(execErr, 'docker exec ' + container);
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('test status code on exec exiting with 2',
+function (tt) {
+    removeTestContainers(tt);
+    tt.test('create container ' + container, function (t) {
+        t.plan(5);
+
+        var cmd = 'exit 2';
+
+        cli.run(t, { args: '-d --name ' + container + ' -d nginx'  },
+        function (err, id) {
+            t.ifErr(err, 'docker run ' + container);
+
+            cli.docker('exec ' + id + ' bash -c "' + cmd + '"',
+            function (execErr) {
+                t.ok(execErr, 'docker exec ' + container);
+                t.equal(execErr.cause().code, 2);
+                t.end();
+            });
+        });
+    });
+});
+
+
+/**
+ * Cleanup
+ */
+
+test('container cleanup', function (tt) {
+    removeTestContainers(tt);
+});
+
+
+/**
+ * Support functions
+ */
+
+function removeTestContainers(tt) {
+    tt.test('remove old containers', function (t) {
+        cli.ps(t, {args: '-a'}, function (err, entries) {
+            t.ifErr(err, 'docker ps');
+
+            var oldContainers = entries.filter(function (entry) {
+                return (entry.names.substr(0, CONTAINER_PREFIX.length)
+                        === CONTAINER_PREFIX);
+            });
+
+            vasync.forEachParallel({
+                inputs: oldContainers,
+                func: function _delOne(entry, cb) {
+                    cli.rm(t, {args: '-f ' + entry.container_id},
+                            function (err2)
+                    {
+                        t.ifErr(err2, 'rm container ' + entry.container_id);
+                        cb();
+                    });
+                }
+            }, function (forEachErr) {
+                tt.ifErr(forEachErr);
+                t.end();
+            });
+        });
+    });
+}
diff --git a/test/lib/cli.js b/test/lib/cli.js
index dd98e47..4b263ba 100644
--- a/test/lib/cli.js
+++ b/test/lib/cli.js
@@ -549,6 +549,24 @@ function cliCommit(t, opts, callback) {
 }
 
 
+/**
+ * `docker attach <id>`
+ *
+ * Attach to a running container.
+ */
+
+function cliAttach(t, opts, callback) {
+    assert.object(t, 't');
+    assert.object(opts, 'opts');
+    assert.string(opts.args, 'opts.args');
+
+    ALICE.docker('attach ' + opts.args, function (err, stdout, stderr) {
+        // pass errors back to caller
+        common.done(t, callback, err);
+    });
+}
+
+
 module.exports = {
     commit: cliCommit,
     create: cliCreate,
@@ -575,5 +593,6 @@ module.exports = {
     rmAllCreated: cliRmAllCreated,
     run: cliRun,
     stop: cliStop,
-    start: cliStart
+    start: cliStart,
+    attach: cliAttach
 };
-- 
2.21.0

