From 7f0e074f20515ad8eb44071613ba320b1712ddcd Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Tue, 13 Aug 2019 09:58:17 -0400
Subject: [PATCH] MANTA-4429 rust-sharkspotter does not filter by shark

---
 src/lib.rs | 36 ++++++++++++++++++++++++++++--------
 1 file changed, 28 insertions(+), 8 deletions(-)

diff --git a/src/lib.rs b/src/lib.rs
index a5800a7..59b6e45 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -9,7 +9,7 @@ use libmanta::moray::MantaObject;
 use moray::client::MorayClient;
 use serde::Deserialize;
 use serde_json::{self, Value};
-use slog::Logger;
+use slog::{debug, error, Logger};
 use std::io::{Error, ErrorKind};
 use std::net::IpAddr;
 use trust_dns_resolver::Resolver;
@@ -62,6 +62,7 @@ fn find_largest_id_value(
 fn query_handler<F>(
     val: &Value,
     shard_num: u32,
+    shark: &str,
     handler: &mut F,
 ) -> Result<(), Error>
 where
@@ -75,6 +76,15 @@ where
     let manta_obj: MantaObject =
         serde_json::from_str(manta_str.as_str()).unwrap();
 
+    // Filter on shark
+    if !manta_obj
+        .sharks
+        .iter()
+        .any(|s| s.manta_storage_id.starts_with(shark))
+    {
+        return Ok(());
+    }
+
     handler(manta_obj, shard_num)?;
 
     Ok(())
@@ -92,13 +102,14 @@ fn read_chunk<F>(
     mclient: &mut MorayClient,
     query: &str,
     shard_num: u32,
+    shark: &str,
     handler: &mut F,
 ) -> Result<(), Error>
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
     match mclient.sql(query, vec![], r#"{"timeout": 10000}"#, |a| {
-        query_handler(a, shard_num, handler)
+        query_handler(a, shard_num, shark, handler)
     }) {
         Ok(()) => Ok(()),
         Err(e) => {
@@ -119,13 +130,14 @@ fn iter_ids<F>(
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
-    let mut mclient = MorayClient::from_str(moray_socket, log, None)?;
+    let mut mclient = MorayClient::from_str(moray_socket, log.clone(), None)?;
+
     let mut start_id = conf.begin;
     let mut end_id = conf.begin + conf.chunk_size - 1;
     let largest_id = match find_largest_id_value(&mut mclient, id_name) {
         Ok(id) => id,
         Err(e) => {
-            eprintln!("Error finding largest ID: {}, using 0", e);
+            error!(&log, "Error finding largest ID: {}, using 0", e);
             0
         }
     };
@@ -138,8 +150,13 @@ where
 
     while remaining > 0 {
         let query = chunk_query(id_name, start_id, end_id, conf.chunk_size);
-        match read_chunk(&mut mclient, query.as_str(), shard_num, &mut handler)
-        {
+        match read_chunk(
+            &mut mclient,
+            query.as_str(),
+            shard_num,
+            &conf.shark,
+            &mut handler,
+        ) {
             Ok(()) => (),
             Err(e) => return Err(e),
         };
@@ -156,9 +173,12 @@ where
 
         remaining = largest_id - start_id + 1;
 
-        println!(
+        debug!(
+            &log,
             "start_id: {} | end_id: {} | remaining: {}",
-            start_id, end_id, remaining
+            start_id,
+            end_id,
+            remaining
         );
     }
 
-- 
2.21.0

