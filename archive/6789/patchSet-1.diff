From d072ed27e1ca737033d26575e6026eae57528a26 Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Tue, 13 Aug 2019 09:58:17 -0400
Subject: [PATCH] MANTA-4429 rust-sharkspotter does not filter by shark

---
 src/lib.rs  | 45 +++++++++++++++++++++++++++++++++++++--------
 src/main.rs |  5 ++---
 2 files changed, 39 insertions(+), 11 deletions(-)

diff --git a/src/lib.rs b/src/lib.rs
index a2e21a2..b0be704 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -9,7 +9,7 @@ use libmanta::moray::MantaObject;
 use moray::client::MorayClient;
 use serde::Deserialize;
 use serde_json::{self, Value};
-use slog::Logger;
+use slog::{debug, error, warn, Logger};
 use std::io::{Error, ErrorKind};
 use std::net::IpAddr;
 use trust_dns_resolver::Resolver;
@@ -63,6 +63,7 @@ fn query_handler<F>(
     val: &Value,
     shard_num: u32,
     handler: &mut F,
+    shark: &str,
 ) -> Result<(), Error>
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
@@ -75,6 +76,11 @@ where
     let manta_obj: MantaObject =
         serde_json::from_str(manta_str.as_str()).unwrap();
 
+    // Filter on shark
+    if !manta_obj.sharks.iter().any(|s| s.manta_storage_id == shark) {
+        return Ok(());
+    }
+
     handler(manta_obj, shard_num)?;
 
     Ok(())
@@ -87,6 +93,7 @@ fn read_chunk<F>(
     end: u64,
     count: u64,
     shard_num: u32,
+    shark: &str,
     handler: &mut F,
 ) -> Result<(), Error>
 where
@@ -99,8 +106,7 @@ where
     );
 
     match mclient.sql(query.as_str(), vec![], r#"{"timeout": 10000}"#, |a| {
-        let id: String = serde_json::from_value(a[0][id_name].clone()).unwrap();
-        query_handler(a, shard_num, handler)
+        query_handler(a, shard_num, handler, shark)
     }) {
         Ok(()) => Ok(()),
         Err(e) => {
@@ -121,13 +127,16 @@ fn iter_ids<F>(
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
-    let mut mclient = MorayClient::from_str(moray_socket.as_str(), log, None).unwrap();
+    let mut mclient =
+        MorayClient::from_str(moray_socket.as_str(), log.clone(), None)
+            .unwrap();
+
     let mut start_id = conf.begin;
     let mut end_id = conf.begin + conf.chunk_size - 1;
     let largest_id = match find_largest_id_value(&mut mclient, id_name) {
         Ok(id) => id,
         Err(e) => {
-            eprintln!("Error finding largest ID: {}, using 0", e);
+            error!(&log, "Error finding largest ID: {}, using 0", e);
             0
         }
     };
@@ -146,6 +155,7 @@ where
             end_id,
             conf.chunk_size,
             shard_num,
+            &conf.shark,
             &mut handler,
         ) {
             Ok(()) => (),
@@ -164,21 +174,40 @@ where
 
         remaining = largest_id - start_id + 1;
 
-        println!(
+        debug!(
+            &log,
             "start_id: {} | end_id: {} | remaining: {}",
-            start_id, end_id, remaining
+            start_id,
+            end_id,
+            remaining
         );
     }
 
     Ok(())
 }
 
-pub fn run<F>(conf: &config::Config, log: Logger, mut handler: F) -> Result<(), Error>
+pub fn run<F>(
+    mut conf: config::Config,
+    log: Logger,
+    mut handler: F,
+) -> Result<(), Error>
 where
     F: FnMut(MantaObject, u32) -> Result<(), Error>,
 {
     let resolver = Resolver::from_system_conf().unwrap();
 
+    if !conf.shark.contains(conf.domain.as_str()) {
+        let new_shark = format!("{}.{}", conf.shark, conf.domain);
+        warn!(log,
+            "Domain \"{}\" not found in storage node string:\"{}\", using \"{}\"",
+            conf.domain,
+            conf.shark,
+            new_shark
+            );
+
+        conf.shark = new_shark;
+    }
+
     for i in conf.min_shard..=conf.max_shard {
         let moray_host = format!("{}.moray.{}", i, conf.domain);
         let response = resolver.lookup_ip(moray_host.as_str())?;
diff --git a/src/main.rs b/src/main.rs
index ad1d783..a111ccc 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,8 +2,7 @@
 
 extern crate sharkspotter;
 
-
-use slog::{o, Logger, Drain};
+use slog::{o, Drain, Logger};
 use std::collections::HashMap;
 use std::env;
 use std::fs::OpenOptions;
@@ -44,7 +43,7 @@ fn main() -> Result<(), Error> {
 
         file_map.insert(i, file);
     }
-    sharkspotter::run(&conf, log, |mobj, shard| {
+    sharkspotter::run(conf, log, |mobj, shard| {
         println!("{} | {}", shard, mobj.object_id);
         let file = file_map.get_mut(&shard).unwrap();
         let buf = serde_json::to_string(&mobj)?;
-- 
2.21.0

