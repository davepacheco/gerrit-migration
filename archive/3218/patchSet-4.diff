commit 9ed2ed90dba284a46b4082403e9e5b914fbcfe9f (refs/changes/18/3218/4)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2018-01-15T16:25:49-08:00 (1 year, 9 months ago)
    
    VOLAPI-82 volume names should be limited in size

diff --git a/docs/index.md b/docs/index.md
index 1f15fa6..55e4d82 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -8984,7 +8984,7 @@ Volumes are represented as objects that share a common set of properties:
 --------     | -------- | --------------- |
 id         | String   | The UUID of the volume itself
 owner_uuid | String   | The UUID of the volume's owner. In the example of a NFS shared volume, the owner is the user who created the volume
-name       | String   | The volume's name. It must be unique for a given user. It must match the regular expression `/^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/`. There is no limit on the length of a volume's name
+name       | String   | The volume's name. It must be unique for a given user. It must match the regular expression `/^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/`. The maximum length for a volume's name is 256 characters. Trying to create or update a volume with a name longer than 256 characters will result in an error
 type       | String   | Identifies the volume's type. There is currently one possible value for this property: `tritonnfs`. Additional types may be added in the future, and they can all have different sets of [type specific properties](#type-specific-properties)
 create_timestamp | String | A timestamp that indicates the time at which the volume was created
 state      | String   | `creating`, `ready`, `deleting`, `deleted` or `failed`. Indicates in which state the volume currently is. `failed` volumes are still persisted to Moray for troubleshooting/debugging purposes. See the section [Volumes state machine](#volumes-state-machine) for a diagram and further details about the volumes' state machine
@@ -9158,7 +9158,7 @@ volumes support has been explicitly enabled. By default, it is disabled._
 
 Param       | Type         | Mandatory | Description
 ----------- | ------------ |-----------|--------------------------------------
-name        | String       | No        | The desired name for the volume. If missing, a unique name for the current user will be generated
+name        | String       | No        | The desired name for the volume. If missing, a unique name for the current user will be generated. The maximum length of a volume name is 256 characters, trying to create a volume with a name longer than 256 characters will generate an error
 size        | Number       | No        | The desired minimum storage capacity for that volume in mebibytes. Default value is 10240 mebibytes (10 gibibytes)
 type        | String       | Yes       | The type of volume. Currently only `'tritonnfs'` is supported
 networks    | Array        | Yes       | A list of UUIDs representing networks on which the volume is reachable. These networks must be fabric networks owned by the user sending the request
@@ -9238,7 +9238,7 @@ shared volume:
 Param | Type   | Description
 ----- | -------| ----------------------------------------
 id    | String | The UUID of the volume object
-name  | String | The new name of the volume with id `id`
+name  | String | The new name of the volume with id `id`. Must be <= 256 characters in length. Sending a name longer than 256 characters will generate an error
 
 Sending any other input parameter will result in an error. Updating other
 properties of a volume, such as the networks it's attached to, must be performed
diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index 8ca3192..6400858 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -58,10 +58,10 @@ function validateGetVolumeInput(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr = volumesValidation.validateVolumeId(req.params.id);
+    var validationErrs = volumesValidation.validateVolumeId(req.params.id);
 
-    if (validationErr) {
-        next([validationErr]);
+    if (validationErrs.length > 0) {
+        next(new restify.InvalidArgumentError(validationErrs.join(', ')));
     } else {
         next();
     }
@@ -112,8 +112,9 @@ function validateListVolumesInput(req, res, next) {
     assert.func(next, 'next');
 
     var invalidParamsErrs;
-    var latestErr;
+    var latestErrs = [];
     var predFields;
+    var predicateErr;
     var reqParams = req.params;
     var validationErrs = [];
     var VALID_PARAM_NAMES = [
@@ -130,40 +131,32 @@ function validateListVolumesInput(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (reqParams.name !== undefined) {
-        latestErr =
+        latestErrs =
             volumesValidation.validateVolumeNameSearchParam(reqParams.name);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+            validationErrs = validationErrs.concat(latestErrs);
     }
 
     if (reqParams.type !== undefined) {
-        latestErr = volumesValidation.validateVolumeType(reqParams.type);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+        latestErrs = volumesValidation.validateVolumeType(reqParams.type);
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
     if (reqParams.size !== undefined) {
-        latestErr =
+        latestErrs =
             volumesValidation.validateVolumeSizeSearchParam(reqParams.size);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
     if (reqParams.state !== undefined) {
-        latestErr = volumesValidation.validateVolumeState(reqParams.state);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+        latestErrs = volumesValidation.validateVolumeState(reqParams.state);
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
     if (reqParams !== undefined && reqParams.predicate !== undefined) {
-        latestErr =
+        predicateErr =
             predicateValidation.validatePredicate(reqParams.predicate);
-        if (latestErr) {
-            validationErrs.push(latestErr);
+        if (predicateErr) {
+            validationErrs.push(predicateErr);
         } else {
             req.listVolumesPredicate =
                 krill.createPredicate(JSON.parse(reqParams.predicate));
@@ -254,34 +247,31 @@ function listVolumes(req, res, next) {
 
 function validateCreateVolumeInput(req, res, next) {
     assert.object(req, 'req');
+    assert.object(req.params, 'req.params');
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var latestErr;
+    var latestErrs = [];
+    var reqParams = req.params;
     var validationErrs = [];
 
-    latestErr = volumesValidation.validateVolumeName(req.params.name,
-        {allowEmpty: true});
-    if (latestErr) {
-        validationErrs.push(latestErr);
+    if (reqParams.name !== undefined) {
+        latestErrs = volumesValidation.validateVolumeName(reqParams.name);
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
-    latestErr = volumesValidation.validateVolumeType(req.params.type);
-    if (latestErr) {
-        validationErrs.push(latestErr);
-    }
+    latestErrs = volumesValidation.validateVolumeType(reqParams.type);
+    validationErrs = validationErrs.concat(latestErrs);
 
-    if (req.params.size !== undefined) {
-        latestErr = volumesValidation.validateVolumeSize(req.params.size);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+    if (reqParams.size !== undefined) {
+        latestErrs = volumesValidation.validateVolumeSize(reqParams.size);
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
-    latestErr = volumesValidation.validateVolumeNetworks(req.params.networks);
-    if (latestErr) {
-        validationErrs.push(latestErr);
-    }
+    latestErrs = volumesValidation.validateVolumeNetworks(reqParams.networks);
+    validationErrs = validationErrs.concat(latestErrs);
+
+    req.log.info({validationErrs: validationErrs}, 'validation errors');
 
     if (validationErrs.length > 0) {
         next(new restify.InvalidArgumentError(validationErrs.join(', ')));
@@ -295,13 +285,17 @@ function validateListVolumeSizesInput(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var validationErrs = [];
 
     if (req.params.type !== undefined) {
-        validationErr = volumesValidation.validateVolumeType(req.params.type);
+        validationErrs = volumesValidation.validateVolumeType(req.params.type);
     }
 
-    next(validationErr);
+    if (validationErrs.length > 0) {
+        next(new restify.InvalidArgumentError(validationErrs.join(', ')));
+    } else {
+        next();
+    }
 }
 
 function listVolumeSizes(req, res, next) {
@@ -450,13 +444,9 @@ function validateDeleteVolumeInput(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var latestErr;
     var validationErrs = [];
 
-    latestErr = volumesValidation.validateVolumeId(req.params.id);
-    if (latestErr) {
-        validationErrs.push(latestErr);
-    }
+    validationErrs = volumesValidation.validateVolumeId(req.params.id);
 
     if (validationErrs.length > 0) {
         next(new restify.InvalidArgumentError(validationErrs.join(', ')));
@@ -504,23 +494,18 @@ function validateUpdateVolumeInput(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var latestErr;
+    var latestErrs;
     var paramName;
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['account', 'name'];
 
     if (req.params.name !== undefined) {
-        latestErr = volumesValidation.validateVolumeName(req.params.name);
-        if (latestErr) {
-            validationErrs.push(latestErr);
-        }
+        latestErrs = volumesValidation.validateVolumeName(req.params.name);
+        validationErrs = validationErrs.concat(latestErrs);
     }
 
-    latestErr = volumesValidation.validateVolumeId(req.params.id);
-
-    if (latestErr) {
-        validationErrs.push(latestErr);
-    }
+    latestErrs = volumesValidation.validateVolumeId(req.params.id);
+    validationErrs = validationErrs.concat(latestErrs);
 
     for (paramName in req.query) {
         if (!req.params.hasOwnProperty(paramName)) {
diff --git a/lib/machines.js b/lib/machines.js
index 0c820c0..00099de 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -1168,9 +1168,9 @@ function validVolumeMountpoint(mountpoint) {
 }
 
 function validateVolume(volume) {
-    var volumeNameValidationErr;
     var validationErrors = [];
     var VALID_VOLUME_MODES = ['ro', 'rw'];
+    var volumeNameValErrs = [];
 
     assert.object(volume, 'volume');
 
@@ -1187,11 +1187,8 @@ function validateVolume(volume) {
             + VALID_VOLUME_MODES.join(', ')));
     }
 
-    volumeNameValidationErr = volumeValidation.validateVolumeName(volume.name);
-    if (volumeNameValidationErr) {
-        validationErrors.push(new InvalidArgumentError('invalid volume name '
-            + 'for volume ' + util.inspect(volume)));
-    }
+    volumeNameValErrs = volumeValidation.validateVolumeName(volume.name);
+    validationErrors = validationErrors.concat(volumeNameValErrs);
 
     if (!validVolumeMountpoint(volume.mountpoint)) {
         validationErrors.push(new InvalidArgumentError('invalid mount point for'
diff --git a/lib/validation/predicate.js b/lib/validation/predicate.js
index 0a096a6..9e2a84b 100644
--- a/lib/validation/predicate.js
+++ b/lib/validation/predicate.js
@@ -63,9 +63,9 @@ function validatePredicate(predicateString) {
         assert.func(validationFunc, 'validationFunc');
 
         predicateValues.forEach(function validatePredicateValue(value) {
-            var validationError = validationFunc(value);
-            if (validationError) {
-                validationErrs.push(validationError);
+            var valueValidationErrors = validationFunc(value);
+            if (valueValidationErrors && valueValidationErrors.length > 0) {
+                validationErrs = validationErrs.concat(valueValidationErrors);
             }
         });
     }
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index bae4d34..9c754c6 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -23,133 +23,145 @@ var VALID_VOLUME_TYPES = ['tritonnfs'];
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 
 function validateVolumeId(volumeId) {
-    var err;
+    var errs = [];
 
     if (!UUID_RE.test(volumeId)) {
-        err = new Error('Invalid volume ID: ' + volumeId + '. Volume ' +
-            'ID should match ' + UUID_RE);
+        errs.push(new Error('Invalid volume ID: ' + volumeId + '. Volume ' +
+            'ID should match ' + UUID_RE));
     }
 
-    return err;
+    return errs;
 }
 
-function validateVolumeName(volumeName, opts) {
-    var allowEmptyVolName = opts && opts.allowEmpty;
-    var err;
-    var validVolumeName;
-
-    assert.optionalObject(opts, 'opts');
-    if (opts) {
-        assert.bool(opts.allowEmpty, 'opts.allowEmpty');
+function validateVolumeName(volumeName) {
+    var errs = [];
+
+    /*
+     * The limit was chosen so that:
+     *
+     * 1. it's reasonably close to the limit that docker uses for named volumes
+     *    (it seems like it uses the maximum file path length, which according
+     *    to POSIX at
+     *    http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html
+     *    is 256)
+     *
+     * 2. it's long enough to allow volume names generated by tools such as
+     *    docker-compose (which include a "project name" as a way to namespace
+     *    resources) to work
+     *
+     * 3. It's short enough to constrain the amount of resources used when
+     *    processing and storing volume names
+     */
+    var MAX_VOLUME_NAME_LENGTH = 256;
+
+    if (typeof (volumeName) !== 'string') {
+        errs.push(new Error('Invalid volume name: volume name must be a ' +
+            'string'));
     }
 
-    // Some actions allow non-existent names (empty or undefined), if
-    // opts.allowEmpty is truthy, we'll accept a missing name or empty string
-    // as valid.
-    if (allowEmptyVolName && (volumeName === undefined || volumeName === '')) {
-        validVolumeName = true;
-    } else {
-        validVolumeName = VALID_VOLUME_NAME_REGEXP.test(volumeName);
+    if (!VALID_VOLUME_NAME_REGEXP.test(volumeName)) {
+        errs.push(new Error('Invalid volume name: ' + volumeName +
+            '. Volume name should match ' + VALID_VOLUME_NAME_REGEXP));
     }
 
-    if (!validVolumeName) {
-        err = new Error('Invalid volume name: ' + volumeName + '. Volume ' +
-            'name should match ' + VALID_VOLUME_NAME_REGEXP);
+    if (volumeName && volumeName.length > MAX_VOLUME_NAME_LENGTH) {
+        errs.push(new Error('Invalid volume name length: volume name ' +
+            'must be at most ' + MAX_VOLUME_NAME_LENGTH + ' long'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeNameSearchParam(name) {
-    var err;
+    var errs = [];
 
     if (!VALID_VOLUME_NAME_SEARCH_PARAM_REGEXP.test(name)) {
-        err = new Error('invalid value for name search parameter');
+        errs.push(new Error('invalid value for name search parameter'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeType(volumeType) {
-    var err;
+    var errs = [];
     var validVolumeType = typeof (volumeType) === 'string' &&
         VALID_VOLUME_TYPES.indexOf(volumeType) !== -1;
 
     if (!validVolumeType) {
-        err = new Error('Invalid volume type: ' + volumeType + '. Volume ' +
-            'type should be one of: ' + VALID_VOLUME_TYPES.join(', '));
+        errs.push(new Error('Invalid volume type: ' + volumeType + '. Volume ' +
+            'type should be one of: ' + VALID_VOLUME_TYPES.join(', ')));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeSize(volumeSize) {
-    var err;
+    var errs = [];
     var validVolumeSize = typeof (volumeSize) === 'number' && volumeSize > 0;
 
     if (!validVolumeSize) {
-        err = new Error('Invalid volume size: ' + volumeSize);
+        errs.push(new Error('Invalid volume size: ' + volumeSize));
     }
 
-    return err;
+    return errs;
 }
 
 // NOTE: This duplicates code from sdc-volapi's lib/validation/volumes.js and
 //       should probably eventually be put in a library shared between the two.
 function validateVolumeSizeSearchParam(size) {
-    var err;
+    var errs = [];
 
     assert.optionalString(size, 'size');
 
     if (!VALID_VOLUME_SIZE_REGEXP.test(size)) {
-        err = new Error('invalid value for size search parameter, must match '
-            + VALID_VOLUME_SIZE_REGEXP.toString());
+        errs.push(new Error('invalid value for size search parameter, must ' +
+            'match ' + VALID_VOLUME_SIZE_REGEXP.toString()));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeNetwork(volumeNetwork) {
-    var err;
+    var errs = [];
 
     if (!UUID_RE.test(volumeNetwork)) {
-        err = new Error('Invalid volume network: ' + volumeNetwork);
+        errs.push(new Error('Invalid volume network: ' + volumeNetwork));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeNetworks(volumeNetworks) {
-    var err;
+    var errs = [];
     var volumeNetworksValid = false;
 
-    if (volumeNetworks === undefined) {
-        volumeNetworksValid = true;
-    } else {
-        if (Array.isArray(volumeNetworks)) {
+    if (volumeNetworks !== undefined) {
+        if (!Array.isArray(volumeNetworks)) {
+            errs.push(new Error('Invalid networks: networks must be an array'));
+        } else {
             volumeNetworksValid =
                 volumeNetworks.every(function checkNetworkValidity(network) {
-                    return validateVolumeNetwork(network) === undefined;
+                    return validateVolumeNetwork(network).length === 0;
                 });
-        }
-    }
 
-    if (!volumeNetworksValid) {
-        err = new Error('Invalid networks: ' + volumeNetworks);
+            if (!volumeNetworksValid) {
+                errs.push(new Error('Invalid networks: ' + volumeNetworks));
+            }
+        }
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeState(state) {
+    var errs = [];
     var VALID_STATES = ['creating', 'ready', 'failed', 'deleting'];
-    var err;
 
     if (VALID_STATES.indexOf(state) === -1) {
-        err = new Error('Volume state: ' + state + ' is invalid');
+        errs.push(new Error('Volume state: ' + state + ' is invalid'));
     }
 
-    return err;
+    return errs;
 }
 
 module.exports = {
diff --git a/test/volumes-create-name.test.js b/test/volumes-create-name.test.js
index 4e6b779..4e6f889 100644
--- a/test/volumes-create-name.test.js
+++ b/test/volumes-create-name.test.js
@@ -42,9 +42,11 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
             t.ifErr(volumeCreationErr,
                 'creating a volume with no name should succeed');
             t.ok(testVolume, 'should have set testVolume');
-            t.ok((testVolume.name.length > 1),
-                'returned volume should have a name, got: '
-                + JSON.stringify(testVolume.name));
+            if (testVolume) {
+                t.ok((testVolume.name.length > 1),
+                    'returned volume should have a name, got: '
+                    + JSON.stringify(testVolume.name));
+            }
 
             t.end();
         };
@@ -53,15 +55,25 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
     function volumeReadyWaiter(t) {
         var expectedState = 'ready';
 
+        if (!testVolume) {
+            t.fail('no volume to wait on when we expected one');
+            t.end();
+            return;
+        }
+
         mod_testVolumes.waitForTransitionToState(CLIENT, testVolume.id,
             expectedState, function onTransition() {
                 CLIENT.get('/my/volumes/' + testVolume.id,
                     function onGetVolume(getVolumeErr, req, res, volume) {
                         t.ifErr(getVolumeErr,
                             'getting newly created volume should succeed');
-                        t.equal(volume.state, expectedState,
-                            'volume should have transitioned to state \'' +
+                        t.ok(volume, 'response should not be empty');
+
+                        if (volume) {
+                            t.equal(volume.state, expectedState,
+                                'volume should have transitioned to state \'' +
                                 expectedState + '\'');
+                        }
 
                         t.end();
                     });
@@ -107,21 +119,6 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
             volumeReadyWaiter(t);
     });
 
-    // second, create with empty string for a name (results should be same)
-
-    test('creating volume with no name',
-        function (t) {
-            CLIENT.post('/my/volumes', {
-                name: '',
-                type: 'tritonnfs'
-            }, onVolumeCreatedCreator(t));
-    });
-
-    test('volume should eventually transition to state \'ready\'',
-        function (t) {
-            volumeReadyWaiter(t);
-    });
-
     test('deleting volumes should be successful', function (t) {
         vasync.forEachParallel({
             func: function deleteVolume(volume, done) {
@@ -139,6 +136,29 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
         });
     });
 
+    test('creating volumes with invalid names', function (t) {
+        /*
+         * 'x'.repeat(257) generates a volume name that is one character too
+         * long, as the max length for volume names is 256 characters.
+         */
+        var INVALID_NAMES = ['', '-foo', '.foo', 'x'.repeat(257)];
+        vasync.forEachParallel({
+            func: function createVolume(volumeName, done) {
+                CLIENT.post('/my/volumes', {
+                    type: 'tritonnfs',
+                    name: volumeName
+                }, function onVolCreated(volCreatErr) {
+                    t.ok(volCreatErr, 'creating volume with name ' +
+                        volumeName + ' should error, got: ' + volCreatErr);
+                    done();
+                });
+            },
+            inputs: INVALID_NAMES
+        }, function invalidVolsCreated(err) {
+            t.end();
+        });
+    });
+
     test('teardown', function (t) {
         common.teardown(CLIENTS, SERVER, function () {
             t.end();
diff --git a/test/volumes-create-validation.test.js b/test/volumes-create-validation.test.js
index 4fb3865..54c362b 100644
--- a/test/volumes-create-validation.test.js
+++ b/test/volumes-create-validation.test.js
@@ -141,6 +141,11 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
                         invalidNetworks;
                     var actualErrMsg;
 
+                    if (!Array.isArray(invalidNetworks)) {
+                        expectedErrorMsg =
+                            'Invalid networks: networks must be an array';
+                    }
+
                     if (volCreationErr) {
                         actualErrMsg = volCreationErr.message;
                     }
diff --git a/test/volumes-list-sizes.test.js b/test/volumes-list-sizes.test.js
index 5956613..f07cfe6 100644
--- a/test/volumes-list-sizes.test.js
+++ b/test/volumes-list-sizes.test.js
@@ -96,8 +96,8 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
                     (err ? err.message : JSON.stringify(err)));
                 t.ok(body, 'expected to get a body');
                 if (body) {
-                    t.equal(body.message, 'Invalid volume type: invalidType. ' +
-                        'Volume type should be one of: tritonnfs',
+                    t.equal(body.message, 'Error: Invalid volume type: ' +
+                        'invalidType. Volume type should be one of: tritonnfs',
                         'expected body to be an invalid type error');
                 }
                 t.end();
diff --git a/test/volumes-update-name.test.js b/test/volumes-update-name.test.js
index 7307e44..68cb3fc 100644
--- a/test/volumes-update-name.test.js
+++ b/test/volumes-update-name.test.js
@@ -10,6 +10,7 @@
 
 var assert = require('assert-plus');
 var test = require('tape').test;
+var vasync = require('vasync');
 var verror = require('verror');
 
 var common = require('./common');
@@ -108,7 +109,7 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
             });
     });
 
-    test('updating newly created volume\'s name should succeed', function (t) {
+    test('updating newly-created volume\'s name should succeed', function (t) {
         CLIENT.post('/my/volumes/' + testVolume.id, {
             name: testVolumeSecondName
         }, function onVolumeRenamed(volUpdateErr) {
@@ -118,6 +119,29 @@ if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
         });
     });
 
+    test('updating newly-created volume\'s name with invalid name should fail',
+        function (t) {
+            /*
+             * 'x'.repeat(257) generates a volume name that is one character too
+             * long, as the max length for volume names is 256 characters.
+             */
+            var INVALID_NAMES = ['', '-foo', '.foo', 'x'.repeat(257)];
+            vasync.forEachParallel({
+                func: function createVolume(volumeName, done) {
+                    CLIENT.post('/my/volumes/' + testVolume.id, {
+                        name: volumeName
+                    }, function onVolCreated(volCreatErr) {
+                        t.ok(volCreatErr, 'updating volume with name ' +
+                            volumeName + ' should error, got: ' + volCreatErr);
+                        done();
+                    });
+                },
+                inputs: INVALID_NAMES
+            }, function invalidVolsCreated(err) {
+                t.end();
+            });
+        });
+
     test('listing volumes should only include new name', function (t) {
         CLIENT.get('/my/volumes',
             function onVolumesListed(volGetErr, req, res, volumes) {
