commit 265c8bec582b8b6351f8ff0c49f54944646b77d3 (refs/changes/41/3841/4)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2018-04-24T00:19:43+00:00 (1 year, 6 months ago)
    
    TRITON-312 Extend plugin-manager so updating NICs is possible
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Orlando Vazquez <orlando@joyent.com>

diff --git a/docs/index.md b/docs/index.md
index 40a9222..b45976e 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -908,6 +908,11 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+## 8.11.0
+
+- Added a new API method to the plugin interface: modifyProvisionNetworks. This
+  can be used to modify network arguments sent in the vmapi provision call.
+
 ## 8.10.0
 
 - GetImage now includes information about the brand requirements in the
diff --git a/lib/machines.js b/lib/machines.js
index 14e5f92..6769917 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -1554,6 +1554,14 @@ function create(req, res, next) {
         });
     }
 
+    pipeline.push(function callModifyNetworkPlugins(_, cb) {
+        req.plugins.modifyProvisionNetworks({
+            account: req.account,
+            networks: opts.networks,
+            req_id: req.getId()
+        }, cb);
+    });
+
     /*
      * We need to verify that if a user passed in networks with IPs that none
      * of the IPs are considered "managed".  NAPI will handle other validations
diff --git a/lib/plugin-manager.js b/lib/plugin-manager.js
index 3ea5b8e..4c7f27c 100644
--- a/lib/plugin-manager.js
+++ b/lib/plugin-manager.js
@@ -337,3 +337,37 @@ function postProvision(opts, cb) {
 
     callfuncs();
 };
+
+
+/*
+ * This hook is run during provisioning, just before the creation of a
+ * container. It performs no checks, and returns no error. It modifies the
+ * opts.networks argument.
+ */
+PluginManager.prototype.modifyProvisionNetworks =
+function modifyProvisionNetworks(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.arrayOfObject(opts.networks, 'opts.networks');
+    assert.uuid(opts.req_id, 'opts.req_id');
+    assert.func(cb, 'cb');
+
+    var hooks = this.hooks.modifyProvisionNetworks;
+    var funcs = hooks.map(function wrapFunc(func) {
+        return function (_, next) {
+            func(opts, next);
+        };
+    });
+
+    // Runs every plugin (if any).
+    function callfuncs() {
+        if (funcs.length === 0) {
+            return cb();
+        }
+
+        var func = funcs.pop();
+        return func(opts, callfuncs);
+    }
+
+    callfuncs();
+};
diff --git a/package.json b/package.json
index dd20a5a..5e45bdc 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "8.10.0",
+    "version": "8.11.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/test/plugins/plugin-manager.test.js b/test/plugins/plugin-manager.test.js
index db087ce..742ce90 100644
--- a/test/plugins/plugin-manager.test.js
+++ b/test/plugins/plugin-manager.test.js
@@ -989,3 +989,117 @@ function (t) {
 
     t.end();
 });
+
+
+test('modifyProvisionNetworks',
+function (t) {
+    var manager = getManager();
+
+    var called = 0;
+    manager.hooks.modifyProvisionNetworks = [
+        function (opts, next) {
+            called += 1;
+            t.deepEqual({
+                account: {},
+                networks: [ {} ],
+                req_id: 'f54db238-43bd-11e8-b7d1-42004d19d401'
+            }, opts, 'opts');
+            next();
+        },
+        function (opts, next) {
+            called += 1;
+            t.deepEqual({
+                account: {},
+                networks: [ {} ],
+                req_id: 'f54db238-43bd-11e8-b7d1-42004d19d401'
+            }, opts, 'opts');
+            next();
+        }
+    ];
+
+    manager.modifyProvisionNetworks({
+        account: {},
+        networks: [ {} ],
+        req_id: 'f54db238-43bd-11e8-b7d1-42004d19d401'
+    }, function extCb(err) {
+        t.ifError(err, 'err');
+        t.equal(called, 2, 'both funcs called');
+
+        t.end();
+    });
+});
+
+
+test('modifyProvisionNetworks - no plugins',
+function (t) {
+    var manager = getManager();
+    manager.hooks.modifyProvisionNetworks = [];
+
+    manager.modifyProvisionNetworks({
+        account: {},
+        networks: [ {} ],
+        req_id: 'f54db238-43bd-11e8-b7d1-42004d19d401'
+    }, function extCb(err) {
+        t.ifError(err, 'err');
+        t.end();
+    });
+});
+
+
+test('modifyProvisionNetworks - badargs',
+function (t) {
+    var manager = getManager();
+
+    try {
+        manager.modifyProvisionNetworks();
+        t.fail('exception not thrown');
+    } catch (e) {
+        t.deepEqual(e.message, 'opts (object) is required', 'e.message');
+        t.deepEqual(e.expected, 'object', 'e.expected');
+        t.deepEqual(e.actual, 'undefined', 'e.actual');
+    }
+
+    try {
+        manager.modifyProvisionNetworks({});
+        t.fail('exception not thrown');
+    } catch (e) {
+        t.deepEqual(e.message, 'opts.account (object) is required',
+            'e.message');
+        t.deepEqual(e.expected, 'object', 'e.expected');
+        t.deepEqual(e.actual, 'undefined', 'e.actual');
+    }
+
+    try {
+        manager.modifyProvisionNetworks({ account: {} });
+        t.fail('exception not thrown');
+    } catch (e) {
+        t.deepEqual(e.message, 'opts.networks ([object]) is required',
+            'e.message');
+        t.deepEqual(e.expected, '[object]', 'e.expected');
+        t.deepEqual(e.actual, 'undefined', 'e.actual');
+    }
+
+    try {
+        manager.modifyProvisionNetworks({ account: {}, networks: [] });
+        t.fail('exception not thrown');
+    } catch (e) {
+        t.deepEqual(e.message, 'opts.req_id (uuid) is required', 'e.message');
+        t.deepEqual(e.expected, 'uuid', 'e.expected');
+        t.deepEqual(e.actual, 'undefined', 'e.actual');
+    }
+
+    try {
+        manager.modifyProvisionNetworks({
+            account: {},
+            networks: [],
+            req_id: 'f54db238-43bd-11e8-b7d1-42004d19d401'
+        });
+        t.fail('exception not thrown');
+    } catch (e) {
+        t.deepEqual(e.message, 'cb (func) is required', 'e.message');
+        t.deepEqual(e.expected, 'func', 'e.expected');
+        t.deepEqual(e.actual, 'undefined', 'e.actual');
+    }
+
+    t.end();
+});
