From e95fc870536663fa9d571967f7cf3ed35cbc5d12 Mon Sep 17 00:00:00 2001
From: Gordon Ross <gwr@nexenta.com>
Date: Mon, 5 Mar 2018 20:55:17 -0500
Subject: [PATCH] 9260 nsmb driver 32-bit ioctl check broken after 8685
 Reviewed by: Igor Kozhukhov <igor@dilos.org> Reviewed by: Toomas Soome
 <tsoome@me.com> Approved by: Joshua M. Clulow <josh@sysmgr.org>

---
 usr/src/uts/Makefile.targ          | 23 +++++++++++++++++++++++
 usr/src/uts/Makefile.uts           | 10 +++++++++-
 usr/src/uts/i86pc/Makefile.i86pc   |  4 ++--
 usr/src/uts/i86xpv/Makefile.i86xpv |  4 ++--
 usr/src/uts/intel/Makefile.intel   |  4 ++--
 usr/src/uts/intel/nsmb/Makefile    | 28 ++++++++++++++++++++++++++--
 6 files changed, 64 insertions(+), 9 deletions(-)

diff --git a/usr/src/uts/Makefile.targ b/usr/src/uts/Makefile.targ
index 1f2d009084..0fb7bb8a90 100644
--- a/usr/src/uts/Makefile.targ
+++ b/usr/src/uts/Makefile.targ
@@ -310,6 +310,16 @@ symcheck $(SYM_DEPS)		:= TARGET = symcheck
 ALL_TARGS	= def all clean clobber lint modlintlib \
 		  clean.lint lintlib install symcheck
 
+ALL_OBJ32	= $(ALL_TARGS:%=%.obj32)
+
+$(ALL_OBJ32):	FRC
+	@BUILD_TYPE=OBJ32 VERSION='$(VERSION)' $(MAKE) $(NO_STATE) $(TARGET).targ
+
+ALL_DEBUG32	= $(ALL_TARGS:%=%.debug32)
+
+$(ALL_DEBUG32):	FRC
+	@BUILD_TYPE=DBG32 VERSION='$(VERSION)' $(MAKE) $(NO_STATE) $(TARGET).targ
+
 ALL_OBJ64	= $(ALL_TARGS:%=%.obj64)
 
 $(ALL_OBJ64):	FRC
@@ -484,4 +494,17 @@ lint64:
 		if [ ! -f $$file ]; then touch $$file; fi \
 	done
 
+#
+#	In some places we also need to create fake lintlibs for 32b
+#	dirs so global linting works
+#
+lint32:
+	@$(ECHO) $(MODULE) fake lints
+	@for dir in $(LINT32_DIRS); do \
+		if [ ! -d $$dir ]; then mkdir $$dir; fi \
+	done
+	@for file in $(LINT32_FILES); do \
+		if [ ! -f $$file ]; then touch $$file; fi \
+	done
+
 FRC:
diff --git a/usr/src/uts/Makefile.uts b/usr/src/uts/Makefile.uts
index 0620f63d45..76cd9aef72 100644
--- a/usr/src/uts/Makefile.uts
+++ b/usr/src/uts/Makefile.uts
@@ -62,10 +62,13 @@ COMMONBASE=	$(UTSBASE)/../common
 # The NOT_RELEASE_BUILD noise is to maintain compatibility with the
 # gatekeeper's nightly build script.
 #
+DEF_BUILDS32				= obj32
 DEF_BUILDS64				= obj64
 DEF_BUILDSONLY64			= obj64
+$(NOT_RELEASE_BUILD)DEF_BUILDS32	= debug32
 $(NOT_RELEASE_BUILD)DEF_BUILDS64	= debug64
 $(NOT_RELEASE_BUILD)DEF_BUILDSONLY64	= debug64
+ALL_BUILDS32				= obj32 debug32
 ALL_BUILDS64				= obj64 debug64
 ALL_BUILDSONLY64			= obj64 debug64
 
@@ -74,11 +77,14 @@ ALL_BUILDSONLY64			= obj64 debug64
 #	or modules in 64b dirs that aren't built 32b we
 #	need to create empty modlintlib files so global lint works
 #
+LINT32_BUILDS	= debug32
 LINT64_BUILDS	= debug64
 
 #
-#	Build class (64b)
+#	Build class (32b or 64b)
 #
+CLASS_OBJ32	= 32
+CLASS_DBG32	= 32
 CLASS_OBJ64	= 64
 CLASS_DBG64	= 64
 CLASS		= $(CLASS_$(BUILD_TYPE))
@@ -86,6 +92,8 @@ CLASS		= $(CLASS_$(BUILD_TYPE))
 #
 #	Build subdirectory
 #
+OBJS_DIR_OBJ32	= obj32
+OBJS_DIR_DBG32	= debug32
 OBJS_DIR_OBJ64	= obj64
 OBJS_DIR_DBG64	= debug64
 OBJS_DIR	= $(OBJS_DIR_$(BUILD_TYPE))
diff --git a/usr/src/uts/i86pc/Makefile.i86pc b/usr/src/uts/i86pc/Makefile.i86pc
index 96421b8d46..02d03c2373 100644
--- a/usr/src/uts/i86pc/Makefile.i86pc
+++ b/usr/src/uts/i86pc/Makefile.i86pc
@@ -103,8 +103,8 @@ include $(UTSBASE)/Makefile.uts
 #
 #	Define supported builds
 #
-DEF_BUILDS		= $(DEF_BUILDS64) $(DEF_BUILDS32)
-ALL_BUILDS		= $(ALL_BUILDS64) $(ALL_BUILDS32)
+DEF_BUILDS		= $(DEF_BUILDS64)
+ALL_BUILDS		= $(ALL_BUILDS64)
 
 #
 #	x86 or amd64 inline templates
diff --git a/usr/src/uts/i86xpv/Makefile.i86xpv b/usr/src/uts/i86xpv/Makefile.i86xpv
index b26dde3710..b8450d97ab 100644
--- a/usr/src/uts/i86xpv/Makefile.i86xpv
+++ b/usr/src/uts/i86xpv/Makefile.i86xpv
@@ -93,8 +93,8 @@ include $(UTSBASE)/Makefile.uts
 #
 #	Define supported builds
 #
-DEF_BUILDS		= $(DEF_BUILDS64) $(DEF_BUILDS32)
-ALL_BUILDS		= $(ALL_BUILDS64) $(ALL_BUILDS32)
+DEF_BUILDS		= $(DEF_BUILDS64)
+ALL_BUILDS		= $(ALL_BUILDS64)
 
 #
 #	x86 or amd64 inline templates
diff --git a/usr/src/uts/intel/Makefile.intel b/usr/src/uts/intel/Makefile.intel
index 32d8867883..da17b174bb 100644
--- a/usr/src/uts/intel/Makefile.intel
+++ b/usr/src/uts/intel/Makefile.intel
@@ -103,8 +103,8 @@ MODSTUBS		= $(UTSBASE)/intel/ia32/ml/modstubs.s
 #
 #	Define supported builds
 #
-DEF_BUILDS		= $(DEF_BUILDS64) $(DEF_BUILDS32)
-ALL_BUILDS		= $(ALL_BUILDS64) $(ALL_BUILDS32)
+DEF_BUILDS		= $(DEF_BUILDS64)
+ALL_BUILDS		= $(ALL_BUILDS64)
 
 #
 #	x86 or amd64 inline templates
diff --git a/usr/src/uts/intel/nsmb/Makefile b/usr/src/uts/intel/nsmb/Makefile
index 35be8a8316..c277170dc1 100644
--- a/usr/src/uts/intel/nsmb/Makefile
+++ b/usr/src/uts/intel/nsmb/Makefile
@@ -53,13 +53,37 @@ include $(UTSBASE)/intel/Makefile.intel
 #
 #	Define targets
 #
-ALL_TARGET	= $(BINARY) $(SRC_CONFILE)
+ALL_TARGET	= $(ALL_TARGET_$(OBJS_DIR))
 LINT_TARGET	= $(MODULE).lint
-INSTALL_TARGET	= $(BINARY) $(ROOTMODULE) $(ROOT_CONFFILE)
+INSTALL_TARGET	= $(INSTALL_TARGET_$(OBJS_DIR))
 
 #
 #	Overrides.
 #
+#	We need some unusual overrides here so we'll
+#	build ioc_check.h for both 32-bit/64-bit,
+#	but only build 64-bit binaries.
+#
+
+# Build 32-bit also...
+DEF_BUILDS	= $(DEF_BUILDS64) $(DEF_BUILDS32)
+ALL_BUILDS	= $(ALL_BUILDS64) $(ALL_BUILDS32)
+# ... but don't build any 32-bit objects
+ALL_TARGET_debug32	= $(IOC_CHECK_H)
+ALL_TARGET_debug64	= $(BINARY) $(SRC_CONFILE)
+ALL_TARGET_obj32	= $(IOC_CHECK_H)
+ALL_TARGET_obj64	= $(BINARY) $(SRC_CONFILE)
+# ... and remove -xcg92 (not supported by cw)
+CFLAGS_32=
+# ... same deal for install targets
+INSTALL_TARGET_debug32	= $(IOC_CHECK_H)
+INSTALL_TARGET_debug64	= $(BINARY) $(ROOTMODULE) $(ROOT_CONFFILE)
+INSTALL_TARGET_obj32	= $(IOC_CHECK_H)
+INSTALL_TARGET_obj64	= $(BINARY) $(ROOTMODULE) $(ROOT_CONFFILE)
+
+#
+# Now the normal overrides...
+#
 MODSTUBS_DIR	= $(OBJS_DIR)
 $(MODSTUBS_O)	:= AS_CPPFLAGS += -DNSMB_MODULE
 CLEANFILES	+= $(MODSTUBS_O) $(IOC_CHECK_H)
-- 
2.21.0

