From 640eae12cf33708fa6d06ffa0e27d4717ae03040 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Wed, 21 Mar 2018 21:26:55 +0000
Subject: [PATCH] TOOLS-2003 Warden needs a NAPI-esque enum-validator

---
 lib/validate.js   |  3 ++-
 lib/validators.js | 20 +++++++++++++++++++-
 package.json      |  4 ++--
 tests/run.js      | 31 ++++++++++++++++++++++++++++++-
 4 files changed, 53 insertions(+), 5 deletions(-)

diff --git a/lib/validate.js b/lib/validate.js
index 7cf76d4..3336771 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -251,5 +251,6 @@ module.exports = {
     isNotInteger: validators.isNotInteger,
     offset: validators.offset,
     limit: validators.limit,
-    boolean: validators.boolean
+    boolean: validators.boolean,
+    enum: validators.enum
 };
diff --git a/lib/validators.js b/lib/validators.js
index 36f3f18..b72738a 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -512,6 +512,23 @@ function validateBoolean(_, name, val, callback) {
     callback(new errors.invalidParam(name, 'must be a boolean value'));
 }
 
+/*
+ * Validates that a value is one of the values present in an array that
+ * enumerates all allowed values.
+ */
+function validateEnum(values) {
+    assert.array(values, 'values');
+    return function _validateEnum(_, name, value, callback) {
+        if (values.indexOf(value) === -1) {
+            callback(new errors.invalidParam(name,
+                'must be one of: ' + values.map(JSON.stringify).join(', ')));
+            return;
+        }
+
+        callback(null, value);
+    };
+}
+
 
 module.exports = {
     fieldsArray: validateFieldsArray,
@@ -529,5 +546,6 @@ module.exports = {
     isNotInteger: isNotInteger,
     offset: validateOffset,
     limit: validateLimit,
-    boolean: validateBoolean
+    boolean: validateBoolean,
+    enum: validateEnum
 };
diff --git a/package.json b/package.json
index caa91da..9e38804 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "restify-warden",
-  "version": "0.2.0",
+  "version": "0.3.0",
   "description": "Yet another parameter validator",
   "author": "Joyent, Inc",
   "main": "./lib/validate.js",
@@ -26,7 +26,7 @@
   "scripts": {
   },
   "dependencies": {
-    "assert-plus": "0.1",
+    "assert-plus": "1.0.0",
     "vasync": "1.6.4",
     "verror": "1.3",
     "ip6addr": "0.2.2"
diff --git a/tests/run.js b/tests/run.js
index ad20f25..45d6187 100644
--- a/tests/run.js
+++ b/tests/run.js
@@ -44,7 +44,7 @@ function expErrInternal(err, t) {
 
 function expVErrInternal(err, errs,  t) {
     var errExp = new restify.InternalError('Internal error');
-    errExp.we_cause = new verror.MultiError(errs);
+    errExp.jse_cause = new verror.MultiError(errs);
 
     t.deepEqual(err, errExp);
 }
@@ -99,6 +99,35 @@ test('GEN-S-MULTI', function (t) {
     });
 });
 
+test('Enum-S-KV', function (t) {
+    var opts = {
+        strict: true,
+        required: {e: validate.enum(['foo', 'bar', 'baz'])}
+    };
+    var params = {e: 'bar'};
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.end();
+    });
+});
+
+test('Enum-S-KI', function (t) {
+    var values = ['foo', 'bar', 'baz'];
+    var opts = {
+        strict: true,
+        required: {e: validate.enum(values)}
+    };
+    var params = {e: 'oof'};
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var submsg = 'must be one of: ' + values.map(JSON.stringify).join(', ');
+        var errors = [ util_err.invalidParam('e', submsg) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
 test('Fields-S-KV', function (t) {
     var opts = {
         strict: true,
-- 
2.21.0

