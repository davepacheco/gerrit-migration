commit 09b5f12660019d8482212a0ee9b95763decf09dd (refs/changes/31/1231/5)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-01-13T01:54:01+00:00 (2 years, 9 months ago)
    
    joyent/node-cueball#69 connectionFSM could log when it's trying to connect, abandoning, and delaying
    Reviewed by: David Pacheco <dap@joyent.com>

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 737a18a..9072902 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -63,7 +63,10 @@ function ConnectionFSM(options) {
 	this.cf_checker = options.checker;
 	this.cf_lastCheck = new Date();
 	this.cf_log = options.log.child({
-		backend: this.cf_backend.key
+		component: 'CueBallConnectionFSM',
+		backend: this.cf_backend.key,
+		address: this.cf_backend.address,
+		port: this.cf_backend.port
 	});
 
 	mod_assert.object(options.recovery, 'options.recovery');
@@ -232,6 +235,7 @@ ConnectionFSM.prototype.state_connect = function (S) {
 		self.cf_lastError = new mod_errors.ConnectionTimeoutError(self);
 		S.gotoState('error');
 	});
+	this.cf_log.trace('calling constructor to open new connection');
 	this.cf_conn = this.cf_constructor(this.cf_backend);
 	mod_assert.object(this.cf_conn, 'constructor return value');
 	this.cf_conn.cf_fsm = this;
@@ -270,10 +274,12 @@ ConnectionFSM.prototype.state_connect = function (S) {
 
 ConnectionFSM.prototype.state_closed = function (S) {
 	S.validTransitions([]);
-	if (this.cf_conn)
+	this.cf_log.trace('closed');
+	if (this.cf_conn) {
 		this.cf_conn.destroy();
+		this.cf_log = this.cf_log.child({ localPort: null });
+	}
 	this.cf_conn = undefined;
-	this.cf_log.trace('ConnectionFSM closed');
 	S.on(this, 'closeAsserted', function () { });
 };
 
@@ -282,8 +288,11 @@ ConnectionFSM.prototype.state_error = function (S) {
 
 	S.on(this, 'closeAsserted', function () { });
 
-	if (this.cf_conn)
+	var log = this.cf_log;
+	if (this.cf_conn) {
 		this.cf_conn.destroy();
+		this.cf_log = this.cf_log.child({ localPort: null });
+	}
 	this.cf_conn = undefined;
 
 	if (this.cf_shadow) {
@@ -308,6 +317,7 @@ ConnectionFSM.prototype.state_error = function (S) {
 	 */
 	if (this.cf_retries === Infinity && this.cf_closeAfter) {
 		this.cf_retriesLeft = 0;
+		log.trace('backoff monitor shut down');
 		S.gotoState('closed');
 		return;
 	}
@@ -317,6 +327,7 @@ ConnectionFSM.prototype.state_error = function (S) {
 	 * attempt any kind of reconnection. Exit now.
 	 */
 	if (!this.cf_pool.shouldRetryBackend(this.cf_backend.key)) {
+		log.trace('pool no longer wants us, closing');
 		S.gotoState('closed');
 		return;
 	}
@@ -325,10 +336,13 @@ ConnectionFSM.prototype.state_error = function (S) {
 		--this.cf_retriesLeft;
 
 	if (this.cf_retries === Infinity || this.cf_retriesLeft > 0) {
+		log.trace(this.cf_lastError, 'failed to connect to ' +
+		    'backend, %d retries left: delaying before retry',
+		    this.cf_retriesLeft);
 		S.gotoState('delay');
 	} else {
-		this.cf_log.warn(this.cf_lastError, 'failed to connect to ' +
-		    'backend %s (%j)', this.cf_backend.key, this.cf_backend);
+		log.warn(this.cf_lastError, 'failed to connect to backend, ' +
+		    'retries exhausted');
 		this.cf_pool._incrCounter('retries-exhausted');
 		S.gotoState('closed');
 	}
@@ -360,6 +374,13 @@ ConnectionFSM.prototype.state_idle = function (S) {
 
 	this.cf_claimed = false;
 	this.cf_claimStack = [];
+
+	if (typeof (self.cf_conn.localPort) === 'number') {
+		this.cf_log = this.cf_log.child({
+			localPort: self.cf_conn.localPort
+		});
+	}
+
 	this.cf_log.trace('connected, idling');
 
 	if (this.cf_shadow) {
@@ -612,6 +633,8 @@ ConnectionFSM.prototype.state_busy = function (S) {
 		}
 	});
 	S.on(this.cf_conn, 'error', function (err) {
+		self.cf_log.error(err, 'connection emitted "error" while ' +
+		    'busy (claimed)');
 		self.cf_lastError = err;
 		S.gotoState('error');
 		self.cf_pool._incrCounter('error-during-busy');
diff --git a/package.json b/package.json
index c1000b6..151ef20 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.3.0",
+  "version": "1.3.1",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
