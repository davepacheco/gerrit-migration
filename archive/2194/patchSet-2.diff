From 63946254da64d090e64d059a6ef39fd1fc142d3a Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 3 Aug 2017 10:57:30 +0200
Subject: [PATCH] AGENT-1079 cn-agent: create refresh_agent task Reviewed by:
 Orlando Vazquez <orlando@joyent.com> Approved by: Orlando Vazquez
 <orlando@joyent.com>

---
 lib/app.js                  |   3 +-
 lib/tasks/agent_install.js  | 166 ++--------------------------------
 lib/tasks/refresh_agents.js |  45 ++++++++++
 lib/tasks/shared.js         | 173 ++++++++++++++++++++++++++++++++++++
 4 files changed, 229 insertions(+), 158 deletions(-)
 create mode 100644 lib/tasks/refresh_agents.js
 create mode 100644 lib/tasks/shared.js

diff --git a/lib/app.js b/lib/app.js
index 9443dda..cbf8ac5 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -358,7 +358,8 @@ App.prototype.start = function () {
             onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
             tasks: [
                 'agent_install',
-                'shutdown_cn_agent_update'
+                'shutdown_cn_agent_update',
+                'refresh_agents'
             ]
         },
         {
diff --git a/lib/tasks/agent_install.js b/lib/tasks/agent_install.js
index 7545160..73fecc1 100644
--- a/lib/tasks/agent_install.js
+++ b/lib/tasks/agent_install.js
@@ -78,9 +78,8 @@ var async = require('async');
 var child_process = require('child_process');
 var execFile = child_process.execFile;
 var fs = require('fs');
-var dns = require('dns');
 var Task = require('../task_agent/task');
-var sdcconfig = require('../smartdc-config');
+var refreshAgents = require('./shared').refreshAgents;
 var restify = require('restify');
 var bunyan = require('bunyan');
 var CURL_CMD = '/usr/bin/curl';
@@ -90,7 +89,6 @@ function AgentInstallTask(req) {
     this.req = req;
 }
 
-var config;
 var logger = bunyan.createLogger({
     name: 'apm',
     stream: process.stderr,
@@ -98,8 +96,7 @@ var logger = bunyan.createLogger({
     serializers: bunyan.stdSerializers
 });
 
-function getAgentImage(uuid, options, callback)
-{
+function getAgentImage(uuid, options, callback) {
     var imgapi_domain = options.imgapi_domain;
     var log = options.log;
     var output_prefix = options.output_prefix;
@@ -355,7 +352,7 @@ function getAgentImage(uuid, options, callback)
             args.push(filename);
 
             log.debug({cmdline: cmd + ' ' + args.join(' ')}, 'executing');
-            execFile(cmd, args, function (err, stdout, stderr) {
+            execFile(cmd, args, function (err, stdout, _) {
                 var trimmed;
 
                 if (err) {
@@ -387,155 +384,10 @@ function getAgentImage(uuid, options, callback)
     });
 }
 
-// TODO: This is pretty much duplicated code from app.js, moving to a common
-// path would be much better
-function updateAgents(opts, cb) {
-    var log = opts.log;
-
-    var cnapiaddr;
-    var uuid;
-    var agents;
-
-    async.waterfall([
-        function retrieveCnapiAddresses(callback) {
-            sdcconfig.sdcConfig(function (error, cfg) {
-                if (error) {
-                    return callback(error);
-                }
-
-                var domainName = 'cnapi.' + cfg.datacenter_name + '.' +
-                    cfg.dns_domain;
-
-                log.info({
-                    domainName: domainName
-                }, 'cnapi domain name');
-
-                return dns.resolve(domainName, function (dnserror, addrs) {
-                    if (dnserror) {
-                        return callback(dnserror);
-                    }
-
-                    if (!addrs.length) {
-                        return callback('No CNAPI addresses found');
-                    }
-
-                    cnapiaddr = addrs[0];
-                    return callback();
-                });
-            });
-        },
-        function getSysinfo(callback) {
-            execFile('/usr/bin/sysinfo', ['-f'], function (err, stdo, stde) {
-                if (err) {
-                    return callback(Error(stde.toString()));
-                }
-                var obj = JSON.parse(stdo.toString());
-                agents = obj['SDC Agents'];
-                uuid = obj.UUID;
-                return callback();
-            });
-        },
-        function getAgentsImages(callback) {
-            var agents_dir = '/opt/smartdc/agents/lib/node_modules';
-            return fs.readdir(agents_dir, function (err, files) {
-                if (err) {
-                    return callback(err);
-                }
-                return async.each(files, function getImageAndUUID(name, _cb) {
-                    var uuid_path = '/opt/smartdc/agents/etc/' + name;
-                    var uuidFileExists;
-                    var agentUuid;
-                    var image_uuid;
-                    async.series([
-                        function getImage(next) {
-                            var fpath = agents_dir + '/' + name + '/image_uuid';
-                            fs.readFile(fpath, {
-                                encoding: 'utf8'
-                            }, function (er2, img_uuid) {
-                                if (er2) {
-                                    return next(er2);
-                                }
-                                image_uuid = img_uuid.trim();
-                                return next();
-                            });
-                        },
-                        function agentUuidFileExists(next) {
-                            fs.exists(uuid_path, function (exists) {
-                                if (exists) {
-                                    uuidFileExists = true;
-                                }
-                                next();
-                            });
-                        },
-                        function getUUID(next) {
-                            if (!uuidFileExists) {
-                                return next();
-                            }
-                            return fs.readFile(uuid_path, {
-                                encoding: 'utf8'
-                            }, function (er2, agent_uuid) {
-                                if (er2) {
-                                    return next(er2);
-                                }
-                                agentUuid = agent_uuid.trim();
-                                return next();
-                            });
-                        }
-                    ], function seriesCb(er2, results) {
-                        if (er2) {
-                            return _cb(er2);
-                        }
-                        agents.forEach(function (a) {
-                            if (a.name === name) {
-                                a.image_uuid = image_uuid;
-                                if (agentUuid) {
-                                    a.uuid = agentUuid;
-                                }
-                            }
-                        });
-                        return _cb();
-                    });
-                }, function (er3) {
-                    if (er3) {
-                        return callback('Cannot get agents image versions');
-                    }
-                    return callback();
-                });
-            });
-        },
-        function postAgentsToCnapi(callback) {
-            var url = 'http://' + cnapiaddr;
-
-            var restifyOptions = {
-                url: url,
-                connectTimeout: 5000,
-                requestTimeout: 5000
-            };
-
-            log.info('cnapi ip was %s', cnapiaddr);
-            var client = restify.createJsonClient(restifyOptions);
-
-            client.post('/servers/' + uuid, {
-                agents: agents
-            }, function (err) {
-                if (err) {
-                    log.warn({
-                        error: err
-                    }, 'posting agents to cnapi');
-                } else {
-                    log.info('posted agents info to cnapi');
-                }
-                return callback();
-            });
-        }
-    ], function waterfallCb(err) {
-        return cb(err);
-    });
-}
 
 Task.createTask(AgentInstallTask);
 
-function start(callback) {
+function start() {
     var self = this;
     var apm = new APM({log: self.log});
     var image_uuid = self.req.params.image_uuid;
@@ -627,7 +479,7 @@ function start(callback) {
                         package_name: package_name,
                         package_file: package_file
                     }
-                }, function cliCb(err, req, res, obj) {
+                }, function cliCb(err, req, res) {
                     self.log.trace({res: res}, 'restify client response');
                     if (err) {
                         self.log.error({
@@ -648,7 +500,7 @@ function start(callback) {
         function isUpdate(cb) {
             var agent_dir = '/opt/smartdc/agents/lib/node_modules/' +
                             package_name;
-            fs.stat(agent_dir, function (er, st) {
+            fs.stat(agent_dir, function (er) {
                 if (er && er.code === 'ENOENT') {
                     is_update = false;
                 }
@@ -757,7 +609,7 @@ function start(callback) {
                 return cb();
             }
             // We will not fail here in case of error:
-            return updateAgents({log: self.log}, function (err) {
+            return refreshAgents({log: self.log}, function (err) {
                 if (err) {
                     self.log.error({
                         err: err
@@ -769,7 +621,7 @@ function start(callback) {
             });
         },
         function sendCNAgentTask(cb) {
-            if (!do_update ||Â package_name !== 'cn-agent') {
+            if (!do_update || package_name !== 'cn-agent') {
                 return cb();
             }
             // Once we've updated the CN Agent from cn-agent-update, we'll send
@@ -784,7 +636,7 @@ function start(callback) {
                 client.post('/tasks', {
                     task: 'shutdown_cn_agent_update',
                     params: {}
-                }, function cliCb(err, req, res, obj) {
+                }, function cliCb(err, req, res) {
                     if (err) {
                         self.log.error({
                             err: err
diff --git a/lib/tasks/refresh_agents.js b/lib/tasks/refresh_agents.js
new file mode 100644
index 0000000..3ac202e
--- /dev/null
+++ b/lib/tasks/refresh_agents.js
@@ -0,0 +1,45 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * This task updates the information regarding agents installed on this CN
+ * into CNAPI.
+ */
+
+var Task = require('../task_agent/task');
+var refreshAgents = require('./shared').refreshAgents;
+
+function RefreshAgentsTask(req) {
+    Task.call(this);
+    this.req = req;
+}
+
+Task.createTask(RefreshAgentsTask);
+
+function start() {
+    var self = this;
+
+    // We will not fail here in case of error:
+    refreshAgents({log: self.log}, function (err) {
+        if (err) {
+            self.fatal('AgentInstall error: ' + err.message);
+            return;
+        }
+        self.log.info('Agents updated into CNAPI');
+
+        self.progress(100);
+        self.finish();
+    });
+}
+
+
+RefreshAgentsTask.setStart(start);
+
+module.exports = RefreshAgentsTask;
diff --git a/lib/tasks/shared.js b/lib/tasks/shared.js
new file mode 100644
index 0000000..6a72010
--- /dev/null
+++ b/lib/tasks/shared.js
@@ -0,0 +1,173 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Functionalities shared between two or more cn-agent tasks
+ */
+
+var child_process = require('child_process');
+var execFile = child_process.execFile;
+var fs = require('fs');
+
+var async = require('async');
+var dns = require('dns');
+var restify = require('restify');
+
+var sdcconfig = require('../smartdc-config');
+
+// TODO: This is pretty much duplicated code from app.js. It would be desirable
+// to update app.js in order to use this code if possible.
+function refreshAgents(opts, cb) {
+    var log = opts.log;
+
+    var cnapiaddr;
+    var uuid;
+    var agents;
+
+    async.waterfall([
+        function retrieveCnapiAddresses(callback) {
+            sdcconfig.sdcConfig(function (error, cfg) {
+                if (error) {
+                    return callback(error);
+                }
+
+                var domainName = 'cnapi.' + cfg.datacenter_name + '.' +
+                    cfg.dns_domain;
+
+                log.info({
+                    domainName: domainName
+                }, 'cnapi domain name');
+
+                return dns.resolve(domainName, function (dnserror, addrs) {
+                    if (dnserror) {
+                        return callback(dnserror);
+                    }
+
+                    if (!addrs.length) {
+                        return callback('No CNAPI addresses found');
+                    }
+
+                    cnapiaddr = addrs[0];
+                    return callback();
+                });
+            });
+        },
+        function getSysinfo(callback) {
+            execFile('/usr/bin/sysinfo', ['-f'], function (err, stdo, stde) {
+                if (err) {
+                    return callback(Error(stde.toString()));
+                }
+                var obj = JSON.parse(stdo.toString());
+                agents = obj['SDC Agents'];
+                uuid = obj.UUID;
+                return callback();
+            });
+        },
+        function getAgentsImages(callback) {
+            var agents_dir = '/opt/smartdc/agents/lib/node_modules';
+            return fs.readdir(agents_dir, function (err, files) {
+                if (err) {
+                    return callback(err);
+                }
+                return async.each(files, function getImageAndUUID(name, _cb) {
+                    var uuid_path = '/opt/smartdc/agents/etc/' + name;
+                    var uuidFileExists;
+                    var agentUuid;
+                    var image_uuid;
+                    async.series([
+                        function getImage(next) {
+                            var fpath = agents_dir + '/' + name + '/image_uuid';
+                            fs.readFile(fpath, {
+                                encoding: 'utf8'
+                            }, function (er2, img_uuid) {
+                                if (er2) {
+                                    return next(er2);
+                                }
+                                image_uuid = img_uuid.trim();
+                                return next();
+                            });
+                        },
+                        function agentUuidFileExists(next) {
+                            fs.exists(uuid_path, function (exists) {
+                                if (exists) {
+                                    uuidFileExists = true;
+                                }
+                                next();
+                            });
+                        },
+                        function getUUID(next) {
+                            if (!uuidFileExists) {
+                                return next();
+                            }
+                            return fs.readFile(uuid_path, {
+                                encoding: 'utf8'
+                            }, function (er2, agent_uuid) {
+                                if (er2) {
+                                    return next(er2);
+                                }
+                                agentUuid = agent_uuid.trim();
+                                return next();
+                            });
+                        }
+                    ], function seriesCb(er2, results) {
+                        if (er2) {
+                            return _cb(er2);
+                        }
+                        agents.forEach(function (a) {
+                            if (a.name === name) {
+                                a.image_uuid = image_uuid;
+                                if (agentUuid) {
+                                    a.uuid = agentUuid;
+                                }
+                            }
+                        });
+                        return _cb();
+                    });
+                }, function (er3) {
+                    if (er3) {
+                        return callback('Cannot get agents image versions');
+                    }
+                    return callback();
+                });
+            });
+        },
+        function postAgentsToCnapi(callback) {
+            var url = 'http://' + cnapiaddr;
+
+            var restifyOptions = {
+                url: url,
+                connectTimeout: 5000,
+                requestTimeout: 5000
+            };
+
+            log.info('cnapi ip was %s', cnapiaddr);
+            var client = restify.createJsonClient(restifyOptions);
+
+            client.post('/servers/' + uuid, {
+                agents: agents
+            }, function (err) {
+                if (err) {
+                    log.warn({
+                        error: err
+                    }, 'posting agents to cnapi');
+                } else {
+                    log.info('posted agents info to cnapi');
+                }
+                return callback();
+            });
+        }
+    ], function waterfallCb(err) {
+        return cb(err);
+    });
+}
+
+module.exports = {
+    refreshAgents: refreshAgents
+};
-- 
2.21.0

