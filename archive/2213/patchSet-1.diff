From f2ed929e0623f20e79845d7577e9ca197ebf76d8 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Thu, 13 Jul 2017 12:42:40 +0000
Subject: [PATCH] OS-6230 add unshare error handling to trigger systemd
 namespace workaround

---
 usr/src/uts/common/brand/lx/os/lx_syscall.c      |  4 ++--
 usr/src/uts/common/brand/lx/sys/lx_syscalls.h    |  1 +
 usr/src/uts/common/brand/lx/syscall/lx_miscsys.c | 16 ++++++++++++++++
 3 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/os/lx_syscall.c b/usr/src/uts/common/brand/lx/os/lx_syscall.c
index b8088e2b5d..750b81eed2 100644
--- a/usr/src/uts/common/brand/lx/os/lx_syscall.c
+++ b/usr/src/uts/common/brand/lx/os/lx_syscall.c
@@ -833,7 +833,7 @@ lx_sysent_t lx_sysent32[] = {
 	{"faccessat",	lx_faccessat,		0,		4}, /* 307 */
 	{"pselect6",	lx_pselect,		LX_SYS_EBPARG6,	6}, /* 308 */
 	{"ppoll",	lx_ppoll,		0,		5}, /* 309 */
-	{"unshare",	NULL,			NOSYS_NULL,	0}, /* 310 */
+	{"unshare",	lx_unshare,		0,		1}, /* 310 */
 	{"set_robust_list", lx_set_robust_list,	0,		2}, /* 311 */
 	{"get_robust_list", lx_get_robust_list,	0,		3}, /* 312 */
 	{"splice",	NULL,			NOSYS_NULL,	0}, /* 313 */
@@ -1162,7 +1162,7 @@ lx_sysent_t lx_sysent64[] = {
 	{"faccessat",	lx_faccessat,		0,		4}, /* 269 */
 	{"pselect6",	lx_pselect,		0,		6}, /* 270 */
 	{"ppoll",	lx_ppoll,		0,		5}, /* 271 */
-	{"unshare",	NULL,			NOSYS_NULL,	0}, /* 272 */
+	{"unshare",	lx_unshare,		0,		1}, /* 272 */
 	{"set_robust_list", lx_set_robust_list,	0,		2}, /* 273 */
 	{"get_robust_list", lx_get_robust_list,	0,		3}, /* 274 */
 	{"splice",	NULL,			NOSYS_NULL,	0}, /* 275 */
diff --git a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
index e658a241e1..31ceb0da08 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
@@ -259,6 +259,7 @@ extern long lx_umount2();
 extern long lx_uname();
 extern long lx_unlink();
 extern long lx_unlinkat();
+extern long lx_unshare();
 extern long lx_vhangup();
 extern long lx_wait4();
 extern long lx_waitid();
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_miscsys.c b/usr/src/uts/common/brand/lx/syscall/lx_miscsys.c
index b7057d3958..6810325e43 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_miscsys.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_miscsys.c
@@ -419,3 +419,19 @@ lx_acct(char *p)
 {
 	return (sysacct(p));
 }
+
+/*
+ * Support for Linux namespaces is not yet implemented. Normally we would
+ * simply return ENOSYS for this. However, "systemd" uses mount namespaces to
+ * provide the PrivateTmp feature for some services. Use of this feature is
+ * becoming common and these services will fail to run without namespace
+ * support. "systemd" has a fallback to allow these types of services to run if
+ * it sees either EACCES or EPERM when it tries to setup the namespace. Until
+ * we have namespace support, we return EACCES to workaround this issue.
+ */
+/*ARGSUSED*/
+long
+lx_unshare(int flags)
+{
+	return (set_errno(EACCES));
+}
-- 
2.21.0

