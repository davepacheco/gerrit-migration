commit 131eada3251fb7e558e9e84cd89a9b6c63e5f4c5 (refs/changes/25/2925/3)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-11-08T07:22:29+00:00 (1 year, 11 months ago)
    
    ZAPI-810 VMAPI data migrations abort on invalid internal_metadata value
    Reviewed by: Trent Mick <trent.mick@joyent.com>
    Approved by: Trent Mick <trent.mick@joyent.com>

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 1bd4548..0cd1277 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -1441,7 +1441,9 @@ Moray.prototype._toMorayVm = function (vm) {
      */
     assert.optionalObject(vm.internal_metadata, 'vm.internal_metadata');
     copy.internal_metadata_search_array =
-        common.internalMetadataToSearchArray(vm.internal_metadata);
+        common.internalMetadataToSearchArray(vm.internal_metadata, {
+            log: this._log
+        });
 
     copy.data_version = VM_OBJECTS_DATA_VERSION;
 
diff --git a/lib/common/vm-common.js b/lib/common/vm-common.js
index 06df24a..fbd2048 100644
--- a/lib/common/vm-common.js
+++ b/lib/common/vm-common.js
@@ -485,14 +485,28 @@ exports.getStatuses = function (vms) {
  *    internal metadata is best effort only.
  *
  * 3. We don't store strings that represent objects.
+ *
+ * @params {Object} internalMetadata (optional): the internal metadata object to
+ *   represent as an array of strings.
+ *
+ * @params {Object} options (required): an object with the following keys:
+ *
+ *   - log {Object} (required): a bunyan logger instance.
  */
 exports.internalMetadataToSearchArray =
-function internalMetadataToSearchArray(internalMetadata) {
-    assert.optionalObject(internalMetadata, 'internalMetadata');
-
+function internalMetadataToSearchArray(internalMetadata, options) {
+    var log;
     var MAX_METADATA_VALUE_LENGTH = 100;
     var metadataKey;
     var metadataValue;
+    var metadataValueType;
+
+    assert.optionalObject(internalMetadata, 'internalMetadata');
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+
+    log = options.log;
+
     /*
      * Using filters on array indexes with null values is not supported in Moray
      * (see https://smartos.org/bugview/MORAY-450), so we manually set the
@@ -508,16 +522,26 @@ function internalMetadataToSearchArray(internalMetadata) {
             }
 
             metadataValue = internalMetadata[metadataKey];
-            switch (typeof (metadataValue)) {
-                case 'string':
-                case 'number':
-                case 'boolean':
+            metadataValueType = typeof (metadataValue);
+
+            if (metadataValueType === 'string' ||
+                metadataValueType === 'number' ||
+                metadataValueType === 'boolean') {
                     metadataValue = metadataValue.toString();
-                    break;
-                default:
-                    assert.ok(false, 'internal_metadata values must be of ' +
-                        'type string, number or boolean');
-                    break;
+            } else {
+                /*
+                 * We've seen invalid internal_metadata in the wild (see
+                 * https://smartos.org/bugview/ZAPI-810), and we don't want to
+                 * abort in this case, since it would e.g prevent migrations
+                 * from completing, or it would make PutVM(s) requests sent from
+                 * e.g vm-agent bring the VMAPI service down. Instead, we output
+                 * a warning log entry and we don't write anything in the
+                 * internal_metadata_search_array field.
+                 */
+                log.warn({value: metadataValue, type: metadataValueType},
+                    'Invalid internal_metadata value, internal_metadata ' +
+                        'values must be of type string, number or boolean');
+                continue;
             }
 
             if (metadataValue.length <= MAX_METADATA_VALUE_LENGTH) {
diff --git a/lib/data-migrations/controller.js b/lib/data-migrations/controller.js
index 7ee19db..87ee1f0 100644
--- a/lib/data-migrations/controller.js
+++ b/lib/data-migrations/controller.js
@@ -269,7 +269,10 @@ function _runSingleMigration(modelName, migration, options, callback) {
                     return;
                 }
 
-                migratedRecords = records.map(migrateRecordFunc);
+                migratedRecords = records.map(function migrate(record) {
+                    return migrateRecordFunc(record, {log: log});
+                });
+
                 log.trace({migratedRecords: migratedRecords},
                     'Migrated records');
 
diff --git a/lib/data-migrations/migrations/vms/001-internal-metadata-search.js b/lib/data-migrations/migrations/vms/001-internal-metadata-search.js
index 7ee8ac9..a535a6d 100644
--- a/lib/data-migrations/migrations/vms/001-internal-metadata-search.js
+++ b/lib/data-migrations/migrations/vms/001-internal-metadata-search.js
@@ -20,13 +20,17 @@ var common = require('../../../common');
 
 var DATA_VERSION = 1;
 
-function migrateRecord(record) {
+function migrateRecord(record, options) {
+    var log;
     var parsedInternalMetadata;
     var recordValue;
 
     assert.object(record, 'record');
     assert.object(record.value, 'record.value');
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
 
+    log = options.log;
     recordValue = record.value;
 
     if (recordValue.data_version !== undefined) {
@@ -42,7 +46,9 @@ function migrateRecord(record) {
     }
 
     recordValue.internal_metadata_search_array =
-        common.internalMetadataToSearchArray(parsedInternalMetadata);
+        common.internalMetadataToSearchArray(parsedInternalMetadata, {
+            log: log
+        });
 
     recordValue.data_version = DATA_VERSION;
 
