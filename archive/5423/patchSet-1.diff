commit fae9f41ebfa1560ad0a1ff48f6bb87058685ebff (refs/changes/23/5423/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-01-24T14:02:52-08:00 (9 months ago)
    
    joyent/node-zkstream#38 API should not leak pkt object in error cases

diff --git a/lib/client.js b/lib/client.js
index 60d428f..bbc9d2b 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -317,9 +317,13 @@ ZKClient.prototype.currentConnection = function () {
 
 ZKClient.prototype.ping = function (cb) {
 	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	return (conn.ping(cb));
+	if (conn === undefined || !conn.isInState('connected')) {
+		setImmediate(cb, new mod_errors.ZKNotConnectedError());
+		return;
+	}
+	conn.ping(function onPingReply(err, latency) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.list = function (path, cb) {
@@ -338,7 +342,9 @@ ZKClient.prototype.list = function (path, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.children, pkt.stat);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.get = function (path, cb) {
@@ -357,7 +363,9 @@ ZKClient.prototype.get = function (path, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.data, pkt.stat);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.create = function (path, data, options, cb) {
@@ -396,7 +404,9 @@ ZKClient.prototype.create = function (path, data, options, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.path);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.createWithEmptyParents = function (path, data, options, cb) {
@@ -493,7 +503,9 @@ ZKClient.prototype.set = function (path, data, version, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.path);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.delete = function (path, version, cb) {
@@ -514,7 +526,9 @@ ZKClient.prototype.delete = function (path, version, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.stat = function (path, cb) {
@@ -534,7 +548,9 @@ ZKClient.prototype.stat = function (path, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.stat);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.getACL = function (path, cb) {
@@ -554,7 +570,9 @@ ZKClient.prototype.getACL = function (path, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null, pkt.acl);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.sync = function (path, cb) {
@@ -573,7 +591,9 @@ ZKClient.prototype.sync = function (path, cb) {
 	req.once('reply', function onReply(pkt) {
 		cb(null);
 	});
-	req.once('error', cb);
+	req.once('error', function onError(err, pkt) {
+		cb(err);
+	});
 };
 
 ZKClient.prototype.watcher = function (path) {
