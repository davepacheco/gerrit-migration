From 375c58cb2dbaf5311f59ff9d0620f2b64d982d72 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 25 Apr 2017 15:55:54 -0700
Subject: [PATCH] IMGAPI-623 `updates-imgadm -d ...` overly verbose: with node
 0.10 it is serializing full "res" field Reviewed by: Josh Wilsdon
 <josh@wilsdon.ca>

---
 lib/cli.js | 62 +++++++++++++++++++++++++++++++++---------------------
 1 file changed, 38 insertions(+), 24 deletions(-)

diff --git a/lib/cli.js b/lib/cli.js
index 4c6f603..495e909 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -20,6 +20,8 @@ var imgapi = require('sdc-clients/lib/imgapi');
 var nopt = require('nopt');
 var path = require('path');
 var ProgressBar = require('progbar').ProgressBar;
+// Cheat to get to restify-clients, b/c we only want its Bunyan serializers.
+var restifyClients = require('sdc-clients/node_modules/restify-clients');
 var sprintf = require('extsprintf').sprintf;
 var strsplit = require('strsplit');
 var tabula = require('tabula');
@@ -264,7 +266,8 @@ CLI.prototype.main = function main(argv, callback) {
                 stream: process.stderr,
                 level: level
             }],
-            src: src
+            src: src,
+            serializers: restifyClients.bunyan.serializers
         });
         self.log.debug({opts: opts, argv: argv}, 'parsed argv');
         var imgapiOpts = {
@@ -576,7 +579,7 @@ CLI.prototype.do_ping = function do_ping(subcmd, opts, args, callback) {
             'unexpected args: ' + args.join(' ')));
     }
     this.client.ping(function (err, pong, res) {
-        self.log.trace({err: err, res: res}, 'Ping');
+        self.log.trace({err: err, client_res: res}, 'Ping');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -594,7 +597,7 @@ CLI.prototype.do_state = function do_state(subcmd, opts, args, callback) {
             'unexpected args: ' + args.join(' ')));
     }
     this.client.adminGetState(function (err, state, res) {
-        self.log.trace({err: err, res: res}, 'AdminGetState');
+        self.log.trace({err: err, client_res: res}, 'AdminGetState');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -619,7 +622,7 @@ CLI.prototype.do_reload_auth_keys = function do_reload_auth_keys(
             'unexpected args: ' + args.join(' ')));
     }
     this.client.adminReloadAuthKeys(function (err, state, res) {
-        self.log.trace({err: err, res: res}, 'AdminReloadAuthKeys');
+        self.log.trace({err: err, client_res: res}, 'AdminReloadAuthKeys');
         if (err) {
             callback(self._errorFromClientError(err));
         } else {
@@ -667,7 +670,7 @@ CLI.prototype.do_list = function do_list(subcmd, opts, args, callback) {
         filters[arg.slice(0, idx)] = arg.slice(idx + 1);
     }
     this.client.listImages(filters, listOpts, function (err, images, res) {
-        self.log.trace({err: err, res: res}, 'ListImages');
+        self.log.trace({err: err, client_res: res}, 'ListImages');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -829,7 +832,7 @@ CLI.prototype.do_get = function do_get(subcmd, opts, args, callback) {
     }
 
     this.client.getImage(uuid, getOpts, function (err, image, res) {
-        self.log.trace({err: err, res: res}, 'GetImage');
+        self.log.trace({err: err, client_res: res}, 'GetImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -926,7 +929,8 @@ CLI.prototype.do_get_file = function do_get_file(subcmd, opts, args, callback) {
         }
 
         self.client.getImageFileStream(uuid, function (err, stream) {
-            self.log.trace({err: err, res: stream}, 'GetImageFileStream');
+            self.log.trace({err: err, client_res: stream},
+                'GetImageFileStream');
             var outStream;
             if (err) {
                 return callback(self._errorFromClientError(err));
@@ -1019,7 +1023,7 @@ CLI.prototype.do_get_icon = function do_get_icon(subcmd, opts, args, callback) {
     }
 
     self.client.getImageIconStream(uuid, function (err, stream) {
-        self.log.trace({err: err, res: stream}, 'GetImageIconStream');
+        self.log.trace({err: err, client_res: stream}, 'GetImageIconStream');
         if (opts.output) {
             outputPath = opts.output;
         } else if (opts.outputUuidExt) {
@@ -1091,7 +1095,7 @@ CLI.prototype.do_delete = function do_delete(subcmd, opts, args, callback) {
         delOpts.forceAllChannels = true;
     }
     this.client.deleteImage(uuid, delOpts, function (err, res) {
-        self.log.trace({err: err, res: res}, 'DeleteImage');
+        self.log.trace({err: err, client_res: res}, 'DeleteImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -1212,7 +1216,7 @@ CLI.prototype.do_create = function do_create(subcmd, opts, args, callback) {
             }
 
             self.client.createImage(manifest, function (cErr, image, res) {
-                self.log.trace({err: cErr, image: image, res: res},
+                self.log.trace({err: cErr, image: image, client_res: res},
                     'CreateImage');
                 if (cErr) {
                     return callback(self._errorFromClientError(cErr));
@@ -1413,7 +1417,7 @@ CLI.prototype.do_update = function do_update(subcmd, opts, args, callback) {
 
     // Make sure image exists first
     self.client.getImage(uuid, function (err, image, res) {
-        self.log.trace({err: err, res: res}, 'UpdateImage.GetImage');
+        self.log.trace({err: err, client_res: res}, 'UpdateImage.GetImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -1438,7 +1442,7 @@ CLI.prototype.do_update = function do_update(subcmd, opts, args, callback) {
             mergeImageAttributes(body, image);
 
             self.client.updateImage(uuid, body, function (err2, image2, res2) {
-                self.log.trace({err: err2, image: image2, res: res2},
+                self.log.trace({err: err2, image: image2, client_res: res2},
                     'UpdateImage');
                 if (err2) {
                     return callback(self._errorFromClientError(err2));
@@ -1501,7 +1505,8 @@ CLI.prototype.do_import = function do_import(subcmd, opts, args, callback) {
         self.client.adminImportRemoteImageAndWait(uuid, source, importOpts,
                                 function (err, image, res) {
             rollbackImage = image;
-            self.log.trace({err: err, image: image, res: res}, 'ImportImage');
+            self.log.trace({err: err, image: image, client_res: res},
+                'ImportImage');
             if (err) {
                 if (rollbackImage) {
                     return rollbackOnErr(err);
@@ -1594,7 +1599,7 @@ CLI.prototype.do_import = function do_import(subcmd, opts, args, callback) {
             }
             self.client.adminImportImage(manifest, importOpts2,
                                          function (err2, image, res) {
-                self.log.trace({err: err2, image: image, res: res},
+                self.log.trace({err: err2, image: image, client_res: res},
                     'AdminImportImage');
                 if (err2) {
                     return callback(self._errorFromClientError(err2));
@@ -1760,7 +1765,8 @@ CLI.prototype.do_add_file = function do_add_file(subcmd, opts, args, callback) {
             fopts.storage = opts.storage;
         }
         self.client.addImageFile(fopts, function (err, image, res) {
-            self.log.trace({err: err, image: image, res: res}, 'AddImageFile');
+            self.log.trace({err: err, image: image, client_res: res},
+                'AddImageFile');
             if (err) {
                 if (bar)
                     bar.end();
@@ -1890,7 +1896,8 @@ CLI.prototype.do_add_icon = function do_add_icon(subcmd, opts, args, callback) {
             fopts.sha1 = opts.sha1;
         }
         self.client.addImageIcon(fopts, function (err, image, res) {
-            self.log.trace({err: err, image: image, res: res}, 'AddImageIcon');
+            self.log.trace({err: err, image: image, client_res: res},
+                'AddImageIcon');
             if (err) {
                 if (bar)
                     bar.end();
@@ -1953,7 +1960,8 @@ function do_delete_icon(subcmd, opts, args, callback) {
     assert.uuid(uuid, 'uuid');
 
     self.client.deleteImageIcon(uuid, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'DeleteImageIcon');
+        self.log.trace({err: err, image: image, client_res: res},
+            'DeleteImageIcon');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -1986,7 +1994,8 @@ CLI.prototype.do_export = function do_export(subcmd, opts, args, callback) {
 
     var options = { manta_path: mpath };
     self.client.exportImage(uuid, options, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'ExportImage');
+        self.log.trace({err: err, image: image, client_res: res},
+            'ExportImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -2033,7 +2042,8 @@ CLI.prototype.do_activate = function do_activate(subcmd, opts, args, callback) {
     assert.uuid(uuid, 'uuid');
 
     self.client.activateImage(uuid, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'ActivateImage');
+        self.log.trace({err: err, image: image, client_res: res},
+            'ActivateImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -2064,7 +2074,8 @@ CLI.prototype.do_disable = function do_disable(subcmd, opts, args, callback) {
     assert.uuid(uuid, 'uuid');
 
     self.client.disableImage(uuid, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'DisableImage');
+        self.log.trace({err: err, image: image, client_res: res},
+            'DisableImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -2096,7 +2107,8 @@ CLI.prototype.do_enable = function do_enable(subcmd, opts, args, callback) {
     assert.uuid(uuid, 'uuid');
 
     self.client.enableImage(uuid, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'EnableImage');
+        self.log.trace({err: err, image: image, client_res: res},
+            'EnableImage');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -2134,7 +2146,8 @@ CLI.prototype.do_add_acl = function do_add_acl(subcmd, opts, args, callback) {
     var acl = args;
 
     self.client.addImageAcl(uuid, acl, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'AddImageAcl');
+        self.log.trace({err: err, image: image, client_res: res},
+            'AddImageAcl');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
@@ -2169,7 +2182,8 @@ function do_remove_acl(subcmd, opts, args, callback) {
     var acl = args;
 
     self.client.removeImageAcl(uuid, acl, function (err, image, res) {
-        self.log.trace({err: err, image: image, res: res}, 'RemoveImageAcl');
+        self.log.trace({err: err, image: image, client_res: res},
+            'RemoveImageAcl');
         if (err) {
             return callback(self._errorFromClientError(err));
         }
-- 
2.21.0

