commit 5e4280e72d33d1387c84864fd44c9d6bb6fee146 (refs/changes/97/1697/1)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2017-03-22T22:46:39+13:00 (2 years, 7 months ago)
    
    PUBAPI-1380: Cloudapi should support wildcards in ListPackages

diff --git a/lib/papi.js b/lib/papi.js
index 0fd82da..c7dae1d 100644
--- a/lib/papi.js
+++ b/lib/papi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -13,68 +13,9 @@
  */
 
 var assert = require('assert-plus');
-var clone = require('clone');
-var qs = require('querystring');
 var restifyClients = require('restify-clients');
 
 
-// ---- internal support
-
-/**
- * Escapes param data being sent to PAPI.
- *
- * PAPI accepts special characters used for LDIF filters in its params
- * when making queries. This is useful for ops, but undesirable for
- * most applications (and especially data that may carry taint from
- * outside). This function escapes data (both ldif and query forms) so
- * that they're safe to use as params passed to PAPI.
- *
- * @param data the data to escape
- * @param escape whether to escape the data for ldif
- */
-function escapeParam(data, escape) {
-    if (typeof (data) !== 'string')
-        return data;
-
-    // treat undefined as true as well
-    if (escape !== false) {
-        data = data.replace('(',  '{\\28}').
-                    replace(')',  '{\\29}').
-                    replace('\\', '{\\5c}').
-                    replace('*',  '{\\2a}').
-                    replace('/',  '{\\2f}');
-    }
-
-    return qs.escape(data);
-}
-
-
-/**
- * Append params to path.
- *
- * @param {String} path the path without params
- * @param {Object} options the args to apply to the end of the path
- */
-function createPath(path, options) {
-    assert.string(path, 'path');
-    assert.object(options, 'options');
-
-    var escape = options.escape;
-    delete options.escape;
-
-    var q = [];
-
-    Object.keys(options).forEach(function (k) {
-        q.push(k + '=' + escapeParam(options[k], escape));
-    });
-
-    if (q.length)
-        path += '?' + q.join('&');
-
-    return path;
-}
-
-
 // ---- client
 
 function PAPI(clientOpts) {
@@ -156,18 +97,38 @@ PAPI.prototype.add = function add(pkg, options, cb) {
 PAPI.prototype.get = function get(uuid, options, cb) {
     var self = this;
 
-    assert.string(uuid, 'uuid');
+    assert.uuid(uuid, 'uuid');
     assert.object(options, 'options');
+    assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalBool(options.escape, 'options.escape');
     assert.func(cb, 'cb');
 
-    var opts = {};
+    var escape = (options.escape == undefined ? true : options.escape);
+    var headers = options.headers;
+    delete options.escape;
+    delete options.headers;
 
-    if (options.headers) {
-        opts.headers = options.headers;
-        delete options.headers;
-    }
+    var query = {};
+
+    Object.keys(options).forEach(function (k) {
+        var val = options[k];
+
+        if (escape && typeof (val) === 'string') {
+            /* JSSTYLED */
+            query[k] = val.replace(/\*/g, '{\\2a}');
+        } else {
+            query[k] = val;
+        }
+    });
 
-    opts.path = createPath('/packages/' + uuid, options);
+    var opts = {
+        path: '/packages/' + uuid,
+        query: query
+    };
+
+    if (headers) {
+        opts.headers = headers;
+    }
 
     return self.client.get(opts, function (err, req, res, pkg) {
         if (err) {
@@ -191,16 +152,23 @@ PAPI.prototype.get = function get(uuid, options, cb) {
 PAPI.prototype.del = function del(uuid, options, cb) {
     var self = this;
 
-    assert.string(uuid, 'uuid');
+    assert.uuid(uuid, 'uuid');
     assert.object(options, 'options');
+    assert.optionalObject(options.headers, 'options.headers');
+    assert.optionalBool(options.force, 'options.force');
     assert.func(cb, 'cb');
 
-    var opts = {};
+    var opts = {
+        path: '/packages/' + uuid
+    };
+
+    if (options.force) {
+        opts.query = { force: true };
+    }
+
     if (options.headers) {
         opts.headers = options.headers;
-        delete options.headers;
     }
-    opts.path = createPath('/packages/' + uuid, options);
 
     return self.client.del(opts, cb);
 };
@@ -227,7 +195,7 @@ PAPI.prototype.update = function update(uuid, changes, options, cb) {
         options = {};
     }
 
-    assert.string(uuid, 'uuid');
+    assert.uuid(uuid, 'uuid');
     assert.object(changes, 'changes');
     assert.func(cb, 'cb');
 
@@ -260,10 +228,10 @@ PAPI.prototype.update = function update(uuid, changes, options, cb) {
  * of packages matching the given search filter (retrieved by PAPI as
  * x-resource-count HTTP header).
  *
- * When passing a filter object (not a string), the query arguments will be
- * escaped according to ldif filter rules. This can be overridden with an
- * option, but don't do so unless you're 100% confident the query args
- * aren't potentially tainted.
+ * When passing a filter object (not a string), the query arguments will
+ * escape PAPI ListPackage wildcards. This can be overridden with an
+ * option (escape = true), but don't do so unless you're want to give any
+ * callers the ability to wildcard search.
  *
  * @param {String or Object} provided LDAP filter.
  * @param {Object} pagination options when desired.
@@ -274,35 +242,41 @@ PAPI.prototype.list = function list(filter, options, cb) {
     var self = this;
 
     assert.object(options, 'options');
+    assert.optionalBool(options.escape, 'options.escape');
+    assert.optionalObject(options.headers, 'options.headers');
     assert.func(cb, 'cb');
 
-    var escape = options.escape;
-    delete options.escape;
+    var escape = (options.escape == undefined ? true : options.escape);
     var headers = options.headers;
+    delete options.escape;
     delete options.headers;
 
-    var q = [];
+    var query = {};
 
     if (typeof (filter) === 'string') {
-        q.push('filter=' + escapeParam(filter, false));
+        query.filter = filter;
     } else {
         Object.keys(filter).forEach(function (k) {
-            q.push(k + '=' + escapeParam(filter[k], escape));
+            var val = filter[k];
+
+            if (escape && typeof (val) === 'string') {
+                /* JSSTYLED */
+                query[k] = val.replace(/\*/g, '{\\2a}');
+            } else {
+                query[k] = val;
+            }
         });
     }
 
     Object.keys(options).forEach(function (k) {
-        q.push(k + '=' + options[k]);
+        query[k] = options[k];
     });
 
-    var p = '/packages';
+    var opts = {
+        path: '/packages',
+        query: query
+    };
 
-    // XXX should use opts.query instead
-    if (q.length) {
-        p = p + '?' + q.join('&');
-    }
-
-    var opts = {path: p};
     if (headers) {
         opts.headers = headers;
     }
diff --git a/test/papi.test.js b/test/papi.test.js
index 1874fd3..6ca10f8 100644
--- a/test/papi.test.js
+++ b/test/papi.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var bunyan = require('bunyan');
@@ -18,7 +18,7 @@ var PAPI = require('../lib/index').PAPI;
 
 // --- Globals
 
-var PAPI_IP = process.env.PAPI_IP || '10.99.99.30';
+var PAPI_IP = process.env.PAPI_IP || 'papi.coal.joyent.us';
 var PAPI_URL = 'http://' + PAPI_IP;
 var CUSTOMER = process.env.UFDS_ADMIN_UUID;
 
@@ -252,7 +252,7 @@ test('papi', function (tt) {
     });
 
 
-    tt.test(' list packages using wildcards withtou escaping', function (t) {
+    tt.test(' list packages using wildcards without escaping', function (t) {
         papi.list({ name: 'regular_*' }, { escape: false },
                   function (err, packages) {
             t.ifError(err);
@@ -280,4 +280,4 @@ test('papi', function (tt) {
         papi.close();
         t.end();
     });
-});
\ No newline at end of file
+});
