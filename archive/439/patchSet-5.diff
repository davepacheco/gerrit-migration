From bda83f42a0a11f3626c6136a780f501a9eaf9f61 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <jwilsdon@joyent.com>
Date: Mon, 12 Sep 2016 14:27:50 -0700
Subject: [PATCH] OS-5643 Rebooting KVM VMs sometimes causes vmadmd to leak
 zoneevent processes

---
 src/vm/node_modules/VM.js | 115 +++++++++++++++++++++-----------------
 1 file changed, 63 insertions(+), 52 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 5f4bd40c..4f7bacab 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -3515,13 +3515,16 @@ exports.waitForZoneState = function (payload, state, options, callback)
     }
 
     function done() {
+        if (watcher) {
+            watcher.cleanup();
+        }
         if (timeout) {
             clearTimeout(timeout);
             timeout = null;
         }
     }
 
-    function handler(err, obj) {
+    function waitForZoneStateHandler(err, obj) {
         if (err) {
             done();
             callback(err);
@@ -3540,14 +3543,12 @@ exports.waitForZoneState = function (payload, state, options, callback)
                     var handler_retry;
 
                     if (error) {
-                        watcher.cleanup();
                         done();
                         callback(error);
                         return;
                     }
 
                     if (res.length !== 1) {
-                        watcher.cleanup();
                         done();
                         callback(new Error('lookup could no find VM '
                             + obj.zonename));
@@ -3560,7 +3561,6 @@ exports.waitForZoneState = function (payload, state, options, callback)
                         // found the state we're looking for, success!
                         log.debug('saw zone go to ' + obj.newstate + ' ('
                             + state + ') calling callback()');
-                        watcher.cleanup();
                         done();
                         callback();
                     } else if (timeout) {
@@ -3571,7 +3571,7 @@ exports.waitForZoneState = function (payload, state, options, callback)
                             handler_retry = setTimeout(function () {
                                 if (timeout) {
                                     // try again if wait timeout is still set
-                                    handler(null, obj);
+                                    waitForZoneStateHandler(null, obj);
                                 }
                                 handler_retry = null;
                             }, 1000);
@@ -3591,13 +3591,12 @@ exports.waitForZoneState = function (payload, state, options, callback)
         }
     }
 
-    watcher = watchZoneTransitions(handler, log);
+    watcher = watchZoneTransitions(waitForZoneStateHandler, log);
 
     timeout = setTimeout(function () {
         var err;
 
         done();
-        watcher.cleanup();
         err = new Error('timed out waiting for zone to transition to ' + state);
         err.code = 'ETIMEOUT';
         callback(err);
@@ -3610,13 +3609,11 @@ exports.waitForZoneState = function (payload, state, options, callback)
         function (err, obj) {
 
         if (err) {
-            watcher.cleanup();
             done();
             callback(err);
         } else if (obj.hasOwnProperty('zone_state')
             && obj.zone_state === state) {
 
-            watcher.cleanup();
             done();
             log.info('VM is in state ' + state);
             callback(); // at correct state!
@@ -3627,26 +3624,25 @@ exports.waitForZoneState = function (payload, state, options, callback)
 // handler() will be called with an object describing the transition for any
 // transitions seen (after any filtering).  The only filtering here is to remove
 // duplicate events.  Other filtering should be done by the caller.
+//
+// This function returns an object that includes a 'cleanup' property. The
+// value of this property is a function that must be called to free the listener
+// when the caller is done with it.
 function watchZoneTransitions(handler, log) {
     var buffer = '';
     var chunks;
-    var cleanup;
-    var watcher;
-    var watcher_pid;
 
     assert(log, 'no logger passed to watchZoneTransitions()');
 
     if (!zoneevent) {
-
         zoneevent = new EventEmitter();
 
         log.debug('/usr/vm/sbin/zoneevent');
-        watcher = spawn('/usr/vm/sbin/zoneevent', [],
+        zoneevent.watcher = spawn('/usr/vm/sbin/zoneevent', [],
             {'customFds': [-1, -1, -1]});
-        log.debug('zoneevent running with pid ' + watcher.pid);
-        watcher_pid = watcher.pid;
+        log.debug('zoneevent running with pid ' + zoneevent.watcher.pid);
 
-        watcher.stdout.on('data', function (data) {
+        zoneevent.watcher.stdout.on('data', function (data) {
             var chunk;
             var obj;
             var prev_msg;
@@ -3671,54 +3667,69 @@ function watchZoneTransitions(handler, log) {
         });
 
         // doesn't take input.
-        watcher.stdin.end();
+        zoneevent.watcher.stdin.end();
 
-        watcher.on('exit', function (code) {
-            log.warn('zoneevent watcher ' + watcher_pid + ' exited: ',
+        zoneevent.watcher.on('exit', function (code) {
+            log.warn('zoneevent watcher ' + zoneevent.watcher.pid + ' exited: ',
                 JSON.stringify(code));
+
+            // watcher is dead.
+            zoneevent.watcher = null;
+
             // tell all the listeners of this zoneevent (if there are any) that
             // we exited.  Then null it out so next time we'll make a new one.
-            zoneevent.emit('zoneevent', new Error('zoneevent watcher exited '
-                + 'prematurely with code: ' + code));
-            zoneevent = null;
+            if (zoneevent) {
+                zoneevent.emit('zoneevent', new Error('zoneevent watcher exited'
+                    + ' prematurely with code: ' + code));
+                zoneevent = null;
+            }
         });
-    }
-
-    cleanup = function () {
-        var listeners;
 
-        if (zoneevent) {
-            listeners = zoneevent.listeners('zoneevent');
+        zoneevent.cleanup = function _zoneeventCleanup(_handler) {
+            var res;
 
             log.debug('cleanup called w/ listeners: '
-                + util.inspect(listeners));
-            zoneevent.removeListener('zoneevent', handler);
+                + util.inspect(zoneevent.listeners('zoneevent')));
+            zoneevent.removeListener('zoneevent', _handler);
             if (zoneevent.listeners('zoneevent').length === 0) {
-                log.debug('zoneevent watcher ' + watcher_pid
+                assert.ok(zoneevent.watcher, 'should have zoneevent.watcher');
+
+                log.debug('zoneevent watcher ' + zoneevent.watcher.pid
                     + ' cleanup called');
+
+                // destroy std{out,err} so we don't send more 'data' events
+                zoneevent.watcher.stdout.destroy();
+                zoneevent.watcher.stderr.destroy();
+
+                // remove 'exit' listener so we don't fail on kill
+                zoneevent.watcher.removeAllListeners('exit');
+
+                // kill the watcher so zoneevent child doesn't leak
+                log.debug({watcher_pid: zoneevent.watcher.pid},
+                    'killing watcher');
+                res = zoneevent.watcher.kill();
+                assert.ok(res, 'expected zoneevent.watcher.kill() to succeed');
+                assert.ok(zoneevent.watcher.killed,
+                    'expected watcher to be killed');
+
                 zoneevent = null;
-                if (watcher) {
-                    watcher.stdout.destroy(); // so we don't send more 'data'
-                    watcher.stderr.destroy();
-                    watcher.removeAllListeners('exit'); // so don't fail on kill
-                    log.debug('killing watcher');
-                    watcher.kill();
-                    watcher = null;
-                }
-            }
-        } else if (watcher) {
-            watcher.stdout.destroy(); // so we don't send more 'data'
-            watcher.stderr.destroy();
-            watcher.removeAllListeners('exit'); // so don't fail on our kill
-            log.debug('killing watcher (no zoneevent)');
-            watcher.kill();
-            watcher = null;
-        }
-    };
+            } else {
+                log.debug({
+                    watcher_pid: zoneevent.watcher.pid,
+                    listeners: zoneevent.listeners('zoneevent').length
+                }, 'still have listeners on this zoneevent');
+            }
+        };
+    }
 
     zoneevent.on('zoneevent', handler);
 
-    return ({'cleanup': cleanup});
+    // return a closure that includes the handler that was passed in
+    return ({
+        cleanup: function _handlerCleanup() {
+            zoneevent.cleanup(handler);
+        }
+    });
 }
 
 function fixPayloadMemory(payload, vmobj, log)
@@ -14236,7 +14247,7 @@ function doReboot(vmobj, options, callback)
 
     async.series([function (cb) {
         if (!reboot_async) {
-            watcherobj = watchZoneTransitions(function (err, ze) {
+            watcherobj = watchZoneTransitions(function _rebootHandler(err, ze) {
                 if (!err && ze.zonename !== vmobj.zonename) {
                     // not something we need to handle
                     return;
-- 
2.21.0

