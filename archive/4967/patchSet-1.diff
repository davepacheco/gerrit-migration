commit 7e90d23e40bdedee395afd6eb20ab8c24ca9c0b3 (refs/changes/67/4967/1)
Author: Mohamed Khalfella <mohamed.khalfella@joyent.com>
Date:   2018-10-17T01:27:17+00:00 (12 months ago)
    
    MANTA-4003 Want msplit to support gzip compression

diff --git a/bin/msplit b/bin/msplit
index c8ad497..963421e 100755
--- a/bin/msplit
+++ b/bin/msplit
@@ -30,13 +30,14 @@ var mod_lib = require('../lib');
 var mod_manta = require('manta');
 var mod_uuid = require('node-uuid');
 var mod_vasync = require('vasync');
+var mod_zlib = require('zlib');
 
 /*
  * msplit: demux streams to send to multiple reducers
  */
 var msUsageMessage = [
 	'usage: msplit [-n number_of_reducers] [-d delimiter] [-f field_list]',
-	'              [-i] [-j] [-e javascript]',
+	'              [-i] [-j] [-e javascript] [-z]',
 	'',
 	'msplit is used to split a stream into many mpipes, one per the number',
 	'of reducers for your job.  The -n option specifies the number of',
@@ -95,7 +96,13 @@ var msUsageMessage = [
 	'Using the (-i) option:',
 	'The -i option turns off partition key hashing and instead treats ',
 	'the kay as the integer index of the reducer.  If you use this option ',
-	'the integer must be between 0 and number_of_reducers - 1.'
+	'the integer must be between 0 and number_of_reducers - 1.',
+	'',
+	'When -z is specified, msplit will compress the output streams in gzip',
+	'format. The next phase in the job needs to expect this and decompress',
+	'its input objects as needed. Note, concatenating gzip streams should ',
+	'not be an issue as long as the next phase treats its input as a ',
+	'stream of compressed data.'
 ].join('\n');
 
 var msHashAlgo = 'md5';
@@ -116,9 +123,10 @@ function main()
 	opts.nReducers = null;
 	opts.parseJson = false;
 	opts.reducerSelector = selectReducerByHash;
+	opts.gzCompress = false;
 	opts.allowedTypes = [ 'string' ];
 
-	parser = new mod_getopt.BasicParser('d:f:n:e:ijt', process.argv);
+	parser = new mod_getopt.BasicParser('d:f:n:e:ijtz', process.argv);
 
 	while ((option = parser.getopt()) !== undefined) {
 		switch (option.option) {
@@ -155,6 +163,9 @@ function main()
 				usage('invalid number of reducers');
 			}
 			break;
+		case 'z':
+			opts.gzCompress = true;
+			break;
 
 		default:
 			/* error message already emitted by getopt */
@@ -197,21 +208,7 @@ function main()
 
 	// Streams
 	var waitingForDrain = [];
-	var ended = false;
-
-	function tryEnd() {
-		if (ended) {
-			return;
-		}
-		var endNow = !process.stdin.readable;
-		for (var j = 0; j < msStreams.length; ++j) {
-			endNow = endNow && !msStreams[j].writable;
-		}
-		if (endNow) {
-			ended = true;
-			msUploadFiles(opts);
-		}
-	}
+	var nClosedStreams = 0;
 
 	lstream = new mod_lstream();
 
@@ -235,22 +232,34 @@ function main()
 		for (i = 0; i < opts.nReducers; ++i) {
 			msStreams[i].end();
 		}
-		tryEnd();
 	});
 
 	process.stdin.pause();
 	process.stdin.pipe(lstream);
 	lstream.resume();
 
+	var onStreamError = function (err) {
+		msFatal('File: ' + this.filename + ': ' + err.message);
+	};
+
 	// Set up file write streams
 	for (i = 0; i < opts.nReducers; ++i) {
 		var filename = msTmpFilePrefix + i;
+		var fileStream = mod_fs.createWriteStream(filename);
+		var outputStream = fileStream;
+
+		// Compress the output if '-z' is specified.
+		if (opts.gzCompress) {
+			outputStream = mod_zlib.createGzip();
+			outputStream.pipe(fileStream);
+		}
+
 		var stream = mod_lib.createStringWriteBuffer({
-			stream: mod_fs.createWriteStream(filename)
+			stream: outputStream
 		});
 		stream.filename = filename;
 
-		stream.once('open', function (index) {
+		fileStream.once('open', function (index) {
 			msStreams[index] = this;
 			if (Object.keys(msStreams).length === opts.nReducers) {
 				process.stdin.resume();
@@ -267,18 +276,18 @@ function main()
 			}
 		}.bind(stream));
 
-		stream.once('error', function (err) {
-			msFatal('File: ' + this.filename + ': ' +
-				err.message);
-		}.bind(stream));
+		// Capture errors from both
+		outputStream.once('error', onStreamError.bind(stream));
+		fileStream.once('error', onStreamError.bind(stream));
 
-		stream.once('close', function () {
+		fileStream.once('close', function () {
 			if (process.stdin.readable) {
 				msFatal('File: ' + this.filename + ': ' +
 					'write stream closed prematurely');
 				return;
 			}
-			tryEnd();
+			if (++nClosedStreams == opts.nReducers)
+				msUploadFiles(opts);
 		}.bind(stream));
 	}
 }
diff --git a/test/data/testBasicGzCompress_output_00 b/test/data/testBasicGzCompress_output_00
new file mode 100644
index 0000000..efa72b5
Binary files /dev/null and b/test/data/testBasicGzCompress_output_00 differ
diff --git a/test/data/testBasicGzCompress_output_01 b/test/data/testBasicGzCompress_output_01
new file mode 100644
index 0000000..6bc7639
Binary files /dev/null and b/test/data/testBasicGzCompress_output_01 differ
diff --git a/test/msplit.test.js b/test/msplit.test.js
index 64d9cdc..fd80572 100644
--- a/test/msplit.test.js
+++ b/test/msplit.test.js
@@ -4,6 +4,7 @@
 
 var mod_child_process = require('child_process');
 var mod_fs = require('fs');
+var mod_path = require('path');
 var mod_http = require('http');
 
 var mod_bunyan = require('bunyan');
@@ -79,12 +80,12 @@ function runTest(opts, callback)
 
 before(function (cb) {
 	SERVER = mod_http.createServer(function (req, res) {
-		var body = '';
+		var body = [];
 		req.on('data', function (data) {
-			body += data;
+			body.push(data);
 		});
 		req.on('end', function () {
-			req.body = body;
+			req.body = Buffer.concat(body);
 			SERVER.requests.push(req);
 			res.writeHead(204);
 			res.end();
@@ -139,8 +140,8 @@ test('testBasic', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '1\n3\n',
-			'1': '2\n4\n'
+			'0': new Buffer('1\n3\n'),
+			'1': new Buffer('2\n4\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -166,8 +167,8 @@ test('testBasicAltField', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '1,2,3\n1,1,1\n',
-			'1': '1,2,2\n1,3,4\n'
+			'0': new Buffer('1,2,3\n1,1,1\n'),
+			'1': new Buffer('1,2,2\n1,3,4\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -188,8 +189,8 @@ test('testBasicJson', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '{"x":1}\n{"x":3}\n',
-			'1': '{"x":2}\n{"x":4}\n'
+			'0': new Buffer('{"x":1}\n{"x":3}\n'),
+			'1': new Buffer('{"x":2}\n{"x":4}\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -211,8 +212,8 @@ test('testBasicExec', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '1\n2\n',
-			'1': '3\n4\n'
+			'0': new Buffer('1\n2\n'),
+			'1': new Buffer('3\n4\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -234,8 +235,8 @@ test('testBasicExecJson', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '{"x":1}\n{"x":2}\n',
-			'1': '{"x":3}\n{"x":4}\n'
+			'0': new Buffer('{"x":1}\n{"x":2}\n'),
+			'1': new Buffer('{"x":3}\n{"x":4}\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -257,8 +258,8 @@ test('testExecWithoutReturn', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '1\n2\n',
-			'1': '3\n4\n'
+			'0': new Buffer('1\n2\n'),
+			'1': new Buffer('3\n4\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -280,8 +281,8 @@ test('testExecWithTrailingSemicolon', function (t)
 		t.equal(2, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '1\n2\n',
-			'1': '3\n4\n'
+			'0': new Buffer('1\n2\n'),
+			'1': new Buffer('3\n4\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -303,9 +304,9 @@ test('testReducerTargetingWithDashI', function (t)
 		t.equal(3, SERVER.requests.length);
 		var reqs = transformRequests(t, SERVER.requests);
 		t.deepEqual({
-			'0': '3\n6\n9\n',
-			'1': '1\n4\n7\n10\n',
-			'2': '2\n5\n8\n'
+			'0': new Buffer('3\n6\n9\n'),
+			'1': new Buffer('1\n4\n7\n10\n'),
+			'2': new Buffer('2\n5\n8\n')
 		}, reqs);
 		t.ok(result.error === null);
 		t.equal('', result.stdout);
@@ -328,3 +329,32 @@ test('testDashIOutOfRange', function (t)
 		t.done();
 	});
 });
+
+test('testBasicGzCompress', function (t)
+{
+	var testDataDir = mod_path.dirname(__filename) + '/data';
+	var obj0Path = testDataDir + '/testBasicGzCompress_output_00';
+	var obj1Path = testDataDir + '/testBasicGzCompress_output_01';
+
+	var obj0 = mod_fs.readFileSync(obj0Path);
+	var obj1 = mod_fs.readFileSync(obj1Path);
+
+	var sin = '1\n2\n3\n4\n';
+	runTest({
+		stdin: sin,
+		opts: ['-n', 2, '-z'],
+		nReducers: 2
+	}, function (result) {
+		t.equal(0, result.code);
+		t.equal(2, SERVER.requests.length);
+		var reqs = transformRequests(t, SERVER.requests);
+		t.deepEqual({
+			'0': obj0,
+			'1': obj1
+		}, reqs);
+		t.ok(result.error === null);
+		t.equal('', result.stdout);
+		t.equal('', result.stderr);
+		t.done();
+	});
+});
