commit 4b413d4712055019af1a9c2e160bb7246f5c0b48 (refs/changes/42/142/8)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-09-06T17:00:59+00:00 (3 years, 1 month ago)
    
    NAPI-368 Parameter validation shouldn't trust the input to be an object
    Reviewed by: Matt Smillie <matt.smillie@joyent.com>
    Approved by: Matt Smillie <matt.smillie@joyent.com>

diff --git a/lib/endpoints/search.js b/lib/endpoints/search.js
index c248e01..5dde889 100644
--- a/lib/endpoints/search.js
+++ b/lib/endpoints/search.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -23,6 +23,22 @@ var mod_util = require('util');
 var restify = require('restify');
 var validate = require('../util/validate');
 
+
+// --- Schema validation objects
+
+var SEARCH_SCHEMA = {
+    strict: true,
+    required: {
+        ip: validate.IP
+    },
+    optional: {
+        belongs_to_type: validate.string,
+        belongs_to_uuid: validate.UUID,
+        fabric: validate.bool,
+        owner_uuid: validate.UUID
+    }
+};
+
 /**
  * Filter our arguments into a set which are used to list networks and others.
  */
@@ -143,19 +159,7 @@ SearchIPNetworkStream.prototype._transform = function (net, _enc, done) {
  */
 function searchIPs(req, res, next) {
 
-    validate.params({
-        params: req.params,
-        strict: true,
-        required: {
-            ip: validate.IP
-        },
-        optional: {
-            belongs_to_type: validate.string,
-            belongs_to_uuid: validate.UUID,
-            fabric: validate.bool,
-            owner_uuid: validate.UUID
-        }
-    }, function (valerr, params) {
+    validate.params(SEARCH_SCHEMA, null, req.params, function (valerr, params) {
         var ipNum, args;
 
         if (valerr) {
diff --git a/lib/models/aggregation.js b/lib/models/aggregation.js
index 88f579c..86bbdbf 100644
--- a/lib/models/aggregation.js
+++ b/lib/models/aggregation.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -49,6 +49,49 @@ var BUCKET = {
 var MAX_MACS = 16;
 
 
+// --- Schema validation objects
+
+var CREATE_SCHEMA = {
+    required: {
+        name: validate.interfaceName,
+        macs: validateMACs
+    },
+    optional: {
+        lacp_mode: validateLACPmode,
+        nic_tags_provided: mod_nicTag.validateExists.bind(null, false)
+    }
+};
+
+var GET_SCHEMA = {
+    required: {
+        id: validate.string
+    }
+};
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        belongs_to_uuid: validate.UUID,
+        macs: validate.MACarray,
+        nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
+        limit: validate.limit,
+        offset: validate.offset
+    }
+};
+
+var UPDATE_SCHEMA = {
+    optional: {
+        lacp_mode: validateLACPmode,
+        nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
+        macs: validateMACs
+    }
+};
+
+var DELETE_SCHEMA = {
+    required: {
+        id: validate.string
+    }
+};
 
 // --- Helpers
 
@@ -57,8 +100,8 @@ var MAX_MACS = 16;
 /**
  * Validate that the LACP mode is one of the strings in LACP_MODES above
  */
-function validateLACPmode(name, mode, callback) {
-    validate.string(name, mode, function (err) {
+function validateLACPmode(_, name, mode, callback) {
+    validate.string(null, name, mode, function (err) {
         if (err) {
             return callback(err);
         }
@@ -267,21 +310,7 @@ function createAggr(opts, callback) {
     var params = opts.params;
     log.debug(params, 'createAggr: entry');
 
-    validate.params({
-        params: params,
-
-        required: {
-            name: validate.interfaceName,
-            macs: validateMACs.bind(null, opts)
-        },
-
-        optional: {
-            lacp_mode: validateLACPmode,
-            nic_tags_provided:
-                 mod_nicTag.validateExists.bind(null, opts.app, opts.log, false)
-        }
-
-    }, function (err, validated) {
+    validate.params(CREATE_SCHEMA, opts, params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -312,12 +341,7 @@ function createAggr(opts, callback) {
 function getAggr(opts, callback) {
     opts.log.debug(opts.params, 'getAggr: entry');
 
-    validate.params({
-        params: opts.params,
-        required: {
-            id: validate.string
-        }
-    }, function (err, validated) {
+    validate.params(GET_SCHEMA, null, opts.params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -340,19 +364,7 @@ function getAggr(opts, callback) {
 function listAggrs(opts, callback) {
     opts.log.debug(opts.params, 'listAggrs: entry');
 
-    validate.params({
-        params: opts.params,
-        strict: true,
-        optional: {
-            belongs_to_uuid: validate.UUID,
-            macs: validate.MACarray,
-            nic_tags_provided:
-                 mod_nicTag.validateExists.bind(null, opts.app, opts.log,
-                 false),
-            limit: validate.limit,
-            offset: validate.offset
-        }
-    }, function (err, validated) {
+    validate.params(LIST_SCHEMA, opts, opts.params, function (err, validated) {
         var lim, off;
 
         if (err) {
@@ -394,19 +406,8 @@ function updateAggr(opts, callback) {
             return callback(getErr);
         }
 
-        var toValidate = {
-            params: opts.params,
-
-            optional: {
-                lacp_mode: validateLACPmode,
-                nic_tags_provided:
-                     mod_nicTag.validateExists.bind(null, opts.app, opts.log,
-                         false),
-                macs: validateMACs.bind(null, opts)
-            }
-        };
-
-        validate.params(toValidate, function (err, params) {
+        validate.params(UPDATE_SCHEMA, opts, opts.params,
+            function (err, params) {
             if (err) {
                 return callback(err);
             }
@@ -434,12 +435,8 @@ function updateAggr(opts, callback) {
 function deleteAggr(opts, callback) {
     opts.log.debug(opts.params, 'deleteAggr: entry');
 
-    validate.params({
-        params: opts.params,
-        required: {
-            id: validate.string
-        }
-    }, function (err, validated) {
+    validate.params(DELETE_SCHEMA, null, opts.params,
+        function (err, validated) {
         if (err) {
             return callback(err);
         }
diff --git a/lib/models/fabric.js b/lib/models/fabric.js
index 4fed356..033c324 100644
--- a/lib/models/fabric.js
+++ b/lib/models/fabric.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -35,6 +35,13 @@ var BUCKET = {
 };
 
 
+// --- Schema validation objects
+
+var GET_SCHEMA = {
+    required: {
+        owner_uuid: validate.UUID
+    }
+};
 
 // --- Helpers
 
@@ -110,12 +117,7 @@ Fabric.prototype.raw = function fabricRaw() {
 function getFabric(opts, callback) {
     opts.log.debug({ params: opts.params }, 'getFabric: entry');
 
-    validate.params({
-        params: opts.params,
-        required: {
-            owner_uuid: validate.UUID
-        }
-    }, function (err) {
+    validate.params(GET_SCHEMA, null, opts.params, function (err) {
         if (err) {
             return callback(err);
         }
diff --git a/lib/models/ip/index.js b/lib/models/ip/index.js
index c273986..fdc850a 100644
--- a/lib/models/ip/index.js
+++ b/lib/models/ip/index.js
@@ -52,6 +52,61 @@ var NIC_SHARED_PARAMS = [
 ];
 
 
+// --- Schema validation objects
+
+var LIST_SCHEMA = {
+    strict: true,
+    required: {
+        network_uuid: validate.UUID
+    },
+    optional: {
+        belongs_to_type: validate.string,
+        belongs_to_uuid: validate.UUID,
+        limit: validate.limit,
+        offset: validate.offset
+    }
+};
+
+var OWNING_FIELDS = [ 'belongs_to_uuid', 'belongs_to_type', 'owner_uuid' ];
+var CREATE_SCHEMA = {
+    required: {
+        ip: validate.IP,
+        network: validateNetworkObj,
+        // We've already validated this courtesy of whoever called us
+        // (they would have used network_uuid to validate the network
+        // object above), but we want it in the validated params to
+        // put in the IP object:
+        network_uuid: validate.UUID
+    },
+    optional: {
+        check_owner: validate.bool,
+        belongs_to_uuid: validate.UUID,
+        belongs_to_type: validate.string,
+        owner_uuid: validate.UUID,
+        reserved: validate.bool
+    },
+    after: [
+        function _requireOwningInfo(_opts, _params, validated, callback) {
+            var errs = [];
+            if (validated.hasOwnProperty('belongs_to_uuid') ||
+                validated.hasOwnProperty('belongs_to_type')) {
+                OWNING_FIELDS.forEach(function (field) {
+                    if (!validated.hasOwnProperty(field)) {
+                        errs.push(errors.missingParam(field));
+                    }
+                });
+            }
+
+            if (errs.length > 0) {
+                callback(errs);
+                return;
+            }
+
+            callback();
+        },
+        validateNetworkOwner
+    ]
+};
 
 // --- Internal helpers
 
@@ -59,7 +114,7 @@ var NIC_SHARED_PARAMS = [
 /**
  * Validates that a network object is present
  */
-function validateNetworkObj(name, net, callback) {
+function validateNetworkObj(_, name, net, callback) {
     if (!net || typeof (net) !== 'object') {
         return callback(errors.invalidParam(name,
             'could not find network'));
@@ -73,7 +128,7 @@ function validateNetworkObj(name, net, callback) {
  * If we are attempting to add or update owner_uuid, ensure that it
  * matches the network
  */
-function validateNetworkOwner(_, validated, callback) {
+function validateNetworkOwner(_opts, _, validated, callback) {
     if (!validated.network) {
         // We've already failed to validate the network - just return
         return callback();
@@ -120,20 +175,7 @@ function listNetworkIPs(app, log, oparams, callback) {
     vparams = jsprim.deepCopy(oparams);
     delete vparams.network;
 
-    validate.params({
-        params: vparams,
-        strict: true,
-        required: {
-            network_uuid: validate.UUID
-        },
-
-        optional: {
-            belongs_to_type: validate.string,
-            belongs_to_uuid: validate.UUID,
-            limit: validate.limit,
-            offset: validate.offset
-        }
-    }, function (valerr, params) {
+    validate.params(LIST_SCHEMA, null, vparams, function (valerr, params) {
         var lim, off;
 
         if (valerr) {
@@ -268,8 +310,6 @@ function updateIP(app, log, params, callback) {
     }
 
     var validateParams = {
-        params: params,
-
         optional: {
             belongs_to_type: validate.string,
             belongs_to_uuid: validate.UUID,
@@ -308,7 +348,8 @@ function updateIP(app, log, params, callback) {
         }
     }
 
-    validate.params(validateParams, function (validationErr, validatedParams) {
+    validate.params(validateParams, null, params,
+        function (validationErr, validatedParams) {
         if (validationErr) {
             return callback(validationErr);
         }
@@ -377,39 +418,8 @@ function updateIP(app, log, params, callback) {
 function createIP(app, log, params, callback) {
     log.debug(params, 'createIP: entry');
 
-    var validateParams = {
-        params: params,
-
-        required: {
-            ip: validate.IP,
-            network: validateNetworkObj,
-            // We've already validated this courtesy of whoever called us
-            // (they would have used network_uuid to validate the network
-            // object above), but we want it in the validated params to
-            // put in the IP object:
-            network_uuid: validate.UUID
-        },
-
-        optional: {
-            check_owner: validate.bool,
-            reserved: validate.bool
-        },
-
-        after: validateNetworkOwner
-    };
-
-    if (params.hasOwnProperty('belongs_to_uuid') ||
-        params.hasOwnProperty('belongs_to_type')) {
-        validateParams.required.belongs_to_uuid = validate.UUID;
-        validateParams.required.belongs_to_type = validate.string;
-        validateParams.required.owner_uuid = validate.UUID;
-    }
-
-    if (!validateParams.required.hasOwnProperty('owner_uuid')) {
-        validateParams.optional.owner_uuid = validate.UUID;
-    }
-
-    validate.params(validateParams, function (validationErr, validated) {
+    validate.params(CREATE_SCHEMA, null, params,
+        function (validationErr, validated) {
         if (validationErr) {
             return callback(validationErr);
         }
diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 930ba1d..01d2ec1 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -14,6 +14,7 @@
 
 'use strict';
 
+var assert = require('assert-plus');
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var mod_moray = require('../apis/moray');
@@ -44,6 +45,69 @@ var BUCKET = {
 var MAX_NETS = 64;
 
 
+// --- Schema validation objects
+
+var CREATE_SCHEMA = {
+    required: {
+        name: validate.string,
+        networks: validateNetworks
+    },
+    optional: {
+        owner_uuids: validate.UUIDarray,
+        uuid: validate.UUID
+    },
+    after: validateNetworkOwners
+};
+
+var GET_SCHEMA = {
+    required: {
+        uuid: validate.UUID
+    },
+    optional: {
+        provisionable_by: validate.UUID
+    }
+};
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        limit: validate.limit,
+        offset: validate.offset,
+        provisionable_by: validate.UUID
+    }
+};
+
+var UPDATE_SCHEMA = {
+    required: {
+        uuid: validate.UUID
+    },
+    optional: {
+        name: validate.string,
+        networks: validateNetworks,
+        owner_uuids: function (_, name, uuids, cb) {
+            if (!uuids) {
+                // Allow removing owner_uuids
+                return cb(null, false);
+            }
+
+            return validate.UUIDarray(null, name, uuids, cb);
+        }
+    },
+    after: function (opts, original, parsed, cb) {
+        if (!parsed.hasOwnProperty('owner_uuids') &&
+            opts.oldPool.params.hasOwnProperty('owner_uuids')) {
+            parsed.owner_uuids = opts.oldPool.params.owner_uuids;
+        }
+
+       return validateNetworkOwners(opts, original, parsed, cb);
+    }
+};
+
+var DELETE_SCHEMA = {
+    required: {
+        uuid: validate.UUID
+    }
+};
 
 // --- Helpers
 
@@ -68,7 +132,7 @@ function provisionableBy(params, uuid) {
  * Validate that the networks in a pool are not over the maximum limit, and
  * that they all exist.
  */
-function validateNetworks(app, log, name, list, callback) {
+function validateNetworks(opts, name, list, callback) {
     var nets = [];
     var notFound = [];
     var tag;
@@ -76,6 +140,9 @@ function validateNetworks(app, log, name, list, callback) {
     var uuids = util_common.arrayify(list);
     var validated = [];
 
+    assert.ok(opts.app, 'opts.app');
+    assert.ok(opts.log, 'opts.log');
+
     if (uuids.length === 0) {
         return callback(errors.invalidParam(name,
             constants.POOL_MIN_NETS_MSG));
@@ -89,12 +156,18 @@ function validateNetworks(app, log, name, list, callback) {
     vasync.forEachParallel({
         inputs: uuids,
         func: function _validateNetworkUUID(uuid, cb) {
-            // XXX: what to bubble up if this is an error talking to moray?
-            mod_net.get({ app: app, log: log, params: { uuid: uuid } },
-                    function (err, res) {
-                if (err || !res) {
-                    notFound.push(uuid);
-                    return cb();
+            mod_net.get({
+                app: opts.app,
+                log: opts.log,
+                params: { uuid: uuid }
+            }, function (err, res) {
+                if (err) {
+                    if (err.name === 'ResourceNotFoundError') {
+                        notFound.push(uuid);
+                        return cb();
+                    } else {
+                        return cb(err);
+                    }
                 }
 
                 if (tag === undefined) {
@@ -111,9 +184,13 @@ function validateNetworks(app, log, name, list, callback) {
                 return cb();
             });
         }
-    }, function () {
+    }, function (err) {
+        if (err) {
+            return callback(err);
+        }
+
         if (notFound.length !== 0) {
-            var err = errors.invalidParam(name,
+            err = errors.invalidParam(name,
                 util.format('unknown network%s',
                     notFound.length === 1 ? '' : 's'));
             err.invalid = notFound;
@@ -137,7 +214,7 @@ function validateNetworks(app, log, name, list, callback) {
  * Validate that if a pool has an owner_uuid, all networks in the pool either
  * match that owner_uuid or have no owner_uuid.
  */
-function validateNetworkOwners(_, parsed, callback) {
+function validateNetworkOwners(_opts, _, parsed, callback) {
     if (!parsed.owner_uuids || !parsed._networks ||
         parsed.owner_uuids.length === 0 ||
         parsed._networks.length === 0) {
@@ -257,24 +334,8 @@ NetworkPool.prototype.serialize = function poolSerialize() {
 function createNetworkPool(app, log, params, callback) {
     log.debug(params, 'createNetworkPool: entry');
 
-    validate.params({
-        params: params,
-
-        required: {
-            name: validate.string,
-            networks: function (name, list, cb) {
-                return validateNetworks(app, log, name, list, cb);
-            }
-        },
-
-        optional: {
-            owner_uuids: validate.UUIDarray,
-            uuid: validate.UUID
-        },
-
-        after: validateNetworkOwners
-
-    }, function (err, validatedParams) {
+    validate.params(CREATE_SCHEMA, { app: app, log: log }, params,
+        function (err, validatedParams) {
         if (err) {
             return callback(err);
         }
@@ -298,15 +359,7 @@ function createNetworkPool(app, log, params, callback) {
 function getNetworkPool(app, log, params, callback) {
     log.debug(params, 'getNetworkPool: entry');
 
-    validate.params({
-        params: params,
-        required: {
-            uuid: validate.UUID
-        },
-        optional: {
-            provisionable_by: validate.UUID
-        }
-    }, function (err, validated) {
+    validate.params(GET_SCHEMA, null, params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -356,15 +409,7 @@ function listNetworkPools(app, log, oparams, callback) {
     log.debug({ params: oparams }, 'listNetworkPools: entry');
     var filter = '(uuid=*)';
 
-    validate.params({
-        params: oparams,
-        strict: true,
-        optional: {
-            limit: validate.limit,
-            offset: validate.offset,
-            provisionable_by: validate.UUID
-        }
-    }, function (valErr, params) {
+    validate.params(LIST_SCHEMA, null, oparams, function (valErr, params) {
         if (valErr) {
             return callback(valErr);
         }
@@ -451,36 +496,6 @@ function updateNetworkPool(app, log, params, callback) {
             return callback(getErr);
         }
 
-        var toValidate = {
-            params: params,
-
-            required: {
-                uuid: validate.UUID
-            },
-
-            optional: {
-                name: validate.string,
-                networks: validateNetworks.bind(null, app, log),
-                owner_uuids: function (name, uuids, cb) {
-                    if (!uuids) {
-                        // Allow removing owner_uuids
-                        return cb(null, false);
-                    }
-
-                    return validate.UUIDarray(name, uuids, cb);
-                }
-            },
-
-            after: function (original, parsed, cb) {
-                if (!parsed.hasOwnProperty('owner_uuids') &&
-                    oldPool.params.hasOwnProperty('owner_uuids')) {
-                    parsed.owner_uuids = oldPool.params.owner_uuids;
-                }
-
-               return validateNetworkOwners(original, parsed, cb);
-            }
-        };
-
         if (!params.hasOwnProperty('networks') &&
             params.hasOwnProperty('owner_uuids') &&
             oldPool.params.hasOwnProperty('networks')) {
@@ -489,7 +504,14 @@ function updateNetworkPool(app, log, params, callback) {
             params.networks = oldPool.params.networks;
         }
 
-        validate.params(toValidate, function (err, validatedParams) {
+        var uopts = {
+            app: app,
+            log: log,
+            oldPool: oldPool
+        };
+
+        validate.params(UPDATE_SCHEMA, uopts, params,
+            function (err, validatedParams) {
             if (err) {
                 return callback(err);
             }
@@ -543,12 +565,7 @@ function updateNetworkPool(app, log, params, callback) {
 function deleteNetworkPool(app, log, params, callback) {
     log.debug(params, 'deleteNetworkPool: entry');
 
-    validate.params({
-        params: params,
-        required: {
-            uuid: validate.UUID
-        }
-    }, function (err) {
+    validate.params(DELETE_SCHEMA, null, params, function (err) {
         if (err) {
             return callback(err);
         }
diff --git a/lib/models/network.js b/lib/models/network.js
index 9213db0..4d86dfc 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -112,6 +112,122 @@ var IMMUTABLE_FAB_PROP =
     'Fabric network updates for this field are not supported';
 
 
+// --- Schema validation objects
+
+
+var CREATE_SCHEMA = {
+    required: {
+        name: validate.string,
+        nic_tag: function _nicTagExists(opts, name, tags, callback) {
+            mod_nicTag.validateExists(true, opts, name, tags, callback);
+        },
+        provision_end_ip: validate.IP,
+        provision_start_ip: validate.IP,
+        subnet: validate.subnet,
+        vlan_id: validate.VLAN
+    },
+    optional: {
+        description: validate.string,
+        // XXX: allow this?
+        fabric: validate.bool,
+        fields: validate.fieldsArray(VALID_FIELDS),
+        gateway: validateGateway,
+        internet_nat: validate.bool,
+        mtu: validate.networkMTU,
+        owner_uuids: validate.UUIDarray,
+        routes: validateRoutes,
+        resolvers: validate.ipArray,
+        uuid: validate.UUID,
+        vnet_id: validate.VxLAN
+    },
+    after: [
+        validateProvisionRange,
+        validateNicTagMTU
+    ]
+};
+
+var UPDATE_SCHEMA = {
+    optional: {
+        // Immutable fabrics properties
+        gateway_provisioned: validate.bool,
+        internet_nat: validate.bool,
+
+        // moray-only
+        name: validate.string,
+        description: validate.string,
+        owner_uuids: validate.UUIDarray,
+        mtu: validate.networkMTU,
+
+        // require changes to the napi_ips_<uuid> bucket as well:
+
+        // Get the IP - we'll need its raw values for updating
+        gateway: validateAndGetIP,
+        provision_end_ip: validate.IP,
+        provision_start_ip: validate.IP,
+
+        // These parameters require changes on CNs, so we need
+        // to kick off a workflow
+        resolvers: validate.ipArray,
+        routes: validateRoutes,
+        // TODO: subnet, vlan_id?
+
+        ip_use_strings: validate.bool
+    },
+    after: [
+        function checkImmutable(opts, __, parsed, cb) {
+            if (opts.network.fabric) {
+                if (parsed.hasOwnProperty('gateway')) {
+                    cb(new errors.invalidParam('gateway',
+                        IMMUTABLE_FAB_PROP));
+                    return;
+                }
+                if (parsed.hasOwnProperty('gateway_provisioned')) {
+                    cb(new errors.invalidParam('gateway_provisioned',
+                        IMMUTABLE_FAB_PROP +
+                        ': delete the gateway NIC instead'));
+                    return;
+                }
+                if (parsed.hasOwnProperty('internet_nat')) {
+                    cb(new errors.invalidParam('internet_nat',
+                        IMMUTABLE_FAB_PROP));
+                    return;
+                }
+            }
+
+            cb();
+        },
+        validateProvisionRangeUpdate,
+        validateNicTagMTU
+    ]
+};
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        uuid: validate.string,
+        fabric: validate.bool,
+        limit: validate.limit,
+        name: validate.stringOrArray,
+        nic_tag: validate.stringOrArray,
+        offset: validate.offset,
+        owner_uuid: validate.UUID,
+        provisionable_by: validate.UUID,
+        vlan_id: validate.VLAN
+    }
+};
+
+var GET_SCHEMA = {
+    required: {
+        uuid: validateGetUUID
+    },
+    optional: {
+        fields: validate.fieldsArray(VALID_FIELDS),
+        owner_uuid: validate.UUID,
+        provisionable_by: validate.UUID
+    }
+};
+
+
 // --- Internal
 
 
@@ -373,19 +489,19 @@ function routeNumbers(routes) {
 /**
  * Validate gateway - allow it to be empty or a valid IP
  */
-function validateGateway(name, val, cb) {
+function validateGateway(_, name, val, cb) {
     if (val === null || val === '') {
         return cb();
     }
 
-    return validate.IP(name, val, cb);
+    return validate.IP(null, name, val, cb);
 }
 
 
 /**
  * Validate the UUID for 'get': it's allowed to be a UUID or the string "admin"
  */
-function validateGetUUID(name, val, cb) {
+function validateGetUUID(_, name, val, cb) {
     if (typeof (val) !== 'string') {
         return cb(new errors.invalidParam(name, constants.msg.INVALID_UUID));
     }
@@ -394,7 +510,7 @@ function validateGetUUID(name, val, cb) {
         return cb(null, val);
     }
 
-    return validate.UUID(name, val, cb);
+    return validate.UUID(null, name, val, cb);
 }
 
 
@@ -402,19 +518,19 @@ function validateGetUUID(name, val, cb) {
  * Validate the IP with the above function, then fetch its
  * object from moray
  */
-function validateAndGetIP(app, log, network, name, val, cb) {
-    validate.IP(name, val, function (err, res) {
+function validateAndGetIP(opts, name, val, cb) {
+    validate.IP(null, name, val, function (err, res) {
         if (err) {
             return cb(err);
         }
 
         var getOpts = {
-            app: app,
-            log: log,
+            app: opts.app,
+            log: opts.log,
             params: {
                 ip: res,
-                network: network,
-                network_uuid: network.uuid
+                network: opts.network,
+                network_uuid: opts.network.uuid
             },
             returnObject: true
         };
@@ -722,7 +838,7 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
 /**
  * Validate a routes object
  */
-function validateRoutes(name, val, callback) {
+function validateRoutes(_, name, val, callback) {
     if (typeof (val) !== 'object' || util.isArray(val)) {
         return callback(errors.invalidParam(name, constants.msg.OBJ));
     }
@@ -783,40 +899,15 @@ function createValidNetwork(opts, callback) {
     var log = opts.log;
     var params = opts.params;
 
-    validate.params({
-        params: params,
-        required: {
-            name: validate.string,
-            nic_tag: mod_nicTag.validateExists.bind(null, app, log, true),
-            provision_end_ip: validate.IP,
-            provision_start_ip: validate.IP,
-            subnet: validate.subnet,
-            vlan_id: validate.VLAN
-        },
-        optional: {
-            description: validate.string,
-            // XXX: allow this?
-            fabric: validate.bool,
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS),
-            gateway: validateGateway,
-            internet_nat: validate.bool,
-            mtu: validate.networkMTU,
-            owner_uuids: validate.UUIDarray,
-            routes: validateRoutes,
-            resolvers: validate.ipArray,
-            uuid: validate.UUID,
-            vnet_id: validate.VxLAN
-        },
-        after: [
-            validateProvisionRange.bind(null, {
-                app: app,
-                fabric: opts.fabric,
-                log: log,
-                owner_uuid: opts.owner_uuid
-            }),
-            validateNicTagMTU.bind(null, { app: app, log: log })
-        ]
-    }, function (err, validatedParams) {
+    var copts = {
+        app: app,
+        fabric: opts.fabric,
+        log: log,
+        owner_uuid: opts.owner_uuid
+    };
+
+    validate.params(CREATE_SCHEMA, copts, params,
+        function (err, validatedParams) {
         if (err) {
             return callback(err);
         }
@@ -1431,66 +1522,15 @@ function updateNetwork(opts, callback) {
 
     log.debug(params, 'updateNetwork: entry');
 
-    validate.params({
-        params: params,
-        optional: {
-            // Immutable fabrics properties
-            gateway_provisioned: validate.bool,
-            internet_nat: validate.bool,
-
-            // moray-only
-            name: validate.string,
-            description: validate.string,
-            owner_uuids: validate.UUIDarray,
-            mtu: validate.networkMTU,
-
-            // require changes to the napi_ips_<uuid> bucket as well:
-
-            // Get the IP - we'll need its raw values for updating
-            gateway: validateAndGetIP.bind(null, app, log, params.network),
-            provision_end_ip: validate.IP,
-            provision_start_ip: validate.IP,
-
-            // These parameters require changes on CNs, so we need
-            // to kick off a workflow
-            resolvers: validate.ipArray,
-            routes: validateRoutes,
-            // TODO: subnet, vlan_id?
-
-            ip_use_strings: validate.bool
-        },
-        after: [
-            function checkImmutable(_, parsed, cb) {
-                if (params.network.fabric) {
-                    if (parsed.hasOwnProperty('gateway')) {
-                        cb(new errors.invalidParam('gateway',
-                            IMMUTABLE_FAB_PROP));
-                        return;
-                    }
-                    if (parsed.hasOwnProperty('gateway_provisioned')) {
-                        cb(new errors.invalidParam('gateway_provisioned',
-                            IMMUTABLE_FAB_PROP +
-                            ': delete the gateway NIC instead'));
-                        return;
-                    }
-                    if (parsed.hasOwnProperty('internet_nat')) {
-                        cb(new errors.invalidParam('internet_nat',
-                            IMMUTABLE_FAB_PROP));
-                        return;
-                    }
-                }
+    var uopts = {
+        app: app,
+        fabric: opts.fabric,
+        log: log,
+        network: params.network,
+        owner_uuid: opts.owner_uuid
+    };
 
-                cb();
-            },
-            validateProvisionRangeUpdate.bind(null, {
-                app: app,
-                fabric: opts.fabric,
-                log: log,
-                owner_uuid: opts.owner_uuid
-            }),
-            validateNicTagMTU.bind(null, { app: app, log: log })
-        ]
-    }, function (err, validated) {
+    validate.params(UPDATE_SCHEMA, uopts, params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -1602,21 +1642,7 @@ function updateNetwork(opts, callback) {
 
 
 function validateListNetworks(params, callback) {
-    validate.params({
-        strict: true,
-        params: params,
-        optional: {
-            uuid: validate.string,
-            fabric: validate.bool,
-            limit: validate.limit,
-            name: validate.stringOrArray,
-            nic_tag: validate.stringOrArray,
-            offset: validate.offset,
-            owner_uuid: validate.UUID,
-            provisionable_by: validate.UUID,
-            vlan_id: validate.VLAN
-        }
-    }, function (err, res) {
+    validate.params(LIST_SCHEMA, null, params, function (err, res) {
         return callback(err, res);
     });
 }
@@ -1779,23 +1805,13 @@ function getNetwork(opts, callback) {
     var app = opts.app;
     var log = opts.log;
     var params = opts.params;
+    assert.ok(app, 'app');
+    assert.ok(log, 'log');
+    assert.ok(params, 'params');
 
     log.debug(params, 'getNetwork: entry');
 
-    validate.params({
-        params: params,
-
-        required: {
-            uuid: validateGetUUID
-        },
-
-        optional: {
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS),
-            owner_uuid: validate.UUID,
-            provisionable_by: validate.UUID
-        }
-
-    }, function (valErr, validated) {
+    validate.params(GET_SCHEMA, null, params, function (valErr, validated) {
         if (valErr) {
             return callback(valErr);
         }
diff --git a/lib/models/nic-tag.js b/lib/models/nic-tag.js
index 32545cf..3dbce6a 100644
--- a/lib/models/nic-tag.js
+++ b/lib/models/nic-tag.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -49,6 +49,55 @@ var BUCKET = {
 };
 
 
+// --- Schema validation objects
+
+
+var CREATE_SCHEMA = {
+    required: {
+        name: validateName
+    },
+    optional: {
+        uuid: validate.UUID,
+        mtu: validate.nicTagMTU
+    },
+    after: validateNicTagCreation
+};
+
+var GET_SCHEMA = {
+    required: {
+        name: validate.string
+    }
+};
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        limit: validate.limit,
+        offset: validate.offset
+    }
+};
+
+var UPDATE_SCHEMA = {
+    optional: {
+        name: validate.nicTagName,
+        mtu: validate.nicTagMTU
+    },
+    after: [
+        nicTagInUse,
+        nameOrMTURequired,
+        adminUpdateProhibited,
+        externalNameChangeProhibited,
+        validNameChange,
+        networkMTU
+    ]
+};
+
+var DELETE_SCHEMA = {
+    required: {
+        name: validate.nicTagName
+    },
+    after: nicTagInUse
+};
 
 // --- Helpers
 
@@ -56,14 +105,13 @@ var BUCKET = {
 /**
  * Validates a nic tag name is acceptable and unused.
  */
-function validateName(app, log, name, val, callback) {
-    validate.nicTagName(name, val, function (err) {
-
+function validateName(opts, name, val, callback) {
+    validate.nicTagName(opts, name, val, function (err) {
         if (err) {
             return callback(err);
         }
 
-        getNicTag(app, log, { name: val }, function (err2, res) {
+        getNicTag(opts.app, opts.log, { name: val }, function (err2, res) {
             if (err2 && err2.name !== 'ResourceNotFoundError') {
                 return callback(err2);
             }
@@ -80,7 +128,7 @@ function validateName(app, log, name, val, callback) {
 /**
  * Validates that the admin nic is created with an MTU of 1500.
  */
-function validateNicTagCreation(_, parsed, cb) {
+function validateNicTagCreation(_opts, _, parsed, cb) {
     if (parsed.name !== 'admin') {
         return cb();
     }
@@ -320,19 +368,12 @@ NicTag.prototype.serialize = function nicTagSerialize() {
 function createNicTag(app, log, params, callback) {
     log.debug({ params: params }, 'createNicTag: entry');
 
-    validate.params({
-        params: params,
-        required: {
-            name: function (name, val, cb) {
-                validateName(app, log, name, val, cb);
-            }
-        },
-        optional: {
-            uuid: validate.UUID,
-            mtu: validate.nicTagMTU
-        },
-        after: validateNicTagCreation
-    }, function (err) {
+    var copts = {
+        app: app,
+        log: log
+    };
+
+    validate.params(CREATE_SCHEMA, copts, params, function (err) {
         if (err) {
             return callback(err);
         }
@@ -356,12 +397,7 @@ function createNicTag(app, log, params, callback) {
 function getNicTag(app, log, params, callback) {
     log.debug(params, 'getNicTag: entry');
 
-    validate.params({
-        params: params,
-        required: {
-            name: validate.string
-        }
-    }, function (err) {
+    validate.params(GET_SCHEMA, null, params, function (err) {
         if (err) {
             return callback(err);
         }
@@ -384,16 +420,7 @@ function getNicTag(app, log, params, callback) {
 function listNicTags(app, log, oparams, callback) {
     log.debug({ params: oparams }, 'listNicTags: entry');
 
-    validate.params({
-        params: oparams,
-        strict: true,
-        optional: {
-            limit: validate.limit,
-            offset: validate.offset
-        }
-
-    }, function (err, params) {
-
+    validate.params(LIST_SCHEMA, null, oparams, function (err, params) {
         if (err) {
             return callback(err);
         }
@@ -424,26 +451,16 @@ function updateNicTag(app, log, params, callback) {
     var tag;
     var validatedParams;
 
+    var opts = {
+        app: app,
+        log: log
+    };
+
     vasync.pipeline({
         funcs: [
         function _validateUpdate(_, cb) {
-            validate.params({
-                params: params,
-                optional: {
-                    name: validate.nicTagName,
-                    mtu: validate.nicTagMTU
-                },
-                after: [
-                    nicTagInUse.bind(null, { app: app, log: log }),
-                    nameOrMTURequired.bind(null, { app: app, log: log }),
-                    adminUpdateProhibited.bind(null, { app: app, log: log }),
-                    externalNameChangeProhibited.bind(null,
-                        { app: app, log: log }),
-                    validNameChange.bind(null, { app: app, log: log }),
-                    networkMTU.bind(null, { app: app, log: log })
-                ]
-            },
-            function (err, parsed) {
+            validate.params(UPDATE_SCHEMA, opts, params,
+                function (err, parsed) {
                 if (err) {
                     return cb(err);
                 }
@@ -506,13 +523,12 @@ function updateNicTag(app, log, params, callback) {
 function deleteNicTag(app, log, params, callback) {
     log.debug(params, 'deleteNicTag: entry');
 
-    validate.params({
-        params: params,
-        required: {
-            name: validate.nicTagName
-        },
-        after: nicTagInUse.bind(null, { app: app, log: log })
-    }, function (err) {
+    var dopts = {
+        app: app,
+        log: log
+    };
+
+    validate.params(DELETE_SCHEMA, dopts, params, function (err) {
         if (err) {
             callback(err);
             return;
@@ -526,7 +542,7 @@ function deleteNicTag(app, log, params, callback) {
 /**
  * Ensure the nic tags exist, given their names
  */
-function nicTagsExist(app, log, single, name, tags, callback) {
+function nicTagsExist(single, opts, name, tags, callback) {
     var errTags = [];
 
     if (typeof (tags) !== 'string' && !util.isArray(tags)) {
@@ -568,7 +584,7 @@ function nicTagsExist(app, log, single, name, tags, callback) {
     vasync.forEachParallel({
         inputs: tagArr,
         func: function _getNicTag(tag, cb) {
-            return getNicTag(app, log, { name: tag }, function (err, res) {
+            getNicTag(opts.app, opts.log, { name: tag }, function (err, res) {
                 if (err || !res) {
                     errTags.push(tag);
                 }
diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index 9f709ac..d07a9a7 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -30,6 +30,8 @@ var vasync = require('vasync');
 // --- Globals
 
 var BUCKET = require('./bucket').BUCKET;
+var BELONGS_TO_TYPES = [ 'other', 'server', 'zone' ];
+var VALID_NIC_STATES = [ 'provisioning', 'stopped', 'running' ];
 
 
 // --- Internal helpers
@@ -39,7 +41,7 @@ var BUCKET = require('./bucket').BUCKET;
 /**
  * Validates a MAC address
  */
-function validateMAC(name, mac, callback) {
+function validateMAC(_, name, mac, callback) {
     var macNum = util_mac.macAddressToNumber(mac);
     if (!macNum) {
         return callback(errors.invalidParam(name,
@@ -81,7 +83,7 @@ function validateNetworkUUID(name, uuid, callback) {
         return callback(null, uuid);
     }
 
-    return validate.UUID(name, uuid, callback);
+    return validate.UUID(null, name, uuid, callback);
 }
 
 
@@ -137,7 +139,9 @@ function validateSubnetContainsIP(opts, parsedParams, callback) {
 /**
  * Validates a network UUID and ensures that the network exists
  */
-function validateNetwork(app, log, name, uuid, callback) {
+function validateNetwork(opts, name, uuid, callback) {
+    var app = opts.app;
+    var log = opts.log;
     validateNetworkUUID(name, uuid, function (err) {
         if (err) {
             return callback(err);
@@ -345,6 +349,8 @@ function commitBatch(opts, callback) {
 
 
 module.exports = {
+    BELONGS_TO_TYPES: BELONGS_TO_TYPES,
+    VALID_NIC_STATES: VALID_NIC_STATES,
     BUCKET: BUCKET,
     commitBatch: commitBatch,
     listVnetCns: listVnetCns,
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index 4f3af8d..0230814 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -25,55 +25,49 @@ var vasync = require('vasync');
 // --- Internal
 
 
+var CREATE_SCHEMA = {
+    required: {
+        belongs_to_uuid: validate.UUID,
+        belongs_to_type: validate.enum(common.BELONGS_TO_TYPES),
+        owner_uuid: validate.UUID
+    },
+
+    optional: {
+        allow_dhcp_spoofing: validate.bool,
+        allow_ip_spoofing: validate.bool,
+        allow_mac_spoofing: validate.bool,
+        allow_restricted_traffic: validate.bool,
+        allow_unfiltered_promisc: validate.bool,
+        check_owner: validate.bool,
+        cn_uuid: validate.UUID,
+        ip: validate.IP,
+        mac: validate.MAC,
+        model: validate.string,
+        network_uuid: common.validateNetwork,
+        nic_tag: mod_nicTag.validateExists.bind(null, true),
+        nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
+        primary: validate.bool,
+        reserved: validate.bool,
+        state: validate.enum(common.VALID_NIC_STATES),
+        underlay: validate.bool,
+        vlan_id: validate.VLAN
+    },
+
+    after: common.validateNetworkParams
+};
+
 
 /**
  * Validate creation parameters
  */
 function validateParams(opts, callback) {
-    var params = opts.params;
-    delete params.network;
-
-    var toValidate = {
-        params: params,
-
-        required: {
-            belongs_to_uuid: validate.UUID,
-            // XXX: tighten up the type validation here
-            belongs_to_type: validate.string,
-            owner_uuid: validate.UUID
-        },
-
-        optional: {
-            allow_dhcp_spoofing: validate.bool,
-            allow_ip_spoofing: validate.bool,
-            allow_mac_spoofing: validate.bool,
-            allow_restricted_traffic: validate.bool,
-            allow_unfiltered_promisc: validate.bool,
-            check_owner: validate.bool,
-            cn_uuid: validate.UUID,
-            ip: validate.IP,
-            mac: validate.MAC,
-            model: validate.string,
-            network_uuid: common.validateNetwork.bind(null, opts.app,
-                opts.log),
-            nic_tag:
-                mod_nicTag.validateExists.bind(null, opts.app, opts.log,
-                    true),
-            nic_tags_provided:
-                mod_nicTag.validateExists.bind(null, opts.app, opts.log,
-                    false),
-            primary: validate.bool,
-            reserved: validate.bool,
-            state: validate.nicState,
-            underlay: validate.bool,
-            vlan_id: validate.VLAN
-        },
-
-        after: common.validateNetworkParams.bind(null,
-            { app: opts.app, log: opts.log, create: true })
+    var copts = {
+        app: opts.app,
+        log: opts.log,
+        create: true
     };
 
-    validate.params(toValidate, function (err, res) {
+    validate.params(CREATE_SCHEMA, copts, opts.params, function (err, res) {
         if (err) {
             return callback(err);
         }
diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index d19b3b3..5f51a8e 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -23,15 +23,14 @@ var vasync = require('vasync');
 
 // --- Internal
 
+var DELETE_SCHEMA = {
+    required: {
+        mac: common.validateMAC
+    }
+};
 
 function validateDeleteParams(opts, callback) {
-    validate.params({
-        params: opts.params,
-
-        required: {
-            mac: common.validateMAC
-        }
-    }, function (err, res) {
+    validate.params(DELETE_SCHEMA, null, opts.params, function (err, res) {
         opts.validatedParams = res;
         return callback(err);
     });
diff --git a/lib/models/nic/get.js b/lib/models/nic/get.js
index 58ae550..a5eb4c8 100644
--- a/lib/models/nic/get.js
+++ b/lib/models/nic/get.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -20,6 +20,12 @@ var mod_moray = require('../../apis/moray');
 var validate = require('../../util/validate');
 
 
+var GET_SCHEMA = {
+    required: {
+        mac: common.validateMAC
+    }
+};
+
 
 /**
  * Gets a nic
@@ -27,12 +33,8 @@ var validate = require('../../util/validate');
 function get(opts, callback) {
     opts.log.trace('nic.get: entry');
 
-    validate.params({
-        params: opts.params,
-        required: {
-            mac: common.validateMAC
-        }
-    }, function (err, validatedParams) {
+    validate.params(GET_SCHEMA, null, opts.params,
+        function (err, validatedParams) {
         if (err) {
             return callback(err);
         }
diff --git a/lib/models/nic/list.js b/lib/models/nic/list.js
index 4895a2b..8410186 100644
--- a/lib/models/nic/list.js
+++ b/lib/models/nic/list.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -24,6 +24,22 @@ var validate = require('../../util/validate');
 var vasync = require('vasync');
 
 
+// --- Update schema validation
+
+
+var LIST_SCHEMA = {
+    strict: true,
+    optional: {
+        limit: validate.limit,
+        offset: validate.offset,
+        owner_uuid: validate.UUIDarray,
+        belongs_to_uuid: validate.UUIDarray,
+        belongs_to_type: validate.stringOrArray,
+        nic_tag: validate.stringOrArray,
+        nic_tags_provided: validate.stringOrArray,
+        network_uuid: validate.UUIDarray
+    }
+};
 
 // --- Exports
 
@@ -39,21 +55,7 @@ function list(opts, callback) {
     log.debug({ params: opts.params }, 'nic: list: entry');
     var nics = [];
 
-    validate.params({
-        params: opts.params,
-        strict: true,
-        optional: {
-            limit: validate.limit,
-            offset: validate.offset,
-            owner_uuid: validate.UUIDarray,
-            belongs_to_uuid: validate.UUIDarray,
-            belongs_to_type: validate.stringOrArray,
-            nic_tag: validate.stringOrArray,
-            nic_tags_provided: validate.stringOrArray,
-            network_uuid: validate.UUIDarray
-        }
-
-    }, function (valerr, params) {
+    validate.params(LIST_SCHEMA, null, opts.params, function (valerr, params) {
         var lim, off;
 
         if (valerr) {
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index 0fbdce5..a127c12 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -58,6 +58,48 @@ var UPDATE_PARAMS = [
 ];
 
 
+var UPDATE_SCHEMA = {
+    required: {
+        mac: common.validateMAC
+    },
+
+    optional: {
+        allow_dhcp_spoofing: validate.bool,
+        allow_ip_spoofing: validate.bool,
+        allow_mac_spoofing: validate.bool,
+        allow_restricted_traffic: validate.bool,
+        allow_unfiltered_promisc: validate.bool,
+        belongs_to_type: validate.enum(common.BELONGS_TO_TYPES),
+        belongs_to_uuid: validate.UUID,
+        check_owner: validate.bool,
+        cn_uuid: validate.UUID,
+        ip: validate.IP,
+        owner_uuid: validate.UUID,
+        model: validate.string,
+        network_uuid: common.validateNetwork,
+        nic_tag: validateNicTag,
+        nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
+        primary: validate.bool,
+        reserved: validate.bool,
+        state: validate.enum(common.VALID_NIC_STATES),
+        // XXX: only allow this if belongs_to_type is 'server'
+        underlay: validate.bool,
+        vlan_id: validate.VLAN
+    },
+
+    after: function (opts, original, parsed, cb2) {
+        // Only add the old IP's network if we're not
+        // updating to a new network
+        if (!parsed.hasOwnProperty('network') && opts.existingNic &&
+            opts.existingNic.hasOwnProperty('network')) {
+            parsed.network = opts.existingNic.network;
+            parsed.network_uuid = opts.existingNic.network.uuid;
+        }
+
+        common.validateNetworkParams(opts, original, parsed, cb2);
+    }
+};
+
 
 // --- Internal helpers
 
@@ -150,7 +192,7 @@ function getExistingNic(opts, callback) {
  * sdc_overlay_tag/1234)
  */
 function validateNicTag(opts, name, tag, callback) {
-    validate.string(name, tag, function (strErr) {
+    validate.string(null, name, tag, function (strErr) {
         if (strErr) {
             return callback(strErr);
         }
@@ -158,7 +200,7 @@ function validateNicTag(opts, name, tag, callback) {
         var split = tag.split('/');
         var tagName = split[0];
 
-        mod_nicTag.validateExists(opts.app, opts.log, true, name, tagName,
+        mod_nicTag.validateExists(true, opts, name, tagName,
                 function (exErr) {
             if (exErr) {
                 return callback(exErr);
@@ -168,7 +210,7 @@ function validateNicTag(opts, name, tag, callback) {
                 return callback(null, tagName);
             }
 
-            validate.VxLAN(name, split[1], function (vErr, vid) {
+            validate.VxLAN(null, name, split[1], function (vErr, vid) {
                 if (vErr) {
                     return callback(vErr);
                 }
@@ -189,57 +231,14 @@ function validateNicTag(opts, name, tag, callback) {
 function validateUpdateParams(opts, callback) {
     opts.log.trace('validateUpdateParams: entry');
 
-    validate.params({
-        params: opts.params,
-
-        required: {
-            mac: common.validateMAC
-        },
-
-        optional: {
-            // XXX: allow passing an optional arg to validate.params(), so
-            // that we can pass opts to these fns as an arg. This would allow
-            // us to move this object up to top-level (replacing UPDATE_PARAMS),
-            // so that we don't have to duplicate these
-            allow_dhcp_spoofing: validate.bool,
-            allow_ip_spoofing: validate.bool,
-            allow_mac_spoofing: validate.bool,
-            allow_restricted_traffic: validate.bool,
-            allow_unfiltered_promisc: validate.bool,
-            belongs_to_type: validate.string,
-            belongs_to_uuid: validate.UUID,
-            check_owner: validate.bool,
-            cn_uuid: validate.UUID,
-            ip: validate.IP,
-            owner_uuid: validate.UUID,
-            model: validate.string,
-            network_uuid: common.validateNetwork.bind(null, opts.app,
-                opts.log),
-            nic_tag: validateNicTag.bind(null, opts),
-            nic_tags_provided:
-                mod_nicTag.validateExists.bind(null, opts.app, opts.log,
-                    false),
-            primary: validate.bool,
-            reserved: validate.bool,
-            state: validate.nicState,
-            // XXX: only allow this if belongs_to_type is 'server'
-            underlay: validate.bool,
-            vlan_id: validate.VLAN
-        },
-
-        after: function (original, parsed, cb2) {
-            // Only add the old IP's network if we're not
-            // updating to a new network
-            if (!parsed.hasOwnProperty('network') && opts.existingNic &&
-                opts.existingNic.hasOwnProperty('network')) {
-                parsed.network = opts.existingNic.network;
-                parsed.network_uuid = opts.existingNic.network.uuid;
-            }
+    var uopts = {
+        app: opts.app,
+        log: opts.log,
+        create: false,
+        existingNic: opts.existingNic
+    };
 
-            common.validateNetworkParams({ app: opts.app, log: opts.log },
-                original, parsed, cb2);
-        }
-    }, function (err, res) {
+    validate.params(UPDATE_SCHEMA, uopts, opts.params, function (err, res) {
         opts.validated = res;
 
         if (opts.log.debug()) {
diff --git a/lib/models/vlan.js b/lib/models/vlan.js
index 1c826bf..9c450ec 100644
--- a/lib/models/vlan.js
+++ b/lib/models/vlan.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -54,6 +54,50 @@ var VALID_FIELDS = [
 ];
 
 
+// --- Schema validation objects
+
+var CREATE_SCHEMA = {
+    required: {
+        owner_uuid: validate.UUID,
+        vlan_id: validate.VLAN
+    },
+    optional: {
+        name: validate.string,
+        description: validate.string,
+        fields: validate.fieldsArray(VALID_FIELDS)
+    }
+};
+
+
+var DELETE_SCHEMA = {
+    required: {
+        owner_uuid: validate.UUID,
+        vlan_id: validate.VLAN
+    }
+};
+
+var LIST_SCHEMA = {
+    required: {
+        owner_uuid: validate.UUID
+    },
+    optional: {
+        fields: validate.fieldsArray(VALID_FIELDS),
+        offset: validate.offset,
+        limit: validate.limit
+    }
+};
+
+var UPDATE_SCHEMA = {
+    required: {
+        owner_uuid: validate.UUID,
+        vlan_id: validate.VLAN
+    },
+    optional: {
+        description: validate.string,
+        fields: validate.fieldsArray(VALID_FIELDS),
+        name: validate.string
+    }
+};
 
 // --- Internal
 
@@ -174,21 +218,7 @@ function createFabricVLAN(opts, callback) {
     var params = opts.params;
     log.debug(params, 'createFabricVLAN: entry');
 
-    validate.params({
-        params: params,
-
-        required: {
-            owner_uuid: validate.UUID,
-            vlan_id: validate.VLAN
-        },
-
-        optional: {
-            name: validate.string,
-            description: validate.string,
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS)
-        }
-
-    }, function (err, validated) {
+    validate.params(CREATE_SCHEMA, null, params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -237,13 +267,8 @@ function deleteFabricVLAN(opts, callback) {
     var log = opts.log;
     log.debug(opts.params, 'deleteFabricVLAN: entry');
 
-    validate.params({
-        params: opts.params,
-        required: {
-            owner_uuid: validate.UUID,
-            vlan_id: validate.VLAN
-        }
-    }, function (err, validated) {
+    validate.params(DELETE_SCHEMA, null, opts.params,
+        function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -296,8 +321,6 @@ function getFabricVLAN(opts, callback) {
     log.debug(opts.params, 'getFabricVLAN: entry');
 
     var validators = {
-        params: opts.params,
-
         required: {
             owner_uuid: validate.UUID,
             vlan_id: validate.VLAN
@@ -314,11 +337,11 @@ function getFabricVLAN(opts, callback) {
     // and let the network model validate them instead.
     if (checkFields) {
         validators.optional = {
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS)
+            fields: validate.fieldsArray(VALID_FIELDS)
         };
     }
 
-    validate.params(validators, function (err, validated) {
+    validate.params(validators, null, opts.params, function (err, validated) {
         if (err) {
             return callback(err);
         }
@@ -357,19 +380,7 @@ function listFabricVLANs(opts, callback) {
     var log = opts.log;
     log.debug({ params: opts.params }, 'listFabricVLANs: entry');
 
-    validate.params({
-        params: opts.params,
-
-        required: {
-            owner_uuid: validate.UUID
-        },
-
-        optional: {
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS),
-            offset: validate.offset,
-            limit: validate.limit
-        }
-    }, function (vErr, validated) {
+    validate.params(LIST_SCHEMA, null, opts.params, function (vErr, validated) {
         var lim, off;
         if (vErr) {
             return callback(vErr);
@@ -426,20 +437,8 @@ function updateFabricVLAN(opts, callback) {
     var log = opts.log;
     log.debug(opts.params, 'updateFabricVLAN: entry');
 
-    validate.params({
-        params: opts.params,
-
-        required: {
-            owner_uuid: validate.UUID,
-            vlan_id: validate.VLAN
-        },
-
-        optional: {
-            description: validate.string,
-            fields: validate.fieldsArray.bind(null, VALID_FIELDS),
-            name: validate.string
-        }
-    }, function (vErr, validated) {
+    validate.params(UPDATE_SCHEMA, null, opts.params,
+        function (vErr, validated) {
         if (vErr) {
             return callback(vErr);
         }
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 946edb8..4e7bb63 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -38,6 +38,7 @@ var MESSAGES = {
     OFFSET: 'invalid value, offset must be an integer greater than or ' +
         'equal to 0',
     OVERLAY_REQIRED: 'overlay networking is not enabled',
+    PARAMETERS_ARE_OBJECTS: 'Parameters must be objects',
     POOL_OWNER: 'owner cannot provision on network pool',
 
     PROV_END_IP_OUTSIDE: 'provision_end_ip cannot be outside subnet',
diff --git a/lib/util/validate.js b/lib/util/validate.js
index 93ee32a..a6d61cf 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -38,7 +38,6 @@ var INTERFACE_NAME_RE = /[a-zA-Z0-9_]{0,31}/;
 var INTERFACE_NUM_RE = /[0-9]+$/;
 var STR_RE = /\s/g;
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var VALID_STATES = ['provisioning', 'stopped', 'running'];
 
 
 
@@ -91,7 +90,7 @@ function errResult(errs, validated, callback) {
 /**
  * Validates a boolean value
  */
-function validateBoolean(name, val, callback) {
+function validateBoolean(_, name, val, callback) {
     if (typeof (val) === 'boolean') {
         return callback(null, val);
     }
@@ -105,48 +104,69 @@ function validateBoolean(name, val, callback) {
 
 
 /**
- * Validates a "fields" array - an array of strings specifying which of an
- * object's fields to return in a response.  `fields` is the list of allowed
- * fields that can be in the array.
+ * Validates that a value is one of the values present in an array that
+ * enumerates all allowed values.
  */
-function validateFieldsArray(fields, name, arr, callback) {
-    if (!util.isArray(arr)) {
-        return callback(new errors.invalidParam(name,
-                constants.msg.ARRAY_OF_STR));
-    }
+function validateEnum(values) {
+    assert.array(values, 'values');
+    return function _validateEnum(_, name, value, callback) {
+        if (values.indexOf(value) === -1) {
+            callback(new errors.invalidParam(name,
+                'must be one of: ' + values.map(JSON.stringify).join(', ')));
+            return;
+        }
 
-    if (arr.length === 0) {
-        return callback(new errors.invalidParam(name,
-                constants.msg.ARRAY_EMPTY));
-    }
+        callback(null, value);
+    };
+}
 
-    if (arr.length >= fields.length) {
-        return callback(new errors.invalidParam(name,
-            fmt('can only specify a maximum of %d fields',
-            fields.length)));
-    }
 
-    for (var a in arr) {
-        if (typeof (arr[a]) !== 'string') {
+/**
+ * Validates a "fields" array - an array of strings specifying which of an
+ * object's fields to return in a response.  `fields` is the list of allowed
+ * fields that can be in the array.
+ */
+function validateFieldsArray(fields) {
+    assert.arrayOfString(fields, 'fields');
+    return function _validateFieldsArray(_, name, arr, callback) {
+        if (!util.isArray(arr)) {
             return callback(new errors.invalidParam(name,
                     constants.msg.ARRAY_OF_STR));
         }
 
-        if (fields.indexOf(arr[a]) === -1) {
+        if (arr.length === 0) {
             return callback(new errors.invalidParam(name,
-                'unknown field specified'));
+                    constants.msg.ARRAY_EMPTY));
         }
-    }
 
-    return callback(null, arr);
+        if (arr.length >= fields.length) {
+            return callback(new errors.invalidParam(name,
+                fmt('can only specify a maximum of %d fields',
+                fields.length)));
+        }
+
+        for (var a in arr) {
+            if (typeof (arr[a]) !== 'string') {
+                return callback(new errors.invalidParam(name,
+                        constants.msg.ARRAY_OF_STR));
+            }
+
+            if (fields.indexOf(arr[a]) === -1) {
+                return callback(new errors.invalidParam(name,
+                    'unknown field specified'));
+            }
+        }
+
+        return callback(null, arr);
+    };
 }
 
 
 /**
- * Validates that a name is a valid Illumos interface name
+ * Validates that a name is a valid illumos interface name
  */
-function validateInterfaceName(name, val, callback) {
-    validateNicTagName(name, val, function (err) {
+function validateInterfaceName(_, name, val, callback) {
+    validateNicTagName(null, name, val, function (err) {
         if (err) {
             return callback(err);
         }
@@ -163,8 +183,8 @@ function validateInterfaceName(name, val, callback) {
 /**
  * Validates a valid nic tag name
  */
-function validateNicTagName(name, val, callback) {
-    validateString(name, val, function (err) {
+function validateNicTagName(_, name, val, callback) {
+    validateString(null, name, val, function (err) {
         if (err) {
             return callback(err);
         }
@@ -188,7 +208,7 @@ function validateNicTagName(name, val, callback) {
 /**
  * Validates an array of nic tags
  */
-function validateStringArray(name, vals, callback) {
+function validateStringArray(_, name, vals, callback) {
     if (!util.isArray(vals)) {
         return callback(new errors.invalidParam(name,
                 constants.msg.ARRAY_OF_STR));
@@ -213,10 +233,10 @@ function validateStringArray(name, vals, callback) {
 /**
  * Validates something is either a string or an array of strings.
  */
-function validateStringOrArray(name, val, callback) {
-    validateString(name, val, function (err, vals) {
+function validateStringOrArray(_, name, val, callback) {
+    validateString(null, name, val, function (err, vals) {
         if (err) {
-            return validateStringArray(name, val, callback);
+            return validateStringArray(null, name, val, callback);
         } else {
             return callback(null, vals);
         }
@@ -227,7 +247,7 @@ function validateStringOrArray(name, val, callback) {
 /**
  * Validates an array of IP addresses
  */
-function validateIParray(name, arr, callback) {
+function validateIParray(_, name, arr, callback) {
     var errs = [];
     var ips = [];
 
@@ -271,7 +291,7 @@ function validateIParray(name, arr, callback) {
 /**
  * Validates an IP address
  */
-function validateIP(name, addr, callback) {
+function validateIP(_, name, addr, callback) {
     var ip = util_ip.toIPAddr(addr);
     if (!ip) {
         return callback(errors.invalidParam(name, constants.INVALID_IP_MSG));
@@ -284,7 +304,7 @@ function validateIP(name, addr, callback) {
 /**
  * Validates a MAC address
  */
-function validateMAC(name, addr, callback) {
+function validateMAC(_, name, addr, callback) {
     var macNum = util_mac.aton(addr);
 
     if (!macNum) {
@@ -299,7 +319,7 @@ function validateMAC(name, addr, callback) {
 /**
  * Validates an array of MAC addresses
  */
-function validateMACarray(name, val, callback) {
+function validateMACarray(_, name, val, callback) {
     var arr = util_common.arrayify(val);
     var errs = [];
     var macs = [];
@@ -328,7 +348,7 @@ function validateMACarray(name, val, callback) {
 /**
  * Validates a string: ensures it's not empty
  */
-function validateString(name, str, callback) {
+function validateString(_, name, str, callback) {
     if (typeof (str) !== 'string') {
         return callback(new errors.invalidParam(name, constants.msg.STR));
     }
@@ -350,7 +370,7 @@ function validateString(name, str, callback) {
 /**
  * Validates a subnet
  */
-function validateSubnet(name, subnetTxt, callback) {
+function validateSubnet(_, name, subnetTxt, callback) {
     var params = {};
 
     if (typeof (subnetTxt) !== 'string') {
@@ -405,7 +425,7 @@ function validateSubnet(name, subnetTxt, callback) {
 function validateMTU(min, errmsg) {
     var _min = min;
     var _errmsg = errmsg;
-    return function _validateMTU(name, val, callback) {
+    return function _validateMTU(_, name, val, callback) {
         if (typeof (val) !== 'number') {
             return callback(new errors.invalidParam(name, _errmsg));
         }
@@ -422,7 +442,7 @@ function validateMTU(min, errmsg) {
 /**
  * Validates a UUID
  */
-function validateUUID(name, uuid, callback) {
+function validateUUID(_, name, uuid, callback) {
     if (typeof (uuid) !== 'string' || !UUID_RE.test(uuid)) {
         return callback(new errors.invalidParam(name,
                 constants.msg.INVALID_UUID));
@@ -435,7 +455,7 @@ function validateUUID(name, uuid, callback) {
 /**
  * Validates an array of UUIDs
  */
-function validateUUIDarray(name, val, callback) {
+function validateUUIDarray(_, name, val, callback) {
     var arr = util_common.arrayify(val);
 
     // Dedup the list and find invalid UUIDs
@@ -462,7 +482,7 @@ function validateUUIDarray(name, val, callback) {
 /**
  * Validates a VLAN ID
  */
-function validateVLAN(name, vlan_id, callback) {
+function validateVLAN(_, name, vlan_id, callback) {
     var id = Number(vlan_id);
     if (isNaN(id) || id < 0 ||
         id === 1 || id > 4094) {
@@ -476,7 +496,7 @@ function validateVLAN(name, vlan_id, callback) {
 /**
  * Validates a VxLAN ID
  */
-function validateVxlanID(name, vlan_id, callback) {
+function validateVxlanID(_, name, vlan_id, callback) {
     var id = Number(vlan_id);
     if (isNaN(id) || id < 0 || id > constants.MAX_VNET_ID) {
         return callback(errors.invalidParam(name, constants.msg.VNET));
@@ -486,21 +506,6 @@ function validateVxlanID(name, vlan_id, callback) {
 }
 
 
-/**
- * Validates the nic state is one of a limited set of strings.
- */
-function validateNicState(name, state, callback) {
-    if (typeof (state) !== 'string') {
-        return callback(new errors.invalidParam(name, 'must be a string'));
-    }
-
-    if (VALID_STATES.indexOf(state) === -1) {
-        return callback(new errors.invalidParam(name, 'must be a valid state'));
-    }
-
-    return callback(null, state);
-}
-
 function isNotInteger(val, id) {
     assert.string(val);
     return (val === '' || val.trim() !== val || isNaN(id) ||
@@ -511,7 +516,7 @@ function isNotInteger(val, id) {
  * Checks for valid limits and offsets which are integers greater than or equal
  * to zero. val usually is a string as it comes in from an HTTP query parameter.
  */
-function validateOffset(name, val, callback) {
+function validateOffset(_, name, val, callback) {
     var id = Number(val);
 
     if (typeof (val) !== 'number') {
@@ -533,7 +538,7 @@ function validateOffset(name, val, callback) {
  * Checks for valid limits which are integers in the range (0, 1000]. val is
  * usually a string as it comes in from an HTTP query parameter.
  */
-function validateLimit(name, val, callback) {
+function validateLimit(_, name, val, callback) {
     var id = Number(val);
 
     if (typeof (val) !== 'number') {
@@ -578,30 +583,49 @@ function validateUnknowns(params, req, opt) {
 
 
 /**
- * Validate parameters
+ * Validate parameters on an object.
+ *
+ * @param opts {Object}: Options for validating the input object
+ * - `strict` {Boolean}: Fail if there are extra, unknown fields on the object
+ * - `required` {Object}: A map of validation functions for each required field
+ * - `optional` {Object}: A map of validation functions for each optional field
+ * @param arg {Any}: A value to pass as the first argument to each validation
+ *     function. Usually an object containing configuration information or a
+ *     database handle.
+ * @param params {Object}: Object to validate
+ * @param callback {Function}: Callback with (err, validated) where validated
+ *     is an object with only validated fields or fields added by the
+ *     validation functions.
  */
-function validateParams(opts, callback) {
+function validateParams(opts, arg, params, callback) {
     var errs = [];
     var field;
     var validatedParams = {};
 
     assert.object(opts, 'opts');
-    assert.object(opts.params, 'opts.params');
-    assert.optionalObject(opts.params.required, 'opts.params.required');
-    assert.optionalObject(opts.params.optional, 'opts.params.optional');
+    assert.optionalBool(opts.strict, 'opts.strict');
+    assert.optionalObject(opts.required, 'opts.required');
+    assert.optionalObject(opts.optional, 'opts.optional');
     assert.func(callback);
 
+    if (!params || typeof (params) !== 'object' || Array.isArray(params)) {
+        errs.push(errors.invalidParam('parameters',
+            constants.msg.PARAMETERS_ARE_OBJECTS));
+        errResult(errs, validatedParams, callback);
+        return;
+    }
+
     var toValidate = [];
 
     for (field in opts.required) {
         assert.func(opts.required[field],
             fmt('opts.required[%s]', field));
 
-        if (opts.params.hasOwnProperty(field)) {
+        if (params.hasOwnProperty(field)) {
             toValidate.push({
                 field: field,
                 fn: opts.required[field],
-                val: opts.params[field]
+                val: params[field]
             });
         } else {
             errs.push(errors.missingParam(field));
@@ -612,11 +636,11 @@ function validateParams(opts, callback) {
         assert.func(opts.optional[field],
             fmt('opts.required[%s]', field));
 
-        if (opts.params.hasOwnProperty(field)) {
+        if (params.hasOwnProperty(field)) {
             toValidate.push({
                 field: field,
                 fn: opts.optional[field],
-                val: opts.params[field]
+                val: params[field]
             });
         }
     }
@@ -627,7 +651,7 @@ function validateParams(opts, callback) {
             // TODO: allow specifying an array of validation functions, and bail
             // after the first failure
 
-            val.fn(val.field, val.val, function (e, validated, multi) {
+            val.fn(arg, val.field, val.val, function (e, validated, multi) {
                 if (e) {
                     errs.push(e);
                 }
@@ -658,7 +682,7 @@ function validateParams(opts, callback) {
         }
     }, function after() {
         if (opts.strict) {
-            var err = validateUnknowns(opts.params, opts.required,
+            var err = validateUnknowns(params, opts.required,
                 opts.optional);
             if (err !== null) {
                 errs.push(err);
@@ -669,7 +693,7 @@ function validateParams(opts, callback) {
             if (!Array.isArray(opts.after)) {
                 opts.after = [opts.after];
             }
-            return crossValidate(errs, opts.params, validatedParams,
+            return crossValidate(errs, arg, params, validatedParams,
                 opts.after, callback);
         }
         return errResult(errs, validatedParams, callback);
@@ -681,11 +705,11 @@ function validateParams(opts, callback) {
  * access to all the raw and validated parameters. This is typically used to
  * validate conditions between parameters, e.g., nicTag/network MTUs.
  */
-function crossValidate(errs, raw, validated, afterFuncs, callback) {
+function crossValidate(errs, arg, raw, validated, afterFuncs, callback) {
     vasync.forEachPipeline({
         inputs: afterFuncs,
         func: function _validate(func, cb) {
-            func(raw, validated, function (err) {
+            func(arg, raw, validated, function (err) {
                 if (err) {
                     if (Array.isArray(err)) {
                         errs = errs.concat(err);
@@ -703,6 +727,7 @@ function crossValidate(errs, raw, validated, afterFuncs, callback) {
 
 module.exports = {
     bool: validateBoolean,
+    enum: validateEnum,
     fieldsArray: validateFieldsArray,
     IP: validateIP,
     ipArray: validateIParray,
@@ -714,7 +739,6 @@ module.exports = {
         constants.MTU_NICTAG_INVALID_MSG),
     networkMTU: validateMTU(constants.MTU_NETWORK_MIN,
         constants.MTU_NETWORK_INVALID_MSG),
-    nicState: validateNicState,
     nicTagName: validateNicTagName,
     offset: validateOffset,
     params: validateParams,
diff --git a/test/unit/aggregations.test.js b/test/unit/aggregations.test.js
index 05094eb..13c40c1 100644
--- a/test/unit/aggregations.test.js
+++ b/test/unit/aggregations.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -25,6 +25,7 @@ var mod_nic = require('../lib/nic');
 var mod_nic_tag = require('../lib/nic-tag');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
+var util = require('util');
 var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
@@ -417,6 +418,38 @@ test('create', function (t) {
 });
 
 
+test('create - invalid params (non-objects)', function (t) {
+    vasync.forEachParallel({
+        inputs: h.NON_OBJECT_PARAMS,
+        func: function (data, cb) {
+            NAPI.post({ path: '/aggregations' }, data, function (err) {
+                t.ok(err, util.format('error returned: %s',
+                    JSON.stringify(data)));
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                t.equal(err.statusCode, 422, 'status code');
+                t.deepEqual(err.body, {
+                    code: 'InvalidParameters',
+                    message: 'Invalid parameters',
+                    errors: [
+                        mod_err.invalidParam('parameters',
+                            constants.msg.PARAMETERS_ARE_OBJECTS)
+                    ]
+                }, 'Error body');
+
+                cb();
+            });
+        }
+    }, function () {
+        return t.end();
+    });
+});
+
+
+
 
 // --- Get tests
 
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 38edc50..9870935 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -29,6 +29,12 @@ var util_ip = require('../../lib/util/ip');
 
 var NET_NUM = 2;
 var NET_IPS = {};
+var NON_OBJECT_PARAMS = [
+    new Number(5), // eslint-disable-line
+    new String('hello'), // eslint-disable-line
+    new Boolean(true), // eslint-disable-line
+    [ 5 ]
+];
 var SERVER;
 
 
@@ -231,6 +237,7 @@ module.exports = {
     missingParamErr: common.missingParamErr,
     missingParam: missingParam,
     nextProvisionableIP: nextProvisionableIP,
+    NON_OBJECT_PARAMS: NON_OBJECT_PARAMS,
     get NET_NUM() {
         return NET_NUM;
     },
diff --git a/test/unit/ips.test.js b/test/unit/ips.test.js
index 900a971..4107705 100644
--- a/test/unit/ips.test.js
+++ b/test/unit/ips.test.js
@@ -499,9 +499,7 @@ test('Update IP - both missing and invalid params (IP not in moray)',
         t.equal(err.statusCode, 422, 'status code');
         t.deepEqual(err.body, h.invalidParamErr({
             errors: [
-                h.missingParam('belongs_to_type', 'Missing parameter'),
-                mod_err.invalidParam('belongs_to_uuid', 'invalid UUID'),
-                h.missingParam('owner_uuid', 'Missing parameter')
+                mod_err.invalidParam('belongs_to_uuid', 'invalid UUID')
             ]
         }), 'Error body');
 
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index 8370575..724ad5c 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -29,6 +29,7 @@ var mod_uuid = require('node-uuid');
 var repeat = require('../../lib/util/common').repeat;
 var test = require('tape');
 var util = require('util');
+var vasync = require('vasync');
 
 
 
@@ -272,6 +273,37 @@ test('Create pool - mismatched nic tags', function (t) {
 });
 
 
+test('Create pool - invalid params (non-objects)', function (t) {
+    vasync.forEachParallel({
+        inputs: h.NON_OBJECT_PARAMS,
+        func: function (data, cb) {
+            NAPI.post({ path: '/network_pools' }, data, function (err) {
+                t.ok(err, util.format('error returned: %s',
+                    JSON.stringify(data)));
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                t.equal(err.statusCode, 422, 'status code');
+                t.deepEqual(err.body, {
+                    code: 'InvalidParameters',
+                    message: 'Invalid parameters',
+                    errors: [
+                        mod_err.invalidParam('parameters',
+                            constants.msg.PARAMETERS_ARE_OBJECTS)
+                    ]
+                }, 'Error body');
+
+                cb();
+            });
+        }
+    }, function () {
+        return t.end();
+    });
+});
+
+
 
 // --- Update tests
 
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index c462434..43243f1 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -236,6 +236,37 @@ test('Create network - all invalid parameters', function (t) {
 });
 
 
+test('Create network - invalid parameters (non-objects)', function (t) {
+    vasync.forEachParallel({
+        inputs: h.NON_OBJECT_PARAMS,
+        func: function (data, cb) {
+            NAPI.post({ path: '/networks' }, data, function (err) {
+                t.ok(err, util.format('error returned: %s',
+                    JSON.stringify(data)));
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                t.equal(err.statusCode, 422, 'status code');
+                t.deepEqual(err.body, {
+                    code: 'InvalidParameters',
+                    message: 'Invalid parameters',
+                    errors: [
+                        mod_err.invalidParam('parameters',
+                            constants.msg.PARAMETERS_ARE_OBJECTS)
+                    ]
+                }, 'Error body');
+
+                cb();
+            });
+        }
+    }, function () {
+        return t.end();
+    });
+});
+
+
 test('Create network - invalid parameters', function (t) {
     // NET_NUM will be the next network number used by h.validNetworkParams():
     var num = h.NET_NUM;
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index 457fa8d..d1f54ff 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 /*
@@ -47,6 +47,9 @@ var NET3;
 var PROV_MAC_NET;
 
 
+var BAD_STATE_ERRMSG = 'must be one of: "provisioning", "stopped", "running"';
+var BAD_TYPE_ERRMSG = 'must be one of: "other", "server", "zone"';
+
 
 // --- Setup
 
@@ -239,7 +242,7 @@ test('Create nic - all invalid params', function (t) {
                     'must be a boolean value'),
                 mod_err.invalidParam('allow_unfiltered_promisc',
                     'must be a boolean value'),
-                mod_err.invalidParam('belongs_to_type', 'must not be empty'),
+                mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG),
                 mod_err.invalidParam('belongs_to_uuid', 'invalid UUID'),
                 mod_err.invalidParam('cn_uuid', 'invalid UUID'),
                 mod_err.invalidParam('ip', 'invalid IP address'),
@@ -256,7 +259,7 @@ test('Create nic - all invalid params', function (t) {
                 mod_err.invalidParam('owner_uuid', 'invalid UUID'),
                 mod_err.invalidParam('primary', 'must be a boolean value'),
                 mod_err.invalidParam('reserved', 'must be a boolean value'),
-                mod_err.invalidParam('state', 'must be a valid state'),
+                mod_err.invalidParam('state', BAD_STATE_ERRMSG),
                 mod_err.invalidParam('vlan_id', constants.VLAN_MSG)
             ]
         }), 'Error body');
@@ -298,6 +301,37 @@ test('Create nic on network_uuid=admin', function (t) {
 });
 
 
+test('Create nic - invalid params (non-objects)', function (t) {
+    vasync.forEachParallel({
+        inputs: h.NON_OBJECT_PARAMS,
+        func: function (data, cb) {
+            NAPI.post({ path: '/nics' }, data, function (err) {
+                t.ok(err, util.format('error returned: %s',
+                    JSON.stringify(data)));
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                t.equal(err.statusCode, 422, 'status code');
+                t.deepEqual(err.body, {
+                    code: 'InvalidParameters',
+                    message: 'Invalid parameters',
+                    errors: [
+                        mod_err.invalidParam('parameters',
+                            constants.msg.PARAMETERS_ARE_OBJECTS)
+                    ]
+                }, 'Error body');
+
+                cb();
+            });
+        }
+    }, function () {
+        return t.end();
+    });
+});
+
+
 test('Create nic - invalid params', function (t) {
     var owner = mod_uuid.v4();
     var type = 'server';
@@ -341,12 +375,25 @@ test('Create nic - invalid params', function (t) {
                 mod_err.invalidParam('vlan_id',
                     'No networks found matching parameters') ] ],
 
+        [ 'belongs_to_type must be a valid value',
+            { ip: '10.0.2.3', belongs_to_type: 'router', belongs_to_uuid: uuid,
+                owner_uuid: owner, network_uuid: NET.uuid, state: 'running' },
+                [ mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG) ] ],
+
+        [ 'belongs_to_type must be a string',
+            { ip: '10.0.2.3', belongs_to_type: true, belongs_to_uuid: uuid,
+                owner_uuid: owner, network_uuid: NET.uuid, state: 'running' },
+                [ mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG) ] ],
+
+        [ 'state must be a valid value',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, network_uuid: NET.uuid, state: 'deleted' },
+                [ mod_err.invalidParam('state', BAD_STATE_ERRMSG) ] ],
+
         [ 'state must be a string',
             { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
                 owner_uuid: owner, network_uuid: NET.uuid, state: true },
-                [ mod_err.invalidParam('state', 'must be a string') ] ]
-
-        // XXX: belongs_to_type must be zone, server, other
+                [ mod_err.invalidParam('state', BAD_STATE_ERRMSG) ] ]
     ];
 
     vasync.forEachParallel({
@@ -1516,8 +1563,7 @@ test('Update nic - all invalid params', function (t) {
             t.equal(err2.statusCode, 422, 'status code');
             t.deepEqual(err2.body, h.invalidParamErr({
                 errors: [
-                    mod_err.invalidParam('belongs_to_type',
-                        'must not be empty'),
+                    mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG),
                     mod_err.invalidParam('belongs_to_uuid', 'invalid UUID'),
                     mod_err.invalidParam('ip', 'invalid IP address'),
                     mod_err.invalidParam('model', 'must not be empty'),
@@ -1532,7 +1578,7 @@ test('Update nic - all invalid params', function (t) {
                     mod_err.invalidParam('owner_uuid', 'invalid UUID'),
                     mod_err.invalidParam('primary', 'must be a boolean value'),
                     mod_err.invalidParam('reserved', 'must be a boolean value'),
-                    mod_err.invalidParam('state', 'must be a valid state'),
+                    mod_err.invalidParam('state', BAD_STATE_ERRMSG),
                     mod_err.invalidParam('vlan_id', constants.VLAN_MSG)
                 ]
             }), 'Error body');
@@ -1589,8 +1635,7 @@ test('Update nic - invalid params', function (t) {
         [ 'state must be a valid state',
             { ip: fmt('10.0.%d.2', NET.num), network_uuid: NET.uuid,
                 state: 'oogabooga' },
-            [ mod_err.invalidParam('state',
-                'must be a valid state') ] ]
+            [ mod_err.invalidParam('state', BAD_STATE_ERRMSG) ] ]
     ];
 
     NAPI.createNic(mac, goodParams, function (err, res) {
