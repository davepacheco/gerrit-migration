From ec5821483c9a907e722db4d18f4ef5b92a0bf428 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 20 Nov 2018 14:45:06 -0800
Subject: [PATCH] MANTA-4028 support for global "readers" group

---
 lib/auth.js | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/lib/auth.js b/lib/auth.js
index 0718bce..a20b376 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -752,6 +752,36 @@ function loadOwnerFromPath(req, p, next) {
     });
 }
 
+/* Helper for makeGlobalReaderRole(). Makes a 'CAN action *' aperture rule. */
+function makeStarRule(action) {
+    var exact = {};
+    exact[action] = true;
+    return ([
+        'CAN ' + action + ' *',
+        {
+            effect: true,
+            actions: { exact: exact, regex: [] },
+            conditions: [],
+            resources: 1
+        }
+    ]);
+}
+
+/*
+ * Generate a fake role that provides global read-only access. Used to
+ * implement the special 'readers' group in getActiveRoles().
+ */
+function makeGlobalReaderRole(acctuuid) {
+    return ({
+        type: 'role',
+        uuid: '76b9ad78-5351-45a3-89f3-b6b48482ed65',
+        name: '_global_readers',
+        account: acctuuid,
+        rules: [
+            'getobject', 'getdirectory', 'listjobs', 'getjob'
+        ].map(makeStarRule)
+    });
+}
 
 /*
  * Determine the active roles for the request.
@@ -823,6 +853,16 @@ function getActiveRoles(req, res, next) {
         }
     }
 
+    /*
+     * Handle global read-only access (membership in the 'readers' group) by
+     * generating a 'fake' role here with a well-known UUID.
+     */
+    var readerRole;
+    if (account.groups.indexOf('readers') !== -1) {
+        readerRole = makeGlobalReaderRole(req.owner.account.uuid);
+        req.caller.roles[readerRole.uuid] = readerRole;
+    }
+
     var activeRoles = [];
     var names;
 
@@ -861,6 +901,9 @@ function getActiveRoles(req, res, next) {
                 }
                 activeRoles.push(uuid);
             }
+            if (readerRole) {
+                activeRoles.push(readerRole.uuid);
+            }
             req.activeRoles = activeRoles;
             next();
         });
@@ -885,6 +928,10 @@ function getActiveRoles(req, res, next) {
                     req.owner.account.uuid);
             });
         }
+        if (readerRole) {
+            activeRoles = activeRoles.slice();
+            activeRoles.push(readerRole.uuid);
+        }
         req.activeRoles = activeRoles;
         setImmediate(next);
     }
-- 
2.21.0

