commit 392a06cae11fb692728a8b844a58fa401040abd7 (refs/changes/80/5080/4)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-11-30T23:08:05+00:00 (10 months ago)
    
    MANTA-4028 support for global "readers" group
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Jordan Hendricks <jordan.hendricks@joyent.com>

diff --git a/lib/auth.js b/lib/auth.js
index 37205e5..cca494b 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -752,6 +752,45 @@ function loadOwnerFromPath(req, p, next) {
     });
 }
 
+/* Helper for makeGlobalReaderRole(). Makes a 'CAN action *' aperture rule. */
+function makeStarRule(action) {
+    var exact = {};
+    exact[action] = true;
+    return ([
+        'CAN ' + action + ' *',
+        {
+            effect: true,
+            actions: { exact: exact, regex: [] },
+            conditions: [],
+            resources: 1
+        }
+    ]);
+}
+
+/*
+ * Generate a fake role that provides global read-only access. Used to
+ * implement the special 'readers' group in getActiveRoles().
+ */
+function makeGlobalReaderRole(acctuuid) {
+    return ({
+        type: 'role',
+        /*
+         * This uuid and name are arbitrary and fixed -- if they collide with a
+         * role added by an actual user, things will probably not work. Don't
+         * do that.
+         */
+        uuid: '76b9ad78-5351-45a3-89f3-b6b48482ed65',
+        name: '_global_readers',
+        account: acctuuid,
+        /*
+         * If we add any new actions that are "read-only", they need to be
+         * listed here.
+         */
+        rules: [
+            'getobject', 'getdirectory', 'listjobs', 'getjob'
+        ].map(makeStarRule)
+    });
+}
 
 /*
  * Determine the active roles for the request.
@@ -776,39 +815,64 @@ function getActiveRoles(req, res, next) {
         requestedRoles = req.headers['role'];
     }
 
+    var caller = req.caller;
+    var owner = req.owner;
+
+    var isRoleOper = false, isGlobalReader = false;
+    if (caller.account.groups) {
+        if (caller.account.groups.indexOf('role-operators') !== -1) {
+            isRoleOper = true;
+        }
+        if (caller.account.groups.indexOf('readers') !== -1) {
+            isGlobalReader = true;
+        }
+    }
+
     /*
-     * Handle the special _operator role if the user is a member of the
-     * "role-operators" group (this overrides the regular isOperator
-     * status, if present).
+     * Check if we need to do per-request req.caller, either for role-operator
+     * or global read-only.
      */
-    var account = req.caller.account;
-    if (account.groups && account.groups.indexOf('role-operators') !== -1) {
+    if (isRoleOper || isGlobalReader) {
         /*
          * The req.caller object is cached and potentially shared between
-         * multiple requests. We're going to alter the isOperator flag on
-         * req.caller.account on a per-request basis, so we need a per-request
-         * copy of both req.caller and req.caller.account.
+         * multiple requests. We're either going to alter the roles or the
+         * isOperator flag on req.caller.account on a per-request basis, so we
+         * need a per-request copy of req.caller, req.caller.account and
+         * req.caller.roles.
          *
          * We can keep sharing all the other child objects of req.caller other
-         * than req.caller.account (i.e. we don't have to do a full deep copy),
-         * because we're not changing those.
+         * than req.caller.account and req.caller.roles (i.e. we don't have to
+         * do a full deep copy), because we're not changing those.
          */
         var newCaller = {};
-        Object.keys(req.caller).forEach(function (k) {
-            newCaller[k] = req.caller[k];
+        Object.keys(caller).forEach(function (k) {
+            newCaller[k] = caller[k];
         });
         var newAccount = {};
-        Object.keys(account).forEach(function (k) {
-            newAccount[k] = account[k];
+        Object.keys(caller.account).forEach(function (k) {
+            newAccount[k] = caller.account[k];
+        });
+        var newRoles = {};
+        Object.keys(caller.roles).forEach(function (k) {
+            newRoles[k] = caller.roles[k];
         });
         newCaller.account = newAccount;
+        newCaller.roles = newRoles;
         req.caller = newCaller;
+        caller = newCaller;
+    }
 
+    /*
+     * Handle the special _operator role if the user is a member of the
+     * "role-operators" group (this overrides the regular isOperator
+     * status, if present).
+     */
+    if (isRoleOper) {
         /*
          * Since they're in role-operators, make them always non-operator
          * unless the Role header is provided.
          */
-        newAccount.isOperator = false;
+        caller.account.isOperator = false;
 
         /*
          * We treat a Role header value of "_operator" basically as a magic
@@ -817,12 +881,22 @@ function getActiveRoles(req, res, next) {
          * rights anyway).
          */
         if (requestedRoles === '_operator') {
-            newAccount.isOperator = true;
+            caller.account.isOperator = true;
             setImmediate(next);
             return;
         }
     }
 
+    /*
+     * Handle global read-only access (membership in the 'readers' group) by
+     * generating a 'fake' role here with a well-known UUID.
+     */
+    var readerRole;
+    if (isGlobalReader) {
+        readerRole = makeGlobalReaderRole(owner.account.uuid);
+        caller.roles[readerRole.uuid] = readerRole;
+    }
+
     var activeRoles = [];
     var names;
 
@@ -832,8 +906,8 @@ function getActiveRoles(req, res, next) {
          * account. Cross-account roles have to be taken up by name or made
          * default.
          */
-        if (requestedRoles  === '*' && req.caller.user) {
-            activeRoles = req.caller.user.roles || [];
+        if (requestedRoles  === '*' && caller.user) {
+            activeRoles = caller.user.roles || [];
             req.activeRoles = activeRoles;
             req.authContext.conditions.activeRoles = activeRoles;
             setImmediate(next);
@@ -844,7 +918,7 @@ function getActiveRoles(req, res, next) {
         /* JSSTYLED */
         names = requestedRoles.split(/\s*,\s*/);
         req.mahi.getUuid({
-            account: req.owner.account.login,
+            account: owner.account.login,
             type: 'role',
             names: names
         }, function (err, lookup) {
@@ -855,12 +929,15 @@ function getActiveRoles(req, res, next) {
             var i, uuid;
             for (i = 0; i < names.length; i++) {
                 uuid = lookup.uuids[names[i]];
-                if (!uuid || !req.caller.roles[uuid]) {
+                if (!uuid || !caller.roles[uuid]) {
                     next(new InvalidRoleError(names[i]));
                     return;
                 }
                 activeRoles.push(uuid);
             }
+            if (readerRole) {
+                activeRoles.push(readerRole.uuid);
+            }
             req.activeRoles = activeRoles;
             next();
         });
@@ -869,10 +946,10 @@ function getActiveRoles(req, res, next) {
          * Sub-users don't get any default cross-account roles, only the ones
          * within their account.
          */
-        if (req.caller.user) {
-            activeRoles = req.caller.user.defaultRoles || [];
+        if (caller.user) {
+            activeRoles = caller.user.defaultRoles || [];
         } else {
-            activeRoles = req.caller.account.defaultRoles || [];
+            activeRoles = caller.account.defaultRoles || [];
             /*
              * Account default roles might include roles that aren't actually
              * for this account. We filter out ones that don't match here to
@@ -881,10 +958,18 @@ function getActiveRoles(req, res, next) {
              * cross-account role support.
              */
             activeRoles = activeRoles.filter(function (role) {
-                return (req.caller.roles[role].account ===
-                    req.owner.account.uuid);
+                return (caller.roles[role].account ===
+                    owner.account.uuid);
             });
         }
+        if (readerRole) {
+            /*
+             * Make a copy of activeRoles before we push, so we don't modify
+             * the defaultRoles on caller.user.
+             */
+            activeRoles = activeRoles.slice();
+            activeRoles.push(readerRole.uuid);
+        }
         req.activeRoles = activeRoles;
         setImmediate(next);
     }
