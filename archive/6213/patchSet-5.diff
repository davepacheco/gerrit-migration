commit 492303bde87c4cc8b0c941b2bac117b2fae86fb9 (HEAD -> master)
Author: bowrocker <jon.anderson@joyent.com>
Date:   2019-07-24T15:39:03+00:00 (3 months ago)
    
    MANATEE-415 manatee-sitter spawns excessive zfs recv processes when manatee-backupserver isn't running on upstream peer
    Reviewed by: Kody A Kantor <kody@kkantor.com>

diff --git a/lib/zfsClient.js b/lib/zfsClient.js
index b1dfc2d..a7b5f1b 100644
--- a/lib/zfsClient.js
+++ b/lib/zfsClient.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 
@@ -773,6 +773,7 @@ ZfsClient.prototype._receive = function (dataset,
 
     var restoreIntervalId;
     var server;
+    var zfsRecv;
 
     log.info({
         dataset: dataset,
@@ -789,22 +790,22 @@ ZfsClient.prototype._receive = function (dataset,
              *  been changed yet. Otherwise the recv will fail trying to create
              *  the mountpoint
              */
-            _.zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
+            zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
                                               self._dataset]);
 
-            _.zfsRecv.stdout.on('data', function (data) {
+            zfsRecv.stdout.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stdout: ', dataStr);
             });
 
             var msg = '';
-            _.zfsRecv.stderr.on('data', function (data) {
+            zfsRecv.stderr.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stderr: ', dataStr);
                 msg += data;
             });
 
-            _.zfsRecv.on('exit', function (code) {
+            zfsRecv.on('exit', function (code) {
                 if (code !== 0) {
                     var err2 = new verror.VError('zfs recv: ' + msg + ' ' +
                                                  code);
@@ -822,7 +823,7 @@ ZfsClient.prototype._receive = function (dataset,
             server = net.createServer();
             server.on('connection', function (socket) {
                 log.info('ZFSClient._receive: got socket, piping to zfs recv');
-                socket.pipe(_.zfsRecv.stdin);
+                socket.pipe(zfsRecv.stdin);
                 cb();
             });
 
@@ -864,12 +865,13 @@ ZfsClient.prototype._receive = function (dataset,
         clearInterval(restoreIntervalId);
 
         if (err) {
-            log.info({
+            log.warn({
                 err: err,
                 dataset: dataset,
                 serverUrl: serverUrl,
                 pollInterval: pollInterval
-            }, 'unable to receive snapshot');
+            }, 'unable to receive snapshot, killing `zfs recv` proc');
+            zfsRecv.kill('SIGKILL');
             callback(err);
             return;
         }
