From ba0c20d6a1579386f541372b72b04d7533b77d8c Mon Sep 17 00:00:00 2001
From: bowrocker <jon.anderson@joyent.com>
Date: Wed, 1 May 2019 14:02:27 +0000
Subject: [PATCH] MANATEE-415 manatee-sitter spawns excessive zfs recv
 processes when manatee-backupserver isn't running on upstream peer

---
 lib/zfsClient.js | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/lib/zfsClient.js b/lib/zfsClient.js
index b1dfc2d..68793de 100644
--- a/lib/zfsClient.js
+++ b/lib/zfsClient.js
@@ -773,6 +773,7 @@ ZfsClient.prototype._receive = function (dataset,
 
     var restoreIntervalId;
     var server;
+    var zfsRecv;
 
     log.info({
         dataset: dataset,
@@ -789,22 +790,22 @@ ZfsClient.prototype._receive = function (dataset,
              *  been changed yet. Otherwise the recv will fail trying to create
              *  the mountpoint
              */
-            _.zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
+            zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
                                               self._dataset]);
 
-            _.zfsRecv.stdout.on('data', function (data) {
+            zfsRecv.stdout.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stdout: ', dataStr);
             });
 
             var msg = '';
-            _.zfsRecv.stderr.on('data', function (data) {
+            zfsRecv.stderr.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stderr: ', dataStr);
                 msg += data;
             });
 
-            _.zfsRecv.on('exit', function (code) {
+            zfsRecv.on('exit', function (code) {
                 if (code !== 0) {
                     var err2 = new verror.VError('zfs recv: ' + msg + ' ' +
                                                  code);
@@ -822,7 +823,7 @@ ZfsClient.prototype._receive = function (dataset,
             server = net.createServer();
             server.on('connection', function (socket) {
                 log.info('ZFSClient._receive: got socket, piping to zfs recv');
-                socket.pipe(_.zfsRecv.stdin);
+                socket.pipe(zfsRecv.stdin);
                 cb();
             });
 
@@ -839,11 +840,15 @@ ZfsClient.prototype._receive = function (dataset,
 
             server.on('error', function (err) {
                 log.warn({err: err}, 'ZfsClient._receive: got socket error');
+                log.info('ZfsClient._receive: killing `zfs recv` proc');
+                zfsRecv.kill('SIGTERM');
                 cb(new verror.VError(err));
             });
         },
         function _postRestoreRequest(_, cb) {
             self._postRestoreRequest(serverUrl, function (err, jobPath) {
+                log.info('ZfsClient._receive: killing `zfs recv` proc');
+                zfsRecv.kill('SIGTERM');
                 _.jobPath = jobPath;
                 cb(err);
             });
-- 
2.21.0

