commit 8b08f116e65fa2c8b119fef5e8458b85b319e8d2
Author: bowrocker <jon.anderson@joyent.com>
Date:   2019-06-11T17:56:40+00:00 (4 months ago)
    
    MANATEE-415 manatee-sitter spawns excessive zfs recv processes when manatee-backupserver isn't running on upstream peer

diff --git a/lib/backupServer.js b/lib/backupServer.js
index c6c92a6..31a4438 100644
--- a/lib/backupServer.js
+++ b/lib/backupServer.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /**
diff --git a/lib/zfsClient.js b/lib/zfsClient.js
index b1dfc2d..8ca947d 100644
--- a/lib/zfsClient.js
+++ b/lib/zfsClient.js
@@ -773,6 +773,7 @@ ZfsClient.prototype._receive = function (dataset,
 
     var restoreIntervalId;
     var server;
+    var zfsRecv;
 
     log.info({
         dataset: dataset,
@@ -789,22 +790,22 @@ ZfsClient.prototype._receive = function (dataset,
              *  been changed yet. Otherwise the recv will fail trying to create
              *  the mountpoint
              */
-            _.zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
+            zfsRecv = spawn(self._zfsPath, ['recv', '-v', '-u',
                                               self._dataset]);
 
-            _.zfsRecv.stdout.on('data', function (data) {
+            zfsRecv.stdout.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stdout: ', dataStr);
             });
 
             var msg = '';
-            _.zfsRecv.stderr.on('data', function (data) {
+            zfsRecv.stderr.on('data', function (data) {
                 var dataStr = data.toString();
                 log.info('zfs recv stderr: ', dataStr);
                 msg += data;
             });
 
-            _.zfsRecv.on('exit', function (code) {
+            zfsRecv.on('exit', function (code) {
                 if (code !== 0) {
                     var err2 = new verror.VError('zfs recv: ' + msg + ' ' +
                                                  code);
@@ -822,7 +823,7 @@ ZfsClient.prototype._receive = function (dataset,
             server = net.createServer();
             server.on('connection', function (socket) {
                 log.info('ZFSClient._receive: got socket, piping to zfs recv');
-                socket.pipe(_.zfsRecv.stdin);
+                socket.pipe(zfsRecv.stdin);
                 cb();
             });
 
@@ -832,6 +833,8 @@ ZfsClient.prototype._receive = function (dataset,
                 if (err) {
                     log.warn({err: err},
                              'ZfsClient._receive: could not start server');
+                    log.info('ZfsClient._receive: killing `zfs recv` proc');
+                    zfsRecv.kill('SIGTERM');
                     err = new verror.VError(err);
                 }
                 cb(err);
@@ -839,6 +842,8 @@ ZfsClient.prototype._receive = function (dataset,
 
             server.on('error', function (err) {
                 log.warn({err: err}, 'ZfsClient._receive: got socket error');
+                log.info('ZfsClient._receive: killing `zfs recv` proc');
+                zfsRecv.kill('SIGTERM');
                 cb(new verror.VError(err));
             });
         },
