commit 26f360d1588a2d4106f3061bfd757f6ecdee37dc (HEAD -> master, tag: v1.4.0, refs/changes/12/3012/3)
Author: David Pacheco <dap@joyent.com>
Date:   2017-11-30T13:24:22-08:00 (1 year, 10 months ago)
    
    joyent/node-extsprintf#13 could provide better error messages for programmer errors
    joyent/node-extsprintf#14 bring extsprintf into the modern world
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/.gitmodules b/.gitmodules
index e69de29..401f01a 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/catest"]
+	path = deps/catest
+	url = https://github.com/joyent/catest
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..91c057e
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,10 @@
+# Changelog
+
+## Not yet released
+
+None yet.
+
+## v1.4.0
+
+* #13 could provide better error messages for programmer errors
+* #14 bring extsprintf into the modern world
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..0ec903f
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,20 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes.  Anyone can submit changes.  To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean.  This target requires separate
+tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
+* https://github.com/joyent/catest
+
+If you're changing something non-trivial or user-facing, you may want to submit
+an issue first.
diff --git a/Makefile b/Makefile
index db84518..6d96059 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2012, Joyent, Inc. All rights reserved.
+# Copyright (c) 2017, Joyent, Inc. All rights reserved.
 #
 # Makefile: top-level Makefile
 #
@@ -11,6 +11,7 @@
 #
 # Files
 #
+CATEST		 = deps/catest/catest
 JSL		 = jsl
 JSSTYLE		 = jsstyle
 JS_FILES	:= $(shell find examples lib -name '*.js')
@@ -21,4 +22,9 @@ JSL_CONF_NODE	 = jsl.node.conf
 # Default target is "check"
 check:
 
+test: | $(CATEST)
+	$(CATEST) -a
+
+CATEST: deps/catest/.git
+
 include ./Makefile.targ
diff --git a/deps/catest b/deps/catest
new file mode 160000
index 0000000..ca13864
--- /dev/null
+++ b/deps/catest
@@ -0,0 +1 @@
+Subproject commit ca138645cc9647d6976063c61fa9f28dd16c5023
diff --git a/lib/extsprintf.js b/lib/extsprintf.js
index ed883d3..d5d8ad9 100644
--- a/lib/extsprintf.js
+++ b/lib/extsprintf.js
@@ -30,7 +30,7 @@ exports.fprintf = jsFprintf;
  * Everything else is currently unsupported, most notably precision, unsigned
  * numbers, non-decimal numbers, and characters.
  */
-function jsSprintf(fmt)
+function jsSprintf(ofmt)
 {
 	var regex = [
 	    '([^%]*)',				/* normal text */
@@ -43,18 +43,43 @@ function jsSprintf(fmt)
 	].join('');
 
 	var re = new RegExp(regex);
+
+	/* variadic arguments used to fill in conversion specifiers */
 	var args = Array.prototype.slice.call(arguments, 1);
+	/* remaining format string */
+	var fmt = ofmt;
+
+	/* components of the current conversion specifier */
 	var flags, width, precision, conversion;
 	var left, pad, sign, arg, match;
+
+	/* return value */
 	var ret = '';
+
+	/* current variadic argument (1-based) */
 	var argn = 1;
+	/* 0-based position in the format string that we've read */
+	var posn = 0;
+	/* 1-based position in the format string of the current conversion */
+	var convposn;
+	/* current conversion specifier */
+	var curconv;
 
-	mod_assert.equal('string', typeof (fmt));
+	mod_assert.equal('string', typeof (fmt),
+	    'first argument must be a format string');
 
 	while ((match = re.exec(fmt)) !== null) {
 		ret += match[1];
 		fmt = fmt.substring(match[0].length);
 
+		/*
+		 * Update flags related to the current conversion specifier's
+		 * position so that we can report clear error messages.
+		 */
+		curconv = match[0].substring(match[1].length);
+		convposn = posn + match[1].length + 1;
+		posn += match[0].length;
+
 		flags = match[2] || '';
 		width = match[3] || 0;
 		precision = match[4] || '';
@@ -68,19 +93,24 @@ function jsSprintf(fmt)
 			continue;
 		}
 
-		if (args.length === 0)
-			throw (new Error('too few args to sprintf'));
+		if (args.length === 0) {
+			throw (jsError(ofmt, convposn, curconv,
+			    'has no matching argument ' +
+			    '(too few arguments passed)'));
+		}
 
 		arg = args.shift();
 		argn++;
 
-		if (flags.match(/[\' #]/))
-			throw (new Error(
-			    'unsupported flags: ' + flags));
+		if (flags.match(/[\' #]/)) {
+			throw (jsError(ofmt, convposn, curconv,
+			    'uses unsupported flags'));
+		}
 
-		if (precision.length > 0)
-			throw (new Error(
-			    'non-zero precision not supported'));
+		if (precision.length > 0) {
+			throw (jsError(ofmt, convposn, curconv,
+			    'uses non-zero precision (not supported)'));
+		}
 
 		if (flags.match(/-/))
 			left = true;
@@ -93,10 +123,12 @@ function jsSprintf(fmt)
 
 		switch (conversion) {
 		case 's':
-			if (arg === undefined || arg === null)
-				throw (new Error('argument ' + argn +
-				    ': attempted to print undefined or null ' +
-				    'as a string'));
+			if (arg === undefined || arg === null) {
+				throw (jsError(ofmt, convposn, curconv,
+				    'attempted to print undefined or null ' +
+				    'as a string (argument ' + argn + ' to ' +
+				    'sprintf)'));
+			}
 			ret += doPad(pad, width, left, arg.toString());
 			break;
 
@@ -124,8 +156,8 @@ function jsSprintf(fmt)
 			break;
 
 		default:
-			throw (new Error('unsupported conversion: ' +
-			    conversion));
+			throw (jsError(ofmt, convposn, curconv,
+			    'is not supported'));
 		}
 	}
 
@@ -133,6 +165,16 @@ function jsSprintf(fmt)
 	return (ret);
 }
 
+function jsError(fmtstr, convposn, curconv, reason) {
+	mod_assert.equal(typeof (fmtstr), 'string');
+	mod_assert.equal(typeof (curconv), 'string');
+	mod_assert.equal(typeof (convposn), 'number');
+	mod_assert.equal(typeof (reason), 'string');
+	return (new Error('format string "' + fmtstr +
+	    '": conversion specifier "' + curconv + '" at character ' +
+	    convposn + ' ' + reason));
+}
+
 function jsPrintf() {
 	var args = Array.prototype.slice.call(arguments);
 	args.unshift(process.stdout);
diff --git a/package.json b/package.json
index b788895..42669d2 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
 	"name": "extsprintf",
-	"version": "1.3.0",
+	"version": "1.4.0",
 	"description": "extended POSIX-style sprintf",
 	"main": "./lib/extsprintf.js",
 	"repository": {
diff --git a/test/tst.basic.js b/test/tst.basic.js
new file mode 100644
index 0000000..9e56fda
--- /dev/null
+++ b/test/tst.basic.js
@@ -0,0 +1,118 @@
+/*
+ * tst.basic.js: tests various valid invocation
+ */
+
+var mod_assert = require('assert');
+var mod_extsprintf = require('../lib/extsprintf');
+var mod_path = require('path');
+var sprintf = mod_extsprintf.sprintf;
+
+var testcases = [ {
+    'name': 'empty string',
+    'args': [ '' ],
+    'result': ''
+}, {
+    'name': '%s: basic',
+    'args': [ '%s', 'foo' ],
+    'result': 'foo'
+}, {
+    'name': '%s: not first',
+    'args': [ 'hello %s\n', 'world' ],
+    'result': 'hello world\n'
+}, {
+    'name': '%s: right-aligned',
+    'args': [ 'hello %10s\n', 'world' ],
+    'result': 'hello      world\n'
+}, {
+    'name': '%s: left-aligned',
+    'args': [ 'hello %-10sagain\n', 'world' ],
+    'result': 'hello world     again\n'
+}, {
+    'name': '%d: basic, positive',
+    'args': [ '%d', 17 ],
+    'result': '17'
+}, {
+    'name': '%d: basic, zero',
+    'args': [ '%d', 0 ],
+    'result': '0'
+}, {
+    'name': '%d: basic, floating point value',
+    'args': [ '%d', 17.3 ],
+    'result': '17'
+}, {
+    'name': '%d: basic, negative',
+    'args': [ '%d', -3 ],
+    'result': '-3'
+}, {
+    'name': '%d: right-aligned',
+    'args': [ '%4d', 17 ],
+    'result': '  17'
+}, {
+    'name': '%d: right-aligned, zero-padded',
+    'args': [ '%04d', 17 ],
+    'result': '0017'
+}, {
+    'name': '%d: left-aligned',
+    'args': [ '%-4d', 17 ],
+    'result': '17  '
+}, {
+    'name': '%x: basic',
+    'args': [ '%x', 18],
+    'result': '12'
+}, {
+    'name': '%x: zero-padded, right-aligned',
+    'args': [ '%08x', 0xfeedface ],
+    'result': 'feedface'
+}, {
+    'name': '%d: with plus sign',
+    'args': [ '%+d', 17 ],
+    'result': '+17'
+}, {
+    'name': '%f: basic',
+    'args': [ '%f', 3.2 ],
+    'result': '3.2'
+}, {
+    'name': '%f: right-aligned',
+    'args': [ '%5f', 3.2 ],
+    'result': '  3.2'
+}, {
+    'name': '%%: basic',
+    'args': [ '%%' ],
+    'result': '%'
+}, {
+    'name': 'complex',
+    'args': [ 'one %s %8s %-3d bytes past 0x%04x, which was %6f%%%s%5s',
+        'program', 'wrote', -2, 0x30, 3.7, ' plus', 'over' ],
+    'result': 'one program    wrote -2  bytes past 0x0030, which was    ' +
+        '3.7% plus over'
+} ];
+
+function main(verbose) {
+	/*
+	 * Create one test case with a very large input string.
+	 */
+	var input = '1234';
+	while (input.length < 100 * 1024) {
+		input += input;
+	}
+	testcases.push({
+	    'name': 'long string argument (' + input.length + ' characters)',
+	    'args': [ '%s', input ],
+	    'result': input
+	});
+
+	testcases.forEach(function (tc) {
+		var result;
+		console.error('test case: %s', tc.name);
+		result = sprintf.apply(null, tc.args);
+		if (verbose) {
+			console.error('    args:   %s', JSON.stringify(tc.args));
+			console.error('    result: %s', result);
+		}
+		mod_assert.equal(tc.result, result);
+	});
+
+	console.log('%s tests passed', mod_path.basename(__filename));
+}
+
+main(process.argv.length > 2 && process.argv[2] == '-v');
diff --git a/test/tst.invalid.js b/test/tst.invalid.js
new file mode 100644
index 0000000..1a7a560
--- /dev/null
+++ b/test/tst.invalid.js
@@ -0,0 +1,78 @@
+/*
+ * tst.invalid.js: tests invalid invocations
+ */
+
+var mod_assert = require('assert');
+var mod_extsprintf = require('../lib/extsprintf');
+var mod_path = require('path');
+var sprintf = mod_extsprintf.sprintf;
+
+var testcases = [ {
+    'name': 'missing all arguments',
+    'args': [],
+    'errmsg': /first argument must be a format string$/
+}, {
+    'name': 'missing argument for format specifier (first char and specifier)',
+    'args': [ '%s' ],
+    'errmsg': new RegExp(
+        'format string "%s": conversion specifier "%s" at character 1 ' +
+	'has no matching argument \\(too few arguments passed\\)')
+}, {
+    'name': 'missing argument for format specifier (later in string)',
+    'args': [ 'hello %s world %13d', 'big' ],
+    'errmsg': new RegExp(
+        'format string "hello %s world %13d": conversion specifier "%13d" at ' +
+	'character 16 has no matching argument \\(too few arguments passed\\)')
+}, {
+    'name': 'printing null as string',
+    'args': [ '%d cookies %3s', 15, null ],
+    'errmsg': new RegExp(
+        'format string "%d cookies %3s": conversion specifier "%3s" at ' +
+	'character 12 attempted to print undefined or null as a string ' +
+	'\\(argument 3 to sprintf\\)')
+}, {
+    'name': 'printing undefined as string',
+    'args': [ '%d cookies %3s ah %d', 15, undefined, 7 ],
+    'errmsg': new RegExp(
+        'format string "%d cookies %3s ah %d": conversion specifier "%3s" at ' +
+	'character 12 attempted to print undefined or null as a string ' +
+	'\\(argument 3 to sprintf\\)')
+}, {
+    'name': 'unsupported format character',
+    'args': [ 'do not use %X', 13 ],
+    'errmsg': new RegExp(
+        'format string "do not use %X": conversion ' +
+	'specifier "%X" at character 12 is not supported$')
+}, {
+    'name': 'unsupported flags',
+    'args': [ '%#x', 13 ],
+    'errmsg': new RegExp(
+        'format string "%#x": conversion ' +
+	'specifier "%#x" at character 1 uses unsupported flags$')
+} ];
+
+function main(verbose) {
+	testcases.forEach(function (tc) {
+		var error;
+		console.error('test case: %s', tc.name);
+		if (verbose) {
+			console.error('    args:   %s', JSON.stringify(tc.args));
+		}
+		mod_assert.throws(function () {
+			try {
+				sprintf.apply(null, tc.args);
+			} catch (ex) {
+				error = ex;
+				throw (ex);
+			}
+		}, tc.errmsg);
+
+		if (verbose && error) {
+			console.error('    error:  %s', error.message);
+		}
+	});
+
+	console.log('%s tests passed', mod_path.basename(__filename));
+}
+
+main(process.argv.length > 2 && process.argv[2] == '-v');
