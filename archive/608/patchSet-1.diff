From 611b160fbd76512ab95a1846bbab2db1700d051d Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 6 Oct 2016 18:30:53 +0000
Subject: [PATCH] joyent/node-ip6addr#1 Want a simpler Addr.clone()

---
 CHANGES.md         |  4 +++
 CONTRIBUTING.md    | 19 ++++++++++
 README.md          |  2 ++
 ip6addr.js         |  7 ++--
 package.json       |  7 ++--
 test/clone.test.js | 90 ++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 122 insertions(+), 7 deletions(-)
 create mode 100644 CONTRIBUTING.md
 create mode 100644 test/clone.test.js

diff --git a/CHANGES.md b/CHANGES.md
index b334872..49c2963 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # ip6addr Changelog
 
+## 0.2.2
+
+- Simpler Addr.clone()
+
 ## 0.2.1
 
 - Add CIDR.address() for getting the address component of a CIDR
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..d67611f
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,19 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes. Anyone can submit changes. To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean. The "prepush" target runs the
+"check" target, which requires these separate tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
+
+If you're changing something non-trivial or user-facing, you may want to submit
+an issue first.
diff --git a/README.md b/README.md
index 6ee0852..978f13f 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,5 @@
+# ip6addr
+
 ip6addr is a small library for manipulating IP addresses in Javascript.
 Inspired by [ipaddr.js](https://github.com/whitequark/ipaddr.js), ip6addr
 focuses on better IPv6 support, particularly in cases where IPv4 and IPv6
diff --git a/ip6addr.js b/ip6addr.js
index 3098909..a63808c 100644
--- a/ip6addr.js
+++ b/ip6addr.js
@@ -9,7 +9,6 @@
  */
 
 var assert = require('assert-plus');
-var clone = require('clone');
 var util = require('util');
 
 
@@ -263,8 +262,10 @@ Addr.prototype.toLong = function toLong() {
 
 Addr.prototype.clone = function cloneAddr() {
   var out = new Addr();
-  out._fields = clone(this._fields);
-  out._attrs = clone(this._attrs);
+  out._fields = this._fields.slice();
+  for (var k in this._attrs) {
+      out._attrs[k] = this._attrs[k];
+  }
   return out;
 };
 
diff --git a/package.json b/package.json
index 37520c3..f0e8215 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "ip6addr",
-  "version": "0.2.1",
+  "version": "0.2.2",
   "description": "IPv6/IPv4 address parsing and manipulation",
   "keywords": [ "ip", "ipv4", "ipv6", "cidr", "subnet" ],
   "repository": {
@@ -9,8 +9,7 @@
   },
   "main": "ip6addr.js",
   "dependencies": {
-    "clone": "1.0.0",
-    "assert-plus": "0.1.5"
+    "assert-plus": "^1.0.0"
   },
   "devDependencies": {
     "istanbul": "^0.3.6",
@@ -20,5 +19,5 @@
     "test": "./node_modules/.bin/istanbul cover --print none test/runall.js"
   },
   "author": "Joyent (joyent.com)",
-  "license": "MPL-2"
+  "license": "MPL-2.0"
 }
diff --git a/test/clone.test.js b/test/clone.test.js
new file mode 100644
index 0000000..27ae10e
--- /dev/null
+++ b/test/clone.test.js
@@ -0,0 +1,90 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+var test = require('tape').test;
+
+
+///--- Globals
+
+var lib;
+
+
+///--- Tests
+
+test('load library', function (t) {
+  lib = require('../ip6addr.js');
+  t.ok(lib);
+  t.end();
+});
+
+test('clone() produces an equivalent address', function (t) {
+  var addr1 = lib.parse('1.2.3.4');
+  var addr2 = addr1.clone();
+
+  t.deepEqual(addr1, addr2, 'IPv4: addr1 == addr2');
+  t.deepEqual(addr1.toString(), addr2.toString(),
+    'IPv4: addr1.toString() == addr2.toString()');
+
+  addr1 = lib.parse('::ffff:1.2.3.4');
+  addr2 = addr1.clone();
+
+  t.deepEqual(addr1, addr2, 'IPv4 Mapped: addr1 == addr2');
+  t.deepEqual(addr1.toString(), addr2.toString(),
+    'IPv4 Mapped: addr1.toString() == addr2.toString()');
+
+  addr1 = lib.parse('fd00::40e');
+  addr2 = addr1.clone();
+
+  t.deepEqual(addr1, addr2, 'IPv6: addr1 == addr2');
+  t.deepEqual(addr1.toString(), addr2.toString(),
+    'IPv6: addr1.toString() == addr2.toString()');
+
+  t.end();
+});
+
+test('modifying the clone has no effect on the original', function (t) {
+  var addr1 = lib.parse('1.2.3.4');
+  var addr2 = addr1.clone();
+
+  addr2._fields[7]++;
+  t.equal(addr1.toString(), '1.2.3.4', 'addr1 is still 1.2.3.4');
+  t.equal(addr2.toString(), '1.2.3.5', 'addr2 is now 1.2.3.5');
+
+  addr2._attrs.ipv4Bare = false;
+  addr2._attrs.ipv4Mapped = true;
+  t.equal(addr1.toString(), '1.2.3.4', 'addr1 remained the same');
+  t.equal(addr2.toString(), '::ffff:1.2.3.5', 'addr2 is now a v4-mapped addr');
+
+  addr2._attrs.ipv4Mapped = false;
+  t.equal(addr1.toString(), '1.2.3.4', 'addr1 remained the same');
+  t.equal(addr2.toString(), '::ffff:102:305', 'addr2 is now a v6 addr');
+
+  t.end();
+});
+
+test('modifying the original has no effect on the clone', function (t) {
+  var addr1 = lib.parse('1.2.3.4');
+  var addr2 = addr1.clone();
+
+  addr1._fields[7]++;
+  t.equal(addr1.toString(), '1.2.3.5', 'addr1 is now 1.2.3.5');
+  t.equal(addr2.toString(), '1.2.3.4', 'addr2 is still 1.2.3.4');
+
+  addr1._attrs.ipv4Bare = false;
+  addr1._attrs.ipv4Mapped = true;
+  t.equal(addr1.toString(), '::ffff:1.2.3.5', 'addr1 is now a v4-mapped addr');
+  t.equal(addr2.toString(), '1.2.3.4', 'addr2 remained the same');
+
+  addr1._attrs.ipv4Mapped = false;
+  t.equal(addr1.toString(), '::ffff:102:305', 'addr1 is now a v6 addr');
+  t.equal(addr2.toString(), '1.2.3.4', 'addr2 remained the same');
+
+  t.end();
+});
-- 
2.21.0

