From 3b6520508ef283f4aa71c5067d34ff3c5cfb05b5 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Thu, 23 Feb 2017 17:11:27 +0000
Subject: [PATCH] OS-5981 move eventfd in-kernel

---
 .../lib/brand/lx/lx_brand/common/lx_brand.c   |   8 +-
 usr/src/lib/brand/lx/lx_brand/common/misc.c   |  23 ----
 .../lib/brand/lx/lx_brand/sys/lx_syscall.h    |   2 -
 usr/src/uts/common/brand/lx/os/lx_syscall.c   |   8 +-
 usr/src/uts/common/brand/lx/sys/lx_misc.h     |   4 +-
 usr/src/uts/common/brand/lx/sys/lx_syscalls.h |   2 +
 .../uts/common/brand/lx/syscall/lx_eventfd.c  | 124 ++++++++++++++++++
 usr/src/uts/intel/Makefile.files              |   3 +-
 8 files changed, 139 insertions(+), 35 deletions(-)
 create mode 100644 usr/src/uts/common/brand/lx/syscall/lx_eventfd.c

diff --git a/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c b/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
index 45166cb63f..6d67477830 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
@@ -1294,13 +1294,13 @@ static lx_syscall_handler_t lx_handlers[] = {
 	NULL,				/* 281: epoll_pwait */
 	lx_signalfd,			/* 282: signalfd */
 	lx_timerfd_create,		/* 283: timerfd_create */
-	lx_eventfd,			/* 284: eventfd */
+	NULL,				/* 284: eventfd */
 	NULL,				/* 285: fallocate */
 	lx_timerfd_settime,		/* 286: timerfd_settime */
 	lx_timerfd_gettime,		/* 287: timerfd_gettime */
 	NULL,				/* 288: accept4 */
 	lx_signalfd4,			/* 289: signalfd4 */
-	lx_eventfd2,			/* 290: eventfd2 */
+	NULL,				/* 290: eventfd2 */
 	NULL,				/* 291: epoll_create1 */
 	NULL,				/* 292: dup3 */
 	NULL,				/* 293: pipe2 */
@@ -1664,12 +1664,12 @@ static lx_syscall_handler_t lx_handlers[] = {
 	lx_utimensat,			/* 320: utimensat */
 	lx_signalfd,			/* 321: signalfd */
 	lx_timerfd_create,		/* 322: timerfd_create */
-	lx_eventfd,			/* 323: eventfd */
+	NULL,				/* 323: eventfd */
 	NULL,				/* 324: fallocate */
 	lx_timerfd_settime,		/* 325: timerfd_settime */
 	lx_timerfd_gettime,		/* 326: timerfd_gettime */
 	lx_signalfd4,			/* 327: signalfd4 */
-	lx_eventfd2,			/* 328: eventfd2 */
+	NULL,				/* 328: eventfd2 */
 	NULL,				/* 329: epoll_create1 */
 	NULL,				/* 330: dup3 */
 	NULL,				/* 331: pipe2 */
diff --git a/usr/src/lib/brand/lx/lx_brand/common/misc.c b/usr/src/lib/brand/lx/lx_brand/common/misc.c
index 9c73ac5b4b..a223d0ac35 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/misc.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/misc.c
@@ -357,26 +357,3 @@ lx_utimes(const char *path, const struct timeval times[2])
 	r = utimes(path, times);
 	return ((r == -1) ? -errno : r);
 }
-
-long
-lx_eventfd(unsigned int initval)
-{
-	return (lx_eventfd2(initval, 0));
-}
-
-long
-lx_eventfd2(unsigned int initval, int flags)
-{
-	int r = eventfd(initval, flags);
-
-	/*
-	 * eventfd(3C) may fail with ENOENT if /dev/eventfd is not available.
-	 * It is less jarring to Linux programs to tell them that the system
-	 * call is not supported than to report an error number they are not
-	 * expecting.
-	 */
-	if (r == -1 && errno == ENOENT)
-		return (-ENOTSUP);
-
-	return (r == -1 ? -errno : r);
-}
diff --git a/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h b/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
index c04b1d2d47..40041a6002 100644
--- a/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
+++ b/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
@@ -177,8 +177,6 @@ extern long lx_shmget(key_t, size_t, int);
 extern long lx_shmat(int, void *, int);
 extern long lx_shmctl(int, int, void *);
 
-extern long lx_eventfd(unsigned int);
-extern long lx_eventfd2(unsigned int, int);
 extern long lx_getgroups(int, gid_t *);
 extern long lx_inotify_add_watch(int, const char *, uint32_t);
 extern long lx_inotify_init(void);
diff --git a/usr/src/uts/common/brand/lx/os/lx_syscall.c b/usr/src/uts/common/brand/lx/os/lx_syscall.c
index 2cf514dc68..7977aa595e 100644
--- a/usr/src/uts/common/brand/lx/os/lx_syscall.c
+++ b/usr/src/uts/common/brand/lx/os/lx_syscall.c
@@ -846,12 +846,12 @@ lx_sysent_t lx_sysent32[] = {
 	{"utimensat",	NULL,			0,		4}, /* 320 */
 	{"signalfd",	NULL,			0,		3}, /* 321 */
 	{"timerfd_create", NULL,		0,		2}, /* 322 */
-	{"eventfd",	NULL,			0,		1}, /* 323 */
+	{"eventfd",	lx_eventfd,		0,		1}, /* 323 */
 	{"fallocate",	lx_fallocate32,		LX_SYS_EBPARG6,	6}, /* 324 */
 	{"timerfd_settime", NULL,		0,		4}, /* 325 */
 	{"timerfd_gettime", NULL,		0,		2}, /* 326 */
 	{"signalfd4",	NULL,			0,		4}, /* 327 */
-	{"eventfd2",	NULL,			0,		2}, /* 328 */
+	{"eventfd2",	lx_eventfd2,		0,		2}, /* 328 */
 	{"epoll_create1", lx_epoll_create1,	0,		1}, /* 329 */
 	{"dup3",	lx_dup3,		0,		3}, /* 330 */
 	{"pipe2",	lx_pipe2,		0,		2}, /* 331 */
@@ -1174,13 +1174,13 @@ lx_sysent_t lx_sysent64[] = {
 	{"epoll_pwait",	lx_epoll_pwait,		0,		5}, /* 281 */
 	{"signalfd",	NULL,			0,		3}, /* 282 */
 	{"timerfd_create", NULL,		0,		2}, /* 283 */
-	{"eventfd",	NULL,			0,		1}, /* 284 */
+	{"eventfd",	lx_eventfd,		0,		1}, /* 284 */
 	{"fallocate",	lx_fallocate,		0,		4}, /* 285 */
 	{"timerfd_settime", NULL,		0,		4}, /* 286 */
 	{"timerfd_gettime", NULL,		0,		2}, /* 287 */
 	{"accept4",	lx_accept4,		0,		4}, /* 288 */
 	{"signalfd4",	NULL,			0,		4}, /* 289 */
-	{"eventfd2",	NULL,			0,		2}, /* 290 */
+	{"eventfd2",	lx_eventfd2,		0,		2}, /* 290 */
 	{"epoll_create1", lx_epoll_create1,	0,		1}, /* 291 */
 	{"dup3",	lx_dup3,		0,		3}, /* 292 */
 	{"pipe2",	lx_pipe2,		0,		2}, /* 293 */
diff --git a/usr/src/uts/common/brand/lx/sys/lx_misc.h b/usr/src/uts/common/brand/lx/sys/lx_misc.h
index 5e8cbe150d..19c50b9151 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_misc.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_misc.h
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef _SYS__LX_MISC_H
@@ -119,6 +119,8 @@ extern void lx_vsyscall_enter(proc_t *, klwp_t *, int);
 
 extern void lx_check_strict_failure(lx_lwp_data_t *);
 
+extern boolean_t lx_is_eventfd(file_t *);
+
 #endif
 
 #ifdef	__cplusplus
diff --git a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
index 63a01d9da5..ddfa35d808 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
@@ -60,6 +60,8 @@ extern long lx_epoll_create1();
 extern long lx_epoll_ctl();
 extern long lx_epoll_pwait();
 extern long lx_epoll_wait();
+extern long lx_eventfd();
+extern long lx_eventfd2();
 extern long lx_faccessat();
 extern long lx_fadvise64();
 extern long lx_fadvise64_32();
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_eventfd.c b/usr/src/uts/common/brand/lx/syscall/lx_eventfd.c
new file mode 100644
index 0000000000..a06502d2e6
--- /dev/null
+++ b/usr/src/uts/common/brand/lx/syscall/lx_eventfd.c
@@ -0,0 +1,124 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+#include <sys/types.h>
+#include <sys/systm.h>
+#include <sys/fcntl.h>
+#include <sys/file.h>
+#include <sys/ddi.h>
+#include <sys/sunddi.h>
+#include <sys/sunldi.h>
+#include <sys/vnode.h>
+#include <sys/eventfd.h>
+
+static major_t eventfd_major = 0;
+
+/* io_submit uses this to validate control block eventfd descriptors */
+boolean_t
+lx_is_eventfd(file_t *fp)
+{
+	vnode_t *vp = fp->f_vnode;
+
+	if (vp->v_type == VCHR && getmajor(vp->v_rdev) == eventfd_major)
+		return (B_TRUE);
+	return (B_FALSE);
+}
+
+long
+lx_eventfd2(uint_t initval, int flags)
+{
+	uint64_t val = initval;
+	int err, fd, rv;
+	int fmode = FREAD | FWRITE;
+	vnode_t *vp = NULL;
+	file_t *fp = NULL;
+	struct uio auio;
+	struct iovec aiov;
+
+	if (flags & ~(EFD_NONBLOCK | EFD_CLOEXEC | EFD_SEMAPHORE))
+		return (set_errno(EINVAL));
+
+	if (flags & EFD_NONBLOCK)
+		fmode |= FNONBLOCK;
+
+	if (falloc((vnode_t *)NULL, fmode, &fp, &fd) != 0) {
+		err = EMFILE;
+		goto error;
+	}
+	if (ldi_vp_from_name("/dev/eventfd", &vp) != 0) {
+		/*
+		 * If /dev/eventfd is not available then it is less jarring to
+		 * Linux programs to tell them that the system call is not
+		 * supported instead of reporting an error (ENOENT) they are
+		 * not expecting.
+		 */
+		err = ENOTSUP;
+		goto error;
+	}
+	if ((err = VOP_OPEN(&vp, fmode | FKLYR, CRED(), NULL)) != 0) {
+		VN_RELE(vp);
+		vp = NULL;
+		goto error;
+	}
+
+	if (flags & EFD_SEMAPHORE) {
+		if ((err = VOP_IOCTL(vp, EVENTFDIOC_SEMAPHORE, 0, fmode, CRED(),
+		    &rv, NULL)) != 0)
+			goto error;
+	}
+
+	if (val != 0) {
+		/* write initial value */
+		aiov.iov_base = (caddr_t)&val;
+		aiov.iov_len = sizeof (val);
+		auio.uio_iov = &aiov;
+		auio.uio_iovcnt = 1;
+		auio.uio_loffset = 0;
+		auio.uio_offset = 0;
+		auio.uio_resid = sizeof (val);
+		auio.uio_segflg = UIO_SYSSPACE;
+		auio.uio_fmode = FWRITE;
+
+		if ((err = VOP_WRITE(vp, &auio, FWRITE, CRED(), NULL)) != 0)
+			goto error;
+	}
+
+	eventfd_major = getmajor(vp->v_rdev);
+
+	fp->f_vnode = vp;
+	mutex_exit(&fp->f_tlock);
+	setf(fd, fp);
+	if (flags & EFD_CLOEXEC) {
+		f_setfd(fd, FD_CLOEXEC);
+	}
+	return (fd);
+
+error:
+	if (fp != NULL) {
+		setf(fd, NULL);
+		unfalloc(fp);
+	}
+	if (vp != NULL) {
+		(void) VOP_CLOSE(vp, fmode, 0, 0, CRED(), NULL);
+		VN_RELE(vp);
+	}
+	return (set_errno(err));
+}
+
+long
+lx_eventfd(uint_t val)
+{
+	return (lx_eventfd2(val, 0));
+}
diff --git a/usr/src/uts/intel/Makefile.files b/usr/src/uts/intel/Makefile.files
index 5e819809fd..751766e855 100644
--- a/usr/src/uts/intel/Makefile.files
+++ b/usr/src/uts/intel/Makefile.files
@@ -21,7 +21,7 @@
 
 #
 # Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
-# Copyright 2016, Joyent, Inc.
+# Copyright 2017, Joyent, Inc.
 # Copyright 2016 Nexenta Systems, Inc.
 #
 
@@ -320,6 +320,7 @@ LX_BRAND_OBJS  =		\
 	lx_dup.o		\
 	lx_errno.o		\
 	lx_epoll.o		\
+	lx_eventfd.o		\
 	lx_fadvise.o		\
 	lx_fallocate.o		\
 	lx_fcntl.o		\
-- 
2.21.0

