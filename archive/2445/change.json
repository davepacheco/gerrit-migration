{"project":"joyent/illumos-joyent","branch":"master","id":"Ia662268ae071ed448d0a1b8f21bd49be52a0a6b4","number":"2445","subject":"OS-6013 want more efficient id_space_t","owner":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"url":"https://cr.joyent.us/2445","commitMessage":"OS-6013 want more efficient id_space_t\n","createdOn":1503506231,"lastUpdated":1503688190,"open":true,"status":"NEW","comments":[{"timestamp":1503506231,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Uploaded patch set 1."},{"timestamp":1503508201,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Uploaded patch set 2."},{"timestamp":1503526333,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 2:\n\n(10 comments)\n\nFirst group of stuff"},{"timestamp":1503591599,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Patch Set 2:\n\n(5 comments)"},{"timestamp":1503622039,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Patch Set 2:\n\n(4 comments)"},{"timestamp":1503622051,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Uploaded patch set 3."},{"timestamp":1503688190,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(56 comments)\n\nThis looks like a great start. I\u0027ve got a bunch of questions here on some of the design and some of the specifics. While there\u0027s a lot of comments, there\u0027s a lot of good stuff here."}],"currentPatchSet":{"number":"3","revision":"a662268ae071ed448d0a1b8f21bd49be52a0a6b4","parents":["fc1b3c825992bc27440652673e53f8552575f46a"],"ref":"refs/changes/45/2445/3","uploader":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"createdOn":1503622051,"author":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/common/idspace/id_space.c","line":63,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure this is correct? I don\u0027t see how MAXUID is on the scene here at all. Also, the range should be marked as exclusive on the far end."},{"file":"usr/src/common/idspace/id_space.c","line":64,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is this still true?"},{"file":"usr/src/common/idspace/id_space.c","line":103,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What\u0027s the maximal ID?"},{"file":"usr/src/common/idspace/id_space.c","line":191,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027m not sure what this notation is trying to convey."},{"file":"usr/src/common/idspace/id_space.c","line":197,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is it rare?"},{"file":"usr/src/common/idspace/id_space.c","line":200,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same comment on notation."},{"file":"usr/src/common/idspace/id_space.c","line":246,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Don\u0027t use register."},{"file":"usr/src/common/idspace/id_space.c","line":272,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Isn\u0027t this fls(3C)?"},{"file":"usr/src/common/idspace/id_space.c","line":279,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should VERIFY that the idt_root is NULL."},{"file":"usr/src/common/idspace/id_space.c","line":293,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we verify that there are no entries in the AVL list at this point?"},{"file":"usr/src/common/idspace/id_space.c","line":312,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Um. What are you trying to do here. Are you trying to satisfy the compiler? If so that really deserves a comment."},{"file":"usr/src/common/idspace/id_space.c","line":318,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why not just use the _zalloc version of the routines?"},{"file":"usr/src/common/idspace/id_space.c","line":335,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a way to do this iteratively so we don\u0027t end up in a large recursive call? We don\u0027t have as much kernel stack.\n\nI\u0027d also recommend setting the entries to NULL as you go."},{"file":"usr/src/common/idspace/id_space.c","line":354,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would probably use zalloc here. While you\u0027re initializing most members, you\u0027re not doing anything with the AVL members for example. While it\u0027s unlikely that they\u0027d be used uninitialized, I think it\u0027ll be safer to do something with them."},{"file":"usr/src/common/idspace/id_space.c","line":356,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same thing about compiler avoidance."},{"file":"usr/src/common/idspace/id_space.c","line":384,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would make sure to NULL out tp-\u003eidt_root before taking the next call."},{"file":"usr/src/common/idspace/id_space.c","line":402,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This looks wrong. One of these should return -1, the other should return 1."},{"file":"usr/src/common/idspace/id_space.c","line":421,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If these are invalid we should fail the creation in userland. It\u0027d be great if we could get there for the kernel, but that probably needs more work."},{"file":"usr/src/common/idspace/id_space.c","line":421,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I suspect the point of this is to make sure that we don\u0027t overflow the id_t with high. Given that it\u0027s defined to be an int through typedefs, shouldn\u0027t use something more appropriate here? Further, it looks like MAXUID is INT_MAX. Are you sure that adding one here won\u0027t underflow as it\u0027s not defined to be an unsigned type?"},{"file":"usr/src/common/idspace/id_space.c","line":424,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027ll continue my zalloc recommendations."},{"file":"usr/src/common/idspace/id_space.c","line":451,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why aren\u0027t you checking the return value?"},{"file":"usr/src/common/idspace/id_space.c","line":461,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please create a single id_space_create function that takes a boolean_t for sleeping or not. We shouldn\u0027t duplicate all this. All of the previous comments apply to this."},{"file":"usr/src/common/idspace/id_space.c","line":519,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"VERIFY0."},{"file":"usr/src/common/idspace/id_space.c","line":565,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See prior notes on this part of the ASSERT."},{"file":"usr/src/common/idspace/id_space.c","line":641,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Use NBBY."},{"file":"usr/src/common/idspace/id_space.c","line":652,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"ASSERT3U"},{"file":"usr/src/common/idspace/id_space.c","line":654,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"spaces around divide?"},{"file":"usr/src/common/idspace/id_space.c","line":665,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If you want all ffs in he value, please use the unsigned maximum value, not the signed negative value."},{"file":"usr/src/common/idspace/id_space.c","line":678,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure this should be a _signed_ value?"},{"file":"usr/src/common/idspace/id_space.c","line":708,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"NBBY"},{"file":"usr/src/common/idspace/id_space.c","line":709,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"unsigned"},{"file":"usr/src/common/idspace/id_space.c","line":769,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"index?"},{"file":"usr/src/common/idspace/id_space.c","line":792,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there any way to design it to avoid the stack allocations?"},{"file":"usr/src/common/idspace/id_space.c","line":798,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we be asserting / verifying that we hold the tree\u0027s lock here?"},{"file":"usr/src/common/idspace/id_space.c","line":808,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably worth making that unsigned.\n\nAlso, we should probably ASSERT/VERIFY that it\u0027s non-zero so we don\u0027t get a divide by zero."},{"file":"usr/src/common/idspace/id_space.c","line":808,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If ID_BRANCH_SHIFT * tree_levels is greater than 32, I suspect that might be undefined."},{"file":"usr/src/common/idspace/id_space.c","line":827,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there any way for this to be negative?"},{"file":"usr/src/common/idspace/id_space.c","line":837,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Would you mind commenting why this case is a failure? I\u0027m not 100% sure. You also don\u0027t need parens around it."},{"file":"usr/src/common/idspace/id_space.c","line":843,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Mind asserting with a comparison?"},{"file":"usr/src/common/idspace/id_space.c","line":853,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What stops or bounds us to make sure we don\u0027t overflow the stack with recursive calls? I wouldn\u0027t assume we\u0027ll get a tail call."},{"file":"usr/src/common/idspace/id_space.c","line":862,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing parens around return expression."},{"file":"usr/src/common/idspace/id_space.c","line":873,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What guarantees that this never overflows?"},{"file":"usr/src/common/idspace/id_space.c","line":881,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same question on overflow."},{"file":"usr/src/common/idspace/id_space.c","line":913,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Rather than keeping track of the path we took, should we have parent pointers? This may also help in debugging. That way if we blow up on some random tree entry, we can always find the way to the parent."},{"file":"usr/src/common/idspace/id_space.c","line":1010,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"ASSERT3U, here and elsewhere."},{"file":"usr/src/common/idspace/id_space.c","line":1169,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, why aren\u0027t we checking the return value here? If we free an unallocated ID, that\u0027s bad, right?"},{"file":"usr/src/uts/common/sys/id_space.h","line":38,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I don\u0027t think you need to include \u003csys/mutex.h\u003e. mutex(9F) and condvar(9F) only say you need sys/ksynch.h. Any reason you need include?"},{"file":"usr/src/uts/common/sys/id_space.h","line":41,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You want synch.h actually. thread.h includes it, but I don\u0027t think you want any of the thread specific stuff."},{"file":"usr/src/uts/common/sys/id_space.h","line":44,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"how did we come up with this number?"},{"file":"usr/src/uts/common/sys/id_space.h","line":45,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there some way that we can enforce this at compile time or otherwise? When you say sizeof (ulong_t) here, do you mean that the value must be larger than 4/8? I assume this is because of the division?"},{"file":"usr/src/uts/common/sys/id_space.h","line":47,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How did we come up with this number?"},{"file":"usr/src/uts/common/sys/id_space.h","line":48,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How did we come up with this number? It looks like it came from VMEM. But given that you\u0027re not using the following bytes, any reason not to round it up (the compiler is going to add padding anyways)."},{"file":"usr/src/uts/common/sys/id_space.h","line":51,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"NBBY is the macro to use here. (Number of bits in a byte).\n\nAlso, did you look at the bitset.h or bitmap.h implementations at all? Is there a reason neither of them work for what we need to do?"},{"file":"usr/src/uts/common/sys/id_space.h","line":60,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It\u0027d probably be useful to comment the other names as well."},{"file":"usr/src/uts/common/sys/id_space.h","line":66,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any particular reason we opted with an AVL over a list? It appears that we only ever walk the AVL tree by iterating over it like a list. If we\u0027re not using avl_find() maybe we should just use a list_t."},{"file":"usr/src/uts/common/sys/id_space.h","line":77,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would make sure to leave the actual types opaque to consumers and only define the id_space_t as an opaque structure and instead have an implementation specific header. This way the actual implementation doesn\u0027t leak into ddi compliant modules since it\u0027s designed to be opaque."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/common/idspace/id_space.c","type":"MODIFIED","insertions":1054,"deletions":-67},{"file":"usr/src/uts/common/os/log_sysevent.c","type":"MODIFIED","insertions":13,"deletions":-15},{"file":"usr/src/uts/common/sys/id_space.h","type":"MODIFIED","insertions":46,"deletions":-4}],"sizeInsertions":1113,"sizeDeletions":-86},"patchSets":[{"number":"1","revision":"e79b1271072fd8e1444ae211325f8e6017053821","parents":["fc1b3c825992bc27440652673e53f8552575f46a"],"ref":"refs/changes/45/2445/1","uploader":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"createdOn":1503506231,"author":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/common/idspace/id_space.c","type":"MODIFIED","insertions":864,"deletions":-60},{"file":"usr/src/uts/common/sys/id_space.h","type":"MODIFIED","insertions":42,"deletions":-4}],"sizeInsertions":906,"sizeDeletions":-64},{"number":"2","revision":"f2c4e4ac4d5b6cc0484924c2213a5c07a5611186","parents":["fc1b3c825992bc27440652673e53f8552575f46a"],"ref":"refs/changes/45/2445/2","uploader":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"createdOn":1503508201,"author":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/common/idspace/id_space.c","line":90,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"These should definitely go."},{"file":"usr/src/common/idspace/id_space.c","line":124,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Considering the kernel uses the nice CPU-specific functions, it\u0027d probably be nice to do something similar for the userspace library.  We could probably just make an \u0027extern\u0027 definition here and clone the appropriate asm implementations into the libidspace dir.\n\nAt the very least, this should probably be static."},{"file":"usr/src/common/idspace/id_space.c","line":170,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Since these only have one caller each, maybe move the contents into their calling function?"},{"file":"usr/src/common/idspace/id_space.c","line":170,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Done"},{"file":"usr/src/common/idspace/id_space.c","line":221,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"bzero is more commonly used in the kernel space.  (It also has one less param and doesn\u0027t require (void)-ing a return value)"},{"file":"usr/src/common/idspace/id_space.c","line":221,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Done"},{"file":"usr/src/common/idspace/id_space.c","line":232,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"The paranoid would use a uint_t for looping."},{"file":"usr/src/common/idspace/id_space.c","line":232,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Done"},{"file":"usr/src/common/idspace/id_space.c","line":247,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"This is always called with an expectation that sleeping is allowed.  The parameter should probably be removed."},{"file":"usr/src/common/idspace/id_space.c","line":247,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"With the addition of id_space_create_nosleep, this is no longer true."},{"file":"usr/src/common/idspace/id_space.c","line":292,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Why not make these direct returns?  If not, why the negative number assigned to a uint?"},{"file":"usr/src/common/idspace/id_space.c","line":292,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Done"},{"file":"usr/src/common/idspace/id_space.c","line":321,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Sleeping allocations should never fail.  If you want to handle ENOMEM in userspace, perhaps an assert in the alloc/create function would be appropriate."},{"file":"usr/src/common/idspace/id_space.c","line":321,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"I\u0027ve restructured this a little bit so the null-checks only happen in userspace."},{"file":"usr/src/common/idspace/id_space.c","line":354,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"not possessive here, maybe \u0027id_tree_t entities\u0027?"},{"file":"usr/src/common/idspace/id_space.c","line":354,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Done"},{"file":"usr/src/common/idspace/id_space.c","line":397,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I love the ASCII visuals here"},{"file":"usr/src/common/idspace/id_space.c","line":397,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"Don\u0027t thank me, thank the writers of the weenix vmem subsystem!"},{"file":"usr/src/common/idspace/id_space.c","line":669,"reviewer":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"message":"This comment is entirely wrong/misleading - please disregard."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/common/idspace/id_space.c","type":"MODIFIED","insertions":864,"deletions":-60},{"file":"usr/src/uts/common/sys/id_space.h","type":"MODIFIED","insertions":42,"deletions":-4}],"sizeInsertions":906,"sizeDeletions":-64},{"number":"3","revision":"a662268ae071ed448d0a1b8f21bd49be52a0a6b4","parents":["fc1b3c825992bc27440652673e53f8552575f46a"],"ref":"refs/changes/45/2445/3","uploader":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"createdOn":1503622051,"author":{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/common/idspace/id_space.c","line":63,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure this is correct? I don\u0027t see how MAXUID is on the scene here at all. Also, the range should be marked as exclusive on the far end."},{"file":"usr/src/common/idspace/id_space.c","line":64,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is this still true?"},{"file":"usr/src/common/idspace/id_space.c","line":103,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What\u0027s the maximal ID?"},{"file":"usr/src/common/idspace/id_space.c","line":191,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027m not sure what this notation is trying to convey."},{"file":"usr/src/common/idspace/id_space.c","line":197,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is it rare?"},{"file":"usr/src/common/idspace/id_space.c","line":200,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same comment on notation."},{"file":"usr/src/common/idspace/id_space.c","line":246,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Don\u0027t use register."},{"file":"usr/src/common/idspace/id_space.c","line":272,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Isn\u0027t this fls(3C)?"},{"file":"usr/src/common/idspace/id_space.c","line":279,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should VERIFY that the idt_root is NULL."},{"file":"usr/src/common/idspace/id_space.c","line":293,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we verify that there are no entries in the AVL list at this point?"},{"file":"usr/src/common/idspace/id_space.c","line":312,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Um. What are you trying to do here. Are you trying to satisfy the compiler? If so that really deserves a comment."},{"file":"usr/src/common/idspace/id_space.c","line":318,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why not just use the _zalloc version of the routines?"},{"file":"usr/src/common/idspace/id_space.c","line":335,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a way to do this iteratively so we don\u0027t end up in a large recursive call? We don\u0027t have as much kernel stack.\n\nI\u0027d also recommend setting the entries to NULL as you go."},{"file":"usr/src/common/idspace/id_space.c","line":354,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would probably use zalloc here. While you\u0027re initializing most members, you\u0027re not doing anything with the AVL members for example. While it\u0027s unlikely that they\u0027d be used uninitialized, I think it\u0027ll be safer to do something with them."},{"file":"usr/src/common/idspace/id_space.c","line":356,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same thing about compiler avoidance."},{"file":"usr/src/common/idspace/id_space.c","line":384,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would make sure to NULL out tp-\u003eidt_root before taking the next call."},{"file":"usr/src/common/idspace/id_space.c","line":402,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This looks wrong. One of these should return -1, the other should return 1."},{"file":"usr/src/common/idspace/id_space.c","line":421,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If these are invalid we should fail the creation in userland. It\u0027d be great if we could get there for the kernel, but that probably needs more work."},{"file":"usr/src/common/idspace/id_space.c","line":421,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I suspect the point of this is to make sure that we don\u0027t overflow the id_t with high. Given that it\u0027s defined to be an int through typedefs, shouldn\u0027t use something more appropriate here? Further, it looks like MAXUID is INT_MAX. Are you sure that adding one here won\u0027t underflow as it\u0027s not defined to be an unsigned type?"},{"file":"usr/src/common/idspace/id_space.c","line":424,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027ll continue my zalloc recommendations."},{"file":"usr/src/common/idspace/id_space.c","line":451,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why aren\u0027t you checking the return value?"},{"file":"usr/src/common/idspace/id_space.c","line":461,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please create a single id_space_create function that takes a boolean_t for sleeping or not. We shouldn\u0027t duplicate all this. All of the previous comments apply to this."},{"file":"usr/src/common/idspace/id_space.c","line":519,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"VERIFY0."},{"file":"usr/src/common/idspace/id_space.c","line":565,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See prior notes on this part of the ASSERT."},{"file":"usr/src/common/idspace/id_space.c","line":641,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Use NBBY."},{"file":"usr/src/common/idspace/id_space.c","line":652,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"ASSERT3U"},{"file":"usr/src/common/idspace/id_space.c","line":654,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"spaces around divide?"},{"file":"usr/src/common/idspace/id_space.c","line":665,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If you want all ffs in he value, please use the unsigned maximum value, not the signed negative value."},{"file":"usr/src/common/idspace/id_space.c","line":678,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure this should be a _signed_ value?"},{"file":"usr/src/common/idspace/id_space.c","line":708,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"NBBY"},{"file":"usr/src/common/idspace/id_space.c","line":709,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"unsigned"},{"file":"usr/src/common/idspace/id_space.c","line":769,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"index?"},{"file":"usr/src/common/idspace/id_space.c","line":792,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there any way to design it to avoid the stack allocations?"},{"file":"usr/src/common/idspace/id_space.c","line":798,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we be asserting / verifying that we hold the tree\u0027s lock here?"},{"file":"usr/src/common/idspace/id_space.c","line":808,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably worth making that unsigned.\n\nAlso, we should probably ASSERT/VERIFY that it\u0027s non-zero so we don\u0027t get a divide by zero."},{"file":"usr/src/common/idspace/id_space.c","line":808,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If ID_BRANCH_SHIFT * tree_levels is greater than 32, I suspect that might be undefined."},{"file":"usr/src/common/idspace/id_space.c","line":827,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there any way for this to be negative?"},{"file":"usr/src/common/idspace/id_space.c","line":837,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Would you mind commenting why this case is a failure? I\u0027m not 100% sure. You also don\u0027t need parens around it."},{"file":"usr/src/common/idspace/id_space.c","line":843,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Mind asserting with a comparison?"},{"file":"usr/src/common/idspace/id_space.c","line":853,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What stops or bounds us to make sure we don\u0027t overflow the stack with recursive calls? I wouldn\u0027t assume we\u0027ll get a tail call."},{"file":"usr/src/common/idspace/id_space.c","line":862,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing parens around return expression."},{"file":"usr/src/common/idspace/id_space.c","line":873,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What guarantees that this never overflows?"},{"file":"usr/src/common/idspace/id_space.c","line":881,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same question on overflow."},{"file":"usr/src/common/idspace/id_space.c","line":913,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Rather than keeping track of the path we took, should we have parent pointers? This may also help in debugging. That way if we blow up on some random tree entry, we can always find the way to the parent."},{"file":"usr/src/common/idspace/id_space.c","line":1010,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"ASSERT3U, here and elsewhere."},{"file":"usr/src/common/idspace/id_space.c","line":1169,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, why aren\u0027t we checking the return value here? If we free an unallocated ID, that\u0027s bad, right?"},{"file":"usr/src/uts/common/sys/id_space.h","line":38,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I don\u0027t think you need to include \u003csys/mutex.h\u003e. mutex(9F) and condvar(9F) only say you need sys/ksynch.h. Any reason you need include?"},{"file":"usr/src/uts/common/sys/id_space.h","line":41,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You want synch.h actually. thread.h includes it, but I don\u0027t think you want any of the thread specific stuff."},{"file":"usr/src/uts/common/sys/id_space.h","line":44,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"how did we come up with this number?"},{"file":"usr/src/uts/common/sys/id_space.h","line":45,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there some way that we can enforce this at compile time or otherwise? When you say sizeof (ulong_t) here, do you mean that the value must be larger than 4/8? I assume this is because of the division?"},{"file":"usr/src/uts/common/sys/id_space.h","line":47,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How did we come up with this number?"},{"file":"usr/src/uts/common/sys/id_space.h","line":48,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How did we come up with this number? It looks like it came from VMEM. But given that you\u0027re not using the following bytes, any reason not to round it up (the compiler is going to add padding anyways)."},{"file":"usr/src/uts/common/sys/id_space.h","line":51,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"NBBY is the macro to use here. (Number of bits in a byte).\n\nAlso, did you look at the bitset.h or bitmap.h implementations at all? Is there a reason neither of them work for what we need to do?"},{"file":"usr/src/uts/common/sys/id_space.h","line":60,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It\u0027d probably be useful to comment the other names as well."},{"file":"usr/src/uts/common/sys/id_space.h","line":66,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any particular reason we opted with an AVL over a list? It appears that we only ever walk the AVL tree by iterating over it like a list. If we\u0027re not using avl_find() maybe we should just use a list_t."},{"file":"usr/src/uts/common/sys/id_space.h","line":77,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I would make sure to leave the actual types opaque to consumers and only define the id_space_t as an opaque structure and instead have an implementation specific header. This way the actual implementation doesn\u0027t leak into ddi compliant modules since it\u0027s designed to be opaque."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/common/idspace/id_space.c","type":"MODIFIED","insertions":1054,"deletions":-67},{"file":"usr/src/uts/common/os/log_sysevent.c","type":"MODIFIED","insertions":13,"deletions":-15},{"file":"usr/src/uts/common/sys/id_space.h","type":"MODIFIED","insertions":46,"deletions":-4}],"sizeInsertions":1113,"sizeDeletions":-86}],"allReviewers":[{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},{"name":"Isaac Davis","email":"isaac.davis@joyent.com","username":"isaacdavis"},{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}]}