commit 3a935a0edd486656b8c4714a1641929c397475b0 (refs/changes/29/5529/3)
Author: Tim Foster <tim.foster@joyent.com>
Date:   2019-02-14T10:52:15+00:00 (8 months ago)
    
    TRITON-1146 convert sdc-hagfish-watcher to engbld framework

diff --git a/.gitignore b/.gitignore
index 0f12fd7..ddf817f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 /node_modules
 /tmp
+bits
 build
 docs/*.json
 docs/*.html
diff --git a/.gitmodules b/.gitmodules
index dbadc87..ed0c5c1 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -7,3 +7,6 @@
 [submodule "deps/jsstyle"]
 	path = deps/jsstyle
 	url = git://github.com/davepacheco/jsstyle.git
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Makefile b/Makefile
index 3c3a554..0dc9e74 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
@@ -47,13 +47,17 @@ CLEAN_FILES += \
 			node_modules \
 			downloads
 
-include ./tools/mk/Makefile.defs
-include ./tools/mk/Makefile.smf.defs
+ENGBLD_REQUIRE := $(shell git submodule update --init deps/eng)
+
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
+
+include ./deps/eng/tools/mk/Makefile.smf.defs
 
 NAME :=			hagfish-watcher
 RELEASE_TARBALL :=	$(NAME)-$(STAMP).tgz
 RELEASE_MANIFEST :=	$(NAME)-$(STAMP).manifest
-RELSTAGEDIR :=		/tmp/$(STAMP)
+RELSTAGEDIR :=		/tmp/$(NAME)-$(STAMP)
 
 #
 # Repo-specific targets
@@ -94,7 +98,7 @@ release: all deps docs $(SMF_MANIFESTS)
 	uuid -v4 > $(RELSTAGEDIR)/hagfish-watcher/image_uuid
 	json -f $(TOP)/package.json -e 'this.version += "-$(STAMP)"' \
 	    > $(RELSTAGEDIR)/hagfish-watcher/package.json
-	(cd $(RELSTAGEDIR) && $(TAR) -zcf $(TOP)/$(RELEASE_TARBALL) *)
+	(cd $(RELSTAGEDIR) && $(TAR) -I pigz -cf $(TOP)/$(RELEASE_TARBALL) *)
 	cat $(TOP)/manifest.tmpl | sed \
 		-e "s/UUID/$$(cat $(RELSTAGEDIR)/hagfish-watcher/image_uuid)/" \
 		-e "s/NAME/$$(json name < $(TOP)/package.json)/" \
@@ -109,13 +113,13 @@ release: all deps docs $(SMF_MANIFESTS)
 
 .PHONY: publish
 publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		@echo "error: 'BITS_DIR' must be set for 'publish' target"; \
+	@if [[ -z "$(ENGBLD_BITS_DIR)" ]]; then \
+		@echo "error: 'ENGBLD_BITS_DIR' must be set for 'publish' target"; \
 		exit 1; \
 	fi
-	mkdir -p $(BITS_DIR)/$(NAME)
-	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
-	cp $(TOP)/$(RELEASE_MANIFEST) $(BITS_DIR)/$(NAME)/$(RELEASE_MANIFEST)
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	cp $(TOP)/$(RELEASE_TARBALL) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
+	cp $(TOP)/$(RELEASE_MANIFEST) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_MANIFEST)
 
 .PHONY: dumpvar
 dumpvar:
@@ -125,6 +129,6 @@ dumpvar:
 	fi
 	@echo "$(VAR) is '$($(VAR))'"
 
-include ./tools/mk/Makefile.deps
-include ./tools/mk/Makefile.smf.targ
-include ./tools/mk/Makefile.targ
+include ./deps/eng/tools/mk/Makefile.deps
+include ./deps/eng/tools/mk/Makefile.smf.targ
+include ./deps/eng/tools/mk/Makefile.targ
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..7c472bc
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit 7c472bc495ba44ac4cdde0af50ff627021942524
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
deleted file mode 100644
index b135000..0000000
--- a/tools/jsl.web.conf
+++ /dev/null
@@ -1,137 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
-+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
-+unreferenced_argument        # argument declared but never referenced: {name}
-+unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
-+useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
-+always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define	JSON
-+define Math
-+define $
-+define XMLHttpRequest
-+define alert
-+define clearInterval
-+define clearTimeout
-+define confirm
-+define document
-+define setInterval
-+define setTimeout
-+define window
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
deleted file mode 100644
index 85139d7..0000000
--- a/tools/mk/Makefile.defs
+++ /dev/null
@@ -1,51 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
deleted file mode 100644
index 1cffbe7..0000000
--- a/tools/mk/Makefile.deps
+++ /dev/null
@@ -1,54 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.deps: Makefile for including common tools as dependencies
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
-#
-
-#
-# javascriptlint
-#
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-#
-# jsstyle
-#
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-#
-# restdown
-#
-RESTDOWN_EXEC	?= deps/restdown/bin/restdown
-RESTDOWN	?= python $(RESTDOWN_EXEC)
-$(RESTDOWN_EXEC): | deps/restdown/.git
-
-EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
deleted file mode 100644
index 9376841..0000000
--- a/tools/mk/Makefile.node.defs
+++ /dev/null
@@ -1,104 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.defs: Makefile for building and bundling your own Node.js.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates building and bundling your own copy of Node.js in
-# your repo.  All it does is define variables for node, node-waf, and npm for
-# you to use elsewhere in your Makefile and rules to build these tools when
-# needed.
-#
-# To use this facility, include "Makefile.node.defs", use the variables as
-# described below to define targets, and then include "Makefile.node.targ".
-#
-# There are two use cases addressed here:
-#
-# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
-#     install" and "node-waf configure build".  To facilitate this, this
-#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
-#     to invoke these commands during the build process.  You MUST NOT assume
-#     that these variables just evaluate to the filenames themselves, as they
-#     may have environment variable definitions and other things that prevent
-#     you from using them directly as a filename.  If you want that, see (2).
-#
-#     Wherever you use one of these variables, you MUST include a dependency on
-#     the corresponding *_EXEC variable as well, like so:
-#
-#	node_modules/restify: deps/restify $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#	node_modules/restify: deps/restify | $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     Otherwise, the underlying file will not get built.  We don't
-#     automatically build them as part of "all" because that approach is
-#     brittle.
-#
-# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
-#     specifying the path to node used for the start method of your service's
-#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
-#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
-#     files from the root of the workspace.  You MUST NOT use these variables
-#     to invoke these commands during the build process.  See (1) instead.
-#
-#     However, in order to work at runtime, you must build the tool as well.
-#     That is, if you use NODE_EXEC to specify the path to node, you must
-#     depend on NODE_EXEC somewhere. This usually happens anyway because you
-#     usually need them during the build process too, but if you don't then
-#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
-#     target.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
-#				(default: "--with-dtrace" on SmartOS; empty
-#				otherwise.)
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-
-BUILD		?= build
-NODE_INSTALL 	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL)
-
-NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
-
-ifeq ($(shell uname -s),SunOS)
-	NODE_CONFIG_FLAGS += 	--with-dtrace \
-				--openssl-libpath=/opt/local/lib \
-				--openssl-includes=/opt/local/include
-endif
-
-NODE_EXEC	= $(NODE_INSTALL)/bin/node
-NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
-NPM_EXEC	= $(NODE_INSTALL)/bin/npm
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_EXEC)
-NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
deleted file mode 100644
index abdc616..0000000
--- a/tools/mk/Makefile.node.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.targ: See Makefile.node.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-ifneq ($(shell uname -s),SunOS)
-NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
-endif
-
-ifeq ($(shell uname -s),SunOS)
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
-	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
-else
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	(mkdir -p $(BUILD) \
-		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
-		&& cd src-node \
-		&& git checkout $(NODE_PREBUILT_VERSION) \
-		&& ./configure $(NODE_CONFIG_FLAGS) \
-		&& $(MAKE) && $(MAKE) install)
-endif
-
-DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
-
-distclean::
-	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f7..0000000
--- a/tools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_deps.targ
deleted file mode 100644
index bb2ab4f..0000000
--- a/tools/mk/Makefile.node_deps.targ
+++ /dev/null
@@ -1,24 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
-
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index 5744489..0000000
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,153 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates downloading and bundling a prebuilt node.js
-# build (using the 'sdcnode' distro builds). This is an alternative to
-# the "Makefile.node.*" makefiles for *building* a node from source.
-#
-# Usage:
-#
-# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
-#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
-#   below.
-# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
-# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
-#   Makefile.
-# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
-#   or `$(NPM_EXEC)`. E.g.:
-#
-#		node_modules/restify: deps/restify $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-#   or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#		node_modules/restify: deps/restify | $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-# - Use `$(NPM)` or `$(NODE)` to use your node build.
-# - Include the "$(NODE_INSTALL)" tree in your release package.
-#
-#
-# When including this Makefile, you MUST also specify:
-#
-#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
-#				package to use. Typically this is one of the
-#				node version tags, e.g. "v0.6.18" but it
-#				can be any commitish.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
-#				can either be a *local directory* or *a
-#				URL* dir (with trailing '/') which serves
-#				Apache/Nginx dir listing HTML.
-#				(default: sdcnode master build dir on stuff)
-#
-#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
-#				configuration builds of node, e.g. say a
-#				build configured `--without-ssl`. These
-#				special configurations are given a tag, e.g.
-#				'gz', that is used in the filename. Optionally
-#				specify a tag name here.
-#				(default: empty)
-#
-#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
-#				from which to pull. Generally one should stick
-#				with the default.
-#				(default: master)
-#
-#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
-#				for an sdcnode build that you want to use (potential compat
-#				issues be damned), then set this to the UUID of the sdcnode
-#				build you want. See here for available build image uuids:
-#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#
-# Dev Notes:
-#
-# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
-# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
-# included to ensure an exact match with the build machine. This name (e.g.
-# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
-# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
-# downloaded and extracted into "NODE_INSTALL".
-#
-# The "*_EXEC" vars are set to named symlinks, e.g.
-# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
-# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
-# node install.
-#
-# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
-# package naming.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
-
-
-BUILD		?= build
-NODE_INSTALL	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL) \
-	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-
-NODE_PREBUILT_BRANCH ?= master
-NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
-ifeq ($(NODE_PREBUILT_TAG),)
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
-else
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
-endif
-NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
-NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
-ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
-	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
-	endif
-else
-	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
-	endif
-endif
-ifeq ($(NODE_PREBUILT_TARBALL),)
-	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
-endif
-
-
-# Prebuild-specific paths for the "*_EXEC" vars to ensure that
-# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
-# choice changes) causes a install of the new node.
-NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
-NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
-NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
-NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
deleted file mode 100644
index 6877333..0000000
--- a/tools/mk/Makefile.node_prebuilt.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
-# build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-
-
-NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
-
-
-# TODO: remove this limitation
-# Limitation: currently presuming that the NODE_INSTALL basename is
-# 'node' and that sdcnode tarballs have a 'node' top-level dir.
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
-		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
-	rm -rf $(NODE_INSTALL) \
-		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-	mkdir -p $(shell dirname $(NODE_INSTALL))
-	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
-		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
-		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
-	else \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
-	fi
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.smf.defs b/tools/mk/Makefile.smf.defs
deleted file mode 100644
index b988bbe..0000000
--- a/tools/mk/Makefile.smf.defs
+++ /dev/null
@@ -1,40 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.defs: common targets for SMF manifests
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile uses the following definitions:
-#
-#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
-#				substitutions will be made on these files:
-#
-#		@@NODE@@	path to installed node
-#
-# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
-# It also updates the "check" target to check the XML syntax of all manifests,
-# generated or otherwise.
-#
-# To use this file, be sure to also include Makefile.smf.targ after defining
-# targets.
-#
-
-SED 		?= sed
-SMF_DTD		?= tools/service_bundle.dtd.1
-XMLLINT		?= xmllint --noout
-
-SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
-CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
deleted file mode 100644
index f78de96..0000000
--- a/tools/mk/Makefile.smf.targ
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.targ: see Makefile.smf.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-.PHONY: check-manifests
-check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
-
-%.smfchk: %
-	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
-
-check:: check-manifests
-
-$(SMF_MANIFESTS): %: %.in
-	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
deleted file mode 100644
index 16b15aa..0000000
--- a/tools/mk/Makefile.targ
+++ /dev/null
@@ -1,318 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.targ: common targets.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile defines several useful targets and rules. You can use it by
-# including it from a Makefile that specifies some of the variables below.
-#
-# Targets defined in this Makefile:
-#
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
-#
-#	clean	Removes built files
-#
-#	docs	Builds restdown documentation in docs/
-#
-#	prepush	Depends on "check" and "test"
-#
-#	test	Does nothing (you should override this)
-#
-#	xref	Generates cscope (source cross-reference index)
-#
-# For details on what these targets are supposed to do, see the Joyent
-# Engineering Guide.
-#
-# To make use of these targets, you'll need to set some of these variables. Any
-# variables left unset will simply not be used.
-#
-#	BASH_FILES	Bash scripts to check for syntax
-#			(paths relative to top-level Makefile)
-#
-#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
-#			that files generated by targets in this Makefile are
-#			automatically included in CLEAN_FILES.  These include
-#			restdown-generated HTML and JSON files.
-#
-#	DOC_FILES	Restdown (documentation source) files. These are
-#			assumed to be contained in "docs/", and must NOT
-#			contain the "docs/" prefix.
-#
-#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
-#	JSL_CONF_WEB	(paths relative to top-level Makefile)
-#
-#			Node.js and Web configuration files are separate
-#			because you'll usually want different global variable
-#			configurations.  If no file is specified, none is given
-#			to jsl, which causes it to use a default configuration,
-#			which probably isn't what you want.
-#
-#	JSL_FILES_NODE	JavaScript files to check with Node config file.
-#	JSL_FILES_WEB	JavaScript files to check with Web config file.
-#
-#	JSON_FILES	JSON files to be validated
-#
-#	JSSTYLE_FILES	JavaScript files to be style-checked
-#
-# You can also override these variables:
-#
-#	BASH		Path to bash (default: "bash")
-#
-#	CSCOPE_DIRS	Directories to search for source files for the cscope
-#			index. (default: ".")
-#
-#	JSL		Path to JavaScriptLint (default: "jsl")
-#
-#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
-#	JSL_FLAGS_WEB
-#	JSL_FLAGS
-#
-#	JSON		Path to json tool (default: "json")
-#
-#	JSSTYLE		Path to jsstyle (default: "jsstyle")
-#
-#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
-#
-#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
-#			If you want to use, say, '.restdown' instead, then set
-#			'RESTDOWN_EXT=.restdown' in your Makefile.
-#
-
-#
-# Defaults for the various tools we use.
-#
-BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
-CP		?= cp
-CSCOPE		?= cscope
-CSCOPE_DIRS	?= .
-JSL		?= jsl
-JSON		?= json
-JSSTYLE		?= jsstyle
-MKDIR		?= mkdir -p
-MV		?= mv
-RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .md
-RMTREE		?= rm -rf
-JSL_FLAGS  	?= --nologo --nosummary
-
-ifeq ($(shell uname -s),SunOS)
-	TAR	?= gtar
-else
-	TAR	?= tar
-endif
-
-
-#
-# Defaults for other fixed values.
-#
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
-DOC_BUILD	= $(BUILD)/docs/public
-
-#
-# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
-#
-ifneq ($(origin JSL_CONF_NODE), undefined)
-	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
-endif
-
-ifneq ($(origin JSL_CONF_WEB), undefined)
-	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
-endif
-
-#
-# Targets. For descriptions on what these are supposed to do, see the
-# Joyent Engineering Guide.
-#
-
-#
-# Instruct make to keep around temporary files. We have rules below that
-# automatically update git submodules as needed, but they employ a deps/*/.git
-# temporary file. Without this directive, make tries to remove these .git
-# directories after the build has completed.
-#
-.SECONDARY: $($(wildcard deps/*):%=%/.git)
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# These recipes make heavy use of dynamically-created phony targets. The parent
-# Makefile defines a list of input files like BASH_FILES. We then say that each
-# of these files depends on a fake target called filename.bashchk, and then we
-# define a pattern rule for those targets that runs bash in check-syntax-only
-# mode. This mechanism has the nice properties that if you specify zero files,
-# the rule becomes a noop (unlike a single rule to check all bash files, which
-# would invoke bash with zero files), and you can check individual files from
-# the command line with "make filename.bashchk".
-#
-.PHONY: check-bash
-check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
-
-%.bashchk: %
-	$(BASH) -n $^
-
-%.bashstyle: %
-	$(BASHSTYLE) $^
-
-.PHONY: check-json
-check-json: $(JSON_FILES:%=%.jsonchk)
-
-%.jsonchk: %
-	$(JSON) --validate -f $^
-
-#
-# The above approach can be slow when there are many files to check because it
-# requires that "make" invoke the check tool once for each file, rather than
-# passing in several files at once.  For the JavaScript check targets, we define
-# a variable for the target itself *only if* the list of input files is
-# non-empty.  This avoids invoking the tool if there are no files to check.
-#
-JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
-.PHONY: check-jsl-node
-check-jsl-node: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
-.PHONY: check-jsl-web
-check-jsl-web: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
-
-.PHONY: check-jsl
-check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
-
-JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
-
-.PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
-	@echo check ok
-
-.PHONY: clean
-clean::
-	-$(RMTREE) $(CLEAN_FILES)
-
-.PHONY: distclean
-distclean:: clean
-	-$(RMTREE) $(DISTCLEAN_FILES)
-
-CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
-CLEAN_FILES += $(CSCOPE_FILES)
-
-.PHONY: xref
-xref: cscope.files
-	$(CSCOPE) -bqR
-
-.PHONY: cscope.files
-cscope.files:
-	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
-	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
-
-#
-# The "docs" target is complicated because we do several things here:
-#
-#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
-#
-#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
-#        functions as a complete copy of the documentation that could be
-#        mirrored or served over HTTP.
-#
-#    (3) Then copy any directories and media from docs/media into
-#        $(DOC_BUILD)/media. This allows projects to include their own media,
-#        including files that will override same-named files provided by
-#        restdown.
-#
-# Step (3) is the surprisingly complex part: in order to do this, we need to
-# identify the subdirectories in docs/media, recreate them in
-# $(DOC_BUILD)/media, then do the same with the files.
-#
-DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
-DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
-DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
-
-DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
-DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
-DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
-
-#
-# Like the other targets, "docs" just depends on the final files we want to
-# create in $(DOC_BUILD), leveraging other targets and recipes to define how
-# to get there.
-#
-.PHONY: docs
-docs:							\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
-	$(DOC_MEDIA_FILES_BUILD)
-
-#
-# We keep the intermediate files so that the next build can see whether the
-# files in DOC_BUILD are up to date.
-#
-.PRECIOUS:					\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
-
-#
-# We do clean those intermediate files, as well as all of DOC_BUILD.
-#
-CLEAN_FILES +=					\
-	$(DOC_BUILD)				\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
-
-#
-# Before installing the files, we must make sure the directories exist. The |
-# syntax tells make that the dependency need only exist, not be up to date.
-# Otherwise, it might try to rebuild spuriously because the directory itself
-# appears out of date.
-#
-$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
-
-$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
-	$(CP) $< $@
-
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
-    $(EXTRA_DOC_DEPS)
-	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
-
-$(DOC_BUILD):
-	$(MKDIR) $@
-
-$(DOC_MEDIA_DIRS_BUILD):
-	$(MKDIR) $@
-
-#
-# The default "test" target does nothing. This should usually be overridden by
-# the parent Makefile. It's included here so we can define "prepush" without
-# requiring the repo to define "test".
-#
-.PHONY: test
-test:
-
-.PHONY: prepush
-prepush: check test
diff --git a/tools/runtests.in b/tools/runtests.in
deleted file mode 100644
index 2d72b6f..0000000
--- a/tools/runtests.in
+++ /dev/null
@@ -1,136 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Run the TODONAME tests.
-# Run `./runtests -h` for usage info.
-#
-
-if [ "$TRACE" != "" ]; then
-    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-
-#---- guard
-
-if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
-    cat <<EOF
-To run this test you must create the file:
-
-    /lib/sdc/.sdc-test-no-production-data
-
-after ensuring you have no production data on this SDC.
-EOF
-    exit 2
-fi
-
-
-
-#---- config
-
-NAME=TODONAME
-TOP=$(cd $(dirname $0)/../; pwd)
-
-
-
-#---- support functions
-
-function fatal
-{
-    echo "$(basename $0): fatal error: $*"
-    exit 1
-}
-
-function usage
-{
-    echo "Usage:"
-    echo "  runtests [OPTIONS...]"
-    echo ""
-    echo "Options:"
-    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
-}
-
-
-
-#---- mainline
-
-start_time=$(date +%s)
-
-# Options.
-opt_test_pattern=
-while getopts "hf:" opt
-do
-    case "$opt" in
-        h)
-            usage
-            exit 0
-            ;;
-        f)
-            opt_test_pattern=$OPTARG
-            ;;
-        *)
-            usage
-            exit 1
-            ;;
-    esac
-done
-
-OUTPUT_DIR=/var/tmp/${NAME}test
-echo "# Create output dir ($OUTPUT_DIR)."
-rm -rf $OUTPUT_DIR
-mkdir -p $OUTPUT_DIR
-
-
-
-#---- start tests
-
-# TODO
-# Project specific setup and test running goes here.
-# - TAP output should be redirected or tee'd to $OUTPUT_DIR/*.tap
-#   This is used (a) to summarize below and (b) for the Jenkins Job TAP
-#   parsing/reporting.
-# - If reasonable, use $opt_test_pattern to filter the set of test files run.
-#
-# Some examples:
-# - https://mo.joyent.com/amon/blob/master/test/runtests
-# - https://mo.joyent.com/smartos-live/blob/master/src/vm/runtests
-# TODO
-
-
-
-#---- summary
-
-echo ""
-echo "# test results:"
-
-end_time=$(date +%s)
-elapsed=$((${end_time} - ${start_time}))
-
-tests=$(grep "^# tests [0-9]" $OUTPUT_DIR/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-passed=$(grep "^# pass  [0-9]" $OUTPUT_DIR/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-[[ -z ${tests} ]] && tests=0
-[[ -z ${passed} ]] && passed=0
-fail=$((${tests} - ${passed}))
-
-echo "# Completed in ${elapsed} seconds."
-echo -e "# \033[32mPASS: ${passed} / ${tests}\033[39m"
-if [[ ${fail} -gt 0 ]]; then
-    echo -e "# \033[31mFAIL: ${fail} / ${tests}\033[39m"
-fi
-echo ""
-
-if [[ ${tests} != ${passed} ]]; then
-    exit 1
-fi
