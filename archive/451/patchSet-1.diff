From e83bdafbb829a3eea89d84cd92c995db2ed08ae0 Mon Sep 17 00:00:00 2001
From: Andrey Yatskov <andrey.yatskov@silvertreesystems.com>
Date: Tue, 30 Aug 2016 19:40:06 +0300
Subject: [PATCH] ADMINUI-2331 Support for viewing and update of service
 configurations

---
 less/services.less                        | 113 +++++++++++---
 less/vm.less                              |   1 -
 lib/adminui.js                            |  20 +--
 lib/services.js                           |  38 +++--
 www/js/components/pages/service/index.jsx | 170 ++++++++++++++++++++++
 www/js/components/pages/vm/metadata.jsx   |  43 +++---
 www/js/models/service.js                  |  14 +-
 www/js/router.js                          |  10 ++
 www/js/tpl/services-application.hbs       |  18 ---
 www/js/tpl/services-instance.hbs          |  18 ++-
 www/js/tpl/services-item.hbs              |   6 +-
 www/js/tpl/services.hbs                   |  37 ++++-
 www/js/views/services.js                  | 143 +++++++++++-------
 13 files changed, 474 insertions(+), 157 deletions(-)
 create mode 100644 www/js/components/pages/service/index.jsx
 delete mode 100644 www/js/tpl/services-application.hbs

diff --git a/less/services.less b/less/services.less
index b8f196ab..35e27352 100644
--- a/less/services.less
+++ b/less/services.less
@@ -5,37 +5,79 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
+@import "__vms-list";
+
 #page-services {
-  .application {
-    .info {
-      h4 {
-        color: #555;
-        text-transform: uppercase;
+  ul.service-filters {
+    padding: 20px;
+    li {
+      font-size: 12px;
+      display: block;
+      padding: 5px;
+      a:hover {
+        text-decoration: none;
+      }
+      .number-of-services {
+        font-weight: bold;
+        width: 22px;
+        text-align: right;
+        padding-right: 5px;
+        padding-top: 5px;
+        padding-bottom: 4px;
+        font-size: 9px;
+        background: #b8b8b8;
+        color: #fff;
+        line-height: 1;
+        display: inline-block;
+      }
+    }
+    li:hover {
+      cursor: pointer;
+    }
+    li.active {
+      background: #fff;
+      a {
+        color: #333;
       }
     }
-    margin-bottom: 1em;
-    clear: both;
-    overflow: hidden;
   }
   .services {
     .service-name {
       .widget-header;
-      font-size: 12px;
-      padding: 5px 10px;
+      padding: 6px;
+      .service-type {
+        width: 60px;
+        margin: 0 10px;
+        display: inline-block;
+        background-color: @gray-light;
+        font-size: 12px;
+        color: #fff;
+        text-align: center;
+        text-transform: uppercase;
+      }
     }
   }
-  .service+.service { margin-top: 1em;}
   .instance {
+    a {color: #0098b2; cursor: pointer;}
     .widget-content;
     font-size: 12px;
-    padding: 8px;
-    .state { color: @state-danger-text; }
-    .state.running { color: @state-success-text; }
-    .alias, .uuid, .state, .ram { display: inline-block;}
-    .alias { color: @gray-light; width: 100px;}
+    padding: 1% 0 1% 15%;
+    .state {
+      width: 70px;
+      margin: 0 10px;
+      vertical-align: top;
+      text-align: center;
+      .__vms-list.state;
+    }
+    .alias, .uuid, .state, .ram {display: inline-block;}
+    .alias {
+      width: 280px;
+      margin-left: 30px;
+      vertical-align: top;
+    }
     .uuid {
       width: 280px;
       font-style: italic;
@@ -45,12 +87,39 @@
       font-weight: normal;
       line-height: 1.2;
     }
-    .state { width: 100px;}
-    a {
-      cursor: pointer;
-    }
-
     .ram { width: 100px;}
   }
 }
 
+#page-service {
+  h1 .type {
+    margin-top: -10px;
+    padding: 3px 4px;
+    color: #FFF;
+    font-weight: normal;
+    text-transform: uppercase;
+    font-size: 10px;
+    background: #00a8ff;
+  }
+  .overview {
+    .table;
+    th { padding-left: 13px; }
+    tbody {
+      th { width: 120px; }
+      td .mutate { visibility: hidden; }
+      td:hover .mutate { visibility: visible; }
+      td>*:first-child {
+        max-height: 360px;
+        width: 100%;
+        display: inline-block;
+        overflow: auto;
+        white-space: pre;
+      };
+    }
+    .uuid {
+      font-size: 8px;
+      margin-top: 4px;
+      color: @gray-light;
+    }
+  }
+}
diff --git a/less/vm.less b/less/vm.less
index 66a12fb8..4ed0d42f 100644
--- a/less/vm.less
+++ b/less/vm.less
@@ -93,7 +93,6 @@ section.fwrules {
     }
   }
 
-
   .overview {
     .table;
 
diff --git a/lib/adminui.js b/lib/adminui.js
index 1492d673..e66c2e1c 100644
--- a/lib/adminui.js
+++ b/lib/adminui.js
@@ -176,8 +176,6 @@ ADMINUI.prototype.createServer = function () {
         });
     });
 
-
-
     server.use(sdcClients.handler);
 
     server.use((function attachOtherClients(req, res, next) {
@@ -283,14 +281,12 @@ ADMINUI.prototype.createServer = function () {
         auth.requireRole('operators'),
         vms.del);
 
-
     var jobs = require('./jobs');
     server.get('/api/jobs', auth.requireAuth, jobs.listJobs);
     server.get('/api/jobs/:uuid', auth.requireAuth, jobs.getJob);
     server.get('/api/jobs/:uuid/info', auth.requireAuth, jobs.getJobInfo);
     server.post('/api/jobs/:uuid/cancel', auth.requireAuth, jobs.cancelJob);
 
-
     var images = require('./images');
     server.patch('/api/images/:uuid',
         auth.requireAuth,
@@ -314,7 +310,6 @@ ADMINUI.prototype.createServer = function () {
         bodyParser,
         images.action);
 
-
     server.post('/api/images/:uuid/acl',
         auth.requireAuth,
         auth.requireRole('operators'),
@@ -322,9 +317,6 @@ ADMINUI.prototype.createServer = function () {
         bodyParser,
         images.aclAction);
 
-
-
-
     var packages = require('./packages');
     server.get('/api/packages', auth.requireAuth, packages.list);
     server.get('/api/packages/:uuid', auth.requireAuth, packages.get);
@@ -789,14 +781,17 @@ ADMINUI.prototype.createServer = function () {
         setUfds,
         users.deleteUser);
 
-
     var services = require('./services');
     server.get('/api/services', auth.requireAuth, services.listServices);
+    server.get('/api/services/:uuid', auth.requireAuth, services.getService);
     server.get('/api/applications', auth.requireAuth, services.listApplications);
     server.get('/api/instances', auth.requireAuth, services.listInstances);
-
-
-
+    server.post('/api/services/:uuid',
+        auth.requireAuth,
+        auth.requireRole('operators'),
+        resume,
+        bodyParser,
+        services.updateService);
 
     require('./api/manta').mount(server, [auth.requireAuth]);
     require('./api/page-vm').mount(server, [auth.requireAuth]);
@@ -806,7 +801,6 @@ ADMINUI.prototype.createServer = function () {
     require('./api/vm-stop').mount(server, [auth.requireAuth, auth.requireRole('operators'), resume, bodyParser]);
     require('./api/vm-metadata').mount(server, [auth.requireAuth, auth.requireRole('operators'), resume, bodyParser]);
 
-
     var amon = require('./amon');
     server.post('/api/amon/probes',
         auth.requireAuth,
diff --git a/lib/services.js b/lib/services.js
index 156fdc19..1e070ac5 100644
--- a/lib/services.js
+++ b/lib/services.js
@@ -12,45 +12,51 @@ module.exports = {
     listApplications: function (req, res, next) {
         req.sdc[req.dc].sapi.listApplications(req.query, function (err, obj) {
             if (err) {
-                req.log.fatal(err, 'Error retreiving applications');
+                req.log.error(err, 'Error retreiving applications');
                 return next(err);
-            } else {
-                res.send(obj);
-                return next();
             }
+            res.send(obj);
+            return next();
         });
     },
     listInstances: function (req, res, next) {
         req.sdc[req.dc].sapi.listInstances(req.query, function (err, obj) {
             if (err) {
-                req.log.fatal(err, 'Error retreiving instances');
+                req.log.error(err, 'Error retreiving instances');
                 return next(err);
-            } else {
-                res.send(obj);
-                return next();
             }
+            res.send(obj);
+            return next();
         });
     },
     listServices: function (req, res, next) {
         req.sdc[req.dc].sapi.listServices(req.query, function (err, services) {
             if (err) {
-                req.log.fatal(err, 'Error retrieving services');
+                req.log.error(err, 'Error retrieving services');
                 return next(err);
-            } else {
-                res.send(services);
-                return next();
             }
+            res.send(services);
+            return next();
         });
     },
     getService: function (req, res, next) {
         req.sdc[req.dc].sapi.getService(req.params.uuid, function (err, service) {
             if (err) {
-                req.log.fatal(err, 'Error retrieving service');
+                req.log.error(err, 'Error retrieving service');
                 return next(err);
-            } else {
-                res.send(service);
-                return next();
             }
+            res.send(service);
+            return next();
+        });
+    },
+    updateService: function (req, res, next) {
+        req.sdc[req.dc].sapi.updateService(req.params.uuid, req.body, function (err, service) {
+            if (err) {
+                req.log.error(err, 'Error updating service');
+                return next(err);
+            }
+            res.send(service);
+            return next();
         });
     }
 };
diff --git a/www/js/components/pages/service/index.jsx b/www/js/components/pages/service/index.jsx
new file mode 100644
index 00000000..3f3c85b9
--- /dev/null
+++ b/www/js/components/pages/service/index.jsx
@@ -0,0 +1,170 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+'use strict';
+
+var React = require('react');
+var adminui = require('../../../adminui');
+var _ = require('underscore');
+var ServiceModel = require('../../../models/service');
+
+var ErrorAlert = require('../../error-alert');
+var Metadata =  require('../vm/metadata');
+
+var ServicePage = React.createClass({
+    statics: {
+        sidebar: 'services',
+        url: function (props) {
+            return _.str.sprintf('/services/%s', props.uuid);
+        }
+    },
+    getInitialState: function () {
+        return {
+            loading: true
+        };
+    },
+    componentDidMount: function () {
+        var self = this;
+        var service = new ServiceModel({uuid: this.props.uuid});
+        service.fetch().done(function (model) {
+            self.setState({loading: false, service: model});
+        }).fail(function () {
+            self.setState({loading: false, notFound: true});
+        });
+    },
+    render: function () {
+        var state = this.state;
+        if (state.notFound) {
+            return <div id="page-service">
+                <div className="page-header">
+                    <h2>Service Not Found</h2>
+                </div>
+                <p>The Service with ID <code>{this.props.uuid}</code> could not be found.</p>
+            </div>;
+        }
+
+        if (state.loading) {
+            return <div id="page-service">
+                <div className="loading">
+                    <i className="fa fa-circle-o-notch fa-spin" /> Fetching Service
+                </div>
+            </div>;
+        }
+        var service = state.service;
+        var metadata = service.metadata || {};
+        var params = service.params;
+        var customerMetadata = params.customer_metadata || {};
+        var tags = params.tags || {};
+
+        return <div id="page-service">
+            <div className="page-header">
+                <h1>
+                    <span className="service-name">{service.name}</span>&nbsp;
+                    <small className="uuid selectable">{service.uuid}</small>&nbsp;
+                    <span className="type">{service.type}</span>
+                </h1>
+            </div>
+            {this.state.error && <ErrorAlert error={this.state.error} />}
+            <section className="params">
+                <div className="row">
+                    <div className="col-md-7">
+                        <div>
+                            <h3>Customer Metadata
+                                {adminui.user.role('operators') && state.editing !== 'customer_metadata' &&
+                                    <div className="actions">
+                                        <button onClick={this._handleEdit.bind(this, 'customer_metadata')} className="btn-link btn-xs edit-tags">
+                                            <i className="fa fa-pencil"></i> Edit Customer Metadata
+                                        </button>
+                                    </div>}
+                            </h3>
+                            <div className="tags-container">
+                                <Metadata
+                                    onSave={this._handleEditSave}
+                                    onCancel={this._handleEditCancel}
+                                    editing={state.editing === 'customer_metadata'}
+                                    metadata={customerMetadata} />
+                                </div>
+                        </div>
+                    </div>
+                    <div className="col-md-5">
+                        <h3>Tags
+                            {adminui.user.role('operators') && state.editing !== 'tags' &&
+                                <div className="actions">
+                                    <button onClick={this._handleEdit.bind(this, 'tags')} className="btn-link btn-xs edit-tags">
+                                        <i className="fa fa-pencil"></i> Edit Tags
+                                    </button>
+                                </div>}
+                        </h3>
+                        <div className="tags-container">
+                            <Metadata
+                                onSave={this._handleEditSave}
+                                onCancel={this._handleEditCancel}
+                                editing={state.editing === 'tags'}
+                                metadata={tags} />
+                        </div>
+                    </div>
+                </div>
+            </section>
+            <section className="metadata">
+                <div className="row">
+                    <div className="col-md-12">
+                        <h3>Metadata
+                            {adminui.user.role('operators') && state.editing !== 'metadata' &&
+                                <div className="actions">
+                                    <button onClick={this._handleEdit.bind(this, 'metadata')} className="btn-link btn-xs edit-internal-metadata">
+                                        <i className="fa fa-pencil"></i> Edit Metadata
+                                    </button>
+                                </div>}
+                        </h3>
+                        <div className="metadata-region">
+                            <Metadata
+                                onSave={this._handleEditSave}
+                                onCancel={this._handleEditCancel}
+                                permanentKeys={['SERVICE_DOMAIN', 'SERVICE_NAME', 'assets-ip', 'user-script', 'sapi-url']}
+                                editing={state.editing === 'metadata'}
+                                metadata={metadata} />
+                        </div>
+                    </div>
+                </div>
+            </section>
+        </div>;
+    },
+
+    _handleEditCancel: function () {
+        this.setState({editing: false});
+    },
+    _handleEdit: function (type) {
+        this.setState({editing: type});
+    },
+    _handleEditSave: function (data) {
+        var self = this;
+        var type = this.state.editing;
+        var updatedData;
+        if (type === 'metadata') {
+            updatedData = {metadata: data, action: 'replace'};
+        } else if (type === 'customer_metadata') {
+            updatedData = {params: {customer_metadata: data}}
+        } else if (type === 'tags') {
+            updatedData = {params: {tags: data}}
+        }
+        if (!updatedData) {
+            return self.setState({editing: false});
+        }
+        var service = new ServiceModel({uuid: this.props.uuid});
+        service.update(updatedData, function (error, service) {
+            if (error) {
+                return self.setState({editing: false, error: error});
+            }
+            self.setState({editing: false, service: service});
+        });
+    }
+});
+
+module.exports = ServicePage;
diff --git a/www/js/components/pages/vm/metadata.jsx b/www/js/components/pages/vm/metadata.jsx
index 8a6176d9..9a11fb6e 100644
--- a/www/js/components/pages/vm/metadata.jsx
+++ b/www/js/components/pages/vm/metadata.jsx
@@ -15,31 +15,39 @@
     propTypes: {
         onCancel: React.PropTypes.func.isRequired,
         onSave: React.PropTypes.func.isRequired,
+        permanentKeys: React.PropTypes.array,
         metadata: React.PropTypes.object.isRequired
     },
-    getInitialState: function() {
+    getInitialState: function () {
         return {};
     },
-    _onCancel: function(e) {
+    _onCancel: function () {
         this.props.onCancel();
     },
-    _onSave: function() {
+    _onSave: function () {
         var data = {};
+        var metadata = this.props.metadata;
         var $node = $(this.getDOMNode());
-        $node.find('tbody tr').each(function(index, tr) {
+        $node.find('tbody tr').each(function (index, tr) {
             var $tr = $(tr);
-            console.log($tr);
             var k = $tr.find('[name=key]').val();
             var v = $tr.find('[name=value]').val();
             if (k && v && k.length && v.length) {
                 data[k] = v;
             }
         });
-        console.log(data);
+        var permanentKeys = this.props.permanentKeys;
+        if (permanentKeys && permanentKeys.length) {
+            permanentKeys.forEach(function (key) {
+                if (metadata[key]) {
+                    data[key] = metadata[key];
+                }
+            });
+        }
         this.props.onSave(data);
     },
-    render: function() {
-        var metadata = Object.keys(this.props.metadata).map(function(key) {
+    render: function () {
+        var metadata = Object.keys(this.props.metadata).map(function (key) {
             return {
                 key: key,
                 value: this.props.metadata[key]
@@ -47,6 +55,7 @@
         }.bind(this));
 
         var editing = this.props.editing || false;
+        var permanentKeys = this.props.permanentKeys || [];
 
         if (!metadata.length && !editing) {
             return <div className="zero-state">No data to display.</div>;
@@ -62,30 +71,30 @@
 
                 <tbody className="unstyled">
                 {
-                    metadata.map(function(m) {
-                        return <tr key={m.key}>
+                    metadata.map(function (data) {
+                        var editable = editing && permanentKeys.indexOf(data.key) === -1;
+                        return <tr key={data.key}>
                             <td className="key">
                             {
-                                editing ?
-                                <input type="text" name="key" className="form-control" defaultValue={m.key} />
+                                editable ?
+                                <input type="text" name="key" className="form-control" defaultValue={data.key} />
                                 :
-                                <span className="value" type="text">{m.key}</span>
+                                <span className="value" type="text">{data.key}</span>
                             }
                             </td>
 
                             <td className="value">
                             {
-                                editing ?
-                                <textarea name="value" className="form-control value" defaultValue={String(m.value)}></textarea>
+                                editable ?
+                                <textarea name="value" className="form-control value" defaultValue={String(data.value)}></textarea>
                                 :
-                                <span className="value" type="text">{String(m.value)}</span>
+                                <span className="value" type="text">{String(data.value)}</span>
                             }
                             </td>
                         </tr>;
                     })
                 }
 
-
                 {
                     editing ?
                     <tr>
diff --git a/www/js/models/service.js b/www/js/models/service.js
index 41898cfa..6ff7457d 100644
--- a/www/js/models/service.js
+++ b/www/js/models/service.js
@@ -5,14 +5,24 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var Model = require('./model');
+var api = require('../request');
 
 var Service = Model.extend({
     idAttribute: 'uuid',
-    urlRoot: '/api/services'
+    urlRoot: '/api/services',
+    update: function (attrs, cb) {
+        var req = api.post(this.url()).send(attrs);
+        req.end(function (res) {
+            if (res.ok) {
+                return cb(null, res.body);
+            }
+            cb(res.body);
+        });
+    }
 });
 
 module.exports = Service;
diff --git a/www/js/router.js b/www/js/router.js
index f4dc51f4..d88defd0 100644
--- a/www/js/router.js
+++ b/www/js/router.js
@@ -28,6 +28,7 @@ var Components = {
     'alarm': require('./components/pages/alarm'),
     'alarms': require('./components/pages/alarms'),
     'vm': require('./components/pages/vm'),
+    'service': require('./components/pages/service'),
     'vms': require('./components/pages/vms'),
     'settings': require('./components/pages/settings'),
     'user': require('./components/pages/user'),
@@ -91,6 +92,7 @@ module.exports = Backbone.Marionette.AppRouter.extend({
         'image-import': 'showImageImport',
         'images': 'showImages',
         'images/:uuid(/)': 'showImage',
+        'services/:uuid(/)': 'showService',
         'jobs/:uuid(/)': 'showJob',
         'networks/:uuid(/)': 'showNetwork',
         'packages/:uuid(/)': 'showPackage',
@@ -555,6 +557,14 @@ module.exports = Backbone.Marionette.AppRouter.extend({
         }.bind(this));
     },
 
+    showService: function (uuid) {
+        this.authenticated().then(function () {
+            this.presentComponent('service', {
+                uuid: uuid
+            });
+        }.bind(this));
+    },
+
     showJob: function (uuid) {
         var self = this;
         this.authenticated().then(function () {
diff --git a/www/js/tpl/services-application.hbs b/www/js/tpl/services-application.hbs
deleted file mode 100644
index b2022f8e..00000000
--- a/www/js/tpl/services-application.hbs
+++ /dev/null
@@ -1,18 +0,0 @@
-<!--
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/.
--->
-
-<!--
-    Copyright (c) 2014, Joyent, Inc.
--->
-
-<div class="row">
-  <div class="info col-sm-3">
-    <h4>{{name}}</h4>
-    <span class="number-of-services"></span> Services<br>
-  </div>
-
-  <div class="services col-sm-9"></div>
-</div>
diff --git a/www/js/tpl/services-instance.hbs b/www/js/tpl/services-instance.hbs
index 40846017..1c24478a 100644
--- a/www/js/tpl/services-instance.hbs
+++ b/www/js/tpl/services-instance.hbs
@@ -5,16 +5,18 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2016, Joyent, Inc.
 -->
 
-<div class="alias">{{params.alias}}</div>
-<div class="uuid">
+<div class="state"></div>
+<div class="alias">
     {{#if vm}}
-    <a class="{{type}}">{{uuid}}</a>
-    {{else}}
-    {{uuid}} (agent)
+        <a class="vm">{{name}}</a>
     {{/if}}
+    <div class="uuid selectable">{{uuid}}</div>
 </div>
-<div class="state"></div>
-<div class="ram"></div>
+
+{{#if vm}}
+    <i class="fa fa-codepen fa-fw"></i>
+    <div class="ram"></div>
+{{/if}}
diff --git a/www/js/tpl/services-item.hbs b/www/js/tpl/services-item.hbs
index ce232494..47594385 100644
--- a/www/js/tpl/services-item.hbs
+++ b/www/js/tpl/services-item.hbs
@@ -5,8 +5,10 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2016, Joyent, Inc.
 -->
 
-<div class="service-name">{{name}}</div>
+<div class="service-name">
+    <div class="service-type">{{type}}</div><a class="service-link">{{name}}</a>
+</div>
 <div class="instances"></div>
diff --git a/www/js/tpl/services.hbs b/www/js/tpl/services.hbs
index 083a5d87..c8a6dddc 100644
--- a/www/js/tpl/services.hbs
+++ b/www/js/tpl/services.hbs
@@ -13,9 +13,38 @@
 </div>
 
 <ul class="nav nav-tabs">
-    <li><a data-service-type="all" href="#">All</a></li>
-    <li><a data-service-type="sdc" href="#">SDC</a></li>
-    <li><a data-service-type="manta" href="#">Manta</a></li>
+    <li data-section-type="all"><a>All</a></li>
+    <li data-section-type="sdc"><a>SDC</a></li>
+    <li data-section-type="manta"><a>Manta</a></li>
 </ul>
 
-<div class="applications"></div>
+<div class="row">
+    <div class="info col-sm-3">
+        <ul class="service-filters">
+            <li service-filter-type="all" class="active">
+                <a>
+                    <span class="number-of-services all"></span>
+                    <span class="name"> All </span>
+                </a>
+            </li>
+            <li service-filter-type="agent">
+                <a>
+                    <span class="number-of-services agent"></span>
+                    <span class="name"> Agents </span>
+                </a>
+            </li>
+            <li service-filter-type="vm">
+                <a>
+                    <span class="number-of-services vm"></span>
+                    <span class="name"> VMs </span>
+                </a>
+            </li>
+        </ul>
+    </div>
+    <div class="applications col-sm-9">
+        <div class="application">
+            <div class="services"></div>
+        </div>
+    </div>
+</div>
+
diff --git a/www/js/views/services.js b/www/js/views/services.js
index c0579b9a..6665b8c8 100644
--- a/www/js/views/services.js
+++ b/www/js/views/services.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var $ = require('jquery');
@@ -16,7 +16,12 @@ var Services = require('../models/services');
 var Model = require('../models/model');
 var Collection = require('../models/collection');
 var CollectionView = require('./collection');
-var DEFAULT_TYPE = 'all';
+
+var TYPES = {
+    default: 'all',
+    vm: 'vm',
+    agent: 'agent'
+};
 
 var Instance = Model.extend({
     idAttribute: 'uuid',
@@ -35,15 +40,18 @@ var Application = Model.extend({
 
 var Applications = Collection.extend({
     model: Application,
-    url: '/api/applications',
+    url: '/api/applications'
+});
+
+Services = Services.extend({
     filterByType: function (type) {
-        var applications = null;
-        if (type !== DEFAULT_TYPE) {
-            applications = this.filter(function (application) {
-                return application.attributes.name.toLowerCase() === type;
+        var services = null;
+        if (type !== TYPES.default) {
+            services = this.filter(function (service) {
+                return service.attributes.type.toLowerCase() === type;
             });
         }
-        return applications && new Applications(applications) || this;
+        return services && new this.constructor(services) || this;
     }
 });
 
@@ -62,11 +70,12 @@ var InstanceView = Backbone.Marionette.ItemView.extend({
         var data = this.model.toJSON();
         data.vm = data.type === 'vm';
         data.agent = data.type === 'agent';
+        data.name = data.params && data.params.alias || data.uuid;
         return data;
     },
     onRender: function () {
         var self = this;
-        if (this.model.get('type') === 'vm') {
+        if (this.model.get('type') === TYPES.vm) {
             $.get('/api/vms/' + this.model.get('uuid')).done(function (res) {
                 self.$('.state').addClass(res.state).html(res.state);
                 self.$('.ram').addClass(res.state).html(res.ram + ' MB');
@@ -81,90 +90,116 @@ var InstancesView = CollectionView.extend({
 
 var ServicesListItemView = Backbone.Marionette.ItemView.extend({
     template: require('../tpl/services-item.hbs'),
+    events: {
+        'click a.service-link': 'navigateToService'
+    },
     attributes: {class: 'service'},
     initialize: function () {
         this.instances = new Instances();
     },
+    navigateToService: function () {
+        adminui.router.showService(this.model.get('uuid'));
+    },
     onRender: function () {
         new InstancesView({
             el: this.$('.instances'),
             collection: this.instances
         });
+
         this.instances.params = {service_uuid: this.model.get('uuid')};
         this.instances.fetch({reset: true});
     }
 });
 
-var ServicesListView = CollectionView.extend({
-    itemView: ServicesListItemView
-});
-
-var NoApplicationsView = Backbone.Marionette.ItemView.extend({
+var NoServicesView = Backbone.Marionette.ItemView.extend({
     template: function () {
         return _.template('<div class="zero-state">No services available.</div>');
     }
 });
 
-var ApplicationsListView = CollectionView.extend({
-    itemView: Backbone.Marionette.ItemView.extend({
-        template: require('../tpl/services-application.hbs'),
-        attributes: {
-            'class': 'application'
-        },
-        initialize: function () {
-            this.services = new Services();
-        },
-        onRender: function () {
-            var self = this;
-            new ServicesListView({
-                el: this.$('.services'),
-                collection: this.services
-            });
-            this.services.params = {application_uuid: this.model.get('uuid')};
-            this.services.fetch({reset: true, success: function (res) {
-                self.$('.number-of-services').html(res.length);
-            }});
-        }
-    }),
-    emptyView: NoApplicationsView
+var ServicesListView = CollectionView.extend({
+    itemView: ServicesListItemView,
+    emptyView: NoServicesView
 });
 
 var View = Backbone.Marionette.ItemView.extend({
     id: 'page-services',
     template: require('../tpl/services.hbs'),
     events: {
-        'click a[data-service-type]': 'onChangeView'
+        'click li[data-section-type]': 'onChangeSection',
+        'click li[service-filter-type]': 'onChangeServiceFilter'
     },
     name: 'services',
     url: function () {
         return '/services';
     },
     initialize: function () {
+        this.services = new Services();
+        this.sectionServices = this.services;
         this.applications = new Applications();
-        this.type = DEFAULT_TYPE;
+        this.sectionType = TYPES.default;
+        this.filterType = TYPES.default;
+    },
+    makeActive: function (selector) {
+        this.$(selector).addClass('active').siblings().removeClass('active');
     },
-    makeActive: function (type) {
-        this.$('[data-service-type=' + type + ']').parent().addClass('active').siblings().removeClass('active');
+    onChangeSection: function (event) {
+        event.preventDefault();
+        var newType = event.currentTarget.getAttribute('data-section-type');
+        if (this.sectionType !== newType) {
+            var self = this;
+            var services;
+            this.sectionType = newType;
+            this.makeActive('[data-section-type=' + newType + ']');
+            if (newType !== TYPES.default) {
+                services = this.services.filter(function (service) {
+                    return self.applications[newType] && self.applications[newType] === service.attributes.application_uuid;
+                });
+            }
+            this.computeServicesCount(services || this.services);
+            this.sectionServices = services && new Services(services) || this.services;
+            var filterType = $('.service-filters .active').attr('service-filter-type');
+            this.servicesListView.collection = filterType === TYPES.default ? this.sectionServices :
+                this.sectionServices.filterByType(filterType);
+
+            this.servicesListView.render();
+        }
     },
-    onChangeView: function (e) {
-        e.preventDefault();
-        var newType = e.target.getAttribute('data-service-type');
-        if (this.type !== newType) {
-            this.type = newType;
-            this.makeActive(newType);
-            this.applicationsView.collection = this.applications.filterByType(newType);
-            this.applicationsView.render();
+    onChangeServiceFilter: function (event) {
+        event.preventDefault();
+        var filterType = event.currentTarget.getAttribute('service-filter-type');
+        if (filterType !== this.filterType) {
+            this.filterType = filterType;
+            this.makeActive('li[service-filter-type=' + filterType + ']');
+            this.servicesListView.collection = this.sectionServices.filterByType(filterType);
+            this.servicesListView.render();
         }
     },
+    computeServicesCount: function (services) {
+        var vmsCount = services.filter(function (service) {
+            var type = service.type || service.attributes.type;
+            return type === TYPES.vm;
+        }).length;
+
+        this.$('.number-of-services.vm').html(vmsCount);
+        this.$('.number-of-services.agent').html(services.length - vmsCount);
+        this.$('.number-of-services.all').html(services.length);
+    },
     onRender: function () {
+        var self = this;
         adminui.vent.trigger('settitle', 'services');
-        this.makeActive(DEFAULT_TYPE);
-
-        this.applicationsView = new ApplicationsListView({
-            el: this.$('.applications'),
-            collection: this.applications
+        this.makeActive('[data-section-type=' + TYPES.default + ']');
+        this.applications.fetch({reset: true}).then(function (applications) {
+            self.applications = {};
+            applications.forEach(function (application) {
+                self.applications[application.name] = application.uuid;
+            });
+        });
+        this.servicesListView = new ServicesListView({
+            el: this.$('.services'),
+            collection: this.services
         });
-        this.applications.fetch({reset: true});
+        this.services.fetch({reset: true}).then(this.computeServicesCount.bind(this));
     }
 });
 
-- 
2.21.0

