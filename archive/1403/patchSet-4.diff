commit 48e99bc2d8dc91acc3b85d9e900aad7baacd216a (refs/changes/03/1403/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-02-06T20:21:39+01:00 (2 years, 8 months ago)
    
    TOOLS-1645 sdcadm update procedure for HA-ready stateless services

diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index db38672..354ecda 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -50,6 +50,8 @@ NoOp.prototype.execute = function noOpExecute(options, cb) {
 var DownloadImages = require('./download-images').DownloadImages;
 var UpdateStatelessServicesV1 =
     require('./update-stateless-services-v1').UpdateStatelessServicesV1;
+var UpdateStatelessServicesV2 =
+    require('./update-stateless-services-v2').UpdateStatelessServicesV2;
 var UpdateSingleHeadnodeImgapi =
     require('./update-single-headnode-imgapi').UpdateSingleHeadnodeImgapi;
 var UpdateUFDSServiceV1 =
@@ -59,7 +61,6 @@ var UpdateSingleHNSapiV1 =
     require('./update-single-hn-sapi-v1').UpdateSingleHNSapiV1;
 var UpdateManateeV2 = require('./update-manatee-v2').UpdateManateeV2;
 var UpdateBinderV2 = require('./update-binder-v2').UpdateBinderV2;
-var UpdateMahiV2 = require('./update-mahi-v2').UpdateMahiV2;
 // --- Create service instance also from procedures:
 var CreateServiceInstanceV1 =
 require('./create-service-instance-v1').CreateServiceInstanceV1;
@@ -169,13 +170,11 @@ function coordinatePlan(opts, cb) {
          */
         function updateSimpleServices(_, next) {
             var simpleServices = ['adminui', 'amon', 'amonredis', 'assets',
-                'ca', 'cloudapi', 'cnapi', 'dhcpd', 'docker', 'fwapi',
-                'cmon',
+                'ca', 'cnapi', 'dhcpd', 'docker', 'fwapi',
                 'cns',
                 'manta',
-                'napi', 'portolan',
-                'papi',
-                'rabbitmq', 'redis', 'sdc', 'vmapi', 'workflow'];
+                'napi',
+                'rabbitmq', 'redis', 'sdc', 'vmapi'];
             var handle = [];
             var remaining = [];
             var currHostname = os.hostname();
@@ -241,6 +240,61 @@ function coordinatePlan(opts, cb) {
             next();
         },
 
+        function updateSimpleHAReadyServices(_, next) {
+            var haReadyServices = [
+                'cloudapi',
+                'cmon',
+                'mahi',
+                'nat',
+                'papi',
+                'portolan',
+                'workflow'
+            ];
+            var handle = [];
+            var remaining = [];
+            changes.forEach(function (change) {
+                if (change.type === 'update-instance' &&
+                    ~haReadyServices.indexOf(change.service.name))
+                {
+                    change.inst = change.instance;
+                    handle.push(change);
+                } else if ((change.type === 'update-service' ||
+                    change.type === 'rollback-service') &&
+                    ~haReadyServices.indexOf(change.service.name))
+                {
+                    var svcInsts = instsFromSvcName[change.service.name] || [];
+                    if (svcInsts.length === 0) {
+                        log.debug({
+                                numInsts: 0,
+                                svc: change.service.name
+                            }, 'UpdateStatelessServicesV2 update service ' +
+                            'with no instance');
+
+                        if (!opts.noVerbose) {
+                            progress('Note: There are no "%s" instances. ' +
+                                'Only the service configuration will be ' +
+                                'updated.', change.service.name);
+                        }
+                    } else if (svcInsts.length && svcInsts.length > 1) {
+                        change.insts = svcInsts;
+                    } else {
+                        change.inst = svcInsts[0];
+                    }
+                    handle.push(change);
+                } else {
+                    remaining.push(change);
+                }
+            });
+            if (handle.length) {
+                changes = remaining;
+                log.debug({changes: handle},
+                    'UpdateStatelessServicesV2 will handle %d change(s)',
+                    handle.length);
+                procs.push(new UpdateStatelessServicesV2({ changes: handle }));
+            }
+            next();
+        },
+
         function updateSingleHeadnodeImgapi(_, next) {
             var handle = [];
             var remaining = [];
@@ -570,40 +624,6 @@ function coordinatePlan(opts, cb) {
             next();
         },
 
-        function updateMahi(_, next) {
-            var handle = [];
-            var remaining = [];
-            changes.forEach(function (change) {
-                if (change.type === 'update-instance' &&
-                    change.service.name === 'mahi')
-                {
-                    change.inst = change.instance;
-                    handle.push(change);
-                } else if ((change.type === 'update-service' ||
-                    change.type === 'rollback-service') &&
-                    change.service.name === 'mahi')
-                {
-                    var svcInsts = instsFromSvcName[change.service.name] || [];
-                    if (svcInsts.length && svcInsts.length > 1) {
-                        change.insts = svcInsts;
-                    } else {
-                        change.inst = svcInsts[0];
-                    }
-                    handle.push(change);
-                } else {
-                    remaining.push(change);
-                }
-            });
-            if (handle.length) {
-                changes = remaining;
-                log.debug({changes: handle},
-                    'UpdateMahiV2 will handle %d change(s)',
-                    handle.length);
-                procs.push(new UpdateMahiV2({ changes: handle }));
-            }
-            next();
-        },
-
 
         /**
          * Create simple service instances. It's to say, do not create those
diff --git a/lib/procedures/update-mahi-v2.js b/lib/procedures/update-stateless-services-v2.js
similarity index 53%
rename from lib/procedures/update-mahi-v2.js
rename to lib/procedures/update-stateless-services-v2.js
index f203ca5..bdf3e17 100644
--- a/lib/procedures/update-mahi-v2.js
+++ b/lib/procedures/update-stateless-services-v2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -13,50 +13,64 @@ var sprintf = require('extsprintf').sprintf;
 var util = require('util');
 var vasync = require('vasync');
 
-var common = require('../common');
-var errors = require('../errors');
-
 var Procedure = require('./procedure').Procedure;
 var s = require('./shared');
+var common = require('../common');
+var errors = require('../errors');
 
 /**
- * Procedure for updating mahi service, HA.
+ * Procedure for updating a set of stateless SDC services.
+ *
+ * Limitations:
+ * - we only support the "stateless" easy-to-update services that don't require
+ *   any migrations, bootstrapping, etc.
  */
-function UpdateMahiV2(options) {
+function UpdateStatelessServicesV2(options) {
     assert.arrayOfObject(options.changes, 'options.changes');
     this.changes = options.changes;
 }
-util.inherits(UpdateMahiV2, Procedure);
-
-UpdateMahiV2.prototype.summarize = function ushiSummarize() {
-    if (this.changes[0].type === 'update-instance') {
-        return this.changes.map(function (ch) {
-            return sprintf('update instance "%s" (%s)\n' +
-                    'of service "%s" to image %s\n', ch.inst.instance,
-                    ch.inst.alias, ch.service.name, ch.image.uuid) +
-                common.indent(sprintf('(%s@%s)',
-                    ch.image.name, ch.image.version));
-        }).join('\n');
-    } else {
-        var word = (this.changes[0].type === 'rollback-service') ?
-            'rollback' : 'update';
-        var c0 = this.changes[0];
-        var img = c0.image;
-        var out = [sprintf('%s "%s" service to image %s', word,
-                        c0.service.name, img.uuid),
-                    common.indent(sprintf('(%s@%s)', img.name, img.version))];
-        if (c0.insts) {
-            out[0] += ':';
-            out = out.concat(c0.insts.map(function (inst) {
-                return common.indent(sprintf('instance "%s" (%s) in server %s',
-                    inst.zonename, inst.alias, inst.server));
-            }));
+util.inherits(UpdateStatelessServicesV2, Procedure);
+
+
+UpdateStatelessServicesV2.prototype.summarize = function ushiSummarize() {
+    var out = [];
+    this.changes.forEach(function (ch) {
+        if (ch.type === 'update-instance') {
+            out.push(sprintf('update instance "%s" (%s)\n' +
+                        'of service "%s" to image %s\n', ch.inst.instance,
+                        ch.inst.alias, ch.service.name, ch.image.uuid),
+                    common.indent(sprintf('(%s@%s)',
+                        ch.image.name, ch.image.version)));
+        } else {
+            var word = (ch.type === 'rollback-service') ?
+                'rollback' : 'update';
+            var img = ch.image;
+            var msg = sprintf('%s "%s" service to image %s\n',
+                        word, ch.service.name, img.uuid) +
+                    common.indent(sprintf('(%s@%s)', img.name, img.version));
+
+            if (ch.insts) {
+                msg += ':\n';
+                msg += ch.insts.map(function (inst) {
+                    return common.indent(sprintf(
+                        'instance "%s" (%s) in server %s',
+                        inst.zonename, inst.alias, inst.server));
+                }).join('\n');
+            } else if (ch.inst) {
+                msg += ':\n';
+                msg += common.indent(sprintf(
+                        'instance "%s" (%s) in server %s',
+                        ch.inst.zonename, ch.inst.alias, ch.inst.server));
+            }
+            out.push(msg);
         }
-        return out.join('\n');
-    }
+    });
+
+    return out.join('\n');
+
 };
 
-UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
+UpdateStatelessServicesV2.prototype.execute = function ushiExecute(opts, cb) {
     assert.object(opts, 'opts');
     assert.object(opts.sdcadm, 'opts.sdcadm');
     assert.object(opts.plan, 'opts.plan');
@@ -64,11 +78,12 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.wrkDir, 'opts.wrkDir');
     assert.func(cb, 'cb');
+
     var self = this;
     var progress = opts.progress;
     var rollback = opts.plan.rollback || false;
 
-    function updateMahi(change, nextSvc) {
+    function updateService(change, nextSvc) {
         var inst = change.inst;
 
         var arg = {
@@ -82,7 +97,7 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
 
         if ((change.insts && change.insts.length > 1) || change.HA) {
             arg.HA = true;
-        } else {
+        } else if (change.inst) {
             arg.tmpAlias = inst.alias + 'tmp';
         }
 
@@ -104,37 +119,51 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
 
         if (arg.HA) {
             change.insts.forEach(function (ins) {
+                if (change.service.params.delegate_dataset) {
+                    funcs.push(function (_, next) {
+                        s.ensureDelegateDataset({
+                            service: change.service,
+                            progress: progress,
+                            zonename: ins.zonename,
+                            log: opts.log,
+                            server: ins.server
+                        }, next);
+                    });
+                }
                 funcs.push(function (_, next) {
-                    s.ensureDelegateDataset({
+                    s.updateVmUserScriptRemote({
                         service: change.service,
                         progress: progress,
                         zonename: ins.zonename,
                         log: opts.log,
-                        server: ins.server
+                        server: ins.server,
+                        userScript: arg.userScript
                     }, next);
                 });
+            });
+        } else if (change.inst) {
+            if (change.service.params.delegate_dataset) {
                 funcs.push(function (_, next) {
-                    s.updateVmUserScriptRemote({
+                    s.ensureDelegateDataset({
                         service: change.service,
                         progress: progress,
-                        zonename: ins.zonename,
+                        zonename: inst.zonename,
                         log: opts.log,
-                        server: ins.server,
-                        userScript: arg.userScript
+                        server: inst.server
                     }, next);
                 });
-            });
-        } else {
+            }
+
             funcs.push(function (_, next) {
-                s.ensureDelegateDataset({
+                s.updateVmUserScriptRemote({
                     service: change.service,
                     progress: progress,
                     zonename: inst.zonename,
                     log: opts.log,
-                    server: inst.server
+                    server: inst.server,
+                    userScript: arg.userScript
                 }, next);
             });
-            funcs.push(s.updateVmUserScript);
         }
 
         funcs.push(s.updateSapiSvc);
@@ -142,7 +171,7 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
         if (arg.HA) {
             change.insts.forEach(function (ins) {
                 funcs = funcs.concat(
-                    function imgadmInstall(_, next) {
+                    function imgadmInstallForInstance(_, next) {
                         return s.imgadmInstallRemote({
                             progress: progress,
                             img: change.image,
@@ -150,7 +179,7 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
                             server: ins.server
                         }, next);
                     },
-                    function reprovisionInst(_, next) {
+                    function reprovisionInstance(_, next) {
                         s.reprovisionRemote({
                             server: ins.server,
                             img: change.image,
@@ -160,17 +189,40 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
                             sdcadm: opts.sdcadm
                         }, next);
                     },
-                    function waitForInstToBeUp(_, next) {
-                        progress('Wait (sleep) for %s instance %s to come up',
-                            ins.service, ins.zonename);
-                        setTimeout(next, 15 * 1000);
+                    function waitForInstanceToBeUp(_, next) {
+                        s.waitForInstToBeUp({
+                            opts: {
+                                progress: progress,
+                                sdcadm: opts.sdcadm,
+                                log: opts.log
+                            },
+                            change: {
+                                inst: ins
+                            }
+                        }, next);
                     }
                 );
             });
-        } else {
+        } else if (change.inst) {
             funcs = funcs.concat([
-                s.imgadmInstall,
-                s.reprovision,
+                function imgadmInstall(_, next) {
+                    return s.imgadmInstallRemote({
+                        progress: progress,
+                        img: change.image,
+                        log: opts.log,
+                        server: inst.server
+                    }, next);
+                },
+                function reprovisionInst(_, next) {
+                    s.reprovisionRemote({
+                        server: inst.server,
+                        img: change.image,
+                        zonename: inst.zonename,
+                        progress: progress,
+                        log: opts.log,
+                        sdcadm: opts.sdcadm
+                    }, next);
+                },
                 s.waitForInstToBeUp
             ]);
         }
@@ -192,7 +244,7 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
                     change.insts = [change.inst];
                 }
             }
-            return updateMahi(change, nextSvc);
+            return updateService(change, nextSvc);
         });
     }
 
@@ -201,9 +253,11 @@ UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
         func: checkServiceHA
     }, cb);
 };
+
+
 //---- exports
 
 module.exports = {
-    UpdateMahiV2: UpdateMahiV2
+    UpdateStatelessServicesV2: UpdateStatelessServicesV2
 };
 // vim: set softtabstop=4 shiftwidth=4:
