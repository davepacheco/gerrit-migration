From a5a8df2d5cb3bfe54bd9aabc9e75df7bee9e47fb Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 2 Feb 2017 17:59:45 +0100
Subject: [PATCH] TOOLS-1645 sdcadm update procedure for HA-ready stateless
 services

---
 lib/procedures/index.js                       | 110 ++++---
 lib/procedures/update-mahi-v2.js              | 209 -------------
 .../update-stateless-services-v2.js           | 277 ++++++++++++++++++
 3 files changed, 342 insertions(+), 254 deletions(-)
 delete mode 100644 lib/procedures/update-mahi-v2.js
 create mode 100644 lib/procedures/update-stateless-services-v2.js

diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 9e5c3b5..af08735 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -50,6 +50,8 @@ NoOp.prototype.execute = function noOpExecute(options, cb) {
 var DownloadImages = require('./download-images').DownloadImages;
 var UpdateStatelessServicesV1 =
     require('./update-stateless-services-v1').UpdateStatelessServicesV1;
+var UpdateStatelessServicesV2 =
+    require('./update-stateless-services-v2').UpdateStatelessServicesV2;
 var UpdateSingleHeadnodeImgapi =
     require('./update-single-headnode-imgapi').UpdateSingleHeadnodeImgapi;
 var UpdateUFDSServiceV1 =
@@ -59,7 +61,6 @@ var UpdateSingleHNSapiV1 =
     require('./update-single-hn-sapi-v1').UpdateSingleHNSapiV1;
 var UpdateManateeV2 = require('./update-manatee-v2').UpdateManateeV2;
 var UpdateBinderV2 = require('./update-binder-v2').UpdateBinderV2;
-var UpdateMahiV2 = require('./update-mahi-v2').UpdateMahiV2;
 // --- Create service instance also from procedures:
 var CreateServiceInstanceV1 =
 require('./create-service-instance-v1').CreateServiceInstanceV1;
@@ -169,13 +170,11 @@ function coordinatePlan(opts, cb) {
          */
         function updateSimpleServices(_, next) {
             var simpleServices = ['adminui', 'amon', 'amonredis', 'assets',
-                'ca', 'cloudapi', 'cnapi', 'dhcpd', 'docker', 'fwapi',
-                'cmon',
+                'ca', 'cnapi', 'dhcpd', 'docker', 'fwapi',
                 'cns',
                 'manta',
-                'napi', 'portolan',
-                'papi',
-                'rabbitmq', 'redis', 'sdc', 'vmapi', 'workflow'];
+                'napi',
+                'rabbitmq', 'redis', 'sdc', 'vmapi'];
             var handle = [];
             var remaining = [];
             var currHostname = os.hostname();
@@ -194,7 +193,7 @@ function coordinatePlan(opts, cb) {
                         log.debug({
                                 numInsts: 0,
                                 svc: change.service.name
-                            }, 'UpdateStatelessServicesV1 update service ' +
+                            }, 'UpdateStatelessServicesV2 update service ' +
                             'with no instance');
 
                         if (!opts.noVerbose) {
@@ -212,14 +211,14 @@ function coordinatePlan(opts, cb) {
                             log.debug({
                                     numInsts: svcInsts.length,
                                     svc: change.service.name
-                                }, 'UpdateStatelessServicesV1 skip change: ' +
+                                }, 'UpdateStatelessServicesV2 skip change: ' +
                                 'not 1 inst');
                         }
                     } else if (svcInsts[0].hostname !== currHostname) {
                         log.debug({
                                 svc: change.service.name,
                                 cn: svcInsts[0].server
-                            }, 'UpdateStatelessServicesV1 skip change: ' +
+                            }, 'UpdateStatelessServicesV2 skip change: ' +
                             'inst not on headnode');
                     } else {
                         change.inst = svcInsts[0];
@@ -232,15 +231,70 @@ function coordinatePlan(opts, cb) {
             if (handle.length) {
                 changes = remaining;
                 log.debug({changes: handle},
-                    'UpdateStatelessServicesV1 will handle %d change(s)',
+                    'UpdateStatelessServicesV2 will handle %d change(s)',
                     handle.length);
-                procs.push(new UpdateStatelessServicesV1({
+                procs.push(new UpdateStatelessServicesV2({
                     changes: handle
                 }));
             }
             next();
         },
 
+        function updateSimpleHAReadyServices(_, next) {
+            var haReadyServices = [
+                'cloudapi',
+                'cmon',
+                'mahi',
+                'nat',
+                'papi',
+                'portolan',
+                'workflow'
+            ];
+            var handle = [];
+            var remaining = [];
+            changes.forEach(function (change) {
+                if (change.type === 'update-instance' &&
+                    ~haReadyServices.indexOf(change.service.name))
+                {
+                    change.inst = change.instance;
+                    handle.push(change);
+                } else if ((change.type === 'update-service' ||
+                    change.type === 'rollback-service') &&
+                    ~haReadyServices.indexOf(change.service.name))
+                {
+                    var svcInsts = instsFromSvcName[change.service.name] || [];
+                    if (svcInsts.length === 0) {
+                        log.debug({
+                                numInsts: 0,
+                                svc: change.service.name
+                            }, 'UpdateStatelessServicesV2 update service ' +
+                            'with no instance');
+
+                        if (!opts.noVerbose) {
+                            progress('Note: There are no "%s" instances. ' +
+                                'Only the service configuration will be ' +
+                                'updated.', change.service.name);
+                        }
+                    } else if (svcInsts.length && svcInsts.length > 1) {
+                        change.insts = svcInsts;
+                    } else {
+                        change.inst = svcInsts[0];
+                    }
+                    handle.push(change);
+                } else {
+                    remaining.push(change);
+                }
+            });
+            if (handle.length) {
+                changes = remaining;
+                log.debug({changes: handle},
+                    'UpdateStatelessServicesV2 will handle %d change(s)',
+                    handle.length);
+                procs.push(new UpdateStatelessServicesV2({ changes: handle }));
+            }
+            next();
+        },
+
         function updateSingleHeadnodeImgapi(_, next) {
             var handle = [];
             var remaining = [];
@@ -570,40 +624,6 @@ function coordinatePlan(opts, cb) {
             next();
         },
 
-        function updateMahi(_, next) {
-            var handle = [];
-            var remaining = [];
-            changes.forEach(function (change) {
-                if (change.type === 'update-instance' &&
-                    change.service.name === 'mahi')
-                {
-                    change.inst = change.instance;
-                    handle.push(change);
-                } else if ((change.type === 'update-service' ||
-                    change.type === 'rollback-service') &&
-                    change.service.name === 'mahi')
-                {
-                    var svcInsts = instsFromSvcName[change.service.name] || [];
-                    if (svcInsts.length && svcInsts.length > 1) {
-                        change.insts = svcInsts;
-                    } else {
-                        change.inst = svcInsts[0];
-                    }
-                    handle.push(change);
-                } else {
-                    remaining.push(change);
-                }
-            });
-            if (handle.length) {
-                changes = remaining;
-                log.debug({changes: handle},
-                    'UpdateMahiV2 will handle %d change(s)',
-                    handle.length);
-                procs.push(new UpdateMahiV2({ changes: handle }));
-            }
-            next();
-        },
-
 
         /**
          * Create simple service instances. It's to say, do not create those
diff --git a/lib/procedures/update-mahi-v2.js b/lib/procedures/update-mahi-v2.js
deleted file mode 100644
index f203ca5..0000000
--- a/lib/procedures/update-mahi-v2.js
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2016 Joyent, Inc.
- */
-
-var assert = require('assert-plus');
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var vasync = require('vasync');
-
-var common = require('../common');
-var errors = require('../errors');
-
-var Procedure = require('./procedure').Procedure;
-var s = require('./shared');
-
-/**
- * Procedure for updating mahi service, HA.
- */
-function UpdateMahiV2(options) {
-    assert.arrayOfObject(options.changes, 'options.changes');
-    this.changes = options.changes;
-}
-util.inherits(UpdateMahiV2, Procedure);
-
-UpdateMahiV2.prototype.summarize = function ushiSummarize() {
-    if (this.changes[0].type === 'update-instance') {
-        return this.changes.map(function (ch) {
-            return sprintf('update instance "%s" (%s)\n' +
-                    'of service "%s" to image %s\n', ch.inst.instance,
-                    ch.inst.alias, ch.service.name, ch.image.uuid) +
-                common.indent(sprintf('(%s@%s)',
-                    ch.image.name, ch.image.version));
-        }).join('\n');
-    } else {
-        var word = (this.changes[0].type === 'rollback-service') ?
-            'rollback' : 'update';
-        var c0 = this.changes[0];
-        var img = c0.image;
-        var out = [sprintf('%s "%s" service to image %s', word,
-                        c0.service.name, img.uuid),
-                    common.indent(sprintf('(%s@%s)', img.name, img.version))];
-        if (c0.insts) {
-            out[0] += ':';
-            out = out.concat(c0.insts.map(function (inst) {
-                return common.indent(sprintf('instance "%s" (%s) in server %s',
-                    inst.zonename, inst.alias, inst.server));
-            }));
-        }
-        return out.join('\n');
-    }
-};
-
-UpdateMahiV2.prototype.execute = function ushiExecute(opts, cb) {
-    assert.object(opts, 'opts');
-    assert.object(opts.sdcadm, 'opts.sdcadm');
-    assert.object(opts.plan, 'opts.plan');
-    assert.object(opts.log, 'opts.log');
-    assert.func(opts.progress, 'opts.progress');
-    assert.string(opts.wrkDir, 'opts.wrkDir');
-    assert.func(cb, 'cb');
-    var self = this;
-    var progress = opts.progress;
-    var rollback = opts.plan.rollback || false;
-
-    function updateMahi(change, nextSvc) {
-        var inst = change.inst;
-
-        var arg = {
-            change: change,
-            opts: opts,
-            userScript: false,
-            HA: false,
-            tmpAlias: null,
-            tmpUUID: null
-        };
-
-        if ((change.insts && change.insts.length > 1) || change.HA) {
-            arg.HA = true;
-        } else {
-            arg.tmpAlias = inst.alias + 'tmp';
-        }
-
-        if (opts.plan.changes.length > 1) {
-            progress('');
-            progress('--- Updating %s ...', change.service.name);
-        }
-
-        var funcs = [];
-
-        if (rollback) {
-            funcs.push(s.getOldUserScript);
-        } else {
-            funcs.push(s.getUserScript);
-            funcs.push(s.writeOldUserScriptForRollback);
-        }
-
-        funcs.push(s.updateSvcUserScript);
-
-        if (arg.HA) {
-            change.insts.forEach(function (ins) {
-                funcs.push(function (_, next) {
-                    s.ensureDelegateDataset({
-                        service: change.service,
-                        progress: progress,
-                        zonename: ins.zonename,
-                        log: opts.log,
-                        server: ins.server
-                    }, next);
-                });
-                funcs.push(function (_, next) {
-                    s.updateVmUserScriptRemote({
-                        service: change.service,
-                        progress: progress,
-                        zonename: ins.zonename,
-                        log: opts.log,
-                        server: ins.server,
-                        userScript: arg.userScript
-                    }, next);
-                });
-            });
-        } else {
-            funcs.push(function (_, next) {
-                s.ensureDelegateDataset({
-                    service: change.service,
-                    progress: progress,
-                    zonename: inst.zonename,
-                    log: opts.log,
-                    server: inst.server
-                }, next);
-            });
-            funcs.push(s.updateVmUserScript);
-        }
-
-        funcs.push(s.updateSapiSvc);
-
-        if (arg.HA) {
-            change.insts.forEach(function (ins) {
-                funcs = funcs.concat(
-                    function imgadmInstall(_, next) {
-                        return s.imgadmInstallRemote({
-                            progress: progress,
-                            img: change.image,
-                            log: opts.log,
-                            server: ins.server
-                        }, next);
-                    },
-                    function reprovisionInst(_, next) {
-                        s.reprovisionRemote({
-                            server: ins.server,
-                            img: change.image,
-                            zonename: ins.zonename,
-                            progress: progress,
-                            log: opts.log,
-                            sdcadm: opts.sdcadm
-                        }, next);
-                    },
-                    function waitForInstToBeUp(_, next) {
-                        progress('Wait (sleep) for %s instance %s to come up',
-                            ins.service, ins.zonename);
-                        setTimeout(next, 15 * 1000);
-                    }
-                );
-            });
-        } else {
-            funcs = funcs.concat([
-                s.imgadmInstall,
-                s.reprovision,
-                s.waitForInstToBeUp
-            ]);
-        }
-        vasync.pipeline({funcs: funcs, arg: arg}, nextSvc);
-    }
-
-    // TOOLS-1465: when updating individual instances, need to double check if
-    // service is part or not of an HA setup
-    function checkServiceHA(change, nextSvc) {
-        opts.sdcadm.sapi.listInstances({
-            service_uuid: change.service.uuid
-        }, function (err, insts) {
-            if (err) {
-                return nextSvc(new errors.SDCClientError(err, 'SAPI'));
-            }
-            if (insts.length > 1) {
-                change.HA = true;
-                if (!change.insts) {
-                    change.insts = [change.inst];
-                }
-            }
-            return updateMahi(change, nextSvc);
-        });
-    }
-
-    vasync.forEachPipeline({
-        inputs: self.changes,
-        func: checkServiceHA
-    }, cb);
-};
-//---- exports
-
-module.exports = {
-    UpdateMahiV2: UpdateMahiV2
-};
-// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/procedures/update-stateless-services-v2.js b/lib/procedures/update-stateless-services-v2.js
new file mode 100644
index 0000000..c1a538a
--- /dev/null
+++ b/lib/procedures/update-stateless-services-v2.js
@@ -0,0 +1,277 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var sprintf = require('extsprintf').sprintf;
+var util = require('util');
+var vasync = require('vasync');
+
+var Procedure = require('./procedure').Procedure;
+var s = require('./shared');
+var common = require('../common');
+var errors = require('../errors');
+
+/**
+ * Procedure for updating a set of stateless SDC services.
+ *
+ * This procedure doesn't have the previous version limitations of only being
+ * able to update single service instances constrained to the Headnode.
+ *
+ * Limitations:
+ * - we only support the "stateless" easy-to-update services that don't require
+ *   any migrations, bootstrapping, etc.
+ */
+function UpdateStatelessServicesV2(options) {
+    assert.arrayOfObject(options.changes, 'options.changes');
+    this.changes = options.changes;
+}
+util.inherits(UpdateStatelessServicesV2, Procedure);
+
+
+UpdateStatelessServicesV2.prototype.summarize = function ussv2Summarize() {
+    var out = [];
+    this.changes.forEach(function (ch) {
+        if (ch.type === 'update-instance') {
+            out.push(sprintf('update instance "%s" (%s)\n' +
+                        'of service "%s" to image %s\n', ch.inst.instance,
+                        ch.inst.alias, ch.service.name, ch.image.uuid),
+                    common.indent(sprintf('(%s@%s)',
+                        ch.image.name, ch.image.version)));
+        } else {
+            var word = (ch.type === 'rollback-service') ?
+                'rollback' : 'update';
+            var img = ch.image;
+            var msg = sprintf('%s "%s" service to image %s\n',
+                        word, ch.service.name, img.uuid) +
+                    common.indent(sprintf('(%s@%s)', img.name, img.version));
+
+            if (ch.insts) {
+                msg += ':\n';
+                msg += ch.insts.map(function (inst) {
+                    return common.indent(sprintf(
+                        'instance "%s" (%s) on server %s',
+                        inst.zonename, inst.alias, inst.server));
+                }).join('\n');
+            } else if (ch.inst) {
+                msg += ':\n';
+                msg += common.indent(sprintf(
+                        'instance "%s" (%s) on server %s',
+                        ch.inst.zonename, ch.inst.alias, ch.inst.server));
+            }
+            out.push(msg);
+        }
+    });
+
+    return out.join('\n');
+
+};
+
+UpdateStatelessServicesV2.prototype.execute = function ussv2Execute(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.object(opts.plan, 'opts.plan');
+    assert.object(opts.log, 'opts.log');
+    assert.func(opts.progress, 'opts.progress');
+    assert.string(opts.wrkDir, 'opts.wrkDir');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var progress = opts.progress;
+    var rollback = opts.plan.rollback || false;
+
+    function updateService(change, nextSvc) {
+        var inst = change.inst;
+
+        var arg = {
+            change: change,
+            opts: opts,
+            userScript: false,
+            HA: false,
+            tmpUUID: null
+        };
+
+        if ((change.insts && change.insts.length > 1) || change.HA) {
+            arg.HA = true;
+        }
+
+        if (opts.plan.changes.length > 1) {
+            progress('');
+            progress('--- Updating %s ...', change.service.name);
+        }
+
+        var funcs = [];
+        if (change.service.metadata) {  // workaround for assets (TOOLS-695)
+            if (rollback) {
+                funcs.push(s.getOldUserScript);
+            } else {
+                funcs.push(s.getUserScript);
+                funcs.push(s.writeOldUserScriptForRollback);
+            }
+
+            funcs.push(s.updateSvcUserScript);
+        }
+
+        if (arg.HA) { // Assume assets will not be HA setup for now
+            change.insts.forEach(function (ins) {
+                if (change.service.params.delegate_dataset) {
+                    funcs.push(function (_, next) {
+                        s.ensureDelegateDataset({
+                            service: change.service,
+                            progress: progress,
+                            zonename: ins.zonename,
+                            log: opts.log,
+                            server: ins.server
+                        }, next);
+                    });
+                }
+                funcs.push(function (_, next) {
+                    s.updateVmUserScriptRemote({
+                        service: change.service,
+                        progress: progress,
+                        zonename: ins.zonename,
+                        log: opts.log,
+                        server: ins.server,
+                        userScript: arg.userScript
+                    }, next);
+                });
+            });
+        } else if (change.inst) {
+            /*
+             * If the service params require a delegate dataset, then ensure
+             * the instance has one.
+             *
+             * Also another workaround for assets, which has a limited hacked
+             * in 'service' object.
+             */
+            if (change.service.params) {
+                assert.optionalBool(change.service.params.delegate_dataset,
+                    'change.service.params.delegate_dataset');
+                if (change.service.params.delegate_dataset) {
+                    funcs.push(function (_, next) {
+                        s.ensureDelegateDataset({
+                            service: change.service,
+                            progress: progress,
+                            zonename: inst.zonename,
+                            log: opts.log,
+                            server: inst.server
+                        }, next);
+                    });
+                }
+            }
+
+            funcs.push(function (_, next) {
+                s.updateVmUserScriptRemote({
+                    service: change.service,
+                    progress: progress,
+                    zonename: inst.zonename,
+                    log: opts.log,
+                    server: inst.server,
+                    userScript: arg.userScript
+                }, next);
+            });
+        }
+
+        if (change.service.metadata) {  // workaround for assets (TOOLS-695)
+            funcs.push(s.updateSapiSvc);
+        }
+
+        if (arg.HA) {
+            change.insts.forEach(function (ins) {
+                funcs = funcs.concat(
+                    function imgadmInstallForInstance(_, next) {
+                        return s.imgadmInstallRemote({
+                            progress: progress,
+                            img: change.image,
+                            log: opts.log,
+                            server: ins.server
+                        }, next);
+                    },
+                    function reprovisionInstance(_, next) {
+                        s.reprovisionRemote({
+                            server: ins.server,
+                            img: change.image,
+                            zonename: ins.zonename,
+                            progress: progress,
+                            log: opts.log,
+                            sdcadm: opts.sdcadm
+                        }, next);
+                    },
+                    function waitForInstanceToBeUp(_, next) {
+                        s.waitForInstToBeUp({
+                            opts: {
+                                progress: progress,
+                                sdcadm: opts.sdcadm,
+                                log: opts.log
+                            },
+                            change: {
+                                inst: ins
+                            }
+                        }, next);
+                    }
+                );
+            });
+        } else if (change.inst) {
+            funcs = funcs.concat([
+                function imgadmInstall(_, next) {
+                    return s.imgadmInstallRemote({
+                        progress: progress,
+                        img: change.image,
+                        log: opts.log,
+                        server: inst.server
+                    }, next);
+                },
+                function reprovisionInst(_, next) {
+                    s.reprovisionRemote({
+                        server: inst.server,
+                        img: change.image,
+                        zonename: inst.zonename,
+                        progress: progress,
+                        log: opts.log,
+                        sdcadm: opts.sdcadm
+                    }, next);
+                },
+                s.waitForInstToBeUp
+            ]);
+        }
+        vasync.pipeline({funcs: funcs, arg: arg}, nextSvc);
+    }
+
+    // TOOLS-1465: when updating individual instances, need to double check if
+    // service is part or not of an HA setup
+    function checkServiceHA(change, nextSvc) {
+        opts.sdcadm.sapi.listInstances({
+            service_uuid: change.service.uuid
+        }, function (err, insts) {
+            if (err) {
+                return nextSvc(new errors.SDCClientError(err, 'SAPI'));
+            }
+            if (insts.length > 1) {
+                change.HA = true;
+                if (!change.insts) {
+                    change.insts = [change.inst];
+                }
+            }
+            return updateService(change, nextSvc);
+        });
+    }
+
+    vasync.forEachPipeline({
+        inputs: self.changes,
+        func: checkServiceHA
+    }, cb);
+};
+
+
+//---- exports
+
+module.exports = {
+    UpdateStatelessServicesV2: UpdateStatelessServicesV2
+};
+// vim: set softtabstop=4 shiftwidth=4:
-- 
2.21.0

