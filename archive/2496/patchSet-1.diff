From 085d09101343c079c28fcb116f8496dfe9b04c42 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 5 Sep 2017 12:56:07 -0700
Subject: [PATCH] TOOLS-1854 sdc-clients: add paging support to
 CNAPI.listServers

---
 CHANGES.md         |  5 +++
 lib/cnapi.js       | 98 ++++++++++++++++++++++++++++++++++++++++------
 lib/vmapi.js       |  4 +-
 package.json       |  2 +-
 test/cnapi.test.js | 24 +++++++++++-
 5 files changed, 118 insertions(+), 15 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 6d3b35c..18e3185 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 (nothing yet)
 
+## 10.3.0
+
+- TOOLS-1854: Update `CNAPI.listServers` to use limit/offset to return all
+  servers.
+
 ## 10.2.1
 
 - SAPI-290 getApplicationObjects returns undefined instance list for known services
diff --git a/lib/cnapi.js b/lib/cnapi.js
index ef196d6..7e527ca 100644
--- a/lib/cnapi.js
+++ b/lib/cnapi.js
@@ -197,13 +197,25 @@ CNAPI.prototype.setBootParams = function (uuid, params, options, callback) {
 };
 
 
-
 /**
- * Lists all servers
+ * Lists all servers.
  *
- * @param {Object} params : Filter params.
- * @param {Object} options : Request options.
- * @param {Function} callback : of the form f(err, res).
+ * By default this will page through results to list all servers. If
+ * `params.limit` and/or `params.offset` is provided, then paging is *not*
+ * done. I.e. it is assume the caller is attempting to manually do so.
+ *
+ * Supported call signature styles:
+ *      cnapi.listServers(function (err, servers) { ... });
+ *      cnapi.listServers(FILTER-PARAMS, function (err, servers) { ... });
+ *      cnapi.listServers(FILTER-PARAMS, REQ-OPTIONS,
+ *          function (err, servers) { ... });
+ *
+ * @param {Object} params - Query params to CNAPI's ListServers endpoint.
+ * @param {Object} options - Optional. Extra request options.
+ *      - {Object} options.log - Bunyan logger. If not given the CNAPI client's
+ *        `log` is used.
+ *      - {Object} options.headers
+ * @param {Function} callback - `function (err, servers)`.
  */
 CNAPI.prototype.listServers = function (params, options, callback) {
     if (typeof (params) === 'function') {
@@ -214,14 +226,78 @@ CNAPI.prototype.listServers = function (params, options, callback) {
         options = undefined;
     }
 
-    var opts = { path: '/servers', query: params };
-    if (options && options.headers) {
-        opts.headers = options.headers;
-    }
+    var self = this;
+    var reqOpts = { path: '/servers', query: params };
+    if (options) {
+        reqOpts.headers = options.headers;
+        reqOpts.log = options.log || this.log;
+    }
+
+    if (params.hasOwnProperty('limit') || params.hasOwnProperty('offset')) {
+        self.get(reqOpts, callback);
+    } else {
+        listAllServers(callback);
+    }
+
+    /*
+     * How we will page through the list of servers:
+     * Do the first call without setting `limit`. We infer that the default
+     * server-side `limit` is the number of servers returned in this call.
+     * Then we do subsequent page requests using that `limit` -- at least
+     * one more request. If that next request is empty, then we got all
+     * servers in the first request.
+     *
+     * Limitation: One downside is that we'll always do at least two requests.
+     * At least *currently*, a Triton DC typically has fewer servers than the
+     * typical default limit (1000).  I don't know of a better way without
+     * improving the CNAPI server. The CNAPI server could promise a minimum
+     * limit, then the client-side could start with that. The CNAPI server
+     * could return a header indicating if there are more results past the
+     * given offset and limit. Etc.
+     */
+    function listAllServers(next) {
+        var limit = 1;
+        var offset = 0;
+        var allServers = [];
+        var firstReq;
+        var firstRes;
+
+        var listPageOfServers = function () {
+            if (limit !== null) {
+                reqOpts.query.limit = limit;
+            }
+            reqOpts.query.offset = offset;
 
-    return this.get(opts, callback);
-};
+            self.get(reqOpts, function (err, servers, req, res) {
+                if (err) {
+                    next(err, null, req, res);
+                    return;
+                }
+
+                if (!firstReq) {
+                    firstReq = req;
+                    firstRes = res;
+                }
+
+                allServers = allServers.concat(servers);
 
+                if (limit === null) {
+                    limit = servers.length;
+                } else if (servers.length < limit) { // Done paging.
+                    // For backwards compat, we return the *first* req/res.
+                    next(null, allServers, firstReq, firstRes);
+                    return;
+                }
+
+                // Need to fetch another page of servers.
+                offset += servers.length;
+                listPageOfServers();
+            });
+        };
+
+        listPageOfServers();
+    }
+};
 
 
 /**
diff --git a/lib/vmapi.js b/lib/vmapi.js
index d0a5a54..5082f81 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -186,9 +186,9 @@ VMAPI.prototype.listVms = function (params, options, callback) {
     }
 
     // This function will execute at least 2 queries when it is not known how
-    // the remote VMAPI is returning the collection. If noLimit is set, then
+    // the remote VMAPI is returning the collection. If no limit is set, then
     // listVms would receive all VMs on the first call and then perform a second
-    // one to discover that all items have been returned. When noLimit is
+    // one to discover that all items have been returned. When limit is
     // undefined, listVms will get someVms.length VMs at a time
     function listAllVms(cb) {
         var limit = undefined;
diff --git a/package.json b/package.json
index 074c6b7..1e409f0 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "10.2.1",
+  "version": "10.3.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
diff --git a/test/cnapi.test.js b/test/cnapi.test.js
index 151eb1d..0d3d4c2 100644
--- a/test/cnapi.test.js
+++ b/test/cnapi.test.js
@@ -159,7 +159,29 @@ test('cnapi', function (tt) {
         t.end();
     });
 
-    tt.test(' list servers', function (t) {
+    tt.test(' list servers (paging)', function (t) {
+        cnapi.listServers(function (err, servers, req, res) {
+            t.ifError(err, err);
+            t.ok(Array.isArray(servers), 'got an array of servers');
+            t.ok(servers.length > 0, 'got at least one server');
+            t.ok(req, 'listServers returned the first req');
+            t.ok(res, 'listServers returned the first res');
+            t.end();
+        });
+    });
+
+    tt.test(' list servers (limit=1, one request)', function (t) {
+        cnapi.listServers({limit: 1}, function (err, servers, req, res) {
+            t.ifError(err, err);
+            t.ok(Array.isArray(servers), 'got an array of servers');
+            t.equal(servers.length, 1, 'limit=1 returned exactly one server');
+            t.ok(req, 'listServers returned the first req');
+            t.ok(res, 'listServers returned the first res');
+            t.end();
+        });
+    });
+
+    tt.test(' find server with which to test', function (t) {
         cnapi.listServers({ headnode: true }, function (err, servers) {
             t.ifError(err, err);
 
-- 
2.21.0

