commit 6b5ff7af7a197397ac60afd89cf9efcaa80ef965 (refs/changes/96/2496/3)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-09-05T16:33:11-07:00 (2 years, 1 month ago)
    
    TOOLS-1854 sdc-clients: add paging support to CNAPI.listServers
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Orlando Vazquez <orlando@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 6d3b35c..18e3185 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 (nothing yet)
 
+## 10.3.0
+
+- TOOLS-1854: Update `CNAPI.listServers` to use limit/offset to return all
+  servers.
+
 ## 10.2.1
 
 - SAPI-290 getApplicationObjects returns undefined instance list for known services
diff --git a/lib/cnapi.js b/lib/cnapi.js
index ef196d6..d829acd 100644
--- a/lib/cnapi.js
+++ b/lib/cnapi.js
@@ -197,13 +197,25 @@ CNAPI.prototype.setBootParams = function (uuid, params, options, callback) {
 };
 
 
-
 /**
- * Lists all servers
+ * Lists all servers.
  *
- * @param {Object} params : Filter params.
- * @param {Object} options : Request options.
- * @param {Function} callback : of the form f(err, res).
+ * By default this will page through results to list all servers. If
+ * `params.limit` and/or `params.offset` is provided, then paging is *not*
+ * done. I.e. it is assume the caller is attempting to manually do so.
+ *
+ * Supported call signature styles:
+ *      cnapi.listServers(function (err, servers) { ... });
+ *      cnapi.listServers(FILTER-PARAMS, function (err, servers) { ... });
+ *      cnapi.listServers(FILTER-PARAMS, REQ-OPTIONS,
+ *          function (err, servers) { ... });
+ *
+ * @param {Object} params - Query params to CNAPI's ListServers endpoint.
+ * @param {Object} options - Optional. Extra request options.
+ *      - {Object} options.log - Bunyan logger. If not given the CNAPI client's
+ *        `log` is used.
+ *      - {Object} options.headers
+ * @param {Function} callback - `function (err, servers)`.
  */
 CNAPI.prototype.listServers = function (params, options, callback) {
     if (typeof (params) === 'function') {
@@ -214,14 +226,63 @@ CNAPI.prototype.listServers = function (params, options, callback) {
         options = undefined;
     }
 
-    var opts = { path: '/servers', query: params };
-    if (options && options.headers) {
-        opts.headers = options.headers;
-    }
+    var self = this;
+    var reqOpts = { path: '/servers', query: params };
+    if (options) {
+        reqOpts.headers = options.headers;
+        reqOpts.log = options.log || this.log;
+    }
+
+    if (params.hasOwnProperty('limit') || params.hasOwnProperty('offset')) {
+        self.get(reqOpts, callback);
+    } else {
+        listAllServers(callback);
+    }
+
+    /*
+     * CNAPI ServerList promises a default and max limit of 1000, so we'll use
+     * that. If we get <1000 servers on a request, then we are done.
+     */
+    function listAllServers(next) {
+        var limit = 1000;
+        var offset = 0;
+        var allServers = [];
+        var firstReq;
+        var firstRes;
+
+        var listPageOfServers = function () {
+            if (limit !== null) {
+                reqOpts.query.limit = limit;
+            }
+            reqOpts.query.offset = offset;
 
-    return this.get(opts, callback);
-};
+            self.get(reqOpts, function (err, servers, req, res) {
+                if (err) {
+                    next(err, null, req, res);
+                    return;
+                }
+
+                if (!firstReq) {
+                    firstReq = req;
+                    firstRes = res;
+                }
+
+                allServers = allServers.concat(servers);
 
+                if (servers.length < limit) { // Done paging.
+                    // For backwards compat, we return the *first* req/res.
+                    next(null, allServers, firstReq, firstRes);
+                } else {
+                    // Need to fetch another page of servers.
+                    offset += servers.length;
+                    listPageOfServers();
+                }
+            });
+        };
+
+        listPageOfServers();
+    }
+};
 
 
 /**
diff --git a/lib/vmapi.js b/lib/vmapi.js
index d0a5a54..5082f81 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -186,9 +186,9 @@ VMAPI.prototype.listVms = function (params, options, callback) {
     }
 
     // This function will execute at least 2 queries when it is not known how
-    // the remote VMAPI is returning the collection. If noLimit is set, then
+    // the remote VMAPI is returning the collection. If no limit is set, then
     // listVms would receive all VMs on the first call and then perform a second
-    // one to discover that all items have been returned. When noLimit is
+    // one to discover that all items have been returned. When limit is
     // undefined, listVms will get someVms.length VMs at a time
     function listAllVms(cb) {
         var limit = undefined;
diff --git a/package.json b/package.json
index 074c6b7..350aaeb 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "10.2.1",
+  "version": "10.3.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
@@ -16,6 +16,7 @@
     "clone": "0.1.8",
     "lru-cache": "2.3.0",
     "libuuid": "0.2.1",
+    "lomstream": "1.1.0",
     "once": "^1.3.1",
     "restify-clients": "^1.4.1",
     "restify-errors": "^3.0.0",
diff --git a/test/cnapi.test.js b/test/cnapi.test.js
index 151eb1d..0d3d4c2 100644
--- a/test/cnapi.test.js
+++ b/test/cnapi.test.js
@@ -159,7 +159,29 @@ test('cnapi', function (tt) {
         t.end();
     });
 
-    tt.test(' list servers', function (t) {
+    tt.test(' list servers (paging)', function (t) {
+        cnapi.listServers(function (err, servers, req, res) {
+            t.ifError(err, err);
+            t.ok(Array.isArray(servers), 'got an array of servers');
+            t.ok(servers.length > 0, 'got at least one server');
+            t.ok(req, 'listServers returned the first req');
+            t.ok(res, 'listServers returned the first res');
+            t.end();
+        });
+    });
+
+    tt.test(' list servers (limit=1, one request)', function (t) {
+        cnapi.listServers({limit: 1}, function (err, servers, req, res) {
+            t.ifError(err, err);
+            t.ok(Array.isArray(servers), 'got an array of servers');
+            t.equal(servers.length, 1, 'limit=1 returned exactly one server');
+            t.ok(req, 'listServers returned the first req');
+            t.ok(res, 'listServers returned the first res');
+            t.end();
+        });
+    });
+
+    tt.test(' find server with which to test', function (t) {
         cnapi.listServers({ headnode: true }, function (err, servers) {
             t.ifError(err, err);
 
