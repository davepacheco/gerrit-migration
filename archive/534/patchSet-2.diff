commit bde0c4d3dd84f0966af45d40bb23382c7cb15ad5 (refs/changes/34/534/2)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2016-09-27T11:41:07-07:00 (3 years ago)
    
    DOCKER-939 docker build - symlink outside of build context caused crash

diff --git a/lib/build.js b/lib/build.js
index 9b39026..ad20474 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -160,7 +160,6 @@ function Builder(opts) {
     // Generated image layers during build, each entry is map of:
     //   { cmd: Object, image: Object }
     this.layers = [];
-    this.realpathCache = {}; // Used to cache realpath lookups.
     this.stepNo = -1; // Command step number.
     this.totalNumSteps = 0;  // Number of dockerfile commands to be run.
     this.cmdSet = false;     // If a CMD entry has been processed.
@@ -1258,7 +1257,17 @@ function copyInfo_contextPath()
     var src = path.join(this.builder.contextExtractDir, this.origPath);
 
     // Sanity check that path is still inside the context extract dir.
-    src = fs.realpathSync(src, this.builder.realpathCache);
+    try {
+        src = fs.realpathSync(src);
+    } catch (e) {
+        if (e.code !== 'ENOENT') {
+            throw e;
+        }
+        // The only case where this realpath should fail, is to a symlink that
+        // does not exist.
+        assert.ok(fs.lstatSync(src).isSymbolicLink(),
+            'failed realpath must be a symlink');
+    }
     var extDirWithSlash = this.builder.contextExtractDir + '/';
 
     var pathOk = (src.substr(0, extDirWithSlash.length) === extDirWithSlash)
@@ -1292,7 +1301,22 @@ function copyInfo_basename()
 lazyProperty(copyInfo.prototype, 'stat',
 function copyInfo_stat()
 {
-    return fs.statSync(this.contextPath);
+    return fs.lstatSync(this.contextPath);
+});
+
+// Return true if the contextPath is a symlink.
+lazyProperty(copyInfo.prototype, 'contextPathIsSymlink',
+function copyInfo_contextPathIsSymlink()
+{
+    return this.stat.isSymbolicLink();
+});
+
+// Return the linkname for this symlink.
+lazyProperty(copyInfo.prototype, 'contextPathSymlinkTarget',
+function copyInfo_contextPathSymlinkTarget()
+{
+    assert.ok(this.contextPathIsSymlink, 'Path must be a symlink');
+    return fs.readlinkSync(this.contextPath);
 });
 
 // Return true if the contextPath is a directory.
@@ -1334,6 +1358,11 @@ lazyProperty(copyInfo.prototype, 'checksum',
 function copyInfo_checksum()
 {
     assert.ok(!this.contextPathIsDirectory, '!contextPathIsDirectory');
+    if (this.contextPathIsSymlink) {
+        var hash = crypto.createHash('sha256');
+        hash.update('symlink:' + this.contextPathSymlinkTarget);
+        return hash.digest('hex');
+    }
     return utils.fileGetSha256Sync(this.contextPath);
 });
 
@@ -1929,7 +1958,8 @@ Builder.prototype.performCopy = function performCopy(cmd, copyInfos, callback) {
         // Special handling for ADD with a tar file.
         function detectAddTarFile(next) {
             if (cmd.name !== 'ADD' || copyInfos.length !== 1
-                || copyInfos[0].contextPathIsDirectory) {
+                || copyInfos[0].contextPathIsDirectory
+                || copyInfos[0].contextPathIsSymlink) {
 
                 next();
                 return;
diff --git a/package.json b/package.json
index 5bd984b..cb5d2ee 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker-build",
-  "version": "0.1.0",
+  "version": "0.1.1",
   "description": "Parses a Dockerfile and returns an array of commands.",
   "keywords": [
     "dockerfile",
diff --git a/test/test_build.js b/test/test_build.js
index 671433f..b23d337 100644
--- a/test/test_build.js
+++ b/test/test_build.js
@@ -186,6 +186,14 @@ function verifyFileContents(t, builder, filepath, contents) {
     }
 }
 
+function verifySymlink(t, builder, filepath, details) {
+    var fullpath = path.join(builder.containerRootDir, filepath);
+    if (fs.readlinkSync(fullpath) !== details.linkname) {
+        t.equal(fs.readlinkSync(fullpath), details.linkname,
+            'Link names for ' + filepath + ' do not match');
+    }
+}
+
 function verifyFilesystem(t, builder, containerPath, filesystem) {
     var entry;
     var fullpath = path.join(builder.containerRootDir, containerPath);
@@ -205,13 +213,16 @@ function verifyFilesystem(t, builder, containerPath, filesystem) {
         name = names[i];
         entry = filesystem[name];
         relPath = path.join(containerPath, name);
-        stat = fs.statSync(path.join(fullpath, name));
+        stat = fs.lstatSync(path.join(fullpath, name));
         if (stat.isDirectory()) {
             assert.object(entry, name);
             verifyFilesystem(t, builder, relPath, entry);
         } else if (stat.isFile()) {
             assert.string(entry, name);
             verifyFileContents(t, builder, relPath, entry);
+        } else if (stat.isSymbolicLink()) {
+            assert.object(entry, name);
+            verifySymlink(t, builder, relPath, entry);
         } else {
             t.fail('Unexpected file type at: ' + relPath);
         }
@@ -265,7 +276,11 @@ function createTarStream(fileAndContents) {
     var pack = tar.pack();
 
     Object.keys(fileAndContents).forEach(function (name) {
-        pack.entry({ name: name }, fileAndContents[name]);
+        if (typeof (fileAndContents[name]) === 'object') {
+            pack.entry(fileAndContents[name]);
+        } else {
+            pack.entry({ name: name }, fileAndContents[name]);
+        }
     });
 
     pack.finalize();
@@ -1261,6 +1276,41 @@ tape('symlinks', function (t) {
 });
 
 
+tape('symlinkMissing', function (t) {
+    var fileAndContents = {
+        'Dockerfile': [
+            'FROM busybox',
+            'ADD config /home/config/',
+            'ADD config/theMissingLink /myNewMissingLink'
+        ].join('\n'),
+        'config/theMissingLink': {
+            name: 'config/theMissingLink',
+            type: 'symlink',
+            linkname: '/missing/directory/path'
+        }
+    };
+
+    testBuildContents(t, fileAndContents, function (err, result) {
+        var builder = result.builder;
+        if (showError(t, err, builder)) {
+            return;
+        }
+
+        var expectedFilesystem = {
+            'home': {
+                'config': {
+                    'theMissingLink': fileAndContents['config/theMissingLink']
+                }
+            },
+            'myNewMissingLink': fileAndContents['config/theMissingLink']
+        };
+        verifyFilesystem(t, builder, '/', expectedFilesystem);
+
+        testEnd(t, builder);
+    });
+});
+
+
 tape('FROM must be first', function (t) {
     var fileAndContents = {
         'Dockerfile': 'MAINTAINER me\nFROM busybox\n'
