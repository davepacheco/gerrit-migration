From 9b69d4bca1ec612ef3b9b22d7bd7f8bbf4ce192e Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Fri, 17 May 2019 10:10:46 +0000
Subject: [PATCH] TOOLS-2178 eng check targets should reference resources in
 deps/eng/tools

---
 deps/eng        |   2 +-
 tools/bashstyle | 113 ------------------------------------------------
 2 files changed, 1 insertion(+), 114 deletions(-)
 delete mode 100755 tools/bashstyle

diff --git a/deps/eng b/deps/eng
index 126c0f0..d25b8fc 160000
--- a/deps/eng
+++ b/deps/eng
@@ -1 +1 @@
-Subproject commit 126c0f032b8bfddd45b14e8ee14e73e9798a013f
+Subproject commit d25b8fc60fb8c649559924870fe3aaf75e7421d5
diff --git a/tools/bashstyle b/tools/bashstyle
deleted file mode 100755
index e4b13e2..0000000
--- a/tools/bashstyle
+++ /dev/null
@@ -1,113 +0,0 @@
-#!/usr/bin/env node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * bashstyle: check bash scripts for adherence to style guidelines, including:
- *
- *    o no lines longer than 80 characters
- *    o file does not end with a blank line
- *
- * Future enhancements could include:
- *    o indents consistent with respect to tabs, spaces
- *    o indents consistently sized (all are some multiple of the smallest
- *      indent, which must be a tab or 4 or 8 spaces)
- */
-
-var mod_assert = require('assert');
-var mod_fs = require('fs');
-
-var nerrors = 0;
-
-main();
-process.exit(0);
-
-function main()
-{
-	var files = process.argv.slice(2);
-
-	if (files.length === 0) {
-		console.error('usage: %s file1 [...]',
-		    process.argv.slice(0, 2).join(' '));
-		process.exit(2);
-	}
-
-	files.forEach(checkFile);
-
-	if (nerrors != 0)
-		process.exit(1);
-}
-
-function checkFile(filename)
-{
-	var text = mod_fs.readFileSync(filename, 'utf-8');
-	var lines = text.split('\n');
-	var i;
-
-	mod_assert.ok(lines.length > 0);
-
-	/*
-	 * Expand tabs in each line and check for long lines.
-	 */
-	for (i = 1; i <= lines.length; i++) {
-		var line = expandTabs(lines[i - 1]);
-
-		if (line.length > 80) {
-			nerrors++;
-			console.log('%s: %d: line exceeds 80 columns',
-			    filename, i);
-		}
-	}
-
-	/*
-	 * No sane editor lets you save a file without a newline at the very end.
-	 */
-	if (lines[lines.length - 1].length !== 0) {
-		nerrors++;
-		console.log('%s: %d: file does not end with newline',
-			filename, lines.length);
-	}
-
-	/*
-	 * Since the file will always end with a newline, the last entry of
-	 * "lines" will actually be blank.
-	 */
-	if (lines.length > 1 && lines[lines.length - 2].length === 0) {
-		nerrors++;
-		console.log('%s: %d: file ends with a blank line',
-		    filename, lines.length - 1);
-	}
-}
-
-function expandTabs(text)
-{
-	var out = '';
-	var col = 0;
-	var j, k;
-
-	for (j = 0; j < text.length; j++) {
-		if (text[j] != '\t') {
-			out += text[j];
-			col++;
-			continue;
-		}
-
-		k = 8 - (col % 8);
-		col += k;
-
-		do {
-			out += ' ';
-		}  while (--k > 0);
-
-		col += k;
-	}
-
-	return (out);
-}
-- 
2.21.0

