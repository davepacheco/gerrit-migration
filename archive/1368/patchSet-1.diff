commit b6e288d29de85e150480affce5358c3bc65417f4 (refs/changes/68/1368/1)
Author: Joshua M. Clulow <jmc@joyent.com>
Date:   2017-01-28T06:56:01+00:00 (2 years, 8 months ago)
    
    MANTA-3129 manatee dump upload program should not be such a quitter

diff --git a/pg_dump/pg_backup_common.sh b/pg_dump/pg_backup_common.sh
index a7db55f..b0c8a8a 100644
--- a/pg_dump/pg_backup_common.sh
+++ b/pg_dump/pg_backup_common.sh
@@ -36,8 +36,6 @@ PG_DIR_SIZE=
 PG_PID=
 SHARD_NAME=
 PG_START_TIMEOUT=$2 || 10
-PG_START_MAX_TRIES=50
-PG_START_TRIES=0
 UPLOAD_SNAPSHOT=
 ZFS_CFG=/opt/smartdc/manatee/etc/snapshotter.json
 ZFS_SNAPSHOT=$1
@@ -121,20 +119,37 @@ function mount_data_set
 
 function wait_for_pg_start
 {
-    echo "waiting $PG_START_TIMEOUT seconds for PG to start"
-    PG_START_TRIES=$(($PG_START_TRIES + 1))
-    if [[ $PG_START_TRIES -gt $PG_START_MAX_TRIES ]]; then
-        fatal "PG start tries exceeded, did not start in time"
-    fi
-    sleep $PG_START_TIMEOUT
-    # check and see if pg is up.
-    sudo -u postgres psql -p 23456 moray -c 'select current_time'
-    if [[ $? -eq 0 ]]; then
-        echo "PG has started"
-    else
-        echo "PG not started yet, waiting again"
-        wait_for_pg_start
+    local start=$SECONDS
+
+    if [[ -z $PG_PID ]]; then
+        fatal "abort: PG_PID not set"
     fi
+
+    printf 'waiting for PostgreSQL to start...\n'
+    while :; do
+        #
+        # Make sure the instance of PostgreSQL that we started is still
+        # running:
+        #
+        if ! kill -0 "$PG_PID"; then
+            printf 'PostgreSQL (pid %d) appears to have stopped\n' "$PG_PID"
+            return 1
+        fi
+
+        #
+        # Check to see if PostgreSQL has started to the point where it
+        # can service a basic query.
+        #
+        if psql -U postgres -p 23456 moray -c 'SELECT current_time'; then
+            printf 'PostgreSQL has started (took ~%d seconds)\n' \
+                "$(( SECONDS - start ))"
+            return 0
+        fi
+
+        printf 'PostgreSQL has not yet started (~%d seconds); waiting...\n' \
+            "$(( SECONDS - start ))"
+        sleep "$PG_START_TIMEOUT"
+    done
 }
 
 # $1 optional, dictates whether to backup the moray DB
diff --git a/pg_dump/pg_custom_dump.sh b/pg_dump/pg_custom_dump.sh
index 6bfe6dc..dc20bf8 100755
--- a/pg_dump/pg_custom_dump.sh
+++ b/pg_dump/pg_custom_dump.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 # Postgres backup script. This script takes a snapshot of the current postgres
@@ -16,8 +16,6 @@
 source /opt/smartdc/manatee/pg_dump/pg_backup_common.sh
 
 PG_START_TIMEOUT=$2
-PG_START_MAX_TRIES=50
-PG_START_TRIES=0
 DATE=
 DATASET=
 DUMP_DATASET=
@@ -61,16 +59,10 @@ ZK_IP=$(cat $CFG | json -a zkCfg.servers.0.host)
 check_lock
 mount_data_set
 backup "DB"
-for tries in {1..5}; do
-    echo "upload attempt $tries"
-    upload_pg_dumps
-    if [[ $? -eq 0 ]]; then
-        echo "successfully finished uploading attempt $tries"
-        cleanup
-        exit 0
-    else
-        echo "attempt $tries failed"
-    fi
+while ! upload_pg_dumps; do
+    echo "uploading database dumps failed (will retry)"
+    sleep 15
 done
-
-fatal "unable to upload all pg dumps"
+echo "successfully uploaded database dumps"
+cleanup
+exit 0
diff --git a/pg_dump/pg_dump.sh b/pg_dump/pg_dump.sh
index 51ed290..09c98cf 100755
--- a/pg_dump/pg_dump.sh
+++ b/pg_dump/pg_dump.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 # Postgres backup script. This script takes a snapshot of the current postgres
@@ -16,8 +16,6 @@
 source /opt/smartdc/manatee/pg_dump/pg_backup_common.sh
 
 PG_START_TIMEOUT=$1
-PG_START_MAX_TRIES=50
-PG_START_TRIES=0
 DATASET=
 DUMP_DATASET=
 PG_DIR=
@@ -53,19 +51,13 @@ if [[ $? = '1' ]]; then
     check_lock
     mount_data_set
     backup "DB"
-    for tries in {1..5}; do
-        echo "upload attempt $tries"
-        upload_pg_dumps
-        if [[ $? -eq 0 ]]; then
-            echo "successfully finished uploading attempt $tries"
-            cleanup
-            exit 0
-        else
-            echo "attempt $tries failed"
-        fi
+    while ! upload_pg_dumps; do
+        echo "uploading database dumps failed (will retry)"
+        sleep 15
     done
-
-    fatal "unable to upload all pg dumps"
+    echo "successfully uploaded database dumps"
+    cleanup
+    exit 0
 else
     echo "not performing backup, not lowest peer in shard"
     exit 0
