commit fea05aefa10fca8b57bdce32033c5536d02097c7 (refs/changes/17/2917/4)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2018-08-01T16:20:58-06:00 (1 year, 2 months ago)
    
    joyent/node-manta#333 The --role-tag option does not work  for mput, muntar, mln, or mmkdir
    Reviewed by: Jared Morrow <jm@joyent.com>
    Reviewed by: Robert Bogart <Robert.bogart@joyent.com>
    Approved by: Robert Bogart <Robert.bogart@joyent.com>

diff --git a/bin/mln b/bin/mln
index e5dbfc0..08faced 100755
--- a/bin/mln
+++ b/bin/mln
@@ -62,9 +62,9 @@ function parseCmdOptions(opts, parser) {
 
     ifError(manta.assertPath(opts.path, true));
 
-    if (opts['role-tag'] && opts['role-tag'].length === 1) {
+    if (opts.role_tag && opts.role_tag.length === 1) {
         /* JSSTYLED */
-        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
+        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
     }
 
     return (opts);
@@ -97,8 +97,9 @@ function parseCmdOptions(opts, parser) {
         headers: options.headers || {}
     };
 
-    if (options['role-tag'])
-        headers.headers['role-tag'] = options['role-tag'].join(',');
+    if (options.role_tag) {
+        headers.headers['role-tag'] = options.role_tag.join(',');
+    }
 
     client.ln(options.source, options.path, headers, function (err) {
         ifError(err);
diff --git a/bin/mmkdir b/bin/mmkdir
index 96e85eb..e50cb4d 100755
--- a/bin/mmkdir
+++ b/bin/mmkdir
@@ -69,9 +69,9 @@ function ifError(err) {
  * @returns {Object} A possibly mutated version of the `opts` input parameter.
  */
 function parseCmdOptions(opts, parser) {
-    if (opts['role-tag'] && opts['role-tag'].length === 1) {
+    if (opts.role_tag && opts.role_tag.length === 1) {
         /* JSSTYLED */
-        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
+        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
     }
 
     if (opts._args.length < 1)
@@ -110,8 +110,9 @@ function parseCmdOptions(opts, parser) {
         headers: options.headers || {}
     };
 
-    if (options['role-tag'])
-        headers.headers['role-tag'] = options['role-tag'].join(',');
+    if (options.role_tag) {
+        headers.headers['role-tag'] = options.role_tag.join(',');
+    }
 
     function cb(err) {
         ifError(err);
diff --git a/bin/mput b/bin/mput
index 77ba19c..5d890cc 100755
--- a/bin/mput
+++ b/bin/mput
@@ -117,9 +117,9 @@ function parseCmdOptions(opts, parser) {
     ifError(manta.assertPath(opts._args[0], true));
     opts.path = manta.path(opts._args[0], true);
 
-    if (opts['role-tag'] && opts['role-tag'].length === 1) {
+    if (opts.role_tag && opts.role_tag.length === 1) {
         /* JSSTYLED */
-        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
+        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
     }
 
     return (opts);
@@ -155,8 +155,9 @@ function printEntry(obj) {
     var client = manta.createBinClient(options);
     var headers = options.headers || {};
 
-    if (options['role-tag'])
-        headers['role-tag'] = options['role-tag'].join(',');
+    if (options.role_tag) {
+        headers['role-tag'] = options.role_tag.join(',');
+    }
 
     var opts = {
         copies: options.copies,
diff --git a/bin/muntar b/bin/muntar
index aee3164..381ca36 100755
--- a/bin/muntar
+++ b/bin/muntar
@@ -110,9 +110,9 @@ function parseCmdOptions(opts, parser) {
     ifError(manta.assertPath(opts._args[0], true));
     opts.path = manta.path(opts._args[0], true);
 
-    if (opts['role-tag'] && opts['role-tag'].length === 1) {
+    if (opts.role_tag && opts.role_tag.length === 1) {
         /* JSSTYLED */
-        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
+        opts.role_tag = opts.role_tag[0].split(/\s*,\s*/);
     }
 
     return (opts);
@@ -234,8 +234,9 @@ function worker(client, tarball, callback, log) {
         e.pause();
 
         var headers = options.headers || {};
-        if (options['role-tag'])
-            headers['role-tag'] = options['role-tag'].join(',');
+        if (options.role_tag) {
+            headers.headers['role-tag'] = options.role_tag.join(',');
+        }
 
         var p = options.path + '/' + e.props.path;
         var o = {
diff --git a/test/mln.test.js b/test/mln.test.js
new file mode 100644
index 0000000..e12c5a6
--- /dev/null
+++ b/test/mln.test.js
@@ -0,0 +1,249 @@
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test the "mln" command.
+ */
+
+var assert = require('assert-plus');
+var forkExecWait = require('forkexec').forkExecWait;
+var fs = require('fs');
+var libuuid = require('uuid');
+var path = require('path');
+var vasync = require('vasync');
+var sprintf = require('extsprintf').sprintf;
+
+var logging = require('./lib/logging');
+
+
+var log = logging.createLogger();
+
+var BINDIR = path.resolve(__dirname, '../bin');
+var MGET = path.resolve(BINDIR, 'mget');
+var MMKDIR = path.resolve(BINDIR, 'mmkdir');
+var MPUT = path.resolve(BINDIR, 'mput');
+var MRM = path.resolve(BINDIR, 'mrm');
+var MINFO = path.resolve(BINDIR, 'minfo');
+var MLN = path.resolve(BINDIR, 'mln');
+
+var TMPDIR = process.env.TMPDIR || '/tmp';
+
+var TESTDIR = sprintf('/%s/stor/node-manta-test-mput-%s',
+    process.env.MANTA_USER || 'admin',
+    libuuid.v4().split('-')[0]);
+var TESTTREE = [
+    {
+        path: TESTDIR,
+        type: 'directory'
+    }
+];
+
+/*
+ * Create three regular UNIX text files (linefeed separated, with a terminating
+ * linefeed).
+ */
+var i;
+for (i = 1; i <= 3; i++) {
+    TESTTREE.push({
+        path: sprintf('%s/%02d.txt', TESTDIR, i),
+        type: 'object',
+        content: sprintf('%s\nfile (%02d)\n',
+            [ 'first', 'second', 'third' ][i - 1], i)
+    });
+}
+
+
+/*
+ * Create three data files that contain only a single character.  Of particular
+ * note is the lack of a trailing linefeed.
+ */
+for (i = 1; i <= 3; i++) {
+    TESTTREE.push({
+        path: sprintf('%s/%02d.data', TESTDIR, i),
+        type: 'object',
+        content: sprintf('%s', String.fromCharCode('a'.charCodeAt(0) + i - 1))
+    });
+}
+
+
+// ---- helper functions
+
+function test(name, testfunc) {
+    module.exports[name] = testfunc;
+}
+
+
+function unlinkIfExists(targ) {
+    try {
+        fs.unlinkSync(targ);
+    } catch (ex) {
+        if (ex.code === 'ENOENT')
+            return;
+
+        throw (ex);
+    }
+}
+
+
+// ---- tests
+
+test('setup: create test tree at ' + TESTDIR, function (t) {
+    var tmpFile = path.join(TMPDIR, 'node-manta-test-tmp-file-' + process.pid);
+
+    vasync.forEachPipeline({
+        inputs: TESTTREE,
+        func: function createTreeItem(item, next) {
+            log.trace({ item: item }, 'create test tree item');
+
+            switch (item.type) {
+            case 'directory':
+                forkExecWait({argv: [MMKDIR, '-p', item.path]}, next);
+                return;
+
+            case 'object':
+                /*
+                 * Would like a 'stdin' option to `forkExecWait`. For now I'll
+                 * quick hack with a local file. An alternative would be
+                 * to use the manta client.
+                 */
+                vasync.pipeline({ funcs: [
+                    function mkTmpFile(_, next2) {
+                        fs.writeFile(tmpFile, item.content, next2);
+                    },
+                    function mputIt(_, next2) {
+                        forkExecWait({
+                            argv: [ MPUT, '-f', tmpFile, item.path ]
+                        }, next2);
+                    },
+                    function rmTmpFile(_, next2) {
+                        fs.unlink(tmpFile, next2);
+                    }
+                ]}, next);
+                return;
+
+            default:
+                t.ifError(new Error('invalid test tree type: ' + item.type));
+                return;
+            }
+        }
+    }, function (err) {
+        t.ifError(err, err);
+        t.done();
+    });
+});
+
+
+test('mln ', function (t) {
+    var argv1 = [
+        MLN,
+        sprintf('%s/%02d.data', TESTDIR, 1),
+        sprintf('%s/%02d.data.lnk', TESTDIR, 1)
+    ];
+
+    var argv2 = [
+        MGET,
+        sprintf('%s/%02d.data', TESTDIR, 1)
+    ];
+
+    var argv3 = [
+        MGET,
+        sprintf('%s/%02d.data.lnk', TESTDIR, 1)
+    ];
+
+    forkExecWait({
+        argv: argv1
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        t.equal(info.stderr, '', 'no stderr');
+
+        forkExecWait({
+          argv: argv2
+        }, function (err2, info2) {
+               t.ifError(err2, err2);
+               t.equal(info2.stderr, '', 'no stderr');
+
+               forkExecWait({
+                   argv: argv3
+               }, function (err3, info3) {
+                      t.ifError(err3, err3);
+                      t.equal(info3.stderr, '', 'no stderr');
+
+                      t.equal(info2.stdout, info3.stdout, 'stdout from mget');
+                      t.done();
+                  });
+           });
+    });
+});
+
+
+/*
+ * Link a file using the role-tag option and verify the role-tag header
+ * is set on the object. This verifies the fix for
+ * https://github.com/joyent/node-manta/issues/333. This test requires
+ * a role to be configured in triton to work properly so it is condtional
+ * upon the user setting MANTA_TEST_ROLE in the environment.
+ */
+if (process.env.MANTA_TEST_ROLE) {
+    test('mln with --role-tag option', function (t) {
+        // Expect the role-tag header
+        var role = process.env.MANTA_TEST_ROLE;
+        var expectedHeader = 'role-tag: ' + role;
+
+        var argv1 = [
+            MLN,
+            '--role-tag',
+            role,
+            sprintf('%s/%02d.data', TESTDIR, 1),
+            sprintf('%s/%02d.data.lnk', TESTDIR, 1)
+        ];
+
+        var argv2 = [
+            MINFO,
+            sprintf('%s/%02d.data.lnk', TESTDIR, 1)
+        ];
+
+        forkExecWait({
+            argv: argv1
+        }, function (err, info) {
+               t.ifError(err, err);
+
+               t.equal(info.stderr, '', 'no stderr');
+
+               forkExecWait({
+                   argv: argv2
+               }, function (err2, info2) {
+                      t.ifError(err2, err2);
+                      t.equal(info2.stderr, '', 'no stderr');
+
+                      var headerIndex = info2.stdout.indexOf(expectedHeader);
+                      t.notEqual(headerIndex, -1,
+                          'minfo response contains header');
+
+                      t.done();
+                  });
+           });
+    });
+}
+
+
+test('cleanup: rm test tree ' + TESTDIR, function (t) {
+    // Sanity checks that we don't `mrm -r` a non-test dir.
+    assert.ok(TESTDIR);
+    assert.ok(TESTDIR.indexOf('node-manta-test') !== -1);
+
+    forkExecWait({ argv: [ MRM, '-r', TESTDIR ]}, function (err) {
+        t.ifError(err, err);
+        t.done();
+    });
+});
+
+
+test('cleanup: rm tmp directory ' + TMPDIR, function (t) {
+    var tmpFile = path.join(TMPDIR, 'node-manta-test-tmp-file-' + process.pid);
+
+    unlinkIfExists(tmpFile);
+
+    t.done();
+});
diff --git a/test/mmkdir.test.js b/test/mmkdir.test.js
new file mode 100644
index 0000000..e2063cf
--- /dev/null
+++ b/test/mmkdir.test.js
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test the "mmkdir" command.
+ */
+
+var assert = require('assert-plus');
+var forkExecWait = require('forkexec').forkExecWait;
+var fs = require('fs');
+var libuuid = require('uuid');
+var path = require('path');
+var vasync = require('vasync');
+var sprintf = require('extsprintf').sprintf;
+
+var logging = require('./lib/logging');
+
+
+var log = logging.createLogger();
+
+var BINDIR = path.resolve(__dirname, '../bin');
+var MMKDIR = path.resolve(BINDIR, 'mmkdir');
+var MRM = path.resolve(BINDIR, 'mrm');
+var MINFO = path.resolve(BINDIR, 'minfo');
+
+var TESTDIR = sprintf('/%s/stor/node-manta-test-mput-%s',
+    process.env.MANTA_USER || 'admin',
+    libuuid.v4().split('-')[0]);
+
+
+
+// ---- helper functions
+
+function test(name, testfunc) {
+    module.exports[name] = testfunc;
+}
+
+
+// ---- tests
+
+/*
+ * Create a directory using the role-tag option and verify the role-tag header
+ * is set on the object. This verifies the fix for
+ * https://github.com/joyent/node-manta/issues/333. This test requires
+ * a role to be configured in triton to work properly so it is condtional
+ * upon the user setting MANTA_TEST_ROLE in the environment.
+ */
+if (process.env.MANTA_TEST_ROLE) {
+    test('mmkdir with --role-tag option', function (t) {
+        // Expect the role-tag header
+        var role = process.env.MANTA_TEST_ROLE;
+        var expectedHeader = 'role-tag: ' + role;
+
+        var argv1 = [
+            MMKDIR,
+            '--role-tag',
+            role,
+            TESTDIR
+        ];
+
+        var argv2 = [
+            MINFO,
+            TESTDIR
+        ];
+
+        forkExecWait({
+            argv: argv1
+        }, function (err, info) {
+               t.ifError(err, err);
+
+               t.equal(info.stderr, '', 'no stderr');
+
+               forkExecWait({
+                   argv: argv2
+               }, function (err2, info2) {
+                      t.ifError(err2, err2);
+                      t.equal(info2.stderr, '', 'no stderr');
+
+                      var headerIndex = info2.stdout.indexOf(expectedHeader);
+                      t.notEqual(headerIndex, -1,
+                          'minfo response contains header');
+
+                      t.done();
+                  });
+           });
+    });
+}
+
+
+test('cleanup: rm test directory ' + TESTDIR, function (t) {
+    // Sanity checks that we don't `mrm -r` a non-test dir.
+    assert.ok(TESTDIR);
+    assert.ok(TESTDIR.indexOf('node-manta-test') !== -1);
+
+    forkExecWait({ argv: [ MRM, '-r', TESTDIR ]}, function (err) {
+        t.ifError(err, err);
+        t.done();
+    });
+});
diff --git a/test/mput.test.js b/test/mput.test.js
index 4a32f53..76278c6 100644
--- a/test/mput.test.js
+++ b/test/mput.test.js
@@ -52,6 +52,7 @@ for (i = 1; i <= 3; i++) {
     });
 }
 
+
 /*
  * Create three data files that contain only a single character.  Of particular
  * note is the lack of a trailing linefeed.
@@ -71,6 +72,7 @@ function test(name, testfunc) {
     module.exports[name] = testfunc;
 }
 
+
 function unlinkIfExists(targ) {
     try {
         fs.unlinkSync(targ);
@@ -161,7 +163,7 @@ test('mput with custom header value with colons', function (t) {
             t.equal(info2.stderr, '', 'no stderr');
 
             var headerIndex = info2.stdout.indexOf(expectedHeader);
-            t.notEqual(headerIndex -1, 'minfo response contains header');
+            t.notEqual(headerIndex, -1, 'minfo response contains header');
 
             t.done();
         });
@@ -169,6 +171,61 @@ test('mput with custom header value with colons', function (t) {
 });
 
 
+/*
+ * Put a file using the role-tag option and verify the role-tag header
+ * is set on the object. This verifies the fix for
+ * https://github.com/joyent/node-manta/issues/333. This test requires
+ * a role to be configured in triton to work properly so it is condtional
+ * upon the user setting MANTA_TEST_ROLE in the environment.
+ */
+if (process.env.MANTA_TEST_ROLE) {
+    test('mput with --role-tag option', function (t) {
+
+        // Expect the role-tag header
+        var role = process.env.MANTA_TEST_ROLE;
+        var expectedHeader = 'role-tag: ' + role;
+
+        var tmpFile = path.join(TMPDIR,
+            'node-manta-test-tmp-file-' + process.pid);
+
+        var argv1 = [
+            MPUT,
+            '--role-tag',
+            role,
+            '-f',
+            sprintf('%s', tmpFile),
+            sprintf('%s/%02d.data', TESTDIR, 1)
+        ];
+
+        var argv2 = [
+            MINFO,
+            sprintf('%s/%02d.data', TESTDIR, 1)
+        ];
+
+        forkExecWait({
+            argv: argv1
+        }, function (err, info) {
+               t.ifError(err, err);
+
+               t.equal(info.stderr, '', 'no stderr');
+
+               forkExecWait({
+                   argv: argv2
+               }, function (err2, info2) {
+                      t.ifError(err2, err2);
+                      t.equal(info2.stderr, '', 'no stderr');
+
+                      var headerIndex = info2.stdout.indexOf(expectedHeader);
+                      t.notEqual(headerIndex, -1,
+                          'minfo response contains header');
+
+                      t.done();
+                  });
+           });
+    });
+}
+
+
 test('cleanup: rm test tree ' + TESTDIR, function (t) {
     // Sanity checks that we don't `mrm -r` a non-test dir.
     assert.ok(TESTDIR);
