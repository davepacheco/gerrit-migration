commit 540c6b42f798fe79bbfb21310abd067be9b64239 (refs/changes/50/950/3)
Author: Richard Bradley <richard.bradley@joyent.com>
Date:   2016-11-30T11:11:17+00:00 (2 years, 10 months ago)
    
    MANTA-2797 manta-adm could show human-readable image versions

diff --git a/lib/adm.js b/lib/adm.js
index 39aa96c..3cba9fb 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -95,6 +95,10 @@ var maColumns = {
     'indent': {
     	'label': '',
 	'width': 4
+    },
+    'version': {
+		'label': 'VERSION',
+		'width' : 42
     }
 };
 
@@ -271,6 +275,11 @@ function maAdm(log)
 	 */
 	this.ma_vms = null;
 
+	/*
+	 * IMGAPI image objects, indexed by image uuid.
+	 */
+	this.ma_images = null;
+
 	/*
 	 * Information about global zones, indexed by server_uuid.  This is
 	 * where we keep useful properties derived non-trivially from the CNAPI
@@ -394,6 +403,7 @@ maAdm.prototype.fetchDeployed = function (callback)
 
 	var self = this;
 	var cns = this.ma_cns = {};
+	this.ma_images = {};
 
 	vasync.pipeline({
 	    'funcs': [
@@ -487,6 +497,11 @@ maAdm.prototype.fetchDeployed = function (callback)
 			self.fetchCnInfo(Object.keys(cns), stepcb);
 		},
 
+		function fetchImagesInfo(_, stepcb) {
+			self.fetchImagesInfo(Object.keys(self.ma_services),
+			    stepcb);
+		},
+
 		function loadFini(_, stepcb) {
 			self.ma_log.info('loaded current deployed state');
 			self.loadCns();
@@ -530,6 +545,48 @@ maAdm.prototype.fetchCnInfo = function (cnids, callback)
 	});
 };
 
+/*
+ * [internal] Fetch image information for the given list of services (specified
+ * by service_uuids).
+ */
+maAdm.prototype.fetchImagesInfo = function (svcids, callback) {
+	var self = this;
+	var errors, queue, svc, params;
+	errors = [];
+	self.ma_log.info('fetching info for images');
+	queue = vasync.queue(function (svcid, subcallback) {
+		svc = self.ma_services[svcid];
+		params = {
+			'name': '~' + svc.name,
+			'state': 'active',
+			'tags.smartdc_service': 'true',
+			'owner_uuid': self.ma_app.owner_uuid
+		};
+		self.ma_log.trace({ 'service': svc.name },
+		    'fetching images for service');
+		self.ma_sdc.IMGAPI.listImages(params, function (err, uimgs) {
+			if (err) {
+				errors.push(new VError(err,
+				    'fetching images for service "%s"',
+				    svc.name));
+			} else if (uimgs.length) {
+				uimgs.forEach(function (img) {
+					self.ma_images[img.uuid] = img;
+				});
+			}
+			subcallback();
+		});
+	}, maMaxConcurrency);
+	queue.push(svcids);
+	queue.close();
+	queue.on('end', function () {
+		if (errors.length > 0)
+			callback(errors[0]);
+		else
+			callback();
+	});
+};
+
 /*
  * [for testing only] Load a fake set of results from the SAPI, VMAPI, and CNAPI
  * services queried by fetchDeployed().
@@ -1001,7 +1058,8 @@ maAdm.prototype.dumpDeployedConfigByService = function (sout, conf)
 			    'SERVICE': self.ma_services[svcid]['name'],
 			    'IMAGE': row['IMAGE'],
 			    'SH': row['SH'] || '-',
-			    'COUNT': row['count']
+			    'COUNT': row['count'],
+			    'VERSION': row['VERSION']
 			});
 		});
 	});
@@ -1195,7 +1253,7 @@ maAdm.prototype.loadInstances = function ()
 	assert.ok(this.ma_config_bycfg === null);
 
 	var services, rv, svcid, i, svcname, svckey;
-	var instance, metadata, server, gz, image, row, ip;
+	var instance, metadata, server, gz, image, row, ip, version;
 
 	services = this.ma_services;
 	rv = [];
@@ -1218,6 +1276,8 @@ maAdm.prototype.loadInstances = function ()
 			image = this.ma_vms.hasOwnProperty(instance['uuid']) ?
 			    this.ma_vms[instance['uuid']]['image_uuid'] : '-';
 			ip = this.primaryIpForZone(instance['uuid']) || '-';
+			version = this.ma_images.hasOwnProperty(image) ?
+			    this.ma_images[image]['version'] : '-';
 
 			if (gz && svcname == 'storage') {
 				gz['storage'] = true;
@@ -1243,7 +1303,8 @@ maAdm.prototype.loadInstances = function ()
 			    'PRIMARY IP': ip,
 			    'ZONEABBR': instance['uuid'].substr(0, 8),
 			    'IMAGE': image,
-			    'STORAGE ID': metadata['MANTA_STORAGE_ID'] || '-'
+			    'STORAGE ID': metadata['MANTA_STORAGE_ID'] || '-',
+			    'VERSION': version
 			};
 			rv.push(row);
 
