commit 112ce98108c1a23089a5e6c04fca64bc6b8b43ea (refs/changes/92/592/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2016-10-04T13:24:21-07:00 (3 years ago)
    
    DOCKER-940 get node-docker-registry-client working with node v4

diff --git a/CHANGES.md b/CHANGES.md
index 013e2e4..9d031dc 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,7 @@
 
 ## 3.2.0 (not yet released)
 
+- DOCKER-940: Update to support node v4 without build errors.
 - DOCKER-929: Support the docker v2.2 manifest format. The `createClientV2` and
   `getManifest` functions now allow an optional `maxSchemaVersion` argument to
   allow you to specify the maximum manifest schema version you will receive for
diff --git a/lib/docker-json-client.js b/lib/docker-json-client.js
index ed7912c..2c807e6 100644
--- a/lib/docker-json-client.js
+++ b/lib/docker-json-client.js
@@ -47,14 +47,13 @@
 
 var assert = require('assert-plus');
 var crypto = require('crypto');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
+var restifyErrors = require('restify-errors');
 var strsplit = require('strsplit').strsplit;
 var util = require('util');
 var zlib = require('zlib');
 
-var codeToHttpError = require('restify/lib/errors/http_error').codeToHttpError;
-var RestError = require('restify/lib/errors').RestError;
-var StringClient = require('restify/lib/clients/string_client');
+var StringClient = restifyClients.StringClient;
 
 
 // --- API
@@ -150,7 +149,7 @@ DockerJsonClient.prototype.parse = function parse(req, callback) {
                         (obj.error ? obj.error.message : '') ||
                         '';
 
-                    resErr = new RestError({
+                    resErr = new restifyErrors.RestError({
                         message: _m,
                         restCode: _c,
                         statusCode: res.statusCode
@@ -161,7 +160,7 @@ DockerJsonClient.prototype.parse = function parse(req, callback) {
                         resErr.name += 'Error';
                     }
                 } else if (!resErr) {
-                    resErr = codeToHttpError(res.statusCode,
+                    resErr = restifyErrors.makeErrFromCode(res.statusCode,
                         obj.message || '', body);
                 }
             }
diff --git a/lib/index.js b/lib/index.js
index e0281f7..05a9c22 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -10,7 +10,6 @@
 
 var assert = require('assert-plus');
 var fmt = require('util').format;
-var restify = require('restify');
 var vasync = require('vasync');
 var VError = require('verror').VError;
 
diff --git a/lib/registry-client-v1.js b/lib/registry-client-v1.js
index e675149..7a07eae 100644
--- a/lib/registry-client-v1.js
+++ b/lib/registry-client-v1.js
@@ -22,7 +22,7 @@ var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var fmt = require('util').format;
 var mod_url = require('url');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
 var tough = require('tough-cookie');
 var vasync = require('vasync');
 var VError = require('verror').VError;
@@ -77,7 +77,7 @@ function pingIndex(opts, cb) {
     assert.func(cb, 'cb');
 
     var index = common.parseIndex(opts.indexName);
-    var client = restify.createJsonClient({
+    var client = restifyClients.createJsonClient({
         url: common.urlFromIndex(index),
         log: opts.log,
         userAgent: opts.userAgent || common.DEFAULT_USERAGENT,
@@ -137,7 +137,7 @@ function login(opts, cb) {
     }
     var indexUrl = common.urlFromIndex(index);
 
-    var client = restify.createJsonClient({
+    var client = restifyClients.createJsonClient({
         url: indexUrl,
         log: opts.log,
         retry: false, // Fail fast. We don't want 15s of retrying.
@@ -298,11 +298,11 @@ function RegistryClientV1(opts) {
     this.log = opts.log
         ? opts.log.child({
                 component: 'registry',
-                serializers: restify.bunyan.serializers
+                serializers: restifyClients.bunyan.serializers
             })
         : bunyan.createLogger({
                 name: 'registry',
-                serializers: restify.bunyan.serializers
+                serializers: restifyClients.bunyan.serializers
             });
 
     this.insecure = Boolean(opts.insecure);
@@ -539,10 +539,10 @@ RegistryClientV1.prototype._createClient = function _createClient(type, url) {
     var client;
     switch (type) {
     case 'http':
-        client = restify.createHttpClient(clientOpts);
+        client = restifyClients.createHttpClient(clientOpts);
         break;
     case 'json':
-        client = restify.createJsonClient(clientOpts);
+        client = restifyClients.createJsonClient(clientOpts);
         break;
     default:
         throw new Error('unknown client type: ' + type);
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index 109377b..551e84c 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -22,7 +22,8 @@ var fmt = require('util').format;
 var jwkToPem = require('jwk-to-pem');
 var mod_jws = require('jws');
 var querystring = require('querystring');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
+var restifyErrors = require('restify-errors');
 var strsplit = require('strsplit');
 var mod_url = require('url');
 var vasync = require('vasync');
@@ -49,12 +50,12 @@ function _createLogger(log) {
         // TODO avoid this .child if already have the serializers, e.g. for
         // recursive call.
         return log.child({
-            serializers: restify.bunyan.serializers
+            serializers: restifyClients.bunyan.serializers
         });
     } else {
         return bunyan.createLogger({
             name: 'registry',
-            serializers: restify.bunyan.serializers
+            serializers: restifyClients.bunyan.serializers
         });
     }
 }
@@ -382,18 +383,18 @@ function _jwsFromManifest(manifest, body) {
             var protectedHeader = JSON.parse(
                 base64url.decode(sig['protected']));
         } catch (protectedErr) {
-            throw new restify.InvalidContentError(protectedErr, fmt(
+            throw new restifyErrors.InvalidContentError(protectedErr, fmt(
                 'could not parse manifest "signatures[%d].protected": %j',
                 i, sig['protected']));
         }
         if (isNaN(protectedHeader.formatLength)) {
-            throw new restify.InvalidContentError(fmt(
+            throw new restifyErrors.InvalidContentError(fmt(
                 'invalid "formatLength" in "signatures[%d].protected": %j',
                 i, protectedHeader.formatLength));
         } else if (formatLength === undefined) {
             formatLength = protectedHeader.formatLength;
         } else if (protectedHeader.formatLength !== formatLength) {
-            throw new restify.InvalidContentError(fmt(
+            throw new restifyErrors.InvalidContentError(fmt(
                 'conflicting "formatLength" in "signatures[%d].protected": %j',
                 i, protectedHeader.formatLength));
         }
@@ -401,14 +402,14 @@ function _jwsFromManifest(manifest, body) {
         if (!protectedHeader.formatTail ||
             typeof (protectedHeader.formatTail) !== 'string')
         {
-            throw new restify.InvalidContentError(fmt(
+            throw new restifyErrors.InvalidContentError(fmt(
                 'missing "formatTail" in "signatures[%d].protected"', i));
         }
         var formatTail_ = base64url.decode(protectedHeader.formatTail);
         if (formatTail === undefined) {
             formatTail = formatTail_;
         } else if (formatTail_ !== formatTail) {
-            throw new restify.InvalidContentError(fmt(
+            throw new restifyErrors.InvalidContentError(fmt(
                 'conflicting "formatTail" in "signatures[%d].protected": %j',
                 i, formatTail_));
         }
@@ -425,7 +426,7 @@ function _jwsFromManifest(manifest, body) {
             try {
                 jwsSig.header.jwk = jwkToPem(sig.header.jwk);
             } catch (jwkErr) {
-                throw new restify.InvalidContentError(jwkErr, fmt(
+                throw new restifyErrors.InvalidContentError(jwkErr, fmt(
                     'error in "signatures[%d].header.jwk": %s',
                     i, jwkErr.message));
             }
@@ -450,14 +451,14 @@ function _jwsFromManifest(manifest, body) {
  */
 function _parseDockerContentDigest(dcd) {
     if (!dcd) {
-        throw new restify.BadDigestError(
+        throw new restifyErrors.BadDigestError(
             'missing "Docker-Content-Digest" header');
     }
 
     // E.g. docker-content-digest: sha256:887f7ecfd0bda3...
     var parts = strsplit(dcd, ':', 2);
     if (parts.length !== 2) {
-        throw new restify.BadDigestError(
+        throw new restifyErrors.BadDigestError(
             'could not parse "Docker-Content-Digest" header: ' + dcd);
     }
 
@@ -465,7 +466,7 @@ function _parseDockerContentDigest(dcd) {
     try {
         hash = crypto.createHash(parts[0]);
     } catch (hashErr) {
-        throw new restify.BadDigestError(hashErr, fmt(
+        throw new restifyErrors.BadDigestError(hashErr, fmt(
             '"Docker-Content-Digest" header error: %s: %s',
             hashErr.message, dcd));
     }
@@ -494,7 +495,7 @@ function _verifyManifestDockerContentDigest(res, jws) {
         res.log.trace({expectedDigest: dcdInfo.expectedDigest,
             header: dcdInfo.raw, digest: digest},
             'Docker-Content-Digest failure');
-        throw new restify.BadDigestError('Docker-Content-Digest');
+        throw new restifyErrors.BadDigestError('Docker-Content-Digest');
     }
 }
 
@@ -1227,7 +1228,7 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                 }
 
                 if (manifest_.schemaVersion > maxSchemaVersion) {
-                    throw new restify.InvalidContentError(fmt(
+                    throw new restifyErrors.InvalidContentError(fmt(
                         'unsupported schema version %s in %s:%s manifest',
                         manifest_.schemaVersion, self.repo.localName,
                         opts.ref));
@@ -1235,7 +1236,7 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                 var layers = manifest_.fsLayers;
                 if (manifest_.schemaVersion === 1) {
                     if (layers.length !== manifest_.history.length) {
-                        throw new restify.InvalidContentError(fmt(
+                        throw new restifyErrors.InvalidContentError(fmt(
                             'history length not equal to layers length in ' +
                             '%s:%s manifest', self.repo.localName, opts.ref));
                     }
@@ -1243,7 +1244,7 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                     layers = manifest_.layers;
                 }
                 if (layers.length === 0) {
-                    throw new restify.InvalidContentError(fmt(
+                    throw new restifyErrors.InvalidContentError(fmt(
                         'no layers in %s:%s manifest', self.repo.localName,
                         opts.ref));
                 }
@@ -1299,7 +1300,7 @@ RegistryClientV2.prototype._headOrGetBlob = function _headOrGetBlob(opts, cb) {
                 }
                 numRedirs += 1;
 
-                var client = restify.createHttpClient(common.objMerge({
+                var client = restifyClients.createHttpClient(common.objMerge({
                     url: reqOpts.url
                 }, self._commonHttpClientOpts));
                 self._clientsToClose.push(client);
@@ -1457,12 +1458,12 @@ RegistryClientV2.prototype.createBlobReadStream =
             try {
                 dcdInfo = _parseDockerContentDigest(dcdHeader);
             } catch (parseErr) {
-                return cb(new restify.BadDigestError(fmt(
+                return cb(new restifyErrors.BadDigestError(fmt(
                     'could not parse Docker-Content-Digest header, "%s": %s',
                     dcdHeader)));
             }
             if (dcdInfo.raw !== opts.digest) {
-                return cb(new restify.BadDigestError(fmt(
+                return cb(new restifyErrors.BadDigestError(fmt(
                     'Docker-Content-Digest header, %s, does not match ' +
                     'given digest, %s', dcdInfo.raw, opts.digest)));
             }
@@ -1489,7 +1490,7 @@ RegistryClientV2.prototype.createBlobReadStream =
                     stream.log.trace({expectedDigest: dcdInfo.expectedDigest,
                         header: dcdInfo.raw, digest: digest},
                         'Docker-Content-Digest failure');
-                    stream.emit('error', new restify.BadDigestError(
+                    stream.emit('error', new restifyErrors.BadDigestError(
                         'Docker-Content-Digest'));
                 }
             }
diff --git a/package.json b/package.json
index d4342b1..d9ca024 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,8 @@
         "bunyan": "1.x >=1.3.3",
         "jws": "3.1.0",
         "jwk-to-pem": "1.2.0",
-        "restify": "git+https://github.com/joyent/node-restify.git#066dd84",
+        "restify-clients": "git+https://github.com/trentm/clients.git#0b989e0bbd375ddeefce2f6e2754f66e5dbb59d1",
+        "restify-errors": "^3.0.0",
         "strsplit": "1.x",
         "tough-cookie": "2.0.x",
         "vasync": "1.x >=1.6.1",
diff --git a/test/lib/log.js b/test/lib/log.js
index 83a495c..9f38537 100644
--- a/test/lib/log.js
+++ b/test/lib/log.js
@@ -13,11 +13,11 @@
  */
 
 var bunyan = require('bunyan');
-var restify = require('restify');
+var restifyClients = require('restify-clients');
 
 module.exports = bunyan.createLogger({
     name: 'drc-test',
-    serializers: restify.bunyan.serializers,
+    serializers: restifyClients.bunyan.serializers,
     streams: [
         {
             level: process.env.LOG_LEVEL || (process.env.TRACE && 'trace') ||
