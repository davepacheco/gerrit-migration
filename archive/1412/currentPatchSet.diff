From 23ccc86666d824727d648ec745d1d07878ecacdb Mon Sep 17 00:00:00 2001
From: andrew <andrew@whartonlabs.com>
Date: Fri, 3 Feb 2017 11:17:21 +1100
Subject: [PATCH] Add resizeInstance method to TritonApi

I also took the liberty to change the internal _waitForInstanceName method to _waitForInstanceUpdate. I've basically abstracted the check, so now instead of passing in a name, you pass in a function which can do the check and return whether or not the update has been applied. This was so I could reuse this function to check for the resize update as well.
---
 lib/tritonapi.js | 98 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 90 insertions(+), 8 deletions(-)

diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 9065bc5..a958064 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -184,6 +184,27 @@ function _stepInstId(arg, next) {
     }
 }
 
+/**
+ * A function appropriate for `vasync.pipeline` funcs that takes a `arg.package`
+ * package name, short id or uuid, and determines the package id (setting it
+ * as `arg.pkgId`). Also sets `arg.pkgName` so that we can use this to test when
+ * the instance has been updated.
+ */
+function _stepPkgId(arg, next) {
+    assert.object(arg.client, 'arg.client');
+    assert.string(arg.package, 'arg.package');
+
+    arg.client.getPackage(arg.package, function (err, pkg) {
+        if (err) {
+            next(err);
+        } else {
+            arg.pkgId = pkg.id;
+            arg.pkgName = pkg.name;
+            next();
+        }
+    });
+}
+
 /**
  * A function appropriate for `vasync.pipeline` funcs that takes a `arg.id`
  * fwrule shortid or uuid, and determines the fwrule id (setting it
@@ -2261,6 +2282,63 @@ TritonApi.prototype.deletePolicy = function deletePolicy(opts, cb) {
     });
 };
 
+/**
+ * Resize a machine by id.
+ *
+ * @param {Object} opts
+ *      - {String} id: Required. The instance name, short id, or id (a UUID).
+ *      - {String} name: Required. The new instance name.
+ *      - {Boolean} wait: Wait (via polling) until the rename is complete.
+ *        Warning: A concurrent rename of the same instance can result in this
+ *        polling being unable to notice the change. Use `waitTimeout` to
+ *        put an upper bound.
+ *      - {Number} waitTimeout: The number of milliseconds after which to
+ *        timeout (call `cb` with a timeout error) waiting. Only relevant if
+ *        `opts.wait === true`. Default is Infinity (i.e. it doesn't timeout).
+ * @param {Function} callback of the form `function (err, _, res)`
+ */
+TritonApi.prototype.resizeInstance = function resizeInstance(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.string(opts.package, 'opts.package');
+    assert.optionalBool(opts.wait, 'opts.wait');
+    assert.optionalNumber(opts.waitTimeout, 'opts.waitTimeout');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+
+    vasync.pipeline(
+      {arg: {client: self, id: opts.id, package: opts.package}, funcs: [
+        _stepInstId,
+
+        _stepPkgId,
+
+        function resizeMachine(arg, next) {
+            self.cloudapi.resizeMachine({id: arg.instId, package: arg.pkgId},
+                function (err, _res) {
+                    res = _res;
+                    next(err);
+                });
+        },
+
+        function waitForSizeChanges(arg, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            self._waitForInstanceUpdate({
+                id: arg.instId,
+                timeout: opts.waitTimeout,
+                isUpdated: function (machine) {
+                    return arg.pkgName === machine.package;
+                }
+            }, next);
+        }
+    ]}, function (err) {
+        cb(err, null, res);
+    });
+};
+
 /**
  * rename a machine by id.
  *
@@ -2302,10 +2380,12 @@ TritonApi.prototype.renameInstance = function renameInstance(opts, cb) {
                 next();
                 return;
             }
-            self._waitForInstanceRename({
+            self._waitForInstanceUpdate({
                 id: arg.instId,
                 timeout: opts.waitTimeout,
-                name: opts.name
+                isUpdated: function (machine) {
+                    return opts.name === machine.name;
+                }
             }, next);
         }
     ]}, function (err) {
@@ -2317,23 +2397,25 @@ TritonApi.prototype.renameInstance = function renameInstance(opts, cb) {
  * Shared implementation for any methods to change instance name.
  *
  * @param {Object} opts
- *      - {String} id: The instance ID Required.
- *      - {String} name: Required change new name
+ *      - {String} id: Required. The instance ID Required.
+ *      - {Function} isUpdated: Required. A function which is passed the
+ *        machine data, should check if the change has been applied and
+ *        return a Boolean.
  *      - {Number} timeout: The number of milliseconds after which to
  *        timeout (call `cb` with a timeout error) waiting.
  *        Default is Infinity (i.e. it doesn't timeout).
  * @param {Function} cb: `function (err)`
  */
 
-TritonApi.prototype._waitForInstanceRename =
-function _waitForInstanceRename(opts, cb) {
+TritonApi.prototype._waitForInstanceUpdate =
+function _waitForInstanceUpdate(opts, cb) {
     var self = this;
     assert.object(opts, 'opts');
     assert.uuid(opts.id, 'opts.id');
+    assert.func(opts.isUpdated, 'opts.isUpdated');
     assert.optionalNumber(opts.timeout, 'opts.timeout');
     var timeout = opts.hasOwnProperty('timeout') ? opts.timeout : Infinity;
     assert.ok(timeout > 0, 'opts.timeout must be greater than zero');
-    assert.string(opts.name, 'opts.name');
     assert.func(cb, 'cb');
 
     /*
@@ -2351,7 +2433,7 @@ function _waitForInstanceRename(opts, cb) {
                 cb(err);
                 return;
             }
-            if (opts.name === machine.name) {
+            if (opts.isUpdated(machine)) {
                 cb();
                 return;
 
-- 
2.21.0

