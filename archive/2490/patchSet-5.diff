commit dba28856cb129347aafd9bd25fd0c2b1bc04af4c (refs/changes/90/2490/5)
Author: Joshua M. Clulow <jmc@joyent.com>
Date:   2018-01-04T00:20:28+00:00 (1 year, 9 months ago)
    
    TOOLS-1850 common Makefile infrastructure for Go toolchain use

diff --git a/.gitignore b/.gitignore
index 8b5009a..6489fdb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 /node_modules
 /tmp
+/cache/
 build
 /make_stamps
 docs/*.json
diff --git a/tools/download_go b/tools/download_go
new file mode 100755
index 0000000..d70e794
--- /dev/null
+++ b/tools/download_go
@@ -0,0 +1,126 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# This program will download a Go toolchain for a particular system.  It
+# currently expects to find illumos builds of the toolchain on the Joyent
+# download server, where we will be placing them alongside sdcnode, etc.
+# The program is designed specifically to be used as part of a make target.
+#
+# We may revisit this once the Go project makes official builds for illumos
+# systems available in the future.
+#
+# NOTE: This program comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This program accepts four arguments, in the following order:
+#
+#	GOVERSION	The version of the Go toolchain to use; e.g., "1.9.2"
+#	GOOS		The build machine operating system; e.g., "solaris"
+#	GOARCH		The build machine CPU architecture; e.g., "amd64"
+#	OUTDIR		The local directory into which the downloaded tar
+#			file will be placed.
+#
+# The program will use the provided arguments to find and download an archive
+# of the Go toolchain for use on the build machine.  The archive will be named
+# for a combination of the provided arguments; e.g.,
+# "go1.9.2.solaris-amd64.tar.bz2".  A target symbolic link will also be
+# created, with just the version number in the name; e.g., "go-1.9.2.tar.bz2".
+# If the archive could not be downloaded, an error message will be printed and
+# the output file and target link will be unaffected.
+#
+
+BASEURL='https://download.joyent.com/pub/build/go/adhoc/'
+GOVERSION=$1
+GOOS=$2
+GOARCH=$3
+OUTDIR=$4
+
+if [[ -z $GOVERSION || -z $GOOS || -z $GOARCH || -z $OUTDIR ]]; then
+	printf 'ERROR: usage: download_go GOVERSION GOOS GOARCH OUTDIR\n' 2>&1
+	exit 1
+fi
+
+if [[ ! -d $OUTDIR ]]; then
+	printf 'ERROR: output directory "%s" does not exist\n' "$OUTDIR" 2>&1
+	exit 1
+fi
+
+TARGET="go-$GOVERSION.tar.bz2"
+
+#
+# Download the index page which lists the current set of available go
+# builds:
+#
+if ! list=$(curl -sSfL "$BASEURL") || [[ -z "$list" ]]; then
+	printf 'ERROR: could not download index page\n' >&2
+	exit 1
+fi
+
+#
+# Using only commonly found household items, extract the full name of the
+# go tar archive we need.  This program needs to be able to operate in a
+# minimally populated build zone, so we avoid using anything beyond basic
+# UNIX tools like "awk".
+#
+# One word to describe this process might be "brittle".
+#
+if ! name=$(/usr/bin/awk -v "v=$GOVERSION" -v "o=$GOOS" -v "a=$GOARCH" -F\" '
+    BEGIN { pattern = "^go"v"."o"-"a".tar.bz2$"; }
+    $1 == "<a href=" && $2 ~ pattern { print $2 }' <<< "$list") ||
+    [[ -z "$name" ]]; then
+	printf 'ERROR: could not locate file name in index page\n' >&2
+	printf '\t(Does Go version %s (%s-%s) exist?)\n' \
+	    "$GOVERSION" "$GOOS" "$GOARCH" >&2
+	exit 1
+fi
+
+
+#
+# If the full file name of the latest go build does not exist, download it now
+# to a temporary file.  If it succeeds, move it into place.
+#
+output_file="$OUTDIR/$name"
+if [[ ! -f $output_file ]]; then
+	printf 'Downloading Go: %s\n' "$BASEURL$name"
+
+	temp_file="$OUTDIR/.tmp.$name.$$"
+	rm -f "$temp_file"
+
+	if ! curl -sSf -o "$temp_file" "$BASEURL$name"; then
+		printf 'ERROR: could not download go\n' >&2
+		rm -f "$temp_file"
+		exit 1
+	fi
+
+	if ! mv "$temp_file" "$output_file"; then
+		printf 'ERROR: could not move tar file into place\n' >&2
+		rm -f "$temp_file"
+		exit 1
+	fi
+fi
+
+#
+# Make sure the target link points at the correct file:
+#
+rm -f "$OUTDIR/$TARGET"
+if ! ln -s "$name" "$OUTDIR/$TARGET"; then
+	printf 'ERROR: could not create target link\n' >&2
+	exit 1
+fi
+
+exit 0
+
+# vim: set ts=8 sts=8 sw=8 noet:
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 8c6be90..f6e9042 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -30,6 +30,11 @@
 #	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
 #			created.  See comments below on expensive targets.
 #
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
 TOP := $(shell pwd)
 
@@ -52,6 +57,9 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 # node-gyp will print build info useful for debugging with V=1
 export V=1
 
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
 #
 # EXPENSIVE TARGETS AND MAKE STAMP FILES
 #
diff --git a/tools/mk/Makefile.go_prebuilt.defs b/tools/mk/Makefile.go_prebuilt.defs
new file mode 100644
index 0000000..5b5eea6
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.defs
@@ -0,0 +1,132 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.defs: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile aids in the download and operation of a Go toolchain when
+# building software written in the Go language.  It provides as much isolation
+# from the broader build host as possible, including the provision of a
+# project-local GOPATH and GOROOT.
+#
+# This Makefile is intended to be used along with "Makefile.go_prebuilt.targ".
+#
+# When using this Makefile, you MUST define these variables before the include
+# directive:
+#
+#	GO_PREBUILT_VERSION	The version of the Go toolchain to download
+#				and use.  For example, "1.9".
+#
+# You MAY also specify the following variables:
+#
+#	GO_ENV			A list of environment variable specifications
+#				in shell syntax which will be prepended to Go
+#				toolchain invocations.  Using the "+=" operator,
+#				it is possible to add to the list without
+#				overriding the base environment specified by
+#				this Makefile.
+#
+# This Makefile provides definitions for the following variables:
+#
+#	GO_INSTALL		The location of the Go toolchain, relative
+#				to $(TOP).
+#
+#	GO_GOPATH		The location of the project-local GOPATH
+#				directory, relative to $(TOP).
+#
+#	GO			To be used in place of a bare invocation of
+#				"go"; e.g., "go build" would become
+#				"$(GO) build".  This invocation uses env(1)
+#				and $(GO_ENV) to construct an isolated
+#				environment.
+#
+
+ifndef TOP
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef CACHE_DIR
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef GO_PREBUILT_VERSION
+$(error GO_PREBUILT_VERSION must be set before including this makefile.)
+endif
+
+GO_VERSION =			$(GO_PREBUILT_VERSION)
+
+#
+# This Makefile is presently used to build programs written in the Go language
+# to be shipped in zone images.  As such, we default to a target specification
+# which is appropriate for an illumos host.
+#
+GO_GOOS ?=			solaris
+GO_GOARCH ?=			amd64
+
+#
+# The "tools/download_go" script will obtain a Go toolchain tar archive, which
+# we will store in the $(CACHE_DIR).  This directory is be removed entirely by
+# "make distclean".
+#
+GO_TARBALL =			$(CACHE_DIR)/go-$(GO_PREBUILT_VERSION).tar.bz2
+
+#
+# The downloaded Go toolchain will be extracted into a directory under
+# $(CACHE_DIR) by the $(STAMP_GO_TOOLCHAIN) target.  This directory becomes
+# the value of $GOROOT for toolchain invocations.
+#
+GO_INSTALL =			$(CACHE_DIR)/go-$(GO_VERSION)
+
+#
+# Parts of the Go toolchain store intermediate build artefacts in the GOPATH
+# directory.  At the time of writing, at least some of these intermediate
+# artefacts cannot be reused by different versions of the toolchain.  There
+# does not appear to be any mechanism in place to _prevent_ an error of this
+# type, so we include the Go toolchain version in the project-local GOPATH
+# directory name.
+#
+GO_GOPATH =			$(CACHE_DIR)/gopath-$(GO_VERSION)
+
+#
+# The Go toolchain derives some amount of behaviour from the environment.  In
+# order to precisely control that behaviour, we build up our own environment
+# containing only the expected values and run the tool under "env -i", thus
+# precluding any other variables from leaking in:
+#
+GO_ENV +=			GOROOT="$(TOP)/$(GO_INSTALL)"
+GO_ENV +=			GOPATH="$(TOP)/$(GO_GOPATH)"
+GO_ENV +=			GOARCH="$(GO_GOARCH)"
+GO_ENV +=			GOOS="$(GO_GOOS)"
+GO_ENV +=			PATH="$(TOP)/$(GO_INSTALL)/bin:$$PATH"
+
+#
+# The $(GO) variable should be used in place of bare invocations of "go".
+# For example, instead of "go build", use "$(GO) build".
+#
+GO =				env -i $(GO_ENV) $(TOP)/$(GO_INSTALL)/bin/go
+
+#
+# If the version of Go is changed in the Makefile, or interactively, we need
+# to make sure the new version is downloaded and installed.  As such, the
+# stamp name needs to include the version.
+#
+STAMP_GO_TOOLCHAIN =		$(MAKE_STAMPS_DIR)/go-toolchain-$(GO_VERSION)
+
+#
+# A regular "make clean" should remove any cached build artefacts from GOPATH.
+#
+CLEAN_FILES +=			$(GO_GOPATH)
diff --git a/tools/mk/Makefile.go_prebuilt.targ b/tools/mk/Makefile.go_prebuilt.targ
new file mode 100644
index 0000000..17292ef
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.targ
@@ -0,0 +1,55 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.targ: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# For usage documentation, see the comments in "Makefile.go_prebuilt.defs".
+#
+
+ifndef GO_TARBALL
+$(error You must include Makefile.go_prebuilt.defs first.)
+endif
+
+#
+# Download a prebuilt copy of the Go toolchain.  There are not presently builds
+# available for illumos systems on the official Go site, so we have an
+# appropriate build stored on a Joyent server.
+#
+# Note that the GOOS and GOARCH values provided here are for the toolchain to
+# run on this machine: the build machine.  The Go toolchain is a cross
+# compiler, and the GO_GOOS and GO_GOARCH make variables represent the intended
+# _target_ for any executables built with the Go compiler.  Though it is
+# likely, at least for now, that these values are the same in our environment
+# for the build and target machines, they are nonetheless distinct concepts and
+# the use of GO_GOOS and GO_GOARCH here would not be correct.
+#
+$(GO_TARBALL):
+	rm -f $@
+	mkdir -p $(@D)
+	tools/download_go $(GO_PREBUILT_VERSION) solaris amd64 $(CACHE_DIR)
+
+#
+# Extract the Go toolchain.  This stamp includes the version number of the
+# Go toolchain, ensuring a new download and extraction if the version changes.
+#
+$(STAMP_GO_TOOLCHAIN): $(GO_TARBALL)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf $(GO_INSTALL)
+	mkdir $(GO_INSTALL)
+	cd $(GO_INSTALL) && tar xfj $(TOP)/$(GO_TARBALL)
+	$(MAKE_STAMP_CREATE)
