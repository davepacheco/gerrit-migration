commit b4133cac14c007e4fc506b04c8fb7cf505d4cdce (refs/changes/80/80/2)
Author: Dave Pacheco <dap@joyent.com>
Date:   2016-07-14T12:11:03-07:00 (3 years, 3 months ago)
    
    TOOLS-1484 flesh out cr.joyent.us test deployment docs

diff --git a/docs/operator/README.md b/docs/operator/README.md
index c76368d..aa87052 100644
--- a/docs/operator/README.md
+++ b/docs/operator/README.md
@@ -215,6 +215,8 @@ advertises itself as "cr.joyent.us" and has replication to GitHub enabled.  In
 "dev" mode, the server advertises itself as "localhost".  To use it, you would
 typically set up port forwarding on your local system.
 
+**Backing up the stack:**
+
 To back up the stack:
 
     # Stop the application container to get a consistent backup.
@@ -228,15 +230,50 @@ To back up the stack:
 The containers representing the service are automatically located by name (e.g.,
 "gerrit-appserver") using the "docker" tool.
 
-To create a new test environment from a backup, you would typically run:
+Production backups are stored in Manta under
+`/Joyent_Dev/stor/backups/cr.joyent.us`.
+
+**Creating a test environment:**
+
+To create a new test environment from a backup, you'll first need to create a
+GitHub oauth application that you can use for testing.  This is necessary
+because the GitHub application configuration specifies where to redirect clients
+after authentication (e.g., https://cr.joyent.us), and that value is necessarily
+different for your test environment than for production.
+
+You can set up the application in GitHub under your "Settings", under "OAuth
+applications" on the left, then the "Developer Applications" tab, then the
+"Register a new application" button.  The key piece of data is the
+"Authorization callback URL", which should be "https://localhost" to match the
+configuration for a test deployment.  You can reuse this application for all of
+your testing.
+
+To deploy the test stack from a backup, use:
+
+    $ crrestore -n gerrit-test -c CLIENT_ID -s CLIENT_SECRET /path/to/backup/directory
+
+where CLIENT\_ID and CLIENT\_SECRET come from the GitHub OAuth application that
+you set up above.  You can leave off the "-n" option to have the tool pick a
+likely-unique prefix instead.
 
-    crrestore -c CLIENT_ID -s CLIENT_SECRET ./2016-06-12-0
+Once the stack is set up, you'll want to create an ssh tunnel on your system to
+the external IP of the frontdoor container.  For example:
 
-where CLIENT\_ID and CLIENT\_SECRET come from a GitHub oauth application that
-you've set up for testing.  This is necessary because the GitHub application
-configuration specifies what server it's for (e.g., https://cr.joyent.us) and
-redirects clients to that server, so you cannot use the same one for testing
-that we use in production.
+    $ docker inspect gerrit-test-frontdoor | json 0.NetworkSettings.IPAddress
+    10.0.0.35
+
+    $ sudo ssh -L443:10.0.0.35:443 -L30023:10.0.0.35:22 localhost
+
+This will allow you to use `https://localhost` in the browser to access the
+Gerrit web interface and to use ssh to port 30023 on localhost to access the ssh
+interface (including git).  The "crrestore" tool configures the application to
+advertise the corresponding HTTPS and SSH ports on localhost when it displays
+instructions to end users.  (Instead of using localhost, we could change this to
+use any other non-public DNS name and document that people update /etc/hosts
+with the DNS name in order to use it.  That might be more flexible.)
+
+
+**Creating a production deployment:**
 
 For a production deployment, you'd leave out the "-c" and "-s" flags and add
 "-p" (for "production").  It's recommended that you use "-n gerritDATESTAMP" to
@@ -286,8 +323,6 @@ points to the new nginx container.  At that point, it _should_ work, but we've
 seen cases where it didn't.  In that case, try "docker exec" into the frontdoor
 container and send SIGHUP to the nginx process.
 
-
-
 ## References
 
 * https://github.com/openfrontier/docker-gerrit
