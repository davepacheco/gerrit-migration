From 144148387ed378c3cd735f669be0cfbb5ab33b3c Mon Sep 17 00:00:00 2001
From: Dave Pacheco <dap@joyent.com>
Date: Thu, 14 Jul 2016 12:06:09 -0700
Subject: [PATCH] TOOLS-1484 flesh out cr.joyent.us test deployment docs

---
 docs/operator/README.md | 47 ++++++++++++++++++++++++++++++++++-------
 1 file changed, 39 insertions(+), 8 deletions(-)

diff --git a/docs/operator/README.md b/docs/operator/README.md
index c76368d..be120c3 100644
--- a/docs/operator/README.md
+++ b/docs/operator/README.md
@@ -228,15 +228,47 @@ To back up the stack:
 The containers representing the service are automatically located by name (e.g.,
 "gerrit-appserver") using the "docker" tool.
 
-To create a new test environment from a backup, you would typically run:
+**Creating a test environment:**
 
-    crrestore -c CLIENT_ID -s CLIENT_SECRET ./2016-06-12-0
+To create a new test environment from a backup, you'll first need to create a
+GitHub oauth application that you can use for testing.  This is necessary
+because the GitHub application configuration specifies where to redirect clients
+after authentication (e.g., https://cr.joyent.us), and that value is necessarily
+different for your test environment than for production.
 
-where CLIENT\_ID and CLIENT\_SECRET come from a GitHub oauth application that
-you've set up for testing.  This is necessary because the GitHub application
-configuration specifies what server it's for (e.g., https://cr.joyent.us) and
-redirects clients to that server, so you cannot use the same one for testing
-that we use in production.
+You can set up the application in GitHub under your "Settings", under "OAuth
+applications" on the left, then the "Developer Applications" tab, then the
+"Register a new application" button.  The key piece of data is the
+"Authorization callback URL", which should be "https://localhost" to match the
+configuration for a test deployment.  You can reuse this application for all of
+your testing.
+
+To deploy the test stack from a backup, use:
+
+    $ crrestore -n gerrit-test -c CLIENT_ID -s CLIENT_SECRET /path/to/backup/directory
+
+where CLIENT\_ID and CLIENT\_SECRET come from the GitHub OAuth application that
+you set up above.  You can leave off the "-n" option to have the tool pick a
+likely-unique prefix instead.
+
+Once the stack is set up, you'll want to create an ssh tunnel on your system to
+the external IP of the frontdoor container.  For example:
+
+    $ docker inspect gerrit-test-frontdoor | json 0.NetworkSettings.IPAddress
+    10.0.0.35
+
+    $ sudo ssh -L443:10.0.0.35:443 -L30023:10.0.0.35:22 localhost
+
+This will allow you to use `https://localhost` in the browser to access the
+Gerrit web interface and to use ssh to port 30023 on localhost to access the ssh
+interface (including git).  The "crrestore" tool configures the application to
+advertise the corresponding HTTPS and SSH ports on localhost when it displays
+instructions to end users.  (Instead of using localhost, we could change this to
+use any other non-public DNS name and document that people update /etc/hosts
+with the DNS name in order to use it.  That might be more flexible.)
+
+
+**Creating a production deployment:**
 
 For a production deployment, you'd leave out the "-c" and "-s" flags and add
 "-p" (for "production").  It's recommended that you use "-n gerritDATESTAMP" to
@@ -287,7 +319,6 @@ seen cases where it didn't.  In that case, try "docker exec" into the frontdoor
 container and send SIGHUP to the nginx process.
 
 
-
 ## References
 
 * https://github.com/openfrontier/docker-gerrit
-- 
2.21.0

