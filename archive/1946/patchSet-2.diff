commit 74405a627f9c64019eff3e48140bc8f1d5c7bfe0 (refs/changes/46/1946/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-05-17T23:44:51+00:00 (2 years, 5 months ago)
    
    DAPI-340 Allow VMs to provide NIC tag alternatives

diff --git a/lib/endpoints/allocations.js b/lib/endpoints/allocations.js
index 695daac..7238203 100644
--- a/lib/endpoints/allocations.js
+++ b/lib/endpoints/allocations.js
@@ -34,6 +34,7 @@ var ALLOC_VALIDATION_RULES = {
     package:  ['optional', 'isObjectType'],
     image:    ['isObjectType'],
     vm:       ['isObjectType'],
+    nic_tag_requirements: ['optional', 'isArrayType'],
     nic_tags: ['isArrayType']
 };
 
@@ -94,6 +95,7 @@ Allocations.allocate = function handlerAllocationsAllocate(req, res, next) {
     var img     = params.image;
     var pkg     = params.package;
     var vm      = params.vm;
+    var tagreqs = params.nic_tag_requirements;
     var tags    = params.nic_tags;
 
     err = Designation.validations.validateImage(img);
@@ -126,6 +128,16 @@ Allocations.allocate = function handlerAllocationsAllocate(req, res, next) {
         }
     }
 
+    if (tagreqs) {
+        err = Designation.validations.validateNicTagRequirements(tagreqs);
+        if (err) {
+            invalid('nic_tag_requirements', err, res, next);
+            return;
+        }
+    }
+
+    vm.nic_tag_requirements = tagreqs;
+
     for (i = 0; i !== tags.length; i++) {
         if (typeof (tags[i]) !== 'string') {
             invalid('nic_tags', 'invalid nic_tag', res, next);
diff --git a/package.json b/package.json
index 37e6a7d..bcbabf3 100644
--- a/package.json
+++ b/package.json
@@ -9,7 +9,7 @@
     "assert-plus": "1.0.0",
     "async": "1.5.2",
     "bunyan": "1.8.5",
-    "dapi": "git+https://github.com/joyent/sdc-designation.git#f66ba1897f0eafcc3439d0af39555a3bdaebce4c",
+    "dapi": "git+https://github.com/joyent/sdc-designation.git#DAPI-340",
     "deep-equal": "1.0.1",
     "dox": "0.4.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
diff --git a/test/test-allocator.js b/test/test-allocator.js
index 183a7ca..0a7669f 100644
--- a/test/test-allocator.js
+++ b/test/test-allocator.js
@@ -32,7 +32,8 @@ var allocData = {
         min_platform: {'7.0': '20130122T122401Z'},
         cpu_cap: 100
     },
-    nic_tags: ['external', 'admin']
+    nic_tag_requirements: [ [ 'external' ], [ 'admin' ] ],
+    nic_tags: [ 'external', 'admin' ]
 };
 
 
@@ -50,6 +51,11 @@ function setup(callback) {
     }
 
     client.get('/servers?headnode=true', function (err, req, res, servers) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
         headnodeUuid = servers[0].uuid;
         callback();
     });
@@ -103,6 +109,24 @@ function testMissingImg(t) {
 }
 
 
+function testMalformedNicTagRequirements1(t) {
+    var data = deepCopy(allocData);
+    data.nic_tag_requirements = [ 'external', 'admin' ];
+
+    var msg = 'property "0": string value found, but a array is required';
+    callApiErr(t, '/allocate', data, 'nic_tag_requirements', msg);
+}
+
+
+function testMalformedNicTagRequirements2(t) {
+    var data = deepCopy(allocData);
+    data.nic_tag_requirements = [ [ 'external' ], [ 5 ] ];
+
+    var msg = 'property "1[0]": number value found, but a string is required';
+    callApiErr(t, '/allocate', data, 'nic_tag_requirements', msg);
+}
+
+
 // Unfortunately we cannot make too many assumptions about the setup this is
 // tested on, so the tests are fairly generic.
 function testCapacity(t) {
@@ -139,7 +163,9 @@ function testCapacityBadServerUuids(t) {
 function callApiErr(t, path, data, errField, errMsg) {
     client.post(path, data, function (err, req, res, body) {
         t.ok(err);
-        t.equal(err.statusCode, 500);
+        if (err) {
+            t.equal(err.statusCode, 500);
+        }
 
         var expected = {
             code: 'InvalidParameters',
@@ -204,6 +230,10 @@ module.exports = {
     setUp: setup,
     'allocate server': testAllocator,
     'allocate with malformed VM': testMalformedVM,
+    'allocate with malformed tag requirements (array contains strings)':
+        testMalformedNicTagRequirements1,
+    'allocate with malformed tag requirements (inner array contains number)':
+        testMalformedNicTagRequirements2,
     'allocate with malformed server UUIDs': testMalformedServerUuids,
     'allocate with missing nic_tags': testMissingTags,
     'allocate with missing package': testMissingPkg,
