commit a73cd8ffe989a2f195914d1c01a7680da868d1fc (refs/changes/29/3629/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-03-14T18:18:06+00:00 (1 year, 7 months ago)
    
    OS-6631 Change zfs layout for bhyve VM
    OS-6648 when payload is missing image_size, quota is not updated for bhyve's new zfs layout

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 96d93062..e6b9cb72 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -2631,7 +2631,11 @@ function createVolumes(payload, log, callback)
                 }
 
                 d.index = disk_idx;
-                d.uuid = payload.uuid + '-disk' + disk_idx;
+                if (payload.brand === 'bhyve') {
+                    d.uuid = payload.uuid + '/disk' + disk_idx;
+                } else {
+                    d.uuid = payload.uuid + '-disk' + disk_idx;
+                }
                 used_disk_indexes.push(Number(disk_idx));
                 if (!d.hasOwnProperty('zpool')) {
                     d.zpool = payload.zpool;
@@ -3016,6 +3020,29 @@ function createVM(payload, log, callback)
             } else {
                 cb();
             }
+        }, function _createZoneroot(cb) {
+            var args;
+
+            if (payload.brand !== 'bhyve') {
+                cb();
+                return;
+            }
+
+            assert.number(payload.quota, 'payload.quota');
+            assert.string(payload.uuid, 'payload.uuid');
+            assert.string(payload.zpool, 'payload.zpool');
+
+            // For bhyve we want to create the zoneroot here since we want disks
+            // to be child datasets, e.g.:
+            //
+            //  zones/<uuid>/disk0
+            //
+            args = ['create', '-o', 'quota=' + payload.quota + 'G',
+                payload.zpool + '/' + payload.uuid];
+
+            zfs(args, log, function _onZfsCreate(err) {
+                cb(err);
+            });
         }, function (cb) {
             if (!payload.create_only) {
                 // progress(29, 'creating volumes');
@@ -4120,7 +4147,7 @@ function applyZoneDefaults(payload, log)
     }
 
     if (!payload.hasOwnProperty('quota')) {
-        payload.quota = '10'; // in GiB
+        payload.quota = 10; // in GiB
     }
 
     if (!payload.hasOwnProperty('billing_id')) {
@@ -7198,6 +7225,10 @@ function installZone(payload, log, callback)
             // SPICE.
             if (payload.hasOwnProperty('image_uuid')) {
                 args.push('-t', payload.image_uuid, '-x', 'nodataset');
+            } else if (payload.brand === 'bhyve') {
+                // We don't want the brand to create the zoneroot since we
+                // already created it for bhyve VMs when we created the disks.
+                args.push('-x', 'nodataset');
             }
 
             zoneadm(args, log, function (err, fds) {
@@ -9828,6 +9859,50 @@ exports.create = function (payload, options, callback)
                 }
                 cb(err);
             });
+        }, function _fixByveQuota(cb) {
+            var disk;
+            var disks;
+            var idx;
+            var oldQuota;
+
+            // For bhyve, we set quota to quota + the sum of the disk sizes.
+            // This is because here (unlike KVM) the volumes are sub-datasets.
+            // It has to happen after normalizePayload since that will have set
+            // the image_size if the original payload failed to include one.
+            if (payload.brand !== 'bhyve') {
+                cb();
+                return;
+            }
+
+            if (payload.add_disks) {
+                disks = payload.add_disks;
+            } else if (payload.disks) {
+                disks = payload.disks;
+            }
+
+            // These should already have been "normalized"/validated above, and
+            // for bhyve a VM doesn't make sense without disks.
+            assert.number(payload.quota, 'payload.quota');
+            assert.arrayOfObject(disks, 'disks');
+
+            oldQuota = payload.quota;
+            for (idx = 0; idx < disks.length; idx++) {
+                disk = disks[idx];
+
+                if (disk.image_size) {
+                    // image_size is MiB, quota is GiB
+                    payload.quota += Math.ceil(Number(disk.image_size) / 1024);
+                } else if (disk.size) {
+                    payload.quota += Math.ceil(Number(disk.size) / 1024);
+                }
+            }
+
+            log.debug({
+                newQuota: payload.quota,
+                oldQuota: oldQuota
+            }, 'Updated bhyve VM quota to include disks');
+
+            cb();
         }, function (cb) {
             checkDatasetProvisionable(payload, log, function (provisionable) {
                 if (!provisionable) {
