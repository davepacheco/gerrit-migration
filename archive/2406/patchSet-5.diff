commit 1957ce1e3abb5301b66513a8ba9675bbdb40bfbc (refs/changes/06/2406/5)
Author: Ryan Zezeski <rpz@joyent.com>
Date:   2017-08-16T21:34:57-06:00 (2 years, 2 months ago)
    
    OS-6285 restrict zone datalink access

diff --git a/usr/src/uts/common/os/zone.c b/usr/src/uts/common/os/zone.c
index a8993524ac..c885fb604d 100644
--- a/usr/src/uts/common/os/zone.c
+++ b/usr/src/uts/common/os/zone.c
@@ -21,7 +21,7 @@
 
 /*
  * Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2016, Joyent Inc.
+ * Copyright 2017, Joyent Inc.
  * Copyright (c) 2016 by Delphix. All rights reserved.
  */
 
@@ -7645,6 +7645,27 @@ zone_add_datalink(zoneid_t zoneid, datalink_id_t linkid)
 	zone_t *zone;
 	zone_t *thiszone;
 
+	/*
+	 * Only the GZ may add a datalink to a zone's list.
+	 */
+	if (getzoneid() != GLOBAL_ZONEID)
+		return (set_errno(EPERM));
+
+	/*
+	 * Only a process with the datalink config priv may add a
+	 * datalink to a zone's list.
+	 */
+	if (secpolicy_dl_config(CRED()) != 0)
+		return (set_errno(EPERM));
+
+	/*
+	 * When links exist in the GZ, they aren't added to the GZ's
+	 * zone_dl_list. We must enforce this because link_activate()
+	 * depends on zone_check_datalink() returning only NGZs.
+	 */
+	if (zoneid == GLOBAL_ZONEID)
+		return (set_errno(EINVAL));
+
 	if ((thiszone = zone_find_by_id(zoneid)) == NULL)
 		return (set_errno(ENXIO));
 
@@ -7677,6 +7698,26 @@ zone_remove_datalink(zoneid_t zoneid, datalink_id_t linkid)
 	zone_t *zone;
 	int err = 0;
 
+	/*
+	 * Only the GZ may remove a datalink from a zone's list.
+	 */
+	if (getzoneid() != GLOBAL_ZONEID)
+		return (set_errno(EPERM));
+
+	/*
+	 * Only a process with the datalink config priv may remove a
+	 * datalink from a zone's list.
+	 */
+	if (secpolicy_dl_config(CRED()) != 0)
+		return (set_errno(EPERM));
+
+	/*
+	 * If we can't add a datalink to the GZ's zone_dl_list then we
+	 * certainly can't remove them either.
+	 */
+	if (zoneid == GLOBAL_ZONEID)
+		return (set_errno(EINVAL));
+
 	if ((zone = zone_find_by_id(zoneid)) == NULL)
 		return (set_errno(EINVAL));
 
@@ -7697,11 +7738,26 @@ zone_remove_datalink(zoneid_t zoneid, datalink_id_t linkid)
  * Using the zoneidp as ALL_ZONES, we can lookup which zone has been assigned
  * the linkid.  Otherwise we just check if the specified zoneidp has been
  * assigned the supplied linkid.
+ *
+ * The meaning of ENXIO is dependent on the calling zone. When called
+ * from the GZ, ENXIO means the linkid is not under any NGZ. When
+ * called from an NGZ, ENXIO means either a) the link isn't under any
+ * NGZ or b) the link is under an NGZ but not the one that called this
+ * function. This is important to remember because some consumers,
+ * like link_activate(), rely on behavior (a). They must execute in
+ * the GZ to behave correctly.
+ *
+ * To avoid timing attacks, this function iterates the entire zone
+ * list when ALL_ZONES is passed. The more zones there are the longer
+ * this function might take.
+ *
  */
 int
 zone_check_datalink(zoneid_t *zoneidp, datalink_id_t linkid)
 {
 	zone_t *zone;
+	zoneid_t zoneid = *zoneidp;
+	zoneid_t caller = getzoneid();
 	int err = ENXIO;
 
 	if (*zoneidp != ALL_ZONES) {
@@ -7710,19 +7766,36 @@ zone_check_datalink(zoneid_t *zoneidp, datalink_id_t linkid)
 				err = 0;
 			zone_rele(zone);
 		}
-		return (err);
+		goto done;
 	}
 
+	/*
+	 * Perform the entire loop even after the zone is found to
+	 * prevent leaking information via timing.
+	 */
 	mutex_enter(&zonehash_lock);
 	for (zone = list_head(&zone_active); zone != NULL;
 	    zone = list_next(&zone_active, zone)) {
 		if (zone_dl_exists(zone, linkid)) {
-			*zoneidp = zone->zone_id;
+			zoneid = zone->zone_id;
 			err = 0;
-			break;
 		}
 	}
 	mutex_exit(&zonehash_lock);
+
+done:
+	/*
+	 * If we found the link and the calling zone is allowed to
+	 * know then make sure the zoneidp is set and err is set to 0.
+	 * Otherwise, make sure err is reset to ENXIO in the case
+	 * where we found the link but we don't want to share that
+	 * information with the caller.
+	 */
+	if ((err == 0) && ((caller == zoneid) || (caller == GLOBAL_ZONEID)))
+		*zoneidp = zoneid;
+	else
+		err = ENXIO;
+
 	return (err);
 }
 
@@ -7743,6 +7816,12 @@ zone_list_datalink(zoneid_t zoneid, int *nump, datalink_id_t *idarray)
 	zone_dl_t *zdl;
 	datalink_id_t *idptr = idarray;
 
+	/*
+	 * Only the GZ or the owning zone may look at the datalink list.
+	 */
+	if ((getzoneid() != GLOBAL_ZONEID) && (getzoneid() != zoneid))
+		return (set_errno(EPERM));
+
 	if (copyin(nump, &dlcount, sizeof (dlcount)) != 0)
 		return (set_errno(EFAULT));
 	if ((zone = zone_find_by_id(zoneid)) == NULL)
