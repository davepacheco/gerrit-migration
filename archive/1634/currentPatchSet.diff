From fa7a62fdd934e4a6e2def87d7ce5021d328d1ec5 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Wed, 8 Mar 2017 16:22:33 -0500
Subject: [PATCH] OS-6004 want svcadm restart synchronous option

---
 usr/src/cmd/svc/svcadm/svcadm.c | 98 ++++++++++++++++++++++++++++++++-
 usr/src/man/man1m/svcadm.1m     |  8 ++-
 2 files changed, 103 insertions(+), 3 deletions(-)

diff --git a/usr/src/cmd/svc/svcadm/svcadm.c b/usr/src/cmd/svc/svcadm/svcadm.c
index ac698930d4..b6052e2028 100644
--- a/usr/src/cmd/svc/svcadm/svcadm.c
+++ b/usr/src/cmd/svc/svcadm/svcadm.c
@@ -24,7 +24,7 @@
  */
 
 /*
- * Copyright 2015, Joyent, Inc. All rights reserved.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -1856,6 +1856,87 @@ out:
 	return (0);
 }
 
+/* ARGSUSED */
+static int
+wait_fmri_restarted(void *data, scf_walkinfo_t *wip)
+{
+	scf_propertygroup_t *pg = NULL;
+	char state[MAX_SCF_STATE_STRING_SZ];
+	boolean_t went_offline = B_FALSE;
+
+	assert(wip->inst != NULL);
+	assert(wip->pg == NULL);
+
+	do {
+		if (pg)
+			scf_pg_destroy(pg);
+		if (inst_get_state(wip->inst, state, wip->fmri, &pg) != 0) {
+			exit_status = EXIT_SVC_FAILURE;
+			return (0);
+		}
+
+		if (!is_enabled(wip->inst)) {
+			/*
+			 * The service is disabled, exit successfully
+			 */
+			goto out;
+		}
+
+		if (strcmp(state, SCF_STATE_STRING_OFFLINE) == 0) {
+			/*
+			 * Record that the service went to the offline state
+			 */
+			went_offline = B_TRUE;
+		} else if (strcmp(state, SCF_STATE_STRING_ONLINE) == 0) {
+			/*
+			 * Exit successfully here if the service has
+			 * transitioned from the offline state
+			 */
+			if (went_offline) {
+				goto out;
+			}
+		} else if (strcmp(state, SCF_STATE_STRING_MAINT) == 0) {
+			/*
+			 * The service is in maintenance, can't continue
+			 */
+			uu_warn(gettext("Instance \"%s\" is in maintenance"
+			    " state.\n"), wip->fmri);
+			exit_status = EXIT_SVC_FAILURE;
+			goto out;
+		} else if (strcmp(state, SCF_STATE_STRING_DEGRADED) == 0) {
+			/*
+			 * The service is degraded, can't continue
+			 */
+			uu_warn(gettext("Instance \"%s\" is degraded.\n"),
+			    wip->fmri);
+			exit_status = EXIT_SVC_FAILURE;
+			goto out;
+		}
+
+		if (!has_potential(wip->inst, B_FALSE)) {
+			/*
+			 * Our dependencies aren't met.  We'll never
+			 * amount to anything.
+			 */
+			uu_warn(gettext("Instance \"%s\" has unsatisfied"
+			    " dependencies.\n"), wip->fmri);
+			/*
+			 * EXIT_SVC_FAILURE takes precedence over
+			 * EXIT_DEP_FAILURE
+			 */
+			if (exit_status == 0)
+				exit_status = EXIT_DEP_FAILURE;
+			goto out;
+		}
+	} while (_scf_pg_wait(pg, WAIT_INTERVAL) >= 0);
+	scfdie();
+	/* NOTREACHED */
+
+out:
+	scf_pg_destroy(pg);
+	return (0);
+}
+
 /* ARGSUSED */
 static int
 clear_instance(void *data, scf_walkinfo_t *wip)
@@ -2425,12 +2506,16 @@ again:
 
 	} else if (strcmp(argv[optind], "restart") == 0) {
 		boolean_t do_dump = B_FALSE;
+		boolean_t do_wait = B_FALSE;
+		int error = 0;
 
 		++optind;
 
-		while ((o = getopt(argc, argv, "d")) != -1) {
+		while ((o = getopt(argc, argv, "ds")) != -1) {
 			if (o == 'd')
 				do_dump = B_TRUE;
+			if (o == 's')
+				do_wait = B_TRUE;
 			else if (o == '?')
 				usage();
 			else {
@@ -2460,11 +2545,20 @@ again:
 		if ((err = scf_walk_fmri(h, argc, argv, WALK_FLAGS,
 		    set_fmri_action, (void *)SCF_PROPERTY_RESTART, &exit_status,
 		    pr_warn)) != 0) {
+			pr_warn(gettext("failed to iterate over "
+			    "instances: %s\n"), scf_strerror(err));
+			exit_status = UU_EXIT_FATAL;
+		} else if (do_wait && exit_status == 0 &&
+		    (err = scf_walk_fmri(h, argc, argv, WALK_FLAGS,
+		    wait_fmri_restarted, NULL, &error, quiet)) != 0) {
+
 			pr_warn(gettext("failed to iterate over "
 			    "instances: %s\n"), scf_strerror(err));
 			exit_status = UU_EXIT_FATAL;
 		}
 
+		if (error > 0)
+			exit_status = error;
 	} else if (strcmp(argv[optind], "refresh") == 0) {
 		++optind;
 		argc -= optind;
diff --git a/usr/src/man/man1m/svcadm.1m b/usr/src/man/man1m/svcadm.1m
index 1d647304b2..df66e58f32 100644
--- a/usr/src/man/man1m/svcadm.1m
+++ b/usr/src/man/man1m/svcadm.1m
@@ -21,7 +21,7 @@ svcadm \- manipulate service instances
 
 .LP
 .nf
-\fB/usr/sbin/svcadm\fR [\fB-S state\fR] [\fB-v\fR] [\fB-Z\fR | \fB-z\fR \fIzone\fR] restart [\fB-d\fR] 
+\fB/usr/sbin/svcadm\fR [\fB-S state\fR] [\fB-v\fR] [\fB-Z\fR | \fB-z\fR \fIzone\fR] restart [\fB-ds\fR]
      [{\fIFMRI\fR | \fIpattern\fR}...]
 .fi
 
@@ -186,6 +186,12 @@ degraded states, as those states are defined in \fBsmf\fR(5).
 If the \fB-d\fR option is specified, the restarter sends a \fBSIGABRT\fR to all
 members of the contract, which should cause a core dump, before restarting
 the service.
+.sp
+If the \fB-s\fR option is specified, \fBsvcadm\fR restarts each service instance
+and then waits for each service instance to transition to the \fBoffline\fR
+state followed by the \fBonline\fR state. \fBsvcadm\fR will return early if it
+determines that the service cannot reach these states without administrator
+intervention.
 .RE
 
 .sp
-- 
2.21.0

