From dd6ca780a83cfff32df78211453d99644d0a91af Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Wed, 14 Jun 2017 18:24:20 +0000
Subject: [PATCH] OS-6046 gettid incorrect for first thread in init process

---
 usr/src/uts/common/brand/lx/syscall/lx_futex.c  | 8 ++++++--
 usr/src/uts/common/brand/lx/syscall/lx_getpid.c | 5 +++--
 usr/src/uts/intel/lx_brand/Makefile             | 2 ++
 3 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_futex.c b/usr/src/uts/common/brand/lx/syscall/lx_futex.c
index ff65a38fb2..de92ae4864 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_futex.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_futex.c
@@ -822,7 +822,7 @@ futex_lock_pi(memid_t *memid, uint32_t *addr, timespec_t *timeout,
 	int fpri, mypri;
 	int err;
 	int index;
-	pid_t mytid = lwpd->br_pid;
+	pid_t mytid;
 	pid_t ftid;			/* current futex holder tid */
 	proc_t *fproc = NULL;		/* current futex holder proc */
 	kthread_t *fthrd;		/* current futex holder thread */
@@ -831,6 +831,8 @@ futex_lock_pi(memid_t *memid, uint32_t *addr, timespec_t *timeout,
 	if ((uintptr_t)addr >= KERNELBASE)
 		return (set_errno(EFAULT));
 
+	mytid = (lwpd->br_pid == curzone->zone_proc_initpid ? 1 : lwpd->br_pid);
+
 	/*
 	 * Have to take mutex first to prevent the following race with unlock:
 	 * a) T1 sees a tid in the futex and atomically sets FUTEX_WAITERS.
@@ -1059,7 +1061,7 @@ futex_unlock_pi(memid_t *memid, uint32_t *addr, pid_t clean_tid)
 	lx_lwp_data_t *lwpd = ttolxlwp(t);
 	fwaiter_t *fwp, *fnd_fwp;
 	uint32_t curval;
-	pid_t mytid = lwpd->br_pid;
+	pid_t mytid;
 	pid_t holder_tid;
 	int index;
 	int hipri;
@@ -1068,6 +1070,8 @@ futex_unlock_pi(memid_t *memid, uint32_t *addr, pid_t clean_tid)
 	if ((uintptr_t)addr >= KERNELBASE)
 		return (EFAULT);
 
+	mytid = (lwpd->br_pid == curzone->zone_proc_initpid ? 1 : lwpd->br_pid);
+
 	/* See comment in futex_lock_pi for why we take the mutex first. */
 	index = HASH_FUNC(memid);
 	mutex_enter(&futex_hash[index].fh_lock);
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_getpid.c b/usr/src/uts/common/brand/lx/syscall/lx_getpid.c
index 4cef3196c9..a50f54f964 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_getpid.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_getpid.c
@@ -23,7 +23,7 @@
  * Use is subject to license terms.
  */
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/zone.h>
@@ -71,5 +71,6 @@ lx_gettid(void)
 {
 	lx_lwp_data_t *lwpd = ttolxlwp(curthread);
 
-	return (lwpd->br_pid);
+	return (lwpd->br_pid == curproc->p_zone->zone_proc_initpid ?
+	    1 : lwpd->br_pid);
 }
diff --git a/usr/src/uts/intel/lx_brand/Makefile b/usr/src/uts/intel/lx_brand/Makefile
index 819c22566c..69aa3d9b2b 100644
--- a/usr/src/uts/intel/lx_brand/Makefile
+++ b/usr/src/uts/intel/lx_brand/Makefile
@@ -71,6 +71,8 @@ CFLAGS		+= $(CCVERBOSE)
 LDFLAGS		+= -dy -Nexec/elfexec -Nfs/fifofs -Nfs/sockfs -Ndrv/ip \
 		    -Nfs/zfs -Nmisc/klmmod
 
+$(OBJS_DIR)/lx_futex.o :=       CFLAGS += -_gcc=-Wno-clobbered
+
 #
 # For now, disable these lint checks; maintainers should endeavor
 # to investigate and remove these for maximum lint coverage.
-- 
2.21.0

