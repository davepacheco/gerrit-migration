commit cfb08136cd379b07dbd25ca829ccc36adf6ba9a3 (refs/changes/57/2157/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-06-27T15:27:03-07:00 (2 years, 3 months ago)
    
    DOCKER-1074 cli-local-volumes.test.js fails for docker client <= 1.9.1

diff --git a/test/integration/cli-local-volumes.test.js b/test/integration/cli-local-volumes.test.js
index f12414a..0015d40 100644
--- a/test/integration/cli-local-volumes.test.js
+++ b/test/integration/cli-local-volumes.test.js
@@ -25,6 +25,9 @@ var STATE = {
     log: require('../lib/log')
 };
 
+var DOCKER_CLIENT_VERSION =
+    common.parseDockerVersion(process.env.DOCKER_CLI_VERSION);
+
 test('setup', function (tt) {
     tt.test('docker env', function (t) {
         dockerTestsHelper.initDockerEnv(t, STATE, {}, function (err, accounts) {
@@ -57,11 +60,26 @@ test('docker local volumes', function (tt) {
 
     tt.test('creating container with non-absolute mount should fail',
         function (t) {
+            var expectedClientErr;
+            var expectedCliErr;
+
+            if (DOCKER_CLIENT_VERSION.major <= 1
+                && DOCKER_CLIENT_VERSION.minor <= 9
+                && DOCKER_CLIENT_VERSION.patch <= 1) {
+                expectedClientErr =
+                    'invalid value "data" for flag -v: data is not an absolute '
+                        + 'path';
+            } else {
+                expectedCliErr =
+                    'Error response from daemon: Invalid volume name "data" '
+                        + 'must start with "/"';
+            }
+
             cli.create(t, {
                 args: '--name ' + containerWithLocalVolName + '0 -v data '
                     + 'nginx:latest /bin/sh',
-                expectedErr: 'Error response from daemon: Invalid volume name '
-                    + '"data" must start with "/"'
+                expectedErr: expectedCliErr,
+                expectedClientErr: expectedClientErr
             }, function onContainerCreate(err, output) {
                 t.ok(err, 'expected error creating container');
                 t.end();
@@ -70,11 +88,26 @@ test('docker local volumes', function (tt) {
 
     tt.test('creating container with volume starting with \':\' should fail',
         function (t) {
+            var expectedClientErr;
+            var expectedCliErr;
+
+            if (DOCKER_CLIENT_VERSION.major <= 1
+                && DOCKER_CLIENT_VERSION.minor <= 9
+                && DOCKER_CLIENT_VERSION.patch <= 1) {
+                expectedClientErr =
+                    'invalid value ":/mnt" for flag -v: bad format for path: '
+                        + ':/mnt';
+            } else {
+                expectedCliErr =
+                    'Error response from daemon: Invalid volume name ":/mnt" '
+                        + 'must start with "/"';
+            }
+
             cli.create(t, {
                 args: '--name ' + containerWithLocalVolName + '0 -v :/mnt '
                     + 'nginx:latest /bin/sh',
-                expectedErr: 'Error response from daemon: Invalid volume name '
-                    + '":/mnt" must start with "/"'
+                expectedErr: expectedCliErr,
+                expectedClientErr: expectedClientErr
             }, function onContainerCreate(err, output) {
                 t.ok(err, 'expected error creating container');
                 t.end();
@@ -83,11 +116,24 @@ test('docker local volumes', function (tt) {
 
     tt.test('creating container with volume target \'/\' should fail',
         function (t) {
+            var expectedClientErr;
+            var expectedCliErr;
+
+            if (DOCKER_CLIENT_VERSION.major <= 1
+                && DOCKER_CLIENT_VERSION.minor <= 9
+                && DOCKER_CLIENT_VERSION.patch <= 1) {
+                expectedClientErr =
+                    'docker: Invalid volume: path can\'t be \'/\'.';
+            } else {
+                expectedCliErr = 'Error response from daemon: Invalid volume '
+                    + 'name: must contain at least one non-/ character';
+            }
+
             cli.create(t, {
                 args: '--name ' + containerWithLocalVolName + '0 -v / '
                     + 'nginx:latest /bin/sh',
-                expectedErr: 'Error response from daemon: Invalid volume name: '
-                    + 'must contain at least one non-/ character'
+                expectedErr: expectedCliErr,
+                expectedClientErr: expectedClientErr
             }, function onContainerCreate(err, output) {
                 t.ok(err, 'expected error creating container');
                 t.end();
diff --git a/test/lib/cli.js b/test/lib/cli.js
index fe5a5f3..f6945b7 100644
--- a/test/lib/cli.js
+++ b/test/lib/cli.js
@@ -314,7 +314,16 @@ function cliCreate(t, opts, callback) {
 
             common.expCliErr(t, stderr, opts.expectedErr, callback);
             return;
+        } else if (opts.expectedClientErr) {
+            if (id) {
+                t.ok(false, 'expected error but got ID: ' + id);
+            }
 
+            t.ok(stderr && stderr.indexOf(opts.expectedClientErr) === 0,
+                'expected error message to be: ' + opts.expectedClientErr
+                    + ' and is: ' + stderr);
+            callback(stderr);
+            return;
         } else {
             t.ifErr(err, 'docker create');
             // Docker create may need to download the image, which produces
diff --git a/test/lib/common.js b/test/lib/common.js
index b139a06..ff30667 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -345,6 +345,37 @@ function parseOutputUsingHeader(stdout, opts) {
     return entries;
 }
 
+function parseDockerVersion(dockerVersionString) {
+    assert.string(dockerVersionString, 'dockerVersionString');
+
+    var dockerVersionRegExp = /^(\d+)\.(\d+)\.(\d+)(\-[a-z0-9]+)?$/;
+    var matches = dockerVersionString.match(dockerVersionRegExp);
+    var major, minor, patch, label;
+
+    if (!matches) {
+        return null;
+    }
+
+    major = Number(matches[1]);
+    minor = Number(matches[2]);
+    patch = Number(matches[3]);
+    label = matches[4];
+    if (label !== undefined) {
+        label = label.substr(1);
+    }
+
+    // major, minor and patch version info are mandatory, label is optional
+    if (isNaN(major) || isNaN(minor) || isNaN(patch)) {
+        return null;
+    }
+
+    return {
+        major: major,
+        minor: minor,
+        patch: patch,
+        label: label
+    };
+}
 
 module.exports = {
     constants: constants,
@@ -357,6 +388,7 @@ module.exports = {
     makeContainerName: makeContainerName,
     makeImageName: makeImageName,
     objCopy: objCopy,
+    parseDockerVersion: parseDockerVersion,
     parseOutputUsingHeader: parseOutputUsingHeader,
     partialExp: partialExp
 };
