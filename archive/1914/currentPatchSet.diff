commit 96ae7732204b296fd569cecc78fa6c8a6a867017 (refs/changes/14/1914/5)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-05-16T00:08:00+00:00 (2 years, 5 months ago)
    
    NAPI-415 Want tests for manipulating and querying IPv6 addresses
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Nick Zivkovic <nick.zivkovic@joyent.com>

diff --git a/test/lib/common.js b/test/lib/common.js
index 3fb8da9..eff72a2 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -570,7 +570,7 @@ function assertArgs(t, opts, callback) {
     assert.optionalObject(opts.partialExp, 'opts.partialExp');
     assert.ok(opts.exp || opts.partialExp || opts.expErr,
         'one of exp, expErr, partialExp required');
-    assert.object(opts.params, 'opts.params');
+    assert.optionalObject(opts.params, 'opts.params');
     assert.optionalObject(opts.state, 'opts.state');
     assert.optionalFunc(callback, 'callback');
 }
diff --git a/test/lib/ip.js b/test/lib/ip.js
index ab5f477..1019d8f 100644
--- a/test/lib/ip.js
+++ b/test/lib/ip.js
@@ -20,10 +20,6 @@ var common = require('./common');
 var log = require('./log');
 var mod_client = require('./client');
 
-var doneRes = common.doneRes;
-var doneErr = common.doneErr;
-
-
 
 // --- Globals
 
@@ -55,21 +51,16 @@ function freeIPrecord(net, ip) {
  */
 function getIP(t, opts, callback) {
     var client = opts.client || mod_client.get();
-    var desc = opts.desc ? (' ' + opts.desc) : '';
 
-    assert.object(t, 't');
+    common.assertArgs(t, opts, callback);
     assert.string(opts.net, 'opts.net');
     assert.string(opts.ip, 'opts.ip');
-    assert.object(opts.exp, 'opts.exp');
 
-    client.getIP(opts.net, opts.ip, function (err, res) {
-        if (common.ifErr(t, err, 'get IP ' + opts.ip + desc)) {
-            return doneErr(err, t, callback);
-        }
+    opts.type = TYPE;
+    opts.reqType = 'get';
 
-        t.deepEqual(res, opts.exp, 'full result' + desc);
-        return doneRes(res, t, callback);
-    });
+    client.getIP(opts.net, opts.ip, opts.params || {},
+        common.afterAPIcall.bind(null, t, opts, callback));
 }
 
 
@@ -122,22 +113,16 @@ function searchIPs(t, opts, callback) {
  */
 function updateIP(t, opts, callback) {
     var client = opts.client || mod_client.get();
-    var desc = opts.desc ? (' ' + opts.desc) : '';
 
-    assert.object(t, 't');
+    common.assertArgs(t, opts, callback);
     assert.string(opts.net, 'opts.net');
     assert.string(opts.ip, 'opts.ip');
-    assert.object(opts.params, 'opts.params');
-    assert.object(opts.exp, 'opts.exp');
 
-    client.updateIP(opts.net, opts.ip, opts.params, function (err, res) {
-        if (common.ifErr(t, err, 'update IP ' + opts.ip + desc)) {
-            return doneErr(err, t, callback);
-        }
+    opts.type = TYPE;
+    opts.reqType = 'update';
 
-        t.deepEqual(res, opts.exp, 'full result' + desc);
-        return doneRes(res, t, callback);
-    });
+    client.updateIP(opts.net, opts.ip, opts.params,
+        common.afterAPIcall.bind(null, t, opts, callback));
 }
 
 
diff --git a/test/unit/ips.test.js b/test/unit/ips.test.js
index f93597b..aa76bde 100644
--- a/test/unit/ips.test.js
+++ b/test/unit/ips.test.js
@@ -19,8 +19,9 @@ var clone = require('clone');
 var common = require('../lib/common');
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
-var mod_uuid = require('node-uuid');
+var mod_ip = require('../lib/ip');
 var mod_server = require('../lib/server');
+var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
@@ -33,8 +34,11 @@ var vasync = require('vasync');
 
 var MORAY_IPV4 = '10.0.2.15';
 var NON_MORAY_IPV4 = '10.0.2.115';
+var MORAY_IPV6 = 'fd00:3::40e';
+var NON_MORAY_IPV6 = 'fd00:3::34:20f3';
 var NAPI;
 var NETV4;
+var NETV6;
 var INVALID_PARAMS = [
     ['belongs_to_uuid', 'a', 'invalid UUID'],
     ['belongs_to_type', '', 'must not be empty'],
@@ -57,8 +61,11 @@ var MULTIPLE_PARAMS_REQ = [
 
 
 test('Initial setup', function (t) {
-    t.plan(4);
+    h.reset();
+
+    t.plan(6);
     var v4netParams = h.validNetworkParams();
+    var v6netParams = h.validIPv6NetworkParams();
 
     t.test('create client and server', function (t2) {
         h.createClientAndServer(function (err, res) {
@@ -87,12 +94,27 @@ test('Initial setup', function (t) {
         });
     });
 
+    t.test('create v6 network', function (t2) {
+        NAPI.createNetwork(v6netParams, function (err, res) {
+            NETV6 = res;
+            h.ifErr(t2, err, 'create network');
+            t2.end();
+        });
+    });
+
     t.test('add IPv4 address to moray', function (t2) {
         NAPI.updateIP(NETV4.uuid, MORAY_IPV4, { reserved: true },
             function (err) {
             h.ifErr(t2, err, 'add IP to moray');
+            t2.end();
+        });
+    });
 
-            return t2.end();
+    t.test('add IPv6 address to moray', function (t2) {
+        NAPI.updateIP(NETV6.uuid, MORAY_IPV6, { reserved: true },
+            function (err) {
+            h.ifErr(t2, err, 'add IP to moray');
+            t2.end();
         });
     });
 });
@@ -103,19 +125,27 @@ test('Initial setup', function (t) {
 
 
 test('Get IPv4 - non-existent network', function (t) {
-    NAPI.getIP(mod_uuid.v4(), '1.2.3.4', function (err, res) {
-        t.ok(err, 'error returned');
-        if (!err) {
-            return t.end();
+    mod_ip.get(t, {
+        net: mod_uuid.v4(),
+        ip: '1.2.3.4',
+        expCode: 404,
+        expErr: {
+            code: 'ResourceNotFound',
+            message: 'network not found'
         }
+    });
+});
+
 
-        t.equal(err.statusCode, 404, 'status code');
-        t.deepEqual(err.body, {
+test('Get IPv6 - non-existent network', function (t) {
+    mod_ip.get(t, {
+        net: mod_uuid.v4(),
+        ip: 'fd00::40e',
+        expCode: 404,
+        expErr: {
             code: 'ResourceNotFound',
             message: 'network not found'
-        }, 'Error body');
-
-        return t.end();
+        }
     });
 });
 
@@ -127,26 +157,20 @@ test('Get IPv4 - outside subnet', function (t) {
         '8.8.8.8'
     ];
 
-    vasync.forEachParallel({
-        inputs: invalid,
-        func: function (ip, cb) {
-            NAPI.getIP(NETV4.uuid, ip, function (err, res) {
-                t.ok(err, 'error returned: ' + ip);
-                if (!err) {
-                    return cb();
-                }
+    t.plan(invalid.length);
 
-                t.equal(err.statusCode, 404, 'status code');
-                t.deepEqual(err.body, {
+    invalid.forEach(function (ip) {
+        t.test('Get ' + ip, function (t2) {
+            mod_ip.get(t2, {
+                net: NETV4.uuid,
+                ip: ip,
+                expCode: 404,
+                expErr: {
                     code: 'ResourceNotFound',
                     message: 'IP is not in subnet'
-                }, 'Error body');
-
-                return cb();
+                }
             });
-        }
-    }, function () {
-        return t.end();
+        });
     });
 });
 
@@ -158,26 +182,20 @@ test('Get IPv6 - subnet has different address family', function (t) {
         '2001:4860:4860::8888'
     ];
 
-    vasync.forEachParallel({
-        inputs: invalid,
-        func: function (ip, cb) {
-            NAPI.getIP(NETV4.uuid, ip, function (err, res) {
-                t.ok(err, 'error returned: ' + ip);
-                if (!err) {
-                    return cb();
-                }
+    t.plan(invalid.length);
 
-                t.equal(err.statusCode, 404, 'status code');
-                t.deepEqual(err.body, {
+    invalid.forEach(function (ip) {
+        t.test('Get ' + ip, function (t2) {
+            mod_ip.get(t2, {
+                net: NETV4.uuid,
+                ip: ip,
+                expCode: 404,
+                expErr: {
                     code: 'ResourceNotFound',
                     message: 'IP and subnet are of different address families'
-                }, 'Error body');
-
-                return cb();
+                }
             });
-        }
-    }, function () {
-        return t.end();
+        });
     });
 });
 
@@ -188,66 +206,76 @@ test('Get IP - invalid', function (t) {
         '10.0.2.256'
     ];
 
-    vasync.forEachParallel({
-        inputs: invalid,
-        func: function (ip, cb) {
-            NAPI.getIP(NETV4.uuid, ip, function (err, res) {
-                t.ok(err, 'error returned: ' + ip);
-                if (!err) {
-                    return cb();
-                }
+    t.plan(invalid.length);
 
-                t.equal(err.statusCode, 404, 'status code');
-                t.deepEqual(err.body, {
+    invalid.forEach(function (ip) {
+        t.test('Get ' + ip, function (t2) {
+            mod_ip.get(t2, {
+                net: NETV4.uuid,
+                ip: ip,
+                expCode: 404,
+                expErr: {
                     code: 'ResourceNotFound',
                     message: 'Invalid IP address'
-                }, 'Error body');
-
-                return cb();
+                }
             });
-        }
-    }, function () {
-        return t.end();
+        });
     });
 });
 
 
 test('Get IPv4 - record not in moray', function (t) {
-    NAPI.getIP(NETV4.uuid, NON_MORAY_IPV4, function (err, obj, req, res) {
-        t.ifError(err, 'error returned');
-        if (err) {
-            return t.end();
-        }
-
-        t.equal(res.statusCode, 200, 'status code');
-        t.deepEqual(obj, {
+    mod_ip.get(t, {
+        net: NETV4.uuid,
+        ip: NON_MORAY_IPV4,
+        exp: {
             ip: NON_MORAY_IPV4,
             network_uuid: NETV4.uuid,
             reserved: false,
             free: true
-        }, 'response');
-
-        return t.end();
+        }
     });
 });
 
 
 test('Get IPv4 - record in moray', function (t) {
-    NAPI.getIP(NETV4.uuid, MORAY_IPV4, function (err, obj, req, res) {
-        t.ifError(err, 'error returned');
-        if (err) {
-            return t.end();
-        }
-
-        t.equal(res.statusCode, 200, 'status code');
-        t.deepEqual(obj, {
+    mod_ip.get(t, {
+        net: NETV4.uuid,
+        ip: MORAY_IPV4,
+        exp: {
             ip: MORAY_IPV4,
             network_uuid: NETV4.uuid,
             reserved: true,
             free: false
-        }, 'response');
+        }
+    });
+});
 
-        return t.end();
+
+test('Get IPv6 - record not in moray', function (t) {
+    mod_ip.get(t, {
+        net: NETV6.uuid,
+        ip: NON_MORAY_IPV6,
+        exp: {
+            ip: NON_MORAY_IPV6,
+            network_uuid: NETV6.uuid,
+            reserved: false,
+            free: true
+        }
+    });
+});
+
+
+test('Get IPv6 - record in moray', function (t) {
+    mod_ip.get(t, {
+        net: NETV6.uuid,
+        ip: MORAY_IPV6,
+        exp: {
+            ip: MORAY_IPV6,
+            network_uuid: NETV6.uuid,
+            reserved: true,
+            free: false
+        }
     });
 });
 
@@ -258,39 +286,33 @@ test('Get IPv4 - record in moray', function (t) {
 
 
 test('Update IP - invalid network', function (t) {
-    NAPI.updateIP('doesnotexist', '1.2.3.4', { reserved: true },
-        function (err, res) {
-        t.ok(err, 'error returned');
-        if (!err) {
-            return t.end();
-        }
-
-        t.equal(err.statusCode, 404, 'status code');
-        t.deepEqual(err.body, {
+    mod_ip.update(t, {
+        net: 'doesnotexist',
+        ip: '1.2.3.4',
+        params: {
+            reserved: true
+        },
+        expCode: 404,
+        expErr: {
             code: 'ResourceNotFound',
             message: 'network not found'
-        }, 'Error body');
-
-        return t.end();
+        }
     });
 });
 
 
 test('Update IP - non-existent network', function (t) {
-    NAPI.updateIP(mod_uuid.v4(), '1.2.3.4', { reserved: true },
-        function (err, res) {
-        t.ok(err, 'error returned');
-        if (!err) {
-            return t.end();
-        }
-
-        t.equal(err.statusCode, 404, 'status code');
-        t.deepEqual(err.body, {
+    mod_ip.update(t, {
+        net: mod_uuid.v4(),
+        ip: '1.2.3.4',
+        params: {
+            reserved: true
+        },
+        expCode: 404,
+        expErr: {
             code: 'ResourceNotFound',
             message: 'network not found'
-        }, 'Error body');
-
-        return t.end();
+        }
     });
 });
 
@@ -304,27 +326,52 @@ test('Update IPv4 - outside subnet', function (t) {
         '8.8.8.8'
     ];
 
-    vasync.forEachParallel({
-        inputs: invalid,
-        func: function (ip, cb) {
-            NAPI.updateIP(NETV4.uuid, ip, { reserved: true },
-                function (err, res) {
-                t.ok(err, 'error returned: ' + ip);
-                if (!err) {
-                    return cb();
+    t.plan(invalid.length);
+
+    invalid.forEach(function (ip) {
+        t.test('Update ' + ip, function (t2) {
+            mod_ip.update(t2, {
+                net: NETV4.uuid,
+                ip: ip,
+                params: {
+                    reserved: true
+                },
+                expCode: 404,
+                expErr: {
+                    code: 'ResourceNotFound',
+                    message: 'IP is not in subnet'
                 }
+            });
+        });
+    });
+});
 
-                t.equal(err.statusCode, 404, 'status code');
-                t.deepEqual(err.body, {
+
+test('Update IPv6 - outside subnet', function (t) {
+    var invalid = [
+        'fe80::92b8:d0ff:fe4b:c73b',
+        '2001:4860:4860::8888',
+        'fc00:1:2::623',
+        '::'
+    ];
+
+    t.plan(invalid.length);
+
+    invalid.forEach(function (ip) {
+        t.test('Update ' + ip, function (t2) {
+            mod_ip.update(t2, {
+                net: NETV6.uuid,
+                ip: ip,
+                params: {
+                    reserved: true
+                },
+                expCode: 404,
+                expErr: {
                     code: 'ResourceNotFound',
                     message: 'IP is not in subnet'
-                }, 'Error body');
-
-                return cb();
+                }
             });
-        }
-    }, function () {
-        return t.end();
+        });
     });
 });
 
@@ -335,27 +382,23 @@ test('Update IP - invalid', function (t) {
         '10.0.2.256'
     ];
 
-    vasync.forEachParallel({
-        inputs: invalid,
-        func: function (ip, cb) {
-            NAPI.updateIP(NETV4.uuid, ip, { reserved: true },
-                function (err, res) {
-                t.ok(err, 'error returned: ' + ip);
-                if (!err) {
-                    return cb();
-                }
-
-                t.equal(err.statusCode, 404, 'status code');
-                t.deepEqual(err.body, {
+    t.plan(invalid.length);
+
+    invalid.forEach(function (ip) {
+        t.test('Update ' + ip, function (t2) {
+            mod_ip.update(t2, {
+                net: NETV4.uuid,
+                ip: ip,
+                params: {
+                    reserved: true
+                },
+                expCode: 404,
+                expErr: {
                     code: 'ResourceNotFound',
                     message: 'Invalid IP address'
-                }, 'Error body');
-
-                return cb();
+                }
             });
-        }
-    }, function () {
-        return t.end();
+        });
     });
 });
 
@@ -490,43 +533,37 @@ test('Update IP - invalid param combinations (IP in moray)', function (t) {
 
 test('Update IP - both missing and invalid params (IP not in moray)',
     function (t) {
-    NAPI.updateIP(NETV4.uuid, '10.0.2.4', { belongs_to_uuid: 'asdf' },
-        function (err, res) {
-        t.ok(err, 'error returned');
-        if (!err) {
-            return t.end();
-        }
-
-        t.equal(err.statusCode, 422, 'status code');
-        t.deepEqual(err.body, h.invalidParamErr({
+    mod_ip.update(t, {
+        net: NETV4.uuid,
+        ip: '10.0.2.4',
+        params: {
+            belongs_to_uuid: 'asdf'
+        },
+        expCode: 422,
+        expErr: h.invalidParamErr({
             errors: [
                 mod_err.invalidParam('belongs_to_uuid', 'invalid UUID')
             ]
-        }), 'Error body');
-
-        return t.end();
+        })
     });
 });
 
 
 test('Update IP - both missing and invalid params (IP in moray)', function (t) {
-    NAPI.updateIP(NETV4.uuid, MORAY_IPV4, { belongs_to_uuid: 'asdf' },
-        function (err, res) {
-        t.ok(err, 'error returned');
-        if (!err) {
-            return t.end();
-        }
-
-        t.equal(err.statusCode, 422, 'status code');
-        t.deepEqual(err.body, h.invalidParamErr({
+    mod_ip.update(t, {
+        net: NETV4.uuid,
+        ip: MORAY_IPV4,
+        params: {
+            belongs_to_uuid: 'asdf'
+        },
+        expCode: 422,
+        expErr: h.invalidParamErr({
             errors: [
                 h.missingParam('belongs_to_type', 'Missing parameter'),
                 mod_err.invalidParam('belongs_to_uuid', 'invalid UUID'),
                 h.missingParam('owner_uuid', 'Missing parameter')
             ]
-        }), 'Error body');
-
-        return t.end();
+        })
     });
 });
 
@@ -660,23 +697,18 @@ test('Update IP - free (IP in moray)', function (t) {
 
 
 test('Update IP - free (IP not in moray)', function (t) {
-    NAPI.updateIP(NETV4.uuid, '10.0.2.4', { free: 'true' },
-        function (err, obj, req, res) {
-        t.ifError(err);
-        if (err) {
-            t.deepEqual(err.body, {}, 'error body');
-            return t.end();
-        }
-
-        t.equal(res.statusCode, 200, 'status code');
-        t.deepEqual(obj, {
+    mod_ip.update(t, {
+        net: NETV4.uuid,
+        ip: '10.0.2.4',
+        params: {
+            free: 'true'
+        },
+        exp: {
             free: true,
             ip: '10.0.2.4',
             network_uuid: NETV4.uuid,
             reserved: false
-        }, 'Response');
-
-        return t.end();
+        }
     });
 });
 
@@ -688,50 +720,87 @@ test('Update IPv4 - unassign (IP in moray)', function (t) {
         owner_uuid: mod_uuid.v4()
     };
 
+    // Create record in Moray w/ an initial update:
     NAPI.updateIP(NETV4.uuid, '10.0.2.34', params, function (err) {
         t.ifError(err);
 
-        NAPI.updateIP(NETV4.uuid, '10.0.2.34', { unassign: 'true' },
-            function (err2, obj, req, res) {
-            t.ifError(err2);
-            if (err2) {
-                t.deepEqual(err.body, {}, 'error body');
-                return t.end();
-            }
-
-            t.equal(res.statusCode, 200, 'status code');
-            t.deepEqual(obj, {
+        mod_ip.update(t, {
+            net: NETV4.uuid,
+            ip: '10.0.2.34',
+            params: {
+                unassign: 'true'
+            },
+            exp: {
                 ip: '10.0.2.34',
                 free: false,
                 network_uuid: NETV4.uuid,
                 owner_uuid: params.owner_uuid,
                 reserved: false
-            }, 'Response');
-
-            return t.end();
+            }
         });
     });
 });
 
 
 test('Update IPv4 - unassign (IP not in moray)', function (t) {
-    NAPI.updateIP(NETV4.uuid, '10.0.2.35', { unassign: 'true' },
-        function (err, obj, req, res) {
-        t.ifError(err);
-        if (err) {
-            t.deepEqual(err.body, {}, 'error body');
-            return t.end();
-        }
-
-        t.equal(res.statusCode, 200, 'status code');
-        t.deepEqual(obj, {
+    mod_ip.update(t, {
+        net: NETV4.uuid,
+        ip: '10.0.2.35',
+        params: {
+            unassign: 'true'
+        },
+        exp: {
             ip: '10.0.2.35',
             free: true,
             network_uuid: NETV4.uuid,
             reserved: false
-        }, 'Response');
+        }
+    });
+});
 
-        return t.end();
+
+test('Update IPv6 - unassign (IP in moray)', function (t) {
+    var params = {
+        belongs_to_type: 'server',
+        belongs_to_uuid: mod_uuid.v4(),
+        owner_uuid: mod_uuid.v4()
+    };
+
+    // Create record in Moray w/ an initial update:
+    NAPI.updateIP(NETV6.uuid, 'fd00:3::1234', params, function (err) {
+        t.ifError(err);
+
+        mod_ip.update(t, {
+            net: NETV6.uuid,
+            ip: 'fd00:3::1234',
+            params: {
+                unassign: 'true'
+            },
+            exp: {
+                ip: 'fd00:3::1234',
+                free: false,
+                network_uuid: NETV6.uuid,
+                owner_uuid: params.owner_uuid,
+                reserved: false
+            }
+        });
+    });
+});
+
+
+test('Update IPv6 - unassign (IP not in moray)', function (t) {
+    mod_ip.update(t, {
+        net: NETV6.uuid,
+        ip: 'fd00:3::1235',
+        params: {
+            unassign: 'true'
+        },
+        exp: {
+            ip: 'fd00:3::1235',
+            free: true,
+            network_uuid: NETV6.uuid,
+            reserved: false
+        }
     });
 });
 
@@ -749,7 +818,7 @@ function testIPv4List(t, opts, callback) {
 test('Listing IPv4 failures', function (t) {
     t.plan(common.badLimitOffTests.length);
 
-     for (var i = 0; i < common.badLimitOffTests.length; i++) {
+    for (var i = 0; i < common.badLimitOffTests.length; i++) {
         var blot = common.badLimitOffTests[i];
         t.test(blot.bc_name, function (t2) {
             testIPv4List(t2, {
@@ -762,9 +831,32 @@ test('Listing IPv4 failures', function (t) {
 
 });
 
+function testIPv6List(t, opts, callback) {
+    assert.object(t, 't');
+    opts.type = 'ip';
+    opts.reqType = 'list';
+    NAPI.listIPs(NETV6.uuid, opts.params,
+        common.afterAPIcall.bind(null, t, opts, callback));
+}
 
-// --- Teardown
+test('Listing IPv6 failures', function (t) {
+    t.plan(common.badLimitOffTests.length);
 
+    for (var i = 0; i < common.badLimitOffTests.length; i++) {
+        var blot = common.badLimitOffTests[i];
+        t.test(blot.bc_name, function (t2) {
+            testIPv6List(t2, {
+                params: blot.bc_params,
+                expCode: blot.bc_expcode,
+                expErr: blot.bc_experr
+            });
+        });
+    }
+
+});
+
+
+// --- Teardown
 
 
 test('Stop server', mod_server.close);
diff --git a/test/unit/search-ips.test.js b/test/unit/search-ips.test.js
index c5374d5..a445641 100644
--- a/test/unit/search-ips.test.js
+++ b/test/unit/search-ips.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -32,10 +32,12 @@ var test = require('tape');
 
 
 
-var RESERVED_IP;
+var RESERVED_IPV4;
+var RESERVED_IPV6;
 var NAPI;
 var NETS = [];
-var NOT_IN_MORAY_IP;
+var NOT_IN_MORAY_IPV4;
+var NOT_IN_MORAY_IPV6;
 
 
 
@@ -57,13 +59,23 @@ function uuidSort(a, b) {
 
 
 test('Initial setup', function (t) {
-    var num = h.NET_NUM;
-    var netParams = h.validNetworkParams();
+    h.reset();
+
+    var net1num    = h.NET_NUM;
+    var net1Params = h.validNetworkParams();
     var net2Params = h.validNetworkParams();
+    var net3num    = h.NET_NUM;
     var net3Params = h.validNetworkParams();
+    var net4num    = h.NET_NUM;
+    var net4Params = h.validIPv6NetworkParams();
+    var net5num    = h.NET_NUM;
+    var net5Params = h.validIPv6NetworkParams();
+
+    RESERVED_IPV4 = fmt('10.0.%d.15', net1num);
+    NOT_IN_MORAY_IPV4 = fmt('10.0.%d.19', net3num);
 
-    RESERVED_IP = fmt('10.0.%d.15', num);
-    NOT_IN_MORAY_IP = fmt('10.0.%d.19', h.NET_NUM - 1);
+    RESERVED_IPV6 = fmt('fd00:%d::1234', net4num);
+    NOT_IN_MORAY_IPV6 = fmt('fd00:%d::1235', net5num);
 
     function createNet(params, t2) {
         mod_net.create(t2, {
@@ -90,11 +102,11 @@ test('Initial setup', function (t) {
     });
 
     t.test('create nic tag', function (t2) {
-        mod_nicTag.create(t2, { name: netParams.nic_tag });
+        mod_nicTag.create(t2, { name: net1Params.nic_tag });
     });
 
     t.test('create NETS[0]', function (t2) {
-        createNet(netParams, t2);
+        createNet(net1Params, t2);
     });
 
     t.test('create NETS[1]', function (t2) {
@@ -105,11 +117,27 @@ test('Initial setup', function (t) {
         createNet(net3Params, t2);
     });
 
-    t.test('reserve IP', function (t2) {
-        NAPI.updateIP(NETS[0].uuid, RESERVED_IP, { reserved: true },
+    t.test('create NETS[3]', function (t2) {
+        createNet(net4Params, t2);
+    });
+
+    t.test('create NETS[4]', function (t2) {
+        createNet(net5Params, t2);
+    });
+
+    t.test('reserve IPv4', function (t2) {
+        NAPI.updateIP(NETS[0].uuid, RESERVED_IPV4, { reserved: true },
             function (err) {
             h.ifErr(t2, err, 'reserve IP');
-            return t2.end();
+            t2.end();
+        });
+    });
+
+    t.test('reserve IPv6', function (t2) {
+        NAPI.updateIP(NETS[3].uuid, RESERVED_IPV6, { reserved: true },
+            function (err) {
+            h.ifErr(t2, err, 'reserve IP');
+            t2.end();
         });
     });
 });
@@ -129,12 +157,14 @@ test('provisioned nic', function (t) {
 
     NAPI.provisionNic(NETS[2].uuid, params, function (err, nic) {
         if (h.ifErr(t, err, 'provision')) {
-            return t.end();
+            t.end();
+            return;
         }
 
         NAPI.searchIPs(nic.ip, function (err2, res2) {
             if (h.ifErr(t, err2, 'search')) {
-                return t.end();
+                t.end();
+                return;
             }
 
             t.deepEqual(res2, [
@@ -149,50 +179,96 @@ test('provisioned nic', function (t) {
                 }
             ], 'response');
 
-            return t.end();
+            t.end();
         });
     });
 });
 
 
-test('IP in moray', function (t) {
-    NAPI.searchIPs(RESERVED_IP, function (err, obj, req, res) {
+test('IPv4 in moray', function (t) {
+    NAPI.searchIPs(RESERVED_IPV4, function (err, obj, req, res) {
         if (h.ifErr(t, err, 'search')) {
-            return t.end();
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 200, 'status code');
         t.deepEqual(obj.sort(uuidSort), [
             {
                 free: false,
-                ip: RESERVED_IP,
+                ip: RESERVED_IPV4,
                 reserved: true,
                 network_uuid: NETS[0].uuid
             }
         ]);
 
-        return t.end();
+        t.end();
     });
 });
 
 
-test('IP not in moray', function (t) {
-    NAPI.searchIPs(NOT_IN_MORAY_IP, function (err, obj, req, res) {
+test('IPv4 not in moray', function (t) {
+    NAPI.searchIPs(NOT_IN_MORAY_IPV4, function (err, obj, req, res) {
         if (h.ifErr(t, err, 'search')) {
-            return t.end();
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 200, 'status code');
         t.deepEqual(obj.sort(uuidSort), [
             {
                 free: true,
-                ip: NOT_IN_MORAY_IP,
+                ip: NOT_IN_MORAY_IPV4,
                 reserved: false,
                 network_uuid: NETS[2].uuid
             }
         ]);
 
-        return t.end();
+        t.end();
+    });
+});
+
+
+test('IPv6 in moray', function (t) {
+    NAPI.searchIPs(RESERVED_IPV6, function (err, obj, req, res) {
+        if (h.ifErr(t, err, 'search')) {
+            t.end();
+            return;
+        }
+
+        t.equal(res.statusCode, 200, 'status code');
+        t.deepEqual(obj.sort(uuidSort), [
+            {
+                free: false,
+                ip: RESERVED_IPV6,
+                reserved: true,
+                network_uuid: NETS[3].uuid
+            }
+        ]);
+
+        t.end();
+    });
+});
+
+
+test('IPv6 not in moray', function (t) {
+    NAPI.searchIPs(NOT_IN_MORAY_IPV6, function (err, obj, req, res) {
+        if (h.ifErr(t, err, 'search')) {
+            t.end();
+            return;
+        }
+
+        t.equal(res.statusCode, 200, 'status code');
+        t.deepEqual(obj.sort(uuidSort), [
+            {
+                free: true,
+                ip: NOT_IN_MORAY_IPV6,
+                reserved: false,
+                network_uuid: NETS[4].uuid
+            }
+        ]);
+
+        t.end();
     });
 });
 
@@ -201,7 +277,8 @@ test('Invalid IP', function (t) {
     NAPI.searchIPs('asdf', function (err) {
         t.ok(err, 'error returned');
         if (!err) {
-            return t.end();
+            t.end();
+            return;
         }
 
         t.deepEqual(err.body, h.invalidParamErr({
@@ -210,16 +287,17 @@ test('Invalid IP', function (t) {
             ]
         }), 'Error body');
 
-        return t.end();
+        t.end();
     });
 });
 
 
-test('IP not in any networks', function (t) {
+test('IPv4 not in any networks', function (t) {
     NAPI.searchIPs('1.2.3.4', function (err) {
         t.ok(err, 'error returned');
         if (!err) {
-            return t.end();
+            t.end();
+            return;
         }
 
         t.equal(err.statusCode, 404, 'status code');
@@ -232,6 +310,26 @@ test('IP not in any networks', function (t) {
     });
 });
 
+
+test('IPv6 not in any networks', function (t) {
+    NAPI.searchIPs('fc00::20', function (err) {
+        t.ok(err, 'error returned');
+        if (!err) {
+            t.end();
+            return;
+        }
+
+        t.equal(err.statusCode, 404, 'status code');
+        t.deepEqual(err.body, {
+            code: 'ResourceNotFound',
+            message: constants.msg.SEARCH_NO_NETS
+        }, 'Error body');
+
+        t.end();
+    });
+});
+
+
 test('Search', function (t) {
     var params = {
         belongs_to_type: 'zone',
@@ -292,6 +390,7 @@ test('Search', function (t) {
     });
 });
 
+
 // --- Teardown
 
 
