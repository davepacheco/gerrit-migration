commit cf5682b67a9f94e55038fe10626b167a708259ed
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-07-03T07:52:47-06:00 (3 months ago)
    
    MANTA-4368 Pass along request id with node-boray API calls

diff --git a/lib/buckets.js b/lib/buckets.js
index a163143..74269aa 100644
--- a/lib/buckets.js
+++ b/lib/buckets.js
@@ -28,19 +28,22 @@ var rpc = require('./rpc');
 
 ///--- API
 
-function createBucket(rpcctx, owner, bucket, vnode, callback) {
+function createBucket(rpcctx, owner, bucket, vnode, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = {
         owner: owner,
         name: bucket,
-        vnode: vnode
+        vnode: vnode,
+        request_id: req_id
     };
 
     var log = rpc.childLogger(rpcctx, opts);
@@ -74,13 +77,15 @@ function createBucket(rpcctx, owner, bucket, vnode, callback) {
     });
 }
 
-function createBucketNoVnode(rpcctx, owner, bucket, callback) {
+function createBucketNoVnode(rpcctx, owner, bucket, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var log = rpc.childLogger(rpcctx, opts);
 
@@ -91,7 +96,7 @@ function createBucketNoVnode(rpcctx, owner, bucket, callback) {
     rpc.rpcCommonBufferData({
         rpcctx: rpcctx,
         rpcmethod: 'createbucket',
-        rpcargs: [owner, bucket],
+        rpcargs: [owner, bucket, req_id],
         ignoreNullValues: true,
         log: log
     }, function (err, buckets) {
@@ -113,19 +118,22 @@ function createBucketNoVnode(rpcctx, owner, bucket, callback) {
     });
 }
 
-function getBucket(rpcctx, owner, bucket, vnode, callback) {
+function getBucket(rpcctx, owner, bucket, vnode, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = {
         owner: owner,
         name: bucket,
-        vnode: vnode
+        vnode: vnode,
+        request_id: req_id
     };
 
     var log = rpc.childLogger(rpcctx, opts);
@@ -154,20 +162,22 @@ function getBucket(rpcctx, owner, bucket, vnode, callback) {
     });
 }
 
-function getBucketNoVnode(rpcctx, owner, bucket, callback) {
+function getBucketNoVnode(rpcctx, owner, bucket, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
         rpcctx: rpcctx,
         rpcmethod: 'getbucket',
-        rpcargs: [owner, bucket],
+        rpcargs: [owner, bucket, req_id],
         log: log
     }, function (err, buckets) {
         if (err) {
@@ -188,19 +198,22 @@ function getBucketNoVnode(rpcctx, owner, bucket, callback) {
     });
 }
 
-function deleteBucket(rpcctx, owner, bucket, vnode, callback) {
+function deleteBucket(rpcctx, owner, bucket, vnode, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = {
         owner: owner,
         name: bucket,
-        vnode: vnode
+        vnode: vnode,
+        request_id: req_id
     };
 
     var log = rpc.childLogger(rpcctx, opts);
@@ -230,20 +243,22 @@ function deleteBucket(rpcctx, owner, bucket, vnode, callback) {
     });
 }
 
-function deleteBucketNoVnode(rpcctx, owner, bucket, callback) {
+function deleteBucketNoVnode(rpcctx, owner, bucket, req_id, callback) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket, 'bucket');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var log = rpc.childLogger(rpcctx, opts);
 
     rpc.rpcCommonBufferData({
         rpcctx: rpcctx,
         rpcmethod: 'deletebucket',
-        rpcargs: [owner, bucket],
+        rpcargs: [owner, bucket, req_id],
         ignoreNullValues: true,
         log: log
     }, function (err, buckets) {
@@ -258,7 +273,8 @@ function deleteBucketNoVnode(rpcctx, owner, bucket, callback) {
 /*
  * This function talks to boray
  */
-function listBuckets(rpcctx, owner, order_by, prefix, limit, offset, vnode) {
+function listBuckets(rpcctx, owner, order_by, prefix, limit, offset, vnode,
+    req_id) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(order_by, 'order_by');
@@ -266,8 +282,10 @@ function listBuckets(rpcctx, owner, order_by, prefix, limit, offset, vnode) {
     assert.number(limit, 'limit');
     assert.number(offset, 'offset');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = {
         owner: owner,
@@ -275,7 +293,8 @@ function listBuckets(rpcctx, owner, order_by, prefix, limit, offset, vnode) {
         prefix: prefix,
         limit: limit,
         offset: offset,
-        vnode: vnode
+        vnode: vnode,
+        request_id: req_id
     };
 
     var log = rpc.childLogger(rpcctx, opts);
@@ -305,17 +324,20 @@ function listBuckets(rpcctx, owner, order_by, prefix, limit, offset, vnode) {
 /*
  * This function talks to electric-boray
  */
-function listBucketsNoVnode(rpcctx, owner, sorted, order_by, prefix, limit) {
+function listBucketsNoVnode(rpcctx, owner, sorted, order_by, prefix, limit,
+    req_id) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.bool(sorted, 'sorted');
     assert.string(order_by, 'order_by');
     assert.string(prefix, 'prefix');
     assert.number(limit, 'limit');
+    assert.string(req_id, 'req_id');
 
-    var opts = makeBucketOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
-    var arg = [owner, sorted, order_by, prefix, limit];
+    var arg = [owner, sorted, order_by, prefix, limit, req_id];
 
     var log = rpc.childLogger(rpcctx, opts);
 
@@ -343,20 +365,6 @@ function listBucketsNoVnode(rpcctx, owner, sorted, order_by, prefix, limit) {
     return (res);
 }
 
-
-///--- Helpers
-
-/*
- * Create options suitable for a bucket-related RPC call by creating a deep copy
- * of the options passed in by the caller.  If the caller did not specify a
- * req_id, create one and add it to the returned options.
- */
-function makeBucketOptions(options) {
-    var opts = jsprim.deepCopy(options);
-    opts.req_id = options.req_id || libuuid.create();
-    return (opts);
-}
-
 ///--- Exports
 
 module.exports = {
diff --git a/lib/client.js b/lib/client.js
index 126a42e..329d511 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -552,14 +552,15 @@ BorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
  * @param {Number} vnode  - Virtual node identifier
+ * @param {String} req_id - Request identifier
  * @param {Function} cb   - callback
  */
 BorayClient.prototype.createBucket =
-    function createBucket(owner, bucket, vnode, cb) {
+    function createBucket(owner, bucket, vnode, req_id, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.createBucket(rpcctx, owner, bucket, vnode,
+        buckets.createBucket(rpcctx, owner, bucket, vnode, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -572,14 +573,15 @@ BorayClient.prototype.createBucket =
  *
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
+ * @param {String} req_id - Request identifier
  * @param {Function} cb   - callback
  */
 BorayClient.prototype.createBucketNoVnode =
-    function createBucketNoVnode(owner, bucket, cb) {
+    function createBucketNoVnode(owner, bucket, req_id, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.createBucketNoVnode(rpcctx, owner, bucket,
+        buckets.createBucketNoVnode(rpcctx, owner, bucket, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -594,11 +596,13 @@ BorayClient.prototype.createBucketNoVnode =
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
  * @param {Number} vnode  - Virtual node identifier
+ * @param {String} req_id - Request identifier
  */
-BorayClient.prototype.getBucket = function getBucket(owner, bucket, vnode, cb) {
+BorayClient.prototype.getBucket = function getBucket(owner, bucket, vnode,
+    req_id, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.getBucket(rpcctx, owner, bucket, vnode,
+        buckets.getBucket(rpcctx, owner, bucket, vnode, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -611,13 +615,14 @@ BorayClient.prototype.getBucket = function getBucket(owner, bucket, vnode, cb) {
  *
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
+ * @param {String} req_id - Request identifier
  * @param {Function} cb - callback
  */
 BorayClient.prototype.getBucketNoVnode =
-    function getBucketNoVnode(owner, bucket, cb) {
+    function getBucketNoVnode(owner, bucket, req_id, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
-        buckets.getBucketNoVnode(rpcctx, owner, bucket,
+        buckets.getBucketNoVnode(rpcctx, owner, bucket, req_id,
             this.makeReleaseCb(rpcctx, cb));
 };
 
@@ -630,9 +635,11 @@ BorayClient.prototype.getBucketNoVnode =
  * @param {Number} limit     - The maximum number of buckets to return
  * @param {Number} offset    - An starting offset into the buckets set
  * @param {Number} vnode     - Virtual node identifier
+ * @param {String} req_id    - Request identifier
  */
 BorayClient.prototype.listBuckets =
-    function listBuckets(owner, order_by, prefix, limit, offset, vnode) {
+    function listBuckets(owner, order_by, prefix, limit, offset, vnode,
+        req_id) {
 
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
@@ -642,7 +649,7 @@ BorayClient.prototype.listBuckets =
     }
 
     rv = buckets.listBuckets(rpcctx, owner, order_by, prefix, limit, offset,
-        vnode);
+        vnode, req_id);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -656,9 +663,11 @@ BorayClient.prototype.listBuckets =
  * @param {String} order_by  - An ordering clause for the resulting buckets
  * @param {String} prefix    - A prefix to use to group buckets
  * @param {Number} limit     - The maximum number of buckets to return
+ * @param {String} req_id    - Request identifier
  */
 BorayClient.prototype.listBucketsNoVnode =
-    function listBucketsNoVnode(owner, sorted, order_by, prefix, limit) {
+    function listBucketsNoVnode(owner, sorted, order_by, prefix, limit,
+        req_id) {
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -667,7 +676,7 @@ BorayClient.prototype.listBucketsNoVnode =
     }
 
     rv = buckets.listBucketsNoVnode(rpcctx, owner, sorted, order_by, prefix,
-        limit);
+        limit, req_id);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -683,13 +692,14 @@ BorayClient.prototype.listBucketsNoVnode =
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
  * @param {Number} vnode  - Virtual node identifier
+ * @param {String} req_id - Request identifier
  * @param {Function} cb   - callback
  */
 BorayClient.prototype.deleteBucket = function deleteBucket(owner, bucket, vnode,
-    cb) {
+    req_id, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.deleteBucket(rpcctx, owner, bucket, vnode,
+        buckets.deleteBucket(rpcctx, owner, bucket, vnode, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -703,14 +713,15 @@ BorayClient.prototype.deleteBucket = function deleteBucket(owner, bucket, vnode,
  *
  * @param {String} owner  - Account owner
  * @param {String} bucket - Bucket name
+ * @param {String} req_id - Request identifier
  * @param {Function} cb   - callback
  */
 BorayClient.prototype.deleteBucketNoVnode =
-    function deleteBucketNoVnode(owner, bucket, cb) {
+    function deleteBucketNoVnode(owner, bucket, req_id, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.deleteBucketNoVnode(rpcctx, owner, bucket,
+        buckets.deleteBucketNoVnode(rpcctx, owner, bucket, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -739,11 +750,12 @@ BorayClient.prototype.deleteBucketNoVnode =
  *                                   which we are not immediately able to
  *                                   migrate the database to accommodate.
  * @param {Number} vnode           - Virtual node identifier
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.createObject = function createObject(owner, bucket_id,
     name, object_id, content_length, content_md5, content_type, headers,
-    sharks, props, vnode, cb) {
+    sharks, props, vnode, req_id, cb) {
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -753,14 +765,15 @@ BorayClient.prototype.createObject = function createObject(owner, bucket_id,
     assert.object(headers, 'headers');
     assert.object(sharks, 'sharks');
     assert.number(vnode, 'vnode');
-    assert.func(cb, 'callback');
+    assert.string(req_id, 'req_id');
     assert.optionalObject(props, 'props');
+    assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
         objects.createObject(rpcctx, owner, bucket_id, name, object_id,
             content_length, content_md5, content_type, headers, sharks, props,
-            vnode, this.makeReleaseCb(rpcctx, cb));
+            vnode, req_id, this.makeReleaseCb(rpcctx, cb));
     }
 };
 
@@ -787,11 +800,12 @@ BorayClient.prototype.createObject = function createObject(owner, bucket_id,
  *                                   that may be shown to be important, but for
  *                                   which we are not immediately able to
  *                                   migrate the database to accommodate.
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
     bucket_id, name, object_id, content_length, content_md5, content_type,
-    headers, sharks, props, cb) {
+    headers, sharks, props, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
@@ -802,6 +816,7 @@ BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
     assert.string(content_type, 'content_type');
     assert.object(headers, 'headers');
     assert.object(sharks, 'sharks');
+    assert.string(req_id, 'req_id');
     assert.func(cb, 'callback');
     assert.optionalObject(props, 'props');
 
@@ -809,7 +824,7 @@ BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
     if (rpcctx) {
         objects.createObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
             content_length, content_md5, content_type, headers, sharks, props,
-            this.makeReleaseCb(rpcctx, cb));
+            req_id, this.makeReleaseCb(rpcctx, cb));
     }
 };
 
@@ -833,23 +848,25 @@ BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
  *                                   which we are not immediately able to
  *                                   migrate the database to accommodate.
  * @param {Number} vnode           - Virtual node identifier
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.updateObject = function updateObject(owner, bucket_id,
-    name, object_id, content_type, headers, props, vnode, cb) {
+    name, object_id, content_type, headers, props, vnode, req_id, cb) {
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
     assert.string(content_type, 'content_type');
     assert.object(headers, 'headers');
     assert.number(vnode, 'vnode');
-    assert.func(cb, 'callback');
     assert.optionalObject(props, 'props');
+    assert.string(req_id, 'req_id');
+    assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
         objects.updateObject(rpcctx, owner, bucket_id, name, object_id,
-        content_type, headers, props, vnode,
+        content_type, headers, props, vnode, req_id,
         this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -873,10 +890,11 @@ BorayClient.prototype.updateObject = function updateObject(owner, bucket_id,
  *                                   that may be shown to be important, but for
  *                                   which we are not immediately able to
  *                                   migrate the database to accommodate.
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.updateObjectNoVnode = function updateObjectNoVnode(owner,
-    bucket_id, name, object_id, content_type, headers, props, cb) {
+    bucket_id, name, object_id, content_type, headers, props, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
@@ -884,13 +902,15 @@ BorayClient.prototype.updateObjectNoVnode = function updateObjectNoVnode(owner,
     assert.string(object_id, 'object_id');
     assert.string(content_type, 'content_type');
     assert.object(headers, 'headers');
-    assert.func(cb, 'callback');
     assert.optionalObject(props, 'props');
+    assert.string(req_id, 'req_id');
+    assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
         objects.updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
-            content_type, headers, props, this.makeReleaseCb(rpcctx, cb));
+        content_type, headers, props, req_id,
+        this.makeReleaseCb(rpcctx, cb));
     }
 };
 
@@ -905,20 +925,22 @@ BorayClient.prototype.updateObjectNoVnode = function updateObjectNoVnode(owner,
  * @param {String} bucket_id       - Bucket id
  * @param {String} name            - Object key name
  * @param {Number} vnode           - Virtual node identifier
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.getObject =
-    function getObject(owner, bucket_id, name, vnode, cb) {
+    function getObject(owner, bucket_id, name, vnode, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.getObject(rpcctx, owner, bucket_id, name, vnode,
+        objects.getObject(rpcctx, owner, bucket_id, name, vnode, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -932,19 +954,21 @@ BorayClient.prototype.getObject =
  * @param {String} owner           - Account owner
  * @param {String} bucket_id       - Bucket id
  * @param {String} name            - Object key name
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.getObjectNoVnode =
-    function getObjectNoVnode(owner, bucket_id, name, cb) {
+    function getObjectNoVnode(owner, bucket_id, name, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
+    assert.string(req_id, 'req_id');
     assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.getObjectNoVnode(rpcctx, owner, bucket_id, name,
+        objects.getObjectNoVnode(rpcctx, owner, bucket_id, name, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -956,10 +980,11 @@ BorayClient.prototype.getObjectNoVnode =
  * @param {String} owner           - Account owner
  * @param {String} bucket_id       - Bucket id
  * @param {Number} vnode           - Virtual node identifier
+ * @param {String} req_id          - Request identifier
  */
 BorayClient.prototype.listObjects =
     function listObjects(owner, bucket_id, order_by, prefix, limit, offset,
-        vnode) {
+        vnode, req_id) {
 
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
@@ -969,7 +994,7 @@ BorayClient.prototype.listObjects =
     }
 
     rv = objects.listObjects(rpcctx, owner, bucket_id, order_by, prefix, limit,
-        offset, vnode);
+        offset, vnode, req_id);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -980,10 +1005,11 @@ BorayClient.prototype.listObjects =
  *
  * @param {String} owner           - Account owner
  * @param {String} bucket_id       - Bucket id
+ * @param {String} req_id          - Request identifier
  */
 BorayClient.prototype.listObjectsNoVnode =
     function listObjectsNoVnode(owner, bucket_id, sorted, order_by, prefix,
-        limit) {
+        limit, req_id) {
 
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
@@ -993,7 +1019,7 @@ BorayClient.prototype.listObjectsNoVnode =
     }
 
     rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, order_by,
-        prefix, limit);
+        prefix, limit, req_id);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -1009,20 +1035,22 @@ BorayClient.prototype.listObjectsNoVnode =
  * @param {String} bucket_id       - Bucket id
  * @param {String} name            - Object key name
  * @param {Number} vnode           - Virtual node identifier
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.deleteObject =
-    function deleteObject(owner, bucket_id, name, vnode, cb) {
+    function deleteObject(owner, bucket_id, name, vnode, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.deleteObject(rpcctx, owner, bucket_id, name, vnode,
+        objects.deleteObject(rpcctx, owner, bucket_id, name, vnode, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
@@ -1036,19 +1064,21 @@ BorayClient.prototype.deleteObject =
  * @param {String} owner           - Account owner
  * @param {String} bucket_id       - Bucket id
  * @param {String} name            - Object key name
+ * @param {String} req_id          - Request identifier
  * @param {Function} cb            - callback
  */
 BorayClient.prototype.deleteObjectNoVnode =
-    function deleteObjectNoVnode(owner, bucket_id, name, cb) {
+    function deleteObjectNoVnode(owner, bucket_id, name, req_id, cb) {
 
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
+    assert.string(req_id, 'req_id');
     assert.func(cb, 'callback');
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.deleteObjectNoVnode(rpcctx, owner, bucket_id, name,
+        objects.deleteObjectNoVnode(rpcctx, owner, bucket_id, name, req_id,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
diff --git a/lib/objects.js b/lib/objects.js
index 1444f82..d7372f3 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -29,8 +29,9 @@ var rpc = require('./rpc');
 ///--- API
 
 function createObject(rpcctx, owner, bucket_id, name, object_id, content_length,
-    content_md5, content_type, headers, sharks, props, vnode, callback) {
-    var opts, log;
+    content_md5, content_type, headers, sharks, props, vnode, req_id,
+    callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -45,8 +46,10 @@ function createObject(rpcctx, owner, bucket_id, name, object_id, content_length,
     assert.number(vnode, 'vnode');
     assert.func(callback, 'callback');
     assert.optionalObject(props, 'props');
+    assert.string(req_id, 'req_id');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = { owner: owner,
                 bucket_id: bucket_id,
@@ -58,7 +61,8 @@ function createObject(rpcctx, owner, bucket_id, name, object_id, content_length,
                 content_type: content_type,
                 headers: headers,
                 sharks: sharks,
-                properties: props
+                properties: props,
+                request_id: req_id
               };
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
@@ -82,8 +86,8 @@ function createObject(rpcctx, owner, bucket_id, name, object_id, content_length,
 
 function createObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
     content_length, content_md5, content_type, headers, sharks, props,
-    callback) {
-    var opts, log;
+    req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -95,9 +99,11 @@ function createObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
     assert.string(content_type, 'content_type');
     assert.object(headers, 'headers');
     assert.object(sharks, 'sharks');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var args = [ owner,
                  bucket_id,
@@ -108,7 +114,8 @@ function createObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
                  content_type,
                  headers,
                  sharks,
-                 props
+                 props,
+                 req_id
               ];
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
@@ -131,22 +138,25 @@ function createObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
 }
 
 
-function getObject(rpcctx, owner, bucket_id, name, vnode, callback) {
-    var opts, log;
+function getObject(rpcctx, owner, bucket_id, name, vnode, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = { owner: owner,
                 bucket_id: bucket_id,
                 name: name,
-                vnode: vnode
+                vnode: vnode,
+                request_id: req_id
               };
 
     log = rpc.childLogger(rpcctx, opts);
@@ -171,20 +181,23 @@ function getObject(rpcctx, owner, bucket_id, name, vnode, callback) {
 }
 
 
-function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
-    var opts, log;
+function getObjectNoVnode(rpcctx, owner, bucket_id, name, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var args = [ owner,
                  bucket_id,
-                 name
+                 name,
+                 req_id
                ];
 
     log = rpc.childLogger(rpcctx, opts);
@@ -210,8 +223,8 @@ function getObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
 
 
 function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
-    headers, props, vnode, callback) {
-    var opts, log;
+    headers, props, vnode, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -223,8 +236,10 @@ function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
     assert.number(vnode, 'vnode');
     assert.func(callback, 'callback');
     assert.optionalObject(props, 'props');
+    assert.string(req_id, 'req_id');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = { owner: owner,
                 bucket_id: bucket_id,
@@ -233,7 +248,8 @@ function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
                 vnode: vnode,
                 content_type: content_type,
                 headers: headers,
-                properties: props
+                properties: props,
+                request_id: req_id
               };
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
@@ -256,8 +272,8 @@ function updateObject(rpcctx, owner, bucket_id, name, object_id, content_type,
 }
 
 function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
-    content_type, headers, props, callback) {
-    var opts, log;
+    content_type, headers, props, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -266,9 +282,11 @@ function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
     assert.string(object_id, 'object_id');
     assert.string(content_type, 'content_type');
     assert.object(headers, 'headers');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var args = [ owner,
                  bucket_id,
@@ -276,7 +294,8 @@ function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
                  object_id,
                  content_type,
                  headers,
-                 props
+                 props,
+                 req_id
               ];
     log = rpc.childLogger(rpcctx, opts);
     rpc.rpcCommonBufferData({
@@ -299,22 +318,25 @@ function updateObjectNoVnode(rpcctx, owner, bucket_id, name, object_id,
 }
 
 
-function deleteObject(rpcctx, owner, bucket_id, name, vnode, callback) {
-    var opts, log;
+function deleteObject(rpcctx, owner, bucket_id, name, vnode, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var arg = { owner: owner,
                 bucket_id: bucket_id,
                 name: name,
-                vnode: vnode
+                vnode: vnode,
+                request_id: req_id
               };
 
     log = rpc.childLogger(rpcctx, opts);
@@ -338,20 +360,23 @@ function deleteObject(rpcctx, owner, bucket_id, name, vnode, callback) {
     });
 }
 
-function deleteObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
-    var opts, log;
+function deleteObjectNoVnode(rpcctx, owner, bucket_id, name, req_id, callback) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
+    assert.string(req_id, 'req_id');
     assert.func(callback, 'callback');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     var args = [ owner,
                  bucket_id,
-                 name
+                 name,
+                 req_id
                ];
 
     log = rpc.childLogger(rpcctx, opts);
@@ -372,7 +397,7 @@ function deleteObjectNoVnode(rpcctx, owner, bucket_id, name, callback) {
 
 
 function listObjects(rpcctx, owner, bucket_id, order_by, prefix, limit, offset,
-    vnode) {
+    vnode, req_id) {
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -382,6 +407,7 @@ function listObjects(rpcctx, owner, bucket_id, order_by, prefix, limit, offset,
     assert.number(limit, 'limit');
     assert.number(offset, 'offset');
     assert.number(vnode, 'vnode');
+    assert.string(req_id, 'req_id');
 
     var arg = {
         owner: owner,
@@ -390,10 +416,12 @@ function listObjects(rpcctx, owner, bucket_id, order_by, prefix, limit, offset,
         prefix: prefix,
         limit: limit,
         offset: offset,
-        vnode: vnode
+        vnode: vnode,
+        request_id: req_id
     };
 
-    var opts = makeOptions(arg);
+    var opts = {};
+    opts.req_id = req_id;
 
     var log = rpc.childLogger(rpcctx, opts);
 
@@ -420,9 +448,8 @@ function listObjects(rpcctx, owner, bucket_id, order_by, prefix, limit, offset,
 }
 
 function listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, order_by, prefix,
-    limit) {
-
-    var opts, log;
+    limit, req_id) {
+    var log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
@@ -431,8 +458,10 @@ function listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, order_by, prefix,
     assert.string(order_by, 'order_by');
     assert.string(prefix, 'prefix');
     assert.number(limit, 'limit');
+    assert.string(req_id, 'req_id');
 
-    opts = makeOptions({});
+    var opts = {};
+    opts.req_id = req_id;
 
     log = rpc.childLogger(rpcctx, opts);
 
@@ -441,7 +470,7 @@ function listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, order_by, prefix,
     var req = rpc.rpcCommon({
         rpcctx: rpcctx,
         rpcmethod: 'listobjects',
-        rpcargs: [owner, bucket_id, sorted, order_by, prefix, limit],
+        rpcargs: [owner, bucket_id, sorted, order_by, prefix, limit, req_id],
         log: log
     }, function (err) {
         if (err) {
@@ -460,19 +489,6 @@ function listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, order_by, prefix,
     return (res);
 }
 
-
-///--- Helpers
-
-function makeOptions(options, value) {
-    var opts = jsprim.deepCopy(options);
-
-    // Defaults handlers
-    opts.req_id = options.req_id || libuuid.create();
-
-    return (opts);
-}
-
-
 ///--- Exports
 
 module.exports = {
