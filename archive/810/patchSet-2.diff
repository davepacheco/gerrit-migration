From bca22e54b1690d1e0b1d20c69db06f9bd7b9bc81 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 28 Oct 2016 18:04:53 +0200
Subject: [PATCH] TOOLS-1570 sdcadm should rollback post-setup ha-binder

---
 test/post-setup-ha-binder.test.js | 260 ++++++++++++++++++++++++++++++
 1 file changed, 260 insertions(+)
 create mode 100644 test/post-setup-ha-binder.test.js

diff --git a/test/post-setup-ha-binder.test.js b/test/post-setup-ha-binder.test.js
new file mode 100644
index 0000000..d2f5979
--- /dev/null
+++ b/test/post-setup-ha-binder.test.js
@@ -0,0 +1,260 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+
+var test = require('tape').test;
+var vasync = require('vasync');
+
+var exec = require('child_process').exec;
+var common = require('./common');
+var checkHelp = common.checkHelp;
+
+var existingBinderInsts;
+var sdcApp;
+var externalNet;
+var adminResolvers;
+
+
+test('setup', function (t) {
+    vasync.pipeline({
+        funcs: [
+            function getExistingBinderInsts(_, next) {
+                exec('sdcadm insts binder -j', function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    existingBinderInsts = common.parseJsonOut(stdout);
+                    next();
+                });
+            },
+            function getZKServers(_, next) {
+                var cmd = 'sdc-sapi /applications?name=sdc|' +
+                    'json -Ha';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    sdcApp = common.parseJsonOut(stdout);
+                    next();
+                });
+            },
+            function getExternalResolvers(_, next) {
+                var cmd = 'sdc-napi /networks?name=external|' +
+                    'json -Ha';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    externalNet = common.parseJsonOut(stdout);
+                    next();
+                });
+            },
+            function getOrigBinderIps(_, next) {
+                adminResolvers = existingBinderInsts.map(function (inst) {
+                    return inst.ip;
+                });
+                next();
+            }
+        ]
+    }, function (err) {
+        t.ifError(err);
+        t.end();
+    });
+});
+
+
+test('sdcadm post-setup ha-binder -s SERVER -s SERVER', function (t) {
+    var cmd = 'sdcadm post-setup ha-binder -s `sysinfo|json UUID` ' +
+        '-s `sysinfo|json UUID` --yes';
+    exec(cmd, function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
+
+        /* JSSTYLED */
+        t.ok(stdout.match(/Creating "binder\d+" instance/),
+            'check update regex present');
+        var findRegex = [
+            'Enabling zookeeper into new instances',
+            'Waiting for binder instances to join ZK cluster',
+            'ha-binder setup finished'
+        ];
+
+        findRegex.forEach(function (regex) {
+            t.ok(stdout.match(regex), 'check update regex present');
+        });
+
+        /* JSSTYLED */
+        var re = /Instance "([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"/mg;
+        var result;
+        while ((result = re.exec(stdout)) !== null) {
+            console.log('Created binder instance ' + result[1]);
+        }
+        t.end();
+    });
+});
+
+
+test('teardown', function (t) {
+    vasync.pipeline({
+        arg: {},
+        funcs: [
+            function resetZKServers(_, next) {
+                var command = 'echo \'{"metadata": {"ZK_SERVERS": ' +
+                    JSON.stringify(sdcApp.metadata.ZK_SERVERS) + '}}\'|' +
+                    'sapiadm update ' + sdcApp.uuid;
+                exec(command, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    next();
+                });
+            },
+            function getNewBinderInsts(ctx, next) {
+                exec('sdcadm insts binder -j', function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    var binderInsts = common.parseJsonOut(stdout);
+                    ctx.new_binder_insts = binderInsts.filter(function (inst) {
+                        return existingBinderInsts.every(function (x) {
+                            return (x.instance !== inst.instance);
+                        });
+                    });
+                    next();
+                });
+            },
+            function removeBinderInsts(ctx, next) {
+                vasync.forEachPipeline({
+                    inputs: ctx.new_binder_insts,
+                    func: function (inst, nextInst) {
+                        console.log('Destroying binder instance ' +
+                            inst.instance);
+                        var cmd = 'sdc-sapi /instances/' + inst.instance +
+                            ' -X DELETE';
+                        exec(cmd, function (err, stdout, stderr) {
+                            t.ifError(err, 'Execution error');
+                            t.equal(stderr, '', 'Empty stderr');
+                            nextInst();
+                        });
+                    }
+                }, next);
+            },
+            function resetManateeCfg(_, next) {
+                var cmd = 'sdc-sapi /services?name=manatee|json -Ha';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    var manatee = common.parseJsonOut(stdout);
+                    var command = 'echo \'{"action":"delete", ' +
+                        '"metadata": {"ZK_SERVERS": null }}\'|' +
+                        'sapiadm update ' + manatee.uuid;
+                    exec(command, function (err1, stdout1, stderr1) {
+                        t.ifError(err1, 'Execution error');
+                        t.equal(stderr1, '', 'Empty stderr');
+                        next();
+                    });
+                });
+            },
+            function resetMorayCfg(_, next) {
+                var cmd = 'sdc-sapi /services?name=moray|json -Ha';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    var moray = common.parseJsonOut(stdout);
+                    var command = 'echo \'{"action":"delete", ' +
+                        '"metadata": {"ZK_SERVERS": null }}\'|' +
+                        'sapiadm update ' + moray.uuid;
+                    exec(command, function (err1, stdout1, stderr1) {
+                        t.ifError(err1, 'Execution error');
+                        t.equal(stderr1, '', 'Empty stderr');
+                        next();
+                    });
+                });
+            },
+            function getAdminUuid(ctx, next) {
+                var cmd = 'sdc-ufds search login=admin';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    ctx.ufds_admin_uuid = common.parseJsonOut(stdout).uuid;
+                    next();
+                });
+            },
+            function getAdminNetwork(ctx, next) {
+                var cmd = 'sdc-napi /networks?name=admin\\&owner_uuid=' +
+                    ctx.ufds_admin_uuid + '|json -Ha';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    ctx.admin_network_uuid = common.parseJsonOut(stdout).uuid;
+                    next();
+                });
+            },
+            function resetAdminNetworkResolvers(ctx, next) {
+                var cmd = 'sdc-napi /networks/' + ctx.admin_network_uuid +
+                    ' -d \'{"resolvers": [' + adminResolvers.join(', ') +
+                    ']}\' -X PUT';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    next();
+                });
+            },
+            function getCoreInsts(ctx, next) {
+                var cmd = 'sdcadm insts type=vm -j';
+                exec(cmd, function (err, stdout, stderr) {
+                    t.ifError(err, 'Execution error');
+                    t.equal(stderr, '', 'Empty stderr');
+                    ctx.core_insts = common.parseJsonOut(stdout);
+                    next();
+                });
+            },
+            function getCoreVms(ctx, next) {
+                ctx.core_vms = [];
+                vasync.forEachPipeline({
+                    inputs: ctx.core_insts,
+                    func: function (inst, nextInst) {
+                        var cmd = 'sdc-vmapi /vms/' + inst.zonename +
+                            '|json -H';
+                        exec(cmd, function (err, stdout, stderr) {
+                            t.ifError(err, 'Execution error');
+                            t.equal(stderr, '', 'Empty stderr');
+                            ctx.core_vms.push(common.parseJsonOut(stdout));
+                            nextInst();
+                        });
+                    }
+                }, next);
+            },
+            function resetCoreVmsResolvers(ctx, next) {
+                vasync.forEachPipeline({
+                    inputs: ctx.core_vms,
+                    func: function (vm, nextVm) {
+                        var resolvers = [];
+                        vm.nics.forEach(function (nic) {
+                            if (nic.nic_tag === 'admin') {
+                                resolvers = resolvers.concat(
+                                    adminResolvers);
+                            } else if (nic.nic_tag === 'external') {
+                                resolvers = resolvers.concat(
+                                    externalNet.resolvers);
+                            }
+                        });
+                        var cmd = 'sdc-vmapi /vms/' + vm.uuid +
+                            '?action=update -d \'{"resolvers" : [' +
+                            resolvers.join(', ') + ']}\'';
+                        exec(cmd, function (err, stdout, stderr) {
+                            t.ifError(err, 'Execution error');
+                            t.equal(stderr, '', 'Empty stderr');
+                            nextVm();
+                        });
+                    }
+                }, next);
+            }
+        ]
+    }, function (err) {
+        t.ifError(err);
+        t.end();
+    });
+});
-- 
2.21.0

