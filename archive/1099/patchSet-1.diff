commit 5d764f3f70f228e444c506e010a11606ff8cf6ea (refs/changes/99/1099/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-12-08T15:46:20-08:00 (2 years, 10 months ago)
    
    joyent/node-cueball#56 use VError to wrap original error in failed claim()

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index 025725c..cace7d3 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -15,6 +15,7 @@ const mod_mooremachine = require('mooremachine');
 const mod_assert = require('assert-plus');
 const mod_utils = require('./utils');
 const mod_vasync = require('vasync');
+const mod_verror = require('verror');
 const mod_bunyan = require('bunyan');
 const mod_resolver = require('./resolver');
 const mod_uuid = require('node-uuid');
@@ -162,10 +163,16 @@ ConnectionFSM.prototype.claim = function (stack, cb) {
 		if (st === 'busy' && self.isInState('busy')) {
 			self.removeListener('stateChanged', onStateChanged);
 			cb(null, self.cf_shadow, self.cf_conn);
+		} else if (st === 'error' && self.cf_lastError !== undefined) {
+			self.removeListener('stateChanged', onStateChanged);
+			var err = new mod_verror.VError(self.cf_lastError,
+			    'Connection error during claim on backend %s:%d',
+			    self.cf_backend.address, self.cf_backend.port);
+			cb(err);
 		} else if (st !== 'busy') {
 			self.removeListener('stateChanged', onStateChanged);
-			cb(new Error('Claimed connection entered state ' +
-			    st + ' during claim, instead of "busy"'));
+			cb(new mod_verror.VError('Claimed connection entered ' +
+			    'state "%s" during claim, instead of "busy"', st));
 		}
 	}
 	this.emit('claimAsserted');
@@ -268,8 +275,6 @@ ConnectionFSM.prototype.state_closed = function (S) {
 	if (this.cf_conn)
 		this.cf_conn.destroy();
 	this.cf_conn = undefined;
-	this.cf_closeAfter = false;
-	this.cf_lastError = undefined;
 	this.cf_log.trace('ConnectionFSM closed');
 	S.on(this, 'closeAsserted', function () { });
 };
