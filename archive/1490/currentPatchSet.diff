commit 77f82d4536b1293d98bf8e0216409d6c9746d48e (refs/changes/90/1490/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-02-20T18:22:38+01:00 (2 years, 8 months ago)
    
    TOOLS-1651 sdcadm create should support agent instances
    Reviewed by: Trent Mick <trent.mick@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index da0d8e9..278ea71 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -12,6 +12,7 @@
 
 ## 1.15.5
 
+- TOOLS-1651 sdcadm create should support agent instances.
 - TOOLS-1689 Fix a problem where `sdcadm` would hang on exit for many commands that
   used Ur.
 
diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index dbaa032..4aa3f85 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -10,6 +10,7 @@
 
 var p = console.log;
 
+var assert = require('assert-plus');
 var vasync = require('vasync');
 
 var common = require('../common');
@@ -19,12 +20,29 @@ var errors = require('../errors');
  * The 'sdcadm create' CLI subcommand.
  */
 
-function do_create(subcmd, opts, args, cb) {
+function Create(opts) {
+    assert.object(opts, 'opts');
+    assert.object(opts.cli, 'opts.cli');
+    assert.object(opts.log, 'opts.log');
+    assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.func(opts.progress, 'opts.progress');
+    assert.string(opts.uuid, 'opts.uuid');
+
+    this.log = opts.log;
+    this.sdcadm = opts.sdcadm;
+    this.progress = opts.progress;
+    this.uuid = opts.uuid;
+    this.cli = opts.cli;
+}
+
+Create.prototype.name = 'create';
+
+Create.prototype.execute = function cExecute(opts, args, cb) {
+    assert.object(opts, 'opts');
+    assert.object(args, 'args');
+    assert.func(cb, 'cb');
+
     var self = this;
-    if (opts.help) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    }
 
     var unlock;
     var svcs;
@@ -78,7 +96,7 @@ function do_create(subcmd, opts, args, cb) {
                     'Must specify server uuid'));
             }
             change.server = opts.server;
-            change.type = 'create';
+            change.type = 'create-instance';
             changes.push(change);
             next();
         },
@@ -160,6 +178,44 @@ function do_create(subcmd, opts, args, cb) {
             cb();
         });
     });
+};
+
+
+Create.prototype.help = (
+    'Create an instance for an existing SDC service.\n' +
+    '\n' +
+    'Usage:\n' +
+    '       {{name}} create <svc>\n\n' +
+    'Note that in order to create an instance of some services the option\n' +
+    '--skip-ha-ready must be specified, given that those services are not\n' +
+    'supposed to have more than one instance. There are also some services\n' +
+    'which are not allowed to have more than one instance, or services\n' +
+    'whose instances should not be created using this tool, like manatee or\n' +
+    'binder. Finally, the first instance of some services should not be\n' +
+    'created using this tool when there is an alternate choice provided by\n' +
+    'post-setup subcommand.\n'
+);
+
+
+// --- CLI
+
+function do_create(subcmd, opts, args, cb) {
+    var self = this;
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    var proc = new Create({
+        sdcadm: self.sdcadm,
+        log: self.log,
+        uuid: self.uuid,
+        progress: self.progress,
+        cli: self
+    });
+    opts.experimental = false;
+    proc.execute(opts, args, cb);
 }
 
 
@@ -198,24 +254,14 @@ do_create.options = [
 ];
 
 do_create.help = (
-    'Create an instance for an existing SDC service.\n' +
-    '\n' +
-    'Usage:\n\n' +
-    '       sdcadm create <svc>\n\n' +
-    'Note that in order to create an instance of some services the option\n' +
-    '--skip-ha-ready must be specified, given that those services are not\n' +
-    'supposed to have more than one instance. There are also some services\n' +
-    'which are not allowed to have more than one instance, or services\n' +
-    'whose instances should not be created using this tool, like manatee or\n' +
-    'binder. Finally, the first instance of some services should not be\n' +
-    'created using this tool when there is an alternate choice provided by\n' +
-    'post-setup subcommand.\n' +
+    Create.prototype.help +
     '\n' +
     '{{options}}'
 );
 
 do_create.logToFile = true;
 
+
 // --- exports
 
 module.exports = {
diff --git a/lib/cli/index.js b/lib/cli/index.js
index e98fbe1..4a8f82b 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -415,10 +415,11 @@ CLI.prototype.do_avail = available.do_avail;
 var update = require('./do_update');
 CLI.prototype.do_update = update.do_update;
 
+var create = require('./do_create');
+CLI.prototype.do_create = create.do_create;
 
-CLI.prototype.do_rollback = require('./do_rollback').do_rollback;
 
-CLI.prototype.do_create = require('./do_create').do_create;
+CLI.prototype.do_rollback = require('./do_rollback').do_rollback;
 
 CLI.prototype.do_check_config = require('./do_check_config').do_check_config;
 
@@ -434,6 +435,7 @@ available.do_experimental_avail;
 experimental.ExperimentalCLI.prototype.do_update =
 update.do_experimental_update;
 
+
 CLI.prototype.do_experimental = experimental.ExperimentalCLI;
 CLI.prototype.do_experimental.hidden = true;
 CLI.prototype.do_experimental.logToFile = true;
diff --git a/lib/common.js b/lib/common.js
index 8a0700d..0c8f3e5 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -1635,6 +1635,18 @@ function safeCycles() {
     };
 }
 
+function serverAdminIpFromSysinfo(sysinfo) {
+    var nics = sysinfo['Network Interfaces'] || {};
+    var adminIp = Object.keys(nics).map(function (nicName) {
+        return nics[nicName];
+    }).filter(function (nic) {
+        return nic['NIC Names'].indexOf('admin') !== -1;
+    }).map(function (nic) {
+        return nic.ip4addr;
+    })[0];
+    return adminIp;
+}
+
 //---- exports
 
 module.exports = {
@@ -1670,6 +1682,7 @@ module.exports = {
     mountUsbKey: mountUsbKey,
     unmountUsbKey: unmountUsbKey,
     copyFile: copyFile,
-    safeCycles: safeCycles
+    safeCycles: safeCycles,
+    serverAdminIpFromSysinfo: serverAdminIpFromSysinfo
 };
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index 978f716..8b7cba5 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -482,7 +482,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             return shared.waitForInstToBeUp({
                 change: {
                     server: opts.servers[0],
-                    type: 'create',
+                    type: 'create-instance',
                     service: 'manatee',
                     image: img,
                     inst: {
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 7c7ca55..26b44e5 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -34,6 +34,9 @@ var HA_READY_SVCS = [
     'workflow'
 ];
 
+// --- Disallowed agents
+var DISALLOWED_AGENTS = ['provisioner', 'heartbeater', 'zonetracker'];
+
 //---- internal support stuff
 
 function NoOp() {}
@@ -581,7 +584,8 @@ function coordinatePlan(opts, cb) {
             var err;
 
             function processChange(change, nextChange) {
-                if (change.type !== 'create') {
+                if (change.type !== 'create-instance' ||
+                    change.service.type !== 'vm') {
                     remaining.push(change);
                     return nextChange();
                 }
@@ -652,9 +656,6 @@ function coordinatePlan(opts, cb) {
                 'amon-agent', 'amon-relay', 'hagfish-watcher', 'cabase',
                 'cainstsvc', 'cmon-agent'
             ];
-            // Attempts on updating the following agents using this method will
-            // result into an error message:
-            var disallowed = ['provisioner', 'heartbeater', 'zonetracker'];
 
             var handle = [];
             var remaining = [];
@@ -675,7 +676,7 @@ function coordinatePlan(opts, cb) {
                     remaining.push(change);
                     return;
                 }
-                if (disallowed.indexOf(change.service.name) !== -1) {
+                if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
                     errs.push(change.service.name);
                     remaining.push(change);
                     return;
@@ -753,7 +754,8 @@ function coordinatePlan(opts, cb) {
             }
 
             changes.forEach(function (change) {
-                if (change.service.name !== 'dockerlogger') {
+                if (change.service.name !== 'dockerlogger' ||
+                    change.type === 'create-instance') {
                     remaining.push(change);
                     return;
                 }
@@ -795,6 +797,144 @@ function coordinatePlan(opts, cb) {
             next();
         },
 
+        function createAgentInstance(_, next) {
+            var handle = [];
+            var handleDockerlogger = [];
+            var remaining = [];
+            var errs = [];
+
+
+            function processChange(change, nextChange) {
+                if (change.type !== 'create-instance' ||
+                    change.service.type !== 'agent') {
+                    remaining.push(change);
+                    return nextChange();
+                }
+
+                sdcadm.cnapi.getServer(change.server, function (sErr, serv) {
+                    if (sErr) {
+                        nextChange(new errors.UsageError(
+                            'Cannot find server "' +
+                                change.server + '"'));
+                        return;
+                    }
+
+                    if (change.type !== 'create-instance' ||
+                        change.service.type !== 'agent') {
+                        remaining.push(change);
+                        nextChange();
+                        return;
+                    }
+
+                    if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
+                        errs.push(new errors.UsageError(format(
+                                'Creation of agent "%s" ' +
+                                'instances is not supported.',
+                                change.service.name)));
+                        remaining.push(change);
+                        nextChange();
+                        return;
+                    }
+
+                    var installedAgents = serv.agents.map(function (a) {
+                        return a.name;
+                    });
+
+                    if (installedAgents.indexOf(change.service.name) !== -1) {
+                        errs.push(new errors.UsageError(format(
+                                'Agent "%s" instance already exists on ' +
+                                'server "%s".',
+                                change.service.name, change.server)));
+                        remaining.push(change);
+                        nextChange();
+                        return;
+                    }
+
+                    var adminIp = common.serverAdminIpFromSysinfo(serv.sysinfo);
+
+                    change.insts = [ {
+                        type: change.service.type,
+                        service: change.service.name,
+                        image: change.image.uuid,
+                        server: serv.uuid,
+                        hostname: serv.hostname,
+                        server_ip: adminIp,
+                        instance: null,
+                        version: change.image.version
+                    }];
+
+                    log.debug({
+                        numInsts: 1,
+                        svc: change.service.name,
+                        server: change.server
+                    }, 'UpdateAgentV1');
+
+                    if (change.service.name === 'dockerlogger') {
+                        sdcadm.sapi.listInstances({
+                            service_uuid: change.service.uuid
+                        }, function (sapiErr, sapiInsts) {
+                            if (sapiErr) {
+                                errs.push(new errors.SDCClientError(
+                                    sapiErr, 'sapi'));
+                                nextChange();
+                                return;
+                            }
+                            var servers = sapiInsts.map(function (sIns) {
+                                return sIns.params ?
+                                    sIns.params.server_uuid : null;
+                            }).filter(function (srv) {
+                                return srv !== null;
+                            });
+
+                            if (servers.indexOf(serv.uuid) !== -1) {
+                                errs.push(new errors.UsageError(format(
+                                    'Agent "%s" instance already exists on ' +
+                                    'server "%s".',
+                                    change.service.name, change.server)));
+                                nextChange();
+                                return;
+                            }
+                            handleDockerlogger.push(change);
+                            nextChange();
+                        });
+                    } else {
+                        handle.push(change);
+                        nextChange();
+                    }
+                });
+
+            }
+
+            vasync.forEachPipeline({
+                func: processChange,
+                inputs: changes
+            }, function () {
+                if (handle.length) {
+                    changes = remaining;
+                    log.debug({changes: handle},
+                        'UpdateAgentV1 will handle %d change(s)',
+                        handle.length);
+
+                    procs.push(new UpdateAgentV1({
+                        changes: handle
+                    }));
+                } else if (handleDockerlogger.length) {
+                    changes = remaining;
+                    log.debug({changes: handle},
+                        'UpdateDockerlogger will handle %d change(s)',
+                        handle.length);
+                    procs.push(new UpdateDockerlogger({
+                        changes: handleDockerlogger
+                    }));
+                }
+                var err = null;
+                if (errs.length) {
+                    err = new errors.MultiError(errs);
+                }
+                next(err);
+            });
+        },
+
         function sdcadmAvailable(_, next) {
             var remaining = [];
             // Just ignore sdcadm for now
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index 24f06d0..4e1b551 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -54,8 +54,15 @@ UpdateAgentV1.prototype.summarize = function uaSummarize() {
                         ch.instance.instance, ch.service.name),
                         common.indent(sprintf('to image %s (%s@%s)',
                         img.uuid, img.name, img.version))];
+        } else if (ch.type === 'create-instance') {
+            var inst = ch.insts[0];
+            out = [sprintf('create a new instance of "%s" service',
+                        ch.service.name),
+                        common.indent(sprintf('on server %s (%s)',
+                            inst.server, inst.hostname)),
+                        common.indent(sprintf('using image %s (%s@%s)',
+                        img.uuid, img.name, img.version))];
         }
-
         return out.join('\n');
     }).join('\n');
 };
@@ -74,7 +81,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.wrkDir, 'opts.wrkDir');
-    assert.number(opts.concurrency, 'opts.concurrency');
+    assert.optionalNumber(opts.concurrency, 'opts.concurrency');
     assert.func(callback, 'callback');
     var self = this;
     var progress = opts.progress;
@@ -86,6 +93,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
     // Progress bar
     var bar;
     var completed = 0;
+    var concurrency = opts.concurrency || 1;
 
     function updateAgent(change, nextSvc) {
         log.debug({change: change}, 'updateAgent');
@@ -225,7 +233,10 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     bar = new ProgressBar({
                         size: change.insts.length,
                         bytes: false,
-                        filename: format('Updating %s', change.service.name)
+                        filename: format('%s %s', (change.type ===
+                            'create-instance' ?
+                            'Creating instance of' : 'Updating'),
+                            change.service.name)
                     });
                     bar.advance(0); // Draw initial progbar at 0.
                 }
@@ -370,7 +381,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     });
                 }
 
-                var queue = vasync.queue(upAgent, opts.concurrency);
+                var queue = vasync.queue(upAgent, concurrency);
                 queue.push(change.insts, function doneOne() {
                     if (bar) {
                         completed += 1;
@@ -382,8 +393,13 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     if (bar) {
                         bar.end();
                     }
-                    progress('%s agent update has run in all servers.',
+                    if (change.type === 'create-instance') {
+                        progress('successfully created instance of agent %s.',
                             change.service.name);
+                    } else {
+                        progress('%s agent update has run in all servers.',
+                                change.service.name);
+                    }
                     if (errs.length) {
                         progress('Errors will be reported below:');
                         next(new MultiError(errs));
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index 62a1205..fdd7048 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -41,25 +41,33 @@ util.inherits(UpdateDockerlogger, Procedure);
 
 
 UpdateDockerlogger.prototype.summarize = function udSummarize() {
-
-    var c0 = this.changes[0];
-    var img = c0.image;
-    var out;
-    if (c0.type === 'update-service') {
-        out = [
-            sprintf('update "dockerlogger" service to image %s ', img.uuid),
-            common.indent(sprintf('%s@%s', img.name, img.version)),
-            sprintf('in %s servers', (
-                        c0.insts.length ?
-                        c0.insts.length : 'all the setup'))
-        ];
-    } else if (c0.type === 'update-instance') {
-        out = [sprintf('update "%s" instance of "dockerlogger"' +
-                    ' service to image %s ',
-                    c0.instance.instance, img.uuid),
-                    common.indent(sprintf('%s@%s', img.name, img.version))];
-    }
-    return out.join('\n');
+    return this.changes.map(function (ch) {
+        var img = ch.image;
+        var out;
+
+        if (ch.type === 'update-service') {
+            out = [
+                sprintf('update "dockerlogger" service to image %s ', img.uuid),
+                common.indent(sprintf('%s@%s', img.name, img.version)),
+                sprintf('in %s servers', (
+                            ch.insts.length ?
+                            ch.insts.length : 'all the setup'))
+            ];
+        } else if (ch.type === 'update-instance') {
+            out = [sprintf('update "%s" instance of "dockerlogger" service',
+                        ch.instance.instance),
+                        common.indent(sprintf('to image %s (%s@%s)',
+                        img.uuid, img.name, img.version))];
+        } else if (ch.type === 'create-instance') {
+            var inst = ch.insts[0];
+            out = ['create a new instance of "dockerlogger" service',
+                        common.indent(sprintf('on server %s (%s)',
+                            inst.server, inst.hostname)),
+                        common.indent(sprintf('using image %s (%s@%s)',
+                        img.uuid, img.name, img.version))];
+        }
+        return out.join('\n');
+    }).join('\n');
 };
 
 
@@ -71,13 +79,14 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.wrkDir, 'opts.wrkDir');
-    assert.number(opts.concurrency, 'opts.concurrency');
+    assert.optionalNumber(opts.concurrency, 'opts.concurrency');
     assert.func(callback, 'callback');
     var self = this;
     var progress = opts.progress;
     var sdcadm = opts.sdcadm;
     var log = opts.log;
     var svc;
+    var concurrency = opts.concurrency || 1;
 
     var downloadDir = '/var/tmp';
     var filepath;
@@ -148,7 +157,6 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function listServers(ctx, next) {
-                progress('Finding servers for dockerlogger setup');
                 // Get all servers to validate if unsetup servers are selected.
                 sdcadm.cnapi.listServers({}, function (err, servers) {
                     if (err) {
@@ -163,7 +171,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             // same than some server UUID, we'll delete them. Dockerlogger
             // setup will recreate them properly
             function cleanupSAPIInsts(ctx, next) {
-                if (!change.insts.length) {
+                if (!change.insts.length || change.type !== 'update-service') {
                     return next();
                 }
 
@@ -200,7 +208,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function validateServersToUpdate(ctx, next) {
-                progress('Validating servers to update');
+                progress('Validating servers');
 
                 if (!change.insts.length) {
                     ctx.serversToUpdate = ctx.allServers.filter(function (svr) {
@@ -255,6 +263,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function urDiscoveryGetReady(ctx, next) {
+                if (!ctx.serversToUpdate.length) {
+                    next();
+                    return;
+                }
                 sdcadm.getUrConnection(function (err, urconn) {
                     if (err) {
                         log.debug({
@@ -273,6 +285,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function urDiscovery(ctx, next) {
+                if (!ctx.serversToUpdate.length) {
+                    next();
+                    return;
+                }
                 progress('Checking servers availability');
 
                 common.urDiscovery({
@@ -296,6 +312,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             // TODO: Check file is not already at downloadDir from a previous
             // run (including checksum)
             function getImgFileFromLocalImgapi(ctx, next) {
+                if (!ctx.urServersToUpdate.length) {
+                    next();
+                    return;
+                }
                 progress('Getting image file from local imgapi');
                 filepath = path.resolve(downloadDir,
                 'dockerlogger-' + change.image.uuid + '.sh');
@@ -311,6 +331,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             // TODO: Check the file is not already in assetsdir from a
             // previous run, checksum included.
             function copyImgFileToAssets(ctx, next) {
+                if (!ctx.urServersToUpdate.length) {
+                    next();
+                    return;
+                }
                 var assetsdir = '/usbkey/extra/dockerlogger';
                 progress('Copying dockerlogger to assets dir: %s', assetsdir);
                 var argv = ['cp', filepath, assetsdir];
@@ -340,8 +364,16 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function updateLogger(ctx, next) {
-                progress('Starting dockerlogger update on %d servers',
-                    ctx.urServersToUpdate.length);
+                if (!ctx.urServersToUpdate.length) {
+                    next();
+                    return;
+                }
+                if (change.type === 'create-instance') {
+                    progress('Starting dockerlogger instance creation');
+                } else {
+                    progress('Starting dockerlogger update on %d servers',
+                        ctx.urServersToUpdate.length);
+                }
                 fname = path.basename(filepath);
                 var ip = sdcadm.config.assets_admin_ip;
                 var f = fname;
@@ -400,7 +432,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                             log: log,
                             progress: progress,
                             command: cmd.str,
-                            concurrency: opts.concurrency,
+                            concurrency: concurrency,
                             timeout: cmd.timeout
                         };
 
@@ -415,7 +447,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                         }
                         log.trace({
                             command: cmd.str,
-                            concurrency: opts.concurrency
+                            concurrency: concurrency
                         }, 'runUrQueue');
 
                         var rq = ur.runQueue(queueOpts,
@@ -474,6 +506,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function doCleanup(ctx, next) {
+                if (!ctx.urServersToUpdate.length) {
+                    next();
+                    return;
+                }
                 progress('Deleting temporary %s', filepath);
                 fs.unlink(filepath, function (err) {
                     if (err) {
@@ -484,6 +520,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             },
 
             function updateSvcImage(ctx, next) {
+                if (change.type !== 'update-service') {
+                    next();
+                    return;
+                }
                 progress('Updating "dockerlogger" service in SAPI');
                 sdcadm.sapi.updateService(svc.uuid, {
                     params: {
diff --git a/lib/procedures/update-manatee-v2.js b/lib/procedures/update-manatee-v2.js
index 38b5f67..d95f641 100644
--- a/lib/procedures/update-manatee-v2.js
+++ b/lib/procedures/update-manatee-v2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 
@@ -861,7 +861,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 return s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.async.server_uuid,
-                        type: 'create',
+                        type: 'update-instance',
                         service: 'manatee',
                         image: arg.change.image,
                         inst: {
@@ -934,7 +934,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 return s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.sync.server_uuid,
-                        type: 'create',
+                        type: 'update-instance',
                         service: 'manatee',
                         image: arg.change.image,
                         inst: {
@@ -995,7 +995,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 return s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.primary.server_uuid,
-                        type: 'create',
+                        type: 'update-instance',
                         service: 'manatee',
                         image: arg.change.image,
                         inst: {
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index fc226a4..8387569 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -557,15 +557,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                         ctx.serverAdminIpFromUuid[server.uuid] = 'unknown';
                         continue;
                     }
-                    var nics = server.sysinfo['Network Interfaces'] || {};
-                    var adminIp = Object.keys(nics).map(function (nicName) {
-                        return nics[nicName];
-                    }).filter(function (nic) {
-                        return nic['NIC Names'].indexOf('admin') !== -1;
-                    }).map(function (nic) {
-                        return nic.ip4addr;
-                    })[0];
-                    ctx.serverAdminIpFromUuid[server.uuid] = adminIp;
+                    ctx.serverAdminIpFromUuid[server.uuid] =
+                        common.serverAdminIpFromSysinfo(server.sysinfo);
                 }
                 next();
             });
@@ -3088,7 +3081,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 if (change.image) {
                     validateString(change.image, '"image" in ' + repr);
                 }
-                if (change.type === 'create') {
+                if (change.type === 'create-instance') {
                     // 1. create-instance
                     validateString(change.service, '"service" in ' + repr);
                     validateString(change.server, '"server" in ' + repr);
@@ -3762,7 +3755,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         }
                     }
                     break;
-                case 'create':
+                case 'create-instance':
                     // Create instance for an existing service:
                     if (options.skipHACheck) {
                         ch.force = true;
