From f65f2ec3fcf69b958830dae8c3e465e94e531345 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 11 Jan 2017 00:51:05 +1300
Subject: [PATCH] DAPI-334: dapi can miscalculate disk and ram requirements
 when a disk or ram arg differs from pkg

---
 lib/algorithms/hard-filter-min-disk.js       |  9 ++-
 lib/algorithms/hard-filter-min-ram.js        |  3 +-
 test/algorithms/hard-filter-min-disk.test.js | 59 +++++++++++++++++---
 test/algorithms/hard-filter-min-ram.test.js  | 35 ++++++++++++
 4 files changed, 96 insertions(+), 10 deletions(-)

diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index 04f7aa7..190955c 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -25,6 +25,7 @@ filterMinDisk(servers, opts, cb)
 	assert.object(opts, 'opts');
 	assert.object(opts.vm, 'opts.vm');
 	assert.object(opts.img, 'opts.img');
+	assert.optionalObject(opts.pkg, 'opts.pkg');
 	assert.object(opts.defaults, 'opts.defaults');
 	assert.func(cb, 'cb');
 
@@ -49,11 +50,15 @@ filterMinDisk(servers, opts, cb)
 	if (pkg && pkg.overprovision_disk) {
 		var requestedDisk;
 
+		// VM quota takes precedence over pkg quota. The former is in
+		// GiB, while the latter is in MiB.
+		var quota = vm.quota ? vm.quota * 1024 : pkg.quota;
+
 		if (vm.brand === 'kvm' || img.type === 'zvol') {
 			// image_size applies to disk[0], quota to disk[1]
-			requestedDisk = pkg.quota + img.image_size;
+			requestedDisk = quota + img.image_size;
 		} else {
-			requestedDisk = Math.ceil(pkg.quota /
+			requestedDisk = Math.ceil(quota /
 			        pkg.overprovision_disk);
 		}
 
diff --git a/lib/algorithms/hard-filter-min-ram.js b/lib/algorithms/hard-filter-min-ram.js
index 57b44cf..8fdada8 100644
--- a/lib/algorithms/hard-filter-min-ram.js
+++ b/lib/algorithms/hard-filter-min-ram.js
@@ -21,6 +21,7 @@ filterMinRam(servers, opts, cb)
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(opts, 'opts');
 	assert.object(opts.vm, 'opts.vm');
+	assert.optionalObject(opts.pkg, 'opts.pkg');
 	assert.object(opts.defaults, 'opts.defaults');
 	assert.func(cb, 'cb');
 
@@ -36,7 +37,7 @@ filterMinRam(servers, opts, cb)
 	}
 
 	if (pkg && pkg.overprovision_ram) {
-		var requestedRam = vm.ram;
+		var requestedRam = vm.ram || pkg.max_physical_memory;
 
 		if (vm.brand !== 'kvm')
 			requestedRam /= pkg.overprovision_ram;
diff --git a/test/algorithms/hard-filter-min-disk.test.js b/test/algorithms/hard-filter-min-disk.test.js
index 94e172a..6ea77ef 100644
--- a/test/algorithms/hard-filter-min-disk.test.js
+++ b/test/algorithms/hard-filter-min-disk.test.js
@@ -19,7 +19,7 @@ var GiB = 1024 * MiB;
 var checkFilter = common.createPluginChecker(filter);
 
 
-test('filterMinDisk()', function (t) {
+test('filterMinDisk() without overprovision ratio', function (t) {
 	var servers = [ {
 		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
 		unreserved_disk: 2560,
@@ -49,7 +49,7 @@ test('filterMinDisk()', function (t) {
 	};
 
 	var opts = {
-		vm:  { quota: 5120 },
+		vm:  { quota: 5 },
 		img: {},
 		pkg: {},
 		defaults: {}
@@ -82,7 +82,7 @@ test('filterMinDisk() without pkg', function (t) {
 	var expectReasons = {};
 
 	var opts = {
-		vm:  { quota: 5120 },
+		vm:  { quota: 5 },
 		img: {},
 		defaults: {}
 	};
@@ -116,7 +116,7 @@ test('filterMinDisk() with override', function (t) {
 	};
 
 	var opts = {
-		vm:  { quota: 5120 },
+		vm:  { quota: 5 },
 		img: {},
 		pkg: {},
 		defaults: { filter_min_resources: false }
@@ -156,7 +156,7 @@ test('filterMinDisk() with overprovision ratios - kvm', function (t) {
 	};
 
 	var opts = {
-		vm:  { quota: 10 }, // in GiB
+		vm:  { quota: 29 }, // in GiB
 		img: {
 			type: 'zvol',
 			image_size: 10 * 1024, // in MiB
@@ -165,7 +165,7 @@ test('filterMinDisk() with overprovision ratios - kvm', function (t) {
 			} ]
 		},
 		pkg: {
-			quota: 29 * 1024, // in MiB
+			quota: 50 * 1024, // MiB, but ignored due to vm quota
 			overprovision_disk: 1.5
 		},
 		defaults: {}
@@ -210,7 +210,52 @@ test('filterMinDisk() with overprovision ratios - zone', function (t) {
 			} ]
 		},
 		pkg: {
-			quota: 29 * 1024, // in MiB
+			quota: 50 * 1024, // MiB, but ignored due to vm quota
+			overprovision_disk: 1.5
+		},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterMinDisk() without vm quota arg', function (t) {
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 25600,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 50000,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 51200,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 76800,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(1, 4);
+	var expectReasons = {
+		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
+			'VM\'s calculated 30188 MiB disk is more than ' +
+			'server\'s spare 25600 MiB'
+	};
+
+	var opts = {
+		vm: {},
+		img: {
+			image_size: 10 * 1024, // in MiB
+			files: [ {
+				size: 150 * MiB // in bytes
+			} ]
+		},
+		pkg: {
+			quota: 29 * 1024, // MiB
 			overprovision_disk: 1.5
 		},
 		defaults: {}
diff --git a/test/algorithms/hard-filter-min-ram.test.js b/test/algorithms/hard-filter-min-ram.test.js
index 0a6604c..7c5e940 100644
--- a/test/algorithms/hard-filter-min-ram.test.js
+++ b/test/algorithms/hard-filter-min-ram.test.js
@@ -186,6 +186,41 @@ test('filterMinRam() with overprovision ratios', function (t) {
 });
 
 
+test('filterMinRam() with pkg ram instead of vm', function (t) {
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256, overprovision_ratios: {}
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511, overprovision_ratios: {}
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(2, 4);
+	var expectReasons = {
+		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
+		    'VM\'s calculated 512 RAM is less than server\'s spare 511',
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+		    'VM\'s calculated 512 RAM is less than server\'s spare 256'
+	};
+
+	var opts = {
+		vm: {},
+		pkg: { max_physical_memory: 512, overprovision_ram: 1.0 },
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
 test('filterMinRam() with no servers', function (t) {
 	var servers = [];
 
-- 
2.21.0

