commit a997b2523f9b95a1e835572aeee0c7eb0807916e
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-05-16T12:02:28-07:00 (5 months ago)
    
    MANTA-4284 RBAC support for using resource paths

diff --git a/lib/client.js b/lib/client.js
index 94aebe4..9f3f105 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -434,7 +434,7 @@ MahiClient.prototype.authorize = function authorize(opts) {
     var context = {
         action: opts.action,
         conditions: opts.conditions,
-        resource: ''
+        resource: resource.path || resource.key || ''
     };
     /*
      * The set of rules we will select from all the relevant policy and
@@ -483,8 +483,8 @@ MahiClient.prototype.authorize = function authorize(opts) {
      * language -- we enforce "principal" constraints by limiting the list of
      * roles we consider here based on membership, and "resource" constraints
      * in one of two ways: by using the resource role tags (stored with the
-     * resource itself); or by using the regular resource evaluator only if
-     * the "resource" part of the rule was explicitly set to '*' or 'all'.
+     * resource itself); or by using the regular resource evaluator if the
+     * "resource" part of the rule was given explicitly.
      */
     for (i = 0; i < activeRoles.length; ++i) {
         // check if the principal is allowed to assume the role
@@ -493,12 +493,24 @@ MahiClient.prototype.authorize = function authorize(opts) {
             throw new errors.InvalidRoleError(activeRoles[i]);
         }
 
-        /*
-         * Aperture parser sets .resources to the Number 1 if '*' or 'all' was
-         * given as the target.
-         */
-        var rulesWithAll = role.rules.filter(function (rule) {
-            return (rule[1].resources === 1);
+        var rulesWithResources = role.rules.filter(function (rule) {
+            /*
+             * Aperture parser sets .resources to the Number 1 if '*' or 'all'
+             * was given as the target.
+             */
+            if (rule[1].resources === 1)
+                return (true);
+            if (typeof (rule[1].resources) !== 'object')
+                return (false);
+            if (Array.isArray(rule[1].resources.exact)) {
+                if (rule[1].resources.exact.length > 0)
+                    return (true);
+            }
+            if (Array.isArray(rule[1].resources.regex)) {
+                if (rule[1].resources.regex.length > 0)
+                    return (true);
+            }
+            return (false);
         });
 
         /*
@@ -533,14 +545,14 @@ MahiClient.prototype.authorize = function authorize(opts) {
                 rulesToEvaluate.push(rule[1]);
             });
 
-        } else if (rulesWithAll.length > 0) {
+        } else if (rulesWithResources.length > 0) {
             matchingRoles.push(activeRoles[i]);
             /*
-             * Only push the rules that have the * resource. If we push any
+             * Only push the rules that have explicit resources. If we push any
              * others, they will end up applying even though there's no role
              * tag!
              */
-            rulesWithAll.forEach(function (rule) {
+            rulesWithResources.forEach(function (rule) {
                 rulesToEvaluate.push(rule[1]);
             });
         }
diff --git a/package.json b/package.json
index be11d74..8cb674c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "mahi",
     "description": "Mahi client",
-    "version": "2.2.4",
+    "version": "2.3.0",
     "author": "Joyent (joyent.com)",
     "main": "index.js",
     "dependencies": {
