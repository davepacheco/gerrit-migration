commit d2fd41893a1e64ddcc99a8b30940a4d1ea34caab (HEAD -> master)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-08-30T14:53:51-06:00 (5 weeks ago)
    
    MANTA-4289 Update electric-moray to use node-fast 2.8.1

diff --git a/lib/moray_client.js b/lib/moray_client.js
index ba32fe3..40698ce 100644
--- a/lib/moray_client.js
+++ b/lib/moray_client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -25,6 +25,7 @@ function createClient(options, callback) {
     assert.object(options.log, 'options.log');
     assert.object(options.ring, 'options.ring');
     assert.object(options.morayOptions, 'options.morayOptions');
+    assert.number(options.crc_mode, 'options.crc_mode');
     assert.func(callback, 'options.callback');
 
     var log = options.log;
@@ -58,6 +59,7 @@ function createClient(options, callback) {
             morayargs.log = options.log.child({
                 component: 'moray-client-' + pnodeUrl.hostname
             });
+            morayargs.crc_mode = options.crc_mode;
 
             var client = moray.createClient(morayargs);
             clientMap[pnode] = client;
diff --git a/lib/server.js b/lib/server.js
index fdaa7fe..01a0539 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -117,6 +117,11 @@ function createServer(options, callback) {
     assert.object(options, 'options');
     assert.func(callback, 'callback');
     assert.string(options.ringLocation, 'options.ringLocation');
+    assert.optionalObject(options.fast, 'options.fast');
+    assert.optionalNumber(options.fast.client_crc_mode,
+        'options.fast.client_crc_mode');
+    assert.optionalNumber(options.fast.server_crc_mode,
+        'options.fast.server_crc_mode');
 
     var log = options.log;
     var opts = {
@@ -142,11 +147,17 @@ function createServer(options, callback) {
 
         opts.ring = _ring;
 
+        var client_crc_mode = options.fast.client_crc_mode ||
+            fast.FAST_CHECKSUM_V1;
+        var server_crc_mode = options.fast.server_crc_mode ||
+            fast.FAST_CHECKSUM_V1;
+
         log.info('creating moray clients');
         moray_client.createClient({
             ring: opts.ring,
             morayOptions: options.morayOptions,
-            log: options.log
+            log: options.log,
+            crc_mode: client_crc_mode
         }, function (cErr, clients) {
             if (cErr) {
                 throw new verror.VError(cErr, 'unable to create moray clients');
@@ -166,11 +177,22 @@ function createServer(options, callback) {
                 labels: labels
             });
 
+            collector.gauge({
+                name: 'fast_client_crc_mode',
+                help: 'The node-fast CRC compatibilty mode of the Fast client'
+            }).set(client_crc_mode);
+
+            collector.gauge({
+                name: 'fast_server_crc_mode',
+                help: 'The node-fast CRC compatibilty mode of the Fast server'
+            }).set(server_crc_mode);
+
             var socket = net.createServer({ 'allowHalfOpen': true });
             var server = new fast.FastServer({
                 collector: collector,
                 log: log.child({ component: 'fast' }),
-                server: socket
+                server: socket,
+                crc_mode: server_crc_mode
             });
 
             var methods = [
diff --git a/package.json b/package.json
index 9a79873..d089151 100644
--- a/package.json
+++ b/package.json
@@ -16,12 +16,12 @@
         "clone": "0.1.9",
         "dtrace-provider": "0.2.8",
         "fash": "2.5.0",
-        "fast": "2.3.2",
+        "fast": "2.8.1",
         "jsprim": "2.0.0",
         "kang": "1.2.0",
         "ldapjs": "0.6.3",
         "imgapi-cli": "git+https://github.com/joyent/sdc-imgapi-cli.git#v2.4.1",
-        "moray": "^3.4.0",
+        "moray": "3.7.0",
         "node-uuid": "1.4.0",
         "posix-getopt": "^1.0.0",
         "restify": "6.3.1",
diff --git a/sapi_manifests/electric-moray/template b/sapi_manifests/electric-moray/template
index b8cac1d..c39d911 100644
--- a/sapi_manifests/electric-moray/template
+++ b/sapi_manifests/electric-moray/template
@@ -6,6 +6,20 @@
             "type": "udp"
         }
     },
+    "fast": {
+      {{#MORAY_FAST_CLIENT_CRC_MODE}}
+      "client_crc_mode": {{MORAY_FAST_CLIENT_CRC_MODE}},
+      {{/MORAY_FAST_CLIENT_CRC_MODE}}
+      {{^MORAY_FAST_CLIENT_CRC_MODE}}
+      "client_crc_mode": 1,
+      {{/MORAY_FAST_CLIENT_CRC_MODE}}
+      {{#MORAY_FAST_SERVER_CRC_MODE}}
+      "server_crc_mode": {{MORAY_FAST_SERVER_CRC_MODE}}
+      {{/MORAY_FAST_SERVER_CRC_MODE}}
+      {{^MORAY_FAST_SERVER_CRC_MODE}}
+      "server_crc_mode": 2
+      {{/MORAY_FAST_SERVER_CRC_MODE}}
+    },
     "numWorkers": 0,
     "audit": false,
     "cache": {
diff --git a/test/batch.test.js b/test/batch.test.js
index 2bd08e2..1c5599f 100644
--- a/test/batch.test.js
+++ b/test/batch.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var path = require('path');
@@ -63,7 +63,6 @@ var BUCKET_CFG = {
         cb();
     }],
     options: {
-        trackModification: true,
         guaranteeOrder: true
     }
 };
diff --git a/test/objects.test.js b/test/objects.test.js
index b5d7055..56fcc55 100644
--- a/test/objects.test.js
+++ b/test/objects.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var clone = require('clone');
@@ -68,7 +68,6 @@ var BUCKET_CFG = {
         cb();
     }],
     options: {
-        trackModification: true,
         guaranteeOrder: true
     }
 };
@@ -880,54 +879,6 @@ test('find _txn_snap', function (t) {
 });
 
 
-
-test('trackModification (MANTA-269)', function (t) {
-    var b = this.bucket;
-    var c = this.client;
-    var k = uuid.v4() + '/' + uuid.v4();
-    var v = {
-        str: 'hi'
-    };
-    var id1;
-    var self = this;
-
-    vasync.pipeline({
-        funcs: [ function create(_, cb) {
-            c.putObject(b, k, v, cb);
-        }, function getOne(_, cb) {
-            c.getObject(b, k, {noCache: true}, function (err, obj) {
-                if (err) {
-                    cb(err);
-                } else {
-                    t.ok(obj);
-                    self.assertObject(t, obj, k, v);
-                    id1 = obj._id;
-                    cb();
-                }
-            });
-        }, function update(_, cb) {
-            c.putObject(b, k, v, cb);
-        }, function getTwo(_, cb) {
-            c.getObject(b, k, {noCache: true}, function (err, obj) {
-                if (err) {
-                    cb(err);
-                } else {
-                    t.ok(obj);
-                    self.assertObject(t, obj, k, v);
-                    t.notEqual(id1, obj._id);
-                    cb();
-                }
-            });
-        } ],
-        arg: {}
-    }, function (err) {
-        t.ifError(err);
-
-        t.end();
-    });
-});
-
-
 // we don't support batch operations
 test('unsupported batch and update operations', function (t) {
     var b = this.bucket;
