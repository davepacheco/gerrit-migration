From 3ac7789668834428cbb229bd54ba8f70020cce3e Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Thu, 10 May 2018 20:11:02 +0000
Subject: [PATCH] OS-6630 bhyve should support vnc Reviewed by: Jorge Schrauwen
 <sjorge@blackdot.be> Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
 Reviewed by: Josh Wilsdon <jwilsdon@joyent.com> Approved by: Josh Wilsdon
 <jwilsdon@joyent.com>

---
 src/vm/node_modules/proptable.js |  1 -
 src/vm/sbin/vmadmd.js            | 20 +++++++++++++-------
 2 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/src/vm/node_modules/proptable.js b/src/vm/node_modules/proptable.js
index 03107e97..36b19e86 100644
--- a/src/vm/node_modules/proptable.js
+++ b/src/vm/node_modules/proptable.js
@@ -1862,7 +1862,6 @@ exports.properties = {
         loadValueTranslator: 'utils.unbase64',
         payload: {
             allowed: {
-                'bhyve': ['create', 'receive', 'update'],
                 'kvm': ['create', 'receive', 'update']
             },
             type: 'string'
diff --git a/src/vm/sbin/vmadmd.js b/src/vm/sbin/vmadmd.js
index 558ebe23..4f1974e2 100755
--- a/src/vm/sbin/vmadmd.js
+++ b/src/vm/sbin/vmadmd.js
@@ -501,7 +501,7 @@ function handleProvisioning(vmobj, cb)
             'zonepath'
         ];
 
-        if (vmobj.brand === 'kvm') {
+        if (['bhyve', 'kvm'].indexOf(vmobj.brand) !== -1) {
             // reload the VM to see if we should setup VNC, etc.
             VM.load(vmobj.uuid, {fields: load_fields},
                 function (load_err, obj) {
@@ -517,7 +517,9 @@ function handleProvisioning(vmobj, cb)
                     // clear any old timers or VNC/SPICE since this vm just came
                     // up (state was provisioning), then spin up a new VNC.
                     clearVM(obj.uuid);
-                    rotateKVMLog(vmobj.uuid);
+                    if (vmobj.brand === 'kvm') {
+                        rotateKVMLog(vmobj.uuid);
+                    }
                     spawnRemoteDisplay(obj);
                 }
                 cb(null, 'success');
@@ -1123,10 +1125,11 @@ function updateZoneStatus(ev)
             seen_vms[ev.zonename].provisioned = true;
         }
 
-        // don't handle transitions other than provisioning for non-kvm
-        if (vmobj.brand !== 'kvm') {
+        // don't handle transitions other than provisioning for non-kvm/bhyve
+        if (['bhyve', 'kvm'].indexOf(vmobj.brand) !== -1) {
             log.trace('doing nothing for ' + ev.zonename + ' transition '
-                + 'because brand is not "kvm"');
+                + 'because brand "' + vmobj.brand
+                + '" is not "kvm" or "bhyve"');
             return;
         }
 
@@ -1134,7 +1137,9 @@ function updateZoneStatus(ev)
             // clear any old timers or VNC/SPICE since this vm just came
             // up, then spin up a new VNC.
             clearVM(vmobj.uuid);
-            rotateKVMLog(vmobj.uuid);
+            if (vmobj.brand === 'kvm') {
+                rotateKVMLog(vmobj.uuid);
+            }
             spawnRemoteDisplay(vmobj);
         } else if (ev.oldstate === 'running') {
             if (VNC.hasOwnProperty(ev.zonename)) {
@@ -2508,7 +2513,8 @@ function main()
                                     + result);
                                 upg_cb();
                             });
-                        } else if (vmobj.brand === 'kvm') {
+                        } else if (['bhyve', 'kvm'].
+                                indexOf(vmobj.brand) !== -1) {
                             log.debug('calling loadVM(' + vmobj.uuid + ')');
                             loadVM(vmobj, do_autoboot);
                             upg_cb();
-- 
2.21.0

