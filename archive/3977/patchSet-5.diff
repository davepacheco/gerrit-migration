commit 0763f78e93137a855cb4e039fa6f2a5952191ccf (refs/changes/77/3977/5)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2018-06-28T11:34:02-07:00 (1 year, 3 months ago)
    
    TRITON-52 x-DC image copy

diff --git a/CHANGES.md b/CHANGES.md
index e44c01b..94746fc 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -26,6 +26,13 @@ Known issues:
   --allow-shared-images cli option when calling `triton create` command to
   provision from a shared image (or clone the image then provision from the
   clone).
+- [TRITON-52] x-DC image copy. A user can copy an image that they own into
+  another datacenter within the same cloud using the `triton image copy` cli
+  command. Example:
+
+  ```
+  triton -p us-east-1 image copy my-custom-image us-sw-1
+  ```
 
 ## 6.0.0
 
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index f98a773..169b33f 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -36,9 +36,11 @@
 
 var assert = require('assert-plus');
 var format = require('util').format;
+var jsprim = require('jsprim');
 var LOMStream = require('lomstream').LOMStream;
 var os = require('os');
 var querystring = require('querystring');
+var url = require('url');
 var vasync = require('vasync');
 var auth = require('smartdc-auth');
 var EventEmitter = require('events').EventEmitter;
@@ -151,6 +153,7 @@ function CloudApi(options) {
     // TODO support token auth
     //this.token = options.token;
 
+    this.options = options;
     this.client = new SaferJsonClient(options);
 }
 
@@ -160,6 +163,20 @@ CloudApi.prototype.close = function close(callback) {
     this.client.close();
 };
 
+/**
+ * Create a new cloudapi client based on the existing one, but with new url.
+ *
+ * @param theUrl {String} (required) Cloud API base url.
+ * @returns {SaferJsonClient}
+ */
+CloudApi.prototype.createClientForUrl = function createClientForUrl(theUrl) {
+    this.log.debug({url: theUrl}, 'create new cloudapi client for url');
+
+    var options = jsprim.deepCopy(this.options);
+    options.url = theUrl;
+    return new SaferJsonClient(options);
+};
+
 CloudApi.prototype._getAuthHeaders =
     function _getAuthHeaders(method, path, callback) {
 
@@ -264,11 +281,13 @@ CloudApi.prototype._request = function _request(opts, cb) {
     if (typeof (opts) === 'string')
         opts = {path: opts};
     assert.object(opts, 'opts');
+    assert.optionalObject(opts.client, 'opts.client');
     assert.optionalObject(opts.data, 'opts.data');
     assert.optionalString(opts.method, 'opts.method');
     assert.optionalObject(opts.headers, 'opts.headers');
     assert.func(cb, 'cb');
 
+    var client = opts.client || self.client;
     var method = (opts.method || 'GET').toLowerCase();
     assert.ok(['get', 'post', 'put', 'delete', 'head'].indexOf(method) >= 0,
         'invalid HTTP method given');
@@ -295,9 +314,9 @@ CloudApi.prototype._request = function _request(opts, cb) {
             headers: headers
         };
         if (opts.data)
-            self.client[clientFnName](reqOpts, opts.data, cb);
+            client[clientFnName](reqOpts, opts.data, cb);
         else
-            self.client[clientFnName](reqOpts, cb);
+            client[clientFnName](reqOpts, cb);
     });
 };
 
@@ -1082,6 +1101,54 @@ CloudApi.prototype.cloneImage = function cloneImage(opts, cb) {
     });
 };
 
+/**
+ * Copy image to another datacenter in the same cloud.
+ * <http://apidocs.joyent.com/cloudapi/#ImportImageFromDatacenter>
+ *
+ * @param {Object} opts
+ *      - {String} datacenter  Required.  The datacenter to copy the image into.
+ *      - {UUID} id  Required.  The id of the image to update.
+ * @param {Function} cb of the form `function (err, body, res)`
+ */
+CloudApi.prototype.copyImage = function copyImage(opts, cb) {
+    assert.object(this.client.url, 'this.client.url');
+    assert.string(this.client.url.host, 'this.client.url.host');
+    assert.string(opts.datacenter, 'datacenter');
+    assert.uuid(opts.id, 'id');
+    assert.func(cb, 'cb');
+
+    // XXX: How do I know which part of the cloudapi URL to replace? Currently
+    // this method just assumes the first part of the hostname is the datacenter
+    // name. Grr, we wouldn't need to do this if it contacted the source DC
+    // which then pushed to the destination DC, rather than contacting the
+    // destination DC.
+    var u = url.parse(this.url);
+    var hostSplit = u.host.split('.');
+    var fromDatacenter = hostSplit[0];
+    hostSplit[0] = opts.datacenter;
+    u.host = hostSplit.join('.');
+    var dcUrl = u.format();
+
+    var client = this.createClientForUrl(dcUrl);
+    var path = format(
+        '/%s/images?action=import-from-datacenter&datacenter=%s&id=%s',
+        this.account, fromDatacenter, opts.id);
+
+    this._request({
+        client: client,
+        method: 'POST',
+        path: path,
+        data: {}
+    }, function (err, req, res, body) {
+        client.close();
+        if (err) {
+            cb(err, null, res);
+            return;
+        }
+        cb(null, body, res);
+    });
+};
+
 /**
  * Wait for an image to go one of a set of specfic states.
  *
diff --git a/lib/do_image/do_copy.js b/lib/do_image/do_copy.js
new file mode 100644
index 0000000..1744f82
--- /dev/null
+++ b/lib/do_image/do_copy.js
@@ -0,0 +1,111 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ *
+ * `triton image copy ...`
+ */
+
+var vasync = require('vasync');
+
+var common = require('../common');
+var errors = require('../errors');
+
+// ---- the command
+
+function do_copy(subcmd, opts, args, cb) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length !== 2) {
+        cb(new errors.UsageError(
+            'incorrect number of args: expected 2, got ' + args.length));
+        return;
+    }
+
+    var log = this.top.log;
+    var tritonapi = this.top.tritonapi;
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function copyImage(ctx, next) {
+            log.trace({dryRun: opts.dry_run, account: ctx.account, args: args},
+                'image copy');
+
+            if (opts.dry_run) {
+                next();
+                return;
+            }
+
+            tritonapi.copyImageToDatacenter(
+                    {image: args[0], datacenter: args[1]},
+                    function (err, img) {
+                if (err) {
+                    next(new errors.TritonError(err, 'error copying image'));
+                    return;
+                }
+
+                log.trace({img: img}, 'image copy result');
+
+                if (opts.json) {
+                    console.log(JSON.stringify(img));
+                } else {
+                    console.log('Copied image %s', common.imageRepr(img));
+                }
+
+                next();
+            });
+        }
+    ]}, function (err) {
+        cb(err);
+    });
+}
+
+do_copy.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        group: 'Other options'
+    },
+    {
+        names: ['dry-run'],
+        type: 'bool',
+        help: 'Go through the motions without actually copying.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    }
+];
+
+do_copy.synopses = [
+    '{{name}} {{cmd}} [OPTIONS] IMAGE DATACENTER'
+];
+
+do_copy.help = [
+    /* BEGIN JSSTYLED */
+    'Copy image to another datacenter.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "IMAGE" is an image id (a full UUID), an image name (selects the',
+    'latest, by "published_at", image with that name), an image "name@version"',
+    '(selects latest match by "published_at"), or an image short ID (ID prefix).',
+    '',
+    '"DATACENTER" is the datacenter name (string). Use `triton datacenters` to',
+    'show the available datacenter names.'
+    /* END JSSTYLED */
+].join('\n');
+
+do_copy.completionArgtypes = ['tritonimage', 'none'];
+
+module.exports = do_copy;
diff --git a/lib/do_image/index.js b/lib/do_image/index.js
index e719037..6ee6e4b 100644
--- a/lib/do_image/index.js
+++ b/lib/do_image/index.js
@@ -34,6 +34,7 @@ function ImageCLI(top) {
             'list',
             'get',
             'clone',
+            'copy',
             'create',
             'delete',
             'export',
@@ -53,6 +54,7 @@ ImageCLI.prototype.init = function init(opts, args, cb) {
 ImageCLI.prototype.do_list = require('./do_list');
 ImageCLI.prototype.do_get = require('./do_get');
 ImageCLI.prototype.do_clone = require('./do_clone');
+ImageCLI.prototype.do_copy = require('./do_copy');
 ImageCLI.prototype.do_create = require('./do_create');
 ImageCLI.prototype.do_delete = require('./do_delete');
 ImageCLI.prototype.do_export = require('./do_export');
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index f32e330..408ed45 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -994,6 +994,46 @@ TritonApi.prototype.cloneImage = function cloneImage(opts, cb)
     });
 };
 
+/**
+ * Copy an image to another Datacenter.
+ *
+ * @param {Object} opts
+ *      - {String} datacenter The datacenter name to copy to.  Required.
+ *      - {String} image The image UUID, name, or short ID.  Required.
+ * @param {Function} cb `function (err, img)`
+ *      On failure `err` is an error instance, else it is null.
+ *      On success: `img` is the copied image object.
+ */
+TritonApi.prototype.copyImageToDatacenter =
+function copyImageToDatacenter(opts, cb) {
+    var self = this;
+    assert.object(opts, 'opts');
+    assert.string(opts.datacenter, 'opts.datacenter');
+    assert.string(opts.image, 'opts.image');
+    assert.func(cb, 'cb');
+
+    var arg = {
+        client: self,
+        datacenter: opts.datacenter,
+        image: opts.image
+    };
+    var img;
+
+    vasync.pipeline({arg: arg, funcs: [
+        _stepImg,
+        function cloudApiCopyImageToDc(ctx, next) {
+            self.cloudapi.copyImage(
+                    {id: ctx.img.id, datacenter: opts.datacenter},
+                    function _copyImageCb(err, img_) {
+                img = img_;
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, img);
+    });
+};
+
 /**
  * Get an active package by ID, exact name, or short ID, in that order.
  *
