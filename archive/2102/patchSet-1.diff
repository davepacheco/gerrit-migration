commit 943a92a5644c35a78076470a5647efec1cb7839b (refs/changes/02/2102/1)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2017-06-14T23:48:56+00:00 (2 years, 4 months ago)
    
    NAPI-409 allow listing of network pools by UUID prefix

diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 8936520..c5f4ac0 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -83,6 +83,7 @@ var GET_SCHEMA = {
 var LIST_SCHEMA = {
     strict: true,
     optional: {
+        uuid: validate.prefixFilter,
         limit: validate.limit,
         offset: validate.offset,
         name: validate.string,
@@ -576,6 +577,10 @@ function listNetworkPools(app, log, oparams, callback) {
             filterObj.owner_uuids_arr = [ params.provisionable_by, '!*' ];
         }
 
+        if (params.uuid) {
+            filterObj.uuid = params.uuid;
+        }
+
         if (params.family) {
             filterObj.family = params.family;
         }
diff --git a/lib/models/network.js b/lib/models/network.js
index a5a7d65..8439e2f 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -213,7 +213,7 @@ var UPDATE_SCHEMA = {
 var LIST_SCHEMA = {
     strict: true,
     optional: {
-        uuid: validate.string,
+        uuid: validate.prefixFilter,
         fabric: validate.bool,
         family: validate.enum([ 'ipv4', 'ipv6' ]),
         limit: validate.limit,
diff --git a/lib/util/validate.js b/lib/util/validate.js
index b7b0131..8de3e25 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -284,22 +284,65 @@ function validateMACarray(_, name, val, callback) {
  */
 function validateString(_, name, str, callback) {
     if (typeof (str) !== 'string') {
-        return callback(new errors.invalidParam(name, constants.msg.STR));
+        callback(new errors.invalidParam(name, constants.msg.STR));
+        return;
     }
 
     if (str.length > constants.MAX_STR_LEN) {
-        return callback(new errors.invalidParam(name,
+        callback(new errors.invalidParam(name,
             fmt('must not be longer than %d characters',
                 constants.MAX_STR_LEN)));
+        return;
     }
 
     if (str.replace(STR_RE, '') === '') {
-        return callback(new errors.invalidParam(name, 'must not be empty'));
+        callback(new errors.invalidParam(name, 'must not be empty'));
+        return;
     }
 
-    return callback(null, str);
+    callback(null, str);
 }
 
+/*
+ * Verifies that the query string either contains only 1 `*` character at the
+ * end of the string, or none at all.
+ */
+function validatePrefixFilter(_, name, str, callback) {
+    if (typeof (str) !== 'string') {
+        callback(new errors.invalidParam(name, constants.msg.STR));
+        return;
+    }
+
+    if (str.length > constants.MAX_STR_LEN) {
+        callback(new errors.invalidParam(name,
+            fmt('must not be longer than %d characters',
+                constants.MAX_STR_LEN)));
+        return;
+    }
+
+    if (str.replace(STR_RE, '') === '') {
+        callback(new errors.invalidParam(name, 'must not be empty'));
+        return;
+    }
+
+    var nstars = (str.match(/\*/g) || []).length;
+    if (nstars > 1) {
+        callback(new errors.invalidParam('need only 1 wildcard'));
+        return;
+    }
+
+    if (nstars > 0 && str.slice(-1) !== '*') {
+        callback(new errors.invalidParam('wildcards must represent prefixes'));
+        return;
+    }
+
+    if (nstars == 0 && !warden.isUUID(str)) {
+        callback(new errors.invalidParam('Invalid UUID'));
+        return;
+    }
+
+    callback(null, str);
+}
 
 /**
  * Validates a subnet
@@ -420,6 +463,7 @@ module.exports = {
     offset: warden.offset,
     params: warden.params,
     string: validateString,
+    prefixFilter: validatePrefixFilter,
     stringOrArray: validateStringOrArray,
     stringArray: validateStringArray,
     subnet: validateSubnet,
diff --git a/test/integration/network-pools.test.js b/test/integration/network-pools.test.js
index e690891..5473818 100644
--- a/test/integration/network-pools.test.js
+++ b/test/integration/network-pools.test.js
@@ -139,6 +139,89 @@ test('GET /network_pools', function (t) {
     });
 });
 
+test('GET /network_pools?uuid=$SOME_UUID', function (t) {
+    /* Expect empty list */
+    napi.listNetworkPools({uuid: 'e80a3efa-5158-11e7-a3ff-fbd21a3ddd8b'},
+        function (err, res) {
+
+        t.ifError(err, 'get network by uuid');
+        t.ok(res.length === 0, 'empty result');
+        return t.end();
+    });
+});
+
+test('GET /network_pools?uuid=badcafe*', function (t) {
+    /* Expect empty list */
+    napi.listNetworkPools({uuid: 'badcafe*'}, function (err, res) {
+        t.ifError(err, 'get network by prefix');
+        t.ok(res.length === 0, 'empty result');
+        return t.end();
+    });
+});
+
+test('GET /network_pools?uuid=badcafe', function (t) {
+    /* Expect empty list */
+    napi.listNetworkPools({uuid: 'badcafe'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'Invalid UUID',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
+
+test('GET /network_pools?uuid=*badcafe', function (t) {
+    /* Expect prefix validation error */
+    napi.listNetworkPools({uuid: '*badcafe'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'wildcards must represent prefixes',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
+
+test('GET /network_pools?uuid=*badcafe*', function (t) {
+    /* Expect too-man-wildcards error */
+    napi.listNetworkPools({uuid: '*badcafe*'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'need only 1 wildcard',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
+
 
 test('PUT /network_pools/:uuid', function (t) {
     var params = {
diff --git a/test/integration/networks.test.js b/test/integration/networks.test.js
index 260aa05..aaf7b65 100644
--- a/test/integration/networks.test.js
+++ b/test/integration/networks.test.js
@@ -275,6 +275,82 @@ test('GET /networks (filtered)', function (t) {
     });
 });
 
+test('GET /networks?uuid=badcafe*', function (t) {
+    napi.listNetworks({uuid: 'badcafe*'}, function (err, res) {
+        t.ifError(err, 'get network by prefix');
+        t.ok(res.length === 0, 'empty result');
+        return t.end();
+    });
+});
+
+test('GET /networks?uuid=badcafe', function (t) {
+    napi.listNetworks({uuid: 'badcafe'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'Invalid UUID',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
+test('GET /networks?uuid=$SOME_UUID', function (t) {
+    napi.listNetworks({uuid: 'e80a3efa-5158-11e7-a3ff-fbd21a3ddd8b'},
+        function (err, res) {
+
+        t.ifError(err, 'get network by uuid');
+        t.ok(res.length === 0, 'empty result');
+        return t.end();
+    });
+});
+
+test('GET /networks?uuid=*badcafe', function (t) {
+    napi.listNetworks({uuid: '*badcafe'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'wildcards must represent prefixes',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
+
+test('GET /networks?uuid=*badcafe*', function (t) {
+    napi.listNetworks({uuid: '*badcafe*'}, function (err, res) {
+        t.ok(err, 'expecting error');
+        if (err) {
+            t.deepEqual(err.body, {
+                code: 'InvalidParameters',
+                message: 'Invalid parameters',
+                errors: [
+                    {
+                        field: 'need only 1 wildcard',
+                        code: 'InvalidParameter',
+                        message: 'Invalid parameters'
+                    }
+                ]
+            });
+        }
+        return t.end();
+    });
+});
 
 test('GET /networks (filter: multiple nic tags)', function (t) {
 
