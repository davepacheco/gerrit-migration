From 9977d2074bbcb794247504c64bf89989c1fceb46 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Wed, 14 Jun 2017 23:44:24 +0000
Subject: [PATCH] NAPI-409 allow listing of network pools by UUID prefix

---
 lib/models/network-pool.js             |  5 ++
 lib/models/network.js                  |  2 +-
 lib/util/validate.js                   | 69 ++-------------------
 package.json                           |  2 +-
 test/integration/network-pools.test.js | 80 ++++++++++++++++++++++++
 test/integration/networks.test.js      | 84 ++++++++++++++++++++++++--
 test/lib/pool.js                       |  3 +-
 7 files changed, 171 insertions(+), 74 deletions(-)

diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 8936520..021d4d4 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -83,6 +83,7 @@ var GET_SCHEMA = {
 var LIST_SCHEMA = {
     strict: true,
     optional: {
+        uuid: validate.uuidPrefix,
         limit: validate.limit,
         offset: validate.offset,
         name: validate.string,
@@ -576,6 +577,10 @@ function listNetworkPools(app, log, oparams, callback) {
             filterObj.owner_uuids_arr = [ params.provisionable_by, '!*' ];
         }
 
+        if (params.uuid) {
+            filterObj.uuid = params.uuid;
+        }
+
         if (params.family) {
             filterObj.family = params.family;
         }
diff --git a/lib/models/network.js b/lib/models/network.js
index a5a7d65..f95bb64 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -213,7 +213,7 @@ var UPDATE_SCHEMA = {
 var LIST_SCHEMA = {
     strict: true,
     optional: {
-        uuid: validate.string,
+        uuid: validate.uuidPrefix,
         fabric: validate.bool,
         family: validate.enum([ 'ipv4', 'ipv6' ]),
         limit: validate.limit,
diff --git a/lib/util/validate.js b/lib/util/validate.js
index b7b0131..d7e8af0 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -99,7 +99,7 @@ function validateInterfaceName(_, name, val, callback) {
  * Validates a valid nic tag name
  */
 function validateNicTagName(_, name, val, callback) {
-    validateString(null, name, val, function (err) {
+    warden.string(null, name, val, function (err) {
         if (err) {
             return callback(err);
         }
@@ -120,44 +120,6 @@ function validateNicTagName(_, name, val, callback) {
 }
 
 
-/**
- * Validates an array of nic tags
- */
-function validateStringArray(_, name, vals, callback) {
-    if (!util.isArray(vals)) {
-        return callback(new errors.invalidParam(name,
-                constants.msg.ARRAY_OF_STR));
-    }
-
-    if (vals.length === 0) {
-        return callback(new errors.invalidParam(name,
-                constants.msg.ARRAY_EMPTY));
-    }
-
-    for (var i = 0; i < vals.length; i++) {
-        var v = vals[i];
-        if (typeof (v) !== 'string') {
-            return callback(new errors.invalidParam(name,
-                    constants.msg.ARRAY_OF_STR));
-        }
-    }
-
-    return callback(null, vals);
-}
-
-/**
- * Validates something is either a string or an array of strings.
- */
-function validateStringOrArray(_, name, val, callback) {
-    validateString(null, name, val, function (err, vals) {
-        if (err) {
-            return validateStringArray(null, name, val, callback);
-        } else {
-            return callback(null, vals);
-        }
-    });
-}
-
 
 /**
  * Validates an array of IP addresses
@@ -279,28 +241,6 @@ function validateMACarray(_, name, val, callback) {
 }
 
 
-/**
- * Validates a string: ensures it's not empty
- */
-function validateString(_, name, str, callback) {
-    if (typeof (str) !== 'string') {
-        return callback(new errors.invalidParam(name, constants.msg.STR));
-    }
-
-    if (str.length > constants.MAX_STR_LEN) {
-        return callback(new errors.invalidParam(name,
-            fmt('must not be longer than %d characters',
-                constants.MAX_STR_LEN)));
-    }
-
-    if (str.replace(STR_RE, '') === '') {
-        return callback(new errors.invalidParam(name, 'must not be empty'));
-    }
-
-    return callback(null, str);
-}
-
-
 /**
  * Validates a subnet
  */
@@ -419,9 +359,10 @@ module.exports = {
     nicTagName: validateNicTagName,
     offset: warden.offset,
     params: warden.params,
-    string: validateString,
-    stringOrArray: validateStringOrArray,
-    stringArray: validateStringArray,
+    uuidPrefix: warden.uuidPrefix,
+    string: warden.string,
+    stringOrArray: warden.stringOrArray,
+    stringArray: warden.stringArray,
     subnet: validateSubnet,
     UUID: warden.UUID,
     UUIDarray: warden.UUIDarray,
diff --git a/package.json b/package.json
index 295ab56..48867e1 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
     "node-uuid": "1.4.7",
     "portolan-moray": "git+https://github.com/joyent/sdc-portolan-moray.git#7e2c4ca",
     "restify": "4.1.1",
-    "restify-warden": "0.1.1",
+    "restify-warden": "0.2.0",
     "sdc-clients": "9.2.0",
     "tape": "4.5.1",
     "trace-event": "1.3.0",
diff --git a/test/integration/network-pools.test.js b/test/integration/network-pools.test.js
index e690891..b6f3329 100644
--- a/test/integration/network-pools.test.js
+++ b/test/integration/network-pools.test.js
@@ -139,6 +139,86 @@ test('GET /network_pools', function (t) {
     });
 });
 
+test('GET /network_pools?uuid=$SOME_UUID', function (t) {
+    /* Expect empty list */
+    mod_pool.list(t, {
+        params: {uuid: 'e80a3efa-5158-11e7-a3ff-fbd21a3ddd8b'},
+        present: []
+    });
+});
+
+test('GET /network_pools?uuid=badcafe*', function (t) {
+    /* Expect empty list */
+    mod_pool.list(t, {
+        params: {uuid: 'badcafe*'},
+        present: []
+    });
+});
+
+test('GET /network_pools?uuid=$existing_prefix', function (t) {
+    var uuid = state.pools[0].uuid;
+    var prefix = uuid.substring(0, 8) + "*";
+    /* Expect empty list */
+    mod_pool.list(t, {
+        params: {uuid: prefix},
+        present: [ state.pools[0] ]
+    });
+});
+
+test('GET /network_pools?uuid=badcafe', function (t) {
+    /* Expect empty list */
+    mod_pool.list(t, {
+        params: {uuid: 'badcafe'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'Invalid UUID',
+                    code: 'InvalidParameter',
+                    message: 'Invalid parameters'
+                }
+            ]
+        }
+    });
+});
+
+test('GET /network_pools?uuid=*badcafe', function (t) {
+    /* Expect prefix validation error */
+    mod_pool.list(t, {
+        params: {uuid: '*badcafe'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'uuid',
+                    code: 'InvalidParameter',
+                    message: 'only UUID prefixes are allowed'
+                }
+            ]
+        }
+    });
+});
+
+test('GET /network_pools?uuid=*badcafe*', function (t) {
+    /* Expect too-man-wildcards error */
+    mod_pool.list(t, {
+        params: {uuid: '*badcafe*'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'uuid',
+                    code: 'InvalidParameter',
+                    message: 'need only 1 wildcard'
+                }
+            ]
+        }
+    });
+});
+
 
 test('PUT /network_pools/:uuid', function (t) {
     var params = {
diff --git a/test/integration/networks.test.js b/test/integration/networks.test.js
index 260aa05..1c71733 100644
--- a/test/integration/networks.test.js
+++ b/test/integration/networks.test.js
@@ -257,13 +257,12 @@ test('GET /networks', function (t) {
 
 
 test('GET /networks (filtered)', function (t) {
-    var filter = {
-        name: state.network.name
-    };
-    var desc = util.format(' (name=%s)', filter.name);
+    var desc = util.format(' (name=%s)', state.network.name);
 
-    napi.listNetworks(filter, function (err, res) {
-        t.ifError(err, 'get networks' + desc);
+    mod_net.list(t, {
+        params: {name: state.network.name},
+        present: []
+    }, function (err, res) {
         t.ok(res, 'list returned' + desc);
         if (err || !res) {
             return t.end();
@@ -275,6 +274,79 @@ test('GET /networks (filtered)', function (t) {
     });
 });
 
+test('GET /networks?uuid=$existing_prefix', function (t) {
+    var uuid = state.network.uuid;
+    var prefix = uuid.substring(0, 8) + "*";
+    mod_net.list(t, {
+        params: {uuid: prefix},
+        present: [ state.network ]
+    });
+});
+
+test('GET /networks?uuid=badcafe*', function (t) {
+    mod_net.list(t, {
+        params: {uuid: 'badcafe*'},
+        present: []
+    });
+});
+
+test('GET /networks?uuid=badcafe', function (t) {
+    mod_net.list(t, {
+        params: {uuid: 'badcafe'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'Invalid UUID',
+                    code: 'InvalidParameter',
+                    message: 'Invalid parameters'
+                }
+            ]
+        }
+    });
+});
+
+test('GET /networks?uuid=$SOME_UUID', function (t) {
+    mod_net.list(t, {
+        params: {uuid: 'e80a3efa-5158-11e7-a3ff-fbd21a3ddd8b'},
+        present: []
+    });
+});
+
+test('GET /networks?uuid=*badcafe', function (t) {
+    mod_net.list(t, {
+        params: {uuid: '*badcafe'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'uuid',
+                    code: 'InvalidParameter',
+                    message: 'only UUID prefixes are allowed'
+                }
+            ]
+        }
+    });
+});
+
+test('GET /networks?uuid=*badcafe*', function (t) {
+    mod_net.list(t, {
+        params: {uuid: '*badcafe*'},
+        expErr: {
+            code: 'InvalidParameters',
+            message: 'Invalid parameters',
+            errors: [
+                {
+                    field: 'uuid',
+                    code: 'InvalidParameter',
+                    message: 'need only 1 wildcard'
+                }
+            ]
+        }
+    });
+});
 
 test('GET /networks (filter: multiple nic tags)', function (t) {
 
diff --git a/test/lib/pool.js b/test/lib/pool.js
index a4d51b7..3f6b91f 100644
--- a/test/lib/pool.js
+++ b/test/lib/pool.js
@@ -195,8 +195,7 @@ function list(t, opts, callback) {
     assert.optionalObject(opts.params, 'opts.params');
     assert.optionalObject(opts.partialExp, 'opts.partialExp');
     assert.optionalArrayOfObject(opts.present, 'opts.present');
-    assert.ok(opts.present || opts.partialExp || opts.expErr,
-        'one of present, expErr, partialExp required');
+    assert.ok(opts.present || opts.expErr, 'one of present or expErr required');
 
     opts.type = 'pool';
     opts.id = 'uuid';
-- 
2.21.0

