From d84abb5c01b4003d0ac1934d52ae03a6dd210ea9 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 19 Oct 2018 14:29:38 -0700
Subject: [PATCH] TRITON-880 want ufds to store and understand Yubikey
 attestation certs Reviewed by: Marsell Kukuljevic <marsell@joyent.com>
 Approved by: Marsell Kukuljevic <marsell@joyent.com>

---
 docs/index.md     |  41 ++++++++++++++++---
 lib/keys.js       |  37 ++++++++++++++++-
 package.json      |   4 +-
 test/keys.test.js | 102 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 176 insertions(+), 8 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 5350e6f..0f6964c 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1314,6 +1314,14 @@ order to use it as a human-friendly alias, this attribute's presence is
 optional.  When it's not provided, the ssh key fingerprint will be used as the
 `name` instead.
 
+Keys can optionally be submitted along with a hardware attestation certificate
+signed by a trusted hardware manufacturer, which will be validated and
+processed. Keys generated in hardware devices which require some form of
+multi-factor authentication to sign requests (e.g. the device requires a PIN or
+Touch input) are marked by this mechanism and may be specially treated by
+Triton and Manta as providing a kind of 2-factor authentication (depending on
+administrator policy).
+
 For the following routes, the parameter placeholder `:key` can be replaced with
 with either the key's `name` or its `fingerprint`.  It's strongly recommended to
 use `fingerprint` when possible, since the `name` attribute does not have any
@@ -1337,6 +1345,15 @@ Array of key objects.  Each key object has the following fields:
 name        | String   | Name for this key
 fingerprint | String   | Key fingerprint
 key         | String   | Public key in OpenSSH format
+attested    | Boolean  | Indicates if the key has a hardware device attestation
+multifactor | Array[String] | Lists any additional factors required to use (if attested)
+
+Possible `multifactor` values:
+
+**Value**   | **Meaning**
+----------- | -----------
+pin         | Input of a PIN or password is required for key use
+touch       | Touch input (not authenticated -- i.e. not a fingerprint) is required for key use
 
 ### Errors
 
@@ -1403,6 +1420,15 @@ Retrieves the record for an individual key.
 name         | String   | Name for this key
 fingerprint  | String   | Key fingerprint
 key          | String   | OpenSSH formatted public key
+attested     | Boolean  | Indicates if the key has a hardware device attestation
+multifactor  | Array[String] | Lists any additional factors required to use (if attested)
+
+Possible `multifactor` values:
+
+**Value**   | **Meaning**
+----------- | -----------
+pin         | Input of a PIN or password is required for key use
+touch       | Touch input (not authenticated -- i.e. not a fingerprint) is required for key use
 
 ### Errors
 
@@ -1448,7 +1474,9 @@ or
     {
       "name": "barbar",
       "fingerprint": "03:7f:8e:ef:da:3d:3b:9e:a4:82:67:71:8c:35:2c:aa",
-      "key": "<...>"
+      "key": "<...>",
+      "attested": true,
+      "multifactor": ["pin"]
     }
 
 
@@ -1458,10 +1486,11 @@ Uploads a new OpenSSH key to Triton for use in HTTP signing and SSH.
 
 ### Inputs
 
-**Field** | **Type** | **Description**
---------- | -------- | ---------------
-name      | String   | Name for this key (optional)
-key       | String   | OpenSSH formatted public key
+**Field**   | **Type** | **Description**
+----------- | -------- | ---------------
+name        | String   | Name for this key (optional)
+key         | String   | OpenSSH formatted public key
+attestation | Array of String | PEM formatted attestation certificates
 
 ### Returns
 
@@ -1470,6 +1499,8 @@ key       | String   | OpenSSH formatted public key
 name        | String   | Name for this key
 fingerprint | String   | Key fingerprint
 key         | String   | OpenSSH formatted public key
+attested    | Boolean  | Indicates if the key has a hardware device attestation
+multifactor | Array[String] | Lists any additional factors required to use (if attested)
 
 ### Errors
 
diff --git a/lib/keys.js b/lib/keys.js
index ac08720..46179ca 100644
--- a/lib/keys.js
+++ b/lib/keys.js
@@ -37,11 +37,26 @@ function translateKey(key) {
         return {};
     }
 
-    return {
+    var obj = {
         name: key.name,
         fingerprint: key.fingerprint,
         key: key.openssh
     };
+
+    if (key.attested === 'true') {
+        obj.attested = true;
+
+        var factors = [];
+        if (key.ykpinrequired === 'true') {
+            factors.push('pin');
+        }
+        if (key.yktouchrequired === 'true') {
+            factors.push('touch');
+        }
+        obj.multifactor = factors;
+    }
+
+    return obj;
 }
 
 
@@ -57,6 +72,10 @@ function create(req, res, next) {
         return next(new MissingParameterError('key is a required argument'));
     }
 
+    if (typeof (req.params.key) !== 'string') {
+        return next(new InvalidArgumentError('key must be a String'));
+    }
+
     /* BEGIN JSSTYLED */
     // if (!/^ssh-rsa.*/.test(req.params.key)) {
     //    return next(new InvalidArgumentError('Only RSA keys are supported'));
@@ -75,6 +94,22 @@ function create(req, res, next) {
         name: req.params.name || null
     };
 
+    var attestation = req.params.attestation;
+    if (attestation) {
+        if (!Array.isArray(attestation)) {
+            return next(new InvalidArgumentError('attestation must be an ' +
+                'Array of Strings'));
+        }
+        var nonstrings = attestation.filter(function (elem) {
+            return (typeof (elem) !== 'string');
+        });
+        if (nonstrings.length > 0) {
+            return next(new InvalidArgumentError('attestation must be an ' +
+                'Array of Strings'));
+        }
+        obj.attestation = attestation;
+    }
+
     var user, account;
     if (req.params.user) {
         user = req.params.user;
diff --git a/package.json b/package.json
index 283bab2..77afb91 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "9.2.4",
+    "version": "9.3.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -39,7 +39,7 @@
         "semver": "5.4.1",
         "strsplit": "1.0.0",
         "triton-metrics": "0.1.0",
-        "ufds": "1.3.0",
+        "ufds": "1.4.0",
         "vasync": "2.2.0",
         "verror": "1.10.0",
         "xregexp": "3.1.0"
diff --git a/test/keys.test.js b/test/keys.test.js
index 3f7956f..341bf21 100644
--- a/test/keys.test.js
+++ b/test/keys.test.js
@@ -28,6 +28,45 @@ var KEY_2 = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDY2qV5e2q8qb+kYtn' +
     'T9rilmEP154FX/bVsFHitmyyYgba+X90uIR8KGLFZ4eWJNPprJFnCWXrpY5bSOgcS9aWVgC' +
     'oH8sqHatNKUiQpZ4Lsqr+Z4fAf4enldx/KMW91iKn whatever@wherever.local';
 
+var KEY_3 = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHA' +
+    'yNTYAAABBBEazmEPU22E0LgIzFjIJOIpujvWv3UNJ1lVNXYc89Bvm/yHD56UP9HQWRIPTBJ' +
+    'Zcbn5/37HhG5JU0CX6cxZxzmc= PIV_slot_9A@B47331299FC7AD6206BA47042A7CF269';
+var KEY_3_FP = 'a4:96:76:b6:10:cb:75:d6:84:52:f6:87:ad:83:9a:8f';
+
+var KEY_3_C1 = '-----BEGIN CERTIFICATE-----\n' +
+    'MIICQjCCASqgAwIBAgIPc9hpNjnyn+kces3syaD4MA0GCSqGSIb3DQEBCwUAMCEx\n' +
+    'HzAdBgNVBAMMFll1YmljbyBQSVYgQXR0ZXN0YXRpb24wIBcNMTYwMzE0MDAwMDAw\n' +
+    'WhgPMjA1MjA0MTcwMDAwMDBaMCUxIzAhBgNVBAMMGll1YmlLZXkgUElWIEF0dGVz\n' +
+    'dGF0aW9uIDlhMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERrOYQ9TbYTQuAjMW\n' +
+    'Mgk4im6O9a/dQ0nWVU1dhzz0G+b/IcPnpQ/0dBZEg9MEllxufn/fseEbklTQJfpz\n' +
+    'FnHOZ6M8MDowEQYKKwYBBAGCxAoDAwQDBAMDMBMGCisGAQQBgsQKAwcEBQIDT43x\n' +
+    'MBAGCisGAQQBgsQKAwgEAgIBMA0GCSqGSIb3DQEBCwUAA4IBAQAXJi2Hx5WpfzMs\n' +
+    '/9RLDVAjnhVFBZgvqPoAf/BTcfGuI5+uBzNqMttPvETu2TeWPmts9JNJIy4yVy+x\n' +
+    'HNs1XeiJqlW82bekz8rGhcwe+tP7Ub/H2YgJrzkZMPEr+HrK2vu7Jj4Z03TtD0Z1\n' +
+    'L/6AqvaB/RUBhjWgXfqP91nxoWwWWm0wwttqDWQzyvjWus1YpO60ZI8kyCjLKMgx\n' +
+    '6kiB+sG3Wq0VRKpIdj885NunFUnjMCvM895H9sggTiw/mIoAMp7n77ymi2dbTGNI\n' +
+    'MT7SS6P1IFRmkRiSQizbfv8Pyedpumjwr17KfbOIKZjWNL8EexY50S3u7S6Fnp61\n' +
+    '8LIGjLAI\n' +
+    '-----END CERTIFICATE-----';
+var KEY_3_C2 = '-----BEGIN CERTIFICATE-----\n' +
+    'MIIC5jCCAc6gAwIBAgIJAKSFIqo0r65PMA0GCSqGSIb3DQEBCwUAMCsxKTAnBgNV\n' +
+    'BAMMIFl1YmljbyBQSVYgUm9vdCBDQSBTZXJpYWwgMjYzNzUxMCAXDTE2MDMxNDAw\n' +
+    'MDAwMFoYDzIwNTIwNDE3MDAwMDAwWjAhMR8wHQYDVQQDDBZZdWJpY28gUElWIEF0\n' +
+    'dGVzdGF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq6kLFpvv\n' +
+    'Mcw+rBhaLUWAdXDHWLBsPxtZDUm5iehvzrsnb9g8YDqFAO9cvECZPUHu6sCBf3ZI\n' +
+    '5KlMvNVr4R8KYJPG/qrSjY7it82LK/eb3VqrL8+5DlTO7I31Xtd7kcOnVpzcwQaG\n' +
+    'djZEU/sIJdgGuQaMgf1jZ8o8qLjqHKbK20R7EsqyNAF+c+Q2g9/r+SMABwFqBxmK\n' +
+    'ZFadEIrFcwI9GG6vP8MCp8D3ov1tWkJ2TtbAHtbAxqpdpxqfENswVxhctbX9DL5J\n' +
+    'JCKvHlZKNETUqtThrpVMdcCIYfSMflTzE+sP5StSYFpuutfljGPaURq7Ilw3K9fR\n' +
+    'cFdMLtw1PCKYmwIDAQABoxUwEzARBgorBgEEAYLECgMDBAMEAwMwDQYJKoZIhvcN\n' +
+    'AQELBQADggEBAFKAWm3Dnt9HqPGypZyjgIE7HWrrahJiSxH9jTDxe/xxEMmyCPzR\n' +
+    'TjV/RfIQolK51LMCGgFWB2v6ZKcI8AP7J6lgjQ3TrFoQzyCWToK8neM32sFMUOE9\n' +
+    'FrTK9Bv/CGTJdE8qOkPg3kJ58hOud6HirmvfcqW2ztdMkBPf3tvyizRFizDcUaup\n' +
+    'NPip5QxHKaovQlTy+BlatIn+G58ZehbIyLqPGBd6B6mXoVa5Ul2hIcCBZy3oDqZR\n' +
+    'uQiwndNgHHCjD/rYYth5KwrmQvz4LfXkzfsVliP/tsCnp+KFg/lwyBlr88E/N0Rl\n' +
+    'J/tniMiDty+FH4BEu3LOBoJZLYMA4ZSNoIU=\n' +
+    '-----END CERTIFICATE-----';
+
 var CLIENTS;
 var CLIENT;
 var OTHER;
@@ -139,6 +178,59 @@ test('Create (named) key with duplicate name', function (t) {
     });
 });
 
+test('CreateKey (attested) wrong cert', function (t) {
+    var key = {
+        key: KEY_3,
+        attestation: [KEY_3_C2],
+        name: 'attest1'
+    };
+
+    CLIENT.post('/my/keys', key, function (err, req, res, body) {
+        t.ok(err);
+        t.equal(err.statusCode, 409);
+        t.equal(err.restCode, 'InvalidArgument');
+        t.ok(err.message);
+
+        t.end();
+    });
+});
+
+test('CreateKey (attested) OK', function (t) {
+    var key = {
+        key: KEY_3,
+        attestation: [KEY_3_C1, KEY_3_C2],
+        name: 'attest2'
+    };
+
+    CLIENT.post('/my/keys', key, function (err, req, res, body) {
+        t.ifError(err);
+        t.ok(body);
+        t.equal(res.statusCode, 201);
+        common.checkHeaders(t, res.headers);
+        checkKey(t, body);
+        t.equal(body.name, key.name);
+        t.equal(body.fingerprint, KEY_3_FP);
+        t.strictEqual(body.attested, true);
+        t.deepEqual(body.multifactor, ['pin']);
+
+        CLIENT.get('/my/keys?sync=true', function (err2, req2, res2, body2) {
+            t.ifError(err2);
+            t.equal(res2.statusCode, 200);
+            common.checkHeaders(t, res2.headers);
+            t.ok(body2);
+            t.ok(body2.length);
+            var key_present = false;
+            body2.forEach(function (k) {
+                if (k.fingerprint === KEY_3_FP) {
+                    key_present = true;
+                }
+                checkKey(t, k);
+            });
+            t.ok(key_present);
+            t.end();
+        });
+    });
+});
 
 test('Attempt to create with invalid key', function (t) {
     var key = {
@@ -298,6 +390,16 @@ test('Cleanup Key', function (t) {
     });
 });
 
+test('Cleanup Key', function (t) {
+    var path = '/my/keys/' + encodeURIComponent(KEY_3_FP);
+
+    CLIENT.del(path, function (err, req, res) {
+        t.ifError(err);
+        t.equal(res.statusCode, 204);
+        common.checkHeaders(t, res.headers);
+        t.end();
+    });
+});
 
 test('GetKey 404', function (t) {
     CLIENT.get('/my/keys/' + common.uuid(), function (err) {
-- 
2.21.0

