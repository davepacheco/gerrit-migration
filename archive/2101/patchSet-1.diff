From df4d251bc7b83ef817a0d6c075a4758755169ddd Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Wed, 14 Jun 2017 16:21:03 -0700
Subject: [PATCH] PUBAPI-1408 ListVolumes endpoint should validate the
 "predicate" parameter

---
 lib/validation/predicate.js | 12 ++++++++----
 lib/validation/volumes.js   | 16 +++++++++++++++-
 2 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/lib/validation/predicate.js b/lib/validation/predicate.js
index 8a93ee4..3b67739 100644
--- a/lib/validation/predicate.js
+++ b/lib/validation/predicate.js
@@ -17,9 +17,11 @@ var volumesValidation = require('./volumes');
 
 var VOLUME_PREDICATE_TYPES = {
     name: 'string',
-    type: 'string',
+    network: 'string',
+    size: 'number',
     state: 'string',
-    size: 'number'
+    type: 'string',
+    uuid: 'string'
 };
 
 function validatePredicate(predicateString) {
@@ -32,10 +34,12 @@ function validatePredicate(predicateString) {
     var predicateFieldsAndValues;
     var predicateField;
     var VALIDATION_FUNCS = {
-        state: volumesValidation.validateVolumeState,
         name: volumesValidation.validateVolumeName,
+        network: volumesValidation.validateVolumeNetwork,
+        size: volumesValidation.validateVolumeSize,
+        state: volumesValidation.validateVolumeState,
         type: volumesValidation.validateVolumeType,
-        size: volumesValidation.validateVolumeSize
+        uuid: volumesValidation.validateVolumeUuid
     };
 
     try {
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index 37f487b..396883c 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -16,6 +16,7 @@ var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 function validUuid(uuid) {
     return typeof (uuid) === 'string' && uuid !== '' && uuid.match(UUID_RE);
 }
+
 function validateOwnerUuid(ownerUuid) {
      var err;
      var validOwnerUuid = validUuid(ownerUuid);
@@ -27,6 +28,18 @@ function validateOwnerUuid(ownerUuid) {
      return err;
 }
 
+function validateVolumeNetwork(volumeNetworkUuid) {
+    var err;
+    var validNetworkUuid = validUuid(volumeNetworkUuid);
+
+     if (!validNetworkUuid) {
+         err = new Error(volumeNetworkUuid + ' is not a valid volume ' +
+            'network UUID');
+     }
+
+     return err;
+}
+
 function validateVolumeName(name, opts) {
      var validName;
      var err;
@@ -76,7 +89,7 @@ function validateVolumeState(state) {
     console.log('state: ', state);
 
     var VALID_STATES = [
-        'creating', 'ready', 'failed', 'rolling_back'
+        'creating', 'ready', 'failed', 'rolling_back', 'deleting'
     ];
     var err;
 
@@ -101,6 +114,7 @@ function validateVolumeUuid(volumeUuid) {
 module.exports = {
     validateOwnerUuid: validateOwnerUuid,
     validateVolumeName: validateVolumeName,
+    validateVolumeNetwork: validateVolumeNetwork,
     validateVolumeSize: validateVolumeSize,
     validateVolumeState: validateVolumeState,
     validateVolumeType: validateVolumeType,
-- 
2.21.0

