From 2572f0dd60521c6e9970e6ed19e21bf08f72a466 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Wed, 27 Sep 2017 19:58:39 +0000
Subject: [PATCH] MANTA-3442 Add content-type to Manta directory listing
 results MANTA-2919 Add content-md5 to directory listing results

---
 lib/common.js    |   2 +
 test/dir.test.js | 123 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 125 insertions(+)

diff --git a/lib/common.js b/lib/common.js
index fcac826..5688a80 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -690,6 +690,8 @@ function readdir(dir, req) {
                 etag: r.value.etag,
                 size: r.value.contentLength,
                 type: r.value.type,
+                contentType: r.value.contentType,
+                contentMD5: r.value.contentMD5,
                 mtime: new Date(r.value.mtime).toISOString()
             };
 
diff --git a/test/dir.test.js b/test/dir.test.js
index 29b1e21..fc7d014 100644
--- a/test/dir.test.js
+++ b/test/dir.test.js
@@ -37,7 +37,21 @@ function writeObject(client, key, cb) {
     process.nextTick(stream.end.bind(stream, text));
 }
 
+function writeStreamingObject(client, key, cb) {
+    var stream = new MemoryStream();
+    var text = 'The lazy brown fox \nsomething \nsomething foo';
 
+    process.nextTick(stream.end.bind(stream, text));
+    client.put(key, stream, function (err, res) {
+        if (err) {
+            cb(err);
+        } else if (res.statusCode != 204) {
+            cb(new Error('unsuccessful object write'));
+        } else {
+            cb();
+        }
+    });
+}
 
 ///--- Tests
 
@@ -174,6 +188,115 @@ test('mkdir top', function (t) {
 });
 
 
+test('ls returns content-type for non-streaming objects', function (t) {
+    var self = this;
+
+    writeObject(self.client, self.key, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1);
+                t.ok(objs[0].contentType);
+                t.equal(objs[0].contentType, 'application/octet-stream');
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('ls returns content-type for streaming objects', function (t) {
+    var self = this;
+
+    writeStreamingObject(self.client, self.key, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1);
+                t.ok(objs[0].contentType);
+                t.equal(objs[0].contentType, 'application/octet-stream');
+                t.end();
+            });
+        });
+    });
+});
+
+
+test('ls returns contentMD5 for objects', function (t) {
+    var self = this;
+
+    writeObject(self.client, self.key, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1);
+                t.ok(objs[0].contentMD5);
+                self.client.info(self.key, {}, function (err2, info) {
+                    t.ifError(err2);
+                    t.ok(info);
+                    if (info) {
+                        t.ok(info.md5);
+                        t.equal(objs[0].contentMD5, info.md5);
+                    }
+                    t.end();
+                });
+            });
+        });
+    });
+});
+
+
 test('ls top', function (t) {
     this.client.ls(this.top, function (err, res) {
         t.ifError(err);
-- 
2.21.0

