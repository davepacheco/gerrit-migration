From 0390e2df41a2b18f762135a3cbda671bc3fe458b Mon Sep 17 00:00:00 2001
From: Robert Bogart <robert.bogart@joyent.com>
Date: Thu, 3 Oct 2019 00:36:17 +0000
Subject: [PATCH] MANTA-4580 Improve handling of durability and cross
 datacenter fault domain during object rebalancing

---
 src/jobs/evacuate.rs | 73 +++++++++++++++++++++++++++++---------------
 1 file changed, 48 insertions(+), 25 deletions(-)

diff --git a/src/jobs/evacuate.rs b/src/jobs/evacuate.rs
index 85b0e61..3b9dc20 100644
--- a/src/jobs/evacuate.rs
+++ b/src/jobs/evacuate.rs
@@ -993,6 +993,43 @@ fn _continue_adding_tasks(
     max_tasks.map_or(true, |m| assignment.tasks.len() < m as usize)
 }
 
+fn validate_destination(
+    obj: &MantaObject,
+    from_shark: &MantaObjectShark,
+    to_shark: &StorageNode,
+) -> bool {
+    let obj_on_dest = obj.sharks.iter().any(|s| {
+        s.manta_storage_id == to_shark.manta_storage_id });
+
+    // We've found the object on the destination shark.  We will need to skip
+    // this object for now and find a destination for it later.  If we don't do
+    // this check it would reduce the durability level of the object.  That is,
+    // it would reduce the number of copies of the object in the region by one.
+    if obj_on_dest {
+        return false;
+    }
+
+    // It's ok to send an object to a storage node that is in the same
+    // data center as the one being evacuated.  We do not want to allow two
+    // copies of the same object to reside in the same datacenter for
+    // availability reasons though.
+    (from_shark.datacenter != to_shark.datacenter) &&
+        obj.sharks.iter().any(|s| { s.datacenter == to_shark.datacenter })
+}
+
+fn skip_object(
+    job: Arc<EvacuateJob>,
+    eobj: &mut EvacuateObject,
+    reason: &str,
+) -> Result<(), Error> {
+    info!("Skipping object {}: {}.", &eobj.object.object_id, reason);
+
+    // TODO sqlite: put skipped object in persistent store.
+    eobj.status = EvacuateObjectStatus::Skipped;
+    job.insert_into_db(&eobj)?;
+    Ok(())
+}
+
 /// Assignment Generation:
 /// 1. Get snapshot from picker
 /// 2. Get initialized assignment from assignment manager thread.
@@ -1051,34 +1088,20 @@ fn start_assignment_generator(
 
                     let content_mb = eobj.object.content_length / (1024 * 1024);
                     if content_mb > available_space {
-                        eobj.status = EvacuateObjectStatus::Skipped;
-                        info!(
-                            "Skipping object, need: {}, available: {} | {:?}\n",
-                            content_mb, available_space, eobj
-                        );
-                        job_action.insert_into_db(&eobj)?;
+                      skip_object(Arc::clone(&job_action), &mut eobj,
+                            &format!("Need: {}, Available {}", content_mb,
+                            available_space))?;
 
                         break;
                     }
 
                     let obj = &eobj.object;
-                    let obj_on_dest = obj.sharks.iter().any(|s| {
-                        s.manta_storage_id
-                            == assignment.dest_shark.manta_storage_id
-                    });
-
-                    // We've found the object on the destination shark.  We will
-                    // need to skip this object for now and find a destination
-                    // for it later.  If we don't do this check it would
-                    // essentially reduce the durability level of the object.
-                    if obj_on_dest {
-                        info!(
-                            "Skipping object already on dest shark {}",
-                            &obj.object_id
-                        );
-                        // TODO sqlite: put skipped object in persistent store.
-                        eobj.status = EvacuateObjectStatus::Skipped;
-                        job_action.insert_into_db(&eobj)?;
+
+                    if !validate_destination(obj, &job_action.from_shark,
+                        &assignment.dest_shark)
+                    {
+                        skip_object(Arc::clone(&job_action), &mut eobj,
+                            "Currently unable to find suitable destination")?;
                         continue;
                     }
 
@@ -1090,8 +1113,8 @@ fn start_assignment_generator(
                     {
                         Some(src) => src,
                         None => {
-                            eobj.status = EvacuateObjectStatus::Skipped;
-                            job_action.insert_into_db(&eobj)?;
+                            skip_object(Arc::clone(&job_action), &mut eobj,
+                                "Currently unable to find suitable source")?;
                             continue;
                         }
                     };
-- 
2.21.0

