commit 4a410be95812c33d0ec66915d86e48f0a8693100
Author: Robert Bogart <robert.bogart@joyent.com>
Date:   2019-10-03T20:42:52+00:00 (4 days ago)
    
    MANTA-4580 Improve handling of durability and cross datacenter fault domain during object rebalancing

diff --git a/src/jobs/evacuate.rs b/src/jobs/evacuate.rs
index 85b0e61..4389096 100644
--- a/src/jobs/evacuate.rs
+++ b/src/jobs/evacuate.rs
@@ -427,6 +427,18 @@ impl EvacuateJob {
         Ok(ret)
     }
 
+    fn skip_object(
+        &self,
+        eobj: &mut EvacuateObject,
+        reason: &str,
+    ) -> Result<(), Error> {
+        info!("Skipping object {}: {}.", &eobj.object.object_id, reason);
+
+        eobj.status = EvacuateObjectStatus::Skipped;
+        self.insert_into_db(&eobj)?;
+        Ok(())
+    }
+
     // Insert multiple EvacuateObjects into the database at once.
     fn insert_many_into_db<V>(&self, vec_objs: V) -> Result<usize, Error>
     where
@@ -993,6 +1005,30 @@ fn _continue_adding_tasks(
     max_tasks.map_or(true, |m| assignment.tasks.len() < m as usize)
 }
 
+fn validate_destination(
+    obj: &MantaObject,
+    from_shark: &MantaObjectShark,
+    to_shark: &StorageNode,
+) -> bool {
+    let obj_on_dest = obj.sharks.iter().any(|s| {
+        s.manta_storage_id == to_shark.manta_storage_id });
+
+    // We've found the object on the destination shark.  We will need to skip
+    // this object for now and find a destination for it later.  If we don't do
+    // this check it would reduce the durability level of the object.  That is,
+    // it would reduce the number of copies of the object in the region by one.
+    if obj_on_dest {
+        return false;
+    }
+
+    // It's ok to send an object to a storage node that is in the same
+    // data center as the one being evacuated.  We do not want to allow two
+    // copies of the same object to reside in the same datacenter for
+    // availability reasons though.
+    !((from_shark.datacenter != to_shark.datacenter) &&
+        obj.sharks.iter().any(|s| { s.datacenter == to_shark.datacenter }))
+}
+
 /// Assignment Generation:
 /// 1. Get snapshot from picker
 /// 2. Get initialized assignment from assignment manager thread.
@@ -1051,34 +1087,20 @@ fn start_assignment_generator(
 
                     let content_mb = eobj.object.content_length / (1024 * 1024);
                     if content_mb > available_space {
-                        eobj.status = EvacuateObjectStatus::Skipped;
-                        info!(
-                            "Skipping object, need: {}, available: {} | {:?}\n",
-                            content_mb, available_space, eobj
-                        );
-                        job_action.insert_into_db(&eobj)?;
+                      job_action.skip_object(&mut eobj,
+                          &format!("Need: {}, Available {}", content_mb,
+                          available_space))?;
 
                         break;
                     }
 
                     let obj = &eobj.object;
-                    let obj_on_dest = obj.sharks.iter().any(|s| {
-                        s.manta_storage_id
-                            == assignment.dest_shark.manta_storage_id
-                    });
-
-                    // We've found the object on the destination shark.  We will
-                    // need to skip this object for now and find a destination
-                    // for it later.  If we don't do this check it would
-                    // essentially reduce the durability level of the object.
-                    if obj_on_dest {
-                        info!(
-                            "Skipping object already on dest shark {}",
-                            &obj.object_id
-                        );
-                        // TODO sqlite: put skipped object in persistent store.
-                        eobj.status = EvacuateObjectStatus::Skipped;
-                        job_action.insert_into_db(&eobj)?;
+
+                    if !validate_destination(obj, &job_action.from_shark,
+                        &assignment.dest_shark)
+                    {
+                        job_action.skip_object(&mut eobj,
+                            "Currently unable to find suitable destination")?;
                         continue;
                     }
 
@@ -1090,8 +1112,8 @@ fn start_assignment_generator(
                     {
                         Some(src) => src,
                         None => {
-                            eobj.status = EvacuateObjectStatus::Skipped;
-                            job_action.insert_into_db(&eobj)?;
+                            job_action.skip_object(&mut eobj,
+                                "Currently unable to find suitable source")?;
                             continue;
                         }
                     };
