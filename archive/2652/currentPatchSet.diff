commit e752171073fc22613d99d83bd794b79ca61f2c24 (tag: v2.3.0, refs/changes/52/2652/8)
Author: Kody A Kantor <kody.kantor@gmail.com>
Date:   2017-10-05T14:51:56+00:00 (2 years ago)
    
    joyent/node-fast#9 node-fast could track basic request metrics
    Reviewed by: David Pacheco <dap@joyent.com>
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: David Pacheco <dap@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index def0764..74bed16 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 No changes.
 
+## v2.3.0
+
+* #9 node-fast could track basic request metrics
+
 ## v2.2.4
 
 * #7 fsr_context isn't always unpiped from fsr_encoder, which causes memory leaks
diff --git a/README.md b/README.md
index 7c4ce35..b722575 100644
--- a/README.md
+++ b/README.md
@@ -97,6 +97,25 @@ The client and server only provide functions; you have to hook this up to a kang
 server.  The built-in demo server ("fastserve") and benchmarking tool
 ("fastbench") demonstrate how to do that.
 
+The Kang and metric collection (see below) functionality are served through the
+same [restify](https://github.com/restify/restify) server in "fastserve," but
+that is not required. Optionally, Kang can be served using the `knStartServer`
+function provided by the Kang library.
+
+### Metric Collection
+
+The Fast server optionally collects some basic request metrics using
+[node-artedi](https://github.com/joyent/node-artedi).
+
+The metrics collected by the fast server are:
+
+* total request count
+* latency of requests, implemented as a histogram
+
+You can pass an artedi-style metric collector into the Fast server constructor
+to enable metric collection. An example of how to do this is included in the
+built-in demo server ("fastserve").
+
 ### DTrace probes
 
 The Fast client and server provide DTrace probes and scripts in the "bin"
@@ -296,6 +315,7 @@ Name            | Type         | Meaning
 --------------- | ------------ | -------
 `log`           | object       | [bunyan](https://github.com/trentm/node-bunyan)-style logger
 `server`        | `net.Socket` | underlying server socket
+`collector`     | object       | [artedi](https://github.com/joyent/node-artedi)-style metric collector
 
 Public methods:
 
diff --git a/bin/fastserve b/bin/fastserve
index bd4e85c..b61e91b 100755
--- a/bin/fastserve
+++ b/bin/fastserve
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,7 @@
  */
 
 var mod_assertplus = require('assert-plus');
+var mod_artedi = require('artedi');
 var mod_bunyan = require('bunyan');
 var mod_cmdutil = require('cmdutil');
 var mod_fastdemo = require('../lib/demo_server');
@@ -22,8 +23,9 @@ var mod_fastserver = require('../lib/fast_server');
 var mod_kang = require('kang');
 var mod_net = require('net');
 var mod_os = require('os');
+var mod_restify = require('restify');
 
-var KANG_PORT = 16519;
+var MONITOR_PORT = 16519;
 
 var usageMessage = [
     'Start a Fast protocol server supporting a few basic RPC calls.  PORT is ',
@@ -52,18 +54,24 @@ function main()
 
 	fastDemoServer({
 	    'fastPort': port,
-	    'kangPort': KANG_PORT
+	    'monitorPort': MONITOR_PORT
 	});
 }
 
 function fastDemoServer(args)
 {
-	var fastPort, log, sock, fastserver;
-	var kangPort, kangserver;
+	var fastPort, log, sock, collector, fastserver;
+	var monitorPort;
 
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.number(args.fastPort, 'args.fastPort');
-	mod_assertplus.number(args.kangPort, 'args.kangPort');
+	mod_assertplus.number(args.monitorPort, 'args.monitorPort');
+
+	collector = mod_artedi.createCollector({
+	    'labels': {
+		'component': 'fastserve'
+	    }
+	});
 
 	log = new mod_bunyan({
 	    'name': 'fastserve',
@@ -74,6 +82,7 @@ function fastDemoServer(args)
 	sock = mod_net.createServer({ 'allowHalfOpen': true });
 	fastserver = new mod_fastserver.FastServer({
 	    'log': log,
+	    'collector': collector,
 	    'server': sock
 	});
 
@@ -82,15 +91,14 @@ function fastDemoServer(args)
 	});
 
 	fastPort = args.fastPort;
-	kangPort = args.kangPort;
+	monitorPort = args.monitorPort;
 	sock.listen(fastPort, function () {
 		var nsigs = 0;
 
 		log.info({ 'fastPort': fastPort },
 		    'listening for fast requests');
 
-		mod_kang.knStartServer({
-		    'port': kangPort,
+		var kangOpts = {
 		    'uri_base': '/kang',
 		    'service_name': 'fastserve',
 		    'version': '1.0.0',
@@ -99,20 +107,38 @@ function fastDemoServer(args)
 		    'list_objects': fastserver.kangListObjects.bind(fastserver),
 		    'get': fastserver.kangGetObject.bind(fastserver),
 		    'stats': fastserver.kangStats.bind(fastserver)
-		}, function (err, server) {
-			mod_assertplus.ok(!err);
-			kangserver = server;
-			log.info({ 'kangPort': kangPort },
-			    'listening for kang requests');
-			if (nsigs > 0) {
-				kangserver.close();
-			}
+		};
+
+		var monitor_server = mod_restify.createServer({
+		    name: 'monitor'
+		});
+		monitor_server.get('/metrics', function (req, res, next) {
+		    req.on('end', function () {
+			collector.collect(mod_artedi.FMT_PROM,
+			    function (err, metrics) {
+				if (err) {
+				    next(err);
+				    return;
+				}
+				res.setHeader('Content-Type',
+				    'text/plain; version=0.0.4');
+				res.send(metrics);
+				next();
+			});
+		    });
+		    req.resume();
+		});
+
+		monitor_server.get('/kang/.*',
+		    mod_kang.knRestifyHandler(kangOpts));
+		monitor_server.listen(monitorPort, '0.0.0.0', function () {
+			log.info({ 'monitorPort': monitorPort },
+			    'listening for kang and metric requests');
 		});
 
 		process.on('SIGINT', function () {
 			if (++nsigs == 1) {
-				if (kangserver)
-					kangserver.close();
+				monitor_server.close();
 				sock.close();
 				fastserver.close();
 			}
diff --git a/lib/fast_server.js b/lib/fast_server.js
index b4a0f21..b82c23b 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -159,6 +159,8 @@ fastNservers = 0;
  *
  *     server		server object that emits 'connection' events
  *
+ *     collector	artedi-style metric collector
+ *
  * Use the server by invoking the registerRpcMethod() method to register
  * handlers for named RPC methods.
  */
@@ -169,9 +171,11 @@ function FastServer(args)
 	mod_assertplus.object(args, 'args');
 	mod_assertplus.object(args.log, 'args.log');
 	mod_assertplus.object(args.server, 'args.server');
+	mod_assertplus.optionalObject(args.collector, 'args.collector');
 
 	this.fs_log = args.log;		/* logger */
 	this.fs_server = args.server;	/* server socket */
+	this.fs_collector = args.collector;		/* metric collector */
 	this.fs_handlers = {};		/* registered handlers, by name */
 	this.fs_conns = {};		/* active connections */
 	this.fs_msghandler = new FastMessageHandler({
@@ -201,6 +205,17 @@ function FastServer(args)
 	this.fs_nrequests_completed = 0;	/* count of reqs completed */
 	this.fs_nrequests_failed = 0;		/* count of reqs failed */
 
+	if (this.fs_collector) {
+		this.fs_request_counter = this.fs_collector.counter({
+			name: 'fast_requests_completed',
+			help: 'count of fast requests completed'
+		});
+		this.fs_latency_histogram = this.fs_collector.histogram({
+			name: 'fast_request_time_ms',
+			help: 'total time to process fast requests'
+		});
+	}
+
 	if (fastServerProvider === null) {
 		fastServerProvider = fastServerProviderInit();
 	}
@@ -662,6 +677,7 @@ FastServer.prototype.onMessage = function (message)
 	    'log': conn.fc_log.child({ 'msgid': message.msgid }, true)
 	});
 	conn.fc_pending[req.fsr_msgid] = req;
+	req.fsr_hrtstarted = process.hrtime();
 	req.fsr_tstarted = new Date();
 
 	mod_assertplus.equal(typeof (message.data), 'object');
@@ -830,6 +846,8 @@ FastServer.prototype.requestCleanup = function (request)
 {
 	var conn;
 	var self = this;
+	var diff;
+	var latency;
 
 	mod_assertplus.equal(request.fsr_state, FR_S_COMPLETE);
 	conn = request.fsr_conn;
@@ -840,6 +858,16 @@ FastServer.prototype.requestCleanup = function (request)
 
 	conn.fc_ncompleted++;
 	this.fs_nrequests_completed++;
+	if (this.fs_collector) {
+		/* Record metrics */
+
+		/* Calculate milliseconds since the request began. */
+		diff = process.hrtime(request.fsr_hrtstarted);
+		latency = mod_jsprim.hrtimeMillisec(diff);
+
+		this.fs_request_counter.increment();
+		this.fs_latency_histogram.observe(latency);
+	}
 
 	if (request.fsr_handler !== null) {
 		request.fsr_handler.fh_ncompleted++;
@@ -1070,6 +1098,7 @@ function FastRpcServerRequest(args)
 	this.fsr_rpcargs = null;	/* filled in after validation */
 	this.fsr_handler = null;	/* filled in after validation */
 	this.fsr_tstarted = null;	/* time the request started */
+	this.fsr_hrtstarted = null;	/* granular time the request started */
 	this.fsr_state = FR_S_INIT;	/* see state machine above */
 	this.fsr_encoder = new FastRpcResponseEncoder({ 'request': this });
 	this.fsr_docomplete = null;	/* callback for completion */
diff --git a/package.json b/package.json
index 2cc02e8..e34bb05 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.2.4",
+	"version": "2.3.0",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
@@ -23,7 +23,9 @@
 		"verror": "^1.7.0"
 	},
 	"devDependencies": {
-		"forkexec": "^1.0.0"
+		"artedi": "1.0.0",
+		"forkexec": "^1.0.0",
+		"restify": "5.2.0"
 	},
 	"optionalDependencies": {
 	    "dtrace-provider": "^0.6.0"
diff --git a/test/tst.server.js b/test/tst.server.js
index ed8ee22..d80e6a6 100644
--- a/test/tst.server.js
+++ b/test/tst.server.js
@@ -13,6 +13,7 @@
  */
 
 var mod_assertplus = require('assert-plus');
+var mod_artedi = require('artedi');
 var mod_bunyan = require('bunyan');
 var mod_net = require('net');
 var mod_path = require('path');
@@ -57,6 +58,7 @@ function ServerTestContext()
 	this.ts_server = null;	/* fast server object */
 	this.ts_clients = [];	/* array of clients, each having properties */
 				/* "tsc_socket" and "tsc_client" */
+	this.ts_collector = null;	/* artedi metric collector */
 }
 
 ServerTestContext.prototype.connectClient = function (callback)
@@ -160,6 +162,9 @@ function runTestCase(testcase, callback)
 
 	tctx = new ServerTestContext();
 	tctx.ts_log = testLog.child({ 'testcase': testcase['name'] });
+	tctx.ts_collector = mod_artedi.createCollector({
+	    'labels': { 'component': 'FastServer' }
+	});
 	tctx.ts_socket = mod_net.createServer({ 'allowHalfOpen': true });
 	tctx.ts_server = new mod_fast.FastServer({
 	    'log': tctx.ts_log.child({ 'component': 'FastServer' }),
