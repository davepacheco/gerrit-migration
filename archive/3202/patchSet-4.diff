commit 019264696ba31b17ad86767659c9ce54edade1ed (refs/changes/02/3202/4)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2018-01-29T16:54:52+13:00 (1 year, 8 months ago)
    
    TRITON-19: Triton equivalent to AWS' termination protection

diff --git a/docs/index.md b/docs/index.md
index db32891..ff60442 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1462,11 +1462,14 @@ has succeeded.
 
 ## DeleteVm (DELETE /vms/:uuid)
 
-Deletes a VM. If the VM exists and has a `server_uuid` that refers to an actual
-CN that is available, the VM will be physically destroyed and it will be marked
-as destroyed in the cache database.
+Deletes a VM. If the VM exists, has a `server_uuid` that refers to an actual
+CN that is available, and does not have the tag `triton.instance.protection` set
+true, the VM will be physically destroyed and it will be marked as destroyed in
+the cache database.
 
 If the VM doesn't have a `server_uuid`, the request will result in an error.
+Likewise, if the triton.instance.undeletable tag is true, the request will also
+result in an error -- in order to delete such a VM, the tag must be removed first.
 
 ### Inputs
 
@@ -1482,7 +1485,7 @@ If the VM doesn't have a `server_uuid`, the request will result in an error.
 | ---- | ---------------------------------------------------------------------------- | ------------------ |
 | 202  | New job created                                                              | VM response object |
 | 404  | VM Not Found. VM does not exist or VM does not belong to the specified owner | Error object       |
-| 409  | VM not allocated to a server yet                                             | Error object       |
+| 409  | VM not allocated to a server yet, or triton.instance.undeletable tag is true | Error object       |
 
 On a successful response, a [VM Job Response Object](#vm-job-response-object) is
 returned in the response body.
diff --git a/lib/apis/wfapi.js b/lib/apis/wfapi.js
index cc0861a..8ac13e9 100644
--- a/lib/apis/wfapi.js
+++ b/lib/apis/wfapi.js
@@ -28,6 +28,8 @@ var clone = common.clone;
 // Absolute path from the app
 var WORKFLOW_PATH = './lib/workflows/';
 
+var INSTANCE_PROTECTION_TAG = 'triton.instance.undeletable';
+
 
 /*
  * WFAPI Constructor
@@ -170,6 +172,10 @@ Wfapi.prototype.createProvisionJob = function (req, cb) {
     if (req.params.origin !== undefined)
         params.origin = req.params.origin;
 
+    if (params.tags && params.tags[INSTANCE_PROTECTION_TAG] === true) {
+        params.indestructible_zoneroot = true;
+    }
+
     self.client.createJob('provision', params, options, function (err, job) {
         if (err) {
             cb(err);
@@ -470,6 +476,24 @@ Wfapi.prototype.createUpdateJob = function (req, payload, cb) {
     if (req.params.origin !== undefined)
         params.origin = req.params.origin;
 
+    // Ensure that when an undeletable tag is added or removed,
+    // indestructable_zoneroot is adjusted to to match that.
+    if (payload.set_tags &&
+        payload.set_tags[INSTANCE_PROTECTION_TAG] === true) {
+        payload.indestructible_zoneroot = true;
+    }
+    if (payload.remove_tags &&
+        payload.remove_tags.indexOf(INSTANCE_PROTECTION_TAG) !== -1) {
+        payload.indestructible_zoneroot = false;
+    }
+    if (payload.indestructible_zoneroot === false) {
+        if (payload.remove_tags) {
+            payload.remove_tags.push(INSTANCE_PROTECTION_TAG);
+        } else {
+            payload.remove_tags = [INSTANCE_PROTECTION_TAG];
+        }
+    }
+
     if (params.subtask === 'resize') {
         params.current_ram = req.vm.ram || req.vm.max_physical_memory;
         params.current_quota = req.vm.quota;
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 1c25c7e..dae281c 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -42,6 +42,7 @@ var VALID_VM_ACTIONS = [
 
 var DEFAULT_LIST_VM_LIMIT = common.MAX_LIST_VMS_LIMIT;
 var DEFAULT_LIST_VM_OFFSET = 0;
+var INSTANCE_PROTECTION_TAG = 'triton.instance.undeletable';
 
 function validAction(action) {
     return VALID_VM_ACTIONS.indexOf(action) != -1;
@@ -828,6 +829,16 @@ function deleteVm(req, res, next) {
         req.params.sync = (sync === 'true' ? true : false);
     }
 
+    /*
+     * If an instance has this tag, we should not delete it. If a client wants
+     * to destroy this instance, they'll need to remove the tag first.
+     */
+    if (req.vm.tags[INSTANCE_PROTECTION_TAG]) {
+        var msg = 'Instance has "' + INSTANCE_PROTECTION_TAG + '" tag';
+        next(new errors.CannotDeleteInstanceError(msg));
+        return;
+    }
+
     /*
      * If the vm has no server_uuid, then starting a destroy workflow would fail
      * right after it starts, since the part of the workflow that would start
diff --git a/lib/errors.js b/lib/errors.js
index e038af7..9b401e3 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -90,6 +90,31 @@ BrandNotSupportedError.statusCode = 409;
 
 
 
+/*
+ * Return this error when attempting to destroy an instance that we aren't
+ * allowed to destroy.
+ */
+function CannotDeleteInstanceError(message) {
+    assert.string(message, 'message');
+
+    restify.RestError.call(this, {
+        restCode: this.constructor.restCode,
+        statusCode: this.constructor.statusCode,
+        message: message,
+        body: {
+            code: this.constructor.restCode,
+            message: message
+        }
+    });
+}
+
+util.inherits(CannotDeleteInstanceError, restify.RestError);
+CannotDeleteInstanceError.prototype.name = 'CannotDeleteInstanceError';
+CannotDeleteInstanceError.restCode = 'CannotDeleteInstanceError';
+CannotDeleteInstanceError.statusCode = 409;
+
+
+
 /*
  * Base function for validation errors
  */
@@ -229,6 +254,7 @@ exports.wfapiWrap = function (opts) {
 exports.UnallocatedVMError = UnallocatedVMError;
 exports.ValidationFailedError = ValidationFailedError;
 exports.BrandNotSupportedError = BrandNotSupportedError;
+exports.CannotDeleteInstanceError = CannotDeleteInstanceError;
 exports.VmNotRunningError = VmNotRunningError;
 
 function MorayBucketsNotSetupError(lastInitError) {
@@ -339,4 +365,4 @@ util.inherits(VolumesNotReachableError, restify.RestError);
 exports.VolumesNotReachableError = VolumesNotReachableError;
 VolumesNotReachableError.prototype.name = 'VolumesNotReachableError';
 VolumesNotReachableError.restCode = 'VolumesNotReachable';
-VolumesNotReachableError.statusCode = 409;
\ No newline at end of file
+VolumesNotReachableError.statusCode = 409;
diff --git a/package.json b/package.json
index c644304..6594093 100644
--- a/package.json
+++ b/package.json
@@ -27,7 +27,7 @@
     "sprintf": "0.1.1",
     "strsplit": "1.0.0",
     "trace-event": "1.3.0",
-    "triton-tags": "^1.1.4",
+    "triton-tags": "git+https://github.com/joyent/node-triton-tags.git#9485976bc579411619fe2bb9536fdcbeef907c97",
     "vasync": "2.2.0",
     "verror": "1.10.0",
     "wf-client": "0.2.1"
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index c393fae..e053ee6 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -709,9 +709,15 @@ exports.create_vm_tags_not_ok = function (t) {
         callVmapi({ 'triton.cns.services': 'foo,$#foo.bar' }, msg, next);
     }
 
+    function checkBadTritonInstanceProtection(next) {
+        var msg = 'Triton tag "triton.instance.undeletable" value must be a ' +
+            'boolean: "true" (string)';
+        callVmapi({ 'triton.instance.undeletable': 'true' }, msg, next);
+    }
+
     async.series([
         checkBadTritonTag, checkBadTritonTagType1, checkBadTritonTagType2,
-        checkBadTritonDNS
+        checkBadTritonDNS, checkBadTritonInstanceProtection
     ], function () {
         t.done();
     });
@@ -1496,7 +1502,8 @@ exports.add_tags = function (t) {
 
     var query = {
         role: 'database',
-        group: 'deployment'
+        group: 'deployment',
+        'triton.instance.undeletable': true
     };
 
     var opts = createOpts(path, query);
@@ -1526,7 +1533,8 @@ exports.wait_new_tag_job = function (t) {
 exports.wait_new_tag = function (t) {
     var tags = {
         role: 'database',
-        group: 'deployment'
+        group: 'deployment',
+        'triton.instance.undeletable': true
     };
 
     waitForValue(vmLocation, 'tags', tags, {
@@ -1539,21 +1547,52 @@ exports.wait_new_tag = function (t) {
 
 
 exports.get_tag = function (t) {
-    var path = '/vms/' + newUuid + '/tags/role?owner_uuid=' + CUSTOMER;
+    var path = '/vms/' + newUuid +
+        '/tags/triton.instance.undeletable?owner_uuid=' + CUSTOMER;
 
     client.get(path, function (err, req, res, data) {
         common.ifError(t, err);
         t.equal(res.statusCode, 200, '200 OK');
         common.checkHeaders(t, res.headers);
-        t.ok(data);
-        t.equal(data, 'database');
+        t.equal(data, true);
+        t.done();
+    });
+};
+
+
+exports.confirm_instance_protected_vm_is_indestructible = function (t) {
+    var opts = createOpts(vmLocation);
+
+    client.get(opts, function (err, req, res, body) {
+        t.ifError(err, 'no error expected');
+        t.equal(res.statusCode, 200, '200 OK');
+        t.equal(body.indestructible_zoneroot, true,
+            'indestructible_zoneroot set');
         t.done();
     });
 };
 
 
+
+exports.cannot_destroy_vm_with_instance_protection = function (t) {
+    var opts = createOpts(vmLocation);
+
+    client.del(opts, function (err, req, res, body) {
+        t.ok(err, 'error expected');
+        t.equal(res.statusCode, 409, '409 Conflict');
+        t.deepEqual(body, {
+            code: 'CannotDeleteInstanceError',
+            message: 'Instance has "triton.instance.undeletable" tag'
+        }, 'error message');
+        t.done();
+    });
+};
+
+
+
 exports.delete_tag = function (t) {
-    var path = '/vms/' + newUuid + '/tags/role?owner_uuid=' + CUSTOMER;
+    var path = '/vms/' + newUuid +
+        '/tags/triton.instance.undeletable?owner_uuid=' + CUSTOMER;
 
     var opts = createOpts(path, { owner_uuid: CUSTOMER });
 
@@ -1581,6 +1620,7 @@ exports.wait_delete_tag_job = function (t) {
 
 exports.wait_delete_tag = function (t) {
     var tags = {
+        role: 'database',
         group: 'deployment'
     };
 
