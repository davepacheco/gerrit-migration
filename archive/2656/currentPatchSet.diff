commit f23b994e23f3eb0104ad393c41cb6225ba54d3fd (refs/changes/56/2656/3)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-09-26T15:11:26-07:00 (2 years ago)
    
    DOCKER-1095 docker pull should distinguish between auth error and not found error
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/CHANGES.md b/CHANGES.md
index a528569..7a2575a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,11 @@
 
 (nothing yet)
 
+## 3.2.11
+
+- DOCKER-1095 docker pull should distinguish between auth error and not found
+  error
+
 ## 3.2.10
 
 - DOCKER-1104 support docker manifest lists
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index 232906b..938f98c 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -90,27 +90,63 @@ function _setAuthHeaderFromAuthInfo(headers, authInfo) {
 }
 
 /**
- * XXX still true for v2?
- *
  * Special handling of errors from the registry server.
  *
- * When some of the endpoints get a 404, the response body is a largish dump
- * of test/html. We don't want to include that as an error "message". It
- * isn't useful.
- *
- * Usage:
- *      cb(new _sanitizeErr(err, req, res[, errmsg]));
- *
- * where `errmsg` is an optional fallback error message to use for the
- * sanitized 404 err.message.
+ * Some registry errors will use a custom error format, so detect those
+ * and convert these as necessary.
+ *
+ * Example JSON response for a missing repo:
+ * {
+ *   "jse_shortmsg": "",
+ *   "jse_info": {},
+ *   "message": "{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"...}\n",
+ *   "body": {
+ *       "errors": [{
+ *           "code": "UNAUTHORIZED",
+ *           "message": "authentication required",
+ *           "detail": [{
+ *               "Type": "repository",
+ *               "Class": "",
+ *               "Name": "library/idontexist",
+ *               "Action": "pull"
+ *           }]
+ *       }]
+ *   }
+ * }
+ *
+ * Example JSON response for bad username/password:
+ * {
+ *   "statusCode": 401,
+ *   "jse_shortmsg":"",
+ *   "jse_info":{},
+ *   "message":"{\"details\":\"incorrect username or password\"}\n",
+ *   "body":{
+ *     "details": "incorrect username or password"
+ *   }
+ * }
+ *
+ * Example AWS token error:
+ * {
+ *   "statusCode": 400,
+ *   "errors": [
+ *     {
+ *       "code": "DENIED",
+ *       "message": "Your Authorization Token is invalid."
+ *     }
+ *   ]
+ * }
  */
-function _sanitizeErr(err, req, res, errmsg) {
-    if (err.statusCode === 404 && res && res.headers['content-type'] &&
-        res.headers['content-type'].split(';')[0] !== 'application/json')
-    {
-        err.message = errmsg || 'not found';
+function _getRegistryErrorMessage(err) {
+    if (err.body && Array.isArray(err.body.errors) && err.body.errors[0]) {
+        return err.body.errors[0].message;
+    } else if (err.body && err.body.details) {
+        return err.body.details;
+    } else if (Array.isArray(err.errors) && err.errors[0].message) {
+        return err.errors[0].message;
+    } else if (err.message) {
+        return err.message;
     }
-    return err;
+    return err.toString();
 }
 
 /**
@@ -215,9 +251,13 @@ function _getToken(opts, cb) {
     }, function (err, req, res, body) {
         client.close();
         if (err) {
-            return cb(new errors.UnauthorizedError(err,
-                'token auth attempt for %s: %s request failed with status %s',
-                opts.indexName, tokenUrl, (res ? res.statusCode : '???')));
+            if (err.statusCode === 401) {
+                // Convert *all* 401 errors to use a generic error constructor
+                // with a simple error message.
+                var errMsg = _getRegistryErrorMessage(err);
+                return cb(new errors.UnauthorizedError(errMsg));
+            }
+            return cb(err);
         } else if (!body.token) {
             return cb(new errors.UnauthorizedError(err, 'authorization ' +
                 'server did not include a token in the response'));
@@ -1278,6 +1318,17 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                 headers: headers
             }, function _afterCall(err, req, res_, manifest_, body) {
                 if (err) {
+                    if (err.statusCode === 401) {
+                        // Convert into a 404 error.
+                        // If we get an Unauthorized error here, it actually
+                        // means the repo does not exist, otherwise we should
+                        // have received an unauthorized error during the
+                        // doLogin step and this code path would not be taken.
+                        var errMsg = _getRegistryErrorMessage(err);
+                        return next(new restifyErrors.makeErrFromCode(404,
+                            {message: errMsg}));
+                    }
+
                     return next(err);
                 }
 
diff --git a/package.json b/package.json
index e9e5ded..471c679 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "docker-registry-client",
-    "version": "3.2.10",
+    "version": "3.2.11",
     "description": "node.js client for the Docker Registry API",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
diff --git a/test/v2.amazonecr.test.js b/test/v2.amazonecr.test.js
index 90dbbf7..4f78a72 100644
--- a/test/v2.amazonecr.test.js
+++ b/test/v2.amazonecr.test.js
@@ -5,11 +5,12 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var crypto = require('crypto');
+var path = require('path');
 var test = require('tape');
 
 var drc = require('..');
@@ -171,6 +172,46 @@ test('v2 amazonecr', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: path.dirname(CONFIG.repo) + '/unknownreponame',
+            username: CONFIG.username,
+            password: CONFIG.password,
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: CONFIG.repo,
+            username: 'AWS',
+            password: 'IForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            // Amazon is different in this case - it gives a 400 error, whilst
+            // other registries return a 401 error:
+            // {"errors":[{
+            //      "code": "DENIED",
+            //      "message": "Your Authorization Token is invalid."
+            // }]}
+            t.equal(err.statusCode, 400);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = manifest.layers[0].digest;
         client.headBlob({digest: digest}, function (err, ress) {
diff --git a/test/v2.dockerio.test.js b/test/v2.dockerio.test.js
index a9839f8..9e82794 100644
--- a/test/v2.dockerio.test.js
+++ b/test/v2.dockerio.test.js
@@ -5,11 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var crypto = require('crypto');
-var strsplit = require('strsplit');
 var test = require('tape');
 
 var drc = require('..');
@@ -201,7 +200,7 @@ test('v2 docker.io', function (tt) {
         var getOpts = {ref: manifestDigest, maxSchemaVersion: 2};
         client.getManifest(getOpts, function (err, manifest_) {
             t.ifErr(err);
-            t.ok(manifest);
+            t.ok(manifest_, 'Got the manifest object');
             ['schemaVersion',
              'config',
              'layers'].forEach(function (k) {
@@ -220,6 +219,38 @@ test('v2 docker.io', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: 'unknownreponame',
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: REPO,
+            username: 'fredNoExistHere',
+            password: 'fredForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 401);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = getFirstLayerDigestFromManifest(manifest);
         client.headBlob({digest: digest}, function (err, ress) {
diff --git a/test/v2.gcrio.test.js b/test/v2.gcrio.test.js
index 895352b..814583d 100644
--- a/test/v2.gcrio.test.js
+++ b/test/v2.gcrio.test.js
@@ -135,6 +135,38 @@ test('v2 gcr.io', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: 'unknownreponame',
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: REPO,
+            username: 'fredNoExistHere',
+            password: 'fredForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 401);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = manifest.fsLayers[0].blobSum;
         client.headBlob({digest: digest}, function (err, ress) {
diff --git a/test/v2.gitlab.test.js b/test/v2.gitlab.test.js
index 849b427..6500c82 100644
--- a/test/v2.gitlab.test.js
+++ b/test/v2.gitlab.test.js
@@ -14,7 +14,7 @@
  */
 
 var crypto = require('crypto');
-var strsplit = require('strsplit');
+var path = require('path');
 var test = require('tape');
 
 var drc = require('..');
@@ -177,6 +177,38 @@ test('v2 registry.gitlab.com', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: path.dirname(REPO) + '/unknownreponame',
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: REPO,
+            username: 'fredNoExistHere',
+            password: 'fredForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 401);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = getFirstLayerDigestFromManifest(manifest);
         client.headBlob({digest: digest}, function (err, ress) {
diff --git a/test/v2.jfrogartifactory.test.js b/test/v2.jfrogartifactory.test.js
index c3af2b3..c078753 100644
--- a/test/v2.jfrogartifactory.test.js
+++ b/test/v2.jfrogartifactory.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -31,7 +31,7 @@
 
 var assert = require('assert-plus');
 var crypto = require('crypto');
-var strsplit = require('strsplit');
+var path = require('path');
 var test = require('tape');
 
 var drc = require('..');
@@ -216,6 +216,40 @@ test('v2 jfrog artifactory private repo (' + CONFIG.repo + ')', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: path.dirname(CONFIG.repo) + '/unknownreponame',
+            username: CONFIG.username,
+            password: CONFIG.password,
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: CONFIG.repo,
+            username: 'fredNoExistHere',
+            password: 'fredForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 401);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = manifest.layers[0].digest;
         client.headBlob({digest: digest}, function (err, ress) {
diff --git a/test/v2.quayio.test.js b/test/v2.quayio.test.js
index 4394459..04cf327 100644
--- a/test/v2.quayio.test.js
+++ b/test/v2.quayio.test.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var crypto = require('crypto');
-var strsplit = require('strsplit');
+var path = require('path');
 var test = require('tape');
 
 var drc = require('..');
@@ -140,6 +140,38 @@ test('v2 quay.io', function (tt) {
         });
     });
 
+    tt.test('  getManifest (unknown repo)', function (t) {
+        var badRepoClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: path.dirname(REPO) + '/unknownreponame',
+            log: log
+        });
+        t.ok(badRepoClient);
+        badRepoClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 404);
+            t.end();
+        });
+    });
+
+    tt.test('  getManifest (bad username/password)', function (t) {
+        var badUserClient = drc.createClientV2({
+            maxSchemaVersion: 2,
+            name: REPO,
+            username: 'fredNoExistHere',
+            password: 'fredForgot',
+            log: log
+        });
+        t.ok(badUserClient);
+        badUserClient.getManifest({ref: 'latest'}, function (err, manifest_) {
+            t.ok(err, 'Expected an error on a missing repo');
+            t.notOk(manifest_);
+            t.equal(err.statusCode, 401);
+            t.end();
+        });
+    });
+
     tt.test('  headBlob', function (t) {
         var digest = manifest.fsLayers[0].blobSum;
         client.headBlob({digest: digest}, function (err, ress) {
