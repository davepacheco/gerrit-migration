From ec50d6b703ca91585bdf94df3659860411efd956 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Tue, 26 Sep 2017 14:46:28 -0700
Subject: [PATCH] DOCKER-1095 docker pull should distinguish between auth error
 and not found error

---
 CHANGES.md                |  5 +++
 lib/registry-client-v2.js | 91 ++++++++++++++++++++++++++++++---------
 package.json              |  2 +-
 3 files changed, 77 insertions(+), 21 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index a528569..7a2575a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,11 @@
 
 (nothing yet)
 
+## 3.2.11
+
+- DOCKER-1095 docker pull should distinguish between auth error and not found
+  error
+
 ## 3.2.10
 
 - DOCKER-1104 support docker manifest lists
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index 232906b..938f98c 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -90,27 +90,63 @@ function _setAuthHeaderFromAuthInfo(headers, authInfo) {
 }
 
 /**
- * XXX still true for v2?
- *
  * Special handling of errors from the registry server.
  *
- * When some of the endpoints get a 404, the response body is a largish dump
- * of test/html. We don't want to include that as an error "message". It
- * isn't useful.
- *
- * Usage:
- *      cb(new _sanitizeErr(err, req, res[, errmsg]));
- *
- * where `errmsg` is an optional fallback error message to use for the
- * sanitized 404 err.message.
+ * Some registry errors will use a custom error format, so detect those
+ * and convert these as necessary.
+ *
+ * Example JSON response for a missing repo:
+ * {
+ *   "jse_shortmsg": "",
+ *   "jse_info": {},
+ *   "message": "{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"...}\n",
+ *   "body": {
+ *       "errors": [{
+ *           "code": "UNAUTHORIZED",
+ *           "message": "authentication required",
+ *           "detail": [{
+ *               "Type": "repository",
+ *               "Class": "",
+ *               "Name": "library/idontexist",
+ *               "Action": "pull"
+ *           }]
+ *       }]
+ *   }
+ * }
+ *
+ * Example JSON response for bad username/password:
+ * {
+ *   "statusCode": 401,
+ *   "jse_shortmsg":"",
+ *   "jse_info":{},
+ *   "message":"{\"details\":\"incorrect username or password\"}\n",
+ *   "body":{
+ *     "details": "incorrect username or password"
+ *   }
+ * }
+ *
+ * Example AWS token error:
+ * {
+ *   "statusCode": 400,
+ *   "errors": [
+ *     {
+ *       "code": "DENIED",
+ *       "message": "Your Authorization Token is invalid."
+ *     }
+ *   ]
+ * }
  */
-function _sanitizeErr(err, req, res, errmsg) {
-    if (err.statusCode === 404 && res && res.headers['content-type'] &&
-        res.headers['content-type'].split(';')[0] !== 'application/json')
-    {
-        err.message = errmsg || 'not found';
+function _getRegistryErrorMessage(err) {
+    if (err.body && Array.isArray(err.body.errors) && err.body.errors[0]) {
+        return err.body.errors[0].message;
+    } else if (err.body && err.body.details) {
+        return err.body.details;
+    } else if (Array.isArray(err.errors) && err.errors[0].message) {
+        return err.errors[0].message;
+    } else if (err.message) {
+        return err.message;
     }
-    return err;
+    return err.toString();
 }
 
 /**
@@ -215,9 +251,13 @@ function _getToken(opts, cb) {
     }, function (err, req, res, body) {
         client.close();
         if (err) {
-            return cb(new errors.UnauthorizedError(err,
-                'token auth attempt for %s: %s request failed with status %s',
-                opts.indexName, tokenUrl, (res ? res.statusCode : '???')));
+            if (err.statusCode === 401) {
+                // Convert *all* 401 errors to use a generic error constructor
+                // with a simple error message.
+                var errMsg = _getRegistryErrorMessage(err);
+                return cb(new errors.UnauthorizedError(errMsg));
+            }
+            return cb(err);
         } else if (!body.token) {
             return cb(new errors.UnauthorizedError(err, 'authorization ' +
                 'server did not include a token in the response'));
@@ -1278,6 +1318,17 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                 headers: headers
             }, function _afterCall(err, req, res_, manifest_, body) {
                 if (err) {
+                    if (err.statusCode === 401) {
+                        // Convert into a 404 error.
+                        // If we get an Unauthorized error here, it actually
+                        // means the repo does not exist, otherwise we should
+                        // have received an unauthorized error during the
+                        // doLogin step and this code path would not be taken.
+                        var errMsg = _getRegistryErrorMessage(err);
+                        return next(new restifyErrors.makeErrFromCode(404,
+                            {message: errMsg}));
+                    }
+
                     return next(err);
                 }
 
diff --git a/package.json b/package.json
index e9e5ded..471c679 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "docker-registry-client",
-    "version": "3.2.10",
+    "version": "3.2.11",
     "description": "node.js client for the Docker Registry API",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
-- 
2.21.0

