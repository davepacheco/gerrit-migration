From 46bbd2d47a2d22d4b83b4957dab9efd6ce2a9989 Mon Sep 17 00:00:00 2001
From: dyep49 <dyep49@gmail.com>
Date: Fri, 16 Mar 2018 15:13:13 -0700
Subject: [PATCH] TRITON-222 Use node-triton-metrics for IMGAPI metrics
 collection

---
 CHANGES.md              |   4 +
 docs/operator-guide.md  |  33 +------
 lib/app.js              |  17 ++--
 lib/metrics.js          | 125 -------------------------
 package.json            |   4 +-
 test/metrics.dc-test.js | 198 ----------------------------------------
 6 files changed, 18 insertions(+), 363 deletions(-)
 delete mode 100644 lib/metrics.js
 delete mode 100644 test/metrics.dc-test.js

diff --git a/CHANGES.md b/CHANGES.md
index 23315cf..e93035e 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # IMGAPI changelog
 
+## 4.2.2
+
+- TRITON-222 Use node-triton-metrics for IMGAPI metrics collection
+
 ## 4.2.1
 
 - TRITON-221 sdc-imgadm import broken for lx images
diff --git a/docs/operator-guide.md b/docs/operator-guide.md
index 7c5eca2..429ba85 100644
--- a/docs/operator-guide.md
+++ b/docs/operator-guide.md
@@ -723,35 +723,4 @@ to tail *trace*-level logs of the imgapi service:
 
 # Metrics
 
-IMGAPI exposes metrics via [node-artedi](https://github.com/joyent/node-artedi).  For development, it is probably easiest to use `curl` to scrape metrics:
-
-```
-$ curl http://<ADMIN_IP>:8881/metrics
-```
-The metrics are returned in Prometheus v0.0.4 text format.
-
-The following metrics are collected:
-
-- http_requests_completed
-- http_request_duration_seconds
-
-Each of the metrics returned include the following metadata labels:
-
-- datacenter (Datacenter name e.g. us-east-1)
-- service (Service name e.g. vmapi)
-- instance (Instance UUID)
-- server (Server UUID)
-- method (e.g. 'PUT')
-- status_code (e.g. 200)
-- route (e.g. 'listvms')
-- user_agent (only the first token e.g. restify/1.5.2)
-
-The metric collection facility provided is intended to be consumed by a monitoring service like a Prometheus or InfluxDB server.
-
-Notably, some metadata labels are not being collected due to their potential for
-high cardinality. Metadata labels that have a large number of unique values
-cause memory strain on metric client processes (imgapi) as well as metric
-servers (Prometheus). It's important to understand what kind of an effect on
-the entire system the addition of metrics and metadata labels can have before
-adding them. This is an issue that would likely not appear in a development or
-staging environment.
+IMGAPI exposes metrics via [node-triton-metrics](https://github.com/joyent/node-triton-metrics) on `http://<ADMIN_IP>:8881/metrics`
diff --git a/lib/app.js b/lib/app.js
index ecf1049..ab724eb 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -32,7 +32,7 @@ var moray = require('moray');
 var vasync = require('vasync');
 
 var channels = require('./channels');
-var createMetricsManager = require('./metrics').createMetricsManager;
+var createMetricsManager = require('triton-metrics').createMetricsManager;
 var database = require('./database');
 var authkeys = require('./authkeys');
 var storage = require('./storage');
@@ -47,6 +47,7 @@ var Wfapi = require('./wfapi');
 //---- globals
 
 var HOSTNAME = os.hostname();
+var METRICS_SERVER_PORT = 8881;
 
 var faviconCache;
 var request_seq_id = 0;
@@ -290,15 +291,18 @@ function App(config, log) {
     if (this.mode === 'dc') {
         this.metricsManager = createMetricsManager({
             address: config.adminIp,
-            labels: {
+            log: self.log.child({component: 'metrics'}),
+            port: METRICS_SERVER_PORT,
+            restify: restify,
+            staticLabels: {
                 datacenter: config.datacenterName,
                 instance: config.instanceUuid,
                 server: config.serverUuid,
                 service: config.serviceName
-            },
-            log: self.log.child({component: 'metrics'}),
-            port: 8881
+            }
         });
+
+        this.metricsManager.createRestifyMetrics();
     }
 
     // Server response caches. This is centralized on the app
@@ -403,7 +407,8 @@ function App(config, log) {
 
     if (this.metricsManager) {
         var metricsManager = this.metricsManager;
-        server.on('after', metricsManager.update.bind(metricsManager));
+        server.on('after', metricsManager.collectRestifyMetrics
+            .bind(metricsManager));
     }
 
     server.on('after', function (req, res, route, err) {
diff --git a/lib/metrics.js b/lib/metrics.js
deleted file mode 100644
index 1e06d5c..0000000
--- a/lib/metrics.js
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-/*
- * Artedi metrics.
- */
-
-var artedi = require('artedi');
-var assert = require('assert-plus');
-var restify = require('restify');
-var VError = require('verror');
-
-function getMetricsHandler(collector) {
-    function getMetrics(req, res, next) {
-        /*
-         * Restify GET requests will keep socket open until entire request
-         * body is read. req.resume() is used to prevent connection leaks.
-         *
-         * More information at:
-         * https://jira.joyent.us/browse/MANTA-3338
-         * https://cr.joyent.us/#/c/2823/1/lib/other.js
-         */
-        req.on('end', function collectMetrics() {
-            collector.collect(artedi.FMT_PROM,
-                function sendMetrics(err, metrics) {
-                if (err) {
-                    next(new VError(err, 'error retrieving metrics'));
-                    return;
-                }
-                /* BEGIN JSSTYLED */
-                /*
-                 * Content-Type header is set to indicate the Prometheus
-                 * exposition format version
-                 *
-                 * More information at:
-                 * https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#format-version-004
-                 */
-                /* END JSSTYLED */
-                res.setHeader('Content-Type', 'text/plain; version=0.0.4');
-                res.send(metrics);
-                next();
-            });
-        });
-        req.resume();
-    }
-    var chain = [ getMetrics ];
-    return chain;
-}
-
-function MetricsManager(config) {
-    assert.object(config, 'config');
-    assert.object(config.log, 'config.log');
-    assert.object(config.labels, 'config.labels');
-    assert.string(config.address, 'config.address');
-    assert.number(config.port, 'config.port');
-
-    var collector = artedi.createCollector({ labels: config.labels });
-    this.collector = collector;
-
-    this.requestCounter = this.collector.counter({
-        name: 'http_requests_completed',
-        help: 'count of requests completed'
-    });
-
-    this.timeHistogram = this.collector.histogram({
-        name: 'http_request_duration_seconds',
-        help: 'total time to process requests'
-    });
-
-    this.address = config.address;
-    this.log = config.log;
-    this.port = config.port;
-    this.server = restify.createServer({ severName: 'Metrics' });
-    this.server.get('/metrics', getMetricsHandler(collector));
-}
-
-MetricsManager.prototype.listen = function startMetricsServer(callback) {
-    var self = this;
-
-    self.server.listen(self.port, self.address, function serverStarted() {
-        self.log.info('metrics server started on %s', self.server.url);
-        callback();
-    });
-};
-
-MetricsManager.prototype.update = function updateMetrics(req, res, route, err) {
-
-    var routeName = route ? (route.name || route) : 'unknown';
-    var userAgent = req.userAgent();
-
-    // Only the first token is added to the label to prevent cardinality issues
-    var shortUserAgent = userAgent ? userAgent.split(' ')[0] : 'unknown';
-
-    var labels = {
-        route: routeName,
-        method: req.method,
-        user_agent: shortUserAgent,
-        status_code: res.statusCode
-    };
-
-    var latency = res.getHeader('X-Response-Time');
-    if (typeof (latency) !== 'number') {
-        latency = Date.now() - req._time;
-    }
-
-    var latencySeconds = latency / 1000;
-
-    this.requestCounter.increment(labels);
-    this.timeHistogram.observe(latencySeconds, labels);
-};
-
-function createMetricsManager(options) {
-    return new MetricsManager(options);
-}
-
-module.exports = {
-    createMetricsManager: createMetricsManager
-};
diff --git a/package.json b/package.json
index 83ffae4..09101f7 100644
--- a/package.json
+++ b/package.json
@@ -1,11 +1,10 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "4.2.1",
+  "version": "4.2.2",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "artedi": "1.3.0",
     "assert-plus": "1.0.0",
     "async": "0.7.0",
     "buffer-peek-stream": "1.0.1",
@@ -41,6 +40,7 @@
     "sshpk": "1.13.0",
     "through2": "2.0.3",
     "trace-event": "1.2.0",
+    "triton-metrics": "0.1.0",
     "ufds": "1.2.0",
     "uuid": "2.0.2",
     "vasync": "1.6.3",
diff --git a/test/metrics.dc-test.js b/test/metrics.dc-test.js
deleted file mode 100644
index 049cd48..0000000
--- a/test/metrics.dc-test.js
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-var assert = require('assert-plus');
-var loadConfig = require('../lib/config').loadConfig;
-var format = require('util').format;
-var imgapi = require('sdc-clients/lib/imgapi');
-var restify = require('restify');
-var url = require('url');
-var vasync = require('vasync');
-
-// node-tap API
-if (require.cache[__dirname + '/tap4nodeunit.js']) {
-    delete require.cache[__dirname + '/tap4nodeunit.js'];
-}
-
-var tap4nodeunit = require('./tap4nodeunit.js');
-var after = tap4nodeunit.after;
-var before = tap4nodeunit.before;
-var test = tap4nodeunit.test;
-
-function ifError(t, err) {
-    t.ok(!err, err ? ('error: ' + err.message) : 'no error');
-}
-
-var config;
-var imgapiClient;
-var metricsClient;
-var promLabels;
-
-function createMetricsClient(adminIp) {
-    var metricsUrl = format('http://%s:%d', adminIp, 8881);
-    var client = restify.createStringClient({
-        connectTimeout: 250,
-        rejectUnauthorized: false,
-        retry: false,
-        url: metricsUrl
-    });
-
-    return client;
-}
-
-/*
- * The metrics endpoint returns metrics in the Prometheus v0.0.4 format.
- * This function takes the metrics response and a metric to match the metric
- * line you want to match as input and returns the count of that metric.
- */
-function getMetricCount(metricsRes, metricsLabels) {
-    var labels = promLabels.concat(metricsLabels);
-    var metricsLines = metricsRes.split('\n');
-    var metricLine = metricsLines.filter(function (line) {
-        var match = true;
-        labels.forEach(function (label) {
-            var lineMatch = line.indexOf(label);
-            if (lineMatch === -1) {
-                match = false;
-            }
-        });
-
-        return match;
-    });
-    var count = Number(metricLine[0].split('} ')[1]);
-    return count;
-}
-
-function fetchMetricCount(metricsLabels, callback) {
-    metricsClient.get('/metrics', function getMetrics(err, req, res, data) {
-        var count = getMetricCount(data, metricsLabels);
-        callback(err, count);
-    });
-}
-
-function incrementPingCount(_, callback) {
-    imgapiClient.ping(callback);
-}
-
-before(function (next) {
-    var options = { url: process.env.IMGAPI_URL };
-    if (process.env.IMGAPI_URL === 'https://images.joyent.com') {
-        assert.ok(process.env.JOYENT_IMGADM_USER,
-            'JOYENT_IMGADM_USER envvar is not set');
-        assert.ok(process.env.JOYENT_IMGADM_IDENTITY,
-            'JOYENT_IMGADM_IDENTITY envvar is not set');
-        options.user = process.env.JOYENT_IMGADM_USER;
-        options.sign = imgapi.cliSigner({
-            keyId: process.env.JOYENT_IMGADM_IDENTITY,
-            user: process.env.JOYENT_IMGADM_USER
-        });
-    }
-
-    imgapiClient = imgapi.createClient(options);
-
-    loadConfig({}, function (err, _config) {
-        assert.ifError(err);
-        assert.equal(_config.mode, 'dc', 'DC Mode');
-        config = _config;
-
-        metricsClient = createMetricsClient(config.adminIp);
-
-        var shortUserAgent = imgapiClient.client.headers['user-agent']
-            .split(' ')[0];
-        promLabels = [
-            format('datacenter="%s"', config.datacenterName),
-            format('instance="%s"', config.instanceUuid),
-            format('route="%s"', 'ping'),
-            format('server="%s"', config.serverUuid),
-            format('service="%s"', config.serviceName),
-            format('status_code="%d"', 200),
-            format('user_agent="%s"', shortUserAgent)
-        ];
-        next();
-    });
-});
-
-test('metrics handler', function (t) {
-    metricsClient.get('/metrics', function getMetrics(err, req, res, data) {
-        ifError(t, err);
-        t.ok(res, 'The response should exist');
-        t.equal(res.statusCode, 200, 'The status code should be 200');
-        t.ok(data, 'The data should exist');
-        t.end();
-    });
-});
-
-test('metrics counter', function (t) {
-    var pingCount;
-    var updatedPingCount;
-
-    var metricsLabels = [ 'http_requests_completed' ];
-
-    vasync.pipeline({
-        funcs: [
-            incrementPingCount,
-            function getPingCount(ctx, next) {
-                fetchMetricCount(metricsLabels, function (err, count) {
-                    pingCount = count;
-                    next();
-                });
-            },
-            incrementPingCount,
-            function getPingVmCount(ctx, next) {
-                fetchMetricCount(metricsLabels, function (err, count) {
-                    updatedPingCount = count;
-                    next();
-                });
-            }
-        ]
-    }, function (err, results) {
-        ifError(t, err);
-        t.ok(updatedPingCount, 'updated ping count');
-        t.ok(pingCount < updatedPingCount,
-                'ping count should increase');
-        t.end();
-    });
-});
-
-test('metrics histogram counter', function (t) {
-    var pingDurationCount;
-    var updatedPingDurationCount;
-
-    var metricsLabels = [
-        format('le="%s"', '+Inf'),
-        'http_request_duration_seconds'
-    ];
-
-    vasync.pipeline({
-        funcs: [
-            incrementPingCount,
-            function getPingDurationCount(ctx, next) {
-                fetchMetricCount(metricsLabels, function (err, count) {
-                    pingDurationCount = count;
-                    next();
-                });
-            },
-            incrementPingCount,
-            function getUpdatedPingDurationCount(ctx, next) {
-                fetchMetricCount(metricsLabels, function (err, count) {
-                    updatedPingDurationCount = count;
-                    next();
-                });
-            }
-        ]
-    }, function (err, results) {
-        ifError(t, err);
-        t.ok(pingDurationCount, 'ping duration count');
-        t.ok(updatedPingDurationCount, 'updated ping duration count');
-        t.ok(pingDurationCount < updatedPingDurationCount,
-                'ping duration count should increase');
-        t.end();
-    });
-});
-- 
2.21.0

