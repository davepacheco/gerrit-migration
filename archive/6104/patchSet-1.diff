commit 8078deffbd61ed081cf1c475524cc25d1ac5f4e5
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-04-11T19:24:33-04:00 (6 months ago)
    
    joyent/node-boray#6 want sort, limit, and prefix support for listing buckets and objects

diff --git a/lib/bucket_buckets.js b/lib/bucket_buckets.js
index b4f5f0c..d49008a 100644
--- a/lib/bucket_buckets.js
+++ b/lib/bucket_buckets.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -16,6 +16,7 @@
  */
 
 var EventEmitter = require('events').EventEmitter;
+var stream = require('stream');
 
 var assert = require('assert-plus');
 var libuuid = require('libuuid');
@@ -239,21 +240,32 @@ function deleteBucketNoVnode(rpcctx, owner, bucket, callback) {
     });
 }
 
-function listBuckets(rpcctx, owner, vnode) {
+/*
+ * This function talks to boray
+ */
+function listBuckets(rpcctx, owner, orderby, prefix, limit, offset, vnode) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
+    assert.string(orderby, 'orderby');
+    assert.string(prefix, 'prefix');
+    assert.number(limit, 'limit');
+    assert.number(offset, 'offset');
     assert.number(vnode, 'vnode');
 
     var opts = makeBucketOptions({});
 
     var arg = {
         owner: owner,
+        orderby: orderby,
+        prefix: prefix,
+        limit: limit,
+        offset: offset,
         vnode: vnode
     };
 
     var log = rpc.childLogger(rpcctx, opts);
 
-    var res = new EventEmitter();
+    var res = new stream.PassThrough({objectMode: true});
 
     var req = rpc.rpcCommon({
         rpcctx: rpcctx,
@@ -270,19 +282,26 @@ function listBuckets(rpcctx, owner, vnode) {
         res.emit('_moray_internal_rpc_done');
     });
 
-    req.on('data', function (msg) {
-        res.emit('record', msg);
-    });
+    req.pipe(res, {end: false});
 
     return (res);
 }
 
-function listBucketsNoVnode(rpcctx, owner) {
+/*
+ * This function talks to electric-boray
+ */
+function listBucketsNoVnode(rpcctx, owner, sorted, orderby, prefix, limit) {
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
+    assert.bool(sorted, 'sorted');
+    assert.string(orderby, 'orderby');
+    assert.string(prefix, 'prefix');
+    assert.number(limit, 'limit');
 
     var opts = makeBucketOptions({});
 
+    var arg = [owner, sorted, orderby, prefix, limit];
+
     var log = rpc.childLogger(rpcctx, opts);
 
     var res = new EventEmitter();
@@ -290,7 +309,7 @@ function listBucketsNoVnode(rpcctx, owner) {
     var req = rpc.rpcCommon({
         rpcctx: rpcctx,
         rpcmethod: 'listbuckets',
-        rpcargs: [owner],
+        rpcargs: arg,
         log: log
     }, function (err) {
         if (err) {
diff --git a/lib/bucket_objects.js b/lib/bucket_objects.js
index 47a47ed..c67d300 100644
--- a/lib/bucket_objects.js
+++ b/lib/bucket_objects.js
@@ -16,6 +16,7 @@
  */
 
 var EventEmitter = require('events').EventEmitter;
+var stream = require('stream');
 
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
@@ -369,25 +370,33 @@ function createUnhandledOptionsError(unhandledOptions, cause) {
     return (err);
 }
 
-function listObjects(rpcctx, owner, bucket_id, vnode) {
-    var opts, log;
+function listObjects(rpcctx, owner, bucket_id, orderby, prefix, limit, offset,
+    vnode) {
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
+    assert.string(orderby, 'orderby');
+    assert.string(prefix, 'prefix');
+    assert.number(limit, 'limit');
+    assert.number(offset, 'offset');
     assert.number(vnode, 'vnode');
 
-    opts = makeOptions({});
-
     var arg = {
         owner: owner,
         bucket_id: bucket_id,
+        orderby: orderby,
+        prefix: prefix,
+        limit: limit,
+        offset: offset,
         vnode: vnode
     };
 
-    log = rpc.childLogger(rpcctx, opts);
+    var opts = makeOptions(arg);
 
-    var res = new EventEmitter();
+    var log = rpc.childLogger(rpcctx, opts);
+
+    var res = new stream.PassThrough({objectMode: true});
 
     var req = rpc.rpcCommon({
         rpcctx: rpcctx,
@@ -404,19 +413,23 @@ function listObjects(rpcctx, owner, bucket_id, vnode) {
         res.emit('_moray_internal_rpc_done');
     });
 
-    req.on('data', function (msg) {
-        res.emit('record', msg);
-    });
+    req.pipe(res, {end: false});
 
     return (res);
 }
 
-function listObjectsNoVnode(rpcctx, owner, bucket_id) {
+function listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, orderby, prefix,
+    limit) {
+
     var opts, log;
 
     assert.object(rpcctx, 'rpcctx');
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
+    assert.bool(sorted, 'sorted');
+    assert.string(orderby, 'orderby');
+    assert.string(prefix, 'prefix');
+    assert.number(limit, 'limit');
 
     opts = makeOptions({});
 
@@ -427,7 +440,7 @@ function listObjectsNoVnode(rpcctx, owner, bucket_id) {
     var req = rpc.rpcCommon({
         rpcctx: rpcctx,
         rpcmethod: 'listobjects',
-        rpcargs: [owner, bucket_id],
+        rpcargs: [owner, bucket_id, sorted, orderby, prefix, limit],
         log: log
     }, function (err) {
         if (err) {
diff --git a/lib/client.js b/lib/client.js
index 35be617..1eeee29 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -597,7 +597,9 @@ MorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
 /**
  * Lists buckets
  */
-MorayClient.prototype.listBuckets = function listBuckets(owner, vnode) {
+MorayClient.prototype.listBuckets =
+    function listBuckets(owner, orderby, prefix, limit, offset, vnode) {
+
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -605,13 +607,16 @@ MorayClient.prototype.listBuckets = function listBuckets(owner, vnode) {
         return (emitUnavailable());
     }
 
-    rv = buckets.listBuckets(rpcctx, owner, vnode);
+    rv = buckets.listBuckets(rpcctx, owner, orderby, prefix, limit, offset,
+        vnode);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
 };
 
-MorayClient.prototype.listBucketsNoVnode = function listBucketsNoVnode(owner) {
+MorayClient.prototype.listBucketsNoVnode =
+    function listBucketsNoVnode(owner, sorted, orderby, prefix, limit) {
+
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -619,7 +624,8 @@ MorayClient.prototype.listBucketsNoVnode = function listBucketsNoVnode(owner) {
         return (emitUnavailable());
     }
 
-    rv = buckets.listBucketsNoVnode(rpcctx, owner);
+    rv = buckets.listBucketsNoVnode(rpcctx, owner, sorted, orderby, prefix,
+        limit);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -803,10 +809,11 @@ MorayClient.prototype.getObjectNoVnode =
 };
 
 /**
- * Lists objects
+ * List objects - talks to boray
  */
 MorayClient.prototype.listObjects =
-    function listObjects(owner, bucket_id, vnode) {
+    function listObjects(owner, bucket_id, orderby, prefix, limit, offset,
+        vnode) {
 
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
@@ -815,14 +822,19 @@ MorayClient.prototype.listObjects =
         return (emitUnavailable());
     }
 
-    rv = objects.listObjects(rpcctx, owner, bucket_id, vnode);
+    rv = objects.listObjects(rpcctx, owner, bucket_id, orderby, prefix, limit,
+        offset, vnode);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
 };
 
+/**
+ * Lists objects - talks to electric-boray
+ */
 MorayClient.prototype.listObjectsNoVnode =
-    function listObjectsNoVnode(owner, bucket_id) {
+    function listObjectsNoVnode(owner, bucket_id, sorted, orderby, prefix,
+        limit) {
 
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
@@ -831,7 +843,8 @@ MorayClient.prototype.listObjectsNoVnode =
         return (emitUnavailable());
     }
 
-    rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_id);
+    rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_id, sorted, orderby,
+        prefix, limit);
     this.releaseWhenDone(rpcctx, rv);
 
     return (rv);
@@ -885,17 +898,22 @@ MorayClient.prototype.deleteObjectNoVnode =
  * See https://mo.joyent.com/docs/moray/master/#FindObjects for more info.
  *
  * @param {String} b      - Bucket name
- * @param {String} f      - Object filter
  * @param {Object} opts   - request parameters
  * @return {EventEmitter} - listen for 'record', 'end' and 'error'
  */
-MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
+MorayClient.prototype.findObjects = function findObjects(b, opts) {
     assert.string(b, 'bucket');
-    assert.string(f, 'filter');
-    assert.object(opts, 'options');
-    assert.string(opts.hashkey, 'opts.hashkey');
+    assert.object(opts, 'opts');
+    assert.string(opts.path, 'opts.path');
+    assert.bool(opts.sorted, 'opts.sorted');
+    assert.string(opts.orderby, 'opts.orderby');
+    assert.number(opts.limit, 'opts.limit');
+    assert.string(opts.prefix, 'opts.prefix');
     assert.optionalObject(opts.bucket_data, 'opts.bucket_data');
 
+    this.log.warn({b: b, opts: opts},
+        'MorayClient.prototype.findObjects');
+
     var bucket_data = opts.bucket_data || {};
 
     opts = jsprim.mergeObjects(opts, null, {
@@ -916,7 +934,7 @@ MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
      * XXX I don't know if this is the best way to do this or the best place
      * for the logic but yolo.
      */
-    var key = path.normalize(opts.hashkey);
+    var key = path.normalize(opts.path);
 
     this.log.debug({key: key}, 'findObjects key: %s', key);
 
@@ -945,9 +963,11 @@ MorayClient.prototype.findObjects = function findObjects(b, f, opts) {
     if (bucket) {
         assert.equal(bucket, bucket_data.name, 'bucket_data.name the same');
         assert.equal(owner, bucket_data.owner, 'bucket_data.owner the same');
-        rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_data.id);
+        rv = objects.listObjectsNoVnode(rpcctx, owner, bucket_data.id,
+            opts.sorted, opts.orderby, opts.prefix, opts.limit);
     } else {
-        rv = buckets.listBucketsNoVnode(rpcctx, owner);
+        rv = buckets.listBucketsNoVnode(rpcctx, owner, opts.sorted,
+            opts.orderby, opts.prefix, opts.limit);
     }
 
     this.releaseWhenDone(rpcctx, rv);
@@ -1231,16 +1251,14 @@ MorayRpcContext.prototype.unwrapErrors = function unwrapErrors() {
 };
 
 MorayRpcContext.prototype.createLog = function createLog(options) {
-    var reqid;
     assert.optionalObject(options, 'options');
+    options = jsprim.deepCopy(options || {});
 
-    if (options && options.req_id) {
-        reqid = options.req_id;
-    } else {
-        reqid = libuuid.create();
+    if (!options.req_id) {
+        options.req_id = libuuid.create();
     }
 
-    return (this.mc_moray.log.child({ 'req_id': reqid }, true));
+    return (this.mc_moray.log.child(options, true));
 };
 
 
