commit 06466633374fbf407c3af8656d0c1e599376f7dc (refs/changes/95/1995/1)
Author: Justin Reagor <justinwr@gmail.com>
Date:   2017-05-23T15:12:16-04:00 (2 years, 5 months ago)
    
    joyent/node-triton#121 introduce set-default and bwcompat set-current/set

diff --git a/lib/do_profile/do_set_current.js b/lib/do_profile/do_set_current.js
index be1b3e2..86bf1f3 100644
--- a/lib/do_profile/do_set_current.js
+++ b/lib/do_profile/do_set_current.js
@@ -46,6 +46,8 @@ do_set_current.help = [
     '`triton -p PROFILE-NAME ...` or the TRITON_PROFILE environment variable.'
 ].join('\n');
 
+do_set_current.hidden = true;
+
 do_set_current.aliases = ['set'];
 
 do_set_current.completionArgtypes = ['tritonprofile', 'none'];
diff --git a/lib/do_profile/do_set_default.js b/lib/do_profile/do_set_default.js
new file mode 100644
index 0000000..07970a3
--- /dev/null
+++ b/lib/do_profile/do_set_default.js
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2015 Joyent Inc.
+ *
+ * `triton profile set-current ...`
+ */
+
+var errors = require('../errors');
+var profilecommon = require('./profilecommon');
+
+
+
+function do_set_default(subcmd, opts, args, cb) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length === 0) {
+        cb(new errors.UsageError('missing NAME argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('too many arguments: ' + args.join(' ')));
+        return;
+    }
+
+    profilecommon.setDefaultProfile({cli: this.top, name: args[0]}, cb);
+}
+
+do_set_default.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    }
+];
+
+do_set_default.synopses = ['{{name}} {{cmd}} PROFILE'];
+do_set_default.help = [
+    'Set the default Triton CLI profile.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'NAME is the name of an existing profile, or "-" to switch to the',
+    'previously set profile.',
+    '',
+    'The "default" profile is the one used by default, unless overridden by',
+    '`triton -p PROFILE-NAME ...` or the TRITON_PROFILE environment variable.'
+].join('\n');
+
+do_set_default.completionArgtypes = ['tritonprofile', 'none'];
+
+module.exports = do_set_default;
diff --git a/lib/do_profile/index.js b/lib/do_profile/index.js
index ac08428..476b5e8 100644
--- a/lib/do_profile/index.js
+++ b/lib/do_profile/index.js
@@ -38,7 +38,7 @@ function ProfileCLI(top) {
             'help',
             'list',
             'get',
-            'set-current',
+            'set-default',
             'create',
             'edit',
             'delete',
@@ -55,6 +55,7 @@ ProfileCLI.prototype.init = function init(opts, args, cb) {
 
 ProfileCLI.prototype.do_list = require('./do_list');
 ProfileCLI.prototype.do_get = require('./do_get');
+ProfileCLI.prototype.do_set_default = require('./do_set_default');
 ProfileCLI.prototype.do_set_current = require('./do_set_current');
 ProfileCLI.prototype.do_create = require('./do_create');
 ProfileCLI.prototype.do_delete = require('./do_delete');
diff --git a/lib/do_profile/profilecommon.js b/lib/do_profile/profilecommon.js
index 0fa5dff..f474395 100644
--- a/lib/do_profile/profilecommon.js
+++ b/lib/do_profile/profilecommon.js
@@ -76,7 +76,7 @@ function downloadUrl(opts, cb) {
 
 // --- exported functions
 
-function setCurrentProfile(opts, cb) {
+function setDefaultProfile(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.name, 'opts.name');
     assert.func(cb, 'cb');
@@ -110,7 +110,7 @@ function setCurrentProfile(opts, cb) {
         }
     }
     if (currProfile && currProfile.name === profile.name) {
-        console.log('"%s" is already the current profile', profile.name);
+        console.log('"%s" is already the default profile', profile.name);
         return cb();
     }
 
@@ -123,12 +123,11 @@ function setCurrentProfile(opts, cb) {
         if (err) {
             return cb(err);
         }
-        console.log('Set "%s" as current profile', profile.name);
+        console.log('Set "%s" as default profile', profile.name);
         cb();
     });
 }
 
-
 /**
  * Setup the given profile for Docker usage. This means checking the cloudapi
  * has a Docker service (ListServices), finding the user's SSH *private* key,
@@ -510,6 +509,7 @@ function profileDockerSetup(opts, cb) {
 
 
 module.exports = {
-    setCurrentProfile: setCurrentProfile,
+    setDefaultProfile: setDefaultProfile,
+    setCurrentProfile: setDefaultProfile,
     profileDockerSetup: profileDockerSetup
 };
diff --git a/test/integration/cli-subcommands.test.js b/test/integration/cli-subcommands.test.js
index 3c83c37..5d83f06 100644
--- a/test/integration/cli-subcommands.test.js
+++ b/test/integration/cli-subcommands.test.js
@@ -24,6 +24,7 @@ var subs = [
     ['profile'],
     ['profile list', 'profile ls', 'profiles'],
     ['profile get'],
+    ['profile set-default'],
     ['profile set-current'],
     ['profile create'],
     ['profile edit'],
