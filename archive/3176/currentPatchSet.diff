From e8c90281c314f4c83f125ccb785ec7430d2389be Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Tue, 9 Jan 2018 03:03:57 +0000
Subject: [PATCH] MANTA-3542 zookeeper reports ephemeral nodes with previous
 owning sessions

---
 lib/register.js | 146 +++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 125 insertions(+), 21 deletions(-)

diff --git a/lib/register.js b/lib/register.js
index ca4582e..323466f 100644
--- a/lib/register.js
+++ b/lib/register.js
@@ -14,7 +14,9 @@ var path = require('path');
 var assert = require('assert-plus');
 var once = require('once');
 var vasync = require('vasync');
+var verror = require('verror');
 
+var VError = verror.VError;
 
 
 ///--- Helpers
@@ -190,44 +192,146 @@ function registerEntries(opts, cb) {
             var data = new Buffer(JSON.stringify(_obj), 'utf8');
 
             /*
-             * Manual testing shows that in cases where the zookeeper server
-             * process has been shut down long enough so that the session
-             * held by this client has expired, it's possible that once the
-             * server comes back up the ephemeral will still exist for a short
-             * time. Syncing the node makes sure that we are up to date on its
-             * latest state before trying to create it. We don't have to worry
-             * about this for service nodes, since they are persistent.
+             * Time to wait before again stating the ephemeral node we've
+             * tried to created but had found already exists. On each successive
+             * call, this value increases by a power of two up to 16 seconds.
              */
-            zk.sync(n, function (err) {
-                if (err) {
-                    _cb(err);
-                    return;
+            var INTERVAL_FLOOR = 1000;
+            var INTERVAL_CEIL = 16000;
+            var GROWTH_FACTOR = 2;
+
+            var statInterval = INTERVAL_FLOOR;
+            var timer;
+
+            /*
+             * The following functions are tied together in a small state
+             * machine that ensure that upon session creation, registrar does
+             * not allow the ephemeral node it intends to create to fall out of
+             * zookeeper:
+             *
+             *   createEphemeral ----(A)-----> clearTimerAndCallback
+             *    ^     |                                ^
+             *    |    (B)                               |
+             *  +-+     |                                |
+             *  |       v                                |
+             *  |   tryDelayedCheckNodeExists            |
+             *  |       |          ^                     |
+             * (F)     (C)         |                     |
+             *  |       |         (D)                    |
+             *  |       v          |                     |
+             *  +-- checkNodeExists ----------(E)--------+
+             *
+             *  (A) - Occurs when either there is a fatal creation error that
+             *  is not a'CONNECTION_LOSS' or a 'NO_NODE' error. This is the
+             *  expected usual case.
+             *
+             *  (B) - Occurs when either there is a 'CONNECTION_LOSS' while
+             *  trying to create the ephemeral node or the node is found to
+             *  already exist (error code NODE_EXISTS). The former case
+             *  indicates that cueball has moved the session to a new
+             *  connection, the latter indicates that there is a 'ghost' node
+             *  from a previous session stored in zookeeper.
+             *
+             *  (C) - Occurs at every GROWTH_FACTOR^N seconds starting with
+             *  N = 0 up to a configured ceiling (INTERVAL_CEILING) and then
+             *  stays at the ceiling. This is the exponential backoff mechanism
+             *  at play.
+             *
+             *  (D) - Occurs when checkNodeExists has found that a 'ghost'
+             *  ephemeral node from a previous session still exists in
+             *  zookeeper. This indicates that registrar must backoff and run
+             *  (C) again to check for the node.
+             *
+             *  (E) - Occurs when there is a fatal error stating the ephemeral
+             *  node that is neither a 'CONNECTION_LOSS' nor a 'NO_NODE'.
+             *
+             *  (F) - Occurs when checkNodeExists finds that the 'ghost'
+             *  ephemeral node from the previous zookeeper session has dropped
+             *  out due to session expiry.
+             */
+
+            /*
+             * Schedule a stat operation on the node in N seconds, where
+             * INTERVAL_FLOOR <= N < INTERVAL_CEIL.
+             */
+            function tryDelayedCheckNodeExists() {
+                if (statInterval >= INTERVAL_CEIL) {
+                    statInterval = INTERVAL_CEIL;
                 }
+                log.info('checking for existence of ephemeral node ' + n +
+                        ' in ' + statInterval + ' seconds.');
+                timer = setTimeout(checkNodeExists, statInterval);
+                statInterval *= GROWTH_FACTOR;
+            }
+
+            /*
+             * Check for the existence of the ephemeral node with the
+             * appropriate owning session. If one doesn't exist, or we've
+             * suffered a transient connection loss due to the node-zkstream
+             * session migration, try to create the node.
+             */
+            function checkNodeExists() {
+                zk.stat(n, function (err, stat) {
+                    if (err) {
+                        if (err.code === 'NO_NODE' ||
+                            err.code === 'CONNECTION_LOSS') {
+                            setImmediate(createEphemeral);
+                        } else {
+                            setImmediate(clearTimerAndCallback, new VError(err,
+                                    'check node "%s" exists', n));
+                        }
+                        return;
+                    }
+                    setImmediate(tryDelayedCheckNodeExists);
+                });
+            }
+
+            function createEphemeral() {
                 /*
-                 * It's possible that we're recovering an existing session
-                 * before it times out. In this case, the ephemeral nodes we'll
-                 * want to create already exist. Since this is likely to happen
-                 * over a flappy connection, simply log the error and move on.
+                 * It's possible that zookeeper will report nodes that were
+                 * owned by previous sessions even after said session has
+                 * expired. This presents a window during which it's possible
+                 * for the node to silently drop out of zookeeper. To prevent
+                 * this, we use an exponential backoff mechanism that checks
+                 * if the node exists, recreating it if it drops out.
                  */
                 zk.createWithEmptyParents(n, data, _opts, function (err) {
                     if (err) {
-                        if (err.code === 'NODE_EXISTS') {
+                        if (err.code === 'NODE_EXISTS' ||
+                            err.code === 'CONNECTION_LOSS') {
                             log.warn(err, 'register: ephemeral node ' + n +
-                                ' already exists');
-                            _cb();
+                                ' already exists. Starting delayed ' +
+                                'existence checks.');
+                            setImmediate(tryDelayedCheckNodeExists);
                             return;
                         }
-                        _cb(err);
+                        setImmediate(clearTimerAndCallback, new VError(err,
+                                'create node "%s"', n));
+
                     } else {
                         opts.registrar.ephemerals[n] = {
                             data: data,
                             flags: _opts.flags,
                             path: n
                         };
-                        _cb();
+                        setImmediate(clearTimerAndCallback);
                     }
                 });
-            });
+            }
+
+            /*
+             * Interpose the vasync callback with a callback that clears the
+             * stat-interval timer. This is only called when either there is a
+             * fatal error during creation, or the node was successfully
+             * created. In both cases, if we've set a timeout, we'll want it
+             * gone before proceeding.
+             */
+            function clearTimerAndCallback(err) {
+                clearTimeout(timer);
+                _cb(err);
+            }
+
+            createEphemeral();
         },
         inputs: opts.nodes
     }, function (err) {
-- 
2.21.0

