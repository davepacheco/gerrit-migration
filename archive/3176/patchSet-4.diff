From ace6aa8ab009224c0e31014c90d75571e54bb81e Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Tue, 9 Jan 2018 03:03:57 +0000
Subject: [PATCH] MANTA-3542 zookeeper reports ephemeral nodes with previous
 owning sessions

---
 lib/register.js | 97 +++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 77 insertions(+), 20 deletions(-)

diff --git a/lib/register.js b/lib/register.js
index ca4582e..ba812bb 100644
--- a/lib/register.js
+++ b/lib/register.js
@@ -190,44 +190,101 @@ function registerEntries(opts, cb) {
             var data = new Buffer(JSON.stringify(_obj), 'utf8');
 
             /*
-             * Manual testing shows that in cases where the zookeeper server
-             * process has been shut down long enough so that the session
-             * held by this client has expired, it's possible that once the
-             * server comes back up the ephemeral will still exist for a short
-             * time. Syncing the node makes sure that we are up to date on its
-             * latest state before trying to create it. We don't have to worry
-             * about this for service nodes, since they are persistent.
+             * Time to wait before again stating the ephemeral node we've
+             * tried to created but had found already exists. On each successive
+             * call, this value increases by a power of two up to 16 seconds.
              */
-            zk.sync(n, function (err) {
-                if (err) {
-                    _cb(err);
-                    return;
+            var INTERVAL_FLOOR = 1000;
+            var INTERVAL_CEIL = 16000;
+            var GROWTH_FACTOR = 2;
+
+            var statInterval = INTERVAL_FLOOR;
+            var timer;
+
+            /*
+             * Schedule a stat operation on the node in N seconds, where
+             * INTERVAL_FLOOR <= N < INTERVAL_CEIL.
+             */
+            function tryDelayedCheckNodeExists(callback) {
+                if (statInterval >= INTERVAL_CEIL) {
+                    statInterval = INTERVAL_FLOOR;
                 }
+                log.info('checking for existence of ephemeral node ' + n +
+                        ' in ' + statInterval + ' seconds.');
+                timer = setTimeout(checkNodeExists.bind(null, callback),
+                    statInterval);
+                statInterval *= GROWTH_FACTOR;
+            }
+
+            /*
+             * Check for the existence of the ephemeral node with the
+             * appropriate owning session. If one doesn't exist, or we've
+             * suffered a transient connection loss due to the zookeeper servers
+             * just starting up, create the node.
+             */
+            function checkNodeExists (callback) {
+                zk.stat(n, function (err, stat) {
+                    if (err && err.code !== 'CONNECTION_LOSS') {
+                        if (err.code === 'NO_NODE') {
+                            createEphemeral(callback);
+                        } else {
+                            callback(err);
+                        }
+                        return;
+                    }
+                    tryDelayedCheckNodeExists(callback);
+                });
+            }
+
+            function createEphemeral(callback) {
                 /*
-                 * It's possible that we're recovering an existing session
-                 * before it times out. In this case, the ephemeral nodes we'll
-                 * want to create already exist. Since this is likely to happen
-                 * over a flappy connection, simply log the error and move on.
+                 * It's possible that zookeeper will report nodes that were owned
+                 * by previous sessions even after said session has expired. This
+                 * presents a window during which it's possible for the node to
+                 * silently drop out of zookeeper. To prevent this, we use an
+                 * exponential backoff mechanism that checks if the node exists,
+                 * recreating it if it drops out.
                  */
                 zk.createWithEmptyParents(n, data, _opts, function (err) {
                     if (err) {
                         if (err.code === 'NODE_EXISTS') {
                             log.warn(err, 'register: ephemeral node ' + n +
-                                ' already exists');
-                            _cb();
+                                ' already exists. Starting delayed ' +
+                                'existence checks.');
+                            tryDelayedCheckNodeExists(callback);
+                            return;
+                        } else if (err.code === 'CONNECTION_LOSS') {
+                            log.warn(err, 'register: zookeeper connection ' +
+                                'loss while trying to create ephemeral node ' +
+                                n + '. Starting delayed existence checks.');
+                            tryDelayedCheckNodeExists(callback);
                             return;
                         }
-                        _cb(err);
+                        callback(err);
                     } else {
                         opts.registrar.ephemerals[n] = {
                             data: data,
                             flags: _opts.flags,
                             path: n
                         };
-                        _cb();
+                        callback();
                     }
                 });
-            });
+            }
+
+            /*
+             * Interpose the vasync callback with a callback that clears the
+             * stat-interval timer. This is only called when either there is a
+             * fatal error during creation, or the node was successfully
+             * created. In both cases, if we've set a timeout, we'll want it
+             * gone before proceeding.
+             */
+            var clearTimerAndCallback = function (err) {
+                clearTimeout(timer);
+                _cb(err);
+            }
+
+            createEphemeral(clearTimerAndCallback);
         },
         inputs: opts.nodes
     }, function (err) {
-- 
2.21.0

