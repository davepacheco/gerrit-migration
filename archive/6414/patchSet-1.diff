From c18454ce0b4ad37b18b7f70d894dbee0c21177fc Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Mon, 10 Jun 2019 15:08:40 -0700
Subject: [PATCH] TRITON-1729 sapi "invalid zone parameters" test failing since
 at least 2019-05

---
 package.json           |   2 +-
 test/instances.test.js |   6 +-
 test/mode.test.js      | 125 ++---------------------------------------
 3 files changed, 8 insertions(+), 125 deletions(-)

diff --git a/package.json b/package.json
index f3d7b06..d32ed23 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sapi",
   "description": "Triton Services and Configuration API",
-  "version": "2.1.1",
+  "version": "2.1.2",
   "author": "Joyent (joyent.com)",
   "license": "MPL-2.0",
   "private": true,
diff --git a/test/instances.test.js b/test/instances.test.js
index 3d90e3d..4f941be 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -783,8 +783,8 @@ test('invalid zone parameters', function (t) {
                 if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
                     t.equal(res.statusCode, 200);
                 } else {
-                    t.equal(res.statusCode, 500,
-                        sprintf('expected 500 status code from SAPI ' +
+                    t.equal(res.statusCode, 409,
+                        sprintf('expected 409 status code from SAPI ' +
                             'CreateInstance: got %s, instance uuid %s',
                             res.statusCode, inst.uuid));
                 }
diff --git a/test/mode.test.js b/test/mode.test.js
index f1a8d03..36a2cac 100644
--- a/test/mode.test.js
+++ b/test/mode.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -50,11 +50,8 @@ helper.before(function (cb) {
                 '/sapi/sapi_services'
             ];
 
-            async.forEach(dirs, function (dir, scb) {
-                // Remove any previous objects
-                rimraf(dir, function (err) {
-                    scb(err);
-                });
+            async.forEach(dirs, rimraf, function (err) {
+                subcb(err);
             });
         },
         function (subcb) {
@@ -161,120 +158,6 @@ test('in full mode', function (t) {
     });
 });
 
-// -- Test failed upgrade
-
-test('upgrade to full mode with bogus image_uuid should fail', function (t) {
-    var self = this;
-
-    var man_uuid = node_uuid.v4();
-    var app_uuid = node_uuid.v4();
-    var svc_uuid = node_uuid.v4();
-    var inst_uuid = node_uuid.v4();
-
-    async.waterfall([
-        function (cb) {
-            // Should start in proto mode
-            self.client.get(URI, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                t.equal(obj, 'proto');
-                cb();
-            });
-        },
-        function (cb) {
-            // Create an application, service, instance, and
-            // manifest.
-            common.createManifest.call(self, man_uuid,
-                function (err) {
-                cb(err);
-            });
-        },
-        function (cb) {
-            /*
-             * This UUID is a known bogus image, so the SAPI.setMode() call
-             * later will fail.
-             */
-            common.createApplication({
-                sapi: self.sapi,
-                uuid: app_uuid,
-                image_uuid: '0ee75f7e-b5d8-11e2-8c16-bb0d1acfb63d'
-            }, function (err) {
-                cb(err);
-            });
-        },
-        function (cb) {
-            common.createService.call(self, app_uuid, svc_uuid,
-                function (err) {
-                cb(err);
-            });
-        },
-        function (cb) {
-            common.createInstance.call(self, svc_uuid, inst_uuid,
-                function (err) {
-                cb(err);
-            });
-        },
-        function (cb) {
-            // Create an actual zone
-            var vmapiplus = helper.createVmapiPlusClient();
-
-            helper.consVmParams(function (err, params) {
-                params.uuid = inst_uuid;
-                vmapiplus.createVm(params, cb);
-            });
-        },
-        function (cb) {
-            // Attempt upgrade to full mode, which should fail
-            var uri_mode = URI + '?mode=full';
-
-            self.client.post(uri_mode,
-                function (err, req, res, obj) {
-                t.ok(err);
-                if (res) {
-                    t.equal(res.statusCode, 500);
-                } else {
-                    t.fail('res is null');
-                }
-                cb();
-            });
-        },
-        function (cb) {
-            // Should remain in proto mode
-            self.client.get(URI, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                t.equal(obj, 'proto');
-                cb();
-            });
-        },
-        function (cb) {
-            /*
-             * Even after the failed setMode() above, all the
-             * objects must remain available.
-             */
-            var uris = [
-                '/manifests/' + man_uuid,
-                '/applications/' + app_uuid,
-                '/services/' + svc_uuid,
-                '/instances/' + inst_uuid
-            ];
-
-            async.forEach(uris, function (uri, subcb) {
-                self.client.get(uri,
-                    function (err, req, res, obj) {
-                    t.ifError(err);
-                    t.ok(obj);
-                    t.equal(obj.uuid, path.basename(uri));
-                    subcb();
-                });
-            }, cb);
-        }
-    ], function (err) {
-        t.ifError(err);
-        t.end();
-    });
-});
-
 
 // -- Test upgrade proto -> full
 
@@ -329,7 +212,7 @@ test('upgrade to full mode', function (t) {
 
             helper.consVmParams(function (err, params) {
                 params.uuid = inst_uuid;
-                vmapiplus.createVm(params, cb);
+                vmapiplus.createVm(params, {}, cb);
             });
         },
         function (cb) {
-- 
2.21.0

