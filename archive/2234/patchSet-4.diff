commit 03bf6ee662b72e2a60c7dbbf0f219fbc352a3474 (refs/changes/34/2234/4)
Author: Sam Gwydir <sam.gwydir@joyent.com>
Date:   2017-08-07T20:40:42+00:00 (2 years, 2 months ago)
    
    OS-6239 Simplify SMAP relocations with krtld

diff --git a/usr/src/uts/common/krtld/kobj.c b/usr/src/uts/common/krtld/kobj.c
index 90303d496b..46eff9ece1 100644
--- a/usr/src/uts/common/krtld/kobj.c
+++ b/usr/src/uts/common/krtld/kobj.c
@@ -26,6 +26,9 @@
  * Copyright 2011 Bayard G. Bell <buffer.g.overflow@gmail.com>.
  * All rights reserved. Use is subject to license terms.
  */
+/*
+ * Copyright (c) 2017 Joyent, Inc.
+ */
 
 /*
  * Kernel's linker/loader
@@ -3032,8 +3035,18 @@ do_symbols(struct module *mp, Elf64_Addr bss_base)
 		if (sp->st_shndx == SHN_UNDEF) {
 			resolved = 0;
 
+			/*
+			 * Skip over sdt probes and smap calls,
+			 * they're relocated later.
+			 */
 			if (strncmp(name, sdt_prefix, strlen(sdt_prefix)) == 0)
 				continue;
+#if defined(__amd64)
+			if (strcmp(name, "smap_enable") == 0 ||
+			    strcmp(name, "smap_disable") == 0)
+				continue;
+#endif /* __amd64 */
+
 
 			/*
 			 * If it's not a weak reference and it's
diff --git a/usr/src/uts/common/os/modctl.c b/usr/src/uts/common/os/modctl.c
index 35162eb558..51df6cb240 100644
--- a/usr/src/uts/common/os/modctl.c
+++ b/usr/src/uts/common/os/modctl.c
@@ -21,6 +21,7 @@
 
 /*
  * Copyright (c) 1990, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017 Joyent, Inc.
  */
 
 /*
@@ -77,6 +78,8 @@
 #include <sys/strsubr.h>
 #include <sys/fs/sdev_impl.h>
 
+#include <sys/archsystm.h>
+
 static int		mod_circdep(struct modctl *);
 static int		modinfo(modid_t, struct modinfo *);
 
@@ -3470,15 +3473,24 @@ mod_load(struct modctl *mp, int usepath)
 
 		/*
 		 * Now that the module is loaded, we need to give DTrace
-		 * a chance to notify its providers.  This is done via
-		 * the dtrace_modload function pointer.
+		 * a chance to notify its providers. This is done via
+		 * the dtrace_modload function pointer. In addition, we
+		 * perform smap hotinlining on AMD64 based machines.
 		 */
 		if (strcmp(mp->mod_modname, "dtrace") != 0) {
 			struct modctl *dmp = mod_hold_by_name("dtrace");
 
-			if (dmp != NULL && dtrace_modload != NULL)
-				(*dtrace_modload)(mp);
+			if (dmp != NULL && dtrace_modload != NULL) {
+
+#if defined(__amd64)
+				kobj_reloc_hotinline(dmp->mod_mp,
+				    "smap_enable", SMAP_CLAC_INSTR);
+				kobj_reloc_hotinline(dmp->mod_mp,
+				    "smap_disable", SMAP_STAC_INSTR);
+#endif /* __amd64 */
 
+				(*dtrace_modload)(mp);
+			}
 			mod_release_mod(dmp);
 		}
 
diff --git a/usr/src/uts/common/sys/kobj.h b/usr/src/uts/common/sys/kobj.h
index 8537430ed0..24b8fc3e19 100644
--- a/usr/src/uts/common/sys/kobj.h
+++ b/usr/src/uts/common/sys/kobj.h
@@ -22,6 +22,9 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
+/*
+ * Copyright (c) 2017 Joyent, Inc.
+ */
 
 #ifndef _SYS_KOBJ_H
 #define	_SYS_KOBJ_H
@@ -47,6 +50,12 @@ struct module_list {
 	struct module *mp;
 };
 
+typedef struct hotinline_desc {
+	char			*symname;	/* symbol name */
+	unsigned long		instr_offset;	/* offset of call in text */
+	struct hotinline_desc	*hotinline_next;	/* next hotinline */
+} hotinline_desc_t;
+
 typedef unsigned short	symid_t;		/* symbol table index */
 typedef unsigned char	*reloc_dest_t;
 
@@ -99,6 +108,8 @@ struct module {
 	caddr_t textwin;
 	caddr_t textwin_base;
 
+	hotinline_desc_t *hi_calls;
+
 	sdt_probedesc_t *sdt_probes;
 	size_t sdt_nprobes;
 	char *sdt_tab;
@@ -187,6 +198,7 @@ extern int kobj_read_file(struct _buf *, char *, unsigned, unsigned);
 extern int kobj_get_filesize(struct _buf *, uint64_t *size);
 extern uintptr_t kobj_getelfsym(char *, void *, int *);
 extern void kobj_set_ctf(struct module *, caddr_t data, size_t size);
+extern void kobj_reloc_hotinline(struct module *, char *, uint32_t);
 
 extern int kobj_filbuf(struct _buf *);
 extern void kobj_sync(void);
diff --git a/usr/src/uts/i86pc/Makefile.rules b/usr/src/uts/i86pc/Makefile.rules
index a3bf823c69..2b8739dd31 100644
--- a/usr/src/uts/i86pc/Makefile.rules
+++ b/usr/src/uts/i86pc/Makefile.rules
@@ -22,6 +22,7 @@
 #
 # Copyright (c) 1992, 2010, Oracle and/or its affiliates. All rights reserved.
 # Copyright 2015 Igor Kozhukhov <ikozhukhov@gmail.com>
+# Copyright (c) 2017 Joyent, Inc.
 #
 
 #	This Makefile defines the build rules for the directory uts/i86pc
@@ -325,7 +326,8 @@ $(OBJS_DIR)/%.o:		$(SRC)/common/atomic/$(ATOMIC_SUBDIR)/%.s
 #
 
 $(OBJS_DIR)/dtracestubs.s:	$(UNIX_O) $(LIBS)
-	$(NM) -u $(UNIX_O) $(LIBS) | $(GREP) __dtrace_probe_ | $(SORT) | \
+	$(NM) -u $(UNIX_O) $(LIBS) | \
+	$(EGREP) '(__dtrace_probe_|smap_(disable|enable))' | $(SORT) | \
 	    $(UNIQ) | $(AWK) '{ \
 	    printf("\t.globl %s\n\t.type %s,@function\n%s:\n", \
 	    $$1, $$1, $$1); }' > $(OBJS_DIR)/dtracestubs.s
diff --git a/usr/src/uts/i86pc/os/startup.c b/usr/src/uts/i86pc/os/startup.c
index 16c683d993..2b246bf896 100644
--- a/usr/src/uts/i86pc/os/startup.c
+++ b/usr/src/uts/i86pc/os/startup.c
@@ -22,8 +22,8 @@
  * Copyright (c) 1993, 2010, Oracle and/or its affiliates. All rights reserved.
  * Copyright 2012 DEY Storage Systems, Inc.  All rights reserved.
  * Copyright 2013 Nexenta Systems, Inc. All rights reserved.
- * Copyright 2015 Joyent, Inc.
  * Copyright (c) 2015 by Delphix. All rights reserved.
+ * Copyright (c) 2017 Joyent, Inc.
  */
 /*
  * Copyright (c) 2010, Intel Corporation.
@@ -694,6 +694,7 @@ startup_smap(void)
 	uint32_t inst;
 	uint8_t *instp;
 	char sym[128];
+	struct modctl *modp;
 
 	extern int _smap_enable_patch_count;
 	extern int _smap_disable_patch_count;
@@ -727,8 +728,15 @@ startup_smap(void)
 		hot_patch_kernel_text((caddr_t)instp, inst, 4);
 	}
 
-	hot_patch_kernel_text((caddr_t)smap_enable, SMAP_CLAC_INSTR, 4);
-	hot_patch_kernel_text((caddr_t)smap_disable, SMAP_STAC_INSTR, 4);
+	/*
+	 * Relocate calls to smap_enable and smap_disable within unix module.
+	 * Relocations for dtrace are done later inside modctl.c.
+	 */
+	modp = mod_hold_by_name("unix");
+	kobj_reloc_hotinline(modp->mod_mp, "smap_enable", SMAP_CLAC_INSTR);
+	kobj_reloc_hotinline(modp->mod_mp, "smap_disable", SMAP_STAC_INSTR);
+	mod_release_mod(modp);
+
 	setcr4(getcr4() | CR4_SMAP);
 	smap_enable();
 }
diff --git a/usr/src/uts/intel/amd64/krtld/kobj_reloc.c b/usr/src/uts/intel/amd64/krtld/kobj_reloc.c
index 56c8087baa..c865cb4880 100644
--- a/usr/src/uts/intel/amd64/krtld/kobj_reloc.c
+++ b/usr/src/uts/intel/amd64/krtld/kobj_reloc.c
@@ -23,6 +23,9 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
+/*
+ * Copyright (c) 2017 Joyent, Inc.
+ */
 
 #pragma ident	"%Z%%M%	%I%	%E% SMI"
 
@@ -119,6 +122,54 @@ sdt_reloc_resolve(struct module *mp, char *symname, uint8_t *instr)
 	return (0);
 }
 
+/*
+ * We're relying on the fact that the call we're replacing is
+ * call (e8) plus 4 bytes of address, making a 5 byte instruction
+ */
+#define	NOP_INSTR	0x90
+#define	SMAP_NOPS	5
+
+/*
+ * Currently the only call replaced as a hot inline
+ * is smap_enable() and smap_disable(). If more are needed
+ * we should probably come up with an sdt probe like prefix
+ * and look for those instead of exact call names.
+ */
+static int
+smap_reloc_resolve(struct module *mp, char *symname, uint8_t *instr)
+{
+	uint_t i;
+	uint_t symlen;
+	uint8_t nop = NOP_INSTR;
+	hotinline_desc_t *hid;
+
+	if (strcmp(symname, "smap_enable") == 0 ||
+	    strcmp(symname, "smap_disable") == 0) {
+
+#ifdef	KOBJ_DEBUG
+		if (kobj_debug & D_RELOCATIONS) {
+			_kobj_printf(ops, "smap_reloc_resolve: %s relocating "
+					"enable/disable_smap\n", mp->filename);
+		}
+#endif
+
+		hid = kobj_alloc(sizeof (hotinline_desc_t), KM_WAIT);
+		symlen = strlen(symname) + 1;
+		hid->symname = kobj_alloc(symlen, KM_WAIT);
+		bcopy(symname, hid->symname, symlen);
+
+		hid->instr_offset = (uintptr_t)instr - 1;
+		hid->hotinline_next = mp->hi_calls;
+		mp->hi_calls = hid;
+
+		memset((uint8_t *)hid->instr_offset, NOP_INSTR, SMAP_NOPS);
+
+		return (0);
+	}
+
+	return (1);
+}
+
 int
 /* ARGSUSED2 */
 do_relocate(struct module *mp, char *reltbl, Word relshtype, int nreloc,
@@ -222,6 +273,11 @@ do_relocate(struct module *mp, char *reltbl, Word relshtype, int nreloc,
 				    symref->st_name, (uint8_t *)off) == 0)
 					continue;
 
+				if (symref->st_shndx == SHN_UNDEF &&
+				    smap_reloc_resolve(mp, mp->strings +
+				    symref->st_name, (uint8_t *)off) == 0)
+					continue;
+
 				if (symref->st_shndx == SHN_UNDEF &&
 				    tnf_reloc_resolve(mp->strings +
 				    symref->st_name, &symref->st_value,
@@ -343,3 +399,32 @@ bad:
 	rshp->sh_addr = 0;
 	return (-1);
 }
+
+/*
+ *  Inline function call stubs stored inside module struct.
+ *  Used to inline calls to smap_enable() and smap_disable() inside dtrace
+ *  Calls inside the "unix" module are relocated earlier inside startup.c
+ *  Currently b0-b3 are specified by inst, and the last nop cannot be changed
+ *
+ *  |------+-------+-------+-----+-----|
+ *  | b0   | b1    | b2    | b3  | b4  |
+ *  |------+-------+-------+-----+-----|
+ *  |             inst           | nop |
+ *  |------+-------+-------+-----+-----|
+ */
+void
+kobj_reloc_hotinline(struct module *mp, char *symname, uint32_t inst)
+{
+	uint8_t nop = NOP_INSTR;
+	hotinline_desc_t *hotinline = mp->hi_calls;
+
+	for (; hotinline != NULL; hotinline = hotinline->hotinline_next) {
+		if (strcmp(hotinline->symname, symname) == 0) {
+			/*
+			 *  We're relying on the fact that the compiler
+			 *  is emitting a call that is 5 bytes wide.
+			 */
+			bcopy(&inst, (uint8_t *)hotinline->instr_offset, 4);
+		}
+	}
+}
diff --git a/usr/src/uts/intel/ia32/krtld/kobj_reloc.c b/usr/src/uts/intel/ia32/krtld/kobj_reloc.c
index befd15853a..eccf4cf217 100644
--- a/usr/src/uts/intel/ia32/krtld/kobj_reloc.c
+++ b/usr/src/uts/intel/ia32/krtld/kobj_reloc.c
@@ -337,3 +337,13 @@ bad:
 	rshp->sh_addr = 0;
 	return (-1);
 }
+
+/*
+ *  Inline function call stubs stored inside module struct
+ *  Used to inline calls to smap_enable() and smap_disable() in amd64
+ *  Currently unused on ia32, and therefore left empty
+ */
+void
+kobj_reloc_hotinline(struct module *mp, char *symname, uint32_t inst)
+{
+}
diff --git a/usr/src/uts/intel/ia32/ml/copy.s b/usr/src/uts/intel/ia32/ml/copy.s
index 7593de374e..95b7cb3028 100644
--- a/usr/src/uts/intel/ia32/ml/copy.s
+++ b/usr/src/uts/intel/ia32/ml/copy.s
@@ -36,7 +36,7 @@
 /*         All Rights Reserved						*/
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright (c) 2017 Joyent, Inc.
  */
 
 #include <sys/errno.h>
@@ -3138,47 +3138,6 @@ ucopystr(const char *ufrom, char *uto, size_t umaxlength, size_t *lencopied)
 
 #endif	/* __lint */
 
-/*
- * These functions are used for SMAP, supervisor mode access protection. They
- * are hotpatched to become real instructions when the system starts up which is
- * done in mlsetup() as a part of enabling the other CR4 related features.
- *
- * Generally speaking, smap_disable() is a stac instruction and smap_enable is a
- * clac instruction. It's safe to call these any number of times, and in fact,
- * out of paranoia, the kernel will likely call it at several points.
- */
-
-#if defined(__lint)
-
-void
-smap_enable(void)
-{}
-
-void
-smap_disable(void)
-{}
-
-#else
-
-#if defined (__amd64) || defined(__i386)
-	ENTRY(smap_disable)
-	nop
-	nop
-	nop
-	ret
-	SET_SIZE(smap_disable)
-
-	ENTRY(smap_enable)
-	nop
-	nop
-	nop
-	ret
-	SET_SIZE(smap_enable)
-
-#endif /* __amd64 || __i386 */
-
-#endif /* __lint */
-
 #ifndef __lint
 
 .data
diff --git a/usr/src/uts/intel/sys/archsystm.h b/usr/src/uts/intel/sys/archsystm.h
index 9cfd83a334..66f679b843 100644
--- a/usr/src/uts/intel/sys/archsystm.h
+++ b/usr/src/uts/intel/sys/archsystm.h
@@ -184,13 +184,13 @@ extern void fakesoftint(void);
 extern void *plat_traceback(void *);
 
 /*
- * The following two macros are the four byte instruction sequence of stac, ret
- * and clac, ret. These are used in startup_smap() as a part of properly setting
+ * The following two macros are the four byte instruction sequence of stac, nop
+ * and clac, nop. These are used in startup_smap() as a part of properly setting
  * up the valid instructions. For more information on SMAP, see
  * uts/intel/ia32/ml/copy.s.
  */
-#define	SMAP_CLAC_INSTR	0xc3ca010f
-#define	SMAP_STAC_INSTR	0xc3cb010f
+#define	SMAP_CLAC_INSTR	0x90ca010f
+#define	SMAP_STAC_INSTR	0x90cb010f
 extern void smap_disable(void);
 extern void smap_enable(void);
 
diff --git a/usr/src/uts/sparc/krtld/kobj_reloc.c b/usr/src/uts/sparc/krtld/kobj_reloc.c
index 05e207810a..c8e9db63c0 100644
--- a/usr/src/uts/sparc/krtld/kobj_reloc.c
+++ b/usr/src/uts/sparc/krtld/kobj_reloc.c
@@ -23,6 +23,9 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  */
+/*
+ * Copyright (c) 2017 Joyent, Inc.
+ */
 
 #pragma ident	"%Z%%M%	%I%	%E% SMI"
 
@@ -43,6 +46,7 @@
 #include <sys/tnf.h>
 #include <sys/tnf_probe.h>
 #include <sys/sdt.h>
+#include <sys/hotinline.h>
 
 #include "krtld/reloc.h"
 
@@ -399,3 +403,14 @@ bad:
 	rshp->sh_addr = 0;
 	return (-1);
 }
+
+
+/*
+ *  Inline function call stubs stored inside module struct
+ *  Used to inline calls to smap_enable() and smap_disable() in amd64
+ *  Currently unused on SPARC, and therefore left empty
+ */
+void
+kobj_reloc_hotinline(struct module *mp, char *symname, uint32_t inst)
+{
+}
