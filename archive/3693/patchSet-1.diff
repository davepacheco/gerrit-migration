From 56d1ba5fe2086d18c1e64da189842603dada01b1 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 19 Mar 2018 22:30:37 -0700
Subject: [PATCH] TRITON-178 Image creation support for bhyve VM

---
 src/img/CHANGES.md    |  3 +++
 src/img/lib/imgadm.js | 34 +++++++++++++++++++++++++++++++---
 src/img/package.json  |  2 +-
 3 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/src/img/CHANGES.md b/src/img/CHANGES.md
index 54fbbc3d..5841b182 100644
--- a/src/img/CHANGES.md
+++ b/src/img/CHANGES.md
@@ -5,6 +5,9 @@ Known issues:
 - Docker image imports are experimental. Docker image import also only supports
   Docker Registry v2.
 
+## 3.9.0
+
+- TRITON-178 add support for image creation for bhyve VMs.
 
 ## 3.8.0
 
diff --git a/src/img/lib/imgadm.js b/src/img/lib/imgadm.js
index ee81557d..db2153fd 100644
--- a/src/img/lib/imgadm.js
+++ b/src/img/lib/imgadm.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * * *
  * The main imgadm functionality. The CLI is a light wrapper around this tool.
@@ -3310,6 +3310,7 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
     var maxOriginDepth = options.maxOriginDepth;
 
     var vmInfo;
+    var snapname = '@imgadm-create-pre-prepare';
     var sysinfo;
     var vmZfsFilesystemName;
     var vmZfsSnapnames;
@@ -3318,6 +3319,7 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
     var imageInfo = {};
     var finalSnapshot;
     var toCleanup = {};
+
     async.waterfall([
         function validateVm(next) {
             common.vmGet(vmUuid, {log: log}, function (err, vm) {
@@ -3337,7 +3339,7 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
         },
         function getVmInfo(next) {
             var opts;
-            if (vmInfo.brand === 'kvm' || vmInfo.Brand === 'bhyve') {
+            if (vmInfo.brand === 'kvm' || vmInfo.brand === 'bhyve') {
                 if (vmInfo.disks && vmInfo.disks[0]) {
                     var disk = vmInfo.disks[0];
                     vmZfsFilesystemName = disk.zfs_filesystem;
@@ -3476,6 +3478,19 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
                 log.debug({min_platform: m.requirements.min_platform},
                     'set smartos image min_platform to current');
             }
+            if (vmInfo.brand === 'bhyve' && !(options.manifest.requirements
+                    && options.manifest.requirements.min_platform))
+            {
+                // Unless an explicit brand is provided (possibly empty)
+                // the brand for a bhyve image should be bhyve since
+                // bhyve-specific changes may have been made and we can't
+                // guarantee it's compatible with kvm.
+                if (!m.requirements)
+                    m.requirements = {};
+                m.requirements.brand = 'bhyve';
+                log.debug({brand: m.requirements.brand},
+                    'set bhyve image requirements.brand');
+            }
             if (incremental) {
                 if (!originInfo) {
                     next(new errors.VmHasNoOriginError(vmUuid));
@@ -3560,7 +3575,6 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
                 }
             }
 
-            var snapname = '@imgadm-create-pre-prepare';
             logCb(format('Snapshotting VM "%s" to %s', vmUuid, snapname));
             toCleanup.autoprepSnapshots = [];
             async.eachSeries(
@@ -4017,6 +4031,20 @@ IMGADM.prototype.createImage = function createImage(options, callback) {
                 async.eachSeries(
                     toCleanup.autoprepSnapshots,
                     function destroyOne(snap, nextSnapshot) {
+                        var re = new RegExp('/disk[0-9]*' + snapname + '$');
+
+                        if (vmInfo.brand === 'bhyve' && snap.match(re)) {
+                            // For bhyve brand, the disk snapshots will be gone
+                            // when the root snapshot is destroyed (because of
+                            // the -r) so, we only need to remove the root
+                            // snapshot here and skip diskX snapshots.
+                            self.log.info({
+                                snapname: snap
+                            }, 'skipping deletion of bhyve disk snapshot');
+                            nextSnapshot();
+                            return;
+                        }
+
                         zfsDestroy(snap, self.log, nextSnapshot);
                     },
                     next);
diff --git a/src/img/package.json b/src/img/package.json
index 171c2cd9..84e2d61f 100644
--- a/src/img/package.json
+++ b/src/img/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgadm",
   "description": "Manage SmartOS virtual machine images.",
-  "version": "3.8.0",
+  "version": "3.9.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

