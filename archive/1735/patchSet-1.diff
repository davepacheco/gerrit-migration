From 87e2cb6ad9208032d540224cf084bf187e8ac44d Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Mon, 3 Apr 2017 13:39:53 -0700
Subject: [PATCH] TOOLS-1737 jenkins test-system is failing: "custom-image"
 tests

---
 runtests                  |   7 +-
 test/custom-image.test.js | 161 ------------------------
 test/mk-custom-image      | 251 --------------------------------------
 test/try-custom-image     | 211 --------------------------------
 4 files changed, 1 insertion(+), 629 deletions(-)
 delete mode 100644 test/custom-image.test.js
 delete mode 100755 test/mk-custom-image
 delete mode 100755 test/try-custom-image

diff --git a/runtests b/runtests
index 7e840df..d08daa6 100755
--- a/runtests
+++ b/runtests
@@ -98,11 +98,6 @@ mkdir -p $OUTPUT_DIR
 echo ""
 echo "# Run sdc-system-tests."
 test_files=$(ls -1 test/*.test.js)
-imgapi_has_manta="$(sdc-imgapi /state | json -H -c '~this.storageTypes.indexOf("manta")')"
-if [[ -z "$imgapi_has_manta" ]]; then
-    echo "*WARNING: IMGAPI isn't configured with a Manta, skipping 'custom-image' tests.*"
-    test_files=$(echo "$test_files" | grep -v "custom-image.test.js" | grep -v "incremental-image.test.js" || true)
-fi
 if [[ -n "$opt_test_pattern" ]]; then
     test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
     echo "# Running filtered set of test files: $test_files"
@@ -122,5 +117,5 @@ echo "# Run sdc-designation tests."
 echo ""
 echo "# Run node-sdc-clients tests."
 PATH=$TOP/build/node/bin:$PATH ./node_modules/sdc-clients/test/runtests \
-    -f "$opt_test_pattern" -r $opt_reporter \
+    -f "$opt_test_pattern" \
     | tee $OUTPUT_DIR/node-sdc-clients.tap
diff --git a/test/custom-image.test.js b/test/custom-image.test.js
deleted file mode 100644
index 35f0885..0000000
--- a/test/custom-image.test.js
+++ /dev/null
@@ -1,161 +0,0 @@
-#!/usr/bin/node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * Test creation of an incremental custom image.
- */
-
-var DEBUG = true;
-var debug = console.log;
-if (!DEBUG) {
-    debug = function () {};
-}
-
-var exec = require('child_process').exec;
-var fs = require('fs');
-var format = require('util').format;
-
-var async = require('async');
-
-// node-tap API
-if (require.cache[__dirname + '/helper.js'])
-    delete require.cache[__dirname + '/helper.js'];
-var helper = require('./helper.js');
-var after = helper.after;
-var before = helper.before;
-var test = helper.test;
-
-var data = {
-    name: 'incremental-image',
-    version: '1.0.0'
-};
-
-var base_uuid = 'f669428c-a939-11e2-a485-b790efc0f0c1';
-var base_kvm_uuid = '30e9e4c8-bbf2-11e2-ac3b-3b598ee13393';
-var restricted_package = '92e2b20a-0c37-11e3-9605-63a778146273';
-var kvm_restricted_package = 'a3501ccc-0c37-11e3-965d-ef7e825515c9';
-var six5server = '44454c4c-3700-104e-8033-cac04f475131';
-var old7server = '44454c4c-3700-104d-8032-cac04f475131';
-
-var motd = 'booga booga';
-
-test('custom image (base 13.1.0) on 6.5 CN', function (t) {
-    var cmd1 = format('%s/mk-custom-image %s "%s" \'%s\' %s',
-        __dirname, base_uuid, motd, JSON.stringify(data), restricted_package);
-    var options = {
-        //maxBuffer: 2*1024*1024,  // suggested if TRACE is on
-        env: {
-            //'TRACE': '1'
-        }
-    };
-    exec(cmd1, options, function (err1, stdout1, stderr1) {
-        t.ifError(err1, format('error running "%s":\n'
-            + '  err: %s\n'
-            + '  stdout: %s\n'
-            + '  stderr: %s', cmd1, err1, stdout1, stderr1));
-        if (err1) {
-            return t.end();
-        }
-        var customImageUuid = stdout1.trim().split(/\n/g).slice(-1);
-        var cmd2 = format('%s/try-custom-image %s "%s" %s',
-            __dirname, customImageUuid, motd, six5server);
-        exec(cmd2, function (err2, stdout2, stderr2) {
-            t.ifError(err2, format('error running "%s":\n'
-                + '  err: %s\n'
-                + '  stdout: %s\n'
-                + '  stderr: %s', cmd2, err2, stdout2, stderr2));
-            var cmd3 = '/opt/smartdc/bin/sdc-imgadm delete ' + customImageUuid;
-            exec(cmd3, function (err3, stdout3, stderr3) {
-                t.ifError(err3, format('error running "%s":\n'
-                        + '  err: %s\n'
-                        + '  stdout: %s\n'
-                        + '  stderr: %s', cmd3, err3, stdout3, stderr3));
-                    t.end();
-            });
-        });
-    });
-});
-
-test('custom image (base 13.1.0) on latest 7.0 CN with CloudAPI & DAPI',
-        function (t) {
-    var cmd1 = format('%s/mk-custom-image %s "%s" \'%s\' %s',
-        __dirname, base_uuid, motd, JSON.stringify(data), restricted_package);
-    var options = {
-        //maxBuffer: 2*1024*1024,  // suggested if TRACE is on
-        env: {
-            //'TRACE': '1'
-        }
-    };
-    exec(cmd1, options, function (err1, stdout1, stderr1) {
-        t.ifError(err1, format('error running "%s":\n'
-            + '  err: %s\n'
-            + '  stdout: %s\n'
-            + '  stderr: %s', cmd1, err1, stdout1, stderr1));
-        if (err1) {
-            return t.end();
-        }
-        var customImageUuid = stdout1.trim().split(/\n/g).slice(-1);
-        var cmd2 = format('%s/try-custom-image %s "%s"',
-            __dirname, customImageUuid, motd);
-        exec(cmd2, function (err2, stdout2, stderr2) {
-            t.ifError(err2, format('error running "%s":\n'
-                + '  err: %s\n'
-                + '  stdout: %s\n'
-                + '  stderr: %s', cmd2, err2, stdout2, stderr2));
-            var cmd3 = '/opt/smartdc/bin/sdc-imgadm delete ' + customImageUuid;
-            exec(cmd3, function (err3, stdout3, stderr3) {
-                t.ifError(err3, format('error running "%s":\n'
-                        + '  err: %s\n'
-                        + '  stdout: %s\n'
-                        + '  stderr: %s', cmd3, err3, stdout3, stderr3));
-                    t.end();
-            });
-        });
-    });
-});
-
-test('custom KVM image (base CentOS6)', function (t) {
-    var cmd1 = format('%s/mk-custom-image %s "%s" \'%s\' %s',
-        __dirname, base_kvm_uuid, motd, JSON.stringify(data),
-        kvm_restricted_package);
-    var options = {
-        //maxBuffer: 2*1024*1024,  // suggested if TRACE is on
-        env: {
-            //'TRACE': '1'
-        }
-    };
-    exec(cmd1, options, function (err1, stdout1, stderr1) {
-        t.ifError(err1, format('error running "%s":\n'
-            + '  err: %s\n'
-            + '  stdout: %s\n'
-            + '  stderr: %s', cmd1, err1, stdout1, stderr1));
-        if (err1) {
-            return t.end();
-        }
-        var customImageUuid = stdout1.trim().split(/\n/g).slice(-1);
-        var cmd2 = format('%s/try-custom-image %s "%s"',
-            __dirname, customImageUuid, motd);
-        exec(cmd2, function (err2, stdout2, stderr2) {
-            t.ifError(err2, format('error running "%s":\n'
-                + '  err: %s\n'
-                + '  stdout: %s\n'
-                + '  stderr: %s', cmd2, err2, stdout2, stderr2));
-            var cmd3 = '/opt/smartdc/bin/sdc-imgadm delete ' + customImageUuid;
-            exec(cmd3, function (err3, stdout3, stderr3) {
-                t.ifError(err3, format('error running "%s":\n'
-                        + '  err: %s\n'
-                        + '  stdout: %s\n'
-                        + '  stderr: %s', cmd3, err3, stdout3, stderr3));
-                    t.end();
-            });
-        });
-    });
-});
diff --git a/test/mk-custom-image b/test/mk-custom-image
deleted file mode 100755
index a3c5205..0000000
--- a/test/mk-custom-image
+++ /dev/null
@@ -1,251 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Make a custom image via CloudAPI, for testing.
-#
-# Usage:
-#   ./mk-custom-image <base-image-uuid> <motd> <manifest-json>
-#
-# Where 'motd' is the string to put in /etc/motd (the sole customization).
-#
-# Example:
-#   ./mk-custom-image f669428c-a939-11e2-a485-b790efc0f0c1 \
-#       'blah blah' \
-#       '{"name":"foo","version":"1.0.0"}'
-#
-# This will:
-# - sdc-imgadm import the base image, if necessary (from images.joyent.com)
-# - CreateMachine
-# - ssh in, customize it (just set /etc/motd), sm-prepare-image
-# - CreateImageFromMachine
-# - "return" the create image uuid
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-export PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin:/opt/smartdc/agents/bin
-
-is_kvm=false
-
-#---- support stuff
-
-function fatal {
-    echo "$0: fatal error: $*"
-    exit 1
-}
-
-function cleanup {
-    true
-}
-
-function errexit {
-    cleanup
-    [[ $1 -ne 0 ]] || exit 0
-    fatal "error exit status $1"
-}
-
-function install_image {
-    local uuid=$1
-    sdc-imgadm get $uuid >/dev/null 2>/dev/null && return
-    echo "Installing image $uuid from images.joyent.com"
-    sdc-imgadm import $uuid -S https://images.joyent.com --skip-owner-check
-}
-
-function delete_proto_machine {
-    local proto_uuid=$(sdc sdc-cloudapi /my/machines \
-        | json -H -c "this.name=='proto'" 0.id)
-    if [[ -n "$proto_uuid" ]]; then
-        echo "Delete existing proto zone (uuid $proto_uuid)"
-        echo '```'
-        sdc-vmapi /vms/$proto_uuid -X DELETE | sdc sdc-waitforjob
-        echo '```'
-    fi
-}
-
-function create_proto_machine {
-    local package_uuid=$(sdc sdc-cloudapi /my/packages \
-        | json -H -c 'this.memory === 256' 0.id)
-    create_proto_machine_with_package $@ "$package_uuid"
-}
-
-function create_proto_machine_with_package {
-    proto_uuid=
-    local image_uuid=$1
-    local package_uuid=$2
-    echo "Create proto machine from image $image_uuid"
-    local network_uuid=$(sdc sdc-cloudapi /my/networks | json -H 0.id)
-
-    local response=$(cat <<EOM | sdc sdc-cloudapi /my/machines -X POST -d@-
-{
-    "name": "proto",
-    "package": "$package_uuid",
-    "image": "$image_uuid",
-    "networks": ["$network_uuid"]
-}
-EOM
-)
-    proto_uuid=$(echo "$response" | json -H id)
-    [[ -n "$proto_uuid" ]] || fatal "unexpected CreateMachine response: $response"
-
-    # Wait for it to provision.
-    local proto_state
-    for i in {1..180}; do
-        sleep 2
-        echo -n '.'
-        proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
-        if [[ "$proto_state" != "provisioning" ]]; then
-            echo ""
-            break
-        fi
-    done
-    proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
-    if [[ $proto_state == "running" ]]; then
-        echo "Proto machine $proto_uuid provisioned"
-    else
-        echo ""
-        fatal "Proto machine $proto_uuid provision failed or timed out: $proto_state"
-    fi
-}
-
-
-function customize_and_prepare_proto_machine {
-    local proto_uuid=$1
-    local motd="$2"
-    echo "Customize and prep proto machine with '$motd' motd"
-    local proto_ip=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H ips.0)
-    if [[ $is_kvm == true ]]; then
-        set +o errexit
-        for i in {1..180}; do
-            sleep 2
-            echo -n '.'
-            sdc ssh -T -q -i /root/.ssh/sdc.id_rsa \
-                -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
-                $proto_ip \
-                "echo \"$2\" >/etc/motd; /usr/bin/yes | /lib/smartdc/prepare-image; halt" && break
-        done
-        set -o errexit
-        sdc sdc-cloudapi /my/machines/$proto_uuid?action=stop -X POST </dev/null
-    else
-        sdc ssh -T -q -i /root/.ssh/sdc.id_rsa \
-            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
-            $proto_ip \
-            "echo \"$2\" >/etc/motd; sm-prepare-image -y"
-    fi
-    # Wait for machine to stop.
-    local proto_state
-    for i in {1..180}; do
-        sleep 2
-        echo -n '.'
-        proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
-        if [[ "$proto_state" == "stopped" ]]; then
-            echo ""
-            break
-        fi
-    done
-    proto_state=$(sdc sdc-cloudapi /my/machines/$proto_uuid | json -H state)
-    if [[ $proto_state == "stopped" ]]; then
-        echo "Proto machine $proto_uuid customized and stopped"
-    else
-        echo ""
-        fatal "Proto machine $proto_uuid failed to stop: $proto_state"
-    fi
-}
-
-function create_image {
-    custom_image_uuid=
-    local proto_uuid="$1"
-    local manifest_json="$2"
-
-    echo "Create custom image from VM $proto_uuid"
-    local data=$(echo "$manifest_json" | json -e "this.machine = '$proto_uuid'")
-    local response=$(echo "$data" | sdc sdc-cloudapi /my/images -X POST -d@-)
-    #TODO: expect a 201
-    echo '```'
-    echo "$response"
-    echo '```'
-    custom_image_uuid=$(echo "$response" | json -H id)
-    if [[ -z "$custom_image_uuid" ]]; then
-        fatal "error getting custom image uuid from CreateImageFromMachine res"
-    fi
-
-    # Wait for image to be published.
-    # Bad *current* limitation: a 404 on /my/images/UUID means either "still
-    # creating" or "creation failed". Can't distinguish right now.
-    local image_published_at
-    for i in {1..180}; do
-        sleep 2
-        echo -n '.'
-        image_published_at=$(sdc sdc-cloudapi /my/images/$custom_image_uuid \
-            | json -H published_at)
-        if [[ -n "$image_published_at" ]]; then
-            echo ""
-            break
-        fi
-    done
-    image_published_at=$(sdc sdc-cloudapi /my/images/$custom_image_uuid \
-        | json -H published_at)
-    if [[ -n "$image_published_at" ]]; then
-        echo "Custom image $custom_image_uuid published"
-    else
-        echo ""
-        fatal "Custom image $custom_image_uuid failed to be published"
-    fi
-}
-
-
-
-#---- mainline
-
-trap 'errexit $?' EXIT
-START=$(date +%s)
-
-BASE_IMAGE_UUID=$1
-shift
-MOTD=$1
-shift
-MANIFEST_JSON=$1
-shift
-PACKAGE_UUID=$1
-
-[[ -z "$BASE_IMAGE_UUID" ]] && fatal "no <base-image-uuid> given"
-[[ -z "$MOTD" ]] && fatal "no <motd> given"
-[[ -z "$MANIFEST_JSON" ]] && fatal "no <manifest-json> given"
-
-echo "Make custom image from image $BASE_IMAGE_UUID"
-
-install_image $BASE_IMAGE_UUID
-
-if [[ $(sdc-imgadm get $BASE_IMAGE_UUID 2>/dev/null | json os) != "smartos" ]]; then
-    is_kvm=true
-fi
-
-delete_proto_machine
-if [[ -z "$PACKAGE_UUID" ]]; then
-    create_proto_machine $BASE_IMAGE_UUID  # sets 'proto_uuid'
-else
-    create_proto_machine_with_package $BASE_IMAGE_UUID  $PACKAGE_UUID # sets 'proto_uuid'
-fi
-customize_and_prepare_proto_machine $proto_uuid "$MOTD"
-create_image $proto_uuid "$MANIFEST_JSON"  # sets 'custom_image_uuid'
-delete_proto_machine
-
-
-END=$(date +%s)
-echo "$0 finished in $(($END - $START)) seconds"
-
-# "Return" the UUID of the created custom image.
-echo "$custom_image_uuid"
diff --git a/test/try-custom-image b/test/try-custom-image
deleted file mode 100755
index b13cc47..0000000
--- a/test/try-custom-image
+++ /dev/null
@@ -1,211 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Try/test out a custom virtual image via CloudAPI.
-#
-# Usage:
-#   ./try-custom-image <custom-image-uuid> <motd>
-#
-# where <motd> is a /etc/motd of the day to verify in the created machine.
-#
-# This will:
-# - CreateMachine with that image
-# - SSH in a check <motd>
-# - Delete the machine
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-export PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin:/opt/smartdc/agents/bin
-
-is_kvm=false
-
-#---- support stuff
-
-function fatal {
-    echo "$0: fatal error: $*"
-    exit 1
-}
-
-function errexit {
-    [[ $1 -ne 0 ]] || exit 0
-    fatal "error exit status $1"
-}
-
-function delete_test_machine {
-    local vm_uuid=$(sdc sdc-cloudapi /my/machines \
-        | json -H -c "this.name=='test-custom-image'" 0.id)
-    if [[ -n "$vm_uuid" ]]; then
-        echo "Delete existing test-custom-image zone (uuid $vm_uuid)"
-        echo '```'
-        sdc-vmapi /vms/$vm_uuid -X DELETE | sdc sdc-waitforjob
-        echo '```'
-    fi
-}
-
-function create_test_machine_on_server {
-    vm_uuid=
-    local image_uuid=$1
-    local server=$2
-    echo "Create test-custom-image machine from image $image_uuid on server $server"
-    local brand="joyent"
-    if [[ $is_kvm == true ]]; then
-        brand="kvm"
-    fi
-    local network_uuid=$(sdc sdc-cloudapi /my/networks | json -H 0.id)
-
-    local response=$(cat <<EOM | sdc sdc-vmapi /vms -X POST -d@- | json -H -a job_uuid vm_uuid
-{
-"alias": "test-custom-image",
-"owner_uuid": "$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)",
-"brand": "$brand",
-"ram": 256,
-"networks": [{"uuid": "$network_uuid"}],
-"server_uuid": "$server",
-"image_uuid": "$image_uuid"
-}
-EOM
-)
-    local job_uuid=$(echo $response | cut -d ' ' -f1)
-    local vm_uuid=$(echo $response | cut -d ' ' -f2)
-    sdc sdc-waitforjob $job_uuid < /dev/null
-
-    [[ -n "$vm_uuid" ]] || fatal "unexpected CreateMachine response: $response"
-    sdc sdc-waitforjob $job_uuid
-
-    # Wait for it to provision.
-    local vm_state
-    while true; do
-        sleep 2
-        echo -n '.'
-        vm_state=$(sdc sdc-cloudapi /my/machines | json -H -c 'this.name == "test-custom-image"' 0.state)
-        if [[ "$vm_state" != "provisioning" ]]; then
-            echo ""
-            break
-        fi
-    done
-    vm_state=$(sdc sdc-cloudapi /my/machines | json -H -c 'this.name == "test-custom-image"' 0.state)
-    if [[ "$vm_state" == "running" ]]; then
-        echo "Test machine $vm_uuid provisioned"
-    else
-        echo ""
-        fatal "Test machine $vm_uuid provision failed or timed out: $vm_state"
-    fi
-
-}
-
-function create_test_machine {
-    vm_uuid=
-    local image_uuid=$1
-    echo "Create test-custom-image machine from image $image_uuid"
-    local package_uuid=$(sdc sdc-cloudapi /my/packages \
-        | json -H -c 'this.memory === 256' 0.id)
-    local network_uuid=$(sdc sdc-cloudapi /my/networks | json -H 0.id)
-
-    local response=$(cat <<EOM | sdc sdc-cloudapi /my/machines -X POST -d@-
-{
-    "name": "test-custom-image",
-    "package": "$package_uuid",
-    "image": "$image_uuid",
-    "networks": ["$network_uuid"]
-}
-EOM
-)
-    vm_uuid=$(echo "$response" | json -H id)
-    [[ -n "$vm_uuid" ]] || fatal "unexpected CreateMachine response: $response"
-
-    # Wait for it to provision.
-    local vm_state
-    while true; do
-        sleep 2
-        echo -n '.'
-        vm_state=$(sdc sdc-cloudapi /my/machines/$vm_uuid | json -H state)
-        if [[ "$vm_state" != "provisioning" ]]; then
-            echo ""
-            break
-        fi
-    done
-    vm_state=$(sdc sdc-cloudapi /my/machines/$vm_uuid | json -H state)
-    if [[ $vm_state == "running" ]]; then
-        echo "Test machine $vm_uuid provisioned"
-    else
-        echo ""
-        fatal "Test machine $vm_uuid provision failed or timed out: $vm_state"
-    fi
-}
-
-function verify_motd
-{
-    local vm_uuid=$1
-    local motd="$2"
-
-    echo "Verify test vm $vm_uuid has expected motd"
-    local vm_ip=$(sdc sdc-cloudapi /my/machines/$vm_uuid | json -H ips.0)
-    if [[ $is_kvm == true ]]; then
-        set +o errexit
-        for i in {1..180}; do
-            sleep 5
-            local actual_motd=$(sdc ssh -T -q -i /root/.ssh/sdc.id_rsa \
-            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
-            $vm_ip \
-            "cat /etc/motd") && break
-        done
-        set -o errexit
-    else
-        local actual_motd=$(sdc ssh -T -q -i /root/.ssh/sdc.id_rsa \
-            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
-            $vm_ip \
-            "cat /etc/motd") && break
-    fi
-    echo "Expected motd: $motd"
-    echo "  Actual motd: $actual_motd"
-    if [[ "$motd" != "$actual_motd" ]]; then
-        fatal "Unexpected motd in test vm $vm_uuid"
-    fi
-}
-
-
-
-#---- mainline
-
-trap 'errexit $?' EXIT
-START=$(date +%s)
-
-CUSTOM_IMAGE_UUID=$1
-MOTD="$2"
-SERVER="$3"
-[[ -z "$CUSTOM_IMAGE_UUID" ]] && fatal "no CUSTOM_IMAGE_UUID given"
-[[ -z "$MOTD" ]] && fatal "no MOTD given"
-
-echo "Try out custom image $CUSTOM_IMAGE_UUID"
-
-delete_test_machine
-
-if [[ $(sdc-imgadm get $CUSTOM_IMAGE_UUID 2>/dev/null | json os) != "smartos" ]]; then
-    is_kvm=true
-fi
-
-if [[ -z "$SERVER" ]]; then
-    create_test_machine $CUSTOM_IMAGE_UUID  # sets 'vm_uuid'
-else
-    create_test_machine_on_server $CUSTOM_IMAGE_UUID $SERVER
-fi
-verify_motd $vm_uuid "$MOTD"
-delete_test_machine
-
-END=$(date +%s)
-echo "$0 finished in $(($END - $START)) seconds"
-- 
2.21.0

