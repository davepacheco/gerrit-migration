From a3b4830ea64108009aa131a45803c9488d25f073 Mon Sep 17 00:00:00 2001
From: Jordan Paige Hendricks <jordan.hendricks@joyent.com>
Date: Wed, 12 Oct 2016 00:17:43 +0000
Subject: [PATCH] MANTA-2716 muskie behaves poorly when mako is extremely slow
 MANTA-2737 muskie returned 500 on GET when one CN was down Reviewed by:
 Approved by:

---
 lib/shark_client.js | 32 +++++++++++++++++++++++++-------
 1 file changed, 25 insertions(+), 7 deletions(-)

diff --git a/lib/shark_client.js b/lib/shark_client.js
index b952343..a45a39e 100644
--- a/lib/shark_client.js
+++ b/lib/shark_client.js
@@ -57,23 +57,40 @@ function _request(opts, cb) {
     cb = once(cb);
 
     var req = http.request(opts);
-    var timer = setTimeout(function onTimeout() {
-        if (req)
+    /*
+     * This timer represents the timeout for connecting to the shark
+     * for this request,so it is important that it is cleared only once
+     * we have heard some sort of response from the shark.
+     *
+     * We previously cleared this timer on the 'socket' event,
+     * which is emitted when a connection is assigned a socket. Because node
+     * reuses sockets when possible, if the shark has been successfully
+     * contacted in the past, its socket may be assigned to a connection.
+     * If the shark has since gone down, the connection timer is still cleared,
+     * and we are unable to detect the shark is down until some other timeout
+     * is reached (such as the socket timeout).
+     *
+     * Instead, we know it is safe to clear this timer in the following cases:
+     *  - GET/HEAD requests: after the shark's response is received.
+     *  - PUT requests: Sharks don't send a response in this case, but they do
+     *  send 100-continues, after which it is safe to assume the shark is up.
+     *
+     */
+    var connectionTimer = setTimeout(function onTimeout() {
+        if (req) {
             req.abort();
+        }
 
         cb(new ConnectTimeoutError(opts.hostname, opts.connectTimeout));
     }, opts.connectTimeout);
 
     req.once('error', function onRequestError(err) {
-        clearTimeout(timer);
+        clearTimeout(connectionTimer);
         cb(err);
     });
 
-    req.once('socket', function () {
-        clearTimeout(timer);
-    });
-
     function onResponse(res) {
+        clearTimeout(connectionTimer);
         if (res.statusCode >= 400) {
             var body = '';
             res.setEncoding('utf8');
@@ -93,6 +110,7 @@ function _request(opts, cb) {
     }
 
     req.once('continue', function () {
+        clearTimeout(connectionTimer);
         req.removeListener('response', onResponse);
         cb(null, req);
     });
-- 
2.21.0

