From 10dffe1869557d2e76c4832b891ae55b16be8edf Mon Sep 17 00:00:00 2001
From: Jordan Paige Hendricks <jordan.hendricks@joyent.com>
Date: Wed, 12 Oct 2016 00:17:43 +0000
Subject: [PATCH] MANTA-2737 muskie returned 500 on GET when one CN was down
 MANTA-2716 muskie behaves poorly when mako is extremely slow Reviewed by:
 Approved by:

---
 lib/shark_client.js | 33 ++++++++++++++++++++++++++-------
 1 file changed, 26 insertions(+), 7 deletions(-)

diff --git a/lib/shark_client.js b/lib/shark_client.js
index b952343..7a15947 100644
--- a/lib/shark_client.js
+++ b/lib/shark_client.js
@@ -57,23 +57,41 @@ function _request(opts, cb) {
     cb = once(cb);
 
     var req = http.request(opts);
-    var timer = setTimeout(function onTimeout() {
-        if (req)
+    /*
+     * This timer represents the timeout for connecting to the shark
+     * for this request, so it is important that it is cleared only once
+     * we have heard some sort of response from the shark.
+     *
+     * It would be tempting to clear this timer on the 'socket' event, but
+     * in the case of reused sockets, we may get a socket whose shark has since
+     * disappeared (e.g., behind a network partition). We really want this
+     * timeout to cover the interval up to when we know the shark has started
+     * processing the request. If it expires before this happens, the caller
+     * can retry another shark. If we cleared the timer on the 'socket' event,
+     * we would be unable to detect the shark is down until the socket times
+     * out (usually after 2 minutes), at which point, it's likely too late to
+     * retry the request on a different shark.
+     *
+     * For GET/HEAD requests, we know it's safe to clear the timer when the
+     * response is received.
+     * For PUT requests, it can be cleared after a 100-continue is received.
+     *
+     */
+    var connectionTimer = setTimeout(function onTimeout() {
+        if (req) {
             req.abort();
+        }
 
         cb(new ConnectTimeoutError(opts.hostname, opts.connectTimeout));
     }, opts.connectTimeout);
 
     req.once('error', function onRequestError(err) {
-        clearTimeout(timer);
+        clearTimeout(connectionTimer);
         cb(err);
     });
 
-    req.once('socket', function () {
-        clearTimeout(timer);
-    });
-
     function onResponse(res) {
+        clearTimeout(connectionTimer);
         if (res.statusCode >= 400) {
             var body = '';
             res.setEncoding('utf8');
@@ -93,6 +111,7 @@ function _request(opts, cb) {
     }
 
     req.once('continue', function () {
+        clearTimeout(connectionTimer);
         req.removeListener('response', onResponse);
         cb(null, req);
     });
-- 
2.21.0

