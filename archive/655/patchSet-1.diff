commit df78c186bcb733626b3b15467ec56c689d8d241f (refs/changes/55/655/1)
Author: Jordan Paige Hendricks <jordan.hendricks@joyent.com>
Date:   2016-10-12T00:21:49+00:00 (3 years ago)
    
    MANTA-2716 muskie behaves poorly when mako is extremely slow
    MANTA-2737 muskie returned 500 on GET when one CN was down

diff --git a/lib/shark_client.js b/lib/shark_client.js
index b952343..a4dd1b9 100644
--- a/lib/shark_client.js
+++ b/lib/shark_client.js
@@ -57,7 +57,22 @@ function _request(opts, cb) {
     cb = once(cb);
 
     var req = http.request(opts);
-    var timer = setTimeout(function onTimeout() {
+    /*
+     * This timer represents the timeout for connecting to the shark for the request,
+     * so it is important that it is cleared only once we've heard some sort
+     * of response from the shark.
+     *
+     * We previously cleared this timer on the 'socket' event,
+     * which is emitted when a connection is assigned a socket. Because node
+     * reuses sockets when possible, if the shark has previously been connected
+     * to in the past but later goes down, the timer would already be cleared, and the
+     * only timeout preventing muskie from hanging is the socket timeout.
+     *
+     * For GETs, we can safely be sure the shark is up after we receive a response.
+     * For PUTs, we can safely do so once we receive the 100-continue reponse.
+     *
+     */
+    var connectionTimer = setTimeout(function onTimeout() {
         if (req)
             req.abort();
 
@@ -65,15 +80,12 @@ function _request(opts, cb) {
     }, opts.connectTimeout);
 
     req.once('error', function onRequestError(err) {
-        clearTimeout(timer);
+        clearTimeout(connectionTimer);
         cb(err);
     });
 
-    req.once('socket', function () {
-        clearTimeout(timer);
-    });
-
     function onResponse(res) {
+        clearTimeout(connectionTimer);
         if (res.statusCode >= 400) {
             var body = '';
             res.setEncoding('utf8');
@@ -93,6 +105,7 @@ function _request(opts, cb) {
     }
 
     req.once('continue', function () {
+        clearTimeout(connectionTimer);
         req.removeListener('response', onResponse);
         cb(null, req);
     });
