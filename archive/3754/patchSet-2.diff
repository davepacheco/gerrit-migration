commit 7817e778c9c4becebedcc6cd4c36cb511e452104 (refs/changes/54/3754/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-04-02T21:21:08+00:00 (1 year, 6 months ago)
    
    TRITON-262 Want auto.INSTANCE_UUID in config-agent templates
    TRITON-291 Want auto.DATACENTER_NAME in config-agent templates
    TRITON-298 Want auto.ADMIN_IP in GZ config-agent templates

diff --git a/README.md b/README.md
index 4dde447..d2f101b 100644
--- a/README.md
+++ b/README.md
@@ -23,3 +23,17 @@ config files, if changed. More details in the SAPI documentation.
 This repository is part of the Joyent SmartDataCenter project (SDC).  For
 contribution guidelines, issues, and general documentation, visit the main
 [SDC](http://github.com/joyent/sdc) project page.
+
+## `auto.*` variables
+
+config-agent takes care of discovering and providing a handful of variables
+about the local environment. They are:
+
+- `auto.DATACENTER_NAME`, the name of the datacenter
+- `auto.SERVER_UUID`, the UUID of the Computer Node
+- `auto.ZONENAME`, the name of the running zone (`"global"` when running in the
+  Global Zone)
+- `auto.INSTANCE_UUID`, the instance UUID in SAPI for the instance whose
+  template config-agent is rendering
+- `auto.<TAG>_IP`, the IP address on the NIC with tag `<TAG>` or `<TAG>_RACK`
+- `auto.PRIMARY_IP`, in a zone, this is the IP address of the primary NIC
diff --git a/agent.js b/agent.js
index f07a1fe..8e62edb 100644
--- a/agent.js
+++ b/agent.js
@@ -19,8 +19,10 @@
 var assert = require('assert-plus');
 var async = require('async');
 var fs = require('fs');
+var jsprim = require('jsprim');
 var optimist = require('optimist');
 var util = require('./lib/common/util');
+var vasync = require('vasync');
 
 var Agent = require('./lib/agent/agent');
 var Logger = require('bunyan');
@@ -123,6 +125,128 @@ function startPeriodicRefresh() {
 	setTimeout(checkOnce, delay);
 }
 
+function setNicTag(nic_tag, ip) {
+	var NIC_TAG = nic_tag.toUpperCase();
+
+	autoMetadata[NIC_TAG + '_IP'] = ip;
+
+	/*
+	 * If there is a nic tag of the form <name>_RACK<number>,
+	 * it will override any similarly named nic tag (e.g.
+	 * "MANTA_RACK##" will override "MANTA" nic tags).
+	 */
+	if (NIC_TAG.search(/^[A-Z]+_RACK\d+$/) === 0) {
+		NIC_TAG = NIC_TAG.split('_')[0];
+		autoMetadata[NIC_TAG + '_IP'] = ip;
+	}
+}
+
+function setGlobalZoneAutoMetadata(callback) {
+	var mac2ip = {};
+
+	util.getSysinfo({ log: log }, function (sErr, sysinfo) {
+		if (sErr) {
+			callback(sErr);
+			return;
+		}
+
+		autoMetadata.SERVER_UUID = sysinfo['UUID'];
+		autoMetadata.DATACENTER_NAME = sysinfo['Datacenter Name'];
+
+		function setMAC(_, nic) {
+			if (nic.ip4addr) {
+				mac2ip[nic['MAC Address']] = nic.ip4addr;
+			}
+		}
+
+		jsprim.forEachKey(sysinfo['Virtual Network Interfaces'], setMAC);
+		jsprim.forEachKey(sysinfo['Network Interfaces'], setMAC);
+
+		util.listNicTags({ log: log }, function (lErr, nictags) {
+			if (lErr) {
+				callback(lErr);
+				return;
+			}
+
+			nictags.forEach(function (nic_tag) {
+				if (nic_tag.type !== 'normal') {
+					return;
+				}
+
+				if (!jsprim.hasKey(mac2ip, nic_tag.mac)) {
+					return;
+				}
+
+				setNicTag(nic_tag.name, mac2ip[nic_tag.mac]);
+			});
+
+			callback();
+		});
+	});
+}
+
+function setInZoneAutoMetadata(callback) {
+	vasync.pipeline({
+		input: null,
+		funcs: [
+			function getServerUuidIZ(_, cb) {
+				util.mdataGet({
+					log: log,
+					key: 'sdc:server_uuid'
+				}, function (err, serverUuid) {
+					if (err) {
+						cb(err);
+						return;
+					}
+
+					autoMetadata.SERVER_UUID = serverUuid;
+
+					cb();
+				});
+			},
+			function getDatacenterNameIZ(_, cb) {
+				util.mdataGet({
+					log: log,
+					key: 'sdc:datacenter_name'
+				}, function (err, dcName) {
+					if (err) {
+						cb(err);
+						return;
+					}
+
+					autoMetadata.DATACENTER_NAME = dcName;
+
+					cb();
+				});
+			},
+			function getNicsIZ(_, cb) {
+				util.mdataGet({
+					log: log,
+					key: 'sdc:nics'
+				}, function (err, nicsJson) {
+					if (err) {
+						cb(err);
+						return;
+					}
+
+					var nics = JSON.parse(nicsJson);
+					for (var i = 0; i < nics.length; i++) {
+						var nic = nics[i];
+						if (i === 0) {
+							autoMetadata.PRIMARY_IP = nic.ip;
+						}
+						if (nic.nic_tag) {
+							setNicTag(nic.nic_tag, nic.ip);
+						}
+					}
+
+					cb();
+				});
+			}
+		]
+	}, callback);
+}
+
 async.waterfall([
 	// TODO(refactor) move this to Agent.init
 	function gatherInsts(cb) {
@@ -147,6 +271,14 @@ async.waterfall([
 		});
 	},
 
+	function gatherAutoMetadata(cb) {
+		if (zonename === 'global') {
+			setGlobalZoneAutoMetadata(cb);
+		} else {
+			setInZoneAutoMetadata(cb);
+		}
+	},
+
 	// For zone instances, make sure we always default to mdata-get sapi-url
 	// if the value was never passed
 	function ensureSapiUrl(cb) {
@@ -164,68 +296,6 @@ async.waterfall([
 			cb();
 		});
 	},
-
-	// TODO(refactor) move this to Agent.init
-	function autoMetadataIps(cb) {
-		if (zonename === 'global') {
-			return (cb());
-		}
-
-		var mdataOpts = {log: log, key: 'sdc:nics'};
-		util.mdataGet(mdataOpts, function (err, nicsJson) {
-			if (err) {
-				return (cb(err));
-			}
-
-			var nics = JSON.parse(nicsJson);
-			for (var i = 0; i < nics.length; i++) {
-				var nic = nics[i];
-				if (i === 0) {
-					autoMetadata.PRIMARY_IP = nic.ip;
-				}
-				if (nic.nic_tag) {
-					var NIC_TAG = nic.nic_tag.toUpperCase();
-					autoMetadata[NIC_TAG + '_IP'] = nic.ip;
-
-					/*
-					 * If there is a nic tag of the form <name>_RACK<number>,
-					 * it will override any similarly named nic tag (e.g.
-					 * "MANTA_RACK##" will override "MANTA" nic tags).
-					 */
-					if (NIC_TAG.search(/^[A-Z]+_RACK\d+$/) === 0) {
-						NIC_TAG = NIC_TAG.split('_')[0];
-						autoMetadata[NIC_TAG + '_IP'] = nic.ip;
-					}
-				}
-			}
-
-			cb();
-		});
-	},
-
-	function autoMetadataServerUuid(cb) {
-		if (zonename === 'global') {
-			util.getSysinfo({log: log}, function (err, sysinfo) {
-				if (err) {
-					cb(err);
-				} else {
-					autoMetadata.SERVER_UUID = sysinfo.UUID;
-					cb();
-				}
-			});
-		} else {
-			var mdataOpts = {log: log, key: 'sdc:server_uuid'};
-			util.mdataGet(mdataOpts, function (err, serverUuid) {
-				if (err) {
-					cb(err);
-				} else {
-					autoMetadata.SERVER_UUID = serverUuid;
-					cb();
-				}
-			});
-		}
-	},
-
 	function (cb) {
 		agent = new Agent(config, log);
 
diff --git a/lib/agent/agent.js b/lib/agent/agent.js
index c28b380..26ebde7 100644
--- a/lib/agent/agent.js
+++ b/lib/agent/agent.js
@@ -45,6 +45,7 @@ var async = require('async');
 var exec = require('child_process').exec;
 var fs = require('fs');
 var hogan = require('hogan.js');
+var jsprim = require('jsprim');
 var objCopy = require('../common/util').objCopy;
 var getZonename = require('../common/util').getZonename;
 var once = require('once');
@@ -338,6 +339,10 @@ Agent.prototype.checkAndRefreshInst = function checkAndRefreshInst(opts, cb) {
 	var inst = opts.inst;
 	var log = opts.log.child({inst: inst}, true);
 
+	var autoInstanceMetadata = {
+		INSTANCE_UUID: inst
+	};
+
 	var reqOpts = {
 		headers: {
 			'x-request-id': log.fields.req_id
@@ -390,7 +395,8 @@ Agent.prototype.checkAndRefreshInst = function checkAndRefreshInst(opts, cb) {
 					self.renderConfigFile(
 						log.child({manifest: name}, true),
 						manifests[name],
-						metadata);
+						metadata,
+						autoInstanceMetadata);
 				});
 
 				next(null, manifests);
@@ -604,7 +610,7 @@ Agent.prototype.runPostCommand = function runPostCommand(log, post_cmd, cb) {
  * Render a configuration file from its manifest.
  */
 Agent.prototype.renderConfigFile =
-function renderConfigFile(log, manifest, rawMetadata)
+function renderConfigFile(log, manifest, rawMetadata, autoInstanceMetadata)
 {
 	var self = this;
 
@@ -622,11 +628,12 @@ function renderConfigFile(log, manifest, rawMetadata)
 		metadata[key] = self.localMetadata[key];
 	});
 
+	var auto = jsprim.mergeObjects(self.autoMetadata, autoInstanceMetadata);
 	if (metadata.auto) {
-		log.warn({oldAuto: metadata.auto, newAuto: self.autoMetadata},
+		log.warn({oldAuto: metadata.auto, newAuto: auto},
 			'overwriting existing "metadata.auto" section');
 	}
-	metadata.auto = self.autoMetadata;
+	metadata.auto = auto;
 
 	var contents = null;
 	try {
diff --git a/lib/common/util.js b/lib/common/util.js
index 9d6c26e..5805887 100644
--- a/lib/common/util.js
+++ b/lib/common/util.js
@@ -14,8 +14,12 @@
 
 var assert = require('assert-plus');
 var execFile = require('child_process').execFile;
-var WError = require('verror').WError;
+var mod_verror = require('verror');
 
+var WError = mod_verror.WError;
+var VError = mod_verror.VError;
+
+var NIC_TAG_RE = /^(\w+),([0-9a-f:]{17}),([^,]+),normal$/;
 
 
 // ---- internal support
@@ -64,6 +68,21 @@ function execFilePlus(args, cb) {
 	});
 }
 
+function line2nictag(acc, line) {
+	var m = NIC_TAG_RE.exec(line);
+	if (m !== null) {
+		var obj = {
+			name: m[1],
+			mac: m[2],
+			link: m[3],
+			type: 'normal'
+		};
+
+		acc.push(obj);
+	}
+
+	return acc;
+}
 
 
 // ---- Exports
@@ -123,16 +142,49 @@ function getSysinfo(opts, cb) {
 	assert.object(opts.log, 'opts.log');
 	assert.func(cb, 'cb');
 
-	var execOpts = {
+	execFilePlus({
 		argv: ['/usr/bin/sysinfo'],
 		log: opts.log
-	};
-	execFilePlus(execOpts, function (err, stdout) {
+	}, function (err, stdout) {
 		if (err) {
 			cb(err);
-		} else {
-			cb(null, stdout.trim());
+			return;
+		}
+
+		var sysinfo;
+
+		try {
+			sysinfo = JSON.parse(stdout.trim());
+		} catch (e) {
+			cb(new VError(e, 'failed to parse sysinfo output'));
+			return;
+		}
+
+		cb(null, sysinfo);
+	});
+}
+
+/**
+ * Run `nictagadm list` and parse its output.
+ */
+function listNicTags(opts, cb) {
+	assert.object(opts, 'opts');
+	assert.object(opts.log, 'opts.log');
+	assert.func(cb, 'cb');
+
+	execFilePlus({
+		argv: ['/usr/bin/nictagadm', 'list', '-p', '-d,'],
+		log: opts.log
+	}, function (err, stdout) {
+		if (err) {
+			cb(err);
+			return;
 		}
+
+		var lines = stdout.trim().split('\n');
+		var nictags = lines.reduce(line2nictag, []);
+
+		cb(null, nictags);
 	});
 }
 
@@ -157,6 +209,7 @@ module.exports = {
 	getZonename: getZonename,
 	mdataGet: mdataGet,
 	getSysinfo: getSysinfo,
+	listNicTags: listNicTags,
 	objCopy: objCopy
 };
 /* vim: set noet sw=4 sts=4 ts=4: */
diff --git a/package.json b/package.json
index 3a45773..14c4682 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,7 @@
         "bunyan": "1.5.1",
         "cmdln": "3.4.0",
         "hogan.js": "git+https://github.com/joyent/hogan.js#7d34ba7",
+        "jsprim": "2.0.0",
         "kthxbai": "^0.4.0",
         "mkdirp": "0.5.1",
         "once": "1.3.2",
