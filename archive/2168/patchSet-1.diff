From 3e286d59f899e9421786c965242de59f5df81e32 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Wed, 28 Jun 2017 23:57:46 -0700
Subject: [PATCH] VOLAPI-18 Add support for filtering entries outputted by
 ListVolumes on any volume object attribute

---
 lib/endpoints/volumes.js                  | 121 ++++-
 lib/models/volumes.js                     |  19 +-
 lib/validation/volumes.js                 |   2 +
 test/integration/list-with-params.test.js | 585 ++++++++++++++++++++++
 4 files changed, 713 insertions(+), 14 deletions(-)
 create mode 100644 test/integration/list-with-params.test.js

diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index cada867..a10ce36 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -35,6 +35,16 @@ var DEFAULT_NFS_SHARED_VOLUME_PACKAGE_SIZE_IN_MBS = 10 * units.MIBS_IN_GB;
 assert.number(DEFAULT_NFS_SHARED_VOLUME_PACKAGE_SIZE_IN_MBS,
     'DEFAULT_NFS_SHARED_VOLUME_PACKAGE_SIZE_IN_MBS');
 
+// We don't include 'tag' here because tags have param 'tag.key' and we validate
+// these separately in validateListVolumes.
+var VALID_LIST_VOLUMES_PARAMS = [
+    'name',
+    'owner_uuid',
+    'predicate',
+    'size',
+    'state',
+    'type'
+];
 var VOLUME_TICKETS_SCOPE = 'nfs_volume';
 
 function _selectBestPackage(requestedSize, packagesList, options, callback) {
@@ -714,18 +724,73 @@ function getVolume(req, res, next) {
 
 function validateListVolumes(req, res, next) {
     assert.object(req, 'req');
+    assert.object(req.query, 'req.query');
     assert.object(res, 'res');
     assert.func(next, 'next');
 
+    var allParams = Object.keys(req.query);
     var errs = [];
-    var validationErr;
     var predicateValidationErr;
+    var validationErr;
 
     if (req.query.predicate) {
         predicateValidationErr =
             predicateValidation.validatePredicate(req.query.predicate);
     }
 
+    allParams.forEach(function checkParam(param) {
+        var nameBegin;
+        var nameLen;
+
+        // 'name' is special because we allow '*' as a prefix or suffix for
+        // wildcard searching. As such, we need to validate that the name is
+        // valid whether or not it is surrounded by '*'s.
+        if (param === 'name') {
+            nameBegin = 0;
+            nameLen = req.query.name.length;
+
+            if (nameLen > 1 && req.query.name[0] === '*') {
+                nameBegin++;
+                nameLen--;
+            }
+
+            if (nameLen > 1 &&
+                req.query.name[nameBegin + nameLen - 1] === '*') {
+
+                nameLen--;
+            }
+
+            if (!req.query.name.substr(nameBegin, nameLen)
+                .match(volumesValidation.VALID_VOLUME_NAME_CHARS_REGEXP)) {
+
+                errs.push(new Error('invalid name query'));
+                return;
+            }
+        }
+
+        // for 'size' the value must be a number
+        if (param === 'size') {
+            if (!req.query.size.match(/^[1-9][0-9]*$/)) {
+                errs.push(new Error('invalid size query'));
+                return;
+            }
+        }
+
+        if (VALID_LIST_VOLUMES_PARAMS.indexOf(param) !== -1) {
+            // this param is allowed
+            return;
+        }
+
+        // It seems there are no restrictions on valid tag names/values outside
+        // the triton.* and docker heirarchies. So we just ensure it starts with
+        // 'tag.' and has at least one character after that.
+        if (param.match(/^tag\../)) {
+            return;
+        }
+
+        errs.push(new Error('unknown parameter "' + param + '"'));
+    });
+
     assert.optionalObject(predicateValidationErr, predicateValidationErr);
     if (predicateValidationErr !== undefined) {
         errs.push(predicateValidationErr);
@@ -744,21 +809,53 @@ function listVolumes(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
+    var conflictingFieldErrs = [];
+    var listVolOpts = {};
+    var predFields;
     var predicate;
+    var queryParamFields = Object.keys(req.query);
 
     if (req.query.predicate) {
         predicate = krill.createPredicate(JSON.parse(req.query.predicate));
+
+        // We have to validate the fields here rather than in
+        // validateListVolumes because the .fields() function exists on the
+        // predicate object only after we've created it here.
+        predFields = predicate.fields();
+        predFields.forEach(function validatePredField(field) {
+            if (req.query[field] !== undefined && req.query[field] !== null) {
+                // we have both query parameter and predicate field, invalid
+                conflictingFieldErrs.push(new Error('predicate has "' + field
+                    + '" which conflicts with query parameter with same name'));
+            }
+        });
+
+        if (conflictingFieldErrs.length > 0) {
+            next(new errors.ValidationError(conflictingFieldErrs));
+            return;
+        }
+
+        listVolOpts.predicate = predicate;
     }
 
-    volumesModel.listVolumes({
-        owner_uuid: req.query.owner_uuid,
-        name: req.query.name,
-        predicate: predicate
-    }, function onListVolumes(err, volumes) {
-        req.responseVolumes =
-            volumes.map(function getVolumeObjectValue(volObject) {
-                return volObject.value;
-            });
+    // We already validated in validateListVolumes that this only contains
+    // legitimate parameters, so add them to the listVolOpts now.
+    queryParamFields.forEach(function addParam(field) {
+        if (field === 'predicate') {
+            // we already added predicate above if set
+            return;
+        }
+
+        listVolOpts[field] = req.query[field];
+    });
+
+    volumesModel.listVolumes(listVolOpts, function onListVolumes(err, volumes) {
+        if (!err) {
+            req.responseVolumes =
+                volumes.map(function getVolumeObjectValue(volObject) {
+                    return volObject.value;
+                });
+        }
         next(err);
     });
 }
@@ -1483,7 +1580,9 @@ function mount(config, server, applicationState) {
         path: '/volumes',
         name: 'ListVolumes',
         version: '1.0.0'
-    }, restify.queryParser(), validateListVolumes, listVolumes, renderVolumes,
+    }, restify.queryParser({
+        allowDots: false
+    }), validateListVolumes, listVolumes, renderVolumes,
         makeSendResponseHandler({
             statusCode: 200
         }));
diff --git a/lib/models/volumes.js b/lib/models/volumes.js
index 7cb05ce..9e1a35f 100644
--- a/lib/models/volumes.js
+++ b/lib/models/volumes.js
@@ -145,11 +145,11 @@ function updateVolumeWithRetry(volumeUuid, volumeObject, callback) {
 function _buildSearchFilter(params) {
     assert.object(params, 'params');
 
-    var SELECT_ALL_FILTER = '(uuid=*)';
-    var paramName;
     var filters = [];
-    var searchFilter;
+    var paramName;
     var predicateLdapFilter;
+    var searchFilter;
+    var SELECT_ALL_FILTER = '(uuid=*)';
 
     if (params.predicate && !params.predicate.trivial()) {
         predicateLdapFilter =
@@ -174,6 +174,19 @@ function _buildSearchFilter(params) {
             continue;
         }
 
+        /*
+         * We want to be able to include '*' as a prefix or suffix, and if we
+         * just add it using EqualityFilter, the '*' will be destroyed, so we
+         * build the filter ourselves.
+         *
+         * NOTE: We assume the parameter has been validated. If it hasn't an
+         *       exception will be thrown.
+         */
+        if (paramName === 'name') {
+            filters.push(ldapFilter.parse('(name=' + params[paramName] + ')'));
+            continue;
+        }
+
         filters.push(new ldapFilter.EqualityFilter({
             attribute: paramName,
             value: params[paramName]
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index 396883c..da02054 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -10,6 +10,7 @@
 
 var volumes = require('../volumes');
 
+var VALID_VOLUME_NAME_CHARS_REGEXP = /^[a-zA-Z0-9_\.\-]+$/;
 var VALID_VOLUME_NAME_REGEXP = /^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/;
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 
@@ -112,6 +113,7 @@ function validateVolumeUuid(volumeUuid) {
 }
 
 module.exports = {
+    VALID_VOLUME_NAME_CHARS_REGEXP: VALID_VOLUME_NAME_CHARS_REGEXP,
     validateOwnerUuid: validateOwnerUuid,
     validateVolumeName: validateVolumeName,
     validateVolumeNetwork: validateVolumeNetwork,
diff --git a/test/integration/list-with-params.test.js b/test/integration/list-with-params.test.js
new file mode 100644
index 0000000..232d0c1
--- /dev/null
+++ b/test/integration/list-with-params.test.js
@@ -0,0 +1,585 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * NOTE: this file shares a lot of logic with list-with-predicate.test.js,
+ * it would be good to separate out this common logic eventually.
+ *
+ */
+
+var assert = require('assert-plus');
+var libuuid = require('libuuid');
+var Logger = require('bunyan');
+var test = require('tape');
+var vasync = require('vasync');
+
+var clientsSetup = require('./lib/clients-setup');
+var configLoader = require('../../lib/config-loader');
+var Moray = require('../../lib/moray');
+var resources = require('./lib/resources');
+var volumesModel = require('../../lib/models/volumes');
+var testVolumes = require('./lib/volumes');
+
+var CONFIG = configLoader.loadConfigSync();
+
+var ALTERNATE_OWNER_UUID = libuuid.create();
+var UFDS_ADMIN_UUID = CONFIG.ufdsAdminUuid;
+assert.string(UFDS_ADMIN_UUID, 'UFDS_ADMIN_UUID');
+
+var API_CLIENTS;
+var MORAY_CLIENT;
+var LOGGER = new Logger({
+    level: process.env.LOG_LEVEL || 'info',
+    name: 'volapi_integrations_test_list_with_params',
+    stream: process.stderr
+});
+
+var VOLUMES_NAMES_PREFIX = 'test-volumes-list-params';
+
+function deleteTestVolumeObject(volumeUuid, callback) {
+    assert.string(volumeUuid, 'volumeUuid');
+    assert.func(callback, 'callback');
+
+    volumesModel.deleteVolume(volumeUuid, callback);
+}
+
+function deleteAllTestVolumeObjects(callback) {
+    assert.func(callback, 'callback');
+
+    volumesModel.listVolumes({name: '*' + VOLUMES_NAMES_PREFIX + '*'},
+        function onListVolumes(listErr, volumes) {
+            if (listErr) {
+                callback(listErr);
+                return;
+            }
+
+            vasync.forEachParallel({
+                func: deleteTestVolumeObject,
+                inputs: volumes.map(function getVolumeUuid(volume) {
+                    assert.object(volume, 'volume');
+                    return volume.value.uuid;
+                })
+            }, function allVolumesDeleted(deleteErr) {
+                callback(deleteErr);
+            });
+        });
+}
+
+function createTestVolumeObject(volumeParams, callback) {
+    assert.object(volumeParams, 'volumeParams');
+    assert.func(callback, 'callback');
+
+    volumesModel.createVolume(volumeParams, callback);
+}
+
+test('setup', function (tt) {
+    tt.test('setup clients', function (t) {
+        clientsSetup.getApiClients(function onClientsSetup(err, clients) {
+            API_CLIENTS = clients;
+            t.end();
+        });
+    });
+
+    tt.test('setup test moray client', function (t) {
+        MORAY_CLIENT = new Moray(CONFIG.moray);
+        MORAY_CLIENT.connect();
+        MORAY_CLIENT.on('connect', function onMorayConnected() {
+            t.end();
+        });
+    });
+
+    tt.test('init volumes model', function (t) {
+        volumesModel.init(CONFIG, {
+            morayClient: MORAY_CLIENT,
+            log: LOGGER
+        }, function onVolumesModelInitialized(err) {
+            t.ifErr(err, 'volumes model initialization should not error');
+            t.end();
+        });
+    });
+});
+
+test('cleanup leftover volumes', function (tt) {
+    tt.test('cleaning up all volumes should be successful', function (t) {
+        deleteAllTestVolumeObjects(function onAllDeleted(err) {
+            t.ifErr(err, 'deleting all test volume objects should succeed');
+            t.end();
+        });
+    });
+});
+
+test('listing nfs shared volumes with invalid query parameters', function (tt) {
+
+    tt.test('using unknown query parameter',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                gorilla: 'king kong'
+            }, function onListVolumes(err, req, res, obj) {
+                t.ok(err,
+                    'listing volumes with invalid predicate should error');
+                t.equal(err.restCode, 'ValidationError',
+                    'error should ValidationError');
+                t.end();
+            });
+        });
+
+    tt.test('conflicting predicate and query param should fail',
+        function (t) {
+            var predicate = {
+                eq: ['name', 'mechagodzilla']
+            };
+
+            API_CLIENTS.volapi.listVolumes({
+                name: 'godzilla',
+                predicate: JSON.stringify(predicate)
+            }, function onListVolumes(err, req, res, obj) {
+                t.ok(err,
+                    'listing volumes with invalid predicate should error');
+                t.equal(err.restCode, 'ValidationError',
+                    'error should ValidationError');
+                t.end();
+            });
+        });
+
+    tt.test('wildcard should not be allowed in middle of name',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                name: 'go*la'
+            }, function onListVolumes(err, req, res, obj) {
+                t.ok(err,
+                    'listing volumes with invalid wildcard should error');
+                t.equal(err.restCode, 'ValidationError',
+                    'error should ValidationError');
+                t.end();
+            });
+        });
+});
+
+test('listing nfs shared volumes with simple parameters', function (tt) {
+    var snowflakeName0 = resources.makeResourceName('dummy-'
+        + VOLUMES_NAMES_PREFIX + '-empty0') + '-foo';
+    var snowflakeName1 =
+        resources.makeResourceName(VOLUMES_NAMES_PREFIX + '-empty1') + '-foo';
+    var snowflakeName2 =
+        resources.makeResourceName(VOLUMES_NAMES_PREFIX + '-empty2') + '-foo';
+
+    var testVolumeObjects = [
+        {
+            name: snowflakeName0,
+            owner_uuid: UFDS_ADMIN_UUID,
+            size: 10240,
+            state: 'creating',
+            tags: {
+                enemy: 'mothra',
+                studio: 'toho'
+            },
+            type: 'tritonnfs',
+            uuid: libuuid.create()
+        },
+        {
+            name: snowflakeName1,
+            owner_uuid: UFDS_ADMIN_UUID,
+            size: 102400,
+            state: 'ready',
+            tags: {
+                enemy: 'rodan',
+                studio: 'toho'
+            },
+            type: 'tritonnfs',
+            uuid: libuuid.create()
+        },
+        {
+            name: snowflakeName2,
+            owner_uuid: ALTERNATE_OWNER_UUID,
+            size: 1024000,
+            state: 'failed',
+            tags: {
+                enemy: 'king kong',
+                studio: 'RKO'
+            },
+            type: 'tritonnfs',
+            uuid: libuuid.create()
+        }
+    ];
+
+    tt.test('creating test volume objects should succeed', function (t) {
+        vasync.forEachParallel({
+            func: createTestVolumeObject,
+            inputs: testVolumeObjects
+        }, function allTestVolumeObjectsCreated(err, results) {
+            t.ifErr(err, 'creating test volume objects should not error');
+            t.end();
+        });
+    });
+
+    tt.test('listing with empty predicate should list all test volume objects',
+        function (t) {
+            var volumesListedFromMoray;
+            var volumesListedWithEmptyPredicate;
+
+            vasync.parallel({
+                funcs: [
+                    function getAllVolumesFromMoray(callback) {
+                        volumesModel.listVolumes({},
+                            function onAllVolumesListed(err, volumes) {
+                                t.ifErr(err,
+                                    'list all volumes should not error');
+                                volumesListedFromMoray = volumes;
+                                callback();
+                            });
+                    },
+                    function getAllVolumesWithEmptyPredicate(callback) {
+                        var predicate = {};
+
+                        API_CLIENTS.volapi.listVolumes({
+                            predicate: JSON.stringify(predicate)
+                        }, function onListVolumes(err, volumes) {
+                            t.ifErr(err,
+                                'listing volumes with a name predicate '
+                                    + 'should not error');
+                            t.ok(Array.isArray(volumes),
+                                'response body should be an array');
+                            volumesListedWithEmptyPredicate = volumes;
+                            callback();
+                        });
+                    }
+                ]
+            }, function allListingDone(err) {
+                t.equal(volumesListedFromMoray.length,
+                    volumesListedWithEmptyPredicate.length,
+                    'listing volumes with an empty predicate should list the '
+                        + 'same number of volumes as listing from the models '
+                        + 'layer with no search params ('
+                        + volumesListedFromMoray.length + '/'
+                        + volumesListedWithEmptyPredicate.length + ')');
+                t.end();
+            });
+        });
+
+    tt.test('list with exact name returns 1 volume',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                name: snowflakeName1
+            }, function onListVolumes(err, volumes) {
+                t.ifErr(err, 'listing volumes with a name param should not '
+                    + 'error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.equal(volumes.length, 1,
+                    'only one volume should be included in the response '
+                    + 'body');
+                t.equal(volumes[0].name, snowflakeName1,
+                    'the name of the volume returned in the response '
+                    + 'should be: ' + snowflakeName1 + ', got: '
+                    + volumes[0].name);
+                t.end();
+            });
+        });
+
+    tt.test('list with name=*-foo returns 3 volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                name: '*-foo'
+            }, function onListVolumes(err, volumes) {
+                var found0 = false;
+                var found1 = false;
+                var found2 = false;
+                var foundX = false;
+
+                t.ifErr(err, 'listing volumes with a name param should not '
+                    + 'error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.equal(volumes.length, 3,
+                    '3 volumes should be included in the response body');
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName0:
+                            found0 = true;
+                            break;
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            foundX = true;
+                            break;
+                    }
+                });
+
+                t.ok(found0, 'should have found ' + snowflakeName0);
+                t.ok(found1, 'should have found ' + snowflakeName1);
+                t.ok(found2, 'should have found ' + snowflakeName2);
+                t.ok(!foundX, 'should not have found other volumes'
+                    + (foundX ? ' found "' + foundX + '"' : ''));
+
+                t.end();
+            });
+        });
+
+    tt.test('list with name=' + VOLUMES_NAMES_PREFIX + '-* returns 2 volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                name: VOLUMES_NAMES_PREFIX + '-*'
+            }, function onListVolumes(err, volumes) {
+                var found1 = false;
+                var found2 = false;
+                var foundX = false;
+
+                t.ifErr(err, 'listing volumes with a name param should not '
+                    + 'error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.equal(volumes.length, 2,
+                    '2 volumes should be included in the response body');
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            foundX = true;
+                            break;
+                    }
+                });
+
+                t.ok(found1, 'should have found ' + snowflakeName1);
+                t.ok(found2, 'should have found ' + snowflakeName2);
+                t.ok(!foundX, 'should not have found other volumes'
+                    + (foundX ? ' found "' + foundX + '"' : ''));
+
+                t.end();
+            });
+        });
+
+    tt.test('list with state=creating returns 1 of our volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                state: 'creating'
+            }, function onListVolumes(err, volumes) {
+                var found0 = false;
+                var found1 = false;
+                var found2 = false;
+
+                t.ifErr(err, 'listing volumes with a state param should not '
+                    + 'error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+
+                // there may be other volumes that are not ours, so we don't
+                // check those, we just loop through to make sure we found ours.
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName0:
+                            found0 = true;
+                            break;
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            break;
+                    }
+                });
+
+                t.ok(found0, 'should find volume with state=creating');
+                t.ok(!found1, 'should not find volume with state=ready');
+                t.ok(!found2, 'should not find volume with state=failed');
+
+                t.end();
+            });
+        });
+
+    tt.test('list with owner_uuid=' + ALTERNATE_OWNER_UUID
+        + ' returns 1 of our volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                owner_uuid: ALTERNATE_OWNER_UUID
+            }, function onListVolumes(err, volumes) {
+                t.ifErr(err, 'listing volumes with an owner_uuid param should'
+                    + ' not error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.equal(volumes.length, 1, 'should have found 1 volume');
+                t.equal(volumes[0].name, testVolumeObjects[2].name, 'volume '
+                    + 'returned was correct one');
+
+                t.end();
+            });
+        });
+
+    tt.test('list with type=tritonnfs returns volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                type: 'tritonnfs'
+            }, function onListVolumes(err, volumes) {
+                t.ifErr(err, 'listing volumes with type=tritonnfs should'
+                    + ' not error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.ok(volumes.length >= 3, 'should have at least 3 volumes, '
+                    + 'found: ' + volumes.length);
+
+                t.end();
+            });
+        });
+
+    tt.test('list with size=102400 (number) returns correct volume',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                size: 102400
+            }, function onListVolumes(err, volumes) {
+                var found0 = false;
+                var found1 = false;
+                var found2 = false;
+
+                t.ifErr(err, 'listing volumes with size=102400 should'
+                    + ' not error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.ok(volumes.length > 0, 'should have at least 1 volume, '
+                    + 'found: ' + volumes.length);
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName0:
+                            found0 = true;
+                            break;
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            break;
+                    }
+                });
+
+                t.ok(!found0, 'should not have found ' + snowflakeName0);
+                t.ok(found1, 'should have found ' + snowflakeName1);
+                t.ok(!found2, 'should not have found ' + snowflakeName2);
+
+                t.end();
+            });
+        });
+
+    tt.test('list with size=1024000 (string) returns correct volume',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                size: '1024000'
+            }, function onListVolumes(err, volumes) {
+                var found0 = false;
+                var found1 = false;
+                var found2 = false;
+
+                t.ifErr(err, 'listing volumes with size=1024000 should'
+                    + ' not error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.ok(volumes.length > 0, 'should have at least 1 volume, '
+                    + 'found: ' + volumes.length);
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName0:
+                            found0 = true;
+                            break;
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            break;
+                    }
+                });
+
+                t.ok(!found0, 'should not have found ' + snowflakeName0);
+                t.ok(!found1, 'should not have found ' + snowflakeName1);
+                t.ok(found2, 'should have found ' + snowflakeName2);
+
+                t.end();
+            });
+        });
+
+    tt.skip('list with tag.studio=toho returns correct volumes',
+        function (t) {
+            API_CLIENTS.volapi.listVolumes({
+                'tag.studio': 'toho',
+                'type': 'tritonnfs'
+            }, function onListVolumes(err, volumes) {
+                var found0 = false;
+                var found1 = false;
+                var found2 = false;
+
+                t.ifErr(err, 'listing volumes with studio=toho should'
+                    + ' not error');
+                t.ok(Array.isArray(volumes),
+                    'response body should be an array');
+                t.ok(volumes.length, 2, 'should have 2 volumes'
+                    + (volumes.length !== 2 ? ', got: '
+                    + JSON.stringify(volumes) : ''));
+
+                volumes.forEach(function checkVolume(vol) {
+                    switch (vol.name) {
+                        case snowflakeName0:
+                            found0 = true;
+                            break;
+                        case snowflakeName1:
+                            found1 = true;
+                            break;
+                        case snowflakeName2:
+                            found2 = true;
+                            break;
+                        default:
+                            break;
+                    }
+                });
+
+                t.ok(found0, 'should have found ' + snowflakeName0);
+                t.ok(found1, 'should have found ' + snowflakeName1);
+                t.ok(!found2, 'should not have found ' + snowflakeName2);
+
+                t.end();
+            });
+        });
+
+    tt.test('removing test volume objects should succeed', function (t) {
+        vasync.forEachParallel({
+            func: deleteTestVolumeObject,
+            inputs: testVolumeObjects.map(function getVolumeUuid(volume) {
+                assert.object(volume, 'volume');
+                return volume.uuid;
+            })
+        }, function allTestVolumeObjectsDeleted(err, results) {
+            t.ifErr(err, 'deleting test volume objects should not error');
+            t.end();
+        });
+    });
+});
+
+test('teardown', function (tt) {
+    tt.test('close moray client connection', function (t) {
+        MORAY_CLIENT.close();
+        t.end();
+    });
+});
-- 
2.21.0

