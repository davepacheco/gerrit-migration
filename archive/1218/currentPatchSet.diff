commit c8a1bc92e99945d1b6d2eca791547623111747b8 (refs/changes/18/1218/1)
Author: David Pacheco <dap@joyent.com>
Date:   2016-12-15T12:17:49-08:00 (2 years, 10 months ago)
    
    clean up lib/cmd.js interfaces

diff --git a/bin/delbucket b/bin/delbucket
index 5d1e7e8..1b7d4d7 100755
--- a/bin/delbucket
+++ b/bin/delbucket
@@ -25,10 +25,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 if (parser.optind() >= process.argv.length) {
diff --git a/bin/delmany b/bin/delmany
index 44a640c..32011ca 100755
--- a/bin/delmany
+++ b/bin/delmany
@@ -29,6 +29,7 @@ delOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'l:o:',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/delobject b/bin/delobject
index 5aaefa8..268b52c 100755
--- a/bin/delobject
+++ b/bin/delobject
@@ -26,10 +26,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 if (parser.optind() >= process.argv.length)
diff --git a/bin/findobjects b/bin/findobjects
index ff469a9..c17c942 100755
--- a/bin/findobjects
+++ b/bin/findobjects
@@ -31,6 +31,7 @@ findOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'a:d:Hl:no:s',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/getbucket b/bin/getbucket
index 26a14b8..543bdef 100755
--- a/bin/getbucket
+++ b/bin/getbucket
@@ -25,10 +25,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 if (parser.optind() >= process.argv.length) {
diff --git a/bin/getobject b/bin/getobject
index 0a9caad..00974e0 100755
--- a/bin/getobject
+++ b/bin/getobject
@@ -28,6 +28,7 @@ getOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'Hs',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/gettokens b/bin/gettokens
index 4edfcf7..44e6e85 100755
--- a/bin/gettokens
+++ b/bin/gettokens
@@ -26,10 +26,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 client = moray.createClient(clientOptions);
diff --git a/bin/listbuckets b/bin/listbuckets
index ed34488..cc94978 100755
--- a/bin/listbuckets
+++ b/bin/listbuckets
@@ -26,10 +26,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 client = moray.createClient(clientOptions);
diff --git a/bin/morayping b/bin/morayping
index a994e00..bb84708 100755
--- a/bin/morayping
+++ b/bin/morayping
@@ -27,6 +27,7 @@ failFast = true;
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'dF',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/morayversion b/bin/morayversion
index 969acfe..9057c41 100755
--- a/bin/morayversion
+++ b/bin/morayversion
@@ -25,10 +25,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 client = moray.createClient(clientOptions);
diff --git a/bin/putbucket b/bin/putbucket
index fe180db..12bbb00 100755
--- a/bin/putbucket
+++ b/bin/putbucket
@@ -92,6 +92,7 @@ putOptions = {
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'i:stu:x:',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/putobject b/bin/putobject
index 9f4d92f..fe7446d 100755
--- a/bin/putobject
+++ b/bin/putobject
@@ -30,6 +30,7 @@ value = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'd:e:',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/bin/reindexobjects b/bin/reindexobjects
index e098f49..4e3023f 100755
--- a/bin/reindexobjects
+++ b/bin/reindexobjects
@@ -27,10 +27,10 @@ count = 100;
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 if (parser.optind() >= process.argv.length)
diff --git a/bin/sql b/bin/sql
index 2840f28..ebd8f20 100755
--- a/bin/sql
+++ b/bin/sql
@@ -25,10 +25,10 @@ clientOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': '',
     'clientOptions': clientOptions,
-    'onUsage': cmdutil.usage,
-    'onOption': function () { cmdutil.usage(); }
+    'onUsage': cmdutil.usage
 });
 
 if (parser.optind() >= process.argv.length) {
diff --git a/bin/updatemany b/bin/updatemany
index 33a470f..e30c4ba 100755
--- a/bin/updatemany
+++ b/bin/updatemany
@@ -29,6 +29,7 @@ updateOptions = {};
 parser = moraycli.parseCliOptions({
     'argv': process.argv,
     'env': process.env,
+    'errstream': process.stderr,
     'extraOptStr': 'd:l:',
     'clientOptions': clientOptions,
     'onUsage': cmdutil.usage,
diff --git a/lib/cmd.js b/lib/cmd.js
index 4642a10..f754124 100644
--- a/lib/cmd.js
+++ b/lib/cmd.js
@@ -10,6 +10,11 @@
 
 /*
  * lib/cmd.js: common functions used by command-line utilities
+ *
+ * Many of these functions follow a similar pattern: when there's a fatal error
+ * (like failure to parse a numeric option), they emit a message to stderr and
+ * then return false.  Callers use that to eventually print a usage message and
+ * exit.
  */
 
 var assert = require('assert-plus');
@@ -18,26 +23,81 @@ var getopt = require('posix-getopt');
 var net = require('net');
 var path = require('path');
 var url = require('url');
+var VError = require('verror');
+var fprintf = require('extsprintf').fprintf;
+
+/* Option string for options common to all commands */
+var commonOptStr = 'h:(host)p:(port)S:(service)v';
 
+/*
+ * Currently, we only export parseCliOptions().  If we find we need more (or
+ * less) fine-grained control over option parsing or general CLI execution, we
+ * can provide higher or lower-level interfaces here.
+ */
 exports.parseCliOptions = parseCliOptions;
-exports.parseTcpPort = parseTcpPort;
 exports.commonUsage = '[-h host] [-p port] [-S service] [-v]';
 
-var commonOptStr = 'h:(host)p:(port)S:(service)v';
-
 /*
- * Parses command-line options.
+ * Parse command-line options and common environment variables.  This function
+ * instantiates a node-getopt option parser that will handle the requested
+ * command-line options plus the common options implemented in this file.
+ * Common options are processed to fill in the "clientOptions" object described
+ * below.  Each command-specific option is passed to the "onOption" callback
+ * function described below.
+ *
+ * The returned value is the node-getopt parser itself, which allows callers to
+ * access the index of the last option argument that was parsed.
+ *
+ * Named arguments:
+ *
+ *  argv            command-line arguments, including Node's leading two
+ *                  arguments.  This would usually be `process.argv`.
+ *
+ *  env             process environment.  This would usually be `process.env`.
+ *
+ *  errstream       stream for error messages.  This would usually be
+ *                  `process.stderr`.
+ *
+ *  extraOptStr     getopt-style option string for this command's custom
+ *                  options.  This will be combined with the common option
+ *                  string above and used to parse options with node-getopt.
+ *
+ *  clientOptions   an object that will be populated with arguments used to
+ *                  create a Moray client.  That will include some combination
+ *                  of "host", "port", and "srvDomain" as well as an appropriate
+ *                  bunyan logger, configured based on the environment and
+ *                  presence of "-v" options.
+ *
+ *  onUsage         function to be invoked when there's a usage error
+ *
+ *  onOption        function to be invoked for each getopt option parsed.  The
+ *                  only argument is the option returned by node-getopt itself.
+ *                  This field should be specified if and only if extraOptStr is
+ *                  a non-empty string.  The function should handle unrecognized
+ *                  options (usually by invoking the caller's usage function).
+ *
+ * This function uses the MORAY_SERVICE and MORAY_URL environment variables from
+ * `env` to fill in common options where possible.  `LOG_LEVEL` is used to
+ * configure the level of the bunyan logger.  Log verbosity is increased with
+ * each instance of the "-v" option.
  */
 function parseCliOptions(args) {
-    var parser, option;
+    var parser, option, commonOpts, shortOpts;
 
     assert.object(args, 'args');
     assert.object(args.argv, 'args.argv');
     assert.object(args.env, 'args.env');
+    assert.object(args.errstream, 'args.errstream');
     assert.string(args.extraOptStr, 'args.extraOptStr');
     assert.object(args.clientOptions, 'args.clientOptions');
     assert.func(args.onUsage, 'args.onUsage');
-    assert.func(args.onOption, 'args.onOption');
+    assert.optionalFunc(args.onOption, 'args.onOption');
+
+    if (args.extraOptStr === '') {
+        assert.ok(typeof (args.onOption) != 'function');
+    } else {
+        assert.func(args.onUsage, 'args.onOption');
+    }
 
     if (!args.clientOptions.log) {
         args.clientOptions.log = bunyan.createLogger({
@@ -48,7 +108,26 @@ function parseCliOptions(args) {
         });
     }
 
-    /* XXX validate extraOptStr doesn't try to override our options */
+    /*
+     * Validate that the extra option string doesn't try to override any of our
+     * common options.  It's easiest to strip out long option names and then
+     * check for the presence of any of our options.
+     */
+    shortOpts = args.extraOptStr;
+    shortOpts = shortOpts.replace(/\([^)]*\)/g, '');
+    commonOpts = commonOptStr;
+    commonOpts = commonOpts.replace(/\([^)]*\)/g, '');
+    commonOpts = commonOpts.replace(/:/g, '');
+    commonOpts.split('').forEach(function (c) {
+        if (shortOpts.indexOf(c) != -1) {
+            throw (new VError('internal error: ' +
+                'command cannot replace option: -%s', c));
+        }
+    });
+
+    /*
+     * Parse the combination option string.
+     */
     parser = new getopt.BasicParser(commonOptStr + args.extraOptStr, args.argv);
     while ((option = parser.getopt()) !== undefined) {
         switch (option.option) {
@@ -56,20 +135,35 @@ function parseCliOptions(args) {
         case 'p':
         case 'S':
         case 'v':
-            if (!parseCommonCliOption(args.clientOptions, option)) {
+            if (!parseCommonCliOption(args.errstream,
+                args.clientOptions, option)) {
                 args.onUsage();
             }
             break;
 
         default:
-            args.onOption(option);
+            if (args.extraOptStr === '') {
+                args.onUsage();
+            } else {
+                args.onOption(option);
+            }
             break;
         }
     }
 
+    /*
+     * For all of our commands, we use failFast by default so that the command
+     * doesn't block indefinitely if Moray is down, and we use
+     * mustCloseBeforeNormalProcessExit to make sure the commands clean up after
+     * themselves.
+     */
     args.clientOptions.failFast = true;
     args.clientOptions.mustCloseBeforeNormalProcessExit = true;
-    if (!finalizeCliOptions(args.clientOptions, args.env)) {
+
+    /*
+     * Perform final validation of the common options.
+     */
+    if (!finalizeCliOptions(args.errstream, args.clientOptions, args.env)) {
         args.onUsage();
     }
 
@@ -78,20 +172,17 @@ function parseCliOptions(args) {
 
 /*
  * Parses one of the command-line options that's common to several commands.
- * This currently includes:
- *
- *   -h / --host HOSTNAME
- *   -p / --port PORT
- *   -S / --service SERVICE
+ * See the option string at the top of this file.
  *
  * "options" is an object in which we're building the Moray client
  * configuration.  "option" is a node-getopt option object.
  *
  * If there is an error, prints an error message and returns false.
  */
-function parseCommonCliOption(options, option) {
+function parseCommonCliOption(errstream, options, option) {
     var p, log;
 
+    assert.object(errstream, 'errstream');
     assert.object(options, 'options');
     assert.object(option, 'option');
 
@@ -103,14 +194,14 @@ function parseCommonCliOption(options, option) {
     case 'p':
         p = parseTcpPort(option.optarg);
         if (p === null) {
-            console.error('-p/--port: expected valid TCP port');
+            fprintf(errstream, '-p/--port: expected valid TCP port');
             return (false);
         }
         options.port = p;
         break;
 
     case 'S':
-        if (!validateSrvDomain(option.optarg)) {
+        if (!validateSrvDomain(errstream, option.optarg)) {
             return (false);
         }
 
@@ -140,12 +231,12 @@ function parseCommonCliOption(options, option) {
  * with default values.  Like parseCommonCliOption(), on error this prints an
  * error message to stderr and returns false.
  */
-function finalizeCliOptions(options, env) {
+function finalizeCliOptions(errstream, options, env) {
     if (options.srvDomain !== undefined) {
         /* The user specified -s/--service. */
         if (options.port !== undefined || options.host !== undefined) {
-            console.error('-S/--service cannot be combined with -h/--host ' +
-                'or -p/--port');
+            fprintf(errstream, '-S/--service cannot be combined with ' +
+                '-h/--host or -p/--port');
             return (false);
         }
 
@@ -158,14 +249,19 @@ function finalizeCliOptions(options, env) {
     }
 
     if (options.host !== undefined || options.port !== undefined) {
-        return (populateDirectArguments(options, env));
+        /*
+         * The user specified one -h/--host and -p/--port.  Assume they want the
+         * direct mode and fill in the other option from MORAY_URL or our
+         * built-in default values.
+         */
+        return (populateDirectArguments(errstream, options, env));
     }
 
     /*
      * The user specified nothing on the command line.  Check for MORAY_SERVICE.
      */
     if (env['MORAY_SERVICE']) {
-        if (!validateSrvDomain(env['MORAY_SERVICE'])) {
+        if (!validateSrvDomain(errstream, env['MORAY_SERVICE'])) {
             return (false);
         }
 
@@ -173,12 +269,16 @@ function finalizeCliOptions(options, env) {
         return (true);
     }
 
-    return (populateDirectArguments(options, env));
+    /*
+     * If we get this far, all that's left to try is MORAY_URL, then fall back
+     * to built-in defaults.
+     */
+    return (populateDirectArguments(errstream, options, env));
 }
 
-function validateSrvDomain(domain) {
+function validateSrvDomain(errstream, domain) {
     if (net.isIP(domain)) {
-        console.error(
+        fprintf(errstream,
             'cannot use an IP address with -S/--service/MORAY_SERVICE');
         return (false);
     }
@@ -194,7 +294,7 @@ function validateSrvDomain(domain) {
  *
  * Importantly, don't parse MORAY_URL if we're not going to use it.
  */
-function populateDirectArguments(options, env) {
+function populateDirectArguments(errstream, options, env) {
     var u, p;
 
     if (options.host === undefined || options.port === undefined) {
@@ -210,7 +310,8 @@ function populateDirectArguments(options, env) {
             if (options.port === undefined && u['port'] !== null) {
                 p = parseTcpPort(u['port']);
                 if (p === null) {
-                    console.error('port in MORAY_URL is not a valid TCP port');
+                    fprintf(errstream,
+                        'port in MORAY_URL is not a valid TCP port');
                     return (false);
                 }
 
diff --git a/package.json b/package.json
index d4748c4..63a9530 100644
--- a/package.json
+++ b/package.json
@@ -15,6 +15,7 @@
         "bunyan": "^1.3.2",
         "cmdutil": "^1.1.0",
         "cueball": "^1.0.3",
+	"extsprintf": "^1.3.0",
         "fast": "^2.1.0",
         "libuuid": "0.2.1",
         "jsprim": "^1.3.0",
