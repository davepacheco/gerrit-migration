From 0202d61a9cf1b04c1082fbd5557416d1b9ca5e95 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Mon, 18 Jun 2018 19:02:23 +0000
Subject: [PATCH] joyent/node-verror#56 Add more tests to tst.context.js

---
 test/tst.context.js | 55 ++++++++++++++++++++++++++++++++++++---------
 1 file changed, 45 insertions(+), 10 deletions(-)

diff --git a/test/tst.context.js b/test/tst.context.js
index 300a4a3..45d7a91 100644
--- a/test/tst.context.js
+++ b/test/tst.context.js
@@ -4,21 +4,56 @@
 
 var mod_assert = require('assert');
 var mod_verror = require('../lib/verror');
-var mod_isError = require('core-util-is').isError;
 var mod_vm = require('vm');
 
 var VError = mod_verror.VError;
 var WError = mod_verror.WError;
 
-var err = new Error();
-var verr = new VError(err);
-mod_assert.ok(mod_isError(verr.cause()));
+var prog1 = 'callback(new Error(), "Error")';
+var prog2 = 'var e = new Error(); e.name = "BarError"; callback(e, "BarError")';
+
+function runTests(cerr, name) {
+	var verr;
+
+	/*
+	 * The constructor should recognize the other context's Error as an
+	 * error for wrapping, and not as an options object.
+	 */
+	verr = new VError(cerr);
+	mod_assert.equal(verr.cause(), cerr);
+
+	verr = new VError({ cause: cerr });
+	mod_assert.equal(verr.cause(), cerr);
+
+	/*
+	 * The assertions done at each step while walking the cause chain
+	 * should be okay with the other context's Error.
+	 */
+	mod_assert.deepEqual(
+	    mod_verror.findCauseByName(cerr, 'FooError'), null);
+	mod_assert.equal(
+	    mod_verror.findCauseByName(verr, name), cerr);
+
+	/*
+	 * Verify that functions that take an Error as an argument
+	 * accept the Error created in the other context.
+	 */
+	mod_assert.deepEqual(mod_verror.cause(cerr), null);
+	mod_assert.deepEqual(mod_verror.info(cerr), {});
+	mod_assert.equal(typeof (mod_verror.fullStack(cerr)), 'string');
+}
 
 var context = mod_vm.createContext({
-	'callback': function callback(err2) {
-		mod_assert.ok(mod_isError(err2));
-		var verr2 = new VError(err);
-		mod_assert.ok(mod_isError(verr2.cause()));
-	}
+	'callback': runTests
 });
-mod_vm.runInContext('callback(new Error())', context);
+
+/*
+ * We run the same set of tests using two different errors: one whose name is
+ * the default "Error", and one whose name has been changed.
+ *
+ * Note that changing the name is not the same as having a constructor that
+ * inherits from Error. Such Errors are not currently supported when
+ * constructed in another context.
+ */
+mod_vm.runInContext(prog1, context);
+mod_vm.runInContext(prog2, context);
-- 
2.21.0

