From 86e21e03d4a517cd20d461692fba446364d3c563 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Tue, 29 Jan 2019 00:12:24 +0000
Subject: [PATCH] MANTA-4097 muskie test suite should allow override of SSH key
 path

---
 README.md         | 12 ++++++++----
 test/acsetup.js   |  2 +-
 test/auth.test.js |  9 +++------
 test/helper.js    | 43 +++++++++++++++++++++++++++++++++++--------
 4 files changed, 47 insertions(+), 19 deletions(-)

diff --git a/README.md b/README.md
index ee49b66..147af10 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2018, Joyent, Inc.
+    Copyright (c) 2019, Joyent, Inc.
 -->
 
 # manta-muskie: The Manta WebAPI
@@ -36,8 +36,11 @@ prerequisites in your development environment:
    can be used to do this.  You can find it at
    /opt/smartdc/manta-deployment/tools/add-dev-user.
 2. The ssh key that you use to authenticate as this account should be
-   passwordless.  It must also be stored locally, with the public key being
-   called $HOME/.ssh/id\_rsa.pub.
+   passwordless.  It must also be stored locally, with the private key in
+   file `$HOME/.ssh/id_rsa`.  You can override this path by setting
+   `MUSKIETEST_REGULAR_KEYFILE` in the environment to the location of the
+   private key.  The public key path will be generated by appending `.pub` to
+   the private key path; e.g., `$HOME/.ssh/id_rsa.pub`.
 3. Some tests also require an operator account to test with.  By default, the
    tests will use the "poseidon" account, but you must provide a valid private
    key for the poseidon account at `$HOME/.ssh/id_rsa_poseidon`.
@@ -84,10 +87,11 @@ In summary, you should make sure these environment variables are set properly:
 | ------------------------ | ----------- |
 | `MANTA_URL`               | points to port 8080 the instance of muskie that you're testing |
 | `MANTA_USER`              | refers to your non-operator user created above |
-| `MANTA_KEY_ID`            | refers to a passwordless ssh key in $HOME/.ssh/id\_rsa |
+| `MANTA_KEY_ID`            | refers to a passwordless ssh key in `$HOME/.ssh/id_rsa`; see also: `MUSKIETEST_REGULAR_KEYFILE` |
 | `MANTA_TLS_INSECURE `     | usually 1 in an environment with self-signed certificates |
 | `MUSKIETEST_OPERATOR_USER`| operator account for testing (optional, "poseidon" used by default) |
 | `MUSKIETEST_OPERATOR_KEYFILE` | path to a passwordless ssh key for `MUSKIETEST_OPERATOR_USER` (optional, `$HOME/.ssh/id_rsa_poseidon` used by default) |
+| `MUSKIETEST_REGULAR_KEYFILE` | path to a passwordless ssh key for `MANTA_USER` (optional, `$HOME/.ssh/id_rsa` used by default) |
 | `SDC_URL`                 | points to the SDC deployment that you're using to test |
 | `SDC_ACCOUNT`             | same value as `MANTA_USER` |
 | `SDC_KEY_ID`              | same value as `MANTA_KEY_ID` |
diff --git a/test/acsetup.js b/test/acsetup.js
index 938216c..b763d82 100644
--- a/test/acsetup.js
+++ b/test/acsetup.js
@@ -154,7 +154,7 @@ var OPER_POLICIES = [
 ];
 
 function setup(cb) {
-    var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa.pub', 'utf8');
+    var key = helper.getRegularPubkey();
     vasync.pipeline({funcs: [
         function createUsers(_, pipelinecb) {
             vasync.forEachPipeline({
diff --git a/test/auth.test.js b/test/auth.test.js
index 5f7b74f..e74c57f 100644
--- a/test/auth.test.js
+++ b/test/auth.test.js
@@ -90,8 +90,7 @@ function getHttpAuthToken(opts, cb) {
     var ssoPassword = opts.ssoPassword || process.env.SSO_PASSWORD;
     var keyid = opts.keyId || process.env.MANTA_KEY_ID;
 
-    var privatekey = opts.privatekey ||
-        fs.readFileSync(process.env.HOME + '/.ssh/id_rsa', 'utf8');
+    var privatekey = opts.privatekey || helper.getRegularPrivkey();
 
     if (!ssoUrl || !ssoLogin || !ssoPassword || !privatekey) {
         cb();
@@ -612,8 +611,7 @@ if (process.env.SSO_URL) {
             ssoLogin: process.env.SSO_LOGIN,
             ssoPassword: process.env.SSO_PASSWORD,
             keyid: process.env.MANTA_KEY_ID,
-            privatekey: fs.readFileSync(process.env.HOME + '/.ssh/id_rsa',
-                                        'utf8')
+            privatekey: helper.getRegularPrivkey()
         };
         var self = this;
 
@@ -645,8 +643,7 @@ if (process.env.SSO_URL) {
             ssoLogin: process.env.SSO_LOGIN,
             ssoPassword: process.env.SSO_PASSWORD,
             keyid: process.env.MANTA_KEY_ID,
-            privatekey: fs.readFileSync(process.env.HOME + '/.ssh/id_rsa',
-                                        'utf8')
+            privatekey: helper.getRegularPrivkey()
         };
         var self = this;
 
diff --git a/test/helper.js b/test/helper.js
index 14150ab..8c3774d 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -47,6 +47,15 @@ var TOKEN_CFG = {
 var POSEIDON_ID = process.env.MUSKIE_POSEIDON_ID ||
         '930896af-bf8c-48d4-885c-6573a94b1853';
 
+/*
+ * We need a regular (non-operator) account for some tests.  The regular
+ * Manta client environment variables (MANTA_USER, MANTA_KEY_ID) are used
+ * for this account.  Allow the private key to be stored at a location
+ * other than the default "$HOME/.ssh/id_rsa" file:
+ */
+var TEST_REGULAR_KEY = process.env.MUSKIETEST_REGULAR_KEYFILE ||
+        (process.env.HOME + '/.ssh/id_rsa');
+
 /*
  * We need an operator account for some tests, so we use poseidon, unless an
  * alternate one is provided.
@@ -58,6 +67,22 @@ var TEST_OPERATOR_KEY = process.env.MUSKIETEST_OPERATOR_KEYFILE ||
 
 ///--- Helpers
 
+function getRegularPubkey() {
+    return (fs.readFileSync(TEST_REGULAR_KEY + '.pub', 'utf8'));
+}
+
+function getRegularPrivkey() {
+    return (fs.readFileSync(TEST_REGULAR_KEY, 'utf8'));
+}
+
+function getOperatorPubkey() {
+    return (fs.readFileSync(TEST_OPERATOR_KEY + '.pub', 'utf8'));
+}
+
+function getOperatorPrivkey() {
+    return (fs.readFileSync(TEST_OPERATOR_KEY, 'utf8'));
+}
+
 function createLogger(name, stream) {
     var log = bunyan.createLogger({
         level: (process.env.LOG_LEVEL || 'warn'),
@@ -71,7 +96,7 @@ function createLogger(name, stream) {
 
 
 function createClient() {
-    var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa', 'utf8');
+    var key = getRegularPrivkey();
     var log = createLogger();
     var client = manta.createClient({
         agent: false,
@@ -94,7 +119,7 @@ function createClient() {
 
 
 function createUserClient(login) {
-    var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa', 'utf8');
+    var key = getRegularPrivkey();
     var log = createLogger();
     var client = manta.createClient({
         agent: false,
@@ -151,7 +176,7 @@ function createRawClient() {
 
 
 function createSDCClient() {
-    var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa', 'utf8');
+    var key = getRegularPrivkey();
     var log = createLogger();
     var client = smartdc.createClient({
         log: log,
@@ -169,13 +194,13 @@ function createSDCClient() {
 }
 
 function createOperatorSDCClient() {
-    var key = fs.readFileSync(TEST_OPERATOR_KEY);
+    var key = getOperatorPrivkey();
     var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
 
     var log = createLogger();
     var client = smartdc.createClient({
         log: log,
-        sign: manta.privateKeySigner({
+        sign: smartdc.privateKeySigner({
             key: key,
             keyId: keyId,
             log: log,
@@ -191,7 +216,7 @@ function createOperatorSDCClient() {
 }
 
 function createOperatorClient() {
-    var key = fs.readFileSync(TEST_OPERATOR_KEY);
+    var key = getOperatorPrivkey();
     var keyId = sshpk.parseKey(key, 'auto').fingerprint('md5').toString();
 
     var log = createLogger();
@@ -274,7 +299,7 @@ function signUrl(opts, expires, cb) {
         cb = expires;
         expires = Date.now() + (1000 * 300);
     }
-    var key = fs.readFileSync(process.env.HOME + '/.ssh/id_rsa', 'utf8');
+    var key = getRegularPrivkey();
     var keyId = process.env.MANTA_KEY_ID;
     var url = process.env.MANTA_URL || 'http://localhost:8080';
     var user = process.env.MANTA_USER;
@@ -428,5 +453,7 @@ module.exports = {
     createAuthToken: createAuthToken,
     createOperatorSDCClient: createOperatorSDCClient,
     createOperatorClient: createOperatorClient,
-    signUrl: signUrl
+    signUrl: signUrl,
+    getRegularPubkey: getRegularPubkey,
+    getRegularPrivkey: getRegularPrivkey,
 };
-- 
2.21.0

