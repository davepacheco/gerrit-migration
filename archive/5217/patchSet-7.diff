From b9311df7cbe157117e39f80ddd73922212df99cb Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Mon, 7 Jan 2019 12:31:23 -0500
Subject: [PATCH] OS-7436 vminfod can be overwhelmed by ZFS sysevents

---
 src/vm/node_modules/vminfod/vminfod.js        | 458 ++++++++++++------
 src/vm/node_modules/vmload/vmload-datasets.js |  85 +++-
 src/vm/tests/test-vmload-datasets.js          |   3 +-
 3 files changed, 374 insertions(+), 172 deletions(-)

diff --git a/src/vm/node_modules/vminfod/vminfod.js b/src/vm/node_modules/vminfod/vminfod.js
index f7918ac7..92a7fed0 100644
--- a/src/vm/node_modules/vminfod/vminfod.js
+++ b/src/vm/node_modules/vminfod/vminfod.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  */
 
@@ -211,9 +211,9 @@ var QUEUE_TASK_TIMEOUT = 1 * 60 * 1000;
 var DEFAULT_REFRESH_RECORDS = 5;
 
 /*
- * Default zpool for zones
+ * Dataset name for delegated datasets.
  */
-var ZONES_ZPOOL = 'zones';
+var DELEGATED_DATASET_NAME = 'data';
 
 /*
  * Default interval timer to do a full system refresh of the vminfod cache.
@@ -2164,77 +2164,111 @@ Vminfod.prototype.handleFsEvent = function handleFsEvent(obj) {
 /*
  * handleZpoolEvent() is a callback for a zpool watcher
  *
- * Process:
- *
- *   When action is clone or create:
- *     - fetch zpool data
- *     - merge into vm_cache
- *     - refresh vmobj
- *
- *   When action is set:
- *     - unset vm_data pieces
- *     - fetch zpool data
- *     - merge into vm_cache
- *     - refresh vmobj
- *
- *   When action is destroy:
- *     - unset vm_data
- *     - refresh vmobj
- *
+ * All zpool related events for the system will funnel through this function.
+ * Filtering will be done on the incoming events to determine 1. if any data
+ * should be reloaded and 2. if so, how much data.  We attempt to be as
+ * performant as possible by only reloading data when absolutely necessary, and
+ * only reloading the necessary bits of information.
+ *
+ * Any filtering that can be done without concern for the existing VMs on the
+ * system is done immediately (before pushing any tasks to the event queue).
+ * Any filtering that relies on knowing VM objects on the system is done as part
+ * of the task pushed to the queue.  This ensures that, when a ZFS event is
+ * processed and looks at which VMs are on the system, it has the most
+ * up-to-date version of the VMs possible.  For example, if a zone event came in
+ * followed immediately after by a ZFS event, the zone event is what is
+ * responsible for letting vminfod know that a VM has been created.  If the ZFS
+ * event filtering logic were to run before the VM was considered created, the
+ * ZFS event would be prematurely filtered out and never properly processed
+ * because the filtering logic wouldn't find a corresponding VM to the dataset
+ * modified.
+ *
+ * The non VM filtering logic will simply look at the type of event coming in,
+ * and determine if any are duplicates, or would result in duplicate work being
+ * done.  An example of this is a `zfs rollback` which can result in 0 or many
+ * "destroy" events for any snapshots that are removed during the rollback
+ * process.  This function will filter out any excess events that won't result
+ * in any modifications for the VM objects that vminfod cares about.
+ *
+ * The VM filtering logic will do a couple of steps that can be seen below.
+ * The quick synopsis of them is:
+ *
+ * 1. Filter out events for zpools that don't contain VMs.
+ * 2. Filter out events for child datasets of a VMs delegated dataset.
+ *
+ * Before a task is pushed to the queue, there is logic to make the "action" as
+ * seen from the sysevent, to an "action" which denotes what task to do that is
+ * specific to vminfod.  For example, a sysevent of "clone", "create", or
+ * "snapshot" will result in the "fetchAndCopy" task of vminfod.  There is
+ * nothing inherently special about the name "fetchAndCopy" - descriptive
  */
 Vminfod.prototype.handleZpoolEvent = function handleZpoolEvent(obj) {
     var self = this;
+
+    var _s;
     var action;
     var description;
-    var sections = ['datasets', 'mountpoints', 'snapshots'];
-    var name = obj.dsname;
-    var _s = name.split('@');
-    var dsname = _s[0];
-    var snapname = _s[1];
+    var dsname;
+    var name;
     var parts;
-    var uuid;
-    var zonepath;
+    var rollbackRe = /\/%rollback$/;
+    var sections = ['datasets', 'mountpoints', 'snapshots'];
+    var snapname;
+    var zpool;
     var meta = util.format('dsname: %s action: %s %s',
         obj.dsname, obj.action, obj.extras).trim();
 
     self.log.debug({obj: obj}, 'handleZpoolEvent: %s', meta);
 
     /*
-     * break the incoming zfs dataset into an array
-     * ex => ['zones', '<uuid>', 'config']
+     * Break the "dsname" property into the dataset name and the snapshot name
+     * (may be empty).
+     *
      */
-    parts = dsname.split('/');
-    if (parts[1]) {
-        /*
-         * Attempt to extract a UUID from the second part.  This will succeed
-         * for KVM instances (for example) that have a dataset like
-         * /zones/<uuid>-disk0.
-         */
-        uuid = extractUUID(parts[1]);
-    }
+    name = obj.dsname;
+    _s = name.split('@');
+    dsname = _s[0];
+    snapname = _s[1];
+
+    assert.string(dsname, 'dsname');
+    assert.optionalString(snapname, 'snapname');
+    assert(!_s[2], 'invalid dataset name');
 
     /*
-     * If we extracted a UUID, we then check to see if it maps to a VM that
-     * we know about.  It can be the case where the ZFS dataset being
-     * modified here has a UUID as the second part of its name but does not
-     * belong to a VM (a simple example is the ZFS dataset of an image).  We
-     * unset the `uuid` variable if it does not belong to a valid VM and
-     * proceed as usual without refreshing a specific VM at the end.
+     * ZFS sysevents may end in "/%rollback" during a `rollback` command; "%" is
+     * a special character that will never be in a valid dataset name.
+     *
+     * A `zfs rollback` command may result in multiple sysevents, for example:
+     *
+     * # sysevent -j EC_zfs ESC_ZFS_history_event | json -ag \
+     *     data.history_dsname data.history_internal_name
+     * zones/foo/%rollback destroy
+     * zones/foo/%rollback clone swap
+     *
+     * This can also be more if snapshots are deleted as a result of the
+     * `rollback`.  The only action we care about is a "clone swap" for a
+     * dataset that ends in "/%rollback", anything else will be discarded.
+     *
+     * "/%rollback" will be removed from the dsname variable.
      */
-    if (uuid && !self.vmobjs.hasOwnProperty(uuid)) {
-        self.log.debug('UUID "%s" extracted for a non-vm', uuid);
-        uuid = null;
+    if (dsname.match(rollbackRe)) {
+        if (obj.action !== 'clone swap') {
+            self.log.debug({obj: obj},
+                'ignoring %rollback dataset for action "%s"', obj.action);
+            return;
+        }
+
+        dsname = dsname.replace(rollbackRe, '');
     }
 
     /*
-     * If the dataset name matches "/zones/<uuid>" exactly we use that as the
-     * zonepath argument to getDatasets.  Otherwise, we use the parent dataset.
+     * break the incoming zfs dataset into an array
+     * ex => ['zones', '<uuid>', 'config']
      */
-    if (parts[0] === ZONES_ZPOOL && parts[1] === uuid && !parts[2]) {
-        zonepath = dsname;
-    } else {
-        zonepath = path.dirname(dsname);
-    }
+    parts = dsname.split('/');
+    zpool = parts[0];
+
+    assert.string(zpool, 'zpool');
 
     /*
      * Based on the "action" seen from the ZFS sysevent, we determine ahead of
@@ -2257,50 +2291,7 @@ Vminfod.prototype.handleZpoolEvent = function handleZpoolEvent(obj) {
         action = 'fetchExpireAndCopy';
         break;
     case 'clone swap': // rollback
-        action = 'fetchExpireAndCopy';
-        if (uuid) {
-            self.log.debug('zfs rollback seen for %s on %s', uuid, dsname);
-
-            /*
-             * In the event of a ZFS rollback for a zones' dataset (or one of
-             * its child datasets), the procedure is fairly involved.  Because
-             * files may be modified or deleted as a result of the rollback
-             * operation, we enqueue the following tasks:
-             *
-             * 1. the ZFS event below to fetchExpireAndCopy
-             *
-             * (and after the call to setImmediate)
-             *
-             * 2. restart the VM's FS watches
-             * 3. check the metadata files (json files in config/ for the zone)
-             * 4. check the last exited file (lastexited)
-             */
-            setImmediate(function zfsRollbackRestartFsWatchers() {
-                self.event_queue.enqueue({
-                    description: util.format('zone %s restart watchers', uuid),
-                    timeout: QUEUE_TASK_TIMEOUT,
-                    func: function zfsRollbackRestartWatcher(extras, callback) {
-                        /*
-                         * Ensure the VM exists before trying to restart its
-                         * file watchers.  It can be the case that the VM
-                         * existed when the "rollback" event came in, but has
-                         * since been deleted.
-                         */
-                        if (!self.vmobjs.hasOwnProperty(uuid)) {
-                            extras.log.debug('vmobj doesn\'t exist for %s',
-                                uuid);
-                            callback();
-                            return;
-                        }
-
-                        self.restartVmWatchers(uuid, callback);
-                    }
-                });
-
-                self.enqueueMetadataFileUpdate(uuid, 'rollback');
-                self.enqueueLastexitFileUpdate(uuid, 'rollback');
-            });
-        }
+        action = 'fetchExpireCopyAndRollback';
         break;
     case 'destroy':
         action = 'expire';
@@ -2313,9 +2304,187 @@ Vminfod.prototype.handleZpoolEvent = function handleZpoolEvent(obj) {
         self.log.fatal('unknown action: %s', obj.action);
         return;
     }
+
     assert.string(action, 'action');
     description = util.format('dsname: %s action: %s', obj.dsname, action);
 
+    self.event_queue.enqueue({
+        description: 'handle zfs event - ' + description,
+        timeout: QUEUE_TASK_TIMEOUT,
+        func: function handleZfsEventTask(extras, cb) {
+            var datasetObj = {};
+            var uuid;
+            var zpools = self.zonesZpools();
+
+            /*
+             * Check to see if the zpool for the event seen is in the list of
+             * zpools in use by VMs on the system.
+             */
+            if (!zpools.hasOwnProperty(zpool)) {
+                self.log.debug({zpool: zpool, zpools: Object.keys(zpools)},
+                    'ignoring %s zfs event for zpool: %s', dsname, zpool);
+                cb();
+                return;
+            }
+
+            if (parts[1]) {
+                /*
+                 * Attempt to extract a UUID from the second part.  This will
+                 * succeed for KVM instances (for example) that have a dataset
+                 * like /zones/<uuid>-disk0.
+                 */
+                uuid = extractUUID(parts[1]);
+            }
+
+            /*
+             * If we extracted a UUID, we then check to see if it maps to a VM
+             * that we know about.  It can be the case where the ZFS dataset
+             * being modified here has a UUID as the second part of its name but
+             * does not belong to a VM (a simple example is the ZFS dataset of
+             * an image).  We unset the `uuid` variable if it does not belong to
+             * a valid VM and proceed as usual without refreshing a specific VM
+             * at the end.
+             */
+            if (uuid && !self.vmobjs.hasOwnProperty(uuid)) {
+                self.log.debug('UUID "%s" extracted for a non-vm', uuid);
+                uuid = null;
+            }
+
+            /*
+             * Check to see if the dataset being modified will affect the VM
+             * object itself, or is a child dataset (via delegated datasets or
+             * manual intervention by the user) that can be ignored.
+             */
+            if (uuid && parts[1] === uuid) {
+                /*
+                 * If the dataset name is for a child of the zone's delegated
+                 * dataset, we ignore it here as it won't affect the VM object.
+                 * i.e.:
+                 *
+                 * "/zones/<uuid>/data/..."
+                 */
+                if (parts[2] && parts[2] === DELEGATED_DATASET_NAME
+                    && parts[3]) {
+
+                    self.log.debug({zpool: zpool, uuid: uuid, dataset: dsname},
+                        'ignoring zfs event for delegated child dataset %s',
+                        dsname);
+                    cb();
+                    return;
+                }
+            }
+
+            /*
+             * - `zonepath` is set to the dataset that was affected (getDatasets
+             * requires it be passed with a leading '/' character).
+             * - `depth` is set to 1 to ensure that any snapshots for the given
+             * dataset affected are also loaded.  This is important for VM
+             * properties such as "indestructible_zoneroot" which is determined
+             * based on the presence of a snapshot on the zone root dataset.
+             */
+            datasetObj.zonepath = util.format('/%s', dsname);
+            datasetObj.depth = 1;
+
+            switch (action) {
+            case 'fetchAndCopy':
+                fetch(datasetObj, function fetchAndCopyDone(err, cache) {
+                    if (err) {
+                        finish();
+                        return;
+                    }
+                    copy(cache);
+                    finish();
+                });
+                return;
+            case 'fetchExpireAndCopy':
+                fetch(datasetObj, function fetchExpireAndCopyDone(err, cache) {
+                    if (err) {
+                        finish();
+                        return;
+                    }
+                    expire();
+                    copy(cache);
+                    finish();
+                });
+                return;
+            case 'fetchExpireCopyAndRollback':
+                self.log.debug('zfs rollback seen for VM "%s" on %s',
+                    uuid, dsname);
+
+                /*
+                 * In the event of a ZFS rollback for a zones' dataset (or one
+                 * of its child datasets), the procedure is fairly involved.
+                 * Because files may be modified or deleted as a result of the
+                 * rollback operation, we process the following tasks:
+                 *
+                 * 1. (finish this task) ZFS event to fetchExpireCopyAndRollback
+                 * 2. restart the VM's FS watches
+                 * 3. check the metadata files (json files in config/ for the
+                 *    zone)
+                 * 4. check the last exited file (lastexited)
+                 */
+                if (uuid) {
+                    self.event_queue.enqueue({
+                        description: util.format('zone %s restart watchers',
+                            uuid),
+                        timeout: QUEUE_TASK_TIMEOUT,
+                        func: function
+                            zfsRollbackRestartWatcher(fsExtras, callback) {
+                            /*
+                             * Ensure the VM exists before trying to restart
+                             * its file watchers.  It can be the case that
+                             * the VM existed when the "rollback" event came
+                             * in, but has since been deleted.
+                             */
+                            if (!self.vmobjs.hasOwnProperty(uuid)) {
+                                fsExtras.log.debug(
+                                    'vmobj doesn\'t exist for %s',
+                                    uuid);
+                                callback();
+                                return;
+                            }
+
+                            self.restartVmWatchers(uuid, callback);
+                        }
+                    });
+
+                    self.enqueueMetadataFileUpdate(uuid, 'rollback');
+                    self.enqueueLastexitFileUpdate(uuid, 'rollback');
+                }
+
+                fetch(datasetObj,
+                    function fetchExpireCopyAndRollbackDone(err, cache) {
+
+                    if (err) {
+                        finish();
+                        return;
+                    }
+                    expire();
+                    copy(cache);
+                    finish();
+                });
+                return;
+            case 'expire':
+                expire();
+                finish();
+                break;
+            default:
+                assert(false, util.format('unknown action: %s', action));
+                break;
+            }
+
+            function finish() {
+                if (!uuid) {
+                    cb();
+                    return;
+                }
+
+                extras.log.debug('refreshing vmobj %s after zfs event', uuid);
+                self.refreshVmobj(uuid, cb);
+            }
+        }
+    });
+
     function expire() {
         function expireObjects(ds_objects) {
             sections.forEach(function forEachSection(section) {
@@ -2389,59 +2558,6 @@ Vminfod.prototype.handleZpoolEvent = function handleZpoolEvent(obj) {
             });
         });
     }
-
-    self.event_queue.enqueue({
-        description: 'handle zfs event - ' + description,
-        timeout: QUEUE_TASK_TIMEOUT,
-        func: function handleZfsEventTask(extras, cb) {
-            var datasetObj = {};
-            if (zonepath !== '.') {
-                datasetObj.zonepath = util.format('/%s', zonepath);
-            }
-
-            switch (action) {
-            case 'fetchAndCopy':
-                fetch(datasetObj, function fetchAndCopyDone(err, cache) {
-                    if (err) {
-                        finish();
-                        return;
-                    }
-                    copy(cache);
-                    finish();
-                });
-                return;
-            case 'fetchExpireAndCopy':
-                fetch(datasetObj, function fetchExpireAndCopyDone(err, cache) {
-                    if (err) {
-                        finish();
-                        return;
-                    }
-                    expire();
-                    copy(cache);
-                    finish();
-                });
-                return;
-            case 'expire':
-                expire();
-                finish();
-                break;
-            default:
-                extras.log.fatal('unknown action: %s', obj.action);
-                finish();
-                break;
-            }
-
-            function finish() {
-                if (!uuid) {
-                    cb();
-                    return;
-                }
-
-                extras.log.debug('refreshing vmobj %s after zfs event', uuid);
-                self.refreshVmobj(uuid, cb);
-            }
-        }
-    });
 };
 
 /*
@@ -2560,6 +2676,46 @@ Vminfod.prototype.enqueueSysinfoFileUpdate =
     });
 };
 
+/*
+ * Extract the current active zpools used for VMs.  This looks through all of
+ * the VMs on the system, and creates a list of all of the `zpool` properties
+ * mapped to their zonenames.  For example:
+ *
+ * {
+ *   "zones": [<zonename1>, <zonename2>, ...],
+ *   "foo": [<zonename3>, ...],
+ *   ...
+ * }
+ */
+Vminfod.prototype.zonesZpools = function zonesZpools() {
+    var self = this;
+
+    assert.object(self.vmobjs, 'self.vmobjs');
+
+    var zpools = {};
+
+    Object.keys(self.vmobjs).forEach(function loopVms(zonename) {
+        var vmobj = self.vmobjs[zonename];
+
+        assert.object(vmobj, 'vmobj');
+        assert.optionalString(vmobj.zpool, 'vmobj.zpool');
+
+        if (!vmobj.zpool) {
+            return;
+        }
+
+        if (!zpools[vmobj.zpool]) {
+            zpools[vmobj.zpool] = [];
+        }
+
+        zpools[vmobj.zpool].push(zonename);
+    });
+
+    self.log.trace({zpools: zpools}, 'got zonesZpools');
+
+    return zpools;
+};
+
 /*
  * Extract a (the first) UUID from a string
  */
diff --git a/src/vm/node_modules/vmload/vmload-datasets.js b/src/vm/node_modules/vmload/vmload-datasets.js
index 90e5a01d..14386551 100644
--- a/src/vm/node_modules/vmload/vmload-datasets.js
+++ b/src/vm/node_modules/vmload/vmload-datasets.js
@@ -20,11 +20,11 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  */
 
-var assert = require('assert');
+var assert = require('/usr/node/node_modules/assert-plus');
 var EventEmitter = require('events').EventEmitter;
 var hrtime = require('/usr/vm/node_modules/hrtime');
 var props = require('/usr/vm/node_modules/props');
@@ -195,6 +195,9 @@ function getDatasets(obj, options, callback)
     var zfs_types = [];
     var result, listEverything, parents;
 
+    assert.object(obj, 'obj');
+    assert.object(options, 'options');
+    assert.func(callback, 'callback');
     fields = options.fields;
     log = options.log;
     assert(log, 'no logger passed to getDatasets()');
@@ -322,6 +325,10 @@ function getDatasets(obj, options, callback)
         });
     }
 
+    if (obj.hasOwnProperty('depth')) {
+        _options.depth = obj.depth;
+    }
+
     if (options.hasOwnProperty('spawnZfs')) {
         _options.spawnZfs = options.spawnZfs;
     }
@@ -347,21 +354,19 @@ function getDatasets(obj, options, callback)
 }
 
 function getZfsList(options, callback) {
-    var fields = options.fields;
     var log = options.log;
-    var sorted_fields;
-    var sorted_types;
     var task;
-    var types = options.types;
 
-    sorted_fields = fields.slice().sort();
-    sorted_types = types.slice().sort();
+    assert.object(options, 'options');
+    assert.arrayOfString(options.fields, 'options.fields');
+    assert.arrayOfString(options.types, 'options.types');
+    assert.func(callback, 'callback');
 
     // any options we need in zfsList() need to be passed through here.
     task = {
-        fields: sorted_fields,
+        fields: options.fields.slice().sort(),
         log: log,
-        types: sorted_types
+        types: options.types.slice().sort()
     };
     if (options.hasOwnProperty('spawnZfs')) {
         task.spawnZfs = options.spawnZfs;
@@ -372,8 +377,17 @@ function getZfsList(options, callback) {
     if (options.hasOwnProperty('results')) {
         task.results = options.results;
     }
+    if (options.hasOwnProperty('depth')) {
+        task.depth = options.depth;
+    }
+
+    var key = makeZfsListKey({
+        parent: options.parent,
+        fields: options.fields,
+        types: options.types,
+        depth: options.depth
+    });
 
-    var key = JSON.stringify([options.parent, sorted_fields, sorted_types]);
     try {
         zfs_list_in_progress[key].on('result', callback);
     } catch (e) {
@@ -552,11 +566,13 @@ function zfsList(options, callback) {
     var spawnZfs;
     var types = options.types;
 
-    assert(Array.isArray(types), '"types" must be array, is: '
-        + typeof (types));
-    assert(Array.isArray(fields), '"fields" must be array, is: '
-        + typeof (fields));
+    assert.object(options, 'options');
+    assert.arrayOfString(options.types, 'options.types');
+    assert.arrayOfString(options.fields, 'options.fields');
+    assert.optionalString(options.parent, 'options.parent');
+    assert.optionalNumber(options.depth, 'options.depth');
     assert(log, 'no logger passed to zfsList()');
+    assert.func(callback, 'callback');
 
     results = options.results;
     if (results === undefined || typeof (results) !== 'object'
@@ -592,8 +608,15 @@ function zfsList(options, callback) {
     });
 
     args = ['list', '-H', '-p', '-t', types.join(','), '-o', fields.join(',')];
-    if (options.hasOwnProperty('parent')) {
+
+    if (options.hasOwnProperty('depth')) {
+        args.push('-d');
+        args.push(options.depth.toString());
+    } else {
         args.push('-r');
+    }
+
+    if (options.hasOwnProperty('parent')) {
         args.push(options.parent);
     }
 
@@ -649,12 +672,17 @@ zfs_list_queue = vasync.queue(function (task, callback) {
     if (task.hasOwnProperty('results')) {
         options.results = task.results;
     }
+    if (task.hasOwnProperty('depth')) {
+        options.depth = task.depth;
+    }
 
     zfsList(options, function (err, data) {
-        var key = JSON.stringify([
-            options.parent,
-            options.fields,
-            options.types]);
+        var key = makeZfsListKey({
+            parent: options.parent,
+            fields: options.fields,
+            types: options.types,
+            depth: options.depth
+        });
         var emitter = zfs_list_in_progress[key];
 
         delete zfs_list_in_progress[key];
@@ -673,6 +701,23 @@ zfs_list_queue.drain = function () {
     // log.trace('zfs_list_queue is empty');
 };
 
+function makeZfsListKey(options) {
+    assert.object(options, 'options');
+    assert.optionalString(options.parent, 'options.parent');
+    assert.arrayOfString(options.fields, 'options.fields');
+    assert.arrayOfString(options.types, 'options.types');
+    assert.optionalNumber(options.depth, 'options.depth');
+
+    var obj = {
+        parent: options.parent,
+        fields: options.fields.slice().sort(),
+        types: options.types.slice().sort(),
+        depth: options.depth
+    };
+
+    return JSON.stringify(obj);
+}
+
 module.exports = {
     getDatasets: getDatasets
 };
diff --git a/src/vm/tests/test-vmload-datasets.js b/src/vm/tests/test-vmload-datasets.js
index 171b59de..36b7eb3a 100644
--- a/src/vm/tests/test-vmload-datasets.js
+++ b/src/vm/tests/test-vmload-datasets.js
@@ -570,7 +570,8 @@ test('test with one zone and one image', function (t) {
         '-o',
         'compression,creation,filesystem_limit,mountpoint,name,quota,'
             + 'recsize,refquota,refreservation,snapshot_limit,type,userrefs,'
-            + 'volblocksize,volsize,zoned'
+            + 'volblocksize,volsize,zoned',
+        '-r'
     ];
 
     var out = {};
-- 
2.21.0

