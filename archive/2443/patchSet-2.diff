From 3b0d763a11a63927b5afe3d6ffa9e4cc8e68fc6d Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Tue, 22 Aug 2017 23:12:41 +0000
Subject: [PATCH] joyent/node-watershed#4 WatershedConnections crash after
 receiving a ping joyent/node-watershed#3 Update dtrace-provider to 0.8.x for
 further node compatibility

---
 .npmignore       |   1 +
 CHANGES.md       |   6 ++
 Makefile         |  11 +++-
 README.md        |   3 +-
 lib/watershed.js |   4 +-
 package.json     |  17 ++++--
 test/basic.js    | 152 +++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 184 insertions(+), 10 deletions(-)
 create mode 100644 test/basic.js

diff --git a/.npmignore b/.npmignore
index f58e4ae..3bc12ca 100644
--- a/.npmignore
+++ b/.npmignore
@@ -1,4 +1,5 @@
 /.gitmodules
+/coverage
 /node_modules
 /tmp
 /npm-debug.log
diff --git a/CHANGES.md b/CHANGES.md
index 4de00f6..aa6bbed 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,12 @@
 
 ## not yet released
 
+## 0.3.4
+
+* Receiving a ping would crash the WatershedConnection while trying to
+  reply.
+* Update to latest dtrace-provider
+
 ## 0.3.3
 
 * Handle write-after-end errors when an attempt is made to write to a
diff --git a/Makefile b/Makefile
index f5b8282..77cc5db 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright (c) 2017 Joyent, Inc.
 #
 # Makefile for node-watershed
 #
@@ -7,6 +7,8 @@
 #
 # Vars, Tools, Files, Flags
 #
+ISTANBUL	:= node_modules/.bin/istanbul
+NPM		:= npm
 JS_FILES	:= $(shell find lib test -name '*.js')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
@@ -57,4 +59,11 @@ cutarelease: versioncheck
 
 include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.targ
+
+$(ISTANBUL): | $(NPM_EXEC)
+	$(NPM) install
+
+test: $(ISTANBUL)
+	$(ISTANBUL) cover --print none test/basic.js
+
 JSL_FLAGS += --nofilelist
diff --git a/README.md b/README.md
index bfe9ca9..18d55af 100644
--- a/README.md
+++ b/README.md
@@ -64,7 +64,8 @@ var options = {
     headers: {
         'connection': 'upgrade',
         'upgrade': 'websocket',
-        'Sec-WebSocket-Key': wskey
+        'Sec-WebSocket-Key': wskey,
+        'Sec-WebSocket-Version': 13
     }
 };
 var req = http.request(options);
diff --git a/lib/watershed.js b/lib/watershed.js
index 5b16ba4..98efdd4 100644
--- a/lib/watershed.js
+++ b/lib/watershed.js
@@ -2,7 +2,7 @@
  * Watershed:
  *   An implementation of RFC6455 (The WebSocket Protocol)
  *
- * Copyright 2016 Joyent, Inc.
+ * Copyright (c) 2017 Joyent, Inc.
  */
 
 var crypto = require('crypto');
@@ -758,7 +758,7 @@ _ws_readFrame()
 		/*
 		 * XXX We should probably let the user do this for themselves:
 		 */
-		this._writePong(obj.payload);
+		this._ws_writePong(obj.payload);
 	} else if (obj.opcode === OPCODE.PONG) {
 		this.emit('pong', obj.payload);
 	} else if (obj.opcode === OPCODE.CLOSE) {
diff --git a/package.json b/package.json
index 6de4742..8fd91a3 100644
--- a/package.json
+++ b/package.json
@@ -1,21 +1,26 @@
 {
 	"name": "watershed",
-	"version": "0.3.3",
+	"version": "0.3.4",
 	"description": "simple websockets (RFC6455) client and server",
 	"main": "./lib/watershed.js",
 	"author": "Joshua M. Clulow <jmc@joyent.com>",
 
 	"repository": {
 		"type": "git",
-		"url": "git://github.com/jclulow/node-watershed.git"
+		"url": "git://github.com/joyent/node-watershed.git"
 	},
 
-	"dependencies": {
-		"readable-stream": "1.0.2"
+	"bugs": {
+		"url": "https://github.com/joyent/node-watershed/issues"
 	},
 
-	"optionalDependencies": {
-		"dtrace-provider": "0.6.0"
+	"dependencies": {
+		"readable-stream": "1.0.2",
+		"dtrace-provider": "~0.8"
+	},
+	"devDependencies": {
+		"istanbul": "^0.4.0",
+		"tape": "^4.2.2"
 	},
 
 	"engines": [ "node >=0.8.0" ]
diff --git a/test/basic.js b/test/basic.js
new file mode 100644
index 0000000..775eed3
--- /dev/null
+++ b/test/basic.js
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) 2017 Joyent, Inc.
+ */
+
+var http = require('http');
+var test = require('tape');
+
+var Watershed = require('../lib/watershed').Watershed;
+var shed = new Watershed();
+var wskey = shed.generateKey();
+
+var CLIENT;
+var HTTP;
+var SERVER;
+
+
+function failOnMessage(msg) {
+	throw new Error('received unexpected message: ' + msg.toString());
+}
+
+function failOnEnd(code, reason) {
+	throw new Error('connection unexpectedly ended: ' + code);
+}
+
+
+// --- Tests
+
+test('setup server', function (t) {
+	HTTP = http.createServer();
+	HTTP.listen(9554);
+	HTTP.on('upgrade', function (req, socket, head) {
+		SERVER = shed.accept(req, socket, head);
+		SERVER.on('text', failOnMessage);
+		SERVER.on('binary', failOnMessage);
+		SERVER.on('end', failOnEnd);
+	});
+	t.end();
+});
+
+test('setup client', function (t) {
+	var options = {
+		port: 9554,
+		hostname: '127.0.0.1',
+		headers: {
+			'connection': 'upgrade',
+			'upgrade': 'websocket',
+			'Sec-WebSocket-Key': wskey,
+			'Sec-WebSocket-Version': 13
+		}
+	};
+	var req = http.request(options);
+	req.end();
+	req.on('upgrade', function (res, socket, head) {
+		socket.setNoDelay(true);
+		CLIENT = shed.connect(res, socket, head, wskey);
+		CLIENT.on('text', failOnMessage);
+		CLIENT.on('binary', failOnMessage);
+		CLIENT.on('end', failOnEnd);
+		t.end();
+	});
+});
+
+test('server pings client', function (t) {
+	var pingRecvd = false;
+
+	CLIENT.once('ping', function () {
+		pingRecvd = true;
+	});
+
+	SERVER.once('pong', function () {
+		t.ok(pingRecvd, 'received ping');
+		t.end();
+	});
+
+	SERVER._ws_writePing(new Buffer(0));
+});
+
+test('client pings server', function (t) {
+	var pingRecvd = false;
+
+	SERVER.once('ping', function () {
+		pingRecvd = true;
+	});
+
+	CLIENT.once('pong', function () {
+		t.ok(pingRecvd, 'received ping');
+		t.end();
+	});
+
+	CLIENT._ws_writePing(new Buffer(0));
+});
+
+
+test('client sends TEXT', function (t) {
+	SERVER.removeListener('text', failOnMessage);
+	SERVER.once('text', function (txt) {
+		SERVER.on('text', failOnMessage);
+		t.equal(txt, 'hello', 'correct message');
+		t.end();
+	});
+
+	CLIENT.send('hello');
+});
+
+test('server sends TEXT', function (t) {
+	CLIENT.removeListener('text', failOnMessage);
+	CLIENT.once('text', function (txt) {
+		CLIENT.on('text', failOnMessage);
+		t.equal(txt, 'hello', 'correct message');
+		t.end();
+	});
+
+	SERVER.send('hello');
+});
+
+test('client sends BINARY', function (t) {
+	SERVER.removeListener('binary', failOnMessage);
+	SERVER.once('binary', function (binary) {
+		SERVER.on('binary', failOnMessage);
+		t.ok(binary instanceof Buffer, 'Buffer returned');
+		t.equal(binary.toString('utf-8'), 'hello', 'correct message');
+		t.end();
+	});
+
+	CLIENT.send(new Buffer('hello'));
+});
+
+test('server sends BINARY', function (t) {
+	CLIENT.removeListener('binary', failOnMessage);
+	CLIENT.once('binary', function (binary) {
+		CLIENT.on('binary', failOnMessage);
+		t.ok(binary instanceof Buffer, 'Buffer returned');
+		t.equal(binary.toString('utf-8'), 'hello', 'correct message');
+		t.end();
+	});
+
+	SERVER.send(new Buffer('hello'));
+});
+
+test('teardown', function (t) {
+	CLIENT.removeListener('end', failOnEnd);
+	SERVER.removeListener('end', failOnEnd);
+
+	CLIENT.on('end', function (code, reason) {
+		t.equal(code, 'NORMAL', 'normal close');
+		t.equal(reason, 'test ended', 'server sent reason');
+		HTTP.close();
+		t.end();
+	});
+
+	SERVER.end('test ended');
+});
-- 
2.21.0

