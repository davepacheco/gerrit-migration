commit ce05881806042a268ef9b71452958883717cfc69 (refs/changes/98/1998/1)
Author: Josh Wilsdon <jwilsdon@joyent.com>
Date:   2017-05-24T15:45:46-07:00 (2 years, 5 months ago)
    
    VOLAPI-49 DELETE should delete

diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index 0f56c3e..3d480c3 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -917,9 +917,8 @@ function deleteVolume(req, res, next) {
                 var volumeObject = req.loadedVolumeObject;
 
                 if (!ctx.storageVmNeedsDeletion) {
-                    volumeObject.value.state = 'deleted';
-                    volumesModel.updateVolumeWithRetry(volumeObject.value.uuid,
-                        volumeObject, done);
+                    volumesModel.deleteVolumeWithRetry(volumeObject.value.uuid,
+                        done);
                 } else {
                     done();
                 }
diff --git a/lib/models/volumes.js b/lib/models/volumes.js
index a1afb9b..1adbdd9 100644
--- a/lib/models/volumes.js
+++ b/lib/models/volumes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var path = require('path');
@@ -233,6 +233,54 @@ function deleteVolume(volumeUuid, callback) {
     morayClient.deleteObject(VOLUMES_BUCKET_NAME, volumeUuid, callback);
 }
 
+// https://github.com/joyent/moray/blob/master/docs/index.md#errors-4
+function _isTransientVolumeDeleteError(volumeDeleteError) {
+    assert.object(volumeDeleteError, 'volumeDeleteError');
+
+    return [
+        'BucketNotFoundError',
+        'NoDatabaseError'
+    ].indexOf(volumeDeleteError.name) === -1;
+}
+
+function deleteVolumeWithRetry(volumeUuid, callback) {
+    assert.uuid(volumeUuid, 'volumeUuid');
+    assert.func(callback, 'callback');
+
+    var MAX_NB_VOLUME_DELETE_TRIES = 10;
+    var nbVolumeDeleteTries = 0;
+    var RETRY_DELAY = 1000;
+
+    function doDeleteVolume() {
+        if (nbVolumeDeleteTries > MAX_NB_VOLUME_DELETE_TRIES) {
+            callback(new Error('max number of retries (' +
+                MAX_NB_VOLUME_DELETE_TRIES + ') reached when trying to ' +
+                'delete volume'));
+            return;
+        }
+
+        ++nbVolumeDeleteTries;
+
+        deleteVolume(volumeUuid, function onVolumeDeleted(volumeDeleteErr) {
+            if (volumeDeleteErr &&
+                _isTransientVolumeDeleteError(volumeDeleteErr)) {
+                /*
+                 * Deleting the volume from moray failed but could eventually
+                 * succeed if we retry, so we schedule a retry to happen later.
+                 */
+                log.error({error: volumeDeleteErr},
+                    'Got transient error when deleting volume object, ' +
+                        'retrying...');
+                setTimeout(RETRY_DELAY, doDeleteVolume);
+            } else {
+                callback(volumeDeleteErr);
+            }
+        });
+    }
+
+    doDeleteVolume();
+}
+
 function init(config, options, callback) {
     assert.object(config, 'config');
     assert.object(options, 'options');
@@ -266,5 +314,6 @@ module.exports = {
     updateVolumeWithRetry: updateVolumeWithRetry,
     loadVolume: loadVolume,
     listVolumes: listVolumes,
-    deleteVolume: deleteVolume
-};
\ No newline at end of file
+    deleteVolume: deleteVolume,
+    deleteVolumeWithRetry: deleteVolumeWithRetry
+};
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index 35b2071..37f487b 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -76,7 +76,7 @@ function validateVolumeState(state) {
     console.log('state: ', state);
 
     var VALID_STATES = [
-        'creating', 'ready', 'deleted', 'failed', 'rolling_back'
+        'creating', 'ready', 'failed', 'rolling_back'
     ];
     var err;
 
diff --git a/volapi-updater.js b/volapi-updater.js
index 86c93e6..42e98fd 100644
--- a/volapi-updater.js
+++ b/volapi-updater.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -300,7 +300,20 @@ function updateVolumeFromStorageVm(volumeObject, storageVm, callback) {
             });
     }
 
-    updateVolume();
+    function deleteVolume() {
+        // When deleting we won't hit an Etag error, so we don't need to load
+        // and retry. We can just do the regular retries on transient moray
+        // errors.
+        volumeModels.deleteVolumeWithRetry(volumeObject.value.uuid, callback);
+    }
+
+    if (volumeObject.value.state === 'deleted') {
+        // Switching to 'deleted' means removing the entry rather than updating
+        // it in Moray.
+        deleteVolume();
+    } else {
+        updateVolume();
+    }
 }
 
 function updateVolumeFromVm(vm, log, callback) {
@@ -591,4 +604,4 @@ function main() {
     });
 }
 
-main();
\ No newline at end of file
+main();
