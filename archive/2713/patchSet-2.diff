From 4d23ab22935ec110d6dd970fe7093ba7943a5538 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Tue, 3 Oct 2017 22:04:47 +1300
Subject: [PATCH] DOCKER-1111: Add support for plugins, and add a plugin to
 filter owner networks

---
 Makefile                                   |   5 +-
 lib/backends/sdc/containers.js             |  34 ++-
 lib/backends/sdc/index.js                  |   2 +
 lib/backends/sdc/networks.js               |  21 +-
 lib/docker.js                              |  30 +++
 lib/endpoints/networks.js                  |   1 +
 plugins/filter_owner_networks.js           | 137 ++++++++++
 sapi_manifests/docker/template             |   4 +
 test/plugins/filter_owner_networks.test.js | 296 +++++++++++++++++++++
 9 files changed, 522 insertions(+), 8 deletions(-)
 create mode 100644 plugins/filter_owner_networks.js
 create mode 100644 test/plugins/filter_owner_networks.test.js

diff --git a/Makefile b/Makefile
index b8c770c..a778fcb 100644
--- a/Makefile
+++ b/Makefile
@@ -70,10 +70,10 @@ $(TAPE): | $(NPM_EXEC)
 
 CLEAN_FILES += $(TAPE) ./node_modules/tape
 
-# Run *unit* tests.
+# Run *unit* and *plugin* tests.
 .PHONY: test
 test: $(TAPE)
-	@(for F in test/unit/*.test.js; do \
+	@(for F in test/unit/*.test.js test/plugins/*.test.js; do \
 		echo "# $$F" ;\
 		$(NODE) $(TAPE) $$F ;\
 		[[ $$? == "0" ]] || exit 1; \
@@ -123,6 +123,7 @@ release: all
 		$(TOP)/bin \
 		$(TOP)/etc \
 		$(TOP)/lib \
+		$(TOP)/plugins \
 		$(TOP)/node_modules \
 		$(TOP)/smf \
 		$(TOP)/tls \
diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index d3e52c0..d1af2e0 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -551,9 +551,12 @@ function addRulesToFWAPI(opts, rules, payload, callback) {
  */
 function addNetworksToPayload(opts, container, payload, callback) {
     assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.object(opts.config.napi, 'opts.config.napi');
     assert.object(opts.log, 'opts.log');
+    assert.uuid(opts.req_id, 'opts.req_id');
     assert.object(opts.config.overlay, 'opts.config.overlay');
     assert.optionalString(opts.config.overlay.externalPool,
         'opts.config.overlay.externalPool');
@@ -618,11 +621,14 @@ function addNetworksToPayload(opts, container, payload, callback) {
  * Add the required external network to the payload.networks.
  */
 function externalNetworkByName(opts, container, payload, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.optionalString(opts.config.externalNetwork,
         'opts.config.externalNetwork');
     assert.object(opts.account, 'opts.account');
     assert.string(opts.account.uuid, 'opts.account.uuid');
+    assert.uuid(opts.req_id, 'opts.req_id');
     assert.object(payload, 'payload');
     assert.func(callback, 'callback');
 
@@ -650,10 +656,30 @@ function externalNetworkByName(opts, container, payload, callback) {
     if (!externalNetworkName && opts.config.overlay.enabled) {
         assert.string(opts.config.overlay.externalPool,
             'opts.config.overlay.externalPool');
-        payload.networks.push(
-            { uuid: opts.config.overlay.externalPool, primary: true });
-        callback();
-        return;
+
+        var plugins = opts.app.plugins.findOwnerExternalNetwork || [];
+
+        // This hairball runs every plugin (if any) until a plugin succeeds
+        // (doesn't return an error). If that plugin returned a network, use
+        // that network for the external instead of the default
+        // overlay.externalPool.
+        return vasync.tryEach(plugins.map(function (p) {
+            return p.bind(null, {account: opts.account, req_id: opts.req_id});
+        }), function (err, externalNetwork) {
+            if (!err && !externalNetwork) {
+                payload.networks.push(
+                    { uuid: opts.config.overlay.externalPool, primary: true });
+                callback();
+            } else if (externalNetwork) {
+                payload.networks.push(
+                    { uuid: externalNetwork.uuid, primary: true });
+                callback();
+            } else {
+                callback(err);
+            }
+
+            return;
+        });
     }
 
     // Find the external network using the given (or default) network name.
diff --git a/lib/backends/sdc/index.js b/lib/backends/sdc/index.js
index 841f1bd..782cad8 100644
--- a/lib/backends/sdc/index.js
+++ b/lib/backends/sdc/index.js
@@ -84,6 +84,8 @@ SdcBackend.prototype.findNetworkOrPoolByNameOrId =
     networks.findNetworkOrPoolByNameOrId;
 SdcBackend.prototype.inspectNetwork = networks.inspectNetwork;
 SdcBackend.prototype.listNetworks = networks.listNetworks;
+SdcBackend.prototype.getNapiNetworksForAccount =
+    networks.getNapiNetworksForAccount;
 
 
 module.exports = SdcBackend;
diff --git a/lib/backends/sdc/networks.js b/lib/backends/sdc/networks.js
index 04eac3a..e8014e3 100644
--- a/lib/backends/sdc/networks.js
+++ b/lib/backends/sdc/networks.js
@@ -239,6 +239,12 @@ function listNetworks(opts, callback) {
             return;
         }
         log.debug('listNetworks: %d networks found', networks.length);
+
+        var plugins = req.app.plugins.filterListNetworks || [];
+        plugins.forEach(function runListNetworksPlugin(plugin) {
+            networks = plugin({ account: req.account }, networks);
+        });
+
         // Convert networks into the docker format.
         vasync.forEachParallel({
             inputs: networks,
@@ -273,6 +279,8 @@ function inspectNetwork(opts, callback) {
 
 function getNetworksOrPools(params, opts, callback) {
     assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.app, 'opts.app');
     assert.object(params, 'params');
     assert.ok(params.name || params.uuid, 'params name or uuid');
     assert.object(opts.config, 'opts.config');
@@ -385,6 +393,14 @@ function getNetworksOrPools(params, opts, callback) {
         }
     ], function (err, res) {
         assert(res.err || res.res);
+
+        if (res.res) {
+            var plugins = opts.app.plugins.filterGetNetworksOrPools || [];
+            plugins.forEach(function runGetNetworksOrPoolsPlugin(plugin) {
+                res.res = plugin({ account: opts.account }, res.res);
+            });
+        }
+
         callback(res.err, res.res);
     });
 }
@@ -393,13 +409,13 @@ function getNetworksOrPools(params, opts, callback) {
  * Find the NAPI network from the given name or id.
  *
  * @param {String} name The name or id of the network to look for.
- * @param {Object} opts Accont and config options.
+ * @param {Object} opts Account and config options.
  * @param {Function} callback (err, network) Called with the found network.
  */
 function findNetworkOrPoolByNameOrId(name, opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.account, 'opts.account');
-    assert.string(opts.account.uuid, 'opts.account.uuid');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.object(opts.config.napi, 'opts.config.napi');
     assert.object(opts.log, 'opts.log');
@@ -551,6 +567,7 @@ function findNetworkOrPoolByNameOrId(name, opts, callback) {
 module.exports = {
     findNetworkOrPoolByNameOrId: findNetworkOrPoolByNameOrId,
     inspectNetwork: inspectNetwork,
+    getNapiNetworksForAccount: getNapiNetworksForAccount,
     getNetworksOrPools: getNetworksOrPools,
     listNetworks: listNetworks
 };
diff --git a/lib/docker.js b/lib/docker.js
index 2ee0fd0..d6acddc 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -81,6 +81,8 @@ function App(opts) {
 
     // TODO make the other clients accessible via req.app
 
+    self.setupPlugins();
+
     self.sockets = new SocketManager({ log: self.log });
     self.initAuthCache();
 
@@ -180,6 +182,34 @@ App.prototype.createWorkflowClient = function createWorkflowClient() {
 };
 
 
+App.prototype.setupPlugins = function setupPlugins() {
+    var self = this;
+    self.plugins = {};
+
+    var pluginsCfg = self.config.plugins;
+    assert.optionalArrayOfObject(pluginsCfg, 'pluginsCfg');
+    if (pluginsCfg === undefined) {
+        return;
+    }
+
+    pluginsCfg.forEach(function (description) {
+        if (!description.enabled) {
+            return;
+        }
+
+        self.log.info('Loading plugin: %s', description.name);
+        var cfg = description.config;
+        var pPath = path.resolve(__dirname, '../plugins', description.name);
+        var plugin = require(pPath);
+
+        Object.keys(plugin).forEach(function (name) {
+            self.plugins[name] = self.plugins[name] || [];
+            self.plugins[name].push(plugin[name](self, cfg));
+        });
+    });
+};
+
+
 App.prototype.setupConnectionsWatcher = function setupConnectionsWatcher() {
     var self = this;
 
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index cc75abf..402494e 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -116,6 +116,7 @@ function register(http, before) {
     function reqNetwork(req, res, next) {
         var opts = {
             account: req.account,
+            app: req.app,
             config: req.app.config,
             log: req.log,
             req_id: req.getId()
diff --git a/plugins/filter_owner_networks.js b/plugins/filter_owner_networks.js
new file mode 100644
index 0000000..b8131c1
--- /dev/null
+++ b/plugins/filter_owner_networks.js
@@ -0,0 +1,137 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Forces specific accounts to only use networks or network pools which belong
+ * to that account. Specifically, it filters out networks and network pools in
+ * backends/sdc/networks.js, which later prevents the listing of non-owner
+ * networks or pools, and prevent the creation of containers with those networks
+ * or pools too. It also hooks into backends/sdc/container.js to override the
+ * default external network.
+ *
+ * Each network or pool has an optional array of UUIDs associated with users.
+ * When filtering networks, we check that the UUID of the current account
+ * matches any of the UUIDs in the requested network or pool's owner_uuids
+ * array. If not, it is rejected.
+ */
+
+var assert = require('assert-plus');
+
+
+var EXTERNAL_NIC_TAG = 'external';
+
+
+/*
+ * This hook runs after sdc-docker has retrieved an array from napi, but before
+ * backends/sdc/networks.js returns the results any higher up the stack. It
+ * filters 'networks' so that it only contains networks or network pools which
+ * have the account UUID in their owner_uuids.
+ */
+function filterListNetworks(env, cfg) {
+    assert.object(env, 'env');
+    assert.object(env.log, 'log');
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    var log = env.log;
+
+    return function filterOwnerListNetworks(opts, networks) {
+        assert.object(opts, 'opts');
+        assert.object(opts.account, 'opts.account');
+        assert.arrayOfObject(networks, 'networks');
+
+        log.debug('Running ' + filterOwnerListNetworks.name);
+
+        var accountUuid = opts.account.uuid;
+        if (cfg.accounts.indexOf(accountUuid) === -1) {
+            return networks;
+        }
+
+        log.debug('Filtering networks for account', accountUuid);
+
+        return networks.filter(function filterOwner(network) {
+            var owners = network.owner_uuids;
+            return owners && owners.indexOf(accountUuid) !== -1;
+        });
+    };
+}
+
+
+/*
+ * This hook is run when creating a container, before assigning
+ * a default external network to that container. The default network
+ * may not belong to the account creating the container, this this
+ * gets invoked. It finds a pools or network which is owned by an
+ * account, and has an 'external' nic tag.
+ */
+function findOwnerExternalNetwork(env, cfg) {
+    assert.object(env, 'env');
+    assert.object(env.log, 'env.log');
+    assert.object(env.config, 'env.config');
+    assert.object(env.backend, 'env.backend');
+    assert.func(env.backend.getNapiNetworksForAccount,
+        'env.backend.getNapiNetworksForAccount');
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    var log = env.log;
+
+    return function findExternalNetworkWithOwnerUuid(opts, cb) {
+        assert.object(opts, 'opts');
+        assert.object(opts.account, 'opts.account');
+        assert.uuid(opts.req_id, 'opts.req_id');
+
+        log.debug('Running ' + findExternalNetworkWithOwnerUuid.name);
+
+        var accountUuid = opts.account.uuid;
+        if (cfg.accounts.indexOf(accountUuid) === -1) {
+            return cb();
+        }
+
+        log.debug('Looking up external pools and networks for account',
+            accountUuid);
+
+        env.backend.getNapiNetworksForAccount({
+            accountUuid: accountUuid,
+            config: env.config,
+            reqId: opts.req_id,
+            log: log
+        }, function onAccountNetworks(err, networks) {
+            if (err) {
+                return cb(err);
+            }
+
+            var owned = networks.filter(function filterOwner(network) {
+                var owners = network.owner_uuids;
+                return owners && owners.indexOf(accountUuid) !== -1;
+            })
+
+            var external = owned.filter(function filterExternal(network) {
+                var tags = network.nic_tags_present;
+                return network.nic_tag === EXTERNAL_NIC_TAG ||
+                    (tags && tags.indexOf(EXTERNAL_NIC_TAG) !== -1);
+            });
+
+            if (external.length === 0) {
+                var msg = 'Found no external network accessible to account'
+                return cb(new Error(msg));
+            }
+
+            return cb(null, external[0]);
+        });
+    };
+}
+
+
+module.exports = {
+    filterGetNetworksOrPools: filterListNetworks,
+    filterListNetworks: filterListNetworks,
+    findOwnerExternalNetwork: findOwnerExternalNetwork
+};
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index dc78d0a..f813f88 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -85,6 +85,10 @@
     "fwrule_version": {{{FWRULE_VERSION}}},
 {{/FWRULE_VERSION}}
 
+{{#DOCKER_PLUGINS}}
+    "plugins": {{{DOCKER_PLUGINS}}},
+{{/DOCKER_PLUGINS}}
+
     "ufds": {
         "url": "ldaps://{{{ufds_domain}}}",
         "bindDN": "{{{ufds_ldap_root_dn}}}",
diff --git a/test/plugins/filter_owner_networks.test.js b/test/plugins/filter_owner_networks.test.js
new file mode 100644
index 0000000..30723fd
--- /dev/null
+++ b/test/plugins/filter_owner_networks.test.js
@@ -0,0 +1,296 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var test = require('tape').test;
+var plugin = require('../../plugins/filter_owner_networks');
+
+
+// --- Globals
+
+var ACCOUNT = { uuid: '572c169e-a287-11e7-b95d-28cfe91f7d53' };
+var OTHER_ACCOUNT = { uuid: '5cc54706-a287-11e7-b33c-28cfe91f7d53' };
+
+var NETWORKS = [ {
+    uuid: '22a0b5fa-a292-11e7-8911-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'internal'
+}, {
+    uuid: '2790d1e4-a292-11e7-8d23-28cfe91f7d53',
+    owner_uuids: ['9ea6158e-a29a-11e7-a2c5-28cfe91f7d53'],
+    nic_tag: 'internal'
+}, {
+    uuid: '9336f8d0-a29a-11e7-a744-28cfe91f7d53',
+    nic_tag: 'interal'
+}, {
+    uuid: '4f854694-a35f-11e7-9574-28cfe91f7d53',
+    nic_tag: 'internal'
+}, {
+    uuid: '3acc8d3e-a35f-11e7-8f64-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'external'
+}  ];
+
+var ENV = {
+    config: {
+        napi: {}
+    },
+    backend: {
+        getNapiNetworksForAccount: function () {}
+    },
+    log: {
+        info: function () {},
+        debug: function () {}
+    }
+};
+
+var FILTER_LIST_NETWORKS;
+var FILTER_GET_NETWORKS_OR_POOLS;
+var FIND_OWNER_EXTERNAL_NETWORK;
+
+
+// --- Helpers
+
+function clone(o) {
+    return JSON.parse(JSON.stringify(o));
+}
+
+
+// --- Tests
+
+test('Setup filterListNetworks without env',
+function (t) {
+    try {
+        plugin.filterListNetworks();
+    } catch (e) {
+        t.equal(e.message, 'env (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks without cfg',
+function (t) {
+    try {
+        plugin.filterListNetworks(ENV);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks with invalid cfg',
+function (t) {
+    try {
+        plugin.filterListNetworks(ENV, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks with valid cfg',
+function (t) {
+    FILTER_LIST_NETWORKS = plugin.filterListNetworks(ENV, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FILTER_LIST_NETWORKS), 'function', 'func type');
+    t.equal(FILTER_LIST_NETWORKS.name, 'filterOwnerListNetworks', 'func name');
+    t.end();
+});
+
+
+test('filterListNetworks with non-owner account',
+function (t) {
+    var networks = FILTER_LIST_NETWORKS({
+        account: OTHER_ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, NETWORKS, 'networks');
+    t.end();
+});
+
+
+test('filterListNetworks with owner account',
+function (t) {
+    var networks = FILTER_LIST_NETWORKS({ account: ACCOUNT }, clone(NETWORKS));
+    t.deepEqual(networks, [
+        NETWORKS[0],
+        NETWORKS[4]
+    ], 'networks');
+    t.end();
+});
+
+
+test('Setup filterGetNetworksOrPools without env',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools();
+    } catch (e) {
+        t.equal(e.message, 'env (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools without cfg',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools(ENV);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools with invalid cfg',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools(ENV, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools with valid cfg',
+function (t) {
+    FILTER_GET_NETWORKS_OR_POOLS = plugin.filterGetNetworksOrPools(ENV, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FILTER_LIST_NETWORKS), 'function', 'func type');
+    t.equal(FILTER_LIST_NETWORKS.name, 'filterOwnerListNetworks', 'func name');
+    t.end();
+});
+
+
+test('filterGetNetworksOrPools with non-owner account',
+function (t) {
+    var networks = FILTER_GET_NETWORKS_OR_POOLS({
+        account: OTHER_ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, NETWORKS, 'networks');
+    t.end();
+});
+
+
+test('filterGetNetworksOrPools with owner account',
+function (t) {
+    var networks = FILTER_GET_NETWORKS_OR_POOLS({
+        account: ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, [
+        NETWORKS[0],
+        NETWORKS[4]
+    ], 'networks');
+
+    t.end();
+});
+
+
+test('Setup findOwnerExternalNetwork without env',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork();
+    } catch (e) {
+        t.equal(e.message, 'env (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork without cfg',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork(ENV);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork with invalid cfg',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork(ENV, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork with valid cfg',
+function (t) {
+    FIND_OWNER_EXTERNAL_NETWORK = plugin.findOwnerExternalNetwork(ENV, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FIND_OWNER_EXTERNAL_NETWORK), 'function', 'func type');
+    t.equal(FIND_OWNER_EXTERNAL_NETWORK.name,
+        'findExternalNetworkWithOwnerUuid', 'func name');
+    t.end();
+});
+
+
+test('findOwnerExternalNetwork with non-owner account',
+function (t) {
+    function failStub(opts, cb) {
+        t.fail('this should not be called');
+    }
+
+    // admittedly evil mutating a global like this...
+    ENV.backend.getNapiNetworksForAccount = failStub;
+
+    FIND_OWNER_EXTERNAL_NETWORK({
+        account: OTHER_ACCOUNT,
+        req_id: '1180af02-a8ee-11e7-86c1-28cfe91f7d53'
+    }, function (err, network) {
+        t.equal(err, undefined, 'err');
+        t.equal(network, undefined, 'network');
+        t.end();
+    });
+});
+
+
+test('findOwnerExternalNetwork with owner account',
+function (t) {
+    function getNapiNetworksForAccountStub(opts, cb) {
+        t.deepEqual(opts, {
+            config: ENV.config,
+            log: ENV.log,
+            reqId: '1180af02-a8ee-11e7-86c1-28cfe91f7d53',
+            accountUuid: ACCOUNT.uuid
+        }, 'stub opts');
+
+        var nets = NETWORKS.filter(function (network) {
+            return !network.owner_uuids
+                || network.owner_uuids.indexOf(ACCOUNT.uuid) !== -1;
+        });
+
+        return cb(null, nets);
+    }
+
+    ENV.backend.getNapiNetworksForAccount = getNapiNetworksForAccountStub;
+
+    FIND_OWNER_EXTERNAL_NETWORK({
+        account: ACCOUNT,
+        req_id: '1180af02-a8ee-11e7-86c1-28cfe91f7d53'
+    }, function (err, network) {
+        t.equal(err, null, 'err');
+        t.deepEqual(network, NETWORKS[4], 'network');
+        t.end();
+    });
+});
-- 
2.21.0

