From 18b00871d1cececead9e8c3ffb3282580ab7ce5b Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Tue, 3 Oct 2017 22:04:47 +1300
Subject: [PATCH] DOCKER-1111: Add support for plugins, and add a plugin to
 filter owner networks Reviewed by: Trent Mick <trent.mick@joyent.com>

---
 Makefile                                      |   1 +
 lib/backends/sdc/containers.js                |  31 +-
 lib/backends/sdc/index.js                     |   2 +
 lib/backends/sdc/networks.js                  |  22 +-
 lib/docker.js                                 |   3 +
 lib/endpoints/networks.js                     |   1 +
 lib/plugins.js                                | 148 +++++++++
 plugins/filter_owner_networks.js              | 133 ++++++++
 sapi_manifests/docker/template                |   4 +
 .../unit/plugin-filter-owner-networks.test.js | 290 ++++++++++++++++++
 10 files changed, 628 insertions(+), 7 deletions(-)
 create mode 100644 lib/plugins.js
 create mode 100644 plugins/filter_owner_networks.js
 create mode 100644 test/unit/plugin-filter-owner-networks.test.js

diff --git a/Makefile b/Makefile
index b8c770c..259b6e5 100644
--- a/Makefile
+++ b/Makefile
@@ -123,6 +123,7 @@ release: all
 		$(TOP)/bin \
 		$(TOP)/etc \
 		$(TOP)/lib \
+		$(TOP)/plugins \
 		$(TOP)/node_modules \
 		$(TOP)/smf \
 		$(TOP)/tls \
diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index 2c48d57..fa934ec 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -551,9 +551,12 @@ function addRulesToFWAPI(opts, rules, payload, callback) {
  */
 function addNetworksToPayload(opts, container, payload, callback) {
     assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.object(opts.config.napi, 'opts.config.napi');
     assert.object(opts.log, 'opts.log');
+    assert.uuid(opts.req_id, 'opts.req_id');
     assert.object(opts.config.overlay, 'opts.config.overlay');
     assert.optionalString(opts.config.overlay.externalPool,
         'opts.config.overlay.externalPool');
@@ -618,11 +621,14 @@ function addNetworksToPayload(opts, container, payload, callback) {
  * Add the required external network to the payload.networks.
  */
 function externalNetworkByName(opts, container, payload, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.optionalString(opts.config.externalNetwork,
         'opts.config.externalNetwork');
     assert.object(opts.account, 'opts.account');
     assert.string(opts.account.uuid, 'opts.account.uuid');
+    assert.uuid(opts.req_id, 'opts.req_id');
     assert.object(payload, 'payload');
     assert.func(callback, 'callback');
 
@@ -650,10 +656,27 @@ function externalNetworkByName(opts, container, payload, callback) {
     if (!externalNetworkName && opts.config.overlay.enabled) {
         assert.string(opts.config.overlay.externalPool,
             'opts.config.overlay.externalPool');
-        payload.networks.push(
-            { uuid: opts.config.overlay.externalPool, primary: true });
-        callback();
-        return;
+
+        return opts.app.plugins.findOwnerExternalNetwork({
+            account: opts.account,
+            req_id: opts.req_id
+        }, function (err, externalNetwork) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            var netUuid = externalNetwork ?
+                externalNetwork.uuid : opts.config.overlay.externalPool;
+
+            payload.networks.push({
+                uuid: netUuid,
+                primary: true
+            });
+
+            callback();
+            return;
+        });
     }
 
     // Find the external network using the given (or default) network name.
diff --git a/lib/backends/sdc/index.js b/lib/backends/sdc/index.js
index 841f1bd..782cad8 100644
--- a/lib/backends/sdc/index.js
+++ b/lib/backends/sdc/index.js
@@ -84,6 +84,8 @@ SdcBackend.prototype.findNetworkOrPoolByNameOrId =
     networks.findNetworkOrPoolByNameOrId;
 SdcBackend.prototype.inspectNetwork = networks.inspectNetwork;
 SdcBackend.prototype.listNetworks = networks.listNetworks;
+SdcBackend.prototype.getNapiNetworksForAccount =
+    networks.getNapiNetworksForAccount;
 
 
 module.exports = SdcBackend;
diff --git a/lib/backends/sdc/networks.js b/lib/backends/sdc/networks.js
index 66e20bf..de027bf 100644
--- a/lib/backends/sdc/networks.js
+++ b/lib/backends/sdc/networks.js
@@ -239,6 +239,11 @@ function listNetworks(opts, callback) {
             return;
         }
         log.debug('listNetworks: %d networks found', networks.length);
+
+        networks = req.app.plugins.filterListNetworks({
+            account: req.account
+        }, networks);
+
         // Convert networks into the docker format.
         vasync.forEachParallel({
             inputs: networks,
@@ -273,6 +278,8 @@ function inspectNetwork(opts, callback) {
 
 function getNetworksOrPools(params, opts, callback) {
     assert.object(opts, 'opts');
+    assert.object(opts.account, 'opts.account');
+    assert.object(opts.app, 'opts.app');
     assert.object(params, 'params');
     assert.ok(params.name || params.uuid, 'params name or uuid');
     assert.object(opts.config, 'opts.config');
@@ -385,7 +392,15 @@ function getNetworksOrPools(params, opts, callback) {
         }
     ], function (err, res) {
         assert(res.err || res.res);
-        callback(res.err, res.res);
+
+        var networks = res.res;
+        if (networks) {
+            networks = opts.app.plugins.filterGetNetworksOrPools({
+                account: opts.account
+            }, networks);
+        }
+
+        callback(res.err, networks);
     });
 }
 
@@ -393,13 +408,13 @@ function getNetworksOrPools(params, opts, callback) {
  * Find the NAPI network from the given name or id.
  *
  * @param {String} name The name or id of the network to look for.
- * @param {Object} opts Accont and config options.
+ * @param {Object} opts Account and config options.
  * @param {Function} callback (err, network) Called with the found network.
  */
 function findNetworkOrPoolByNameOrId(name, opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.account, 'opts.account');
-    assert.string(opts.account.uuid, 'opts.account.uuid');
+    assert.object(opts.app, 'opts.app');
     assert.object(opts.config, 'opts.config');
     assert.object(opts.config.napi, 'opts.config.napi');
     assert.object(opts.log, 'opts.log');
@@ -635,6 +650,7 @@ module.exports = {
     findNetworkOrPoolByNameOrId: findNetworkOrPoolByNameOrId,
     inspectNetwork: inspectNetwork,
     getCnsDnsSearchEntriesForNetworks: getCnsDnsSearchEntriesForNetworks,
+    getNapiNetworksForAccount: getNapiNetworksForAccount,
     getNetworksOrPools: getNetworksOrPools,
     listNetworks: listNetworks
 };
diff --git a/lib/docker.js b/lib/docker.js
index d73f301..52b8689 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -43,6 +43,7 @@ var endpoints = require('./endpoints');
 var errors = require('./errors');
 var hijack = require('./hijack');
 var models = require('./models');
+var PluginApi = require('./plugins');
 var SocketManager = require('./socket-manager');
 var wfapi = require('./wfapi');
 var configLoader = require('./config-loader');
@@ -82,6 +83,8 @@ function App(opts) {
 
     // TODO make the other clients accessible via req.app
 
+    self.plugins = new PluginApi(self);
+
     self.sockets = new SocketManager({ log: self.log });
     self.initAuthCache();
 
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index cc75abf..402494e 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -116,6 +116,7 @@ function register(http, before) {
     function reqNetwork(req, res, next) {
         var opts = {
             account: req.account,
+            app: req.app,
             config: req.app.config,
             log: req.log,
             req_id: req.getId()
diff --git a/lib/plugins.js b/lib/plugins.js
new file mode 100644
index 0000000..36c1d31
--- /dev/null
+++ b/lib/plugins.js
@@ -0,0 +1,148 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * sdc-docker plugin importer and API.
+ *
+ * This file loads all enabled plugins listed in app.config.plugins, if any.
+ * For each plugin, this class attempts to load a fixed set of supported named
+ * functions; unrecognized functions cause an exception.
+ *
+ * Plugin functions are provided a formal API (support functions) through which
+ * the plugins can interact with sdc-docker. Currently this consists of the
+ * common bunyan log object and getNapiNetworksForAccount().
+ */
+
+var assert = require('assert-plus');
+var fs = require('fs');
+var jsprim = require('jsprim');
+var path = require('path');
+var vasync = require('vasync');
+
+
+var PluginApi = module.exports =
+function (app) {
+    var self = this;
+
+    assert.object(app, 'app');
+    assert.object(app.log, 'app.log');
+    assert.object(app.backend, 'app.backend');
+    assert.object(app.config, 'app.config');
+
+    // if we don't have a wrapper function in this class, we don't support
+    // the import of functions with the same name from a plugin
+    var supportedPluginFunctions = Object.keys(PluginApi.prototype);
+
+    self.plugins = {};
+    supportedPluginFunctions.forEach(function addPluginArray(apiName) {
+        self.plugins[apiName] = [];
+    });
+
+    var cfg = app.config.plugins;
+    if (cfg === undefined) {
+        return;
+    }
+    assert.arrayOfObject(cfg, 'cfg');
+
+    // This is the API of functions that sdc-docker makes available for use to
+    // the plugins it imports.
+    var pluginApi = {
+        log: app.log,
+        getNapiNetworksForAccount: function getNapiShim(obj, cb) {
+            obj = jsprim.deepCopy(obj);
+            obj.config = { napi: app.config.napi };
+            app.backend.getNapiNetworksForAccount(obj, cb);
+        }
+    };
+
+    cfg.forEach(function loadPlugin(description) {
+        assert.object(description, 'description');
+        assert.string(description.name, 'description.name');
+
+        if (!description.enabled) {
+            return;
+        }
+
+        app.log.info('Loading plugin: %s', description.name);
+
+        var pluginCfg = description.config;
+        var pPath = path.resolve(__dirname, '../plugins', description.name);
+        var plugin = require(pPath);
+
+        Object.keys(plugin).forEach(function (apiName) {
+            assert.notEqual(supportedPluginFunctions[apiName], -1,
+                'supportedPluginFunctions[apiName]');
+
+            var initedPlugin = plugin[apiName](pluginApi, pluginCfg);
+            self.plugins[apiName].push(initedPlugin);
+        });
+    });
+};
+
+
+/*
+ * This hook runs after sdc-docker has retrieved an array from napi, but
+ * before backends/sdc/networks.js returns the results any higher up the
+ * stack. It filters 'networks' so that it only contains networks or network
+ * pools which have the account UUID in their owner_uuids.
+ */
+PluginApi.prototype.filterListNetworks =
+function filterListNetworks(opts, networks) {
+    assert.object(opts, 'opts');
+    assert.array(networks, 'networks');
+
+    this.plugins.filterListNetworks.forEach(function runPlugin(plugin) {
+        networks = plugin(opts, networks);
+    });
+
+    return networks;
+};
+
+
+/*
+ * This hook runs after sdc-docker has retrieved an array from napi, but
+ * before backends/sdc/networks.js returns the results any higher up the
+ * stack. It filters 'networks' so that it only contains networks or network
+ * pools which have the account UUID in their owner_uuids.
+ */
+PluginApi.prototype.filterGetNetworksOrPools =
+function filterGetNetworksOrPools(opts, networks) {
+    assert.object(opts, 'opts');
+    assert.array(networks, 'networks');
+
+    this.plugins.filterGetNetworksOrPools.forEach(function runPlugin(plugin) {
+        networks = plugin(opts, networks);
+    });
+
+    return networks;
+};
+
+
+/*
+ * This hook is run when creating a container, before assigning
+ * a default external network to that container. The default network
+ * may not belong to the account creating the container, then this
+ * gets invoked. It finds a pools or network which is owned by an
+ * account, and has an 'external' nic tag.
+ */
+PluginApi.prototype.findOwnerExternalNetwork =
+function findOwnerExternalNetwork(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.func(cb, 'cb');
+
+    var plugins = this.plugins.findOwnerExternalNetwork;
+
+    // Runs every plugin (if any) until a plugin succeeds (doesn't return an
+    // error). If that plugin returned a network, use that network for the
+    // external instead of the default overlay.externalPool.
+    vasync.tryEach(plugins.map(function (p) {
+        return p.bind(null, opts);
+    }), cb);
+};
diff --git a/plugins/filter_owner_networks.js b/plugins/filter_owner_networks.js
new file mode 100644
index 0000000..330d661
--- /dev/null
+++ b/plugins/filter_owner_networks.js
@@ -0,0 +1,133 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Forces specific accounts to only use networks or network pools which belong
+ * to that account. Specifically, it filters out networks and network pools in
+ * backends/sdc/networks.js, which later prevents the listing of non-owner
+ * networks or pools, and prevent the creation of containers with those networks
+ * or pools too. It also hooks into backends/sdc/container.js to override the
+ * default external network.
+ *
+ * Each network or pool has an optional array of UUIDs associated with users.
+ * When filtering networks, we check that the UUID of the current account
+ * matches any of the UUIDs in the requested network or pool's owner_uuids
+ * array. If not, it is rejected.
+ */
+
+var assert = require('assert-plus');
+
+
+var EXTERNAL_NIC_TAG = 'external';
+
+
+/*
+ * This hook runs after sdc-docker has retrieved an array from napi, but before
+ * backends/sdc/networks.js returns the results any higher up the stack. It
+ * filters 'networks' so that it only contains networks or network pools which
+ * have the account UUID in their owner_uuids.
+ */
+function filterListNetworks(api, cfg) {
+    assert.object(api, 'api');
+    assert.object(api.log, 'api.log');
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    var log = api.log;
+
+    return function filterOwnerListNetworks(opts, networks) {
+        assert.object(opts, 'opts');
+        assert.object(opts.account, 'opts.account');
+        assert.arrayOfObject(networks, 'networks');
+
+        log.debug('Running ' + filterOwnerListNetworks.name);
+
+        var accountUuid = opts.account.uuid;
+        if (cfg.accounts.indexOf(accountUuid) === -1) {
+            return networks;
+        }
+
+        log.debug('Filtering networks for account', accountUuid);
+
+        return networks.filter(function filterOwner(network) {
+            var owners = network.owner_uuids;
+            return owners && owners.indexOf(accountUuid) !== -1;
+        });
+    };
+}
+
+
+/*
+ * This hook is run when creating a container, before assigning
+ * a default external network to that container. The default network
+ * may not belong to the account creating the container, then this
+ * gets invoked. It finds a pools or network which is owned by an
+ * account, and has an 'external' nic tag.
+ */
+function findOwnerExternalNetwork(api, cfg) {
+    assert.object(api, 'api');
+    assert.object(api.log, 'api.log');
+    assert.func(api.getNapiNetworksForAccount, 'api.getNapiNetworksForAccount');
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    var log = api.log;
+
+    return function findExternalNetworkWithOwnerUuid(opts, cb) {
+        assert.object(opts, 'opts');
+        assert.object(opts.account, 'opts.account');
+        assert.uuid(opts.req_id, 'opts.req_id');
+
+        log.debug('Running ' + findExternalNetworkWithOwnerUuid.name);
+
+        var accountUuid = opts.account.uuid;
+        if (cfg.accounts.indexOf(accountUuid) === -1) {
+            return cb();
+        }
+
+        log.debug('Looking up external pools and networks for account',
+            accountUuid);
+
+        api.getNapiNetworksForAccount({
+            accountUuid: accountUuid,
+            reqId: opts.req_id,
+            log: log
+        }, function onAccountNetworks(err, networks) {
+            if (err) {
+                return cb(err);
+            }
+
+            var owned = networks.filter(function filterOwner(network) {
+                var owners = network.owner_uuids;
+                return owners && owners.indexOf(accountUuid) !== -1;
+            })
+
+            var external = owned.filter(function filterExternal(network) {
+                var tags = network.nic_tags_present;
+                return network.nic_tag === EXTERNAL_NIC_TAG ||
+                    (tags && tags.indexOf(EXTERNAL_NIC_TAG) !== -1);
+            });
+
+            if (external.length === 0) {
+                var msg = 'Found no external network accessible to account'
+                return cb(new Error(msg));
+            }
+
+            return cb(null, external[0]);
+        });
+    };
+}
+
+
+module.exports = {
+    filterGetNetworksOrPools: filterListNetworks,
+    filterListNetworks: filterListNetworks,
+    findOwnerExternalNetwork: findOwnerExternalNetwork
+};
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index e9ad55b..c286fb8 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -90,6 +90,10 @@
     "fwrule_version": {{{FWRULE_VERSION}}},
 {{/FWRULE_VERSION}}
 
+{{#DOCKER_PLUGINS}}
+    "plugins": {{{DOCKER_PLUGINS}}},
+{{/DOCKER_PLUGINS}}
+
     "ufds": {
         "url": "ldaps://{{{ufds_domain}}}",
         "bindDN": "{{{ufds_ldap_root_dn}}}",
diff --git a/test/unit/plugin-filter-owner-networks.test.js b/test/unit/plugin-filter-owner-networks.test.js
new file mode 100644
index 0000000..59c8b8f
--- /dev/null
+++ b/test/unit/plugin-filter-owner-networks.test.js
@@ -0,0 +1,290 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var test = require('tape').test;
+var plugin = require('../../plugins/filter_owner_networks');
+
+
+// --- Globals
+
+var ACCOUNT = { uuid: '572c169e-a287-11e7-b95d-28cfe91f7d53' };
+var OTHER_ACCOUNT = { uuid: '5cc54706-a287-11e7-b33c-28cfe91f7d53' };
+
+var NETWORKS = [ {
+    uuid: '22a0b5fa-a292-11e7-8911-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'internal'
+}, {
+    uuid: '2790d1e4-a292-11e7-8d23-28cfe91f7d53',
+    owner_uuids: ['9ea6158e-a29a-11e7-a2c5-28cfe91f7d53'],
+    nic_tag: 'internal'
+}, {
+    uuid: '9336f8d0-a29a-11e7-a744-28cfe91f7d53',
+    nic_tag: 'interal'
+}, {
+    uuid: '4f854694-a35f-11e7-9574-28cfe91f7d53',
+    nic_tag: 'internal'
+}, {
+    uuid: '3acc8d3e-a35f-11e7-8f64-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'external'
+}  ];
+
+var API = {
+    getNapiNetworksForAccount: function () {},
+    log: {
+        info: function () {},
+        debug: function () {}
+    }
+};
+
+var FILTER_LIST_NETWORKS;
+var FILTER_GET_NETWORKS_OR_POOLS;
+var FIND_OWNER_EXTERNAL_NETWORK;
+
+
+// --- Helpers
+
+function clone(o) {
+    return JSON.parse(JSON.stringify(o));
+}
+
+
+// --- Tests
+
+test('Setup filterListNetworks without api',
+function (t) {
+    try {
+        plugin.filterListNetworks();
+    } catch (e) {
+        t.equal(e.message, 'api (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks without cfg',
+function (t) {
+    try {
+        plugin.filterListNetworks(API);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks with invalid cfg',
+function (t) {
+    try {
+        plugin.filterListNetworks(API, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterListNetworks with valid cfg',
+function (t) {
+    FILTER_LIST_NETWORKS = plugin.filterListNetworks(API, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FILTER_LIST_NETWORKS), 'function', 'func type');
+    t.equal(FILTER_LIST_NETWORKS.name, 'filterOwnerListNetworks', 'func name');
+    t.end();
+});
+
+
+test('filterListNetworks with non-owner account',
+function (t) {
+    var networks = FILTER_LIST_NETWORKS({
+        account: OTHER_ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, NETWORKS, 'networks');
+    t.end();
+});
+
+
+test('filterListNetworks with owner account',
+function (t) {
+    var networks = FILTER_LIST_NETWORKS({ account: ACCOUNT }, clone(NETWORKS));
+    t.deepEqual(networks, [
+        NETWORKS[0],
+        NETWORKS[4]
+    ], 'networks');
+    t.end();
+});
+
+
+test('Setup filterGetNetworksOrPools without api',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools();
+    } catch (e) {
+        t.equal(e.message, 'api (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools without cfg',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools(API);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools with invalid cfg',
+function (t) {
+    try {
+        plugin.filterGetNetworksOrPools(API, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup filterGetNetworksOrPools with valid cfg',
+function (t) {
+    FILTER_GET_NETWORKS_OR_POOLS = plugin.filterGetNetworksOrPools(API, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FILTER_LIST_NETWORKS), 'function', 'func type');
+    t.equal(FILTER_LIST_NETWORKS.name, 'filterOwnerListNetworks', 'func name');
+    t.end();
+});
+
+
+test('filterGetNetworksOrPools with non-owner account',
+function (t) {
+    var networks = FILTER_GET_NETWORKS_OR_POOLS({
+        account: OTHER_ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, NETWORKS, 'networks');
+    t.end();
+});
+
+
+test('filterGetNetworksOrPools with owner account',
+function (t) {
+    var networks = FILTER_GET_NETWORKS_OR_POOLS({
+        account: ACCOUNT
+    }, clone(NETWORKS));
+
+    t.deepEqual(networks, [
+        NETWORKS[0],
+        NETWORKS[4]
+    ], 'networks');
+
+    t.end();
+});
+
+
+test('Setup findOwnerExternalNetwork without api',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork();
+    } catch (e) {
+        t.equal(e.message, 'api (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork without cfg',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork(API);
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork with invalid cfg',
+function (t) {
+    try {
+        plugin.findOwnerExternalNetwork(API, { accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup findOwnerExternalNetwork with valid cfg',
+function (t) {
+    FIND_OWNER_EXTERNAL_NETWORK = plugin.findOwnerExternalNetwork(API, {
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (FIND_OWNER_EXTERNAL_NETWORK), 'function', 'func type');
+    t.equal(FIND_OWNER_EXTERNAL_NETWORK.name,
+        'findExternalNetworkWithOwnerUuid', 'func name');
+    t.end();
+});
+
+
+test('findOwnerExternalNetwork with non-owner account',
+function (t) {
+    function failStub(opts, cb) {
+        t.fail('this should not be called');
+    }
+
+    // admittedly evil mutating a global like this...
+    API.getNapiNetworksForAccount = failStub;
+
+    FIND_OWNER_EXTERNAL_NETWORK({
+        account: OTHER_ACCOUNT,
+        req_id: '1180af02-a8ee-11e7-86c1-28cfe91f7d53'
+    }, function (err, network) {
+        t.equal(err, undefined, 'err');
+        t.equal(network, undefined, 'network');
+        t.end();
+    });
+});
+
+
+test('findOwnerExternalNetwork with owner account',
+function (t) {
+    function getNapiNetworksForAccountStub(opts, cb) {
+        t.deepEqual(opts, {
+            log: API.log,
+            reqId: '1180af02-a8ee-11e7-86c1-28cfe91f7d53',
+            accountUuid: ACCOUNT.uuid
+        }, 'stub opts');
+
+        var nets = NETWORKS.filter(function (network) {
+            return !network.owner_uuids
+                || network.owner_uuids.indexOf(ACCOUNT.uuid) !== -1;
+        });
+
+        return cb(null, nets);
+    }
+
+    API.getNapiNetworksForAccount = getNapiNetworksForAccountStub;
+
+    FIND_OWNER_EXTERNAL_NETWORK({
+        account: ACCOUNT,
+        req_id: '1180af02-a8ee-11e7-86c1-28cfe91f7d53'
+    }, function (err, network) {
+        t.equal(err, null, 'err');
+        t.deepEqual(network, NETWORKS[4], 'network');
+        t.end();
+    });
+});
-- 
2.21.0

