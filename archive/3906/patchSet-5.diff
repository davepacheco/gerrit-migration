From 25bf4e9db56a15626d8ea275b88c2b74d5cbacb6 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 3 May 2018 20:33:12 +0000
Subject: [PATCH] TRITON-367 Check network pool owners during NIC provisioning
 Reviewed by: Mike Zeller <mike.zeller@joyent.com> Reviewed by: Trent Mick
 <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 lib/models/network-pool.js      | 23 ++++++++++++++++++++++-
 lib/models/network.js           |  6 +++++-
 lib/models/nic/common.js        |  8 +++++++-
 test/unit/network-owner.test.js | 24 +++++++++++++++++++++---
 test/unit/network-pools.test.js |  4 ++--
 5 files changed, 57 insertions(+), 8 deletions(-)

diff --git a/lib/models/network-pool.js b/lib/models/network-pool.js
index 733d30e..86580c2 100644
--- a/lib/models/network-pool.js
+++ b/lib/models/network-pool.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -407,6 +407,27 @@ Object.defineProperty(NetworkPool.prototype, 'uuid', {
 });
 
 
+/**
+ * Returns whether or not a UUID is an owner of the pool.
+ *
+ * The "admin" user is allowed to provision on all networks and pools,
+ * to allow provisioning appliance zones like fabric NATs and volumes
+ * without having to be an owner.
+ */
+NetworkPool.prototype.isOwner = function poolHasOwner(owner) {
+    if (!this.params.hasOwnProperty('owner_uuids') ||
+        this.params.owner_uuids.length === 0) {
+        return true;
+    }
+
+    if (owner === constants.UFDS_ADMIN_UUID) {
+        return true;
+    }
+
+    return (this.params.owner_uuids.indexOf(owner) !== -1);
+};
+
+
 /**
  * Returns the raw moray form of the network pool
  */
diff --git a/lib/models/network.js b/lib/models/network.js
index fa4a21e..3fda650 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -1487,7 +1487,11 @@ Network.prototype.serialize = function networkSerialize(opts) {
 
 
 /**
- * Returns whether or not a UUID is an owner of the network
+ * Returns whether or not a UUID is an owner of the network.
+ *
+ * The "admin" user is allowed to provision on all networks and pools,
+ * to allow provisioning appliance zones like fabric NATs and volumes
+ * without having to be an owner.
  */
 Network.prototype.isOwner = function networkHasOwner(owner) {
     if (!this.params.hasOwnProperty('owner_uuids') ||
diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index 4ec7a2a..2bb9dd0 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -307,6 +307,12 @@ function validateNetworkParams(opts, _, parsedParams, callback) {
     }
 
     if (parsedParams.network_pool) {
+        if (badOwnerUUID(parsedParams, parsedParams.network_pool)) {
+            callback(errors.invalidParam('owner_uuid',
+                constants.OWNER_MATCH_MSG));
+            return;
+        }
+
         try {
             parsedParams.intersections = getPoolIntersections('network_uuid',
                 parsedParams, [ parsedParams.network_pool ]);
diff --git a/test/unit/network-owner.test.js b/test/unit/network-owner.test.js
index cd8d19a..d61a963 100644
--- a/test/unit/network-owner.test.js
+++ b/test/unit/network-owner.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -551,7 +551,7 @@ test('pool update', function (t) {
 
 
 test('nic provision', function (t) {
-    t.plan(8);
+    t.plan(9);
 
     t.test('on network pool with same owner_uuid', function (t2) {
         return provisionNic(pools[0].uuid, { owner_uuid: owner }, t2,
@@ -568,7 +568,7 @@ test('nic provision', function (t) {
     });
 
 
-    t.test('with a different owner_uuid', function (t2) {
+    t.test('with a different owner_uuid (nets[0])', function (t2) {
         mod_nic.provision(t2, {
             net: nets[0].uuid,
             params: {
@@ -587,6 +587,24 @@ test('nic provision', function (t) {
     });
 
 
+    t.test('with a different owner_uuid (pools[0])', function (t2) {
+        mod_nic.provision(t2, {
+            net: pools[0].uuid,
+            params: {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: mod_uuid.v4(),
+                owner_uuid: mod_uuid.v4()
+            },
+            expCode: 422,
+            expErr: helpers.invalidParamErr({
+                errors: [
+                    mod_err.invalidParam('owner_uuid',
+                        constants.OWNER_MATCH_MSG)
+                ]
+            })
+        });
+    });
+
     t.test('with a different owner_uuid and no network_uuid', function (t2) {
         mod_nic.create(t2, {
             mac: helpers.randomMAC(),
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index aa385ea..19a26d3 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -1104,7 +1104,7 @@ test('Provision NIC on pool: Retry after QueryTimeoutErrors', function (t) {
     var params = {
         belongs_to_type: 'zone',
         belongs_to_uuid: mod_uuid.v4(),
-        owner_uuid: mod_uuid.v4()
+        owner_uuid: constants.UFDS_ADMIN_UUID
     };
 
     var fakeErr = new Error('Timed out');
-- 
2.21.0

