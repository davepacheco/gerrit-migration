commit 31600ca44c649e3d90f62d02b7b11d1c1a9db8ce (refs/changes/99/999/1)
Author: Chris Burroughs <chris.burroughs@joyent.com>
Date:   2016-11-30T13:56:05-05:00 (2 years, 10 months ago)
    
    jcsb@ys76 ~/src/client/node-triton (sshpem) $ ./bin/triton image create  a567a843 ilovenpm 0.0.0
    Creating image ilovenpm@0.0.0 (51f82875-4197-4de0-9fa2-116904e27754)
    jcsb@ys76 ~/src/client/node-triton (sshpem) $ ./bin/triton image wait 51f82875-4197-4de0-9fa2-116904e27754
    Waiting for image 51f82875-4197-4de0-9fa2-116904e27754 (ilovenpm@0.0.0) to enter state (states: active, failed)
    1/1: Image 51f82875-4197-4de0-9fa2-116904e27754 (ilovenpm@0.0.0) moved to state active

diff --git a/lib/do_image/do_create.js b/lib/do_image/do_create.js
index c63634c..30aca85 100644
--- a/lib/do_image/do_create.js
+++ b/lib/do_image/do_create.js
@@ -26,7 +26,6 @@ var mat = require('../metadataandtags');
 // ---- the command
 
 function do_create(subcmd, opts, args, cb) {
-    var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
@@ -37,9 +36,10 @@ function do_create(subcmd, opts, args, cb) {
     }
 
     var log = this.top.log;
-    var cloudapi = this.top.tritonapi.cloudapi;
+    var tritonapi = this.top.tritonapi;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
         function loadTags(ctx, next) {
             mat.tagsFromCreateOpts(opts, log, function (err, tags) {
                 if (err) {
@@ -76,7 +76,7 @@ function do_create(subcmd, opts, args, cb) {
                 return;
             }
 
-            self.top.tritonapi.getInstance(id, function (err, inst) {
+            tritonapi.getInstance(id, function (err, inst) {
                 if (err) {
                     next(err);
                     return;
@@ -113,20 +113,22 @@ function do_create(subcmd, opts, args, cb) {
                 return;
             }
 
-            cloudapi.createImageFromMachine(createOpts, function (err, img) {
-                if (err) {
-                    next(new errors.TritonError(err, 'error creating image'));
-                    return;
-                }
-                ctx.img = img;
-                if (opts.json) {
-                    console.log(JSON.stringify(img));
-                } else {
-                    console.log('Creating image %s@%s (%s)',
-                        img.name, img.version, img.id);
-                }
-                next();
-            });
+            tritonapi.cloudapi.createImageFromMachine(
+                createOpts, function (err, img) {
+                    if (err) {
+                        next(new errors.TritonError(err,
+                                                    'error creating image'));
+                        return;
+                    }
+                    ctx.img = img;
+                    if (opts.json) {
+                        console.log(JSON.stringify(img));
+                    } else {
+                        console.log('Creating image %s@%s (%s)',
+                                    img.name, img.version, img.id);
+                    }
+                    next();
+                });
         },
         function maybeWait(ctx, next) {
             if (!opts.wait) {
@@ -147,8 +149,8 @@ function do_create(subcmd, opts, args, cb) {
                         ctx.img.state = 'running';
                         waitCb(null, ctx.img);
                     }, 5000);
-                }
-                : cloudapi.waitForImageStates.bind(cloudapi));
+                } : tritonapi.cloudapi.waitForImageStates.bind(
+                    tritonapi.cloudapi));
 
             waiter({
                 id: ctx.img.id,
