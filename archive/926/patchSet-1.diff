From 18974f844b068aad392ccfe83283d0fbc34edee8 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 18 Nov 2016 16:09:18 -0800
Subject: [PATCH] OS-5811 basic support for ECDSA in smartlogin

---
 usr/src/lib/libsmartsshd/Makefile.com         |  2 +-
 usr/src/lib/libsmartsshd/common/mapfile-vers  |  3 ++
 usr/src/lib/libsmartsshd/common/sshd-plugin.c | 39 +++++++++++++++++++
 3 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/usr/src/lib/libsmartsshd/Makefile.com b/usr/src/lib/libsmartsshd/Makefile.com
index 914aab055b..38709d55e7 100644
--- a/usr/src/lib/libsmartsshd/Makefile.com
+++ b/usr/src/lib/libsmartsshd/Makefile.com
@@ -34,7 +34,7 @@ SRCS =	$(OBJECTS:%.o=$(SRCDIR)/%.c)
 
 CPPFLAGS +=	-I$(SRCDIR) -D_REENTRANT -D_FILE_OFFSET_BITS=64
 LIBS =		$(DYNLIB) $(LINTLIB)
-LDLIBS +=	-lc -ldoor
+LDLIBS +=	-lc -ldoor -lmd5
 
 $(LINTLIB) :=	SRCS=	$(SRCDIR)/$(LINTSRC)
 
diff --git a/usr/src/lib/libsmartsshd/common/mapfile-vers b/usr/src/lib/libsmartsshd/common/mapfile-vers
index ce5fc7a9c0..5fed3a4dba 100644
--- a/usr/src/lib/libsmartsshd/common/mapfile-vers
+++ b/usr/src/lib/libsmartsshd/common/mapfile-vers
@@ -40,6 +40,9 @@ $mapfile_version 2
 SYMBOL_VERSION SUNWprivate_1.1 {
     global:
 	sshd_user_rsa_key_allowed;
+	sshd_user_dsa_key_allowed;
+	sshd_user_ecdsa_key_allowed;
+	sshd_user_key_allowed;
     local:
 	*;
 };
diff --git a/usr/src/lib/libsmartsshd/common/sshd-plugin.c b/usr/src/lib/libsmartsshd/common/sshd-plugin.c
index fdb279b817..f009dbcf3e 100644
--- a/usr/src/lib/libsmartsshd/common/sshd-plugin.c
+++ b/usr/src/lib/libsmartsshd/common/sshd-plugin.c
@@ -38,6 +38,8 @@
 
 #include <openssl/rsa.h>
 
+#include <md5.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -123,6 +125,37 @@ sshd_allowed_in_capi(struct passwd *pw, const char *fp)
 	return (0);
 }
 
+void
+tohexstr(uchar_t *bytes, size_t blen, char *hexstr, size_t hexlen)
+{
+	size_t i, j;
+	const char hexlist[] = "0123456789abcdef";
+
+	for (i = 0, j = 0; i < blen; i++) {
+		if (hexlen < (j + 2))
+			break;
+		hexstr[j++] = hexlist[(bytes[i] >> 4) & 0xf];
+		hexstr[j++] = hexlist[bytes[i] & 0xf];
+		if (i + 1 < blen)
+			hexstr[j++] = ':';
+	}
+	hexstr[j] = '\0';
+}
+
+/* ARGSUSED */
+int
+sshd_user_key_allowed(struct passwd *pw, const char *type,
+    const unsigned char *buf, size_t size)
+{
+	unsigned char md5buf[16];
+	char hex[48];
+
+	/* "buf" contains the full key. We want its MD5 fingerprint. */
+	md5_calc(md5buf, buf, size);
+	tohexstr(md5buf, 16, hex, 48);
+	return (sshd_allowed_in_capi(pw, hex));
+}
+
 /* ARGSUSED */
 int
 sshd_user_rsa_key_allowed(struct passwd *pw, RSA *key, const char *fp)
@@ -137,6 +170,12 @@ sshd_user_dsa_key_allowed(struct passwd *pw, DSA *key, const char *fp)
 	return (sshd_allowed_in_capi(pw, fp));
 }
 
+/* ARGSUSED */
+int
+sshd_user_ecdsa_key_allowed(struct passwd *pw, DSA *key, const char *fp)
+{
+	return (sshd_allowed_in_capi(pw, fp));
+}
 
 #ifdef __cplusplus
 }
-- 
2.21.0

