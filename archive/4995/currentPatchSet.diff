commit e8fbe3eb92708292255cb9fe77fcbf65cbb73c2a (refs/changes/95/4995/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-10-23T18:12:57-04:00 (12 months ago)
    
    OS-7323 vminfod off-by-one error when setting initial metadata

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 30280a8a..b15cfd5b 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -8184,6 +8184,13 @@ function installZone(payload, log, callback)
                 return;
             }
 
+
+            /*
+             * Ensure the /zones/<uuid>/config dir exists, and any existing JSON
+             * files are cleared out (set to '{}').  This is done with
+             * createConfigDir.
+             */
+
             var cancelFn;
 
             vasync.parallel({funcs: [
@@ -8196,10 +8203,20 @@ function installZone(payload, log, callback)
                     };
 
                     /*
-                     * Check the following keys for modifications.  If any key
-                     * has been modified then shouldBlock will be set to true,
-                     * and we will block on vminfod below for the changes to be
-                     * reflected.
+                     * Because the zones' metadata might already be set from the
+                     * image it was cloned from, we must block on vminfod while
+                     * the directory is deleted and recreated, and the metadata
+                     * files are created with an empty object.
+                     *
+                     * To do this, we loop over the possible keys that can be
+                     * modified, and check to see if any metadata is already set
+                     * for them.  If an object has any keys associated with it,
+                     * then we know that it will be modified (all keys will be
+                     * removed).
+                     *
+                     * If all existing keys are not set, or set to the empty
+                     * object, then we skip blocking on vminfod (shouldBlock is
+                     * left as false).
                      */
                     [
                         'customer_metadata',
@@ -8210,8 +8227,11 @@ function installZone(payload, log, callback)
                         obj.vm[key] = {};
 
                         if (vmobj.hasOwnProperty(key)
-                            && Object.keys(vmobj[key]).length > 1) {
+                            && Object.keys(vmobj[key]).length > 0) {
 
+                            log.debug('metadata key "%s" will be modified by '
+                                + 'createConfigDir - will block on vminfod',
+                                key);
                             shouldBlock = true;
                         }
                     });
@@ -8221,6 +8241,8 @@ function installZone(payload, log, callback)
                      * modified
                      */
                     if (!shouldBlock) {
+                        log.debug('no metadata will be removed by '
+                            + 'createConfigDir - not blocking on vminfod');
                         cb2();
                         return;
                     }
@@ -10638,6 +10660,9 @@ exports.reprovision = function (uuid, payload, options, callback)
                         if (vmobj.hasOwnProperty(key)
                             && Object.keys(vmobj[key]).length > 0) {
 
+                            log.debug('metadata key "%s" will be modified by '
+                                + 'metadata copy - will block on vminfod',
+                                key);
                             obj.vm[key] = vmobj[key];
                             shouldBlock = true;
                         }
@@ -10651,6 +10676,8 @@ exports.reprovision = function (uuid, payload, options, callback)
 
                     if (!shouldBlock) {
                         // Nothing will be changed by the metadata copy
+                        log.debug('no metadata will be modified by '
+                            + 'metadata copy - not blocking on vminfod');
                         cb2();
                         return;
                     }
