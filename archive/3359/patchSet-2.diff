commit de9b208abc0f76d6651934c086d119370e83a0e4 (refs/changes/59/3359/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-02-13T22:41:26+00:00 (1 year, 8 months ago)
    
    TRITON-133 fwadm(1M) unit tests should compare ipf rule text instead of objects

diff --git a/src/fw/lib/fw.js b/src/fw/lib/fw.js
index ebc0a0a3..7bd12fa7 100644
--- a/src/fw/lib/fw.js
+++ b/src/fw/lib/fw.js
@@ -21,7 +21,7 @@
  * CDDL HEADER END
  *
  *
- * Copyright 2017, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: Main entry points
@@ -32,6 +32,7 @@ var clone = require('clone');
 var filter = require('./filter');
 var fs = require('fs');
 var mkdirp = require('mkdirp');
+var mod_addr = require('ip6addr');
 var mod_ipf = require('./ipf');
 var mod_lock = require('./locker');
 var mod_obj = require('./util/obj');
@@ -443,7 +444,7 @@ function createVMlookup(vms, log, callback) {
 
         var vm = {
             enabled: fullVM.firewall_enabled || false,
-            ips: util_vm.ipsFromNICs(fullVM.nics),
+            ips: util_vm.ipsFromNICs(fullVM.nics).sort(mod_addr.compare),
             owner_uuid: fullVM.owner_uuid,
             state: fullVM.state,
             tags: fullVM.tags,
@@ -900,6 +901,74 @@ function protoTarget(rule, target) {
 }
 
 
+function comparePorts(p1, p2) {
+    // "all" comes before any port numbers
+    if (p1 === 'all') {
+        if (p2 === 'all') {
+            return 0;
+        } else {
+            return -1;
+        }
+    } else if (p2 === 'all') {
+        return 1;
+    }
+
+    var n1 = p1.hasOwnProperty('start') ? p1.start : p1;
+    var n2 = p2.hasOwnProperty('start') ? p2.start : p2;
+
+    return Number(n1) - Number(n2);
+}
+
+
+function compareTypes(t1, t2) {
+    var p1 = t1.split(':');
+    var p2 = t2.split(':');
+    var c = Number(p1[0]) - Number(p2[0]);
+    if (c !== 0) {
+        return c;
+    }
+
+    if (p1.length === 1) {
+        if (p2.length === 1) {
+            return 0;
+        } else {
+            return -1;
+        }
+    } else if (p2.length === 1) {
+        return 1;
+    } else {
+        return Number(p1[1]) - Number(p2[1]);
+    }
+}
+
+
+function compareRules(r1, r2) {
+    var res;
+
+    // Sort protocol as: icmp, icmp6, tcp, udp.
+    if (r1.protocol < r2.protocol) {
+        return -1;
+    }
+
+    if (r1.protocol > r2.protocol) {
+        return 1;
+    }
+
+    if (icmpr.test(r1.protocol)) {
+        res = compareTypes(r1.protoTargets[0], r2.protoTargets[0]);
+    } else {
+        res = comparePorts(r1.protoTargets[0], r2.protoTargets[0]);
+    }
+
+    if (res !== 0) {
+        return res;
+    }
+
+    // Target IPs:
+    return mod_addr.compare(r1.targets[0], r2.targets[0]);
+}
+
+
 /**
  * Returns an object containing ipf rule text and enough data to sort on
  */
@@ -907,6 +976,9 @@ function ipfRuleObj(opts) {
     var dir = opts.direction;
     var rule = opts.rule;
 
+    var targets = Array.isArray(opts.targets) ?
+        opts.targets : [ opts.targets ];
+
     // ipfilter uses /etc/protocols which calls ICMPv6 'ipv6-icmp'
     var ipfProto = (rule.protocol === 'icmp6') ? 'ipv6-icmp' : rule.protocol;
 
@@ -920,6 +992,8 @@ function ipfRuleObj(opts) {
         v6text: [ '', util.format('# rule=%s, version=%s, %s=%s',
             rule.uuid, rule.version, opts.type, opts.value)
         ],
+        targets: targets,
+        protoTargets: rule.protoTargets,
         type: opts.type,
         uuid: rule.uuid,
         value: opts.value,
@@ -927,7 +1001,7 @@ function ipfRuleObj(opts) {
     };
 
     if (opts.type === 'wildcard' && opts.value === 'any') {
-        rule.protoTargets.sort().forEach(function (t) {
+        rule.protoTargets.forEach(function (t) {
             var wild = util.format('%s %s quick proto %s from any to any %s',
                 rule.action === 'allow' ? 'pass' : 'block',
                 dir === 'from' ? 'out' : 'in',
@@ -942,9 +1016,6 @@ function ipfRuleObj(opts) {
         return sortObj;
     }
 
-    var targets = Array.isArray(opts.targets) ?
-        opts.targets : [ opts.targets ];
-
     targets.forEach(function (target) {
         var isv6 = target.indexOf(':') !== -1;
 
@@ -956,8 +1027,7 @@ function ipfRuleObj(opts) {
 
         var text = isv6 ? sortObj.v6text : sortObj.v4text;
 
-        // XXX: need to do Number() on these before sorting?
-        rule.protoTargets.sort().forEach(function (t) {
+        rule.protoTargets.forEach(function (t) {
             text.push(
                 util.format('%s %s quick proto %s from %s to %s %s',
                     rule.action === 'allow' ? 'pass' : 'block',
@@ -1027,23 +1097,19 @@ function prepareIPFdata(opts, log, callback) {
                 return;
             }
 
-            var otherSideRules = rulesFromOtherSide(rule, dir, allVMs,
-                remoteVMs);
+            var otherSideRules =
+                rulesFromOtherSide(rule, dir, allVMs, remoteVMs);
 
             ruleVMs[dir].forEach(function (uuid) {
-                // If the VM's firewall is disabled, we don't need to write out
-                // rules for it
-                if (!allVMs.all[uuid].enabled) {
+                /*
+                 * If the VM's firewall is disabled, we don't need to write out
+                 * rules for it.
+                 */
+                if (!allVMs.all[uuid].enabled || !hasKey(conf, uuid)) {
                     return;
                 }
 
-                otherSideRules.forEach(function (oRule) {
-                    if (!hasKey(conf, uuid)) {
-                        return;
-                    }
-
-                    conf[uuid].push(oRule);
-                });
+                conf[uuid] = conf[uuid].concat(otherSideRules);
             });
         });
     });
@@ -1064,8 +1130,7 @@ function prepareIPFdata(opts, log, callback) {
 
         toReturn.vms.push(vm);
 
-        // XXX: sort here
-        conf[vm].forEach(function (sortObj) {
+        conf[vm].sort(compareRules).forEach(function (sortObj) {
             if (!hasKey(rulesIncluded, sortObj.uuid)) {
                 rulesIncluded[sortObj.uuid] = [];
             }
@@ -1148,12 +1213,13 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
     var ipfRules = [];
 
     if (rule[otherSide].wildcards.indexOf('any') !== -1) {
-            ipfRules.push(ipfRuleObj({
-                rule: rule,
-                direction: dir,
-                type: 'wildcard',
-                value: 'any'
-            }));
+        ipfRules.push(ipfRuleObj({
+            rule: rule,
+            direction: dir,
+            targets: [ '0.0.0.0' ],
+            type: 'wildcard',
+            value: 'any'
+        }));
 
         return ipfRules;
     }
@@ -1212,6 +1278,10 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
                         return;
                     }
 
+                    if (vm.ips.length === 0) {
+                        return;
+                    }
+
                     ipfRules.push(ipfRuleObj({
                         rule: rule,
                         direction: dir,
@@ -1221,7 +1291,6 @@ function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
                     }));
                 });
             });
-
         });
     });
 
diff --git a/src/fw/lib/util/vm.js b/src/fw/lib/util/vm.js
index f27ebe04..971b5c72 100644
--- a/src/fw/lib/util/vm.js
+++ b/src/fw/lib/util/vm.js
@@ -26,7 +26,7 @@
  * fwadm: shared VM logic
  */
 
-var mod_net = require('net');
+var mod_addr = require('ip6addr');
 var mod_obj = require('./obj');
 var VError = require('verror').VError;
 
@@ -64,6 +64,9 @@ function notAuto(i) {
     return (i !== 'dhcp') && (i !== 'addrconf');
 }
 
+function toStr(o) {
+    return o.toString();
+}
 
 
 // --- Exports
@@ -111,15 +114,17 @@ function createRemoteVM(vm) {
         });
     }
 
-    rvm.ips = Object.keys(ips).sort();
-
-    rvm.ips.forEach(function (ip) {
-        if (!mod_net.isIPv4(ip) && !mod_net.isIPv6(ip)) {
+    function parseIP(ip) {
+        try {
+            return mod_addr.parse(ip);
+        } catch (_) {
             err = new VError('Invalid IP address: %s', ip);
             err.details = vm;
             throw err;
         }
-    });
+    }
+
+    rvm.ips = Object.keys(ips).map(parseIP).sort(mod_addr.compare).map(toStr);
 
     if (hasKey(vm, 'tags') && !objEmpty(vm.tags)) {
         rvm.tags = {};
diff --git a/src/fw/test/lib/helpers.js b/src/fw/test/lib/helpers.js
index dba0dd38..e064a5cb 100644
--- a/src/fw/test/lib/helpers.js
+++ b/src/fw/test/lib/helpers.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * Unit test helper functions
  */
@@ -28,6 +28,7 @@
 var assert = require('assert-plus');
 var clone = require('clone');
 var fwrule = require('fwrule');
+var mod_addr = require('ip6addr');
 var mod_obj = require('../../lib/util/obj');
 var mocks = require('./mocks');
 var mod_uuid = require('node-uuid');
@@ -121,8 +122,8 @@ function addZoneRules(exp, toAdd) {
 function defaultZoneRules(uuids) {
     var toReturn = {};
     if (!uuids) {
-        createSubObjects(toReturn, 'out', 'pass', { any: 'any' });
-        createSubObjects(toReturn, 'in', 'block', { any: 'any' });
+        createSubObjects(toReturn, 'out', {});
+        createSubObjects(toReturn, 'in', {});
         return toReturn;
     }
 
@@ -131,8 +132,8 @@ function defaultZoneRules(uuids) {
     }
 
     uuids.forEach(function (uuid) {
-        createSubObjects(toReturn, uuid, 'out', 'pass', { any: 'any' });
-        createSubObjects(toReturn, uuid, 'in', 'block', { any: 'any' });
+        createSubObjects(toReturn, uuid, 'out', {});
+        createSubObjects(toReturn, uuid, 'in', {});
     });
 
     return toReturn;
@@ -366,6 +367,13 @@ function zoneIPFconfigs(version) {
             continue;
         }
 
+        var zone = dir.split('/')[2];
+        var rules = {
+            in: {},
+            out: {}
+        };
+        firewalls[zone] = rules;
+
         if (DEBUG_FILES) {
             console.log('%s:\n+-', dir);
         }
@@ -380,9 +388,7 @@ function zoneIPFconfigs(version) {
 
             // block out quick proto tcp from any to 10.99.99.254 port = 3000
             // pass in quick proto tcp from 10.2.0.1 to any port = 80
-            var zone = dir.split('/')[2];
             var tok = l.split(' ');
-            var action = tok[0];
             var d = tok[1];
 
             if (l === 'block in all'
@@ -392,8 +398,6 @@ function zoneIPFconfigs(version) {
                 || l === ICMPV6_STATE_LINE
                 || l === ICMPV6_WILD_LINE
                 || /^pass out proto \w+ from any to any/.test(l)) {
-                var act = createSubObjects(firewalls, zone, d, action);
-                act.any = 'any';
                 return;
             }
 
@@ -403,44 +407,11 @@ function zoneIPFconfigs(version) {
                 proto = 'icmp6';
             }
 
-            var dest = action === 'block' ? tok[8] : tok[6];
-            var code, port, portMatch;
-            if (icmpr.test(proto)) {
-                /* JSSTYLED */
-                portMatch = l.match(/icmp-type (\d+)/);
-                if (portMatch) {
-                    port = portMatch[1];
-                    /* JSSTYLED */
-                    code = l.match(/code (\d+)/);
-                    if (code) {
-                        port = port + ':' + code[1];
-                    }
-                } else {
-                    port = 'all';
-                }
-            } else {
-                portMatch = l.match(/port = (\d+)/);
-                if (portMatch) {
-                    port = portMatch[1];
-                } else {
-                    port = 'all';
-                }
-            }
-
-            // block out quick proto tcp to any port = 8080
-            if (tok[6] === 'any' && tok.length < 12) {
-                dest = 'any';
+            if (!hasKey(rules[d], proto)) {
+                rules[d][proto] = [];
             }
 
-            var dests = createSubObjects(firewalls, zone, d, action, proto);
-            if (!hasKey(dests, dest)) {
-                dests[dest] = [];
-            }
-
-            if (dests[dest].indexOf(port) == -1) {
-                dests[dest] = dests[dest].concat([port]).sort(function (a, b) {
-                    return (a - b); });
-            }
+            rules[d][proto].push(l);
         });
 
         if (DEBUG_FILES) {
@@ -615,9 +586,136 @@ function vmsAffected(opts, callback) {
     });
 }
 
+function compareIPArrays(a, b) {
+    return mod_addr.compare(a[0], b[0]);
+}
+
+function concat(acc, curr) {
+    return acc.concat(curr);
+}
+
+function getIPsFromVMs(vms) {
+    var ips = [];
+
+    vms.forEach(function (vm) {
+        var arr = util_vm.ipsFromNICs(vm.nics);
+        if (arr.length > 0) {
+            ips.push(arr);
+        }
+    });
+
+    return ips.sort(compareIPArrays).reduce(concat, []);
+}
+
+function forEachVMsIPs(vms, f) {
+    getIPsFromVMs(vms).forEach(f);
+}
+
+function createPortRule(action, dir, proto, who, port) {
+    var suffix = '';
+    if (port) {
+        suffix += 'port = ' + port;
+    }
+    return util.format(
+        '%s %s quick proto %s from %s %s', action, dir, proto, who, suffix);
+}
+
+function createRangeRule(action, dir, proto, who, p1, p2) {
+    var suffix = 'port ' + p1 + ' : ' + p2 + ' keep frags';
+    return util.format(
+        '%s %s quick proto %s from %s %s', action, dir, proto, who, suffix);
+}
+
+function allowPortInTCP(src, port) {
+    return createPortRule('pass', 'in', 'tcp', src + ' to any', port);
+}
+
+function allowRangeInTCP(src, p1, p2) {
+    return createRangeRule('pass', 'in', 'tcp', src + ' to any', p1, p2);
+}
+
+function blockPortInTCP(src, port) {
+    return createPortRule('block', 'in', 'tcp', src + ' to any', port);
+}
+
+function blockRangeInTCP(src, p1, p2) {
+    return createRangeRule('block', 'in', 'tcp', src + ' to any', p1, p2);
+}
+
+function allowPortInUDP(src, port) {
+    return createPortRule('pass', 'in', 'udp', src + ' to any', port);
+}
+
+function allowInICMP(src, type, code) {
+    var suffix = '';
+    if (type !== undefined) {
+        suffix += 'icmp-type ' + type;
+    }
+    if (code !== undefined) {
+        suffix += ' code ' + code;
+    }
+    return util.format(
+        'pass in quick proto icmp from %s to any %s', src, suffix);
+}
+
+function allowInICMP6(src, type, code) {
+    var suffix = '';
+    if (type !== undefined) {
+        suffix += 'icmp-type ' + type;
+    }
+    if (code !== undefined) {
+        suffix += ' code ' + code;
+    }
+    return util.format(
+        'pass in quick proto ipv6-icmp from %s to any %s', src, suffix);
+}
+
+
+function allowPortOutTCP(dst, port) {
+    return createPortRule('pass', 'out', 'tcp', 'any to ' + dst, port);
+}
+
+function blockPortOutTCP(dst, port) {
+    return createPortRule('block', 'out', 'tcp', 'any to ' + dst, port);
+}
+
+function allowPortOutUDP(dst, port) {
+    return createPortRule('pass', 'out', 'udp', 'any to ' + dst, port);
+}
+
+function allowRangeOutUDP(dst, p1, p2) {
+    return createRangeRule('pass', 'out', 'udp', 'any to ' + dst, p1, p2);
+}
+
+function blockPortOutUDP(dst, port) {
+    return createPortRule('block', 'out', 'udp', 'any to ' + dst, port);
+}
+
+function blockRangeOutUDP(dst, p1, p2) {
+    return createRangeRule('block', 'out', 'udp', 'any to ' + dst, p1, p2);
+}
 
 
 module.exports = {
+    allowPortInTCP: allowPortInTCP,
+    blockPortInTCP: blockPortInTCP,
+    allowRangeInTCP: allowRangeInTCP,
+    blockRangeInTCP: blockRangeInTCP,
+
+    allowPortOutTCP: allowPortOutTCP,
+    blockPortOutTCP: blockPortOutTCP,
+
+    allowPortInUDP: allowPortInUDP,
+
+    allowPortOutUDP: allowPortOutUDP,
+    blockPortOutUDP: blockPortOutUDP,
+
+    allowRangeOutUDP: allowRangeOutUDP,
+    blockRangeOutUDP: blockRangeOutUDP,
+
+    allowInICMP: allowInICMP,
+    allowInICMP6: allowInICMP6,
+
     addZoneRules: addZoneRules,
     defaultZoneRules: defaultZoneRules,
     fillInRuleBlanks: fillInRuleBlanks,
@@ -627,6 +725,8 @@ module.exports = {
     fwRulesEqual: fwRulesEqual,
     fwRvmRulesEqual: fwRvmRulesEqual,
     getIPFenabled: getIPFenabled,
+    getIPsFromVMs: getIPsFromVMs,
+    forEachVMsIPs: forEachVMsIPs,
     generateVM: generateVM,
     ipKey: ipKey,
     printVM: printVM,
diff --git a/src/fw/test/lib/mocks.js b/src/fw/test/lib/mocks.js
index ac159fa8..3c9cb976 100644
--- a/src/fw/test/lib/mocks.js
+++ b/src/fw/test/lib/mocks.js
@@ -471,6 +471,7 @@ function setup(opts) {
         'events',
         'extsprintf',
         'fwrule',
+        'ip6addr',
         'net',
         'node-uuid',
         'path',
@@ -478,6 +479,7 @@ function setup(opts) {
         'vasync',
         'verror',
         'util',
+        './',
         './clonePrototype.js',
         './filter',
         './ipf',
diff --git a/src/fw/test/node_modules/nodeunit/lib/assert.js b/src/fw/test/node_modules/nodeunit/lib/assert.js
index 55ef7449..a5bb34fc 100644
--- a/src/fw/test/node_modules/nodeunit/lib/assert.js
+++ b/src/fw/test/node_modules/nodeunit/lib/assert.js
@@ -48,6 +48,7 @@ var _keys = function(obj){
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 
+var clone = require('clone');
 var pSlice = Array.prototype.slice;
 
 // 1. The assert module provides functions that throw
@@ -62,8 +63,8 @@ var assert = exports;
 assert.AssertionError = function AssertionError (options) {
   this.name = "AssertionError";
   this.message = options.message;
-  this.actual = options.actual;
-  this.expected = options.expected;
+  this.actual = clone(options.actual);
+  this.expected = clone(options.expected);
   this.operator = options.operator;
   var stackStartFunction = options.stackStartFunction || fail;
 
diff --git a/src/fw/test/unit/add.test.js b/src/fw/test/unit/add.test.js
index 76c8f0b5..2eecd15b 100644
--- a/src/fw/test/unit/add.test.js
+++ b/src/fw/test/unit/add.test.js
@@ -201,7 +201,7 @@ exports['created_by'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/fw.test.js b/src/fw/test/unit/fw.test.js
index a8ee090b..06e0d376 100644
--- a/src/fw/test/unit/fw.test.js
+++ b/src/fw/test/unit/fw.test.js
@@ -35,7 +35,6 @@ var mod_uuid = require('node-uuid');
 var util = require('util');
 var util_vm = require('../../lib/util/vm');
 
-var createSubObjects = mod_obj.createSubObjects;
 var mergeObjects = mod_obj.mergeObjects;
 
 
@@ -141,10 +140,10 @@ exports['add / update: vm to IP: BLOCK'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm.uuid);
             var v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    '10.99.99.254': [ 8080 ]
-                });
+
+            v4rules[vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 8080)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
@@ -207,11 +206,11 @@ exports['add / update: vm to IP: BLOCK'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm.uuid);
             var v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    '10.99.99.254': [ 8080 ],
-                    '10.88.88.2': [ 8080 ]
-                });
+
+            v4rules[vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.88.88.2', 8080),
+                helpers.blockPortOutTCP('10.99.99.254', 8080)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
@@ -296,7 +295,7 @@ exports['add / update: vm to IP: BLOCK'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -373,7 +372,7 @@ exports['add / update: vm to IP: ALLOW'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -417,10 +416,11 @@ exports['add: tag to IP'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm1.uuid);
             var v6rules = helpers.defaultZoneRules(vm1.uuid);
-            createSubObjects(v4rules, vm1.uuid, 'out', 'block', 'tcp',
-                {
-                    '10.99.99.254': [ 25 ]
-                });
+
+            v4rules[vm1.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 25)
+            ];
+
             v4rules[vm2.uuid] = v4rules[vm1.uuid];
             v6rules[vm2.uuid] = v6rules[vm1.uuid];
 
@@ -473,7 +473,7 @@ exports['add: tag to IP'] = function (t) {
         }, cb);
     }
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -525,14 +525,14 @@ exports['add: tag to subnet'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm1.uuid);
             var v6rules = helpers.defaultZoneRules(vm1.uuid);
-            createSubObjects(v4rules, vm1.uuid, 'out', 'block', 'tcp',
-                {
-                    '10.99.99.0/24': [ 25 ]
-                });
-            createSubObjects(v4rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    '10.99.99.0/24': [ 80 ]
-                });
+
+            v4rules[vm1.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.0/24', 25)
+            ];
+            v4rules[vm1.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.99.99.0/24', 80)
+            ];
+
             v4rules[vm2.uuid] = v4rules[vm1.uuid];
             v6rules[vm2.uuid] = v6rules[vm1.uuid];
 
@@ -605,7 +605,7 @@ exports['add: tag to subnet'] = function (t) {
         }, cb);
     }
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -660,14 +660,10 @@ exports['add: vm to subnet'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm1.uuid);
             var v6rules = helpers.defaultZoneRules(vm1.uuid);
-            createSubObjects(v4rules, vm1.uuid, 'out', 'block', 'tcp',
-                {
-                    '10.99.99.0/24': [ 25 ]
-                });
-            createSubObjects(v4rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    '10.99.99.0/24': [ 80 ]
-                });
+            v4rules[vm1.uuid].out.tcp =
+                [ helpers.blockPortOutTCP('10.99.99.0/24', 25) ];
+            v4rules[vm1.uuid].in.tcp =
+                [ helpers.allowPortInTCP('10.99.99.0/24', 80) ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
@@ -748,7 +744,7 @@ exports['add: vm to subnet'] = function (t) {
         }, cb);
     }
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -888,14 +884,11 @@ exports['enable / disable rule'] = function (t) {
                 vms: [ vm.uuid ]
             }, 'rules returned');
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 33 ]
-                });
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 33 ]
-                });
+            v4rules[vm.uuid].in.tcp =
+                [ helpers.allowPortInTCP('any', 33) ];
+            v6rules[vm.uuid].in.tcp =
+                [ helpers.allowPortInTCP('any', 33) ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files still the same');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -925,7 +918,7 @@ exports['enable / disable rule'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/icmp.test.js b/src/fw/test/unit/icmp.test.js
index b6426816..05e32bc3 100644
--- a/src/fw/test/unit/icmp.test.js
+++ b/src/fw/test/unit/icmp.test.js
@@ -112,10 +112,9 @@ exports['add / update ICMPv4'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'icmp',
-                {
-                    '10.99.99.254': [ '8' ]
-                });
+            v4rules[vm.uuid].in.icmp = [
+                helpers.allowInICMP('10.99.99.254', '8')
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
@@ -162,7 +161,10 @@ exports['add / update ICMPv4'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            v4rules[vm.uuid].in.pass.icmp['10.99.99.254'] = [ '8:0' ];
+            v4rules[vm.uuid].in.icmp = [
+                helpers.allowInICMP('10.99.99.254', '8', '0')
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -207,7 +209,10 @@ exports['add / update ICMPv4'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            v4rules[vm.uuid].in.pass.icmp['10.99.99.254'] = [ 'all' ];
+            v4rules[vm.uuid].in.icmp = [
+                helpers.allowInICMP('10.99.99.254')
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -286,7 +291,7 @@ exports['add / update ICMPv4'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -328,10 +333,9 @@ exports['add / update ICMPv6'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'icmp6',
-                {
-                    'fe80::92b8:d0ff:fe4b:c73b': [ '128' ]
-                });
+            v6rules[vm.uuid].in.icmp6 = [
+                helpers.allowInICMP6('fe80::92b8:d0ff:fe4b:c73b', '128')
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
@@ -379,8 +383,10 @@ exports['add / update ICMPv6'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            v6rules[vm.uuid].in.pass.icmp6['fe80::92b8:d0ff:fe4b:c73b'] =
-                [ '128:0' ];
+            v6rules[vm.uuid].in.icmp6 = [
+                helpers.allowInICMP6('fe80::92b8:d0ff:fe4b:c73b', '128', '0')
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -426,8 +432,10 @@ exports['add / update ICMPv6'] = function (t) {
                 rules: [ expRule ]
             }, 'rules returned');
 
-            v6rules[vm.uuid].in.pass.icmp6['fe80::92b8:d0ff:fe4b:c73b'] =
-                [ 'all' ];
+            v6rules[vm.uuid].in.icmp6 = [
+                helpers.allowInICMP6('fe80::92b8:d0ff:fe4b:c73b')
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'zone ipf.conf files correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -505,7 +513,7 @@ exports['add / update ICMPv6'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/list.test.js b/src/fw/test/unit/list.test.js
index 1b032c18..a61e4c53 100644
--- a/src/fw/test/unit/list.test.js
+++ b/src/fw/test/unit/list.test.js
@@ -139,7 +139,7 @@ exports['fields'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/owner.test.js b/src/fw/test/unit/owner.test.js
index c1adc8de..981d0111 100644
--- a/src/fw/test/unit/owner.test.js
+++ b/src/fw/test/unit/owner.test.js
@@ -113,8 +113,10 @@ exports['tag to IP'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules(vm2.uuid);
             var v6rules = helpers.defaultZoneRules(vm2.uuid);
-            createSubObjects(v4rules, vm2.uuid, 'out', 'block', 'tcp',
-                        { '10.99.99.254': [ 25 ] });
+
+            v4rules[vm2.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 25)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -179,10 +181,15 @@ exports['tag to IP'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
             var v6rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
-            createSubObjects(v4rules, vm2.uuid, 'out', 'block', 'tcp',
-                { '10.99.99.254': [ 25, 250 ] });
-            createSubObjects(v4rules, vm1.uuid, 'out', 'block', 'tcp',
-                { '10.99.99.254': [ 250 ] });
+
+            v4rules[vm1.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 250)
+            ];
+
+            v4rules[vm2.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 25),
+                helpers.blockPortOutTCP('10.99.99.254', 250)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -242,8 +249,11 @@ exports['tag to IP'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
             var v6rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
-            createSubObjects(v4rules, vm2.uuid, 'out', 'block', 'tcp',
-                { '10.99.99.254': [ 25, 250 ] });
+
+            v4rules[vm2.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 25),
+                helpers.blockPortOutTCP('10.99.99.254', 250)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -280,8 +290,10 @@ exports['tag to IP'] = function (t) {
 
             var v4rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
             var v6rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
-            createSubObjects(v4rules, vm2.uuid, 'out', 'block', 'tcp',
-                { '10.99.99.254': [ 25 ] });
+
+            v4rules[vm2.uuid].out.tcp = [
+                helpers.blockPortOutTCP('10.99.99.254', 25)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -299,7 +311,7 @@ exports['tag to IP'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -382,20 +394,18 @@ exports['all vms (local and remote)'] = function (t) {
 
             [vm1, vm2].forEach(function (vm) {
                 vmsEnabled[vm.uuid] = true;
-                createSubObjects(v4rules, vm.uuid, 'out', 'block', 'tcp',
-                    {
-                        '10.1.1.1': [ 8082 ],
-                        '10.1.1.2': [ 8082 ],
-                        '10.1.1.3': [ 8082 ],
-                        '10.1.1.4': [ 8082 ]
-                    });
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        '10.1.1.1': [ 8081 ],
-                        '10.1.1.2': [ 8081 ],
-                        '10.1.1.3': [ 8081 ],
-                        '10.1.1.4': [ 8081 ]
-                    });
+                v4rules[vm.uuid].out.tcp = [
+                    helpers.blockPortOutTCP('10.1.1.1', 8082),
+                    helpers.blockPortOutTCP('10.1.1.2', 8082),
+                    helpers.blockPortOutTCP('10.1.1.3', 8082),
+                    helpers.blockPortOutTCP('10.1.1.4', 8082)
+                ];
+                v4rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('10.1.1.1', 8081),
+                    helpers.allowPortInTCP('10.1.1.2', 8081),
+                    helpers.allowPortInTCP('10.1.1.3', 8081),
+                    helpers.allowPortInTCP('10.1.1.4', 8081)
+                ];
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -444,34 +454,36 @@ exports['all vms (local and remote)'] = function (t) {
             }, 'rules returned');
 
             [vm1, vm2].forEach(function (vm) {
-                v4rules[vm.uuid].in.pass.tcp = {
-                        '10.1.1.1': [ 8081, 8083 ],
-                        '10.1.1.2': [ 8081, 8083 ],
-                        '10.1.1.3': [ 8081, 8083 ],
-                        '10.1.1.4': [ 8081, 8083 ],
-                        '10.8.8.1': [ 8083 ],
-                        '10.8.8.2': [ 8083 ]
-                    };
+                v4rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('10.1.1.1', 8081),
+                    helpers.allowPortInTCP('10.1.1.2', 8081),
+                    helpers.allowPortInTCP('10.1.1.3', 8081),
+                    helpers.allowPortInTCP('10.1.1.4', 8081),
+
+                    helpers.allowPortInTCP('10.1.1.1', 8083),
+                    helpers.allowPortInTCP('10.1.1.2', 8083),
+                    helpers.allowPortInTCP('10.1.1.3', 8083),
+                    helpers.allowPortInTCP('10.1.1.4', 8083),
+                    helpers.allowPortInTCP('10.8.8.1', 8083),
+                    helpers.allowPortInTCP('10.8.8.2', 8083)
+                ];
             });
 
             v4rules[vm3.uuid] = helpers.defaultZoneRules();
             v6rules[vm3.uuid] = helpers.defaultZoneRules();
-            createSubObjects(v4rules, vm3.uuid, 'in', 'pass', 'tcp',
-                {
-                    '10.1.1.1': [ 8083 ],
-                    '10.1.1.2': [ 8083 ],
-                    '10.1.1.3': [ 8083 ],
-                    '10.1.1.4': [ 8083 ],
-                    '10.8.8.1': [ 8083 ],
-                    '10.8.8.2': [ 8083 ]
-                });
+            v4rules[vm3.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.1.1.1', 8083),
+                helpers.allowPortInTCP('10.1.1.2', 8083),
+                helpers.allowPortInTCP('10.1.1.3', 8083),
+                helpers.allowPortInTCP('10.1.1.4', 8083),
+                helpers.allowPortInTCP('10.8.8.1', 8083),
+                helpers.allowPortInTCP('10.8.8.2', 8083)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
                 'IPv6 firewall rules correct');
-            t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
-                'IPv4 firewall rules correct');
 
             vmsEnabled[vm3.uuid] = true;
             t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
@@ -521,14 +533,15 @@ exports['all vms (local and remote)'] = function (t) {
 
 
             [vm1, vm2].forEach(function (vm) {
-                v4rules[vm.uuid].in.pass.tcp = {
-                        '10.1.1.1': [ 8083 ],
-                        '10.1.1.2': [ 8083 ],
-                        '10.1.1.3': [ 8083 ],
-                        '10.1.1.4': [ 8081, 8083 ],
-                        '10.8.8.1': [ 8083 ],
-                        '10.8.8.2': [ 8083 ]
-                    };
+                v4rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('10.1.1.4', 8081),
+                    helpers.allowPortInTCP('10.1.1.1', 8083),
+                    helpers.allowPortInTCP('10.1.1.2', 8083),
+                    helpers.allowPortInTCP('10.1.1.3', 8083),
+                    helpers.allowPortInTCP('10.1.1.4', 8083),
+                    helpers.allowPortInTCP('10.8.8.1', 8083),
+                    helpers.allowPortInTCP('10.8.8.2', 8083)
+                ];
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -568,7 +581,7 @@ exports['all vms (local and remote)'] = function (t) {
             }, 'results returned');
 
             [vm1, vm2].forEach(function (vm) {
-                delete v4rules[vm.uuid].out.block;
+                v4rules[vm.uuid].out = {};
             });
 
             expRules = expRules.filter(function (r) {
@@ -596,7 +609,7 @@ exports['all vms (local and remote)'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -674,11 +687,10 @@ exports['remote vms: tags'] = function (t) {
             v6rules = helpers.defaultZoneRules(vm1.uuid);
 
             vmsEnabled[vm1.uuid] = true;
-            createSubObjects(v4rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    '10.1.1.1': [ 8081 ],
-                    '10.1.1.4': [ 8081 ]
-                });
+            v4rules[vm1.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.1.1.1', 8081),
+                helpers.allowPortInTCP('10.1.1.4', 8081)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -703,7 +715,7 @@ exports['remote vms: tags'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -770,10 +782,9 @@ exports['remote vms: vms'] = function (t) {
             v6rules = helpers.defaultZoneRules(vm1.uuid);
 
             vmsEnabled[vm1.uuid] = true;
-            createSubObjects(v4rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    '10.1.1.4': [ 8081 ]
-                });
+            v4rules[vm1.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.1.1.4', 8081)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -798,7 +809,7 @@ exports['remote vms: vms'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/remote-vms.test.js b/src/fw/test/unit/remote-vms.test.js
index c6bb5fed..04b1f7e7 100644
--- a/src/fw/test/unit/remote-vms.test.js
+++ b/src/fw/test/unit/remote-vms.test.js
@@ -35,7 +35,6 @@ var mod_uuid = require('node-uuid');
 var util = require('util');
 var util_vm = require('../../lib/util/vm');
 
-var createSubObjects = mod_obj.createSubObjects;
 var ipKey = helpers.ipKey;
 
 
@@ -152,13 +151,15 @@ exports['local VM to remote VM'] = function (t) {
             }, 'rules returned');
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp[ipKey(rvmNICs[0].ips[0])] = [ 80 ];
-            v4rules[vm.uuid]['in'].pass.tcp[rvm.nics[1].ip] = [ 80 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(ipKey(rvmNICs[0].ips[0]), 80),
+                helpers.allowPortInTCP(rvm.nics[1].ip, 80)
+            ];
 
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp');
-            v6rules[vm.uuid]['in'].pass.tcp[ipKey(rvmNICs[0].ips[1])] = [ 80 ];
+            v6rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(ipKey(rvmNICs[0].ips[1]), 80)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -236,12 +237,13 @@ exports['local VM to remote VM'] = function (t) {
 
             helpers.fillInRuleBlanks(res.rules, rule3);
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'udp');
-            v4rules[vm.uuid]['in'].pass.udp[ipKey(rvmNICs[0].ips[0])] = [ 161 ];
-            v4rules[vm.uuid]['in'].pass.udp[rvm.nics[1].ip] = [ 161 ];
-
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'udp');
-            v6rules[vm.uuid]['in'].pass.udp[ipKey(rvmNICs[0].ips[1])] = [ 161 ];
+            v4rules[vm.uuid].in.udp = [
+                helpers.allowPortInUDP(ipKey(rvmNICs[0].ips[0]), 161),
+                helpers.allowPortInUDP(rvm.nics[1].ip, 161)
+            ];
+            v6rules[vm.uuid].in.udp = [
+                helpers.allowPortInUDP(ipKey(rvmNICs[0].ips[1]), 161)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -300,8 +302,8 @@ exports['local VM to remote VM'] = function (t) {
                 return cb(err);
             }
 
-            delete v4rules[vm.uuid]['in'].pass.udp;
-            delete v6rules[vm.uuid]['in'].pass.udp;
+            delete v4rules[vm.uuid].in.udp;
+            delete v6rules[vm.uuid].in.udp;
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -425,8 +427,9 @@ exports['local VM to remote VM'] = function (t) {
 
             helpers.fillInRuleBlanks(res.rules, rule4);
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp[rvm2.nics[0].ip] = [ 90 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(rvm2.nics[0].ip, 90)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -541,8 +544,9 @@ exports['local VM to remote tag'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp[rvm.nics[0].ip] = [ 80 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(rvm.nics[0].ip, 80)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -605,8 +609,9 @@ exports['local VM to remote tag'] = function (t) {
 
             helpers.fillInRuleBlanks(res.rules, rule3);
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'udp');
-            v4rules[vm.uuid]['in'].pass.udp[rvm.nics[0].ip] = [ 161 ];
+            v4rules[vm.uuid].in.udp = [
+                helpers.allowPortInUDP(rvm.nics[0].ip, 161)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -657,7 +662,7 @@ exports['local VM to remote tag'] = function (t) {
                 return cb(err);
             }
 
-            delete v4rules[vm.uuid]['in'].pass.udp;
+            delete v4rules[vm.uuid].in.udp;
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -788,8 +793,9 @@ exports['local VM and remote VM to IP'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp['10.0.0.1'] = [ 80 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP('10.0.0.1', 80)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -834,7 +840,7 @@ exports['local VM and remote VM to IP'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -886,9 +892,10 @@ exports['all vms to local VM'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp[vm.nics[0].ip] = [ 44 ];
-            v4rules[vm.uuid]['in'].pass.tcp[rvm.nics[0].ip] = [ 44 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(vm.nics[0].ip, 44),
+                helpers.allowPortInTCP(rvm.nics[0].ip, 44)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -932,7 +939,8 @@ exports['all vms to local VM'] = function (t) {
 
             helpers.fillInRuleBlanks(res.rules, [rule2]);
 
-            v4rules[vm.uuid]['in'].pass.tcp['10.6.0.1'] = [ 45 ];
+            v4rules[vm.uuid].in.tcp.push(
+                helpers.allowPortInTCP('10.6.0.1', 45));
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -955,7 +963,7 @@ exports['all vms to local VM'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -1014,8 +1022,9 @@ exports['owner_uuid filtering'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp');
-            v4rules[vm.uuid]['in'].pass.tcp[vm.nics[0].ip] = [ 25 ];
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP(vm.nics[0].ip, 25)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
@@ -1057,7 +1066,9 @@ exports['owner_uuid filtering'] = function (t) {
                 remoteVMs: [ rvm1.uuid ]
             }, 'rules returned');
 
-            v4rules[vm.uuid]['in'].pass.tcp[rvm1.nics[0].ip] = [ 25 ];
+            v4rules[vm.uuid].in.tcp.push(
+                helpers.allowPortInTCP(rvm1.nics[0].ip, 25));
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -1120,7 +1131,7 @@ exports['owner_uuid filtering'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -1129,7 +1140,7 @@ exports['delete: different VMs than RVMs in rule'] = function (t) {
     var vms = [ helpers.generateVM(), helpers.generateVM() ];
     var rvms = [ helpers.generateVM(), helpers.generateVM() ];
 
-    var v4rules = {}, v6rules;
+    var v4rules, v6rules;
     var expRulesOnDisk = {};
     var remoteVMsOnDisk = {};
     var vmsEnabled = {};
@@ -1188,13 +1199,17 @@ exports['delete: different VMs than RVMs in rule'] = function (t) {
                 remoteVMs: helpers.sortedUUIDs(rvms)
             }, 'rules returned');
 
-            helpers.addZoneRules(v4rules, [
-                [vms[0], 'in', 'pass', 'tcp', rvms[0].nics[0].ip, 80],
-                [vms[1], 'in', 'pass', 'tcp', '10.2.0.2', 81],
-                [vms[1], 'in', 'pass', 'tcp', rvms[1].nics[0].ip, 82]
-            ]);
+            v4rules = helpers.defaultZoneRules([vms[0].uuid, vms[1].uuid]);
             v6rules = helpers.defaultZoneRules([vms[0].uuid, vms[1].uuid]);
 
+            v4rules[vms[0].uuid].in.tcp = [
+                helpers.allowPortInTCP(rvms[0].nics[0].ip, 80)
+            ];
+            v4rules[vms[1].uuid].in.tcp = [
+                helpers.allowPortInTCP('10.2.0.2', 81),
+                helpers.allowPortInTCP(rvms[1].nics[0].ip, 82)
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -1233,7 +1248,8 @@ exports['delete: different VMs than RVMs in rule'] = function (t) {
                 return cb(err);
             }
 
-            delete v4rules[vms[1].uuid]['in'].pass.tcp[rvms[1].nics[0].ip];
+            v4rules[vms[1].uuid].in.tcp.pop();
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -1266,8 +1282,8 @@ exports['delete: different VMs than RVMs in rule'] = function (t) {
                 return cb(err);
             }
 
-            delete v4rules[vms[0].uuid]['in'].pass;
-            delete v4rules[vms[1].uuid]['in'].pass;
+            delete v4rules[vms[0].uuid].in.tcp;
+            delete v4rules[vms[1].uuid].in.tcp;
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
diff --git a/src/fw/test/unit/tags.test.js b/src/fw/test/unit/tags.test.js
index eb581af9..4380c525 100644
--- a/src/fw/test/unit/tags.test.js
+++ b/src/fw/test/unit/tags.test.js
@@ -30,13 +30,13 @@ var clone = require('clone');
 var fw;
 var helpers = require('../lib/helpers');
 var mocks = require('../lib/mocks');
+var mod_addr = require('ip6addr');
 var mod_obj = require('../../lib/util/obj');
 var mod_uuid = require('node-uuid');
 var net = require('net');
 var util = require('util');
 var util_vm = require('../../lib/util/vm');
 
-var createSubObjects = mod_obj.createSubObjects;
 var mergeObjects = mod_obj.mergeObjects;
 
 
@@ -71,6 +71,9 @@ function reset() {
     d = {};
 }
 
+function getUUID(vm) {
+    return vm.uuid;
+}
 
 
 // --- Tests
@@ -179,28 +182,24 @@ exports['add / update: tag to tag'] = function (t) {
             rule1.uuid = res.rules[0].uuid;
             rule1.version = res.rules[0].version;
             t.deepEqual(helpers.sortRes(res), {
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort(),
+                vms: tagOneVMs.map(getUUID).sort(),
                 rules: [ rule1 ]
             }, 'rules returned');
 
-            v4rules = helpers.defaultZoneRules(
-                tagOneVMs.map(function (vm) { return vm.uuid; }));
-            v6rules = helpers.defaultZoneRules(
-                tagOneVMs.map(function (vm) { return vm.uuid; }));
+            v4rules = helpers.defaultZoneRules(tagOneVMs.map(getUUID));
+            v6rules = helpers.defaultZoneRules(tagOneVMs.map(getUUID));
             vmsEnabled = {};
 
             tagOneVMs.forEach(function (vm) {
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        '10.2.0.1': [ 80 ],
-                        '10.2.0.2': [ 80 ],
-                        '10.2.0.3': [ 80 ],
-                        '165.225.132.33': [ 80 ]
-                    });
-                createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        'fd22::45': [ 80 ]
-                    });
+                v4rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('10.2.0.1', 80),
+                    helpers.allowPortInTCP('165.225.132.33', 80),
+                    helpers.allowPortInTCP('10.2.0.2', 80),
+                    helpers.allowPortInTCP('10.2.0.3', 80)
+                ];
+                v6rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('fd22::45', 80)
+                ];
                 vmsEnabled[vm.uuid] = true;
             });
 
@@ -242,28 +241,24 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
-            v4rules = helpers.defaultZoneRules(
-                tagOneVMs.map(function (vm) { return vm.uuid; }));
-            v6rules = helpers.defaultZoneRules(
-                tagOneVMs.map(function (vm) { return vm.uuid; }));
+            v4rules = helpers.defaultZoneRules(tagOneVMs.map(getUUID));
+            v6rules = helpers.defaultZoneRules(tagOneVMs.map(getUUID));
             vmsEnabled = {};
 
             tagOneVMs.forEach(function (vm) {
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        '10.2.0.1': [ 80 ],
-                        '10.2.0.2': [ 80 ],
-                        '10.2.0.3': [ 80 ],
-                        '10.2.0.5': [ 80 ],
-                        '165.225.132.33': [ 80 ]
-                    });
-                createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        'fd22::45': [ 80 ]
-                    });
+                v4rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('10.2.0.1', 80),
+                    helpers.allowPortInTCP('165.225.132.33', 80),
+                    helpers.allowPortInTCP('10.2.0.2', 80),
+                    helpers.allowPortInTCP('10.2.0.3', 80),
+                    helpers.allowPortInTCP('10.2.0.5', 80)
+                ];
+                v6rules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('fd22::45', 80)
+                ];
                 vmsEnabled[vm.uuid] = true;
             });
 
@@ -364,11 +359,12 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             tagOneVMs.forEach(function (vm) {
-                v4rules[vm.uuid]['in'].pass.tcp['10.2.0.8'] = [80];
+                v4rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('10.2.0.8', 80));
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -399,11 +395,12 @@ exports['add / update: tag to tag'] = function (t) {
             t.deepEqual(helpers.sortRes(res), {
                 remoteVMs: [vm9.uuid],
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             tagOneVMs.forEach(function (vm) {
-                v4rules[vm.uuid]['in'].pass.tcp['10.2.0.9'] = [80];
+                v4rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('10.2.0.9', 80));
             });
 
             // XXX: compare VM files written to disk
@@ -442,7 +439,7 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             v4rules[vm8.uuid] = clone(v4rules[vm1.uuid]);
@@ -513,11 +510,12 @@ exports['add / update: tag to tag'] = function (t) {
             t.deepEqual(helpers.sortRes(res), {
                 remoteVMs: [vm10.uuid],
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             tagOneVMs.forEach(function (vm) {
-                v4rules[vm.uuid]['in'].pass.tcp['10.2.0.10'] = [80];
+                v4rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('10.2.0.10', 80));
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -601,14 +599,14 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [rule2, rule3].sort(helpers.uuidSort),
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             tagOneVMs.forEach(function (vm) {
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'udp',
-                    {
-                        '10.2.0.11': [ 1000, 1001 ]
-                    });
+                v4rules[vm.uuid].in.udp = [
+                    helpers.allowPortInUDP('10.2.0.11', 1000),
+                    helpers.allowPortInUDP('10.2.0.11', 1001)
+                ];
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -659,7 +657,7 @@ exports['add / update: tag to tag'] = function (t) {
                 vms: [],
                 // This will re-write the files for tag one VMs, but the
                 // file contents won't have actually changed
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -708,15 +706,17 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [rule2],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             tagOneVMs.forEach(function (vm) {
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'udp',
-                    {
-                        '10.2.0.11': [ 1000, 1001, 1050 ],
-                        '10.2.0.12': [ 1000, 1050 ]
-                    });
+                v4rules[vm.uuid].in.udp = [
+                    helpers.allowPortInUDP('10.2.0.11', 1000),
+                    helpers.allowPortInUDP('10.2.0.11', 1050),
+                    helpers.allowPortInUDP('10.2.0.12', 1000),
+                    helpers.allowPortInUDP('10.2.0.12', 1050),
+                    helpers.allowPortInUDP('10.2.0.11', 1001)
+                ];
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -793,13 +793,14 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [],
-                vms: tagOneVMs.map(function (vm) { return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
             v4rules[vm13.uuid] = clone(v4rules[vm1.uuid]);
             v6rules[vm13.uuid] = clone(v6rules[vm1.uuid]);
             tagOneVMs.forEach(function (vm) {
-                v4rules[vm.uuid]['in'].pass.tcp['10.2.0.13'] = [ 80 ];
+                v4rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('10.2.0.13', 80));
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -851,34 +852,31 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [rule5, rule6].sort(helpers.uuidSort),
-                vms: tagOneVMs.map(function (vm) {
-                    return vm.uuid;
-                }).concat(vm4.uuid).sort()
+                vms: tagOneVMs.map(getUUID).concat(vm4.uuid).sort()
             }, 'result returned');
 
             v4rules[vm4.uuid] = helpers.defaultZoneRules();
             v6rules[vm4.uuid] = helpers.defaultZoneRules();
-            createSubObjects(v4rules, vm4.uuid, 'in', 'pass', 'tcp');
-            createSubObjects(v6rules, vm4.uuid, 'in', 'pass', 'tcp');
 
             tagOneVMs.forEach(function (vm) {
                 // Add vm4 to all of the tag one rules
-                v4rules[vm.uuid]['in'].pass.tcp['10.2.0.4'] = [ 8080 ];
-                v6rules[vm.uuid]['in'].pass.tcp['fd22::367'] = [ 8080 ];
-                // and add the tag one ips to vm4's rules
-                util_vm.ipsFromNICs(vm.nics).forEach(function (ip) {
-                    if (net.isIPv6(ip)) {
-                        v6rules[vm4.uuid]['in'].pass.tcp[ip] = [ 8080 ];
-                    } else {
-                        v4rules[vm4.uuid]['in'].pass.tcp[ip] = [ 8080 ];
-                    }
-                });
+                v4rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('10.2.0.4', 8080));
+                v6rules[vm.uuid].in.tcp.push(
+                    helpers.allowPortInTCP('fd22::367', 8080));
             });
 
-            // Add the 2 remote tag one VMs (vm9, vm10) to vm4's rules
-            v4rules[vm4.uuid]['in'].pass.tcp[vm9.nics[0].ip] = [ 8080 ];
-            v4rules[vm4.uuid]['in'].pass.tcp[vm10.nics[0].ip] = [ 8080 ];
+            // Collect ips for vm4's rules from local and remote tag one vms.
+            helpers.forEachVMsIPs(tagOneVMs.concat([vm9, vm10]), function (ip) {
+                var rules = net.isIPv6(ip)
+                    ? v6rules[vm4.uuid]
+                    : v4rules[vm4.uuid];
+                if (!rules.in.tcp) {
+                    rules.in.tcp = [];
+                }
 
+                rules.in.tcp.push(helpers.allowPortInTCP(ip, 8080));
+            });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules updated to include vm4');
@@ -923,23 +921,22 @@ exports['add / update: tag to tag'] = function (t) {
 
             t.deepEqual(helpers.sortRes(res), {
                 rules: [rule7],
-                vms: tagOneVMs.map(function (vm) {
-                    return vm.uuid; }).sort()
+                vms: tagOneVMs.map(getUUID).sort()
             }, 'result returned');
 
-            tagOneVMs.forEach(function (vm) {
-                util_vm.ipsFromNICs(vm.nics).forEach(function (ip) {
-                    if (net.isIPv6(ip)) {
-                        v6rules[vm2.uuid].in.pass.tcp[ip] = [ 80, 125 ];
-                    } else {
-                        v4rules[vm2.uuid].in.pass.tcp[ip] = [ 80, 125 ];
-                    }
-                });
-            });
+            function insertP125(ip) {
+                var rules = net.isIPv6(ip)
+                    ? v6rules[vm2.uuid]
+                    : v4rules[vm2.uuid];
+                if (!rules.in.tcp) {
+                    rules.in.tcp = [];
+                }
+
+                // Insert just before the last 8080 rule
+                rules.in.tcp.splice(-1, 0, helpers.allowPortInTCP(ip, 125));
+            }
 
-            // Add the 2 remote tag one VMs (vm9, vm10) to vm4's rules
-            v4rules[vm2.uuid]['in'].pass.tcp[vm9.nics[0].ip] = [ 80, 125 ];
-            v4rules[vm2.uuid]['in'].pass.tcp[vm10.nics[0].ip] = [ 80, 125 ];
+            helpers.forEachVMsIPs(tagOneVMs.concat([vm9, vm10]), insertP125);
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules updated to include vm4');
@@ -958,7 +955,7 @@ exports['add / update: tag to tag'] = function (t) {
         });
     }
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -1024,14 +1021,8 @@ exports['tags with values'] = function (t) {
             v4rules = helpers.defaultZoneRules([vm2.uuid, vm4.uuid]);
             v6rules = helpers.defaultZoneRules([vm2.uuid, vm4.uuid]);
             [vm2, vm4].forEach(function (vm) {
-                createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        any: [ 80 ]
-                    });
-                createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                    {
-                        any: [ 80 ]
-                    });
+                v4rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 80) ];
+                v6rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 80) ];
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -1093,13 +1084,13 @@ exports['tags with values'] = function (t) {
 
             v4rules[vm5.uuid] = helpers.defaultZoneRules();
             v6rules[vm5.uuid] = helpers.defaultZoneRules();
-            var udpPorts = {};
-            udpPorts[vm2.nics[0].ip] = [ 514 ];
-            udpPorts[vm4.nics[0].ip] = [ 514 ];
-            udpPorts[rvm2.nics[0].ip] = [ 514 ];
 
-            createSubObjects(v4rules, vm5.uuid, 'in', 'pass', 'udp',
-                udpPorts);
+            function allowP514(ip) {
+                return helpers.allowPortInUDP(ip, 514);
+            }
+
+            v4rules[vm5.uuid].in.udp =
+                helpers.getIPsFromVMs([ vm2, vm4, rvm2 ]).map(allowP514);
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -1174,14 +1165,9 @@ exports['tags with values'] = function (t) {
 
             v4rules[vm3.uuid] = helpers.defaultZoneRules();
             v6rules[vm3.uuid] = helpers.defaultZoneRules();
-            createSubObjects(v4rules, vm3.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 80 ]
-                });
-            createSubObjects(v6rules, vm3.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 80 ]
-                });
+
+            v4rules[vm3.uuid].in.tcp = [ helpers.allowPortInTCP('any', 80) ];
+            v6rules[vm3.uuid].in.tcp = [ helpers.allowPortInTCP('any', 80) ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -1239,7 +1225,9 @@ exports['tags with values'] = function (t) {
                 rules: [ ]
             }, 'rules returned');
 
-            v4rules[vm5.uuid].in.pass.udp[rvm4.nics[0].ip] = [ 514 ];
+            v4rules[vm5.uuid].in.udp.push(
+                helpers.allowPortInUDP(rvm4.nics[0].ip, 514));
+
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -1272,8 +1260,8 @@ exports['tags with values'] = function (t) {
             }, 'results returned');
 
             [vm2, vm3, vm4].forEach(function (vm) {
-                delete v4rules[vm.uuid].in.pass;
-                delete v6rules[vm.uuid].in.pass;
+                delete v4rules[vm.uuid].in.tcp;
+                delete v6rules[vm.uuid].in.tcp;
             });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
@@ -1344,8 +1332,6 @@ exports['add a local provisioning VM with a tag'] = {
                 return t.done();
             }
 
-            var ipfRules = {};
-
             t.deepEqual(helpers.getIPFenabled(), {},
                 'firewall not active for VM');
 
@@ -1353,10 +1339,11 @@ exports['add a local provisioning VM with a tag'] = {
             // because it's still provisioning, ipfilter will not be reloaded
             // for the zone. Rather, rules will get loaded by the brand
             // during zone boot
-            helpers.addZoneRules(ipfRules, [
-                [d.vm, 'default'],
-                [d.vm, 'out', 'block', 'tcp', 'any', 25]
-            ]);
+            var ipfRules = helpers.defaultZoneRules([ d.vm.uuid ]);
+            ipfRules[d.vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('any', 25)
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), ipfRules,
                 'IPv4 zone ipf rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), ipfRules,
@@ -1406,7 +1393,7 @@ exports['tags with escaped characters or odd names/values'] = function (t) {
         }
     ];
 
-    var expRules = {};
+    var expRules;
     var expRulesOnDisk = {};
     var remoteVMsOnDisk = {};
     var vmsEnabled = {};
@@ -1450,31 +1437,20 @@ exports['tags with escaped characters or odd names/values'] = function (t) {
                 rules: rules.slice().sort(helpers.uuidSort)
             }, 'rules returned');
 
-            helpers.addZoneRules(expRules, [
-                [vms[0], 'default'],
-                [vms[1], 'default'],
-                [vms[2], 'default'],
-                [vms[3], 'default'],
-                [vms[4], 'default'],
+            expRules = helpers.defaultZoneRules(vms.map(getUUID));
 
-                [vms[0], 'in', 'pass', 'tcp', 'any', 80],
-                [vms[1], 'in', 'pass', 'tcp', 'any', 81],
-                [vms[2], 'in', 'pass', 'tcp', 'any', 82],
-                [vms[3], 'in', 'pass', 'tcp', 'any', 83],
-                [vms[4], 'in', 'pass', 'tcp', 'any', 84]
-            ]);
+            vms.forEach(function (vm, i) {
+                expRules[vm.uuid].in.tcp = [
+                    helpers.allowPortInTCP('any', 80 + i)
+                ];
+
+                vmsEnabled[vm.uuid] = true;
+            });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), expRules,
                 'IPv6 firewall rules');
-
-            vmsEnabled[vms[0].uuid] = true;
-            vmsEnabled[vms[1].uuid] = true;
-            vmsEnabled[vms[2].uuid] = true;
-            vmsEnabled[vms[3].uuid] = true;
-            vmsEnabled[vms[4].uuid] = true;
-
             t.deepEqual(helpers.getIPFenabled(), vmsEnabled,
                 'firewalls enabled');
 
@@ -1583,10 +1559,7 @@ exports['tags that target no VMs'] = function (t) {
                 rules: [ rules[0], rules[1] ].sort(helpers.uuidSort)
             }, 'rules returned');
 
-            helpers.addZoneRules(expRules, [
-                [vms[0], 'default'],
-                [vms[1], 'default']
-            ]);
+            expRules = helpers.defaultZoneRules(vms.map(getUUID));
 
             t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
                 'IPv4 firewall rules');
@@ -1635,9 +1608,11 @@ exports['tags that target no VMs'] = function (t) {
                 rules: []
             }, 'vms returned');
 
-            helpers.addZoneRules(expRules, [
-                [vms[2], 'in', 'pass', 'tcp', 'any', 80]
-            ]);
+            expRules[vms[2].uuid] = helpers.defaultZoneRules();
+            expRules[vms[2].uuid].in.tcp = [
+                helpers.allowPortInTCP('any', 80)
+            ];
+
             t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
                 'IPv4 firewall rules');
             t.deepEqual(helpers.zoneIPFconfigs(6), expRules,
@@ -1672,7 +1647,7 @@ exports['FWAPI-273: Tag without a value following one with'] = function (t) {
         enabled: true
     };
 
-    var expRules = {};
+    var expRules;
     var expRulesOnDisk = {};
     var vmsEnabled = {};
 
@@ -1689,10 +1664,10 @@ exports['FWAPI-273: Tag without a value following one with'] = function (t) {
             rules: [ rule ]
         }, 'result');
 
-        helpers.addZoneRules(expRules, [
-            [ vm, 'default' ],
-            [ vm, 'in', 'pass', 'tcp', 'any', 25 ]
-        ]);
+        expRules = helpers.defaultZoneRules([ vm.uuid ]);
+        expRules[vm.uuid].in.tcp = [
+            helpers.allowPortInTCP('any', 25)
+        ];
 
         t.deepEqual(helpers.zoneIPFconfigs(4), expRules,
             'IPv4 firewall rules');
diff --git a/src/fw/test/unit/update.test.js b/src/fw/test/unit/update.test.js
index 1e8a62d5..ba0f6ba5 100644
--- a/src/fw/test/unit/update.test.js
+++ b/src/fw/test/unit/update.test.js
@@ -35,7 +35,6 @@ var mod_uuid = require('node-uuid');
 var util = require('util');
 var util_vm = require('../../lib/util/vm');
 
-var createSubObjects = mod_obj.createSubObjects;
 var mergeObjects = mod_obj.mergeObjects;
 
 
@@ -123,10 +122,9 @@ exports['update non-existent rule'] = function (t) {
             }, 'rules returned');
 
             allRules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(allRules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    any: [ 8080 ]
-                });
+            allRules[vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('any', 8080)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), allRules,
                 'IPv4 firewall rules correct');
@@ -145,7 +143,7 @@ exports['update non-existent rule'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -237,7 +235,7 @@ exports['description and created_by'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/test/unit/wildcards.test.js b/src/fw/test/unit/wildcards.test.js
index cf38efcb..ce0bf6f1 100644
--- a/src/fw/test/unit/wildcards.test.js
+++ b/src/fw/test/unit/wildcards.test.js
@@ -117,14 +117,13 @@ exports['any <-> vm: add / update'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    any: [ 8080 ]
-                });
-            createSubObjects(v6rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    any: [ 8080 ]
-                });
+
+            v4rules[vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('any', 8080)
+            ];
+            v6rules[vm.uuid].out.tcp = [
+                helpers.blockPortOutTCP('any', 8080)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -176,14 +175,8 @@ exports['any <-> vm: add / update'] = function (t) {
                 rules: [ expRules[1] ]
             }, 'rules returned');
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
+            v4rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
+            v6rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -237,14 +230,12 @@ exports['any <-> vm: add / update'] = function (t) {
 
             v4rules[vm2.uuid] = helpers.defaultZoneRules();
             v6rules[vm2.uuid] = helpers.defaultZoneRules();
-            createSubObjects(v4rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
-            createSubObjects(v6rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
+            v4rules[vm2.uuid].in.tcp = [
+                helpers.allowPortInTCP('any', 8081)
+            ];
+            v6rules[vm2.uuid].in.tcp = [
+                helpers.allowPortInTCP('any', 8081)
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -308,8 +299,8 @@ exports['any <-> vm: add / update'] = function (t) {
                 rules: [ expRules[0] ]
             }, 'results returned');
 
-            delete v4rules[vm.uuid].out.block;
-            delete v6rules[vm.uuid].out.block;
+            delete v4rules[vm.uuid].out.tcp;
+            delete v6rules[vm.uuid].out.tcp;
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -331,7 +322,7 @@ exports['any <-> vm: add / update'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -398,43 +389,25 @@ exports['any <-> all vms: add / update'] = function (t) {
 
             v4rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
             v6rules = helpers.defaultZoneRules([vm1.uuid, vm2.uuid]);
-            createSubObjects(v4rules, vm1.uuid, 'out', 'block', 'tcp',
-                {
-                    '192.168.4.1': [ 8080, 8082 ],
-                    '192.168.4.2': [ 8082 ],
-                    '192.168.0.1': [ 8082 ]
-                });
-            createSubObjects(v4rules, vm2.uuid, 'out', 'block', 'tcp',
-                {
-                    '192.168.4.1': [ 8080, 8082 ],
-                    '192.168.4.2': [ 8082 ],
-                    '192.168.0.1': [ 8082 ]
-                });
-            createSubObjects(v4rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ],
-                    '192.168.0.1': [ 8083 ],
-                    '192.168.4.1': [ 8083 ],
-                    '192.168.4.2': [ 8083 ]
-                });
-            createSubObjects(v6rules, vm1.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
-            createSubObjects(v4rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ],
-                    '192.168.0.1': [ 8083 ],
-                    '192.168.4.1': [ 8083 ],
-                    '192.168.4.2': [ 8083 ]
-                });
-            createSubObjects(v6rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
+
+            [ vm1.uuid, vm2.uuid ].forEach(function (uuid) {
+                v4rules[uuid].out.tcp = [
+                    helpers.blockPortOutTCP('192.168.4.1', 8080),
+                    helpers.blockPortOutTCP('192.168.0.1', 8082),
+                    helpers.blockPortOutTCP('192.168.4.1', 8082),
+                    helpers.blockPortOutTCP('192.168.4.2', 8082)
+                ];
+                v4rules[uuid].in.tcp = [
+                    helpers.allowPortInTCP('any', 8081),
+                    helpers.allowPortInTCP('192.168.0.1', 8083),
+                    helpers.allowPortInTCP('192.168.4.1', 8083),
+                    helpers.allowPortInTCP('192.168.4.2', 8083)
+                ];
+                v6rules[uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
+            });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
-                'IPv4 firewall rules correct');
+                'IPv4 firewall rules correct (test)');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
                 'IPv6 firewall rules correct');
 
@@ -476,10 +449,22 @@ exports['any <-> all vms: add / update'] = function (t) {
                 rules: [ ]
             }, 'rules returned');
 
-            v4rules[vm1.uuid].out.block.tcp['192.168.0.2'] = [ 8082 ];
-            v4rules[vm2.uuid].out.block.tcp['192.168.0.2'] = [ 8082 ];
-            v4rules[vm1.uuid].in.pass.tcp['192.168.0.2'] = [ 8083 ];
-            v4rules[vm2.uuid].in.pass.tcp['192.168.0.2'] = [ 8083 ];
+            [ vm1.uuid, vm2.uuid ].forEach(function (uuid) {
+                v4rules[uuid].out.tcp = [
+                    helpers.blockPortOutTCP('192.168.4.1', 8080),
+                    helpers.blockPortOutTCP('192.168.0.1', 8082),
+                    helpers.blockPortOutTCP('192.168.0.2', 8082),
+                    helpers.blockPortOutTCP('192.168.4.1', 8082),
+                    helpers.blockPortOutTCP('192.168.4.2', 8082)
+                ];
+                v4rules[uuid].in.tcp = [
+                    helpers.allowPortInTCP('any', 8081),
+                    helpers.allowPortInTCP('192.168.0.1', 8083),
+                    helpers.allowPortInTCP('192.168.0.2', 8083),
+                    helpers.allowPortInTCP('192.168.4.1', 8083),
+                    helpers.allowPortInTCP('192.168.4.2', 8083)
+                ];
+            });
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -523,13 +508,13 @@ exports['any <-> all vms: add / update'] = function (t) {
                 rules: [ expRules[1] ]
             }, 'rules returned');
 
-            delete v4rules[vm1.uuid].in.pass.tcp.any;
-            delete v4rules[vm2.uuid].in.pass.tcp.any;
-            delete v6rules[vm1.uuid].in.pass;
-            delete v6rules[vm2.uuid].in.pass;
+            delete v6rules[vm1.uuid].in.tcp;
+            delete v6rules[vm2.uuid].in.tcp;
 
-            v4rules[vm1.uuid].in.pass.tcp['192.168.0.2'] = [ 8081, 8083 ];
-            v4rules[vm2.uuid].in.pass.tcp['192.168.0.2'] = [ 8081, 8083 ];
+            v4rules[vm1.uuid].in.tcp[0] =
+                helpers.allowPortInTCP('192.168.0.2', 8081);
+            v4rules[vm2.uuid].in.tcp[0] =
+                helpers.allowPortInTCP('192.168.0.2', 8081);
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -572,10 +557,9 @@ exports['any <-> all vms: add / update'] = function (t) {
             }, 'results returned');
 
             [vm1, vm2].forEach(function (vm) {
-                delete v4rules[vm.uuid].out.block.tcp['192.168.0.1'];
-                delete v4rules[vm.uuid].out.block.tcp['192.168.0.2'];
-                v4rules[vm.uuid].out.block.tcp['192.168.4.1'] = [ 8080 ];
-                delete v4rules[vm.uuid].out.block.tcp['192.168.4.2'];
+                v4rules[vm.uuid].out.tcp = [
+                    helpers.blockPortOutTCP('192.168.4.1', 8080)
+                ];
             });
 
             expRules = expRules.filter(function (r) {
@@ -603,7 +587,7 @@ exports['any <-> all vms: add / update'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
@@ -650,14 +634,8 @@ exports['add / update: all ports'] = function (t) {
 
             v4rules = helpers.defaultZoneRules(vm.uuid);
             v6rules = helpers.defaultZoneRules(vm.uuid);
-            createSubObjects(v4rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    any: [ 'all' ]
-                });
-            createSubObjects(v6rules, vm.uuid, 'out', 'block', 'tcp',
-                {
-                    any: [ 'all' ]
-                });
+            v4rules[vm.uuid].out.tcp = [ helpers.blockPortOutTCP('any') ];
+            v6rules[vm.uuid].out.tcp = [ helpers.blockPortOutTCP('any') ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -709,14 +687,12 @@ exports['add / update: all ports'] = function (t) {
                 rules: [ expRules[1] ]
             }, 'rules returned');
 
-            createSubObjects(v4rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 'all' ]
-                });
-            createSubObjects(v6rules, vm.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 'all' ]
-                });
+            v4rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP('any')
+            ];
+            v6rules[vm.uuid].in.tcp = [
+                helpers.allowPortInTCP('any')
+            ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -769,18 +745,13 @@ exports['add / update: all ports'] = function (t) {
                 rules: [ expRules[1] ]
             }, 'rules returned');
 
+            v4rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
+            v6rules[vm.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
+
             v4rules[vm2.uuid] = helpers.defaultZoneRules();
-            v4rules[vm.uuid].in.pass.tcp.any = [ 8081 ];
             v6rules[vm2.uuid] = helpers.defaultZoneRules();
-            v6rules[vm.uuid].in.pass.tcp.any = [ 8081 ];
-            createSubObjects(v4rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
-            createSubObjects(v6rules, vm2.uuid, 'in', 'pass', 'tcp',
-                {
-                    any: [ 8081 ]
-                });
+            v4rules[vm2.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
+            v6rules[vm2.uuid].in.tcp = [ helpers.allowPortInTCP('any', 8081) ];
 
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
@@ -844,8 +815,8 @@ exports['add / update: all ports'] = function (t) {
                 rules: [ expRules[0] ]
             }, 'results returned');
 
-            delete v4rules[vm.uuid].out.block;
-            delete v6rules[vm.uuid].out.block;
+            delete v4rules[vm.uuid].out.tcp;
+            delete v6rules[vm.uuid].out.tcp;
             t.deepEqual(helpers.zoneIPFconfigs(4), v4rules,
                 'IPv4 firewall rules correct');
             t.deepEqual(helpers.zoneIPFconfigs(6), v6rules,
@@ -867,7 +838,7 @@ exports['add / update: all ports'] = function (t) {
     }
 
     ], function () {
-            t.done();
+        t.done();
     });
 };
 
diff --git a/src/fw/tools/bin/rebuild-node-modules b/src/fw/tools/bin/rebuild-node-modules
index 4b080e16..b99638bf 100755
--- a/src/fw/tools/bin/rebuild-node-modules
+++ b/src/fw/tools/bin/rebuild-node-modules
@@ -88,6 +88,8 @@ mkdir -p ${TEST_MODULES}/nodeunit/deps/ejs
 for F in ${NODEUNIT_FILES}; do
     cp -r ${NM_ORIG}/nodeunit/$F ${TEST_MODULES}/nodeunit/
 done
+patch -p3 < tools/nodeunit.patch
+
 cp ${NM_ORIG}/nodeunit/deps/*.js ${TEST_MODULES}/nodeunit/deps
 cp -r ${NM_ORIG}/nodeunit/deps/ejs/lib ${TEST_MODULES}/nodeunit/deps/ejs/lib
 cp ${NM_ORIG}/nodeunit/deps/ejs/package.json ${TEST_MODULES}/nodeunit/deps/ejs/package.json
diff --git a/src/fw/tools/nodeunit.patch b/src/fw/tools/nodeunit.patch
new file mode 100644
index 00000000..80185103
--- /dev/null
+++ b/src/fw/tools/nodeunit.patch
@@ -0,0 +1,31 @@
+nodeunit outputs objects as they exist in memory at the time of rendering, and
+not as they exist at the time of comparison. This makes debugging failures
+rather difficult, since the output can be misleading since the fwadm unit tests
+update the same object before calling t.deepEqual() in several places.
+
+We patch nodeunit to clone its inputs after a comparison fails so that we can
+get better output.
+---
+
+diff --git a/src/fw/test/node_modules/nodeunit/lib/assert.js b/src/fw/test/node_modules/nodeunit/lib/assert.js
+index 55ef744..a5bb34f 100644
+--- a/src/fw/test/node_modules/nodeunit/lib/assert.js
++++ b/src/fw/test/node_modules/nodeunit/lib/assert.js
+@@ -48,6 +48,7 @@ var _keys = function(obj){
+ // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+
++var clone = require('clone');
+ var pSlice = Array.prototype.slice;
+
+ // 1. The assert module provides functions that throw
+@@ -62,8 +63,8 @@ var assert = exports;
+ assert.AssertionError = function AssertionError (options) {
+   this.name = "AssertionError";
+   this.message = options.message;
+-  this.actual = options.actual;
+-  this.expected = options.expected;
++  this.actual = clone(options.actual);
++  this.expected = clone(options.expected);
+   this.operator = options.operator;
+   var stackStartFunction = options.stackStartFunction || fail;
