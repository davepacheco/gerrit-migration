commit 266a604c1022952223b3558c37071c15160c379b
Author: Robert Mustacchi <rm@joyent.com>
Date:   2019-06-28T21:59:54+00:00 (3 months ago)
    
    OS-7870 Bring refhashes to user land
    Portions contributed by: Jason King <jason.king@joyent.com>

diff --git a/.gitignore b/.gitignore
index db479b360e..96c336ef0b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3940,6 +3940,10 @@ usr/src/lib/librcm/i386/lint.out
 usr/src/lib/librcm/i386/llib-lrcm.ln
 usr/src/lib/librdc/i386/lint.out
 usr/src/lib/librdc/i386/llib-lrdc.ln
+usr/src/lib/librefhash/amd64/lint.out
+usr/src/lib/librefhash/amd64/llib-lrefhash.ln
+usr/src/lib/librefhash/i386/lint.out
+usr/src/lib/librefhash/i386/llib-lrefhash.ln
 usr/src/lib/libreparse/amd64/lint.out
 usr/src/lib/libreparse/amd64/llib-lreparse.ln
 usr/src/lib/libreparse/i386/lint.out
diff --git a/manifest b/manifest
index 73246a034b..97be8cbd43 100644
--- a/manifest
+++ b/manifest
@@ -5198,6 +5198,7 @@ f usr/lib/amd64/libraidcfg.so.1 0755 root bin
 s usr/lib/amd64/libraidcfg.so=libraidcfg.so.1
 s usr/lib/amd64/librcm.so.1=../../../lib/amd64/librcm.so.1
 s usr/lib/amd64/librcm.so=../../../lib/amd64/librcm.so.1
+f usr/lib/amd64/librefhash.so.1 0755 root bin
 f usr/lib/amd64/librename.so.1 0755 root bin
 f usr/lib/amd64/libreparse.so.1 0755 root bin
 s usr/lib/amd64/libreparse.so=libreparse.so.1
@@ -6659,6 +6660,7 @@ f usr/lib/libraidcfg.so.1 0755 root bin
 s usr/lib/libraidcfg.so=libraidcfg.so.1
 s usr/lib/librcm.so.1=../../lib/librcm.so.1
 s usr/lib/librcm.so=../../lib/librcm.so.1
+f usr/lib/librefhash.so.1 0755 root bin
 f usr/lib/librename.so.1 0755 root bin
 f usr/lib/libreparse.so.1 0755 root bin
 s usr/lib/libreparse.so=libreparse.so.1
diff --git a/usr/src/uts/common/refhash/refhash.c b/usr/src/common/refhash/refhash.c
similarity index 87%
rename from usr/src/uts/common/refhash/refhash.c
rename to usr/src/common/refhash/refhash.c
index e2de00597e..1e7248af48 100644
--- a/usr/src/uts/common/refhash/refhash.c
+++ b/usr/src/common/refhash/refhash.c
@@ -10,30 +10,39 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 #include <sys/refhash.h>
-#include <sys/sysmacros.h>
 #include <sys/types.h>
-#include <sys/kmem.h>
 #include <sys/list.h>
+#include <sys/debug.h>
+
+#ifdef _KERNEL
+#include <sys/sysmacros.h>
 #include <sys/ddi.h>
+#include <sys/kmem.h>
+#define	REFHASH_ALLOC	kmem_alloc
+#define	REFHASH_ZALLOC	kmem_zalloc
+#define	REFHASH_FREE	kmem_free
+#else
+#include <stddef.h>
+#include <stdlib.h>
+#include <string.h>
+#include <umem.h>
+#define	REFHASH_ALLOC	umem_alloc
+#define	REFHASH_ZALLOC	umem_zalloc
+#define	REFHASH_FREE	umem_free
+#endif
 
 #define	RHL_F_DEAD	0x01
 
-#ifdef lint
-extern refhash_link_t *obj_to_link(refhash_t *, void *);
-extern void *link_to_obj(refhash_t *, refhash_link_t *);
-extern void *obj_to_tag(refhash_t *, void *);
-#else
 #define	obj_to_link(_h, _o)	\
 	((refhash_link_t *)(((char *)(_o)) + (_h)->rh_link_off))
 #define	link_to_obj(_h, _l)	\
 	((void *)(((char *)(_l)) - (_h)->rh_link_off))
 #define	obj_to_tag(_h, _o)	\
 	((void *)(((char *)(_o)) + (_h)->rh_tag_off))
-#endif
 
 refhash_t *
 refhash_create(uint_t bucket_count, refhash_hash_f hash,
@@ -43,12 +52,13 @@ refhash_create(uint_t bucket_count, refhash_hash_f hash,
 	refhash_t *hp;
 	uint_t i;
 
-	hp = kmem_alloc(sizeof (refhash_t), km_flags);
+	hp = REFHASH_ALLOC(sizeof (refhash_t), km_flags);
 	if (hp == NULL)
 		return (NULL);
-	hp->rh_buckets = kmem_zalloc(bucket_count * sizeof (list_t), km_flags);
+	hp->rh_buckets = REFHASH_ZALLOC(bucket_count * sizeof (list_t),
+	    km_flags);
 	if (hp->rh_buckets == NULL) {
-		kmem_free(hp, sizeof (refhash_t));
+		REFHASH_FREE(hp, sizeof (refhash_t));
 		return (NULL);
 	}
 	hp->rh_bucket_count = bucket_count;
@@ -75,8 +85,8 @@ refhash_destroy(refhash_t *hp)
 {
 	ASSERT(list_is_empty(&hp->rh_objs));
 
-	kmem_free(hp->rh_buckets, hp->rh_bucket_count * sizeof (list_t));
-	kmem_free(hp, sizeof (refhash_t));
+	REFHASH_FREE(hp->rh_buckets, hp->rh_bucket_count * sizeof (list_t));
+	REFHASH_FREE(hp, sizeof (refhash_t));
 }
 
 void
diff --git a/usr/src/lib/Makefile b/usr/src/lib/Makefile
index cb326e5e45..0167ee68a6 100644
--- a/usr/src/lib/Makefile
+++ b/usr/src/lib/Makefile
@@ -193,6 +193,7 @@ SUBDIRS +=				\
 	libpthread	\
 	libraidcfg	\
 	librcm		\
+	librefhash	\
 	librename	\
 	libreparse	\
 	libresolv	\
@@ -668,6 +669,7 @@ libproject:	libpool libproc libsecdb
 libprtdiag:	libkstat
 libprtdiag_psr:	libprtdiag
 libraidcfg:	libdevinfo
+librefhash:	libumem
 librestart:	libuutil libscf libpool libproject libsecdb libsysevent
 libsasl:	libgss pkcs11
 libsaveargs:	libdisasm
diff --git a/usr/src/lib/librefhash/Makefile b/usr/src/lib/librefhash/Makefile
new file mode 100644
index 0000000000..4aab7b852a
--- /dev/null
+++ b/usr/src/lib/librefhash/Makefile
@@ -0,0 +1,43 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+include ../Makefile.lib
+
+HDRDIR = common
+
+SUBDIRS = $(MACH)
+$(BUILD64)SUBDIRS += $(MACH64)
+
+all := TARGET = all
+clean := TARGET = clean
+clobber := TARGET = clobber
+install := TARGET = install
+
+.KEEP_STATE:
+
+all clean clobber install: $(SUBDIRS)
+
+install: install_h $(SUBDIRS)
+
+install_h: $(ROOTHDRS)
+
+check: $(CHECKHDRS)
+
+$(SUBDIRS): FRC
+	@cd $@; pwd; $(MAKE) $(TARGET)
+
+FRC:
+
+include ../Makefile.targ
diff --git a/usr/src/lib/librefhash/Makefile.com b/usr/src/lib/librefhash/Makefile.com
new file mode 100644
index 0000000000..03854f4f4c
--- /dev/null
+++ b/usr/src/lib/librefhash/Makefile.com
@@ -0,0 +1,43 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+LIBRARY =	librefhash.a
+VERS =		.1
+OBJECTS =	list.o \
+		refhash.o
+HASHCOMDIR =	$(SRC)/common/refhash
+LISTCOMDIR =	$(SRC)/common/list
+
+include $(SRC)/lib/Makefile.lib
+
+SRCDIR =	../common
+SRCS =		$(HASHCOMDIR)/refhash.c $(LISTCOMDIR)/list.c
+LIBS =		$(DYNLIB)
+
+LDLIBS += 	-lc -lumem
+
+.KEEP_STATE:
+
+all: $(LIBS)
+
+include ../../Makefile.targ
+
+objs/%.o pics/%.o: $(LISTCOMDIR)/%.c
+	$(COMPILE.c) -o $@ $<
+	$(POST_PROCESS_O)
+
+objs/%.o pics/%.o: $(HASHCOMDIR)/%.c
+	$(COMPILE.c) -o $@ $<
+	$(POST_PROCESS_O)
diff --git a/usr/src/lib/librefhash/amd64/Makefile b/usr/src/lib/librefhash/amd64/Makefile
new file mode 100644
index 0000000000..6e90b05faa
--- /dev/null
+++ b/usr/src/lib/librefhash/amd64/Makefile
@@ -0,0 +1,19 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+include ../Makefile.com
+include ../../Makefile.lib.64
+
+install: all $(ROOTLIBS64) $(ROOTLINKS64) $(ROOTLINT64)
diff --git a/usr/src/lib/librefhash/common/mapfile-vers b/usr/src/lib/librefhash/common/mapfile-vers
new file mode 100644
index 0000000000..093686bd28
--- /dev/null
+++ b/usr/src/lib/librefhash/common/mapfile-vers
@@ -0,0 +1,48 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+#
+# MAPFILE HEADER START
+#
+# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
+# Object versioning must comply with the rules detailed in
+#
+#	usr/src/lib/README.mapfiles
+#
+# You should not be making modifications here until you've read the most current
+# copy of that file. If you need help, contact a gatekeeper for guidance.
+#
+# MAPFILE HEADER END
+#
+
+$mapfile_version 2
+
+SYMBOL_VERSION ILLUMOSprivate {
+    global:
+	refhash_create;
+	refhash_destroy;
+	refhash_insert;
+	refhash_remove;
+	refhash_lookup;
+	refhash_linear_search;
+	refhash_hold;
+	refhash_rele;
+	refhash_first;
+	refhash_next;
+	refhash_obj_valid;
+    local:
+        *;
+};
+
diff --git a/usr/src/lib/librefhash/i386/Makefile b/usr/src/lib/librefhash/i386/Makefile
new file mode 100644
index 0000000000..8d1d96297f
--- /dev/null
+++ b/usr/src/lib/librefhash/i386/Makefile
@@ -0,0 +1,18 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+include ../Makefile.com
+
+install: all $(ROOTLIBS) $(ROOTLINKS) $(ROOTLINT)
diff --git a/usr/src/lib/librefhash/sparc/Makefile b/usr/src/lib/librefhash/sparc/Makefile
new file mode 100644
index 0000000000..8d1d96297f
--- /dev/null
+++ b/usr/src/lib/librefhash/sparc/Makefile
@@ -0,0 +1,18 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+include ../Makefile.com
+
+install: all $(ROOTLIBS) $(ROOTLINKS) $(ROOTLINT)
diff --git a/usr/src/lib/librefhash/sparcv9/Makefile b/usr/src/lib/librefhash/sparcv9/Makefile
new file mode 100644
index 0000000000..6e90b05faa
--- /dev/null
+++ b/usr/src/lib/librefhash/sparcv9/Makefile
@@ -0,0 +1,19 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+include ../Makefile.com
+include ../../Makefile.lib.64
+
+install: all $(ROOTLIBS64) $(ROOTLINKS64) $(ROOTLINT64)
diff --git a/usr/src/uts/common/Makefile.rules b/usr/src/uts/common/Makefile.rules
index 593c21d976..8c9c4bb2dd 100644
--- a/usr/src/uts/common/Makefile.rules
+++ b/usr/src/uts/common/Makefile.rules
@@ -1566,6 +1566,10 @@ $(OBJS_DIR)/%.o:		$(COMMONBASE)/nvpair/%.c
 	$(COMPILE.c) -o $@ $<
 	$(CTFCONVERT_O)
 
+$(OBJS_DIR)/%.o:		$(COMMONBASE)/refhash/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
 $(OBJS_DIR)/%.o:		$(UTSBASE)/common/os/%.c
 	$(COMPILE.c) -o $@ $<
 	$(CTFCONVERT_O)
@@ -1586,10 +1590,6 @@ $(OBJS_DIR)/%.o:		$(UTSBASE)/common/pcmcia/pcs/%.c
 	$(COMPILE.c) -o $@ $<
 	$(CTFCONVERT_O)
 
-$(OBJS_DIR)/%.o:		$(UTSBASE)/common/refhash/%.c
-	$(COMPILE.c) -o $@ $<
-	$(CTFCONVERT_O)
-
 $(OBJS_DIR)/%.o:		$(UTSBASE)/common/rpc/%.c
 	$(COMPILE.c) -o $@ $<
 	$(CTFCONVERT_O)
@@ -2731,6 +2731,9 @@ $(LINTS_DIR)/%.ln:		$(COMMONBASE)/net/dhcp/%.c
 $(LINTS_DIR)/%.ln:		$(COMMONBASE)/nvpair/%.c
 	@($(LHEAD) $(LINT.c) $< $(LTAIL))
 
+$(LINTS_DIR)/%.ln:		$(COMMONBASE)/refhash/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
 $(LINTS_DIR)/%.ln:		$(UTSBASE)/common/os/%.c
 	@($(LHEAD) $(LINT.c) $< $(LTAIL))
 
@@ -2749,9 +2752,6 @@ $(LINTS_DIR)/%.ln:		$(UTSBASE)/common/pcmcia/nexus/%.c
 $(LINTS_DIR)/%.ln:		$(UTSBASE)/common/pcmcia/pcs/%.c
 	@($(LHEAD) $(LINT.c) $< $(LTAIL))
 
-$(LINTS_DIR)/%.ln:		$(UTSBASE)/common/refhash/%.c
-	@($(LHEAD) $(LINT.c) $< $(LTAIL))
-
 $(LINTS_DIR)/%.ln:		$(UTSBASE)/common/rpc/%.c
 	@($(LHEAD) $(LINT.c) $< $(LTAIL))
 
diff --git a/usr/src/uts/common/sys/Makefile b/usr/src/uts/common/sys/Makefile
index aa4eab00a2..777550561e 100644
--- a/usr/src/uts/common/sys/Makefile
+++ b/usr/src/uts/common/sys/Makefile
@@ -494,6 +494,7 @@ CHKHDRS=			\
 	rctl_impl.h		\
 	rds.h			\
 	reboot.h		\
+	refhash.h		\
 	refstr.h		\
 	refstr_impl.h		\
 	resource.h		\
diff --git a/usr/src/uts/common/sys/refhash.h b/usr/src/uts/common/sys/refhash.h
index b7427a454d..b419704e0b 100644
--- a/usr/src/uts/common/sys/refhash.h
+++ b/usr/src/uts/common/sys/refhash.h
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 #ifndef	_SYS_REFHASH_H
@@ -19,6 +19,72 @@
 #include <sys/types.h>
 #include <sys/list.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * A refhash is a hash table with refcounted entries.  The typical use looks
+ * similar to:
+ *
+ *	struct myentry {
+ *		...
+ *		refhash_link_t	mylink;
+ *		...
+ *		mytag_t		mytag;
+ *		...
+ *	};
+ *
+ *	uint64_t
+ *	myhash_fn(const void *tp)
+ *	{
+ *		mytag_t *tagp = tp;
+ *
+ *		return (my_hash(*tagp));
+ *	}
+ *
+ *	int
+ *	mycmp_fn(const void *a, const void *b)
+ *	{
+ *		mytag_t *l, *r;
+ *		l = a;
+ *		r = b;
+ *		if (l->xxx < r->xxx)
+ *			return (-1);
+ *		if (l->xxx > r->xxx)
+ *			return (1);
+ *		return (0);
+ *	}
+ *
+ *	void
+ *	mydtor_fn(struct myentry *me)
+ *	{
+ *		...
+ *		free(me);
+ *	}
+ *
+ *	#define BUCKET_COUNT 31 -- arbitrary prime
+ *
+ *	refhash_t *myhash;
+ *
+ *	myhash = refhash_create(BUCKET_COUNT, myhash_fn, mycmp_fn,
+ *	    mydtor_fn, sizeof (struct myentry),
+ *	    offsetof(struct myentry, mylink),
+ *	    offsetof(struct myentry, mytag), km_flags);
+ *
+ *	....
+ *
+ *	mytag_t tag = xxxx;
+ *	struct myentry *ent = refhash_lookup(myhash, &tag);
+ *	refhash_hold(myhash, ent);
+ *	...
+ *	refhash_rele(myhash, ent);
+ *	...
+ *
+ * The refhash routines do not perform any locking on their own.  The caller
+ * is responsible for all locking.  In general, the caller should serialize
+ * refhash calls to a given refhash_t instance.
+ */
 #define	RHL_F_DEAD	0x01
 
 typedef struct refhash_link {
@@ -28,9 +94,33 @@ typedef struct refhash_link {
 	uint_t rhl_refcnt;
 } refhash_link_t;
 
+/*
+ * The hash function for an entry takes a pointer to the _tag_ value of an
+ * entry (as determined by the tag_off parameter to refhash_create()
+ * and returns a 64-bit value.
+ */
 typedef uint64_t (*refhash_hash_f)(const void *);
+
+/*
+ * The cmp function for an entry takes a pointer to the _tag_ value of
+ * an entry (as determined by the tag_off parameter to refhash_create()
+ * and returns -1, 0, 1 based on the comparison of the first tag value
+ * to the second value.
+ */
 typedef int (*refhash_cmp_f)(const void *, const void *);
+
+/*
+ * The dtor function is called with a pointer to the _entry_ once
+ * refhash_remove() has been called on an entry and the refcount of the
+ * entry has reached zero.
+ */
 typedef void (*refhash_dtor_f)(void *);
+
+/*
+ * The eval function is used by refhash_linear_search().  The first argument
+ * is a pointer to the refhash entry, and the second argument is a pointer
+ * passed through from the refhash_linear_search() function.
+ */
 typedef int (*refhash_eval_f)(const void *, void *);
 
 typedef struct refhash {
@@ -45,17 +135,84 @@ typedef struct refhash {
 	refhash_dtor_f rh_dtor;
 } refhash_t;
 
+/*
+ * refhash_create(bucket_count, hash, cmp, dtor, obj_size, link_off, tag_off,
+ *     km_flags);
+ *
+ * Creates a refhash and returns the constructed refhash_t or NULL on error.
+ */
 extern refhash_t *refhash_create(uint_t, refhash_hash_f, refhash_cmp_f,
     refhash_dtor_f, size_t, size_t, size_t, int);
+
+/*
+ * Destroys / frees a refhash.  The refhash must be empty (and no outstanding
+ * references to any entries from the refhash) prior to calling
+ * refhash_destroy().
+ */
 extern void refhash_destroy(refhash_t *);
+
+/* Insert an entry into a refhash, must not already exist in the refhash */
 extern void refhash_insert(refhash_t *, void *);
+
+/*
+ * Remove the given entry from the refhash.  If the refcount of the entry is
+ * 0, the dtor function is called for the entry.  If the refcount > 0, the
+ * dtor function is not called until the refcount is 0.
+ */
 extern void refhash_remove(refhash_t *, void *);
+
+/*
+ * Search the refhash for an entry with the given _tag_.  Note this is
+ * different than other data structures (e.g. libavl) where a model entry
+ * is passed in for searching.  Returns a pointer to the entry if found or
+ * NULL if not found.  A found entry is _not_ refheld on return from
+ * refhash_lookup() -- the user must explicitly do this if they wish to use
+ * refcounting on the entry.
+ */
 extern void *refhash_lookup(refhash_t *, const void *);
+
+/*
+ * refhash_linear_search(hp, eval, arg);
+ *
+ * Search the entire refhash for an entry.  For each entry,
+ * eval(obj, arg) is called.  If eval(obj, arg) returns 0, obj is returned
+ * by refhash_linear_search (i.e. first match).  If no matches are made,
+ * NULL is returned.
+ */
 extern void *refhash_linear_search(refhash_t *, refhash_eval_f, void *);
+
+/* Increate refcount on obj */
 extern void refhash_hold(refhash_t *, void *);
+
+/*
+ * Decrease refcount on obj, if obj was previously removed by calling
+ * refhash_remove() but had a refcount > 0, refhash_rele() will call the dtor
+ * function on the entry once the final hold has been released
+ */
 extern void refhash_rele(refhash_t *, void *);
+
+/*
+ * Return the first entry of the refhash or NULL if the hash is entry. If
+ * an entry is returned, it is returned with a hold already placed on it.
+ */
 extern void *refhash_first(refhash_t *);
+
+/*
+ * Return the next entry in the refhash after the given object or NULL if the
+ * given object is the last entry in the refhash.  refhash_next()
+ * decrements the refcount of the object passed to refhash_next() and
+ * increments the refcount of the entry returned (if it returns an entry).
+ */
 extern void *refhash_next(refhash_t *, void *);
+
+/*
+ * Returns B_TRUE if the entry has not had refhash_remove() called on it,
+ * B_FALSE if refhash_remove() has been called on the object.
+ */
 extern boolean_t refhash_obj_valid(refhash_t *hp, const void *);
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif	/* _SYS_REFHASH_H */
