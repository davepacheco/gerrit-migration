commit c5abf1fe033e3ae312fc8f55293576232af48ff6 (refs/changes/88/3588/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-03-12T19:39:58+01:00 (1 year, 7 months ago)
    
    TRITON-227 sdcadm up ufds should work when VM is not running into headnode
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index ae765f7..6042364 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -64,8 +64,6 @@ var UpdateStatelessServices =
     require('./update-stateless-services-v1').UpdateStatelessServices;
 var UpdateSingleHeadnodeImgapi =
     require('./update-single-headnode-imgapi').UpdateSingleHeadnodeImgapi;
-var UpdateUFDSServiceV1 =
-    require('./update-ufds-service-v1').UpdateUFDSServiceV1;
 var UpdateMorayV2 = require('./update-moray-v2').UpdateMorayV2;
 var UpdateSingleHNSapiV1 =
     require('./update-single-hn-sapi-v1').UpdateSingleHNSapiV1;
@@ -160,7 +158,8 @@ function coordinatePlan(opts, cb) {
                 }
             }, function (err) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 if (imagesToRetrieve.length > 0) {
                     procs.push(new DownloadImages({
@@ -179,7 +178,7 @@ function coordinatePlan(opts, cb) {
             var simpleServices = [
                 'amon', 'amonredis', 'assets', 'ca',
                 'cnapi', 'cns', 'dhcpd', 'docker', 'fwapi', 'manta',
-                'napi', 'rabbitmq', 'redis', 'sdc', 'vmapi', 'volapi'
+                'napi', 'rabbitmq', 'redis', 'sdc', 'ufds', 'vmapi', 'volapi'
             ].concat(HA_READY_SIMPLE_SVCS);
             var handle = [];
             var remaining = [];
@@ -187,8 +186,7 @@ function coordinatePlan(opts, cb) {
             changes.forEach(function (change) {
                 var svcInsts = instsFromSvcName[change.service.name] || [];
                 if (change.type === 'update-instance' &&
-                    ~simpleServices.indexOf(change.service.name))
-                {
+                    ~simpleServices.indexOf(change.service.name)) {
                     if (opts.servers && opts.servers.length &&
                         opts.servers.indexOf(change.instance.server) === -1) {
                         errs.push(new UpdateError(format(
@@ -201,8 +199,7 @@ function coordinatePlan(opts, cb) {
                     }
                 } else if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
-                    ~simpleServices.indexOf(change.service.name))
-                {
+                    ~simpleServices.indexOf(change.service.name)) {
                     if (svcInsts.length === 0) {
                         log.debug({
                                 numInsts: 0,
@@ -266,14 +263,12 @@ function coordinatePlan(opts, cb) {
             changes.forEach(function (change) {
                 var svcInsts = instsFromSvcName[change.service.name] || [];
                 if (change.type === 'update-instance' &&
-                    change.service.name === 'imgapi')
-                {
+                    change.service.name === 'imgapi') {
                     change.inst = change.instance;
                     handle.push(change);
                 } else if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
-                    change.service.name === 'imgapi')
-                {
+                    change.service.name === 'imgapi') {
                     if (svcInsts.length !== 1) {
                         if (opts.justAvailable) {
                             change.insts = svcInsts;
@@ -316,63 +311,6 @@ function coordinatePlan(opts, cb) {
             next();
         },
 
-        function updateSingleHeadnodeUFDS(_, next) {
-            var handle = [];
-            var remaining = [];
-            var currHostname = os.hostname();
-            changes.forEach(function (change) {
-                var svcInsts = instsFromSvcName[change.service.name] || [];
-                if (change.type === 'update-instance' &&
-                    change.service.name === 'ufds')
-                {
-                    change.inst = change.instance;
-                    handle.push(change);
-                } else if ((change.type === 'update-service' ||
-                    change.type === 'rollback-service') &&
-                    change.service.name === 'ufds')
-                {
-                    if (svcInsts.length !== 1) {
-                        if (opts.justAvailable) {
-                            change.insts = svcInsts;
-                            handle.push(change);
-                        } else {
-                            log.debug({
-                                    numInsts: svcInsts.length,
-                                    svc: change.service.name
-                                }, 'UpdateUFDSServiceV1 skip change: ' +
-                                'not 1 inst');
-                        }
-                    } else if (svcInsts[0].hostname !== currHostname) {
-                        if (opts.justAvailable) {
-                            change.insts = svcInsts;
-                            handle.push(change);
-                        } else {
-                            log.debug({
-                                    svc: change.service.name,
-                                    cn: svcInsts[0].server
-                                }, 'UpdateUFDSServiceV1 skip change: ' +
-                                'inst not on headnode');
-                        }
-                    } else {
-                        change.inst = svcInsts[0];
-                        handle.push(change);
-                    }
-                } else {
-                    remaining.push(change);
-                }
-            });
-            if (handle.length) {
-                changes = remaining;
-                log.debug({changes: handle},
-                    'UpdateUFDSServiceV1 will handle %d change(s)',
-                    handle.length);
-                procs.push(new UpdateUFDSServiceV1({
-                    changes: handle
-                }));
-            }
-            next();
-        },
-
         // Moving to full HA update. It shouldn't matter where each VM is
         // running:
         function updateMorays(_, next) {
@@ -422,14 +360,12 @@ function coordinatePlan(opts, cb) {
             changes.forEach(function (change) {
                 var svcInsts = instsFromSvcName[change.service.name] || [];
                 if (change.type === 'update-instance' &&
-                    change.service.name === 'sapi')
-                {
+                    change.service.name === 'sapi') {
                     change.inst = change.instance;
                     handle.push(change);
                 } else if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
-                    change.service.name === 'sapi')
-                {
+                    change.service.name === 'sapi') {
                     if (svcInsts.length !== 1) {
                         // If we have a sapi0tmp instance we have not been able
                         // to remove on a previous upgrade attempt, let's tell
@@ -525,8 +461,7 @@ function coordinatePlan(opts, cb) {
 
                 if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
-                    change.service.name === 'manatee')
-                {
+                    change.service.name === 'manatee') {
                     // Note this is completely different than "single" and
                     // in "HN" functions above. For manatee, we'll try to
                     // update all of them, despite of the server they're
@@ -573,8 +508,7 @@ function coordinatePlan(opts, cb) {
                     }
                 } else if ((change.type === 'update-service' ||
                     change.type === 'rollback-service') &&
-                    change.service.name === 'binder')
-                {
+                    change.service.name === 'binder') {
                     var svcInsts = instsFromSvcName[change.service.name] || [];
                     if (svcInsts.length && svcInsts.length > 1) {
                         var chInsts = forceSameImage ? svcInsts :
diff --git a/lib/procedures/update-ufds-service-v1.js b/lib/procedures/update-ufds-service-v1.js
deleted file mode 100644
index f913522..0000000
--- a/lib/procedures/update-ufds-service-v1.js
+++ /dev/null
@@ -1,267 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-var assert = require('assert-plus');
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var format = util.format;
-var fs = require('fs');
-var vasync = require('vasync');
-
-var common = require('../common');
-var errors = require('../errors');
-
-var Procedure = require('./procedure').Procedure;
-var s = require('./shared');
-/**
- * First pass procedure for updating UFDS service
- * services.
- *
- * Limitations:
- * - the service must only have one instance
- * - the instance must be on the headnode (where `sdcadm` is running)
- */
-function UpdateUFDSServiceV1(options) {
-    assert.arrayOfObject(options.changes, 'options.changes');
-    this.changes = options.changes;
-}
-util.inherits(UpdateUFDSServiceV1, Procedure);
-
-UpdateUFDSServiceV1.prototype.summarize = function uufdsv1Summarize() {
-    if (this.changes[0].type === 'update-instance') {
-        return this.changes.map(function (ch) {
-            return sprintf('update instance "%s" (%s)\n' +
-                    'of service "%s" to image %s\n', ch.inst.instance,
-                    ch.inst.alias, ch.service.name, ch.image.uuid) +
-                common.indent(sprintf('(%s@%s)',
-                    ch.image.name, ch.image.version));
-        }).join('\n');
-    } else {
-        var word = (this.changes[0].type === 'rollback-service') ?
-            'rollback' : 'update';
-        return this.changes.map(function (ch) {
-            return sprintf('%s "%s" service to image %s\n', word,
-                    ch.service.name, ch.image.uuid) +
-                common.indent(sprintf('(%s@%s)',
-                    ch.image.name, ch.image.version));
-        }).join('\n');
-    }
-};
-
-
-UpdateUFDSServiceV1.prototype.execute = function ufdsv1Execute(opts, cb) {
-    assert.object(opts, 'opts');
-    assert.object(opts.sdcadm, 'opts.sdcadm');
-    assert.object(opts.plan, 'opts.plan');
-    assert.object(opts.log, 'opts.log');
-    assert.func(opts.progress, 'opts.progress');
-    assert.string(opts.wrkDir, 'opts.wrkDir');
-    assert.func(cb, 'cb');
-    var self = this;
-    var log = opts.log;
-    var progress = opts.progress;
-    var rollback = opts.plan.rollback || false;
-
-    function updateUFDS(change, nextSvc) {
-        var ctx = {
-            change: change,
-            opts: opts,
-            userScript: false
-        };
-
-        var t = new Date().toISOString().replace(/[\-:\.Z]/g, '');
-
-        if (opts.plan.changes.length > 1) {
-            progress('');
-            progress('--- Updating %s ...', change.service.name);
-        }
-
-        var funcs = [
-            function getManateeVms(arg, next) {
-                opts.sdcadm.vmapi.listVms({
-                    'tag.smartdc_role': 'manatee',
-                    state: 'running'
-                }, function listVmsCb(vmsErr, vms) {
-                    if (vmsErr) {
-                        next(vmsErr);
-                        return;
-                    }
-                    if (!Array.isArray(vms) || !vms.length || !vms[0]) {
-                        next(new errors.SDCClientError(new Error(
-                            'No manatee "vms" found'), 'vmapi'));
-                        return;
-                    }
-
-                    var errs = [];
-                    vms.forEach(function validateVmFormat(vm) {
-                        if (!vm.uuid || !common.UUID_RE.test(vm.uuid) ||
-                            !vm.server_uuid ||
-                            !common.UUID_RE.test(vm.server_uuid)) {
-                                errs.push(new errors.ValidationError({
-                                        message: util.format(
-                                            'Invalid manatee VM format: %j',
-                                            JSON.stringify(vm))
-                                }));
-                            }
-                    });
-                    if (errs.length) {
-                        if (errs.length === 1) {
-                            next(errs[0]);
-                        } else {
-                            next(new errors.MultiError(errs));
-                        }
-                        return;
-                    }
-                    arg.manateeVms = vms;
-                    next();
-                });
-            },
-
-            /**
-             * We want to backup UFDS data before we proceed with the upgrade.
-             * Either the primary or the sync manatees are good to take the data
-             * backup there.
-             */
-            function findPrimaryManatee(arg, next) {
-                progress('Running manatee-adm to find primary manatee');
-
-                common.manateeAdmRemote({
-                    server: arg.manateeVms[0].server_uuid,
-                    vm: arg.manateeVms[0].uuid,
-                    cmd: 'status',
-                    log: log
-                }, function (err, stdout, _) {
-                    if (err) {
-                        next(err);
-                        return;
-                    }
-                    var manateeCfg;
-                    try {
-                        manateeCfg = JSON.parse(stdout);
-                    } catch (e) {
-                        next(e);
-                        return;
-                    }
-                    if (!manateeCfg.sdc) {
-                        next(new errors.InternalError(
-                            'Cannot find manatee sdc shard config'));
-                        return;
-                    }
-
-                    if (!manateeCfg.sdc.primary ||
-                        !manateeCfg.sdc.primary.zoneId ||
-                        !common.UUID_RE.test(manateeCfg.sdc.primary.zoneId)) {
-                        next(new errors.InternalError(
-                            'Unexpected manatee sdc shard config format'));
-                        return;
-                    }
-
-                    var primaryArr = arg.manateeVms.filter(
-                        function filterManateeVms(vm) {
-                            return (vm.uuid === manateeCfg.sdc.primary.zoneId);
-                    });
-
-                    if (primaryArr.length !== 1) {
-                        next(new errors.InternalError(
-                            'Cannot find manatee sdc shard primary'));
-                        return;
-                    }
-
-                    arg.primaryManatee = primaryArr[0];
-                    next();
-                });
-            },
-
-            function backupUFDSBuckets(arg, next) {
-                progress('Creating ufds buckets backup %s.sql', t);
-                var argv = [
-                    '/opt/smartdc/bin/sdc-oneachnode',
-                    format('-T%d', opts.ufds_backup_timeout),
-                    format('-n %s ', arg.primaryManatee.server_uuid),
-                    format('/usr/sbin/zlogin %s ', arg.primaryManatee.uuid) +
-                    '\'/opt/local/bin/pg_dump -U moray -t ufds* ' +
-                            'moray\' > /var/tmp/' + t + '.sql'
-                ];
-
-                common.execFilePlus({
-                    argv: argv,
-                    log: log
-                }, next);
-            },
-
-            function copyBackupToHeadnode(arg, next) {
-                progress('Copying backup file to HeadNode');
-                var argv = [
-                    '/opt/smartdc/bin/sdc-oneachnode',
-                    format('-n %s', arg.primaryManatee.server_uuid),
-                    format('-p/var/tmp/%s.sql', t),
-                    format('-d/var/tmp'),
-                    format('-T%d', opts.ufds_backup_timeout),
-                    '-X'
-                ];
-
-                common.execFilePlus({
-                    argv: argv,
-                    log: log
-                }, next);
-            },
-
-            function moveBackupToWorkingDir(arg, next) {
-                progress('Moving backup file to /var/sdcadm/ufds-backup');
-                var bPath = '/var/sdcadm/ufds-backup';
-                var exists = fs.existsSync(bPath);
-                if (!exists) {
-                    fs.mkdirSync(bPath);
-                }
-
-                var argv = [
-                    '/usr/bin/mv',
-                    format('/var/tmp/%s', arg.primaryManatee.server_uuid),
-                    format('%s/%s.sql', bPath, t)
-                ];
-
-                common.execFilePlus({
-                    argv: argv,
-                    log: log
-                }, next);
-            }
-        ];
-
-        if (rollback) {
-            funcs.push(s.getOldUserScript);
-        } else {
-            funcs.push(s.getUserScript);
-            funcs.push(s.writeOldUserScriptForRollback);
-        }
-
-        vasync.pipeline({funcs: funcs.concat([
-            s.updateSvcUserScript,
-            s.updateVmUserScript,
-            s.updateSapiSvc,
-            s.imgadmInstall,
-            s.reprovision,
-            s.waitForInstToBeUp
-        ]), arg: ctx}, nextSvc);
-    }
-
-    // Mirroring UpdateStatelessServicesV1, even though here we should
-    // only have one instance.
-    vasync.forEachPipeline({
-        inputs: self.changes,
-        func: updateUFDS
-    }, cb);
-};
-
-// --- exports
-
-module.exports = {
-    UpdateUFDSServiceV1: UpdateUFDSServiceV1
-};
-// vim: set softtabstop=4 shiftwidth=4:
