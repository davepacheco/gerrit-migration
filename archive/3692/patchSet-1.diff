commit e7ea2d3f7829c69a92e8f9a0760a3aba9efffe79 (refs/changes/92/3692/1)
Author: Dan McDonald <danmcd@joyent.com>
Date:   2018-03-19T11:06:30-04:00 (1 year, 7 months ago)
    
    Restore SVP_R_ROUTE_REQ, and all that goes with it.

diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp.c b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
index 2311ed96ae..efa3fb960d 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
@@ -361,7 +361,7 @@ typedef enum svp_lookup_type {
 	SVP_L_UNKNOWN	= 0x0,
 	SVP_L_VL2	= 0x1,
 	SVP_L_VL3	= 0x2,
-	SVP_L_RVL3	= 0x3
+	SVP_L_ROUTE	= 0x3
 } svp_lookup_type_t;
 
 typedef struct svp_lookup {
@@ -375,11 +375,11 @@ typedef struct svp_lookup {
 			varpd_arp_handle_t	*svl_vah;
 			uint8_t			*svl_out;
 		} svl_vl3;
-		struct svl_lookup_rvl3 {
+		struct svl_lookup_route {
 			varpd_query_handle_t	*svl_handle;
 			overlay_target_point_t	*svl_point;
 			overlay_target_route_t	*svl_route;
-		} svl_rvl3;
+		} svl_route;
 	} svl_u;
 	svp_query_t				svl_query;
 } svp_lookup_t;
@@ -500,25 +500,35 @@ svp_shootdown_cb(svp_t *svp, const uint8_t *vl2mac, const struct in6_addr *uip,
 }
 
 static void
-svp_rvl3_lookup_cb(svp_t *svp, svp_status_t status, /* XXX KEBE SAYS MORE */
-    void *arg)
+svp_route_lookup_cb(svp_t *svp, svp_status_t status, uint32_t dcid,
+    uint32_t vnetid, uint16_t vlan, uint8_t *srcmac, uint8_t *dstmac,
+    uint16_t ul3_port, uint32_t *ul3_addr, void *arg)
 {
 	svp_lookup_t *svl = arg;
 	overlay_target_point_t *otp;
 	overlay_target_route_t *otr;
 
 	if (status != SVP_S_OK) {
-		libvarpd_plugin_query_reply(svl->svl_u.svl_rvl3.svl_handle,
+		libvarpd_plugin_query_reply(svl->svl_u.svl_route.svl_handle,
 		    VARPD_LOOKUP_DROP);
 		umem_cache_free(svp_lookup_cache, svl);
 		return;
 	}
 
-	otp = svl->svl_u.svl_rvl3.svl_point;
-	otr = svl->svl_u.svl_rvl3.svl_route;
-	/* XXX KEBE SAYS FILL ME IN! */
+	otp = svl->svl_u.svl_route.svl_point;
+	bcopy(dstmac, otp->otp_mac, ETHERADDRL);
+	bcopy(ul3_addr, &otp->otp_ip, sizeof (struct in6_addr));
+	otp->otp_port = ul3_port;
 
-	libvarpd_plugin_query_reply(svl->svl_u.svl_rvl3.svl_handle,
+	otr = svl->svl_u.svl_route.svl_route;
+	otr->otr_vnet = vnetid;
+	otr->otr_vlan = vlan;
+	bcopy(srcmac, otr->otr_srcmac, ETHERADDRL);
+	otr->otr_dcid = dcid;
+	otr->otr_src_prefixlen = 128;	/* XXX KEBE SAYS FIX ME */
+	otr->otr_dst_prefixlen = 128;	/* XXX KEBE SAYS FIX ME */
+
+	libvarpd_plugin_query_reply(svl->svl_u.svl_route.svl_handle,
 	    VARPD_LOOKUP_OK);
 	umem_cache_free(svp_lookup_cache, svl);
 }
@@ -529,7 +539,7 @@ static svp_cb_t svp_defops = {
 	svp_vl2_invalidate_cb,
 	svp_vl3_inject_cb,
 	svp_shootdown_cb,
-	svp_rvl3_lookup_cb,
+	svp_route_lookup_cb,
 };
 
 static boolean_t
@@ -637,8 +647,7 @@ varpd_svp_lookup_l3(svp_t *svp, varpd_query_handle_t *vqh,
 	 * going to query (i.e. no caching up here of actual destinations).
 	 *
 	 * Our existing remote sever (svp_remote), but with the new message
-	 * SVP_R_REMOTE_VL3_REQ.  Our naming of these functions already has
-	 * "remote" in it, but we'll use "rvl3" instead of "vl3".
+	 * SVP_R_ROUTE_REQ.
 	 */
 
 	/* XXX KEBE SAYS DO SOME otl verification too... */
@@ -662,13 +671,12 @@ varpd_svp_lookup_l3(svp_t *svp, varpd_query_handle_t *vqh,
 		return;
 	}
 
-	slp->svl_type = SVP_L_RVL3;
-	slp->svl_u.svl_rvl3.svl_handle = vqh;
-	slp->svl_u.svl_rvl3.svl_point = otp;
-	slp->svl_u.svl_rvl3.svl_route = otr;
+	slp->svl_type = SVP_L_ROUTE;
+	slp->svl_u.svl_route.svl_handle = vqh;
+	slp->svl_u.svl_route.svl_point = otp;
+	slp->svl_u.svl_route.svl_route = otr;
 
-	/* XXX KEBE SAYS FILL IN ARGS PROPERLY... */
-	svp_remote_rvl3_lookup(svp, &slp->svl_query, src, dst, type,
+	svp_remote_route_lookup(svp, &slp->svl_query, src, dst,
 	    otl->otl_vnetid, (uint16_t)otl->otl_vlan, slp);
 }
 
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp.h b/usr/src/lib/varpd/svp/common/libvarpd_svp.h
index d1b0841d2f..a0994c994d 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp.h
@@ -74,8 +74,8 @@ typedef union svp_query_data {
 	svp_vl3_ack_t	sdq_vl3a;
 	svp_log_req_t	sdq_logr;
 	svp_lrm_ack_t	sdq_lrma;
-	svp_rvl3_req_t	sqd_rvl3r;
-	svp_rvl3_ack_t	sqd_rvl3a;
+	svp_route_req_t	sqd_rr;
+	svp_route_ack_t	sqd_ra;
 } svp_query_data_t;
 
 typedef void (*svp_query_f)(svp_query_t *, void *);
@@ -247,8 +247,8 @@ typedef void (*svp_vl3_inject_f)(svp_t *, const uint16_t,
     const struct in6_addr *, const uint8_t *, const uint8_t *);
 typedef void (*svp_shootdown_f)(svp_t *, const uint8_t *,
     const struct in6_addr *, const uint16_t uport);
-/* XXX KEBE SAYS FILL ME IN! */
-typedef void (*svp_rvl3_lookup_f)(svp_t *, svp_status_t, void *);
+typedef void (*svp_route_lookup_f)(svp_t *, svp_status_t, uint32_t, uint32_t,
+    uint16_t, uint8_t *, uint8_t *, uint16_t, uint32_t *, void *);
 
 typedef struct svp_cb {
 	svp_vl2_lookup_f	scb_vl2_lookup;
@@ -256,7 +256,7 @@ typedef struct svp_cb {
 	svp_vl2_invalidation_f	scb_vl2_invalidate;
 	svp_vl3_inject_f	scb_vl3_inject;
 	svp_shootdown_f		scb_shootdown;
-	svp_rvl3_lookup_f	scb_rvl3_lookup;
+	svp_route_lookup_f	scb_route_lookup;
 } svp_cb_t;
 
 /*
@@ -290,8 +290,8 @@ extern void svp_remote_vl3_lookup(svp_t *, svp_query_t *,
     const struct sockaddr *, void *);
 extern void svp_remote_vl2_lookup(svp_t *, svp_query_t *, const uint8_t *,
     void *);
-extern void svp_remote_rvl3_lookup(svp_t *, svp_query_t *,
-    const struct in6_addr *, const struct in6_addr *, uint32_t, uint32_t,
+extern void svp_remote_route_lookup(svp_t *, svp_query_t *,
+    const struct in6_addr *, const struct in6_addr *, uint32_t,
     uint16_t, void *);
 
 
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
index ee715fa51b..523041c2d0 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
@@ -61,8 +61,8 @@ typedef enum svp_op {
 	SVP_R_LOG_RM		= 0x0B,
 	SVP_R_LOG_RM_ACK	= 0x0C,
 	SVP_R_SHOOTDOWN		= 0x0D,
-	SVP_R_REMOTE_VL3_REQ	= 0x0E,
-	SVP_R_REMOTE_VL3_ACK	= 0x0F
+	SVP_R_ROUTE_REQ		= 0x0E,
+	SVP_R_ROUTE_ACK		= 0x0F
 } svp_op_t;
 
 typedef enum svp_status {
@@ -123,34 +123,6 @@ typedef struct svp_vl3_ack {
 	uint8_t		sl3a_uip[16];
 } svp_vl3_ack_t;
 
-/*
- * A client issues the SVP_R_REMOTE_VL3_REQ for a far-remote (cross-DC) VL3 IP
- * address.  The server may take longer because it may query cross-DC to get
- * the answer for our response.
- */
-typedef struct svp_rvl3_req {
-	uint8_t		srl3r_srcip[16];
-	uint8_t		srl3r_dstip[16];
-	uint32_t	srl3r_type;	/* Same as SVP_R_VL3_REQ */
-	uint32_t	srl3r_vnetid;
-	uint16_t	srl3r_vlan;
-	uint16_t	srl3r_pad;	/* XXX KEBE ASKS, necessary? */
-} svp_rvl3_req_t;
-
-/*
- * The remote-VL3 response contains more than the regular VL3 one, because
- * overlay needs to rewrite the MAC header completely.
- */
-typedef struct svp_rvl3_ack {
-	uint32_t	srl3a_status;
-	uint8_t		srl3a_dstmac[ETHERADDRL]; /* MAC of the target. */
-	uint8_t		srl3a_srcmac[ETHERADDRL]; /* MAC of the target's rtr */
-	uint16_t	srl3a_vlanid;
-	uint16_t	srl3a_uport;
-	uint32_t	srl3a_dcid;	/* Remote Data Center ID. */
-	uint8_t		srl3a_uip[16];
-} svp_rvl3_ack_t;
-
 /*
  * SVP_R_BULK_REQ requests a bulk dump of data. Currently we have two kinds of
  * data tables that we need to dump: VL3->VL2 mappings and VL2->UL3 mappings.
@@ -261,6 +233,35 @@ typedef struct svp_shootdown {
 	uint32_t	svsd_vnetid;
 } svp_shootdown_t;
 
+/*
+ * A route-request (SVP_R_ROUTE_REQ) queries the local SVP server to get a
+ * far-remote (i.e. another Triton Data Center, nee. SDC) SVP server for
+ * far-remote networks.  Modern overlay modules will request IP destinations
+ * for remote-Triton networks, but they must know how to reach the
+ * remote-Triton SVP server.
+ */
+typedef struct svp_route_req {
+	uint32_t	srr_vnetid;	/* Requester's vnet ID. */
+	uint16_t	srr_vlan;	/* Requester's VLAN ID. */
+	uint16_t	srr_pad;	/* Zero on xmit, ignore on receipt. */
+	uint8_t		srr_srcip[16];	/* VL3 Source IP. */
+	uint8_t		srr_dstip[16];	/* VL3 Destination IP. */
+} svp_route_req_t;
+
+/*
+ * The far-remote Triton Data Center will answer with the requisite information
+ * to send overlay packets to the appropriate far-remote CNs.
+ */
+typedef struct svp_route_ack {
+	uint32_t	sra_dcid;	/* Far-remote Data Center ID. */
+	uint32_t	sra_vnetid;	/* Far-remote vnet ID. */
+	uint16_t	sra_vlan;	/* Far-remote VLAN ID. */
+	uint16_t	sra_port;	/* Destination UL3 port. */
+	uint8_t		sra_ip[16];	/* Destination UL3 address. */
+	uint8_t	sra_srcmac[ETHERADDRL];	/* Far-remote VL2 source. */
+	uint8_t	sra_dstmac[ETHERADDRL];	/* Far-remote VL2 dest. */
+} svp_route_ack_t;
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
index f9325ce68a..66a9690f90 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
@@ -245,8 +245,8 @@ svp_remote_attach(svp_remote_t *srp, svp_t *svp)
 		libvarpd_panic("missing callback scb_vl2_invalidate");
 	if (svp->svp_cb.scb_vl3_inject == NULL)
 		libvarpd_panic("missing callback scb_vl3_inject");
-	if (svp->svp_cb.scb_rvl3_lookup == NULL)
-		libvarpd_panic("missing callback scb_rvl3_lookup");
+	if (svp->svp_cb.scb_route_lookup == NULL)
+		libvarpd_panic("missing callback scb_route_lookup");
 
 	check.svp_vid = svp->svp_vid;
 	if (avl_find(&srp->sr_tree, &check, &where) != NULL)
@@ -354,48 +354,51 @@ svp_remote_vl2_lookup(svp_t *svp, svp_query_t *sqp, const uint8_t *mac,
 }
 
 static void
-svp_remote_rvl3_lookup_cb(svp_query_t *sqp, void *arg)
+svp_remote_route_lookup_cb(svp_query_t *sqp, void *arg)
 {
 	svp_t *svp = sqp->sq_svp;
-	svp_rvl3_ack_t *rvl3a = (svp_rvl3_ack_t *)sqp->sq_wdata;
+	svp_route_ack_t *sra = (svp_route_ack_t *)sqp->sq_wdata;
 
 	if (sqp->sq_status == SVP_S_OK) {
-		svp->svp_cb.scb_rvl3_lookup(svp, sqp->sq_status,
-		    /* XXX KEBE SAYS MORE HERE */ arg);
+		svp->svp_cb.scb_route_lookup(svp, sqp->sq_status,
+		    sra->sra_dcid, sra->sra_vnetid, sra->sra_vlan,
+		    sra->sra_srcmac, sra->sra_dstmac, sra->sra_port,
+		    sra->sra_ip, arg);
 	} else {
+		svp->svp_cb.scb_route_lookup(svp, sqp->sq_status,
+		    0, 0, 0, NULL, NULL, 0, NULL, arg);
 	}
 }
 
 void
-svp_remote_rvl3_lookup(svp_t *svp, svp_query_t *sqp, const struct in6_addr *src,
-    const struct in6_addr *dst, uint32_t type, uint32_t vnetid, uint16_t vlan,
-    void *arg)
+svp_remote_route_lookup(svp_t *svp, svp_query_t *sqp,
+    const struct in6_addr *src, const struct in6_addr *dst, uint32_t vnetid,
+    uint16_t vlan, void *arg)
 {
 	svp_remote_t *srp;
-	svp_rvl3_req_t *rvl3r = &sqp->sq_rdun.sqd_rvl3r;
+	svp_route_req_t *srr = &sqp->sq_rdun.sqd_rr;
 
 	srp = svp->svp_remote;
-	sqp->sq_func = svp_remote_rvl3_lookup_cb;
+	sqp->sq_func = svp_remote_route_lookup_cb;
 	sqp->sq_arg = arg;
 	sqp->sq_svp = svp;
 	sqp->sq_state = SVP_QUERY_INIT;
 	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
-	sqp->sq_header.svp_op = htons(SVP_R_REMOTE_VL3_REQ);
-	sqp->sq_header.svp_size = htonl(sizeof (svp_vl2_req_t));
+	sqp->sq_header.svp_op = htons(SVP_R_ROUTE_REQ);
+	sqp->sq_header.svp_size = htonl(sizeof (svp_route_req_t));
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
 	if (sqp->sq_header.svp_id == (id_t)-1)
 		libvarpd_panic("failed to allcoate from svp_idspace: %d",
 		    errno);
 	sqp->sq_header.svp_crc32 = htonl(0);
-	sqp->sq_rdata = rvl3r;
+	sqp->sq_rdata = srr;
 
-	bcopy(src, rvl3r->srl3r_srcip, sizeof (struct in6_addr));
-	bcopy(dst, rvl3r->srl3r_dstip, sizeof (struct in6_addr));
+	bcopy(src, srr->srr_srcip, sizeof (struct in6_addr));
+	bcopy(dst, srr->srr_dstip, sizeof (struct in6_addr));
 	/* Caller should've checked both are the same type... */
-	rvl3r->srl3r_type = type;
-	rvl3r->srl3r_vnetid = vnetid;
-	rvl3r->srl3r_vlan = vlan;
-	rvl3r->srl3r_pad = 0;
+	srr->srr_vnetid = vnetid;
+	srr->srr_vlan = vlan;
+	srr->srr_pad = 0;
 
 	mutex_enter(&srp->sr_lock);
 	if (!svp_remote_conn_queue(srp, sqp)) {
