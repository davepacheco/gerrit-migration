From f0388698878810d34e50b5599ac405683e77adc7 Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Wed, 11 Oct 2017 19:25:55 +0000
Subject: [PATCH] libipsecutil: stringify functions

---
 usr/src/lib/libipsecutil/common/ipsec_util.c | 165 +++++++++----------
 usr/src/lib/libipsecutil/common/ipsec_util.h |   8 +-
 usr/src/lib/libipsecutil/common/mapfile-vers |   3 +
 3 files changed, 91 insertions(+), 85 deletions(-)

diff --git a/usr/src/lib/libipsecutil/common/ipsec_util.c b/usr/src/lib/libipsecutil/common/ipsec_util.c
index b983e75e37..99f533d5b2 100644
--- a/usr/src/lib/libipsecutil/common/ipsec_util.c
+++ b/usr/src/lib/libipsecutil/common/ipsec_util.c
@@ -23,7 +23,7 @@
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  * Copyright 2012 Milan Juri. All rights reserved.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 #include <unistd.h>
@@ -361,6 +361,68 @@ dump_sockaddr(struct sockaddr *sa, uint8_t prefixlen, boolean_t addr_only,
 	return (0);
 }
 
+const char *
+sadb_op_str(uint8_t op)
+{
+	switch (op) {
+	case SADB_RESERVED:
+		return ("RESERVED");
+	case SADB_GETSPI:
+		return ("GETSPI");
+	case SADB_UPDATE:
+		return ("UPDATE");
+	case SADB_ADD:
+		return ("ADD");
+	case SADB_DELETE:
+		return ("DELETE");
+	case SADB_GET:
+		return ("GET");
+	case SADB_ACQUIRE:
+		return ("ACQUIRE");
+	case SADB_REGISTER:
+		return ("REGISTER");
+	case SADB_EXPIRE:
+		return ("EXPIRE");
+	case SADB_FLUSH:
+		return ("FLUSH");
+	case SADB_DUMP:
+		return ("DUMP");
+	case SADB_X_PROMISC:
+		return ("X_PROMISC");
+	case SADB_X_INVERSE_ACQUIRE:
+		return ("X_INVERSE_ACQUIRE");
+	case SADB_X_UPDATEPAIR:
+		return ("X_UPDATEPAIR");
+	case SADB_X_DELPAIR:
+		return ("X_DELPAIR");
+	case SADB_X_DELPAIR_STATE:
+		return ("X_DELPAIR_STATE");
+	}
+	return (NULL);
+}
+
+const char *
+sadb_satype_str(uint8_t satype)
+{
+	switch (satype) {
+	case SADB_SATYPE_UNSPEC:
+		return ("UNSPEC");
+	case SADB_SATYPE_AH:
+		return ("AH");
+	case SADB_SATYPE_ESP:
+		return ("ESP");
+	case SADB_SATYPE_RSVP:
+		return ("RSVP");
+	case SADB_SATYPE_OSPFV2:
+		return ("OSPFV2");
+	case SADB_SATYPE_RIPV2:
+		return ("RIPV2");
+	case SADB_SATYPE_MIP:
+		return (dgettext(TEXT_DOMAIN, "Mobile IP"));
+	}
+	return (NULL);
+}
+
 /*
  * Dump a key, any salt and bitlen.
  * The key is made up of a stream of bits. If the algorithm requires a salt
@@ -1649,98 +1711,33 @@ void
 print_sadb_msg(FILE *file, struct sadb_msg *samsg, time_t wallclock,
     boolean_t vflag)
 {
+	const char *opstr = sadb_op_str(samsg->sadb_msg_type);
+	const char *satypestr = sadb_satype_str(samsg->sadb_msg_satype);
+	char unkbuf[2][32] = { 0 };
+
 	if (wallclock != 0)
 		printsatime(file, wallclock, dgettext(TEXT_DOMAIN,
 		    "%sTimestamp: %s\n"), "", NULL,
 		    vflag);
 
-	(void) fprintf(file, dgettext(TEXT_DOMAIN,
-	    "Base message (version %u) type "),
-	    samsg->sadb_msg_version);
-	switch (samsg->sadb_msg_type) {
-	case SADB_RESERVED:
-		(void) fprintf(file, dgettext(TEXT_DOMAIN,
-		    "RESERVED (warning: set to 0)"));
-		break;
-	case SADB_GETSPI:
-		(void) fprintf(file, "GETSPI");
-		break;
-	case SADB_UPDATE:
-		(void) fprintf(file, "UPDATE");
-		break;
-	case SADB_X_UPDATEPAIR:
-		(void) fprintf(file, "UPDATE PAIR");
-		break;
-	case SADB_ADD:
-		(void) fprintf(file, "ADD");
-		break;
-	case SADB_DELETE:
-		(void) fprintf(file, "DELETE");
-		break;
-	case SADB_X_DELPAIR:
-		(void) fprintf(file, "DELETE PAIR");
-		break;
-	case SADB_GET:
-		(void) fprintf(file, "GET");
-		break;
-	case SADB_ACQUIRE:
-		(void) fprintf(file, "ACQUIRE");
-		break;
-	case SADB_REGISTER:
-		(void) fprintf(file, "REGISTER");
-		break;
-	case SADB_EXPIRE:
-		(void) fprintf(file, "EXPIRE");
-		break;
-	case SADB_FLUSH:
-		(void) fprintf(file, "FLUSH");
-		break;
-	case SADB_DUMP:
-		(void) fprintf(file, "DUMP");
-		break;
-	case SADB_X_PROMISC:
-		(void) fprintf(file, "X_PROMISC");
-		break;
-	case SADB_X_INVERSE_ACQUIRE:
-		(void) fprintf(file, "X_INVERSE_ACQUIRE");
-		break;
-	default:
-		(void) fprintf(file, dgettext(TEXT_DOMAIN,
-		    "Unknown (%u)"), samsg->sadb_msg_type);
-		break;
+	if (opstr == NULL) {
+		(void) snprintf(unkbuf[0], sizeof (unkbuf[0]),
+		    "Unknown (%hhu)", samsg->sadb_msg_type);
+		opstr = unkbuf[0];
+	} else if (samsg->sadb_msg_type == SADB_RESERVED) {
+		opstr = dgettext(TEXT_DOMAIN, "RESERVED (warning: set to 0)");
 	}
-	(void) fprintf(file, dgettext(TEXT_DOMAIN, ", SA type "));
 
-	switch (samsg->sadb_msg_satype) {
-	case SADB_SATYPE_UNSPEC:
-		(void) fprintf(file, dgettext(TEXT_DOMAIN,
-		    "<unspecified/all>"));
-		break;
-	case SADB_SATYPE_AH:
-		(void) fprintf(file, "AH");
-		break;
-	case SADB_SATYPE_ESP:
-		(void) fprintf(file, "ESP");
-		break;
-	case SADB_SATYPE_RSVP:
-		(void) fprintf(file, "RSVP");
-		break;
-	case SADB_SATYPE_OSPFV2:
-		(void) fprintf(file, "OSPFv2");
-		break;
-	case SADB_SATYPE_RIPV2:
-		(void) fprintf(file, "RIPv2");
-		break;
-	case SADB_SATYPE_MIP:
-		(void) fprintf(file, dgettext(TEXT_DOMAIN, "Mobile IP"));
-		break;
-	default:
-		(void) fprintf(file, dgettext(TEXT_DOMAIN,
-		    "<unknown %u>"), samsg->sadb_msg_satype);
-		break;
+	if (satypestr == NULL) {
+		(void) snprintf(unkbuf[1], sizeof (unkbuf[1]),
+		    dgettext(TEXT_DOMAIN, "<unknown %hhu>"),
+		    samsg->sadb_msg_satype);
+		satypestr = unkbuf[1];
 	}
 
-	(void) fprintf(file, ".\n");
+	(void) fprintf(file, dgettext(TEXT_DOMAIN,
+	    "Base message (version %hhu) type %s, SA type %s\n."),
+	    samsg->sadb_msg_version, opstr, satypestr);
 
 	if (samsg->sadb_msg_errno != 0) {
 		(void) fprintf(file, dgettext(TEXT_DOMAIN,
diff --git a/usr/src/lib/libipsecutil/common/ipsec_util.h b/usr/src/lib/libipsecutil/common/ipsec_util.h
index 44154e5c33..f1a1b40600 100644
--- a/usr/src/lib/libipsecutil/common/ipsec_util.h
+++ b/usr/src/lib/libipsecutil/common/ipsec_util.h
@@ -23,7 +23,7 @@
  * Use is subject to license terms.
  */
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #ifndef	_IPSEC_UTIL_H
@@ -167,6 +167,12 @@ extern void bail(char *);
  */
 extern void bail_msg(char *, ...);
 
+/* Translate pf_key(7P) msg type (SADB_) to string, or NULL if unknown */
+extern const char *sadb_op_str(uint8_t);
+
+/* Translate pf_key(7P) SA type (SADB_SATYPE_) to string, or NULL if unknown */
+extern const char *sadb_satype_str(uint8_t);
+
 /*
  * dump_XXX functions produce ASCII output from the passed in data.
  *
diff --git a/usr/src/lib/libipsecutil/common/mapfile-vers b/usr/src/lib/libipsecutil/common/mapfile-vers
index eff1929fd3..47ec167081 100644
--- a/usr/src/lib/libipsecutil/common/mapfile-vers
+++ b/usr/src/lib/libipsecutil/common/mapfile-vers
@@ -20,6 +20,7 @@
 #
 #
 # Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
+# Copyright 2018, Joyent, Inc.
 #
 
 #
@@ -107,6 +108,8 @@ SYMBOL_VERSION SUNWprivate_1.1 {
 	rparsealg;
 	rparseidtype;
 	rparsesatype;
+	sadb_op_str;
+	sadb_satype_str;
 	save_address;
 	save_assoc;
 	save_ident;
-- 
2.17.2 (Apple Git-113)

