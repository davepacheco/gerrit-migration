From 4ab5e57bda1809885163a6b4d210e66ed9079b08 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Tue, 18 Sep 2018 01:43:35 +0000
Subject: [PATCH] MANTA-3951 garbage-collector 'gc_bytes_marked_for_delete'
 metric is misplaced

---
 lib/delete_record_transformer.js              | 15 +++-
 lib/mako_instruction_uploader.js              | 17 ++--
 lib/moray_delete_record_cleaner.js            | 87 +++++++++++++------
 test/mako_instruction_uploader.test.js        | 12 +--
 ...oray_delete_record_cleaner.control.test.js | 14 +--
 .../moray_delete_record_cleaner.error.test.js | 14 +--
 test/moray_delete_record_cleaner.test.js      | 10 ++-
 ...moray_delete_record_reader.control.test.js |  5 +-
 8 files changed, 115 insertions(+), 59 deletions(-)

diff --git a/lib/delete_record_transformer.js b/lib/delete_record_transformer.js
index eeebed6..056e3a5 100644
--- a/lib/delete_record_transformer.js
+++ b/lib/delete_record_transformer.js
@@ -218,6 +218,7 @@ _process_record(record, done)
 					key: record.key,
 					line: line_data,
 					size: value.contentLength,
+					sharks: value.sharks,
 					cleaned_state: cleaned_state
 				};
 				self._incr_cache_counts();
@@ -355,7 +356,19 @@ _listen_for_records()
 				return;
 			}
 			if (key) {
-				self.mt_moray_listener.emit('cleanup', key);
+				/*
+				 * We do not expect to read zero byte objects
+				 * from the manta_fastdelete_queue because the
+				 * Moray delete trigger doesn't insert such
+				 * records in the queue. If for some reason we
+				 * do find such records in the queue, they are
+				 * removed.
+				 */
+				self.mt_moray_listener.emit('cleanup', {
+					key: key,
+					size: 0,
+					sharks: []
+				});
 				return;
 			}
 			if (sharks.length === 0) {
diff --git a/lib/mako_instruction_uploader.js b/lib/mako_instruction_uploader.js
index a9a85ae..5466fad 100644
--- a/lib/mako_instruction_uploader.js
+++ b/lib/mako_instruction_uploader.js
@@ -142,12 +142,10 @@ _listen_for_instructions()
 
 		var keys = [];
 		var lines = [];
-		var marked_bytes = 0;
 
 		instruction.lines.forEach(function (elem) {
 			keys.push(elem.key);
 			lines.push(elem.line);
-			marked_bytes += elem.size;
 		});
 
 		self.mu_log.debug({
@@ -193,23 +191,22 @@ _listen_for_instructions()
 					lines.length, {
 					manta_storage_id: storage_id
 				});
-				self._get_collector().getCollector(
-					'gc_bytes_marked_for_delete').observe(
-					marked_bytes, {
-					manta_storage_id: storage_id
-				});
 			}
 
-			var keys_to_clean = [];
+			var clean = [];
 
 			instruction.lines.forEach(function (line) {
 				if (!line.cleaned_state.cleaned) {
+					clean.push({
+						key: line.key,
+						storage: line.size,
+						sharks: line.sharks
+					});
 					line.cleaned_state.cleaned = true;
-					keys_to_clean.push(line.key);
 				}
 			});
 
-			self.mu_listener.emit('cleanup', keys_to_clean);
+			self.mu_listener.emit('cleanup', clean);
 		});
 
 		stream.end(data);
diff --git a/lib/moray_delete_record_cleaner.js b/lib/moray_delete_record_cleaner.js
index 430c4be..b5d753b 100644
--- a/lib/moray_delete_record_cleaner.js
+++ b/lib/moray_delete_record_cleaner.js
@@ -36,8 +36,8 @@ MorayDeleteRecordCleaner(opts)
 	self.mc_batch_delete_in_progress = false;
 	self.mc_periodic_deletes_enabled = false;
 
-	self.mc_key_cache = {};
-	self.mc_key_cache_count = 0;
+	self.mc_cache = {};
+	self.mc_cache_count = 0;
 	self.mc_last_delete = Date.now();
 	self.mc_last_err = null;
 
@@ -110,7 +110,7 @@ MorayDeleteRecordCleaner.prototype._decr_cache_counts = function
 _decr_cache_counts(delta)
 {
 	var self = this;
-	self.mc_key_cache_count -= delta;
+	self.mc_cache_count -= delta;
 	self.mc_ctx.ctx_total_cache_entries -= delta;
 
 	if (self.mc_ctx.ctx_metrics_manager) {
@@ -124,7 +124,7 @@ MorayDeleteRecordCleaner.prototype._incr_cache_counts = function
 _incr_cache_counts()
 {
 	var self = this;
-	self.mc_key_cache_count++;
+	self.mc_cache_count++;
 	self.mc_ctx.ctx_total_cache_entries++;
 
 	if (self.mc_ctx.ctx_metrics_manager) {
@@ -142,6 +142,43 @@ _get_total_cache_entries()
 };
 
 
+MorayDeleteRecordCleaner.prototype._report = function
+_report(keys)
+{
+	var self = this;
+
+	if (!self.mc_ctx.ctx_metrics_manager) {
+		return;
+	}
+
+	var collector = self._get_collector();
+	var cleaned_hist = collector.getCollector(
+		'gc_delete_records_cleaned');
+	var marked_hist = collector.getCollector(
+		'gc_bytes_marked_for_delete');
+
+	cleaned_hist.observe(keys.length, {
+		bucket: self.mc_bucket,
+		shard: self.mc_shard
+	});
+
+	for (var i = 0; i < keys.length; i++) {
+		var key = keys[i];
+		var md = self.mc_cache[key];
+
+		var storage = md.storage;
+		var sharks = md.sharks;
+
+		for (var j = 0; j < sharks.length; j++) {
+			var shark = sharks[j].manta_storage_id;
+			marked_hist.observe(storage, {
+				manta_storage_id: shark
+			});
+		}
+	}
+};
+
+
 MorayDeleteRecordCleaner.prototype._batch_delete = function
 _batch_delete(done)
 {
@@ -168,7 +205,7 @@ _batch_delete(done)
 		done(err);
 	};
 
-	var keys = Object.keys(self.mc_key_cache);
+	var keys = Object.keys(self.mc_cache);
 	var client = self._get_moray_client();
 
 	if (!client) {
@@ -205,20 +242,12 @@ _batch_delete(done)
 				shard: self.mc_shard,
 				count: keys.length
 			}, 'Cleaned delete records.');
-
-			if (self.mc_ctx.ctx_metrics_manager) {
-				self._get_collector().getCollector(
-					'gc_delete_records_cleaned').observe(
-					keys.length, {
-					bucket: self.mc_bucket,
-					shard: self.mc_shard
-				});
-			}
+			self._report(keys);
 		}
 
-		keys.forEach(function (key) {
-			delete (self.mc_key_cache[key]);
-		});
+		for (var i = 0; i < keys.length; i++) {
+			delete (self.mc_cache[keys[i]]);
+		}
 		self._decr_cache_counts(keys.length);
 
 		delete_done(err);
@@ -258,7 +287,7 @@ _start_periodic_batch_deletes()
 			return;
 		}
 
-		if (self.mc_key_cache_count > 0) {
+		if (self.mc_cache_count > 0) {
 			self._batch_delete(function (err) {
 				if (err) {
 					self.mc_last_err = err;
@@ -285,10 +314,13 @@ _stop_periodic_batch_deletes()
 
 
 MorayDeleteRecordCleaner.prototype._handle_cleanup_request = function
-_handle_cleanup_request(key, done)
+_handle_cleanup_request(record, done)
 {
 	var self = this;
-	if (self.mc_key_cache.hasOwnProperty(key)) {
+
+	var key = record.key;
+
+	if (self.mc_cache.hasOwnProperty(key)) {
 		self.mc_log.debug({
 			key: key
 		}, 'Ignoring duplicate cleanup request.');
@@ -306,11 +338,11 @@ _handle_cleanup_request(key, done)
 		return;
 	}
 
-	self.mc_key_cache[key] = true;
+	self.mc_cache[key] = record;
 	self._incr_cache_counts();
 
 	if (!self.isInState('error') &&
-	    self.mc_key_cache_count >= self._get_batch_size()) {
+	    self.mc_cache_count >= self._get_batch_size()) {
 		self._batch_delete(done);
 		return;
 	}
@@ -326,11 +358,12 @@ state_init(S)
 
 	S.gotoState('running');
 
-	self.on('cleanup', function (keys) {
+	self.on('cleanup', function (clean_records) {
 		mod_vasync.forEachParallel({
-			inputs: Array.isArray(keys) ? keys : [keys],
-			func: function (key, done) {
-				self._handle_cleanup_request(key, done);
+			inputs: Array.isArray(clean_records) ? clean_records :
+				[clean_records],
+			func: function (record, done) {
+				self._handle_cleanup_request(record, done);
 			}
 		}, function (err) {
 			if (err) {
@@ -459,7 +492,7 @@ describe()
 	var descr = {
 		component: 'cleaner',
 		state: self.getState(),
-		cached: self.mc_key_cache_count
+		cached: self.mc_cache_count
 	};
 
 	return (descr);
diff --git a/test/mako_instruction_uploader.test.js b/test/mako_instruction_uploader.test.js
index b22350e..87e3a10 100644
--- a/test/mako_instruction_uploader.test.js
+++ b/test/mako_instruction_uploader.test.js
@@ -88,15 +88,15 @@ main()
 		},
 		function emit_and_check_for_cleanups(ctx, uploader, listener, next) {
 			var keys_received = {};
-			listener.on('cleanup', function (keys) {
-				mod_assertplus.arrayOfString(keys, 'keys');
-				keys.forEach(function (key) {
-					mod_assertplus.ok(TEST_EXPECTED_CLEANUP_KEYS.indexOf(key)
+			listener.on('cleanup', function (clean_records) {
+				mod_assertplus.arrayOfObject(clean_records, 'clean_records');
+				clean_records.forEach(function (record) {
+					mod_assertplus.ok(TEST_EXPECTED_CLEANUP_KEYS.indexOf(record.key)
 						!== -1, 'received cleanup request for ' +
 						'unexpected key');
-					mod_assertplus.ok(!keys_received.hasOwnProperty(key),
+					mod_assertplus.ok(!keys_received.hasOwnProperty(record),
 						'received the same key twice');
-					keys_received[key] = true;
+					keys_received[record.key] = true;
 				});
 			});
 
diff --git a/test/moray_delete_record_cleaner.control.test.js b/test/moray_delete_record_cleaner.control.test.js
index 6091379..b45f025 100644
--- a/test/moray_delete_record_cleaner.control.test.js
+++ b/test/moray_delete_record_cleaner.control.test.js
@@ -39,7 +39,11 @@ var TEST_RECORDS = (function generate_test_records() {
 })();
 
 var TEST_RECORD_KEYS = TEST_RECORDS.map(function (record) {
-	return record.join('/');
+	return ({
+		key: record.join('/'),
+		size: 0,
+		sharks: []
+	});
 });
 
 
@@ -101,9 +105,9 @@ do_moray_cleaner_pause_resume_test(test_done)
 		},
 		function check_records_still_exist(ctx, shard, cleaner, next) {
 			var client = ctx.ctx_moray_clients[shard];
-			function get_delete_record(key, cb) {
+			function get_delete_record(record, cb) {
 				lib_testcommon.get_fake_delete_record(
-					client, key, cb);
+					client, record.key, cb);
 			}
 			mod_vasync.forEachPipeline({
 				inputs: TEST_RECORD_KEYS,
@@ -133,9 +137,9 @@ do_moray_cleaner_pause_resume_test(test_done)
 		},
 		function check_records_dont_exist(ctx, shard, cleaner, next) {
 			var client = ctx.ctx_moray_clients[shard];
-			function get_delete_record(key, cb) {
+			function get_delete_record(record, cb) {
 				lib_testcommon.get_fake_delete_record(
-					client, key, cb);
+					client, record.key, cb);
 			}
 			mod_vasync.forEachPipeline({
 				inputs: TEST_RECORD_KEYS,
diff --git a/test/moray_delete_record_cleaner.error.test.js b/test/moray_delete_record_cleaner.error.test.js
index 87be767..8003720 100644
--- a/test/moray_delete_record_cleaner.error.test.js
+++ b/test/moray_delete_record_cleaner.error.test.js
@@ -39,7 +39,11 @@ var TEST_RECORDS = (function generate_test_records() {
 })();
 
 var TEST_RECORD_KEYS = TEST_RECORDS.map(function (record) {
-	return record.join('/');
+	return ({
+		key: record.join('/'),
+		size: 0,
+		sharks: []
+	});
 });
 
 function
@@ -88,9 +92,9 @@ do_moray_cleaner_error_test(test_done)
 			}, TEST_DELAY);
 		},
 		function check_records_still_exist(ctx, shard, client, cleaner, next) {
-			function get_delete_record(key, cb) {
+			function get_delete_record(record, cb) {
 				lib_testcommon.get_fake_delete_record(
-					client, key, cb);
+					client, record.key, cb);
 			}
 			mod_vasync.forEachPipeline({
 				inputs: TEST_RECORD_KEYS,
@@ -132,9 +136,9 @@ do_moray_cleaner_error_test(test_done)
 			}, TEST_DELAY);
 		},
 		function check_records_dont_exist(ctx, shard, client, cleaner, next) {
-			function get_delete_record(key, cb) {
+			function get_delete_record(record, cb) {
 				lib_testcommon.get_fake_delete_record(
-					client, key, cb);
+					client, record.key, cb);
 			}
 			mod_vasync.forEachPipeline({
 				inputs: TEST_RECORD_KEYS,
diff --git a/test/moray_delete_record_cleaner.test.js b/test/moray_delete_record_cleaner.test.js
index ce68851..a0c8756 100644
--- a/test/moray_delete_record_cleaner.test.js
+++ b/test/moray_delete_record_cleaner.test.js
@@ -39,7 +39,11 @@ var TEST_RECORDS = (function generate_test_records() {
 })();
 
 var TEST_RECORD_KEYS = TEST_RECORDS.map(function (record) {
-	return record.join('/');
+	return ({
+		key: record.join('/'),
+		size: 0,
+		sharks: []
+	});
 });
 
 /*
@@ -89,8 +93,8 @@ do_moray_cleaner_test(num_records, test_done)
 		},
 		function check_delete_records_cleaned(ctx, shard, next) {
 			var client = ctx.ctx_moray_clients[shard];
-			function check_for_delete_record(key, cb) {
-				client.getObject(MANTA_FASTDELETE_QUEUE, key, function (err, obj) {
+			function check_for_delete_record(record, cb) {
+				client.getObject(MANTA_FASTDELETE_QUEUE, record.key, function (err, obj) {
 					mod_assertplus.ok(err, 'moray cleaner did not remove ' +
 						'object');
 					cb();
diff --git a/test/moray_delete_record_reader.control.test.js b/test/moray_delete_record_reader.control.test.js
index b2d4324..f9bbb80 100644
--- a/test/moray_delete_record_reader.control.test.js
+++ b/test/moray_delete_record_reader.control.test.js
@@ -36,7 +36,7 @@ var OBJECTS = (function generate_object_spec() {
 
 	return (objects);
 })();
-var DELAY = 5000;
+var DELAY = 10000;
 var LONG_DELAY = 16000;
 
 var SHARK = '1.stor.orbit.example.com';
@@ -108,11 +108,12 @@ do_pause_resume_test(test_done)
 			}, DELAY);
 		},
 		function resume_reader(ctx, shard, reader, listener, next) {
-			setTimeout(function () {
+			var timer = setTimeout(function () {
 				mod_assertplus.ok(false, 'did not receive running ' +
 					'event after resuming reader');
 			}, DELAY);
 			reader.once('running', function () {
+				clearTimeout(timer);
 				next(null, ctx, shard, reader, listener);
 			});
 			reader.emit('assertResume');
-- 
2.21.0

