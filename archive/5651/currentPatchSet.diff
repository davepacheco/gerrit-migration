From ed8c03ff7ee727744b68bb954f95967bd444469b Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Mon, 4 Mar 2019 16:36:29 -0500
Subject: [PATCH] joyent/electric-boray#3 add support for "listobjects"
 Reviewed by: Kelly McLaughlin <kelly.mclaughlin@joyent.com> Approved by:
 Kelly McLaughlin <kelly.mclaughlin@joyent.com>

---
 lib/bucket_server.js | 109 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 108 insertions(+), 1 deletion(-)

diff --git a/lib/bucket_server.js b/lib/bucket_server.js
index 0cee6d7..7849f83 100644
--- a/lib/bucket_server.js
+++ b/lib/bucket_server.js
@@ -96,6 +96,10 @@ var PO_ARGS_SCHEMA = [
     { name: 'properties', type: 'object' }
 ];
 
+var LO_ARGS_SCHEMA = [
+    { name: 'owner', type: 'string' },
+    { name: 'bucket_id', type: 'string' },
+];
 
 function createServer(options, callback) {
     assert.object(options, 'options');
@@ -161,7 +165,8 @@ function createServer(options, callback) {
                 { rpcmethod: 'listbuckets', rpchandler: listBuckets(opts) },
                 { rpcmethod: 'getobject', rpchandler: getObject(opts) },
                 { rpcmethod: 'putobject', rpchandler: putObject(opts) },
-                { rpcmethod: 'deleteobject', rpchandler: delObject(opts) }
+                { rpcmethod: 'deleteobject', rpchandler: delObject(opts) },
+                { rpcmethod: 'listobjects', rpchandler: listObjects(opts) },
             ];
 
             methods.forEach(function (rpc) {
@@ -794,6 +799,108 @@ function delObject(options) {
     return _delObject;
 }
 
+function listObjects(options) {
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.object(options.clients, 'options.clients');
+
+    function _listObjects(rpc) {
+        var msgid = rpc.requestId();
+        var argv = rpc.argv();
+
+        if (invalidArgs(rpc, argv, LO_ARGS_SCHEMA)) {
+            return;
+        }
+
+        var owner = argv[0];
+        var bucket_id = argv[1];
+
+        var id = options.req_id || uuid.v1();
+
+        // dtrace['getobject-start'].fire(function () {
+        //     return ([msgid, id, b, k]);
+        // });
+
+        var log = options.log.child({
+            req_id: id
+        });
+
+        log.debug({
+            owner: owner,
+            bucket_id: bucket_id,
+        }, 'listObjects: entered');
+
+        var pnodes = Object.keys(options.clients.map);
+        var vnodes = {};
+
+        // convert pnodes to vnodes
+        pnodes.forEach(function (pnode) {
+            var nodes = options.dataDirector.getVnodes(pnode);
+            nodes.forEach(function (vnode) {
+                vnodes[vnode] = options.clients.map[pnode];
+            });
+        });
+
+        vasync.forEachPipeline({
+            inputs: Object.keys(vnodes),
+            func: function (vnode, cb) {
+                var client = vnodes[vnode];
+
+                vnode = parseInt(vnode, 10);
+
+                log.debug({vnode: vnode, owner: owner}, 'listObjects vasync');
+
+                var res = client.listObjects(owner, bucket_id, vnode);
+
+                /*
+                 * Format the record to look like a find/search result
+                 */
+                res.on('record', function (record) {
+                    /*
+                     * name: r.key.split('/').pop(),
+                     * etag: r.value.etag,
+                     * size: r.value.contentLength,
+                     * type: r.value.type,
+                     * contentType: r.value.contentType,
+                     * contentMD5: r.value.contentMD5,
+                     * mtime: new Date(r.value.mtime).toISOString()
+                     */
+                    var obj = {
+                        key: record.name,
+                        value: {
+                            type: 'bucketobject',
+                            etag: record.id,
+                            mtime: record.created,
+                            contentType: record.content_type,
+                            contentMD5: record.content_md5,
+                            contentLength: record.content_length
+                        }
+                    };
+                    rpc.write(obj);
+                });
+
+                res.on('end', function () {
+                    cb();
+                });
+
+                res.once('error', function (err) {
+                    cb(err);
+                });
+            }
+        }, function (err, results) {
+            if (err) {
+                log.error(err, 'listObjects error');
+                rpc.fail(err);
+                return;
+            }
+
+            rpc.end();
+        });
+    }
+
+    return _listObjects;
+}
+
 module.exports = {
     createServer: createServer
 };
-- 
2.21.0

