commit 2dc84ef54f3307dc6bc8eae147f5b6ff8fc6489e (refs/changes/07/2307/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-08-04T00:22:23+00:00 (2 years, 2 months ago)
    
    joyent/node-cueball#116 timeout on SRV should avoid triggering fallback to A/AAAA
    joyent/node-cueball#115 handle REFUSED responses as name not known

diff --git a/lib/resolver.js b/lib/resolver.js
index c19e59a..953e1ed 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -310,6 +310,7 @@ function CueBallDNSResolver(options) {
 	this.r_nextService = new Date();
 	this.r_nextV6 = new Date();
 	this.r_nextV4 = new Date();
+	this.r_lastSrvTtl = 60;
 
 	this.r_lastError = undefined;
 
@@ -468,6 +469,7 @@ CueBallDNSResolver.prototype.state_srv_try = function (S) {
 		var d = new Date();
 		d.setTime(d.getTime() + 1000*ttl);
 		self.r_nextService = d;
+		self.r_lastSrvTtl = ttl;
 
 		var oldLookup = {};
 		self.r_srvs.forEach(function (srv) {
@@ -508,19 +510,42 @@ CueBallDNSResolver.prototype.state_srv_try = function (S) {
 				port: self.r_defport
 			} ];
 
-			/*
-			 * Don't bother retrying SRV lookups for at least 60
-			 * minutes -- there probably aren't any available.
-			 */
 			var d = new Date();
-			d.setTime(d.getTime() + 1000*60*60);
+			if (err.code === 'NOTIMP') {
+				/*
+				 * Don't bother retrying SRV lookups for at
+				 * least 60 minutes -- our nameserver said it
+				 * doesn't support SRV at all and this isn't
+				 * likely to change quickly.
+				 */
+				self.r_log.trace('nameserver returned NOTIMP ' +
+				    'to SRV lookup on %s, will not retry SRV ' +
+				    'for 60 sec', self.r_service);
+				d.setTime(d.getTime() + 1000*60*60);
+			} else {
+				/*
+				 * TODO: rework the client code so this can
+				 * respect a timeout in a SOA record in
+				 * NXDOMAIN responses (binder doesn't send
+				 * these)
+				 */
+				d.setTime(d.getTime() + 1000*60);
+			}
 			self.r_nextService = d;
 
 			self.r_log.trace('no SRV records found for service ' +
-			    '%s, treating as a plain name for next 60min',
-			    self.r_service);
+			    '%s, trying as a plain name', self.r_service);
 
 			S.gotoState('aaaa');
+
+		} else if (err.code === 'REFUSED') {
+			/*
+			 * Usually sent by an authoritative nameserver to a
+			 * recursive query about a name that is not in its
+			 * area of authority. Retrying this is pointless.
+			 */
+			self.r_retry.count = 0;
+			S.gotoState('srv_error');
 		} else {
 			S.gotoState('srv_error');
 		}
@@ -543,7 +568,7 @@ CueBallDNSResolver.prototype.state_srv_error = function (S) {
 	} else {
 		self.r_log.trace({ err: self.r_lastError },
 		    'repeated error during SRV resolution for service %s, ' +
-		    'will retry in 5min', self.r_service);
+		    'will retry in %d sec', self.r_service, self.r_lastSrvTtl);
 
 		self.r_srvs = [ {
 			name: self.r_domain,
@@ -551,15 +576,24 @@ CueBallDNSResolver.prototype.state_srv_error = function (S) {
 		} ];
 
 		/*
-		 * Retry in 5 mins, but proceed on through -- just in case
-		 * our resolvers are giving us some error on SRV lookups
-		 * (e.g. because they don't implement the record type).
+		 * Retry in one TTL. Don't proceed to try A/AAAA lookups, to
+		 * avoid flapping back and forth between SRV and A/AAAA mode
+		 * on a service.
 		 */
 		var d = new Date();
-		d.setTime(d.getTime() + 1000*60*5);
+		d.setTime(d.getTime() + 1000*self.r_lastSrvTtl);
 		self.r_nextService = d;
 
-		S.gotoState('aaaa');
+		/*
+		 * Make sure the next time we wake up is for SRV still, not
+		 * A or AAAA.
+		 */
+		if (self.r_nextV6.getTime() < d.getTime())
+			self.r_nextV6 = d;
+		if (self.r_nextV4.getTime() < d.getTime())
+			self.r_nextV4 = d;
+
+		S.gotoState('sleep');
 	}
 };
 
@@ -655,8 +689,7 @@ CueBallDNSResolver.prototype.state_aaaa_try = function (S) {
 		S.gotoState('aaaa_next');
 	});
 	S.on(req, 'error', function (err) {
-		if (NoRecordsError.isInstance(err) ||
-		    err.code === 'NOTIMP') {
+		if (NoRecordsError.isInstance(err) || err.code === 'NOTIMP') {
 			/*
 			 * If we got NoRecordsError (NODATA), we probably have
 			 * a name that has no AAAA but has A records, so we
@@ -673,6 +706,14 @@ CueBallDNSResolver.prototype.state_aaaa_try = function (S) {
 			srv.expiry_v6 = d;
 			S.gotoState('aaaa_next');
 			return;
+
+		} else if (err.code === 'REFUSED') {
+			/*
+			 * Usually sent by an authoritative nameserver to a
+			 * recursive query about a name that is not in its
+			 * area of authority. Retrying this is pointless.
+			 */
+			self.r_retry.count = 0;
 		}
 		self.r_lastError = err;
 		S.gotoState('aaaa_error');
@@ -787,6 +828,13 @@ CueBallDNSResolver.prototype.state_a_try = function (S) {
 			 * any record type. This isn't a retryable error.
 			 */
 			self.r_retry.count = 0;
+		} else if (err.code === 'REFUSED') {
+			/*
+			 * Usually sent by an authoritative nameserver to a
+			 * recursive query about a name that is not in its
+			 * area of authority. Retrying this is pointless.
+			 */
+			self.r_retry.count = 0;
 		}
 		self.r_lastError = err;
 		S.gotoState('a_error');
@@ -812,6 +860,11 @@ CueBallDNSResolver.prototype.state_a_error = function (S) {
 		    'proceeding', self.r_srv.name);
 
 		var d = new Date();
+		/*
+		 * TODO: rework the client code so this can respect a timeout in
+		 * a SOA record in NXDOMAIN responses (not urgent, binder
+		 * doesn't send these)
+		 */
 		d.setTime(d.getTime() + 1000*60);
 		if (self.r_nextV4 === undefined || d <= self.r_nextV4)
 			self.r_nextV4 = d;
