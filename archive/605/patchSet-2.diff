From 62c79a5496857b7a760a41d354fd9e45f950ecb4 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 5 Oct 2016 16:54:43 -0700
Subject: [PATCH] DOCKER-943 update node-docker-registry-client downloadImg to
 handle v2 manifests

---
 examples/mainline.js       | 10 ++++++++
 examples/v2/downloadImg.js | 48 ++++++++++++++++++++++++++++++--------
 examples/v2/getManifest.js | 19 ++++-----------
 3 files changed, 53 insertions(+), 24 deletions(-)

diff --git a/examples/mainline.js b/examples/mainline.js
index f45045a..c72f466 100644
--- a/examples/mainline.js
+++ b/examples/mainline.js
@@ -44,6 +44,11 @@ var options = [
         names: ['insecure', 'k'],
         type: 'bool',
         help: 'Allow insecure SSL connections (i.e. do not enforce SSL certs)'
+    },
+    {
+        names: ['schema', 's'],
+        type: 'number',
+        help: 'Maximum schema version to request (1 or 2, defaults to 1)'
     }
 ];
 
@@ -62,6 +67,11 @@ var optionsNoAuth = [
         names: ['insecure', 'k'],
         type: 'bool',
         help: 'Allow insecure SSL connections (i.e. do not enforce SSL certs)'
+    },
+    {
+        names: ['schema', 's'],
+        type: 'number',
+        help: 'Maximum schema version to request (1 or 2, defaults to 1)'
     }
 ];
 
diff --git a/examples/v2/downloadImg.js b/examples/v2/downloadImg.js
index 332e9ae..061e9a9 100644
--- a/examples/v2/downloadImg.js
+++ b/examples/v2/downloadImg.js
@@ -29,6 +29,35 @@ var mainline = require('../mainline');
 var PROGRESS = true;
 
 
+/*
+ * Return an array of manifest layers, with each entry containing an index `i`
+ * and the layer `digest`, e.g.
+ *   {
+ *       i: 0,
+ *       digest: 'sha256:c1....e7'
+ *   }
+ */
+function getLayersFromManifest(manifest) {
+    var i = -1;
+    if (manifest.schemaVersion === 1) {
+        return manifest.fsLayers.map(function (layer) {
+            i += 1;
+            return {
+                i: i,
+                digest: layer.blobSum
+            };
+        });
+    }
+    assert.equal(manifest.schemaVersion, 2, 'manifest.schemaVersion === 2');
+    return manifest.layers.map(function (layer) {
+        i += 1;
+        return {
+            i: i,
+            digest: layer.digest
+        };
+    });
+}
+
 // Shared mainline with examples/foo.js to get CLI opts.
 var cmd = 'downloadImg';
 mainline({cmd: cmd}, function (log, parser, opts, args) {
@@ -50,7 +79,8 @@ mainline({cmd: cmd}, function (log, parser, opts, args) {
         log: log,
         insecure: opts.insecure,
         username: opts.username,
-        password: opts.password
+        password: opts.password,
+        maxSchemaVersion: (opts.schema || 1)
     });
 
     // Lazy progress bar. If we have a bar, then need to `bar.log(...)` messages
@@ -93,9 +123,7 @@ mainline({cmd: cmd}, function (log, parser, opts, args) {
         },
 
         function downloadLayers(_, next) {
-            for (var i = 0; i < manifest.fsLayers.length; i++) {
-                manifest.fsLayers[i].i = i + 1;
-            }
+            var layers = getLayersFromManifest(manifest);
 
             /*
              * Before setting up a progress bar, we'll wait for the
@@ -108,12 +136,12 @@ mainline({cmd: cmd}, function (log, parser, opts, args) {
             function cLenForBar(n) {
                 cLens.push(n);
                 if (PROGRESS && process.stderr.isTTY &&
-                    cLens.length === manifest.fsLayers.length)
+                    cLens.length === layers.length)
                 {
                     barTimeout = setTimeout(function () {
                         bar = new progbar.ProgressBar({
                             filename: format('%s %d layers',
-                                rar.localName, manifest.fsLayers.length),
+                                rar.localName, layers.length),
                             size: cLens.reduce(function (a, b) { return a+b; })
                         });
                         bar.advance(numBytes); // starter value
@@ -122,21 +150,21 @@ mainline({cmd: cmd}, function (log, parser, opts, args) {
             }
 
             vasync.forEachParallel({
-                inputs: manifest.fsLayers,
+                inputs: layers,
                 func: function downloadOneLayer(layer, nextLayer_) {
                     var nextLayer = once(nextLayer_);
-                    client.createBlobReadStream({digest: layer.blobSum},
+                    client.createBlobReadStream({digest: layer.digest},
                             function (createErr, stream, ress) {
                         if (createErr) {
                             return nextLayer(createErr);
                         }
                         cLenForBar(Number(stream.headers['content-length']));
                         var filename = format('%s-%d-%s.layer', slug, layer.i,
-                            layer.blobSum.split(':')[1].slice(0, 12));
+                            layer.digest.split(':')[1].slice(0, 12));
                         var fout = fs.createWriteStream(filename);
                         fout.on('finish', function () {
                             msg('Downloaded layer %d of %d: %s',
-                                layer.i, manifest.fsLayers.length, filename);
+                                layer.i, layers.length, filename);
                             nextLayer();
                         });
                         stream.on('error', function (err) {
diff --git a/examples/v2/getManifest.js b/examples/v2/getManifest.js
index 25186bd..784803f 100644
--- a/examples/v2/getManifest.js
+++ b/examples/v2/getManifest.js
@@ -15,14 +15,7 @@ var mainline = require('../mainline');
 
 // Shared mainline with examples/foo.js to get CLI opts.
 var cmd = 'getManifest';
-var dashOpts = [
-    {
-        names: ['schema', 's'],
-        type: 'number',
-        help: 'Schema version to request (1 or 2, defaults to 1)'
-    }
-];
-mainline({cmd: cmd, options: dashOpts}, function (log, parser, opts, args) {
+mainline({cmd: cmd}, function (log, parser, opts, args) {
     var name = args[0];
     if (!name) {
         console.error('usage: node examples/v2/%s.js REPO[:TAG|@DIGEST]\n' +
@@ -40,13 +33,11 @@ mainline({cmd: cmd, options: dashOpts}, function (log, parser, opts, args) {
         log: log,
         insecure: opts.insecure,
         username: opts.username,
-        password: opts.password
-    });
-    var getOpts = {
-        ref: rar.tag || rar.digest,
+        password: opts.password,
         maxSchemaVersion: (opts.schema || 1)
-    };
-    client.getManifest(getOpts, function (err, manifest, res) {
+    });
+    var tagOrDigest = rar.tag || rar.digest;
+    client.getManifest({ref: tagOrDigest}, function (err, manifest, res) {
         client.close();
         if (err) {
             mainline.fail(cmd, err, opts);
-- 
2.21.0

