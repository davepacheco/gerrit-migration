commit 58b65efc1c3ddcc705a8cfbe99315bef096a498f
Author: Trent Mick <trentm@gmail.com>
Date:   2019-03-13T12:59:44-07:00 (7 months ago)
    
    TRITON-1307 TRITON-1300 broke 'sdcadm post-setup docker'

diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index 4092041..47e49b9 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -27,12 +27,14 @@ function Create(opts) {
     assert.object(opts.cli, 'opts.cli');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.object(opts.ui, 'opts.ui');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.uuid, 'opts.uuid');
 
     this.log = opts.log;
     this.sdcadm = opts.sdcadm;
     this.progress = opts.progress;
+    this.ui = opts.ui;
     this.uuid = opts.uuid;
     this.cli = opts.cli;
 }
@@ -201,6 +203,7 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
             self.sdcadm.execUpdatePlan({
                 plan: plan,
                 progress: self.progress,
+                ui: self.ui,
                 uuid: self.uuid
             }, next);
         }
@@ -267,6 +270,7 @@ function do_create(subcmd, opts, args, cb) {
         log: self.log,
         uuid: self.uuid,
         progress: self.progress,
+        ui: self.ui,
         cli: self
     });
     opts.experimental = false;
diff --git a/lib/cli/do_rollback.js b/lib/cli/do_rollback.js
index b7295b5..80eca8f 100644
--- a/lib/cli/do_rollback.js
+++ b/lib/cli/do_rollback.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var p = console.log;
@@ -121,6 +121,7 @@ function do_rollback(subcmd, opts, _args, cb) {
             self.sdcadm.execUpdatePlan({
                 plan: plan,
                 progress: self.progress,
+                ui: self.ui,
                 dryRun: opts.dry_run,
                 uuid: self.uuid,
                 upDir: path.dirname(opts.file)
diff --git a/lib/cli/do_update.js b/lib/cli/do_update.js
index 3890633..fb34a04 100644
--- a/lib/cli/do_update.js
+++ b/lib/cli/do_update.js
@@ -28,12 +28,14 @@ function Update(opts) {
     assert.object(opts.cli, 'opts.cli');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.object(opts.ui, 'opts.ui');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.uuid, 'opts.uuid');
 
     this.log = opts.log;
     this.sdcadm = opts.sdcadm;
     this.progress = opts.progress;
+    this.ui = opts.ui;
     this.uuid = opts.uuid;
     this.cli = opts.cli;
 }
@@ -202,6 +204,7 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
             var execUpdatePlanOpts = {
                 plan: plan,
                 progress: self.progress,
+                ui: self.ui,
                 dryRun: opts.dry_run,
                 justImages: opts.just_images,
                 uuid: self.uuid,
@@ -284,6 +287,7 @@ function do_update(subcmd, opts, args, cb) {
         log: self.log,
         uuid: self.uuid,
         progress: self.progress,
+        ui: self.ui,
         cli: self
     });
     opts.experimental = false;
@@ -390,6 +394,7 @@ function do_experimental_update(subcmd, opts, args, cb) {
         log: self.log,
         uuid: self.top.uuid,
         progress: self.progress,
+        ui: self.ui,
         cli: self.top
     });
 
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index dfe1dbc..a21fe9b 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -22,7 +22,6 @@ const crypto = require('crypto');
 const mkdirp = require('mkdirp');
 const uuid = require('node-uuid');
 const vasync = require('vasync');
-const ProgressBar = require('progbar').ProgressBar;
 const VError = require('verror');
 
 const common = require('../common');
@@ -72,7 +71,8 @@ function UpdateAgents(opts) {
     assert.optionalBool(opts.yes, 'opts.yes');
     assert.optionalBool(opts.all, 'opts.all');
     assert.optionalArrayOfString(opts.servers, 'opts.servers');
-    assert.func(opts.progress, 'opts.progress');
+    assert.func(opts.progress, 'opts.progress'); // Deprecated. Use 'ui'.
+    assert.object(opts.ui, 'opts.ui');
 
     var self = this;
 
@@ -94,6 +94,7 @@ function UpdateAgents(opts) {
     this.justUpdateSymlink = opts.justUpdateSymlink;
     this.log = opts.sdcadm.log;
     this.progress = opts.progress;
+    this.ui = opts.ui;
     this.sdcadm = opts.sdcadm;
     this.servers = opts.servers;
     this.skipLatestSymlink = opts.skipLatestSymlink;
@@ -379,6 +380,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
 
     const self = this;
     let startTime = Date.now();
+    let ui = self.ui;
 
     this.filepath = null;
     this.channel = null;
@@ -960,7 +962,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
                         sdcadm: self.sdcadm,
                         urConnection: ctx.urconn,
                         log: self.sdcadm.log,
-                        progress: self.progress,
+                        ui: self.ui,
                         command: cmd.str,
                         concurrency: self.concurrency,
                         onCompletionFunc: _onCompletion,
@@ -1018,19 +1020,17 @@ UpdateAgents.prototype.exec = function exec(callback) {
                             server.uuid, server.hostname, msg));
                     }
 
-                    if (process.stderr.isTTY) {
-                        bar = new ProgressBar({
-                            size: ctx.urServersToUpdate.length,
-                            bytes: false,
-                            filename: cmd.progbarName
-                        });
-                        queueOpts.progbar = bar;
-                    }
+                    ui.barStart({
+                        name: cmd.progbarName,
+                        size: ctx.urServersToUpdate.length
+                    });
                     self.sdcadm.log.trace(
                         {command: cmd.str, concurrency: self.concurrency},
                         'runUrQueue');
 
                     var rq = ur.runQueue(queueOpts, function (err, results) {
+                        ui.barEnd();
+
                         if (err) {
                             nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
@@ -1262,6 +1262,7 @@ function do_update_agents(subcmd, opts, args, cb) {
                 agentsshar: agentsshar,
                 exclude: opts.exclude,
                 progress: self.progress,
+                ui: self.ui,
                 justDownload: opts.just_download,
                 skipLatestSymlink: opts.skip_latest_symlink,
                 justUpdateSymlink: opts.just_update_symlink,
diff --git a/lib/cli/index.js b/lib/cli/index.js
index cbe44e1..7a44141 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -34,7 +34,7 @@ var PlatformCLI = require('../platform').PlatformCLI;
 var ChannelCLI = require('../channel').ChannelCLI;
 var DCMaintCLI = require('../dc-maint').DCMaintCLI;
 var defFabric = require('../default-fabric');
-var UI = require('./ui');
+var UI = require('./ui').UI;
 
 
 // --- globals
diff --git a/lib/cli/ui.js b/lib/cli/ui.js
index 504a36f..5ac3433 100644
--- a/lib/cli/ui.js
+++ b/lib/cli/ui.js
@@ -169,6 +169,42 @@ UI.prototype.barAdvance = function barAdvance(n) {
 };
 
 
+// --- Mock UI
+
+// Create a mock `UI` instance. The optional `opts.write` allows, for example,
+// a test to do:
+//
+//      ui = new MockUI({write: tap.comment});
+//
+function MockUI(opts) {
+    assert.optionalFunc(opts.write, 'opts.write');
+    this._write = opts.write || console.log;
+}
+
+MockUI.prototype.progressFunc = function progressFunc() {
+    return this.info.bind(this);
+};
+
+MockUI.prototype.info = function info() {
+    var msgArgs = Array.prototype.slice.call(arguments);
+    var msg = format.apply(null, msgArgs);
+    this._write(msg);
+};
+
+MockUI.prototype.error = function error() {
+    var msgArgs = Array.prototype.slice.call(arguments);
+    var msg = format.apply(null, msgArgs);
+    this._write(msg);
+};
+
+MockUI.prototype.barStart = function mockBarStart(_opts) {};
+MockUI.prototype.barEnd = function mockBarEnd() {};
+MockUI.prototype.barAdvance = function mockBarAdvance(_n) {};
+
+
 // --- exports
 
-module.exports = UI;
+module.exports = {
+    UI: UI,
+    MockUI: MockUI
+};
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 80aecb1..abb6d61 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -16,7 +16,6 @@ var fs = require('fs');
 var vasync = require('vasync');
 var mkdirp = require('mkdirp');
 var assert = require('assert-plus');
-var ProgressBar = require('progbar').ProgressBar;
 var uuid = require('node-uuid');
 var netconfig = require('triton-netconfig');
 
@@ -41,6 +40,7 @@ function do_docker(subcmd, opts, args, cb) {
         return;
     }
 
+    var ui = self.ui;
     var start = Date.now();
     var dockerSvcData = {
         name: 'docker',
@@ -688,21 +688,16 @@ function do_docker(subcmd, opts, args, cb) {
                         sdcadm: self.sdcadm,
                         urConnection: ctx.urConnection,
                         log: ctx.log,
-                        progress: self.progress,
+                        ui: ui,
                         command: cmd.str,
                         concurrency: opts.concurrency,
                         timeout: cmd.timeout
                     };
 
-                    var bar;
-                    if (process.stderr.isTTY) {
-                        bar = new ProgressBar({
-                            size: ctx.urServersToUpdate.length,
-                            bytes: false,
-                            filename: cmd.progbarName
-                        });
-                        queueOpts.progbar = bar;
-                    }
+                    ui.barStart({
+                        name: cmd.progbarName,
+                        size: ctx.urServersToUpdate.length
+                    });
                     ctx.log.trace({
                         command: cmd.str,
                         concurrency: opts.concurrency
@@ -710,6 +705,8 @@ function do_docker(subcmd, opts, args, cb) {
 
                     var rq = ur.runQueue(queueOpts,
                             function runQueueCb(err, results) {
+                        ui.barEnd();
+
                         if (err) {
                             nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
@@ -745,11 +742,7 @@ function do_docker(subcmd, opts, args, cb) {
                                 errmsg += ' (log file on server: ' +
                                     cmd.logFile + ')';
                             }
-                            if (bar) {
-                                bar.log(errmsg);
-                            } else {
-                                console.log(errmsg);
-                            }
+                            ui.error(errmsg);
                         }
                     });
 
diff --git a/lib/post-setup/index.js b/lib/post-setup/index.js
index 3f6cd2e..562ad3c 100644
--- a/lib/post-setup/index.js
+++ b/lib/post-setup/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -49,7 +49,8 @@ util.inherits(PostSetupCLI, Cmdln);
 
 PostSetupCLI.prototype.init = function init(_opts, _args, _cb) {
     this.sdcadm = this.top.sdcadm;
-    this.progress = this.top.progress;
+    this.progress = this.top.progress; // Deprecated. Use `ui`.
+    this.ui = this.top.ui;
     this.log = this.top.log;
 
     Cmdln.prototype.init.apply(this, arguments);
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index 2e8046c..2c5538e 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -5,10 +5,9 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
-
 var assert = require('assert-plus');
 var sprintf = require('extsprintf').sprintf;
 var util = require('util');
@@ -19,7 +18,6 @@ var fs = require('fs');
 var vasync = require('vasync');
 var mkdirp = require('mkdirp');
 var uuid = require('node-uuid');
-var ProgressBar = require('progbar').ProgressBar;
 
 var errors = require('../errors');
 var UpdateError = errors.UpdateError;
@@ -90,12 +88,15 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
     assert.object(opts.sdcadm, 'opts.sdcadm');
     assert.object(opts.plan, 'opts.plan');
     assert.object(opts.log, 'opts.log');
+    assert.object(opts.ui, 'opts.ui');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.wrkDir, 'opts.wrkDir');
     assert.optionalNumber(opts.concurrency, 'opts.concurrency');
     assert.func(callback, 'callback');
+
     var self = this;
     var progress = opts.progress;
+    var ui = opts.ui;
     var sdcadm = opts.sdcadm;
     var log = opts.log;
     var svc;
@@ -451,21 +452,16 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                             sdcadm: sdcadm,
                             urConnection: ctx.urConnection,
                             log: log,
-                            progress: progress,
+                            ui: ui,
                             command: cmd.str,
                             concurrency: concurrency,
                             timeout: cmd.timeout
                         };
 
-                        var bar;
-                        if (process.stderr.isTTY) {
-                            bar = new ProgressBar({
-                                size: ctx.urServersToUpdate.length,
-                                bytes: false,
-                                filename: cmd.progbarName
-                            });
-                            queueOpts.progbar = bar;
-                        }
+                        ui.barStart({
+                            name: cmd.progbarName,
+                            size: ctx.urServersToUpdate.length
+                        });
                         log.trace({
                             command: cmd.str,
                             concurrency: concurrency
@@ -473,6 +469,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
 
                         var rq = ur.runQueue(queueOpts,
                                 function runQueueCb(err, results) {
+                            ui.barEnd();
+
                             if (err) {
                                 nextCmd(new errors.UpdateError(
                                     err, 'unexpected runQueue error'));
@@ -508,11 +506,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                                     errmsg += ' (log file on server: ' +
                                         cmd.logFile + ')';
                                 }
-                                if (bar) {
-                                    bar.log(errmsg);
-                                } else {
-                                    console.log(errmsg);
-                                }
+                                ui.error(errmsg);
                             }
                         });
 
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 5b88add..0529b5a 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -2482,15 +2482,18 @@ SdcAdm.prototype.summarizePlan = function summarizePlan(options) {
  * @param options {Object}  Required.
  *      - plan {Object} Required. The update plan as returned by
  *        `genUpdatePlan`.
+ *      - ui {Object} Required. A CLI `UI` instance for this sdcadm invocation.
  *      - progress {Function} Optional. A function that is called
  *        with progress messages. Called like printf, i.e. passing in
  *        `console.log` or a Bunyan `log.info.bind(log)` is fine.
+ *        Deprecated. Use `ui`.
  *      - dryRun {Boolean} Optional. Default false.
  * @param cb {Function} Callback of the form `function (err)`.
  */
 SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
     assert.object(options, 'options');
     assert.object(options.plan, 'options.plan');
+    assert.object(options.ui, 'options.ui');
     assert.optionalFunc(options.progress, 'options.progress');
     assert.optionalBool(options.dryRun, 'options.dryRun');
     assert.optionalString(options.uuid, 'options.uuid');
@@ -2500,11 +2503,13 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
     // We need a pointer to the update directory when we're trying to rollback:
     assert.optionalString(options.upDir, 'options.upDir');
     assert.func(cb, 'cb');
+
     var self = this;
     var log = self.log;
     var progress = options.progress || function () {};
     var plan = options.plan;
     var rollback = plan.rollback || false;
+    var ui = options.ui;
 
     var start = new Date();
     var wrkDir;
@@ -2587,7 +2592,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
                     proc.execute({
                         sdcadm: self,
                         plan: plan,
-                        progress: progress,
+                        progress: progress, // Deprecated. Use `ui`.
+                        ui: ui,
                         log: log,
                         wrkDir: wrkDir,
                         upDir: options.upDir,
@@ -2601,7 +2607,7 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
     ]}, function (err) {
         if (err) {
             // TOOLS-879: sdcadm update should tell user about the error:
-            progress('Update error: %r', err);
+            ui.error('Update error: %r', err);
         }
         cb(err);
     });
diff --git a/test/unit/cli/do_update_agents.test.js b/test/unit/cli/do_update_agents.test.js
index c060908..3b9847d 100644
--- a/test/unit/cli/do_update_agents.test.js
+++ b/test/unit/cli/do_update_agents.test.js
@@ -25,6 +25,7 @@ const do_update_agents = require('../../../lib/cli/do_update_agents');
 const UpdateAgents = do_update_agents._UpdateAgents;
 const sha1Path = do_update_agents._sha1Path;
 const testutil = require('../testutil');
+const MockUI = require('../../../lib/cli/ui').MockUI;
 
 
 class StubImgApi {
@@ -55,6 +56,7 @@ function testCmd(opts) {
         agentsshar: 'latest',
         concurrency: 4,
         progress: tap.comment,
+        ui: new MockUI({write: tap.comment}),
         all: true
     };
     return new UpdateAgents(Object.assign({}, defaults, opts));
