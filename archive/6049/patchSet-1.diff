commit ec1561178b089fad29e8528b5a188ddb42516b06
Author: Jason King <jason.king@joyent.com>
Date:   2019-04-04T22:18:49+00:00 (6 months ago)
    
    OS-7698 Add mkzpool -e for creating encrypted zpools

diff --git a/src/mkzpool.js b/src/mkzpool.js
index 1b986881..7afc5507 100644
--- a/src/mkzpool.js
+++ b/src/mkzpool.js
@@ -27,11 +27,15 @@ var config;
 var pool;
 
 var option;
+var opt_e = false;
 var opt_f = false;
-var parser = new getopt.BasicParser('f', process.argv);
+var parser = new getopt.BasicParser('ef', process.argv);
 
 while ((option = parser.getopt()) !== undefined && !option.error) {
-	switch (option.option) {
+    switch (option.option) {
+	case 'e':
+		opt_e = true;
+		break;
 	case 'f':
 		opt_f = true;
 		break;
@@ -51,7 +55,7 @@ pool = process.argv[parser.optind()];
 json = fs.readFileSync(process.argv[parser.optind() + 1], 'utf8');
 config = JSON.parse(json);
 
-zfs.zpool.create(pool, config, opt_f, function (err) {
+zfs.zpool.create(pool, config, opt_f, opt_e, function (err) {
 	if (err) {
 		fatal('pool creation failed: ' + err);
 	}
diff --git a/src/node_modules/zfs.js b/src/node_modules/zfs.js
index 30984e02..4e6b4434 100644
--- a/src/node_modules/zfs.js
+++ b/src/node_modules/zfs.js
@@ -12,6 +12,7 @@ var execFile = cp.execFile,
  * ZFS utilities paths
  */
 exports.paths = {
+    'kbmadm': '/usr/sbin/kbmadm',
     'zpool': '/sbin/zpool',
     'zfs': '/sbin/zfs'
 };
@@ -124,22 +125,35 @@ zpool.status = function (pool, callback) {
  * zpool create command, including log devices, cache devices, and hot spares.
  * The input is an object of the form produced by the disklayout library.
  */
-zpool.create = function (pool, config, force, callback) {
+zpool.create = function (pool, config, force, encrypt, callback) {
+    var cmd;
 	var args;
 
 	if (arguments.length === 3) {
-		callback = force;
-		force = false;
-	} else if (arguments.length !== 4) {
-		throw Error('Invalid arguments, 3 or 4 arguments required');
+        callback = force;
+        encrypt = false;
+        force = false;
+    } else if (arguments.length === 4) {
+        callback = encrypt;
+        encrypt = false;
+	} else if (arguments.length !== 5) {
+		throw Error('Invalid arguments, 3, 4, or 5 arguments required');
 	}
 
-	if (force === true) {
-		args = [ 'create', '-f', pool ];
-	} else {
-		args = [ 'create', pool ];
+    if (encrypt === true) {
+        cmd = export.paths.kbmadm;
+        args = [ 'create-zpool' ];
+    } else {
+        cmd = export.paths.zpool;
+        args = [ 'create' ];
+    }
+
+    if (force === true) {
+        args.push('-f');
 	}
 
+    args.push(pool);
+
 	config.vdevs.forEach(function (vdev) {
 		if (vdev.type)
 			args.push(vdev.type);
@@ -173,7 +187,7 @@ zpool.create = function (pool, config, force, callback) {
 		});
 	}
 
-	execFile(exports.paths.zpool, args, { timeout: timeoutDuration },
+	execFile(cmd, args, { timeout: timeoutDuration },
 	    function (error, stdout, stderr) {
 		if (error)
 			return (callback(stderr.toString()));
