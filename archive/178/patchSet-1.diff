commit 53a24ecc5a85184ae94cf4465dedab94ee4b30ae (refs/changes/78/178/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-07-29T18:24:29-07:00 (3 years, 2 months ago)
    
    PUBAPI-1299 want nicer API for smartdc-auth
    joyent/node-triton#108 triton profile create should handle private key that is passphrase-protected

diff --git a/lib/cli.js b/lib/cli.js
index 2dcf50a..08af61f 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -23,6 +23,7 @@ var util = require('util'),
     format = util.format;
 var path = require('path');
 var vasync = require('vasync');
+var getpass = require('getpass');
 
 var common = require('./common');
 var mod_config = require('./config');
@@ -303,35 +304,56 @@ CLI.prototype.init = function (opts, args, callback) {
     });
 
     this.__defineGetter__('tritonapi', function getTritonapi() {
-        if (self._tritonapi === undefined) {
-            self._tritonapi = tritonapi.createClient({
-                log: self.log,
-                profile: self.profile,
-                config: self.config
-            });
+        if (self._tritonapi_err !== undefined) {
+            throw self._tritonapi_err;
         }
         return self._tritonapi;
     });
 
-    if (process.env.TRITON_COMPLETE) {
-        /*
-         * If `TRITON_COMPLETE=<type>` is set (typically only in the
-         * Triton CLI bash completion driver, see
-         * "etc/triton-bash-completion-types.sh"), then Bash completions are
-         * fetched and printed, instead of the usual subcommand handling.
-         *
-         * Completion results are typically cached (under "~/.triton/cache")
-         * to avoid hitting the server for data everytime.
-         *
-         * Example usage:
-         *      TRITON_COMPLETE=images triton -p my-profile create
-         */
-        this._emitCompletions(process.env.TRITON_COMPLETE, function (err) {
-            callback(err || false);
+    try {
+        var tc = tritonapi.createClient({
+            log: self.log,
+            profile: self.profile,
+            config: self.config,
+            getPassphrase: getpass.getPass
         });
-    } else {
-        // Cmdln class handles `opts.help`.
-        Cmdln.prototype.init.apply(this, arguments);
+    } catch (err) {
+        self._tritonapi_err = err;
+        initBase();
+        return;
+    }
+
+    tc.init(function (err) {
+        if (err) {
+            self._tritonapi_err = err;
+            initBase();
+            return;
+        }
+        self._tritonapi = tc;
+        initBase();
+    });
+
+    function initBase() {
+        if (process.env.TRITON_COMPLETE) {
+            /*
+             * If `TRITON_COMPLETE=<type>` is set (typically only in the
+             * Triton CLI bash completion driver, see
+             * "etc/triton-bash-completion-types.sh"), then Bash completions are
+             * fetched and printed, instead of the usual subcommand handling.
+             *
+             * Completion results are typically cached (under "~/.triton/cache")
+             * to avoid hitting the server for data everytime.
+             *
+             * Example usage:
+             *      TRITON_COMPLETE=images triton -p my-profile create
+             */
+            self._emitCompletions(process.env.TRITON_COMPLETE, function (err) {
+                callback(err || false);
+            });
+        } else {
+            // Cmdln class handles `opts.help`.
+            Cmdln.prototype.init.call(self, opts, args, callback);
+        }
     }
 };
 
@@ -605,7 +627,8 @@ CLI.prototype.tritonapiFromProfileName =
     return tritonapi.createClient({
         log: this.log,
         profile: profile,
-        config: this.config
+        config: this.config,
+        getPassphrase: getpass.getPass
     });
 };
 
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 6949e56..608e87f 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -41,6 +41,7 @@ var os = require('os');
 var querystring = require('querystring');
 var vasync = require('vasync');
 var auth = require('smartdc-auth');
+var EventEmitter = require('events').EventEmitter;
 
 var bunyannoop = require('./bunyannoop');
 var common = require('./common');
@@ -64,10 +65,7 @@ var OS_PLATFORM = os.platform();
  *
  * @param options {Object}
  *      - {String} url (required) Cloud API base url
- *      - {String} account (required) The account login name.
- *      - {Function} sign (required) An http-signature auth signing function
- *      - {String} user (optional) The RBAC user login name.
- *      - {Array of String} roles (optional) RBAC role(s) to take up.
+ *      - Authentication options (see below)
  *      - {String} version (optional) Used for the accept-version header. This
  *        defaults to '*', meaning that over time you could experience breaking
  *        changes. Specifying a value is strongly recommended. E.g. '~7.1'.
@@ -78,6 +76,29 @@ var OS_PLATFORM = os.platform();
  *          {Boolean} agent  Set to `false` to not get KeepAlive. You want
  *              this for CLIs.
  *          TODO doc the backoff/retry available options
+ *
+ *      Authentication options can be given in two ways - either with a
+ *      smartdc-auth KeyPair (the preferred method), or with a signer function
+ *      (deprecated, retained for compatibility).
+ *
+ *      Either:
+ *      - {String} account (required) The account login name this cloudapi
+ *          client will operate upon.
+ *      - {Object} principal (required)
+ *          - {String} account (required) The account login name for
+ *              authentication.
+ *          - {Object} keyPair (required) A smartdc-auth KeyPair object
+ *          - {String} user (optional) RBAC sub-user login name
+ *
+ *      Or:
+ *      - {String} account (required) The account login name used both for
+ *          authentication and as the account being operated upon.
+ *      - {Function} sign (required) An http-signature auth signing function.
+ *      - {String} user (optional) The RBAC user login name.
+ *
+ *      May be added to either of the above:
+ *      - {Array of String} roles (optional) RBAC role(s) to take up.
+ *
  * @throws {TypeError} on bad input.
  * @constructor
  *
@@ -90,17 +111,30 @@ function CloudApi(options) {
     assert.object(options, 'options');
     assert.string(options.url, 'options.url');
     assert.string(options.account, 'options.account');
-    assert.func(options.sign, 'options.sign');
-    assert.optionalString(options.user, 'options.user');
+
     assert.optionalArrayOfString(options.roles, 'options.roles');
     assert.optionalString(options.version, 'options.version');
     assert.optionalObject(options.log, 'options.log');
 
+    assert.optionalObject(options.principal, 'options.principal');
+    this.principal = options.principal;
+    if (options.principal === undefined) {
+        this.principal = {};
+        this.principal.account = options.account;
+        assert.optionalString(options.user, 'options.user');
+        if (options.user !== undefined)
+            this.principal.user = options.user;
+        assert.func(options.sign, 'options.sign');
+        this.principal.sign = options.sign;
+    } else {
+        assert.string(this.principal.account, 'principal.account');
+        assert.object(this.principal.keyPair, 'principal.keyPair');
+        assert.optionalString(this.principal.user, 'principal.user');
+    }
+
     this.url = options.url;
     this.account = options.account;
-    this.user = options.user; // optional RBAC subuser
     this.roles = options.roles;
-    this.sign = options.sign;
     this.log = options.log || new bunyannoop.BunyanNoopLogger();
     if (!options.version) {
         options.version = '*';
@@ -110,6 +144,9 @@ function CloudApi(options) {
             VERSION, OS_ARCH, OS_PLATFORM, process.versions.node);
     }
 
+    assert.optionalFunc(options.getPassphrase, 'options.getPassphrase');
+    this._getPassphrase = options.getPassphrase;
+
     // XXX relevant?
     //options.retryCallback = function checkFor500(code) {
     //    return (code === 500);
@@ -128,16 +165,74 @@ CloudApi.prototype.close = function close(callback) {
     this.client.close();
 };
 
+CloudApi.prototype._getAuthHeaders =
+    function _getAuthHeaders(method, path, callback) {
 
-CloudApi.prototype._getAuthHeaders = function _getAuthHeaders(callback) {
+    assert.string(method, 'method');
+    assert.string(path, 'path');
     assert.func(callback, 'callback');
     var self = this;
 
     var headers = {};
 
-    var rs = auth.requestSigner({
-        sign: self.sign
-    });
+    var rs;
+    if (this.principal.sign !== undefined) {
+        rs = auth.requestSigner({
+            sign: this.principal.sign
+        });
+    } else if (this.principal.keyPair !== undefined) {
+        var kp = this.principal.keyPair;
+        /*
+         * This is a bit of a failure of abstraction. Historically we've
+         * assumed that everything to do with the cloudapi client other than
+         * making a request is purely sync, but prompting for a password is
+         * async. So without massive changes to all the commands, we have to
+         * handle unlocking keys at request time, here.
+         */
+        if (kp.isLocked() && this._getPassphrase !== undefined) {
+            if (this._asking !== undefined) {
+                this._asking.on('done', function () {
+                    self._getAuthHeaders(method, path, callback);
+                });
+                return;
+            }
+            var asking = (this._asking = new EventEmitter());
+            var opts = {};
+            opts.prompt = 'Passphrase to unlock ';
+            if (kp.source !== undefined) {
+                opts.prompt += kp.source;
+            } else if (kp.comment !== undefined && kp.comment.length > 1) {
+                opts.prompt += kp.getPublicKey().type.toUpperCase() +
+                    ' key for ' + kp.comment;
+            } else {
+                opts.prompt += kp.getPublicKey().type.toUpperCase() +
+                    ' key ' + kp.getKeyId();
+            }
+            this._getPassphrase(opts, tryPass);
+            function tryPass(err, pass) {
+                if (err) {
+                    callback(err);
+                    return;
+                }
+                try {
+                    kp.unlock(pass);
+                } catch (e) {
+                    self._getPassphrase(opts, tryPass);
+                    return;
+                }
+                delete (self._asking);
+                self._getAuthHeaders(method, path, callback);
+                asking.emit('done');
+            }
+            return;
+        }
+        rs = this.principal.keyPair.createRequestSigner({
+            user: this.principal.account,
+            subuser: this.principal.user
+        });
+    }
+
+    rs.writeTarget(method, path);
     headers.date = rs.writeDateHeader();
 
     // TODO: token auth support
@@ -239,7 +334,7 @@ CloudApi.prototype._request = function _request(opts, cb) {
         }
     }
 
-    self._getAuthHeaders(function (err, headers) {
+    self._getAuthHeaders(method, opts.path, function (err, headers) {
         if (err) {
             cb(err);
             return;
diff --git a/lib/do_profile/do_create.js b/lib/do_profile/do_create.js
index 6a9f979..2085a6d 100644
--- a/lib/do_profile/do_create.js
+++ b/lib/do_profile/do_create.js
@@ -9,6 +9,7 @@ var format = require('util').format;
 var fs = require('fs');
 var sshpk = require('sshpk');
 var vasync = require('vasync');
+var auth = require('smartdc-auth');
 
 var common = require('../common');
 var errors = require('../errors');
@@ -101,17 +102,15 @@ function _createProfile(opts, cb) {
                     'create profile: stdout is not a TTY'));
             }
 
+            var kr = new auth.KeyRing();
+            var keyChoices = {};
+
             var defaults = {};
             if (ctx.copy) {
                 defaults = ctx.copy;
                 delete defaults.name; // we don't copy a profile name
             } else {
                 defaults.url = 'https://us-sw-1.api.joyent.com';
-
-                var possibleDefaultFp = '~/.ssh/id_rsa';
-                if (fs.existsSync(common.tildeSync(possibleDefaultFp))) {
-                    defaults.keyId = possibleDefaultFp;
-                }
             }
 
             var fields = [ {
@@ -156,11 +155,10 @@ function _createProfile(opts, cb) {
                     valCb();
                 }
             }, {
-                desc: 'The fingerprint of the SSH key you have registered ' +
-                    'for your account. Alternatively, You may enter a local ' +
-                    'path to a public or private SSH key to have the ' +
-                    'fingerprint calculated for you.',
-                default: defaults.keyId,
+                desc: 'The fingerprint of the SSH key you want to use, or ' +
+                    'its index in the list above. If the key you want to ' +
+                    'use is not listed, make sure it is either saved in your ' +
+                    'SSH keys directory or loaded into the SSH agent.',
                 key: 'keyId',
                 validate: function validateKeyId(value, valCb) {
                     // First try as a fingerprint.
@@ -170,44 +168,14 @@ function _createProfile(opts, cb) {
                     } catch (fpErr) {
                     }
 
-                    // Try as a local path.
-                    var keyPath = common.tildeSync(value);
-                    fs.stat(keyPath, function (statErr, stats) {
-                        if (statErr || !stats.isFile()) {
-                            return valCb(new Error(format(
-                                '"%s" is neither a valid fingerprint, ' +
-                                'nor an existing file', value)));
-                        }
-                        fs.readFile(keyPath, function (readErr, keyData) {
-                            if (readErr) {
-                                return valCb(readErr);
-                            }
-                            var keyType = (keyPath.slice(-4) === '.pub'
-                                ? 'ssh' : 'pem');
-                            try {
-                                var key = sshpk.parseKey(keyData, keyType);
-                            } catch (keyErr) {
-                                return valCb(keyErr);
-                            }
-
-                            /*
-                             * Save the user's explicit given key path. We will
-                             * using it later for Docker setup. Trying to use
-                             * the same format as node-smartdc's loadSSHKey
-                             * `keyPaths` param.
-                             */
-                            ctx.keyPaths = {};
-                            if (keyType === 'ssh') {
-                                ctx.keyPaths.public = keyPath;
-                            } else {
-                                ctx.keyPaths.private = keyPath;
-                            }
+                    // Try as a list index
+                    if (keyChoices[value] !== undefined) {
+                        return valCb(null, keyChoices[value]);
+                    }
 
-                            var newVal = key.fingerprint('md5').toString();
-                            console.log('Fingerprint: %s', newVal);
-                            valCb(null, newVal);
-                        });
-                    });
+                    valCb(new Error(format(
+                        '"%s" is neither a valid fingerprint, not an index ' +
+                        'from the list of available keys', value)));
                 }
             } ];
 
@@ -234,11 +202,50 @@ function _createProfile(opts, cb) {
             vasync.forEachPipeline({
                 inputs: fields,
                 func: function getField(field, nextField) {
-                    if (field.key !== 'name') console.log();
-                    common.promptField(field, function (err, value) {
-                        data[field.key] = value;
-                        nextField(err);
-                    });
+                    if (field.key !== 'name')
+                        console.log();
+                    if (field.key === 'keyId') {
+                        kr.list(function (err, pairs) {
+                            if (err) {
+                                nextField(err);
+                                return;
+                            }
+                            var choice = 1;
+                            console.log('Available SSH keys:');
+                            Object.keys(pairs).forEach(function (keyId) {
+                                var valid = pairs[keyId].filter(function (kp) {
+                                    return (kp.canSign());
+                                });
+                                if (valid.length < 1)
+                                    return;
+                                var pub = valid[0].getPublicKey();
+                                console.log(
+                                    ' %d. %d-bit %s key with fingerprint %s',
+                                    choice, pub.size, pub.type.toUpperCase(),
+                                    keyId);
+                                pairs[keyId].forEach(function (kp) {
+                                    var comment = kp.comment ||
+                                        kp.getPublicKey().comment;
+                                    console.log('  * [in %s] %s %s %s',
+                                        kp.plugin, comment,
+                                        (kp.source ? kp.source : ''),
+                                        (kp.isLocked() ? '[locked]' : ''));
+                                });
+                                console.log();
+                                keyChoices[choice] = keyId;
+                                ++choice;
+                            });
+                            common.promptField(field, function (err, value) {
+                                data[field.key] = value;
+                                nextField(err);
+                            });
+                        });
+                    } else {
+                        common.promptField(field, function (err, value) {
+                            data[field.key] = value;
+                            nextField(err);
+                        });
+                    }
                 }
             }, function (err) {
                 console.log();
diff --git a/lib/do_profile/profilecommon.js b/lib/do_profile/profilecommon.js
index 13c4df7..dbf93ee 100644
--- a/lib/do_profile/profilecommon.js
+++ b/lib/do_profile/profilecommon.js
@@ -18,6 +18,7 @@ var mod_url = require('url');
 var vasync = require('vasync');
 var which = require('which');
 var wordwrap = require('wordwrap')(78);
+var getpass = require('getpass');
 
 var common = require('../common');
 var mod_config = require('../config');
@@ -143,14 +144,27 @@ function profileDockerSetup(opts, cb) {
     assert.optionalObject(opts.keyPaths, 'opts.keyPaths');
     assert.func(cb, 'cb');
 
-    var implicit = Boolean(opts.implicit);
     var cli = opts.cli;
-    var log = cli.log;
     var tritonapi = cli.tritonapiFromProfileName({profileName: opts.name});
+
+    var implicit = Boolean(opts.implicit);
+    var log = cli.log;
+
     var profile = tritonapi.profile;
     var dockerHost;
 
     vasync.pipeline({arg: {}, funcs: [
+        function initTritonApi(arg, next) {
+            tritonapi.init(function (err) {
+                if (err) {
+                    next(new errors.SetupError(err, format(
+                        'error initializing Triton API client')));
+                } else {
+                    next();
+                }
+            });
+        },
+
         function checkCloudapiStatus(arg, next) {
             tritonapi.cloudapi.ping({}, function (err, pong, res) {
                 if (!res) {
@@ -222,69 +236,56 @@ function profileDockerSetup(opts, cb) {
             next();
         },
 
-        function findSshPrivKey_keyPaths(arg, next) {
-            if (!opts.keyPaths) {
+        function findSshPrivKey(arg, next) {
+            var kr = new auth.KeyRing();
+            var fp = sshpk.parseFingerprint(profile.keyId);
+            kr.findSigningKeyPair(fp, function (err, kp) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                arg.keyPair = kp;
+                next();
+            });
+        },
+        function unlockSshPrivKey(arg, next) {
+            if (!arg.keyPair.isLocked()) {
                 next();
                 return;
             }
 
-            var privKeyPath = opts.keyPaths.private;
-            if (!privKeyPath) {
-                assert.string(opts.keyPaths.public);
-                assert.ok(opts.keyPaths.public.slice(-4) === '.pub');
-                privKeyPath = opts.keyPaths.public.slice(0, -4);
-                if (!fs.existsSync(privKeyPath)) {
-                    cb(new errors.SetupError(format('could not find SSH '
-                        + 'private key file from public key file "%s": "%s" '
-                        + 'does not exist', opts.keyPaths.public,
-                        privKeyPath)));
+            console.log(wordwrap('\nWARNING: Docker does not support ' +
+                'encrypted (password protected) keys. If you continue, a ' +
+                'decrypted copy of your SSH private key will be stored on ' +
+                'disk for with Docker.'));
+            getpass.getPass({
+                prompt: 'Passphrase to decrypt SSH key'
+            }, function (err, pass) {
+                if (err) {
+                    next(new errors.SetupError(err, format(
+                        'error obtaining passphrase')));
                     return;
                 }
-            }
 
-            arg.sshKeyPaths = {
-                private: privKeyPath,
-                public: opts.keyPaths.public
-            };
-
-            fs.readFile(privKeyPath, function (readErr, keyData) {
-                if (readErr) {
-                    cb(readErr);
-                    return;
-                }
                 try {
-                    arg.sshPrivKey = sshpk.parseKey(keyData, 'pem');
-                } catch (keyErr) {
-                    cb(keyErr);
-                    return;
+                    arg.keyPair.unlock(pass);
+                } catch (err) {
+                    next(new errors.SetupError(err, format(
+                        'error decrypting key')));
                 }
-                log.trace({sshKeyPaths: arg.sshKeyPaths},
-                    'profileDockerSetup: findSshPrivKey_keyPaths');
                 next();
             });
         },
-        function findSshPrivKey_keyId(arg, next) {
-            if (opts.keyPaths) {
-                next();
+        function checkSshPrivKey(arg, next) {
+            try {
+                arg.keyPair.getPrivateKey();
+            } catch (e) {
+                next(new errors.SetupError(format('could not obtain SSH ' +
+                    'private key for keypair with fingerprint "%s" ' +
+                    'to create Docker certificate.', profile.keyId)));
                 return;
             }
-
-            // TODO: keyPaths here is using a non-#master of node-smartdc-auth.
-            //      Change back to a smartdc-auth release when
-            //      https://github.com/joyent/node-smartdc-auth/pull/5 is in.
-            auth.loadSSHKey(profile.keyId, function (err, key, keyPaths) {
-                if (err) {
-                    // TODO: better error message here.
-                    next(err);
-                } else {
-                    assert.ok(key, 'key from auth.loadSSHKey');
-                    log.trace({keyId: profile.keyId, sshKeyPaths: keyPaths},
-                        'profileDockerSetup: findSshPrivKey');
-                    arg.sshKeyPaths = keyPaths;
-                    arg.sshPrivKey = key;
-                    next();
-                }
-            });
+            next();
         },
 
         /*
@@ -348,31 +349,33 @@ function profileDockerSetup(opts, cb) {
         },
         function genClientCert_key(arg, next) {
             arg.keyPath = path.resolve(arg.dockerCertPath, 'key.pem');
-            common.execPlus({
-                cmd: format('openssl rsa -in %s -out %s -outform pem',
-                    arg.sshKeyPaths.private, arg.keyPath),
-                log: log
-            }, next);
-        },
-        function genClientCert_csr(arg, next) {
-            arg.csrPath = path.resolve(arg.dockerCertPath, 'csr.pem');
-            common.execPlus({
-                cmd: format('openssl req -new -key %s -out %s -subj "/CN=%s"',
-                    arg.keyPath, arg.csrPath, profile.account),
-                log: log
-            }, next);
+            var data = arg.keyPair.getPrivateKey().toBuffer('pkcs1');
+            fs.writeFile(arg.keyPath, data, function (err) {
+                if (err) {
+                    next(new errors.SetupError(err, format(
+                        'error writing file %s', arg.keyPath)));
+                } else {
+                    next();
+                }
+            });
         },
         function genClientCert_cert(arg, next) {
             arg.certPath = path.resolve(arg.dockerCertPath, 'cert.pem');
-            common.execPlus({
-                cmd: format(
-                    'openssl x509 -req -days 365 -in %s -signkey %s -out %s',
-                    arg.csrPath, arg.keyPath, arg.certPath),
-                log: log
-            }, next);
-        },
-        function genClientCert_deleteCsr(arg, next) {
-            rimraf(arg.csrPath, next);
+
+            var privKey = arg.keyPair.getPrivateKey();
+            var id = sshpk.identityFromDN('CN=' + profile.account);
+            var cert = sshpk.createSelfSignedCertificate(id, privKey,
+                { serial: new Buffer([0,0,0,0,0,0,0x81,0xff])});
+            var data = cert.toBuffer('pem');
+
+            fs.writeFile(arg.certPath, data, function (err) {
+                if (err) {
+                    next(new errors.SetupError(err, format(
+                        'error writing file %s', arg.keyPath)));
+                } else {
+                    next();
+                }
+            });
         },
 
         function getServerCa(arg, next) {
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 8746000..bbb2c24 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -24,6 +24,7 @@ var restifyBunyanSerializers =
     require('restify-clients/lib/helpers/bunyan').serializers;
 var tabula = require('tabula');
 var vasync = require('vasync');
+var sshpk = require('sshpk');
 
 var cloudapi = require('./cloudapi2');
 var common = require('./common');
@@ -129,6 +130,9 @@ function TritonApi(opts) {
     this.profile = opts.profile;
     this.config = opts.config;
 
+    assert.optionalFunc(opts.getPassphrase);
+    this._getPassphrase = opts.getPassphrase;
+
     // Make sure a given bunyan logger has reasonable client_re[qs] serializers.
     // Note: This was fixed in restify, then broken again in
     // https://github.com/mcavage/node-restify/pull/501
@@ -147,17 +151,7 @@ function TritonApi(opts) {
             this.config.cacheDir,
             common.profileSlug(this.profile));
         this.log.trace({cacheDir: this.cacheDir}, 'cache dir');
-        // TODO perhaps move this to an async .init()
-        if (!fs.existsSync(this.cacheDir)) {
-            try {
-                mkdirp.sync(this.cacheDir);
-            } catch (e) {
-                throw e;
-            }
-        }
     }
-
-    this.cloudapi = this._cloudapiFromProfile(this.profile);
 }
 
 
@@ -167,9 +161,27 @@ TritonApi.prototype.close = function close() {
 };
 
 
-TritonApi.prototype._cloudapiFromProfile =
-    function _cloudapiFromProfile(profile)
-{
+TritonApi.prototype.init = function init(cb) {
+    var self = this;
+    fs.exists(this.cacheDir, function (exists) {
+        if (!exists) {
+            mkdirp(self.cacheDir, function (err) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+                self._setupProfile(cb);
+            });
+        } else {
+            self._setupProfile(cb);
+        }
+    });
+};
+
+TritonApi.prototype._setupProfile = function _setupProfile(cb) {
+    var self = this;
+    var profile = this.profile;
+
     assert.object(profile, 'profile');
     assert.string(profile.account, 'profile.account');
     assert.optionalString(profile.actAsAccount, 'profile.actAsAccount');
@@ -185,32 +197,38 @@ TritonApi.prototype._cloudapiFromProfile =
         ? true : !profile.insecure);
     var acceptVersion = profile.acceptVersion || CLOUDAPI_ACCEPT_VERSION;
 
-    var sign;
-    if (profile.privKey) {
-        sign = auth.privateKeySigner({
-            user: profile.account,
-            subuser: profile.user,
-            keyId: profile.keyId,
-            key: profile.privKey
-        });
-    } else {
-        sign = auth.cliSigner({
-            keyId: profile.keyId,
-            user: profile.account,
-            subuser: profile.user
-        });
-    }
-    var client = cloudapi.createClient({
+    var opts = {
         url: profile.url,
         account: profile.actAsAccount || profile.account,
-        user: profile.user,
+        principal: {
+            account: profile.account,
+            user: profile.user
+        },
         roles: profile.roles,
         version: acceptVersion,
         rejectUnauthorized: rejectUnauthorized,
-        sign: sign,
+        getPassphrase: this._getPassphrase,
         log: this.log
-    });
-    return client;
+    };
+
+    if (profile.privKey) {
+        var key = sshpk.parsePrivateKey(profile.privKey);
+        opts.principal.keyPair = auth.KeyPair.fromPrivateKey(key);
+        this.cloudapi = cloudapi.createClient(opts);
+        cb(null);
+    } else {
+        var kr = new auth.KeyRing();
+        var fp = sshpk.parseFingerprint(profile.keyId);
+        kr.findSigningKeyPair(fp, function (err, kp) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            opts.principal.keyPair = kp;
+            self.cloudapi = cloudapi.createClient(opts);
+            cb(null);
+        });
+    }
 };
 
 
diff --git a/package.json b/package.json
index 06df03b..92c8cfb 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "bunyan": "1.5.1",
     "cmdln": "4.1.1",
     "extsprintf": "1.0.2",
+    "getpass": "0.1.x",
     "lomstream": "1.1.0",
     "mkdirp": "0.5.1",
     "node-uuid": "1.4.3",
@@ -19,8 +20,8 @@
     "restify-errors": "3.0.0",
     "rimraf": "2.4.4",
     "semver": "5.1.0",
-    "smartdc-auth": "git+https://github.com/joyent/node-smartdc-auth.git#05d9077",
-    "sshpk": "1.7.x",
+    "smartdc-auth": "2.5.0",
+    "sshpk": "1.9.x",
     "strsplit": "1.0.0",
     "tabula": "1.7.0",
     "vasync": "1.6.3",
diff --git a/test/integration/api-images.test.js b/test/integration/api-images.test.js
index 992cc89..77c48c3 100644
--- a/test/integration/api-images.test.js
+++ b/test/integration/api-images.test.js
@@ -30,8 +30,10 @@ test('TritonApi images', function (tt) {
     var client;
     tt.test(' setup: client', function (t) {
         client = h.createClient();
-        t.ok(client, 'client');
-        t.end();
+        client.init(function (err) {
+            t.error(err);
+            t.end();
+        });
     });
 
     var testOpts = {};
diff --git a/test/integration/api-instances.test.js b/test/integration/api-instances.test.js
index 6934123..b140103 100644
--- a/test/integration/api-instances.test.js
+++ b/test/integration/api-instances.test.js
@@ -31,17 +31,20 @@ var INST;
 test('TritonApi packages', function (tt) {
     tt.test(' setup', function (t) {
         CLIENT = h.createClient();
-        t.ok(CLIENT, 'client');
 
-        CLIENT.cloudapi.listMachines(function (err, insts) {
-            if (h.ifErr(t, err))
-                return t.end();
+        CLIENT.init(function (err) {
+            t.error(err);
 
-            t.ok(Array.isArray(insts), 'instances');
+            CLIENT.cloudapi.listMachines(function (err, insts) {
+                if (h.ifErr(t, err))
+                    return t.end();
+
+                t.ok(Array.isArray(insts), 'instances');
 
-            INST = insts[0];
+                INST = insts[0];
 
-            t.end();
+                t.end();
+            });
         });
     });
 
diff --git a/test/integration/api-networks.test.js b/test/integration/api-networks.test.js
index e6d31bf..149ec51 100644
--- a/test/integration/api-networks.test.js
+++ b/test/integration/api-networks.test.js
@@ -31,21 +31,23 @@ var NET;
 test('TritonApi networks', function (tt) {
     tt.test(' setup', function (t) {
         CLIENT = h.createClient();
-        t.ok(CLIENT, 'client');
 
-        var opts = {
-            account: CLIENT.profile.account
-        };
+        CLIENT.init(function (err) {
+            t.error(err);
+            var opts = {
+                account: CLIENT.profile.account
+            };
 
-        CLIENT.cloudapi.listNetworks(opts, function (err, nets) {
-            if (h.ifErr(t, err))
-                return t.end();
+            CLIENT.cloudapi.listNetworks(opts, function (err, nets) {
+                if (h.ifErr(t, err))
+                    return t.end();
 
-            t.ok(Array.isArray(nets), 'networks');
+                t.ok(Array.isArray(nets), 'networks');
 
-            NET = nets[0];
+                NET = nets[0];
 
-            t.end();
+                t.end();
+            });
         });
     });
 
diff --git a/test/integration/api-packages.test.js b/test/integration/api-packages.test.js
index 053711e..bd08350 100644
--- a/test/integration/api-packages.test.js
+++ b/test/integration/api-packages.test.js
@@ -31,17 +31,19 @@ var PKG;
 test('TritonApi packages', function (tt) {
     tt.test(' setup', function (t) {
         CLIENT = h.createClient();
-        t.ok(CLIENT, 'client');
 
-        CLIENT.cloudapi.listPackages(function (err, pkgs) {
-            if (h.ifErr(t, err))
-                return t.end();
+        CLIENT.init(function (err) {
+            t.error(err);
+            CLIENT.cloudapi.listPackages(function (err, pkgs) {
+                if (h.ifErr(t, err))
+                    return t.end();
 
-            t.ok(Array.isArray(pkgs), 'packages');
+                t.ok(Array.isArray(pkgs), 'packages');
 
-            PKG = pkgs[0];
+                PKG = pkgs[0];
 
-            t.end();
+                t.end();
+            });
         });
     });
 
