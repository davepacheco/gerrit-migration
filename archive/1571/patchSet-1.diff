From df6208c95e2ee3803c8969d53ab1cdf4d51b22bf Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Fri, 24 Feb 2017 22:28:05 +0000
Subject: [PATCH] OS-5984 make aio context array dynamic

---
 usr/src/uts/common/brand/lx/sys/lx_brand.h   |  1 +
 usr/src/uts/common/brand/lx/syscall/lx_aio.c | 72 ++++++++++++++------
 2 files changed, 54 insertions(+), 19 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/sys/lx_brand.h b/usr/src/uts/common/brand/lx/sys/lx_brand.h
index 2e69858664..5e9b15e12d 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_brand.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_brand.h
@@ -331,6 +331,7 @@ typedef struct lx_proc_data {
 	kmutex_t l_io_ctx_lock; /* protects the following members */
 	uintptr_t l_io_ctxpage;
 	kcondvar_t l_io_destroy_cv;
+	uint_t l_io_ctx_cnt;
 	struct lx_io_ctx  **l_io_ctxs;
 
 	/* original start/end bounds of arg/env string data */
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_aio.c b/usr/src/uts/common/brand/lx/syscall/lx_aio.c
index e137a02e94..954618c313 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_aio.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_aio.c
@@ -78,6 +78,13 @@
  * Another application we've seen will create 8 contexts, each with a capacity
  * of 128 I/Os. In practice 1-7 was the typical number of in-flight I/Os.
  *
+ * The default configuration for mysql uses 4 read and 4 write threads. Each
+ * thread has an associated context. mysql also allocates 3 additional contexts,
+ * so in the default configuration it will only use 11, but the number of
+ * read and write threads can be tuned up to a maximum of 64. We can expand
+ * a process's number of contexts up to a maximum of LX_MAX_IO_CTX, which
+ * is significantly more than we've ever seen in use.
+ *
  * According to www.kernel.org/doc/Documentation/sysctl/fs.txt, the
  * /proc/sys/fs entries for aio are:
  * - aio-nr: The total of all nr_events values specified on the io_setup
@@ -115,11 +122,13 @@
 #define	LX_KIOCB_KEY			0
 
 /*
- * Max. number of contexts/process. Note that we currently map one page to
- * manage the user-level context ID, so that code must be adjusted if this
- * value is ever enlarged to exceed a page.
+ * Min. and max. number of contexts/process. Note that we currently map one
+ * page to manage the user-level context ID, so that code must be adjusted if
+ * LX_MAX_IO_CTX is ever enlarged. Currently this is the limit for the number
+ * of pointers in one page.
  */
-#define	LX_MAX_IO_CTX	32
+#define	LX_MIN_IO_CTX	16
+#define	LX_MAX_IO_CTX	512
 
 /*
  * Max number of control block pointers, or lx_io_event_t's, to allocate on the
@@ -225,12 +234,13 @@ lx_io_cp_hold(lx_aio_context_t cid)
 	mutex_enter(&lxpd->l_io_ctx_lock);
 
 	if (lxpd->l_io_ctxs == NULL) {
+		ASSERT(lxpd->l_io_ctx_cnt == 0);
 		ASSERT(lxpd->l_io_ctxpage == NULL);
 		goto bad;
 	}
 
 	id = PTR_TO_CTXID(lxpd, cid);
-	if (id < 0 || id >= LX_MAX_IO_CTX)
+	if (id < 0 || id >= lxpd->l_io_ctx_cnt)
 		goto bad;
 
 	if ((cp = lxpd->l_io_ctxs[id]) == NULL)
@@ -272,13 +282,13 @@ lx_io_cp_rele(lx_io_ctx_t *cp)
 	/*
 	 * We hold the last ref.
 	 */
-	for (i = 0; i < LX_MAX_IO_CTX; i++) {
+	for (i = 0; i < lxpd->l_io_ctx_cnt; i++) {
 		if (lxpd->l_io_ctxs[i] == cp) {
 			lxpd->l_io_ctxs[i] = NULL;
 			break;
 		}
 	}
-	ASSERT(i < LX_MAX_IO_CTX);
+	ASSERT(i < lxpd->l_io_ctx_cnt);
 	/* wake all threads waiting on context destruction */
 	cv_broadcast(&lxpd->l_io_destroy_cv);
 	mutex_exit(&lxpd->l_io_ctx_lock);
@@ -521,9 +531,9 @@ lx_io_setup(uint_t nr_events, void *ctxp)
 		 */
 		uintptr_t ctxpage;
 
+		ASSERT(lxpd->l_io_ctx_cnt == 0);
 		ASSERT(lxpd->l_io_ctxpage == NULL);
-		/*CONSTCOND*/
-		VERIFY(PAGESIZE >= (LX_MAX_IO_CTX * sizeof (lx_io_ctx_t *)));
+
 		ttolwp(curthread)->lwp_errno = 0;
 		ctxpage = (uintptr_t)smmap64(0, PAGESIZE, PROT_READ,
 		    MAP_SHARED | MAP_ANON, -1, 0);
@@ -533,21 +543,41 @@ lx_io_setup(uint_t nr_events, void *ctxp)
 		}
 
 		lxpd->l_io_ctxpage = ctxpage;
-		lxpd->l_io_ctxs = kmem_zalloc(LX_MAX_IO_CTX *
+		lxpd->l_io_ctx_cnt = LX_MIN_IO_CTX;
+		lxpd->l_io_ctxs = kmem_zalloc(lxpd->l_io_ctx_cnt *
 		    sizeof (lx_io_ctx_t *), KM_SLEEP);
 		slot = 0;
 	} else {
-		for (slot = 0; slot < LX_MAX_IO_CTX; slot++) {
+		ASSERT(lxpd->l_io_ctx_cnt > 0);
+		for (slot = 0; slot < lxpd->l_io_ctx_cnt; slot++) {
 			if (lxpd->l_io_ctxs[slot] == NULL)
 				break;
 		}
 
-		if (slot == LX_MAX_IO_CTX) {
-			mutex_exit(&lxpd->l_io_ctx_lock);
-			mutex_enter(&lxzd->lxzd_lock);
-			lxzd->lxzd_aio_nr -= nr_events;
-			mutex_exit(&lxzd->lxzd_lock);
-			return (set_errno(ENOMEM));
+		if (slot == lxpd->l_io_ctx_cnt) {
+			/* Double our context array up to the max. */
+			int new_size = lxpd->l_io_ctx_cnt * 2;
+			int old_a_size = lxpd->l_io_ctx_cnt *
+			    sizeof (lx_io_ctx_t *);
+			int new_a_size = new_size * sizeof (lx_io_ctx_t *);
+			struct lx_io_ctx  **old_array = lxpd->l_io_ctxs;
+
+			if (new_size > LX_MAX_IO_CTX) {
+				mutex_exit(&lxpd->l_io_ctx_lock);
+				mutex_enter(&lxzd->lxzd_lock);
+				lxzd->lxzd_aio_nr -= nr_events;
+				mutex_exit(&lxzd->lxzd_lock);
+				return (set_errno(ENOMEM));
+			}
+
+			VERIFY(PAGESIZE >= new_a_size);
+			lxpd->l_io_ctxs = kmem_zalloc(new_a_size, KM_SLEEP);
+
+			bcopy(old_array, lxpd->l_io_ctxs, old_a_size);
+			kmem_free(old_array, old_a_size);
+			lxpd->l_io_ctx_cnt = new_size;
+
+			/* note: 'slot' is now valid in the new array */
 		}
 	}
 
@@ -1181,6 +1211,7 @@ void
 lx_io_clear(lx_proc_data_t *cpd)
 {
 	cpd->l_io_ctxs = NULL;
+	cpd->l_io_ctx_cnt = 0;
 	cpd->l_io_ctxpage = NULL;
 }
 
@@ -1205,11 +1236,13 @@ lx_io_cleanup()
 restart:
 	mutex_enter(&lxpd->l_io_ctx_lock);
 	if (lxpd->l_io_ctxs == NULL) {
+		ASSERT(lxpd->l_io_ctx_cnt == 0);
 		mutex_exit(&lxpd->l_io_ctx_lock);
 		return;
 	}
 
-	for (i = 0; i < LX_MAX_IO_CTX; i++) {
+	ASSERT(lxpd->l_io_ctx_cnt > 0);
+	for (i = 0; i < lxpd->l_io_ctx_cnt; i++) {
 		lx_io_ctx_t *cp;
 
 		if ((cp = lxpd->l_io_ctxs[i]) != NULL) {
@@ -1229,7 +1262,8 @@ restart:
 		}
 	}
 
-	kmem_free(lxpd->l_io_ctxs, LX_MAX_IO_CTX * sizeof (lx_io_ctx_t *));
+	kmem_free(lxpd->l_io_ctxs, lxpd->l_io_ctx_cnt * sizeof (lx_io_ctx_t *));
 	lxpd->l_io_ctxs = NULL;
+	lxpd->l_io_ctx_cnt = 0;
 	mutex_exit(&lxpd->l_io_ctx_lock);
 }
-- 
2.21.0

