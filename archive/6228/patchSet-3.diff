From 164389e8ff5c241d35dce1d098a3f4d731b13729 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Mon, 13 May 2019 17:32:39 +0200
Subject: [PATCH] TRITON-1641 VMAPI should properly support "remaining" disk
 size for bhyve VMs

---
 lib/common/validation.js |  29 +++++--
 lib/endpoints/vms.js     | 175 +++++++++++++++++++++++----------------
 test/vms.disks.test.js   | 127 ++++++++++++++++++++++++++--
 3 files changed, 248 insertions(+), 83 deletions(-)

diff --git a/lib/common/validation.js b/lib/common/validation.js
index 270b0e5..53608bd 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -41,7 +41,7 @@ var DOCKER_TAG_RE = DOCKER_TAG_DEFAULT_RE;
 // 1123, but the broader range of characters can sometimes cause problems with
 // other systems (e.g. see the underscore in RFC5321).
 var DNS_NAME_RE = /^[a-z0-9][a-z0-9\-]{0,62}(?:\.[a-z0-9][a-z0-9\-]{0,62})*$/i;
-/*JSSTYLED*/
+/* JSSTYLED */
 var IP_RE = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;
 var MAX_LIST_VMS_LIMIT = 1000;
 var PCI_SLOT_RE = /^[0-9]{1,3}\:[0-9]{1,2}\:[0-7]$/;
@@ -869,7 +869,9 @@ function createValidateMarkerFn(field, options) {
     return function (params) {
         var errs = [];
         var markerString = params[field];
-        var marker, markerParseRes, markerParseErrors = [];
+        var marker;
+        var markerParseRes;
+        var markerParseErrors = [];
         var markerValidationErrs;
         var sortParamName = options.sortParamName;
         var sortString;
@@ -1390,7 +1392,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
 
     // If there were no parameters passed, fail here before doing any async
     if (Object.keys(params).length === 0) {
-        var errMsg = errs.length > 0?
+        var errMsg = errs.length > 0 ?
             'Invalid VM update parameters' : 'No VM parameters provided';
         return callback(new errors.ValidationFailedError(errMsg, errs));
     }
@@ -1742,7 +1744,7 @@ function validNetworks(object, isProvision) {
         obj = array[i];
 
         // See history of types up above
-        if (typeof (obj) == 'string') {
+        if (typeof (obj) === 'string') {
             uuid = obj;
             obj = { ipv4_uuid: uuid, ipv4_count: 1 };
         } else {
@@ -2190,6 +2192,7 @@ function validDisks(disks, brand, errs) {
     var i;
     var ndisks = disks.length;
     var disk0 = disks[0];
+    var remaining = false;
 
     if (disk0.image_uuid === undefined) {
         errs.push(errors.missingParamErr('disks.0.image_uuid'));
@@ -2213,6 +2216,22 @@ function validDisks(disks, brand, errs) {
         if (disk.size === undefined) {
             errs.push(errors.missingParamErr('disks.' + i + '.size'));
         }
+
+        if (isNaN(disk.size)) {
+            if (disk.size !== 'remaining') {
+                errs.push(errors.invalidParamErr('disks.' + i + '.size',
+                    'Not Allowed'));
+            } else {
+                if (remaining) {
+                    errs.push(errors.invalidParamErr('disks.' + i + '.size',
+                    'Cannot have more than one disk with size "remaining"'));
+                }
+                remaining = true;
+            }
+        } else if (disk.size <= 0) {
+                errs.push(errors.invalidParamErr('disks.' + i + '.size',
+                    'Disk size must be positive'));
+        }
     }
 
     return true;
@@ -2331,7 +2350,7 @@ function validateUniqueAlias(moray, params, callback) {
         if (vms.length > 0) {
             var message = 'Already exists for this owner_uuid';
             var error = errors.duplicateParamErr('alias', message);
-            /*JSSTYLED*/
+            /* JSSTYLED */
             return callback(null, error);
         } else {
             return callback(null);
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 6fcfbdf..2612506 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -53,7 +53,7 @@ var DEFAULT_LIST_VM_LIMIT = common.MAX_LIST_VMS_LIMIT;
 var DEFAULT_LIST_VM_OFFSET = 0;
 
 function validAction(action) {
-    return VALID_VM_ACTIONS.indexOf(action) != -1;
+    return VALID_VM_ACTIONS.indexOf(action) !== -1;
 }
 
 
@@ -62,7 +62,8 @@ function renderVms(req, res, next) {
 
     if (!req.query.fields) {
         res.send(200, req.vms || req.vm);
-        return next();
+        next();
+        return;
     }
 
     var moray = req.app.moray;
@@ -95,7 +96,7 @@ function renderVms(req, res, next) {
     }
 
     fields = fields.filter(function (elem, index) {
-        return (index == fields.indexOf(elem));
+        return (index === fields.indexOf(elem));
     });
 
     // This function is used to return a response from either GetVm or ListVms
@@ -108,7 +109,8 @@ function renderVms(req, res, next) {
     }
 
     if (!req.vms) {
-        return renderSingleVm(req.vm, respond);
+        renderSingleVm(req.vm, respond);
+        return;
     }
 
     // Expensive operation: if async fields are requested there is a moray
@@ -139,15 +141,18 @@ function renderVms(req, res, next) {
                 if (asyncFields[field]) {
                     asyncFields[field].call(moray, uuid, function (err, obj) {
                         if (err) {
-                            return cb(err);
+                            cb(err);
+                            return;
                         }
 
                         vm[field] = obj;
-                        return cb();
+                        cb();
+                        return;
                     });
                 } else {
                     vm[field] = fullVm[field];
-                    return cb();
+                    cb();
+                    return;
                 }
             },
             inputs: fields
@@ -167,7 +172,8 @@ function preFilterVms(req, res, next) {
     var error, message;
 
     if (!req.query.role_tags) {
-        return next();
+        next();
+        return;
     }
 
     var roleTags = req.query.role_tags.split(',');
@@ -176,8 +182,8 @@ function preFilterVms(req, res, next) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
             error = [ errors.invalidUuidErr('role_tags', message) ];
-            return next(new errors.ValidationFailedError(
-                        'Invalid Role Tags', error));
+            next(new errors.ValidationFailedError('Invalid Role Tags', error));
+            return;
         }
     });
 
@@ -350,7 +356,7 @@ function getVmProc(req, res, next) {
 function getVm(req, res, next) {
     req.log.trace({ vm_uuid: req.params.uuid }, 'GetVm start');
 
-    if (req.params.sync && req.params.sync == 'true') {
+    if (req.params.sync && req.params.sync === 'true') {
         _getVmSync(req, next);
         return;
     } else {
@@ -384,14 +390,15 @@ function handleUpdateVMResponse(req, res, next, juuid) {
         };
         common.waitForJob(opts, function (error) {
             if (error) {
-                return next(error);
+                next(error);
+                return;
             }
             res.send(202, { vm_uuid: req.vm.uuid, job_uuid: juuid });
-            return next();
+            next();
         });
     } else {
         res.send(202, { vm_uuid: req.vm.uuid, job_uuid: juuid });
-        return next();
+        next();
     }
 }
 
@@ -512,8 +519,8 @@ function startVm(req, res, next) {
             req.params.idempotent = true;
         } else {
             var error = [ errors.invalidParamErr('idempotent') ];
-            return next(new errors.ValidationFailedError('Invalid Parameters',
-                error));
+            next(new errors.ValidationFailedError('Invalid Parameters', error));
+            return;
         }
     }
 
@@ -541,8 +548,8 @@ function stopVm(req, res, next) {
             req.params.idempotent = true;
         } else {
             var error = [ errors.invalidParamErr('idempotent') ];
-            return next(new errors.ValidationFailedError('Invalid Parameters',
-                error));
+            next(new errors.ValidationFailedError('Invalid Parameters', error));
+            return;
         }
     }
 
@@ -586,8 +593,8 @@ function killVm(req, res, next) {
     if (req.params.signal) {
         if (valid_signals.indexOf(req.params.signal) === -1) {
             error = [ errors.invalidParamErr('signal') ];
-            return next(new errors.ValidationFailedError('Invalid Parameters',
-                error));
+            next(new errors.ValidationFailedError('Invalid Parameters', error));
+            return;
         }
     }
 
@@ -598,8 +605,8 @@ function killVm(req, res, next) {
             req.params.idempotent = true;
         } else {
             error = [ errors.invalidParamErr('idempotent') ];
-            return next(new errors.ValidationFailedError('Invalid Parameters',
-                error));
+            next(new errors.ValidationFailedError('Invalid Parameters', error));
+            return;
         }
     }
 
@@ -627,8 +634,8 @@ function rebootVm(req, res, next) {
             req.params.idempotent = true;
         } else {
             var error = [ errors.invalidParamErr('idempotent') ];
-            return next(new errors.ValidationFailedError('Invalid Parameters',
-                error));
+            next(new errors.ValidationFailedError('Invalid Parameters', error));
+            return;
         }
     }
 
@@ -652,20 +659,21 @@ function reprovisionVm(req, res, next) {
     var vm = req.vm;
 
     if (['joyent', 'joyent-minimal', 'lx'].indexOf(vm.brand) === -1) {
-        return next(new errors.BrandNotSupportedError(
+        next(new errors.BrandNotSupportedError(
             'VM \'brand\' does not support reprovision'));
+        return;
     }
 
     if (!req.params.image_uuid) {
         error = [ errors.missingParamErr('image_uuid') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     if (!common.validUUID(req.params.image_uuid)) {
         error = [ errors.invalidUuidErr('image_uuid') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     req.app.wfapi.createReprovisionJob(req, function (err, juuid) {
@@ -699,7 +707,7 @@ function changeVm(req, res, next) {
         // work around a mid-2018 to early-2019 VM.js platform bug, which causes
         // resize jobs to fail on VMs with no tmpfs, even when the actual VM
         // successfully resized
-        if (params.tmpfs == undefined && req.vm.tmpfs === 0) {
+        if (params.tmpfs === undefined && req.vm.tmpfs === 0) {
             req.log.debug('changeVm set param.tmpfs to 0 since vm.tmpfs is 0');
             params.tmpfs = 0;
         }
@@ -731,7 +739,8 @@ function loadNicsByMac(req, cb) {
     function getNicFromMac(mac, next) {
         napi.getNic(mac, function getNic(err, nic) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
 
             req.add_nics.push(nic);
@@ -814,7 +823,8 @@ function updateNics(req, res, next) {
         common.validateNics(req.vm, req.params);
         req.app.wfapi.createUpdateNicsJob(req, req.params.nics, onUpdateJob);
     } catch (err) {
-        return next(err);
+        next(err);
+        return;
     }
 
     function onUpdateJob(err, juuid) {
@@ -838,7 +848,8 @@ function removeNics(req, res, next) {
         common.validateMacs(req.params);
         req.app.wfapi.createRemoveNicsJob(req, req.params.macs, onRemoveNics);
     } catch (err) {
-        return next(err);
+        next(err);
+        return;
     }
 
     function onRemoveNics(err, juuid) {
@@ -870,8 +881,9 @@ function createDisk(req, res, next) {
         if (!common.validUUID(diskUuid)) {
             var msg = diskUuid + ' is not a UUID';
             paramErr = [ errors.invalidUuidErr('disk_uuid', msg) ];
-            return next(new errors.ValidationFailedError(
-                        'Invalid disk_uuid', paramErr));
+            next(new errors.ValidationFailedError('Invalid disk_uuid',
+                paramErr));
+            return;
         }
 
         found = vm.disks.filter(function matchUuid(disk) {
@@ -882,7 +894,7 @@ function createDisk(req, res, next) {
             paramErr = [ errors.invalidParamErr('disk_uuid',
                 'Already in use') ];
             next(new errors.ValidationFailedError('Invalid Parameters',
-                 paramErr));
+                paramErr));
             return;
         }
     }
@@ -927,12 +939,22 @@ function createDisk(req, res, next) {
         return acc + disk.size;
     }, 0);
 
-    if (size !== 'remaining' &&
-               currentAggrSize + size > vm.flexible_disk_size) {
+    if (size === 'remaining') {
+        size = vm.flexible_disk_size - currentAggrSize;
+    }
+
+    if (currentAggrSize + size > vm.flexible_disk_size) {
         next(new errors.InsufficientDiskSpaceError());
         return;
     }
 
+    if (size <= 0) {
+        paramErr = [ errors.invalidParamErr('size',
+            'Must be greater than zero') ];
+        next(new errors.ValidationFailedError('Invalid Parameters', paramErr));
+        return;
+    }
+
     var args = {
         subtask: 'create_disk',
         add_disks: [ {
@@ -1153,16 +1175,17 @@ function createRoleTags(req, cb) {
     if (!Array.isArray(roleTags) || Object.keys(roleTags).length === 0) {
         message = 'Must be an array of UUIDs';
         error = [ errors.invalidParamErr('role_tags', message) ];
-        return cb(new errors.ValidationFailedError(
-                    'Invalid VM parameters', error));
+        cb(new errors.ValidationFailedError('Invalid VM parameters', error));
+        return;
     }
 
     roleTags.forEach(function (roleTag) {
         if (!common.validUUID(roleTag)) {
             message = roleTag + ' is not a UUID';
             error = [ errors.invalidUuidErr('role_tags', message) ];
-            return cb(new errors.ValidationFailedError(
-                        'Invalid VM parameters', error));
+            cb(new errors.ValidationFailedError('Invalid VM parameters',
+                error));
+            return;
         }
     });
 
@@ -1529,7 +1552,7 @@ function provisionNics(req, cb) {
         assert.ok(!networks || networks.length === 0);
         loadNicsByMac(req, cb);
     } else if (networks && networks.length > 0) {
-        assert.ok(!macs || macs.length == 0);
+        assert.ok(!macs || macs.length === 0);
         provisionNetNics(req, cb);
     } else {
         var paramerr = [ errors.missingParamErr('missing networks or macs') ];
@@ -1570,7 +1593,7 @@ function cleanupNics(req, cb) {
     vasync.forEachParallel({
         func: deleteNic,
         inputs: nics
-    }, function (err, results) {
+    }, function () {
         // We ignore all errors in this case and let the caller
         // return the original error
         cb();
@@ -1668,7 +1691,8 @@ function allocateServer(req, callback) {
         var allocationTicket = req.allocationTicket;
 
         if (allocationTicket.status === 'active') {
-            return next();
+            next();
+            return;
         }
 
         cnapi.waitlistTicketWait(allocationTicket.uuid, next);
@@ -1728,7 +1752,7 @@ function allocateServer(req, callback) {
         req.log.info({ dapiPayload: payload }, 'Payload sent to DAPI');
 
         cnapi_json.post('/allocate', payload,
-            function afterAllocate(err, areq, res, body) {
+            function afterAllocate(err, _req, res, body) {
 
             if (err) {
                 next(err);
@@ -1876,7 +1900,7 @@ function allocateServer(req, callback) {
                     refreshVmOnError,
                     releaseVMTicket,
                     releaseAllocationTicket
-            ]}, function (err2, res2) {
+            ]}, function () {
                 // Ignore errors from clean up.
                 callback(err);
             });
@@ -2039,7 +2063,8 @@ function getNicTagReqs(req, next) {
     var filteredNetworks = req.filteredNetworks;
 
     if (req.params.macs && !networks) {
-        return next();
+        next();
+        return;
     }
 
     req.nicTagReqs = [];
@@ -2108,7 +2133,8 @@ function createVm(req, res, next) {
     function validateCreateVmParams(_, done) {
         common.validateCreateVmParams(req.app, req.params, function (err) {
             if (err) {
-                return done(err);
+                done(err);
+                return;
             }
 
             common.setDefaultValues(req.params, {config: req.app.options});
@@ -2117,9 +2143,9 @@ function createVm(req, res, next) {
 
             if (sync && ['true', 'false'].indexOf(sync) === -1) {
                 var error = [ errors.invalidParamErr('sync') ];
-                return done(new errors.ValidationFailedError('Invalid' +
-                    ' Parameters',
+                done(new errors.ValidationFailedError('Invalid Parameters',
                     error));
+                return;
             } else {
                 req.params.sync = (sync === 'true' ? true : false);
             }
@@ -2245,7 +2271,8 @@ function createVm(req, res, next) {
         } else {
             createRoleTags(req, function (err) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 req.app.wfapi.createProvisionJob(req, onProvisionJob);
             });
@@ -2254,7 +2281,8 @@ function createVm(req, res, next) {
 
     function rollbackRoleTags(err) {
         if (req.params.role_tags === undefined) {
-            return next(err);
+            next(err);
+            return;
         }
 
         req.app.moray.delVmRoleTags(req.params.uuid, function (morayErr) {
@@ -2264,7 +2292,8 @@ function createVm(req, res, next) {
                 req.log.error({ err: morayErr, vm_uuid: req.params.uuid },
                     'Error deleting role_tags for VM %s', req.params.uuid);
             }
-            return next(err);
+            next(err);
+            return;
         });
     }
 
@@ -2335,7 +2364,8 @@ function createSnapshot(req, res, next) {
     canSnap = canSnapshot(vm);
     if (util.isError(canSnap)) {
         // can't snapshot, canSnap is an error telling us why
-        return next(canSnap);
+        next(canSnap);
+        return;
     }
 
     req.app.wfapi.createSnapshotJob(req, function (err, juuid) {
@@ -2420,20 +2450,20 @@ function putVms(req, res, next) {
 
     if (!req.query.server_uuid) {
         error = [ errors.missingParamErr('server_uuid') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     if (!common.validUUID(req.query.server_uuid)) {
         error = [ errors.invalidUuidErr('server_uuid') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     if (!req.params.vms) {
         error = [ errors.missingParamErr('vms') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     // TODO: It is broken that we don't check for deleted VMs when this happens
@@ -2441,7 +2471,6 @@ function putVms(req, res, next) {
         func: function putOneVm(uuid, cb) {
             var vm = common.translateVm(req.params.vms[uuid], false);
             var oldVm = req.vms[uuid] || {};
-
             req.app.moray.putVm(uuid, vm, oldVm, cb);
         },
         inputs: Object.keys(req.params.vms)
@@ -2466,8 +2495,8 @@ function putVm(req, res, next) {
 
     if (!common.validUUID(req.params.uuid)) {
         var error = [ errors.invalidUuidErr('uuid') ];
-        return next(new errors.ValidationFailedError('Invalid Parameters',
-            error));
+        next(new errors.ValidationFailedError('Invalid Parameters', error));
+        return;
     }
 
     // Parse whatever is needed before putting a raw object from vm-agent
@@ -2476,8 +2505,7 @@ function putVm(req, res, next) {
     var oldVm = req.vm || {};
 
     if (vm.state === 'destroyed') {
-        req.app.moray.markAsDestroyed(vm,
-            function vmDestroyed(err, destroyedVm) {
+        req.app.moray.markAsDestroyed(vm, function vmDestroyed(err) {
                 if (err) {
                     return next(err);
                 }
@@ -2560,7 +2588,8 @@ function _getVmSync(req, next) {
 
     function onGetVm(err, vm) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         if (vm) {
@@ -2569,21 +2598,23 @@ function _getVmSync(req, next) {
                 if (putErr) {
                     req.log.error({ err: putErr, uuid: newVm.uuid },
                         'Error storing VM on moray');
-                    return next(putErr);
+                    next(putErr);
+                    return;
 
                 }
                 req.log.debug('VM object %s updated in moray', newVm.uuid);
-                return next();
+                next();
             });
 
         } else {
             req.app.moray.markAsDestroyed(req.vm, function (markErr, modVm) {
                 if (markErr) {
-                    return next(markErr);
+                    next(markErr);
+                    return;
                 }
 
                 req.vm = modVm;
-                return next();
+                next();
             });
         }
     }
diff --git a/test/vms.disks.test.js b/test/vms.disks.test.js
index cbed70f..aace437 100644
--- a/test/vms.disks.test.js
+++ b/test/vms.disks.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var jsprim = require('jsprim');
@@ -149,7 +149,7 @@ exports.attempt_to_add_disk = function attempt_to_add_disk(t) {
     var path = '/vms/' + VM_UUID + '?action=create_disk';
     var opts = { size: 1536 };
 
-    CLIENT.post(path, opts, function postCb(err, req, res, job) {
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
         t.ok(err, 'err');
         t.equal(err.name, 'VmWithoutFlexibleDiskSizeError');
         t.done();
@@ -167,18 +167,50 @@ exports.initialize_flexible_disk_vm = function initialize_flexible_disk_vm(t) {
     createVm(t, opts);
 };
 
+exports.add_disk_invalid_size = function add_disk_invalid_size(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = { size: 'not-remaining' };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError');
+        t.done();
+    });
+};
 
 exports.add_too_large_disk = function add_too_large_disk(t) {
     var path = '/vms/' + VM_UUID + '?action=create_disk';
     var opts = { size: 1536 };
 
-    CLIENT.post(path, opts, function postCb(err, req, res, job) {
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
         t.ok(err, 'err');
         t.equal(err.name, 'InsufficientDiskSpaceError');
         t.done();
     });
 };
 
+exports.add_zero_size_disk = function add_zero_size_disk(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = { size: 0 };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError');
+        t.done();
+    });
+};
+
+
+exports.add_negative_size_disk = function add_negative_size_disk(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = { size: -1530 };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError');
+        t.done();
+    });
+};
 
 exports.add_disk = function add_disk(t) {
     var path = '/vms/' + VM_UUID + '?action=create_disk';
@@ -226,7 +258,7 @@ exports.add_additional_too_much_disk = function add_too_much_disk(t) {
     var path = '/vms/' + VM_UUID + '?action=create_disk';
     var opts = { size: 128 };
 
-    CLIENT.post(path, opts, function postCb(err, req, res, job) {
+    CLIENT.post(path, opts, function postCb(err, req, res, _job) {
         t.ok(err, 'err');
         t.equal(err.name, 'InsufficientDiskSpaceError');
         t.done();
@@ -336,7 +368,7 @@ exports.resize_disk_up_too_far = function resize_disk_up_too_far(t) {
         size: 1536
     };
 
-    CLIENT.post(path, opts, function postCb(err, req, res, body) {
+    CLIENT.post(path, opts, function postCb(err, req, res, _body) {
         t.ok(err, 'err');
         t.equal(err.name, 'InsufficientDiskSpaceError');
         t.done();
@@ -499,7 +531,6 @@ function add_disk_with_existing_uuid(t) {
 
     CLIENT.post(path, opts, function postCb(err, req, res, body) {
         t.ok(err, 'err');
-
         t.equal(err.name, 'ValidationFailedError', 'err.name');
         t.equal(body.errors[0].field, 'disk_uuid', 'field');
         t.equal(body.errors[0].message, 'Already in use', 'message');
@@ -510,3 +541,87 @@ function add_disk_with_existing_uuid(t) {
 
 
 exports.destroy_flexible_disk_vm = deleteVm;
+
+
+exports.init_other_flexible_disk_vm = function init_other_flexible_disk_vm(t) {
+    var opts = jsprim.deepCopy(VM_OPTS);
+    opts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    opts.flexible_disk_size = 11264;
+    createVm(t, opts);
+};
+
+
+exports.add_disk_remaining_size = function add_disk_remaining_size(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = { size: 'remaining' };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, job) {
+        common.ifError(t, err, 'err');
+
+        t.ok(job, 'job');
+        t.ok(job.job_uuid, 'job.job_uuid');
+
+        var jobPath = '/jobs/' + job.job_uuid;
+        waitForValue(jobPath, 'execution', 'succeeded', {
+            client: CLIENT
+        }, function waitForValueCb(err2) {
+            common.ifError(t, err2, 'err2');
+            t.done();
+        });
+    });
+};
+
+
+exports.destroy_other_flexible_disk_vm = deleteVm;
+
+
+exports.init_vm_with_two_remaining_disks =
+    function init_vm_with_two_remaining_disks(t) {
+    var vmOpts = jsprim.deepCopy(VM_OPTS);
+    vmOpts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    vmOpts.flexible_disk_size = 11264;
+
+    vmOpts.disks.push({size: 'remaining'});
+    vmOpts.disks.push({size: 'remaining'});
+
+    var opts = createOpts('/vms', vmOpts);
+    CLIENT.post(opts, vmOpts, function postCb(err, req, res) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.done();
+    });
+};
+
+
+exports.init_vm_with_zero_size_disk =
+    function init_vm_with_zero_size_disk(t) {
+    var vmOpts = jsprim.deepCopy(VM_OPTS);
+    vmOpts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    vmOpts.flexible_disk_size = 11264;
+
+    vmOpts.disks.push({size: 0});
+
+    var opts = createOpts('/vms', vmOpts);
+    CLIENT.post(opts, vmOpts, function postCb(err, req, res) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.done();
+    });
+};
+
+
+exports.init_vm_with_negative_size_disk =
+    function init_vm_with_negative_size_disk(t) {
+    var vmOpts = jsprim.deepCopy(VM_OPTS);
+    vmOpts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    vmOpts.flexible_disk_size = 11264;
+
+    vmOpts.disks.push({size: -1024});
+
+    var opts = createOpts('/vms', vmOpts);
+    CLIENT.post(opts, vmOpts, function postCb(err, req, res) {
+        t.ok(err, 'err');
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.done();
+    });
+};
-- 
2.21.0

