From 01d496730462b27b41d38b6e3cd0c685f09cfb05 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 20 Feb 2018 14:06:39 -0800
Subject: [PATCH] TRITON-126 add vmapi support for bhyve Reviewed by: Trent
 Mick <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 docs/index.md               | 42 ++++++++++++++++++-------------------
 lib/common/validation.js    | 39 +++++++++++++++++++---------------
 lib/common/vm-common.js     |  6 +++---
 lib/endpoints/vms.js        |  2 +-
 lib/workflows/job-common.js |  6 ++++--
 lib/workflows/provision.js  |  6 +++---
 package.json                |  2 +-
 test/vms.list.test.js       | 10 ++++-----
 8 files changed, 60 insertions(+), 53 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index a9b0987..5d4e928 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -44,7 +44,7 @@ update time.
 | alias                    | String                        | VM alias (max length 189 chars, and must match `/^[a-zA-Z0-9][a-zA-Z0-9\_\.\-]*$/`)                                                                                                                                       | Yes                 | Yes    | Yes    |
 | autoboot                 | Boolean                       | Controls whether or not a VM is booted when the system is rebooted.                                                                                                                                                       | Yes                 | Yes    | Yes    |
 | billing_id               | UUID                          | UUID of the PAPI package associated with this VM                                                                                                                                                                          | Yes                 | Yes    | Yes    |
-| brand                    | String                        | Brand of the VM (joyent, joyent-minimal, kvm or sngl)                                                                                                                                                                     | Yes                 | Yes    | No     |
+| brand                    | String                        | Brand of the VM (joyent, joyent-minimal, bhyve or kvm)                                                                                                                                                                    | Yes                 | Yes    | No     |
 | cpu_cap                  | Number                        | CPU Cap                                                                                                                                                                                                                   | No                  | Yes    | Yes    |
 | cpu_shares               | Number                        | CPU Shares                                                                                                                                                                                                                | Yes                 | Yes    | Yes    |
 | create_timestamp         | Date                          | The time at which the VM was created in ISO 8601 format                                                                                                                                                                   | Yes                 | No     | No     |
@@ -482,25 +482,25 @@ Returns a list of VMs according the specified search filter.
 All inputs are optional. Inputs that are not listed below are invalid, and
 will result in a request error.
 
-| Param            | Type                                             | Description                                     |
-| ---------------- | ------------------------------------------------ | ----------------------------------------------- |
-| alias            | String                                           | VM Alias|
-| billing_id       | UUID                                             | UUID of the package the VM was created with     |
-| brand            | String                                           | Brand of the VM (joyent, joyent-minimal or kvm) |
-| create_timestamp | Unix Time in milliseconds or UTC ISO Date String | VM creation timestamp                           |
-| docker           | Boolean                                          | true if the VM is a docker VM, false otherwise  |
-| fields           | String (comma-separated values)                  | Specify which VM fields to return, see below    |
-| image_uuid       | UUID                                             | Image of the VM                                 |
-| internal_metadata| String                                           | VM internal metadata, [see below](#internal-metadata)
-| owner_uuid       | UUID                                             | VM Owner                                        |
-| package_name     | String                                           | DEPRECATED: use billing_id                      |
-| package_version  | String                                           | DEPRECATED: use billing_id                      |
-| uuid             | UUID                                             | VM uuid                                         |
-| ram              | Number                                           | Amount of memory of the VM                      |
-| server_uuid      | UUID                                             | Server where the VM lives                       |
-| state            | String                                           | running, stopped, active or destroyed           |
-| uuids            | String (comma-separated UUID values)             | List of VM UUIDs to match                       |
-| tag.key          | String                                           | VM tags, see below                              |
+| Param            | Type                                             | Description                                            |
+| ---------------- | ------------------------------------------------ | ------------------------------------------------------ |
+| alias            | String                                           | VM Alias                                               |
+| billing_id       | UUID                                             | UUID of the package the VM was created with            |
+| brand            | String                                           | Brand of the VM (joyent, joyent-minimal, bhyve or kvm) |
+| create_timestamp | Unix Time in milliseconds or UTC ISO Date String | VM creation timestamp                                  |
+| docker           | Boolean                                          | true if the VM is a docker VM, false otherwise         |
+| fields           | String (comma-separated values)                  | Specify which VM fields to return, see below           |
+| image_uuid       | UUID                                             | Image of the VM                                        |
+| internal_metadata| String                                           | VM internal metadata, [see below](#internal-metadata)  |
+| owner_uuid       | UUID                                             | VM Owner                                               |
+| package_name     | String                                           | DEPRECATED: use billing_id                             |
+| package_version  | String                                           | DEPRECATED: use billing_id                             |
+| uuid             | UUID                                             | VM uuid                                                |
+| ram              | Number                                           | Amount of memory of the VM                             |
+| server_uuid      | UUID                                             | Server where the VM lives                              |
+| state            | String                                           | running, stopped, active or destroyed                  |
+| uuids            | String (comma-separated UUID values)             | List of VM UUIDs to match                              |
+| tag.key          | String                                           | VM tags, see below                                     |
 
 ### Specifying VM Fields to Return
 
@@ -921,7 +921,7 @@ the same as a GET to /vms/:uuid, however some VM attributes might not be present
 | ----------- | ------ | -------------------------------------------------------------------------------------------------------- |
 | owner_uuid  | UUID   | VM Owner                                                                                                 |
 | networks*   | Array* | List of networks. See 'Specifying Networks for a VM' below.                                              |
-| brand       | String | 'joyent', 'joyent-minimal' or 'kvm'                                                                      |
+| brand       | String | 'joyent', 'joyent-minimal', 'bhvve' or 'kvm'                                                             |
 | ram*        | Number | VM RAM. Not required if billing_id is present                                                            |
 | billing_id* | UUID   | SDC Package UUID. Not required if at least ram is present. See 'Provisioning with an SDC Package' below. |
 
diff --git a/lib/common/validation.js b/lib/common/validation.js
index d6cb5f9..d990c16 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -51,11 +51,11 @@ var VOLUME_NAME_RE = /^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/;
 exports.MAX_LIST_VMS_LIMIT = MAX_LIST_VMS_LIMIT;
 
 var VALID_VM_BRANDS = [
+    'bhyve',
     'joyent-minimal',
     'joyent',
     'lx',
-    'kvm',
-    'sngl'
+    'kvm'
 ];
 
 var VALID_VM_STATES = [
@@ -1060,7 +1060,7 @@ function validatePackageValues(papi, params, errs, callback) {
         packageFields.forEach(function (field) {
             if (params[field] === undefined && pkg[field] !== undefined) {
                 if (field === 'quota') {
-                    if (params.brand === 'kvm') {
+                    if (['bhyve', 'kvm'].indexOf(params.brand) !== -1) {
                         params.quota = 10;
                     } else {
                         params.quota = Number(pkg.quota) / 1024;
@@ -1121,10 +1121,11 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
     });
 
     // when no package is passed, we want to validate presence of ram,
-    // max_physical_memory and disks (when kvm) at least
+    // max_physical_memory and disks (when kvm or bhyve) at least
     if (!params.billing_id) {
-        if (params.brand === 'kvm' && !params.ram) {
-            errs.push(errors.missingParamErr('ram', 'Is required for KVM'));
+        if (['bhyve', 'kvm'].indexOf(params.brand) !== -1 && !params.ram) {
+            errs.push(errors.missingParamErr('ram', 'Is required for ' +
+                params.brand));
         } else if (!params.max_physical_memory && !params.ram) {
             errs.push(errors.missingParamErr('ram'));
         }
@@ -1374,11 +1375,13 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
     // manually done
     params.subtask = getSubtask();
 
-    // Validate resize. Not allowed for KVM at the moment
-    if (params.subtask === 'resize' && vm.brand === 'kvm') {
-        errs.push(errors.invalidParamErr('brand', 'Cannot resize a KVM VM'));
-    }
+    // Validate resize. Not allowed for bhyve or kvm at the moment
+    if (params.subtask === 'resize' &&
+        ['bhyve', 'kvm'].indexOf(vm.brand) !== -1) {
 
+        errs.push(errors.invalidParamErr('brand', 'Cannot resize a ' +
+            vm.brand + ' VM'));
+    }
 
     // Async validations
     var asyncFns = [];
@@ -1388,7 +1391,9 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
     if (params.billing_id) {
         asyncFns.push(validatePackage);
     }
-    if (params.subtask === 'resize' && vm.brand !== 'kvm') {
+    if (params.subtask === 'resize' &&
+        ['bhyve', 'kvm'].indexOf(vm.brand) !== -1) {
+
         asyncFns.push(validateResize);
         asyncFns.push(validateCapacity);
     }
@@ -1926,7 +1931,7 @@ exports.validAlias = validAlias;
 
 
 /*
- * Validates if a vm brand is either joyent or kvm
+ * Validates that vm brand is one we know about.
  */
 function validBrand(brand) {
     return VALID_VM_BRANDS.indexOf(brand) != -1;
@@ -2146,7 +2151,7 @@ exports.validateMetadataNamespaces = validateMetadataNamespaces;
 
 
 /*
- * Validates that the disks for the KVM VM have a valid format
+ * Validates that the disks for the VM have a valid format
  */
 function validDisks(disks, errs) {
     var i;
@@ -2188,7 +2193,7 @@ function validDisks(disks, errs) {
  * and later on the main validation code will throw an exception if needed
  */
 function validateBrandParams(params, errs) {
-    if (params.brand === 'kvm') {
+    if (['bhyve', 'kvm'].indexOf(params.brand) !== -1) {
         if (!params.disks) {
             errs.push(errors.missingParamErr('disks'));
             return;
@@ -2448,8 +2453,8 @@ exports.setDefaultValues = function (params, options) {
         params.firewall_enabled = false;
     }
 
-    // Add additional values for KVM disks
-    if (params.brand === 'kvm') {
+    // Add additional values for bhyve or kvm disks
+    if (['bhyve', 'kvm'].indexOf(params.brand) !== -1) {
         console.log(params);
         params.disks[0].image_name = params.image.name;
         params.disks[0].image_size = params.image.image_size;
diff --git a/lib/common/vm-common.js b/lib/common/vm-common.js
index fbd2048..e08594f 100644
--- a/lib/common/vm-common.js
+++ b/lib/common/vm-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -180,7 +180,7 @@ function translateVm(obj, fullObject) {
         }
     });
 
-    if (obj.brand === 'kvm') {
+    if (['bhyve', 'kvm'].indexOf(obj.brand) !== -1) {
         vm.vcpus = obj.vcpus;
         vm.cpu_type = obj.cpu_type;
         vm.disks = obj.disks;
@@ -551,4 +551,4 @@ function internalMetadataToSearchArray(internalMetadata, options) {
     }
 
     return searchArray;
-};
\ No newline at end of file
+};
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index e74eb62..7437dcb 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -1468,7 +1468,7 @@ function createVm(req, res, next) {
  */
 function canSnapshot(vm) {
 
-    if (['joyent', 'joyent-minimal', 'sngl', 'lx'].indexOf(vm.brand) === -1) {
+    if (['joyent', 'joyent-minimal', 'lx'].indexOf(vm.brand) === -1) {
         return (new errors.BrandNotSupportedError(
             'snapshots are not supported for VMs of brand "' + vm.brand + '"'));
     }
diff --git a/lib/workflows/job-common.js b/lib/workflows/job-common.js
index d7018fb..8ae4dea 100644
--- a/lib/workflows/job-common.js
+++ b/lib/workflows/job-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -1330,7 +1330,9 @@ function acquireVMTicket(job, cb) {
             disks: job.params.disks
         };
 
-        if (job.params.brand === 'kvm' && job.params.image) {
+        if (['bhyve', 'kvm'].indexOf(job.params.brand) !== -1 &&
+            job.params.image) {
+
             newTicket.extra.image_size = job.params.image.image_size;
         }
     }
diff --git a/lib/workflows/provision.js b/lib/workflows/provision.js
index 7bd6c05..0818e0f 100644
--- a/lib/workflows/provision.js
+++ b/lib/workflows/provision.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -292,7 +292,7 @@ function preparePayload(job, cb) {
         payload['routes'] = routes;
     }
 
-    if (params['brand'] === 'kvm') {
+    if (['bhyve', 'kvm'].indexOf(params['brand']) !== -1) {
         payload.disks = params.disks;
 
         ['disk_driver', 'nic_driver', 'cpu_type'].forEach(function (field) {
@@ -371,7 +371,7 @@ function ensureImage(job, cb) {
 
     var ensurePayload = {};
 
-    if (job.params['brand'] === 'kvm') {
+    if (['bhyve', 'kvm'].indexOf(job.params['brand']) !== -1) {
         ensurePayload.image_uuid = job.params.disks[0].image_uuid;
     } else {
         ensurePayload.image_uuid = job.params.image_uuid;
diff --git a/package.json b/package.json
index 84cb587..496b1cb 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.2.0",
+  "version": "9.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/vms.list.test.js b/test/vms.list.test.js
index e8e532e..164041e 100644
--- a/test/vms.list.test.js
+++ b/test/vms.list.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -112,11 +112,11 @@ exports.list_param_valid_uuid = function (t) {
 };
 
 var VALID_VM_BRANDS = [
+    'bhyve',
+    'lx',
     'joyent-minimal',
     'joyent',
-    'lx',
-    'kvm',
-    'sngl'
+    'kvm'
 ];
 
 exports.list_param_valid_brands = function (t) {
@@ -537,4 +537,4 @@ exports.list_param_invalid_offset = function (t) {
 exports.close_moray_client = function (t) {
     morayClient.close();
     t.done();
-};
\ No newline at end of file
+};
-- 
2.21.0

