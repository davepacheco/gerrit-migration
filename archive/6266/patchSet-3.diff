commit 5920ac1490f94991ebb84c9c0ff866c9e906ea9b
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-05-20T14:34:50-07:00 (5 months ago)
    
    MANTA-4284 RBAC support for using resource paths

diff --git a/lib/auth.js b/lib/auth.js
index 0bf6b15..f2ab676 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -1062,6 +1062,11 @@ function storageContext(req, res, next) {
     resource.key = metadata.key || req.key;
     resource.roles = metadata.roles || [];
 
+    var uuidPrefix = '/' + req.owner.account.uuid;
+    assert.strictEqual(resource.key.indexOf(uuidPrefix), 0);
+    resource.path = '/' + req.owner.account.login +
+        resource.key.slice(uuidPrefix.length);
+
     req.authContext.resource = resource;
 
     /*
diff --git a/package.json b/package.json
index ea9ac88..dbacf73 100644
--- a/package.json
+++ b/package.json
@@ -32,7 +32,7 @@
         "libuuid": "0.1.2",
         "lru-cache": "4.1.5",
         "lstream": "0.0.4",
-        "mahi": "2.2.4",
+        "mahi": "2.3.0",
         "marlin": "git+https://github.com/joyent/manta-marlin.git#master",
         "mime": "1.2.11",
         "moray": "3.4.1",
diff --git a/test/ac.test.js b/test/ac.test.js
index d6efa91..83d3c4f 100644
--- a/test/ac.test.js
+++ b/test/ac.test.js
@@ -537,6 +537,100 @@ test('all-resource rules (tagged)', function (t) {
     });
 });
 
+/*
+ * Tests for scenarios around rules with explicit resource strings (support
+ * added with MANTA-4284).
+ */
+test('explicit resource rules', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor/muskie_test_glob_1', self.client.user);
+    var role = 'muskie_test_role_glob';
+    /* First, create a test object, with no role tags. */
+    writeObject(self.client, path, function (err) {
+        if (err) {
+            t.fail(err);
+            t.end();
+            return;
+        }
+        self.paths.push(path);
+
+        /*
+         * This should not work: we haven't activated the role and we have
+         * no default roles that are tagged on the object, so we have no
+         * right to read it.
+         */
+        self.userClient.info(path, function (err2) {
+            if (!err2) {
+                t.fail('error expected');
+                t.end();
+                return;
+            }
+
+            /*
+             * This should work, though: the "Can getobject /..." rule kicks
+             * in, even though this object isn't tagged.
+             */
+            self.userClient.info(path, {
+                headers: {
+                    'role': role
+                }
+            }, function (err4, info) {
+                if (err4) {
+                    t.fail(err4);
+                    t.end();
+                    return;
+                }
+                t.strictEqual(info.headers['role-tag'], undefined);
+                t.end();
+            });
+        });
+    });
+});
+
+test('explicit resource rules (denied)', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor/muskie_test_noglob', self.client.user);
+    var role = 'muskie_test_role_glob';
+    /* First, create a test object, with no role tags. */
+    writeObject(self.client, path, function (err) {
+        if (err) {
+            t.fail(err);
+            t.end();
+            return;
+        }
+        self.paths.push(path);
+
+        /*
+         * This should not work: we haven't activated the role and we have
+         * no default roles that are tagged on the object, so we have no
+         * right to read it.
+         */
+        self.userClient.info(path, function (err2) {
+            if (!err2) {
+                t.fail('error expected');
+                t.end();
+                return;
+            }
+
+            /*
+             * This should not work, either: the rule with the explicit
+             * resource on muskie_test_role_glob does not match the path.
+             */
+            self.userClient.info(path, {
+                headers: {
+                    'role': role
+                }
+            }, function (err4, info) {
+                if (!err4) {
+                    t.fail('error expected');
+                }
+                t.equal(err4.name, 'ForbiddenError');
+                t.end();
+            });
+        });
+    });
+});
+
 test('cross-account role access (denied)', function (t) {
     var self = this;
     var path = sprintf('/%s/stor', self.operClient.user);
diff --git a/test/acsetup.js b/test/acsetup.js
index b763d82..e6ef77e 100644
--- a/test/acsetup.js
+++ b/test/acsetup.js
@@ -18,6 +18,8 @@ var vasync = require('vasync');
 var sdcClient;
 var operSdcClient;
 
+var REGULAR_USER = process.env.MANTA_USER || 'admin';
+
 var USERS = [
     {
         login: 'muskie_test_user',
@@ -73,6 +75,12 @@ var POLICIES = [
             'Can getobject *',
             'Can putobject'
         ]
+    },
+    {
+        name: 'muskie_test_glob',
+        rules: [
+            'Can getobject /' + REGULAR_USER + '/stor/muskie_test_glob*'
+        ]
     }
 ];
 
@@ -122,6 +130,11 @@ var ROLES = [
         members: [ 'muskie_test_user' ],
         policies: [ 'muskie_test_star' ]
     },
+    {
+        name: 'muskie_test_role_glob',
+        members: [ 'muskie_test_user' ],
+        policies: [ 'muskie_test_glob' ]
+    },
     {
         name: 'muskie_test_role_all',
         members: [ 'muskie_test_user' ],
@@ -132,8 +145,6 @@ var ROLES = [
     }
 ];
 
-var REGULAR_USER = process.env.MANTA_USER || 'admin';
-
 var OPER_ROLES = [
     {
         name: 'muskie_test_role_xacct',
