From d5459de299fce144837aa9ed09d07074ef1f0dc1 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 10 May 2019 14:58:58 -0700
Subject: [PATCH] TRITON-1663 vmapi can accidentally return 200 and close the
 connection on some validation errors (part 1, fix two incorrect uses of
 invalidParamErr)

---
 lib/common/validation.js | 22 +++++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/lib/common/validation.js b/lib/common/validation.js
index 270b0e5..b3726fa 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -1048,11 +1048,20 @@ function safeBrandName(brandName) {
 exports._safeBrandName = safeBrandName;
 
 /*
- * Reused by Create/Update/Migrate for checking package values and populating
- * the request params when some values are not present. This function should
- * only be called when a request contains billing_id
+ * Validate that the given PAPI package (`params.billing_id`) is appropriate
+ * for the given provision `params`. Validation error items
+ * (i.e. for including in the "errors" array for an API error response per
+ * https://github.com/joyent/eng/blob/master/docs/index.md#error-handling)
+ * should be added to the `errs` array. If there is a error in processing,
+ * then `callback(err)`.
+ *
+ * Side-effects: This may also populate some package-related fields on
+ * `params` from the identified PAPI package.
  */
 function validatePackageValues(papi, params, errs, callback) {
+    assert.uuid(params.billing_id, 'params.billing_id');
+    assert.array(errs, 'errs');
+
     var packageFields = ['cpu_cap', 'max_lwps', 'max_physical_memory',
         'max_swap', 'quota', 'vcpus', 'zfs_io_priority'];
 
@@ -1071,13 +1080,12 @@ function validatePackageValues(papi, params, errs, callback) {
             return;
         }
 
-        // Check that the package is compatible with this brand
+        // Check that the package is compatible with this brand.
         if (pkg.brand !== undefined && pkg.brand !== params.brand) {
-            callback(errors.invalidParamErr('brand',
+            errs.push(errors.invalidParamErr('brand',
                 'Package requires brand "' + safeBrandName(pkg.brand) + '", ' +
                 'but brand "' + safeBrandName(params.brand) +
                 '" was specified'));
-            return;
         }
 
         // Allow for manually overriding package params from original
@@ -1114,7 +1122,7 @@ function validatePackageValues(papi, params, errs, callback) {
             if (pkg.fss !== undefined) {
                 params.cpu_shares = Math.floor(Number(pkg.fss));
                 if (isNaN(params.cpu_shares) || pkg.fss === '') {
-                    callback(errors.invalidParamErr('cpu_shares',
+                    errs.push(errors.invalidParamErr('cpu_shares',
                         'Package has invalid "fss" (cpu_shares) value'));
                     return;
                 }
-- 
2.21.0

