commit 3a87f3d6270cd478d9bd492c6ba698992d4f8ff9 (refs/changes/72/3972/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-05-20T16:54:36+02:00 (1 year, 5 months ago)
    
    TRITON-391 Get rid of sdcadm history
    Reviewed by: Marsell Kukuljevic <marsell@joyent.com>
    Approved by: Marsell Kukuljevic <marsell@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 0059cfe..38c148c 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.18.0
+
+- TRITON-391 Get rid of sdcadm history
+
 ## 1.17.4
 
 - TOOLS-1977 Modify `sdcadm post-setup ha-binder` to move insts to different servers
diff --git a/lib/cli/do_history.js b/lib/cli/do_history.js
deleted file mode 100644
index 677bb36..0000000
--- a/lib/cli/do_history.js
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2018, Joyent, Inc.
- */
-var errors = require('../errors');
-var common = require('../common');
-
-var tabula = require('tabula');
-
-var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
-
-/*
- * The 'sdcadm history' CLI subcommand.
- */
-
-function do_history(subcmd, opts, args, cb) {
-    var self = this;
-
-    if (opts.help) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    } else if (args.length > 1) {
-        cb(new errors.UsageError('too many args: ' + args));
-        return;
-    }
-
-    if (args.length === 1) {
-        var id = args[0];
-        if (!UUID_RE.test(id)) {
-            cb(new errors.UsageError('Invalid UUID: ' + id));
-            return;
-        }
-        self.sdcadm.history.getHistory(id, function getCb(err, hist) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            console.log(JSON.stringify(hist, common.safeCycles(), 4));
-            cb();
-            return;
-        });
-    }
-
-    /* JSSTYLED */
-    var columns = opts.o.trim().split(/\s*,\s*/g);
-    /* JSSTYLED */
-    var sort = opts.s.trim().split(/\s*,\s*/g);
-    var options = {};
-
-    if (opts.since) {
-        try {
-            options.since = new Date(opts.since.trim()).toISOString();
-        } catch (_e) {
-            cb(new errors.UsageError('Invalid Date: ' +
-                        opts.since.trim()));
-            return;
-        }
-    }
-
-    if (opts.until) {
-        try {
-            options.until = new Date(opts.until.trim()).toISOString();
-        } catch (_e1) {
-            cb(new errors.UsageError('Invalid Date: ' +
-                        opts.until.trim()));
-            return;
-        }
-    }
-
-    self.sdcadm.history.listHistory(options, function listCb(err, history) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (opts.json) {
-            console.log(JSON.stringify(history, common.safeCycles(), 4));
-        } else {
-            var validFieldsMap = {};
-            if (!history.length) {
-                cb();
-                return;
-            }
-            var rows = history.map(function (hst) {
-                var chgs;
-                // Only set changes value when it's in a known format:
-                if (hst.changes && Array.isArray(hst.changes)) {
-                    chgs = hst.changes.map(function (c) {
-                        if (!c.type || !c.service) {
-                            return ('');
-                        }
-                        return (c.type + '(' + c.service.name + ')');
-                    }).join(',');
-                }
-                var row = {
-                    uuid: hst.uuid || null,
-                    changes: chgs,
-                    started: (hst.started ?
-                        new Date(hst.started).toJSON() : null),
-                    finished: (hst.finished ?
-                        new Date(hst.finished).toJSON() : null),
-                    error: (hst.error ?
-                        (hst.error.message ?
-                         hst.error.message.split('\n', 1)[0] :
-                         hst.error) : null),
-                    user: hst.username || null
-                };
-
-                if (row.changes.length > 40) {
-                    row.changes = row.changes.substring(0, 40) + '...';
-                }
-
-                if (row.error && row.error.length > 40) {
-                    row.error = row.error.substring(0, 40) + '...';
-                }
-
-                return row;
-            });
-            rows.forEach(function (v) {
-                for (var k in v) {
-                    validFieldsMap[k] = true;
-                }
-            });
-            tabula(rows, {
-                skipHeader: opts.H,
-                columns: columns,
-                sort: sort,
-                validFields: Object.keys(validFieldsMap)
-            });
-        }
-        cb();
-    });
-}
-
-do_history.help = (
-    'History of sdcadm commands.\n' +
-    '\n' +
-    'The historical collection of sdcadm commands ran into the current\n' +
-    'SDC setup, searchable by execution time (when SAPI is available).\n' +
-    '\n' +
-    'Usage:\n' +
-    '     {{name}} history [<options>] [HISTORY-ITEM-UUID]\n' +
-    '\n' +
-    '{{options}}' +
-    '\n' +
-    'When HISTORY-ITEM-UUID is given, only that history item will\n' +
-    'be included using JSON format and all the other options will\n' +
-    'be ignored'
-);
-
-do_history.options = [
-    {
-        names: ['help', 'h'],
-        type: 'bool',
-        help: 'Show this help.'
-    },
-    {
-        names: ['json', 'j'],
-        type: 'bool',
-        help: 'Show history as JSON.'
-    },
-    {
-        names: ['H'],
-        type: 'bool',
-        help: 'Omit table header row.'
-    },
-    {
-        names: ['o'],
-        type: 'string',
-        default: 'uuid,user,started,finished,changes,error',
-        help: 'Specify fields (columns) to output.',
-        helpArg: 'field1,...'
-    },
-    {
-        names: ['s'],
-        type: 'string',
-        default: '-started,finished',
-        help: 'Sort on the given fields. Default is "-started,finished".',
-        helpArg: 'field1,...'
-    },
-    {
-        names: ['since'],
-        type: 'string',
-        help: 'Return only values since the given date. ISO 8601 Date String.'
-    },
-    {
-        names: ['until'],
-        type: 'string',
-        help: 'Return only values until the given date. ISO 8601 Date String.'
-    }
-];
-
-do_history.logToFile = false;
-
-// --- exports
-
-module.exports = {
-    do_history: do_history
-};
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index b7c3f80..aa81dc6 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -81,7 +81,6 @@ function updateAgents(options, callback) {
     var justDownload = options.justDownload;
     var skipLatestSymlink = options.skipLatestSymlink;
     var justUpdateSymlink = options.justUpdateSymlink;
-    var hist;
 
     function setImageToLatest(cb) {
         var filter = {
@@ -425,31 +424,6 @@ function updateAgents(options, callback) {
             });
         },
 
-        function saveChangesToHistory(_, next) {
-            if (justDownload || justUpdateSymlink) {
-                next();
-                return;
-            }
-            var change = {
-                service: {
-                    name: 'agentsshar'
-                },
-                type: 'update-service',
-                img: (image ? image : options.agentsshar)
-            };
-
-            sdcadm.history.saveHistory({
-                changes: [change]
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         steps.sapiEnsureAgentServices,
 
         function downloadAgentsshar(ctx, next) {
@@ -847,21 +821,11 @@ function updateAgents(options, callback) {
             callback(err);
             return;
         }
-
-        if (!hist) {
-            callback(err);
-        } else {
-            hist.error = err;
-            sdcadm.history.updateHistory(hist, function (histErr) {
-                if (err) {
-                    callback(err);
-                    return;
-                }
-                progress('Successfully updated agents (%s)',
+        if (!err) {
+            progress('Successfully updated agents (%s)',
                     common.humanDurationFromMs(Date.now() - startTime));
-                callback(histErr);
-            });
         }
+        callback(err);
     });
 }
 
diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 743e244..9e9bc24 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -74,9 +74,6 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
     var forceReinstall = opts.forceReinstall;
     var localVersion;
     var useFile = false;
-    // Used by sdcadm history:
-    var changes = [];
-    var hist;
     var sdcadm = self.sdcadm;
 
     function findTarballImageLatest(cb) {
@@ -499,38 +496,15 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
             });
         },
 
-        function saveHistory(_, next) {
-            if (justDownload) {
-                next();
-                return;
-            }
-            changes.push({
-                service: {
-                    name: 'gz-tools'
-                },
-                type: 'update-service',
-                img: (image ? image : opts.image)
-            });
-            sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         function downloadTarball(_, next) {
             if (filepath) {
                 progress('Using gz-tools tarball file %s', filepath);
                 next();
             } else {
                 if (image.name !== 'gz-tools') {
-                    callback(new errors.UsageError(
+                    next(new errors.UsageError(
                         'name of image by given uuid is not \'gz-tools\''));
+                    return;
                 }
                 filepath = format('%s/gz-tools-%s.tgz', localdir, image.uuid);
 
@@ -820,20 +794,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
             }
         }
 
-    ]}, function pipeCb(err) {
-        if (justDownload || !hist) {
-            callback(err);
-            return;
-        }
-
-        if (err) {
-            hist.error = err;
-        }
-
-        sdcadm.history.updateHistory(hist, function (err2) {
-            callback(err || err2);
-        });
-    });
+    ]}, callback);
 
 };
 
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index a1e7084..615d2bf 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -52,10 +52,6 @@ function do_update_other(subcmd, opts, args, cb) {
         return;
     }
 
-    // Used by history
-    var history;
-    var changes = [];
-
     // Helper functions
 
     function updateService(uuid, svcOpts, next) {
@@ -157,26 +153,6 @@ function do_update_other(subcmd, opts, args, cb) {
             });
         },
 
-        function saveChangesToHistory(ctx, next) {
-            ctx.svcs.forEach(function (svc) {
-                if (svc.type === 'vm') {
-                    changes.push({
-                        service: svc,
-                        type: 'update-service-cfg'
-                    });
-                }
-            });
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    return next(err);
-                }
-                history = hst;
-                return next();
-            });
-        },
-
         // Remove deprecated params.resolvers:
         function removeSdcAppResolvers(_, next) {
             if (!self.sdcadm.sdc.params.resolvers) {
@@ -884,25 +860,7 @@ function do_update_other(subcmd, opts, args, cb) {
             });
         }
 
-    ]}, function (err) {
-        if (!history) {
-            self.sdcadm.log.warn('History not set for update-other');
-            cb(err);
-            return;
-        }
-
-        if (err) {
-            history.error = err;
-        }
-        self.sdcadm.history.updateHistory(history, function (err2) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            log.debug('done update-other successfully');
-            cb(err2);
-        });
-    });
+    ]}, cb);
 }
 
 do_update_other.options = [
diff --git a/lib/cli/index.js b/lib/cli/index.js
index 9871d66..adf686d 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -91,7 +91,7 @@ util.inherits(CLI, Cmdln);
 CLI.prototype.init = function init(opts, args, callback) {
     var self = this;
 
-    // Generate a UUID we can use both for logs and sdcadm history:
+    // Generate a UUID we can use both logs:
     this.uuid = uuid();
     // Setup the logger.
     var handler = this.handlerFromSubcmd(args[0]);
@@ -464,8 +464,6 @@ CLI.prototype.do_channel.logToFile = true;
 CLI.prototype.do_default_fabric = defFabric.do_default_fabric;
 CLI.prototype.do_default_fabric.logToFile = true;
 
-CLI.prototype.do_history = require('./do_history').do_history;
-
 CLI.prototype.do_completion = require('./do_completion');
 
 
diff --git a/lib/history.js b/lib/history.js
deleted file mode 100644
index 468fc3b..0000000
--- a/lib/history.js
+++ /dev/null
@@ -1,546 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2018 Joyent, Inc.
- */
-/*
- * This file includes both, the `sdcadm history` command and the functions
- * required for history CRUD. Among others, this file is in charge of handling
- * SAPI (un)availability when trying to save an item into history in a way
- * that it should completely hide that to anything using the create/update
- * history methods.
- *
- */
-
-var fs = require('fs');
-var path = require('path');
-
-var mkdirp = require('mkdirp');
-var assert = require('assert-plus');
-var uuid = require('node-uuid');
-var vasync = require('vasync');
-
-var common = require('./common');
-var errors = require('./errors');
-
-var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-
-
-// --- History Class
-function History(opts) {
-    assert.object(opts, 'opts');
-    assert.object(opts.sdcadm, 'opts.sdcadm');
-    this.sdcadm = opts.sdcadm;
-}
-
-History.prototype.init = function (cb) {
-    var self = this;
-
-    // It will not hurt to make sure the history dir exists:
-    self.wrkDir = '/var/sdcadm/history';
-    mkdirp(self.wrkDir, function (err) {
-        if (err) {
-            cb(new errors.InternalError({
-                message: 'error creating history work dir: ' + self.wrkDir,
-                cause: err
-            }));
-            return;
-        }
-        cb();
-        return;
-    });
-};
-
-
-/*
- * Save history item to a file (mostly used to be able to deal with SAPI
- * downtimes). When an attempt to save a bogus history item is made, the
- * file will not be saved.
- */
-History.prototype._saveToFile = function _saveToFile(fname, history, cb) {
-    assert.object(history, 'history');
-
-    var self = this;
-
-    var s;
-    try {
-        s = JSON.stringify(history, common.safeCycles());
-    } catch (e) {
-        self.sdcadm.log.error({
-            err: e,
-            history: history
-        }, 'Error saving history to file');
-        cb(null);
-        return;
-    }
-
-    fs.writeFile(fname, s, {encoding: 'utf8'}, cb);
-};
-
-/*
- * Attempt to read history from the file given by `fname`
- *
- * In case of validation error when reading from that file, the file will
- * be removed so no future attempts or re-reading it will be made.
- */
-History.prototype._readFromFile = function _readFromFile(fname, cb) {
-    var self = this;
-
-    fs.readFile(fname, {
-        encoding: 'utf8'
-    }, function (err, data) {
-        if (err) {
-            cb(err);
-            return;
-        }
-        var history;
-        try {
-            history = JSON.parse(data);
-        } catch (e) {
-            self.sdcadm.log.error({err: e}, 'Error reading history from file');
-            cb(e);
-            return;
-        }
-
-        self._validateItem(history, function (err2) {
-            if (err2) {
-                self.sdcadm.log.error({err: err2}, 'Invalid history item');
-                fs.unlink(fname, function (fErr) {
-                    if (fErr) {
-                        self.sdcadm.log.error({
-                            err: fErr
-                        }, 'Error removing invalid history file');
-                    }
-                    cb(err2);
-                });
-            } else {
-                cb(null, history);
-            }
-        });
-
-    });
-};
-
-
-/*
- * Ensure that whatever we are trying to read from or save to a History file
- * contains only the expected history properties.
- */
-History.prototype._validateItem = function _validateItem(history, cb) {
-
-
-    if (!history || typeof (history) !== 'object') {
-        cb(new errors.ValidationError('history must be an object'));
-        return;
-    }
-
-    if (!history.changes || typeof (history.changes) !== 'object') {
-        cb(new errors.ValidationError('history.changes must be an object'));
-        return;
-    }
-
-    if (history.username) {
-        if (typeof (history.username) !== 'string') {
-            cb(new errors.ValidationError(
-                'history.username must be a string'));
-            return;
-        }
-    }
-
-    if (history.uuid) {
-        if (typeof (history.uuid) !== 'string') {
-            cb(new errors.ValidationError('history.uuid must be a string'));
-            return;
-        }
-        if (!UUID_RE.test(history.uuid)) {
-            cb(new errors.ValidationError('history.uuid is not a valid UUID'));
-            return;
-        }
-    }
-
-    if (history.started) {
-        var d  = new Date(history.started);
-        if (d.toJSON() === null) {
-            cb(new errors.ValidationError(
-                'history.started is not a valid date'));
-            return;
-        }
-    }
-
-    if (history.finished) {
-        var f  = new Date(history.finished);
-        if (f.toJSON() === null) {
-            cb(new errors.ValidationError(
-                'history.finished is not a valid date'));
-            return;
-        }
-    }
-
-    cb(null);
-};
-
-
-/*
- * Expects an object with, at least, a `changes` member. `started` and `uuid`
- * members will be added to the object when not present. Note that `uuid` must
- * be a valid UUID and `started` must be a valid Date representation accepted
- * by JavaScript's `new Date()` constructor.
- */
-History.prototype.saveHistory = function (history, cb) {
-    var self = this;
-
-    assert.object(history, 'history');
-    assert.object(history.changes, 'history.changes');
-    if (!history.uuid && self.sdcadm.uuid) {
-        history.uuid = self.sdcadm.uuid;
-    }
-
-    if (!history.username && self.sdcadm.username) {
-        history.username = self.sdcadm.username;
-    }
-
-    if (history.username) {
-        assert.string(history.username, 'history.username');
-    }
-
-    if (history.uuid) {
-        assert.string(history.uuid, 'history.uuid');
-        if (!UUID_RE.test(history.uuid)) {
-            self.sdcadm.log.error({err: new errors.ValidationError({
-                message: 'error validating history UUID',
-                cause: history.uuid + ' is not a valid UUID'
-            })});
-            cb();
-            return;
-        }
-    } else {
-        history.uuid = uuid();
-    }
-
-    if (history.started) {
-        var d  = new Date(history.started);
-        if (d.toJSON() === null) {
-            self.sdcadm.log.error({err: new errors.ValidationError({
-                message: 'error validating history start time',
-                cause: history.started + ' is not a valid date'
-            })});
-            cb();
-            return;
-        }
-        history.started = d.getTime();
-    } else {
-        history.started = new Date().getTime();
-    }
-
-    // Try to use SAPI first, on error of any type, save history to file:
-    self.sdcadm.sapi.addHistory(history, function (err, hist) {
-        if (err) {
-            self.sdcadm.log.info({
-                err: err
-            }, 'Error saving history to SAPI, saving to local file');
-
-            var fname = path.join(self.wrkDir, history.uuid + '.json');
-            self._saveToFile(fname, history, function (err2) {
-                if (err2) {
-                    self.sdcadm.log.error({err: new errors.InternalError({
-                        message: 'error saving file: ' + fname,
-                        cause: err2
-                    })});
-                    cb();
-                    return;
-                }
-                cb(null, history);
-                return;
-            });
-        }
-
-        self.sdcadm.log.debug({
-            history: hist
-        }, 'History saved to SAPI');
-
-        cb(null, history);
-    });
-
-};
-
-/*
- * Updates history object with the given `uuid` member, which is mandatory for
- * updates. If the `changes` member is provided, it'll be overriden from the
- * one created by `saveHistory`. A `finished` member will be added when not
- * present. Note that `finished` must be a valid Date representation accepted
- * by JavaScript's `new Date()` constructor.
- */
-History.prototype.updateHistory = function (history, cb) {
-    var self = this;
-
-    assert.object(history, 'history');
-    if (!history.uuid && self.sdcadm.uuid) {
-        history.uuid = self.sdcadm.uuid;
-    }
-    assert.string(history.uuid, 'history.uuid');
-
-    if (!history.username && self.sdcadm.username) {
-        history.username = self.sdcadm.username;
-    }
-
-    if (history.username) {
-        assert.string(history.username, 'history.username');
-    }
-
-    if (history.changes) {
-        assert.object(history.changes, 'history.changes');
-    }
-    if (history.finished) {
-        var d  = new Date(history.finished);
-        if (d.toJSON() === null) {
-            self.sdcadm.log.error({err: new errors.ValidationError({
-                message: 'error validating history finish time',
-                cause: history.finished + ' is not a valid date'
-            })});
-            cb();
-            return;
-        }
-        history.finished = d.getTime();
-    } else {
-        history.finished = new Date().getTime();
-    }
-
-    // Try to use SAPI first, on error of any type, save history to file:
-    self.sdcadm.sapi.updateHistory(history.uuid, history, function (err, hist) {
-        if (err) {
-            self.sdcadm.log.info({
-                err: err
-            }, 'Error saving history to SAPI, saving to local file');
-
-            var fname = path.join(self.wrkDir, history.uuid + '.json');
-
-            self._readFromFile(fname, function (err2, hist2) {
-                if (err2) {
-                    self.sdcadm.log.info({
-                        err: err2
-                    }, 'error reading file: ' + fname);
-                    // If there wasn't a previous file, let's just go with what
-                    // we have in memory and finish the record:
-                    hist2 = history;
-                } else {
-                    // Override anything already saved with the new values:
-                    Object.keys(history).forEach(function (k) {
-                        hist2[k] = history[k];
-                    });
-                }
-
-                self._saveToFile(fname, hist2, function (err3) {
-                    if (err3) {
-                        self.sdcadm.log.error({err: new errors.InternalError({
-                            message: 'error saving file: ' + fname,
-                            cause: err3
-                        })});
-                        cb();
-                        return;
-                    }
-                    cb(null, hist2);
-                    return;
-                });
-            });
-        }
-
-        // On success SAPI update, check if is there any pending history file
-        // from previous invocations and we need to catch up:
-        self.catchUp(function (err4) {
-            if (err4) {
-                self.sdcadm.log.info({
-                    err: err4
-                }, 'Error adding history to SAPI. Saved to local files.');
-            }
-            cb(null, hist);
-        });
-    });
-};
-
-
-History.prototype.getHistory = function (id, cb) {
-    var self = this;
-
-    // Try to use SAPI first, on error of any type, try to read from file:
-    self.sdcadm.sapi.getHistory(id, function (err2, hist2) {
-        if (err2) {
-            self.sdcadm.log.info({
-                err: err2
-            }, 'Error reading history from SAPI, trying local files');
-
-            var fname = path.join(self.wrkDir, id + '.json');
-            self._readFromFile(fname, function (err, hist) {
-                if (err) {
-                    cb(new errors.InternalError({
-                        message: 'error reading file: ' + fname,
-                        cause: err
-                    }));
-                    return;
-                }
-                cb(null, hist);
-                return;
-            });
-        }
-
-        cb(null, hist2);
-        return;
-    });
-
-};
-
-History.prototype.listHistory = function (opts, cb) {
-    var self = this;
-
-    self.sdcadm.sapi.listHistory(opts, function (err, history) {
-        if (err) {
-            // Only when the error is not an options error, try reading from
-            // file
-            self._readHistoryDir(function (files) {
-                history = [];
-                vasync.forEachPipeline({
-                    inputs: files,
-                    func: function _readHistoryFile(item, next) {
-                        var f = path.join(self.wrkDir, item);
-                        self._readFromFile(f, function (err3, hist) {
-                            if (err3) {
-                                next(err3);
-                                return;
-                            }
-                            history.push(hist);
-                            next();
-                        });
-                    }
-                }, function (err2, results) {
-                    if (err2) {
-                        cb(new errors.InternalError({
-                            message: 'error reading directory: ' + self.wrkDir,
-                            cause: err2
-                        }));
-                        return;
-                    }
-                    cb(null, history);
-                    return;
-                });
-            });
-
-        } else {
-            cb(null, history);
-            return;
-        }
-    });
-};
-
-
-History.prototype.catchUp = function (cb) {
-    var self = this;
-
-    self._readHistoryDir(function (files) {
-        if (files.length) {
-            vasync.forEachPipeline({
-                inputs: files,
-                func: function _postHistoryToSAPI(item, next) {
-                    var f = path.join(self.wrkDir, item);
-                    self._readFromFile(f, function (er, data) {
-                        if (er) {
-                            next(er);
-                            return;
-                        }
-
-                        // Avoid raising an error b/c no file contents:
-                        if (!data) {
-                            next();
-                            return;
-                        }
-
-                        self._getOrCreateOnSAPI(data, function (er2, _h) {
-                            if (er2) {
-                                self.sdcadm.log.info({
-                                    err: er2
-                                }, 'Error saving history from ' +
-                                    'local file to SAPI');
-                            }
-                            fs.unlink(f, function (er3) {
-                                if (er3) {
-                                    self.sdcadm.log.info({
-                                        err: er3
-                                    }, 'Error removing file: %s', f);
-                                }
-                                next();
-                                return;
-                            });
-                        });
-
-                    });
-                }
-            }, function catchUpPipeline(err, results) {
-                if (err) {
-                    self.sdcadm.log.error({
-                        err: err
-                    }, 'error saving history to SAPI');
-                }
-                cb(null);
-            });
-        } else {
-            cb(null);
-        }
-    });
-
-};
-
-History.prototype._readHistoryDir = function (cb) {
-    var self = this;
-
-    fs.readdir(self.wrkDir, function (err, files) {
-        if (err) {
-            cb(new errors.InternalError({
-                message: 'error reading directory: ' + self.wrkDir,
-                cause: err
-            }));
-            return;
-        }
-        cb(files);
-    });
-};
-
-
-History.prototype._getOrCreateOnSAPI = function (history, cb) {
-    var self = this;
-    assert.object(history, 'history');
-
-    if (!history.uuid && self.sdcadm.uuid) {
-        history.uuid = self.sdcadm.uuid;
-    }
-
-    self.sdcadm.sapi.getHistory(history.uuid, function (err2, hist2) {
-        if (err2) {
-            if (!history.started) {
-                history.started = new Date().getTime();
-            }
-            self.sdcadm.sapi.addHistory(history, function (err, hist) {
-                if (err) {
-                    self.sdcadm.log.info({
-                        err: err
-                    }, 'Error saving history to SAPI');
-                    cb(err);
-                    return;
-                }
-                cb(null, hist);
-                return;
-            });
-        } else {
-            cb(null, hist2);
-            return;
-        }
-    });
-};
-
-// --- exports
-
-module.exports = {
-    History: History
-};
-// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/platform.js b/lib/platform.js
index 1d67a9b..0959890 100644
--- a/lib/platform.js
+++ b/lib/platform.js
@@ -460,8 +460,6 @@ Platform.prototype.install = function install(opts, callback) {
     var filepath;
     var image;
     var progress = self.progress;
-    var changes = [];
-    var hist;
     var latest;
     // TOOLS-876: Keep track of when an error happened during downloads, in
     // order to avoid suggesting the user to re-run a bogus file
@@ -575,22 +573,13 @@ Platform.prototype.install = function install(opts, callback) {
         });
     }
 
-    function updateHistory(history, cb) {
-        if (!history) {
-            self.sdcadm.log.debug('History not set for platform install');
-            cb();
-            return;
-        }
-        self.sdcadm.history.updateHistory(history, cb);
-    }
-
     function cleanup(cb) {
         fs.unlink(filepath, function (err) {
             if (err) {
                 self.log.warn(err, 'unlinking %s', filepath);
             }
             progress('Installation complete');
-            updateHistory(hist, cb);
+            cb();
         });
     }
 
@@ -689,32 +678,6 @@ Platform.prototype.install = function install(opts, callback) {
             next();
         },
 
-        function saveChangesToHistory(_, next) {
-            var change = {
-                service: {
-                    name: 'platform'
-                },
-                type: 'install-platform'
-            };
-            if (filepath) {
-                change.file = filepath;
-            } else {
-                change.img = image;
-            }
-            changes.push(change);
-
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         function downloadImage(_, next) {
             if (filepath) {
                 progress(format('Using platform file %s', filepath));
@@ -788,9 +751,6 @@ Platform.prototype.install = function install(opts, callback) {
         }
     ]}, function pipelineCb(err) {
         if (err) {
-            if (hist) {
-                hist.error = err;
-            }
             progress('Error: %s', err.message);
             if (downloadError) {
                 progress('Please re-run `sdcadm platform install` with ' +
@@ -808,9 +768,7 @@ Platform.prototype.install = function install(opts, callback) {
                              '`sdcadm platform install %s`.', filepath);
                 }
             }
-            updateHistory(hist, function (_histErr) {
-                callback(err);
-            });
+            callback(err);
             return;
         }
 
@@ -823,7 +781,7 @@ Platform.prototype.install = function install(opts, callback) {
             progress('Installation complete');
         }
 
-        updateHistory(hist, callback);
+        callback();
         return;
     });
 };
@@ -838,9 +796,6 @@ function setDefaultBootPlatform(version, cb) {
         cb = version;
         version = 'latest';
     }
-    // Used by sdcadm history:
-    var changes = [];
-    var hist;
 
     vasync.pipeline({funcs: [
         function getBootParams(_, next) {
@@ -894,25 +849,7 @@ function setDefaultBootPlatform(version, cb) {
             });
             next();
         },
-        function saveChangesToHistory(_, next) {
-            changes.push({
-                service: {
-                    name: 'platform'
-                },
-                type: 'default-platform',
-                version: (latestPlatform ? latestPlatform : version)
-            });
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
+
         function setDefaultBootParams(_, next) {
             if (version === 'latest' && bootParams.platform !== 'latest') {
                 next();
@@ -931,19 +868,7 @@ function setDefaultBootPlatform(version, cb) {
                 next();
             });
         }
-    ]}, function pipeCb(err) {
-        if (!hist) {
-            self.sdcadm.log.warn('History not set for default platform');
-            cb(err);
-            return;
-        }
-        if (err) {
-            hist.error = err;
-        }
-        self.sdcadm.history.updateHistory(hist, function (err2) {
-            cb((err || err2), bootParams);
-        });
-    });
+    ]}, cb);
 };
 
 Platform.prototype.getDefaultBootPlatform =
@@ -1128,9 +1053,7 @@ Platform.prototype.assign = function assign(opts, callback) {
     var uuids = [];
     var headnode;
     var progress = self.progress;
-    // Used by sdcadm history:
-    var changes = [];
-    var hist;
+
     // Given we may have errors for some CNs, and not from some others, we
     // need to store errors and report at end:
     var errs = [];
@@ -1322,30 +1245,13 @@ Platform.prototype.assign = function assign(opts, callback) {
                 return;
             }
 
-            next();
-        },
-        function saveChangesToHistory(_, next) {
             uuids = assignServers.map(function (s) {
                 return (s.uuid);
             });
-            changes.push({
-                service: {
-                    name: 'platform'
-                },
-                type: 'assign-platform',
-                servers: uuids
-            });
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
+
+            next();
         },
+
         function assignPlatform(_, next) {
             function doAssignServerPlatform(server, nextServer) {
                 if (server.headnode) {
@@ -1412,17 +1318,7 @@ Platform.prototype.assign = function assign(opts, callback) {
         if (errs.length) {
             err = new errors.MultiError(errs);
         }
-        if (!hist) {
-            self.sdcadm.log.warn('History not set for platform assign');
-            callback(err);
-            return;
-        }
-        if (err) {
-            hist.error = err;
-        }
-        self.sdcadm.history.updateHistory(hist, function (err2) {
-            callback(err || err2);
-        });
+        callback(err);
     });
 };
 
@@ -1505,8 +1401,6 @@ Platform.prototype.remove = function remove(opts, cb) {
     assert.optionalBool(opts.yes, 'opts.yes');
     assert.arrayOfString(opts.remove, 'opts.remove');
 
-    var changes = [];
-    var hist;
     var keyInitiallyMounted;
 
     vasync.pipeline({funcs: [
@@ -1531,25 +1425,6 @@ Platform.prototype.remove = function remove(opts, cb) {
             });
         },
 
-        function saveChangesToHistory(_, next) {
-            changes.push({
-                service: {
-                    name: 'platform'
-                },
-                type: 'remove',
-                platforms: opts.remove
-            });
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (er4, hst) {
-                if (er4) {
-                    next(er4);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
         function isKeyMounted(_, next) {
             common.isUsbKeyMounted(self.sdcadm.log, function (err, mounted) {
                 if (err) {
@@ -1642,18 +1517,9 @@ Platform.prototype.remove = function remove(opts, cb) {
             self.createLatestLink(next);
         }
     ]}, function (err) {
-        if (!hist) {
-            self.sdcadm.log.warn('History not set for platform remove');
-            cb(err);
-            return;
-        }
-        if (err) {
-            hist.error = err;
-        }
-        p('Done.');
-        self.sdcadm.history.updateHistory(hist, function (err2) {
-            cb(err || err2);
-        });
+        var msg = err ? 'Done with errors.' : 'Done.';
+        p(msg);
+        cb(err);
     });
 };
 
diff --git a/lib/post-setup/cloudapi.js b/lib/post-setup/cloudapi.js
index 8b8cad6..008430e 100644
--- a/lib/post-setup/cloudapi.js
+++ b/lib/post-setup/cloudapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -34,8 +34,6 @@ function createCloudapiInstance(opts, callback) {
 
     var networks;
     var cloudapisvc;
-    var changes = [];
-    var img, history;
 
     // find cloudapi service, get service uuid
     // use sapi.createInstance to create the service
@@ -66,44 +64,6 @@ function createCloudapiInstance(opts, callback) {
                 next();
             });
         },
-        function (_, next) {
-            sdcadm.updates.listImages({
-                name: 'cloudapi'
-            }, function (err, images) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'updates'));
-                } else if (images && images.length) {
-                    img = images[images.length - 1]; // XXX presuming sorted
-                    next();
-                } else {
-                    next(new errors.UpdateError('no "cloudapi" image found'));
-                }
-            });
-        },
-        function (_, next) {
-            changes.push({
-                image: img,
-                service: cloudapisvc,
-                type: 'add-instance',
-                inst: {
-                    type: 'vm',
-                    alias: opts.alias,
-                    version: img.version,
-                    service: 'cloudapi',
-                    image: img.uuid
-                }
-            });
-            sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                history = hst;
-                next();
-            });
-        },
         function getHeadnode(ctx, next) {
             sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
@@ -130,12 +90,11 @@ function createCloudapiInstance(opts, callback) {
                     ]
                 }
             };
-            sapi.createInstance(cloudapisvc.uuid, cOpts, function (err, inst) {
+            sapi.createInstance(cloudapisvc.uuid, cOpts, function (err, _inst) {
                 if (err) {
                     next(new errors.SDCClientError(err, 'sapi'));
                     return;
                 }
-                changes[0].inst.zonename = changes[0].inst.uuid = inst.uuid;
                 next();
             });
         },
@@ -147,26 +106,10 @@ function createCloudapiInstance(opts, callback) {
             }, next);
         }
     ] }, function (err) {
-        if (!history) {
-            sdcadm.log.warn('History not set for post-setup cloudapi');
-            callback(err);
-            return;
-        }
-        history.changes = changes;
-        if (err) {
-            history.error = err;
+        if (!err) {
+            progress('cloudapi0 zone created');
         }
-        // No need to add `history.finished` here, History instance will do
-        sdcadm.history.updateHistory(history, function (err2) {
-            if (err) {
-                callback(err);
-            } else if (err2) {
-                callback(err2);
-            } else {
-                progress('cloudapi0 zone created');
-                callback();
-            }
-        });
+        callback(err);
     });
 
     function getNetworksAdminExternal(cb) {
diff --git a/lib/post-setup/ha-binder.js b/lib/post-setup/ha-binder.js
index 1edb3ba..83e127d 100644
--- a/lib/post-setup/ha-binder.js
+++ b/lib/post-setup/ha-binder.js
@@ -91,7 +91,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
     }
 
     var app = self.sdcadm.sdc;
-    var img, instances, history;
+    var img, instances;
     var vms;
     var existingVmsUUIDs = [];
     var newVms = [];
@@ -103,7 +103,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
     var remainingInstances = [];
     // Servers we will create instances on:
     var servers = [];
-    var changes = []; // used by history functions
+    var changes = [];
     var arg = {}; // to pass to shared.js functions
 
     var willCreateInsts = true;
@@ -343,8 +343,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
             next();
         },
 
-        // This is for merely informative purposes and in order to add our
-        // changes to history:
+        // This is for merely informative purposes:
         function getImage(_, next) {
             if (!willCreateInsts) {
                 next();
@@ -462,24 +461,6 @@ function do_ha_binder(subcmd, opts, args, cb) {
             });
         },
 
-        // Wait until after prompt Yes/No:
-        function saveChangesToHistory(_, next) {
-            if (changes.length === 0) {
-                next();
-                return;
-            }
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                history = hst;
-                next();
-            });
-        },
-
         function freezeManatee(ctx, next) {
             if (!willCreateInsts && !willRemoveInsts) {
                 next();
@@ -714,27 +695,12 @@ function do_ha_binder(subcmd, opts, args, cb) {
 
 
     ]}, function (err) {
-        // Add error to history in case the update execution failed:
+        var msg = 'ha-binder setup finished';
         if (err) {
-            if (!history) {
-                self.log.warn('History not set for post-setup ha-binder');
-                cb(err);
-                return;
-            }
-            history.error = err;
-        } else {
-            self.progress('ha-binder setup finished.');
-        }
-        if (!history) {
-            self.log.warn('History not set for post-setup ha-binder');
-            cb();
-            return;
+            msg += ' with errors';
         }
-        history.changes = changes;
-        // No need to add `history.finished` here, History instance will handle
-        self.sdcadm.history.updateHistory(history, function (err2) {
-            cb(err || err2);
-        });
+        self.progress(msg);
+        cb(err);
     });
 }
 
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index 6b5b592..f5e930a 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -147,9 +147,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
     var img;
     // The shard state when we begin the process
     var shardState;
-    // History, and the changes will add to history, depending on how many
-    // instances we have when runing the process:
-    var history;
+
     var changes = [];
     var newId;
     // Have manatee-adm version 2.1+
@@ -440,20 +438,6 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             });
         },
 
-        // Wait until after prompt Yes/No:
-        function saveChangesToHistory(_, next) {
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                history = hst;
-                next();
-            });
-        },
-
         function getShardState(_, next) {
             self.progress('Getting manatee shard state');
             shared.getShardState({
@@ -722,27 +706,10 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 }
             ]
         }, function (_pipeErr, results) {
-            // Add error to history in case the update execution failed:
-            if (err) {
-                if (!history) {
-                    self.log.warn('History not set for post-setup ha-manatee');
-                    cb(err);
-                    return;
-                }
-                history.error = err;
-            } else {
+            if (!err) {
                 self.progress('manatee-ha finished.');
             }
-            if (!history) {
-                self.log.warn('History not set for post-setup ha-manatee');
-                cb();
-                return;
-            }
-            history.changes = changes;
-            // No need to add `history.finished` here, History instance will do
-            self.sdcadm.history.updateHistory(history, function (err2, _hist2) {
-                cb(err || err2);
-            });
+            cb(err);
         });
     });
 }
diff --git a/lib/post-setup/underlay-nics.js b/lib/post-setup/underlay-nics.js
index 131c685..9df2310 100644
--- a/lib/post-setup/underlay-nics.js
+++ b/lib/post-setup/underlay-nics.js
@@ -40,15 +40,12 @@ UnderlayNics.prototype.execute = function (opts, cb) {
 
     var progress = opts.progress;
     var sdcadm = opts.sdcadm;
-    var log = opts.log;
 
     var MIN_VALID_NAPI_VERSION = '20150312';
     var img;
     var cns = [];
     var cns2Update = [];
-    // Used by sdcadm history:
-    var changes = [];
-    var hist;
+
     // Given we may have errors for some CNs, and not from some others, we
     // need to store errors and report at end:
     var errs = [];
@@ -272,32 +269,6 @@ UnderlayNics.prototype.execute = function (opts, cb) {
             existsQueue.close();
         },
 
-        function saveChangesToHistory(_, next) {
-            if (!cns2Update.length) {
-                next();
-                return;
-            }
-            changes.push({
-                service: {
-                    name: 'napi'
-                },
-                type: 'underlay-nics',
-                servers: cns,
-                network: opts.net_uuid
-            });
-
-            sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         function provisionNics(_, next) {
             if (!cns2Update.length) {
                 next();
@@ -331,26 +302,12 @@ UnderlayNics.prototype.execute = function (opts, cb) {
             err = new errors.MultiError(errs);
         }
 
-        if (!hist) {
-            log.debug('History not set for underlay-nics');
-            cb(err);
-            return;
-        }
-
         if (!cns2Update.length) {
             progress('All the provided CNs already had an underlay NIC' +
                     ' on the provided network');
-            cb(err);
-            return;
-        }
-
-        if (err) {
-            hist.error = err;
         }
 
-        sdcadm.history.updateHistory(hist, function (err2) {
-            cb(err || err2);
-        });
+        cb(err);
     });
 };
 
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 0730d96..3518cac 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -39,7 +39,6 @@ var errors = require('./errors');
 var lock = require('./locker').lock;
 var pkg = require('../package.json');
 var procedures = require('./procedures');
-var History = require('./history').History;
 
 var UA = format('%s/%s (node/%s; openssl/%s)', pkg.name, pkg.version,
         process.versions.node, process.versions.openssl);
@@ -92,8 +91,7 @@ function SdcAdm(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
 
-    // A unique UUID for this sdcadm run -- used for client req_id's below,
-    // and for sdcadm history entries.
+    // A unique UUID for this sdcadm run -- used for client req_id's below
     if (!options.uuid) {
         options.uuid = uuid();
     }
@@ -382,7 +380,7 @@ function SdcAdm(options) {
 }
 
 // This function defines the sdcadm properties which require async callbacks
-// to be used: 'config', 'history' and 'sdc' application.
+// to be used: 'config' and 'sdc' application.
 SdcAdm.prototype.init = function init(cb) {
     var self = this;
     common.loadConfig({log: self.log}, function (err, config) {
@@ -396,7 +394,6 @@ SdcAdm.prototype.init = function init(cb) {
             self.userAgent += ' server=' + self.config.serverUuid;
         }
 
-        self.history = new History({sdcadm: self});
         self.getApp({app: 'sdc'}, function (appErr, app) {
             if (appErr) {
                 // Couple known issues we can help operators with a friendly
@@ -412,7 +409,7 @@ SdcAdm.prototype.init = function init(cb) {
                 return;
             }
             self.sdc = app;
-            self.history.init(cb);
+            cb();
         });
     });
 };
@@ -2497,7 +2494,6 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
 
     var start = new Date();
     var wrkDir;
-    var hist;
 
     vasync.pipeline({funcs: [
         function checkReprovisionLock(_, next) {
@@ -2565,34 +2561,6 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
                 });
         },
 
-        function saveBeginningToHistory(_, next) {
-            if (options.dryRun || options.justImages) {
-                next();
-                return;
-            }
-            var obj = {
-                changes: plan.changes
-            };
-
-            if (options.uuid) {
-                obj.uuid = options.uuid;
-            }
-
-            if (options.dryRun) {
-                next();
-                return;
-            }
-
-            self.history.saveHistory(obj, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         function execProcedures(_, next) {
             if (options.dryRun) {
                 next();
@@ -2617,33 +2585,11 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
         }
 
     ]}, function (err) {
-        if (options.dryRun || options.justImages) {
-            cb(err);
-            return;
-        }
-
-        // Add error to history in case the update execution failed:
         if (err) {
             // TOOLS-879: sdcadm update should tell user about the error:
             progress('Update error: %r', err);
-            if (!hist) {
-                self.log.warn('History not saved for update');
-                cb(err);
-                return;
-            }
-
-            hist.error = err;
-        }
-
-        if (!hist) {
-            self.log.warn('History not saved for update');
-            cb();
-            return;
         }
-        // No need to add `history.finished` here, History instance will handle
-        self.history.updateHistory(hist, function (err2, _hist2) {
-            cb(err || err2);
-        });
+        cb(err);
     });
 };
 
@@ -2801,7 +2747,6 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
     var installerPath;
     var start;
     var wrkDir;
-    var hist;
     var channel;
     var changes = [
     {
@@ -2929,24 +2874,6 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
             });
         },
 
-        function saveChangesToHistory(_, next) {
-            if (!updateManifest || options.dryRun) {
-                next();
-                return;
-            }
-
-            self.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                hist = hst;
-                next();
-            });
-        },
-
         function downloadInstaller(_, next) {
             if (!updateManifest) {
                 next();
@@ -3058,22 +2985,7 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                 }
                 self.releaseLock({unlock: unlock}, next);
             },
-            function updateHist(_, next) {
-                if (!updateManifest || options.dryRun) {
-                    next();
-                    return;
-                }
-                if (!hist) {
-                    self.log.warn('History not set for self-update');
-                    next();
-                    return;
-                }
-                if (err) {
-                    hist.error = err;
-                }
-                // No need to add `history.finished` here:
-                self.history.updateHistory(hist, next);
-            },
+
             function noteCompletion(_, next) {
                 if (!updateManifest || err) {
                     next();
@@ -4320,10 +4232,6 @@ setupCommonExternalNics(opts, cb) {
     var doimgapi = true;
 
     var netexternal;
-    var changes = [];
-    var history;
-    var napisvc;
-
 
     function addExternaNicToZone(svcobj, subcb) {
         var addparams = {
@@ -4387,52 +4295,6 @@ setupCommonExternalNics(opts, cb) {
             });
         },
 
-        function (_, next) {
-            if (!doadminui && !doimgapi) {
-                next();
-                return;
-            }
-            self.sapi.listServices({ name: 'napi' }, function (err, svcs) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'sapi'));
-                    return;
-                }
-                if (svcs.length !== 1) {
-                    next(new Error(
-                        'expected 1 napi service, found %d', svcs.length));
-                    return;
-                }
-                napisvc = svcs[0];
-                next();
-            });
-        },
-
-        function (_, next) {
-            if (!doadminui && !doimgapi) {
-                next();
-                return;
-            }
-            changes.push({
-                service: napisvc,
-                type: 'add-nics',
-                inst: {
-                    network: netexternal.uuid,
-                    adminui: doadminui,
-                    imgapi: doimgapi
-                }
-            });
-            self.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                history = hst;
-                next();
-            });
-        },
-
         function (_, next) {
             if (!doadminui) {
                 progress('AdminUI already has an external nic');
@@ -4464,21 +4326,7 @@ setupCommonExternalNics(opts, cb) {
                 updateSvcParamsNetworks('imgapi', next);
             });
         }
-    ]}, function (err) {
-        if (!history) {
-            self.log.info(
-                'History not set for post-setup common-external-nics');
-            cb(err);
-            return;
-        }
-        history.changes = changes;
-        if (err) {
-            history.error = err;
-        }
-        self.history.updateHistory(history, function (err2, _hist2) {
-            cb(err || err2);
-        });
-    });
+    ]}, cb);
 };
 
 
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index 315d7f6..82458f1 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -12,7 +12,6 @@
 
 var assert = require('assert-plus');
 var fs = require('fs');
-var mod_uuid = require('node-uuid');
 var util = require('util');
 var vasync = require('vasync');
 
@@ -28,12 +27,6 @@ var DRY_RUN = false; // An off-switch for dev/testing.
  * (which currently is those in the agentsshar) -- with the exception of the
  * marlin agent.
  *
- * Note on history: If changes are made, this will add a SAPI history item.
- * However, because the current sdcadm `History` API isn't that convenient
- * for building up changes for a single history item, we will NOT use the
- * `sdcadm.uuid` for this run. Doing so can easily result in the this history
- * item getting overwritten by a separate `sdcadm.history.saveHistory`
- * during this same command. It would be good to improve this at some point.
  */
 function sapiEnsureAgentServices(arg, cb) {
     assert.object(arg, 'arg');
@@ -50,7 +43,6 @@ function sapiEnsureAgentServices(arg, cb) {
     // type=agent suport is there.
     var MIN_VALID_SAPI_VERSION = '20140703';
     var app = sdcadm.sdc;
-    var historyItem = null;
 
     var img;
     var agentNames = [
@@ -188,45 +180,6 @@ function sapiEnsureAgentServices(arg, cb) {
             }, next);
         },
 
-        function saveChangesToHistory(_, next) {
-            var changes = [];
-            newAgentServices.forEach(function (s) {
-                changes.push({
-                    service: {
-                        name: s,
-                        type: 'agent'
-                    },
-                    type: 'create-service'
-                });
-            });
-
-            updateAgentServices.forEach(function (s) {
-                changes.push({
-                    service: {
-                        name: s,
-                        type: 'agent'
-                    },
-                    type: 'update-service'
-                });
-            });
-
-            if (changes.length) {
-                sdcadm.history.saveHistory({
-                    uuid: mod_uuid.v4(),
-                    changes: changes
-                }, function (err, historyItem_) {
-                    if (err) {
-                        next(err);
-                        return;
-                    }
-                    historyItem = historyItem_;
-                    next();
-                });
-            } else {
-                next();
-            }
-        },
-
         /*
          * TOOLS-1716: We'll create agents w/o image_uuids first, in order
          * to workaround SAPI verification of local IMGAPI images when creating
@@ -289,18 +242,7 @@ function sapiEnsureAgentServices(arg, cb) {
                 }
             }, next);
         }
-    ]}, function (err) {
-        if (historyItem) {
-            if (err) {
-                historyItem.error = err;
-            }
-            sdcadm.history.updateHistory(historyItem, function (histErr) {
-                cb(err || histErr);
-            });
-        } else {
-            cb(err);
-        }
-    });
+    ]}, cb);
 }
 
 
diff --git a/package.json b/package.json
index 96badd4..55cd69c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.17.4",
+  "version": "1.18.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/history.test.js b/test/history.test.js
deleted file mode 100644
index f255f19..0000000
--- a/test/history.test.js
+++ /dev/null
@@ -1,266 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2018, Joyent, Inc.
- */
-
-
-var test = require('tape').test;
-var vasync = require('vasync');
-
-var fs = require('fs');
-var exec = require('child_process').exec;
-var common = require('./common');
-
-
-var HISTORY_UUID = ''; // filled in later
-var MIDDLE_ENTRY = []; // filled in later
-
-
-function parseHistory(txt) {
-    var entries = txt.split('\n');
-    entries.pop();   // remove empty last item due to last \n
-
-    entries = entries.map(function (entry) {
-        return entry.split(/\s+/);
-    });
-
-    return entries;
-}
-
-
-test('sdcadm history --help', function (t) {
-    exec('sdcadm history --help', function (err, stdout, stderr) {
-        t.ifError(err);
-
-        t.notEqual(stdout.indexOf('sdcadm history [<options>]', -1));
-        t.equal(stderr, '');
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history', function (t) {
-    var origHistory;
-    var beforeUpdate = new Date();
-    var afterUpdate;
-
-    vasync.pipeline({
-        funcs: [
-            function getOldHistory(_, next) {
-                exec('sdcadm history', function (err, stdout, stderr) {
-                    t.ifError(err);
-                    t.equal(stderr, '');
-
-                    origHistory = parseHistory(stdout);
-                    origHistory.shift(); // remove column titles
-                    next();
-                });
-            },
-
-            function updateOther(_, next) {
-                // A command that we can re-run as many times as we need
-                var cmd = 'sdcadm experimental update-other';
-
-                exec(cmd, function execCb(err, stdout, stderr) {
-                    t.ifError(err);
-                    t.equal(stderr, '');
-
-                    afterUpdate = new Date();
-                    next();
-                });
-            },
-
-            function getNewHistory(_, next) {
-                exec('sdcadm history', function (err, stdout, stderr) {
-                    t.ifError(err);
-                    t.equal(stderr, '');
-
-                    var newHistory = parseHistory(stdout);
-                    newHistory.shift(); // remove column titles
-
-                    t.equal(origHistory.length + 1, newHistory.length);
-
-                    var newest = newHistory[0];
-                    t.ok(newest);
-
-                    HISTORY_UUID = newest[0];
-                    t.equal(newest[1], 'root');
-
-                    t.ok(new Date(newest[2]) <= new Date(newest[3]));
-                    t.ok(new Date(newest[2]) >= beforeUpdate);
-                    t.ok(new Date(newest[3]) <= afterUpdate);
-
-                    t.notEqual(newest[4].indexOf('update-service-cfg'), -1);
-                    t.equal(newest[5], '-');
-
-                    next();
-                });
-            }
-
-        ]
-    }, function (resErr) {
-        t.ifError(resErr);
-        t.end();
-    });
-
-});
-
-
-test('sdcadm history --json', function (t) {
-    exec('sdcadm history --json', { maxBuffer: 10 * 1024 * 1024 }, // 10 MiB
-         function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal('', stderr);
-
-        var history = JSON.parse(stdout);
-        t.ok(history.length >= 1);
-
-        history.forEach(function (entry) {
-            t.ok(entry.uuid.match(common.UUID_RE), entry.uuid + ' is a UUID');
-            t.ok(Array.isArray(entry.changes), 'changes is an array');
-            // TODO: no username?
-            t.ok(entry.username === 'root' || !entry.username);
-            t.ok(new Date(entry.started));
-            t.ok(new Date(entry.finished));
-        });
-
-        var historyByDate = common.deepCopy(history).sort(function (a, b) {
-            return a.finished > b.finished ? -1 : 1;
-        });
-
-        MIDDLE_ENTRY = historyByDate[Math.floor(historyByDate.length / 2)];
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history <uuid>', function (t) {
-    exec('sdcadm history ' + HISTORY_UUID, function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
-
-        var entry = JSON.parse(stdout);
-        t.equal(entry.uuid, HISTORY_UUID);
-        t.equal(entry.username, 'root');
-        t.equal(typeof (entry.started),  'number');
-        t.equal(typeof (entry.finished), 'number');
-        t.ok(Array.isArray(entry.changes));
-        t.equal(entry.changes[entry.changes.length - 1].service.name, 'assets');
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history -H', function (t) {
-    exec('sdcadm history -H', function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
-
-        var entries = stdout.split('\n');
-        t.ok(!entries[0].match('UUID'));
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history -o', function (t) {
-    exec('sdcadm history -o uuid,user', function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
-
-        var columns = parseHistory(stdout)[0];
-        t.deepEqual(columns, ['UUID', 'USER']);
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history -s', function (t) {
-    exec('sdcadm history -s uuid', function (err, stdout, stderr) {
-        t.ifError(err);
-        t.equal(stderr, '');
-
-        var entries = parseHistory(stdout);
-        entries.shift(); // remove column titles
-
-        var uuids = entries.map(function (entry) {
-            return entry[0];
-        });
-
-        var sorted = common.deepCopy(uuids).sort();
-
-        t.deepEqual(uuids, sorted, 'uuids were sorted correctly');
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history --since', function (t) {
-    var minimumDate = new Date(MIDDLE_ENTRY.finished).toISOString();
-    var cmd = 'sdcadm history --since=' + minimumDate;
-
-    exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err, 'History since err');
-        t.equal(stderr, '', 'History since stderr');
-
-        var entries = parseHistory(stdout);
-        entries.shift(); // remove column titles
-        entries.forEach(function (entry) {
-            t.ok(entry[2] >= minimumDate, 'History since entry ' + entry[0]);
-        });
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history --until', function (t) {
-    var maximumDate = new Date(MIDDLE_ENTRY.finished).toISOString();
-    var cmd = 'sdcadm history --until=' + maximumDate;
-
-    exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err, 'History until err');
-        t.equal(stderr, '', 'History until stderr');
-
-        var entries = parseHistory(stdout);
-        entries.shift(); // remove column titles
-
-        entries.forEach(function (entry) {
-            t.ok(entry[3] <= maximumDate, 'History until entry ' + entry[0]);
-        });
-
-        t.end();
-    });
-});
-
-
-test('sdcadm history bogus files', function (t) {
-    // Create bogus file manually
-    var histDir = '/var/sdcadm/history/';
-    var fpath = histDir + '9887ef12-32f9-4a05-9e38-e99ca15a5758.json';
-
-    fs.writeFile(fpath, 'null', {
-        encoding: 'utf8'
-    }, function (ferr) {
-        t.ifError(ferr);
-
-        // Now verify that this will not cause any error:
-        var cmd = 'sdcadm experimental update-other';
-        exec(cmd, function execCb(err, stdout, stderr) {
-            t.ifError(err, 'Execution error');
-            t.equal(stderr, '', 'Empty stderr');
-            t.end();
-        });
-    });
-});
