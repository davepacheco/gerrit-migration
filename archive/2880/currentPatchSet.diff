commit 71b792588136f5b1aec28e3bb1e2e76e4ac72cc0 (refs/changes/80/2880/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-10-27T15:18:57-07:00 (1 year, 11 months ago)
    
    AGENT-1064 cn-agent should maintain a persistent connection to CNAPI

diff --git a/lib/app.js b/lib/app.js
index a5a1069..45118dd 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -8,13 +8,17 @@
  * Copyright (c) 2017, Joyent, Inc.
  */
 
+var Watershed = require('watershed').Watershed;
+var assert = require('assert-plus');
 var async = require('async');
 var dns = require('dns');
 var exec = require('child_process').exec;
 var fs = require('fs');
+var http = require('http');
+var once = require('once');
 var restify = require('restify');
 var verror = require('verror');
-var assert = require('assert-plus');
+
 var StatusReporter = require('./heartbeater');
 
 
@@ -149,6 +153,10 @@ var queueDefns = [
     }
 ];
 
+// U+1F493 - BEATING HEART
+var BEATING_HEART = 'ðŸ’“';
+
+
 function App(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
@@ -235,6 +243,20 @@ App.prototype.ensureCnapiLookedUp = function (callback) {
             }
 
             self.cnapiAddr = addr;
+            var cnapiAddr = self.cnapiAddr;
+
+            var url = 'http://' + cnapiAddr;
+
+            var restifyOptions = {
+                log: self.log,
+                url: url,
+                connectTimeout: 5000,
+                requestTimeout: 5000
+            };
+
+            self.log.info('cnapi ip was %s', cnapiAddr);
+            self.client = restify.createJsonClient(restifyOptions);
+            self.rosterClient = restify.createClient(restifyOptions);
             self.agentserver.setCnapiAddress(addr);
             callback();
         });
@@ -350,22 +372,80 @@ App.prototype.updateAgents = function (callback) {
     });
 };
 
-
-App.prototype.startHeartbeater = function () {
+App.prototype.startServerRosterConnection = function () {
     var self = this;
-    var statusReporter = new StatusReporter({ log: self.log });
-    var cnapiAddr = self.cnapiAddr;
+    var shed = new Watershed();
+    var wskey = shed.generateKey();
+    var urlPath = '/servers/' + self.uuid + '/roster-connection';
+
+//     self.log.level('debug');
+    var options = {
+        path: urlPath,
+        headers: {
+            connection: 'upgrade',
+            upgrade: 'websocket',
+            'sec-websocket-key': wskey
+        }
+    };
 
-    var url = 'http://' + cnapiAddr;
+    self.log.warn('watershed starting');
 
-    var restifyOptions = {
-        url: url,
-        connectTimeout: 5000,
-        requestTimeout: 5000
-    };
+    self.rosterClient.get(options, onGetUpgrade);
+
+    var wsc;
+    var interval;
+
+    function onGetUpgrade(err, res, socket, head) {
+        self.log.warn('XXX got upgraded');
+        if (err) {
+            self.log.error(err, 'watershed err: reattempting connection');
+            setTimeout(function () {
+                self.startServerRosterConnection();
+            }, 1000);
+            return;
+        }
+        res.once('upgradeResult', _onUpgradeResult);
+    }
+
+
+    function _onUpgradeResult(err, res, socket, head) {
+        assert.ifError(err);
+        self.log.warn('XXX upgrad');
+
+        self.log.warn('upgrade result');
+
+        wsc = shed.connect(res, socket, head, wskey);
+
+        wsc.on('text', onWscText);
+        wsc.on('end', onWscEnd);
+
+        interval = setInterval(function () {
+            self.log.warn('XXX heartbeat');
+            wsc.send(BEATING_HEART);
+        }, 1000);
+    }
+
+    function onWscText(msg) {
+        self.log.warn('message from server: ' + msg);
+    }
 
-    self.log.info('cnapi ip was %s', cnapiAddr);
-    self.client = restify.createJsonClient(restifyOptions);
+    function onWscEnd(msg) {
+        self.log.warn('websocket ended');
+
+        clearInterval(interval);
+        wsc.end();
+        wsc.destroy();
+        self.startServerRosterConnection();
+    }
+
+    function onWscConnectionReset(msg) {
+        self.log.warn('websocket ended');
+    }
+};
+
+App.prototype.startHeartbeater = function () {
+    var self = this;
+    var statusReporter = new StatusReporter({ log: self.log });
     var statusurlpath = '/servers/' + self.uuid + '/events/status';
     var hburlpath = '/servers/' + self.uuid + '/events/heartbeat';
 
@@ -464,6 +544,7 @@ App.prototype.start = function () {
                 self.uuid = self.sysinfo.UUID;
             }
             self.startHeartbeater();
+            self.startServerRosterConnection();
 
             // AGENT-640: Ensure we clean up any stale machine creation guard
             // files, then set queues up as per usual.
diff --git a/package.json b/package.json
index 779ada8..50817c7 100644
--- a/package.json
+++ b/package.json
@@ -33,6 +33,7 @@
     "vasync": "1.6.4",
     "verror": "1.9.0",
     "vmadm": "git+https://github.com/joyent/node-vmadm.git#94e95c6b96c2c5947281a5ea3df763928a65219c",
+    "watershed": "^0.3.3",
     "zfs": "git+https://github.com/joyent/node-zfs.git#657a90d9424c45066e3e0919dfe9b34f5636e0e9"
   },
   "sdcDependencies": {
