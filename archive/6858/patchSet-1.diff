commit 63d9abacdb7d94bb9a8f9d70ca0a909b8c8ad091
Author: Alex Wilson <alex@cooperi.net>
Date:   2019-09-02T10:31:34+10:00 (5 weeks ago)
    
    xxx: triton inst exec

diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 6a08995..1be6b08 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -1330,6 +1330,43 @@ CloudApi.prototype.rebootMachine = function rebootMachine(uuid, callback) {
     return this._doMachine('reboot', uuid, callback);
 };
 
+/**
+ * execute a command as root inside a zone-type machine
+ *
+ * @param {String} uuid (required) The machine id.
+ * @param {String[]} argv (required) the command to run.
+ * @param {Function} callback of the form `function (err, res)`
+ */
+CloudApi.prototype.machineExec = function machineExec(uuid, argv, callback) {
+    var self = this;
+    assert.string(uuid, 'uuid');
+    assert.arrayOfString(argv, 'arguments');
+    assert.func(callback, 'callback');
+
+    var opts = {
+        path: format('/%s/machines/%s/exec', self.account, uuid),
+        method: 'POST',
+        data: {
+            argv: argv
+        }
+    };
+    this._request(opts, function (err, req, res, obj, body) {
+        var evts = [];
+        if (err && err.toString().indexOf('Invalid JSON in response') !== -1) {
+            err = null;
+            body.toString('utf-8').split('\n').forEach(function (line) {
+                try {
+                    line = JSON.parse(line);
+                    evts.push(line);
+                } catch (ex) {
+                    // do nothing
+                }
+            });
+        }
+        callback(err, evts);
+    });
+}
+
 /**
  * Enables machine firewall.
  *
diff --git a/lib/do_instance/do_exec.js b/lib/do_instance/do_exec.js
new file mode 100644
index 0000000..897327c
--- /dev/null
+++ b/lib/do_instance/do_exec.js
@@ -0,0 +1,97 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ *
+ * `triton instance reboot ...`
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var common = require('../common');
+var errors = require('../errors');
+
+
+function do_exec(subcmd, opts, args, cb) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length < 1) {
+        cb(new errors.UsageError('missing INST arg(s)'));
+        return;
+    } else if (args.length < 2) {
+        cb(new errors.UsageError('missing CMD arg(s)'));
+        return;
+    }
+
+    var id = args[0];
+    var argv = args.slice(1);
+
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
+            return;
+        }
+
+        tritonapi.getInstance({
+            id: id,
+            fields: ['id']
+        }, function (lookupErr, inst) {
+            if (lookupErr) {
+                cb(lookupErr);
+                return;
+            }
+
+            tritonapi.cloudapi.machineExec(inst.id, argv, function (err, res) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+                res.forEach(function (evt) {
+                    switch (evt.type) {
+                    case 'stdout':
+                        process.stdout.write(evt.data);
+                        break;
+                    case 'stderr':
+                        process.stderr.write(evt.data);
+                        break;
+                    case 'end':
+                        process.stdout.on('drain', function () {
+                            process.exit(evt.data.code);
+                        });
+                    }
+                });
+            });
+        });
+    });
+}
+
+
+do_exec.synopses = ['{{name}} exec [OPTIONS] INST CMD'];
+do_exec.help = [
+    'Execute a command on an instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "INST" is an instance name, id, or short id.'
+].join('\n');
+do_exec.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    }
+];
+
+do_exec.completionArgtypes = ['tritoninstance'];
+
+
+
+module.exports = do_exec;
diff --git a/lib/do_instance/index.js b/lib/do_instance/index.js
index dc7ecce..22603be 100644
--- a/lib/do_instance/index.js
+++ b/lib/do_instance/index.js
@@ -56,7 +56,8 @@ function InstanceCLI(top) {
             'snapshot',
             'tag',
             'disk',
-            'migration'
+            'migration',
+            'exec'
         ]
     });
 }
@@ -100,6 +101,7 @@ InstanceCLI.prototype.do_tag = require('./do_tag');
 InstanceCLI.prototype.do_tags = require('./do_tags');
 InstanceCLI.prototype.do_disk = require('./do_disk');
 InstanceCLI.prototype.do_disks = require('./do_disks');
+InstanceCLI.prototype.do_exec = require('./do_exec');
 
 InstanceCLI.aliases = ['inst'];
 
