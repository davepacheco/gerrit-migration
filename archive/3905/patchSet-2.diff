commit a28357e4c844936b9b0396aebfb3eb5dd8014d56 (refs/changes/05/3905/2)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-05-03T14:28:52-07:00 (1 year, 5 months ago)
    
    TRITON-366 Use node-triton-metrics for CNAPI metrics collection

diff --git a/bin/cnapi.js b/bin/cnapi.js
index 8977b06..9edfe99 100755
--- a/bin/cnapi.js
+++ b/bin/cnapi.js
@@ -5,19 +5,60 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * Main entry-point for the CNAPI.
  */
 
+var path = require('path');
+
+var bunyan = require('bunyan');
+var createMetricsManager = require('triton-metrics').createMetricsManager;
+var restify = require('restify');
+
 var App = require('../lib/app');
 var common = require('../lib/common');
-var path = require('path');
 
 var configFilename = path.join(__dirname, '..', 'config', 'config.json');
+var METRICS_SERVER_PORT = 8881;
+
+
 common.loadConfig(configFilename, function (error, config) {
-    var app = new App(config);
-    app.start();
+    var app;
+    var cnapiLog;
+    var metricsManager;
+
+    cnapiLog = new bunyan({
+        name: 'cnapi',
+        level: config.logLevel,
+        serializers: {
+            err: bunyan.stdSerializers.err,
+            req: bunyan.stdSerializers.req,
+            res: bunyan.stdSerializers.res
+        }
+    });
+
+    metricsManager = createMetricsManager({
+        address: config.adminIp,
+        log: cnapiLog.child({component: 'metrics'}),
+        port: METRICS_SERVER_PORT,
+        restify: restify,
+        staticLabels: {
+            datacenter: config.datacenter_name,
+            instance: config.instanceUuid,
+            server: config.serverUuid,
+            service: config.serviceName
+        }
+    });
+
+    metricsManager.createRestifyMetrics();
+    metricsManager.listen(function metricsServerStarted() {
+        app = new App(config, {
+            log: cnapiLog,
+            metricsManager: metricsManager
+        });
+        app.start();
+    });
 });
diff --git a/docs/index.md b/docs/index.md
index 1caf1cc..34ea5d7 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -175,6 +175,10 @@ Use it as so:
                     -X POST \
                     -d '{ "datacenter_name": "foo" }'
 
+# Metrics
+
+CNAPI exposes metrics via [node-triton-metrics](https://github.com/joyent/node-triton-metrics) on `http://<ADMIN_IP>:8881/metrics.`
+
 
 # Heartbeats
 
diff --git a/lib/app.js b/lib/app.js
index d439dbe..22cf1cb 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -68,20 +68,15 @@ function addFluentdHost(log, host) {
 }
 
 
-function App(config) {
+function App(config, opts) {
     var self = this;
 
-    self.config = config;
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.object(opts.metricsManager, 'opts.metricsManager');
 
-    self.log = new Logger({
-        name: 'cnapi',
-        level: config.logLevel,
-        serializers: {
-            err: Logger.stdSerializers.err,
-            req: Logger.stdSerializers.req,
-            res: Logger.stdSerializers.res
-        }
-    });
+    self.config = config;
+    self.log = opts.log;
 
     // EXPERIMENTAL
     if (config.fluentd_host) {
@@ -93,6 +88,7 @@ function App(config) {
     self.log.info({ config: config }, 'cnapi config');
     self.config.log = self.log;
     self.collectedGlobalSysinfo = false;
+    self.metricsManager = opts.metricsManager;
     self.taskCallbacks = {};
 
     ModelBase.init(self);
@@ -118,6 +114,11 @@ function App(config) {
  * This will allow CNAPI to begin responding to requests immediately, even if
  * they are 500's.
  *
+ * # Setup metrics
+ *
+ * This will setup a node-triton-metrics instance and connect it to the restify
+ * server.
+ *
  * # Make connections
  *
  * Connection phase: open connection to all upstream services we depend on.
@@ -181,6 +182,13 @@ App.prototype.start = function () {
         function (wfcb) {
             self.initializeHttpInterface(wfcb);
         },
+        function _setupMetrics(wfcb) {
+            // Since initializeHttpInterface() setup self.server, we can now
+            // attach the metrics manager to that restify server instance.
+            self.server.on('after', self.metricsManager.collectRestifyMetrics
+                .bind(self.metricsManager));
+            wfcb();
+        },
         function (wfcb) {
             self.initializeConnections(wfcb);
         }
diff --git a/package.json b/package.json
index 01fa2c1..3bf39c9 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.8.2",
+  "version": "1.9.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -23,6 +23,7 @@
     "sdc-clients": "10.0.3",
     "sprintf": "0.1.5",
     "trace-event": "1.3.0",
+    "triton-metrics": "0.1.0",
     "vasync": "1.6.4",
     "verror": "1.9.0",
     "wf-client": "0.2.1",
diff --git a/sapi_manifests/cnapi/template b/sapi_manifests/cnapi/template
index 7ef6cd8..48d749b 100644
--- a/sapi_manifests/cnapi/template
+++ b/sapi_manifests/cnapi/template
@@ -1,7 +1,11 @@
 {
 	"logLevel": "info",
 	"datacenter_name": "{{{datacenter_name}}}",
+	"adminIp": "{{auto.ADMIN_IP}}",
 	"adminUuid": "{{{ufds_admin_uuid}}}",
+	"instanceUuid": "{{auto.ZONENAME}}",
+	"serviceName": "{{SERVICE_NAME}}",
+	"serverUuid": "{{auto.SERVER_UUID}}",
 {{#no_rabbit}}
 	"useCnAgent": true,
 {{/no_rabbit}}
diff --git a/test/lib/mock.js b/test/lib/mock.js
index eef3e96..adf168a 100644
--- a/test/lib/mock.js
+++ b/test/lib/mock.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var async = require('async');
@@ -14,6 +14,25 @@ var path = require('path');
 var App = require('../../lib/app');
 
 var configFilename = path.join(__dirname, '..', '..', 'config', 'test.json');
+var mockedMetricsManager = {
+    collectRestifyMetrics: function _collectRestifyMetrics() {}
+};
+
+var MockLogger = {
+    child: function _child() {
+        return MockLogger;
+    },
+    debug: function _debug() {
+    },
+    error: function _error() {
+    },
+    info: function _info() {
+    },
+    trace: function _trace() {
+    },
+    warn: function _warn() {
+    }
+};
 
 
 /**
@@ -207,6 +226,9 @@ function newApp(callback) {
                 amqp: {
                     host: 'localhost'
                 }
+            }, {
+                log: MockLogger,
+                metricsManager: mockedMetricsManager
             });
             app.setMoray(moray);
             app.setWorkflow(wf);
