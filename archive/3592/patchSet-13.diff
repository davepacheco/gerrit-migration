commit f678ec1d6c403e501710af8a648898527da0a5ef (refs/changes/92/3592/13)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2018-06-27T16:55:41-07:00 (1 year, 3 months ago)
    
    TRITON-53 x-account image clone

diff --git a/docs/index.md b/docs/index.md
index e6319bd..b07a4d9 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -918,6 +918,18 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+## 9.1.0
+
+- Added [Clone Image](#CloneImage). This can be used to create a your own copy
+  of an image owned by another account that has been shared with you (via
+  `triton image share`).
+
+- [Backward incompatible] Shared images will no longer be provisioned by default
+  when an `Accept-Version` of `9.1.0` or higher is used. You will need to
+  explicitly add the `allow_shared_images` param to CreateMachine (which is what
+  `triton create --allow-shared-images` does). Older versions of the
+  CreateMachine interface will allow the provisioning of shared images.
+
 ## 9.0.0
 
 - New object-based format for Roles: the "members" and "policies" properties
@@ -3926,6 +3938,85 @@ ResourceNotFound | If `:login` or `:id` does not exist
 
 
 
+## CloneImage (POST /:login/images/:id?action=clone)
+
+Creates an independent copy of the source image. The `login` account must be on
+the source image ACL to be able to make an image clone.
+
+The resulting cloned image will have the same properties as the source image,
+but the cloned image will have a different id, it will be owned by the `login`
+account and the image will have an empty ACL.
+
+All incremental images in the image origin chain that are not operator images
+(i.e. are not owned by admin) will also be cloned, though all cloned incremental
+images will have state `disabled` so that they are not visible in the default
+image listings.
+
+### Inputs
+
+None.
+
+### Returns
+
+A cloned image object. See [GetImage](#GetImage) docs for the image fields
+returned.
+
+### Errors
+
+For general errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+Some typical and specific errors for this endpoint:
+
+**Error Code**     | **Description**
+------------------ | ---------------
+ResourceNotFound   | If `:login` or `:id` does not exist.
+NotImageOwnerError | If your account is not the owner of the image.
+ImageNotShared     | When the given image is not shared with your account.
+
+### Example CLI Command
+
+    $ triton image clone eca995fe-b904-11e3-b05a-83a4899322dc
+
+#### Example HTTP Request
+
+    POST /my/images/eca995fe-b904-11e3-b05a-83a4899322dc?action=clone HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Api-Version: ~8
+
+#### Example HTTP Response
+
+    HTTP/1.1 200 OK
+    Content-Type: application/json
+    Content-Length: 125
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    Access-Control-Allow-Methods: GET, HEAD, POST
+    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
+    Connection: Keep-Alive
+    Content-MD5: 2sEZ45LmhRiretMPn5sqVA==
+    Date: Thu, 21 Jan 2016 08:00:09 GMT
+    Server: Joyent Triton 8.0.0
+    Api-Version: 8.0.0
+    Request-Id: f8e43c60-b904-11e3-93b7-1f685001b0c3
+    Response-Time: 135
+
+    {
+      "id": "4ca995fe-b904-11e3-b05a-83a4899322dc",
+      "name": "some-image",
+      "version": "1.0.0",
+      "os": "smartos",
+      "requirements": {},
+      "type": "zone-dataset",
+      "published_at": "2017-11-25T17:44:54Z",
+      "owner": "77034e57-42d1-0342-b302-00db733e8c8a",
+      "public": true,
+      "state": "active"
+    }
+
+
+
+
 # Packages
 
 [Packages](#packages-description) are named collections of resources that are
@@ -4519,6 +4610,7 @@ metadata.$name | String | An arbitrary set of metadata key/value pairs can be se
 tag.$name | String   | An arbitrary set of tags can be set at provision time, but they must be prefixed with "tag."
 firewall_enabled | Boolean | Completely enable or disable firewall for this instance. Default is false
 deletion_protection | Boolean | Whether an instance is destroyable. See [Deletion Protection](#deletion-protection). Default is false
+allow_shared_images | Boolean | Whether to allow provisioning from a shared image. Default is false
 volumes   | Array    | A list of objects representing volumes to mount when the newly created machine boots
 
 #### volumes
@@ -10516,6 +10608,7 @@ Sample code for generating the `Authorization` header (and `Date` header):
 [sdc-updateimage](#UpdateImage)|-|Update metadata about an image.
 [sdc-updatemachinemetadata](#UpdateMachineMetadata)|-|Allows you to update the metadata for a given instance.
 [sdc-user](#users)|-|Add, update and remove account users and their keys.
+-|trion image clone|Clone a shared image.
 -|triton info|Print an account summary.
 -|triton instance ip|Print the primary IP of the given instance.
 -|triton instance ssh|SSH to the primary IP of an instance.
diff --git a/lib/datasets.js b/lib/datasets.js
index dbd3705..534a838 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -591,6 +591,35 @@ function exportImage(req, res, next) {
 }
 
 
+function cloneImage(req, res, next) {
+    var log = req.log;
+    var action = req.params.action;
+    var account = req.account.uuid;
+
+    if (action !== 'clone') {
+        return next();
+    }
+
+    var imageUUID = req.params.dataset;
+    var opts = {
+        headers: {
+            'x-request-id': req.getId()
+        }
+    };
+
+    return req.sdc.imgapi.cloneImage(imageUUID, account, opts,
+            function _imgapiCloneImageCb(err, img) {
+        if (err) {
+            return next(err);
+        }
+
+        log.debug('CloneImage(%s) => %j', req.account.login, img);
+        res.send(translate(req, img));
+        return next(false);
+    });
+}
+
+
 function del(req, res, next) {
     return req.sdc.imgapi.deleteImage(
         req.dataset.uuid,
@@ -622,38 +651,38 @@ function mount(server, before, config) {
     server.get({
         path: '/:account/images',
         name: 'ListImages',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, list);
 
     server.head({
         path: '/:account/images',
         name: 'HeadImages',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, list);
 
     server.get({
         path: '/:account/images/:dataset',
         name: 'GetImage',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, get);
 
     server.head({
         path: '/:account/images/:dataset',
         name: 'HeadImage',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, get);
 
     server.post({
         path: '/:account/images',
         name: 'CreateImageFromMachine',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, create, resources.updateResource);
 
     server.post({
         path: '/:account/images/:dataset',
         name: 'UpdateImage',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
-    }, before, update, exportImage,
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
+    }, before, update, exportImage, cloneImage,
         function invalidUpdateAction(req, res, next) {
             if (req.query.action) {
                 return next(new InvalidArgumentError(
@@ -667,7 +696,7 @@ function mount(server, before, config) {
     server.del({
         path: '/:account/images/:dataset',
         name: 'DeleteImage',
-        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+        version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, del, resources.deleteResource);
 
     return server;
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index a313a75..599dd20 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -843,43 +843,43 @@ function mountNetworks(server, before, pre) {
     server.get({
         path: '/:account/fabrics/default/vlans',
         name: 'ListFabricVLANs',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, listFabricVLANs);
 
     server.head({
         path: '/:account/fabrics/default/vlans',
         name: 'HeadFabricVLANs',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, listFabricVLANs);
 
     server.post({
         path: '/:account/fabrics/default/vlans',
         name: 'CreateFabricVLAN',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, createFabricVLAN);
 
     server.put({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'UpdateFabricVLAN',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, updateFabricVLAN);
 
     server.get({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'GetFabricVLAN',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, getFabricVLAN);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'GetFabricVLAN',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, getFabricVLAN);
 
     server.del({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'DeleteFabricVLAN',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, deleteFabricVLAN);
 
     // --- Fabric Networks
@@ -887,43 +887,43 @@ function mountNetworks(server, before, pre) {
     server.get({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'ListFabricNetworks',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, listFabricNetworks);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'HeadFabricNetworks',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, listFabricNetworks);
 
     server.post({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'CreateFabricNetwork',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, createFabricNetwork);
 
     server.get({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'GetFabricNetwork',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, getFabricNetwork);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'GetFabricNetwork',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, getFabricNetwork);
 
     server.put({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'UpdateFabricNetwork',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, updateFabricNetwork);
 
     server.del({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'DeleteFabricNetwork',
-        version: [ '7.3.0', '8.0.0' ]
+        version: [ '7.3.0', '8.0.0', '9.0.0' ]
     }, before, ensureFabricsEnabled, pre, deleteFabricNetwork);
 
     // --- Networks (non-fabric)
diff --git a/lib/keys.js b/lib/keys.js
index cd28b21..ac08720 100644
--- a/lib/keys.js
+++ b/lib/keys.js
@@ -288,31 +288,31 @@ function mount(server, before, config) {
     server.get({
         path: '/:account/users/:user/keys',
         name: 'ListUserKeys',
-        version: ['7.2.0', '7.3.0', '8.0.0']
+        version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, list);
 
     server.head({
         path: '/:account/users/:user/keys',
         name: 'HeadUserKeys',
-        version: ['7.2.0', '7.3.0', '8.0.0']
+        version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, list);
 
     server.get({
         path: '/:account/users/:user/keys/:name',
         name: 'GetUserKey',
-        version: ['7.2.0', '7.3.0', '8.0.0']
+        version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, get);
 
     server.head({
         path: '/:account/users/:user/keys/:name',
         name: 'HeadUserKey',
-        version: ['7.2.0', '7.3.0', '8.0.0']
+        version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, get);
 
     server.del({
         path: '/:account/users/:user/keys/:name',
         name: 'DeleteUserKey',
-        version: ['7.2.0', '7.3.0', '8.0.0']
+        version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
     }, before, del, resources.deleteResource);
 
     return server;
diff --git a/lib/machines.js b/lib/machines.js
index 6769917..6e6a51f 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -1117,6 +1117,8 @@ function imageToDataset(req, res, next) {
 
 
 function ensureDataset(req, res, next) {
+    var version = req.getVersion();
+
     if (!req.dataset) {
         if (req.params.dataset) {
             return next(new InvalidArgumentError('%s is not a valid image',
@@ -1130,6 +1132,18 @@ function ensureDataset(req, res, next) {
         return next(new InvalidArgumentError('image %s is not active',
                                                 req.params.dataset));
     }
+    // TRITON-53 Shared images are not provisionable by default.
+    if (semver.satisfies('9.0.0', version) &&
+            req.dataset.owner !== req.account.uuid &&
+            req.dataset.owner !== req.config.ufds_admin_uuid &&
+            req.params.allow_shared_images !== true &&
+            Array.isArray(req.dataset.acl) &&
+            req.dataset.acl.indexOf(req.account.uuid) >= 0) {
+        return next(new InvalidArgumentError(
+            '%s is a shared image - to provision a shared image you can ' +
+            'either clone the image or set "allow_shared_images" to true.',
+            req.params.dataset));
+    }
     return next();
 }
 
@@ -2382,7 +2396,7 @@ function mount(server, before, pre, post) {
         {
             path: '/:account/machines/:machine',
             name: 'UpdateMachine',
-            version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0']
+            version: ['7.0.0', '7.1.0', '7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         rename,
diff --git a/lib/nics.js b/lib/nics.js
index 4808744..b74f280 100644
--- a/lib/nics.js
+++ b/lib/nics.js
@@ -766,7 +766,7 @@ function mount(server, before, pre, post) {
     server.post({
             path: '/:account/machines/:machine/nics',
             name: 'AddNic',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
@@ -777,7 +777,7 @@ function mount(server, before, pre, post) {
     server.get({
             path: '/:account/machines/:machine/nics',
             name: 'ListNics',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
@@ -788,7 +788,7 @@ function mount(server, before, pre, post) {
     server.head({
             path: '/:account/machines/:machine/nics',
             name: 'ListNics',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
@@ -799,7 +799,7 @@ function mount(server, before, pre, post) {
     server.get({
             path: '/:account/machines/:machine/nics/:mac',
             name: 'GetNic',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
@@ -810,7 +810,7 @@ function mount(server, before, pre, post) {
     server.head({
             path: '/:account/machines/:machine/nics/:mac',
             name: 'GetNic',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
@@ -821,7 +821,7 @@ function mount(server, before, pre, post) {
     server.del({
             path: '/:account/machines/:machine/nics/:mac',
             name: 'RemoveNic',
-            version: ['7.2.0', '7.3.0', '8.0.0']
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
         },
         before,
         pre || [],
diff --git a/package.json b/package.json
index 681cda4..40d705e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "9.0.0",
+    "version": "9.1.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -35,7 +35,7 @@
         "nodemailer": "0.7.1",
         "nopt": "2.0.0",
         "restify": "4.3.3",
-        "sdc-clients": "11.1.0",
+        "sdc-clients": "11.2.0",
         "semver": "5.4.1",
         "strsplit": "1.0.0",
         "triton-metrics": "0.1.0",
diff --git a/test/images.80.test.js b/test/images.80.test.js
index 1a506b2..79c2840 100644
--- a/test/images.80.test.js
+++ b/test/images.80.test.js
@@ -147,7 +147,6 @@ test('Search image type, results', function (t) {
     });
 });
 
-
 test('teardown', function (t) {
     common.teardown(CLIENTS, SERVER, function (err) {
         t.ifError(err, 'teardown success');
diff --git a/test/images.9.test.js b/test/images.9.test.js
new file mode 100644
index 0000000..697a027
--- /dev/null
+++ b/test/images.9.test.js
@@ -0,0 +1,43 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var test = require('@smaller/tap').test;
+var common = require('./common');
+
+
+// --- Globals
+
+
+var CLIENTS;
+var SERVER;
+
+
+// --- Tests
+
+
+test('setup', function (t) {
+    common.setup({clientApiVersion: '~9'}, function (_, clients, server) {
+        CLIENTS = clients;
+        SERVER = server;
+        t.end();
+    });
+});
+
+test('Image cloning', function (t) {
+    var imageCloneTestSuite = require('./images/clone.js');
+    imageCloneTestSuite(t, CLIENTS);
+});
+
+test('teardown', function (t) {
+    common.teardown(CLIENTS, SERVER, function (err) {
+        t.ifError(err, 'teardown success');
+        t.end();
+    });
+});
diff --git a/test/images/clone.js b/test/images/clone.js
new file mode 100644
index 0000000..d862330
--- /dev/null
+++ b/test/images/clone.js
@@ -0,0 +1,224 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var jsprim = require('jsprim');
+var util = require('util');
+var vasync = require('vasync');
+
+var common = require('../common');
+
+
+// --- Globals
+
+// --- Tests for image sharing and image cloning.
+
+module.exports = function ImageCloneTestSuite(suite, clients) {
+    var client = clients.user;
+    var clonedImg;
+    var customImg;
+    var other = clients.other;
+    var setupWasSuccessful = false;
+    var test = suite.test;
+    var testImg;
+
+    /**
+     * Test setup
+     *
+     * In order to test image sharing - we first need to create an imgapi image
+     * that is owned by our test user (and make it a private image). We do this
+     * by taking an existing public image and manually copy it into the users
+     * own custom image.
+     */
+
+    test('Image clone setup', function _setup(t) {
+        vasync.pipeline({ arg: {}, funcs: [
+            function getImage(_, next) {
+                common.getTestImage(client, function _getTestImgCb(err, img) {
+                    t.ifError(err, 'Image sharing: getTestImage');
+                    testImg = img;
+                    next(err);
+                });
+            },
+            function getImageFileStream(ctx, next) {
+                client.imgapi.getImageFileStream(testImg.id,
+                        function _getImageFileStreamCb(err, stream) {
+                    t.ifError(err, 'Image sharing: getImageFileStream');
+                    // Stream has to be paused, for addImageFile call.
+                    if (stream) {
+                        stream.pause();
+                        ctx.filestream = stream;
+                    }
+                    next(err);
+                });
+            },
+            function createCustomImage(ctx, next) {
+                var newImgManifest = jsprim.deepCopy(testImg);
+                newImgManifest.owner = client.account.uuid;
+                newImgManifest.public = false;
+                delete newImgManifest.id;
+                delete newImgManifest.state;
+                delete newImgManifest.files;
+                delete newImgManifest.published_at;
+                client.imgapi.createImage(newImgManifest,
+                        function _createImageCb(err, newImg) {
+                    t.ifError(err, 'Image sharing: createCustomImage');
+                    customImg = newImg;
+                    next(err);
+                });
+            },
+            function imgapiImportImageFile(ctx, next) {
+                var file = testImg.files[0];
+                var opts = {
+                    compression: file.compression,
+                    file: ctx.filestream,
+                    sha1: file.sha1,
+                    size: file.size,
+                    storage: 'local',
+                    uuid: customImg.uuid
+                };
+                client.imgapi.addImageFile(opts, next);
+            },
+            function imgapiActivateImage(ctx, next) {
+                client.imgapi.activateImage(customImg.uuid, next);
+            }
+        ]}, function _setupPipelineCb(err) {
+            if (err) {
+                t.fail('Image clone setup unsuccessful: ' + err);
+            } else {
+                setupWasSuccessful = true;
+            }
+            t.end();
+        });
+    });
+
+    function checkSetupSuccessful(t) {
+        if (!setupWasSuccessful) {
+            t.fail('Image sharing setup was unsuccessful');
+            t.end();
+            return false;
+        }
+        return true;
+    }
+
+    /* Before the image is shared - other user should not be able to clone it */
+    test('Image clone no access', function testImageCloneNoAccess(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        var data = {};
+        other.post(util.format('/my/images/%s?action=clone', customImg.uuid),
+                data, function _testImageCloneNoAccessCb(err, req, res, img) {
+            t.ok(err, 'should get an err on image clone without access');
+            t.equal(res.statusCode, 404, 'res.statusCode');
+            t.end();
+        });
+    });
+
+    test('Image share', function testImageShare(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        var data = {
+            acl: [ other.account.uuid ]
+        };
+        client.post(util.format('/my/images/%s?action=update', customImg.uuid),
+                data, function _testImageShareCb(err, req, res, img) {
+            t.ifError(err, 'no err on image share with other user');
+            t.equal(res.statusCode, 200, 'res.statusCode');
+            t.ok(img, 'expect an image response object');
+            if (img) {
+                t.ok(Array.isArray(img.acl), 'image has an ACL array');
+                t.ok(img.acl.indexOf(other.account.uuid) >= 0,
+                    'image ACL now contains other account');
+            }
+            t.end();
+        });
+    });
+
+    test('Image clone', function testImageClone(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        var data = {};
+        other.post(util.format('/my/images/%s?action=clone', customImg.uuid),
+                data, function _testImageCloneCb(err, req, res, img) {
+            t.ifError(err, 'no err on image share with other user');
+            t.equal(res.statusCode, 200, 'res.statusCode');
+            t.ok(img, 'expect an image response object');
+            if (img) {
+                t.notEqual(img.id, customImg.uuid, 'cloned image has own id');
+                t.ok(!img.acl, 'image should not have an ACL');
+                clonedImg = img;
+            }
+            t.end();
+        });
+    });
+
+    test('No access to the cloned image for original user',
+            function testCloneNoAccessClonedImage(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        client.post(util.format('/my/images/%s?action=clone', clonedImg.uuid),
+                {}, function _testCloneNoAccessClonedImageCb(err, req, res) {
+            t.ok(err, 'should get an err on image clone without access');
+            t.equal(res.statusCode, 404, 'res.statusCode');
+            t.end();
+        });
+    });
+
+    test('Error when deleting the cloned image as original user',
+            function testCloneDeleteAsOther(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        client.del(util.format('/my/images/%s', clonedImg.id),
+                function _testCloneDeleteAsOtherCb(err) {
+            t.ok(err, 'should be an error trying to delete');
+            t.end();
+        });
+    });
+
+    test('Delete the cloned image as clone user',
+            function testCloneDeleteAsOwner(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        other.del(util.format('/my/images/%s', clonedImg.id),
+                function _testCloneDeleteAsOwnerCb(err) {
+            t.ifError(err, 'check for delete cloned image err');
+            t.end();
+        });
+    });
+
+    test('Recheck original image', function testCheckOriginalImage(t) {
+        if (!checkSetupSuccessful(t)) {
+            return;
+        }
+
+        client.get(util.format('/my/images/%s', customImg.uuid),
+                function _testCheckOriginalImageCb(err, req, res, img) {
+            t.ifError(err, 'should be no err on image get');
+            t.ok(img, 'expect an image response object');
+            t.end();
+        });
+    });
+
+    test('Image clone teardown', function testCloneImageTeardown(t) {
+        t.end();
+        suite.end();
+    });
+};
