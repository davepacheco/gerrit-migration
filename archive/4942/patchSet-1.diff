commit bcb377aac254ca216282e5c95981183a879ad321 (refs/changes/42/4942/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-10-11T14:05:57-07:00 (12 months ago)
    
    TRITON-845 VMAPI tests should be runnable against CNs (virtual and real)

diff --git a/test/common.js b/test/common.js
index 56ccc73..53bcd96 100644
--- a/test/common.js
+++ b/test/common.js
@@ -35,14 +35,23 @@ try {
     config = JSON.parse(fs.readFileSync(DEFAULT_CFG, 'utf8'));
 } catch (e) {}
 
-var CNAPI_URL = config.cnapi.url || 'http://10.99.99.22';
-var IMGAPI_URL = config.imgapi.url || 'http://10.99.99.21';
-var NAPI_URL = config.napi.url || 'http://10.99.99.10';
+var CNAPI_URL = config.cnapi.url;
+var IMGAPI_URL = config.imgapi.url;
+var NAPI_URL = config.napi.url;
+var PAPI_URL = config.papi.url;
 var VMAPI_URL = process.env.VMAPI_URL || 'http://localhost';
-var VOLAPI_URL = config.volapi.url || 'http://10.99.99.42';
+var VOLAPI_URL = config.volapi.url;
 
 var VMS_LIST_ENDPOINT = '/vms';
 
+assert.string(CNAPI_URL, 'config.cnapi.url');
+assert.string(IMGAPI_URL, 'config.imgapi.url');
+assert.string(NAPI_URL, 'config.napi.url');
+assert.string(PAPI_URL, 'config.papi.url');
+assert.string(VMAPI_URL, 'process.env.VMAPI_URL');
+assert.optionalString(VOLAPI_URL, 'config.volapi.url');
+
+
 // --- Library
 
 function setUp(callback) {
@@ -73,25 +82,37 @@ function setUp(callback) {
         agent: false
     });
 
-    var cnapi = restify.createJsonClient({
-        url: CNAPI_URL,
+    var papi = restify.createJsonClient({
+        url: PAPI_URL,
         version: '*',
         log: logger,
         agent: false
     });
 
-    var volapi = restify.createJsonClient({
-        url: VOLAPI_URL,
-        /*
-         * Use a specific version and not the latest one (with "*"") to avoid
-         * breakage when VOLAPI's API changes in a way that is not backward
-         * compatible.
-         */
-        version: '^1',
+    var cnapi = restify.createJsonClient({
+        url: CNAPI_URL,
+        version: '*',
         log: logger,
         agent: false
     });
 
+    var volapi;
+    if (VOLAPI_URL) {
+        volapi = restify.createJsonClient({
+            url: VOLAPI_URL,
+            /*
+             * Use a specific version and not the latest one (with "*"") to avoid
+             * breakage when VOLAPI's API changes in a way that is not backward
+             * compatible.
+             */
+            version: '^1',
+            log: logger,
+            agent: false
+        });
+
+        client.volapi = volapi;
+    }
+
     var imgapi = restify.createJsonClient({
         url: IMGAPI_URL,
         version: '*',
@@ -102,7 +123,7 @@ function setUp(callback) {
     client.cnapi = cnapi;
     client.imgapi = imgapi;
     client.napi = napi;
-    client.volapi = volapi;
+    client.papi = papi;
 
     return callback(null, client);
 }
@@ -157,8 +178,10 @@ function checkHeaders(t, headers) {
 /*
  * like t.ifError with a printed message
  */
-function ifError(t, err) {
-    t.ok(!err, err ? ('error: ' + err.message) : 'no error');
+function ifError(t, err, prefix) {
+    t.ok(!err,
+        (prefix ? prefix + ': ' : '') +
+        (err ? ('error: ' + err.message) : 'no error'));
 }
 
 
@@ -184,6 +207,20 @@ function checkValue(client, url, key, value, callback) {
             return;
         }
 
+        // If we hit a permanent state that's incompatible with what we
+        // expected, we can fail right away instead of waiting for the timeout.
+        if (url.indexOf('/jobs/') === 0) {
+            if (value === 'succeeded' && body[key] === 'failed') {
+                callback(new Error(url +
+                    ' failed when we expected "succeeded"'));
+                return;
+            } else if (value === 'failed' && body[key] === 'succeeded') {
+                callback(new Error(url +
+                    ' succeeded when we expected "failed"'));
+                return;
+            }
+        }
+
         callback(null, checkEqual(body[key], value));
     });
 }
diff --git a/test/vms.changefeed.test.js b/test/vms.changefeed.test.js
index 05830c7..d21a727 100644
--- a/test/vms.changefeed.test.js
+++ b/test/vms.changefeed.test.js
@@ -183,11 +183,15 @@ exports.setUp = function (callback) {
     });
 };
 
+//
+// This SERVER will be used when performing actions that don't involve an actual
+// provision, like the tests of the PUT endpoint.
+//
 exports.find_server = function (t) {
     client.cnapi.get({
         path: '/servers',
         query: {
-            headnode: true
+            setup: true
         }
     }, function (err, req, res, servers) {
         common.ifError(t, err);
@@ -200,12 +204,12 @@ exports.find_server = function (t) {
                 break;
             }
         }
-        t.ok(SERVER, 'found a running headnode to use for test provisions');
+        t.ok(SERVER, 'found a running node to use for non-provision tests: ' +
+            SERVER.uuid);
         t.done();
     });
 };
 
-
 exports.napi_networks_ok = function (t) {
     client.napi.get('/networks', function (err, req, res, networks) {
         common.ifError(t, err);
@@ -229,11 +233,10 @@ exports.create_vm = function (t) {
     };
 
     VM = {
-        alias: 'sdcvmapitest_create_vm',
+        alias: 'sdcvmapitest_create_vm_' + process.pid,
         uuid: uuid.create(),
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
@@ -255,7 +258,7 @@ exports.create_vm = function (t) {
             t.equal(res.statusCode, 202, '202 Accepted');
             common.checkHeaders(t, res.headers);
             t.ok(res.headers['workflow-api'], 'workflow-api header');
-            t.ok(body, 'vm ok');
+            t.ok(body, 'vm ok job: ' + body.job_uuid);
 
             jobLocation = '/jobs/' + body.job_uuid;
         });
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index f28d905..17fa2de 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -43,7 +43,6 @@ var VALID_NIC; // Create a new NIC with valid parameters for a later test
 var FAKE_NETWORK_UUID = 'caaaf10c-a587-49c6-9cf6-9b0a14ba960b';
 var FAKE_NETWORK_NAME = 'fakeNetworkName';
 var VM_UUID = uuid.create(); // Needs to be different everytime the test runs
-var SERVER = null;
 var CALLER = {
     type: 'signature',
     ip: '127.0.0.68',
@@ -58,7 +57,7 @@ function makeVmAlias(id) {
 }
 
 function checkMachine(t, vm) {
-    t.ok(vm.uuid, 'uuid');
+    t.ok(vm.uuid, 'uuid ' + vm.uuid);
     t.ok(vm.brand, 'brand');
     t.ok(vm.ram, 'ram');
     t.ok(vm.max_swap, 'swap');
@@ -174,10 +173,10 @@ function createTestVms(cb) {
         autoboot: false,
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 128,
         quota: 10,
         customer_metadata: {},
@@ -256,6 +255,7 @@ function destroyTestVms(cb) {
 
                 client.del(opts, function (delErr, delReq, delRes, delBody) {
                     if (delErr) {
+                        delErr.message = delErr.message + ' VM ' + vm.uuid;
                         next(delErr);
                         return;
                     }
@@ -297,29 +297,8 @@ exports.setUp = function (callback) {
 };
 
 
-exports.find_server = function (t) {
-    client.cnapi.get({
-        path: '/servers',
-        query: {
-            headnode: true
-        }
-    }, function (err, req, res, servers) {
-        common.ifError(t, err);
-        t.equal(res.statusCode, 200, '200 OK');
-        t.ok(servers, 'servers is set');
-        t.ok(Array.isArray(servers), 'servers is Array');
-        for (var i = 0; i < servers.length; i++) {
-            if (servers[i].status === 'running') {
-                SERVER = servers[i];
-                break;
-            }
-        }
-        t.ok(SERVER, 'found a running headnode to use for test provisions');
-        t.done();
-    });
-};
-
-
+// Other tests depend on there being both an 'admin' and 'external' network.
+// This test loads these and ensures we have both.
 exports.napi_networks_ok = function (t) {
     client.napi.get('/networks', function (err, req, res, networks) {
         common.ifError(t, err);
@@ -331,11 +310,16 @@ exports.napi_networks_ok = function (t) {
         var adminExtNetworks = common.extractAdminAndExternalNetwork(networks);
         ADMIN_NETWORK = adminExtNetworks.admin;
         EXTERNAL_NETWORK = adminExtNetworks.external;
+        t.ok(ADMIN_NETWORK, 'admin network is ' +
+            (ADMIN_NETWORK ? ADMIN_NETWORK.uuid : ADMIN_NETWORK));
+        t.ok(EXTERNAL_NETWORK, 'external network is ' +
+            (EXTERNAL_NETWORK ? EXTERNAL_NETWORK.uuid : EXTERNAL_NETWORK));
         t.done();
     });
 };
 
 
+// Create 3 test VMs for later use
 exports.initialize_test_vms = function (t) {
     destroyTestVms(function (destroyErr, destroyObj) {
         common.ifError(t, destroyErr);
@@ -363,8 +347,15 @@ exports.initialize_test_vms = function (t) {
 };
 
 
+//
+// Ensure that we have no VMs that have 32MB of DRAM
+//
+// ARCHEOLOGICAL NOTE: It seems that the assumption here is that 32M is too
+// small for any package, and as such this is a "safe" value to query to test
+// that a search that has an empty result succeeds.
+//
 exports.filter_vms_empty = function (t) {
-    var path = '/vms?ram=32&owner_uuid=' + CUSTOMER;
+    var path = '/vms?ram=32&owner_uuid=' + CUSTOMER + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -379,7 +370,7 @@ exports.filter_vms_empty = function (t) {
 
 
 exports.filter_vms_ok = function (t) {
-    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER;
+    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -422,7 +413,7 @@ exports.filter_vms_advanced = function (t) {
 
 exports.filter_vms_predicate = function (t) {
     var pred  = JSON.stringify({ eq: [ 'brand', 'joyent-minimal' ] });
-    var path = '/vms?predicate=' + pred;
+    var path = '/vms?predicate=' + pred + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -448,7 +439,7 @@ exports.filter_vms_predicate = function (t) {
 exports.filter_vms_mixed = function (t) {
     var query = qs.escape('(ram=128)');
     var pred  = JSON.stringify({ eq: [ 'brand', 'joyent-minimal' ] });
-    var args  = 'owner_uuid=' + CUSTOMER;
+    var args  = 'owner_uuid=' + CUSTOMER + '&state=active';
 
     var path = '/vms?query=' + query + '&predicate=' + pred + '&' + args;
 
@@ -490,7 +481,7 @@ exports.filter_vms_mixed = function (t) {
 
 
 exports.limit_vms_ok = function (t) {
-    var path = '/vms?limit=5';
+    var path = '/vms?limit=5&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -506,7 +497,7 @@ exports.limit_vms_ok = function (t) {
 
 
 exports.head_vms_ok = function (t) {
-    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER;
+    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER + '&state=active';
     client.head(path, function (err, req, res) {
         common.ifError(t, err);
         t.equal(res.statusCode, 200, '200 OK');
@@ -520,7 +511,7 @@ exports.head_vms_ok = function (t) {
 
 
 exports.offset_vms_ok = function (t) {
-    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER + '&offset=2';
+    var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER + '&offset=2&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -538,7 +529,7 @@ exports.offset_vms_ok = function (t) {
 
 exports.offset_vms_at_end = function (t) {
     var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER +
-        '&offset=' + vmCount;
+        '&offset=' + vmCount + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -554,7 +545,7 @@ exports.offset_vms_at_end = function (t) {
 
 exports.offset_vms_beyond = function (t) {
     var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER +
-        '&offset=' + vmCount + 5;
+        '&offset=' + vmCount + 5 + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -572,7 +563,7 @@ exports.offset_fields_vms_ok = function (t) {
     // Currently we get lucky because the dhcpd0 and assets0 zones
     // are 128MBs zones
     var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER +
-        '&fields=uuid,alias&offset=1';
+        '&fields=uuid,alias&offset=1&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -598,7 +589,7 @@ exports.offset_fields_vms_ok = function (t) {
 
 exports.offset_fields_vms_beyond = function (t) {
     var path = '/vms?ram=' + 128 + '&owner_uuid=' + CUSTOMER +
-        '&fields=uuid,alias&offset=' + vmCount + 5;
+        '&fields=uuid,alias&offset=' + vmCount + 5 + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -625,7 +616,7 @@ exports.get_vm_not_found = function (t) {
 
 
 exports.get_vm_ok = function (t) {
-    var path = '/vms/' + muuid + '?owner_uuid=' + CUSTOMER;
+    var path = '/vms/' + muuid + '?owner_uuid=' + CUSTOMER + '&state=active';
 
     client.get(path, function (err, req, res, body) {
         common.ifError(t, err);
@@ -639,7 +630,7 @@ exports.get_vm_ok = function (t) {
 
 
 exports.head_vm_ok = function (t) {
-    var path = '/vms/' + muuid + '?owner_uuid=' + CUSTOMER;
+    var path = '/vms/' + muuid + '?owner_uuid=' + CUSTOMER + '&state=active';
     client.head(path, function (err, req, res) {
         common.ifError(t, err);
         t.equal(res.statusCode, 200, '200 OK');
@@ -663,10 +654,10 @@ exports.create_vm_locality_not_ok = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         creator_uuid: CUSTOMER,
@@ -696,10 +687,10 @@ exports.create_vm_tags_not_ok = function (t) {
         var vm = {
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
-            server_uuid: SERVER.uuid,
             networks: [ { uuid: ADMIN_NETWORK.uuid } ],
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
+            cpu_cap: 100,
             ram: 64,
             quota: 10,
             creator_uuid: CUSTOMER,
@@ -763,10 +754,10 @@ exports.create_vm_with_unknown_network = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: FAKE_NETWORK_UUID } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         creator_uuid: CUSTOMER
@@ -794,10 +785,10 @@ exports.create_vm_with_unknown_network_name = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { name: FAKE_NETWORK_NAME } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         creator_uuid: CUSTOMER
@@ -829,7 +820,10 @@ exports.create_vm_dapi_failure = function (t) {
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
-        ram: 64000000, // Something way too large
+        cpu_cap: 100,
+        internal_metadata: {
+            force_designation_failure: true // to force DAPI to fail this provision
+        },
         quota: 10,
         creator_uuid: CUSTOMER
     };
@@ -897,10 +891,10 @@ exports.create_vm = function (t) {
         alias: makeVmAlias(testUuid.generateShortUuid()),
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         customer_metadata: md,
@@ -1182,9 +1176,9 @@ exports.create_vm_with_already_provisioned_ip = function (t) {
             alias: makeVmAlias(testUuid.generateShortUuid()),
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
-            server_uuid: SERVER.uuid,
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
+            cpu_cap: 100,
             ram: 64,
             quota: 10,
             creator_uuid: CUSTOMER
@@ -1644,7 +1638,7 @@ exports.wait_new_tag = function (t) {
 
 
 exports.get_tag = function (t) {
-    var path = '/vms/' + newUuid + '/tags/role?owner_uuid=' + CUSTOMER;
+    var path = '/vms/' + newUuid + '/tags/role?owner_uuid=' + CUSTOMER + '&state=active';
 
     client.get(path, function (err, req, res, data) {
         common.ifError(t, err);
@@ -1992,10 +1986,10 @@ exports.create_nonautoboot_vm = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         autoboot: false
@@ -2140,10 +2134,10 @@ exports.create_vm_from_existing_nics = function (t) {
             uuid: VM_UUID,
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
-            server_uuid: SERVER.uuid,
             networks: [ { uuid: VALID_NIC.network_uuid } ],
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
+            cpu_cap: 100,
             ram: 64,
             quota: 10,
             creator_uuid: CUSTOMER
@@ -2223,7 +2217,6 @@ exports.create_vm_with_package = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: pkgId
@@ -2255,45 +2248,113 @@ exports.wait_provisioned_with_package_job = function (t) {
 };
 
 
-// if there's not enough spare RAM on a server, and we're resizing upwards, we
-// want it to fail
+//
+// If there's not enough spare RAM on a server, and we're resizing upwards, we
+// want the provision to fail. Failure should be the normal case for this
+// feature, since ideally it will never work if we've done a good job of packing
+// VMs.
+//
 exports.resize_package_up_fail = function (t) {
-    if (SERVER.datacenter !== 'coal' || !SERVER.headnode)
-        return t.done();
+    //
+    // NOTE: VM should have been created by:
+    //
+    // create_vm_with_package
+    //
+    // above which uses 'pkgId' set by:
+    //
+    // filter_vms_ok
+    //
+    // To the package of the first VM it could find with 128M of "ram".
+    // So the VM should exist and be using 128M of DRAM.
+    //
 
-    var path = '/vms?ram=' + 1024 + '&owner_uuid=' + CUSTOMER;
     var largerPkg;
+    var largeRamValue = // value is in MiB, so:
+            10 * 1024 * // 10 EiB should be enough for anyone
+            1024 *      // PiB
+            1024 *      // TiB
+            1024;       // GiB
+    var largeQuotaValue = largeRamValue * 1024; // EiB->ZiB
+    var path = '/vms?ram=' + 1024 + '&owner_uuid=' + CUSTOMER;
+    var pkgName = 'ginormous-vmapi-test-10EiB';
+    var pkgUuid;
+
+    vasync.pipeline({
+        arg: {},
+        funcs: [
+            function _createGinormousPackage(ctx, cb) {
+                client.papi.post('/packages', {
+                    active: true,
+                    cpu_cap: 10000,
+                    description:
+                        'Very large test package for VMAPI\'s vms.full.test.js',
+                    max_lwps: 30000,
+                    max_physical_memory: largeRamValue,
+                    max_swap: largeRamValue,
+                    name: pkgName,
+                    quota: largeQuotaValue,
+                    version: '1.0.0',
+                    vcpus: 32, // the largest papi currently allows LOL
+                    zfs_io_priority: 16383 // also largest papi currently allows
+                }, function _onPost(err, req, res, body) {
+                    common.ifError(t, err, 'POST ginormous package to PAPI');
+
+                    if (!err) {
+                        t.ok(body.uuid, 'created package uuid: ' + body.uuid);
+                        t.equal(pkgName, body.name,
+                            'response should be our fresh package');
+                        ctx.pkgUuid = body.uuid;
+                    }
 
-    client.get(path, function (err, req, res, body) {
-        common.ifError(t, err);
-        t.equal(res.statusCode, 200, '200 OK');
-        body.forEach(function (m) {
-            // Any non-null package works
-            if (m['billing_id'] &&
-                m['billing_id'] !== '00000000-0000-0000-0000-000000000000') {
-                largerPkg = m['billing_id'];
-            }
-        });
-
-        var params = { action: 'update', billing_id: largerPkg };
-
-        var opts = createOpts(vmLocation, params);
-
-        return client.post(opts, params, function (err2, req2, res2, body2) {
-            t.ok(err2);
-            t.equal(res2.statusCode, 409);
-
-            t.equal(body2.code, 'ValidationFailed');
-            t.equal(body2.message, 'Invalid VM update parameters');
+                    cb(err);
+                });
+            }, function _resizeToGinormous(ctx, cb) {
+                var params = {
+                    action: 'update',
+                    billing_id: ctx.pkgUuid
+                };
+                var opts = createOpts(vmLocation, params);
+
+                client.post(opts, params,
+                    function _onPost(err, req, res, body) {
+
+                    var error;
+
+                    t.ok(err, 'expected error POSTing resize');
+                    t.equal(res.statusCode, 409, 'expected HTTP code 409');
+                    t.equal(body.code, 'ValidationFailed',
+                        'expected ValidationFailed error');
+                    t.equal(body.message, 'Invalid VM update parameters',
+                        'expected invalid update message');
+
+                    error = body.errors[0];
+                    t.equal(error.field, 'ram', 'error should be due to ram');
+                    t.equal(error.code, 'InsufficientCapacity',
+                        'error code should be InsufficientCapacity');
+                    t.ok(error.message.match(
+                        'Required additional RAM \\(\\d+\\) ' +
+                        'exceeds the server\'s available RAM \\(\\d+\\)'),
+                        'error message should explain additional RAM required');
+
+                    cb();
+                });
+            }, function _deleteGinormousPackage(ctx, cb) {
+                client.papi.del({
+                    path: '/packages/' + ctx.pkgUuid + '?force=true'
+                }, function _onDel(err, req, res, body) {
+                    common.ifError(t, err, 'DELETE created package');
 
-            var error = body2.errors[0];
-            t.equal(error.field, 'ram');
-            t.equal(error.code, 'InsufficientCapacity');
-            t.ok(error.message.match('Required additional RAM \\(896\\) ' +
-                'exceeds the server\'s available RAM \\(-\\d+\\)'));
+                    t.equal(204, res.statusCode, 'expected 204 from DELETE');
+                    t.ok(!err, 'expected no restCode' +
+                        (err ? 'got ' + err.restCode : ''));
 
-            t.done();
-        });
+                    cb(err);
+                });
+            }
+        ]
+    }, function pipelineComplete(err) {
+        common.ifError(t, err, 'resize pipeline');
+        t.done();
     });
 };
 
@@ -2416,10 +2477,10 @@ exports.provision_network_names = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { name: ADMIN_NETWORK.name } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         creator_uuid: CUSTOMER
@@ -2510,10 +2571,10 @@ exports.invalid_firewall_rules = function (t) {
         var vm = {
             owner_uuid: CUSTOMER,
             image_uuid: IMAGE,
-            server_uuid: SERVER.uuid,
             networks: [ { name: ADMIN_NETWORK.uuid } ],
             brand: 'joyent-minimal',
             billing_id: '00000000-0000-0000-0000-000000000000',
+            cpu_cap: 100,
             ram: 64,
             quota: 10,
             creator_uuid: CUSTOMER,
@@ -2548,10 +2609,10 @@ exports.create_docker_vm = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_NETWORK.uuid } ],
         brand: 'joyent-minimal',
         billing_id: '00000000-0000-0000-0000-000000000000',
+        cpu_cap: 100,
         ram: 64,
         quota: 10,
         creator_uuid: CUSTOMER,
@@ -2653,13 +2714,14 @@ exports.set_docker_tag_2 = function (t) {
     var query = {
        foo: 'bar'
     };
-
     var opts = createOpts(path, query);
 
     client.put(opts, query, function (err, req, res, body) {
+        var restCode = (err ? err.restCode : undefined);
+
         t.ok(err);
         t.equal(res.statusCode, 409, '409 Conflict');
-        t.equal(err.restCode, 'ValidationFailed');
+        t.equal(restCode, 'ValidationFailed');
 
         t.deepEqual(body, {
             code: 'ValidationFailed',
@@ -2859,7 +2921,6 @@ exports.create_vm_on_fabric_network = function (t) {
     var vm = {
         owner_uuid: CUSTOMER,
         image_uuid: IMAGE,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: fabricNetwork.uuid } ],
         brand: 'joyent-minimal',
         billing_id: pkgId
diff --git a/test/vms.volumes.test.js b/test/vms.volumes.test.js
index 3422af5..1e2abe1 100644
--- a/test/vms.volumes.test.js
+++ b/test/vms.volumes.test.js
@@ -21,7 +21,6 @@ var client;
 var ADMIN_USER_UUID = common.config.ufdsAdminUuid;
 var ADMIN_FABRIC_NETWORK;
 var VMAPI_ORIGIN_IMAGE_UUID;
-var SERVER;
 var TEST_VOLUMES_NAME_PREFIX = 'vmapitest-volumes-';
 var VOLAPI_SERVICE_PRESENT = false;
 
@@ -33,6 +32,10 @@ function testIfVolapiPresent(testFunc) {
             t.ok(true, 'VOLAPI core service not present, skipping tests');
             t.done();
             return;
+        } else if (!client.volapi) {
+            t.ok(true, 'volapi client not present, skipping tests');
+            t.done();
+            return;
         }
 
         testFunc(t);
@@ -44,7 +47,6 @@ function getVmPayloadTemplate() {
         alias: 'vmapitest-volumes-' + testUuid.generateShortUuid(),
         owner_uuid: ADMIN_USER_UUID,
         image_uuid: VMAPI_ORIGIN_IMAGE_UUID,
-        server_uuid: SERVER.uuid,
         networks: [ { uuid: ADMIN_FABRIC_NETWORK.uuid } ],
         /*
          * We use the 'joyent' brand on purpose here since joyent-minimal
@@ -131,23 +133,6 @@ exports.get_admin_fabric_network = testIfVolapiPresent(function (t) {
     });
 });
 
-exports.find_headnode = testIfVolapiPresent(function (t) {
-    client.cnapi.get('/servers', function (err, req, res, servers) {
-        common.ifError(t, err);
-        t.equal(res.statusCode, 200, '200 OK');
-        t.ok(servers, 'servers is set');
-        t.ok(Array.isArray(servers), 'servers is Array');
-        for (var i = 0; i < servers.length; i++) {
-            if (servers[i].headnode === true) {
-                SERVER = servers[i];
-                break;
-            }
-        }
-        t.ok(SERVER, 'server found');
-        t.done();
-    });
-});
-
 exports.create_vm_invalid_volumes_params = testIfVolapiPresent(function (t) {
     var INVALID_VOLUMES_PARAMS = [
         null,
@@ -357,4 +342,4 @@ exports.create_vm_with_valid_volumes_params = testIfVolapiPresent(function (t) {
     }, function onAllInvalidVolParamsTestsDone(err) {
         t.done();
     });
-});
\ No newline at end of file
+});
