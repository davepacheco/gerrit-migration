commit f10686c462f036cc8ce25f9b9a0211f4da678dbf (refs/changes/08/2108/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-06-15T13:56:56-07:00 (2 years, 4 months ago)
    
    joyent/node-zkstream#10 support for bunyan logger

diff --git a/lib/client-fsm.js b/lib/client-fsm.js
index 157138a..ef9cab8 100644
--- a/lib/client-fsm.js
+++ b/lib/client-fsm.js
@@ -24,6 +24,16 @@ function ZKClientFSM(opts) {
 	mod_assert.object(opts, 'options');
 
 	mod_assert.optionalObject(opts.log, 'options.log');
+	if (opts.log == undefined) {
+		this.zs_log = mod_bunyan.createLogger({
+			name: 'zkstream',
+			component: 'ZKClientFSM'
+		});
+	} else {
+		this.zs_log = opts.log.child({
+			component: 'ZKClientFSM'
+		});
+	}
 
 	mod_assert.optionalArrayOfObject(opts.servers, 'options.servers');
 	if (opts.servers === undefined) {
@@ -92,6 +102,8 @@ ZKClientFSM.prototype.state_closed = function (S) {
 		S.gotoState('connecting');
 	});
 
+	this.zs_log.info('closing connection');
+
 	this.zs_encoder.end();
 	this.zs_encoder = undefined;
 	this.zs_socket.destroy();
@@ -118,8 +130,16 @@ ZKClientFSM.prototype.state_connecting = function (S) {
 	this.zs_encoder = new mod_zkstreams.ZKEncodeStream({
 		fsm: this
 	});
+
 	this.zs_server = this.zs_servers.shift();
 	this.zs_servers.push(this.zs_server);
+
+	this.zs_log = this.zs_log.child({
+		zkHost: this.zs_server.host,
+		zkPort: this.zs_server.port
+	});
+	this.zs_log.trace('attempting new connection');
+
 	this.zs_socket = mod_net.connect({
 		host: this.zs_server.host,
 		port: this.zs_server.port,
@@ -167,6 +187,15 @@ ZKClientFSM.prototype.state_handshaking = function (S) {
 			S.gotoState('closed');
 			return;
 		}
+		var verb = 'created';
+		if (self.zs_cr !== undefined) {
+			verb = 'resumed';
+		}
+		self.zs_log.info('%s zookeeper session %s with timeout %d ms',
+		    verb, pkt.sessionId.toString('hex'), pkt.timeOut);
+		self.zs_log = self.zs_log.child({
+			zkSessionId: pkt.sessionId.toString('hex')
+		});
 		self.zs_cr = pkt;
 		self.zs_lastPkt = new Date();
 		S.gotoState('connected');
@@ -191,6 +220,10 @@ ZKClientFSM.prototype.state_handshaking = function (S) {
 	});
 	this.zs_socket.pipe(this.zs_decoder);
 	this.zs_encoder.pipe(this.zs_socket);
+	if (this.zs_cr !== undefined) {
+		this.zs_log.trace('attempting to resume session %s',
+		    this.zs_cr.sessionId.toString('hex'));
+	}
 	this.zs_encoder.write({
 		protocolVersion: 0,
 		lastZxidSeen: this.zs_lastZxid,
@@ -222,6 +255,14 @@ ZKClientFSM.prototype.state_connected = function (S) {
 
 			if (pkt.opcode === 'NOTIFICATION') {
 				if (pkt.state !== 'SYNC_CONNECTED') {
+					self.zs_log.warn({
+						xid: pkt.xid,
+						errorCode: pkt.err,
+						state: pkt.state,
+						type: pkt.type,
+						zxid: pkt.zxid.toString('hex')
+					}, 'received notification with bad ' +
+					    'state %s', pkt.state);
 					continue;
 				}
 				var watcher = self.zs_watchers[pkt.path];
@@ -229,6 +270,13 @@ ZKClientFSM.prototype.state_connected = function (S) {
 				    replace(/_[a-z]/g, function (s) {
 					return (s.slice(1).toUpperCase());
 				    });
+				self.zs_log.trace({
+					xid: pkt.xid,
+					errorCode: pkt.err,
+					state: pkt.state,
+					zxid: pkt.zxid.toString('hex'),
+					type: pkt.type
+				}, 'notification %s for %s', evt, pkt.path);
 				if (watcher)
 					watcher.emit(evt);
 				continue;
@@ -241,6 +289,11 @@ ZKClientFSM.prototype.state_connected = function (S) {
 			}
 
 			var req = self.zs_reqs[pkt.xid];
+			self.zs_log.trace({
+				xid: pkt.xid,
+				opcode: req.packet.opcode,
+				errorCode: pkt.err
+			}, 'server replied to request');
 			if (req === undefined) {
 				self.emit('packet', pkt);
 			} else {
@@ -255,7 +308,9 @@ ZKClientFSM.prototype.state_connected = function (S) {
 		}
 	});
 	S.on(this.zs_decoder, 'end', function () {
-		S.gotoState('closed');
+		self.zs_lastError = new mod_errors.ZKProtocolError(
+		    'CONNECTION_LOSS', 'Connection closed unexpectedly.');
+		S.gotoState('error');
 	});
 	S.on(this.zs_decoder, 'error', function (err) {
 		self.zs_lastError = err;
@@ -269,6 +324,11 @@ ZKClientFSM.prototype.state_connected = function (S) {
 		self.zs_lastError = err;
 		S.gotoState('error');
 	});
+	S.on(this.zs_socket, 'close', function () {
+		self.zs_lastError = new mod_errors.ZKProtocolError(
+		    'CONNECTION_LOSS', 'Connection closed unexpectedly.');
+		S.gotoState('error');
+	});
 	S.on(this, 'closeAsserted', function () {
 		S.gotoState('closing');
 	});
@@ -321,6 +381,7 @@ ZKClientFSM.prototype.state_closing = function (S) {
 		self.zs_lastError = err;
 		S.gotoState('closed');
 	});
+	this.zs_log.info({ xid: xid }, 'sent CLOSE_SESSION request');
 	this.zs_encoder.write({
 		opcode: 'CLOSE_SESSION',
 		xid: xid
@@ -330,6 +391,8 @@ ZKClientFSM.prototype.state_closing = function (S) {
 
 ZKClientFSM.prototype.state_error = function (S) {
 	var self = this;
+	this.zs_log.warn(this.zs_lastError, 'error communicating with ZK, ' +
+	    'cancelling all outstanding requests');
 	Object.keys(this.zs_reqs).forEach(function (xid) {
 		self.zs_reqs[xid].emit('error', self.zs_lastError);
 	});
@@ -338,6 +401,9 @@ ZKClientFSM.prototype.state_error = function (S) {
 		var now = new Date();
 		var delta = now.getTime() - this.zs_lastPkt.getTime();
 		if (delta < this.zs_cr.timeOut) {
+			this.zs_log.trace('has been %d ms since last ' +
+			    'session renewal, will retry (session timeout = ' +
+			    '%d ms)', delta, this.zs_cr.timeOut);
 			S.gotoState('connecting');
 			return;
 		}
@@ -377,6 +443,7 @@ ZKClientFSM.prototype.ping = function (cb) {
 		delete (self.zs_reqs[pkt.xid]);
 		var t2 = new Date();
 		clearTimeout(timer);
+		self.zs_log.trace('ping ok in %d ms', (t2 - t1));
 		if (cb !== undefined)
 			cb(null, (t2 - t1));
 	}
@@ -424,6 +491,8 @@ ZKClientFSM.prototype.resumeWatchers = function () {
 	if (count < 1)
 		return;
 	var zxid = this.zs_lastZxid;
+	var hex = zxid.toString(16);
+	this.zs_log.info('re-arming %d node watchers at zxid %s', count, hex);
 	this.setWatches(events, zxid, function (err) {
 		if (err) {
 			self.emit('pingTimeout');
@@ -459,10 +528,6 @@ ZKClientFSM.prototype.setWatches = function (events, zxid, cb) {
 		delete (self.zs_reqs[pkt.xid]);
 		cb(null);
 	}
-	function onTimeout() {
-		req.removeListener('reply', onPacket);
-		self.emit('pingTimeout');
-	}
 	function onError(err) {
 		delete (self.zs_reqs[pkt.xid]);
 		cb(err);
@@ -480,12 +545,20 @@ ZKClientFSM.prototype.request = function (pkt) {
 	var self = this;
 	if (!this.isInState('connected'))
 		throw (new Error('Client must be connected to send packets'));
+
 	var req = new ZKRequest(pkt);
 	pkt.xid = this.nextXid();
 	this.zs_reqs[pkt.xid] = req;
 	req.once('reply', endRequest);
 	req.once('error', endRequest);
+
+	this.zs_log.trace({
+		xid: pkt.xid,
+		opcode: pkt.opcode
+	}, 'sent request to server');
+
 	this.zs_encoder.write(pkt);
+
 	return (req);
 
 	function endRequest() {
@@ -679,6 +752,10 @@ ZKWatcher.prototype.emit = function (evt) {
 		return;
 
 	if (!this.zkw_client.isInState('connected')) {
+		this.zkw_client.zs_log.trace({
+			event: evt,
+			clientState: this.zkw_client.getState()
+		}, 'deferring watcher refresh until after reconnect');
 		this.zkw_client.on('stateChanged', onStateChanged);
 		return;
 	}
diff --git a/test/basic.test.js b/test/basic.test.js
index 3823fa5..d2bd3d6 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -10,6 +10,12 @@ var mod_tape = require('tape');
 var mod_zk = require('./zkserver');
 var mod_zkc = require('../lib/index');
 var mod_net = require('net');
+var mod_bunyan = require('bunyan');
+
+var log = mod_bunyan.createLogger({
+	name: 'zkstream-test',
+	level: process.env.LOG_LEVEL || 'info'
+});
 
 var zk;
 
@@ -23,6 +29,7 @@ mod_tape.test('start zk server', function (t) {
 
 mod_tape.test('simple connect and ping', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -49,6 +56,7 @@ mod_tape.test('set up test object', function (t) {
 
 mod_tape.test('find the test object', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -85,6 +93,7 @@ mod_tape.test('find the test object', function (t) {
 
 mod_tape.test('delete the test object', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -104,6 +113,7 @@ mod_tape.test('delete the test object', function (t) {
 
 mod_tape.test('ask for a non-existent node', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -130,6 +140,7 @@ mod_tape.test('ask for a non-existent node', function (t) {
 
 mod_tape.test('create a new node', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -156,6 +167,7 @@ mod_tape.test('create a new node', function (t) {
 
 mod_tape.test('data watcher', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -187,6 +199,7 @@ mod_tape.test('data watcher', function (t) {
 
 mod_tape.test('delete it while watching', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -219,6 +232,7 @@ mod_tape.test('set up test object', function (t) {
 
 mod_tape.test('delete it while watching data', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -257,6 +271,7 @@ mod_tape.test('set up test object', function (t) {
 
 mod_tape.test('children watcher', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -306,12 +321,14 @@ mod_tape.test('session resumption with watcher', function (t) {
 	var closed = 0;
 
 	var zkc1 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
 	zkc1.connect();
 
 	var zkc2 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: 2181
 	});
@@ -369,7 +386,9 @@ mod_tape.test('session resumption with watcher', function (t) {
 		zkc2.stat('/foo', function (err, stat) {
 			t.error(err);
 
-			zkc1.zs_socket.destroy();
+			var sock = zkc1.zs_socket;
+			sock.emit('error', new Error('I killed it'));
+			sock.destroy();
 
 			var data = new Buffer('hello again');
 			zkc2.set('/foo', data, stat.version, function (err2) {
diff --git a/test/multi-node.test.js b/test/multi-node.test.js
index fd521ed..45347ee 100644
--- a/test/multi-node.test.js
+++ b/test/multi-node.test.js
@@ -10,6 +10,12 @@ var mod_tape = require('tape');
 var mod_zk = require('./zkserver');
 var mod_zkc = require('../lib/index');
 var mod_net = require('net');
+var mod_bunyan = require('bunyan');
+
+var log = mod_bunyan.createLogger({
+	name: 'zkstream-test',
+	level: process.env.LOG_LEVEL || 'info'
+});
 
 var zk1, zk2, zk3;
 
@@ -61,6 +67,7 @@ mod_tape.test('start zk servers', function (t) {
 
 mod_tape.test('simple connect and ping #1', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['1'].clientPort
 	});
@@ -80,6 +87,7 @@ mod_tape.test('simple connect and ping #1', function (t) {
 
 mod_tape.test('simple connect and ping #3', function (t) {
 	var zkc = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['3'].clientPort
 	});
@@ -101,11 +109,13 @@ mod_tape.test('write visibility', function (t) {
 	var connected = 0, closed = 0;
 
 	var zkc1 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['1'].clientPort
 	});
 	zkc1.connect();
 	var zkc2 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['2'].clientPort
 	});
@@ -158,11 +168,13 @@ mod_tape.test('cross-server data watch', function (t) {
 	var connected = 0, closed = 0;
 
 	var zkc1 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['1'].clientPort
 	});
 	zkc1.connect();
 	var zkc2 = new mod_zkc.Client({
+		log: log,
 		host: 'localhost',
 		port: zks['2'].clientPort
 	});
diff --git a/test/streams.test.js b/test/streams.test.js
index 536bbd1..e08b14f 100644
--- a/test/streams.test.js
+++ b/test/streams.test.js
@@ -10,6 +10,12 @@ var mod_tape = require('tape');
 
 var mod_zkbuf = require('../lib/zk-buffer');
 var mod_zkstreams = require('../lib/zk-streams');
+var mod_bunyan = require('bunyan');
+
+var log = mod_bunyan.createLogger({
+	name: 'zkstream-test',
+	level: process.env.LOG_LEVEL || 'info'
+});
 
 /* An example packet capture of "zkCli ls /" */
 var CAPTURE1 = [
