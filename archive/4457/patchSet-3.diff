From b7ed81ddb64ae1160c8f550f512d01b20adb7e1a Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 29 May 2019 18:30:35 +0000
Subject: [PATCH] TRITON-1214 Upgrade firewaller to node v6

---
 Makefile                      |   4 +-
 lib/agent.js                  | 108 +++++++++++++-------------
 package.json                  |  23 +++---
 test/unit/all-vms.test.js     |   2 +-
 test/unit/helpers.js          | 142 +++++++++++++++++++++++++---------
 test/unit/mocks.js            |   4 +-
 test/unit/rule-add.test.js    |   2 +-
 test/unit/rule-delete.test.js |   2 +-
 test/unit/rule-update.test.js |   2 +-
 test/unit/sync.test.js        |   9 ++-
 test/unit/vm-add.test.js      |   2 +-
 test/unit/vm-delete.test.js   |   2 +-
 test/unit/vm-update.test.js   |   2 +-
 13 files changed, 185 insertions(+), 119 deletions(-)

diff --git a/Makefile b/Makefile
index 607e701..d5d17f3 100644
--- a/Makefile
+++ b/Makefile
@@ -33,9 +33,9 @@ include ./deps/eng/tools/mk/Makefile.defs
 TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 
 ifeq ($(shell uname -s),SunOS)
-	NODE_PREBUILT_VERSION=v0.10.48
+	NODE_PREBUILT_VERSION=v6.17.0
 	NODE_PREBUILT_TAG=gz
-	NODE_PREBUILT_IMAGE=fd2cc906-8938-11e3-beab-4359c665ac99
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
 endif
 
 ifeq ($(shell uname -s),SunOS)
diff --git a/lib/agent.js b/lib/agent.js
index 580c9b7..fab382b 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -20,10 +20,10 @@ var endpoints = require('./endpoints');
 var EventEmitter = require('events').EventEmitter;
 var fs = require('fs');
 var fw = require('./fw');
+var mod_messages = require('fast-messages');
 var os = require('os');
 var path = require('path');
 var restify = require('restify');
-var stream = require('fast-stream');
 var tasks = require('./tasks');
 var uuid = require('uuid');
 var util = require('util');
@@ -125,7 +125,7 @@ function FwAgent(opts) {
         fw._setOldIPF();
     }
 
-    this.client = stream.createClient(this.config.fwapi.fast);
+    this.client = mod_messages.createClient(this.config.fwapi.fast);
 
     /**
      * We use two queues: one for requests that come in via the HTTP API, and
@@ -141,7 +141,9 @@ function FwAgent(opts) {
 
     this.recentTasks = [];
     this.server = restify.createServer({
+        log: this.log,
         name: 'firewaller',
+        handleUncaughtExceptions: false,
         version: VERSION
     });
 
@@ -201,65 +203,61 @@ FwAgent.prototype.connect = function connect(callback) {
     var client = this.client;
     var self = this;
 
-    this.server.listen(this.config.restify.port, this.config.listenIP,
-            function () {
-        self.serverListening = true;
-        self.log.info('listening on %s', self.server.url);
-
-        client.connect(function (err) {
+    client.on('connect', function () {
+        client.ping(function (err) {
             if (err) {
-                callback(err);
+                self.log.error(err, 'error pinging');
                 return;
             }
 
-            client.ping(function (err2, res) {
-                if (err2) {
-                    self.log.error(err2, 'error pinging');
-                    return;
-                }
-
-                self.log.info(res, 'server %s ping OK', self.config.fwapi.host);
-            });
-
-            client.start(function (err3) {
-                if (err3) {
-                    return callback(err3);
-                }
-
-                client.on('message', function handleMessage(message) {
-                    if (!message.req_id) {
-                        message.req_id = uuid.v4();
-                    }
-
-                    var log = self.log.child({
-                        req_id: message.req_id
-                    });
-
-                    log.debug({ message: message }, 'message received');
-                    if (!tasks.hasOwnProperty(message.name)) {
-                        self.log.warn({ message: message },
-                            'Receieved unknown message type: ignoring');
-                        return;
-                    }
-
-                    if (!message.value) {
-                        self.log.warn({ message: message }, 'Received '
-                            + 'message without value property: ignoring');
-                        return;
-                    }
-
-                    self.queue.push(message);
-                });
-
-                var syncTime = self.config.syncInterval * 60 * 1000;
-                self.log.debug({ interval: syncTime }, 'sync interval');
-                self.syncInterval = setInterval(runSyncInterval, syncTime,
-                    self.log, self.queue);
-
-                return callback();
-            });
+            self.log.info('server %s ping OK', self.config.fwapi.host);
         });
+
+        client.start();
+    });
+
+    client.on('start', function () {
+        var syncTime = self.config.syncInterval * 60 * 1000;
+        self.log.debug({ interval: syncTime }, 'sync interval');
+        self.syncInterval = setInterval(runSyncInterval, syncTime,
+            self.log, self.queue);
+
+        callback();
     });
+
+    client.on('message', function handleMessage(message) {
+        if (!message.req_id) {
+            message.req_id = uuid.v4();
+        }
+
+        var log = self.log.child({
+            req_id: message.req_id
+        });
+
+        log.debug({ message: message }, 'message received');
+        if (!tasks.hasOwnProperty(message.name)) {
+            self.log.warn({ message: message },
+                'Received unknown message type: ignoring');
+            return;
+        }
+
+        if (!message.value) {
+            self.log.warn({ message: message },
+                'Received message without value property: ignoring');
+            return;
+        }
+
+        self.queue.push(message);
+    });
+
+    self.server.on('listening', function () {
+        self.serverListening = true;
+        self.log.info('listening on %s', self.server.url);
+
+        client.connect();
+    });
+
+    self.server.listen(self.config.restify.port, self.config.listenIP);
 };
 
 
diff --git a/package.json b/package.json
index 2acbdef..d9d34e0 100644
--- a/package.json
+++ b/package.json
@@ -1,34 +1,33 @@
 {
     "name": "firewaller",
     "description": "Triton Data Center firewalling agent",
-    "version": "1.5.5",
+    "version": "1.6.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "dependencies": {
         "assert-plus": "1.0.0",
         "backoff": "2.3.0",
-        "bunyan": "0.22.1",
+        "bunyan": "1.8.12",
         "clone": "1.0.2",
         "cueball": "2.10.0",
-        "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
+        "fast-messages": "git+https://github.com/joyent/node-fast-messages.git#v2-rewrite",
         "fw": "./deps/fw",
         "jsprim": "2.0.0",
-        "lockfd": "~1.2.1",
-        "restify": "2.6.1",
-        "sdc-clients": "12.1.1",
+        "lockfd": "2.0.2",
+        "restify": "4.3.4",
+        "sdc-clients": "13.0.1",
         "triton-netconfig": "1.3.0",
         "uuid": "3.0.1",
         "vasync": "1.6.3",
-        "verror": "1.3.6"
+        "verror": "1.10.0"
     },
     "devDependencies": {
-        "eslint": "2.13.1",
-        "eslint-plugin-joyent": "1.1.0",
+        "eslint": "4.19.1",
+        "eslint-plugin-joyent": "~2.0.0",
         "once": "1.3.0",
-        "ldapjs": "0.7.0",
+        "ldap-filter": "0.3.3",
         "mockery": "1.4.0",
-        "nodeunit": "0.9.1",
-        "xtend": "2.1.2"
+        "nodeunit": "0.9.1"
     },
     "scripts": {
         "test": "./test.sh",
diff --git a/test/unit/all-vms.test.js b/test/unit/all-vms.test.js
index 49b69e5..bf8ee56 100644
--- a/test/unit/all-vms.test.js
+++ b/test/unit/all-vms.test.js
@@ -55,7 +55,7 @@ var d = {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.done();
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 8903569..2c65720 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -22,34 +22,35 @@ var createRemoteVM =
 var firewaller;
 var fwMocks = require('../../node_modules/fw/test/lib/mocks');
 var fwHelpers = require('../../node_modules/fw/test/lib/helpers');
-var extend = require('xtend');
 var fs = require('fs');
 var jsprim = require('jsprim');
+var messages = require('fast-messages');
 var mocks = require('./mocks');
+var mod_jsprim = require('jsprim');
 var mod_uuid = require('uuid');
 var once = require('once');
 var path = require('path');
 var pred = require('../../lib/pred');
 var restify = require('restify');
-var stream = require('fast-stream');
 var util = require('util');
 var uuidSort = mocks._uuidSort;
 
+var extend = mod_jsprim.mergeObjects;
 
 
 // --- Globals
 
 
 
-var AGENT;
+var AGENT = null;
 var CLIENT = restify.createJsonClient({
     agent: false,
-    url: 'http://localhost:2021'
+    url: 'http://127.0.0.1:2021'
 });
 var ID = 1;
 var INITIAL_DATA;
 var LOCAL_SERVER = 'eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee';
-var STREAM;
+var STREAM = null;
 var OWNER_UUID = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';
 var OTHER_SERVER = 'dddddddd-dddd-dddd-dddd-dddddddddddd';
 
@@ -129,43 +130,77 @@ function setupMocks() {
 
     var allowed = [
         './',
+        './_stream_duplex',
+        './_stream_readable',
+        './_stream_transform',
+        './_stream_writable',
         './add-rule',
         './agent',
+        './backoff',
         './bunyan_helper',
         './cache',
-        './charset.js',
         './constants',
-        './dictionary',
+        './debug',
         './del-rule',
+        './dictionary',
         './dtrace',
-        './formatters',
-        './encoding.js',
         './endpoints',
         './errors',
+        './formatters',
         './framer',
         './fw',
+        './hpack-pool',
+        './hpack/compressor',
+        './hpack/decoder',
+        './hpack/decompressor',
+        './hpack/encoder',
+        './hpack/huffman',
+        './hpack/static-table',
+        './hpack/table',
+        './hpack/utils',
         './http_date',
-        './language.js',
-        './mediaType.js',
+        './internal/streams/BufferList',
+        './internal/streams/destroy',
+        './internal/streams/stream',
+        './lib/_stream_duplex.js',
+        './lib/_stream_passthrough.js',
+        './lib/_stream_readable.js',
+        './lib/_stream_transform.js',
+        './lib/_stream_writable.js',
+        './lib/backoff',
+        './lib/function_call.js',
+        './lib/mediaType',
+        './lib/strategy/exponential',
+        './lib/strategy/fibonacci',
+        './node.js',
         './ping',
         './plugins/cors',
         './pred',
-        './response',
+        './queue',
         './request',
-        './rules',
+        './response',
         './router',
+        './rules',
         './rvms',
+        './scheduler',
         './server',
-        './spdy/client',
-        './spdy/connection',
-        './spdy/protocol',
+        './spdy-transport/connection',
+        './spdy-transport/priority',
+        './spdy-transport/protocol/base',
+        './spdy-transport/protocol/http2',
+        './spdy-transport/protocol/spdy',
+        './spdy-transport/stream',
+        './spdy-transport/utils',
+        './spdy-transport/window',
+        './spdy/agent',
+        './spdy/handle',
+        './spdy/request',
         './spdy/response',
-        './spdy/scheduler',
         './spdy/server',
-        './spdy/stream',
-        './spdy/utils',
-        './spdy/zlib-pool',
+        './spdy/socket',
         './status',
+        './strategy',
+        './strategy/fibonacci',
         './sync',
         './tasks',
         './update-rule',
@@ -178,36 +213,61 @@ function setupMocks() {
         './vm-common',
         './vm-delete',
         './vm-update',
+        './zlib-pool',
         '../fw',
         '../fwapi',
-        '../spdy',
         '../vm',
         '../vmapi',
+        '../hpack',
+        '../spdy',
+        '../spdy-transport',
         '../../lib/agent',
-        '../../spdy',
+        '../../../spdy-transport',
         'backoff',
+        'buffer-shims',
         'buffer',
+        'core-util-is',
         'crypto',
+        'debug',
         'deep-equal',
+        'detect-node',
         'domain',
-        'fast-stream',
+        'fast-messages',
         'fw',
         'fw/lib/util/log',
+        'handle-thing',
+        'hpack.js',
+        'http-deceiver',
         'http',
         'https',
-        'jsprim',
+        'inherits',
+        'isarray',
         'json-schema',
+        'jsprim',
         'lru-cache',
         'mime',
+        'minimalistic-assert',
+        'ms',
         'negotiator',
+        'obuf',
         'once',
         'os',
         'path',
+        'process-nextick-args',
+        'readable-stream',
         'restify',
+        'safe-buffer',
+        'select-hose',
         'semver',
+        'spdy-transport',
         'spdy',
+        'tls',
+        'tty',
         'url',
         'uuid',
+        'util-deprecate',
+        'vasync',
+        'wbuf',
         'zlib'
     ];
 
@@ -248,11 +308,12 @@ function convertVMtoRVM(inVMs) {
  * Create both the firewall agent and a fake FWAPI for it to connect to. If
  * connect is true, connect the agent to the fake FWAPI.
  */
-function createAgent(t, connect, callback) {
-    if (!callback) {
-        callback = connect;
-        connect = false;
-    }
+function createAgent(t, callback) {
+    assert.object(t, 't');
+    assert.func(callback, 'callback');
+
+    assert.equal(AGENT, null, 'No existing AGENT');
+    assert.equal(STREAM, null, 'No existing STREAM');
 
     var conf = JSON.parse(fs.readFileSync(path.normalize(
         __dirname + '/../../config.json'), 'utf-8'));
@@ -267,7 +328,12 @@ function createAgent(t, connect, callback) {
 
     conf.log = bunyan.createLogger({
         name: 'firewaller',
-        level: process.env.LOG_LEVEL || 'fatal'
+        streams: [
+            {
+                level: process.env.LOG_LEVEL || 'fatal',
+                stream: process.stderr
+            }
+        ]
     });
 
     if (!firewaller) {
@@ -275,7 +341,7 @@ function createAgent(t, connect, callback) {
         firewaller = require('../../lib/agent');
     }
 
-    STREAM = stream.createServer({
+    STREAM = messages.createServer({
         log: conf.log,
         server_id: 'ffffffff-ffff-ffff-ffff-ffffffffffff'
     });
@@ -285,20 +351,17 @@ function createAgent(t, connect, callback) {
 
         AGENT = firewaller.create(conf);
         t.ok(AGENT, 'created agent');
-        if (!connect) {
-            callback(AGENT);
-            return;
-        }
 
         AGENT.connect(function (err2) {
             if (err2) {
                 t.ifError(err2);
-                return callback(err2, null);
+                callback(err2, null);
+                return;
             }
 
             t.ok(!err2, 'agent connected');
 
-            return callback(null, AGENT);
+            callback(null, AGENT);
         });
     });
 }
@@ -483,17 +546,20 @@ function sendMessage(name, value, callback) {
 function teardown(t) {
     if (AGENT) {
         AGENT.close();
+        AGENT = null;
     }
 
     if (STREAM) {
         STREAM.close();
+        STREAM = null;
     }
 
     if (CLIENT) {
         CLIENT.close();
+        CLIENT = null;
     }
 
-    return t.done();
+    t.done();
 }
 
 
diff --git a/test/unit/mocks.js b/test/unit/mocks.js
index 3d370eb..8c0f340 100644
--- a/test/unit/mocks.js
+++ b/test/unit/mocks.js
@@ -20,7 +20,7 @@ var clone = require('clone');
 var createRemoteVM =
     require('../../node_modules/fw/lib/util/vm').createRemoteVM;
 var fwMocks = require('../../node_modules/fw/test/lib/mocks');
-var ldapjs = require('ldapjs');
+var mod_filter = require('ldap-filter');
 var mod_log = require('../lib/log');
 var pred = require('../../deps/vmapi/lib/common/predicate');
 var util = require('util');
@@ -187,7 +187,7 @@ MockVMAPI.prototype.get = function vmsGet(params, callback) {
 
     var parsedPred = JSON.parse(params.query.predicate);
     var ldapQuery = pred.toLdapQuery(parsedPred);
-    var filter = ldapjs.parseFilter(ldapQuery);
+    var filter = mod_filter.parse(ldapQuery);
 
     LOG.debug({ pred: parsedPred, query: ldapQuery }, 'listVMs: query');
 
diff --git a/test/unit/rule-add.test.js b/test/unit/rule-add.test.js
index 62867b3..90894f3 100644
--- a/test/unit/rule-add.test.js
+++ b/test/unit/rule-add.test.js
@@ -47,7 +47,7 @@ var d = {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.ok(agent, 'agent created');
diff --git a/test/unit/rule-delete.test.js b/test/unit/rule-delete.test.js
index b014e28..bce609e 100644
--- a/test/unit/rule-delete.test.js
+++ b/test/unit/rule-delete.test.js
@@ -34,7 +34,7 @@ var agent;
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.ok(agent, 'agent created');
diff --git a/test/unit/rule-update.test.js b/test/unit/rule-update.test.js
index 05066f2..e98f53f 100644
--- a/test/unit/rule-update.test.js
+++ b/test/unit/rule-update.test.js
@@ -40,7 +40,7 @@ var d = {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.ok(agent, 'agent created');
diff --git a/test/unit/sync.test.js b/test/unit/sync.test.js
index 708f8ad..be7472f 100644
--- a/test/unit/sync.test.js
+++ b/test/unit/sync.test.js
@@ -14,13 +14,14 @@
 
 'use strict';
 
-var extend = require('xtend');
 var h = require('./helpers');
+var mod_jsprim = require('jsprim');
 var mod_rule = require('../lib/rule');
 var mod_rvm = require('../lib/rvm');
 var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
+var extend = mod_jsprim.mergeObjects;
 
 
 // --- Globals
@@ -57,9 +58,11 @@ function sync(t) {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, function (a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
-        return t.done();
+        t.ifError(err, 'createAgent() error');
+        t.ok(agent, 'agent created');
+        t.done();
     });
 };
 
diff --git a/test/unit/vm-add.test.js b/test/unit/vm-add.test.js
index 803ea5b..9bb37ef 100644
--- a/test/unit/vm-add.test.js
+++ b/test/unit/vm-add.test.js
@@ -45,7 +45,7 @@ var d = {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.done();
diff --git a/test/unit/vm-delete.test.js b/test/unit/vm-delete.test.js
index f6bb676..59f2a56 100644
--- a/test/unit/vm-delete.test.js
+++ b/test/unit/vm-delete.test.js
@@ -32,7 +32,7 @@ var agent;
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ok(agent, 'agent created');
         t.ifError(err, 'createAgent() error');
diff --git a/test/unit/vm-update.test.js b/test/unit/vm-update.test.js
index 5a4eef5..e374b77 100644
--- a/test/unit/vm-update.test.js
+++ b/test/unit/vm-update.test.js
@@ -47,7 +47,7 @@ var d = {
 
 
 exports.setup = function (t) {
-    h.createAgent(t, true, function (err, a) {
+    h.createAgent(t, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
         t.done();
-- 
2.21.0

