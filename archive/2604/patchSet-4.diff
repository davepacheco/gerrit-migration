From a0dbdc70ba543b79c093ab3fe9bca6d7844d286a Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 20 Sep 2017 16:44:13 +0200
Subject: [PATCH] CAPI-535 runtests is incorrectly reporting success when test
 suite exits with non zero value Reviewed by: Trent Mick <trentm@gmail.com>
 Approved by: Trent Mick <trentm@gmail.com>

---
 lib/salt.js   | 142 ++++++++++++++++++++++++++++++++------------------
 test/runtests |  11 ++--
 2 files changed, 99 insertions(+), 54 deletions(-)

diff --git a/lib/salt.js b/lib/salt.js
index ab656ad..977c642 100644
--- a/lib/salt.js
+++ b/lib/salt.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -29,7 +29,7 @@ var util = require('util');
 
 var ldap = require('ldapjs');
 var bcrypt = require('bcrypt');
-
+var vasync = require('vasync');
 
 // --- API
 
@@ -93,34 +93,59 @@ function loadPwdPolicy(req, entry, callback) {
     // the global pwdPolicy. But when we're talking about sub-users, then
     // we want to lookup for account policy before default to global.
 
-    // Set it to the default first:
-    var key = 'cn=pwdpolicy, ' + req.suffix;
+    var arg = {
+        // Set it to the default first:
+        key: 'cn=pwdpolicy, ' + req.suffix
+    };
 
-    var account_key = '';
-    if (req._entry && req.suffix !== req._entry._parent[0]) {
-        account_key = 'cn=pwdpolicy, ' + req._entry._parent[0];
-    }
-    return req.exists(req.bucket, account_key, function (err, exists) {
-        if (err) {
-            return callback(err);
-        }
+    vasync.pipeline({
+        arg: arg,
+        funcs: [
+            function checkIfAccountKeyExists(ctx, next) {
+                if (req._entry && req.suffix !== req._entry._parent[0]) {
+                    ctx.account_key = 'cn=pwdpolicy, ' + req._entry._parent[0];
+                }
 
-        if (exists) {
-            key = account_key;
-        }
+                if (!ctx.account_key) {
+                    next();
+                    return;
+                }
+                req.exists(req.bucket, ctx.account_key, function (err, exists) {
+                    if (err) {
+                        next(err);
+                        return;
+                    }
 
-        // If it's explicitly overriden, take that value and move forward:
-        if (entry.pwdpolicysubentry && entry.pwdpolicysubentry.length !== 0) {
-            key = entry.pwdpolicysubentry;
-        }
+                    if (exists) {
+                        ctx.key = ctx.account_key;
+                    }
+                    next();
+                });
+            },
+            function getPolicyByKey(ctx, next) {
+                // If it's explicitly overriden, take that value and move
+                // forward:
+                if (entry.pwdpolicysubentry &&
+                    entry.pwdpolicysubentry.length !== 0) {
+                    ctx.key = entry.pwdpolicysubentry;
+                }
 
-        return req.get(req.bucket, key, function (err2, val) {
-            if (err2) {
-                return callback(err2);
+                req.get(req.bucket, ctx.key, function (err, val) {
+                    if (err) {
+                        next(err);
+                        return;
+                    }
+                    ctx.value = val.value;
+                    next();
+                });
             }
-            return callback(null, val.value);
-        });
-
+        ]
+    }, function pipeCb(pipeErr) {
+        if (pipeErr) {
+            callback(pipeErr);
+            return;
+        }
+        callback(null, arg.value);
     });
 }
 
@@ -157,13 +182,14 @@ function validatePassword(password, policy, callback) {
 function add(req, res, next) {
     var entry = req.toObject().attributes;
     if (!entry.userpassword || entry.userpassword.length === 0) {
-        return next();
+        next();
+        return;
     }
 
     var now = Date.now();
     // We need the last time the password changed both, to know if a pwd
     // remains active, and to sort old passwords by time
-    if (!entry.pwdchangedtime ||Â entry.pwdchangedtime.length === 0) {
+    if (!entry.pwdchangedtime || entry.pwdchangedtime.length === 0) {
         req.attributes.push(new ldap.Attribute({
             type: 'pwdchangedtime',
             vals: [now]
@@ -177,11 +203,13 @@ function add(req, res, next) {
             type: '_imported',
             vals: ['true']
         }));
-        return next();
+        next();
+        return;
     }
 
     if (entry._replicated && !req.config.ufds_is_master) {
-        return next();
+        next();
+        return;
     }
 
     if (!entry.created_at || entry.created_at.length === 0) {
@@ -213,7 +241,8 @@ function add(req, res, next) {
 
         validatePassword(entry.userpassword[0], pwdPolicy, function (er1) {
             if (er1) {
-                return next(er1);
+                next(er1);
+                return;
             }
 
             var salted = (req.use_bcrypt === false) ?
@@ -224,7 +253,6 @@ function add(req, res, next) {
                 type: '_salt',
                 vals: [salted.salt]
             }));
-
             if (pwdPolicy &&
                 pwdPolicy.pwdmaxage && pwdPolicy.pwdmaxage.length) {
                 req.addAttribute(new ldap.Attribute({
@@ -246,7 +274,8 @@ function add(req, res, next) {
                 }
             }
 
-            return next();
+            next();
+            return;
 
         });
     });
@@ -254,16 +283,18 @@ function add(req, res, next) {
 
 
 function bind(req, res, next) {
-    return loadSalt(req, function (err, salt, entry) {
+    loadSalt(req, function (err, salt, entry) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         // Check if password is expired:
         var now = Date.now();
         if (entry.pwdendtime && entry.pwdendtime.length &&
             now > entry.pwdendtime[0]) {
-            return next(new ldap.InvalidCredentialsError('passwordExpired'));
+            next(new ldap.InvalidCredentialsError('passwordExpired'));
+            return;
         }
 
         req.credentials = (req.use_bcrypt === false) ?
@@ -275,7 +306,8 @@ function bind(req, res, next) {
                 pwdPolicy = null;
             }
             req._policy = pwdPolicy;
-            return next();
+            next();
+            return;
         });
     });
 }
@@ -283,24 +315,28 @@ function bind(req, res, next) {
 
 function compare(req, res, next) {
     if (req.attribute !== 'userpassword') {
-        return next();
+        next();
+        return;
     }
 
-    return loadSalt(req, function (err, salt, entry) {
+    loadSalt(req, function (err, salt, entry) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         // Check if password is expired:
         var now = Date.now();
         if (entry.pwdendtime && entry.pwdendtime.length &&
             now > entry.pwdendtime[0]) {
-            return next(new ldap.CompareFalseError('passwordExpired'));
+            next(new ldap.CompareFalseError('passwordExpired'));
+            return;
         }
         // Check if account is locked:
         if (entry.pwdaccountlockedtime && entry.pwdaccountlockedtime.length &&
             now < entry.pwdaccountlockedtime[0]) {
-            return next(new ldap.CompareFalseError('accountLocked'));
+            next(new ldap.CompareFalseError('accountLocked'));
+            return;
         }
 
         if (salt.length !== 29 || req.use_bcrypt === false) {
@@ -314,7 +350,8 @@ function compare(req, res, next) {
                 pwdPolicy = null;
             }
             req._policy = pwdPolicy;
-            return next();
+            next();
+            return;
         });
     });
 }
@@ -448,18 +485,21 @@ function modify(req, res, next) {
     }
 
     if (!toSalt) {
-        return next();
+        next();
+        return;
     }
 
     var now = Date.now();
 
-    return loadSalt(req, function (err, salt, entry) {
+    loadSalt(req, function (err, salt, entry) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         if (entry._replicated && !req.config.ufds_is_master) {
-            return next();
+            next();
+            return;
         }
         var orig = req.changes[i]._modification.vals[0];
 
@@ -470,7 +510,8 @@ function modify(req, res, next) {
 
             validatePassword(orig, pwdPolicy, function (er1) {
                 if (er1) {
-                    return next(er1);
+                    next(er1);
+                    return;
                 }
 
                 var encrypted_password;
@@ -496,7 +537,8 @@ function modify(req, res, next) {
                                 sha1_salt,
                                 function (er2) {
                     if (er2) {
-                        return next(er2);
+                        next(er2);
+                        return;
                     }
 
                     req.changes[i].modification = {
@@ -562,8 +604,8 @@ function modify(req, res, next) {
                         }));
                     }
 
-                    return next();
-
+                    next();
+                    return;
                 });
             });
         });
diff --git a/test/runtests b/test/runtests
index 23e3359..6b9e1dd 100755
--- a/test/runtests
+++ b/test/runtests
@@ -18,10 +18,9 @@ if [ "$TRACE" != "" ]; then
     export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
     set -o xtrace
 fi
-# With this stuff enabled we'll get not summary at the end of the tests
-# execution if any test wrote to stderr.
-#set -o errexit
-#set -o pipefail
+
+set -o errexit
+set -o pipefail
 
 
 
@@ -112,10 +111,13 @@ if [[ -n "$opt_test_pattern" ]]; then
     echo "# Running filtered set of test files: $test_files"
 fi
 
+set +o errexit
 if [[ -n "$test_files" ]]; then
     PATH=$NODE_INSTALL/bin:$PATH TEST_CONFIG_FILE=$TOP/etc/config.json node test/test.js \
         | tee $OUTPUT_DIR/ufds.tap
 fi
+rv=$?
+set -o errexit
 
 echo ""
 echo "# test output:"
@@ -147,3 +149,4 @@ echo ""
 if [[ ${tests} != ${passed} ]]; then
     exit 1
 fi
+exit $rv
-- 
2.21.0

