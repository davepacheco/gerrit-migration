From 87b4ed8670bb89b7df6473f4abcc610c748165df Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Mon, 27 Feb 2017 17:41:55 -0800
Subject: [PATCH] joyent/node-cueball#101 want "connectionHandlesError" option
 for moray Reviewed by: Cody Peter Mello <cody.mello@joyent.com>

---
 CHANGES.adoc          | 3 +++
 docs/api.adoc         | 5 +++++
 lib/connection-fsm.js | 7 ++++++-
 lib/set.js            | 5 +++++
 4 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/CHANGES.adoc b/CHANGES.adoc
index f24f900..9210a4f 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -14,6 +14,9 @@ API changes:
 
  - The `DNSResolver` class is now exported in the package root, as specified
    in the documentation. It was mistakenly left out.
+ - Users of `ConnectionSet` can now supply the option `connectionHandlesError`
+   to avoid the need to add a no-op `"error"` handler when using a `constructor`
+   that already handles errors.
 
 ### v2.1.1
 
diff --git a/docs/api.adoc b/docs/api.adoc
index 7a19bc3..2b0e685 100644
--- a/docs/api.adoc
+++ b/docs/api.adoc
@@ -651,6 +651,11 @@ Parameters
                   Note that this number may temporarily be exceeded by 1 socket
                   to allow the set to re-balance.
    * `log` -- optional Object, a `bunyan`-style logger to use
+   * `connectionHandlesError` -- optional Boolean (default `false`). If `true`,
+                                 cueball assumes that the connection object (the
+                                 instance returned from `constructor`) handles
+                                 `"error"` events internally and the emission of
+                                 this event is for cueball's information only.
 
 ### `->added(key, connection, handle)`
 
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index dbeeb0d..2b776fd 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -474,6 +474,11 @@ function CueBallClaimHandle(options) {
 	mod_assert.object(options.pool, 'options.pool');
 	this.ch_pool = options.pool;
 
+	mod_assert.optionalBool(options.throwError, 'options.throwError');
+	this.ch_throwError = options.throwError;
+	if (options.throwError === undefined || options.throwError === null)
+		this.ch_throwError = true;
+
 	mod_assert.string(options.claimStack, 'options.claimStack');
 	this.ch_claimStack = options.claimStack.split('\n').slice(1).
 	    map(function (l) { return (l.replace(/^[ ]*at /, '')); });
@@ -628,7 +633,7 @@ CueBallClaimHandle.prototype.state_claimed = function (S) {
 
 	S.on(this.ch_connection, 'error', function clHandleErrorListener(err) {
 		var count = countListeners(self.ch_connection, 'error');
-		if (count === 0) {
+		if (count === 0 && self.ch_throwError) {
 			/*
 			 * Our end-user never set up an 'error' event listener
 			 * and the socket emitted 'error'. We want to act like
diff --git a/lib/set.js b/lib/set.js
index 2ff0e2a..4775484 100644
--- a/lib/set.js
+++ b/lib/set.js
@@ -46,6 +46,10 @@ function CueBallConnectionSet(options) {
 	mod_utils.assertRecoverySet(options.recovery);
 	this.cs_recovery = options.recovery;
 
+	mod_assert.optionalBool(options.connectionHandlesError,
+	    'options.connectionHandlesError');
+	this.cs_connHandlesErr = !!(options.connectionHandlesError);
+
 	mod_assert.optionalObject(options.log, 'options.log');
 	this.cs_log = options.log || mod_bunyan.createLogger({
 		name: 'cueball'
@@ -674,6 +678,7 @@ LogicalConnection.prototype.state_init = function (S) {
 		    ' at CueBallConnectionSet.addConnection',
 		callback: S.callback(onClaimed),
 		log: this.lc_log,
+		throwError: !(this.lc_set.cs_connHandlesErr),
 		claimTimeout: Infinity
 	};
 	this.lc_hdl = new CueBallClaimHandle(hdlOpts);
-- 
2.21.0

