commit 0e927b03be4ddc4000cedd236dae4eb36971af39 (refs/changes/89/2289/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-09-05T22:17:26+00:00 (2 years, 1 month ago)
    
    MORAY-419 Move information for mapping Moray types to Postgres into their own file
    Reviewed by: David Pacheco <dap@joyent.com>
    Approved by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/lib/buckets/common.js b/lib/buckets/common.js
index 442ba40..938d6f0 100644
--- a/lib/buckets/common.js
+++ b/lib/buckets/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -25,6 +25,8 @@ var typeToPg = require('../pg').typeToPg;
 
 var mod_schema = require('../schema');
 
+var TYPES = require('../types').TYPES;
+
 
 ///--- Globals
 
@@ -80,19 +82,26 @@ function buildIndexString(schema) {
 }
 
 
+/**
+ * Map a column name onto the kind of index that should be used with it. All
+ * Moray-internal columns use BTREE, but user-specified columns use whatever
+ * kind is appropriate for the type (e.g., array types usually use GIN).
+ */
 function mapIndexType(schema, name) {
-    var i = {
-        name: name
-    };
+    assert.object(schema, 'schema');
+    assert.string(name, 'name');
+
+    var type = 'BTREE';
 
-    if (schema && schema[name] && schema[name].type &&
-        /^\[\w+\]$/.test(schema[name].type)) {
-        i.type = 'GIN';
-    } else {
-        i.type = 'BTREE';
+    if (schema.hasOwnProperty(name)) {
+        assert.object(TYPES[schema[name].type], 'valid type');
+        type = TYPES[schema[name].type].index;
     }
 
-    return (i);
+    return {
+        name: name,
+        type: type
+    };
 }
 
 
diff --git a/lib/objects/common.js b/lib/objects/common.js
index 1f6042a..23266bd 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var util = require('util');
@@ -34,6 +34,7 @@ var pgCommon = require('../pg');
 var pgError = pgCommon.pgError;
 var typeToPg = pgCommon.typeToPg;
 
+var TYPES = require('../types').TYPES;
 
 
 ///--- Globals
@@ -43,6 +44,14 @@ var INTERNAL_FIELDS = ['_etag', '_key', '_id', '_mtime', '_txn_snap'];
 
 ///--- Internal Helpers
 
+/**
+ * This function is used during processing of the parsed Moray filter to:
+ *
+ *   - Convert the string value into what will be sent to Postgres as a
+ *     parameter to the generated SQL query.
+ *   - Update the filter object with the JavaScript value to compare to.
+ *   - Determine if this is an array type.
+ */
 function _value(schema, key, val, filter) {
     var array = false;
     var value;
@@ -306,6 +315,10 @@ function compileQuery(b, s, f, count) {
 }
 
 
+/**
+ * Maps a value from the JSON object sent by the client into a value to insert
+ * into a Postgres column.
+ */
 function _mapType(type, value, key, isArray) {
     var ret;
     switch (type) {
@@ -976,6 +989,13 @@ function selectForUpdate(req, cb) {
 }
 
 
+/**
+ * Extracts the indexable fields of an input object and converts their values
+ * into appropriate Postgres parameters for the index.
+ *
+ * - "schema", the index schema for the bucket the object is destined for
+ * - "object", an object containing the fields we want to insert into the bucket
+ */
 function indexObject(schema, object) {
     assert.object(schema, 'schema');
     assert.object(object, 'object');
@@ -991,7 +1011,11 @@ function indexObject(schema, object) {
         }
 
         var t = s.type;
-        if (t.indexOf('[') === 0 && t.lastIndexOf(']') === (t.length - 1)) {
+        if (!TYPES.hasOwnProperty(t)) {
+            throw new InvalidIndexTypeError(k, t);
+        }
+
+        if (TYPES[t].array) {
             var scalarType = t.slice(1, -1);
             if (Array.isArray(value)) {
                 var vals = [];
diff --git a/lib/pg.js b/lib/pg.js
index d923ca8..41207de 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -31,6 +31,7 @@ var InvalidIndexDefinitionError = mod_errors.InvalidIndexDefinitionError;
 var QueryTimeoutError = mod_errors.QueryTimeoutError;
 var UniqueAttributeError = mod_errors.UniqueAttributeError;
 
+var TYPES = require('./types').TYPES;
 
 ///--- Globals
 
@@ -645,44 +646,11 @@ function pgError(e) {
 function typeToPg(type) {
     assert.string(type, 'type');
 
-    var pgType;
-
-    switch (type) {
-    case 'number':
-        pgType = 'NUMERIC';
-        break;
-    case '[number]':
-        pgType = 'NUMERIC[]';
-        break;
-    case 'boolean':
-        pgType = 'BOOLEAN';
-        break;
-    case '[boolean]':
-        pgType = 'BOOLEAN[]';
-        break;
-    case 'string':
-        pgType = 'TEXT';
-        break;
-    case '[string]':
-        pgType = 'TEXT[]';
-        break;
-    case 'ip':
-        pgType = 'INET';
-        break;
-    case '[ip]':
-        pgType = 'INET[]';
-        break;
-    case 'subnet':
-        pgType = 'CIDR';
-        break;
-    case '[subnet]':
-        pgType = 'CIDR[]';
-        break;
-    default:
+    if (TYPES.hasOwnProperty(type)) {
+        return TYPES[type].pg;
+    } else {
         throw new InvalidIndexDefinitionError(type);
     }
-
-    return (pgType);
 }
 
 ///--- Exports
diff --git a/lib/schema.js b/lib/schema.js
index 05f7662..f7fe64f 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -20,19 +20,15 @@ var Ajv = require('ajv');
 var assert = require('assert-plus');
 
 var mod_errors = require('./errors');
+var mod_types = require('./types');
+
 var InvocationError = mod_errors.InvocationError;
 var InvalidBucketConfigError = mod_errors.InvalidBucketConfigError;
 
 ///--- Globals
 
 var AJV_ENV = new Ajv();
-var MORAY_TYPES = [
-    'string', '[string]',
-    'number', '[number]',
-    'boolean', '[boolean]',
-    'ip', '[ip]',
-    'subnet', '[subnet]'
-];
+var MORAY_TYPES = Object.keys(mod_types.TYPES);
 
 
 ///--- Internal helpers
diff --git a/lib/types.js b/lib/types.js
new file mode 100644
index 0000000..7942bc8
--- /dev/null
+++ b/lib/types.js
@@ -0,0 +1,75 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017, Joyent, Inc.
+ */
+
+/*
+ * All of the Moray types are defined in the object below. Each type has
+ * several properties that define its behaviour:
+ *
+ *   - "array", whether this is an array type.
+ *   - "pg", the name of the Postgres type that it maps to.
+ *   - "index", the kind of Postgres index to use on the column.
+ */
+
+var TYPES = {
+    'string': {
+        array: false,
+        pg: 'TEXT',
+        index: 'BTREE'
+    },
+    '[string]': {
+        array: true,
+        pg: 'TEXT[]',
+        index: 'GIN'
+    },
+    'number': {
+        array: false,
+        pg: 'NUMERIC',
+        index: 'BTREE'
+    },
+    '[number]': {
+        array: true,
+        pg: 'NUMERIC[]',
+        index: 'GIN'
+    },
+    'boolean': {
+        array: false,
+        pg: 'BOOLEAN',
+        index: 'BTREE'
+    },
+    '[boolean]': {
+        array: true,
+        pg: 'BOOLEAN[]',
+        index: 'GIN'
+    },
+    'ip': {
+        array: false,
+        pg: 'INET',
+        index: 'BTREE'
+    },
+    '[ip]': {
+        array: true,
+        pg: 'INET[]',
+        index: 'GIN'
+    },
+    'subnet': {
+        array: false,
+        pg: 'CIDR',
+        index: 'BTREE'
+    },
+    '[subnet]': {
+        array: true,
+        pg: 'CIDR[]',
+        index: 'GIN'
+    }
+};
+
+module.exports = {
+    TYPES: TYPES
+};
