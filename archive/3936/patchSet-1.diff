commit dd23ae730b5984b2d6c2e9a77804323a31440aa5 (refs/changes/36/3936/1)
Author: Kody A Kantor <kody@kkantor.com>
Date:   2018-05-11T16:08:25+00:00 (1 year, 5 months ago)
    
    joyent/pgstatsmon#11 create scripts to get basic stats from pgstatsmon

diff --git a/CHANGES.md b/CHANGES.md
index a6f9936..0ba5794 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,7 @@
 # pgstatsmon Changelog
 
 ## Not yet released.
+* #11 create scripts to get basic stats from pgstatsmon
 * #8 create a Postgres user for pgstatsmon
 * #7 add 'release' and 'publish' targets
 * #5 add and improve queries
diff --git a/Makefile b/Makefile
index f04b799..ae5a511 100644
--- a/Makefile
+++ b/Makefile
@@ -86,6 +86,8 @@ SMF_MANIFEST_DIR	= $(PREFIX)/smf/manifests
 
 INSTALL_FILES	= $(addprefix $(PROTO), \
 		  $(PREFIX)/bin/pgstatsmon.js \
+		  $(PREFIX)/bin/backendstat.d \
+		  $(PREFIX)/bin/querystat.d \
 		  $(BOOT_SCRIPTS:%=$(BOOT_SCRIPTS_DIR)/%) \
 		  $(SCRIPTS:%=$(SCRIPTS_DIR)/%) \
 		  $(LIB_FILES:%=$(PREFIX)/lib/%) \
@@ -165,9 +167,12 @@ $(GUARD):
 $(INSTALL_DIRS):
 	mkdir -p $@
 
-$(PROTO)$(PREFIX)/bin/%: bin/% | $(INSTALL_DIRS)
+$(PROTO)$(PREFIX)/bin/%.js: bin/%.js | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
 
+$(PROTO)$(PREFIX)/bin/%.d: bin/%.d | $(INSTALL_DIRS)
+	$(INSTALL_EXEC)
+
 $(PROTO)$(PREFIX)/lib/%: lib/% | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
 
diff --git a/README.md b/README.md
index 7d324fa..38a4019 100644
--- a/README.md
+++ b/README.md
@@ -195,6 +195,12 @@ the [lib/dtrace.js](./lib/dtrace.js) file.
 [node-artedi](https://github.com/joyent/node-artedi), which pgstatsmon uses to
 perform aggregation and serialize metrics, also exposes DTrace probes.
 
+There are dtrace scripts bundled with this repository in the `bin/` directory:
+
+* backendstat.d presents latency and errors for all of pgstatsmon's backends
+* querystat.d presents latency and errors for a given backend's queries
+
+
 ## License
 MPL-v2. See the LICENSE file.
 
diff --git a/bin/backendstat.d b/bin/backendstat.d
new file mode 100755
index 0000000..cf1eac9
--- /dev/null
+++ b/bin/backendstat.d
@@ -0,0 +1,125 @@
+#!/usr/sbin/dtrace -Cs
+
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * backendstat.d - print stats from pgstatsmon broken down by backend.
+ *
+ * This script prints information about the backends that pgstatsmon is
+ * scraping metrics from. This is probably a good first step to finding what's
+ * causing ticks to slow down. From here you can dive deeper using querystat.d
+ * to determine which queries are slowest and causing errors.
+ *
+ * Arguments: none
+ *
+ * Fields:
+ * BACKEND - name or IP and port combination of Postgres backend
+ * LAT     - scrape duration from start to finish in milliseconds
+ * QTIM    - queries timed out in the last tick
+ * QERR    - query errors in the last tick
+ * CERR    - connection errors since the last tick
+ * NaN     - bogus values received over the wire
+ *
+ * The last line of output should have a backend named 'tick.' This represents
+ * the end-to-end latency from querying _every_ backend. Backends are queried
+ * with some parallelism, so the sum of the LAT column won't equal the LAT
+ * value for 'tick.'
+ *
+ * If any of the values to the right of LAT are non-zero, that indicates there's
+ * a problem somewhere.
+ *
+ * This script prints refreshed stats every tick. Output is sorted by LAT.
+ *
+ */
+
+#pragma D option quiet
+#pragma D option zdefs
+
+/* track end-to-end tick latency */
+pgstatsmon*:::tick-start
+{
+	self->startts["tick"] = timestamp;
+}
+
+pgstatsmon*:::tick-done
+/self->startts["tick"]/
+{
+	@tick_lat["tick"] = sum(
+	    (timestamp - self->startts["tick"]) / (1000000)
+	);
+}
+
+/* track latency of individual backends */
+pgstatsmon*:::backend-start
+{
+	self->bestartts[copyinstr(arg0)] = timestamp;
+}
+
+pgstatsmon*:::backend-done
+/self->bestartts[copyinstr(arg0)]/
+{
+	backend = copyinstr(arg0);
+	@backend_lat[backend] = sum(
+	    (timestamp - self->bestartts[backend]) / (1000000)
+	);
+}
+
+/* count the errors that pgstatsmon has reported */
+artedi*:::counter-add
+/copyinstr(arg0) == "pg_query_error"/
+{
+	backend = json(copyinstr(arg2), "backend");
+	@query_errors[backend] = count();
+}
+
+artedi*:::counter-add
+/copyinstr(arg0) == "pg_connect_error"/
+{
+	backend = json(copyinstr(arg2), "backend");
+	@conn_errors[backend] = count();
+}
+
+artedi*:::counter-add
+/copyinstr(arg0) == "pg_NaN_error"/
+{
+	backend = json(copyinstr(arg2), "backend");
+	@NaN_errors[backend] = count();
+}
+
+artedi*:::counter-add
+/copyinstr(arg0) == "pg_query_timeout"/
+{
+	backend = json(copyinstr(arg2), "backend");
+	@query_timeouts[backend] = count();
+}
+
+/*
+ * print the results every tick.
+ *
+ * This prints one line for every backend, and then one final line displaying
+ * the end-to-end tick latency.
+ */
+pgstatsmon*:::tick-done
+{
+	/* we use %40s because that's how long backend names are in prod */
+	printf("%40s %6s %4s %4s %4s %4s\n", "BACKEND", "LAT", "QTIM", "QERR",
+	    "CERR", "NaN");
+	printa("%40s %@6u %@4u %@4u %@4u %@4u \n", @backend_lat,
+	    @query_timeouts, @query_errors, @conn_errors, @NaN_errors);
+	printa("%40s %@6u\n", @tick_lat);
+	printf("\n");
+
+	/* reset the stats for the new tick */
+	clear(@backend_lat);
+	clear(@query_timeouts);
+	clear(@query_errors);
+	clear(@conn_errors);
+	clear(@NaN_errors);
+	clear(@tick_lat);
+}
\ No newline at end of file
diff --git a/bin/querystat.d b/bin/querystat.d
new file mode 100755
index 0000000..d4cb620
--- /dev/null
+++ b/bin/querystat.d
@@ -0,0 +1,98 @@
+#!/usr/sbin/dtrace -Cs
+
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * querystat.d - print stats about queries for a given backend.
+ *
+ * This script prints information about the queries that are performed on a
+ * given Postgres backend by pgstatsmon. This is a good second step after
+ * looking at the output from backendstat.d.
+ *
+ * Arguments:
+ *  - Name of backend (BACKEND column from backendstat.d)
+ *
+ * Fields:
+ *
+ * QUERY - name of the query being performed
+ * LAT   - duration of query from the standpoint of pgstatsmon
+ * QTIM  - queries timed out
+ * QERR  - queries that resulted in error
+ * NaN   - queries that returned NaN
+ *
+ * The name of the query generally corresponds to the Postgres table being
+ * queried. If pgstatsmon joins tables the name is made up to represent the data
+ * being returned.
+ *
+ * The possible values of QTIM, QERR, and NaN are zero and one.
+ *
+ * The last line of the output for every tick is the name of the backend.
+ *
+ * This script prints refreshed stats every tick. Output is sorted by LAT.
+ *
+ */
+
+#pragma D option quiet
+#pragma D option zdefs
+
+pgstatsmon*:::backend-query-start
+/copyinstr(arg0) == $1/
+{
+	self->startts[copyinstr(arg1)] = timestamp;
+}
+
+pgstatsmon*:::backend-query-done
+/self->startts[copyinstr(arg1)] && copyinstr(arg0) == $1/
+{
+	query = copyinstr(arg1);
+	@lat[query] = sum((timestamp - self->startts[query]) / 1000000);
+}
+
+artedi*:::counter-add
+/
+json(copyinstr(arg2), "backend") == $1 &&
+copyinstr(arg0) == "pg_query_error"
+/
+{
+	@query_errors[json(copyinstr(arg2), "query")] = count();
+}
+
+artedi*:::counter-add
+/
+json(copyinstr(arg2), "backend") == $1 &&
+copyinstr(arg0) == "pg_query_timeout"
+/
+{
+	@query_timeouts[json(copyinstr(arg2), "query")] = count();
+}
+
+artedi*:::counter-add
+/
+json(copyinstr(arg2), "backend") == $1 &&
+copyinstr(arg0) == "pg_NaN_error"
+/
+{
+	@NaN_errors[json(copyinstr(arg2), "query")] = count();
+}
+
+pgstatsmon*:::tick-done
+{
+	printf("%s\n", $1);
+	printf("%20s %6s %4s %4s %4s\n", "QUERY", "LAT", "QTIM", "QERR",
+	    "NaN");
+	printa("%20s %@6u %@4u %@4u %@4u \n", @lat, @query_timeouts,
+	    @query_errors, @NaN_errors);
+	printf("\n");
+
+	/* reset the stats for the new tick */
+	clear(@lat);
+	clear(@query_timeouts);
+	clear(@query_errors);
+	clear(@NaN_errors);
+}
