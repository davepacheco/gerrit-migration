commit e1d562f0963c7cf5fa07b928212801b5a8af5b90 (refs/changes/75/2675/3)
Author: Richard Bradley <richard.bradley@joyent.com>
Date:   2017-10-16T12:36:13+00:00 (2 years ago)
    
    MANATEE-359 manatee reports primary to sync replication as async

diff --git a/lib/postgresMgr.js b/lib/postgresMgr.js
index be7f693..f9c8fec 100644
--- a/lib/postgresMgr.js
+++ b/lib/postgresMgr.js
@@ -28,6 +28,7 @@ var EventEmitter = require('events').EventEmitter;
 var fs = require('fs');
 var mod_forkexec = require('forkexec');
 var mod_jsprim = require('jsprim');
+var mod_lsn = require('pg-lsn');
 var path = require('path');
 var pg = require('pg');
 var Client = pg.Client;
@@ -2175,7 +2176,8 @@ PostgresMgr.prototype._checkRepl = function (stdby) {
             }
             if (err) {
                 /*
-                 * If we can't query the replication state, we just keep
+                 * If we can't query the replication state (or if we've failed
+                 * to validate the LSNs provided by postgres), we just keep
                  * trying.  Importantly we do not count this as part of the
                  * replication timeout.  Generally this means the standby
                  * hasn't started or is unable to start.  This means that the
@@ -2183,13 +2185,14 @@ PostgresMgr.prototype._checkRepl = function (stdby) {
                  * loop since a new event will be emitted when the standby
                  * leaves the election.
                  */
-                log.info({err: err}, 'unable to query replication status');
+                log.info({err: err}, 'error while querying replication status');
                 // reset the start time when we get error since we haven't
                 // gotten any real replication information yet.
                 replStartTime = Date.now();
                 timeoutId = setTimeout(checkReplication, 1000);
                 return;
-            } else if (!replReplayLoc || replayLoc > replReplayLoc) {
+            } else if (!replReplayLoc ||
+                mod_lsn.xlogCompare(replayLoc, replReplayLoc) > 0) {
                 log.info({
                     oldReplayLoc: replReplayLoc,
                     currReplLoc: replayLoc
@@ -2259,19 +2262,46 @@ PostgresMgr.prototype._checkReplStatus = function (stdby, callback) {
             return callback(err2);
         }
 
-        //TODO: This works by accident.  The format for these is log/offset
-        // It is possible for the offset to be the same in two different logs.
-        var sentLocation = result.sent_location.split('/')[1];
-        sentLocation = parseInt(sentLocation, 16);
-        var flushLocation = result.flush_location.split('/')[1];
-        flushLocation = parseInt(flushLocation, 16);
+        /*
+         * We should now have enough information to compare the reported
+         * locations, but first some validation on the response from postgres.
+         */
+        var lsnValidationErrors = [];
+        [ 'sent_location', 'flush_location' ].forEach(function (location) {
+            var validation = mod_lsn.xlogValidate(result[location]);
+            if (validation instanceof Error) {
+                lsnValidationErrors.push(new verror.VError(validation,
+                    '%s is invalid', location));
+            }
+        });
+        if (lsnValidationErrors.length > 0) {
+            var lsnMultiError = new verror.MultiError(lsnValidationErrors);
+            callback(new verror.VError(lsnMultiError,
+                'failed to validate LSNs returned by postgres'));
+            return;
+        }
+
+        var sentLocation = result.sent_location;
+        var flushLocation = result.flush_location;
 
         log.info({
             primary: sentLocation,
             standby: flushLocation
-        }, 'PostgresMgr.checkReplStatus: xlog locations are');
+        }, 'PostgresMgr.checkReplStatus: LSNs are');
 
-        if (sentLocation === flushLocation) {
+        var lsnComparison = mod_lsn.xlogCompare(sentLocation, flushLocation);
+        /*
+         * If we have a primary restart with no takeover and the sync hasn't
+         * restarted, the primary may be replaying its WAL but the sync has
+         * always been up to date. In this case it's theoretically possible that
+         * flush location is ahead of sent if replication were ever to be
+         * established during this state.
+         *
+         * The caller of this function is responsible for taking the required
+         * actions in this case, so we only compare these values for a direct
+         * match and don't return whether the sync appears ahead or behind.
+         */
+        if (lsnComparison === 0) {
             log.info('exiting checkReplStatus: synchronous standby caught up');
             return callback(null, true, flushLocation);
         } else {
diff --git a/package.json b/package.json
index 1ade043..18ce7e1 100644
--- a/package.json
+++ b/package.json
@@ -28,12 +28,13 @@
         "iniparser": "1.0.5",
         "forkexec": "1.1.0",
         "jsprim": "1.4.0",
-        "manatee-state-machine": "git://github.com/joyent/manatee-state-machine#master",
+        "manatee-state-machine": "git+https://github.com/joyent/manatee-state-machine.git#dev-MANATEE-359",
         "manta": "1.2.6",
         "node-uuid": "1.4.1",
         "joyent-zookeeper-client": "0.2.2",
         "once": "1.3.0",
         "pg": "3.0.3",
+        "pg-lsn": "git+https://github.com/chudley/node-pg-lsn.git#23c503d18838a8281ac6762ab10353ffc6b9ba23",
         "posix": "1.0.3",
         "posix-getopt": "1.0.0",
         "progbar": "0.1.0",
