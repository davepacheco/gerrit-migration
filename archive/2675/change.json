{"project":"joyent/manatee","branch":"master","topic":"MANATEE-359","id":"I50f8c7833f8f5217238ef57573b4d4a696f18ba5","number":"2675","subject":"MANATEE-359 manatee reports primary to sync replication as async Reviewed by: Dave Pacheco \u003cdap@joyent.com\u003e Approved by: Dave Pacheco \u003cdap@joyent.com\u003e","owner":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"url":"https://cr.joyent.us/2675","commitMessage":"MANATEE-359 manatee reports primary to sync replication as async\nReviewed by: Dave Pacheco \u003cdap@joyent.com\u003e\nApproved by: Dave Pacheco \u003cdap@joyent.com\u003e\n","createdOn":1506595185,"lastUpdated":1510236076,"open":false,"status":"MERGED","comments":[{"timestamp":1506595185,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 1."},{"timestamp":1506595223,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 1: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1507136158,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(4 comments)"},{"timestamp":1507136250,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\nWould you mind mentioning in the new node-xlog repo that the source came from manatee-state-machine so that people looking back through the history can trace it there, too?  It might be nice to create a new CHANGES.md file in node-xlog with the initial version explaining this."},{"timestamp":1507282487,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 1:\n\n(4 comments)\n\nThanks for the feedback! I\u0027ve added some comments and will put together another PS to address them.\n\nI\u0027ll also get node-xlog updated with some history, and CHANGES.md sounds like a good place to put this."},{"timestamp":1507306529,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 2."},{"timestamp":1507306559,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 2: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1507309051,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(4 comments)"},{"timestamp":1507817688,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 2:\n\n(1 comment)"},{"timestamp":1507825310,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1508157710,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 3."},{"timestamp":1508157741,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 3: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1508158682,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 3:\n\n(3 comments)\n\nTesting notes for PS3 are in MANATEE-359.\n\nI\u0027ve renamed the node-xlog library to node-pg-lsn and created a CHANGE.md file indicating its history. With the project name change it would be nice to clean up some of the methods that this library provides (e.g. \"mod_lsn.xlogCompare\" could be \"mod_lsn.compare\"), but I wanted it to work as a drop in replacement for \"lib/xlog.js\", and to have a base point in the history where any convergence took place.\n\nI still need to push node-pg-lsn to NPM, which I think the project is ready for, but I\u0027ll reach out directly for keys on getting that done. I also want to change the manatee-state-machine commit, so will get that into gerrit in order to put some changes through review. Once those are done I\u0027ll update package.json and do a final round of testing with some notes."},{"timestamp":1508172793,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 3:\n\nThis looks good -- I\u0027ll +1 after the package publish and package.json update."},{"timestamp":1508491938,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 4."},{"timestamp":1508491968,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 4: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1508493129,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 4:\n\nTesting notes for PS4 are in MANATEE-359.\n\nI\u0027ve updated the manatee-state-machine package.json entry, too, which I think brings it up to date with how we do these kinds of imports now, but it still refers to the master branch as it does today."},{"timestamp":1508884618,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 4: Code-Review+1\n\nLooks good!\n\nIt would be great if we could test the same case that got us into that mess.  I\u0027m not sure if that\u0027s easy or not, but I wonder if you could do that relatively easily by watching `manatee-adm pg-status` under some write load, and when it gets close to advancing to the next WAL segment, restart the primary?  I guess you might need to have tuned the checkpoints to happen pretty rarely to actually trigger the replication timeout?"},{"timestamp":1508941885,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 4:\n\n\u003e It would be great if we could test the same case that got us into that mess.\n\nAgreed! I think it\u0027s going to be tricky but doable.\n\n\u003e ... when it gets close to advancing to the next WAL segment, restart the primary?\n\nI would also need to ensure that sent and flush are different, and differ specifically in the first portion of the LSN at some point while waiting for sync replication. I\u0027m not sure how\u0027s best to control that, or how to reliably diverge these values.\n\nI think this kind of divergence comes from disk latency, where the sync has received WAL (sent_location), but not yet flushed it to disk (flush_location). We\u0027d want to ensure the sync is still catching up with sent_location for the duration of the primary being down. This doesn\u0027t sound like what remote_apply guarantees, so I could be wrong.\n\nSo, I think I need to induce disk latency on my sync while also hitting the cluster with a lot of writes. I would also like to ensure postgres is never recycling WAL files. I don\u0027t know enough about checkpoints to say whether they would affect replication, but I understand them to only affect the local database\u0027s WAL (essentially affecting startup/recovery time).\n\nDoes that sound reasonable? I know of `ipdadm` for network latency, but do you have any tricks to induce disk latency on a specific zone?"},{"timestamp":1508965399,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 4:\n\n\u003e \u003e It would be great if we could test the same case that got us into\n \u003e that mess.\n \u003e \n \u003e Agreed! I think it\u0027s going to be tricky but doable.\n \u003e \n \u003e \u003e ... when it gets close to advancing to the next WAL segment,\n \u003e restart the primary?\n \u003e \n \u003e I would also need to ensure that sent and flush are different, and\n \u003e differ specifically in the first portion of the LSN at some point\n \u003e while waiting for sync replication. I\u0027m not sure how\u0027s best to\n \u003e control that, or how to reliably diverge these values.\n\n\nI think I was misunderstanding the scenario that leads to this problem.  If I\u0027m understanding right, the original scenario was that there was a non-trivial amount of write lag when the primary restarted (or decided for some other reason to block on replication), and that lag spanned a boundary between WAL files.\n\nHow about this:\n\n- apply write load to a healthy cluster for a while\n- at some point, preferably when its flush location is close to the end of one WAL file, pstop the WAL receiver process on the async so that it stops receiving new data\n- allow the primary and sync to continue writing so they flow into the next WAL file.\n- at some point, disable the sync\n- After the usual timeout, the primary should promote the async, but its flush location will be pretty far behind, and it will stay still until you \"prun\" the WAL receiver process again.  Here you can verify that the primary is waiting for replication.\n\nIf all that works, I think that would ensure that you hit the same case again.  Does that make sense?  Does it seem reasonable?"},{"timestamp":1509033645,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 4:\n\nAwesome, that looks like it\u0027ll do it! I hadn\u0027t considered using the async here, but using your mechanism I\u0027m able to get the primary to spend a long time waiting for the sync to catch up.\n\nTo load my cluster with writes I\u0027m using a COPY command in my primary to fill the database from a CSV of data, and I have to keep this running for the duration, but I wouldn\u0027t expect this to work due to our read only state (perhaps existing connections are not affected by our read only config change?). In any case, if I keep those write up while the takeover happens, I\u0027ll be stuck waiting for replication to be established, but so long as there\u0027s the specific WAL portion change we\u0027re looking for then I\u0027ll eventually hit the timeout that this change intends to fix.\n\nI\u0027ll spend some time reproducing and get this written up."},{"timestamp":1510005275,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 4:\n\nI saw the testing updates on the ticket.  That sounds good!  Are the latest group of patchsets also `make check` and `make test` clean?"},{"timestamp":1510045649,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Patch Set 4:\n\nSorry! I should have put this in the ticket\u0027s testing notes, but `make check` and `make test` are both clean with PS4."},{"timestamp":1510046980,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Topic set to MANATEE-359"},{"timestamp":1510075009,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 4: Integration-Approval+1"},{"timestamp":1510232070,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 5: Patch Set 4 was rebased."},{"timestamp":1510232099,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 5:\n\n\"make check\" passed ok"},{"timestamp":1510232222,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Uploaded patch set 6: Commit message was updated."},{"timestamp":1510236076,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Richard Bradley"}],"currentPatchSet":{"number":"6","revision":"50f8c7833f8f5217238ef57573b4d4a696f18ba5","parents":["c6e5e60d202566db1a0b1833f89220dce0d9edc6"],"ref":"refs/changes/75/2675/6","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1510232222,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1508491968,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1508884618,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1510075009,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"SUBM","value":"1","grantedOn":1510236076,"by":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":41,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":43,"sizeDeletions":-12},"patchSets":[{"number":"1","revision":"f05c8cbb7283639f700d0f732d3fbfbece6fd9f2","parents":["34238c257d3cb6fe7eba247c7e40a1dd49c4f3e8"],"ref":"refs/changes/75/2675/1","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1506595185,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1506595223,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"lib/postgresMgr.js","line":2194,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Since this function documents it as a programmer error to give it an invalid location, and it would be an operational error to have received an invalid location from PG, I think we might want to try validating the xlog location first using `xlogValidate`."},{"file":"lib/postgresMgr.js","line":2194,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"I think if we had the validation happen inside _checkReplStatus instead (i.e. validate the results directly from the table) then do you think it would be appropriate to trust that the values are valid at this point?"},{"file":"lib/postgresMgr.js","line":2194,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Yes, I think that makes sense."},{"file":"lib/postgresMgr.js","line":2259,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Maybe this is the place where we validate the xlog locations, and the Error that we construct here could provide the Error we get from xlogValidate as a cause."},{"file":"lib/postgresMgr.js","line":2259,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"I think this message is for the specific case where there is no replication status at all. I can put a separate block to check \"sent_location\" and \"flush_location\" before L2264 which would work for specifically checking for invalid xlog locations.\n\nThe problem is that the caller of this function (_checkRepl) will simply retry in the event of any error, and if we\u0027re getting invalid xlog locations from postgres then we\u0027ll just keep trying forever.\n\nIn fact, trying forever might actually be the right thing to do here. We\u0027ll see this in the logs, and it protects us from future changes to the xlog location format from postgres that the xlog library isn\u0027t aware of. in this event we\u0027ll just see async repl to the sync and continuously report the error in the log."},{"file":"lib/postgresMgr.js","line":2259,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"\u003e I think this message is for the specific case where there is no replication status at all. I can put a separate block to check \"sent_location\" and \"flush_location\" before L2264 which would work for specifically checking for invalid xlog locations.\n\nMakes sense.\n\n\u003e The problem is that the caller of this function (_checkRepl) will simply retry in the event of any error, and if we\u0027re getting invalid xlog locations from postgres then we\u0027ll just keep trying forever.\n\u003e In fact, trying forever might actually be the right thing to do here. We\u0027ll see this in the logs, and it protects us from future changes to the xlog location format from postgres that the xlog library isn\u0027t aware of. in this event we\u0027ll just see async repl to the sync and continuously report the error in the log.\n\nYeah.  While regrettable, that\u0027s probably the best thing that we can do.  We\u0027ll want to make sure we\u0027re logging the message in that case."},{"file":"lib/postgresMgr.js","line":2259,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"I\u0027ve addressed this in PS2, and updated MANATEE-359 with some notes on what this log message would look like."},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I don\u0027t really understand this comment.  Could you elaborate on when the sync would be ahead of the primary and what we want to do in that case?"},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"I had MANATEE-347 pretty fresh in my head when I wrote this, and I wasn\u0027t entirely certain that it\u0027s guaranteed that flush could _never_ be ahead of sent if the peer somehow had stale pg_stat_replication data.\n\nWhat I was trying to explain is why we only explicitly check for an exact match in locations, as opposed to whether they\u0027re ahead or behind. By \"manatee doesn\u0027t act...\", I was referring to this function\u0027s caller, this line in particular: https://github.com/joyent/manatee/blob/7f808daeb347b1b40c39e7c83e0eec2389f29403/lib/postgresMgr.js#L2192\n\nThat is to say, if we ever see a flush location that\u0027s greater than sent we don\u0027t need to report this, as the parent function will simply see this as the sync not making forward progress in the condition linked above.\n\nDoes that explanation sound reasonable? Perhaps it\u0027s a little too paranoid, but the key point I was trying to convey is why we\u0027re not reporting separately on \"xlogComparison\" being \u003e, \u003c or \u003d\u003d\u003d to 0. It took me some time to work this out when I first read the original piece of code, but perhaps my comment is confusing things more!\n\nIt\u0027s definitely worth at least re-drafting, but unless you have any objections I might just remove it!"},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"I think it makes sense to point out that the downstream peer could be ahead of this peer, and maybe even explain under what conditions that could happen -- like if the primary has just restarted and is replaying WAL records from its last checkpoint, but the sync hasn\u0027t restarted and it\u0027s still up to date.  In that specific case, I think it would actually be fine to consider the sync caught up.  I believe the only reason we\u0027re waiting here is so that we fail writes quickly instead of having them block, but in this case, they shouldn\u0027t block.\n\nI also think it\u0027s fine to say that it\u0027s hard to reason about the state when the downstream is ahead of the primary, so we\u0027re just going to wait until it actually reaches the correct value.  In that case, I think the comment could explain something about how this condition is possible, but it should only be transient, and it\u0027s not always clear what it means, and we want to wait until it\u0027s clearer what\u0027s going on."},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"I think referring to these locations as \"primary\" and \"sync\" has me confused. We\u0027re comparing locations of the replication stream, so I\u0027m not sure it\u0027s actually possible for the standby to write/flush/replay past the point of the primary\u0027s last sent location to the stream. Could replication actually be established in the first place if postgres finds the standby to be ahead of the primary, and would the primary\u0027s database start at all if it was recovering up to a certain WAL location?\n\nThe functionality here isn\u0027t intended to be any different to the comparison we did previously, so I think I\u0027ve just confused matters with my comment! In this case it might be better to just let the code do the talking, as a comment here will also be describing the consumer of this function\u0027s intentions (which could easily go stale if that changes)."},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"\u003e We\u0027re comparing locations of the replication stream, so I\u0027m not sure it\u0027s actually possible for the standby to write/flush/replay past the point of the primary\u0027s last sent location to the stream. Could replication actually be established in the first place if postgres finds the standby to be ahead of the primary, and would the primary\u0027s database start at all if it was recovering up to a certain WAL location?\n\nThe case in which I would expect that could be possible is if:\n\n- we start out in normal operation with a primary and a sync that are fully caught up.\n- the primary restarts (no takeover or anything)\n- when the primary comes up, it needs to replay WAL records from the point of its last checkpoint, which may be somewhat far behind where it was one it went down.\n- at this point, when the sync reconnects for replication, it could be ahead of the sent, flush, or replay locations\n- when the primary catches up to where it was, then the locations should all match up again and replication can resume\n\nI don\u0027t know if that would actually happen in the case I describe, but it seems plausible."},{"file":"lib/postgresMgr.js","line":2277,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Thanks for the pointers! I\u0027ve updated the comment in PS3."},{"file":"package.json","line":46,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"It looks like \"xlog\" is already taken.  I think it would be useful to come up with a unique name so that we can publish this to npm as part of this work (mainly so that we can use semver moving forward)."},{"file":"package.json","line":46,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Certainly not against that. It seems in postgres 10 that the term \"xlog\" is being universally replaced with \"wal\" (and \"location\" with \"lsn\", see here: https://wiki.postgresql.org/wiki/New_in_postgres_10#Renaming_of_.22xlog.22_to_.22wal.22_Globally_.28and_location.2Flsn.29), so perhaps having \"wal\" in the name would be better. \"wal\" isn\u0027t unique to postgres, so perhaps \"node-postgres-wal\", or using \"walutil\" instead might be more appropriate (both available)."},{"file":"package.json","line":46,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Or maybe something specifically about the locations (since this thing doesn\u0027t parse the WAL files directly or anything) -- maybe `node-pg-wal-location`?  I don\u0027t have a strong preference on this."},{"file":"package.json","line":46,"reviewer":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"message":"Checking out the PG documentation on this (https://www.postgresql.org/docs/9.6/static/datatype-pg-lsn.html), I think \"node-pg-lsn\" is the most concise and accurate way of naming the library (and \"pg-lsn\" is available)."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":13,"deletions":-8},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":15,"sizeDeletions":-9},{"number":"2","revision":"788434021be34b66f46205b91178759a197a757f","parents":["34238c257d3cb6fe7eba247c7e40a1dd49c4f3e8"],"ref":"refs/changes/75/2675/2","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1507306529,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507306559,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":36,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":38,"sizeDeletions":-12},{"number":"3","revision":"e1d562f0963c7cf5fa07b928212801b5a8af5b90","parents":["34238c257d3cb6fe7eba247c7e40a1dd49c4f3e8"],"ref":"refs/changes/75/2675/3","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1508157710,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1508157741,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":41,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":43,"sizeDeletions":-12},{"number":"4","revision":"c6a7495c24105c07b70a6e1a0ddcbd560da5cb9f","parents":["34238c257d3cb6fe7eba247c7e40a1dd49c4f3e8"],"ref":"refs/changes/75/2675/4","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1508491938,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1508884618,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1510075009,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1508491968,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":41,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":43,"sizeDeletions":-12},{"number":"5","revision":"317fd6d1b3068af76278f1c75ec9ee4c069f6c4c","parents":["c6e5e60d202566db1a0b1833f89220dce0d9edc6"],"ref":"refs/changes/75/2675/5","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1510232070,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"TRIVIAL_REBASE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1508884618,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1510075009,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1508491968,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":41,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":43,"sizeDeletions":-12},{"number":"6","revision":"50f8c7833f8f5217238ef57573b4d4a696f18ba5","parents":["c6e5e60d202566db1a0b1833f89220dce0d9edc6"],"ref":"refs/changes/75/2675/6","uploader":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"createdOn":1510232222,"author":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1508884618,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1510075009,"by":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"}},{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1508491968,"by":{"name":"Joyent Automation","username":"joyent-automation"}},{"type":"SUBM","value":"1","grantedOn":1510236076,"by":{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"lib/postgresMgr.js","type":"MODIFIED","insertions":41,"deletions":-11},{"file":"package.json","type":"MODIFIED","insertions":2,"deletions":-1}],"sizeInsertions":43,"sizeDeletions":-12}],"allReviewers":[{"name":"Joyent Automation","username":"joyent-automation"},{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},{"name":"Richard Bradley","email":"richard.bradley@joyent.com","username":"chudley"}]}