From 40adfae661252615a3042ac5ad92cb0cfc220aca Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Thu, 12 Sep 2019 21:29:31 +0000
Subject: [PATCH] MANTA-4545 update rust-moray to use rust-fast 0.1.0 Reviewed
 by: Kelly McLaughlin <kelly.mclaughlin@joyent.com> Reviewed by: Robert Bogart
 <Robert.bogart@joyent.com> Approved by: Kelly McLaughlin
 <kelly.mclaughlin@joyent.com>

---
 Cargo.toml               | 10 +++-------
 examples/createbucket.rs |  2 +-
 examples/findobjects.rs  |  2 +-
 src/buckets.rs           | 23 +++++++++++++----------
 src/meta.rs              | 10 ++++++----
 src/objects.rs           |  9 ++++++---
 6 files changed, 30 insertions(+), 26 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index f468e5c..13355d5 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "moray"
-version = "0.2.0"
+version = "0.3.0"
 authors = ["Rui Loura <rui@joyent.com>",
            "Jon Anderson <jon.andereson@joyent.com"]
 edition = "2018"
@@ -10,12 +10,8 @@ cueball = { git = "https://github.com/joyent/rust-cueball", tag="v0.1.0" }
 cueball-static-resolver = { git = "https://github.com/joyent/rust-cueball-static-resolver", tag="v0.1.0" }
 cueball-tcp-stream-connection = { git = "https://github.com/joyent/rust-cueball-tcp-stream-connection", tag="v0.1.0" }
 
-# This branch is pinned util the following are all resolved:
-# - MANTA-4287
-# - MANTA-4288
-# - joyent/rust-fast/issues/12
-rust_fast = { git = "https://github.com/joyent/rust-fast", branch="response_handler_errors" }
-libmanta = { git = "https://github.com/joyent/rust-libmanta" }
+rust_fast = { git = "https://github.com/joyent/rust-fast", tag="v0.1.0" }
+libmanta = { git = "https://github.com/joyent/rust-libmanta", tag="v0.1.0" }
 
 serde = { version = "1.0.89", features = ["derive"] }
 serde_json = "1.0.39"
diff --git a/examples/createbucket.rs b/examples/createbucket.rs
index 9f5ebd4..4b61b44 100644
--- a/examples/createbucket.rs
+++ b/examples/createbucket.rs
@@ -13,7 +13,7 @@ use std::sync::Mutex;
 use slog::{o, Drain, Logger};
 
 fn main() -> Result<(), Error> {
-    let ip_arr: [u8; 4] = [10, 77, 77, 103];
+    let ip_arr: [u8; 4] = [10, 77, 77, 9];
     let port: u16 = 2021;
     let opts = buckets::MethodOptions::default();
 
diff --git a/examples/findobjects.rs b/examples/findobjects.rs
index 315a83e..5aa1000 100644
--- a/examples/findobjects.rs
+++ b/examples/findobjects.rs
@@ -11,7 +11,7 @@ use std::io::{Error, ErrorKind};
 use std::sync::Mutex;
 
 fn main() -> Result<(), Error> {
-    let ip_arr: [u8; 4] = [10, 77, 77, 103];
+    let ip_arr: [u8; 4] = [10, 77, 77, 9];
     let port: u16 = 2021;
 
     let mut key: String = "".to_string();
diff --git a/src/buckets.rs b/src/buckets.rs
index b57a6a7..5561e29 100644
--- a/src/buckets.rs
+++ b/src/buckets.rs
@@ -2,7 +2,7 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-use rust_fast::client as fast_client;
+use rust_fast::{client as fast_client, protocol::FastMessageId};
 use serde::{Deserialize, Serialize};
 use serde_json::{self, json, Value};
 use std::io::{Error, ErrorKind};
@@ -109,17 +109,17 @@ pub fn create_bucket(
     opts: MethodOptions,
 ) -> Result<(), Error> {
     let arg = json!([name, config, opts]);
+    let mut msg_id = FastMessageId::new();
 
     // TODO: ideally we'd try to get the bucket first, and if that fails then
     // create it.
-    fast_client::send(Methods::Create.method(), arg, stream).and_then(
-        |_| {
+    fast_client::send(Methods::Create.method(), arg, &mut msg_id, stream)
+        .and_then(|_| {
             fast_client::receive(stream, |resp| {
                 dbg!(resp); // createBucket returns empty response
                 Ok(())
             })
-        },
-    )?;
+        })?;
 
     Ok(())
 }
@@ -135,6 +135,7 @@ where
     F: FnMut(&Bucket) -> Result<(), Error>, //FnOnce?
 {
     let mut arg = json!([opts]);
+    let mut msg_id = FastMessageId::new();
 
     match method {
         Methods::Get => {
@@ -146,11 +147,13 @@ where
         _ => return Err(Error::new(ErrorKind::Other, "Unsupported Method")),
     }
 
-    fast_client::send(method.method(), arg, stream).and_then(|_| {
-        fast_client::receive(stream, |resp| {
-            decode_bucket(&resp.data.d, |b| bucket_handler(&b))
-        })
-    })?;
+    fast_client::send(method.method(), arg, &mut msg_id, stream).and_then(
+        |_| {
+            fast_client::receive(stream, |resp| {
+                decode_bucket(&resp.data.d, |b| bucket_handler(&b))
+            })
+        },
+    )?;
 
     Ok(())
 }
diff --git a/src/meta.rs b/src/meta.rs
index 1d9471a..e52f772 100644
--- a/src/meta.rs
+++ b/src/meta.rs
@@ -2,7 +2,7 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-use rust_fast::client as fast_client;
+use rust_fast::{client as fast_client, protocol::FastMessageId};
 use serde_json::{self, json, Value};
 use std::io::Error;
 use std::net::TcpStream;
@@ -46,10 +46,12 @@ where
 
     let values: Value = json!(vals);
     let args: Value = json!([stmt, values, options]);
+    let mut msg_id = FastMessageId::new();
 
-    fast_client::send(String::from("sql"), args, stream).and_then(|_| {
-        fast_client::receive(stream, |resp| query_handler(&resp.data.d))
-    })?;
+    fast_client::send(String::from("sql"), args, &mut msg_id, stream)
+        .and_then(|_| {
+            fast_client::receive(stream, |resp| query_handler(&resp.data.d))
+        })?;
 
     Ok(())
 }
diff --git a/src/objects.rs b/src/objects.rs
index e07d778..2672faa 100644
--- a/src/objects.rs
+++ b/src/objects.rs
@@ -2,7 +2,7 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-use rust_fast::client as fast_client;
+use rust_fast::{client as fast_client, protocol::FastMessageId};
 use serde::{Deserialize, Deserializer, Serialize};
 use serde_json::{json, Value};
 use std::io::{Error, ErrorKind};
@@ -187,8 +187,9 @@ where
 {
     let obj_method = method.method();
     let arg = json!([bucket, key_filter, make_options(opts)]);
+    let mut msg_id = FastMessageId::new();
 
-    fast_client::send(obj_method, arg, stream).and_then(|_| {
+    fast_client::send(obj_method, arg, &mut msg_id, stream).and_then(|_| {
         fast_client::receive(stream, |resp| {
             decode_object(&resp.data.d, |obj| object_handler(&obj))
         })
@@ -209,8 +210,10 @@ where
     F: FnMut(&str) -> Result<(), Error>,
 {
     let arg = json!([bucket, key, value, make_options(opts)]);
+    let mut msg_id = FastMessageId::new();
 
-    fast_client::send(Methods::Put.method(), arg, stream).and_then(|_| {
+    fast_client::send(Methods::Put.method(), arg, &mut msg_id, stream)
+        .and_then(|_| {
         fast_client::receive(stream, |resp| {
             let arr: Vec<PutObjectReturn> =
                 serde_json::from_value(resp.data.d.clone())?;
-- 
2.21.0

