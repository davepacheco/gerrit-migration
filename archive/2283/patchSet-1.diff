From e6579f449f0122d1b968d1b1ceb6ccc420c495a0 Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Wed, 26 Jul 2017 11:40:04 -0400
Subject: [PATCH] OS-6254 pfiles does not properly identify PF_KEY

---
 usr/src/cmd/ptools/pfiles/pfiles.c   |  2 +
 usr/src/uts/common/inet/ip/keysock.c | 88 ++++++++++++++++++++++++++++
 usr/src/uts/common/inet/ip/spdsock.c | 14 +++++
 usr/src/uts/common/inet/ipsec_impl.h |  3 +
 usr/src/uts/intel/ia32/ml/modstubs.s |  1 +
 usr/src/uts/sparc/ml/modstubs.s      |  1 +
 6 files changed, 109 insertions(+)

diff --git a/usr/src/cmd/ptools/pfiles/pfiles.c b/usr/src/cmd/ptools/pfiles/pfiles.c
index 1c0c30172a..972bf57f48 100644
--- a/usr/src/cmd/ptools/pfiles/pfiles.c
+++ b/usr/src/cmd/ptools/pfiles/pfiles.c
@@ -556,6 +556,8 @@ show_sockaddr(const char *str, struct sockaddr *sa, socklen_t len)
 	case AF_GOSIP:		p = "AF_GOSIP";		break;
 	case AF_IPX:		p = "AF_IPX";		break;
 	case AF_ROUTE:		p = "AF_ROUTE";		break;
+	case AF_KEY:		p = "AF_KEY";		break;
+	case AF_POLICY:		p = "AF_POLICY";	break;
 	case AF_LINK:		p = "AF_LINK";		break;
 	case AF_LX_NETLINK:	p = "AF_LX_NETLINK";	break;
 	}
diff --git a/usr/src/uts/common/inet/ip/keysock.c b/usr/src/uts/common/inet/ip/keysock.c
index c05c147b4b..32fb277abc 100644
--- a/usr/src/uts/common/inet/ip/keysock.c
+++ b/usr/src/uts/common/inet/ip/keysock.c
@@ -891,6 +891,81 @@ keysock_opt_set(queue_t *q, uint_t mgmt_flags, int level,
 	return (errno);
 }
 
+/*
+ * Handle STREAMS ioctl copyin for getsockname() for both PF_KEY and
+ * PF_POLICY.
+ */
+void
+keysock_spdsock_wput_iocdata(queue_t *q, mblk_t *mp, sa_family_t family)
+{
+	mblk_t *mp1;
+	STRUCT_HANDLE(strbuf, sb);
+	/* What size of sockaddr do we need? */
+	uint_t addrlen = sizeof (struct sockaddr);
+
+	/* We only handle TI_GET{MY,PEER}NAME (get{sock,peer}name()). */
+	switch (((struct iocblk *)mp->b_rptr)->ioc_cmd) {
+	case TI_GETMYNAME:
+	case TI_GETPEERNAME:
+		break;
+	default:
+		freemsg(mp);
+		return;
+	}
+
+	switch (mi_copy_state(q, mp, &mp1)) {
+	case -1:
+		return;
+	case MI_COPY_CASE(MI_COPY_IN, 1):
+		break;
+	case MI_COPY_CASE(MI_COPY_OUT, 1):
+		/*
+		 * The address has been copied out, so now
+		 * copyout the strbuf.
+		 */
+		mi_copyout(q, mp);
+		return;
+	case MI_COPY_CASE(MI_COPY_OUT, 2):
+		/*
+		 * The address and strbuf have been copied out.
+		 * We're done, so just acknowledge the original
+		 * M_IOCTL.
+		 */
+		mi_copy_done(q, mp, 0);
+		return;
+	default:
+		/*
+		 * Something strange has happened, so acknowledge
+		 * the original M_IOCTL with an EPROTO error.
+		 */
+		mi_copy_done(q, mp, EPROTO);
+		return;
+	}
+
+	/*
+	 * Now we have the strbuf structure for TI_GET{MY,PEER}NAME. Next we
+	 * copyout the requested address and then we'll copyout the strbuf.
+	 * Regardless of sockname or peername, we just return a sockaddr with
+	 * sa_family set.
+	 */
+	STRUCT_SET_HANDLE(sb, ((struct iocblk *)mp->b_rptr)->ioc_flag,
+	    (void *)mp1->b_rptr);
+
+	if (STRUCT_FGET(sb, maxlen) < addrlen) {
+		mi_copy_done(q, mp, EINVAL);
+		return;
+	}
+
+	mp1 = mi_copyout_alloc(q, mp, STRUCT_FGETP(sb, buf), addrlen, B_TRUE);
+	if (mp1 == NULL)
+		return;
+
+	STRUCT_FSET(sb, len, addrlen);
+	((struct sockaddr *)mp1->b_wptr)->sa_family = family;
+	mp1->b_wptr += addrlen;
+	mi_copyout(q, mp);
+}
+
 /*
  * Handle STREAMS messages.
  */
@@ -954,11 +1029,24 @@ keysock_wput_other(queue_t *q, mblk_t *mp)
 			break;
 		}
 		return;
+	case M_IOCDATA:
+		keysock_spdsock_wput_iocdata(q, mp, PF_KEY);
+		return;
 	case M_IOCTL:
 		iocp = (struct iocblk *)mp->b_rptr;
 		error = EINVAL;
 
 		switch (iocp->ioc_cmd) {
+		case TI_GETMYNAME:
+		case TI_GETPEERNAME:
+			/*
+			 * For pfiles(1) observability with getsockname().
+			 * See keysock_spdsock_wput_iocdata() for the rest of
+			 * this.
+			 */
+			mi_copyin(q, mp, NULL,
+			    SIZEOF_STRUCT(strbuf, iocp->ioc_flag));
+			return;
 		case ND_SET:
 		case ND_GET:
 			if (nd_getset(q, keystack->keystack_g_nd, mp)) {
diff --git a/usr/src/uts/common/inet/ip/spdsock.c b/usr/src/uts/common/inet/ip/spdsock.c
index be1c696018..03f32ea08b 100644
--- a/usr/src/uts/common/inet/ip/spdsock.c
+++ b/usr/src/uts/common/inet/ip/spdsock.c
@@ -34,6 +34,7 @@
 #include <sys/sysmacros.h>
 #define	_SUN_TPI_VERSION 2
 #include <sys/tihdr.h>
+#include <sys/timod.h>
 #include <sys/ddi.h>
 #include <sys/sunddi.h>
 #include <sys/mkdev.h>
@@ -3404,11 +3405,24 @@ spdsock_wput_other(queue_t *q, mblk_t *mp)
 			break;
 		}
 		return;
+	case M_IOCDATA:
+		keysock_spdsock_wput_iocdata(q, mp, PF_POLICY);
+		return;
 	case M_IOCTL:
 		iocp = (struct iocblk *)mp->b_rptr;
 		error = EINVAL;
 
 		switch (iocp->ioc_cmd) {
+		case TI_GETMYNAME:
+		case TI_GETPEERNAME:
+			/*
+			 * For pfiles(1) observability with getsockname().
+			 * See keysock_spdsock_wput_iocdata() for the rest of
+			 * this.
+			 */
+			mi_copyin(q, mp, NULL,
+			    SIZEOF_STRUCT(strbuf, iocp->ioc_flag));
+			return;
 		case ND_SET:
 		case ND_GET:
 			if (nd_getset(q, spds->spds_g_nd, mp)) {
diff --git a/usr/src/uts/common/inet/ipsec_impl.h b/usr/src/uts/common/inet/ipsec_impl.h
index 8c4f222898..b3434adc34 100644
--- a/usr/src/uts/common/inet/ipsec_impl.h
+++ b/usr/src/uts/common/inet/ipsec_impl.h
@@ -110,6 +110,9 @@ extern "C" {
 extern boolean_t keysock_extended_reg(netstack_t *);
 extern uint32_t keysock_next_seq(netstack_t *);
 
+/* Common-code for spdsock and keysock. */
+extern void keysock_spdsock_wput_iocdata(queue_t *, mblk_t *, sa_family_t);
+
 /*
  * Locking for ipsec policy rules:
  *
diff --git a/usr/src/uts/intel/ia32/ml/modstubs.s b/usr/src/uts/intel/ia32/ml/modstubs.s
index 8a082f673e..e7189cd883 100644
--- a/usr/src/uts/intel/ia32/ml/modstubs.s
+++ b/usr/src/uts/intel/ia32/ml/modstubs.s
@@ -536,6 +536,7 @@ fcnname/**/_info:							\
 	
 #ifndef	KEYSOCK_MODULE
 	MODULE(keysock,	drv);
+	WSTUB(keysock,	keysock_spdsock_wput_iocdata,	nomod_zero);
 	WSTUB(keysock,	keysock_plumb_ipsec,	nomod_zero);
 	WSTUB(keysock,	keysock_extended_reg,	nomod_zero);
 	WSTUB(keysock,	keysock_next_seq,	nomod_zero);
diff --git a/usr/src/uts/sparc/ml/modstubs.s b/usr/src/uts/sparc/ml/modstubs.s
index 845705dba8..2aad120713 100644
--- a/usr/src/uts/sparc/ml/modstubs.s
+++ b/usr/src/uts/sparc/ml/modstubs.s
@@ -422,6 +422,7 @@ stubs_base:
 
 #ifndef KEYSOCK_MODULE
 	MODULE(keysock,drv);
+	WSTUB(keysock,	keysock_spdsock_wput_iocdata,	nomod_zero);
 	WSTUB(keysock,	keysock_plumb_ipsec,	nomod_zero);
 	WSTUB(keysock,	keysock_extended_reg,	nomod_zero);
 	WSTUB(keysock,	keysock_next_seq,	nomod_zero);
-- 
2.21.0

