From 24d359b0ffa7ba6019435f0e590a1e0a2b964647 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Wed, 3 Jan 2018 15:04:14 +0000
Subject: [PATCH] MANTA-3528 ship the PostgreSQL prefaulter in the Manta
 Manatee image TOOLS-1850 common Makefile infrastructure for Go toolchain use
 TOOLS-1810 common Makefile infrastructure for NPM public registry use
 TOOLS-1814 retire "node_deps" Makefile from eng.git

---
 .gitignore                                    |   3 +
 .gitmodules                                   |   3 +
 Makefile                                      |  97 ++++++++-----
 boot/setup.sh                                 |   6 +
 deps/pg_prefaulter                            |   1 +
 etc/pg_prefaulter.toml                        |  28 ++++
 smf/manifests/pg_prefaulter.xml.in            |  60 ++++++++
 smf/methods/pg_prefaulter                     |  75 ++++++++++
 tools/download_go                             |  94 +++++++++++++
 tools/mk/Makefile.defs                        |  58 +++++++-
 tools/mk/Makefile.deps                        |   2 +
 tools/mk/Makefile.go_prebuilt.defs            | 132 ++++++++++++++++++
 tools/mk/Makefile.go_prebuilt.targ            |  47 +++++++
 tools/mk/Makefile.node.defs                   | 104 --------------
 tools/mk/Makefile.node.targ                   |  42 ------
 tools/mk/Makefile.node_deps.defs              |  43 ------
 tools/mk/Makefile.node_modules.defs           |  68 +++++++++
 ...e_deps.targ => Makefile.node_modules.targ} |  19 ++-
 tools/mk/Makefile.node_prebuilt.defs          |  16 ++-
 tools/mk/Makefile.smf.targ                    |   2 +-
 tools/mk/Makefile.targ                        |  35 +++--
 21 files changed, 689 insertions(+), 246 deletions(-)
 create mode 160000 deps/pg_prefaulter
 create mode 100644 etc/pg_prefaulter.toml
 create mode 100644 smf/manifests/pg_prefaulter.xml.in
 create mode 100755 smf/methods/pg_prefaulter
 create mode 100755 tools/download_go
 create mode 100644 tools/mk/Makefile.go_prebuilt.defs
 create mode 100644 tools/mk/Makefile.go_prebuilt.targ
 delete mode 100644 tools/mk/Makefile.node.defs
 delete mode 100644 tools/mk/Makefile.node.targ
 delete mode 100644 tools/mk/Makefile.node_deps.defs
 create mode 100644 tools/mk/Makefile.node_modules.defs
 rename tools/mk/{Makefile.node_deps.targ => Makefile.node_modules.targ} (52%)

diff --git a/.gitignore b/.gitignore
index 5b42791..e02b2ca 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,8 @@
+/cache
+/make_stamps
 /node_modules
 /tmp
+/pg_prefaulter
 build
 docs/*.json
 docs/*.html
diff --git a/.gitmodules b/.gitmodules
index b302921..fcc079e 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -10,3 +10,6 @@
 [submodule "deps/pg_repack"]
 	path = deps/pg_repack
 	url = https://github.com/reorg/pg_repack.git
+[submodule "deps/pg_prefaulter"]
+	path = deps/pg_prefaulter
+	url = https://github.com/joyent/pg_prefaulter
diff --git a/Makefile b/Makefile
index cbc55eb..5207063 100644
--- a/Makefile
+++ b/Makefile
@@ -21,41 +21,48 @@ endif
 #
 # Files
 #
-SMF_MANIFESTS_IN = smf/manifests/backupserver.xml.in \
-		smf/manifests/sitter.xml.in \
-		smf/manifests/snapshotter.xml.in
+SMF_MANIFESTS_IN =		smf/manifests/backupserver.xml.in \
+				smf/manifests/sitter.xml.in \
+				smf/manifests/snapshotter.xml.in \
+				smf/manifests/pg_prefaulter.xml.in
 
 #
 # Variables
 #
 
-NODE_PREBUILT_VERSION   := v0.10.26
-NODE_PREBUILT_TAG       := zone
+NODE_PREBUILT_VERSION :=	v0.10.26
+NODE_PREBUILT_TAG :=		zone
 # Allow building on a SmartOS image other than sdc-multiarch/13.3.1.
-NODE_PREBUILT_IMAGE=b4bdc598-8939-11e3-bea4-8341f6861379
+NODE_PREBUILT_IMAGE =		b4bdc598-8939-11e3-bea4-8341f6861379
+
+#
+# The PostgreSQL prefaulter program is implemented in Go, so we will need
+# an appropriate Go toolchain to build it.  In addition, we will need to
+# know what the fully qualified import path is called in order to arrange
+# the GOPATH directory in the way the toolchain expects.
+#
+GO_PREBUILT_VERSION =		1.9.2
+PG_PREFAULTER_IMPORT =		github.com/joyent/pg_prefaulter
+PG_PREFAULTER =			pg_prefaulter
+
+CLEAN_FILES +=			$(PG_PREFAULTER)
 
 
 include ./tools/mk/Makefile.defs
+include ./tools/mk/Makefile.go_prebuilt.defs
 include ./tools/mk/Makefile.node_prebuilt.defs
+include ./tools/mk/Makefile.node_modules.defs
 include ./tools/mk/Makefile.smf.defs
 
-RELEASE_TARBALL         := manta-manatee-pkg-$(STAMP).tar.bz2
-ROOT                    := $(shell pwd)
-RELSTAGEDIR             := /tmp/$(STAMP)
-
-#
-# Env variables
-#
-PATH            := $(NODE_INSTALL)/bin:${PATH}
+RELEASE_TARBALL :=		manta-manatee-pkg-$(STAMP).tar.bz2
+ROOT :=				$(shell pwd)
+RELSTAGEDIR :=			/tmp/$(STAMP)
 
 #
 # Repo-specific targets
 #
 .PHONY: all
-all: $(SMF_MANIFESTS) | $(NPM_EXEC) $(REPO_DEPS) manta-scripts
-	$(NPM) install
-
-DISTCLEAN_FILES = ./node_modules
+all: $(SMF_MANIFESTS) $(STAMP_NODE_MODULES) $(PG_PREFAULTER) manta-scripts
 
 .PHONY: manta-scripts
 manta-scripts: deps/manta-scripts/.git
@@ -63,30 +70,32 @@ manta-scripts: deps/manta-scripts/.git
 	cp deps/manta-scripts/*.sh $(BUILD)/scripts
 
 .PHONY: release
-release: all deps docs pg $(SMF_MANIFESTS)
+release: all deps docs pg
 	@echo "Building $(RELEASE_TARBALL)"
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/manatee/deps
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/boot
 	@mkdir -p $(RELSTAGEDIR)/site
 	@touch $(RELSTAGEDIR)/site/.do-not-delete-me
 	@mkdir -p $(RELSTAGEDIR)/root
-	cp -r   $(ROOT)/build \
-		$(ROOT)/bin \
-		$(ROOT)/node_modules \
-		$(ROOT)/package.json \
-		$(ROOT)/pg_dump \
-		$(ROOT)/sapi_manifests \
-		$(ROOT)/smf \
-		$(ROOT)/etc \
-		$(RELSTAGEDIR)/root/opt/smartdc/manatee/
-	cp -r   $(ROOT)/deps/manta-scripts \
-		$(RELSTAGEDIR)/root/opt/smartdc/manatee/deps
+	cp -r \
+	    $(ROOT)/build \
+	    $(ROOT)/bin \
+	    $(ROOT)/node_modules \
+	    $(ROOT)/package.json \
+	    $(ROOT)/pg_dump \
+	    $(ROOT)/sapi_manifests \
+	    $(ROOT)/smf \
+	    $(ROOT)/etc \
+	    $(RELSTAGEDIR)/root/opt/smartdc/manatee/
+	cp $(PG_PREFAULTER) $(RELSTAGEDIR)/root/opt/smartdc/manatee/bin/
+	cp -r $(ROOT)/deps/manta-scripts \
+	    $(RELSTAGEDIR)/root/opt/smartdc/manatee/deps
 	mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/boot/scripts
 	cp -R $(RELSTAGEDIR)/root/opt/smartdc/manatee/build/scripts/* \
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/scripts/
 	cp -R $(ROOT)/boot/* \
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/
-	(cd $(RELSTAGEDIR) && $(TAR) -jcf $(ROOT)/$(RELEASE_TARBALL) root site)
+	cd $(RELSTAGEDIR) && $(TAR) -jcf $(ROOT)/$(RELEASE_TARBALL) root site
 	@rm -rf $(RELSTAGEDIR)
 
 .PHONY: publish
@@ -96,15 +105,35 @@ publish: release
 		exit 1; \
 	fi
 	mkdir -p $(BITS_DIR)/manta-manatee
-	cp $(ROOT)/$(RELEASE_TARBALL) $(BITS_DIR)/manta-manatee/$(RELEASE_TARBALL)
+	cp $(ROOT)/$(RELEASE_TARBALL) \
+	    $(BITS_DIR)/manta-manatee/$(RELEASE_TARBALL)
 
+.PHONY: pg
 pg: all deps/postgresql92/.git deps/postgresql96/.git deps/pg_repack/.git
 	$(MAKE) -C node_modules/manatee -f Makefile.postgres \
-		RELSTAGEDIR="$(RELSTAGEDIR)" \
-		DEPSDIR="$(ROOT)/deps"
+	    RELSTAGEDIR="$(RELSTAGEDIR)" \
+	    DEPSDIR="$(ROOT)/deps"
+
+#
+# Link the "pg_prefaulter" submodule into the correct place within our
+# project-local GOPATH, then build the binary.
+#
+$(PG_PREFAULTER): deps/pg_prefaulter/.git $(STAMP_GO_TOOLCHAIN)
+	$(GO) version
+	mkdir -p $(GO_GOPATH)/src/$(dir $(PG_PREFAULTER_IMPORT))
+	rm -f $(GO_GOPATH)/src/$(PG_PREFAULTER_IMPORT)
+	ln -s $(ROOT)/deps/pg_prefaulter \
+	    $(GO_GOPATH)/src/$(PG_PREFAULTER_IMPORT)
+	$(GO) build \
+	    -ldflags "-X main.commit=$(shell cd $(ROOT)/deps/pg_prefaulter && \
+	    git describe --tags --always) \
+	    -X main.date=$(shell /usr/bin/date -u +%FT%TZ)" \
+	    -o $@ $(PG_PREFAULTER_IMPORT)
 
 include ./tools/mk/Makefile.deps
+include ./tools/mk/Makefile.go_prebuilt.targ
 include ./tools/mk/Makefile.node_prebuilt.targ
+include ./tools/mk/Makefile.node_modules.targ
 include ./tools/mk/Makefile.smf.targ
 include ./tools/mk/Makefile.targ
 
diff --git a/boot/setup.sh b/boot/setup.sh
index fd3ddc3..a1b3ec1 100755
--- a/boot/setup.sh
+++ b/boot/setup.sh
@@ -78,6 +78,12 @@ function common_enable_services {
     # With Manta we *always* want sitter.
     echo "Starting sitter"
     svcadm enable manatee-sitter
+
+    #
+    # Import the PostgreSQL prefaulter service.
+    #
+    echo "Starting prefaulter"
+    svccfg import /opt/smartdc/manatee/smf/manifests/pg_prefaulter.xml
 }
 
 function common_manatee_setup {
diff --git a/deps/pg_prefaulter b/deps/pg_prefaulter
new file mode 160000
index 0000000..21e0ec6
--- /dev/null
+++ b/deps/pg_prefaulter
@@ -0,0 +1 @@
+Subproject commit 21e0ec67ea7d97f4334b61517cbf0983c96a274a
diff --git a/etc/pg_prefaulter.toml b/etc/pg_prefaulter.toml
new file mode 100644
index 0000000..fb6413e
--- /dev/null
+++ b/etc/pg_prefaulter.toml
@@ -0,0 +1,28 @@
+#
+# Configuration file for PostgreSQL prefaulter.  This file is shipped in the
+# Manatee image for use with the prefaulter, which is deployed as a separate
+# SMF service and enabled by default.  The values here are applicable to all
+# deployments without any customisations, so the use of a config-agent template
+# is not required.
+#
+
+[log]
+# level can be set to "DEBUG", "INFO", "WARN", "ERROR", or "FATAL"
+level = "DEBUG"
+
+[postgresql]
+pgdata = "/manatee/pg/data"
+database = "postgres"
+host = "/tmp"
+port = 5432
+user = "postgres"
+
+[postgresql.xlog]
+pg_xlogdump-path = "/opt/postgresql/current/bin/pg_xlogdump"
+
+[run]
+log-format = "bunyan"
+retry-db-init = true
+
+[circonus.api]
+token = "there is no token, only zuul"
diff --git a/smf/manifests/pg_prefaulter.xml.in b/smf/manifests/pg_prefaulter.xml.in
new file mode 100644
index 0000000..27ca358
--- /dev/null
+++ b/smf/manifests/pg_prefaulter.xml.in
@@ -0,0 +1,60 @@
+<?xml version="1.0"?>
+<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+     Copyright (c) 2017, Joyent, Inc.
+-->
+
+<service_bundle type="manifest" name="pg_prefaulter">
+    <service name="manta/application/pg_prefaulter" type="service" version="1">
+        <create_default_instance enabled="true" />
+
+        <dependency name="dep0" grouping="require_all" restart_on="error"
+          type="service">
+            <service_fmri value="svc:/milestone/multi-user:default" />
+        </dependency>
+
+        <exec_method type="method" name="start" timeout_seconds="10"
+          exec="/opt/smartdc/manatee/smf/methods/pg_prefaulter &amp;">
+            <method_context>
+                <method_environment>
+                    <envvar name="USER" value="root" />
+                    <envvar name="HOME" value="/root" />
+                    <envvar name="PATH"
+                      value="/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin" />
+
+                    <!--
+                        This value influences the number of LWPs that Go
+                        will use in its M:N scheduler.  It seems unlikely
+                        that a single static value will be optimal for
+                        all systems, but that's what we have to work with
+                        right now.  The value 1 is probably too low, but
+                        using NCPUs is probably too high.  We'll start with
+                        a small number and revisit this if it becomes an issue.
+                    -->
+                    <envvar name="GOMAXPROCS" value="4" />
+
+                    <!--
+                        If the software trips an assertion, we want a core
+                        file rather than a set of stack traces.
+                    -->
+                    <envvar name="GOTRACEBACK" value="crash" />
+                </method_environment>
+            </method_context>
+        </exec_method>
+
+        <exec_method type="method" name="stop" exec=":kill"
+          timeout_seconds="30" />
+
+        <template>
+            <common_name>
+                <loctext xml:lang="C">PostgreSQL Prefaulter</loctext>
+            </common_name>
+        </template>
+    </service>
+</service_bundle>
diff --git a/smf/methods/pg_prefaulter b/smf/methods/pg_prefaulter
new file mode 100755
index 0000000..4ccd381
--- /dev/null
+++ b/smf/methods/pg_prefaulter
@@ -0,0 +1,75 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# The PostgresSQL prefaulter makes use of the "pg_xlogdump" utility when
+# extracting information from WAL files.  The prefaulter will not start up
+# unless this program is available at the configured location, even though
+# it does not need to run the program until much later; i.e., after
+# connecting to the database.
+#
+# Manatee provides a symbolic link, "/opt/postgresql/current", which points
+# at the specific PostgreSQL version which is in use.  This link is not
+# available until Manatee has determined the correct version to use.  If this
+# is a totally new Manatee peer, it may also be some time before a snapshot
+# of the upstream database has been received from which to make the version
+# decision.
+#
+# We poll waiting for the "pg_xlogdump" program to exist before starting
+# the prefaulter.  There is no timeout on this wait loop.  If the prefaulter
+# itself can be modified to start up without checking for the existence
+# of the utililty, we can stop doing this altogether.
+#
+
+LOG_HOSTNAME="$(/usr/bin/hostname)"
+LOG_PID="$$"
+LOG_LEVEL_INFO=30
+
+PG_XLOGDUMP='/opt/postgresql/current/bin/pg_xlogdump'
+PG_PREFAULTER='/opt/smartdc/manatee/bin/pg_prefaulter'
+PG_PREFAULTER_CONFIG='/opt/smartdc/manatee/etc/pg_prefaulter.toml'
+
+#
+# This function works like printf(1), but emits a Bunyan-formatted log message.
+#
+function logf {
+	local log_time=$(/usr/bin/date -u +%FT%TZ)
+	local log_message=$(printf "$@")
+
+	#
+	# Escape any double quote that appears in the log message:
+	#
+	log_message=${log_message//'"'/'\"'}
+
+	printf '{"name":"pg_prefaulter","hostname":"%s","pid":%d,"level":%d' \
+	    "$LOG_HOSTNAME" "$LOG_PID" "$LOG_LEVEL_INFO"
+	printf ',"msg":"%s","time":"%s","v":0}\n' \
+	    "$log_message" "$log_time"
+}
+
+logged=no
+while :; do
+	if [[ -x $PG_XLOGDUMP ]]; then
+		logf 'found "pg_xlogdump" at "%s"; starting prefaulter' \
+		    "$PG_XLOGDUMP"
+		break
+	fi
+
+	if [[ $logged == no ]]; then
+		logf 'could not find "pg_xlogdump" at "%s"; waiting...' \
+		    "$PG_XLOGDUMP"
+		logged=yes
+	fi
+
+	/usr/bin/sleep 10
+done
+
+exec "$PG_PREFAULTER" run --config="$PG_PREFAULTER_CONFIG"
diff --git a/tools/download_go b/tools/download_go
new file mode 100755
index 0000000..6e78552
--- /dev/null
+++ b/tools/download_go
@@ -0,0 +1,94 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# This program will download a Go toolchain for a particular system.  It
+# currently expects to find illumos builds of the toolchain on the Joyent
+# download server, where we will be placing them alongside sdcnode, etc.
+#
+# We may revisit this once the Go project makes official builds for illumos
+# systems available in the future.
+#
+# NOTE: This program comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+BASEURL='https://download.joyent.com/pub/build/go/adhoc/'
+GOVERSION=$1
+GOOS=$2
+GOARCH=$3
+OUTDIR=$4
+
+if [[ -z $GOVERSION || -z $GOOS || -z $GOARCH || -z $OUTDIR ]]; then
+	printf 'ERROR: usage: download_go GOVERSION GOOS GOARCH OUTDIR\n' 2>&1
+	exit 1
+fi
+
+TARGET="go-$GOVERSION.tar.bz2"
+
+#
+# Download the index page which lists the current set of available go
+# builds:
+#
+if ! list=$(curl -sSfL "$BASEURL") || [[ -z "$list" ]]; then
+	printf 'ERROR: could not download index page\n' >&2
+	exit 1
+fi
+
+#
+# Using only commonly found household items, extract the full name of the
+# go tar archive we need.
+#
+# One word to describe this process might be "brittle".
+#
+if ! name=$(/usr/bin/awk -v "v=$GOVERSION" -v "o=$GOOS" -v "a=$GOARCH" -F\" '
+    BEGIN { pattern = "^go"v"."o"-"a".tar.bz2$"; }
+    $1 == "<a href=" && $2 ~ pattern { print $2 }' <<< "$list") ||
+    [[ -z "$name" ]]; then
+	printf 'ERROR: could not locate file name in index page\n' >&2
+	printf '\t(Does Go version %s (%s-%s) exist?)\n' \
+	    "$GOVERSION" "$GOOS" "$GOARCH" >&2
+	exit 1
+fi
+
+if [[ ! -f $OUTDIR/$name ]]; then
+	printf 'Downloading Go: %s\n' "$BASEURL$name"
+
+	#
+	# If the full file name of the latest go build does not exist,
+	# download it now to a temporary file.  If it succeeds, move it into
+	# place.
+	#
+	if ! curl -sSf -o "$OUTDIR/.tmp.$name" "$BASEURL$name"; then
+		printf 'ERROR: could not download go' >&2
+		rm -f "$OUTPUT.tmp"
+		exit 1
+	fi
+
+	if ! mv "$OUTDIR/.tmp.$name" "$OUTDIR/$name"; then
+		exit 1
+	fi
+fi
+
+#
+# Make sure the target link points at the correct file:
+#
+rm -f "$OUTDIR/$TARGET"
+if ! ln -s "$name" "$OUTDIR/$TARGET"; then
+	printf 'ERROR: could not create target link\n' >&2
+	exit 1
+fi
+
+exit 0
+
+# vim: set ts=8 sts=8 sw=8 noet:
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..f6e9042 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,14 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +56,50 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 2d92ec3..1cffbe7 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -50,3 +50,5 @@ $(JSSTYLE_EXEC): | deps/jsstyle/.git
 RESTDOWN_EXEC	?= deps/restdown/bin/restdown
 RESTDOWN	?= python $(RESTDOWN_EXEC)
 $(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.go_prebuilt.defs b/tools/mk/Makefile.go_prebuilt.defs
new file mode 100644
index 0000000..a884824
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.defs
@@ -0,0 +1,132 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.defs: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile aids in the download and operation of a Go toolchain when
+# building software written in the Go language.  It provides as much isolation
+# from the broader build host as possible, including the provision of a
+# project-local GOPATH and GOROOT.
+#
+# This Makefile is intended to be used along with "Makefile.go_prebuilt.targ".
+#
+# When using this Makefile, you MUST define these variables before the include
+# directive:
+#
+#	GO_PREBUILT_VERSION	The version of the Go toolchain to download
+#				and use.  For example, "1.9".
+#
+# You MAY also specify the following variables:
+#
+#	GO_ENV			A list of environment variable specifications
+#				in shell syntax which will be prepended	to Go
+#				toolchain invocations.  Using the "+=" operator,
+#				it is possible to add to the list without
+#				overriding the base environment specified by
+#				this Makefile.
+#
+# This Makefile provides definitions for the following variables:
+#
+#	GO_INSTALL		The location of the Go toolchain, relative
+#				to $(TOP).
+#
+#	GO_GOPATH		The location of the project-local GOPATH
+#				directory, relative to $(TOP).
+#
+#	GO			To be used in place of a bare invocation of
+#				"go"; e.g., "go build" would become
+#				"$(GO) build".  This invocation uses env(1)
+#				and $(GO_ENV) to construct an isolated
+#				environment.
+#
+
+ifndef TOP
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef CACHE_DIR
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef GO_PREBUILT_VERSION
+$(error GO_PREBUILT_VERSION must be set before including this makefile.)
+endif
+
+GO_VERSION =			$(GO_PREBUILT_VERSION)
+
+#
+# This Makefile is presently used to build programs written in the Go language
+# to be shipped in zone images.  As such, we default to a target specification
+# which is appropriate for an illumos host.
+#
+GO_GOOS ?=			solaris
+GO_GOARCH ?=			amd64
+
+#
+# The "tools/download_go" script will obtain a Go toolchain tar archive, which
+# we will store in the $(CACHE_DIR).  This directory is be removed entirely by
+# "make distclean".
+#
+GO_TARBALL =			$(CACHE_DIR)/go-$(GO_PREBUILT_VERSION).tar.bz2
+
+#
+# The downloaded Go toolchain will be extracted into a directory under
+# $(CACHE_DIR) by the $(STAMP_GO_TOOLCHAIN) target.  This directory becomes
+# the value of $GOROOT for toolchain invocations.
+#
+GO_INSTALL =			$(CACHE_DIR)/go-$(GO_VERSION)
+
+#
+# Parts of the Go toolchain store intermediate build artefacts in the GOPATH
+# directory.  At the time of writing, at least some of these intermediate
+# artefacts cannot be reused by different versions of the toolchain.  There
+# does not appear to be any mechanism in place to _prevent_ an error of this
+# type, so we include the Go toolchain version in the project-local GOPATH
+# directory name.
+#
+GO_GOPATH =			$(CACHE_DIR)/gopath-$(GO_VERSION)
+
+#
+# The Go toolchain derives some amount of behaviour from the environment.  In
+# order to precisely control that behaviour, we build up our own environment
+# containing only the expected values and run the tool under "env -i", thus
+# precluding any other variables from leaking in:
+#
+GO_ENV +=			GOROOT="$(TOP)/$(GO_INSTALL)"
+GO_ENV +=			GOPATH="$(TOP)/$(GO_GOPATH)"
+GO_ENV +=			GOARCH="$(GO_GOARCH)"
+GO_ENV +=			GOOS="$(GO_GOOS)"
+GO_ENV +=			PATH="$(TOP)/$(GO_INSTALL)/bin:$$PATH"
+
+#
+# The $(GO) variable should be used in place of bare invocations of "go".
+# For example, instead of "go build", use "$(GO) build".
+#
+GO =				env -i $(GO_ENV) $(TOP)/$(GO_INSTALL)/bin/go
+
+#
+# If the version of Go is changed in the Makefile, or interactively, we need
+# to make sure the new version is downloaded and installed.  As such, the
+# stamp name needs to include the version.
+#
+STAMP_GO_TOOLCHAIN =		$(MAKE_STAMPS_DIR)/go-toolchain-$(GO_VERSION)
+
+#
+# A regular "make clean" should remove any cached build artefacts from GOPATH.
+#
+CLEAN_FILES +=			$(GO_GOPATH)
diff --git a/tools/mk/Makefile.go_prebuilt.targ b/tools/mk/Makefile.go_prebuilt.targ
new file mode 100644
index 0000000..fa27eaf
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.targ
@@ -0,0 +1,47 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.targ: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# For usage documentation, see the comments in "Makefile.go_prebuilt.defs".
+#
+
+ifndef GO_TARBALL
+$(error You must include Makefile.go_prebuilt.defs first.)
+endif
+
+#
+# Download a prebuilt copy of the Go toolchain.  There are not presently
+# builds available for illumos systems on the official Go site, so we
+# have an appropriate build stored on a Joyent server.
+#
+$(GO_TARBALL):
+	rm -f $@
+	mkdir -p $(@D)
+	tools/download_go $(GO_PREBUILT_VERSION) solaris amd64 $(CACHE_DIR)
+
+#
+# Extract the Go toolchain.  This stamp includes the version number of the
+# Go toolchain, ensuring a new download and extraction if the version changes.
+#
+$(STAMP_GO_TOOLCHAIN): $(GO_TARBALL)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf $(GO_INSTALL)
+	mkdir $(GO_INSTALL)
+	cd $(GO_INSTALL) && tar xfj $(TOP)/$(GO_TARBALL)
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
deleted file mode 100644
index 9376841..0000000
--- a/tools/mk/Makefile.node.defs
+++ /dev/null
@@ -1,104 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.defs: Makefile for building and bundling your own Node.js.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates building and bundling your own copy of Node.js in
-# your repo.  All it does is define variables for node, node-waf, and npm for
-# you to use elsewhere in your Makefile and rules to build these tools when
-# needed.
-#
-# To use this facility, include "Makefile.node.defs", use the variables as
-# described below to define targets, and then include "Makefile.node.targ".
-#
-# There are two use cases addressed here:
-#
-# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
-#     install" and "node-waf configure build".  To facilitate this, this
-#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
-#     to invoke these commands during the build process.  You MUST NOT assume
-#     that these variables just evaluate to the filenames themselves, as they
-#     may have environment variable definitions and other things that prevent
-#     you from using them directly as a filename.  If you want that, see (2).
-#
-#     Wherever you use one of these variables, you MUST include a dependency on
-#     the corresponding *_EXEC variable as well, like so:
-#
-#	node_modules/restify: deps/restify $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#	node_modules/restify: deps/restify | $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     Otherwise, the underlying file will not get built.  We don't
-#     automatically build them as part of "all" because that approach is
-#     brittle.
-#
-# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
-#     specifying the path to node used for the start method of your service's
-#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
-#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
-#     files from the root of the workspace.  You MUST NOT use these variables
-#     to invoke these commands during the build process.  See (1) instead.
-#
-#     However, in order to work at runtime, you must build the tool as well.
-#     That is, if you use NODE_EXEC to specify the path to node, you must
-#     depend on NODE_EXEC somewhere. This usually happens anyway because you
-#     usually need them during the build process too, but if you don't then
-#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
-#     target.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
-#				(default: "--with-dtrace" on SmartOS; empty
-#				otherwise.)
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-
-BUILD		?= build
-NODE_INSTALL 	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL)
-
-NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
-
-ifeq ($(shell uname -s),SunOS)
-	NODE_CONFIG_FLAGS += 	--with-dtrace \
-				--openssl-libpath=/opt/local/lib \
-				--openssl-includes=/opt/local/include
-endif
-
-NODE_EXEC	= $(NODE_INSTALL)/bin/node
-NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
-NPM_EXEC	= $(NODE_INSTALL)/bin/npm
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_EXEC)
-NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
deleted file mode 100644
index abdc616..0000000
--- a/tools/mk/Makefile.node.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.targ: See Makefile.node.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-ifneq ($(shell uname -s),SunOS)
-NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
-endif
-
-ifeq ($(shell uname -s),SunOS)
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
-	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
-else
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	(mkdir -p $(BUILD) \
-		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
-		&& cd src-node \
-		&& git checkout $(NODE_PREBUILT_VERSION) \
-		&& ./configure $(NODE_CONFIG_FLAGS) \
-		&& $(MAKE) && $(MAKE) install)
-endif
-
-DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
-
-distclean::
-	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f7..0000000
--- a/tools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_modules.targ
similarity index 52%
rename from tools/mk/Makefile.node_deps.targ
rename to tools/mk/Makefile.node_modules.targ
index bb2ab4f..0156bce 100644
--- a/tools/mk/Makefile.node_deps.targ
+++ b/tools/mk/Makefile.node_modules.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,11 +5,11 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
 #
 # NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
 # into other repos as-is without requiring any modifications. If you find
@@ -18,7 +17,15 @@
 # eng.git and then update your repo to use the new version.
 #
 
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
 
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
index 5744489..2129742 100644
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -146,8 +145,15 @@ NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
 NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
 NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
 NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
index 0fa03ce..f78de96 100644
--- a/tools/mk/Makefile.smf.targ
+++ b/tools/mk/Makefile.smf.targ
@@ -23,7 +23,7 @@ check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
 %.smfchk: %
 	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
 
-check: check-manifests
+check:: check-manifests
 
 $(SMF_MANIFESTS): %: %.in
 	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index ea19000..54edf0e 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -89,9 +88,9 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
@@ -108,7 +107,7 @@ JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -209,7 +208,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +263,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,9 +293,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -315,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

