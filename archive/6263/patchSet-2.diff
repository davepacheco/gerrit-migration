commit 6e14949de611ae79803213369bbb89a1ead3e2b6
Author: Mike Gerdts <mike.gerdts@joyent.com>
Date:   2019-05-16T20:00:46+00:00 (5 months ago)
    
    OS-5176 vmadm stop and reboot may propagate improper error

diff --git a/src/vm/man/vmadm.1m.md b/src/vm/man/vmadm.1m.md
index 72b030fa..7bdf268f 100644
--- a/src/vm/man/vmadm.1m.md
+++ b/src/vm/man/vmadm.1m.md
@@ -247,8 +247,8 @@ tab-complete UUIDs rather than having to type them out for every command.
         in attempt to minimize data loss.
 
         For OS VMs, the shutdown command '/usr/sbin/shutdown -y -g 0 -i 6'
-        will be run within the zone, which will cause the VM to reboot
-        after shutting down.
+        (or '/sbin/shutdown -r now' if brand is 'lx') will be run within the
+        zone, which will cause the VM to reboot after shutting down.
 
         For HVM VMs, vmadmd will act as a helper here for the reboot in the
         same manner as described below for the 'stop' command.
@@ -336,11 +336,13 @@ tab-complete UUIDs rather than having to type them out for every command.
         that processes within the VM are given an opportunity to shut down
         correctly in attempt to minimize data loss.
 
-        For OS VMs, the shutdown command '/usr/sbin/shutdown -y -g 0 -i 5'
-        will be run within the zone, which will cause the VM to go to the
-        'off' state after shutting down all processes. OS VMs do not
-        support the [-t timeout] option unless they also have the docker
-        property set to true.
+        For OS VMs, a shutdown command will be run in the zone, which will cause
+        the VM to go to the 'off' state after shutting down all processes.  If
+        brand is 'lx', the shutdown command is '/sbin/shutdown -h now'.  For
+        other OS VMs, the shutdown command is '/usr/sbin/shutdown -y -g 0 -i 5'.
+        If the VM does not shutdown before its timer expires (60 seconds), the
+        VM is forcibly halted. OS VMs do not support the [-t timeout] option
+        unless they also have the docker property set to true.
 
         For HVM VMs, the running qemu/bhyve process sends an ACPI signal to the
         guest kernel telling it to shut down. In case the guest kernel ignores
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index f8431444..d5ce6e1a 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * Experimental functions, expect these interfaces to be unstable and
  * potentially go away entirely:
@@ -17487,26 +17487,48 @@ function doShutdownStop(vmobj, options, callback)
             .features.shutdown_cmd.split(' '));
     }
     async.series([
-        function (cb) {
+        function zloginShutdown(cb) {
             traceExecFile('/usr/sbin/zlogin', args, log, 'zlogin-shutdown',
                 function (err, stdout, stderr) {
 
                 if (err) {
-                    log.error({
+                    log.info({
                         err: err,
                         stdout: stdout,
                         stderr: stderr
-                    }, 'zlogin for ' + vmobj.zonename + ' exited with code '
-                        + err.code + ': ' + err.message);
-                    cb(err);
-                    return;
+                    }, 'Ignoring error: zlogin for ' + vmobj.zonename
+                        + ' exited with code ' + err.code + ': ' + err.message);
+                } else {
+                    log.debug({stdout: stdout, stderr: stderr},
+                        'zlogin claims to have worked');
                 }
-
-                log.debug({stdout: stdout, stderr: stderr},
-                    'zlogin claims to have worked');
                 cb();
             });
-        }, function (cb) {
+        }, function waitInstalled(cb) {
+            VM.waitForZoneState(vmobj, 'installed', {timeout: STOP_TIMEOUT},
+                function shutdownWaitCb(err) {
+
+                if (err && err.hasOwnProperty('code')
+                    && err.code === 'ETIMEOUT') {
+
+                    log.info('Timeout waiting for shutdown to complete; '
+                        + 'halting.');
+                    zoneadm(['-z', vmobj.zonename, 'halt'], log,
+                        function shutdownHalt(_err, fds) {
+                            if (_err) {
+                                log.warn({err: _err, stdout: fds.stdout,
+                                    stderr: fds.stderr}, 'Error halting zone');
+                            } else {
+                                log.debug({stdout: fds.stdout, stderr:
+                                    fds.stderr}, 'halted zone');
+                            }
+                            cb(_err);
+                        });
+                    return;
+                }
+                cb(err);
+            });
+        }, function zonecfgNoAutoboot(cb) {
             zonecfg(vmobj.uuid, [unset_autoboot], {log: log},
                 function (err, fds) {
 
@@ -18037,12 +18059,10 @@ function doReboot(vmobj, options, callback)
             traceExecFile('/usr/sbin/zlogin', args, log, 'zlogin-shutdown',
                 function (err, stdout, stderr) {
                 if (err) {
-                    log.error({'err': err, 'stdout': stdout,
-                        'stderr': stderr}, 'zlogin for ' + vmobj.zonename
-                        + ' exited with code' + err.code + ': '
+                    log.info({'err': err, 'stdout': stdout,
+                        'stderr': stderr}, 'Ignoring error: zlogin for '
+                        + vmobj.zonename + ' exited with code' + err.code + ': '
                         + err.message);
-                    cb(err);
-                    return;
                 }
                 cb();
             });
