From c96c1449c27004261b3aced534a9139dbed9c61d Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 11 Jan 2017 23:20:46 +0000
Subject: [PATCH] NAPI-348 CreateNic endpoint does not accept fabric NIC due to
 improper NIC tag validation

---
 lib/models/nic/common.js         | 48 +++++++++++++++++++++++++-------
 lib/models/nic/create.js         |  2 +-
 lib/models/nic/del.js            |  2 +-
 lib/models/nic/get.js            |  2 +-
 lib/models/nic/update.js         | 41 ++-------------------------
 test/integration/fabrics.test.js | 47 +++++++++++++++++++++++++++++++
 test/unit/nics.test.js           |  6 ++++
 7 files changed, 96 insertions(+), 52 deletions(-)

diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index dd959e6..c1575cb 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -19,10 +19,10 @@ var constants = require('../../util/constants');
 var errors = require('../../util/errors');
 var mod_ip = require('../ip');
 var mod_net = require('../network');
+var mod_nicTag = require('../nic-tag');
 var mod_pool = require('../network-pool');
 var mod_portolan_moray = require('portolan-moray');
 var util = require('util');
-var util_mac = require('../../util/mac');
 var validate = require('../../util/validate');
 var vasync = require('vasync');
 
@@ -39,16 +39,44 @@ var VALID_NIC_STATES = [ 'provisioning', 'stopped', 'running' ];
 
 
 /**
- * Validates a MAC address
+ * Validate a NIC tag that may potentially be an overlay tag (of the form
+ * sdc_overlay_tag/1234).
  */
-function validateMAC(_, name, mac, callback) {
-    var macNum = util_mac.macAddressToNumber(mac);
-    if (!macNum) {
-        return callback(errors.invalidParam(name,
-            'invalid MAC address'));
-    }
+function validateNicTag(opts, name, tag, callback) {
+    validate.string(null, name, tag, function (strErr) {
+        if (strErr) {
+            callback(strErr);
+            return;
+        }
+
+        var split = tag.split('/');
+        var tagName = split[0];
+
+        mod_nicTag.validateExists(true, opts, name, tagName, function (exErr) {
+            if (exErr) {
+                callback(exErr);
+                return;
+            }
+
+            if (!split[1]) {
+                callback(null, tagName);
+                return;
+            }
 
-    return callback(null, macNum);
+            validate.VxLAN(null, name, split[1], function (vErr, vid) {
+                if (vErr) {
+                    callback(vErr);
+                    return;
+                }
+
+                var toReturn = {};
+                toReturn[name] = tagName;
+                toReturn.vnet_id = vid;
+
+                callback(null, null, toReturn);
+            });
+        });
+    });
 }
 
 
@@ -389,7 +417,7 @@ module.exports = {
     BUCKET: BUCKET,
     commitBatch: commitBatch,
     listVnetCns: listVnetCns,
-    validateMAC: validateMAC,
+    validateNicTag: validateNicTag,
     validateNetwork: validateNetwork,
     validateNetworkParams: validateNetworkParams,
     validateFabricNic: validateFabricNic,
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index f2e4d06..aeb0a90 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -44,7 +44,7 @@ var CREATE_SCHEMA = {
         mac: validate.MAC,
         model: validate.string,
         network_uuid: common.validateNetwork,
-        nic_tag: mod_nicTag.validateExists.bind(null, true),
+        nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
         reserved: validate.bool,
diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index 5f51a8e..bc08b47 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -25,7 +25,7 @@ var vasync = require('vasync');
 
 var DELETE_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     }
 };
 
diff --git a/lib/models/nic/get.js b/lib/models/nic/get.js
index a5eb4c8..bf59a2e 100644
--- a/lib/models/nic/get.js
+++ b/lib/models/nic/get.js
@@ -22,7 +22,7 @@ var validate = require('../../util/validate');
 
 var GET_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     }
 };
 
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index fa584f9..45de1fe 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -61,7 +61,7 @@ var UPDATE_PARAMS = [
 
 var UPDATE_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     },
 
     optional: {
@@ -78,7 +78,7 @@ var UPDATE_SCHEMA = {
         owner_uuid: validate.UUID,
         model: validate.string,
         network_uuid: common.validateNetwork,
-        nic_tag: validateNicTag,
+        nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
         reserved: validate.bool,
@@ -191,43 +191,6 @@ function getExistingNic(opts, callback) {
     });
 }
 
-/**
- * Validate a nic tag that may potentially be an overlay tag (of the form
- * sdc_overlay_tag/1234)
- */
-function validateNicTag(opts, name, tag, callback) {
-    validate.string(null, name, tag, function (strErr) {
-        if (strErr) {
-            return callback(strErr);
-        }
-
-        var split = tag.split('/');
-        var tagName = split[0];
-
-        mod_nicTag.validateExists(true, opts, name, tagName,
-                function (exErr) {
-            if (exErr) {
-                return callback(exErr);
-            }
-
-            if (!split[1]) {
-                return callback(null, tagName);
-            }
-
-            validate.VxLAN(null, name, split[1], function (vErr, vid) {
-                if (vErr) {
-                    return callback(vErr);
-                }
-
-                var toReturn = {};
-                toReturn[name] = tagName;
-                toReturn.vnet_id = vid;
-
-                return callback(null, null, toReturn);
-            });
-        });
-    });
-}
 
 /**
  * Validate update params
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index 800bcd7..e0ecf62 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -1346,6 +1346,53 @@ test('provision gateway', function (t) {
 });
 
 
+test('NAPI-348: Provision with fabric nic_tag', function (t) {
+    var expTag = mod_fabric_net.nicTag(t, NETS[3]);
+
+    t.test('provision NIC on NETS[3]', function (t2) {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: NETS[3].uuid,
+            params: {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
+                nic_tag: expTag,
+                owner_uuid: OWNERS[1]
+            },
+            exp: mod_net.addNetParams(NETS[3], {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
+                fabric: true,
+                internet_nat: false,
+                nic_tag: expTag,
+                owner_uuid: OWNERS[1]
+            })
+        });
+    });
+
+    t.test('overlay mapping added for NIC', function (t2) {
+        var nic = mod_nic.lastCreated();
+        t.ok(nic, 'last created nic');
+
+        mod_portolan.overlayMapping(t2, {
+            params: {
+                nic: nic
+            },
+            exp: {
+                cn_uuid: SERVERS[0],
+                deleted: false,
+                ip: nic.ip,
+                mac: nic.mac,
+                version: 1,
+                vnet_id: mod_portolan.nicVnetID(t, nic)
+            }
+        });
+    });
+});
+
+
 // Create network tests:
 //
 // - Can't create public (non-RFC1918) nets
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index d1f54ff..efe0549 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -385,6 +385,12 @@ test('Create nic - invalid params', function (t) {
                 owner_uuid: owner, network_uuid: NET.uuid, state: 'running' },
                 [ mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG) ] ],
 
+        [ 'nic_tag must be a string',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id, nic_tag: 4,
+                state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.STR) ] ],
+
         [ 'state must be a valid value',
             { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
                 owner_uuid: owner, network_uuid: NET.uuid, state: 'deleted' },
-- 
2.21.0

