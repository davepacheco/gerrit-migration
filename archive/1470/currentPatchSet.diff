commit 1d14fdb38932986deb79f2e49e1db44aba13ce94 (refs/changes/70/1470/4)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-02-08T03:01:00+00:00 (2 years, 8 months ago)
    
    NAPI-348 CreateNic endpoint does not accept fabric NIC due to improper NIC tag validation
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>
    Approved by: Alex Wilson <alex.wilson@joyent.com>

diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index dd959e6..7d013b5 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -19,10 +19,10 @@ var constants = require('../../util/constants');
 var errors = require('../../util/errors');
 var mod_ip = require('../ip');
 var mod_net = require('../network');
+var mod_nicTag = require('../nic-tag');
 var mod_pool = require('../network-pool');
 var mod_portolan_moray = require('portolan-moray');
 var util = require('util');
-var util_mac = require('../../util/mac');
 var validate = require('../../util/validate');
 var vasync = require('vasync');
 
@@ -38,20 +38,6 @@ var VALID_NIC_STATES = [ 'provisioning', 'stopped', 'running' ];
 
 
 
-/**
- * Validates a MAC address
- */
-function validateMAC(_, name, mac, callback) {
-    var macNum = util_mac.macAddressToNumber(mac);
-    if (!macNum) {
-        return callback(errors.invalidParam(name,
-            'invalid MAC address'));
-    }
-
-    return callback(null, macNum);
-}
-
-
 /**
  * Validates a network UUID and ensures that the network exists
  */
@@ -136,6 +122,53 @@ function validateSubnetContainsIP(opts, parsedParams, callback) {
 
 
 
+/**
+ * Validate a NIC tag that may potentially be an overlay tag (of the form
+ * sdc_overlay_tag/1234).
+ */
+function validateNicTag(opts, name, tag, callback) {
+    validate.string(null, name, tag, function (strErr) {
+        if (strErr) {
+            callback(strErr);
+            return;
+        }
+
+        var split = tag.split('/');
+        if (split.length > 2) {
+            callback(errors.invalidParam(name, constants.msg.NIC_TAG_SLASH));
+            return;
+        }
+
+        var tagName = split[0];
+
+        mod_nicTag.validateExists(true, opts, name, tagName, function (exErr) {
+            if (exErr) {
+                callback(exErr);
+                return;
+            }
+
+            if (split[1] === undefined) {
+                callback(null, tagName);
+                return;
+            }
+
+            validate.VxLAN(null, name, split[1], function (vErr, vid) {
+                if (vErr) {
+                    callback(vErr);
+                    return;
+                }
+
+                var toReturn = {};
+                toReturn[name] = tagName;
+                toReturn.vnet_id = vid;
+
+                callback(null, null, toReturn);
+            });
+        });
+    });
+}
+
+
 /**
  * Validates a network UUID and ensures that the network exists
  */
@@ -389,7 +422,7 @@ module.exports = {
     BUCKET: BUCKET,
     commitBatch: commitBatch,
     listVnetCns: listVnetCns,
-    validateMAC: validateMAC,
+    validateNicTag: validateNicTag,
     validateNetwork: validateNetwork,
     validateNetworkParams: validateNetworkParams,
     validateFabricNic: validateFabricNic,
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index f2e4d06..aeb0a90 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -44,7 +44,7 @@ var CREATE_SCHEMA = {
         mac: validate.MAC,
         model: validate.string,
         network_uuid: common.validateNetwork,
-        nic_tag: mod_nicTag.validateExists.bind(null, true),
+        nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
         reserved: validate.bool,
diff --git a/lib/models/nic/del.js b/lib/models/nic/del.js
index 5f51a8e..bc08b47 100644
--- a/lib/models/nic/del.js
+++ b/lib/models/nic/del.js
@@ -25,7 +25,7 @@ var vasync = require('vasync');
 
 var DELETE_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     }
 };
 
diff --git a/lib/models/nic/get.js b/lib/models/nic/get.js
index a5eb4c8..bf59a2e 100644
--- a/lib/models/nic/get.js
+++ b/lib/models/nic/get.js
@@ -22,7 +22,7 @@ var validate = require('../../util/validate');
 
 var GET_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     }
 };
 
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index fa584f9..45de1fe 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -61,7 +61,7 @@ var UPDATE_PARAMS = [
 
 var UPDATE_SCHEMA = {
     required: {
-        mac: common.validateMAC
+        mac: validate.MAC
     },
 
     optional: {
@@ -78,7 +78,7 @@ var UPDATE_SCHEMA = {
         owner_uuid: validate.UUID,
         model: validate.string,
         network_uuid: common.validateNetwork,
-        nic_tag: validateNicTag,
+        nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
         reserved: validate.bool,
@@ -191,43 +191,6 @@ function getExistingNic(opts, callback) {
     });
 }
 
-/**
- * Validate a nic tag that may potentially be an overlay tag (of the form
- * sdc_overlay_tag/1234)
- */
-function validateNicTag(opts, name, tag, callback) {
-    validate.string(null, name, tag, function (strErr) {
-        if (strErr) {
-            return callback(strErr);
-        }
-
-        var split = tag.split('/');
-        var tagName = split[0];
-
-        mod_nicTag.validateExists(true, opts, name, tagName,
-                function (exErr) {
-            if (exErr) {
-                return callback(exErr);
-            }
-
-            if (!split[1]) {
-                return callback(null, tagName);
-            }
-
-            validate.VxLAN(null, name, split[1], function (vErr, vid) {
-                if (vErr) {
-                    return callback(vErr);
-                }
-
-                var toReturn = {};
-                toReturn[name] = tagName;
-                toReturn.vnet_id = vid;
-
-                return callback(null, null, toReturn);
-            });
-        });
-    });
-}
 
 /**
  * Validate update params
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 5bdafb3..5b69e9b 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -34,6 +34,7 @@ var MESSAGES = {
     NET_OWNER: 'owner cannot provision on network',
     NET_ON_VLAN: 'VLAN must have no networks',
     NIC_ON_NET: 'network must have no NICs provisioned',
+    NIC_TAG_SLASH: 'only one slash is allowed after the tag name',
     OBJ: 'must be an object',
     OFFSET: 'invalid value, offset must be an integer greater than or ' +
         'equal to 0',
diff --git a/lib/util/validate.js b/lib/util/validate.js
index a6d61cf..b3e06e5 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -498,11 +498,13 @@ function validateVLAN(_, name, vlan_id, callback) {
  */
 function validateVxlanID(_, name, vlan_id, callback) {
     var id = Number(vlan_id);
-    if (isNaN(id) || id < 0 || id > constants.MAX_VNET_ID) {
-        return callback(errors.invalidParam(name, constants.msg.VNET));
+
+    if (parseInt(vlan_id, 10) !== id || id < 0 || id > constants.MAX_VNET_ID) {
+        callback(errors.invalidParam(name, constants.msg.VNET));
+        return;
     }
 
-    return callback(null, id);
+    callback(null, id);
 }
 
 
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index 800bcd7..e0ecf62 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -1346,6 +1346,53 @@ test('provision gateway', function (t) {
 });
 
 
+test('NAPI-348: Provision with fabric nic_tag', function (t) {
+    var expTag = mod_fabric_net.nicTag(t, NETS[3]);
+
+    t.test('provision NIC on NETS[3]', function (t2) {
+        mod_nic.provision(t2, {
+            fillInMissing: true,
+            net: NETS[3].uuid,
+            params: {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
+                nic_tag: expTag,
+                owner_uuid: OWNERS[1]
+            },
+            exp: mod_net.addNetParams(NETS[3], {
+                belongs_to_type: 'zone',
+                belongs_to_uuid: VMS[2],
+                cn_uuid: SERVERS[0],
+                fabric: true,
+                internet_nat: false,
+                nic_tag: expTag,
+                owner_uuid: OWNERS[1]
+            })
+        });
+    });
+
+    t.test('overlay mapping added for NIC', function (t2) {
+        var nic = mod_nic.lastCreated();
+        t.ok(nic, 'last created nic');
+
+        mod_portolan.overlayMapping(t2, {
+            params: {
+                nic: nic
+            },
+            exp: {
+                cn_uuid: SERVERS[0],
+                deleted: false,
+                ip: nic.ip,
+                mac: nic.mac,
+                version: 1,
+                vnet_id: mod_portolan.nicVnetID(t, nic)
+            }
+        });
+    });
+});
+
+
 // Create network tests:
 //
 // - Can't create public (non-RFC1918) nets
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index d1f54ff..b77f958 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -385,6 +385,56 @@ test('Create nic - invalid params', function (t) {
                 owner_uuid: owner, network_uuid: NET.uuid, state: 'running' },
                 [ mod_err.invalidParam('belongs_to_type', BAD_TYPE_ERRMSG) ] ],
 
+        [ 'nic_tag must be a string',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id, nic_tag: 4,
+                state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.STR) ] ],
+
+        [ 'nic_tag must be a nonempty string',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id, nic_tag: '',
+                state: 'running' },
+                [ mod_err.invalidParam('nic_tag', 'must not be empty') ] ],
+
+        [ 'nic_tag must not have more than one slash',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id, nic_tag: 'a/1/2',
+                state: 'running' },
+                [ mod_err.invalidParam('nic_tag',
+                    constants.msg.NIC_TAG_SLASH) ] ],
+
+        [ 'nic_tag must have a VNET ID following "/"',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id,
+                nic_tag: NET2.nic_tag + '/', state: 'running' },
+                [ mod_err.invalidParam('nic_tag',
+                    constants.msg.VNET) ] ],
+
+        [ 'nic_tag must contain a numeric VNET ID',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id,
+                nic_tag: NET2.nic_tag + '/b', state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.VNET) ] ],
+
+        [ 'nic_tag must contain a VNET ID in the proper range',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id,
+                nic_tag: NET2.nic_tag + '/-1', state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.VNET) ] ],
+
+        [ 'nic_tag must contain a VNET ID formatted in base 10',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id,
+                nic_tag: NET2.nic_tag + '/0x1', state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.VNET) ] ],
+
+        [ 'nic_tag must contain an integer VNET ID',
+            { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
+                owner_uuid: owner, vlan_id: NET.vlan_id,
+                nic_tag: NET2.nic_tag + '/1.2', state: 'running' },
+                [ mod_err.invalidParam('nic_tag', constants.msg.VNET) ] ],
+
         [ 'state must be a valid value',
             { ip: '10.0.2.3', belongs_to_type: type, belongs_to_uuid: uuid,
                 owner_uuid: owner, network_uuid: NET.uuid, state: 'deleted' },
