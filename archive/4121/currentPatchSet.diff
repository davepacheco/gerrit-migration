commit 802c7eecf0ed411fd37718e3e41e0189efcdf4be (refs/changes/21/4121/5)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-06-08T09:35:52+02:00 (1 year, 4 months ago)
    
    TRITON-400 Remove SAPI's history
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/docs/index.md b/docs/index.md
index 8556eda..eb68f21 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -963,139 +963,6 @@ that they all have the most up-to-date objects.
     sdc-sapi /cache -X POST
 
 
-# History
-
-## CreateHistory (POST /history)
-
-Adds a new record to historical collection of sdcadm changes.
-This record must have a uuid, changes and started timestamp.
-
-### Inputs
-
-| Param      | Type           | Description                                          | Required? |
-| ---------- | -------------- | ---------------------------------------------------- | --------- |
-| uuid       | string         | UUID of the change                                   | yes       |
-| changes    | object         | Object containing changes details                    | yes       |
-| started    | number         | Unix timestamp, when the change process began        | yes       |
-| error      | object         | Any error happened while applying the changes        | no        |
-| finished   | number         | Unix timestamp, when the change process was complete | no        |
-
-### Responses
-
-| Code | Description                      | Response           |
-| ---- | -------------------------------- | ------------------ |
-| 204  | Record successfully created | Application object |
-
-### Example
-
-    POST /history -d '{
-      "uuid": "930896af-48d4-bf8c-885c-6573a94b1853",
-      "started": 1414519607207,
-      "changes" {
-        "image": "e786c76e-4871-44e9-80dd-4452e3c0560e",
-      }
-    }'
-
-
-## ListHistory (GET /history)
-
-Returns a list of all history records.
-
-### Inputs
-
-| Param      | Type                   | Description                                         | Required? |
-| ---------- | ---------------------- | --------------------------------------------------- | --------- |
-| since      | string, ISO 8601 Date  | Only return records started after the given value.  | no        |
-| until      | string, ISO 8601 Date  | Only return records started before the given value. | no        |
-
-### Responses
-
-| Code | Description                    | Response                    |
-| ---- | ------------------------------ | --------------------------- |
-| 200  | Found history records          | List of records             |
-| 404  | No records found               | none                        |
-
-### Example - TBD
-
-    GET /history?since=2014-10-28T18%3A15%3A33.626Z
-    [
-      {
-        "uuid": "14160e92-5533-11e2-86a2-9f78cf99260d",
-        "started": 1414519607207,
-      }
-    ]
-
-
-## GetHistory (GET /history/:uuid)
-
-Get an history record by UUID.
-
-### Inputs
-
-| Param | Type | Description            | Required? |
-| ----- | ---- | ---------------------- | --------- |
-| uuid  | UUID | UUID of history record | yes       |
-
-### Responses
-
-| Code | Description           | Response           |
-| ---- | --------------------- | ------------------ |
-| 200  | Record found          | History object     |
-| 404  | No record found       | none               |
-
-### Example
-
-See the example for ListHistory above.
-
-
-## UpdateHistory (PUT /history/:uuid)
-
-Updates an history item.
-
-### Inputs
-
-| Param      | Type           | Description                                          | Required? |
-| ---------- | -------------- | ---------------------------------------------------- | --------- |
-| uuid       | string         | UUID of the change                                   | no        |
-| changes    | object         | Object containing changes details                    | no        |
-| started    | number         | Unix timestamp, when the change process began        | no        |
-| error      | object         | Any error happened while applying the changes        | no        |
-| finished   | number         | Unix timestamp, when the change process was complete | yes       |
-
-### Responses
-
-| Code | Description          | Response                   |
-| ---- | -------------------- | -------------------------- |
-| 200  | Updates completed    | Updated history object     |
-| 404  | No history found     | none                       |
-
-### Example
-
-    PUT /history/b0d2f944-7fa3-11e2-a53c-3f3c7a8e7341 -d '{
-      "error" {
-        "name": "ImageNotFoundError"
-      },
-      "finished": 1414586946075
-    }'
-
-
-## DeleteHistory (DELETE /history/:uuid)
-
-Deletes an history item.
-
-### Inputs
-
-| Param | Type | Description         | Required? |
-| ----- | ---- | ------------------- | --------- |
-| uuid  | UUID | UUID of item        | yes       |
-
-### Responses
-
-| Code | Description                | Response |
-| ---- | -------------------------- | -------- |
-| 204  | History record was deleted | none     |
-
-
 # Multi DC mode
 
 SAPI supports a cross-DC configuration mode. This is intended to support
@@ -1177,6 +1044,5 @@ Original SAPI version, including:
 
 ## 2.0.0
 
-- [History](#history) end-point added
 - Added support for `type` field on SAPI instances. Added `type` as a supported
   search filter for instances.
diff --git a/lib/server/attributes.js b/lib/server/attributes.js
index 741aa4b..a8836cb 100644
--- a/lib/server/attributes.js
+++ b/lib/server/attributes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -28,11 +28,9 @@ var assert = require('assert-plus');
 var async = require('async');
 var util = require('util');
 var vasync = require('vasync');
-var verror = require('verror');
 
 var sprintf = require('util').format;
 
-var mod_errors = require('./errors');
 
 
 module.exports = Attributes;
@@ -103,7 +101,6 @@ function deleteAttributes(obj, changes) {
     return (obj);
 }
 
-// History only: allow any attribute to be reset
 
 function setAttributes(obj, changes) {
     assert.object(obj, 'obj');
@@ -325,7 +322,7 @@ function generateZoneParams(uuid, cb) {
             if (params.networks) {
                 var nets = [];
                 params.networks.forEach(function (net) {
-                    if (typeof (net) == 'string') {
+                    if (typeof (net) === 'string') {
                         if (validUUID(net)) {
                             nets.push({'uuid': net});
                         } else {
@@ -468,15 +465,19 @@ Attributes.prototype.validate = function validate(obj, opts, cb) {
             /*
              * Only validate type for service objects
              */
-            if (!obj.application_uuid)
-                return (subcb(null));
+            if (!obj.application_uuid) {
+                subcb(null);
+                return;
+            }
             validType.call(self, obj.type, function (err) {
                 subcb(err);
             });
         },
         function (subcb) {
-            if (!obj.manifests)
-                return (subcb(null));
+            if (!obj.manifests) {
+                subcb(null);
+                return;
+            }
             validManifests.call(self, obj.manifests,
                 function (err) {
                 subcb(err);
diff --git a/lib/server/endpoints/history.js b/lib/server/endpoints/history.js
deleted file mode 100644
index bd9e4ea..0000000
--- a/lib/server/endpoints/history.js
+++ /dev/null
@@ -1,218 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-/*
- * lib/endpoints/history.js: SAPI endpoints to manage history of changes
- */
-
-var util = require('util');
-var restify = require('restify');
-var verror = require('verror');
-
-var validateParams =
-    require('./validation').validateParams;
-
-function validateHistory(history) {
-    if (!history.changes || typeof (history.changes) !== 'object') {
-        return (new restify.InvalidArgumentError('Invalid history changes'));
-    }
-
-    if (!history.uuid || typeof (history.uuid) !== 'string') {
-        return (new restify.InvalidArgumentError('Invalid history UUID'));
-    }
-
-    if (!history.started || typeof (history.started) !== 'number') {
-        return (new restify.InvalidArgumentError('Invalid history start time'));
-    }
-
-    return (null);
-}
-
-function History() {}
-
-var HISTORY_KEYS = ['started', 'changes', 'uuid'];
-
-History.create = function create(req, res, next) {
-    var model = this.model;
-
-    var params = {};
-    params.uuid = req.params.uuid;
-
-    params.started = req.params.started;
-    params.changes = req.params.changes;
-
-    params.params = req.params.params;
-
-
-    var valError = validateParams(
-        { keys: HISTORY_KEYS,
-          params: params });
-
-    if (valError) {
-        next(valError);
-        return;
-    }
-
-    valError = validateHistory(params);
-    if (valError) {
-        next(valError);
-        return;
-    }
-
-
-    model.createHistory(params, function (err, app) {
-        if (err) {
-            model.log.error(err, 'failed to create history item');
-            next(err);
-            return;
-        }
-
-        res.send(app);
-        next();
-    });
-};
-
-History.list = function list(req, res, next) {
-    var model = this.model;
-
-    var filters = {};
-    if (req.params.since) {
-        try {
-            filters.since = new Date(req.params.since).getTime();
-        } catch (_) {
-            var msg = util.format('Invalid param \'since\': %s',
-                    req.params.since);
-            model.log.debug(msg);
-            next(new restify.InvalidArgumentError(msg));
-            return;
-        }
-    }
-
-    if (req.params.until) {
-        try {
-            filters.until = new Date(req.params.until).getTime();
-        } catch (__) {
-            var m2 = util.format('Invalid param \'until\': %s',
-                    req.params.until);
-            model.log.debug(m2);
-            next(new restify.InvalidArgumentError(m2));
-            return;
-        }
-    }
-
-    var opts = {};
-
-
-    model.listHistory(filters, opts, function (err, apps) {
-        if (err) {
-            model.log.error(err, 'failed to list history');
-            next(err);
-            return;
-        }
-
-        res.send(apps);
-        next();
-    });
-};
-
-History.get = function get(req, res, next) {
-    var model = this.model;
-
-    model.getHistory(req.params.uuid, function (err, app) {
-        if (err) {
-            next(err);
-            return;
-        }
-        res.send(app);
-        next();
-    });
-};
-
-History.update = function update(req, res, next) {
-    var model = this.model;
-
-    var uuid = req.params.uuid;
-
-    var changes = req.params;
-
-    model.updateHistory(uuid, changes, 'set', function (err, app) {
-        if (err) {
-            model.log.error(err, 'failed to update history item');
-            next(err);
-            return;
-        }
-
-        res.send(app);
-        next();
-    });
-};
-
-History.del = function del(req, res, next) {
-    var model = this.model;
-
-    model.delHistory(req.params.uuid, function (err) {
-        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
-            res.send(404);
-            next();
-            return;
-        } else if (err) {
-            model.log.error(err, 'failed to delete history item');
-            next(err);
-            return;
-        }
-
-        res.send(204);
-        next();
-    });
-};
-
-
-function attachTo(sapi, model) {
-    var toModel = {
-        model: model
-    };
-
-    // Create history record
-    sapi.post({
-        path: '/history',
-        name: 'CreateHistory',
-        version: ['2.0.0']
-    }, History.create.bind(toModel));
-
-    // List all the history records
-    sapi.get({
-        path: '/history',
-        name: 'ListHistory',
-        version: ['2.0.0']
-    }, History.list.bind(toModel));
-
-    // Get single history record
-    sapi.get({
-        path: '/history/:uuid',
-        name: 'GetHistory',
-        version: ['2.0.0']
-    }, History.get.bind(toModel));
-
-    // Update history record
-    sapi.put({
-        path: '/history/:uuid',
-        name: 'UpdateHistory',
-        version: ['2.0.0']
-    }, History.update.bind(toModel));
-
-    // Delete history record
-    sapi.del({
-        path: '/history/:uuid',
-        name: 'DeleteHistory',
-        version: ['2.0.0']
-    }, History.del.bind(toModel));
-}
-
-exports.attachTo = attachTo;
diff --git a/lib/server/endpoints/index.js b/lib/server/endpoints/index.js
index 6250cef..3919bfa 100644
--- a/lib/server/endpoints/index.js
+++ b/lib/server/endpoints/index.js
@@ -20,7 +20,6 @@ var manifests = require('./manifests');
 var mode = require('./mode');
 var ping = require('./ping');
 var services = require('./services');
-var history = require('./history');
 
 exports.attachTo = function (sapi, model) {
     sapi.post('/loglevel',
@@ -46,5 +45,4 @@ exports.attachTo = function (sapi, model) {
     mode.attachTo(sapi, model);
     ping.attachTo(sapi, model);
     services.attachTo(sapi, model);
-    history.attachTo(sapi, model);
 };
diff --git a/lib/server/model.js b/lib/server/model.js
index 8d9a703..857c15a 100644
--- a/lib/server/model.js
+++ b/lib/server/model.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -43,8 +43,7 @@ var BUCKETS = {
     applications: 'sapi_applications',
     services: 'sapi_services',
     instances: 'sapi_instances',
-    manifests: 'sapi_manifests',
-    history: 'sapi_history'
+    manifests: 'sapi_manifests'
 };
 
 
@@ -346,114 +345,6 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
 }
 
 
-// -- History
-
-/*
- * Create an history record. Each history item consists of changes object,
- * started/finished timestamps and a UUID. Optionally, it may also contain
- * an error object
- *
- * @param history
- * @param options {Object} Optional argument with flags
- * @param cb {Function}
- */
-Model.prototype.createHistory = function createHistory(history, options, cb) {
-    var self = this;
-    var log = self.log;
-
-    if (cb === undefined) {
-        cb = options;
-        options = {};
-    }
-
-    assert.object(history, 'history');
-    assert.string(history.uuid, 'history.uuid');
-    assert.object(history.changes, 'history.changes');
-    assert.number(history.started, 'history.started');
-
-    assert.object(options, 'options');
-
-    assert.optionalObject(history.error, 'history.error');
-
-    /*
-     * If the caller hasn't provided a UUID, generate one here.
-     */
-
-    log.info({
-        changes: history.changes,
-        options: options
-    }, 'creating history %s', history.uuid);
-
-    async.waterfall([
-        function (subcb) {
-            self.attributes.validate(history, options, subcb);
-        },
-        function (subcb) {
-            self.stor.putObject(BUCKETS.history,
-                history.uuid, history, function (err) {
-                if (err) {
-                    log.error(err, 'failed to put ' +
-                        'history %s', history.uuid);
-                    return (subcb(err));
-                }
-
-                return (subcb(null));
-            });
-        }
-    ], function (err, result) {
-        if (!err) {
-            log.info('created history %s', history.uuid);
-        }
-        cb(err, history);
-    });
-};
-
-Model.prototype.listHistory = function (filters, opts, cb) {
-    if (arguments.length === 2) {
-        cb = opts;
-        opts = {};
-    }
-
-    assert.object(filters, 'filters');
-    assert.object(opts, 'opts');
-    assert.func(cb, 'cb');
-
-    this.stor.listObjectValues(
-        BUCKETS.history, filters, opts, cb);
-};
-
-Model.prototype.getHistory = function (uuid, cb) {
-    var log = this.log;
-
-    cb = once(cb);
-
-    getObjectValue.call(this, BUCKETS.history, uuid,
-        function (err, history) {
-        if (err) {
-            log.error(err, 'failed to get history %s', uuid);
-            return (cb(err));
-        }
-
-        if (!history) {
-            err = new restify.ResourceNotFoundError(
-                'no such history: ' + uuid);
-            log.error(err, 'failed to get history %s', uuid);
-            return (cb(err));
-        }
-
-        return (cb(null, history));
-    });
-};
-
-Model.prototype.updateHistory = function (uuid, change, action, cb) {
-    this.updateObject(BUCKETS.history, uuid, change, action, 3, cb);
-};
-
-Model.prototype.delHistory = function (uuid, cb) {
-    this.stor.delObject(BUCKETS.history, uuid, cb);
-};
-
-
 // -- Applications
 
 /*
diff --git a/lib/server/stor/local.js b/lib/server/stor/local.js
index 75dbc20..2969a8e 100644
--- a/lib/server/stor/local.js
+++ b/lib/server/stor/local.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -269,17 +269,7 @@ function filterObject(bucket, uuid, filters, cb) {
          */
         var matches = true;
         Object.keys(filters).forEach(function (key) {
-            // History filters:
-            if (key === 'since') {
-                matches = matches &&
-                    val.started >= filters.since;
-            } else if (key === 'until') {
-                matches = matches &&
-                    val.started <= filters.until;
-            } else {
-                matches = matches &&
-                    filters[key] === val[key];
-            }
+            matches = matches && filters[key] === val[key];
         });
 
         return (cb(null, matches ? val : null));
diff --git a/lib/server/stor/moray.js b/lib/server/stor/moray.js
index 8dc4443..516c921 100644
--- a/lib/server/stor/moray.js
+++ b/lib/server/stor/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -201,18 +201,6 @@ function initBuckets(client, cb) {
     };
 
     async.waterfall([
-        function (subcb) {
-            var cfg = jsprim.deepCopy(basecfg);
-            cfg.index.started = {
-                type: 'number'
-            };
-            cfg.index.finished = {
-                type: 'number'
-            };
-
-            createBucket.call(self, client,
-                buckets.history, cfg, subcb);
-        },
         function (subcb) {
             var cfg = jsprim.deepCopy(basecfg);
             cfg.index.name = {
@@ -255,6 +243,16 @@ function initBuckets(client, cb) {
         function (subcb) {
             createBucket.call(self, client,
                 buckets.manifests, basecfg, subcb);
+        },
+        function removeHistoryBucket(subcb) {
+            client.getBucket('sapi_history', function getBucketCb(err) {
+                if (err && verror.hasCauseWithName(err,
+                    'BucketNotFoundError')) {
+                    subcb();
+                    return;
+                }
+                client.deleteBucket('sapi_history', subcb);
+            });
         }
     ], function (err) {
         if (err) {
diff --git a/lib/server/stor/moray_local.js b/lib/server/stor/moray_local.js
index b97e31b..6618dde 100644
--- a/lib/server/stor/moray_local.js
+++ b/lib/server/stor/moray_local.js
@@ -59,12 +59,6 @@ function is500(err) {
     }));
 }
 
-function findHistory(uuid, cb) {
-    var self = this;
-    var b = self.buckets;
-    self.moray.getObject(b.history, uuid, cb);
-}
-
 function findApplication(uuid, cb) {
     var self = this;
     var b = self.buckets;
@@ -110,13 +104,6 @@ function loadAppObjects(uuid, stor, cb) {
 
     var arg = {};
     var funcs = [
-        function fHistory(_, subcb) {
-            stor.listObjectValues(b.history, {}, {},
-                function (err, items) {
-                _.history = items;
-                return (subcb(err));
-            });
-        },
         function findApp(_, subcb) {
             stor.getObject(b.applications, uuid, function (err, a) {
                 _.application = a;
@@ -292,7 +279,7 @@ function refreshLocal(cb) {
                 }, mtolcb);
             }
             var types = ['applications', 'instances', 'services',
-                     'manifests', 'history' ];
+                     'manifests' ];
             vasync.forEachPipeline({
                 'inputs': types,
                 'func': morayToLocal
@@ -327,7 +314,7 @@ function refreshLocal(cb) {
             }
             // We leave the manifests alone since extra manifests
             // shouldn't hurt.
-            var types = ['instances', 'services', 'history' ];
+            var types = ['instances', 'services' ];
             vasync.forEachPipeline({
                 'inputs': types,
                 'func': purgeUnknown
diff --git a/package.json b/package.json
index 726c3a7..5b075fd 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sapi",
   "description": "Triton Services and Configuration API",
-  "version": "0.4.0",
+  "version": "2.0.0",
   "author": "Joyent (joyent.com)",
   "license": "MPL-2.0",
   "private": true,
diff --git a/test/history.test.js b/test/history.test.js
deleted file mode 100644
index f359e67..0000000
--- a/test/history.test.js
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2018, Joyent, Inc.
- */
-
-/*
- * test/applications.test.js: test /applications endpoints
- */
-
-var node_uuid = require('node-uuid');
-var util = require('util');
-
-if (require.cache[__dirname + '/helper.js']) {
-    delete require.cache[__dirname + '/helper.js'];
-}
-var helper = require('./helper.js');
-var test = helper.test;
-
-
-var URI = '/history';
-var ITEM_UUID;
-
-// -- Boilerplate
-
-var server;
-var tests_run = 0;
-
-helper.before(function (cb) {
-    this.client = helper.createJsonClient({
-        version: '2.0.0'
-    });
-    this.sapi = helper.createSapiClient({
-        version: '2.0.0'
-    });
-
-    if (server) {
-        cb(null);
-        return;
-    }
-
-    helper.startSapiServer(function (err, res) {
-        server = res;
-        cb(err);
-    });
-});
-
-helper.after(function (cb) {
-    if (++tests_run === helper.getNumTests()) {
-        helper.shutdownSapiServer(server, cb);
-    } else {
-        cb();
-    }
-});
-
-
-// -- Test invalid inputs
-
-test('get nonexistent history item', function (t) {
-    var uri_item = '/history/' + node_uuid.v4();
-
-    this.client.get(uri_item, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(res.statusCode, 404);
-        t.end();
-    });
-});
-
-
-test('create w/o started', function (t) {
-    var app = {
-        uuid: node_uuid.v4(),
-        changes: {
-            whatever: 'here'
-        }
-    };
-
-    this.client.post(URI, app, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(err.name, 'MissingParameterError');
-        t.equal(res.statusCode, 409);
-        t.end();
-    });
-});
-
-
-test('create w/o changes', function (t) {
-    var app = {
-        uuid: node_uuid.v4(),
-        started: new Date().getTime()
-    };
-
-    this.client.post(URI, app, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(err.name, 'MissingParameterError');
-        t.equal(res.statusCode, 409);
-        t.end();
-    });
-});
-
-
-test('create w/ invalid changes', function (t) {
-    var app = {
-        changes: 'invalid changes',
-        uuid: node_uuid.v4(),
-        started: new Date().getTime()
-    };
-
-    this.client.post(URI, app, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(res.statusCode, 409);
-        t.end();
-    });
-});
-
-
-test('create w/ invalid started', function (t) {
-    var app = {
-        started: 'invalid manifest',
-        uuid: node_uuid.v4(),
-        changes: { foo: 'bar' }
-    };
-
-    this.client.post(URI, app, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(res.statusCode, 409);
-        t.end();
-    });
-});
-
-
-// CRUD history
-
-test('create history item', function (t) {
-    ITEM_UUID = node_uuid.v4();
-    var app = {
-        started: new Date().getTime(),
-        uuid: ITEM_UUID,
-        changes: { foo: 'bar' }
-    };
-
-    this.client.post(URI, app, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 200);
-        t.ok(obj.started);
-        t.ok(obj.changes.foo);
-        t.equal(obj.uuid, ITEM_UUID);
-        t.end();
-    });
-});
-
-test('get history item by UUID', function (t) {
-    var uri_app = '/history/' + ITEM_UUID;
-
-    this.client.get(uri_app, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 200);
-        t.ok(obj.started);
-        t.ok(obj.changes.foo);
-        t.equal(obj.uuid, ITEM_UUID);
-        t.end();
-    });
-});
-
-test('update history item', function (t) {
-    var uri_app = '/history/' + ITEM_UUID;
-    this.client.put(uri_app, {
-        started: new Date().getTime(),
-        uuid: ITEM_UUID,
-        changes: {
-            foo: 'bar',
-            fuu: 'baz'
-        },
-        error: {
-            some: 'error'
-        },
-        finished: new Date().getTime()
-    }, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 200);
-        t.ok(obj.started);
-        t.ok(obj.finished);
-        t.ok(obj.changes.fuu);
-        t.ok(obj.error);
-        t.ok(obj.changes.foo);
-        t.equal(obj.uuid, ITEM_UUID);
-        t.end();
-    });
-});
-
-
-test('list history', function (t) {
-    this.client.get(URI, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 200);
-        t.ok(Array.isArray(obj));
-        obj.sort(function (a, b) {
-            return a.started < b.started
-                ? -1
-                : (a.started > b.started
-                  ? 1
-                  : 0);
-        });
-        var idx = obj.length - 1;
-        t.ok(obj[idx].started);
-        t.ok(obj[idx].changes.foo);
-        t.ok(obj[idx].uuid);
-        t.end();
-    });
-});
-
-
-test('history exists since v2.0.0', function (t) {
-    var sapi = helper.createSapiClient({
-        version: '1.0.0'
-    });
-    sapi.get(URI, function (err, req, res, obj) {
-        t.ok(err);
-        t.equal(err.statusCode, 400);
-        t.equal(err.name, 'InvalidVersionError');
-        t.end();
-    });
-});
-
-
-test('history works with version \'*\'', function (t) {
-    var sapi = helper.createJsonClient({
-        version: '*'
-    });
-    sapi.get(URI, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 200);
-        t.ok(Array.isArray(obj));
-        var idx = obj.length - 1;
-
-        obj.sort(function (a, b) {
-            return a.started < b.started
-                ? -1
-                : (a.started > b.started
-                  ? 1
-                  : 0);
-        });
-        t.ok(obj[idx].started);
-        t.ok(obj[idx].changes.foo);
-        t.ok(obj[idx].uuid);
-        t.end();
-    });
-});
-
-
-test('delete history item', function (t) {
-    var self = this;
-
-    var uri_app = '/history/' + ITEM_UUID;
-
-    this.client.del(uri_app, function (err, req, res, obj) {
-        t.ifError(err);
-        t.equal(res.statusCode, 204);
-
-        self.client.get(uri_app, function (suberr, _, subres) {
-            t.ok(suberr);
-            t.equal(suberr.statusCode, 404);
-            t.end();
-        });
-    });
-});
