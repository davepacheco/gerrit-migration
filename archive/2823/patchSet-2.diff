From b88b404f35d05edd82f9e4aa13ef5537db040a84 Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Fri, 20 Oct 2017 16:20:26 +0000
Subject: [PATCH] MANTA-3430 could add muskie metrics for throughput

---
 docs/internal/design.md |  1 +
 lib/audit.js            | 25 +++++++------------------
 lib/check_stream.js     | 28 +++++++++++++++++++++++++++-
 lib/common.js           |  4 ++++
 lib/obj.js              |  7 +++++--
 lib/other.js            | 20 ++++++++++++--------
 lib/server.js           | 40 ++++++++++++++++++++++++++++++++--------
 main.js                 |  2 +-
 package.json            |  2 +-
 9 files changed, 90 insertions(+), 39 deletions(-)

diff --git a/docs/internal/design.md b/docs/internal/design.md
index 41a43ff..3f27416 100644
--- a/docs/internal/design.md
+++ b/docs/internal/design.md
@@ -68,6 +68,7 @@ The following metrics are collected:
 - Time-to-first-byte latency for all requests
 - End-to-end latency for all requests
 - Count of requests completed
+- Count of data streamed to and from storage
 
 Each of the metrics returned include the following metadata labels:
 
diff --git a/lib/audit.js b/lib/audit.js
index 2d547d5..e4a1967 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -115,23 +115,12 @@ function auditLogger(options) {
     assert.object(options.log, 'options.log');
     assert.object(options.collector, 'options.collector');
 
-    // A counter to track the number of HTTP requests serviced.
-    var request_counter = options.collector.counter({
-        name: 'http_requests_completed',
-        help: 'count of Muskie requests completed'
-    });
-
-    // A histogram to track the time to first byte.
-    var latency_histogram = options.collector.histogram({
-        name: 'http_request_latency_ms',
-        help: 'time-to-first-byte of Muskie requests'
-    });
-
-    // A histogram to track the time it took to fully process each HTTP request.
-    var time_histogram = options.collector.histogram({
-        name: 'http_request_time_ms',
-        help: 'total time to process Muskie requests'
-    });
+    // Retrieve metric collectors for request count and request latency.
+    var request_counter = options.collector.getCollector(
+        'http_requests_completed');
+    var latency_histogram = options.collector.getCollector(
+        'http_request_latency_ms');
+    var time_histogram = options.collector.getCollector('http_request_time_ms');
 
     var log = options.log.child({
         audit: true,
diff --git a/lib/check_stream.js b/lib/check_stream.js
index 256f411..d4506b4 100644
--- a/lib/check_stream.js
+++ b/lib/check_stream.js
@@ -5,9 +5,32 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
+//
+// CheckStream calculates the md5 hash of a data stream. In practice this is
+// used to calculate the md5 hash of objects as they are streamed to or from
+// sharks.
+//
+// As the name implies, this is implemented as a pass-through stream. As chunks
+// of bytes flow through the _write() function of the CheckStream they are
+// added to the md5 hash. The final md5 hash can be retrieved using
+// CheckStream.digest().
+//
+// If CheckStream goes too long without receiving input the stream will emit a
+// 'timeout' event. This is used elsewhere to abandon the stream by calling
+// CheckStream.abandon().
+//
+// CheckStream ensures that the number of bytes streamed doesn't exceed
+// what is expected. The maximum bytes CheckStream will read is set by the
+// 'maxBytes' argument to the constructor.
+//
+// Throughput metrics are collected in the CheckStream using a node-artedi
+// collector. Depending on the 'counter' argument, either inbound or outbound
+// throughput is tracked.
+//
+
 var crypto = require('crypto');
 var stream = require('stream');
 var util = require('util');
@@ -32,6 +55,7 @@ function CheckStream(opts) {
     assert.optionalString(opts.algorithm, 'options.algorithm');
     assert.number(opts.maxBytes, 'options.maxBytes');
     assert.number(opts.timeout, 'opts.timeout');
+    assert.object(opts.counter, 'opts.counter');
 
     stream.Writable.call(this, opts);
 
@@ -44,6 +68,7 @@ function CheckStream(opts) {
     this.start = Date.now();
     this.timeout = opts.timeout;
     this.timer = setTimeout(onTimeoutHandler.bind(this), this.timeout);
+    this.throughput_counter = opts.counter;
 
     this.once('finish', function onFinish() {
         setImmediate(function () {
@@ -94,6 +119,7 @@ CheckStream.prototype._write = function _write(chunk, encoding, cb) {
     clearTimeout(this.timer);
     this.hash.update(chunk, encoding);
     this.bytes += chunk.length;
+    this.throughput_counter.add(chunk.length);
     if (this.bytes > this.maxBytes) {
         this.emit('length_exceeded', this.bytes);
         setImmediate(function () {
diff --git a/lib/common.js b/lib/common.js
index 5688a80..e2aefd2 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -880,6 +880,7 @@ module.exports = {
         assert.object(options, 'options');
         assert.object(options.jobCache, 'options.jobCache');
         assert.object(options.log, 'options.log');
+        assert.object(options.collector, 'options.collector');
         assert.func(options.keyapi, 'options.keyapi');
         assert.func(options.mahi, 'options.mahi');
         assert.func(options.marlin, 'options.marlin');
@@ -912,6 +913,9 @@ module.exports = {
                 req_id: req.getId()
             }, true);
 
+            // Attach an artedi metric collector to each request object.
+            req.collector = options.collector;
+
             req.mahi = options.mahi();
             req.marlin = options.marlin();
             req.keyapi = options.keyapi();
diff --git a/lib/obj.js b/lib/obj.js
index 23082b5..ea70286 100644
--- a/lib/obj.js
+++ b/lib/obj.js
@@ -467,7 +467,8 @@ function sharkStreams(req, res, next) {
     var check = new CheckStream({
         algorithm: 'md5',
         maxBytes: req._size,
-        timeout: DATA_TIMEOUT
+        timeout: DATA_TIMEOUT,
+        counter: req.collector.getCollector('muskie_inbound_streamed_bytes')
     });
     var log = req.log;
 
@@ -740,7 +741,9 @@ function streamFromSharks(req, res, next) {
         req._totalBytes = 0;
         var check = new CheckStream({
             maxBytes: parseInt(sh['content-length'], 10) + 1024,
-            timeout: DATA_TIMEOUT
+            timeout: DATA_TIMEOUT,
+            counter: req.collector.getCollector(
+                'muskie_outbound_streamed_bytes')
         });
         sharkInfo.timeToFirstByte = check.start - sharkInfo._startTime;
         check.once('done', function onCheckDone() {
diff --git a/lib/other.js b/lib/other.js
index 4b20013..a5273f9 100644
--- a/lib/other.js
+++ b/lib/other.js
@@ -385,15 +385,19 @@ module.exports = {
     getMetricsHandler: function metricsHandler(collector) {
         var chain = [
             function getMetrics(req, res, next) {
-                collector.collect(artedi.FMT_PROM, function (err, metrics) {
-                    if (err) {
-                        next(new errors.InternalError(err));
-                        return;
-                    }
-                    res.setHeader('Content-Type', 'text/plain; version=0.0.4');
-                    res.send(metrics);
+                req.on('end', function () {
+                    collector.collect(artedi.FMT_PROM, function (err, metrics) {
+                        if (err) {
+                            next(new errors.InternalError(err));
+                            return;
+                        }
+                        res.setHeader('Content-Type',
+                            'text/plain; version=0.0.4');
+                        res.send(metrics);
+                        next();
+                    });
                 });
-                next();
+                req.resume();
             }
         ];
         return (chain);
diff --git a/lib/server.js b/lib/server.js
index b04eb4b..d272bd0 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -88,16 +88,12 @@ function formatJSON(req, res, body) {
  * Wrapper over restify's createServer to make testing and
  * configuration handling easier.
  *
- * The returned server object will have a '.start()' method on it, which
- * wraps up the port/host settings for you.
- *
- * @arg {object} options      - options object.
- * @arg {string} options.file - configuration file to read from.
- * @arg {object} options.log  - bunyan logger.
- * @arg {function} callback   - of the form f(err, server).
+ * @arg {object} options            - options object.
+ * @arg {object} options.log        - bunyan logger.
+ * @arg {object} options.collector  - artedi metric collector.
  * @throws {TypeError} on bad input.
  */
-function createServer(options, clearProxy) {
+function createServer(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
     assert.object(options.collector, 'options.collector');
@@ -117,6 +113,32 @@ function createServer(options, clearProxy) {
     }, true);
     var server = restify.createServer(options);
 
+    /* Initialize metric collectors for use in handlers and audit logger. */
+    // A counter to track the number of HTTP requests serviced.
+    options.collector.counter({
+        name: 'http_requests_completed',
+        help: 'count of Muskie requests completed'
+    });
+    // A histogram to track the time to first byte.
+    options.collector.histogram({
+        name: 'http_request_latency_ms',
+        help: 'time-to-first-byte of Muskie requests'
+    });
+    // A histogram to track the time it took to fully process each HTTP request.
+    options.collector.histogram({
+        name: 'http_request_time_ms',
+        help: 'total time to process Muskie requests'
+    });
+    // A pair of counters to track inbound and outbound throughput.
+    options.collector.counter({
+        name: 'muskie_inbound_streamed_bytes',
+        help: 'count of object bytes streamed from client to storage'
+    });
+    options.collector.counter({
+        name: 'muskie_outbound_streamed_bytes',
+        help: 'count of object bytes streamed from storage to client'
+    });
+
     var _timeout = parseInt((process.env.SOCKET_TIMEOUT || 120), 10) * 1000;
     server.server.setTimeout(_timeout, function onTimeout(socket) {
         var l = (((socket._httpMessage || {}).req || {}).log || log);
@@ -217,6 +239,8 @@ function createServer(options, clearProxy) {
     }));
 
     server.use(auth.gatherContext);
+
+    // Add various fields to the 'req' object before the handlers get called.
     server.use(common.setupHandler(options));
 
     // Compute jobs
diff --git a/main.js b/main.js
index 8f1b83e..0bf2441 100644
--- a/main.js
+++ b/main.js
@@ -547,7 +547,7 @@ function version() {
     });
 
     cfg.name = 'insecure';
-    var server2 = app.createServer(cfg, true);
+    var server2 = app.createServer(cfg);
     server2.on('error', function (err) {
         LOG.fatal(err, 'server (clear) error');
         process.exit(1);
diff --git a/package.json b/package.json
index 490ff4a..844db2a 100644
--- a/package.json
+++ b/package.json
@@ -12,7 +12,7 @@
         "ajv": "5.2.2",
         "ajv-keywords": "2.1.0",
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
-        "artedi": "1.0.0",
+        "artedi": "1.1.1",
         "assert-plus": "0.1.5",
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
-- 
2.21.0

