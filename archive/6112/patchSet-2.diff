From 58c62f4de9e1513bba6d27f9a4741978b8f9e379 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Tue, 16 Apr 2019 16:35:06 +0200
Subject: [PATCH] TRITON-1333 Always include networking.json boot module when
 booting CNs Reviewed by: Jason King <jason.king@joyent.com>

---
 lib/cache.js                  | 55 ++++++++++++++++++-----------------
 lib/dhcpd.js                  | 18 +++++++-----
 sapi_manifests/dhcpd/template |  2 +-
 3 files changed, 40 insertions(+), 35 deletions(-)

diff --git a/lib/cache.js b/lib/cache.js
index 8c2e988..69e9135 100644
--- a/lib/cache.js
+++ b/lib/cache.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 /* jsl:ignore */
 'use strict';
@@ -22,8 +22,7 @@ const vasync = require('vasync');
 const verror = require('verror');
 
 // local
-const mod_bootparams = require('./bootparams');
-const mod_json = require('./json-file');
+const mod_boot_files = require('./boot-files');
 
 
 /*
@@ -67,38 +66,40 @@ function CacheSentinel(opts) {
     assert.object(opts.cnapi, 'opts.cnapi');
     assert.object(opts.napi, 'opts.napi');
     assert.object(opts.adminPoolCache, 'opts.adminPoolCache');
-    assert.uuid(opts.adminUuid, 'opts.adminUuid');
-
-    assert.object(opts.cacheConfig, 'opts.cacheConfig');
-    assert.string(opts.cacheConfig.dir, 'opts.cacheConfig.dir');
-    assert.number(opts.cacheConfig.refreshIntervalSeconds,
-                  'opts.cacheConfig.refreshIntervalSeconds');
-    assert.ok(isSafeTimerValueSeconds(opts.cacheConfig.refreshIntervalSeconds),
+    assert.object(opts.config, 'opts.config');
+    assert.uuid(opts.config.adminUuid, 'opts.config.adminUuid');
+
+    assert.object(opts.config.cache, 'opts.config.cache');
+    assert.string(opts.config.cache.dir, 'opts.config.cache.dir');
+    assert.number(opts.config.cache.refreshIntervalSeconds,
+                  'opts.config.cache.refreshIntervalSeconds');
+    assert.ok(isSafeTimerValueSeconds(opts.config.cache.refreshIntervalSeconds),
               'Invalid timer value refreshIntervalSeconds');
-    assert.number(opts.cacheConfig.purgeIntervalSeconds,
-                  'opts.cacheConfig.purgeIntervalSeconds');
-    assert.ok(isSafeTimerValueSeconds(opts.cacheConfig.purgeIntervalSeconds),
+    assert.number(opts.config.cache.purgeIntervalSeconds,
+                  'opts.config.cache.purgeIntervalSeconds');
+    assert.ok(isSafeTimerValueSeconds(opts.config.cache.purgeIntervalSeconds),
               'Invalid timer value purgeIntervalSeconds');
-    assert.number(opts.cacheConfig.maxCacheFileAgeSeconds,
-                  'opts.cacheConfig.maxCacheFileAgeSeconds');
-    assert.ok(opts.cacheConfig.maxCacheFileAgeSeconds > 0,
+    assert.number(opts.config.cache.maxCacheFileAgeSeconds,
+                  'opts.config.cache.maxCacheFileAgeSeconds');
+    assert.ok(opts.config.cache.maxCacheFileAgeSeconds > 0,
               'maxCacheFileAgeSeconds must be positive');
-    assert.number(opts.cacheConfig.refreshConcurrency,
-                  'opts.cacheConfig.refreshConcurrency');
-    assert.ok(opts.cacheConfig.refreshConcurrency > 0,
+    assert.number(opts.config.cache.refreshConcurrency,
+                  'opts.config.cache.refreshConcurrency');
+    assert.ok(opts.config.cache.refreshConcurrency > 0,
               'refreshConcurrency must be positive');
 
     this.log = opts.log;
     this.cnapi = opts.cnapi;
     this.napi = opts.napi;
-    this.adminUuid = opts.adminUuid;
+    this.adminUuid = opts.config.adminUuid;
     this.adminPoolCache = opts.adminPoolCache;
 
-    this.cacheDir = opts.cacheConfig.dir;
-    this.refreshInterval = opts.cacheConfig.refreshIntervalSeconds * 1000;
-    this.purgeInterval = opts.cacheConfig.purgeIntervalSeconds * 1000;
-    this.maxCacheFileAge = opts.cacheConfig.maxCacheFileAgeSeconds * 1000;
-    this.refreshConcurrency = opts.cacheConfig.refreshConcurrency;
+    this.config = opts.config;
+    this.cacheDir = this.config.cache.dir;
+    this.refreshInterval = this.config.cache.refreshIntervalSeconds * 1000;
+    this.purgeInterval = this.config.cache.purgeIntervalSeconds * 1000;
+    this.maxCacheFileAge = this.config.cache.maxCacheFileAgeSeconds * 1000;
+    this.refreshConcurrency = this.config.cache.refreshConcurrency;
 
     this.refreshStartTime = undefined;
     this.purgeStartTime = undefined;
@@ -238,10 +239,12 @@ CacheSentinel.prototype.refreshCache = function refreshCache() {
             function stepFillCacheViaBootParams(ctx, next) {
                 const qErrors = [];
                 const queue = vasync.queue(function worker(mac, cb) {
-                    mod_bootparams.getBootParams({
+                    mod_boot_files.writeAll({
+                        config: self.config,
                         adminUuid: self.adminUuid,
                         cacheDir: self.cacheDir,
                         mac: mac,
+                        nic_tag: 'admin',
                         napi: self.napi,
                         cnapi: self.cnapi,
                         log: self.log,
diff --git a/lib/dhcpd.js b/lib/dhcpd.js
index bb1ddac..1d4758d 100755
--- a/lib/dhcpd.js
+++ b/lib/dhcpd.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -15,7 +15,6 @@
  */
 
 var assert = require('assert-plus');
-var fmt = require('util').format;
 var fs = require('fs');
 var dgram = require('dgram');
 var dhcp = require('./dhcp');
@@ -52,10 +51,13 @@ function DHCPD(opts) {
     } else {
         this.cnapi = mod_clients.createCNAPIclient(this.config);
     }
-    this.cacheSentinel = new mod_cache.CacheSentinel(
-        {log: this.log, cnapi: this.cnapi, napi: this.napi,
-         adminUuid: this.config.adminUuid, cacheConfig: this.config.cache,
-         adminPoolCache: this.adminPoolCache});
+    this.cacheSentinel = new mod_cache.CacheSentinel({
+        log: this.log,
+        cnapi: this.cnapi,
+        napi: this.napi,
+        config: this.config,
+        adminPoolCache: this.adminPoolCache
+    });
 }
 
 
@@ -110,7 +112,7 @@ DHCPD.prototype.handleMessage = function (msg, peer) {
     }
 
     var msgType = dhcp.DHCP_MESSAGE_TYPE[packet.options[53]];
-    if (msgType != 'DHCPDISCOVER' && msgType != 'DHCPREQUEST') {
+    if (msgType !== 'DHCPDISCOVER' && msgType !== 'DHCPREQUEST') {
         log.info('message type="%s": not responding', msgType);
         return;
     }
@@ -297,7 +299,7 @@ DHCPD.prototype.sendReply = function (peer, packet, packetOpts, log, callback) {
  */
 DHCPD.prototype.buildPacketOpts = function (packet, params, log) {
     var msgType = dhcp.DHCP_MESSAGE_TYPE[packet.options[53]];
-    var responseType = msgType == 'DHCPDISCOVER' ? 'DHCPOFFER' : 'DHCPACK';
+    var responseType = msgType === 'DHCPDISCOVER' ? 'DHCPOFFER' : 'DHCPACK';
     var mac = packet.chaddr;
     var resolvers = [];
     var serverIp = this.config.serverIp;
diff --git a/sapi_manifests/dhcpd/template b/sapi_manifests/dhcpd/template
index 3e7cb92..4e5de05 100644
--- a/sapi_manifests/dhcpd/template
+++ b/sapi_manifests/dhcpd/template
@@ -19,7 +19,6 @@
   "overlay": {
       "enabled": false
   },
-  "disableBootTimeFiles": true,
 {{/fabric_cfg}}
   "datacenterName": "{{datacenter_name}}",
   "dnsDomain": "{{dns_domain}}",{{#http_pxe_boot}}
@@ -35,6 +34,7 @@
   "resolvers": {{{resolvers}}}{{^resolvers}}[]{{/resolvers}},
   "netmask": "{{{admin_netmask}}}",
   {{#allow_missing_class_id}}"allowMissingClassID": true,{{/allow_missing_class_id}}
+  {{#disable_boot_time_files}}"disableBootTimeFiles": true,{{/disable_boot_time_files}}
   "cache": {
     "dir": "/tftpboot/cache",
     "refreshIntervalSeconds": 300,
-- 
2.21.0

