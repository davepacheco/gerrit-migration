From fcbb7a27cec11144c837db41200d5ed83d71ebb8 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Mon, 13 May 2019 17:08:49 +0200
Subject: [PATCH] TRITON-1661 test-papi broken in nightly: "Subtest: GET
 /packages (Search by flexible_disk)"

---
 test/api.test.js | 122 +++++------------------------------------------
 1 file changed, 13 insertions(+), 109 deletions(-)

diff --git a/test/api.test.js b/test/api.test.js
index 1b6dccb..b299dfc 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -5,14 +5,13 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
  * Test the Package API endpoints,
  */
 
-
 var fs      = require('fs');
 var path    = require('path');
 var qs      = require('querystring');
@@ -26,7 +25,6 @@ var test    = require('@smaller/tap').test;
 
 var papi = require('../lib/papi');
 
-
 // If we're in the papi zone, use the papi config. Otherwise assume we're on
 // someone's laptop and they're using the default COAL IP addresses.
 var cfgFile = path.resolve(__dirname, '../etc/config.json');
@@ -125,7 +123,6 @@ var backend;
 var client;
 var server;
 
-
 test('setup', function (t) {
     var log = new Logger({
         level: process.env.LOG_LEVEL || 'info',
@@ -160,13 +157,9 @@ test('setup', function (t) {
     });
 });
 
-
-
 test('Clean up stale state (before)', cleanUp);
 test('Check no stale packages (before)', checkNoPkgs);
 
-
-
 test('GET /ping', function (t) {
     client.get('/ping', function (err, req, res, health) {
         t.ifError(err);
@@ -178,8 +171,6 @@ test('GET /ping', function (t) {
     });
 });
 
-
-
 test('GET /packages', function (t) {
     client.get('/packages', function (err, req, res, pkgs) {
         t.ifError(err);
@@ -190,8 +181,6 @@ test('GET /packages', function (t) {
     });
 });
 
-
-
 test('POST /packages (OK)', function (t) {
     var postPkgs = packages.slice();
 
@@ -226,8 +215,6 @@ test('POST /packages (OK)', function (t) {
     postPkg();
 });
 
-
-
 test('POST /packages/:uuid (bad fields)', function (t) {
     var badPkg = {
         active: false,
@@ -260,8 +247,6 @@ test('POST /packages/:uuid (bad fields)', function (t) {
     });
 });
 
-
-
 test('POST /packages/:uuid (invalid package name)', function (t) {
     var badPkg = {
         active: false,
@@ -297,8 +282,6 @@ test('POST /packages/:uuid (invalid package name)', function (t) {
     });
 });
 
-
-
 test('POST /packages (missing required fields)', function (t) {
     var pkg = {
         vcpus: 1,
@@ -341,8 +324,6 @@ test('POST /packages (missing required fields)', function (t) {
     });
 });
 
-
-
 test('POST /packages (empty required fields)', function (t) {
     var pkg = {
         uuid: '', // uuid gets set if empty or null
@@ -375,8 +356,6 @@ test('POST /packages (empty required fields)', function (t) {
     });
 });
 
-
-
 test('POST /packages (fields validation failed)', function (t) {
     var pkg = {
         brand: 'WcDonalds',
@@ -489,8 +468,6 @@ test('POST /packages (fields validation failed)', function (t) {
     });
 });
 
-
-
 test('POST /packages (quota must be multiple of 1024)', function (t) {
     var pkg = {
         name: pkgName('fail-quota'),
@@ -532,7 +509,6 @@ test('POST /packages (quota must be multiple of 1024)', function (t) {
     });
 });
 
-
 test('POST /packages (duplicated unique field)', function (t) {
     client.post('/packages', packages[0], function (err, req, res, _pkg) {
         t.ok(err);
@@ -548,7 +524,6 @@ test('POST /packages (duplicated unique field)', function (t) {
     });
 });
 
-
 test('POST /packages (VCPUS exceeding MAX value)', function (t) {
     var pkg = {
         name: pkgName('fail-max-cpu'),
@@ -592,11 +567,8 @@ test('POST /packages (VCPUS exceeding MAX value)', function (t) {
     });
 });
 
-
 test('GET /packages/:uuid (OK)', checkPkg1);
 
-
-
 test('GET /packages/:uuid (404)', function (t) {
     var badUuid = uuid();
 
@@ -613,8 +585,6 @@ test('GET /packages/:uuid (404)', function (t) {
     });
 });
 
-
-
 test('GET /packages (Search by owner_uuids)', function (t) {
     var query = '/packages?owner_uuids=' + config.ufds_admin_uuid;
 
@@ -634,8 +604,6 @@ test('GET /packages (Search by owner_uuids)', function (t) {
     });
 });
 
-
-
 test('GET /packages (Search by group)', function (t) {
     var query = '/packages?group=ramones';
 
@@ -646,8 +614,6 @@ test('GET /packages (Search by group)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by networks)', function (t) {
     var network = packages[0].networks[1];
     var query = '/packages?networks=' + network;
@@ -662,8 +628,6 @@ test('GET /packages (Search by networks)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by name)', function (t) {
     var name = pkgName(128);
     var query = '/packages?name=' + name;
@@ -675,8 +639,6 @@ test('GET /packages (Search by name)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by flexible_disk)', function (t) {
     var query = '/packages?flexible_disk=true';
 
@@ -684,10 +646,20 @@ test('GET /packages (Search by flexible_disk)', function (t) {
         return p.flexible_disk === true;
     };
 
-    searchAndCheckPkgs(t, query, testFilter);
-});
 
+    client.get(query, function (err, req, res, pkgs) {
+        t.ifError(err);
+        t.equal(res.statusCode, 200);
+        t.ok(Array.isArray(pkgs));
 
+        t.ok(pkgs.length > 0, 'Got flexible_disk packages');
+        pkgs.forEach(function checkFlexibleDisk(pkg) {
+            t.ok(pkg.flexible_disk, 'flexible disk');
+        });
+
+        t.end();
+    });
+});
 
 test('GET /packages (Search by wildcard)', function (t) {
     var name = pkgName('');
@@ -700,8 +672,6 @@ test('GET /packages (Search by wildcard)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by multiple wildcard)', function (t) {
     var name = pkgName('');
     var query = '/packages?name=*' + name.slice(1) + '*';
@@ -713,8 +683,6 @@ test('GET /packages (Search by multiple wildcard)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by multiple fields)', function (t) {
     var name = pkgName('');
     var query = '/packages?name=' + name + '*&owner_uuids=' + uuid();
@@ -726,8 +694,6 @@ test('GET /packages (Search by multiple fields)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search with LDIF injection attempt)', function (t) {
     client.get({
         path: '/packages',
@@ -748,8 +714,6 @@ test('GET /packages (Search with LDIF injection attempt)', function (t) {
     });
 });
 
-
-
 test('GET /packages (Custom filter)', function (t) {
     var name = pkgName('');
     var filter = '(&(name=' + name + '*)(max_physical_memory>=64)' +
@@ -765,8 +729,6 @@ test('GET /packages (Custom filter)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Custom invalid filter)', function (t) {
     // intentionally missing a '('
     var filter = '(&(max_physical_memory>=64)zfs_io_priority=1)';
@@ -785,8 +747,6 @@ test('GET /packages (Custom invalid filter)', function (t) {
     });
 });
 
-
-
 test('GET /packages (Custom substring filter ignoring case)', function (t) {
     var name = pkgName('');
     var filter = '(name:caseIgnoreSubstringsMatch:=' + name.toUpperCase() +
@@ -800,8 +760,6 @@ test('GET /packages (Custom substring filter ignoring case)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Custom filter ignoring case)', function (t) {
     var name = pkgName(256);
     var filter = '(name:caseIgnoreMatch:=' + name.toUpperCase() + ')';
@@ -814,8 +772,6 @@ test('GET /packages (Custom filter ignoring case)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by multiple entries per field)', function (t) {
     var name256 = pkgName(256);
     var name512 = pkgName(512);
@@ -828,8 +784,6 @@ test('GET /packages (Search by multiple entries per field)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by multiple entries and fields)', function (t) {
     var name256 = pkgName(256);
     var name512 = pkgName(512);
@@ -845,8 +799,6 @@ test('GET /packages (Search by multiple entries and fields)', function (t) {
     searchAndCheckPkgs(t, query, testFilter);
 });
 
-
-
 test('GET /packages (Search by empty multiple entries)', function (t) {
     client.get('/packages?name=[]', function (_err, req, res, _) {
         t.equal(res.statusCode, 404);
@@ -854,8 +806,6 @@ test('GET /packages (Search by empty multiple entries)', function (t) {
     });
 });
 
-
-
 test('PUT /packages/:uuid (immutable fields)', function (t) {
     var immutable = {
         name: pkgName('immutable'),
@@ -900,12 +850,8 @@ test('PUT /packages/:uuid (immutable fields)', function (t) {
     });
 });
 
-
-
 test('GET /packages/:uuid (OK after failed PUT)', checkPkg1);
 
-
-
 test('PUT /packages/:uuid (validation failed)', function (t) {
     client.put('/packages/' + packages[0].uuid, {
         owner_uuids: ['this-is-not-a-valid-uuid']
@@ -927,12 +873,8 @@ test('PUT /packages/:uuid (validation failed)', function (t) {
     });
 });
 
-
-
 test('GET /packages/:uuid (OK after failed PUT)', checkPkg1);
 
-
-
 test('PUT /packages/:uuid (bad fields)', function (t) {
     client.put('/packages/' + packages[0].uuid, {
         foobarbaz: 21
@@ -954,12 +896,8 @@ test('PUT /packages/:uuid (bad fields)', function (t) {
     });
 });
 
-
-
 test('GET /packages/:uuid (OK after failed PUT)', checkPkg1);
 
-
-
 test('PUT /packages/:uuid (skip-validation)', function (t) {
     var url = '/packages/' + packages[0].uuid;
     var ownerUuids = ['this-is-not-a-valid-uuid'];
@@ -990,8 +928,6 @@ test('PUT /packages/:uuid (skip-validation)', function (t) {
     });
 });
 
-
-
 test('PUT /packages/:uuid (OK)', function (t) {
     var url = '/packages/' + packages[0].uuid;
     var ownerUuids = [config.ufds_admin_uuid];
@@ -1032,8 +968,6 @@ test('PUT /packages/:uuid (OK)', function (t) {
     });
 });
 
-
-
 test('PUT /packages/:uuid (404)', function (t) {
     var badUuid = uuid();
 
@@ -1051,8 +985,6 @@ test('PUT /packages/:uuid (404)', function (t) {
     });
 });
 
-
-
 test('DELETE /packages/:uuid (405)', function (t) {
     client.del('/packages/' + packages[0].uuid, function (err, req, res) {
         t.ok(err);
@@ -1068,12 +1000,8 @@ test('DELETE /packages/:uuid (405)', function (t) {
     });
 });
 
-
-
 test('GET /packages/:uuid (OK after failed DELETE)', checkPkg1);
 
-
-
 test('DELETE /packages/:uuid (404)', function (t) {
     var badUuid = uuid();
 
@@ -1091,8 +1019,6 @@ test('DELETE /packages/:uuid (404)', function (t) {
     });
 });
 
-
-
 test('DELETE /packages/:uuid (--force)', function (t) {
     var url = '/packages/' + packages[0].uuid;
 
@@ -1108,14 +1034,9 @@ test('DELETE /packages/:uuid (--force)', function (t) {
 });
 
 
-
-
 test('Clean up stale state (after)', cleanUp);
 test('Check no stale packages (after)', checkNoPkgs);
 
-
-
-
 test('teardown', function (t) {
     client.close();
     server.close(function () {
@@ -1127,8 +1048,6 @@ test('teardown', function (t) {
     });
 });
 
-
-
 function cleanUp(t) {
     function deletePkgs(pkgs) {
         if (pkgs.length === 0)
@@ -1153,8 +1072,6 @@ function cleanUp(t) {
     });
 }
 
-
-
 function checkNoPkgs(t) {
     function checkPkgs(pkgs) {
         if (pkgs.length === 0)
@@ -1172,8 +1089,6 @@ function checkNoPkgs(t) {
     checkPkgs(packages.map(function (p) { return p.uuid; }));
 }
 
-
-
 // Ensure package date fields are like valid dates.
 // Limitation: It would be nice to validate that they are ISO date strings.
 function checkAndStripDateFields(t, pkg) {
@@ -1188,8 +1103,6 @@ function checkAndStripDateFields(t, pkg) {
     delete pkg.updated_at;
 }
 
-
-
 function searchAndCheckPkgs(t, query, testFilter) {
     client.get(query, function (err, req, res, pkgs) {
         t.ifError(err);
@@ -1197,7 +1110,6 @@ function searchAndCheckPkgs(t, query, testFilter) {
         t.ok(Array.isArray(pkgs));
 
         var expectedPkgs = packages.filter(testFilter);
-
         pkgs.forEach(function (p) { checkAndStripDateFields(t, p); });
         t.equal(+res.headers['x-resource-count'], expectedPkgs.length);
         t.deepEqual(pkgs.sort(orderPkgs), expectedPkgs.sort(orderPkgs));
@@ -1206,8 +1118,6 @@ function searchAndCheckPkgs(t, query, testFilter) {
     });
 }
 
-
-
 function checkPkg1(t) {
     client.get('/packages/' + packages[0].uuid, function (err, req, res, pkg) {
         t.ifError(err);
@@ -1220,22 +1130,16 @@ function checkPkg1(t) {
     });
 }
 
-
-
 function uuid() {
     return libuuid.create();
 }
 
-
-
 function orderPkgs(a, b) {
     if (a.uuid < b.uuid)
         return 1;
     return -1;
 }
 
-
-
 function pkgName(suffix) {
     return pkgNamePrefix + suffix;
 }
-- 
2.21.0

