commit 6c6ec68ff912a07227a239a68a52d8a968220a3c (refs/changes/36/5436/3)
Author: Rui Loura <rui@joyent.com>
Date:   2019-01-28T20:50:25+00:00 (8 months ago)
    
    OS-7541 vmadmd crashes with admin_ip=dhcp after TRITON-1012

diff --git a/src/manifest b/src/manifest
index 6a5b952a..97e0ea00 100644
--- a/src/manifest
+++ b/src/manifest
@@ -771,6 +771,19 @@ d usr/vm/node_modules/triton-netconfig/lib 0755 root root
 f usr/vm/node_modules/triton-netconfig/lib/index.js 0444 root root
 f usr/vm/node_modules/triton-netconfig/LICENSE 0444 root root
 f usr/vm/node_modules/triton-netconfig/package.json 0444 root root
+d usr/vm/node_modules/triton-netconfig/node_modules 0755 root root
+d usr/vm/node_modules/triton-netconfig/node_modules/ip6addr 0755 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/LICENSE 0444 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/ip6addr.js 0444 root root
+d usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules 0755 root root
+d usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus 0755 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/assert.js 0444 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/package.json 0444 root root
+d usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone 0755 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/LICENSE 0444 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/clone.js 0444 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/package.json 0444 root root
+f usr/vm/node_modules/triton-netconfig/node_modules/ip6addr/package.json 0444 root root
 f usr/vm/node_modules/utils.js 0444 root bin
 d usr/vm/node_modules/vasync 0755 root root
 d usr/vm/node_modules/vasync/lib 0755 root root
diff --git a/src/vm/node_modules/triton-netconfig/lib/index.js b/src/vm/node_modules/triton-netconfig/lib/index.js
index f0ae5622..bbd6cd62 100644
--- a/src/vm/node_modules/triton-netconfig/lib/index.js
+++ b/src/vm/node_modules/triton-netconfig/lib/index.js
@@ -5,9 +5,11 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
+var ip6addr = require('ip6addr');
+
 // ---- Internal
 
 var RACK_RE = '(_rack_[A-Z0-9_-]+)?$';
@@ -19,13 +21,10 @@ var INTERNAL_NAME = 'internal';
 /*
  * TODO: prefer RFD 117 traits
  */
-function _fromVmMetadataCommon(vm, what, network) {
-    var re = new RegExp('^' + network + RACK_RE, 'i');
-    var nics = vm.nics;
-
+function _fromNicsArrayCommon(nics, what, network) {
     for (var i = 0; i < nics.length; i++) {
-        var nictag = nics[i].nic_tag;
-        if (re.test(nictag)) {
+        var nic = nics[i];
+        if (_isNetNicCommon(nic, network)) {
             return nics[i][what];
         }
     }
@@ -33,6 +32,13 @@ function _fromVmMetadataCommon(vm, what, network) {
     return null;
 }
 
+/*
+ * TODO: prefer RFD 117 traits
+ */
+function _fromVmMetadataCommon(vm, what, network) {
+    return _fromNicsArrayCommon(vm.nics, what, network);
+}
+
 /*
  * TODO: prefer RFD 117 traits
  */
@@ -42,6 +48,15 @@ function _isNetNicCommon(nic, network) {
     return re.test(nic.nic_tag);
 }
 
+function _isValidIpAddress(ip) {
+    try {
+        ip6addr.parse(ip);
+        return true;
+    } catch (_) {
+        return false;
+    }
+}
+
 // ---- Exports
 
 /*
@@ -75,10 +90,15 @@ function adminNicFromSysinfo(sysinfo) {
 
 /*
  * Given a CN's sysinfo in JSON format return the admin IP.
+ *
+ * The "Admin IP" value can be set to "dhcp", so this first checks if it is a
+ * valid IP address, and if not it tries to dig it out of sysinfo.
  */
 function adminIpFromSysinfo(sysinfo) {
-    if (sysinfo['Admin IP']) {
-        return sysinfo['Admin IP'];
+    var sys_admin_ip = sysinfo['Admin IP'];
+
+    if (sys_admin_ip && _isValidIpAddress(sys_admin_ip)) {
+        return sys_admin_ip;
     }
 
     var nic = adminNicFromSysinfo(sysinfo);
@@ -113,6 +133,12 @@ function adminMacFromVmMetadata(vm) {
     return _fromVmMetadataCommon(vm, 'mac', ADMIN_NAME);
 }
 
+// ---- From NICs array (sdc:nics metadata)
+
+function adminIpFromNicsArray(nics) {
+    return _fromNicsArrayCommon(nics, 'ip', ADMIN_NAME);
+}
+
 // ---- isNic
 
 function isNicAdmin(nic) {
@@ -139,6 +165,7 @@ function isNetInternal(net) {
 
 module.exports = {
     adminNicFromSysinfo: adminNicFromSysinfo,
+    adminIpFromNicsArray: adminIpFromNicsArray,
     adminIpFromSysinfo: adminIpFromSysinfo,
     adminIpFromVmMetadata: adminIpFromVmMetadata,
     externalIpFromVmMetadata: externalIpFromVmMetadata,
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/LICENSE b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/LICENSE
new file mode 100644
index 00000000..14e2f777
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/LICENSE
@@ -0,0 +1,373 @@
+Mozilla Public License Version 2.0
+==================================
+
+1. Definitions
+--------------
+
+1.1. "Contributor"
+    means each individual or legal entity that creates, contributes to
+    the creation of, or owns Covered Software.
+
+1.2. "Contributor Version"
+    means the combination of the Contributions of others (if any) used
+    by a Contributor and that particular Contributor's Contribution.
+
+1.3. "Contribution"
+    means Covered Software of a particular Contributor.
+
+1.4. "Covered Software"
+    means Source Code Form to which the initial Contributor has attached
+    the notice in Exhibit A, the Executable Form of such Source Code
+    Form, and Modifications of such Source Code Form, in each case
+    including portions thereof.
+
+1.5. "Incompatible With Secondary Licenses"
+    means
+
+    (a) that the initial Contributor has attached the notice described
+        in Exhibit B to the Covered Software; or
+
+    (b) that the Covered Software was made available under the terms of
+        version 1.1 or earlier of the License, but not also under the
+        terms of a Secondary License.
+
+1.6. "Executable Form"
+    means any form of the work other than Source Code Form.
+
+1.7. "Larger Work"
+    means a work that combines Covered Software with other material, in 
+    a separate file or files, that is not Covered Software.
+
+1.8. "License"
+    means this document.
+
+1.9. "Licensable"
+    means having the right to grant, to the maximum extent possible,
+    whether at the time of the initial grant or subsequently, any and
+    all of the rights conveyed by this License.
+
+1.10. "Modifications"
+    means any of the following:
+
+    (a) any file in Source Code Form that results from an addition to,
+        deletion from, or modification of the contents of Covered
+        Software; or
+
+    (b) any new file in Source Code Form that contains any Covered
+        Software.
+
+1.11. "Patent Claims" of a Contributor
+    means any patent claim(s), including without limitation, method,
+    process, and apparatus claims, in any patent Licensable by such
+    Contributor that would be infringed, but for the grant of the
+    License, by the making, using, selling, offering for sale, having
+    made, import, or transfer of either its Contributions or its
+    Contributor Version.
+
+1.12. "Secondary License"
+    means either the GNU General Public License, Version 2.0, the GNU
+    Lesser General Public License, Version 2.1, the GNU Affero General
+    Public License, Version 3.0, or any later versions of those
+    licenses.
+
+1.13. "Source Code Form"
+    means the form of the work preferred for making modifications.
+
+1.14. "You" (or "Your")
+    means an individual or a legal entity exercising rights under this
+    License. For legal entities, "You" includes any entity that
+    controls, is controlled by, or is under common control with You. For
+    purposes of this definition, "control" means (a) the power, direct
+    or indirect, to cause the direction or management of such entity,
+    whether by contract or otherwise, or (b) ownership of more than
+    fifty percent (50%) of the outstanding shares or beneficial
+    ownership of such entity.
+
+2. License Grants and Conditions
+--------------------------------
+
+2.1. Grants
+
+Each Contributor hereby grants You a world-wide, royalty-free,
+non-exclusive license:
+
+(a) under intellectual property rights (other than patent or trademark)
+    Licensable by such Contributor to use, reproduce, make available,
+    modify, display, perform, distribute, and otherwise exploit its
+    Contributions, either on an unmodified basis, with Modifications, or
+    as part of a Larger Work; and
+
+(b) under Patent Claims of such Contributor to make, use, sell, offer
+    for sale, have made, import, and otherwise transfer either its
+    Contributions or its Contributor Version.
+
+2.2. Effective Date
+
+The licenses granted in Section 2.1 with respect to any Contribution
+become effective for each Contribution on the date the Contributor first
+distributes such Contribution.
+
+2.3. Limitations on Grant Scope
+
+The licenses granted in this Section 2 are the only rights granted under
+this License. No additional rights or licenses will be implied from the
+distribution or licensing of Covered Software under this License.
+Notwithstanding Section 2.1(b) above, no patent license is granted by a
+Contributor:
+
+(a) for any code that a Contributor has removed from Covered Software;
+    or
+
+(b) for infringements caused by: (i) Your and any other third party's
+    modifications of Covered Software, or (ii) the combination of its
+    Contributions with other software (except as part of its Contributor
+    Version); or
+
+(c) under Patent Claims infringed by Covered Software in the absence of
+    its Contributions.
+
+This License does not grant any rights in the trademarks, service marks,
+or logos of any Contributor (except as may be necessary to comply with
+the notice requirements in Section 3.4).
+
+2.4. Subsequent Licenses
+
+No Contributor makes additional grants as a result of Your choice to
+distribute the Covered Software under a subsequent version of this
+License (see Section 10.2) or under the terms of a Secondary License (if
+permitted under the terms of Section 3.3).
+
+2.5. Representation
+
+Each Contributor represents that the Contributor believes its
+Contributions are its original creation(s) or it has sufficient rights
+to grant the rights to its Contributions conveyed by this License.
+
+2.6. Fair Use
+
+This License is not intended to limit any rights You have under
+applicable copyright doctrines of fair use, fair dealing, or other
+equivalents.
+
+2.7. Conditions
+
+Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted
+in Section 2.1.
+
+3. Responsibilities
+-------------------
+
+3.1. Distribution of Source Form
+
+All distribution of Covered Software in Source Code Form, including any
+Modifications that You create or to which You contribute, must be under
+the terms of this License. You must inform recipients that the Source
+Code Form of the Covered Software is governed by the terms of this
+License, and how they can obtain a copy of this License. You may not
+attempt to alter or restrict the recipients' rights in the Source Code
+Form.
+
+3.2. Distribution of Executable Form
+
+If You distribute Covered Software in Executable Form then:
+
+(a) such Covered Software must also be made available in Source Code
+    Form, as described in Section 3.1, and You must inform recipients of
+    the Executable Form how they can obtain a copy of such Source Code
+    Form by reasonable means in a timely manner, at a charge no more
+    than the cost of distribution to the recipient; and
+
+(b) You may distribute such Executable Form under the terms of this
+    License, or sublicense it under different terms, provided that the
+    license for the Executable Form does not attempt to limit or alter
+    the recipients' rights in the Source Code Form under this License.
+
+3.3. Distribution of a Larger Work
+
+You may create and distribute a Larger Work under terms of Your choice,
+provided that You also comply with the requirements of this License for
+the Covered Software. If the Larger Work is a combination of Covered
+Software with a work governed by one or more Secondary Licenses, and the
+Covered Software is not Incompatible With Secondary Licenses, this
+License permits You to additionally distribute such Covered Software
+under the terms of such Secondary License(s), so that the recipient of
+the Larger Work may, at their option, further distribute the Covered
+Software under the terms of either this License or such Secondary
+License(s).
+
+3.4. Notices
+
+You may not remove or alter the substance of any license notices
+(including copyright notices, patent notices, disclaimers of warranty,
+or limitations of liability) contained within the Source Code Form of
+the Covered Software, except that You may alter any license notices to
+the extent required to remedy known factual inaccuracies.
+
+3.5. Application of Additional Terms
+
+You may choose to offer, and to charge a fee for, warranty, support,
+indemnity or liability obligations to one or more recipients of Covered
+Software. However, You may do so only on Your own behalf, and not on
+behalf of any Contributor. You must make it absolutely clear that any
+such warranty, support, indemnity, or liability obligation is offered by
+You alone, and You hereby agree to indemnify every Contributor for any
+liability incurred by such Contributor as a result of warranty, support,
+indemnity or liability terms You offer. You may include additional
+disclaimers of warranty and limitations of liability specific to any
+jurisdiction.
+
+4. Inability to Comply Due to Statute or Regulation
+---------------------------------------------------
+
+If it is impossible for You to comply with any of the terms of this
+License with respect to some or all of the Covered Software due to
+statute, judicial order, or regulation then You must: (a) comply with
+the terms of this License to the maximum extent possible; and (b)
+describe the limitations and the code they affect. Such description must
+be placed in a text file included with all distributions of the Covered
+Software under this License. Except to the extent prohibited by statute
+or regulation, such description must be sufficiently detailed for a
+recipient of ordinary skill to be able to understand it.
+
+5. Termination
+--------------
+
+5.1. The rights granted under this License will terminate automatically
+if You fail to comply with any of its terms. However, if You become
+compliant, then the rights granted under this License from a particular
+Contributor are reinstated (a) provisionally, unless and until such
+Contributor explicitly and finally terminates Your grants, and (b) on an
+ongoing basis, if such Contributor fails to notify You of the
+non-compliance by some reasonable means prior to 60 days after You have
+come back into compliance. Moreover, Your grants from a particular
+Contributor are reinstated on an ongoing basis if such Contributor
+notifies You of the non-compliance by some reasonable means, this is the
+first time You have received notice of non-compliance with this License
+from such Contributor, and You become compliant prior to 30 days after
+Your receipt of the notice.
+
+5.2. If You initiate litigation against any entity by asserting a patent
+infringement claim (excluding declaratory judgment actions,
+counter-claims, and cross-claims) alleging that a Contributor Version
+directly or indirectly infringes any patent, then the rights granted to
+You by any and all Contributors for the Covered Software under Section
+2.1 of this License shall terminate.
+
+5.3. In the event of termination under Sections 5.1 or 5.2 above, all
+end user license agreements (excluding distributors and resellers) which
+have been validly granted by You or Your distributors under this License
+prior to termination shall survive termination.
+
+************************************************************************
+*                                                                      *
+*  6. Disclaimer of Warranty                                           *
+*  -------------------------                                           *
+*                                                                      *
+*  Covered Software is provided under this License on an "as is"       *
+*  basis, without warranty of any kind, either expressed, implied, or  *
+*  statutory, including, without limitation, warranties that the       *
+*  Covered Software is free of defects, merchantable, fit for a        *
+*  particular purpose or non-infringing. The entire risk as to the     *
+*  quality and performance of the Covered Software is with You.        *
+*  Should any Covered Software prove defective in any respect, You     *
+*  (not any Contributor) assume the cost of any necessary servicing,   *
+*  repair, or correction. This disclaimer of warranty constitutes an   *
+*  essential part of this License. No use of any Covered Software is   *
+*  authorized under this License except under this disclaimer.         *
+*                                                                      *
+************************************************************************
+
+************************************************************************
+*                                                                      *
+*  7. Limitation of Liability                                          *
+*  --------------------------                                          *
+*                                                                      *
+*  Under no circumstances and under no legal theory, whether tort      *
+*  (including negligence), contract, or otherwise, shall any           *
+*  Contributor, or anyone who distributes Covered Software as          *
+*  permitted above, be liable to You for any direct, indirect,         *
+*  special, incidental, or consequential damages of any character      *
+*  including, without limitation, damages for lost profits, loss of    *
+*  goodwill, work stoppage, computer failure or malfunction, or any    *
+*  and all other commercial damages or losses, even if such party      *
+*  shall have been informed of the possibility of such damages. This   *
+*  limitation of liability shall not apply to liability for death or   *
+*  personal injury resulting from such party's negligence to the       *
+*  extent applicable law prohibits such limitation. Some               *
+*  jurisdictions do not allow the exclusion or limitation of           *
+*  incidental or consequential damages, so this exclusion and          *
+*  limitation may not apply to You.                                    *
+*                                                                      *
+************************************************************************
+
+8. Litigation
+-------------
+
+Any litigation relating to this License may be brought only in the
+courts of a jurisdiction where the defendant maintains its principal
+place of business and such litigation shall be governed by laws of that
+jurisdiction, without reference to its conflict-of-law provisions.
+Nothing in this Section shall prevent a party's ability to bring
+cross-claims or counter-claims.
+
+9. Miscellaneous
+----------------
+
+This License represents the complete agreement concerning the subject
+matter hereof. If any provision of this License is held to be
+unenforceable, such provision shall be reformed only to the extent
+necessary to make it enforceable. Any law or regulation which provides
+that the language of a contract shall be construed against the drafter
+shall not be used to construe this License against a Contributor.
+
+10. Versions of the License
+---------------------------
+
+10.1. New Versions
+
+Mozilla Foundation is the license steward. Except as provided in Section
+10.3, no one other than the license steward has the right to modify or
+publish new versions of this License. Each version will be given a
+distinguishing version number.
+
+10.2. Effect of New Versions
+
+You may distribute the Covered Software under the terms of the version
+of the License under which You originally received the Covered Software,
+or under the terms of any subsequent version published by the license
+steward.
+
+10.3. Modified Versions
+
+If you create software not governed by this License, and you want to
+create a new license for such software, you may create and use a
+modified version of this License if you rename the license and remove
+any references to the name of the license steward (except to note that
+such modified license differs from this License).
+
+10.4. Distributing Source Code Form that is Incompatible With Secondary
+Licenses
+
+If You choose to distribute Source Code Form that is Incompatible With
+Secondary Licenses under the terms of this version of the License, the
+notice described in Exhibit B of this License must be attached.
+
+Exhibit A - Source Code Form License Notice
+-------------------------------------------
+
+  This Source Code Form is subject to the terms of the Mozilla Public
+  License, v. 2.0. If a copy of the MPL was not distributed with this
+  file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+If it is not possible or desirable to put the notice in a particular
+file, then You may include the notice in a location (such as a LICENSE
+file in a relevant directory) where a recipient would be likely to look
+for such a notice.
+
+You may add additional accurate notices of copyright ownership.
+
+Exhibit B - "Incompatible With Secondary Licenses" Notice
+---------------------------------------------------------
+
+  This Source Code Form is "Incompatible With Secondary Licenses", as
+  defined by the Mozilla Public License, v. 2.0.
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/ip6addr.js b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/ip6addr.js
new file mode 100644
index 00000000..35f6fca1
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/ip6addr.js
@@ -0,0 +1,711 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var clone = require('clone');
+var util = require('util');
+
+
+///--- Helpers
+
+function ParseError(input, message, index) {
+  if (Error.captureStackTrace)
+    Error.captureStackTrace(this, ParseError);
+
+  this.input = input;
+  this.message = message;
+  if (index !== undefined) {
+    this.message += ' at index ' + index;
+  }
+}
+util.inherits(ParseError, Error);
+
+function modulo(a, n) {
+  return (n + (a % n)) % n;
+}
+
+function _arrayToOctetString(input) {
+  var out;
+  out = (input[0] >> 8) + '.' + (input[0] & 0xff) + '.';
+  out += (input[1] >> 8) + '.' + (input[1] & 0xff);
+  return out;
+}
+
+function _isAddr(addr) {
+  if (typeof (addr) === 'object') {
+    /* It must resemble an Addr object */
+    if (Array.isArray(addr._fields) && typeof (addr._attrs) === 'object') {
+      return true;
+    }
+  }
+  return false;
+}
+
+function _toAddr(input) {
+  if (typeof (input) === 'string') {
+    return ip6addrParse(input);
+  } else if (_isAddr(input)) {
+    return input;
+  } else {
+    throw new Error('Invalid argument: Addr or parsable string expected');
+  }
+}
+
+function _arrayToHex(input, zeroElide, zeroPad) {
+  var i;
+  var elStart = null;
+  var elLen = 0;
+  if (zeroElide) {
+    /* find longest run of zeroes to potentially elide */
+    var start = null;
+    var len = null;
+    for (i = 0; i < input.length; i++) {
+      if (input[i] === 0) {
+        if (start === null) {
+          start = i;
+          len = 1;
+        } else {
+          len++;
+        }
+      } else if (start !== null) {
+        if (len > elLen) {
+          elStart = start;
+          elLen = len;
+        }
+        start = null;
+      }
+    }
+    /* capturing last potential zero */
+    if (start !== null && len > elLen) {
+      elStart = start;
+      elLen = len;
+    }
+  }
+
+  var output = [];
+  var num;
+  for (i = 0; i < input.length; i++) {
+    if (elStart !== null) {
+      if (i === elStart) {
+        if (elLen === 8) {
+          /* all-zeroes is just '::' */
+          return ['::'];
+        } else if (elStart === 0 || elStart + elLen === input.length) {
+          /*
+           * For elided zeroes at the beginning/end of the address, an extra
+           * ':' is needed during the join step.
+           */
+          output.push(':');
+        } else {
+          output.push('');
+        }
+      }
+      if (i >= elStart && i < elStart + elLen) {
+        continue;
+      }
+    }
+    num = input[i].toString(16);
+    if (zeroPad && num.length != 4) {
+      num = '0000'.slice(num.length) + num;
+    }
+    output.push(num);
+  }
+  return output;
+}
+
+function _ipv4Mapped(input) {
+  var comp = [0, 0, 0, 0, 0, 0xffff];
+  var i;
+  for (i = 0; i < 6; i++) {
+    if (input[i] != comp[i])
+      return false;
+  }
+  return true;
+}
+
+function _prefixToAddr(len) {
+  assert.number(len);
+  len = len | 0;
+  assert.ok(len <= 128);
+  assert.ok(len >= 0);
+
+  var output = new Addr();
+  var i;
+  for (i = 0; len > 16; i++, len -= 16) {
+    output._fields[i] = 0xffff;
+  }
+  if (len > 0) {
+    output._fields[i] = 0xffff - ((1 << (16 - len)) - 1);
+  }
+  return output;
+}
+
+function _toCIDR(input) {
+  if (typeof (input) === 'string') {
+    return new CIDR(input);
+  } else if (input instanceof CIDR) {
+    return input;
+  } else {
+    throw new Error('Invalid argument: CIDR or parsable string expected');
+  }
+}
+
+var strDefaults = {
+  format: 'auto', // Control format of printed address
+  zeroElide: true, // Elide longest run of zeros
+  zeroPad: false // Pad with zeros when a group would print as < 4 chars
+};
+
+function getStrOpt(opts, name) {
+  if (opts && opts.hasOwnProperty(name)) {
+    return opts[name];
+  } else {
+    return strDefaults[name];
+  }
+}
+
+///--- Public Classes
+
+/**
+ * IPv6/IPv4 address representation.
+ *
+ * It should not be instantiated directly by library consumers.
+ */
+function Addr() {
+  this._fields = [0, 0, 0, 0, 0, 0, 0, 0];
+  this._attrs = {};
+}
+
+Addr.prototype.kind = function getKind() {
+  if (v4subnet.contains(this)) {
+    return 'ipv4';
+  } else {
+    return 'ipv6';
+  }
+};
+
+Addr.prototype.toString = function toString(opts) {
+  assert.optionalObject(opts, 'opts');
+  var format = getStrOpt(opts, 'format');
+  var zeroElide = getStrOpt(opts, 'zeroElide');
+  var zeroPad = getStrOpt(opts, 'zeroPad');
+
+  assert.string(format, 'opts.format');
+  assert.bool(zeroElide, 'opts.zeroElide');
+  assert.bool(zeroPad, 'opts.zeroPad');
+
+  // Try to print the address the way it was originally formatted
+  if (format === 'auto') {
+    if (this._attrs.ipv4Bare) {
+      format = 'v4';
+    } else if (this._attrs.ipv4Mapped) {
+      format = 'v4-mapped';
+    } else {
+      format = 'v6';
+    }
+  }
+
+  switch (format) {
+  // Print in dotted-quad notation (but only if truly IPv4)
+  case 'v4':
+    if (!v4subnet.contains(this)) {
+        throw new Error('cannot print non-v4 address in dotted quad notation');
+    }
+    return _arrayToOctetString(this._fields.slice(6));
+
+  // Print as an IPv4-mapped IPv6 address
+  case 'v4-mapped':
+    if (!v4subnet.contains(this)) {
+        throw new Error('cannot print non-v4 address as a v4-mapped address');
+    }
+    var output = _arrayToHex(this._fields.slice(0, 6), zeroElide, zeroPad);
+    output.push(_arrayToOctetString(this._fields.slice(6)));
+    return output.join(':');
+
+  // Print as an IPv6 address
+  case 'v6':
+    return _arrayToHex(this._fields, zeroElide, zeroPad).join(':');
+
+  // Unrecognized formatting method
+  default:
+    throw new Error('unrecognized format method "' + format + '"');
+  }
+};
+
+Addr.prototype.toBuffer = function toBuffer(buf) {
+  if (buf !== undefined) {
+    if (!Buffer.isBuffer(buf)) {
+      throw new Error('optional arg must be Buffer');
+    }
+  } else {
+    buf = new Buffer(16);
+  }
+  var i;
+  for (i = 0; i < 8; i++) {
+    buf.writeUInt16BE(this._fields[i], i*2);
+  }
+  return buf;
+};
+
+Addr.prototype.toLong = function toLong() {
+  if (!v4subnet.contains(this)) {
+    throw new Error('only possible for ipv4-mapped addresses');
+  }
+  return ((this._fields[6] << 16) >>> 0) + this._fields[7];
+};
+
+Addr.prototype.clone = function cloneAddr() {
+  var out = new Addr();
+  out._fields = clone(this._fields);
+  out._attrs = clone(this._attrs);
+  return out;
+};
+
+Addr.prototype.offset = function offset(num) {
+  if (num < -4294967295 || num > 4294967295) {
+    throw new Error('offsets should be between -4294967295 and 4294967295');
+  }
+  var out = this.clone();
+  var i, moved;
+  for (i = 7; i >= 0; i--) {
+    moved = out._fields[i] + num;
+    if (moved > 65535) {
+      num = moved >>> 16;
+      moved = moved & 0xffff;
+    } else if (moved < 0) {
+      num = Math.floor(moved / (1 << 16));
+      moved = modulo(moved, 1 << 16);
+    } else {
+      num = 0;
+    }
+    out._fields[i] = moved;
+
+    /* Prevent wrap-around for both ipv6 and ipv4-mapped addresses */
+    if (num !== 0) {
+      if ((i === 0) || (i === 6 && this._attrs.ipv4Mapped)) {
+        return null;
+      }
+    } else {
+      break;
+    }
+  }
+  return out;
+};
+
+Addr.prototype.and = function addrAnd(input) {
+  input = _toAddr(input);
+  var i;
+  var output = this.clone();
+  for (i = 0; i < 8; i++) {
+    output._fields[i] = output._fields[i] & input._fields[i];
+  }
+  return output;
+};
+
+Addr.prototype.or = function addrOr(input) {
+  input = _toAddr(input);
+  var i;
+  var output = this.clone();
+  for (i = 0; i < 8; i++) {
+    output._fields[i] = output._fields[i] | input._fields[i];
+  }
+  return output;
+};
+
+Addr.prototype.not = function addrNot() {
+  var i;
+  var output = this.clone();
+  for (i = 0; i < 8; i++) {
+    output._fields[i] = (~ output._fields[i]) & 0xffff;
+  }
+  return output;
+};
+
+Addr.prototype.compare = function compareMember(addr) {
+  return ip6addrCompare(this, addr);
+};
+
+/**
+ * CIDR Block
+ * @param addr CIDR network address
+ * @param prefixLen Length of network prefix
+ *
+ * The addr parameter can be an Addr object or a parseable string.
+ * If prefixLen is omitted, then addr must contain a parseable string in the
+ * form '<address>/<prefix>'.
+ */
+function CIDR(addr, prefixLen) {
+  if (prefixLen === undefined) {
+    /* OK to pass pass string of "<addr>/<prefix>" */
+    assert.string(addr);
+    var fields = addr.match(/^([a-fA-F0-9:.]+)\/([0-9]+)$/);
+    if (fields === null) {
+      throw new Error('Invalid argument: <addr>/<prefix> expected');
+    }
+    addr = fields[1];
+    prefixLen = parseInt(fields[2], 10);
+  }
+  assert.number(prefixLen);
+  prefixLen = prefixLen | 0;
+  addr = _toAddr(addr);
+
+  /* Expand prefix to ipv6 length of bare ipv4 address provided */
+  if (addr._attrs.ipv4Bare) {
+    prefixLen += 96;
+  }
+  if (prefixLen < 0 || prefixLen > 128) {
+    throw new Error('Invalid prefix length');
+  }
+  this._prefix = prefixLen;
+  this._mask = _prefixToAddr(prefixLen);
+  this._addr = addr.and(this._mask);
+}
+
+CIDR.prototype.contains = function cidrContains(input) {
+  input = _toAddr(input);
+  return (this._addr.compare(input.and(this._mask)) === 0);
+};
+
+CIDR.prototype.first = function cidrFirst(input) {
+  if (this._prefix >= 127) {
+    /* Support single-address and point-to-point networks */
+    return this._addr;
+  } else {
+    return this._addr.offset(1);
+  }
+};
+
+CIDR.prototype.last = function cidrLast(input) {
+  var ending = this._addr.or(this._mask.not());
+  if (this._prefix >= 127) {
+    /* Support single-address and point-to-point networks */
+    return ending;
+  } else {
+    if (this._addr._attrs.ipv4Mapped) {
+      /* don't include the broadcast for ipv4 */
+      return ending.offset(-1);
+    } else {
+      return ending;
+    }
+  }
+};
+
+CIDR.prototype.broadcast = function getBroadcast() {
+  if (!v4subnet.contains(this._addr)) {
+    throw new Error('Only IPv4 networks have broadcast addresses');
+  }
+  return this._addr.or(this._mask.not());
+};
+
+CIDR.prototype.compare = function compareCIDR(cidr) {
+  return ip6cidrCompare(this, cidr);
+};
+
+CIDR.prototype.prefixLength = function getPrefixLength(format) {
+  assert.optionalString(format, 'format');
+  if (format === undefined || format === 'auto') {
+    format = this._addr._attrs.ipv4Bare ? 'v4' : 'v6';
+  }
+
+  switch (format) {
+  case 'v4':
+    if (!v4subnet.contains(this._addr)) {
+        throw new Error('cannot return v4 prefix length for non-v4 address');
+    }
+    return this._prefix - 96;
+  case 'v6':
+    return this._prefix;
+  default:
+    throw new Error('unrecognized format method "' + format + '"');
+  }
+};
+
+CIDR.prototype.toString = function cidrString(opts) {
+  assert.optionalObject(opts, 'opts');
+
+  var format = getStrOpt(opts, 'format');
+  if (format === 'v4-mapped') {
+    format = 'v6';
+  }
+
+  return this._addr.toString(opts) + '/' + this.prefixLength(format);
+};
+
+var v4subnet = new CIDR('::ffff:0:0', 96);
+
+function ip6cidrCompare(a, b) {
+  a = _toCIDR(a);
+  b = _toCIDR(b);
+
+  /*
+   * We compare first on the address component, and then on the prefix length,
+   * such that the network with the smaller prefix length (the larger subnet)
+   * is greater than the network with the smaller prefix (the smaller subnet).
+   * This is the same ordering used in Postgres.
+   */
+  var cmp = ip6addrCompare(a._addr, b._addr);
+  return cmp === 0 ? b._prefix - a._prefix : cmp;
+}
+
+/**
+ * Range of addresses.
+ * @param begin Beginning address of the range
+ * @param end Ending address of the range
+ *
+ * Parameters can be Addr objects or parsable address strings.
+ */
+function AddrRange(begin, end) {
+  begin = _toAddr(begin);
+  end = _toAddr(end);
+
+  if (begin.compare(end) > 0) {
+    throw new Error('begin address must be <= end address');
+  }
+
+  this._begin = begin;
+  this._end = end;
+}
+
+AddrRange.prototype.contains = function addrRangeContains(input) {
+  input = _toAddr(input);
+  return (this._begin.compare(input) <= 0 && this._end.compare(input) >= 0);
+};
+
+AddrRange.prototype.first = function addrRangeFirst() {
+  return this._begin;
+};
+
+AddrRange.prototype.last = function addrRangeLast() {
+  return this._end;
+};
+
+
+///--- Public Functions
+
+function ip6addrParse(input) {
+  if (typeof (input) === 'string') {
+    return parseString(input);
+  } else if (typeof (input) === 'number') {
+    return parseLong(input);
+  } else if (typeof (input) === 'object' && _isAddr(input)) {
+    return input;
+  } else {
+    throw new Error('Invalid argument: only string|number allowed');
+  }
+}
+
+function parseString(input) {
+  assert.string(input);
+  input = input.toLowerCase();
+  var result = new Addr();
+
+  var ip6Fields = []; // hold unparsed hex fields
+  var ip4Fields = []; // hold unparsed decimal fields
+  var expIndex = null; // field index of '::' delimiter
+  var value = '';  // accumulate unparsed hex/dec field
+  var i, c;
+
+  /*
+   * No valid ipv6 is longer than 39 characters.
+   * An extra character of leeway is there to tolerate some :: funny business.
+   */
+  if (input.length > 40) {
+    throw new ParseError(input, 'Input too long');
+  }
+
+  for (i = 0; i < input.length; i++) {
+    c = input[i];
+    if (c === ':') {
+      if ((i+1) < input.length && input[i+1] === ':') {
+        /*
+         * Variable length '::' delimiter.
+         * Multiples would be ambiguous
+         */
+        if (expIndex !== null) {
+          throw new ParseError(input, 'Multiple :: delimiters', i);
+        }
+
+        /*
+         * The value buffer can be empty for cases where the '::' delimiter is
+         * the first portion of the address.
+         */
+        if (value !== '') {
+          ip6Fields.push(value);
+          value = '';
+        }
+        expIndex = ip6Fields.length;
+        i++;
+      } else {
+        /*
+         * Standard ':' delimiter
+         * The value buffer cannot be empty since that would imply an illegal
+         * pattern such as ':::' or ':.'.
+         */
+        if (value === '') {
+          throw new ParseError(input, 'illegal delimiter', i);
+        }
+        ip6Fields.push(value);
+        value = '';
+      }
+    } else if (c === '.') {
+      /*
+       * Handle dotted quad notation for ipv4 and ipv4-mapped addresses.
+       */
+      ip4Fields.push(value);
+      value = '';
+    } else {
+      value = value + c;
+    }
+  }
+  /* Handle the last stashed value */
+  if (value !== '') {
+    if (ip4Fields.length !== 0) {
+      ip4Fields.push(value);
+    } else {
+      ip6Fields.push(value);
+    }
+    value = '';
+  } else {
+    /* With no stashed value, the address must end with '::'. */
+    if (expIndex !== ip6Fields.length || ip4Fields.length > 0) {
+      throw new ParseError(input, 'Cannot end with delimiter besides ::');
+    }
+  }
+
+  /* With values collected, ensure we don't have too many/few */
+  if (ip4Fields.length === 0) {
+    if (ip6Fields.length > 8) {
+      throw new ParseError(input, 'Too many fields');
+    } else if (ip6Fields.length < 8 && expIndex === null) {
+      throw new ParseError(input, 'Too few fields');
+    }
+  } else {
+    if (ip4Fields.length !== 4) {
+      throw new ParseError(input, 'IPv4 portion must have 4 fields');
+    }
+    /* If this is a bare IP address, implicitly convert to IPv4 mapped */
+    if (ip6Fields.length === 0 && expIndex === null) {
+      result._attrs.ipv4Bare = true;
+      ip6Fields = ['ffff'];
+      expIndex = 0;
+    }
+
+    if (ip6Fields.length > 6) {
+      throw new ParseError(input, 'Too many fields');
+    } else if (ip6Fields.length < 6 && expIndex === null) {
+      throw new ParseError(input, 'Too few fields');
+    }
+  }
+
+  /* Parse integer values */
+  var field, num;
+  for (i = 0; i < ip6Fields.length; i++) {
+    field = ip6Fields[i];
+    num = Number('0x' + field);
+    if (isNaN(num) || num < 0 || num > 65535) {
+      throw new ParseError(input, 'Invalid field value: ' + field);
+    }
+    ip6Fields[i] = num;
+  }
+  for (i = 0; i < ip4Fields.length; i++) {
+    field = ip4Fields[i];
+    num = Number(field);
+    if (parseInt(field, 10) !== num || num < 0 || num > 255) {
+      throw new ParseError(input, 'Invalid field value: ' + field);
+    }
+    ip4Fields[i] = num;
+  }
+
+  /* Collapse IPv4 portion, if necessary */
+  if (ip4Fields.length !== 0) {
+    ip6Fields.push((ip4Fields[0]*256) + ip4Fields[1]);
+    ip6Fields.push((ip4Fields[2]*256) + ip4Fields[3]);
+  }
+
+  /* Expand '::' delimiter into implied 0s */
+  if (ip6Fields.length < 8 && expIndex !== null) {
+    var filler = [];
+    for (i = 0; i < (8 - ip6Fields.length); i++) {
+      filler.push(0);
+    }
+    ip6Fields = Array.prototype.concat(
+      ip6Fields.slice(0, expIndex),
+      filler,
+      ip6Fields.slice(expIndex)
+    );
+  }
+
+  /*
+   * If dotted-quad notation was used, ensure the input was either a bare ipv4
+   * address or a valid ipv4-mapped address.
+   */
+  if (ip4Fields.length !== 0) {
+    if (!_ipv4Mapped(ip6Fields)) {
+      throw new ParseError(input, 'invalid dotted-quad notation');
+    } else {
+      result._attrs.ipv4Mapped = true;
+    }
+  }
+
+  result._fields = ip6Fields;
+
+  return result;
+}
+
+function parseLong(input) {
+  assert.number(input);
+  if (input !== Math.floor(input)) {
+    throw new Error('Value must be integer');
+  }
+  if (input < 0 || input > 0xffffffff) {
+    throw new Error('Value must be 32 bit');
+  }
+  var out = new Addr();
+  out._fields[7] = input & 0xffff;
+  out._fields[6] = (input >>> 16);
+  /* this is ipv4-mapped */
+  out._fields[5] = 0xffff;
+  out._attrs.ipv4Bare = true;
+  out._attrs.ipv4Mapped = true;
+  return out;
+}
+
+/**
+ * Compare Addr objects in a manner suitable for Array.sort().
+ */
+function ip6addrCompare(a, b) {
+  a = _toAddr(a);
+  b = _toAddr(b);
+
+  var i;
+  for (i = 0; i < 8; i++) {
+    if (a._fields[i] < b._fields[i]) {
+      return -1;
+    } else if (a._fields[i] > b._fields[i]) {
+      return 1;
+    }
+  }
+  return 0;
+}
+
+
+///--- Exports
+
+module.exports = {
+  parse: ip6addrParse,
+  compare: ip6addrCompare,
+  createCIDR: function (addr, len) {
+    return new CIDR(addr, len);
+  },
+  compareCIDR: ip6cidrCompare,
+  createAddrRange: function (begin, end) {
+    return new AddrRange(begin, end);
+  }
+};
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/assert.js b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/assert.js
new file mode 100644
index 00000000..ff2ba02d
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/assert.js
@@ -0,0 +1,245 @@
+// Copyright (c) 2012, Mark Cavage. All rights reserved.
+
+var assert = require('assert');
+var Stream = require('stream').Stream;
+var util = require('util');
+
+
+
+///--- Globals
+
+var NDEBUG = process.env.NODE_NDEBUG || false;
+var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
+
+
+
+///--- Messages
+
+var ARRAY_TYPE_REQUIRED = '%s ([%s]) required';
+var TYPE_REQUIRED = '%s (%s) is required';
+
+
+
+///--- Internal
+
+function capitalize(str) {
+        return (str.charAt(0).toUpperCase() + str.slice(1));
+}
+
+function uncapitalize(str) {
+        return (str.charAt(0).toLowerCase() + str.slice(1));
+}
+
+function _() {
+        return (util.format.apply(util, arguments));
+}
+
+
+function _assert(arg, type, name, stackFunc) {
+        if (!NDEBUG) {
+                name = name || type;
+                stackFunc = stackFunc || _assert.caller;
+                var t = typeof (arg);
+
+                if (t !== type) {
+                        throw new assert.AssertionError({
+                                message: _(TYPE_REQUIRED, name, type),
+                                actual: t,
+                                expected: type,
+                                operator: '===',
+                                stackStartFunction: stackFunc
+                        });
+                }
+        }
+}
+
+
+function _instanceof(arg, type, name, stackFunc) {
+        if (!NDEBUG) {
+                name = name || type;
+                stackFunc = stackFunc || _instanceof.caller;
+
+                if (!(arg instanceof type)) {
+                        throw new assert.AssertionError({
+                                message: _(TYPE_REQUIRED, name, type.name),
+                                actual: _getClass(arg),
+                                expected: type.name,
+                                operator: 'instanceof',
+                                stackStartFunction: stackFunc
+                        });
+                }
+        }
+}
+
+function _getClass(object) {
+        return (Object.prototype.toString.call(object).slice(8, -1));
+};
+
+
+
+///--- API
+
+function array(arr, type, name) {
+        if (!NDEBUG) {
+                name = name || type;
+
+                if (!Array.isArray(arr)) {
+                        throw new assert.AssertionError({
+                                message: _(ARRAY_TYPE_REQUIRED, name, type),
+                                actual: typeof (arr),
+                                expected: 'array',
+                                operator: 'Array.isArray',
+                                stackStartFunction: array.caller
+                        });
+                }
+
+                for (var i = 0; i < arr.length; i++) {
+                        _assert(arr[i], type, name, array);
+                }
+        }
+}
+
+
+function bool(arg, name) {
+        _assert(arg, 'boolean', name, bool);
+}
+
+
+function buffer(arg, name) {
+        if (!Buffer.isBuffer(arg)) {
+                throw new assert.AssertionError({
+                        message: _(TYPE_REQUIRED, name || '', 'Buffer'),
+                        actual: typeof (arg),
+                        expected: 'buffer',
+                        operator: 'Buffer.isBuffer',
+                        stackStartFunction: buffer
+                });
+        }
+}
+
+
+function func(arg, name) {
+        _assert(arg, 'function', name);
+}
+
+
+function number(arg, name) {
+        _assert(arg, 'number', name);
+        if (!NDEBUG && (isNaN(arg) || !isFinite(arg))) {
+                throw new assert.AssertionError({
+                        message: _(TYPE_REQUIRED, name, 'number'),
+                        actual: arg,
+                        expected: 'number',
+                        operator: 'isNaN',
+                        stackStartFunction: number
+                });
+        }
+}
+
+
+function object(arg, name) {
+        _assert(arg, 'object', name);
+}
+
+
+function stream(arg, name) {
+        _instanceof(arg, Stream, name);
+}
+
+
+function date(arg, name) {
+        _instanceof(arg, Date, name);
+}
+
+function regexp(arg, name) {
+        _instanceof(arg, RegExp, name);
+}
+
+
+function string(arg, name) {
+        _assert(arg, 'string', name);
+}
+
+
+function uuid(arg, name) {
+        string(arg, name);
+        if (!NDEBUG && !UUID_REGEXP.test(arg)) {
+                throw new assert.AssertionError({
+                        message: _(TYPE_REQUIRED, name, 'uuid'),
+                        actual: 'string',
+                        expected: 'uuid',
+                        operator: 'test',
+                        stackStartFunction: uuid
+                });
+        }
+}
+
+
+///--- Exports
+
+module.exports = {
+        bool: bool,
+        buffer: buffer,
+        date: date,
+        func: func,
+        number: number,
+        object: object,
+        regexp: regexp,
+        stream: stream,
+        string: string,
+        uuid: uuid
+};
+
+
+Object.keys(module.exports).forEach(function (k) {
+        if (k === 'buffer')
+                return;
+
+        var name = 'arrayOf' + capitalize(k);
+
+        if (k === 'bool')
+                k = 'boolean';
+        if (k === 'func')
+                k = 'function';
+        module.exports[name] = function (arg, name) {
+                array(arg, k, name);
+        };
+});
+
+Object.keys(module.exports).forEach(function (k) {
+        var _name = 'optional' + capitalize(k);
+        var s = uncapitalize(k.replace('arrayOf', ''));
+        if (s === 'bool')
+                s = 'boolean';
+        if (s === 'func')
+                s = 'function';
+
+        if (k.indexOf('arrayOf') !== -1) {
+          module.exports[_name] = function (arg, name) {
+                  if (!NDEBUG && arg !== undefined) {
+                          array(arg, s, name);
+                  }
+          };
+        } else {
+          module.exports[_name] = function (arg, name) {
+                  if (!NDEBUG && arg !== undefined) {
+                          _assert(arg, s, name);
+                  }
+          };
+        }
+});
+
+
+// Reexport built-in assertions
+Object.keys(assert).forEach(function (k) {
+        if (k === 'AssertionError') {
+                module.exports[k] = assert[k];
+                return;
+        }
+
+        module.exports[k] = function () {
+                if (!NDEBUG) {
+                        assert[k].apply(assert[k], arguments);
+                }
+        };
+});
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/package.json b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/package.json
new file mode 100644
index 00000000..562e38af
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/assert-plus/package.json
@@ -0,0 +1,28 @@
+{
+  "author": {
+    "name": "Mark Cavage",
+    "email": "mcavage@gmail.com"
+  },
+  "name": "assert-plus",
+  "description": "Extra assertions on top of node's assert module",
+  "version": "0.1.5",
+  "main": "./assert.js",
+  "devDependencies": {},
+  "optionalDependencies": {},
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/mcavage/node-assert-plus.git"
+  },
+  "engines": {
+    "node": ">=0.8"
+  },
+  "readme": "# node-assert-plus\n\nThis library is a super small wrapper over node's assert module that has two\nthings: (1) the ability to disable assertions with the environment variable\nNODE_NDEBUG, and (2) some API wrappers for argument testing.  Like\n`assert.string(myArg, 'myArg')`.  As a simple example, most of my code looks\nlike this:\n\n    var assert = require('assert-plus');\n\n    function fooAccount(options, callback) {\n\t    assert.object(options, 'options');\n\t\tassert.number(options.id, 'options.id);\n\t\tassert.bool(options.isManager, 'options.isManager');\n\t\tassert.string(options.name, 'options.name');\n\t\tassert.arrayOfString(options.email, 'options.email');\n\t\tassert.func(callback, 'callback');\n\n        // Do stuff\n\t\tcallback(null, {});\n    }\n\n# API\n\nAll methods that *aren't* part of node's core assert API are simply assumed to\ntake an argument, and then a string 'name' that's not a message; `AssertionError`\nwill be thrown if the assertion fails with a message like:\n\n    AssertionError: foo (string) is required\n\tat test (/home/mark/work/foo/foo.js:3:9)\n\tat Object.<anonymous> (/home/mark/work/foo/foo.js:15:1)\n\tat Module._compile (module.js:446:26)\n\tat Object..js (module.js:464:10)\n\tat Module.load (module.js:353:31)\n\tat Function._load (module.js:311:12)\n\tat Array.0 (module.js:484:10)\n\tat EventEmitter._tickCallback (node.js:190:38)\n\nfrom:\n\n    function test(foo) {\n\t    assert.string(foo, 'foo');\n    }\n\nThere you go.  You can check that arrays are of a homogenous type with `Arrayof$Type`:\n\n    function test(foo) {\n\t    assert.arrayOfString(foo, 'foo');\n    }\n\nYou can assert IFF an argument is not `undefined` (i.e., an optional arg):\n\n    assert.optionalString(foo, 'foo');\n\nLastly, you can opt-out of assertion checking altogether by setting the\nenvironment variable `NODE_NDEBUG=1`.  This is pseudo-useful if you have\nlots of assertions, and don't want to pay `typeof ()` taxes to v8 in\nproduction.\n\nThe complete list of APIs is:\n\n* assert.bool\n* assert.buffer\n* assert.func\n* assert.number\n* assert.object\n* assert.string\n* assert.arrayOfBool\n* assert.arrayOfFunc\n* assert.arrayOfNumber\n* assert.arrayOfObject\n* assert.arrayOfString\n* assert.optionalBool\n* assert.optionalBuffer\n* assert.optionalFunc\n* assert.optionalNumber\n* assert.optionalObject\n* assert.optionalString\n* assert.optionalArrayOfBool\n* assert.optionalArrayOfFunc\n* assert.optionalArrayOfNumber\n* assert.optionalArrayOfObject\n* assert.optionalArrayOfString\n* assert.AssertionError\n* assert.fail\n* assert.ok\n* assert.equal\n* assert.notEqual\n* assert.deepEqual\n* assert.notDeepEqual\n* assert.strictEqual\n* assert.notStrictEqual\n* assert.throws\n* assert.doesNotThrow\n* assert.ifError\n\n# Installation\n\n    npm install assert-plus\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Mark Cavage\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## Bugs\n\nSee <https://github.com/mcavage/node-assert-plus/issues>.\n",
+  "readmeFilename": "README.md",
+  "bugs": {
+    "url": "https://github.com/mcavage/node-assert-plus/issues"
+  },
+  "homepage": "https://github.com/mcavage/node-assert-plus#readme",
+  "dependencies": {},
+  "_id": "assert-plus@0.1.5",
+  "_from": "assert-plus@0.1.5"
+}
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/LICENSE b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/LICENSE
new file mode 100644
index 00000000..cc3c87bc
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/LICENSE
@@ -0,0 +1,18 @@
+Copyright © 2011-2015 Paul Vorbach <paul@vorba.ch>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the “Software”), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/clone.js b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/clone.js
new file mode 100644
index 00000000..245d78d4
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/clone.js
@@ -0,0 +1,162 @@
+'use strict';
+
+var clone = (function(global) {
+
+/**
+ * Clones (copies) an Object using deep copying.
+ *
+ * This function supports circular references by default, but if you are certain
+ * there are no circular references in your object, you can save some CPU time
+ * by calling clone(obj, false).
+ *
+ * Caution: if `circular` is false and `parent` contains circular references,
+ * your program may enter an infinite loop and crash.
+ *
+ * @param `parent` - the object to be cloned
+ * @param `circular` - set to true if the object to be cloned may contain
+ *    circular references. (optional - true by default)
+ * @param `depth` - set to a number if the object is only to be cloned to
+ *    a particular depth. (optional - defaults to Infinity)
+ * @param `prototype` - sets the prototype to be used when cloning an object.
+ *    (optional - defaults to parent prototype).
+*/
+
+function clone(parent, circular, depth, prototype) {
+  var filter;
+  if (typeof circular === 'object') {
+    depth = circular.depth;
+    prototype = circular.prototype;
+    filter = circular.filter;
+    circular = circular.circular
+  }
+  // maintain two arrays for circular references, where corresponding parents
+  // and children have the same index
+  var allParents = [];
+  var allChildren = [];
+
+  var useBuffer = typeof Buffer != 'undefined';
+
+  if (typeof circular == 'undefined')
+    circular = true;
+
+  if (typeof depth == 'undefined')
+    depth = Infinity;
+
+  // recurse this function so we don't reset allParents and allChildren
+  function _clone(parent, depth) {
+    // cloning null always returns null
+    if (parent === null)
+      return null;
+
+    if (depth == 0)
+      return parent;
+
+    var child;
+    var proto;
+    if (typeof parent != 'object') {
+      return parent;
+    }
+
+    if (isArray(parent)) {
+      child = [];
+    } else if (isRegExp(parent)) {
+      child = new RegExp(parent.source, clone.getRegExpFlags(parent));
+      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
+    } else if (isDate(parent)) {
+      child = new Date(parent.getTime());
+    } else if (useBuffer && Buffer.isBuffer(parent)) {
+      child = new Buffer(parent.length);
+      parent.copy(child);
+      return child;
+    } else {
+      if (typeof prototype == 'undefined') {
+        proto = Object.getPrototypeOf(parent);
+        child = Object.create(proto);
+      }
+      else {
+        child = Object.create(prototype);
+        proto = prototype;
+      }
+    }
+
+    if (circular) {
+      var index = allParents.indexOf(parent);
+
+      if (index != -1) {
+        return allChildren[index];
+      }
+      allParents.push(parent);
+      allChildren.push(child);
+    }
+
+    for (var i in parent) {
+      var attrs;
+      if (proto) {
+        attrs = Object.getOwnPropertyDescriptor(proto, i);
+      }
+      
+      if (attrs && attrs.set == null) {
+        continue;
+      }
+      child[i] = _clone(parent[i], depth - 1);
+    }
+
+    return child;
+  }
+
+  return _clone(parent, depth);
+}
+
+/**
+ * Simple flat clone using prototype, accepts only objects, usefull for property
+ * override on FLAT configuration object (no nested props).
+ *
+ * USE WITH CAUTION! This may not behave as you wish if you do not know how this
+ * works.
+ */
+clone.clonePrototype = function(parent) {
+  if (parent === null)
+    return null;
+
+  var c = function () {};
+  c.prototype = parent;
+  return new c();
+};
+
+function getRegExpFlags(re) {
+  var flags = '';
+  re.global && (flags += 'g');
+  re.ignoreCase && (flags += 'i');
+  re.multiline && (flags += 'm');
+  return flags;
+}
+
+function objectToString(o) {
+  return Object.prototype.toString.call(o);
+}
+
+function isDate(o) {
+  return typeof o === 'object' && objectToString(o) === '[object Date]';
+}
+
+function isArray(o) {
+  return typeof o === 'object' && objectToString(o) === '[object Array]';
+}
+
+function isRegExp(o) {
+  return typeof o === 'object' && objectToString(o) === '[object RegExp]';
+}
+
+if (global.TESTING) clone.getRegExpFlags = getRegExpFlags;
+if (global.TESTING) clone.objectToString = objectToString;
+if (global.TESTING) clone.isDate   = isDate;
+if (global.TESTING) clone.isArray  = isArray;
+if (global.TESTING) clone.isRegExp = isRegExp;
+
+return clone;
+
+})( typeof(global) === 'object' ? global :
+    typeof(window) === 'object' ? window : this);
+
+if (module && module.exports)
+  module.exports = clone;
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/package.json b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/package.json
new file mode 100644
index 00000000..a51902e6
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/node_modules/clone/package.json
@@ -0,0 +1,136 @@
+{
+  "name": "clone",
+  "description": "deep cloning of objects and arrays",
+  "tags": [
+    "clone",
+    "object",
+    "array",
+    "function",
+    "date"
+  ],
+  "version": "1.0.0",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/pvorb/node-clone.git"
+  },
+  "bugs": {
+    "url": "https://github.com/pvorb/node-clone/issues"
+  },
+  "main": "clone.js",
+  "author": {
+    "name": "Paul Vorbach",
+    "email": "paul@vorba.ch",
+    "url": "http://paul.vorba.ch/"
+  },
+  "contributors": [
+    {
+      "name": "Blake Miner",
+      "email": "miner.blake@gmail.com",
+      "url": "http://www.blakeminer.com/"
+    },
+    {
+      "name": "Tian You",
+      "email": "axqd001@gmail.com",
+      "url": "http://blog.axqd.net/"
+    },
+    {
+      "name": "George Stagas",
+      "email": "gstagas@gmail.com",
+      "url": "http://stagas.com/"
+    },
+    {
+      "name": "Tobiasz Cudnik",
+      "email": "tobiasz.cudnik@gmail.com",
+      "url": "https://github.com/TobiaszCudnik"
+    },
+    {
+      "name": "Pavel Lang",
+      "email": "langpavel@phpskelet.org",
+      "url": "https://github.com/langpavel"
+    },
+    {
+      "name": "Dan MacTough",
+      "url": "http://yabfog.com/"
+    },
+    {
+      "name": "w1nk",
+      "url": "https://github.com/w1nk"
+    },
+    {
+      "name": "Hugh Kennedy",
+      "url": "http://twitter.com/hughskennedy"
+    },
+    {
+      "name": "Dustin Diaz",
+      "url": "http://dustindiaz.com"
+    },
+    {
+      "name": "Ilya Shaisultanov",
+      "url": "https://github.com/diversario"
+    },
+    {
+      "name": "Nathan MacInnes",
+      "email": "nathan@macinn.es",
+      "url": "http://macinn.es/"
+    },
+    {
+      "name": "Benjamin E. Coe",
+      "email": "ben@npmjs.com",
+      "url": "https://twitter.com/benjamincoe"
+    },
+    {
+      "name": "Nathan Zadoks",
+      "url": "https://github.com/nathan7"
+    },
+    {
+      "name": "Róbert Oroszi",
+      "email": "robert+gh@oroszi.net",
+      "url": "https://github.com/oroce"
+    },
+    {
+      "name": "Aurélio A. Heckert",
+      "url": "http://softwarelivre.org/aurium"
+    },
+    {
+      "name": "Guy Ellis",
+      "url": "http://www.guyellisrocks.com/"
+    }
+  ],
+  "license": "MIT",
+  "engines": {
+    "node": "*"
+  },
+  "dependencies": {},
+  "devDependencies": {
+    "underscore": "*",
+    "nodeunit": "^0.9"
+  },
+  "optionalDependencies": {},
+  "scripts": {
+    "test": "nodeunit test.js"
+  },
+  "gitHead": "abcb3403f572cd0694dae0e060bd272e265852b3",
+  "homepage": "https://github.com/pvorb/node-clone",
+  "_id": "clone@1.0.0",
+  "_shasum": "bde24f2ee7c478a409fc8a118ae2fcd44deb7f9e",
+  "_from": "clone@1.0.0",
+  "_npmVersion": "1.4.14",
+  "_npmUser": {
+    "name": "pvorb",
+    "email": "paul@vorba.ch"
+  },
+  "maintainers": [
+    {
+      "name": "pvorb",
+      "email": "paul@vorb.de"
+    }
+  ],
+  "dist": {
+    "shasum": "bde24f2ee7c478a409fc8a118ae2fcd44deb7f9e",
+    "tarball": "https://registry.npmjs.org/clone/-/clone-1.0.0.tgz"
+  },
+  "directories": {},
+  "deprecated": "XSS vulnerability fixed in v1.0.3",
+  "_resolved": "https://registry.npmjs.org/clone/-/clone-1.0.0.tgz",
+  "readme": "ERROR: No README data found!"
+}
diff --git a/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/package.json b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/package.json
new file mode 100644
index 00000000..22cba853
--- /dev/null
+++ b/src/vm/node_modules/triton-netconfig/node_modules/ip6addr/package.json
@@ -0,0 +1,55 @@
+{
+  "name": "ip6addr",
+  "version": "0.2.0",
+  "description": "IPv6/IPv4 address parsing and manipulation",
+  "repository": {
+    "type": "git",
+    "url": "git://github.com/joyent/node-ip6addr.git"
+  },
+  "main": "ip6addr.js",
+  "dependencies": {
+    "clone": "1.0.0",
+    "assert-plus": "0.1.5"
+  },
+  "devDependencies": {
+    "istanbul": "^0.3.6",
+    "tape": "^3.5.0"
+  },
+  "scripts": {
+    "test": "istanbul cover --print none test/runall.js"
+  },
+  "author": {
+    "name": "Joyent",
+    "url": "joyent.com"
+  },
+  "license": "MPL-2",
+  "bugs": {
+    "url": "https://github.com/joyent/node-ip6addr/issues"
+  },
+  "homepage": "https://github.com/joyent/node-ip6addr#readme",
+  "_id": "ip6addr@0.2.0",
+  "_shasum": "76226c88e6db6f9d1e6c448067a661b5e1ee1e32",
+  "_resolved": "https://registry.npmjs.org/ip6addr/-/ip6addr-0.2.0.tgz",
+  "_from": "ip6addr@0.2.0",
+  "_npmVersion": "3.3.9",
+  "_nodeVersion": "0.10.40",
+  "_npmUser": {
+    "name": "pfmooney",
+    "email": "patrick.f.mooney@gmail.com"
+  },
+  "maintainers": [
+    {
+      "name": "pfmooney",
+      "email": "patrick.f.mooney@gmail.com"
+    }
+  ],
+  "dist": {
+    "shasum": "76226c88e6db6f9d1e6c448067a661b5e1ee1e32",
+    "tarball": "https://registry.npmjs.org/ip6addr/-/ip6addr-0.2.0.tgz"
+  },
+  "_npmOperationalInternal": {
+    "host": "packages-12-west.internal.npmjs.com",
+    "tmp": "tmp/ip6addr-0.2.0.tgz_1468438221723_0.5148740254808217"
+  },
+  "directories": {}
+}
diff --git a/src/vm/node_modules/triton-netconfig/package.json b/src/vm/node_modules/triton-netconfig/package.json
index 091e9708..b1175637 100644
--- a/src/vm/node_modules/triton-netconfig/package.json
+++ b/src/vm/node_modules/triton-netconfig/package.json
@@ -1,6 +1,6 @@
 {
   "name": "triton-netconfig",
-  "version": "1.0.0",
+  "version": "1.2.0",
   "description": "Common methods for managing Triton network configuration",
   "repository": {
     "type": "git",
@@ -20,6 +20,9 @@
   ],
   "homepage": "https://github.com/joyent/node-triton-netconfig",
   "main": "./lib",
+  "dependencies": {
+    "ip6addr": "0.2.0"
+  },
   "devDependencies": {
     "eslint": "4.13.1",
     "eslint-config-prettier": "^2.9.0",
@@ -29,27 +32,24 @@
     "prettier": "^1.11.1",
     "tap": "^12.0.1"
   },
-  "gitHead": "1d45a1987073ad1e96a490993cefdfec7088c1c3",
+  "gitHead": "879f7d54dd042a8af8ca950a3c907caf1a3c8361",
   "bugs": {
     "url": "https://github.com/joyent/node-triton-netconfig/issues"
   },
-  "_id": "triton-netconfig@1.0.0",
-  "scripts": {},
-  "_shasum": "4e62b45daf52031b8a29a7dded54adb41a7ea1f8",
-  "_from": "triton-netconfig@1.0.0",
-  "_npmVersion": "3.6.0",
-  "_nodeVersion": "5.6.0",
+  "_id": "triton-netconfig@1.2.0",
+  "_npmVersion": "6.4.1",
+  "_nodeVersion": "8.3.0",
   "_npmUser": {
     "name": "rjloura",
     "email": "rjloura@gmail.com"
   },
   "dist": {
-    "shasum": "4e62b45daf52031b8a29a7dded54adb41a7ea1f8",
-    "tarball": "https://registry.npmjs.org/triton-netconfig/-/triton-netconfig-1.0.0.tgz",
-    "integrity": "sha512-Igz2Wf8Q04jEwAh6iWi1f9cxuMVXll+ZYxxqkS4h7YpMWMfxSL3w4ZJ1H1eqklYHrUGX6eslOF0bpVMd4NwRAg==",
+    "integrity": "sha512-+qsP52LupSF1TseKBOebAt6NDUK/xaVc3fulQ9CR/hdE+gEnq82BNTw/0S0s/YBhFjixKhvYcqk2wDWuse3/wQ==",
+    "shasum": "d1966cb4044741f96fad2bca2a6ec19dc6a3f18b",
+    "tarball": "https://registry.npmjs.org/triton-netconfig/-/triton-netconfig-1.2.0.tgz",
     "fileCount": 5,
-    "unpackedSize": 23980,
-    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEr9ZCRA9TVsSAnZWagAAOYgQAKC+UfAoKZAPDqa/O8vE\neqtLlyuacdnePO5DHym9boSuosJ20uPtqSJ/6TaQGlMyVa3yVIoDvZ9Ve5Ot\nN2uJvw2uzS8WeoVXEGBqq1fx/7zuelx03SV3fiioFAhz8PLEI4Ta2hmBsEnv\nxCsNNuAjNBywHXoE8AIv7krOetij0tW4b+fparUYUN8qLfKaxFAZiqgQX2Wc\nx9oH8pX1Xor0hNf+oDo8ZuqQ471T5ln188nFX/z0LQKR2wr2z/eR9CmeyeNW\nCVieSdkdlBr0Qi3LB3RPJI2c86JVK4QHny1/35WEIz1qNeI7JEYXM+FeeOEv\nlSBycxlrmO63xXxAWGSQEgSGjtqOH5AdFyfGbP0QwDeAVvc2xZoAT8pm7rNa\narAB6VHCAoGEnXWVxyknlJwQUqLY0MkoyOtN/raso+/nd6LKKEJj2vmIHUNW\nCWGKHOdaJEvlzl+TXY/3Hny8LYfkXIXHvx+/uXNyvlkgH4quM+vt8XzdP0pH\nYpx/ajSLLFUK2GXXFgXkO5YtrLVDie1v3fhdv6ttT6r36igFRP59lgRVnEXA\nvI+unyf71n4YtWQxaKt6OxKq2YmQnk9pNP9Sg+jPo0FZ3IqlS/Q2tWKA0OlK\nz+6mMNxtjSNWZTRsPuq5g4t72BSe0nubU1h5AK7/7DOnZzk8ZNjRUDsrEsPE\nz+Rv\r\n=y7oj\r\n-----END PGP SIGNATURE-----\r\n"
+    "unpackedSize": 24903,
+    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcS3hvCRA9TVsSAnZWagAAi3UQAJPp9k8VDmXJ0p9tawBR\nVrPjOoDEicfmv5BSYXiJpajD7OvPZ6oRy/dqkPZugoBOhKE5fGYXkXwRSqTD\nI5O/UQEPJMlGMmNJIPmOh/5x7LN+hZbv4v72I6ZeA1xCJF8PXS5piKWgHh6z\nHS0kFqwgGQL6T26r/6B3FSYGqFVwbswT+/D5EFAKQ20NawXSOEHSqc7fX87h\ne68lJebxOXjEld8y5U3C29AVmUHBrZDHJGbpMM0W5jiLkNFswNqiQtjI2SEx\nEZSGm6NTIfl3kxVbTefy/7ZjgO8TDsJMwbSCCZAOMOpfiuI+eFv/BvYz/r3z\netXX20Hf9A5ZqF0BVaHtlq6rnTVqpPH8ZkU62HSA6XR0yrsskZqp5kTOJV1T\n27QgGLmnIF4od/DPNTRrQFjnU4LgySpBfuhtTKienRGjoPyBRh12sDJnuLya\n+nKEWqSrA50rEW/YRL8/rsVKUdAPMAQfiI50okMnnKDm3LGCBXcmzh8+mriv\nCBHSGMgw+acn985qfUS1lHSWHl8rSuy7elJiWhOB2iKwc4E0pkjfopfED5TA\n/DZHLLWm4Ft6MVhATAi1fdjlTDis9kd+ySs0faYLMApPJPNJhyG6KIxvU/wJ\noq8juS4PpQYiImutY4DiBFVkAJpTKDUpsUPs35HkUotFJgQw24y7+ZiXO32t\nNszd\r\n=Mm6f\r\n-----END PGP SIGNATURE-----\r\n"
   },
   "maintainers": [
     {
@@ -60,9 +60,10 @@
   "directories": {},
   "_npmOperationalInternal": {
     "host": "s3://npm-registry-packages",
-    "tmp": "tmp/triton-netconfig_1.0.0_1544732505074_0.0610069998741094"
+    "tmp": "tmp/triton-netconfig_1.2.0_1548449903295_0.8641131824881798"
   },
   "_hasShrinkwrap": false,
-  "_resolved": "https://registry.npmjs.org/triton-netconfig/-/triton-netconfig-1.0.0.tgz",
-  "readme": "ERROR: No README data found!"
+  "_shasum": "d1966cb4044741f96fad2bca2a6ec19dc6a3f18b",
+  "_resolved": "https://registry.npmjs.org/triton-netconfig/-/triton-netconfig-1.2.0.tgz",
+  "_from": "triton-netconfig@1.2.0"
 }
diff --git a/src/vm/package.json b/src/vm/package.json
index 2e1234aa..bf607ab1 100644
--- a/src/vm/package.json
+++ b/src/vm/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmadm",
   "description": "administrative tool(s) for managing VMs",
-  "version": "1.0.1",
+  "version": "1.0.2",
   "author": "Joyent (joyent.com)",
   "private": true,
   "devDependencies": {
@@ -9,7 +9,7 @@
   "dependencies": {
     "nodeunit-plus": "0.0.1",
     "nodeunit": "0.8.4",
-    "triton-netconfig": "1.0.0"
+    "triton-netconfig": "1.2.0"
   },
   "scripts": {
     "postinstall": "rm -rf node_modules/nodeunit-plus/node_modules/bunyan"
