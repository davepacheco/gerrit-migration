commit 7466916649919244085a28868864bd1fe0b4c3e1 (refs/changes/12/4412/4)
Author: Robert Mustacchi <rm@joyent.com>
Date:   2018-07-17T18:11:30+00:00 (1 year, 3 months ago)
    
    OS-7042 illumos-extra should support building optional, extra gcc versions
    Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com>
    Reviewed by: Patrick Mooney <patrick.mooney@joyent.com>
    Approved by: Jerry Jelinek <jerry.jelinek@joyent.com>

diff --git a/Makefile b/Makefile
index 165f999..008dd40 100644
--- a/Makefile
+++ b/Makefile
@@ -10,7 +10,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -34,6 +34,12 @@ SUBDIRS = \
 	nss-nspr \
 	openssl1x \
 	perl
+
+ifeq ($(BUILD_EXTRA_GCC),yes)
+SUBDIRS +=	gcc6
+STRAPFIX +=	gcc6
+STRAPFIX_SUBDIRS=$(STRAPFIX:%=%.strapfix)
+endif
 else
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
 SUBDIRS = \
@@ -77,7 +83,6 @@ SUBDIRS = \
 	vim \
 	wget \
 	xz
-
 endif
 
 PATH =		$(STRAPPROTO)/usr/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin
@@ -133,13 +138,41 @@ openssh: openssl1x
 # gets appended.
 #
 
+
 $(DESTDIR)/usr/gnu/bin/gas: FRC
 	(cd binutils && \
 	    PKG_CONFIG_LIBDIR="" \
 	    STRAP=$(STRAP) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install)
 
+#
+# gcc lives in a different prefix when building the bootstrap, but not
+# gas.
+#
+ifeq ($(STRAP),strap)
+$(DESTDIR)/usr/gcc/4/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
+	(cd gcc4 && \
+	    PKG_CONFIG_LIBDIR="" \
+	    STRAP=$(STRAP) \
+	    $(MAKE) DESTDIR=$(DESTDIR) install strapfix)
 
+$(SUBDIRS): $(DESTDIR)/usr/gcc/4/bin/gcc
+	(cd $@ && \
+	    PKG_CONFIG_LIBDIR="" \
+	    STRAP=$(STRAP) \
+	    CTFMERGE=$(CTFMERGE) \
+	    CTFCONVERT=$(CTFCONVERT) \
+	    ALTCTFCONVERT=$(ALTCTFCONVERT) \
+	    NATIVE_PERL=$(NATIVE_PERL) \
+	    $(MAKE) DESTDIR=$(DESTDIR) install)
+
+$(STRAPFIX_SUBDIRS): $(SUBDIRS)
+	(cd $$(basename $@ .strapfix) && \
+	    PKG_CONFIG_LIBDIR="" \
+	    STRAP=$(STRAP) \
+	    $(MAKE) DESTDIR=$(DESTDIR) strapfix)
+
+else
 $(DESTDIR)/usr/bin/gcc: $(DESTDIR)/usr/gnu/bin/gas
 	(cd gcc4 && \
 	    PKG_CONFIG_LIBDIR="" \
@@ -155,10 +188,14 @@ $(SUBDIRS): $(DESTDIR)/usr/bin/gcc
 	    ALTCTFCONVERT=$(ALTCTFCONVERT) \
 	    NATIVE_PERL=$(NATIVE_PERL) \
 	    $(MAKE) DESTDIR=$(DESTDIR) install)
+endif
+
 
 install: $(SUBDIRS) gcc4 binutils
 
-install_strap: $(SUBDIRS) gcc4 binutils
+fixup_strap: $(STRAPFIX_SUBDIRS)
+
+install_strap: $(SUBDIRS) gcc4 binutils fixup_strap
 
 clean:
 	-for dir in $(SUBDIRS) gcc4 binutils; \
diff --git a/Makefile.defs b/Makefile.defs
index 91b61ee..231e99c 100644
--- a/Makefile.defs
+++ b/Makefile.defs
@@ -10,7 +10,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 BASE =		$(PWD)
@@ -22,10 +22,16 @@ OBJ.64 =	$(VER.64)$(SEPARATE_BUILD:yes=.build)
 CTF.32 =	ctfobjects-32$(STRAP)
 CTF.64 =	ctfobjects-64$(STRAP)
 
+FETCH_BASE =	https://us-east.manta.joyent.com/Joyent_Dev/public/illumos-extra
+
 ifeq ($(STRAP),strap)
 STRAPPROTO =	$(DESTDIR)
+GCC =		$(DESTDIR)/usr/gcc/4/bin/gcc
+GXX =		$(DESTDIR)/usr/gcc/4/bin/g++
 else
 STRAPPROTO =	$(DESTDIR:proto=proto.strap)
+GCC =		$(DESTDIR)/usr/bin/gcc
+GXX =		$(DESTDIR)/usr/bin/g++
 endif
 
 PATH =		$(STRAPPROTO)/usr/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin
@@ -34,8 +40,6 @@ MAKE =		gmake
 MAX_JOBS =	128
 PARALLEL =	-j$(MAX_JOBS)
 MAKE_VERBOSE =	V=1
-GCC =		$(DESTDIR)/usr/bin/gcc
-GXX =		$(DESTDIR)/usr/bin/g++
 GCC.64 =	$(GCC) -m64
 GXX.64 =	$(GXX) -m64
 
diff --git a/gcc4/Makefile b/gcc4/Makefile
index 51332c5..6fa7269 100644
--- a/gcc4/Makefile
+++ b/gcc4/Makefile
@@ -20,12 +20,13 @@
 #
 # Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
-# Copyright (c) 2013, Joyent, Inc.  All rights reserved.
+# Copyright (c) 2018, Joyent, Inc.  All rights reserved.
 #
 
 VER =	gcc-4.4.4
 MPFR_VER =	mpfr-3.1.2
 GMP_VER =	gmp-5.1.1
+PREFIX =	/usr/gcc/4
 
 include ../Makefile.defs
 
@@ -59,6 +60,13 @@ OVERRIDES += \
 #
 CLEANFILES += $(VER)-32.build $(VER)-32strap.build
 
+#
+# When building the strap code, it needs to exist in a different prefix.
+#
+ifeq ($(STRAP),strap)
+AUTOCONF_PREFIX = $(PREFIX)
+endif
+
 #
 # The runtime libraries that we build into proto.strap should be made to search
 # for their dependencies there as well, so that programs built to run on the
@@ -66,15 +74,15 @@ CLEANFILES += $(VER)-32.build $(VER)-32strap.build
 #
 ifeq ($(STRAP),strap)
 	STRAPFIX_LINKS= \
-		$(DESTDIR)/lib/64 \
-		$(DESTDIR)/usr/lib/64
+		$(DESTDIR)/$(PREFIX)/lib/64
 	STRAPFIX_FILES_32 = \
-		$(DESTDIR)/usr/lib/libgcc_s.so.1 \
-		$(DESTDIR)/usr/lib/libstdc++.so.6
+		$(DESTDIR)/$(PREFIX)/lib/libgcc_s.so.1 \
+		$(DESTDIR)/$(PREFIX)/lib/libstdc++.so.6
 	STRAPFIX_FILES_64 = \
-		$(DESTDIR)/usr/lib/64/libgcc_s.so.1 \
-		$(DESTDIR)/usr/lib/64/libstdc++.so.6
+		$(DESTDIR)/$(PREFIX)/lib/64/libgcc_s.so.1 \
+		$(DESTDIR)/$(PREFIX)/lib/64/libstdc++.so.6
 	STRAPFIX_FILES = $(STRAPFIX_FILES_32) $(STRAPFIX_FILES_64)
+	STRAPFIX_BINS = gcc g++ cpp
 endif
 
 #
@@ -82,7 +90,7 @@ endif
 # never runs on the target system, only the build system.  So it should not
 # be using the proto area's headers or libraries.  Its own libraries will be
 # built by the new compiler, and generally aren't using system headers anyway.
-# This is not really completely true; for example, libstdc++, and this will
+# This is not really completely true; for example, libstdc++.  This will
 # need more work to be really right.  We only deliver the libraries.
 #
 AUTOCONF_CPPFLAGS =
@@ -101,9 +109,9 @@ include ../Makefile.targ.autoconf
 # we do.  There are two main problems:
 #
 # 1. Stage2 and later cc1 and company don't honour any combination of LDFLAGS,
-# LDFLAGS_FOR_TARGET, BOOT_LDFLAGS, STAGE2_LDFLAGS, etc.  So the only ways to
-# get these things built with -R/opt/local/lib are to use LD_OPTIONS which will
-# yield the wrong results for libraries or to hack configure.
+# LDFLAGS_FOR_TARGET, BOOT_LDFLAGS, STAGE2_LDFLAGS, etc.  The only ways to
+# get these things built with -R/opt/local/lib are to use LD_OPTIONS, which will
+# yield the wrong results for libraries, or to hack configure.
 #
 # 2. Even if we could get -R/opt/local/lib into these programs without building
 # the libraries incorrectly, it would still be wrong.  The pkgsrc lib directory
@@ -111,7 +119,7 @@ include ../Makefile.targ.autoconf
 # compiler and should find the libgcc that matches that compiler.  That happens
 # to be the one we just built, not the pkgsrc one.
 #
-# So Instead we have mpfr and gmp built as part of the gcc build itself.
+# Instead we have mpfr and gmp built as part of the gcc build itself.
 #
 $(AUTOCONF_OUT.32): | $(VER.32)/mpfr $(VER.32)/gmp
 
@@ -137,15 +145,19 @@ $(VER.32)/gmp: $(GMP_VER).tar.bz2 | $(VER.32)
 strapfix: $(STRAPFIX_LINKS) $(STRAPFIX_FILES) | install
 	for f in $(STRAPFIX_FILES_32); do \
 		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/lib:$(DESTDIR)/usr/lib' \
+		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib' \
 		    $$f; \
 	done
 	for f in $(STRAPFIX_FILES_64); do \
 		/usr/bin/elfedit -e \
-		    'dyn:runpath $(DESTDIR)/lib/64:$(DESTDIR)/usr/lib/64' \
+		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib/64' \
 		    $$f; \
 	done
+	mkdir -p $(DESTDIR)/usr/bin
+	for f in $(STRAPFIX_BINS); do \
+		ln -sf $(DESTDIR)/$(PREFIX)/bin/$$f $(DESTDIR)/usr/bin/$$f; \
+	done
 
 $(STRAPFIX_LINKS):
 	mkdir -p `dirname $@`
-	ln -s amd64 $@
+	[[ -h $@ ]] || ln -s amd64 $@
diff --git a/gcc6/Makefile b/gcc6/Makefile
new file mode 100644
index 0000000..f543a40
--- /dev/null
+++ b/gcc6/Makefile
@@ -0,0 +1,173 @@
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+VER =		gcc-6.4.0
+MPFR_VER =	mpfr-3.1.6
+GMP_VER =	gmp-6.1.2
+MPC_VER =	mpc-1.0.3
+PREFIX =	/usr/gcc/6
+
+include ../Makefile.defs
+
+SEPARATE_BUILD =	yes
+
+GCC =	/opt/local/bin/gcc
+GXX =	/opt/local/bin/g++
+CFLAGS = -g -O2
+
+AUTOCONF_OPTS += \
+	--with-ld=/usr/bin/ld \
+	--without-gnu-ld \
+	--with-gnu-as \
+	--with-as=$(DESTDIR)/usr/gnu/bin/gas \
+	--enable-languages="c,c++" \
+	--enable-shared \
+	--disable-nls
+
+AUTOCONF_ENV += \
+	DESTDIR=$(DESTDIR) \
+	MAKE=$(MAKE)
+
+OVERRIDES += \
+	$(AUTOCONF_CFLAGS) \
+	STAGE1_CFLAGS="$(CFLAGS)" \
+	CFLAGS_FOR_TARGET="$(CFLAGS)"
+
+#
+# Because we use a different build directory, we need to make sure we
+# catch that when cleaning.
+#
+CLEANFILES += $(VER)-32.build $(VER)-32strap.build
+
+#
+# When building the strap code, it needs to exist in a different prefix.
+#
+ifeq ($(STRAP),strap)
+AUTOCONF_PREFIX = $(PREFIX)
+endif
+
+#
+# The runtime libraries that we build into proto.strap should be made to search
+# for their dependencies there as well, so that programs built to run on the
+# build machine (from proto.strap) find the correct copies of these libraries.
+#
+ifeq ($(STRAP),strap)
+	STRAPFIX_LINKS= \
+		$(DESTDIR)/$(PREFIX)/lib/64
+	STRAPFIX_FILES_32 = \
+		$(DESTDIR)/$(PREFIX)/lib/libgcc_s.so.1 \
+		$(DESTDIR)/$(PREFIX)/lib/libstdc++.so.6
+	STRAPFIX_FILES_64 = \
+		$(DESTDIR)/$(PREFIX)/lib/64/libgcc_s.so.1 \
+		$(DESTDIR)/$(PREFIX)/lib/64/libstdc++.so.6
+	STRAPFIX_FILES = $(STRAPFIX_FILES_32) $(STRAPFIX_FILES_64)
+endif
+
+#
+# Unlike everything else, gcc is built to be a cross-compiler, really.  It
+# never runs on the target system, only the build system.  So it should not
+# be using the proto area's headers or libraries.  Its own libraries will be
+# built by the new compiler, and generally aren't using system headers anyway.
+# This is not really completely true; for example, libstdc++.  This will
+# need more work to be really right.  We only deliver the libraries.
+#
+AUTOCONF_CPPFLAGS =
+AUTOCONF_LIBS =
+GENLDFLAGS =
+
+PATCHES =	Patches/*
+ALL_TGT =	bootstrap
+
+include ../Makefile.targ
+include ../Makefile.targ.autoconf
+
+#
+# To reduce repository size, the source files are stored in Manta and
+# need to be downloaded.
+#
+$(TARBALL) $(MPFR_VER).tar.bz2 $(GMP_VER).tar.bz2 $(MPC_VER).tar.gz:
+	if [[ ! -f $@.sha1 ]]; then \
+		echo "Missing required digest file!"; \
+		exit 1; \
+	fi; \
+	curl -o $@.tmp $(FETCH_BASE)/$@
+	digest -a sha1 $@.tmp > $@.tmp.sha1
+	cmp -s $@.sha1 $@.tmp.sha1
+	rm -f $@.tmp.sha1
+	mv $@.tmp $@
+
+#
+# We could use the mpfr and gmp from the build system (since the compiler will
+# be run here), but there's no good way to make gcc build itself correctly if
+# we do.  There are two main problems:
+#
+# 1. Stage2 and later cc1 and company don't honour any combination of LDFLAGS,
+# LDFLAGS_FOR_TARGET, BOOT_LDFLAGS, STAGE2_LDFLAGS, etc.  The only ways to
+# get these things built with -R/opt/local/lib are to use LD_OPTIONS, which will
+# yield the wrong results for libraries, or to hack configure.
+#
+# 2. Even if we could get -R/opt/local/lib into these programs without building
+# the libraries incorrectly, it would still be wrong.  The pkgsrc lib directory
+# on many systems contains libgcc_s.so.1; however, cc1 was built by the stage2
+# compiler and should find the libgcc that matches that compiler.  That happens
+# to be the one we just built, not the pkgsrc one.
+#
+# Instead we have mpfr and gmp built as part of the gcc build itself.
+#
+$(AUTOCONF_OUT.32): | $(VER.32)/mpfr $(VER.32)/gmp $(VER.32)/mpc
+
+$(VER.32)/mpfr: $(MPFR_VER).tar.bz2 | $(VER.32)
+	-rm -rf $@
+	mkdir -p .unpack32
+	gtar x -C .unpack32 -j --no-same-owner -f $(MPFR_VER).tar.bz2
+	mv -f .unpack32/$(MPFR_VER) ./$@
+	-rmdir .unpack32
+	chmod 755 $@/configure
+	touch $@/configure
+
+$(VER.32)/gmp: $(GMP_VER).tar.bz2 | $(VER.32)
+	-rm -rf $@
+	mkdir -p .unpack32
+	gtar x -C .unpack32 -j --no-same-owner -f $(GMP_VER).tar.bz2
+	mv -f .unpack32/$(GMP_VER) ./$@
+	-rmdir .unpack32
+	chmod 755 $@/configure
+	touch $@/configure
+
+$(VER.32)/mpc: $(MPC_VER).tar.gz | $(VER.32)
+	-rm -rf $@
+	mkdir -p .unpack32
+	gtar x -C .unpack32 -z --no-same-owner -f $(MPC_VER).tar.gz
+	mv -f .unpack32/$(MPC_VER) ./$@
+	-rmdir .unpack32
+	chmod 755 $@/configure
+	touch $@/configure
+
+.PHONY: strapfix
+strapfix: $(STRAPFIX_LINKS) $(STRAPFIX_FILES) | install
+	for f in $(STRAPFIX_FILES_32); do \
+		/usr/bin/elfedit -e \
+		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib' \
+		    $$f; \
+	done
+	for f in $(STRAPFIX_FILES_64); do \
+		/usr/bin/elfedit -e \
+		    'dyn:runpath $(DESTDIR)/$(PREFIX)/lib/64' \
+		    $$f; \
+	done
+
+$(STRAPFIX_LINKS):
+	mkdir -p `dirname $@`
+	[[ -h $@ ]] || ln -s amd64 $@
diff --git a/gcc6/Patches/001-illumos-gcc.patch b/gcc6/Patches/001-illumos-gcc.patch
new file mode 100644
index 0000000..d2549e7
--- /dev/null
+++ b/gcc6/Patches/001-illumos-gcc.patch
@@ -0,0 +1,695 @@
+diff -ru --ignore-all-space gcc-6.3.0/contrib/compare_tests gcc-6.3.0-il/contrib/compare_tests
+--- gcc-6.3.0/contrib/compare_tests	2013-05-13 19:52:42.000000000 +0200
++++ gcc-6.3.0-il/contrib/compare_tests	2017-01-31 01:07:31.354756677 +0100
+@@ -107,8 +107,15 @@
+ 	usage "Must specify either two directories or two files"
+ fi
+ 
+-sed 's/^XFAIL/FAIL/; s/^XPASS/PASS/' < "$1" | awk '/^Running target / {target = $3} { if (target != "unix") { sub(/: /, "&"target": " ); }; print $0; }' | cut -c1-2000 >$tmp1
+-sed 's/^XFAIL/FAIL/; s/^XPASS/PASS/' < "$2" | awk '/^Running target / {target = $3} { if (target != "unix") { sub(/: /, "&"target": " ); }; print $0; }' | cut -c1-2000 >$tmp2
++osrev=`uname -sr`
++if [ `expr "$osrev" : "SunOS 5."` -eq "8" ]; then
++   AWK=/usr/bin/nawk
++else
++    AWK=awk
++fi
++
++sed 's/^XFAIL/FAIL/; s/^XPASS/PASS/' < "$1" | $AWK '/^Running target / {target = $3} { if (target != "unix") { sub(/: /, "&"target": " ); }; print $0; }' | cut -c1-2000 >$tmp1
++sed 's/^XFAIL/FAIL/; s/^XPASS/PASS/' < "$2" | $AWK '/^Running target / {target = $3} { if (target != "unix") { sub(/: /, "&"target": " ); }; print $0; }' | cut -c1-2000 >$tmp2
+ 
+ before=$tmp1
+ now=$tmp2
+diff -ru --ignore-all-space gcc-6.3.0/gcc/common.opt gcc-6.3.0-il/gcc/common.opt
+--- gcc-6.3.0/gcc/common.opt	2016-03-17 16:11:35.000000000 +0100
++++ gcc-6.3.0-il/gcc/common.opt	2017-01-31 01:07:35.418911240 +0100
+@@ -1029,6 +1029,11 @@
+ Common Var(flag_checking) Init(CHECKING_P)
+ Perform internal consistency checkings.
+ 
++fclone-functions
++Common Report Var(flag_clone_functions) Init(1)
++Allow the compiler to clone functions to facilitate certain optimizations.
++Enabled by default.
++
+ fcombine-stack-adjustments
+ Common Report Var(flag_combine_stack_adjustments) Optimization
+ Looks for opportunities to reduce stack adjustments and stack references.
+@@ -2231,6 +2236,10 @@
+ Common Report Var(flag_strict_aliasing) Optimization
+ Assume strict aliasing rules apply.
+ 
++fstrict-calling-conventions
++Common Report Var(flag_strict_calling_conventions) Init(1)
++Use strict ABI calling conventions even for static functions
++
+ fstrict-overflow
+ Common Report Var(flag_strict_overflow) Optimization
+ Treat signed overflow as undefined.
+diff -ru --ignore-all-space gcc-6.3.0/gcc/config/i386/i386.c gcc-6.3.0-il/gcc/config/i386/i386.c
+--- gcc-6.3.0/gcc/config/i386/i386.c	2016-12-14 16:44:07.000000000 +0100
++++ gcc-6.3.0-il/gcc/config/i386/i386.c	2017-01-31 01:07:31.550765552 +0100
+@@ -2445,6 +2445,10 @@
+ 
+    saved frame pointer			if frame_pointer_needed
+ 					<- HARD_FRAME_POINTER
++   [-msave-args]			<- arg_save_offset
++
++   [saveargs padding]
++
+    [saved regs]
+ 					<- regs_save_offset
+    [padding0]
+@@ -2462,6 +2466,7 @@
+   */
+ struct ix86_frame
+ {
++  int nmsave_args;
+   int nsseregs;
+   int nregs;
+   int va_arg_size;
+@@ -2473,6 +2478,7 @@
+   HOST_WIDE_INT hard_frame_pointer_offset;
+   HOST_WIDE_INT stack_pointer_offset;
+   HOST_WIDE_INT hfp_save_offset;
++  HOST_WIDE_INT arg_save_offset;
+   HOST_WIDE_INT reg_save_offset;
+   HOST_WIDE_INT sse_reg_save_offset;
+ 
+@@ -2608,6 +2614,8 @@
+ 
+ static enum calling_abi ix86_function_abi (const_tree);
+ 
++static int ix86_nsaved_args (void);
++static void pro_epilogue_adjust_stack (rtx, rtx, rtx, int, bool);
+ 
+ #ifndef SUBTARGET32_DEFAULT_CPU
+ #define SUBTARGET32_DEFAULT_CPU "i386"
+@@ -5196,6 +5204,9 @@
+     opts->x_ix86_isa_flags
+       |= OPTION_MASK_ISA_LZCNT & ~opts->x_ix86_isa_flags_explicit;
+ 
++  if (!TARGET_64BIT_P (opts->x_ix86_isa_flags) && TARGET_SAVE_ARGS)
++    error ("-msave-args makes no sense in the 32-bit mode");
++
+   /* Validate -mpreferred-stack-boundary= value or default it to
+      PREFERRED_STACK_BOUNDARY_DEFAULT.  */
+   ix86_preferred_stack_boundary = PREFERRED_STACK_BOUNDARY_DEFAULT;
+@@ -7088,6 +7099,7 @@
+ 	 and callee not, or vice versa.  Instead look at whether the callee
+ 	 is optimized or not.  */
+       if (target && opt_for_fn (target->decl, optimize)
++	  && !flag_strict_calling_conventions
+ 	  && !(profile_flag && !flag_fentry))
+ 	{
+ 	  cgraph_local_info *i = &target->local;
+@@ -7179,6 +7191,7 @@
+       /* TARGET_SSE_MATH */
+       && (target_opts_for_fn (target->decl)->x_ix86_fpmath & FPMATH_SSE)
+       && opt_for_fn (target->decl, optimize)
++      && !flag_strict_calling_conventions
+       && !(profile_flag && !flag_fentry))
+     {
+       cgraph_local_info *i = &target->local;
+@@ -10939,7 +10952,7 @@
+ 
+   ix86_compute_frame_layout (&frame);
+   return (frame.stack_pointer_offset == UNITS_PER_WORD
+-	  && (frame.nregs + frame.nsseregs) == 0);
++	  && (frame.nmsave_args + frame.nregs + frame.nsseregs) == 0);
+ }
+ 
+ /* Value should be nonzero if functions must have frame pointers.
+@@ -10963,6 +10976,9 @@
+   if (TARGET_32BIT_MS_ABI && cfun->calls_setjmp)
+     return true;
+ 
++  if (TARGET_SAVE_ARGS)
++    return true;
++
+   /* Win64 SEH, very large frames need a frame-pointer as maximum stack
+      allocation is 4GB.  */
+   if (TARGET_64BIT_MS_ABI && get_frame_size () > SEH_MAX_FRAME_SIZE)
+@@ -11398,6 +11414,7 @@
+ 
+   frame->nregs = ix86_nsaved_regs ();
+   frame->nsseregs = ix86_nsaved_sseregs ();
++  frame->nmsave_args = ix86_nsaved_args ();
+ 
+   /* 64-bit MS ABI seem to require stack alignment to be always 16,
+      except for function prologues, leaf functions and when the defult
+@@ -11460,7 +11477,8 @@
+     }
+ 
+   frame->save_regs_using_mov
+-    = (TARGET_PROLOGUE_USING_MOVE && cfun->machine->use_fast_prologue_epilogue
++    = ((TARGET_FORCE_SAVE_REGS_USING_MOV ||
++	(TARGET_PROLOGUE_USING_MOVE && cfun->machine->use_fast_prologue_epilogue))
+        /* If static stack checking is enabled and done with probes,
+ 	  the registers need to be saved before allocating the frame.  */
+        && flag_stack_check != STATIC_BUILTIN_STACK_CHECK);
+@@ -11480,6 +11498,13 @@
+   /* The traditional frame pointer location is at the top of the frame.  */
+   frame->hard_frame_pointer_offset = offset;
+ 
++  if (TARGET_SAVE_ARGS)
++    {
++      offset += frame->nmsave_args * UNITS_PER_WORD;
++      offset += (frame->nmsave_args % 2) * UNITS_PER_WORD;
++    }
++  frame->arg_save_offset = offset;
++
+   /* Register save area */
+   offset += frame->nregs * UNITS_PER_WORD;
+   frame->reg_save_offset = offset;
+@@ -11557,8 +11582,9 @@
+   /* Size prologue needs to allocate.  */
+   to_allocate = offset - frame->sse_reg_save_offset;
+ 
+-  if ((!to_allocate && frame->nregs <= 1)
+-      || (TARGET_64BIT && to_allocate >= (HOST_WIDE_INT) 0x80000000))
++  if (!TARGET_SAVE_ARGS &&
++      ((!to_allocate && frame->nregs <= 1)
++       || (TARGET_64BIT && to_allocate >= (HOST_WIDE_INT) 0x80000000)))
+     frame->save_regs_using_mov = false;
+ 
+   if (ix86_using_red_zone ()
+@@ -11569,7 +11595,11 @@
+     {
+       frame->red_zone_size = to_allocate;
+       if (frame->save_regs_using_mov)
++	{
+ 	frame->red_zone_size += frame->nregs * UNITS_PER_WORD;
++	  frame->red_zone_size += frame->nmsave_args * UNITS_PER_WORD;
++	  frame->red_zone_size += (frame->nmsave_args % 2) * UNITS_PER_WORD;
++	}
+       if (frame->red_zone_size > RED_ZONE_SIZE - RED_ZONE_RESERVE)
+ 	frame->red_zone_size = RED_ZONE_SIZE - RED_ZONE_RESERVE;
+     }
+@@ -11600,6 +11630,23 @@
+ 	  frame->hard_frame_pointer_offset = frame->stack_pointer_offset - 128;
+ 	}
+     }
++
++
++  if (getenv("DEBUG_FRAME_STUFF") != NULL)
++    {
++      printf("nmsave_args: %d\n", frame->nmsave_args);
++      printf("nsseregs: %d\n", frame->nsseregs);
++      printf("nregs: %d\n", frame->nregs);
++
++      printf("frame_pointer_offset: %llx\n", frame->frame_pointer_offset);
++      printf("hard_frame_pointer_offset: %llx\n", frame->hard_frame_pointer_offset);
++      printf("stack_pointer_offset: %llx\n", frame->stack_pointer_offset);
++      printf("hfp_save_offset: %llx\n", frame->hfp_save_offset);
++      printf("arg_save_offset: %llx\n", frame->arg_save_offset);
++      printf("reg_save_offset: %llx\n", frame->reg_save_offset);
++      printf("sse_reg_save_offset: %llx\n", frame->sse_reg_save_offset);
++
++    }
+ }
+ 
+ /* This is semi-inlined memory_address_length, but simplified
+@@ -11708,6 +11755,24 @@
+   unsigned int regno;
+   rtx_insn *insn;
+ 
++  if (TARGET_SAVE_ARGS)
++    {
++      int i;
++      int nsaved = ix86_nsaved_args ();
++      int start = cfun->returns_struct;
++
++      for (i = start; i < start + nsaved; i++)
++	{
++	  regno = x86_64_int_parameter_registers[i];
++	  insn = emit_insn (gen_push (gen_rtx_REG (word_mode, regno)));
++	  RTX_FRAME_RELATED_P (insn) = 1;
++	}
++      if (nsaved % 2 != 0)
++	pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,
++				   GEN_INT (-UNITS_PER_WORD), -1, false);
++    }
++
++
+   for (regno = FIRST_PSEUDO_REGISTER - 1; regno-- > 0; )
+     if (GENERAL_REGNO_P (regno) && ix86_save_reg (regno, true))
+       {
+@@ -11795,9 +11860,30 @@
+ /* Emit code to save registers using MOV insns.
+    First register is stored at CFA - CFA_OFFSET.  */
+ static void
+-ix86_emit_save_regs_using_mov (HOST_WIDE_INT cfa_offset)
++ix86_emit_save_regs_using_mov (struct ix86_frame *frame)
+ {
+   unsigned int regno;
++  HOST_WIDE_INT cfa_offset = frame->arg_save_offset;
++
++  if (TARGET_SAVE_ARGS)
++    {
++      int i;
++      int nsaved = ix86_nsaved_args ();
++      int start = cfun->returns_struct;
++
++      /* We deal with this twice? */
++      if (nsaved % 2 != 0)
++	cfa_offset -= UNITS_PER_WORD;
++
++      for (i = start + nsaved - 1; i >= start; i--)
++	{
++	  regno = x86_64_int_parameter_registers[i];
++	  ix86_emit_save_reg_using_mov(word_mode, regno, cfa_offset);
++	  cfa_offset -= UNITS_PER_WORD;
++	}
++    }
++
++  cfa_offset = frame->reg_save_offset;
+ 
+   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)
+     if (GENERAL_REGNO_P (regno) && ix86_save_reg (regno, true))
+@@ -12839,7 +12925,7 @@
+ 	}
+     }
+ 
+-  int_registers_saved = (frame.nregs == 0);
++  int_registers_saved = (frame.nregs == 0 && frame.nmsave_args == 0);
+   sse_registers_saved = (frame.nsseregs == 0);
+ 
+   if (frame_pointer_needed && !m->fs.fp_valid)
+@@ -12879,6 +12965,7 @@
+ 	{
+ 	  ix86_emit_save_regs ();
+ 	  int_registers_saved = true;
++
+ 	  gcc_assert (m->fs.sp_offset == frame.reg_save_offset);
+ 	}
+ 
+@@ -12890,7 +12977,7 @@
+ 	       && (! TARGET_STACK_PROBE
+ 		   || frame.stack_pointer_offset < CHECK_STACK_LIMIT))
+ 	{
+-	  ix86_emit_save_regs_using_mov (frame.reg_save_offset);
++	  ix86_emit_save_regs_using_mov (&frame);
+ 	  int_registers_saved = true;
+ 	}
+     }
+@@ -13133,7 +13220,7 @@
+     }
+ 
+   if (!int_registers_saved)
+-    ix86_emit_save_regs_using_mov (frame.reg_save_offset);
++    ix86_emit_save_regs_using_mov (&frame);
+   if (!sse_registers_saved)
+     ix86_emit_save_sse_regs_using_mov (frame.sse_reg_save_offset);
+ 
+@@ -13166,6 +13253,7 @@
+      relative to the value of the stack pointer at the end of the function
+      prologue, and moving instructions that access redzone area via frame
+      pointer inside push sequence violates this assumption.  */
++  /* XXX: We may wish to do this when SAVE_ARGS in general */
+   if (frame_pointer_needed && frame.red_zone_size)
+     emit_insn (gen_memory_blockage ());
+ 
+@@ -13393,6 +13481,7 @@
+ 
+   /* See the comment about red zone and frame
+      pointer usage in ix86_expand_prologue.  */
++  /* XXX: We may want to do this when SAVE_ARGS in general */
+   if (frame_pointer_needed && frame.red_zone_size)
+     emit_insn (gen_memory_blockage ());
+ 
+@@ -13586,6 +13675,36 @@
+       ix86_emit_restore_regs_using_pop ();
+     }
+ 
++  if (TARGET_SAVE_ARGS) {
++    /*
++     * For each saved argument, emit a restore note, to make sure it happens
++     * correctly within the shrink wrapping (I think).
++     *
++     * Note that 'restore' in this case merely means the rule is the same as
++     * it was on function entry, not that we have actually done a register
++     * restore (which of course, we haven't).
++     *
++     * If we do not do this, the DWARF code will emit sufficient restores to
++     * provide balance on its own initiative, which in the presence of
++     * -fshrink-wrap may actually _introduce_ unbalance (whereby we only
++     * .cfi_offset a register sometimes, but will always .cfi_restore it.
++     * This will trip an assert.)
++     */
++    int start = cfun->returns_struct;
++    int nsaved = ix86_nsaved_args();
++    int i;
++
++    for (i = start + nsaved - 1; i >= start; i--)
++      queued_cfa_restores
++	= alloc_reg_note (REG_CFA_RESTORE,
++			  gen_rtx_REG(Pmode,
++				      x86_64_int_parameter_registers[i]),
++			  queued_cfa_restores);
++
++    gcc_assert(m->fs.fp_valid);
++  }
++
++
+   /* If we used a stack pointer and haven't already got rid of it,
+      then do so now.  */
+   if (m->fs.fp_valid)
+@@ -14547,6 +14666,19 @@
+   return !ix86_legitimate_constant_p (mode, x);
+ }
+ 
++/* Return number of arguments to be saved on the stack with
++   -msave-args.  */
++
++static int
++ix86_nsaved_args (void)
++{
++  if (TARGET_SAVE_ARGS)
++    return crtl->args.info.regno - cfun->returns_struct;
++  else
++    return 0;
++}
++
++
+ /*  Nonzero if the symbol is marked as dllimport, or as stub-variable,
+     otherwise zero.  */
+ 
+diff -ru --ignore-all-space gcc-6.3.0/gcc/config/i386/i386.opt gcc-6.3.0-il/gcc/config/i386/i386.opt
+--- gcc-6.3.0/gcc/config/i386/i386.opt	2016-10-13 23:15:45.000000000 +0200
++++ gcc-6.3.0-il/gcc/config/i386/i386.opt	2017-01-31 01:07:31.550854008 +0100
+@@ -499,6 +499,16 @@
+ Target Report Mask(TLS_DIRECT_SEG_REFS)
+ Use direct references against %gs when accessing tls data.
+ 
++msave-args
++Target Report Var(TARGET_SAVE_ARGS)
++Save integer arguments on the stack at function entry
++
++mforce-save-regs-using-mov
++Target Report Var(TARGET_FORCE_SAVE_REGS_USING_MOV)
++Save registers using push in function prologues.  This is intentionally
++undocumented and used for msave-args testing.
++
++
+ mtune=
+ Target RejectNegative Joined Var(ix86_tune_string)
+ Schedule code for given CPU.
+diff -ru --ignore-all-space gcc-6.3.0/gcc/config/sol2.h gcc-6.3.0-il/gcc/config/sol2.h
+--- gcc-6.3.0/gcc/config/sol2.h	2016-01-04 15:30:50.000000000 +0100
++++ gcc-6.3.0-il/gcc/config/sol2.h	2017-01-31 01:07:31.613504607 +0100
+@@ -155,15 +155,22 @@
+ #define SUPPORTS_INIT_PRIORITY HAVE_INITFINI_ARRAY_SUPPORT
+ 
+ #undef STARTFILE_ARCH_SPEC
+-#define STARTFILE_ARCH_SPEC "%{ansi:values-Xc.o%s} \
+-			    %{!ansi:values-Xa.o%s}"
++#define STARTFILE_ARCH_SPEC "%{std=c1x|std=gnu1x:values-Xc.o%s values-xpg6.o%s; \
++			       std=c11|std=gnu11:values-Xc.o%s values-xpg6.o%s; \
++			       std=c99|std=gnu99:values-Xc.o%s values-xpg6.o%s; \
++			       std=c9x|std=gnu9x:values-Xc.o%s values-xpg6.o%s; \
++			       std=c++0x|std=gnu++0x:values-Xc.o%s; \
++			       std=c++11|std=gnu++11:values-Xc.o%s; \
++			       std=c++03|std=gnu++03:values-Xc.o%s; \
++			       :values-Xa.o%s}"
++
+ 
+ #if defined(HAVE_LD_PIE) && defined(HAVE_SOLARIS_CRTS)
+ #define STARTFILE_CRTBEGIN_SPEC "%{shared:crtbeginS.o%s} \
+ 				 %{" PIE_SPEC ":crtbeginS.o%s} \
+ 				 %{" NO_PIE_SPEC ":crtbegin.o%s}"
+ #else
+-#define STARTFILE_CRTBEGIN_SPEC	"crtbegin.o%s"
++#define STARTFILE_CRTBEGIN_SPEC	"%{shared:crtbeginS.o%s;:crtbegin.o%s}"
+ #endif
+ 
+ #if SUPPORTS_INIT_PRIORITY
+@@ -208,7 +215,7 @@
+ 			       %{" PIE_SPEC ":crtendS.o%s} \
+ 			       %{" NO_PIE_SPEC ":crtend.o%s}}"
+ #else
+-#define ENDFILE_CRTEND_SPEC "crtend.o%s"
++#define ENDFILE_CRTEND_SPEC "%{shared:crtendS.o%s;:crtend.o%s}"
+ #endif
+ 
+ #undef  ENDFILE_SPEC
+diff -ru --ignore-all-space gcc-6.3.0/gcc/configure gcc-6.3.0-il/gcc/configure
+--- gcc-6.3.0/gcc/configure	2016-12-11 17:23:04.000000000 +0100
++++ gcc-6.3.0-il/gcc/configure	2017-01-31 01:07:35.420151795 +0100
+@@ -22798,6 +22798,7 @@
+ 	    -e 's,^.*: 5\.[0-9][0-9]*-\([0-9]\.[0-9][0-9]*\).*$,\1,p'`
+ 	  ld_vers_major=`expr "$ld_vers" : '\([0-9]*\)'`
+ 	  ld_vers_minor=`expr "$ld_vers" : '[0-9]*\.\([0-9]*\)'`
++          ld_vers_isillumos=`echo "$ld_ver" | grep '(illumos)'`
+ 	fi
+ 	;;
+     esac
+@@ -27775,6 +27776,8 @@
+         # Sun ld has various bugs in .eh_frame_hdr support before version 1.2251.
+         if test "$ld_vers_major" -gt 1 || test "$ld_vers_minor" -ge 2251; then
+           gcc_cv_ld_eh_frame_hdr=yes
++        elif test "$ld_vers_minor" -ge 1735 && test -n "$ld_vers_isillumos"; then
++          gcc_cv_ld_eh_frame_hdr=yes
+         fi
+         ;;
+     esac
+diff -ru --ignore-all-space gcc-6.3.0/gcc/configure.ac gcc-6.3.0-il/gcc/configure.ac
+--- gcc-6.3.0/gcc/configure.ac	2016-12-11 17:23:04.000000000 +0100
++++ gcc-6.3.0-il/gcc/configure.ac	2017-01-31 01:07:35.420576310 +0100
+@@ -2592,6 +2592,7 @@
+ 	    -e 's,^.*: 5\.[0-9][0-9]*-\([0-9]\.[0-9][0-9]*\).*$,\1,p'`
+ 	  ld_vers_major=`expr "$ld_vers" : '\([0-9]*\)'`
+ 	  ld_vers_minor=`expr "$ld_vers" : '[0-9]*\.\([0-9]*\)'`
++          ld_vers_isillumos=`echo "$ld_ver" | grep '(illumos)'`
+ 	fi
+ 	;;
+     esac
+@@ -4852,6 +4853,8 @@
+         # Sun ld has various bugs in .eh_frame_hdr support before version 1.2251.
+         if test "$ld_vers_major" -gt 1 || test "$ld_vers_minor" -ge 2251; then
+           gcc_cv_ld_eh_frame_hdr=yes
++        elif test "$ld_vers_minor" -ge 1735 && test -n "$ld_vers_isillumos"; then
++          gcc_cv_ld_eh_frame_hdr=yes
+         fi
+         ;;
+     esac
+diff -ru --ignore-all-space gcc-6.3.0/gcc/doc/invoke.texi gcc-6.3.0-il/gcc/doc/invoke.texi
+--- gcc-6.3.0/gcc/doc/invoke.texi	2016-07-08 16:51:44.000000000 +0200
++++ gcc-6.3.0-il/gcc/doc/invoke.texi	2017-01-31 01:07:35.356443734 +0100
+@@ -339,7 +339,7 @@
+ -fauto-inc-dec -fbranch-probabilities @gol
+ -fbranch-target-load-optimize -fbranch-target-load-optimize2 @gol
+ -fbtr-bb-exclusive -fcaller-saves @gol
+--fcombine-stack-adjustments -fconserve-stack @gol
++-fclone-functions -fcombine-stack-adjustments -fconserve-stack @gol
+ -fcompare-elim -fcprop-registers -fcrossjumping @gol
+ -fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules @gol
+ -fcx-limited-range @gol
+@@ -7766,6 +7766,12 @@
+ The @option{-fstrict-aliasing} option is enabled at levels
+ @option{-O2}, @option{-O3}, @option{-Os}.
+ 
++@item -fstrict-calling-conventions
++@opindex fstrict-calling-conventions
++Use strict ABI calling conventions even with local functions.
++This disable certain optimizations that may cause GCC to call local
++functions in a manner other than that described by the ABI.
++
+ @item -fstrict-overflow
+ @opindex fstrict-overflow
+ Allow the compiler to assume strict signed overflow rules, depending
+@@ -8184,6 +8190,15 @@
+ The default is @option{-fno-fat-lto-objects} on targets with linker plugin
+ support.
+ 
++@item -fno-clone-functions
++@opindex fno-clone-functions
++Forbid the implicit cloning of functions implicit in certain
++optimizations.  This also effectively will disable any optimization
++which wishes to clone functions, equivalent to each function having
++the ``noclone'' attribute.  This allows the prevention of the
++dissociation of a piece of text from an intelligible and expected
++symbol name, which may hamper debugging and tracing.
++
+ @item -fcompare-elim
+ @opindex fcompare-elim
+ After register allocation and post-register allocation instruction splitting,
+@@ -12871,6 +12886,10 @@
+ addresses and sizes of sections.  Pointers are 64 bits.  Programs can be
+ statically linked only.
+ 
++@item -msave-args
++@opindex msave-args
++Save integer-sized arguments on the stack on function entry.
++
+ @item -mstrict-align
+ @opindex mstrict-align
+ Do not assume that unaligned memory references are handled by the system.
+diff -ru --ignore-all-space gcc-6.3.0/gcc/dwarf2out.c gcc-6.3.0-il/gcc/dwarf2out.c
+--- gcc-6.3.0/gcc/dwarf2out.c	2016-09-01 13:43:15.000000000 +0200
++++ gcc-6.3.0-il/gcc/dwarf2out.c	2017-01-31 01:07:35.421861016 +0100
+@@ -20842,6 +20842,11 @@
+     /* Add the calling convention attribute if requested.  */
+     add_calling_convention_attribute (subr_die, decl);
+ 
++#ifdef TARGET_SAVE_ARGS
++  if (TARGET_SAVE_ARGS)
++    add_AT_flag (subr_die, DW_AT_SUN_amd64_parmdump, 1);
++#endif
++
+   /* Output Dwarf info for all of the stuff within the body of the function
+      (if it has one - it may be just a declaration).
+ 
+diff -ru --ignore-all-space gcc-6.3.0/gcc/intl.c gcc-6.3.0-il/gcc/intl.c
+--- gcc-6.3.0/gcc/intl.c	2016-01-04 15:30:50.000000000 +0100
++++ gcc-6.3.0-il/gcc/intl.c	2017-01-31 01:07:35.421930308 +0100
+@@ -74,17 +74,11 @@
+ 
+   if (!strcmp (open_quote, "`") && !strcmp (close_quote, "'"))
+     {
+-      /* Untranslated quotes that it may be possible to replace with
+-	 U+2018 and U+2019; but otherwise use "'" instead of "`" as
+-	 opening quote.  */
++      /*
++       * open_quote is ` purely for ease of translation.  If they aren't
++       * translated, use ' for both
++       */
+       open_quote = "'";
+-#if defined HAVE_LANGINFO_CODESET
+-      if (locale_utf8)
+-	{
+-	  open_quote = "\xe2\x80\x98";
+-	  close_quote = "\xe2\x80\x99";
+-	}
+-#endif
+     }
+ }
+ 
+@@ -145,6 +139,3 @@
+    spaces[len] = '\0';
+    return spaces;
+ }
+-
+-
+-
+diff -ru --ignore-all-space gcc-6.3.0/gcc/symtab.c gcc-6.3.0-il/gcc/symtab.c
+--- gcc-6.3.0/gcc/symtab.c	2016-04-04 11:26:29.000000000 +0200
++++ gcc-6.3.0-il/gcc/symtab.c	2017-01-31 01:07:35.422076751 +0100
+@@ -1728,6 +1728,10 @@
+   tree new_decl;
+   symtab_node *new_node = NULL;
+ 
++  /* Do not allow a clone to be created if function-cloning is disabled */
++  if (!flag_clone_functions)
++	  return NULL;
++
+   /* First try to look up existing alias or base object
+      (if that is already non-overwritable).  */
+   symtab_node *node = ultimate_alias_target ();
+diff -ru --ignore-all-space gcc-6.3.0/gcc/testsuite/gcc.target/i386/local.c gcc-6.3.0-il/gcc/testsuite/gcc.target/i386/local.c
+--- gcc-6.3.0/gcc/testsuite/gcc.target/i386/local.c	2015-12-29 11:32:21.000000000 +0100
++++ gcc-6.3.0-il/gcc/testsuite/gcc.target/i386/local.c	2017-01-31 01:07:32.695587218 +0100
+@@ -1,5 +1,6 @@
+ /* { dg-do compile } */
+-/* { dg-options "-O2 -funit-at-a-time" } */
++/* { dg-options "-O2 -funit-at-a-time -fno-strict-calling-conventions" { target ia32 } } */
++/* { dg-options "-O2 -funit-at-a-time" { target lp64 } } */
+ /* { dg-final { scan-assembler "magic\[^\\n\]*eax" { target ia32 } } } */
+ /* { dg-final { scan-assembler "magic\[^\\n\]*(edi|ecx)" { target { ! ia32 } } } } */
+ 
+diff -ru --ignore-all-space gcc-6.3.0/gcc/tree-inline.c gcc-6.3.0-il/gcc/tree-inline.c
+--- gcc-6.3.0/gcc/tree-inline.c	2016-12-07 23:32:34.000000000 +0100
++++ gcc-6.3.0-il/gcc/tree-inline.c	2017-01-31 01:07:35.422488542 +0100
+@@ -5534,7 +5534,8 @@
+ tree_versionable_function_p (tree fndecl)
+ {
+   return (!lookup_attribute ("noclone", DECL_ATTRIBUTES (fndecl))
+-	  && copy_forbidden (DECL_STRUCT_FUNCTION (fndecl)) == NULL);
++	  && (copy_forbidden (DECL_STRUCT_FUNCTION (fndecl)) == NULL)
++	  && flag_clone_functions);
+ }
+ 
+ /* Delete all unreachable basic blocks and update callgraph.
+diff -ru --ignore-all-space gcc-6.3.0/include/dwarf2.def gcc-6.3.0-il/include/dwarf2.def
+--- gcc-6.3.0/include/dwarf2.def	2015-08-14 11:48:13.000000000 +0200
++++ gcc-6.3.0-il/include/dwarf2.def	2017-01-31 01:07:31.389764268 +0100
+@@ -399,6 +399,8 @@
+ DW_AT (DW_AT_GNU_discriminator, 0x2136)
+ /* VMS extensions.  */
+ DW_AT (DW_AT_VMS_rtnbeg_pd_address, 0x2201)
++/* Sun extension. */
++DW_AT (DW_AT_SUN_amd64_parmdump, 0x2224)
+ /* GNAT extensions.  */
+ /* GNAT descriptive type.
+    See http://gcc.gnu.org/wiki/DW_AT_GNAT_descriptive_type .  */
+diff -ru --ignore-all-space gcc-6.3.0/libgcc/config.host gcc-6.3.0-il/libgcc/config.host
+--- gcc-6.3.0/libgcc/config.host	2016-11-19 04:03:55.000000000 +0100
++++ gcc-6.3.0-il/libgcc/config.host	2017-01-31 01:07:30.277906831 +0100
+@@ -267,7 +267,7 @@
+ *-*-solaris2*)
+   # Unless linker support and dl_iterate_phdr are present,
+   # unwind-dw2-fde-dip.c automatically falls back to unwind-dw2-fde.c.
+-  tmake_file="$tmake_file sol2/t-sol2 t-eh-dw2-dip t-crtstuff-pic t-libgcc-pic t-slibgcc t-slibgcc-elf-ver"
++  tmake_file="$tmake_file sol2/t-sol2 t-eh-dw2-dip t-crtstuff-pic t-libgcc-pic t-slibgcc t-slibgcc-elf-ver t-crtstuff-pic"
+   if test $with_gnu_ld = yes; then
+     tmake_file="$tmake_file t-slibgcc-gld"
+   else
+@@ -287,6 +287,7 @@
+       i?86-*-solaris2.1[0-9]* | x86_64-*-solaris2.1[0-9]*)
+         # Solaris 10+/x86 provides crt1.o, crti.o, crtn.o, and gcrt1.o as
+         # part of the base system.
++        extra_parts="$extra_parts crtbeginS.o crtendS.o"
+         ;;
+       sparc*-*-solaris2.1[0-9]*)
+         # Solaris 10+/SPARC lacks crt1.o and gcrt1.o.
+--- gcc-6.3.0/gcc/config/sol2-c.c.orig	2016-01-04 15:30:50.000000000 +0100
++++ gcc-6.3.0/gcc/config/sol2-c.c	2017-02-07 23:32:09.669084357 +0100
+@@ -40,7 +40,10 @@
+ 
+ static const format_flag_spec cmn_err_flag_specs[] =
+ {
++  { '0',  0, 0, N_("'0' flag"),        N_("the '0' flag"),                     STD_C89 },
++  { '-',  0, 0, N_("'-' flag"),        N_("the '-' flag"),                     STD_C89 },
+   { 'w',  0, 0, N_("field width"),     N_("field width in printf format"),     STD_C89 },
++  { 'p',  0, 0, N_("precision"),       N_("precision in printf format"),       STD_C89 },
+   { 'L',  0, 0, N_("length modifier"), N_("length modifier in printf format"), STD_C89 },
+   { 0, 0, 0, NULL, NULL, STD_C89 }
+ };
+@@ -48,6 +51,7 @@
+ 
+ static const format_flag_pair cmn_err_flag_pairs[] =
+ {
++  { '0', '-', 1, 0 },
+   { 0, 0, 0, 0 }
+ };
+ 
+@@ -57,21 +61,21 @@
+ static const format_char_info cmn_err_char_table[] =
+ {
+   /* C89 conversion specifiers.  */
+-  { "dD",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",  "",   NULL },
+-  { "oOxX",0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",  "",   NULL },
+-  { "u",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",  "",   NULL },
+-  { "c",   0, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",  "",   NULL },
+-  { "p",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w", "c",  NULL },
+-  { "s",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",  "cR", NULL },
+-  { "b",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "w",   "",   &bitfield_string_type },
++  { "dD",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp0", "",   NULL },
++  { "oOxX",0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp0", "",   NULL },
++  { "u",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp0", "",   NULL },
++  { "c",   0, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-w",   "",   NULL },
++  { "p",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-w",   "c",  NULL },
++  { "s",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp",  "cR", NULL },
++  { "b",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-w",   "",   &bitfield_string_type },
+   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }
+ };
+ 
+ EXPORTED_CONST format_kind_info solaris_format_types[] = {
+-  { "cmn_err",  cmn_err_length_specs,  cmn_err_char_table, "", NULL,
++  { "cmn_err",  cmn_err_length_specs,  cmn_err_char_table, "0-", NULL,
+     cmn_err_flag_specs, cmn_err_flag_pairs,
+     FMT_FLAG_ARG_CONVERT|FMT_FLAG_EMPTY_PREC_OK,
+-    'w', 0, 0, 0, 'L', 0,
++    'w', 0, 'p', 0, 'L', 0,
+     &integer_type_node, &integer_type_node
+   }
+ };
diff --git a/gcc6/Patches/002-ld-flags.patch b/gcc6/Patches/002-ld-flags.patch
new file mode 100644
index 0000000..55eb5e4
--- /dev/null
+++ b/gcc6/Patches/002-ld-flags.patch
@@ -0,0 +1,24 @@
+--- ./gcc/config/sol2.h.orig	2016-05-08 21:13:10.810423614 +0200
++++ ./gcc/config/sol2.h	2016-05-08 21:16:55.681535743 +0200
+@@ -195,8 +195,8 @@
+   "%{G:-G} \
+    %{YP,*} \
+    %{R*} \
+-   %{!YP,*:%{p|pg:-Y P,%R/usr/lib/libp%R/lib:%R/usr/lib} \
+-	   %{!p:%{!pg:-Y P,%R/lib:%R/usr/lib}}}"
++   %{!YP,*:%{p|pg:-Y P,%R/usr/gcc/6/lib:%R/lib:%R/usr/lib -R %R/usr/gcc/6/lib -L %R/usr/gcc/6/lib} \
++	   %{!p:%{!pg:-Y P,%R/usr/gcc/6/lib:%R/lib:%R/usr/lib -R %R/usr/gcc/6/lib -L %R/usr/gcc/6/lib}}}"
+ 
+ #undef LINK_ARCH32_SPEC
+ #define LINK_ARCH32_SPEC LINK_ARCH32_SPEC_BASE
+@@ -208,8 +208,8 @@
+   "%{G:-G} \
+    %{YP,*} \
+    %{R*} \
+-   %{!YP,*:%{p|pg:-Y P,%R/usr/lib/libp/" ARCH64_SUBDIR ":%R/lib/" ARCH64_SUBDIR ":%R/usr/lib/" ARCH64_SUBDIR "}	\
+-	   %{!p:%{!pg:-Y P,%R/lib/" ARCH64_SUBDIR ":%R/usr/lib/" ARCH64_SUBDIR "}}}"
++   %{!YP,*:%{p|pg:-Y P,%R/usr/gcc/6/lib/" ARCH64_SUBDIR ":%R/lib/" ARCH64_SUBDIR ":%R/usr/lib/" ARCH64_SUBDIR " -R %R/usr/gcc/6/lib/" ARCH64_SUBDIR " -L %R/usr/gcc/6/lib/" ARCH64_SUBDIR "}	\
++	   %{!p:%{!pg:-Y P,%R/usr/gcc/6/lib/" ARCH64_SUBDIR ":%R/lib/" ARCH64_SUBDIR ":%R/usr/lib/" ARCH64_SUBDIR " -R %R/usr/gcc/6/lib/" ARCH64_SUBDIR " -L %R/usr/gcc/6/lib/" ARCH64_SUBDIR "}}}"
+ 
+ #undef LINK_ARCH64_SPEC
+ #ifndef USE_GLD
diff --git a/gcc6/Patches/003-cilk-sparc.patch b/gcc6/Patches/003-cilk-sparc.patch
new file mode 100644
index 0000000..c64e8d8
--- /dev/null
+++ b/gcc6/Patches/003-cilk-sparc.patch
@@ -0,0 +1,327 @@
+#
+# Enable cilk support for Sparc
+# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68945
+#
+--- gcc-5.3.0/libcilkrts/runtime/sysdep-unix.c	2013-10-30 15:51:29.000000000 -0700
++++ gcc-5.3.0/libcilkrts/runtime/sysdep-unix.c	2015-08-05 11:51:37.086142492 -0700
+@@ -81,6 +81,10 @@
+ #include <pthread.h>
+ #include <unistd.h>
+ 
++#if defined(sun) || defined(__sun) || defined(__sun__)
++#include <strings.h>
++#endif
++
+ #if defined HAVE_ALLOCA_H
+ # include <alloca.h>
+ #elif defined __GNUC__
+@@ -110,6 +114,14 @@
+ #   define MAP_ANONYMOUS MAP_ANON
+ #endif
+ 
++#if defined(sun) || defined(__sun) || defined(__sun__)
++#include <sys/resource.h>
++#include <dlfcn.h>
++#ifndef MAP_ANONYMOUS
++#define MAP_ANONYMOUS MAP_ANON
++#endif
++#endif
++
+ #ifdef  __VXWORKS__
+ #   include <vxWorks.h>   
+ #   include <vxCpuLib.h>  
+--- gcc-5.3.0/libcilkrts/configure.tgt	2014-11-13 06:03:17.000000000 -0800
++++ gcc-5.3.0/libcilkrts/configure.tgt	2015-08-03 20:58:07.888515211 -0700
+@@ -37,6 +37,12 @@
+     ;;
+   i?86-*-*)
+     ;;
++  sparc-*-*)
++    ;;
++  sparc*-*-*)
++    ;;
++  __sparc*-*-*)
++    ;;
+   *-*-*)
+     UNSUPPORTED=1
+     ;;
+--- gcc-5.3.0/libcilkrts/runtime/config/generic/cilk-abi-vla.c	2013-10-29 11:37:47.000000000 -0700
++++ gcc-5.3.0/libcilkrts/runtime/config/generic/cilk-abi-vla.c	2015-08-05 18:16:04.959499239 -0700
+@@ -103,5 +103,5 @@
+ 
+     // Just free the allocated memory to the heap since we don't know
+     // how to expand/contract the calling frame
+-    vla_internal_heap_free(t, full_size);
++    vla_internal_heap_free(sf, full_size);
+ }
+--- gcc-5.3.0/libcilkrts/runtime/config/generic/os-unix-sysdep.c	2013-10-29 11:37:47.000000000 -0700
++++ gcc-5.3.0/libcilkrts/runtime/config/generic/os-unix-sysdep.c	2015-08-06 10:27:40.088975924 -0700
+@@ -43,22 +43,55 @@
+ #include "os.h"
+ #include "sysdep.h"
+ 
++#if defined(__sparc) || defined(__sparc__)
++# include <sys/times.h>
++# include <limits.h>
++#endif
++
+ /*
+  * The cycle counter is used for debugging.  This funciton is only called if
+  * CILK_PROFILE is defined when the runtime is built.
+  */
+ COMMON_SYSDEP unsigned long long __cilkrts_getticks(void)
+ {
++#if defined(__sparc) || defined(__sparc__)
++  struct tms t;
++
++  if (times(&t) != (clock_t) -1)
++    return (unsigned long long) (t.tms_utime + t.tms_stime);
++
++  return 0ULL;
++#else
+ #   warning "unimplemented cycle counter"
+     return 0;
++#endif
++}
++
++#if defined(__sparc) || defined(__sparc__)
++#include "os-fence.h"
++/*
++ * SPARC V9 __cilkrts_fence implementation
++ */
++COMMON_SYSDEP void __cilkrts_fence(void)
++{
++  __asm__ __volatile__ ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad" ::: "memory");
+ }
++#endif
+ 
+ /*
+  * A "short pause" - called from the Cilk runtime's spinloops.
+  */
+ COMMON_SYSDEP void __cilkrts_short_pause(void)
+ {
++#if defined(__sparc) || defined(__sparc__)
++  /* spin around for 8 cycles */
++  __asm__ __volatile__("rd %ccr, %g0");
++  __asm__ __volatile__("rd %ccr, %g0");
++  __asm__ __volatile__("rd %ccr, %g0");
++  __asm__ __volatile__("rd %ccr, %g0");
++#else
+ #   warning __cilkrts_short_pause empty
++#endif
+ }
+ 
+ /*
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib.c	2013-11-06 06:55:46.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib.c	2015-08-06 19:09:24.207776401 -0700
+@@ -1,6 +1,6 @@
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-do run { target i?86-*-* x86_64-*-* } } */
+-/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } */
++/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/steal_check.c	2014-01-09 05:37:41.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/steal_check.c	2015-08-06 19:09:24.563452389 -0700
+@@ -1,6 +1,6 @@
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ // #include <cilk/cilk_api.h>
+ extern void __cilkrts_set_param (char *, char *);
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawnee_inline.c	2014-01-09 05:37:41.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawnee_inline.c	2015-08-06 19:09:24.472161093 -0700
+@@ -1,6 +1,6 @@
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus -w" } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #include <stdio.h>
+ #include <stdlib.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk_for_grain.c	2014-09-02 05:52:29.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk_for_grain.c	2015-08-06 19:09:24.050896837 -0700
+@@ -1,7 +1,7 @@
+-/* { dg-do run { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ /* { dg-additional-options "-std=gnu99" { target c } } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ 
+ int grain_value = 2;
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/nested_cilk_for.c	2014-09-02 05:52:29.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/nested_cilk_for.c	2015-08-06 19:09:24.328343364 -0700
+@@ -1,7 +1,7 @@
+-/* { dg-do run { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ /* { dg-additional-options "-std=gnu99" { target c } } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawning_arg.c	2014-01-09 05:37:41.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawning_arg.c	2015-08-06 19:09:24.519701327 -0700
+@@ -1,6 +1,6 @@
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ void f0(volatile int *steal_flag)
+ { 
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_sync.c	2013-11-06 06:55:46.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_sync.c	2015-08-06 19:09:24.279017911 -0700
+@@ -1,6 +1,6 @@
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-do run { target i?86-*-* x86_64-*-* } } */
+-/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } */
++/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk_for_ptr_iter.c	2014-09-02 05:52:29.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk_for_ptr_iter.c	2015-08-06 19:09:24.101455854 -0700
+@@ -1,7 +1,7 @@
+-/* { dg-do run { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ /* { dg-additional-options "-std=gnu99" { target c } } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ 
+ 
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_return.c	2013-11-06 06:55:46.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_return.c	2015-08-06 19:09:24.254308740 -0700
+@@ -1,6 +1,6 @@
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-do run { target i?86-*-* x86_64-*-* } } */
+-/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } */
++/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/test__cilk.c	2013-10-29 11:36:31.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/test__cilk.c	2015-08-06 19:09:24.600718008 -0700
+@@ -1,5 +1,5 @@
+ /* { dg-do compile } */
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ 
+ int main (void)
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/varargs_test.c	2014-01-09 05:37:41.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/varargs_test.c	2015-08-06 19:09:24.621315395 -0700
+@@ -1,6 +1,6 @@
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #include <stdarg.h>
+ #include <stdlib.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/pr63307.c	2015-01-21 13:23:04.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/pr63307.c	2015-08-06 19:09:24.447390446 -0700
+@@ -1,4 +1,4 @@
+ /* { dg-options "-fcilkplus -fcompare-debug" } */
+-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */
++/* { dg-do compile { target i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } */
+ 
+ #include "fib_no_return.c"
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk-for-2.c	2014-09-02 05:52:29.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk-for-2.c	2015-08-06 19:09:23.984625444 -0700
+@@ -1,7 +1,7 @@
+-/* { dg-do run { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ /* { dg-additional-options "-std=gnu99" { target c } } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ int msk;
+ 
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawner_inline.c	2014-02-07 02:49:08.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/spawner_inline.c	2015-08-06 19:09:24.494961112 -0700
+@@ -1,6 +1,6 @@
+-/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run  { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #include <stdlib.h>
+ #define DEFAULT_VALUE 30
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_init_expr_xy.c	2013-11-06 06:55:46.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/fib_init_expr_xy.c	2015-08-06 19:09:24.230686024 -0700
+@@ -1,6 +1,6 @@
+ /* { dg-options "-fcilkplus" } */
+-/* { dg-do run { target i?86-*-* x86_64-*-* } } */
+-/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } */
++/* { dg-options "-fcilkplus -lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk-fors.c	2014-09-02 05:52:29.000000000 -0700
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/CK/cilk-fors.c	2015-08-06 19:09:24.126426402 -0700
+@@ -1,7 +1,7 @@
+-/* { dg-do run { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do run { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus" } */
+ /* { dg-additional-options "-std=gnu99" { target c } } */
+-/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-additional-options "-lcilkrts" { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ 
+ #if HAVE_IO
+ #include <stdio.h>
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error2.c	2013-12-18 11:00:21.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error2.c	2015-08-06 19:11:44.336403626 -0700
+@@ -1,4 +1,4 @@
+-/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do compile { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus -Wall" } */
+ 
+ __attribute__((vector (vectorlength(32)))) 
+--- gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error3.c	2014-01-23 07:21:42.000000000 -0800
++++ gcc-5.3.0/gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error3.c	2015-08-06 19:12:08.083690541 -0700
+@@ -1,4 +1,4 @@
+-/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */
++/* { dg-do compile { target { i?86-*-* x86_64-*-* sparc-*-* sparcv9-*-* __sparc*-*-* } } } */
+ /* { dg-options "-fcilkplus -Wall" } */
+ 
+ __attribute__((vector (linear (x:y)))) /* { dg-message "parameter" "" { target c++ } } */
+
+--- gcc-5.3.0/libcilkrts/Makefile.in      2014-03-26 12:16:35.000000000 -0700
++++ gcc-5.3.0/libcilkrts/Makefile.in      2015-08-05 11:48:37.075834789 -0700
+@@ -215,13 +215,13 @@
+ AWK = @AWK@
+ CC = @CC@
+ CCDEPMODE = @CCDEPMODE@
+-CFLAGS = @CFLAGS@
++CFLAGS = @CFLAGS@ -D__EXTENSIONS__=1
+ CPP = @CPP@
+-CPPFLAGS = @CPPFLAGS@
++CPPFLAGS = @CPPFLAGS@ -D__EXTENSIONS__=1
+ CXX = @CXX@
+ CXXCPP = @CXXCPP@
+ CXXDEPMODE = @CXXDEPMODE@
+-CXXFLAGS = @CXXFLAGS@
++CXXFLAGS = @CXXFLAGS@ -D__EXTENSIONS__=1
+ CYGPATH_W = @CYGPATH_W@
+ DEFS = @DEFS@
+ DEPDIR = @DEPDIR@
+
diff --git a/gcc6/Patches/004-alignment.patch b/gcc6/Patches/004-alignment.patch
new file mode 100644
index 0000000..e50cfc0
--- /dev/null
+++ b/gcc6/Patches/004-alignment.patch
@@ -0,0 +1,111 @@
+#
+# Make a few alignment adjustments for sparc.  This has not been
+# submitted upstream yet.
+#
+--- gcc-5.3.0/libgomp/config/posix/omp-lock.h	2008-06-06 09:01:54.000000000 -0400
++++ gcc-5.3.0/libgomp/config/posix/omp-lock.h	2014-11-19 08:34:08.522303786 -0500
+@@ -11,13 +11,28 @@
+ #include <semaphore.h>
+ 
+ typedef pthread_mutex_t omp_lock_25_t;
+-typedef struct { pthread_mutex_t lock; int count; } omp_nest_lock_25_t;
++
++typedef struct {
++  pthread_mutex_t lock;
++  int count;
++} omp_nest_lock_25_t __attribute__((__aligned__(8)));
++
+ #ifdef HAVE_BROKEN_POSIX_SEMAPHORES
+ /* If we don't have working semaphores, we'll make all explicit tasks
+    tied to the creating thread.  */
+ typedef pthread_mutex_t omp_lock_t;
+-typedef struct { pthread_mutex_t lock; int count; void *owner; } omp_nest_lock_t;
++
++typedef struct {
++  pthread_mutex_t lock;
++  int count;
++  void *owner;
++} omp_nest_lock_t __attribute__((__aligned__(8)));
+ #else
+ typedef sem_t omp_lock_t;
+-typedef struct { sem_t lock; int count; void *owner; } omp_nest_lock_t;
++typedef struct {
++  sem_t lock;
++  int count;
++  void *owner;
++} omp_nest_lock_t __attribute__((__aligned__(8)));
+ #endif
++
+--- gcc-5.3.0/libgomp/omp.h.in	2014-01-02 17:25:54.000000000 -0500
++++ gcc-5.3.0/libgomp/omp.h.in	2014-11-19 08:31:53.354302270 -0500
+@@ -32,16 +32,24 @@
+    reflect the shape of the two types.  Their internals are private
+    to the library.  */
+ 
++#if defined(__x86_64__) || defined(__amd64) || defined(__sparc)
++#define OMP_LOCK_ALIGN 8
++#define OMP_NEST_LOCK_ALIGN 8
++#else
++#define OMP_LOCK_ALIGN 4
++#define OMP_NEST_LOCK_ALIGN 4
++#endif
++
+ typedef struct
+ {
+   unsigned char _x[@OMP_LOCK_SIZE@] 
+-    __attribute__((__aligned__(@OMP_LOCK_ALIGN@)));
++    __attribute__((__aligned__(OMP_LOCK_ALIGN)));
+ } omp_lock_t;
+ 
+ typedef struct
+ {
+   unsigned char _x[@OMP_NEST_LOCK_SIZE@] 
+-    __attribute__((__aligned__(@OMP_NEST_LOCK_ALIGN@)));
++    __attribute__((__aligned__(OMP_NEST_LOCK_ALIGN)));
+ } omp_nest_lock_t;
+ #endif
+ 
+--- gcc-5.3.0/libgomp/config/posix/ptrlock.h	2014-01-02 17:25:54.000000000 -0500
++++ gcc-5.3.0/libgomp/config/posix/ptrlock.h	2014-11-19 08:35:00.554310487 -0500
+@@ -29,7 +29,10 @@
+ #ifndef GOMP_PTRLOCK_H
+ #define GOMP_PTRLOCK_H 1
+ 
+-typedef struct { void *ptr; gomp_mutex_t lock; } gomp_ptrlock_t;
++typedef struct {
++  void *ptr;
++  gomp_mutex_t lock;
++} gomp_ptrlock_t __attribute__((__aligned__(8)));
+ 
+ static inline void gomp_ptrlock_init (gomp_ptrlock_t *ptrlock, void *ptr)
+ {
+--- gcc-5.3.0/libgomp/config/posix/sem.h	2014-01-02 17:25:54.000000000 -0500
++++ gcc-5.3.0/libgomp/config/posix/sem.h	2014-11-19 08:35:29.670306230 -0500
+@@ -49,8 +49,8 @@
+ 
+ struct gomp_sem
+ {
+-  pthread_mutex_t	mutex;
+-  pthread_cond_t	cond;
++  pthread_mutex_t	mutex __attribute__((__aligned__(8)));
++  pthread_cond_t	cond __attribute__((__aligned__(8)));
+   int			value;
+ };
+ 
+#--- gcc-5.3.0/libgomp/config/posix/lock.c       2015-01-10 11:10:37.000000000 -0800
+#+++ gcc-5.3.0/libgomp/config/posix/lock.c       2015-08-02 20:30:05.513685199 -0700
+#@@ -33,7 +33,14 @@
+#
+# /* We need UNIX98/XPG5 extensions to get recursive locks.  Request XPG6 since
+#    Solaris requires this for C99 and later.  */
+#+#ifndef _XOPEN_SOURCE
+# #define _XOPEN_SOURCE 600
+#+#endif
+#+
+#+#if defined(_XOPEN_SOURCE) && (_XOPEN_SOURCE < 600)
+#+#undef _XOPEN_SOURCE
+#+#define _XOPEN_SOURCE 600
+#+#endif
+#
+# #include "libgomp.h"
+#
diff --git a/gcc6/Patches/fixinc.in.patch b/gcc6/Patches/fixinc.in.patch
new file mode 100644
index 0000000..d808876
--- /dev/null
+++ b/gcc6/Patches/fixinc.in.patch
@@ -0,0 +1,21 @@
+diff -ruN gcc-4.7.3.orig/fixincludes/fixinc.in gcc-4.7.3/fixincludes/fixinc.in
+--- gcc-4.7.3.orig/fixincludes/fixinc.in	2013-05-16 01:21:03.102224280 +0000
++++ gcc-4.7.3/fixincludes/fixinc.in	2013-05-16 01:20:54.675745658 +0000
+@@ -196,7 +196,7 @@
+ 
+ while [ -n "$dirs" ] && [ $levels -gt 0 ]
+ do
+-  levels=`expr $levels - 1`
++  levels=`expr $levels - 1; true`
+   newdirs=
+   for d in $dirs
+   do
+@@ -325,7 +325,7 @@
+           cd $LIB
+           while [ x$dirname != x ]; do
+             component=`echo $dirname | sed -e 's|/.*$||'`
+-            mkdir $component >/dev/null 2>&1
++            mkdir -p $component >/dev/null 2>&1
+             cd $component
+             dirmade=$dirmade/$component
+             dirname=`echo $dirname | sed -e 's|[^/]*/||'`
diff --git a/gcc6/Patches/libgo_runtime_proc.c.patch b/gcc6/Patches/libgo_runtime_proc.c.patch
new file mode 100644
index 0000000..9c3ec24
--- /dev/null
+++ b/gcc6/Patches/libgo_runtime_proc.c.patch
@@ -0,0 +1,17 @@
+$NetBSD: patch-libgo_runtime_proc.c,v 1.1 2014/09/04 18:43:11 jperkin Exp $
+
+SunOS libelf does not support largefile.
+
+--- a/libgo/runtime/proc.c.orig	2014-05-27 22:01:08.000000000 +0000
++++ b/libgo/runtime/proc.c
+@@ -11,6 +11,10 @@
+ #include "config.h"
+ 
+ #ifdef HAVE_DL_ITERATE_PHDR
++#ifdef __sun
++#undef _FILE_OFFSET_BITS
++#define _FILE_OFFSET_BITS 32
++#endif
+ #include <link.h>
+ #endif
+ 
diff --git a/gcc6/Patches/libstdc++-no-rt.patch b/gcc6/Patches/libstdc++-no-rt.patch
new file mode 100644
index 0000000..196b7f6
--- /dev/null
+++ b/gcc6/Patches/libstdc++-no-rt.patch
@@ -0,0 +1,22 @@
+--- gcc-4.9.3/libstdc++-v3/acinclude.m4.1	2015-11-10 23:02:48.144804023 +0300
++++ gcc-4.9.3/libstdc++-v3/acinclude.m4	2015-11-10 23:02:57.650586415 +0300
+@@ -1233,7 +1233,7 @@
+         ac_has_nanosleep=yes
+         ;;
+       solaris*)
+-        GLIBCXX_LIBS="$GLIBCXX_LIBS -lrt"
++        GLIBCXX_LIBS="$GLIBCXX_LIBS"
+         ac_has_clock_monotonic=yes
+         ac_has_clock_realtime=yes
+         ac_has_nanosleep=yes
+--- gcc-4.9.3/libstdc++-v3/configure.1	2015-11-10 23:01:27.375669063 +0300
++++ gcc-4.9.3/libstdc++-v3/configure	2015-11-10 23:02:02.171610827 +0300
+@@ -19507,7 +19507,7 @@
+         ac_has_nanosleep=yes
+         ;;
+       solaris*)
+-        GLIBCXX_LIBS="$GLIBCXX_LIBS -lrt"
++        GLIBCXX_LIBS="$GLIBCXX_LIBS"
+         ac_has_clock_monotonic=yes
+         ac_has_clock_realtime=yes
+         ac_has_nanosleep=yes
diff --git a/gcc6/Patches/use-cxa_atexit.patch b/gcc6/Patches/use-cxa_atexit.patch
new file mode 100644
index 0000000..03d8571
--- /dev/null
+++ b/gcc6/Patches/use-cxa_atexit.patch
@@ -0,0 +1,11 @@
+--- gcc-6.4.0/gcc/config.gcc.~1~	2017-01-10 00:01:26.582656000 +0000
++++ gcc-6.4.0/gcc/config.gcc	2017-08-31 00:15:59.617620815 +0000
+@@ -850,7 +850,7 @@
+   sol2_tm_file_tail="${cpu_type}/sol2.h sol2.h"
+   sol2_tm_file="${sol2_tm_file_head} ${sol2_tm_file_tail}"
+   case ${target} in
+-    *-*-solaris2.1[2-9]*)
++    *-*-solaris2.1[1-9]*)
+       # __cxa_atexit was introduced in Solaris 12.
+       default_use_cxa_atexit=yes
+       ;;
diff --git a/gcc6/gcc-6.4.0.tar.gz.sha1 b/gcc6/gcc-6.4.0.tar.gz.sha1
new file mode 100644
index 0000000..669814b
--- /dev/null
+++ b/gcc6/gcc-6.4.0.tar.gz.sha1
@@ -0,0 +1 @@
+b22ff1effc370c55e389438561f44c88f7cd047d
diff --git a/gcc6/gmp-6.1.2.tar.bz2.sha1 b/gcc6/gmp-6.1.2.tar.bz2.sha1
new file mode 100644
index 0000000..a160433
--- /dev/null
+++ b/gcc6/gmp-6.1.2.tar.bz2.sha1
@@ -0,0 +1 @@
+366ded6a44cd108ba6b3f5b9a252eab3f3a95cdf
diff --git a/gcc6/mpc-1.0.3.tar.gz.sha1 b/gcc6/mpc-1.0.3.tar.gz.sha1
new file mode 100644
index 0000000..0bf49fc
--- /dev/null
+++ b/gcc6/mpc-1.0.3.tar.gz.sha1
@@ -0,0 +1 @@
+b8be66396c726fdc36ebb0f692ed8a8cca3bcc66
diff --git a/gcc6/mpfr-3.1.6.tar.bz2.sha1 b/gcc6/mpfr-3.1.6.tar.bz2.sha1
new file mode 100644
index 0000000..8dd263d
--- /dev/null
+++ b/gcc6/mpfr-3.1.6.tar.bz2.sha1
@@ -0,0 +1 @@
+c207aada1c0af969d800c16f25e0a78e15b9c9cc
