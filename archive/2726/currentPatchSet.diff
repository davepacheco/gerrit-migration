From 25baf80f684e6c9c710f04c54a6dadf55a364030 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Thu, 19 Jul 2018 08:11:13 -0600
Subject: [PATCH] joyent/node-manta#329 Refactor all commands to use common
 option parsing code Reviewed by: Robert Bogart <Robert.bogart@joyent.com>
 Reviewed by: Jared Morrow <jm@joyent.com>

---
 bin/mchattr    | 115 ++++++++++------------------
 bin/mchmod     | 124 ++++++++++++-------------------
 bin/mfind      | 198 ++++++++++++++++++++++++-------------------------
 bin/minfo      |  79 ++++++--------------
 bin/mln        | 106 +++++++++++++-------------
 bin/mmd5       |  88 ++++++++++------------
 bin/mput       |   2 +-
 bin/mrm        | 110 ++++++++++-----------------
 bin/mrmdir     |  74 ++++++------------
 bin/msign      | 167 ++++++++++++++++++++---------------------
 bin/muntar     |   2 +-
 lib/index.js   |  14 +---
 lib/options.js |  41 ++++++----
 lib/utils.js   |  16 +++-
 14 files changed, 494 insertions(+), 642 deletions(-)

diff --git a/bin/mchattr b/bin/mchattr
index 2f99486..030dfe3 100755
--- a/bin/mchattr
+++ b/bin/mchattr
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path');
@@ -13,34 +13,32 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
-        {
-            group: NAME + ' options'
-        },
-        {
-            names: ['header', 'H'],
-            type: 'arrayOfString',
-            help: 'HTTP headers to include',
-            helpArg: 'HEADER'
-        }
-    ])
-});
-
+/**
+ * Create a dashdash options parser for this command
+ *
+ * @param {String} name: Required. The command name.
+ * @returns {Object} A dashdash options parser for the command.
+ */
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS.concat([
+            {
+                group: name + ' options'
+            },
+            {
+                names: ['header', 'H'],
+                type: 'arrayOfString',
+                help: 'HTTP headers to include',
+                helpArg: 'HEADER'
+            }
+        ])
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
 function ifError(err) {
     if (err) {
@@ -50,62 +48,31 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
-    opts.headers = {};
-    (opts.header || []).forEach(function (h) {
-        if (h.indexOf(':') === -1) {
-            manta.cli_usage(OPTIONS_PARSER,
-                            'header must be in the form of "[header]: value"',
-                            'path...');
-        }
-        var tmp = h.split(':');
-        opts.headers[tmp[0]] = tmp[1].trim();
-    });
-
-    opts.paths = opts._args.map(function (p) {
-        ifError(manta.assertPath(p, true));
-        return (manta.path(p, true));
-    });
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    return (opts);
-}
-
-
 function printEntry(obj) {
     console.log('%j', obj);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    var name = path.basename(process.argv[1]);
+    var argTypes = ['mpath'];
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
     var i = -1;
     var opts = {
diff --git a/bin/mchmod b/bin/mchmod
index e2a243d..8ef0d62 100755
--- a/bin/mchmod
+++ b/bin/mchmod
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path');
@@ -13,93 +13,48 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS
-});
+///--- Functions
 
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
-function ifError(err) {
+function ifError(err, name) {
     if (err) {
-        console.error('%s: %s', NAME, err.toString());
+        console.error('%s: %s', name, err.toString());
         process.exit(1);
     }
 }
 
 
-function parseMchmodOptions(args) {
-    if (args.length < 1) {
-        manta.cli_usage(OPTIONS_PARSER, 'role required',
-                                        '-- [+-=]role,... path...');
+/**
+ * Handle command-specific options parsing and checking.
+ *
+ * @param {Object} opts: Required. A parsed options object.
+ * @param {Object} parser: Required. A dashdash option parser.
+ * @returns {Object} A possibly mutated version of the `opts` input parameter.
+ */
+function parseCmdOptions(opts, parser) {
+    if (opts._args.length < 1) {
+        manta.cli_usage(parser, 'role required',
+                        '-- [+-=]role,... path...');
     }
 
-    var roleOpt = args.shift();
+    var roleOpt = opts._args.shift();
     var operation = roleOpt.charAt(0);
 
     if (operation !== '+' && operation !== '-' && operation !== '=') {
-        manta.cli_usage(OPTIONS_PARSER,
-            'operation should be one of "+", "-" or "="');
+        manta.cli_usage(parser,
+                        'operation should be one of "+", "-" or "="');
     }
 
-    return ({
-        operation: operation,
-        roles: roleOpt.substring(1).split(',')
-    });
-}
-
-
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message,
-                                        '-- [+-=]role,... path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help) {
-        manta.cli_usage(OPTIONS_PARSER, false,
-                                        '-- [+-=]role,... path...');
-    }
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    var mchmodOpts = parseMchmodOptions(opts._args);
-    opts.mchmodOperation = mchmodOpts.operation;
-    opts.mchmodRoles = mchmodOpts.roles;
-
-    if (opts._args.length < 1) {
-        manta.cli_usage(OPTIONS_PARSER, 'path required',
-                                        '-- [+-=]role,... path...');
-    }
-
-    opts.paths = opts._args.map(function (p) {
-        ifError(manta.assertPath(p, true));
-        return (manta.path(p, true));
-    });
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message,
-                        '-- [+-=]role,... path...');
-    }
+    opts.mchmodOperation = operation;
+    opts.mchmodRoles = roleOpt.substring(1).split(',');
 
     return (opts);
 }
@@ -114,12 +69,29 @@ function printEntry(obj) {
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        parseCmdOptions: parseCmdOptions,
+        log: log,
+        extra: '-- [+-=]role,... path...'
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
     var i = -1;
 
     (function chmod(cb_err) {
-        ifError(cb_err);
+        ifError(cb_err, name);
 
         var opts = {
             headers: {}
@@ -139,11 +111,11 @@ function printEntry(obj) {
 
         client.info(p, options, function (err, info, res) {
             if (err && err.name === 'AuthorizationFailedError') {
-                console.error('%s: getobject access required for %s %s', NAME,
-                    NAME, options.mchmodOperation);
+                console.error('%s: getobject access required for %s %s', name,
+                    name, options.mchmodOperation);
                 process.exit(1);
             }
-            ifError(err);
+            ifError(err, name);
             var roles;
             if (info.headers['role-tag']) {
                 /* JSSTYLED */
diff --git a/bin/mfind b/bin/mfind
index 62b3566..820582b 100755
--- a/bin/mfind
+++ b/bin/mfind
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var http = require('http');
@@ -17,76 +17,74 @@ var vasync = require('vasync');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
-        {
-            group: NAME + ' options'
-        },
-        {
-            names: ['limit', 'l'],
-            type: 'positiveInteger',
-            help: 'limit the number of results returned',
-            helpArg: 'LIMIT'
-        },
-        {
-            names: ['name', 'n'],
-            type: 'string',
-            help: 'only list objects that match /name/',
-            helpArg: 'NAME'
-        },
-        {
-            names: ['parallel', 'p'],
-            type: 'positiveInteger',
-            help: 'limit concurrent operations (default 50)',
-            'default': 50,
-            helpArg: 'NUM'
-        },
-        {
-            names: ['size', 's'],
-            type: 'positiveInteger',
-            help: 'only list objects greater than <size> bytes',
-            helpArg: 'SIZE'
-        },
-        {
-            names: ['type', 't'],
-            type: 'string',
-            help: 'only return names of type <type> d=directory, o=object',
-            helpArg: 'd|o'
-        },
-        {
-            names: ['mindepth'],
-            type: 'positiveInteger',
-            help: 'only return items with at least this depth',
-            helpArg: 'DEPTH'
-        },
-        {
-            names: ['maxdepth'],
-            type: 'positiveInteger',
-            help: 'only return items less than this depth',
-            helpArg: 'DEPTH'
-        },
-        {
-            names: ['json', 'j'],
-            type: 'bool',
-            help: 'Output a newline-separated JSON stream of find results.'
-        }
-    ])
-});
-var TOTAL_ENTRIES = 0;
-
+/**
+ * Create a dashdash options parser for this command
+ *
+ * @param {String} name: Required. The command name.
+ * @returns {Object} A dashdash options parser for the command.
+ */
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS.concat([
+            {
+                group: name + ' options'
+            },
+            {
+                names: ['limit', 'l'],
+                type: 'positiveInteger',
+                help: 'limit the number of results returned',
+                helpArg: 'LIMIT'
+            },
+            {
+                names: ['name', 'n'],
+                type: 'string',
+                help: 'only list objects that match /name/',
+                helpArg: 'NAME'
+            },
+            {
+                names: ['parallel', 'p'],
+                type: 'positiveInteger',
+                help: 'limit concurrent operations (default 50)',
+                'default': 50,
+                helpArg: 'NUM'
+            },
+            {
+                names: ['size', 's'],
+                type: 'positiveInteger',
+                help: 'only list objects greater than <size> bytes',
+                helpArg: 'SIZE'
+            },
+            {
+                names: ['type', 't'],
+                type: 'string',
+                help: 'only return names of type <type> d=directory, o=object',
+                helpArg: 'd|o'
+            },
+            {
+                names: ['mindepth'],
+                type: 'positiveInteger',
+                help: 'only return items with at least this depth',
+                helpArg: 'DEPTH'
+            },
+            {
+                names: ['maxdepth'],
+                type: 'positiveInteger',
+                help: 'only return items less than this depth',
+                helpArg: 'DEPTH'
+            },
+            {
+                names: ['json', 'j'],
+                type: 'bool',
+                help: 'Output a newline-separated JSON stream of find results.'
+            }
+        ])
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
 function printError(epath, err) {
     console.error('mfind: in ' + epath + ': ' +
@@ -94,25 +92,17 @@ function printError(epath, err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH...]');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, '[PATH...]');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    if (opts.name)
+/**
+ * Handle command-specific options parsing and checking.
+ *
+ * @param {Object} opts: Required. A parsed options object.
+ * @param {Object} parser: Required. A dashdash option parser.
+ * @returns {Object} A possibly mutated version of the `opts` input parameter.
+ */
+function parseCmdOptions(opts, parser) {
+    if (opts.name) {
         opts.name = new RegExp(opts.name);
+    }
 
     if (!opts._args.length) {
         opts.paths = ['/' + opts.account + '/stor'];
@@ -120,12 +110,6 @@ function parseOptions() {
         opts.paths = opts._args;
     }
 
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH...]');
-    }
-
     return (opts);
 }
 
@@ -136,21 +120,33 @@ function printEntry(opts, obj) {
     } else {
         console.log(obj.parent + (obj.name ? ('/' + obj.name) : ''));
     }
-    ++TOTAL_ENTRIES;
-    if (opts.limit && TOTAL_ENTRIES >= opts.limit) {
-        process.exit(0);
-    }
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var barrier = vasync.barrier();
-    var options = parseOptions();
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        parseCmdOptions: parseCmdOptions,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
+    var barrier = vasync.barrier();
     var print = printEntry.bind(null, options);
+    var totalEntries = 0;
     var lastError;
 
     barrier.once('drain', function () {
@@ -167,7 +163,11 @@ function printEntry(opts, obj) {
                 if (err.name === 'InvalidDirectoryError') {
                     // Hack this up as the object is the full path
                     err.info.name = '';
+                    totalEntries++;
                     print(err.info);
+                    if (options.limit && totalEntries >= options.limit) {
+                        process.exit(0);
+                    }
                     barrier.done(p);
                     return;
                 } else if (err.name === 'NotFoundError') {
diff --git a/bin/minfo b/bin/minfo
index 684ef88..06946fb 100755
--- a/bin/minfo
+++ b/bin/minfo
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var http = require('http');
@@ -13,60 +13,14 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS
-});
-
-
-
 ///--- Functions
 
-function ifError(err) {
-    if (err) {
-        console.error('%s: %s', NAME, err.toString());
-        process.exit(1);
-    }
-}
-
-
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
-    opts.paths = opts._args;
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS
+    });
 
-    return (opts);
+    return (parser);
 }
 
 
@@ -85,12 +39,27 @@ function printEntry(res) {
 ///--- Mainline
 
 (function main() {
-    var opts = parseOptions();
-    var client = manta.createBinClient(opts);
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
+    var client = manta.createBinClient(options);
     var i = -1;
 
     function get() {
-        var p = opts.paths[++i];
+        var p = options.paths[++i];
         if (!p) {
             client.close();
             return;
diff --git a/bin/mln b/bin/mln
index 2c8868d..e5dbfc0 100755
--- a/bin/mln
+++ b/bin/mln
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -14,34 +14,27 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
-        {
-            group: NAME + ' options'
-        },
-        {
-            names: ['role-tag'],
-            type: 'arrayOfString',
-            help: 'role tags to apply to the destination object',
-            helpArg: 'TAG,TAG...'
-        }
-    ])
-});
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS.concat([
+            {
+                group: name + ' options'
+            },
+            {
+                names: ['role-tag'],
+                type: 'arrayOfString',
+                help: 'role tags to apply to the destination object',
+                helpArg: 'TAG,TAG...'
+            }
+        ])
+    });
 
+    return (parser);
+}
 
 
-///--- Functions
-
 function ifError(err) {
     if (err) {
         console.error('mln: ' + err.toString());
@@ -50,52 +43,55 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'source dest');
+/**
+ * Handle command-specific options parsing and checking.
+ *
+ * @param {Object} opts: Required. A parsed options object.
+ * @param {Object} parser: Required. A dashdash option parser.
+ * @returns {Object} A possibly mutated version of the `opts` input parameter.
+ */
+function parseCmdOptions(opts, parser) {
+    if (opts._args.length < 1) {
+        manta.cli_usage(parser, 'source required', 'source dest');
+    } else if (opts._args.length < 2) {
+        manta.cli_usage(parser, 'dest required', 'source dest');
     }
 
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'source dest');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME,
-        ['mpath', 'mpath', 'none']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'source required', 'source dest');
-    if (opts._args.length < 2)
-        manta.cli_usage(OPTIONS_PARSER, 'dest required', 'source dest');
-
     opts.source = path.posix.normalize(opts._args[0]);
     opts.path = path.posix.normalize(opts._args[1]);
 
+    ifError(manta.assertPath(opts.path, true));
+
     if (opts['role-tag'] && opts['role-tag'].length === 1) {
         /* JSSTYLED */
         opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
     }
 
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'source dest');
-    }
-
     return (opts);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    var argTypes = ['mpath', 'mpath', 'none'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        parseCmdOptions: parseCmdOptions,
+        log: log,
+        extra: 'source dest'
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
     var headers = {
         headers: options.headers || {}
@@ -104,8 +100,6 @@ function parseOptions() {
     if (options['role-tag'])
         headers.headers['role-tag'] = options['role-tag'].join(',');
 
-    ifError(manta.assertPath(options.path, true));
-
     client.ln(options.source, options.path, headers, function (err) {
         ifError(err);
 
diff --git a/bin/mmd5 b/bin/mmd5
index 20a5bb6..c7b1079 100755
--- a/bin/mmd5
+++ b/bin/mmd5
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -15,24 +15,16 @@ var vasync = require('vasync');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var DIR_CT = 'application/x-json-stream; type=directory';
-var HAD_ERR = false;
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS
-});
-
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
 function ifError(err) {
     if (err) {
@@ -42,34 +34,15 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
+/**
+ * Handle command-specific options parsing and checking.
+ *
+ * @param {Object} opts: Required. A parsed options object.
+ * @param {Object} parser: Required. A dashdash option parser.
+ * @returns {Object} A possibly mutated version of the `opts` input parameter.
+ */
+function parseCmdOptions(opts, parser) {
     opts.parallel = 10;
-    opts.paths = opts._args;
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
 
     return (opts);
 }
@@ -82,29 +55,48 @@ function printEntry(p, md5) {
 
 
 function printError(p, err) {
-    HAD_ERR = true;
     var msg = err ? (err.message || err) : '';
     console.error('mmd5: ' + p + ': ' + msg);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    const dirContentType = 'application/x-json-stream; type=directory';
+    var hadErr = false;
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        parseCmdOptions: parseCmdOptions,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
     var queue = new manta.Queue({
         limit: options.parallel,
         worker: function getMD5(p, cb) {
             client.info(p, function (err, info) {
                 if (err) {
+                    hadErr = true;
                     printError(p, err);
                 } else if (info.hasOwnProperty('md5')) {
                     printEntry(p, info.md5);
-                } else if (info.type === DIR_CT) {
+                } else if (info.type === dirContentType) {
+                    hadErr = true;
                     printError(p, p + ' is a directory');
                 } else {
+                    hadErr = true;
                     printError(p, 'missing MD5');
                 }
                 cb();
@@ -113,7 +105,7 @@ function printError(p, err) {
     });
 
     queue.once('end', function () {
-        process.exit(HAD_ERR ? 1 : 0);
+        process.exit(hadErr ? 1 : 0);
     });
 
     options.paths.forEach(function (p) {
diff --git a/bin/mput b/bin/mput
index 7a62ef4..77ba19c 100755
--- a/bin/mput
+++ b/bin/mput
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var crypto = require('crypto');
diff --git a/bin/mrm b/bin/mrm
index ba67301..3e6efdf 100755
--- a/bin/mrm
+++ b/bin/mrm
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path');
@@ -12,41 +12,33 @@ var dashdash = require('dashdash');
 
 var manta = require('../lib');
 
+///--- Functions
 
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS.concat([
+            {
+                group: name + ' options'
+            },
+            {
+                names: ['parallel', 'p'],
+                type: 'positiveInteger',
+                help: 'limit concurrent operations (default 50)',
+                'default': 50,
+                helpArg: 'NUM'
+            },
+            {
+                names: ['recursive', 'r'],
+                type: 'bool',
+                help: 'remove directories and their contents recursively'
+            }
+        ])
+    });
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
-        {
-            group: NAME + ' options'
-        },
-        {
-            names: ['parallel', 'p'],
-            type: 'positiveInteger',
-            help: 'limit concurrent operations (default 50)',
-            'default': 50,
-            helpArg: 'NUM'
-        },
-        {
-            names: ['recursive', 'r'],
-            type: 'bool',
-            help: 'remove directories and their contents recursively'
-        }
-    ])
-});
-
+    return (parser);
+}
 
 
-///--- Functions
-
 function ifError(err) {
     if (err) {
         console.error('mrm: ' + err.toString());
@@ -55,51 +47,31 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
-    opts.paths = opts._args.map(function (p) {
-        ifError(manta.assertPath(p, true));
-        return (manta.path(p,  true));
-    });
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    return (opts);
-}
-
-
 function printEntry(obj) {
     console.log('%j', obj);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
+
     var client = manta.createBinClient(options);
     var i = -1;
 
diff --git a/bin/mrmdir b/bin/mrmdir
index aa24620..83393aa 100755
--- a/bin/mrmdir
+++ b/bin/mrmdir
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path');
@@ -13,21 +13,16 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS
-});
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
 function ifError(err) {
     if (err) {
@@ -37,51 +32,30 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
-
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mdir']);
-
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
-    opts.paths = opts._args.map(function (p) {
-        ifError(manta.assertPath(p, true));
-        return (manta.path(p, true));
-    });
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    return (opts);
-}
-
-
 function printEntry(obj) {
     console.log('%j', obj);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
-    var options = parseOptions();
+    var argTypes = ['mdir'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        log: log
+    };
+    var options = manta.parseOptions(parseArgs);
+
     var client = manta.createBinClient(options);
     var i = -1;
 
diff --git a/bin/msign b/bin/msign
index 4dc89e4..6cd1ca0 100755
--- a/bin/msign
+++ b/bin/msign
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -14,61 +14,53 @@ var dashdash = require('dashdash');
 var manta = require('../lib');
 
 
+///--- Functions
 
-///--- Globals
-
-var NAME = path.basename(process.argv[1]);
-var LOG = bunyan.createLogger({
-    name: NAME,
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr
-});
-var METHODS = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];
-
-var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
-        {
-            group: NAME + ' options'
-        },
-        {
-            names: ['expires', 'e'],
-            type: 'positiveInteger',
-            help: 'expiration time (epoch). Default is 1hr from now.',
-            'default': Math.floor((new Date().getTime() / 1000) + 3600),
-            helpArg: 'EXPIRATION'
-        },
-        {
-            names: ['file', 'f'],
-            type: 'string',
-            help: 'Use private key. Default is to try the SSH agent first ' +
-                ' then fallback to $HOME/.ssh/id_rsa)',
-            helpArg: 'PRIVATE_KEY'
-        },
-        {
-            names: ['algorithm', 'g'],
-            type: 'string',
-            help: 'Sign using a specific algorithm.',
-            helpArg: 'PRIVATE_KEY'
-        },
-        {
-            names: ['method', 'm'],
-            type: 'arrayOfString',
-            help: 'HTTP method to support',
-            'default': ['GET'],
-            helpArg: 'METHOD'
-        },
-        {
-            names: ['role-tag'],
-            type: 'arrayOfString',
-            help: 'role tags to apply to the created object',
-            helpArg: 'TAG,TAG...'
-        }
-    ])
-});
-
+function optionsParser(name) {
+    var parser = dashdash.createParser({
+        options: manta.DEFAULT_CLI_OPTIONS.concat([
+            {
+                group: name + ' options'
+            },
+            {
+                names: ['expires', 'e'],
+                type: 'positiveInteger',
+                help: 'expiration time (epoch). Default is 1hr from now.',
+                'default': Math.floor((new Date().getTime() / 1000) + 3600),
+                helpArg: 'EXPIRATION'
+            },
+            {
+                names: ['file', 'f'],
+                type: 'string',
+                help: 'Use private key. Default is to try the SSH agent ' +
+                    ' first then fallback to $HOME/.ssh/id_rsa)',
+                helpArg: 'PRIVATE_KEY'
+            },
+            {
+                names: ['algorithm', 'g'],
+                type: 'string',
+                help: 'Sign using a specific algorithm.',
+                helpArg: 'PRIVATE_KEY'
+            },
+            {
+                names: ['method', 'm'],
+                type: 'arrayOfString',
+                help: 'HTTP method to support',
+                'default': ['GET'],
+                helpArg: 'METHOD'
+            },
+            {
+                names: ['role-tag'],
+                type: 'arrayOfString',
+                help: 'role tags to apply to the created object',
+                helpArg: 'TAG,TAG...'
+            }
+        ])
+    });
 
+    return (parser);
+}
 
-///--- Functions
 
 function ifError(err) {
     if (err) {
@@ -78,54 +70,57 @@ function ifError(err) {
 }
 
 
-function parseOptions() {
-    var opts;
-
-    try {
-        opts = OPTIONS_PARSER.parse(process.argv);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
-
-    manta.cli_logger(opts, LOG);
-
-    if (opts.help)
-        manta.cli_usage(OPTIONS_PARSER, false, 'path...');
+function isValidMethod(m) {
+    const methods = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];
+    return (methods.indexOf(m) !== -1);
+}
 
-    manta.cliVersionCheckPrintAndExit(opts);
-    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);
 
-    opts.method = opts.method.map(function (m) {
-        m = m.toUpperCase();
-        if (METHODS.indexOf(m) === -1) {
-            manta.cli_usage(OPTIONS_PARSER,
+/**
+ * Handle command-specific options parsing and checking.
+ *
+ * @param {Object} opts: Required. A parsed options object.
+ * @param {Object} parser: Required. A dashdash option parser.
+ * @returns {Object} A possibly mutated version of the `opts` input parameter.
+ */
+function parseCmdOptions(opts, parser) {
+    const methodCheck = function (m) {
+        const upperM = m.toUpperCase();
+        if (!isValidMethod(m)) {
+            manta.cli_usage(parser,
                             'method invalid: ' + m,
                             'path...');
         }
-        return (m);
-    });
 
-    if (opts._args.length < 1)
-        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');
-
-    opts.paths = opts._args;
-
-    try {
-        manta.checkBinEnv(opts);
-    } catch (e) {
-        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
-    }
+        return (upperM);
+    };
+    opts.method = opts.method.map(methodCheck);
 
     return (opts);
 }
 
 
-
 ///--- Mainline
 
 (function main() {
+    var argTypes = ['mpath'];
+    var name = path.basename(process.argv[1]);
+    var log = bunyan.createLogger({
+        name: name,
+        level: (process.env.LOG_LEVEL || 'info'),
+        stream: process.stderr
+    });
+    var parser = optionsParser(name);
+    var parseArgs = {
+        name: name,
+        parser: parser,
+        argTypes: argTypes,
+        parseCmdOptions: parseCmdOptions,
+        log: log
+    };
+    var opts = manta.parseOptions(parseArgs);
+
     var client;
-    var opts = parseOptions();
     try {
         client = manta.createBinClient(opts);
     } catch (e) {
diff --git a/bin/muntar b/bin/muntar
index afea540..aee3164 100755
--- a/bin/muntar
+++ b/bin/muntar
@@ -1,7 +1,7 @@
 #!/usr/bin/env node
 // -*- mode: js -*-
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var fs = require('fs');
diff --git a/lib/index.js b/lib/index.js
index 71b02e2..ef4d665 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,4 +1,4 @@
-// Copyright (c) 2013, Joyent, Inc. All rights reserved.
+// Copyright (c) 2018, Joyent, Inc. All rights reserved.
 
 var auth = require('smartdc-auth');
 var cc = require('./create_client');
@@ -30,17 +30,7 @@ module.exports = {
         return (auth.signUrl(opts, cb));
     },
     loadSSHKey: auth.loadSSHKey,
-    assertPath: function assertPath(p, noThrow) {
-        try {
-            manta.path(p, null);
-        } catch (e) {
-            if (noThrow)
-                return (e);
-
-            throw e;
-        }
-        return (null);
-    },
+    assertPath: utils.assertPath,
     DEFAULT_CLI_OPTIONS: cc.DEFAULT_OPTIONS,
     cli_usage: cc.usage,
     cli_logger: cc.setupLogger,
diff --git a/lib/options.js b/lib/options.js
index 75b02b2..991614d 100644
--- a/lib/options.js
+++ b/lib/options.js
@@ -1,11 +1,13 @@
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var strsplit = require('strsplit');
 
 var cc = require('./create_client');
+var client = require('./client');
+var utils = require('./utils');
 
 module.exports = {
     parseOptions: parseOptions
@@ -40,8 +42,12 @@ function parseOptions(args) {
     assert.string(args.name, 'args.name');
     assert.object(args.parser, 'args.parser');
     assert.optionalArrayOfString(args.argTypes, 'args.argTypes');
-    assert.func(args.parseCmdOptions, 'args.parseCmdOptions');
+    assert.optionalFunc(args.parseCmdOptions, 'args.parseCmdOptions');
     assert.object(args.log, 'args.log');
+    assert.optionalString(args.extra, 'args.extra');
+
+    const defaultExtra = 'path...';
+    var extra = args.extra || defaultExtra;
 
     var parser = args.parser;
     var opts;
@@ -49,39 +55,46 @@ function parseOptions(args) {
     try {
         opts = parser.parse(process.argv);
     } catch (e) {
-        cc.usage(parser, e.message, 'path...');
+        cc.usage(parser, e.message, extra);
     }
 
     cc.setupLogger(opts, args.log);
 
     if (opts.help)
-        cc.usage(parser, false, 'path...');
+        cc.usage(parser, false, extra);
 
     cc.versionCheckPrintAndExit(opts);
     cc.completionCheckPrintAndExit(opts, parser, args.name, args.argTypes);
 
-    if (opts._args.length < 1)
-        cc.usage(parser, 'path required', 'path...');
-
-    opts.paths = opts._args;
-
     opts.headers = {};
     (opts.header || []).forEach(function (h) {
         if (h.indexOf(':') === -1) {
-            cc.usage(parser, 'header must be in the form of "[header]: value"',
-                     'path...');
+            const errMsg = 'header must be in the form of "[header]: value"';
+            cc.usage(parser, errMsg, extra);
         }
         var tokens = strsplit(h, ':', 2);
         opts.headers[tokens[0]] = tokens[1].trim();
     });
 
-    args.parseCmdOptions(opts, parser);
+    if (args.parseCmdOptions) {
+        args.parseCmdOptions(opts, parser);
+    }
+
+    if (opts._args.length < 1) {
+        cc.usage(parser, 'path required', extra);
+    }
+
+    const getPath = function (p) {
+                        assert.ifError(utils.assertPath(p, true));
+                        return (client.path(p, true));
+                    };
+    opts.paths = opts._args.map(getPath);
 
     try {
         cc.checkBinEnv(opts);
     } catch (e) {
-        cc.usage(parser, e.message, 'path...');
+        cc.usage(parser, e.message, extra);
     }
 
     return (opts);
-}
\ No newline at end of file
+}
diff --git a/lib/utils.js b/lib/utils.js
index e1ae4a2..f3b55a9 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -1,8 +1,10 @@
-// Copyright (c) 2015, Joyent, Inc. All rights reserved.
+// Copyright (c) 2018, Joyent, Inc. All rights reserved.
 
 var assert = require('assert-plus');
+var manta = require('./client');
 
 module.exports = {
+    assertPath: assertPath,
     escapePath: escapePath
 };
 
@@ -11,3 +13,15 @@ function escapePath(s) {
     /*JSSTYLED*/
     return (JSON.stringify(s).replace(/^"|"$/g, '').replace(/\\"/g, '"'));
 }
+
+function assertPath(p, noThrow) {
+    try {
+        manta.path(p, null);
+    } catch (e) {
+        if (noThrow)
+          return (e);
+
+        throw e;
+    }
+    return (null);
+}
-- 
2.21.0

