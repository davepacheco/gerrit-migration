commit 074b5590b54ee14b349f20932a87c7ad7c4b4546
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-07-11T22:49:30+00:00 (3 months ago)
    
    MANTA-4405 waferlock should poll SAPI for postgres instances
    MANTA-4406 waferlock should annotate pg_hba.conf with source of IPs
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: Cody Peter Mello <cody.mello@joyent.com>

diff --git a/lib/pg_hba.js b/lib/pg_hba.js
index 81c015d..1b92f75 100644
--- a/lib/pg_hba.js
+++ b/lib/pg_hba.js
@@ -117,12 +117,16 @@ PgHbaPool.prototype.state_writing = function (S) {
 		data += 'host  replication  all  0.0.0.0/0  trust\n';
 	} else {
 		for (var key in this.php_addrs) {
+			data += mod_util.format('# %s\n',
+			    this.php_addrs[key].join(', '));
 			data += mod_util.format(
 			    'host  all  all  %s/32  trust\n', key);
 			data += mod_util.format(
 			    'host  replication  all  %s/32  trust\n', key);
 		}
 		for (key in this.php_held) {
+			data += mod_util.format('# %s (HELD)\n',
+			    this.php_addrs[key].join(', '));
 			data += mod_util.format(
 			    'host  all  all  %s/32  trust\n', key);
 			data += mod_util.format(
diff --git a/lib/sapi.js b/lib/sapi.js
index 2f739b1..3c50a7b 100644
--- a/lib/sapi.js
+++ b/lib/sapi.js
@@ -308,7 +308,9 @@ SapiPoller.prototype.state_runq_do = function (S) {
 				});
 			});
 
-			self.sp_pool.refreshTag('sapi:' + vm.uuid, ips);
+			var tag = mod_util.format('sapi:%s:%s:%s',
+			    self.sp_app, self.sp_svc, vm.uuid);
+			self.sp_pool.refreshTag(tag, ips);
 		});
 
 		if (retryEnt.vms.length > 0) {
diff --git a/lib/zk.js b/lib/zk.js
index e5a9657..9618b33 100644
--- a/lib/zk.js
+++ b/lib/zk.js
@@ -53,6 +53,7 @@ function ZKNode(cache, dir, name) {
 	this.zn_name = name;
 	this.zn_dir = dir;
 	this.zn_path = this.zn_dir + '/' + this.zn_name;
+	this.zn_tag = 'zk:' + this.zn_path;
 
 	this.zn_cache = cache;
 	this.zn_kids = {};
@@ -93,7 +94,7 @@ ZKNode.prototype.unbind = function (_zk) {
 	});
 	if (this.zn_cache.ca_nodes[this.zn_path] === this) {
 		delete (this.zn_cache.ca_nodes[this.zn_path]);
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 	}
 };
 ZKNode.prototype.onChildrenChanged = function (zk, kids, _stat) {
@@ -124,20 +125,20 @@ ZKNode.prototype.onDataChanged = function (_zk, data, _stat) {
 		/* Ignore data in a node that we can't parse */
 		this.zn_log.warn(e, 'ignoring node %s: failed to parse data',
 		    this.zn_path);
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 		return;
 	}
 	if (typeof (parsedData) !== 'object') {
 		var er = new Error('Parsed JSON data is not an object');
 		this.zn_log.warn(er, 'ignoring node %s: failed to parse data',
 		    this.zn_path);
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 		return;
 	}
 	this.zn_data = parsedData;
 
 	if (parsedData === null || typeof (parsedData.type) !== 'string') {
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 		return;
 	}
 
@@ -151,15 +152,15 @@ ZKNode.prototype.onDataChanged = function (_zk, data, _stat) {
 	case 'rr_host':
 		var record = parsedData[parsedData.type];
 		if (typeof (record) !== 'object' || record === null) {
-			this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+			this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 			break;
 		}
 		var addr = record.address;
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, [addr]);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, [addr]);
 		break;
 
 	default:
-		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		this.zn_cache.ca_pool.refreshTag(this.zn_tag, []);
 		break;
 	}
 };
diff --git a/sapi_manifests/waferlock/template b/sapi_manifests/waferlock/template
index 6cea847..386b373 100644
--- a/sapi_manifests/waferlock/template
+++ b/sapi_manifests/waferlock/template
@@ -21,8 +21,8 @@
 	{{! The SAPI polling interval can be shortened when ipmon shows
 	    denials are taking place. }}
 	"sapiPollingInterval": {
-		"max": 240,	{{! Poll at least once every 240s }}
-		"min": 30	{{! Never poll more than once every 30s }}
+		"max": 1800,	{{! Poll at least once every 1800s }}
+		"min": 300	{{! Never poll more than once every 300s }}
 	},
 
 	{{! "dns_domain" being set means we are in Triton (not Manta) }}
@@ -38,7 +38,7 @@
 			"zookeeper.{{{datacenter_name}}}.{{{dns_domain}}}"
 		],
 		"sapi_url": "{{{sapi-url}}}",
-		"sapi_services": ["sdc/moray"],
+		"sapi_services": ["sdc/moray", "sdc/manatee"],
 		"dns_domain": "{{{dns_domain}}}"
 	{{/dns_domain}}
 	{{^dns_domain}}
@@ -52,7 +52,7 @@
 			"nameservice.{{{DOMAIN_NAME}}}"
 		],
 		"sapi_url": "{{{SAPI_URL}}}",
-		"sapi_services": ["manta/moray"],
+		"sapi_services": ["manta/moray", "manta/postgres"],
 		"shard": "{{{SHARD}}}",
 		"dns_domain": "{{{DNS_DOMAIN}}}"
 	{{/dns_domain}}
