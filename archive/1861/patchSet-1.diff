commit fdf5ae4293227cd6d1e7ac99c7e524564779b5f5 (refs/changes/61/1861/1)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-04-27T15:55:13-07:00 (2 years, 5 months ago)
    
    DOCKER-1045 Using triton.network.public label should error if no ports are exposed

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index ee9966d..f9606b0 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -588,6 +588,18 @@ function addNetworksToPayload(opts, container, payload, callback) {
         function addExternalNetwork(_, next) {
             if (!opts.requireExternalNetwork && opts.config.overlay.enabled
                 && !publishingPorts(container)) {
+                // DOCKER-1045: for fabrics, it is an error if the
+                // triton.network.public label is used and no ports are being
+                // published.
+                var labels = container.Labels || {};
+                if (Object.prototype.hasOwnProperty.call(labels,
+                    TRITON_PUBLIC_NETWORK_LABEL))
+                {
+                    next(new errors.ValidationError(format(
+                        '%s label requires a container with published ports',
+                        TRITON_PUBLIC_NETWORK_LABEL)));
+                    return;
+                }
                 next();
                 return;
             }
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index ca507f1..991b0f1 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -12,6 +12,7 @@
  * Integration tests for `docker create` using the Remote API directly.
  */
 
+var assert = require('assert-plus');
 var exec = require('child_process').exec;
 var format = require('util').format;
 var libuuid = require('libuuid');
@@ -859,26 +860,32 @@ test('run external network (docker run --label triton.network.public=)',
     // Attempt a run with the external name, ensure the container is assigned
     // the external network that was asked for.
     tt.test('run with custom external network name', function (t) {
+        // DOCKER-1045: when FABRICS are enabled, we expect an error if
+        // specifying a specific external network, but are not publishing any
+        // ports.
+        var expectedErr = (FABRICS ? '(Validation) triton.network.public '
+            + 'label requires a container with published ports' : null);
+
         h.createDockerContainer({
             vmapiClient: VMAPI,
             dockerClient: DOCKER_ALICE,
             test: t,
+            expectedErr: expectedErr,
             extra: { Labels: { 'triton.network.public': externalNetwork.name }},
             start: true
         }, oncreate);
 
         function oncreate(err, result) {
-            var nics = result.vm.nics;
             if (FABRICS) {
-                // Expect two nics, one fabric and one external.
-                t.equal(nics.length, 1, 'only one nic');
-                t.equal(nics[0].nic_tag.indexOf('sdc_overlay'), 0,
-                    'no external network, only fabric');
-            } else {
-                t.equal(nics.length, 1, 'only one nic');
-                t.equal(nics[0].network_uuid, externalNetwork.uuid,
-                    'correct external network');
+                // Note: Error is already checked in createDockerContainer.
+                assert.object(err, 'err');
+                t.end();
+                return;
             }
+            var nics = result.vm.nics;
+            t.equal(nics.length, 1, 'only one nic');
+            t.equal(nics[0].network_uuid, externalNetwork.uuid,
+                'correct external network');
             DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
         }
 
