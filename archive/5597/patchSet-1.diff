commit e5c9624af21f78cf59f65f2a945f02a71d818ebc (refs/changes/97/5597/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-02-15T16:35:08-05:00 (8 months ago)
    
    OS-7588 vmadm update fails to clear already cleared zonecfg properties

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 683fa2fe..67e9fabf 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -6578,10 +6578,32 @@ function buildZonecfgUpdate(vmobj, payload, log)
     // Global properties can just be set, no need to clear anything first.
     Object.keys(propertyMap).forEach(function (vmProp) {
         if (!payload.hasOwnProperty(vmProp)) {
+            log.debug({vmProp: vmProp}, 'property "%s" not set - skipping',
+                vmProp);
             return;
         }
 
         var value = payload[vmProp];
+        var existing = vmobj[vmProp];
+
+        /*
+         * Some properties (like limitpriv) can be given as an array of strings,
+         * flatten that here as it will be flattened when stored in the vmobj.
+         */
+        if (Array.isArray(value)) {
+            assert.arrayOfString(value, 'value');
+            log.debug({vmProp: vmProp, value: value},
+                'flattening value to string');
+            value = value.join(',');
+        }
+
+        if (value === existing) {
+            log.debug({vmProp: vmProp, have: existing, want: value},
+                'property "%s" already set properly - skipping',
+                vmProp);
+            return;
+        }
+
         var o = propertyMap[vmProp];
 
         assert.object(o, 'o');
@@ -6590,6 +6612,13 @@ function buildZonecfgUpdate(vmobj, payload, log)
 
         var zcfgProp = o.prop;
 
+        log.debug({
+            vmProp: vmProp,
+            have: existing,
+            want: value,
+            zcfgProp: zcfgProp
+        }, 'processing property "%s"', vmProp);
+
         if (value === undefined) {
             // remove the property
             zcfg = zcfg + sprintf('clear %s\n', zcfgProp);
@@ -16629,6 +16658,17 @@ exports.update = function (uuid, payload, options, callback)
                     return;
                 }
 
+                /*
+                 * Keys like "fs_allowed" and "limit_priv" can be set to an
+                 * array like ["ufs","pcfs","tmpfs"] by the user but will be
+                 * stored as "ufs,pcfs,tmpfs".
+                 */
+                try {
+                    assert.arrayOfString(value);
+                    value = value.join(',');
+                } catch (e) {
+                }
+
                 /*
                  * If we are here, the key being modified does not require any
                  * special processing, so we will just watch for it to change
@@ -16653,17 +16693,6 @@ exports.update = function (uuid, payload, options, callback)
                     change.action = 'removed';
                 }
 
-                /*
-                 * Keys like "fs_allowed" can be set to an array like
-                 * ["ufs","pcfs","tmpfs"] by the user but will be stored as
-                 * "ufs,pcfs,tmpfs".
-                 */
-                try {
-                    assert.arrayOfString(value);
-                    change.newValue = value.join(',');
-                } catch (e) {
-                }
-
                 // check to see if this property has a default value
                 if (PAYLOAD_PROPERTIES.hasOwnProperty(key)
                     && PAYLOAD_PROPERTIES[key].hasOwnProperty('pr_default')) {
diff --git a/src/vm/tests/test-update.js b/src/vm/tests/test-update.js
index 144c610d..c55b06e4 100644
--- a/src/vm/tests/test-update.js
+++ b/src/vm/tests/test-update.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  */
 
@@ -273,13 +273,13 @@ var UNMODIFIABLE_PROPS = [
  * values.
  */
 var ZONECFG_PROPS = {
-    cpu_shares: [undefined, 5, undefined],
-    limit_priv: ['', 'default', 'default,dtrace_user', ''],
-    max_lwps: [undefined, 5000, undefined],
-    max_msg_ids: [undefined, 5000, undefined],
-    max_shm_ids: [undefined, 5000, undefined],
-    max_shm_memory: [undefined, 5000, undefined],
-    zfs_io_priority: [undefined, 50, undefined]
+    cpu_shares: [undefined, 5, undefined, undefined],
+    limit_priv: ['', 'default', 'default,dtrace_user', '', ''],
+    max_lwps: [undefined, 5000, undefined, undefined],
+    max_msg_ids: [undefined, 5000, undefined, undefined],
+    max_shm_ids: [undefined, 5000, undefined, undefined],
+    max_shm_memory: [undefined, 5000, undefined, undefined],
+    zfs_io_priority: [undefined, 50, undefined, undefined]
 };
 
 test('create VM', function (t) {
