commit 8310b7693cc77198fd6ed67d0ce4c2682aaeddc9 (refs/changes/58/1358/5)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-05-23T01:13:40+00:00 (2 years, 5 months ago)
    
    FWAPI-274 Want a fresher firewaller

diff --git a/Makefile b/Makefile
index 97d5adb..191cf81 100644
--- a/Makefile
+++ b/Makefile
@@ -33,9 +33,11 @@ JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
 REPO_MODULES	 = src/node-dummy
 SMF_MANIFESTS_IN = smf/manifests/firewaller.xml.in
-SDC_CLIENTS		 = node_modules/sdc-clients
 
 ifeq ($(shell uname -s),SunOS)
 	NODE_PREBUILT_VERSION=v0.10.26
@@ -64,17 +66,20 @@ DSTDIR          := $(RELSTAGEDIR)/$(NAME)
 #
 
 .PHONY: all
-all: $(SMF_MANIFESTS) | $(NODEUNIT) $(REPO_DEPS) $(SDC_CLIENTS)
+all: $(SMF_MANIFESTS) | $(REPO_DEPS)
 
-$(SDC_CLIENTS):
-	./tools/mk-sdc-clients-light.sh $(shell json -f package.json platformDependencies.sdc-clients | cut -d'#' -f2) $(SDC_CLIENTS) fwapi.js vmapi.js
+$(NODEUNIT): | node_modules
+	$(NPM) install
 
-$(NODEUNIT): node_modules
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install \
+	    eslint@`json -f package.json devDependencies.eslint` \
+	    eslint-plugin-joyent@`json -f package.json devDependencies.eslint-plugin-joyent`
 
 # Remove binary modules - we use the ones in the platform that are built
 # against the platform node
 node_modules: | $(NPM_EXEC)
-	MAKE_OVERRIDES="CTFCONVERT=/bin/true CTFMERGE=/bin/true" $(NPM) install
+	MAKE_OVERRIDES="CTFCONVERT=/bin/true CTFMERGE=/bin/true" $(NPM) install --production
 	cp -r deps/fw node_modules/
 	cp -r deps/fw-overlay/* node_modules/fw
 
@@ -130,6 +135,9 @@ publish: release
 	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
 	cp $(TOP)/$(RELEASE_MANIFEST) $(BITS_DIR)/$(NAME)/$(RELEASE_MANIFEST)
 
+.PHONY: check
+check:: $(ESLINT)
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
 
 include ./tools/mk/Makefile.deps
 ifeq ($(shell uname -s),SunOS)
diff --git a/lib/agent.js b/lib/agent.js
index 5b6e559..11dac5b 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -12,6 +12,8 @@
  * Firewaller agent daemon
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var backoff = require('backoff');
 var endpoints = require('./endpoints');
@@ -23,7 +25,7 @@ var path = require('path');
 var restify = require('restify');
 var stream = require('fast-stream');
 var tasks = require('./tasks');
-var uuid = require('node-uuid');
+var uuid = require('uuid');
 var util = require('util');
 var vasync = require('vasync');
 var VMCache = require('./cache').VMCache;
@@ -202,7 +204,8 @@ FwAgent.prototype.connect = function connect(callback) {
 
         client.connect(function (err) {
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
 
             client.ping(function (err2, res) {
diff --git a/lib/cache.js b/lib/cache.js
index 39641fe..c771c9b 100644
--- a/lib/cache.js
+++ b/lib/cache.js
@@ -22,6 +22,8 @@
  * - all vms, eg: "FROM all vms TO ..."
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var prim = require('jsprim');
 var util = require('util');
diff --git a/lib/config.js b/lib/config.js
index 2444701..c01d4a8 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -12,6 +12,8 @@
  * SDC config functions
  */
 
+'use strict';
+
 var execFile = require('child_process').execFile;
 var VError = require('verror').VError;
 
@@ -31,6 +33,8 @@ function findSysinfoAdminIP(si) {
             return iface.ip4addr;
         }
     }
+
+    return null;
 }
 
 
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index e1e939a..6822fd1 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -12,7 +12,7 @@
  * Restify endpoints
  */
 
-
+'use strict';
 
 /*
  * Endpoints are in their own individual files, in a directory structure
diff --git a/lib/endpoints/rules.js b/lib/endpoints/rules.js
index 6cb517a..21051cb 100644
--- a/lib/endpoints/rules.js
+++ b/lib/endpoints/rules.js
@@ -12,6 +12,8 @@
  * Endpoints for inspecting rules
  */
 
+'use strict';
+
 var fw = require('../fw');
 var restify = require('restify');
 
@@ -30,7 +32,7 @@ function getRule(req, res, next) {
 
     fw.get(opts, function (err, rule) {
         if (err) {
-            if (err.code == 'ENOENT') {
+            if (err.code === 'ENOENT') {
                 return next(new restify.ResourceNotFoundError(
                     'rule not found'));
             }
diff --git a/lib/endpoints/rvms.js b/lib/endpoints/rvms.js
index 14fc6ae..ee3d360 100644
--- a/lib/endpoints/rvms.js
+++ b/lib/endpoints/rvms.js
@@ -12,6 +12,8 @@
  * Endpoints for inspecting remote VMs
  */
 
+'use strict';
+
 var fw = require('../fw');
 var restify = require('restify');
 
@@ -30,7 +32,7 @@ function getRVM(req, res, next) {
 
     fw.getRVM(opts, function (err, rvm) {
         if (err) {
-            if (err.code == 'ENOENT') {
+            if (err.code === 'ENOENT') {
                 return next(new restify.ResourceNotFoundError(
                     'remote VM not found'));
             }
diff --git a/lib/endpoints/status.js b/lib/endpoints/status.js
index e369669..80a6c55 100644
--- a/lib/endpoints/status.js
+++ b/lib/endpoints/status.js
@@ -12,6 +12,8 @@
  * Status endpoint
  */
 
+'use strict';
+
 
 
 /**
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 6142783..9c91dac 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -12,6 +12,8 @@
  * Endpoints for inspecting VM firewall information
  */
 
+'use strict';
+
 var fw = require('../fw');
 
 
diff --git a/lib/fw.js b/lib/fw.js
index 2bcf196..85a41df 100644
--- a/lib/fw.js
+++ b/lib/fw.js
@@ -12,6 +12,8 @@
  * Functions for interacting with fwadm
  */
 
+'use strict';
+
 var clone = require('clone');
 var fw = require('fw');
 var fwLog = require('fw/lib/util/log');
@@ -96,7 +98,8 @@ function run(opts, fn, readOnly, callback) {
 
         if (!loggingToFile) {
             // Not logging to a file, so no need to flush the log
-            return callback(err, res);
+            callback(err, res);
+            return;
         }
 
         fwLog.flush(opts.payload.log, function () {
diff --git a/lib/fwapi.js b/lib/fwapi.js
index 4555767..2c30273 100644
--- a/lib/fwapi.js
+++ b/lib/fwapi.js
@@ -12,6 +12,8 @@
  * Functions for interacting with FWAPI
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var mod_vmapi = require('./vmapi');
 var prim = require('jsprim');
@@ -141,14 +143,16 @@ function resolve(opts, payload, callback) {
     opts.fwapi.post('/resolve', payload, function (err, resolved) {
         if (err) {
             // XXX: retry?
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (!resolved || prim.isEmpty(resolved) || !resolved.rules ||
             resolved.rules.length === 0) {
             opts.log.debug({ payload: payload, resolved: resolved },
                 'No resolve data: returning');
-            return callback();
+            callback();
+            return;
         }
 
         opts.log.debug({ resolved: resolved }, 'retrieved FWAPI resolve data');
@@ -159,7 +163,8 @@ function resolve(opts, payload, callback) {
 
         mod_vmapi.list(opts, function (err2, vms) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             var updatePayload = {
@@ -199,7 +204,8 @@ function resolveLocalVM(opts, vm, callback) {
         vm.state === 'failed') {
         opts.log.info({ uuid: vm.uuid, vm: vm },
             'Local VM does not need resolving');
-        return callback();
+        callback();
+        return;
     }
 
     var payloads = buildResolvePayload({
@@ -209,7 +215,8 @@ function resolveLocalVM(opts, vm, callback) {
 
     if (!payloads || payloads.length === 0) {
         opts.log.warn('No resolve payloads for VM "%s"', vm.uuid);
-        return callback();
+        callback();
+        return;
     }
 
     opts.fwapi = createClient(opts);
diff --git a/lib/pred.js b/lib/pred.js
index 10584d0..cd328e7 100644
--- a/lib/pred.js
+++ b/lib/pred.js
@@ -12,6 +12,8 @@
  * Functions for creating VMAPI predicates
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var prim = require('jsprim');
 var util = require('util');
diff --git a/lib/tasks/add-rule.js b/lib/tasks/add-rule.js
index ffbafd8..6f1c347 100644
--- a/lib/tasks/add-rule.js
+++ b/lib/tasks/add-rule.js
@@ -12,6 +12,8 @@
  * Add firewall rule task
  */
 
+'use strict';
+
 var fw = require('../fw');
 var mod_vmapi = require('../vmapi');
 var prim = require('jsprim');
@@ -27,18 +29,21 @@ function addRule(opts, callback) {
     if (!opts.value.enabled) {
         opts.log.info({ value: opts.value },
             'rule was disabled: not adding');
-        return callback();
+        callback();
+        return;
     }
 
     mod_vmapi.populateRemoteVMs(opts, function (err, addPayload) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (!force && prim.isEmpty(addPayload)) {
             opts.log.info({ value: opts.value },
                 'rule did not affect any VMs: not adding');
-            return callback();
+            callback();
+            return;
         }
 
         fw.add({
diff --git a/lib/tasks/del-rule.js b/lib/tasks/del-rule.js
index 076f65d..6370102 100644
--- a/lib/tasks/del-rule.js
+++ b/lib/tasks/del-rule.js
@@ -12,6 +12,8 @@
  * Delete firewall rule task
  */
 
+'use strict';
+
 var fw = require('../fw');
 var mod_vm = require('../vm');
 
@@ -26,7 +28,8 @@ function delRule(opts, callback) {
 
     mod_vm.list(opts.log, filter, function (err, vms) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var delPayload = {
@@ -40,7 +43,8 @@ function delRule(opts, callback) {
 
         fw.del(delPayload, function (err2, res2) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             // XXX: need to remove remote VMs from the cache if they're
diff --git a/lib/tasks/index.js b/lib/tasks/index.js
index 67aef33..b32c897 100644
--- a/lib/tasks/index.js
+++ b/lib/tasks/index.js
@@ -12,6 +12,8 @@
  * Agent tasks
  */
 
+'use strict';
+
 var TASKS = {
     'fw.add_rule': 'add-rule',
     'fw.del_rule': 'del-rule',
diff --git a/lib/tasks/ping.js b/lib/tasks/ping.js
index fe3b5f1..15893ef 100644
--- a/lib/tasks/ping.js
+++ b/lib/tasks/ping.js
@@ -12,6 +12,8 @@
  * Ping task
  */
 
+'use strict';
+
 
 function ping(opts, callback) {
     opts.log.debug(opts.value, 'Ping received');
diff --git a/lib/tasks/sync.js b/lib/tasks/sync.js
index a25acb4..e332d62 100644
--- a/lib/tasks/sync.js
+++ b/lib/tasks/sync.js
@@ -12,8 +12,9 @@
  * Syncs the rule and remote VM state with FWAPI and VMAPI
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var async = require('async');
 var fw = require('../fw');
 var mod_fwapi = require('../fwapi');
 var mod_vm = require('../vm');
@@ -94,7 +95,7 @@ function removeDeletedRules(opts, callback) {
 
     opts.allRules.forEach(function (rule) {
         // Omit local-only rules
-        if (rule.created_by != 'fwapi') {
+        if (rule.created_by !== 'fwapi') {
             local.push(rule);
             return;
         }
@@ -116,7 +117,8 @@ function removeDeletedRules(opts, callback) {
 
     if (toDel.rvmUUIDs.length === 0 && toDel.uuids.length === 0) {
         opts.log.info('No removed rules or RVMs to delete');
-        return callback();
+        callback();
+        return;
     }
 
     opts.log.info(toDel, 'deleting rules / RVMs');
@@ -160,9 +162,7 @@ function syncFromAPIs(opts, callback) {
  */
 function syncToFWAPI(opts, callback) {
     opts.log.debug('Syncing rules to FWAPI');
-    /*jsl:ignore*/
     var hitError = false;
-    /*jsl:end*/
     var toSync = [];
 
     for (var r in opts.allRules) {
@@ -175,18 +175,20 @@ function syncToFWAPI(opts, callback) {
 
     if (toSync.length === 0) {
         opts.log.info('No local rules to sync to FWAPI');
-        return callback();
+        callback();
+        return;
     }
 
     opts.log.debug({ rules: toSync }, 'rules to sync');
 
-    async.forEachSeries(toSync, function _update(syncRule, cb) {
+    function syncRuleToFWAPI(syncRule, cb) {
         opts.fwapi.createRule(syncRule, function (cErr, newRule) {
             if (cErr) {
                 opts.log.error({ err: cErr, rule: syncRule },
                     'Error creating rule in FWAPI');
                 hitError = true;
-                return cb();
+                cb();
+                return;
             }
 
             // Need to re-add the rule so that it gets created_by=fwapi
@@ -213,9 +215,21 @@ function syncToFWAPI(opts, callback) {
                 return cb();
             });
         });
+    }
+
+    vasync.forEachPipeline({
+        inputs: toSync,
+        func: syncRuleToFWAPI
     }, function _doneFWAPI(finalErr) {
         opts.log.debug('Done syncing rules to FWAPI');
-        return callback(finalErr);
+        if (finalErr) {
+            callback(finalErr);
+        } else if (hitError) {
+            callback(
+                new Error('failed to sync all local firewall rules to FWAPI'));
+        } else {
+            callback();
+        }
     });
 }
 
@@ -231,15 +245,19 @@ function syncToFWAPI(opts, callback) {
  */
 function updateOwnerRules(opts, callback) {
     var hitError = false;
-    async.eachSeries(opts.resolve, function _update(payload, cb) {
-        mod_fwapi.resolve(opts, payload, function (err) {
-            if (err) {
-                opts.log.error(err,
-                    'partial failure while syncing firewall rules');
-                hitError = true;
-            }
-            return cb();
-        });
+    vasync.forEachPipeline({
+        inputs: opts.resolve,
+        func: function _update(payload, cb) {
+            mod_fwapi.resolve(opts, payload, function (err) {
+                if (err) {
+                    opts.log.error(err,
+                        'partial failure while syncing firewall rules');
+                    hitError = true;
+                }
+
+                cb();
+            });
+        }
     }, function _done(err) {
         opts.log.debug(opts.cache.state, 'cache state after resolve');
         if (err) {
diff --git a/lib/tasks/update-rule.js b/lib/tasks/update-rule.js
index 4414f40..7e98c79 100644
--- a/lib/tasks/update-rule.js
+++ b/lib/tasks/update-rule.js
@@ -12,6 +12,8 @@
  * Update firewall rule task
  */
 
+'use strict';
+
 var fw = require('../fw');
 var mod_vm = require('../vm');
 var mod_vmapi = require('../vmapi');
@@ -24,17 +26,19 @@ function updateRule(opts, callback) {
 
     mod_vmapi.populateRemoteVMs(opts, function (err, updatePayload) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (!prim.isEmpty(updatePayload)) {
             // Rule affects local VMs, so update it regardless of
             // whether or not it actually exists
-            return fw.update({
+            fw.update({
                 log: opts.log,
                 payload: updatePayload,
                 req_id: opts.req_id
             }, callback);
+            return;
         }
 
         fw.get({
@@ -43,13 +47,15 @@ function updateRule(opts, callback) {
             req_id: opts.req_id
         }, function (getErr, res) {
             if (getErr) {
-                if (getErr.code == 'ENOENT') {
+                if (getErr.code === 'ENOENT') {
                     opts.log.info(opts.value, 'rule did not affect any VMs '
                         + 'and did not exist: not updating');
-                    return callback();
+                    callback();
+                    return;
                 }
 
-                return callback(getErr);
+                callback(getErr);
+                return;
             }
 
             opts.log.info(opts.value,
diff --git a/lib/tasks/vm-add.js b/lib/tasks/vm-add.js
index ce0b517..f6312f9 100644
--- a/lib/tasks/vm-add.js
+++ b/lib/tasks/vm-add.js
@@ -12,6 +12,8 @@
  * Add remote VM task
  */
 
+'use strict';
+
 var mod_fwapi = require('../fwapi');
 var mod_vm = require('../vm');
 
diff --git a/lib/tasks/vm-common.js b/lib/tasks/vm-common.js
index 152b63c..29e5ab2 100644
--- a/lib/tasks/vm-common.js
+++ b/lib/tasks/vm-common.js
@@ -12,6 +12,8 @@
  * Common routines for managing VMs.
  */
 
+'use strict';
+
 var fw = require('../fw');
 
 
diff --git a/lib/tasks/vm-delete.js b/lib/tasks/vm-delete.js
index b79af3b..63cb1bb 100644
--- a/lib/tasks/vm-delete.js
+++ b/lib/tasks/vm-delete.js
@@ -12,6 +12,8 @@
  * Delete remote VM task
  */
 
+'use strict';
+
 var fw = require('../fw');
 var mod_vm = require('../vm');
 
@@ -27,14 +29,16 @@ function deleteVM(opts, callback) {
 
     if (!opts.value.uuid) {
         opts.log.warn(opts.value, 'Remote VM missing UUID: not deleting');
-        return callback();
+        callback();
+        return;
     }
 
     // XXX: validate other properties
 
     mod_vm.list(opts.log, filter, function (err, vms) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var payload = {
diff --git a/lib/tasks/vm-update.js b/lib/tasks/vm-update.js
index 6904e38..533de74 100644
--- a/lib/tasks/vm-update.js
+++ b/lib/tasks/vm-update.js
@@ -12,6 +12,8 @@
  * Update remote VM task
  */
 
+'use strict';
+
 var clone = require('clone');
 var fw = require('../fw');
 var mod_common = require('./vm-common');
diff --git a/lib/vm.js b/lib/vm.js
index 2f4371b..6cd2d4f 100644
--- a/lib/vm.js
+++ b/lib/vm.js
@@ -12,6 +12,8 @@
  * Functions for interacting with vmadm
  */
 
+'use strict';
+
 var fw = require('./fw');
 var execFile = require('child_process').execFile;
 
@@ -22,7 +24,7 @@ var VMADM = '/usr/sbin/vmadm';
 
 function isLocal(vms, vm) {
     for (var v in vms) {
-        if (vms[v].uuid == vm.uuid) {
+        if (vms[v].uuid === vm.uuid) {
             return vms[v];
         }
     }
diff --git a/lib/vmapi.js b/lib/vmapi.js
index 8d8c8df..7fc77cd 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -12,6 +12,8 @@
  * Functions for interacting with VMAPI
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var fw = require('./fw');
 var mod_vm = require('./vm');
@@ -104,7 +106,8 @@ function listVMs(opts, callback) {
         opts.log.debug(
             'vmapi.list: No tags, vms or allVMs for owner "%s": not getting',
             opts.filter.owner_uuid);
-        return callback();
+        callback();
+        return;
     }
 
     var tags = filter.tags || {};
@@ -188,7 +191,8 @@ function populateRemoteVMs(opts, callback) {
 
     mod_vm.list(opts.log, filter, function (err, vms) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         payload.vms = vms;
@@ -206,13 +210,15 @@ function populateRemoteVMs(opts, callback) {
         // Check if any local VMs are targeted by this rule
         fw.vms(vmsPayload, function (err2, matching) {
             if (err2) {
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             if (!force && (!matching || matching.length === 0)) {
                 // No local VMs are targeted: return an empty object so the
                 // caller knows not to do anything.
-                return callback(null, {});
+                callback(null, {});
+                return;
             }
 
             var remotePayload = {
@@ -225,7 +231,8 @@ function populateRemoteVMs(opts, callback) {
             // local VMs
             fw.remoteTargets(remotePayload, function (err3, targets) {
                 if (err3) {
-                    return callback(err3);
+                    callback(err3);
+                    return;
                 }
 
                 opts.log.debug({ rule: opts.value, targets: targets },
@@ -233,7 +240,8 @@ function populateRemoteVMs(opts, callback) {
 
                 if (prim.isEmpty(targets)) {
                     // No remote targets - no need to hit VMAPI
-                    return callback(null, payload);
+                    callback(null, payload);
+                    return;
                 }
 
                 var toFilter = opts.cache.missing(owner, targets);
@@ -242,13 +250,15 @@ function populateRemoteVMs(opts, callback) {
                     // VMAPI
                     opts.log.debug({ rule: opts.value },
                         'No missing targets: not fetching from VMAPI');
-                    return callback(null, payload);
+                    callback(null, payload);
+                    return;
                 }
 
                 if (!owner) {
                     opts.log.debug({ rule: opts.value },
                         'No rule owner: not fetching VMs from VMAPI');
-                    return callback(null, payload);
+                    callback(null, payload);
+                    return;
                 }
 
                 opts.log.debug({ rule: opts.value, missing: toFilter },
diff --git a/main.js b/main.js
index 981c393..124badd 100644
--- a/main.js
+++ b/main.js
@@ -12,6 +12,8 @@
  * Firewaller agent
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var config = require('./lib/config');
diff --git a/package.json b/package.json
index f74385b..cbe8977 100644
--- a/package.json
+++ b/package.json
@@ -13,16 +13,15 @@
         "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
         "jsprim": "0.5.0",
         "lockfd": "1.0.1",
-        "node-uuid": "1.2.0",
-        "once": "1.1.1",
         "restify": "2.6.1",
+        "sdc-clients": "10.2.0",
+        "uuid": "3.0.1",
         "vasync": "1.6.3",
         "verror": "1.3.6"
     },
-    "platformDependencies": {
-        "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#9d4678c"
-    },
     "devDependencies": {
+        "eslint": "2.13.1",
+        "eslint-plugin-joyent": "1.1.0",
         "once": "1.3.0",
         "ldapjs": "0.7.0",
         "mockery": "1.4.0",
diff --git a/test/lib/cache.js b/test/lib/cache.js
index 6d74e8f..6617089 100644
--- a/test/lib/cache.js
+++ b/test/lib/cache.js
@@ -12,6 +12,7 @@
  * cache helpers
  */
 
+'use strict';
 
 
 // --- Internal
diff --git a/test/lib/log.js b/test/lib/log.js
index 82104f8..a7a9e41 100644
--- a/test/lib/log.js
+++ b/test/lib/log.js
@@ -12,6 +12,8 @@
  * bunyan logger for tests: it's better than bad, it's good!
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
 
 module.exports = bunyan.createLogger({
diff --git a/test/lib/rule.js b/test/lib/rule.js
index 1bebc2d..b0edd72 100644
--- a/test/lib/rule.js
+++ b/test/lib/rule.js
@@ -12,6 +12,8 @@
  * rule helpers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var h = require('../unit/helpers');
 var mocks = require('../unit/mocks');
diff --git a/test/lib/rvm.js b/test/lib/rvm.js
index 5c3577a..a690a86 100644
--- a/test/lib/rvm.js
+++ b/test/lib/rvm.js
@@ -12,6 +12,8 @@
  * Remote VM helpers
  */
 
+'use strict';
+
 var h = require('../unit/helpers');
 
 
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 6864cff..14ef5d5 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -12,6 +12,8 @@
  * VM helpers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var h = require('../unit/helpers');
 var fwHelper = require('../../node_modules/fw/test/lib/helpers');
diff --git a/test/unit/all-vms.test.js b/test/unit/all-vms.test.js
index 43d12d7..49b69e5 100644
--- a/test/unit/all-vms.test.js
+++ b/test/unit/all-vms.test.js
@@ -12,11 +12,13 @@
  * Tests for adding / updating 'all vms' rules
  */
 
+'use strict';
+
 var fmt = require('util').format;
 var h = require('./helpers');
 var mod_rule = require('../lib/rule');
 var mod_rvm = require('../lib/rvm');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 
 
 
diff --git a/test/unit/cache.test.js b/test/unit/cache.test.js
index 7b05522..7f80014 100644
--- a/test/unit/cache.test.js
+++ b/test/unit/cache.test.js
@@ -12,8 +12,10 @@
  * tests for the VM cache
  */
 
+'use strict';
+
 var mod_cache = require('../lib/cache');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var VMCache = require('../../lib/cache').VMCache;
 
 
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 3705fb0..40971e1 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -12,6 +12,7 @@
  * unit test helpers
  */
 
+'use strict';
 
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
@@ -25,7 +26,7 @@ var extend = require('xtend');
 var fs = require('fs');
 var jsprim = require('jsprim');
 var mocks = require('./mocks');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var once = require('once');
 var path = require('path');
 var pred = require('../../lib/pred');
@@ -183,7 +184,6 @@ function setupMocks() {
         '../vmapi',
         '../../lib/agent',
         '../../spdy',
-        'async',
         'backoff',
         'buffer',
         'crypto',
@@ -206,6 +206,7 @@ function setupMocks() {
         'semver',
         'spdy',
         'url',
+        'uuid',
         'zlib'
     ];
 
@@ -284,7 +285,8 @@ function createAgent(t, connect, callback) {
         AGENT = firewaller.create(conf);
         t.ok(AGENT, 'created agent');
         if (!connect) {
-            return callback(AGENT);
+            callback(AGENT);
+            return;
         }
 
         AGENT.connect(function (err2) {
@@ -469,7 +471,7 @@ function sendMessage(name, value, callback) {
 
     AGENT.once('task-complete', done);
     STREAM.send(toSend);
-    setTimeout(done, 2000);
+    setTimeout(done, 2000, new Error('timed out'));
 }
 
 
diff --git a/test/unit/mocks.js b/test/unit/mocks.js
index 24f9b21..3d370eb 100644
--- a/test/unit/mocks.js
+++ b/test/unit/mocks.js
@@ -12,6 +12,8 @@
  * Mock objects for firewaller unit tests
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var clone = require('clone');
@@ -79,7 +81,7 @@ function values(obj, sort) {
 
 
 
-function execFileVmadm(cmd, args, opts, callback) {
+function execFileVmadm(cmd, args, _, callback) {
     assert.equal(cmd, '/usr/sbin/vmadm');
     assert.arrayOfString(args, 'args');
     assert.equal(args[0], 'lookup');
@@ -109,7 +111,7 @@ function createWriteStream() {
 
 
 
-function mockFWAPI(opts) {
+function MockFWAPI(opts) {
     assert.object(opts, 'opts');
     this.log = LOG.child({ component: 'fwapi' });
     this.client = {
@@ -118,7 +120,7 @@ function mockFWAPI(opts) {
 }
 
 
-mockFWAPI.prototype._addReq = function addReq(route, params, callback) {
+MockFWAPI.prototype._addReq = function addReq(route, params) {
     if (!FWAPI_REQS.hasOwnProperty(route)) {
         FWAPI_REQS[route] = [];
     }
@@ -127,7 +129,7 @@ mockFWAPI.prototype._addReq = function addReq(route, params, callback) {
 };
 
 
-mockFWAPI.prototype.createRule = function createRule(params, callback) {
+MockFWAPI.prototype.createRule = function createRule(params, callback) {
     if (!params.hasOwnProperty('uuid')) {
         return callback(new Error('uuid is required!'));
     }
@@ -142,7 +144,7 @@ mockFWAPI.prototype.createRule = function createRule(params, callback) {
 };
 
 
-mockFWAPI.prototype.post = function post(endpoint, params, callback) {
+MockFWAPI.prototype.post = function post(endpoint, params, callback) {
     assert.equal(endpoint, '/resolve');
     assert.object(params, 'params');
     assert.string(params.owner_uuid, 'params.owner_uuid');
@@ -165,7 +167,7 @@ mockFWAPI.prototype.post = function post(endpoint, params, callback) {
 
 
 
-function mockVMAPI(opts) {
+function MockVMAPI(opts) {
     assert.object(opts, 'opts');
     this.log = LOG.child({ component: 'vmapi' });
     this.client = {
@@ -174,7 +176,7 @@ function mockVMAPI(opts) {
 }
 
 
-mockVMAPI.prototype.get = function vmsGet(params, callback) {
+MockVMAPI.prototype.get = function vmsGet(params, callback) {
     assert.object(params, 'params');
     assert.string(params.path, 'params.path');
     assert.object(params.query, 'params.query');
@@ -255,7 +257,7 @@ function getVMAPIrequests() {
 function localVMs() {
     return clone(values(VMS).filter(function (vm) {
         return (vm.hasOwnProperty('server_uuid') &&
-            vm.server_uuid == LOCAL_SERVER);
+            vm.server_uuid === LOCAL_SERVER);
     }));
 }
 
@@ -344,7 +346,7 @@ module.exports = {
         createLogger: function createLogger() {
             // Prevent createLogger() in fw.js from adding a file stream
             // to our logger:
-            FW_LOG.child = function (args) {
+            FW_LOG.child = function (_) {
                 return FW_LOG;
             };
 
@@ -356,8 +358,8 @@ module.exports = {
     },
 
     'sdc-clients': {
-        FWAPI: mockFWAPI,
-        VMAPI: mockVMAPI
+        FWAPI: MockFWAPI,
+        VMAPI: MockVMAPI
     },
 
     // -- mock data getters / setters,  other non-mock stuff
diff --git a/test/unit/rule-add.test.js b/test/unit/rule-add.test.js
index a518e4e..62867b3 100644
--- a/test/unit/rule-add.test.js
+++ b/test/unit/rule-add.test.js
@@ -12,10 +12,12 @@
  * add-rule task unit tests
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_cache = require('../lib/cache');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
 
@@ -47,7 +49,9 @@ var d = {
 exports.setup = function (t) {
     h.createAgent(t, true, function (err, a) {
         agent = a;
-        return t.done();
+        t.ifError(err, 'createAgent() error');
+        t.ok(agent, 'agent created');
+        t.done();
     });
 };
 
@@ -69,10 +73,14 @@ exports['missing rule sent'] = function (t) {
         vms: d.vms
     });
 
-    h.send('fw.add_rule', null, function (msg) {
+    h.send('fw.add_rule', null, function (err, msg) {
         // A message received event will not be emitted, since the message
         // should be ignored
         t.ok(!msg, 'message not received');
+        t.ok(err, 'timeout error returned');
+        if (err) {
+            t.equal(err.message, 'timed out', 'correct error');
+        }
 
         mod_rule.localEquals(t, d.exp.rules, 'rule not added');
         t.deepEqual(h.localRVMs(), [], 'no remote VMs added');
@@ -114,10 +122,14 @@ exports['multiple tags'] = {
     // be added
     'add rule: vm 0 local': function (t) {
         mod_rule.add(t, d.rules[0], function (err, msg) {
+            t.ifError(err, 'error returned');
             if (err) {
-                return t.done();
+                t.done();
+                return;
             }
 
+            t.ok(msg, 'message returned');
+
             d.exp.rules = [ d.rules[0] ];
             d.exp.rvms = [ h.vmToRVM(d.vms[1]) ];
 
@@ -136,7 +148,7 @@ exports['multiple tags'] = {
                     [ 'couch', '2' ]
                 ]
             }), 'VMAPI request');
-            return t.done();
+            t.done();
         });
     },
 
@@ -163,10 +175,14 @@ exports['multiple tags'] = {
 
     'add rule: vm 1 local': function (t) {
         mod_rule.add(t, d.rules[0], function (err, msg) {
+            t.ifError(err, 'error returned');
             if (err) {
-                return t.done();
+                t.done();
+                return;
             }
 
+            t.ok(msg, 'message returned');
+
             d.exp.rules = [ d.rules[0] ];
             d.exp.rvms = [ h.vmToRVM(d.vms[0]) ];
 
@@ -185,7 +201,7 @@ exports['multiple tags'] = {
                     [ 'couch', '2' ]
                 ]
             }), 'VMAPI request');
-            return t.done();
+            t.done();
         });
     }
 };
diff --git a/test/unit/rule-delete.test.js b/test/unit/rule-delete.test.js
index 4190594..b014e28 100644
--- a/test/unit/rule-delete.test.js
+++ b/test/unit/rule-delete.test.js
@@ -12,9 +12,11 @@
  * del-rule task unit tests
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
 
@@ -35,6 +37,7 @@ exports.setup = function (t) {
     h.createAgent(t, true, function (err, a) {
         agent = a;
         t.ifError(err, 'createAgent() error');
+        t.ok(agent, 'agent created');
         t.done();
     });
 };
@@ -59,7 +62,7 @@ exports['vmadm list error'] = function (t) {
             t.equal(err.message, errMsg, 'error message');
         }
 
-        return t.done();
+        t.done();
     });
 };
 
diff --git a/test/unit/rule-update.test.js b/test/unit/rule-update.test.js
index 13b29f3..05066f2 100644
--- a/test/unit/rule-update.test.js
+++ b/test/unit/rule-update.test.js
@@ -12,10 +12,12 @@
  * update-rule task unit tests
  */
 
+'use strict';
+
 var fmt = require('util').format;
 var h = require('./helpers');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
 
@@ -40,7 +42,9 @@ var d = {
 exports.setup = function (t) {
     h.createAgent(t, true, function (err, a) {
         agent = a;
-        return t.done();
+        t.ifError(err, 'createAgent() error');
+        t.ok(agent, 'agent created');
+        t.done();
     });
 };
 
@@ -96,9 +100,12 @@ exports['update to not affect local VMs'] = {
         mod_rule.add(t, d.rules[0], function (err, msg) {
             t.ifError(err, 'add rule');
             if (err) {
-                return t.done();
+                t.done();
+                return;
             }
 
+            t.ok(msg, 'message returned');
+
             mod_rule.localEquals(t, d.rules, 'rule added');
             mod_vm.ipfRule(t, {
                 direction: 'in',
@@ -107,7 +114,7 @@ exports['update to not affect local VMs'] = {
                 target: 'any',
                 vm: d.vms[0]
             });
-            return t.done();
+            t.done();
         });
     },
 
diff --git a/test/unit/sync.test.js b/test/unit/sync.test.js
index 9348373..708f8ad 100644
--- a/test/unit/sync.test.js
+++ b/test/unit/sync.test.js
@@ -12,11 +12,13 @@
  * sync task unit tests
  */
 
+'use strict';
+
 var extend = require('xtend');
 var h = require('./helpers');
 var mod_rule = require('../lib/rule');
 var mod_rvm = require('../lib/rvm');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
 
diff --git a/test/unit/vm-add.test.js b/test/unit/vm-add.test.js
index 9682b65..803ea5b 100644
--- a/test/unit/vm-add.test.js
+++ b/test/unit/vm-add.test.js
@@ -12,10 +12,12 @@
  * vm.add task unit tests
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_cache = require('../lib/cache');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 
 
diff --git a/test/unit/vm-delete.test.js b/test/unit/vm-delete.test.js
index 2d77923..f6bb676 100644
--- a/test/unit/vm-delete.test.js
+++ b/test/unit/vm-delete.test.js
@@ -12,6 +12,8 @@
  * vm.delete task unit tests
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_vm = require('../lib/vm');
 
@@ -32,6 +34,7 @@ var agent;
 exports.setup = function (t) {
     h.createAgent(t, true, function (err, a) {
         agent = a;
+        t.ok(agent, 'agent created');
         t.ifError(err, 'createAgent() error');
         t.done();
     });
diff --git a/test/unit/vm-update.test.js b/test/unit/vm-update.test.js
index dd48360..5a4eef5 100644
--- a/test/unit/vm-update.test.js
+++ b/test/unit/vm-update.test.js
@@ -12,10 +12,12 @@
  * vm.update task unit tests
  */
 
+'use strict';
+
 var h = require('./helpers');
 var mod_cache = require('../lib/cache');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
+var mod_uuid = require('uuid');
 var mod_vm = require('../lib/vm');
 var util = require('util');
 
@@ -275,9 +277,11 @@ exports['update so rules no longer affect VM'] = {
         });
 
         mod_rule.add(t, d.rules[0], function (err, msg) {
+            t.ok(msg, 'message returned');
             t.ifError(err, 'add rule');
             if (err) {
-                return t.done();
+                t.done();
+                return;
             }
 
             mod_rule.localEquals(t, d.rules, 'rule added');
@@ -289,7 +293,7 @@ exports['update so rules no longer affect VM'] = {
                 vm: d.vms[0]
             });
 
-            return t.done();
+            t.done();
         });
     },
 
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..ae6d704
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index c7eed92..e044ac4 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
@@ -118,6 +118,7 @@
 +define module
 +define process
 +define require
++define setImmediate
 +define setInterval
 +define setTimeout
 +define Buffer
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
index b44368c..edaff72 100644
--- a/tools/jsstyle.conf
+++ b/tools/jsstyle.conf
@@ -11,3 +11,4 @@
 indent=4
 doxygen
 unparenthesized-return=0
+strict-indent=true
diff --git a/tools/mk-sdc-clients-light.sh b/tools/mk-sdc-clients-light.sh
deleted file mode 100755
index d21de76..0000000
--- a/tools/mk-sdc-clients-light.sh
+++ /dev/null
@@ -1,272 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Create a "light" version of sdc-clients and its npm deps. Specifically this
-# is about having a binary-module-free and small distro of sdc-clients for
-# usage in the platform.
-#
-# Here "light" means:
-# - no ldapjs and the clients that use it (not currently needed by platform
-#   scripts)
-# - no binary modules
-# - Stripped down npm module installs. We attempt to get it down to:
-#       $NAME/
-#           package.json
-#           index.js
-# - flatten deps (i.e. no deeply nested node_modules dirs)
-#
-#
-# Warnings:
-# - This *does* involve taking liberties with specified dependency
-#   versions. E.g. You get the version of the shared dtrace-provider already
-#   in "/usr/node/node_modules/dtrace-provider".
-# - This will start with the node-sdc-clients.git#master and attempt to get
-#   the version of deps that its package.json specifies. However, you need
-#   to worry about recursive version mismatches and new/removed module
-#   deps manually.
-#
-#
-# Usage:
-#       ./mk-sdc-clients-light.sh [SHA] [TARGET-DIR] [LIBS...]
-#
-# By default SHA is "master". It is the version of node-sdc-clients.git to use.
-# By default TARGET-DIR is "./node_modules/sdc-clients".
-# By default if LIBS is excluded, then all sdc-clients/lib/*.js API modules
-#       are included. Note that UFDS-direct "APIs" are always excluded
-#       (ufds.js, etc.) If any LIBS are specified, then only those are
-#       kept.
-#
-#
-# Examples:
-#       ./mk-sdc-clients-light.sh master node_modules/sdc-clients imgapi.js amon.js
-#
-
-if [ "$TRACE" != "" ]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-
-#---- support stuff
-
-function fatal
-{
-    echo "$(basename $0): fatal error: $*"
-    exit 1
-}
-
-function errexit
-{
-    [[ $1 -ne 0 ]] || exit 0
-    fatal "error exit status $1 at line $2"
-}
-
-trap 'errexit $? $LINENO' EXIT
-
-
-
-#---- mainline
-
-SHA=$1
-if [[ -z "$SHA" ]]; then
-    SHA=master
-fi
-shift
-
-D=$1
-if [[ -z "$D" ]]; then
-    D=node_modules/sdc-clients
-fi
-shift
-
-LIBS=$*
-
-rm -rf $D
-mkdir -p $D
-cd $D
-
-# sdc-clients (stripped of ldap-using clients)
-mkdir _repos
-(cd _repos && git clone https://github.com/joyent/node-sdc-clients.git)
-(cd _repos/node-sdc-clients && git checkout $SHA)
-mv _repos/node-sdc-clients/{package.json,lib} .
-(cd lib && rm -f config.js package.js ufds.js mapi.javascript assertions.js)
-
-if [[ -n "$LIBS" ]]; then
-    for LIB in $(cd lib && ls -1 *api.js) amon.js ca.js; do
-        if [[ -z $(echo "$LIBS" | grep "\<$LIB\>") ]]; then
-            rm -f lib/$LIB
-        fi
-    done
-fi
-
-# restify (stripped down just for client usage)
-DEP=$(json -f package.json dependencies.restify)
-if [[ ${DEP:0:6} == "git://" ]]; then
-    (cd _repos && git clone git://github.com/mcavage/node-restify.git)
-    SHA=$(json -f package.json dependencies.restify | cut -d'#' -f2)
-    [[ -n "$SHA" ]] || fatal "error finding restify dep git sha"
-    (cd _repos/node-restify && git checkout $SHA)
-    mkdir -p node_modules/restify
-    mv _repos/node-restify/{LICENSE,package.json,lib} node_modules/restify
-else
-    npm install restify@$DEP
-    (cd node_modules/restify \
-        && rm -rf node_modules bin README.md CHANGES.md .npmignore)
-fi
-(cd node_modules/restify/lib \
-    && rm -rf formatters plugins request.js response.js \
-        router.js server.js)
-
-# assert-plus
-npm install assert-plus
-
-# backoff (used by restify)
-VER=$(json -f node_modules/restify/package.json dependencies.backoff)
-npm install backoff@$VER
-(cd node_modules/backoff \
-    && rm -rf .[a-z]* examples README.md tests)
-
-# clone (used by restify)
-VER=$(json -f node_modules/restify/package.json dependencies.clone)
-npm install clone@$VER
-(cd node_modules/clone \
-    && rm -rf .[a-z]* README.md test.js)
-
-# verror
-VER=$(json -f package.json dependencies.verror)
-npm install verror@$VER
-(cd node_modules/verror \
-    && rm -rf .[a-z]* node_modules README.md examples Makefile* jsl.node.conf tests)
-
-# extsprintf (used by verror)
-VER=$(json -f node_modules/verror/package.json dependencies.extsprintf)
-npm install extsprintf@$VER
-(cd node_modules/extsprintf \
-    && rm -rf .[a-z]* node_modules README.md examples Makefile* jsl.node.conf)
-
-# async
-VER=$(json -f package.json dependencies.async)
-npm install async@$VER
-(cd node_modules/async \
-    && rm -rf .[a-z]* node_modules README.md Makefile*)
-
-# vasync
-VER=$(json -f package.json dependencies.vasync)
-npm install vasync@$VER
-(cd node_modules/vasync \
-    && rm -rf .[a-z]* node_modules README.md examples Makefile* jsl.node.conf)
-
-# jsprim (used by vasync)
-VER=$(json -f node_modules/vasync/package.json dependencies.jsprim)
-npm install jsprim@$VER
-(cd node_modules/jsprim \
-    && rm -rf .[a-z]* node_modules README.md Makefile* test jsl.node.conf)
-
-# json-schema (used by jsprim, but not by our code path, so we no-op it)
-touch node_modules/json-schema.js
-
-# keep-alive-agent (used by restify)
-VER=$(json -f node_modules/restify/package.json dependencies.keep-alive-agent)
-npm install keep-alive-agent@$VER
-(cd node_modules/keep-alive-agent \
-    && rm -rf .[a-z]* node_modules README.md test)
-
-# lru-cache
-VER=$(json -f package.json dependencies.lru-cache)
-npm install lru-cache@$VER
-(cd node_modules/lru-cache \
-    && rm -rf .[a-z]* node_modules AUTHORS README.md test)
-
-# mime (used by restify)
-VER=$(json -f node_modules/restify/package.json dependencies.mime)
-npm install mime@$VER
-(cd node_modules/mime \
-    && rm -rf .[a-z]* node_modules README.md test.js)
-
-# once (used by restify)
-VER=$(json -f node_modules/restify/package.json dependencies.once)
-npm install once@$VER
-(cd node_modules/once \
-    && rm -rf .[a-z]* node_modules README.md test)
-
-# node-uuid
-VER=$(json -f package.json dependencies.node-uuid)
-npm install node-uuid@$VER
-(cd node_modules/node-uuid \
-    && rm -rf .[a-z]* node_modules README.md test benchmark)
-
-# ssh-agent
-VER=$(json -f package.json dependencies.ssh-agent)
-npm install ssh-agent@$VER
-(cd node_modules/ssh-agent \
-    && rm -rf .[a-z]* node_modules README.md bin tst)
-
-# ctype (used by ssh-agent)
-VER=$(json -f node_modules/ssh-agent/package.json dependencies.ctype)
-npm install ctype@$VER
-(cd node_modules/ctype \
-    && rm -rf .[a-z]* node_modules README* tools man tst CHANGELOG)
-
-# Drop this hack when <https://github.com/mcavage/node-restify/pull/313>
-# is pulled.
-touch node_modules/semver.js
-
-# bunyan
-# Patch bunyan usages to use the platform one, because it has dtrace-provider
-# hooked up.
-patch -p0 <<PATCH
---- node_modules/restify/lib/bunyan_helper.js.orig  2013-02-05 15:39:13.000000000 -0800
-+++ node_modules/restify/lib/bunyan_helper.js   2013-02-05 15:40:49.000000000 -0800
-@@ -4,7 +4,11 @@
- var util = require('util');
-
- var assert = require('assert-plus');
--var bunyan = require('bunyan');
-+if (process.platform === 'sunos') {
-+    bunyan = require('/usr/node/node_modules/bunyan');
-+} else {
-+    bunyan = require('bunyan');
-+}
- var LRU = require('lru-cache');
- var uuid = require('node-uuid');
-
---- node_modules/restify/lib/index.js.orig  2013-02-05 16:08:51.000000000 -0800
-+++ node_modules/restify/lib/index.js   2013-02-05 16:09:04.000000000 -0800
-@@ -7,6 +7,8 @@
- // and enables much faster load times
- //
-
-+process.env.RESTIFY_CLIENT_ONLY = 1;
-+
- function createClient(options) {
-         var assert = require('assert-plus');
-         var bunyan = require('./bunyan_helper');
---- node_modules/restify/lib/dtrace.js
-+++ node_modules/restify/lib/dtrace.js
-@@ -38,7 +38,7 @@
- module.exports = function exportStaticProvider() {
-         if (!PROVIDER) {
-                 try {
--                        var dtrace = require('dtrace-provider');
-+                        var dtrace = require('/usr/node/node_modules/dtrace-provider');
-                         PROVIDER = dtrace.createDTraceProvider('restify');
-                 } catch (e) {
-                         PROVIDER = {
-PATCH
-
-
-rm -rf node_modules/.bin
-rm -rf _repos
