From a39640e89ac1bb1b67b95d23755cc06f06372ac2 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex@uq.edu.au>
Date: Fri, 9 Aug 2019 14:11:29 +1000
Subject: [PATCH] joyent/node-mahi#3 filtering of roles to ones from the owning
 account should be done in libmahi, not in muskie/marlin Reviewed by: Robert
 Mustacchi <rm@joyent.com> Approved by: Robert Mustacchi <rm@joyent.com>

---
 lib/auth.js  | 88 +++++++++++++++++++++++++++++-----------------------
 package.json |  2 +-
 2 files changed, 51 insertions(+), 39 deletions(-)

diff --git a/lib/auth.js b/lib/auth.js
index 4d7172a..a425919 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -97,6 +97,7 @@ function createAuthToken(opts, aes, cb) {
     var conditions = {};
     if (context && context.conditions) {
         conditions.activeRoles = context.conditions.activeRoles;
+        conditions.activeXAcctRoles = context.conditions.activeXAcctRoles;
     }
     if (opts.fromjob) {
         conditions.fromjob = fromjob;
@@ -802,7 +803,9 @@ function makeGlobalReaderRole(acctuuid) {
  */
 function getActiveRoles(req, res, next) {
     if (req.auth.token && req.auth.token.conditions) {
-        req.activeRoles = req.auth.token.conditions.activeRoles || [];
+        var conds = req.auth.token.conditions;
+        req.activeRoles = (conds.activeRoles || []).concat(
+            conds.activeXAcctRoles || []);
         setImmediate(next);
         return;
     }
@@ -898,7 +901,6 @@ function getActiveRoles(req, res, next) {
     }
 
     var activeRoles = [];
-    var names;
 
     if (requestedRoles) {           // The user passed in roles to assume
         /*
@@ -915,32 +917,31 @@ function getActiveRoles(req, res, next) {
             return;
         }
 
+        var lookup = {};
+        for (var uuid in caller.roles) {
+            var role = caller.roles[uuid];
+            if (lookup[role.name] === undefined) {
+                lookup[role.name] = [];
+            }
+            lookup[role.name].push(uuid);
+        }
+
+        var i, names;
         /* JSSTYLED */
         names = requestedRoles.split(/\s*,\s*/);
-        req.mahi.getUuid({
-            account: owner.account.login,
-            type: 'role',
-            names: names
-        }, function (err, lookup) {
-            if (err) {
-                next(new InternalError(err));
+        for (var i = 0; i < names.length; ++i) {
+            var roles = lookup[names[i]];
+            if (roles === undefined || roles.length < 1) {
+                next(new InvalidRoleError(names[i]));
                 return;
             }
-            var i, uuid;
-            for (i = 0; i < names.length; i++) {
-                uuid = lookup.uuids[names[i]];
-                if (!uuid || !caller.roles[uuid]) {
-                    next(new InvalidRoleError(names[i]));
-                    return;
-                }
-                activeRoles.push(uuid);
-            }
-            if (readerRole) {
-                activeRoles.push(readerRole.uuid);
-            }
-            req.activeRoles = activeRoles;
-            next();
-        });
+            activeRoles = activeRoles.concat(roles);
+        }
+        if (readerRole) {
+            activeRoles.push(readerRole.uuid);
+        }
+        req.activeRoles = activeRoles;
+        setImmediate(next);
     } else {                            // No explicit roles, use default set
         /*
          * Sub-users don't get any default cross-account roles, only the ones
@@ -950,17 +951,6 @@ function getActiveRoles(req, res, next) {
             activeRoles = caller.user.defaultRoles || [];
         } else {
             activeRoles = caller.account.defaultRoles || [];
-            /*
-             * Account default roles might include roles that aren't actually
-             * for this account. We filter out ones that don't match here to
-             * avoid wasting time considering them, and to make the error
-             * message when we deny access the same as it was before
-             * cross-account role support.
-             */
-            activeRoles = activeRoles.filter(function (role) {
-                return (caller.roles[role].account ===
-                    owner.account.uuid);
-            });
         }
         if (readerRole) {
             /*
@@ -979,10 +969,28 @@ function getActiveRoles(req, res, next) {
 function gatherContext(req, res, next) {
     var action = req.route.authAction || req.route.name;
 
+    /*
+     * We share these conditions with other systems as part of an auth token
+     * (e.g. marlin for jobs).
+     */
     var conditions = req.authContext.conditions;
     conditions.owner = req.owner.account;
     conditions.method = req.method;
-    conditions.activeRoles = req.activeRoles;
+
+    /*
+     * Separate the xacct and non-xacct roles so that old systems that don't
+     * support them can't get confused and authorize actions improperly.
+     */
+    conditions.activeRoles = [];
+    conditions.activeXAcctRoles = [];
+    (req.activeRoles || []).forEach(function (role) {
+        if (req.caller.roles[role].account === req.owner.account.uuid) {
+            conditions.activeRoles.push(role);
+        } else {
+            conditions.activeXAcctRoles.push(role);
+        }
+    });
+
     conditions.date = new Date(req._time);
     conditions.day = new Date(req._time);
     conditions.time = new Date(req._time);
@@ -1130,12 +1138,16 @@ function authorize(req, res, next) {
             return;
         case 'NoMatchingRoleTag':
             /*
-             * If we didn't activate any roles, we want to return an
+             * If we didn't activate any owner roles, we want to return an
              * AuthorizationError here, like we would have previously if we
              * got a CrossAccount Error before cross-account role support was
              * added.
              */
-            if (!req.activeRoles || !req.activeRoles.length) {
+            var ownerRoles = (req.activeRoles || []).filter(function (role) {
+                return (req.caller.roles[role].account ===
+                    req.owner.account.uuid);
+            });
+            if (!ownerRoles.length) {
                 next(new AuthorizationError(login, req.path(), e));
             } else {
                 next(new NoMatchingRoleTagError());
diff --git a/package.json b/package.json
index dbacf73..2b90ea0 100644
--- a/package.json
+++ b/package.json
@@ -32,7 +32,7 @@
         "libuuid": "0.1.2",
         "lru-cache": "4.1.5",
         "lstream": "0.0.4",
-        "mahi": "2.3.0",
+        "mahi": "2.3.1",
         "marlin": "git+https://github.com/joyent/manta-marlin.git#master",
         "mime": "1.2.11",
         "moray": "3.4.1",
-- 
2.21.0

