From 45f153089b6695f4a6e8eca9de498af6b10006fb Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Tue, 19 Sep 2017 13:09:47 -0700
Subject: [PATCH] first working version: boilerplate, bin/haplog, and minor
 updates

---
 .gitignore                |   1 +
 CHANGES.md                |   9 ++
 CONTRIBUTING.md           |  19 +++
 LICENSE                   |  19 +++
 Makefile                  |  29 ++++
 Makefile.targ             | 317 ++++++++++++++++++++++++++++++++++++++
 README.md                 |  28 ++++
 bin/haplog                | 104 +++++++++++++
 lib/haproxy_log_parser.js |  19 ++-
 package.json              |  23 +++
 tools/jsl.node.conf       | 142 +++++++++++++++++
 11 files changed, 703 insertions(+), 7 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 CHANGES.md
 create mode 100644 CONTRIBUTING.md
 create mode 100644 LICENSE
 create mode 100644 Makefile
 create mode 100644 Makefile.targ
 create mode 100644 README.md
 create mode 100755 bin/haplog
 create mode 100644 package.json
 create mode 100644 tools/jsl.node.conf

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3c3629e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+node_modules
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..7e0abeb
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,9 @@
+# Change log
+
+## Not yet released
+
+No changes.
+
+## v1.0.0
+
+Initial release.
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..750cef8
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,19 @@
+# Contributing
+
+This repository uses [cr.joyent.us](https://cr.joyent.us) (Gerrit) for new
+changes.  Anyone can submit changes.  To get started, see the [cr.joyent.us user
+guide](https://github.com/joyent/joyent-gerrit/blob/master/docs/user/README.md).
+This repo does not use GitHub pull requests.
+
+See the [Joyent Engineering
+Guidelines](https://github.com/joyent/eng/blob/master/docs/index.md) for general
+best practices expected in this repository.
+
+Contributions should be "make prepush" clean.  The "prepush" target runs the
+"check" target, which requires these separate tools:
+
+* https://github.com/davepacheco/jsstyle
+* https://github.com/davepacheco/javascriptlint
+
+If you're changing something non-trivial or user-facing, you may want to submit
+an issue first.
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..19586ae
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2017, Joyent, Inc. All rights reserved.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..2facdd0
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,29 @@
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+# Makefile: top-level Makefile
+#
+# This Makefile contains only repo-specific logic and uses included makefiles
+# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are
+# used by other repos as well.
+#
+
+#
+# Tools
+#
+NPM		 = npm
+
+#
+# Files
+#
+JSON_FILES	 = package.json
+JS_FILES	:= bin/haplog $(shell find lib -name '*.js')
+JSL_FILES_NODE	 = $(JS_FILES)
+JSSTYLE_FILES	 = $(JS_FILES)
+JSL_CONF_NODE	 = tools/jsl.node.conf
+
+.PHONY: all
+all:
+	$(NPM) install
+
+include ./Makefile.targ
diff --git a/Makefile.targ b/Makefile.targ
new file mode 100644
index 0000000..ea19000
--- /dev/null
+++ b/Makefile.targ
@@ -0,0 +1,317 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
+#			(see above). If you want to use, say, '.md' instead, then
+#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE	?= tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .restdown
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs:							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..3680618
--- /dev/null
+++ b/README.md
@@ -0,0 +1,28 @@
+# haproxy-log: haproxy log file parser
+
+This module provides a very basic parser for the haproxy "HTTP" log file format
+as recorded by syslog.  For information about the haproxy log file, see the
+[haproxy
+documentation](http://www.haproxy.org/download/1.5/doc/configuration.txt).
+There's a great deal of detail in the section called "Logging".
+
+This implementation is somewhat restrictive in the format that it recognizes.
+Unrecognized lines generate a warning to stderr or cause the program to exit
+prematurely with an error.
+
+
+## Synopsis
+
+To install the command-line tool:
+
+    $ npm install -g haproxy-log
+    ...
+    $ haplog my-haproxy-log.txt
+
+You may also use the parser object directly.  For an example, see the
+implementation of the "haplog" command.
+
+
+## Contributing
+
+See separate [contribution guidelines](CONTRIBUTING.md).
diff --git a/bin/haplog b/bin/haplog
new file mode 100755
index 0000000..a73e27e
--- /dev/null
+++ b/bin/haplog
@@ -0,0 +1,104 @@
+#!/usr/bin/env node
+/* vim: set ft=javascript ts=8 sts=8 sw=8 noet: */
+
+/*
+ * haplog: command-line tool to transform haproxy logs into JSON objects
+ */
+
+var mod_cmdutil = require('cmdutil');
+var mod_lstream = require('lstream');
+var mod_fs = require('fs');
+var mod_stream = require('stream');
+var mod_util = require('util');
+var VE = require('verror');
+
+var lib_haproxy_log = require('../lib/haproxy_log_parser');
+
+function
+main()
+{
+	var filename, input, lstream, parser, encstream;
+
+	mod_cmdutil.exitOnEpipe();
+	mod_cmdutil.configure({
+		synopses: [ '[FILENAME]' ],
+		usageMessage: 'transform haproxy log files into ' +
+		    'newline-separated JSON'
+	});
+
+	if (process.argv.length > 3) {
+		mod_cmdutil.usage('unexpected arguments');
+	}
+
+	if (process.argv.length > 2) {
+		filename = process.argv[2];
+		input = mod_fs.createReadStream(filename);
+		input.on('error', function (err) {
+			mod_cmdutil.fail(new VE(err, 'read "%s"', filename));
+		});
+	} else {
+		if (process.stdin.isTTY) {
+			console.error('WARNING: reading from tty on stdin');
+		}
+
+		input = process.stdin;
+	}
+
+	lstream = new mod_lstream();
+	parser = new lib_haproxy_log.HAProxyLogTransform();
+	encstream = new JsonEncoderStream();
+
+	input.pipe(lstream);
+	lstream.pipe(parser);
+	parser.pipe(encstream);
+	encstream.pipe(process.stdout);
+
+	parser.on('error', function (err) {
+		/*
+		 * The stream has already stopped at this point, so there's
+		 * nothing we can do but exit.  Ideally, this would generate a
+		 * warning and move on.
+		 */
+		mod_cmdutil.fail(err);
+	});
+}
+
+/*
+ * Object-mode transform stream that accepts arbitrary JavaScript objects
+ * (intended to be simple objects that can be encoded with JSON.stringify()) and
+ * emits newline-separated lines of output, one object per line, with each line
+ * containing the JSON-encoded representation of the object followed by a
+ * newline.
+ *
+ * Failure to encode an object results in a warning to stderr.
+ *
+ * This should likely be moved into node-vstream-json-parser or an analogous
+ * module, with better support for managing the operational error of a bad
+ * object.
+ */
+function
+JsonEncoderStream()
+{
+	var self = this;
+
+	mod_stream.Transform.call(self, { highWaterMark: 0, objectMode: true });
+}
+mod_util.inherits(JsonEncoderStream, mod_stream.Transform);
+
+JsonEncoderStream.prototype._transform = function (obj, _, done) {
+	var self = this;
+	var encoded;
+
+	try {
+		encoded = JSON.stringify(obj);
+	} catch (ex) {
+		console.error('WARNING: failed to encode object: ', obj);
+		setImmediate(done);
+		return;
+	}
+
+	self.push(encoded + '\n');
+	setImmediate(done);
+};
+
+main();
diff --git a/lib/haproxy_log_parser.js b/lib/haproxy_log_parser.js
index 507417b..9178b69 100644
--- a/lib/haproxy_log_parser.js
+++ b/lib/haproxy_log_parser.js
@@ -1,9 +1,12 @@
-#!/usr/bin/env node
 /* vim: set ts=8 sts=8 sw=8 noet: */
+/*
+ * haproxy_log_parser.js: transform stream to parse haproxy logs
+ */
 
 var mod_assert = require('assert-plus');
 var mod_util = require('util');
 var mod_stream = require('stream');
+var VE = require('verror');
 
 var CLS_NOT_SPACE = '[^ ]+';
 var CLS_DIGITS = '[0-9]+';
@@ -109,6 +112,7 @@ normalise_ip(ip)
  */
 var TERMINATION_CAUSES = {
 	'C': 'CLIENT_ABORT',
+	'S': 'BACKEND_ABORT',
 	'D': 'BACKEND_ABORT_OR_REJECT',
 	'P': 'PROXY_ABORT_OR_REJECT',
 	'L': 'HANDLED_BY_PROXY',
@@ -119,7 +123,7 @@ var TERMINATION_CAUSES = {
 	'K': 'ADMIN_ABORT',
 	'c': 'CLIENT_DATA_TIMEOUT',
 	's': 'BACKEND_DATA_TIMEOUT',
-	'-': 'NORMAL',
+	'-': 'NORMAL'
 };
 
 var STATES_AT_CLOSE = {
@@ -130,7 +134,7 @@ var STATES_AT_CLOSE = {
 	'D': 'DATA_TRANSFER',
 	'L': 'FINAL_DATA_TRANSFER',
 	'T': 'TARPITTED',
-	'-': 'NORMAL',
+	'-': 'NORMAL'
 };
 
 function
@@ -152,7 +156,7 @@ parse_termination_state(v)
 	}
 
 	if (TERMINATION_CAUSES[v[0]]) {
-		o.termination_cause = TERMINATION_CAUSES[v[0]]
+		o.termination_cause = TERMINATION_CAUSES[v[0]];
 	}
 
 	if (STATES_AT_CLOSE[v[1]]) {
@@ -183,11 +187,11 @@ HAProxyLogTransform.prototype._transform = function (l, _, done) {
 	var out = {};
 
 	if (!m) {
-		done(VE('malformed log line: "%s"', l));
+		setImmediate(done, VE('malformed log line: "%s"', l));
 		return;
 	}
 
-	for (var i = 0; i < matcher.groups.length; i++) {
+	for (var i = 0; i < self.hlt_matcher.groups.length; i++) {
 		var g = self.hlt_matcher.groups[i];
 		var v = m[g.i];
 
@@ -226,7 +230,8 @@ HAProxyLogTransform.prototype._transform = function (l, _, done) {
 		out.http_request = null;
 	}
 
-	return (out);
+	self.push(out);
+	setImmediate(done);
 };
 
 module.exports = {
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..c10fc95
--- /dev/null
+++ b/package.json
@@ -0,0 +1,23 @@
+{
+	"name": "haproxy-log",
+	"description": "very basic haproxy log parser",
+	"version": "1.0.0",
+	"main": "./lib/haproxy-log.js",
+	"bin": {
+	    "haplog": "./bin/haplog"
+	},
+
+	"repository": {
+		"type": "git",
+		"url": "git://github.com/joyent/node-haproxy-log.git"
+	},
+
+	"dependencies": {
+		"assert-plus": "^1.0.0",
+		"cmdutil": "^1.1.0",
+		"lstream": "0.0.4",
+		"verror": "^1.10.0"
+	},
+
+	"license": "MIT"
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
new file mode 100644
index 0000000..5cf2ebb
--- /dev/null
+++ b/tools/jsl.node.conf
@@ -0,0 +1,142 @@
+#
+# Configuration File for JavaScript Lint 
+#
+# This configuration file can be used to lint a collection of scripts, or to enable
+# or disable warnings for scripts that are linted via the command line.
+#
+
+### Warnings
+# Enable or disable warnings based on requirements.
+# Use "+WarningName" to display or "-WarningName" to suppress.
+#
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
++comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
++comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
+-inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
++leading_decimal_point        # leading decimal point may indicate a number or an object member
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
++nested_comment               # nested comment
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
++partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
+-unreferenced_argument        # argument declared but never referenced: {name}
+-unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
++useless_assign               # useless assignment
++useless_comparison           # useless comparison; comparing identical expressions
+-useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
++with_statement               # with statement hides undeclared variables; use temporary variable instead
+
+
+### Output format
+# Customize the format of the error message.
+#    __FILE__ indicates current file path
+#    __FILENAME__ indicates current file name
+#    __LINE__ indicates current line
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
+#
+# Visual Studio syntax (default):
++output-format __FILE__(__LINE__): __ERROR__
+# Alternative syntax:
+#+output-format __FILE__:__LINE__: __ERROR__
+
+
+### Context
+# Show the in-line position of the error.
+# Use "+context" to display or "-context" to suppress.
+#
++context
+
+
+### Control Comments
+# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
+# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
+# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
+# although legacy control comments are enabled by default for backward compatibility.
+#
+-legacy_control_comments
+
+
+### Defining identifiers
+# By default, "option explicit" is enabled on a per-file basis.
+# To enable this for all files, use "+always_use_option_explicit"
+-always_use_option_explicit
+
+# Define certain identifiers of which the lint is not aware.
+# (Use this in conjunction with the "undeclared identifier" warning.)
+#
+# Common uses for webpages might be:
++define __dirname
++define clearInterval
++define clearTimeout
++define console
++define exports
++define global
++define module
++define process
++define require
++define setImmediate
++define clearImmediate
++define setInterval
++define setTimeout
++define Buffer
++define JSON
++define Math
++define __dirname
++define __filename
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
+
+### Files
+# Specify which files to lint
+# Use "+recurse" to enable recursion (disabled by default).
+# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
+# or "+process Folder\Path\*.htm".
+#
+
-- 
2.21.0

