{"project":"joyent/illumos-joyent","branch":"master","id":"I104c53876a87e773ef729efa9419a70fe24933cb","number":"4675","subject":"OS-2340 vnics should support LSO OS-6778 MAC loopback traffic should avoid cksum work OS-6794 want LSO support in viona Reviewed by: Robert Mustacchi \u003crm@joyent.com\u003e Reviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e Reviewed by: Patrick Mooney \u003cpatrick.mooney","owner":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"url":"https://cr.joyent.us/4675","commitMessage":"OS-2340 vnics should support LSO\nOS-6778 MAC loopback traffic should avoid cksum work\nOS-6794 want LSO support in viona\nReviewed by: Robert Mustacchi \u003crm@joyent.com\u003e\nReviewed by: Dan McDonald \u003cdanmcd@joyent.com\u003e\nReviewed by: Patrick Mooney \u003cpatrick.mooney@joyent.com\u003e\nReviewed by: Hans Rosenfeld \u003chans.rosenfeld@joyent.com\u003e\nReviewed by: Jorge Schrauwen \u003cjorge@blackdot.be\u003e\nApproved by: Dan McDonald \u003cdanmcd@joyent.com\u003e\n","createdOn":1534217404,"lastUpdated":1539925305,"open":false,"status":"MERGED","comments":[{"timestamp":1534217404,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 1."},{"timestamp":1534234177,"reviewer":{"name":"Jorge Schrauwen","email":"sjorge@blackdot.be","username":"sjorge"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1534285168,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 1:\n\n(48 comments)\n\nThanks for putting this together. There are a few things that I\u0027m a little confused by in terms of semantics around some of the mac emulation flags, but in general this looks pretty good."},{"timestamp":1534290637,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 1:\n\n(3 comments)\n\nRealizing I should probably let you address the first batch of RM comments before piling on and/or just saying \"yeah, I noticed that too\"."},{"timestamp":1534567601,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 1:\n\n(38 comments)\n\nStill need to get thru more comments, do some code refactoring, and retest everything. But wanted to get my current replies in just so I don\u0027t lose them."},{"timestamp":1535109382,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 1:\n\n(13 comments)"},{"timestamp":1535486671,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 1:\n\n(4 comments)"},{"timestamp":1535486679,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 2."},{"timestamp":1535487292,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 2:\n\nI had to rebase between CR#1 and #2, so the delta between the two contains changes I didn\u0027t make. I also created a gist with just my changes.\n\nhttps://gist.github.com/rzezeski/2f601db4f2cedc3b36beb2b8ceb25fcb"},{"timestamp":1535490672,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\nIncremental looks okay (like the renaming and comments for HW_LOCAL_MAC).  Need to go over ALL the code, which will mean tonight or/and tomorrow morning."},{"timestamp":1535504427,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(4 comments)\n\nMore to come tomorrow."},{"timestamp":1535556566,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(12 comments)\n\nReview progress checkpoint.\n\nOVERALL QUESTIONS ABOUT TESTING:  Have you tested these on etherstubs?  Have you tested these for off-link destinations not only on real HW, but on etherstubs with on-stub-routers as well?\n\nOVERALL COMMENT:  Discovered this during mac_util.c review, but you REALLY should be using TCP/IP header defs from $SRC/common/inet, not $SRC/common/netinet.  (e.g. Use \"ipha_t\" instead of \"struct ip\".)"},{"timestamp":1535563530,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(3 comments)\n\nOkay, I think that\u0027s it for now."},{"timestamp":1535580495,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\nIf I wasn\u0027t clear:\n\nIP HEADER \u003d\u003d\u003d\u003e   Use ipha_t, not \"struct ip\"\nTCP HEADER \u003d\u003d\u003d\u003e  Use tcpha_t.\n\nWhen in doubt, use packet structs from $UTS/common/inet/*.h.  There\u0027s inconsistency here currently, and that needs to get fixed."},{"timestamp":1535580680,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 2:\n\n(62 comments)"},{"timestamp":1536172116,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 2:\n\n(59 comments)"},{"timestamp":1536172183,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 3."},{"timestamp":1536175230,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 3:\n\n(7 comments)\n\nThanks a lot for this round. I think this is almost good to go!"},{"timestamp":1536194613,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 3: Code-Review+1\n\n(2 comments)\n\nYou\u0027ve addressed my concerns."},{"timestamp":1536251871,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"Patch Set 3:\n\n(3 comments)"},{"timestamp":1536339186,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 2:\n\n(7 comments)"},{"timestamp":1536339195,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 4."},{"timestamp":1536339434,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 4:\n\nI pushed CR4 with minimal testing (but I did verify that the IPv4 over DLS and KVM paths work) as I wanted to get it out before I leave for the weekend. But I believe it represents all the changes I wanted to make in response to round 3 of review (minus Han\u0027s comments which I still need to act upon)."},{"timestamp":1536343758,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 4:\n\nThere are some unaddressed Hans comments, otherwise I\u0027d re-up the +1."},{"timestamp":1536586948,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"Patch Set 4:\n\n(1 comment)"},{"timestamp":1536617748,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 4:\n\n(11 comments)"},{"timestamp":1536690933,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 4:\n\n(14 comments)"},{"timestamp":1536690941,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 5."},{"timestamp":1536702297,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5:\n\n(2 comments)\n\nIn general, I\u0027m pretty happy with this. Thanks for all the work here."},{"timestamp":1536703616,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 5:\n\n(2 comments)"},{"timestamp":1536708489,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5: Code-Review+1\n\n(1 comment)"},{"timestamp":1536756780,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"Patch Set 5: Code-Review+1"},{"timestamp":1536765532,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 5:\n\n(27 comments)\n\nFirst round of comments.  I\u0027m still trying to dig deep on mac_util.c"},{"timestamp":1536767556,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 5: Code-Review+1\n\n(1 comment)\n\nYou may be rewhacking after pmooney, but I\u0027m good."},{"timestamp":1536877208,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 5:\n\n(27 comments)"},{"timestamp":1536877223,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 6."},{"timestamp":1536896450,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 6:\n\n(10 comments)"},{"timestamp":1536940208,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 6:\n\nHeads up for anyone reviewing this: I\u0027m moving OS-6884 into its own wad. Might want to hold off on further review until I finish that and update this wad."},{"timestamp":1537220591,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 6:\n\n(10 comments)"},{"timestamp":1537220766,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 7."},{"timestamp":1537220928,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 7: Code-Review-1\n\nFeel free to comment on individual patch sets if you want but I\u0027m marking this as -1 until we land OS-6884 in a separate wad and I can rebase onto that."},{"timestamp":1537565058,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 8."},{"timestamp":1537565227,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 8: -Code-Review\n\nPatch set #8 is a rebase onto latest which includes OS-6884. This is open for CR again."},{"timestamp":1538008203,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 8: Code-Review+1\n\n(1 comment)\n\nUpdates look good. Thanks, Ryan."},{"timestamp":1539099632,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 8: Code-Review+1\n\nChanges inspired by pmooney look good."},{"timestamp":1539213704,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 8: Code-Review+1"},{"timestamp":1539351973,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 9."},{"timestamp":1539352398,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 9:\n\nPatch set 9 resolves two issues found with LSO traffic over VLANs.\n\n1. When tagging the packet via mac_add_vlan_tag() the LSO MSS value was being lost. This was fixed by adding a statement to copy it during hcksum clone.\n\n2. Packets tagged by mac_add_vlan_tag() were being dropped by mac_sw_lso() because their first mblk didn\u0027t contain the TCP/IP headers. This has been temporarily fixed by performing a pull-up of all the bytes into a single mblk. A better fix would be to implement the \"mblk helpers\" and rewrite mac_sw_lso() to use them."},{"timestamp":1539357156,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 9: Code-Review+1"},{"timestamp":1539357416,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"Patch Set 9: Code-Review+1"},{"timestamp":1539358694,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 9:\n\n(3 comments)\n\nOne typo, and some advice for the future."},{"timestamp":1539361816,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 9: Code-Review+1\n\n(2 comments)\n\nI know there are some minor outstanding changes. But trying to record this +1 as a general intent that I\u0027m happy with the final version of it even with some minor updates/typo fixes in case they come at a time when I\u0027m not able to get to them."},{"timestamp":1539362886,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 9:\n\n(3 comments)"},{"timestamp":1539380378,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 10."},{"timestamp":1539380478,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 10: Code-Review+1"},{"timestamp":1539380696,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 10: Code-Review+1\n\nThank you for all of this."},{"timestamp":1539380813,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Patch Set 10: Code-Review+1"},{"timestamp":1539874565,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 11: Patch Set 10 was rebased."},{"timestamp":1539874590,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 11:\n\nTesting notes added to ticket."},{"timestamp":1539881602,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 11: Integration-Approval+1\n\nI wish you\u0027d included the \"before\" numbers, but it\u0027s a nit given the satisfaction people have had in production."},{"timestamp":1539881859,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Patch Set 11:\n\nYea I really only included the numbers to make sure things were sane, not as before/after, because the amount of time it takes to run all these is a lot."},{"timestamp":1539925290,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Uploaded patch set 12: Commit message was updated."},{"timestamp":1539925305,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Ryan Zezeski"}],"currentPatchSet":{"number":"12","revision":"104c53876a87e773ef729efa9419a70fe24933cb","parents":["c6d34d2b1dfd2a8be003867d868e26d325f8584f"],"ref":"refs/changes/75/4675/12","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1539925290,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380478,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380696,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380813,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1539881602,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"SUBM","value":"1","grantedOn":1539925305,"by":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":15,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":13,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1154,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1779,"sizeDeletions":-452},"patchSets":[{"number":"1","revision":"ba47f51de3c86942dfd240c85f03a71d8c8de126","parents":["b50884db8d84f652919a0d7b6fd6dd3d28fb035e"],"ref":"refs/changes/75/4675/1","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1534217404,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":667,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So is it the case that we\u0027re always going to say that something like HOST_LOCAL is valid and we don\u0027t need to verify the checksum? I guess this makes ipd even more potent."},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":667,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"If HOST_LOCAL is present then we a) know the src is from the same machine, and b) a complete checksum may not have been generated (depending on the underlying MAC HW flags). For both those reasons we don\u0027t bother to verify it.\n\nWhat is ipd?"},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":667,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"ipd is the \u0027Internet packet disturber\u0027. The relevant reason I mentioned it here is that it has the ability to corrupt packets. I don\u0027t recall if that happens before or after checksuming. It\u0027s done as part of the hooks. I don\u0027t think we need to change anything for this in particular."},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":2267,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"When I find the definition of HOST_LOCAL, I\u0027ll ask what EXACTLY do you mean by \"local\"?"},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":2267,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"HOST_LOCAL indicates that the packet originated from the same host. I.e., it never hit the external network. The only two data paths for HOST_LOCAL (that I\u0027m aware of) are the case where the L2 src and dst are on the same MAC (this is caught in mac_tx_send()), or when the L2 src and dst are on the same host and connected via a bridge. In both of those cases the packet NEVER makes it to a MAC provider, but instead is passed from the sources MAC Tx to the destinations MAC Rx. If there is a comment I can put somewhere to clarify all this please let me know."},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":2267,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I changed this to HW_LOCAL_MAC to more clearly reflect that this is concerned with L2 level and to prevent confusion with loopback/localhost."},{"file":"usr/src/uts/common/io/bridge.c","line":1927,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See the question indls about this freemsg. It doesn\u0027t seem like it\u0027s always safe to do."},{"file":"usr/src/uts/common/io/bridge.c","line":1927,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"You\u0027re correct. I\u0027m going to remove this call. But I also gave a more detailed response with some additional thoughts in your DLS comment."},{"file":"usr/src/uts/common/io/bridge.c","line":1938,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This comment doesn\u0027t make sense to me. I feel like I\u0027m missing something important that you want to share."},{"file":"usr/src/uts/common/io/bridge.c","line":1938,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This comment is from the original source. I don\u0027t really know much about TRILL. This code merely strived to keep the existing behavior but deal with the new case of an LSO packet that gets segmented."},{"file":"usr/src/uts/common/io/bridge.c","line":1938,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. I guess that\u0027s fair. Thanks."},{"file":"usr/src/uts/common/io/bridge.c","line":1939,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"You\u0027re saying that all trill frames encapsulate ethernet VLAN headers?"},{"file":"usr/src/uts/common/io/bridge.c","line":1939,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"See my reply to rm."},{"file":"usr/src/uts/common/io/bridge.c","line":1952,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We only return for the last segment because we need to try and forward any other frames in the segment? Is that right?"},{"file":"usr/src/uts/common/io/bridge.c","line":1952,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, but thinking about this more perhaps it makes more sense to just return on the first bad segment (which would be the first segment since they should all have identical L2). Although, reform_vlan_header() could also return NULL because of allocation failures -- so this current logic might be able to get some segments out in such a scenario. I\u0027m happy to just return on the first bad segment if you have a strong opinion here."},{"file":"usr/src/uts/common/io/bridge.c","line":1952,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think either taking a best effort or giving up fast approach is fine. I would probably clarify the comment with more information there though about the why of the approach."},{"file":"usr/src/uts/common/io/bridge.c","line":2012,"reviewer":{"name":"Jorge Schrauwen","email":"sjorge@blackdot.be","username":"sjorge"},"message":"nit: guarantee"},{"file":"usr/src/uts/common/io/bridge.c","line":2012,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":381,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, this means that if we receive a looped back LSO packet to the networking stack, we will always break it up, is that right? Assuming zone to zone for example w/o HVM. I guess this suggests in the future we\u0027d want a capability that folks can expose to DLD/DLS that says I can accept LRO packets?"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":381,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"For TCP/IP packets we should get DLS bypass and avoid SW segmentation. But all other traffic would take the hit, yes. We could add a capab if we think there is some benefit. But my first question would be: can that traffic have a DLS-bypass path like TCP/IP?"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":381,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I see. So this is reliant on the current TCP/IP path to skip TSO break up processing. Regarding the LRO capability, I\u0027m not sure yet what makes the most sense. The reason I was thinking about the LRO capability was in the context of doing automatic LRO in MAC when it made sense. However, if it didn\u0027t make sense for the client, then we would probably want to skip it and that a capability would help us know if we did or didn\u0027t.\n\nThat said, I think it\u0027s probably fine not to worry about that at this time."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":387,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is this safe? It seems like in a number of the failure cases, say we end up calling into mac_sw_lso() then that could have ended up freeing the mblk_t chain if it fails. Right? For example this case: https://cr.joyent.us/#/c/4675/1/usr/src/uts/common/io/mac/mac_util.c@930."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":387,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"You are correct, good catch. If head is NULL then mp would have been freed.\n\nHowever, thinking through this made me wonder if mac_hw_emul() should only concern itself with ATTEMPTING to emulate HW offloads? Leave seemingly corrupt/malformed msgs in the chain for upstream consumers to deal with. In fact, some of these checks, like \"is this msg at least long enough to contain an L2 header\" should probably be done very early on in Rx and assumed correct throughout the stack. In fact, it would be great if early on in Rx we parsed L2 and cached the info somewhere in the mblk_t so we can just avoid repeating this logic all throughout the networking stack. But I digress.\n\nFor now I left the mac_pkt_drop() calls in mac_hw_emul(), and fixed the logic here in DLS. But I could be convinced to not drop any msgs in mac_hw_emul() if anyone has a compelling argument to do so."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":387,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think that\u0027s a reasonable current approach. I think we should think more holistically about a metatdata block that we attach to the mblk chain somehow. For example, if hardware has classified some of the packet for us, no reason to go back and redo that ourselves, etc. But I think it\u0027s reasonable to do that at a different time.\n\nIn the future, I think I\u0027d prefer to see it that mac_hw_emul() doesn\u0027t call mac_pkt_drop(), but I think it\u0027s fine that it\u0027s the current design. I wouldn\u0027t change that for now. Only when we have other work that might want that more."},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","line":187,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We don\u0027t need this because the theory is that this will instead be handled at a different level when required, right?"},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","line":187,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Correct. The general theme of my change is that emulating (or \"fixing\" if you prefer) the HW offloads becomes a consumer problem, not a MAC datapath problem. So instead of modifying the packets as they cross MAC we now leave it up to consumers to decide if they need to emulate HW offloads for a HOST_LOCAL packet. The reason I went this route was to avoid having another capab that must be negotiated by clients to tell MAC not to perform the emulation."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4049,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What code is that? Maybe we should say what it is so we can figure out how to deal with it and go from there?"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4049,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"For example, dls_rx_promisc() has an ASSERT that b_next is NULL. In general the entire promisc dispatch path seems to rely on single-packet-at-a-time semantics -- e.g. this very function is mac_promisc_dispatch_one(). Unlike i_dls_link_rx() we don\u0027t batch up subchains. I think it would be lovely to change that but it definitely seems like a fair amount of work. Would you like me to add to the comment to mention functions like dls_rx_promisc() explicitly?"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4049,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Yeah, if you wouldn\u0027t mind, that\u0027d help a bunch. Thanks."},{"file":"usr/src/uts/common/io/mac/mac_sched.c","line":4356,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason we\u0027re not doing this in mac_tx()?"},{"file":"usr/src/uts/common/io/mac/mac_sched.c","line":4356,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, because I only focused on places where we were calling\nmac_fix_cksum(). But it\u0027s worth going over the Tx path to make sure\nI\u0027m not missing anything.\n\nFirst off, all unicast Tx packets that land on an SRS must eventually\ngo through mac_tx_send(). The mac_tx() function calls the st_func\ncallback to deliver packets to the SRS. This callback is one of the\nfunctions listed in mac_tx_mode_list[]. If you look at these functions\nyou will see that either they enqueue the packets to the SRS or\ndeliver inline via mac_tx_send() (or some other macro like\nMAC_TX_SOFTRING_PROCESS that leads to it). Packets enqueued on the SRS\nare eventually delivered via one of the drain functions which call\nmac_tx_send(). So the original choice of putting the mac_fix_cksum()\ncall in mac_tx_send() made sense.\n\nSecond, we can investigate all uses of fe_cb_fn. This is the callback\nused to deliver packets to an Rx SRS. There are two place this is used\non the Tx side.\n\n1. mac_tx_send(): We use the callback to affect a \"host-local\" (or\n\"MAC loopback\" if you prefer) packet delivery. We already know that\nthese packets are marked HOST_LOCAL.\n\n2. mac_bcast_send(): Used to deliver bcast packets to all clients on a\ngiven MAC. The only place this function is called is in mac_tx_send()\nin the \"host-local\" case -- where we have correctly marked the packet\nas HOST_LOCAL.\n\nHowever, there is a one (very) special case where mac_tx() will bypass\nthe SRS, but only if four conditions are met.\n\n1. SRS is in SRS_TX_DEFAULT mode.\n2. There is nothing currently enqueued on the SRS.\n3. There is exactly 1 active client.\n4. There is exactly one packet in the chain.\n\nIn this case either a) the packet is destined for a HW ring and we\ndon\u0027t care about the flag, or b) it\u0027s destined for a bridge in which\ncase we will need to mark the packet as HOST_LOCAL so it can perform\nHW emulation when forwarding to a host-local destination.\n\nSo it seems I need to add the flag in that special case."},{"file":"usr/src/uts/common/io/mac/mac_sched.c","line":4356,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. I think it\u0027s alright to do it this way and make sure we\u0027re catching it. What I was thinking was that anything that came into mac_tx() we could just tag HOST_LOCAL. Then regardless of where it ends up, we can honor it. While hardware drivers will ignore it, others won\u0027t and that\u0027s fine.\n\nThat said, the current audited approach is fine. Just makes it potentially more likely for us to miss things in the future. But it could be equally likely that we have another path that misses mac_tx() in the future."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":57,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"dropping"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":57,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":72,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Seems like this is only meant to be dropping of packets in the face of errors. Is that right?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":72,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Correct, the intent of this paragraph was to convey that this functions are for use ONLY in the \"bad\" case. So if a packet is being freed as part of regular processing then the caller should continue to use freemsg(). But if a packet is dropped due to an error or unexpected condition then I recommend using these functions so we can easily trace these exceptional events. E.g., I would call these functions in the event of: allocation failure, malformed packets, dropped because of a full queue, failed some type of verification like MAC protection, etc. If  this paragraph isn\u0027t clear enough let me know what I can change/add to better specify intent."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":72,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Rereading it, it\u0027s fairly clear that it\u0027s meant to be for the error path, I think it\u0027s buried in there and somehow I missed it the first time. Maybe in the very first sentence of the block statement just add something like \u0027... of packets where we\u0027ve detected a problem with them\u0027 or something that sounds better."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":76,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should think about what we want device drivers to do. Especially since they often drop in the context of being done with the processing (DMA complete), and it may be useful for them to pass in a dev_info_t that we then call to mac_drop_pkt()."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":76,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"So, after I wrote this code I started thinking I actually want\nsomething even grander. What I would really like to see is a set of\nfunctions added in the stream module alongside\nfreemsg()/freemsgchain()/etc. And these functions would take the\nmblk_t * as well as a fmt + arguments. That way we could start easily\ntracking drops throughout the entire network stack and we could rely\non dtrace to get info like module/func/etc, if we care about that.\n\nTo me it doesn\u0027t make sense to pass something like dev_info_t to this\nfunction. I would just put the important information in the string. My\nreal purpose with these functions is just to have a way to distinguish\n\"good\" frees from bad \"frees\", and to pass a string so I can easily\ndetermine which call site in the function I\u0027m dealing with. E.g., a\nfunction like tcp_input_data() which has 2600 LoC and something like\n90 different free callsites, many of which are \"bad\" drops. I recently\nhad need to determine which call sites I was hitting in that function\nand I had to resort to making a custom kernel where I passed an int\nargument to every free call. I\u0027d really like to avoid that in the\nfuture.\n\nAnyways, this grander idea of mine is maybe more appropriate for an\nRFD. For now it seems okay to keep the mac_drop_* functions, but I\u0027m\nalso okay with axing them if you\u0027d rather not see yet another\nhalf-baked thing in MAC :). I added them at the last minute just as a\npractical consideration for when I have to debug this stuff in\nproduction."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":76,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think it\u0027s fine for now."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":91,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we predicate this on fmt !\u003d NULL so it can make sense to use for the normal case?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":91,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"There should always be a fmt. Your comment about \"normal case\" makes me think my intent of these functions wasn\u0027t clear from the comments. These functions are ONLY called when something goes wrong. All normal frees should continue to call freemsg() and friends."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":91,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I guess that intent is fine. Thinking on it more though, we probably want to harden this against erroneous code. For example, if someone thinks they can use it without a format string and then we only trigger it in prod, that\u0027s going to be a big kaboom. At least ASSERT on debug."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":114,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I assume that it was intentional that we wanted to drop each packet independently and not call freemsgchain() based on the block comment earlier. If so, I\u0027d call out explicitly that we don\u0027t want to use freemsgchain() here."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":114,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I think I did this just because freemsgchain() is simply going to perform the same loop, so I figured better to just do it once and freemsg() here. I\u0027ll add a comment."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":162,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"There are various comments in here that suggest that mac_hw_emul() is making guarantees. However, this is a non-static function. If that\u0027s the case how can those guarantees be guaranteed to be true?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":162,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Whoops, I just forgot to add static. It\u0027s my intent that no one should consume mac_sw_cksum() or mac_sw_lso() directly. Everything should go through mac_hw_emul()."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":163,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What ensures that there are no invalid values in emul?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":163,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"mac_hw_emul() checks. And now that I\u0027ve appropriately marked the function as static I think we\u0027re good here."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":163,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, that makes sense. Thanks."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":201,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this? Why don\u0027t we want to fix up IPv6? Comment should probably explain why, not what."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":201,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Well, we do eventually want to handle IPv6 as was done in OS-6878. But we had to backout that change due to some issues. My plan was to reinstate that change AFTER I land this.\n\nThat said, there are other reasons this needs to be here (and it was present in the original mac_fix_cksum()). We want to leave alone non-IP traffic like ARP (otherwise we will drop packets like pings). At one point I thought about having this check in mac_hw_emul() (as LSO/cksum are purely IP/SCTP), but for some reason I ended up putting it here. I honestly can\u0027t remember why.\n\nI can try to move the IP check back to mac_hw_emul() if you think I should. For now I just added to the comment."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":201,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. The improved comment is better. Thanks."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":227,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How is this guaranteed?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":227,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I don\u0027t think it is. This assert was in the original so I kept it. But thinking about this with a fresh perspective for a moment, I do wonder if we should add an if expression here to drop packets that aren\u0027t long enough to contain a basic IP header? I actually like the assert here because if I\u0027m on DEBUG I want to know immediately if someone is sending bad packets and fix it. But if we are in production and it happens I certainly don\u0027t want all this header modification pointing off into some other data.\n\nBut on the other hand it seems like we should be able to assume that all packets hitting this function are HOST_LOCAL (we could certainly guarantee that by checking in mac_hw_emul()) and that all HOST_LOCAL packets were created by our own code. In that case, I would hope that IP isn\u0027t producing truncated packets. If we add the if/drop is that just a case of defensive programming?\n\nI\u0027m honestly not sure. What would you recommend?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":227,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"In general, if we have an ASSERT that guarantees something, I want to know what guarantees it on non-debug. Because we\u0027re getting data from all over the place (and in particular other kernel modules), this is a lot harder to inspect visually to confirm. I think we should probably add the defensive aspect here just in case. As the alternative, if it happens, is going to be data corruption basically.\n\nAlso, please make sure the comment makes this clear."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":287,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"MAC_HWCKSUM_EMULS?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":287,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":300,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"(MAC_HWCKSUM_EMULS | MAC_IPCKSUM_EMUL)?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":300,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":306,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is the theory here that if we are being asked to fix the checksum and the checksum is zero then we need to do so, otherwise it\u0027s probably fine?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":306,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"So I think the original problem here was that HCK_IPV4_HDRCKSUM and HCK_IPV4_HDRCKSUM_OK have the same value, and I had external traffic receiving HW emulation for some unknown reason. And this check would prevent squashing an already valid IP checksum. That said, we really should only be sending HOST_LOCAL packets through this code (I should perhaps add an ASSERT to mac_hw_emul()). I know I very much needed this code at one point in the past. But my feeling now is it makes no sense. I\u0027m going to try removing this and retest."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":306,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I remember now...this was left over from a previous iteration when some external traffic was going through this function. And because of the aforementioned HCK_IPV4_HDRCKSUM_OK problem I had to put this guard in place to prevent corrupting the already computed checksum. I\u0027ve since modified the code to not call this routine on receive of external traffic. I removed the guard but added an ASSERT to catch any regressions in the future."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":306,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, that sounds good. Thanks."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":336,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"MAC_HWCKSUM_EMULS?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":336,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":375,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It might be nice to have a brief comment about how we\u0027re going to create a chain that for each segment has a block with the full header and then another one with a duplicated data block."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":375,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":428,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Was this meant to be *head and *tail? I\u0027m not sure why we would NULL out the argument before returning which doesn\u0027t change anything. Also, should we dealing with *count?\n\nThis covers this and all the other cases of this."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":428,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, this was just a big ole brain fart while refactoring some stuff. I fixed the pointer logic, set *count to 0, and moved this pattern under a common label to avoid errors like the one where I missed a return statement."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":530,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this a requirement?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":530,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Because an LSO segment, by definition, is always more than one MSS segment. Otherwise we shouldn\u0027t have marked it HW_LSO."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":530,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. This is just a guarantee of IP? I guess it\u0027s a reasonable contract to have and there isn\u0027t much reason to do something entirely different."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":533,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":533,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":541,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Assignment of uint_t to int. I know that IP packets will generally be only 64k and so we shouldn\u0027t overflow, but probably should be paranoid about types."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":541,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, looking at this with fresh eyes I don\u0027t see a need for oleft to be signed. I can use unsigned and just change my ASSERTs to check for underflow."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":582,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Some of these are derived from uint_t others are int. Probably want to revisit type consistency."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":582,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I think I found a way to rewrite some of this logic to fix the integer consistency and make things easier to understand."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":582,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Great, thanks."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":931,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing assignment of mp \u003d next."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":931,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":946,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing assignment of mp \u003d next."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":946,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/simnet/simnet.c","line":799,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we no longer need to do this? What guarantees this?"},{"file":"usr/src/uts/common/io/simnet/simnet.c","line":799,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This is definitely a mistake on my part. I incorrectly thought of simnet as being like MAC itself, but really simnet is emulating a MAC provider. So it really sits below MAC and it\u0027s going to receive packets that don\u0027t have HOST_LOCAL set. Furthermore, since simnet is designed to emulate HW it follows that it should emulate their offloads. I\u0027ll admit that I didn\u0027t actually test simnet. I\u0027ll see if I can figure out how to test this and fix it accordingly. Good catch."},{"file":"usr/src/uts/common/io/simnet/simnet.c","line":799,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"So it turns out this isn\u0027t needed after all. The simnet driver doesn\u0027t expose any checksum or LSO offloads at the moment so the IP stack will take care of everything. That said, this simnet driver looks VERY useful for automated testing and I\u0027d like to start extending it with capabs like checksum, LSO, etc. That way we could test a lot of MAC/MAC client/IP/TCP/etc logic without relying on specific hardware.\n\nBut for now I\u0027d like to keep this change as-is and reinstate it when/if we extend simnet to support HW offloads."},{"file":"usr/src/uts/common/sys/mac.h","line":633,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So this does do the IPv4 header, is that right?"},{"file":"usr/src/uts/common/sys/mac.h","line":633,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, this includes the IP header."},{"file":"usr/src/uts/common/sys/mac.h","line":638,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What happens if this is done with an IPv6 packet?\n\nIs this supposed to imply MAC_HWCKSUM_FLAGS_EMUL?"},{"file":"usr/src/uts/common/sys/mac.h","line":638,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"We don\u0027t currently implement IPv6, but that will change when I reinstate OS-6878. And since IPv6 doesn\u0027t have an internet checksum I imagine this would just not apply.\n\nAnd yes, this does imply MAC_HWCKSUM_FLAGS_EMUL. I updated the comment to reflect this."},{"file":"usr/src/uts/common/sys/mac.h","line":638,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, just wanted to make sure we were treating it as a no-op. Probably worth saying explicitly that if there is no IPv4 checksum, nothing happens."},{"file":"usr/src/uts/common/sys/mac.h","line":657,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"For bitfields like this I\u0027ve been doing the enum values as:\n\n\u003d (1 \u003c\u003c 0)\n\u003d (1 \u003c\u003c 1)\n\u003d (1 \u003c\u003c 2)\n\u003d (1 \u003c\u003c 3)\n...\n\nPurely optional, but might make sense to use."},{"file":"usr/src/uts/common/sys/mac.h","line":657,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I like it, I\u0027ll change this."},{"file":"usr/src/uts/common/sys/pattr.h","line":110,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This seems to imply however that all the checksums are valid. I feel like we should actually make that clear. Otherwise it\u0027s not immediately obvious that if something like KVM/bhyve transmit a spoofed IP packet with garbage data that we\u0027ll just accept it as being fine."},{"file":"usr/src/uts/common/sys/pattr.h","line":110,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"By \"host\" do you mean \"netstack\"?  Or do you mean \"physical machine\", as those are very VERY different things, obviously.  Also, an HVM guest may have already done full summing which you\u0027d then ignore?"},{"file":"usr/src/uts/common/sys/pattr.h","line":110,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I mean machine. But I\u0027m not wild on the name, it\u0027s just what I came up with when I first started this. The intent of this flag is for a receiver, if interested, to query the mblk to determine if it originated from the same machine/host. I wonder if LOCAL_ORIGIN, LOCAL_SRC, or something like that would be a bit more clear? I can also elaborate more in the comment to drive home the intent.\n\nAs for HVM, yes, we will ignore the summing done. We are working with the knowledge that the mblk never left cache/DRAM and thus we can assume the bits didn\u0027t get corrupted \"in flight\"."},{"file":"usr/src/uts/common/sys/pattr.h","line":110,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, in IP it will assume checksums are valid. Though in the future maybe other clients/stacks won\u0027t treat it that way. My main intent with this flag is to convey to the receiver that the packet originated from the same machine. But I can add a comment about TCP/IP checksums here too.\n\nAs for HVM, they could spoof garbage data today and all the checksum would tell us is that the garbage didn\u0027t get corrupted while in memory."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":268,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Of what? I know that it\u0027s the virtio standard, but most folks won\u0027t."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":268,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":895,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If it doesn\u0027t allow negotiating then why aren\u0027t we checking what the maximum LSO size is for IPv4 before saying that we can use it in the guest?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":895,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":1905,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason we\u0027re not using mac_lso_get() to get this information? Here and elsewhere?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":1905,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I think I did this because there were other places I had to avoid the provider functions because they would perform masking on the flags value. In this case that doesn\u0027t matter and I could just as well use mac_lso_get(). And it would certainly be preferable gate client access to APIs so that we have the freedom to change the MAC implementation in the future. However, mac_lso_get() and friends are technically a MAC provider API. So it seems wrong for a MAC client to make use of them. Should I just add this function to the client API as well?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":1905,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I guess we can punt for now and revisit. Just in the long run, I want to get us out of checking the mblk_t directly for this stuff."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2116,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"DATA_VALID?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2116,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Changed to use the full flag name."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2125,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is confusing to me. The comments suggest that we need to fix up the IP checksum and that\u0027s why w pass MAC_IPCKSUM_EMUL. Though why do we need to paass MAC_HCKSUM_FLAGS_EMUL? Is that telling us to not fix the other checksum flags somehow? It would seem naively like that\u0027s telling us to just copy the flags somehow."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2125,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, that is confusing. I\u0027m not sure if I intended this or was just asleep at the wheel. But since IPCKSUM_EMUL implies the later, there\u0027s no reason to pass both."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2130,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is confusing to me. Given that MAC_HWCKSUM_EMUL implies FLAGS_EMUL. So if the guest doesn\u0027t support the checksum us telling it checksums are OK why is this conditional? I suspect that there\u0027s something I\u0027m missing here which is partly why I\u0027m missing this.\n\nI think the confusion is I can see the distinction making sense if MAC_HWCKSUM_EMUL didn\u0027t imply MAC_HWCKSUM_FLAGS_EMUL."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2130,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"There are 3 cases here:\n\nA. guest can accept TSO packet and csum flags (that\u0027s the above if block).\nB. guest cannot accept TSO but does accept csum flags (guest_csum is true)\nC. guest cannot accept TSO or csum flags (guest_csum is false)\n\nIn case B we don\u0027t have to emulate the ULP checksums, only set the flags. However, what I should have had here is MAC_IPCKSUM_EMUL because it\u0027s the same as case (A), just with the addition of possible LSO emulation.\n\nI\u0027ve added a larger block comment above the if block describing the three distinct cases. Hopefully that will clear things up."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2131,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Seeing things like this makes me wonder if longer term we should turn it into what I\u0027m OK list rather than a what I want you to fix list especially as we add overlay related checksumming / LSO."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2131,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I believe Patrick was leaning this way as well. I can certainly make that change and see what it looks like."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2131,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think it\u0027s alright to keep the current design. Just something we should come back to in the future."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2336,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why are we now assuming that we always have continguous blocks for this data when we didn\u0027t previously? Was it previously incorrect to do so, overly paranoid, or something else?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2336,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This is guaranteed by the code in viona_tx() that \"pulls up\" at least enough bytes to cover the maximum ether + IP + TCP headers. This avoids the need to worry about b_cont walking."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2336,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. Would you mind adding a comment to cover this? We\u0027re far enough away that we\u0027ll miss this otherwise."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2371,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What\u0027s legacy mode?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2371,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Viona is a \"legacy device\" as defined by the VIRTIO spec (it doesn\u0027t offer VIRTIO_F_VERSION_1 during feature negotiation). Because of this the guest driver will operate according to the \"legacy interface\". And according to section 2.4.3 of the VIRTIO 1.0 spec  (and more specifically to VIRTIO net, section 5.1.6.1), a driver using the legacy interface will write virtqueue data and fields in the guest\u0027s native endian format.\n\nI was a bit sloppy with my words in the comment and concocted \"legacy mode\". I\u0027ll fix that."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2493,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"signedness mismatch: i is unsigned, n is signed."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2493,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2496,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this cast required?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2496,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m not sure how or why that got there. I think this was a case  of copypasta from the existing code."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2540,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Potential integer truncation"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2540,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Changed this to uint32_t to match len. I realize iov_len is size_t but the VIRTIO interface limits this to 32-bit (see vu_tlen in the code and section 2.4.8 of the spec)."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2540,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, probably worth a comment on what guarantees this then."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2546,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why is this cast required?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2546,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Well it was there before and I didn\u0027t think to remove it. But it looks like iov_base could be a void * or caddr_t (depending on if XPG4_2 is set), and desballoc() expects a uchar_t *."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2546,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Ah, I missed that part of desballoc(). That makes sense."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-7},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":20,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":167,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":34,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":48,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":47,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":911,"deletions":-236},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":38,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":4,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":9,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":238,"deletions":-55}],"sizeInsertions":1589,"sizeDeletions":-458},{"number":"2","revision":"dea3f840dd977be08b163ef00dc337f091a075de","parents":["4a3dceb097fceefc13c4471707cd40944dd07ffb"],"ref":"refs/changes/75/4675/2","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1535486679,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":663,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We probably want the same language here with whatever you do based on Dan below at +2267."},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":663,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":2267,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Nit:  \"a same-machine sender\""},{"file":"usr/src/uts/common/inet/ip/ip_input.c","line":2267,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/inet/ip_impl.h","line":164,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"OTH \u003d\u003d ?!?"},{"file":"usr/src/uts/common/inet/ip_impl.h","line":164,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"MAC has an array of three softrings. \"TCP\", \"UDP\", \"OTH\". Where TCP and UDP are IPv4 specific. I don\u0027t recall if OTH no longer contains VLAN tagged versions of those. These are defined in \u0027uts/common/io/mac/mac_sched.c\u0027."},{"file":"usr/src/uts/common/inet/ip_impl.h","line":164,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"The \"other\" softring, all traffic that is not TCP/UDP."},{"file":"usr/src/uts/common/inet/ip_impl.h","line":164,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Mark."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":408,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027ve been staring at this for a while. I realized that something felt a little off and I think I may have found something here. Importantly, there\u0027s a bit of a mismatch in processing and nextp.\n\nWe properly deal with that emulation for the first packet. However, i_dls_link_subchain will chain together multiple packets for delivery, walking b_next. If those _also_ are LSO packets or just have checksum issues, then they won\u0027t be fixed up in any way and we\u0027ll deliver them fully to the client in that form I think. I\u0027m not sure if I\u0027m clear or not.\n\nImagine the case where we have multiple LSO packets for the same flow connected via b_next. In that case, only the first one will be broken up, I believe."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":408,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"You are absolutely right. Reading the code the mistake is obvious but I also attached my own DLPI consumer to IPv4 and saw LSO messages coming through. This doesn\u0027t seem to cause issue since our IP stack will handle the LSO packets just fine (and VND uses promisc which uses packet-at-a-time delivery). But if we are going to segment LSO packets in DLS Rx then it should be done to all packets, not just some."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4028,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Do we have to worry about mp-\u003eb_next here, or before copymsg() even?"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4028,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"When we copy a message block with copymsg(), it will only duplicate the b_cont members, it will not duplicate or set b_next members. Which is simplifying. It might be worth a comment to affirm that for future readers."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4028,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4028,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"copymsg() doesn\u0027t copy b_next, so mp_copy will always be a single message.  They way this function (and its caller, mac_promisc_dispatch()) was originally written is a bit odd. In the case the copy path there was no reason to worry about mp_copy-\u003eb_next because it was always NULL and there was no reason to worry about mp_next because mp !\u003d mp_copy. In fact, perhaps it would be more clear if mac_promisc_dispatch() detached the mp before calling this function."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4039,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we add a reminder that mp_copy will be freed as a side effect of calling this regardless of the outcome?"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4039,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4062,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"If you\u0027ve an LSO-candidate with non-NULL b_next, this loop will send everything up, not just the \"one\" that this function claims to do.  Please be careful here."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4062,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"That\u0027s certainly true; however, I think it\u0027s reasonable. My belief is that the one here is really to make it clear that it doesn\u0027t deal with a chain directly."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4062,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I don\u0027t think so. The call to mac_hw_emul() above will always be for a single message (because copymsg() doesn\u0027t follow b_next). This single message, if LSO, will turn into a chain of segment messages (b_next); the head of which sits at mp_copy. Then this for loop will take one mblk at a time in tmp, and pass it to the promisc handler. The dls_rx_promisc() handler has an ASSERT to verify this. And I\u0027ve tested this code path under DEBUG.\n\nThis might be more clear if i added yet another ASSERT either in this if-block or modified mac_promisc_dispatch() to perform the detachment. I\u0027m open to either of those if you think it would help clarify what is happening here."},{"file":"usr/src/uts/common/io/mac/mac_client.c","line":4062,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Please see my response to Dan."},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","line":3499,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Why this change? Looks like mac_pkt_drop() does additional mblk sanitizing. Did you maybe mean mac_drop_chain()?"},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","line":3499,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think this was done because it was just considered part of the normal data path. However, if we are freeing data with the SRS, that feels like it does deserve the mac_drop_chain() and error message treatment. As in general, I feel like this likely shouldn\u0027t have data."},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","line":3499,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"See my reply to rm.\n\nAs for the sanitizing. I speak to that elsewhere."},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","line":3499,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, that was my reasoning. But I was on the fence with this one and your point is fair. I\u0027ll change it."},{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1554,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Seeing this made me go audit all of uts for direct access to DB_CKSUMFLAGS. I looked at this by running from uts:\n\ngrep -R DB_CKSUMFLAGS * | awk \u0027{ print $1 }\u0027 | sort | uniq -c\n  11 common/inet/ip/ip.c:\n   4 common/inet/ip/ip6.c:\n   7 common/inet/ip/ip6_input.c:\n   5 common/inet/ip/ip6_output.c:\n  11 common/inet/ip/ip_input.c:\n   7 common/inet/ip/ip_netinfo.c:\n   7 common/inet/ip/ip_output.c:\n   1 common/inet/ipf/ip_fil_solaris.c:\n   1 common/inet/ipf/ip_proxy.c:\n   1 common/inet/sctp/sctp_shutdown.c:\n   1 common/inet/tcp/tcp_output.c:\n   1 common/io/bridge.c:\n   4 common/io/mac/mac_provider.c:\n   5 common/io/nxge/nxge_send.c:\n   2 common/io/sfxge/sfxge_rx.c:\n   4 common/io/sfxge/sfxge_tx.c:\n   2 common/io/trill.c:\n   2 common/os/strsubr.c:\n   1 common/sys/strsubr.h:#define\n\n\nFrom here I was concerned about the driver usage and how they would react if they saw additional flags. Based on this, my cofus was nxge and sfxgbe. Based on my audit, it seemed OK. Though sfxge certainly is doing shady things with the members directly that it shouldn\u0027t."},{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1554,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I made this change early on in development. Honestly I\u0027m not 100% sure we absolutely need this anymore. I\u0027d have to go back and audit."},{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1554,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I believe it\u0027s fine to leave it as is at this point."},{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1554,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Ack."},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","line":245,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Same question here... why not mac_drop_chain()?"},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","line":245,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m changing this to mac_drop_chain() based on rm\u0027s comment on the other instance."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":77,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Also, should these do the sanitizing that mac_pkt_drop() does?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":77,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I don\u0027t believe that we need to per se. If we did, then the normal freemsg path would be problematic. At least, based on my auditing of the free paths, they\u0027ll end up back in the kmem caches and the things that allocate from those kmem caches all end up properly reinitializing them. Given that this isn\u0027t a more fundamental problem, I suspect it\u0027s fine."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":77,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"If we want the identical behavior as before in all places that we called mac_pkt_drop(), I suppose so. But now that makes me wonder: why was it only mac_pkt_drop() doing that sanitization? There are plenty of places where we freemsg() in MAC (and other parts of the network stack) and don\u0027t bother with this."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":77,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, it seems like this sanitization is not needed just by the fact alone that we have many places where we don\u0027t bother performing it. One argument for removal is to avoid confusion in the future. That way future maintainers don\u0027t spend time wondering why we sanitize in some paths but not others."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":116,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"My dtrace-fu is a bit weak here, but will this instantiate as a different probe than the one in mac_drop_pkt()? If so, be careful.  If not, no big deal then, and ignore this."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":116,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Yes and no. This will be a second probe. However, it will have a different function, but not a different probe name. So you\u0027ll be able to do sdt:::mac_drop. Though maybe it should really be mac-drop to match the common use of - in the other drop probes?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":116,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, I would prefer to have two probes to differentiate which function was called (in case that info is useful somehow).\n\nGood call on mac-drop; that was an oversight on my part."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":116,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yup, they will show up as two different probes, differing in probefunc. Which is good since that will allow the user to differentiate between the two if they feel the need to."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":190,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please add a comment that explains who/what guarantees this is pulled up."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":190,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":229,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Pardon the reverse order of these (discovered this toward the bottom first).  You should be using ipha_t throughout your changes."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":229,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Updated all code to use ipha_t/tcph_t."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I know this came from the pre-existing code, but it\u0027s not clear to me why it\u0027s valid or what guarantees it."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m not sure what guarantees it either, but if this isn\u0027t true then the checksum code below will produce a bad value. TCP/IP illustrated Vol 1., Sec. 5.2.4 makes it pretty clear that that IPv4 options are mostly a historic artifact and should never be used. The only one that seems to be an exception is Router Alert, which should never make it here since it should be going out a MAC.\n\nThat said, I could change this code to instead just drop packets that aren\u0027t simple IP headers. What do you think?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that we could have hardware virtual machines coming down this path and we\u0027re going to fix their packets, it seems like we probably want to check and drop or at least just deal with the reality somehow. Maybe ASSERT on debug and drop?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"This may be historical, in that IPv4 packets with options may have at one point always done SW checksums in IP itself.  I\u0027d have to dig through histories of ip.c to be sure, though.\n\nASSERT-or-drop seems reasonable for now."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":249,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Drop/ASSERT is more than fair. Done."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":377,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is the first introduction of seg_mp. It\u0027s not in the diagram below. However, seg_head is. But it\u0027s not quite clear what seg_head is (at least, just reading this comment at the moment, I\u0027m sure it\u0027ll be clearer with code)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":377,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, I reworded the intro to introduce seg_head and then changed this paragraph to reference that instead of seg_mp."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":390,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You haven\u0027t talked about what seg_head is at all here. It\u0027s not clear to me what it\u0027s supposed to represent or not."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":390,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":430,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This isn\u0027t clear to me. Or perhaps the distinction between the two images just isn\u0027t very clear. Why is offset the same in both the before or after case? Is one trying to refer to the offset versus exact case? I kind of thought they were meant to represent a before and after kind of world. But now I\u0027m actually just less certain in general."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":430,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"They do represent before and after. In this first case the data segment consumes the entire lso_mp (from start to finish). In the second case it starts at an offset into the lso_mp but consumes exactly the rest of its data (it doesn\u0027t need data from the next lso_mp). In both cases seg_head ends exactly on an lso_mp boundary. This means that offset must be reset to 0 and the lso_mp walked forward."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":464,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think this will be clearer if it says that the remaining data satisfies a or b. On first read it sounds like we\u0027ll keep going until we find a single seg_len block."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":464,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"either"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":464,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":464,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":486,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is a little confusing, because in the actual code seg_mp will actually be equivalent to seg_tail."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":486,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, that was my poor attempt to convey that each block will be pointed to by seg_mp as the chain is built. But that\u0027s probably not clear so I just removed it."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":513,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Rather than goto, this may be clearer with a for (;;) loop. But I don\u0027t feel strongly one way or the other."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":513,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I slightly prefer the label because it gives a little extra clarity that this should be the last mblk needed to fill the segment and because it avoids indenting all this code over another tab stop."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":513,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, sounds good."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":549,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"After doing this assignment, don\u0027t we need to assign seg_tail to seg_mp? Otherwise if we hit this case again, won\u0027t we be updating the wrong b_cont?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":549,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Good catch. Fixed."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":596,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I noticed this below, but shouldn\u0027t you be using the header defs in $UTS/common/inet as the TCP/IP stack does?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":596,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I updated the code to use ipha_t/tcph_t."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":613,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I missed this, but this is a potential truncation point. I know we\u0027ve talked about this being unlikely, but wanted to call it out just in case."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":613,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, I\u0027m not worried about truncation unless there\u0027s a bug in the code causing us to build an overly long packet. I added an ASSERT to catch such a case."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":619,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please comment that this has been verified to be long enough in mac_hw_emul()."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":619,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"So I just realized that mac_hw_eml() _does_ guarantee that we at least have an Ethernet header, but not that we have a TCP/IPv4 header. The previous mac_sw_cksum() assumed the IPv4 header is in the mblk. And it seems our TCP stack will use one mblk for all headers (see the use of conn_ht_iphc_allocated in conn_build_hdr_template() and total_hdr_length in tcp_send()).\n\nSo, I see a few options:\n\n1.  just add a comment about all this but leave the assumptions since the previous code made them as well\n\n2. Be super safe and add helpers (like in VND) to walk b_cont for header values (but if this is never a possibility it seems like a bunch of work for nothing).\n\n3. Add more logic to mac_hw_emul() to drop packets that don\u0027t have all the headers in one mblk.\n\nI wanted to get your take before doing anything."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":619,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I guess we always pull up the headers to avoid a TOCTTOU attack, which makes this a bit less likely. I just wonder and worry about what will happen when we think about things like encapsulation protocol aware TSO where the inner headers will be in another header. I\u0027m not sure if I have a great suggestion in terms of which path we should go forward with for now. Maybe just comment about this reality."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":619,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, so I documented the current situation and I gave us a bit more piece of mind by adding ASSERT/drop in all places where we make mblk/header assumptions. It\u0027s defensive coding but I think it\u0027s the safest option until the day we are more confident about these assumptions (or we come up with some other solution that doesn\u0027t need these assumptions -- like universal mblk helpers or caching header data)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":704,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"the checksum? Or some other article."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":704,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"an LSO packet?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":704,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":704,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":708,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"For some reason this part doesn\u0027t sound right (from a language perspective, not correctness), but I can\u0027t say why."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":708,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yep, I can see how this would be a bit confusing. I elaborated a bit more."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":710,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"LSO packets"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":710,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":711,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"checksumming? checksums?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":711,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":744,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I don\u0027t think tmptail is supposed to be declared here. I think it needs to be in a larger scope. Otherwise we\u0027ll be using tmptail in an unitialized fashion at 765. As when we next take a loop, the previous value will be lost."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":744,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, I dunno what I was thinking."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":752,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"drop the partially?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":752,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":768,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think the tmptail intialization should be brought into this if statement and made consistent. As we\u0027re using the initialization of one thing which is somewhat disjoint from the i \u003d\u003d 0 case, except by close inspection."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":768,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I decided to initialize tmptail at the same time as seg_chain: before the loop. That feels more consistent to me."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":778,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think this has really helped make this much more understandable. Thanks!"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":778,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Good. I was afraid maybe I went to heavy on the refactor sauce."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":899,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"\"struct ip\" or \"ipha_t\" ?  The TCP/IP stack itself uses ipha_t.  Do other parts of MAC use this?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":899,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Fixed to use ipha_t."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":900,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"NOTE:  This will cause two LSO packets id\u003dX and id\u003dX+1 to become id\u003dX, id\u003dX+1,... id\u003dX+n, id\u003dX+1, id\u003dX+2..., id\u003dX+1+n.\n\nNot a big deal UNLESS sender doesn\u0027t set DF AND post-LSO-split IP fragmentation occurs. You might wish to comment about this possible corner case, unless I\u0027m missing something."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":900,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"When generating LSO packets it\u0027s TCP/IP\u0027s responsibility to accurately update the packet id to sufficiently cover this range. Which is what TCP/IP does today, fwiw."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":900,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"See my comment to rm."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":900,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"That is correct. Our TCP stack handles this by setting ixa_extra_ident. I also verified this with dtrace:\n\n    \u003cGZ\u003e root@gaia [~]\n    # dtrace -qn \u0027ip:::send /args[2]-\u003eip_saddr \u003d\u003d \"192.168.2.30\" \u0026\u0026 args[2]-\u003eip_daddr \u003d\u003d \"192.168.2.3\"/ { printf(\"ident: %u [len: %u]\\n\", args[4]-\u003eipv4_ident, args[4]-\u003eipv4_length); }\u0027\n\n    ident: 12233 [len: 10188]\n    ident: 12240 [len: 8995]\n    ident: 12247 [len: 10188]\n    ident: 12254 [len: 10188]\n    ident: 12261 [len: 10188]\n    ident: 12268 [len: 10188]\n    ident: 12275 [len: 10188]\n    ident: 12282 [len: 10188]\n    ident: 12289 [len: 8995]\n    ident: 12296 [len: 10188]\n    ident: 12303 [len: 10188]"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1025,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think we should make it clear in this block comment that after calling mac_hw_emul(), mp_chain must not be touched and assumed to be garbage."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1025,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I can add that comment. But now I\u0027m thinking it might make sense to just roll mp_chain and ohead into the same parameter. That way we simplify the API and completely sidestep the chance of use-after-free. Any objection?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1025,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think that makes sense and makes for a safer / simpler API."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1025,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1029,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"NOTE TO SELF:  If we ever exploit ixgbe\u0027s IPsec acceleration, possibly use this facility for default ESP post-IP-transmit processing.  :)"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1029,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I dunno what that is, but sure :). It\u0027s my feeling that mac_hw_emul() could, and should, be used for any type of NIC HW offload that we want to also emulate in software -- if there is a clear benefit. LSO is clearly beneficial because it means we can push more data through MAC with less calls from TCP/IP."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1029,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ask me sometime, or look at an ixgbe-or-later\u0027s big-Intel-manual about IPsec HW acceleration. No open source driver, AFAIK, exploits it."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1095,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"You\u0027ve confirmed this on DEBUG kernels?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1095,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"copyb calls allocb_tmpl which calls allocb which guarantees b_next is NULL."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1095,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Mark."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1095,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This comment is left over from a previous iteration of the code when I initially moved this block of code over from mac_fix_cksum(). It doesn\u0027t make sense anymore in this context. It was referring to the b_next of the new chain being built (tail-\u003eb_next), not the mp being freed here. \n\nAs for the freemsg(): we know mp-\u003eb_next is NULL here because we detach the mblk just a few lines above. And yes, I\u0027ve tested on DEBUG. I\u0027m going to remove this comment as it only serves to confuse."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1306,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Now I know why mac_pkt_drop() no longer exists.  :)\n\nBut the prev \u0026 queue NULL-ing is the sanitizing you may want existing in your new drop functions."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1306,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"See my other comments."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1313,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Unless, of course, these sanitizers are completely unnecessary...\n\nfreemsg() and freeb() both ASSERT() that b_next and b_prev are NULL.  freemsgchain() addresses b_next but not b_prev.\n\nI don\u0027t see also why this can\u0027t just freemsg(mp1) after sanitizing as well."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1313,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027m not sure these sanitizers are necessary to be honest. But I put that rationale in a longer comment elsewhere."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1313,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Keeping them in feels like cargo culting. If this sanitization was truly important I would expect it should be on every single free path. I won\u0027t die on this hill but I hate to perpetuate code that wastes people\u0027s time (I know I probably spent an hour just going over b_prev/b_queue use, wondering why these lines exist).\n\nI\u0027m removing them."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1313,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, it\u0027s interesting that this seems to be the only place in MAC (or any other part of the network stack) that cares about sanitizing b_prev/b_queue before freeing. It seems like consumers which use these fields for dual purpose clean it up on their own. I wish I had some history here.\n\nI\u0027m going to remove these sanitizers and just freemsgchain(). I\u0027m not against adding them back in if you feel strongly against this but it seems rm and I both agree they are unnecessary; and I think they only serve to confuse at this point."},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027d call this IPv4 explicitly."},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/sys/mac.h","line":644,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"When I was going through viona again, I ended up getting myself twisted in a bunch of logic that didn\u0027t make sense.\n\nI think this could be clarified a little. I read the \u0027but don\u0027t actually calculate any checksums.\u0027 portion as describing that this implies that checksums should not be calculated. Where as what this really means is that setting this option does not calculate the checksum on its own. How about the following text:\n\nIf an mblk is marked with HCK_* flags, then set the flags as if the checksum was calculated and verified. This does not imply that the checksum is calculated and updated in the packet. To update the actual checksum, MAC_HWCKSUM_EMUL or MAC_IPCKSUM_EMUL is required.\n\nIs there a reason that no one is calling this interface with just this flag?"},{"file":"usr/src/uts/common/sys/mac.h","line":644,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"That\u0027s a good point. I can see how someone might read it that way.\n\nI just realized that no one is using this flag directly anymore. Originally I was calling the emul functions in ip_input() and using just this flag. But then I realized that won\u0027t work because the L2 info is stripped by MAC (there is a mac_header_info_t but it may be NULL). That\u0027s when I decided that IP should just check for the HW_LOCAL_MAC flag instead. And because of that this emul flag lost its only consumer.\n\nShould I just remove it?"},{"file":"usr/src/uts/common/sys/mac.h","line":644,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If we don\u0027t have a consumer of it and we\u0027re not going to be just having consumers flip blocks around, then yeah, I think we should remove it to simplify things."},{"file":"usr/src/uts/common/sys/mac.h","line":644,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yanked. Code looks a bit cleaner now as a result."},{"file":"usr/src/uts/common/xen/io/xnb.c","line":258,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"John Levon *might* know something about this, but yeah, this makes sense."},{"file":"usr/src/uts/common/xen/io/xnb.c","line":258,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m going to just remove my TODO then. I haven\u0027t tested Xen and I\u0027ll make sure to note that on the ticket. But I\u0027ve tested the SW checksum emulation plenty. I\u0027ll put myself at the mercy of the IA gods if they want to send me down the Xen testing rabbit hole."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":234,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ahh, if this is downstreamed from FreeBSD, I now might understand why you mixed/matched netinet/* definitions and inet/* definitions.  Any file that is downstreamed from FreeBSD should use netinet/ because it\u0027ll make maintenance easier."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":234,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is not downstream from FreeBSD at all."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":234,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Mark."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":234,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This is my own creation. I just didn\u0027t know the difference between inet/netinet."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2157,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, I guess the virtio features only cover the L4 checksums and not IP and thus if we\u0027re doing this, we may need to fix that up in the packet, is that right? Otherwise we need to fix both."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2157,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Correct. If you read the spec it doesn\u0027t actually spell this out in the feature bit definitions, but it hints at it when describing Tx/Rx. I personally had to figure this one out the hard way when the guest was dropping all packets."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2375,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"But then there\u0027s this.  If this isn\u0027t downstreamed, then what?  Or if this is a unique-to-illumos part, then you\u0027re okay."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2375,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Everything uses ipha_t now."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2515,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Where does 60 come from?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2515,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This represents the max Ethernet + IP + TCP header lengths. I\u0027m going to change this to use our constants so it\u0027s more explicit."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":11,"deletions":-7},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":170,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":34,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":55,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1041,"deletions":-238},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":39,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":9,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":269,"deletions":-58}],"sizeInsertions":1778,"sizeDeletions":-463},{"number":"3","revision":"5862f50d16e688d6a3d02273f8a2dbf132012cf5","parents":["4a3dceb097fceefc13c4471707cd40944dd07ffb"],"ref":"refs/changes/75/4675/3","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1536172183,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1536194613,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/io/dls/dls_link.c","line":370,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we still increment dlp_unknowns?"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":370,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"So I did think about this, and I figured in this case they aren\u0027t \"unknown\" so much as something went wrong (in which case mac_drop_pkt/chain() should have been called).  The copymsgchain() below has the same behavior: if it fails to allocate then we won\u0027t increment dl_unknown. Ideally, I feel like we should have a counter incremented for every single drop, but it seems like dl_unknown has a specific meaning and this scenario doesn\u0027t fit."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":370,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK, that makes sense. Thanks."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":702,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"nit: psuedo -\u003e pseudo"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":702,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":909,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"Would it make sense to precede this with a comment similar to the one on line 820, or a shorter one referencing the earlier one?\n\nAlso, why do you reset TH_URG here, but not for the first packet?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":909,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"My intention was to not allow TH_SYN | TH_RST | TH_URG on any LSO segment. There\u0027s a earlier check where we drop any LSO packet with any of these three flags set -- so we only need to clear the FIN | PUSH flags on the first and middle segments.\n\nURG (MSG_OOB) is a historical artifact at this point; we should never see LSO packets with it set (and even if we did the TCP stack would eventually notice the dropped packets and reduce the packet size until it fits in a single MTU). In SmartOS/illumos, our use of MSG_OOB is limited to telnet, rlogin, and ftp -- in all cases the write size is 2 bytes or less."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":916,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"nit: psuedo -\u003e pseudo"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":916,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":170,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":21,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":59,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1054,"deletions":-245},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":39,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":270,"deletions":-58}],"sizeInsertions":1776,"sizeDeletions":-470},{"number":"4","revision":"407c9fdd29d9c151276fe0c9db0ae7b9f7d7d01f","parents":["4a3dceb097fceefc13c4471707cd40944dd07ffb"],"ref":"refs/changes/75/4675/4","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1536339195,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/common/io/dls/dls_link.c","line":384,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Does this have the same need of similar logic happening in i_dls_link_subchain? Is there any reason we don\u0027t do this as part of the first mac_hw_emul call, though it\u0027ll have to be predicated on HW_LOCAL_MAC."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":384,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Sigh. You are correct. This prevents LSO packets from being sent up but will send up some segments without checksum emulation. I\u0027ll add the code to the subchain function as well.\n\nI started doing the emulation in two stages because I didn\u0027t want the HW_LOCAL_MAC predicated hard-coded into mac_hw_emul() (as future consumers, like MAC providers, won\u0027t want that; it would also break bridges, I believe). I can do the LSO emulation without a manual loop + predicate because in Rx context the LSO flag implies HW_LOCAL_MAC (no MAC provider is going to set HW_LSO on an Rx mblk).\n\nIf I pass MAC_HWCKSUM_EMUL in the first call then it will also trip on non-HW_LOCAL_MAC packets because of the HCK_IPV4_HDRCKSUM_OK problem. That\u0027s why I did it in the second loop where I can easily predicate on HW_LOCAL_MAC.\n\nI had a version where the first call to mac_hw_emul() was replaced with a manual loop that performed both emulations in one go. But it just felt a bit ugly because of all the chain splicing. I thought this read better. But maybe it\u0027s more confusing/subtle?\n\nFor now I\u0027m just going to elaborate on the comment."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":384,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think I had missed the fact that we\u0027re going to possibly have different sources in the same chain and that it wouldn\u0027t equally apply. With that in mind, this is probably the best option."},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":384,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Well, maybe they would never be mixed in the same chain but I\u0027d rather just be safe here."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":241,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return (NULL)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":241,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":265,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return (NULL)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":265,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":277,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return (NULL)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":277,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":292,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return (NULL)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":292,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":369,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return (NULL)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":369,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":385,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Extraneous blank?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":385,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":686,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Missing return / clean up."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":686,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1068,"reviewer":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},"message":"nit: poitner -\u003e pointer"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1068,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably should mention that this updates the checksum flags."},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2115,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any reason not to do a single pass with LSO and the checksum EMUL and just build up the flags outside of this so that way we can just operate on the chain normally?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2115,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"As I described in DLS, we need two separate calls to avoid calling mac_hw_emul() on packets arriving from the external network (once again, thanks to the HCK_IPV4_HDRCKSUM_OK problem). I added to the comment."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":156,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":24,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1092,"deletions":-247},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":30,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":233,"deletions":-58}],"sizeInsertions":1752,"sizeDeletions":-471},{"number":"5","revision":"1bd5a2c0e7bc96562e94ef858a8b1d4d4032f766","parents":["4a3dceb097fceefc13c4471707cd40944dd07ffb"],"ref":"refs/changes/75/4675/5","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1536690941,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1536708489,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1536756780,"by":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1536767556,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/io/bridge.c","line":1951,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I\u0027m confused about the need to go straight out via \u0027return\u0027."},{"file":"usr/src/uts/common/io/bridge.c","line":1951,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"This is keeping the same semantics as before. In the previous code, if reform_vlan_header() returns NULL, we return. This new code is doing the same thing except it will attempt to send all segments from an LSO before returning (so if reform_vlan_header() fails to allocate or something we may still get segments out).\n\nAll that said, it would be cleaner to just drop on the first return of NULL from reform_vlan_header() (and if it\u0027s failing to allocate we have big problems, so trying to send more segments is counterproductive)."},{"file":"usr/src/uts/common/io/bridge.c","line":1954,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Won\u0027t the return here (and at L1925) leave bl_trillthreads incremented?"},{"file":"usr/src/uts/common/io/bridge.c","line":1954,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes, as the previous implementation did. But a quick glance makes me think this is a bug in the previous implementation.\n\nI\u0027ll fix this."},{"file":"usr/src/uts/common/io/bridge.c","line":2155,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"append comma"},{"file":"usr/src/uts/common/io/bridge.c","line":2155,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/bridge.c","line":2157,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"necessary over a comma?"},{"file":"usr/src/uts/common/io/bridge.c","line":2157,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m happy with my choice."},{"file":"usr/src/uts/common/io/bridge.c","line":2196,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"wrap this in braces since it required a continuation?"},{"file":"usr/src/uts/common/io/bridge.c","line":2196,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":167,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"append comma"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":167,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":397,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"append comma"},{"file":"usr/src/uts/common/io/dls/dls_link.c","line":397,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":82,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Since most of these messages seem pretty short (less than the hallowed 80 chars), perhaps a smaller buffer (128?) might be appropriate here, given that mac sometimes finds itself pretty deep in the stack?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":82,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"That\u0027s a good idea. Done."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":161,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"determined"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":161,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":210,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"append comma"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":210,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":265,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"BEAUTIFUL - with 9832 on my mind, I\u0027m glad to see this."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":379,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"So you want a failure of this invariant to be fatal on DEBUG but totally fine on non-DEBUG?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":379,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yes. I purposely added defensive coding to protect the assumptions made downstream. It\u0027s not ideal, but it seemed like the best tradeoff rather than rewriting everything to use something akin to your mblk helpers. Especially given that these assumptions should always hold given the offloads we are dealing with here. I.e., we know our TCP stack will put all headers into the first mblk. In viona we pull up the headers into the first mblk. And so on.\n\nIn a world with mblk helpers I would expect this to all be rewritten to use them. We could check lengths up front and cast if large enough; otherwise fallback to the helpers. Or just use the helpers unconditionally."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":389,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Make this an explicit comparison?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":389,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":809,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Couldn\u0027t this be \u0027(odatalen + mss - 1) / mss\u0027 for the rounded-up division?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":809,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I mean, both are correct; and both are idiomatic. And the current version would be immune to overflow in the case that the dividend or divisor could sum to greater than UINT32_MAX. So this feels like six-in-one, half-a-dozen in another."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":809,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I would hope we would have some invariants in place to prevent UINT32_MAX from ever being a danger in the context of LSO, but this is fine to me."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":809,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Right, we know that can\u0027t happen. My point was simply the way I did it here is the idiomatic way to do it to avoid overflow. So since we might use this idiom in other places of the code I figured I\u0027d stick with this one instead of changing it to the method you wrote."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":852,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"style nit: could be assigned at definition time, right?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":852,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Could be. Though I want to keep the comment and now I\u0027m not sure where to put it. Is it acceptable style to have a block comment in the middle of block declarations?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":852,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I\u0027ve been doing this mostly out of \u0027const\u0027 zealotry.  It\u0027s fine however you want."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":852,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m just going to leave this as-is and I\u0027ll try to make more use of const in future wads."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1085,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"quote this to indicate it\u0027s a param?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1085,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Do we do that consistently? I find the quote distracting, but if it\u0027s what we want to strive for I can change it."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1085,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"I try to do it in my comments, especially when the argument names would confuse the sentences references them.  It\u0027s up to you."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1085,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I wrapped all parameter names in quotes."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1093,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Perhaps include a little more detail about the expected reasons for this (dropped packets due to bad length or failed copying) and that the caller needn\u0027t worry about freemsg()ing if that\u0027s the case."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1093,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Okay, I tried to add some additional clarification. Though I would hope it\u0027s also obvious that since *mp_chain is NULL on output there is nothing for the caller to free."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1093,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Sure.  My main concern is that there are a lot of pointer-pointers crossing function boundaries in the LSO datapath.  The logic is far from inscrutable, but it isn\u0027t simple either."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1093,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Ack."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1162,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"How much do we want to worry about subsequent mblks in the b_cont chain violating this constraint?  Perhaps leave it up to the fix-up function in question? (Only cksum in this case, right?)"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1162,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, so I shouldn\u0027t have used copymsg() here (I simply did what mac_sw_cksum() was doing before). This will end up copying way more data than we want in the case of LSO. We are only modifying the headers; so they are all we need to copy. That said, there are cases where even when db_ref \u003e 1 we don\u0027t really need to copy. In the case of a MAC-loopback we know the sender is a local TCP stack. We know the sender is \"done\" with the mblk, it\u0027s simply holding onto it for rexmit purposes. So we could modify it in-place and it\u0027s not like the sender TCP stack is going to make sure the headers didn\u0027t change when it receive the ACK. But of course, it\u0027s probably safest to just copy any headers and not think about this stuff.\n\nIt makes most sense to let the individual emul functions handle this copying. In the case of checksum we just need to cover the headers. In the case of LSO we never actually modify anything in the original message, rather we use its headers as a template for the newly allocated segment headers -- so a db_ref check is unnecessary."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1205,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Leftover from something?"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":1205,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Sigh, yes. Sorry for the noise."},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"MAC_IPCKSUM_EMUL shouldn\u0027t touch the ULP checksums right?"},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Correct, it won\u0027t touch the ULP checksum but it WILL set the ULP checksum flag to _OK."},{"file":"usr/src/uts/common/sys/mac.h","line":637,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. Thanks for clarifying that. I don\u0027t think I had quite realized it, but I think I can see why."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":1899,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"features could probably be a const and assigned at the top of the function"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":1899,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2048,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"features could probably be a const and assigned at the top of the function"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2048,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2112,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"omit, unnecessary"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2112,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2117,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"omit, unnecessary."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2117,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2120,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"append comma"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2120,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2315,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Please include a comment about how the allocation/copy in viona_tx ensures that we can read the header data in a contiguous block."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2315,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2343,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Verify that the ipproto queried from above is ipv4, in case the guest tries some funny business (where ipha would be NULL here)"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2343,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2384,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"offload"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2384,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2387,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"sentence fragment"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2387,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2409,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"Pre-initialize \u0027flags\u0027 with DB_CKSUMFLAGS(mp) so it\u0027s not needed for each of these branches?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2409,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2489,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"For systems using the desb logic (nearly all), this buffer could be preallocated as part of viona_desb_t.  I think this section would be clearer if it were rearranged so this allocb() was an \u0027else\u0027 to the desb cookie check below, and the header pull-up was done afterwards.  That way all of the allocation logic is together and so too is the copying logic."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2489,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Good idea."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":156,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1109,"deletions":-247},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":242,"deletions":-58}],"sizeInsertions":1802,"sizeDeletions":-471},{"number":"6","revision":"04a2971b2ed111b27d6e19575d65b19f7bef8722","parents":["a1c95bbb7c9625aab345559b448cd77dad78b4b3"],"ref":"refs/changes/75/4675/6","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1536877223,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2367,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"parens around this aren\u0027t needed since no bitwise operation is occurring as in the preceding checks"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2367,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Done"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2410,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"comma instead of parens?"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2410,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"I\u0027m fine with a parenthetical comment in parens."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2537,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"relying on this as the sole place for initialization makes this logic unnecessarily subtle"},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2537,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"TOCTOU moved to separate wad."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2598,"reviewer":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"},"message":"If vr_desb is NULL, this will not do adequate framing if the guest hasn\u0027t place the entire L2/L3 header in one descriptor."},{"file":"usr/src/uts/i86pc/io/viona/viona.c","line":2598,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Good catch. TOCTOU moved to separate wad."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1112,"deletions":-247},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":283,"deletions":-60}],"sizeInsertions":1839,"sizeDeletions":-473},{"number":"7","revision":"9304ddf3b700b0fe2f6a4491902ddb2c4003160f","parents":["a1c95bbb7c9625aab345559b448cd77dad78b4b3"],"ref":"refs/changes/75/4675/7","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1537220766,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"-1","grantedOn":1537220928,"by":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":10,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1110,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":283,"deletions":-60}],"sizeInsertions":1837,"sizeDeletions":-472},{"number":"8","revision":"6e965f095af82dd97c746e5670ab4c1620145bea","parents":["198b273b500c16488856bc36cabe112849dd6d3b"],"ref":"refs/changes/75/4675/8","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1537565058,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1538008203,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539213704,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539099632,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/uts/common/io/mac/mac_util.c","line":411,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Not that we should change it at this point, but the difference the S makes (as MAC_HWCKSUM_EMUL vs. MAC_HWCKSUM_EMULS) is a bit subtle and easy to miss."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":12,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1111,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1735,"sizeDeletions":-452},{"number":"9","revision":"0ff3ba9049f17fc5142be1df267ea5bbba9ce123","parents":["198b273b500c16488856bc36cabe112849dd6d3b"],"ref":"refs/changes/75/4675/9","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1539351973,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539361816,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539357156,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539357416,"by":{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"}}],"comments":[{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1538,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"At this point, I\u0027m not sure that this name still feels right. I\u0027m not sure we need to change it here, but filing a follow up is more likely. It really seems like we\u0027re cloning all the offload data now and we want to resuse this because we should just do it with one place -- which is the right thing. I guess this was a bit more subtle originally when we had the DB_CKSUMFLAGS mask removal. Anyways, not something that needs to change with this, but I\u0027d ask a follow up be filed."},{"file":"usr/src/uts/common/io/mac/mac_provider.c","line":1538,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, I thought about that too. I agree, though this one is weird because technically all the data is stashed in the \"checksum\" fields and LSO is closely related. But I\u0027m definitely not against a future name change."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":695,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"typo: \u0027since\u0027"},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":715,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"THIS choice is the common one amongst existing code, I believe."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":715,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It is; however, in the case of LSO it\u0027s not very practical due to the fact that TCP always has an extra refcount on its data block which includes the headers IIRC. Another way to deal with this would be to make the new mblk_t copy in mac_add_vlan_tag() include the expected headers in its copy. The TCP fact is why in overlay(7D) when we\u0027re adding the header, we always have to alloc a new block, even when there\u0027s space in the header.\n\nIf we want to solve this for the non-loopback case, we should also look at asking hardware to do the tagging, but that doesn\u0027t solve the loopback case."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":715,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Yea, a follow up focusing on this particular issue would be good."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":716,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I *was* going to suggest a DTrace probe here, but TBH, it\u0027s detectable by fbt methods already (entry probe that measures the omp size as the check below does)."},{"file":"usr/src/uts/common/io/mac/mac_util.c","line":716,"reviewer":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"message":"Correct, an MBLKL on entry would tell you the same (or just look for msgpullup())."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":13,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1154,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1779,"sizeDeletions":-452},{"number":"10","revision":"746027dcb0eead3000af258efb0f4e112328e90b","parents":["198b273b500c16488856bc36cabe112849dd6d3b"],"ref":"refs/changes/75/4675/10","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1539380378,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380478,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380813,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380696,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":13,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1154,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1779,"sizeDeletions":-452},{"number":"11","revision":"986562d4100d569ed300dc140edba41858c847db","parents":["c6d34d2b1dfd2a8be003867d868e26d325f8584f"],"ref":"refs/changes/75/4675/11","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1539874565,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"TRIVIAL_REBASE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380478,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380813,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380696,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1539881602,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":13,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1154,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1779,"sizeDeletions":-452},{"number":"12","revision":"104c53876a87e773ef729efa9419a70fe24933cb","parents":["c6d34d2b1dfd2a8be003867d868e26d325f8584f"],"ref":"refs/changes/75/4675/12","uploader":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"createdOn":1539925290,"author":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380478,"by":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380813,"by":{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}},{"type":"SUBM","value":"1","grantedOn":1539925305,"by":{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1539380696,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1539881602,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":15,"deletions":0},{"file":"usr/src/uts/common/inet/ip/ip_input.c","type":"MODIFIED","insertions":10,"deletions":-6},{"file":"usr/src/uts/common/inet/ip_impl.h","type":"MODIFIED","insertions":21,"deletions":-2},{"file":"usr/src/uts/common/io/bridge.c","type":"MODIFIED","insertions":149,"deletions":-43},{"file":"usr/src/uts/common/io/dls/dls_link.c","type":"MODIFIED","insertions":47,"deletions":0},{"file":"usr/src/uts/common/io/mac/mac.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_bcast.c","type":"MODIFIED","insertions":2,"deletions":-8},{"file":"usr/src/uts/common/io/mac/mac_client.c","type":"MODIFIED","insertions":54,"deletions":-23},{"file":"usr/src/uts/common/io/mac/mac_datapath_setup.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_flow.c","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_provider.c","type":"MODIFIED","insertions":13,"deletions":-6},{"file":"usr/src/uts/common/io/mac/mac_sched.c","type":"MODIFIED","insertions":46,"deletions":-59},{"file":"usr/src/uts/common/io/mac/mac_soft_ring.c","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/uts/common/io/mac/mac_util.c","type":"MODIFIED","insertions":1154,"deletions":-246},{"file":"usr/src/uts/common/io/simnet/simnet.c","type":"MODIFIED","insertions":2,"deletions":-6},{"file":"usr/src/uts/common/io/vnic/vnic_dev.c","type":"MODIFIED","insertions":23,"deletions":0},{"file":"usr/src/uts/common/sys/mac.h","type":"MODIFIED","insertions":31,"deletions":-1},{"file":"usr/src/uts/common/sys/mac_client.h","type":"MODIFIED","insertions":2,"deletions":0},{"file":"usr/src/uts/common/sys/mac_client_impl.h","type":"MODIFIED","insertions":1,"deletions":-2},{"file":"usr/src/uts/common/sys/mac_impl.h","type":"MODIFIED","insertions":14,"deletions":-3},{"file":"usr/src/uts/common/sys/pattr.h","type":"MODIFIED","insertions":20,"deletions":0},{"file":"usr/src/uts/common/sys/vnic_impl.h","type":"MODIFIED","insertions":2,"deletions":-1},{"file":"usr/src/uts/common/xen/io/xnb.c","type":"MODIFIED","insertions":3,"deletions":-2},{"file":"usr/src/uts/i86pc/io/viona/viona.c","type":"MODIFIED","insertions":180,"deletions":-40}],"sizeInsertions":1779,"sizeDeletions":-452}],"allReviewers":[{"name":"Jorge Schrauwen","email":"sjorge@blackdot.be","username":"sjorge"},{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},{"name":"Hans Rosenfeld","email":"hans.rosenfeld@joyent.com","username":"hrosenfeld"},{"name":"Ryan Zezeski","email":"rpz@joyent.com","username":"rzezeski"},{"name":"Patrick Mooney","email":"pmooney@pfmooney.com","username":"pfmooney"}]}