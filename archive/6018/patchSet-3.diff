commit b8b3e8212f97790bfe4b369fcf48d73f85b5ee9a
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-03-27T18:00:07+01:00 (6 months ago)
    
    TRITON-1349 Subcommand `sdcadm post-setup kbmapi` using AddServiceProcedure

diff --git a/CHANGES.md b/CHANGES.md
index 26e44b5..e9fff40 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.25.3
+
+- TRITON-1349 Subcommand `sdcadm post-setup kbmapi` using AddServiceProcedure
+
 ## 1.25.2
 
 - TRITON-1298 Added `sdcadm post-setup logarchiver`, including new
diff --git a/etc/defaults.json b/etc/defaults.json
index 896eeea..94115e5 100644
--- a/etc/defaults.json
+++ b/etc/defaults.json
@@ -45,7 +45,8 @@
         "config-agent": "config-agent",
         "dockerlogger": "dockerlogger",
         "volapi": "volapi",
-        "logarchiver": "logarchiver"
+        "logarchiver": "logarchiver",
+        "kbmapi": "kbmapi"
     },
     "svcMinImages": {
         "binder": "20140731T211135Z",
diff --git a/lib/post-setup/index.js b/lib/post-setup/index.js
index 3c6379e..0c7d3cc 100644
--- a/lib/post-setup/index.js
+++ b/lib/post-setup/index.js
@@ -77,6 +77,7 @@ PostSetupCLI.prototype.do_cmon = require('./cmon').do_cmon;
 PostSetupCLI.prototype.do_cns = require('./cns').do_cns;
 PostSetupCLI.prototype.do_volapi = require('./volapi').do_volapi;
 PostSetupCLI.prototype.do_logarchiver = require('./logarchiver').do_logarchiver;
+PostSetupCLI.prototype.do_kbmapi = require('./kbmapi').do_kbmapi;
 
 // --- exports
 
diff --git a/lib/post-setup/kbmapi.js b/lib/post-setup/kbmapi.js
new file mode 100644
index 0000000..c4ebc8b
--- /dev/null
+++ b/lib/post-setup/kbmapi.js
@@ -0,0 +1,119 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+/*
+ * The 'sdcadm post-setup kbmapi' CLI subcommand.
+ */
+
+var errors = require('../errors');
+var AddServiceProc = require('../procedures/add-service').AddServiceProcedure;
+var runProcs = require('../procedures').runProcs;
+
+function do_kbmapi(subcmd, opts, args, cb) {
+    var self = this;
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    } else if (args.length > 0) {
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
+    }
+
+
+
+    const svcName = 'kbmapi';
+    const procOpts = {
+        svcName: svcName,
+        packageName: 'sdc_1024',
+        delegatedDataset: false,
+        networks: [
+            {name: 'admin'}
+        ],
+        firewallEnabled: false,
+        dependencies: ['cns']
+    };
+    if (opts.image) {
+        procOpts.image = opts.image;
+    }
+
+    if (opts.channel) {
+        procOpts.channel = opts.channel;
+    }
+
+    const proc = new AddServiceProc(procOpts);
+
+    runProcs({
+        log: self.log,
+        procs: [proc],
+        sdcadm: self.sdcadm,
+        ui: self.ui,
+        dryRun: opts.dry_run,
+        skipConfirm: opts.yes
+    }, cb);
+}
+
+do_kbmapi.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['yes', 'y'],
+        type: 'bool',
+        help: 'Answer yes to all confirmations.'
+    },
+    {
+        names: ['dry-run', 'n'],
+        type: 'bool',
+        help: 'Do a dry-run.'
+    },
+    {
+        group: 'Image selection (by default latest image on default ' +
+            'channel)'
+    },
+    {
+        names: ['image', 'i'],
+        type: 'string',
+        help: 'Specifies which image to use for the first instance. ' +
+            'Use "latest" (the default) for the latest available on ' +
+            'updates.joyent.com, "current" for the latest image already ' +
+            'in the datacenter (if any), or an image UUID or version.'
+    },
+    {
+        names: ['channel', 'C'],
+        type: 'string',
+        help: 'The updates.joyent.com channel from which to fetch the ' +
+            'image. See `sdcadm channel get` for the default channel.'
+    }
+
+];
+
+do_kbmapi.help = [
+    'Setup the Key Backup and Management API (KBMAPI) service',
+    'and create the first instance.',
+    '',
+    'Usage:',
+    '     {{name}} kbmapi',
+    '',
+    '{{options}}',
+    'The "kbmapi" service manages the pivtokens on Triton compute nodes' +
+    ' containing encrypted zpools.'
+].join('\n');
+
+do_kbmapi.logToFile = true;
+
+// --- exports
+
+module.exports = {
+    do_kbmapi: do_kbmapi
+};
+
+// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/procedures/add-service.js b/lib/procedures/add-service.js
index c09486a..e238b56 100644
--- a/lib/procedures/add-service.js
+++ b/lib/procedures/add-service.js
@@ -38,6 +38,7 @@ function AddServiceProcedure(options) {
     assert.optionalBool(options.delegatedDataset, 'options.delegatedDataset');
     assert.optionalArrayOfObject(options.networks, 'options.networks');
     assert.optionalBool(options.firewallEnabled, 'options.firewallEnabled');
+    assert.optionalArrayOfString(options.dependencies, 'options.dependencies');
 
     this.svcData = {
         name: options.svcName,
@@ -66,6 +67,7 @@ function AddServiceProcedure(options) {
     this.svcName = options.svcName;
     this.imageArg = options.image || 'latest';
     this.channelRef = options.channel || 'default';
+    this.dependencies = options.dependencies || [];
 }
 util.inherits(AddServiceProcedure, Procedure);
 
@@ -98,6 +100,62 @@ AddServiceProcedure.prototype.prepare = function addServicePrepare(opts, cb) {
         arg: {},
         funcs: [
             sdcadm.ensureSdcApp.bind(sdcadm),
+            function checkDependencies(_, next) {
+                if (self.dependencies.length === 0) {
+                    next();
+                    return;
+                }
+                let missingSvcs = [];
+                vasync.forEachParallel({
+                    inputs: self.dependencies,
+                    func: function checkSvcPresent(svc, nextSvc) {
+                        sdcadm.sapi.listServices({
+                            name: svc,
+                            application_uuid: sdcadm.sdcApp.uuid
+                        }, function (svcErr, svcs) {
+                            if (svcErr) {
+                                nextSvc(svcErr);
+                                return;
+                            }
+                            if (!svcs.length) {
+                                missingSvcs.push(svc);
+                            }
+                            nextSvc();
+                        });
+                    }
+                }, function paraCb(paraErr) {
+                    if (paraErr) {
+                        next(paraErr);
+                        return;
+                    }
+
+                    if (missingSvcs.length) {
+                        let message;
+                        if (missingSvcs.length === 1) {
+                            message = [
+                                util.format('The "%s" service is required',
+                                    missingSvcs[0]),
+                                util.format('Please, install it with ' +
+                                    '`sdcadm post-setup %s`.',
+                                    missingSvcs[0])
+                            ];
+                        } else {
+                            message = [
+                                util.format('The "%s" services are required',
+                                    missingSvcs.join('", "')),
+                                'Please, install them with:'
+                            ];
+                            missingSvcs.forEach(function addMissingSvc(svc) {
+                                message.push(util.format(
+                                    '`sdcadm post-setup %s`', svc));
+                            });
+                        }
+                        next(new errors.UpdateError(message.join('\n')));
+                        return;
+                    }
+                    next();
+                });
+            },
             function getChannel(_, next) {
                 if (self.channelRef === 'default') {
                     sdcadm.getDefaultChannel(function (err, channel) {
@@ -467,7 +525,6 @@ AddServiceProcedure.prototype.execute = function addServiceExecute(opts, cb) {
 
                 ui.info('Importing image %s (%s@%s)', self.svcImg.uuid,
                     self.svcImg.name, self.svcImg.version);
-
                 var proc = new DownloadImages({
                     images: [self.svcImg],
                     channel: self.channel
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index da2b163..b8fdaa3 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -203,8 +203,8 @@ function coordinatePlan(opts, cb) {
         function updateSimpleServices(_, next) {
             var simpleServices = [
                 'amon', 'amonredis', 'assets', 'cnapi', 'cns', 'dhcpd',
-                'docker', 'fwapi', 'logarchiver', 'manta', 'napi', 'rabbitmq',
-                'redis', 'sdc', 'ufds', 'vmapi', 'volapi'
+                'docker', 'fwapi', 'kbmapi', 'logarchiver', 'manta', 'napi',
+                'rabbitmq', 'redis', 'sdc', 'ufds', 'vmapi', 'volapi'
             ].concat(HA_READY_SIMPLE_SVCS);
             var handle = [];
             var remaining = [];
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index e999938..5f2ab19 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -1052,11 +1052,14 @@ SdcAdm.prototype.getServices = function getServices(opts, cb) {
  *
  * @param opts {Object} Required.
  *      - uuid {UUID} Required. The image uuid.
+ *      - channel {String} Optional. A channel other than the default channel
+ *        to use when querying the updates server.
  * @param cb {Function} `function (err, img)`
  */
 SdcAdm.prototype.getImage = function getImage(opts, cb) {
     assert.object(opts, 'opts');
     assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalString(opts.channel, 'opts.channel');
     assert.func(cb, 'cb');
     var self = this;
 
@@ -1070,7 +1073,9 @@ SdcAdm.prototype.getImage = function getImage(opts, cb) {
             self.imgapi.getImage(opts.uuid, function (iErr, iImg) {
                 if (iErr && iErr.body &&
                     iErr.body.code === 'ResourceNotFound') {
-                    self.updates.getImage(opts.uuid, function (err, image) {
+                    self.updates.getImage(opts.uuid, {
+                        channel: opts.channel
+                    }, function (err, image) {
                         if (err) {
                             next(err);
                             return;
diff --git a/package.json b/package.json
index 86646a6..89206ca 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.25.2",
+  "version": "1.25.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
