commit 52593210ae3986dec9f0eafc7bb7d97433a64889
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2019-06-28T22:00:57+00:00 (3 months ago)
    
    joyent/node-ip6addr#6 More parseInt()/Number() tomfooolery

diff --git a/ip6addr.js b/ip6addr.js
index 33c8f06..a99b572 100644
--- a/ip6addr.js
+++ b/ip6addr.js
@@ -9,6 +9,7 @@
  */
 
 var assert = require('assert-plus');
+var jsprim = require('jsprim');
 var util = require('util');
 
 
@@ -613,16 +614,16 @@ function parseString(input) {
   var field, num;
   for (i = 0; i < ip6Fields.length; i++) {
     field = ip6Fields[i];
-    num = Number('0x' + field);
-    if (isNaN(num) || num < 0 || num > 65535) {
+    num = jsprim.parseInteger(field, { base: 16, allowSign: false });
+    if (num instanceof Error || num < 0 || num > 65535) {
       throw new ParseError(input, 'Invalid field value: ' + field);
     }
     ip6Fields[i] = num;
   }
   for (i = 0; i < ip4Fields.length; i++) {
     field = ip4Fields[i];
-    num = Number(field);
-    if (parseInt(field, 10) !== num || num < 0 || num > 255) {
+    num = jsprim.parseInteger(field, { base: 10, allowSign: false });
+    if (num instanceof Error || num < 0 || num > 255) {
       throw new ParseError(input, 'Invalid field value: ' + field);
     }
     ip4Fields[i] = num;
diff --git a/package.json b/package.json
index f0e8215..3c69bc4 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "ip6addr",
-  "version": "0.2.2",
+  "version": "0.2.3",
   "description": "IPv6/IPv4 address parsing and manipulation",
   "keywords": [ "ip", "ipv4", "ipv6", "cidr", "subnet" ],
   "repository": {
@@ -9,7 +9,8 @@
   },
   "main": "ip6addr.js",
   "dependencies": {
-    "assert-plus": "^1.0.0"
+    "assert-plus": "^1.0.0",
+    "jsprim": "^1.4.0"
   },
   "devDependencies": {
     "istanbul": "^0.3.6",
diff --git a/test/parse.test.js b/test/parse.test.js
index 9c51f62..4e40f3a 100644
--- a/test/parse.test.js
+++ b/test/parse.test.js
@@ -53,9 +53,13 @@ test('parse bad', function (t) {
   t.throws(pb({}), null, 'string required');
   t.throws(pb('fd00::40e/64'), null, 'Invalid field value: 40e/64');
   t.throws(pb('fd00::0xc'), null, 'Invalid field value: 0xc');
+  t.throws(pb('fd00::0x0'), null, 'Invalid field value: 0x0');
+  t.throws(pb('fd00::-0'), null, 'Invalid field value: -0');
   t.throws(pb('1.2.3.4/24'), null, 'Invalid field value: 4/24');
   t.throws(pb('1.2.3.4q'), null, 'Invalid field value: 4q');
   t.throws(pb('1.2.3.0xb'), null, 'Invalid field value: 0xb');
+  t.throws(pb('1.2.3.0x0'), null, 'Invalid field value: 0x0');
+  t.throws(pb('1.2.3.-0'), null, 'Invalid field value: -0');
   t.throws(pb('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'), null,
     'input too long');
   t.throws(pb('ff::ff::ff'), null,
