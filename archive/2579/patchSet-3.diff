From ccfc8c042998c32b5e857a1663465f06a8440abd Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 13 Sep 2017 23:31:05 +1200
Subject: [PATCH] PUBAPI-1434: Add plugin that allows an account to only use
 networks it owns Reviewed by: Pedro P. Candel <pedro@joyent.com> Reviewed by:
 Angela Fong <angela.fong@joyent.com>

---
 lib/app.js                                 |  33 +-
 lib/networks.js                            |  57 +--
 plugins/filter_owner_networks.js           | 277 ++++++++++++++
 test/plugins/filter_owner_networks.test.js | 424 +++++++++++++++++++++
 test/runtests                              |   2 +-
 5 files changed, 757 insertions(+), 36 deletions(-)
 create mode 100644 plugins/filter_owner_networks.js
 create mode 100644 test/plugins/filter_owner_networks.test.js

diff --git a/lib/app.js b/lib/app.js
index 3d260af..49d1b3f 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -266,13 +266,14 @@ function createClients(options, callback) {
 
 
 /**
- * Load enabled pre|post provision plugins
+ * Load enabled preprovision|postprovision|preaddnic|prelistnetworks plugins
  *
  * @param {Array} where each member is an {Object} representing a plugin config
  * @param {Array} ufdsPlugins is the same but coming from UFDS instead of
  *      the config file.
- * @returns {Object} with first member being preProvision methods to call, and
- *          second member postProvision
+ * @returns {Object} with first member being preProvision methods to call,
+ *          second member postProvision, third preAddNic, and fourth
+ *          preListNetworks
  */
 
 function loadPlugins(plugins, ufdsPlugins, log) {
@@ -280,6 +281,8 @@ function loadPlugins(plugins, ufdsPlugins, log) {
     // Load enabled pre|post provision plugins:
     var preProvision = [];
     var postProvision = [];
+    var preAddNic = [];
+    var preListNetworks = [];
 
     // Plugins can be defined into Config file (plugins), UFDS (ufdsPlugins)
     // or both. UFDS will take precedence over the config file. Therefore, we
@@ -317,10 +320,23 @@ function loadPlugins(plugins, ufdsPlugins, log) {
             if (plugin.postProvision) {
                 postProvision.push(plugin.postProvision(cfg));
             }
+
+            if (plugin.preAddNic) {
+                preAddNic.push(plugin.preAddNic(cfg));
+            }
+
+            if (plugin.preListNetworks) {
+                preListNetworks.push(plugin.preListNetworks(cfg));
+            }
         }
     });
 
-    return [preProvision, postProvision];
+    return {
+        preProvision: preProvision,
+        postProvision: postProvision,
+        preAddNic: preAddNic,
+        preListNetworks: preListNetworks
+    };
 }
 
 
@@ -606,7 +622,8 @@ module.exports = {
                 datasets.mount(server,
                         userThrottle(config, 'datasets'), config);
                 packages.mount(server, userThrottle(config, 'packages'));
-                networks.mount(server, userThrottle(config, 'networks'));
+                networks.mount(server, userThrottle(config, 'networks'),
+                        plugins.preListNetworks);
 
                 // Wait for datasets and packages to mount everything else:
                 account.mount(server, userThrottle(config, 'account'));
@@ -617,7 +634,8 @@ module.exports = {
                 machineThrottle = userThrottle(config, 'machines');
                 // Make sure we pass the pre|post provision hooks
                 // from the plugins
-                machines.mount(server, machineThrottle, plugins[0], plugins[1]);
+                machines.mount(server, machineThrottle, plugins.preProvision,
+                        plugins.postProvision);
                 metadata.mount(server, machineThrottle);
                 snapshots.mount(server, machineThrottle);
                 tags.mount(server, machineThrottle);
@@ -629,7 +647,8 @@ module.exports = {
                 policies.mount(server, userThrottle(config, 'policies'),
                         config);
                 roles.mount(server, userThrottle(config, 'roles'), config);
-                nics.mount(server, userThrottle(config, 'nics'));
+                nics.mount(server, userThrottle(config, 'nics'),
+                        plugins.preAddNic);
                 mod_config.mount(server, userThrottle(config, 'config'));
                 resources.mount(server, userThrottle(config, 'resources'),
                         config);
diff --git a/lib/networks.js b/lib/networks.js
index 14a990e..c59d9b7 100644
--- a/lib/networks.js
+++ b/lib/networks.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -175,12 +175,13 @@ function preLoadNetworks(req, res, next) {
         };
     }
 
-    // Skip network loading and filtering if we're neither on networks
-    // end-points, creating a machine or updating the user's config
-    // (which requires checking network existence)
-    if (!/\/networks/.test(pathname) && !((/\/machines$/.test(pathname) &&
-        method === 'POST')) && !(/\/config/.test(pathname) &&
-        method === 'PUT')) {
+    // Skip network loading and filtering except for a few cases:
+        // network endpoints
+    if (!/\/networks/.test(pathname) &&
+        // machine creation or nic addition (some AddNic plugins use this)
+        !(method === 'POST' && /\/(?:machines|nics)$/.test(pathname)) &&
+        // updating user config (requires checking network existence)
+        !(method === 'PUT' && /\/config/.test(pathname))) {
         return next();
     }
 
@@ -576,11 +577,11 @@ function deleteFabricNetwork(req, res, next) {
 }
 
 
-function mountNetworks(server, before) {
-    assert.object(server);
+function mountNetworks(server, before, pre) {
+    assert.object(server, 'server');
+    assert.ok(before, 'before');
 
-    var beforeArr = Array.isArray(before) ? before : [before];
-    var fabricsRequired = beforeArr.concat(ensureFabricsEnabled);
+    pre = pre || [];
 
     // --- Fabric VLANs
 
@@ -588,43 +589,43 @@ function mountNetworks(server, before) {
         path: '/:account/fabrics/default/vlans',
         name: 'ListFabricVLANs',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, listFabricVLANs);
+    }, before, ensureFabricsEnabled, pre, listFabricVLANs);
 
     server.head({
         path: '/:account/fabrics/default/vlans',
         name: 'HeadFabricVLANs',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, listFabricVLANs);
+    }, before, ensureFabricsEnabled, pre, listFabricVLANs);
 
     server.post({
         path: '/:account/fabrics/default/vlans',
         name: 'CreateFabricVLAN',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, createFabricVLAN);
+    }, before, ensureFabricsEnabled, pre, createFabricVLAN);
 
     server.put({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'UpdateFabricVLAN',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, updateFabricVLAN);
+    }, before, ensureFabricsEnabled, pre, updateFabricVLAN);
 
     server.get({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'GetFabricVLAN',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, getFabricVLAN);
+    }, before, ensureFabricsEnabled, pre, getFabricVLAN);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'GetFabricVLAN',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, getFabricVLAN);
+    }, before, ensureFabricsEnabled, pre, getFabricVLAN);
 
     server.del({
         path: '/:account/fabrics/default/vlans/:vlan_id',
         name: 'DeleteFabricVLAN',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, deleteFabricVLAN);
+    }, before, ensureFabricsEnabled, pre, deleteFabricVLAN);
 
     // --- Fabric Networks
 
@@ -632,59 +633,59 @@ function mountNetworks(server, before) {
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'ListFabricNetworks',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, listFabricNetworks);
+    }, before, ensureFabricsEnabled, pre, listFabricNetworks);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'HeadFabricNetworks',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, listFabricNetworks);
+    }, before, ensureFabricsEnabled, pre, listFabricNetworks);
 
     server.post({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks',
         name: 'CreateFabricNetwork',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, createFabricNetwork);
+    }, before, ensureFabricsEnabled, pre, createFabricNetwork);
 
     server.get({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'GetFabricNetwork',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, getFabricNetwork);
+    }, before, ensureFabricsEnabled, pre, getFabricNetwork);
 
     server.head({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'GetFabricNetwork',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, getFabricNetwork);
+    }, before, ensureFabricsEnabled, pre, getFabricNetwork);
 
     server.del({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'DeleteFabricNetwork',
         version: [ '7.3.0', '8.0.0' ]
-    }, fabricsRequired, deleteFabricNetwork);
+    }, before, ensureFabricsEnabled, pre, deleteFabricNetwork);
 
     // --- Networks (non-fabric)
 
     server.get({
         path: '/:account/networks',
         name: 'ListNetworks'
-    }, before || listNetworks, before ? listNetworks : undefined);
+    }, before, pre, listNetworks);
 
     server.head({
         path: '/:account/networks',
         name: 'HeadNetworks'
-    }, before || listNetworks, before ? listNetworks : undefined);
+    }, before, pre, listNetworks);
 
     server.get({
         path: '/:account/networks/:network',
         name: 'GetNetwork'
-    }, before || getNetwork, before ? getNetwork : undefined);
+    }, before, pre, getNetwork);
 
     server.head({
         path: '/:account/networks/:network',
         name: 'HeadNetwork'
-    }, before || getNetwork, before ? getNetwork : undefined);
+    }, before, pre, getNetwork);
 
     return server;
 }
diff --git a/plugins/filter_owner_networks.js b/plugins/filter_owner_networks.js
new file mode 100644
index 0000000..4a949d1
--- /dev/null
+++ b/plugins/filter_owner_networks.js
@@ -0,0 +1,277 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Forces specific accounts to only use networks or network pools which belong
+ * to that account. Specifically, it prevents creating VMs with anything other
+ * than networks or pools belonging to that account, or adding NICs which can
+ * access same. It also applies the same rules to the listing of networks (i.e.
+ * GET /:account/networks) to reduce surprises to cloudapi clients.
+ *
+ * Each network or pool has an optional array of UUIDs associated with users.
+ * When adding a NIC to a VM, we check that the UUID of the current account
+ * matches any of the UUIDs in the requested network or pool's owner_uuids
+ * array. If not, it is rejected.
+ *
+ * Provisioning of a VM is similar in principle, with the complication of
+ * package networks and default_networks. If a params.networks is provided, we
+ * check that every one of those network or poolss contains the current
+ * account's UUID in their owner_uuids array. If params.networks isn't provided,
+ * we check whether all networks or pools listed by the package are owned by the
+ * account. If the package * doesn't have any network or pools listed, then we
+ * lastly move on to params.default_networks and fill in params.networks
+ * ourselves, to disable cloudapi doing its own default filtering (which has
+ * looser filtering, by allowing DC-shared non-owned network and pools to also
+ * be used). For default_networks, we again only allow the use of external and
+ * internal networks/pools that belong to the owner.
+ *
+ * Note that non-owner_uuid networks which are members of a pool which includes
+ * the account UUID in the pool's owner_uuids will be included. This code
+ * assumes that if an account is included in a pool's owner_uuids, that all
+ * network members of that pool are eligible for use.
+ *
+ * One significant pitfall to be aware of is that this plugin partially
+ * replicated some of cloudapi's behaviours, plus it depends on certain others.
+ * Any major changes to these behaviours by cloudapi might either break this
+ * plugin, or cause the plugin to hide newer changes to cloudapi.
+ */
+
+
+var assert = require('assert-plus');
+var restify = require('restify');
+
+var InvalidArgumentError = restify.InvalidArgumentError;
+
+// same as in lib/networks.js and lib/machines.js
+var EXTERNAL_NIC_TAG = 'external';
+var INTERNAL_NIC_TAG = 'internal';
+var DEFAULT_NETWORKS = [EXTERNAL_NIC_TAG, INTERNAL_NIC_TAG];
+
+
+/*
+ * Return all networks which include ownerUuid inside their owner_uuids
+ * attribute.
+ */
+function getOwnedNetworks(networks, ownerUuid) {
+    assert.arrayOfObject(networks, 'networks');
+    assert.uuid(ownerUuid, 'ownerUuid');
+
+    return networks.filter(function filterOwner(network) {
+        var owners = network.owner_uuids;
+        return owners && owners.indexOf(ownerUuid) !== -1;
+    });
+}
+
+
+/*
+ * Returns either external (has public IPs) or internal (has private or DC-only
+ * IPs) networks, depending on netType arg. NB: internal networks are defined
+ * here to include fabrics.
+ */
+function filterNetworkType(networks, netType) {
+    assert.arrayOfObject(networks, 'networks');
+    assert.string(netType, 'netType');
+
+    if (netType === EXTERNAL_NIC_TAG) {
+        return networks.filter(function externalFilter(network) {
+            return !network.fabric && network.nic_tag === EXTERNAL_NIC_TAG;
+        });
+    } else {
+        return networks.filter(function internalFilter(network) {
+            return network.fabric || network.nic_tag !== EXTERNAL_NIC_TAG;
+        });
+    }
+}
+
+
+/*
+ * Take an array of network objects and return an array of their UUIDs.
+ */
+function getNetworkUuids(networks) {
+    assert.arrayOfObject(networks, 'networks');
+
+    return networks.map(function mapUuids(network) {
+        return network.uuid;
+    });
+}
+
+
+/*
+ * Return boolean of whether arr1 is a subset of arr2. Only works
+ * with arrays of primitive types.
+ */
+function isSubset(arr1, arr2) {
+    for (var i = 0; i < arr1.length; i++) {
+        var ele = arr1[i];
+
+        if (arr2.indexOf(ele) === -1) {
+            return false;
+        }
+    }
+
+    return true;
+}
+
+
+/*
+ * The prelude is run at the beginning of all pre/post functions in this file.
+ * It checks that required arguments are present, and whether the pre/post
+ * function should be terminated early -- returned as a boolean.
+ */
+function prelude(req, res, cfg, funcName, next) {
+    assert.object(req, 'req');
+    assert.object(res, 'res');
+    assert.object(cfg, 'cfg');
+    assert.string(funcName, 'funcName');
+    assert.func(next, 'next');
+
+    req.log.debug('Running ' + funcName);
+
+    if (cfg.accounts.indexOf(req.account.uuid) === -1) {
+        return false;
+    }
+
+    var path = req.path();
+    var method = req.method;
+
+    return ((method ===  'GET' && /^\/[^\/]+\/networks$/.test(path)) ||
+            (method === 'POST' && /\/(?:machines|nics)$/.test(path)));
+}
+
+
+/*
+ * Hook for preprovisioning. Ensure that all networks given in params or
+ * packages the request's account in their owner_uuids attribute. If
+ * neither are provided, then filter the default external/internal networks
+ * for networks which fulfill the owner_uuids requirement.
+ */
+function preProvision(cfg) {
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    return function filterOwnerProvision(req, res, next) {
+        if (!prelude(req, res, cfg, filterOwnerProvision.name, next)) {
+            return next();
+        }
+
+        var log = req.log;
+        var params = req.params;
+        var ownedNetworks = getOwnedNetworks(req.networks, req.account.uuid);
+        var ownedNetworkUuids = getNetworkUuids(ownedNetworks);
+        var reqNetworkUuids = params.networks;
+        var pkgNetworkUuids = req.pkg && req.pkg.networks;
+
+        if (reqNetworkUuids) {
+            log.debug('Comparing requested networks with owned networks');
+
+            if (!isSubset(reqNetworkUuids, ownedNetworkUuids)) {
+                return next(new InvalidArgumentError('Account does not have ' +
+                    'access to some or all of the requested networks.'));
+            }
+        } else if (pkgNetworkUuids) {
+            log.debug('Comparing package networks with owned networks');
+
+            if (!isSubset(pkgNetworkUuids, ownedNetworkUuids)) {
+                return next(new InvalidArgumentError('Account does not have ' +
+                    'access to some or all of the package networks.'));
+            }
+        } else {
+            log.debug('Allowing only owned networks in internal/external.');
+
+            var defaultNetTypes = params.default_networks || DEFAULT_NETWORKS;
+            if (!Array.isArray(defaultNetTypes)) {
+                return next(new InvalidArgumentError('default_networks is ' +
+                    'not an array'));
+            }
+
+            var filteredNetworks = [];
+            defaultNetTypes.forEach(function (type) {
+                var nets = filterNetworkType(ownedNetworks, type);
+                if (nets.length > 0) {
+                    filteredNetworks.push(nets[0]);
+                }
+            });
+
+            if (filteredNetworks.length === 0) {
+                return next(new InvalidArgumentError('Account does not have ' +
+                    'ownership of any default networks'));
+            }
+
+            log.info('Plugin rewrite of req.params.networks using',
+                defaultNetTypes);
+            params.networks = getNetworkUuids(filteredNetworks);
+        }
+
+        return next();
+    };
+}
+
+
+/*
+ * Hook run before adding a nic to a VM. Ensure that network given in network
+ * param contains the request's account in its owner_uuids attribute.
+ */
+function preAddNic(cfg) {
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    return function filterOwnerAddNic(req, res, next) {
+        if (!prelude(req, res, cfg, filterOwnerAddNic.name, next)) {
+            return next();
+        }
+
+        var networkUuid = req.params.network;
+        if (!networkUuid) {
+            return next();
+        }
+
+        req.log.debug('Comparing requested network with owned networks');
+
+        var ownedNetworks = getOwnedNetworks(req.networks, req.account.uuid);
+        var ownedNetworkUuids = getNetworkUuids(ownedNetworks);
+
+        if (ownedNetworkUuids.indexOf(networkUuid) === -1) {
+            return next(new InvalidArgumentError(
+                'Account does not have access to the specified network.'));
+        }
+
+        return next();
+    };
+}
+
+
+
+/*
+ * This hook runs before the listing of non-fabric networks, and filters
+ * req.networks (set earlier by cloudapi) so that it only contains networks
+ * or network pools which have the account UUID in their owner_uuids.
+ */
+function preListNetworks(cfg) {
+    assert.object(cfg, 'cfg');
+    assert.arrayOfUuid(cfg.accounts, 'cfg.accounts');
+
+    return function filterOwnerListNetworks(req, res, next) {
+        if (!prelude(req, res, cfg, filterOwnerListNetworks.name, next)) {
+            return next();
+        }
+
+        req.log.info('Plugin rewrite of req.networks');
+        req.networks = getOwnedNetworks(req.networks, req.account.uuid);
+
+        return next();
+    };
+}
+
+
+module.exports = {
+    preProvision: preProvision,
+    preAddNic: preAddNic,
+    preListNetworks: preListNetworks
+};
diff --git a/test/plugins/filter_owner_networks.test.js b/test/plugins/filter_owner_networks.test.js
new file mode 100644
index 0000000..ecac9de
--- /dev/null
+++ b/test/plugins/filter_owner_networks.test.js
@@ -0,0 +1,424 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var test = require('tape').test;
+var format = require('util').format;
+var plugin = require('../../plugins/filter_owner_networks');
+
+
+// --- Globals
+
+var ACCOUNT = { uuid: '572c169e-a287-11e7-b95d-28cfe91f7d53' };
+var OTHER_ACCOUNT = { uuid: '5cc54706-a287-11e7-b33c-28cfe91f7d53' };
+
+var NETWORKS = [ {
+    uuid: '22a0b5fa-a292-11e7-8911-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'internal'
+}, {
+    uuid: '2790d1e4-a292-11e7-8d23-28cfe91f7d53',
+    owner_uuids: ['9ea6158e-a29a-11e7-a2c5-28cfe91f7d53'],
+    nic_tag: 'internal'
+}, {
+    uuid: '9336f8d0-a29a-11e7-a744-28cfe91f7d53',
+    nic_tag: 'interal'
+}, {
+    uuid: '4f854694-a35f-11e7-9574-28cfe91f7d53',
+    nic_tag: 'internal'
+}, {
+    uuid: '3acc8d3e-a35f-11e7-8f64-28cfe91f7d53',
+    owner_uuids: [ACCOUNT.uuid],
+    nic_tag: 'external'
+}  ];
+
+var ACCOUNT_NETWORK = NETWORKS[0];
+var OTHER_NETWORK = NETWORKS[1];
+var MACHINE_UUID = '8d91185e-a28e-11e7-8b47-28cfe91f7d53';
+
+var NICS_PATH = '/my/machines/%s/nics';
+var NETWORKS_PATH = '/my/networks';
+var MACHINES_PATH = '/my/machines';
+
+var PRE_PROVISION;
+var PRE_ADD_NIC;
+var PRE_LIST_NETWORKS;
+
+
+// --- Helpers
+
+function clone(o) {
+    return JSON.parse(JSON.stringify(o));
+}
+
+
+function createStubReq(method, path) {
+    return {
+        account: ACCOUNT,
+        params: {},
+        method: method,
+        networks: clone(NETWORKS),
+        path: function () { return path; },
+        log: {
+            info: function () {},
+            debug: function () {}
+        }
+    };
+}
+
+
+// --- Tests
+
+test('Setup preAddNic without cfg',
+function (t) {
+    try {
+        plugin.preAddNic();
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preAddNic with invalid cfg',
+function (t) {
+    try {
+        plugin.preAddNic({ accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preAddNic with valid cfg',
+function (t) {
+    PRE_ADD_NIC = plugin.preAddNic({ accounts: [ACCOUNT.uuid] });
+    t.equal(typeof (PRE_ADD_NIC), 'function', 'func type');
+    t.equal(PRE_ADD_NIC.name, 'filterOwnerAddNic', 'func name');
+    t.end();
+});
+
+
+test('preAddNic with non-owner account',
+function (t) {
+    var req = createStubReq('POST', format(NICS_PATH, MACHINE_UUID));
+    req.params.network = ACCOUNT_NETWORK.uuid;
+    req.account = OTHER_ACCOUNT;
+
+    PRE_ADD_NIC(req, {}, function onPreAddNic(err) {
+        t.ifError(err, 'err');
+        t.end();
+    });
+});
+
+
+test('preAddNic with owner account and non-owner network',
+function (t) {
+    var req = createStubReq('POST', format(NICS_PATH, MACHINE_UUID));
+    req.params.network = OTHER_NETWORK.uuid;
+
+    PRE_ADD_NIC(req, {}, function onPreAddNic(err) {
+        t.ok(err, 'err');
+        t.equal(err.restCode, 'InvalidArgument', 'err rest code');
+        t.equal(err.message,
+            'Account does not have access to the specified network.',
+            'err message');
+        t.end();
+    });
+});
+
+
+test('preAddNic with owner account and owner network',
+function (t) {
+    var req = createStubReq('POST', format(NICS_PATH, MACHINE_UUID));
+    req.params.network = ACCOUNT_NETWORK.uuid;
+
+    PRE_ADD_NIC(req, {}, function onPreAddNic(err) {
+        t.ifError(err, 'err');
+        t.end();
+    });
+});
+
+
+test('preAddNic with different path',
+function (t) {
+    var path = format(NICS_PATH, MACHINE_UUID) + '/1a2b3c4d5e6f';
+    var req = createStubReq('POST', path);
+    req.params.network = ACCOUNT_NETWORK.uuid;
+
+    PRE_ADD_NIC(req, {}, function onPreAddNic() {
+        t.end();
+    });
+});
+
+
+test('Setup preListNetworks without cfg',
+function (t) {
+    try {
+        plugin.preListNetworks();
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preListNetworks with invalid cfg',
+function (t) {
+    try {
+        plugin.preListNetworks({ accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preListNetworks with valid cfg',
+function (t) {
+    PRE_LIST_NETWORKS = plugin.preListNetworks({
+        accounts: [ACCOUNT.uuid]
+    });
+    t.equal(typeof (PRE_LIST_NETWORKS), 'function', 'func type');
+    t.equal(PRE_LIST_NETWORKS.name, 'filterOwnerListNetworks', 'func name');
+    t.end();
+});
+
+
+test('preListNetworks with non-owner account',
+function (t) {
+    var req = createStubReq('GET', NETWORKS_PATH);
+    req.account = OTHER_ACCOUNT;
+
+    PRE_LIST_NETWORKS(req, {}, function onPreListNetworks(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preListNetworks with owner account',
+function (t) {
+    var req = createStubReq('GET', NETWORKS_PATH);
+
+    PRE_LIST_NETWORKS(req, {}, function onPreListNetworks(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.networks, [
+            NETWORKS[0],
+            NETWORKS[4]
+        ], 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preListNetworks with different path',
+function (t) {
+    var path = NETWORKS_PATH + '/' + ACCOUNT_NETWORK.uuid;
+    var req = createStubReq('GET', path);
+    req.params.network = ACCOUNT_NETWORK.uuid;
+
+    PRE_ADD_NIC(req, {}, function onPreListNetworks(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('Setup preProvision without cfg',
+function (t) {
+    try {
+        plugin.preProvision();
+    } catch (e) {
+        t.equal(e.message, 'cfg (object) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preProvision with invalid cfg',
+function (t) {
+    try {
+        plugin.preProvision({ accounts: 'foo' });
+    } catch (e) {
+        t.equal(e.message, 'cfg.accounts ([uuid]) is required', 'err message');
+        t.end();
+    }
+});
+
+
+test('Setup preProvision with valid cfg',
+function (t) {
+    PRE_PROVISION = plugin.preProvision({ accounts: [ACCOUNT.uuid] });
+    t.equal(typeof (PRE_PROVISION), 'function');
+    t.equal(PRE_PROVISION.name, 'filterOwnerProvision');
+    t.end();
+});
+
+
+test('preProvision with non-owner account',
+function (t) {
+    var networks = [ACCOUNT_NETWORK.uuid];
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.networks = networks;
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, networks, 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and non-owner network',
+function (t) {
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.networks = [OTHER_NETWORK.uuid];
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ok(err, 'err');
+        t.equal(err.restCode, 'InvalidArgument', 'err rest code');
+        t.equal(err.message, 'Account does not have access to some or all of ' +
+            'the requested networks.', 'err message');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and owner networks',
+function (t) {
+    var networks = [ACCOUNT_NETWORK.uuid];
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.networks = networks;
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, networks, 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and non-owner package networks',
+function (t) {
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.pkg = {
+        networks: [OTHER_NETWORK.uuid]
+    };
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ok(err, 'err');
+        t.equal(err.restCode, 'InvalidArgument', 'err rest code');
+        t.equal(err.message, 'Account does not have access to some or all of ' +
+            'the package networks.', 'err message');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and owner package networks',
+function (t) {
+    var networks = [ACCOUNT_NETWORK.uuid];
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.pkg = {
+        networks: networks
+    };
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account, package networks, non-owner networks',
+function (t) {
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.networks = [OTHER_NETWORK.uuid];
+    req.pkg = {
+        networks: [ACCOUNT_NETWORK.uuid]
+    };
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ok(err, 'err');
+        t.equal(err.restCode, 'InvalidArgument', 'err rest code');
+        t.equal(err.message, 'Account does not have access to some or all of ' +
+            'the requested networks.', 'err message');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account, package networks, non-owner networks',
+function (t) {
+    var networks = [ACCOUNT_NETWORK.uuid];
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.networks = networks;
+    req.pkg = {
+        networks: [OTHER_NETWORK.uuid]
+    };
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, networks, 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and explicit default_networks',
+function (t) {
+    var req = createStubReq('POST', MACHINES_PATH);
+    req.params.default_networks = ['external'];
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, [NETWORKS[4].uuid], 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with owner account and implicit default_networks',
+function (t) {
+    var req = createStubReq('POST', MACHINES_PATH);
+
+    PRE_PROVISION(req, {}, function onPreProvision(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, [
+            NETWORKS[4].uuid,
+            NETWORKS[0].uuid
+        ], 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
+
+
+test('preProvision with different path',
+function (t) {
+    var networks = [OTHER_NETWORK.uuid];
+    var req = createStubReq('POST', MACHINES_PATH + '/' + MACHINE_UUID);
+    req.params.networks = networks;
+
+    PRE_ADD_NIC(req, {}, function onPreListNetworks(err) {
+        t.ifError(err, 'err');
+        t.deepEqual(req.params.networks, networks, 'params.networks');
+        t.deepEqual(req.networks, NETWORKS, 'req.networks');
+        t.end();
+    });
+});
diff --git a/test/runtests b/test/runtests
index 13e3d85..5aa2c88 100755
--- a/test/runtests
+++ b/test/runtests
@@ -106,7 +106,7 @@ echo "#     SDC_SSO_ADMIN_IP is $SDC_SSO_ADMIN_IP"
 cd $TOP
 
 # Generate list of tests
-test_files=$(ls -1 test/*.test.js)
+test_files=$(ls -1 test/*.test.js test/plugins/*.test.js)
 if [[ -n "$opt_test_pattern" ]]; then
     test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
     echo "# Running filtered set of test files: $test_files"
-- 
2.21.0

