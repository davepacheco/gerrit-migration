commit dd969cfb285237970f7da022fea78bb6449ba9c2 (refs/changes/46/2046/3)
Author: Abhinav Upadhyay <er.abhinav.upadhyay@gmail.com>
Date:   2017-06-08T16:58:07+00:00 (2 years, 4 months ago)
    
    Ignore spaces around the probe specifier name in dtrace's output.
    
    When using one of the tracing options, such as -n, -i, -P, -f, if
    the probe specifier contains any leading or trailing spaces, then
    the first line of output produced by dtrace prints the probe name as
    it is (along with the spaces). Moreover, if the probe also includes
    a predicate or an action, then also there is a trailing space in the
    probe name in the output. Following are couple of examples:
    
    localhost$ sudo dtrace -n '  syscall:::entry '
    dtrace: description '  syscall:::entry ' matched 482 probes
    
    lcalhost$ sudo dtrace -n 'syscall:::entry {@num[probefunc] = count();}'
    dtrace: description 'syscall:::entry ' matched 482 probes
    
    This change skips the leading spaces in the probe name before
    starting to process them. Also, when splitting the probe name
    from the predicate and actions in compile_str(), it uses space
    as one of the separators so that any trailing space after the
    probe name will also be avoided in the output.

diff --git a/usr/src/cmd/dtrace/dtrace.c b/usr/src/cmd/dtrace/dtrace.c
index f005629fc9..49226501bf 100644
--- a/usr/src/cmd/dtrace/dtrace.c
+++ b/usr/src/cmd/dtrace/dtrace.c
@@ -737,7 +737,7 @@ compile_str(dtrace_cmd_t *dcp)
 	    dcp->dc_spec, g_cflags | DTRACE_C_PSPEC, g_argc, g_argv)) == NULL)
 		dfatal("invalid probe specifier %s", dcp->dc_arg);
 
-	if ((p = strpbrk(dcp->dc_arg, "{/;")) != NULL)
+	if ((p = strpbrk(dcp->dc_arg, "{/; ")) != NULL)
 		*p = '\0'; /* crop name for reporting */
 
 	dcp->dc_desc = "description";
@@ -1157,6 +1157,14 @@ intr(int signo)
 		g_impatient = 1;
 }
 
+static char *
+skip_leading_spaces(char *s)
+{
+	while (*s == ' ')
+		s++;
+	return s;
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -1409,7 +1417,7 @@ main(int argc, char *argv[])
 				dcp = &g_cmdv[g_cmdc++];
 				dcp->dc_func = compile_str;
 				dcp->dc_spec = DTRACE_PROBESPEC_FUNC;
-				dcp->dc_arg = optarg;
+				dcp->dc_arg = skip_leading_spaces(optarg);
 				break;
 
 			case 'F':
@@ -1426,7 +1434,7 @@ main(int argc, char *argv[])
 				dcp = &g_cmdv[g_cmdc++];
 				dcp->dc_func = compile_str;
 				dcp->dc_spec = DTRACE_PROBESPEC_NAME;
-				dcp->dc_arg = optarg;
+				dcp->dc_arg = skip_leading_spaces(optarg);
 				break;
 
 			case 'I':
@@ -1443,21 +1451,21 @@ main(int argc, char *argv[])
 				dcp = &g_cmdv[g_cmdc++];
 				dcp->dc_func = compile_str;
 				dcp->dc_spec = DTRACE_PROBESPEC_MOD;
-				dcp->dc_arg = optarg;
+				dcp->dc_arg = skip_leading_spaces(optarg);
 				break;
 
 			case 'n':
 				dcp = &g_cmdv[g_cmdc++];
 				dcp->dc_func = compile_str;
 				dcp->dc_spec = DTRACE_PROBESPEC_NAME;
-				dcp->dc_arg = optarg;
+				dcp->dc_arg = skip_leading_spaces(optarg);
 				break;
 
 			case 'P':
 				dcp = &g_cmdv[g_cmdc++];
 				dcp->dc_func = compile_str;
 				dcp->dc_spec = DTRACE_PROBESPEC_PROVIDER;
-				dcp->dc_arg = optarg;
+				dcp->dc_arg = skip_leading_spaces(optarg);
 				break;
 
 			case 'q':
