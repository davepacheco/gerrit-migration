commit d6226e355bcbae539fc9d05dedcb3f9acaa5e977 (refs/changes/61/3961/2)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-05-16T15:02:58-04:00 (1 year, 5 months ago)
    
    joyent/node-mooremachine#16 want more argument assertions
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>

diff --git a/lib/fsm.js b/lib/fsm.js
index 5e11586..3d71bdc 100644
--- a/lib/fsm.js
+++ b/lib/fsm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 module.exports = FSM;
@@ -58,6 +58,7 @@ FSMStateHandle.prototype.validTransitions = function (states) {
 };
 
 FSMStateHandle.prototype.gotoState = function (state) {
+	mod_assert.string(state, 'state');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to leave state ' +
 		    this.fsh_state + ' towards ' + state + ' via a handle ' +
@@ -117,6 +118,9 @@ FSMStateHandle.prototype.disconnectAll = function () {
 };
 
 FSMStateHandle.prototype.on = function (obj, evt, cb) {
+	mod_assert.object(obj, 'obj');
+	mod_assert.string(evt, 'evt');
+	mod_assert.func(cb, 'cb');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to set up handler in state ' +
 		    this.fsh_state + ' but already called gotoState() to ' +
@@ -127,6 +131,8 @@ FSMStateHandle.prototype.on = function (obj, evt, cb) {
 };
 
 FSMStateHandle.prototype.interval = function (interval, cb) {
+	mod_assert.number(interval, 'interval');
+	mod_assert.func(cb, 'cb');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to set up interval in state ' +
 		    this.fsh_state + ' but already called gotoState() to ' +
@@ -138,6 +144,8 @@ FSMStateHandle.prototype.interval = function (interval, cb) {
 };
 
 FSMStateHandle.prototype.timeout = function (timeout, cb) {
+	mod_assert.number(timeout, 'timeout');
+	mod_assert.func(cb, 'cb');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to set up timeout in state ' +
 		    this.fsh_state + ' but already called gotoState() to ' +
@@ -149,6 +157,7 @@ FSMStateHandle.prototype.timeout = function (timeout, cb) {
 };
 
 FSMStateHandle.prototype.immediate = function (cb) {
+	mod_assert.func(cb, 'cb');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to set up immediate in state ' +
 		    this.fsh_state + ' but already called gotoState() to ' +
@@ -160,6 +169,7 @@ FSMStateHandle.prototype.immediate = function (cb) {
 };
 
 FSMStateHandle.prototype.callback = function (cb) {
+	mod_assert.func(cb, 'cb');
 	if (!this.fsh_valid) {
 		throw (new Error('FSM attempted to set up callback in state ' +
 		    this.fsh_state + ' but already called gotoState() to ' +
@@ -234,6 +244,7 @@ FSM.prototype.getState = function () {
 };
 
 FSM.prototype.isInState = function (state) {
+	mod_assert.string(state, 'state');
 	return (this.fsm_state === state ||
 	    this.fsm_state.indexOf(state + '.') === 0);
 };
diff --git a/package.json b/package.json
index c17d660..a3b1ac2 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "mooremachine",
-  "version": "2.2.0",
+  "version": "2.2.1",
   "description": "Moore finite state machines",
   "main": "lib/index.js",
   "scripts": {
diff --git a/test/basic.test.js b/test/basic.test.js
index bd01d1c..33aafac 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var FSM = require('../lib/fsm');
@@ -500,3 +500,39 @@ test('interacting FSMs', function (t) {
 
 	t.end();
 });
+
+test('invalid arguments throw', function (t) {
+	var Class = function () {
+		FSM.call(this, 'initial');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_initial = function (S) {
+		/*
+		 * The functions below should all throw when called with no
+		 * arguments
+		 */
+		var funcsToThrow = [
+			'immediate',
+			'interval',
+			'timeout',
+			'callback',
+			'on',
+			'gotoState'
+		];
+
+		funcsToThrow.forEach(function (funcName) {
+			t.equal(typeof (S[funcName]), 'function', util.format(
+			    'S.%s is a function', funcName));
+			t.throws(function () {
+				S[funcName]();
+			}, util.format('S.%s() throws with no arguments',
+			    funcName));
+		});
+
+		t.end();
+	};
+
+	var c = new Class();
+
+	t.ok(c, 'class created');
+});
