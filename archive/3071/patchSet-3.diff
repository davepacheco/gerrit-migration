commit b7e6d8b338765a03e1834f9f98b5fbc5207794b0 (refs/changes/71/3071/3)
Author: Rui Loura <rui@joyent.com>
Date:   2017-12-13T20:31:11+00:00 (1 year, 10 months ago)
    
    SAPI-298 remove network validation from SAPI

diff --git a/lib/server/attributes.js b/lib/server/attributes.js
index 7231f70..fed608e 100644
--- a/lib/server/attributes.js
+++ b/lib/server/attributes.js
@@ -46,6 +46,11 @@ function Attributes(config) {
     this.model = config.model;
 }
 
+var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
+function validUUID(uuid) {
+    return (UUID_RE.test(uuid));
+}
+exports.validUUID = validUUID;
 
 // -- Functions to manipulate object attributes
 
@@ -312,38 +317,31 @@ function generateZoneParams(uuid, cb) {
             params.customer_metadata =
                 sanitizeMetadata(attributes.metadata);
 
-            if (!params.networks) {
-                subcb(null, params);
-                return;
+            /*
+             * In VMAPI`validNetworks() the following formats are supported:
+             * [ 'uuid1', 'uuid2' ]  (legacy)
+             * [ { uuid: 'uuid1', ... }, { uuid: 'uuid2', ... } ]
+             * [ { name: 'network name 1'}, { name: 'network name 2'} ]
+             */
+            if (params.networks) {
+                var nets = [];
+                params.networks.forEach(function (net) {
+                    if (typeof (net) == 'string') {
+                        if (validUUID(net)) {
+                            nets.push({'uuid': net});
+                        } else {
+                            nets.push({'name': net});
+                        }
+                    } else {
+                        assert.object(net, 'net');
+                        nets.push(net);
+                    }
+                });
+                params.networks = nets;
             }
 
-            resolveNetworks.call(self, params.networks, params.owner_uuid,
-                function (err, uuids) {
-                if (err && !verror.hasCauseWithName(
-                    err, 'UnsupportedOperationError')) {
-                        log.error(err, 'failed to resolve networks');
-                        subcb(err);
-                        return;
-                }
-
-                /*
-                 * If NAPI isn't available, then just leave the
-                 * network names alone without resolving them to
-                 * UUIDs.  In proto mode, the zone won't
-                 * actually be created.
-                 */
-                if (err && verror.hasCauseWithName(
-                    err, 'UnsupportedOperationError')) {
-                        assert.ok(self.model.proto_mode);
-                        subcb(null, params);
-                        return;
-                }
-
-                delete params.networks;
-                params.networks = uuids;
-
-                subcb(null, params);
-            });
+            subcb(null, params);
+            return;
         }
     ], cb);
 }
@@ -428,31 +426,6 @@ function validManifests(manifests, cb) {
     });
 }
 
-function validParams(params, cb) {
-    var self = this;
-    var log = self.log;
-
-    assert.object(params, 'params');
-
-    if (!params.networks) {
-        cb();
-        return;
-    }
-
-    resolveNetworks.call(self, params.networks, params.owner_uuid,
-        function (err) {
-        if (err &&
-            verror.hasCauseWithName(err, 'UnsupportedOperationError') &&
-            self.model.proto_mode) {
-            log.info('skipping validation of ' +
-                'network names in proto mode');
-            err = null;
-        }
-
-        cb(err);
-    });
-}
-
 function validType(type, cb) {
     var self = this;
     var log = self.log;
@@ -502,13 +475,6 @@ Attributes.prototype.validate = function validate(obj, opts, cb) {
                 subcb(err);
             });
         },
-        function (subcb) {
-            if (!obj.params)
-                return (subcb(null));
-            validParams.call(self, obj.params, function (err) {
-                subcb(err);
-            });
-        },
         function (subcb) {
             if (!obj.manifests)
                 return (subcb(null));
@@ -519,72 +485,3 @@ Attributes.prototype.validate = function validate(obj, opts, cb) {
         }
     ], cb);
 };
-
-
-// -- Other helper functions
-
-/*
- * Resolve an array of network names (e.g., "admin") to NAPI UUIDs.  If the
- * input argument is an array of objects, assume that these are the actual
- * network UUIDs and don't resolve the network names.
- */
-function resolveNetworks(names, owner, cb) {
-    var log = this.log;
-    var nicParams;
-
-    if (this.model.proto_mode) {
-        return (cb(new mod_errors.UnsupportedOperationError(
-            'NAPI not available in proto mode')));
-    }
-
-    if (names.length > 0) {
-        var first = names[0];
-
-        if (typeof (first) !== 'string') {
-            log.debug('resolveNetworks() passed an array of ' +
-                'objects, assuming they\'re proper NAPI networks');
-            return (cb(null, names));
-        }
-    }
-
-    /*
-     * We shouldn't actually be assuming we're only going to get one page worth
-     * of results, but until node-sdc-clients gives us a better streaming
-     * interface for this, we'll make sure we have enough predicates in place
-     * that this shouldn't be a problem.
-     */
-    nicParams = { name: names };
-    if (owner) {
-        nicParams['provisionable_by'] = owner;
-    }
-    this.model.napi.listNetworks(nicParams, function (err, networks) {
-        if (err) {
-            log.error(err, 'failed to list networks');
-            return (cb(err));
-        }
-
-        var uuids = [];
-
-        names.forEach(function (name) {
-            networks.forEach(function (network) {
-                if (name === network.name)
-                    uuids.push(network.uuid);
-            });
-        });
-
-        if (names.length !== uuids.length) {
-            var msg = 'invalid network name';
-            log.error(msg);
-            return (cb(new Error(msg)));
-        }
-
-        log.debug({
-            names: names,
-            uuids: uuids
-        }, 'resolved network names');
-
-        return (cb(null, uuids));
-    });
-
-    return (null);
-}
diff --git a/test/instances.test.js b/test/instances.test.js
index 136cde4..c89c81d 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -954,7 +954,6 @@ test('upgrading a zone', function (t) {
 
 
 // -- Test passing NAPI-ifed networks
-
 test('create instance with NAPI networks', function (t) {
     var self = this;
     var client = this.client;
@@ -968,49 +967,91 @@ test('create instance with NAPI networks', function (t) {
 
     var uri_inst = '/instances/' + inst.uuid;
 
-    vasync.pipeline({funcs: [
-        function (_, cb) {
-            common.createApplication({sapi: self.sapi, uuid: app_uuid}, cb);
-        },
-        function (_, cb) {
-            common.createService.call(self, app_uuid, svc_uuid, cb);
-        },
-        function (_, cb) {
-            helper.resolveNetwork('admin', process.env.ADMIN_UUID,
-                function (err, uuid) {
+    var runone = function (net, pcb) {
+        vasync.pipeline({funcs: [
+            function (_, cb) {
+                common.createApplication({sapi: self.sapi, uuid: app_uuid}, cb);
+            },
+            function (_, cb) {
+                common.createService.call(self, app_uuid, svc_uuid, cb);
+            },
+            function (_, cb) {
                 inst.params = {};
                 inst.params.billing_id = process.env.BILLING_ID;
-                inst.params.networks = [ { uuid: uuid } ];
                 inst.params.alias =
-                    common.getUniqueTestResourceName('napi-networks');
-                cb(err);
-            });
-        },
-        function (_, cb) {
-            client.post(URI, inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 200);
-                cb(null);
-            });
-        },
-        function (_, cb) {
-            self.client.del(uri_inst, function (err, req, res, obj) {
-                t.ifError(err);
-                t.equal(res.statusCode, 204);
+                    common.getUniqueTestResourceName('napi-nets-' + inst.uuid);
+                inst.params.networks = net;
                 cb(null);
-            });
-        },
-        function (_, cb) {
-            self.sapi.deleteService(svc_uuid, function (err) {
-                cb(err);
-            });
-        },
-        function (_, cb) {
-            self.sapi.deleteApplication(app_uuid, function (err) {
-                cb(err);
-            });
-        }
-    ]}, function (err, results) {
+            },
+            function (_, cb) {
+                client.post(URI, inst, function (err, req, res, obj) {
+                    t.ifError(err);
+                    t.equal(res.statusCode, 200);
+                    cb(err);
+                });
+            },
+            function (_, cb) {
+                self.client.del(uri_inst, function (err, req, res, obj) {
+                    t.ifError(err);
+                    t.equal(res.statusCode, 204);
+                    cb(err);
+                });
+            },
+            function (_, cb) {
+                self.sapi.deleteService(svc_uuid, function (err) {
+                    cb(err);
+                });
+            },
+            function (_, cb) {
+                self.sapi.deleteApplication(app_uuid, function (err) {
+                    cb(err);
+                });
+            }
+        ]}, function (err, results) {
+            t.ifError(err);
+            pcb(err);
+        });
+    };
+
+    /*
+     * Test that SAPI properly converts these 4 into valid VMAPI formats.
+     *
+     * [ { uuid: <uuid> }, ... ]
+     * [ <uuid>, ... ]
+     * [ { name: <name> }, ... ]
+     * [ <name>, ... ]
+     */
+    var resolveAdmin = function (is_obj, callback) {
+        helper.resolveNetwork('admin', process.env.ADMIN_UUID,
+            function (err, uuid) {
+                if (err) {
+                    callback(err);
+                    return;
+                }
+                if (is_obj) {
+                    runone([ { uuid: uuid } ], callback);
+                } else {
+                    runone([ uuid ], callback);
+                }
+        });
+    };
+
+    vasync.pipeline({
+        funcs: [
+            function (_, callback) {
+                resolveAdmin(true, callback);
+            },
+            function (_, callback) {
+                resolveAdmin(false, callback);
+            },
+            function (_, callback) {
+                runone([ { name: 'admin' } ], callback);
+            },
+            function (_, callback) {
+                runone([ 'admin' ], callback);
+            }
+        ]
+    }, function (err, results) {
         t.ifError(err);
         t.end();
     });
