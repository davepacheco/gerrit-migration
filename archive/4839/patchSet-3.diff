From 170c1c81388630ab7f5a165039697d85e393fa45 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Thu, 13 Sep 2018 18:01:31 -0700
Subject: [PATCH] TRITON-717 node-vmadm should have dummy backend

---
 .eslintrc                           |   34 +
 .gitignore                          |   12 +-
 .gitmodules                         |    6 -
 .nycrc                              |   18 +
 Makefile                            |   55 +-
 deps/javascriptlint                 |    1 -
 deps/jsstyle                        |    1 -
 lib/diff.js                         |  518 ++++++++++
 lib/index.dummy.js                  | 1390 +++++++++++++++++++++++++++
 lib/index.sunos.js                  |    5 +-
 package.json                        |   23 +-
 test/unit/dummy.test.js             |  436 +++++++++
 test/unit/testutil.js               |   33 +
 tools/jsl.node.conf                 |  139 ---
 tools/jsl.web.conf                  |  137 ---
 tools/jsstyle.conf                  |   14 -
 tools/mk/Makefile.defs              |   10 +-
 tools/mk/Makefile.deps              |   35 +-
 tools/mk/Makefile.node_modules.defs |   68 ++
 tools/mk/Makefile.node_modules.targ |   31 +
 tools/mk/Makefile.targ              |   15 +-
 tools/mkrepo                        |  121 ---
 tools/service_bundle.dtd.1          | 1091 ---------------------
 23 files changed, 2659 insertions(+), 1534 deletions(-)
 create mode 100644 .eslintrc
 create mode 100644 .nycrc
 delete mode 160000 deps/javascriptlint
 delete mode 160000 deps/jsstyle
 create mode 100644 lib/diff.js
 create mode 100644 lib/index.dummy.js
 create mode 100644 test/unit/dummy.test.js
 create mode 100644 test/unit/testutil.js
 delete mode 100644 tools/jsl.node.conf
 delete mode 100644 tools/jsl.web.conf
 delete mode 100644 tools/jsstyle.conf
 create mode 100644 tools/mk/Makefile.node_modules.defs
 create mode 100644 tools/mk/Makefile.node_modules.targ
 delete mode 100755 tools/mkrepo
 delete mode 100644 tools/service_bundle.dtd.1

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..8d57566
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,34 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 6,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "no-unused-vars": [
+            "error",
+            {
+                // Track all unused identifiers
+                "vars": "all",
+                "args": "all",
+                "caughtErrors": "all",
+                // Don't warn on args that start with _, res or req.
+                // Added stdout and stderr to the standard joyent set.
+                "argsIgnorePattern": "^(_|res|req|stdout|stderr)",
+                // Don't warn on catch or var identifiers that start with _
+                "caughtIgnorePattern": "^_",
+                "varsIgnorePattern": "^_"
+            }
+        ]
+    }
+}
diff --git a/.gitignore b/.gitignore
index ce891c9..8679115 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,9 +1,11 @@
+/build
+/make_stamps
 /node_modules
+/npm-debug.log
 /tmp
-build
-docs/*.json
-docs/*.html
 cscope.in.out
-cscope.po.out
 cscope.out
-smf/manifests/bapi.xml
+cscope.po.out
+docs/*.html
+docs/*.json
+smf/manifests/bapi.xml
\ No newline at end of file
diff --git a/.gitmodules b/.gitmodules
index dbadc87..c6774a2 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,9 +1,3 @@
 [submodule "deps/restdown"]
 	path = deps/restdown
 	url = git://github.com/trentm/restdown.git
-[submodule "deps/javascriptlint"]
-	path = deps/javascriptlint
-	url = git://github.com/davepacheco/javascriptlint.git
-[submodule "deps/jsstyle"]
-	path = deps/jsstyle
-	url = git://github.com/davepacheco/jsstyle.git
diff --git a/.nycrc b/.nycrc
new file mode 100644
index 0000000..d55f1f8
--- /dev/null
+++ b/.nycrc
@@ -0,0 +1,18 @@
+{
+    "all": true,
+    "include": [
+        "bin/**/*.js",
+        "cmd/**/*.js",
+        "lib/**/*.js"
+    ],
+    "report-dir": "./build/coverage",
+    "temp-directory": "./build/nyc_output",
+    "reporter": [
+      "cobertura",
+      "clover",
+      "json",
+      "json-summary",
+      "html",
+      "text"
+  ]
+}
diff --git a/Makefile b/Makefile
index 333c0fc..aa7be8d 100644
--- a/Makefile
+++ b/Makefile
@@ -12,23 +12,60 @@
 # node-vmadm Makefile
 #
 
+
+#
+# Tools
+#
+
+TAP := ./node_modules/.bin/tap
+
+
 #
 # Files
 #
-JS_FILES	:= $(shell ls *.js) $(shell find lib -name '*.js')
-JSON_FILES	 = package.json
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE	 = $(JS_FILES)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
+
+JS_FILES := $(shell find {lib,test} -name '*.js')
+ESLINT_FILES := $(JS_FILES)
 
 include ./tools/mk/Makefile.defs
+include ./tools/mk/Makefile.node_modules.defs
+
 
 #
-# Repo-specific targets
+# Variables
+#
+
+NPM = npm
+NODE = node
+TEST_UNIT_JOBS ?= 4
+BUILD = $(TOP)/build
+CLEAN_FILES += $(BUILD)
+
+
+#
+# Targets
 #
 .PHONY: all
-all:
-	npm rebuild
+all: $(STAMP_NODE_MODULES)
+
+$(TAP): $(STAMP_NODE_MODULES)
+
+$(BUILD):
+	mkdir $@
+
+.PHONY: test
+test: | $(TAP) test-coverage-unit
+
+.PHONY: test-unit
+test-unit: | $(TAP) $(STAMP_NODE_MODULES) $(BUILD)
+	$(TAP) --jobs=$(TEST_UNIT_JOBS) --output-file=$(BUILD)/test.unit.tap test/unit/**/*.test.js
+
+.PHONY: test-coverage-unit
+test-coverage-unit: | $(TAP) $(STAMP_NODE_MODULES) $(BUILD)
+	$(TAP) --jobs=$(TEST_UNIT_JOBS) --output-file=$(BUILD)/test.unit.tap --coverage \
+		test/unit/**/*.test.js
+
 
+include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.targ
+include ./tools/mk/Makefile.node_modules.targ
diff --git a/deps/javascriptlint b/deps/javascriptlint
deleted file mode 160000
index e1bd0ab..0000000
--- a/deps/javascriptlint
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
diff --git a/deps/jsstyle b/deps/jsstyle
deleted file mode 160000
index 194dde7..0000000
--- a/deps/jsstyle
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 194dde793f58b707b0416a106e1f7679795e50df
diff --git a/lib/diff.js b/lib/diff.js
new file mode 100644
index 0000000..bc5a2c9
--- /dev/null
+++ b/lib/diff.js
@@ -0,0 +1,518 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ *
+ * ----
+ *
+ * NOTE: this file is a copy:
+ *
+ * https://github.com/joyent/smartos-live/blob/a93cf7d1a27a1170cf11d8d4489feb50fc6e1b77/src/vm/node_modules/diff.js
+ *
+ * modified only to use the local assert-plus instead of the SmartOS platform's
+ * assert-plus, and to pass `make check`.
+ *
+ * ----
+ *
+ *
+ * "diff" 2 JavaScript objects
+ *
+ * var a = {
+ *     foo: true,
+ *     num: 1
+ * };
+ * var b = {
+ *     bar: true,
+ *     num: 2
+ * };
+ * var changes = diff(a, b);
+ * console.log(changes);
+ * [
+ *   {
+ *     "prettyPath": "foo",
+ *     "path": ["foo"],
+ *     "action": "removed",
+ *     "oldValue": true
+ *   },
+ *   {
+ *     "prettyPath": "num",
+ *     "path": ["num"],
+ *     "action": "changed",
+ *     "oldValue": 1,
+ *     "newValue": 2
+ *   },
+ *   {
+ *     "prettyPath": "bar",
+ *     "path": ["bar"],
+ *     "action": "added",
+ *     "newValue": true
+ *   }
+ * ]
+ *
+ * On top of this basic functionality, this function also supports comparing
+ * objects for modifications based on an "identifierKey" supplied in a map.
+ *
+ * Consider the following two objects.
+ *
+ * var a = {
+ *     disks: [
+ *         {
+ *             name: "foo",
+ *             size: 10
+ *         }
+ *     ]
+ * };
+ * var b = {
+ *     disks: [
+ *         {
+ *             name: "foo",
+ *             size: 20
+ *         }
+ *     ]
+ * };
+ *
+ * Looking at these objects, we can see that the "disks" array has a single
+ * object with both a name and size - only the size has changed from 10 to 20.
+ * Running these objects through diff() without a map yields:
+ *
+ * var changes = diff(a, b);
+ * console.log(changes);
+ * [
+ *   {
+ *     "prettyPath": "disks.*",
+ *     "path": [
+ *       "disks",
+ *       null
+ *     ],
+ *     "action": "removed",
+ *     "oldValue": {
+ *       "name": "foo",
+ *       "size": 10
+ *     }
+ *   },
+ *   {
+ *     "prettyPath": "disks.*",
+ *     "path": [
+ *       "disks",
+ *       null
+ *     ],
+ *     "action": "added",
+ *     "newValue": {
+ *       "name": "foo",
+ *       "size": 20
+ *     }
+ *   }
+ * ]
+ *
+ * Note that `null` in the `path` array means any element of the array, as
+ * this module doesn't concern itself with the indices of an array or array
+ * sort order.
+ *
+ * diff() reports that an entire object was removed from the "disks" array
+ * and replaced with a new object.  If we know ahead of time that a key
+ * (like "disks") is guaranteed to be an array of objects, we can give diff()
+ * a "map" where we can specify that "disks" -> "name"... meaning "disks"
+ * is an array of objects where "name" is a key that represents a unique
+ * identifier for the object.  This way, we can determine if an object
+ * was removed completely, or just modified in place.
+ *
+ * var map = {
+ *     disks: 'name'
+ * };
+ * var changes = diff(a, b, {map: map});
+ * console.log(changes);
+ * [
+ *   {
+ *     "prettyPath": "disks.*.size",
+ *     "path": [
+ *       "disks",
+ *       null,
+ *       "size"
+ *     ],
+ *     "action": "changed",
+ *     "oldValue": 10,
+ *     "newValue": 20,
+ *     "ident": "foo"
+ *   }
+ * ]
+ *
+ * With the map supplied, only one change is reported (the size).  The "ident"
+ * key shows the value of the identifierKey for the object modified (in this
+ * case, the value of the disks "name" attribute).
+ *
+ * The keys given in the "map" object are only applied to the base object
+ * given, meaning an initial object like this won't use the map.
+ *
+ * var a = {
+ *     "root": {
+ *         "disks": [
+ *             {
+ *                 "name": "foo"
+ *             }
+ *         ]
+ *     }
+ * };
+ *
+ * As the base key considered by the map in this example is "root".
+ *
+ */
+
+var assert = require('assert-plus');
+
+/*
+ * This is the entry point into this module.
+ *
+ * This function will determine the appropriate internal diffing function to
+ * call based on the input paramaters.
+ *
+ * The folliwng data types are supported by this module.
+ *
+ * - Primitives (number, string, boolean)
+ * - Array
+ * - Object
+ * - Date
+ * - null
+ * - undefined
+ *
+ * Any other data type may or may not yield unexpected results.
+ *
+ * opts is an optional object that may contain
+ *
+ *   - opts.map    A key->value mapping used for determining object differencs,
+ *                 more information about this can be found in this files block
+ *                 comment
+ *   - opts.prefix An array to keep track of how deep into an object we
+ *                 currently are.  This variable is created and maintaned by
+ *                 the internal diffing functions like objDiff and arrayDiff
+ *                 and should not be provided by the caller.
+ */
+function diff(a, b, _opts) {
+    if (theSameValue(a, b)) {
+        return [];
+    } else if (Array.isArray(a) && Array.isArray(b)) {
+        return arrayDiff.apply(this, arguments);
+    } else {
+        return objDiff.apply(this, arguments);
+    }
+}
+
+/*
+ * Compare two objects - called by diff()
+ *
+ * opts is the same object document in the diff() function
+ */
+function objDiff(a, b, opts) {
+    var changes = [];
+    var prefix;
+
+    opts = opts || {};
+    opts.map = opts.map || {};
+    prefix = opts.prefix || [];
+
+    assert.object(opts, 'opts');
+    assert.object(opts.map, 'opts.map');
+    assert.array(prefix, 'prefix');
+
+    if (theSameValue(a, b))
+        return [];
+
+    assert.object(a, 'a');
+    assert.object(b, 'b');
+
+    // loop all keys on the a (from) side
+    Object.keys(a).forEach(function loopFromObject(key) {
+        var nestOpts = {};
+        var path = prefix.concat(key);
+        var prettyPath = toDotNotation(path);
+
+        // if the key is not in b, it was removed
+        if (!hasProperty(b, key)) {
+            changes.push({
+                prettyPath: prettyPath,
+                path: path,
+                action: 'removed',
+                oldValue: a[key]
+            });
+            return;
+        }
+
+        // if the value in a is the same as the value in b, there was no change
+        // so we move on
+        if (theSameValue(a[key], b[key]))
+            return;
+
+        // if either key in a or b is not an object, then the value has changed
+        if (typeof (a[key]) !== 'object' || typeof (b[key]) !== 'object') {
+
+            changes.push({
+                prettyPath: prettyPath,
+                path: path,
+                action: 'changed',
+                oldValue: a[key],
+                newValue: b[key]
+            });
+
+            return;
+        }
+
+        // both values are objects (maybe Array), compare recursively
+        Object.keys(opts).forEach(function loopOpts(k) {
+            nestOpts[k] = opts[k];
+        });
+        nestOpts.prefix = path;
+
+        diff(a[key], b[key], nestOpts, key).forEach(
+            function loopNestedChanges(change) {
+
+            changes.push(change);
+        });
+    });
+
+    // loop all keys in the b (to) side to find any additions
+    Object.keys(b).forEach(function loopToObject(key) {
+        if (hasProperty(a, key))
+            return;
+
+        var path = prefix.concat(key);
+        var prettyPath = toDotNotation(path);
+
+        changes.push({
+            prettyPath: prettyPath,
+            path: path,
+            action: 'added',
+            newValue: b[key]
+        });
+    });
+
+    return changes;
+}
+
+/*
+ * Compare two arrays - called by diff()
+ *
+ * opts is the same object document in the diff() function
+ *
+ * key is optional and not to be passed by the consumer.  If key is set, it
+ * means the array we are currently calculating the differences for was nested
+ * inside an object under this key.  Using this information, we can determine
+ * if the "map" (if set) should be used to calculate differences.
+ */
+function arrayDiff(a, b, opts, key) {
+    var aSerialized;
+    var bSerialized;
+    var changes = [];
+    var identifierKey;
+    var modified = [];
+    var path;
+    var possiblyAdded = [];
+    var possiblyRemoved = [];
+    var prefix;
+    var prettyPath;
+
+    opts = opts || {};
+    opts.map = opts.map || {};
+    prefix = opts.prefix || [];
+
+    assert.array(a, 'a');
+    assert.array(b, 'b');
+    assert.object(opts, 'opts');
+    assert.object(opts.map, 'opts.map');
+    assert.array(prefix, 'prefix');
+
+    // because we are inside an array, we add `null` to the end of the current
+    // path.
+    path = prefix.concat(null);
+    prettyPath = toDotNotation(path);
+
+    // check if we should use the "map" for this array
+    if (key && path.length === 2 && hasProperty(opts.map, key))
+        identifierKey = opts.map[key];
+
+    // serialize everything in a and b to compare directly as strings
+    aSerialized = a.map(function serializeArrayA(o) {
+        return JSON.stringify(o);
+    });
+    bSerialized = b.map(function serializeArrayB(o) {
+        return JSON.stringify(o);
+    });
+
+    // all values in a not found in b have been possibly removed
+    aSerialized.forEach(function checkRemoved(o, i) {
+        if (bSerialized.indexOf(o) >= 0)
+            return;
+
+        possiblyRemoved.push(i);
+    });
+
+    // all values in b not found in a have been possibly added
+    bSerialized.forEach(function checkAdded(o, j) {
+        if (aSerialized.indexOf(o) >= 0)
+            return;
+
+        possiblyAdded.push(j);
+    });
+
+    // if an identifierKey is found - meaning the arrays we are looking at
+    // were found inside an object with a given "key" (4th arg), we treat
+    // every element inside the array as an object, and look for an
+    // "identifier" object to compare
+    if (identifierKey) {
+        possiblyRemoved = possiblyRemoved.filter(function filterRemoved(i) {
+            var found = false;
+            var oi = a[i];
+
+            assert.object(oi, 'must be an object: ' + JSON.stringify(oi));
+
+            possiblyAdded = possiblyAdded.filter(function filterAdded(j) {
+                var oj = b[j];
+
+                assert.object(oi, 'must be an object');
+
+                if (found)
+                    return true;
+
+                if (oi[identifierKey] === oj[identifierKey]) {
+                    found = true;
+
+                    // to be processed recursively below
+                    modified.push({
+                        a: oi,
+                        b: oj,
+                        ident: oi[identifierKey]
+                    });
+                    return false;
+                }
+
+                return true;
+            });
+
+            return !found;
+        });
+    }
+
+    // add the changes to the changes array to be returned
+    possiblyRemoved.forEach(function pushRemovedChanges(i) {
+        changes.push({
+            prettyPath: prettyPath,
+            path: path,
+            action: 'removed',
+            oldValue: a[i]
+        });
+    });
+    modified.forEach(function pushModifiedChanges(mod) {
+        // mod.a and mod.b are guaranteed to be objects
+        var _changes = objDiff(mod.a, mod.b, {prefix: path});
+        _changes.forEach(function pushModifiedChange(change) {
+            change.ident = mod.ident;
+            changes.push(change);
+        });
+    });
+    possiblyAdded.forEach(function pushAddedChanges(j) {
+        changes.push({
+            prettyPath: prettyPath,
+            path: path,
+            action: 'added',
+            newValue: b[j]
+        });
+    });
+
+    return changes;
+}
+
+/*
+ * Check if 2 primitive values are the same
+ */
+function theSameValue(a, b) {
+    if (a === b)
+        return true;
+
+    if (a instanceof Date && b instanceof Date)
+        return theSameValue(a.getTime(), b.getTime());
+
+    return false;
+}
+
+/*
+ * Convert a "path" (given as an array) to a pretty-formatted dot-notation
+ * string. This is solely meant for producing a human-readable path in the
+ * "changes" array given from any object or array diff.  Examples
+ *
+ * > toDotNotation(['disks', 0, 'name'])
+ * => 'disks.0.name'
+ *
+ * > toDotNotation(['disks', null, 'name']);
+ * => 'disks.*.name'
+ *
+ * > toDotNotation(['nics', '192.168.1.1', 'name'])
+ * => 'nics[192.168.1.1].name'
+ *
+ */
+function toDotNotation(arr) {
+    var s = '';
+
+    assert.array(arr, 'arr');
+
+    arr.forEach(function loopPathElements(elem) {
+        if (elem === null)
+            elem = '*';
+        elem = '' + elem;
+
+        // eslint-disable-next-line
+        if (elem.match(/[\.\[\]]/)) {
+            // eslint-disable-next-line
+            elem = elem.replace(/([\[\]])/g, '\\$1');
+            s += '[' + elem + ']';
+            return;
+        }
+
+        if (s.length > 0)
+            s += '.';
+        s += elem;
+    });
+    return s;
+}
+
+/*
+ * safe hasOwnProperty
+ */
+function hasProperty(o, p) {
+    return ({}).hasOwnProperty.call(o, p);
+}
+
+module.exports = diff;
+
+function main() {
+    var read = require('fs').readFileSync;
+    var a = JSON.parse(read(process.argv[2]));
+    var b = JSON.parse(read(process.argv[3]));
+
+    var opts;
+    if (process.argv[4])
+        opts = JSON.parse(read(process.argv[4]));
+    var key = process.argv[5];
+
+    var changes = diff(a, b, opts, key);
+    console.log(JSON.stringify(changes, null, 2));
+}
+
+if (require.main === module)
+    main();
diff --git a/lib/index.dummy.js b/lib/index.dummy.js
new file mode 100644
index 0000000..65823cc
--- /dev/null
+++ b/lib/index.dummy.js
@@ -0,0 +1,1390 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * A dummy version of node-vmadm using json files on the local file system
+ */
+
+var fs = require('fs');
+var net = require('net');
+var path = require('path');
+var stream = require('stream');
+var util = require('util');
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+var uuidv4 = require('uuid/v4');
+
+var diff = require('./diff');
+
+// These are the NIC properties that are boolean flags and we just remove when
+// false.
+var NIC_FLAGS = [
+    'allow_dhcp_spoofing',
+    'allow_ip_spoofing',
+    'allow_mac_spoofing',
+    'allow_restricted_traffic',
+    'allow_unfiltered_promisc',
+    'primary'
+];
+// NIC properties from vmadm's proptable.js
+var NIC_PROPERTIES = [
+    'allow_dhcp_spoofing',
+    'allow_ip_spoofing',
+    'allow_mac_spoofing',
+    'allow_restricted_traffic',
+    'allow_unfiltered_promisc',
+    'allowed_dhcp_cids',
+    'allowed_ips',
+    'blocked_outgoing_ports',
+    'dhcp_server',
+    'gateway',
+    'gateways',
+    'interface',
+    'ip',
+    'ips',
+    'mac',
+    'model',
+    'mtu',
+    'netmask',
+    'network_uuid',
+    'nic_tag',
+    'primary',
+    'vlan_id',
+    'vrrp_primary_ip',
+    'vrrp_vrid'
+];
+
+/**
+ * A dummy version of vmadm using json files on the local file system
+ *
+ * @param opts {Object} Options
+ *      - log {Bunyan} Bunyan logger
+ *      - serverRoot {String} The file system path for dummy json files for this
+ *        server to live.
+ *      - serverUuid {String} The UUID of the dummy UUID. (Optional/Ignored when
+ *        sysinfo is passed)
+ *      - sysinfo {Object} The sysinfo object for the server this vmadm serves.
+ */
+function DummyVmadm(opts) {
+    assert.object(opts);
+    assert.object(opts.log, 'opts.log');
+    assert.string(opts.serverRoot, 'opts.serverRoot');
+    assert.optionalObject(opts.sysinfo, 'opts.sysinfo');
+
+    var self = this;
+
+    self.log = opts.log;
+    self.serverRoot = opts.serverRoot;
+
+    if (opts.sysinfo) {
+        assertSysinfo(opts.sysinfo);
+        self.sysinfo = opts.sysinfo;
+        self.serverUuid = opts.sysinfo.UUID;
+    } else {
+        assert.uuid(opts.serverUuid, 'opts.serverUuid');
+        self.serverUuid = opts.serverUuid;
+    }
+}
+
+// --- vmadm implementation
+
+/**
+ * Check whether a VM exists or not.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} The VM uuid.
+ *      - include_dni {Boolean} If true, return VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err, exists)`
+ *      - err is set on unhandled error
+ *      - otherwise; exists will be true or false
+ */
+DummyVmadm.prototype.exists = function vmExists(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+
+    self.load(opts, {fields: ['uuid']}, function _onLoad(err, vm) {
+        if (err) {
+            if (err.restCode === 'VmNotFound') {
+                callback(null, false);
+                return;
+            }
+            callback(err);
+            return;
+        }
+
+        if (vm.do_not_inventory && !opts.include_dni) {
+            /*
+             * VM is marked do_not_inventory. And we don't have include_dni
+             * option set indicating we want to include those, so we treat the
+             * same as not existing.
+             */
+            self.log.trace(err, 'vmadm.exists(): ' + opts.uuid +
+                ' has do_not_inventory');
+            callback(null, false);
+            return;
+        }
+
+        callback(null, true);
+        return;
+    });
+};
+
+/**
+ * Call `vmadm get UUID`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} The VM uuid.
+ * @param vmopts {Object} Optional vm options
+ *      - fields {Array} Return only the keys give in `fields` array
+ *      - include_dni {Boolean} If true, return VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.load = function vmLoad(opts, vmopts, callback) {
+    assert.object(opts, 'opts');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+
+    if (!callback) {
+        callback = vmopts;
+    }
+
+    self.log.trace({
+        req_id: opts.req_id,
+        serverUuid: self.serverUuid,
+        uuid: opts.uuid
+    }, 'loading VM');
+
+    self._loadVm({
+        uuid: opts.uuid
+    }, function _onVmLoad(err, vm) {
+        var notFoundErr;
+
+        if (err && err.code === 'ENOENT') {
+            notFoundErr = new Error('vmadm load ' + opts.uuid +
+                ' failed: No such zone');
+            notFoundErr.restCode = 'VmNotFound';
+            callback(notFoundErr);
+            return;
+        } else if (err) {
+            callback(err);
+            return;
+        }
+
+        if (vm.do_not_inventory && !opts.include_dni) {
+            // Unless the caller is specifically asking for VMs that are
+            // do_not_inventory, we treat them the same a VMs that don't exist.
+            notFoundErr = new Error('vmadm load ' + opts.uuid +
+                ' failed: No such zone');
+            notFoundErr.restCode = 'VmNotFound';
+            callback(notFoundErr);
+            return;
+        }
+
+        if (opts.fields) {
+            Object.keys(vm).forEach(function _removeUnwantedFields(field) {
+                if (opts.fields.indexOf(field) === -1) {
+                    // not a field we want
+                    delete vm[field];
+                }
+            });
+        }
+
+        callback(null, vm);
+        return;
+    });
+};
+
+/**
+ * Call `vmadm create`.
+ *
+ * @param opts {Object} Options
+ * @param callback {Function} `function (err, info)`
+ */
+DummyVmadm.prototype.create = function vmCreate(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+
+    var self = this;
+    var payload = opts;
+    var req_id = opts.req_id;
+
+    delete payload.log;
+    delete payload.req_id;
+    delete payload.sysinfo;
+    delete payload.vmadmLogger;
+
+    self.log.trace({
+        req_id: req_id,
+        payload: payload
+    }, 'creating VM');
+
+    assert.optionalUuid(payload.uuid, 'payload.uuid');
+    if (!payload.hasOwnProperty('uuid')) {
+        payload.uuid = uuidv4();
+    }
+
+    payload.state = 'running';
+    payload.autoboot = true;
+    payload.create_timestamp = (new Date()).toISOString();
+
+    // TODO:
+    //
+    //   strip out properties we don't care about, validate ones we do.
+    //   convert disks to final versions
+    //   fill in other fields that happen in real vmadm
+    //
+
+    payload.nics = filterNics(payload.nics);
+
+    self._writeVm(payload, {}, function _onWrite(err) {
+        callback(err, {'uuid': payload.uuid});
+    });
+};
+
+/**
+ * Call `vmadm delete <uuid>`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} UUID of VM to delete
+ *      - include_dni {Boolean} If true, delete VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.delete = function vmDelete(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+    var filename;
+    var vmdir;
+
+    vmdir = path.join(self.serverRoot, self.serverUuid, 'vms');
+
+    self.log.trace({
+        req_id: opts.req_id,
+        uuid: opts.uuid
+    }, 'deleting VM');
+
+    assert.uuid(opts.uuid, 'opts.uuid');
+    filename = path.join(vmdir, opts.uuid + '.json');
+
+    vasync.pipeline({
+        funcs: [
+            // TODO: stop the instance, do any other cleanup
+            function _unlinkFile(_, cb) {
+                fs.unlink(filename, function _onUnlink(err) {
+                    if (err) {
+                        cb(err);
+                        return;
+                    }
+
+                    cb();
+                });
+            }
+        ]
+    }, function _onDeleted(err) {
+        self.log.info({err: err, uuid: opts.uuid}, 'delete VM');
+        callback(err);
+    });
+};
+
+/**
+ * Call `vmadm update`.
+ *
+ * @param opts {Object} VMADM update payload
+ *      - include_dni {Boolean} If true, update VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.update = function vmUpdate(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+    var payload = opts;
+    var req_id = opts.req_id;
+    var routes;
+
+    delete payload.log;
+    delete payload.req_id;
+    delete payload.vmadmLogger;
+
+    self.log.trace({
+        payload: payload,
+        req_id: req_id,
+        uuid: opts.uuid
+    }, 'updating VM');
+
+    self._loadVm({
+        uuid: opts.uuid
+    }, function _onLoad(err, vmobj) {
+        var idx;
+        var modified = false;
+        var SIMPLE_UPDATES = [
+            'alias',
+            'resolvers'
+        ];
+
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        /*
+         * For now we support updating:
+         *
+         *  - alias
+         *  - resolvers
+         *
+         *  - add_nics
+         *  - remove_nics
+         *  - update_nics
+         *
+         *  - set_routes
+         *  - remove_routes
+         *
+         */
+
+        // These properties have the same name and we just swap for whatever's
+        // in the payload.
+        for (idx = 0; idx < SIMPLE_UPDATES.length; idx++) {
+            if (payload.hasOwnProperty(SIMPLE_UPDATES[idx])) {
+                vmobj[SIMPLE_UPDATES[idx]] = payload[SIMPLE_UPDATES[idx]];
+                modified = true;
+            }
+        }
+
+        // To match vmadm, we set_routes before remove_routes
+        if (payload.hasOwnProperty('set_routes')) {
+            routes = Object.keys(payload.set_routes);
+            if (!vmobj.hasOwnProperty('routes')) {
+                vmobj.routes = {};
+            }
+            for (idx = 0; idx < routes.length; idx++) {
+                vmobj.routes[routes[idx]] = payload.set_routes[routes[idx]];
+            }
+        }
+
+        if (payload.hasOwnProperty('remove_routes') && vmobj.routes) {
+            routes = Object.keys(vmobj.routes);
+            for (idx = 0; idx < routes.length; idx++) {
+                if (vmobj.routes.hasOwnProperty(routes[idx])) {
+                    modified = true;
+                    delete vmobj.routes[routes[idx]];
+                }
+            }
+        }
+
+        if (payload.hasOwnProperty('add_nics') ||
+            payload.hasOwnProperty('remove_nics') ||
+            payload.hasOwnProperty('update_nics')) {
+
+            if (rebuildNics(vmobj, payload)) {
+                modified = true;
+            }
+        }
+
+        if (modified) {
+            self._writeVm(vmobj, {
+                atomicReplace: true
+            }, function _onWrite(writeErr) {
+                callback(writeErr);
+            });
+        } else {
+            callback();
+        }
+    });
+};
+
+/**
+ * Call `vmadm reboot <uuid>`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} UUID of VM to reboot
+ *      - force {Boolean} Whether to force the reboot.
+ *      - include_dni {Boolean} If true, reboot VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.reboot = function vmReboot(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+    var args = [];
+
+    if (opts.force) {
+        args.push('-F');
+    }
+
+    self.log.trace({
+        args: args,
+        force: Boolean(opts.force),
+        req_id: opts.req_id,
+        uuid: opts.uuid
+    }, 'rebooting VM');
+
+    vasync.pipeline({
+        funcs: [
+            function stepShutdown(_, next) {
+                self._updateVmState({
+                    autoboot: false,
+                    state: 'shutting_down',
+                    uuid: opts.uuid
+                }, next);
+            },
+            function stepDown(_, next) {
+                self._updateVmState({
+                    state: 'stopped',
+                    uuid: opts.uuid
+                }, next);
+            },
+            function stepBoot(_, next) {
+                self._updateVmState({
+                    autoboot: true,
+                    state: 'running',
+                    uuid: opts.uuid
+                }, next);
+            }
+        ]
+    }, function afterPipeline(err) {
+        callback(err);
+    });
+};
+
+/**
+ * Call `vmadm lookup -j`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} The VM uuid.
+ * @param vmopts {Object} Optional vm options
+ *      - fields {Array} Return only the keys give in `fields` array
+ *      - include_dni {Boolean} If true, return VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err, vms)`
+ */
+DummyVmadm.prototype.lookup = function vmLookup(search, opts, callback) {
+    assert.object(search, 'search');
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+
+    self.log.info({
+        req_id: opts.req_id,
+        search: search
+    }, 'lookup VMs');
+
+    // XXX can't we also specify fields in opts?
+
+    self._loadVms({}, function _onLoadVms(err, loadedVms) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        if (JSON.stringify(search) === '{}') {
+            // no search, just return all VMs
+            callback(null, loadedVms);
+            return;
+        }
+
+        assert.ok(false, 'Don\'t yet know how to handle search: ' +
+            JSON.stringify(search));
+    });
+};
+
+/**
+ * Call `vmadm start <uuid>`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} UUID of VM to start
+ *      - include_dni {Boolean} If true, start VMs that have do_not_inventory
+ *        set. default: false.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.start = function vmStart(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+
+    self.log.trace({
+        req_id: opts.req_id,
+        uuid: opts.uuid
+    }, 'start VM');
+
+    self._updateVmState({
+        autoboot: true,
+        state: 'running',
+        uuid: opts.uuid
+    }, callback);
+};
+
+/**
+ * Call `vmadm stop <uuid>`.
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} UUID of VM to stop
+ *      - force {Boolean} Whether to force the stop
+ *      - include_dni {Boolean} If true, stop VMs that have do_not_inventory
+ *        set. default: false.
+ *      - timeout {Number} If set, timeout in seconds between sending SIGTERM
+ *        and SIGKILL when stopping docker containers.
+ * @param callback {Function} `function (err)`
+ */
+DummyVmadm.prototype.stop = function vmStop(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.optionalString(opts.req_id, 'opts.req_id');
+    assert.optionalNumber(opts.timeout, 'opts.timeout');
+    assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalBool(opts.include_dni, 'opts.include_dni');
+
+    var self = this;
+
+    self.log.trace({
+        req_id: opts.req_id,
+        uuid: opts.uuid
+    }, 'stop VM');
+
+    self._updateVmState({
+        autoboot: false,
+        state: 'stopped',
+        uuid: opts.uuid
+    }, callback);
+};
+
+function loadVmMap(_self, callback) {
+    _self._loadVms({}, function _onLoadVms(err, loadedVms) {
+        var idx;
+        var vms = {};
+
+        if (!err) {
+            for (idx = 0; idx < loadedVms.length; idx++) {
+                vms[loadedVms[idx].uuid] = loadedVms[idx];
+            }
+        }
+
+        callback(err, vms);
+    });
+}
+
+/*
+ * Wrapper around `vmadm events -jr [uuid]`
+ *
+ * @param opts {Object} Options
+ *      - uuid {String} UUID of VM to watch, if unset all VMs are watched
+ *      - name {String} Identifier string for debugging purposes, this will be
+ *      used to construct the user-agent sent to vminfod
+ * @param handler {Function} `function (ev)`
+ *      - called when an event is seen
+ * @param callback {Function} `function (err, obj)`
+ *      - called when the stream is ready, or failed to start
+ *      - err {Error} set if an error occured that means the stream cannot be
+ *      created
+ *      - stop {Function} function to stop the event stream
+ * @return vs {VmadmCLIEventStream}
+ *      - Can be used to listen for errors, ex: `vs.on('error', ...)`
+ */
+DummyVmadm.prototype.events = function vmEvents(_opts, handler, callback) {
+    var self = this;
+
+    var added = [];
+    var changed = [];
+    var changes;
+    var idx;
+    var removed = [];
+    var vmdiff;
+    var vmdir = path.join(self.serverRoot, self.serverUuid, 'vms');
+    var vmuuid;
+
+    self.loadingVms = {};
+    self.vmCache = {};
+
+    // We watch only the vmdir directory, and assume that any changes to files
+    // will happen via an atomic replace (since that's what we do).
+    self.vmdirWatch = fs.watch(vmdir, {}, function _onDirEvent(_evt) {
+        // Called whenever the directory changes (files added/removed)
+
+        loadVmMap(self, function _onLoadVms(err, vms) {
+            assert.ifError(err);
+
+            vmdiff = diff(self.vmCache, vms);
+
+            self.log.trace({diff: vmdiff}, 'vms diff');
+
+            for (idx = 0; idx < vmdiff.length; idx++) {
+                vmuuid = vmdiff[idx].path[0];
+
+                assert.uuid(vmuuid, 'vmuuid');
+
+                if (vmdiff[idx].action === 'added' &&
+                    vmdiff[idx].path.length === 1) {
+
+                    if (added.indexOf(vmuuid) === -1) {
+                        added.push(vmuuid);
+                    }
+                } else if (vmdiff[idx].action === 'removed' &&
+                    vmdiff[idx].path.length === 1) {
+
+                    if (removed.indexOf(vmuuid) === -1) {
+                        removed.push(vmuuid);
+                    }
+                } else if (vmdiff[idx].action === 'changed' ||
+                    vmdiff[idx].action === 'added' ||
+                    vmdiff[idx].action === 'removed') {
+
+                    // Here we had either a top-level property of a VM change,
+                    // or a property added/removed from a VM, all of these are
+                    // changes as far as the VM is concerned.
+
+                    if (changed.indexOf(vmuuid) === -1) {
+                        changed.push(vmuuid);
+                    }
+                } else {
+                    assert.fail('unknown action: ' + vmdiff[idx].action);
+                }
+            }
+
+            self.log.trace({
+                added: added,
+                changed: changed,
+                removed: removed
+            }, 'diff of vm dir');
+
+            for (idx = 0; idx < added.length; idx++) {
+                self.log.info({vmUuid: added[idx]}, 'new VM');
+                self._dispatchEvent('create', added[idx], {}, handler);
+            }
+            for (idx = 0; idx < removed.length; idx++) {
+                self.log.info({vmUuid: removed[idx]}, 'deleted VM');
+                self._dispatchEvent('delete', removed[idx], {}, handler);
+            }
+            for (idx = 0; idx < changed.length; idx++) {
+                changes = diff(self.vmCache[changed[idx]], vms[changed[idx]]);
+                self.log.info({
+                    vmUuid: changed[idx],
+                    changes: changes
+                }, 'changed VM');
+                self._dispatchEvent('modify', changed[idx], {
+                    changes: changes
+                }, handler);
+            }
+
+            added = [];
+            changed = [];
+            removed = [];
+
+            // Replace with updated list, so next time we only find changes from
+            // this time.
+            self.vmCache = vms;
+        });
+
+    });
+
+    // We do this with setImmediate because the node-vmadm callers depend on
+    // getting the return value and using it before the callback runs.
+    setImmediate(function _eventuallyCallCallback() {
+        loadVmMap(self, function _onLoadVms(err, vms) {
+            assert.ifError(err);
+
+            self.vmCache = vms;
+
+            callback(null, {
+                ev: {
+                    date: (new Date()).toISOString(),
+                    type: 'ready',
+                    vms: vms
+                },
+                stop: function _stop() {
+                    self._deleteAllWatchers();
+                }
+            });
+        });
+    });
+
+    return new VmadmCLIEventStream();
+};
+
+// --- dummy helper methods
+
+DummyVmadm.prototype._deleteAllWatchers = function _deleteAllWatchers() {
+    var self = this;
+
+    self.log.trace('deleting vmdir watch');
+    self.vmdirWatch.close();
+    delete self.vmdirWatch;
+};
+
+DummyVmadm.prototype._dispatchEvent =
+function _dispatchEvent(evtName, zonename, opts, handler) {
+    assert.string(evtName, 'evtName');
+    assert.uuid(zonename, 'zonename');
+    assert.object(opts, 'opts');
+    assert.func(handler, 'handler');
+
+    if (evtName === 'modify') {
+        assert.arrayOfObject(opts.changes, 'opts.changes');
+    }
+
+    var self = this;
+
+    if (self.loadingVms[zonename]) {
+        self.log.trace({zonename: zonename}, 'dispatchEvent skipping zone'
+            + ' which is already being loaded');
+        return;
+    }
+    self.loadingVms[zonename] = (new Date()).getTime();
+
+    self._loadVm({
+        uuid: zonename
+    }, function _onVmLoad(err, vmobj) {
+        var handlerObj;
+
+        delete self.loadingVms[zonename];
+
+        if (err && err.code === 'ENOENT') {
+            if (evtName === 'delete') {
+                handlerObj = {
+                    type: 'delete',
+                    vm: {},
+                    zonename: zonename
+                };
+                handler(handlerObj);
+            } else {
+                self.log.error({evtname: evtName, zonename: zonename},
+                    'VM unexpectedly disappeared while loading after event');
+            }
+            return;
+        }
+
+       if (err) {
+            self.log.error({err: err, zonename: zonename}, 'error loading VM');
+            return;
+        }
+
+        handlerObj = {
+            changes: (evtName === 'modify') ? opts.changes : undefined,
+            type: evtName,
+            vm: vmobj,
+            zonename: zonename
+        };
+        handler(handlerObj);
+    });
+};
+
+DummyVmadm.prototype._addSystemProperties =
+function _addSystemProperties(arg, callback) {
+    // we know we loaded sysinfo if we got here
+    assert.object(arg, 'arg');
+    assert.object(arg.vmobj, 'arg.vmobj');
+
+    var self = this;
+
+    arg.vmobj.server_uuid = self.sysinfo.UUID;
+    arg.vmobj.datacenter_name = self.sysinfo['Datacenter Name'];
+    arg.vmobj.platform_buildstamp = self.sysinfo['Live Image'];
+
+    // zpool?
+
+    callback();
+};
+
+DummyVmadm.prototype._addInstanceExecutionInfo =
+function _addInstanceExecutionInfo(arg, callback) {
+    assert.object(arg, 'arg');
+    assert.object(arg.vmobj, 'arg.vmobj');
+
+    var last_modified;
+
+    // XXX we just make stuff up for now
+
+    if (arg.vmobj.state === undefined) {
+        arg.vmobj.state = 'running';
+    }
+
+    if (arg.vmobj.state === 'running') {
+        last_modified = (new Date(arg.vmobj.last_modified)).getTime();
+        arg.vmobj.pid = Math.floor(last_modified / 1000) % 100000;
+        if (arg.vmobj.boot_timestamp === undefined) {
+            arg.vmobj.boot_timestamp = arg.vmobj.last_modified;
+        }
+    } else if (arg.vmobj.state === 'stopped') {
+        arg.vmobj.exit_status = 0;
+        if (arg.vmobj.exit_timestamp === undefined) {
+            arg.vmobj.exit_timestamp = arg.vmobj.last_modified;
+        }
+    }
+
+    callback();
+};
+
+DummyVmadm.prototype._addHardcodedProperties =
+function _addHardcodedProperties(arg, callback) {
+    // these make no sense here, so we hardcode them to something for compat
+    assert.object(arg, 'arg');
+    assert.object(arg.vmobj, 'arg.vmobj');
+
+    assert.uuid(arg.vmobj.uuid, 'arg.vmobj.uuid');
+    arg.vmobj.zonename = arg.vmobj.uuid;
+
+    assert.string(arg.vmobj.state, 'arg.vmobj.state');
+    arg.vmobj.zone_state = arg.vmobj.state;
+
+    assert.optionalNumber(arg.vmobj.pid, 'arg.vmobj.pid');
+    if (arg.vmobj.pid !== undefined) {
+        arg.vmobj.zoneid = arg.vmobj.pid;
+    }
+
+    callback();
+};
+
+DummyVmadm.prototype._loadTimestamp = function _loadTimestamp(arg, callback) {
+    assert.object(arg, 'arg');
+    assert.string(arg.file, 'arg.file');
+    assert.object(arg.vmobj, 'arg.vmobj');
+
+    fs.stat(arg.file, function _onStat(err, stats) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        arg.vmobj.last_modified = stats.mtime.toISOString();
+
+        callback();
+    });
+};
+
+DummyVmadm.prototype._ensureSysinfoLoaded =
+function _ensureSysinfoLoaded(arg, callback) {
+    assert.object(arg, 'arg');
+
+    var self = this;
+    var fname = path.join(self.serverRoot, self.serverUuid, 'sysinfo.json');
+
+    if (self.sysinfo !== undefined) {
+        // already have sysinfo
+        callback();
+        return;
+    }
+
+    fs.readFile(fname, 'utf8', function onRead(err, data) {
+        if (err) {
+            callback(err);
+        } else {
+            try {
+                self.sysinfo = JSON.parse(data);
+            } catch (jsonErr) {
+                callback(jsonErr);
+                return;
+            }
+
+            assertSysinfo(self.sysinfo);
+            callback();
+        }
+    });
+};
+
+DummyVmadm.prototype._loadVm = function _loadVm(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.uuid, 'opts.uuid');
+
+    var self = this;
+    var filename = path.join(self.serverRoot, self.serverUuid,
+        'vms', opts.uuid + '.json');
+    var vmobj;
+
+    fs.readFile(filename, function _onRead(err, data) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        // XXX will throw on bad data
+        vmobj = JSON.parse(data.toString());
+
+        vasync.pipeline({
+            arg: {
+                file: filename,
+                vmobj: vmobj
+            },
+            funcs: [
+                self._ensureSysinfoLoaded.bind(self),
+                self._loadTimestamp.bind(self),
+                self._addInstanceExecutionInfo.bind(self),
+                self._addSystemProperties.bind(self),
+                self._addHardcodedProperties.bind(self)
+            ]
+        }, function _afterPipeline(pipelineErr) {
+            callback(pipelineErr, vmobj);
+        });
+    });
+};
+
+DummyVmadm.prototype._loadVms = function loadVms(_opts, callback) {
+    var self = this;
+    var vmdir;
+
+    vmdir = path.join(self.serverRoot, self.serverUuid, 'vms');
+
+    fs.readdir(vmdir, function _onReadDir(err, files) {
+        var filename;
+        var idx;
+        var loadedVms = [];
+        var matches;
+        var toLoad = [];
+
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        for (idx = 0; idx < files.length; idx++) {
+            filename = files[idx];
+
+            matches = filename.match(/^([a-f0-9-]*).json$/);
+            if (matches) {
+                toLoad.push(matches[1]);
+            } else {
+                self.log.debug({filename: filename}, 'Ignoring non-zone file');
+            }
+        }
+
+        vasync.forEachParallel({
+            func: function _loadVm(uuid, cb) {
+                self._loadVm({
+                    serverRoot: self.serverRoot,
+                    uuid: uuid
+                }, function _onLoadVm(_loadErr, vm) {
+                    if (_loadErr) {
+                        if (_loadErr.code === 'ENOENT') {
+                            cb();
+                            return;
+                        }
+                        cb(_loadErr);
+                        return;
+                    }
+
+                    loadedVms.push(vm);
+                    cb();
+                });
+            },
+            inputs: toLoad
+        }, function _afterLoading(loadErr, results) {
+            callback(loadErr, loadedVms);
+        });
+    });
+};
+
+DummyVmadm.prototype._writeVm =
+function _writeVm(vmobj, opts, callback) {
+    assert.object(vmobj, 'vmobj');
+    assert.object(opts, 'opts');
+    assert.optionalBool(opts.atomicReplace, 'opts.atomicReplace');
+    assert.func(callback);
+
+    var self = this;
+    var fd;
+    var filename;
+    var finalFilename;
+    var vmdir;
+
+    vmdir = path.join(self.serverRoot, self.serverUuid, 'vms');
+    filename = path.join(vmdir, vmobj.uuid + '.json');
+
+    if (opts.atomicReplace) {
+        finalFilename = filename;
+        filename = filename + '.' + process.pid;
+    }
+
+    vasync.pipeline({
+        funcs: [
+            function _openFile(_, cb) {
+                fs.open(filename, 'wx', function _onOpen(err, openedFd) {
+                    if (err) {
+                        cb(err);
+                        return;
+                    }
+
+                    fd = openedFd;
+                    cb();
+                });
+            }, function _writeThenCloseFile(_, cb) {
+                var buf = new Buffer(JSON.stringify(vmobj, null, 2) + '\n');
+
+                fs.write(fd, buf, 0, buf.length, null, function _onWrite(err) {
+                    if (err) {
+                        cb(err);
+                        return;
+                    }
+                    fs.close(fd, function _onWritten() {
+                        cb();
+                    });
+                });
+            }, function _atomicReplace(_, cb) {
+                if (!opts.atomicReplace) {
+                    cb();
+                    return;
+                }
+
+                fs.rename(filename, finalFilename, cb);
+            }
+        ]
+    }, function _onWroteVm(err) {
+        self.log.info({err: err, uuid: vmobj.uuid}, 'wrote VM');
+        callback(err);
+    });
+};
+
+DummyVmadm.prototype._updateVmState = function _updateVmState(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.uuid, 'opts.uuid');
+    assert.string(opts.state, 'opts.state');
+    assert.optionalBool(opts.autoboot, 'opts.autoboot');
+
+    var self = this;
+
+    self._loadVm({
+        uuid: opts.uuid
+    }, function _onLoad(err, vmobj) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        if (opts.hasOwnProperty('autoboot')) {
+            vmobj.autoboot = opts.autoboot;
+        }
+        vmobj.state = opts.state;
+
+        self._writeVm(vmobj, {
+            atomicReplace: true
+        }, function _onWrite(writeErr) {
+            callback(writeErr);
+        });
+    });
+};
+
+// --- private helper functions
+
+
+function assertSysinfo(sysinfo) {
+    assert.object(sysinfo, 'sysinfo');
+    assert.uuid(sysinfo.UUID, 'sysinfo.UUID');
+    assert.string(sysinfo['Datacenter Name'], 'sysinfo[\'Datacenter Name\']');
+    assert.string(sysinfo['Live Image'], 'sysinfo[\'Live Image\']');
+}
+
+
+/*
+ * Converts a dotted IPv4 address (eg: 1.2.3.4) to its integer value
+ */
+// Copied from smartos-live/src/vm/node_modules/ip.js
+function addressToNumber(addr) {
+    if (!addr || !net.isIPv4(addr)) {
+        return null;
+    }
+
+    var octets = addr.split('.');
+    return Number(octets[0]) * 16777216
+        + Number(octets[1]) * 65536
+        + Number(octets[2]) * 256
+        + Number(octets[3]);
+}
+
+/*
+ * Converts netmask to CIDR (/xx) bits
+ */
+// Copied from smartos-live/src/vm/node_modules/ip.js
+function netmaskToBits(netmask) {
+    var num = ~addressToNumber(netmask);
+    var b = 0;
+    for (b = 0; b < 32; b++) {
+        if (num === 0) {
+            break;
+        }
+        num = num >>> 1;
+    }
+    return 32 - b;
+}
+
+// Copied from smartos-live/src/vm/node_modules/utils.js
+function isPrivateIP(str) {
+    if (!net.isIPv4(str)) {
+        return false;
+    }
+
+    function inRange(start, end, prospect) {
+        if (addressToNumber(start) <= addressToNumber(prospect) &&
+            addressToNumber(prospect) <= addressToNumber(end)) {
+
+            return true;
+        }
+        return false;
+    }
+
+    if (inRange('10.0.0.0', '10.255.255.255', str)) {
+        return true;
+    } else if (inRange('172.16.0.0', '172.31.255.255', str)) {
+        return true;
+    } else if (inRange('192.168.0.0', '192.168.255.255', str)) {
+        return true;
+    }
+
+    return false;
+}
+
+// Filters an array of nic-like objects and returns an array of NIC objects
+// with only known properties.
+function filterNics(nics) {
+    assert.arrayOfObject(nics, 'nics');
+
+    var filteredNic;
+    var nic;
+    var nicIdx;
+    var nicPropKeys;
+    var prop;
+    var propIdx;
+    var results = [];
+
+    for (nicIdx = 0; nicIdx < nics.length; nicIdx++) {
+        filteredNic = {};
+        nic = nics[nicIdx];
+
+        nicPropKeys = Object.keys(nic);
+        for (propIdx = 0; propIdx < nicPropKeys.length; propIdx++) {
+            prop = nicPropKeys[propIdx];
+
+            if (NIC_PROPERTIES.indexOf(prop) !== -1) {
+                filteredNic[prop] = nic[prop];
+            }
+        }
+
+        // This will modify the NIC to deal with ip/ips, gateway/gateways
+        handleIpsMess(filteredNic);
+
+        results.push(filteredNic);
+    }
+
+    return (results);
+}
+
+// Deals with the ip/ips, gateway/gateways mess. Modifies nic in-place.
+function handleIpsMess(nic) {
+
+    // Deal with multiple IP stuff
+    if (nic.hasOwnProperty('ip') && !nic.hasOwnProperty('ips')) {
+        assert.string(nic.netmask, 'nic.netmask');
+        nic.ips = [nic.ip + '/' + netmaskToBits(nic.netmask)];
+    }
+    if (nic.hasOwnProperty('ips') &&
+        nic.ips.length > 0 &&
+        !nic.hasOwnProperty('ip')) {
+
+        nic.ip = nic.ips[0].split('/')[0];
+    }
+
+    // Now multiple gateways stuff
+    if (nic.hasOwnProperty('gateway') && !nic.hasOwnProperty('gateways')) {
+        nic.gateways = [nic.gateway];
+    }
+    if (nic.hasOwnProperty('gateways') &&
+        nic.gateways.length > 0 &&
+        !nic.hasOwnProperty('gateway')) {
+
+        nic.gateway = nic.gateways[0];
+    }
+}
+
+// Returns true if vmobj.nics was modified, false otherwise.
+function rebuildNics(vmobj, payload) {
+    assert.object(vmobj, 'vmobj');
+    assert.object(payload, 'payload');
+
+    var addingPrimary = false;
+    var changingPrimary = false;
+    var modified = false;
+    var nic;
+    var nicIdx;
+    var nicProp;
+    var nicProps;
+    var nicPropIdx;
+    var numNewPrimaries;
+    var oldNicIdx;
+    var privateCandidate;
+    var publicCandidate;
+    var removingPrimary = false;
+
+    if (payload.hasOwnProperty('add_nics')) {
+        payload.add_nics = filterNics(payload.add_nics);
+        for (nicIdx = 0; nicIdx < payload.add_nics.length; nicIdx++) {
+            nic = payload.add_nics[nicIdx];
+
+            // When adding nics, we remove any flags that are false, since false
+            // is the default.
+            for (nicPropIdx = 0; nicPropIdx < NIC_FLAGS.length; nicPropIdx++) {
+                nicProp = NIC_FLAGS[nicPropIdx];
+                if (nic.hasOwnProperty(nicProp) && nic[nicProp] === false) {
+                    delete nic[nicProp];
+                }
+            }
+
+            if (nic.primary) {
+                addingPrimary = true;
+            }
+        }
+    }
+
+    if (payload.hasOwnProperty('update_nics')) {
+        payload.update_nics = filterNics(payload.update_nics);
+        for (nicIdx = 0; nicIdx < payload.update_nics.length; nicIdx++) {
+            nic = payload.update_nics[nicIdx];
+
+            if (nic.primary) {
+                changingPrimary = true;
+            }
+        }
+    }
+
+    if (payload.hasOwnProperty('remove_nics')) {
+        vmobj.nics = vmobj.nics.filter(function _removeNics(_nic) {
+            if (payload.remove_nics.indexOf(_nic.mac) !== -1) {
+                // This is on the removal list, see if it was primary then
+                // mark for removal.
+                if (_nic.primary) {
+                    removingPrimary = true;
+                }
+                return false; // don't keep
+            }
+            return true; // keep
+        });
+    }
+
+    numNewPrimaries = 0;
+    if (addingPrimary || changingPrimary) {
+        // remove primary from any existing NICs
+        for (oldNicIdx = 0; oldNicIdx < vmobj.nics.length; oldNicIdx++) {
+            if (vmobj.nics[oldNicIdx].primary) {
+                delete vmobj.nics[oldNicIdx].primary;
+                modified = true;
+            }
+        }
+
+        // make sure only 1 new / updated nic is primary
+        if (payload.hasOwnProperty('add_nics')) {
+            for (nicIdx = 0; nicIdx < payload.add_nics.length; nicIdx++) {
+                if (payload.add_nics[nicIdx].primary) {
+                    numNewPrimaries++;
+                }
+            }
+        }
+        if (payload.hasOwnProperty('update_nics')) {
+            for (nicIdx = 0; nicIdx < payload.update_nics.length; nicIdx++) {
+                if (payload.update_nics[nicIdx].primary) {
+                    numNewPrimaries++;
+                }
+            }
+        }
+
+        // This is an error in the payload and it's not clear what we should
+        // do about it. Adding and updating nics to set more than 1 primary
+        // is not supported.
+        assert.ok((numNewPrimaries <= 1), 'should have at most 1 primary nic');
+    }
+
+    if (removingPrimary && numNewPrimaries === 0) {
+        // If we're removing the existing primary NIC, we need to set a new
+        // primary. We do what vmadm does: choose the first NIC that has a
+        // private IP, otherwise the first NIC with an IP at all.
+        for (oldNicIdx = 0; oldNicIdx < vmobj.nics.length; oldNicIdx++) {
+            if (isPrivateIP(vmobj.nics[oldNicIdx].ip)) {
+                if (privateCandidate === undefined) {
+                    privateCandidate = vmobj.nics[oldNicIdx];
+                } else if (publicCandidate === undefined) {
+                    publicCandidate = vmobj.nics[oldNicIdx];
+                }
+            }
+        }
+
+        if (privateCandidate !== undefined) {
+            privateCandidate.primary = true;
+            modified = true;
+        } else if (publicCandidate !== undefined) {
+            publicCandidate.primary = true;
+            modified = true;
+        }
+    }
+
+    if (payload.hasOwnProperty('add_nics')) {
+        vmobj.nics = vmobj.nics.concat(payload.add_nics);
+        modified = true;
+    }
+
+    if (payload.hasOwnProperty('update_nics')) {
+        for (oldNicIdx = 0; oldNicIdx < vmobj.nics.length; oldNicIdx++) {
+            for (nicIdx = 0; nicIdx < payload.update_nics.length; nicIdx++) {
+                if (vmobj.nics[oldNicIdx].mac ===
+                    payload.update_nics[nicIdx].mac) {
+
+                    // Take props from payload.update_nics[nicIdx] and set them
+                    // on vmobj.nics[oldNicIdx]
+                    nicProps = Object.keys(payload.update_nics[nicIdx]);
+                    for (nicPropIdx = 0; nicPropIdx < nicProps.length;
+                        nicPropIdx++) {
+
+                        nicProp = nicProps[nicPropIdx];
+
+                        // For boolean flags, we just remove if they're false.
+                        if (NIC_FLAGS.indexOf(nicProp) !== -1 &&
+                            payload.update_nics[nicIdx][nicProp] === false) {
+
+                            delete vmobj.nics[oldNicIdx][nicProp];
+                        } else {
+                            vmobj.nics[oldNicIdx][nicProp] =
+                                payload.update_nics[nicIdx][nicProp];
+                        }
+                        modified = true;
+                    }
+                }
+            }
+        }
+    }
+
+    return modified;
+}
+
+// -- event stream
+
+// This implementation detail is now exposed as of TRITON-571 so we have to do
+// this even though it makes no sense.
+function VmadmCLIEventStream(_opts) {
+}
+util.inherits(VmadmCLIEventStream, stream.Transform);
+
+module.exports = DummyVmadm;
diff --git a/lib/index.sunos.js b/lib/index.sunos.js
index d97e8b5..c860e70 100644
--- a/lib/index.sunos.js
+++ b/lib/index.sunos.js
@@ -393,7 +393,8 @@ vmadm.create = function vmCreate(opts, callback) {
         var info = {};
 
         if (result.code !== 0 || result.signal !== null) {
-            var lastLine = '', lines = '';
+            var lastLine = '';
+            var lines = '';
             if (stderrLines.length > 1) {
                 lastLine = stderrLines[stderrLines.length - 1];
                 lines = stderrLines.join('\n').trim().substr(
@@ -1338,7 +1339,7 @@ util.inherits(VmadmCLIEventStream, stream.Transform);
  * The transform method to process vmadm stdout line-by-line
  */
 VmadmCLIEventStream.prototype._transform =
-    function _transform(chunk, encoding, cb) {
+    function _transform(chunk, _encoding, cb) {
 
     var self = this;
 
diff --git a/package.json b/package.json
index 03bce88..3fd46c0 100644
--- a/package.json
+++ b/package.json
@@ -1,18 +1,33 @@
 {
   "name": "vmadm",
-  "version": "1.1.0",
+  "version": "1.2.0",
   "description": "Node.js wrapper around SmartOS vmadm(1M)",
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/joyent/node-vmadm.git"
+  },
   "main": "lib/index.js",
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
   "dependencies": {
-    "assert-plus": "0.1.5",
-    "lstream": "0.0.4"
+    "assert-plus": "1.0.0",
+    "lstream": "0.0.4",
+    "vasync": "2.2.0",
+    "uuid": "^3.3.2"
+  },
+  "devDependencies": {
+    "bunyan": "^1.8.12",
+    "eslint": "4.19.1",
+    "fs-extra": "5.0.0",
+    "eslint-plugin-joyent": "~2.0.0",
+    "mock-fs": "4.5.x",
+    "tap": "^12.0.1"
   },
   "author": "Joyent (joyent.com)",
   "directories": {
     "lib": "lib"
   },
-  "license": "MPL-2.0"
+  "license": "MPL-2.0",
+  "engines": ["node >=4.0.0"]
 }
diff --git a/test/unit/dummy.test.js b/test/unit/dummy.test.js
new file mode 100644
index 0000000..00468a7
--- /dev/null
+++ b/test/unit/dummy.test.js
@@ -0,0 +1,436 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018 Joyent, Inc.
+ */
+'use strict';
+
+const fs = require('fs');
+const os = require('os');
+const path = require('path');
+
+const fse = require('fs-extra');
+const mockfs = require('mock-fs');
+const tap = require('tap');
+const uuidv1 = require('uuid/v1');
+
+const DummyVmadm = require('../../lib/index.dummy');
+const testutil = require('./testutil');
+
+const SERVER_ROOT = '/test/servers';
+const SERVER_UUID = 'a54cf694-4e7d-4fa4-a697-ae949b91a957';
+
+
+function testSubject(serverRoot) {
+    return new DummyVmadm({
+        log: testutil.createBunyanLogger(tap),
+        serverRoot: serverRoot,
+        serverUuid: SERVER_UUID,
+        sysinfo: {
+            'Datacenter Name': 'testdc',
+            'Live Image': '20180806T115631Z',
+            'UUID': SERVER_UUID
+        }
+    });
+}
+
+const payloads = {
+    'web00': {
+        'brand': 'joyent',
+        'image_uuid': '643de2c0-672e-11e7-9a3f-ff62fd3708f8',
+        'alias': 'web00',
+        'hostname': 'web00',
+        'max_physical_memory': 512,
+        'quota': 20,
+        'resolvers': ['8.8.8.8'],
+        'nics': [
+            {
+                'nic_tag': 'admin',
+                'ip': '10.88.88.52',
+                'netmask': '255.255.255.0',
+                'gateway': '10.88.88.2'
+            }
+        ]
+    },
+    'web01': {
+        'brand': 'joyent',
+        'image_uuid': '643de2c0-672e-11e7-9a3f-ff62fd3708f8',
+        'alias': 'web01',
+        'hostname': 'web01',
+        'max_physical_memory': 512,
+        'quota': 20,
+        'resolvers': ['8.8.8.8'],
+        'nics': [
+            {
+                'nic_tag': 'admin',
+                'ip': '10.88.88.53',
+                'netmask': '255.255.255.0',
+                'gateway': '10.88.88.2'
+            }
+        ]
+    },
+    'ghost': {
+        'do_not_inventory': true,
+        'brand': 'joyent',
+        'image_uuid': '643de2c0-672e-11e7-9a3f-ff62fd3708f8',
+        'alias': 'ghost',
+        'hostname': 'ghost',
+        'max_physical_memory': 512,
+        'quota': 20,
+        'resolvers': ['8.8.8.8'],
+        'nics': [
+            {
+                'nic_tag': 'admin',
+                'ip': '10.88.88.50',
+                'netmask': '255.255.255.0',
+                'gateway': '10.88.88.2'
+            }
+        ]
+    }
+};
+
+
+tap.test('DummyVmadm', function (suite) {
+    suite.afterEach(mockfs.restore);
+
+    suite.test('init', function (t) {
+        t.plan(0);
+        mockfs({[SERVER_ROOT]: {}});
+        testSubject();
+        t.end();
+    });
+
+    suite.test('simple create', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(7);
+        vmadm.create(payloads.web00, function onCreate(err, info) {
+            t.error(err);
+            t.ok(info);
+            t.ok(info.uuid);
+            const uuid = info.uuid;
+            const vmFname = path.join(SERVER_ROOT, SERVER_UUID, 'vms',
+                                      uuid + '.json');
+            t.ok(fs.existsSync(vmFname));
+            fs.readFile(vmFname, 'utf8', function onRead(err2, data) {
+                t.error(err2);
+                const vm = JSON.parse(data);
+                t.equal(payloads.web00.uuid, uuid);
+                t.equal(payloads.web00.hostname, vm.hostname);
+                t.end();
+            });
+        });
+    });
+
+    suite.test('vm does not exist', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(2);
+        const uuid = uuidv1();
+        vmadm.exists({'uuid': uuid}, function onExists(err, exists) {
+            t.error(err);
+            t.notOk(exists);
+            t.end();
+        });
+    });
+
+    suite.test('create->exists', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(5);
+        vmadm.create(payloads.web01, function onCreate(err, info) {
+            t.error(err);
+            t.ok(info);
+            t.ok(info.uuid);
+            const uuid = info.uuid;
+            vmadm.exists({'uuid': uuid}, function onExists(err2, exists) {
+                t.error(err2);
+                t.ok(exists);
+                t.end();
+            });
+        });
+    });
+
+    suite.test('create->exists (dni)', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(7);
+        vmadm.create(payloads.ghost, function onCreate(err, info) {
+            t.error(err);
+            t.ok(info);
+            t.ok(info.uuid);
+            const uuid = info.uuid;
+            vmadm.exists({'uuid': uuid}, function onExists(err2, exists) {
+                t.error(err2);
+                t.notOk(exists);
+                vmadm.exists({'uuid': uuid, include_dni: true},
+                             function onExistsGhost(err3, existsGhost) {
+                                 t.error(err3);
+                                 t.ok(existsGhost);
+                                 t.end();
+                             });
+            });
+        });
+    });
+
+    suite.test('simple delete', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(6);
+        vmadm.create(payloads.web00, function onCreate(err, info) {
+            t.error(err);
+            t.ok(info);
+            t.ok(info.uuid);
+            const uuid = info.uuid;
+            vmadm.delete({'uuid': uuid}, function onDelete(err2) {
+                t.error(err2);
+                vmadm.exists({'uuid': uuid}, function onExists(err3, exists) {
+                    t.error(err3);
+                    t.notOk(exists);
+                    t.end();
+                });
+            });
+        });
+    });
+
+    suite.test('empty lookup', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(3);
+        vmadm.lookup({}, {}, function onLookup(lookupErr, vms) {
+            t.error(lookupErr);
+            t.ok(vms);
+            t.equal(vms.length, 0);
+            t.end();
+        });
+    });
+
+    suite.test('multi-create->lookup', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(10);
+        vmadm.create(payloads.web00, function onCreate(err, info) {
+            t.error(err);
+            t.ok(info);
+            t.ok(info.uuid);
+            const firstUuid = info.uuid;
+            vmadm.create(payloads.web01, function onCreate2(err2, info2) {
+                t.error(err2);
+                t.ok(info2);
+                t.ok(info2.uuid);
+                const secondUuid = info2.uuid;
+                vmadm.lookup({}, {}, function onLookup(lookupErr, vms) {
+                    t.error(lookupErr);
+                    t.ok(vms);
+                    t.equal(vms.length, 2);
+                    const foundUuids = vms.map(function (vm) {
+                        return vm.uuid;
+                    }).sort();
+                    t.same(foundUuids, [firstUuid, secondUuid].sort());
+                    t.end();
+                });
+            });
+        });
+    });
+
+    suite.test('stop', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(6);
+        vmadm.create(payloads.web00, function onCreate(err, info) {
+            t.error(err);
+            // Is the initial state part of the contract, or an implementation
+            // detail?
+            t.notEqual(info.state, 'stopped');
+            const uuid = info.uuid;
+            vmadm.stop({'uuid': uuid}, function onStop(err2) {
+                t.error(err2);
+                vmadm.load({'uuid': uuid}, function onLoad(err3, vm) {
+                    t.error(err3);
+                    t.ok(vm);
+                    t.equal(vm.state, 'stopped');
+                    t.end();
+                });
+            });
+        });
+    });
+
+    suite.test('stop->start', function (t) {
+        mockfs({[path.join(SERVER_ROOT, SERVER_UUID, 'vms')]: {}});
+        const vmadm = testSubject(SERVER_ROOT);
+        t.plan(10);
+        vmadm.create(payloads.web00, function onCreate(err, info) {
+            t.error(err);
+            // Is the initial state part of the contract, or an implementation
+            // detail?
+            t.notEqual(info.state, 'stopped');
+            const uuid = info.uuid;
+            vmadm.stop({'uuid': uuid}, function onStop(err2) {
+                t.error(err2);
+                vmadm.load({'uuid': uuid}, function onLoad(err3, vm) {
+                    t.error(err3);
+                    t.ok(vm);
+                    t.equal(vm.state, 'stopped');
+                    vmadm.start({'uuid': uuid}, function onStart(err4) {
+                        t.error(err4);
+                        vmadm.load({'uuid': uuid},
+                                   function onReload(err5, vmAgain) {
+                                       t.error(err5);
+                                       t.ok(vmAgain);
+                                       t.equal(vmAgain.state, 'running');
+                                       t.end();
+                                   });
+                    });
+                });
+            });
+        });
+    });
+
+
+    // reboot (need events to test?
+    suite.end();
+});
+
+// No mock-fs support for fs.watch:
+//   https://github.com/tschaub/mock-fs/issues/246
+tap.test('DummyVmadmRealFs', function (suite) {
+    // Serialize these tests since they use the real fs
+    suite.jobs = 1;
+    const testDir = path.join(os.tmpdir(), SERVER_ROOT, SERVER_UUID, 'vms');
+    suite.beforeEach(function (cb) {
+        fse.emptyDir(testDir, cb);
+    });
+    // Why does this make everything explode?
+    // suite.afterEach(function(cb) {
+    //     fse.remove(testDir, cb);
+    // });
+
+    suite.test('events-ready', function (t) {
+        const vmadm = testSubject(path.join(os.tmpdir(), SERVER_ROOT));
+        t.plan(2);
+        vmadm.events({name: 'unit-test:events-ready'},
+                     function handler() {},
+                     function vmadmEventsReady(err, obj) {
+                         t.error(err);
+                         t.ok(obj);
+                         obj.stop();
+                         t.end();
+                     });
+    });
+
+    suite.test('events->create', function (t) {
+        const vmadm = testSubject(path.join(os.tmpdir(), SERVER_ROOT));
+        t.plan(8);
+
+        // TODO: Is this really what we call it?
+        let streamStop = null;
+        let uuid = null;
+        vmadm.events({name: 'unit-test:events->create'},
+                     function handler(evt) {
+                         t.ok(evt);
+                         t.equal(evt.type, 'create');
+                         t.equal(evt.vm.uuid, uuid);
+                         streamStop();
+                         t.end();
+                     },
+                     // NOTE: This is called before the handler above
+                     function vmadmEventsReady(readyErr, obj) {
+                         t.error(readyErr);
+                         t.ok(obj);
+                         streamStop = obj.stop;
+                         // TODO: Is this actually guaranteed to fire before the
+                         // handler?
+                         vmadm.create(payloads.web00, function onC(err, info) {
+                             t.error(err);
+                             t.ok(info);
+                             t.ok(info.uuid);
+                             uuid = info.uuid;
+                         });
+
+                     });
+    });
+
+    //
+    // This test starts a vmadm.events watcher, and when that emits the "ready"
+    // event, creates a VM (A). From that point, each event seen by the handler
+    // triggers another action which triggers another event until the final
+    // action is triggered and things are torn down.
+    //
+    //    "create" event for VM A triggers: creation of VM B
+    //    "create" event for VM B triggers: stop of VM A
+    //    "modify" event for VM A (due to stop) triggers: deletion of VM B
+    //    "delete" event for VM B is the final event and triggers cleanup
+    //
+    suite.test('multi-events', function (t) {
+        const vmadm = testSubject(path.join(os.tmpdir(), SERVER_ROOT));
+        t.plan(19);
+
+        let streamStop = null;
+        let uuidA = null;
+        let uuidB = null;
+
+        const vmadmEventsReady = function vmadmEventsReady(readyErr, obj) {
+            t.error(readyErr, 'ready handler should have no error');
+            t.ok(obj, 'ready handler was passed object');
+            streamStop = obj.stop;
+
+            // Do the first create, this kicks things off. When this event is
+            // seen by vmadm.events, it will kick off the next step by calling
+            // the handler.
+            vmadm.create(payloads.web00, function onC(err, info) {
+                t.error(err, 'vmadm.create <A> should succeed');
+                t.ok(info, 'vmadm.create <A> should return VM info');
+                t.ok(info.uuid, 'vmadm.create <A> VM info should have uuid');
+                uuidA = info.uuid;
+            });
+        };
+
+        vmadm.events({
+            name: 'unit-test:multi-events'
+        }, function handler(evt) {
+            if (evt.type === 'create' && evt.vm.uuid === uuidA) {
+                // The first "create" (A) triggers the second create (B)
+                t.ok(evt, 'saw evt for creation of VM A');
+                vmadm.create(payloads.web01, function onC(err, info) {
+                    t.error(err, 'vmadm.create <B> should succeed');
+                    t.ok(info, 'vmadm.create <B> should return VM info');
+                    t.ok(info.uuid,
+                        'vmadm.create <B> VM info should have uuid');
+                    uuidB = info.uuid;
+                });
+            } else if (evt.type === 'create' && evt.vm.uuid === uuidB) {
+                // The second "create" (B) triggers the stop of A
+                t.ok(evt, 'saw evt for creation of VM B');
+                vmadm.stop({'uuid': uuidA}, function onStop(err) {
+                    t.error(err, 'vmadm.stop <A> should succeed');
+                });
+            } else if (evt.type === 'modify') {
+                // The "modify" (due to stop) triggers the delete of B
+                t.ok(evt, 'saw evt for stop of A');
+                t.ok(evt.vm, 'evt for modify should have a vm object');
+                t.equal(evt.vm.uuid, uuidA,
+                    'VM in modify should have A\'s UUID');
+                t.equal(evt.vm.state, 'stopped',
+                    'VM in modify should have state "stopped"');
+                t.equal(evt.zonename, uuidA, 'evt.zonename should be A\'s');
+                vmadm.delete({'uuid': uuidB}, function onStop(err) {
+                    t.error(err, 'vmadm.delete <B> should succeed');
+                });
+            } else if (evt.type === 'delete') {
+                // When we see the "delete" for B, we're done
+                t.ok(evt, 'saw evt for delete of <B>');
+                t.equal(evt.zonename, uuidB, 'evt.zonename should be B\'s');
+                streamStop();
+                t.end();
+            } else {
+                throw new Error('unexpected event', evt);
+            }
+        }, vmadmEventsReady);
+    });
+
+    suite.end();
+});
diff --git a/test/unit/testutil.js b/test/unit/testutil.js
new file mode 100644
index 0000000..d6648b8
--- /dev/null
+++ b/test/unit/testutil.js
@@ -0,0 +1,33 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+'use strict';
+
+// NOTE: Originally copy-pasted from sdcadm
+
+const bunyan = require('bunyan');
+
+function TestCommentStream(test) {
+    this.test = test;
+}
+
+TestCommentStream.prototype.write = function write(rec) {
+    this.test.comment(rec);
+};
+
+function createBunyanLogger(test) {
+    return bunyan.createLogger(
+        {name: 'unit',
+         streams: [{type: 'raw',
+                    stream: new TestCommentStream(test)}]});
+}
+
+module.exports = {
+    createBunyanLogger: createBunyanLogger
+};
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
deleted file mode 100644
index c44e8ee..0000000
--- a/tools/jsl.node.conf
+++ /dev/null
@@ -1,139 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
--inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
--useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
--always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define __dirname
-+define clearInterval
-+define clearTimeout
-+define console
-+define exports
-+define global
-+define module
-+define process
-+define require
-+define setInterval
-+define setImmediate
-+define setTimeout
-+define Buffer
-+define JSON
-+define Math
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/jsl.web.conf b/tools/jsl.web.conf
deleted file mode 100644
index b135000..0000000
--- a/tools/jsl.web.conf
+++ /dev/null
@@ -1,137 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-# Developed by Matthias Miller (http://www.JavaScriptLint.com)
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
-+inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
-+unreferenced_argument        # argument declared but never referenced: {name}
-+unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
-+useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
-+always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define	JSON
-+define Math
-+define $
-+define XMLHttpRequest
-+define alert
-+define clearInterval
-+define clearTimeout
-+define confirm
-+define document
-+define setInterval
-+define setTimeout
-+define window
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
deleted file mode 100644
index bbf409a..0000000
--- a/tools/jsstyle.conf
+++ /dev/null
@@ -1,14 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-indent=2
-doxygen
-unparenthesized-return=0
-blank-after-start-comment=0
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 8c6be90..73dd612 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -30,6 +30,11 @@
 #	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
 #			created.  See comments below on expensive targets.
 #
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
 TOP := $(shell pwd)
 
@@ -52,6 +57,9 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 # node-gyp will print build info useful for debugging with V=1
 export V=1
 
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
 #
 # EXPENSIVE TARGETS AND MAKE STAMP FILES
 #
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 1cffbe7..91f8346 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -44,6 +44,39 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 54edf0e..dac448a 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -76,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -97,10 +101,11 @@
 # Defaults for the various tools we use.
 #
 BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
+BASHSTYLE   ?= $(NODE) tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
@@ -189,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -208,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
diff --git a/tools/mkrepo b/tools/mkrepo
deleted file mode 100755
index 3b0d624..0000000
--- a/tools/mkrepo
+++ /dev/null
@@ -1,121 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var child_process = require('child_process');
-var fs = require('fs');
-var path = require('path');
-
-
-
-///--- Globals
-
-var DIRS = [
-    'deps',
-    'docs',
-    'docs/media',
-    'lib',
-    'smf',
-    'smf/manifests',
-    'test',
-    'tools',
-    'tools/mk'
-];
-
-var SUBMODULES = {
-    'javascriptlint': 'https://github.com/davepacheco/javascriptlint.git',
-    'jsstyle': 'https://github.com/davepacheco/jsstyle.git',
-    'restdown': 'https://github.com/trentm/restdown.git'
-};
-
-
-
-///--- Internal Functions
-
-function usage(code, message) {
-    if (message)
-        console.error(message);
-
-    console.error('usage: %s [repo ...]', path.basename(process.argv[1]));
-    process.exit(code);
-}
-
-
-function ensureDirectoryNotExists(dir) {
-    try {
-        var stats = fs.statSync(dir);
-        usage(1, dir + ' already exists');
-    } catch (e) {
-        return false;
-    }
-}
-
-
-function cp(src, dest) {
-    fs.createReadStream(src).pipe(fs.createWriteStream(dest));
-}
-
-
-function exec(cmd, dir, cb) {
-    child_process.exec(cmd, {cwd: dir}, function (err, stdout, stderr) {
-        if (err)
-            process.exit(err.code || 1);
-
-        if (typeof (cb) === 'function')
-            return cb(null);
-    });
-}
-
-
-function mkdir(d) {
-    fs.mkdirSync(d, '0750');
-}
-
-function gitify(dir, repo) {
-    exec('git init', dir, function () {
-        exec('git remote add origin git@github.com:joyent/' + repo + '.git',
-	    dir);
-
-        Object.keys(SUBMODULES).forEach(function (k) {
-            // stub out the git submodule call
-            console.error('Cloning into deps/' + k + '...');
-            exec('git submodule add ' + SUBMODULES[k] + ' ./deps/' + k, dir);
-        });
-    });
-}
-
-
-
-///--- Mainline
-
-if (process.argv.length < 3)
-    usage(1, 'repo required');
-
-process.argv.slice(2).forEach(function (arg) {
-    var repo = path.resolve(arg);
-    ensureDirectoryNotExists(repo);
-    mkdir(repo);
-    DIRS.concat('.').forEach(function (d) {
-        var dir = repo + '/' + d;
-        if (d != '.')
-            mkdir(dir);
-
-        fs.readdirSync('./' + d).forEach(function (f) {
-            var src = './' + d + '/' + f;
-            var dest = dir + '/' + f;
-            if (fs.statSync(src).isFile() && !/^\..*/.test(f))
-                cp(src, dest);
-        });
-    });
-
-    cp('./.gitignore', repo + '/.gitignore');
-    gitify(repo, arg);
-});
diff --git a/tools/service_bundle.dtd.1 b/tools/service_bundle.dtd.1
deleted file mode 100644
index e5c2380..0000000
--- a/tools/service_bundle.dtd.1
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (c) 2004, 2010, Oracle and/or its affiliates. All rights reserved.
-
- CDDL HEADER START
-
- The contents of this file are subject to the terms of the
- Common Development and Distribution License (the "License").
- You may not use this file except in compliance with the License.
-
- You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
- or http://www.opensolaris.org/os/licensing.
- See the License for the specific language governing permissions
- and limitations under the License.
-
- When distributing Covered Code, include this CDDL HEADER in each
- file and include the License file at usr/src/OPENSOLARIS.LICENSE.
- If applicable, add the following below this CDDL HEADER, with the
- fields enclosed by brackets "[]" replaced with your own identifying
- information: Portions Copyright [yyyy] [name of copyright owner]
-
- CDDL HEADER END
--->
-
-<!--
-  Service description DTD
-
-    Most attributes are string values (or an individual string from a
-    restricted set), but attributes with a specific type requirement are
-    noted in the comment describing the element.
--->
-
-<!--
-  XInclude support
-
-    A series of service bundles may be composed via the xi:include tag.
-    smf(5) tools enforce that all bundles be of the same type.
--->
-
-<!--
-     These entities are used for the property, propval and property_group
-     elements, that require type attributes for manifest, while for profiles
-     the type attributes are only implied.
--->
-
-<!ENTITY % profile "IGNORE">
-<!ENTITY % manifest "INCLUDE">
-
-<!ELEMENT xi:include
-  (xi:fallback)
-  >
-<!ATTLIST xi:include
-  href CDATA #REQUIRED
-  parse (xml|text) "xml"
-  encoding CDATA #IMPLIED
-  xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude"
-  >
-
-<!ELEMENT xi:fallback
-  ANY
-  >
-<!ATTLIST xi:fallback
-  xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude"
-  >
-
-<!--
-  stability
-
-    This element associates an SMI stability level with the parent
-    element.  See attributes(5) for an explanation of interface
-    stability levels.
-
-    Its attribute is
-
-	value	The stability level of the parent element.
--->
-
-<!ELEMENT stability EMPTY>
-
-<!ATTLIST stability
-	value		( Standard | Stable | Evolving | Unstable |
-			External | Obsolete ) #REQUIRED >
-
-<!-- Property value lists -->
-
-<!--
-  value_node
-
-    This element represents a single value within any of the typed
-    property value lists.
-
-    Its attribute is
-
-	value	The value for this node in the list.
--->
-
-<!ELEMENT value_node EMPTY>
-
-<!ATTLIST value_node
-	value CDATA #REQUIRED>
-
-<!--
-  count_list
-  integer_list
-  opaque_list
-  host_list
-  hostname_list
-  net_address_list
-  net_address_v4_list
-  net_address_v6_list
-  time_list
-  astring_list
-  ustring_list
-  boolean_list
-  fmri_list
-  uri_list
-
-    These elements represent the typed lists of values for a property.
-    Each contains one or more value_node elements representing each
-    value on the list.
-
-    None of these elements has attributes.
--->
-
-<!ELEMENT count_list
-	( value_node+ )>
-
-<!ATTLIST count_list>
-
-<!ELEMENT integer_list
-	( value_node+ )>
-
-<!ATTLIST integer_list>
-
-<!ELEMENT opaque_list
-	( value_node+ )>
-
-<!ATTLIST opaque_list>
-
-<!ELEMENT host_list
-	( value_node+ )>
-
-<!ATTLIST host_list>
-
-<!ELEMENT hostname_list
-	( value_node+ )>
-
-<!ATTLIST hostname_list>
-
-<!ELEMENT net_address_list
-	( value_node+ )>
-
-<!ATTLIST net_address_list>
-
-<!ELEMENT net_address_v4_list
-	( value_node+ )>
-
-<!ATTLIST net_address_v4_list>
-
-<!ELEMENT net_address_v6_list
-	( value_node+ )>
-
-<!ATTLIST net_address_v6_list>
-
-<!ELEMENT time_list
-	( value_node+ )>
-
-<!ATTLIST time_list>
-
-<!ELEMENT astring_list
-	( value_node+ )>
-
-<!ATTLIST astring_list>
-
-<!ELEMENT ustring_list
-	( value_node+ )>
-
-<!ATTLIST ustring_list>
-
-<!ELEMENT boolean_list
-	( value_node+ )>
-
-<!ATTLIST boolean_list>
-
-<!ELEMENT fmri_list
-	( value_node+ )>
-
-<!ATTLIST fmri_list>
-
-<!ELEMENT uri_list
-	( value_node+ )>
-
-<!ATTLIST uri_list>
-
-<!-- Properties and property groups -->
-
-<!--
-   property
-
-     This element is for a singly or multiply valued property within a
-     property group.  It contains an appropriate value list element,
-     which is expected to be consistent with the type attribute.
-
-     Its attributes are
-
-	name	The name of this property.
-
-	type	The data type for this property.
-
-	override These values should replace values already in the
-		repository.
--->
-
-<![%profile;[
-<!ELEMENT property
-	( count_list | integer_list | opaque_list | host_list | hostname_list |
-	net_address_list | net_address_v4_list | net_address_v6_list |
-	time_list | astring_list | ustring_list | boolean_list | fmri_list |
-	uri_list )? >
-
-<!ATTLIST property
-	name		CDATA #REQUIRED
-	type		( count | integer | opaque | host | hostname |
-			net_address | net_address_v4 | net_address_v6 | time |
-			astring | ustring | boolean | fmri | uri ) #IMPLIED
-	override	( true | false ) "false" >
-]]>
-	
-<![%manifest;[
-<!ELEMENT property
-	( count_list | integer_list | opaque_list | host_list | hostname_list |
-	net_address_list | net_address_v4_list | net_address_v6_list |
-	time_list | astring_list | ustring_list | boolean_list | fmri_list |
-	uri_list )? >
-
-<!ATTLIST property
-	name		CDATA #REQUIRED
-	type		( count | integer | opaque | host | hostname |
-			net_address | net_address_v4 | net_address_v6 | time |
-			astring | ustring | boolean | fmri | uri ) #REQUIRED
-	override	( true | false ) "false" >
-]]>
-
-<!--
-   propval
-
-     This element is for a singly valued property within a property
-     group.  List-valued properties must use the property element above.
-
-     Its attributes are
-
-	name	The name of this property.
-
-	type	The data type for this property.
-
-	value	The value for this property.  Must match type
-		restriction of type attribute.
-
-	override This value should replace any values already in the
-		repository.
--->
-
-<![%profile;[
-<!ELEMENT propval EMPTY>
-
-<!ATTLIST propval
-	name		CDATA #REQUIRED
-	type		( count | integer | opaque | host | hostname |
-			net_address | net_address_v4 | net_address_v6 | time |
-			astring | ustring | boolean | fmri | uri ) #IMPLIED
-	value		CDATA #REQUIRED
-	override	( true | false ) "false" >
-]]>
-
-<![%manifest;[
-<!ELEMENT propval EMPTY>
-
-<!ATTLIST propval
-	name		CDATA #REQUIRED
-	type		( count | integer | opaque | host | hostname |
-			net_address | net_address_v4 | net_address_v6 | time |
-			astring | ustring | boolean | fmri | uri ) #REQUIRED
-	value		CDATA #REQUIRED
-	override	( true | false ) "false" >
-]]>
-
-<!--
-  property_group
-
-    This element is for a set of related properties on a service or
-    instance.  It contains an optional stability element, as well as
-    zero or more property-containing elements.
-
-    Its attributes are
-
-	name	The name of this property group.
-
-	type	A category for this property group.  Groups of type
-		"framework", "implementation" or "template" are primarily
-		of interest to the service management facility, while
-		groups of type "application" are expected to be only of
-		interest to the service to which this group is attached.
-		Other types may be introduced using the service symbol
-		namespace conventions.
-
-	delete	If in the repository, this property group should be removed.
--->
-
-<![%profile;[
-<!ELEMENT property_group
-	( stability?, ( propval | property )* )>
-
-<!ATTLIST property_group
-	name		CDATA #REQUIRED
-	type		CDATA #IMPLIED
-	delete		( true | false ) "false" >
-]]>
-
-<![%manifest;[
-<!ELEMENT property_group
-	( stability?, ( propval | property )* )>
-
-<!ATTLIST property_group
-	name		CDATA #REQUIRED
-	type		CDATA #REQUIRED
-	delete		( true | false ) "false" >
-]]>
-
-<!--
-  service_fmri
-
-    This element defines a reference to a service FMRI (for either a
-    service or an instance).
-
-    Its attribute is
-
-	value	The FMRI.
--->
-
-<!ELEMENT service_fmri EMPTY>
-
-<!ATTLIST service_fmri
-	value		CDATA #REQUIRED>
-
-<!-- Dependencies -->
-
-<!--
-  dependency
-
-    This element identifies a group of FMRIs upon which the service is
-    in some sense dependent.  Its interpretation is left to the
-    restarter to which a particular service instance is delegated.  It
-    contains a group of service FMRIs, as well as a block of properties.
-
-    Its attributes are
-
-	name	The name of this dependency.
-
-	grouping The relationship between the various FMRIs grouped
-		here; "require_all" of the FMRIs to be online, "require_any"
-		of the FMRIs to be online, or "exclude_all" of the FMRIs
-		from being online or in maintenance for the dependency to
-		be satisfied.  "optional_all" dependencies are satisfied
-		when all of the FMRIs are either online or unable to come
-		online (because they are disabled, misconfigured, or one
-		of their dependencies is unable to come online).
-
-	restart_on The type of events from the FMRIs that the service should
-		be restarted for.  "error" restarts the service if the
-		dependency is restarted due to hardware fault.  "restart"
-		restarts the service if the dependency is restarted for
-		any reason, including hardware fault.  "refresh" restarts
-		the service if the dependency is refreshed or restarted for
-		any reason.  "none" will never restart the service due to
-		dependency state changes.
-
-	type	The type of dependency: on another service ('service'), on
-		a filesystem path ('path'), or another dependency type.
-
-	delete	This dependency should be deleted.
--->
-
-<!ELEMENT dependency
-	( service_fmri*, stability?, ( propval | property )* ) >
-
-<!ATTLIST dependency
-	name		CDATA #REQUIRED
-	grouping	( require_all | require_any | exclude_all |
-			optional_all ) #REQUIRED
-	restart_on	( error | restart | refresh | none ) #REQUIRED
-	type		CDATA #REQUIRED
-	delete		( true | false ) "false" >
-
-<!-- Dependents -->
-
-<!--
-  dependent
-
-    This element identifies a service which should depend on this service.  It
-    corresponds to a dependency in the named service.  The grouping and type
-    attributes of that dependency are implied to be "require_all" and
-    "service", respectively.
-
-    Its attributes are
-
-	name	The name of the dependency property group to create in the
-		dependent entity.
-
-	grouping The grouping relationship of the dependency property
-		group to create in the dependent entity.  See "grouping"
-		attribute on the dependency element.
-
-	restart_on The type of events from this service that the named service
-		should be restarted for.
-
-	delete	True if this dependent should be deleted.
-
-	override Whether to replace an existing dependent of the same name.
-
--->
-
-<!ELEMENT dependent
-	( service_fmri, stability?, ( propval | property )* ) >
-
-<!ATTLIST dependent
-	name		CDATA #REQUIRED
-	grouping	( require_all | require_any | exclude_all |
-			optional_all) #REQUIRED
-	restart_on	( error | restart | refresh | none) #REQUIRED
-	delete		( true | false ) "false"
-	override	( true | false ) "false" >
-
-<!-- Method execution context, security profile, and credential definitions -->
-
-<!--
-  envvar
-
-    An environment variable. It has two attributes:
-
-	name	The name of the environment variable.
-	value	The value of the environment variable.
--->
-
-<!ELEMENT envvar EMPTY>
-
-<!ATTLIST envvar
-	name		CDATA #REQUIRED
-	value		CDATA #REQUIRED >
-
-<!--
-  method_environment
-
-    This element defines the environment for a method. It has no
-    attributes, and one or more envvar child elements.
--->
-
-<!ELEMENT method_environment (envvar+) >
-
-<!ATTLIST method_environment>
-
-<!--
-  method_profile
-
-    This element indicates which exec_attr(5) profile applies to the
-    method context being defined.
-
-    Its attribute is
-
-	name	The name of the profile.
--->
-
-<!ELEMENT method_profile EMPTY>
-
-<!ATTLIST method_profile
-	name		CDATA #REQUIRED >
-
-<!--
-  method_credential
-
-    This element specifies credential attributes for the execution
-    method to use.
-
-    Its attributes are
-
-	user	The user ID, in numeric or text form.
-
-	group	The group ID, in numeric or text form.  If absent or
-		":default", the group associated with the user in the
-		passwd database.
-
-	supp_groups Supplementary group IDs to be associated with the
-		method, separated by commas or spaces.  If absent or
-		":default", initgroups(3C) will be used.
-
-	privileges An optional string specifying the privilege set.
-
-	limit_privileges An optional string specifying the limit
-		privilege set.
--->
-
-<!ELEMENT method_credential EMPTY>
-
-<!ATTLIST method_credential
-	user		CDATA #REQUIRED
-	group		CDATA #IMPLIED
-	supp_groups	CDATA #IMPLIED
-	privileges	CDATA #IMPLIED
-	limit_privileges CDATA #IMPLIED >
-
-<!--
-  method_context
-
-    This element combines credential and resource management attributes
-    for execution methods.  It may contain a method_environment, or
-    a method_profile or method_credential element.
-
-    Its attributes are
-
-	working_directory The home directory to launch the method from.
-		":default" can be used as a token to indicate use of the
-		user specified by the credential or profile specified.
-
-	project	The project ID, in numeric or text form.  ":default" can
-		be used as a token to indicate use of the project
-		identified by getdefaultproj(3PROJECT) for the non-root
-		user specified by the credential or profile specified.
-		If the user is root, ":default" designates the project
-		the restarter is running in.
-
-	resource_pool The resource pool name to launch the method on.
-		":default" can be used as a token to indicate use of the
-		pool specified in the project(4) entry given in the
-		"project" attribute above.
--->
-<!ELEMENT method_context
-	( (method_profile | method_credential)?, method_environment? ) >
-
-<!ATTLIST method_context
-	working_directory	CDATA #IMPLIED
-	project			CDATA #IMPLIED
-	resource_pool		CDATA #IMPLIED >
-
-<!-- Restarter delegation, methods, and monitors -->
-
-<!--
-  exec_method
-
-    This element describes one of the methods used by the designated
-    restarter to act on the service instance.  Its interpretation is
-    left to the restarter to which a particular service instance is
-    delegated.  It contains a set of attributes, an optional method
-    context, and an optional stability element for the optional
-    properties that can be included.
-
-    Its attributes are
-
-	type	The type of method, either "method" or "monitor".
-
-	name	Name of this execution method.  The method names are
-		usually a defined interface of the restarter to which an
-		instance of this service is delegated.
-
-	exec	The string identifying the action to take.  For
-		svc.startd(1M), this is a string suitable to pass to
-		exec(2).
-
-	timeout_seconds [integer] Duration, in seconds, to wait for this
-		method to complete.  A '0' or '-1' denotes an infinite
-		timeout.
-
-	delete	If in the repository, the property group for this method
-		should be removed.
--->
-
-<!ELEMENT exec_method
-	( method_context?, stability?, ( propval | property )* ) >
-
-<!ATTLIST exec_method
-	type		( method | monitor ) #REQUIRED
-	name		CDATA #REQUIRED
-	exec		CDATA #REQUIRED
-	timeout_seconds	CDATA #REQUIRED
-	delete		( true | false ) "false" >
-
-<!--
-  restarter
-
-    A flag element identifying the restarter to which this service or
-    service instance is delegated.  Contains the FMRI naming the
-    delegated restarter.
-
-    This element has no attributes.
--->
-
-<!ELEMENT restarter
-	( service_fmri ) >
-
-<!ATTLIST restarter>
-
-<!--
-  Templates
--->
-
-<!--
-  doc_link
-
-    The doc_link relates a resource described by the given URI to the
-    service described by the containing template.  The resource is
-    expected to be a documentation or elucidatory reference of some
-    kind.
-
-    Its attributes are
-
-      name      A label for this resource.
-
-      uri       A URI to the resource.
--->
-
-<!ELEMENT doc_link EMPTY>
-
-<!ATTLIST doc_link
-	name		CDATA #REQUIRED
-	uri		CDATA #REQUIRED >
-
-<!--
-  manpage
-
-    The manpage element connects the reference manual page to the
-    template's service.
-
-    Its attributes are
-
-      title     The manual page title.
-
-      section   The manual page's section.
-
-      manpath   The MANPATH environment variable, as described in man(1)
-                that is required to reach the named manual page
--->
-
-<!ELEMENT manpage EMPTY>
-
-<!ATTLIST manpage
-	title		CDATA #REQUIRED
-	section		CDATA #REQUIRED
-	manpath		CDATA ":default" >
-
-<!--
-  documentation
-
-    The documentation element groups an arbitrary number of doc_link
-    and manpage references.
-
-    It has no attributes.
--->
-
-<!ELEMENT documentation
-	( doc_link | manpage )* >
-
-<!ATTLIST documentation>
-
-<!--
-  loctext
-
-    The loctext element is a container for localized text.
-
-    Its sole attribute is
-
-	xml:lang The name of the locale, in the form accepted by LC_ALL,
-		etc.  See locale(5).
--->
-<!ELEMENT loctext
-        (#PCDATA) >
-
-<!ATTLIST loctext
-        xml:lang	CDATA #REQUIRED >
-
-<!--
-  description
-
-    The description holds a set of potentially longer, localized strings that
-    consist of a short description of the service.
-
-    The description has no attributes.
--->
-<!ELEMENT description
-        ( loctext+ ) >
-
-<!ATTLIST description>
-
-<!--
-  common_name
-
-    The common_name holds a set of short, localized strings that
-    represent a well-known name for the service in the given locale.
-
-    The common_name has no attributes.
--->
-<!ELEMENT common_name
-        ( loctext+ ) >
-
-<!ATTLIST common_name>
-
-<!--
-  units
-
-    The units a numerical property is expressed in.
--->
-
-<!ELEMENT units
-	( loctext+ ) >
-
-<!ATTLIST units>
-
-<!--
-  visibility
-
-    Expresses how a property is typically accessed.  This isn't
-    intended as access control, but as an indicator as to how a
-    property is used.
-
-    Its attributes are:
-
-      value     'hidden', 'readonly', or 'readwrite' indicating that
-		the property should be hidden from the user, shown but
-		read-only, or modifiable.
--->
-
-<!ELEMENT visibility EMPTY>
-
-<!ATTLIST visibility
-	value	( hidden | readonly | readwrite ) #REQUIRED >
-
-<!--
-  value
-
-    Describes a legal value for a property value, and optionally contains a
-    human-readable name and description for the specified property
-    value.
-
-    Its attributes are:
-
-      name	A string representation of the value.
--->
-
-<!ELEMENT value
-	( common_name?, description? ) >
-
-<!ATTLIST value
-	name	CDATA #REQUIRED >
-
-<!--
-  values
-
-    Human-readable names and descriptions for valid values of a property.
--->
-
-<!ELEMENT values
-	(value+) >
-
-<!ATTLIST values>
-
-<!--
-  cardinality
-
-    Places a constraint on the number of values the property can take
-    on.
-
-    Its attributes are:
-	min	minimum number of values
-	max	maximum number of values
-
-    Both attributes are optional.  If min is not specified, it defaults to
-    0.  If max is not specified it indicates an unlimited number of values.
-    If neither is specified this indicates 0 or more values.
--->
-
-<!ELEMENT cardinality EMPTY>
-
-<!ATTLIST cardinality
-	min	CDATA "0"
-	max	CDATA "18446744073709551615">
-
-<!--
-  internal_separators
-
-    Indicates the separators used within a property's value used to
-    separate the actual values.  Used in situations where multiple
-    values are packed into a single property value instead of using a
-    multi-valued property.
--->
-
-<!ELEMENT internal_separators
-	(#PCDATA) >
-
-<!ATTLIST internal_separators>
-
-<!--
-  range
-
-    Indicates a range of possible integer values.
-
-    Its attributes are:
-
-      min	The minimum value of the range (inclusive).
-      max	The maximum value of the range (inclusive).
--->
-
-<!ELEMENT range EMPTY>
-
-<!ATTLIST range
-	min	CDATA #REQUIRED
-	max	CDATA #REQUIRED >
-
-<!--
-  constraints
-
-    Provides a set of constraints on the values a property can take on.
--->
-
-<!ELEMENT constraints
-	( value*, range* ) >
-<!ATTLIST constraints>
-
-<!--
-  include_values
-
-    Includes an entire set of values in the choices block.
-
-    Its attributes are:
-
-	type    Either "constraints" or "values", indicating an
-		inclusion of all values allowed by the property's
-		constraints or all values for which there are
-		human-readable names and descriptions, respectively.
--->
-
-<!ELEMENT include_values EMPTY>
-
-<!ATTLIST include_values
-	type	( constraints | values ) #REQUIRED >
-
-<!--
-  choices
-
-    Provides a set of common choices for the values a property can take
-    on.  Useful in those cases where the possibilities are unenumerable
-    or merely inconveniently legion, and a manageable subset is desired
-    for presentation in a user interface.
--->
-
-<!ELEMENT choices
-	( value*, range*, include_values* ) >
-
-<!ATTLIST choices>
-
-<!--
-  prop_pattern
-
-
-    The prop_pattern describes one property of the enclosing property group
-    pattern.
-
-    Its attributes are:
-
-	name    The property's name.
-	type    The property's type.
-	required
-		If the property group is present, this property is required.
-
-	type can be omitted if required is false.
--->
-
-<!ELEMENT prop_pattern
-	( common_name?, description?, units?, visibility?, cardinality?,
-	  internal_separators?, values?, constraints?, choices? ) >
-
-<!ATTLIST prop_pattern
-	name		CDATA	#REQUIRED
-	type		( count | integer | opaque | host | hostname |
-			net_address | net_address_v4 | net_address_v6 | time |
-			astring | ustring | boolean | fmri | uri ) #IMPLIED
-	required	( true | false )	"false" >
-
-<!--
-  pg_pattern
-
-    The pg_pattern describes one property group.
-    Depending on the element's attributes, these descriptions may apply
-    to just the enclosing service/instance, instances of the enclosing
-    service, delegates of the service (assuming it is a restarter), or
-    all services.
-
-    Its attributes are:
-
-	name    The property group's name.  If not specified, it
-		matches all property groups with the specified type.
-	type    The property group's type.  If not specified, it
-		matches all property groups with the specified name.
-	required
-		If the property group is required.
-	target	The scope of the pattern, which may be all, delegate,
-		instance, or this.  'all' is reserved for framework use
-		and applies the template to all services on the system.
-		'delegate' is reserved for restarters, and means the
-		template applies to all services which use the restarter.
-		'this' would refer to the defining service or instance.
-		'instance' can only be used in a service's template block,
-		and means the definition applies to all instances of this
-		service.
-
--->
-
-<!ELEMENT pg_pattern
-	( common_name?, description?, prop_pattern* ) >
-
-<!ATTLIST pg_pattern
-	name		CDATA	""
-	type		CDATA	""
-	required	( true | false )	"false"
-	target		( this | instance | delegate | all )	"this" >
-
-<!--
-  template
-
-    The template contains a collection of metadata about the service.
-    It contains a localizable string that serves as a common,
-    human-readable name for the service.  (This name should be less than
-    60 characters in a single byte locale.)  The template may optionally
-    contain a longer localizable description of the service, a
-    collection of links to documentation, either in the form of manual
-    pages or in the form of URI specifications to external documentation
-    sources (such as docs.sun.com).
-
-    The template has no attributes.
--->
-<!ELEMENT template
-        ( common_name, description?, documentation?, pg_pattern* ) >
-
-<!ATTLIST template>
-
-<!-- Notification Parameters -->
-
-<!ELEMENT paramval EMPTY>
-
-<!ATTLIST paramval
-	name		CDATA #REQUIRED
-	value		CDATA #REQUIRED>
-
-<!ELEMENT parameter
-	( value_node* )>
-
-<!ATTLIST parameter
-	name		CDATA #REQUIRED>
-
-<!ELEMENT event EMPTY>
-
-<!ATTLIST event
-	value		CDATA #REQUIRED>
-
-<!ELEMENT type
-	( ( parameter | paramval )* )>
-
-<!ATTLIST type
-	name		CDATA #REQUIRED
-	active		( true | false ) "true" >
-
-<!--
-  notification parameters
-
-    This element sets the notification parameters for Software Events and
-    Fault Management problem lifecycle events.
--->
-
-<!ELEMENT notification_parameters
-	( event, type+ )>
-
-<!ATTLIST notification_parameters>
-
-<!-- Services and instances -->
-
-<!--
-  create_default_instance
-
-    A flag element indicating that an otherwise empty default instance
-    of this service (named "default") should be created at install, with
-    its enabled property set as given.
-
-    Its attribute is
-
-	enabled	[boolean] The initial value for the enabled state of
-		this instance.
--->
-
-<!ELEMENT create_default_instance EMPTY >
-
-<!ATTLIST create_default_instance
-	enabled		( true | false ) #REQUIRED >
-
-<!--
-  single_instance
-
-    A flag element stating that this service can only have a single
-    instance on a particular system.
--->
-
-<!ELEMENT single_instance EMPTY>
-
-<!ATTLIST single_instance>
-
-<!--
-  instance
-
-    The service instance is the object representing a software component
-    that will run on the system if enabled.  It contains an enabled
-    element, a set of dependencies on other services, potentially
-    customized methods or configuration data, an optional method
-    context, and a pointer to its restarter.  (If no restarter is
-    specified, the master restarter, svc.startd(1M), is assumed to be
-    responsible for the service.)
-
-    Its attributes are
-
-	name	The canonical name for this instance of the service.
-
-	enabled	[boolean] The initial value for the enabled state of
-		this instance.
--->
-
-<!ELEMENT instance
-	( restarter?, dependency*, dependent*, method_context?,
-	exec_method*, notification_parameters*, property_group*,
-	template? ) >
-
-<!ATTLIST instance
-	name		CDATA #REQUIRED
-	enabled		( true | false ) #REQUIRED >
-
-<!--
-  service
-
-    The service contains the set of instances defined by default for
-    this service, an optional method execution context, any default
-    methods, the template, and various restrictions or advice applicable
-    at installation.  The method execution context and template elements
-    are required for service_bundle documents with type "manifest", but
-    are optional for "profile" or "archive" documents.
-
-    Its attributes are
-
-	name	The canonical name for the service.
-
-	version	[integer] The integer version for this service.
-
-	type	Whether this service is a simple service, a delegated
-		restarter, or a milestone (a synthetic service that
-		collects a group of dependencies).
--->
-
-<!ELEMENT service
-	( create_default_instance?, single_instance?, restarter?,
-	dependency*, dependent*, method_context?, exec_method*,
-	notification_parameters*, property_group*, instance*,
-	stability?, template? ) >
-
-<!ATTLIST service
-	name		CDATA #REQUIRED
-	version		CDATA #REQUIRED
-	type		( service | restarter | milestone ) #REQUIRED >
-
-<!--
-  service_bundle
-
-    The bundle possesses two attributes:
-
-	type	How this file is to be understood by the framework (or
-		used in a non-framework compliant way). Standard types
-		are 'archive', 'manifest', and 'profile'.
-	
-	name	A name for the bundle.  Manifests should be named after
-		the package which delivered them; profiles should be
-		named after the "feature set nickname" they intend to
-		enable.
--->
-
-<!ELEMENT service_bundle
-	( service_bundle* | service* | xi:include* )>
-
-<!ATTLIST service_bundle
-	type		CDATA #REQUIRED
-	name		CDATA #REQUIRED>
-- 
2.21.0

