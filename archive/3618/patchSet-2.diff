From bf7fbb292b68d7fc556104c27131a3a68dadf3af Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Tue, 13 Mar 2018 10:31:16 -0700
Subject: [PATCH] TRITON-171 Ambiguous error message when creating a triton
 volume

---
 lib/errors.js                                 | 43 ++++++++++++++++-
 lib/validation/networks.js                    | 46 ++++++++-----------
 ...-volumes-creation-invalid-networks.test.js | 15 +++---
 3 files changed, 69 insertions(+), 35 deletions(-)

diff --git a/lib/errors.js b/lib/errors.js
index 58ab4b0..201db88 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,13 +5,52 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var restify = require('restify');
 var util = require('util');
 
+function InvalidNetworksError(options) {
+    assert.object(options, 'options');
+    assert.optionalArrayOfUuid(options.missing, 'options.missing');
+    assert.optionalArrayOfUuid(options.nonOwned, 'options.nonOwned');
+    assert.optionalArrayOfUuid(options.nonFabric, 'options.nonFabric');
+
+    assert.ok((options.missing && options.missing.length > 0) ||
+        (options.nonOwned && options.nonOwned.length > 0) ||
+        (options.nonFabric && options.nonFabric.length > 0),
+        'at least one network needs to be missing, non-owned or non-fabric');
+
+    var detailsMsgs = [];
+    var errMsg;
+    var invalidNetsMsg = 'Invalid networks';
+
+    if (options.missing && options.missing.length > 0) {
+        detailsMsgs.push('missing: ' + options.missing.join(', '));
+    }
+
+    if (options.nonOwned && options.nonOwned.length > 0) {
+        detailsMsgs.push('not owned by user: ' + options.nonOwned.join(', '));
+    }
+
+    if (options.nonFabric && options.nonFabric.length > 0) {
+        detailsMsgs.push('non-fabric: ' + options.nonFabric.join(', '));
+    }
+
+    errMsg = invalidNetsMsg + ': ' + detailsMsgs.join(', ');
+
+    restify.RestError.call(this, {
+        restCode: 'InvalidNetworks',
+        statusCode: 409,
+        message: errMsg,
+        constructorOpt: InvalidNetworksError
+    });
+    this.name = 'InvalidNetworksError';
+}
+util.inherits(InvalidNetworksError, restify.RestError);
+
 function VolumeNotFoundError(volumeUuid) {
     restify.RestError.call(this, {
         restCode: 'VolumeNotFound',
@@ -55,6 +94,7 @@ function VolumeInUseError(volumeName) {
     });
     this.name = 'VolumeInUseError';
 }
+
 util.inherits(VolumeInUseError, restify.RestError);
 
 function ValidationError(causes) {
@@ -101,6 +141,7 @@ util.inherits(VolumeSizeNotAvailableError, restify.RestError);
 
 module.exports = {
     InternalError: restify.InternalError,
+    InvalidNetworksError: InvalidNetworksError,
     ValidationError: ValidationError,
     VolumeAlreadyExistsError: VolumeAlreadyExistsError,
     VolumeInUseError: VolumeInUseError,
diff --git a/lib/validation/networks.js b/lib/validation/networks.js
index d80d78f..9d17d87 100644
--- a/lib/validation/networks.js
+++ b/lib/validation/networks.js
@@ -5,12 +5,14 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var vasync = require('vasync');
 
+var errors = require('../errors');
+
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
 
 function validateNetwork(networkUuid) {
@@ -35,6 +37,7 @@ function validateFabricNetworkOwnership(napiClient, volumeParams, callback) {
     var missing = [];
     var nonFabric = [];
     var nonOwned = [];
+    var ownerUuid = volumeParams.owner_uuid;
 
     vasync.forEachParallel({
         func: function validateOneNetwork(networkUuid, cb) {
@@ -42,13 +45,14 @@ function validateFabricNetworkOwnership(napiClient, volumeParams, callback) {
                 if (!err && net) {
                     assert.object(net, 'net');
                     assert.optionalBool(net.fabric, 'net.fabric');
-                    assert.arrayOfUuid(net.owner_uuids, 'net.owner_uuids');
+                    assert.optionalArrayOfUuid(net.owner_uuids,
+                        'net.owner_uuids');
 
                     if (net.fabric !== true) {
                         nonFabric.push(networkUuid);
                     }
-                    if (net.owner_uuids
-                        .indexOf(volumeParams.owner_uuid) === -1) {
+                    if (!net.owner_uuids ||
+                        net.owner_uuids.indexOf(ownerUuid) === -1) {
                         nonOwned.push(networkUuid);
                     }
                 }
@@ -61,31 +65,19 @@ function validateFabricNetworkOwnership(napiClient, volumeParams, callback) {
                 cb(err);
             });
         }, inputs: volumeParams.networks
-    }, function onValidated(err) {
-        var newErr = err;
-        var newErrMsgs = [];
-
-        if (!err) {
-            if (missing.length > 0) {
-                newErrMsgs.push('missing networks: ' + JSON.stringify(missing));
-            }
-            if (nonOwned.length > 0) {
-                newErrMsgs.push('non-owned networks: ' +
-                    JSON.stringify(nonOwned));
-            }
-            if (nonFabric.length > 0) {
-                newErrMsgs.push('non-fabric networks: ' +
-                    JSON.stringify(nonFabric));
-            }
+    }, function onValidated(getNetworkErr) {
+        var err = getNetworkErr;
 
-            if (newErrMsgs.length > 0) {
-                // use .trim() to remove trailing space
-                newErr = new Error('invalid network(s) specified: ' +
-                    newErrMsgs.join(' '));
-            }
-       }
+        if (!getNetworkErr && (missing.length > 0 || nonFabric.length > 0 ||
+            nonOwned.length > 0)) {
+            err = new errors.InvalidNetworksError({
+                missing: missing,
+                nonOwned: nonOwned,
+                nonFabric: nonFabric
+            });
+        }
 
-       callback(newErr);
+       callback(err);
     });
 }
 
diff --git a/test/integration/nfs-shared-volumes-creation-invalid-networks.test.js b/test/integration/nfs-shared-volumes-creation-invalid-networks.test.js
index 3dcfc79..c5c1509 100644
--- a/test/integration/nfs-shared-volumes-creation-invalid-networks.test.js
+++ b/test/integration/nfs-shared-volumes-creation-invalid-networks.test.js
@@ -176,8 +176,8 @@ test('should fail to create volume on invalid networks', function (tt) {
             type: NFS_SHARED_VOLUMES_TYPE_NAME,
             networks: [NETWORKS['nonOwned'].uuid]
         }, function onVolumeCreated(err, volume) {
-            var expectedErrMsg =
-                'invalid network(s) specified: non-owned networks';
+            var expectedErrMsg = 'Invalid networks: not owned by user: ' +
+                    [NETWORKS['nonOwned'].uuid];
 
             t.ok(err, 'volume creation should result in an error');
             expectedError(t, err.message, expectedErrMsg,
@@ -193,8 +193,8 @@ test('should fail to create volume on invalid networks', function (tt) {
             type: NFS_SHARED_VOLUMES_TYPE_NAME,
             networks: [NETWORKS['nonFabric'].uuid]
         }, function onVolumeCreated(err, volume) {
-            var expectedErrMsg =
-                'invalid network(s) specified: non-fabric networks';
+            var expectedErrMsg = 'Invalid networks: non-fabric: ' +
+                [NETWORKS['nonFabric'].uuid];
 
             t.ok(err, 'volume creation should result in an error');
             expectedError(t, err.message, expectedErrMsg,
@@ -204,14 +204,15 @@ test('should fail to create volume on invalid networks', function (tt) {
         });
     });
     tt.test('test w/ non-existent network', function (t) {
+        var missingNetwork = libuuid.create();
+
         CLIENTS.volapi.createVolume({
             name: 'volapi-test-invalid-not-existing',
             owner_uuid: UFDS_ADMIN_UUID,
             type: NFS_SHARED_VOLUMES_TYPE_NAME,
-            networks: [libuuid.create()]
+            networks: [missingNetwork]
         }, function onVolumeCreated(err, volume) {
-            var expectedErrMsg =
-                'invalid network(s) specified: missing networks';
+            var expectedErrMsg = 'Invalid networks: missing: ' + missingNetwork;
 
             t.ok(err, 'volume creation should result in an error');
             expectedError(t, err.message, expectedErrMsg,
-- 
2.21.0

