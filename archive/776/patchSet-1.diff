From b83236d6b7a58b79e83c9a0d41dbc1bb37acb24d Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Tue, 25 Oct 2016 11:56:27 -0700
Subject: [PATCH] DOCKER-924 sdc-docker nightly test sometimes unable to find
 certain images

---
 test/integration/api-build.test.js  |  20 ++--
 test/integration/api-create.test.js |   8 +-
 test/integration/api-images.test.js |  10 +-
 test/integration/helpers.js         | 158 +++++++++++++++++++++++-----
 4 files changed, 156 insertions(+), 40 deletions(-)

diff --git a/test/integration/api-build.test.js b/test/integration/api-build.test.js
index 59d7955..80b773b 100644
--- a/test/integration/api-build.test.js
+++ b/test/integration/api-build.test.js
@@ -181,8 +181,10 @@ test('api: build image conflicts', function (tt) {
 
     // Pull the docker.io alpine image.
     tt.test('pull docker.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName1);
-        DOCKER_ALICE.post(url, function (err, req, res, body) {
+        h.ensureImage({
+            name: imageName1,
+            user: ALICE
+        }, function (err) {
             t.error(err, 'getting docker.io alpine test image');
             t.end();
         });
@@ -190,8 +192,10 @@ test('api: build image conflicts', function (tt) {
 
     // Pull something that uses the same alpine image in a different repository.
     tt.test('pull quay.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName2);
-        DOCKER_ALICE.post(url, function (err, req) {
+        h.ensureImage({
+            name: imageName2,
+            user: ALICE
+        }, function (err) {
             t.error(err, 'getting quay.io alpine test image');
             t.end();
         });
@@ -294,9 +298,11 @@ test('api: build across multiple registries', function (tt) {
 
     // Pull the docker.io alpine image.
     tt.test('pull quay.io alpine test image', function (t) {
-        var url = '/images/create?fromImage=' + encodeURIComponent(imageName);
-        DOCKER_ALICE.post(url, function (err, req, res, body) {
-            t.ifErr(err, 'getting quay.io alpine test image');
+        h.ensureImage({
+            name: imageName,
+            user: ALICE
+        }, function (err) {
+            t.error(err, 'getting docker.io alpine test image');
             t.end();
         });
     });
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index a98b14c..f0c4890 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -103,9 +103,11 @@ test('setup', function (tt) {
     });
 
     tt.test('pull nginx image', function (t) {
-        var url = '/images/create?fromImage=nginx%3Alatest';
-        DOCKER_ALICE.post(url, function (err, req, res) {
-            t.error(err, 'should be no error posting image create request');
+        h.ensureImage({
+            name: 'nginx:latest',
+            user: ALICE
+        }, function (err) {
+            t.error(err, 'should be no error pulling image');
             t.end();
         });
     });
diff --git a/test/integration/api-images.test.js b/test/integration/api-images.test.js
index bdb25f7..a27aec1 100644
--- a/test/integration/api-images.test.js
+++ b/test/integration/api-images.test.js
@@ -78,10 +78,12 @@ test('docker images', function (tt) {
 
 
     tt.test('pull ubuntu image', function (t) {
-        var url = '/images/create?fromImage=ubuntu%3Alatest';
-        DOCKER_ALICE.post(url, function (err, req, res) {
-            t.error(err, 'should be no error posting image create request');
-
+        h.ensureImage({
+            name: 'ubuntu:latest',
+            user: ALICE
+        }, function (err) {
+            console.log('ubuntu pull err: ', err);
+            t.error(err, 'should be no error pulling image');
             t.end();
         });
     });
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 57beb0e..23f50c8 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1150,7 +1150,9 @@ function createDockerRemoteClient(options, callback) {
         if (clientType)
             clientFactory = clientFactories[clientType];
 
-        callback(null, clientFactory.call(clientFactory, opts));
+        var client = clientFactory.call(clientFactory, opts);
+        client.user = user;
+        callback(null, client);
         return;
     });
 }
@@ -1349,6 +1351,126 @@ function buildDockerContainer(opts, callback) {
     }
 }
 
+/**
+ * Ensure the given image has been pulled, and if not then pull it down.
+ */
+function ensureImage(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.string(opts.name, 'opts.name');
+    assert.object(opts.user, 'opts.user');
+    assert.func(callback, 'callback');
+
+    var log;
+    var name = opts.name;
+
+    vasync.pipeline({ arg: {}, funcs: [
+        function getJsonClient(ctx, next) {
+            // Get the json client.
+            createDockerRemoteClient({user: opts.user},
+                    function _getJsonClient(err, client) {
+                log = client.log;
+                ctx.jsonClient = client;
+                next(err);
+            });
+        },
+
+        // Check if the image has already been pulled.
+        function checkImageExists(ctx, next) {
+            ctx.jsonClient.get('/images/' + name + '/json',
+                    function _getImage(err) {
+                if (!err) {
+                    // Image found, all is good in the world.
+                    log.debug({name: name}, 'image already exists');
+                    next(true); /* Early abort marker. */
+                    return;
+                }
+                // Allow a 404 error (image not found), other cases a failure.
+                if (err.statusCode !== 404) {
+                    log.warn({name: name}, 'image get error');
+                    next(err);
+                    return;
+                }
+                next();
+            });
+        },
+
+        function getHttpClient(ctx, next) {
+            createDockerRemoteClient({user: opts.user, clientType: 'http'},
+                    function (err, client) {
+                ctx.httpClient = client;
+                next(err);
+            });
+        },
+
+        // Image doesn't exist... pull it down.
+        function pullImage(ctx, next) {
+            log.debug({name: name}, 'ensureImage: pulling image');
+            var url = '/images/create?fromImage='
+                + encodeURIComponent(name);
+            ctx.httpClient.post(url, function _onPost(err, req) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                req.on('result', function onResponse(err2, res) {
+                    // Don't cancel the request here, wait and read the error
+                    // string in readPullResponse.
+                    ctx.err = err2;
+                    ctx.res = res;
+                    next();
+                });
+                req.on('error', function onReqError(err2) {
+                    log.error({err: err2}, 'Image pull request error');
+                    next(err2);
+                    return;
+                });
+                // We don't need to write anything to create image.
+                req.end();
+            });
+        },
+
+        function readPullResponse(ctx, next) {
+            var body = '';
+
+            ctx.res.on('data', function onResData(data) {
+                body += data.toString();
+            });
+
+            ctx.res.on('end', function onEnd() {
+                if (ctx.err) {
+                    if (!ctx.err.message) {
+                        ctx.err.message = body;
+                    }
+                    next(ctx.err);
+                    return;
+                }
+
+                // A number of status messages will be send back (json stream),
+                // check these status messages for the success message(s).
+                if ((body.indexOf('Status: Image is up to date') === -1)
+                    && (body.indexOf('Status: Downloaded newer image for')
+                    === -1)) {
+
+                    log.error({name: name}, 'Error pulling image: %s',
+                        body);
+                    next(new Error(fmt('Error pulling image %s - %s',
+                        name, body)));
+                    return;
+                }
+                next(null);
+            });
+        }
+    ]}, function _onComplete(err) {
+        if (err === true) {
+            // Early abort - the image already exists.
+            callback();
+            return;
+        }
+        callback(err);
+    });
+}
+
+
 /**
  * Create a nginx VM fixture
  */
@@ -1407,7 +1529,6 @@ function createDockerContainer(opts, callback) {
     var dockerClient = opts.dockerClient;
     var vmapiClient = opts.vmapiClient;
     var t = opts.test;
-    var log = dockerClient.log;
     var response = {};
     var apiVersion = opts.apiVersion || ('v' + constants.API_VERSION);
 
@@ -1430,28 +1551,10 @@ function createDockerContainer(opts, callback) {
         function (next) {
             // There is a dependency here, in order to create a nginx container,
             // the nginx image must first be downloaded.
-            log.debug('Checking for nginx docker image');
-            dockerClient.get('/images/json',
-                    function (err, req, res, images) {
-
-                t.error(err, 'check for nginx image - should be no error');
-
-                if (images.filter(function (image) {
-                    return -1 !== image.RepoTags.indexOf('nginx:latest');
-                }).length === 0) {
-                    // Urgh, it doesn't exist... go get it then.
-                    log.debug('Fetching nginx image');
-                    var url = '/images/create?fromImage=nginx%3Alatest';
-
-                    dockerClient.post(url, function (err2, req2, res2) {
-                        t.error(err2, 'pull nginx image - should be no error');
-                        next(null);
-                    });
-
-                } else {
-                    next(null);
-                }
-            });
+            ensureImage({
+                name: 'nginx:latest',
+                user: dockerClient.user
+            }, next);
         },
 
         function (next) {
@@ -1502,9 +1605,11 @@ function createDockerContainer(opts, callback) {
             });
         }
     ], function (err) {
-        if (!opts.expectedError) {
-            t.error(err);
+        if (opts.expectedError) {
+            common.expApiErr(t, err, opts.expectedErr, callback);
+            return;
         }
+        t.error(err);
 
         callback(err, response);
     });
@@ -1708,6 +1813,7 @@ module.exports = {
     createVmapiClient: createVmapiClient,
     createNapiClient: createNapiClient,
     dockerIdToUuid: sdcCommon.dockerIdToUuid,
+    ensureImage: ensureImage,
     initDockerEnv: initDockerEnv,
     listContainers: listContainers,
     createDockerContainer: createDockerContainer,
-- 
2.21.0

