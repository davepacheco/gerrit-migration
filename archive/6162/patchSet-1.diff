From 7b9c18cacdfbdc2be2f8ab160177fa67b766cf96 Mon Sep 17 00:00:00 2001
From: John Levon <john.levon@joyent.com>
Date: Thu, 25 Apr 2019 16:42:20 +0000
Subject: [PATCH] TRITON-1353 Triton systems should ship with HT disabled

---
 bin/build-tar-image  |   5 +-
 build.spec           |   1 +
 tools/bin/sdc-server | 162 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 167 insertions(+), 1 deletion(-)

diff --git a/bin/build-tar-image b/bin/build-tar-image
index ebb895f9..ab06a06b 100755
--- a/bin/build-tar-image
+++ b/bin/build-tar-image
@@ -188,11 +188,13 @@ function generate_loader_config
 
     serial_dev=$(build_spec serial-dev)
     os_console=$(build_spec console)
+    ht_enabled=$(build_spec ht_enabled)
     ipxe=$(build_spec ipxe)
 
-    [[ -z "$ipxe" ]] && ipxe="true"
+    [[ -z "${ipxe}" ]] && ipxe="true"
     [[ -z "${serial_dev}" ]] && serial_dev="ttyb"
     [[ -z "${os_console}" ]] && os_console="${serial_dev}"
+    [[ -z "${ht_enabled}" ]] && ht_enabled="false"
 
     case "${serial_dev}" in
     ttya) lconsole="ttya,ttyb,ttyc,ttyd" ;;
@@ -225,6 +227,7 @@ function generate_loader_config
     cp -f ${STAGE}/boot/loader.conf.tmpl ${STAGE}/boot/loader.conf
 
     echo "ipxe=\"${ipxe}\"" >>${STAGE}/boot/loader.conf
+    echo "ht_enabled=\"${ht_enabled}\"" >>${STAGE}/boot/loader.conf
     echo "console=\"${lconsole}\"" >>${STAGE}/boot/loader.conf
     echo "os_console=\"${os_console}\"" >>${STAGE}/boot/loader.conf
 }
diff --git a/build.spec b/build.spec
index 21cd7d78..505dbb19 100644
--- a/build.spec
+++ b/build.spec
@@ -5,6 +5,7 @@
   "coal-enable-serial": true,
   "no-rabbit": true,
   "clean-cache": true,
+  "ht_enabled": false,
   "// joyent-build": "set to true to enable ancillary repository use",
 
   "features": {
diff --git a/tools/bin/sdc-server b/tools/bin/sdc-server
index 9f189ddc..8d4c4c35 100755
--- a/tools/bin/sdc-server
+++ b/tools/bin/sdc-server
@@ -49,6 +49,7 @@ function usage()
         '    delete [-f] <uuid>                    - remove all CNAPI information about',
         '                                            this server',
         '    jobs <uuid>                           - list all jobs for this server',
+        '    set [<uuid>] param=value              - set parameter (for a server)',
         '    list                                  - list all servers in this DC',
         '    lookup [-h1jHc] [field=val ...]       - lookup servers matching given fields',
         '    ips <uuid>                            - output the IPs for this server',
@@ -87,6 +88,22 @@ function setup_usage()
     /* END JSSTYLED */
 }
 
+function set_usage()
+{
+    /* BEGIN JSSTYLED */
+    console.log([
+        '',
+        'Usage:',
+        '        /opt/smartdc/bin/sdc-server set [<uuid>] param=value',
+        '',
+        'Possible params:',
+        '',
+        '    ht_enabled=<true|false>                           - Hyper-threading enabled on boot',
+        ''
+    ].join('\n'));
+    /* END JSSTYLED */
+}
+
 function isUUID(str) {
     var re = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
     if (!str) {
@@ -145,6 +162,13 @@ function createClient(api, callback) {
             });
             callback(null, handle);
             return;
+        case 'SAPI':
+            handle = new sdcClients.SAPI({
+                url: 'http://' + sdc_config.sapi_admin_ips,
+                agent: false
+            });
+            callback(null, handle);
+            return;
         case 'WFAPI':
             handle = restifyClients.createJsonClient({
                 url: 'http://' + sdc_config.workflow_domain,
@@ -1045,6 +1069,122 @@ function runServerWorkflow(server_uuid, func, options, callback)
     ], callback);
 }
 
+function setServerKernelArg(server_uuid, name, value, callback)
+{
+    assert.uuid(server_uuid, 'server_uuid');
+    assert.string(name, 'name');
+    assert.string(value, 'value');
+    assert.func(callback, 'callback');
+
+    var cnapi;
+
+    vasync.pipeline({ 'funcs': [
+        function create_cnapi_client(_, cb) {
+            createClient('CNAPI', function (err, handle) {
+                if (!err) {
+                    cnapi = handle;
+                } else {
+                    err.api = 'CNAPI';
+                }
+                cb(err);
+            });
+        }, function set_boot_params(_, cb) {
+           var params = { kernel_args: {} };
+           params.kernel_args[name] = value;
+
+           cnapi.setBootParams(server_uuid, params, {}, cb);
+        }
+    ]}, callback);
+}
+
+/*
+ * Set a default CNAPI parameter via SAPI.
+ */
+function setDefaultParam(name, value, callback)
+{
+    assert.string(name, 'name');
+    assert.string(value, 'value');
+    assert.func(callback, 'callback');
+
+    var sapi;
+    var app;
+    var svc;
+
+    vasync.pipeline({ 'funcs': [
+        function create_sapi_client(_, cb) {
+            createClient('SAPI', function (err, handle) {
+                if (!err) {
+                    sapi = handle;
+                } else {
+                    err.api = 'SAPI';
+                }
+                cb(err);
+            });
+        }, function getSdcApp(_, cb) {
+            sapi.listApplications({ name: 'sdc' }, function (err, apps) {
+                if (!err)
+                    app = apps[0];
+                cb(err);
+            });
+        }, function getCnapiService(_, cb) {
+            var searchOpts = {name: 'imgapi', application_uuid: app.uuid};
+            sapi.listServices(searchOpts, function (err, svcs) {
+                if (!err)
+                    svc = svcs[0];
+                cb(err);
+            });
+        }, function setServiceMetadata(_, cb) {
+            var md = {};
+            md[name] = value;
+
+            // FIXME: no refresh of config agent like in sdcadm?? Why?
+            sapi.updateService(svc.uuid, {metadata: md}, function (err) {
+                cb(err);
+            });
+        }
+    ]}, callback);
+}
+
+function setParam(server_uuid, param, callback)
+{
+    assert.string(server_uuid, 'server_uuid');
+    assert.string(param, 'param');
+    assert.func(callback, 'callback');
+
+    var i = param.indexOf('=');
+
+    if (i === -1) {
+        set_usage();
+        callback(new Error('incorrect arguments for set'));
+        return;
+    }
+
+    var name = param.slice(0, i);
+    var value = param.slice(i + 1);
+
+    switch (name) {
+        case 'ht_enabled':
+            if (['false', 'true'].indexOf(value) === -1) {
+                set_usage();
+                callback(new Error('incorrect value ' + value +
+                    ' for ' + name));
+                break;
+            }
+
+            if (server_uuid) {
+                setServerKernelArg(server_uuid, name, value, callback);
+            } else {
+                setDefaultParam(name, value, callback);
+            }
+
+            break;
+
+        default:
+            callback(new Error('unknown server parameter' + name));
+            break;
+    }
+}
+
 function dispatchCommand(command, args, callback)
 {
     var rl;
@@ -1249,6 +1389,28 @@ function dispatchCommand(command, args, callback)
 
             break;
 
+        case 'set': // FIXME: get?
+            if (args.length === 1 && ['help', '-h'].indexOf(args[0]) !== -1) {
+                set_usage();
+                callback();
+                return;
+            }
+
+            var uuid = undefined;
+
+            if (isUUID(args[0])) {
+                uuid = args.shift();
+            }
+
+            if (args.length !== 1) {
+                set_usage();
+                callback(new Error('incorrect arguments for set'));
+                return;
+            }
+
+            setParam(uuid, args[0], callback);
+            break;
+
         default:
             usage();
             callback(new Error('unknown command: ' + command));
-- 
2.21.0

