commit 81ef05a6ff0a3bb1140758f17cdeef2a5c2d4c0e
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-07-08T13:31:04-06:00 (3 months ago)
    
    MANTA-4391 Cleanup and expand configuration

diff --git a/Cargo.lock b/Cargo.lock
index d96af2d..9f800dc 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -43,7 +43,7 @@ name = "atty"
 version = "0.2.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -61,7 +61,7 @@ dependencies = [
  "autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)",
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -72,7 +72,7 @@ version = "0.1.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -164,6 +164,15 @@ dependencies = [
  "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "c2-chacha"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "cc"
 version = "1.0.29"
@@ -221,6 +230,20 @@ name = "constant_time_eq"
 version = "0.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "core-foundation"
+version = "0.6.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "core-foundation-sys"
+version = "0.6.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "crc16"
 version = "0.4.0"
@@ -293,7 +316,7 @@ dependencies = [
 [[package]]
 name = "cueball"
 version = "0.1.0"
-source = "git+https://github.com/joyent/rust-cueball#ad0f410ef889bea296fc5b51aae8177da0edc3e2"
+source = "git+https://github.com/joyent/rust-cueball#a6bfbc762cbeb1b363dd3b9b54485f12535b5b6b"
 dependencies = [
  "base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "derive_more 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -304,10 +327,14 @@ dependencies = [
 [[package]]
 name = "cueball-postgres-connection"
 version = "0.1.0"
-source = "git+https://github.com/joyent/rust-cueball-postgres-connection#6ae53a04579e1e688a2df5cb3e8aae9a4a1e9ddb"
+source = "git+https://github.com/joyent/rust-cueball-postgres-connection#ad2310052c97ae4133d4256f2895e73bbb24bd69"
 dependencies = [
  "cueball 0.1.0 (git+https://github.com/joyent/rust-cueball)",
+ "native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde_derive 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-postgres-native-tls 0.1.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -386,7 +413,7 @@ name = "dirs"
 version = "1.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -445,6 +472,19 @@ name = "fnv"
 version = "1.0.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "foreign-types"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "foreign-types-shared"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "fuchsia-cprng"
 version = "0.1.1"
@@ -486,6 +526,15 @@ dependencies = [
  "typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "getrandom"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "h2"
 version = "0.1.16"
@@ -587,7 +636,7 @@ name = "iovec"
 version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -597,7 +646,7 @@ version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -620,6 +669,9 @@ dependencies = [
 name = "lazy_static"
 version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "spin 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
 name = "lazycell"
@@ -628,7 +680,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "libc"
-version = "0.2.48"
+version = "0.2.58"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -683,7 +735,7 @@ dependencies = [
  "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -697,7 +749,7 @@ version = "0.6.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -712,13 +764,30 @@ dependencies = [
  "ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "native-tls"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)",
+ "openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)",
+ "schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)",
+ "security-framework 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "net2"
 version = "0.2.33"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -730,7 +799,7 @@ dependencies = [
  "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)",
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -826,7 +895,7 @@ name = "num_cpus"
 version = "1.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -834,6 +903,36 @@ name = "opaque-debug"
 version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "openssl"
+version = "0.10.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "openssl-probe"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "openssl-sys"
+version = "0.9.47"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)",
+ "vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "ordermap"
 version = "0.3.5"
@@ -861,7 +960,7 @@ name = "parking_lot_core"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand 0.6.5 (git+https://github.com/rust-random/rand)",
  "rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -898,6 +997,11 @@ dependencies = [
  "siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "pkg-config"
+version = "0.3.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "postgres"
 version = "0.16.0-rc.1"
@@ -930,6 +1034,11 @@ dependencies = [
  "stringprep 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "ppv-lite86"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "proc-macro2"
 version = "0.4.27"
@@ -986,7 +1095,7 @@ version = "0.6.5"
 source = "git+https://github.com/rust-random/rand#8d7d0b6d247b6e221a21631b6579d089f1590f67"
 dependencies = [
  "autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand_chacha 0.1.1 (git+https://github.com/rust-random/rand)",
  "rand_core 0.4.0 (git+https://github.com/rust-random/rand)",
  "rand_hc 0.1.0 (git+https://github.com/rust-random/rand)",
@@ -997,6 +1106,18 @@ dependencies = [
  "rand_xorshift 0.1.1 (git+https://github.com/rust-random/rand)",
 ]
 
+[[package]]
+name = "rand"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "getrandom 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_chacha 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rand_chacha"
 version = "0.1.1"
@@ -1006,6 +1127,16 @@ dependencies = [
  "rand_core 0.4.0 (git+https://github.com/rust-random/rand)",
 ]
 
+[[package]]
+name = "rand_chacha"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rand_core"
 version = "0.3.1"
@@ -1024,6 +1155,14 @@ name = "rand_core"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "rand_core"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "getrandom 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rand_hc"
 version = "0.1.0"
@@ -1032,6 +1171,14 @@ dependencies = [
  "rand_core 0.4.0 (git+https://github.com/rust-random/rand)",
 ]
 
+[[package]]
+name = "rand_hc"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rand_isaac"
 version = "0.1.1"
@@ -1045,7 +1192,7 @@ name = "rand_jitter"
 version = "0.1.3"
 source = "git+https://github.com/rust-random/rand#8d7d0b6d247b6e221a21631b6579d089f1590f67"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand_core 0.4.0 (git+https://github.com/rust-random/rand)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1057,7 +1204,7 @@ source = "git+https://github.com/rust-random/rand#8d7d0b6d247b6e221a21631b6579d0
 dependencies = [
  "cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand_core 0.4.0 (git+https://github.com/rust-random/rand)",
  "rdrand 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1070,7 +1217,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1153,6 +1300,14 @@ dependencies = [
  "ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "remove_dir_all"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rent_to_own"
 version = "0.1.0"
@@ -1200,6 +1355,15 @@ name = "ryu"
 version = "0.2.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "schannel"
+version = "0.1.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "scoped_threadpool"
 version = "0.1.9"
@@ -1210,6 +1374,25 @@ name = "scopeguard"
 version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "security-framework"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "security-framework-sys"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "semver"
 version = "0.9.0"
@@ -1285,7 +1468,7 @@ version = "2.1.1-pre"
 source = "git+https://github.com/kellymclaughlin/bunyan?branch=build-on-smartos#986664e3fea3f53ab297c2c820eaf6eaaad2ccd8"
 dependencies = [
  "chrono 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "nix 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "slog 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "slog-json 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1324,6 +1507,11 @@ name = "spin"
 version = "0.4.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "spin"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "stable_deref_trait"
 version = "1.1.1"
@@ -1384,6 +1572,19 @@ dependencies = [
  "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "tempfile"
+version = "3.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
+ "remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "term"
 version = "0.5.2"
@@ -1399,7 +1600,7 @@ name = "termion"
 version = "1.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
  "redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1425,7 +1626,7 @@ name = "time"
 version = "0.1.42"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1528,6 +1729,18 @@ dependencies = [
  "uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "tokio-postgres-native-tls"
+version = "0.1.0-rc.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-tls 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "tokio-reactor"
 version = "0.1.8"
@@ -1594,6 +1807,16 @@ dependencies = [
  "tokio-executor 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "tokio-tls"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "tokio-udp"
 version = "0.1.3"
@@ -1616,7 +1839,7 @@ dependencies = [
  "bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)",
  "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
  "iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)",
  "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)",
  "mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1703,6 +1926,11 @@ dependencies = [
  "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "vcpkg"
+version = "0.2.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "vec_map"
 version = "0.8.1"
@@ -1779,6 +2007,7 @@ dependencies = [
 "checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"
 "checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb"
 "checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)" = "206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c"
+"checksum c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7d64d04786e0f528460fc884753cf8dddcc466be308f6026f8e355c41a0e4101"
 "checksum cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)" = "4390a3b5f4f6bce9c1d0c00128379df433e53777fdd30e92f16a529332baec4e"
 "checksum cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)" = "082bb9b28e00d3c9d39cc03e64ce4cea0f1bb9b3fde493f0cbc008472d22bdf4"
 "checksum chrono 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "158b0bd7d75cbb6bf9c25967a48a2e9f77da95876b858eadfabaa99cd069de6e"
@@ -1786,6 +2015,8 @@ dependencies = [
 "checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)" = "b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e"
 "checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)" = "ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f"
 "checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e"
+"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)" = "25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d"
+"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)" = "e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b"
 "checksum crc16 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "338089f42c427b86394a5ee60ff321da23a5c89c9d89514c829687b26359fcff"
 "checksum crossbeam 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ad4c7ea749d9fb09e23c5cb17e3b70650860553a0e2744e38446b1803bf7db94"
 "checksum crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)" = "0f0ed1a4de2235cabda8558ff5840bffb97fcb64c97827f354a451307df5f72b"
@@ -1811,12 +2042,15 @@ dependencies = [
 "checksum fallible-iterator 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"
 "checksum fixedbitset 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33"
 "checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)" = "2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3"
+"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)" = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"
+"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
 "checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba"
 "checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"
 "checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"
 "checksum futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)" = "49e7653e374fe0d0c12de4250f0bdb60680b8c80eed558c5c7538eec9c89e21b"
 "checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4"
 "checksum generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)" = "3c0f28c2f5bfb5960175af447a2da7c18900693738343dc896ffbcabd9839592"
+"checksum getrandom 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)" = "e65cce4e5084b14874c4e7097f38cab54f47ee554f9194673456ea379dcc4c55"
 "checksum h2 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)" = "ddb2b25a33e231484694267af28fec74ac63b5ccf51ee2065a5e313b834d836e"
 "checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205"
 "checksum hmac 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "f127a908633569f208325f86f71255d3363c79721d7f9fe31cd5569908819771"
@@ -1832,7 +2066,7 @@ dependencies = [
 "checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"
 "checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14"
 "checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f"
-"checksum libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)" = "e962c7641008ac010fa60a7dfdc1712449f29c44ef2d4702394aea943ee75047"
+"checksum libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)" = "6281b86796ba5e4366000be6e9e18bf35580adf9e63fbe2294aadb587613a319"
 "checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c"
 "checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)" = "c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6"
 "checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"
@@ -1843,6 +2077,7 @@ dependencies = [
 "checksum mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)" = "71646331f2619b1026cc302f87a2b8b648d5c6dd6937846a16cc8ce0f347f432"
 "checksum mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)" = "966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125"
 "checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919"
+"checksum native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)" = "4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e"
 "checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)" = "42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88"
 "checksum nix 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)" = "46f0f3210768d796e8fa79ec70ee6af172dacbe7147f5e69be5240a47778302b"
 "checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)" = "2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945"
@@ -1857,6 +2092,9 @@ dependencies = [
 "checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)" = "0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1"
 "checksum num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1a23f0ed30a54abaa0c7e83b1d2d87ada7c3c23078d1d87815af3e3b6385fbba"
 "checksum opaque-debug 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "93f5bb2e8e8dec81642920ccff6b61f1eb94fa3020c5a325c9851ff604152409"
+"checksum openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)" = "97c140cbb82f3b3468193dd14c1b88def39f341f68257f8a7fe8ed9ed3f628a5"
+"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de"
+"checksum openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)" = "75bdd6dbbb4958d38e47a1d2348847ad1eb4dc205dc5d37473ae504391865acc"
 "checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063"
 "checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13"
 "checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337"
@@ -1865,8 +2103,10 @@ dependencies = [
 "checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)" = "9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f"
 "checksum phf 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)" = "b3da44b85f8e8dfaec21adae67f95d93244b2ecf6ad2a692320598dcc8e6dd18"
 "checksum phf_shared 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)" = "234f71a15de2288bcb7e3b6515828d22af7ec8598ee6d24c3b526fa0a80b67a0"
+"checksum pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)" = "676e8eb2b1b4c9043511a9b7bea0915320d7e502b0a079fb03f9635a5252b18c"
 "checksum postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)" = "ecd478ee3885e956071eeb6462e477c93c2438ad8a7052388644f8fe7db9d276"
 "checksum postgres-protocol 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7f8a9ca2034ea1677ffc0ba134234e4beb383a0c6b5d2eda51b7f6951af30058"
+"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)" = "e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b"
 "checksum proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)" = "4d317f9caece796be1980837fd5cb3dfec5613ebdb04ad0956deea83ce168915"
 "checksum prometheus 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "48e3f33ff50a88c73ad8458fa6c22931aa7a6e19bb4a95d62816618c153b3f02"
 "checksum protobuf 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "24d5d73d2b88fddb8b8141f2730d950d88772c940ac4f8f3e93230b9a99d92df"
@@ -1874,11 +2114,15 @@ dependencies = [
 "checksum quickcheck 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)" = "3568ae5409428feef71bf062778bf5acfadc3d496b7696afa829f9eef70e17dc"
 "checksum quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)" = "cdd8e04bd9c52e0342b406469d494fcb033be4bdbe5c606016defbb1681411e1"
 "checksum rand 0.6.5 (git+https://github.com/rust-random/rand)" = "<none>"
+"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c"
 "checksum rand_chacha 0.1.1 (git+https://github.com/rust-random/rand)" = "<none>"
+"checksum rand_chacha 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e193067942ef6f485a349a113329140d0ab9e2168ce92274499bb0e9a4190d9d"
 "checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b"
 "checksum rand_core 0.4.0 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "d0e7a549d590831370895ab7ba4ea0c1b6b011d106b5ff2da6eee112615e6dc0"
+"checksum rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "615e683324e75af5d43d8f7a39ffe3ee4a9dc42c5c701167a71dc59c3a493aca"
 "checksum rand_hc 0.1.0 (git+https://github.com/rust-random/rand)" = "<none>"
+"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"
 "checksum rand_isaac 0.1.1 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_jitter 0.1.3 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_os 0.1.3 (git+https://github.com/rust-random/rand)" = "<none>"
@@ -1892,13 +2136,17 @@ dependencies = [
 "checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828"
 "checksum regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "37e7cbbd370869ce2e8dff25c7018702d10b21a20ef7135316f8daecd6c25b7f"
 "checksum regex-syntax 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)" = "8c2f35eedad5295fdf00a63d7d4b238135723f92b434ec06774dad15c7ab0861"
+"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e"
 "checksum rent_to_own 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "05a51ad2b1c5c710fa89e6b1631068dab84ed687bc6a5fe061ad65da3d0c25b2"
 "checksum rust_fast 0.1.0 (git+https://github.com/joyent/rust-fast)" = "<none>"
 "checksum rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)" = "ccc78bfd5acd7bf3e89cffcf899e5cb1a52d6fafa8dec2739ad70c9577a57288"
 "checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)" = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"
 "checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)" = "eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7"
+"checksum schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)" = "f2f6abf258d99c3c1c5c2131d99d064e94b7b3dd5f416483057f308fea253339"
 "checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8"
 "checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27"
+"checksum security-framework 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "eee63d0f4a9ec776eeb30e220f0bc1e092c3ad744b2a379e3993070364d3adc2"
+"checksum security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "9636f8989cbf61385ae4824b98c1aaa54c994d7d8b41f11c601ed799f0549a56"
 "checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"
 "checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"
 "checksum serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)" = "9f301d728f2b94c9a7691c90f07b0b4e8a4517181d9461be94c04bddeb4bd850"
@@ -1914,6 +2162,7 @@ dependencies = [
 "checksum slog-term 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "5951a808c40f419922ee014c15b6ae1cd34d963538b57d8a4778b9ca3fff1e0b"
 "checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)" = "c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be"
 "checksum spin 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)" = "ceac490aa12c567115b40b7b7fceca03a6c9d53d5defea066123debc83c5dc1f"
+"checksum spin 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "44363f6f51401c34e7be73db0db371c04705d35efbe9f7d6082e03a921a32c55"
 "checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8"
 "checksum state_machine_future 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "530e1d624baae485bce12e6647acb76aafa253346ee8a16751974eed5a24b13d"
 "checksum string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "b639411d0b9c738748b5397d5ceba08e648f4f1992231aa859af1a017f31f60b"
@@ -1922,6 +2171,7 @@ dependencies = [
 "checksum subtle 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "2d67a5a62ba6e01cb2192ff309324cb4875d0c451d55fe2319433abe7a05a8ee"
 "checksum syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)" = "f92e629aa1d9c827b2bb8297046c1ccffc57c99b947a680d3ccff1f136a3bee9"
 "checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)" = "73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015"
+"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9"
 "checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42"
 "checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096"
 "checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6"
@@ -1934,11 +2184,13 @@ dependencies = [
 "checksum tokio-fs 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "0e9cbbc8a3698b7ab652340f46633364f9eaa928ddaaee79d8b8f356dd79a09d"
 "checksum tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)" = "b53aeb9d3f5ccf2ebb29e19788f96987fa1355f8fe45ea193928eaaaf3ae820f"
 "checksum tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)" = "8e256cd39279dcf12a3154f234641ce71127ec9e710f3a0a3587581990f55a2a"
+"checksum tokio-postgres-native-tls 0.1.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)" = "45e1566988692f6b1738e52fe799dd3c6ff2590a68b2ded49aff85a7b38c950b"
 "checksum tokio-reactor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "afbcdb0f0d2a1e4c440af82d7bbf0bf91a8a8c0575bcd20c05d15be7e9d3a02f"
 "checksum tokio-sync 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "3742b64166c1ee9121f1921aea5a726098458926a6b732d906ef23b1f3ef6f4f"
 "checksum tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "1d14b10654be682ac43efee27401d792507e30fd8d26389e1da3b185de2e4119"
 "checksum tokio-threadpool 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)" = "c3fd86cb15547d02daa2b21aadaf4e37dee3368df38a526178a5afa3c034d2fb"
 "checksum tokio-timer 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)" = "2910970404ba6fa78c5539126a9ae2045d62e3713041e447f695f41405a120c6"
+"checksum tokio-tls 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "354b8cd83825b3c20217a9dc174d6a0c67441a2fae5c41bcb1ea6679f6ae0f7c"
 "checksum tokio-udp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "66268575b80f4a4a710ef83d087fdfeeabdce9b74c797535fbac18a2cb906e92"
 "checksum tokio-uds 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)" = "037ffc3ba0e12a0ab4aca92e5234e0dedeb48fddf6ccd260f1f150a36a9f2445"
 "checksum toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "87c5890a989fa47ecdc7bcb4c63a77a82c18f306714104b1decfd722db17b39e"
@@ -1953,6 +2205,7 @@ dependencies = [
 "checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)" = "dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a"
 "checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737"
 "checksum uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)" = "90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a"
+"checksum vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)" = "33dd455d0f96e90a75803cfeb7f948768c08d70a6de9a8d2362461935698bf95"
 "checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a"
 "checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"
 "checksum want 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)" = "797464475f30ddb8830cc529aaaae648d581f99e2036a928877dfde027ddf6b3"
diff --git a/config.toml.dist b/config.toml.dist
index dbc29c6..6395fef 100644
--- a/config.toml.dist
+++ b/config.toml.dist
@@ -10,6 +10,16 @@ host = "0.0.0.0"
 port = 3020
 
 [database]
+user = "postgres"
 host = "127.0.0.1"
 port = 5432
-db = "moray"
+database = "boray"
+application_name = "boray"
+tls_mode = "disable"
+
+[tokio]
+core_threads = 4
+blocking_threads = 200
+thread_keep_alive = 60
+thread_stack_size = 2097152
+thread_name_prefix = "boray-worker-"
diff --git a/src/config.rs b/src/config.rs
index 4cc921e..83bfd09 100644
--- a/src/config.rs
+++ b/src/config.rs
@@ -2,38 +2,346 @@
  * Copyright 2019 Joyent, Inc.
  */
 
+/// Data structures and helper functions for boray configuration.
+///
+/// Default configuration parameters are set in the different `Default` trait
+/// implementations in this module.  These can first be overridden by a config
+/// file specified with `-c <config>`, and then overridden again by specific
+/// command line arguments.
+
+
+use std::ffi::OsStr;
+use std::fs;
+use std::path::{Path, PathBuf};
+use std::str::FromStr;
+
+use clap::{ArgMatches, value_t};
 use serde_derive::Deserialize;
+use slog::Level;
+
+use cueball_postgres_connection::TlsConnectMode;
+
+/// A type representing the valid logging levels in a boray configuration.
+///
+/// This is necessary only because of there is not a serde `Derserialize`
+/// implementation available for the `slog::Level` type.
+#[derive(Clone, Deserialize)]
+pub enum LogLevel {
+    /// Log critical level only
+    #[serde(alias = "critical")]
+    Critical,
+    /// Log only error level and above
+    #[serde(alias = "error")]
+    Error,
+    /// Log only warning level and above
+    #[serde(alias = "warning")]
+    Warning,
+    /// Log only info level and above
+    #[serde(alias = "info")]
+    Info,
+    /// Log only debug level and above
+    #[serde(alias = "debug")]
+    Debug,
+    /// Log everything
+    #[serde(alias = "trace")]
+    Trace
+}
+
+impl FromStr for LogLevel {
+    type Err = &'static str;
+
+    fn from_str(s: &str) -> Result<Self, Self::Err> {
+        match s {
+            "critical" => Ok(LogLevel::Critical),
+            "error"    => Ok(LogLevel::Error),
+            "warning"  => Ok(LogLevel::Warning),
+            "info"     => Ok(LogLevel::Info),
+            "debug"    => Ok(LogLevel::Debug),
+            "trace"    => Ok(LogLevel::Trace),
+            _          => Err("invalid log level")
+        }
+    }
+}
+
+impl Default for LogLevel {
+    fn default() -> Self {
+        LogLevel::Debug
+    }
+}
+
+impl ToString for LogLevel {
+    fn to_string(&self) -> String {
+        match self {
+            LogLevel::Critical => "critical".into(),
+            LogLevel::Error    => "error".into(),
+            LogLevel::Warning  => "warning".into(),
+            LogLevel::Info     => "info".into(),
+            LogLevel::Debug    => "debug".into(),
+            LogLevel::Trace    => "trace".into()
+        }
+    }
+}
 
-// Describes the layout of `config.toml`
+impl From<LogLevel> for slog::Level {
+    fn from(lvl: LogLevel) -> Self {
+        match lvl {
+            LogLevel::Critical => Level::Critical,
+            LogLevel::Error    => Level::Error,
+            LogLevel::Warning  => Level::Warning,
+            LogLevel::Info     => Level::Info,
+            LogLevel::Debug    => Level::Debug,
+            LogLevel::Trace    => Level::Trace
+        }
+    }
+}
 
-#[derive(Deserialize)]
+#[derive(Clone, Default, Deserialize)]
 pub struct Config {
     pub log: ConfigLog,
     pub server: ConfigServer,
     pub metrics: ConfigMetrics,
-    pub database: ConfigDatabase
+    pub database: ConfigDatabase,
+    pub tokio: ConfigTokio
 }
 
-#[derive(Deserialize)]
+#[derive(Clone, Deserialize)]
 pub struct ConfigLog {
-    pub level: String
+    pub level: LogLevel
+}
+
+impl Default for ConfigLog {
+    fn default() -> Self {
+        ConfigLog {
+            level: LogLevel::Debug
+        }
+    }
 }
 
-#[derive(Deserialize)]
+#[derive(Clone, Deserialize)]
 pub struct ConfigServer {
     pub host: String,
     pub port: u16
 }
 
-#[derive(Deserialize)]
+impl Default for ConfigServer {
+    fn default() -> Self {
+        ConfigServer {
+            host: "127.0.0.1".into(),
+            port: 2030
+        }
+    }
+}
+
+#[derive(Clone, Deserialize)]
 pub struct ConfigMetrics {
     pub host: String,
     pub port: u16
 }
 
-#[derive(Deserialize)]
+impl Default for ConfigMetrics {
+    fn default() -> Self {
+        ConfigMetrics {
+            host: "127.0.0.1".into(),
+            port: 3020
+        }
+    }
+}
+
+#[derive(Clone, Deserialize)]
 pub struct ConfigDatabase {
+    pub user: String,
     pub host: String,
     pub port: u16,
-    pub db: String
+    pub database: String,
+    pub application_name: String,
+    pub tls_mode: TlsConnectMode,
+    pub certificate: Option<PathBuf>
+}
+
+impl Default for ConfigDatabase {
+    fn default() -> Self {
+        ConfigDatabase {
+            user: "postgres".into(),
+            host: "127.0.0.1".to_owned(),
+            port: 2030,
+            database: "boray".to_owned(),
+            application_name: "boray".into(),
+            tls_mode: TlsConnectMode::Disable,
+            certificate: None
+        }
+    }
+}
+
+#[derive(Clone, Deserialize)]
+pub struct ConfigTokio {
+    pub core_threads: usize,
+    pub blocking_threads: usize,
+    pub thread_keep_alive: u64,
+    pub thread_stack_size: usize,
+    pub thread_name_prefix: String
+}
+
+impl Default for ConfigTokio {
+    fn default() -> Self {
+        ConfigTokio {
+            core_threads: 4,
+            blocking_threads: 200,
+            thread_keep_alive: 60,
+            thread_stack_size: 2 * 1024 * 1024,
+            thread_name_prefix: "boray-worker-".into()
+        }
+    }
+}
+
+pub fn read_file<F: AsRef<OsStr> + ?Sized>(f: &F) -> Config
+{
+    let s = match fs::read(Path::new(&f)) {
+        Ok(s) => s,
+        Err(e) => {
+            eprintln!("Failed to read config file: {}", e);
+            std::process::exit(1);
+        }
+    };
+
+    toml::from_slice(&s)
+        .unwrap_or_else(|e| {
+            eprintln!("Failed to parse config file: {}", e);
+            std::process::exit(1);
+        })
+}
+
+pub fn read_cli_args(matches: &ArgMatches, config: &mut Config) {
+    value_t!(matches, "level", LogLevel)
+        .map(|l| config.log.level = l.into())
+        .unwrap_or_else(|_| ());
+
+    matches.value_of("address").map(|a| config.server.host = a.into());
+
+    value_t!(matches, "port", u16)
+        .map(|p| config.server.port = p)
+        .unwrap_or_else(|_| ());
+
+    matches.value_of("pg ip").map(|h| config.database.host = h.into());
+
+    value_t!(matches, "pg port", u16)
+        .map(|p| config.database.port = p)
+        .unwrap_or_else(|_| ());
+
+    matches.value_of("pg database").map(|db| config.database.database = db.into());
+
+    matches.value_of("metrics-address").map(|h| config.metrics.host = h.into());
+
+    value_t!(matches, "metrics-port", u16)
+        .map(|p| config.metrics.port = p)
+        .unwrap_or_else(|_| ());
+}
+
+pub mod tls {
+    use super::*;
+
+    use std::fmt;
+    use std::fs::File;
+    use std::io;
+    use std::io::Read;
+
+    use cueball_postgres_connection::{Certificate, CertificateError, TlsConfig};
+
+    #[derive(Debug)]
+    pub(crate) enum TlsError {
+        NoCertificate,
+        CertError(CertificateError),
+        IOError(io::Error)
+    }
+
+    impl From<io::Error> for TlsError {
+        fn from(error: io::Error) -> Self {
+            TlsError::IOError(error)
+        }
+    }
+
+    impl From<CertificateError> for TlsError {
+        fn from(error: CertificateError) -> Self {
+            TlsError::CertError(error)
+        }
+    }
+
+    impl fmt::Display for TlsError {
+        fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
+            match self {
+                TlsError::NoCertificate => {
+                    write!(fmt, "no TLS certificate file given")
+                },
+                TlsError::CertError(ref e) => e.fmt(fmt),
+                TlsError::IOError(ref e) => e.fmt(fmt)
+            }
+        }
+    }
+
+    pub(crate) fn tls_config(mode: TlsConnectMode, o_p: Option<PathBuf>) ->
+        Result<TlsConfig, TlsError>
+    {
+        let cert_result = maybe_read_certificate(o_p);
+        let cert_ok = cert_result.is_ok();
+
+        match mode {
+            TlsConnectMode::Disable => Ok(TlsConfig::disable()),
+            TlsConnectMode::Allow => {
+                let cert_option = cert_result.ok();
+                Ok(TlsConfig::allow(cert_option))
+            },
+            TlsConnectMode::Prefer => {
+                let cert_option = cert_result.ok();
+                Ok(TlsConfig::prefer(cert_option))
+            },
+            TlsConnectMode::Require if cert_ok => {
+                // Unwrapping the result since we've verifed the Result is Ok in
+                // the guard
+                Ok(TlsConfig::require(cert_result.unwrap()))
+            },
+            TlsConnectMode::VerifyCa if cert_ok => {
+                // Unwrapping the result since we've verifed the Result is Ok in
+                // the guard
+                Ok(TlsConfig::verify_ca(cert_result.unwrap()))
+            },
+            TlsConnectMode::VerifyFull if cert_ok  => {
+                // Unwrapping the result since we've verifed the Result is Ok in
+                // the guard
+                Ok(TlsConfig::verify_full(cert_result.unwrap()))
+            },
+            _ => {
+                // If we arrive here we know that `cert_result` is an error of the
+                // type to be returned, but the compiler does not know this and
+                // so we use the `and function here to make the compiler happy
+                // with the `Ok` side of the `Result` type.
+                cert_result.and(Ok(TlsConfig::disable()))
+            }
+        }
+    }
+
+    /// If a certificate file path is present then open the file, read the
+    /// bytes into a buffer, and attempt to interpret the bytes as a
+    /// Certificate while handling errors along the way.
+    fn maybe_read_certificate(o_p: Option<PathBuf>) ->
+        Result<Certificate, TlsError>
+    {
+        let mut buf = vec![];
+
+        o_p.ok_or(TlsError::NoCertificate)
+            .and_then(|p| {
+                File::open(p).map_err(|e| e.into())
+            })
+            .and_then(|mut f| {
+                f.read_to_end(&mut buf).map_err(|e| e.into())
+            })
+            .and_then(|_| {
+                read_certificate(&buf).map_err(|e| e.into())
+            })
+    }
+
+    fn read_certificate(buf: &[u8]) ->
+        Result<Certificate, CertificateError>
+    {
+        Certificate::from_der(buf)?;
+        Certificate::from_pem(buf)
+    }
 }
diff --git a/src/main.rs b/src/main.rs
index eefb421..e3ae734 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -4,90 +4,44 @@
 
 pub mod config;
 
+use std::default::Default;
 use std::net::{IpAddr, SocketAddr};
 use std::sync::Mutex;
-use std::fs;
 use std::thread;
+use std::time::Duration;
+
+use clap::{crate_version, crate_name};
+use slog::{Drain, LevelFilter, Logger, error, info, o};
+use tokio::net::TcpListener;
+use tokio::prelude::*;
+use tokio::runtime;
 
-use clap::{crate_version, crate_name, value_t};
 use cueball::connection_pool::ConnectionPool;
 use cueball::connection_pool::types::ConnectionPoolOptions;
 use cueball_static_resolver::StaticIpResolver;
-use cueball_postgres_connection::{PostgresConnection, PostgresConnectionConfig};
-use slog::{Drain, LevelFilter, Logger, o};
-use tokio::net::TcpListener;
-use tokio::prelude::*;
+use cueball_postgres_connection::{
+    PostgresConnection,
+    PostgresConnectionConfig
+};
 use rust_fast::server;
-use slog::{error, info};
 
 use config::Config;
 
 fn main() {
     let matches = boray::opts::parse(crate_name!());
 
-    /*
-     * Default configuration parameters are set here.  These can first be overridden by a config
-     * file specified with `-c <config>`, and then overridden again by specific command line
-     * arguments.
-     */
-    let mut level: String = "info".to_owned();
-    let mut host: String = "127.0.0.1".to_owned();
-    let mut port: u16 = 2030;
-    let mut pg_host: String = "127.0.0.1".to_owned();
-    let mut pg_port: u16 = 5432;
-    let mut pg_db: String = "moray".to_owned();
-    let mut metrics_host: String = "0.0.0.0".to_owned();
-    let mut metrics_port: u16 = 3020;
-
     // Optionally read config file
-    match matches.value_of("config") {
-        Some(f) => {
-            let s = match fs::read(f) {
-                Ok(s) => s,
-                Err(e) => {
-                    eprintln!("Failed to read config file: {}", e);
-                    std::process::exit(1);
-                }
-            };
-
-            let config: Config = match toml::from_slice(&s) {
-                Ok(config) => config,
-                Err(e) => {
-                    eprintln!("Failed to parse config file: {}", e);
-                    std::process::exit(1);
-                }
-            };
-
-            level = config.log.level;
-
-            host = config.server.host;
-            port = config.server.port;
-
-            pg_host = config.database.host;
-            pg_port = config.database.port;
-            pg_db = config.database.db;
-
-            metrics_host = config.metrics.host;
-            metrics_port = config.metrics.port;
-        },
-        None => {}
-    }
+    let mut config: Config =
+        match matches.value_of("config") {
+            Some(f) => config::read_file(f),
+            None => Default::default()
+        };
 
     // Read CLI arguments
-    level = matches.value_of("level").map_or(level, std::borrow::ToOwned::to_owned);
-
-    host = matches.value_of("address").map_or(host, std::borrow::ToOwned::to_owned);
-    port = value_t!(matches, "port", u16).unwrap_or(port);
-
-    pg_host = matches.value_of("pg ip").map_or(pg_host, std::borrow::ToOwned::to_owned);
-    pg_port = value_t!(matches, "pg port", u16).unwrap_or(pg_port);
-    pg_db = matches.value_of("pg database").map_or(pg_db, std::borrow::ToOwned::to_owned);
-
-    metrics_host = matches.value_of("metrics-address").map_or(metrics_host, std::borrow::ToOwned::to_owned);
-    metrics_port = value_t!(matches, "metrics-port", u16).unwrap_or(metrics_port);
+    config::read_cli_args(&matches, &mut config);
 
     // XXX postgres host must be an IP address currently
-    let pg_ip: IpAddr = match pg_host.parse() {
+    let pg_ip: IpAddr = match config.database.host.parse() {
         Ok(pg_ip) => pg_ip,
         Err(e) => {
             eprintln!("postgres host MUST be an IPv4 address: {}", e);
@@ -95,40 +49,42 @@ fn main() {
         }
     };
 
-    let filter_level = match level.parse() {
-        Ok(filter_level) => filter_level,
-        Err(_) => {
-            eprintln!("invalid log level: {}", level);
-            std::process::exit(1);
-        }
-    };
-
     let root_log = Logger::root(
         Mutex::new(LevelFilter::new(
             slog_bunyan::default(
                 std::io::stdout()
             ),
-            filter_level
+            config.log.level.into()
         )).fuse(),
         o!("build-id" => crate_version!())
     );
 
     // Configure and start metrics server
     let metrics_log = root_log.clone();
+    let metrics_host = config.metrics.host.clone();
+    let metrics_port = config.metrics.port.clone();
     thread::spawn(move || boray::metrics::start_server(metrics_host,
                                                        metrics_port,
                                                        metrics_log));
 
     info!(root_log, "establishing postgres connection pool");
-    let user = "postgres";
-    let application_name = "boray";
+
+    let tls_config =
+        config::tls::tls_config(config.database.tls_mode,
+                                config.database.certificate)
+        .unwrap_or_else(|e| {
+            eprintln!("TLS configuration error: {}", e);
+            std::process::exit(1);
+        });
+
     let pg_config = PostgresConnectionConfig {
-        user: Some(user.into()),
+        user: Some(config.database.user),
         password: None,
-        host: Some(pg_ip.to_string()),
-        port: Some(pg_port.into()),
-        database: Some(pg_db.into()),
-        application_name: Some(application_name.into())
+        host: Some(config.database.host),
+        port: Some(config.database.port),
+        database: Some(config.database.database),
+        application_name: Some(config.database.application_name),
+        tls_config: tls_config
     };
 
     let connection_creator = PostgresConnection::connection_creator(pg_config);
@@ -139,7 +95,7 @@ fn main() {
         rebalancer_action_delay: None
     };
 
-    let primary_backend = (pg_ip, pg_port);
+    let primary_backend = (pg_ip, config.database.port);
     let resolver = StaticIpResolver::new(vec![primary_backend]);
 
     let pool = ConnectionPool::new(
@@ -150,29 +106,45 @@ fn main() {
 
     info!(root_log, "established postgres connection pool");
 
-    let addr = [&host, ":", &port.to_string()].concat();
+    let addr = [&config.server.host,
+                ":",
+                &config.server.port.to_string()].concat();
     let addr = addr.parse::<SocketAddr>().unwrap();
 
     let listener = TcpListener::bind(&addr).expect("failed to bind");
     info!(root_log, "listening for fast requests"; "address" => addr);
 
-    tokio::run({
-        let process_log = root_log.clone();
-        let err_log = root_log.clone();
-        listener.incoming()
-            .map_err(move |e| {
-                error!(&err_log, "failed to accept socket"; "err" => %e)
-            })
-            .for_each(
-                move |socket| {
-                    let pool_clone = pool.clone();
-                    let task = server::make_task(
-                        socket,
-                        move |a, c| boray::util::msg_handler(a, &pool_clone, c),
-                        &process_log,
-                    );
-                    tokio::spawn(task);
-                    Ok(())
-                })
-    });
+    let process_log = root_log.clone();
+    let err_log = root_log.clone();
+    let server = listener.incoming()
+        .map_err(move |e| {
+            error!(&err_log, "failed to accept socket"; "err" => %e)
+        })
+        .for_each(
+            move |socket| {
+                let pool_clone = pool.clone();
+                let task = server::make_task(
+                    socket,
+                    move |a, c| boray::util::msg_handler(a, &pool_clone, c),
+                    &process_log,
+                );
+                tokio::spawn(task);
+                Ok(())
+            }
+        );
+
+    let mut rt = runtime::Builder::new()
+        .blocking_threads(config.tokio.blocking_threads)
+        .core_threads(config.tokio.core_threads)
+        .keep_alive(Some(Duration::from_secs(config.tokio.thread_keep_alive)))
+        .name_prefix(config.tokio.thread_name_prefix)
+        .stack_size(config.tokio.thread_stack_size)
+        .build()
+        .unwrap();
+
+    rt.spawn(server);
+
+    // Wait until the runtime becomes idle and shut it down.
+    rt.shutdown_on_idle()
+        .wait().unwrap();
 }
diff --git a/src/opts.rs b/src/opts.rs
index 5020202..98ed086 100644
--- a/src/opts.rs
+++ b/src/opts.rs
@@ -46,6 +46,8 @@ pub fn parse<'a>(app: &str) -> ArgMatches<'a> {
              .short("l")
              .long("level")
              .takes_value(true)
+             .possible_values(&["trace", "debug", "info",
+                                "warning", "error", "critical"])
              .required(false))
         .arg(Arg::with_name("metrics address")
              .help("Address to listen for metrics queries")
diff --git a/tests/rpc_handlers.rs b/tests/rpc_handlers.rs
index ae81da7..1ca77b7 100644
--- a/tests/rpc_handlers.rs
+++ b/tests/rpc_handlers.rs
@@ -14,7 +14,11 @@ use uuid::Uuid;
 use cueball::connection_pool::ConnectionPool;
 use cueball::connection_pool::types::ConnectionPoolOptions;
 use cueball_static_resolver::StaticIpResolver;
-use cueball_postgres_connection::{PostgresConnection, PostgresConnectionConfig};
+use cueball_postgres_connection::{
+    PostgresConnection,
+    PostgresConnectionConfig,
+    TlsConfig
+};
 
 use boray::bucket;
 use boray::error::{BorayError, BorayErrorType};
@@ -76,7 +80,8 @@ fn verify_rpc_handlers() {
         host: None,
         port: Some(pg_port),
         database: Some(pg_db.into()),
-        application_name: Some(application_name.into())
+        application_name: Some(application_name.into()),
+        tls_config: TlsConfig::disable()
     };
 
     let connection_creator = PostgresConnection::connection_creator(pg_config);
