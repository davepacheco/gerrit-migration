commit 676908af0341d68df491ea3c2b760cf9279ed00d (refs/changes/78/2378/6)
Author: Joshua M. Clulow <jmc@joyent.com>
Date:   2017-08-19T00:00:18+00:00 (2 years, 2 months ago)
    
    MANTA-2500 muskie default content length is not one size fits all

diff --git a/etc/config.coal.json b/etc/config.coal.json
index 68655c5..3907dbb 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -86,7 +86,8 @@
             "cueballOptions": {
                 "resolvers": ["nameservice.coal.joyent.us"]
             }
-        }
+        },
+	"defaultMaxStreamingSizeMB": 5120
     },
     "sharkConfig": {
         "connectTimeout": 2000,
diff --git a/lib/common.js b/lib/common.js
index b2d72ec..fc966fb 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -885,6 +885,9 @@ module.exports = {
         assert.func(options.moray, 'options.moray');
         assert.func(options.medusa, 'options.medusa');
         assert.object(options.sharkConfig, 'options.sharkConfig');
+        assert.object(options.storage, 'options.storage');
+        assert.number(options.storage.defaultMaxStreamingSizeMB,
+            'options.storage.defaultMaxStreamingSizeMB');
 
         function setup(req, res, next) {
             req.config = options;
@@ -912,6 +915,10 @@ module.exports = {
             req.sharkConfig = options.sharkConfig;
             req.sharkAgent = options.sharkAgent();
             req.medusa = options.medusa();
+            req.msk_defaults = {
+                maxStreamingSize: options.storage.defaultMaxStreamingSizeMB *
+                    1024 * 1024
+            };
 
             var _opts = {
                 account: req.owner.account,
diff --git a/lib/obj.js b/lib/obj.js
index a5cb497..23082b5 100644
--- a/lib/obj.js
+++ b/lib/obj.js
@@ -82,10 +82,6 @@ var DATA_TIMEOUT = parseInt(process.env.MUSKIE_DATA_TIMEOUT || 45000, 10);
 // Upper bound of 1 million entries in a directory.
 var MAX_DIRENTS = 1000000;
 
-// The default content-length value we use if we don't know the object size up
-// front, including streaming PUTs and some multipart uploads.
-var DEF_MAX_LEN = 53687091200;
-
 /*
  * Default minimum and maximum number of copies of an object we will store,
  * as specified in the {x-}durability-level header.
@@ -230,8 +226,9 @@ function parseArguments(req, res, next) {
 
         // First determine object size
         if (req.isChunked()) {
-            len = parseInt(req.header('max-content-length', DEF_MAX_LEN),
-                           10);
+            var maxSize = req.msk_defaults.maxStreamingSize;
+            assert.number(maxSize, 'maxSize');
+            len = parseInt(req.header('max-content-length', maxSize), 10);
             if (len < 0) {
                 next(new MaxContentLengthError(len));
                 return;
@@ -925,8 +922,6 @@ function deletePointer(req, res, next) {
 ///--- Exports
 
 module.exports = {
-
-    DEF_MAX_LEN: DEF_MAX_LEN,
     DEF_MIN_COPIES: DEF_MIN_COPIES,
     DEF_MAX_COPIES: DEF_MAX_COPIES,
     DEF_NUM_COPIES: DEF_NUM_COPIES,
diff --git a/lib/picker.js b/lib/picker.js
index 96f0f46..06aafa9 100644
--- a/lib/picker.js
+++ b/lib/picker.js
@@ -329,14 +329,9 @@ function Picker(opts) {
     assert.optionalBool(opts.multiDC, 'options.multiDC');
     assert.optionalNumber(opts.interval, 'options.interval');
     assert.optionalNumber(opts.lag, 'options.lag');
+    assert.number(opts.defaultMaxStreamingSizeMB,
+        'options.defaultMaxStreamingSizeMB');
     assert.object(opts.log, 'options.log');
-    // When a streaming upload comes into Manta, there is no content-length
-    // associated with the request so it uses the DEF_MAX_LEN for size.  That is
-    // the same size the Picker will use when looking for sharks.  In smaller
-    // deployments (coal, for example), storage zones will not have enough space
-    // for DEF_MAX_LEN, causing all streaming requests to fail.  So this should
-    // *only* be set to true for small deployments.
-    assert.optionalBool(opts.ignoreSize, 'options.ignoreSize');
 
     EventEmitter.call(this);
 
@@ -351,7 +346,7 @@ function Picker(opts) {
     this.log = opts.log.child({component: 'picker'}, true);
     this.multiDC = opts.multiDC === undefined ? true : opts.multiDC;
     this.url = opts.url;
-    this.ignoreSize = opts.ignoreSize === undefined ? false : opts.ignoreSize;
+    this.defMaxSizeMB = opts.defaultMaxStreamingSizeMB;
 
     this.client.once('connect', poll.bind(this));
     this.once('topology', this.emit.bind(this, 'connect'));
@@ -390,13 +385,12 @@ Picker.prototype.choose = function choose(opts, cb) {
     var replicas = opts.replicas || 2;
     var seen = [];
     var self = this;
-    var size = self.ignoreSize ? 1 :
-        Math.ceil((opts.size || 0) / 1048576) || 5120;
+    var size = Math.ceil((opts.size || 0) / 1048576) || this.defMaxSizeMB;
 
     log.debug({
         replicas: replicas,
         size: size,
-        ignoreSize: self.ignoreSize
+        defMaxSizeMB: this.defMaxSizeMB
     }, 'Picker.choose: entered');
 
     this.datacenters.forEach(function filterDatacenters(dc) {
diff --git a/lib/uploads/common.js b/lib/uploads/common.js
index 7462eb3..e22ca84 100644
--- a/lib/uploads/common.js
+++ b/lib/uploads/common.js
@@ -18,7 +18,6 @@ var path = require('path');
 var verror = require('verror');
 
 var common = require('../common');
-var obj = require('../obj');
 require('../errors');
 
 
@@ -1023,12 +1022,13 @@ MultipartUpload.prototype.uploadSize = function uploadSize() {
     assert.ok(this.uploadMd.loaded);
     var u = this.uploadMd.loaded.upload;
     assert.ok(u);
+    assert.number(this.req.msk_defaults.maxStreamingSize, 'maxStreamingSize');
 
     var size;
     if (hasKey(u.headers, 'content-length')) {
         size = u.headers['content-length'];
     } else {
-        size = obj.DEF_MAX_LEN;
+        size = this.req.msk_defaults.maxStreamingSize;
     }
     assert.number(size);
     assert.ok(size >= 0);
diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index 5b35117..e2be04f 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -131,6 +131,8 @@ function uploadContextRoot(req, res, next) {
  * - contentType
  */
 function validateParams(req, res, next) {
+    assert.number(req.msk_defaults.maxStreamingSize, 'maxStreamingSize');
+
     var log = req.log;
 
     if (!req.body.objectPath || (typeof (req.body.objectPath) !== 'string')) {
@@ -187,7 +189,7 @@ function validateParams(req, res, next) {
                         return;
                     }
                 } else {
-                    size = obj.DEF_MAX_LEN;
+                    size = req.msk_defaults.maxStreamingSize;
                 }
 
                 if (hasKey(headers, 'durability-level')) {
diff --git a/main.js b/main.js
index e23fb92..ae3bdcf 100644
--- a/main.js
+++ b/main.js
@@ -120,6 +120,35 @@ function configure() {
         });
     }
 
+    if (!cfg.hasOwnProperty('storage')) {
+        cfg.storage = {};
+    }
+
+    /*
+     * For streaming PUTs and multi-part uploads, we may not know the full size
+     * of the object until the completion of the request.  For object
+     * placement, we must know in advance the maximum expected size of the
+     * stream.  If the client does not provide a "Max-Content-Length" header,
+     * we assume a default value.  An operator may override this value by using
+     * the "MUSKIE_DEFAULT_MAX_STREAMING_SIZE_MB" SAPI property.
+     */
+    if (cfg.storage.hasOwnProperty('defaultMaxStreamingSizeMB')) {
+        var v = cfg.storage.defaultMaxStreamingSizeMB;
+
+        /*
+         * The structure of the configuration template is such that the value
+         * is a valid Number or not present at all.  Any other case would have
+         * already caused a JSON parse failure at an earlier point in this
+         * function.
+         */
+        if (typeof (v) !== 'number' || v < 1) {
+            LOG.fatal('invalid "defaultMaxStreamingSizeMB" value');
+            process.exit(1);
+        }
+    } else {
+        cfg.storage.defaultMaxStreamingSizeMB = 51200;
+    }
+
     if (LOG.level() <= bunyan.DEBUG)
         LOG = LOG.child({src: true});
 
@@ -274,7 +303,7 @@ function createPickerClient(cfg) {
         moray: cfg.moray,
         log: LOG.child({component: 'picker'}, true),
         multiDC: cfg.multiDC,
-        ignoreSize: cfg.ignoreSize
+        defaultMaxStreamingSizeMB: cfg.defaultMaxStreamingSizeMB
     };
 
     var client = app.picker.createClient(opts);
diff --git a/sapi_manifests/muskie/template b/sapi_manifests/muskie/template
index 6031b75..fe6e944 100644
--- a/sapi_manifests/muskie/template
+++ b/sapi_manifests/muskie/template
@@ -172,8 +172,8 @@
   },
   "storage": {
     "lag": 60000,
-    "multiDC": {{MUSKIE_MULTI_DC}}{{#MUSKIE_IGNORE_SIZE}},
-    "ignoreSize": {{MUSKIE_IGNORE_SIZE}}{{/MUSKIE_IGNORE_SIZE}},
+    "multiDC": {{MUSKIE_MULTI_DC}}{{#MUSKIE_DEFAULT_MAX_STREAMING_SIZE_MB}},
+    "defaultMaxStreamingSizeMB": {{MUSKIE_DEFAULT_MAX_STREAMING_SIZE_MB}}{{/MUSKIE_DEFAULT_MAX_STREAMING_SIZE_MB}},
     "moray": {
         "srvDomain": "{{STORAGE_MORAY_SHARD}}",
         "cueballOptions": {
