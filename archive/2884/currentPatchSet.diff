commit 013c08b381c1e8cc28bd46bdd263cb85da061774 (refs/changes/84/2884/4)
Author: Jonathan Perkin <jperkin@joyent.com>
Date:   2017-12-06T12:02:36+00:00 (1 year, 10 months ago)
    
    OS-6428 bad free in ctf_dwarf_init_die

diff --git a/usr/src/lib/libctf/common/ctf_dwarf.c b/usr/src/lib/libctf/common/ctf_dwarf.c
index 811a55bc64..7cc67e827a 100644
--- a/usr/src/lib/libctf/common/ctf_dwarf.c
+++ b/usr/src/lib/libctf/common/ctf_dwarf.c
@@ -271,6 +271,7 @@ typedef struct ctf_die {
 	uint_t		cd_mach;	/* machine type */
 	ctf_id_t	cd_voidtid;	/* void pointer */
 	ctf_id_t	cd_longtid;	/* id for a 'long' */
+	boolean_t	cd_inited;	/* is the DIE currently in use? */
 } ctf_die_t;
 
 static int ctf_dwarf_offset(ctf_die_t *, Dwarf_Die, Dwarf_Off *);
@@ -2615,6 +2616,7 @@ ctf_dwarf_free_die(ctf_die_t *cdp)
 			ctf_free(cdf->cdf_argv,
 			    sizeof (ctf_id_t) * cdf->cdf_fip.ctc_argc);
 		}
+		ctf_list_delete(&cdp->cd_funcs, cdf);
 		ctf_free(cdf, sizeof (ctf_dwfunc_t));
 	}
 
@@ -2622,12 +2624,14 @@ ctf_dwarf_free_die(ctf_die_t *cdp)
 	for (cdv = ctf_list_next(&cdp->cd_vars); cdv != NULL; cdv = ndv) {
 		ndv = ctf_list_next(cdv);
 		ctf_free(cdv->cdv_name, strlen(cdv->cdv_name) + 1);
+		ctf_list_delete(&cdp->cd_vars, cdv);
 		ctf_free(cdv, sizeof (ctf_dwvar_t));
 	}
 
 	ctf_dprintf("Trying to free bitfields\n");
 	for (cdb = ctf_list_next(&cdp->cd_bitfields); cdb != NULL; cdb = ndb) {
 		ndb = ctf_list_next(cdb);
+		ctf_list_delete(&cdp->cd_bitfields, cdb);
 		ctf_free(cdb, sizeof (ctf_dwbitf_t));
 	}
 
@@ -2636,23 +2640,29 @@ ctf_dwarf_free_die(ctf_die_t *cdp)
 	(void) dwarf_finish(cdp->cd_dwarf, &derr);
 	cdp->cd_dwarf = NULL;
 	ctf_close(cdp->cd_ctfp);
+	cdp->cd_ctfp = NULL;
 
 	cookie = NULL;
 	while ((map = avl_destroy_nodes(&cdp->cd_map, &cookie)) != NULL) {
 		ctf_free(map, sizeof (ctf_dwmap_t));
 	}
 	avl_destroy(&cdp->cd_map);
+
 	cdp->cd_errbuf = NULL;
+	cdp->cd_inited = B_FALSE;
 }
 
 static void
 ctf_dwarf_free_dies(ctf_die_t *cdies, int ndies)
 {
 	int i;
+	ctf_die_t *cdp;
 
 	ctf_dprintf("Beginning to free dies\n");
 	for (i = 0; i < ndies; i++) {
-		ctf_dwarf_free_die(&cdies[i]);
+		cdp = &cdies[i];
+		if (cdp->cd_inited == B_TRUE)
+			ctf_dwarf_free_die(cdp);
 	}
 
 	ctf_free(cdies, sizeof (ctf_die_t) * ndies);
@@ -2726,53 +2736,44 @@ ctf_dwarf_init_die(int fd, Elf *elf, ctf_die_t *cdp, int ndie, char *errbuf,
 		 * Compilers are apparently inconsistent. Some emit no DWARF for
 		 * empty files and others emit empty compilation unit.
 		 */
+		cdp->cd_inited = B_TRUE;
 		cdp->cd_voidtid = CTF_ERR;
 		cdp->cd_longtid = CTF_ERR;
 		cdp->cd_elf = elf;
 		cdp->cd_maxoff = nexthdr - 1;
 		cdp->cd_ctfp = ctf_fdcreate(fd, &ret);
-		if (cdp->cd_ctfp == NULL) {
-			ctf_free(cdp, sizeof (ctf_die_t));
+		if (cdp->cd_ctfp == NULL)
 			return (ret);
-		}
 		avl_create(&cdp->cd_map, ctf_dwmap_comp, sizeof (ctf_dwmap_t),
 		    offsetof(ctf_dwmap_t, cdm_avl));
 		cdp->cd_errbuf = errbuf;
 		cdp->cd_errlen = errlen;
-		bzero(&cdp->cd_vars, sizeof (ctf_list_t));
-		bzero(&cdp->cd_funcs, sizeof (ctf_list_t));
-		bzero(&cdp->cd_bitfields, sizeof (ctf_list_t));
 
 		if ((ret = ctf_dwarf_die_elfenc(elf, cdp, errbuf,
 		    errlen)) != 0) {
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ret);
 		}
 
 		if ((ret = ctf_dwarf_sib(cdp, NULL, &cu)) != 0) {
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ret);
 		}
 		if (cu == NULL) {
 			(void) snprintf(errbuf, errlen,
 			    "file does not contain DWARF data\n");
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ECTF_CONVBKERR);
 		}
 
 		if ((ret = ctf_dwarf_child(cdp, cu, &child)) != 0) {
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ret);
 		}
 		if (child == NULL) {
 			(void) snprintf(errbuf, errlen,
 			    "file does not contain DWARF data\n");
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ECTF_CONVBKERR);
 		}
 
@@ -2781,7 +2782,6 @@ ctf_dwarf_init_die(int fd, Elf *elf, ctf_die_t *cdp, int ndie, char *errbuf,
 
 		if ((cdp->cd_cmh = ctf_merge_init(fd, &ret)) == NULL) {
 			avl_destroy(&cdp->cd_map);
-			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ret);
 		}
 
@@ -2847,6 +2847,7 @@ ctf_dwarf_convert(int fd, Elf *elf, uint_t nthrs, int *errp, ctf_file_t **fpp,
 		*errp = ENOMEM;
 		return (CTF_CONV_ERROR);
 	}
+	bzero(cdies, sizeof (ctf_die_t) * ndies);
 
 	for (i = 0; i < ndies; i++) {
 		cdp = &cdies[i];
