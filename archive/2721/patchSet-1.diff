From 91229ac7b837fc79555e324a9b9ae6f0720a1002 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 4 Oct 2017 16:20:36 -0700
Subject: [PATCH] ZAPI-800 provision workflow: should not use HN uuid as
 placeholder server for waitlist tickets

---
 lib/workflows/fabric-common.js | 94 ++++++++++++++--------------------
 lib/workflows/job-common.js    | 33 ++++--------
 lib/workflows/provision.js     |  2 +-
 3 files changed, 49 insertions(+), 80 deletions(-)

diff --git a/lib/workflows/fabric-common.js b/lib/workflows/fabric-common.js
index cf87053..fcd1a8c 100644
--- a/lib/workflows/fabric-common.js
+++ b/lib/workflows/fabric-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -48,7 +48,7 @@ var async = require('async');
  * zone for us.  If not, we call out to SAPI to provision us a NAT zone.
  *
  * Note that we try to kick off this provision as quickly as possible in
- * the workflow, to try and minimize the amound of time we have to wait for
+ * the workflow, to try and minimize the amount of time we have to wait for
  * it.  We must wait for the provision to complete before actually sending
  * the provision to CNAPI, though, since the zone's startup scripts may
  * require internet access.
@@ -88,64 +88,46 @@ function acquireFabricTickets(job, cb) {
         }
     }
 
-    cnapi.listServers({ headnode: true }, function (listErr, cns) {
-        if (listErr) {
-            cb(listErr);
-            return;
-        }
-
-        if (!cns || cns.length === 0) {
-            cb(new Error('Headnode not found in CNAPI'));
-            return;
-        }
-
-        if (cns.length > 1) {
-            job.params.headnodes = cns;
-            cb(new Error('More than 1 headnode found in CNAPI'));
-            return;
-        }
-
-        async.mapSeries(nics, function (nic, next) {
-            var newTicket = {
-                scope: 'fabric_nat',
-                id: nic.network_uuid,
-                expires_at: (new Date(
-                    Date.now() + 600 * 1000).toISOString())
-            };
-
-            cnapi.waitlistTicketCreate(cns[0].uuid, newTicket, onCreate);
+    async.mapSeries(nics, function (nic, next) {
+        var newTicket = {
+            scope: 'fabric_nat',
+            id: nic.network_uuid,
+            expires_at: (new Date(
+                Date.now() + 600 * 1000).toISOString())
+        };
 
-            function onCreate(err, ticket) {
-                if (err) {
-                    next(err);
-                    return;
-                }
+        cnapi.waitlistTicketCreate('default', newTicket, onCreate);
 
-                // look up ticket, ensure it's not expired or invalid
-                cnapi.waitlistTicketGet(ticket.uuid,
-                    function (geterr, getticket) {
-                        if (geterr) {
-                            next(geterr);
-                            return;
-                        }
+        function onCreate(err, ticket) {
+            if (err) {
+                next(err);
+                return;
+            }
 
-                        job.params.fabricNatTickets.push({
-                            nic: nic,
-                            ticket: getticket
-                        });
-                        job.log.info(
-                            { nic: nic, ticket: getticket },
-                            'ticket status after create');
-                        next();
+            // look up ticket, ensure it's not expired or invalid
+            cnapi.waitlistTicketGet(ticket.uuid,
+                function (geterr, getticket) {
+                    if (geterr) {
+                        next(geterr);
+                        return;
+                    }
+
+                    job.params.fabricNatTickets.push({
+                        nic: nic,
+                        ticket: getticket
                     });
-            }
-        }, function (sErr) {
-            if (sErr) {
-                cb(sErr);
-            } else {
-                cb(null, 'Fabric NAT tickets acquired');
-            }
-        });
+                    job.log.info(
+                        { nic: nic, ticket: getticket },
+                        'ticket status after create');
+                    next();
+                });
+        }
+    }, function (sErr) {
+        if (sErr) {
+            cb(sErr);
+        } else {
+            cb(null, 'Fabric NAT tickets acquired');
+        }
     });
 }
 
diff --git a/lib/workflows/job-common.js b/lib/workflows/job-common.js
index f118b09..0a798b3 100644
--- a/lib/workflows/job-common.js
+++ b/lib/workflows/job-common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -1503,29 +1503,16 @@ function acquireAllocationTicket(job, cb) {
         headers: { 'x-request-id': job.params['x-request-id'] }
     });
 
-    // Find the headnode
-    cnapi.listServers({ headnode: true }, function (err, headnodes) {
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        if (!headnodes || !headnodes.length) {
-            cb(new Error('no headnodes returned'));
-            return;
-        }
-
-        var newTicket = {
-            scope: 'vm-allocate',
-            id: 'global',
-            expires_at: (new Date(
-                Date.now() + 60 * 1000).toISOString()),
-            action: 'allocate',
-            workflow_job_uuid: job.uuid
-        };
+    var newTicket = {
+        scope: 'vm-allocate',
+        id: 'global',
+        expires_at: (new Date(
+            Date.now() + 60 * 1000).toISOString()),
+        action: 'allocate',
+        workflow_job_uuid: job.uuid
+    };
 
-        cnapi.waitlistTicketCreate(headnodes[0].uuid, newTicket, onCreate);
-    });
+    cnapi.waitlistTicketCreate('default', newTicket, onCreate);
 
 
     function onCreate(err, ticket) {
diff --git a/lib/workflows/provision.js b/lib/workflows/provision.js
index efc30c2..8804bc7 100644
--- a/lib/workflows/provision.js
+++ b/lib/workflows/provision.js
@@ -19,7 +19,7 @@ var common = require('./job-common');
 var childProcess = require('child_process');
 var wfapiUrl;
 
-var VERSION = '7.5.0';
+var VERSION = '7.5.1';
 
 
 /*
-- 
2.21.0

