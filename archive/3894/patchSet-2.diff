From 8fd8c2ed3d12af29291f92f71084aadcca2195c2 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 3 May 2018 09:20:30 +0200
Subject: [PATCH] TRITON-348 sdcadm should use eslint

---
 .eslintrc                                     |  45 ++
 CHANGES.md                                    |   4 +
 Makefile                                      |   5 +-
 lib/channel.js                                |  45 +-
 lib/cli/do_add_new_agent_svcs.js              |   5 +-
 lib/cli/do_check_config.js                    |   5 +-
 lib/cli/do_check_health.js                    |  43 +-
 lib/cli/do_completion.js                      |   4 +-
 lib/cli/do_history.js                         |  35 +-
 lib/cli/do_install_docker_cert.js             |  24 +-
 lib/cli/do_instances.js                       |  11 +-
 lib/cli/do_nfs_volumes.js                     |  18 +-
 lib/cli/do_rollback.js                        |  37 +-
 lib/cli/do_services.js                        |  15 +-
 lib/cli/do_update.js                          |  49 +-
 lib/cli/do_update_agents.js                   |  88 ++-
 lib/cli/do_update_docker.js                   |   8 +-
 lib/cli/do_update_gz_tools.js                 |   5 +-
 lib/cli/do_update_other.js                    | 171 +++--
 lib/cli/experimental.js                       |   2 +-
 lib/cli/index.js                              |  41 +-
 lib/common.js                                 | 111 +--
 lib/dc-maint.js                               |  40 +-
 lib/default-fabric.js                         |  33 +-
 lib/history.js                                |   4 +-
 lib/locker.js                                 |   4 +-
 lib/logging.js                                |  18 +-
 lib/platform.js                               | 432 ++++++-----
 lib/post-setup/cmon.js                        |  30 +-
 lib/post-setup/cns.js                         |  37 +-
 lib/post-setup/common-external-nics.js        |  10 +-
 lib/post-setup/dev-headnode-prov.js           |  35 +-
 lib/post-setup/dev-sample-data.js             |  24 +-
 lib/post-setup/docker.js                      |  69 +-
 lib/post-setup/fabrics.js                     | 148 ++--
 lib/post-setup/ha-manatee.js                  | 164 ++--
 lib/post-setup/index.js                       |   8 +-
 lib/post-setup/underlay-nics.js               |  63 +-
 lib/post-setup/volapi.js                      |  35 +-
 lib/procedures/download-images.js             |   6 +-
 lib/procedures/index.js                       |   6 +-
 lib/procedures/procedure.js                   |   6 +-
 lib/procedures/shared.js                      | 160 ++--
 lib/procedures/update-dockerlogger.js         |  44 +-
 lib/procedures/update-manatee-v2.js           | 330 ++++----
 .../update-single-headnode-imgapi.js          |  16 +-
 lib/sdcadm.js                                 | 703 +++++++++++-------
 lib/steps/no-rabbit.js                        |  25 +-
 lib/steps/servers.js                          |   4 +-
 lib/steps/update_vm_size.js                   |   4 +-
 lib/ur.js                                     |   5 +-
 package.json                                  |   6 +-
 test/check-health.test.js                     |  16 +-
 test/common.js                                |  19 +-
 test/experimental.test.js                     |  18 -
 test/self-update.test.js                      |   7 +-
 test/services.test.js                         |  23 +-
 tools/mk/Makefile.deps                        |  36 +-
 tools/mk/Makefile.targ                        |  36 +-
 59 files changed, 2039 insertions(+), 1356 deletions(-)
 create mode 100644 .eslintrc

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..4116c30
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,45 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        // Local rule configuration
+        "no-unused-vars": [
+            "error",
+            {
+                // Track all unused identifiers
+                "vars": "all",
+                "args": "all",
+                "caughtErrors": "all",
+                // Don't warn on args that start with _, res or req.
+                // Added stdout and stderr to the standard joyent set.
+                "argsIgnorePattern": "^(_|res|req|stdout|stderr)",
+                // Don't warn on catch or var identifiers that start with _
+                "caughtIgnorePattern": "^_",
+                "varsIgnorePattern": "^_"
+            }
+        ],
+        "max-len": [
+            "error",
+            80,
+            {
+                "tabWidth": 8,
+                "ignoreComments": false,
+                "ignoreTrailingComments": false,
+                "ignoreUrls": true
+            }
+        ],
+    }
+}
diff --git a/CHANGES.md b/CHANGES.md
index 57a0bca..385a85b 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.17.3
+
+- TRITON-348 Support for using eslint
+
 ## 1.17.2
 
 - TOOLS-1387 `sdcadm platform install` should fail early if there's not enough
diff --git a/Makefile b/Makefile
index 5146213..c901e2e 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 #
@@ -21,7 +21,8 @@ EXTRA_DOC_DEPS += deps/restdown-brand-remora/.git
 RESTDOWN_FLAGS   = --brand-dir=deps/restdown-brand-remora
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v '/tmp/')
 JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE	 = $(JS_FILES)
+# JSL_FILES_NODE	 = $(JS_FILES)
+ESLINT_FILES	= $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
 CLEAN_FILES += ./node_modules ./build/sdcadm-*.sh ./build/sdcadm-*.imgmanifest ./build/shar-image ./man/man1/sdcadm.1 ./etc/sdcadm.completion
diff --git a/lib/channel.js b/lib/channel.js
index 23031ab..0f9d456 100644
--- a/lib/channel.js
+++ b/lib/channel.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -41,7 +41,7 @@ function ChannelCLI(top) {
 }
 util.inherits(ChannelCLI, Cmdln);
 
-ChannelCLI.prototype.init = function init(opts, args, callback) {
+ChannelCLI.prototype.init = function init(_opts, _args, _callback) {
     this.sdcadm = this.top.sdcadm;
     this.progress = this.top.progress;
     this.log = this.top.log;
@@ -51,7 +51,7 @@ ChannelCLI.prototype.init = function init(opts, args, callback) {
 
 
 ChannelCLI.prototype.do_list =
-function do_list(subcmd, opts, args, cb) {
+function do_list(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -65,7 +65,8 @@ function do_list(subcmd, opts, args, cb) {
         if (err) {
             progress('Error trying to retrieve update channels');
             var e = new errors.SDCClientError(err, 'imgapi');
-            return cb(e);
+            cb(e);
+            return;
         }
 
         if (app.metadata.update_channel) {
@@ -88,7 +89,8 @@ function do_list(subcmd, opts, args, cb) {
 
         if (opts.json) {
             console.log(JSON.stringify(channels, null, 4));
-            return cb();
+            cb();
+            return;
         }
 
         channels = channels.map(function (c) {
@@ -114,8 +116,7 @@ function do_list(subcmd, opts, args, cb) {
             validFields: Object.keys(validFieldsMap)
         });
 
-        return cb();
-
+        cb();
     });
 };
 
@@ -156,8 +157,8 @@ function do_set(subcmd, opts, args, cb) {
     }
 
     if (!args.length) {
-        return cb(new errors.UsageError(
-            'must specify a channel name'));
+        cb(new errors.UsageError('must specify a channel name'));
+        return;
     }
 
     var channel = args.shift();
@@ -168,7 +169,8 @@ function do_set(subcmd, opts, args, cb) {
         if (err) {
             progress('Error trying to retrieve update channels');
             var e = new errors.SDCClientError(err, 'imgapi');
-            return cb(e);
+            cb(e);
+            return;
         }
 
         var names = channels.map(function (c) {
@@ -177,20 +179,22 @@ function do_set(subcmd, opts, args, cb) {
 
         if (names.indexOf(channel) === -1) {
             progress('Must specify a valid channel: %j', channels);
-            return cb(new errors.UsageError('Invalid channel name'));
+            cb(new errors.UsageError('Invalid channel name'));
+            return;
         }
 
         self.sdcadm.sapi.updateApplication(app.uuid, {
             metadata: {
                 update_channel: channel
             }
-        }, function (updateErr, svc) {
+        }, function (updateErr, _svc) {
             if (updateErr) {
-                return cb(new errors.SDCClientError(updateErr, 'sapi'));
+                cb(new errors.SDCClientError(updateErr, 'sapi'));
+                return;
             }
             progress('Update channel has been successfully set to: \'%s\'',
                     channel);
-            return cb();
+            cb();
         });
     });
 };
@@ -214,7 +218,7 @@ ChannelCLI.prototype.do_set.options = [
 
 
 ChannelCLI.prototype.do_unset =
-function do_unset(subcmd, opts, args, cb) {
+function do_unset(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -229,12 +233,13 @@ function do_unset(subcmd, opts, args, cb) {
             update_channel: app.metadata.update_channel
         },
         action: 'delete'
-    }, function (err, svc) {
+    }, function (err, _svc) {
         if (err) {
-            return cb(new errors.SDCClientError(err, 'sapi'));
+            cb(new errors.SDCClientError(err, 'sapi'));
+            return;
         }
         progress('Update channel has been successfully unset');
-        return cb();
+        cb();
     });
 };
 
@@ -257,7 +262,7 @@ ChannelCLI.prototype.do_unset.options = [
 
 ChannelCLI.prototype.do_unset.hidden = true;
 
-ChannelCLI.prototype.do_get = function do_get(subcmd, opts, args, cb) {
+ChannelCLI.prototype.do_get = function do_get(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -293,7 +298,7 @@ ChannelCLI.prototype.do_get.options = [
     }
 ];
 
-//---- exports
+// --- exports
 
 module.exports = {
     ChannelCLI: ChannelCLI
diff --git a/lib/cli/do_add_new_agent_svcs.js b/lib/cli/do_add_new_agent_svcs.js
index 39502fc..9742a89 100644
--- a/lib/cli/do_add_new_agent_svcs.js
+++ b/lib/cli/do_add_new_agent_svcs.js
@@ -5,16 +5,15 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
-var errors = require('../errors');
 var steps = require('../steps');
 
 /*
  * The 'sdcadm experimental add-new-agent-svcs' CLI subcommand.
  */
-function do_add_new_agent_svcs(subcmd, opts, args, cb) {
+function do_add_new_agent_svcs(_subcmd, _opts, _args, cb) {
     console.error(
         'Warning: "sdcadm experimental add-new-agent-svcs" is deprecated.');
     console.error('Use "sdcadm experimental update-other" or');
diff --git a/lib/cli/do_check_config.js b/lib/cli/do_check_config.js
index 492403e..8706929 100644
--- a/lib/cli/do_check_config.js
+++ b/lib/cli/do_check_config.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var errors = require('../errors');
@@ -19,7 +19,8 @@ function do_check_config(subcmd, opts, args, callback) {
         this.do_help('help', {}, [subcmd], callback);
         return;
     } else if (args.length > 0) {
-        return callback(new errors.UsageError('too many args: ' + args));
+        callback(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     this.sdcadm.checkConfig({}, function (err, errs) {
diff --git a/lib/cli/do_check_health.js b/lib/cli/do_check_health.js
index ccc790c..38734f1 100644
--- a/lib/cli/do_check_health.js
+++ b/lib/cli/do_check_health.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var tabula = require('tabula');
@@ -15,7 +15,7 @@ var common = require('../common');
 var errors = require('../errors');
 
 
-//---- globals
+// --- globals
 
 var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 
@@ -27,7 +27,8 @@ var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 function do_check_health(subcmd, opts, args, callback) {
     var self = this;
     if (opts.help) {
-        return self.do_help('help', {}, [subcmd], callback);
+        self.do_help('help', {}, [subcmd], callback);
+        return;
     }
 
     var healthOpts = {};
@@ -58,13 +59,15 @@ function do_check_health(subcmd, opts, args, callback) {
             var parts = arg.split('=');
 
             if (parts[0] !== 'type') {
-                return callback(new errors.UsageError(
+                callback(new errors.UsageError(
                     'invalid argument: ' + arg));
+                return;
             }
 
             if (validTypes.indexOf(parts[1]) === -1) {
-                return callback(new errors.UsageError(
+                callback(new errors.UsageError(
                     'invalid instance type: ' + parts[1]));
+                return;
             }
 
             healthOpts.type.push(parts[1]);
@@ -93,11 +96,13 @@ function do_check_health(subcmd, opts, args, callback) {
 
     function replaceNamesWithUuids(funcName, cb) {
         if (Object.keys(names).length === 0) {
-            return cb();
+            cb();
+            return;
         }
         self.sdcadm[funcName]({}, function (err, objs) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
 
             objs.forEach(function (obj) {
@@ -116,17 +121,18 @@ function do_check_health(subcmd, opts, args, callback) {
 
     function displayResults(err, statuses) {
         if (err) {
-            return callback(new errors.InternalError(err));
+            callback(new errors.InternalError(err));
+            return;
         }
 
         var rows = statuses.map(function (status) {
             var obj = {
-                type:      status.type,
-                instance:  status.instance,
-                alias:     status.alias,
-                service:   status.service,
-                hostname:  status.hostname,
-                healthy:   status.healthy
+                type: status.type,
+                instance: status.instance,
+                alias: status.alias,
+                service: status.service,
+                hostname: status.hostname,
+                healthy: status.healthy
             };
 
             if (status.health_errors) {
@@ -170,15 +176,18 @@ function do_check_health(subcmd, opts, args, callback) {
         }
 
         if (errRows.length > 0) {
-            return callback(new Error('Some instances appear unhealthy'));
+            callback(new Error('Some instances appear unhealthy'));
+            return;
         }
 
-        return callback();
+        callback();
+        return;
     }
 
 
     if (args.length === 0) {
-        return self.sdcadm.checkHealth(healthOpts, displayResults);
+        self.sdcadm.checkHealth(healthOpts, displayResults);
+        return;
     }
 
 
diff --git a/lib/cli/do_completion.js b/lib/cli/do_completion.js
index 42becd5..4321773 100644
--- a/lib/cli/do_completion.js
+++ b/lib/cli/do_completion.js
@@ -5,12 +5,12 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  *
  * `sdcadm completion`
  */
 
-function do_completion(subcmd, opts, args, cb) {
+function do_completion(subcmd, opts, _args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
diff --git a/lib/cli/do_history.js b/lib/cli/do_history.js
index 1eab205..2312113 100644
--- a/lib/cli/do_history.js
+++ b/lib/cli/do_history.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 var errors = require('../errors');
 var common = require('../common');
@@ -25,20 +25,23 @@ function do_history(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 1) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     if (args.length === 1) {
         var id = args[0];
         if (!UUID_RE.test(id)) {
-            return cb(new errors.UsageError('Invalid UUID: ' + id));
+            cb(new errors.UsageError('Invalid UUID: ' + id));
+            return;
         }
-        return self.sdcadm.history.getHistory(id, function (err, hist) {
+        self.sdcadm.history.getHistory(id, function (err, hist) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
             console.log(JSON.stringify(hist, common.safeCycles(), 4));
-            return cb();
+            cb();
         });
     }
 
@@ -51,24 +54,27 @@ function do_history(subcmd, opts, args, cb) {
     if (opts.since) {
         try {
             options.since = new Date(opts.since.trim()).toISOString();
-        } catch (e) {
-            return cb(new errors.UsageError('Invalid Date: ' +
+        } catch (_e) {
+            cb(new errors.UsageError('Invalid Date: ' +
                         opts.since.trim()));
+            return;
         }
     }
 
     if (opts.until) {
         try {
             options.until = new Date(opts.until.trim()).toISOString();
-        } catch (e1) {
-            return cb(new errors.UsageError('Invalid Date: ' +
+        } catch (_e1) {
+            cb(new errors.UsageError('Invalid Date: ' +
                         opts.until.trim()));
+            return;
         }
     }
 
-    return self.sdcadm.history.listHistory(options, function (err, history) {
+    self.sdcadm.history.listHistory(options, function (err, history) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (opts.json) {
@@ -76,7 +82,8 @@ function do_history(subcmd, opts, args, cb) {
         } else {
             var validFieldsMap = {};
             if (!history.length) {
-                return cb();
+                cb();
+                return;
             }
             var rows = history.map(function (hst) {
                 var chgs;
@@ -125,7 +132,7 @@ function do_history(subcmd, opts, args, cb) {
                 validFields: Object.keys(validFieldsMap)
             });
         }
-        return cb();
+        cb();
     });
 }
 
diff --git a/lib/cli/do_install_docker_cert.js b/lib/cli/do_install_docker_cert.js
index 69320f7..c17c921 100644
--- a/lib/cli/do_install_docker_cert.js
+++ b/lib/cli/do_install_docker_cert.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var vasync = require('vasync');
@@ -25,17 +25,19 @@ var svcadm = require('../svcadm');
  * certificate to be used by sdc-docker.
  */
 
-function do_install_docker_cert(subcmd, opts, args, cb) {
+function do_install_docker_cert(_subcmd, opts, _args, cb) {
     var self = this;
     var dockerVm;
 
     if (!opts.key) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'must specify certificate key path (-k or --key)'));
+        return;
     }
     if (!opts.cert) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'must specify certificate path (-c or --cert)'));
+        return;
     }
 
     vasync.pipeline({funcs: [
@@ -47,14 +49,16 @@ function do_install_docker_cert(subcmd, opts, args, cb) {
             };
             self.sdcadm.vmapi.listVms(filters, function (vmsErr, vms) {
                 if (vmsErr) {
-                    return next(vmsErr);
+                    next(vmsErr);
+                    return;
                 }
                 if (Array.isArray(vms) && !vms.length) {
-                    return next(new errors.UpdateError('no "docker" VM ' +
+                    next(new errors.UpdateError('no "docker" VM ' +
                         'instance found'));
+                    return;
                 }
                 dockerVm = vms[0];
-                return next();
+                next();
             });
         },
 
@@ -73,13 +77,14 @@ function do_install_docker_cert(subcmd, opts, args, cb) {
                 self.log.trace({cmd: argv.join(' '), err: err, stdout: stdout,
                     stderr: stderr}, 'ran cp command');
                 if (err) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'error installing certificate key',
                         cmd: argv.join(' '),
                         stdout: stdout,
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 next();
             });
@@ -99,13 +104,14 @@ function do_install_docker_cert(subcmd, opts, args, cb) {
                 self.log.trace({cmd: argv.join(' '), err: err, stdout: stdout,
                     stderr: stderr}, 'ran cp command');
                 if (err) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'error installing certificate',
                         cmd: argv.join(' '),
                         stdout: stdout,
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 next();
             });
diff --git a/lib/cli/do_instances.js b/lib/cli/do_instances.js
index 27ae7bc..36a1add 100644
--- a/lib/cli/do_instances.js
+++ b/lib/cli/do_instances.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var tabula = require('tabula');
@@ -44,8 +44,9 @@ function do_instances(subcmd, opts, args, callback) {
             break;
         case 'type':
             if (validTypes.indexOf(v) === -1) {
-                return callback(new errors.UsageError(
+                callback(new errors.UsageError(
                     'invalid instance type: ' + v));
+                return;
             }
             if (!listOpts.types) {
                 listOpts.types = [];
@@ -53,8 +54,9 @@ function do_instances(subcmd, opts, args, callback) {
             listOpts.types.push(v);
             break;
         default:
-            return callback(new errors.UsageError(
+            callback(new errors.UsageError(
                 'unknown filter "' + k + '"'));
+            return;
         }
     }
 
@@ -65,7 +67,8 @@ function do_instances(subcmd, opts, args, callback) {
 
     self.sdcadm.listInsts(listOpts, function (err, insts) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var rows = insts;
diff --git a/lib/cli/do_nfs_volumes.js b/lib/cli/do_nfs_volumes.js
index 75afd09..2a38cdf 100644
--- a/lib/cli/do_nfs_volumes.js
+++ b/lib/cli/do_nfs_volumes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -17,15 +17,9 @@
  */
 
 var assert = require('assert-plus');
-var https = require('https');
-var once = require('once');
-var util = require('util'),
-    format = util.format;
 var vasync = require('vasync');
 
-var common = require('../common');
 var errors = require('../errors');
-var shared = require('../procedures/shared');
 
 var FEATURE_NAME_TO_SAPI_FLAG = {
     'cloudapi': 'experimental_cloudapi_nfs_shared_volumes',
@@ -312,7 +306,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
     }
 
     vasync.pipeline({arg: context, funcs: [
-        function checkFabricsEnabled(ctx, next) {
+        function checkFabricsEnabled(_, next) {
             var err;
 
             assert.object(self.sdcadm.sdc.metadata, 'self.sdcadm.sdc.metadata');
@@ -334,7 +328,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
             next(err);
         },
 
-        function checkFeatureDeps(ctx, next) {
+        function checkFeatureDeps(_, next) {
             var err;
             var missingFeatureDeps;
             var sdcApp = self.sdcadm.sdc;
@@ -365,7 +359,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
             next(err);
         },
 
-        function getDependenciesImageVersions(ctx, next) {
+        function getDependenciesImageVersions(_, next) {
             var imgDepsNames = Object.keys(imageDeps);
 
             if (opts.disable === true) {
@@ -409,8 +403,10 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
                      * and hyphens, $timestamp is a ISO 8601 timestamp and
                      * $commitsha is an alphanumeric lower-case string.
                      */
+                    /* eslint-disable */
                     var IMG_VERSION_RE =
                         /^([A-Za-z0-9\-]+)-(\d{8}T\d{6}Z)-g([a-z0-9]+)$/;
+                    /* eslint-enable */
 
                     assert.object(versionInfo, 'versionInfo');
 
@@ -479,7 +475,7 @@ function do_nfs_volumes(subcmd, opts, args, cb) {
             });
         },
 
-        function checkPlatformDep(ctx, next) {
+        function checkPlatformDep(_, next) {
             var cnapi = self.sdcadm.cnapi;
 
             if (opts.disable === true) {
diff --git a/lib/cli/do_rollback.js b/lib/cli/do_rollback.js
index 5057ddd..b7295b5 100644
--- a/lib/cli/do_rollback.js
+++ b/lib/cli/do_rollback.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var p = console.log;
@@ -21,7 +21,7 @@ var errors = require('../errors');
  * The 'sdcadm rollback' CLI subcommand.
  */
 
-function do_rollback(subcmd, opts, args, cb) {
+function do_rollback(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -31,14 +31,16 @@ function do_rollback(subcmd, opts, args, cb) {
     // TODO: When no file is given, read latest from /var/sdcadm/updates
     // (or maybe just add '--latest' option, like for platform cmd)
     if (!opts.file) {
-        return cb(new errors.UsageError('File including update plan ' +
+        cb(new errors.UsageError('File including update plan ' +
                     'to rollback must be specified'));
+        return;
     }
 
     if (!opts.force) {
-        return cb(new errors.UsageError('Migrations and version ' +
+        cb(new errors.UsageError('Migrations and version ' +
             'dependencies not implemented. Use "--force" to rollback ' +
             '(warning: you know what you are doing w.r.t. migrations).'));
+        return;
     }
 
     var upPlan;
@@ -53,7 +55,8 @@ function do_rollback(subcmd, opts, args, cb) {
             }, function rfCb(err, data) {
                 if (err) {
                     // TODO: InternalError
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 upPlan = JSON.parse(data);  // presume no parse error
                 next();
@@ -71,7 +74,8 @@ function do_rollback(subcmd, opts, args, cb) {
                 updatePlan: upPlan
             }, function (err, _plan) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 plan = _plan;
                 next();
@@ -80,20 +84,23 @@ function do_rollback(subcmd, opts, args, cb) {
 
         function confirm(_, next) {
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             p('');
             p('This rollback will make the following changes:');
             self.sdcadm.summarizePlan({plan: plan, progress: self.progress});
             p('');
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             var msg = 'Would you like to continue? [y/N] ';
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting rollback');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
                 next();
@@ -103,11 +110,13 @@ function do_rollback(subcmd, opts, args, cb) {
         function execPlan(_, next) {
             execStart = Date.now();
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             if (opts.dry_run) {
                 p('[dry-run] done');
-                return next();
+                next();
+                return;
             }
             self.sdcadm.execUpdatePlan({
                 plan: plan,
@@ -122,7 +131,8 @@ function do_rollback(subcmd, opts, args, cb) {
         vasync.pipeline({funcs: [
             function dropLock(_, next) {
                 if (!unlock) {
-                    return next();
+                    next();
+                    return;
                 }
                 self.sdcadm.releaseLock({unlock: unlock}, next);
             }
@@ -133,7 +143,8 @@ function do_rollback(subcmd, opts, args, cb) {
                     'unexpected error finishing up rollback');
             }
             if (err || finishRbErr) {
-                return cb(err || finishRbErr);
+                cb(err || finishRbErr);
+                return;
             }
 
             if (plan.procs.length === 0) {
diff --git a/lib/cli/do_services.js b/lib/cli/do_services.js
index 00c4ce0..a3cebf5 100644
--- a/lib/cli/do_services.js
+++ b/lib/cli/do_services.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var tabula = require('tabula');
@@ -22,7 +22,8 @@ function do_services(subcmd, opts, args, callback) {
         this.do_help('help', {}, [subcmd], callback);
         return;
     } else if (args.length !== 0) {
-        return callback(new errors.UsageError('too many args: ' + args));
+        callback(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     var i;
@@ -34,18 +35,21 @@ function do_services(subcmd, opts, args, callback) {
 
     function getInstsIfNecessary(next) {
         if (!needInsts) {
-            return next();
+            next();
+            return;
         }
         self.sdcadm.listInsts(next);
     }
 
     getInstsIfNecessary(function (iErr, insts) {
         if (iErr) {
-            return callback(iErr);
+            callback(iErr);
+            return;
         }
         self.sdcadm.getServices({}, function (err, svcs) {
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
 
             if (needInsts) {
@@ -86,6 +90,7 @@ function do_services(subcmd, opts, args, callback) {
                         };
                     } else {
                         self.log.warn({svc: svc}, 'unknown service type');
+                        return undefined;
                     }
                 }).filter(function (svc) {
                     // Filter out `undefined` entries.
diff --git a/lib/cli/do_update.js b/lib/cli/do_update.js
index 39a99b2..461ec31 100644
--- a/lib/cli/do_update.js
+++ b/lib/cli/do_update.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -84,10 +84,12 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
          */
         function getChangesFromStdin(_, next) {
             if (args.length !== 0 || opts.all) {
-                return next();
+                next();
+                return;
             } else if (process.stdin.isTTY) {
-                return next(new errors.UsageError(
+                next(new errors.UsageError(
                     'If updating all instances, --all is a required option.'));
+                return;
             }
             var chunks = [];
             process.stdin.setEncoding('utf8');
@@ -101,8 +103,9 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
                 try {
                     changes = JSON.parse(chunks.join(''));
                 } catch (ex) {
-                    return next(new errors.UsageError(ex,
+                    next(new errors.UsageError(ex,
                         'input is not valid JSON'));
+                    return;
                 }
                 if (!Array.isArray(changes)) {
                     changes = [changes];
@@ -120,14 +123,16 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
         },
         function getChangesFromArgs(_, next) {
             if (changes) {
-                return next();
+                next();
+                return;
             }
             self.cli._specFromArgs(opts, args, function (err, chgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 changes = chgs;
-                return next();
+                next();
             });
         },
         function genPlan(_, next) {
@@ -153,20 +158,23 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
         },
         function confirm(_, next) {
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             p('');
             p('This update will make the following changes:');
             self.sdcadm.summarizePlan({plan: plan, progress: self.progress});
             p('');
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             var msg = 'Would you like to continue? [y/N] ';
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting update');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
                 next();
@@ -175,11 +183,13 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
         function execPlan(_, next) {
             execStart = Date.now();
             if (plan.procs.length === 0) {
-                return next();
+                next();
+                return;
             }
             if (opts.dry_run) {
                 p('[dry-run] done');
-                return next();
+                next();
+                return;
             }
             var execUpdatePlanOpts = {
                 plan: plan,
@@ -199,7 +209,8 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
         vasync.pipeline({funcs: [
             function dropLock(_, next) {
                 if (!unlock) {
-                    return next();
+                    next();
+                    return;
                 }
                 self.sdcadm.releaseLock({unlock: unlock}, next);
             }
@@ -210,7 +221,8 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
                     'unexpected error finishing up update');
             }
             if (err || finishUpErr) {
-                return cb(err || finishUpErr);
+                cb(err || finishUpErr);
+                return;
             }
 
             if (plan.procs.length === 0) {
@@ -393,13 +405,16 @@ do_experimental_update.help = (
     '    # Update to the latest vm-agent on all setup servers.\n' +
     '    {{name}} update vm-agent --latest\n' +
     '\n' +
-    '    # Update a specific vm-agent on setup servers with the "pkg=aegean" trait.\n' +
+    '    # Update a specific vm-agent on setup servers with the \n' +
+    '    # "pkg=aegean" trait.\n' +
     '    {{name}} update vm-agent 8198c6c0-778c-11e5-8416-13cb06970b44 \\\n' +
     '        -s $(sdc-server lookup --comma traits.pkg=agean)\n' +
     '\n' +
-    '    # Update on setup servers, excluding those with a "internal=PKGSRC" trait.\n' +
+    '    # Update on setup servers, excluding those with a\n' +
+    '    #  "internal=PKGSRC" trait.\n' +
     '    {{name}} update vm-agent 8198c6c0-778c-11e5-8416-13cb06970b44 \\\n' +
-    '        $(sdc-server lookup --comma setup=true \'traits.internal!~PKGSRC\')\n' +
+    '        $(sdc-server lookup --comma  \\\n' +
+    '        setup=true \'traits.internal!~PKGSRC\')\n' +
     '\n' +
     /* END JSSTYLED */
     '\n' +
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index 7dd3121..b7c3f80 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -95,7 +95,8 @@ function updateAgents(options, callback) {
                 return;
             }
             if (Array.isArray(images) && !images.length) {
-                return cb(new errors.UpdateError('no images found'));
+                cb(new errors.UpdateError('no images found'));
+                return;
             }
             common.sortArrayOfObjects(images, ['published_at']);
             image = images[images.length - 1];
@@ -165,8 +166,7 @@ function updateAgents(options, callback) {
 
         function getChannelIfNeeded(_, next) {
             if (options.agentsshar === 'latest' ||
-                common.UUID_RE.test(options.agentsshar))
-            {
+                common.UUID_RE.test(options.agentsshar)) {
                 sdcadm.getDefaultChannel(function (err, ch) {
                     channel = ch;
                     next(err);
@@ -190,7 +190,7 @@ function updateAgents(options, callback) {
             }
         },
 
-        function verifyFilepath(ctx, next) {
+        function verifyFilepath(_, next) {
             if (!justUpdateSymlink) {
                 next();
                 return;
@@ -208,9 +208,10 @@ function updateAgents(options, callback) {
          * image is already available locally (verifying via checksum).
          * If so, then switch to using that file.
          */
-        function haveSharAlready_candidate1(ctx, next) {
+        function haveSharAlready_candidate1(_, next) {
             if (filepath) {
-                return next();
+                next();
+                return;
             }
 
             // lla == "Latest Local Agentsshar"
@@ -219,15 +220,17 @@ function updateAgents(options, callback) {
                 if (!exists) {
                     log.debug({llaLink: llaLink}, 'symlink to latest ' +
                         'agentsshar is missing, skipping shortcut');
-                    return next();
+                    next();
+                    return;
                 }
                 fs.readlink(llaLink, function (err, linkTarget) {
                     if (err) {
                         log.error({err: err, llaLink: llaLink},
                             'could not read agents "latest" symlink');
-                        return next(new errors.UpdateError(err,
+                        next(new errors.UpdateError(err,
                             'could not read agents "latest" symlink, ' +
                             llaLink));
+                        return;
                     }
 
                     var llaPath = path.resolve(
@@ -235,7 +238,8 @@ function updateAgents(options, callback) {
                     log.debug({llaPath: llaPath}, 'latest local agentsshar');
                     sha1Path(llaPath, function (checksumErr, checksum) {
                         if (checksumErr) {
-                            return next(checksumErr);
+                            next(checksumErr);
+                            return;
                         }
                         if (checksum === image.files[0].sha1) {
                             progress('The %s agentsshar already exists ' +
@@ -248,20 +252,23 @@ function updateAgents(options, callback) {
                 });
             });
         },
-        function haveSharAlready_candidate2(ctx, next) {
+        function haveSharAlready_candidate2(_, next) {
             if (filepath) {
-                return next();
+                next();
+                return;
             }
 
             var predownloadedPath = path.resolve(downloadDir,
                 'agent-' + image.uuid + '.sh');
             fs.exists(predownloadedPath, function (exists) {
                 if (!exists) {
-                    return next();
+                    next();
+                    return;
                 }
                 sha1Path(predownloadedPath, function (checksumErr, checksum) {
                     if (checksumErr) {
-                        return next(checksumErr);
+                        next(checksumErr);
+                        return;
                     }
                     if (checksum === image.files[0].sha1) {
                         progress('The %s agentsshar already exists ' +
@@ -321,7 +328,7 @@ function updateAgents(options, callback) {
                     s = serverFromUuid[id] || serverFromHostname[id];
                     if (s) {
                         // Avoid drop dupes in `opts.servers`.
-                        if (! serverToUpdateFromUuid[s.uuid]) {
+                        if (!serverToUpdateFromUuid[s.uuid]) {
                             ctx.serversToUpdate.push(s);
                             serverToUpdateFromUuid[s.uuid] = true;
                         }
@@ -370,7 +377,7 @@ function updateAgents(options, callback) {
             });
         },
 
-        function earlyAbortForJustDownload(ctx, next) {
+        function earlyAbortForJustDownload(_, next) {
             if (justDownload && filepath) {
                 progress('Agentsshar is already downloaded to %s', filepath);
                 next(true); // early abort signal
@@ -447,7 +454,8 @@ function updateAgents(options, callback) {
 
         function downloadAgentsshar(ctx, next) {
             if (filepath) {
-                return next();
+                next();
+                return;
             }
             filepath = path.resolve(downloadDir,
                 'agent-' + image.uuid + '.sh');
@@ -465,11 +473,13 @@ function updateAgents(options, callback) {
 
         function copyFileToAssetsDir(_, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
             var assetsdir = '/usbkey/extra/agents';
             if (path.dirname(filepath) === assetsdir) {
-                return next();
+                next();
+                return;
             }
             progress('Copy agentsshar to assets dir: %s', assetsdir);
             var argv = ['cp', filepath, assetsdir];
@@ -485,7 +495,7 @@ function updateAgents(options, callback) {
                     stderr: stderr
                 }, 'ran cp command');
                 if (err) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('error copying shar file to %s',
                                          assetsdir),
                         cmd: argv.join(' '),
@@ -493,6 +503,7 @@ function updateAgents(options, callback) {
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 next();
             });
@@ -504,7 +515,7 @@ function updateAgents(options, callback) {
         },
 
         function createLatestSymlink(ctx, next) {
-            if (justDownload || skipLatestSymlink) {
+            if (justDownload || skipLatestSymlink) {
                 next();
                 return;
             }
@@ -553,7 +564,9 @@ function updateAgents(options, callback) {
                  */
                 'if [[ -f /var/tmp/node.config/node.config ]]; then',
                 '   mv /var/tmp/node.config/node.config ' +
+                /* eslint-disable */
                     '/var/tmp/node.config/node.\$\$.config',
+                /* eslint-enable */
                 'fi',
                 '',
                 /*
@@ -581,7 +594,7 @@ function updateAgents(options, callback) {
                 '       exit 44',
                 '   fi',
                 '',
-                '   /usr/bin/cp /var/tmp/node.config/node.config '+
+                '   /usr/bin/cp /var/tmp/node.config/node.config ' +
                 '/opt/smartdc/config/',
                 'fi',
                 ''
@@ -612,7 +625,7 @@ function updateAgents(options, callback) {
                 /*
                  * Exit 60 if installer fails
                  */
-                '/usr/bin/bash ' + ff + ' </dev/null >' + lf +' 2>&1',
+                '/usr/bin/bash ' + ff + ' </dev/null >' + lf + ' 2>&1',
                 'if [[ "$?" -ne "0" ]]; then',
                 '   exit 60',
                 'fi',
@@ -664,8 +677,9 @@ function updateAgents(options, callback) {
 
                     var rq = ur.runQueue(queueOpts, function (err, results) {
                         if (err) {
-                            return nextCmd(new errors.UpdateError(
+                            nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
+                            return;
                         }
 
                         var errs = [];
@@ -915,28 +929,32 @@ do_update_agents.help = (
     '\n' +
     '{{options}}' +
     '\n' +
-    'Where AGENTSSHAR is one of "--latest" (the latest agentsshar package in the\n' +
-    'current channel of the update server), an agentsshar UUID in the updates\n' +
-    'server, or a path to a locally downloaded agentsshar package.\n' +
+    'Where AGENTSSHAR is one of "--latest" (the latest agentsshar package\n' +
+    'in the current channel of the update server), an agentsshar UUID in\n' +
+    'the updaes server, or a path to a locally downloaded agentsshar\n' +
+    'package.\n' +
     '\n' +
-    'Agents may only be updated on servers that are *setup*. Use "--all" for\n' +
-    'all setup servers, or pass a specific set of SERVERs. A "SERVER" is a server\n' +
-    'UUID or hostname. In a larger datacenter, getting a list of the wanted\n' +
-    'servers can be a chore. The "sdc-server lookup ..." tool is useful for this.\n' +
+    'Agents may only be updated on servers that are *setup*. Use "--all"\n' +
+    'for all setup servers, or pass a specific set of SERVERs. A "SERVER"\n' +
+    'is a server UUID or hostname. In a larger datacenter, getting a list\n' +
+    'of the wanted servers can be a chore. The "sdc-server lookup ..." tool\n' +
+    'is useful for this.\n' +
     '\n' +
     'Symlink to \'/usbkey/extra/agents/latest\' is modified to point to the\n' +
-    'file downloaded unless "--skip-latest-symlink" option is given. (This file \n' +
-    'is used to setup agents into new servers being setup).\n' +
+    'file downloaded unless "--skip-latest-symlink" option is given. (This \n' +
+    'file is used to setup agents into new servers being setup).\n' +
     '\n' +
     'Examples:\n' +
     '    # Update to the latest agentsshar on all setup servers.\n' +
     '    {{name}} update-agents --latest --all\n' +
     '\n' +
-    '    # Update a specific agentsshar on setup servers with the "pkg=aegean" trait.\n' +
+    '    # Update a specific agentsshar on setup servers with the\n' +
+    '    # "pkg=aegean" trait.\n' +
     '    {{name}} update-agents 8198c6c0-778c-11e5-8416-13cb06970b44 \\\n' +
     '        $(sdc-server lookup setup=true traits.pkg=aegean)\n' +
     '\n' +
-    '    # Update on setup servers, excluding those with a "internal=PKGSRC" trait.\n' +
+    '    # Update on setup servers, excluding those with a\n' +
+    '    # "internal=PKGSRC" trait.\n' +
     '    {{name}} update-agents 8198c6c0-778c-11e5-8416-13cb06970b44 \\\n' +
     '        $(sdc-server lookup setup=true \'traits.internal!~PKGSRC\')\n'
     /* END JSSTYLED */
diff --git a/lib/cli/do_update_docker.js b/lib/cli/do_update_docker.js
index 40faac6..f62f022 100644
--- a/lib/cli/do_update_docker.js
+++ b/lib/cli/do_update_docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  *
  * sdcadm experimental update-docker
  *
@@ -14,7 +14,7 @@
  * new command.
  */
 
-function do_update_docker(subcmd, opts, args, cb) {
+function do_update_docker(subcmd, opts, _args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
@@ -52,8 +52,8 @@ do_update_docker.options = [
         help: 'Ignored. Here for backward compatiblity.'
     }
 ];
-do_update_docker.help
-    = 'This command has been replaced by `sdcadm post-setup docker`.';
+do_update_docker.help =
+        'This command has been replaced by `sdcadm post-setup docker`.';
 
 module.exports = {
     do_update_docker: do_update_docker
diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 1377d5a..8730478 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -44,8 +44,9 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
     }
 
     if (!opts.latest && !args[0]) {
-        return finish(new errors.UsageError(
+        finish(new errors.UsageError(
             'must specify installer image UUID or --latest'));
+        return;
     }
 
     // Set or override the default channel if anything is given:
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index b09f1df..a1e7084 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var util = require('util');
@@ -48,7 +48,8 @@ function do_update_other(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     // Used by history
@@ -58,9 +59,10 @@ function do_update_other(subcmd, opts, args, cb) {
     // Helper functions
 
     function updateService(uuid, svcOpts, next) {
-        self.sdcadm.sapi.updateService(uuid, svcOpts, function (err, svc) {
+        self.sdcadm.sapi.updateService(uuid, svcOpts, function (err, _svc) {
             if (err) {
-                return next(new errors.SDCClientError(err, 'sapi'));
+                next(new errors.SDCClientError(err, 'sapi'));
+                return;
             }
             next();
         });
@@ -68,9 +70,10 @@ function do_update_other(subcmd, opts, args, cb) {
 
     function updateSdcApp(svcOpts, next) {
         var uuid = self.sdcadm.sdc.uuid;
-        self.sdcadm.sapi.updateApplication(uuid, svcOpts, function (err, svc) {
+        self.sdcadm.sapi.updateApplication(uuid, svcOpts, function (err, _svc) {
             if (err) {
-                return next(new errors.SDCClientError(err, 'sapi'));
+                next(new errors.SDCClientError(err, 'sapi'));
+                return;
             }
             next();
         });
@@ -92,18 +95,21 @@ function do_update_other(subcmd, opts, args, cb) {
 
         read(readOpts, function (rErr, val) {
             if (rErr) {
-                return cbRead(rErr);
+                cbRead(rErr);
+                return;
             }
 
             val = val.trim();
             if (!field.confirm) {
-                return cbRead(null, val);
+                cbRead(null, val);
+                return;
             }
 
             readOpts.prompt = field.name + ' confirm:';
             read(readOpts, function (rErr2, val2) {
                 if (rErr2) {
-                    return cbRead(rErr2);
+                    cbRead(rErr2);
+                    return;
                 }
 
                 val2 = val2.trim();
@@ -127,7 +133,8 @@ function do_update_other(subcmd, opts, args, cb) {
          */
         function handleNoRabbit(ctx, next) {
             if (opts.skip_no_rabbit) {
-                return next();
+                next();
+                return;
             }
 
             steps.noRabbitEnable(ctx, next);
@@ -136,7 +143,8 @@ function do_update_other(subcmd, opts, args, cb) {
         function getServices(ctx, next) {
             self.sdcadm.getServices({}, function (err, svcs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
 
                 ctx.svcs = svcs;
@@ -153,7 +161,7 @@ function do_update_other(subcmd, opts, args, cb) {
             ctx.svcs.forEach(function (svc) {
                 if (svc.type === 'vm') {
                     changes.push({
-                        service:  svc,
+                        service: svc,
                         type: 'update-service-cfg'
                     });
                 }
@@ -170,9 +178,10 @@ function do_update_other(subcmd, opts, args, cb) {
         },
 
         // Remove deprecated params.resolvers:
-        function removeSdcAppResolvers(ctx, next) {
+        function removeSdcAppResolvers(_, next) {
             if (!self.sdcadm.sdc.params.resolvers) {
-                return next();
+                next();
+                return;
             }
             progress('Remove deprecated "sdc" SAPI app params resolvers');
             self.sdcadm.sapi.updateApplication(self.sdcadm.sdc.uuid, {
@@ -180,7 +189,7 @@ function do_update_other(subcmd, opts, args, cb) {
                 params: {
                     resolvers: []
                 }
-            }, function (err, app) {
+            }, function (err) {
                 if (err) {
                     next(new errors.SDCClientError(err, 'sapi'));
                 } else {
@@ -190,11 +199,12 @@ function do_update_other(subcmd, opts, args, cb) {
 
         },
 
-        function updateSdcAppSchemas(ctx, next) {
+        function updateSdcAppSchemas(_, next) {
             var currSchema = self.sdcadm.sdc.metadata_schema;
             var latestSchema = schemas.sdc.sdc_app;
             if (currSchema && jsprim.deepEqual(currSchema, latestSchema)) {
-                return next();
+                next();
+                return;
             }
 
             self.log.debug({before: currSchema, after: latestSchema},
@@ -203,7 +213,7 @@ function do_update_other(subcmd, opts, args, cb) {
             self.sdcadm.sapi.updateApplication(self.sdcadm.sdc.uuid, {
                 action: 'update',
                 metadata_schema: latestSchema
-            }, function (err, app) {
+            }, function (err) {
                 if (err) {
                     next(new errors.SDCClientError(err, 'sapi'));
                 } else {
@@ -226,7 +236,7 @@ function do_update_other(subcmd, opts, args, cb) {
                             nextSvc);
                         return;
                     }
-                    return nextSvc();
+                    nextSvc();
                 }
             }, next);
         },
@@ -235,9 +245,8 @@ function do_update_other(subcmd, opts, args, cb) {
             var svcsToUpdate = [];
             NEW_SERVICES.forEach(function (svcName) {
                 var svc = ctx.svcFromName[svcName];
-                if (svc && svc.metadata && (
-                    !svc.metadata.SERVICE_DOMAIN || !svc.metadata['sapi-url']))
-                {
+                if (svc && svc.metadata && (!svc.metadata.SERVICE_DOMAIN ||
+                    !svc.metadata['sapi-url'])) {
                     svcsToUpdate.push(svc);
                 }
             });
@@ -284,7 +293,8 @@ function do_update_other(subcmd, opts, args, cb) {
             });
 
             if (Object.keys(mdataUpdates).length === 0) {
-                return next();
+                next();
+                return;
             }
             progress('Adding domain keys to "sdc" SAPI app metadata: %j',
                 mdataUpdates);
@@ -298,7 +308,8 @@ function do_update_other(subcmd, opts, args, cb) {
                 active: true
             }, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 if (pkgs.length) {
                     assert.equal(pkgs.length, 1);
@@ -310,7 +321,8 @@ function do_update_other(subcmd, opts, args, cb) {
 
         function ensureSdc4096Pkg(ctx, next) {
             if (ctx.sdc_4096) {
-                return next();
+                next();
+                return;
             }
 
             /*
@@ -409,9 +421,10 @@ function do_update_other(subcmd, opts, args, cb) {
 
         function ensureDockerPkg_Svc(ctx, next) {
             var dockerSvc = ctx.svcFromName.docker;
-            if (!dockerSvc || dockerSvc.params.billing_id === ctx.sdc_4096.uuid)
-            {
-                return next();
+            if (!dockerSvc ||
+                dockerSvc.params.billing_id === ctx.sdc_4096.uuid) {
+                next();
+                return;
             }
 
             progress('Update "docker" service params to use sdc_4096 pkg');
@@ -425,7 +438,8 @@ function do_update_other(subcmd, opts, args, cb) {
         function ensureDockerPkg_Insts(ctx, next) {
             var dockerSvc = ctx.svcFromName.docker;
             if (!dockerSvc) {
-                return next();
+                next();
+                return;
             }
 
             // Dev Note: sdcadm.listInsts returns the subset of objects. It
@@ -437,14 +451,16 @@ function do_update_other(subcmd, opts, args, cb) {
                 owner_uuid: self.sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, dockerVms) {
                 if (vmsErr) {
-                    return next(vmsErr);
+                    next(vmsErr);
+                    return;
                 }
 
                 var toResize = dockerVms.filter(function (vm) {
                     return vm.billing_id !== ctx.sdc_4096.uuid;
                 });
                 if (!toResize.length) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Resizing %d docker instance(s) to sdc_4096 ' +
@@ -468,14 +484,14 @@ function do_update_other(subcmd, opts, args, cb) {
                                 // We want to point out the '--force-resize'
                                 // option when appropriate.
                                 if (errors.haveErrCode(resizeErr,
-                                    'InsufficientCapacity'))
-                                {
+                                    'InsufficientCapacity')) {
                                     progress('Note: You can use ' +
                                         '"--force-resize" to override ' +
                                         '"InsufficientCapacity".');
                                 }
-                                return nextVm(new errors.SDCClientError(
+                                nextVm(new errors.SDCClientError(
                                     resizeErr, 'vmapi'));
+                                return;
                             }
                             progress('Resizing vm %s (%s). Note: *not* ' +
                                 'waiting for job %s', vm.uuid, vm.alias,
@@ -487,7 +503,7 @@ function do_update_other(subcmd, opts, args, cb) {
             });
         },
 
-        function updateRegionName(ctx, next) {
+        function updateRegionName(_, next) {
             var regionName;
             var keyInitiallyMounted;
 
@@ -495,14 +511,16 @@ function do_update_other(subcmd, opts, args, cb) {
                 encoding: 'utf8'
             }, function (err, data) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 /* JSSTYLED */
                 } else if (data.search(/region_name=/) !== -1) {
                     log.debug('region_name is up to date');
-                    return next();
+                    next();
+                    return;
                 }
 
-                function readRegionName(_, next_) {
+                function readRegionName(__, next_) {
                     progress('Updating "region_name" for this data center');
 
                     var field = {
@@ -512,20 +530,23 @@ function do_update_other(subcmd, opts, args, cb) {
                     };
                     readField(field, function (err1, value) {
                         if (err1) {
-                            return next_(err1);
+                            next_(err1);
+                            return;
                         }
 
                         regionName = value;
-                        return next_();
+                        next_();
+                        return;
                     });
                 }
 
-                function appendRegionName(_, next_) {
+                function appendRegionName(__, next_) {
                     var region = 'region_name=' + regionName + '\n';
                     fs.appendFile('/mnt/usbkey/config', region,
                             function (err1) {
                         if (err1) {
-                            return next_(err1);
+                            next_(err1);
+                            return;
                         }
 
                         var argv = [
@@ -537,34 +558,37 @@ function do_update_other(subcmd, opts, args, cb) {
                     });
                 }
 
-                function updateSapiRegionName(_, next_) {
+                function updateSapiRegionName(__, next_) {
                     var metadata = { region_name: regionName };
                     updateSdcApp({ metadata: metadata }, next_);
                 }
 
-                function isKeyMounted(_, next_) {
+                function isKeyMounted(__, next_) {
                     common.isUsbKeyMounted(self.log, function (er, mounted) {
                         if (er) {
-                            return next_(er);
+                            next_(er);
+                            return;
                         }
                         keyInitiallyMounted = mounted;
-                        return next_();
+                        next_();
                     });
                 }
 
                 vasync.pipeline({funcs: [
                     readRegionName,
                     isKeyMounted,
-                    function mountUsbKey(_, next2) {
+                    function mountUsbKey(__, next2) {
                         if (keyInitiallyMounted) {
-                            return next2();
+                            next2();
+                            return;
                         }
                         common.mountUsbKey(self.log, next2);
                     },
                     appendRegionName,
-                    function unmountUsbKey(_, next2) {
+                    function unmountUsbKey(__, next2) {
                         if (keyInitiallyMounted) {
-                            return next2();
+                            next2();
+                            return;
                         }
                         common.unmountUsbKey(self.log, next2);
                     },
@@ -573,15 +597,17 @@ function do_update_other(subcmd, opts, args, cb) {
             });
         },
 
-        function addSapiDomainToNodeConfig(ctx, next) {
+        function addSapiDomainToNodeConfig(_, next) {
             var nodeConfig = '/usbkey/extra/joysetup/node.config';
             fs.readFile(nodeConfig, { encoding: 'utf8' }, function (err, data) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 /* JSSTYLED */
                 } else if (data.search(/sapi_domain=/) !== -1) {
                     log.debug('sapi_domain already present on node.config');
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Appending "sapi_domain" to node.config');
@@ -619,19 +645,21 @@ function do_update_other(subcmd, opts, args, cb) {
             }, next);
         },
 
-        function runVmapiMigrations(ctx, next) {
+        function runVmapiMigrations(_, next) {
             self.sdcadm.vmapi.listVms({
                 'tag.smartdc_role': 'vmapi',
                 state: 'running'
             }, function (vmsErr, vms_) {
                 if (vmsErr) {
-                    return next(vmsErr);
+                    next(vmsErr);
+                    return;
                 }
                 var vmapi = vms_[0];
                 self.sdcadm.imgapi.getImage(vmapi.image_uuid,
                         function (imgErr, img) {
                     if (imgErr) {
-                        return next(imgErr);
+                        next(imgErr);
+                        return;
                     }
                     var parts = img.version.split('-');
                     var curImg = parts[parts.length - 2];
@@ -648,7 +676,7 @@ function do_update_other(subcmd, opts, args, cb) {
                             log: log
                         }, next);
                     } else {
-                        return next();
+                        next();
                     }
                 });
             });
@@ -656,18 +684,21 @@ function do_update_other(subcmd, opts, args, cb) {
 
         function removeHostvolumeInstances(ctx, next) {
             if (!ctx.svcFromName.hostvolume) {
-                return next();
+                next();
+                return;
             }
 
             self.sdcadm.sapi.listInstances({
                 service_uuid: ctx.svcFromName.hostvolume.uuid
             }, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
 
                 if (!insts.length) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Removing deprecated hostvolume instances');
@@ -687,15 +718,17 @@ function do_update_other(subcmd, opts, args, cb) {
 
         function removeHostvolumeService(ctx, next) {
             if (!ctx.svcFromName.hostvolume) {
-                return next();
+                next();
+                return;
             }
             progress('Removing deprecated hostvolume service');
             self.sdcadm.sapi.deleteService(ctx.svcFromName.hostvolume.uuid,
                     function (err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
-                return next();
+                next();
             });
         },
 
@@ -854,7 +887,8 @@ function do_update_other(subcmd, opts, args, cb) {
     ]}, function (err) {
         if (!history) {
             self.sdcadm.log.warn('History not set for update-other');
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (err) {
@@ -862,14 +896,11 @@ function do_update_other(subcmd, opts, args, cb) {
         }
         self.sdcadm.history.updateHistory(history, function (err2) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
             log.debug('done update-other successfully');
-            if (err2) {
-                return cb(err2);
-            } else {
-                return cb();
-            }
+            cb(err2);
         });
     });
 }
diff --git a/lib/cli/experimental.js b/lib/cli/experimental.js
index e541e56..335df83 100644
--- a/lib/cli/experimental.js
+++ b/lib/cli/experimental.js
@@ -42,7 +42,7 @@ function ExperimentalCLI(top) {
 }
 util.inherits(ExperimentalCLI, Cmdln);
 
-ExperimentalCLI.prototype.init = function init(opts, args, callback) {
+ExperimentalCLI.prototype.init = function init(_opts, _args, _callback) {
     this.sdcadm = this.top.sdcadm;
     this.progress = this.top.progress;
     this.log = this.top.log;
diff --git a/lib/cli/index.js b/lib/cli/index.js
index e3a5b5a..e5bd67c 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -36,15 +36,15 @@ var DCMaintCLI = require('../dc-maint').DCMaintCLI;
 var defFabric = require('../default-fabric');
 
 
-//---- globals
+// --- globals
 
 var pkg = require('../../package.json');
 var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 
 
-//---- Custom dashdash option types
+// --- Custom dashdash option types
 
-function parseCommaSepStringNoEmpties(option, optstr, arg) {
+function parseCommaSepStringNoEmpties(_option, _optstr, arg) {
     /* JSSTYLED */
     return arg.trim().split(/\s*,\s*/g).filter(function (part) {
         return part;
@@ -68,7 +68,7 @@ cmdln.dashdash.addOptionType({
 });
 
 
-//---- CLI class
+// --- CLI class
 
 function CLI() {
     Cmdln.call(this, {
@@ -121,12 +121,15 @@ CLI.prototype.init = function init(opts, args, callback) {
         });
     } catch (e) {
         if (e.code && e.code === 'ENOSPC') {
-            return callback(new Error('Not enought space to create log file'));
+            callback(new Error('Not enought space to create log file'));
+            return;
         } else if (e.code && e.code === 'EACCES') {
-            return callback(new Error(
+            callback(new Error(
                 'Insufficient permissions to create log file'));
+            return;
         } else {
-            return callback(e);
+            callback(e);
+            return;
         }
     }
 
@@ -141,7 +144,8 @@ CLI.prototype.init = function init(opts, args, callback) {
             'buildstamp');
         fs.readFile(buildstampPath, 'utf8', function (err, data) {
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
             var buildstamp = data.trim();
             p('%s %s (%s)', self.name, pkg.version, buildstamp);
@@ -150,9 +154,6 @@ CLI.prototype.init = function init(opts, args, callback) {
         return;
     }
     this.opts = opts;
-    if (opts.verbose) {   //XXX drop this when switching to cmdln v2
-        process.env.DEBUG = 1;
-    }
 
     /**
      * Call this to emit a progress message to the "user" on stdout.
@@ -168,7 +169,8 @@ CLI.prototype.init = function init(opts, args, callback) {
     // Cmdln class handles `opts.help`.
     Cmdln.prototype.init.call(this, opts, args, function (err) {
         if (err || err === false) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         /*
@@ -247,7 +249,8 @@ CLI.prototype._specFromArgs = function _specFromArgs(opts, args, cb) {
         },
         function getSpecFromArgs(_, next) {
             if (args.length === 0) {
-                return next();
+                next();
+                return;
             }
             changes = [];
             for (var i = 0; i < args.length; i++) {
@@ -264,8 +267,9 @@ CLI.prototype._specFromArgs = function _specFromArgs(opts, args, cb) {
                     // server = parts[0];
                     inst = svcOrInst;
                     if (svcFromName[parts[1]] === undefined) {
-                        return next(new errors.UsageError(
+                        next(new errors.UsageError(
                             'unknown service: ' + parts[1]));
+                        return;
                     }
                 } else {
                     if (svcFromName[svcOrInst] !== undefined) {
@@ -314,7 +318,8 @@ CLI.prototype._specFromArgs = function _specFromArgs(opts, args, cb) {
         },
         function getSpecFromAllServices(_, next) {
             if (args.length !== 0 || !opts.all) {
-                return next();
+                next();
+                return;
             }
             self.log.debug('getSpecFromAllServices');
 
@@ -462,13 +467,13 @@ CLI.prototype.do_history = require('./do_history').do_history;
 CLI.prototype.do_completion = require('./do_completion');
 
 
-//---- exports
+// --- exports
 
 module.exports = CLI;
 
 
 
-//---- mainline
+// --- mainline
 
 if (require.main === module) {
     var cli = new CLI();
diff --git a/lib/common.js b/lib/common.js
index 1c69875..5fec74d 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -109,7 +109,8 @@ function loadConfig(options, cb) {
                     function (err, data) {
                 if (err) {
                     // TODO: InternalError
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 config = JSON.parse(data);  // presume no parse error
                 next();
@@ -118,20 +119,23 @@ function loadConfig(options, cb) {
         function loadConfigPath(_, next) {
             fs.exists(CONFIG_PATH, function (exists) {
                 if (!exists) {
-                    return next();
+                    next();
+                    return;
                 }
                 log.trace({CONFIG_PATH: CONFIG_PATH}, 'load config file');
                 fs.readFile(CONFIG_PATH, {encoding: 'utf8'},
                         function (err, data) {
                     if (err) {
                         // TODO: ConfigError
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     try {
                         config = objCopy(JSON.parse(data), config);
                     } catch (parseErr) {
                         // TODO: ConfigError
-                        return next(parseErr);
+                        next(parseErr);
+                        return;
                     }
                     next();
                 });
@@ -142,22 +146,24 @@ function loadConfig(options, cb) {
             log.trace({cmd: cmd}, 'load SDC config');
             exec(cmd, function (err, stdout, stderr) {
                 if (err) {
-                    return next(new InternalError({
+                    next(new InternalError({
                         message:
                             'could not load configuration from /usbkey/config',
                         cmd: cmd,
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 var sdcConfig;
                 try {
                     sdcConfig = JSON.parse(stdout);
                 } catch (parseErr) {
-                    return next(new InternalError({
+                    next(new InternalError({
                         message: 'unexpected /usbkey/config content',
                         cause: parseErr
                     }));
+                    return;
                 }
                 config.dns_domain = sdcConfig.dns_domain;
                 config.datacenter_name = sdcConfig.datacenter_name;
@@ -196,20 +202,17 @@ function loadConfig(options, cb) {
 
                 var amqpInfo = sdcConfig.rabbitmq.split(':');
                 config.amqp = {
-                    login:    amqpInfo[0],
+                    login: amqpInfo[0],
                     password: amqpInfo[1],
-                    host:     sdcConfig.rabbitmq_domain,
-                    port:     +amqpInfo[3]
+                    host: sdcConfig.rabbitmq_domain,
+                    port: +amqpInfo[3]
                 };
 
                 next();
             });
         }
     ]}, function done(err) {
-        if (err) {
-            return cb(err);
-        }
-        cb(null, config);
+        cb(err, config);
     });
 }
 
@@ -333,7 +336,8 @@ function promptYesNo(opts_, cb) {
                 finish('n');
             } else {
                 stdout.write('Please enter "y", "yes", "n" or "no".\n');
-                return promptYesNo(opts, cb);
+                promptYesNo(opts, cb);
+                return;
             }
             break;
         case '\u0003':
@@ -785,15 +789,17 @@ function imgadmGetRemote(opts, cb) {
                 '\tstdout:\n%s\n' +
                 '\tstderr:\n%s', opts.img_uuid,
                 argv, err.code, stdout.trim(), stderr.trim());
-            return cb(new errors.InternalError({
+            cb(new errors.InternalError({
                 message: msg,
                 cause: err
             }));
+            return;
         }
         var res = JSON.parse(stdout);
         if (!res.length || !res[0].result || !res[0].result.stdout) {
             opts.log.error({res: res}, 'imgadm get result');
-            return cb('Unexpected imgadm get output');
+            cb('Unexpected imgadm get output');
+            return;
         }
         var img = JSON.parse(res[0].result.stdout);
         cb(null, img);
@@ -829,7 +835,9 @@ function manateeAdmRemote(opts, cb) {
         '-n',
         opts.server,
         /* JSSTYLED */
-        format('/usr/sbin/zlogin %s "source ~/.bashrc; /opt/smartdc/manatee/node_modules/.bin/manatee-adm %s"', opts.vm, opts.cmd)
+        format('/usr/sbin/zlogin %s "source ~/.bashrc; ' +
+            '/opt/smartdc/manatee/node_modules/.bin/manatee-adm %s"',
+            opts.vm, opts.cmd)
     ];
 
     execFilePlus({
@@ -837,18 +845,19 @@ function manateeAdmRemote(opts, cb) {
         log: opts.log
     }, function (execErr, stdout, stderr) {
         if (execErr) {
-            return cb(execErr);
+            cb(execErr);
+            return;
         }
         try {
             // Due to the -j option of sdc-oneachnode:
             var res = JSON.parse(stdout);
             var out = res[0].result.stdout.trim() || null;
             var err = res[0].result.stderr.trim() || null;
-            return cb(null, out, err);
-        } catch (e) {
+            cb(null, out, err);
+        } catch (_e) {
             // In case of error, just return the raw result for later
             // inspection, given it doesn't have the expected JSON format:
-            return cb(execErr, stdout, stderr);
+            cb(execErr, stdout, stderr);
         }
     });
 }
@@ -1094,7 +1103,10 @@ function callConfigAgentSync(opts, cb) {
         '-n',
         opts.server,
         /* JSSTYLED */
-        format('/usr/sbin/zlogin %s "/opt/smartdc/config-agent/build/node/bin/node /opt/smartdc/config-agent/agent.js -f /opt/smartdc/config-agent/etc/config.json -s"', opts.vm)
+        format('/usr/sbin/zlogin %s ' +
+            '"/opt/smartdc/config-agent/build/node/bin/node' +
+            '/opt/smartdc/config-agent/agent.js -f ' +
+            '/opt/smartdc/config-agent/etc/config.json -s"', opts.vm)
     ];
     execFilePlus({
         argv: argv,
@@ -1157,18 +1169,19 @@ function execRemote(opts, cb) {
         log: opts.log
     }, function (execErr, stdout, stderr) {
         if (execErr) {
-            return cb(execErr);
+            cb(execErr);
+            return;
         }
         try {
             // Due to the -j option of sdc-oneachnode:
             var res = JSON.parse(stdout);
             var out = res[0].result.stdout.trim() || null;
             var err = res[0].result.stderr.trim() || null;
-            return cb(null, out, err);
-        } catch (e) {
+            cb(null, out, err);
+        } catch (_e) {
             // In case of error, just return the raw result for later
             // inspection, given it doesn't have the expected JSON format:
-            return cb(execErr, stdout, stderr);
+            cb(execErr, stdout, stderr);
         }
     });
 }
@@ -1194,11 +1207,11 @@ function execWithRetries(opts) {
     });
 
     // Called when function is called with function's args.
-    attempt.on('call', function (args) {
+    attempt.on('call', function (_args) {
     });
 
     // Called with results each time function returns with or w/o errors.
-    attempt.on('callback', function (err) {
+    attempt.on('callback', function (_err) {
     });
 
     // Called on backoff.
@@ -1378,12 +1391,13 @@ function mountUsbKey(log, cb) {
     function alreadyMounted(ctx, next) {
         isUsbKeyMounted(log, function (err, mounted) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             if (mounted) {
                 ctx.keyIsMounted = true;
             }
-            return next();
+            next();
         });
     }
 
@@ -1404,7 +1418,7 @@ function mountUsbKey(log, cb) {
             if (st.isFile()) {
                 ctx.utilityExists = true;
             }
-            return next();
+            next();
         });
     }
 
@@ -1439,7 +1453,8 @@ function mountUsbKey(log, cb) {
 
     function mountUsingScript(ctx, next) {
         if (ctx.utilityExists || ctx.keyIsMounted) {
-            return next();
+            next();
+            return;
         }
         var argv = [ctx.script];
         execFilePlus({
@@ -1447,17 +1462,19 @@ function mountUsbKey(log, cb) {
             log: log
         }, function (err, stdout, stderr) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             if (stderr.trim() !== '') {
-                return next(new Error(
+                next(new Error(
                     'Unexpected /usbkey/scripts/mount-usb.sh stderr: %s',
                     stderr.trim()));
+                return;
             }
             if (stdout.trim() === '') {
                 ctx.keyIsMounted = true;
             }
-            return next();
+            next();
         });
     }
 
@@ -1526,7 +1543,8 @@ function unmountUsbKey(log, cb) {
 
     function unmountUsingUtility(ctx, next) {
         if (!ctx.utilityExists || !ctx.keyIsMounted) {
-            return next();
+            next();
+            return;
         }
 
         var argv = [ctx.utility, 'unmount'];
@@ -1535,23 +1553,26 @@ function unmountUsbKey(log, cb) {
             log: log
         }, function (err, stdout, stderr) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             if (stderr.trim() !== '') {
-                return next(new Error('Unexpected sdc-usbkey stderr: %s',
+                next(new Error('Unexpected sdc-usbkey stderr: %s',
                             stderr.trim()));
+                return;
             }
             if (stdout.trim() === '') {
                 ctx.keyIsMounted = false;
             }
-            return next();
+            next();
         });
 
     }
 
     function unmountUsingScript(ctx, next) {
         if (ctx.utilityExists || !ctx.keyIsMounted) {
-            return next();
+            next();
+            return;
         }
         var argv = [ctx.script, '/mnt/usbkey'];
         execFilePlus({
@@ -1600,6 +1621,9 @@ function copyFile(src, dst, cb) {
     assert.string(dst, 'dst');
     assert.func(cb, 'cb');
 
+    var readStream = fs.createReadStream(src);
+    var writeStream = fs.createWriteStream(dst);
+
     function onErr(err) {
         writeStream.destroy();
         readStream.destroy();
@@ -1609,9 +1633,6 @@ function copyFile(src, dst, cb) {
         }));
     }
 
-    var readStream = fs.createReadStream(src);
-    var writeStream = fs.createWriteStream(dst);
-
     readStream.once('error', onErr);
     writeStream.once('error', onErr);
     writeStream.once('finish', function () {
@@ -1625,7 +1646,7 @@ function copyFile(src, dst, cb) {
 // prevent 'TypeError: Converting circular structure to JSON'
 function safeCycles() {
     var objs = [];
-    return function (key, value) {
+    return function (_key, value) {
         if (!value || typeof (value) !== 'object') {
             return value;
         }
@@ -1650,7 +1671,7 @@ function serverAdminIpFromSysinfo(sysinfo) {
     return adminIp;
 }
 
-//---- exports
+// --- exports
 
 module.exports = {
     UUID_RE: UUID_RE,
diff --git a/lib/dc-maint.js b/lib/dc-maint.js
index 28125c2..97bd189 100644
--- a/lib/dc-maint.js
+++ b/lib/dc-maint.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -30,27 +30,26 @@ function DCMaintCLI(top) {
     this.top = top;
     Cmdln.call(this, {
         name: 'sdcadm dc-maint',
-        /* BEGIN JSSTYLED */
         desc: 'DC maintenance related sdcadm commands.\n' +
               '\n' +
               'Show and modify the DC maintenance mode.\n' +
               '\n' +
-              '"Maintenance mode" for an SDC means that Cloud API is in read-only\n' +
-              'mode. Modifying requests will return "503 Service Unavailable".\n' +
-              'Likewise, if Docker is installed it will behave on the same way.\n' +
-              'Workflow API will be drained on entering maint mode.\n' +
+              '"Maintenance mode" for an SDC means that Cloud API is in\n' +
+              'read-only mode. Modifying requests will return "503 Service\n' +
+              'Unavailable". Likewise, if Docker is installed it will\n' +
+              'behave on the same way. Workflow API will be drained on\n' +
+              ' entering maint mode.\n' +
               '\n' +
-              'When specified, the maintenance message will be used as part of the\n' +
-              'response body for the modifying requests:\n' +
+              'When specified, the maintenance message will be used as part\n' +
+              'of the response body for the modifying requests:\n' +
               '{\n' +
               '    "code":"ServiceUnavailableError",\n' +
               '    "message":"SmartDataCenter is being upgraded"\n' +
               '}\n' +
               '\n' +
-              'Limitation: This does not current wait for config changes to be made\n' +
-              'and cloudapi instances restarted. That means there is a window after\n' +
-              'starting that new jobs could come in.\n',
-        /* END JSSTYLED */
+              'Limitation: This does not current wait for config changes to\n' +
+              'be made and cloudapi instances restarted. That means there\n' +
+              'is a window afte rstarting that new jobs could come in.\n',
         helpOpts: {
             minHelpCol: 24 /* line up with option help */
         },
@@ -112,7 +111,7 @@ DCMaintCLI.prototype.init = function init(opts, args, callback) {
 };
 
 
-DCMaintCLI.prototype.do_start = function do_start(subcmd, opts, args, cb) {
+DCMaintCLI.prototype.do_start = function do_start(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -129,13 +128,15 @@ DCMaintCLI.prototype.do_start = function do_start(subcmd, opts, args, cb) {
     }
 
     if (opts.eta && opts.eta <= new Date()) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
                     '--eta must be set to any time in the future'));
+        return;
     }
 
     if (opts.cloudapi_only && opts.docker_only) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             '--cloudapi-only and --docker-only are mutually exclusive'));
+        return;
     }
 
     self.sdcadm.dcMaintStart({
@@ -193,7 +194,7 @@ DCMaintCLI.prototype.do_start.options = [
 ];
 
 
-DCMaintCLI.prototype.do_stop = function do_stop(subcmd, opts, args, cb) {
+DCMaintCLI.prototype.do_stop = function do_stop(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -228,7 +229,7 @@ DCMaintCLI.prototype.do_stop.help = (
         '{{options}}'
 );
 
-DCMaintCLI.prototype.do_status = function do_status(subcmd, opts, args, cb) {
+DCMaintCLI.prototype.do_status = function do_status(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -244,7 +245,8 @@ DCMaintCLI.prototype.do_status = function do_status(subcmd, opts, args, cb) {
 
     self.sdcadm.dcMaintStatus(function (err, status) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         if (opts.json) {
             self.progress(JSON.stringify(status, null, 4));
@@ -293,7 +295,7 @@ DCMaintCLI.prototype.do_status.help = (
         '{{options}}'
 );
 
-//---- exports
+// --- exports
 
 module.exports = {
     DCMaintCLI: DCMaintCLI
diff --git a/lib/default-fabric.js b/lib/default-fabric.js
index c834349..2a0d269 100644
--- a/lib/default-fabric.js
+++ b/lib/default-fabric.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -32,23 +32,26 @@ function defFabricAddVLAN(opts, cb) {
     var napi = opts.sdcadm.napi;
     napi.listFabricVLANs(opts.account, {}, function (listErr, vlans) {
         if (listErr) {
-            return cb(listErr);
+            cb(listErr);
+            return;
         }
         for (var i = 0; i < vlans.length; i++) {
             if (vlans[i].name === vlanCfg.name) {
                 opts.progress('Already have default fabric VLAN for account %s',
                     opts.account);
-                return cb(null, vlans[i]);
+                cb(null, vlans[i]);
+                return;
             }
         }
         napi.createFabricVLAN(opts.account, vlanCfg, function (err, vlan) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'napi'));
+                cb(new errors.SDCClientError(err, 'napi'));
+                return;
             }
             opts.progress('Created default fabric VLAN\n' +
                 '(name: "%s", ID: %d)\nfor account %s',
                 vlan.name, vlan.vlan_id, opts.account);
-            return cb(null, vlan);
+            cb(null, vlan);
         });
     });
 
@@ -71,25 +74,28 @@ function defFabricAddNetwork(opts, cb) {
     napi.listFabricNetworks(opts.account, netCfg.vlan_id, {},
             function (listErr, nets) {
         if (listErr) {
-            return cb(listErr);
+            cb(listErr);
+            return;
         }
         for (var i = 0; i < nets.length; i++) {
             if (nets[i].name === netCfg.name) {
                 opts.progress(
                     'Already have default fabric network for account %s',
                     opts.account);
-                return cb(null, nets[i]);
+                cb(null, nets[i]);
+                return;
             }
         }
         napi.createFabricNetwork(opts.account, netCfg.vlan_id, netCfg,
                 function (err, net) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'napi'));
+                cb(new errors.SDCClientError(err, 'napi'));
+                return;
             }
             opts.progress('Created default fabric network\n' +
                 '(subnet: %s, ID: %s)\nfor account %s',
                 net.subnet, net.uuid, opts.account);
-            return cb(null, net);
+            cb(null, net);
         });
     });
 }
@@ -113,7 +119,8 @@ function addDefaultFabric(opts, cb) {
         defFabricAddNetwork
     ]}, function (err, results) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         opts.progress('Successfully added default fabric for account %s',
             opts.account);
@@ -136,11 +143,13 @@ function do_default_fabric(subcmd, opts, args, cb) {
         function ensureAccountUuid(ctx, next) {
             if (common.UUID_RE.test(args[0])) {
                 ctx.account = args[0];
-                return next();
+                next();
+                return;
             }
             self.sdcadm.ufds.getUser(args[0], function (err, account) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 ctx.account = account.uuid;
                 self.sdcadm._ufds.close(next);  // Yuck
diff --git a/lib/history.js b/lib/history.js
index 04c9287..468fc3b 100644
--- a/lib/history.js
+++ b/lib/history.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 /*
  * This file includes both, the `sdcadm history` command and the functions
@@ -456,7 +456,7 @@ History.prototype.catchUp = function (cb) {
                             return;
                         }
 
-                        self._getOrCreateOnSAPI(data, function (er2, h) {
+                        self._getOrCreateOnSAPI(data, function (er2, _h) {
                             if (er2) {
                                 self.sdcadm.log.info({
                                     err: er2
diff --git a/lib/locker.js b/lib/locker.js
index d7e858f..ae3f145 100644
--- a/lib/locker.js
+++ b/lib/locker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -31,7 +31,9 @@ var RETRY_CODES = [
 ];
 var RETRY_DELAY = 250; // ms
 
+/* eslint-disable */
 var LOCKFILE_MODE = 0644;
+/* eslint-enable */
 
 var LOCKFILES = [];
 var NEXT_HOLDER_ID = 1;
diff --git a/lib/logging.js b/lib/logging.js
index 6a7f2ca..dddbd42 100644
--- a/lib/logging.js
+++ b/lib/logging.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -135,7 +135,7 @@ OpenOnErrorFileStream.prototype._startWriting = function (level, rec) {
     // figure out what's going on.
     for (r in this.ringbuffer.records) {
         r = this.ringbuffer.records[r];
-        if (r.level >= level && (!rec || r != rec)) {
+        if (r.level >= level && (!rec || r !== rec)) {
             this.write(r);
         }
     }
@@ -227,7 +227,8 @@ function createLogger(opts) {
  */
 function flushLogs(logs, callback) {
     if (!logs) {
-        return callback();
+        callback();
+        return;
     }
 
     var streams = [];
@@ -236,7 +237,8 @@ function flushLogs(logs, callback) {
     }
 
     if (logs.length === 0) {
-        return callback();
+        callback();
+        return;
     }
 
     logs.forEach(function (log) {
@@ -252,14 +254,16 @@ function flushLogs(logs, callback) {
 
     function _doneClose() {
         closed++;
-        if (closed == toClose) {
-            return callback();
+        if (closed === toClose) {
+            callback();
+            return;
         }
     }
 
     streams.forEach(function (str) {
         if (!str || !str.stream) {
-            return _doneClose();
+            _doneClose();
+            return;
         }
 
         str.stream.once('drain', function () {
diff --git a/lib/platform.js b/lib/platform.js
index 284615c..ca88c27 100644
--- a/lib/platform.js
+++ b/lib/platform.js
@@ -61,15 +61,17 @@ Platform.prototype.getHNPlatform = function getHNPlatform(cb) {
         function isKeyMounted(_, next) {
             common.isUsbKeyMounted(self.log, function (err, mounted) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 keyInitiallyMounted = mounted;
-                return next();
+                next();
             });
         },
         function mountUsbKey(_, next) {
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
 
             common.mountUsbKey(self.log, next);
@@ -80,7 +82,8 @@ Platform.prototype.getHNPlatform = function getHNPlatform(cb) {
             }, function (err, data) {
                 if (err) {
                     err.cause = 'Read grub menu to load HN default platform';
-                    return next(new errors.InternalError(err));
+                    next(new errors.InternalError(err));
+                    return;
                 }
                 var defaultSection;
                 var sections = data.split('\n\n').filter(function (s) {
@@ -96,22 +99,24 @@ Platform.prototype.getHNPlatform = function getHNPlatform(cb) {
                             if (r !== null) {
                                 defaultSection = Number(r[1]);
                             }
-                            return false;
                         });
+                        return false;
                     }
                 });
 
                 if (!sections[defaultSection]) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'Cannot find default section in grub menu'
                     }));
+                    return;
                 }
                 var pattern = /\/os\/(\w+)\/platform/;
                 var result = sections[defaultSection].match(pattern);
                 if (result === null) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'Cannot find default platform in grub menu'
                     }));
+                    return;
                 }
 
                 hnPlatform = result[1];
@@ -120,7 +125,8 @@ Platform.prototype.getHNPlatform = function getHNPlatform(cb) {
         },
         function unmountUsbKey(_, next) {
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
 
             common.unmountUsbKey(self.log, next);
@@ -140,15 +146,17 @@ Platform.prototype.listUSBKeyPlatforms = function listUSBKeyPlatforms(cb) {
         function isKeyMounted(_, next) {
             common.isUsbKeyMounted(self.log, function (err, mounted) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 keyInitiallyMounted = mounted;
-                return next();
+                next();
             });
         },
         function mountUsbKey(_, next) {
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
             common.mountUsbKey(self.log, next);
         },
@@ -159,7 +167,8 @@ Platform.prototype.listUSBKeyPlatforms = function listUSBKeyPlatforms(cb) {
                 log: self.log
             }, function (err, stdout, stderr) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 var ary = stdout.trim().split('\n');
                 usbKeyPlatforms = ary.sort(function (a, b) {
@@ -170,14 +179,15 @@ Platform.prototype.listUSBKeyPlatforms = function listUSBKeyPlatforms(cb) {
                     return (i.toUpperCase());
                 });
 
-                return next(null);
+                next(null);
             });
         },
         function unmountUsbKey(_, next) {
             // Do not try to unmount the key if it was already mounted by
             // something else when our process started
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
             common.unmountUsbKey(self.log, next);
         }
@@ -203,10 +213,12 @@ function getPlatformsWithServers(cb) {
 
         self.sdcadm.cnapi.listPlatforms(function (err, platforms) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'cnapi'));
+                cb(new errors.SDCClientError(err, 'cnapi'));
+                return;
             }
             if (Array.isArray(platforms) && !platforms.length) {
-                return cb(new errors.UpdateError('no platforms found'));
+                cb(new errors.UpdateError('no platforms found'));
+                return;
             }
 
             self._rawPlatforms = platforms;
@@ -215,10 +227,12 @@ function getPlatformsWithServers(cb) {
                 setup: true
             }, function (er2, servers) {
                 if (er2) {
-                    return cb(new errors.SDCClientError(er2, 'cnapi'));
+                    cb(new errors.SDCClientError(er2, 'cnapi'));
+                    return;
                 }
                 if (Array.isArray(servers) && !servers.length) {
-                    return cb(new errors.UpdateError('no servers found'));
+                    cb(new errors.UpdateError('no servers found'));
+                    return;
                 }
 
                 self._rawServers = servers;
@@ -256,8 +270,8 @@ function getPlatformsWithServers(cb) {
                         }
 
                         if (platforms[s.current_platform]) {
-                            platforms[s.current_platform].current_platform.
-                                push({
+                            platforms[s.current_platform].current_platform
+                                .push({
                                 uuid: s.uuid,
                                 hostname: s.hostname
                             });
@@ -267,11 +281,12 @@ function getPlatformsWithServers(cb) {
                     }
                 }, function (er3, results) {
                     if (er3) {
-                        return cb(new errors.InternalError({
+                        cb(new errors.InternalError({
                             message: 'Error fetching platforms servers'
                         }));
+                        return;
                     }
-                    return cb(null, platforms);
+                    cb(null, platforms);
                 });
             });
         });
@@ -286,10 +301,11 @@ function getLatestPlatformInstalled(cb) {
     var self = this;
     self.listUSBKeyPlatforms(function (err, platforms) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         var latest = platforms.pop();
-        return cb(null, latest);
+        cb(null, latest);
     });
 };
 
@@ -301,11 +317,13 @@ function createLatestLink(cb) {
 
     self.getCNAPIVersion(function (err, version) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         // Do nothing if we've already deprecated latest in CNAPI
         if (version >= MIN_CNAPI_VERSION_NO_LATEST) {
-            return cb();
+            cb();
+            return;
         }
 
         self.progress('Updating \'latest\' link');
@@ -315,11 +333,13 @@ function createLatestLink(cb) {
             log: self.log
         }, function (err1, stdout1, stderr1) {
             if (err1) {
-                return cb(err1);
+                cb(err1);
+                return;
             }
             self.getLatestPlatformInstalled(function (err2, latest) {
                 if (err2) {
-                    return cb(err2);
+                    cb(err2);
+                    return;
                 }
                 argv = ['ln', '-s', latest, 'latest'];
                 common.execFilePlus({
@@ -328,9 +348,10 @@ function createLatestLink(cb) {
                     log: self.log
                 }, function (err3, stdout3, stderr3) {
                     if (err3) {
-                        return cb(err3);
+                        cb(err3);
+                        return;
                     }
-                    return cb();
+                    cb();
                 });
             });
         });
@@ -354,17 +375,20 @@ Platform.prototype.available = function available(opts, cb) {
 
     self.getLatestPlatformInstalled(function (err2, latest) {
         if (err2) {
-            return cb(err2);
+            cb(err2);
+            return;
         }
         var filter = {
             name: 'platform'
         };
         self.sdcadm.updates.listImages(filter, function (err, images) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'updates'));
+                cb(new errors.SDCClientError(err, 'updates'));
+                return;
             }
             if (Array.isArray(images) && !images.length) {
-                return cb(new errors.UpdateError('no images found'));
+                cb(new errors.UpdateError('no images found'));
+                return;
             }
             common.sortArrayOfObjects(images, ['published_at']);
             images = images.map(function (img) {
@@ -376,7 +400,7 @@ Platform.prototype.available = function available(opts, cb) {
             }).filter(function (i) {
                 return (i.version > latest);
             });
-            return cb(null, images);
+            cb(null, images);
         });
     });
 };
@@ -386,16 +410,19 @@ Platform.prototype.list = function list(cb) {
     var self = this;
     self.getDefaultBootPlatform(function (er1, defPlatform) {
         if (er1) {
-            return cb(er1);
+            cb(er1);
+            return;
         }
         self.getPlatformsWithServers(function (err, platforms) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
 
             self.listUSBKeyPlatforms(function (er2, usbKeyPlatforms) {
                 if (er2) {
-                    return cb(er2);
+                    cb(er2);
+                    return;
                 }
 
                 platforms = Object.keys(platforms).map(function (k) {
@@ -409,7 +436,7 @@ Platform.prototype.list = function list(cb) {
                     };
                 });
 
-                return cb(null, platforms);
+                cb(null, platforms);
             });
         });
     });
@@ -819,46 +846,53 @@ function setDefaultBootPlatform(version, cb) {
         function getBootParams(_, next) {
             self.sdcadm.cnapi.getBootParams('default', function (err, params) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
                 bootParams = params;
-                return next();
+                next();
+                return;
             });
         },
         function getPlatformsList(_, next) {
             if (self._rawPlatforms.length) {
-                return next();
+                next();
+                return;
             }
             self.sdcadm.cnapi.listPlatforms(function (err, platforms) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
 
                 self._rawPlatforms = platforms;
-                return next();
+                next();
             });
         },
         function verifyPlatformExists(_, next) {
             if (version === 'latest') {
-                return next();
+                next();
+                return;
             }
 
             if (Object.keys(self._rawPlatforms).indexOf(version) === -1) {
-                return next(new errors.UsageError(
+                next(new errors.UsageError(
                     'Invalid platform version: ' + version));
+                return;
             }
-            return next();
+            next();
         },
         function getLatestPlatformVersion(_, next) {
             if (version !== 'latest') {
-                return next();
+                next();
+                return;
             }
             Object.keys(self._rawPlatforms).forEach(function (pl) {
                 if (self._rawPlatforms[pl].latest) {
                     latestPlatform = pl;
                 }
             });
-            return next();
+            next();
         },
         function saveChangesToHistory(_, next) {
             changes.push({
@@ -872,15 +906,17 @@ function setDefaultBootPlatform(version, cb) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
         function setDefaultBootParams(_, next) {
             if (version === 'latest' && bootParams.platform !== 'latest') {
-                return next();
+                next();
+                return;
             }
             self.progress(
                 'Updating default boot platform to \'%s\'',
@@ -889,26 +925,28 @@ function setDefaultBootPlatform(version, cb) {
                 platform: (latestPlatform ? latestPlatform : version)
             }, function (err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
-                return next();
+                next();
             });
         }
     ]}, function pipeCb(err) {
         if (!hist) {
             self.sdcadm.log.warn('History not set for default platform');
-            return cb(err);
+            cb(err);
+            return;
         }
         if (err) {
             hist.error = err;
         }
         self.sdcadm.history.updateHistory(hist, function (err2) {
             if (err) {
-                return cb(err);
+                cb(err);
             } else if (err2) {
-                return cb(err2);
+                cb(err2);
             } else {
-                return cb(null, bootParams);
+                cb(null, bootParams);
             }
         });
     });
@@ -945,42 +983,48 @@ Platform.prototype.deprecateLatest = function deprecateLatest(callback) {
         function checkMinCNAPIVersion(_, next) {
             self.getCNAPIVersion(function (err, version) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 isVersionOk = (version >= MIN_CNAPI_VERSION_NO_LATEST);
-                return next();
+                next();
             });
         },
         function getBootParams(_, next) {
             if (!isVersionOk) {
-                return next();
+                next();
+                return;
             }
             self.sdcadm.cnapi.getBootParams('default', function (err, params) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
                 bootParams = params;
-                return next();
+                next();
             });
         },
         function getLatestPlatformVersion(_, next) {
             if (!isVersionOk) {
-                return next();
+                next();
+                return;
             }
             if (!self._usingLatest.length &&
                     (bootParams.platform !== 'latest')) {
-                return next();
+                next();
+                return;
             }
             Object.keys(self._rawPlatforms).forEach(function (pl) {
                 if (self._rawPlatforms[pl].latest) {
                     latestPlatform = pl;
                 }
             });
-            return next();
+            next();
         },
         function setDefBootParams(_, next) {
             if (!isVersionOk || bootParams.platform !== 'latest') {
-                return next();
+                next();
+                return;
             }
             self.progress(
                 'Updating default boot platform from \'latest\' to \'%s\'',
@@ -989,14 +1033,16 @@ Platform.prototype.deprecateLatest = function deprecateLatest(callback) {
                 platform: latestPlatform
             }, function (err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
-                return next();
+                next();
             });
         },
         function updateCNs(_, next) {
             if (!isVersionOk || !self._usingLatest.length) {
-                return next();
+                next();
+                return;
             }
             self.progress('Updating boot platform  from \'latest\' to' +
                     '\'%s\' for CNs %s', latestPlatform,
@@ -1005,7 +1051,7 @@ Platform.prototype.deprecateLatest = function deprecateLatest(callback) {
             var cns = self._usingLatest.slice();
             self._usingLatest = [];
 
-            return self.assign({
+            self.assign({
                 platform: latestPlatform,
                 server: cns
             }, next);
@@ -1017,15 +1063,14 @@ Platform.prototype.deprecateLatest = function deprecateLatest(callback) {
                 log: self.log
             }, function (err1, stdout1, stderr1) {
                 if (err1) {
-                    return next(err1);
+                    next(err1);
+                    return;
                 }
                 self.progress('Cleaned up deprecated \'latest\' symlink');
-                return next();
+                next();
             });
          }
-    ]}, function (error) {
-        return callback(error);
-    });
+    ]}, callback);
 };
 
 /**
@@ -1043,10 +1088,11 @@ Platform.prototype.getCNAPIVersion = function getCNAPIVersion(callback) {
                 svc: 'cnapi'
             }, function (err, obj) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 img = obj.imgs[0];
-                return next();
+                next();
             });
         },
 
@@ -1059,10 +1105,10 @@ Platform.prototype.getCNAPIVersion = function getCNAPIVersion(callback) {
                 version = splitVersion[1];
             }
 
-            return next();
+            next();
         }
     ]}, function pipeCb(err) {
-        return callback(err, version);
+        callback(err, version);
     });
 };
 
@@ -1079,7 +1125,8 @@ Platform.prototype.assign = function assign(opts, callback) {
     assert.optionalArrayOfString(opts.server, 'opts.server');
 
     if (!opts.all && !opts.server) {
-        return callback(new Error('must specify a SERVER or --all'));
+        callback(new Error('must specify a SERVER or --all'));
+        return;
     }
 
     var serverRecs = [];
@@ -1114,7 +1161,8 @@ Platform.prototype.assign = function assign(opts, callback) {
                 }
                 self.sdcadm.napi.listNics(listOpts, {}, function (err, nics) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'napi'));
+                        next(new errors.SDCClientError(err, 'napi'));
+                        return;
                     }
 
                     macs = nics.map(function (nic) {
@@ -1142,14 +1190,16 @@ Platform.prototype.assign = function assign(opts, callback) {
                 self.sdcadm.cnapi.commandExecute(headnode.uuid, script, {
                 }, function (err) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'cnapi'));
+                        next(new errors.SDCClientError(err, 'cnapi'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             }
         ]}, function (err) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
             progress('Done updating booter caches');
             cb();
@@ -1205,39 +1255,42 @@ Platform.prototype.assign = function assign(opts, callback) {
     vasync.pipeline({funcs: [
         function findLatest(_, next) {
             if (opts.platform !== 'latest') {
-                return next();
+                next();
+                return;
             }
             self.getLatestPlatformInstalled(function (err2, latest) {
                 if (err2) {
-                    return next(err2);
+                    next(err2);
+                    return;
                 }
                 opts.platform = latest;
-                return next();
+                next();
             });
         },
         function validatePlatform(_, next) {
             self.sdcadm.cnapi.listPlatforms(function (err, platforms) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
 
                 self._rawPlatforms = platforms;
 
                 if (Object.keys(platforms).indexOf(opts.platform) === -1) {
-                    return callback(
-                        new Error(format(
+                    callback(new Error(format(
                             'invalid platform %s', opts.platform)));
+                    return;
                 }
                 next();
             });
         },
         function serverList(_, next) {
-
             self.sdcadm.cnapi.listServers({
                 setup: true
             }, function (err, recs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 serverRecs = recs;
                 self._rawServers = serverRecs;
@@ -1258,8 +1311,7 @@ Platform.prototype.assign = function assign(opts, callback) {
                 if (opts.all) {
                     assignServers.push(server);
                 } else if (opts.server.indexOf(server.hostname) !== -1 ||
-                    opts.server.indexOf(server.uuid) !== -1)
-                {
+                    opts.server.indexOf(server.uuid) !== -1) {
                     assignServers.push(server);
                 } else {
                     if (server.boot_platform === 'latest' ||
@@ -1271,9 +1323,9 @@ Platform.prototype.assign = function assign(opts, callback) {
             });
 
             if (opts.server && !assignServers.length) {
-                return next(
-                    new Error(format(
+                next(new Error(format(
                         'server %j not found', opts.server)));
+                return;
             }
 
             next();
@@ -1293,10 +1345,11 @@ Platform.prototype.assign = function assign(opts, callback) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
         function assignPlatform(_, next) {
@@ -1322,14 +1375,16 @@ Platform.prototype.assign = function assign(opts, callback) {
         function verifyUpdate(_, next) {
             // Skip this if it failed before:
             if (errs.length) {
-                return next();
+                next();
+                return;
             }
             progress('Verifying boot_platform updates');
             self.sdcadm.cnapi.listServers({
                 uuids: uuids.join(',')
             }, function (err, updated) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 var updateErrs = [];
                 updated.forEach(function (u) {
@@ -1340,21 +1395,23 @@ Platform.prototype.assign = function assign(opts, callback) {
                 if (updateErrs.length) {
                     var msg = 'The following servers were not updated: ' +
                         updateErrs.join(',');
-                    return next(new errors.SDCClientError({
+                    next(new errors.SDCClientError({
                         message: msg
                     }, 'cnapi'));
+                    return;
                 }
-                return next();
+                next();
             });
         },
         function callDeprecateLatest(_, next) {
-            return self.deprecateLatest(next);
+            self.deprecateLatest(next);
         },
         function setDefault(_, next) {
             if (!opts.all) {
-                return next();
+                next();
+                return;
             }
-            return self.setDefaultBootPlatform(opts.platform, next);
+            self.setDefaultBootPlatform(opts.platform, next);
         }
     ]},
     function (err) {
@@ -1363,18 +1420,19 @@ Platform.prototype.assign = function assign(opts, callback) {
         }
         if (!hist) {
             self.sdcadm.log.warn('History not set for platform assign');
-            return callback(err);
+            callback(err);
+            return;
         }
         if (err) {
             hist.error = err;
         }
         self.sdcadm.history.updateHistory(hist, function (err2) {
             if (err) {
-                return callback(err);
+                callback(err);
             } else if (err2) {
-                return callback(err2);
+                callback(err2);
             } else {
-                return callback();
+                callback();
             }
         });
     });
@@ -1395,24 +1453,28 @@ Platform.prototype.usage = function (platform, cb) {
 
         self.sdcadm.cnapi.listPlatforms(function (err, platforms) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'cnapi'));
+                cb(new errors.SDCClientError(err, 'cnapi'));
+                return;
             }
             if (Array.isArray(platforms) && !platforms.length) {
-                return cb(new errors.UpdateError('no platforms found'));
+                cb(new errors.UpdateError('no platforms found'));
+                return;
             }
             if (Object.keys(platforms).indexOf(platform) === -1) {
-                return cb(
-                    new Error(format(
+                cb(new Error(format(
                         'invalid platform %s', platform)));
+                return;
             }
             self.sdcadm.cnapi.listServers({
                 setup: true
             }, function (er2, servers) {
                 if (er2) {
-                    return cb(new errors.SDCClientError(er2, 'cnapi'));
+                    cb(new errors.SDCClientError(er2, 'cnapi'));
+                    return;
                 }
                 if (Array.isArray(servers) && !servers.length) {
-                    return cb(new errors.UpdateError('no servers found'));
+                    cb(new errors.UpdateError('no servers found'));
+                    return;
                 }
 
                 var rows = [];
@@ -1436,9 +1498,10 @@ Platform.prototype.usage = function (platform, cb) {
                     }
                 }, function (er3, results) {
                     if (er3) {
-                        return cb(er3);
+                        cb(er3);
+                        return;
                     }
-                    return cb(null, rows);
+                    cb(null, rows);
                 });
             });
         });
@@ -1465,16 +1528,18 @@ Platform.prototype.remove = function remove(opts, cb) {
             p(common.indent(opts.remove.join('\n')));
             p('');
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             var msg = 'Would you like to continue? [y/N] ';
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
-                return next();
+                next();
             });
         },
 
@@ -1490,24 +1555,27 @@ Platform.prototype.remove = function remove(opts, cb) {
                 changes: changes
             }, function (er4, hst) {
                 if (er4) {
-                    return next(er4);
+                    next(er4);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
         function isKeyMounted(_, next) {
             common.isUsbKeyMounted(self.sdcadm.log, function (err, mounted) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 keyInitiallyMounted = mounted;
-                return next();
+                next();
             });
         },
         function mountUsbKey(_, next) {
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
             p('Mounting USB key');
             common.mountUsbKey(self.sdcadm.log, next);
@@ -1533,13 +1601,14 @@ Platform.prototype.remove = function remove(opts, cb) {
                 if (er3) {
                     self.sdcadm.log.error(er3);
                 }
-                return next();
+                next();
             });
         },
 
         function unmountUsbKey(_, next) {
             if (keyInitiallyMounted) {
-                return next();
+                next();
+                return;
             }
             p('Unmounting USB key');
             common.unmountUsbKey(self.sdcadm.log, next);
@@ -1549,7 +1618,8 @@ Platform.prototype.remove = function remove(opts, cb) {
         //          svc:/system/filesystem/smartdc:default
         function removePlatformsCache(_, next) {
             if (!opts.cleanup_cache) {
-                return next();
+                next();
+                return;
             }
 
             vasync.forEachParallel({
@@ -1577,15 +1647,17 @@ Platform.prototype.remove = function remove(opts, cb) {
         //          svc:/system/filesystem/smartdc:default
         function doCreateLatestLink(_, next) {
             if (!opts.cleanup_cache) {
-                return next();
+                next();
+                return;
             }
             p('Updating \'latest\' link');
-            return self.createLatestLink(next);
+            self.createLatestLink(next);
         }
     ]}, function (er2) {
         if (!hist) {
             self.sdcadm.log.warn('History not set for platform remove');
-            return cb(er2);
+            cb(er2);
+            return;
         }
         if (er2) {
             hist.error = er2;
@@ -1593,11 +1665,11 @@ Platform.prototype.remove = function remove(opts, cb) {
         p('Done.');
         self.sdcadm.history.updateHistory(hist, function (err2) {
             if (er2) {
-                return cb(er2);
+                cb(er2);
             } else if (err2) {
-                return cb(err2);
+                cb(err2);
             } else {
-                return cb();
+                cb();
             }
         });
     });
@@ -1625,7 +1697,7 @@ function PlatformCLI(top) {
 }
 util.inherits(PlatformCLI, Cmdln);
 
-PlatformCLI.prototype.init = function init(opts, args, callback) {
+PlatformCLI.prototype.init = function init(_opts, _args, _callback) {
     this.sdcadm = this.top.sdcadm;
     this.progress = this.top.progress;
     this.log = this.top.log;
@@ -1645,13 +1717,15 @@ function do_install(subcmd, opts, args, cb) {
     }
 
     if (!opts.latest && !args[0]) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'must specify Platform Image UUID or --latest'));
+        return;
     }
 
     if (args[0] && args[0] === 'help') {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'Please use `sdcadm platform help install` instead'));
+        return;
     }
 
     var options = {
@@ -1731,9 +1805,10 @@ function do_assign(subcmd, opts, args, cb) {
     var assignOpts;
 
     if (opts.all && server) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'using --all and explicitly specifying ' +
             'a server are mutually exclusive'));
+        return;
     } else if (opts.all) {
         assignOpts = {
             all: true,
@@ -1747,8 +1822,9 @@ function do_assign(subcmd, opts, args, cb) {
             progress: self.progress
         };
     } else {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'must specify platform and server (or --all)'));
+        return;
     }
     // Instead of a single attempt, let's allow retries on platform assignment:
     // self.platform.assign(assignOpts, cb);
@@ -1760,9 +1836,10 @@ function do_assign(subcmd, opts, args, cb) {
     function assignPlatformCb(err) {
         if (err) {
             p('Platform assign failed');
-            return cb(err);
+            cb(err);
+            return;
         }
-        return cb();
+        cb();
     }
 
     common.execWithRetries({
@@ -1784,24 +1861,26 @@ PlatformCLI.prototype.do_assign.help = (
     '\n' +
     '{{options}}' +
     '\n' +
-    'Where PLATFORM is one of "--latest" (the latest platform image installed\n' +
-    'on the USB key) or a "YYYYMMDDTHHMMDDZ" version of an installed platform\n' +
-    '(see "sdcadm platform list").\n' +
+    'Where PLATFORM is one of "--latest" (the latest platform image\n' +
+    'installed on the USB key) or a "YYYYMMDDTHHMMDDZ" version of an\n' +
+    'installed platform (see "sdcadm platform list").\n' +
     '\n' +
-    'Use "--all" to assign to all servers or pass a specific set of SERVERs.\n' +
-    'A "SERVER" is a server UUID or hostname. In a larger datacenter, getting\n' +
-    'a list of the wanted servers can be a chore. The "sdc-server lookup ..."\n' +
-    'tool is useful for this.\n' +
+    'Use "--all" to assign to all servers or pass a specific set of\n' +
+    'SERVERs. A "SERVER" is a server UUID or hostname. In a larger\n' +
+    'datacenter, getting a list of the wanted servers can be a chore.\n' +
+    'The "sdc-server lookup ..." tool is useful for this.\n' +
     '\n' +
     'Examples:\n' +
     '    # Assign the latest platform to all servers.\n' +
     '    {{name}} assign --latest --all\n' +
     '\n' +
-    '    # Assign a specific platform  on setup servers with the "pkg=aegean" trait.\n' +
+    '    # Assign a specific platform on setup servers with the\n' +
+    '    # "pkg=aegean" trait.\n' +
     '    {{name}} assign 20151021T183753Z \\\n' +
     '        $(sdc-server lookup setup=true traits.pkg=aegean)\n' +
     '\n' +
-    '    # Assign a platform, excluding those with a "internal=PKGSRC" trait.\n' +
+    '    # Assign platform on setup servers excluding servers with\n' +
+    '    # a "internal=PKGSRC" trait.\n' +
     '    {{name}} assign 20151021T183753Z \\\n' +
     '        $(sdc-server lookup setup=true \'traits.internal!~PKGSRC\')\n'
     /* END JSSTYLED */
@@ -1828,7 +1907,7 @@ PlatformCLI.prototype.do_assign.options = [
 
 
 PlatformCLI.prototype.do_list =
-function do_list(subcmd, opts, args, cb) {
+function do_list(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -1973,8 +2052,9 @@ function do_usage(subcmd, opts, args, cb) {
     }
 
     if (!args.length) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'too few args, platform name is required'));
+        return;
     }
 
     opts.platform = args[0];
@@ -1991,16 +2071,19 @@ function do_usage(subcmd, opts, args, cb) {
 
     self.platform.usage(opts.platform, function (err, rows) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (rows.length === 0) {
-            return cb();
+            cb();
+            return;
         }
 
         if (opts.json) {
             console.log(JSON.stringify(rows, null, 4));
-            return cb();
+            cb();
+            return;
         }
         var validFieldsMap = {};
 
@@ -2017,7 +2100,7 @@ function do_usage(subcmd, opts, args, cb) {
             sort: sort,
             validFields: Object.keys(validFieldsMap)
         });
-        return cb();
+        cb();
 
     });
 };
@@ -2074,8 +2157,9 @@ function do_remove(subcmd, opts, args, cb) {
     }
 
     if (!args.length && !opts.all) {
-        return cb(new errors.UsageError('too few args, either platform ' +
+        cb(new errors.UsageError('too few args, either platform ' +
                     'name or \'--all\' option are required'));
+        return;
     }
 
     var in_use = [];
@@ -2083,7 +2167,8 @@ function do_remove(subcmd, opts, args, cb) {
     opts.remove = [];
     self.platform.getPlatformsWithServers(function (err, platforms) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         // When --all is given we will not remove anything requiring the
@@ -2123,20 +2208,23 @@ function do_remove(subcmd, opts, args, cb) {
                     in_use.join('\n') + '\nPlease use `--force` option if ' +
                     'you want to remove them anyway';
             }
-            return cb(new errors.UsageError(msg));
+            cb(new errors.UsageError(msg));
+            return;
         }
 
         self.platform.getDefaultBootPlatform(function (er1, defPlatform) {
             if (er1) {
-                return cb(er1);
+                cb(er1);
+                return;
             }
 
             if (opts.remove.indexOf(defPlatform) !== -1) {
-                return cb(new errors.UsageError(
+                cb(new errors.UsageError(
                             'Default platform cannot be removed'));
+                return;
             }
 
-            return self.platform.remove(opts, cb);
+            self.platform.remove(opts, cb);
         });
     });
 };
@@ -2200,7 +2288,7 @@ PlatformCLI.prototype.do_remove.options = [
 ];
 
 
-PlatformCLI.prototype.do_avail = function do_avail(subcmd, opts, args, cb) {
+PlatformCLI.prototype.do_avail = function do_avail(subcmd, opts, _args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
@@ -2214,7 +2302,8 @@ PlatformCLI.prototype.do_avail = function do_avail(subcmd, opts, args, cb) {
 
     self.platform.available(opts, function (err, platforms) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (opts.json || opts.jsonstream) {
@@ -2225,18 +2314,20 @@ PlatformCLI.prototype.do_avail = function do_avail(subcmd, opts, args, cb) {
                     process.stdout.write(JSON.stringify(k) + '\n');
                 });
             }
-            return cb();
+            cb();
+            return;
         }
 
         if (!platforms.length) {
             self.sdcadm.getDefaultChannel(function (er2, channel) {
                 // Will not error due to channel not found
                 if (er2) {
-                    return cb();
+                    cb();
+                    return;
                 }
                 self.progress('The latest platform image for "%s" channel ' +
                         'is already installed.', channel);
-                return cb();
+                cb();
             });
         } else {
             var validFieldsMap = {};
@@ -2255,7 +2346,7 @@ PlatformCLI.prototype.do_avail = function do_avail(subcmd, opts, args, cb) {
                 validFields: Object.keys(validFieldsMap)
             });
 
-            return cb();
+            cb();
         }
     });
 };
@@ -2327,9 +2418,10 @@ function do_set_default(subcmd, opts, args, cb) {
     opts.platform = (opts.latest) ? 'latest' : args.shift();
 
     if (!opts.platform) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'too few args, platform name is required when \'--latest\'' +
             ' option is not given'));
+        return;
     }
 
     if (opts.platform === 'help') {
@@ -2386,7 +2478,7 @@ PlatformCLI.prototype.do_set_default.options = [
     }
 ];
 
-//---- exports
+// --- exports
 
 module.exports = {
     PlatformCLI: PlatformCLI
diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 15e20a4..95125a0 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 /*
  * `sdcadm post-setup cmon`
@@ -14,7 +14,6 @@
 var util = require('util'),
     format = util.format;
 var vasync = require('vasync');
-var assert = require('assert-plus');
 var ProgressBar = require('progbar').ProgressBar;
 
 var errors = require('../errors'),
@@ -33,7 +32,8 @@ function do_cmon(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     // Progress bar
@@ -83,7 +83,7 @@ function do_cmon(subcmd, opts, args, cb) {
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
 
-        function ensureCnsSvc(ctx, next) {
+        function ensureCnsSvc(_, next) {
             self.sdcadm.sapi.listServices({
                 name: 'cns',
                 application_uuid: self.sdcadm.sdc.uuid
@@ -107,12 +107,14 @@ function do_cmon(subcmd, opts, args, cb) {
                 active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('%d "%s" packages found', pkgs.length,
                             svcData.params.package_name)
                     }));
+                    return;
                 }
                 ctx.cmonPkg = pkgs[0];
                 next();
@@ -125,7 +127,8 @@ function do_cmon(subcmd, opts, args, cb) {
                 application_uuid: self.sdcadm.sdc.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 } else if (svcs.length) {
                     ctx.cmonSvc = svcs[0];
                 }
@@ -138,14 +141,15 @@ function do_cmon(subcmd, opts, args, cb) {
          */
         function getInst(ctx, next) {
             if (!ctx.cmonSvc) {
-                return next();
+                next();
+                return;
             }
             var filter = {
                 service_uuid: ctx.cmonSvc.uuid
             };
             self.sdcadm.sapi.listInstances(filter, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
                 } else if (insts && insts.length) {
                     // Note this doesn't handle multiple insts.
                     ctx.cmonInst = insts[0];
@@ -185,7 +189,7 @@ function do_cmon(subcmd, opts, args, cb) {
                 return;
             }
             self.sdcadm.imgapi.getImage(ctx.cmonImg.uuid,
-                    function (err, img_) {
+                    function (err, _img) {
                 if (err && err.body && err.body.code === 'ResourceNotFound') {
                     ctx.imgsToDownload.push(ctx.cmonImg);
                     next();
@@ -270,7 +274,8 @@ function do_cmon(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createService('cmon', self.sdcadm.sdc.uuid,
                     svcData, function (err, svc) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 ctx.cmonSvc = svc;
                 self.log.info({svc: svc}, 'created "cmon" svc');
@@ -305,7 +310,8 @@ function do_cmon(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createInstance(ctx.cmonSvc.uuid, instOpts,
                     function (err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index 7191199..c577612 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -29,7 +29,8 @@ function do_cns(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     if (self.name === 'sdcadm experimental') {
@@ -78,12 +79,14 @@ function do_cns(subcmd, opts, args, cb) {
                 active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('%d "%s" packages found', pkgs.length,
                             svcData.params.package_name)
                     }));
+                    return;
                 }
                 ctx.cnsPkg = pkgs[0];
                 next();
@@ -96,7 +99,8 @@ function do_cns(subcmd, opts, args, cb) {
                 application_uuid: self.sdcadm.sdc.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 } else if (svcs.length) {
                     ctx.cnsSvc = svcs[0];
                 }
@@ -110,21 +114,24 @@ function do_cns(subcmd, opts, args, cb) {
          */
         function getCnsInst(ctx, next) {
             if (!ctx.cnsSvc) {
-                return next();
+                next();
+                return;
             }
             var filter = {
                 service_uuid: ctx.cnsSvc.uuid
             };
             self.sdcadm.sapi.listInstances(filter, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 } else if (insts && insts.length) {
                     // Note this doesn't handle multiple insts.
                     ctx.cnsInst = insts[0];
                     self.sdcadm.vmapi.getVm({uuid: ctx.cnsInst.uuid},
                             function (vmErr, cnsVm) {
                         if (vmErr) {
-                            return next(vmErr);
+                            next(vmErr);
+                            return;
                         }
                         ctx.cnsVm = cnsVm;
                         next();
@@ -151,12 +158,9 @@ function do_cns(subcmd, opts, args, cb) {
         },
 
         function haveCnsImageAlready(ctx, next) {
-            self.sdcadm.imgapi.getImage(ctx.cnsImg.uuid,
-                    function (err, img_) {
+            self.sdcadm.imgapi.getImage(ctx.cnsImg.uuid, function (err, _img) {
                 if (err && err.body && err.body.code === 'ResourceNotFound') {
                     ctx.imgsToDownload.push(ctx.cnsImg);
-                } else if (err) {
-                    return next(err);
                 }
                 next();
             });
@@ -164,7 +168,8 @@ function do_cns(subcmd, opts, args, cb) {
 
         function importImages(ctx, next) {
             if (ctx.imgsToDownload.length === 0) {
-                return next();
+                next();
+                return;
             }
             var proc = new DownloadImages({images: ctx.imgsToDownload});
             proc.execute({
@@ -179,7 +184,8 @@ function do_cns(subcmd, opts, args, cb) {
 
         function createCnsSvc(ctx, next) {
             if (ctx.cnsSvc) {
-                return next();
+                next();
+                return;
             }
 
             var domain = self.sdcadm.sdc.metadata.datacenter_name + '.' +
@@ -197,7 +203,8 @@ function do_cns(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createService('cns', self.sdcadm.sdc.uuid,
                     svcData, function (err, svc) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 ctx.cnsSvc = svc;
                 self.log.info({svc: svc}, 'created cns svc');
diff --git a/lib/post-setup/common-external-nics.js b/lib/post-setup/common-external-nics.js
index ab9bc7a..ea615b1 100644
--- a/lib/post-setup/common-external-nics.js
+++ b/lib/post-setup/common-external-nics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -16,7 +16,7 @@ var assert = require('assert-plus');
 
 
 
-//---- internal support stuff
+// --- internal support stuff
 
 function CommonExternalNics() {}
 CommonExternalNics.prototype.name = 'common-external-nics';
@@ -46,9 +46,9 @@ CommonExternalNics.prototype.execute = function (options, cb) {
 
 
 
-//---- CLI
+// --- CLI
 
-function do_common_external_nics(subcmd, opts, args, cb) {
+function do_common_external_nics(subcmd, opts, _args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
@@ -77,7 +77,7 @@ do_common_external_nics.options = [
     }
 ];
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_common_external_nics: do_common_external_nics
diff --git a/lib/post-setup/dev-headnode-prov.js b/lib/post-setup/dev-headnode-prov.js
index 64cc6b5..1a8fa0b 100644
--- a/lib/post-setup/dev-headnode-prov.js
+++ b/lib/post-setup/dev-headnode-prov.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -19,7 +19,7 @@ var errors = require('../errors');
 var svcadm = require('../svcadm');
 
 
-//---- internal support stuff
+// --- internal support stuff
 
 function makeHeadnodeProvisionable(opts, cb) {
     assert.object(opts, 'opts');
@@ -36,7 +36,8 @@ function makeHeadnodeProvisionable(opts, cb) {
         function getCnapiSvc(ctx, next) {
             sdcadm.getSvc({app: 'sdc', svc: 'cnapi'}, function (err, cnapi) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 ctx.cnapi = cnapi;
                 next();
@@ -44,12 +45,12 @@ function makeHeadnodeProvisionable(opts, cb) {
         },
         function tweakCnapiConfig(ctx, next) {
             if (ctx.cnapi.metadata.ALLOC_FILTER_HEADNODE === false &&
-                ctx.cnapi.metadata.ALLOC_FILTER_MIN_RESOURCES === false)
-            {
+                ctx.cnapi.metadata.ALLOC_FILTER_MIN_RESOURCES === false) {
                 progress('CNAPI is already configured to allow headnode ' +
                     'provisioning and over-provisioning');
                 ctx.alreadyDone = true;
-                return next();
+                next();
+                return;
             }
 
             progress('Configuring CNAPI to allow headnode provisioning' +
@@ -66,13 +67,15 @@ function makeHeadnodeProvisionable(opts, cb) {
 
         function getCnapiInsts(ctx, next) {
             if (ctx.alreadyDone) {
-                return next();
+                next();
+                return;
             }
 
             var listOpts = {types: ['vm'], svcs: ['cnapi']};
             sdcadm.listInsts(listOpts, function (err, insts) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 ctx.cnapiInsts = insts;
                 log.trace({cnapiInsts: ctx.cnapiInsts}, 'cnapiInsts');
@@ -82,7 +85,8 @@ function makeHeadnodeProvisionable(opts, cb) {
 
         function updatesCnapiInsts(ctx, next) {
             if (ctx.alreadyDone) {
-                return next();
+                next();
+                return;
             }
 
             var queue = vasync.queue(
@@ -108,14 +112,15 @@ function makeHeadnodeProvisionable(opts, cb) {
 }
 
 
-//---- CLI
+// --- CLI
 
 function do_dev_headnode_prov(subcmd, opts, args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     makeHeadnodeProvisionable({
@@ -129,9 +134,9 @@ do_dev_headnode_prov.help = (
     /* BEGIN JSSTYLED */
     'Make the headnode provisionable, for development and testing.\n' +
     '\n' +
-    'This is done via `ALLOC_FILTER_HEADNODE` and `ALLOC_FILTER_MIN_RESOURCES`\n' +
-    'SAPI configuration of the CNAPI service. See\n' +
-    '    https://github.com/joyent/sdc-cnapi/blob/master/docs/index.md#sapi-configuration\n' +
+    'This is done via `ALLOC_FILTER_HEADNODE` and \n' +
+    '`ALLOC_FILTER_MIN_RESOURCES` SAPI configuration of the CNAPI service.\n' +
+    'See https://github.com/joyent/sdc-cnapi/blob/master/docs/index.md#sapi-configuration\n' +
     '\n' +
     'Usage:\n' +
     '     {{name}} dev-headnode-prov\n'
@@ -148,7 +153,7 @@ do_dev_headnode_prov.options = [
 
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_dev_headnode_prov: do_dev_headnode_prov
diff --git a/lib/post-setup/dev-sample-data.js b/lib/post-setup/dev-sample-data.js
index 08149bf..7cf3c51 100644
--- a/lib/post-setup/dev-sample-data.js
+++ b/lib/post-setup/dev-sample-data.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -23,7 +23,7 @@ var DownloadImages = require('../procedures/download-images').DownloadImages;
 var errors = require('../errors');
 
 
-//---- internal support stuff
+// --- internal support stuff
 
 function addDevSampleData(opts, cb) {
     assert.object(opts, 'opts');
@@ -54,18 +54,19 @@ function addDevSamplePkgs(opts, cb) {
         func: function importPkg(pkgData, nextPkg) {
             papi.list({name: pkgData.name}, {}, function (err, pkgs) {
                 if (err) {
-                    return nextPkg(new errors.SDCClientError(
-                        err, 'papi'));
+                    nextPkg(new errors.SDCClientError(err, 'papi'));
+                    return;
                 } else if (pkgs.length !== 0) {
                     opts.progress('Already have package %s (%s).',
                         pkgData.name, pkgs[0].uuid);
-                    return nextPkg();
+                    nextPkg();
+                    return;
                 }
 
                 papi.add(pkgData, function (addErr, pkg) {
                     if (addErr) {
-                        return nextPkg(new errors.SDCClientError(
-                            addErr, 'papi'));
+                        nextPkg(new errors.SDCClientError(addErr, 'papi'));
+                        return;
                     }
                     opts.progress('Added package %s (%s)', pkg.name, pkg.uuid);
                     nextPkg();
@@ -117,7 +118,7 @@ function addDevSampleImgs(opts, cb) {
             vasync.forEachParallel({
                 inputs: ctx.imgs,
                 func: function checkImg(img, nextImg) {
-                    imgapi.getImage(img.uuid, function (err, img_) {
+                    imgapi.getImage(img.uuid, function (err, _img) {
                         if (!err) {
                             opts.progress('Already have image %s (%s@%s).',
                                 img.uuid, img.name, img.version);
@@ -146,14 +147,15 @@ function addDevSampleImgs(opts, cb) {
 }
 
 
-//---- CLI
+// --- CLI
 
 function do_dev_sample_data(subcmd, opts, args, cb) {
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     addDevSampleData({
@@ -185,7 +187,7 @@ do_dev_sample_data.options = [
 
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_dev_sample_data: do_dev_sample_data
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index fe309b1..3a247e4 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -36,7 +36,8 @@ function do_docker(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     var start = Date.now();
@@ -84,12 +85,14 @@ function do_docker(subcmd, opts, args, cb) {
                 active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('%d "%s" packages found', pkgs.length,
                             dockerSvcData.params.package_name)
                     }));
+                    return;
                 }
                 ctx.dockerPkg = pkgs[0];
                 next();
@@ -116,7 +119,8 @@ function do_docker(subcmd, opts, args, cb) {
                 application_uuid: ctx.app.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 } else if (svcs.length) {
                     ctx.dockerSvc = svcs[0];
                 }
@@ -130,7 +134,8 @@ function do_docker(subcmd, opts, args, cb) {
                 application_uuid: ctx.app.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 } else if (svcs.length) {
                     ctx.cloudapiSvc = svcs[0];
                 }
@@ -144,21 +149,24 @@ function do_docker(subcmd, opts, args, cb) {
          */
         function getDockerInst(ctx, next) {
             if (!ctx.dockerSvc) {
-                return next();
+                next();
+                return;
             }
             var filter = {
                 service_uuid: ctx.dockerSvc.uuid
             };
             self.sdcadm.sapi.listInstances(filter, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 } else if (insts && insts.length) {
                     // Note this doesn't handle multiple insts.
                     ctx.dockerInst = insts[0];
                     self.sdcadm.vmapi.getVm({uuid: ctx.dockerInst.uuid},
                             function (vmErr, dockerVm) {
                         if (vmErr) {
-                            return next(vmErr);
+                            next(vmErr);
+                            return;
                         }
                         ctx.dockerVm = dockerVm;
                         next();
@@ -236,7 +244,8 @@ function do_docker(subcmd, opts, args, cb) {
 
         function importImages(ctx, next) {
             if (ctx.imgsToDownload.length === 0) {
-                return next();
+                next();
+                return;
             }
             var proc = new DownloadImages({images: ctx.imgsToDownload});
             proc.execute({
@@ -251,7 +260,8 @@ function do_docker(subcmd, opts, args, cb) {
 
         function createDockerSvc(ctx, next) {
             if (ctx.dockerSvc) {
-                return next();
+                next();
+                return;
             }
 
             var domain = ctx.app.metadata.datacenter_name + '.' +
@@ -272,7 +282,8 @@ function do_docker(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createService('docker', ctx.app.uuid,
                     dockerSvcData, function (err, svc) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 ctx.dockerSvc = svc;
                 self.log.info({svc: svc}, 'created docker svc');
@@ -329,15 +340,17 @@ function do_docker(subcmd, opts, args, cb) {
             if (existing) {
                 try {
                     services = JSON.parse(existing);
-                } catch (ex) {
-                    return next(new errors.InternalError({
+                } catch (_ex) {
+                    next(new errors.InternalError({
                         message: format('unexpected non-JSON value for ' +
                             'cloudapi SAPI service "CLOUDAPI_SERVICES" ' +
                             'metadata: %j', existing)
                     }));
+                    return;
                 }
                 if (services.docker) {
-                    return next();
+                    next();
+                    return;
                 }
             }
 
@@ -345,7 +358,8 @@ function do_docker(subcmd, opts, args, cb) {
             self.sdcadm.vmapi.getVm({uuid: dockerInst.uuid},
                     function (vmErr, dockerVm) {
                 if (vmErr) {
-                    return next(vmErr);
+                    next(vmErr);
+                    return;
                 }
                 var dockerIp = dockerVm.nics.filter(function (nic) {
                     return nic.nic_tag === 'external';
@@ -355,13 +369,14 @@ function do_docker(subcmd, opts, args, cb) {
                 try {
                     services = JSON.parse(
                         ctx.cloudapiSvc.metadata.CLOUDAPI_SERVICES || '{}');
-                } catch (ex) {
-                    return next(new errors.InternalError({
+                } catch (_ex) {
+                    next(new errors.InternalError({
                         message: format('unexpected non-JSON value for ' +
                             'cloudapi SAPI service "CLOUDAPI_SERVICES" ' +
                             'metadata: %j',
                             ctx.cloudapiSvc.metadata.CLOUDAPI_SERVICES)
                     }));
+                    return;
                 }
                 self.progress('Update "docker" key in CLOUDAPI_SERVICES to %s',
                     dockerUrl);
@@ -402,12 +417,14 @@ function do_docker(subcmd, opts, args, cb) {
                 name: 'dockerlogger'
             }, function (err, svcs) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
 
                 if (svcs.length) {
                     ctx.dockerloggerSvc = svcs[0];
-                    return next();
+                    next();
+                    return;
                 }
                 self.progress('Creating "dockerlogger" servivce');
                 self.sdcadm.sapi.createService('dockerlogger',
@@ -418,10 +435,11 @@ function do_docker(subcmd, opts, args, cb) {
                     type: 'agent'
                 }, function (er2, service) {
                     if (er2) {
-                        return next(new errors.SDCClientError(er2, 'sapi'));
+                        next(new errors.SDCClientError(er2, 'sapi'));
+                        return;
                     }
                     ctx.dockerloggerSvc = service;
-                    return next();
+                    next();
                 });
             });
         },
@@ -579,7 +597,8 @@ function do_docker(subcmd, opts, args, cb) {
                     ctx.filepath,
                     function (err, res) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'imgapi'));
+                    next(new errors.SDCClientError(err, 'imgapi'));
+                    return;
                 }
                 next();
             });
@@ -607,7 +626,7 @@ function do_docker(subcmd, opts, args, cb) {
                     stderr: stderr
                 }, 'ran cp command');
                 if (err) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('error copying shar file to %s',
                                          assetsdir),
                         cmd: argv.join(' '),
@@ -615,6 +634,7 @@ function do_docker(subcmd, opts, args, cb) {
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 next();
             });
@@ -705,8 +725,9 @@ function do_docker(subcmd, opts, args, cb) {
                     var rq = ur.runQueue(queueOpts,
                             function runQueueCb(err, results) {
                         if (err) {
-                            return nextCmd(new errors.UpdateError(
+                            nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
+                            return;
                         }
 
                         var errs = [];
diff --git a/lib/post-setup/fabrics.js b/lib/post-setup/fabrics.js
index 24745c7..f29a1b5 100644
--- a/lib/post-setup/fabrics.js
+++ b/lib/post-setup/fabrics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -208,11 +208,13 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
             var filter = {name: 'sdc_768', active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: pkgs.length + ' "sdc_768" packages found'
                     }));
+                    return;
                 }
                 ctx.package = pkgs[0];
                 next();
@@ -225,7 +227,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
                 application_uuid: app.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(new errors.SDCClientError(svcErr, 'sapi'));
+                    next(new errors.SDCClientError(svcErr, 'sapi'));
+                    return;
                 } else if (svcs.length) {
                     svc = svcs[0];
                     svcExists = true;
@@ -239,7 +242,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
         function getPortolanInst(_, next) {
             if (!svcExists) {
                 instExists = false;
-                return next();
+                next();
+                return;
             }
             var filter = {
                 service_uuid: svc.uuid,
@@ -247,7 +251,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
             };
             self.sdcadm.sapi.listInstances(filter, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 } else if (insts && insts.length) {
                     // Note this doesn't handle multiple insts.
                     instExists = true;
@@ -262,19 +267,18 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
             var filter = {name: 'portolan'};
             self.sdcadm.updates.listImages(filter, function (err, images) {
                 if (err) {
-                    return next(err);
+                    next(err);
                 } else if (images && images.length) {
-                    img = images[images.length - 1]; //XXX presuming sorted
-                    return next();
+                    img = images[images.length - 1]; // XXX presuming sorted
+                    next();
                 } else {
-                    return next(new errors.UpdateError(
-                                'no "portolan" image found'));
+                    next(new errors.UpdateError('no "portolan" image found'));
                 }
             });
         },
 
         function haveImageAlready(_, next) {
-            self.sdcadm.imgapi.getImage(img.uuid, function (err, img_) {
+            self.sdcadm.imgapi.getImage(img.uuid, function (err, _img) {
                 if (err && err.body && err.body.code === 'ResourceNotFound') {
                     haveImg = false;
                     next();
@@ -290,7 +294,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
 
         function importImage(_, next) {
             if (haveImg) {
-                return next();
+                next();
+                return;
             }
             var proc = new DownloadImages({images: [img]});
             proc.execute({
@@ -306,7 +311,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
         function createPortolanSvc(ctx, next) {
             if (svcExists) {
                 self.progress('Service "portolan" already exists');
-                return next();
+                next();
+                return;
             }
 
             var domain = app.metadata.datacenter_name + '.' +
@@ -323,7 +329,8 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
             self.sdcadm.sapi.createService('portolan', app.uuid, svcData,
                     function (err, svc_) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 svc = svc_;
                 self.log.info({svc: svc}, 'created portolan svc');
@@ -401,12 +408,14 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
             var filter = {name: natSvcData.params.package_name, active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: fmt('%d "%s" packages found', pkgs.length,
                             natSvcData.params.package_name)
                     }));
+                    return;
                 }
                 ctx.natPkg = pkgs[0];
                 next();
@@ -434,7 +443,8 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
                 application_uuid: ctx.app.uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 } else if (svcs.length) {
                     ctx.natSvc = svcs[0];
                 }
@@ -444,13 +454,15 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
         /* @field ctx.haveImg */
         function haveNatImageAlready(ctx, next) {
             self.sdcadm.imgapi.getImage(ctx.natImg.uuid,
-                    function (err, img_) {
+                    function (err, _img) {
                 if (err && err.body && err.body.code === 'ResourceNotFound') {
                     ctx.haveImg = false;
-                    return next();
+                    next();
+                    return;
                 } else if (err) {
                     ctx.haveImg = false;
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 ctx.haveImg = true;
                 next();
@@ -459,7 +471,8 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
 
         function importImage(ctx, next) {
             if (ctx.haveImg) {
-                return next();
+                next();
+                return;
             }
             var proc = new DownloadImages({images: [ctx.natImg]});
             proc.execute({
@@ -474,7 +487,8 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
 
         function createNatSvc(ctx, next) {
             if (ctx.natSvc) {
-                return next();
+                next();
+                return;
             }
 
             var domain = ctx.app.metadata.datacenter_name + '.' +
@@ -491,7 +505,8 @@ Fabrics.prototype.setupNat = function setupNat(cb) {
             self.sdcadm.sapi.createService('nat', ctx.app.uuid,
                     natSvcData, function (err, svc) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 ctx.natSvc = svc;
                 self.progress('Created nat service');
@@ -516,7 +531,8 @@ Fabrics.prototype.initDiffSchema = function initDiffSchema(cb) {
         fab = mdata.properties.fabric_cfg;
         if (jsprim.deepEqual(fab, schema.properties.fabric_cfg)) {
             self.alreadySetup = true;
-            return cb(null);
+            cb(null);
+            return;
         }
     }
 
@@ -525,10 +541,11 @@ Fabrics.prototype.initDiffSchema = function initDiffSchema(cb) {
         metadata_schema: schema
     }, function (err, sdcApp) {
         if (err) {
-            return cb(new errors.SDCClientError(err, 'sapi'));
+            cb(new errors.SDCClientError(err, 'sapi'));
+            return;
         }
         self.sdcadm.sdc = sdcApp;
-        return cb(null);
+        cb(null);
     });
 };
 
@@ -536,21 +553,24 @@ Fabrics.prototype.initDiffSchema = function initDiffSchema(cb) {
 Fabrics.prototype.initConfig = function initConfig(cb) {
     var self = this;
     if (!self.options.conf) {
-        return cb();
+        cb();
+        return;
     }
 
     var conf = self.options.conf;
 
     fs.readFile(conf, { format: 'utf8' }, function (err, data) {
         if (err) {
-            return cb(new errors.ValidationError(err,
+            cb(new errors.ValidationError(err,
                 sprintf('failed to read %s: %s', conf, err.message)));
+            return;
         }
         try {
             data = JSON.parse(data);
         } catch (e) {
-            return cb(new errors.ValidationError(e,
+            cb(new errors.ValidationError(e,
                 sprintf('%s in not a valid JSON file', conf)));
+            return;
         }
         self.data = data;
         cb(null);
@@ -566,8 +586,9 @@ Fabrics.prototype.checkSchema = function checkSchema(cb) {
         self.data);
 
     if (ret !== null) {
-        return cb(new errors.ValidationError(ret,
+        cb(new errors.ValidationError(ret,
              sprintf('invalid fabric configuration: %s', ret)));
+        return;
     }
 
     cb(null);
@@ -576,18 +597,20 @@ Fabrics.prototype.checkSchema = function checkSchema(cb) {
 Fabrics.prototype.checkNicTags = function checkNicTags(cb) {
     var self = this;
     self.sdcadm.napi.getNicTag(self.data.sdc_underlay_tag,
-        function (err, tag) {
+        function (err, _tag) {
         if (err) {
             if (napiUserError(err, 'name')) {
-                return cb(new errors.ValidationError(err,
+                cb(new errors.ValidationError(err,
                     sprintf('failed to find nic tag: %s, it ' +
                         'either does not exist or is invalid',
                     self.data.sdc_underlay_tag)));
+                return;
             } else {
-                return cb(new errors.SDCClientError(err, 'napi'));
+                cb(new errors.SDCClientError(err, 'napi'));
+                return;
             }
         }
-        return cb(null);
+        cb(null);
     });
 };
 
@@ -602,23 +625,26 @@ Fabrics.prototype.checkAssignment = function checkAssignment(cb) {
     var self = this;
     if (self.data.sdc_underlay_assignment === 'manual') {
         if ('sdc_underlay_pool' in self.data) {
-            return cb(new errors.ValidationError('cannot specify ' +
+            cb(new errors.ValidationError('cannot specify ' +
                 '"sdc_underlay_pool" when "sdc_underlay_assignment"' +
                 'is set to "manual"'));
+            return;
         }
-        return cb(null);
+        cb(null);
     }
 
     self.sdcadm.napi.getNetworkPool(self.data.sdc_underlay_pool,
         function (err, pool) {
         if (err) {
             if (napiUserError(err, 'uuid')) {
-                return cb(new errors.ValidationError(err,
+                cb(new errors.ValidationError(err,
                     sprintf('failed to find resource pool: %s, it ' +
                         'either does not exist or is invalid',
                     self.data.sdc_underlay_pool)));
+                return;
             } else {
-                return cb(new errors.SDCClientError(err, 'napi'));
+                cb(new errors.SDCClientError(err, 'napi'));
+                return;
             }
         }
 
@@ -649,19 +675,21 @@ Fabrics.prototype.checkNatPool = function checkNatPool(cb) {
     var self = this;
 
     self.sdcadm.napi.getNetworkPool(self.data.sdc_nat_pool,
-            function (err, pool) {
+            function (err, _pool) {
         if (err) {
             if (napiUserError(err, 'uuid')) {
-                return cb(new errors.ValidationError(err,
+                cb(new errors.ValidationError(err,
                     sprintf('failed to find NAT network pool: %s, it ' +
                         'either does not exist or is invalid',
                     self.data.sdc_nat_pool)));
+                return;
             } else {
-                return cb(new errors.SDCClientError(err, 'napi'));
+                cb(new errors.SDCClientError(err, 'napi'));
+                return;
             }
         }
 
-        return cb(null);
+        cb(null);
     });
 };
 
@@ -671,13 +699,15 @@ Fabrics.prototype.updateSapi = function updateSapi(cb) {
     if (self.sdcadm.sdc.metadata.fabric_cfg && !self.options.reconfigure) {
         self.progress('Fabric configuration already in SAPI');
         self.progress('Please, use \'--reconfigure\' if you want to override');
-        return cb(null);
+        cb(null);
+        return;
     }
 
     if (self.sdcadm.sdc.metadata.fabric_cfg &&
             jsprim.deepEqual(self.sdcadm.sdc.metadata.fabric_cfg, self.data)) {
         self.progress('Exactly the same fabric configuration already in SAPI');
-        return cb(null);
+        cb(null);
+        return;
     }
     self.configChanged = true;
 
@@ -710,7 +740,8 @@ Fabrics.prototype.updateSapi = function updateSapi(cb) {
 Fabrics.prototype.updateFabricsSvcs = function updateFabricsSvcs(cb) {
     var self = this;
     if (!self.configChanged) {
-        return cb(null);
+        cb(null);
+        return;
     }
     var svcs = ['napi', 'dhcpd', 'vmapi'];
 
@@ -732,7 +763,8 @@ Fabrics.prototype.updateFabricsSvcs = function updateFabricsSvcs(cb) {
         }
     }, function (err) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         /*
@@ -758,10 +790,12 @@ Fabrics.prototype.checkDocker = function checkDocker(cb) {
         allowNone: true
     }, function (err, docker) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         if (!docker) {
-            return cb();
+            cb();
+            return;
         }
 
         self.dockerSetup = true;
@@ -771,17 +805,18 @@ Fabrics.prototype.checkDocker = function checkDocker(cb) {
                 metadata: { USE_FABRICS: true }
             }, function (er2, _docker) {
                 if (er2) {
-                    return cb(new errors.SDCClientError(er2, 'sapi'));
+                    cb(new errors.SDCClientError(er2, 'sapi'));
+                    return;
                 }
-                return cb();
+                cb();
             });
         } else {
-            return cb();
+            cb();
         }
     });
 };
 
-//---- CLI
+// --- CLI
 
 /*
  * Initialize fabrics for the DC
@@ -792,13 +827,14 @@ function do_fabrics(subcmd, opts, args, cb) {
         this.do_help('help', {}, [ subcmd ], cb);
         return;
     } else if (args.length !== 0) {
-        return cb(new errors.UsageError('Extraneous arguments: ' +
+        cb(new errors.UsageError('Extraneous arguments: ' +
             args.join(' ')));
+        return;
     }
 
     if (opts.conf === undefined) {
-        return cb(new errors.UsageError(
-                    '"-c conf" is required'));
+        cb(new errors.UsageError('"-c conf" is required'));
+        return;
     }
 
     var proc = new Fabrics();
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index 9867519..005fd13 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -27,14 +27,14 @@ var steps = require('../steps');
 
 
 
-//---- globals
+// --- globals
 
 var MIN_V2_TIMESTAMP = '20141218T222828Z';
 // From here we have manatee-adm 2.1+ and all the new commands it provides
 // instead of the deprecated ones
 var MIN_V21_TIMESTAMP = '20150320T174220Z';
 
-//---- CLI
+// --- CLI
 
 function do_ha_manatee(subcmd, opts, args, cb) {
     var self = this;
@@ -43,13 +43,14 @@ function do_ha_manatee(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 1) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     if (!opts.servers || !opts.servers.length ||
             opts.servers.length !== 2) {
-        return cb(new errors.UsageError(
-            'Must specify 2 target servers'));
+        cb(new errors.UsageError('Must specify 2 target servers'));
+        return;
     }
 
 
@@ -75,7 +76,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
 
     function waitForHA(localManateeUUID, hasManatee21, callback) {
 
-        function syncReplStatus(manateeUUID, isManatee21, _cb) {
+        function syncReplStatus(manateeUUID, _isManatee21, _cb) {
             var cmd = hasManatee21 ?
                 'pg-status -H -r primary -o pg-repl' : 'status';
 
@@ -175,7 +176,8 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             self.progress('Verifying target severs "%j" exist', opts.servers);
             self.sdcadm.cnapi.listServers(function (sErr, servers_) {
                 if (sErr) {
-                    return next(sErr);
+                    next(sErr);
+                    return;
                 }
                 var servers = servers_.filter(function (s) {
                     return (opts.servers.indexOf(s.uuid) !== -1);
@@ -194,9 +196,10 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                         'do not belong to servers setup in CNAPI.\nPlease ' +
                         'provide the UUIDs for ' + opts.members +
                         ' setup servers.';
-                    return next(new errors.UsageError(msg));
+                    next(new errors.UsageError(msg));
+                    return;
                 }
-                return next();
+                next();
             });
         },
 
@@ -244,16 +247,18 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 service_uuid: svc.uuid
             }, function (instErr, insts) {
                 if (instErr) {
-                    return next(instErr);
+                    next(instErr);
+                    return;
                 }
 
                 if (!insts.length) {
-                    return next(new errors.SDCClientError(new Error(
+                    next(new errors.SDCClientError(new Error(
                         'Unable to find first manatee instance'), 'sapi'));
+                    return;
                 }
 
                 if (insts.length > 2) {
-                    return next(new errors.UsageError(
+                    next(new errors.UsageError(
                         'You already have ' + insts.length +
                         ' manatee instances.\n' +
                         '"sdcadm post-setup ha-manatee" only has sense ' +
@@ -261,10 +266,12 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                         'or are trying to recover from a previous failure' +
                         'where the creation of the 2nd and/or \n' +
                         '3rd instance failed'));
+                    return;
                 }
 
                 instances = insts;
-                return next();
+                next();
+                return;
             });
         },
 
@@ -277,10 +284,11 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 uuid: uuid
             }, function (vmErr, obj) {
                 if (vmErr) {
-                    return next(vmErr);
+                    next(vmErr);
+                    return;
                 }
                 pri = obj;
-                return next();
+                next();
             });
         },
 
@@ -298,7 +306,8 @@ function do_ha_manatee(subcmd, opts, args, cb) {
 
         function getSecondaryManateeVm(_, next) {
             if (instances.length < 2) {
-                return next();
+                next();
+                return;
             }
             var uuid = instances.filter(function (i) {
                 return (i.params.alias === 'manatee1');
@@ -308,25 +317,28 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 uuid: uuid
             }, function (vmErr, obj) {
                 if (vmErr) {
-                    return next(vmErr);
+                    next(vmErr);
+                    return;
                 }
                 sry = obj;
-                return next();
+                next();
             });
         },
 
         function verify2ndManateeServer(_, next) {
             if (instances.length < 2) {
-                return next();
+                next();
+                return;
             }
             self.progress('Verifying 2nd manatee server');
             if (sry.server_uuid !== opts.servers[0]) {
-                return next(new errors.UsageError(util.format(
+                next(new errors.UsageError(util.format(
                         'The server specified for manatee1 \'%s\' is not ' +
                         'the same than the server where it has been created ' +
                         '\'%s\'', opts.servers[0], sry.server_uuid)));
+                return;
             }
-            return next();
+            next();
         },
 
         function verifyManateeVersion(_, next) {
@@ -339,15 +351,15 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     MIN_V2_TIMESTAMP + ' (current ' +
                     'version was built ' + curVer + ')';
                 self.progress(msg);
-                return next(new errors.ValidationError(new Error(msg),
-                    'sdcadm'));
+                next(new errors.ValidationError(new Error(msg), 'sdcadm'));
+                return;
             }
 
             if (curVer >= MIN_V21_TIMESTAMP) {
                 manateeAdm21 = true;
             }
 
-            return next();
+            next();
         },
 
         function confirm(_, next) {
@@ -393,13 +405,15 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             p(out.join('\n'));
             p('');
             if (opts.yes) {
-                return next();
+                next();
+                return;
             }
             var msg = 'Would you like to continue? [y/N] ';
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting ha-manatee');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
                 next();
@@ -408,7 +422,8 @@ function do_ha_manatee(subcmd, opts, args, cb) {
 
         function confirmDuplicatedServers(_, next) {
             if (!duplicatedServers || opts.yes) {
-                return next();
+                next();
+                return;
             }
             p('');
             p('You\'ve provided duplicated servers: %j.', opts.servers);
@@ -418,7 +433,8 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             common.promptYesNo({msg: msg, default: 'n'}, function (answer) {
                 if (answer !== 'y') {
                     p('Aborting ha-manatee');
-                    return cb();
+                    cb();
+                    return;
                 }
                 p('');
                 next();
@@ -431,10 +447,11 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 history = hst;
-                return next();
+                next();
             });
         },
 
@@ -447,17 +464,19 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 hasManatee21: manateeAdm21
             }, function (err, st) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 shardState = st;
-                return next();
+                next();
             });
         },
 
         function create2ndManatee(_, next) {
             if (instances.length > 1) {
                 self.progress('Skipping creation of 2nd manatee');
-                return next();
+                next();
+                return;
             }
             self.progress('Creating 2nd manatee through SAPI');
             self.sdcadm.sapi.createInstance(svc.uuid, {
@@ -468,20 +487,22 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 metadata: {}
             }, function (createErr, body) {
                 if (createErr) {
-                    return next(createErr);
+                    next(createErr);
+                    return;
                 }
                 newId = body.uuid;
-                return next();
+                next();
             });
         },
 
         function waitForInstToBeUp(_, next) {
             if (instances.length > 1) {
-                return next();
+                next();
+                return;
             }
             self.progress('Waiting for the new manatee1 vm' +
                         ' (%s) to come up', newId);
-            return shared.waitForInstToBeUp({
+            shared.waitForInstToBeUp({
                 change: {
                     server: opts.servers[0],
                     type: 'create-instances',
@@ -519,12 +540,13 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     }
                 }, function (err) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
-                    return next();
+                    next();
                 });
             } else {
-                return next();
+                next();
             }
         },
 
@@ -536,29 +558,19 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     server: pri.server_uuid,
                     vm: pri.uuid,
                     log: self.log
-                }, function (err, out) {
-                    if (err) {
-                        return next(err);
-                    }
-                    return next();
-                });
+                }, next);
             } else {
-                return next();
+                next();
             }
         },
 
         function unfreezeState(_, next) {
             if (shardState.freeze) {
                 self.progress('Unfreezing cluster state');
-                manateeAdm(pri.uuid, 'unfreeze', function (err, stdou, stder) {
-                    if (err) {
-                        return next(err);
-                    }
-                    return next();
-                });
+                manateeAdm(pri.uuid, 'unfreeze', next);
             } else {
                 self.progress('Shard not frozen, skipping unfreeze step');
-                return next();
+                next();
             }
         },
 
@@ -579,7 +591,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                             ' manatee0 sitter once more');
                 setTimeout(next, 30 * 1000);
             } else {
-                return next();
+                next();
             }
         },
 
@@ -588,7 +600,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 self.progress('Restart SITTER on manatee0 once more');
                 restartSitter(pri.server_uuid, pri.uuid, next);
             } else {
-                return next();
+                next();
             }
 
         },
@@ -608,7 +620,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                 self.progress('Restart SITTER on manatee1');
                 restartSitter(sry.server_uuid, sry.uuid, next);
             } else {
-                return next();
+                next();
             }
         },
 
@@ -621,7 +633,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     log: self.log
                 }, next);
             } else {
-                return next();
+                next();
             }
         },
 
@@ -656,13 +668,15 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             funcs: [
                 function recordState(_, next) {
                     if (!err) {
-                        return next();
+                        next();
+                        return;
                     }
 
                     // If we are unable to find the primary, we cannot
                     // record shard state
                     if (!pri || !pri.server_uuid || !pri.uuid) {
-                        return next();
+                        next();
+                        return;
                     }
 
                     shared.getShardState({
@@ -672,22 +686,25 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     }, function (err2, st) {
                         if (err2) {
                             self.log.error(err2);
-                            return next(err2);
+                            next(err2);
+                            return;
                         }
                         self.log.info(st, 'Shard state');
-                        return next();
+                        next();
                     });
 
                 },
                 function recordStatus(_, next) {
                     if (!err) {
-                        return next();
+                        next();
+                        return;
                     }
 
                     // If we are unable to find the primary, we cannot
                     // record shard status
                     if (!pri || !pri.server_uuid || !pri.uuid) {
-                        return next();
+                        next();
+                        return;
                     }
 
                     shared.getShardStatus({
@@ -697,19 +714,21 @@ function do_ha_manatee(subcmd, opts, args, cb) {
                     }, function (err2, st) {
                         if (err2) {
                             self.log.error(err2);
-                            return next(err2);
+                            next(err2);
+                            return;
                         }
                         self.log.info(st, 'Shard status');
-                        return next();
+                        next();
                     });
                 }
             ]
-        }, function (er, results) {
+        }, function (_pipeErr, results) {
             // Add error to history in case the update execution failed:
             if (err) {
                 if (!history) {
                     self.log.warn('History not set for post-setup ha-manatee');
-                    return cb(err);
+                    cb(err);
+                    return;
                 }
                 history.error = err;
             } else {
@@ -717,11 +736,12 @@ function do_ha_manatee(subcmd, opts, args, cb) {
             }
             if (!history) {
                 self.log.warn('History not set for post-setup ha-manatee');
-                return cb();
+                cb();
+                return;
             }
             history.changes = changes;
             // No need to add `history.finished` here, History instance will do
-            self.sdcadm.history.updateHistory(history, function (err2, hist2) {
+            self.sdcadm.history.updateHistory(history, function (err2, _hist2) {
                 if (err) {
                     cb(err);
                 } else if (err2) {
@@ -784,7 +804,7 @@ do_ha_manatee.help = (
 
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_ha_manatee: do_ha_manatee
diff --git a/lib/post-setup/index.js b/lib/post-setup/index.js
index 75733f6..3f6cd2e 100644
--- a/lib/post-setup/index.js
+++ b/lib/post-setup/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -19,7 +19,7 @@ var util = require('util');
 
 
 
-//---- PostSetup CLI class
+// --- PostSetup CLI class
 
 function PostSetupCLI(top) {
     this.top = top;
@@ -47,7 +47,7 @@ function PostSetupCLI(top) {
 }
 util.inherits(PostSetupCLI, Cmdln);
 
-PostSetupCLI.prototype.init = function init(opts, args, cb) {
+PostSetupCLI.prototype.init = function init(_opts, _args, _cb) {
     this.sdcadm = this.top.sdcadm;
     this.progress = this.top.progress;
     this.log = this.top.log;
@@ -76,7 +76,7 @@ PostSetupCLI.prototype.do_cmon = require('./cmon').do_cmon;
 PostSetupCLI.prototype.do_cns = require('./cns').do_cns;
 PostSetupCLI.prototype.do_volapi = require('./volapi').do_volapi;
 
-//---- exports
+// --- exports
 
 module.exports = {
     PostSetupCLI: PostSetupCLI
diff --git a/lib/post-setup/underlay-nics.js b/lib/post-setup/underlay-nics.js
index 4b319be..9fd3295 100644
--- a/lib/post-setup/underlay-nics.js
+++ b/lib/post-setup/underlay-nics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -20,7 +20,7 @@ var vasync = require('vasync');
 var errors = require('../errors');
 
 
-//---- internal support stuff
+// --- internal support stuff
 
 function UnderlayNics() {}
 UnderlayNics.prototype.name = 'underlay-nics';
@@ -90,21 +90,23 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                 return;
             }
 
-            return next();
+            next();
         },
 
         function validateNetwork(_, next) {
             progress('Verifying the provided network exists');
-            sdcadm.napi.getNetwork(opts.net_uuid, function (err, net) {
+            sdcadm.napi.getNetwork(opts.net_uuid, function (err, _net) {
                 if (err) {
                     if (err.statusCode === 404) {
-                        return next(new errors.UsageError('The provided ' +
+                        next(new errors.UsageError('The provided ' +
                                     'network UUID cannot be found in NAPI'));
+                        return;
                     } else {
-                        return next(new errors.SDCClientError(err, 'napi'));
+                        next(new errors.SDCClientError(err, 'napi'));
+                        return;
                     }
                 }
-                return next();
+                next();
             });
         },
 
@@ -114,7 +116,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                 setup: true
             }, function (err, recs) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
                 }
                 var hostnames = {};
                 recs.forEach(function (r) {
@@ -159,7 +162,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                     } else {
                         if (!nics.length) {
                             cns2Update.push(cn);
-                            return nextCn();
+                            nextCn();
+                            return;
                         }
                         var hasUnderlayNic = false;
                         nics.forEach(function (nic) {
@@ -173,7 +177,7 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                         if (!hasUnderlayNic) {
                             cns2Update.push(cn);
                         }
-                        return nextCn();
+                        nextCn();
                     }
                 });
             }
@@ -218,7 +222,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
 
                         if (hasUnderlayTag) {
                             cns2Update.push(cn);
-                            return nextCn();
+                            nextCn();
+                            return;
                         }
 
                         sdcadm.napi.listAggrs({
@@ -270,7 +275,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
 
         function saveChangesToHistory(_, next) {
             if (!cns2Update.length) {
-                return next();
+                next();
+                return;
             }
             changes.push({
                 service: {
@@ -285,16 +291,18 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
 
         function provisionNics(_, next) {
             if (!cns2Update.length) {
-                return next();
+                next();
+                return;
             }
             function provisionUnderlayNic(cn, nextNic) {
                 var route = util.format('/networks/%s/nics', opts.net_uuid);
@@ -306,7 +314,8 @@ UnderlayNics.prototype.execute = function (opts, cb) {
                 }, function (err, res) {
                     if (err) {
                         errs.push(new errors.SDCClientError(err, 'napi'));
-                        return nextNic(err);
+                        nextNic(err);
+                        return;
                     }
                     progress('Underlay NIC created for CN %s', cn);
                     nextNic();
@@ -325,13 +334,15 @@ UnderlayNics.prototype.execute = function (opts, cb) {
 
         if (!hist) {
             log.debug('History not set for underlay-nics');
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (!cns2Update.length) {
             progress('All the provided CNs already had an underlay NIC' +
                     ' on the provided network');
-            return cb(err);
+            cb(err);
+            return;
         }
 
         if (err) {
@@ -340,18 +351,18 @@ UnderlayNics.prototype.execute = function (opts, cb) {
 
         sdcadm.history.updateHistory(hist, function (err2) {
             if (err) {
-                return cb(err);
+                cb(err);
             } else if (err2) {
-                return cb(err2);
+                cb(err2);
             } else {
-                return cb();
+                cb();
             }
         });
     });
 };
 
 
-//---- CLI
+// --- CLI
 
 function do_underlay_nics(subcmd, opts, args, cb) {
     if (opts.help) {
@@ -361,14 +372,16 @@ function do_underlay_nics(subcmd, opts, args, cb) {
 
     var net_uuid = args.shift();
     if (net_uuid === 'help') {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'Please use `sdcadm post-setup help underlay-nics` instead'));
+        return;
     }
     var cns = args.length ? args : null;
 
     if (!net_uuid || !cns) {
-        return cb(new errors.UsageError(
+        cb(new errors.UsageError(
             'must specify network uuid and at least one server'));
+        return;
     }
 
     var proc = new UnderlayNics();
@@ -405,7 +418,7 @@ do_underlay_nics.options = [
 ];
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_underlay_nics: do_underlay_nics
diff --git a/lib/post-setup/volapi.js b/lib/post-setup/volapi.js
index 39aab97..873ca0f 100644
--- a/lib/post-setup/volapi.js
+++ b/lib/post-setup/volapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -13,8 +13,6 @@
  */
 
 var assert = require('assert-plus');
-var https = require('https');
-var once = require('once');
 var util = require('util'),
     format = util.format;
 var vasync = require('vasync');
@@ -121,7 +119,8 @@ function do_volapi(subcmd, opts, args, cb) {
         this.do_help('help', {}, [subcmd], cb);
         return;
     } else if (args.length > 0) {
-        return cb(new errors.UsageError('too many args: ' + args));
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     var start = Date.now();
@@ -168,7 +167,7 @@ function do_volapi(subcmd, opts, args, cb) {
     vasync.pipeline({arg: context, funcs: [
         steps.sapiAssertFullMode,
 
-        function checkFabricsEnabled(ctx, next) {
+        function checkFabricsEnabled(_, next) {
             var err;
 
             assert.object(self.sdcadm.sdc.metadata, 'self.sdcadm.sdc.metadata');
@@ -186,12 +185,14 @@ function do_volapi(subcmd, opts, args, cb) {
                 active: true};
             self.sdcadm.papi.list(filter, {}, function (err, pkgs) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 } else if (pkgs.length !== 1) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: format('%d "%s" active packages found',
                             pkgs.length, svcData.params.package_name)
                     }));
+                    return;
                 }
                 ctx.volapiPkg = pkgs[0];
                 next();
@@ -240,7 +241,8 @@ function do_volapi(subcmd, opts, args, cb) {
 
         function importVolapiImage(ctx, next) {
             if (ctx.volapiImgToDownload === undefined) {
-                return next();
+                next();
+                return;
             }
 
             var proc = new DownloadImages({
@@ -300,7 +302,8 @@ function do_volapi(subcmd, opts, args, cb) {
 
         function createVolApiSvc(ctx, next) {
             if (ctx.volapiSvc) {
-                return next();
+                next();
+                return;
             }
 
             self.progress('Creating "volapi" service');
@@ -316,7 +319,8 @@ function do_volapi(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createService('volapi', self.sdcadm.sdc.uuid,
                     svcData, function (err, svc) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 ctx.volapiSvc = svc;
                 self.log.info({svc: svc}, 'created volapi svc');
@@ -348,7 +352,7 @@ function do_volapi(subcmd, opts, args, cb) {
             };
             self.sdcadm.sapi.listInstances(filter, function (err, insts) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
                 } else if (insts && insts.length) {
                     // Note this doesn't handle multiple insts.
                     ctx.volapiInst = insts[0];
@@ -356,7 +360,8 @@ function do_volapi(subcmd, opts, args, cb) {
                         uuid: ctx.volapiInst.uuid
                     }, function (vmErr, volapiVm) {
                         if (vmErr) {
-                            return next(vmErr);
+                            next(vmErr);
+                            return;
                         }
 
                         ctx.volapiVm = volapiVm;
@@ -392,7 +397,8 @@ function do_volapi(subcmd, opts, args, cb) {
 
         function createVolApiInst(ctx, next) {
             if (ctx.volapiInst !== undefined) {
-                return next();
+                next();
+                return;
             }
 
             self.progress('Creating "volapi" instance');
@@ -407,7 +413,8 @@ function do_volapi(subcmd, opts, args, cb) {
             self.sdcadm.sapi.createInstance(ctx.volapiSvc.uuid, instOpts,
                     function (err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/procedures/download-images.js b/lib/procedures/download-images.js
index b6913aa..913b984 100644
--- a/lib/procedures/download-images.js
+++ b/lib/procedures/download-images.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -426,7 +426,7 @@ function importSetOfImages(args, cb) {
                         // Retry image import 5 times by default:
                         retries: 5
                     },
-                    function (err, img, res) {
+                    function (err, _img, res) {
                         if (err) {
                             progress('Error importing image %s\n    (%s@%s)',
                                 image.uuid, image.name, image.version);
@@ -471,7 +471,7 @@ function importSetOfImages(args, cb) {
 }
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     DownloadImages: DownloadImages
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 6042364..f3dd6c2 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -52,7 +52,7 @@ function NoOp() {}
 NoOp.prototype.summarize = function noOpSummarize() {
     return 'no-op';
 };
-NoOp.prototype.execute = function noOpExecute(options, cb) {
+NoOp.prototype.execute = function noOpExecute(_options, cb) {
     cb();
 };
 
@@ -914,8 +914,8 @@ function coordinatePlan(opts, cb) {
                                 if (!svcs[ins.service]) {
                                     svcs[ins.service] = [ins.server];
                                 } else if (
-                                    svcs[ins.service].
-                                    indexOf(ins.server) !== -1) {
+                                    svcs[ins.service]
+                                    .indexOf(ins.server) !== -1) {
                                     duplicates = true;
                                     errs.push(new errors.UsageError(format(
                                         'Duplicated server "%s" for service ' +
diff --git a/lib/procedures/procedure.js b/lib/procedures/procedure.js
index 00f7d3c..96454da 100644
--- a/lib/procedures/procedure.js
+++ b/lib/procedures/procedure.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 function Procedure() {}
 Procedure.prototype.summarize = function summarize() {};
-Procedure.prototype.execute = function execute(options, cb) {};
+Procedure.prototype.execute = function execute(_options, _cb) {};
 
-//---- exports
+// --- exports
 
 module.exports = {
     Procedure: Procedure
diff --git a/lib/procedures/shared.js b/lib/procedures/shared.js
index 3e098e1..f61a6b3 100644
--- a/lib/procedures/shared.js
+++ b/lib/procedures/shared.js
@@ -38,7 +38,8 @@ var ur = require('../ur');
  */
 function getUserScript(arg, next) {
     if (arg.userScript) {
-        return next();
+        next();
+        return;
     }
     var userScriptPath = path.resolve(__dirname, '..', '..',
             'etc', 'setup', 'user-script');
@@ -55,7 +56,8 @@ function getUserScript(arg, next) {
  */
 function getOldUserScript(arg, next) {
     if (arg.userScript) {
-        return next();
+        next();
+        return;
     }
     var svc = arg.change.service;
     var img = (arg.change.inst) ? arg.change.inst.image :
@@ -73,7 +75,8 @@ function getOldUserScript(arg, next) {
             if (svc.metadata) {
                 arg.userScript = svc.metadata['user-script'];
             }
-            return next();
+            next();
+            return;
         }
 
         fs.readFile(usPath, 'utf8', function (err, content) {
@@ -89,7 +92,8 @@ function writeOldUserScriptForRollback(arg, next) {
     var log = arg.opts.log;
     if (!svc.metadata ||
             svc.metadata['user-script'] === arg.userScript) {
-        return next();
+        next();
+        return;
     }
     var usPath = path.resolve(arg.opts.wrkDir,
         format('%s.%s.user-script', svc.uuid, img.uuid));
@@ -100,8 +104,9 @@ function writeOldUserScriptForRollback(arg, next) {
         'utf8',
         function (err) {
             if (err) {
-                return next(new errors.UpdateError(err,
+                next(new errors.UpdateError(err,
                     'error saving old user-script: ' + usPath));
+                return;
             }
             next();
         });
@@ -112,7 +117,8 @@ function updateSvcUserScript(arg, next) {
     var progress = arg.opts.progress;
     var sdcadm = arg.opts.sdcadm;
     if (svc.metadata['user-script'] === arg.userScript) {
-        return next();
+        next();
+        return;
     }
     progress('Update "%s" service user-script', svc.name);
     sdcadm.sapi.updateService(
@@ -131,7 +137,8 @@ function updateVmUserScript(arg, next) {
     var inst = arg.change.inst;
     var log = arg.opts.log;
     if (svc.metadata && svc.metadata['user-script'] === arg.userScript) {
-        return next();
+        next();
+        return;
     }
     progress('Update "%s" VM %s user-script', svc.name, inst.zonename);
     log.trace({inst: inst, image: arg.change.image.uuid},
@@ -163,7 +170,8 @@ function updateVmUserScript(arg, next) {
                 inst.zonename, code, signal,
                 common.indent(stdout, '        '),
                 common.indent(stderr, '        '));
-            return next(new errors.InternalError({message: msg}));
+            next(new errors.InternalError({message: msg}));
+            return;
         }
         next();
     });
@@ -254,10 +262,11 @@ function imgadmInstall(arg, next) {
                     '\tstdout:\n%s\n' +
                     '\tstderr:\n%s', img.uuid,
                     argv, err.code, stdout.trim(), stderr.trim());
-                return next(new errors.InternalError({
+                next(new errors.InternalError({
                     message: msg,
                     cause: err
                 }));
+                return;
             }
             next();
         });
@@ -303,12 +312,13 @@ function reprovision(arg, next) {
                 inst.zonename, code, signal,
                 common.indent(stdout, '        '),
                 common.indent(stderr, '        '));
-            return arg.opts.sdcadm.reprovFailLock_Lock(msg, function (err) {
+            arg.opts.sdcadm.reprovFailLock_Lock(msg, function (err) {
                 if (err) {
                     log.error(err, 'reprovFailLock_Lock failure');
                 }
                 next(new errors.InternalError({message: msg}));
             });
+            return;
         }
         next();
     });
@@ -414,7 +424,9 @@ function waitForInstToBeUp(arg, cb) {
                 // If any service went into maintenance we rather fail now:
                 var hErrs = inst.health_errors;
                 if (hErrs && hErrs.length && hErrs[0].message &&
+                    /* eslint-disable */
                     hErrs[0].message.match(/State\: maintenance/)) {
+                    /* eslint-enable */
                     cb(new errors.InstanceIsDownError(
                                 hErrs[0].message));
                     return;
@@ -453,7 +465,8 @@ function checkHA(arg, next) {
         service_uuid: svc.uuid
     }, function (err, instances) {
         if (err) {
-            return next(new SDCClientError(err, 'sapi'));
+            next(new SDCClientError(err, 'sapi'));
+            return;
         }
 
         sdcadm.vmapi.listVms({
@@ -461,7 +474,8 @@ function checkHA(arg, next) {
             state: 'running'
         }, function (vmsErr, vms) {
             if (vmsErr) {
-                return next(new SDCClientError(vmsErr, 'vmapi'));
+                next(new SDCClientError(vmsErr, 'vmapi'));
+                return;
             }
 
             sdcadm.log.trace({vms: vms, instances: instances}, 'checkHA');
@@ -478,18 +492,19 @@ function checkHA(arg, next) {
             });
 
             if (errs.length) {
-                return next(new errors.InternalError({
+                next(new errors.InternalError({
                     message: format('The following SAPI instances are not ' +
                         'present into VMAPI and should be removed before ' +
                         'continue with the upgrade process:\n%s',
                         errs.join(', '))
                 }));
+                return;
             }
 
             if (instances.length > 1) {
                 arg.HA = true;
             }
-            return next();
+            next();
         });
     });
 }
@@ -579,7 +594,8 @@ function getTmpInstanceUUID(arg, next) {
 
 function checkIfTmpVMHasErrors(arg, next) {
     if (arg.HA) {
-        return next();
+        next();
+        return;
     }
     var progress = arg.opts.progress;
     var log = arg.opts.log;
@@ -595,19 +611,22 @@ function checkIfTmpVMHasErrors(arg, next) {
             log: log
         }, function (err, stdout, stderr) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             var errs = stdout.trim();
             if (errs) {
                 if (counter < limit) {
-                    return setTimeout(_checkIfItHasErrors, 5000);
+                    setTimeout(_checkIfItHasErrors, 5000);
+                    return;
                 } else {
                     progress('Timeout (5m) waiting for %s to be up',
                             arg.tmpUUID);
-                    return next(errs);
+                    next(errs);
+                    return;
                 }
             }
-            return next();
+            next();
         });
     }
     _checkIfItHasErrors();
@@ -693,7 +712,8 @@ function stopTmpVm(arg, next) {
 
 function destroyTmpVM(arg, next) {
     if (arg.HA) {
-        return next();
+        next();
+        return;
     }
     var progress = arg.opts.progress;
     var sdcadm = arg.opts.sdcadm;
@@ -702,12 +722,13 @@ function destroyTmpVM(arg, next) {
         if (err) {
             var msg = format('Error destroying tmp VM %s (%s)',
                     arg.tmpUUID, arg.tmpAlias);
-            return next(new errors.InternalError({
+            next(new errors.InternalError({
                 message: msg,
                 cause: err
             }));
+            return;
         }
-        return next();
+        next();
     });
 }
 
@@ -786,10 +807,11 @@ function imgadmInstallRemote(opts, callback) {
                 '\tstdout:\n%s\n' +
                 '\tstderr:\n%s', img.uuid,
                 argv, err.code, stdout.trim(), stderr.trim());
-            return callback(new errors.InternalError({
+            callback(new errors.InternalError({
                 message: msg,
                 cause: err
             }));
+            return;
         }
         callback();
     });
@@ -826,10 +848,11 @@ function disableVMRegistrarRemote(arg, callback) {
                 '\tstdout:\n%s\n' +
                 '\tstderr:\n%s', zonename,
                 argv, err.code, stdout.trim(), stderr.trim());
-            return callback(new errors.InternalError({
+            callback(new errors.InternalError({
                 message: msg,
                 cause: err
             }));
+            return;
         }
         callback();
     });
@@ -917,7 +940,8 @@ function updateVmUserScriptRemote(arg, next) {
     var log = arg.log;
     var server = arg.server;
     if (svc.metadata['user-script'] === arg.userScript) {
-        return next();
+        next();
+        return;
     }
     progress('Update "%s" VM %s user-script', svc.name, zonename);
     log.trace({inst: zonename, userScript: arg.userScript},
@@ -958,7 +982,8 @@ function updateVmUserScriptRemote(arg, next) {
                 zonename, code, signal,
                 common.indent(stdout, '        '),
                 common.indent(stderr, '        '));
-            return next(new errors.InternalError({message: msg}));
+            next(new errors.InternalError({message: msg}));
+            return;
         }
         next();
     });
@@ -1128,11 +1153,12 @@ function getShardStatus(opts, callback) {
         log: opts.log
     }, function (err, res, stderr) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var manateeShard = JSON.parse(res);
-        return callback(null, manateeShard);
+        callback(null, manateeShard);
     });
 }
 
@@ -1171,16 +1197,17 @@ function manateeSitterSvcStatus(opts, callback) {
         log: opts.log
     }, function (err, stdout, stderr) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         try {
             // Due to the -j option of sdc-oneachnode:
             var res = JSON.parse(stdout);
             var out = res[0].result.stdout.trim() || null;
-            return callback(null, out);
+            callback(null, out);
         } catch (e) {
-            return callback(e);
+            callback(e);
         }
     });
 }
@@ -1230,7 +1257,7 @@ function waitForManatee(opts, callback) {
         Object.keys(obj.sdc).forEach(function (m) {
             if ((m === 'primary' || m === 'sync') && !obj.sdc[m].error) {
                 shardPgSt[m] = {
-                    pg_status: obj.sdc[m].online ? 'ok': '-',
+                    pg_status: obj.sdc[m].online ? 'ok' : '-',
                     repl_status: (obj.sdc[m].repl &&
                         obj.sdc[m].repl.sync_state) ?
                             obj.sdc[m].repl.sync_state : '-'
@@ -1242,7 +1269,7 @@ function waitForManatee(opts, callback) {
 
                 if (typeof (obj.sdc[m].online) !== 'undefined') {
                     shardPgSt[m].push({
-                        pg_status: obj.sdc[m].online ? 'ok': '-'
+                        pg_status: obj.sdc[m].online ? 'ok' : '-'
                     });
                 }
             }
@@ -1265,7 +1292,8 @@ function waitForManatee(opts, callback) {
             counter += 1;
 
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
 
             if (!opts.hasManatee21) {
@@ -1319,8 +1347,9 @@ function waitForManatee(opts, callback) {
                 }
                 break;
             default:
-                return callback(new errors.UsageError(
+                callback(new errors.UsageError(
                             'Unknown manatee role ' + opts.role));
+                return;
             }
 
 
@@ -1332,13 +1361,15 @@ function waitForManatee(opts, callback) {
             }, 'manatee shard state object');
 
             if (done) {
-                return callback(null);
+                callback(null);
+                return;
             }
 
             // If mode is deposed, it will not change nevermore, let's
             // return here and avoid waiting for anything else
             if (obj.deposed) {
-                return callback('deposed');
+                callback('deposed');
+                return;
             }
 
             if (counter < limit) {
@@ -1351,17 +1382,19 @@ function waitForManatee(opts, callback) {
                     vm: opts.manateeUUID
                 }, function (er2, st) {
                     if (er2) {
-                        return callback(er2);
+                        callback(er2);
+                        return;
                     }
                     if (st === 'maintenance') {
-                        return callback(new InternalError({
+                        callback(new InternalError({
                             message: 'manatee-sitter went into maintenance'
                         }));
+                        return;
                     }
-                    return setTimeout(_waitForStatus, 5000);
+                    setTimeout(_waitForStatus, 5000);
                 });
             } else {
-                return callback(format(
+                callback(format(
                     'Timeout (15m) waiting for manatee %s to be %s',
                     opts.role, opts.state));
             }
@@ -1433,7 +1466,8 @@ function disableManateeSitter(opts, cb) {
     vasync.pipeline({funcs: [
         function disableAsyncManatee(_, next) {
             if (!shard.async || !shard.async.length) {
-                return next();
+                next();
+                return;
             }
             progress('Disabling async manatee');
             disableRemoteSvc({
@@ -1446,7 +1480,8 @@ function disableManateeSitter(opts, cb) {
 
         function waitAsyncDisabled(_, next) {
             if (!shard.async || !shard.async.length) {
-                return next();
+                next();
+                return;
             }
             progress('Waiting for async manatee to be disabled');
             var _opts = {
@@ -1465,7 +1500,8 @@ function disableManateeSitter(opts, cb) {
 
         function disableSyncManatee(_, next) {
             if (!shard.sync) {
-                return next();
+                next();
+                return;
             }
             progress('Disabling sync manatee');
             disableRemoteSvc({
@@ -1478,7 +1514,8 @@ function disableManateeSitter(opts, cb) {
 
         function waitSyncDisabled(_, next) {
             if (!shard.sync) {
-                return next();
+                next();
+                return;
             }
             progress('Waiting for sync manatee to be disabled');
             var _opts = {
@@ -1567,7 +1604,8 @@ function enableManateeSitter(opts, cb) {
 
         function enableSyncManatee(_, next) {
             if (!shard.sync) {
-                return next();
+                next();
+                return;
             }
 
             progress('Enabling sync manatee');
@@ -1581,7 +1619,8 @@ function enableManateeSitter(opts, cb) {
 
         function waitSyncEnabled(_, next) {
             if (!shard.sync) {
-                return next();
+                next();
+                return;
             }
             progress('Waiting for sync manatee to be enabled');
             var _opts = {
@@ -1600,7 +1639,8 @@ function enableManateeSitter(opts, cb) {
 
         function enableAsyncManatee(_, next) {
             if (!shard.async || !shard.async.length) {
-                return next();
+                next();
+                return;
             }
             progress('Enabling async manatee');
             enableRemoteSvc({
@@ -1613,7 +1653,8 @@ function enableManateeSitter(opts, cb) {
 
         function waitAsyncEnabled(_, next) {
             if (!shard.async || !shard.async.length) {
-                return next();
+                next();
+                return;
             }
             progress('Waiting for async manatee to be enabled');
             var _opts = {
@@ -1844,11 +1885,12 @@ function getShardState(opts, callback) {
         log: opts.log
     }, function (err, res, stderr) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var manateeShard = JSON.parse(res);
-        return callback(null, manateeShard);
+        callback(null, manateeShard);
     });
 }
 
@@ -1884,7 +1926,8 @@ function wait4Morays(opts, cb) {
                     log.debug({
                         err: err
                     }, 'checkInstSvcs');
-                    return next_(err);
+                    next_(err);
+                    return;
                 }
                 counter += 1;
                 log.debug({
@@ -1893,13 +1936,13 @@ function wait4Morays(opts, cb) {
                 var res = results[0];
                 if (res.health_errors && res.health_errors.length) {
                     if (counter < limit) {
-                        return setTimeout(_wait4Moray, 5000);
+                        setTimeout(_wait4Moray, 5000);
                     } else {
-                        return next_(new errors.InstanceIsDownError(
+                        next_(new errors.InstanceIsDownError(
                                 res.health_errors[0].message));
                     }
                 } else {
-                    return next_();
+                    next_();
                 }
             });
         }
@@ -1918,12 +1961,7 @@ function wait4Morays(opts, cb) {
                 type: 'vm'
             }, next_);
         }
-    }, function (pError) {
-        if (pError) {
-            return cb(pError);
-        }
-        return cb();
-    });
+    }, cb);
 }
 
 
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index dd603d0..57123ef 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 
@@ -17,7 +17,6 @@ var path = require('path');
 var fs = require('fs');
 
 var vasync = require('vasync');
-var once = require('once');
 var mkdirp = require('mkdirp');
 var uuid = require('node-uuid');
 var ProgressBar = require('progbar').ProgressBar;
@@ -147,12 +146,14 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                     name: 'dockerlogger'
                 }, function (err, svcs) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'sapi'));
+                        next(new errors.SDCClientError(err, 'sapi'));
+                        return;
                     }
 
                     if (svcs.length) {
                         svc = svcs[0];
-                        return next();
+                        next();
+                        return;
                     }
                     progress('Creating "dockerlogger" servivce');
                     sdcadm.sapi.createService('dockerlogger', sdcadm.sdc.uuid, {
@@ -162,10 +163,11 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                         type: 'agent'
                     }, function (er2, service) {
                         if (er2) {
-                            return next(new errors.SDCClientError(er2, 'sapi'));
+                            next(new errors.SDCClientError(er2, 'sapi'));
+                            return;
                         }
                         svc = service;
-                        return next();
+                        next();
                     });
                 });
             },
@@ -174,7 +176,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                 // Get all servers to validate if unsetup servers are selected.
                 sdcadm.cnapi.listServers({}, function (err, servers) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     ctx.allServers = servers;
                     next();
@@ -186,7 +189,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
             // setup will recreate them properly
             function cleanupSAPIInsts(ctx, next) {
                 if (!change.insts.length || change.type !== 'update-service') {
-                    return next();
+                    next();
+                    return;
                 }
 
                 var allServersUUIDS = ctx.allServers.map(function (c) {
@@ -200,7 +204,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                 });
 
                 if (!instancesToDelete.length) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 change.insts = change.insts.filter(function (i) {
@@ -211,14 +216,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
 
                 vasync.forEachPipeline({
                     func: function dropInstance(inst, nextInst) {
-                        sdcadm.sapi.deleteInstance(inst, function (instE) {
-                            return nextInst(instE);
-                        });
+                        sdcadm.sapi.deleteInstance(inst, nextInst);
                     },
                     inputs: instancesToDelete
-                }, function (er2) {
-                    return next(er2);
-                });
+                }, next);
             },
 
             function validateServersToUpdate(ctx, next) {
@@ -336,7 +337,8 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                 sdcadm.imgapi.getImageFile(change.image.uuid, filepath,
                         function (err, res) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'imgapi'));
+                        next(new errors.SDCClientError(err, 'imgapi'));
+                        return;
                     }
                     next();
                 });
@@ -364,7 +366,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                         stderr: stderr
                     }, 'ran cp command');
                     if (err) {
-                        return next(new errors.InternalError({
+                        next(new errors.InternalError({
                             message: format('error copying shar file to %s',
                                              assetsdir),
                             cmd: argv.join(' '),
@@ -372,6 +374,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                             stderr: stderr,
                             cause: err
                         }));
+                        return;
                     }
                     next();
                 });
@@ -467,8 +470,9 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                         var rq = ur.runQueue(queueOpts,
                                 function runQueueCb(err, results) {
                             if (err) {
-                                return nextCmd(new errors.UpdateError(
+                                nextCmd(new errors.UpdateError(
                                     err, 'unexpected runQueue error'));
+                                return;
                             }
 
                             var errs = [];
@@ -533,7 +537,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                 });
             },
 
-            function updateSvcImage(ctx, next) {
+            function updateSvcImage(_, next) {
                 if (change.type !== 'update-service') {
                     next();
                     return;
@@ -555,7 +559,7 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
     }, callback);
 };
 
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateDockerlogger: UpdateDockerlogger
diff --git a/lib/procedures/update-manatee-v2.js b/lib/procedures/update-manatee-v2.js
index d95f641..e2072c5 100644
--- a/lib/procedures/update-manatee-v2.js
+++ b/lib/procedures/update-manatee-v2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 
@@ -82,7 +82,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
     var log = opts.log;
     var progress = opts.progress;
     var sdcadm = opts.sdcadm;
-    var rollback = opts.plan.rollback || false;
+    var rollback = opts.plan.rollback || false;
 
     // We need this to retrieve shard info using local manatee instance:
     function getShardStateLocally(manateeUUID, hasManatee21, callback) {
@@ -99,11 +99,12 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             log: log
         }, function (err, stdout, stderr) {
             if (err) {
-                return callback(err);
+                callback(err);
+                return;
             }
             // REVIEW: Shall we try/catch here?
             var manateeShard = JSON.parse(stdout);
-            return callback(null, manateeShard);
+            callback(null, manateeShard);
         });
     }
 
@@ -118,8 +119,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             '-j',
             '-n',
             server,
-            /* JSSTYLED */
-            format('/usr/sbin/zfs get -H -o value canmount zones/%s/data/manatee', zone)
+            format('/usr/sbin/zfs get -H -o value canmount ' +
+                'zones/%s/data/manatee', zone)
         ];
 
         common.execFilePlus({
@@ -134,13 +135,14 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             }, 'ran zfs get canmount command');
 
             if (err) {
-                return callback(new errors.InternalError({
+                callback(new errors.InternalError({
                     message: 'error running zfs get canmount',
                     cmd: argv.join(' '),
                     stdout: stdout,
                     stderr: stderr,
                     cause: err
                 }));
+                return;
             }
 
             var res = JSON.parse(stdout.trim());
@@ -159,7 +161,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             '-n',
             server,
             /* JSSTYLED */
-            format('/usr/sbin/zfs set canmount=noauto zones/%s/data/manatee', zone)
+            format('/usr/sbin/zfs set canmount=noauto ' +
+                'zones/%s/data/manatee', zone)
         ];
         common.execFilePlus({
             argv: argv,
@@ -173,13 +176,14 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             }, 'ran zfs set canmount=noauto command');
 
             if (err) {
-                return callback(new errors.InternalError({
+                callback(new errors.InternalError({
                     message: 'error running zfs set canmount=noauto',
                     cmd: argv.join(' '),
                     stdout: stdout,
                     stderr: stderr,
                     cause: err
                 }));
+                return;
             }
             callback();
         });
@@ -226,7 +230,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
         function waitForManatee(
                 role, state, server, zone, hasManatee21, callback
         ) {
-            return s.waitForManatee({
+            s.waitForManatee({
                 log: log,
                 server: server,
                 manateeUUID: zone,
@@ -244,17 +248,20 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 application_uuid: change.service.application_uuid
             }, function (svcErr, svcs) {
                 if (svcErr) {
-                    return next(svcErr);
+                    next(svcErr);
+                    return;
                 }
                 if (!svcs.length) {
-                    return next(new errors.SDCClientError(new Error(
+                    next(new errors.SDCClientError(new Error(
                         'No services named "moray"'), 'sapi'));
+                    return;
                 }
                 var moraySvc = svcs[0];
                 var imgUUID = moraySvc.params.image_uuid;
                 sdcadm.imgapi.getImage(imgUUID, function (err, img_) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     var parts = img_.version.split('-');
                     var curVer = parts[parts.length - 2];
@@ -265,10 +272,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             UpdateManateeV2.V2_TIMESTAMP + ' (current ' +
                             'version was built ' + curVer + ')';
                         progress(msg);
-                        return next(new errors.ValidationError(new Error(msg),
+                        next(new errors.ValidationError(new Error(msg),
                             'sdcadm'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             });
         }
@@ -278,7 +286,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 arg.change.inst.image;
             sdcadm.imgapi.getImage(imgUUID, function (err, img_) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 var parts = img_.version.split('-');
                 var curVer = parts[parts.length - 2];
@@ -288,10 +297,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                         'before' + UpdateManateeV2.MIN_V2_TIMESTAMP +
                         ' (current version was built ' + curVer + ')';
                     progress(msg);
-                    return next(new errors.ValidationError(new Error(msg),
+                    next(new errors.ValidationError(new Error(msg),
                         'sdcadm'));
+                    return;
                 }
-                return next();
+                next();
             });
         }
 
@@ -308,15 +318,16 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     UpdateManateeV2.MIN_V2_TIMESTAMP + ' (current ' +
                     'version was built ' + curVer + ')';
                 progress(msg);
-                return next(new errors.ValidationError(new Error(msg),
+                next(new errors.ValidationError(new Error(msg),
                     'sdcadm'));
+                return;
             }
             if (curVer >= UpdateManateeV2.SAPI_224_MIN_TS) {
                 pastSAPI224 = true;
                 progress('Target version is new enough to avoid ' +
                     'setting SAPI back to proto mode');
             }
-            return next();
+            next();
         }
 
         function checkCurrentManateeVersion(_, next) {
@@ -325,7 +336,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 arg.change.insts[0].image : arg.change.inst.image;
             sdcadm.imgapi.getImage(imgUUID, function (err, img_) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 var parts = img_.version.split('-');
                 var curVer = parts[parts.length - 2];
@@ -334,13 +346,14 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     progress('manatee-adm version is >= 2.1.0.' +
                             ' Using new commands');
                 }
-                return next();
+                next();
             });
         }
 
         function freeze(_, next) {
             if (!arg.HA || version === '1.0.0' || isFrozen) {
-                return next();
+                next();
+                return;
             }
             progress('Freezing cluster state');
             common.manateeFreeze({
@@ -350,10 +363,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 log: log
             }, function (err) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 isFrozen = true;
-                return next();
+                next();
             });
         }
 
@@ -396,9 +410,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             });
         }
 
-        var context = {};
-
-        vasync.pipeline({arg: context, funcs: funcs.concat([
+        vasync.pipeline({funcs: funcs.concat([
 
             /*
              * We cannot generally proceed successfully through this
@@ -459,7 +471,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 getShardStateLocally(manateeUUID, hasPgStatus,
                         function (err, st) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     Object.keys(st).forEach(function (m) {
                         if (['primary', 'sync', 'async'].indexOf(m) !== -1) {
@@ -473,8 +486,9 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             '`manatee-adm rebuild`\n before attempting the ' +
                             'update again.';
                         progress(msg);
-                        return next(new errors.UpdateError(new Error(msg),
+                        next(new errors.UpdateError(new Error(msg),
                                     'manatee-adm'));
+                        return;
                     }
                     // Refuse to update HA setup w/o all the shard members.
                     // Instead, suggest to complete HA setup
@@ -484,15 +498,16 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             'sdcadm post-setup ha-manatee\n before ' +
                             'attempting the update again.';
                         progress(msg2);
-                        return next(new errors.UpdateError(new Error(msg2),
+                        next(new errors.UpdateError(new Error(msg2),
                                     'sdcadm'));
+                        return;
 
                     }
                     // For now can handle only a single 'async' manatee
                     if (arg.shard.async && arg.shard.async.length) {
                         arg.shard.async = arg.shard.async[0];
                     }
-                    return next();
+                    next();
                 });
             },
 
@@ -503,7 +518,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     arg.shard.primary.server_hostname = change.inst.hostname;
                     arg.shard.primary.alias = change.inst.alias;
                     arg.shard.primary.image = change.inst.image;
-                    return next();
+                    next();
+                    return;
                 }
 
 
@@ -525,7 +541,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function urDiscovery(ctx, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 var nodes = [arg.shard.primary.server_uuid];
                 if (arg.shard.sync) {
@@ -544,10 +561,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     urconn: ctx.urconn
                 }, function (err, urAvailServers) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     ctx.urServersToUpdate = urAvailServers;
-                    return next();
+                    next();
                 });
             },
 
@@ -559,10 +577,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     state: 'running'
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
-                        return next(vmsErr);
+                        next(vmsErr);
+                        return;
                     }
                     morayVms = vms_;
-                    return next();
+                    next();
                 });
             },
 
@@ -573,16 +592,18 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     state: 'running'
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
-                        return next(vmsErr);
+                        next(vmsErr);
+                        return;
                     }
                     wfVms = vms_;
-                    return next();
+                    next();
                 });
             },
 
             function checkInstanceImages(_, next) {
                 if (!arg.HA || opts.plan.forceSameImage) {
-                    return next();
+                    next();
+                    return;
                 }
                 vasync.forEachParallel({
                     inputs: [
@@ -593,28 +614,25 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     func: function (vm, next_) {
                         sdcadm.imgapi.getImage(vm.image, function (err, img_) {
                             if (err) {
-                                return next_(err);
+                                next_(err);
+                                return;
                             }
                             if (img_.uuid === arg.change.image.uuid) {
                                 arg[vm.role + '_updated'] = true;
                             }
-                            return next_();
+                            next_();
                         });
                     }
-                }, function paraCb(parallelErr) {
-                    if (parallelErr) {
-                        return next(parallelErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function installPrimaryImage(_, next) {
                 if (!arg.HA) {
-                    return s.imgadmInstall(arg, next);
+                    s.imgadmInstall(arg, next);
                 } else {
                     if (arg.primary_updated) {
-                        return next();
+                        next();
+                        return;
                     }
                     progress('Installing image %s\n    (%s@%s) on server %s',
                         arg.change.image.uuid, arg.change.image.name,
@@ -627,22 +645,17 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                         progress: progress,
                         log: log
                     }, next);
-
                 }
             },
 
             function installImageAsyncServer(_, next) {
-                if (!arg.HA) {
-                    return next();
-                }
-
-                if (arg.shard.async.server_uuid ===
-                        arg.shard.primary.server_uuid) {
-                    return next();
-                }
-
-                if (arg.async_updated) {
-                    return next();
+                if (!arg.HA ||
+                    (arg.shard.async.server_uuid ===
+                        arg.shard.primary.server_uuid) ||
+                    arg.async_updated
+                ) {
+                    next();
+                    return;
                 }
 
                 progress('Installing image %s\n    (%s@%s) on server %s',
@@ -659,18 +672,21 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function installImageSyncServer(_, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 if ((arg.shard.sync.server_uuid ===
                         arg.shard.primary.server_uuid) ||
                         (arg.shard.sync.server_uuid ===
                          arg.shard.async.server_uuid)) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 if (arg.sync_updated) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Installing image %s\n    (%s@%s) on server %s',
@@ -688,7 +704,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             // TOOLS-1223: ensure automatic fix for MANATEE-292
             function setCanmount(_, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 vasync.forEachParallel({
                     inputs: [
@@ -700,7 +717,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                         getCanmount(vm.server_uuid, vm.zoneId,
                                 function (cmErr, canmount) {
                             if (cmErr) {
-                                return next_(cmErr);
+                                next_(cmErr);
+                                return;
                             }
 
                             if (canmount !== 'noauto') {
@@ -713,19 +731,18 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                                     'Setting canmount=noauto ' +
                                     'for /zones/%s/data/manatee',
                                     vm.zoneId);
-                                return setCanmountNoauto(
+                                setCanmountNoauto(
                                     vm.server_uuid, vm.zoneId, next_);
+                                return;
                             }
 
                             log.trace({
                                 vm: vm
                             }, 'canmount already set to noauto');
-                            return next_();
+                            next_();
                         });
                     }
-                }, function (cmErr) {
-                    next(cmErr);
-                });
+                }, next);
             },
 
             // We need to hack SAPI_PROTO_MODE and turn
@@ -735,7 +752,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             // moray.
             function getLocalSapi(_, next) {
                 if (pastSAPI224) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Running vmadm lookup to get local sapi');
                 var argv = [
@@ -762,7 +780,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function setSapiProtoMode(_, next) {
                 if (pastSAPI224) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Set SAPI back to proto mode');
                 var argv = [
@@ -784,7 +803,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function restartSapiIntoProtoMode(_, next) {
                 if (pastSAPI224) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Restarting SAPI in proto mode');
                 svcadm.svcadmRestart({
@@ -803,7 +823,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     log: log
                 }, function (err, stdou, stder) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     // Not implemented until 2.0.0
                     if (stder) {
@@ -811,14 +832,15 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     } else {
                         version = stdou;
                     }
-                    return next();
+                    next();
                 });
             },
 
             // --------------- HA only --------------------------------------
             function verifyFullHA(_, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Verifying full HA setup');
@@ -830,19 +852,20 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     next('HA setup error');
                 }
 
-                return next();
+                next();
             },
 
             function freezeClusterState(_, next) {
-                return freeze(_,  next);
+                freeze(_,  next);
             },
 
             function reprovisionAsync(_, next) {
                 if (!arg.HA || arg.async_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Reprovisioning "async" manatee');
-                return s.reprovisionRemote({
+                s.reprovisionRemote({
                     server: arg.shard.async.server_uuid,
                     img: arg.change.image,
                     zonename: arg.shard.async.zoneId,
@@ -854,11 +877,12 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForAsync(_, next) {
                 if (!arg.HA || arg.async_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Wait for manatee instance %s to come up',
                     arg.shard.async.zoneId);
-                return s.waitForInstToBeUp({
+                s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.async.server_uuid,
                         type: 'update-instance',
@@ -885,7 +909,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function asyncStateBackfill(_, next) {
                 if (!arg.HA || version !== '1.0.0' || arg.async_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Backfilling cluster state');
                 common.manateeAdmRemote({
@@ -898,7 +923,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForHA(_, next) {
                 if (!arg.HA || arg.async_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Waiting for manatee async to be online');
                 waitForManatee('async', 'enabled',
@@ -907,15 +933,16 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             },
 
             function freezeBeforeSync(_, next) {
-                return freeze(_,  next);
+                freeze(_,  next);
             },
 
             function reprovisionSync(_, next) {
                 if (!arg.HA || arg.sync_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Reprovisioning "sync" manatee');
-                return s.reprovisionRemote({
+                s.reprovisionRemote({
                     server: arg.shard.sync.server_uuid,
                     img: arg.change.image,
                     zonename: arg.shard.sync.zoneId,
@@ -927,11 +954,12 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForSync(_, next) {
                 if (!arg.HA || arg.sync_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Wait for manatee instance %s to come up',
                     arg.shard.sync.zoneId);
-                return s.waitForInstToBeUp({
+                s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.sync.server_uuid,
                         type: 'update-instance',
@@ -958,7 +986,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForHASync(_, next) {
                 if (!arg.HA || arg.sync_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Waiting for manatee sync to be online');
                 waitForManatee('sync', 'enabled', arg.shard.primary.server_uuid,
@@ -966,16 +995,17 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             },
 
             function freezeBeforePrimary(_, next) {
-                return freeze(_,  next);
+                freeze(_,  next);
             },
 
             // ---- Shared between HA and no-HA -------------------------------
             function reprovisionPrimary(_, next) {
                 if (arg.HA && arg.primary_updated) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Reprovisioning "primary" manatee');
-                return s.reprovisionRemote({
+                s.reprovisionRemote({
                     server: arg.shard.primary.server_uuid,
                     img: arg.change.image,
                     zonename: arg.shard.primary.zoneId,
@@ -987,12 +1017,13 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForPrimaryInstance(_, next) {
                 if (arg.HA && arg.primary_updated) {
-                    return next();
+                    next();
+                    return;
                 }
 
                 progress('Wait for manatee instance %s to come up',
                     arg.shard.primary.zoneId);
-                return s.waitForInstToBeUp({
+                s.waitForInstToBeUp({
                     change: {
                         server: arg.shard.primary.server_uuid,
                         type: 'update-instance',
@@ -1020,7 +1051,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             // ----------- Again, no-HA only ----------------------------------
             function noHAStateBackfill(_, next) {
                 if (arg.HA || version !== '1.0.0') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Backfilling cluster state');
                 common.manateeAdmRemote({
@@ -1033,7 +1065,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function waitForPrimaryPG(_, next) {
                 if (arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Wait for primary PostgreSQL');
                 common.waitForPostgresUp({
@@ -1047,7 +1080,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
             // not happen. Take it back
             function setONWM(_, next) {
                 if (arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Ensure ONE NODE WRITE MODE');
                 common.manateeAdmRemote({
@@ -1070,12 +1104,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, next_);
                     }
-                }, function (wfErr, wfRes) {
-                    if (wfErr) {
-                        return next(wfErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function disableWorkflowApis(_, next) {
@@ -1090,12 +1119,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, next_);
                     }
-                }, function (wfErr, wfRes) {
-                    if (wfErr) {
-                        return next(wfErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function disableMorays(_, next) {
@@ -1110,12 +1134,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, next_);
                     }
-                }, function (morErr, morRes) {
-                    if (morErr) {
-                        return next(morErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function enableMorays(_, next) {
@@ -1130,12 +1149,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, next_);
                     }
-                }, function (morErr, morRes) {
-                    if (morErr) {
-                        return next(morErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function wait4Morays(_, next) {
@@ -1160,10 +1174,12 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, function (err, stdout, stderr) {
                             if (err) {
-                                return next_(err);
+                                next_(err);
+                                return;
                             }
                             if (stdout.indexOf('maintenance') === -1) {
-                                return next_();
+                                next_();
+                                return;
                             }
                             s.disableRemoteSvc({
                                 server: vm.server_uuid,
@@ -1172,7 +1188,8 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                                 log: log
                             }, function (err2) {
                                 if (err2) {
-                                    return next_(err2);
+                                    next_(err2);
+                                    return;
                                 }
                                 s.enableRemoteSvc({
                                     server: vm.server_uuid,
@@ -1183,12 +1200,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             });
                         });
                     }
-                }, function (wfErr, wfRes) {
-                    if (wfErr) {
-                        return next(wfErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function enableWfApis(_, next) {
@@ -1203,17 +1215,13 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                             log: log
                         }, next_);
                     }
-                }, function (wfErr, wfRes) {
-                    if (wfErr) {
-                        return next(wfErr);
-                    }
-                    return next();
-                });
+                }, next);
             },
 
             function resetSapiToFullMode(_, next) {
                 if (pastSAPI224) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Restoring SAPI to full mode');
                 sdcadm.sapi.setMode('full', next);
@@ -1221,26 +1229,30 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             function ensureFullMode(_, next) {
                 if (pastSAPI224) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Verifying SAPI full mode');
                 sdcadm.sapi.getMode(function (err, mode) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
 
                     if (mode !== 'full') {
                         var msg = 'Unable to set SAPI to full mode.';
-                        return next(new errors.UpdateError(new Error(
+                        next(new errors.UpdateError(new Error(
                                     msg), 'sapi'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             },
 
             function waitForShardHA(_, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Waiting for manatee shard to reach full HA');
                 waitForManatee('async', 'enabled',
@@ -1254,19 +1266,21 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                                     'deposed state. Please log into this ' +
                                     'VM an run:\n\t `manatee-adm rebuild`.';
                                 progress(msg);
-                                return next(new errors.UpdateError(new Error(
+                                next(new errors.UpdateError(new Error(
                                     msg), 'manatee-adm'));
                             } else {
-                                return next(err);
+                                next(err);
                             }
+                            return;
                         }
-                        return next();
+                        next();
                     });
             },
 
             function unfreezeClusterState(_, next) {
                 if (!arg.HA) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Unfreezing cluster state');
                 common.manateeAdmRemote({
@@ -1274,15 +1288,17 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     vm: arg.shard.async.zoneId,
                     cmd: 'unfreeze',
                     log: log
-                }, function (err, stdou, stder) {
+                }, function (err, stdout, stderr) {
                     if (err) {
-                        return next(err);
-                    } else if (stder) {
-                        return next(new errors.InternalError({
-                            message: stder
+                        next(err);
+                        return;
+                    } else if (stderr) {
+                        next(new errors.InternalError({
+                            message: stderr
                         }));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             }
 
@@ -1297,7 +1313,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 };
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateManateeV2: UpdateManateeV2
diff --git a/lib/procedures/update-single-headnode-imgapi.js b/lib/procedures/update-single-headnode-imgapi.js
index 9a5a92e..c2f9a06 100644
--- a/lib/procedures/update-single-headnode-imgapi.js
+++ b/lib/procedures/update-single-headnode-imgapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -70,7 +70,7 @@ UpdateSingleHeadnodeImgapi.prototype.execute = function ushiExecute(opts, cb) {
     var self = this;
     var log = opts.log;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback || false;
+    var rollback = opts.plan.rollback || false;
 
     function updateImgapi(change, nextSvc) {
         var arg = {
@@ -89,15 +89,17 @@ UpdateSingleHeadnodeImgapi.prototype.execute = function ushiExecute(opts, cb) {
             function bailIfImgapiHasNoDelegate(_, next) {
                 vmadm.vmGet(inst.zonename, {log: log}, function (err, vm) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     var expectedDs = sprintf('zones/%s/data', inst.zonename);
                     log.debug({expectedDs: expectedDs, vm: vm}, 'imgapi vm');
                     if (vm.datasets.indexOf(expectedDs) === -1) {
-                        return next(new errors.UpdateError(format(
+                        next(new errors.UpdateError(format(
                             'imgapi vm %s has no "%s" delegate dataset, ' +
                             'upgrading it would lose image file data',
                             vm.uuid, expectedDs)));
+                        return;
                     }
                     next();
                 });
@@ -187,11 +189,11 @@ UpdateSingleHeadnodeImgapi.prototype.execute = function ushiExecute(opts, cb) {
                 var argv = [
                     '/usr/sbin/zlogin',
                     inst.zonename,
-                    /* BEGIN JSSTYLED */
+                    /* eslint-disable */
                     'cd /opt/smartdc/imgapi && ' +
                         'test ! -f lib/migrations/migration-012-update-docker-image-uuids.js || ' +
                         './build/node/bin/node lib/migrations/migration-012-update-docker-image-uuids.js'
-                    /* END JSSTYLED */
+                    /* eslint-enable */
                 ];
                 common.spawnRun({argv: argv, log: log}, next);
             },
@@ -214,7 +216,7 @@ UpdateSingleHeadnodeImgapi.prototype.execute = function ushiExecute(opts, cb) {
         func: updateImgapi
     }, cb);
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateSingleHeadnodeImgapi: UpdateSingleHeadnodeImgapi
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 72729ee..10ad61d 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -346,7 +346,7 @@ function SdcAdm(options) {
 
                 self._ufds.once('connect', function () {
                     self._ufds.removeAllListeners('error');
-                    self._ufds.on('error', function (err) {
+                    self._ufds.on('error', function (_err) {
                         self.log.info('UFDS disconnected');
                     });
                     self._ufds.on('connect', function () {
@@ -391,7 +391,8 @@ SdcAdm.prototype.init = function init(cb) {
     var self = this;
     common.loadConfig({log: self.log}, function (err, config) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         self.config = config;
@@ -602,7 +603,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
             };
             self.cnapi.listServers(serverOpts, function (serversErr, servers) {
                 if (serversErr) {
-                    return next(new errors.SDCClientError(serversErr, 'cnapi'));
+                    next(new errors.SDCClientError(serversErr, 'cnapi'));
+                    return;
                 }
                 for (var i = 0; i < servers.length; i++) {
                     var server = servers[i];
@@ -628,14 +630,16 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
          */
         function fillOutAgentInsts(ctx, next) {
             if (opts.types && opts.types.indexOf('agent') === -1) {
-                return next();
+                next();
+                return;
             }
 
             var serverUuids = Object.keys(ctx.serverFromUuid);
-            for (var i = 0; i < serverUuids.length; i++) {
-                var server = ctx.serverFromUuid[serverUuids[i]];
-                (server.agents || server.sysinfo['SDC Agents'] || []).forEach(
-                        function (agent) {
+            serverUuids.forEach(function (id) {
+                var server = ctx.serverFromUuid[id];
+                (server.agents ||
+                 server.sysinfo['SDC Agents'] ||
+                 []).forEach(function (agent) {
                     if (!isWantedSvc || isWantedSvc[agent.name]) {
                         var inst = {
                             type: 'agent',
@@ -650,7 +654,7 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                         ctx.insts.push(inst);
                     }
                 });
-            }
+            });
             next();
         },
 
@@ -664,7 +668,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
          */
         function getVmInfo(ctx, next) {
             if (opts.types && opts.types.indexOf('vm') === -1) {
-                return next();
+                next();
+                return;
             }
 
             ctx.vmFromUuid = {};
@@ -683,14 +688,15 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
             };
             self.vmapi.listVms(filters, function (err, vms) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'vmapi'));
+                    next(new errors.SDCClientError(err, 'vmapi'));
+                    return;
                 }
 
                 for (var i = 0; i < vms.length; i++) {
                     var vm = vms[i];
                     if (vm.tags && vm.tags.smartdc_role) {
-                        if (!isWantedSvc || isWantedSvc[vm.tags.smartdc_role])
-                        {
+                        if (!isWantedSvc ||
+                            isWantedSvc[vm.tags.smartdc_role]) {
                             ctx.vmFromUuid[vm.uuid] = vm;
                         }
                     }
@@ -701,7 +707,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
 
         function getImgs(ctx, next) {
             if (opts.types && opts.types.indexOf('vm') === -1) {
-                return next();
+                next();
+                return;
             }
 
             ctx.imgFromUuid = {};
@@ -735,7 +742,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
 
         function fillOutVmInsts(ctx, next) {
             if (opts.types && opts.types.indexOf('vm') === -1) {
-                return next();
+                next();
+                return;
             }
 
             // Prefer *vmFromUuid* to *sapiInstFromUuid* b/c no 'assets' svc.
@@ -796,7 +804,8 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                 inputs: ctx.insts,
                 func: function imgadmGetImg(inst, nextInst) {
                     if (inst.version || !inst.server) {
-                        return nextInst();
+                        nextInst();
+                        return;
                     }
                     common.imgadmGetRemote({
                         img_uuid: inst.image,
@@ -805,12 +814,13 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
                     }, function (err, img) {
                         if (err) {
                             self.log.error({err: err}, 'imgadm error');
-                            return nextInst();
+                            nextInst();
+                            return;
                         }
                         if (img && img.manifest && img.manifest.version) {
                             inst.version = img.manifest.version;
                         }
-                        return nextInst();
+                        nextInst();
                     });
                 }
             }, next);
@@ -820,11 +830,13 @@ SdcAdm.prototype.listInsts = function listInsts(opts, cb) {
 
         function fillDockerLoggerInsts(ctx, next) {
             if (opts.types && opts.types.indexOf('agent') === -1) {
-                return next();
+                next();
+                return;
             }
 
             if (opts.svcs && opts.svcs.indexOf('dockerlogger') === -1) {
-                return next();
+                next();
+                return;
             }
 
             var dlCtx = {};
@@ -973,7 +985,8 @@ SdcAdm.prototype.getServices = function getServices(opts, cb) {
             }
             self.sapi.listServices(filters, function (svcsErr, svcs_) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 }
                 svcs = svcs_;
                 var haveAssets = false;
@@ -1134,17 +1147,19 @@ SdcAdm.prototype.getSvc = function getSvc(opts, cb) {
 
     self.getApp({app: opts.app}, function (appErr, app) {
         if (appErr) {
-            return cb(appErr);
+            cb(appErr);
+            return;
         }
 
         if (common.UUID_RE.test(opts.svc)) {
             self.sapi.getService(opts.svc, function (svcErr, svc) {
                 if (svcErr) {
-                    return cb(new errors.SDCClientError(svcErr, 'sapi'));
+                    cb(new errors.SDCClientError(svcErr, 'sapi'));
                 } else if (svc.application_uuid !== app.uuid) {
                     cb(new errors.ValidationError(format(
                         'given svc "%s" does not belong to the "%s" app',
                         opts.svc, opts.app)));
+
                 } else {
                     cb(null, svc);
                 }
@@ -1156,7 +1171,7 @@ SdcAdm.prototype.getSvc = function getSvc(opts, cb) {
             };
             self.sapi.listServices(filters, function (svcsErr, svcs) {
                 if (svcsErr) {
-                    return cb(new errors.SDCClientError(svcsErr, 'sapi'));
+                    cb(new errors.SDCClientError(svcsErr, 'sapi'));
                 } else if (svcs.length > 1) {
                     cb(new errors.InternalError({
                         message: format('unexpected number of "%s" svcs: %d',
@@ -1206,10 +1221,11 @@ SdcAdm.prototype.getImgsForSvcVms = function getImgsForSvcVms(opts, cb) {
             function _getSvc(_, next) {
                 self.getSvc(opts, function (err, service) {
                     if (err) {
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     svc = service;
-                    return next();
+                    next();
                 });
             },
             function _getVms(_, next) {
@@ -1218,21 +1234,24 @@ SdcAdm.prototype.getImgsForSvcVms = function getImgsForSvcVms(opts, cb) {
                     state: 'active'
                 }, function (vmsErr, vms_) {
                     if (vmsErr) {
-                        return next(vmsErr);
+                        next(vmsErr);
+                        return;
                     }
                     if (!vms_.length) {
-                        return next(new errors.SDCClientError(new Error(format(
+                        next(new errors.SDCClientError(new Error(format(
                              'Unable to find %s VMs', svc.name)),
                              'vmapi'));
+                        return;
                     }
 
                     vms = vms_;
-                    return next();
+                    next();
                 });
             }
     ]}, function pipeCb(err) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         var imgs = [];
@@ -1250,18 +1269,20 @@ SdcAdm.prototype.getImgsForSvcVms = function getImgsForSvcVms(opts, cb) {
             func: function _getImg(id, next) {
                 self.getImage({uuid: id}, function (er3, img) {
                     if (er3) {
-                        return next(er3);
+                        next(er3);
+                        return;
                     }
                     imgs.push(img);
-                    return next();
+                    next();
                 });
             },
             inputs: differentImgUUIDs
         }, function paraCb(err2) {
             if (err2) {
-                return cb(err2);
+                cb(err2);
+                return;
             }
-            return cb(null, {imgs: imgs, vms: vms});
+            cb(null, {imgs: imgs, vms: vms});
         });
     });
 };
@@ -1348,14 +1369,14 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 return;
             }
             if (Array.isArray(images) && !images.length) {
-                return cb(new errors.UpdateError('no images found'));
+                cb(new errors.UpdateError('no images found'));
+                return;
             }
             common.sortArrayOfObjects(images, ['published_at']);
             image = images[images.length - 1];
 
             cb();
         });
-        return;
     }
 
     function findTarballImageByUuid(cb) {
@@ -1395,10 +1416,11 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                         if (er) {
                             self.log.error({err: er}, 'Missing gz-tools file');
                         }
-                        return next(new errors.UpdateError('The provided ' +
+                        next(new errors.UpdateError('The provided ' +
                         'file does not include the \'/scripts\' directory'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             },
             function checkToolsTgz(_, next) {
@@ -1408,10 +1430,11 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                             self.log.error({err: er}, 'Missing gz-tools file');
                         }
 
-                        return next(new errors.UpdateError('The provided ' +
+                        next(new errors.UpdateError('The provided ' +
                         'file does not include the \'/tools.tar.gz\' file'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             },
             function checkDefaultDir(_, next) {
@@ -1421,10 +1444,11 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                             self.log.error({err: er}, 'Missing gz-tools file');
                         }
 
-                        return next(new errors.UpdateError('The provided ' +
+                        next(new errors.UpdateError('The provided ' +
                         'file does not include the \'/default\' directory'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             },
             function checkCnToolsTgz(_, next) {
@@ -1434,16 +1458,15 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                             self.log.error({err: er}, 'Missing gz-tools file');
                         }
 
-                        return next(new errors.UpdateError(
+                        next(new errors.UpdateError(
                             'The provided file does not include the ' +
                             '\'/cn_tools.tar.gz\' file'));
+                        return;
                     }
-                    return next();
+                    next();
                 });
             }
-        ]}, function (err) {
-            cb(err);
-        });
+        ]}, cb);
     }
 
     function updateSdcFiles(cb) {
@@ -1488,9 +1511,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                     next();
                 });
             }
-        ]}, function (err) {
-            cb(err);
-        });
+        ]}, cb);
     }
 
     function updateScripts(cb) {
@@ -1603,13 +1624,14 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                     self.log.trace({cmd: cmd, err: err, stdout: stdout,
                         stderr: stderr}, 'ran cp command');
                     if (err) {
-                        return next(new errors.InternalError({
+                        next(new errors.InternalError({
                             message: 'error running cp command',
                             cmd: cmd,
                             stdout: stdout,
                             stderr: stderr,
                             cause: err
                         }));
+                        return;
                     }
                     next();
                 });
@@ -1648,9 +1670,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 progress('Unmounting USB key');
                 common.unmountUsbKey(self.log, next);
             }
-        ]}, function (err) {
-            cb(err);
-        });
+        ]}, cb);
     }
 
     function cleanup(cb) {
@@ -1673,13 +1693,14 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
             self.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
                 if (err) {
-                    return next();
+                    next();
+                    return;
                 }
                 if (options.image === 'latest' ||
                         !fs.existsSync(options.image)) {
                     progress('Using channel %s', channel);
                 }
-                return next();
+                next();
             });
         },
 
@@ -1699,14 +1720,16 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
 
         function checkLocalToolsVersion(_, next) {
             var toolsImg = '/opt/smartdc/etc/gz-tools.image';
-            fs.stat(toolsImg, function (err, st) {
+            fs.stat(toolsImg, function (err, _stat) {
                 if (err) {
                     // Just ignore the previous version if cannot read the file
-                    return next();
+                    next();
+                    return;
                 }
                 fs.readFile(toolsImg, 'utf8', function (er2, data) {
                     if (er2) {
-                        return next();
+                        next();
+                        return;
                     }
                     localVersion = data.trim();
                     progress('UUID of latest installed gz-tools image ' +
@@ -1717,9 +1740,10 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                                 localVersion);
                         progress('Please re-run with `--force-reinstall` ' +
                                 'if you want to override installed image');
-                        return callback();
+                        callback();
+                        return;
                     }
-                    return next();
+                    next();
                 });
 
             });
@@ -1733,20 +1757,23 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
             };
             self.vmapi.listVms(filters, function (vmsErr, vms) {
                 if (vmsErr) {
-                    return next(vmsErr);
+                    next(vmsErr);
+                    return;
                 }
                 if (Array.isArray(vms) && !vms.length) {
-                    return next(new errors.UpdateError('no "sdc" VM ' +
+                    next(new errors.UpdateError('no "sdc" VM ' +
                         'instance found'));
+                    return;
                 }
                 sdcZone = vms[0];
-                return next();
+                next();
             });
         },
 
         function saveHistory(_, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
             changes.push({
                 service: {
@@ -1759,10 +1786,11 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
 
@@ -1790,7 +1818,8 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
         function decompressTarball(_, next) {
             if (justDownload) {
                 deleteOnFinish = false;
-                return next();
+                next();
+                return;
             }
             var argv = [
                 '/usr/bin/tar',
@@ -1809,14 +1838,16 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
 
         function (_, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
             updateSdcFiles(next);
         },
 
         function (_, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
             updateScripts(next);
         },
@@ -1898,7 +1929,6 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 }
                 ctx.urServersToUpdate = urAvailServers;
                 next();
-                return;
             });
         },
 
@@ -2051,9 +2081,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                     });
                     rq.close();
                 }
-            }, function doneCmds(err, _) {
-                next(err);
-            });
+            }, next);
         },
 
         function (_, next) {
@@ -2071,14 +2099,16 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
             if (err) {
                 if (!hist) {
                     self.log.warn('History not saved for update-gz-tools');
-                    return callback(err);
+                    callback(err);
+                    return;
                 }
                 hist.error = err;
             }
 
             if (!hist) {
                 self.log.warn('History not saved for update-gz-tools');
-                return callback();
+                callback();
+                return;
             }
             self.history.updateHistory(hist, function (err2) {
                 if (err) {
@@ -2142,8 +2172,7 @@ SdcAdm.prototype.getCandidateImages = function getCandidateImages(opts, cb) {
                 function getImg(imgUuid, nextImg) {
                     self.getImage({uuid: imgUuid}, function (iErr, img) {
                         if (iErr && iErr.body &&
-                            iErr.body.code === 'ResourceNotFound')
-                        {
+                            iErr.body.code === 'ResourceNotFound') {
                             /**
                              * Don't error out for those weird cases where
                              * (a) the image was removed from local imgapi; and
@@ -2179,7 +2208,8 @@ SdcAdm.prototype.getCandidateImages = function getCandidateImages(opts, cb) {
                         opts.service.name);
                 self.log.info(msg);
                 opts.progress(msg);
-                return next();
+                next();
+                return;
             }
             var filter = {
                 name: name,
@@ -2191,7 +2221,8 @@ SdcAdm.prototype.getCandidateImages = function getCandidateImages(opts, cb) {
                 'getCandidateImages: getCandidates');
             self.updates.listImages(filter, function (uErr, followingImgs) {
                 if (uErr) {
-                    return next(uErr);
+                    next(uErr);
+                    return;
                 }
 
                 // TOOLS-745: Validate that the name of the retrieved images
@@ -2252,7 +2283,8 @@ SdcAdm.prototype.releaseLock = function releaseLock(opts, cb) {
     var log = this.log;
 
     if (!opts.unlock) {
-        return cb();
+        cb();
+        return;
     }
     log.debug({lockPath: self._lockPath}, 'releasing lock');
     opts.unlock(function (unlockErr) {
@@ -2515,7 +2547,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         msg + ' (string) is required'));
                 }
             }
-            function validateArrayOfStrings(arr, msg) {
+            function validateArrayOfStrings(arr, _msg) {
                 if (!Array.isArray(arr)) {
                     errs.push(new errors.ValidationError(
                         JSON.stringify(arr) + ' (array) is required'));
@@ -2616,15 +2648,17 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                                     type: 'other',
                                     params: {
                                         // First dockerlogger image ever:
-                                        /* JSSTYLED */
+                                        /* eslint-disable */
                                         image_uuid: 'be775385-a050-4956-b31c-74bbdcc1f259'
+                                        /* eslint-enable */
                                     }
                                 };
                                 found = true;
                             } else {
-                                return nextChange(new errors.UpdateError(format(
+                                nextChange(new errors.UpdateError(format(
                                     'unknown service "%s" from %s', ch.service,
                                     changeRepr)));
+                                return;
                             }
                         } else {
                             ch.service = svcFromName[ch.service];
@@ -2653,9 +2687,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                             }
                         }
                         if (!found) {
-                            return nextChange(new errors.UpdateError(format(
+                            nextChange(new errors.UpdateError(format(
                                 'unknown SDC instance uuid "%s" from %s',
                                 ch.uuid, changeRepr)));
+                            return;
                         }
                     } else if (ch.alias) {
                         found = false;
@@ -2667,15 +2702,17 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                             }
                         }
                         if (!found) {
-                            return nextChange(new errors.UpdateError(format(
+                            nextChange(new errors.UpdateError(format(
                                 'unknown SDC instance alias "%s" from %s',
                                 ch.alias, changeRepr)));
+                            return;
                         }
                     }
                     if (!ch.service) {
-                        return nextChange(new errors.UpdateError(format(
+                        nextChange(new errors.UpdateError(format(
                                 'unknown SDC instance or service "%s" from %s',
                                 ch.instance, changeRepr)));
+                        return;
                     }
 
                     if (ch.server) {
@@ -2711,19 +2748,21 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
 
                         self.getImage({uuid: ch.image}, function (iErr, img) {
                             if (iErr) {
-                                return nextChange(new errors.UpdateError(
+                                nextChange(new errors.UpdateError(
                                     iErr,
                                     format('unknown image "%s" from %s',
                                         ch.image, changeRepr)));
+                                return;
                             }
                             // Make sure we're not trying to update a service
                             // to a different service image:
                             if (img.name !== imgName) {
-                                return nextChange(new errors.UpdateError(
+                                nextChange(new errors.UpdateError(
                                     format('invalid image "%s" for service ' +
                                         '%s from %s. This image is for %s ' +
                                         'service', ch.image, ch.service.name,
                                         changeRepr, img.name)));
+                                return;
                             }
                             ch.images = [img];
                             delete ch.image;
@@ -2736,15 +2775,16 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                                 self.config.imgNameFromSvcName[ch.service.name]
                         }, function (iErr, img) {
                             if (iErr) {
-                                return nextChange(new errors.UpdateError(
-                                    iErr,
+                                nextChange(new errors.UpdateError(iErr,
                                     format('unknown image "%s" from %s',
                                         ch.version, changeRepr)));
+                                return;
                             }
                             if (!img.length) {
-                                return nextChange(new errors.UpdateError(
+                                nextChange(new errors.UpdateError(
                                     format('unknown image "%s" from %s',
                                         ch.version, changeRepr)));
+                                return;
                             }
                             ch.images = [img][0];
                             delete ch.version;
@@ -2760,7 +2800,8 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         if (ch.service.name === 'sdcadm') {
                             self._selfAvailable(function (iErr, imgs) {
                                 if (iErr) {
-                                    return nextChange(iErr);
+                                    nextChange(iErr);
+                                    return;
                                 }
                                 ch.images = imgs;
                                 log.debug({serviceName: ch.service.name},
@@ -2775,7 +2816,8 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                                 progress: progress
                             }, function (iErr, imgs) {
                                 if (iErr) {
-                                    return nextChange(iErr);
+                                    nextChange(iErr);
+                                    return;
                                 }
                                 // Just for unknown services, in order to
                                 // do not break everything else when there is
@@ -2877,8 +2919,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
         function dropNoops(_, next) {
             changes = changes.filter(function (ch) {
                 if (ch.type === 'update-service' ||
-                    ch.type === 'update-instance')
-                {
+                    ch.type === 'update-instance') {
                     if (ch.images.length === 0) {
                         // No available update candidates were found.
                         log.debug({change: ch},
@@ -2938,7 +2979,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 var ch = changes[i];
                 if (!ch.image && ch.images.length) {
                     assert.arrayOfObject(ch.images,
-                        'changes['+i+'].images');
+                        'changes[' + i + '].images');
                     // Assuming that `ch.images` is already sorted by
                     // `published_at`.
                     ch.images.sort(function (a, b) {
@@ -2957,16 +2998,16 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
             for (var i = 0; i < changes.length; i++) {
                 var ch = changes[i];
                 if (ch.service && ch.service.name === 'rabbitmq' &&
-                    !options.forceRabbitmq)
-                {
+                    !options.forceRabbitmq) {
                         var changeRepr = JSON.stringify({
                              type: ch.type,
                              service: ch.service.name,
                              instance: ch.instance && ch.instance.instance
                         });
-                        return next(new errors.UpdateError(format(
+                        next(new errors.UpdateError(format(
                             'rabbitmq updates are locked: %s ' +
                             '(use --force-rabbitmq flag)', changeRepr)));
+                        return;
                 }
             }
             next();
@@ -2982,17 +3023,17 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                     continue;
                 }
                 if (ch.service && dataPath.indexOf(ch.service.name) !== -1 &&
-                    !options.forceDataPath)
-                {
+                    !options.forceDataPath) {
                     var changeRepr = JSON.stringify({
                         type: ch.type,
                         service: ch.service.name,
                         instance: ch.inst && ch.instance.instance
                     });
-                    return next(new errors.UpdateError(format(
+                    next(new errors.UpdateError(format(
                         '%s updates are locked: %s ' +
                         '(use --force-data-path flag)', ch.service.name,
                         changeRepr)));
+                    return;
                 }
             }
             next();
@@ -3000,15 +3041,14 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
 
         function ensureVmMinPlatform(_, next) {
 
-            var ch, server;
+            var server;
             var errs = [];
 
             function checkMinPlatform(ins, chg) {
                 if (ins.service === chg.service.name) {
                     server = serverFromUuidOrHostname[ins.server];
                     if (server.current_platform <
-                        self.config.vmMinPlatform)
-                    {
+                        self.config.vmMinPlatform) {
                         errs.push(new errors.UpdateError(format(
                             'insufficient platform for service "%s" ' +
                             'instance "%s" on server "%s" (current ' +
@@ -3020,10 +3060,9 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 }
             }
 
-            for (var i = 0; i < changes.length; i++) {
-                ch = changes[i];
+            changes.forEach(function (ch) {
                 if (ch.service.type !== 'vm') {
-                    continue;
+                    return;
                 }
                 if (ch.type === 'update-service') {
                     for (var j = 0; j < insts.length; j++) {
@@ -3036,8 +3075,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                     ch.servers.forEach(function (chServ) {
                         server = serverFromUuidOrHostname[chServ];
                         if (server.current_platform <
-                            self.config.vmMinPlatform)
-                        {
+                            self.config.vmMinPlatform) {
                             errs.push(new errors.UpdateError(format(
                                 'insufficient platform for a new service ' +
                                 '"%s" instance on server "%s" (current ' +
@@ -3046,10 +3084,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                                 server.current_platform,
                                 self.config.vmMinPlatform)));
                         }
-
                     });
                 }
-            }
+            });
+
             if (errs.length) {
                 var er = (errs.length === 1) ? errs[0] :
                     new errors.MultiError(errs);
@@ -3061,7 +3099,8 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
 
         function minImageBuildDateFromSvcName(_, next) {
             if (options.forceBypassMinImage) {
-                return next();
+                next();
+                return;
             }
             var ch;
             var errs = [];
@@ -3074,7 +3113,7 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                         'if minimal requirements for update are met ' +
                         'by the current image. This can be fixed ' +
                         'by re-importing the image into the DC via:' +
-                        '\n\n    sdc-imgadm '+
+                        '\n\n    sdc-imgadm ' +
                         'import %s -S https://updates.joyent.com?' +
                         'channel=<channel>', ins.service, ins.image);
 
@@ -3143,15 +3182,17 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
 
         function getChannel(_, next) {
             if (options.noVerbose) {
-                return next();
+                next();
+                return;
             }
             self.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
                 if (err) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Using channel %s', channel);
-                return next();
+                next();
             });
         },
 
@@ -3179,9 +3220,10 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                     break;
                 // TODO: other change types
                 default:
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'unknown ch.type: ' + ch.type
                     }));
+                    return;
                 }
             }
             plan = new UpdatePlan({
@@ -3257,7 +3299,7 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
     var log = self.log;
     var progress = options.progress || function () {};
     var plan = options.plan;
-    var rollback = plan.rollback || false;
+    var rollback = plan.rollback || false;
 
     var start = new Date();
     var wrkDir;
@@ -3289,7 +3331,7 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
         function createWrkDir(_, next) {
             var stamp = sprintf('%d%02d%02dT%02d%02d%02dZ',
                 start.getUTCFullYear(),
-                start.getUTCMonth()+1,
+                start.getUTCMonth() + 1,
                 start.getUTCDate(),
                 start.getUTCHours(),
                 start.getUTCMinutes(),
@@ -3299,7 +3341,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
                     ) + stamp;
             progress('Create work dir: ' + wrkDir);
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             mkdirp(wrkDir, function (err) {
                 if (err) {
@@ -3315,7 +3358,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
 
         function savePlan(_, next) {
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             var planFile = path.resolve(wrkDir, 'plan.json');
             fs.writeFile(planFile,
@@ -3323,10 +3367,11 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
                 'utf8',
                 function (err) {
                     if (err) {
-                        return next(new errors.InternalError({
+                        next(new errors.InternalError({
                             cause: err,
                             message: 'error saving update plan: ' + planFile
                         }));
+                        return;
                     }
                     next();
                 });
@@ -3334,7 +3379,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
 
         function saveBeginningToHistory(_, next) {
             if (options.dryRun || options.justImages) {
-                return next();
+                next();
+                return;
             }
             var obj = {
                 changes: plan.changes
@@ -3345,21 +3391,24 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
             }
 
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
 
             self.history.saveHistory(obj, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
 
         function execProcedures(_, next) {
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             vasync.forEachPipeline({
                 inputs: plan.procs,
@@ -3381,7 +3430,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
 
     ]}, function (err) {
         if (options.dryRun || options.justImages) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         // Add error to history in case the update execution failed:
@@ -3390,7 +3440,8 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
             progress('Update error: %r', err);
             if (!hist) {
                 self.log.warn('History not saved for update');
-                return cb(err);
+                cb(err);
+                return;
             }
 
             hist.error = err;
@@ -3398,10 +3449,11 @@ SdcAdm.prototype.execUpdatePlan = function execUpdatePlan(options, cb) {
 
         if (!hist) {
             self.log.warn('History not saved for update');
-            return cb();
+            cb();
+            return;
         }
         // No need to add `history.finished` here, History instance will handle
-        self.history.updateHistory(hist, function (err2, hist2) {
+        self.history.updateHistory(hist, function (err2, _hist2) {
             if (err) {
                 cb(err);
             } else if (err2) {
@@ -3423,7 +3475,8 @@ SdcAdm.prototype.getBuildTime = function getBuildTime(cb) {
     var self = this;
     // Avoid to re-run:
     if (self.currBuildTime) {
-        return cb(null, self.currBuildTime);
+        cb(null, self.currBuildTime);
+        return;
     }
     // SDC buildstamps are '$branch-$buildtime-g$sha'. The '$branch'
     // can have hyphens in it.
@@ -3431,11 +3484,12 @@ SdcAdm.prototype.getBuildTime = function getBuildTime(cb) {
         'buildstamp');
     fs.readFile(buildstampPath, 'utf8', function (err, data) {
         if (err) {
-            return cb(new errors.InternalError({
+            cb(new errors.InternalError({
                 message: 'error getting current buildstamp',
                 path: buildstampPath,
                 cause: err
             }));
+            return;
         }
         var parts = data.trim().split(/-/g);
         // Drop possible '-dirty' on the buildstamp.
@@ -3443,7 +3497,8 @@ SdcAdm.prototype.getBuildTime = function getBuildTime(cb) {
             parts.pop();
         }
         self.currBuildTime = parts[parts.length - 2];
-        return cb(null);
+        cb(null);
+        return;
     });
 };
 
@@ -3464,7 +3519,7 @@ SdcAdm.prototype._selfAvailable = function _selfAvailable(cb) {
     vasync.pipeline({funcs: [
         function getCurrBuildtime(_, next) {
             self.getBuildTime(function (err) {
-                return next(err);
+                next(err);
             });
         },
         function findSdcAdmCandidates(_, next) {
@@ -3473,7 +3528,8 @@ SdcAdm.prototype._selfAvailable = function _selfAvailable(cb) {
             };
             self.updates.listImages(filters, function (err, candidates) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'updates'));
+                    next(new errors.SDCClientError(err, 'updates'));
+                    return;
                 }
 
                 // Filter out versions before the current.
@@ -3526,9 +3582,10 @@ SdcAdm.prototype._selfAvailable = function _selfAvailable(cb) {
         }
     ]}, function finishUp(err) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
-        return cb(null, images);
+        cb(null, images);
     });
 };
 
@@ -3579,7 +3636,8 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
     vasync.pipeline({funcs: [
         function getLock(_, next) {
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             self.acquireLock({progress: progress}, function (lockErr, unlock_) {
                 unlock = unlock_;
@@ -3595,7 +3653,8 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
 
         function getCurrBuildtime(_, next) {
             self.getBuildTime(function (err) {
-                return next(err);
+                next(err);
+                return;
             });
         },
 
@@ -3609,12 +3668,14 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
 
         function findLatestSdcAdm(_, next) {
             if (options.image !== 'latest') {
-                return next();
+                next();
+                return;
             }
 
             self._selfAvailable(function (err, candidates) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 // Unless `allowMajorUpdate`, filter out major updates (and
                 // warn).
@@ -3658,11 +3719,13 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
         // when a given image UUID is provided?
         function findSdcadmByUUID(_, next) {
             if (options.image === 'latest') {
-                return next();
+                next();
+                return;
             }
             self.updates.getImage(options.image, function (err, img) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'updates'));
+                    next(new errors.SDCClientError(err, 'updates'));
+                    return;
                 }
 
                 // Unless `allowMajorUpdate`, filter out major updates (and
@@ -3675,9 +3738,10 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                         progress('Skipping sdcadm self-update to version %s' +
                             '(use --allow-major-update to allow)',
                             img.version);
-                        return next(new errors.UsageError('Major sdcadm ' +
+                        next(new errors.UsageError('Major sdcadm ' +
                             'version update requires --allow-major-update ' +
                             'option'));
+                        return;
                     }
                 }
                 updateManifest = img;
@@ -3685,35 +3749,39 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                 progress('%sUpdate to sdcadm %s (%s)', dryRunPrefix,
                     updateManifest.version,
                     updateManifest.tags.buildstamp);
-                return next();
+                next();
             });
         },
 
         function saveChangesToHistory(_, next) {
             if (!updateManifest || options.dryRun) {
-                return next();
+                next();
+                return;
             }
 
             self.history.saveHistory({
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 hist = hst;
-                return next();
+                next();
             });
         },
 
         function downloadInstaller(_, next) {
             if (!updateManifest) {
-                return next();
+                next();
+                return;
             }
 
             progress('%sDownload update from %s', dryRunPrefix,
                 self.config.updatesServerUrl);
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             // TODO progress bar on this
             installerPath = '/var/tmp/sdcadm-' + updateManifest.uuid;
@@ -3728,7 +3796,10 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                     }));
                     return;
                 }
+                // Ignore complaints regarding Octal literal usage:
+                /* eslint-disable */
                 fs.chmod(installerPath, 0755, function (chmodErr) {
+                /* eslint-enable */
                     if (chmodErr) {
                         next(new errors.InternalError({
                             message: 'error chmoding sdcadm installer',
@@ -3744,11 +3815,12 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
 
         function createWrkDir(_, next) {
             if (!updateManifest) {
-                return next();
+                next();
+                return;
             }
             var stamp = sprintf('%d%02d%02dT%02d%02d%02dZ',
                 start.getUTCFullYear(),
-                start.getUTCMonth()+1,
+                start.getUTCMonth() + 1,
                 start.getUTCDate(),
                 start.getUTCHours(),
                 start.getUTCMinutes(),
@@ -3768,12 +3840,14 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
 
         function runInstaller(_, next) {
             if (!updateManifest) {
-                return next();
+                next();
+                return;
             }
             progress('%sRun sdcadm installer (log at %s/install.log)',
                 dryRunPrefix, wrkDir);
             if (options.dryRun) {
-                return next();
+                next();
+                return;
             }
             var cmd = format('%s >%s/install.log 2>&1', installerPath,
                 wrkDir);
@@ -3792,13 +3866,14 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
                     // crash will leave in inconsistent state. We could check
                     // for that here and cleanup, or just warn about the
                     // situation.
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'error running sdcadm installer',
                         cmd: cmd,
                         stdout: stdout,
                         stderr: stderr,
                         cause: err
                     }));
+                    return;
                 }
                 next();
             });
@@ -3808,28 +3883,32 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
         vasync.pipeline({funcs: [
             function dropLock(_, next) {
                 if (options.dryRun) {
-                    return next();
+                    next();
+                    return;
                 }
                 self.releaseLock({unlock: unlock}, next);
             },
             function updateHist(_, next) {
                 if (!updateManifest || options.dryRun) {
-                    return next();
+                    next();
+                    return;
                 }
                 // Add error to history in case the update execution failed:
                 if (err) {
                     if (!hist) {
                         self.log.warn('History not set for self-update');
-                        return next(err);
+                        next(err);
+                        return;
                     }
                     hist.error = err;
                 }
                 if (!hist) {
                     self.log.warn('History not set for self-update');
-                    return next();
+                    next();
+                    return;
                 }
                 // No need to add `history.finished` here:
-                self.history.updateHistory(hist, function (err2, hist2) {
+                self.history.updateHistory(hist, function (err2, _hist2) {
                     if (err2) {
                         next(err2);
                     } else {
@@ -3839,7 +3918,8 @@ SdcAdm.prototype.selfUpdate = function selfUpdate(options, cb) {
             },
             function noteCompletion(_, next) {
                 if (!updateManifest || err) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('%sUpdated to sdcadm %s (%s, elapsed %ss)',
                     dryRunPrefix, updateManifest.version,
@@ -3890,9 +3970,11 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
             };
             self.sapi.listServices(filters, function (svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 } else if (!svcs || svcs.length !== 1) {
-                    return next();
+                    next();
+                    return;
                 }
                 services.cloudapi = svcs[0];
                 next();
@@ -3906,9 +3988,11 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
             };
             self.sapi.listServices(filters, function (svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 } else if (!svcs || svcs.length !== 1) {
-                    return next();
+                    next();
+                    return;
                 }
                 services.docker = svcs[0];
                 next();
@@ -3932,7 +4016,8 @@ SdcAdm.prototype.dcMaintStatus = function dcMaintStatus(cb) {
          */
         function loadStartTime(_, next) {
             if (!cloudapiMaint && !dockerMaint) {
-                return next();
+                next();
+                return;
             } else {
                 maint = true;
             }
@@ -4172,7 +4257,8 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
 
         function saveStartTime(_, next) {
             if (!putCloudapiIntoMaint && !putDockerIntoMaint) {
-                return next();
+                next();
+                return;
             }
             var info = JSON.stringify({
                 'startTime': startTime
@@ -4190,9 +4276,10 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             function pollJobs() {
                 remaining--;
                 if (remaining <= 0) {
-                    return next(new errors.InternalError({
+                    next(new errors.InternalError({
                         message: 'timeout waiting for workflow jobs to drain'
                     }));
+                    return;
                 }
                 self.wfapi.listJobs({execution: 'running', limit: 10},
                         function (rErr, rJobs) {
@@ -4200,11 +4287,13 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
                         numErrs++;
                         self.log.error(rErr, 'error listing running jobs');
                         if (numErrs >= MAX_ERRS) {
-                            return next(rErr);
+                            next(rErr);
+                            return;
                         }
                     } else if (rJobs.length > 0) {
                         self.log.debug({numJobs: rJobs.length}, 'running jobs');
-                        return setTimeout(pollJobs, 5000);
+                        setTimeout(pollJobs, 5000);
+                        return;
                     }
                     self.wfapi.listJobs({execution: 'queued', limit: 10},
                             function (qErr, qJobs) {
@@ -4212,12 +4301,14 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
                             numErrs++;
                             self.log.error(qErr, 'error listing queued jobs');
                             if (numErrs >= MAX_ERRS) {
-                                return next(qErr);
+                                next(qErr);
+                                return;
                             }
                         } else if (qJobs.length > 0) {
                             self.log.debug({numJobs: qJobs.length},
                                 'queued jobs');
-                            return setTimeout(pollJobs, 5000);
+                            setTimeout(pollJobs, 5000);
+                            return;
                         }
                         progress('Workflow cleared of running and queued jobs');
                         next();
@@ -4377,7 +4468,8 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
 
         function finishDCMaintenance(_, next) {
             if (!disableAppMaint) {
-                return next();
+                next();
+                return;
             }
             progress('Clearing data center maintenance information');
             self.sapi.updateApplication(sdcApp.uuid, {
@@ -4386,9 +4478,10 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
                     DC_MAINT_ETA: null
                 },
                 action: 'delete'
-            }, function (err, app) {
+            }, function (err, _app) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 next();
             });
@@ -4422,7 +4515,8 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
 
         function rmInfoFile(_, next) {
             if (!disableCloudapiMaint && !disableDockerMaint) {
-                return next();
+                next();
+                return;
             }
             fs.unlink(self._dcMaintInfoPath, function (err) {
                 if (err) {
@@ -4443,7 +4537,7 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
  * @param cb {Function} Callback of the form `function (err, result)`.
  */
 
-SdcAdm.prototype.checkConfig = function (opts, cb) {
+SdcAdm.prototype.checkConfig = function (_opts, cb) {
     var self = this;
     // SAPI values for sdc application:
     var sdc = self.sdc.metadata;
@@ -4464,7 +4558,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
             extras: 'sysinfo'
         }, function (err, res) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             sysinfo = (res && res.length > 0 ? res[0].sysinfo : null);
 
@@ -4483,8 +4578,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                 }
             });
 
-            Object.keys(sysinfo['Virtual Network Interfaces']).
-                filter(function (k) {
+            Object.keys(sysinfo['Virtual Network Interfaces']).filter(
+                function (k) {
                 return (k === 'external0');
             }).map(function (k) {
                 if (sysinfo['Virtual Network Interfaces'][k].ip4addr !==
@@ -4494,7 +4589,7 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                 }
             });
 
-            return next();
+            next();
         });
     }
 
@@ -4502,15 +4597,16 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
     function getNetworks(_, next) {
         self.napi.listNetworks({name: 'admin'}, function (err, res) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             admin = (res && res.length > 0 ? res[0] : null);
             if (admin.subnet.split('/')[0] !== sdc.admin_network) {
-                errs.push('SAPI sdc admin_network did not match with value '+
+                errs.push('SAPI sdc admin_network did not match with value ' +
                     'defined in NAPI');
             }
             if (admin.netmask !== sdc.admin_netmask) {
-                errs.push('SAPI sdc admin_netmask did not match with value '+
+                errs.push('SAPI sdc admin_netmask did not match with value ' +
                     'defined in NAPI');
             }
             // PEDRO: Note we should stop assuming external network will always
@@ -4518,33 +4614,34 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
             // call:
             self.napi.listNetworks({name: 'external'}, function (err2, res2) {
                 if (err2) {
-                    return next(err2);
+                    next(err2);
+                    return;
                 }
                 external = (res2 && res2.length > 0 ? res2[0] : null);
                 if (external.subnet &&
                     external.subnet.split('/')[0] !== sdc.external_network) {
-                    errs.push('SAPI sdc external_network did not match with '+
+                    errs.push('SAPI sdc external_network did not match with ' +
                         'value defined in NAPI');
                 }
                 if (external.netmask !== sdc.external_netmask) {
-                    errs.push('SAPI sdc external_netmask did not match with '+
+                    errs.push('SAPI sdc external_netmask did not match with ' +
                         'value defined in NAPI');
                 }
                 if (external.gateway !== sdc.external_gateway) {
-                    errs.push('SAPI sdc external_gateway did not match with '+
+                    errs.push('SAPI sdc external_gateway did not match with ' +
                         'value defined in NAPI');
                 }
                 if (external.provision_start_ip !==
                     sdc.external_provisionable_start) {
-                    errs.push('SAPI sdc external_provisionable_start did not '+
+                    errs.push('SAPI sdc external_provisionable_start did not ' +
                         'match with value defined in NAPI');
                 }
                 if (external.provision_end_ip !==
                         sdc.external_provisionable_end) {
-                    errs.push('SAPI sdc external_provisionable_end did not '+
+                    errs.push('SAPI sdc external_provisionable_end did not ' +
                         'match with value defined in NAPI');
                 }
-                return next();
+                next();
             });
         });
     }
@@ -4556,11 +4653,13 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                 self.config.datacenter_name)
         }, function (err, res) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             if (!res) {
                 errs.push('No DC information found in UFDS');
-                return next();
+                next();
+                return;
             }
             res.forEach(function (r) {
                 if (r.region !== sdc.region_name) {
@@ -4576,7 +4675,7 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                 // company_name and location are not required for anything to
                 // work properly, therefore, skipping them here
             });
-            return next();
+            next();
         });
     }
 
@@ -4587,7 +4686,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                 self.config.ufds_admin_uuid)
         }, function (err, res) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
 
             var ufdsAdmin = (res && res.length > 0 ? res[0] : null);
@@ -4613,12 +4713,14 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                     self.config.ufds_admin_key_fp)
             }, function (err2, res2) {
                 if (err2) {
-                    return next(err2);
+                    next(err2);
+                    return;
                 }
 
                 if (!res2.length) {
                     errs.push('Cannot find UFDS admin key');
-                    return next();
+                    next();
+                    return;
                 }
 
                 var sdcKey = res2.filter(function (k) {
@@ -4627,14 +4729,15 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
 
                 if (!sdcKey) {
                     errs.push('Cannot find UFDS admin key');
-                    return next();
+                    next();
+                    return;
                 }
 
                 if (sdcKey.openssh !== sdc.ufds_admin_key_openssh.trim()) {
-                    errs.push('UFDS Admin key did not match with SAPI '+
+                    errs.push('UFDS Admin key did not match with SAPI ' +
                             'ufds_admin_key_openssh');
                 }
-                return next();
+                next();
             });
         });
     }
@@ -4649,9 +4752,10 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
         };
         self.vmapi.listVms(filters, function (vmsErr, _vms) {
             if (vmsErr) {
-                return next(vmsErr);
+                next(vmsErr);
+                return;
             }
-            return next();
+            next();
         });
 
     }
@@ -4660,10 +4764,12 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
         application_uuid: sdc.uuid
     }, function (err2, res2) {
         if (err2) {
-            return cb(err2);
+            cb(err2);
+            return;
         }
         if (!res2.length) {
-            return cb('Cannot find SDC services in SAPI');
+            cb('Cannot find SDC services in SAPI');
+            return;
         }
 
         services = res2.filter(function (s) {
@@ -4682,7 +4788,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
             ]
         }, function (err4, _res) {
             if (err4) {
-                return cb(err4);
+                cb(err4);
+                return;
             }
 
             // PEDRO: Note the exceptions listed below. I bet we could
@@ -4715,8 +4822,8 @@ SdcAdm.prototype.checkConfig = function (opts, cb) {
                     errs.push('Missing SAPI variable "ufds_remote_ip"');
                 }
             }
-            return self.ufds.close(function (err3) {
-                return cb(null, errs);
+            self.ufds.close(function (_err3) {
+                cb(null, errs);
             });
         });
     });
@@ -4761,16 +4868,16 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
     // No need to keep these variables global to the whole sdcadm module:
     var pingPaths = {
         // vms
-        amon:     '/ping',
+        amon: '/ping',
         cloudapi: '/--ping',
-        cnapi:    '/ping',
-        fwapi:    '/ping',
-        imgapi:   '/ping',
-        napi:     '/ping',
-        papi:     '/ping',
-        sapi:     '/ping',
-        vmapi:    '/ping',
-        volapi:   '/ping',
+        cnapi: '/ping',
+        fwapi: '/ping',
+        imgapi: '/ping',
+        napi: '/ping',
+        papi: '/ping',
+        sapi: '/ping',
+        vmapi: '/ping',
+        volapi: '/ping',
         workflow: '/ping',
         // agents
         firewaller: '/status'
@@ -4790,7 +4897,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
 
         if (!pingPath) {
             inst.healthy = true;
-            return next(null, inst);
+            next(null, inst);
+            return;
         }
 
         var port = pingPorts[inst.service] || 80;
@@ -4816,7 +4924,7 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 } ];
             }
 
-            return next(null, inst);
+            next(null, inst);
         }).once('error', function (e) {
             inst.healthy = false;
 
@@ -4825,7 +4933,7 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                          e.message
             } ];
 
-            return next(null, inst);
+            next(null, inst);
         });
     }
 
@@ -4846,7 +4954,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
 
     function lookupServices(_, next) {
         if (opts.insts) {
-            return next();
+            next();
+            return;
         }
         var svcOpts = {};
         if (opts.type) {
@@ -4857,7 +4966,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 if (!err.message) {  // TODO(trentm): why this?!
                     err = new Error(err);
                 }
-                return next(err);
+                next(err);
+                return;
             }
 
             self.log.debug({ services: svcs }, 'Look up services');
@@ -4880,13 +4990,14 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 }
             });
 
-            return next();
+            next();
         });
     }
 
     function lookupInstances(_, next) {
         if (opts.insts) {
-            return next();
+            next();
+            return;
         }
 
         var svcOpts = {};
@@ -4899,7 +5010,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 if (!err.message) {
                     err = new Error(err);
                 }
-                return next(err);
+                next(err);
+                return;
             }
 
             self.log.debug({ instances: insts_ }, 'Look up instances');
@@ -4930,10 +5042,11 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
             if (uuidLookup && Object.keys(uuidLookup).length > 0) {
                 var msg = 'unrecognized service or instances: ' +
                     Object.keys(uuidLookup).join(', ');
-                return next(new Error(msg));
+                next(new Error(msg));
+                return;
             }
 
-            return next();
+            next();
         });
     }
 
@@ -4954,13 +5067,15 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
         } else if (inst.alias === 'global') {
             script = 'svcs -vx';
         } else {
-            return next();
+            next();
+            return;
         }
 
         // there are a couple agents which don't actually have SMF services,
         // so skip them
         if (inst.service.match(/(agents_core|cabase)$/)) {
-            return next();
+            next();
+            return;
         }
 
         urConnection.exec({
@@ -4972,7 +5087,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 inst.health_errors = [ {
                     message: err.message
                 }];
-                return next(null, inst);
+                next(null, inst);
+                return;
             }
 
             self.log.debug({ ur_response: result },
@@ -4981,7 +5097,9 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
             if (result.exit_status !== 0 ||
                 result.stderr !== '' ||
                 !(result.stdout === '' ||
+                  /* eslint-disable */
                   result.stdout.match(/State\: online/))) {
+                  /* eslint-enable */
 
                 inst.healthy = false;
 
@@ -4996,7 +5114,9 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 }
 
                 if (!(result.stdout === '' ||
+                      /* eslint-disable */
                       result.stdout.match(/State\: online/))) {
+                      /* eslint-enable */
                     errs.push('stdout: ' + result.stdout.replace(/\n+$/, ''));
                 }
 
@@ -5006,10 +5126,11 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                     });
                 }
 
-                return next(null, inst);
+                next(null, inst);
+                return;
             }
 
-            return _pingInstance(inst, next);
+            _pingInstance(inst, next);
         });
     }
 
@@ -5024,13 +5145,15 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
         } else if (inst.alias === 'global') {
             argv = ['/usr/bin/svcs', '-vx'];
         } else {
-            return next();
+            next();
+            return;
         }
 
         // there are a couple agents which don't actually have SMF services,
         // so skip them
         if (inst.service.match(/(agents_core|cabase)$/)) {
-            return next();
+            next();
+            return;
         }
 
         common.execFilePlus({
@@ -5046,8 +5169,9 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
             if (stderr) {
                 errs.push('stderr: ' + stderr.replace(/\n+$/, ''));
             }
-
+            /* eslint-disable */
             if (!(stdout === '' || stdout.match(/State\: online/))) {
+                /* eslint-enable */
                 errs.push('stdout: ' + stdout.replace(/\n+$/, ''));
             }
 
@@ -5056,10 +5180,11 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 inst.health_errors = errs.map(function (error) {
                     return { message: 'SMF svcs check failed: ' + error };
                 });
-                return next(null, inst);
+                next(null, inst);
+                return;
             }
 
-            return _pingInstance(inst, next);
+            _pingInstance(inst, next);
         });
     }
 
@@ -5072,7 +5197,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
             log: self.log
         }, function (err, stdout, stderr) {
             if (err) {
-                return next(err);
+                next(err);
+                return;
             }
             try {
                 headnode = JSON.parse(stdout.trim());
@@ -5087,9 +5213,10 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                     });
                 }
             } catch (e) {
-                return next(e);
+                next(e);
+                return;
             }
-            return next();
+            next();
         });
     }
 
@@ -5103,7 +5230,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
     }, function (err) {
         if (err) {
             self.log.error({err: err}, 'checkHealth pipeline cb');
-            return cb(err);
+            cb(err);
+            return;
         }
 
         /*
@@ -5134,7 +5262,8 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
         }, function (err2, results) {
             if (err2) {
                 self.log.error({err: err2}, 'checkHealth parallel cb');
-                return cb(new errors.InternalError(new Error(err2)));
+                cb(new errors.InternalError(new Error(err2)));
+                return;
             }
 
             var healthResults = results.successes.filter(function (res) {
@@ -5162,7 +5291,7 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
                 });
             }
 
-            return cb(null, healthResults);
+            cb(null, healthResults);
         });
     });
 };
@@ -5192,17 +5321,19 @@ function checkMissingExternalNics(opts, cb) {
 
         function onServices(err, svcs) {
             if (err) {
-                return cb(new errors.SDCClientError(err, 'sapi'));
+                cb(new errors.SDCClientError(err, 'sapi'));
+                return;
             }
             if (!svcs.length) {
-                return cb(new Error(
-                    'Couldn\'t find imgapi SAPI service'));
+                cb(new Error('Couldn\'t find imgapi SAPI service'));
+                return;
             }
 
             sapi.listInstances({ service_uuid: svcs[0].uuid },
             function (listerr, inst) {
                 if (listerr) {
-                    return cb(new errors.SDCClientError(listerr, 'sapi'));
+                    cb(new errors.SDCClientError(listerr, 'sapi'));
+                    return;
                 }
                 callback(null, inst[0]);
             });
@@ -5214,7 +5345,8 @@ function checkMissingExternalNics(opts, cb) {
         function (_, next) {
             getInstance('adminui', function (err, inst) {
                 if (err) {
-                    return cb(err);
+                    cb(err);
+                    return;
                 }
                 svcadminui = inst;
                 next();
@@ -5223,7 +5355,8 @@ function checkMissingExternalNics(opts, cb) {
         function (_, next) {
             getInstance('imgapi', function (err, inst) {
                 if (err) {
-                    return cb(err);
+                    cb(err);
+                    return;
                 }
                 svcimgapi = inst;
                 next();
@@ -5234,12 +5367,14 @@ function checkMissingExternalNics(opts, cb) {
             var listOpts = { name: 'external' };
             napi.listNetworks(listOpts, function (err, nets) {
                 if (err) {
-                    return cb(new errors.SDCClientError(err, 'napi'));
+                    cb(new errors.SDCClientError(err, 'napi'));
+                    return;
                 }
 
                 if (!nets.length) {
-                    return cb(new Error(
+                    cb(new Error(
                         'Couldn\'t find external network in NAPI'));
+                    return;
                 }
 
                 netexternal = nets[0];
@@ -5255,23 +5390,23 @@ function checkMissingExternalNics(opts, cb) {
             };
             napi.listNics(listOpts, function (err, nics) {
                 if (err) {
-                    return cb(new errors.SDCClientError(err, 'napi'));
+                    cb(new errors.SDCClientError(err, 'napi'));
+                    return;
                 }
 
                 if (!nics.length) {
-                    return cb(new Error(
+                    cb(new Error(
                         'Couldn\'t find NICs for imgapi or adminui'));
+                    return;
                 }
 
                 for (var i = 0, nic; i < nics.length; i++) {
                     nic = nics[i];
                     if (nic.belongs_to_uuid === svcadminui.uuid &&
-                        nic.nic_tag === 'external')
-                    {
+                        nic.nic_tag === 'external') {
                         doadminui = false;
                     } else if (nic.belongs_to_uuid === svcimgapi.uuid &&
-                        nic.nic_tag === 'external')
-                    {
+                        nic.nic_tag === 'external') {
                         doimgapi = false;
                     }
                 }
@@ -5362,7 +5497,8 @@ setupCommonExternalNics(opts, cb) {
         function (_, next) {
             self.checkMissingExternalNics(opts, function (err, res) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 doimgapi = res.doimgapi;
                 doadminui = res.doadminui;
@@ -5375,15 +5511,18 @@ setupCommonExternalNics(opts, cb) {
 
         function (_, next) {
             if (!doadminui && !doimgapi) {
-                return next();
+                next();
+                return;
             }
             self.sapi.listServices({ name: 'napi' }, function (err, svcs) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 if (svcs.length !== 1) {
-                    return next(new Error(
+                    next(new Error(
                         'expected 1 napi service, found %d', svcs.length));
+                    return;
                 }
                 napisvc = svcs[0];
                 next();
@@ -5392,7 +5531,8 @@ setupCommonExternalNics(opts, cb) {
 
         function (_, next) {
             if (!doadminui && !doimgapi) {
-                return next();
+                next();
+                return;
             }
             changes.push({
                 service: napisvc,
@@ -5407,21 +5547,24 @@ setupCommonExternalNics(opts, cb) {
                 changes: changes
             }, function (err, hst) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 history = hst;
-                return next();
+                next();
             });
         },
 
         function (_, next) {
             if (!doadminui) {
                 progress('AdminUI already has an external nic');
-                return next();
+                next();
+                return;
             }
             addExternaNicToZone(svcadminui, function (err) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 progress('Added external nic to adminui');
                 updateSvcParamsNetworks('adminui', next);
@@ -5431,11 +5574,13 @@ setupCommonExternalNics(opts, cb) {
         function (_, next) {
             if (!doimgapi) {
                 progress('IMGAPI already has an external nic');
-                return next();
+                next();
+                return;
             }
             addExternaNicToZone(svcimgapi, function (err) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 progress('Added external nic to imgapi');
                 updateSvcParamsNetworks('imgapi', next);
@@ -5445,13 +5590,14 @@ setupCommonExternalNics(opts, cb) {
         if (!history) {
             self.log.info(
                 'History not set for post-setup common-external-nics');
-            return cb(err);
+            cb(err);
+            return;
         }
         history.changes = changes;
         if (err) {
             history.error = err;
         }
-        self.history.updateHistory(history, function (err2, hist2) {
+        self.history.updateHistory(history, function (err2, _hist2) {
             if (err) {
                 cb(err);
             } else if (err2) {
@@ -5557,16 +5703,18 @@ SdcAdm.prototype.genRollbackPlan = function genRollbackPlan(options, cb) {
                             uuid: chg.rb_img
                         }, function (e, img) {
                             if (e) {
-                                return next_(e);
+                                next_(e);
+                                return;
                             }
                             chg.image = img;
                             delete chg.rb_img;
                             _changes.push(chg);
-                            return next_();
+                            next_();
+                            return;
                         });
                     } else {
                         _changes.push(chg);
-                        return next_();
+                        next_();
                     }
                 }
             }, function (err) {
@@ -5579,10 +5727,11 @@ SdcAdm.prototype.genRollbackPlan = function genRollbackPlan(options, cb) {
             self.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
                 if (err) {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Using channel %s', channel);
-                return next();
+                next();
             });
         },
 
diff --git a/lib/steps/no-rabbit.js b/lib/steps/no-rabbit.js
index 3df7cfb..fe6b5d1 100644
--- a/lib/steps/no-rabbit.js
+++ b/lib/steps/no-rabbit.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -45,13 +45,14 @@ function noRabbitEnable(arg, callback) {
     if (arg.sdcadm.sdc.metadata.no_rabbit) {
         log.debug({no_rabbit: arg.sdcadm.sdc.metadata.no_rabbit},
             'no_rabbit already enabled');
-        return callback();
+        callback();
+        return;
     }
 
     progress('\n--- enable the new agents (no_rabbit=true)');
 
     vasync.pipeline({arg: {}, funcs: [
-        function getVmImgs(ctx, next) {
+        function getVmImgs(_, next) {
             vasync.forEachParallel({
                 inputs: ['cnapi', 'workflow'],
                 func: function getServiceImg(vm, fenext) {
@@ -60,10 +61,11 @@ function noRabbitEnable(arg, callback) {
                         svc: vm
                     }, function (err, obj) {
                         if (err) {
-                            return next(err);
+                            next(err);
+                            return;
                         }
                         imgsFromSvcName[vm] = obj;
-                        return fenext();
+                        fenext();
                     });
                 }
             }, next);
@@ -115,7 +117,8 @@ function noRabbitEnable(arg, callback) {
         },
         function startDatacenterMaint(ctx, next) {
             if (ctx.maintStatus.maint) {
-                return next();
+                next();
+                return;
             }
             sdcadm.dcMaintStart({progress: progress}, next);
         },
@@ -133,7 +136,8 @@ function noRabbitEnable(arg, callback) {
         },
         function stopDatacenterMaint(ctx, next) {
             if (ctx.maintStatus.maint) {
-                return next();
+                next();
+                return;
             }
             sdcadm.dcMaintStop({progress: progress}, next);
         },
@@ -146,7 +150,7 @@ function noRabbitEnable(arg, callback) {
                     '/usr/sbin/svcadm enable -s config-agent'
             }, next);
         },
-        function waitForCnapiConfigAgents(ctx, next) {
+        function waitForCnapiConfigAgents(_, next) {
             // Dev Note: sdcadm.listInsts returns the subset of objects. It
             // would be nice if it returned full VM objects so we don't have to
             // resort to VMAPI calls here.
@@ -156,7 +160,8 @@ function noRabbitEnable(arg, callback) {
                 owner_uuid: sdcadm.config.ufds_admin_uuid
             }, function (vmsErr, cnapiVms) {
                 if (vmsErr) {
-                    return next(vmsErr);
+                    next(vmsErr);
+                    return;
                 }
                 vasync.forEachParallel({
                     inputs: cnapiVms,
@@ -183,7 +188,7 @@ function noRabbitEnable(arg, callback) {
 }
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     noRabbitEnable: noRabbitEnable
diff --git a/lib/steps/servers.js b/lib/steps/servers.js
index 06919a3..b04951e 100644
--- a/lib/steps/servers.js
+++ b/lib/steps/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  *
  * Steps for doing some things with CNAPI server objects.
  */
@@ -168,7 +168,7 @@ function serversEnsureServersRunning(args, cb) {
 }
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     serversServerFromServerName: serversServerFromServerName,
diff --git a/lib/steps/update_vm_size.js b/lib/steps/update_vm_size.js
index 097f4ea..6e843d7 100644
--- a/lib/steps/update_vm_size.js
+++ b/lib/steps/update_vm_size.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
@@ -279,7 +279,7 @@ function updateSizeParametersService(usp, next) {
 
     usp.usp_sdcadm.sapi.updateService(usp.usp_serviceUuid, {
         params: chg.chg_params
-    }, function (err, svc) {
+    }, function (err, _svc) {
         if (err) {
             next(new lib_errors.SDCClientError(err, 'sapi'));
             return;
diff --git a/lib/ur.js b/lib/ur.js
index 3165a12..b9969d3 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*
@@ -51,7 +51,8 @@ function execOnAllNodes(opts, cb) {
     };
     common.execFilePlus(execOpts, function (err, stdout, stderr) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
         cb(null, JSON.parse(stdout));
     });
diff --git a/package.json b/package.json
index 27e4f68..f8011bc 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.17.2",
+  "version": "1.17.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -34,7 +34,9 @@
     "wf-client": "0.3.0"
   },
   "devDependencies": {
-    "marked-man": "0.1.4"
+    "marked-man": "0.1.4",
+    "eslint": "4.13.1",
+    "eslint-plugin-joyent": "~2.0.0"
   },
   "engines": {
     "node": ">=0.10"
diff --git a/test/check-health.test.js b/test/check-health.test.js
index 75e6f01..64f2aae 100644
--- a/test/check-health.test.js
+++ b/test/check-health.test.js
@@ -5,13 +5,12 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 
 var test = require('tape').test;
 var exec = require('child_process').exec;
-var util = require('util');
 
 
 var common = require('./common');
@@ -53,7 +52,8 @@ test('setup', function (t) {
         var svcs = common.parseJsonOut(stdout);
         if (!svcs) {
             t.ok(false, 'failed to parse JSON for cmd ' + cmd);
-            return t.end();
+            t.end();
+            return;
         }
         svcs.forEach(function (svc) {
             serviceNamesFromUUID[svc.uuid] = svc.name;
@@ -65,7 +65,8 @@ test('setup', function (t) {
             var servers = common.parseJsonOut(stdout2);
             if (!servers) {
                 t.ok(false, 'failed to parse JSON for cmd ' + cmd2);
-                return t.end();
+                t.end();
+                return;
             }
             servers.forEach(function (server) {
                 serverHostnamesFromUUID[server.uuid] = server.hostname;
@@ -133,7 +134,8 @@ test('sdcadm check-health --json', function (t) {
         var details = common.parseJsonOut(stdout);
         if (!details) {
             t.ok(false, 'failed to parse JSON');
-            return t.end();
+            t.end();
+            return;
         }
 
         var healthDetails = {};
@@ -198,8 +200,8 @@ test('sdcadm check-health with disabled papi', function (t) {
         t.notEqual(stderr, 'Some instances appear unhealthy'.indexOf(stderr),
                    -1);
 
-        var unhealthyPapis = common.parseTextOut(stdout).
-            filter(function (inst) {
+        var unhealthyPapis = common.parseTextOut(stdout).filter(
+            function (inst) {
             return inst[1] === 'papi' && inst[4] === 'false';
         });
 
diff --git a/test/common.js b/test/common.js
index 7c3e277..d227a58 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 var exec = require('child_process').exec;
@@ -42,7 +42,7 @@ function deepCopy(obj) {
 function parseJsonOut(output) {
     try {
         return JSON.parse(output);
-    } catch (e) {
+    } catch (_) {
         return null; // dodgy
     }
 }
@@ -85,7 +85,8 @@ function checkInsts(t, opts, cb) {
         func: function (item, next) {
 
             if (item.service === 'global' || item.instance === '-') {
-                return next();
+                next();
+                return;
             }
 
             var description = (item.alias !== '-') ?
@@ -102,7 +103,8 @@ function checkInsts(t, opts, cb) {
                 var instanceDetails = parseJsonOut(stdout2);
                 if (!instanceDetails) {
                     t.ok(false, 'failed to parse JSON for cmd ' + cmd2);
-                    return next();
+                    next();
+                    return;
                 }
 
                 if (item.service !== 'assets') {
@@ -111,7 +113,8 @@ function checkInsts(t, opts, cb) {
                 }
 
                 if (item.alias === '-') {
-                    return next();
+                    next();
+                    return;
                 }
 
                 var cmd = 'sdc-vmapi /vms/' + item.instance + ' | json -H';
@@ -121,7 +124,8 @@ function checkInsts(t, opts, cb) {
                     var vmDetails = parseJsonOut(stdout);
                     if (!vmDetails) {
                         t.ok(false, 'failed to parse JSON for cmd ' + cmd);
-                        return next();
+                        next();
+                        return;
                     }
 
                     t.equal(vmDetails.uuid,  item.instance,
@@ -147,7 +151,8 @@ function checkInsts(t, opts, cb) {
                             if (!imgInfo) {
                                 t.ok(false, 'failed to parse JSON for cmd ' +
                                         cmd3);
-                                return next();
+                                next();
+                                return;
                             }
 
                             t.equal(imgInfo.version, item.version,
diff --git a/test/experimental.test.js b/test/experimental.test.js
index ec14779..ce2c4d8 100644
--- a/test/experimental.test.js
+++ b/test/experimental.test.js
@@ -22,7 +22,6 @@ var UUID_RE = common.UUID_RE;
 
 var CURRENT_AGENTS_VERSION;
 var CURRENT_AGENTS_IMG;
-var LATEST_AGENTS_IMG;
 
 function getCurrentAgentsVersion(t, cb) {
     var latest = '/usbkey/extra/agents/latest';
@@ -60,20 +59,6 @@ function getCurrentAgentsImgManifest(t, cb) {
 }
 
 
-function getLatestAgentsImgManifest(t, cb) {
-    var command = 'updates-imgadm list name=agentsshar --latest --json';
-    exec(command, function (err, stdout, stderr) {
-        t.ifError(err, 'Execution error');
-        t.equal(stderr, '', 'Empty stderr');
-        var jsonDetails = common.parseJsonOut(stdout);
-        if (jsonDetails.length) {
-            LATEST_AGENTS_IMG = jsonDetails[0];
-        }
-        cb();
-    });
-}
-
-
 function checkHelp(t, subCmd, expectedStr) {
     var cmd = 'sdcadm experimental ' + subCmd + ' --help';
 
@@ -95,9 +80,6 @@ test('setup', function (t) {
             },
             function (_, next) {
                 getCurrentAgentsImgManifest(t, next);
-            },
-            function (_, next) {
-                getLatestAgentsImgManifest(t, next);
             }
         ]
     }, function () {
diff --git a/test/self-update.test.js b/test/self-update.test.js
index 239880f..94e5c4b 100644
--- a/test/self-update.test.js
+++ b/test/self-update.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 
@@ -15,7 +15,6 @@ var fs = require('fs');
 var assert = require('assert-plus');
 
 var CURRENT_VERSION = null;
-var CURRENT_BUILDSTAMP = null;
 var LATEST_UUID = null;
 
 function checkUpdateResults(t, err, stdout, stderr, moreStrings) {
@@ -27,7 +26,8 @@ function checkUpdateResults(t, err, stdout, stderr, moreStrings) {
     t.equal(stderr, '');
 
     if (stdout.indexOf('Already up-to-date') !== -1) {
-        return t.end();
+        t.end();
+        return;
     }
 
     var findStrings = [
@@ -61,7 +61,6 @@ function getSdcadmBuildstampVersion(t, cb) {
 
 test('setup', function (t) {
     getSdcadmBuildstampVersion(t, function (data) {
-        CURRENT_BUILDSTAMP = data;
         var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
             'tag.buildstamp=' + data + ' --latest -o uuid -H';
         exec(updatesCmd, function (err2, stdout, stderr) {
diff --git a/test/services.test.js b/test/services.test.js
index 1c45566..8dff178 100644
--- a/test/services.test.js
+++ b/test/services.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 
@@ -63,7 +63,8 @@ function checkInstancesExist(t, instances, cb) {
                 var instanceDetails = common.parseJsonOut(stdout);
                 if (!instanceDetails) {
                     t.ok(false, 'failed to parse JSON for cmd ' + cmd);
-                    return next();
+                    next();
+                    return;
                 }
 
                 t.equal(instanceDetails.uuid, instance.uuid,
@@ -96,7 +97,8 @@ function checkServicesDetails(t, servicesDetails) {
                 svcUuid + ' service type');
 
             if (svcUuid === '-') {
-                return next();
+                next();
+                return;
             }
 
             var svcInfo = SERVICES_INFO[svcUuid];
@@ -105,7 +107,8 @@ function checkServicesDetails(t, servicesDetails) {
             t.equal(svcInfo.name, name, svcUuid + ' service name matches');
 
             if (imgUuid === '-') {
-                return next();
+                next();
+                return;
             }
 
             t.equal(svcInfo.params.image_uuid, imgUuid,
@@ -117,7 +120,8 @@ function checkServicesDetails(t, servicesDetails) {
                 t.ifError(err, svcUuid + ' service image exists');
 
                 if (type !== 'vm') {
-                    return next();
+                    next();
+                    return;
                 }
 
                 var cmd2 = 'sdc-sapi /instances?service_uuid=' +
@@ -129,7 +133,8 @@ function checkServicesDetails(t, servicesDetails) {
                     var instances = common.parseJsonOut(stdout2);
                     if (!instances) {
                         t.ok(false, 'failed to parse JSON for cmd ' + cmd2);
-                        return next();
+                        next();
+                        return;
                     }
 
                     instances.forEach(function (inst) {
@@ -166,7 +171,8 @@ test('setup', function (t) {
         var servicesInfo = common.parseJsonOut(stdout);
         if (!servicesInfo) {
             t.ok(false, 'failed to parse JSON to preload service info');
-            return t.end();
+            t.end();
+            return;
         }
 
         servicesInfo.forEach(function (svc) {
@@ -238,7 +244,8 @@ test('sdcadm services --json', function (t) {
         var details = common.parseJsonOut(stdout);
         if (!details) {
             t.ok(false, 'failed to parse JSON');
-            return t.end();
+            t.end();
+            return;
         }
 
         var svcDetails = {};
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 1cffbe7..716de10 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -44,6 +44,39 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
@@ -52,3 +85,4 @@ RESTDOWN	?= python $(RESTDOWN_EXEC)
 $(RESTDOWN_EXEC): | deps/restdown/.git
 
 EXTRA_DOC_DEPS	?=
+
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 16b15aa..4ff9bda 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -77,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -102,6 +105,7 @@ BASHSTYLE	?= tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
@@ -190,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -209,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +274,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,6 +304,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
@@ -316,3 +327,20 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
+
-- 
2.21.0

