commit 996204040323c47d17fb010b9535bacc4f4f78e8 (refs/changes/25/5025/4)
Author: Mike Gerdts <mike.gerdts@joyent.com>
Date:   2018-11-06T20:42:29+00:00 (11 months ago)
    
    OS-7338 vmadm support for flexible disk space

diff --git a/src/vm/man/vmadm.1m.md b/src/vm/man/vmadm.1m.md
index 78a3be8a..03ac8d95 100644
--- a/src/vm/man/vmadm.1m.md
+++ b/src/vm/man/vmadm.1m.md
@@ -1081,6 +1081,21 @@ tab-complete UUIDs rather than having to type them out for every command.
         create: yes
         update: yes
 
+    flexible_disk_size:
+
+        This sets an upper bound for the amount of space that a bhyve instance
+        may use for its disks and snapshots of those disks. If this value is not
+        set, it will not be possible to create snapshots of the instance.
+
+        This value must be at least as large as the sum of all of the
+        disk.*.size values.
+
+        type: integer (number of MiB)
+        vmtype: bhyve
+        listable: yes
+        create: yes
+        update: yes (live update)
+
     fs_allowed:
 
         This option allows you to specify filesystem types this zone is allowed
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 30280a8a..43754074 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -1438,10 +1438,15 @@ function setQuota(opts, callback)
  *    *auto*.
  *
  * Steps:
- *   - Set refquota, refreservation to `DEFAULT_BHYVE_QUOTA`
+ *   - Set refquota to payload.quota or `DEFAULT_BHYVE_QUOTA` and refreservation
+ *     to 'none'.
  *   - Set refreservation on instance volumes to 'auto'
- *   - Read value which was calculated for refreservation (auto_refres)
- *   - Set quota zone root dataset to (DEFAULT_BHYVE_QUOTA + auto_refres)
+ *   - Read value which was calculated for refreservation (auto_refres) from
+ *     each volume.
+ *   - Set quota on zone root dataset, based on whether flexible_disk_size is
+ *     set. If flexible_disk_size is set, quota becomes the root dataset's
+ *     refquota + sum(auto_refres - volsize) + flexible_disk_size. Otherwise,
+ *     quota becomes the root dataset's refquota + sum(auto_frefres).
  */
 
 function setQuotaBhyve(opts, callback) {
@@ -1450,16 +1455,21 @@ function setQuotaBhyve(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.optionalFunc(opts.cancelFn, 'callback');
     assert.number(opts.quota, 'opts.quota');
+    assert.optionalNumber(opts.flexible_disk_size, 'opts.flexible_disk_size');
 
     var cancelFn = opts.cancelFn ? opts.cancelFn : noop;
 
     var log = opts.log;
     var dataset = opts.dataset;
-    var volumes;
-    var sum;
+    var volumes = [];
+    var volsize = 0;
+    var volrefres;
 
     var maxQuota = Math.max(DEFAULT_BHYVE_QUOTA,
         opts.quota * 1024 * 1024 * 1024);
+    // flexible_disk_size is in MiB to match disk.*.size units.
+    var flexsize = opts.flexible_disk_size
+        ? opts.flexible_disk_size * 1024 * 1024 :  0;
 
     vasync.waterfall([
         function setRefQuotaRefRes(next) {
@@ -1484,8 +1494,8 @@ function setQuotaBhyve(opts, callback) {
         function getVolumes(next) {
             // Look up the refreservation value of all zone volumes
             var zfsArgs = [
-                'list', '-Hrt', 'volume',
-                '-o', 'name',
+                'list', '-Hrpt', 'volume',
+                '-o', 'name,volsize',
                 dataset
             ];
             zfs(zfsArgs, log, function _onGetVolumes(err, fds) {
@@ -1496,8 +1506,14 @@ function setQuotaBhyve(opts, callback) {
                     next(new Error(rtrim(fds.stderr)));
                     return;
                 }
-                volumes = fds.stdout.trim().split('\n');
+
+                fds.stdout.trim().split('\n').forEach(function (line) {
+                    var fields = line.split('\t');
+                    volumes.push(fields[0]);
+                    volsize += parseInt(fields[1], 10);
+                });
                 assert(volumes.length > 0, 'at least 1 volume must be present');
+                assert(volsize > 0, 'volume size must be non-zero');
                 next();
             });
         },
@@ -1537,7 +1553,7 @@ function setQuotaBhyve(opts, callback) {
                     return;
                 }
 
-                sum = fds.stdout.trim().split('\n').reduce(
+                volrefres = fds.stdout.trim().split('\n').reduce(
                     function (acc, cur) {
                         return acc + parseInt(cur, 10);
                     }, 0);
@@ -1546,12 +1562,19 @@ function setQuotaBhyve(opts, callback) {
             });
         },
         function setDatasetQuota(next) {
+            var quota;
+
+            if (flexsize !== 0) {
+                quota = volrefres + maxQuota + flexsize - volsize;
+            } else {
+                quota = volrefres + maxQuota;
+            }
+
             // Compare the quota value passed in to the one which we've
             // computed based on volume refreservation values.
-
-            var quota =
-                (opts.quota * 1024 * 1024 * 1024) > (sum + maxQuota)
-                ?  (opts.quota + 'g') : (sum + maxQuota);
+            if (opts.quota * 1024 * 1024 * 1024 > quota) {
+                quota = opts.quota + 'g';
+            }
 
             var zfsArgs = [
                 'set',
@@ -3638,6 +3661,7 @@ function createVM(payload, log, callback)
             setQuotaBhyve({
                 dataset: zoneroot,
                 log: log,
+                flexible_disk_size: payload.flexible_disk_size,
                 quota: payload.quota
             }, cb);
         }, function (cb) {
@@ -6606,6 +6630,7 @@ function buildZonecfgUpdate(vmobj, payload, log)
     setAttr('spice-port', 'spice_port');
     setAttr('virtio-txtimer', 'virtio_txtimer');
     setAttr('virtio-txburst', 'virtio_txburst');
+    setAttr('flexible-disk-size', 'flexible_disk_size');
 
     // We use base64 here for these next five options:
     //
@@ -10160,6 +10185,7 @@ exports.receive = function (target, options, callback)
                     [
                         'zpool',
                         'quota',
+                        'flexible_disk_size',
                         'internal_metadata',
                         'customer_metadata',
                         'tags',
@@ -14741,16 +14767,31 @@ function applyUpdates(oldobj, newobj, payload, log, cancelFn, callback)
                 cb();
             }
         }, function (cb) {
-            if (payload.hasOwnProperty('quota')
-                && (Number(payload.quota) !== Number(oldobj.quota))) {
+            var opts = {
+                brand: oldobj.brand,
+                dataset: newobj.zfs_filesystem,
+                log: log,
+                cancelFn: cancelFn
+            };
+            var props = ['quota', 'flexible_disk_size'];
+            var needChange = false;
 
-                setQuota({
-                    brand: oldobj.brand,
-                    dataset: newobj.zfs_filesystem,
-                    log: log,
-                    quota: payload.quota,
-                    cancelFn: cancelFn
-                }, function _onSetQuota(err) {
+            props.forEach(function (key) {
+                if (payload.hasOwnProperty(key)
+                    && Number(payload[key]) !== Number(oldobj[key])) {
+                    opts[key] = payload[key];
+                    log.debug('Need quota update for ' + key);
+                    needChange = true;
+                }
+            });
+
+            if (needChange) {
+                props.forEach(function (key) {
+                    if (!opts.hasOwnProperty(key)) {
+                        opts[key] = oldobj[key];
+                    }
+                });
+                setQuota(opts, function _onSetQuota(err) {
                     if (!err) {
                         changed = true;
                     }
diff --git a/src/vm/node_modules/proptable.js b/src/vm/node_modules/proptable.js
index 56604d76..d0865f2a 100644
--- a/src/vm/node_modules/proptable.js
+++ b/src/vm/node_modules/proptable.js
@@ -829,6 +829,16 @@ exports.properties = {
             default: false
         },
         zonexml: 'zone.attr.firewall-enabled'
+    }, flexible_disk_size: {
+        loadValueTranslator: 'utils.numberify',
+        payload: {
+            allowed: {
+                'bhyve': ['create', 'receive', 'update']
+            },
+            type: 'integer',
+            min: 0
+        },
+        zonexml: 'zone.attr.flexible-disk-size'
     }, fs_allowed: {
         payload: {
             allowed: {
diff --git a/src/vm/tests/test-quota.js b/src/vm/tests/test-quota.js
index ab5d8690..c38dd143 100644
--- a/src/vm/tests/test-quota.js
+++ b/src/vm/tests/test-quota.js
@@ -57,29 +57,80 @@ var vmobj = {};
 //   don't actually use that zoneroot.
 
 var test_cases = [
-    [ {brand: 'joyent-minimal', quota: 0, image_uuid: smartos_image_uuid}, 0],
-    [ {brand: 'joyent-minimal', quota: 1024, image_uuid: smartos_image_uuid},
-        1024],
-    [ {brand: 'joyent', quota: 0, image_uuid: smartos_image_uuid}, 0],
-    [ {brand: 'joyent', quota: 1048576, image_uuid: smartos_image_uuid},
-        1048576],
-    [ {brand: 'kvm', quota: 0}, 0],
-    [ {brand: 'kvm', quota: 0, image_uuid: smartos_image_uuid}, 0],
-    [ {brand: 'kvm', quota: 10, image_uuid: smartos_image_uuid}, 10],
-    [ {brand: 'bhyve', quota: 1,
-        disks: [
-            {boot: true, model: 'virtio',
-            image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID}]
-    }, 1],
-    [ {brand: 'bhyve', quota: 10,
-        disks: [
-            {boot: true, model: 'virtio',
-                image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID}]
-    }, 10]
+    {
+        payload: {brand: 'joyent-minimal', quota: 0,
+            image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'joyent-minimal', quota: 1024,
+            image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'joyent', quota: 0, image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'joyent', quota: 1048576,
+            image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'kvm', quota: 0}
+    }, {
+        payload: {brand: 'kvm', quota: 0, image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'kvm', quota: 10, image_uuid: smartos_image_uuid}
+    }, {
+        payload: {brand: 'bhyve', quota: 1,
+            disks: [ {boot: true, model: 'virtio',
+                image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID} ]
+        }
+    }, {
+        payload: {brand: 'bhyve', quota: 1, flexible_disk_size: 15 * 1024,
+            disks: [ {boot: true, model: 'virtio',
+                image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID} ]
+        }
+    }, {
+        payload: {brand: 'bhyve', quota: 10,
+            disks: [ {boot: true, model: 'virtio',
+                image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID} ]
+        }
+    },
+
+    /*
+     * For better or worse, VM.create() allows payloads with invalid properties,
+     * logging "bad property $prop because: missing from allowed_properties".
+     * The following test cases ensure that flexible_disk_size does not make it
+     * into non-bhyve instances' configuration or affect the quota.
+     */
+    {
+        payload: {brand: 'joyent-minimal', quota: 10,
+            flexible_disk_size: 12 * 1024, image_uuid: smartos_image_uuid},
+        expected: {quota: 10, flexible_disk_size: undefined}
+    }, {
+        payload: {brand: 'joyent', quota: 10,
+            flexible_disk_size: 12 * 1024, image_uuid: smartos_image_uuid},
+        expected: {quota: 10, flexible_disk_size: undefined}
+    }, {
+        payload: {brand: 'kvm', quota: 1,
+            flexible_disk_size: 12 * 1024, image_uuid: smartos_image_uuid},
+        expected: {quota: 1, flexible_disk_size: undefined}
+    }, {
+        payload: {brand: 'lx', quota: 10,
+            flexible_disk_size: 12 * 1024, kernel_version: '3.13.0',
+            image_uuid: vmtest.CURRENT_UBUNTU_LX_IMAGE_UUID},
+        expected: {quota: 10, flexible_disk_size: undefined}
+    }
 ];
 
-function do_test(payload, expected_result)
+function do_test(testcase)
 {
+    var desc = [];
+    var payload = testcase.payload;
+    var expected = testcase.expected || JSON.parse(JSON.stringify(payload));
+
+    Object.keys(payload).forEach(
+        function (key) {
+            if (['string', 'number'].indexOf(typeof (payload[key])) !== -1) {
+                desc.push(key + '=' + payload[key]);
+            }
+        });
+    desc = desc.join(' ');
+
     abort = false;
 
     // some common properties
@@ -87,25 +138,25 @@ function do_test(payload, expected_result)
     payload.autoboot = false;
     payload.do_not_inventory = true;
 
-    test('create ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('create ' + desc,
         function (t) {
             doCreateTest({
                 t: t,
                 payload: payload,
-                expected_result: expected_result
+                expected: expected
             });
         });
 
-    test('update ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('update ' + desc,
         function (t) {
             doUpdateTest({
                 t: t,
                 payload: payload,
-                expected_result: expected_result
+                expected: expected
             });
         });
 
-    test('delete ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('delete ' + desc,
         function (t) {
             if (abort) {
                 t.ok(false, 'skipping delete as test run is aborted.');
@@ -137,7 +188,7 @@ function do_test(payload, expected_result)
 function doCreateTest(opts) {
     var t = opts.t;
     var payload = opts.payload;
-    var expected_result = opts.expected_result;
+    var expected = opts.expected;
 
     async.waterfall([
         function _create(next) {
@@ -152,26 +203,18 @@ function doCreateTest(opts) {
             });
         },
         function _load(next) {
-            VM.load(vmobj.uuid, function (err, o) {
-                common.ifError(t, err, 'loading vm');
-                if (err) {
-                    abort = true;
-                    next(err);
-                    return;
-                }
-                vmobj = o;
-
-                t.ok(o.quota === expected_result,
-                    'correct quota [' + o.quota + ','
-                    + expected_result + ']');
-                next(err);
-            });
+            checkProps({
+                expected: expected,
+                uuid: vmobj.uuid,
+                t: t
+            }, next);
         },
         function _checkZfsProperties(next) {
             checkZfs({
+                payload: payload,
+                expected: expected,
                 uuid: vmobj.uuid,
-                t: t,
-                expected_result: expected_result
+                t: t
             }, next);
         }
     ],
@@ -183,13 +226,12 @@ function doCreateTest(opts) {
 function doUpdateTest(opts) {
     var t = opts.t;
     var payload = opts.payload;
-    var expected_result = opts.expected_result;
+    var expected = opts.expected;
+    var updatePayload = {quota: payload.quota * 2 };
 
     async.waterfall([
         // Double the quota
         function _updateQuotaUp(next) {
-            var updatePayload = { quota: payload.quota * 2 };
-
             VM.update(vmobj.uuid, updatePayload, {}, function (err) {
                 common.ifError(t, err, 'updating quota up');
                 if (err) {
@@ -200,32 +242,27 @@ function doUpdateTest(opts) {
             });
         },
         function _checkQuotaUp(next) {
-            VM.load(vmobj.uuid, function (err, o) {
-                common.ifError(t, err, 'loading vm');
-                if (err) {
-                    next(err);
-                    return;
-                }
-
-                t.ok(o.quota === payload.quota * 2,
-                    'correct quota [' + o.quota + ','
-                    + payload.quota * 2 + ']');
-                next(err);
-            });
+            checkProps({
+                expected: updatePayload,
+                uuid: vmobj.uuid,
+                t: t
+            }, next);
         },
         function _checkZfsProperties(next) {
             checkZfs({
+                payload: payload,
+                expected: expected,
+                expected: updatePayload,
                 uuid: vmobj.uuid,
-                t: t,
-                expected_result: expected_result * 2
+                t: t
             }, next);
         },
         function _updateQuotaDown(next) {
-            // Halve the quota
-            var updatePayload = { quota: expected_result };
+            // Reset the quota to what it started out as
+            updatePayload = {quota: payload.quota };
 
             VM.update(vmobj.uuid, updatePayload, {}, function (err) {
-                common.ifError(t, err, 'updating quota up');
+                common.ifError(t, err, 'updating quota down');
 
                 if (err) {
                     next(err);
@@ -235,24 +272,18 @@ function doUpdateTest(opts) {
             });
         },
         function _checkQuotaDown(next) {
-            VM.load(vmobj.uuid, function (err, o) {
-                common.ifError(t, err, 'loading vm');
-                if (err) {
-                    next(err);
-                    return;
-                }
-
-                t.ok(o.quota === expected_result,
-                    'correct quota [' + o.quota + ','
-                    + expected_result + ']');
-                next(err);
-            });
+            checkProps({
+                expected: expected,
+                uuid: vmobj.uuid,
+                t: t
+            }, next);
         },
         function _checkZfsPropertiesAgain(next) {
             checkZfs({
+                payload: payload,
+                expected: expected,
                 uuid: vmobj.uuid,
-                t: t,
-                expected_result: expected_result
+                t: t
             }, next);
         }
     ],
@@ -261,9 +292,45 @@ function doUpdateTest(opts) {
     });
 }
 
+/*
+ * Checks most (see skipProps) opts.exected.* against corresponding vmobj.*.
+ * Ignores vmobj properties that are not present in opts.expected. To verify
+ * that vmobj.foo is undefined, set opts.expected.foo to undefined.
+ *
+ * Updates vmobj global as a side effect.
+ */
+function checkProps(opts, callback) {
+    var t = opts.t;
+    var uuid = opts.uuid;
+    var expected = opts.expected;
+    /*
+     * There are required in some payloads but are not present and/or of
+     * interest in vmobj.
+     */
+    var skipProps = ['disks', 'ram', 'zonename'];
+
+    VM.load(uuid, function (err, o) {
+        common.ifError(t, err, 'loading vm');
+        if (err) {
+            callback(err);
+            return;
+        }
+        vmobj = o;
+
+        Object.keys(expected).forEach(function (prop) {
+            if (skipProps.indexOf(prop) === -1) {
+                t.ok(expected[prop] === o[prop],
+                    'correct ' + prop + ' [' + o[prop] + ','
+                    + expected[prop] + ']');
+            }
+        });
+        callback();
+    });
+}
+
 function checkZfs(opts, callback) {
     var t = opts.t;
-    var expected_result = opts.expected_result;
+    var expected = opts.expected;
     var props = [
         'used', 'refquota', 'quota', 'refreservation', 'copies',
         'volsize', 'volblocksize'
@@ -284,6 +351,7 @@ function checkZfs(opts, callback) {
         var zrRefreservation =
             datasetValues[zoneroot].refreservation;
 
+        t.ok(vmobj.brand, 'brand is ' + vmobj.brand);
         switch (vmobj.brand) {
             case 'bhyve':
                 zvol = zoneroot + '/disk0';
@@ -297,30 +365,40 @@ function checkZfs(opts, callback) {
                 var zvRefreservation =
                     datasetValues[zvol].refreservation;
 
+                var expQuota;
+                if (opts.payload.hasOwnProperty('flexible_disk_size')) {
+                    var flexsize = opts.payload.flexible_disk_size;
+                    t.ok(vmobj.flexible_disk_size === flexsize,
+                        'vmobj.flexible_disk_size is ' + flexsize);
+                    expQuota = flexsize * 1024 * 1024 + zrRefreservation
+                        + datasetValues[zvol].refreservation
+                        - datasetValues[zvol].volsize;
+                } else {
+                    t.ok(!vmobj.hasOwnProperty('flexible_disk_size'),
+                        'vmobj does not have flexible_disk_size');
+                    expQuota = zvRefreservation + zrRefquota;
+                }
+
                 t.equal(
                     zrRefquota / 1024 / 1024 / 1024,
-                    expected_result, 'bhyve quota uses refquota');
+                    expected.quota, 'bhyve quota uses refquota');
 
                 t.equal(
                     zrRefreservation / 1024 / 1024 / 1024,
-                    expected_result, 0,
-                    'no refreservation set');
+                    expected.quota, 'no refreservation set');
 
                 t.equal(
                     zvRefreservation,
                     expReservationsSize,
                     'zvol refreseration matches expected');
 
-                t.equal(
-                    zrQuota,
-                    zvRefreservation + zrRefquota,
-                    'bhyve zone root quota value');
+                t.equal(zrQuota, expQuota, 'bhyve zone root quota value');
                 break;
 
             default:
                 t.equal(
                     zrQuota / 1024 / 1024 / 1024,
-                    expected_result, 'quota should match');
+                    expected.quota, 'quota should match');
                 break;
         }
         callback();
@@ -361,7 +439,7 @@ for (test_case in test_cases) {
     test_case = test_cases[test_case];
     test_case.alias = 'test-quota-' + process.pid;
 
-    do_test(test_case[0], test_case[1]);
+    do_test(test_case);
 }
 
 test('create joyent-minimal zone with invalid type of quota', function (t) {
