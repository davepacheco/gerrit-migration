From 57b0302f96229fa30e670d2e06757bdd4658dee1 Mon Sep 17 00:00:00 2001
From: Mike Gerdts <mike.gerdts@joyent.com>
Date: Fri, 26 Oct 2018 12:23:52 +0000
Subject: [PATCH] OS-7338 vmadm support for flexible disk space

---
 src/vm/node_modules/VM.js        | 78 +++++++++++++++++++++++---------
 src/vm/node_modules/proptable.js | 10 ++++
 src/vm/tests/test-quota.js       | 48 ++++++++++++++++----
 3 files changed, 105 insertions(+), 31 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 30280a8a..c170521e 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -1438,10 +1438,12 @@ function setQuota(opts, callback)
  *    *auto*.
  *
  * Steps:
- *   - Set refquota, refreservation to `DEFAULT_BHYVE_QUOTA`
+ *   - Set refquota to `DEFAULT_BHYVE_QUOTA` and refreservation to 'none'
  *   - Set refreservation on instance volumes to 'auto'
  *   - Read value which was calculated for refreservation (auto_refres)
- *   - Set quota zone root dataset to (DEFAULT_BHYVE_QUOTA + auto_refres)
+ *   - Set quota zone root dataset, based on whether flexible_disk_size is set.
+ *     If not set, quota is DEFAULT_BHYVE_QUOTA + auto_refres, otherwise it is
+ *     DEFAULT_BHYVE_QUOTA + flexible_disk_size + sum(auto_refres - volsize).
  */
 
 function setQuotaBhyve(opts, callback) {
@@ -1455,11 +1457,14 @@ function setQuotaBhyve(opts, callback) {
 
     var log = opts.log;
     var dataset = opts.dataset;
-    var volumes;
-    var sum;
+    var volumes = [];
+    var volsize = 0;
+    var volrefres;
 
     var maxQuota = Math.max(DEFAULT_BHYVE_QUOTA,
         opts.quota * 1024 * 1024 * 1024);
+    var flexsize = opts.flexible_disk_size
+        ? opts.flexible_disk_size * 1024 * 1024 * 1024 :  0;
 
     vasync.waterfall([
         function setRefQuotaRefRes(next) {
@@ -1484,8 +1489,8 @@ function setQuotaBhyve(opts, callback) {
         function getVolumes(next) {
             // Look up the refreservation value of all zone volumes
             var zfsArgs = [
-                'list', '-Hrt', 'volume',
-                '-o', 'name',
+                'list', '-Hrpt', 'volume',
+                '-o', 'name,volsize',
                 dataset
             ];
             zfs(zfsArgs, log, function _onGetVolumes(err, fds) {
@@ -1496,8 +1501,14 @@ function setQuotaBhyve(opts, callback) {
                     next(new Error(rtrim(fds.stderr)));
                     return;
                 }
-                volumes = fds.stdout.trim().split('\n');
+
+                fds.stdout.trim().split('\n').forEach(function (line) {
+                    var fields = line.split('\t');
+                    volumes.push(fields[0]);
+                    volsize += parseInt(fields[1], 10);
+                });
                 assert(volumes.length > 0, 'at least 1 volume must be present');
+                assert(volsize > 0, 'volume size must be non-zero');
                 next();
             });
         },
@@ -1537,7 +1548,7 @@ function setQuotaBhyve(opts, callback) {
                     return;
                 }
 
-                sum = fds.stdout.trim().split('\n').reduce(
+                volrefres = fds.stdout.trim().split('\n').reduce(
                     function (acc, cur) {
                         return acc + parseInt(cur, 10);
                     }, 0);
@@ -1546,12 +1557,19 @@ function setQuotaBhyve(opts, callback) {
             });
         },
         function setDatasetQuota(next) {
+            var quota;
+
+            if (flexsize != 0) {
+                quota = volrefres + maxQuota + flexsize - volsize;
+            } else {
+                quota = volrefres + maxQuota;
+            }
+
             // Compare the quota value passed in to the one which we've
             // computed based on volume refreservation values.
-
-            var quota =
-                (opts.quota * 1024 * 1024 * 1024) > (sum + maxQuota)
-                ?  (opts.quota + 'g') : (sum + maxQuota);
+            if (opts.quota * 1024 * 1024 * 1024 > quota) {
+                quota = opts.quota + 'g';
+            }
 
             var zfsArgs = [
                 'set',
@@ -3638,6 +3656,7 @@ function createVM(payload, log, callback)
             setQuotaBhyve({
                 dataset: zoneroot,
                 log: log,
+                flexible_disk_size: payload.flexible_disk_size,
                 quota: payload.quota
             }, cb);
         }, function (cb) {
@@ -6606,6 +6625,7 @@ function buildZonecfgUpdate(vmobj, payload, log)
     setAttr('spice-port', 'spice_port');
     setAttr('virtio-txtimer', 'virtio_txtimer');
     setAttr('virtio-txburst', 'virtio_txburst');
+    setAttr('flexible-disk-size', 'flexible_disk_size');
 
     // We use base64 here for these next five options:
     //
@@ -10160,6 +10180,7 @@ exports.receive = function (target, options, callback)
                     [
                         'zpool',
                         'quota',
+                        'flexible_disk_size',
                         'internal_metadata',
                         'customer_metadata',
                         'tags',
@@ -14741,16 +14762,31 @@ function applyUpdates(oldobj, newobj, payload, log, cancelFn, callback)
                 cb();
             }
         }, function (cb) {
-            if (payload.hasOwnProperty('quota')
-                && (Number(payload.quota) !== Number(oldobj.quota))) {
+            var opts = {
+                brand: oldobj.brand,
+                dataset: newobj.zfs_filesystem,
+                log: log,
+                cancelFn: cancelFn
+            };
+            var props = ['quota', 'flexible_disk_size'];
+            var needChange = false;
 
-                setQuota({
-                    brand: oldobj.brand,
-                    dataset: newobj.zfs_filesystem,
-                    log: log,
-                    quota: payload.quota,
-                    cancelFn: cancelFn
-                }, function _onSetQuota(err) {
+            props.forEach(function (key) {
+                if (payload.hasOwnProperty(key)
+                    && Number(payload[key]) !== Number(oldobj[key])) {
+                    opts[key] = payload[key];
+                    log.debug('Need quota update for ' + key);
+                    needChange = true;
+                }
+            });
+
+            if (needChange) {
+                props.forEach(function (key) {
+                    if (!opts.hasOwnProperty(key)) {
+                        opts[key] = oldobj[key];
+                    }
+                });
+                setQuota(opts, function _onSetQuota(err) {
                     if (!err) {
                         changed = true;
                     }
diff --git a/src/vm/node_modules/proptable.js b/src/vm/node_modules/proptable.js
index 56604d76..d0865f2a 100644
--- a/src/vm/node_modules/proptable.js
+++ b/src/vm/node_modules/proptable.js
@@ -829,6 +829,16 @@ exports.properties = {
             default: false
         },
         zonexml: 'zone.attr.firewall-enabled'
+    }, flexible_disk_size: {
+        loadValueTranslator: 'utils.numberify',
+        payload: {
+            allowed: {
+                'bhyve': ['create', 'receive', 'update']
+            },
+            type: 'integer',
+            min: 0
+        },
+        zonexml: 'zone.attr.flexible-disk-size'
     }, fs_allowed: {
         payload: {
             allowed: {
diff --git a/src/vm/tests/test-quota.js b/src/vm/tests/test-quota.js
index ab5d8690..251a13a0 100644
--- a/src/vm/tests/test-quota.js
+++ b/src/vm/tests/test-quota.js
@@ -71,6 +71,11 @@ var test_cases = [
             {boot: true, model: 'virtio',
             image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID}]
     }, 1],
+    [ {brand: 'bhyve', quota: 1, flexible_disk_size: 15,
+        disks: [
+            {boot: true, model: 'virtio',
+            image_uuid: vmtest.CURRENT_BHYVE_CENTOS_UUID}]
+    }, 1],
     [ {brand: 'bhyve', quota: 10,
         disks: [
             {boot: true, model: 'virtio',
@@ -80,6 +85,15 @@ var test_cases = [
 
 function do_test(payload, expected_result)
 {
+    var desc = [];
+
+    Object.keys(payload).forEach(
+        function (key) {
+            if (['string', 'number'].indexOf(typeof (payload[key])) !== -1) {
+                desc.push(key + '=' + payload[key]);
+            }
+        });
+
     abort = false;
 
     // some common properties
@@ -87,7 +101,7 @@ function do_test(payload, expected_result)
     payload.autoboot = false;
     payload.do_not_inventory = true;
 
-    test('create ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('create ' + desc.join(' '),
         function (t) {
             doCreateTest({
                 t: t,
@@ -96,7 +110,7 @@ function do_test(payload, expected_result)
             });
         });
 
-    test('update ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('update ' + desc.join(' '),
         function (t) {
             doUpdateTest({
                 t: t,
@@ -105,7 +119,7 @@ function do_test(payload, expected_result)
             });
         });
 
-    test('delete ' + payload.brand + ' zone with ' + payload.quota + ' quota',
+    test('delete ' + desc.join(' '),
         function (t) {
             if (abort) {
                 t.ok(false, 'skipping delete as test run is aborted.');
@@ -169,6 +183,7 @@ function doCreateTest(opts) {
         },
         function _checkZfsProperties(next) {
             checkZfs({
+                payload: payload,
                 uuid: vmobj.uuid,
                 t: t,
                 expected_result: expected_result
@@ -215,6 +230,7 @@ function doUpdateTest(opts) {
         },
         function _checkZfsProperties(next) {
             checkZfs({
+                payload: payload,
                 uuid: vmobj.uuid,
                 t: t,
                 expected_result: expected_result * 2
@@ -225,7 +241,7 @@ function doUpdateTest(opts) {
             var updatePayload = { quota: expected_result };
 
             VM.update(vmobj.uuid, updatePayload, {}, function (err) {
-                common.ifError(t, err, 'updating quota up');
+                common.ifError(t, err, 'updating quota down');
 
                 if (err) {
                     next(err);
@@ -250,6 +266,7 @@ function doUpdateTest(opts) {
         },
         function _checkZfsPropertiesAgain(next) {
             checkZfs({
+                payload: payload,
                 uuid: vmobj.uuid,
                 t: t,
                 expected_result: expected_result
@@ -297,24 +314,35 @@ function checkZfs(opts, callback) {
                 var zvRefreservation =
                     datasetValues[zvol].refreservation;
 
+                var expQuota;
+                if (opts.payload.hasOwnProperty('flexible_disk_size')) {
+                    var flexsize = opts.payload.flexible_disk_size;
+                    t.ok(vmobj.flexible_disk_size === flexsize,
+                        'vmobj.flexible_disk_size is ' + flexsize);
+                    expQuota = flexsize * 1024 * 1024 * 1024
+                        + zrRefreservation
+                        + datasetValues[zvol].refreservation
+                        - datasetValues[zvol].volsize;
+                } else {
+                    t.ok(!vmobj.hasOwnProperty('flexible_disk_size'),
+                        'vmobj does not have flexible_disk_size');
+                    expQuota = zvRefreservation + zrRefquota;
+                }
+
                 t.equal(
                     zrRefquota / 1024 / 1024 / 1024,
                     expected_result, 'bhyve quota uses refquota');
 
                 t.equal(
                     zrRefreservation / 1024 / 1024 / 1024,
-                    expected_result, 0,
-                    'no refreservation set');
+                    expected_result, 'no refreservation set');
 
                 t.equal(
                     zvRefreservation,
                     expReservationsSize,
                     'zvol refreseration matches expected');
 
-                t.equal(
-                    zrQuota,
-                    zvRefreservation + zrRefquota,
-                    'bhyve zone root quota value');
+                t.equal(zrQuota, expQuota, 'bhyve zone root quota value');
                 break;
 
             default:
-- 
2.21.0

