commit 00bd0857d42c885b81b49c7ca94058ac1bd99f90
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-08-16T16:19:49-06:00 (7 weeks ago)
    
    MANTA-4510 node-fast use wrong CRC library version when encoding errors to clients using updated CRC library version

diff --git a/CHANGES.md b/CHANGES.md
index d9a67c2..b4a22ae 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 None yet.
 
+## v2.7.1
+
+* node-fast use wrong CRC library version when encoding errors to clients using updated CRC library version
+
 ## v2.7.0
 
 * #23 Add support for updated crc package to improve interoperability
diff --git a/lib/fast_server.js b/lib/fast_server.js
index 06b5672..31698e8 100644
--- a/lib/fast_server.js
+++ b/lib/fast_server.js
@@ -862,8 +862,10 @@ FastServer.prototype.requestFail = function (request, error)
 	request.fsr_state = FR_S_COMPLETE;
 	request.fsr_log.debug(error, 'request failed');
 
+	var crc_mode = request.fsr_message.crc_mode;
+
 	request.fsr_conn.fc_msgencoder.write(requestMakeMessage(
-	    request, mod_protocol.FP_STATUS_ERROR, error));
+	    request, mod_protocol.FP_STATUS_ERROR, error, crc_mode));
 
 
 	/*
diff --git a/package.json b/package.json
index 67f9901..160164b 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "fast",
 	"description": "streaming JSON RPC over TCP",
-	"version": "2.7.0",
+	"version": "2.7.1",
 	"main": "./lib/fast.js",
 	"repository": {
 		"type": "git",
diff --git a/test/tst.server.js b/test/tst.server.js
index 0564ecb..34e869d 100644
--- a/test/tst.server.js
+++ b/test/tst.server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -30,6 +30,9 @@ var VError = require('verror');
 var testLog;
 var serverTestCases;
 
+var SERVER_CRC_MODE = mod_fast.FAST_CHECKSUM_V1;
+var CLIENT_CRC_MODE = mod_fast.FAST_CHECKSUM_V1;
+
 function main()
 {
 	testLog = new mod_bunyan({
@@ -42,12 +45,35 @@ function main()
 	mod_vasync.forEachPipeline({
 	    'inputs': serverTestCases,
 	    'func': runTestCase
-	}, function (err) {
-		if (err) {
-			throw (err);
+	}, function (err1) {
+		if (err1) {
+			throw (err1);
 		}
 
-		mod_testcommon.unregisterExitBlocker('test run');
+		SERVER_CRC_MODE = mod_fast.FAST_CHECKSUM_V1_V2;
+
+		mod_vasync.forEachPipeline({
+		    'inputs': serverTestCases,
+		    'func': runTestCase
+		}, function (err2) {
+			if (err2) {
+				throw (err2);
+			}
+
+			CLIENT_CRC_MODE = mod_fast.FAST_CHECKSUM_V2;
+
+			mod_vasync.forEachPipeline({
+			    'inputs': serverTestCases,
+			    'func': runTestCase
+			}, function (err3) {
+				if (err3) {
+					throw (err3);
+				}
+
+				var tr = 'test run';
+				mod_testcommon.unregisterExitBlocker(tr);
+			});
+		});
 	});
 }
 
@@ -74,7 +100,8 @@ ServerTestContext.prototype.connectClient = function (callback)
 	cclient = new mod_fast.FastClient({
 	    'log': this.ts_log.child({ 'component': 'FastClient' }),
 	    'transport': csock,
-	    'nRecentRequests': 100
+	    'nRecentRequests': 100,
+	    'crc_mode': CLIENT_CRC_MODE
 	});
 
 	csock.on('connect', function () {
@@ -170,7 +197,8 @@ function runTestCase(testcase, callback)
 	tctx.ts_server = new mod_fast.FastServer({
 	    'collector': tctx.ts_collector,
 	    'log': tctx.ts_log.child({ 'component': 'FastServer' }),
-	    'server': tctx.ts_socket
+	    'server': tctx.ts_socket,
+	    'crc_mode': SERVER_CRC_MODE
 	});
 
 	mod_fastdemo.demoRpcs().forEach(function (rpc) {
