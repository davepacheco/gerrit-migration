From 6707d1e8d4f53e1f6c60ec20b566c83a064706f6 Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Mon, 8 Aug 2016 11:10:25 +0200
Subject: [PATCH] TOOLS-1469 sdcadm tests improvements

---
 test/channel.test.js     | 31 +++++++++-----
 test/instances.test.js   |  5 +--
 test/runtests            | 37 ++++++++++------
 test/sdcadm.test.js      | 11 +++--
 test/self-update.test.js | 93 ++++++++++++++++++++++++++++++++++------
 5 files changed, 133 insertions(+), 44 deletions(-)

diff --git a/test/channel.test.js b/test/channel.test.js
index 2956cc2..e8944b2 100644
--- a/test/channel.test.js
+++ b/test/channel.test.js
@@ -5,13 +5,25 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
-
+var util = require('util');
 var test = require('tape').test;
 var exec = require('child_process').exec;
 
+var CURR_CHANNEL = null;
+
+test('setup', function (t) {
+    exec('sdcadm channel get', function (err, stdout, stderr) {
+        t.ifError(err);
+        t.equal(stderr, '');
+        if (stdout) {
+            CURR_CHANNEL = stdout.trim();
+        }
+        t.end();
+    });
+});
 
 test('sdcadm channel --help', function (t) {
     exec('sdcadm channel --help', function (err, stdout, stderr) {
@@ -45,7 +57,6 @@ test('sdcadm channel list', function (t) {
         var lines = stdout.split('\n');
         var titles = lines[0].split(/\s+/);
         t.deepEqual(titles, ['NAME', 'DEFAULT', 'DESCRIPTION']);
-
         t.end();
     });
 });
@@ -54,24 +65,24 @@ test('sdcadm channel list', function (t) {
 test('sdcadm channel set', function (t) {
     exec('sdcadm channel set release', function (err, stdout, stderr) {
         t.ifError(err);
-
         t.equal(stdout, 'Update channel has been successfully set to: ' +
-                        '\'release\'\n');
+                        '\'release\'');
         t.equal(stderr, '');
-
         t.end();
     });
 });
 
 
-test('sdcadm channel set', function (t) {
-    exec('sdcadm channel set dev', function (err, stdout, stderr) {
+test('sdcadm channel reset', {
+    skip: CURR_CHANNEL !== null
+}, function (t) {
+    var cmd = util.format('sdcadm channel set %s', CURR_CHANNEL);
+    exec(cmd, function (err, stdout, stderr) {
         t.ifError(err);
 
         t.equal(stdout, 'Update channel has been successfully set to: ' +
-                        '\'dev\'\n');
+                        '\'' + CURR_CHANNEL + '\'');
         t.equal(stderr, '');
-
         t.end();
     });
 });
diff --git a/test/instances.test.js b/test/instances.test.js
index 62307db..4616ed1 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -66,14 +66,13 @@ function checkInstancesDetails(t, instancesDetails) {
     var cmd = 'sdc-vmapi /vms/' + vmUuid + ' | json -H';
 
     exec(cmd, function (err, stdout, stderr) {
-        t.ifError(err);
+        t.ifError(err, 'VMAPI call error');
 
         var vmInfo = common.parseJsonOut(stdout);
         if (!vmInfo) {
             t.ok(false, 'failed to parse JSON for cmd ' + cmd);
             return recur();
         }
-
         t.equal(vmInfo.alias, alias, 'check VM alias is ' + alias);
         t.notEqual(vmInfo.state, 'failed', 'check state for VM ' + vmUuid);
 
@@ -81,7 +80,7 @@ function checkInstancesDetails(t, instancesDetails) {
         var cmd2 = 'sdc-imgapi /images/' + imgUuid + ' | json -H';
 
         exec(cmd2, function (err2, stdout2, stderr2) {
-            t.ifError(err2);
+            t.ifError(err2, 'IMGAPI call error');
 
             var imgInfo = common.parseJsonOut(stdout2);
             if (!imgInfo) {
diff --git a/test/runtests b/test/runtests
index 53d5263..f644d87 100755
--- a/test/runtests
+++ b/test/runtests
@@ -26,8 +26,6 @@ fi
 set -o errexit
 set -o pipefail
 
-
-
 #---- guard
 
 guard_file=/lib/sdc/.sdc-test-no-production-data
@@ -72,7 +70,6 @@ TOP=$(cd $(dirname $0)/../; pwd)
 NODE_INSTALL=$TOP/node
 OUTPUT_DIR=/var/tmp/sdcadmtest
 TAPE=$TOP/node_modules/.bin/tape
-FAILING_LIST=$OUTPUT_DIR/failing-tests.txt
 
 
 # Options.
@@ -99,10 +96,26 @@ do
 done
 
 
+if [[ "${TOP}" == '/opt/smartdc/sdcadm' ]]; then
+  echo "Copying test files to ${OUTPUT_DIR}"
+  DESTDIR=/var/tmp/sdcadmtest
+  rm -rf $OUTPUT_DIR
+  mkdir -p $OUTPUT_DIR
+  cp -PR \
+      $TOP/test \
+      $TOP/node_modules \
+      $TOP/node \
+      $OUTPUT_DIR
+  sh $DESTDIR/test/runtests "${@}"
+  exit $?
+fi
+
+RESULTS=$OUTPUT_DIR/results
 # Setup a clean output dir.
-echo "# Setup a clean output dir ($OUTPUT_DIR)."
-rm -rf $OUTPUT_DIR
-mkdir -p /$OUTPUT_DIR
+echo "# Setup a clean output dir ($RESULTS)."
+rm -rf $RESULTS
+mkdir -p /$RESULTS
+FAILING_LIST=$RESULTS/failing-tests.txt
 touch $FAILING_LIST
 
 cd $TOP
@@ -121,9 +134,9 @@ for file in $test_files; do
     test_file=$(basename $file)
     echo "# $test_file"
     PATH=$NODE_INSTALL/bin:$PATH $TAPE $file \
-        | tee $OUTPUT_DIR/$test_file.tap
+        | tee $RESULTS/$test_file.tap
     if [[ "$?" != "0" ]]; then
-        echo $file >> $OUTPUT_DIR/failing-tests.txt
+        echo $file >> $FAILING_LIST
         [[ -n "$opt_stop_on_failure" ]] && break
     fi
 done
@@ -131,8 +144,8 @@ done
 set -o errexit
 
 echo ""
-echo "# test output in $OUTPUT_DIR:"
-cd $OUTPUT_DIR
+echo "# test output in $RESULTS:"
+cd $RESULTS
 ls *.tap
 
 
@@ -143,8 +156,8 @@ echo "# test results:"
 end_time=$(date +%s)
 elapsed=$((${end_time} - ${start_time}))
 
-tests=$(grep "^# tests [0-9]" $OUTPUT_DIR/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-passed=$(grep "^# pass  [0-9]" $OUTPUT_DIR/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
+tests=$(grep "^# tests [0-9]" $RESULTS/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
+passed=$(grep "^# pass  [0-9]" $RESULTS/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
 [[ -z ${tests} ]] && tests=0
 [[ -z ${passed} ]] && passed=0
 fail=$((${tests} - ${passed}))
diff --git a/test/sdcadm.test.js b/test/sdcadm.test.js
index 2d74af8..35cd336 100644
--- a/test/sdcadm.test.js
+++ b/test/sdcadm.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016, Joyent, Inc.
  */
 
 
@@ -15,7 +15,7 @@ var exec = require('child_process').exec;
 
 test('sdcadm', function (t) {
     exec('sdcadm', function (err, stdout, stderr) {
-        t.ok(err);
+        t.ok(err, 'usage error');
         t.equal(err.code, 1);
 
         t.ok(stdout.match('Usage'));
@@ -28,7 +28,7 @@ test('sdcadm', function (t) {
 
 test('sdcadm --help', function (t) {
     exec('sdcadm --help', function (err, stdout, stderr) {
-        t.ifError(err);
+        t.ifError(err, 'no help error');
 
         t.ok(stdout.match('Usage'));
         t.equal(stderr, '');
@@ -40,9 +40,8 @@ test('sdcadm --help', function (t) {
 
 test('sdcadm --version', function (t) {
     exec('sdcadm --version', function (err, stdout, stderr) {
-        t.ifError(err);
-
-        t.ok(stdout.match(/^sdcadm \d\.\d\.\d \(master-\d+T\d+Z-.+\)/));
+        t.ifError(err, 'no version error');
+        t.ok(stdout.match(/^sdcadm \d+\.\d+\.\d+ \(master-\d+T\d+Z-.+\)/));
         t.equal(stderr, '');
 
         t.end();
diff --git a/test/self-update.test.js b/test/self-update.test.js
index fdd3f5e..3ab3060 100644
--- a/test/self-update.test.js
+++ b/test/self-update.test.js
@@ -5,15 +5,25 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 
 var test = require('tape').test;
 var exec = require('child_process').exec;
+var fs = require('fs');
+var util = require('util');
+var assert = require('assert-plus');
 
+var CURRENT_VERSION = null;
+var CURRENT_BUILDSTAMP = null;
+var LATEST_UUID = null;
+
+function checkUpdateResults(t, err, stdout, stderr, moreStrings) {
+    if (moreStrings) {
+        assert.arrayOfString(moreStrings, 'moreStrings');
+    }
 
-function checkUpdateResults(t, err, stdout, stderr) {
     t.ifError(err);
     t.equal(stderr, '');
 
@@ -28,40 +38,97 @@ function checkUpdateResults(t, err, stdout, stderr) {
         'Updated to sdcadm'
     ];
 
+    if (moreStrings) {
+        findStrings = findStrings.concat(moreStrings);
+    }
+
     findStrings.forEach(function (str) {
         t.ok(stdout.match(str), 'check update string present');
     });
 
-    return t.end();
+    t.end();
+}
+
+function getSdcadmBuildstampVersion(t, cb) {
+    fs.readFile('/opt/smartdc/sdcadm/etc/buildstamp', {
+        encoding: 'utf8'
+    }, function (err, data) {
+        t.ifError(err);
+        t.ok(data);
+        cb(data.trim());
+    });
 }
 
 
+test('setup', function (t) {
+    getSdcadmBuildstampVersion(t, function (data) {
+        CURRENT_BUILDSTAMP = data;
+        var updatesCmd = '/opt/smartdc/bin/updates-imgadm list ' +
+            'tag.buildstamp=' + data + ' --latest -o uuid -H';
+        exec(updatesCmd, function (err2, stdout, stderr) {
+            t.ifError(err2);
+            CURRENT_VERSION = stdout.trim();
+            t.ok(CURRENT_VERSION);
+            t.equal(stderr, '');
+            var updatesCmd2 = '/opt/smartdc/bin/updates-imgadm list ' +
+                'name=sdcadm --latest -o uuid -H';
+            exec(updatesCmd2, function (err3, stdout2, stderr2) {
+                t.ifError(err3);
+                LATEST_UUID = stdout.trim();
+                t.ok(LATEST_UUID);
+                t.equal(stderr, '');
+                t.end();
+            });
+        });
+    });
+});
+
 test('sdcadm self-update --help', function (t) {
     exec('sdcadm self-update --help', function (err, stdout, stderr) {
         t.ifError(err);
-
-        t.notEqual(stdout.indexOf('sdcadm self-update [<options>]'), -1);
+        t.notEqual(stdout.indexOf('sdcadm self-update --latest [<options>]'),
+            -1);
         t.equal(stderr, '');
-
         t.end();
     });
 });
 
 
-test('sdcadm self-update --dry-run', function (t) {
-    exec('sdcadm self-update --dry-run', function (err, stdout, stderr) {
+test('sdcadm self-update --latest --dry-run', function (t) {
+    exec('sdcadm self-update --latest --dry-run',
+        function (err, stdout, stderr) {
         checkUpdateResults(t, err, stdout, stderr);
     });
 });
 
 
-test('sdcadm self-update --allow-major-update --dry-run', function (t) {
-    exec('sdcadm self-update --allow-major-update --dry-run',
-         function (err, stdout, stderr) {
+test('sdcadm self-update --allow-major-update', function (t) {
+    exec('sdcadm self-update --allow-major-update --dry-run --latest',
+        function (err, stdout, stderr) {
         checkUpdateResults(t, err, stdout, stderr);
     });
 });
 
 
-// TODO: how do we fully run self-update without mucking with the sdcadm we're
-// testing?
\ No newline at end of file
+test('sdcadm self-update --latest --channel=staging', function (t) {
+    var cmd = 'sdcadm self-update --latest --channel=staging';
+    exec(cmd, function (err, stdout, stderr) {
+        checkUpdateResults(t, err, stdout, stderr, ['Using channel staging']);
+    });
+});
+
+
+test('sdcadm self-update --latest', function (t) {
+    var cmd = 'sdcadm self-update --latest';
+    exec(cmd, function (err, stdout, stderr) {
+        checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
+    });
+});
+
+
+test('sdcadm self-update IMAGE_UUID', function (t) {
+    var cmd = 'sdcadm self-update ' + CURRENT_VERSION;
+    exec(cmd, function (err, stdout, stderr) {
+        checkUpdateResults(t, err, stdout, stderr, ['Using channel dev']);
+    });
+});
-- 
2.21.0

