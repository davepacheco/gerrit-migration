commit 7e638e60dae2ad6b4870f1de961f7c707eed6793 (refs/changes/34/1234/3)
Author: Joshua M. Clulow <jmc@joyent.com>
Date:   2017-02-06T21:52:19+00:00 (2 years, 8 months ago)
    
    TOOLS-1641 hermes-proxy cannot deal with lots of Manta load balancers

diff --git a/lib/proxy_server.js b/lib/proxy_server.js
index 3bcd5e6..232222b 100644
--- a/lib/proxy_server.js
+++ b/lib/proxy_server.js
@@ -5,134 +5,147 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
 var mod_http = require('http');
 var mod_url = require('url');
 var mod_net = require('net');
-var mod_dns = require('native-dns');
-var mod_vasync = require('vasync');
+var mod_cueball = require('cueball');
 
 function
-BackendList(log, hostname, port, nameservers)
+BackendList(options)
 {
 	var self = this;
 
-	self.bl_log = log;
+	mod_assert.object(options, 'options');
+	mod_assert.object(options.log, 'log');
+	mod_assert.string(options.hostname, 'hostname');
+	mod_assert.number(options.port, 'port');
 
-	self.bl_hostname = hostname;
-	self.bl_port = port;
+	self.bl_log = options.log;
 
-	self.bl_dns_question = mod_dns.Question({
-		name: self.bl_hostname,
-		type: 'A'
-	});
-	self.bl_dns_nameservers = nameservers;
+	self.bl_hostname = options.hostname;
+	self.bl_port = options.port;
 
 	self.bl_backends = [];
 	self.bl_last_backend = 0;
 
-	self.bl_worker_running = false;
-	self.bl_worker_timeout = setTimeout(function () {
-		self._dns_worker();
-	}, 0);
+	self.bl_resolver = new mod_cueball.Resolver({
+		log: self.bl_log,
+
+		domain: self.bl_hostname,
+		defaultPort: self.bl_port,
+
+		recovery: {
+			default: {
+				timeout: 6000,
+				retries: 3,
+				delay: 250,
+				maxDelay: 2500
+			}
+		}
+	});
+	self.bl_resolver.on('added', self._add_resolver.bind(self));
+	self.bl_resolver.on('removed', self._remove_resolver.bind(self));
+
+	self.bl_resolver.start();
 }
 
-BackendList.prototype._resolve = function
-_resolve(name, callback)
+BackendList.prototype._lookup_key = function
+_lookup_key(key)
 {
 	var self = this;
 
-	self.bl_log.debug('resolving %s', name);
+	for (var i = 0; i < self.bl_backends.length; i++) {
+		var be = self.bl_backends[i];
 
-	var _resolve_worker = function _resolve_worker(nameserver, next) {
-		var req = mod_dns.Request({
-			question: self.bl_dns_question,
-			server: nameserver,
-			timeout: 4000,
-			cache: false
-		});
-		var answer;
-		var error;
-
-		req.on('timeout', function () {
-			error = new Error('dns request timeout');
-			error.remoteAddress = nameserver.address;
-			error.remotePort = nameserver.port;
-			error.nameserver = nameserver;
-		});
+		if (be.be_keys.indexOf(key) !== -1)
+			return (be);
+	}
 
-		req.on('message', function (_err, _answer) {
-			self.bl_log.trace({
-				nameserver: nameserver,
-				err: _err,
-				answer: _answer
-			}, 'dns message');
+	return (null);
+};
 
-			error = _err;
-			answer = _answer;
-		});
+BackendList.prototype._add_resolver = function
+_add_resolver(key, backend)
+{
+	var self = this;
 
-		req.on('end', function () {
-			next(error, answer);
-		});
+	/*
+	 * Check if an existing backend has this hostname/address
+	 * pair:
+	 */
+	var be = self.lookup(backend.name, backend.address);
 
-		req.send();
-	};
+	if (be === null) {
+		self.bl_log.info('resolver added backend: ' +
+		    backend.address);
 
-	mod_vasync.forEachParallel({
-		func: _resolve_worker,
-		inputs: self.bl_dns_nameservers
-	}, function (err, results) {
-		self.bl_log.trace({
-			err: err,
-			results: results
-		}, 'DNS response!');
-
-		if (results.successes.length === 0) {
-			if (err) {
-				callback(err);
-			} else {
-				callback(new Error('dns failure'));
+		/*
+		 * No backend exists, so create a new one:
+		 */
+		self.bl_backends.push({
+			be_keys: [ key ],
+			be_name: backend.name,
+			be_ip: backend.address,
+			be_port: backend.port,
+
+			be_birth_time: Date.now(),
+			be_last_update: null,
+			be_death_time: null,
+
+			be_healthy: true,
+			be_active: true,
+
+			be_stats: {
+				connections: 0,
+				bytes_sent: 0,
+				bytes_received: 0
 			}
-			return;
-		}
+		});
+		return;
+	}
 
-		var out = [];
-		var update_ip = function (ip, ttl) {
-			ttl = Math.max(ttl || 60, 60);
-			for (var k = 0; k < out.length; k++) {
-				if (out[k].ip === ip) {
-					out[k].ttl = Math.max(out[k].ttl,
-					    ttl);
-					return;
-				}
-			}
-			out.push({
-				ip: ip,
-				ttl: ttl
-			});
-		};
-		for (var i = 0; i < results.successes.length; i++) {
-			var suc = results.successes[i];
-			var atype = mod_dns.consts.NAME_TO_QTYPE.A;
-
-			if (!suc.answer)
-				continue;
-
-			for (var j = 0; j < suc.answer.length; j++) {
-				var rr = suc.answer[j];
-				if (rr.name === name && rr.type === atype &&
-				    mod_net.isIP(rr.address)) {
-					update_ip(rr.address, rr.ttl);
-				}
-			}
-		}
+	/*
+	 * The backend exists already, but may have a different key.
+	 * Merge in the new key:
+	 */
+	if (be.be_keys.indexOf(key) === -1) {
+		be.be_keys.push(key);
+	}
 
-		callback(null, out);
-	});
+	be.be_last_update = Date.now();
+	be.be_healthy = true;
+	be.be_active = true;
+};
+
+BackendList.prototype._remove_resolver = function
+_remove_resolver(key)
+{
+	var self = this;
+
+	var be = self._lookup_key(key);
+
+	if (be === null) {
+		return;
+	}
+
+	/*
+	 * Remove the key from the list for this backend.
+	 */
+	var idx = be.be_keys.indexOf(key);
+	be.be_keys.splice(idx, 1);
+
+	if (be.be_keys.length > 0) {
+		return;
+	}
+
+	self.bl_log.info('resolver removed backend: ' + be.be_ip);
+
+	be.be_death_time = Date.now();
+	be.be_active = false;
 };
 
 BackendList.prototype.lookup = function
@@ -154,7 +167,6 @@ BackendList.prototype.next = function
 next(name)
 {
 	var self = this;
-	var now = Date.now();
 
 	var tries = 0;
 	while (tries++ < self.bl_backends.length) {
@@ -165,7 +177,7 @@ next(name)
 		if (be.be_name !== name)
 			continue;
 
-		if (be.be_valid_until < now)
+		if (be.be_keys.length < 1)
 			continue;
 
 		return (be);
@@ -174,107 +186,6 @@ next(name)
 	return (null);
 };
 
-BackendList.prototype._resched = function
-_resched()
-{
-	var self = this;
-
-	if (self.bl_worker_timeout)
-		clearTimeout(self.bl_worker_timeout);
-
-	self.bl_worker_timeout = setTimeout(function () {
-		self._dns_worker();
-	}, 30 * 1000);
-};
-
-BackendList.prototype._dns_worker = function
-_dns_worker()
-{
-	var self = this;
-
-	if (self.bl_worker_running)
-		return;
-	self.bl_worker_running = true;
-
-	self._resolve(self.bl_hostname, function (err, res) {
-		var i;
-		var be;
-
-		if (err) {
-			self.bl_log.error({
-				hostname_: self.bl_hostname,
-				err: err
-			}, 'dns lookup error');
-			self.bl_worker_running = false;
-			self._resched();
-			return;
-		}
-
-		self.bl_log.debug({
-			hosts: res
-		}, 'dns response');
-
-		var now = Date.now();
-
-		for (i = 0; i < res.length; i++) {
-			var rr = res[i];
-			be = self.lookup(self.bl_hostname, rr.ip);
-
-			if (!be) {
-				be = {
-					be_name: self.bl_hostname,
-					be_ip: rr.ip,
-					be_port: self.bl_port,
-					be_valid_until: now + rr.ttl * 1000,
-					be_active: true,
-					be_healthy: true,
-					be_reported_gone: false,
-					be_stats: {
-						connections: 0,
-						bytes_sent: 0,
-						bytes_received: 0
-					}
-				};
-				self.bl_backends.push(be);
-				self.bl_log.info({
-					bename: be.be_name,
-					backend: be.be_ip,
-					ttl: (be.be_valid_until - now) / 1000
-				}, 'new backend');
-			} else {
-				if (be.be_reported_gone) {
-					self.bl_log.info({
-						bename: be.be_name,
-						backend: be.be_ip,
-						ttl: (be.be_valid_until -
-						    now) / 1000
-					}, 'backend returned');
-				}
-				be.be_reported_gone = false;
-				be.be_valid_until = now + rr.ttl * 1000;
-				be.be_healthy = true;
-			}
-		}
-
-		for (i = 0; i < self.bl_backends.length; i++) {
-			be = self.bl_backends[i];
-
-			if (be.be_valid_until < now) {
-				if (!be.be_reported_gone) {
-					self.bl_log.info({
-						bename: be.be_name,
-						backend: be.be_ip
-					}, 'backend expired');
-					be.be_reported_gone = true;
-				}
-			}
-		}
-
-		self.bl_worker_running = false;
-		self._resched();
-	});
-};
-
 function
 ProxyServer(opts)
 {
@@ -287,7 +198,6 @@ ProxyServer(opts)
 	mod_assert.string(opts.backend_host, 'opts.backend_host');
 	mod_assert.number(opts.backend_port, 'opts.backend_port');
 	mod_assert.optionalFunc(opts.authfunc, 'opts.authfunc');
-	mod_assert.arrayOfObject(opts.nameservers, 'opts.nameservers');
 
 	self.px_log = opts.log;
 
@@ -297,9 +207,13 @@ ProxyServer(opts)
 	self.px_backend_host = opts.backend_host;
 	self.px_backend_port = opts.backend_port;
 
-	self.px_backends = new BackendList(opts.log.child({
-		component: 'ProxyServerBackendList'
-	}), opts.backend_host, opts.backend_port, opts.nameservers);
+	self.px_backends = new BackendList({
+		log: opts.log.child({
+			component: 'ProxyServerBackendList'
+		}),
+		hostname: opts.backend_host,
+		port: opts.backend_port
+	});
 
 	self.px_server = mod_http.createServer();
 	self.px_server.on('connect', self._on_connect.bind(self));
@@ -470,6 +384,8 @@ _after_auth(req, socket, head, dest_host, dest_port)
 			client: socket.remoteAddress + ':' + socket.remotePort
 		});
 
+		log.info('backend connected');
+
 		socket.write(make_response(req.httpVersion, 200,
 		    'Connection Established'));
 
diff --git a/package.json b/package.json
index 787e2a2..3e6f1fd 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "hermes",
-  "version": "0.1.1",
+  "version": "0.2.0",
   "description": "Centralised tool to upload SDC logs to Manta",
   "main": "hermes.js",
   "author": "Joshua M. Clulow <jmc@joyent.com>",
@@ -16,9 +16,9 @@
     "vasync": "^1.4.3",
     "verror": "^1.4.0",
     "lstream": "^0.0.4",
-    "native-dns": "^0.4.1",
     "backoff": "^2.3.0",
-    "jsprim": "^0.5.1"
+    "jsprim": "^0.5.1",
+    "cueball": "^2.0.1"
   },
   "devDependencies": {
     "jshint": "^2.5.6"
diff --git a/proxy.js b/proxy.js
index 7651aed..6ec64aa 100644
--- a/proxy.js
+++ b/proxy.js
@@ -88,11 +88,6 @@ validate_config(cfg)
 		return (false);
 	}
 
-	if (!Array.isArray(cfg.nameservers)) {
-		LOG.info('configuration invalid/missing "nameservers"');
-		return (false);
-	}
-
 	if (typeof (cfg.backend_host) !== 'string' ||
 	    typeof (cfg.backend_port) !== 'number' ||
 	    isNaN(cfg.backend_port) || cfg.backend_port < 1) {
@@ -125,11 +120,7 @@ main()
 		bind_port: CONFIG.bind_port,
 		bind_ip: CONFIG.bind_ip,
 		backend_host: CONFIG.backend_host,
-		backend_port: CONFIG.backend_port,
-		nameservers: [
-			{ address: '8.8.8.8', port: 53, type: 'udp' },
-			{ address: '8.8.4.4', port: 53, type: 'udp' }
-		]
+		backend_port: CONFIG.backend_port
 	});
 }
 
diff --git a/sapi_manifests/hermes-proxy/template b/sapi_manifests/hermes-proxy/template
index a65859a..1b7f179 100644
--- a/sapi_manifests/hermes-proxy/template
+++ b/sapi_manifests/hermes-proxy/template
@@ -2,9 +2,5 @@
   "bind_ip": "{{{auto.ADMIN_IP}}}",
   "bind_port": 3128,
   "backend": "{{{SDC_MANTA_URL}}}",
-  "log_level": "{{{HERMES_LOG_LEVEL}}}",
-  "nameservers": [
-    { "address": "8.8.8.8", "port": 53, "type": "udp" },
-    { "address": "8.8.4.4", "port": 53, "type": "udp" }
-  ]
+  "log_level": "{{{HERMES_LOG_LEVEL}}}"
 }
